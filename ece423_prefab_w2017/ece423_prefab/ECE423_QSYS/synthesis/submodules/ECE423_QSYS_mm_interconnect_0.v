// ECE423_QSYS_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 15.1 185

`timescale 1 ps / 1 ps
module ECE423_QSYS_mm_interconnect_0 (
		input  wire         clk_125_clk_clk,                                     //                                   clk_125_clk.clk
		input  wire         clk_50_out_clk_clk,                                  //                                clk_50_out_clk.clk
		input  wire         cpu_reset_reset_bridge_in_reset_reset,               //               cpu_reset_reset_bridge_in_reset.reset
		input  wire         lpddr2_mp_cmd_reset_n_0_reset_bridge_in_reset_reset, // lpddr2_mp_cmd_reset_n_0_reset_bridge_in_reset.reset
		input  wire         sd_cont_0_reset_reset_bridge_in_reset_reset,         //         sd_cont_0_reset_reset_bridge_in_reset.reset
		input  wire         sysid_reset_reset_bridge_in_reset_reset,             //             sysid_reset_reset_bridge_in_reset.reset
		input  wire [29:0]  cpu_data_master_address,                             //                               cpu_data_master.address
		output wire         cpu_data_master_waitrequest,                         //                                              .waitrequest
		input  wire [3:0]   cpu_data_master_burstcount,                          //                                              .burstcount
		input  wire [3:0]   cpu_data_master_byteenable,                          //                                              .byteenable
		input  wire         cpu_data_master_read,                                //                                              .read
		output wire [31:0]  cpu_data_master_readdata,                            //                                              .readdata
		output wire         cpu_data_master_readdatavalid,                       //                                              .readdatavalid
		input  wire         cpu_data_master_write,                               //                                              .write
		input  wire [31:0]  cpu_data_master_writedata,                           //                                              .writedata
		input  wire         cpu_data_master_debugaccess,                         //                                              .debugaccess
		input  wire [29:0]  cpu_instruction_master_address,                      //                        cpu_instruction_master.address
		output wire         cpu_instruction_master_waitrequest,                  //                                              .waitrequest
		input  wire         cpu_instruction_master_read,                         //                                              .read
		output wire [31:0]  cpu_instruction_master_readdata,                     //                                              .readdata
		output wire         cpu_instruction_master_readdatavalid,                //                                              .readdatavalid
		input  wire [31:0]  sd_cont_0_master_address,                            //                              sd_cont_0_master.address
		output wire         sd_cont_0_master_waitrequest,                        //                                              .waitrequest
		input  wire         sd_cont_0_master_read,                               //                                              .read
		output wire [31:0]  sd_cont_0_master_readdata,                           //                                              .readdata
		input  wire         sd_cont_0_master_write,                              //                                              .write
		input  wire [31:0]  sd_cont_0_master_writedata,                          //                                              .writedata
		output wire [8:0]   cpu_debug_mem_slave_address,                         //                           cpu_debug_mem_slave.address
		output wire         cpu_debug_mem_slave_write,                           //                                              .write
		output wire         cpu_debug_mem_slave_read,                            //                                              .read
		input  wire [31:0]  cpu_debug_mem_slave_readdata,                        //                                              .readdata
		output wire [31:0]  cpu_debug_mem_slave_writedata,                       //                                              .writedata
		output wire [3:0]   cpu_debug_mem_slave_byteenable,                      //                                              .byteenable
		input  wire         cpu_debug_mem_slave_waitrequest,                     //                                              .waitrequest
		output wire         cpu_debug_mem_slave_debugaccess,                     //                                              .debugaccess
		output wire [2:0]   from_idct_hwacel_csr_address,                        //                          from_idct_hwacel_csr.address
		output wire         from_idct_hwacel_csr_write,                          //                                              .write
		output wire         from_idct_hwacel_csr_read,                           //                                              .read
		input  wire [31:0]  from_idct_hwacel_csr_readdata,                       //                                              .readdata
		output wire [31:0]  from_idct_hwacel_csr_writedata,                      //                                              .writedata
		output wire [3:0]   from_idct_hwacel_csr_byteenable,                     //                                              .byteenable
		output wire         from_idct_hwacel_descriptor_slave_write,             //             from_idct_hwacel_descriptor_slave.write
		output wire [127:0] from_idct_hwacel_descriptor_slave_writedata,         //                                              .writedata
		output wire [15:0]  from_idct_hwacel_descriptor_slave_byteenable,        //                                              .byteenable
		input  wire         from_idct_hwacel_descriptor_slave_waitrequest,       //                                              .waitrequest
		output wire [1:0]   i2c_scl_s1_address,                                  //                                    i2c_scl_s1.address
		output wire         i2c_scl_s1_write,                                    //                                              .write
		input  wire [31:0]  i2c_scl_s1_readdata,                                 //                                              .readdata
		output wire [31:0]  i2c_scl_s1_writedata,                                //                                              .writedata
		output wire         i2c_scl_s1_chipselect,                               //                                              .chipselect
		output wire [1:0]   i2c_sda_s1_address,                                  //                                    i2c_sda_s1.address
		output wire         i2c_sda_s1_write,                                    //                                              .write
		input  wire [31:0]  i2c_sda_s1_readdata,                                 //                                              .readdata
		output wire [31:0]  i2c_sda_s1_writedata,                                //                                              .writedata
		output wire         i2c_sda_s1_chipselect,                               //                                              .chipselect
		output wire [0:0]   jtag_uart_avalon_jtag_slave_address,                 //                   jtag_uart_avalon_jtag_slave.address
		output wire         jtag_uart_avalon_jtag_slave_write,                   //                                              .write
		output wire         jtag_uart_avalon_jtag_slave_read,                    //                                              .read
		input  wire [31:0]  jtag_uart_avalon_jtag_slave_readdata,                //                                              .readdata
		output wire [31:0]  jtag_uart_avalon_jtag_slave_writedata,               //                                              .writedata
		input  wire         jtag_uart_avalon_jtag_slave_waitrequest,             //                                              .waitrequest
		output wire         jtag_uart_avalon_jtag_slave_chipselect,              //                                              .chipselect
		output wire [1:0]   key_s1_address,                                      //                                        key_s1.address
		output wire         key_s1_write,                                        //                                              .write
		input  wire [31:0]  key_s1_readdata,                                     //                                              .readdata
		output wire [31:0]  key_s1_writedata,                                    //                                              .writedata
		output wire         key_s1_chipselect,                                   //                                              .chipselect
		output wire [2:0]   ledg_s1_address,                                     //                                       ledg_s1.address
		output wire         ledg_s1_write,                                       //                                              .write
		input  wire [31:0]  ledg_s1_readdata,                                    //                                              .readdata
		output wire [31:0]  ledg_s1_writedata,                                   //                                              .writedata
		output wire         ledg_s1_chipselect,                                  //                                              .chipselect
		output wire [2:0]   ledr_s1_address,                                     //                                       ledr_s1.address
		output wire         ledr_s1_write,                                       //                                              .write
		input  wire [31:0]  ledr_s1_readdata,                                    //                                              .readdata
		output wire [31:0]  ledr_s1_writedata,                                   //                                              .writedata
		output wire         ledr_s1_chipselect,                                  //                                              .chipselect
		output wire [26:0]  lpddr2_avl_0_address,                                //                                  lpddr2_avl_0.address
		output wire         lpddr2_avl_0_write,                                  //                                              .write
		output wire         lpddr2_avl_0_read,                                   //                                              .read
		input  wire [31:0]  lpddr2_avl_0_readdata,                               //                                              .readdata
		output wire [31:0]  lpddr2_avl_0_writedata,                              //                                              .writedata
		output wire         lpddr2_avl_0_beginbursttransfer,                     //                                              .beginbursttransfer
		output wire [7:0]   lpddr2_avl_0_burstcount,                             //                                              .burstcount
		output wire [3:0]   lpddr2_avl_0_byteenable,                             //                                              .byteenable
		input  wire         lpddr2_avl_0_readdatavalid,                          //                                              .readdatavalid
		input  wire         lpddr2_avl_0_waitrequest,                            //                                              .waitrequest
		output wire [7:0]   sd_cont_0_slave_address,                             //                               sd_cont_0_slave.address
		output wire         sd_cont_0_slave_write,                               //                                              .write
		output wire         sd_cont_0_slave_read,                                //                                              .read
		input  wire [31:0]  sd_cont_0_slave_readdata,                            //                                              .readdata
		output wire [31:0]  sd_cont_0_slave_writedata,                           //                                              .writedata
		input  wire         sd_cont_0_slave_waitrequest,                         //                                              .waitrequest
		output wire         sd_cont_0_slave_chipselect,                          //                                              .chipselect
		output wire [18:0]  sram_uas_address,                                    //                                      sram_uas.address
		output wire         sram_uas_write,                                      //                                              .write
		output wire         sram_uas_read,                                       //                                              .read
		input  wire [15:0]  sram_uas_readdata,                                   //                                              .readdata
		output wire [15:0]  sram_uas_writedata,                                  //                                              .writedata
		output wire [1:0]   sram_uas_burstcount,                                 //                                              .burstcount
		output wire [1:0]   sram_uas_byteenable,                                 //                                              .byteenable
		input  wire         sram_uas_readdatavalid,                              //                                              .readdatavalid
		input  wire         sram_uas_waitrequest,                                //                                              .waitrequest
		output wire         sram_uas_lock,                                       //                                              .lock
		output wire         sram_uas_debugaccess,                                //                                              .debugaccess
		output wire [0:0]   sysid_control_slave_address,                         //                           sysid_control_slave.address
		input  wire [31:0]  sysid_control_slave_readdata,                        //                                              .readdata
		output wire [2:0]   timer_0_s1_address,                                  //                                    timer_0_s1.address
		output wire         timer_0_s1_write,                                    //                                              .write
		input  wire [15:0]  timer_0_s1_readdata,                                 //                                              .readdata
		output wire [15:0]  timer_0_s1_writedata,                                //                                              .writedata
		output wire         timer_0_s1_chipselect,                               //                                              .chipselect
		output wire [3:0]   timer_1_s1_address,                                  //                                    timer_1_s1.address
		output wire         timer_1_s1_write,                                    //                                              .write
		input  wire [15:0]  timer_1_s1_readdata,                                 //                                              .readdata
		output wire [15:0]  timer_1_s1_writedata,                                //                                              .writedata
		output wire         timer_1_s1_chipselect,                               //                                              .chipselect
		output wire [2:0]   to_idct_hwacel_csr_address,                          //                            to_idct_hwacel_csr.address
		output wire         to_idct_hwacel_csr_write,                            //                                              .write
		output wire         to_idct_hwacel_csr_read,                             //                                              .read
		input  wire [31:0]  to_idct_hwacel_csr_readdata,                         //                                              .readdata
		output wire [31:0]  to_idct_hwacel_csr_writedata,                        //                                              .writedata
		output wire [3:0]   to_idct_hwacel_csr_byteenable,                       //                                              .byteenable
		output wire         to_idct_hwacel_descriptor_slave_write,               //               to_idct_hwacel_descriptor_slave.write
		output wire [127:0] to_idct_hwacel_descriptor_slave_writedata,           //                                              .writedata
		output wire [15:0]  to_idct_hwacel_descriptor_slave_byteenable,          //                                              .byteenable
		input  wire         to_idct_hwacel_descriptor_slave_waitrequest,         //                                              .waitrequest
		output wire [2:0]   video_dma_csr_address,                               //                                 video_dma_csr.address
		output wire         video_dma_csr_write,                                 //                                              .write
		output wire         video_dma_csr_read,                                  //                                              .read
		input  wire [31:0]  video_dma_csr_readdata,                              //                                              .readdata
		output wire [31:0]  video_dma_csr_writedata,                             //                                              .writedata
		output wire [3:0]   video_dma_csr_byteenable,                            //                                              .byteenable
		output wire         video_dma_descriptor_slave_write,                    //                    video_dma_descriptor_slave.write
		output wire [127:0] video_dma_descriptor_slave_writedata,                //                                              .writedata
		output wire [15:0]  video_dma_descriptor_slave_byteenable,               //                                              .byteenable
		input  wire         video_dma_descriptor_slave_waitrequest               //                                              .waitrequest
	);

	wire          cpu_data_master_translator_avalon_universal_master_0_waitrequest;          // cpu_data_master_agent:av_waitrequest -> cpu_data_master_translator:uav_waitrequest
	wire   [31:0] cpu_data_master_translator_avalon_universal_master_0_readdata;             // cpu_data_master_agent:av_readdata -> cpu_data_master_translator:uav_readdata
	wire          cpu_data_master_translator_avalon_universal_master_0_debugaccess;          // cpu_data_master_translator:uav_debugaccess -> cpu_data_master_agent:av_debugaccess
	wire   [31:0] cpu_data_master_translator_avalon_universal_master_0_address;              // cpu_data_master_translator:uav_address -> cpu_data_master_agent:av_address
	wire          cpu_data_master_translator_avalon_universal_master_0_read;                 // cpu_data_master_translator:uav_read -> cpu_data_master_agent:av_read
	wire    [3:0] cpu_data_master_translator_avalon_universal_master_0_byteenable;           // cpu_data_master_translator:uav_byteenable -> cpu_data_master_agent:av_byteenable
	wire          cpu_data_master_translator_avalon_universal_master_0_readdatavalid;        // cpu_data_master_agent:av_readdatavalid -> cpu_data_master_translator:uav_readdatavalid
	wire          cpu_data_master_translator_avalon_universal_master_0_lock;                 // cpu_data_master_translator:uav_lock -> cpu_data_master_agent:av_lock
	wire          cpu_data_master_translator_avalon_universal_master_0_write;                // cpu_data_master_translator:uav_write -> cpu_data_master_agent:av_write
	wire   [31:0] cpu_data_master_translator_avalon_universal_master_0_writedata;            // cpu_data_master_translator:uav_writedata -> cpu_data_master_agent:av_writedata
	wire    [5:0] cpu_data_master_translator_avalon_universal_master_0_burstcount;           // cpu_data_master_translator:uav_burstcount -> cpu_data_master_agent:av_burstcount
	wire          cpu_instruction_master_translator_avalon_universal_master_0_waitrequest;   // cpu_instruction_master_agent:av_waitrequest -> cpu_instruction_master_translator:uav_waitrequest
	wire   [31:0] cpu_instruction_master_translator_avalon_universal_master_0_readdata;      // cpu_instruction_master_agent:av_readdata -> cpu_instruction_master_translator:uav_readdata
	wire          cpu_instruction_master_translator_avalon_universal_master_0_debugaccess;   // cpu_instruction_master_translator:uav_debugaccess -> cpu_instruction_master_agent:av_debugaccess
	wire   [31:0] cpu_instruction_master_translator_avalon_universal_master_0_address;       // cpu_instruction_master_translator:uav_address -> cpu_instruction_master_agent:av_address
	wire          cpu_instruction_master_translator_avalon_universal_master_0_read;          // cpu_instruction_master_translator:uav_read -> cpu_instruction_master_agent:av_read
	wire    [3:0] cpu_instruction_master_translator_avalon_universal_master_0_byteenable;    // cpu_instruction_master_translator:uav_byteenable -> cpu_instruction_master_agent:av_byteenable
	wire          cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid; // cpu_instruction_master_agent:av_readdatavalid -> cpu_instruction_master_translator:uav_readdatavalid
	wire          cpu_instruction_master_translator_avalon_universal_master_0_lock;          // cpu_instruction_master_translator:uav_lock -> cpu_instruction_master_agent:av_lock
	wire          cpu_instruction_master_translator_avalon_universal_master_0_write;         // cpu_instruction_master_translator:uav_write -> cpu_instruction_master_agent:av_write
	wire   [31:0] cpu_instruction_master_translator_avalon_universal_master_0_writedata;     // cpu_instruction_master_translator:uav_writedata -> cpu_instruction_master_agent:av_writedata
	wire    [2:0] cpu_instruction_master_translator_avalon_universal_master_0_burstcount;    // cpu_instruction_master_translator:uav_burstcount -> cpu_instruction_master_agent:av_burstcount
	wire          sd_cont_0_master_translator_avalon_universal_master_0_waitrequest;         // sd_cont_0_master_agent:av_waitrequest -> sd_cont_0_master_translator:uav_waitrequest
	wire   [31:0] sd_cont_0_master_translator_avalon_universal_master_0_readdata;            // sd_cont_0_master_agent:av_readdata -> sd_cont_0_master_translator:uav_readdata
	wire          sd_cont_0_master_translator_avalon_universal_master_0_debugaccess;         // sd_cont_0_master_translator:uav_debugaccess -> sd_cont_0_master_agent:av_debugaccess
	wire   [31:0] sd_cont_0_master_translator_avalon_universal_master_0_address;             // sd_cont_0_master_translator:uav_address -> sd_cont_0_master_agent:av_address
	wire          sd_cont_0_master_translator_avalon_universal_master_0_read;                // sd_cont_0_master_translator:uav_read -> sd_cont_0_master_agent:av_read
	wire    [3:0] sd_cont_0_master_translator_avalon_universal_master_0_byteenable;          // sd_cont_0_master_translator:uav_byteenable -> sd_cont_0_master_agent:av_byteenable
	wire          sd_cont_0_master_translator_avalon_universal_master_0_readdatavalid;       // sd_cont_0_master_agent:av_readdatavalid -> sd_cont_0_master_translator:uav_readdatavalid
	wire          sd_cont_0_master_translator_avalon_universal_master_0_lock;                // sd_cont_0_master_translator:uav_lock -> sd_cont_0_master_agent:av_lock
	wire          sd_cont_0_master_translator_avalon_universal_master_0_write;               // sd_cont_0_master_translator:uav_write -> sd_cont_0_master_agent:av_write
	wire   [31:0] sd_cont_0_master_translator_avalon_universal_master_0_writedata;           // sd_cont_0_master_translator:uav_writedata -> sd_cont_0_master_agent:av_writedata
	wire    [2:0] sd_cont_0_master_translator_avalon_universal_master_0_burstcount;          // sd_cont_0_master_translator:uav_burstcount -> sd_cont_0_master_agent:av_burstcount
	wire          rsp_mux_002_src_valid;                                                     // rsp_mux_002:src_valid -> sd_cont_0_master_agent:rp_valid
	wire  [118:0] rsp_mux_002_src_data;                                                      // rsp_mux_002:src_data -> sd_cont_0_master_agent:rp_data
	wire          rsp_mux_002_src_ready;                                                     // sd_cont_0_master_agent:rp_ready -> rsp_mux_002:src_ready
	wire   [18:0] rsp_mux_002_src_channel;                                                   // rsp_mux_002:src_channel -> sd_cont_0_master_agent:rp_channel
	wire          rsp_mux_002_src_startofpacket;                                             // rsp_mux_002:src_startofpacket -> sd_cont_0_master_agent:rp_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                               // rsp_mux_002:src_endofpacket -> sd_cont_0_master_agent:rp_endofpacket
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_readdata;                             // jtag_uart_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_waitrequest;                          // jtag_uart_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_avalon_jtag_slave_agent_m0_debugaccess;                          // jtag_uart_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_avalon_jtag_slave_translator:uav_debugaccess
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_address;                              // jtag_uart_avalon_jtag_slave_agent:m0_address -> jtag_uart_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_avalon_jtag_slave_agent_m0_byteenable;                           // jtag_uart_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_avalon_jtag_slave_agent_m0_read;                                 // jtag_uart_avalon_jtag_slave_agent:m0_read -> jtag_uart_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid;                        // jtag_uart_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_avalon_jtag_slave_agent_m0_lock;                                 // jtag_uart_avalon_jtag_slave_agent:m0_lock -> jtag_uart_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_writedata;                            // jtag_uart_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_write;                                // jtag_uart_avalon_jtag_slave_agent:m0_write -> jtag_uart_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_avalon_jtag_slave_agent_m0_burstcount;                           // jtag_uart_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_valid;                         // jtag_uart_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [119:0] jtag_uart_avalon_jtag_slave_agent_rf_source_data;                          // jtag_uart_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_ready;                         // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket;                 // jtag_uart_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket;                   // jtag_uart_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid;                      // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_avalon_jtag_slave_agent:rf_sink_valid
	wire  [119:0] jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data;                       // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready;                      // jtag_uart_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;              // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid;                    // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_valid -> jtag_uart_avalon_jtag_slave_agent_rdata_fifo:in_valid
	wire   [33:0] jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data;                     // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_data -> jtag_uart_avalon_jtag_slave_agent_rdata_fifo:in_data
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready;                    // jtag_uart_avalon_jtag_slave_agent_rdata_fifo:in_ready -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire   [31:0] lpddr2_avl_0_agent_m0_readdata;                                            // lpddr2_avl_0_translator:uav_readdata -> lpddr2_avl_0_agent:m0_readdata
	wire          lpddr2_avl_0_agent_m0_waitrequest;                                         // lpddr2_avl_0_translator:uav_waitrequest -> lpddr2_avl_0_agent:m0_waitrequest
	wire          lpddr2_avl_0_agent_m0_debugaccess;                                         // lpddr2_avl_0_agent:m0_debugaccess -> lpddr2_avl_0_translator:uav_debugaccess
	wire   [31:0] lpddr2_avl_0_agent_m0_address;                                             // lpddr2_avl_0_agent:m0_address -> lpddr2_avl_0_translator:uav_address
	wire    [3:0] lpddr2_avl_0_agent_m0_byteenable;                                          // lpddr2_avl_0_agent:m0_byteenable -> lpddr2_avl_0_translator:uav_byteenable
	wire          lpddr2_avl_0_agent_m0_read;                                                // lpddr2_avl_0_agent:m0_read -> lpddr2_avl_0_translator:uav_read
	wire          lpddr2_avl_0_agent_m0_readdatavalid;                                       // lpddr2_avl_0_translator:uav_readdatavalid -> lpddr2_avl_0_agent:m0_readdatavalid
	wire          lpddr2_avl_0_agent_m0_lock;                                                // lpddr2_avl_0_agent:m0_lock -> lpddr2_avl_0_translator:uav_lock
	wire   [31:0] lpddr2_avl_0_agent_m0_writedata;                                           // lpddr2_avl_0_agent:m0_writedata -> lpddr2_avl_0_translator:uav_writedata
	wire          lpddr2_avl_0_agent_m0_write;                                               // lpddr2_avl_0_agent:m0_write -> lpddr2_avl_0_translator:uav_write
	wire    [9:0] lpddr2_avl_0_agent_m0_burstcount;                                          // lpddr2_avl_0_agent:m0_burstcount -> lpddr2_avl_0_translator:uav_burstcount
	wire          lpddr2_avl_0_agent_rf_source_valid;                                        // lpddr2_avl_0_agent:rf_source_valid -> lpddr2_avl_0_agent_rsp_fifo:in_valid
	wire  [119:0] lpddr2_avl_0_agent_rf_source_data;                                         // lpddr2_avl_0_agent:rf_source_data -> lpddr2_avl_0_agent_rsp_fifo:in_data
	wire          lpddr2_avl_0_agent_rf_source_ready;                                        // lpddr2_avl_0_agent_rsp_fifo:in_ready -> lpddr2_avl_0_agent:rf_source_ready
	wire          lpddr2_avl_0_agent_rf_source_startofpacket;                                // lpddr2_avl_0_agent:rf_source_startofpacket -> lpddr2_avl_0_agent_rsp_fifo:in_startofpacket
	wire          lpddr2_avl_0_agent_rf_source_endofpacket;                                  // lpddr2_avl_0_agent:rf_source_endofpacket -> lpddr2_avl_0_agent_rsp_fifo:in_endofpacket
	wire          lpddr2_avl_0_agent_rsp_fifo_out_valid;                                     // lpddr2_avl_0_agent_rsp_fifo:out_valid -> lpddr2_avl_0_agent:rf_sink_valid
	wire  [119:0] lpddr2_avl_0_agent_rsp_fifo_out_data;                                      // lpddr2_avl_0_agent_rsp_fifo:out_data -> lpddr2_avl_0_agent:rf_sink_data
	wire          lpddr2_avl_0_agent_rsp_fifo_out_ready;                                     // lpddr2_avl_0_agent:rf_sink_ready -> lpddr2_avl_0_agent_rsp_fifo:out_ready
	wire          lpddr2_avl_0_agent_rsp_fifo_out_startofpacket;                             // lpddr2_avl_0_agent_rsp_fifo:out_startofpacket -> lpddr2_avl_0_agent:rf_sink_startofpacket
	wire          lpddr2_avl_0_agent_rsp_fifo_out_endofpacket;                               // lpddr2_avl_0_agent_rsp_fifo:out_endofpacket -> lpddr2_avl_0_agent:rf_sink_endofpacket
	wire          lpddr2_avl_0_agent_rdata_fifo_src_valid;                                   // lpddr2_avl_0_agent:rdata_fifo_src_valid -> lpddr2_avl_0_agent_rdata_fifo:in_valid
	wire   [33:0] lpddr2_avl_0_agent_rdata_fifo_src_data;                                    // lpddr2_avl_0_agent:rdata_fifo_src_data -> lpddr2_avl_0_agent_rdata_fifo:in_data
	wire          lpddr2_avl_0_agent_rdata_fifo_src_ready;                                   // lpddr2_avl_0_agent_rdata_fifo:in_ready -> lpddr2_avl_0_agent:rdata_fifo_src_ready
	wire   [31:0] sysid_control_slave_agent_m0_readdata;                                     // sysid_control_slave_translator:uav_readdata -> sysid_control_slave_agent:m0_readdata
	wire          sysid_control_slave_agent_m0_waitrequest;                                  // sysid_control_slave_translator:uav_waitrequest -> sysid_control_slave_agent:m0_waitrequest
	wire          sysid_control_slave_agent_m0_debugaccess;                                  // sysid_control_slave_agent:m0_debugaccess -> sysid_control_slave_translator:uav_debugaccess
	wire   [31:0] sysid_control_slave_agent_m0_address;                                      // sysid_control_slave_agent:m0_address -> sysid_control_slave_translator:uav_address
	wire    [3:0] sysid_control_slave_agent_m0_byteenable;                                   // sysid_control_slave_agent:m0_byteenable -> sysid_control_slave_translator:uav_byteenable
	wire          sysid_control_slave_agent_m0_read;                                         // sysid_control_slave_agent:m0_read -> sysid_control_slave_translator:uav_read
	wire          sysid_control_slave_agent_m0_readdatavalid;                                // sysid_control_slave_translator:uav_readdatavalid -> sysid_control_slave_agent:m0_readdatavalid
	wire          sysid_control_slave_agent_m0_lock;                                         // sysid_control_slave_agent:m0_lock -> sysid_control_slave_translator:uav_lock
	wire   [31:0] sysid_control_slave_agent_m0_writedata;                                    // sysid_control_slave_agent:m0_writedata -> sysid_control_slave_translator:uav_writedata
	wire          sysid_control_slave_agent_m0_write;                                        // sysid_control_slave_agent:m0_write -> sysid_control_slave_translator:uav_write
	wire    [2:0] sysid_control_slave_agent_m0_burstcount;                                   // sysid_control_slave_agent:m0_burstcount -> sysid_control_slave_translator:uav_burstcount
	wire          sysid_control_slave_agent_rf_source_valid;                                 // sysid_control_slave_agent:rf_source_valid -> sysid_control_slave_agent_rsp_fifo:in_valid
	wire  [119:0] sysid_control_slave_agent_rf_source_data;                                  // sysid_control_slave_agent:rf_source_data -> sysid_control_slave_agent_rsp_fifo:in_data
	wire          sysid_control_slave_agent_rf_source_ready;                                 // sysid_control_slave_agent_rsp_fifo:in_ready -> sysid_control_slave_agent:rf_source_ready
	wire          sysid_control_slave_agent_rf_source_startofpacket;                         // sysid_control_slave_agent:rf_source_startofpacket -> sysid_control_slave_agent_rsp_fifo:in_startofpacket
	wire          sysid_control_slave_agent_rf_source_endofpacket;                           // sysid_control_slave_agent:rf_source_endofpacket -> sysid_control_slave_agent_rsp_fifo:in_endofpacket
	wire          sysid_control_slave_agent_rsp_fifo_out_valid;                              // sysid_control_slave_agent_rsp_fifo:out_valid -> sysid_control_slave_agent:rf_sink_valid
	wire  [119:0] sysid_control_slave_agent_rsp_fifo_out_data;                               // sysid_control_slave_agent_rsp_fifo:out_data -> sysid_control_slave_agent:rf_sink_data
	wire          sysid_control_slave_agent_rsp_fifo_out_ready;                              // sysid_control_slave_agent:rf_sink_ready -> sysid_control_slave_agent_rsp_fifo:out_ready
	wire          sysid_control_slave_agent_rsp_fifo_out_startofpacket;                      // sysid_control_slave_agent_rsp_fifo:out_startofpacket -> sysid_control_slave_agent:rf_sink_startofpacket
	wire          sysid_control_slave_agent_rsp_fifo_out_endofpacket;                        // sysid_control_slave_agent_rsp_fifo:out_endofpacket -> sysid_control_slave_agent:rf_sink_endofpacket
	wire          sysid_control_slave_agent_rdata_fifo_src_valid;                            // sysid_control_slave_agent:rdata_fifo_src_valid -> sysid_control_slave_agent_rdata_fifo:in_valid
	wire   [33:0] sysid_control_slave_agent_rdata_fifo_src_data;                             // sysid_control_slave_agent:rdata_fifo_src_data -> sysid_control_slave_agent_rdata_fifo:in_data
	wire          sysid_control_slave_agent_rdata_fifo_src_ready;                            // sysid_control_slave_agent_rdata_fifo:in_ready -> sysid_control_slave_agent:rdata_fifo_src_ready
	wire   [31:0] video_dma_csr_agent_m0_readdata;                                           // video_dma_csr_translator:uav_readdata -> video_dma_csr_agent:m0_readdata
	wire          video_dma_csr_agent_m0_waitrequest;                                        // video_dma_csr_translator:uav_waitrequest -> video_dma_csr_agent:m0_waitrequest
	wire          video_dma_csr_agent_m0_debugaccess;                                        // video_dma_csr_agent:m0_debugaccess -> video_dma_csr_translator:uav_debugaccess
	wire   [31:0] video_dma_csr_agent_m0_address;                                            // video_dma_csr_agent:m0_address -> video_dma_csr_translator:uav_address
	wire    [3:0] video_dma_csr_agent_m0_byteenable;                                         // video_dma_csr_agent:m0_byteenable -> video_dma_csr_translator:uav_byteenable
	wire          video_dma_csr_agent_m0_read;                                               // video_dma_csr_agent:m0_read -> video_dma_csr_translator:uav_read
	wire          video_dma_csr_agent_m0_readdatavalid;                                      // video_dma_csr_translator:uav_readdatavalid -> video_dma_csr_agent:m0_readdatavalid
	wire          video_dma_csr_agent_m0_lock;                                               // video_dma_csr_agent:m0_lock -> video_dma_csr_translator:uav_lock
	wire   [31:0] video_dma_csr_agent_m0_writedata;                                          // video_dma_csr_agent:m0_writedata -> video_dma_csr_translator:uav_writedata
	wire          video_dma_csr_agent_m0_write;                                              // video_dma_csr_agent:m0_write -> video_dma_csr_translator:uav_write
	wire    [2:0] video_dma_csr_agent_m0_burstcount;                                         // video_dma_csr_agent:m0_burstcount -> video_dma_csr_translator:uav_burstcount
	wire          video_dma_csr_agent_rf_source_valid;                                       // video_dma_csr_agent:rf_source_valid -> video_dma_csr_agent_rsp_fifo:in_valid
	wire  [119:0] video_dma_csr_agent_rf_source_data;                                        // video_dma_csr_agent:rf_source_data -> video_dma_csr_agent_rsp_fifo:in_data
	wire          video_dma_csr_agent_rf_source_ready;                                       // video_dma_csr_agent_rsp_fifo:in_ready -> video_dma_csr_agent:rf_source_ready
	wire          video_dma_csr_agent_rf_source_startofpacket;                               // video_dma_csr_agent:rf_source_startofpacket -> video_dma_csr_agent_rsp_fifo:in_startofpacket
	wire          video_dma_csr_agent_rf_source_endofpacket;                                 // video_dma_csr_agent:rf_source_endofpacket -> video_dma_csr_agent_rsp_fifo:in_endofpacket
	wire          video_dma_csr_agent_rsp_fifo_out_valid;                                    // video_dma_csr_agent_rsp_fifo:out_valid -> video_dma_csr_agent:rf_sink_valid
	wire  [119:0] video_dma_csr_agent_rsp_fifo_out_data;                                     // video_dma_csr_agent_rsp_fifo:out_data -> video_dma_csr_agent:rf_sink_data
	wire          video_dma_csr_agent_rsp_fifo_out_ready;                                    // video_dma_csr_agent:rf_sink_ready -> video_dma_csr_agent_rsp_fifo:out_ready
	wire          video_dma_csr_agent_rsp_fifo_out_startofpacket;                            // video_dma_csr_agent_rsp_fifo:out_startofpacket -> video_dma_csr_agent:rf_sink_startofpacket
	wire          video_dma_csr_agent_rsp_fifo_out_endofpacket;                              // video_dma_csr_agent_rsp_fifo:out_endofpacket -> video_dma_csr_agent:rf_sink_endofpacket
	wire          video_dma_csr_agent_rdata_fifo_src_valid;                                  // video_dma_csr_agent:rdata_fifo_src_valid -> video_dma_csr_agent_rdata_fifo:in_valid
	wire   [33:0] video_dma_csr_agent_rdata_fifo_src_data;                                   // video_dma_csr_agent:rdata_fifo_src_data -> video_dma_csr_agent_rdata_fifo:in_data
	wire          video_dma_csr_agent_rdata_fifo_src_ready;                                  // video_dma_csr_agent_rdata_fifo:in_ready -> video_dma_csr_agent:rdata_fifo_src_ready
	wire   [31:0] to_idct_hwacel_csr_agent_m0_readdata;                                      // to_idct_hwacel_csr_translator:uav_readdata -> to_idct_hwacel_csr_agent:m0_readdata
	wire          to_idct_hwacel_csr_agent_m0_waitrequest;                                   // to_idct_hwacel_csr_translator:uav_waitrequest -> to_idct_hwacel_csr_agent:m0_waitrequest
	wire          to_idct_hwacel_csr_agent_m0_debugaccess;                                   // to_idct_hwacel_csr_agent:m0_debugaccess -> to_idct_hwacel_csr_translator:uav_debugaccess
	wire   [31:0] to_idct_hwacel_csr_agent_m0_address;                                       // to_idct_hwacel_csr_agent:m0_address -> to_idct_hwacel_csr_translator:uav_address
	wire    [3:0] to_idct_hwacel_csr_agent_m0_byteenable;                                    // to_idct_hwacel_csr_agent:m0_byteenable -> to_idct_hwacel_csr_translator:uav_byteenable
	wire          to_idct_hwacel_csr_agent_m0_read;                                          // to_idct_hwacel_csr_agent:m0_read -> to_idct_hwacel_csr_translator:uav_read
	wire          to_idct_hwacel_csr_agent_m0_readdatavalid;                                 // to_idct_hwacel_csr_translator:uav_readdatavalid -> to_idct_hwacel_csr_agent:m0_readdatavalid
	wire          to_idct_hwacel_csr_agent_m0_lock;                                          // to_idct_hwacel_csr_agent:m0_lock -> to_idct_hwacel_csr_translator:uav_lock
	wire   [31:0] to_idct_hwacel_csr_agent_m0_writedata;                                     // to_idct_hwacel_csr_agent:m0_writedata -> to_idct_hwacel_csr_translator:uav_writedata
	wire          to_idct_hwacel_csr_agent_m0_write;                                         // to_idct_hwacel_csr_agent:m0_write -> to_idct_hwacel_csr_translator:uav_write
	wire    [2:0] to_idct_hwacel_csr_agent_m0_burstcount;                                    // to_idct_hwacel_csr_agent:m0_burstcount -> to_idct_hwacel_csr_translator:uav_burstcount
	wire          to_idct_hwacel_csr_agent_rf_source_valid;                                  // to_idct_hwacel_csr_agent:rf_source_valid -> to_idct_hwacel_csr_agent_rsp_fifo:in_valid
	wire  [119:0] to_idct_hwacel_csr_agent_rf_source_data;                                   // to_idct_hwacel_csr_agent:rf_source_data -> to_idct_hwacel_csr_agent_rsp_fifo:in_data
	wire          to_idct_hwacel_csr_agent_rf_source_ready;                                  // to_idct_hwacel_csr_agent_rsp_fifo:in_ready -> to_idct_hwacel_csr_agent:rf_source_ready
	wire          to_idct_hwacel_csr_agent_rf_source_startofpacket;                          // to_idct_hwacel_csr_agent:rf_source_startofpacket -> to_idct_hwacel_csr_agent_rsp_fifo:in_startofpacket
	wire          to_idct_hwacel_csr_agent_rf_source_endofpacket;                            // to_idct_hwacel_csr_agent:rf_source_endofpacket -> to_idct_hwacel_csr_agent_rsp_fifo:in_endofpacket
	wire          to_idct_hwacel_csr_agent_rsp_fifo_out_valid;                               // to_idct_hwacel_csr_agent_rsp_fifo:out_valid -> to_idct_hwacel_csr_agent:rf_sink_valid
	wire  [119:0] to_idct_hwacel_csr_agent_rsp_fifo_out_data;                                // to_idct_hwacel_csr_agent_rsp_fifo:out_data -> to_idct_hwacel_csr_agent:rf_sink_data
	wire          to_idct_hwacel_csr_agent_rsp_fifo_out_ready;                               // to_idct_hwacel_csr_agent:rf_sink_ready -> to_idct_hwacel_csr_agent_rsp_fifo:out_ready
	wire          to_idct_hwacel_csr_agent_rsp_fifo_out_startofpacket;                       // to_idct_hwacel_csr_agent_rsp_fifo:out_startofpacket -> to_idct_hwacel_csr_agent:rf_sink_startofpacket
	wire          to_idct_hwacel_csr_agent_rsp_fifo_out_endofpacket;                         // to_idct_hwacel_csr_agent_rsp_fifo:out_endofpacket -> to_idct_hwacel_csr_agent:rf_sink_endofpacket
	wire          to_idct_hwacel_csr_agent_rdata_fifo_src_valid;                             // to_idct_hwacel_csr_agent:rdata_fifo_src_valid -> to_idct_hwacel_csr_agent_rdata_fifo:in_valid
	wire   [33:0] to_idct_hwacel_csr_agent_rdata_fifo_src_data;                              // to_idct_hwacel_csr_agent:rdata_fifo_src_data -> to_idct_hwacel_csr_agent_rdata_fifo:in_data
	wire          to_idct_hwacel_csr_agent_rdata_fifo_src_ready;                             // to_idct_hwacel_csr_agent_rdata_fifo:in_ready -> to_idct_hwacel_csr_agent:rdata_fifo_src_ready
	wire   [31:0] from_idct_hwacel_csr_agent_m0_readdata;                                    // from_idct_hwacel_csr_translator:uav_readdata -> from_idct_hwacel_csr_agent:m0_readdata
	wire          from_idct_hwacel_csr_agent_m0_waitrequest;                                 // from_idct_hwacel_csr_translator:uav_waitrequest -> from_idct_hwacel_csr_agent:m0_waitrequest
	wire          from_idct_hwacel_csr_agent_m0_debugaccess;                                 // from_idct_hwacel_csr_agent:m0_debugaccess -> from_idct_hwacel_csr_translator:uav_debugaccess
	wire   [31:0] from_idct_hwacel_csr_agent_m0_address;                                     // from_idct_hwacel_csr_agent:m0_address -> from_idct_hwacel_csr_translator:uav_address
	wire    [3:0] from_idct_hwacel_csr_agent_m0_byteenable;                                  // from_idct_hwacel_csr_agent:m0_byteenable -> from_idct_hwacel_csr_translator:uav_byteenable
	wire          from_idct_hwacel_csr_agent_m0_read;                                        // from_idct_hwacel_csr_agent:m0_read -> from_idct_hwacel_csr_translator:uav_read
	wire          from_idct_hwacel_csr_agent_m0_readdatavalid;                               // from_idct_hwacel_csr_translator:uav_readdatavalid -> from_idct_hwacel_csr_agent:m0_readdatavalid
	wire          from_idct_hwacel_csr_agent_m0_lock;                                        // from_idct_hwacel_csr_agent:m0_lock -> from_idct_hwacel_csr_translator:uav_lock
	wire   [31:0] from_idct_hwacel_csr_agent_m0_writedata;                                   // from_idct_hwacel_csr_agent:m0_writedata -> from_idct_hwacel_csr_translator:uav_writedata
	wire          from_idct_hwacel_csr_agent_m0_write;                                       // from_idct_hwacel_csr_agent:m0_write -> from_idct_hwacel_csr_translator:uav_write
	wire    [2:0] from_idct_hwacel_csr_agent_m0_burstcount;                                  // from_idct_hwacel_csr_agent:m0_burstcount -> from_idct_hwacel_csr_translator:uav_burstcount
	wire          from_idct_hwacel_csr_agent_rf_source_valid;                                // from_idct_hwacel_csr_agent:rf_source_valid -> from_idct_hwacel_csr_agent_rsp_fifo:in_valid
	wire  [119:0] from_idct_hwacel_csr_agent_rf_source_data;                                 // from_idct_hwacel_csr_agent:rf_source_data -> from_idct_hwacel_csr_agent_rsp_fifo:in_data
	wire          from_idct_hwacel_csr_agent_rf_source_ready;                                // from_idct_hwacel_csr_agent_rsp_fifo:in_ready -> from_idct_hwacel_csr_agent:rf_source_ready
	wire          from_idct_hwacel_csr_agent_rf_source_startofpacket;                        // from_idct_hwacel_csr_agent:rf_source_startofpacket -> from_idct_hwacel_csr_agent_rsp_fifo:in_startofpacket
	wire          from_idct_hwacel_csr_agent_rf_source_endofpacket;                          // from_idct_hwacel_csr_agent:rf_source_endofpacket -> from_idct_hwacel_csr_agent_rsp_fifo:in_endofpacket
	wire          from_idct_hwacel_csr_agent_rsp_fifo_out_valid;                             // from_idct_hwacel_csr_agent_rsp_fifo:out_valid -> from_idct_hwacel_csr_agent:rf_sink_valid
	wire  [119:0] from_idct_hwacel_csr_agent_rsp_fifo_out_data;                              // from_idct_hwacel_csr_agent_rsp_fifo:out_data -> from_idct_hwacel_csr_agent:rf_sink_data
	wire          from_idct_hwacel_csr_agent_rsp_fifo_out_ready;                             // from_idct_hwacel_csr_agent:rf_sink_ready -> from_idct_hwacel_csr_agent_rsp_fifo:out_ready
	wire          from_idct_hwacel_csr_agent_rsp_fifo_out_startofpacket;                     // from_idct_hwacel_csr_agent_rsp_fifo:out_startofpacket -> from_idct_hwacel_csr_agent:rf_sink_startofpacket
	wire          from_idct_hwacel_csr_agent_rsp_fifo_out_endofpacket;                       // from_idct_hwacel_csr_agent_rsp_fifo:out_endofpacket -> from_idct_hwacel_csr_agent:rf_sink_endofpacket
	wire          from_idct_hwacel_csr_agent_rdata_fifo_src_valid;                           // from_idct_hwacel_csr_agent:rdata_fifo_src_valid -> from_idct_hwacel_csr_agent_rdata_fifo:in_valid
	wire   [33:0] from_idct_hwacel_csr_agent_rdata_fifo_src_data;                            // from_idct_hwacel_csr_agent:rdata_fifo_src_data -> from_idct_hwacel_csr_agent_rdata_fifo:in_data
	wire          from_idct_hwacel_csr_agent_rdata_fifo_src_ready;                           // from_idct_hwacel_csr_agent_rdata_fifo:in_ready -> from_idct_hwacel_csr_agent:rdata_fifo_src_ready
	wire   [31:0] cpu_debug_mem_slave_agent_m0_readdata;                                     // cpu_debug_mem_slave_translator:uav_readdata -> cpu_debug_mem_slave_agent:m0_readdata
	wire          cpu_debug_mem_slave_agent_m0_waitrequest;                                  // cpu_debug_mem_slave_translator:uav_waitrequest -> cpu_debug_mem_slave_agent:m0_waitrequest
	wire          cpu_debug_mem_slave_agent_m0_debugaccess;                                  // cpu_debug_mem_slave_agent:m0_debugaccess -> cpu_debug_mem_slave_translator:uav_debugaccess
	wire   [31:0] cpu_debug_mem_slave_agent_m0_address;                                      // cpu_debug_mem_slave_agent:m0_address -> cpu_debug_mem_slave_translator:uav_address
	wire    [3:0] cpu_debug_mem_slave_agent_m0_byteenable;                                   // cpu_debug_mem_slave_agent:m0_byteenable -> cpu_debug_mem_slave_translator:uav_byteenable
	wire          cpu_debug_mem_slave_agent_m0_read;                                         // cpu_debug_mem_slave_agent:m0_read -> cpu_debug_mem_slave_translator:uav_read
	wire          cpu_debug_mem_slave_agent_m0_readdatavalid;                                // cpu_debug_mem_slave_translator:uav_readdatavalid -> cpu_debug_mem_slave_agent:m0_readdatavalid
	wire          cpu_debug_mem_slave_agent_m0_lock;                                         // cpu_debug_mem_slave_agent:m0_lock -> cpu_debug_mem_slave_translator:uav_lock
	wire   [31:0] cpu_debug_mem_slave_agent_m0_writedata;                                    // cpu_debug_mem_slave_agent:m0_writedata -> cpu_debug_mem_slave_translator:uav_writedata
	wire          cpu_debug_mem_slave_agent_m0_write;                                        // cpu_debug_mem_slave_agent:m0_write -> cpu_debug_mem_slave_translator:uav_write
	wire    [2:0] cpu_debug_mem_slave_agent_m0_burstcount;                                   // cpu_debug_mem_slave_agent:m0_burstcount -> cpu_debug_mem_slave_translator:uav_burstcount
	wire          cpu_debug_mem_slave_agent_rf_source_valid;                                 // cpu_debug_mem_slave_agent:rf_source_valid -> cpu_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [119:0] cpu_debug_mem_slave_agent_rf_source_data;                                  // cpu_debug_mem_slave_agent:rf_source_data -> cpu_debug_mem_slave_agent_rsp_fifo:in_data
	wire          cpu_debug_mem_slave_agent_rf_source_ready;                                 // cpu_debug_mem_slave_agent_rsp_fifo:in_ready -> cpu_debug_mem_slave_agent:rf_source_ready
	wire          cpu_debug_mem_slave_agent_rf_source_startofpacket;                         // cpu_debug_mem_slave_agent:rf_source_startofpacket -> cpu_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire          cpu_debug_mem_slave_agent_rf_source_endofpacket;                           // cpu_debug_mem_slave_agent:rf_source_endofpacket -> cpu_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire          cpu_debug_mem_slave_agent_rsp_fifo_out_valid;                              // cpu_debug_mem_slave_agent_rsp_fifo:out_valid -> cpu_debug_mem_slave_agent:rf_sink_valid
	wire  [119:0] cpu_debug_mem_slave_agent_rsp_fifo_out_data;                               // cpu_debug_mem_slave_agent_rsp_fifo:out_data -> cpu_debug_mem_slave_agent:rf_sink_data
	wire          cpu_debug_mem_slave_agent_rsp_fifo_out_ready;                              // cpu_debug_mem_slave_agent:rf_sink_ready -> cpu_debug_mem_slave_agent_rsp_fifo:out_ready
	wire          cpu_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                      // cpu_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> cpu_debug_mem_slave_agent:rf_sink_startofpacket
	wire          cpu_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                        // cpu_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> cpu_debug_mem_slave_agent:rf_sink_endofpacket
	wire          cpu_debug_mem_slave_agent_rdata_fifo_src_valid;                            // cpu_debug_mem_slave_agent:rdata_fifo_src_valid -> cpu_debug_mem_slave_agent_rdata_fifo:in_valid
	wire   [33:0] cpu_debug_mem_slave_agent_rdata_fifo_src_data;                             // cpu_debug_mem_slave_agent:rdata_fifo_src_data -> cpu_debug_mem_slave_agent_rdata_fifo:in_data
	wire          cpu_debug_mem_slave_agent_rdata_fifo_src_ready;                            // cpu_debug_mem_slave_agent_rdata_fifo:in_ready -> cpu_debug_mem_slave_agent:rdata_fifo_src_ready
	wire  [127:0] video_dma_descriptor_slave_agent_m0_readdata;                              // video_dma_descriptor_slave_translator:uav_readdata -> video_dma_descriptor_slave_agent:m0_readdata
	wire          video_dma_descriptor_slave_agent_m0_waitrequest;                           // video_dma_descriptor_slave_translator:uav_waitrequest -> video_dma_descriptor_slave_agent:m0_waitrequest
	wire          video_dma_descriptor_slave_agent_m0_debugaccess;                           // video_dma_descriptor_slave_agent:m0_debugaccess -> video_dma_descriptor_slave_translator:uav_debugaccess
	wire   [31:0] video_dma_descriptor_slave_agent_m0_address;                               // video_dma_descriptor_slave_agent:m0_address -> video_dma_descriptor_slave_translator:uav_address
	wire   [15:0] video_dma_descriptor_slave_agent_m0_byteenable;                            // video_dma_descriptor_slave_agent:m0_byteenable -> video_dma_descriptor_slave_translator:uav_byteenable
	wire          video_dma_descriptor_slave_agent_m0_read;                                  // video_dma_descriptor_slave_agent:m0_read -> video_dma_descriptor_slave_translator:uav_read
	wire          video_dma_descriptor_slave_agent_m0_readdatavalid;                         // video_dma_descriptor_slave_translator:uav_readdatavalid -> video_dma_descriptor_slave_agent:m0_readdatavalid
	wire          video_dma_descriptor_slave_agent_m0_lock;                                  // video_dma_descriptor_slave_agent:m0_lock -> video_dma_descriptor_slave_translator:uav_lock
	wire  [127:0] video_dma_descriptor_slave_agent_m0_writedata;                             // video_dma_descriptor_slave_agent:m0_writedata -> video_dma_descriptor_slave_translator:uav_writedata
	wire          video_dma_descriptor_slave_agent_m0_write;                                 // video_dma_descriptor_slave_agent:m0_write -> video_dma_descriptor_slave_translator:uav_write
	wire    [4:0] video_dma_descriptor_slave_agent_m0_burstcount;                            // video_dma_descriptor_slave_agent:m0_burstcount -> video_dma_descriptor_slave_translator:uav_burstcount
	wire          video_dma_descriptor_slave_agent_rf_source_valid;                          // video_dma_descriptor_slave_agent:rf_source_valid -> video_dma_descriptor_slave_agent_rsp_fifo:in_valid
	wire  [227:0] video_dma_descriptor_slave_agent_rf_source_data;                           // video_dma_descriptor_slave_agent:rf_source_data -> video_dma_descriptor_slave_agent_rsp_fifo:in_data
	wire          video_dma_descriptor_slave_agent_rf_source_ready;                          // video_dma_descriptor_slave_agent_rsp_fifo:in_ready -> video_dma_descriptor_slave_agent:rf_source_ready
	wire          video_dma_descriptor_slave_agent_rf_source_startofpacket;                  // video_dma_descriptor_slave_agent:rf_source_startofpacket -> video_dma_descriptor_slave_agent_rsp_fifo:in_startofpacket
	wire          video_dma_descriptor_slave_agent_rf_source_endofpacket;                    // video_dma_descriptor_slave_agent:rf_source_endofpacket -> video_dma_descriptor_slave_agent_rsp_fifo:in_endofpacket
	wire          video_dma_descriptor_slave_agent_rsp_fifo_out_valid;                       // video_dma_descriptor_slave_agent_rsp_fifo:out_valid -> video_dma_descriptor_slave_agent:rf_sink_valid
	wire  [227:0] video_dma_descriptor_slave_agent_rsp_fifo_out_data;                        // video_dma_descriptor_slave_agent_rsp_fifo:out_data -> video_dma_descriptor_slave_agent:rf_sink_data
	wire          video_dma_descriptor_slave_agent_rsp_fifo_out_ready;                       // video_dma_descriptor_slave_agent:rf_sink_ready -> video_dma_descriptor_slave_agent_rsp_fifo:out_ready
	wire          video_dma_descriptor_slave_agent_rsp_fifo_out_startofpacket;               // video_dma_descriptor_slave_agent_rsp_fifo:out_startofpacket -> video_dma_descriptor_slave_agent:rf_sink_startofpacket
	wire          video_dma_descriptor_slave_agent_rsp_fifo_out_endofpacket;                 // video_dma_descriptor_slave_agent_rsp_fifo:out_endofpacket -> video_dma_descriptor_slave_agent:rf_sink_endofpacket
	wire          video_dma_descriptor_slave_agent_rdata_fifo_src_valid;                     // video_dma_descriptor_slave_agent:rdata_fifo_src_valid -> video_dma_descriptor_slave_agent_rdata_fifo:in_valid
	wire  [129:0] video_dma_descriptor_slave_agent_rdata_fifo_src_data;                      // video_dma_descriptor_slave_agent:rdata_fifo_src_data -> video_dma_descriptor_slave_agent_rdata_fifo:in_data
	wire          video_dma_descriptor_slave_agent_rdata_fifo_src_ready;                     // video_dma_descriptor_slave_agent_rdata_fifo:in_ready -> video_dma_descriptor_slave_agent:rdata_fifo_src_ready
	wire  [127:0] to_idct_hwacel_descriptor_slave_agent_m0_readdata;                         // to_idct_hwacel_descriptor_slave_translator:uav_readdata -> to_idct_hwacel_descriptor_slave_agent:m0_readdata
	wire          to_idct_hwacel_descriptor_slave_agent_m0_waitrequest;                      // to_idct_hwacel_descriptor_slave_translator:uav_waitrequest -> to_idct_hwacel_descriptor_slave_agent:m0_waitrequest
	wire          to_idct_hwacel_descriptor_slave_agent_m0_debugaccess;                      // to_idct_hwacel_descriptor_slave_agent:m0_debugaccess -> to_idct_hwacel_descriptor_slave_translator:uav_debugaccess
	wire   [31:0] to_idct_hwacel_descriptor_slave_agent_m0_address;                          // to_idct_hwacel_descriptor_slave_agent:m0_address -> to_idct_hwacel_descriptor_slave_translator:uav_address
	wire   [15:0] to_idct_hwacel_descriptor_slave_agent_m0_byteenable;                       // to_idct_hwacel_descriptor_slave_agent:m0_byteenable -> to_idct_hwacel_descriptor_slave_translator:uav_byteenable
	wire          to_idct_hwacel_descriptor_slave_agent_m0_read;                             // to_idct_hwacel_descriptor_slave_agent:m0_read -> to_idct_hwacel_descriptor_slave_translator:uav_read
	wire          to_idct_hwacel_descriptor_slave_agent_m0_readdatavalid;                    // to_idct_hwacel_descriptor_slave_translator:uav_readdatavalid -> to_idct_hwacel_descriptor_slave_agent:m0_readdatavalid
	wire          to_idct_hwacel_descriptor_slave_agent_m0_lock;                             // to_idct_hwacel_descriptor_slave_agent:m0_lock -> to_idct_hwacel_descriptor_slave_translator:uav_lock
	wire  [127:0] to_idct_hwacel_descriptor_slave_agent_m0_writedata;                        // to_idct_hwacel_descriptor_slave_agent:m0_writedata -> to_idct_hwacel_descriptor_slave_translator:uav_writedata
	wire          to_idct_hwacel_descriptor_slave_agent_m0_write;                            // to_idct_hwacel_descriptor_slave_agent:m0_write -> to_idct_hwacel_descriptor_slave_translator:uav_write
	wire    [4:0] to_idct_hwacel_descriptor_slave_agent_m0_burstcount;                       // to_idct_hwacel_descriptor_slave_agent:m0_burstcount -> to_idct_hwacel_descriptor_slave_translator:uav_burstcount
	wire          to_idct_hwacel_descriptor_slave_agent_rf_source_valid;                     // to_idct_hwacel_descriptor_slave_agent:rf_source_valid -> to_idct_hwacel_descriptor_slave_agent_rsp_fifo:in_valid
	wire  [227:0] to_idct_hwacel_descriptor_slave_agent_rf_source_data;                      // to_idct_hwacel_descriptor_slave_agent:rf_source_data -> to_idct_hwacel_descriptor_slave_agent_rsp_fifo:in_data
	wire          to_idct_hwacel_descriptor_slave_agent_rf_source_ready;                     // to_idct_hwacel_descriptor_slave_agent_rsp_fifo:in_ready -> to_idct_hwacel_descriptor_slave_agent:rf_source_ready
	wire          to_idct_hwacel_descriptor_slave_agent_rf_source_startofpacket;             // to_idct_hwacel_descriptor_slave_agent:rf_source_startofpacket -> to_idct_hwacel_descriptor_slave_agent_rsp_fifo:in_startofpacket
	wire          to_idct_hwacel_descriptor_slave_agent_rf_source_endofpacket;               // to_idct_hwacel_descriptor_slave_agent:rf_source_endofpacket -> to_idct_hwacel_descriptor_slave_agent_rsp_fifo:in_endofpacket
	wire          to_idct_hwacel_descriptor_slave_agent_rsp_fifo_out_valid;                  // to_idct_hwacel_descriptor_slave_agent_rsp_fifo:out_valid -> to_idct_hwacel_descriptor_slave_agent:rf_sink_valid
	wire  [227:0] to_idct_hwacel_descriptor_slave_agent_rsp_fifo_out_data;                   // to_idct_hwacel_descriptor_slave_agent_rsp_fifo:out_data -> to_idct_hwacel_descriptor_slave_agent:rf_sink_data
	wire          to_idct_hwacel_descriptor_slave_agent_rsp_fifo_out_ready;                  // to_idct_hwacel_descriptor_slave_agent:rf_sink_ready -> to_idct_hwacel_descriptor_slave_agent_rsp_fifo:out_ready
	wire          to_idct_hwacel_descriptor_slave_agent_rsp_fifo_out_startofpacket;          // to_idct_hwacel_descriptor_slave_agent_rsp_fifo:out_startofpacket -> to_idct_hwacel_descriptor_slave_agent:rf_sink_startofpacket
	wire          to_idct_hwacel_descriptor_slave_agent_rsp_fifo_out_endofpacket;            // to_idct_hwacel_descriptor_slave_agent_rsp_fifo:out_endofpacket -> to_idct_hwacel_descriptor_slave_agent:rf_sink_endofpacket
	wire          to_idct_hwacel_descriptor_slave_agent_rdata_fifo_src_valid;                // to_idct_hwacel_descriptor_slave_agent:rdata_fifo_src_valid -> to_idct_hwacel_descriptor_slave_agent_rdata_fifo:in_valid
	wire  [129:0] to_idct_hwacel_descriptor_slave_agent_rdata_fifo_src_data;                 // to_idct_hwacel_descriptor_slave_agent:rdata_fifo_src_data -> to_idct_hwacel_descriptor_slave_agent_rdata_fifo:in_data
	wire          to_idct_hwacel_descriptor_slave_agent_rdata_fifo_src_ready;                // to_idct_hwacel_descriptor_slave_agent_rdata_fifo:in_ready -> to_idct_hwacel_descriptor_slave_agent:rdata_fifo_src_ready
	wire  [127:0] from_idct_hwacel_descriptor_slave_agent_m0_readdata;                       // from_idct_hwacel_descriptor_slave_translator:uav_readdata -> from_idct_hwacel_descriptor_slave_agent:m0_readdata
	wire          from_idct_hwacel_descriptor_slave_agent_m0_waitrequest;                    // from_idct_hwacel_descriptor_slave_translator:uav_waitrequest -> from_idct_hwacel_descriptor_slave_agent:m0_waitrequest
	wire          from_idct_hwacel_descriptor_slave_agent_m0_debugaccess;                    // from_idct_hwacel_descriptor_slave_agent:m0_debugaccess -> from_idct_hwacel_descriptor_slave_translator:uav_debugaccess
	wire   [31:0] from_idct_hwacel_descriptor_slave_agent_m0_address;                        // from_idct_hwacel_descriptor_slave_agent:m0_address -> from_idct_hwacel_descriptor_slave_translator:uav_address
	wire   [15:0] from_idct_hwacel_descriptor_slave_agent_m0_byteenable;                     // from_idct_hwacel_descriptor_slave_agent:m0_byteenable -> from_idct_hwacel_descriptor_slave_translator:uav_byteenable
	wire          from_idct_hwacel_descriptor_slave_agent_m0_read;                           // from_idct_hwacel_descriptor_slave_agent:m0_read -> from_idct_hwacel_descriptor_slave_translator:uav_read
	wire          from_idct_hwacel_descriptor_slave_agent_m0_readdatavalid;                  // from_idct_hwacel_descriptor_slave_translator:uav_readdatavalid -> from_idct_hwacel_descriptor_slave_agent:m0_readdatavalid
	wire          from_idct_hwacel_descriptor_slave_agent_m0_lock;                           // from_idct_hwacel_descriptor_slave_agent:m0_lock -> from_idct_hwacel_descriptor_slave_translator:uav_lock
	wire  [127:0] from_idct_hwacel_descriptor_slave_agent_m0_writedata;                      // from_idct_hwacel_descriptor_slave_agent:m0_writedata -> from_idct_hwacel_descriptor_slave_translator:uav_writedata
	wire          from_idct_hwacel_descriptor_slave_agent_m0_write;                          // from_idct_hwacel_descriptor_slave_agent:m0_write -> from_idct_hwacel_descriptor_slave_translator:uav_write
	wire    [4:0] from_idct_hwacel_descriptor_slave_agent_m0_burstcount;                     // from_idct_hwacel_descriptor_slave_agent:m0_burstcount -> from_idct_hwacel_descriptor_slave_translator:uav_burstcount
	wire          from_idct_hwacel_descriptor_slave_agent_rf_source_valid;                   // from_idct_hwacel_descriptor_slave_agent:rf_source_valid -> from_idct_hwacel_descriptor_slave_agent_rsp_fifo:in_valid
	wire  [227:0] from_idct_hwacel_descriptor_slave_agent_rf_source_data;                    // from_idct_hwacel_descriptor_slave_agent:rf_source_data -> from_idct_hwacel_descriptor_slave_agent_rsp_fifo:in_data
	wire          from_idct_hwacel_descriptor_slave_agent_rf_source_ready;                   // from_idct_hwacel_descriptor_slave_agent_rsp_fifo:in_ready -> from_idct_hwacel_descriptor_slave_agent:rf_source_ready
	wire          from_idct_hwacel_descriptor_slave_agent_rf_source_startofpacket;           // from_idct_hwacel_descriptor_slave_agent:rf_source_startofpacket -> from_idct_hwacel_descriptor_slave_agent_rsp_fifo:in_startofpacket
	wire          from_idct_hwacel_descriptor_slave_agent_rf_source_endofpacket;             // from_idct_hwacel_descriptor_slave_agent:rf_source_endofpacket -> from_idct_hwacel_descriptor_slave_agent_rsp_fifo:in_endofpacket
	wire          from_idct_hwacel_descriptor_slave_agent_rsp_fifo_out_valid;                // from_idct_hwacel_descriptor_slave_agent_rsp_fifo:out_valid -> from_idct_hwacel_descriptor_slave_agent:rf_sink_valid
	wire  [227:0] from_idct_hwacel_descriptor_slave_agent_rsp_fifo_out_data;                 // from_idct_hwacel_descriptor_slave_agent_rsp_fifo:out_data -> from_idct_hwacel_descriptor_slave_agent:rf_sink_data
	wire          from_idct_hwacel_descriptor_slave_agent_rsp_fifo_out_ready;                // from_idct_hwacel_descriptor_slave_agent:rf_sink_ready -> from_idct_hwacel_descriptor_slave_agent_rsp_fifo:out_ready
	wire          from_idct_hwacel_descriptor_slave_agent_rsp_fifo_out_startofpacket;        // from_idct_hwacel_descriptor_slave_agent_rsp_fifo:out_startofpacket -> from_idct_hwacel_descriptor_slave_agent:rf_sink_startofpacket
	wire          from_idct_hwacel_descriptor_slave_agent_rsp_fifo_out_endofpacket;          // from_idct_hwacel_descriptor_slave_agent_rsp_fifo:out_endofpacket -> from_idct_hwacel_descriptor_slave_agent:rf_sink_endofpacket
	wire          from_idct_hwacel_descriptor_slave_agent_rdata_fifo_src_valid;              // from_idct_hwacel_descriptor_slave_agent:rdata_fifo_src_valid -> from_idct_hwacel_descriptor_slave_agent_rdata_fifo:in_valid
	wire  [129:0] from_idct_hwacel_descriptor_slave_agent_rdata_fifo_src_data;               // from_idct_hwacel_descriptor_slave_agent:rdata_fifo_src_data -> from_idct_hwacel_descriptor_slave_agent_rdata_fifo:in_data
	wire          from_idct_hwacel_descriptor_slave_agent_rdata_fifo_src_ready;              // from_idct_hwacel_descriptor_slave_agent_rdata_fifo:in_ready -> from_idct_hwacel_descriptor_slave_agent:rdata_fifo_src_ready
	wire   [31:0] timer_0_s1_agent_m0_readdata;                                              // timer_0_s1_translator:uav_readdata -> timer_0_s1_agent:m0_readdata
	wire          timer_0_s1_agent_m0_waitrequest;                                           // timer_0_s1_translator:uav_waitrequest -> timer_0_s1_agent:m0_waitrequest
	wire          timer_0_s1_agent_m0_debugaccess;                                           // timer_0_s1_agent:m0_debugaccess -> timer_0_s1_translator:uav_debugaccess
	wire   [31:0] timer_0_s1_agent_m0_address;                                               // timer_0_s1_agent:m0_address -> timer_0_s1_translator:uav_address
	wire    [3:0] timer_0_s1_agent_m0_byteenable;                                            // timer_0_s1_agent:m0_byteenable -> timer_0_s1_translator:uav_byteenable
	wire          timer_0_s1_agent_m0_read;                                                  // timer_0_s1_agent:m0_read -> timer_0_s1_translator:uav_read
	wire          timer_0_s1_agent_m0_readdatavalid;                                         // timer_0_s1_translator:uav_readdatavalid -> timer_0_s1_agent:m0_readdatavalid
	wire          timer_0_s1_agent_m0_lock;                                                  // timer_0_s1_agent:m0_lock -> timer_0_s1_translator:uav_lock
	wire   [31:0] timer_0_s1_agent_m0_writedata;                                             // timer_0_s1_agent:m0_writedata -> timer_0_s1_translator:uav_writedata
	wire          timer_0_s1_agent_m0_write;                                                 // timer_0_s1_agent:m0_write -> timer_0_s1_translator:uav_write
	wire    [2:0] timer_0_s1_agent_m0_burstcount;                                            // timer_0_s1_agent:m0_burstcount -> timer_0_s1_translator:uav_burstcount
	wire          timer_0_s1_agent_rf_source_valid;                                          // timer_0_s1_agent:rf_source_valid -> timer_0_s1_agent_rsp_fifo:in_valid
	wire  [119:0] timer_0_s1_agent_rf_source_data;                                           // timer_0_s1_agent:rf_source_data -> timer_0_s1_agent_rsp_fifo:in_data
	wire          timer_0_s1_agent_rf_source_ready;                                          // timer_0_s1_agent_rsp_fifo:in_ready -> timer_0_s1_agent:rf_source_ready
	wire          timer_0_s1_agent_rf_source_startofpacket;                                  // timer_0_s1_agent:rf_source_startofpacket -> timer_0_s1_agent_rsp_fifo:in_startofpacket
	wire          timer_0_s1_agent_rf_source_endofpacket;                                    // timer_0_s1_agent:rf_source_endofpacket -> timer_0_s1_agent_rsp_fifo:in_endofpacket
	wire          timer_0_s1_agent_rsp_fifo_out_valid;                                       // timer_0_s1_agent_rsp_fifo:out_valid -> timer_0_s1_agent:rf_sink_valid
	wire  [119:0] timer_0_s1_agent_rsp_fifo_out_data;                                        // timer_0_s1_agent_rsp_fifo:out_data -> timer_0_s1_agent:rf_sink_data
	wire          timer_0_s1_agent_rsp_fifo_out_ready;                                       // timer_0_s1_agent:rf_sink_ready -> timer_0_s1_agent_rsp_fifo:out_ready
	wire          timer_0_s1_agent_rsp_fifo_out_startofpacket;                               // timer_0_s1_agent_rsp_fifo:out_startofpacket -> timer_0_s1_agent:rf_sink_startofpacket
	wire          timer_0_s1_agent_rsp_fifo_out_endofpacket;                                 // timer_0_s1_agent_rsp_fifo:out_endofpacket -> timer_0_s1_agent:rf_sink_endofpacket
	wire          timer_0_s1_agent_rdata_fifo_src_valid;                                     // timer_0_s1_agent:rdata_fifo_src_valid -> timer_0_s1_agent_rdata_fifo:in_valid
	wire   [33:0] timer_0_s1_agent_rdata_fifo_src_data;                                      // timer_0_s1_agent:rdata_fifo_src_data -> timer_0_s1_agent_rdata_fifo:in_data
	wire          timer_0_s1_agent_rdata_fifo_src_ready;                                     // timer_0_s1_agent_rdata_fifo:in_ready -> timer_0_s1_agent:rdata_fifo_src_ready
	wire   [31:0] key_s1_agent_m0_readdata;                                                  // key_s1_translator:uav_readdata -> key_s1_agent:m0_readdata
	wire          key_s1_agent_m0_waitrequest;                                               // key_s1_translator:uav_waitrequest -> key_s1_agent:m0_waitrequest
	wire          key_s1_agent_m0_debugaccess;                                               // key_s1_agent:m0_debugaccess -> key_s1_translator:uav_debugaccess
	wire   [31:0] key_s1_agent_m0_address;                                                   // key_s1_agent:m0_address -> key_s1_translator:uav_address
	wire    [3:0] key_s1_agent_m0_byteenable;                                                // key_s1_agent:m0_byteenable -> key_s1_translator:uav_byteenable
	wire          key_s1_agent_m0_read;                                                      // key_s1_agent:m0_read -> key_s1_translator:uav_read
	wire          key_s1_agent_m0_readdatavalid;                                             // key_s1_translator:uav_readdatavalid -> key_s1_agent:m0_readdatavalid
	wire          key_s1_agent_m0_lock;                                                      // key_s1_agent:m0_lock -> key_s1_translator:uav_lock
	wire   [31:0] key_s1_agent_m0_writedata;                                                 // key_s1_agent:m0_writedata -> key_s1_translator:uav_writedata
	wire          key_s1_agent_m0_write;                                                     // key_s1_agent:m0_write -> key_s1_translator:uav_write
	wire    [2:0] key_s1_agent_m0_burstcount;                                                // key_s1_agent:m0_burstcount -> key_s1_translator:uav_burstcount
	wire          key_s1_agent_rf_source_valid;                                              // key_s1_agent:rf_source_valid -> key_s1_agent_rsp_fifo:in_valid
	wire  [119:0] key_s1_agent_rf_source_data;                                               // key_s1_agent:rf_source_data -> key_s1_agent_rsp_fifo:in_data
	wire          key_s1_agent_rf_source_ready;                                              // key_s1_agent_rsp_fifo:in_ready -> key_s1_agent:rf_source_ready
	wire          key_s1_agent_rf_source_startofpacket;                                      // key_s1_agent:rf_source_startofpacket -> key_s1_agent_rsp_fifo:in_startofpacket
	wire          key_s1_agent_rf_source_endofpacket;                                        // key_s1_agent:rf_source_endofpacket -> key_s1_agent_rsp_fifo:in_endofpacket
	wire          key_s1_agent_rsp_fifo_out_valid;                                           // key_s1_agent_rsp_fifo:out_valid -> key_s1_agent:rf_sink_valid
	wire  [119:0] key_s1_agent_rsp_fifo_out_data;                                            // key_s1_agent_rsp_fifo:out_data -> key_s1_agent:rf_sink_data
	wire          key_s1_agent_rsp_fifo_out_ready;                                           // key_s1_agent:rf_sink_ready -> key_s1_agent_rsp_fifo:out_ready
	wire          key_s1_agent_rsp_fifo_out_startofpacket;                                   // key_s1_agent_rsp_fifo:out_startofpacket -> key_s1_agent:rf_sink_startofpacket
	wire          key_s1_agent_rsp_fifo_out_endofpacket;                                     // key_s1_agent_rsp_fifo:out_endofpacket -> key_s1_agent:rf_sink_endofpacket
	wire          key_s1_agent_rdata_fifo_src_valid;                                         // key_s1_agent:rdata_fifo_src_valid -> key_s1_agent_rdata_fifo:in_valid
	wire   [33:0] key_s1_agent_rdata_fifo_src_data;                                          // key_s1_agent:rdata_fifo_src_data -> key_s1_agent_rdata_fifo:in_data
	wire          key_s1_agent_rdata_fifo_src_ready;                                         // key_s1_agent_rdata_fifo:in_ready -> key_s1_agent:rdata_fifo_src_ready
	wire   [31:0] timer_1_s1_agent_m0_readdata;                                              // timer_1_s1_translator:uav_readdata -> timer_1_s1_agent:m0_readdata
	wire          timer_1_s1_agent_m0_waitrequest;                                           // timer_1_s1_translator:uav_waitrequest -> timer_1_s1_agent:m0_waitrequest
	wire          timer_1_s1_agent_m0_debugaccess;                                           // timer_1_s1_agent:m0_debugaccess -> timer_1_s1_translator:uav_debugaccess
	wire   [31:0] timer_1_s1_agent_m0_address;                                               // timer_1_s1_agent:m0_address -> timer_1_s1_translator:uav_address
	wire    [3:0] timer_1_s1_agent_m0_byteenable;                                            // timer_1_s1_agent:m0_byteenable -> timer_1_s1_translator:uav_byteenable
	wire          timer_1_s1_agent_m0_read;                                                  // timer_1_s1_agent:m0_read -> timer_1_s1_translator:uav_read
	wire          timer_1_s1_agent_m0_readdatavalid;                                         // timer_1_s1_translator:uav_readdatavalid -> timer_1_s1_agent:m0_readdatavalid
	wire          timer_1_s1_agent_m0_lock;                                                  // timer_1_s1_agent:m0_lock -> timer_1_s1_translator:uav_lock
	wire   [31:0] timer_1_s1_agent_m0_writedata;                                             // timer_1_s1_agent:m0_writedata -> timer_1_s1_translator:uav_writedata
	wire          timer_1_s1_agent_m0_write;                                                 // timer_1_s1_agent:m0_write -> timer_1_s1_translator:uav_write
	wire    [2:0] timer_1_s1_agent_m0_burstcount;                                            // timer_1_s1_agent:m0_burstcount -> timer_1_s1_translator:uav_burstcount
	wire          timer_1_s1_agent_rf_source_valid;                                          // timer_1_s1_agent:rf_source_valid -> timer_1_s1_agent_rsp_fifo:in_valid
	wire  [119:0] timer_1_s1_agent_rf_source_data;                                           // timer_1_s1_agent:rf_source_data -> timer_1_s1_agent_rsp_fifo:in_data
	wire          timer_1_s1_agent_rf_source_ready;                                          // timer_1_s1_agent_rsp_fifo:in_ready -> timer_1_s1_agent:rf_source_ready
	wire          timer_1_s1_agent_rf_source_startofpacket;                                  // timer_1_s1_agent:rf_source_startofpacket -> timer_1_s1_agent_rsp_fifo:in_startofpacket
	wire          timer_1_s1_agent_rf_source_endofpacket;                                    // timer_1_s1_agent:rf_source_endofpacket -> timer_1_s1_agent_rsp_fifo:in_endofpacket
	wire          timer_1_s1_agent_rsp_fifo_out_valid;                                       // timer_1_s1_agent_rsp_fifo:out_valid -> timer_1_s1_agent:rf_sink_valid
	wire  [119:0] timer_1_s1_agent_rsp_fifo_out_data;                                        // timer_1_s1_agent_rsp_fifo:out_data -> timer_1_s1_agent:rf_sink_data
	wire          timer_1_s1_agent_rsp_fifo_out_ready;                                       // timer_1_s1_agent:rf_sink_ready -> timer_1_s1_agent_rsp_fifo:out_ready
	wire          timer_1_s1_agent_rsp_fifo_out_startofpacket;                               // timer_1_s1_agent_rsp_fifo:out_startofpacket -> timer_1_s1_agent:rf_sink_startofpacket
	wire          timer_1_s1_agent_rsp_fifo_out_endofpacket;                                 // timer_1_s1_agent_rsp_fifo:out_endofpacket -> timer_1_s1_agent:rf_sink_endofpacket
	wire          timer_1_s1_agent_rdata_fifo_src_valid;                                     // timer_1_s1_agent:rdata_fifo_src_valid -> timer_1_s1_agent_rdata_fifo:in_valid
	wire   [33:0] timer_1_s1_agent_rdata_fifo_src_data;                                      // timer_1_s1_agent:rdata_fifo_src_data -> timer_1_s1_agent_rdata_fifo:in_data
	wire          timer_1_s1_agent_rdata_fifo_src_ready;                                     // timer_1_s1_agent_rdata_fifo:in_ready -> timer_1_s1_agent:rdata_fifo_src_ready
	wire   [31:0] ledg_s1_agent_m0_readdata;                                                 // ledg_s1_translator:uav_readdata -> ledg_s1_agent:m0_readdata
	wire          ledg_s1_agent_m0_waitrequest;                                              // ledg_s1_translator:uav_waitrequest -> ledg_s1_agent:m0_waitrequest
	wire          ledg_s1_agent_m0_debugaccess;                                              // ledg_s1_agent:m0_debugaccess -> ledg_s1_translator:uav_debugaccess
	wire   [31:0] ledg_s1_agent_m0_address;                                                  // ledg_s1_agent:m0_address -> ledg_s1_translator:uav_address
	wire    [3:0] ledg_s1_agent_m0_byteenable;                                               // ledg_s1_agent:m0_byteenable -> ledg_s1_translator:uav_byteenable
	wire          ledg_s1_agent_m0_read;                                                     // ledg_s1_agent:m0_read -> ledg_s1_translator:uav_read
	wire          ledg_s1_agent_m0_readdatavalid;                                            // ledg_s1_translator:uav_readdatavalid -> ledg_s1_agent:m0_readdatavalid
	wire          ledg_s1_agent_m0_lock;                                                     // ledg_s1_agent:m0_lock -> ledg_s1_translator:uav_lock
	wire   [31:0] ledg_s1_agent_m0_writedata;                                                // ledg_s1_agent:m0_writedata -> ledg_s1_translator:uav_writedata
	wire          ledg_s1_agent_m0_write;                                                    // ledg_s1_agent:m0_write -> ledg_s1_translator:uav_write
	wire    [2:0] ledg_s1_agent_m0_burstcount;                                               // ledg_s1_agent:m0_burstcount -> ledg_s1_translator:uav_burstcount
	wire          ledg_s1_agent_rf_source_valid;                                             // ledg_s1_agent:rf_source_valid -> ledg_s1_agent_rsp_fifo:in_valid
	wire  [119:0] ledg_s1_agent_rf_source_data;                                              // ledg_s1_agent:rf_source_data -> ledg_s1_agent_rsp_fifo:in_data
	wire          ledg_s1_agent_rf_source_ready;                                             // ledg_s1_agent_rsp_fifo:in_ready -> ledg_s1_agent:rf_source_ready
	wire          ledg_s1_agent_rf_source_startofpacket;                                     // ledg_s1_agent:rf_source_startofpacket -> ledg_s1_agent_rsp_fifo:in_startofpacket
	wire          ledg_s1_agent_rf_source_endofpacket;                                       // ledg_s1_agent:rf_source_endofpacket -> ledg_s1_agent_rsp_fifo:in_endofpacket
	wire          ledg_s1_agent_rsp_fifo_out_valid;                                          // ledg_s1_agent_rsp_fifo:out_valid -> ledg_s1_agent:rf_sink_valid
	wire  [119:0] ledg_s1_agent_rsp_fifo_out_data;                                           // ledg_s1_agent_rsp_fifo:out_data -> ledg_s1_agent:rf_sink_data
	wire          ledg_s1_agent_rsp_fifo_out_ready;                                          // ledg_s1_agent:rf_sink_ready -> ledg_s1_agent_rsp_fifo:out_ready
	wire          ledg_s1_agent_rsp_fifo_out_startofpacket;                                  // ledg_s1_agent_rsp_fifo:out_startofpacket -> ledg_s1_agent:rf_sink_startofpacket
	wire          ledg_s1_agent_rsp_fifo_out_endofpacket;                                    // ledg_s1_agent_rsp_fifo:out_endofpacket -> ledg_s1_agent:rf_sink_endofpacket
	wire          ledg_s1_agent_rdata_fifo_src_valid;                                        // ledg_s1_agent:rdata_fifo_src_valid -> ledg_s1_agent_rdata_fifo:in_valid
	wire   [33:0] ledg_s1_agent_rdata_fifo_src_data;                                         // ledg_s1_agent:rdata_fifo_src_data -> ledg_s1_agent_rdata_fifo:in_data
	wire          ledg_s1_agent_rdata_fifo_src_ready;                                        // ledg_s1_agent_rdata_fifo:in_ready -> ledg_s1_agent:rdata_fifo_src_ready
	wire   [31:0] ledr_s1_agent_m0_readdata;                                                 // ledr_s1_translator:uav_readdata -> ledr_s1_agent:m0_readdata
	wire          ledr_s1_agent_m0_waitrequest;                                              // ledr_s1_translator:uav_waitrequest -> ledr_s1_agent:m0_waitrequest
	wire          ledr_s1_agent_m0_debugaccess;                                              // ledr_s1_agent:m0_debugaccess -> ledr_s1_translator:uav_debugaccess
	wire   [31:0] ledr_s1_agent_m0_address;                                                  // ledr_s1_agent:m0_address -> ledr_s1_translator:uav_address
	wire    [3:0] ledr_s1_agent_m0_byteenable;                                               // ledr_s1_agent:m0_byteenable -> ledr_s1_translator:uav_byteenable
	wire          ledr_s1_agent_m0_read;                                                     // ledr_s1_agent:m0_read -> ledr_s1_translator:uav_read
	wire          ledr_s1_agent_m0_readdatavalid;                                            // ledr_s1_translator:uav_readdatavalid -> ledr_s1_agent:m0_readdatavalid
	wire          ledr_s1_agent_m0_lock;                                                     // ledr_s1_agent:m0_lock -> ledr_s1_translator:uav_lock
	wire   [31:0] ledr_s1_agent_m0_writedata;                                                // ledr_s1_agent:m0_writedata -> ledr_s1_translator:uav_writedata
	wire          ledr_s1_agent_m0_write;                                                    // ledr_s1_agent:m0_write -> ledr_s1_translator:uav_write
	wire    [2:0] ledr_s1_agent_m0_burstcount;                                               // ledr_s1_agent:m0_burstcount -> ledr_s1_translator:uav_burstcount
	wire          ledr_s1_agent_rf_source_valid;                                             // ledr_s1_agent:rf_source_valid -> ledr_s1_agent_rsp_fifo:in_valid
	wire  [119:0] ledr_s1_agent_rf_source_data;                                              // ledr_s1_agent:rf_source_data -> ledr_s1_agent_rsp_fifo:in_data
	wire          ledr_s1_agent_rf_source_ready;                                             // ledr_s1_agent_rsp_fifo:in_ready -> ledr_s1_agent:rf_source_ready
	wire          ledr_s1_agent_rf_source_startofpacket;                                     // ledr_s1_agent:rf_source_startofpacket -> ledr_s1_agent_rsp_fifo:in_startofpacket
	wire          ledr_s1_agent_rf_source_endofpacket;                                       // ledr_s1_agent:rf_source_endofpacket -> ledr_s1_agent_rsp_fifo:in_endofpacket
	wire          ledr_s1_agent_rsp_fifo_out_valid;                                          // ledr_s1_agent_rsp_fifo:out_valid -> ledr_s1_agent:rf_sink_valid
	wire  [119:0] ledr_s1_agent_rsp_fifo_out_data;                                           // ledr_s1_agent_rsp_fifo:out_data -> ledr_s1_agent:rf_sink_data
	wire          ledr_s1_agent_rsp_fifo_out_ready;                                          // ledr_s1_agent:rf_sink_ready -> ledr_s1_agent_rsp_fifo:out_ready
	wire          ledr_s1_agent_rsp_fifo_out_startofpacket;                                  // ledr_s1_agent_rsp_fifo:out_startofpacket -> ledr_s1_agent:rf_sink_startofpacket
	wire          ledr_s1_agent_rsp_fifo_out_endofpacket;                                    // ledr_s1_agent_rsp_fifo:out_endofpacket -> ledr_s1_agent:rf_sink_endofpacket
	wire          ledr_s1_agent_rdata_fifo_src_valid;                                        // ledr_s1_agent:rdata_fifo_src_valid -> ledr_s1_agent_rdata_fifo:in_valid
	wire   [33:0] ledr_s1_agent_rdata_fifo_src_data;                                         // ledr_s1_agent:rdata_fifo_src_data -> ledr_s1_agent_rdata_fifo:in_data
	wire          ledr_s1_agent_rdata_fifo_src_ready;                                        // ledr_s1_agent_rdata_fifo:in_ready -> ledr_s1_agent:rdata_fifo_src_ready
	wire   [31:0] i2c_scl_s1_agent_m0_readdata;                                              // i2c_scl_s1_translator:uav_readdata -> i2c_scl_s1_agent:m0_readdata
	wire          i2c_scl_s1_agent_m0_waitrequest;                                           // i2c_scl_s1_translator:uav_waitrequest -> i2c_scl_s1_agent:m0_waitrequest
	wire          i2c_scl_s1_agent_m0_debugaccess;                                           // i2c_scl_s1_agent:m0_debugaccess -> i2c_scl_s1_translator:uav_debugaccess
	wire   [31:0] i2c_scl_s1_agent_m0_address;                                               // i2c_scl_s1_agent:m0_address -> i2c_scl_s1_translator:uav_address
	wire    [3:0] i2c_scl_s1_agent_m0_byteenable;                                            // i2c_scl_s1_agent:m0_byteenable -> i2c_scl_s1_translator:uav_byteenable
	wire          i2c_scl_s1_agent_m0_read;                                                  // i2c_scl_s1_agent:m0_read -> i2c_scl_s1_translator:uav_read
	wire          i2c_scl_s1_agent_m0_readdatavalid;                                         // i2c_scl_s1_translator:uav_readdatavalid -> i2c_scl_s1_agent:m0_readdatavalid
	wire          i2c_scl_s1_agent_m0_lock;                                                  // i2c_scl_s1_agent:m0_lock -> i2c_scl_s1_translator:uav_lock
	wire   [31:0] i2c_scl_s1_agent_m0_writedata;                                             // i2c_scl_s1_agent:m0_writedata -> i2c_scl_s1_translator:uav_writedata
	wire          i2c_scl_s1_agent_m0_write;                                                 // i2c_scl_s1_agent:m0_write -> i2c_scl_s1_translator:uav_write
	wire    [2:0] i2c_scl_s1_agent_m0_burstcount;                                            // i2c_scl_s1_agent:m0_burstcount -> i2c_scl_s1_translator:uav_burstcount
	wire          i2c_scl_s1_agent_rf_source_valid;                                          // i2c_scl_s1_agent:rf_source_valid -> i2c_scl_s1_agent_rsp_fifo:in_valid
	wire  [119:0] i2c_scl_s1_agent_rf_source_data;                                           // i2c_scl_s1_agent:rf_source_data -> i2c_scl_s1_agent_rsp_fifo:in_data
	wire          i2c_scl_s1_agent_rf_source_ready;                                          // i2c_scl_s1_agent_rsp_fifo:in_ready -> i2c_scl_s1_agent:rf_source_ready
	wire          i2c_scl_s1_agent_rf_source_startofpacket;                                  // i2c_scl_s1_agent:rf_source_startofpacket -> i2c_scl_s1_agent_rsp_fifo:in_startofpacket
	wire          i2c_scl_s1_agent_rf_source_endofpacket;                                    // i2c_scl_s1_agent:rf_source_endofpacket -> i2c_scl_s1_agent_rsp_fifo:in_endofpacket
	wire          i2c_scl_s1_agent_rsp_fifo_out_valid;                                       // i2c_scl_s1_agent_rsp_fifo:out_valid -> i2c_scl_s1_agent:rf_sink_valid
	wire  [119:0] i2c_scl_s1_agent_rsp_fifo_out_data;                                        // i2c_scl_s1_agent_rsp_fifo:out_data -> i2c_scl_s1_agent:rf_sink_data
	wire          i2c_scl_s1_agent_rsp_fifo_out_ready;                                       // i2c_scl_s1_agent:rf_sink_ready -> i2c_scl_s1_agent_rsp_fifo:out_ready
	wire          i2c_scl_s1_agent_rsp_fifo_out_startofpacket;                               // i2c_scl_s1_agent_rsp_fifo:out_startofpacket -> i2c_scl_s1_agent:rf_sink_startofpacket
	wire          i2c_scl_s1_agent_rsp_fifo_out_endofpacket;                                 // i2c_scl_s1_agent_rsp_fifo:out_endofpacket -> i2c_scl_s1_agent:rf_sink_endofpacket
	wire          i2c_scl_s1_agent_rdata_fifo_src_valid;                                     // i2c_scl_s1_agent:rdata_fifo_src_valid -> i2c_scl_s1_agent_rdata_fifo:in_valid
	wire   [33:0] i2c_scl_s1_agent_rdata_fifo_src_data;                                      // i2c_scl_s1_agent:rdata_fifo_src_data -> i2c_scl_s1_agent_rdata_fifo:in_data
	wire          i2c_scl_s1_agent_rdata_fifo_src_ready;                                     // i2c_scl_s1_agent_rdata_fifo:in_ready -> i2c_scl_s1_agent:rdata_fifo_src_ready
	wire   [31:0] i2c_sda_s1_agent_m0_readdata;                                              // i2c_sda_s1_translator:uav_readdata -> i2c_sda_s1_agent:m0_readdata
	wire          i2c_sda_s1_agent_m0_waitrequest;                                           // i2c_sda_s1_translator:uav_waitrequest -> i2c_sda_s1_agent:m0_waitrequest
	wire          i2c_sda_s1_agent_m0_debugaccess;                                           // i2c_sda_s1_agent:m0_debugaccess -> i2c_sda_s1_translator:uav_debugaccess
	wire   [31:0] i2c_sda_s1_agent_m0_address;                                               // i2c_sda_s1_agent:m0_address -> i2c_sda_s1_translator:uav_address
	wire    [3:0] i2c_sda_s1_agent_m0_byteenable;                                            // i2c_sda_s1_agent:m0_byteenable -> i2c_sda_s1_translator:uav_byteenable
	wire          i2c_sda_s1_agent_m0_read;                                                  // i2c_sda_s1_agent:m0_read -> i2c_sda_s1_translator:uav_read
	wire          i2c_sda_s1_agent_m0_readdatavalid;                                         // i2c_sda_s1_translator:uav_readdatavalid -> i2c_sda_s1_agent:m0_readdatavalid
	wire          i2c_sda_s1_agent_m0_lock;                                                  // i2c_sda_s1_agent:m0_lock -> i2c_sda_s1_translator:uav_lock
	wire   [31:0] i2c_sda_s1_agent_m0_writedata;                                             // i2c_sda_s1_agent:m0_writedata -> i2c_sda_s1_translator:uav_writedata
	wire          i2c_sda_s1_agent_m0_write;                                                 // i2c_sda_s1_agent:m0_write -> i2c_sda_s1_translator:uav_write
	wire    [2:0] i2c_sda_s1_agent_m0_burstcount;                                            // i2c_sda_s1_agent:m0_burstcount -> i2c_sda_s1_translator:uav_burstcount
	wire          i2c_sda_s1_agent_rf_source_valid;                                          // i2c_sda_s1_agent:rf_source_valid -> i2c_sda_s1_agent_rsp_fifo:in_valid
	wire  [119:0] i2c_sda_s1_agent_rf_source_data;                                           // i2c_sda_s1_agent:rf_source_data -> i2c_sda_s1_agent_rsp_fifo:in_data
	wire          i2c_sda_s1_agent_rf_source_ready;                                          // i2c_sda_s1_agent_rsp_fifo:in_ready -> i2c_sda_s1_agent:rf_source_ready
	wire          i2c_sda_s1_agent_rf_source_startofpacket;                                  // i2c_sda_s1_agent:rf_source_startofpacket -> i2c_sda_s1_agent_rsp_fifo:in_startofpacket
	wire          i2c_sda_s1_agent_rf_source_endofpacket;                                    // i2c_sda_s1_agent:rf_source_endofpacket -> i2c_sda_s1_agent_rsp_fifo:in_endofpacket
	wire          i2c_sda_s1_agent_rsp_fifo_out_valid;                                       // i2c_sda_s1_agent_rsp_fifo:out_valid -> i2c_sda_s1_agent:rf_sink_valid
	wire  [119:0] i2c_sda_s1_agent_rsp_fifo_out_data;                                        // i2c_sda_s1_agent_rsp_fifo:out_data -> i2c_sda_s1_agent:rf_sink_data
	wire          i2c_sda_s1_agent_rsp_fifo_out_ready;                                       // i2c_sda_s1_agent:rf_sink_ready -> i2c_sda_s1_agent_rsp_fifo:out_ready
	wire          i2c_sda_s1_agent_rsp_fifo_out_startofpacket;                               // i2c_sda_s1_agent_rsp_fifo:out_startofpacket -> i2c_sda_s1_agent:rf_sink_startofpacket
	wire          i2c_sda_s1_agent_rsp_fifo_out_endofpacket;                                 // i2c_sda_s1_agent_rsp_fifo:out_endofpacket -> i2c_sda_s1_agent:rf_sink_endofpacket
	wire          i2c_sda_s1_agent_rdata_fifo_src_valid;                                     // i2c_sda_s1_agent:rdata_fifo_src_valid -> i2c_sda_s1_agent_rdata_fifo:in_valid
	wire   [33:0] i2c_sda_s1_agent_rdata_fifo_src_data;                                      // i2c_sda_s1_agent:rdata_fifo_src_data -> i2c_sda_s1_agent_rdata_fifo:in_data
	wire          i2c_sda_s1_agent_rdata_fifo_src_ready;                                     // i2c_sda_s1_agent_rdata_fifo:in_ready -> i2c_sda_s1_agent:rdata_fifo_src_ready
	wire   [31:0] sd_cont_0_slave_agent_m0_readdata;                                         // sd_cont_0_slave_translator:uav_readdata -> sd_cont_0_slave_agent:m0_readdata
	wire          sd_cont_0_slave_agent_m0_waitrequest;                                      // sd_cont_0_slave_translator:uav_waitrequest -> sd_cont_0_slave_agent:m0_waitrequest
	wire          sd_cont_0_slave_agent_m0_debugaccess;                                      // sd_cont_0_slave_agent:m0_debugaccess -> sd_cont_0_slave_translator:uav_debugaccess
	wire   [31:0] sd_cont_0_slave_agent_m0_address;                                          // sd_cont_0_slave_agent:m0_address -> sd_cont_0_slave_translator:uav_address
	wire    [3:0] sd_cont_0_slave_agent_m0_byteenable;                                       // sd_cont_0_slave_agent:m0_byteenable -> sd_cont_0_slave_translator:uav_byteenable
	wire          sd_cont_0_slave_agent_m0_read;                                             // sd_cont_0_slave_agent:m0_read -> sd_cont_0_slave_translator:uav_read
	wire          sd_cont_0_slave_agent_m0_readdatavalid;                                    // sd_cont_0_slave_translator:uav_readdatavalid -> sd_cont_0_slave_agent:m0_readdatavalid
	wire          sd_cont_0_slave_agent_m0_lock;                                             // sd_cont_0_slave_agent:m0_lock -> sd_cont_0_slave_translator:uav_lock
	wire   [31:0] sd_cont_0_slave_agent_m0_writedata;                                        // sd_cont_0_slave_agent:m0_writedata -> sd_cont_0_slave_translator:uav_writedata
	wire          sd_cont_0_slave_agent_m0_write;                                            // sd_cont_0_slave_agent:m0_write -> sd_cont_0_slave_translator:uav_write
	wire    [2:0] sd_cont_0_slave_agent_m0_burstcount;                                       // sd_cont_0_slave_agent:m0_burstcount -> sd_cont_0_slave_translator:uav_burstcount
	wire          sd_cont_0_slave_agent_rf_source_valid;                                     // sd_cont_0_slave_agent:rf_source_valid -> sd_cont_0_slave_agent_rsp_fifo:in_valid
	wire  [119:0] sd_cont_0_slave_agent_rf_source_data;                                      // sd_cont_0_slave_agent:rf_source_data -> sd_cont_0_slave_agent_rsp_fifo:in_data
	wire          sd_cont_0_slave_agent_rf_source_ready;                                     // sd_cont_0_slave_agent_rsp_fifo:in_ready -> sd_cont_0_slave_agent:rf_source_ready
	wire          sd_cont_0_slave_agent_rf_source_startofpacket;                             // sd_cont_0_slave_agent:rf_source_startofpacket -> sd_cont_0_slave_agent_rsp_fifo:in_startofpacket
	wire          sd_cont_0_slave_agent_rf_source_endofpacket;                               // sd_cont_0_slave_agent:rf_source_endofpacket -> sd_cont_0_slave_agent_rsp_fifo:in_endofpacket
	wire          sd_cont_0_slave_agent_rsp_fifo_out_valid;                                  // sd_cont_0_slave_agent_rsp_fifo:out_valid -> sd_cont_0_slave_agent:rf_sink_valid
	wire  [119:0] sd_cont_0_slave_agent_rsp_fifo_out_data;                                   // sd_cont_0_slave_agent_rsp_fifo:out_data -> sd_cont_0_slave_agent:rf_sink_data
	wire          sd_cont_0_slave_agent_rsp_fifo_out_ready;                                  // sd_cont_0_slave_agent:rf_sink_ready -> sd_cont_0_slave_agent_rsp_fifo:out_ready
	wire          sd_cont_0_slave_agent_rsp_fifo_out_startofpacket;                          // sd_cont_0_slave_agent_rsp_fifo:out_startofpacket -> sd_cont_0_slave_agent:rf_sink_startofpacket
	wire          sd_cont_0_slave_agent_rsp_fifo_out_endofpacket;                            // sd_cont_0_slave_agent_rsp_fifo:out_endofpacket -> sd_cont_0_slave_agent:rf_sink_endofpacket
	wire          sd_cont_0_slave_agent_rdata_fifo_src_valid;                                // sd_cont_0_slave_agent:rdata_fifo_src_valid -> sd_cont_0_slave_agent_rdata_fifo:in_valid
	wire   [33:0] sd_cont_0_slave_agent_rdata_fifo_src_data;                                 // sd_cont_0_slave_agent:rdata_fifo_src_data -> sd_cont_0_slave_agent_rdata_fifo:in_data
	wire          sd_cont_0_slave_agent_rdata_fifo_src_ready;                                // sd_cont_0_slave_agent_rdata_fifo:in_ready -> sd_cont_0_slave_agent:rdata_fifo_src_ready
	wire   [15:0] sram_uas_agent_m0_readdata;                                                // sram_uas_translator:uav_readdata -> sram_uas_agent:m0_readdata
	wire          sram_uas_agent_m0_waitrequest;                                             // sram_uas_translator:uav_waitrequest -> sram_uas_agent:m0_waitrequest
	wire          sram_uas_agent_m0_debugaccess;                                             // sram_uas_agent:m0_debugaccess -> sram_uas_translator:uav_debugaccess
	wire   [31:0] sram_uas_agent_m0_address;                                                 // sram_uas_agent:m0_address -> sram_uas_translator:uav_address
	wire    [1:0] sram_uas_agent_m0_byteenable;                                              // sram_uas_agent:m0_byteenable -> sram_uas_translator:uav_byteenable
	wire          sram_uas_agent_m0_read;                                                    // sram_uas_agent:m0_read -> sram_uas_translator:uav_read
	wire          sram_uas_agent_m0_readdatavalid;                                           // sram_uas_translator:uav_readdatavalid -> sram_uas_agent:m0_readdatavalid
	wire          sram_uas_agent_m0_lock;                                                    // sram_uas_agent:m0_lock -> sram_uas_translator:uav_lock
	wire   [15:0] sram_uas_agent_m0_writedata;                                               // sram_uas_agent:m0_writedata -> sram_uas_translator:uav_writedata
	wire          sram_uas_agent_m0_write;                                                   // sram_uas_agent:m0_write -> sram_uas_translator:uav_write
	wire    [1:0] sram_uas_agent_m0_burstcount;                                              // sram_uas_agent:m0_burstcount -> sram_uas_translator:uav_burstcount
	wire          sram_uas_agent_rf_source_valid;                                            // sram_uas_agent:rf_source_valid -> sram_uas_agent_rsp_fifo:in_valid
	wire  [101:0] sram_uas_agent_rf_source_data;                                             // sram_uas_agent:rf_source_data -> sram_uas_agent_rsp_fifo:in_data
	wire          sram_uas_agent_rf_source_ready;                                            // sram_uas_agent_rsp_fifo:in_ready -> sram_uas_agent:rf_source_ready
	wire          sram_uas_agent_rf_source_startofpacket;                                    // sram_uas_agent:rf_source_startofpacket -> sram_uas_agent_rsp_fifo:in_startofpacket
	wire          sram_uas_agent_rf_source_endofpacket;                                      // sram_uas_agent:rf_source_endofpacket -> sram_uas_agent_rsp_fifo:in_endofpacket
	wire          sram_uas_agent_rsp_fifo_out_valid;                                         // sram_uas_agent_rsp_fifo:out_valid -> sram_uas_agent:rf_sink_valid
	wire  [101:0] sram_uas_agent_rsp_fifo_out_data;                                          // sram_uas_agent_rsp_fifo:out_data -> sram_uas_agent:rf_sink_data
	wire          sram_uas_agent_rsp_fifo_out_ready;                                         // sram_uas_agent:rf_sink_ready -> sram_uas_agent_rsp_fifo:out_ready
	wire          sram_uas_agent_rsp_fifo_out_startofpacket;                                 // sram_uas_agent_rsp_fifo:out_startofpacket -> sram_uas_agent:rf_sink_startofpacket
	wire          sram_uas_agent_rsp_fifo_out_endofpacket;                                   // sram_uas_agent_rsp_fifo:out_endofpacket -> sram_uas_agent:rf_sink_endofpacket
	wire          sram_uas_agent_rdata_fifo_src_valid;                                       // sram_uas_agent:rdata_fifo_src_valid -> sram_uas_agent_rdata_fifo:in_valid
	wire   [17:0] sram_uas_agent_rdata_fifo_src_data;                                        // sram_uas_agent:rdata_fifo_src_data -> sram_uas_agent_rdata_fifo:in_data
	wire          sram_uas_agent_rdata_fifo_src_ready;                                       // sram_uas_agent_rdata_fifo:in_ready -> sram_uas_agent:rdata_fifo_src_ready
	wire          cpu_data_master_agent_cp_valid;                                            // cpu_data_master_agent:cp_valid -> router:sink_valid
	wire  [118:0] cpu_data_master_agent_cp_data;                                             // cpu_data_master_agent:cp_data -> router:sink_data
	wire          cpu_data_master_agent_cp_ready;                                            // router:sink_ready -> cpu_data_master_agent:cp_ready
	wire          cpu_data_master_agent_cp_startofpacket;                                    // cpu_data_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          cpu_data_master_agent_cp_endofpacket;                                      // cpu_data_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          cpu_instruction_master_agent_cp_valid;                                     // cpu_instruction_master_agent:cp_valid -> router_001:sink_valid
	wire  [118:0] cpu_instruction_master_agent_cp_data;                                      // cpu_instruction_master_agent:cp_data -> router_001:sink_data
	wire          cpu_instruction_master_agent_cp_ready;                                     // router_001:sink_ready -> cpu_instruction_master_agent:cp_ready
	wire          cpu_instruction_master_agent_cp_startofpacket;                             // cpu_instruction_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          cpu_instruction_master_agent_cp_endofpacket;                               // cpu_instruction_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          router_002_src_valid;                                                      // router_002:src_valid -> cmd_demux_002:sink_valid
	wire  [118:0] router_002_src_data;                                                       // router_002:src_data -> cmd_demux_002:sink_data
	wire          router_002_src_ready;                                                      // cmd_demux_002:sink_ready -> router_002:src_ready
	wire   [18:0] router_002_src_channel;                                                    // router_002:src_channel -> cmd_demux_002:sink_channel
	wire          router_002_src_startofpacket;                                              // router_002:src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          router_002_src_endofpacket;                                                // router_002:src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          router_003_src_valid;                                                      // router_003:src_valid -> rsp_demux:sink_valid
	wire  [118:0] router_003_src_data;                                                       // router_003:src_data -> rsp_demux:sink_data
	wire          router_003_src_ready;                                                      // rsp_demux:sink_ready -> router_003:src_ready
	wire   [18:0] router_003_src_channel;                                                    // router_003:src_channel -> rsp_demux:sink_channel
	wire          router_003_src_startofpacket;                                              // router_003:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_003_src_endofpacket;                                                // router_003:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          router_004_src_valid;                                                      // router_004:src_valid -> rsp_demux_001:sink_valid
	wire  [118:0] router_004_src_data;                                                       // router_004:src_data -> rsp_demux_001:sink_data
	wire          router_004_src_ready;                                                      // rsp_demux_001:sink_ready -> router_004:src_ready
	wire   [18:0] router_004_src_channel;                                                    // router_004:src_channel -> rsp_demux_001:sink_channel
	wire          router_004_src_startofpacket;                                              // router_004:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_004_src_endofpacket;                                                // router_004:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          router_005_src_valid;                                                      // router_005:src_valid -> rsp_demux_002:sink_valid
	wire  [118:0] router_005_src_data;                                                       // router_005:src_data -> rsp_demux_002:sink_data
	wire          router_005_src_ready;                                                      // rsp_demux_002:sink_ready -> router_005:src_ready
	wire   [18:0] router_005_src_channel;                                                    // router_005:src_channel -> rsp_demux_002:sink_channel
	wire          router_005_src_startofpacket;                                              // router_005:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_005_src_endofpacket;                                                // router_005:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          router_006_src_valid;                                                      // router_006:src_valid -> rsp_demux_003:sink_valid
	wire  [118:0] router_006_src_data;                                                       // router_006:src_data -> rsp_demux_003:sink_data
	wire          router_006_src_ready;                                                      // rsp_demux_003:sink_ready -> router_006:src_ready
	wire   [18:0] router_006_src_channel;                                                    // router_006:src_channel -> rsp_demux_003:sink_channel
	wire          router_006_src_startofpacket;                                              // router_006:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_006_src_endofpacket;                                                // router_006:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          router_007_src_valid;                                                      // router_007:src_valid -> rsp_demux_004:sink_valid
	wire  [118:0] router_007_src_data;                                                       // router_007:src_data -> rsp_demux_004:sink_data
	wire          router_007_src_ready;                                                      // rsp_demux_004:sink_ready -> router_007:src_ready
	wire   [18:0] router_007_src_channel;                                                    // router_007:src_channel -> rsp_demux_004:sink_channel
	wire          router_007_src_startofpacket;                                              // router_007:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_007_src_endofpacket;                                                // router_007:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          router_008_src_valid;                                                      // router_008:src_valid -> rsp_demux_005:sink_valid
	wire  [118:0] router_008_src_data;                                                       // router_008:src_data -> rsp_demux_005:sink_data
	wire          router_008_src_ready;                                                      // rsp_demux_005:sink_ready -> router_008:src_ready
	wire   [18:0] router_008_src_channel;                                                    // router_008:src_channel -> rsp_demux_005:sink_channel
	wire          router_008_src_startofpacket;                                              // router_008:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_008_src_endofpacket;                                                // router_008:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          router_009_src_valid;                                                      // router_009:src_valid -> rsp_demux_006:sink_valid
	wire  [118:0] router_009_src_data;                                                       // router_009:src_data -> rsp_demux_006:sink_data
	wire          router_009_src_ready;                                                      // rsp_demux_006:sink_ready -> router_009:src_ready
	wire   [18:0] router_009_src_channel;                                                    // router_009:src_channel -> rsp_demux_006:sink_channel
	wire          router_009_src_startofpacket;                                              // router_009:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_009_src_endofpacket;                                                // router_009:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          router_013_src_valid;                                                      // router_013:src_valid -> rsp_demux_010:sink_valid
	wire  [118:0] router_013_src_data;                                                       // router_013:src_data -> rsp_demux_010:sink_data
	wire          router_013_src_ready;                                                      // rsp_demux_010:sink_ready -> router_013:src_ready
	wire   [18:0] router_013_src_channel;                                                    // router_013:src_channel -> rsp_demux_010:sink_channel
	wire          router_013_src_startofpacket;                                              // router_013:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_013_src_endofpacket;                                                // router_013:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          router_014_src_valid;                                                      // router_014:src_valid -> rsp_demux_011:sink_valid
	wire  [118:0] router_014_src_data;                                                       // router_014:src_data -> rsp_demux_011:sink_data
	wire          router_014_src_ready;                                                      // rsp_demux_011:sink_ready -> router_014:src_ready
	wire   [18:0] router_014_src_channel;                                                    // router_014:src_channel -> rsp_demux_011:sink_channel
	wire          router_014_src_startofpacket;                                              // router_014:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          router_014_src_endofpacket;                                                // router_014:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          router_015_src_valid;                                                      // router_015:src_valid -> rsp_demux_012:sink_valid
	wire  [118:0] router_015_src_data;                                                       // router_015:src_data -> rsp_demux_012:sink_data
	wire          router_015_src_ready;                                                      // rsp_demux_012:sink_ready -> router_015:src_ready
	wire   [18:0] router_015_src_channel;                                                    // router_015:src_channel -> rsp_demux_012:sink_channel
	wire          router_015_src_startofpacket;                                              // router_015:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire          router_015_src_endofpacket;                                                // router_015:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          router_016_src_valid;                                                      // router_016:src_valid -> rsp_demux_013:sink_valid
	wire  [118:0] router_016_src_data;                                                       // router_016:src_data -> rsp_demux_013:sink_data
	wire          router_016_src_ready;                                                      // rsp_demux_013:sink_ready -> router_016:src_ready
	wire   [18:0] router_016_src_channel;                                                    // router_016:src_channel -> rsp_demux_013:sink_channel
	wire          router_016_src_startofpacket;                                              // router_016:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire          router_016_src_endofpacket;                                                // router_016:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire          router_017_src_valid;                                                      // router_017:src_valid -> rsp_demux_014:sink_valid
	wire  [118:0] router_017_src_data;                                                       // router_017:src_data -> rsp_demux_014:sink_data
	wire          router_017_src_ready;                                                      // rsp_demux_014:sink_ready -> router_017:src_ready
	wire   [18:0] router_017_src_channel;                                                    // router_017:src_channel -> rsp_demux_014:sink_channel
	wire          router_017_src_startofpacket;                                              // router_017:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire          router_017_src_endofpacket;                                                // router_017:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire          router_018_src_valid;                                                      // router_018:src_valid -> rsp_demux_015:sink_valid
	wire  [118:0] router_018_src_data;                                                       // router_018:src_data -> rsp_demux_015:sink_data
	wire          router_018_src_ready;                                                      // rsp_demux_015:sink_ready -> router_018:src_ready
	wire   [18:0] router_018_src_channel;                                                    // router_018:src_channel -> rsp_demux_015:sink_channel
	wire          router_018_src_startofpacket;                                              // router_018:src_startofpacket -> rsp_demux_015:sink_startofpacket
	wire          router_018_src_endofpacket;                                                // router_018:src_endofpacket -> rsp_demux_015:sink_endofpacket
	wire          router_019_src_valid;                                                      // router_019:src_valid -> rsp_demux_016:sink_valid
	wire  [118:0] router_019_src_data;                                                       // router_019:src_data -> rsp_demux_016:sink_data
	wire          router_019_src_ready;                                                      // rsp_demux_016:sink_ready -> router_019:src_ready
	wire   [18:0] router_019_src_channel;                                                    // router_019:src_channel -> rsp_demux_016:sink_channel
	wire          router_019_src_startofpacket;                                              // router_019:src_startofpacket -> rsp_demux_016:sink_startofpacket
	wire          router_019_src_endofpacket;                                                // router_019:src_endofpacket -> rsp_demux_016:sink_endofpacket
	wire          router_020_src_valid;                                                      // router_020:src_valid -> rsp_demux_017:sink_valid
	wire  [118:0] router_020_src_data;                                                       // router_020:src_data -> rsp_demux_017:sink_data
	wire          router_020_src_ready;                                                      // rsp_demux_017:sink_ready -> router_020:src_ready
	wire   [18:0] router_020_src_channel;                                                    // router_020:src_channel -> rsp_demux_017:sink_channel
	wire          router_020_src_startofpacket;                                              // router_020:src_startofpacket -> rsp_demux_017:sink_startofpacket
	wire          router_020_src_endofpacket;                                                // router_020:src_endofpacket -> rsp_demux_017:sink_endofpacket
	wire          router_src_valid;                                                          // router:src_valid -> cpu_data_master_limiter:cmd_sink_valid
	wire  [118:0] router_src_data;                                                           // router:src_data -> cpu_data_master_limiter:cmd_sink_data
	wire          router_src_ready;                                                          // cpu_data_master_limiter:cmd_sink_ready -> router:src_ready
	wire   [18:0] router_src_channel;                                                        // router:src_channel -> cpu_data_master_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                  // router:src_startofpacket -> cpu_data_master_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                    // router:src_endofpacket -> cpu_data_master_limiter:cmd_sink_endofpacket
	wire          cpu_data_master_limiter_rsp_src_valid;                                     // cpu_data_master_limiter:rsp_src_valid -> cpu_data_master_agent:rp_valid
	wire  [118:0] cpu_data_master_limiter_rsp_src_data;                                      // cpu_data_master_limiter:rsp_src_data -> cpu_data_master_agent:rp_data
	wire          cpu_data_master_limiter_rsp_src_ready;                                     // cpu_data_master_agent:rp_ready -> cpu_data_master_limiter:rsp_src_ready
	wire   [18:0] cpu_data_master_limiter_rsp_src_channel;                                   // cpu_data_master_limiter:rsp_src_channel -> cpu_data_master_agent:rp_channel
	wire          cpu_data_master_limiter_rsp_src_startofpacket;                             // cpu_data_master_limiter:rsp_src_startofpacket -> cpu_data_master_agent:rp_startofpacket
	wire          cpu_data_master_limiter_rsp_src_endofpacket;                               // cpu_data_master_limiter:rsp_src_endofpacket -> cpu_data_master_agent:rp_endofpacket
	wire          router_001_src_valid;                                                      // router_001:src_valid -> cpu_instruction_master_limiter:cmd_sink_valid
	wire  [118:0] router_001_src_data;                                                       // router_001:src_data -> cpu_instruction_master_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                      // cpu_instruction_master_limiter:cmd_sink_ready -> router_001:src_ready
	wire   [18:0] router_001_src_channel;                                                    // router_001:src_channel -> cpu_instruction_master_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                              // router_001:src_startofpacket -> cpu_instruction_master_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                // router_001:src_endofpacket -> cpu_instruction_master_limiter:cmd_sink_endofpacket
	wire          cpu_instruction_master_limiter_rsp_src_valid;                              // cpu_instruction_master_limiter:rsp_src_valid -> cpu_instruction_master_agent:rp_valid
	wire  [118:0] cpu_instruction_master_limiter_rsp_src_data;                               // cpu_instruction_master_limiter:rsp_src_data -> cpu_instruction_master_agent:rp_data
	wire          cpu_instruction_master_limiter_rsp_src_ready;                              // cpu_instruction_master_agent:rp_ready -> cpu_instruction_master_limiter:rsp_src_ready
	wire   [18:0] cpu_instruction_master_limiter_rsp_src_channel;                            // cpu_instruction_master_limiter:rsp_src_channel -> cpu_instruction_master_agent:rp_channel
	wire          cpu_instruction_master_limiter_rsp_src_startofpacket;                      // cpu_instruction_master_limiter:rsp_src_startofpacket -> cpu_instruction_master_agent:rp_startofpacket
	wire          cpu_instruction_master_limiter_rsp_src_endofpacket;                        // cpu_instruction_master_limiter:rsp_src_endofpacket -> cpu_instruction_master_agent:rp_endofpacket
	wire          cmd_mux_src_valid;                                                         // cmd_mux:src_valid -> jtag_uart_avalon_jtag_slave_burst_adapter:sink0_valid
	wire  [118:0] cmd_mux_src_data;                                                          // cmd_mux:src_data -> jtag_uart_avalon_jtag_slave_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                         // jtag_uart_avalon_jtag_slave_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire   [18:0] cmd_mux_src_channel;                                                       // cmd_mux:src_channel -> jtag_uart_avalon_jtag_slave_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                                 // cmd_mux:src_startofpacket -> jtag_uart_avalon_jtag_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                                   // cmd_mux:src_endofpacket -> jtag_uart_avalon_jtag_slave_burst_adapter:sink0_endofpacket
	wire          cmd_mux_002_src_valid;                                                     // cmd_mux_002:src_valid -> sysid_control_slave_burst_adapter:sink0_valid
	wire  [118:0] cmd_mux_002_src_data;                                                      // cmd_mux_002:src_data -> sysid_control_slave_burst_adapter:sink0_data
	wire          cmd_mux_002_src_ready;                                                     // sysid_control_slave_burst_adapter:sink0_ready -> cmd_mux_002:src_ready
	wire   [18:0] cmd_mux_002_src_channel;                                                   // cmd_mux_002:src_channel -> sysid_control_slave_burst_adapter:sink0_channel
	wire          cmd_mux_002_src_startofpacket;                                             // cmd_mux_002:src_startofpacket -> sysid_control_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                               // cmd_mux_002:src_endofpacket -> sysid_control_slave_burst_adapter:sink0_endofpacket
	wire          cmd_mux_003_src_valid;                                                     // cmd_mux_003:src_valid -> video_dma_csr_burst_adapter:sink0_valid
	wire  [118:0] cmd_mux_003_src_data;                                                      // cmd_mux_003:src_data -> video_dma_csr_burst_adapter:sink0_data
	wire          cmd_mux_003_src_ready;                                                     // video_dma_csr_burst_adapter:sink0_ready -> cmd_mux_003:src_ready
	wire   [18:0] cmd_mux_003_src_channel;                                                   // cmd_mux_003:src_channel -> video_dma_csr_burst_adapter:sink0_channel
	wire          cmd_mux_003_src_startofpacket;                                             // cmd_mux_003:src_startofpacket -> video_dma_csr_burst_adapter:sink0_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                               // cmd_mux_003:src_endofpacket -> video_dma_csr_burst_adapter:sink0_endofpacket
	wire          cmd_mux_004_src_valid;                                                     // cmd_mux_004:src_valid -> to_idct_hwacel_csr_burst_adapter:sink0_valid
	wire  [118:0] cmd_mux_004_src_data;                                                      // cmd_mux_004:src_data -> to_idct_hwacel_csr_burst_adapter:sink0_data
	wire          cmd_mux_004_src_ready;                                                     // to_idct_hwacel_csr_burst_adapter:sink0_ready -> cmd_mux_004:src_ready
	wire   [18:0] cmd_mux_004_src_channel;                                                   // cmd_mux_004:src_channel -> to_idct_hwacel_csr_burst_adapter:sink0_channel
	wire          cmd_mux_004_src_startofpacket;                                             // cmd_mux_004:src_startofpacket -> to_idct_hwacel_csr_burst_adapter:sink0_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                               // cmd_mux_004:src_endofpacket -> to_idct_hwacel_csr_burst_adapter:sink0_endofpacket
	wire          cmd_mux_005_src_valid;                                                     // cmd_mux_005:src_valid -> from_idct_hwacel_csr_burst_adapter:sink0_valid
	wire  [118:0] cmd_mux_005_src_data;                                                      // cmd_mux_005:src_data -> from_idct_hwacel_csr_burst_adapter:sink0_data
	wire          cmd_mux_005_src_ready;                                                     // from_idct_hwacel_csr_burst_adapter:sink0_ready -> cmd_mux_005:src_ready
	wire   [18:0] cmd_mux_005_src_channel;                                                   // cmd_mux_005:src_channel -> from_idct_hwacel_csr_burst_adapter:sink0_channel
	wire          cmd_mux_005_src_startofpacket;                                             // cmd_mux_005:src_startofpacket -> from_idct_hwacel_csr_burst_adapter:sink0_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                               // cmd_mux_005:src_endofpacket -> from_idct_hwacel_csr_burst_adapter:sink0_endofpacket
	wire          cmd_mux_006_src_valid;                                                     // cmd_mux_006:src_valid -> cpu_debug_mem_slave_burst_adapter:sink0_valid
	wire  [118:0] cmd_mux_006_src_data;                                                      // cmd_mux_006:src_data -> cpu_debug_mem_slave_burst_adapter:sink0_data
	wire          cmd_mux_006_src_ready;                                                     // cpu_debug_mem_slave_burst_adapter:sink0_ready -> cmd_mux_006:src_ready
	wire   [18:0] cmd_mux_006_src_channel;                                                   // cmd_mux_006:src_channel -> cpu_debug_mem_slave_burst_adapter:sink0_channel
	wire          cmd_mux_006_src_startofpacket;                                             // cmd_mux_006:src_startofpacket -> cpu_debug_mem_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                               // cmd_mux_006:src_endofpacket -> cpu_debug_mem_slave_burst_adapter:sink0_endofpacket
	wire          cmd_mux_010_src_valid;                                                     // cmd_mux_010:src_valid -> timer_0_s1_burst_adapter:sink0_valid
	wire  [118:0] cmd_mux_010_src_data;                                                      // cmd_mux_010:src_data -> timer_0_s1_burst_adapter:sink0_data
	wire          cmd_mux_010_src_ready;                                                     // timer_0_s1_burst_adapter:sink0_ready -> cmd_mux_010:src_ready
	wire   [18:0] cmd_mux_010_src_channel;                                                   // cmd_mux_010:src_channel -> timer_0_s1_burst_adapter:sink0_channel
	wire          cmd_mux_010_src_startofpacket;                                             // cmd_mux_010:src_startofpacket -> timer_0_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                               // cmd_mux_010:src_endofpacket -> timer_0_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_011_src_valid;                                                     // cmd_mux_011:src_valid -> key_s1_burst_adapter:sink0_valid
	wire  [118:0] cmd_mux_011_src_data;                                                      // cmd_mux_011:src_data -> key_s1_burst_adapter:sink0_data
	wire          cmd_mux_011_src_ready;                                                     // key_s1_burst_adapter:sink0_ready -> cmd_mux_011:src_ready
	wire   [18:0] cmd_mux_011_src_channel;                                                   // cmd_mux_011:src_channel -> key_s1_burst_adapter:sink0_channel
	wire          cmd_mux_011_src_startofpacket;                                             // cmd_mux_011:src_startofpacket -> key_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                               // cmd_mux_011:src_endofpacket -> key_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_012_src_valid;                                                     // cmd_mux_012:src_valid -> timer_1_s1_burst_adapter:sink0_valid
	wire  [118:0] cmd_mux_012_src_data;                                                      // cmd_mux_012:src_data -> timer_1_s1_burst_adapter:sink0_data
	wire          cmd_mux_012_src_ready;                                                     // timer_1_s1_burst_adapter:sink0_ready -> cmd_mux_012:src_ready
	wire   [18:0] cmd_mux_012_src_channel;                                                   // cmd_mux_012:src_channel -> timer_1_s1_burst_adapter:sink0_channel
	wire          cmd_mux_012_src_startofpacket;                                             // cmd_mux_012:src_startofpacket -> timer_1_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_012_src_endofpacket;                                               // cmd_mux_012:src_endofpacket -> timer_1_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_013_src_valid;                                                     // cmd_mux_013:src_valid -> ledg_s1_burst_adapter:sink0_valid
	wire  [118:0] cmd_mux_013_src_data;                                                      // cmd_mux_013:src_data -> ledg_s1_burst_adapter:sink0_data
	wire          cmd_mux_013_src_ready;                                                     // ledg_s1_burst_adapter:sink0_ready -> cmd_mux_013:src_ready
	wire   [18:0] cmd_mux_013_src_channel;                                                   // cmd_mux_013:src_channel -> ledg_s1_burst_adapter:sink0_channel
	wire          cmd_mux_013_src_startofpacket;                                             // cmd_mux_013:src_startofpacket -> ledg_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_013_src_endofpacket;                                               // cmd_mux_013:src_endofpacket -> ledg_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_014_src_valid;                                                     // cmd_mux_014:src_valid -> ledr_s1_burst_adapter:sink0_valid
	wire  [118:0] cmd_mux_014_src_data;                                                      // cmd_mux_014:src_data -> ledr_s1_burst_adapter:sink0_data
	wire          cmd_mux_014_src_ready;                                                     // ledr_s1_burst_adapter:sink0_ready -> cmd_mux_014:src_ready
	wire   [18:0] cmd_mux_014_src_channel;                                                   // cmd_mux_014:src_channel -> ledr_s1_burst_adapter:sink0_channel
	wire          cmd_mux_014_src_startofpacket;                                             // cmd_mux_014:src_startofpacket -> ledr_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_014_src_endofpacket;                                               // cmd_mux_014:src_endofpacket -> ledr_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_015_src_valid;                                                     // cmd_mux_015:src_valid -> i2c_scl_s1_burst_adapter:sink0_valid
	wire  [118:0] cmd_mux_015_src_data;                                                      // cmd_mux_015:src_data -> i2c_scl_s1_burst_adapter:sink0_data
	wire          cmd_mux_015_src_ready;                                                     // i2c_scl_s1_burst_adapter:sink0_ready -> cmd_mux_015:src_ready
	wire   [18:0] cmd_mux_015_src_channel;                                                   // cmd_mux_015:src_channel -> i2c_scl_s1_burst_adapter:sink0_channel
	wire          cmd_mux_015_src_startofpacket;                                             // cmd_mux_015:src_startofpacket -> i2c_scl_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_015_src_endofpacket;                                               // cmd_mux_015:src_endofpacket -> i2c_scl_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_016_src_valid;                                                     // cmd_mux_016:src_valid -> i2c_sda_s1_burst_adapter:sink0_valid
	wire  [118:0] cmd_mux_016_src_data;                                                      // cmd_mux_016:src_data -> i2c_sda_s1_burst_adapter:sink0_data
	wire          cmd_mux_016_src_ready;                                                     // i2c_sda_s1_burst_adapter:sink0_ready -> cmd_mux_016:src_ready
	wire   [18:0] cmd_mux_016_src_channel;                                                   // cmd_mux_016:src_channel -> i2c_sda_s1_burst_adapter:sink0_channel
	wire          cmd_mux_016_src_startofpacket;                                             // cmd_mux_016:src_startofpacket -> i2c_sda_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_016_src_endofpacket;                                               // cmd_mux_016:src_endofpacket -> i2c_sda_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_017_src_valid;                                                     // cmd_mux_017:src_valid -> sd_cont_0_slave_burst_adapter:sink0_valid
	wire  [118:0] cmd_mux_017_src_data;                                                      // cmd_mux_017:src_data -> sd_cont_0_slave_burst_adapter:sink0_data
	wire          cmd_mux_017_src_ready;                                                     // sd_cont_0_slave_burst_adapter:sink0_ready -> cmd_mux_017:src_ready
	wire   [18:0] cmd_mux_017_src_channel;                                                   // cmd_mux_017:src_channel -> sd_cont_0_slave_burst_adapter:sink0_channel
	wire          cmd_mux_017_src_startofpacket;                                             // cmd_mux_017:src_startofpacket -> sd_cont_0_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_017_src_endofpacket;                                               // cmd_mux_017:src_endofpacket -> sd_cont_0_slave_burst_adapter:sink0_endofpacket
	wire          router_010_src_valid;                                                      // router_010:src_valid -> video_dma_descriptor_slave_rsp_width_adapter:in_valid
	wire  [226:0] router_010_src_data;                                                       // router_010:src_data -> video_dma_descriptor_slave_rsp_width_adapter:in_data
	wire          router_010_src_ready;                                                      // video_dma_descriptor_slave_rsp_width_adapter:in_ready -> router_010:src_ready
	wire   [18:0] router_010_src_channel;                                                    // router_010:src_channel -> video_dma_descriptor_slave_rsp_width_adapter:in_channel
	wire          router_010_src_startofpacket;                                              // router_010:src_startofpacket -> video_dma_descriptor_slave_rsp_width_adapter:in_startofpacket
	wire          router_010_src_endofpacket;                                                // router_010:src_endofpacket -> video_dma_descriptor_slave_rsp_width_adapter:in_endofpacket
	wire          video_dma_descriptor_slave_rsp_width_adapter_src_valid;                    // video_dma_descriptor_slave_rsp_width_adapter:out_valid -> rsp_demux_007:sink_valid
	wire  [118:0] video_dma_descriptor_slave_rsp_width_adapter_src_data;                     // video_dma_descriptor_slave_rsp_width_adapter:out_data -> rsp_demux_007:sink_data
	wire          video_dma_descriptor_slave_rsp_width_adapter_src_ready;                    // rsp_demux_007:sink_ready -> video_dma_descriptor_slave_rsp_width_adapter:out_ready
	wire   [18:0] video_dma_descriptor_slave_rsp_width_adapter_src_channel;                  // video_dma_descriptor_slave_rsp_width_adapter:out_channel -> rsp_demux_007:sink_channel
	wire          video_dma_descriptor_slave_rsp_width_adapter_src_startofpacket;            // video_dma_descriptor_slave_rsp_width_adapter:out_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          video_dma_descriptor_slave_rsp_width_adapter_src_endofpacket;              // video_dma_descriptor_slave_rsp_width_adapter:out_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          router_011_src_valid;                                                      // router_011:src_valid -> to_idct_hwacel_descriptor_slave_rsp_width_adapter:in_valid
	wire  [226:0] router_011_src_data;                                                       // router_011:src_data -> to_idct_hwacel_descriptor_slave_rsp_width_adapter:in_data
	wire          router_011_src_ready;                                                      // to_idct_hwacel_descriptor_slave_rsp_width_adapter:in_ready -> router_011:src_ready
	wire   [18:0] router_011_src_channel;                                                    // router_011:src_channel -> to_idct_hwacel_descriptor_slave_rsp_width_adapter:in_channel
	wire          router_011_src_startofpacket;                                              // router_011:src_startofpacket -> to_idct_hwacel_descriptor_slave_rsp_width_adapter:in_startofpacket
	wire          router_011_src_endofpacket;                                                // router_011:src_endofpacket -> to_idct_hwacel_descriptor_slave_rsp_width_adapter:in_endofpacket
	wire          to_idct_hwacel_descriptor_slave_rsp_width_adapter_src_valid;               // to_idct_hwacel_descriptor_slave_rsp_width_adapter:out_valid -> rsp_demux_008:sink_valid
	wire  [118:0] to_idct_hwacel_descriptor_slave_rsp_width_adapter_src_data;                // to_idct_hwacel_descriptor_slave_rsp_width_adapter:out_data -> rsp_demux_008:sink_data
	wire          to_idct_hwacel_descriptor_slave_rsp_width_adapter_src_ready;               // rsp_demux_008:sink_ready -> to_idct_hwacel_descriptor_slave_rsp_width_adapter:out_ready
	wire   [18:0] to_idct_hwacel_descriptor_slave_rsp_width_adapter_src_channel;             // to_idct_hwacel_descriptor_slave_rsp_width_adapter:out_channel -> rsp_demux_008:sink_channel
	wire          to_idct_hwacel_descriptor_slave_rsp_width_adapter_src_startofpacket;       // to_idct_hwacel_descriptor_slave_rsp_width_adapter:out_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          to_idct_hwacel_descriptor_slave_rsp_width_adapter_src_endofpacket;         // to_idct_hwacel_descriptor_slave_rsp_width_adapter:out_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          router_012_src_valid;                                                      // router_012:src_valid -> from_idct_hwacel_descriptor_slave_rsp_width_adapter:in_valid
	wire  [226:0] router_012_src_data;                                                       // router_012:src_data -> from_idct_hwacel_descriptor_slave_rsp_width_adapter:in_data
	wire          router_012_src_ready;                                                      // from_idct_hwacel_descriptor_slave_rsp_width_adapter:in_ready -> router_012:src_ready
	wire   [18:0] router_012_src_channel;                                                    // router_012:src_channel -> from_idct_hwacel_descriptor_slave_rsp_width_adapter:in_channel
	wire          router_012_src_startofpacket;                                              // router_012:src_startofpacket -> from_idct_hwacel_descriptor_slave_rsp_width_adapter:in_startofpacket
	wire          router_012_src_endofpacket;                                                // router_012:src_endofpacket -> from_idct_hwacel_descriptor_slave_rsp_width_adapter:in_endofpacket
	wire          from_idct_hwacel_descriptor_slave_rsp_width_adapter_src_valid;             // from_idct_hwacel_descriptor_slave_rsp_width_adapter:out_valid -> rsp_demux_009:sink_valid
	wire  [118:0] from_idct_hwacel_descriptor_slave_rsp_width_adapter_src_data;              // from_idct_hwacel_descriptor_slave_rsp_width_adapter:out_data -> rsp_demux_009:sink_data
	wire          from_idct_hwacel_descriptor_slave_rsp_width_adapter_src_ready;             // rsp_demux_009:sink_ready -> from_idct_hwacel_descriptor_slave_rsp_width_adapter:out_ready
	wire   [18:0] from_idct_hwacel_descriptor_slave_rsp_width_adapter_src_channel;           // from_idct_hwacel_descriptor_slave_rsp_width_adapter:out_channel -> rsp_demux_009:sink_channel
	wire          from_idct_hwacel_descriptor_slave_rsp_width_adapter_src_startofpacket;     // from_idct_hwacel_descriptor_slave_rsp_width_adapter:out_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          from_idct_hwacel_descriptor_slave_rsp_width_adapter_src_endofpacket;       // from_idct_hwacel_descriptor_slave_rsp_width_adapter:out_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          router_021_src_valid;                                                      // router_021:src_valid -> sram_uas_rsp_width_adapter:in_valid
	wire  [100:0] router_021_src_data;                                                       // router_021:src_data -> sram_uas_rsp_width_adapter:in_data
	wire          router_021_src_ready;                                                      // sram_uas_rsp_width_adapter:in_ready -> router_021:src_ready
	wire   [18:0] router_021_src_channel;                                                    // router_021:src_channel -> sram_uas_rsp_width_adapter:in_channel
	wire          router_021_src_startofpacket;                                              // router_021:src_startofpacket -> sram_uas_rsp_width_adapter:in_startofpacket
	wire          router_021_src_endofpacket;                                                // router_021:src_endofpacket -> sram_uas_rsp_width_adapter:in_endofpacket
	wire          sram_uas_rsp_width_adapter_src_valid;                                      // sram_uas_rsp_width_adapter:out_valid -> rsp_demux_018:sink_valid
	wire  [118:0] sram_uas_rsp_width_adapter_src_data;                                       // sram_uas_rsp_width_adapter:out_data -> rsp_demux_018:sink_data
	wire          sram_uas_rsp_width_adapter_src_ready;                                      // rsp_demux_018:sink_ready -> sram_uas_rsp_width_adapter:out_ready
	wire   [18:0] sram_uas_rsp_width_adapter_src_channel;                                    // sram_uas_rsp_width_adapter:out_channel -> rsp_demux_018:sink_channel
	wire          sram_uas_rsp_width_adapter_src_startofpacket;                              // sram_uas_rsp_width_adapter:out_startofpacket -> rsp_demux_018:sink_startofpacket
	wire          sram_uas_rsp_width_adapter_src_endofpacket;                                // sram_uas_rsp_width_adapter:out_endofpacket -> rsp_demux_018:sink_endofpacket
	wire          cmd_mux_007_src_valid;                                                     // cmd_mux_007:src_valid -> video_dma_descriptor_slave_cmd_width_adapter:in_valid
	wire  [118:0] cmd_mux_007_src_data;                                                      // cmd_mux_007:src_data -> video_dma_descriptor_slave_cmd_width_adapter:in_data
	wire          cmd_mux_007_src_ready;                                                     // video_dma_descriptor_slave_cmd_width_adapter:in_ready -> cmd_mux_007:src_ready
	wire   [18:0] cmd_mux_007_src_channel;                                                   // cmd_mux_007:src_channel -> video_dma_descriptor_slave_cmd_width_adapter:in_channel
	wire          cmd_mux_007_src_startofpacket;                                             // cmd_mux_007:src_startofpacket -> video_dma_descriptor_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                               // cmd_mux_007:src_endofpacket -> video_dma_descriptor_slave_cmd_width_adapter:in_endofpacket
	wire          video_dma_descriptor_slave_cmd_width_adapter_src_valid;                    // video_dma_descriptor_slave_cmd_width_adapter:out_valid -> video_dma_descriptor_slave_burst_adapter:sink0_valid
	wire  [226:0] video_dma_descriptor_slave_cmd_width_adapter_src_data;                     // video_dma_descriptor_slave_cmd_width_adapter:out_data -> video_dma_descriptor_slave_burst_adapter:sink0_data
	wire          video_dma_descriptor_slave_cmd_width_adapter_src_ready;                    // video_dma_descriptor_slave_burst_adapter:sink0_ready -> video_dma_descriptor_slave_cmd_width_adapter:out_ready
	wire   [18:0] video_dma_descriptor_slave_cmd_width_adapter_src_channel;                  // video_dma_descriptor_slave_cmd_width_adapter:out_channel -> video_dma_descriptor_slave_burst_adapter:sink0_channel
	wire          video_dma_descriptor_slave_cmd_width_adapter_src_startofpacket;            // video_dma_descriptor_slave_cmd_width_adapter:out_startofpacket -> video_dma_descriptor_slave_burst_adapter:sink0_startofpacket
	wire          video_dma_descriptor_slave_cmd_width_adapter_src_endofpacket;              // video_dma_descriptor_slave_cmd_width_adapter:out_endofpacket -> video_dma_descriptor_slave_burst_adapter:sink0_endofpacket
	wire          cmd_mux_008_src_valid;                                                     // cmd_mux_008:src_valid -> to_idct_hwacel_descriptor_slave_cmd_width_adapter:in_valid
	wire  [118:0] cmd_mux_008_src_data;                                                      // cmd_mux_008:src_data -> to_idct_hwacel_descriptor_slave_cmd_width_adapter:in_data
	wire          cmd_mux_008_src_ready;                                                     // to_idct_hwacel_descriptor_slave_cmd_width_adapter:in_ready -> cmd_mux_008:src_ready
	wire   [18:0] cmd_mux_008_src_channel;                                                   // cmd_mux_008:src_channel -> to_idct_hwacel_descriptor_slave_cmd_width_adapter:in_channel
	wire          cmd_mux_008_src_startofpacket;                                             // cmd_mux_008:src_startofpacket -> to_idct_hwacel_descriptor_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                               // cmd_mux_008:src_endofpacket -> to_idct_hwacel_descriptor_slave_cmd_width_adapter:in_endofpacket
	wire          to_idct_hwacel_descriptor_slave_cmd_width_adapter_src_valid;               // to_idct_hwacel_descriptor_slave_cmd_width_adapter:out_valid -> to_idct_hwacel_descriptor_slave_burst_adapter:sink0_valid
	wire  [226:0] to_idct_hwacel_descriptor_slave_cmd_width_adapter_src_data;                // to_idct_hwacel_descriptor_slave_cmd_width_adapter:out_data -> to_idct_hwacel_descriptor_slave_burst_adapter:sink0_data
	wire          to_idct_hwacel_descriptor_slave_cmd_width_adapter_src_ready;               // to_idct_hwacel_descriptor_slave_burst_adapter:sink0_ready -> to_idct_hwacel_descriptor_slave_cmd_width_adapter:out_ready
	wire   [18:0] to_idct_hwacel_descriptor_slave_cmd_width_adapter_src_channel;             // to_idct_hwacel_descriptor_slave_cmd_width_adapter:out_channel -> to_idct_hwacel_descriptor_slave_burst_adapter:sink0_channel
	wire          to_idct_hwacel_descriptor_slave_cmd_width_adapter_src_startofpacket;       // to_idct_hwacel_descriptor_slave_cmd_width_adapter:out_startofpacket -> to_idct_hwacel_descriptor_slave_burst_adapter:sink0_startofpacket
	wire          to_idct_hwacel_descriptor_slave_cmd_width_adapter_src_endofpacket;         // to_idct_hwacel_descriptor_slave_cmd_width_adapter:out_endofpacket -> to_idct_hwacel_descriptor_slave_burst_adapter:sink0_endofpacket
	wire          cmd_mux_009_src_valid;                                                     // cmd_mux_009:src_valid -> from_idct_hwacel_descriptor_slave_cmd_width_adapter:in_valid
	wire  [118:0] cmd_mux_009_src_data;                                                      // cmd_mux_009:src_data -> from_idct_hwacel_descriptor_slave_cmd_width_adapter:in_data
	wire          cmd_mux_009_src_ready;                                                     // from_idct_hwacel_descriptor_slave_cmd_width_adapter:in_ready -> cmd_mux_009:src_ready
	wire   [18:0] cmd_mux_009_src_channel;                                                   // cmd_mux_009:src_channel -> from_idct_hwacel_descriptor_slave_cmd_width_adapter:in_channel
	wire          cmd_mux_009_src_startofpacket;                                             // cmd_mux_009:src_startofpacket -> from_idct_hwacel_descriptor_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                               // cmd_mux_009:src_endofpacket -> from_idct_hwacel_descriptor_slave_cmd_width_adapter:in_endofpacket
	wire          from_idct_hwacel_descriptor_slave_cmd_width_adapter_src_valid;             // from_idct_hwacel_descriptor_slave_cmd_width_adapter:out_valid -> from_idct_hwacel_descriptor_slave_burst_adapter:sink0_valid
	wire  [226:0] from_idct_hwacel_descriptor_slave_cmd_width_adapter_src_data;              // from_idct_hwacel_descriptor_slave_cmd_width_adapter:out_data -> from_idct_hwacel_descriptor_slave_burst_adapter:sink0_data
	wire          from_idct_hwacel_descriptor_slave_cmd_width_adapter_src_ready;             // from_idct_hwacel_descriptor_slave_burst_adapter:sink0_ready -> from_idct_hwacel_descriptor_slave_cmd_width_adapter:out_ready
	wire   [18:0] from_idct_hwacel_descriptor_slave_cmd_width_adapter_src_channel;           // from_idct_hwacel_descriptor_slave_cmd_width_adapter:out_channel -> from_idct_hwacel_descriptor_slave_burst_adapter:sink0_channel
	wire          from_idct_hwacel_descriptor_slave_cmd_width_adapter_src_startofpacket;     // from_idct_hwacel_descriptor_slave_cmd_width_adapter:out_startofpacket -> from_idct_hwacel_descriptor_slave_burst_adapter:sink0_startofpacket
	wire          from_idct_hwacel_descriptor_slave_cmd_width_adapter_src_endofpacket;       // from_idct_hwacel_descriptor_slave_cmd_width_adapter:out_endofpacket -> from_idct_hwacel_descriptor_slave_burst_adapter:sink0_endofpacket
	wire          cmd_mux_018_src_valid;                                                     // cmd_mux_018:src_valid -> sram_uas_cmd_width_adapter:in_valid
	wire  [118:0] cmd_mux_018_src_data;                                                      // cmd_mux_018:src_data -> sram_uas_cmd_width_adapter:in_data
	wire          cmd_mux_018_src_ready;                                                     // sram_uas_cmd_width_adapter:in_ready -> cmd_mux_018:src_ready
	wire   [18:0] cmd_mux_018_src_channel;                                                   // cmd_mux_018:src_channel -> sram_uas_cmd_width_adapter:in_channel
	wire          cmd_mux_018_src_startofpacket;                                             // cmd_mux_018:src_startofpacket -> sram_uas_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_018_src_endofpacket;                                               // cmd_mux_018:src_endofpacket -> sram_uas_cmd_width_adapter:in_endofpacket
	wire          sram_uas_cmd_width_adapter_src_valid;                                      // sram_uas_cmd_width_adapter:out_valid -> sram_uas_burst_adapter:sink0_valid
	wire  [100:0] sram_uas_cmd_width_adapter_src_data;                                       // sram_uas_cmd_width_adapter:out_data -> sram_uas_burst_adapter:sink0_data
	wire          sram_uas_cmd_width_adapter_src_ready;                                      // sram_uas_burst_adapter:sink0_ready -> sram_uas_cmd_width_adapter:out_ready
	wire   [18:0] sram_uas_cmd_width_adapter_src_channel;                                    // sram_uas_cmd_width_adapter:out_channel -> sram_uas_burst_adapter:sink0_channel
	wire          sram_uas_cmd_width_adapter_src_startofpacket;                              // sram_uas_cmd_width_adapter:out_startofpacket -> sram_uas_burst_adapter:sink0_startofpacket
	wire          sram_uas_cmd_width_adapter_src_endofpacket;                                // sram_uas_cmd_width_adapter:out_endofpacket -> sram_uas_burst_adapter:sink0_endofpacket
	wire          cmd_demux_src17_valid;                                                     // cmd_demux:src17_valid -> crosser:in_valid
	wire  [118:0] cmd_demux_src17_data;                                                      // cmd_demux:src17_data -> crosser:in_data
	wire          cmd_demux_src17_ready;                                                     // crosser:in_ready -> cmd_demux:src17_ready
	wire   [18:0] cmd_demux_src17_channel;                                                   // cmd_demux:src17_channel -> crosser:in_channel
	wire          cmd_demux_src17_startofpacket;                                             // cmd_demux:src17_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src17_endofpacket;                                               // cmd_demux:src17_endofpacket -> crosser:in_endofpacket
	wire          cmd_demux_002_src0_valid;                                                  // cmd_demux_002:src0_valid -> crosser_001:in_valid
	wire  [118:0] cmd_demux_002_src0_data;                                                   // cmd_demux_002:src0_data -> crosser_001:in_data
	wire          cmd_demux_002_src0_ready;                                                  // crosser_001:in_ready -> cmd_demux_002:src0_ready
	wire   [18:0] cmd_demux_002_src0_channel;                                                // cmd_demux_002:src0_channel -> crosser_001:in_channel
	wire          cmd_demux_002_src0_startofpacket;                                          // cmd_demux_002:src0_startofpacket -> crosser_001:in_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                            // cmd_demux_002:src0_endofpacket -> crosser_001:in_endofpacket
	wire          rsp_demux_001_src1_valid;                                                  // rsp_demux_001:src1_valid -> crosser_002:in_valid
	wire  [118:0] rsp_demux_001_src1_data;                                                   // rsp_demux_001:src1_data -> crosser_002:in_data
	wire          rsp_demux_001_src1_ready;                                                  // crosser_002:in_ready -> rsp_demux_001:src1_ready
	wire   [18:0] rsp_demux_001_src1_channel;                                                // rsp_demux_001:src1_channel -> crosser_002:in_channel
	wire          rsp_demux_001_src1_startofpacket;                                          // rsp_demux_001:src1_startofpacket -> crosser_002:in_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                            // rsp_demux_001:src1_endofpacket -> crosser_002:in_endofpacket
	wire          rsp_demux_017_src0_valid;                                                  // rsp_demux_017:src0_valid -> crosser_003:in_valid
	wire  [118:0] rsp_demux_017_src0_data;                                                   // rsp_demux_017:src0_data -> crosser_003:in_data
	wire          rsp_demux_017_src0_ready;                                                  // crosser_003:in_ready -> rsp_demux_017:src0_ready
	wire   [18:0] rsp_demux_017_src0_channel;                                                // rsp_demux_017:src0_channel -> crosser_003:in_channel
	wire          rsp_demux_017_src0_startofpacket;                                          // rsp_demux_017:src0_startofpacket -> crosser_003:in_startofpacket
	wire          rsp_demux_017_src0_endofpacket;                                            // rsp_demux_017:src0_endofpacket -> crosser_003:in_endofpacket
	wire    [0:0] cpu_data_master_limiter_cmd_src_valid;                                     // cpu_data_master_limiter:cmd_src_valid -> limiter_pipeline:in_valid
	wire  [118:0] cpu_data_master_limiter_cmd_src_data;                                      // cpu_data_master_limiter:cmd_src_data -> limiter_pipeline:in_data
	wire          cpu_data_master_limiter_cmd_src_ready;                                     // limiter_pipeline:in_ready -> cpu_data_master_limiter:cmd_src_ready
	wire   [18:0] cpu_data_master_limiter_cmd_src_channel;                                   // cpu_data_master_limiter:cmd_src_channel -> limiter_pipeline:in_channel
	wire          cpu_data_master_limiter_cmd_src_startofpacket;                             // cpu_data_master_limiter:cmd_src_startofpacket -> limiter_pipeline:in_startofpacket
	wire          cpu_data_master_limiter_cmd_src_endofpacket;                               // cpu_data_master_limiter:cmd_src_endofpacket -> limiter_pipeline:in_endofpacket
	wire          limiter_pipeline_source0_valid;                                            // limiter_pipeline:out_valid -> cmd_demux:sink_valid
	wire  [118:0] limiter_pipeline_source0_data;                                             // limiter_pipeline:out_data -> cmd_demux:sink_data
	wire          limiter_pipeline_source0_ready;                                            // cmd_demux:sink_ready -> limiter_pipeline:out_ready
	wire   [18:0] limiter_pipeline_source0_channel;                                          // limiter_pipeline:out_channel -> cmd_demux:sink_channel
	wire          limiter_pipeline_source0_startofpacket;                                    // limiter_pipeline:out_startofpacket -> cmd_demux:sink_startofpacket
	wire          limiter_pipeline_source0_endofpacket;                                      // limiter_pipeline:out_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                         // rsp_mux:src_valid -> limiter_pipeline_001:in_valid
	wire  [118:0] rsp_mux_src_data;                                                          // rsp_mux:src_data -> limiter_pipeline_001:in_data
	wire          rsp_mux_src_ready;                                                         // limiter_pipeline_001:in_ready -> rsp_mux:src_ready
	wire   [18:0] rsp_mux_src_channel;                                                       // rsp_mux:src_channel -> limiter_pipeline_001:in_channel
	wire          rsp_mux_src_startofpacket;                                                 // rsp_mux:src_startofpacket -> limiter_pipeline_001:in_startofpacket
	wire          rsp_mux_src_endofpacket;                                                   // rsp_mux:src_endofpacket -> limiter_pipeline_001:in_endofpacket
	wire          limiter_pipeline_001_source0_valid;                                        // limiter_pipeline_001:out_valid -> cpu_data_master_limiter:rsp_sink_valid
	wire  [118:0] limiter_pipeline_001_source0_data;                                         // limiter_pipeline_001:out_data -> cpu_data_master_limiter:rsp_sink_data
	wire          limiter_pipeline_001_source0_ready;                                        // cpu_data_master_limiter:rsp_sink_ready -> limiter_pipeline_001:out_ready
	wire   [18:0] limiter_pipeline_001_source0_channel;                                      // limiter_pipeline_001:out_channel -> cpu_data_master_limiter:rsp_sink_channel
	wire          limiter_pipeline_001_source0_startofpacket;                                // limiter_pipeline_001:out_startofpacket -> cpu_data_master_limiter:rsp_sink_startofpacket
	wire          limiter_pipeline_001_source0_endofpacket;                                  // limiter_pipeline_001:out_endofpacket -> cpu_data_master_limiter:rsp_sink_endofpacket
	wire    [0:0] cpu_instruction_master_limiter_cmd_src_valid;                              // cpu_instruction_master_limiter:cmd_src_valid -> limiter_pipeline_002:in_valid
	wire  [118:0] cpu_instruction_master_limiter_cmd_src_data;                               // cpu_instruction_master_limiter:cmd_src_data -> limiter_pipeline_002:in_data
	wire          cpu_instruction_master_limiter_cmd_src_ready;                              // limiter_pipeline_002:in_ready -> cpu_instruction_master_limiter:cmd_src_ready
	wire   [18:0] cpu_instruction_master_limiter_cmd_src_channel;                            // cpu_instruction_master_limiter:cmd_src_channel -> limiter_pipeline_002:in_channel
	wire          cpu_instruction_master_limiter_cmd_src_startofpacket;                      // cpu_instruction_master_limiter:cmd_src_startofpacket -> limiter_pipeline_002:in_startofpacket
	wire          cpu_instruction_master_limiter_cmd_src_endofpacket;                        // cpu_instruction_master_limiter:cmd_src_endofpacket -> limiter_pipeline_002:in_endofpacket
	wire          limiter_pipeline_002_source0_valid;                                        // limiter_pipeline_002:out_valid -> cmd_demux_001:sink_valid
	wire  [118:0] limiter_pipeline_002_source0_data;                                         // limiter_pipeline_002:out_data -> cmd_demux_001:sink_data
	wire          limiter_pipeline_002_source0_ready;                                        // cmd_demux_001:sink_ready -> limiter_pipeline_002:out_ready
	wire   [18:0] limiter_pipeline_002_source0_channel;                                      // limiter_pipeline_002:out_channel -> cmd_demux_001:sink_channel
	wire          limiter_pipeline_002_source0_startofpacket;                                // limiter_pipeline_002:out_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          limiter_pipeline_002_source0_endofpacket;                                  // limiter_pipeline_002:out_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                     // rsp_mux_001:src_valid -> limiter_pipeline_003:in_valid
	wire  [118:0] rsp_mux_001_src_data;                                                      // rsp_mux_001:src_data -> limiter_pipeline_003:in_data
	wire          rsp_mux_001_src_ready;                                                     // limiter_pipeline_003:in_ready -> rsp_mux_001:src_ready
	wire   [18:0] rsp_mux_001_src_channel;                                                   // rsp_mux_001:src_channel -> limiter_pipeline_003:in_channel
	wire          rsp_mux_001_src_startofpacket;                                             // rsp_mux_001:src_startofpacket -> limiter_pipeline_003:in_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                               // rsp_mux_001:src_endofpacket -> limiter_pipeline_003:in_endofpacket
	wire          limiter_pipeline_003_source0_valid;                                        // limiter_pipeline_003:out_valid -> cpu_instruction_master_limiter:rsp_sink_valid
	wire  [118:0] limiter_pipeline_003_source0_data;                                         // limiter_pipeline_003:out_data -> cpu_instruction_master_limiter:rsp_sink_data
	wire          limiter_pipeline_003_source0_ready;                                        // cpu_instruction_master_limiter:rsp_sink_ready -> limiter_pipeline_003:out_ready
	wire   [18:0] limiter_pipeline_003_source0_channel;                                      // limiter_pipeline_003:out_channel -> cpu_instruction_master_limiter:rsp_sink_channel
	wire          limiter_pipeline_003_source0_startofpacket;                                // limiter_pipeline_003:out_startofpacket -> cpu_instruction_master_limiter:rsp_sink_startofpacket
	wire          limiter_pipeline_003_source0_endofpacket;                                  // limiter_pipeline_003:out_endofpacket -> cpu_instruction_master_limiter:rsp_sink_endofpacket
	wire          jtag_uart_avalon_jtag_slave_burst_adapter_source0_valid;                   // jtag_uart_avalon_jtag_slave_burst_adapter:source0_valid -> agent_pipeline:in_valid
	wire  [118:0] jtag_uart_avalon_jtag_slave_burst_adapter_source0_data;                    // jtag_uart_avalon_jtag_slave_burst_adapter:source0_data -> agent_pipeline:in_data
	wire          jtag_uart_avalon_jtag_slave_burst_adapter_source0_ready;                   // agent_pipeline:in_ready -> jtag_uart_avalon_jtag_slave_burst_adapter:source0_ready
	wire   [18:0] jtag_uart_avalon_jtag_slave_burst_adapter_source0_channel;                 // jtag_uart_avalon_jtag_slave_burst_adapter:source0_channel -> agent_pipeline:in_channel
	wire          jtag_uart_avalon_jtag_slave_burst_adapter_source0_startofpacket;           // jtag_uart_avalon_jtag_slave_burst_adapter:source0_startofpacket -> agent_pipeline:in_startofpacket
	wire          jtag_uart_avalon_jtag_slave_burst_adapter_source0_endofpacket;             // jtag_uart_avalon_jtag_slave_burst_adapter:source0_endofpacket -> agent_pipeline:in_endofpacket
	wire          agent_pipeline_source0_valid;                                              // agent_pipeline:out_valid -> jtag_uart_avalon_jtag_slave_agent:cp_valid
	wire  [118:0] agent_pipeline_source0_data;                                               // agent_pipeline:out_data -> jtag_uart_avalon_jtag_slave_agent:cp_data
	wire          agent_pipeline_source0_ready;                                              // jtag_uart_avalon_jtag_slave_agent:cp_ready -> agent_pipeline:out_ready
	wire   [18:0] agent_pipeline_source0_channel;                                            // agent_pipeline:out_channel -> jtag_uart_avalon_jtag_slave_agent:cp_channel
	wire          agent_pipeline_source0_startofpacket;                                      // agent_pipeline:out_startofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_startofpacket
	wire          agent_pipeline_source0_endofpacket;                                        // agent_pipeline:out_endofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_valid;                                // jtag_uart_avalon_jtag_slave_agent:rp_valid -> agent_pipeline_001:in_valid
	wire  [118:0] jtag_uart_avalon_jtag_slave_agent_rp_data;                                 // jtag_uart_avalon_jtag_slave_agent:rp_data -> agent_pipeline_001:in_data
	wire          jtag_uart_avalon_jtag_slave_agent_rp_ready;                                // agent_pipeline_001:in_ready -> jtag_uart_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rp_startofpacket;                        // jtag_uart_avalon_jtag_slave_agent:rp_startofpacket -> agent_pipeline_001:in_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_endofpacket;                          // jtag_uart_avalon_jtag_slave_agent:rp_endofpacket -> agent_pipeline_001:in_endofpacket
	wire          agent_pipeline_001_source0_valid;                                          // agent_pipeline_001:out_valid -> router_003:sink_valid
	wire  [118:0] agent_pipeline_001_source0_data;                                           // agent_pipeline_001:out_data -> router_003:sink_data
	wire          agent_pipeline_001_source0_ready;                                          // router_003:sink_ready -> agent_pipeline_001:out_ready
	wire          agent_pipeline_001_source0_startofpacket;                                  // agent_pipeline_001:out_startofpacket -> router_003:sink_startofpacket
	wire          agent_pipeline_001_source0_endofpacket;                                    // agent_pipeline_001:out_endofpacket -> router_003:sink_endofpacket
	wire          cmd_mux_001_src_valid;                                                     // cmd_mux_001:src_valid -> agent_pipeline_002:in_valid
	wire  [118:0] cmd_mux_001_src_data;                                                      // cmd_mux_001:src_data -> agent_pipeline_002:in_data
	wire          cmd_mux_001_src_ready;                                                     // agent_pipeline_002:in_ready -> cmd_mux_001:src_ready
	wire   [18:0] cmd_mux_001_src_channel;                                                   // cmd_mux_001:src_channel -> agent_pipeline_002:in_channel
	wire          cmd_mux_001_src_startofpacket;                                             // cmd_mux_001:src_startofpacket -> agent_pipeline_002:in_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                               // cmd_mux_001:src_endofpacket -> agent_pipeline_002:in_endofpacket
	wire          agent_pipeline_002_source0_valid;                                          // agent_pipeline_002:out_valid -> lpddr2_avl_0_agent:cp_valid
	wire  [118:0] agent_pipeline_002_source0_data;                                           // agent_pipeline_002:out_data -> lpddr2_avl_0_agent:cp_data
	wire          agent_pipeline_002_source0_ready;                                          // lpddr2_avl_0_agent:cp_ready -> agent_pipeline_002:out_ready
	wire   [18:0] agent_pipeline_002_source0_channel;                                        // agent_pipeline_002:out_channel -> lpddr2_avl_0_agent:cp_channel
	wire          agent_pipeline_002_source0_startofpacket;                                  // agent_pipeline_002:out_startofpacket -> lpddr2_avl_0_agent:cp_startofpacket
	wire          agent_pipeline_002_source0_endofpacket;                                    // agent_pipeline_002:out_endofpacket -> lpddr2_avl_0_agent:cp_endofpacket
	wire          lpddr2_avl_0_agent_rp_valid;                                               // lpddr2_avl_0_agent:rp_valid -> agent_pipeline_003:in_valid
	wire  [118:0] lpddr2_avl_0_agent_rp_data;                                                // lpddr2_avl_0_agent:rp_data -> agent_pipeline_003:in_data
	wire          lpddr2_avl_0_agent_rp_ready;                                               // agent_pipeline_003:in_ready -> lpddr2_avl_0_agent:rp_ready
	wire          lpddr2_avl_0_agent_rp_startofpacket;                                       // lpddr2_avl_0_agent:rp_startofpacket -> agent_pipeline_003:in_startofpacket
	wire          lpddr2_avl_0_agent_rp_endofpacket;                                         // lpddr2_avl_0_agent:rp_endofpacket -> agent_pipeline_003:in_endofpacket
	wire          agent_pipeline_003_source0_valid;                                          // agent_pipeline_003:out_valid -> router_004:sink_valid
	wire  [118:0] agent_pipeline_003_source0_data;                                           // agent_pipeline_003:out_data -> router_004:sink_data
	wire          agent_pipeline_003_source0_ready;                                          // router_004:sink_ready -> agent_pipeline_003:out_ready
	wire          agent_pipeline_003_source0_startofpacket;                                  // agent_pipeline_003:out_startofpacket -> router_004:sink_startofpacket
	wire          agent_pipeline_003_source0_endofpacket;                                    // agent_pipeline_003:out_endofpacket -> router_004:sink_endofpacket
	wire          sysid_control_slave_burst_adapter_source0_valid;                           // sysid_control_slave_burst_adapter:source0_valid -> agent_pipeline_004:in_valid
	wire  [118:0] sysid_control_slave_burst_adapter_source0_data;                            // sysid_control_slave_burst_adapter:source0_data -> agent_pipeline_004:in_data
	wire          sysid_control_slave_burst_adapter_source0_ready;                           // agent_pipeline_004:in_ready -> sysid_control_slave_burst_adapter:source0_ready
	wire   [18:0] sysid_control_slave_burst_adapter_source0_channel;                         // sysid_control_slave_burst_adapter:source0_channel -> agent_pipeline_004:in_channel
	wire          sysid_control_slave_burst_adapter_source0_startofpacket;                   // sysid_control_slave_burst_adapter:source0_startofpacket -> agent_pipeline_004:in_startofpacket
	wire          sysid_control_slave_burst_adapter_source0_endofpacket;                     // sysid_control_slave_burst_adapter:source0_endofpacket -> agent_pipeline_004:in_endofpacket
	wire          agent_pipeline_004_source0_valid;                                          // agent_pipeline_004:out_valid -> sysid_control_slave_agent:cp_valid
	wire  [118:0] agent_pipeline_004_source0_data;                                           // agent_pipeline_004:out_data -> sysid_control_slave_agent:cp_data
	wire          agent_pipeline_004_source0_ready;                                          // sysid_control_slave_agent:cp_ready -> agent_pipeline_004:out_ready
	wire   [18:0] agent_pipeline_004_source0_channel;                                        // agent_pipeline_004:out_channel -> sysid_control_slave_agent:cp_channel
	wire          agent_pipeline_004_source0_startofpacket;                                  // agent_pipeline_004:out_startofpacket -> sysid_control_slave_agent:cp_startofpacket
	wire          agent_pipeline_004_source0_endofpacket;                                    // agent_pipeline_004:out_endofpacket -> sysid_control_slave_agent:cp_endofpacket
	wire          sysid_control_slave_agent_rp_valid;                                        // sysid_control_slave_agent:rp_valid -> agent_pipeline_005:in_valid
	wire  [118:0] sysid_control_slave_agent_rp_data;                                         // sysid_control_slave_agent:rp_data -> agent_pipeline_005:in_data
	wire          sysid_control_slave_agent_rp_ready;                                        // agent_pipeline_005:in_ready -> sysid_control_slave_agent:rp_ready
	wire          sysid_control_slave_agent_rp_startofpacket;                                // sysid_control_slave_agent:rp_startofpacket -> agent_pipeline_005:in_startofpacket
	wire          sysid_control_slave_agent_rp_endofpacket;                                  // sysid_control_slave_agent:rp_endofpacket -> agent_pipeline_005:in_endofpacket
	wire          agent_pipeline_005_source0_valid;                                          // agent_pipeline_005:out_valid -> router_005:sink_valid
	wire  [118:0] agent_pipeline_005_source0_data;                                           // agent_pipeline_005:out_data -> router_005:sink_data
	wire          agent_pipeline_005_source0_ready;                                          // router_005:sink_ready -> agent_pipeline_005:out_ready
	wire          agent_pipeline_005_source0_startofpacket;                                  // agent_pipeline_005:out_startofpacket -> router_005:sink_startofpacket
	wire          agent_pipeline_005_source0_endofpacket;                                    // agent_pipeline_005:out_endofpacket -> router_005:sink_endofpacket
	wire          video_dma_csr_burst_adapter_source0_valid;                                 // video_dma_csr_burst_adapter:source0_valid -> agent_pipeline_006:in_valid
	wire  [118:0] video_dma_csr_burst_adapter_source0_data;                                  // video_dma_csr_burst_adapter:source0_data -> agent_pipeline_006:in_data
	wire          video_dma_csr_burst_adapter_source0_ready;                                 // agent_pipeline_006:in_ready -> video_dma_csr_burst_adapter:source0_ready
	wire   [18:0] video_dma_csr_burst_adapter_source0_channel;                               // video_dma_csr_burst_adapter:source0_channel -> agent_pipeline_006:in_channel
	wire          video_dma_csr_burst_adapter_source0_startofpacket;                         // video_dma_csr_burst_adapter:source0_startofpacket -> agent_pipeline_006:in_startofpacket
	wire          video_dma_csr_burst_adapter_source0_endofpacket;                           // video_dma_csr_burst_adapter:source0_endofpacket -> agent_pipeline_006:in_endofpacket
	wire          agent_pipeline_006_source0_valid;                                          // agent_pipeline_006:out_valid -> video_dma_csr_agent:cp_valid
	wire  [118:0] agent_pipeline_006_source0_data;                                           // agent_pipeline_006:out_data -> video_dma_csr_agent:cp_data
	wire          agent_pipeline_006_source0_ready;                                          // video_dma_csr_agent:cp_ready -> agent_pipeline_006:out_ready
	wire   [18:0] agent_pipeline_006_source0_channel;                                        // agent_pipeline_006:out_channel -> video_dma_csr_agent:cp_channel
	wire          agent_pipeline_006_source0_startofpacket;                                  // agent_pipeline_006:out_startofpacket -> video_dma_csr_agent:cp_startofpacket
	wire          agent_pipeline_006_source0_endofpacket;                                    // agent_pipeline_006:out_endofpacket -> video_dma_csr_agent:cp_endofpacket
	wire          video_dma_csr_agent_rp_valid;                                              // video_dma_csr_agent:rp_valid -> agent_pipeline_007:in_valid
	wire  [118:0] video_dma_csr_agent_rp_data;                                               // video_dma_csr_agent:rp_data -> agent_pipeline_007:in_data
	wire          video_dma_csr_agent_rp_ready;                                              // agent_pipeline_007:in_ready -> video_dma_csr_agent:rp_ready
	wire          video_dma_csr_agent_rp_startofpacket;                                      // video_dma_csr_agent:rp_startofpacket -> agent_pipeline_007:in_startofpacket
	wire          video_dma_csr_agent_rp_endofpacket;                                        // video_dma_csr_agent:rp_endofpacket -> agent_pipeline_007:in_endofpacket
	wire          agent_pipeline_007_source0_valid;                                          // agent_pipeline_007:out_valid -> router_006:sink_valid
	wire  [118:0] agent_pipeline_007_source0_data;                                           // agent_pipeline_007:out_data -> router_006:sink_data
	wire          agent_pipeline_007_source0_ready;                                          // router_006:sink_ready -> agent_pipeline_007:out_ready
	wire          agent_pipeline_007_source0_startofpacket;                                  // agent_pipeline_007:out_startofpacket -> router_006:sink_startofpacket
	wire          agent_pipeline_007_source0_endofpacket;                                    // agent_pipeline_007:out_endofpacket -> router_006:sink_endofpacket
	wire          to_idct_hwacel_csr_burst_adapter_source0_valid;                            // to_idct_hwacel_csr_burst_adapter:source0_valid -> agent_pipeline_008:in_valid
	wire  [118:0] to_idct_hwacel_csr_burst_adapter_source0_data;                             // to_idct_hwacel_csr_burst_adapter:source0_data -> agent_pipeline_008:in_data
	wire          to_idct_hwacel_csr_burst_adapter_source0_ready;                            // agent_pipeline_008:in_ready -> to_idct_hwacel_csr_burst_adapter:source0_ready
	wire   [18:0] to_idct_hwacel_csr_burst_adapter_source0_channel;                          // to_idct_hwacel_csr_burst_adapter:source0_channel -> agent_pipeline_008:in_channel
	wire          to_idct_hwacel_csr_burst_adapter_source0_startofpacket;                    // to_idct_hwacel_csr_burst_adapter:source0_startofpacket -> agent_pipeline_008:in_startofpacket
	wire          to_idct_hwacel_csr_burst_adapter_source0_endofpacket;                      // to_idct_hwacel_csr_burst_adapter:source0_endofpacket -> agent_pipeline_008:in_endofpacket
	wire          agent_pipeline_008_source0_valid;                                          // agent_pipeline_008:out_valid -> to_idct_hwacel_csr_agent:cp_valid
	wire  [118:0] agent_pipeline_008_source0_data;                                           // agent_pipeline_008:out_data -> to_idct_hwacel_csr_agent:cp_data
	wire          agent_pipeline_008_source0_ready;                                          // to_idct_hwacel_csr_agent:cp_ready -> agent_pipeline_008:out_ready
	wire   [18:0] agent_pipeline_008_source0_channel;                                        // agent_pipeline_008:out_channel -> to_idct_hwacel_csr_agent:cp_channel
	wire          agent_pipeline_008_source0_startofpacket;                                  // agent_pipeline_008:out_startofpacket -> to_idct_hwacel_csr_agent:cp_startofpacket
	wire          agent_pipeline_008_source0_endofpacket;                                    // agent_pipeline_008:out_endofpacket -> to_idct_hwacel_csr_agent:cp_endofpacket
	wire          to_idct_hwacel_csr_agent_rp_valid;                                         // to_idct_hwacel_csr_agent:rp_valid -> agent_pipeline_009:in_valid
	wire  [118:0] to_idct_hwacel_csr_agent_rp_data;                                          // to_idct_hwacel_csr_agent:rp_data -> agent_pipeline_009:in_data
	wire          to_idct_hwacel_csr_agent_rp_ready;                                         // agent_pipeline_009:in_ready -> to_idct_hwacel_csr_agent:rp_ready
	wire          to_idct_hwacel_csr_agent_rp_startofpacket;                                 // to_idct_hwacel_csr_agent:rp_startofpacket -> agent_pipeline_009:in_startofpacket
	wire          to_idct_hwacel_csr_agent_rp_endofpacket;                                   // to_idct_hwacel_csr_agent:rp_endofpacket -> agent_pipeline_009:in_endofpacket
	wire          agent_pipeline_009_source0_valid;                                          // agent_pipeline_009:out_valid -> router_007:sink_valid
	wire  [118:0] agent_pipeline_009_source0_data;                                           // agent_pipeline_009:out_data -> router_007:sink_data
	wire          agent_pipeline_009_source0_ready;                                          // router_007:sink_ready -> agent_pipeline_009:out_ready
	wire          agent_pipeline_009_source0_startofpacket;                                  // agent_pipeline_009:out_startofpacket -> router_007:sink_startofpacket
	wire          agent_pipeline_009_source0_endofpacket;                                    // agent_pipeline_009:out_endofpacket -> router_007:sink_endofpacket
	wire          from_idct_hwacel_csr_burst_adapter_source0_valid;                          // from_idct_hwacel_csr_burst_adapter:source0_valid -> agent_pipeline_010:in_valid
	wire  [118:0] from_idct_hwacel_csr_burst_adapter_source0_data;                           // from_idct_hwacel_csr_burst_adapter:source0_data -> agent_pipeline_010:in_data
	wire          from_idct_hwacel_csr_burst_adapter_source0_ready;                          // agent_pipeline_010:in_ready -> from_idct_hwacel_csr_burst_adapter:source0_ready
	wire   [18:0] from_idct_hwacel_csr_burst_adapter_source0_channel;                        // from_idct_hwacel_csr_burst_adapter:source0_channel -> agent_pipeline_010:in_channel
	wire          from_idct_hwacel_csr_burst_adapter_source0_startofpacket;                  // from_idct_hwacel_csr_burst_adapter:source0_startofpacket -> agent_pipeline_010:in_startofpacket
	wire          from_idct_hwacel_csr_burst_adapter_source0_endofpacket;                    // from_idct_hwacel_csr_burst_adapter:source0_endofpacket -> agent_pipeline_010:in_endofpacket
	wire          agent_pipeline_010_source0_valid;                                          // agent_pipeline_010:out_valid -> from_idct_hwacel_csr_agent:cp_valid
	wire  [118:0] agent_pipeline_010_source0_data;                                           // agent_pipeline_010:out_data -> from_idct_hwacel_csr_agent:cp_data
	wire          agent_pipeline_010_source0_ready;                                          // from_idct_hwacel_csr_agent:cp_ready -> agent_pipeline_010:out_ready
	wire   [18:0] agent_pipeline_010_source0_channel;                                        // agent_pipeline_010:out_channel -> from_idct_hwacel_csr_agent:cp_channel
	wire          agent_pipeline_010_source0_startofpacket;                                  // agent_pipeline_010:out_startofpacket -> from_idct_hwacel_csr_agent:cp_startofpacket
	wire          agent_pipeline_010_source0_endofpacket;                                    // agent_pipeline_010:out_endofpacket -> from_idct_hwacel_csr_agent:cp_endofpacket
	wire          from_idct_hwacel_csr_agent_rp_valid;                                       // from_idct_hwacel_csr_agent:rp_valid -> agent_pipeline_011:in_valid
	wire  [118:0] from_idct_hwacel_csr_agent_rp_data;                                        // from_idct_hwacel_csr_agent:rp_data -> agent_pipeline_011:in_data
	wire          from_idct_hwacel_csr_agent_rp_ready;                                       // agent_pipeline_011:in_ready -> from_idct_hwacel_csr_agent:rp_ready
	wire          from_idct_hwacel_csr_agent_rp_startofpacket;                               // from_idct_hwacel_csr_agent:rp_startofpacket -> agent_pipeline_011:in_startofpacket
	wire          from_idct_hwacel_csr_agent_rp_endofpacket;                                 // from_idct_hwacel_csr_agent:rp_endofpacket -> agent_pipeline_011:in_endofpacket
	wire          agent_pipeline_011_source0_valid;                                          // agent_pipeline_011:out_valid -> router_008:sink_valid
	wire  [118:0] agent_pipeline_011_source0_data;                                           // agent_pipeline_011:out_data -> router_008:sink_data
	wire          agent_pipeline_011_source0_ready;                                          // router_008:sink_ready -> agent_pipeline_011:out_ready
	wire          agent_pipeline_011_source0_startofpacket;                                  // agent_pipeline_011:out_startofpacket -> router_008:sink_startofpacket
	wire          agent_pipeline_011_source0_endofpacket;                                    // agent_pipeline_011:out_endofpacket -> router_008:sink_endofpacket
	wire          cpu_debug_mem_slave_burst_adapter_source0_valid;                           // cpu_debug_mem_slave_burst_adapter:source0_valid -> agent_pipeline_012:in_valid
	wire  [118:0] cpu_debug_mem_slave_burst_adapter_source0_data;                            // cpu_debug_mem_slave_burst_adapter:source0_data -> agent_pipeline_012:in_data
	wire          cpu_debug_mem_slave_burst_adapter_source0_ready;                           // agent_pipeline_012:in_ready -> cpu_debug_mem_slave_burst_adapter:source0_ready
	wire   [18:0] cpu_debug_mem_slave_burst_adapter_source0_channel;                         // cpu_debug_mem_slave_burst_adapter:source0_channel -> agent_pipeline_012:in_channel
	wire          cpu_debug_mem_slave_burst_adapter_source0_startofpacket;                   // cpu_debug_mem_slave_burst_adapter:source0_startofpacket -> agent_pipeline_012:in_startofpacket
	wire          cpu_debug_mem_slave_burst_adapter_source0_endofpacket;                     // cpu_debug_mem_slave_burst_adapter:source0_endofpacket -> agent_pipeline_012:in_endofpacket
	wire          agent_pipeline_012_source0_valid;                                          // agent_pipeline_012:out_valid -> cpu_debug_mem_slave_agent:cp_valid
	wire  [118:0] agent_pipeline_012_source0_data;                                           // agent_pipeline_012:out_data -> cpu_debug_mem_slave_agent:cp_data
	wire          agent_pipeline_012_source0_ready;                                          // cpu_debug_mem_slave_agent:cp_ready -> agent_pipeline_012:out_ready
	wire   [18:0] agent_pipeline_012_source0_channel;                                        // agent_pipeline_012:out_channel -> cpu_debug_mem_slave_agent:cp_channel
	wire          agent_pipeline_012_source0_startofpacket;                                  // agent_pipeline_012:out_startofpacket -> cpu_debug_mem_slave_agent:cp_startofpacket
	wire          agent_pipeline_012_source0_endofpacket;                                    // agent_pipeline_012:out_endofpacket -> cpu_debug_mem_slave_agent:cp_endofpacket
	wire          cpu_debug_mem_slave_agent_rp_valid;                                        // cpu_debug_mem_slave_agent:rp_valid -> agent_pipeline_013:in_valid
	wire  [118:0] cpu_debug_mem_slave_agent_rp_data;                                         // cpu_debug_mem_slave_agent:rp_data -> agent_pipeline_013:in_data
	wire          cpu_debug_mem_slave_agent_rp_ready;                                        // agent_pipeline_013:in_ready -> cpu_debug_mem_slave_agent:rp_ready
	wire          cpu_debug_mem_slave_agent_rp_startofpacket;                                // cpu_debug_mem_slave_agent:rp_startofpacket -> agent_pipeline_013:in_startofpacket
	wire          cpu_debug_mem_slave_agent_rp_endofpacket;                                  // cpu_debug_mem_slave_agent:rp_endofpacket -> agent_pipeline_013:in_endofpacket
	wire          agent_pipeline_013_source0_valid;                                          // agent_pipeline_013:out_valid -> router_009:sink_valid
	wire  [118:0] agent_pipeline_013_source0_data;                                           // agent_pipeline_013:out_data -> router_009:sink_data
	wire          agent_pipeline_013_source0_ready;                                          // router_009:sink_ready -> agent_pipeline_013:out_ready
	wire          agent_pipeline_013_source0_startofpacket;                                  // agent_pipeline_013:out_startofpacket -> router_009:sink_startofpacket
	wire          agent_pipeline_013_source0_endofpacket;                                    // agent_pipeline_013:out_endofpacket -> router_009:sink_endofpacket
	wire          video_dma_descriptor_slave_burst_adapter_source0_valid;                    // video_dma_descriptor_slave_burst_adapter:source0_valid -> agent_pipeline_014:in_valid
	wire  [226:0] video_dma_descriptor_slave_burst_adapter_source0_data;                     // video_dma_descriptor_slave_burst_adapter:source0_data -> agent_pipeline_014:in_data
	wire          video_dma_descriptor_slave_burst_adapter_source0_ready;                    // agent_pipeline_014:in_ready -> video_dma_descriptor_slave_burst_adapter:source0_ready
	wire   [18:0] video_dma_descriptor_slave_burst_adapter_source0_channel;                  // video_dma_descriptor_slave_burst_adapter:source0_channel -> agent_pipeline_014:in_channel
	wire          video_dma_descriptor_slave_burst_adapter_source0_startofpacket;            // video_dma_descriptor_slave_burst_adapter:source0_startofpacket -> agent_pipeline_014:in_startofpacket
	wire          video_dma_descriptor_slave_burst_adapter_source0_endofpacket;              // video_dma_descriptor_slave_burst_adapter:source0_endofpacket -> agent_pipeline_014:in_endofpacket
	wire          agent_pipeline_014_source0_valid;                                          // agent_pipeline_014:out_valid -> video_dma_descriptor_slave_agent:cp_valid
	wire  [226:0] agent_pipeline_014_source0_data;                                           // agent_pipeline_014:out_data -> video_dma_descriptor_slave_agent:cp_data
	wire          agent_pipeline_014_source0_ready;                                          // video_dma_descriptor_slave_agent:cp_ready -> agent_pipeline_014:out_ready
	wire   [18:0] agent_pipeline_014_source0_channel;                                        // agent_pipeline_014:out_channel -> video_dma_descriptor_slave_agent:cp_channel
	wire          agent_pipeline_014_source0_startofpacket;                                  // agent_pipeline_014:out_startofpacket -> video_dma_descriptor_slave_agent:cp_startofpacket
	wire          agent_pipeline_014_source0_endofpacket;                                    // agent_pipeline_014:out_endofpacket -> video_dma_descriptor_slave_agent:cp_endofpacket
	wire          video_dma_descriptor_slave_agent_rp_valid;                                 // video_dma_descriptor_slave_agent:rp_valid -> agent_pipeline_015:in_valid
	wire  [226:0] video_dma_descriptor_slave_agent_rp_data;                                  // video_dma_descriptor_slave_agent:rp_data -> agent_pipeline_015:in_data
	wire          video_dma_descriptor_slave_agent_rp_ready;                                 // agent_pipeline_015:in_ready -> video_dma_descriptor_slave_agent:rp_ready
	wire          video_dma_descriptor_slave_agent_rp_startofpacket;                         // video_dma_descriptor_slave_agent:rp_startofpacket -> agent_pipeline_015:in_startofpacket
	wire          video_dma_descriptor_slave_agent_rp_endofpacket;                           // video_dma_descriptor_slave_agent:rp_endofpacket -> agent_pipeline_015:in_endofpacket
	wire          agent_pipeline_015_source0_valid;                                          // agent_pipeline_015:out_valid -> router_010:sink_valid
	wire  [226:0] agent_pipeline_015_source0_data;                                           // agent_pipeline_015:out_data -> router_010:sink_data
	wire          agent_pipeline_015_source0_ready;                                          // router_010:sink_ready -> agent_pipeline_015:out_ready
	wire          agent_pipeline_015_source0_startofpacket;                                  // agent_pipeline_015:out_startofpacket -> router_010:sink_startofpacket
	wire          agent_pipeline_015_source0_endofpacket;                                    // agent_pipeline_015:out_endofpacket -> router_010:sink_endofpacket
	wire          to_idct_hwacel_descriptor_slave_burst_adapter_source0_valid;               // to_idct_hwacel_descriptor_slave_burst_adapter:source0_valid -> agent_pipeline_016:in_valid
	wire  [226:0] to_idct_hwacel_descriptor_slave_burst_adapter_source0_data;                // to_idct_hwacel_descriptor_slave_burst_adapter:source0_data -> agent_pipeline_016:in_data
	wire          to_idct_hwacel_descriptor_slave_burst_adapter_source0_ready;               // agent_pipeline_016:in_ready -> to_idct_hwacel_descriptor_slave_burst_adapter:source0_ready
	wire   [18:0] to_idct_hwacel_descriptor_slave_burst_adapter_source0_channel;             // to_idct_hwacel_descriptor_slave_burst_adapter:source0_channel -> agent_pipeline_016:in_channel
	wire          to_idct_hwacel_descriptor_slave_burst_adapter_source0_startofpacket;       // to_idct_hwacel_descriptor_slave_burst_adapter:source0_startofpacket -> agent_pipeline_016:in_startofpacket
	wire          to_idct_hwacel_descriptor_slave_burst_adapter_source0_endofpacket;         // to_idct_hwacel_descriptor_slave_burst_adapter:source0_endofpacket -> agent_pipeline_016:in_endofpacket
	wire          agent_pipeline_016_source0_valid;                                          // agent_pipeline_016:out_valid -> to_idct_hwacel_descriptor_slave_agent:cp_valid
	wire  [226:0] agent_pipeline_016_source0_data;                                           // agent_pipeline_016:out_data -> to_idct_hwacel_descriptor_slave_agent:cp_data
	wire          agent_pipeline_016_source0_ready;                                          // to_idct_hwacel_descriptor_slave_agent:cp_ready -> agent_pipeline_016:out_ready
	wire   [18:0] agent_pipeline_016_source0_channel;                                        // agent_pipeline_016:out_channel -> to_idct_hwacel_descriptor_slave_agent:cp_channel
	wire          agent_pipeline_016_source0_startofpacket;                                  // agent_pipeline_016:out_startofpacket -> to_idct_hwacel_descriptor_slave_agent:cp_startofpacket
	wire          agent_pipeline_016_source0_endofpacket;                                    // agent_pipeline_016:out_endofpacket -> to_idct_hwacel_descriptor_slave_agent:cp_endofpacket
	wire          to_idct_hwacel_descriptor_slave_agent_rp_valid;                            // to_idct_hwacel_descriptor_slave_agent:rp_valid -> agent_pipeline_017:in_valid
	wire  [226:0] to_idct_hwacel_descriptor_slave_agent_rp_data;                             // to_idct_hwacel_descriptor_slave_agent:rp_data -> agent_pipeline_017:in_data
	wire          to_idct_hwacel_descriptor_slave_agent_rp_ready;                            // agent_pipeline_017:in_ready -> to_idct_hwacel_descriptor_slave_agent:rp_ready
	wire          to_idct_hwacel_descriptor_slave_agent_rp_startofpacket;                    // to_idct_hwacel_descriptor_slave_agent:rp_startofpacket -> agent_pipeline_017:in_startofpacket
	wire          to_idct_hwacel_descriptor_slave_agent_rp_endofpacket;                      // to_idct_hwacel_descriptor_slave_agent:rp_endofpacket -> agent_pipeline_017:in_endofpacket
	wire          agent_pipeline_017_source0_valid;                                          // agent_pipeline_017:out_valid -> router_011:sink_valid
	wire  [226:0] agent_pipeline_017_source0_data;                                           // agent_pipeline_017:out_data -> router_011:sink_data
	wire          agent_pipeline_017_source0_ready;                                          // router_011:sink_ready -> agent_pipeline_017:out_ready
	wire          agent_pipeline_017_source0_startofpacket;                                  // agent_pipeline_017:out_startofpacket -> router_011:sink_startofpacket
	wire          agent_pipeline_017_source0_endofpacket;                                    // agent_pipeline_017:out_endofpacket -> router_011:sink_endofpacket
	wire          from_idct_hwacel_descriptor_slave_burst_adapter_source0_valid;             // from_idct_hwacel_descriptor_slave_burst_adapter:source0_valid -> agent_pipeline_018:in_valid
	wire  [226:0] from_idct_hwacel_descriptor_slave_burst_adapter_source0_data;              // from_idct_hwacel_descriptor_slave_burst_adapter:source0_data -> agent_pipeline_018:in_data
	wire          from_idct_hwacel_descriptor_slave_burst_adapter_source0_ready;             // agent_pipeline_018:in_ready -> from_idct_hwacel_descriptor_slave_burst_adapter:source0_ready
	wire   [18:0] from_idct_hwacel_descriptor_slave_burst_adapter_source0_channel;           // from_idct_hwacel_descriptor_slave_burst_adapter:source0_channel -> agent_pipeline_018:in_channel
	wire          from_idct_hwacel_descriptor_slave_burst_adapter_source0_startofpacket;     // from_idct_hwacel_descriptor_slave_burst_adapter:source0_startofpacket -> agent_pipeline_018:in_startofpacket
	wire          from_idct_hwacel_descriptor_slave_burst_adapter_source0_endofpacket;       // from_idct_hwacel_descriptor_slave_burst_adapter:source0_endofpacket -> agent_pipeline_018:in_endofpacket
	wire          agent_pipeline_018_source0_valid;                                          // agent_pipeline_018:out_valid -> from_idct_hwacel_descriptor_slave_agent:cp_valid
	wire  [226:0] agent_pipeline_018_source0_data;                                           // agent_pipeline_018:out_data -> from_idct_hwacel_descriptor_slave_agent:cp_data
	wire          agent_pipeline_018_source0_ready;                                          // from_idct_hwacel_descriptor_slave_agent:cp_ready -> agent_pipeline_018:out_ready
	wire   [18:0] agent_pipeline_018_source0_channel;                                        // agent_pipeline_018:out_channel -> from_idct_hwacel_descriptor_slave_agent:cp_channel
	wire          agent_pipeline_018_source0_startofpacket;                                  // agent_pipeline_018:out_startofpacket -> from_idct_hwacel_descriptor_slave_agent:cp_startofpacket
	wire          agent_pipeline_018_source0_endofpacket;                                    // agent_pipeline_018:out_endofpacket -> from_idct_hwacel_descriptor_slave_agent:cp_endofpacket
	wire          from_idct_hwacel_descriptor_slave_agent_rp_valid;                          // from_idct_hwacel_descriptor_slave_agent:rp_valid -> agent_pipeline_019:in_valid
	wire  [226:0] from_idct_hwacel_descriptor_slave_agent_rp_data;                           // from_idct_hwacel_descriptor_slave_agent:rp_data -> agent_pipeline_019:in_data
	wire          from_idct_hwacel_descriptor_slave_agent_rp_ready;                          // agent_pipeline_019:in_ready -> from_idct_hwacel_descriptor_slave_agent:rp_ready
	wire          from_idct_hwacel_descriptor_slave_agent_rp_startofpacket;                  // from_idct_hwacel_descriptor_slave_agent:rp_startofpacket -> agent_pipeline_019:in_startofpacket
	wire          from_idct_hwacel_descriptor_slave_agent_rp_endofpacket;                    // from_idct_hwacel_descriptor_slave_agent:rp_endofpacket -> agent_pipeline_019:in_endofpacket
	wire          agent_pipeline_019_source0_valid;                                          // agent_pipeline_019:out_valid -> router_012:sink_valid
	wire  [226:0] agent_pipeline_019_source0_data;                                           // agent_pipeline_019:out_data -> router_012:sink_data
	wire          agent_pipeline_019_source0_ready;                                          // router_012:sink_ready -> agent_pipeline_019:out_ready
	wire          agent_pipeline_019_source0_startofpacket;                                  // agent_pipeline_019:out_startofpacket -> router_012:sink_startofpacket
	wire          agent_pipeline_019_source0_endofpacket;                                    // agent_pipeline_019:out_endofpacket -> router_012:sink_endofpacket
	wire          timer_0_s1_burst_adapter_source0_valid;                                    // timer_0_s1_burst_adapter:source0_valid -> agent_pipeline_020:in_valid
	wire  [118:0] timer_0_s1_burst_adapter_source0_data;                                     // timer_0_s1_burst_adapter:source0_data -> agent_pipeline_020:in_data
	wire          timer_0_s1_burst_adapter_source0_ready;                                    // agent_pipeline_020:in_ready -> timer_0_s1_burst_adapter:source0_ready
	wire   [18:0] timer_0_s1_burst_adapter_source0_channel;                                  // timer_0_s1_burst_adapter:source0_channel -> agent_pipeline_020:in_channel
	wire          timer_0_s1_burst_adapter_source0_startofpacket;                            // timer_0_s1_burst_adapter:source0_startofpacket -> agent_pipeline_020:in_startofpacket
	wire          timer_0_s1_burst_adapter_source0_endofpacket;                              // timer_0_s1_burst_adapter:source0_endofpacket -> agent_pipeline_020:in_endofpacket
	wire          agent_pipeline_020_source0_valid;                                          // agent_pipeline_020:out_valid -> timer_0_s1_agent:cp_valid
	wire  [118:0] agent_pipeline_020_source0_data;                                           // agent_pipeline_020:out_data -> timer_0_s1_agent:cp_data
	wire          agent_pipeline_020_source0_ready;                                          // timer_0_s1_agent:cp_ready -> agent_pipeline_020:out_ready
	wire   [18:0] agent_pipeline_020_source0_channel;                                        // agent_pipeline_020:out_channel -> timer_0_s1_agent:cp_channel
	wire          agent_pipeline_020_source0_startofpacket;                                  // agent_pipeline_020:out_startofpacket -> timer_0_s1_agent:cp_startofpacket
	wire          agent_pipeline_020_source0_endofpacket;                                    // agent_pipeline_020:out_endofpacket -> timer_0_s1_agent:cp_endofpacket
	wire          timer_0_s1_agent_rp_valid;                                                 // timer_0_s1_agent:rp_valid -> agent_pipeline_021:in_valid
	wire  [118:0] timer_0_s1_agent_rp_data;                                                  // timer_0_s1_agent:rp_data -> agent_pipeline_021:in_data
	wire          timer_0_s1_agent_rp_ready;                                                 // agent_pipeline_021:in_ready -> timer_0_s1_agent:rp_ready
	wire          timer_0_s1_agent_rp_startofpacket;                                         // timer_0_s1_agent:rp_startofpacket -> agent_pipeline_021:in_startofpacket
	wire          timer_0_s1_agent_rp_endofpacket;                                           // timer_0_s1_agent:rp_endofpacket -> agent_pipeline_021:in_endofpacket
	wire          agent_pipeline_021_source0_valid;                                          // agent_pipeline_021:out_valid -> router_013:sink_valid
	wire  [118:0] agent_pipeline_021_source0_data;                                           // agent_pipeline_021:out_data -> router_013:sink_data
	wire          agent_pipeline_021_source0_ready;                                          // router_013:sink_ready -> agent_pipeline_021:out_ready
	wire          agent_pipeline_021_source0_startofpacket;                                  // agent_pipeline_021:out_startofpacket -> router_013:sink_startofpacket
	wire          agent_pipeline_021_source0_endofpacket;                                    // agent_pipeline_021:out_endofpacket -> router_013:sink_endofpacket
	wire          key_s1_burst_adapter_source0_valid;                                        // key_s1_burst_adapter:source0_valid -> agent_pipeline_022:in_valid
	wire  [118:0] key_s1_burst_adapter_source0_data;                                         // key_s1_burst_adapter:source0_data -> agent_pipeline_022:in_data
	wire          key_s1_burst_adapter_source0_ready;                                        // agent_pipeline_022:in_ready -> key_s1_burst_adapter:source0_ready
	wire   [18:0] key_s1_burst_adapter_source0_channel;                                      // key_s1_burst_adapter:source0_channel -> agent_pipeline_022:in_channel
	wire          key_s1_burst_adapter_source0_startofpacket;                                // key_s1_burst_adapter:source0_startofpacket -> agent_pipeline_022:in_startofpacket
	wire          key_s1_burst_adapter_source0_endofpacket;                                  // key_s1_burst_adapter:source0_endofpacket -> agent_pipeline_022:in_endofpacket
	wire          agent_pipeline_022_source0_valid;                                          // agent_pipeline_022:out_valid -> key_s1_agent:cp_valid
	wire  [118:0] agent_pipeline_022_source0_data;                                           // agent_pipeline_022:out_data -> key_s1_agent:cp_data
	wire          agent_pipeline_022_source0_ready;                                          // key_s1_agent:cp_ready -> agent_pipeline_022:out_ready
	wire   [18:0] agent_pipeline_022_source0_channel;                                        // agent_pipeline_022:out_channel -> key_s1_agent:cp_channel
	wire          agent_pipeline_022_source0_startofpacket;                                  // agent_pipeline_022:out_startofpacket -> key_s1_agent:cp_startofpacket
	wire          agent_pipeline_022_source0_endofpacket;                                    // agent_pipeline_022:out_endofpacket -> key_s1_agent:cp_endofpacket
	wire          key_s1_agent_rp_valid;                                                     // key_s1_agent:rp_valid -> agent_pipeline_023:in_valid
	wire  [118:0] key_s1_agent_rp_data;                                                      // key_s1_agent:rp_data -> agent_pipeline_023:in_data
	wire          key_s1_agent_rp_ready;                                                     // agent_pipeline_023:in_ready -> key_s1_agent:rp_ready
	wire          key_s1_agent_rp_startofpacket;                                             // key_s1_agent:rp_startofpacket -> agent_pipeline_023:in_startofpacket
	wire          key_s1_agent_rp_endofpacket;                                               // key_s1_agent:rp_endofpacket -> agent_pipeline_023:in_endofpacket
	wire          agent_pipeline_023_source0_valid;                                          // agent_pipeline_023:out_valid -> router_014:sink_valid
	wire  [118:0] agent_pipeline_023_source0_data;                                           // agent_pipeline_023:out_data -> router_014:sink_data
	wire          agent_pipeline_023_source0_ready;                                          // router_014:sink_ready -> agent_pipeline_023:out_ready
	wire          agent_pipeline_023_source0_startofpacket;                                  // agent_pipeline_023:out_startofpacket -> router_014:sink_startofpacket
	wire          agent_pipeline_023_source0_endofpacket;                                    // agent_pipeline_023:out_endofpacket -> router_014:sink_endofpacket
	wire          timer_1_s1_burst_adapter_source0_valid;                                    // timer_1_s1_burst_adapter:source0_valid -> agent_pipeline_024:in_valid
	wire  [118:0] timer_1_s1_burst_adapter_source0_data;                                     // timer_1_s1_burst_adapter:source0_data -> agent_pipeline_024:in_data
	wire          timer_1_s1_burst_adapter_source0_ready;                                    // agent_pipeline_024:in_ready -> timer_1_s1_burst_adapter:source0_ready
	wire   [18:0] timer_1_s1_burst_adapter_source0_channel;                                  // timer_1_s1_burst_adapter:source0_channel -> agent_pipeline_024:in_channel
	wire          timer_1_s1_burst_adapter_source0_startofpacket;                            // timer_1_s1_burst_adapter:source0_startofpacket -> agent_pipeline_024:in_startofpacket
	wire          timer_1_s1_burst_adapter_source0_endofpacket;                              // timer_1_s1_burst_adapter:source0_endofpacket -> agent_pipeline_024:in_endofpacket
	wire          agent_pipeline_024_source0_valid;                                          // agent_pipeline_024:out_valid -> timer_1_s1_agent:cp_valid
	wire  [118:0] agent_pipeline_024_source0_data;                                           // agent_pipeline_024:out_data -> timer_1_s1_agent:cp_data
	wire          agent_pipeline_024_source0_ready;                                          // timer_1_s1_agent:cp_ready -> agent_pipeline_024:out_ready
	wire   [18:0] agent_pipeline_024_source0_channel;                                        // agent_pipeline_024:out_channel -> timer_1_s1_agent:cp_channel
	wire          agent_pipeline_024_source0_startofpacket;                                  // agent_pipeline_024:out_startofpacket -> timer_1_s1_agent:cp_startofpacket
	wire          agent_pipeline_024_source0_endofpacket;                                    // agent_pipeline_024:out_endofpacket -> timer_1_s1_agent:cp_endofpacket
	wire          timer_1_s1_agent_rp_valid;                                                 // timer_1_s1_agent:rp_valid -> agent_pipeline_025:in_valid
	wire  [118:0] timer_1_s1_agent_rp_data;                                                  // timer_1_s1_agent:rp_data -> agent_pipeline_025:in_data
	wire          timer_1_s1_agent_rp_ready;                                                 // agent_pipeline_025:in_ready -> timer_1_s1_agent:rp_ready
	wire          timer_1_s1_agent_rp_startofpacket;                                         // timer_1_s1_agent:rp_startofpacket -> agent_pipeline_025:in_startofpacket
	wire          timer_1_s1_agent_rp_endofpacket;                                           // timer_1_s1_agent:rp_endofpacket -> agent_pipeline_025:in_endofpacket
	wire          agent_pipeline_025_source0_valid;                                          // agent_pipeline_025:out_valid -> router_015:sink_valid
	wire  [118:0] agent_pipeline_025_source0_data;                                           // agent_pipeline_025:out_data -> router_015:sink_data
	wire          agent_pipeline_025_source0_ready;                                          // router_015:sink_ready -> agent_pipeline_025:out_ready
	wire          agent_pipeline_025_source0_startofpacket;                                  // agent_pipeline_025:out_startofpacket -> router_015:sink_startofpacket
	wire          agent_pipeline_025_source0_endofpacket;                                    // agent_pipeline_025:out_endofpacket -> router_015:sink_endofpacket
	wire          ledg_s1_burst_adapter_source0_valid;                                       // ledg_s1_burst_adapter:source0_valid -> agent_pipeline_026:in_valid
	wire  [118:0] ledg_s1_burst_adapter_source0_data;                                        // ledg_s1_burst_adapter:source0_data -> agent_pipeline_026:in_data
	wire          ledg_s1_burst_adapter_source0_ready;                                       // agent_pipeline_026:in_ready -> ledg_s1_burst_adapter:source0_ready
	wire   [18:0] ledg_s1_burst_adapter_source0_channel;                                     // ledg_s1_burst_adapter:source0_channel -> agent_pipeline_026:in_channel
	wire          ledg_s1_burst_adapter_source0_startofpacket;                               // ledg_s1_burst_adapter:source0_startofpacket -> agent_pipeline_026:in_startofpacket
	wire          ledg_s1_burst_adapter_source0_endofpacket;                                 // ledg_s1_burst_adapter:source0_endofpacket -> agent_pipeline_026:in_endofpacket
	wire          agent_pipeline_026_source0_valid;                                          // agent_pipeline_026:out_valid -> ledg_s1_agent:cp_valid
	wire  [118:0] agent_pipeline_026_source0_data;                                           // agent_pipeline_026:out_data -> ledg_s1_agent:cp_data
	wire          agent_pipeline_026_source0_ready;                                          // ledg_s1_agent:cp_ready -> agent_pipeline_026:out_ready
	wire   [18:0] agent_pipeline_026_source0_channel;                                        // agent_pipeline_026:out_channel -> ledg_s1_agent:cp_channel
	wire          agent_pipeline_026_source0_startofpacket;                                  // agent_pipeline_026:out_startofpacket -> ledg_s1_agent:cp_startofpacket
	wire          agent_pipeline_026_source0_endofpacket;                                    // agent_pipeline_026:out_endofpacket -> ledg_s1_agent:cp_endofpacket
	wire          ledg_s1_agent_rp_valid;                                                    // ledg_s1_agent:rp_valid -> agent_pipeline_027:in_valid
	wire  [118:0] ledg_s1_agent_rp_data;                                                     // ledg_s1_agent:rp_data -> agent_pipeline_027:in_data
	wire          ledg_s1_agent_rp_ready;                                                    // agent_pipeline_027:in_ready -> ledg_s1_agent:rp_ready
	wire          ledg_s1_agent_rp_startofpacket;                                            // ledg_s1_agent:rp_startofpacket -> agent_pipeline_027:in_startofpacket
	wire          ledg_s1_agent_rp_endofpacket;                                              // ledg_s1_agent:rp_endofpacket -> agent_pipeline_027:in_endofpacket
	wire          agent_pipeline_027_source0_valid;                                          // agent_pipeline_027:out_valid -> router_016:sink_valid
	wire  [118:0] agent_pipeline_027_source0_data;                                           // agent_pipeline_027:out_data -> router_016:sink_data
	wire          agent_pipeline_027_source0_ready;                                          // router_016:sink_ready -> agent_pipeline_027:out_ready
	wire          agent_pipeline_027_source0_startofpacket;                                  // agent_pipeline_027:out_startofpacket -> router_016:sink_startofpacket
	wire          agent_pipeline_027_source0_endofpacket;                                    // agent_pipeline_027:out_endofpacket -> router_016:sink_endofpacket
	wire          ledr_s1_burst_adapter_source0_valid;                                       // ledr_s1_burst_adapter:source0_valid -> agent_pipeline_028:in_valid
	wire  [118:0] ledr_s1_burst_adapter_source0_data;                                        // ledr_s1_burst_adapter:source0_data -> agent_pipeline_028:in_data
	wire          ledr_s1_burst_adapter_source0_ready;                                       // agent_pipeline_028:in_ready -> ledr_s1_burst_adapter:source0_ready
	wire   [18:0] ledr_s1_burst_adapter_source0_channel;                                     // ledr_s1_burst_adapter:source0_channel -> agent_pipeline_028:in_channel
	wire          ledr_s1_burst_adapter_source0_startofpacket;                               // ledr_s1_burst_adapter:source0_startofpacket -> agent_pipeline_028:in_startofpacket
	wire          ledr_s1_burst_adapter_source0_endofpacket;                                 // ledr_s1_burst_adapter:source0_endofpacket -> agent_pipeline_028:in_endofpacket
	wire          agent_pipeline_028_source0_valid;                                          // agent_pipeline_028:out_valid -> ledr_s1_agent:cp_valid
	wire  [118:0] agent_pipeline_028_source0_data;                                           // agent_pipeline_028:out_data -> ledr_s1_agent:cp_data
	wire          agent_pipeline_028_source0_ready;                                          // ledr_s1_agent:cp_ready -> agent_pipeline_028:out_ready
	wire   [18:0] agent_pipeline_028_source0_channel;                                        // agent_pipeline_028:out_channel -> ledr_s1_agent:cp_channel
	wire          agent_pipeline_028_source0_startofpacket;                                  // agent_pipeline_028:out_startofpacket -> ledr_s1_agent:cp_startofpacket
	wire          agent_pipeline_028_source0_endofpacket;                                    // agent_pipeline_028:out_endofpacket -> ledr_s1_agent:cp_endofpacket
	wire          ledr_s1_agent_rp_valid;                                                    // ledr_s1_agent:rp_valid -> agent_pipeline_029:in_valid
	wire  [118:0] ledr_s1_agent_rp_data;                                                     // ledr_s1_agent:rp_data -> agent_pipeline_029:in_data
	wire          ledr_s1_agent_rp_ready;                                                    // agent_pipeline_029:in_ready -> ledr_s1_agent:rp_ready
	wire          ledr_s1_agent_rp_startofpacket;                                            // ledr_s1_agent:rp_startofpacket -> agent_pipeline_029:in_startofpacket
	wire          ledr_s1_agent_rp_endofpacket;                                              // ledr_s1_agent:rp_endofpacket -> agent_pipeline_029:in_endofpacket
	wire          agent_pipeline_029_source0_valid;                                          // agent_pipeline_029:out_valid -> router_017:sink_valid
	wire  [118:0] agent_pipeline_029_source0_data;                                           // agent_pipeline_029:out_data -> router_017:sink_data
	wire          agent_pipeline_029_source0_ready;                                          // router_017:sink_ready -> agent_pipeline_029:out_ready
	wire          agent_pipeline_029_source0_startofpacket;                                  // agent_pipeline_029:out_startofpacket -> router_017:sink_startofpacket
	wire          agent_pipeline_029_source0_endofpacket;                                    // agent_pipeline_029:out_endofpacket -> router_017:sink_endofpacket
	wire          i2c_scl_s1_burst_adapter_source0_valid;                                    // i2c_scl_s1_burst_adapter:source0_valid -> agent_pipeline_030:in_valid
	wire  [118:0] i2c_scl_s1_burst_adapter_source0_data;                                     // i2c_scl_s1_burst_adapter:source0_data -> agent_pipeline_030:in_data
	wire          i2c_scl_s1_burst_adapter_source0_ready;                                    // agent_pipeline_030:in_ready -> i2c_scl_s1_burst_adapter:source0_ready
	wire   [18:0] i2c_scl_s1_burst_adapter_source0_channel;                                  // i2c_scl_s1_burst_adapter:source0_channel -> agent_pipeline_030:in_channel
	wire          i2c_scl_s1_burst_adapter_source0_startofpacket;                            // i2c_scl_s1_burst_adapter:source0_startofpacket -> agent_pipeline_030:in_startofpacket
	wire          i2c_scl_s1_burst_adapter_source0_endofpacket;                              // i2c_scl_s1_burst_adapter:source0_endofpacket -> agent_pipeline_030:in_endofpacket
	wire          agent_pipeline_030_source0_valid;                                          // agent_pipeline_030:out_valid -> i2c_scl_s1_agent:cp_valid
	wire  [118:0] agent_pipeline_030_source0_data;                                           // agent_pipeline_030:out_data -> i2c_scl_s1_agent:cp_data
	wire          agent_pipeline_030_source0_ready;                                          // i2c_scl_s1_agent:cp_ready -> agent_pipeline_030:out_ready
	wire   [18:0] agent_pipeline_030_source0_channel;                                        // agent_pipeline_030:out_channel -> i2c_scl_s1_agent:cp_channel
	wire          agent_pipeline_030_source0_startofpacket;                                  // agent_pipeline_030:out_startofpacket -> i2c_scl_s1_agent:cp_startofpacket
	wire          agent_pipeline_030_source0_endofpacket;                                    // agent_pipeline_030:out_endofpacket -> i2c_scl_s1_agent:cp_endofpacket
	wire          i2c_scl_s1_agent_rp_valid;                                                 // i2c_scl_s1_agent:rp_valid -> agent_pipeline_031:in_valid
	wire  [118:0] i2c_scl_s1_agent_rp_data;                                                  // i2c_scl_s1_agent:rp_data -> agent_pipeline_031:in_data
	wire          i2c_scl_s1_agent_rp_ready;                                                 // agent_pipeline_031:in_ready -> i2c_scl_s1_agent:rp_ready
	wire          i2c_scl_s1_agent_rp_startofpacket;                                         // i2c_scl_s1_agent:rp_startofpacket -> agent_pipeline_031:in_startofpacket
	wire          i2c_scl_s1_agent_rp_endofpacket;                                           // i2c_scl_s1_agent:rp_endofpacket -> agent_pipeline_031:in_endofpacket
	wire          agent_pipeline_031_source0_valid;                                          // agent_pipeline_031:out_valid -> router_018:sink_valid
	wire  [118:0] agent_pipeline_031_source0_data;                                           // agent_pipeline_031:out_data -> router_018:sink_data
	wire          agent_pipeline_031_source0_ready;                                          // router_018:sink_ready -> agent_pipeline_031:out_ready
	wire          agent_pipeline_031_source0_startofpacket;                                  // agent_pipeline_031:out_startofpacket -> router_018:sink_startofpacket
	wire          agent_pipeline_031_source0_endofpacket;                                    // agent_pipeline_031:out_endofpacket -> router_018:sink_endofpacket
	wire          i2c_sda_s1_burst_adapter_source0_valid;                                    // i2c_sda_s1_burst_adapter:source0_valid -> agent_pipeline_032:in_valid
	wire  [118:0] i2c_sda_s1_burst_adapter_source0_data;                                     // i2c_sda_s1_burst_adapter:source0_data -> agent_pipeline_032:in_data
	wire          i2c_sda_s1_burst_adapter_source0_ready;                                    // agent_pipeline_032:in_ready -> i2c_sda_s1_burst_adapter:source0_ready
	wire   [18:0] i2c_sda_s1_burst_adapter_source0_channel;                                  // i2c_sda_s1_burst_adapter:source0_channel -> agent_pipeline_032:in_channel
	wire          i2c_sda_s1_burst_adapter_source0_startofpacket;                            // i2c_sda_s1_burst_adapter:source0_startofpacket -> agent_pipeline_032:in_startofpacket
	wire          i2c_sda_s1_burst_adapter_source0_endofpacket;                              // i2c_sda_s1_burst_adapter:source0_endofpacket -> agent_pipeline_032:in_endofpacket
	wire          agent_pipeline_032_source0_valid;                                          // agent_pipeline_032:out_valid -> i2c_sda_s1_agent:cp_valid
	wire  [118:0] agent_pipeline_032_source0_data;                                           // agent_pipeline_032:out_data -> i2c_sda_s1_agent:cp_data
	wire          agent_pipeline_032_source0_ready;                                          // i2c_sda_s1_agent:cp_ready -> agent_pipeline_032:out_ready
	wire   [18:0] agent_pipeline_032_source0_channel;                                        // agent_pipeline_032:out_channel -> i2c_sda_s1_agent:cp_channel
	wire          agent_pipeline_032_source0_startofpacket;                                  // agent_pipeline_032:out_startofpacket -> i2c_sda_s1_agent:cp_startofpacket
	wire          agent_pipeline_032_source0_endofpacket;                                    // agent_pipeline_032:out_endofpacket -> i2c_sda_s1_agent:cp_endofpacket
	wire          i2c_sda_s1_agent_rp_valid;                                                 // i2c_sda_s1_agent:rp_valid -> agent_pipeline_033:in_valid
	wire  [118:0] i2c_sda_s1_agent_rp_data;                                                  // i2c_sda_s1_agent:rp_data -> agent_pipeline_033:in_data
	wire          i2c_sda_s1_agent_rp_ready;                                                 // agent_pipeline_033:in_ready -> i2c_sda_s1_agent:rp_ready
	wire          i2c_sda_s1_agent_rp_startofpacket;                                         // i2c_sda_s1_agent:rp_startofpacket -> agent_pipeline_033:in_startofpacket
	wire          i2c_sda_s1_agent_rp_endofpacket;                                           // i2c_sda_s1_agent:rp_endofpacket -> agent_pipeline_033:in_endofpacket
	wire          agent_pipeline_033_source0_valid;                                          // agent_pipeline_033:out_valid -> router_019:sink_valid
	wire  [118:0] agent_pipeline_033_source0_data;                                           // agent_pipeline_033:out_data -> router_019:sink_data
	wire          agent_pipeline_033_source0_ready;                                          // router_019:sink_ready -> agent_pipeline_033:out_ready
	wire          agent_pipeline_033_source0_startofpacket;                                  // agent_pipeline_033:out_startofpacket -> router_019:sink_startofpacket
	wire          agent_pipeline_033_source0_endofpacket;                                    // agent_pipeline_033:out_endofpacket -> router_019:sink_endofpacket
	wire          sd_cont_0_slave_burst_adapter_source0_valid;                               // sd_cont_0_slave_burst_adapter:source0_valid -> agent_pipeline_034:in_valid
	wire  [118:0] sd_cont_0_slave_burst_adapter_source0_data;                                // sd_cont_0_slave_burst_adapter:source0_data -> agent_pipeline_034:in_data
	wire          sd_cont_0_slave_burst_adapter_source0_ready;                               // agent_pipeline_034:in_ready -> sd_cont_0_slave_burst_adapter:source0_ready
	wire   [18:0] sd_cont_0_slave_burst_adapter_source0_channel;                             // sd_cont_0_slave_burst_adapter:source0_channel -> agent_pipeline_034:in_channel
	wire          sd_cont_0_slave_burst_adapter_source0_startofpacket;                       // sd_cont_0_slave_burst_adapter:source0_startofpacket -> agent_pipeline_034:in_startofpacket
	wire          sd_cont_0_slave_burst_adapter_source0_endofpacket;                         // sd_cont_0_slave_burst_adapter:source0_endofpacket -> agent_pipeline_034:in_endofpacket
	wire          agent_pipeline_034_source0_valid;                                          // agent_pipeline_034:out_valid -> sd_cont_0_slave_agent:cp_valid
	wire  [118:0] agent_pipeline_034_source0_data;                                           // agent_pipeline_034:out_data -> sd_cont_0_slave_agent:cp_data
	wire          agent_pipeline_034_source0_ready;                                          // sd_cont_0_slave_agent:cp_ready -> agent_pipeline_034:out_ready
	wire   [18:0] agent_pipeline_034_source0_channel;                                        // agent_pipeline_034:out_channel -> sd_cont_0_slave_agent:cp_channel
	wire          agent_pipeline_034_source0_startofpacket;                                  // agent_pipeline_034:out_startofpacket -> sd_cont_0_slave_agent:cp_startofpacket
	wire          agent_pipeline_034_source0_endofpacket;                                    // agent_pipeline_034:out_endofpacket -> sd_cont_0_slave_agent:cp_endofpacket
	wire          sd_cont_0_slave_agent_rp_valid;                                            // sd_cont_0_slave_agent:rp_valid -> agent_pipeline_035:in_valid
	wire  [118:0] sd_cont_0_slave_agent_rp_data;                                             // sd_cont_0_slave_agent:rp_data -> agent_pipeline_035:in_data
	wire          sd_cont_0_slave_agent_rp_ready;                                            // agent_pipeline_035:in_ready -> sd_cont_0_slave_agent:rp_ready
	wire          sd_cont_0_slave_agent_rp_startofpacket;                                    // sd_cont_0_slave_agent:rp_startofpacket -> agent_pipeline_035:in_startofpacket
	wire          sd_cont_0_slave_agent_rp_endofpacket;                                      // sd_cont_0_slave_agent:rp_endofpacket -> agent_pipeline_035:in_endofpacket
	wire          agent_pipeline_035_source0_valid;                                          // agent_pipeline_035:out_valid -> router_020:sink_valid
	wire  [118:0] agent_pipeline_035_source0_data;                                           // agent_pipeline_035:out_data -> router_020:sink_data
	wire          agent_pipeline_035_source0_ready;                                          // router_020:sink_ready -> agent_pipeline_035:out_ready
	wire          agent_pipeline_035_source0_startofpacket;                                  // agent_pipeline_035:out_startofpacket -> router_020:sink_startofpacket
	wire          agent_pipeline_035_source0_endofpacket;                                    // agent_pipeline_035:out_endofpacket -> router_020:sink_endofpacket
	wire          sram_uas_burst_adapter_source0_valid;                                      // sram_uas_burst_adapter:source0_valid -> agent_pipeline_036:in_valid
	wire  [100:0] sram_uas_burst_adapter_source0_data;                                       // sram_uas_burst_adapter:source0_data -> agent_pipeline_036:in_data
	wire          sram_uas_burst_adapter_source0_ready;                                      // agent_pipeline_036:in_ready -> sram_uas_burst_adapter:source0_ready
	wire   [18:0] sram_uas_burst_adapter_source0_channel;                                    // sram_uas_burst_adapter:source0_channel -> agent_pipeline_036:in_channel
	wire          sram_uas_burst_adapter_source0_startofpacket;                              // sram_uas_burst_adapter:source0_startofpacket -> agent_pipeline_036:in_startofpacket
	wire          sram_uas_burst_adapter_source0_endofpacket;                                // sram_uas_burst_adapter:source0_endofpacket -> agent_pipeline_036:in_endofpacket
	wire          agent_pipeline_036_source0_valid;                                          // agent_pipeline_036:out_valid -> sram_uas_agent:cp_valid
	wire  [100:0] agent_pipeline_036_source0_data;                                           // agent_pipeline_036:out_data -> sram_uas_agent:cp_data
	wire          agent_pipeline_036_source0_ready;                                          // sram_uas_agent:cp_ready -> agent_pipeline_036:out_ready
	wire   [18:0] agent_pipeline_036_source0_channel;                                        // agent_pipeline_036:out_channel -> sram_uas_agent:cp_channel
	wire          agent_pipeline_036_source0_startofpacket;                                  // agent_pipeline_036:out_startofpacket -> sram_uas_agent:cp_startofpacket
	wire          agent_pipeline_036_source0_endofpacket;                                    // agent_pipeline_036:out_endofpacket -> sram_uas_agent:cp_endofpacket
	wire          sram_uas_agent_rp_valid;                                                   // sram_uas_agent:rp_valid -> agent_pipeline_037:in_valid
	wire  [100:0] sram_uas_agent_rp_data;                                                    // sram_uas_agent:rp_data -> agent_pipeline_037:in_data
	wire          sram_uas_agent_rp_ready;                                                   // agent_pipeline_037:in_ready -> sram_uas_agent:rp_ready
	wire          sram_uas_agent_rp_startofpacket;                                           // sram_uas_agent:rp_startofpacket -> agent_pipeline_037:in_startofpacket
	wire          sram_uas_agent_rp_endofpacket;                                             // sram_uas_agent:rp_endofpacket -> agent_pipeline_037:in_endofpacket
	wire          agent_pipeline_037_source0_valid;                                          // agent_pipeline_037:out_valid -> router_021:sink_valid
	wire  [100:0] agent_pipeline_037_source0_data;                                           // agent_pipeline_037:out_data -> router_021:sink_data
	wire          agent_pipeline_037_source0_ready;                                          // router_021:sink_ready -> agent_pipeline_037:out_ready
	wire          agent_pipeline_037_source0_startofpacket;                                  // agent_pipeline_037:out_startofpacket -> router_021:sink_startofpacket
	wire          agent_pipeline_037_source0_endofpacket;                                    // agent_pipeline_037:out_endofpacket -> router_021:sink_endofpacket
	wire          cmd_demux_src0_valid;                                                      // cmd_demux:src0_valid -> mux_pipeline:in_valid
	wire  [118:0] cmd_demux_src0_data;                                                       // cmd_demux:src0_data -> mux_pipeline:in_data
	wire          cmd_demux_src0_ready;                                                      // mux_pipeline:in_ready -> cmd_demux:src0_ready
	wire   [18:0] cmd_demux_src0_channel;                                                    // cmd_demux:src0_channel -> mux_pipeline:in_channel
	wire          cmd_demux_src0_startofpacket;                                              // cmd_demux:src0_startofpacket -> mux_pipeline:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                // cmd_demux:src0_endofpacket -> mux_pipeline:in_endofpacket
	wire          mux_pipeline_source0_valid;                                                // mux_pipeline:out_valid -> cmd_mux:sink0_valid
	wire  [118:0] mux_pipeline_source0_data;                                                 // mux_pipeline:out_data -> cmd_mux:sink0_data
	wire          mux_pipeline_source0_ready;                                                // cmd_mux:sink0_ready -> mux_pipeline:out_ready
	wire   [18:0] mux_pipeline_source0_channel;                                              // mux_pipeline:out_channel -> cmd_mux:sink0_channel
	wire          mux_pipeline_source0_startofpacket;                                        // mux_pipeline:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          mux_pipeline_source0_endofpacket;                                          // mux_pipeline:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                      // cmd_demux:src1_valid -> mux_pipeline_001:in_valid
	wire  [118:0] cmd_demux_src1_data;                                                       // cmd_demux:src1_data -> mux_pipeline_001:in_data
	wire          cmd_demux_src1_ready;                                                      // mux_pipeline_001:in_ready -> cmd_demux:src1_ready
	wire   [18:0] cmd_demux_src1_channel;                                                    // cmd_demux:src1_channel -> mux_pipeline_001:in_channel
	wire          cmd_demux_src1_startofpacket;                                              // cmd_demux:src1_startofpacket -> mux_pipeline_001:in_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                // cmd_demux:src1_endofpacket -> mux_pipeline_001:in_endofpacket
	wire          mux_pipeline_001_source0_valid;                                            // mux_pipeline_001:out_valid -> cmd_mux_001:sink0_valid
	wire  [118:0] mux_pipeline_001_source0_data;                                             // mux_pipeline_001:out_data -> cmd_mux_001:sink0_data
	wire          mux_pipeline_001_source0_ready;                                            // cmd_mux_001:sink0_ready -> mux_pipeline_001:out_ready
	wire   [18:0] mux_pipeline_001_source0_channel;                                          // mux_pipeline_001:out_channel -> cmd_mux_001:sink0_channel
	wire          mux_pipeline_001_source0_startofpacket;                                    // mux_pipeline_001:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          mux_pipeline_001_source0_endofpacket;                                      // mux_pipeline_001:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          crosser_001_out_valid;                                                     // crosser_001:out_valid -> mux_pipeline_002:in_valid
	wire  [118:0] crosser_001_out_data;                                                      // crosser_001:out_data -> mux_pipeline_002:in_data
	wire          crosser_001_out_ready;                                                     // mux_pipeline_002:in_ready -> crosser_001:out_ready
	wire   [18:0] crosser_001_out_channel;                                                   // crosser_001:out_channel -> mux_pipeline_002:in_channel
	wire          crosser_001_out_startofpacket;                                             // crosser_001:out_startofpacket -> mux_pipeline_002:in_startofpacket
	wire          crosser_001_out_endofpacket;                                               // crosser_001:out_endofpacket -> mux_pipeline_002:in_endofpacket
	wire          mux_pipeline_002_source0_valid;                                            // mux_pipeline_002:out_valid -> cmd_mux_001:sink1_valid
	wire  [118:0] mux_pipeline_002_source0_data;                                             // mux_pipeline_002:out_data -> cmd_mux_001:sink1_data
	wire          mux_pipeline_002_source0_ready;                                            // cmd_mux_001:sink1_ready -> mux_pipeline_002:out_ready
	wire   [18:0] mux_pipeline_002_source0_channel;                                          // mux_pipeline_002:out_channel -> cmd_mux_001:sink1_channel
	wire          mux_pipeline_002_source0_startofpacket;                                    // mux_pipeline_002:out_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          mux_pipeline_002_source0_endofpacket;                                      // mux_pipeline_002:out_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_src2_valid;                                                      // cmd_demux:src2_valid -> mux_pipeline_003:in_valid
	wire  [118:0] cmd_demux_src2_data;                                                       // cmd_demux:src2_data -> mux_pipeline_003:in_data
	wire          cmd_demux_src2_ready;                                                      // mux_pipeline_003:in_ready -> cmd_demux:src2_ready
	wire   [18:0] cmd_demux_src2_channel;                                                    // cmd_demux:src2_channel -> mux_pipeline_003:in_channel
	wire          cmd_demux_src2_startofpacket;                                              // cmd_demux:src2_startofpacket -> mux_pipeline_003:in_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                // cmd_demux:src2_endofpacket -> mux_pipeline_003:in_endofpacket
	wire          mux_pipeline_003_source0_valid;                                            // mux_pipeline_003:out_valid -> cmd_mux_002:sink0_valid
	wire  [118:0] mux_pipeline_003_source0_data;                                             // mux_pipeline_003:out_data -> cmd_mux_002:sink0_data
	wire          mux_pipeline_003_source0_ready;                                            // cmd_mux_002:sink0_ready -> mux_pipeline_003:out_ready
	wire   [18:0] mux_pipeline_003_source0_channel;                                          // mux_pipeline_003:out_channel -> cmd_mux_002:sink0_channel
	wire          mux_pipeline_003_source0_startofpacket;                                    // mux_pipeline_003:out_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          mux_pipeline_003_source0_endofpacket;                                      // mux_pipeline_003:out_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                      // cmd_demux:src3_valid -> mux_pipeline_004:in_valid
	wire  [118:0] cmd_demux_src3_data;                                                       // cmd_demux:src3_data -> mux_pipeline_004:in_data
	wire          cmd_demux_src3_ready;                                                      // mux_pipeline_004:in_ready -> cmd_demux:src3_ready
	wire   [18:0] cmd_demux_src3_channel;                                                    // cmd_demux:src3_channel -> mux_pipeline_004:in_channel
	wire          cmd_demux_src3_startofpacket;                                              // cmd_demux:src3_startofpacket -> mux_pipeline_004:in_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                // cmd_demux:src3_endofpacket -> mux_pipeline_004:in_endofpacket
	wire          mux_pipeline_004_source0_valid;                                            // mux_pipeline_004:out_valid -> cmd_mux_003:sink0_valid
	wire  [118:0] mux_pipeline_004_source0_data;                                             // mux_pipeline_004:out_data -> cmd_mux_003:sink0_data
	wire          mux_pipeline_004_source0_ready;                                            // cmd_mux_003:sink0_ready -> mux_pipeline_004:out_ready
	wire   [18:0] mux_pipeline_004_source0_channel;                                          // mux_pipeline_004:out_channel -> cmd_mux_003:sink0_channel
	wire          mux_pipeline_004_source0_startofpacket;                                    // mux_pipeline_004:out_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          mux_pipeline_004_source0_endofpacket;                                      // mux_pipeline_004:out_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                      // cmd_demux:src4_valid -> mux_pipeline_005:in_valid
	wire  [118:0] cmd_demux_src4_data;                                                       // cmd_demux:src4_data -> mux_pipeline_005:in_data
	wire          cmd_demux_src4_ready;                                                      // mux_pipeline_005:in_ready -> cmd_demux:src4_ready
	wire   [18:0] cmd_demux_src4_channel;                                                    // cmd_demux:src4_channel -> mux_pipeline_005:in_channel
	wire          cmd_demux_src4_startofpacket;                                              // cmd_demux:src4_startofpacket -> mux_pipeline_005:in_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                // cmd_demux:src4_endofpacket -> mux_pipeline_005:in_endofpacket
	wire          mux_pipeline_005_source0_valid;                                            // mux_pipeline_005:out_valid -> cmd_mux_004:sink0_valid
	wire  [118:0] mux_pipeline_005_source0_data;                                             // mux_pipeline_005:out_data -> cmd_mux_004:sink0_data
	wire          mux_pipeline_005_source0_ready;                                            // cmd_mux_004:sink0_ready -> mux_pipeline_005:out_ready
	wire   [18:0] mux_pipeline_005_source0_channel;                                          // mux_pipeline_005:out_channel -> cmd_mux_004:sink0_channel
	wire          mux_pipeline_005_source0_startofpacket;                                    // mux_pipeline_005:out_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          mux_pipeline_005_source0_endofpacket;                                      // mux_pipeline_005:out_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                      // cmd_demux:src5_valid -> mux_pipeline_006:in_valid
	wire  [118:0] cmd_demux_src5_data;                                                       // cmd_demux:src5_data -> mux_pipeline_006:in_data
	wire          cmd_demux_src5_ready;                                                      // mux_pipeline_006:in_ready -> cmd_demux:src5_ready
	wire   [18:0] cmd_demux_src5_channel;                                                    // cmd_demux:src5_channel -> mux_pipeline_006:in_channel
	wire          cmd_demux_src5_startofpacket;                                              // cmd_demux:src5_startofpacket -> mux_pipeline_006:in_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                // cmd_demux:src5_endofpacket -> mux_pipeline_006:in_endofpacket
	wire          mux_pipeline_006_source0_valid;                                            // mux_pipeline_006:out_valid -> cmd_mux_005:sink0_valid
	wire  [118:0] mux_pipeline_006_source0_data;                                             // mux_pipeline_006:out_data -> cmd_mux_005:sink0_data
	wire          mux_pipeline_006_source0_ready;                                            // cmd_mux_005:sink0_ready -> mux_pipeline_006:out_ready
	wire   [18:0] mux_pipeline_006_source0_channel;                                          // mux_pipeline_006:out_channel -> cmd_mux_005:sink0_channel
	wire          mux_pipeline_006_source0_startofpacket;                                    // mux_pipeline_006:out_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          mux_pipeline_006_source0_endofpacket;                                      // mux_pipeline_006:out_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                      // cmd_demux:src6_valid -> mux_pipeline_007:in_valid
	wire  [118:0] cmd_demux_src6_data;                                                       // cmd_demux:src6_data -> mux_pipeline_007:in_data
	wire          cmd_demux_src6_ready;                                                      // mux_pipeline_007:in_ready -> cmd_demux:src6_ready
	wire   [18:0] cmd_demux_src6_channel;                                                    // cmd_demux:src6_channel -> mux_pipeline_007:in_channel
	wire          cmd_demux_src6_startofpacket;                                              // cmd_demux:src6_startofpacket -> mux_pipeline_007:in_startofpacket
	wire          cmd_demux_src6_endofpacket;                                                // cmd_demux:src6_endofpacket -> mux_pipeline_007:in_endofpacket
	wire          mux_pipeline_007_source0_valid;                                            // mux_pipeline_007:out_valid -> cmd_mux_006:sink0_valid
	wire  [118:0] mux_pipeline_007_source0_data;                                             // mux_pipeline_007:out_data -> cmd_mux_006:sink0_data
	wire          mux_pipeline_007_source0_ready;                                            // cmd_mux_006:sink0_ready -> mux_pipeline_007:out_ready
	wire   [18:0] mux_pipeline_007_source0_channel;                                          // mux_pipeline_007:out_channel -> cmd_mux_006:sink0_channel
	wire          mux_pipeline_007_source0_startofpacket;                                    // mux_pipeline_007:out_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          mux_pipeline_007_source0_endofpacket;                                      // mux_pipeline_007:out_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                  // cmd_demux_001:src0_valid -> mux_pipeline_008:in_valid
	wire  [118:0] cmd_demux_001_src0_data;                                                   // cmd_demux_001:src0_data -> mux_pipeline_008:in_data
	wire          cmd_demux_001_src0_ready;                                                  // mux_pipeline_008:in_ready -> cmd_demux_001:src0_ready
	wire   [18:0] cmd_demux_001_src0_channel;                                                // cmd_demux_001:src0_channel -> mux_pipeline_008:in_channel
	wire          cmd_demux_001_src0_startofpacket;                                          // cmd_demux_001:src0_startofpacket -> mux_pipeline_008:in_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                            // cmd_demux_001:src0_endofpacket -> mux_pipeline_008:in_endofpacket
	wire          mux_pipeline_008_source0_valid;                                            // mux_pipeline_008:out_valid -> cmd_mux_006:sink1_valid
	wire  [118:0] mux_pipeline_008_source0_data;                                             // mux_pipeline_008:out_data -> cmd_mux_006:sink1_data
	wire          mux_pipeline_008_source0_ready;                                            // cmd_mux_006:sink1_ready -> mux_pipeline_008:out_ready
	wire   [18:0] mux_pipeline_008_source0_channel;                                          // mux_pipeline_008:out_channel -> cmd_mux_006:sink1_channel
	wire          mux_pipeline_008_source0_startofpacket;                                    // mux_pipeline_008:out_startofpacket -> cmd_mux_006:sink1_startofpacket
	wire          mux_pipeline_008_source0_endofpacket;                                      // mux_pipeline_008:out_endofpacket -> cmd_mux_006:sink1_endofpacket
	wire          cmd_demux_src7_valid;                                                      // cmd_demux:src7_valid -> mux_pipeline_009:in_valid
	wire  [118:0] cmd_demux_src7_data;                                                       // cmd_demux:src7_data -> mux_pipeline_009:in_data
	wire          cmd_demux_src7_ready;                                                      // mux_pipeline_009:in_ready -> cmd_demux:src7_ready
	wire   [18:0] cmd_demux_src7_channel;                                                    // cmd_demux:src7_channel -> mux_pipeline_009:in_channel
	wire          cmd_demux_src7_startofpacket;                                              // cmd_demux:src7_startofpacket -> mux_pipeline_009:in_startofpacket
	wire          cmd_demux_src7_endofpacket;                                                // cmd_demux:src7_endofpacket -> mux_pipeline_009:in_endofpacket
	wire          mux_pipeline_009_source0_valid;                                            // mux_pipeline_009:out_valid -> cmd_mux_007:sink0_valid
	wire  [118:0] mux_pipeline_009_source0_data;                                             // mux_pipeline_009:out_data -> cmd_mux_007:sink0_data
	wire          mux_pipeline_009_source0_ready;                                            // cmd_mux_007:sink0_ready -> mux_pipeline_009:out_ready
	wire   [18:0] mux_pipeline_009_source0_channel;                                          // mux_pipeline_009:out_channel -> cmd_mux_007:sink0_channel
	wire          mux_pipeline_009_source0_startofpacket;                                    // mux_pipeline_009:out_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          mux_pipeline_009_source0_endofpacket;                                      // mux_pipeline_009:out_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                      // cmd_demux:src8_valid -> mux_pipeline_010:in_valid
	wire  [118:0] cmd_demux_src8_data;                                                       // cmd_demux:src8_data -> mux_pipeline_010:in_data
	wire          cmd_demux_src8_ready;                                                      // mux_pipeline_010:in_ready -> cmd_demux:src8_ready
	wire   [18:0] cmd_demux_src8_channel;                                                    // cmd_demux:src8_channel -> mux_pipeline_010:in_channel
	wire          cmd_demux_src8_startofpacket;                                              // cmd_demux:src8_startofpacket -> mux_pipeline_010:in_startofpacket
	wire          cmd_demux_src8_endofpacket;                                                // cmd_demux:src8_endofpacket -> mux_pipeline_010:in_endofpacket
	wire          mux_pipeline_010_source0_valid;                                            // mux_pipeline_010:out_valid -> cmd_mux_008:sink0_valid
	wire  [118:0] mux_pipeline_010_source0_data;                                             // mux_pipeline_010:out_data -> cmd_mux_008:sink0_data
	wire          mux_pipeline_010_source0_ready;                                            // cmd_mux_008:sink0_ready -> mux_pipeline_010:out_ready
	wire   [18:0] mux_pipeline_010_source0_channel;                                          // mux_pipeline_010:out_channel -> cmd_mux_008:sink0_channel
	wire          mux_pipeline_010_source0_startofpacket;                                    // mux_pipeline_010:out_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          mux_pipeline_010_source0_endofpacket;                                      // mux_pipeline_010:out_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_src9_valid;                                                      // cmd_demux:src9_valid -> mux_pipeline_011:in_valid
	wire  [118:0] cmd_demux_src9_data;                                                       // cmd_demux:src9_data -> mux_pipeline_011:in_data
	wire          cmd_demux_src9_ready;                                                      // mux_pipeline_011:in_ready -> cmd_demux:src9_ready
	wire   [18:0] cmd_demux_src9_channel;                                                    // cmd_demux:src9_channel -> mux_pipeline_011:in_channel
	wire          cmd_demux_src9_startofpacket;                                              // cmd_demux:src9_startofpacket -> mux_pipeline_011:in_startofpacket
	wire          cmd_demux_src9_endofpacket;                                                // cmd_demux:src9_endofpacket -> mux_pipeline_011:in_endofpacket
	wire          mux_pipeline_011_source0_valid;                                            // mux_pipeline_011:out_valid -> cmd_mux_009:sink0_valid
	wire  [118:0] mux_pipeline_011_source0_data;                                             // mux_pipeline_011:out_data -> cmd_mux_009:sink0_data
	wire          mux_pipeline_011_source0_ready;                                            // cmd_mux_009:sink0_ready -> mux_pipeline_011:out_ready
	wire   [18:0] mux_pipeline_011_source0_channel;                                          // mux_pipeline_011:out_channel -> cmd_mux_009:sink0_channel
	wire          mux_pipeline_011_source0_startofpacket;                                    // mux_pipeline_011:out_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          mux_pipeline_011_source0_endofpacket;                                      // mux_pipeline_011:out_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_src10_valid;                                                     // cmd_demux:src10_valid -> mux_pipeline_012:in_valid
	wire  [118:0] cmd_demux_src10_data;                                                      // cmd_demux:src10_data -> mux_pipeline_012:in_data
	wire          cmd_demux_src10_ready;                                                     // mux_pipeline_012:in_ready -> cmd_demux:src10_ready
	wire   [18:0] cmd_demux_src10_channel;                                                   // cmd_demux:src10_channel -> mux_pipeline_012:in_channel
	wire          cmd_demux_src10_startofpacket;                                             // cmd_demux:src10_startofpacket -> mux_pipeline_012:in_startofpacket
	wire          cmd_demux_src10_endofpacket;                                               // cmd_demux:src10_endofpacket -> mux_pipeline_012:in_endofpacket
	wire          mux_pipeline_012_source0_valid;                                            // mux_pipeline_012:out_valid -> cmd_mux_010:sink0_valid
	wire  [118:0] mux_pipeline_012_source0_data;                                             // mux_pipeline_012:out_data -> cmd_mux_010:sink0_data
	wire          mux_pipeline_012_source0_ready;                                            // cmd_mux_010:sink0_ready -> mux_pipeline_012:out_ready
	wire   [18:0] mux_pipeline_012_source0_channel;                                          // mux_pipeline_012:out_channel -> cmd_mux_010:sink0_channel
	wire          mux_pipeline_012_source0_startofpacket;                                    // mux_pipeline_012:out_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          mux_pipeline_012_source0_endofpacket;                                      // mux_pipeline_012:out_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_src11_valid;                                                     // cmd_demux:src11_valid -> mux_pipeline_013:in_valid
	wire  [118:0] cmd_demux_src11_data;                                                      // cmd_demux:src11_data -> mux_pipeline_013:in_data
	wire          cmd_demux_src11_ready;                                                     // mux_pipeline_013:in_ready -> cmd_demux:src11_ready
	wire   [18:0] cmd_demux_src11_channel;                                                   // cmd_demux:src11_channel -> mux_pipeline_013:in_channel
	wire          cmd_demux_src11_startofpacket;                                             // cmd_demux:src11_startofpacket -> mux_pipeline_013:in_startofpacket
	wire          cmd_demux_src11_endofpacket;                                               // cmd_demux:src11_endofpacket -> mux_pipeline_013:in_endofpacket
	wire          mux_pipeline_013_source0_valid;                                            // mux_pipeline_013:out_valid -> cmd_mux_011:sink0_valid
	wire  [118:0] mux_pipeline_013_source0_data;                                             // mux_pipeline_013:out_data -> cmd_mux_011:sink0_data
	wire          mux_pipeline_013_source0_ready;                                            // cmd_mux_011:sink0_ready -> mux_pipeline_013:out_ready
	wire   [18:0] mux_pipeline_013_source0_channel;                                          // mux_pipeline_013:out_channel -> cmd_mux_011:sink0_channel
	wire          mux_pipeline_013_source0_startofpacket;                                    // mux_pipeline_013:out_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          mux_pipeline_013_source0_endofpacket;                                      // mux_pipeline_013:out_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_src12_valid;                                                     // cmd_demux:src12_valid -> mux_pipeline_014:in_valid
	wire  [118:0] cmd_demux_src12_data;                                                      // cmd_demux:src12_data -> mux_pipeline_014:in_data
	wire          cmd_demux_src12_ready;                                                     // mux_pipeline_014:in_ready -> cmd_demux:src12_ready
	wire   [18:0] cmd_demux_src12_channel;                                                   // cmd_demux:src12_channel -> mux_pipeline_014:in_channel
	wire          cmd_demux_src12_startofpacket;                                             // cmd_demux:src12_startofpacket -> mux_pipeline_014:in_startofpacket
	wire          cmd_demux_src12_endofpacket;                                               // cmd_demux:src12_endofpacket -> mux_pipeline_014:in_endofpacket
	wire          mux_pipeline_014_source0_valid;                                            // mux_pipeline_014:out_valid -> cmd_mux_012:sink0_valid
	wire  [118:0] mux_pipeline_014_source0_data;                                             // mux_pipeline_014:out_data -> cmd_mux_012:sink0_data
	wire          mux_pipeline_014_source0_ready;                                            // cmd_mux_012:sink0_ready -> mux_pipeline_014:out_ready
	wire   [18:0] mux_pipeline_014_source0_channel;                                          // mux_pipeline_014:out_channel -> cmd_mux_012:sink0_channel
	wire          mux_pipeline_014_source0_startofpacket;                                    // mux_pipeline_014:out_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire          mux_pipeline_014_source0_endofpacket;                                      // mux_pipeline_014:out_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_src13_valid;                                                     // cmd_demux:src13_valid -> mux_pipeline_015:in_valid
	wire  [118:0] cmd_demux_src13_data;                                                      // cmd_demux:src13_data -> mux_pipeline_015:in_data
	wire          cmd_demux_src13_ready;                                                     // mux_pipeline_015:in_ready -> cmd_demux:src13_ready
	wire   [18:0] cmd_demux_src13_channel;                                                   // cmd_demux:src13_channel -> mux_pipeline_015:in_channel
	wire          cmd_demux_src13_startofpacket;                                             // cmd_demux:src13_startofpacket -> mux_pipeline_015:in_startofpacket
	wire          cmd_demux_src13_endofpacket;                                               // cmd_demux:src13_endofpacket -> mux_pipeline_015:in_endofpacket
	wire          mux_pipeline_015_source0_valid;                                            // mux_pipeline_015:out_valid -> cmd_mux_013:sink0_valid
	wire  [118:0] mux_pipeline_015_source0_data;                                             // mux_pipeline_015:out_data -> cmd_mux_013:sink0_data
	wire          mux_pipeline_015_source0_ready;                                            // cmd_mux_013:sink0_ready -> mux_pipeline_015:out_ready
	wire   [18:0] mux_pipeline_015_source0_channel;                                          // mux_pipeline_015:out_channel -> cmd_mux_013:sink0_channel
	wire          mux_pipeline_015_source0_startofpacket;                                    // mux_pipeline_015:out_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire          mux_pipeline_015_source0_endofpacket;                                      // mux_pipeline_015:out_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire          cmd_demux_src14_valid;                                                     // cmd_demux:src14_valid -> mux_pipeline_016:in_valid
	wire  [118:0] cmd_demux_src14_data;                                                      // cmd_demux:src14_data -> mux_pipeline_016:in_data
	wire          cmd_demux_src14_ready;                                                     // mux_pipeline_016:in_ready -> cmd_demux:src14_ready
	wire   [18:0] cmd_demux_src14_channel;                                                   // cmd_demux:src14_channel -> mux_pipeline_016:in_channel
	wire          cmd_demux_src14_startofpacket;                                             // cmd_demux:src14_startofpacket -> mux_pipeline_016:in_startofpacket
	wire          cmd_demux_src14_endofpacket;                                               // cmd_demux:src14_endofpacket -> mux_pipeline_016:in_endofpacket
	wire          mux_pipeline_016_source0_valid;                                            // mux_pipeline_016:out_valid -> cmd_mux_014:sink0_valid
	wire  [118:0] mux_pipeline_016_source0_data;                                             // mux_pipeline_016:out_data -> cmd_mux_014:sink0_data
	wire          mux_pipeline_016_source0_ready;                                            // cmd_mux_014:sink0_ready -> mux_pipeline_016:out_ready
	wire   [18:0] mux_pipeline_016_source0_channel;                                          // mux_pipeline_016:out_channel -> cmd_mux_014:sink0_channel
	wire          mux_pipeline_016_source0_startofpacket;                                    // mux_pipeline_016:out_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire          mux_pipeline_016_source0_endofpacket;                                      // mux_pipeline_016:out_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire          cmd_demux_src15_valid;                                                     // cmd_demux:src15_valid -> mux_pipeline_017:in_valid
	wire  [118:0] cmd_demux_src15_data;                                                      // cmd_demux:src15_data -> mux_pipeline_017:in_data
	wire          cmd_demux_src15_ready;                                                     // mux_pipeline_017:in_ready -> cmd_demux:src15_ready
	wire   [18:0] cmd_demux_src15_channel;                                                   // cmd_demux:src15_channel -> mux_pipeline_017:in_channel
	wire          cmd_demux_src15_startofpacket;                                             // cmd_demux:src15_startofpacket -> mux_pipeline_017:in_startofpacket
	wire          cmd_demux_src15_endofpacket;                                               // cmd_demux:src15_endofpacket -> mux_pipeline_017:in_endofpacket
	wire          mux_pipeline_017_source0_valid;                                            // mux_pipeline_017:out_valid -> cmd_mux_015:sink0_valid
	wire  [118:0] mux_pipeline_017_source0_data;                                             // mux_pipeline_017:out_data -> cmd_mux_015:sink0_data
	wire          mux_pipeline_017_source0_ready;                                            // cmd_mux_015:sink0_ready -> mux_pipeline_017:out_ready
	wire   [18:0] mux_pipeline_017_source0_channel;                                          // mux_pipeline_017:out_channel -> cmd_mux_015:sink0_channel
	wire          mux_pipeline_017_source0_startofpacket;                                    // mux_pipeline_017:out_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire          mux_pipeline_017_source0_endofpacket;                                      // mux_pipeline_017:out_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire          cmd_demux_src16_valid;                                                     // cmd_demux:src16_valid -> mux_pipeline_018:in_valid
	wire  [118:0] cmd_demux_src16_data;                                                      // cmd_demux:src16_data -> mux_pipeline_018:in_data
	wire          cmd_demux_src16_ready;                                                     // mux_pipeline_018:in_ready -> cmd_demux:src16_ready
	wire   [18:0] cmd_demux_src16_channel;                                                   // cmd_demux:src16_channel -> mux_pipeline_018:in_channel
	wire          cmd_demux_src16_startofpacket;                                             // cmd_demux:src16_startofpacket -> mux_pipeline_018:in_startofpacket
	wire          cmd_demux_src16_endofpacket;                                               // cmd_demux:src16_endofpacket -> mux_pipeline_018:in_endofpacket
	wire          mux_pipeline_018_source0_valid;                                            // mux_pipeline_018:out_valid -> cmd_mux_016:sink0_valid
	wire  [118:0] mux_pipeline_018_source0_data;                                             // mux_pipeline_018:out_data -> cmd_mux_016:sink0_data
	wire          mux_pipeline_018_source0_ready;                                            // cmd_mux_016:sink0_ready -> mux_pipeline_018:out_ready
	wire   [18:0] mux_pipeline_018_source0_channel;                                          // mux_pipeline_018:out_channel -> cmd_mux_016:sink0_channel
	wire          mux_pipeline_018_source0_startofpacket;                                    // mux_pipeline_018:out_startofpacket -> cmd_mux_016:sink0_startofpacket
	wire          mux_pipeline_018_source0_endofpacket;                                      // mux_pipeline_018:out_endofpacket -> cmd_mux_016:sink0_endofpacket
	wire          crosser_out_valid;                                                         // crosser:out_valid -> mux_pipeline_019:in_valid
	wire  [118:0] crosser_out_data;                                                          // crosser:out_data -> mux_pipeline_019:in_data
	wire          crosser_out_ready;                                                         // mux_pipeline_019:in_ready -> crosser:out_ready
	wire   [18:0] crosser_out_channel;                                                       // crosser:out_channel -> mux_pipeline_019:in_channel
	wire          crosser_out_startofpacket;                                                 // crosser:out_startofpacket -> mux_pipeline_019:in_startofpacket
	wire          crosser_out_endofpacket;                                                   // crosser:out_endofpacket -> mux_pipeline_019:in_endofpacket
	wire          mux_pipeline_019_source0_valid;                                            // mux_pipeline_019:out_valid -> cmd_mux_017:sink0_valid
	wire  [118:0] mux_pipeline_019_source0_data;                                             // mux_pipeline_019:out_data -> cmd_mux_017:sink0_data
	wire          mux_pipeline_019_source0_ready;                                            // cmd_mux_017:sink0_ready -> mux_pipeline_019:out_ready
	wire   [18:0] mux_pipeline_019_source0_channel;                                          // mux_pipeline_019:out_channel -> cmd_mux_017:sink0_channel
	wire          mux_pipeline_019_source0_startofpacket;                                    // mux_pipeline_019:out_startofpacket -> cmd_mux_017:sink0_startofpacket
	wire          mux_pipeline_019_source0_endofpacket;                                      // mux_pipeline_019:out_endofpacket -> cmd_mux_017:sink0_endofpacket
	wire          cmd_demux_src18_valid;                                                     // cmd_demux:src18_valid -> mux_pipeline_020:in_valid
	wire  [118:0] cmd_demux_src18_data;                                                      // cmd_demux:src18_data -> mux_pipeline_020:in_data
	wire          cmd_demux_src18_ready;                                                     // mux_pipeline_020:in_ready -> cmd_demux:src18_ready
	wire   [18:0] cmd_demux_src18_channel;                                                   // cmd_demux:src18_channel -> mux_pipeline_020:in_channel
	wire          cmd_demux_src18_startofpacket;                                             // cmd_demux:src18_startofpacket -> mux_pipeline_020:in_startofpacket
	wire          cmd_demux_src18_endofpacket;                                               // cmd_demux:src18_endofpacket -> mux_pipeline_020:in_endofpacket
	wire          mux_pipeline_020_source0_valid;                                            // mux_pipeline_020:out_valid -> cmd_mux_018:sink0_valid
	wire  [118:0] mux_pipeline_020_source0_data;                                             // mux_pipeline_020:out_data -> cmd_mux_018:sink0_data
	wire          mux_pipeline_020_source0_ready;                                            // cmd_mux_018:sink0_ready -> mux_pipeline_020:out_ready
	wire   [18:0] mux_pipeline_020_source0_channel;                                          // mux_pipeline_020:out_channel -> cmd_mux_018:sink0_channel
	wire          mux_pipeline_020_source0_startofpacket;                                    // mux_pipeline_020:out_startofpacket -> cmd_mux_018:sink0_startofpacket
	wire          mux_pipeline_020_source0_endofpacket;                                      // mux_pipeline_020:out_endofpacket -> cmd_mux_018:sink0_endofpacket
	wire          cmd_demux_001_src1_valid;                                                  // cmd_demux_001:src1_valid -> mux_pipeline_021:in_valid
	wire  [118:0] cmd_demux_001_src1_data;                                                   // cmd_demux_001:src1_data -> mux_pipeline_021:in_data
	wire          cmd_demux_001_src1_ready;                                                  // mux_pipeline_021:in_ready -> cmd_demux_001:src1_ready
	wire   [18:0] cmd_demux_001_src1_channel;                                                // cmd_demux_001:src1_channel -> mux_pipeline_021:in_channel
	wire          cmd_demux_001_src1_startofpacket;                                          // cmd_demux_001:src1_startofpacket -> mux_pipeline_021:in_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                            // cmd_demux_001:src1_endofpacket -> mux_pipeline_021:in_endofpacket
	wire          mux_pipeline_021_source0_valid;                                            // mux_pipeline_021:out_valid -> cmd_mux_018:sink1_valid
	wire  [118:0] mux_pipeline_021_source0_data;                                             // mux_pipeline_021:out_data -> cmd_mux_018:sink1_data
	wire          mux_pipeline_021_source0_ready;                                            // cmd_mux_018:sink1_ready -> mux_pipeline_021:out_ready
	wire   [18:0] mux_pipeline_021_source0_channel;                                          // mux_pipeline_021:out_channel -> cmd_mux_018:sink1_channel
	wire          mux_pipeline_021_source0_startofpacket;                                    // mux_pipeline_021:out_startofpacket -> cmd_mux_018:sink1_startofpacket
	wire          mux_pipeline_021_source0_endofpacket;                                      // mux_pipeline_021:out_endofpacket -> cmd_mux_018:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                      // rsp_demux:src0_valid -> mux_pipeline_022:in_valid
	wire  [118:0] rsp_demux_src0_data;                                                       // rsp_demux:src0_data -> mux_pipeline_022:in_data
	wire          rsp_demux_src0_ready;                                                      // mux_pipeline_022:in_ready -> rsp_demux:src0_ready
	wire   [18:0] rsp_demux_src0_channel;                                                    // rsp_demux:src0_channel -> mux_pipeline_022:in_channel
	wire          rsp_demux_src0_startofpacket;                                              // rsp_demux:src0_startofpacket -> mux_pipeline_022:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                // rsp_demux:src0_endofpacket -> mux_pipeline_022:in_endofpacket
	wire          mux_pipeline_022_source0_valid;                                            // mux_pipeline_022:out_valid -> rsp_mux:sink0_valid
	wire  [118:0] mux_pipeline_022_source0_data;                                             // mux_pipeline_022:out_data -> rsp_mux:sink0_data
	wire          mux_pipeline_022_source0_ready;                                            // rsp_mux:sink0_ready -> mux_pipeline_022:out_ready
	wire   [18:0] mux_pipeline_022_source0_channel;                                          // mux_pipeline_022:out_channel -> rsp_mux:sink0_channel
	wire          mux_pipeline_022_source0_startofpacket;                                    // mux_pipeline_022:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          mux_pipeline_022_source0_endofpacket;                                      // mux_pipeline_022:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                  // rsp_demux_001:src0_valid -> mux_pipeline_023:in_valid
	wire  [118:0] rsp_demux_001_src0_data;                                                   // rsp_demux_001:src0_data -> mux_pipeline_023:in_data
	wire          rsp_demux_001_src0_ready;                                                  // mux_pipeline_023:in_ready -> rsp_demux_001:src0_ready
	wire   [18:0] rsp_demux_001_src0_channel;                                                // rsp_demux_001:src0_channel -> mux_pipeline_023:in_channel
	wire          rsp_demux_001_src0_startofpacket;                                          // rsp_demux_001:src0_startofpacket -> mux_pipeline_023:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                            // rsp_demux_001:src0_endofpacket -> mux_pipeline_023:in_endofpacket
	wire          mux_pipeline_023_source0_valid;                                            // mux_pipeline_023:out_valid -> rsp_mux:sink1_valid
	wire  [118:0] mux_pipeline_023_source0_data;                                             // mux_pipeline_023:out_data -> rsp_mux:sink1_data
	wire          mux_pipeline_023_source0_ready;                                            // rsp_mux:sink1_ready -> mux_pipeline_023:out_ready
	wire   [18:0] mux_pipeline_023_source0_channel;                                          // mux_pipeline_023:out_channel -> rsp_mux:sink1_channel
	wire          mux_pipeline_023_source0_startofpacket;                                    // mux_pipeline_023:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire          mux_pipeline_023_source0_endofpacket;                                      // mux_pipeline_023:out_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                  // rsp_demux_002:src0_valid -> mux_pipeline_024:in_valid
	wire  [118:0] rsp_demux_002_src0_data;                                                   // rsp_demux_002:src0_data -> mux_pipeline_024:in_data
	wire          rsp_demux_002_src0_ready;                                                  // mux_pipeline_024:in_ready -> rsp_demux_002:src0_ready
	wire   [18:0] rsp_demux_002_src0_channel;                                                // rsp_demux_002:src0_channel -> mux_pipeline_024:in_channel
	wire          rsp_demux_002_src0_startofpacket;                                          // rsp_demux_002:src0_startofpacket -> mux_pipeline_024:in_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                            // rsp_demux_002:src0_endofpacket -> mux_pipeline_024:in_endofpacket
	wire          mux_pipeline_024_source0_valid;                                            // mux_pipeline_024:out_valid -> rsp_mux:sink2_valid
	wire  [118:0] mux_pipeline_024_source0_data;                                             // mux_pipeline_024:out_data -> rsp_mux:sink2_data
	wire          mux_pipeline_024_source0_ready;                                            // rsp_mux:sink2_ready -> mux_pipeline_024:out_ready
	wire   [18:0] mux_pipeline_024_source0_channel;                                          // mux_pipeline_024:out_channel -> rsp_mux:sink2_channel
	wire          mux_pipeline_024_source0_startofpacket;                                    // mux_pipeline_024:out_startofpacket -> rsp_mux:sink2_startofpacket
	wire          mux_pipeline_024_source0_endofpacket;                                      // mux_pipeline_024:out_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                  // rsp_demux_003:src0_valid -> mux_pipeline_025:in_valid
	wire  [118:0] rsp_demux_003_src0_data;                                                   // rsp_demux_003:src0_data -> mux_pipeline_025:in_data
	wire          rsp_demux_003_src0_ready;                                                  // mux_pipeline_025:in_ready -> rsp_demux_003:src0_ready
	wire   [18:0] rsp_demux_003_src0_channel;                                                // rsp_demux_003:src0_channel -> mux_pipeline_025:in_channel
	wire          rsp_demux_003_src0_startofpacket;                                          // rsp_demux_003:src0_startofpacket -> mux_pipeline_025:in_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                            // rsp_demux_003:src0_endofpacket -> mux_pipeline_025:in_endofpacket
	wire          mux_pipeline_025_source0_valid;                                            // mux_pipeline_025:out_valid -> rsp_mux:sink3_valid
	wire  [118:0] mux_pipeline_025_source0_data;                                             // mux_pipeline_025:out_data -> rsp_mux:sink3_data
	wire          mux_pipeline_025_source0_ready;                                            // rsp_mux:sink3_ready -> mux_pipeline_025:out_ready
	wire   [18:0] mux_pipeline_025_source0_channel;                                          // mux_pipeline_025:out_channel -> rsp_mux:sink3_channel
	wire          mux_pipeline_025_source0_startofpacket;                                    // mux_pipeline_025:out_startofpacket -> rsp_mux:sink3_startofpacket
	wire          mux_pipeline_025_source0_endofpacket;                                      // mux_pipeline_025:out_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                  // rsp_demux_004:src0_valid -> mux_pipeline_026:in_valid
	wire  [118:0] rsp_demux_004_src0_data;                                                   // rsp_demux_004:src0_data -> mux_pipeline_026:in_data
	wire          rsp_demux_004_src0_ready;                                                  // mux_pipeline_026:in_ready -> rsp_demux_004:src0_ready
	wire   [18:0] rsp_demux_004_src0_channel;                                                // rsp_demux_004:src0_channel -> mux_pipeline_026:in_channel
	wire          rsp_demux_004_src0_startofpacket;                                          // rsp_demux_004:src0_startofpacket -> mux_pipeline_026:in_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                            // rsp_demux_004:src0_endofpacket -> mux_pipeline_026:in_endofpacket
	wire          mux_pipeline_026_source0_valid;                                            // mux_pipeline_026:out_valid -> rsp_mux:sink4_valid
	wire  [118:0] mux_pipeline_026_source0_data;                                             // mux_pipeline_026:out_data -> rsp_mux:sink4_data
	wire          mux_pipeline_026_source0_ready;                                            // rsp_mux:sink4_ready -> mux_pipeline_026:out_ready
	wire   [18:0] mux_pipeline_026_source0_channel;                                          // mux_pipeline_026:out_channel -> rsp_mux:sink4_channel
	wire          mux_pipeline_026_source0_startofpacket;                                    // mux_pipeline_026:out_startofpacket -> rsp_mux:sink4_startofpacket
	wire          mux_pipeline_026_source0_endofpacket;                                      // mux_pipeline_026:out_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                                  // rsp_demux_005:src0_valid -> mux_pipeline_027:in_valid
	wire  [118:0] rsp_demux_005_src0_data;                                                   // rsp_demux_005:src0_data -> mux_pipeline_027:in_data
	wire          rsp_demux_005_src0_ready;                                                  // mux_pipeline_027:in_ready -> rsp_demux_005:src0_ready
	wire   [18:0] rsp_demux_005_src0_channel;                                                // rsp_demux_005:src0_channel -> mux_pipeline_027:in_channel
	wire          rsp_demux_005_src0_startofpacket;                                          // rsp_demux_005:src0_startofpacket -> mux_pipeline_027:in_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                            // rsp_demux_005:src0_endofpacket -> mux_pipeline_027:in_endofpacket
	wire          mux_pipeline_027_source0_valid;                                            // mux_pipeline_027:out_valid -> rsp_mux:sink5_valid
	wire  [118:0] mux_pipeline_027_source0_data;                                             // mux_pipeline_027:out_data -> rsp_mux:sink5_data
	wire          mux_pipeline_027_source0_ready;                                            // rsp_mux:sink5_ready -> mux_pipeline_027:out_ready
	wire   [18:0] mux_pipeline_027_source0_channel;                                          // mux_pipeline_027:out_channel -> rsp_mux:sink5_channel
	wire          mux_pipeline_027_source0_startofpacket;                                    // mux_pipeline_027:out_startofpacket -> rsp_mux:sink5_startofpacket
	wire          mux_pipeline_027_source0_endofpacket;                                      // mux_pipeline_027:out_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_006_src0_valid;                                                  // rsp_demux_006:src0_valid -> mux_pipeline_028:in_valid
	wire  [118:0] rsp_demux_006_src0_data;                                                   // rsp_demux_006:src0_data -> mux_pipeline_028:in_data
	wire          rsp_demux_006_src0_ready;                                                  // mux_pipeline_028:in_ready -> rsp_demux_006:src0_ready
	wire   [18:0] rsp_demux_006_src0_channel;                                                // rsp_demux_006:src0_channel -> mux_pipeline_028:in_channel
	wire          rsp_demux_006_src0_startofpacket;                                          // rsp_demux_006:src0_startofpacket -> mux_pipeline_028:in_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                            // rsp_demux_006:src0_endofpacket -> mux_pipeline_028:in_endofpacket
	wire          mux_pipeline_028_source0_valid;                                            // mux_pipeline_028:out_valid -> rsp_mux:sink6_valid
	wire  [118:0] mux_pipeline_028_source0_data;                                             // mux_pipeline_028:out_data -> rsp_mux:sink6_data
	wire          mux_pipeline_028_source0_ready;                                            // rsp_mux:sink6_ready -> mux_pipeline_028:out_ready
	wire   [18:0] mux_pipeline_028_source0_channel;                                          // mux_pipeline_028:out_channel -> rsp_mux:sink6_channel
	wire          mux_pipeline_028_source0_startofpacket;                                    // mux_pipeline_028:out_startofpacket -> rsp_mux:sink6_startofpacket
	wire          mux_pipeline_028_source0_endofpacket;                                      // mux_pipeline_028:out_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_007_src0_valid;                                                  // rsp_demux_007:src0_valid -> mux_pipeline_029:in_valid
	wire  [118:0] rsp_demux_007_src0_data;                                                   // rsp_demux_007:src0_data -> mux_pipeline_029:in_data
	wire          rsp_demux_007_src0_ready;                                                  // mux_pipeline_029:in_ready -> rsp_demux_007:src0_ready
	wire   [18:0] rsp_demux_007_src0_channel;                                                // rsp_demux_007:src0_channel -> mux_pipeline_029:in_channel
	wire          rsp_demux_007_src0_startofpacket;                                          // rsp_demux_007:src0_startofpacket -> mux_pipeline_029:in_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                            // rsp_demux_007:src0_endofpacket -> mux_pipeline_029:in_endofpacket
	wire          mux_pipeline_029_source0_valid;                                            // mux_pipeline_029:out_valid -> rsp_mux:sink7_valid
	wire  [118:0] mux_pipeline_029_source0_data;                                             // mux_pipeline_029:out_data -> rsp_mux:sink7_data
	wire          mux_pipeline_029_source0_ready;                                            // rsp_mux:sink7_ready -> mux_pipeline_029:out_ready
	wire   [18:0] mux_pipeline_029_source0_channel;                                          // mux_pipeline_029:out_channel -> rsp_mux:sink7_channel
	wire          mux_pipeline_029_source0_startofpacket;                                    // mux_pipeline_029:out_startofpacket -> rsp_mux:sink7_startofpacket
	wire          mux_pipeline_029_source0_endofpacket;                                      // mux_pipeline_029:out_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_008_src0_valid;                                                  // rsp_demux_008:src0_valid -> mux_pipeline_030:in_valid
	wire  [118:0] rsp_demux_008_src0_data;                                                   // rsp_demux_008:src0_data -> mux_pipeline_030:in_data
	wire          rsp_demux_008_src0_ready;                                                  // mux_pipeline_030:in_ready -> rsp_demux_008:src0_ready
	wire   [18:0] rsp_demux_008_src0_channel;                                                // rsp_demux_008:src0_channel -> mux_pipeline_030:in_channel
	wire          rsp_demux_008_src0_startofpacket;                                          // rsp_demux_008:src0_startofpacket -> mux_pipeline_030:in_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                            // rsp_demux_008:src0_endofpacket -> mux_pipeline_030:in_endofpacket
	wire          mux_pipeline_030_source0_valid;                                            // mux_pipeline_030:out_valid -> rsp_mux:sink8_valid
	wire  [118:0] mux_pipeline_030_source0_data;                                             // mux_pipeline_030:out_data -> rsp_mux:sink8_data
	wire          mux_pipeline_030_source0_ready;                                            // rsp_mux:sink8_ready -> mux_pipeline_030:out_ready
	wire   [18:0] mux_pipeline_030_source0_channel;                                          // mux_pipeline_030:out_channel -> rsp_mux:sink8_channel
	wire          mux_pipeline_030_source0_startofpacket;                                    // mux_pipeline_030:out_startofpacket -> rsp_mux:sink8_startofpacket
	wire          mux_pipeline_030_source0_endofpacket;                                      // mux_pipeline_030:out_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_009_src0_valid;                                                  // rsp_demux_009:src0_valid -> mux_pipeline_031:in_valid
	wire  [118:0] rsp_demux_009_src0_data;                                                   // rsp_demux_009:src0_data -> mux_pipeline_031:in_data
	wire          rsp_demux_009_src0_ready;                                                  // mux_pipeline_031:in_ready -> rsp_demux_009:src0_ready
	wire   [18:0] rsp_demux_009_src0_channel;                                                // rsp_demux_009:src0_channel -> mux_pipeline_031:in_channel
	wire          rsp_demux_009_src0_startofpacket;                                          // rsp_demux_009:src0_startofpacket -> mux_pipeline_031:in_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                            // rsp_demux_009:src0_endofpacket -> mux_pipeline_031:in_endofpacket
	wire          mux_pipeline_031_source0_valid;                                            // mux_pipeline_031:out_valid -> rsp_mux:sink9_valid
	wire  [118:0] mux_pipeline_031_source0_data;                                             // mux_pipeline_031:out_data -> rsp_mux:sink9_data
	wire          mux_pipeline_031_source0_ready;                                            // rsp_mux:sink9_ready -> mux_pipeline_031:out_ready
	wire   [18:0] mux_pipeline_031_source0_channel;                                          // mux_pipeline_031:out_channel -> rsp_mux:sink9_channel
	wire          mux_pipeline_031_source0_startofpacket;                                    // mux_pipeline_031:out_startofpacket -> rsp_mux:sink9_startofpacket
	wire          mux_pipeline_031_source0_endofpacket;                                      // mux_pipeline_031:out_endofpacket -> rsp_mux:sink9_endofpacket
	wire          rsp_demux_010_src0_valid;                                                  // rsp_demux_010:src0_valid -> mux_pipeline_032:in_valid
	wire  [118:0] rsp_demux_010_src0_data;                                                   // rsp_demux_010:src0_data -> mux_pipeline_032:in_data
	wire          rsp_demux_010_src0_ready;                                                  // mux_pipeline_032:in_ready -> rsp_demux_010:src0_ready
	wire   [18:0] rsp_demux_010_src0_channel;                                                // rsp_demux_010:src0_channel -> mux_pipeline_032:in_channel
	wire          rsp_demux_010_src0_startofpacket;                                          // rsp_demux_010:src0_startofpacket -> mux_pipeline_032:in_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                            // rsp_demux_010:src0_endofpacket -> mux_pipeline_032:in_endofpacket
	wire          mux_pipeline_032_source0_valid;                                            // mux_pipeline_032:out_valid -> rsp_mux:sink10_valid
	wire  [118:0] mux_pipeline_032_source0_data;                                             // mux_pipeline_032:out_data -> rsp_mux:sink10_data
	wire          mux_pipeline_032_source0_ready;                                            // rsp_mux:sink10_ready -> mux_pipeline_032:out_ready
	wire   [18:0] mux_pipeline_032_source0_channel;                                          // mux_pipeline_032:out_channel -> rsp_mux:sink10_channel
	wire          mux_pipeline_032_source0_startofpacket;                                    // mux_pipeline_032:out_startofpacket -> rsp_mux:sink10_startofpacket
	wire          mux_pipeline_032_source0_endofpacket;                                      // mux_pipeline_032:out_endofpacket -> rsp_mux:sink10_endofpacket
	wire          rsp_demux_011_src0_valid;                                                  // rsp_demux_011:src0_valid -> mux_pipeline_033:in_valid
	wire  [118:0] rsp_demux_011_src0_data;                                                   // rsp_demux_011:src0_data -> mux_pipeline_033:in_data
	wire          rsp_demux_011_src0_ready;                                                  // mux_pipeline_033:in_ready -> rsp_demux_011:src0_ready
	wire   [18:0] rsp_demux_011_src0_channel;                                                // rsp_demux_011:src0_channel -> mux_pipeline_033:in_channel
	wire          rsp_demux_011_src0_startofpacket;                                          // rsp_demux_011:src0_startofpacket -> mux_pipeline_033:in_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                            // rsp_demux_011:src0_endofpacket -> mux_pipeline_033:in_endofpacket
	wire          mux_pipeline_033_source0_valid;                                            // mux_pipeline_033:out_valid -> rsp_mux:sink11_valid
	wire  [118:0] mux_pipeline_033_source0_data;                                             // mux_pipeline_033:out_data -> rsp_mux:sink11_data
	wire          mux_pipeline_033_source0_ready;                                            // rsp_mux:sink11_ready -> mux_pipeline_033:out_ready
	wire   [18:0] mux_pipeline_033_source0_channel;                                          // mux_pipeline_033:out_channel -> rsp_mux:sink11_channel
	wire          mux_pipeline_033_source0_startofpacket;                                    // mux_pipeline_033:out_startofpacket -> rsp_mux:sink11_startofpacket
	wire          mux_pipeline_033_source0_endofpacket;                                      // mux_pipeline_033:out_endofpacket -> rsp_mux:sink11_endofpacket
	wire          rsp_demux_012_src0_valid;                                                  // rsp_demux_012:src0_valid -> mux_pipeline_034:in_valid
	wire  [118:0] rsp_demux_012_src0_data;                                                   // rsp_demux_012:src0_data -> mux_pipeline_034:in_data
	wire          rsp_demux_012_src0_ready;                                                  // mux_pipeline_034:in_ready -> rsp_demux_012:src0_ready
	wire   [18:0] rsp_demux_012_src0_channel;                                                // rsp_demux_012:src0_channel -> mux_pipeline_034:in_channel
	wire          rsp_demux_012_src0_startofpacket;                                          // rsp_demux_012:src0_startofpacket -> mux_pipeline_034:in_startofpacket
	wire          rsp_demux_012_src0_endofpacket;                                            // rsp_demux_012:src0_endofpacket -> mux_pipeline_034:in_endofpacket
	wire          mux_pipeline_034_source0_valid;                                            // mux_pipeline_034:out_valid -> rsp_mux:sink12_valid
	wire  [118:0] mux_pipeline_034_source0_data;                                             // mux_pipeline_034:out_data -> rsp_mux:sink12_data
	wire          mux_pipeline_034_source0_ready;                                            // rsp_mux:sink12_ready -> mux_pipeline_034:out_ready
	wire   [18:0] mux_pipeline_034_source0_channel;                                          // mux_pipeline_034:out_channel -> rsp_mux:sink12_channel
	wire          mux_pipeline_034_source0_startofpacket;                                    // mux_pipeline_034:out_startofpacket -> rsp_mux:sink12_startofpacket
	wire          mux_pipeline_034_source0_endofpacket;                                      // mux_pipeline_034:out_endofpacket -> rsp_mux:sink12_endofpacket
	wire          rsp_demux_013_src0_valid;                                                  // rsp_demux_013:src0_valid -> mux_pipeline_035:in_valid
	wire  [118:0] rsp_demux_013_src0_data;                                                   // rsp_demux_013:src0_data -> mux_pipeline_035:in_data
	wire          rsp_demux_013_src0_ready;                                                  // mux_pipeline_035:in_ready -> rsp_demux_013:src0_ready
	wire   [18:0] rsp_demux_013_src0_channel;                                                // rsp_demux_013:src0_channel -> mux_pipeline_035:in_channel
	wire          rsp_demux_013_src0_startofpacket;                                          // rsp_demux_013:src0_startofpacket -> mux_pipeline_035:in_startofpacket
	wire          rsp_demux_013_src0_endofpacket;                                            // rsp_demux_013:src0_endofpacket -> mux_pipeline_035:in_endofpacket
	wire          mux_pipeline_035_source0_valid;                                            // mux_pipeline_035:out_valid -> rsp_mux:sink13_valid
	wire  [118:0] mux_pipeline_035_source0_data;                                             // mux_pipeline_035:out_data -> rsp_mux:sink13_data
	wire          mux_pipeline_035_source0_ready;                                            // rsp_mux:sink13_ready -> mux_pipeline_035:out_ready
	wire   [18:0] mux_pipeline_035_source0_channel;                                          // mux_pipeline_035:out_channel -> rsp_mux:sink13_channel
	wire          mux_pipeline_035_source0_startofpacket;                                    // mux_pipeline_035:out_startofpacket -> rsp_mux:sink13_startofpacket
	wire          mux_pipeline_035_source0_endofpacket;                                      // mux_pipeline_035:out_endofpacket -> rsp_mux:sink13_endofpacket
	wire          rsp_demux_014_src0_valid;                                                  // rsp_demux_014:src0_valid -> mux_pipeline_036:in_valid
	wire  [118:0] rsp_demux_014_src0_data;                                                   // rsp_demux_014:src0_data -> mux_pipeline_036:in_data
	wire          rsp_demux_014_src0_ready;                                                  // mux_pipeline_036:in_ready -> rsp_demux_014:src0_ready
	wire   [18:0] rsp_demux_014_src0_channel;                                                // rsp_demux_014:src0_channel -> mux_pipeline_036:in_channel
	wire          rsp_demux_014_src0_startofpacket;                                          // rsp_demux_014:src0_startofpacket -> mux_pipeline_036:in_startofpacket
	wire          rsp_demux_014_src0_endofpacket;                                            // rsp_demux_014:src0_endofpacket -> mux_pipeline_036:in_endofpacket
	wire          mux_pipeline_036_source0_valid;                                            // mux_pipeline_036:out_valid -> rsp_mux:sink14_valid
	wire  [118:0] mux_pipeline_036_source0_data;                                             // mux_pipeline_036:out_data -> rsp_mux:sink14_data
	wire          mux_pipeline_036_source0_ready;                                            // rsp_mux:sink14_ready -> mux_pipeline_036:out_ready
	wire   [18:0] mux_pipeline_036_source0_channel;                                          // mux_pipeline_036:out_channel -> rsp_mux:sink14_channel
	wire          mux_pipeline_036_source0_startofpacket;                                    // mux_pipeline_036:out_startofpacket -> rsp_mux:sink14_startofpacket
	wire          mux_pipeline_036_source0_endofpacket;                                      // mux_pipeline_036:out_endofpacket -> rsp_mux:sink14_endofpacket
	wire          rsp_demux_015_src0_valid;                                                  // rsp_demux_015:src0_valid -> mux_pipeline_037:in_valid
	wire  [118:0] rsp_demux_015_src0_data;                                                   // rsp_demux_015:src0_data -> mux_pipeline_037:in_data
	wire          rsp_demux_015_src0_ready;                                                  // mux_pipeline_037:in_ready -> rsp_demux_015:src0_ready
	wire   [18:0] rsp_demux_015_src0_channel;                                                // rsp_demux_015:src0_channel -> mux_pipeline_037:in_channel
	wire          rsp_demux_015_src0_startofpacket;                                          // rsp_demux_015:src0_startofpacket -> mux_pipeline_037:in_startofpacket
	wire          rsp_demux_015_src0_endofpacket;                                            // rsp_demux_015:src0_endofpacket -> mux_pipeline_037:in_endofpacket
	wire          mux_pipeline_037_source0_valid;                                            // mux_pipeline_037:out_valid -> rsp_mux:sink15_valid
	wire  [118:0] mux_pipeline_037_source0_data;                                             // mux_pipeline_037:out_data -> rsp_mux:sink15_data
	wire          mux_pipeline_037_source0_ready;                                            // rsp_mux:sink15_ready -> mux_pipeline_037:out_ready
	wire   [18:0] mux_pipeline_037_source0_channel;                                          // mux_pipeline_037:out_channel -> rsp_mux:sink15_channel
	wire          mux_pipeline_037_source0_startofpacket;                                    // mux_pipeline_037:out_startofpacket -> rsp_mux:sink15_startofpacket
	wire          mux_pipeline_037_source0_endofpacket;                                      // mux_pipeline_037:out_endofpacket -> rsp_mux:sink15_endofpacket
	wire          rsp_demux_016_src0_valid;                                                  // rsp_demux_016:src0_valid -> mux_pipeline_038:in_valid
	wire  [118:0] rsp_demux_016_src0_data;                                                   // rsp_demux_016:src0_data -> mux_pipeline_038:in_data
	wire          rsp_demux_016_src0_ready;                                                  // mux_pipeline_038:in_ready -> rsp_demux_016:src0_ready
	wire   [18:0] rsp_demux_016_src0_channel;                                                // rsp_demux_016:src0_channel -> mux_pipeline_038:in_channel
	wire          rsp_demux_016_src0_startofpacket;                                          // rsp_demux_016:src0_startofpacket -> mux_pipeline_038:in_startofpacket
	wire          rsp_demux_016_src0_endofpacket;                                            // rsp_demux_016:src0_endofpacket -> mux_pipeline_038:in_endofpacket
	wire          mux_pipeline_038_source0_valid;                                            // mux_pipeline_038:out_valid -> rsp_mux:sink16_valid
	wire  [118:0] mux_pipeline_038_source0_data;                                             // mux_pipeline_038:out_data -> rsp_mux:sink16_data
	wire          mux_pipeline_038_source0_ready;                                            // rsp_mux:sink16_ready -> mux_pipeline_038:out_ready
	wire   [18:0] mux_pipeline_038_source0_channel;                                          // mux_pipeline_038:out_channel -> rsp_mux:sink16_channel
	wire          mux_pipeline_038_source0_startofpacket;                                    // mux_pipeline_038:out_startofpacket -> rsp_mux:sink16_startofpacket
	wire          mux_pipeline_038_source0_endofpacket;                                      // mux_pipeline_038:out_endofpacket -> rsp_mux:sink16_endofpacket
	wire          crosser_003_out_valid;                                                     // crosser_003:out_valid -> mux_pipeline_039:in_valid
	wire  [118:0] crosser_003_out_data;                                                      // crosser_003:out_data -> mux_pipeline_039:in_data
	wire          crosser_003_out_ready;                                                     // mux_pipeline_039:in_ready -> crosser_003:out_ready
	wire   [18:0] crosser_003_out_channel;                                                   // crosser_003:out_channel -> mux_pipeline_039:in_channel
	wire          crosser_003_out_startofpacket;                                             // crosser_003:out_startofpacket -> mux_pipeline_039:in_startofpacket
	wire          crosser_003_out_endofpacket;                                               // crosser_003:out_endofpacket -> mux_pipeline_039:in_endofpacket
	wire          mux_pipeline_039_source0_valid;                                            // mux_pipeline_039:out_valid -> rsp_mux:sink17_valid
	wire  [118:0] mux_pipeline_039_source0_data;                                             // mux_pipeline_039:out_data -> rsp_mux:sink17_data
	wire          mux_pipeline_039_source0_ready;                                            // rsp_mux:sink17_ready -> mux_pipeline_039:out_ready
	wire   [18:0] mux_pipeline_039_source0_channel;                                          // mux_pipeline_039:out_channel -> rsp_mux:sink17_channel
	wire          mux_pipeline_039_source0_startofpacket;                                    // mux_pipeline_039:out_startofpacket -> rsp_mux:sink17_startofpacket
	wire          mux_pipeline_039_source0_endofpacket;                                      // mux_pipeline_039:out_endofpacket -> rsp_mux:sink17_endofpacket
	wire          rsp_demux_018_src0_valid;                                                  // rsp_demux_018:src0_valid -> mux_pipeline_040:in_valid
	wire  [118:0] rsp_demux_018_src0_data;                                                   // rsp_demux_018:src0_data -> mux_pipeline_040:in_data
	wire          rsp_demux_018_src0_ready;                                                  // mux_pipeline_040:in_ready -> rsp_demux_018:src0_ready
	wire   [18:0] rsp_demux_018_src0_channel;                                                // rsp_demux_018:src0_channel -> mux_pipeline_040:in_channel
	wire          rsp_demux_018_src0_startofpacket;                                          // rsp_demux_018:src0_startofpacket -> mux_pipeline_040:in_startofpacket
	wire          rsp_demux_018_src0_endofpacket;                                            // rsp_demux_018:src0_endofpacket -> mux_pipeline_040:in_endofpacket
	wire          mux_pipeline_040_source0_valid;                                            // mux_pipeline_040:out_valid -> rsp_mux:sink18_valid
	wire  [118:0] mux_pipeline_040_source0_data;                                             // mux_pipeline_040:out_data -> rsp_mux:sink18_data
	wire          mux_pipeline_040_source0_ready;                                            // rsp_mux:sink18_ready -> mux_pipeline_040:out_ready
	wire   [18:0] mux_pipeline_040_source0_channel;                                          // mux_pipeline_040:out_channel -> rsp_mux:sink18_channel
	wire          mux_pipeline_040_source0_startofpacket;                                    // mux_pipeline_040:out_startofpacket -> rsp_mux:sink18_startofpacket
	wire          mux_pipeline_040_source0_endofpacket;                                      // mux_pipeline_040:out_endofpacket -> rsp_mux:sink18_endofpacket
	wire          rsp_demux_006_src1_valid;                                                  // rsp_demux_006:src1_valid -> mux_pipeline_041:in_valid
	wire  [118:0] rsp_demux_006_src1_data;                                                   // rsp_demux_006:src1_data -> mux_pipeline_041:in_data
	wire          rsp_demux_006_src1_ready;                                                  // mux_pipeline_041:in_ready -> rsp_demux_006:src1_ready
	wire   [18:0] rsp_demux_006_src1_channel;                                                // rsp_demux_006:src1_channel -> mux_pipeline_041:in_channel
	wire          rsp_demux_006_src1_startofpacket;                                          // rsp_demux_006:src1_startofpacket -> mux_pipeline_041:in_startofpacket
	wire          rsp_demux_006_src1_endofpacket;                                            // rsp_demux_006:src1_endofpacket -> mux_pipeline_041:in_endofpacket
	wire          mux_pipeline_041_source0_valid;                                            // mux_pipeline_041:out_valid -> rsp_mux_001:sink0_valid
	wire  [118:0] mux_pipeline_041_source0_data;                                             // mux_pipeline_041:out_data -> rsp_mux_001:sink0_data
	wire          mux_pipeline_041_source0_ready;                                            // rsp_mux_001:sink0_ready -> mux_pipeline_041:out_ready
	wire   [18:0] mux_pipeline_041_source0_channel;                                          // mux_pipeline_041:out_channel -> rsp_mux_001:sink0_channel
	wire          mux_pipeline_041_source0_startofpacket;                                    // mux_pipeline_041:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          mux_pipeline_041_source0_endofpacket;                                      // mux_pipeline_041:out_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_018_src1_valid;                                                  // rsp_demux_018:src1_valid -> mux_pipeline_042:in_valid
	wire  [118:0] rsp_demux_018_src1_data;                                                   // rsp_demux_018:src1_data -> mux_pipeline_042:in_data
	wire          rsp_demux_018_src1_ready;                                                  // mux_pipeline_042:in_ready -> rsp_demux_018:src1_ready
	wire   [18:0] rsp_demux_018_src1_channel;                                                // rsp_demux_018:src1_channel -> mux_pipeline_042:in_channel
	wire          rsp_demux_018_src1_startofpacket;                                          // rsp_demux_018:src1_startofpacket -> mux_pipeline_042:in_startofpacket
	wire          rsp_demux_018_src1_endofpacket;                                            // rsp_demux_018:src1_endofpacket -> mux_pipeline_042:in_endofpacket
	wire          mux_pipeline_042_source0_valid;                                            // mux_pipeline_042:out_valid -> rsp_mux_001:sink1_valid
	wire  [118:0] mux_pipeline_042_source0_data;                                             // mux_pipeline_042:out_data -> rsp_mux_001:sink1_data
	wire          mux_pipeline_042_source0_ready;                                            // rsp_mux_001:sink1_ready -> mux_pipeline_042:out_ready
	wire   [18:0] mux_pipeline_042_source0_channel;                                          // mux_pipeline_042:out_channel -> rsp_mux_001:sink1_channel
	wire          mux_pipeline_042_source0_startofpacket;                                    // mux_pipeline_042:out_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          mux_pipeline_042_source0_endofpacket;                                      // mux_pipeline_042:out_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          crosser_002_out_valid;                                                     // crosser_002:out_valid -> mux_pipeline_043:in_valid
	wire  [118:0] crosser_002_out_data;                                                      // crosser_002:out_data -> mux_pipeline_043:in_data
	wire          crosser_002_out_ready;                                                     // mux_pipeline_043:in_ready -> crosser_002:out_ready
	wire   [18:0] crosser_002_out_channel;                                                   // crosser_002:out_channel -> mux_pipeline_043:in_channel
	wire          crosser_002_out_startofpacket;                                             // crosser_002:out_startofpacket -> mux_pipeline_043:in_startofpacket
	wire          crosser_002_out_endofpacket;                                               // crosser_002:out_endofpacket -> mux_pipeline_043:in_endofpacket
	wire          mux_pipeline_043_source0_valid;                                            // mux_pipeline_043:out_valid -> rsp_mux_002:sink0_valid
	wire  [118:0] mux_pipeline_043_source0_data;                                             // mux_pipeline_043:out_data -> rsp_mux_002:sink0_data
	wire          mux_pipeline_043_source0_ready;                                            // rsp_mux_002:sink0_ready -> mux_pipeline_043:out_ready
	wire   [18:0] mux_pipeline_043_source0_channel;                                          // mux_pipeline_043:out_channel -> rsp_mux_002:sink0_channel
	wire          mux_pipeline_043_source0_startofpacket;                                    // mux_pipeline_043:out_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          mux_pipeline_043_source0_endofpacket;                                      // mux_pipeline_043:out_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          sd_cont_0_master_agent_cp_valid;                                           // sd_cont_0_master_agent:cp_valid -> pipeline_stage:in_valid
	wire  [118:0] sd_cont_0_master_agent_cp_data;                                            // sd_cont_0_master_agent:cp_data -> pipeline_stage:in_data
	wire          sd_cont_0_master_agent_cp_ready;                                           // pipeline_stage:in_ready -> sd_cont_0_master_agent:cp_ready
	wire          sd_cont_0_master_agent_cp_startofpacket;                                   // sd_cont_0_master_agent:cp_startofpacket -> pipeline_stage:in_startofpacket
	wire          sd_cont_0_master_agent_cp_endofpacket;                                     // sd_cont_0_master_agent:cp_endofpacket -> pipeline_stage:in_endofpacket
	wire          pipeline_stage_source0_valid;                                              // pipeline_stage:out_valid -> router_002:sink_valid
	wire  [118:0] pipeline_stage_source0_data;                                               // pipeline_stage:out_data -> router_002:sink_data
	wire          pipeline_stage_source0_ready;                                              // router_002:sink_ready -> pipeline_stage:out_ready
	wire          pipeline_stage_source0_startofpacket;                                      // pipeline_stage:out_startofpacket -> router_002:sink_startofpacket
	wire          pipeline_stage_source0_endofpacket;                                        // pipeline_stage:out_endofpacket -> router_002:sink_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_valid;                    // jtag_uart_avalon_jtag_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_data;                     // jtag_uart_avalon_jtag_slave_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_ready;                    // avalon_st_adapter:in_0_ready -> jtag_uart_avalon_jtag_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                             // avalon_st_adapter:out_0_valid -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                              // avalon_st_adapter:out_0_data -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                             // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                             // avalon_st_adapter:out_0_error -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          lpddr2_avl_0_agent_rdata_fifo_out_valid;                                   // lpddr2_avl_0_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] lpddr2_avl_0_agent_rdata_fifo_out_data;                                    // lpddr2_avl_0_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          lpddr2_avl_0_agent_rdata_fifo_out_ready;                                   // avalon_st_adapter_001:in_0_ready -> lpddr2_avl_0_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                         // avalon_st_adapter_001:out_0_valid -> lpddr2_avl_0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                          // avalon_st_adapter_001:out_0_data -> lpddr2_avl_0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                         // lpddr2_avl_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                         // avalon_st_adapter_001:out_0_error -> lpddr2_avl_0_agent:rdata_fifo_sink_error
	wire          sysid_control_slave_agent_rdata_fifo_out_valid;                            // sysid_control_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] sysid_control_slave_agent_rdata_fifo_out_data;                             // sysid_control_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire          sysid_control_slave_agent_rdata_fifo_out_ready;                            // avalon_st_adapter_002:in_0_ready -> sysid_control_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_002_out_0_valid;                                         // avalon_st_adapter_002:out_0_valid -> sysid_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                          // avalon_st_adapter_002:out_0_data -> sysid_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                         // sysid_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                         // avalon_st_adapter_002:out_0_error -> sysid_control_slave_agent:rdata_fifo_sink_error
	wire          video_dma_csr_agent_rdata_fifo_out_valid;                                  // video_dma_csr_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] video_dma_csr_agent_rdata_fifo_out_data;                                   // video_dma_csr_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire          video_dma_csr_agent_rdata_fifo_out_ready;                                  // avalon_st_adapter_003:in_0_ready -> video_dma_csr_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_003_out_0_valid;                                         // avalon_st_adapter_003:out_0_valid -> video_dma_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                          // avalon_st_adapter_003:out_0_data -> video_dma_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                         // video_dma_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                         // avalon_st_adapter_003:out_0_error -> video_dma_csr_agent:rdata_fifo_sink_error
	wire          to_idct_hwacel_csr_agent_rdata_fifo_out_valid;                             // to_idct_hwacel_csr_agent_rdata_fifo:out_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] to_idct_hwacel_csr_agent_rdata_fifo_out_data;                              // to_idct_hwacel_csr_agent_rdata_fifo:out_data -> avalon_st_adapter_004:in_0_data
	wire          to_idct_hwacel_csr_agent_rdata_fifo_out_ready;                             // avalon_st_adapter_004:in_0_ready -> to_idct_hwacel_csr_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_004_out_0_valid;                                         // avalon_st_adapter_004:out_0_valid -> to_idct_hwacel_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                          // avalon_st_adapter_004:out_0_data -> to_idct_hwacel_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                         // to_idct_hwacel_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                         // avalon_st_adapter_004:out_0_error -> to_idct_hwacel_csr_agent:rdata_fifo_sink_error
	wire          from_idct_hwacel_csr_agent_rdata_fifo_out_valid;                           // from_idct_hwacel_csr_agent_rdata_fifo:out_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] from_idct_hwacel_csr_agent_rdata_fifo_out_data;                            // from_idct_hwacel_csr_agent_rdata_fifo:out_data -> avalon_st_adapter_005:in_0_data
	wire          from_idct_hwacel_csr_agent_rdata_fifo_out_ready;                           // avalon_st_adapter_005:in_0_ready -> from_idct_hwacel_csr_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_005_out_0_valid;                                         // avalon_st_adapter_005:out_0_valid -> from_idct_hwacel_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                          // avalon_st_adapter_005:out_0_data -> from_idct_hwacel_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                         // from_idct_hwacel_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                         // avalon_st_adapter_005:out_0_error -> from_idct_hwacel_csr_agent:rdata_fifo_sink_error
	wire          cpu_debug_mem_slave_agent_rdata_fifo_out_valid;                            // cpu_debug_mem_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] cpu_debug_mem_slave_agent_rdata_fifo_out_data;                             // cpu_debug_mem_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_006:in_0_data
	wire          cpu_debug_mem_slave_agent_rdata_fifo_out_ready;                            // avalon_st_adapter_006:in_0_ready -> cpu_debug_mem_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_006_out_0_valid;                                         // avalon_st_adapter_006:out_0_valid -> cpu_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                          // avalon_st_adapter_006:out_0_data -> cpu_debug_mem_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                         // cpu_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                         // avalon_st_adapter_006:out_0_error -> cpu_debug_mem_slave_agent:rdata_fifo_sink_error
	wire          video_dma_descriptor_slave_agent_rdata_fifo_out_valid;                     // video_dma_descriptor_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_007:in_0_valid
	wire  [129:0] video_dma_descriptor_slave_agent_rdata_fifo_out_data;                      // video_dma_descriptor_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_007:in_0_data
	wire          video_dma_descriptor_slave_agent_rdata_fifo_out_ready;                     // avalon_st_adapter_007:in_0_ready -> video_dma_descriptor_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_007_out_0_valid;                                         // avalon_st_adapter_007:out_0_valid -> video_dma_descriptor_slave_agent:rdata_fifo_sink_valid
	wire  [129:0] avalon_st_adapter_007_out_0_data;                                          // avalon_st_adapter_007:out_0_data -> video_dma_descriptor_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                         // video_dma_descriptor_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                         // avalon_st_adapter_007:out_0_error -> video_dma_descriptor_slave_agent:rdata_fifo_sink_error
	wire          to_idct_hwacel_descriptor_slave_agent_rdata_fifo_out_valid;                // to_idct_hwacel_descriptor_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_008:in_0_valid
	wire  [129:0] to_idct_hwacel_descriptor_slave_agent_rdata_fifo_out_data;                 // to_idct_hwacel_descriptor_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_008:in_0_data
	wire          to_idct_hwacel_descriptor_slave_agent_rdata_fifo_out_ready;                // avalon_st_adapter_008:in_0_ready -> to_idct_hwacel_descriptor_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_008_out_0_valid;                                         // avalon_st_adapter_008:out_0_valid -> to_idct_hwacel_descriptor_slave_agent:rdata_fifo_sink_valid
	wire  [129:0] avalon_st_adapter_008_out_0_data;                                          // avalon_st_adapter_008:out_0_data -> to_idct_hwacel_descriptor_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                         // to_idct_hwacel_descriptor_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                         // avalon_st_adapter_008:out_0_error -> to_idct_hwacel_descriptor_slave_agent:rdata_fifo_sink_error
	wire          from_idct_hwacel_descriptor_slave_agent_rdata_fifo_out_valid;              // from_idct_hwacel_descriptor_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_009:in_0_valid
	wire  [129:0] from_idct_hwacel_descriptor_slave_agent_rdata_fifo_out_data;               // from_idct_hwacel_descriptor_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_009:in_0_data
	wire          from_idct_hwacel_descriptor_slave_agent_rdata_fifo_out_ready;              // avalon_st_adapter_009:in_0_ready -> from_idct_hwacel_descriptor_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_009_out_0_valid;                                         // avalon_st_adapter_009:out_0_valid -> from_idct_hwacel_descriptor_slave_agent:rdata_fifo_sink_valid
	wire  [129:0] avalon_st_adapter_009_out_0_data;                                          // avalon_st_adapter_009:out_0_data -> from_idct_hwacel_descriptor_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                         // from_idct_hwacel_descriptor_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                         // avalon_st_adapter_009:out_0_error -> from_idct_hwacel_descriptor_slave_agent:rdata_fifo_sink_error
	wire          timer_0_s1_agent_rdata_fifo_out_valid;                                     // timer_0_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_010:in_0_valid
	wire   [33:0] timer_0_s1_agent_rdata_fifo_out_data;                                      // timer_0_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_010:in_0_data
	wire          timer_0_s1_agent_rdata_fifo_out_ready;                                     // avalon_st_adapter_010:in_0_ready -> timer_0_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_010_out_0_valid;                                         // avalon_st_adapter_010:out_0_valid -> timer_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_010_out_0_data;                                          // avalon_st_adapter_010:out_0_data -> timer_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                         // timer_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                         // avalon_st_adapter_010:out_0_error -> timer_0_s1_agent:rdata_fifo_sink_error
	wire          key_s1_agent_rdata_fifo_out_valid;                                         // key_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_011:in_0_valid
	wire   [33:0] key_s1_agent_rdata_fifo_out_data;                                          // key_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_011:in_0_data
	wire          key_s1_agent_rdata_fifo_out_ready;                                         // avalon_st_adapter_011:in_0_ready -> key_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_011_out_0_valid;                                         // avalon_st_adapter_011:out_0_valid -> key_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_011_out_0_data;                                          // avalon_st_adapter_011:out_0_data -> key_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_011_out_0_ready;                                         // key_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire    [0:0] avalon_st_adapter_011_out_0_error;                                         // avalon_st_adapter_011:out_0_error -> key_s1_agent:rdata_fifo_sink_error
	wire          timer_1_s1_agent_rdata_fifo_out_valid;                                     // timer_1_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_012:in_0_valid
	wire   [33:0] timer_1_s1_agent_rdata_fifo_out_data;                                      // timer_1_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_012:in_0_data
	wire          timer_1_s1_agent_rdata_fifo_out_ready;                                     // avalon_st_adapter_012:in_0_ready -> timer_1_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_012_out_0_valid;                                         // avalon_st_adapter_012:out_0_valid -> timer_1_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_012_out_0_data;                                          // avalon_st_adapter_012:out_0_data -> timer_1_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_012_out_0_ready;                                         // timer_1_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_012:out_0_ready
	wire    [0:0] avalon_st_adapter_012_out_0_error;                                         // avalon_st_adapter_012:out_0_error -> timer_1_s1_agent:rdata_fifo_sink_error
	wire          ledg_s1_agent_rdata_fifo_out_valid;                                        // ledg_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_013:in_0_valid
	wire   [33:0] ledg_s1_agent_rdata_fifo_out_data;                                         // ledg_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_013:in_0_data
	wire          ledg_s1_agent_rdata_fifo_out_ready;                                        // avalon_st_adapter_013:in_0_ready -> ledg_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_013_out_0_valid;                                         // avalon_st_adapter_013:out_0_valid -> ledg_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_013_out_0_data;                                          // avalon_st_adapter_013:out_0_data -> ledg_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_013_out_0_ready;                                         // ledg_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_013:out_0_ready
	wire    [0:0] avalon_st_adapter_013_out_0_error;                                         // avalon_st_adapter_013:out_0_error -> ledg_s1_agent:rdata_fifo_sink_error
	wire          ledr_s1_agent_rdata_fifo_out_valid;                                        // ledr_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_014:in_0_valid
	wire   [33:0] ledr_s1_agent_rdata_fifo_out_data;                                         // ledr_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_014:in_0_data
	wire          ledr_s1_agent_rdata_fifo_out_ready;                                        // avalon_st_adapter_014:in_0_ready -> ledr_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_014_out_0_valid;                                         // avalon_st_adapter_014:out_0_valid -> ledr_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_014_out_0_data;                                          // avalon_st_adapter_014:out_0_data -> ledr_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_014_out_0_ready;                                         // ledr_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_014:out_0_ready
	wire    [0:0] avalon_st_adapter_014_out_0_error;                                         // avalon_st_adapter_014:out_0_error -> ledr_s1_agent:rdata_fifo_sink_error
	wire          i2c_scl_s1_agent_rdata_fifo_out_valid;                                     // i2c_scl_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_015:in_0_valid
	wire   [33:0] i2c_scl_s1_agent_rdata_fifo_out_data;                                      // i2c_scl_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_015:in_0_data
	wire          i2c_scl_s1_agent_rdata_fifo_out_ready;                                     // avalon_st_adapter_015:in_0_ready -> i2c_scl_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_015_out_0_valid;                                         // avalon_st_adapter_015:out_0_valid -> i2c_scl_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_015_out_0_data;                                          // avalon_st_adapter_015:out_0_data -> i2c_scl_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_015_out_0_ready;                                         // i2c_scl_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_015:out_0_ready
	wire    [0:0] avalon_st_adapter_015_out_0_error;                                         // avalon_st_adapter_015:out_0_error -> i2c_scl_s1_agent:rdata_fifo_sink_error
	wire          i2c_sda_s1_agent_rdata_fifo_out_valid;                                     // i2c_sda_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_016:in_0_valid
	wire   [33:0] i2c_sda_s1_agent_rdata_fifo_out_data;                                      // i2c_sda_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_016:in_0_data
	wire          i2c_sda_s1_agent_rdata_fifo_out_ready;                                     // avalon_st_adapter_016:in_0_ready -> i2c_sda_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_016_out_0_valid;                                         // avalon_st_adapter_016:out_0_valid -> i2c_sda_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_016_out_0_data;                                          // avalon_st_adapter_016:out_0_data -> i2c_sda_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_016_out_0_ready;                                         // i2c_sda_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_016:out_0_ready
	wire    [0:0] avalon_st_adapter_016_out_0_error;                                         // avalon_st_adapter_016:out_0_error -> i2c_sda_s1_agent:rdata_fifo_sink_error
	wire          sd_cont_0_slave_agent_rdata_fifo_out_valid;                                // sd_cont_0_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_017:in_0_valid
	wire   [33:0] sd_cont_0_slave_agent_rdata_fifo_out_data;                                 // sd_cont_0_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_017:in_0_data
	wire          sd_cont_0_slave_agent_rdata_fifo_out_ready;                                // avalon_st_adapter_017:in_0_ready -> sd_cont_0_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_017_out_0_valid;                                         // avalon_st_adapter_017:out_0_valid -> sd_cont_0_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_017_out_0_data;                                          // avalon_st_adapter_017:out_0_data -> sd_cont_0_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_017_out_0_ready;                                         // sd_cont_0_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_017:out_0_ready
	wire    [0:0] avalon_st_adapter_017_out_0_error;                                         // avalon_st_adapter_017:out_0_error -> sd_cont_0_slave_agent:rdata_fifo_sink_error
	wire          sram_uas_agent_rdata_fifo_out_valid;                                       // sram_uas_agent_rdata_fifo:out_valid -> avalon_st_adapter_018:in_0_valid
	wire   [17:0] sram_uas_agent_rdata_fifo_out_data;                                        // sram_uas_agent_rdata_fifo:out_data -> avalon_st_adapter_018:in_0_data
	wire          sram_uas_agent_rdata_fifo_out_ready;                                       // avalon_st_adapter_018:in_0_ready -> sram_uas_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_018_out_0_valid;                                         // avalon_st_adapter_018:out_0_valid -> sram_uas_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_018_out_0_data;                                          // avalon_st_adapter_018:out_0_data -> sram_uas_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_018_out_0_ready;                                         // sram_uas_agent:rdata_fifo_sink_ready -> avalon_st_adapter_018:out_0_ready
	wire    [0:0] avalon_st_adapter_018_out_0_error;                                         // avalon_st_adapter_018:out_0_error -> sram_uas_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (30),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (4),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (6),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cpu_data_master_translator (
		.clk                    (clk_125_clk_clk),                                                    //                       clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (cpu_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cpu_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cpu_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cpu_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cpu_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cpu_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cpu_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cpu_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cpu_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cpu_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cpu_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (cpu_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (cpu_data_master_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (cpu_data_master_burstcount),                                         //                          .burstcount
		.av_byteenable          (cpu_data_master_byteenable),                                         //                          .byteenable
		.av_read                (cpu_data_master_read),                                               //                          .read
		.av_readdata            (cpu_data_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (cpu_data_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (cpu_data_master_write),                                              //                          .write
		.av_writedata           (cpu_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (cpu_data_master_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                               //               (terminated)
		.av_begintransfer       (1'b0),                                                               //               (terminated)
		.av_chipselect          (1'b0),                                                               //               (terminated)
		.av_lock                (1'b0),                                                               //               (terminated)
		.uav_clken              (),                                                                   //               (terminated)
		.av_clken               (1'b1),                                                               //               (terminated)
		.uav_response           (2'b00),                                                              //               (terminated)
		.av_response            (),                                                                   //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                               //               (terminated)
		.av_writeresponsevalid  ()                                                                    //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (30),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cpu_instruction_master_translator (
		.clk                    (clk_125_clk_clk),                                                           //                       clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (cpu_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cpu_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cpu_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cpu_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cpu_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cpu_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cpu_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cpu_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cpu_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cpu_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (cpu_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (cpu_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (cpu_instruction_master_read),                                               //                          .read
		.av_readdata            (cpu_instruction_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (cpu_instruction_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                      //               (terminated)
		.av_byteenable          (4'b1111),                                                                   //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                      //               (terminated)
		.av_begintransfer       (1'b0),                                                                      //               (terminated)
		.av_chipselect          (1'b0),                                                                      //               (terminated)
		.av_write               (1'b0),                                                                      //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                      //               (terminated)
		.av_lock                (1'b0),                                                                      //               (terminated)
		.av_debugaccess         (1'b0),                                                                      //               (terminated)
		.uav_clken              (),                                                                          //               (terminated)
		.av_clken               (1'b1),                                                                      //               (terminated)
		.uav_response           (2'b00),                                                                     //               (terminated)
		.av_response            (),                                                                          //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                      //               (terminated)
		.av_writeresponsevalid  ()                                                                           //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) sd_cont_0_master_translator (
		.clk                    (clk_50_out_clk_clk),                                                  //                       clk.clk
		.reset                  (sd_cont_0_reset_reset_bridge_in_reset_reset),                         //                     reset.reset
		.uav_address            (sd_cont_0_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (sd_cont_0_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (sd_cont_0_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (sd_cont_0_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (sd_cont_0_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (sd_cont_0_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (sd_cont_0_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (sd_cont_0_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (sd_cont_0_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (sd_cont_0_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (sd_cont_0_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (sd_cont_0_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (sd_cont_0_master_waitrequest),                                        //                          .waitrequest
		.av_read                (sd_cont_0_master_read),                                               //                          .read
		.av_readdata            (sd_cont_0_master_readdata),                                           //                          .readdata
		.av_write               (sd_cont_0_master_write),                                              //                          .write
		.av_writedata           (sd_cont_0_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                //               (terminated)
		.av_byteenable          (4'b1111),                                                             //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                //               (terminated)
		.av_begintransfer       (1'b0),                                                                //               (terminated)
		.av_chipselect          (1'b0),                                                                //               (terminated)
		.av_readdatavalid       (),                                                                    //               (terminated)
		.av_lock                (1'b0),                                                                //               (terminated)
		.av_debugaccess         (1'b0),                                                                //               (terminated)
		.uav_clken              (),                                                                    //               (terminated)
		.av_clken               (1'b1),                                                                //               (terminated)
		.uav_response           (2'b00),                                                               //               (terminated)
		.av_response            (),                                                                    //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                //               (terminated)
		.av_writeresponsevalid  ()                                                                     //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_avalon_jtag_slave_translator (
		.clk                    (clk_125_clk_clk),                                    //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),              //                    reset.reset
		.uav_address            (jtag_uart_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtag_uart_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtag_uart_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtag_uart_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtag_uart_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtag_uart_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (jtag_uart_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (jtag_uart_avalon_jtag_slave_write),                  //                         .write
		.av_read                (jtag_uart_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (jtag_uart_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (jtag_uart_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (jtag_uart_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (jtag_uart_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (27),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (8),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (10),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) lpddr2_avl_0_translator (
		.clk                    (clk_125_clk_clk),                         //                      clk.clk
		.reset                  (sysid_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (lpddr2_avl_0_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (lpddr2_avl_0_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (lpddr2_avl_0_agent_m0_read),              //                         .read
		.uav_write              (lpddr2_avl_0_agent_m0_write),             //                         .write
		.uav_waitrequest        (lpddr2_avl_0_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (lpddr2_avl_0_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (lpddr2_avl_0_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (lpddr2_avl_0_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (lpddr2_avl_0_agent_m0_writedata),         //                         .writedata
		.uav_lock               (lpddr2_avl_0_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (lpddr2_avl_0_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (lpddr2_avl_0_address),                    //      avalon_anti_slave_0.address
		.av_write               (lpddr2_avl_0_write),                      //                         .write
		.av_read                (lpddr2_avl_0_read),                       //                         .read
		.av_readdata            (lpddr2_avl_0_readdata),                   //                         .readdata
		.av_writedata           (lpddr2_avl_0_writedata),                  //                         .writedata
		.av_beginbursttransfer  (lpddr2_avl_0_beginbursttransfer),         //                         .beginbursttransfer
		.av_burstcount          (lpddr2_avl_0_burstcount),                 //                         .burstcount
		.av_byteenable          (lpddr2_avl_0_byteenable),                 //                         .byteenable
		.av_readdatavalid       (lpddr2_avl_0_readdatavalid),              //                         .readdatavalid
		.av_waitrequest         (lpddr2_avl_0_waitrequest),                //                         .waitrequest
		.av_begintransfer       (),                                        //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_chipselect          (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_control_slave_translator (
		.clk                    (clk_125_clk_clk),                            //                      clk.clk
		.reset                  (sysid_reset_reset_bridge_in_reset_reset),    //                    reset.reset
		.uav_address            (sysid_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (sysid_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (sysid_control_slave_agent_m0_read),          //                         .read
		.uav_write              (sysid_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (sysid_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (sysid_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (sysid_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (sysid_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (sysid_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (sysid_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (sysid_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (sysid_control_slave_address),                //      avalon_anti_slave_0.address
		.av_readdata            (sysid_control_slave_readdata),               //                         .readdata
		.av_write               (),                                           //              (terminated)
		.av_read                (),                                           //              (terminated)
		.av_writedata           (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_chipselect          (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) video_dma_csr_translator (
		.clk                    (clk_125_clk_clk),                         //                      clk.clk
		.reset                  (sysid_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (video_dma_csr_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (video_dma_csr_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (video_dma_csr_agent_m0_read),             //                         .read
		.uav_write              (video_dma_csr_agent_m0_write),            //                         .write
		.uav_waitrequest        (video_dma_csr_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (video_dma_csr_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (video_dma_csr_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (video_dma_csr_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (video_dma_csr_agent_m0_writedata),        //                         .writedata
		.uav_lock               (video_dma_csr_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (video_dma_csr_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (video_dma_csr_address),                   //      avalon_anti_slave_0.address
		.av_write               (video_dma_csr_write),                     //                         .write
		.av_read                (video_dma_csr_read),                      //                         .read
		.av_readdata            (video_dma_csr_readdata),                  //                         .readdata
		.av_writedata           (video_dma_csr_writedata),                 //                         .writedata
		.av_byteenable          (video_dma_csr_byteenable),                //                         .byteenable
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_chipselect          (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) to_idct_hwacel_csr_translator (
		.clk                    (clk_125_clk_clk),                           //                      clk.clk
		.reset                  (sysid_reset_reset_bridge_in_reset_reset),   //                    reset.reset
		.uav_address            (to_idct_hwacel_csr_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (to_idct_hwacel_csr_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (to_idct_hwacel_csr_agent_m0_read),          //                         .read
		.uav_write              (to_idct_hwacel_csr_agent_m0_write),         //                         .write
		.uav_waitrequest        (to_idct_hwacel_csr_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (to_idct_hwacel_csr_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (to_idct_hwacel_csr_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (to_idct_hwacel_csr_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (to_idct_hwacel_csr_agent_m0_writedata),     //                         .writedata
		.uav_lock               (to_idct_hwacel_csr_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (to_idct_hwacel_csr_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (to_idct_hwacel_csr_address),                //      avalon_anti_slave_0.address
		.av_write               (to_idct_hwacel_csr_write),                  //                         .write
		.av_read                (to_idct_hwacel_csr_read),                   //                         .read
		.av_readdata            (to_idct_hwacel_csr_readdata),               //                         .readdata
		.av_writedata           (to_idct_hwacel_csr_writedata),              //                         .writedata
		.av_byteenable          (to_idct_hwacel_csr_byteenable),             //                         .byteenable
		.av_begintransfer       (),                                          //              (terminated)
		.av_beginbursttransfer  (),                                          //              (terminated)
		.av_burstcount          (),                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                      //              (terminated)
		.av_waitrequest         (1'b0),                                      //              (terminated)
		.av_writebyteenable     (),                                          //              (terminated)
		.av_lock                (),                                          //              (terminated)
		.av_chipselect          (),                                          //              (terminated)
		.av_clken               (),                                          //              (terminated)
		.uav_clken              (1'b0),                                      //              (terminated)
		.av_debugaccess         (),                                          //              (terminated)
		.av_outputenable        (),                                          //              (terminated)
		.uav_response           (),                                          //              (terminated)
		.av_response            (2'b00),                                     //              (terminated)
		.uav_writeresponsevalid (),                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) from_idct_hwacel_csr_translator (
		.clk                    (clk_125_clk_clk),                             //                      clk.clk
		.reset                  (sysid_reset_reset_bridge_in_reset_reset),     //                    reset.reset
		.uav_address            (from_idct_hwacel_csr_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (from_idct_hwacel_csr_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (from_idct_hwacel_csr_agent_m0_read),          //                         .read
		.uav_write              (from_idct_hwacel_csr_agent_m0_write),         //                         .write
		.uav_waitrequest        (from_idct_hwacel_csr_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (from_idct_hwacel_csr_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (from_idct_hwacel_csr_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (from_idct_hwacel_csr_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (from_idct_hwacel_csr_agent_m0_writedata),     //                         .writedata
		.uav_lock               (from_idct_hwacel_csr_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (from_idct_hwacel_csr_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (from_idct_hwacel_csr_address),                //      avalon_anti_slave_0.address
		.av_write               (from_idct_hwacel_csr_write),                  //                         .write
		.av_read                (from_idct_hwacel_csr_read),                   //                         .read
		.av_readdata            (from_idct_hwacel_csr_readdata),               //                         .readdata
		.av_writedata           (from_idct_hwacel_csr_writedata),              //                         .writedata
		.av_byteenable          (from_idct_hwacel_csr_byteenable),             //                         .byteenable
		.av_begintransfer       (),                                            //              (terminated)
		.av_beginbursttransfer  (),                                            //              (terminated)
		.av_burstcount          (),                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                        //              (terminated)
		.av_waitrequest         (1'b0),                                        //              (terminated)
		.av_writebyteenable     (),                                            //              (terminated)
		.av_lock                (),                                            //              (terminated)
		.av_chipselect          (),                                            //              (terminated)
		.av_clken               (),                                            //              (terminated)
		.uav_clken              (1'b0),                                        //              (terminated)
		.av_debugaccess         (),                                            //              (terminated)
		.av_outputenable        (),                                            //              (terminated)
		.uav_response           (),                                            //              (terminated)
		.av_response            (2'b00),                                       //              (terminated)
		.uav_writeresponsevalid (),                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) cpu_debug_mem_slave_translator (
		.clk                    (clk_125_clk_clk),                            //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (cpu_debug_mem_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (cpu_debug_mem_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (cpu_debug_mem_slave_agent_m0_read),          //                         .read
		.uav_write              (cpu_debug_mem_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (cpu_debug_mem_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (cpu_debug_mem_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (cpu_debug_mem_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (cpu_debug_mem_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (cpu_debug_mem_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (cpu_debug_mem_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (cpu_debug_mem_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (cpu_debug_mem_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (cpu_debug_mem_slave_write),                  //                         .write
		.av_read                (cpu_debug_mem_slave_read),                   //                         .read
		.av_readdata            (cpu_debug_mem_slave_readdata),               //                         .readdata
		.av_writedata           (cpu_debug_mem_slave_writedata),              //                         .writedata
		.av_byteenable          (cpu_debug_mem_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (cpu_debug_mem_slave_waitrequest),            //                         .waitrequest
		.av_debugaccess         (cpu_debug_mem_slave_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_chipselect          (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (128),
		.UAV_DATA_W                     (128),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (16),
		.UAV_BYTEENABLE_W               (16),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (5),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (16),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) video_dma_descriptor_slave_translator (
		.clk                    (clk_125_clk_clk),                                                                                                                       //                      clk.clk
		.reset                  (sysid_reset_reset_bridge_in_reset_reset),                                                                                               //                    reset.reset
		.uav_address            (video_dma_descriptor_slave_agent_m0_address),                                                                                           // avalon_universal_slave_0.address
		.uav_burstcount         (video_dma_descriptor_slave_agent_m0_burstcount),                                                                                        //                         .burstcount
		.uav_read               (video_dma_descriptor_slave_agent_m0_read),                                                                                              //                         .read
		.uav_write              (video_dma_descriptor_slave_agent_m0_write),                                                                                             //                         .write
		.uav_waitrequest        (video_dma_descriptor_slave_agent_m0_waitrequest),                                                                                       //                         .waitrequest
		.uav_readdatavalid      (video_dma_descriptor_slave_agent_m0_readdatavalid),                                                                                     //                         .readdatavalid
		.uav_byteenable         (video_dma_descriptor_slave_agent_m0_byteenable),                                                                                        //                         .byteenable
		.uav_readdata           (video_dma_descriptor_slave_agent_m0_readdata),                                                                                          //                         .readdata
		.uav_writedata          (video_dma_descriptor_slave_agent_m0_writedata),                                                                                         //                         .writedata
		.uav_lock               (video_dma_descriptor_slave_agent_m0_lock),                                                                                              //                         .lock
		.uav_debugaccess        (video_dma_descriptor_slave_agent_m0_debugaccess),                                                                                       //                         .debugaccess
		.av_write               (video_dma_descriptor_slave_write),                                                                                                      //      avalon_anti_slave_0.write
		.av_writedata           (video_dma_descriptor_slave_writedata),                                                                                                  //                         .writedata
		.av_byteenable          (video_dma_descriptor_slave_byteenable),                                                                                                 //                         .byteenable
		.av_waitrequest         (video_dma_descriptor_slave_waitrequest),                                                                                                //                         .waitrequest
		.av_address             (),                                                                                                                                      //              (terminated)
		.av_read                (),                                                                                                                                      //              (terminated)
		.av_readdata            (128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), //              (terminated)
		.av_begintransfer       (),                                                                                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                                                                                      //              (terminated)
		.av_burstcount          (),                                                                                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                                                                                      //              (terminated)
		.av_lock                (),                                                                                                                                      //              (terminated)
		.av_chipselect          (),                                                                                                                                      //              (terminated)
		.av_clken               (),                                                                                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                                                                                  //              (terminated)
		.av_debugaccess         (),                                                                                                                                      //              (terminated)
		.av_outputenable        (),                                                                                                                                      //              (terminated)
		.uav_response           (),                                                                                                                                      //              (terminated)
		.av_response            (2'b00),                                                                                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (128),
		.UAV_DATA_W                     (128),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (16),
		.UAV_BYTEENABLE_W               (16),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (5),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (16),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) to_idct_hwacel_descriptor_slave_translator (
		.clk                    (clk_125_clk_clk),                                                                                                                       //                      clk.clk
		.reset                  (sysid_reset_reset_bridge_in_reset_reset),                                                                                               //                    reset.reset
		.uav_address            (to_idct_hwacel_descriptor_slave_agent_m0_address),                                                                                      // avalon_universal_slave_0.address
		.uav_burstcount         (to_idct_hwacel_descriptor_slave_agent_m0_burstcount),                                                                                   //                         .burstcount
		.uav_read               (to_idct_hwacel_descriptor_slave_agent_m0_read),                                                                                         //                         .read
		.uav_write              (to_idct_hwacel_descriptor_slave_agent_m0_write),                                                                                        //                         .write
		.uav_waitrequest        (to_idct_hwacel_descriptor_slave_agent_m0_waitrequest),                                                                                  //                         .waitrequest
		.uav_readdatavalid      (to_idct_hwacel_descriptor_slave_agent_m0_readdatavalid),                                                                                //                         .readdatavalid
		.uav_byteenable         (to_idct_hwacel_descriptor_slave_agent_m0_byteenable),                                                                                   //                         .byteenable
		.uav_readdata           (to_idct_hwacel_descriptor_slave_agent_m0_readdata),                                                                                     //                         .readdata
		.uav_writedata          (to_idct_hwacel_descriptor_slave_agent_m0_writedata),                                                                                    //                         .writedata
		.uav_lock               (to_idct_hwacel_descriptor_slave_agent_m0_lock),                                                                                         //                         .lock
		.uav_debugaccess        (to_idct_hwacel_descriptor_slave_agent_m0_debugaccess),                                                                                  //                         .debugaccess
		.av_write               (to_idct_hwacel_descriptor_slave_write),                                                                                                 //      avalon_anti_slave_0.write
		.av_writedata           (to_idct_hwacel_descriptor_slave_writedata),                                                                                             //                         .writedata
		.av_byteenable          (to_idct_hwacel_descriptor_slave_byteenable),                                                                                            //                         .byteenable
		.av_waitrequest         (to_idct_hwacel_descriptor_slave_waitrequest),                                                                                           //                         .waitrequest
		.av_address             (),                                                                                                                                      //              (terminated)
		.av_read                (),                                                                                                                                      //              (terminated)
		.av_readdata            (128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), //              (terminated)
		.av_begintransfer       (),                                                                                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                                                                                      //              (terminated)
		.av_burstcount          (),                                                                                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                                                                                      //              (terminated)
		.av_lock                (),                                                                                                                                      //              (terminated)
		.av_chipselect          (),                                                                                                                                      //              (terminated)
		.av_clken               (),                                                                                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                                                                                  //              (terminated)
		.av_debugaccess         (),                                                                                                                                      //              (terminated)
		.av_outputenable        (),                                                                                                                                      //              (terminated)
		.uav_response           (),                                                                                                                                      //              (terminated)
		.av_response            (2'b00),                                                                                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (128),
		.UAV_DATA_W                     (128),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (16),
		.UAV_BYTEENABLE_W               (16),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (5),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (16),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) from_idct_hwacel_descriptor_slave_translator (
		.clk                    (clk_125_clk_clk),                                                                                                                       //                      clk.clk
		.reset                  (sysid_reset_reset_bridge_in_reset_reset),                                                                                               //                    reset.reset
		.uav_address            (from_idct_hwacel_descriptor_slave_agent_m0_address),                                                                                    // avalon_universal_slave_0.address
		.uav_burstcount         (from_idct_hwacel_descriptor_slave_agent_m0_burstcount),                                                                                 //                         .burstcount
		.uav_read               (from_idct_hwacel_descriptor_slave_agent_m0_read),                                                                                       //                         .read
		.uav_write              (from_idct_hwacel_descriptor_slave_agent_m0_write),                                                                                      //                         .write
		.uav_waitrequest        (from_idct_hwacel_descriptor_slave_agent_m0_waitrequest),                                                                                //                         .waitrequest
		.uav_readdatavalid      (from_idct_hwacel_descriptor_slave_agent_m0_readdatavalid),                                                                              //                         .readdatavalid
		.uav_byteenable         (from_idct_hwacel_descriptor_slave_agent_m0_byteenable),                                                                                 //                         .byteenable
		.uav_readdata           (from_idct_hwacel_descriptor_slave_agent_m0_readdata),                                                                                   //                         .readdata
		.uav_writedata          (from_idct_hwacel_descriptor_slave_agent_m0_writedata),                                                                                  //                         .writedata
		.uav_lock               (from_idct_hwacel_descriptor_slave_agent_m0_lock),                                                                                       //                         .lock
		.uav_debugaccess        (from_idct_hwacel_descriptor_slave_agent_m0_debugaccess),                                                                                //                         .debugaccess
		.av_write               (from_idct_hwacel_descriptor_slave_write),                                                                                               //      avalon_anti_slave_0.write
		.av_writedata           (from_idct_hwacel_descriptor_slave_writedata),                                                                                           //                         .writedata
		.av_byteenable          (from_idct_hwacel_descriptor_slave_byteenable),                                                                                          //                         .byteenable
		.av_waitrequest         (from_idct_hwacel_descriptor_slave_waitrequest),                                                                                         //                         .waitrequest
		.av_address             (),                                                                                                                                      //              (terminated)
		.av_read                (),                                                                                                                                      //              (terminated)
		.av_readdata            (128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), //              (terminated)
		.av_begintransfer       (),                                                                                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                                                                                      //              (terminated)
		.av_burstcount          (),                                                                                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                                                                                      //              (terminated)
		.av_lock                (),                                                                                                                                      //              (terminated)
		.av_chipselect          (),                                                                                                                                      //              (terminated)
		.av_clken               (),                                                                                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                                                                                  //              (terminated)
		.av_debugaccess         (),                                                                                                                                      //              (terminated)
		.av_outputenable        (),                                                                                                                                      //              (terminated)
		.uav_response           (),                                                                                                                                      //              (terminated)
		.av_response            (2'b00),                                                                                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) timer_0_s1_translator (
		.clk                    (clk_125_clk_clk),                         //                      clk.clk
		.reset                  (sysid_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (timer_0_s1_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (timer_0_s1_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (timer_0_s1_agent_m0_read),                //                         .read
		.uav_write              (timer_0_s1_agent_m0_write),               //                         .write
		.uav_waitrequest        (timer_0_s1_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (timer_0_s1_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (timer_0_s1_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (timer_0_s1_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (timer_0_s1_agent_m0_writedata),           //                         .writedata
		.uav_lock               (timer_0_s1_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (timer_0_s1_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (timer_0_s1_address),                      //      avalon_anti_slave_0.address
		.av_write               (timer_0_s1_write),                        //                         .write
		.av_readdata            (timer_0_s1_readdata),                     //                         .readdata
		.av_writedata           (timer_0_s1_writedata),                    //                         .writedata
		.av_chipselect          (timer_0_s1_chipselect),                   //                         .chipselect
		.av_read                (),                                        //              (terminated)
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_byteenable          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) key_s1_translator (
		.clk                    (clk_125_clk_clk),                         //                      clk.clk
		.reset                  (sysid_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (key_s1_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (key_s1_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (key_s1_agent_m0_read),                    //                         .read
		.uav_write              (key_s1_agent_m0_write),                   //                         .write
		.uav_waitrequest        (key_s1_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (key_s1_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (key_s1_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (key_s1_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (key_s1_agent_m0_writedata),               //                         .writedata
		.uav_lock               (key_s1_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (key_s1_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (key_s1_address),                          //      avalon_anti_slave_0.address
		.av_write               (key_s1_write),                            //                         .write
		.av_readdata            (key_s1_readdata),                         //                         .readdata
		.av_writedata           (key_s1_writedata),                        //                         .writedata
		.av_chipselect          (key_s1_chipselect),                       //                         .chipselect
		.av_read                (),                                        //              (terminated)
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_byteenable          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) timer_1_s1_translator (
		.clk                    (clk_125_clk_clk),                         //                      clk.clk
		.reset                  (sysid_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (timer_1_s1_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (timer_1_s1_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (timer_1_s1_agent_m0_read),                //                         .read
		.uav_write              (timer_1_s1_agent_m0_write),               //                         .write
		.uav_waitrequest        (timer_1_s1_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (timer_1_s1_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (timer_1_s1_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (timer_1_s1_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (timer_1_s1_agent_m0_writedata),           //                         .writedata
		.uav_lock               (timer_1_s1_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (timer_1_s1_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (timer_1_s1_address),                      //      avalon_anti_slave_0.address
		.av_write               (timer_1_s1_write),                        //                         .write
		.av_readdata            (timer_1_s1_readdata),                     //                         .readdata
		.av_writedata           (timer_1_s1_writedata),                    //                         .writedata
		.av_chipselect          (timer_1_s1_chipselect),                   //                         .chipselect
		.av_read                (),                                        //              (terminated)
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_byteenable          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ledg_s1_translator (
		.clk                    (clk_125_clk_clk),                         //                      clk.clk
		.reset                  (sysid_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ledg_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (ledg_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (ledg_s1_agent_m0_read),                   //                         .read
		.uav_write              (ledg_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (ledg_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (ledg_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (ledg_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (ledg_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (ledg_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (ledg_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (ledg_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (ledg_s1_address),                         //      avalon_anti_slave_0.address
		.av_write               (ledg_s1_write),                           //                         .write
		.av_readdata            (ledg_s1_readdata),                        //                         .readdata
		.av_writedata           (ledg_s1_writedata),                       //                         .writedata
		.av_chipselect          (ledg_s1_chipselect),                      //                         .chipselect
		.av_read                (),                                        //              (terminated)
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_byteenable          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ledr_s1_translator (
		.clk                    (clk_125_clk_clk),                         //                      clk.clk
		.reset                  (sysid_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ledr_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (ledr_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (ledr_s1_agent_m0_read),                   //                         .read
		.uav_write              (ledr_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (ledr_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (ledr_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (ledr_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (ledr_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (ledr_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (ledr_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (ledr_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (ledr_s1_address),                         //      avalon_anti_slave_0.address
		.av_write               (ledr_s1_write),                           //                         .write
		.av_readdata            (ledr_s1_readdata),                        //                         .readdata
		.av_writedata           (ledr_s1_writedata),                       //                         .writedata
		.av_chipselect          (ledr_s1_chipselect),                      //                         .chipselect
		.av_read                (),                                        //              (terminated)
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_byteenable          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) i2c_scl_s1_translator (
		.clk                    (clk_125_clk_clk),                         //                      clk.clk
		.reset                  (sysid_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (i2c_scl_s1_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (i2c_scl_s1_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (i2c_scl_s1_agent_m0_read),                //                         .read
		.uav_write              (i2c_scl_s1_agent_m0_write),               //                         .write
		.uav_waitrequest        (i2c_scl_s1_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (i2c_scl_s1_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (i2c_scl_s1_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (i2c_scl_s1_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (i2c_scl_s1_agent_m0_writedata),           //                         .writedata
		.uav_lock               (i2c_scl_s1_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (i2c_scl_s1_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (i2c_scl_s1_address),                      //      avalon_anti_slave_0.address
		.av_write               (i2c_scl_s1_write),                        //                         .write
		.av_readdata            (i2c_scl_s1_readdata),                     //                         .readdata
		.av_writedata           (i2c_scl_s1_writedata),                    //                         .writedata
		.av_chipselect          (i2c_scl_s1_chipselect),                   //                         .chipselect
		.av_read                (),                                        //              (terminated)
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_byteenable          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) i2c_sda_s1_translator (
		.clk                    (clk_125_clk_clk),                         //                      clk.clk
		.reset                  (sysid_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (i2c_sda_s1_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (i2c_sda_s1_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (i2c_sda_s1_agent_m0_read),                //                         .read
		.uav_write              (i2c_sda_s1_agent_m0_write),               //                         .write
		.uav_waitrequest        (i2c_sda_s1_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (i2c_sda_s1_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (i2c_sda_s1_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (i2c_sda_s1_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (i2c_sda_s1_agent_m0_writedata),           //                         .writedata
		.uav_lock               (i2c_sda_s1_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (i2c_sda_s1_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (i2c_sda_s1_address),                      //      avalon_anti_slave_0.address
		.av_write               (i2c_sda_s1_write),                        //                         .write
		.av_readdata            (i2c_sda_s1_readdata),                     //                         .readdata
		.av_writedata           (i2c_sda_s1_writedata),                    //                         .writedata
		.av_chipselect          (i2c_sda_s1_chipselect),                   //                         .chipselect
		.av_read                (),                                        //              (terminated)
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_byteenable          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sd_cont_0_slave_translator (
		.clk                    (clk_50_out_clk_clk),                          //                      clk.clk
		.reset                  (sd_cont_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sd_cont_0_slave_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (sd_cont_0_slave_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (sd_cont_0_slave_agent_m0_read),               //                         .read
		.uav_write              (sd_cont_0_slave_agent_m0_write),              //                         .write
		.uav_waitrequest        (sd_cont_0_slave_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (sd_cont_0_slave_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (sd_cont_0_slave_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (sd_cont_0_slave_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (sd_cont_0_slave_agent_m0_writedata),          //                         .writedata
		.uav_lock               (sd_cont_0_slave_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (sd_cont_0_slave_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (sd_cont_0_slave_address),                     //      avalon_anti_slave_0.address
		.av_write               (sd_cont_0_slave_write),                       //                         .write
		.av_read                (sd_cont_0_slave_read),                        //                         .read
		.av_readdata            (sd_cont_0_slave_readdata),                    //                         .readdata
		.av_writedata           (sd_cont_0_slave_writedata),                   //                         .writedata
		.av_waitrequest         (sd_cont_0_slave_waitrequest),                 //                         .waitrequest
		.av_chipselect          (sd_cont_0_slave_chipselect),                  //                         .chipselect
		.av_begintransfer       (),                                            //              (terminated)
		.av_beginbursttransfer  (),                                            //              (terminated)
		.av_burstcount          (),                                            //              (terminated)
		.av_byteenable          (),                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                        //              (terminated)
		.av_writebyteenable     (),                                            //              (terminated)
		.av_lock                (),                                            //              (terminated)
		.av_clken               (),                                            //              (terminated)
		.uav_clken              (1'b0),                                        //              (terminated)
		.av_debugaccess         (),                                            //              (terminated)
		.av_outputenable        (),                                            //              (terminated)
		.uav_response           (),                                            //              (terminated)
		.av_response            (2'b00),                                       //              (terminated)
		.uav_writeresponsevalid (),                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (19),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (2),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sram_uas_translator (
		.clk                    (clk_125_clk_clk),                         //                      clk.clk
		.reset                  (sysid_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sram_uas_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (sram_uas_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (sram_uas_agent_m0_read),                  //                         .read
		.uav_write              (sram_uas_agent_m0_write),                 //                         .write
		.uav_waitrequest        (sram_uas_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (sram_uas_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (sram_uas_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (sram_uas_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (sram_uas_agent_m0_writedata),             //                         .writedata
		.uav_lock               (sram_uas_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (sram_uas_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (sram_uas_address),                        //      avalon_anti_slave_0.address
		.av_write               (sram_uas_write),                          //                         .write
		.av_read                (sram_uas_read),                           //                         .read
		.av_readdata            (sram_uas_readdata),                       //                         .readdata
		.av_writedata           (sram_uas_writedata),                      //                         .writedata
		.av_burstcount          (sram_uas_burstcount),                     //                         .burstcount
		.av_byteenable          (sram_uas_byteenable),                     //                         .byteenable
		.av_readdatavalid       (sram_uas_readdatavalid),                  //                         .readdatavalid
		.av_waitrequest         (sram_uas_waitrequest),                    //                         .waitrequest
		.av_lock                (sram_uas_lock),                           //                         .lock
		.av_debugaccess         (sram_uas_debugaccess),                    //                         .debugaccess
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_chipselect          (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_QOS_H                 (95),
		.PKT_QOS_L                 (95),
		.PKT_DATA_SIDEBAND_H       (93),
		.PKT_DATA_SIDEBAND_L       (93),
		.PKT_ADDR_SIDEBAND_H       (92),
		.PKT_ADDR_SIDEBAND_L       (92),
		.PKT_BURST_TYPE_H          (91),
		.PKT_BURST_TYPE_L          (90),
		.PKT_CACHE_H               (113),
		.PKT_CACHE_L               (110),
		.PKT_THREAD_ID_H           (106),
		.PKT_THREAD_ID_L           (106),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (94),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (100),
		.PKT_SRC_ID_L              (96),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (101),
		.ST_DATA_W                 (119),
		.ST_CHANNEL_W              (19),
		.AV_BURSTCOUNT_W           (6),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_data_master_agent (
		.clk                   (clk_125_clk_clk),                                                    //       clk.clk
		.reset                 (cpu_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (cpu_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cpu_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cpu_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cpu_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cpu_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cpu_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cpu_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cpu_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cpu_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cpu_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cpu_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cpu_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cpu_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cpu_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cpu_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cpu_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (cpu_data_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (cpu_data_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (cpu_data_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (cpu_data_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (cpu_data_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (cpu_data_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                   // (terminated)
		.av_writeresponsevalid ()                                                                    // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_QOS_H                 (95),
		.PKT_QOS_L                 (95),
		.PKT_DATA_SIDEBAND_H       (93),
		.PKT_DATA_SIDEBAND_L       (93),
		.PKT_ADDR_SIDEBAND_H       (92),
		.PKT_ADDR_SIDEBAND_L       (92),
		.PKT_BURST_TYPE_H          (91),
		.PKT_BURST_TYPE_L          (90),
		.PKT_CACHE_H               (113),
		.PKT_CACHE_L               (110),
		.PKT_THREAD_ID_H           (106),
		.PKT_THREAD_ID_L           (106),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (94),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (100),
		.PKT_SRC_ID_L              (96),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (101),
		.ST_DATA_W                 (119),
		.ST_CHANNEL_W              (19),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (1),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_instruction_master_agent (
		.clk                   (clk_125_clk_clk),                                                           //       clk.clk
		.reset                 (cpu_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (cpu_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cpu_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cpu_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cpu_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cpu_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cpu_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cpu_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cpu_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cpu_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cpu_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cpu_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cpu_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cpu_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cpu_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cpu_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (cpu_instruction_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (cpu_instruction_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (cpu_instruction_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (cpu_instruction_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (cpu_instruction_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (cpu_instruction_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                          // (terminated)
		.av_writeresponsevalid ()                                                                           // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_QOS_H                 (95),
		.PKT_QOS_L                 (95),
		.PKT_DATA_SIDEBAND_H       (93),
		.PKT_DATA_SIDEBAND_L       (93),
		.PKT_ADDR_SIDEBAND_H       (92),
		.PKT_ADDR_SIDEBAND_L       (92),
		.PKT_BURST_TYPE_H          (91),
		.PKT_BURST_TYPE_L          (90),
		.PKT_CACHE_H               (113),
		.PKT_CACHE_L               (110),
		.PKT_THREAD_ID_H           (106),
		.PKT_THREAD_ID_L           (106),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (94),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (100),
		.PKT_SRC_ID_L              (96),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (101),
		.ST_DATA_W                 (119),
		.ST_CHANNEL_W              (19),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (2),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sd_cont_0_master_agent (
		.clk                   (clk_50_out_clk_clk),                                                  //       clk.clk
		.reset                 (sd_cont_0_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.av_address            (sd_cont_0_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (sd_cont_0_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (sd_cont_0_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (sd_cont_0_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (sd_cont_0_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (sd_cont_0_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (sd_cont_0_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (sd_cont_0_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (sd_cont_0_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (sd_cont_0_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (sd_cont_0_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (sd_cont_0_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (sd_cont_0_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (sd_cont_0_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (sd_cont_0_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (sd_cont_0_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_002_src_valid),                                               //        rp.valid
		.rp_data               (rsp_mux_002_src_data),                                                //          .data
		.rp_channel            (rsp_mux_002_src_channel),                                             //          .channel
		.rp_startofpacket      (rsp_mux_002_src_startofpacket),                                       //          .startofpacket
		.rp_endofpacket        (rsp_mux_002_src_endofpacket),                                         //          .endofpacket
		.rp_ready              (rsp_mux_002_src_ready),                                               //          .ready
		.av_response           (),                                                                    // (terminated)
		.av_writeresponsevalid ()                                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (94),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (100),
		.PKT_SRC_ID_L              (96),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (101),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (119),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_avalon_jtag_slave_agent (
		.clk                     (clk_125_clk_clk),                                              //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),                        //       clk_reset.reset
		.m0_address              (jtag_uart_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_source0_ready),                                 //              cp.ready
		.cp_valid                (agent_pipeline_source0_valid),                                 //                .valid
		.cp_data                 (agent_pipeline_source0_data),                                  //                .data
		.cp_startofpacket        (agent_pipeline_source0_startofpacket),                         //                .startofpacket
		.cp_endofpacket          (agent_pipeline_source0_endofpacket),                           //                .endofpacket
		.cp_channel              (agent_pipeline_source0_channel),                               //                .channel
		.rf_sink_ready           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                //                .error
		.rdata_fifo_src_ready    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (120),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (clk_125_clk_clk),                                              //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_avalon_jtag_slave_agent_rdata_fifo (
		.clk               (clk_125_clk_clk),                                        //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_startofpacket  (1'b0),                                                   // (terminated)
		.in_endofpacket    (1'b0),                                                   // (terminated)
		.out_startofpacket (),                                                       // (terminated)
		.out_endofpacket   (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (94),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (100),
		.PKT_SRC_ID_L              (96),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (101),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (119),
		.AVS_BURSTCOUNT_W          (10),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) lpddr2_avl_0_agent (
		.clk                     (clk_125_clk_clk),                               //             clk.clk
		.reset                   (sysid_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (lpddr2_avl_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (lpddr2_avl_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (lpddr2_avl_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (lpddr2_avl_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (lpddr2_avl_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (lpddr2_avl_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (lpddr2_avl_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (lpddr2_avl_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (lpddr2_avl_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (lpddr2_avl_0_agent_m0_writedata),               //                .writedata
		.m0_write                (lpddr2_avl_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (lpddr2_avl_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (lpddr2_avl_0_agent_rp_ready),                   //                .ready
		.rp_valid                (lpddr2_avl_0_agent_rp_valid),                   //                .valid
		.rp_data                 (lpddr2_avl_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (lpddr2_avl_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_002_source0_ready),              //              cp.ready
		.cp_valid                (agent_pipeline_002_source0_valid),              //                .valid
		.cp_data                 (agent_pipeline_002_source0_data),               //                .data
		.cp_startofpacket        (agent_pipeline_002_source0_startofpacket),      //                .startofpacket
		.cp_endofpacket          (agent_pipeline_002_source0_endofpacket),        //                .endofpacket
		.cp_channel              (agent_pipeline_002_source0_channel),            //                .channel
		.rf_sink_ready           (lpddr2_avl_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (lpddr2_avl_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (lpddr2_avl_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (lpddr2_avl_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (lpddr2_avl_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (lpddr2_avl_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (lpddr2_avl_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (lpddr2_avl_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (lpddr2_avl_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (lpddr2_avl_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),             //                .error
		.rdata_fifo_src_ready    (lpddr2_avl_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (lpddr2_avl_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (lpddr2_avl_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (120),
		.FIFO_DEPTH          (49),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) lpddr2_avl_0_agent_rsp_fifo (
		.clk               (clk_125_clk_clk),                               //       clk.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (lpddr2_avl_0_agent_rf_source_data),             //        in.data
		.in_valid          (lpddr2_avl_0_agent_rf_source_valid),            //          .valid
		.in_ready          (lpddr2_avl_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (lpddr2_avl_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (lpddr2_avl_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (lpddr2_avl_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (lpddr2_avl_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (lpddr2_avl_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (lpddr2_avl_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (lpddr2_avl_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (512),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) lpddr2_avl_0_agent_rdata_fifo (
		.clk               (clk_125_clk_clk),                         //       clk.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (lpddr2_avl_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (lpddr2_avl_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (lpddr2_avl_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (lpddr2_avl_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (lpddr2_avl_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (lpddr2_avl_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_startofpacket  (1'b0),                                    // (terminated)
		.in_endofpacket    (1'b0),                                    // (terminated)
		.out_startofpacket (),                                        // (terminated)
		.out_endofpacket   (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (94),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (100),
		.PKT_SRC_ID_L              (96),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (101),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (119),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysid_control_slave_agent (
		.clk                     (clk_125_clk_clk),                                      //             clk.clk
		.reset                   (sysid_reset_reset_bridge_in_reset_reset),              //       clk_reset.reset
		.m0_address              (sysid_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sysid_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sysid_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sysid_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sysid_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (sysid_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sysid_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sysid_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (sysid_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sysid_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (sysid_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (sysid_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sysid_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (sysid_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (sysid_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (sysid_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_004_source0_ready),                     //              cp.ready
		.cp_valid                (agent_pipeline_004_source0_valid),                     //                .valid
		.cp_data                 (agent_pipeline_004_source0_data),                      //                .data
		.cp_startofpacket        (agent_pipeline_004_source0_startofpacket),             //                .startofpacket
		.cp_endofpacket          (agent_pipeline_004_source0_endofpacket),               //                .endofpacket
		.cp_channel              (agent_pipeline_004_source0_channel),                   //                .channel
		.rf_sink_ready           (sysid_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sysid_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sysid_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sysid_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sysid_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sysid_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sysid_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sysid_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sysid_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sysid_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (sysid_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sysid_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (120),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_control_slave_agent_rsp_fifo (
		.clk               (clk_125_clk_clk),                                      //       clk.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (sysid_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sysid_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sysid_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sysid_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sysid_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sysid_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sysid_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sysid_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sysid_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sysid_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_control_slave_agent_rdata_fifo (
		.clk               (clk_125_clk_clk),                                //       clk.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (sysid_control_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (sysid_control_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (sysid_control_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (sysid_control_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (sysid_control_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (sysid_control_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_startofpacket  (1'b0),                                           // (terminated)
		.in_endofpacket    (1'b0),                                           // (terminated)
		.out_startofpacket (),                                               // (terminated)
		.out_endofpacket   (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (94),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (100),
		.PKT_SRC_ID_L              (96),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (101),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (119),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) video_dma_csr_agent (
		.clk                     (clk_125_clk_clk),                                //             clk.clk
		.reset                   (sysid_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (video_dma_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (video_dma_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (video_dma_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (video_dma_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (video_dma_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (video_dma_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (video_dma_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (video_dma_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (video_dma_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (video_dma_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (video_dma_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (video_dma_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (video_dma_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (video_dma_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (video_dma_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (video_dma_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_006_source0_ready),               //              cp.ready
		.cp_valid                (agent_pipeline_006_source0_valid),               //                .valid
		.cp_data                 (agent_pipeline_006_source0_data),                //                .data
		.cp_startofpacket        (agent_pipeline_006_source0_startofpacket),       //                .startofpacket
		.cp_endofpacket          (agent_pipeline_006_source0_endofpacket),         //                .endofpacket
		.cp_channel              (agent_pipeline_006_source0_channel),             //                .channel
		.rf_sink_ready           (video_dma_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (video_dma_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (video_dma_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (video_dma_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (video_dma_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (video_dma_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (video_dma_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (video_dma_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (video_dma_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (video_dma_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),              //                .error
		.rdata_fifo_src_ready    (video_dma_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (video_dma_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (video_dma_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (120),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_dma_csr_agent_rsp_fifo (
		.clk               (clk_125_clk_clk),                                //       clk.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (video_dma_csr_agent_rf_source_data),             //        in.data
		.in_valid          (video_dma_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (video_dma_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (video_dma_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (video_dma_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (video_dma_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (video_dma_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (video_dma_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (video_dma_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (video_dma_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_dma_csr_agent_rdata_fifo (
		.clk               (clk_125_clk_clk),                          //       clk.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (video_dma_csr_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (video_dma_csr_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (video_dma_csr_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (video_dma_csr_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (video_dma_csr_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (video_dma_csr_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                    // (terminated)
		.csr_read          (1'b0),                                     // (terminated)
		.csr_write         (1'b0),                                     // (terminated)
		.csr_readdata      (),                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),     // (terminated)
		.almost_full_data  (),                                         // (terminated)
		.almost_empty_data (),                                         // (terminated)
		.in_startofpacket  (1'b0),                                     // (terminated)
		.in_endofpacket    (1'b0),                                     // (terminated)
		.out_startofpacket (),                                         // (terminated)
		.out_endofpacket   (),                                         // (terminated)
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_error         (),                                         // (terminated)
		.in_channel        (1'b0),                                     // (terminated)
		.out_channel       ()                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (94),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (100),
		.PKT_SRC_ID_L              (96),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (101),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (119),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) to_idct_hwacel_csr_agent (
		.clk                     (clk_125_clk_clk),                                     //             clk.clk
		.reset                   (sysid_reset_reset_bridge_in_reset_reset),             //       clk_reset.reset
		.m0_address              (to_idct_hwacel_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (to_idct_hwacel_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (to_idct_hwacel_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (to_idct_hwacel_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (to_idct_hwacel_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (to_idct_hwacel_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (to_idct_hwacel_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (to_idct_hwacel_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (to_idct_hwacel_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (to_idct_hwacel_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (to_idct_hwacel_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (to_idct_hwacel_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (to_idct_hwacel_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (to_idct_hwacel_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (to_idct_hwacel_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (to_idct_hwacel_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_008_source0_ready),                    //              cp.ready
		.cp_valid                (agent_pipeline_008_source0_valid),                    //                .valid
		.cp_data                 (agent_pipeline_008_source0_data),                     //                .data
		.cp_startofpacket        (agent_pipeline_008_source0_startofpacket),            //                .startofpacket
		.cp_endofpacket          (agent_pipeline_008_source0_endofpacket),              //                .endofpacket
		.cp_channel              (agent_pipeline_008_source0_channel),                  //                .channel
		.rf_sink_ready           (to_idct_hwacel_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (to_idct_hwacel_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (to_idct_hwacel_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (to_idct_hwacel_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (to_idct_hwacel_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (to_idct_hwacel_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (to_idct_hwacel_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (to_idct_hwacel_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (to_idct_hwacel_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (to_idct_hwacel_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (to_idct_hwacel_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (to_idct_hwacel_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (to_idct_hwacel_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (120),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) to_idct_hwacel_csr_agent_rsp_fifo (
		.clk               (clk_125_clk_clk),                                     //       clk.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (to_idct_hwacel_csr_agent_rf_source_data),             //        in.data
		.in_valid          (to_idct_hwacel_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (to_idct_hwacel_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (to_idct_hwacel_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (to_idct_hwacel_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (to_idct_hwacel_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (to_idct_hwacel_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (to_idct_hwacel_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (to_idct_hwacel_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (to_idct_hwacel_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) to_idct_hwacel_csr_agent_rdata_fifo (
		.clk               (clk_125_clk_clk),                               //       clk.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (to_idct_hwacel_csr_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (to_idct_hwacel_csr_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (to_idct_hwacel_csr_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (to_idct_hwacel_csr_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (to_idct_hwacel_csr_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (to_idct_hwacel_csr_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (94),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (100),
		.PKT_SRC_ID_L              (96),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (101),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (119),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) from_idct_hwacel_csr_agent (
		.clk                     (clk_125_clk_clk),                                       //             clk.clk
		.reset                   (sysid_reset_reset_bridge_in_reset_reset),               //       clk_reset.reset
		.m0_address              (from_idct_hwacel_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (from_idct_hwacel_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (from_idct_hwacel_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (from_idct_hwacel_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (from_idct_hwacel_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (from_idct_hwacel_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (from_idct_hwacel_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (from_idct_hwacel_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (from_idct_hwacel_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (from_idct_hwacel_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (from_idct_hwacel_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (from_idct_hwacel_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (from_idct_hwacel_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (from_idct_hwacel_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (from_idct_hwacel_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (from_idct_hwacel_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_010_source0_ready),                      //              cp.ready
		.cp_valid                (agent_pipeline_010_source0_valid),                      //                .valid
		.cp_data                 (agent_pipeline_010_source0_data),                       //                .data
		.cp_startofpacket        (agent_pipeline_010_source0_startofpacket),              //                .startofpacket
		.cp_endofpacket          (agent_pipeline_010_source0_endofpacket),                //                .endofpacket
		.cp_channel              (agent_pipeline_010_source0_channel),                    //                .channel
		.rf_sink_ready           (from_idct_hwacel_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (from_idct_hwacel_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (from_idct_hwacel_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (from_idct_hwacel_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (from_idct_hwacel_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (from_idct_hwacel_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (from_idct_hwacel_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (from_idct_hwacel_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (from_idct_hwacel_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (from_idct_hwacel_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (from_idct_hwacel_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (from_idct_hwacel_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (from_idct_hwacel_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (120),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) from_idct_hwacel_csr_agent_rsp_fifo (
		.clk               (clk_125_clk_clk),                                       //       clk.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (from_idct_hwacel_csr_agent_rf_source_data),             //        in.data
		.in_valid          (from_idct_hwacel_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (from_idct_hwacel_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (from_idct_hwacel_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (from_idct_hwacel_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (from_idct_hwacel_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (from_idct_hwacel_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (from_idct_hwacel_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (from_idct_hwacel_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (from_idct_hwacel_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) from_idct_hwacel_csr_agent_rdata_fifo (
		.clk               (clk_125_clk_clk),                                 //       clk.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (from_idct_hwacel_csr_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (from_idct_hwacel_csr_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (from_idct_hwacel_csr_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (from_idct_hwacel_csr_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (from_idct_hwacel_csr_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (from_idct_hwacel_csr_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_startofpacket  (1'b0),                                            // (terminated)
		.in_endofpacket    (1'b0),                                            // (terminated)
		.out_startofpacket (),                                                // (terminated)
		.out_endofpacket   (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (94),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (100),
		.PKT_SRC_ID_L              (96),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (101),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (119),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) cpu_debug_mem_slave_agent (
		.clk                     (clk_125_clk_clk),                                      //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (cpu_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (cpu_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (cpu_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (cpu_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (cpu_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (cpu_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (cpu_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (cpu_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (cpu_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (cpu_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (cpu_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (cpu_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (cpu_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (cpu_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (cpu_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (cpu_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_012_source0_ready),                     //              cp.ready
		.cp_valid                (agent_pipeline_012_source0_valid),                     //                .valid
		.cp_data                 (agent_pipeline_012_source0_data),                      //                .data
		.cp_startofpacket        (agent_pipeline_012_source0_startofpacket),             //                .startofpacket
		.cp_endofpacket          (agent_pipeline_012_source0_endofpacket),               //                .endofpacket
		.cp_channel              (agent_pipeline_012_source0_channel),                   //                .channel
		.rf_sink_ready           (cpu_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (cpu_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (cpu_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (cpu_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (cpu_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (cpu_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (cpu_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (cpu_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (cpu_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (cpu_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (cpu_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (cpu_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (cpu_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (120),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) cpu_debug_mem_slave_agent_rsp_fifo (
		.clk               (clk_125_clk_clk),                                      //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (cpu_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (cpu_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (cpu_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (cpu_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (cpu_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (cpu_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (cpu_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (cpu_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (cpu_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (cpu_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) cpu_debug_mem_slave_agent_rdata_fifo (
		.clk               (clk_125_clk_clk),                                //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (cpu_debug_mem_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (cpu_debug_mem_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (cpu_debug_mem_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (cpu_debug_mem_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (cpu_debug_mem_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (cpu_debug_mem_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_startofpacket  (1'b0),                                           // (terminated)
		.in_endofpacket    (1'b0),                                           // (terminated)
		.out_startofpacket (),                                               // (terminated)
		.out_endofpacket   (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (226),
		.PKT_ORI_BURST_SIZE_L      (224),
		.PKT_RESPONSE_STATUS_H     (223),
		.PKT_RESPONSE_STATUS_L     (222),
		.PKT_BURST_SIZE_H          (197),
		.PKT_BURST_SIZE_L          (195),
		.PKT_TRANS_LOCK            (180),
		.PKT_BEGIN_BURST           (202),
		.PKT_PROTECTION_H          (217),
		.PKT_PROTECTION_L          (215),
		.PKT_BURSTWRAP_H           (194),
		.PKT_BURSTWRAP_L           (192),
		.PKT_BYTE_CNT_H            (191),
		.PKT_BYTE_CNT_L            (182),
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_POSTED          (177),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (208),
		.PKT_SRC_ID_L              (204),
		.PKT_DEST_ID_H             (213),
		.PKT_DEST_ID_L             (209),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (227),
		.AVS_BURSTCOUNT_W          (5),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) video_dma_descriptor_slave_agent (
		.clk                     (clk_125_clk_clk),                                             //             clk.clk
		.reset                   (sysid_reset_reset_bridge_in_reset_reset),                     //       clk_reset.reset
		.m0_address              (video_dma_descriptor_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (video_dma_descriptor_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (video_dma_descriptor_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (video_dma_descriptor_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (video_dma_descriptor_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (video_dma_descriptor_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (video_dma_descriptor_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (video_dma_descriptor_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (video_dma_descriptor_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (video_dma_descriptor_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (video_dma_descriptor_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (video_dma_descriptor_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (video_dma_descriptor_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (video_dma_descriptor_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (video_dma_descriptor_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (video_dma_descriptor_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_014_source0_ready),                            //              cp.ready
		.cp_valid                (agent_pipeline_014_source0_valid),                            //                .valid
		.cp_data                 (agent_pipeline_014_source0_data),                             //                .data
		.cp_startofpacket        (agent_pipeline_014_source0_startofpacket),                    //                .startofpacket
		.cp_endofpacket          (agent_pipeline_014_source0_endofpacket),                      //                .endofpacket
		.cp_channel              (agent_pipeline_014_source0_channel),                          //                .channel
		.rf_sink_ready           (video_dma_descriptor_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (video_dma_descriptor_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (video_dma_descriptor_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (video_dma_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (video_dma_descriptor_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (video_dma_descriptor_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (video_dma_descriptor_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (video_dma_descriptor_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (video_dma_descriptor_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (video_dma_descriptor_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (video_dma_descriptor_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (video_dma_descriptor_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (video_dma_descriptor_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (228),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_dma_descriptor_slave_agent_rsp_fifo (
		.clk               (clk_125_clk_clk),                                             //       clk.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.in_data           (video_dma_descriptor_slave_agent_rf_source_data),             //        in.data
		.in_valid          (video_dma_descriptor_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (video_dma_descriptor_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (video_dma_descriptor_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (video_dma_descriptor_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (video_dma_descriptor_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (video_dma_descriptor_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (video_dma_descriptor_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (video_dma_descriptor_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (video_dma_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (130),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_dma_descriptor_slave_agent_rdata_fifo (
		.clk               (clk_125_clk_clk),                                       //       clk.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (video_dma_descriptor_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (video_dma_descriptor_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (video_dma_descriptor_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (video_dma_descriptor_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (video_dma_descriptor_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (video_dma_descriptor_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_startofpacket  (1'b0),                                                  // (terminated)
		.in_endofpacket    (1'b0),                                                  // (terminated)
		.out_startofpacket (),                                                      // (terminated)
		.out_endofpacket   (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (226),
		.PKT_ORI_BURST_SIZE_L      (224),
		.PKT_RESPONSE_STATUS_H     (223),
		.PKT_RESPONSE_STATUS_L     (222),
		.PKT_BURST_SIZE_H          (197),
		.PKT_BURST_SIZE_L          (195),
		.PKT_TRANS_LOCK            (180),
		.PKT_BEGIN_BURST           (202),
		.PKT_PROTECTION_H          (217),
		.PKT_PROTECTION_L          (215),
		.PKT_BURSTWRAP_H           (194),
		.PKT_BURSTWRAP_L           (192),
		.PKT_BYTE_CNT_H            (191),
		.PKT_BYTE_CNT_L            (182),
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_POSTED          (177),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (208),
		.PKT_SRC_ID_L              (204),
		.PKT_DEST_ID_H             (213),
		.PKT_DEST_ID_L             (209),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (227),
		.AVS_BURSTCOUNT_W          (5),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) to_idct_hwacel_descriptor_slave_agent (
		.clk                     (clk_125_clk_clk),                                                  //             clk.clk
		.reset                   (sysid_reset_reset_bridge_in_reset_reset),                          //       clk_reset.reset
		.m0_address              (to_idct_hwacel_descriptor_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (to_idct_hwacel_descriptor_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (to_idct_hwacel_descriptor_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (to_idct_hwacel_descriptor_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (to_idct_hwacel_descriptor_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (to_idct_hwacel_descriptor_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (to_idct_hwacel_descriptor_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (to_idct_hwacel_descriptor_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (to_idct_hwacel_descriptor_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (to_idct_hwacel_descriptor_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (to_idct_hwacel_descriptor_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (to_idct_hwacel_descriptor_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (to_idct_hwacel_descriptor_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (to_idct_hwacel_descriptor_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (to_idct_hwacel_descriptor_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (to_idct_hwacel_descriptor_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_016_source0_ready),                                 //              cp.ready
		.cp_valid                (agent_pipeline_016_source0_valid),                                 //                .valid
		.cp_data                 (agent_pipeline_016_source0_data),                                  //                .data
		.cp_startofpacket        (agent_pipeline_016_source0_startofpacket),                         //                .startofpacket
		.cp_endofpacket          (agent_pipeline_016_source0_endofpacket),                           //                .endofpacket
		.cp_channel              (agent_pipeline_016_source0_channel),                               //                .channel
		.rf_sink_ready           (to_idct_hwacel_descriptor_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (to_idct_hwacel_descriptor_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (to_idct_hwacel_descriptor_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (to_idct_hwacel_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (to_idct_hwacel_descriptor_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (to_idct_hwacel_descriptor_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (to_idct_hwacel_descriptor_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (to_idct_hwacel_descriptor_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (to_idct_hwacel_descriptor_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (to_idct_hwacel_descriptor_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                                //                .error
		.rdata_fifo_src_ready    (to_idct_hwacel_descriptor_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (to_idct_hwacel_descriptor_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (to_idct_hwacel_descriptor_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (228),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) to_idct_hwacel_descriptor_slave_agent_rsp_fifo (
		.clk               (clk_125_clk_clk),                                                  //       clk.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),                          // clk_reset.reset
		.in_data           (to_idct_hwacel_descriptor_slave_agent_rf_source_data),             //        in.data
		.in_valid          (to_idct_hwacel_descriptor_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (to_idct_hwacel_descriptor_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (to_idct_hwacel_descriptor_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (to_idct_hwacel_descriptor_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (to_idct_hwacel_descriptor_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (to_idct_hwacel_descriptor_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (to_idct_hwacel_descriptor_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (to_idct_hwacel_descriptor_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (to_idct_hwacel_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                            // (terminated)
		.csr_read          (1'b0),                                                             // (terminated)
		.csr_write         (1'b0),                                                             // (terminated)
		.csr_readdata      (),                                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated)
		.almost_full_data  (),                                                                 // (terminated)
		.almost_empty_data (),                                                                 // (terminated)
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.in_error          (1'b0),                                                             // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_channel        (1'b0),                                                             // (terminated)
		.out_channel       ()                                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (130),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) to_idct_hwacel_descriptor_slave_agent_rdata_fifo (
		.clk               (clk_125_clk_clk),                                            //       clk.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.in_data           (to_idct_hwacel_descriptor_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (to_idct_hwacel_descriptor_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (to_idct_hwacel_descriptor_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (to_idct_hwacel_descriptor_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (to_idct_hwacel_descriptor_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (to_idct_hwacel_descriptor_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_startofpacket  (1'b0),                                                       // (terminated)
		.in_endofpacket    (1'b0),                                                       // (terminated)
		.out_startofpacket (),                                                           // (terminated)
		.out_endofpacket   (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (226),
		.PKT_ORI_BURST_SIZE_L      (224),
		.PKT_RESPONSE_STATUS_H     (223),
		.PKT_RESPONSE_STATUS_L     (222),
		.PKT_BURST_SIZE_H          (197),
		.PKT_BURST_SIZE_L          (195),
		.PKT_TRANS_LOCK            (180),
		.PKT_BEGIN_BURST           (202),
		.PKT_PROTECTION_H          (217),
		.PKT_PROTECTION_L          (215),
		.PKT_BURSTWRAP_H           (194),
		.PKT_BURSTWRAP_L           (192),
		.PKT_BYTE_CNT_H            (191),
		.PKT_BYTE_CNT_L            (182),
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_POSTED          (177),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (208),
		.PKT_SRC_ID_L              (204),
		.PKT_DEST_ID_H             (213),
		.PKT_DEST_ID_L             (209),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (227),
		.AVS_BURSTCOUNT_W          (5),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) from_idct_hwacel_descriptor_slave_agent (
		.clk                     (clk_125_clk_clk),                                                    //             clk.clk
		.reset                   (sysid_reset_reset_bridge_in_reset_reset),                            //       clk_reset.reset
		.m0_address              (from_idct_hwacel_descriptor_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (from_idct_hwacel_descriptor_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (from_idct_hwacel_descriptor_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (from_idct_hwacel_descriptor_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (from_idct_hwacel_descriptor_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (from_idct_hwacel_descriptor_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (from_idct_hwacel_descriptor_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (from_idct_hwacel_descriptor_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (from_idct_hwacel_descriptor_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (from_idct_hwacel_descriptor_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (from_idct_hwacel_descriptor_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (from_idct_hwacel_descriptor_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (from_idct_hwacel_descriptor_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (from_idct_hwacel_descriptor_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (from_idct_hwacel_descriptor_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (from_idct_hwacel_descriptor_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_018_source0_ready),                                   //              cp.ready
		.cp_valid                (agent_pipeline_018_source0_valid),                                   //                .valid
		.cp_data                 (agent_pipeline_018_source0_data),                                    //                .data
		.cp_startofpacket        (agent_pipeline_018_source0_startofpacket),                           //                .startofpacket
		.cp_endofpacket          (agent_pipeline_018_source0_endofpacket),                             //                .endofpacket
		.cp_channel              (agent_pipeline_018_source0_channel),                                 //                .channel
		.rf_sink_ready           (from_idct_hwacel_descriptor_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (from_idct_hwacel_descriptor_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (from_idct_hwacel_descriptor_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (from_idct_hwacel_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (from_idct_hwacel_descriptor_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (from_idct_hwacel_descriptor_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (from_idct_hwacel_descriptor_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (from_idct_hwacel_descriptor_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (from_idct_hwacel_descriptor_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (from_idct_hwacel_descriptor_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                                  //                .error
		.rdata_fifo_src_ready    (from_idct_hwacel_descriptor_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (from_idct_hwacel_descriptor_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (from_idct_hwacel_descriptor_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (228),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) from_idct_hwacel_descriptor_slave_agent_rsp_fifo (
		.clk               (clk_125_clk_clk),                                                    //       clk.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.in_data           (from_idct_hwacel_descriptor_slave_agent_rf_source_data),             //        in.data
		.in_valid          (from_idct_hwacel_descriptor_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (from_idct_hwacel_descriptor_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (from_idct_hwacel_descriptor_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (from_idct_hwacel_descriptor_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (from_idct_hwacel_descriptor_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (from_idct_hwacel_descriptor_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (from_idct_hwacel_descriptor_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (from_idct_hwacel_descriptor_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (from_idct_hwacel_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                              // (terminated)
		.csr_read          (1'b0),                                                               // (terminated)
		.csr_write         (1'b0),                                                               // (terminated)
		.csr_readdata      (),                                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                               // (terminated)
		.almost_full_data  (),                                                                   // (terminated)
		.almost_empty_data (),                                                                   // (terminated)
		.in_empty          (1'b0),                                                               // (terminated)
		.out_empty         (),                                                                   // (terminated)
		.in_error          (1'b0),                                                               // (terminated)
		.out_error         (),                                                                   // (terminated)
		.in_channel        (1'b0),                                                               // (terminated)
		.out_channel       ()                                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (130),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) from_idct_hwacel_descriptor_slave_agent_rdata_fifo (
		.clk               (clk_125_clk_clk),                                              //       clk.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.in_data           (from_idct_hwacel_descriptor_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (from_idct_hwacel_descriptor_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (from_idct_hwacel_descriptor_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (from_idct_hwacel_descriptor_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (from_idct_hwacel_descriptor_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (from_idct_hwacel_descriptor_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_startofpacket  (1'b0),                                                         // (terminated)
		.in_endofpacket    (1'b0),                                                         // (terminated)
		.out_startofpacket (),                                                             // (terminated)
		.out_endofpacket   (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (94),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (100),
		.PKT_SRC_ID_L              (96),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (101),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (119),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) timer_0_s1_agent (
		.clk                     (clk_125_clk_clk),                             //             clk.clk
		.reset                   (sysid_reset_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (timer_0_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (timer_0_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (timer_0_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (timer_0_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (timer_0_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (timer_0_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (timer_0_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (timer_0_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (timer_0_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (timer_0_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (timer_0_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (timer_0_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (timer_0_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (timer_0_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (timer_0_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (timer_0_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_020_source0_ready),            //              cp.ready
		.cp_valid                (agent_pipeline_020_source0_valid),            //                .valid
		.cp_data                 (agent_pipeline_020_source0_data),             //                .data
		.cp_startofpacket        (agent_pipeline_020_source0_startofpacket),    //                .startofpacket
		.cp_endofpacket          (agent_pipeline_020_source0_endofpacket),      //                .endofpacket
		.cp_channel              (agent_pipeline_020_source0_channel),          //                .channel
		.rf_sink_ready           (timer_0_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (timer_0_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (timer_0_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (timer_0_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (timer_0_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (timer_0_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (timer_0_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (timer_0_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (timer_0_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (timer_0_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),           //                .error
		.rdata_fifo_src_ready    (timer_0_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timer_0_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (timer_0_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (120),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_0_s1_agent_rsp_fifo (
		.clk               (clk_125_clk_clk),                             //       clk.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (timer_0_s1_agent_rf_source_data),             //        in.data
		.in_valid          (timer_0_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (timer_0_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (timer_0_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (timer_0_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (timer_0_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (timer_0_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (timer_0_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (timer_0_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (timer_0_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_0_s1_agent_rdata_fifo (
		.clk               (clk_125_clk_clk),                         //       clk.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (timer_0_s1_agent_rdata_fifo_src_data),    //        in.data
		.in_valid          (timer_0_s1_agent_rdata_fifo_src_valid),   //          .valid
		.in_ready          (timer_0_s1_agent_rdata_fifo_src_ready),   //          .ready
		.out_data          (timer_0_s1_agent_rdata_fifo_out_data),    //       out.data
		.out_valid         (timer_0_s1_agent_rdata_fifo_out_valid),   //          .valid
		.out_ready         (timer_0_s1_agent_rdata_fifo_out_ready),   //          .ready
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_startofpacket  (1'b0),                                    // (terminated)
		.in_endofpacket    (1'b0),                                    // (terminated)
		.out_startofpacket (),                                        // (terminated)
		.out_endofpacket   (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (94),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (100),
		.PKT_SRC_ID_L              (96),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (101),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (119),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) key_s1_agent (
		.clk                     (clk_125_clk_clk),                          //             clk.clk
		.reset                   (sysid_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (key_s1_agent_m0_address),                  //              m0.address
		.m0_burstcount           (key_s1_agent_m0_burstcount),               //                .burstcount
		.m0_byteenable           (key_s1_agent_m0_byteenable),               //                .byteenable
		.m0_debugaccess          (key_s1_agent_m0_debugaccess),              //                .debugaccess
		.m0_lock                 (key_s1_agent_m0_lock),                     //                .lock
		.m0_readdata             (key_s1_agent_m0_readdata),                 //                .readdata
		.m0_readdatavalid        (key_s1_agent_m0_readdatavalid),            //                .readdatavalid
		.m0_read                 (key_s1_agent_m0_read),                     //                .read
		.m0_waitrequest          (key_s1_agent_m0_waitrequest),              //                .waitrequest
		.m0_writedata            (key_s1_agent_m0_writedata),                //                .writedata
		.m0_write                (key_s1_agent_m0_write),                    //                .write
		.rp_endofpacket          (key_s1_agent_rp_endofpacket),              //              rp.endofpacket
		.rp_ready                (key_s1_agent_rp_ready),                    //                .ready
		.rp_valid                (key_s1_agent_rp_valid),                    //                .valid
		.rp_data                 (key_s1_agent_rp_data),                     //                .data
		.rp_startofpacket        (key_s1_agent_rp_startofpacket),            //                .startofpacket
		.cp_ready                (agent_pipeline_022_source0_ready),         //              cp.ready
		.cp_valid                (agent_pipeline_022_source0_valid),         //                .valid
		.cp_data                 (agent_pipeline_022_source0_data),          //                .data
		.cp_startofpacket        (agent_pipeline_022_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (agent_pipeline_022_source0_endofpacket),   //                .endofpacket
		.cp_channel              (agent_pipeline_022_source0_channel),       //                .channel
		.rf_sink_ready           (key_s1_agent_rsp_fifo_out_ready),          //         rf_sink.ready
		.rf_sink_valid           (key_s1_agent_rsp_fifo_out_valid),          //                .valid
		.rf_sink_startofpacket   (key_s1_agent_rsp_fifo_out_startofpacket),  //                .startofpacket
		.rf_sink_endofpacket     (key_s1_agent_rsp_fifo_out_endofpacket),    //                .endofpacket
		.rf_sink_data            (key_s1_agent_rsp_fifo_out_data),           //                .data
		.rf_source_ready         (key_s1_agent_rf_source_ready),             //       rf_source.ready
		.rf_source_valid         (key_s1_agent_rf_source_valid),             //                .valid
		.rf_source_startofpacket (key_s1_agent_rf_source_startofpacket),     //                .startofpacket
		.rf_source_endofpacket   (key_s1_agent_rf_source_endofpacket),       //                .endofpacket
		.rf_source_data          (key_s1_agent_rf_source_data),              //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),        //                .error
		.rdata_fifo_src_ready    (key_s1_agent_rdata_fifo_src_ready),        //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (key_s1_agent_rdata_fifo_src_valid),        //                .valid
		.rdata_fifo_src_data     (key_s1_agent_rdata_fifo_src_data),         //                .data
		.m0_response             (2'b00),                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (120),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) key_s1_agent_rsp_fifo (
		.clk               (clk_125_clk_clk),                         //       clk.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (key_s1_agent_rf_source_data),             //        in.data
		.in_valid          (key_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (key_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (key_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (key_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (key_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (key_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (key_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (key_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (key_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) key_s1_agent_rdata_fifo (
		.clk               (clk_125_clk_clk),                         //       clk.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (key_s1_agent_rdata_fifo_src_data),        //        in.data
		.in_valid          (key_s1_agent_rdata_fifo_src_valid),       //          .valid
		.in_ready          (key_s1_agent_rdata_fifo_src_ready),       //          .ready
		.out_data          (key_s1_agent_rdata_fifo_out_data),        //       out.data
		.out_valid         (key_s1_agent_rdata_fifo_out_valid),       //          .valid
		.out_ready         (key_s1_agent_rdata_fifo_out_ready),       //          .ready
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_startofpacket  (1'b0),                                    // (terminated)
		.in_endofpacket    (1'b0),                                    // (terminated)
		.out_startofpacket (),                                        // (terminated)
		.out_endofpacket   (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (94),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (100),
		.PKT_SRC_ID_L              (96),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (101),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (119),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) timer_1_s1_agent (
		.clk                     (clk_125_clk_clk),                             //             clk.clk
		.reset                   (sysid_reset_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (timer_1_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (timer_1_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (timer_1_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (timer_1_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (timer_1_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (timer_1_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (timer_1_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (timer_1_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (timer_1_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (timer_1_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (timer_1_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (timer_1_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (timer_1_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (timer_1_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (timer_1_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (timer_1_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_024_source0_ready),            //              cp.ready
		.cp_valid                (agent_pipeline_024_source0_valid),            //                .valid
		.cp_data                 (agent_pipeline_024_source0_data),             //                .data
		.cp_startofpacket        (agent_pipeline_024_source0_startofpacket),    //                .startofpacket
		.cp_endofpacket          (agent_pipeline_024_source0_endofpacket),      //                .endofpacket
		.cp_channel              (agent_pipeline_024_source0_channel),          //                .channel
		.rf_sink_ready           (timer_1_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (timer_1_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (timer_1_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (timer_1_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (timer_1_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (timer_1_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (timer_1_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (timer_1_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (timer_1_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (timer_1_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_012_out_0_ready),           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_012_out_0_valid),           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_012_out_0_data),            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_012_out_0_error),           //                .error
		.rdata_fifo_src_ready    (timer_1_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timer_1_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (timer_1_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (120),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_1_s1_agent_rsp_fifo (
		.clk               (clk_125_clk_clk),                             //       clk.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (timer_1_s1_agent_rf_source_data),             //        in.data
		.in_valid          (timer_1_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (timer_1_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (timer_1_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (timer_1_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (timer_1_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (timer_1_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (timer_1_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (timer_1_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (timer_1_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_1_s1_agent_rdata_fifo (
		.clk               (clk_125_clk_clk),                         //       clk.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (timer_1_s1_agent_rdata_fifo_src_data),    //        in.data
		.in_valid          (timer_1_s1_agent_rdata_fifo_src_valid),   //          .valid
		.in_ready          (timer_1_s1_agent_rdata_fifo_src_ready),   //          .ready
		.out_data          (timer_1_s1_agent_rdata_fifo_out_data),    //       out.data
		.out_valid         (timer_1_s1_agent_rdata_fifo_out_valid),   //          .valid
		.out_ready         (timer_1_s1_agent_rdata_fifo_out_ready),   //          .ready
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_startofpacket  (1'b0),                                    // (terminated)
		.in_endofpacket    (1'b0),                                    // (terminated)
		.out_startofpacket (),                                        // (terminated)
		.out_endofpacket   (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (94),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (100),
		.PKT_SRC_ID_L              (96),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (101),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (119),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ledg_s1_agent (
		.clk                     (clk_125_clk_clk),                          //             clk.clk
		.reset                   (sysid_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (ledg_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (ledg_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (ledg_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (ledg_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (ledg_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (ledg_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (ledg_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (ledg_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (ledg_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (ledg_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (ledg_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (ledg_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (ledg_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (ledg_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (ledg_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (ledg_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_026_source0_ready),         //              cp.ready
		.cp_valid                (agent_pipeline_026_source0_valid),         //                .valid
		.cp_data                 (agent_pipeline_026_source0_data),          //                .data
		.cp_startofpacket        (agent_pipeline_026_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (agent_pipeline_026_source0_endofpacket),   //                .endofpacket
		.cp_channel              (agent_pipeline_026_source0_channel),       //                .channel
		.rf_sink_ready           (ledg_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (ledg_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (ledg_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (ledg_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (ledg_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (ledg_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (ledg_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (ledg_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (ledg_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (ledg_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_013_out_0_ready),        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_013_out_0_valid),        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_013_out_0_data),         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_013_out_0_error),        //                .error
		.rdata_fifo_src_ready    (ledg_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ledg_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (ledg_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (120),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ledg_s1_agent_rsp_fifo (
		.clk               (clk_125_clk_clk),                          //       clk.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (ledg_s1_agent_rf_source_data),             //        in.data
		.in_valid          (ledg_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (ledg_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (ledg_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (ledg_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (ledg_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (ledg_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (ledg_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (ledg_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (ledg_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                    // (terminated)
		.csr_read          (1'b0),                                     // (terminated)
		.csr_write         (1'b0),                                     // (terminated)
		.csr_readdata      (),                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),     // (terminated)
		.almost_full_data  (),                                         // (terminated)
		.almost_empty_data (),                                         // (terminated)
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_error         (),                                         // (terminated)
		.in_channel        (1'b0),                                     // (terminated)
		.out_channel       ()                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ledg_s1_agent_rdata_fifo (
		.clk               (clk_125_clk_clk),                         //       clk.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ledg_s1_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (ledg_s1_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (ledg_s1_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (ledg_s1_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (ledg_s1_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (ledg_s1_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_startofpacket  (1'b0),                                    // (terminated)
		.in_endofpacket    (1'b0),                                    // (terminated)
		.out_startofpacket (),                                        // (terminated)
		.out_endofpacket   (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (94),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (100),
		.PKT_SRC_ID_L              (96),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (101),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (119),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ledr_s1_agent (
		.clk                     (clk_125_clk_clk),                          //             clk.clk
		.reset                   (sysid_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (ledr_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (ledr_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (ledr_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (ledr_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (ledr_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (ledr_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (ledr_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (ledr_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (ledr_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (ledr_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (ledr_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (ledr_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (ledr_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (ledr_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (ledr_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (ledr_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_028_source0_ready),         //              cp.ready
		.cp_valid                (agent_pipeline_028_source0_valid),         //                .valid
		.cp_data                 (agent_pipeline_028_source0_data),          //                .data
		.cp_startofpacket        (agent_pipeline_028_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (agent_pipeline_028_source0_endofpacket),   //                .endofpacket
		.cp_channel              (agent_pipeline_028_source0_channel),       //                .channel
		.rf_sink_ready           (ledr_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (ledr_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (ledr_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (ledr_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (ledr_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (ledr_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (ledr_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (ledr_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (ledr_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (ledr_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_014_out_0_ready),        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_014_out_0_valid),        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_014_out_0_data),         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_014_out_0_error),        //                .error
		.rdata_fifo_src_ready    (ledr_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ledr_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (ledr_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (120),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ledr_s1_agent_rsp_fifo (
		.clk               (clk_125_clk_clk),                          //       clk.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (ledr_s1_agent_rf_source_data),             //        in.data
		.in_valid          (ledr_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (ledr_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (ledr_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (ledr_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (ledr_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (ledr_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (ledr_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (ledr_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (ledr_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                    // (terminated)
		.csr_read          (1'b0),                                     // (terminated)
		.csr_write         (1'b0),                                     // (terminated)
		.csr_readdata      (),                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),     // (terminated)
		.almost_full_data  (),                                         // (terminated)
		.almost_empty_data (),                                         // (terminated)
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_error         (),                                         // (terminated)
		.in_channel        (1'b0),                                     // (terminated)
		.out_channel       ()                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ledr_s1_agent_rdata_fifo (
		.clk               (clk_125_clk_clk),                         //       clk.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ledr_s1_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (ledr_s1_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (ledr_s1_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (ledr_s1_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (ledr_s1_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (ledr_s1_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_startofpacket  (1'b0),                                    // (terminated)
		.in_endofpacket    (1'b0),                                    // (terminated)
		.out_startofpacket (),                                        // (terminated)
		.out_endofpacket   (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (94),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (100),
		.PKT_SRC_ID_L              (96),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (101),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (119),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) i2c_scl_s1_agent (
		.clk                     (clk_125_clk_clk),                             //             clk.clk
		.reset                   (sysid_reset_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (i2c_scl_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (i2c_scl_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (i2c_scl_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (i2c_scl_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (i2c_scl_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (i2c_scl_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (i2c_scl_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (i2c_scl_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (i2c_scl_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (i2c_scl_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (i2c_scl_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (i2c_scl_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (i2c_scl_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (i2c_scl_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (i2c_scl_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (i2c_scl_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_030_source0_ready),            //              cp.ready
		.cp_valid                (agent_pipeline_030_source0_valid),            //                .valid
		.cp_data                 (agent_pipeline_030_source0_data),             //                .data
		.cp_startofpacket        (agent_pipeline_030_source0_startofpacket),    //                .startofpacket
		.cp_endofpacket          (agent_pipeline_030_source0_endofpacket),      //                .endofpacket
		.cp_channel              (agent_pipeline_030_source0_channel),          //                .channel
		.rf_sink_ready           (i2c_scl_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (i2c_scl_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (i2c_scl_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (i2c_scl_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (i2c_scl_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (i2c_scl_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (i2c_scl_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (i2c_scl_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (i2c_scl_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (i2c_scl_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_015_out_0_ready),           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_015_out_0_valid),           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_015_out_0_data),            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_015_out_0_error),           //                .error
		.rdata_fifo_src_ready    (i2c_scl_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (i2c_scl_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (i2c_scl_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (120),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) i2c_scl_s1_agent_rsp_fifo (
		.clk               (clk_125_clk_clk),                             //       clk.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (i2c_scl_s1_agent_rf_source_data),             //        in.data
		.in_valid          (i2c_scl_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (i2c_scl_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (i2c_scl_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (i2c_scl_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (i2c_scl_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (i2c_scl_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (i2c_scl_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (i2c_scl_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (i2c_scl_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) i2c_scl_s1_agent_rdata_fifo (
		.clk               (clk_125_clk_clk),                         //       clk.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (i2c_scl_s1_agent_rdata_fifo_src_data),    //        in.data
		.in_valid          (i2c_scl_s1_agent_rdata_fifo_src_valid),   //          .valid
		.in_ready          (i2c_scl_s1_agent_rdata_fifo_src_ready),   //          .ready
		.out_data          (i2c_scl_s1_agent_rdata_fifo_out_data),    //       out.data
		.out_valid         (i2c_scl_s1_agent_rdata_fifo_out_valid),   //          .valid
		.out_ready         (i2c_scl_s1_agent_rdata_fifo_out_ready),   //          .ready
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_startofpacket  (1'b0),                                    // (terminated)
		.in_endofpacket    (1'b0),                                    // (terminated)
		.out_startofpacket (),                                        // (terminated)
		.out_endofpacket   (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (94),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (100),
		.PKT_SRC_ID_L              (96),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (101),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (119),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) i2c_sda_s1_agent (
		.clk                     (clk_125_clk_clk),                             //             clk.clk
		.reset                   (sysid_reset_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (i2c_sda_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (i2c_sda_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (i2c_sda_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (i2c_sda_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (i2c_sda_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (i2c_sda_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (i2c_sda_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (i2c_sda_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (i2c_sda_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (i2c_sda_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (i2c_sda_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (i2c_sda_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (i2c_sda_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (i2c_sda_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (i2c_sda_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (i2c_sda_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_032_source0_ready),            //              cp.ready
		.cp_valid                (agent_pipeline_032_source0_valid),            //                .valid
		.cp_data                 (agent_pipeline_032_source0_data),             //                .data
		.cp_startofpacket        (agent_pipeline_032_source0_startofpacket),    //                .startofpacket
		.cp_endofpacket          (agent_pipeline_032_source0_endofpacket),      //                .endofpacket
		.cp_channel              (agent_pipeline_032_source0_channel),          //                .channel
		.rf_sink_ready           (i2c_sda_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (i2c_sda_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (i2c_sda_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (i2c_sda_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (i2c_sda_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (i2c_sda_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (i2c_sda_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (i2c_sda_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (i2c_sda_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (i2c_sda_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_016_out_0_ready),           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_016_out_0_valid),           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_016_out_0_data),            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_016_out_0_error),           //                .error
		.rdata_fifo_src_ready    (i2c_sda_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (i2c_sda_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (i2c_sda_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (120),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) i2c_sda_s1_agent_rsp_fifo (
		.clk               (clk_125_clk_clk),                             //       clk.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (i2c_sda_s1_agent_rf_source_data),             //        in.data
		.in_valid          (i2c_sda_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (i2c_sda_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (i2c_sda_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (i2c_sda_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (i2c_sda_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (i2c_sda_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (i2c_sda_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (i2c_sda_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (i2c_sda_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) i2c_sda_s1_agent_rdata_fifo (
		.clk               (clk_125_clk_clk),                         //       clk.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (i2c_sda_s1_agent_rdata_fifo_src_data),    //        in.data
		.in_valid          (i2c_sda_s1_agent_rdata_fifo_src_valid),   //          .valid
		.in_ready          (i2c_sda_s1_agent_rdata_fifo_src_ready),   //          .ready
		.out_data          (i2c_sda_s1_agent_rdata_fifo_out_data),    //       out.data
		.out_valid         (i2c_sda_s1_agent_rdata_fifo_out_valid),   //          .valid
		.out_ready         (i2c_sda_s1_agent_rdata_fifo_out_ready),   //          .ready
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_startofpacket  (1'b0),                                    // (terminated)
		.in_endofpacket    (1'b0),                                    // (terminated)
		.out_startofpacket (),                                        // (terminated)
		.out_endofpacket   (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (94),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (100),
		.PKT_SRC_ID_L              (96),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (101),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (119),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sd_cont_0_slave_agent (
		.clk                     (clk_50_out_clk_clk),                               //             clk.clk
		.reset                   (sd_cont_0_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (sd_cont_0_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sd_cont_0_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sd_cont_0_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sd_cont_0_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sd_cont_0_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (sd_cont_0_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sd_cont_0_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sd_cont_0_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (sd_cont_0_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sd_cont_0_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (sd_cont_0_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (sd_cont_0_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sd_cont_0_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (sd_cont_0_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (sd_cont_0_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (sd_cont_0_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_034_source0_ready),                 //              cp.ready
		.cp_valid                (agent_pipeline_034_source0_valid),                 //                .valid
		.cp_data                 (agent_pipeline_034_source0_data),                  //                .data
		.cp_startofpacket        (agent_pipeline_034_source0_startofpacket),         //                .startofpacket
		.cp_endofpacket          (agent_pipeline_034_source0_endofpacket),           //                .endofpacket
		.cp_channel              (agent_pipeline_034_source0_channel),               //                .channel
		.rf_sink_ready           (sd_cont_0_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sd_cont_0_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sd_cont_0_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sd_cont_0_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sd_cont_0_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sd_cont_0_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sd_cont_0_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sd_cont_0_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sd_cont_0_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sd_cont_0_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_017_out_0_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_017_out_0_valid),                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_017_out_0_data),                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_017_out_0_error),                //                .error
		.rdata_fifo_src_ready    (sd_cont_0_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sd_cont_0_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sd_cont_0_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (120),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sd_cont_0_slave_agent_rsp_fifo (
		.clk               (clk_50_out_clk_clk),                               //       clk.clk
		.reset             (sd_cont_0_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (sd_cont_0_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sd_cont_0_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sd_cont_0_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sd_cont_0_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sd_cont_0_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sd_cont_0_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sd_cont_0_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sd_cont_0_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sd_cont_0_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sd_cont_0_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sd_cont_0_slave_agent_rdata_fifo (
		.clk               (clk_50_out_clk_clk),                          //       clk.clk
		.reset             (sd_cont_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sd_cont_0_slave_agent_rdata_fifo_src_data),   //        in.data
		.in_valid          (sd_cont_0_slave_agent_rdata_fifo_src_valid),  //          .valid
		.in_ready          (sd_cont_0_slave_agent_rdata_fifo_src_ready),  //          .ready
		.out_data          (sd_cont_0_slave_agent_rdata_fifo_out_data),   //       out.data
		.out_valid         (sd_cont_0_slave_agent_rdata_fifo_out_valid),  //          .valid
		.out_ready         (sd_cont_0_slave_agent_rdata_fifo_out_ready),  //          .ready
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_startofpacket  (1'b0),                                        // (terminated)
		.in_endofpacket    (1'b0),                                        // (terminated)
		.out_startofpacket (),                                            // (terminated)
		.out_endofpacket   (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (100),
		.PKT_ORI_BURST_SIZE_L      (98),
		.PKT_RESPONSE_STATUS_H     (97),
		.PKT_RESPONSE_STATUS_L     (96),
		.PKT_BURST_SIZE_H          (71),
		.PKT_BURST_SIZE_L          (69),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (76),
		.PKT_PROTECTION_H          (91),
		.PKT_PROTECTION_L          (89),
		.PKT_BURSTWRAP_H           (68),
		.PKT_BURSTWRAP_L           (66),
		.PKT_BYTE_CNT_H            (65),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (82),
		.PKT_SRC_ID_L              (78),
		.PKT_DEST_ID_H             (87),
		.PKT_DEST_ID_L             (83),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (101),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sram_uas_agent (
		.clk                     (clk_125_clk_clk),                           //             clk.clk
		.reset                   (sysid_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (sram_uas_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sram_uas_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sram_uas_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sram_uas_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sram_uas_agent_m0_lock),                    //                .lock
		.m0_readdata             (sram_uas_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sram_uas_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sram_uas_agent_m0_read),                    //                .read
		.m0_waitrequest          (sram_uas_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sram_uas_agent_m0_writedata),               //                .writedata
		.m0_write                (sram_uas_agent_m0_write),                   //                .write
		.rp_endofpacket          (sram_uas_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sram_uas_agent_rp_ready),                   //                .ready
		.rp_valid                (sram_uas_agent_rp_valid),                   //                .valid
		.rp_data                 (sram_uas_agent_rp_data),                    //                .data
		.rp_startofpacket        (sram_uas_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_036_source0_ready),          //              cp.ready
		.cp_valid                (agent_pipeline_036_source0_valid),          //                .valid
		.cp_data                 (agent_pipeline_036_source0_data),           //                .data
		.cp_startofpacket        (agent_pipeline_036_source0_startofpacket),  //                .startofpacket
		.cp_endofpacket          (agent_pipeline_036_source0_endofpacket),    //                .endofpacket
		.cp_channel              (agent_pipeline_036_source0_channel),        //                .channel
		.rf_sink_ready           (sram_uas_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sram_uas_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sram_uas_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sram_uas_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sram_uas_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sram_uas_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sram_uas_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sram_uas_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sram_uas_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sram_uas_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_018_out_0_ready),         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_018_out_0_valid),         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_018_out_0_data),          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_018_out_0_error),         //                .error
		.rdata_fifo_src_ready    (sram_uas_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sram_uas_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sram_uas_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (102),
		.FIFO_DEPTH          (4),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_uas_agent_rsp_fifo (
		.clk               (clk_125_clk_clk),                           //       clk.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (sram_uas_agent_rf_source_data),             //        in.data
		.in_valid          (sram_uas_agent_rf_source_valid),            //          .valid
		.in_ready          (sram_uas_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sram_uas_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sram_uas_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sram_uas_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sram_uas_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sram_uas_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sram_uas_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sram_uas_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (4),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_uas_agent_rdata_fifo (
		.clk               (clk_125_clk_clk),                         //       clk.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sram_uas_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (sram_uas_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (sram_uas_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (sram_uas_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (sram_uas_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (sram_uas_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_startofpacket  (1'b0),                                    // (terminated)
		.in_endofpacket    (1'b0),                                    // (terminated)
		.out_startofpacket (),                                        // (terminated)
		.out_endofpacket   (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	ECE423_QSYS_mm_interconnect_0_router router (
		.sink_ready         (cpu_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (cpu_data_master_agent_cp_valid),         //          .valid
		.sink_data          (cpu_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (cpu_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_125_clk_clk),                        //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_src_ready),                       //       src.ready
		.src_valid          (router_src_valid),                       //          .valid
		.src_data           (router_src_data),                        //          .data
		.src_channel        (router_src_channel),                     //          .channel
		.src_startofpacket  (router_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                  //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (cpu_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (cpu_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (cpu_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (cpu_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_125_clk_clk),                               //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_001_src_ready),                          //       src.ready
		.src_valid          (router_001_src_valid),                          //          .valid
		.src_data           (router_001_src_data),                           //          .data
		.src_channel        (router_001_src_channel),                        //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                     //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (pipeline_stage_source0_ready),                //      sink.ready
		.sink_valid         (pipeline_stage_source0_valid),                //          .valid
		.sink_data          (pipeline_stage_source0_data),                 //          .data
		.sink_startofpacket (pipeline_stage_source0_startofpacket),        //          .startofpacket
		.sink_endofpacket   (pipeline_stage_source0_endofpacket),          //          .endofpacket
		.clk                (clk_50_out_clk_clk),                          //       clk.clk
		.reset              (sd_cont_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                        //       src.ready
		.src_valid          (router_002_src_valid),                        //          .valid
		.src_data           (router_002_src_data),                         //          .data
		.src_channel        (router_002_src_channel),                      //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                   //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (agent_pipeline_001_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_001_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_001_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_001_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_001_source0_endofpacket),   //          .endofpacket
		.clk                (clk_125_clk_clk),                          //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_003_src_ready),                     //       src.ready
		.src_valid          (router_003_src_valid),                     //          .valid
		.src_data           (router_003_src_data),                      //          .data
		.src_channel        (router_003_src_channel),                   //          .channel
		.src_startofpacket  (router_003_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_router_004 router_004 (
		.sink_ready         (agent_pipeline_003_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_003_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_003_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_003_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_003_source0_endofpacket),   //          .endofpacket
		.clk                (clk_125_clk_clk),                          //       clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_004_src_ready),                     //       src.ready
		.src_valid          (router_004_src_valid),                     //          .valid
		.src_data           (router_004_src_data),                      //          .data
		.src_channel        (router_004_src_channel),                   //          .channel
		.src_startofpacket  (router_004_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_router_003 router_005 (
		.sink_ready         (agent_pipeline_005_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_005_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_005_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_005_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_005_source0_endofpacket),   //          .endofpacket
		.clk                (clk_125_clk_clk),                          //       clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_005_src_ready),                     //       src.ready
		.src_valid          (router_005_src_valid),                     //          .valid
		.src_data           (router_005_src_data),                      //          .data
		.src_channel        (router_005_src_channel),                   //          .channel
		.src_startofpacket  (router_005_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_router_003 router_006 (
		.sink_ready         (agent_pipeline_007_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_007_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_007_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_007_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_007_source0_endofpacket),   //          .endofpacket
		.clk                (clk_125_clk_clk),                          //       clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_006_src_ready),                     //       src.ready
		.src_valid          (router_006_src_valid),                     //          .valid
		.src_data           (router_006_src_data),                      //          .data
		.src_channel        (router_006_src_channel),                   //          .channel
		.src_startofpacket  (router_006_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_router_003 router_007 (
		.sink_ready         (agent_pipeline_009_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_009_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_009_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_009_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_009_source0_endofpacket),   //          .endofpacket
		.clk                (clk_125_clk_clk),                          //       clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_007_src_ready),                     //       src.ready
		.src_valid          (router_007_src_valid),                     //          .valid
		.src_data           (router_007_src_data),                      //          .data
		.src_channel        (router_007_src_channel),                   //          .channel
		.src_startofpacket  (router_007_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_router_003 router_008 (
		.sink_ready         (agent_pipeline_011_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_011_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_011_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_011_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_011_source0_endofpacket),   //          .endofpacket
		.clk                (clk_125_clk_clk),                          //       clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_008_src_ready),                     //       src.ready
		.src_valid          (router_008_src_valid),                     //          .valid
		.src_data           (router_008_src_data),                      //          .data
		.src_channel        (router_008_src_channel),                   //          .channel
		.src_startofpacket  (router_008_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_router_009 router_009 (
		.sink_ready         (agent_pipeline_013_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_013_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_013_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_013_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_013_source0_endofpacket),   //          .endofpacket
		.clk                (clk_125_clk_clk),                          //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_009_src_ready),                     //       src.ready
		.src_valid          (router_009_src_valid),                     //          .valid
		.src_data           (router_009_src_data),                      //          .data
		.src_channel        (router_009_src_channel),                   //          .channel
		.src_startofpacket  (router_009_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_router_010 router_010 (
		.sink_ready         (agent_pipeline_015_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_015_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_015_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_015_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_015_source0_endofpacket),   //          .endofpacket
		.clk                (clk_125_clk_clk),                          //       clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_010_src_ready),                     //       src.ready
		.src_valid          (router_010_src_valid),                     //          .valid
		.src_data           (router_010_src_data),                      //          .data
		.src_channel        (router_010_src_channel),                   //          .channel
		.src_startofpacket  (router_010_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_router_010 router_011 (
		.sink_ready         (agent_pipeline_017_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_017_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_017_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_017_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_017_source0_endofpacket),   //          .endofpacket
		.clk                (clk_125_clk_clk),                          //       clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_011_src_ready),                     //       src.ready
		.src_valid          (router_011_src_valid),                     //          .valid
		.src_data           (router_011_src_data),                      //          .data
		.src_channel        (router_011_src_channel),                   //          .channel
		.src_startofpacket  (router_011_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_router_010 router_012 (
		.sink_ready         (agent_pipeline_019_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_019_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_019_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_019_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_019_source0_endofpacket),   //          .endofpacket
		.clk                (clk_125_clk_clk),                          //       clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_012_src_ready),                     //       src.ready
		.src_valid          (router_012_src_valid),                     //          .valid
		.src_data           (router_012_src_data),                      //          .data
		.src_channel        (router_012_src_channel),                   //          .channel
		.src_startofpacket  (router_012_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_router_003 router_013 (
		.sink_ready         (agent_pipeline_021_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_021_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_021_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_021_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_021_source0_endofpacket),   //          .endofpacket
		.clk                (clk_125_clk_clk),                          //       clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_013_src_ready),                     //       src.ready
		.src_valid          (router_013_src_valid),                     //          .valid
		.src_data           (router_013_src_data),                      //          .data
		.src_channel        (router_013_src_channel),                   //          .channel
		.src_startofpacket  (router_013_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_router_003 router_014 (
		.sink_ready         (agent_pipeline_023_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_023_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_023_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_023_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_023_source0_endofpacket),   //          .endofpacket
		.clk                (clk_125_clk_clk),                          //       clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_014_src_ready),                     //       src.ready
		.src_valid          (router_014_src_valid),                     //          .valid
		.src_data           (router_014_src_data),                      //          .data
		.src_channel        (router_014_src_channel),                   //          .channel
		.src_startofpacket  (router_014_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_router_003 router_015 (
		.sink_ready         (agent_pipeline_025_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_025_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_025_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_025_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_025_source0_endofpacket),   //          .endofpacket
		.clk                (clk_125_clk_clk),                          //       clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_015_src_ready),                     //       src.ready
		.src_valid          (router_015_src_valid),                     //          .valid
		.src_data           (router_015_src_data),                      //          .data
		.src_channel        (router_015_src_channel),                   //          .channel
		.src_startofpacket  (router_015_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_router_003 router_016 (
		.sink_ready         (agent_pipeline_027_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_027_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_027_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_027_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_027_source0_endofpacket),   //          .endofpacket
		.clk                (clk_125_clk_clk),                          //       clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_016_src_ready),                     //       src.ready
		.src_valid          (router_016_src_valid),                     //          .valid
		.src_data           (router_016_src_data),                      //          .data
		.src_channel        (router_016_src_channel),                   //          .channel
		.src_startofpacket  (router_016_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_router_003 router_017 (
		.sink_ready         (agent_pipeline_029_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_029_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_029_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_029_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_029_source0_endofpacket),   //          .endofpacket
		.clk                (clk_125_clk_clk),                          //       clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_017_src_ready),                     //       src.ready
		.src_valid          (router_017_src_valid),                     //          .valid
		.src_data           (router_017_src_data),                      //          .data
		.src_channel        (router_017_src_channel),                   //          .channel
		.src_startofpacket  (router_017_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_router_003 router_018 (
		.sink_ready         (agent_pipeline_031_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_031_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_031_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_031_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_031_source0_endofpacket),   //          .endofpacket
		.clk                (clk_125_clk_clk),                          //       clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_018_src_ready),                     //       src.ready
		.src_valid          (router_018_src_valid),                     //          .valid
		.src_data           (router_018_src_data),                      //          .data
		.src_channel        (router_018_src_channel),                   //          .channel
		.src_startofpacket  (router_018_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_router_003 router_019 (
		.sink_ready         (agent_pipeline_033_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_033_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_033_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_033_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_033_source0_endofpacket),   //          .endofpacket
		.clk                (clk_125_clk_clk),                          //       clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_019_src_ready),                     //       src.ready
		.src_valid          (router_019_src_valid),                     //          .valid
		.src_data           (router_019_src_data),                      //          .data
		.src_channel        (router_019_src_channel),                   //          .channel
		.src_startofpacket  (router_019_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)                //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_router_003 router_020 (
		.sink_ready         (agent_pipeline_035_source0_ready),            //      sink.ready
		.sink_valid         (agent_pipeline_035_source0_valid),            //          .valid
		.sink_data          (agent_pipeline_035_source0_data),             //          .data
		.sink_startofpacket (agent_pipeline_035_source0_startofpacket),    //          .startofpacket
		.sink_endofpacket   (agent_pipeline_035_source0_endofpacket),      //          .endofpacket
		.clk                (clk_50_out_clk_clk),                          //       clk.clk
		.reset              (sd_cont_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_020_src_ready),                        //       src.ready
		.src_valid          (router_020_src_valid),                        //          .valid
		.src_data           (router_020_src_data),                         //          .data
		.src_channel        (router_020_src_channel),                      //          .channel
		.src_startofpacket  (router_020_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_020_src_endofpacket)                   //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_router_021 router_021 (
		.sink_ready         (agent_pipeline_037_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_037_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_037_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_037_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_037_source0_endofpacket),   //          .endofpacket
		.clk                (clk_125_clk_clk),                          //       clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_021_src_ready),                     //       src.ready
		.src_valid          (router_021_src_valid),                     //          .valid
		.src_data           (router_021_src_data),                      //          .data
		.src_channel        (router_021_src_channel),                   //          .channel
		.src_startofpacket  (router_021_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_021_src_endofpacket)                //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (101),
		.PKT_SRC_ID_H              (100),
		.PKT_SRC_ID_L              (96),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (60),
		.PIPELINED                 (0),
		.ST_DATA_W                 (119),
		.ST_CHANNEL_W              (19),
		.VALID_WIDTH               (1),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) cpu_data_master_limiter (
		.clk                    (clk_125_clk_clk),                               //       clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                              //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                              //          .valid
		.cmd_sink_data          (router_src_data),                               //          .data
		.cmd_sink_channel       (router_src_channel),                            //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                      //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                        //          .endofpacket
		.cmd_src_ready          (cpu_data_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (cpu_data_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (cpu_data_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (cpu_data_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (cpu_data_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (cpu_data_master_limiter_cmd_src_valid),         //          .valid
		.rsp_sink_ready         (limiter_pipeline_001_source0_ready),            //  rsp_sink.ready
		.rsp_sink_valid         (limiter_pipeline_001_source0_valid),            //          .valid
		.rsp_sink_channel       (limiter_pipeline_001_source0_channel),          //          .channel
		.rsp_sink_data          (limiter_pipeline_001_source0_data),             //          .data
		.rsp_sink_startofpacket (limiter_pipeline_001_source0_startofpacket),    //          .startofpacket
		.rsp_sink_endofpacket   (limiter_pipeline_001_source0_endofpacket),      //          .endofpacket
		.rsp_src_ready          (cpu_data_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (cpu_data_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (cpu_data_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (cpu_data_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (cpu_data_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (cpu_data_master_limiter_rsp_src_endofpacket)    //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (101),
		.PKT_SRC_ID_H              (100),
		.PKT_SRC_ID_L              (96),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (17),
		.PIPELINED                 (0),
		.ST_DATA_W                 (119),
		.ST_CHANNEL_W              (19),
		.VALID_WIDTH               (1),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) cpu_instruction_master_limiter (
		.clk                    (clk_125_clk_clk),                                      //       clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                 //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                 //          .valid
		.cmd_sink_data          (router_001_src_data),                                  //          .data
		.cmd_sink_channel       (router_001_src_channel),                               //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                         //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                           //          .endofpacket
		.cmd_src_ready          (cpu_instruction_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (cpu_instruction_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (cpu_instruction_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (cpu_instruction_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (cpu_instruction_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (cpu_instruction_master_limiter_cmd_src_valid),         //          .valid
		.rsp_sink_ready         (limiter_pipeline_003_source0_ready),                   //  rsp_sink.ready
		.rsp_sink_valid         (limiter_pipeline_003_source0_valid),                   //          .valid
		.rsp_sink_channel       (limiter_pipeline_003_source0_channel),                 //          .channel
		.rsp_sink_data          (limiter_pipeline_003_source0_data),                    //          .data
		.rsp_sink_startofpacket (limiter_pipeline_003_source0_startofpacket),           //          .startofpacket
		.rsp_sink_endofpacket   (limiter_pipeline_003_source0_endofpacket),             //          .endofpacket
		.rsp_src_ready          (cpu_instruction_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (cpu_instruction_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (cpu_instruction_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (cpu_instruction_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (cpu_instruction_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (cpu_instruction_master_limiter_rsp_src_endofpacket)    //          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (94),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_BURST_TYPE_H          (91),
		.PKT_BURST_TYPE_L          (90),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (119),
		.ST_CHANNEL_W              (19),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (86),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) jtag_uart_avalon_jtag_slave_burst_adapter (
		.clk                   (clk_125_clk_clk),                                                 //       cr0.clk
		.reset                 (cpu_reset_reset_bridge_in_reset_reset),                           // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                               //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                                //          .data
		.sink0_channel         (cmd_mux_src_channel),                                             //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                         //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                               //          .ready
		.source0_valid         (jtag_uart_avalon_jtag_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (jtag_uart_avalon_jtag_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (jtag_uart_avalon_jtag_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (jtag_uart_avalon_jtag_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (jtag_uart_avalon_jtag_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (jtag_uart_avalon_jtag_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (94),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_BURST_TYPE_H          (91),
		.PKT_BURST_TYPE_L          (90),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (119),
		.ST_CHANNEL_W              (19),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (86),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) sysid_control_slave_burst_adapter (
		.clk                   (clk_125_clk_clk),                                         //       cr0.clk
		.reset                 (sysid_reset_reset_bridge_in_reset_reset),                 // cr0_reset.reset
		.sink0_valid           (cmd_mux_002_src_valid),                                   //     sink0.valid
		.sink0_data            (cmd_mux_002_src_data),                                    //          .data
		.sink0_channel         (cmd_mux_002_src_channel),                                 //          .channel
		.sink0_startofpacket   (cmd_mux_002_src_startofpacket),                           //          .startofpacket
		.sink0_endofpacket     (cmd_mux_002_src_endofpacket),                             //          .endofpacket
		.sink0_ready           (cmd_mux_002_src_ready),                                   //          .ready
		.source0_valid         (sysid_control_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sysid_control_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (sysid_control_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sysid_control_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sysid_control_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sysid_control_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (94),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_BURST_TYPE_H          (91),
		.PKT_BURST_TYPE_L          (90),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (119),
		.ST_CHANNEL_W              (19),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (86),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) video_dma_csr_burst_adapter (
		.clk                   (clk_125_clk_clk),                                   //       cr0.clk
		.reset                 (sysid_reset_reset_bridge_in_reset_reset),           // cr0_reset.reset
		.sink0_valid           (cmd_mux_003_src_valid),                             //     sink0.valid
		.sink0_data            (cmd_mux_003_src_data),                              //          .data
		.sink0_channel         (cmd_mux_003_src_channel),                           //          .channel
		.sink0_startofpacket   (cmd_mux_003_src_startofpacket),                     //          .startofpacket
		.sink0_endofpacket     (cmd_mux_003_src_endofpacket),                       //          .endofpacket
		.sink0_ready           (cmd_mux_003_src_ready),                             //          .ready
		.source0_valid         (video_dma_csr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (video_dma_csr_burst_adapter_source0_data),          //          .data
		.source0_channel       (video_dma_csr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (video_dma_csr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (video_dma_csr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (video_dma_csr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (94),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_BURST_TYPE_H          (91),
		.PKT_BURST_TYPE_L          (90),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (119),
		.ST_CHANNEL_W              (19),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (86),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) to_idct_hwacel_csr_burst_adapter (
		.clk                   (clk_125_clk_clk),                                        //       cr0.clk
		.reset                 (sysid_reset_reset_bridge_in_reset_reset),                // cr0_reset.reset
		.sink0_valid           (cmd_mux_004_src_valid),                                  //     sink0.valid
		.sink0_data            (cmd_mux_004_src_data),                                   //          .data
		.sink0_channel         (cmd_mux_004_src_channel),                                //          .channel
		.sink0_startofpacket   (cmd_mux_004_src_startofpacket),                          //          .startofpacket
		.sink0_endofpacket     (cmd_mux_004_src_endofpacket),                            //          .endofpacket
		.sink0_ready           (cmd_mux_004_src_ready),                                  //          .ready
		.source0_valid         (to_idct_hwacel_csr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (to_idct_hwacel_csr_burst_adapter_source0_data),          //          .data
		.source0_channel       (to_idct_hwacel_csr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (to_idct_hwacel_csr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (to_idct_hwacel_csr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (to_idct_hwacel_csr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (94),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_BURST_TYPE_H          (91),
		.PKT_BURST_TYPE_L          (90),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (119),
		.ST_CHANNEL_W              (19),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (86),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) from_idct_hwacel_csr_burst_adapter (
		.clk                   (clk_125_clk_clk),                                          //       cr0.clk
		.reset                 (sysid_reset_reset_bridge_in_reset_reset),                  // cr0_reset.reset
		.sink0_valid           (cmd_mux_005_src_valid),                                    //     sink0.valid
		.sink0_data            (cmd_mux_005_src_data),                                     //          .data
		.sink0_channel         (cmd_mux_005_src_channel),                                  //          .channel
		.sink0_startofpacket   (cmd_mux_005_src_startofpacket),                            //          .startofpacket
		.sink0_endofpacket     (cmd_mux_005_src_endofpacket),                              //          .endofpacket
		.sink0_ready           (cmd_mux_005_src_ready),                                    //          .ready
		.source0_valid         (from_idct_hwacel_csr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (from_idct_hwacel_csr_burst_adapter_source0_data),          //          .data
		.source0_channel       (from_idct_hwacel_csr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (from_idct_hwacel_csr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (from_idct_hwacel_csr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (from_idct_hwacel_csr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (94),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_BURST_TYPE_H          (91),
		.PKT_BURST_TYPE_L          (90),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (119),
		.ST_CHANNEL_W              (19),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (86),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (3),
		.BURSTWRAP_CONST_VALUE     (3),
		.ADAPTER_VERSION           ("13.1")
	) cpu_debug_mem_slave_burst_adapter (
		.clk                   (clk_125_clk_clk),                                         //       cr0.clk
		.reset                 (cpu_reset_reset_bridge_in_reset_reset),                   // cr0_reset.reset
		.sink0_valid           (cmd_mux_006_src_valid),                                   //     sink0.valid
		.sink0_data            (cmd_mux_006_src_data),                                    //          .data
		.sink0_channel         (cmd_mux_006_src_channel),                                 //          .channel
		.sink0_startofpacket   (cmd_mux_006_src_startofpacket),                           //          .startofpacket
		.sink0_endofpacket     (cmd_mux_006_src_endofpacket),                             //          .endofpacket
		.sink0_ready           (cmd_mux_006_src_ready),                                   //          .ready
		.source0_valid         (cpu_debug_mem_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (cpu_debug_mem_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (cpu_debug_mem_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (cpu_debug_mem_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (cpu_debug_mem_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (cpu_debug_mem_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_BEGIN_BURST           (202),
		.PKT_BYTE_CNT_H            (191),
		.PKT_BYTE_CNT_L            (182),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_BURST_SIZE_H          (197),
		.PKT_BURST_SIZE_L          (195),
		.PKT_BURST_TYPE_H          (199),
		.PKT_BURST_TYPE_L          (198),
		.PKT_BURSTWRAP_H           (194),
		.PKT_BURSTWRAP_L           (192),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (227),
		.ST_CHANNEL_W              (19),
		.OUT_BYTE_CNT_H            (186),
		.OUT_BURSTWRAP_H           (194),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) video_dma_descriptor_slave_burst_adapter (
		.clk                   (clk_125_clk_clk),                                                //       cr0.clk
		.reset                 (sysid_reset_reset_bridge_in_reset_reset),                        // cr0_reset.reset
		.sink0_valid           (video_dma_descriptor_slave_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (video_dma_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (video_dma_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (video_dma_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (video_dma_descriptor_slave_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (video_dma_descriptor_slave_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (video_dma_descriptor_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (video_dma_descriptor_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (video_dma_descriptor_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (video_dma_descriptor_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (video_dma_descriptor_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (video_dma_descriptor_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_BEGIN_BURST           (202),
		.PKT_BYTE_CNT_H            (191),
		.PKT_BYTE_CNT_L            (182),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_BURST_SIZE_H          (197),
		.PKT_BURST_SIZE_L          (195),
		.PKT_BURST_TYPE_H          (199),
		.PKT_BURST_TYPE_L          (198),
		.PKT_BURSTWRAP_H           (194),
		.PKT_BURSTWRAP_L           (192),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (227),
		.ST_CHANNEL_W              (19),
		.OUT_BYTE_CNT_H            (186),
		.OUT_BURSTWRAP_H           (194),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) to_idct_hwacel_descriptor_slave_burst_adapter (
		.clk                   (clk_125_clk_clk),                                                     //       cr0.clk
		.reset                 (sysid_reset_reset_bridge_in_reset_reset),                             // cr0_reset.reset
		.sink0_valid           (to_idct_hwacel_descriptor_slave_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (to_idct_hwacel_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (to_idct_hwacel_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (to_idct_hwacel_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (to_idct_hwacel_descriptor_slave_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (to_idct_hwacel_descriptor_slave_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (to_idct_hwacel_descriptor_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (to_idct_hwacel_descriptor_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (to_idct_hwacel_descriptor_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (to_idct_hwacel_descriptor_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (to_idct_hwacel_descriptor_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (to_idct_hwacel_descriptor_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_BEGIN_BURST           (202),
		.PKT_BYTE_CNT_H            (191),
		.PKT_BYTE_CNT_L            (182),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_BURST_SIZE_H          (197),
		.PKT_BURST_SIZE_L          (195),
		.PKT_BURST_TYPE_H          (199),
		.PKT_BURST_TYPE_L          (198),
		.PKT_BURSTWRAP_H           (194),
		.PKT_BURSTWRAP_L           (192),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (227),
		.ST_CHANNEL_W              (19),
		.OUT_BYTE_CNT_H            (186),
		.OUT_BURSTWRAP_H           (194),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) from_idct_hwacel_descriptor_slave_burst_adapter (
		.clk                   (clk_125_clk_clk),                                                       //       cr0.clk
		.reset                 (sysid_reset_reset_bridge_in_reset_reset),                               // cr0_reset.reset
		.sink0_valid           (from_idct_hwacel_descriptor_slave_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (from_idct_hwacel_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (from_idct_hwacel_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (from_idct_hwacel_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (from_idct_hwacel_descriptor_slave_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (from_idct_hwacel_descriptor_slave_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (from_idct_hwacel_descriptor_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (from_idct_hwacel_descriptor_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (from_idct_hwacel_descriptor_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (from_idct_hwacel_descriptor_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (from_idct_hwacel_descriptor_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (from_idct_hwacel_descriptor_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (94),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_BURST_TYPE_H          (91),
		.PKT_BURST_TYPE_L          (90),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (119),
		.ST_CHANNEL_W              (19),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (86),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) timer_0_s1_burst_adapter (
		.clk                   (clk_125_clk_clk),                                //       cr0.clk
		.reset                 (sysid_reset_reset_bridge_in_reset_reset),        // cr0_reset.reset
		.sink0_valid           (cmd_mux_010_src_valid),                          //     sink0.valid
		.sink0_data            (cmd_mux_010_src_data),                           //          .data
		.sink0_channel         (cmd_mux_010_src_channel),                        //          .channel
		.sink0_startofpacket   (cmd_mux_010_src_startofpacket),                  //          .startofpacket
		.sink0_endofpacket     (cmd_mux_010_src_endofpacket),                    //          .endofpacket
		.sink0_ready           (cmd_mux_010_src_ready),                          //          .ready
		.source0_valid         (timer_0_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (timer_0_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (timer_0_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (timer_0_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (timer_0_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (timer_0_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (94),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_BURST_TYPE_H          (91),
		.PKT_BURST_TYPE_L          (90),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (119),
		.ST_CHANNEL_W              (19),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (86),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) key_s1_burst_adapter (
		.clk                   (clk_125_clk_clk),                            //       cr0.clk
		.reset                 (sysid_reset_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.sink0_valid           (cmd_mux_011_src_valid),                      //     sink0.valid
		.sink0_data            (cmd_mux_011_src_data),                       //          .data
		.sink0_channel         (cmd_mux_011_src_channel),                    //          .channel
		.sink0_startofpacket   (cmd_mux_011_src_startofpacket),              //          .startofpacket
		.sink0_endofpacket     (cmd_mux_011_src_endofpacket),                //          .endofpacket
		.sink0_ready           (cmd_mux_011_src_ready),                      //          .ready
		.source0_valid         (key_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (key_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (key_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (key_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (key_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (key_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (94),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_BURST_TYPE_H          (91),
		.PKT_BURST_TYPE_L          (90),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (119),
		.ST_CHANNEL_W              (19),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (86),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) timer_1_s1_burst_adapter (
		.clk                   (clk_125_clk_clk),                                //       cr0.clk
		.reset                 (sysid_reset_reset_bridge_in_reset_reset),        // cr0_reset.reset
		.sink0_valid           (cmd_mux_012_src_valid),                          //     sink0.valid
		.sink0_data            (cmd_mux_012_src_data),                           //          .data
		.sink0_channel         (cmd_mux_012_src_channel),                        //          .channel
		.sink0_startofpacket   (cmd_mux_012_src_startofpacket),                  //          .startofpacket
		.sink0_endofpacket     (cmd_mux_012_src_endofpacket),                    //          .endofpacket
		.sink0_ready           (cmd_mux_012_src_ready),                          //          .ready
		.source0_valid         (timer_1_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (timer_1_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (timer_1_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (timer_1_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (timer_1_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (timer_1_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (94),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_BURST_TYPE_H          (91),
		.PKT_BURST_TYPE_L          (90),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (119),
		.ST_CHANNEL_W              (19),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (86),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) ledg_s1_burst_adapter (
		.clk                   (clk_125_clk_clk),                             //       cr0.clk
		.reset                 (sysid_reset_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (cmd_mux_013_src_valid),                       //     sink0.valid
		.sink0_data            (cmd_mux_013_src_data),                        //          .data
		.sink0_channel         (cmd_mux_013_src_channel),                     //          .channel
		.sink0_startofpacket   (cmd_mux_013_src_startofpacket),               //          .startofpacket
		.sink0_endofpacket     (cmd_mux_013_src_endofpacket),                 //          .endofpacket
		.sink0_ready           (cmd_mux_013_src_ready),                       //          .ready
		.source0_valid         (ledg_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (ledg_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (ledg_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (ledg_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (ledg_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (ledg_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (94),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_BURST_TYPE_H          (91),
		.PKT_BURST_TYPE_L          (90),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (119),
		.ST_CHANNEL_W              (19),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (86),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) ledr_s1_burst_adapter (
		.clk                   (clk_125_clk_clk),                             //       cr0.clk
		.reset                 (sysid_reset_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (cmd_mux_014_src_valid),                       //     sink0.valid
		.sink0_data            (cmd_mux_014_src_data),                        //          .data
		.sink0_channel         (cmd_mux_014_src_channel),                     //          .channel
		.sink0_startofpacket   (cmd_mux_014_src_startofpacket),               //          .startofpacket
		.sink0_endofpacket     (cmd_mux_014_src_endofpacket),                 //          .endofpacket
		.sink0_ready           (cmd_mux_014_src_ready),                       //          .ready
		.source0_valid         (ledr_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (ledr_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (ledr_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (ledr_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (ledr_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (ledr_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (94),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_BURST_TYPE_H          (91),
		.PKT_BURST_TYPE_L          (90),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (119),
		.ST_CHANNEL_W              (19),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (86),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) i2c_scl_s1_burst_adapter (
		.clk                   (clk_125_clk_clk),                                //       cr0.clk
		.reset                 (sysid_reset_reset_bridge_in_reset_reset),        // cr0_reset.reset
		.sink0_valid           (cmd_mux_015_src_valid),                          //     sink0.valid
		.sink0_data            (cmd_mux_015_src_data),                           //          .data
		.sink0_channel         (cmd_mux_015_src_channel),                        //          .channel
		.sink0_startofpacket   (cmd_mux_015_src_startofpacket),                  //          .startofpacket
		.sink0_endofpacket     (cmd_mux_015_src_endofpacket),                    //          .endofpacket
		.sink0_ready           (cmd_mux_015_src_ready),                          //          .ready
		.source0_valid         (i2c_scl_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (i2c_scl_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (i2c_scl_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (i2c_scl_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (i2c_scl_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (i2c_scl_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (94),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_BURST_TYPE_H          (91),
		.PKT_BURST_TYPE_L          (90),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (119),
		.ST_CHANNEL_W              (19),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (86),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) i2c_sda_s1_burst_adapter (
		.clk                   (clk_125_clk_clk),                                //       cr0.clk
		.reset                 (sysid_reset_reset_bridge_in_reset_reset),        // cr0_reset.reset
		.sink0_valid           (cmd_mux_016_src_valid),                          //     sink0.valid
		.sink0_data            (cmd_mux_016_src_data),                           //          .data
		.sink0_channel         (cmd_mux_016_src_channel),                        //          .channel
		.sink0_startofpacket   (cmd_mux_016_src_startofpacket),                  //          .startofpacket
		.sink0_endofpacket     (cmd_mux_016_src_endofpacket),                    //          .endofpacket
		.sink0_ready           (cmd_mux_016_src_ready),                          //          .ready
		.source0_valid         (i2c_sda_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (i2c_sda_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (i2c_sda_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (i2c_sda_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (i2c_sda_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (i2c_sda_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (94),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_BURST_TYPE_H          (91),
		.PKT_BURST_TYPE_L          (90),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (119),
		.ST_CHANNEL_W              (19),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (86),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) sd_cont_0_slave_burst_adapter (
		.clk                   (clk_50_out_clk_clk),                                  //       cr0.clk
		.reset                 (sd_cont_0_reset_reset_bridge_in_reset_reset),         // cr0_reset.reset
		.sink0_valid           (cmd_mux_017_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_017_src_data),                                //          .data
		.sink0_channel         (cmd_mux_017_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_017_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_017_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_017_src_ready),                               //          .ready
		.source0_valid         (sd_cont_0_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sd_cont_0_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (sd_cont_0_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sd_cont_0_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sd_cont_0_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sd_cont_0_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (76),
		.PKT_BYTE_CNT_H            (65),
		.PKT_BYTE_CNT_L            (56),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (71),
		.PKT_BURST_SIZE_L          (69),
		.PKT_BURST_TYPE_H          (73),
		.PKT_BURST_TYPE_L          (72),
		.PKT_BURSTWRAP_H           (68),
		.PKT_BURSTWRAP_L           (66),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (101),
		.ST_CHANNEL_W              (19),
		.OUT_BYTE_CNT_H            (57),
		.OUT_BURSTWRAP_H           (68),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (3),
		.BURSTWRAP_CONST_VALUE     (3),
		.ADAPTER_VERSION           ("13.1")
	) sram_uas_burst_adapter (
		.clk                   (clk_125_clk_clk),                              //       cr0.clk
		.reset                 (sysid_reset_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.sink0_valid           (sram_uas_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (sram_uas_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (sram_uas_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (sram_uas_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (sram_uas_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (sram_uas_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (sram_uas_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sram_uas_burst_adapter_source0_data),          //          .data
		.source0_channel       (sram_uas_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sram_uas_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sram_uas_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sram_uas_burst_adapter_source0_ready)          //          .ready
	);

	ECE423_QSYS_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                 (clk_125_clk_clk),                        //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.sink_ready          (limiter_pipeline_source0_ready),         //      sink.ready
		.sink_channel        (limiter_pipeline_source0_channel),       //          .channel
		.sink_data           (limiter_pipeline_source0_data),          //          .data
		.sink_startofpacket  (limiter_pipeline_source0_startofpacket), //          .startofpacket
		.sink_endofpacket    (limiter_pipeline_source0_endofpacket),   //          .endofpacket
		.sink_valid          (limiter_pipeline_source0_valid),         //          .valid
		.src0_ready          (cmd_demux_src0_ready),                   //      src0.ready
		.src0_valid          (cmd_demux_src0_valid),                   //          .valid
		.src0_data           (cmd_demux_src0_data),                    //          .data
		.src0_channel        (cmd_demux_src0_channel),                 //          .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),             //          .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                   //      src1.ready
		.src1_valid          (cmd_demux_src1_valid),                   //          .valid
		.src1_data           (cmd_demux_src1_data),                    //          .data
		.src1_channel        (cmd_demux_src1_channel),                 //          .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),             //          .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                   //      src2.ready
		.src2_valid          (cmd_demux_src2_valid),                   //          .valid
		.src2_data           (cmd_demux_src2_data),                    //          .data
		.src2_channel        (cmd_demux_src2_channel),                 //          .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),           //          .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),             //          .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                   //      src3.ready
		.src3_valid          (cmd_demux_src3_valid),                   //          .valid
		.src3_data           (cmd_demux_src3_data),                    //          .data
		.src3_channel        (cmd_demux_src3_channel),                 //          .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),           //          .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),             //          .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                   //      src4.ready
		.src4_valid          (cmd_demux_src4_valid),                   //          .valid
		.src4_data           (cmd_demux_src4_data),                    //          .data
		.src4_channel        (cmd_demux_src4_channel),                 //          .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),           //          .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),             //          .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                   //      src5.ready
		.src5_valid          (cmd_demux_src5_valid),                   //          .valid
		.src5_data           (cmd_demux_src5_data),                    //          .data
		.src5_channel        (cmd_demux_src5_channel),                 //          .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),           //          .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),             //          .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                   //      src6.ready
		.src6_valid          (cmd_demux_src6_valid),                   //          .valid
		.src6_data           (cmd_demux_src6_data),                    //          .data
		.src6_channel        (cmd_demux_src6_channel),                 //          .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),           //          .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),             //          .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                   //      src7.ready
		.src7_valid          (cmd_demux_src7_valid),                   //          .valid
		.src7_data           (cmd_demux_src7_data),                    //          .data
		.src7_channel        (cmd_demux_src7_channel),                 //          .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),           //          .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),             //          .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                   //      src8.ready
		.src8_valid          (cmd_demux_src8_valid),                   //          .valid
		.src8_data           (cmd_demux_src8_data),                    //          .data
		.src8_channel        (cmd_demux_src8_channel),                 //          .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),           //          .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),             //          .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                   //      src9.ready
		.src9_valid          (cmd_demux_src9_valid),                   //          .valid
		.src9_data           (cmd_demux_src9_data),                    //          .data
		.src9_channel        (cmd_demux_src9_channel),                 //          .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),           //          .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),             //          .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                  //     src10.ready
		.src10_valid         (cmd_demux_src10_valid),                  //          .valid
		.src10_data          (cmd_demux_src10_data),                   //          .data
		.src10_channel       (cmd_demux_src10_channel),                //          .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),          //          .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),            //          .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                  //     src11.ready
		.src11_valid         (cmd_demux_src11_valid),                  //          .valid
		.src11_data          (cmd_demux_src11_data),                   //          .data
		.src11_channel       (cmd_demux_src11_channel),                //          .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),          //          .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket),            //          .endofpacket
		.src12_ready         (cmd_demux_src12_ready),                  //     src12.ready
		.src12_valid         (cmd_demux_src12_valid),                  //          .valid
		.src12_data          (cmd_demux_src12_data),                   //          .data
		.src12_channel       (cmd_demux_src12_channel),                //          .channel
		.src12_startofpacket (cmd_demux_src12_startofpacket),          //          .startofpacket
		.src12_endofpacket   (cmd_demux_src12_endofpacket),            //          .endofpacket
		.src13_ready         (cmd_demux_src13_ready),                  //     src13.ready
		.src13_valid         (cmd_demux_src13_valid),                  //          .valid
		.src13_data          (cmd_demux_src13_data),                   //          .data
		.src13_channel       (cmd_demux_src13_channel),                //          .channel
		.src13_startofpacket (cmd_demux_src13_startofpacket),          //          .startofpacket
		.src13_endofpacket   (cmd_demux_src13_endofpacket),            //          .endofpacket
		.src14_ready         (cmd_demux_src14_ready),                  //     src14.ready
		.src14_valid         (cmd_demux_src14_valid),                  //          .valid
		.src14_data          (cmd_demux_src14_data),                   //          .data
		.src14_channel       (cmd_demux_src14_channel),                //          .channel
		.src14_startofpacket (cmd_demux_src14_startofpacket),          //          .startofpacket
		.src14_endofpacket   (cmd_demux_src14_endofpacket),            //          .endofpacket
		.src15_ready         (cmd_demux_src15_ready),                  //     src15.ready
		.src15_valid         (cmd_demux_src15_valid),                  //          .valid
		.src15_data          (cmd_demux_src15_data),                   //          .data
		.src15_channel       (cmd_demux_src15_channel),                //          .channel
		.src15_startofpacket (cmd_demux_src15_startofpacket),          //          .startofpacket
		.src15_endofpacket   (cmd_demux_src15_endofpacket),            //          .endofpacket
		.src16_ready         (cmd_demux_src16_ready),                  //     src16.ready
		.src16_valid         (cmd_demux_src16_valid),                  //          .valid
		.src16_data          (cmd_demux_src16_data),                   //          .data
		.src16_channel       (cmd_demux_src16_channel),                //          .channel
		.src16_startofpacket (cmd_demux_src16_startofpacket),          //          .startofpacket
		.src16_endofpacket   (cmd_demux_src16_endofpacket),            //          .endofpacket
		.src17_ready         (cmd_demux_src17_ready),                  //     src17.ready
		.src17_valid         (cmd_demux_src17_valid),                  //          .valid
		.src17_data          (cmd_demux_src17_data),                   //          .data
		.src17_channel       (cmd_demux_src17_channel),                //          .channel
		.src17_startofpacket (cmd_demux_src17_startofpacket),          //          .startofpacket
		.src17_endofpacket   (cmd_demux_src17_endofpacket),            //          .endofpacket
		.src18_ready         (cmd_demux_src18_ready),                  //     src18.ready
		.src18_valid         (cmd_demux_src18_valid),                  //          .valid
		.src18_data          (cmd_demux_src18_data),                   //          .data
		.src18_channel       (cmd_demux_src18_channel),                //          .channel
		.src18_startofpacket (cmd_demux_src18_startofpacket),          //          .startofpacket
		.src18_endofpacket   (cmd_demux_src18_endofpacket)             //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                (clk_125_clk_clk),                            //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.sink_ready         (limiter_pipeline_002_source0_ready),         //      sink.ready
		.sink_channel       (limiter_pipeline_002_source0_channel),       //          .channel
		.sink_data          (limiter_pipeline_002_source0_data),          //          .data
		.sink_startofpacket (limiter_pipeline_002_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (limiter_pipeline_002_source0_endofpacket),   //          .endofpacket
		.sink_valid         (limiter_pipeline_002_source0_valid),         //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                   //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                   //          .valid
		.src0_data          (cmd_demux_001_src0_data),                    //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                 //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),             //          .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                   //      src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                   //          .valid
		.src1_data          (cmd_demux_001_src1_data),                    //          .data
		.src1_channel       (cmd_demux_001_src1_channel),                 //          .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket)              //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_cmd_demux_002 cmd_demux_002 (
		.clk                (clk_50_out_clk_clk),                          //       clk.clk
		.reset              (sd_cont_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                        //      sink.ready
		.sink_channel       (router_002_src_channel),                      //          .channel
		.sink_data          (router_002_src_data),                         //          .data
		.sink_startofpacket (router_002_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_002_src_valid),                        //          .valid
		.src0_ready         (cmd_demux_002_src0_ready),                    //      src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                    //          .valid
		.src0_data          (cmd_demux_002_src0_data),                     //          .data
		.src0_channel       (cmd_demux_002_src0_channel),                  //          .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket)               //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_125_clk_clk),                       //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                     //       src.ready
		.src_valid           (cmd_mux_src_valid),                     //          .valid
		.src_data            (cmd_mux_src_data),                      //          .data
		.src_channel         (cmd_mux_src_channel),                   //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),               //          .endofpacket
		.sink0_ready         (mux_pipeline_source0_ready),            //     sink0.ready
		.sink0_valid         (mux_pipeline_source0_valid),            //          .valid
		.sink0_channel       (mux_pipeline_source0_channel),          //          .channel
		.sink0_data          (mux_pipeline_source0_data),             //          .data
		.sink0_startofpacket (mux_pipeline_source0_startofpacket),    //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_source0_endofpacket)       //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_cmd_mux_001 cmd_mux_001 (
		.clk                 (clk_125_clk_clk),                         //       clk.clk
		.reset               (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                   //          .valid
		.src_data            (cmd_mux_001_src_data),                    //          .data
		.src_channel         (cmd_mux_001_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),             //          .endofpacket
		.sink0_ready         (mux_pipeline_001_source0_ready),          //     sink0.ready
		.sink0_valid         (mux_pipeline_001_source0_valid),          //          .valid
		.sink0_channel       (mux_pipeline_001_source0_channel),        //          .channel
		.sink0_data          (mux_pipeline_001_source0_data),           //          .data
		.sink0_startofpacket (mux_pipeline_001_source0_startofpacket),  //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_001_source0_endofpacket),    //          .endofpacket
		.sink1_ready         (mux_pipeline_002_source0_ready),          //     sink1.ready
		.sink1_valid         (mux_pipeline_002_source0_valid),          //          .valid
		.sink1_channel       (mux_pipeline_002_source0_channel),        //          .channel
		.sink1_data          (mux_pipeline_002_source0_data),           //          .data
		.sink1_startofpacket (mux_pipeline_002_source0_startofpacket),  //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_002_source0_endofpacket)     //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_cmd_mux cmd_mux_002 (
		.clk                 (clk_125_clk_clk),                         //       clk.clk
		.reset               (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                   //          .valid
		.src_data            (cmd_mux_002_src_data),                    //          .data
		.src_channel         (cmd_mux_002_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),             //          .endofpacket
		.sink0_ready         (mux_pipeline_003_source0_ready),          //     sink0.ready
		.sink0_valid         (mux_pipeline_003_source0_valid),          //          .valid
		.sink0_channel       (mux_pipeline_003_source0_channel),        //          .channel
		.sink0_data          (mux_pipeline_003_source0_data),           //          .data
		.sink0_startofpacket (mux_pipeline_003_source0_startofpacket),  //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_003_source0_endofpacket)     //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_cmd_mux cmd_mux_003 (
		.clk                 (clk_125_clk_clk),                         //       clk.clk
		.reset               (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                   //          .valid
		.src_data            (cmd_mux_003_src_data),                    //          .data
		.src_channel         (cmd_mux_003_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),             //          .endofpacket
		.sink0_ready         (mux_pipeline_004_source0_ready),          //     sink0.ready
		.sink0_valid         (mux_pipeline_004_source0_valid),          //          .valid
		.sink0_channel       (mux_pipeline_004_source0_channel),        //          .channel
		.sink0_data          (mux_pipeline_004_source0_data),           //          .data
		.sink0_startofpacket (mux_pipeline_004_source0_startofpacket),  //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_004_source0_endofpacket)     //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_cmd_mux cmd_mux_004 (
		.clk                 (clk_125_clk_clk),                         //       clk.clk
		.reset               (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                   //          .valid
		.src_data            (cmd_mux_004_src_data),                    //          .data
		.src_channel         (cmd_mux_004_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),             //          .endofpacket
		.sink0_ready         (mux_pipeline_005_source0_ready),          //     sink0.ready
		.sink0_valid         (mux_pipeline_005_source0_valid),          //          .valid
		.sink0_channel       (mux_pipeline_005_source0_channel),        //          .channel
		.sink0_data          (mux_pipeline_005_source0_data),           //          .data
		.sink0_startofpacket (mux_pipeline_005_source0_startofpacket),  //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_005_source0_endofpacket)     //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_cmd_mux cmd_mux_005 (
		.clk                 (clk_125_clk_clk),                         //       clk.clk
		.reset               (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                   //          .valid
		.src_data            (cmd_mux_005_src_data),                    //          .data
		.src_channel         (cmd_mux_005_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),             //          .endofpacket
		.sink0_ready         (mux_pipeline_006_source0_ready),          //     sink0.ready
		.sink0_valid         (mux_pipeline_006_source0_valid),          //          .valid
		.sink0_channel       (mux_pipeline_006_source0_channel),        //          .channel
		.sink0_data          (mux_pipeline_006_source0_data),           //          .data
		.sink0_startofpacket (mux_pipeline_006_source0_startofpacket),  //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_006_source0_endofpacket)     //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_cmd_mux_001 cmd_mux_006 (
		.clk                 (clk_125_clk_clk),                        //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                  //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                  //          .valid
		.src_data            (cmd_mux_006_src_data),                   //          .data
		.src_channel         (cmd_mux_006_src_channel),                //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),          //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),            //          .endofpacket
		.sink0_ready         (mux_pipeline_007_source0_ready),         //     sink0.ready
		.sink0_valid         (mux_pipeline_007_source0_valid),         //          .valid
		.sink0_channel       (mux_pipeline_007_source0_channel),       //          .channel
		.sink0_data          (mux_pipeline_007_source0_data),          //          .data
		.sink0_startofpacket (mux_pipeline_007_source0_startofpacket), //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_007_source0_endofpacket),   //          .endofpacket
		.sink1_ready         (mux_pipeline_008_source0_ready),         //     sink1.ready
		.sink1_valid         (mux_pipeline_008_source0_valid),         //          .valid
		.sink1_channel       (mux_pipeline_008_source0_channel),       //          .channel
		.sink1_data          (mux_pipeline_008_source0_data),          //          .data
		.sink1_startofpacket (mux_pipeline_008_source0_startofpacket), //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_008_source0_endofpacket)    //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_cmd_mux cmd_mux_007 (
		.clk                 (clk_125_clk_clk),                         //       clk.clk
		.reset               (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                   //          .valid
		.src_data            (cmd_mux_007_src_data),                    //          .data
		.src_channel         (cmd_mux_007_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),             //          .endofpacket
		.sink0_ready         (mux_pipeline_009_source0_ready),          //     sink0.ready
		.sink0_valid         (mux_pipeline_009_source0_valid),          //          .valid
		.sink0_channel       (mux_pipeline_009_source0_channel),        //          .channel
		.sink0_data          (mux_pipeline_009_source0_data),           //          .data
		.sink0_startofpacket (mux_pipeline_009_source0_startofpacket),  //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_009_source0_endofpacket)     //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_cmd_mux cmd_mux_008 (
		.clk                 (clk_125_clk_clk),                         //       clk.clk
		.reset               (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                   //          .valid
		.src_data            (cmd_mux_008_src_data),                    //          .data
		.src_channel         (cmd_mux_008_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),             //          .endofpacket
		.sink0_ready         (mux_pipeline_010_source0_ready),          //     sink0.ready
		.sink0_valid         (mux_pipeline_010_source0_valid),          //          .valid
		.sink0_channel       (mux_pipeline_010_source0_channel),        //          .channel
		.sink0_data          (mux_pipeline_010_source0_data),           //          .data
		.sink0_startofpacket (mux_pipeline_010_source0_startofpacket),  //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_010_source0_endofpacket)     //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_cmd_mux cmd_mux_009 (
		.clk                 (clk_125_clk_clk),                         //       clk.clk
		.reset               (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                   //          .valid
		.src_data            (cmd_mux_009_src_data),                    //          .data
		.src_channel         (cmd_mux_009_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),             //          .endofpacket
		.sink0_ready         (mux_pipeline_011_source0_ready),          //     sink0.ready
		.sink0_valid         (mux_pipeline_011_source0_valid),          //          .valid
		.sink0_channel       (mux_pipeline_011_source0_channel),        //          .channel
		.sink0_data          (mux_pipeline_011_source0_data),           //          .data
		.sink0_startofpacket (mux_pipeline_011_source0_startofpacket),  //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_011_source0_endofpacket)     //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_cmd_mux cmd_mux_010 (
		.clk                 (clk_125_clk_clk),                         //       clk.clk
		.reset               (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                   //          .valid
		.src_data            (cmd_mux_010_src_data),                    //          .data
		.src_channel         (cmd_mux_010_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),             //          .endofpacket
		.sink0_ready         (mux_pipeline_012_source0_ready),          //     sink0.ready
		.sink0_valid         (mux_pipeline_012_source0_valid),          //          .valid
		.sink0_channel       (mux_pipeline_012_source0_channel),        //          .channel
		.sink0_data          (mux_pipeline_012_source0_data),           //          .data
		.sink0_startofpacket (mux_pipeline_012_source0_startofpacket),  //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_012_source0_endofpacket)     //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_cmd_mux cmd_mux_011 (
		.clk                 (clk_125_clk_clk),                         //       clk.clk
		.reset               (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                   //          .valid
		.src_data            (cmd_mux_011_src_data),                    //          .data
		.src_channel         (cmd_mux_011_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),             //          .endofpacket
		.sink0_ready         (mux_pipeline_013_source0_ready),          //     sink0.ready
		.sink0_valid         (mux_pipeline_013_source0_valid),          //          .valid
		.sink0_channel       (mux_pipeline_013_source0_channel),        //          .channel
		.sink0_data          (mux_pipeline_013_source0_data),           //          .data
		.sink0_startofpacket (mux_pipeline_013_source0_startofpacket),  //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_013_source0_endofpacket)     //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_cmd_mux cmd_mux_012 (
		.clk                 (clk_125_clk_clk),                         //       clk.clk
		.reset               (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                   //          .valid
		.src_data            (cmd_mux_012_src_data),                    //          .data
		.src_channel         (cmd_mux_012_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),             //          .endofpacket
		.sink0_ready         (mux_pipeline_014_source0_ready),          //     sink0.ready
		.sink0_valid         (mux_pipeline_014_source0_valid),          //          .valid
		.sink0_channel       (mux_pipeline_014_source0_channel),        //          .channel
		.sink0_data          (mux_pipeline_014_source0_data),           //          .data
		.sink0_startofpacket (mux_pipeline_014_source0_startofpacket),  //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_014_source0_endofpacket)     //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_cmd_mux cmd_mux_013 (
		.clk                 (clk_125_clk_clk),                         //       clk.clk
		.reset               (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                   //          .valid
		.src_data            (cmd_mux_013_src_data),                    //          .data
		.src_channel         (cmd_mux_013_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),             //          .endofpacket
		.sink0_ready         (mux_pipeline_015_source0_ready),          //     sink0.ready
		.sink0_valid         (mux_pipeline_015_source0_valid),          //          .valid
		.sink0_channel       (mux_pipeline_015_source0_channel),        //          .channel
		.sink0_data          (mux_pipeline_015_source0_data),           //          .data
		.sink0_startofpacket (mux_pipeline_015_source0_startofpacket),  //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_015_source0_endofpacket)     //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_cmd_mux cmd_mux_014 (
		.clk                 (clk_125_clk_clk),                         //       clk.clk
		.reset               (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                   //          .valid
		.src_data            (cmd_mux_014_src_data),                    //          .data
		.src_channel         (cmd_mux_014_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),             //          .endofpacket
		.sink0_ready         (mux_pipeline_016_source0_ready),          //     sink0.ready
		.sink0_valid         (mux_pipeline_016_source0_valid),          //          .valid
		.sink0_channel       (mux_pipeline_016_source0_channel),        //          .channel
		.sink0_data          (mux_pipeline_016_source0_data),           //          .data
		.sink0_startofpacket (mux_pipeline_016_source0_startofpacket),  //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_016_source0_endofpacket)     //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_cmd_mux cmd_mux_015 (
		.clk                 (clk_125_clk_clk),                         //       clk.clk
		.reset               (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                   //          .valid
		.src_data            (cmd_mux_015_src_data),                    //          .data
		.src_channel         (cmd_mux_015_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),             //          .endofpacket
		.sink0_ready         (mux_pipeline_017_source0_ready),          //     sink0.ready
		.sink0_valid         (mux_pipeline_017_source0_valid),          //          .valid
		.sink0_channel       (mux_pipeline_017_source0_channel),        //          .channel
		.sink0_data          (mux_pipeline_017_source0_data),           //          .data
		.sink0_startofpacket (mux_pipeline_017_source0_startofpacket),  //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_017_source0_endofpacket)     //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_cmd_mux cmd_mux_016 (
		.clk                 (clk_125_clk_clk),                         //       clk.clk
		.reset               (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_016_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_016_src_valid),                   //          .valid
		.src_data            (cmd_mux_016_src_data),                    //          .data
		.src_channel         (cmd_mux_016_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_016_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_016_src_endofpacket),             //          .endofpacket
		.sink0_ready         (mux_pipeline_018_source0_ready),          //     sink0.ready
		.sink0_valid         (mux_pipeline_018_source0_valid),          //          .valid
		.sink0_channel       (mux_pipeline_018_source0_channel),        //          .channel
		.sink0_data          (mux_pipeline_018_source0_data),           //          .data
		.sink0_startofpacket (mux_pipeline_018_source0_startofpacket),  //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_018_source0_endofpacket)     //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_cmd_mux cmd_mux_017 (
		.clk                 (clk_50_out_clk_clk),                          //       clk.clk
		.reset               (sd_cont_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_017_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_017_src_valid),                       //          .valid
		.src_data            (cmd_mux_017_src_data),                        //          .data
		.src_channel         (cmd_mux_017_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_017_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_017_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (mux_pipeline_019_source0_ready),              //     sink0.ready
		.sink0_valid         (mux_pipeline_019_source0_valid),              //          .valid
		.sink0_channel       (mux_pipeline_019_source0_channel),            //          .channel
		.sink0_data          (mux_pipeline_019_source0_data),               //          .data
		.sink0_startofpacket (mux_pipeline_019_source0_startofpacket),      //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_019_source0_endofpacket)         //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_cmd_mux_001 cmd_mux_018 (
		.clk                 (clk_125_clk_clk),                         //       clk.clk
		.reset               (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_018_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_018_src_valid),                   //          .valid
		.src_data            (cmd_mux_018_src_data),                    //          .data
		.src_channel         (cmd_mux_018_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_018_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_018_src_endofpacket),             //          .endofpacket
		.sink0_ready         (mux_pipeline_020_source0_ready),          //     sink0.ready
		.sink0_valid         (mux_pipeline_020_source0_valid),          //          .valid
		.sink0_channel       (mux_pipeline_020_source0_channel),        //          .channel
		.sink0_data          (mux_pipeline_020_source0_data),           //          .data
		.sink0_startofpacket (mux_pipeline_020_source0_startofpacket),  //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_020_source0_endofpacket),    //          .endofpacket
		.sink1_ready         (mux_pipeline_021_source0_ready),          //     sink1.ready
		.sink1_valid         (mux_pipeline_021_source0_valid),          //          .valid
		.sink1_channel       (mux_pipeline_021_source0_channel),        //          .channel
		.sink1_data          (mux_pipeline_021_source0_data),           //          .data
		.sink1_startofpacket (mux_pipeline_021_source0_startofpacket),  //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_021_source0_endofpacket)     //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_125_clk_clk),                       //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                  //      sink.ready
		.sink_channel       (router_003_src_channel),                //          .channel
		.sink_data          (router_003_src_data),                   //          .data
		.sink_startofpacket (router_003_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_003_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_src0_data),                   //          .data
		.src0_channel       (rsp_demux_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)             //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_cmd_demux_001 rsp_demux_001 (
		.clk                (clk_125_clk_clk),                         //       clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                    //      sink.ready
		.sink_channel       (router_004_src_channel),                  //          .channel
		.sink_data          (router_004_src_data),                     //          .data
		.sink_startofpacket (router_004_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_004_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                //          .valid
		.src0_data          (rsp_demux_001_src0_data),                 //          .data
		.src0_channel       (rsp_demux_001_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                //          .valid
		.src1_data          (rsp_demux_001_src1_data),                 //          .data
		.src1_channel       (rsp_demux_001_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)           //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_rsp_demux rsp_demux_002 (
		.clk                (clk_125_clk_clk),                         //       clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                    //      sink.ready
		.sink_channel       (router_005_src_channel),                  //          .channel
		.sink_data          (router_005_src_data),                     //          .data
		.sink_startofpacket (router_005_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_005_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                //          .valid
		.src0_data          (rsp_demux_002_src0_data),                 //          .data
		.src0_channel       (rsp_demux_002_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)           //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_rsp_demux rsp_demux_003 (
		.clk                (clk_125_clk_clk),                         //       clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                    //      sink.ready
		.sink_channel       (router_006_src_channel),                  //          .channel
		.sink_data          (router_006_src_data),                     //          .data
		.sink_startofpacket (router_006_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_006_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                //          .valid
		.src0_data          (rsp_demux_003_src0_data),                 //          .data
		.src0_channel       (rsp_demux_003_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)           //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_rsp_demux rsp_demux_004 (
		.clk                (clk_125_clk_clk),                         //       clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                    //      sink.ready
		.sink_channel       (router_007_src_channel),                  //          .channel
		.sink_data          (router_007_src_data),                     //          .data
		.sink_startofpacket (router_007_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_007_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                //          .valid
		.src0_data          (rsp_demux_004_src0_data),                 //          .data
		.src0_channel       (rsp_demux_004_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)           //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_rsp_demux rsp_demux_005 (
		.clk                (clk_125_clk_clk),                         //       clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                    //      sink.ready
		.sink_channel       (router_008_src_channel),                  //          .channel
		.sink_data          (router_008_src_data),                     //          .data
		.sink_startofpacket (router_008_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_008_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                //          .valid
		.src0_data          (rsp_demux_005_src0_data),                 //          .data
		.src0_channel       (rsp_demux_005_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)           //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_cmd_demux_001 rsp_demux_006 (
		.clk                (clk_125_clk_clk),                       //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                  //      sink.ready
		.sink_channel       (router_009_src_channel),                //          .channel
		.sink_data          (router_009_src_data),                   //          .data
		.sink_startofpacket (router_009_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_009_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),              //          .valid
		.src0_data          (rsp_demux_006_src0_data),               //          .data
		.src0_channel       (rsp_demux_006_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket),        //          .endofpacket
		.src1_ready         (rsp_demux_006_src1_ready),              //      src1.ready
		.src1_valid         (rsp_demux_006_src1_valid),              //          .valid
		.src1_data          (rsp_demux_006_src1_data),               //          .data
		.src1_channel       (rsp_demux_006_src1_channel),            //          .channel
		.src1_startofpacket (rsp_demux_006_src1_startofpacket),      //          .startofpacket
		.src1_endofpacket   (rsp_demux_006_src1_endofpacket)         //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_rsp_demux rsp_demux_007 (
		.clk                (clk_125_clk_clk),                                                //       clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.sink_ready         (video_dma_descriptor_slave_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (video_dma_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (video_dma_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (video_dma_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (video_dma_descriptor_slave_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (video_dma_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                                       //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                                       //          .valid
		.src0_data          (rsp_demux_007_src0_data),                                        //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                                     //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),                               //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)                                  //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_rsp_demux rsp_demux_008 (
		.clk                (clk_125_clk_clk),                                                     //       clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.sink_ready         (to_idct_hwacel_descriptor_slave_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (to_idct_hwacel_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (to_idct_hwacel_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (to_idct_hwacel_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (to_idct_hwacel_descriptor_slave_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (to_idct_hwacel_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                                            //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                                            //          .valid
		.src0_data          (rsp_demux_008_src0_data),                                             //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                                          //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),                                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)                                       //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_rsp_demux rsp_demux_009 (
		.clk                (clk_125_clk_clk),                                                       //       clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset),                               // clk_reset.reset
		.sink_ready         (from_idct_hwacel_descriptor_slave_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (from_idct_hwacel_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (from_idct_hwacel_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (from_idct_hwacel_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (from_idct_hwacel_descriptor_slave_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (from_idct_hwacel_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                                              //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                                              //          .valid
		.src0_data          (rsp_demux_009_src0_data),                                               //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                                            //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),                                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)                                         //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_rsp_demux rsp_demux_010 (
		.clk                (clk_125_clk_clk),                         //       clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                    //      sink.ready
		.sink_channel       (router_013_src_channel),                  //          .channel
		.sink_data          (router_013_src_data),                     //          .data
		.sink_startofpacket (router_013_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_013_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                //          .valid
		.src0_data          (rsp_demux_010_src0_data),                 //          .data
		.src0_channel       (rsp_demux_010_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket)           //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_rsp_demux rsp_demux_011 (
		.clk                (clk_125_clk_clk),                         //       clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                    //      sink.ready
		.sink_channel       (router_014_src_channel),                  //          .channel
		.sink_data          (router_014_src_data),                     //          .data
		.sink_startofpacket (router_014_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_014_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                //          .valid
		.src0_data          (rsp_demux_011_src0_data),                 //          .data
		.src0_channel       (rsp_demux_011_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket)           //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_rsp_demux rsp_demux_012 (
		.clk                (clk_125_clk_clk),                         //       clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                    //      sink.ready
		.sink_channel       (router_015_src_channel),                  //          .channel
		.sink_data          (router_015_src_data),                     //          .data
		.sink_startofpacket (router_015_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_015_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                //          .valid
		.src0_data          (rsp_demux_012_src0_data),                 //          .data
		.src0_channel       (rsp_demux_012_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket)           //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_rsp_demux rsp_demux_013 (
		.clk                (clk_125_clk_clk),                         //       clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                    //      sink.ready
		.sink_channel       (router_016_src_channel),                  //          .channel
		.sink_data          (router_016_src_data),                     //          .data
		.sink_startofpacket (router_016_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_016_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                //          .valid
		.src0_data          (rsp_demux_013_src0_data),                 //          .data
		.src0_channel       (rsp_demux_013_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket)           //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_rsp_demux rsp_demux_014 (
		.clk                (clk_125_clk_clk),                         //       clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                    //      sink.ready
		.sink_channel       (router_017_src_channel),                  //          .channel
		.sink_data          (router_017_src_data),                     //          .data
		.sink_startofpacket (router_017_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_017_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                //          .valid
		.src0_data          (rsp_demux_014_src0_data),                 //          .data
		.src0_channel       (rsp_demux_014_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket)           //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_rsp_demux rsp_demux_015 (
		.clk                (clk_125_clk_clk),                         //       clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                    //      sink.ready
		.sink_channel       (router_018_src_channel),                  //          .channel
		.sink_data          (router_018_src_data),                     //          .data
		.sink_startofpacket (router_018_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_018_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                //          .valid
		.src0_data          (rsp_demux_015_src0_data),                 //          .data
		.src0_channel       (rsp_demux_015_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket)           //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_rsp_demux rsp_demux_016 (
		.clk                (clk_125_clk_clk),                         //       clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_019_src_ready),                    //      sink.ready
		.sink_channel       (router_019_src_channel),                  //          .channel
		.sink_data          (router_019_src_data),                     //          .data
		.sink_startofpacket (router_019_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_019_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_019_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_016_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_016_src0_valid),                //          .valid
		.src0_data          (rsp_demux_016_src0_data),                 //          .data
		.src0_channel       (rsp_demux_016_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_016_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_016_src0_endofpacket)           //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_cmd_demux_002 rsp_demux_017 (
		.clk                (clk_50_out_clk_clk),                          //       clk.clk
		.reset              (sd_cont_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_020_src_ready),                        //      sink.ready
		.sink_channel       (router_020_src_channel),                      //          .channel
		.sink_data          (router_020_src_data),                         //          .data
		.sink_startofpacket (router_020_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_020_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_020_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_017_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_017_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_017_src0_data),                     //          .data
		.src0_channel       (rsp_demux_017_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_017_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_017_src0_endofpacket)               //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_cmd_demux_001 rsp_demux_018 (
		.clk                (clk_125_clk_clk),                              //       clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.sink_ready         (sram_uas_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (sram_uas_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (sram_uas_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (sram_uas_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (sram_uas_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (sram_uas_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_018_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_018_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_018_src0_data),                      //          .data
		.src0_channel       (rsp_demux_018_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_018_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_018_src0_endofpacket),               //          .endofpacket
		.src1_ready         (rsp_demux_018_src1_ready),                     //      src1.ready
		.src1_valid         (rsp_demux_018_src1_valid),                     //          .valid
		.src1_data          (rsp_demux_018_src1_data),                      //          .data
		.src1_channel       (rsp_demux_018_src1_channel),                   //          .channel
		.src1_startofpacket (rsp_demux_018_src1_startofpacket),             //          .startofpacket
		.src1_endofpacket   (rsp_demux_018_src1_endofpacket)                //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                  (clk_125_clk_clk),                        //       clk.clk
		.reset                (cpu_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                      //       src.ready
		.src_valid            (rsp_mux_src_valid),                      //          .valid
		.src_data             (rsp_mux_src_data),                       //          .data
		.src_channel          (rsp_mux_src_channel),                    //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),              //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                //          .endofpacket
		.sink0_ready          (mux_pipeline_022_source0_ready),         //     sink0.ready
		.sink0_valid          (mux_pipeline_022_source0_valid),         //          .valid
		.sink0_channel        (mux_pipeline_022_source0_channel),       //          .channel
		.sink0_data           (mux_pipeline_022_source0_data),          //          .data
		.sink0_startofpacket  (mux_pipeline_022_source0_startofpacket), //          .startofpacket
		.sink0_endofpacket    (mux_pipeline_022_source0_endofpacket),   //          .endofpacket
		.sink1_ready          (mux_pipeline_023_source0_ready),         //     sink1.ready
		.sink1_valid          (mux_pipeline_023_source0_valid),         //          .valid
		.sink1_channel        (mux_pipeline_023_source0_channel),       //          .channel
		.sink1_data           (mux_pipeline_023_source0_data),          //          .data
		.sink1_startofpacket  (mux_pipeline_023_source0_startofpacket), //          .startofpacket
		.sink1_endofpacket    (mux_pipeline_023_source0_endofpacket),   //          .endofpacket
		.sink2_ready          (mux_pipeline_024_source0_ready),         //     sink2.ready
		.sink2_valid          (mux_pipeline_024_source0_valid),         //          .valid
		.sink2_channel        (mux_pipeline_024_source0_channel),       //          .channel
		.sink2_data           (mux_pipeline_024_source0_data),          //          .data
		.sink2_startofpacket  (mux_pipeline_024_source0_startofpacket), //          .startofpacket
		.sink2_endofpacket    (mux_pipeline_024_source0_endofpacket),   //          .endofpacket
		.sink3_ready          (mux_pipeline_025_source0_ready),         //     sink3.ready
		.sink3_valid          (mux_pipeline_025_source0_valid),         //          .valid
		.sink3_channel        (mux_pipeline_025_source0_channel),       //          .channel
		.sink3_data           (mux_pipeline_025_source0_data),          //          .data
		.sink3_startofpacket  (mux_pipeline_025_source0_startofpacket), //          .startofpacket
		.sink3_endofpacket    (mux_pipeline_025_source0_endofpacket),   //          .endofpacket
		.sink4_ready          (mux_pipeline_026_source0_ready),         //     sink4.ready
		.sink4_valid          (mux_pipeline_026_source0_valid),         //          .valid
		.sink4_channel        (mux_pipeline_026_source0_channel),       //          .channel
		.sink4_data           (mux_pipeline_026_source0_data),          //          .data
		.sink4_startofpacket  (mux_pipeline_026_source0_startofpacket), //          .startofpacket
		.sink4_endofpacket    (mux_pipeline_026_source0_endofpacket),   //          .endofpacket
		.sink5_ready          (mux_pipeline_027_source0_ready),         //     sink5.ready
		.sink5_valid          (mux_pipeline_027_source0_valid),         //          .valid
		.sink5_channel        (mux_pipeline_027_source0_channel),       //          .channel
		.sink5_data           (mux_pipeline_027_source0_data),          //          .data
		.sink5_startofpacket  (mux_pipeline_027_source0_startofpacket), //          .startofpacket
		.sink5_endofpacket    (mux_pipeline_027_source0_endofpacket),   //          .endofpacket
		.sink6_ready          (mux_pipeline_028_source0_ready),         //     sink6.ready
		.sink6_valid          (mux_pipeline_028_source0_valid),         //          .valid
		.sink6_channel        (mux_pipeline_028_source0_channel),       //          .channel
		.sink6_data           (mux_pipeline_028_source0_data),          //          .data
		.sink6_startofpacket  (mux_pipeline_028_source0_startofpacket), //          .startofpacket
		.sink6_endofpacket    (mux_pipeline_028_source0_endofpacket),   //          .endofpacket
		.sink7_ready          (mux_pipeline_029_source0_ready),         //     sink7.ready
		.sink7_valid          (mux_pipeline_029_source0_valid),         //          .valid
		.sink7_channel        (mux_pipeline_029_source0_channel),       //          .channel
		.sink7_data           (mux_pipeline_029_source0_data),          //          .data
		.sink7_startofpacket  (mux_pipeline_029_source0_startofpacket), //          .startofpacket
		.sink7_endofpacket    (mux_pipeline_029_source0_endofpacket),   //          .endofpacket
		.sink8_ready          (mux_pipeline_030_source0_ready),         //     sink8.ready
		.sink8_valid          (mux_pipeline_030_source0_valid),         //          .valid
		.sink8_channel        (mux_pipeline_030_source0_channel),       //          .channel
		.sink8_data           (mux_pipeline_030_source0_data),          //          .data
		.sink8_startofpacket  (mux_pipeline_030_source0_startofpacket), //          .startofpacket
		.sink8_endofpacket    (mux_pipeline_030_source0_endofpacket),   //          .endofpacket
		.sink9_ready          (mux_pipeline_031_source0_ready),         //     sink9.ready
		.sink9_valid          (mux_pipeline_031_source0_valid),         //          .valid
		.sink9_channel        (mux_pipeline_031_source0_channel),       //          .channel
		.sink9_data           (mux_pipeline_031_source0_data),          //          .data
		.sink9_startofpacket  (mux_pipeline_031_source0_startofpacket), //          .startofpacket
		.sink9_endofpacket    (mux_pipeline_031_source0_endofpacket),   //          .endofpacket
		.sink10_ready         (mux_pipeline_032_source0_ready),         //    sink10.ready
		.sink10_valid         (mux_pipeline_032_source0_valid),         //          .valid
		.sink10_channel       (mux_pipeline_032_source0_channel),       //          .channel
		.sink10_data          (mux_pipeline_032_source0_data),          //          .data
		.sink10_startofpacket (mux_pipeline_032_source0_startofpacket), //          .startofpacket
		.sink10_endofpacket   (mux_pipeline_032_source0_endofpacket),   //          .endofpacket
		.sink11_ready         (mux_pipeline_033_source0_ready),         //    sink11.ready
		.sink11_valid         (mux_pipeline_033_source0_valid),         //          .valid
		.sink11_channel       (mux_pipeline_033_source0_channel),       //          .channel
		.sink11_data          (mux_pipeline_033_source0_data),          //          .data
		.sink11_startofpacket (mux_pipeline_033_source0_startofpacket), //          .startofpacket
		.sink11_endofpacket   (mux_pipeline_033_source0_endofpacket),   //          .endofpacket
		.sink12_ready         (mux_pipeline_034_source0_ready),         //    sink12.ready
		.sink12_valid         (mux_pipeline_034_source0_valid),         //          .valid
		.sink12_channel       (mux_pipeline_034_source0_channel),       //          .channel
		.sink12_data          (mux_pipeline_034_source0_data),          //          .data
		.sink12_startofpacket (mux_pipeline_034_source0_startofpacket), //          .startofpacket
		.sink12_endofpacket   (mux_pipeline_034_source0_endofpacket),   //          .endofpacket
		.sink13_ready         (mux_pipeline_035_source0_ready),         //    sink13.ready
		.sink13_valid         (mux_pipeline_035_source0_valid),         //          .valid
		.sink13_channel       (mux_pipeline_035_source0_channel),       //          .channel
		.sink13_data          (mux_pipeline_035_source0_data),          //          .data
		.sink13_startofpacket (mux_pipeline_035_source0_startofpacket), //          .startofpacket
		.sink13_endofpacket   (mux_pipeline_035_source0_endofpacket),   //          .endofpacket
		.sink14_ready         (mux_pipeline_036_source0_ready),         //    sink14.ready
		.sink14_valid         (mux_pipeline_036_source0_valid),         //          .valid
		.sink14_channel       (mux_pipeline_036_source0_channel),       //          .channel
		.sink14_data          (mux_pipeline_036_source0_data),          //          .data
		.sink14_startofpacket (mux_pipeline_036_source0_startofpacket), //          .startofpacket
		.sink14_endofpacket   (mux_pipeline_036_source0_endofpacket),   //          .endofpacket
		.sink15_ready         (mux_pipeline_037_source0_ready),         //    sink15.ready
		.sink15_valid         (mux_pipeline_037_source0_valid),         //          .valid
		.sink15_channel       (mux_pipeline_037_source0_channel),       //          .channel
		.sink15_data          (mux_pipeline_037_source0_data),          //          .data
		.sink15_startofpacket (mux_pipeline_037_source0_startofpacket), //          .startofpacket
		.sink15_endofpacket   (mux_pipeline_037_source0_endofpacket),   //          .endofpacket
		.sink16_ready         (mux_pipeline_038_source0_ready),         //    sink16.ready
		.sink16_valid         (mux_pipeline_038_source0_valid),         //          .valid
		.sink16_channel       (mux_pipeline_038_source0_channel),       //          .channel
		.sink16_data          (mux_pipeline_038_source0_data),          //          .data
		.sink16_startofpacket (mux_pipeline_038_source0_startofpacket), //          .startofpacket
		.sink16_endofpacket   (mux_pipeline_038_source0_endofpacket),   //          .endofpacket
		.sink17_ready         (mux_pipeline_039_source0_ready),         //    sink17.ready
		.sink17_valid         (mux_pipeline_039_source0_valid),         //          .valid
		.sink17_channel       (mux_pipeline_039_source0_channel),       //          .channel
		.sink17_data          (mux_pipeline_039_source0_data),          //          .data
		.sink17_startofpacket (mux_pipeline_039_source0_startofpacket), //          .startofpacket
		.sink17_endofpacket   (mux_pipeline_039_source0_endofpacket),   //          .endofpacket
		.sink18_ready         (mux_pipeline_040_source0_ready),         //    sink18.ready
		.sink18_valid         (mux_pipeline_040_source0_valid),         //          .valid
		.sink18_channel       (mux_pipeline_040_source0_channel),       //          .channel
		.sink18_data          (mux_pipeline_040_source0_data),          //          .data
		.sink18_startofpacket (mux_pipeline_040_source0_startofpacket), //          .startofpacket
		.sink18_endofpacket   (mux_pipeline_040_source0_endofpacket)    //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                 (clk_125_clk_clk),                        //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                  //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                  //          .valid
		.src_data            (rsp_mux_001_src_data),                   //          .data
		.src_channel         (rsp_mux_001_src_channel),                //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),          //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),            //          .endofpacket
		.sink0_ready         (mux_pipeline_041_source0_ready),         //     sink0.ready
		.sink0_valid         (mux_pipeline_041_source0_valid),         //          .valid
		.sink0_channel       (mux_pipeline_041_source0_channel),       //          .channel
		.sink0_data          (mux_pipeline_041_source0_data),          //          .data
		.sink0_startofpacket (mux_pipeline_041_source0_startofpacket), //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_041_source0_endofpacket),   //          .endofpacket
		.sink1_ready         (mux_pipeline_042_source0_ready),         //     sink1.ready
		.sink1_valid         (mux_pipeline_042_source0_valid),         //          .valid
		.sink1_channel       (mux_pipeline_042_source0_channel),       //          .channel
		.sink1_data          (mux_pipeline_042_source0_data),          //          .data
		.sink1_startofpacket (mux_pipeline_042_source0_startofpacket), //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_042_source0_endofpacket)    //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_rsp_mux_002 rsp_mux_002 (
		.clk                 (clk_50_out_clk_clk),                          //       clk.clk
		.reset               (sd_cont_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                       //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                       //          .valid
		.src_data            (rsp_mux_002_src_data),                        //          .data
		.src_channel         (rsp_mux_002_src_channel),                     //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (mux_pipeline_043_source0_ready),              //     sink0.ready
		.sink0_valid         (mux_pipeline_043_source0_valid),              //          .valid
		.sink0_channel       (mux_pipeline_043_source0_channel),            //          .channel
		.sink0_data          (mux_pipeline_043_source0_data),               //          .data
		.sink0_startofpacket (mux_pipeline_043_source0_startofpacket),      //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_043_source0_endofpacket)         //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (191),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (194),
		.IN_PKT_BURSTWRAP_L            (192),
		.IN_PKT_BURST_SIZE_H           (197),
		.IN_PKT_BURST_SIZE_L           (195),
		.IN_PKT_RESPONSE_STATUS_H      (223),
		.IN_PKT_RESPONSE_STATUS_L      (222),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (199),
		.IN_PKT_BURST_TYPE_L           (198),
		.IN_PKT_ORI_BURST_SIZE_L       (224),
		.IN_PKT_ORI_BURST_SIZE_H       (226),
		.IN_ST_DATA_W                  (227),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (89),
		.OUT_PKT_BURST_SIZE_L          (87),
		.OUT_PKT_RESPONSE_STATUS_H     (115),
		.OUT_PKT_RESPONSE_STATUS_L     (114),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (91),
		.OUT_PKT_BURST_TYPE_L          (90),
		.OUT_PKT_ORI_BURST_SIZE_L      (116),
		.OUT_PKT_ORI_BURST_SIZE_H      (118),
		.OUT_ST_DATA_W                 (119),
		.ST_CHANNEL_W                  (19),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) video_dma_descriptor_slave_rsp_width_adapter (
		.clk                  (clk_125_clk_clk),                                                //       clk.clk
		.reset                (sysid_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.in_valid             (router_010_src_valid),                                           //      sink.valid
		.in_channel           (router_010_src_channel),                                         //          .channel
		.in_startofpacket     (router_010_src_startofpacket),                                   //          .startofpacket
		.in_endofpacket       (router_010_src_endofpacket),                                     //          .endofpacket
		.in_ready             (router_010_src_ready),                                           //          .ready
		.in_data              (router_010_src_data),                                            //          .data
		.out_endofpacket      (video_dma_descriptor_slave_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (video_dma_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.out_channel          (video_dma_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (video_dma_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (video_dma_descriptor_slave_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (video_dma_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (191),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (194),
		.IN_PKT_BURSTWRAP_L            (192),
		.IN_PKT_BURST_SIZE_H           (197),
		.IN_PKT_BURST_SIZE_L           (195),
		.IN_PKT_RESPONSE_STATUS_H      (223),
		.IN_PKT_RESPONSE_STATUS_L      (222),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (199),
		.IN_PKT_BURST_TYPE_L           (198),
		.IN_PKT_ORI_BURST_SIZE_L       (224),
		.IN_PKT_ORI_BURST_SIZE_H       (226),
		.IN_ST_DATA_W                  (227),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (89),
		.OUT_PKT_BURST_SIZE_L          (87),
		.OUT_PKT_RESPONSE_STATUS_H     (115),
		.OUT_PKT_RESPONSE_STATUS_L     (114),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (91),
		.OUT_PKT_BURST_TYPE_L          (90),
		.OUT_PKT_ORI_BURST_SIZE_L      (116),
		.OUT_PKT_ORI_BURST_SIZE_H      (118),
		.OUT_ST_DATA_W                 (119),
		.ST_CHANNEL_W                  (19),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) to_idct_hwacel_descriptor_slave_rsp_width_adapter (
		.clk                  (clk_125_clk_clk),                                                     //       clk.clk
		.reset                (sysid_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.in_valid             (router_011_src_valid),                                                //      sink.valid
		.in_channel           (router_011_src_channel),                                              //          .channel
		.in_startofpacket     (router_011_src_startofpacket),                                        //          .startofpacket
		.in_endofpacket       (router_011_src_endofpacket),                                          //          .endofpacket
		.in_ready             (router_011_src_ready),                                                //          .ready
		.in_data              (router_011_src_data),                                                 //          .data
		.out_endofpacket      (to_idct_hwacel_descriptor_slave_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (to_idct_hwacel_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.out_channel          (to_idct_hwacel_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (to_idct_hwacel_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (to_idct_hwacel_descriptor_slave_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (to_idct_hwacel_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                               // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (191),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (194),
		.IN_PKT_BURSTWRAP_L            (192),
		.IN_PKT_BURST_SIZE_H           (197),
		.IN_PKT_BURST_SIZE_L           (195),
		.IN_PKT_RESPONSE_STATUS_H      (223),
		.IN_PKT_RESPONSE_STATUS_L      (222),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (199),
		.IN_PKT_BURST_TYPE_L           (198),
		.IN_PKT_ORI_BURST_SIZE_L       (224),
		.IN_PKT_ORI_BURST_SIZE_H       (226),
		.IN_ST_DATA_W                  (227),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (89),
		.OUT_PKT_BURST_SIZE_L          (87),
		.OUT_PKT_RESPONSE_STATUS_H     (115),
		.OUT_PKT_RESPONSE_STATUS_L     (114),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (91),
		.OUT_PKT_BURST_TYPE_L          (90),
		.OUT_PKT_ORI_BURST_SIZE_L      (116),
		.OUT_PKT_ORI_BURST_SIZE_H      (118),
		.OUT_ST_DATA_W                 (119),
		.ST_CHANNEL_W                  (19),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) from_idct_hwacel_descriptor_slave_rsp_width_adapter (
		.clk                  (clk_125_clk_clk),                                                       //       clk.clk
		.reset                (sysid_reset_reset_bridge_in_reset_reset),                               // clk_reset.reset
		.in_valid             (router_012_src_valid),                                                  //      sink.valid
		.in_channel           (router_012_src_channel),                                                //          .channel
		.in_startofpacket     (router_012_src_startofpacket),                                          //          .startofpacket
		.in_endofpacket       (router_012_src_endofpacket),                                            //          .endofpacket
		.in_ready             (router_012_src_ready),                                                  //          .ready
		.in_data              (router_012_src_data),                                                   //          .data
		.out_endofpacket      (from_idct_hwacel_descriptor_slave_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (from_idct_hwacel_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.out_channel          (from_idct_hwacel_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (from_idct_hwacel_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (from_idct_hwacel_descriptor_slave_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (from_idct_hwacel_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (65),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (68),
		.IN_PKT_BURSTWRAP_L            (66),
		.IN_PKT_BURST_SIZE_H           (71),
		.IN_PKT_BURST_SIZE_L           (69),
		.IN_PKT_RESPONSE_STATUS_H      (97),
		.IN_PKT_RESPONSE_STATUS_L      (96),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (73),
		.IN_PKT_BURST_TYPE_L           (72),
		.IN_PKT_ORI_BURST_SIZE_L       (98),
		.IN_PKT_ORI_BURST_SIZE_H       (100),
		.IN_ST_DATA_W                  (101),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (89),
		.OUT_PKT_BURST_SIZE_L          (87),
		.OUT_PKT_RESPONSE_STATUS_H     (115),
		.OUT_PKT_RESPONSE_STATUS_L     (114),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (91),
		.OUT_PKT_BURST_TYPE_L          (90),
		.OUT_PKT_ORI_BURST_SIZE_L      (116),
		.OUT_PKT_ORI_BURST_SIZE_H      (118),
		.OUT_ST_DATA_W                 (119),
		.ST_CHANNEL_W                  (19),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sram_uas_rsp_width_adapter (
		.clk                  (clk_125_clk_clk),                              //       clk.clk
		.reset                (sysid_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_valid             (router_021_src_valid),                         //      sink.valid
		.in_channel           (router_021_src_channel),                       //          .channel
		.in_startofpacket     (router_021_src_startofpacket),                 //          .startofpacket
		.in_endofpacket       (router_021_src_endofpacket),                   //          .endofpacket
		.in_ready             (router_021_src_ready),                         //          .ready
		.in_data              (router_021_src_data),                          //          .data
		.out_endofpacket      (sram_uas_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sram_uas_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sram_uas_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sram_uas_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sram_uas_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sram_uas_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (86),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (89),
		.IN_PKT_BURST_SIZE_L           (87),
		.IN_PKT_RESPONSE_STATUS_H      (115),
		.IN_PKT_RESPONSE_STATUS_L      (114),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (91),
		.IN_PKT_BURST_TYPE_L           (90),
		.IN_PKT_ORI_BURST_SIZE_L       (116),
		.IN_PKT_ORI_BURST_SIZE_H       (118),
		.IN_ST_DATA_W                  (119),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (191),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (197),
		.OUT_PKT_BURST_SIZE_L          (195),
		.OUT_PKT_RESPONSE_STATUS_H     (223),
		.OUT_PKT_RESPONSE_STATUS_L     (222),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (199),
		.OUT_PKT_BURST_TYPE_L          (198),
		.OUT_PKT_ORI_BURST_SIZE_L      (224),
		.OUT_PKT_ORI_BURST_SIZE_H      (226),
		.OUT_ST_DATA_W                 (227),
		.ST_CHANNEL_W                  (19),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) video_dma_descriptor_slave_cmd_width_adapter (
		.clk                  (clk_125_clk_clk),                                                //       clk.clk
		.reset                (sysid_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.in_valid             (cmd_mux_007_src_valid),                                          //      sink.valid
		.in_channel           (cmd_mux_007_src_channel),                                        //          .channel
		.in_startofpacket     (cmd_mux_007_src_startofpacket),                                  //          .startofpacket
		.in_endofpacket       (cmd_mux_007_src_endofpacket),                                    //          .endofpacket
		.in_ready             (cmd_mux_007_src_ready),                                          //          .ready
		.in_data              (cmd_mux_007_src_data),                                           //          .data
		.out_endofpacket      (video_dma_descriptor_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (video_dma_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (video_dma_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (video_dma_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (video_dma_descriptor_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (video_dma_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (86),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (89),
		.IN_PKT_BURST_SIZE_L           (87),
		.IN_PKT_RESPONSE_STATUS_H      (115),
		.IN_PKT_RESPONSE_STATUS_L      (114),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (91),
		.IN_PKT_BURST_TYPE_L           (90),
		.IN_PKT_ORI_BURST_SIZE_L       (116),
		.IN_PKT_ORI_BURST_SIZE_H       (118),
		.IN_ST_DATA_W                  (119),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (191),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (197),
		.OUT_PKT_BURST_SIZE_L          (195),
		.OUT_PKT_RESPONSE_STATUS_H     (223),
		.OUT_PKT_RESPONSE_STATUS_L     (222),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (199),
		.OUT_PKT_BURST_TYPE_L          (198),
		.OUT_PKT_ORI_BURST_SIZE_L      (224),
		.OUT_PKT_ORI_BURST_SIZE_H      (226),
		.OUT_ST_DATA_W                 (227),
		.ST_CHANNEL_W                  (19),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) to_idct_hwacel_descriptor_slave_cmd_width_adapter (
		.clk                  (clk_125_clk_clk),                                                     //       clk.clk
		.reset                (sysid_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.in_valid             (cmd_mux_008_src_valid),                                               //      sink.valid
		.in_channel           (cmd_mux_008_src_channel),                                             //          .channel
		.in_startofpacket     (cmd_mux_008_src_startofpacket),                                       //          .startofpacket
		.in_endofpacket       (cmd_mux_008_src_endofpacket),                                         //          .endofpacket
		.in_ready             (cmd_mux_008_src_ready),                                               //          .ready
		.in_data              (cmd_mux_008_src_data),                                                //          .data
		.out_endofpacket      (to_idct_hwacel_descriptor_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (to_idct_hwacel_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (to_idct_hwacel_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (to_idct_hwacel_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (to_idct_hwacel_descriptor_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (to_idct_hwacel_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                               // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (86),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (89),
		.IN_PKT_BURST_SIZE_L           (87),
		.IN_PKT_RESPONSE_STATUS_H      (115),
		.IN_PKT_RESPONSE_STATUS_L      (114),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (91),
		.IN_PKT_BURST_TYPE_L           (90),
		.IN_PKT_ORI_BURST_SIZE_L       (116),
		.IN_PKT_ORI_BURST_SIZE_H       (118),
		.IN_ST_DATA_W                  (119),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (191),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (197),
		.OUT_PKT_BURST_SIZE_L          (195),
		.OUT_PKT_RESPONSE_STATUS_H     (223),
		.OUT_PKT_RESPONSE_STATUS_L     (222),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (199),
		.OUT_PKT_BURST_TYPE_L          (198),
		.OUT_PKT_ORI_BURST_SIZE_L      (224),
		.OUT_PKT_ORI_BURST_SIZE_H      (226),
		.OUT_ST_DATA_W                 (227),
		.ST_CHANNEL_W                  (19),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) from_idct_hwacel_descriptor_slave_cmd_width_adapter (
		.clk                  (clk_125_clk_clk),                                                       //       clk.clk
		.reset                (sysid_reset_reset_bridge_in_reset_reset),                               // clk_reset.reset
		.in_valid             (cmd_mux_009_src_valid),                                                 //      sink.valid
		.in_channel           (cmd_mux_009_src_channel),                                               //          .channel
		.in_startofpacket     (cmd_mux_009_src_startofpacket),                                         //          .startofpacket
		.in_endofpacket       (cmd_mux_009_src_endofpacket),                                           //          .endofpacket
		.in_ready             (cmd_mux_009_src_ready),                                                 //          .ready
		.in_data              (cmd_mux_009_src_data),                                                  //          .data
		.out_endofpacket      (from_idct_hwacel_descriptor_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (from_idct_hwacel_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (from_idct_hwacel_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (from_idct_hwacel_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (from_idct_hwacel_descriptor_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (from_idct_hwacel_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (86),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (89),
		.IN_PKT_BURST_SIZE_L           (87),
		.IN_PKT_RESPONSE_STATUS_H      (115),
		.IN_PKT_RESPONSE_STATUS_L      (114),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (91),
		.IN_PKT_BURST_TYPE_L           (90),
		.IN_PKT_ORI_BURST_SIZE_L       (116),
		.IN_PKT_ORI_BURST_SIZE_H       (118),
		.IN_ST_DATA_W                  (119),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (65),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (71),
		.OUT_PKT_BURST_SIZE_L          (69),
		.OUT_PKT_RESPONSE_STATUS_H     (97),
		.OUT_PKT_RESPONSE_STATUS_L     (96),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (73),
		.OUT_PKT_BURST_TYPE_L          (72),
		.OUT_PKT_ORI_BURST_SIZE_L      (98),
		.OUT_PKT_ORI_BURST_SIZE_H      (100),
		.OUT_ST_DATA_W                 (101),
		.ST_CHANNEL_W                  (19),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sram_uas_cmd_width_adapter (
		.clk                  (clk_125_clk_clk),                              //       clk.clk
		.reset                (sysid_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_valid             (cmd_mux_018_src_valid),                        //      sink.valid
		.in_channel           (cmd_mux_018_src_channel),                      //          .channel
		.in_startofpacket     (cmd_mux_018_src_startofpacket),                //          .startofpacket
		.in_endofpacket       (cmd_mux_018_src_endofpacket),                  //          .endofpacket
		.in_ready             (cmd_mux_018_src_ready),                        //          .ready
		.in_data              (cmd_mux_018_src_data),                         //          .data
		.out_endofpacket      (sram_uas_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sram_uas_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sram_uas_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sram_uas_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sram_uas_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sram_uas_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                        // (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (119),
		.BITS_PER_SYMBOL     (119),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (clk_125_clk_clk),                             //        in_clk.clk
		.in_reset          (cpu_reset_reset_bridge_in_reset_reset),       //  in_clk_reset.reset
		.out_clk           (clk_50_out_clk_clk),                          //       out_clk.clk
		.out_reset         (sd_cont_0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src17_ready),                       //            in.ready
		.in_valid          (cmd_demux_src17_valid),                       //              .valid
		.in_startofpacket  (cmd_demux_src17_startofpacket),               //              .startofpacket
		.in_endofpacket    (cmd_demux_src17_endofpacket),                 //              .endofpacket
		.in_channel        (cmd_demux_src17_channel),                     //              .channel
		.in_data           (cmd_demux_src17_data),                        //              .data
		.out_ready         (crosser_out_ready),                           //           out.ready
		.out_valid         (crosser_out_valid),                           //              .valid
		.out_startofpacket (crosser_out_startofpacket),                   //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                     //              .endofpacket
		.out_channel       (crosser_out_channel),                         //              .channel
		.out_data          (crosser_out_data),                            //              .data
		.in_empty          (1'b0),                                        //   (terminated)
		.in_error          (1'b0),                                        //   (terminated)
		.out_empty         (),                                            //   (terminated)
		.out_error         ()                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (119),
		.BITS_PER_SYMBOL     (119),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (clk_50_out_clk_clk),                          //        in_clk.clk
		.in_reset          (sd_cont_0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_125_clk_clk),                             //       out_clk.clk
		.out_reset         (sysid_reset_reset_bridge_in_reset_reset),     // out_clk_reset.reset
		.in_ready          (cmd_demux_002_src0_ready),                    //            in.ready
		.in_valid          (cmd_demux_002_src0_valid),                    //              .valid
		.in_startofpacket  (cmd_demux_002_src0_startofpacket),            //              .startofpacket
		.in_endofpacket    (cmd_demux_002_src0_endofpacket),              //              .endofpacket
		.in_channel        (cmd_demux_002_src0_channel),                  //              .channel
		.in_data           (cmd_demux_002_src0_data),                     //              .data
		.out_ready         (crosser_001_out_ready),                       //           out.ready
		.out_valid         (crosser_001_out_valid),                       //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),               //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                 //              .endofpacket
		.out_channel       (crosser_001_out_channel),                     //              .channel
		.out_data          (crosser_001_out_data),                        //              .data
		.in_empty          (1'b0),                                        //   (terminated)
		.in_error          (1'b0),                                        //   (terminated)
		.out_empty         (),                                            //   (terminated)
		.out_error         ()                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (119),
		.BITS_PER_SYMBOL     (119),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (clk_125_clk_clk),                             //        in_clk.clk
		.in_reset          (sysid_reset_reset_bridge_in_reset_reset),     //  in_clk_reset.reset
		.out_clk           (clk_50_out_clk_clk),                          //       out_clk.clk
		.out_reset         (sd_cont_0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_001_src1_ready),                    //            in.ready
		.in_valid          (rsp_demux_001_src1_valid),                    //              .valid
		.in_startofpacket  (rsp_demux_001_src1_startofpacket),            //              .startofpacket
		.in_endofpacket    (rsp_demux_001_src1_endofpacket),              //              .endofpacket
		.in_channel        (rsp_demux_001_src1_channel),                  //              .channel
		.in_data           (rsp_demux_001_src1_data),                     //              .data
		.out_ready         (crosser_002_out_ready),                       //           out.ready
		.out_valid         (crosser_002_out_valid),                       //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),               //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                 //              .endofpacket
		.out_channel       (crosser_002_out_channel),                     //              .channel
		.out_data          (crosser_002_out_data),                        //              .data
		.in_empty          (1'b0),                                        //   (terminated)
		.in_error          (1'b0),                                        //   (terminated)
		.out_empty         (),                                            //   (terminated)
		.out_error         ()                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (119),
		.BITS_PER_SYMBOL     (119),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (clk_50_out_clk_clk),                          //        in_clk.clk
		.in_reset          (sd_cont_0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_125_clk_clk),                             //       out_clk.clk
		.out_reset         (cpu_reset_reset_bridge_in_reset_reset),       // out_clk_reset.reset
		.in_ready          (rsp_demux_017_src0_ready),                    //            in.ready
		.in_valid          (rsp_demux_017_src0_valid),                    //              .valid
		.in_startofpacket  (rsp_demux_017_src0_startofpacket),            //              .startofpacket
		.in_endofpacket    (rsp_demux_017_src0_endofpacket),              //              .endofpacket
		.in_channel        (rsp_demux_017_src0_channel),                  //              .channel
		.in_data           (rsp_demux_017_src0_data),                     //              .data
		.out_ready         (crosser_003_out_ready),                       //           out.ready
		.out_valid         (crosser_003_out_valid),                       //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),               //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                 //              .endofpacket
		.out_channel       (crosser_003_out_channel),                     //              .channel
		.out_data          (crosser_003_out_data),                        //              .data
		.in_empty          (1'b0),                                        //   (terminated)
		.in_error          (1'b0),                                        //   (terminated)
		.out_empty         (),                                            //   (terminated)
		.out_error         ()                                             //   (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline (
		.clk               (clk_125_clk_clk),                               //       cr0.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),         // cr0_reset.reset
		.in_ready          (cpu_data_master_limiter_cmd_src_ready),         //     sink0.ready
		.in_valid          (cpu_data_master_limiter_cmd_src_valid),         //          .valid
		.in_startofpacket  (cpu_data_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.in_endofpacket    (cpu_data_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.in_data           (cpu_data_master_limiter_cmd_src_data),          //          .data
		.in_channel        (cpu_data_master_limiter_cmd_src_channel),       //          .channel
		.out_ready         (limiter_pipeline_source0_ready),                //   source0.ready
		.out_valid         (limiter_pipeline_source0_valid),                //          .valid
		.out_startofpacket (limiter_pipeline_source0_startofpacket),        //          .startofpacket
		.out_endofpacket   (limiter_pipeline_source0_endofpacket),          //          .endofpacket
		.out_data          (limiter_pipeline_source0_data),                 //          .data
		.out_channel       (limiter_pipeline_source0_channel),              //          .channel
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.out_error         (),                                              // (terminated)
		.in_error          (1'b0)                                           // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline_001 (
		.clk               (clk_125_clk_clk),                            //       cr0.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.in_ready          (rsp_mux_src_ready),                          //     sink0.ready
		.in_valid          (rsp_mux_src_valid),                          //          .valid
		.in_startofpacket  (rsp_mux_src_startofpacket),                  //          .startofpacket
		.in_endofpacket    (rsp_mux_src_endofpacket),                    //          .endofpacket
		.in_data           (rsp_mux_src_data),                           //          .data
		.in_channel        (rsp_mux_src_channel),                        //          .channel
		.out_ready         (limiter_pipeline_001_source0_ready),         //   source0.ready
		.out_valid         (limiter_pipeline_001_source0_valid),         //          .valid
		.out_startofpacket (limiter_pipeline_001_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (limiter_pipeline_001_source0_endofpacket),   //          .endofpacket
		.out_data          (limiter_pipeline_001_source0_data),          //          .data
		.out_channel       (limiter_pipeline_001_source0_channel),       //          .channel
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.out_error         (),                                           // (terminated)
		.in_error          (1'b0)                                        // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline_002 (
		.clk               (clk_125_clk_clk),                                      //       cr0.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),                // cr0_reset.reset
		.in_ready          (cpu_instruction_master_limiter_cmd_src_ready),         //     sink0.ready
		.in_valid          (cpu_instruction_master_limiter_cmd_src_valid),         //          .valid
		.in_startofpacket  (cpu_instruction_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.in_endofpacket    (cpu_instruction_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.in_data           (cpu_instruction_master_limiter_cmd_src_data),          //          .data
		.in_channel        (cpu_instruction_master_limiter_cmd_src_channel),       //          .channel
		.out_ready         (limiter_pipeline_002_source0_ready),                   //   source0.ready
		.out_valid         (limiter_pipeline_002_source0_valid),                   //          .valid
		.out_startofpacket (limiter_pipeline_002_source0_startofpacket),           //          .startofpacket
		.out_endofpacket   (limiter_pipeline_002_source0_endofpacket),             //          .endofpacket
		.out_data          (limiter_pipeline_002_source0_data),                    //          .data
		.out_channel       (limiter_pipeline_002_source0_channel),                 //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline_003 (
		.clk               (clk_125_clk_clk),                            //       cr0.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.in_ready          (rsp_mux_001_src_ready),                      //     sink0.ready
		.in_valid          (rsp_mux_001_src_valid),                      //          .valid
		.in_startofpacket  (rsp_mux_001_src_startofpacket),              //          .startofpacket
		.in_endofpacket    (rsp_mux_001_src_endofpacket),                //          .endofpacket
		.in_data           (rsp_mux_001_src_data),                       //          .data
		.in_channel        (rsp_mux_001_src_channel),                    //          .channel
		.out_ready         (limiter_pipeline_003_source0_ready),         //   source0.ready
		.out_valid         (limiter_pipeline_003_source0_valid),         //          .valid
		.out_startofpacket (limiter_pipeline_003_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (limiter_pipeline_003_source0_endofpacket),   //          .endofpacket
		.out_data          (limiter_pipeline_003_source0_data),          //          .data
		.out_channel       (limiter_pipeline_003_source0_channel),       //          .channel
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.out_error         (),                                           // (terminated)
		.in_error          (1'b0)                                        // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline (
		.clk               (clk_125_clk_clk),                                                 //       cr0.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),                           // cr0_reset.reset
		.in_ready          (jtag_uart_avalon_jtag_slave_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (jtag_uart_avalon_jtag_slave_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (jtag_uart_avalon_jtag_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (jtag_uart_avalon_jtag_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (jtag_uart_avalon_jtag_slave_burst_adapter_source0_data),          //          .data
		.in_channel        (jtag_uart_avalon_jtag_slave_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_source0_ready),                                    //   source0.ready
		.out_valid         (agent_pipeline_source0_valid),                                    //          .valid
		.out_startofpacket (agent_pipeline_source0_startofpacket),                            //          .startofpacket
		.out_endofpacket   (agent_pipeline_source0_endofpacket),                              //          .endofpacket
		.out_data          (agent_pipeline_source0_data),                                     //          .data
		.out_channel       (agent_pipeline_source0_channel),                                  //          .channel
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_error          (1'b0)                                                             // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_001 (
		.clk               (clk_125_clk_clk),                                    //       cr0.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),              // cr0_reset.reset
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rp_ready),         //     sink0.ready
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.in_startofpacket  (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rp_data),          //          .data
		.out_ready         (agent_pipeline_001_source0_ready),                   //   source0.ready
		.out_valid         (agent_pipeline_001_source0_valid),                   //          .valid
		.out_startofpacket (agent_pipeline_001_source0_startofpacket),           //          .startofpacket
		.out_endofpacket   (agent_pipeline_001_source0_endofpacket),             //          .endofpacket
		.out_data          (agent_pipeline_001_source0_data),                    //          .data
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_channel       (),                                                   // (terminated)
		.in_channel        (1'b0)                                                // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_002 (
		.clk               (clk_125_clk_clk),                          //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (cmd_mux_001_src_ready),                    //     sink0.ready
		.in_valid          (cmd_mux_001_src_valid),                    //          .valid
		.in_startofpacket  (cmd_mux_001_src_startofpacket),            //          .startofpacket
		.in_endofpacket    (cmd_mux_001_src_endofpacket),              //          .endofpacket
		.in_data           (cmd_mux_001_src_data),                     //          .data
		.in_channel        (cmd_mux_001_src_channel),                  //          .channel
		.out_ready         (agent_pipeline_002_source0_ready),         //   source0.ready
		.out_valid         (agent_pipeline_002_source0_valid),         //          .valid
		.out_startofpacket (agent_pipeline_002_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (agent_pipeline_002_source0_endofpacket),   //          .endofpacket
		.out_data          (agent_pipeline_002_source0_data),          //          .data
		.out_channel       (agent_pipeline_002_source0_channel),       //          .channel
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_003 (
		.clk               (clk_125_clk_clk),                          //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (lpddr2_avl_0_agent_rp_ready),              //     sink0.ready
		.in_valid          (lpddr2_avl_0_agent_rp_valid),              //          .valid
		.in_startofpacket  (lpddr2_avl_0_agent_rp_startofpacket),      //          .startofpacket
		.in_endofpacket    (lpddr2_avl_0_agent_rp_endofpacket),        //          .endofpacket
		.in_data           (lpddr2_avl_0_agent_rp_data),               //          .data
		.out_ready         (agent_pipeline_003_source0_ready),         //   source0.ready
		.out_valid         (agent_pipeline_003_source0_valid),         //          .valid
		.out_startofpacket (agent_pipeline_003_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (agent_pipeline_003_source0_endofpacket),   //          .endofpacket
		.out_data          (agent_pipeline_003_source0_data),          //          .data
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_channel       (),                                         // (terminated)
		.in_channel        (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_004 (
		.clk               (clk_125_clk_clk),                                         //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),                 // cr0_reset.reset
		.in_ready          (sysid_control_slave_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (sysid_control_slave_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (sysid_control_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (sysid_control_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (sysid_control_slave_burst_adapter_source0_data),          //          .data
		.in_channel        (sysid_control_slave_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_004_source0_ready),                        //   source0.ready
		.out_valid         (agent_pipeline_004_source0_valid),                        //          .valid
		.out_startofpacket (agent_pipeline_004_source0_startofpacket),                //          .startofpacket
		.out_endofpacket   (agent_pipeline_004_source0_endofpacket),                  //          .endofpacket
		.out_data          (agent_pipeline_004_source0_data),                         //          .data
		.out_channel       (agent_pipeline_004_source0_channel),                      //          .channel
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_error          (1'b0)                                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_005 (
		.clk               (clk_125_clk_clk),                            //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.in_ready          (sysid_control_slave_agent_rp_ready),         //     sink0.ready
		.in_valid          (sysid_control_slave_agent_rp_valid),         //          .valid
		.in_startofpacket  (sysid_control_slave_agent_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (sysid_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.in_data           (sysid_control_slave_agent_rp_data),          //          .data
		.out_ready         (agent_pipeline_005_source0_ready),           //   source0.ready
		.out_valid         (agent_pipeline_005_source0_valid),           //          .valid
		.out_startofpacket (agent_pipeline_005_source0_startofpacket),   //          .startofpacket
		.out_endofpacket   (agent_pipeline_005_source0_endofpacket),     //          .endofpacket
		.out_data          (agent_pipeline_005_source0_data),            //          .data
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.out_error         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_channel       (),                                           // (terminated)
		.in_channel        (1'b0)                                        // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_006 (
		.clk               (clk_125_clk_clk),                                   //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),           // cr0_reset.reset
		.in_ready          (video_dma_csr_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (video_dma_csr_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (video_dma_csr_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (video_dma_csr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (video_dma_csr_burst_adapter_source0_data),          //          .data
		.in_channel        (video_dma_csr_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_006_source0_ready),                  //   source0.ready
		.out_valid         (agent_pipeline_006_source0_valid),                  //          .valid
		.out_startofpacket (agent_pipeline_006_source0_startofpacket),          //          .startofpacket
		.out_endofpacket   (agent_pipeline_006_source0_endofpacket),            //          .endofpacket
		.out_data          (agent_pipeline_006_source0_data),                   //          .data
		.out_channel       (agent_pipeline_006_source0_channel),                //          .channel
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_error          (1'b0)                                               // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_007 (
		.clk               (clk_125_clk_clk),                          //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (video_dma_csr_agent_rp_ready),             //     sink0.ready
		.in_valid          (video_dma_csr_agent_rp_valid),             //          .valid
		.in_startofpacket  (video_dma_csr_agent_rp_startofpacket),     //          .startofpacket
		.in_endofpacket    (video_dma_csr_agent_rp_endofpacket),       //          .endofpacket
		.in_data           (video_dma_csr_agent_rp_data),              //          .data
		.out_ready         (agent_pipeline_007_source0_ready),         //   source0.ready
		.out_valid         (agent_pipeline_007_source0_valid),         //          .valid
		.out_startofpacket (agent_pipeline_007_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (agent_pipeline_007_source0_endofpacket),   //          .endofpacket
		.out_data          (agent_pipeline_007_source0_data),          //          .data
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_channel       (),                                         // (terminated)
		.in_channel        (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_008 (
		.clk               (clk_125_clk_clk),                                        //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),                // cr0_reset.reset
		.in_ready          (to_idct_hwacel_csr_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (to_idct_hwacel_csr_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (to_idct_hwacel_csr_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (to_idct_hwacel_csr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (to_idct_hwacel_csr_burst_adapter_source0_data),          //          .data
		.in_channel        (to_idct_hwacel_csr_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_008_source0_ready),                       //   source0.ready
		.out_valid         (agent_pipeline_008_source0_valid),                       //          .valid
		.out_startofpacket (agent_pipeline_008_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (agent_pipeline_008_source0_endofpacket),                 //          .endofpacket
		.out_data          (agent_pipeline_008_source0_data),                        //          .data
		.out_channel       (agent_pipeline_008_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_error          (1'b0)                                                    // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_009 (
		.clk               (clk_125_clk_clk),                           //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),   // cr0_reset.reset
		.in_ready          (to_idct_hwacel_csr_agent_rp_ready),         //     sink0.ready
		.in_valid          (to_idct_hwacel_csr_agent_rp_valid),         //          .valid
		.in_startofpacket  (to_idct_hwacel_csr_agent_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (to_idct_hwacel_csr_agent_rp_endofpacket),   //          .endofpacket
		.in_data           (to_idct_hwacel_csr_agent_rp_data),          //          .data
		.out_ready         (agent_pipeline_009_source0_ready),          //   source0.ready
		.out_valid         (agent_pipeline_009_source0_valid),          //          .valid
		.out_startofpacket (agent_pipeline_009_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (agent_pipeline_009_source0_endofpacket),    //          .endofpacket
		.out_data          (agent_pipeline_009_source0_data),           //          .data
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.out_error         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_channel       (),                                          // (terminated)
		.in_channel        (1'b0)                                       // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_010 (
		.clk               (clk_125_clk_clk),                                          //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),                  // cr0_reset.reset
		.in_ready          (from_idct_hwacel_csr_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (from_idct_hwacel_csr_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (from_idct_hwacel_csr_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (from_idct_hwacel_csr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (from_idct_hwacel_csr_burst_adapter_source0_data),          //          .data
		.in_channel        (from_idct_hwacel_csr_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_010_source0_ready),                         //   source0.ready
		.out_valid         (agent_pipeline_010_source0_valid),                         //          .valid
		.out_startofpacket (agent_pipeline_010_source0_startofpacket),                 //          .startofpacket
		.out_endofpacket   (agent_pipeline_010_source0_endofpacket),                   //          .endofpacket
		.out_data          (agent_pipeline_010_source0_data),                          //          .data
		.out_channel       (agent_pipeline_010_source0_channel),                       //          .channel
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_error          (1'b0)                                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_011 (
		.clk               (clk_125_clk_clk),                             //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.in_ready          (from_idct_hwacel_csr_agent_rp_ready),         //     sink0.ready
		.in_valid          (from_idct_hwacel_csr_agent_rp_valid),         //          .valid
		.in_startofpacket  (from_idct_hwacel_csr_agent_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (from_idct_hwacel_csr_agent_rp_endofpacket),   //          .endofpacket
		.in_data           (from_idct_hwacel_csr_agent_rp_data),          //          .data
		.out_ready         (agent_pipeline_011_source0_ready),            //   source0.ready
		.out_valid         (agent_pipeline_011_source0_valid),            //          .valid
		.out_startofpacket (agent_pipeline_011_source0_startofpacket),    //          .startofpacket
		.out_endofpacket   (agent_pipeline_011_source0_endofpacket),      //          .endofpacket
		.out_data          (agent_pipeline_011_source0_data),             //          .data
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.out_error         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_channel       (),                                            // (terminated)
		.in_channel        (1'b0)                                         // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_012 (
		.clk               (clk_125_clk_clk),                                         //       cr0.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),                   // cr0_reset.reset
		.in_ready          (cpu_debug_mem_slave_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (cpu_debug_mem_slave_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (cpu_debug_mem_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (cpu_debug_mem_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (cpu_debug_mem_slave_burst_adapter_source0_data),          //          .data
		.in_channel        (cpu_debug_mem_slave_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_012_source0_ready),                        //   source0.ready
		.out_valid         (agent_pipeline_012_source0_valid),                        //          .valid
		.out_startofpacket (agent_pipeline_012_source0_startofpacket),                //          .startofpacket
		.out_endofpacket   (agent_pipeline_012_source0_endofpacket),                  //          .endofpacket
		.out_data          (agent_pipeline_012_source0_data),                         //          .data
		.out_channel       (agent_pipeline_012_source0_channel),                      //          .channel
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_error          (1'b0)                                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_013 (
		.clk               (clk_125_clk_clk),                            //       cr0.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.in_ready          (cpu_debug_mem_slave_agent_rp_ready),         //     sink0.ready
		.in_valid          (cpu_debug_mem_slave_agent_rp_valid),         //          .valid
		.in_startofpacket  (cpu_debug_mem_slave_agent_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (cpu_debug_mem_slave_agent_rp_endofpacket),   //          .endofpacket
		.in_data           (cpu_debug_mem_slave_agent_rp_data),          //          .data
		.out_ready         (agent_pipeline_013_source0_ready),           //   source0.ready
		.out_valid         (agent_pipeline_013_source0_valid),           //          .valid
		.out_startofpacket (agent_pipeline_013_source0_startofpacket),   //          .startofpacket
		.out_endofpacket   (agent_pipeline_013_source0_endofpacket),     //          .endofpacket
		.out_data          (agent_pipeline_013_source0_data),            //          .data
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.out_error         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_channel       (),                                           // (terminated)
		.in_channel        (1'b0)                                        // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (227),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_014 (
		.clk               (clk_125_clk_clk),                                                //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),                        // cr0_reset.reset
		.in_ready          (video_dma_descriptor_slave_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (video_dma_descriptor_slave_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (video_dma_descriptor_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (video_dma_descriptor_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (video_dma_descriptor_slave_burst_adapter_source0_data),          //          .data
		.in_channel        (video_dma_descriptor_slave_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_014_source0_ready),                               //   source0.ready
		.out_valid         (agent_pipeline_014_source0_valid),                               //          .valid
		.out_startofpacket (agent_pipeline_014_source0_startofpacket),                       //          .startofpacket
		.out_endofpacket   (agent_pipeline_014_source0_endofpacket),                         //          .endofpacket
		.out_data          (agent_pipeline_014_source0_data),                                //          .data
		.out_channel       (agent_pipeline_014_source0_channel),                             //          .channel
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_error          (1'b0)                                                            // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (227),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_015 (
		.clk               (clk_125_clk_clk),                                   //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),           // cr0_reset.reset
		.in_ready          (video_dma_descriptor_slave_agent_rp_ready),         //     sink0.ready
		.in_valid          (video_dma_descriptor_slave_agent_rp_valid),         //          .valid
		.in_startofpacket  (video_dma_descriptor_slave_agent_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (video_dma_descriptor_slave_agent_rp_endofpacket),   //          .endofpacket
		.in_data           (video_dma_descriptor_slave_agent_rp_data),          //          .data
		.out_ready         (agent_pipeline_015_source0_ready),                  //   source0.ready
		.out_valid         (agent_pipeline_015_source0_valid),                  //          .valid
		.out_startofpacket (agent_pipeline_015_source0_startofpacket),          //          .startofpacket
		.out_endofpacket   (agent_pipeline_015_source0_endofpacket),            //          .endofpacket
		.out_data          (agent_pipeline_015_source0_data),                   //          .data
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_channel       (),                                                  // (terminated)
		.in_channel        (1'b0)                                               // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (227),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_016 (
		.clk               (clk_125_clk_clk),                                                     //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),                             // cr0_reset.reset
		.in_ready          (to_idct_hwacel_descriptor_slave_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (to_idct_hwacel_descriptor_slave_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (to_idct_hwacel_descriptor_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (to_idct_hwacel_descriptor_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (to_idct_hwacel_descriptor_slave_burst_adapter_source0_data),          //          .data
		.in_channel        (to_idct_hwacel_descriptor_slave_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_016_source0_ready),                                    //   source0.ready
		.out_valid         (agent_pipeline_016_source0_valid),                                    //          .valid
		.out_startofpacket (agent_pipeline_016_source0_startofpacket),                            //          .startofpacket
		.out_endofpacket   (agent_pipeline_016_source0_endofpacket),                              //          .endofpacket
		.out_data          (agent_pipeline_016_source0_data),                                     //          .data
		.out_channel       (agent_pipeline_016_source0_channel),                                  //          .channel
		.in_empty          (1'b0),                                                                // (terminated)
		.out_empty         (),                                                                    // (terminated)
		.out_error         (),                                                                    // (terminated)
		.in_error          (1'b0)                                                                 // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (227),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_017 (
		.clk               (clk_125_clk_clk),                                        //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),                // cr0_reset.reset
		.in_ready          (to_idct_hwacel_descriptor_slave_agent_rp_ready),         //     sink0.ready
		.in_valid          (to_idct_hwacel_descriptor_slave_agent_rp_valid),         //          .valid
		.in_startofpacket  (to_idct_hwacel_descriptor_slave_agent_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (to_idct_hwacel_descriptor_slave_agent_rp_endofpacket),   //          .endofpacket
		.in_data           (to_idct_hwacel_descriptor_slave_agent_rp_data),          //          .data
		.out_ready         (agent_pipeline_017_source0_ready),                       //   source0.ready
		.out_valid         (agent_pipeline_017_source0_valid),                       //          .valid
		.out_startofpacket (agent_pipeline_017_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (agent_pipeline_017_source0_endofpacket),                 //          .endofpacket
		.out_data          (agent_pipeline_017_source0_data),                        //          .data
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_channel       (),                                                       // (terminated)
		.in_channel        (1'b0)                                                    // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (227),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_018 (
		.clk               (clk_125_clk_clk),                                                       //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),                               // cr0_reset.reset
		.in_ready          (from_idct_hwacel_descriptor_slave_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (from_idct_hwacel_descriptor_slave_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (from_idct_hwacel_descriptor_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (from_idct_hwacel_descriptor_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (from_idct_hwacel_descriptor_slave_burst_adapter_source0_data),          //          .data
		.in_channel        (from_idct_hwacel_descriptor_slave_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_018_source0_ready),                                      //   source0.ready
		.out_valid         (agent_pipeline_018_source0_valid),                                      //          .valid
		.out_startofpacket (agent_pipeline_018_source0_startofpacket),                              //          .startofpacket
		.out_endofpacket   (agent_pipeline_018_source0_endofpacket),                                //          .endofpacket
		.out_data          (agent_pipeline_018_source0_data),                                       //          .data
		.out_channel       (agent_pipeline_018_source0_channel),                                    //          .channel
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_error          (1'b0)                                                                   // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (227),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_019 (
		.clk               (clk_125_clk_clk),                                          //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),                  // cr0_reset.reset
		.in_ready          (from_idct_hwacel_descriptor_slave_agent_rp_ready),         //     sink0.ready
		.in_valid          (from_idct_hwacel_descriptor_slave_agent_rp_valid),         //          .valid
		.in_startofpacket  (from_idct_hwacel_descriptor_slave_agent_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (from_idct_hwacel_descriptor_slave_agent_rp_endofpacket),   //          .endofpacket
		.in_data           (from_idct_hwacel_descriptor_slave_agent_rp_data),          //          .data
		.out_ready         (agent_pipeline_019_source0_ready),                         //   source0.ready
		.out_valid         (agent_pipeline_019_source0_valid),                         //          .valid
		.out_startofpacket (agent_pipeline_019_source0_startofpacket),                 //          .startofpacket
		.out_endofpacket   (agent_pipeline_019_source0_endofpacket),                   //          .endofpacket
		.out_data          (agent_pipeline_019_source0_data),                          //          .data
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_channel       (),                                                         // (terminated)
		.in_channel        (1'b0)                                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_020 (
		.clk               (clk_125_clk_clk),                                //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),        // cr0_reset.reset
		.in_ready          (timer_0_s1_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (timer_0_s1_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (timer_0_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (timer_0_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (timer_0_s1_burst_adapter_source0_data),          //          .data
		.in_channel        (timer_0_s1_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_020_source0_ready),               //   source0.ready
		.out_valid         (agent_pipeline_020_source0_valid),               //          .valid
		.out_startofpacket (agent_pipeline_020_source0_startofpacket),       //          .startofpacket
		.out_endofpacket   (agent_pipeline_020_source0_endofpacket),         //          .endofpacket
		.out_data          (agent_pipeline_020_source0_data),                //          .data
		.out_channel       (agent_pipeline_020_source0_channel),             //          .channel
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.out_error         (),                                               // (terminated)
		.in_error          (1'b0)                                            // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_021 (
		.clk               (clk_125_clk_clk),                          //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (timer_0_s1_agent_rp_ready),                //     sink0.ready
		.in_valid          (timer_0_s1_agent_rp_valid),                //          .valid
		.in_startofpacket  (timer_0_s1_agent_rp_startofpacket),        //          .startofpacket
		.in_endofpacket    (timer_0_s1_agent_rp_endofpacket),          //          .endofpacket
		.in_data           (timer_0_s1_agent_rp_data),                 //          .data
		.out_ready         (agent_pipeline_021_source0_ready),         //   source0.ready
		.out_valid         (agent_pipeline_021_source0_valid),         //          .valid
		.out_startofpacket (agent_pipeline_021_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (agent_pipeline_021_source0_endofpacket),   //          .endofpacket
		.out_data          (agent_pipeline_021_source0_data),          //          .data
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_channel       (),                                         // (terminated)
		.in_channel        (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_022 (
		.clk               (clk_125_clk_clk),                            //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.in_ready          (key_s1_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (key_s1_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (key_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (key_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (key_s1_burst_adapter_source0_data),          //          .data
		.in_channel        (key_s1_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_022_source0_ready),           //   source0.ready
		.out_valid         (agent_pipeline_022_source0_valid),           //          .valid
		.out_startofpacket (agent_pipeline_022_source0_startofpacket),   //          .startofpacket
		.out_endofpacket   (agent_pipeline_022_source0_endofpacket),     //          .endofpacket
		.out_data          (agent_pipeline_022_source0_data),            //          .data
		.out_channel       (agent_pipeline_022_source0_channel),         //          .channel
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.out_error         (),                                           // (terminated)
		.in_error          (1'b0)                                        // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_023 (
		.clk               (clk_125_clk_clk),                          //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (key_s1_agent_rp_ready),                    //     sink0.ready
		.in_valid          (key_s1_agent_rp_valid),                    //          .valid
		.in_startofpacket  (key_s1_agent_rp_startofpacket),            //          .startofpacket
		.in_endofpacket    (key_s1_agent_rp_endofpacket),              //          .endofpacket
		.in_data           (key_s1_agent_rp_data),                     //          .data
		.out_ready         (agent_pipeline_023_source0_ready),         //   source0.ready
		.out_valid         (agent_pipeline_023_source0_valid),         //          .valid
		.out_startofpacket (agent_pipeline_023_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (agent_pipeline_023_source0_endofpacket),   //          .endofpacket
		.out_data          (agent_pipeline_023_source0_data),          //          .data
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_channel       (),                                         // (terminated)
		.in_channel        (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_024 (
		.clk               (clk_125_clk_clk),                                //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),        // cr0_reset.reset
		.in_ready          (timer_1_s1_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (timer_1_s1_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (timer_1_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (timer_1_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (timer_1_s1_burst_adapter_source0_data),          //          .data
		.in_channel        (timer_1_s1_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_024_source0_ready),               //   source0.ready
		.out_valid         (agent_pipeline_024_source0_valid),               //          .valid
		.out_startofpacket (agent_pipeline_024_source0_startofpacket),       //          .startofpacket
		.out_endofpacket   (agent_pipeline_024_source0_endofpacket),         //          .endofpacket
		.out_data          (agent_pipeline_024_source0_data),                //          .data
		.out_channel       (agent_pipeline_024_source0_channel),             //          .channel
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.out_error         (),                                               // (terminated)
		.in_error          (1'b0)                                            // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_025 (
		.clk               (clk_125_clk_clk),                          //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (timer_1_s1_agent_rp_ready),                //     sink0.ready
		.in_valid          (timer_1_s1_agent_rp_valid),                //          .valid
		.in_startofpacket  (timer_1_s1_agent_rp_startofpacket),        //          .startofpacket
		.in_endofpacket    (timer_1_s1_agent_rp_endofpacket),          //          .endofpacket
		.in_data           (timer_1_s1_agent_rp_data),                 //          .data
		.out_ready         (agent_pipeline_025_source0_ready),         //   source0.ready
		.out_valid         (agent_pipeline_025_source0_valid),         //          .valid
		.out_startofpacket (agent_pipeline_025_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (agent_pipeline_025_source0_endofpacket),   //          .endofpacket
		.out_data          (agent_pipeline_025_source0_data),          //          .data
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_channel       (),                                         // (terminated)
		.in_channel        (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_026 (
		.clk               (clk_125_clk_clk),                             //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.in_ready          (ledg_s1_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (ledg_s1_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (ledg_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (ledg_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (ledg_s1_burst_adapter_source0_data),          //          .data
		.in_channel        (ledg_s1_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_026_source0_ready),            //   source0.ready
		.out_valid         (agent_pipeline_026_source0_valid),            //          .valid
		.out_startofpacket (agent_pipeline_026_source0_startofpacket),    //          .startofpacket
		.out_endofpacket   (agent_pipeline_026_source0_endofpacket),      //          .endofpacket
		.out_data          (agent_pipeline_026_source0_data),             //          .data
		.out_channel       (agent_pipeline_026_source0_channel),          //          .channel
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.out_error         (),                                            // (terminated)
		.in_error          (1'b0)                                         // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_027 (
		.clk               (clk_125_clk_clk),                          //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (ledg_s1_agent_rp_ready),                   //     sink0.ready
		.in_valid          (ledg_s1_agent_rp_valid),                   //          .valid
		.in_startofpacket  (ledg_s1_agent_rp_startofpacket),           //          .startofpacket
		.in_endofpacket    (ledg_s1_agent_rp_endofpacket),             //          .endofpacket
		.in_data           (ledg_s1_agent_rp_data),                    //          .data
		.out_ready         (agent_pipeline_027_source0_ready),         //   source0.ready
		.out_valid         (agent_pipeline_027_source0_valid),         //          .valid
		.out_startofpacket (agent_pipeline_027_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (agent_pipeline_027_source0_endofpacket),   //          .endofpacket
		.out_data          (agent_pipeline_027_source0_data),          //          .data
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_channel       (),                                         // (terminated)
		.in_channel        (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_028 (
		.clk               (clk_125_clk_clk),                             //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.in_ready          (ledr_s1_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (ledr_s1_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (ledr_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (ledr_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (ledr_s1_burst_adapter_source0_data),          //          .data
		.in_channel        (ledr_s1_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_028_source0_ready),            //   source0.ready
		.out_valid         (agent_pipeline_028_source0_valid),            //          .valid
		.out_startofpacket (agent_pipeline_028_source0_startofpacket),    //          .startofpacket
		.out_endofpacket   (agent_pipeline_028_source0_endofpacket),      //          .endofpacket
		.out_data          (agent_pipeline_028_source0_data),             //          .data
		.out_channel       (agent_pipeline_028_source0_channel),          //          .channel
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.out_error         (),                                            // (terminated)
		.in_error          (1'b0)                                         // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_029 (
		.clk               (clk_125_clk_clk),                          //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (ledr_s1_agent_rp_ready),                   //     sink0.ready
		.in_valid          (ledr_s1_agent_rp_valid),                   //          .valid
		.in_startofpacket  (ledr_s1_agent_rp_startofpacket),           //          .startofpacket
		.in_endofpacket    (ledr_s1_agent_rp_endofpacket),             //          .endofpacket
		.in_data           (ledr_s1_agent_rp_data),                    //          .data
		.out_ready         (agent_pipeline_029_source0_ready),         //   source0.ready
		.out_valid         (agent_pipeline_029_source0_valid),         //          .valid
		.out_startofpacket (agent_pipeline_029_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (agent_pipeline_029_source0_endofpacket),   //          .endofpacket
		.out_data          (agent_pipeline_029_source0_data),          //          .data
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_channel       (),                                         // (terminated)
		.in_channel        (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_030 (
		.clk               (clk_125_clk_clk),                                //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),        // cr0_reset.reset
		.in_ready          (i2c_scl_s1_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (i2c_scl_s1_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (i2c_scl_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (i2c_scl_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (i2c_scl_s1_burst_adapter_source0_data),          //          .data
		.in_channel        (i2c_scl_s1_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_030_source0_ready),               //   source0.ready
		.out_valid         (agent_pipeline_030_source0_valid),               //          .valid
		.out_startofpacket (agent_pipeline_030_source0_startofpacket),       //          .startofpacket
		.out_endofpacket   (agent_pipeline_030_source0_endofpacket),         //          .endofpacket
		.out_data          (agent_pipeline_030_source0_data),                //          .data
		.out_channel       (agent_pipeline_030_source0_channel),             //          .channel
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.out_error         (),                                               // (terminated)
		.in_error          (1'b0)                                            // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_031 (
		.clk               (clk_125_clk_clk),                          //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (i2c_scl_s1_agent_rp_ready),                //     sink0.ready
		.in_valid          (i2c_scl_s1_agent_rp_valid),                //          .valid
		.in_startofpacket  (i2c_scl_s1_agent_rp_startofpacket),        //          .startofpacket
		.in_endofpacket    (i2c_scl_s1_agent_rp_endofpacket),          //          .endofpacket
		.in_data           (i2c_scl_s1_agent_rp_data),                 //          .data
		.out_ready         (agent_pipeline_031_source0_ready),         //   source0.ready
		.out_valid         (agent_pipeline_031_source0_valid),         //          .valid
		.out_startofpacket (agent_pipeline_031_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (agent_pipeline_031_source0_endofpacket),   //          .endofpacket
		.out_data          (agent_pipeline_031_source0_data),          //          .data
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_channel       (),                                         // (terminated)
		.in_channel        (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_032 (
		.clk               (clk_125_clk_clk),                                //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),        // cr0_reset.reset
		.in_ready          (i2c_sda_s1_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (i2c_sda_s1_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (i2c_sda_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (i2c_sda_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (i2c_sda_s1_burst_adapter_source0_data),          //          .data
		.in_channel        (i2c_sda_s1_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_032_source0_ready),               //   source0.ready
		.out_valid         (agent_pipeline_032_source0_valid),               //          .valid
		.out_startofpacket (agent_pipeline_032_source0_startofpacket),       //          .startofpacket
		.out_endofpacket   (agent_pipeline_032_source0_endofpacket),         //          .endofpacket
		.out_data          (agent_pipeline_032_source0_data),                //          .data
		.out_channel       (agent_pipeline_032_source0_channel),             //          .channel
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.out_error         (),                                               // (terminated)
		.in_error          (1'b0)                                            // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_033 (
		.clk               (clk_125_clk_clk),                          //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (i2c_sda_s1_agent_rp_ready),                //     sink0.ready
		.in_valid          (i2c_sda_s1_agent_rp_valid),                //          .valid
		.in_startofpacket  (i2c_sda_s1_agent_rp_startofpacket),        //          .startofpacket
		.in_endofpacket    (i2c_sda_s1_agent_rp_endofpacket),          //          .endofpacket
		.in_data           (i2c_sda_s1_agent_rp_data),                 //          .data
		.out_ready         (agent_pipeline_033_source0_ready),         //   source0.ready
		.out_valid         (agent_pipeline_033_source0_valid),         //          .valid
		.out_startofpacket (agent_pipeline_033_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (agent_pipeline_033_source0_endofpacket),   //          .endofpacket
		.out_data          (agent_pipeline_033_source0_data),          //          .data
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_channel       (),                                         // (terminated)
		.in_channel        (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_034 (
		.clk               (clk_50_out_clk_clk),                                  //       cr0.clk
		.reset             (sd_cont_0_reset_reset_bridge_in_reset_reset),         // cr0_reset.reset
		.in_ready          (sd_cont_0_slave_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (sd_cont_0_slave_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (sd_cont_0_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (sd_cont_0_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (sd_cont_0_slave_burst_adapter_source0_data),          //          .data
		.in_channel        (sd_cont_0_slave_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_034_source0_ready),                    //   source0.ready
		.out_valid         (agent_pipeline_034_source0_valid),                    //          .valid
		.out_startofpacket (agent_pipeline_034_source0_startofpacket),            //          .startofpacket
		.out_endofpacket   (agent_pipeline_034_source0_endofpacket),              //          .endofpacket
		.out_data          (agent_pipeline_034_source0_data),                     //          .data
		.out_channel       (agent_pipeline_034_source0_channel),                  //          .channel
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_error          (1'b0)                                                 // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_035 (
		.clk               (clk_50_out_clk_clk),                          //       cr0.clk
		.reset             (sd_cont_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (sd_cont_0_slave_agent_rp_ready),              //     sink0.ready
		.in_valid          (sd_cont_0_slave_agent_rp_valid),              //          .valid
		.in_startofpacket  (sd_cont_0_slave_agent_rp_startofpacket),      //          .startofpacket
		.in_endofpacket    (sd_cont_0_slave_agent_rp_endofpacket),        //          .endofpacket
		.in_data           (sd_cont_0_slave_agent_rp_data),               //          .data
		.out_ready         (agent_pipeline_035_source0_ready),            //   source0.ready
		.out_valid         (agent_pipeline_035_source0_valid),            //          .valid
		.out_startofpacket (agent_pipeline_035_source0_startofpacket),    //          .startofpacket
		.out_endofpacket   (agent_pipeline_035_source0_endofpacket),      //          .endofpacket
		.out_data          (agent_pipeline_035_source0_data),             //          .data
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.out_error         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_channel       (),                                            // (terminated)
		.in_channel        (1'b0)                                         // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (101),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_036 (
		.clk               (clk_125_clk_clk),                              //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.in_ready          (sram_uas_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (sram_uas_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (sram_uas_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (sram_uas_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (sram_uas_burst_adapter_source0_data),          //          .data
		.in_channel        (sram_uas_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_036_source0_ready),             //   source0.ready
		.out_valid         (agent_pipeline_036_source0_valid),             //          .valid
		.out_startofpacket (agent_pipeline_036_source0_startofpacket),     //          .startofpacket
		.out_endofpacket   (agent_pipeline_036_source0_endofpacket),       //          .endofpacket
		.out_data          (agent_pipeline_036_source0_data),              //          .data
		.out_channel       (agent_pipeline_036_source0_channel),           //          .channel
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.out_error         (),                                             // (terminated)
		.in_error          (1'b0)                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (101),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_037 (
		.clk               (clk_125_clk_clk),                          //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (sram_uas_agent_rp_ready),                  //     sink0.ready
		.in_valid          (sram_uas_agent_rp_valid),                  //          .valid
		.in_startofpacket  (sram_uas_agent_rp_startofpacket),          //          .startofpacket
		.in_endofpacket    (sram_uas_agent_rp_endofpacket),            //          .endofpacket
		.in_data           (sram_uas_agent_rp_data),                   //          .data
		.out_ready         (agent_pipeline_037_source0_ready),         //   source0.ready
		.out_valid         (agent_pipeline_037_source0_valid),         //          .valid
		.out_startofpacket (agent_pipeline_037_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (agent_pipeline_037_source0_endofpacket),   //          .endofpacket
		.out_data          (agent_pipeline_037_source0_data),          //          .data
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_channel       (),                                         // (terminated)
		.in_channel        (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline (
		.clk               (clk_125_clk_clk),                       //       cr0.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src0_ready),                  //     sink0.ready
		.in_valid          (cmd_demux_src0_valid),                  //          .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),          //          .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),            //          .endofpacket
		.in_data           (cmd_demux_src0_data),                   //          .data
		.in_channel        (cmd_demux_src0_channel),                //          .channel
		.out_ready         (mux_pipeline_source0_ready),            //   source0.ready
		.out_valid         (mux_pipeline_source0_valid),            //          .valid
		.out_startofpacket (mux_pipeline_source0_startofpacket),    //          .startofpacket
		.out_endofpacket   (mux_pipeline_source0_endofpacket),      //          .endofpacket
		.out_data          (mux_pipeline_source0_data),             //          .data
		.out_channel       (mux_pipeline_source0_channel),          //          .channel
		.in_empty          (1'b0),                                  // (terminated)
		.out_empty         (),                                      // (terminated)
		.out_error         (),                                      // (terminated)
		.in_error          (1'b0)                                   // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_001 (
		.clk               (clk_125_clk_clk),                         //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src1_ready),                    //     sink0.ready
		.in_valid          (cmd_demux_src1_valid),                    //          .valid
		.in_startofpacket  (cmd_demux_src1_startofpacket),            //          .startofpacket
		.in_endofpacket    (cmd_demux_src1_endofpacket),              //          .endofpacket
		.in_data           (cmd_demux_src1_data),                     //          .data
		.in_channel        (cmd_demux_src1_channel),                  //          .channel
		.out_ready         (mux_pipeline_001_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_001_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_001_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_001_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_001_source0_data),           //          .data
		.out_channel       (mux_pipeline_001_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_002 (
		.clk               (clk_125_clk_clk),                         //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (crosser_001_out_ready),                   //     sink0.ready
		.in_valid          (crosser_001_out_valid),                   //          .valid
		.in_startofpacket  (crosser_001_out_startofpacket),           //          .startofpacket
		.in_endofpacket    (crosser_001_out_endofpacket),             //          .endofpacket
		.in_data           (crosser_001_out_data),                    //          .data
		.in_channel        (crosser_001_out_channel),                 //          .channel
		.out_ready         (mux_pipeline_002_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_002_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_002_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_002_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_002_source0_data),           //          .data
		.out_channel       (mux_pipeline_002_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_003 (
		.clk               (clk_125_clk_clk),                         //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src2_ready),                    //     sink0.ready
		.in_valid          (cmd_demux_src2_valid),                    //          .valid
		.in_startofpacket  (cmd_demux_src2_startofpacket),            //          .startofpacket
		.in_endofpacket    (cmd_demux_src2_endofpacket),              //          .endofpacket
		.in_data           (cmd_demux_src2_data),                     //          .data
		.in_channel        (cmd_demux_src2_channel),                  //          .channel
		.out_ready         (mux_pipeline_003_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_003_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_003_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_003_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_003_source0_data),           //          .data
		.out_channel       (mux_pipeline_003_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_004 (
		.clk               (clk_125_clk_clk),                         //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src3_ready),                    //     sink0.ready
		.in_valid          (cmd_demux_src3_valid),                    //          .valid
		.in_startofpacket  (cmd_demux_src3_startofpacket),            //          .startofpacket
		.in_endofpacket    (cmd_demux_src3_endofpacket),              //          .endofpacket
		.in_data           (cmd_demux_src3_data),                     //          .data
		.in_channel        (cmd_demux_src3_channel),                  //          .channel
		.out_ready         (mux_pipeline_004_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_004_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_004_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_004_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_004_source0_data),           //          .data
		.out_channel       (mux_pipeline_004_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_005 (
		.clk               (clk_125_clk_clk),                         //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src4_ready),                    //     sink0.ready
		.in_valid          (cmd_demux_src4_valid),                    //          .valid
		.in_startofpacket  (cmd_demux_src4_startofpacket),            //          .startofpacket
		.in_endofpacket    (cmd_demux_src4_endofpacket),              //          .endofpacket
		.in_data           (cmd_demux_src4_data),                     //          .data
		.in_channel        (cmd_demux_src4_channel),                  //          .channel
		.out_ready         (mux_pipeline_005_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_005_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_005_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_005_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_005_source0_data),           //          .data
		.out_channel       (mux_pipeline_005_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_006 (
		.clk               (clk_125_clk_clk),                         //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src5_ready),                    //     sink0.ready
		.in_valid          (cmd_demux_src5_valid),                    //          .valid
		.in_startofpacket  (cmd_demux_src5_startofpacket),            //          .startofpacket
		.in_endofpacket    (cmd_demux_src5_endofpacket),              //          .endofpacket
		.in_data           (cmd_demux_src5_data),                     //          .data
		.in_channel        (cmd_demux_src5_channel),                  //          .channel
		.out_ready         (mux_pipeline_006_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_006_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_006_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_006_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_006_source0_data),           //          .data
		.out_channel       (mux_pipeline_006_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_007 (
		.clk               (clk_125_clk_clk),                        //       cr0.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (cmd_demux_src6_ready),                   //     sink0.ready
		.in_valid          (cmd_demux_src6_valid),                   //          .valid
		.in_startofpacket  (cmd_demux_src6_startofpacket),           //          .startofpacket
		.in_endofpacket    (cmd_demux_src6_endofpacket),             //          .endofpacket
		.in_data           (cmd_demux_src6_data),                    //          .data
		.in_channel        (cmd_demux_src6_channel),                 //          .channel
		.out_ready         (mux_pipeline_007_source0_ready),         //   source0.ready
		.out_valid         (mux_pipeline_007_source0_valid),         //          .valid
		.out_startofpacket (mux_pipeline_007_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (mux_pipeline_007_source0_endofpacket),   //          .endofpacket
		.out_data          (mux_pipeline_007_source0_data),          //          .data
		.out_channel       (mux_pipeline_007_source0_channel),       //          .channel
		.in_empty          (1'b0),                                   // (terminated)
		.out_empty         (),                                       // (terminated)
		.out_error         (),                                       // (terminated)
		.in_error          (1'b0)                                    // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_008 (
		.clk               (clk_125_clk_clk),                        //       cr0.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (cmd_demux_001_src0_ready),               //     sink0.ready
		.in_valid          (cmd_demux_001_src0_valid),               //          .valid
		.in_startofpacket  (cmd_demux_001_src0_startofpacket),       //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src0_endofpacket),         //          .endofpacket
		.in_data           (cmd_demux_001_src0_data),                //          .data
		.in_channel        (cmd_demux_001_src0_channel),             //          .channel
		.out_ready         (mux_pipeline_008_source0_ready),         //   source0.ready
		.out_valid         (mux_pipeline_008_source0_valid),         //          .valid
		.out_startofpacket (mux_pipeline_008_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (mux_pipeline_008_source0_endofpacket),   //          .endofpacket
		.out_data          (mux_pipeline_008_source0_data),          //          .data
		.out_channel       (mux_pipeline_008_source0_channel),       //          .channel
		.in_empty          (1'b0),                                   // (terminated)
		.out_empty         (),                                       // (terminated)
		.out_error         (),                                       // (terminated)
		.in_error          (1'b0)                                    // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_009 (
		.clk               (clk_125_clk_clk),                         //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src7_ready),                    //     sink0.ready
		.in_valid          (cmd_demux_src7_valid),                    //          .valid
		.in_startofpacket  (cmd_demux_src7_startofpacket),            //          .startofpacket
		.in_endofpacket    (cmd_demux_src7_endofpacket),              //          .endofpacket
		.in_data           (cmd_demux_src7_data),                     //          .data
		.in_channel        (cmd_demux_src7_channel),                  //          .channel
		.out_ready         (mux_pipeline_009_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_009_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_009_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_009_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_009_source0_data),           //          .data
		.out_channel       (mux_pipeline_009_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_010 (
		.clk               (clk_125_clk_clk),                         //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src8_ready),                    //     sink0.ready
		.in_valid          (cmd_demux_src8_valid),                    //          .valid
		.in_startofpacket  (cmd_demux_src8_startofpacket),            //          .startofpacket
		.in_endofpacket    (cmd_demux_src8_endofpacket),              //          .endofpacket
		.in_data           (cmd_demux_src8_data),                     //          .data
		.in_channel        (cmd_demux_src8_channel),                  //          .channel
		.out_ready         (mux_pipeline_010_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_010_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_010_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_010_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_010_source0_data),           //          .data
		.out_channel       (mux_pipeline_010_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_011 (
		.clk               (clk_125_clk_clk),                         //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src9_ready),                    //     sink0.ready
		.in_valid          (cmd_demux_src9_valid),                    //          .valid
		.in_startofpacket  (cmd_demux_src9_startofpacket),            //          .startofpacket
		.in_endofpacket    (cmd_demux_src9_endofpacket),              //          .endofpacket
		.in_data           (cmd_demux_src9_data),                     //          .data
		.in_channel        (cmd_demux_src9_channel),                  //          .channel
		.out_ready         (mux_pipeline_011_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_011_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_011_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_011_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_011_source0_data),           //          .data
		.out_channel       (mux_pipeline_011_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_012 (
		.clk               (clk_125_clk_clk),                         //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src10_ready),                   //     sink0.ready
		.in_valid          (cmd_demux_src10_valid),                   //          .valid
		.in_startofpacket  (cmd_demux_src10_startofpacket),           //          .startofpacket
		.in_endofpacket    (cmd_demux_src10_endofpacket),             //          .endofpacket
		.in_data           (cmd_demux_src10_data),                    //          .data
		.in_channel        (cmd_demux_src10_channel),                 //          .channel
		.out_ready         (mux_pipeline_012_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_012_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_012_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_012_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_012_source0_data),           //          .data
		.out_channel       (mux_pipeline_012_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_013 (
		.clk               (clk_125_clk_clk),                         //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src11_ready),                   //     sink0.ready
		.in_valid          (cmd_demux_src11_valid),                   //          .valid
		.in_startofpacket  (cmd_demux_src11_startofpacket),           //          .startofpacket
		.in_endofpacket    (cmd_demux_src11_endofpacket),             //          .endofpacket
		.in_data           (cmd_demux_src11_data),                    //          .data
		.in_channel        (cmd_demux_src11_channel),                 //          .channel
		.out_ready         (mux_pipeline_013_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_013_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_013_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_013_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_013_source0_data),           //          .data
		.out_channel       (mux_pipeline_013_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_014 (
		.clk               (clk_125_clk_clk),                         //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src12_ready),                   //     sink0.ready
		.in_valid          (cmd_demux_src12_valid),                   //          .valid
		.in_startofpacket  (cmd_demux_src12_startofpacket),           //          .startofpacket
		.in_endofpacket    (cmd_demux_src12_endofpacket),             //          .endofpacket
		.in_data           (cmd_demux_src12_data),                    //          .data
		.in_channel        (cmd_demux_src12_channel),                 //          .channel
		.out_ready         (mux_pipeline_014_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_014_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_014_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_014_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_014_source0_data),           //          .data
		.out_channel       (mux_pipeline_014_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_015 (
		.clk               (clk_125_clk_clk),                         //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src13_ready),                   //     sink0.ready
		.in_valid          (cmd_demux_src13_valid),                   //          .valid
		.in_startofpacket  (cmd_demux_src13_startofpacket),           //          .startofpacket
		.in_endofpacket    (cmd_demux_src13_endofpacket),             //          .endofpacket
		.in_data           (cmd_demux_src13_data),                    //          .data
		.in_channel        (cmd_demux_src13_channel),                 //          .channel
		.out_ready         (mux_pipeline_015_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_015_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_015_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_015_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_015_source0_data),           //          .data
		.out_channel       (mux_pipeline_015_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_016 (
		.clk               (clk_125_clk_clk),                         //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src14_ready),                   //     sink0.ready
		.in_valid          (cmd_demux_src14_valid),                   //          .valid
		.in_startofpacket  (cmd_demux_src14_startofpacket),           //          .startofpacket
		.in_endofpacket    (cmd_demux_src14_endofpacket),             //          .endofpacket
		.in_data           (cmd_demux_src14_data),                    //          .data
		.in_channel        (cmd_demux_src14_channel),                 //          .channel
		.out_ready         (mux_pipeline_016_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_016_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_016_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_016_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_016_source0_data),           //          .data
		.out_channel       (mux_pipeline_016_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_017 (
		.clk               (clk_125_clk_clk),                         //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src15_ready),                   //     sink0.ready
		.in_valid          (cmd_demux_src15_valid),                   //          .valid
		.in_startofpacket  (cmd_demux_src15_startofpacket),           //          .startofpacket
		.in_endofpacket    (cmd_demux_src15_endofpacket),             //          .endofpacket
		.in_data           (cmd_demux_src15_data),                    //          .data
		.in_channel        (cmd_demux_src15_channel),                 //          .channel
		.out_ready         (mux_pipeline_017_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_017_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_017_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_017_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_017_source0_data),           //          .data
		.out_channel       (mux_pipeline_017_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_018 (
		.clk               (clk_125_clk_clk),                         //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src16_ready),                   //     sink0.ready
		.in_valid          (cmd_demux_src16_valid),                   //          .valid
		.in_startofpacket  (cmd_demux_src16_startofpacket),           //          .startofpacket
		.in_endofpacket    (cmd_demux_src16_endofpacket),             //          .endofpacket
		.in_data           (cmd_demux_src16_data),                    //          .data
		.in_channel        (cmd_demux_src16_channel),                 //          .channel
		.out_ready         (mux_pipeline_018_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_018_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_018_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_018_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_018_source0_data),           //          .data
		.out_channel       (mux_pipeline_018_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_019 (
		.clk               (clk_50_out_clk_clk),                          //       cr0.clk
		.reset             (sd_cont_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (crosser_out_ready),                           //     sink0.ready
		.in_valid          (crosser_out_valid),                           //          .valid
		.in_startofpacket  (crosser_out_startofpacket),                   //          .startofpacket
		.in_endofpacket    (crosser_out_endofpacket),                     //          .endofpacket
		.in_data           (crosser_out_data),                            //          .data
		.in_channel        (crosser_out_channel),                         //          .channel
		.out_ready         (mux_pipeline_019_source0_ready),              //   source0.ready
		.out_valid         (mux_pipeline_019_source0_valid),              //          .valid
		.out_startofpacket (mux_pipeline_019_source0_startofpacket),      //          .startofpacket
		.out_endofpacket   (mux_pipeline_019_source0_endofpacket),        //          .endofpacket
		.out_data          (mux_pipeline_019_source0_data),               //          .data
		.out_channel       (mux_pipeline_019_source0_channel),            //          .channel
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.out_error         (),                                            // (terminated)
		.in_error          (1'b0)                                         // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_020 (
		.clk               (clk_125_clk_clk),                         //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src18_ready),                   //     sink0.ready
		.in_valid          (cmd_demux_src18_valid),                   //          .valid
		.in_startofpacket  (cmd_demux_src18_startofpacket),           //          .startofpacket
		.in_endofpacket    (cmd_demux_src18_endofpacket),             //          .endofpacket
		.in_data           (cmd_demux_src18_data),                    //          .data
		.in_channel        (cmd_demux_src18_channel),                 //          .channel
		.out_ready         (mux_pipeline_020_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_020_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_020_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_020_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_020_source0_data),           //          .data
		.out_channel       (mux_pipeline_020_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_021 (
		.clk               (clk_125_clk_clk),                         //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src1_ready),                //     sink0.ready
		.in_valid          (cmd_demux_001_src1_valid),                //          .valid
		.in_startofpacket  (cmd_demux_001_src1_startofpacket),        //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src1_endofpacket),          //          .endofpacket
		.in_data           (cmd_demux_001_src1_data),                 //          .data
		.in_channel        (cmd_demux_001_src1_channel),              //          .channel
		.out_ready         (mux_pipeline_021_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_021_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_021_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_021_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_021_source0_data),           //          .data
		.out_channel       (mux_pipeline_021_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_022 (
		.clk               (clk_125_clk_clk),                        //       cr0.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (rsp_demux_src0_ready),                   //     sink0.ready
		.in_valid          (rsp_demux_src0_valid),                   //          .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),           //          .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),             //          .endofpacket
		.in_data           (rsp_demux_src0_data),                    //          .data
		.in_channel        (rsp_demux_src0_channel),                 //          .channel
		.out_ready         (mux_pipeline_022_source0_ready),         //   source0.ready
		.out_valid         (mux_pipeline_022_source0_valid),         //          .valid
		.out_startofpacket (mux_pipeline_022_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (mux_pipeline_022_source0_endofpacket),   //          .endofpacket
		.out_data          (mux_pipeline_022_source0_data),          //          .data
		.out_channel       (mux_pipeline_022_source0_channel),       //          .channel
		.in_empty          (1'b0),                                   // (terminated)
		.out_empty         (),                                       // (terminated)
		.out_error         (),                                       // (terminated)
		.in_error          (1'b0)                                    // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_023 (
		.clk               (clk_125_clk_clk),                        //       cr0.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (rsp_demux_001_src0_ready),               //     sink0.ready
		.in_valid          (rsp_demux_001_src0_valid),               //          .valid
		.in_startofpacket  (rsp_demux_001_src0_startofpacket),       //          .startofpacket
		.in_endofpacket    (rsp_demux_001_src0_endofpacket),         //          .endofpacket
		.in_data           (rsp_demux_001_src0_data),                //          .data
		.in_channel        (rsp_demux_001_src0_channel),             //          .channel
		.out_ready         (mux_pipeline_023_source0_ready),         //   source0.ready
		.out_valid         (mux_pipeline_023_source0_valid),         //          .valid
		.out_startofpacket (mux_pipeline_023_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (mux_pipeline_023_source0_endofpacket),   //          .endofpacket
		.out_data          (mux_pipeline_023_source0_data),          //          .data
		.out_channel       (mux_pipeline_023_source0_channel),       //          .channel
		.in_empty          (1'b0),                                   // (terminated)
		.out_empty         (),                                       // (terminated)
		.out_error         (),                                       // (terminated)
		.in_error          (1'b0)                                    // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_024 (
		.clk               (clk_125_clk_clk),                        //       cr0.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (rsp_demux_002_src0_ready),               //     sink0.ready
		.in_valid          (rsp_demux_002_src0_valid),               //          .valid
		.in_startofpacket  (rsp_demux_002_src0_startofpacket),       //          .startofpacket
		.in_endofpacket    (rsp_demux_002_src0_endofpacket),         //          .endofpacket
		.in_data           (rsp_demux_002_src0_data),                //          .data
		.in_channel        (rsp_demux_002_src0_channel),             //          .channel
		.out_ready         (mux_pipeline_024_source0_ready),         //   source0.ready
		.out_valid         (mux_pipeline_024_source0_valid),         //          .valid
		.out_startofpacket (mux_pipeline_024_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (mux_pipeline_024_source0_endofpacket),   //          .endofpacket
		.out_data          (mux_pipeline_024_source0_data),          //          .data
		.out_channel       (mux_pipeline_024_source0_channel),       //          .channel
		.in_empty          (1'b0),                                   // (terminated)
		.out_empty         (),                                       // (terminated)
		.out_error         (),                                       // (terminated)
		.in_error          (1'b0)                                    // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_025 (
		.clk               (clk_125_clk_clk),                        //       cr0.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (rsp_demux_003_src0_ready),               //     sink0.ready
		.in_valid          (rsp_demux_003_src0_valid),               //          .valid
		.in_startofpacket  (rsp_demux_003_src0_startofpacket),       //          .startofpacket
		.in_endofpacket    (rsp_demux_003_src0_endofpacket),         //          .endofpacket
		.in_data           (rsp_demux_003_src0_data),                //          .data
		.in_channel        (rsp_demux_003_src0_channel),             //          .channel
		.out_ready         (mux_pipeline_025_source0_ready),         //   source0.ready
		.out_valid         (mux_pipeline_025_source0_valid),         //          .valid
		.out_startofpacket (mux_pipeline_025_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (mux_pipeline_025_source0_endofpacket),   //          .endofpacket
		.out_data          (mux_pipeline_025_source0_data),          //          .data
		.out_channel       (mux_pipeline_025_source0_channel),       //          .channel
		.in_empty          (1'b0),                                   // (terminated)
		.out_empty         (),                                       // (terminated)
		.out_error         (),                                       // (terminated)
		.in_error          (1'b0)                                    // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_026 (
		.clk               (clk_125_clk_clk),                        //       cr0.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (rsp_demux_004_src0_ready),               //     sink0.ready
		.in_valid          (rsp_demux_004_src0_valid),               //          .valid
		.in_startofpacket  (rsp_demux_004_src0_startofpacket),       //          .startofpacket
		.in_endofpacket    (rsp_demux_004_src0_endofpacket),         //          .endofpacket
		.in_data           (rsp_demux_004_src0_data),                //          .data
		.in_channel        (rsp_demux_004_src0_channel),             //          .channel
		.out_ready         (mux_pipeline_026_source0_ready),         //   source0.ready
		.out_valid         (mux_pipeline_026_source0_valid),         //          .valid
		.out_startofpacket (mux_pipeline_026_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (mux_pipeline_026_source0_endofpacket),   //          .endofpacket
		.out_data          (mux_pipeline_026_source0_data),          //          .data
		.out_channel       (mux_pipeline_026_source0_channel),       //          .channel
		.in_empty          (1'b0),                                   // (terminated)
		.out_empty         (),                                       // (terminated)
		.out_error         (),                                       // (terminated)
		.in_error          (1'b0)                                    // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_027 (
		.clk               (clk_125_clk_clk),                        //       cr0.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (rsp_demux_005_src0_ready),               //     sink0.ready
		.in_valid          (rsp_demux_005_src0_valid),               //          .valid
		.in_startofpacket  (rsp_demux_005_src0_startofpacket),       //          .startofpacket
		.in_endofpacket    (rsp_demux_005_src0_endofpacket),         //          .endofpacket
		.in_data           (rsp_demux_005_src0_data),                //          .data
		.in_channel        (rsp_demux_005_src0_channel),             //          .channel
		.out_ready         (mux_pipeline_027_source0_ready),         //   source0.ready
		.out_valid         (mux_pipeline_027_source0_valid),         //          .valid
		.out_startofpacket (mux_pipeline_027_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (mux_pipeline_027_source0_endofpacket),   //          .endofpacket
		.out_data          (mux_pipeline_027_source0_data),          //          .data
		.out_channel       (mux_pipeline_027_source0_channel),       //          .channel
		.in_empty          (1'b0),                                   // (terminated)
		.out_empty         (),                                       // (terminated)
		.out_error         (),                                       // (terminated)
		.in_error          (1'b0)                                    // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_028 (
		.clk               (clk_125_clk_clk),                        //       cr0.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (rsp_demux_006_src0_ready),               //     sink0.ready
		.in_valid          (rsp_demux_006_src0_valid),               //          .valid
		.in_startofpacket  (rsp_demux_006_src0_startofpacket),       //          .startofpacket
		.in_endofpacket    (rsp_demux_006_src0_endofpacket),         //          .endofpacket
		.in_data           (rsp_demux_006_src0_data),                //          .data
		.in_channel        (rsp_demux_006_src0_channel),             //          .channel
		.out_ready         (mux_pipeline_028_source0_ready),         //   source0.ready
		.out_valid         (mux_pipeline_028_source0_valid),         //          .valid
		.out_startofpacket (mux_pipeline_028_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (mux_pipeline_028_source0_endofpacket),   //          .endofpacket
		.out_data          (mux_pipeline_028_source0_data),          //          .data
		.out_channel       (mux_pipeline_028_source0_channel),       //          .channel
		.in_empty          (1'b0),                                   // (terminated)
		.out_empty         (),                                       // (terminated)
		.out_error         (),                                       // (terminated)
		.in_error          (1'b0)                                    // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_029 (
		.clk               (clk_125_clk_clk),                        //       cr0.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (rsp_demux_007_src0_ready),               //     sink0.ready
		.in_valid          (rsp_demux_007_src0_valid),               //          .valid
		.in_startofpacket  (rsp_demux_007_src0_startofpacket),       //          .startofpacket
		.in_endofpacket    (rsp_demux_007_src0_endofpacket),         //          .endofpacket
		.in_data           (rsp_demux_007_src0_data),                //          .data
		.in_channel        (rsp_demux_007_src0_channel),             //          .channel
		.out_ready         (mux_pipeline_029_source0_ready),         //   source0.ready
		.out_valid         (mux_pipeline_029_source0_valid),         //          .valid
		.out_startofpacket (mux_pipeline_029_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (mux_pipeline_029_source0_endofpacket),   //          .endofpacket
		.out_data          (mux_pipeline_029_source0_data),          //          .data
		.out_channel       (mux_pipeline_029_source0_channel),       //          .channel
		.in_empty          (1'b0),                                   // (terminated)
		.out_empty         (),                                       // (terminated)
		.out_error         (),                                       // (terminated)
		.in_error          (1'b0)                                    // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_030 (
		.clk               (clk_125_clk_clk),                        //       cr0.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (rsp_demux_008_src0_ready),               //     sink0.ready
		.in_valid          (rsp_demux_008_src0_valid),               //          .valid
		.in_startofpacket  (rsp_demux_008_src0_startofpacket),       //          .startofpacket
		.in_endofpacket    (rsp_demux_008_src0_endofpacket),         //          .endofpacket
		.in_data           (rsp_demux_008_src0_data),                //          .data
		.in_channel        (rsp_demux_008_src0_channel),             //          .channel
		.out_ready         (mux_pipeline_030_source0_ready),         //   source0.ready
		.out_valid         (mux_pipeline_030_source0_valid),         //          .valid
		.out_startofpacket (mux_pipeline_030_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (mux_pipeline_030_source0_endofpacket),   //          .endofpacket
		.out_data          (mux_pipeline_030_source0_data),          //          .data
		.out_channel       (mux_pipeline_030_source0_channel),       //          .channel
		.in_empty          (1'b0),                                   // (terminated)
		.out_empty         (),                                       // (terminated)
		.out_error         (),                                       // (terminated)
		.in_error          (1'b0)                                    // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_031 (
		.clk               (clk_125_clk_clk),                        //       cr0.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (rsp_demux_009_src0_ready),               //     sink0.ready
		.in_valid          (rsp_demux_009_src0_valid),               //          .valid
		.in_startofpacket  (rsp_demux_009_src0_startofpacket),       //          .startofpacket
		.in_endofpacket    (rsp_demux_009_src0_endofpacket),         //          .endofpacket
		.in_data           (rsp_demux_009_src0_data),                //          .data
		.in_channel        (rsp_demux_009_src0_channel),             //          .channel
		.out_ready         (mux_pipeline_031_source0_ready),         //   source0.ready
		.out_valid         (mux_pipeline_031_source0_valid),         //          .valid
		.out_startofpacket (mux_pipeline_031_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (mux_pipeline_031_source0_endofpacket),   //          .endofpacket
		.out_data          (mux_pipeline_031_source0_data),          //          .data
		.out_channel       (mux_pipeline_031_source0_channel),       //          .channel
		.in_empty          (1'b0),                                   // (terminated)
		.out_empty         (),                                       // (terminated)
		.out_error         (),                                       // (terminated)
		.in_error          (1'b0)                                    // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_032 (
		.clk               (clk_125_clk_clk),                        //       cr0.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (rsp_demux_010_src0_ready),               //     sink0.ready
		.in_valid          (rsp_demux_010_src0_valid),               //          .valid
		.in_startofpacket  (rsp_demux_010_src0_startofpacket),       //          .startofpacket
		.in_endofpacket    (rsp_demux_010_src0_endofpacket),         //          .endofpacket
		.in_data           (rsp_demux_010_src0_data),                //          .data
		.in_channel        (rsp_demux_010_src0_channel),             //          .channel
		.out_ready         (mux_pipeline_032_source0_ready),         //   source0.ready
		.out_valid         (mux_pipeline_032_source0_valid),         //          .valid
		.out_startofpacket (mux_pipeline_032_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (mux_pipeline_032_source0_endofpacket),   //          .endofpacket
		.out_data          (mux_pipeline_032_source0_data),          //          .data
		.out_channel       (mux_pipeline_032_source0_channel),       //          .channel
		.in_empty          (1'b0),                                   // (terminated)
		.out_empty         (),                                       // (terminated)
		.out_error         (),                                       // (terminated)
		.in_error          (1'b0)                                    // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_033 (
		.clk               (clk_125_clk_clk),                        //       cr0.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (rsp_demux_011_src0_ready),               //     sink0.ready
		.in_valid          (rsp_demux_011_src0_valid),               //          .valid
		.in_startofpacket  (rsp_demux_011_src0_startofpacket),       //          .startofpacket
		.in_endofpacket    (rsp_demux_011_src0_endofpacket),         //          .endofpacket
		.in_data           (rsp_demux_011_src0_data),                //          .data
		.in_channel        (rsp_demux_011_src0_channel),             //          .channel
		.out_ready         (mux_pipeline_033_source0_ready),         //   source0.ready
		.out_valid         (mux_pipeline_033_source0_valid),         //          .valid
		.out_startofpacket (mux_pipeline_033_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (mux_pipeline_033_source0_endofpacket),   //          .endofpacket
		.out_data          (mux_pipeline_033_source0_data),          //          .data
		.out_channel       (mux_pipeline_033_source0_channel),       //          .channel
		.in_empty          (1'b0),                                   // (terminated)
		.out_empty         (),                                       // (terminated)
		.out_error         (),                                       // (terminated)
		.in_error          (1'b0)                                    // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_034 (
		.clk               (clk_125_clk_clk),                        //       cr0.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (rsp_demux_012_src0_ready),               //     sink0.ready
		.in_valid          (rsp_demux_012_src0_valid),               //          .valid
		.in_startofpacket  (rsp_demux_012_src0_startofpacket),       //          .startofpacket
		.in_endofpacket    (rsp_demux_012_src0_endofpacket),         //          .endofpacket
		.in_data           (rsp_demux_012_src0_data),                //          .data
		.in_channel        (rsp_demux_012_src0_channel),             //          .channel
		.out_ready         (mux_pipeline_034_source0_ready),         //   source0.ready
		.out_valid         (mux_pipeline_034_source0_valid),         //          .valid
		.out_startofpacket (mux_pipeline_034_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (mux_pipeline_034_source0_endofpacket),   //          .endofpacket
		.out_data          (mux_pipeline_034_source0_data),          //          .data
		.out_channel       (mux_pipeline_034_source0_channel),       //          .channel
		.in_empty          (1'b0),                                   // (terminated)
		.out_empty         (),                                       // (terminated)
		.out_error         (),                                       // (terminated)
		.in_error          (1'b0)                                    // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_035 (
		.clk               (clk_125_clk_clk),                        //       cr0.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (rsp_demux_013_src0_ready),               //     sink0.ready
		.in_valid          (rsp_demux_013_src0_valid),               //          .valid
		.in_startofpacket  (rsp_demux_013_src0_startofpacket),       //          .startofpacket
		.in_endofpacket    (rsp_demux_013_src0_endofpacket),         //          .endofpacket
		.in_data           (rsp_demux_013_src0_data),                //          .data
		.in_channel        (rsp_demux_013_src0_channel),             //          .channel
		.out_ready         (mux_pipeline_035_source0_ready),         //   source0.ready
		.out_valid         (mux_pipeline_035_source0_valid),         //          .valid
		.out_startofpacket (mux_pipeline_035_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (mux_pipeline_035_source0_endofpacket),   //          .endofpacket
		.out_data          (mux_pipeline_035_source0_data),          //          .data
		.out_channel       (mux_pipeline_035_source0_channel),       //          .channel
		.in_empty          (1'b0),                                   // (terminated)
		.out_empty         (),                                       // (terminated)
		.out_error         (),                                       // (terminated)
		.in_error          (1'b0)                                    // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_036 (
		.clk               (clk_125_clk_clk),                        //       cr0.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (rsp_demux_014_src0_ready),               //     sink0.ready
		.in_valid          (rsp_demux_014_src0_valid),               //          .valid
		.in_startofpacket  (rsp_demux_014_src0_startofpacket),       //          .startofpacket
		.in_endofpacket    (rsp_demux_014_src0_endofpacket),         //          .endofpacket
		.in_data           (rsp_demux_014_src0_data),                //          .data
		.in_channel        (rsp_demux_014_src0_channel),             //          .channel
		.out_ready         (mux_pipeline_036_source0_ready),         //   source0.ready
		.out_valid         (mux_pipeline_036_source0_valid),         //          .valid
		.out_startofpacket (mux_pipeline_036_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (mux_pipeline_036_source0_endofpacket),   //          .endofpacket
		.out_data          (mux_pipeline_036_source0_data),          //          .data
		.out_channel       (mux_pipeline_036_source0_channel),       //          .channel
		.in_empty          (1'b0),                                   // (terminated)
		.out_empty         (),                                       // (terminated)
		.out_error         (),                                       // (terminated)
		.in_error          (1'b0)                                    // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_037 (
		.clk               (clk_125_clk_clk),                        //       cr0.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (rsp_demux_015_src0_ready),               //     sink0.ready
		.in_valid          (rsp_demux_015_src0_valid),               //          .valid
		.in_startofpacket  (rsp_demux_015_src0_startofpacket),       //          .startofpacket
		.in_endofpacket    (rsp_demux_015_src0_endofpacket),         //          .endofpacket
		.in_data           (rsp_demux_015_src0_data),                //          .data
		.in_channel        (rsp_demux_015_src0_channel),             //          .channel
		.out_ready         (mux_pipeline_037_source0_ready),         //   source0.ready
		.out_valid         (mux_pipeline_037_source0_valid),         //          .valid
		.out_startofpacket (mux_pipeline_037_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (mux_pipeline_037_source0_endofpacket),   //          .endofpacket
		.out_data          (mux_pipeline_037_source0_data),          //          .data
		.out_channel       (mux_pipeline_037_source0_channel),       //          .channel
		.in_empty          (1'b0),                                   // (terminated)
		.out_empty         (),                                       // (terminated)
		.out_error         (),                                       // (terminated)
		.in_error          (1'b0)                                    // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_038 (
		.clk               (clk_125_clk_clk),                        //       cr0.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (rsp_demux_016_src0_ready),               //     sink0.ready
		.in_valid          (rsp_demux_016_src0_valid),               //          .valid
		.in_startofpacket  (rsp_demux_016_src0_startofpacket),       //          .startofpacket
		.in_endofpacket    (rsp_demux_016_src0_endofpacket),         //          .endofpacket
		.in_data           (rsp_demux_016_src0_data),                //          .data
		.in_channel        (rsp_demux_016_src0_channel),             //          .channel
		.out_ready         (mux_pipeline_038_source0_ready),         //   source0.ready
		.out_valid         (mux_pipeline_038_source0_valid),         //          .valid
		.out_startofpacket (mux_pipeline_038_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (mux_pipeline_038_source0_endofpacket),   //          .endofpacket
		.out_data          (mux_pipeline_038_source0_data),          //          .data
		.out_channel       (mux_pipeline_038_source0_channel),       //          .channel
		.in_empty          (1'b0),                                   // (terminated)
		.out_empty         (),                                       // (terminated)
		.out_error         (),                                       // (terminated)
		.in_error          (1'b0)                                    // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_039 (
		.clk               (clk_125_clk_clk),                        //       cr0.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (crosser_003_out_ready),                  //     sink0.ready
		.in_valid          (crosser_003_out_valid),                  //          .valid
		.in_startofpacket  (crosser_003_out_startofpacket),          //          .startofpacket
		.in_endofpacket    (crosser_003_out_endofpacket),            //          .endofpacket
		.in_data           (crosser_003_out_data),                   //          .data
		.in_channel        (crosser_003_out_channel),                //          .channel
		.out_ready         (mux_pipeline_039_source0_ready),         //   source0.ready
		.out_valid         (mux_pipeline_039_source0_valid),         //          .valid
		.out_startofpacket (mux_pipeline_039_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (mux_pipeline_039_source0_endofpacket),   //          .endofpacket
		.out_data          (mux_pipeline_039_source0_data),          //          .data
		.out_channel       (mux_pipeline_039_source0_channel),       //          .channel
		.in_empty          (1'b0),                                   // (terminated)
		.out_empty         (),                                       // (terminated)
		.out_error         (),                                       // (terminated)
		.in_error          (1'b0)                                    // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_040 (
		.clk               (clk_125_clk_clk),                        //       cr0.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (rsp_demux_018_src0_ready),               //     sink0.ready
		.in_valid          (rsp_demux_018_src0_valid),               //          .valid
		.in_startofpacket  (rsp_demux_018_src0_startofpacket),       //          .startofpacket
		.in_endofpacket    (rsp_demux_018_src0_endofpacket),         //          .endofpacket
		.in_data           (rsp_demux_018_src0_data),                //          .data
		.in_channel        (rsp_demux_018_src0_channel),             //          .channel
		.out_ready         (mux_pipeline_040_source0_ready),         //   source0.ready
		.out_valid         (mux_pipeline_040_source0_valid),         //          .valid
		.out_startofpacket (mux_pipeline_040_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (mux_pipeline_040_source0_endofpacket),   //          .endofpacket
		.out_data          (mux_pipeline_040_source0_data),          //          .data
		.out_channel       (mux_pipeline_040_source0_channel),       //          .channel
		.in_empty          (1'b0),                                   // (terminated)
		.out_empty         (),                                       // (terminated)
		.out_error         (),                                       // (terminated)
		.in_error          (1'b0)                                    // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_041 (
		.clk               (clk_125_clk_clk),                        //       cr0.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (rsp_demux_006_src1_ready),               //     sink0.ready
		.in_valid          (rsp_demux_006_src1_valid),               //          .valid
		.in_startofpacket  (rsp_demux_006_src1_startofpacket),       //          .startofpacket
		.in_endofpacket    (rsp_demux_006_src1_endofpacket),         //          .endofpacket
		.in_data           (rsp_demux_006_src1_data),                //          .data
		.in_channel        (rsp_demux_006_src1_channel),             //          .channel
		.out_ready         (mux_pipeline_041_source0_ready),         //   source0.ready
		.out_valid         (mux_pipeline_041_source0_valid),         //          .valid
		.out_startofpacket (mux_pipeline_041_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (mux_pipeline_041_source0_endofpacket),   //          .endofpacket
		.out_data          (mux_pipeline_041_source0_data),          //          .data
		.out_channel       (mux_pipeline_041_source0_channel),       //          .channel
		.in_empty          (1'b0),                                   // (terminated)
		.out_empty         (),                                       // (terminated)
		.out_error         (),                                       // (terminated)
		.in_error          (1'b0)                                    // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_042 (
		.clk               (clk_125_clk_clk),                        //       cr0.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (rsp_demux_018_src1_ready),               //     sink0.ready
		.in_valid          (rsp_demux_018_src1_valid),               //          .valid
		.in_startofpacket  (rsp_demux_018_src1_startofpacket),       //          .startofpacket
		.in_endofpacket    (rsp_demux_018_src1_endofpacket),         //          .endofpacket
		.in_data           (rsp_demux_018_src1_data),                //          .data
		.in_channel        (rsp_demux_018_src1_channel),             //          .channel
		.out_ready         (mux_pipeline_042_source0_ready),         //   source0.ready
		.out_valid         (mux_pipeline_042_source0_valid),         //          .valid
		.out_startofpacket (mux_pipeline_042_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (mux_pipeline_042_source0_endofpacket),   //          .endofpacket
		.out_data          (mux_pipeline_042_source0_data),          //          .data
		.out_channel       (mux_pipeline_042_source0_channel),       //          .channel
		.in_empty          (1'b0),                                   // (terminated)
		.out_empty         (),                                       // (terminated)
		.out_error         (),                                       // (terminated)
		.in_error          (1'b0)                                    // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (19),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_043 (
		.clk               (clk_50_out_clk_clk),                          //       cr0.clk
		.reset             (sd_cont_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (crosser_002_out_ready),                       //     sink0.ready
		.in_valid          (crosser_002_out_valid),                       //          .valid
		.in_startofpacket  (crosser_002_out_startofpacket),               //          .startofpacket
		.in_endofpacket    (crosser_002_out_endofpacket),                 //          .endofpacket
		.in_data           (crosser_002_out_data),                        //          .data
		.in_channel        (crosser_002_out_channel),                     //          .channel
		.out_ready         (mux_pipeline_043_source0_ready),              //   source0.ready
		.out_valid         (mux_pipeline_043_source0_valid),              //          .valid
		.out_startofpacket (mux_pipeline_043_source0_startofpacket),      //          .startofpacket
		.out_endofpacket   (mux_pipeline_043_source0_endofpacket),        //          .endofpacket
		.out_data          (mux_pipeline_043_source0_data),               //          .data
		.out_channel       (mux_pipeline_043_source0_channel),            //          .channel
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.out_error         (),                                            // (terminated)
		.in_error          (1'b0)                                         // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) pipeline_stage (
		.clk               (clk_50_out_clk_clk),                          //       cr0.clk
		.reset             (sd_cont_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (sd_cont_0_master_agent_cp_ready),             //     sink0.ready
		.in_valid          (sd_cont_0_master_agent_cp_valid),             //          .valid
		.in_startofpacket  (sd_cont_0_master_agent_cp_startofpacket),     //          .startofpacket
		.in_endofpacket    (sd_cont_0_master_agent_cp_endofpacket),       //          .endofpacket
		.in_data           (sd_cont_0_master_agent_cp_data),              //          .data
		.out_ready         (pipeline_stage_source0_ready),                //   source0.ready
		.out_valid         (pipeline_stage_source0_valid),                //          .valid
		.out_startofpacket (pipeline_stage_source0_startofpacket),        //          .startofpacket
		.out_endofpacket   (pipeline_stage_source0_endofpacket),          //          .endofpacket
		.out_data          (pipeline_stage_source0_data),                 //          .data
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.out_error         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_channel       (),                                            // (terminated)
		.in_channel        (1'b0)                                         // (terminated)
	);

	ECE423_QSYS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_125_clk_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset),                  // in_rst_0.reset
		.in_0_data      (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                          //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                          //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                           //         .error
	);

	ECE423_QSYS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_125_clk_clk),                         // in_clk_0.clk
		.in_rst_0_reset (sysid_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (lpddr2_avl_0_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (lpddr2_avl_0_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (lpddr2_avl_0_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)        //         .error
	);

	ECE423_QSYS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_125_clk_clk),                                // in_clk_0.clk
		.in_rst_0_reset (sysid_reset_reset_bridge_in_reset_reset),        // in_rst_0.reset
		.in_0_data      (sysid_control_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (sysid_control_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (sysid_control_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)               //         .error
	);

	ECE423_QSYS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clk_125_clk_clk),                          // in_clk_0.clk
		.in_rst_0_reset (sysid_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (video_dma_csr_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (video_dma_csr_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (video_dma_csr_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),         //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),        //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),        //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)         //         .error
	);

	ECE423_QSYS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clk_125_clk_clk),                               // in_clk_0.clk
		.in_rst_0_reset (sysid_reset_reset_bridge_in_reset_reset),       // in_rst_0.reset
		.in_0_data      (to_idct_hwacel_csr_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (to_idct_hwacel_csr_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (to_idct_hwacel_csr_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)              //         .error
	);

	ECE423_QSYS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (clk_125_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (sysid_reset_reset_bridge_in_reset_reset),         // in_rst_0.reset
		.in_0_data      (from_idct_hwacel_csr_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (from_idct_hwacel_csr_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (from_idct_hwacel_csr_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),               //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),               //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                //         .error
	);

	ECE423_QSYS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (clk_125_clk_clk),                                // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (cpu_debug_mem_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (cpu_debug_mem_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (cpu_debug_mem_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)               //         .error
	);

	ECE423_QSYS_mm_interconnect_0_avalon_st_adapter_007 #(
		.inBitsPerSymbol (130),
		.inUsePackets    (0),
		.inDataWidth     (130),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (130),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (clk_125_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (sysid_reset_reset_bridge_in_reset_reset),               // in_rst_0.reset
		.in_0_data      (video_dma_descriptor_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (video_dma_descriptor_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (video_dma_descriptor_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)                      //         .error
	);

	ECE423_QSYS_mm_interconnect_0_avalon_st_adapter_007 #(
		.inBitsPerSymbol (130),
		.inUsePackets    (0),
		.inDataWidth     (130),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (130),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (clk_125_clk_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (sysid_reset_reset_bridge_in_reset_reset),                    // in_rst_0.reset
		.in_0_data      (to_idct_hwacel_descriptor_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (to_idct_hwacel_descriptor_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (to_idct_hwacel_descriptor_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),                          //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),                          //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)                           //         .error
	);

	ECE423_QSYS_mm_interconnect_0_avalon_st_adapter_007 #(
		.inBitsPerSymbol (130),
		.inUsePackets    (0),
		.inDataWidth     (130),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (130),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (clk_125_clk_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (sysid_reset_reset_bridge_in_reset_reset),                      // in_rst_0.reset
		.in_0_data      (from_idct_hwacel_descriptor_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (from_idct_hwacel_descriptor_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (from_idct_hwacel_descriptor_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)                             //         .error
	);

	ECE423_QSYS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (clk_125_clk_clk),                         // in_clk_0.clk
		.in_rst_0_reset (sysid_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (timer_0_s1_agent_rdata_fifo_out_data),    //     in_0.data
		.in_0_valid     (timer_0_s1_agent_rdata_fifo_out_valid),   //         .valid
		.in_0_ready     (timer_0_s1_agent_rdata_fifo_out_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)        //         .error
	);

	ECE423_QSYS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (clk_125_clk_clk),                         // in_clk_0.clk
		.in_rst_0_reset (sysid_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (key_s1_agent_rdata_fifo_out_data),        //     in_0.data
		.in_0_valid     (key_s1_agent_rdata_fifo_out_valid),       //         .valid
		.in_0_ready     (key_s1_agent_rdata_fifo_out_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)        //         .error
	);

	ECE423_QSYS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_012 (
		.in_clk_0_clk   (clk_125_clk_clk),                         // in_clk_0.clk
		.in_rst_0_reset (sysid_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (timer_1_s1_agent_rdata_fifo_out_data),    //     in_0.data
		.in_0_valid     (timer_1_s1_agent_rdata_fifo_out_valid),   //         .valid
		.in_0_ready     (timer_1_s1_agent_rdata_fifo_out_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_012_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_012_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_012_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_012_out_0_error)        //         .error
	);

	ECE423_QSYS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_013 (
		.in_clk_0_clk   (clk_125_clk_clk),                         // in_clk_0.clk
		.in_rst_0_reset (sysid_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ledg_s1_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (ledg_s1_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (ledg_s1_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_013_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_013_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_013_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_013_out_0_error)        //         .error
	);

	ECE423_QSYS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_014 (
		.in_clk_0_clk   (clk_125_clk_clk),                         // in_clk_0.clk
		.in_rst_0_reset (sysid_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ledr_s1_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (ledr_s1_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (ledr_s1_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_014_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_014_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_014_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_014_out_0_error)        //         .error
	);

	ECE423_QSYS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_015 (
		.in_clk_0_clk   (clk_125_clk_clk),                         // in_clk_0.clk
		.in_rst_0_reset (sysid_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (i2c_scl_s1_agent_rdata_fifo_out_data),    //     in_0.data
		.in_0_valid     (i2c_scl_s1_agent_rdata_fifo_out_valid),   //         .valid
		.in_0_ready     (i2c_scl_s1_agent_rdata_fifo_out_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_015_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_015_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_015_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_015_out_0_error)        //         .error
	);

	ECE423_QSYS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_016 (
		.in_clk_0_clk   (clk_125_clk_clk),                         // in_clk_0.clk
		.in_rst_0_reset (sysid_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (i2c_sda_s1_agent_rdata_fifo_out_data),    //     in_0.data
		.in_0_valid     (i2c_sda_s1_agent_rdata_fifo_out_valid),   //         .valid
		.in_0_ready     (i2c_sda_s1_agent_rdata_fifo_out_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_016_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_016_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_016_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_016_out_0_error)        //         .error
	);

	ECE423_QSYS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_017 (
		.in_clk_0_clk   (clk_50_out_clk_clk),                          // in_clk_0.clk
		.in_rst_0_reset (sd_cont_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sd_cont_0_slave_agent_rdata_fifo_out_data),   //     in_0.data
		.in_0_valid     (sd_cont_0_slave_agent_rdata_fifo_out_valid),  //         .valid
		.in_0_ready     (sd_cont_0_slave_agent_rdata_fifo_out_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_017_out_0_data),            //    out_0.data
		.out_0_valid    (avalon_st_adapter_017_out_0_valid),           //         .valid
		.out_0_ready    (avalon_st_adapter_017_out_0_ready),           //         .ready
		.out_0_error    (avalon_st_adapter_017_out_0_error)            //         .error
	);

	ECE423_QSYS_mm_interconnect_0_avalon_st_adapter_018 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_018 (
		.in_clk_0_clk   (clk_125_clk_clk),                         // in_clk_0.clk
		.in_rst_0_reset (sysid_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sram_uas_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (sram_uas_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (sram_uas_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_018_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_018_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_018_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_018_out_0_error)        //         .error
	);

endmodule
