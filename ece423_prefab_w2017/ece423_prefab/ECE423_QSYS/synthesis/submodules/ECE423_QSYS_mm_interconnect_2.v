// ECE423_QSYS_mm_interconnect_2.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 15.1 185

`timescale 1 ps / 1 ps
module ECE423_QSYS_mm_interconnect_2 (
		input  wire        clk_125_clk_clk,                                      //                                    clk_125_clk.clk
		input  wire        from_idct_hwacel_reset_n_reset_bridge_in_reset_reset, // from_idct_hwacel_reset_n_reset_bridge_in_reset.reset
		input  wire        lpddr2_mp_cmd_reset_n_2_reset_bridge_in_reset_reset,  //  lpddr2_mp_cmd_reset_n_2_reset_bridge_in_reset.reset
		input  wire [28:0] from_idct_hwacel_mm_write_address,                    //                      from_idct_hwacel_mm_write.address
		output wire        from_idct_hwacel_mm_write_waitrequest,                //                                               .waitrequest
		input  wire [7:0]  from_idct_hwacel_mm_write_burstcount,                 //                                               .burstcount
		input  wire [3:0]  from_idct_hwacel_mm_write_byteenable,                 //                                               .byteenable
		input  wire        from_idct_hwacel_mm_write_write,                      //                                               .write
		input  wire [31:0] from_idct_hwacel_mm_write_writedata,                  //                                               .writedata
		output wire [26:0] lpddr2_avl_2_address,                                 //                                   lpddr2_avl_2.address
		output wire        lpddr2_avl_2_write,                                   //                                               .write
		output wire        lpddr2_avl_2_read,                                    //                                               .read
		input  wire [31:0] lpddr2_avl_2_readdata,                                //                                               .readdata
		output wire [31:0] lpddr2_avl_2_writedata,                               //                                               .writedata
		output wire        lpddr2_avl_2_beginbursttransfer,                      //                                               .beginbursttransfer
		output wire [7:0]  lpddr2_avl_2_burstcount,                              //                                               .burstcount
		output wire [3:0]  lpddr2_avl_2_byteenable,                              //                                               .byteenable
		input  wire        lpddr2_avl_2_readdatavalid,                           //                                               .readdatavalid
		input  wire        lpddr2_avl_2_waitrequest                              //                                               .waitrequest
	);

	wire         from_idct_hwacel_mm_write_translator_avalon_universal_master_0_waitrequest;   // lpddr2_avl_2_translator:uav_waitrequest -> from_idct_hwacel_mm_write_translator:uav_waitrequest
	wire  [31:0] from_idct_hwacel_mm_write_translator_avalon_universal_master_0_readdata;      // lpddr2_avl_2_translator:uav_readdata -> from_idct_hwacel_mm_write_translator:uav_readdata
	wire         from_idct_hwacel_mm_write_translator_avalon_universal_master_0_debugaccess;   // from_idct_hwacel_mm_write_translator:uav_debugaccess -> lpddr2_avl_2_translator:uav_debugaccess
	wire  [28:0] from_idct_hwacel_mm_write_translator_avalon_universal_master_0_address;       // from_idct_hwacel_mm_write_translator:uav_address -> lpddr2_avl_2_translator:uav_address
	wire         from_idct_hwacel_mm_write_translator_avalon_universal_master_0_read;          // from_idct_hwacel_mm_write_translator:uav_read -> lpddr2_avl_2_translator:uav_read
	wire   [3:0] from_idct_hwacel_mm_write_translator_avalon_universal_master_0_byteenable;    // from_idct_hwacel_mm_write_translator:uav_byteenable -> lpddr2_avl_2_translator:uav_byteenable
	wire         from_idct_hwacel_mm_write_translator_avalon_universal_master_0_readdatavalid; // lpddr2_avl_2_translator:uav_readdatavalid -> from_idct_hwacel_mm_write_translator:uav_readdatavalid
	wire         from_idct_hwacel_mm_write_translator_avalon_universal_master_0_lock;          // from_idct_hwacel_mm_write_translator:uav_lock -> lpddr2_avl_2_translator:uav_lock
	wire         from_idct_hwacel_mm_write_translator_avalon_universal_master_0_write;         // from_idct_hwacel_mm_write_translator:uav_write -> lpddr2_avl_2_translator:uav_write
	wire  [31:0] from_idct_hwacel_mm_write_translator_avalon_universal_master_0_writedata;     // from_idct_hwacel_mm_write_translator:uav_writedata -> lpddr2_avl_2_translator:uav_writedata
	wire   [9:0] from_idct_hwacel_mm_write_translator_avalon_universal_master_0_burstcount;    // from_idct_hwacel_mm_write_translator:uav_burstcount -> lpddr2_avl_2_translator:uav_burstcount

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (29),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (8),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (29),
		.UAV_BURSTCOUNT_W            (10),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) from_idct_hwacel_mm_write_translator (
		.clk                    (clk_125_clk_clk),                                                              //                       clk.clk
		.reset                  (from_idct_hwacel_reset_n_reset_bridge_in_reset_reset),                         //                     reset.reset
		.uav_address            (from_idct_hwacel_mm_write_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (from_idct_hwacel_mm_write_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (from_idct_hwacel_mm_write_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (from_idct_hwacel_mm_write_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (from_idct_hwacel_mm_write_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (from_idct_hwacel_mm_write_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (from_idct_hwacel_mm_write_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (from_idct_hwacel_mm_write_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (from_idct_hwacel_mm_write_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (from_idct_hwacel_mm_write_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (from_idct_hwacel_mm_write_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (from_idct_hwacel_mm_write_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (from_idct_hwacel_mm_write_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (from_idct_hwacel_mm_write_burstcount),                                         //                          .burstcount
		.av_byteenable          (from_idct_hwacel_mm_write_byteenable),                                         //                          .byteenable
		.av_write               (from_idct_hwacel_mm_write_write),                                              //                          .write
		.av_writedata           (from_idct_hwacel_mm_write_writedata),                                          //                          .writedata
		.av_beginbursttransfer  (1'b0),                                                                         //               (terminated)
		.av_begintransfer       (1'b0),                                                                         //               (terminated)
		.av_chipselect          (1'b0),                                                                         //               (terminated)
		.av_read                (1'b0),                                                                         //               (terminated)
		.av_readdata            (),                                                                             //               (terminated)
		.av_readdatavalid       (),                                                                             //               (terminated)
		.av_lock                (1'b0),                                                                         //               (terminated)
		.av_debugaccess         (1'b0),                                                                         //               (terminated)
		.uav_clken              (),                                                                             //               (terminated)
		.av_clken               (1'b1),                                                                         //               (terminated)
		.uav_response           (2'b00),                                                                        //               (terminated)
		.av_response            (),                                                                             //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                         //               (terminated)
		.av_writeresponsevalid  ()                                                                              //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (27),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (8),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (10),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) lpddr2_avl_2_translator (
		.clk                    (clk_125_clk_clk),                                                              //                      clk.clk
		.reset                  (from_idct_hwacel_reset_n_reset_bridge_in_reset_reset),                         //                    reset.reset
		.uav_address            (from_idct_hwacel_mm_write_translator_avalon_universal_master_0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (from_idct_hwacel_mm_write_translator_avalon_universal_master_0_burstcount),    //                         .burstcount
		.uav_read               (from_idct_hwacel_mm_write_translator_avalon_universal_master_0_read),          //                         .read
		.uav_write              (from_idct_hwacel_mm_write_translator_avalon_universal_master_0_write),         //                         .write
		.uav_waitrequest        (from_idct_hwacel_mm_write_translator_avalon_universal_master_0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (from_idct_hwacel_mm_write_translator_avalon_universal_master_0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (from_idct_hwacel_mm_write_translator_avalon_universal_master_0_byteenable),    //                         .byteenable
		.uav_readdata           (from_idct_hwacel_mm_write_translator_avalon_universal_master_0_readdata),      //                         .readdata
		.uav_writedata          (from_idct_hwacel_mm_write_translator_avalon_universal_master_0_writedata),     //                         .writedata
		.uav_lock               (from_idct_hwacel_mm_write_translator_avalon_universal_master_0_lock),          //                         .lock
		.uav_debugaccess        (from_idct_hwacel_mm_write_translator_avalon_universal_master_0_debugaccess),   //                         .debugaccess
		.av_address             (lpddr2_avl_2_address),                                                         //      avalon_anti_slave_0.address
		.av_write               (lpddr2_avl_2_write),                                                           //                         .write
		.av_read                (lpddr2_avl_2_read),                                                            //                         .read
		.av_readdata            (lpddr2_avl_2_readdata),                                                        //                         .readdata
		.av_writedata           (lpddr2_avl_2_writedata),                                                       //                         .writedata
		.av_beginbursttransfer  (lpddr2_avl_2_beginbursttransfer),                                              //                         .beginbursttransfer
		.av_burstcount          (lpddr2_avl_2_burstcount),                                                      //                         .burstcount
		.av_byteenable          (lpddr2_avl_2_byteenable),                                                      //                         .byteenable
		.av_readdatavalid       (lpddr2_avl_2_readdatavalid),                                                   //                         .readdatavalid
		.av_waitrequest         (lpddr2_avl_2_waitrequest),                                                     //                         .waitrequest
		.av_begintransfer       (),                                                                             //              (terminated)
		.av_writebyteenable     (),                                                                             //              (terminated)
		.av_lock                (),                                                                             //              (terminated)
		.av_chipselect          (),                                                                             //              (terminated)
		.av_clken               (),                                                                             //              (terminated)
		.uav_clken              (1'b0),                                                                         //              (terminated)
		.av_debugaccess         (),                                                                             //              (terminated)
		.av_outputenable        (),                                                                             //              (terminated)
		.uav_response           (),                                                                             //              (terminated)
		.av_response            (2'b00),                                                                        //              (terminated)
		.uav_writeresponsevalid (),                                                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                          //              (terminated)
	);

endmodule
