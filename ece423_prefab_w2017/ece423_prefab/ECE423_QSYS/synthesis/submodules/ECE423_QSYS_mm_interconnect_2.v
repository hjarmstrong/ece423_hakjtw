// ECE423_QSYS_mm_interconnect_2.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 15.1 185

`timescale 1 ps / 1 ps
module ECE423_QSYS_mm_interconnect_2 (
		input  wire        clk_125_clk_clk,                                      //                                    clk_125_clk.clk
		input  wire        from_idct_hwacel_reset_n_reset_bridge_in_reset_reset, // from_idct_hwacel_reset_n_reset_bridge_in_reset.reset
		input  wire        lpddr2_mp_cmd_reset_n_2_reset_bridge_in_reset_reset,  //  lpddr2_mp_cmd_reset_n_2_reset_bridge_in_reset.reset
		input  wire [28:0] from_idct_hwacel_mm_write_address,                    //                      from_idct_hwacel_mm_write.address
		output wire        from_idct_hwacel_mm_write_waitrequest,                //                                               .waitrequest
		input  wire [7:0]  from_idct_hwacel_mm_write_burstcount,                 //                                               .burstcount
		input  wire [3:0]  from_idct_hwacel_mm_write_byteenable,                 //                                               .byteenable
		input  wire        from_idct_hwacel_mm_write_write,                      //                                               .write
		input  wire [31:0] from_idct_hwacel_mm_write_writedata,                  //                                               .writedata
		input  wire [28:0] msgdma_0_mm_write_address,                            //                              msgdma_0_mm_write.address
		output wire        msgdma_0_mm_write_waitrequest,                        //                                               .waitrequest
		input  wire [7:0]  msgdma_0_mm_write_burstcount,                         //                                               .burstcount
		input  wire [3:0]  msgdma_0_mm_write_byteenable,                         //                                               .byteenable
		input  wire        msgdma_0_mm_write_write,                              //                                               .write
		input  wire [31:0] msgdma_0_mm_write_writedata,                          //                                               .writedata
		output wire [26:0] lpddr2_avl_2_address,                                 //                                   lpddr2_avl_2.address
		output wire        lpddr2_avl_2_write,                                   //                                               .write
		output wire        lpddr2_avl_2_read,                                    //                                               .read
		input  wire [31:0] lpddr2_avl_2_readdata,                                //                                               .readdata
		output wire [31:0] lpddr2_avl_2_writedata,                               //                                               .writedata
		output wire        lpddr2_avl_2_beginbursttransfer,                      //                                               .beginbursttransfer
		output wire [7:0]  lpddr2_avl_2_burstcount,                              //                                               .burstcount
		output wire [3:0]  lpddr2_avl_2_byteenable,                              //                                               .byteenable
		input  wire        lpddr2_avl_2_readdatavalid,                           //                                               .readdatavalid
		input  wire        lpddr2_avl_2_waitrequest                              //                                               .waitrequest
	);

	wire          from_idct_hwacel_mm_write_translator_avalon_universal_master_0_waitrequest;   // from_idct_hwacel_mm_write_agent:av_waitrequest -> from_idct_hwacel_mm_write_translator:uav_waitrequest
	wire   [31:0] from_idct_hwacel_mm_write_translator_avalon_universal_master_0_readdata;      // from_idct_hwacel_mm_write_agent:av_readdata -> from_idct_hwacel_mm_write_translator:uav_readdata
	wire          from_idct_hwacel_mm_write_translator_avalon_universal_master_0_debugaccess;   // from_idct_hwacel_mm_write_translator:uav_debugaccess -> from_idct_hwacel_mm_write_agent:av_debugaccess
	wire   [28:0] from_idct_hwacel_mm_write_translator_avalon_universal_master_0_address;       // from_idct_hwacel_mm_write_translator:uav_address -> from_idct_hwacel_mm_write_agent:av_address
	wire          from_idct_hwacel_mm_write_translator_avalon_universal_master_0_read;          // from_idct_hwacel_mm_write_translator:uav_read -> from_idct_hwacel_mm_write_agent:av_read
	wire    [3:0] from_idct_hwacel_mm_write_translator_avalon_universal_master_0_byteenable;    // from_idct_hwacel_mm_write_translator:uav_byteenable -> from_idct_hwacel_mm_write_agent:av_byteenable
	wire          from_idct_hwacel_mm_write_translator_avalon_universal_master_0_readdatavalid; // from_idct_hwacel_mm_write_agent:av_readdatavalid -> from_idct_hwacel_mm_write_translator:uav_readdatavalid
	wire          from_idct_hwacel_mm_write_translator_avalon_universal_master_0_lock;          // from_idct_hwacel_mm_write_translator:uav_lock -> from_idct_hwacel_mm_write_agent:av_lock
	wire          from_idct_hwacel_mm_write_translator_avalon_universal_master_0_write;         // from_idct_hwacel_mm_write_translator:uav_write -> from_idct_hwacel_mm_write_agent:av_write
	wire   [31:0] from_idct_hwacel_mm_write_translator_avalon_universal_master_0_writedata;     // from_idct_hwacel_mm_write_translator:uav_writedata -> from_idct_hwacel_mm_write_agent:av_writedata
	wire    [9:0] from_idct_hwacel_mm_write_translator_avalon_universal_master_0_burstcount;    // from_idct_hwacel_mm_write_translator:uav_burstcount -> from_idct_hwacel_mm_write_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                            // rsp_mux:src_valid -> from_idct_hwacel_mm_write_agent:rp_valid
	wire  [105:0] rsp_mux_src_data;                                                             // rsp_mux:src_data -> from_idct_hwacel_mm_write_agent:rp_data
	wire          rsp_mux_src_ready;                                                            // from_idct_hwacel_mm_write_agent:rp_ready -> rsp_mux:src_ready
	wire    [1:0] rsp_mux_src_channel;                                                          // rsp_mux:src_channel -> from_idct_hwacel_mm_write_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                                    // rsp_mux:src_startofpacket -> from_idct_hwacel_mm_write_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                      // rsp_mux:src_endofpacket -> from_idct_hwacel_mm_write_agent:rp_endofpacket
	wire          msgdma_0_mm_write_translator_avalon_universal_master_0_waitrequest;           // msgdma_0_mm_write_agent:av_waitrequest -> msgdma_0_mm_write_translator:uav_waitrequest
	wire   [31:0] msgdma_0_mm_write_translator_avalon_universal_master_0_readdata;              // msgdma_0_mm_write_agent:av_readdata -> msgdma_0_mm_write_translator:uav_readdata
	wire          msgdma_0_mm_write_translator_avalon_universal_master_0_debugaccess;           // msgdma_0_mm_write_translator:uav_debugaccess -> msgdma_0_mm_write_agent:av_debugaccess
	wire   [28:0] msgdma_0_mm_write_translator_avalon_universal_master_0_address;               // msgdma_0_mm_write_translator:uav_address -> msgdma_0_mm_write_agent:av_address
	wire          msgdma_0_mm_write_translator_avalon_universal_master_0_read;                  // msgdma_0_mm_write_translator:uav_read -> msgdma_0_mm_write_agent:av_read
	wire    [3:0] msgdma_0_mm_write_translator_avalon_universal_master_0_byteenable;            // msgdma_0_mm_write_translator:uav_byteenable -> msgdma_0_mm_write_agent:av_byteenable
	wire          msgdma_0_mm_write_translator_avalon_universal_master_0_readdatavalid;         // msgdma_0_mm_write_agent:av_readdatavalid -> msgdma_0_mm_write_translator:uav_readdatavalid
	wire          msgdma_0_mm_write_translator_avalon_universal_master_0_lock;                  // msgdma_0_mm_write_translator:uav_lock -> msgdma_0_mm_write_agent:av_lock
	wire          msgdma_0_mm_write_translator_avalon_universal_master_0_write;                 // msgdma_0_mm_write_translator:uav_write -> msgdma_0_mm_write_agent:av_write
	wire   [31:0] msgdma_0_mm_write_translator_avalon_universal_master_0_writedata;             // msgdma_0_mm_write_translator:uav_writedata -> msgdma_0_mm_write_agent:av_writedata
	wire    [9:0] msgdma_0_mm_write_translator_avalon_universal_master_0_burstcount;            // msgdma_0_mm_write_translator:uav_burstcount -> msgdma_0_mm_write_agent:av_burstcount
	wire          rsp_mux_001_src_valid;                                                        // rsp_mux_001:src_valid -> msgdma_0_mm_write_agent:rp_valid
	wire  [105:0] rsp_mux_001_src_data;                                                         // rsp_mux_001:src_data -> msgdma_0_mm_write_agent:rp_data
	wire          rsp_mux_001_src_ready;                                                        // msgdma_0_mm_write_agent:rp_ready -> rsp_mux_001:src_ready
	wire    [1:0] rsp_mux_001_src_channel;                                                      // rsp_mux_001:src_channel -> msgdma_0_mm_write_agent:rp_channel
	wire          rsp_mux_001_src_startofpacket;                                                // rsp_mux_001:src_startofpacket -> msgdma_0_mm_write_agent:rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                  // rsp_mux_001:src_endofpacket -> msgdma_0_mm_write_agent:rp_endofpacket
	wire   [31:0] lpddr2_avl_2_agent_m0_readdata;                                               // lpddr2_avl_2_translator:uav_readdata -> lpddr2_avl_2_agent:m0_readdata
	wire          lpddr2_avl_2_agent_m0_waitrequest;                                            // lpddr2_avl_2_translator:uav_waitrequest -> lpddr2_avl_2_agent:m0_waitrequest
	wire          lpddr2_avl_2_agent_m0_debugaccess;                                            // lpddr2_avl_2_agent:m0_debugaccess -> lpddr2_avl_2_translator:uav_debugaccess
	wire   [28:0] lpddr2_avl_2_agent_m0_address;                                                // lpddr2_avl_2_agent:m0_address -> lpddr2_avl_2_translator:uav_address
	wire    [3:0] lpddr2_avl_2_agent_m0_byteenable;                                             // lpddr2_avl_2_agent:m0_byteenable -> lpddr2_avl_2_translator:uav_byteenable
	wire          lpddr2_avl_2_agent_m0_read;                                                   // lpddr2_avl_2_agent:m0_read -> lpddr2_avl_2_translator:uav_read
	wire          lpddr2_avl_2_agent_m0_readdatavalid;                                          // lpddr2_avl_2_translator:uav_readdatavalid -> lpddr2_avl_2_agent:m0_readdatavalid
	wire          lpddr2_avl_2_agent_m0_lock;                                                   // lpddr2_avl_2_agent:m0_lock -> lpddr2_avl_2_translator:uav_lock
	wire   [31:0] lpddr2_avl_2_agent_m0_writedata;                                              // lpddr2_avl_2_agent:m0_writedata -> lpddr2_avl_2_translator:uav_writedata
	wire          lpddr2_avl_2_agent_m0_write;                                                  // lpddr2_avl_2_agent:m0_write -> lpddr2_avl_2_translator:uav_write
	wire    [9:0] lpddr2_avl_2_agent_m0_burstcount;                                             // lpddr2_avl_2_agent:m0_burstcount -> lpddr2_avl_2_translator:uav_burstcount
	wire          lpddr2_avl_2_agent_rf_source_valid;                                           // lpddr2_avl_2_agent:rf_source_valid -> lpddr2_avl_2_agent_rsp_fifo:in_valid
	wire  [106:0] lpddr2_avl_2_agent_rf_source_data;                                            // lpddr2_avl_2_agent:rf_source_data -> lpddr2_avl_2_agent_rsp_fifo:in_data
	wire          lpddr2_avl_2_agent_rf_source_ready;                                           // lpddr2_avl_2_agent_rsp_fifo:in_ready -> lpddr2_avl_2_agent:rf_source_ready
	wire          lpddr2_avl_2_agent_rf_source_startofpacket;                                   // lpddr2_avl_2_agent:rf_source_startofpacket -> lpddr2_avl_2_agent_rsp_fifo:in_startofpacket
	wire          lpddr2_avl_2_agent_rf_source_endofpacket;                                     // lpddr2_avl_2_agent:rf_source_endofpacket -> lpddr2_avl_2_agent_rsp_fifo:in_endofpacket
	wire          lpddr2_avl_2_agent_rsp_fifo_out_valid;                                        // lpddr2_avl_2_agent_rsp_fifo:out_valid -> lpddr2_avl_2_agent:rf_sink_valid
	wire  [106:0] lpddr2_avl_2_agent_rsp_fifo_out_data;                                         // lpddr2_avl_2_agent_rsp_fifo:out_data -> lpddr2_avl_2_agent:rf_sink_data
	wire          lpddr2_avl_2_agent_rsp_fifo_out_ready;                                        // lpddr2_avl_2_agent:rf_sink_ready -> lpddr2_avl_2_agent_rsp_fifo:out_ready
	wire          lpddr2_avl_2_agent_rsp_fifo_out_startofpacket;                                // lpddr2_avl_2_agent_rsp_fifo:out_startofpacket -> lpddr2_avl_2_agent:rf_sink_startofpacket
	wire          lpddr2_avl_2_agent_rsp_fifo_out_endofpacket;                                  // lpddr2_avl_2_agent_rsp_fifo:out_endofpacket -> lpddr2_avl_2_agent:rf_sink_endofpacket
	wire          from_idct_hwacel_mm_write_agent_cp_valid;                                     // from_idct_hwacel_mm_write_agent:cp_valid -> router:sink_valid
	wire  [105:0] from_idct_hwacel_mm_write_agent_cp_data;                                      // from_idct_hwacel_mm_write_agent:cp_data -> router:sink_data
	wire          from_idct_hwacel_mm_write_agent_cp_ready;                                     // router:sink_ready -> from_idct_hwacel_mm_write_agent:cp_ready
	wire          from_idct_hwacel_mm_write_agent_cp_startofpacket;                             // from_idct_hwacel_mm_write_agent:cp_startofpacket -> router:sink_startofpacket
	wire          from_idct_hwacel_mm_write_agent_cp_endofpacket;                               // from_idct_hwacel_mm_write_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                             // router:src_valid -> cmd_demux:sink_valid
	wire  [105:0] router_src_data;                                                              // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                             // cmd_demux:sink_ready -> router:src_ready
	wire    [1:0] router_src_channel;                                                           // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                     // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                       // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          msgdma_0_mm_write_agent_cp_valid;                                             // msgdma_0_mm_write_agent:cp_valid -> router_001:sink_valid
	wire  [105:0] msgdma_0_mm_write_agent_cp_data;                                              // msgdma_0_mm_write_agent:cp_data -> router_001:sink_data
	wire          msgdma_0_mm_write_agent_cp_ready;                                             // router_001:sink_ready -> msgdma_0_mm_write_agent:cp_ready
	wire          msgdma_0_mm_write_agent_cp_startofpacket;                                     // msgdma_0_mm_write_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          msgdma_0_mm_write_agent_cp_endofpacket;                                       // msgdma_0_mm_write_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                         // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [105:0] router_001_src_data;                                                          // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                                         // cmd_demux_001:sink_ready -> router_001:src_ready
	wire    [1:0] router_001_src_channel;                                                       // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                                 // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                                   // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          router_002_src_valid;                                                         // router_002:src_valid -> rsp_demux:sink_valid
	wire  [105:0] router_002_src_data;                                                          // router_002:src_data -> rsp_demux:sink_data
	wire          router_002_src_ready;                                                         // rsp_demux:sink_ready -> router_002:src_ready
	wire    [1:0] router_002_src_channel;                                                       // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_startofpacket;                                                 // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_002_src_endofpacket;                                                   // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          cmd_mux_src_valid;                                                            // cmd_mux:src_valid -> agent_pipeline:in_valid
	wire  [105:0] cmd_mux_src_data;                                                             // cmd_mux:src_data -> agent_pipeline:in_data
	wire          cmd_mux_src_ready;                                                            // agent_pipeline:in_ready -> cmd_mux:src_ready
	wire    [1:0] cmd_mux_src_channel;                                                          // cmd_mux:src_channel -> agent_pipeline:in_channel
	wire          cmd_mux_src_startofpacket;                                                    // cmd_mux:src_startofpacket -> agent_pipeline:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                                      // cmd_mux:src_endofpacket -> agent_pipeline:in_endofpacket
	wire          agent_pipeline_source0_valid;                                                 // agent_pipeline:out_valid -> lpddr2_avl_2_agent:cp_valid
	wire  [105:0] agent_pipeline_source0_data;                                                  // agent_pipeline:out_data -> lpddr2_avl_2_agent:cp_data
	wire          agent_pipeline_source0_ready;                                                 // lpddr2_avl_2_agent:cp_ready -> agent_pipeline:out_ready
	wire    [1:0] agent_pipeline_source0_channel;                                               // agent_pipeline:out_channel -> lpddr2_avl_2_agent:cp_channel
	wire          agent_pipeline_source0_startofpacket;                                         // agent_pipeline:out_startofpacket -> lpddr2_avl_2_agent:cp_startofpacket
	wire          agent_pipeline_source0_endofpacket;                                           // agent_pipeline:out_endofpacket -> lpddr2_avl_2_agent:cp_endofpacket
	wire          lpddr2_avl_2_agent_rp_valid;                                                  // lpddr2_avl_2_agent:rp_valid -> agent_pipeline_001:in_valid
	wire  [105:0] lpddr2_avl_2_agent_rp_data;                                                   // lpddr2_avl_2_agent:rp_data -> agent_pipeline_001:in_data
	wire          lpddr2_avl_2_agent_rp_ready;                                                  // agent_pipeline_001:in_ready -> lpddr2_avl_2_agent:rp_ready
	wire          lpddr2_avl_2_agent_rp_startofpacket;                                          // lpddr2_avl_2_agent:rp_startofpacket -> agent_pipeline_001:in_startofpacket
	wire          lpddr2_avl_2_agent_rp_endofpacket;                                            // lpddr2_avl_2_agent:rp_endofpacket -> agent_pipeline_001:in_endofpacket
	wire          agent_pipeline_001_source0_valid;                                             // agent_pipeline_001:out_valid -> router_002:sink_valid
	wire  [105:0] agent_pipeline_001_source0_data;                                              // agent_pipeline_001:out_data -> router_002:sink_data
	wire          agent_pipeline_001_source0_ready;                                             // router_002:sink_ready -> agent_pipeline_001:out_ready
	wire          agent_pipeline_001_source0_startofpacket;                                     // agent_pipeline_001:out_startofpacket -> router_002:sink_startofpacket
	wire          agent_pipeline_001_source0_endofpacket;                                       // agent_pipeline_001:out_endofpacket -> router_002:sink_endofpacket
	wire          cmd_demux_src0_valid;                                                         // cmd_demux:src0_valid -> mux_pipeline:in_valid
	wire  [105:0] cmd_demux_src0_data;                                                          // cmd_demux:src0_data -> mux_pipeline:in_data
	wire          cmd_demux_src0_ready;                                                         // mux_pipeline:in_ready -> cmd_demux:src0_ready
	wire    [1:0] cmd_demux_src0_channel;                                                       // cmd_demux:src0_channel -> mux_pipeline:in_channel
	wire          cmd_demux_src0_startofpacket;                                                 // cmd_demux:src0_startofpacket -> mux_pipeline:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                   // cmd_demux:src0_endofpacket -> mux_pipeline:in_endofpacket
	wire          mux_pipeline_source0_valid;                                                   // mux_pipeline:out_valid -> cmd_mux:sink0_valid
	wire  [105:0] mux_pipeline_source0_data;                                                    // mux_pipeline:out_data -> cmd_mux:sink0_data
	wire          mux_pipeline_source0_ready;                                                   // cmd_mux:sink0_ready -> mux_pipeline:out_ready
	wire    [1:0] mux_pipeline_source0_channel;                                                 // mux_pipeline:out_channel -> cmd_mux:sink0_channel
	wire          mux_pipeline_source0_startofpacket;                                           // mux_pipeline:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          mux_pipeline_source0_endofpacket;                                             // mux_pipeline:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                     // cmd_demux_001:src0_valid -> mux_pipeline_001:in_valid
	wire  [105:0] cmd_demux_001_src0_data;                                                      // cmd_demux_001:src0_data -> mux_pipeline_001:in_data
	wire          cmd_demux_001_src0_ready;                                                     // mux_pipeline_001:in_ready -> cmd_demux_001:src0_ready
	wire    [1:0] cmd_demux_001_src0_channel;                                                   // cmd_demux_001:src0_channel -> mux_pipeline_001:in_channel
	wire          cmd_demux_001_src0_startofpacket;                                             // cmd_demux_001:src0_startofpacket -> mux_pipeline_001:in_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                               // cmd_demux_001:src0_endofpacket -> mux_pipeline_001:in_endofpacket
	wire          mux_pipeline_001_source0_valid;                                               // mux_pipeline_001:out_valid -> cmd_mux:sink1_valid
	wire  [105:0] mux_pipeline_001_source0_data;                                                // mux_pipeline_001:out_data -> cmd_mux:sink1_data
	wire          mux_pipeline_001_source0_ready;                                               // cmd_mux:sink1_ready -> mux_pipeline_001:out_ready
	wire    [1:0] mux_pipeline_001_source0_channel;                                             // mux_pipeline_001:out_channel -> cmd_mux:sink1_channel
	wire          mux_pipeline_001_source0_startofpacket;                                       // mux_pipeline_001:out_startofpacket -> cmd_mux:sink1_startofpacket
	wire          mux_pipeline_001_source0_endofpacket;                                         // mux_pipeline_001:out_endofpacket -> cmd_mux:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                         // rsp_demux:src0_valid -> mux_pipeline_002:in_valid
	wire  [105:0] rsp_demux_src0_data;                                                          // rsp_demux:src0_data -> mux_pipeline_002:in_data
	wire          rsp_demux_src0_ready;                                                         // mux_pipeline_002:in_ready -> rsp_demux:src0_ready
	wire    [1:0] rsp_demux_src0_channel;                                                       // rsp_demux:src0_channel -> mux_pipeline_002:in_channel
	wire          rsp_demux_src0_startofpacket;                                                 // rsp_demux:src0_startofpacket -> mux_pipeline_002:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                   // rsp_demux:src0_endofpacket -> mux_pipeline_002:in_endofpacket
	wire          mux_pipeline_002_source0_valid;                                               // mux_pipeline_002:out_valid -> rsp_mux:sink0_valid
	wire  [105:0] mux_pipeline_002_source0_data;                                                // mux_pipeline_002:out_data -> rsp_mux:sink0_data
	wire          mux_pipeline_002_source0_ready;                                               // rsp_mux:sink0_ready -> mux_pipeline_002:out_ready
	wire    [1:0] mux_pipeline_002_source0_channel;                                             // mux_pipeline_002:out_channel -> rsp_mux:sink0_channel
	wire          mux_pipeline_002_source0_startofpacket;                                       // mux_pipeline_002:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          mux_pipeline_002_source0_endofpacket;                                         // mux_pipeline_002:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                         // rsp_demux:src1_valid -> mux_pipeline_003:in_valid
	wire  [105:0] rsp_demux_src1_data;                                                          // rsp_demux:src1_data -> mux_pipeline_003:in_data
	wire          rsp_demux_src1_ready;                                                         // mux_pipeline_003:in_ready -> rsp_demux:src1_ready
	wire    [1:0] rsp_demux_src1_channel;                                                       // rsp_demux:src1_channel -> mux_pipeline_003:in_channel
	wire          rsp_demux_src1_startofpacket;                                                 // rsp_demux:src1_startofpacket -> mux_pipeline_003:in_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                   // rsp_demux:src1_endofpacket -> mux_pipeline_003:in_endofpacket
	wire          mux_pipeline_003_source0_valid;                                               // mux_pipeline_003:out_valid -> rsp_mux_001:sink0_valid
	wire  [105:0] mux_pipeline_003_source0_data;                                                // mux_pipeline_003:out_data -> rsp_mux_001:sink0_data
	wire          mux_pipeline_003_source0_ready;                                               // rsp_mux_001:sink0_ready -> mux_pipeline_003:out_ready
	wire    [1:0] mux_pipeline_003_source0_channel;                                             // mux_pipeline_003:out_channel -> rsp_mux_001:sink0_channel
	wire          mux_pipeline_003_source0_startofpacket;                                       // mux_pipeline_003:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          mux_pipeline_003_source0_endofpacket;                                         // mux_pipeline_003:out_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          lpddr2_avl_2_agent_rdata_fifo_src_valid;                                      // lpddr2_avl_2_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] lpddr2_avl_2_agent_rdata_fifo_src_data;                                       // lpddr2_avl_2_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire          lpddr2_avl_2_agent_rdata_fifo_src_ready;                                      // avalon_st_adapter:in_0_ready -> lpddr2_avl_2_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_out_0_valid;                                                // avalon_st_adapter:out_0_valid -> lpddr2_avl_2_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                                 // avalon_st_adapter:out_0_data -> lpddr2_avl_2_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                // lpddr2_avl_2_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                // avalon_st_adapter:out_0_error -> lpddr2_avl_2_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (29),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (8),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (29),
		.UAV_BURSTCOUNT_W            (10),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) from_idct_hwacel_mm_write_translator (
		.clk                    (clk_125_clk_clk),                                                              //                       clk.clk
		.reset                  (from_idct_hwacel_reset_n_reset_bridge_in_reset_reset),                         //                     reset.reset
		.uav_address            (from_idct_hwacel_mm_write_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (from_idct_hwacel_mm_write_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (from_idct_hwacel_mm_write_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (from_idct_hwacel_mm_write_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (from_idct_hwacel_mm_write_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (from_idct_hwacel_mm_write_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (from_idct_hwacel_mm_write_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (from_idct_hwacel_mm_write_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (from_idct_hwacel_mm_write_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (from_idct_hwacel_mm_write_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (from_idct_hwacel_mm_write_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (from_idct_hwacel_mm_write_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (from_idct_hwacel_mm_write_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (from_idct_hwacel_mm_write_burstcount),                                         //                          .burstcount
		.av_byteenable          (from_idct_hwacel_mm_write_byteenable),                                         //                          .byteenable
		.av_write               (from_idct_hwacel_mm_write_write),                                              //                          .write
		.av_writedata           (from_idct_hwacel_mm_write_writedata),                                          //                          .writedata
		.av_beginbursttransfer  (1'b0),                                                                         //               (terminated)
		.av_begintransfer       (1'b0),                                                                         //               (terminated)
		.av_chipselect          (1'b0),                                                                         //               (terminated)
		.av_read                (1'b0),                                                                         //               (terminated)
		.av_readdata            (),                                                                             //               (terminated)
		.av_readdatavalid       (),                                                                             //               (terminated)
		.av_lock                (1'b0),                                                                         //               (terminated)
		.av_debugaccess         (1'b0),                                                                         //               (terminated)
		.uav_clken              (),                                                                             //               (terminated)
		.av_clken               (1'b1),                                                                         //               (terminated)
		.uav_response           (2'b00),                                                                        //               (terminated)
		.av_response            (),                                                                             //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                         //               (terminated)
		.av_writeresponsevalid  ()                                                                              //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (29),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (8),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (29),
		.UAV_BURSTCOUNT_W            (10),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) msgdma_0_mm_write_translator (
		.clk                    (clk_125_clk_clk),                                                      //                       clk.clk
		.reset                  (from_idct_hwacel_reset_n_reset_bridge_in_reset_reset),                 //                     reset.reset
		.uav_address            (msgdma_0_mm_write_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (msgdma_0_mm_write_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (msgdma_0_mm_write_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (msgdma_0_mm_write_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (msgdma_0_mm_write_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (msgdma_0_mm_write_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (msgdma_0_mm_write_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (msgdma_0_mm_write_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (msgdma_0_mm_write_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (msgdma_0_mm_write_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (msgdma_0_mm_write_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (msgdma_0_mm_write_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (msgdma_0_mm_write_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (msgdma_0_mm_write_burstcount),                                         //                          .burstcount
		.av_byteenable          (msgdma_0_mm_write_byteenable),                                         //                          .byteenable
		.av_write               (msgdma_0_mm_write_write),                                              //                          .write
		.av_writedata           (msgdma_0_mm_write_writedata),                                          //                          .writedata
		.av_beginbursttransfer  (1'b0),                                                                 //               (terminated)
		.av_begintransfer       (1'b0),                                                                 //               (terminated)
		.av_chipselect          (1'b0),                                                                 //               (terminated)
		.av_read                (1'b0),                                                                 //               (terminated)
		.av_readdata            (),                                                                     //               (terminated)
		.av_readdatavalid       (),                                                                     //               (terminated)
		.av_lock                (1'b0),                                                                 //               (terminated)
		.av_debugaccess         (1'b0),                                                                 //               (terminated)
		.uav_clken              (),                                                                     //               (terminated)
		.av_clken               (1'b1),                                                                 //               (terminated)
		.uav_response           (2'b00),                                                                //               (terminated)
		.av_response            (),                                                                     //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                 //               (terminated)
		.av_writeresponsevalid  ()                                                                      //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (27),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (8),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (10),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) lpddr2_avl_2_translator (
		.clk                    (clk_125_clk_clk),                                      //                      clk.clk
		.reset                  (from_idct_hwacel_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (lpddr2_avl_2_agent_m0_address),                        // avalon_universal_slave_0.address
		.uav_burstcount         (lpddr2_avl_2_agent_m0_burstcount),                     //                         .burstcount
		.uav_read               (lpddr2_avl_2_agent_m0_read),                           //                         .read
		.uav_write              (lpddr2_avl_2_agent_m0_write),                          //                         .write
		.uav_waitrequest        (lpddr2_avl_2_agent_m0_waitrequest),                    //                         .waitrequest
		.uav_readdatavalid      (lpddr2_avl_2_agent_m0_readdatavalid),                  //                         .readdatavalid
		.uav_byteenable         (lpddr2_avl_2_agent_m0_byteenable),                     //                         .byteenable
		.uav_readdata           (lpddr2_avl_2_agent_m0_readdata),                       //                         .readdata
		.uav_writedata          (lpddr2_avl_2_agent_m0_writedata),                      //                         .writedata
		.uav_lock               (lpddr2_avl_2_agent_m0_lock),                           //                         .lock
		.uav_debugaccess        (lpddr2_avl_2_agent_m0_debugaccess),                    //                         .debugaccess
		.av_address             (lpddr2_avl_2_address),                                 //      avalon_anti_slave_0.address
		.av_write               (lpddr2_avl_2_write),                                   //                         .write
		.av_read                (lpddr2_avl_2_read),                                    //                         .read
		.av_readdata            (lpddr2_avl_2_readdata),                                //                         .readdata
		.av_writedata           (lpddr2_avl_2_writedata),                               //                         .writedata
		.av_beginbursttransfer  (lpddr2_avl_2_beginbursttransfer),                      //                         .beginbursttransfer
		.av_burstcount          (lpddr2_avl_2_burstcount),                              //                         .burstcount
		.av_byteenable          (lpddr2_avl_2_byteenable),                              //                         .byteenable
		.av_readdatavalid       (lpddr2_avl_2_readdatavalid),                           //                         .readdatavalid
		.av_waitrequest         (lpddr2_avl_2_waitrequest),                             //                         .waitrequest
		.av_begintransfer       (),                                                     //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_chipselect          (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_QOS_H                 (90),
		.PKT_QOS_L                 (90),
		.PKT_DATA_SIDEBAND_H       (88),
		.PKT_DATA_SIDEBAND_L       (88),
		.PKT_ADDR_SIDEBAND_H       (87),
		.PKT_ADDR_SIDEBAND_L       (87),
		.PKT_BURST_TYPE_H          (86),
		.PKT_BURST_TYPE_L          (85),
		.PKT_CACHE_H               (100),
		.PKT_CACHE_L               (97),
		.PKT_THREAD_ID_H           (93),
		.PKT_THREAD_ID_L           (93),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_TRANS_EXCLUSIVE       (70),
		.PKT_TRANS_LOCK            (69),
		.PKT_BEGIN_BURST           (89),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (81),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (71),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (91),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (92),
		.ST_DATA_W                 (106),
		.ST_CHANNEL_W              (2),
		.AV_BURSTCOUNT_W           (10),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) from_idct_hwacel_mm_write_agent (
		.clk                   (clk_125_clk_clk),                                                              //       clk.clk
		.reset                 (from_idct_hwacel_reset_n_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.av_address            (from_idct_hwacel_mm_write_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (from_idct_hwacel_mm_write_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (from_idct_hwacel_mm_write_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (from_idct_hwacel_mm_write_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (from_idct_hwacel_mm_write_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (from_idct_hwacel_mm_write_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (from_idct_hwacel_mm_write_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (from_idct_hwacel_mm_write_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (from_idct_hwacel_mm_write_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (from_idct_hwacel_mm_write_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (from_idct_hwacel_mm_write_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (from_idct_hwacel_mm_write_agent_cp_valid),                                     //        cp.valid
		.cp_data               (from_idct_hwacel_mm_write_agent_cp_data),                                      //          .data
		.cp_startofpacket      (from_idct_hwacel_mm_write_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (from_idct_hwacel_mm_write_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (from_idct_hwacel_mm_write_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                            //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                             //          .data
		.rp_channel            (rsp_mux_src_channel),                                                          //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                    //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                      //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                            //          .ready
		.av_response           (),                                                                             // (terminated)
		.av_writeresponsevalid ()                                                                              // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_QOS_H                 (90),
		.PKT_QOS_L                 (90),
		.PKT_DATA_SIDEBAND_H       (88),
		.PKT_DATA_SIDEBAND_L       (88),
		.PKT_ADDR_SIDEBAND_H       (87),
		.PKT_ADDR_SIDEBAND_L       (87),
		.PKT_BURST_TYPE_H          (86),
		.PKT_BURST_TYPE_L          (85),
		.PKT_CACHE_H               (100),
		.PKT_CACHE_L               (97),
		.PKT_THREAD_ID_H           (93),
		.PKT_THREAD_ID_L           (93),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_TRANS_EXCLUSIVE       (70),
		.PKT_TRANS_LOCK            (69),
		.PKT_BEGIN_BURST           (89),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (81),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (71),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (91),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (92),
		.ST_DATA_W                 (106),
		.ST_CHANNEL_W              (2),
		.AV_BURSTCOUNT_W           (10),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) msgdma_0_mm_write_agent (
		.clk                   (clk_125_clk_clk),                                                      //       clk.clk
		.reset                 (from_idct_hwacel_reset_n_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.av_address            (msgdma_0_mm_write_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (msgdma_0_mm_write_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (msgdma_0_mm_write_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (msgdma_0_mm_write_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (msgdma_0_mm_write_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (msgdma_0_mm_write_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (msgdma_0_mm_write_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (msgdma_0_mm_write_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (msgdma_0_mm_write_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (msgdma_0_mm_write_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (msgdma_0_mm_write_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (msgdma_0_mm_write_agent_cp_valid),                                     //        cp.valid
		.cp_data               (msgdma_0_mm_write_agent_cp_data),                                      //          .data
		.cp_startofpacket      (msgdma_0_mm_write_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (msgdma_0_mm_write_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (msgdma_0_mm_write_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_001_src_valid),                                                //        rp.valid
		.rp_data               (rsp_mux_001_src_data),                                                 //          .data
		.rp_channel            (rsp_mux_001_src_channel),                                              //          .channel
		.rp_startofpacket      (rsp_mux_001_src_startofpacket),                                        //          .startofpacket
		.rp_endofpacket        (rsp_mux_001_src_endofpacket),                                          //          .endofpacket
		.rp_ready              (rsp_mux_001_src_ready),                                                //          .ready
		.av_response           (),                                                                     // (terminated)
		.av_writeresponsevalid ()                                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_TRANS_LOCK            (69),
		.PKT_BEGIN_BURST           (89),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (81),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (71),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (91),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (92),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (2),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (10),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) lpddr2_avl_2_agent (
		.clk                     (clk_125_clk_clk),                                      //             clk.clk
		.reset                   (from_idct_hwacel_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (lpddr2_avl_2_agent_m0_address),                        //              m0.address
		.m0_burstcount           (lpddr2_avl_2_agent_m0_burstcount),                     //                .burstcount
		.m0_byteenable           (lpddr2_avl_2_agent_m0_byteenable),                     //                .byteenable
		.m0_debugaccess          (lpddr2_avl_2_agent_m0_debugaccess),                    //                .debugaccess
		.m0_lock                 (lpddr2_avl_2_agent_m0_lock),                           //                .lock
		.m0_readdata             (lpddr2_avl_2_agent_m0_readdata),                       //                .readdata
		.m0_readdatavalid        (lpddr2_avl_2_agent_m0_readdatavalid),                  //                .readdatavalid
		.m0_read                 (lpddr2_avl_2_agent_m0_read),                           //                .read
		.m0_waitrequest          (lpddr2_avl_2_agent_m0_waitrequest),                    //                .waitrequest
		.m0_writedata            (lpddr2_avl_2_agent_m0_writedata),                      //                .writedata
		.m0_write                (lpddr2_avl_2_agent_m0_write),                          //                .write
		.rp_endofpacket          (lpddr2_avl_2_agent_rp_endofpacket),                    //              rp.endofpacket
		.rp_ready                (lpddr2_avl_2_agent_rp_ready),                          //                .ready
		.rp_valid                (lpddr2_avl_2_agent_rp_valid),                          //                .valid
		.rp_data                 (lpddr2_avl_2_agent_rp_data),                           //                .data
		.rp_startofpacket        (lpddr2_avl_2_agent_rp_startofpacket),                  //                .startofpacket
		.cp_ready                (agent_pipeline_source0_ready),                         //              cp.ready
		.cp_valid                (agent_pipeline_source0_valid),                         //                .valid
		.cp_data                 (agent_pipeline_source0_data),                          //                .data
		.cp_startofpacket        (agent_pipeline_source0_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (agent_pipeline_source0_endofpacket),                   //                .endofpacket
		.cp_channel              (agent_pipeline_source0_channel),                       //                .channel
		.rf_sink_ready           (lpddr2_avl_2_agent_rsp_fifo_out_ready),                //         rf_sink.ready
		.rf_sink_valid           (lpddr2_avl_2_agent_rsp_fifo_out_valid),                //                .valid
		.rf_sink_startofpacket   (lpddr2_avl_2_agent_rsp_fifo_out_startofpacket),        //                .startofpacket
		.rf_sink_endofpacket     (lpddr2_avl_2_agent_rsp_fifo_out_endofpacket),          //                .endofpacket
		.rf_sink_data            (lpddr2_avl_2_agent_rsp_fifo_out_data),                 //                .data
		.rf_source_ready         (lpddr2_avl_2_agent_rf_source_ready),                   //       rf_source.ready
		.rf_source_valid         (lpddr2_avl_2_agent_rf_source_valid),                   //                .valid
		.rf_source_startofpacket (lpddr2_avl_2_agent_rf_source_startofpacket),           //                .startofpacket
		.rf_source_endofpacket   (lpddr2_avl_2_agent_rf_source_endofpacket),             //                .endofpacket
		.rf_source_data          (lpddr2_avl_2_agent_rf_source_data),                    //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                        //                .error
		.rdata_fifo_src_ready    (lpddr2_avl_2_agent_rdata_fifo_src_ready),              //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (lpddr2_avl_2_agent_rdata_fifo_src_valid),              //                .valid
		.rdata_fifo_src_data     (lpddr2_avl_2_agent_rdata_fifo_src_data),               //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (49),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) lpddr2_avl_2_agent_rsp_fifo (
		.clk               (clk_125_clk_clk),                                      //       clk.clk
		.reset             (from_idct_hwacel_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (lpddr2_avl_2_agent_rf_source_data),                    //        in.data
		.in_valid          (lpddr2_avl_2_agent_rf_source_valid),                   //          .valid
		.in_ready          (lpddr2_avl_2_agent_rf_source_ready),                   //          .ready
		.in_startofpacket  (lpddr2_avl_2_agent_rf_source_startofpacket),           //          .startofpacket
		.in_endofpacket    (lpddr2_avl_2_agent_rf_source_endofpacket),             //          .endofpacket
		.out_data          (lpddr2_avl_2_agent_rsp_fifo_out_data),                 //       out.data
		.out_valid         (lpddr2_avl_2_agent_rsp_fifo_out_valid),                //          .valid
		.out_ready         (lpddr2_avl_2_agent_rsp_fifo_out_ready),                //          .ready
		.out_startofpacket (lpddr2_avl_2_agent_rsp_fifo_out_startofpacket),        //          .startofpacket
		.out_endofpacket   (lpddr2_avl_2_agent_rsp_fifo_out_endofpacket),          //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	ECE423_QSYS_mm_interconnect_2_router router (
		.sink_ready         (from_idct_hwacel_mm_write_agent_cp_ready),             //      sink.ready
		.sink_valid         (from_idct_hwacel_mm_write_agent_cp_valid),             //          .valid
		.sink_data          (from_idct_hwacel_mm_write_agent_cp_data),              //          .data
		.sink_startofpacket (from_idct_hwacel_mm_write_agent_cp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (from_idct_hwacel_mm_write_agent_cp_endofpacket),       //          .endofpacket
		.clk                (clk_125_clk_clk),                                      //       clk.clk
		.reset              (from_idct_hwacel_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                     //       src.ready
		.src_valid          (router_src_valid),                                     //          .valid
		.src_data           (router_src_data),                                      //          .data
		.src_channel        (router_src_channel),                                   //          .channel
		.src_startofpacket  (router_src_startofpacket),                             //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_2_router router_001 (
		.sink_ready         (msgdma_0_mm_write_agent_cp_ready),                     //      sink.ready
		.sink_valid         (msgdma_0_mm_write_agent_cp_valid),                     //          .valid
		.sink_data          (msgdma_0_mm_write_agent_cp_data),                      //          .data
		.sink_startofpacket (msgdma_0_mm_write_agent_cp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (msgdma_0_mm_write_agent_cp_endofpacket),               //          .endofpacket
		.clk                (clk_125_clk_clk),                                      //       clk.clk
		.reset              (from_idct_hwacel_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                 //       src.ready
		.src_valid          (router_001_src_valid),                                 //          .valid
		.src_data           (router_001_src_data),                                  //          .data
		.src_channel        (router_001_src_channel),                               //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                            //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_2_router_002 router_002 (
		.sink_ready         (agent_pipeline_001_source0_ready),                     //      sink.ready
		.sink_valid         (agent_pipeline_001_source0_valid),                     //          .valid
		.sink_data          (agent_pipeline_001_source0_data),                      //          .data
		.sink_startofpacket (agent_pipeline_001_source0_startofpacket),             //          .startofpacket
		.sink_endofpacket   (agent_pipeline_001_source0_endofpacket),               //          .endofpacket
		.clk                (clk_125_clk_clk),                                      //       clk.clk
		.reset              (from_idct_hwacel_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                 //       src.ready
		.src_valid          (router_002_src_valid),                                 //          .valid
		.src_data           (router_002_src_data),                                  //          .data
		.src_channel        (router_002_src_channel),                               //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                            //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_2_cmd_demux cmd_demux (
		.clk                (clk_125_clk_clk),                                      //       clk.clk
		.reset              (from_idct_hwacel_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                                     //      sink.ready
		.sink_channel       (router_src_channel),                                   //          .channel
		.sink_data          (router_src_data),                                      //          .data
		.sink_startofpacket (router_src_startofpacket),                             //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                               //          .endofpacket
		.sink_valid         (router_src_valid),                                     //          .valid
		.src0_ready         (cmd_demux_src0_ready),                                 //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                 //          .valid
		.src0_data          (cmd_demux_src0_data),                                  //          .data
		.src0_channel       (cmd_demux_src0_channel),                               //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                         //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                            //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_2_cmd_demux cmd_demux_001 (
		.clk                (clk_125_clk_clk),                                      //       clk.clk
		.reset              (from_idct_hwacel_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                                 //      sink.ready
		.sink_channel       (router_001_src_channel),                               //          .channel
		.sink_data          (router_001_src_data),                                  //          .data
		.sink_startofpacket (router_001_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_001_src_valid),                                 //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                             //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                             //          .valid
		.src0_data          (cmd_demux_001_src0_data),                              //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                           //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)                        //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_2_cmd_mux cmd_mux (
		.clk                 (clk_125_clk_clk),                                      //       clk.clk
		.reset               (from_idct_hwacel_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                    //       src.ready
		.src_valid           (cmd_mux_src_valid),                                    //          .valid
		.src_data            (cmd_mux_src_data),                                     //          .data
		.src_channel         (cmd_mux_src_channel),                                  //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                            //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                              //          .endofpacket
		.sink0_ready         (mux_pipeline_source0_ready),                           //     sink0.ready
		.sink0_valid         (mux_pipeline_source0_valid),                           //          .valid
		.sink0_channel       (mux_pipeline_source0_channel),                         //          .channel
		.sink0_data          (mux_pipeline_source0_data),                            //          .data
		.sink0_startofpacket (mux_pipeline_source0_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_source0_endofpacket),                     //          .endofpacket
		.sink1_ready         (mux_pipeline_001_source0_ready),                       //     sink1.ready
		.sink1_valid         (mux_pipeline_001_source0_valid),                       //          .valid
		.sink1_channel       (mux_pipeline_001_source0_channel),                     //          .channel
		.sink1_data          (mux_pipeline_001_source0_data),                        //          .data
		.sink1_startofpacket (mux_pipeline_001_source0_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_001_source0_endofpacket)                  //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_2_rsp_demux rsp_demux (
		.clk                (clk_125_clk_clk),                                      //       clk.clk
		.reset              (from_idct_hwacel_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                                 //      sink.ready
		.sink_channel       (router_002_src_channel),                               //          .channel
		.sink_data          (router_002_src_data),                                  //          .data
		.sink_startofpacket (router_002_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_002_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                 //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                 //          .valid
		.src0_data          (rsp_demux_src0_data),                                  //          .data
		.src0_channel       (rsp_demux_src0_channel),                               //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                         //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                           //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                 //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                 //          .valid
		.src1_data          (rsp_demux_src1_data),                                  //          .data
		.src1_channel       (rsp_demux_src1_channel),                               //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                         //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                            //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_2_rsp_mux rsp_mux (
		.clk                 (clk_125_clk_clk),                                      //       clk.clk
		.reset               (from_idct_hwacel_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                    //       src.ready
		.src_valid           (rsp_mux_src_valid),                                    //          .valid
		.src_data            (rsp_mux_src_data),                                     //          .data
		.src_channel         (rsp_mux_src_channel),                                  //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                            //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                              //          .endofpacket
		.sink0_ready         (mux_pipeline_002_source0_ready),                       //     sink0.ready
		.sink0_valid         (mux_pipeline_002_source0_valid),                       //          .valid
		.sink0_channel       (mux_pipeline_002_source0_channel),                     //          .channel
		.sink0_data          (mux_pipeline_002_source0_data),                        //          .data
		.sink0_startofpacket (mux_pipeline_002_source0_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_002_source0_endofpacket)                  //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_2_rsp_mux rsp_mux_001 (
		.clk                 (clk_125_clk_clk),                                      //       clk.clk
		.reset               (from_idct_hwacel_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                //          .valid
		.src_data            (rsp_mux_001_src_data),                                 //          .data
		.src_channel         (rsp_mux_001_src_channel),                              //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (mux_pipeline_003_source0_ready),                       //     sink0.ready
		.sink0_valid         (mux_pipeline_003_source0_valid),                       //          .valid
		.sink0_channel       (mux_pipeline_003_source0_channel),                     //          .channel
		.sink0_data          (mux_pipeline_003_source0_data),                        //          .data
		.sink0_startofpacket (mux_pipeline_003_source0_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_003_source0_endofpacket)                  //          .endofpacket
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (106),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline (
		.clk               (clk_125_clk_clk),                                      //       cr0.clk
		.reset             (from_idct_hwacel_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_mux_src_ready),                                    //     sink0.ready
		.in_valid          (cmd_mux_src_valid),                                    //          .valid
		.in_startofpacket  (cmd_mux_src_startofpacket),                            //          .startofpacket
		.in_endofpacket    (cmd_mux_src_endofpacket),                              //          .endofpacket
		.in_data           (cmd_mux_src_data),                                     //          .data
		.in_channel        (cmd_mux_src_channel),                                  //          .channel
		.out_ready         (agent_pipeline_source0_ready),                         //   source0.ready
		.out_valid         (agent_pipeline_source0_valid),                         //          .valid
		.out_startofpacket (agent_pipeline_source0_startofpacket),                 //          .startofpacket
		.out_endofpacket   (agent_pipeline_source0_endofpacket),                   //          .endofpacket
		.out_data          (agent_pipeline_source0_data),                          //          .data
		.out_channel       (agent_pipeline_source0_channel),                       //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (106),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_001 (
		.clk               (clk_125_clk_clk),                                      //       cr0.clk
		.reset             (from_idct_hwacel_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (lpddr2_avl_2_agent_rp_ready),                          //     sink0.ready
		.in_valid          (lpddr2_avl_2_agent_rp_valid),                          //          .valid
		.in_startofpacket  (lpddr2_avl_2_agent_rp_startofpacket),                  //          .startofpacket
		.in_endofpacket    (lpddr2_avl_2_agent_rp_endofpacket),                    //          .endofpacket
		.in_data           (lpddr2_avl_2_agent_rp_data),                           //          .data
		.out_ready         (agent_pipeline_001_source0_ready),                     //   source0.ready
		.out_valid         (agent_pipeline_001_source0_valid),                     //          .valid
		.out_startofpacket (agent_pipeline_001_source0_startofpacket),             //          .startofpacket
		.out_endofpacket   (agent_pipeline_001_source0_endofpacket),               //          .endofpacket
		.out_data          (agent_pipeline_001_source0_data),                      //          .data
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_channel       (),                                                     // (terminated)
		.in_channel        (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (106),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline (
		.clk               (clk_125_clk_clk),                                      //       cr0.clk
		.reset             (from_idct_hwacel_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src0_ready),                                 //     sink0.ready
		.in_valid          (cmd_demux_src0_valid),                                 //          .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                         //          .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                           //          .endofpacket
		.in_data           (cmd_demux_src0_data),                                  //          .data
		.in_channel        (cmd_demux_src0_channel),                               //          .channel
		.out_ready         (mux_pipeline_source0_ready),                           //   source0.ready
		.out_valid         (mux_pipeline_source0_valid),                           //          .valid
		.out_startofpacket (mux_pipeline_source0_startofpacket),                   //          .startofpacket
		.out_endofpacket   (mux_pipeline_source0_endofpacket),                     //          .endofpacket
		.out_data          (mux_pipeline_source0_data),                            //          .data
		.out_channel       (mux_pipeline_source0_channel),                         //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (106),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_001 (
		.clk               (clk_125_clk_clk),                                      //       cr0.clk
		.reset             (from_idct_hwacel_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src0_ready),                             //     sink0.ready
		.in_valid          (cmd_demux_001_src0_valid),                             //          .valid
		.in_startofpacket  (cmd_demux_001_src0_startofpacket),                     //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src0_endofpacket),                       //          .endofpacket
		.in_data           (cmd_demux_001_src0_data),                              //          .data
		.in_channel        (cmd_demux_001_src0_channel),                           //          .channel
		.out_ready         (mux_pipeline_001_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_001_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_001_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_001_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_001_source0_data),                        //          .data
		.out_channel       (mux_pipeline_001_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (106),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_002 (
		.clk               (clk_125_clk_clk),                                      //       cr0.clk
		.reset             (from_idct_hwacel_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_src0_ready),                                 //     sink0.ready
		.in_valid          (rsp_demux_src0_valid),                                 //          .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                         //          .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                           //          .endofpacket
		.in_data           (rsp_demux_src0_data),                                  //          .data
		.in_channel        (rsp_demux_src0_channel),                               //          .channel
		.out_ready         (mux_pipeline_002_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_002_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_002_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_002_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_002_source0_data),                        //          .data
		.out_channel       (mux_pipeline_002_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (106),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_003 (
		.clk               (clk_125_clk_clk),                                      //       cr0.clk
		.reset             (from_idct_hwacel_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_src1_ready),                                 //     sink0.ready
		.in_valid          (rsp_demux_src1_valid),                                 //          .valid
		.in_startofpacket  (rsp_demux_src1_startofpacket),                         //          .startofpacket
		.in_endofpacket    (rsp_demux_src1_endofpacket),                           //          .endofpacket
		.in_data           (rsp_demux_src1_data),                                  //          .data
		.in_channel        (rsp_demux_src1_channel),                               //          .channel
		.out_ready         (mux_pipeline_003_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_003_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_003_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_003_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_003_source0_data),                        //          .data
		.out_channel       (mux_pipeline_003_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	ECE423_QSYS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_125_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (from_idct_hwacel_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (lpddr2_avl_2_agent_rdata_fifo_src_data),               //     in_0.data
		.in_0_valid     (lpddr2_avl_2_agent_rdata_fifo_src_valid),              //         .valid
		.in_0_ready     (lpddr2_avl_2_agent_rdata_fifo_src_ready),              //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                        //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                        //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                         //         .error
	);

endmodule
