
idct_dma_test.elf:     file format elf32-littlenios2
idct_dma_test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x20080240

Program Header:
    LOAD off    0x00001000 vaddr 0x20080000 paddr 0x20080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x20080020 paddr 0x20080020 align 2**12
         filesz 0x00011364 memsz 0x00011364 flags r-x
    LOAD off    0x00013000 vaddr 0x00000000 paddr 0x20091384 align 2**12
         filesz 0x000021c0 memsz 0x0000232c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  20080000  20080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000220  20080020  20080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011144  20080240  20080240  00001240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000005ac  00000000  20091384  00013000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c14  000005ac  20091930  000135ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000016c  000021c0  20093544  000151c0  2**2
                  ALLOC, SMALL_DATA
  6 .lpddr2       00000000  0000232c  0000232c  000151c0  2**0
                  CONTENTS
  7 .sram         00000000  20093544  20093544  000151c0  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000151c0  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000f98  00000000  00000000  000151e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002726c  00000000  00000000  00016180  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009aa8  00000000  00000000  0003d3ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000bffb  00000000  00000000  00046e94  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002724  00000000  00000000  00052e90  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004199  00000000  00000000  000555b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001723c  00000000  00000000  0005974d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  0007098c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001860  00000000  00000000  000709f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00075e77  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  00075e7a  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00075e7d  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00075e7e  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00075e7f  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00075e83  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00075e87  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  00075e8b  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  00075e94  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  00075e9d  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  00075ea6  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000032  00000000  00000000  00075eb1  2**0
                  CONTENTS, READONLY
 30 .jdi          000039ed  00000000  00000000  00075ee3  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0012d309  00000000  00000000  000798d0  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
20080000 l    d  .entry	00000000 .entry
20080020 l    d  .exceptions	00000000 .exceptions
20080240 l    d  .text	00000000 .text
00000000 l    d  .rodata	00000000 .rodata
000005ac l    d  .rwdata	00000000 .rwdata
000021c0 l    d  .bss	00000000 .bss
0000232c l    d  .lpddr2	00000000 .lpddr2
20093544 l    d  .sram	00000000 .sram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../idct_dma_test_bsp//obj/HAL/src/crt0.o
20080288 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000000aa l     O .rodata	00000010 zeroes.4255
20082d24 l     F .text	000000bc __sbprintf
000000ba l     O .rodata	00000010 blanks.4254
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
20082f34 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
20084af0 l     F .text	00000008 __fp_lock
20084af8 l     F .text	00000008 __fp_unlock
20084b0c l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000009b4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00000df8 l     O .rwdata	00000020 lc_ctype_charset
00000dd8 l     O .rwdata	00000020 lc_message_charset
00000e18 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
000000ec l     O .rodata	0000000c p05.2710
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
20087780 l     F .text	000000fc __sprint_r.part.0
00000220 l     O .rodata	00000010 blanks.4199
00000210 l     O .rodata	00000010 zeroes.4200
20088b88 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
2008a08c l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
2008c7b8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
2008c8d8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
2008c904 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
2008ca04 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
2008caf8 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
2008cbdc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
2008cdb8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000021a8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
2008d014 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
2008d15c l     F .text	00000038 alt_dev_reg
00000ff8 l     O .rwdata	00001060 jtag_uart
00002058 l     O .rwdata	00000060 from_idct_hwacel
000020b8 l     O .rwdata	00000060 to_idct_hwacel
00002118 l     O .rwdata	00000060 video_dma
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
2008d4e4 l     F .text	00000204 altera_avalon_jtag_uart_irq
2008d6e8 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_msgdma.c
2008dd08 l     F .text	00000050 alt_get_errno
2008dd58 l     F .text	00000094 alt_msgdma_write_standard_descriptor
2008ddec l     F .text	0000012c alt_msgdma_write_extended_descriptor
2008df18 l     F .text	00000184 alt_msgdma_irq
2008e09c l     F .text	0000008c alt_msgdma_construct_standard_descriptor
2008e128 l     F .text	00000154 alt_msgdma_construct_extended_descriptor
2008e27c l     F .text	000002d0 alt_msgdma_descriptor_async_transfer
2008e54c l     F .text	00000378 alt_msgdma_descriptor_sync_transfer
2008eb94 l     F .text	000000a4 alt_msgdma_construct_prefetcher_standard_descriptor
2008ec38 l     F .text	00000194 alt_msgdma_construct_prefetcher_extended_descriptor
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
2008fe74 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
200903b0 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
200904e8 l     F .text	00000050 alt_get_errno
20090538 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00002200 g     O .bss	00000004 alt_instruction_exception_handler
2008faa8 g     F .text	0000003c alt_msgdma_standard_descriptor_async_transfer
20086e4c g     F .text	00000074 _mprec_log10
20086f38 g     F .text	0000008c __any_on
200890f4 g     F .text	00000054 _isatty_r
000000f8 g     O .rodata	00000028 __mprec_tinytens
2008cd00 g     F .text	00000078 alt_main
20080c08 g     F .text	000000a8 _puts_r
0000222c g     O .bss	00000100 alt_irq
20089148 g     F .text	0000005c _lseek_r
20091930 g       *ABS*	00000000 __flash_rwdata_start
2008b320 g     F .text	00000084 .hidden __eqdf2
2008e974 g     F .text	00000058 alt_msgdma_construct_standard_mm_to_mm_descriptor
0000232c g       *ABS*	00000000 __alt_heap_start
20080bcc g     F .text	0000003c printf
20089354 g     F .text	0000009c _wcrtomb_r
20080000 g       *ABS*	00000000 __alt_mem_sram
20087678 g     F .text	0000005c __sseek
20084e40 g     F .text	00000010 __sinit
20089200 g     F .text	00000138 __swbuf_r
200858ec g     F .text	0000007c _setlocale_r
20084ca8 g     F .text	00000068 __sfmoreglue
2008cd98 g     F .text	00000020 __malloc_unlock
000021f0 g     O .bss	00000004 altera_avalon_timer_ts_freq
20085da4 g     F .text	0000015c memmove
20084e28 g     F .text	00000018 _cleanup
20086024 g     F .text	000000a8 _Balloc
2008e8c4 g     F .text	00000058 alt_msgdma_construct_standard_st_to_mm_descriptor
000021c0 g     O .bss	00000004 got_mem_yet
2008b3a4 g     F .text	000000e0 .hidden __gtdf2
20090b64 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
20080000 g     F .entry	0000001c __reset
20080020 g       *ABS*	00000000 __flash_exceptions_start
2008909c g     F .text	00000058 _fstat_r
000021d0 g     O .bss	00000004 errno
200875f4 g     F .text	00000008 __seofread
000021e4 g     O .bss	00000004 alt_argv
0000a178 g       *ABS*	00000000 _gp
2008f3e4 g     F .text	000000d4 alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits
00000e78 g     O .rwdata	00000180 alt_fd_list
20090020 g     F .text	00000090 alt_find_dev
20085c6c g     F .text	00000138 memcpy
20084b00 g     F .text	0000000c _cleanup_r
2008c5e0 g     F .text	000000d0 .hidden __floatsidf
20090470 g     F .text	00000078 alt_io_redirect
2008b484 g     F .text	000000e0 .hidden __ltdf2
20091384 g       *ABS*	00000000 __DTOR_END__
2008f804 g     F .text	0000008c alt_msgdma_start_prefetcher_with_extd_desc_list
2008fae4 g     F .text	0000003c alt_msgdma_extended_descriptor_async_transfer
2008fa54 g     F .text	00000054 alt_msgdma_register_callback
20080cb0 g     F .text	00000014 puts
20090dd8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
2008752c g     F .text	00000074 __fpclassifyd
20086da8 g     F .text	000000a4 __ratio
20088b64 g     F .text	00000024 __vfiprintf_internal
2008d8e4 g     F .text	0000020c altera_avalon_jtag_uart_read
200803d0 g     F .text	00000014 malloc
2008f0c4 g     F .text	000000f0 alt_msgdma_prefetcher_add_standard_desc_to_list
20080ba0 g     F .text	0000002c _printf_r
2008a1a8 g     F .text	00000008 .hidden __udivsi3
2008ca54 g     F .text	000000a4 isatty
00000148 g     O .rodata	000000c8 __mprec_tens
20085968 g     F .text	0000000c __locale_charset
20090d4c g     F .text	0000008c alt_icache_flush
000021cc g     O .bss	00000004 __malloc_top_pad
00002188 g     O .rwdata	00000004 __mb_cur_max
20085998 g     F .text	0000000c _localeconv_r
20086430 g     F .text	0000003c __i2b
200852a4 g     F .text	000004c0 __sfvwrite_r
20080cc4 g     F .text	00000054 _sbrk_r
200891a4 g     F .text	0000005c _read_r
000021a0 g     O .rwdata	00000004 alt_max_fd
20088db8 g     F .text	000000f0 _fclose_r
20084ac0 g     F .text	00000030 fflush
000021c8 g     O .bss	00000004 __malloc_max_sbrked_mem
2008a1b8 g     F .text	0000089c .hidden __adddf3
20086b50 g     F .text	0000011c __b2d
2008ee24 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor
20089afc g     F .text	00000590 .hidden __umoddi3
2008cc2c g     F .text	000000d4 lseek
00002180 g     O .rwdata	00000004 _global_impure_ptr
20086fc4 g     F .text	00000568 _realloc_r
0000232c g       *ABS*	00000000 __bss_end
200902c0 g     F .text	000000f0 alt_iic_isr_register
20090a60 g     F .text	00000104 alt_tick
2008f8e8 g     F .text	0000016c alt_msgdma_init
2008953c g     F .text	000005c0 .hidden __udivdi3
20088ebc g     F .text	00000184 _fputwc_r
00000120 g     O .rodata	00000028 __mprec_bigtens
20086214 g     F .text	00000104 __s2b
2008c6b0 g     F .text	000000a4 .hidden __floatunsidf
200868f8 g     F .text	00000060 __mcmp
2008fb5c g     F .text	0000003c alt_msgdma_extended_descriptor_sync_transfer
20084e60 g     F .text	00000018 __fp_lock_all
20090274 g     F .text	0000004c alt_ic_irq_enabled
200909c8 g     F .text	00000098 alt_alarm_stop
000021f4 g     O .bss	00000004 alt_irq_active
200800fc g     F .exceptions	000000d0 alt_irq_handler
00000e50 g     O .rwdata	00000028 alt_dev_null
2008ea5c g     F .text	00000090 alt_msgdma_construct_extended_mm_to_st_descriptor
2008f778 g     F .text	0000008c alt_msgdma_start_prefetcher_with_std_desc_list
2008fe30 g     F .text	00000044 alt_dcache_flush_all
20086318 g     F .text	00000068 __hi0bits
2008c558 g     F .text	00000088 .hidden __fixdfsi
000021c0 g       *ABS*	00000000 __ram_rwdata_end
00002198 g     O .rwdata	00000008 alt_dev_list
2008d064 g     F .text	000000f8 write
20090f3c g     F .text	000000a0 _putc_r
000005ac g       *ABS*	00000000 __ram_rodata_end
2008c954 g     F .text	000000b0 fstat
2008b484 g     F .text	000000e0 .hidden __ledf2
20086668 g     F .text	00000140 __pow5mult
20087894 g     F .text	000012d0 ___vfiprintf_internal_r
000021dc g     O .bss	00000004 __nlocale_changed
2008a1b0 g     F .text	00000008 .hidden __umodsi3
2008ee7c g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor
0000232c g       *ABS*	00000000 end
2008d420 g     F .text	000000c4 altera_avalon_jtag_uart_init
200801cc g     F .exceptions	00000074 alt_instruction_exception_entry
20091384 g       *ABS*	00000000 __CTOR_LIST__
20000000 g       *ABS*	00000000 __alt_stack_pointer
2008c754 g     F .text	00000064 .hidden __clzsi2
2008daf0 g     F .text	00000218 altera_avalon_jtag_uart_write
20084e50 g     F .text	00000004 __sfp_lock_acquire
20085b84 g     F .text	000000e8 memchr
20080db0 g     F .text	00001f50 ___vfprintf_internal_r
20084fb4 g     F .text	000002f0 _free_r
2009075c g     F .text	00000228 alt_printf
20085974 g     F .text	00000010 __locale_mb_cur_max
200911bc g     F .text	00000194 __call_exitprocs
000021d8 g     O .bss	00000004 __mlocale_changed
00002178 g     O .rwdata	00000004 __malloc_sbrk_base
20080240 g     F .text	0000004c _start
000021f8 g     O .bss	00000004 _alt_tick_rate
200867a8 g     F .text	00000150 __lshift
000021fc g     O .bss	00000004 _alt_nticks
2008e91c g     F .text	00000058 alt_msgdma_construct_standard_mm_to_st_descriptor
2008ce08 g     F .text	000000fc read
2008d1c8 g     F .text	000000f4 alt_sys_init
200910a8 g     F .text	00000114 __register_exitproc
2008646c g     F .text	000001fc __multiply
2008d790 g     F .text	00000068 altera_avalon_jtag_uart_close
000005ac g       *ABS*	00000000 __ram_rwdata_start
00000000 g       *ABS*	00000000 __ram_rodata_start
00002204 g     O .bss	00000028 __malloc_current_mallinfo
20086c6c g     F .text	0000013c __d2b
2008d2bc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
20090c98 g     F .text	000000b4 alt_get_fd
2008fcd8 g     F .text	00000158 alt_busy_sleep
20088ca0 g     F .text	00000054 _close_r
2008edcc g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor
20090ec0 g     F .text	0000007c memcmp
2008d37c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0000232c g       *ABS*	00000000 __alt_stack_base
2008d3cc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
2008eed4 g     F .text	000000a0 alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor
20082de0 g     F .text	00000154 __swsetup_r
2008aa54 g     F .text	000008cc .hidden __divdf3
20084d10 g     F .text	00000118 __sfp
20086ec0 g     F .text	00000078 __copybits
000005ac g     O .rwdata	00000408 __malloc_av_
20084e5c g     F .text	00000004 __sinit_lock_release
2008b564 g     F .text	00000724 .hidden __muldf3
200875a0 g     F .text	00000054 __sread
20090b84 g     F .text	00000114 alt_find_file
2008fec4 g     F .text	000000a4 alt_dev_llist_insert
2008cd78 g     F .text	00000020 __malloc_lock
2008cf64 g     F .text	000000b0 sbrk
20084a64 g     F .text	0000005c _fflush_r
20088cf4 g     F .text	000000c4 _calloc_r
000021c0 g       *ABS*	00000000 __bss_start
20085f00 g     F .text	00000124 memset
2008f890 g     F .text	00000058 alt_msgdma_open
2008028c g     F .text	00000144 main
000021e8 g     O .bss	00000004 alt_envp
000021c4 g     O .bss	00000004 __malloc_max_total_mem
2008f1b4 g     F .text	00000198 alt_msgdma_prefetcher_add_extended_desc_to_list
2008d31c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
20089338 g     F .text	0000001c __swbuf
200876d4 g     F .text	00000008 __sclose
20000000 g       *ABS*	00000000 __alt_heap_limit
20088ea8 g     F .text	00000014 fclose
20083134 g     F .text	00001728 _dtoa_r
2008f4b8 g     F .text	000002c0 alt_msgdma_start_prefetcher_with_list_addr
200803f8 g     F .text	000007a8 _malloc_r
200894b0 g     F .text	00000030 __ascii_wctomb
000021a4 g     O .rwdata	00000004 alt_errno
2008f00c g     F .text	000000b8 alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor
20085764 g     F .text	000000c4 _fwalk
20090fdc g     F .text	000000cc putc
2008a0f8 g     F .text	00000054 .hidden __divsi3
20084e90 g     F .text	00000124 _malloc_trim_r
20091384 g       *ABS*	00000000 __CTOR_END__
200876dc g     F .text	000000a4 strcmp
20091384 g       *ABS*	00000000 __flash_rodata_start
20091384 g       *ABS*	00000000 __DTOR_LIST__
2008b320 g     F .text	00000084 .hidden __nedf2
2008d194 g     F .text	00000034 alt_irq_init
2008cf04 g     F .text	00000060 alt_release_fd
2008fb20 g     F .text	0000003c alt_msgdma_standard_descriptor_sync_transfer
00000230 g     O .rodata	00000100 .hidden __clz_tab
000021d4 g     O .bss	00000004 _PathLocale
20090e74 g     F .text	00000014 atexit
20088c44 g     F .text	0000005c _write_r
200859a4 g     F .text	0000001c setlocale
2008ef74 g     F .text	00000098 alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor
00002184 g     O .rwdata	00000004 _impure_ptr
000021e0 g     O .bss	00000004 alt_argc
2008485c g     F .text	00000208 __sflush_r
000021ec g     O .bss	00000004 altera_avalon_timer_ts_base
2008ffc4 g     F .text	0000005c _do_dtors
20085990 g     F .text	00000008 __locale_cjk_lang
20080020 g       .exceptions	00000000 alt_irq_entry
20086af0 g     F .text	00000060 __ulp
20084e78 g     F .text	00000018 __fp_unlock_all
00000000 g       *ABS*	00000000 __alt_mem_lpddr2
00002190 g     O .rwdata	00000008 alt_fs_list
20080020 g       *ABS*	00000000 __ram_exceptions_start
200859c0 g     F .text	0000000c localeconv
200900e0 g     F .text	00000050 alt_ic_isr_register
000021c0 g       *ABS*	00000000 _edata
0000232c g       *ABS*	00000000 _end
20080240 g       *ABS*	00000000 __ram_exceptions_end
2008d7f8 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
200901d0 g     F .text	000000a4 alt_ic_irq_disable
200875fc g     F .text	0000007c __swrite
0000217c g     O .rwdata	00000004 __malloc_trim_threshold
20085984 g     F .text	0000000c __locale_msgcharset
20090e88 g     F .text	00000038 exit
20085828 g     F .text	000000c4 _fwalk_reent
2008f34c g     F .text	00000098 alt_msgdma_prefetcher_set_std_list_own_by_hw_bits
20086958 g     F .text	00000198 __mdiff
2008a14c g     F .text	0000005c .hidden __modsi3
20000000 g       *ABS*	00000000 __alt_data_end
20080020 g     F .exceptions	00000000 alt_exception
20084e54 g     F .text	00000004 __sfp_lock_release
2008eaec g     F .text	000000a8 alt_msgdma_construct_extended_mm_to_mm_descriptor
2008e9cc g     F .text	00000090 alt_msgdma_construct_extended_st_to_mm_descriptor
20091350 g     F .text	00000034 _exit
2008fb98 g     F .text	00000140 alt_alarm_start
200859cc g     F .text	000001b8 __smakebuf_r
000021ac g     O .rwdata	00000008 alt_msgdma_list
20080d18 g     F .text	00000098 strlen
20090604 g     F .text	00000158 open
2008b3a4 g     F .text	000000e0 .hidden __gedf2
20090984 g     F .text	00000044 alt_putchar
0000218c g     O .rwdata	00000004 __wctomb
2008787c g     F .text	00000018 __sprint_r
200900b0 g     F .text	00000030 alt_icache_flush_all
000021b4 g     O .rwdata	00000004 alt_priority_mask
20090130 g     F .text	000000a0 alt_ic_irq_enable
20082d00 g     F .text	00000024 __vfprintf_internal
200894e0 g     F .text	0000005c _wctomb_r
2008bc88 g     F .text	000008d0 .hidden __subdf3
20086380 g     F .text	000000b0 __lo0bits
000021b8 g     O .rwdata	00000008 alt_alarm_list
2008ff68 g     F .text	0000005c _do_ctors
200893f0 g     F .text	000000c0 wcrtomb
2008c808 g     F .text	000000d0 close
2008cb5c g     F .text	00000080 alt_load
20089040 g     F .text	0000005c fputwc
200803e4 g     F .text	00000014 free
20084e58 g     F .text	00000004 __sinit_lock_acquire
200860f4 g     F .text	00000120 __multadd
200860cc g     F .text	00000028 _Bfree



Disassembly of section .entry:

20080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
20080000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
20080004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
20080008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
2008000c:	00bffd16 	blt	zero,r2,20080004 <__flash_rwdata_start+0xfffee6d4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
20080010:	00480234 	movhi	at,8200
    ori r1, r1, %lo(_start)
20080014:	08409014 	ori	at,at,576
    jmp r1
20080018:	0800683a 	jmp	at
2008001c:	00000000 	call	20000000 <__alt_data_end>

Disassembly of section .exceptions:

20080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
20080020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
20080024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
20080028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
2008002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
20080030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
20080034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
20080038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
2008003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
20080040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
20080044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
20080048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
2008004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
20080050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
20080054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
20080058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
2008005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
20080060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
20080064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
20080068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
2008006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
20080070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
20080074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
20080078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
2008007c:	10000326 	beq	r2,zero,2008008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
20080080:	20000226 	beq	r4,zero,2008008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
20080084:	00800fc0 	call	200800fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
20080088:	00000706 	br	200800a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
2008008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
20080090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
20080094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
20080098:	00801cc0 	call	200801cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
2008009c:	1000021e 	bne	r2,zero,200800a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
200800a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
200800a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
200800a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
200800ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
200800b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
200800b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
200800b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
200800bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
200800c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
200800c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
200800c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
200800cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
200800d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
200800d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
200800d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
200800dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
200800e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
200800e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
200800e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
200800ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
200800f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
200800f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
200800f8:	ef80083a 	eret

200800fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
200800fc:	defff904 	addi	sp,sp,-28
20080100:	dfc00615 	stw	ra,24(sp)
20080104:	df000515 	stw	fp,20(sp)
20080108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
2008010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
20080110:	0005313a 	rdctl	r2,ipending
20080114:	e0bffe15 	stw	r2,-8(fp)

  return active;
20080118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
2008011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
20080120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
20080124:	00800044 	movi	r2,1
20080128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
2008012c:	e0fffb17 	ldw	r3,-20(fp)
20080130:	e0bffc17 	ldw	r2,-16(fp)
20080134:	1884703a 	and	r2,r3,r2
20080138:	10001426 	beq	r2,zero,2008018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
2008013c:	00800034 	movhi	r2,0
20080140:	10888b04 	addi	r2,r2,8748
20080144:	e0fffd17 	ldw	r3,-12(fp)
20080148:	180690fa 	slli	r3,r3,3
2008014c:	10c5883a 	add	r2,r2,r3
20080150:	10c00017 	ldw	r3,0(r2)
20080154:	00800034 	movhi	r2,0
20080158:	10888b04 	addi	r2,r2,8748
2008015c:	e13ffd17 	ldw	r4,-12(fp)
20080160:	200890fa 	slli	r4,r4,3
20080164:	21000104 	addi	r4,r4,4
20080168:	1105883a 	add	r2,r2,r4
2008016c:	10800017 	ldw	r2,0(r2)
20080170:	1009883a 	mov	r4,r2
20080174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
20080178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
2008017c:	0005313a 	rdctl	r2,ipending
20080180:	e0bfff15 	stw	r2,-4(fp)

  return active;
20080184:	e0bfff17 	ldw	r2,-4(fp)
20080188:	00000706 	br	200801a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
2008018c:	e0bffc17 	ldw	r2,-16(fp)
20080190:	1085883a 	add	r2,r2,r2
20080194:	e0bffc15 	stw	r2,-16(fp)
      i++;
20080198:	e0bffd17 	ldw	r2,-12(fp)
2008019c:	10800044 	addi	r2,r2,1
200801a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
200801a4:	003fe106 	br	2008012c <__flash_rwdata_start+0xfffee7fc>

    active = alt_irq_pending ();
200801a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
200801ac:	e0bffb17 	ldw	r2,-20(fp)
200801b0:	103fdb1e 	bne	r2,zero,20080120 <__flash_rwdata_start+0xfffee7f0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
200801b4:	0001883a 	nop
}
200801b8:	e037883a 	mov	sp,fp
200801bc:	dfc00117 	ldw	ra,4(sp)
200801c0:	df000017 	ldw	fp,0(sp)
200801c4:	dec00204 	addi	sp,sp,8
200801c8:	f800283a 	ret

200801cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
200801cc:	defffb04 	addi	sp,sp,-20
200801d0:	dfc00415 	stw	ra,16(sp)
200801d4:	df000315 	stw	fp,12(sp)
200801d8:	df000304 	addi	fp,sp,12
200801dc:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
200801e0:	000531fa 	rdctl	r2,exception
200801e4:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
200801e8:	e0bffd17 	ldw	r2,-12(fp)
200801ec:	10801f0c 	andi	r2,r2,124
200801f0:	1004d0ba 	srli	r2,r2,2
200801f4:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
200801f8:	0005333a 	rdctl	r2,badaddr
200801fc:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
20080200:	d0a02217 	ldw	r2,-32632(gp)
20080204:	10000726 	beq	r2,zero,20080224 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
20080208:	d0a02217 	ldw	r2,-32632(gp)
2008020c:	e0fffd17 	ldw	r3,-12(fp)
20080210:	1809883a 	mov	r4,r3
20080214:	e17fff17 	ldw	r5,-4(fp)
20080218:	e1bffe17 	ldw	r6,-8(fp)
2008021c:	103ee83a 	callr	r2
20080220:	00000206 	br	2008022c <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
20080224:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
20080228:	0005883a 	mov	r2,zero
}
2008022c:	e037883a 	mov	sp,fp
20080230:	dfc00117 	ldw	ra,4(sp)
20080234:	df000017 	ldw	fp,0(sp)
20080238:	dec00204 	addi	sp,sp,8
2008023c:	f800283a 	ret

Disassembly of section .text:

20080240 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
20080240:	00900014 	movui	r2,16384
#endif

0:
    initd 0(r2)
20080244:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
20080248:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
2008024c:	00bffd16 	blt	zero,r2,20080244 <__flash_rwdata_start+0xfffee914>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
20080250:	06c80034 	movhi	sp,8192
    ori sp, sp, %lo(__alt_stack_pointer)
20080254:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
20080258:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
2008025c:	d6a85e14 	ori	gp,gp,41336
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
20080260:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
20080264:	10887014 	ori	r2,r2,8640

    movhi r3, %hi(__bss_end)
20080268:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
2008026c:	18c8cb14 	ori	r3,r3,9004

    beq r2, r3, 1f
20080270:	10c00326 	beq	r2,r3,20080280 <_start+0x40>

0:
    stw zero, (r2)
20080274:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
20080278:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
2008027c:	10fffd36 	bltu	r2,r3,20080274 <__flash_rwdata_start+0xfffee944>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
20080280:	008cb5c0 	call	2008cb5c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
20080284:	008cd000 	call	2008cd00 <alt_main>

20080288 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
20080288:	003fff06 	br	20080288 <__flash_rwdata_start+0xfffee958>

2008028c <main>:
}


int main()
{
  printf("Hello from Nios II!\n");
2008028c:	01000034 	movhi	r4,0
	got_mem_yet = 1;
}


int main()
{
20080290:	defff704 	addi	sp,sp,-36
  printf("Hello from Nios II!\n");
20080294:	21000004 	addi	r4,r4,0
	got_mem_yet = 1;
}


int main()
{
20080298:	dfc00815 	stw	ra,32(sp)
2008029c:	dd800715 	stw	r22,28(sp)
200802a0:	dd400615 	stw	r21,24(sp)
200802a4:	dd000515 	stw	r20,20(sp)
200802a8:	dcc00415 	stw	r19,16(sp)
200802ac:	dc800315 	stw	r18,12(sp)
200802b0:	dc400215 	stw	r17,8(sp)
200802b4:	dc000115 	stw	r16,4(sp)
  printf("Hello from Nios II!\n");
200802b8:	0080cb00 	call	20080cb0 <puts>

  volatile uint32_t *japan = malloc(sizeof(uint32_t) * 2); //{0xFFFBFFFF, 0xDEADCAFE};
200802bc:	01000204 	movi	r4,8
200802c0:	00803d00 	call	200803d0 <malloc>
  volatile uint32_t *japan_out = malloc(sizeof(uint32_t) * 2);
200802c4:	01000204 	movi	r4,8

int main()
{
  printf("Hello from Nios II!\n");

  volatile uint32_t *japan = malloc(sizeof(uint32_t) * 2); //{0xFFFBFFFF, 0xDEADCAFE};
200802c8:	102b883a 	mov	r21,r2
  volatile uint32_t *japan_out = malloc(sizeof(uint32_t) * 2);
200802cc:	00803d00 	call	200803d0 <malloc>
200802d0:	1029883a 	mov	r20,r2

  japan[0] = 0xFFFBFFFF;
200802d4:	00ffff34 	movhi	r3,65532
  japan[1] = 0xDEADCAFE;

  japan_out[0] = 0xFFFFFFFF;
200802d8:	00bfffc4 	movi	r2,-1
  printf("Hello from Nios II!\n");

  volatile uint32_t *japan = malloc(sizeof(uint32_t) * 2); //{0xFFFBFFFF, 0xDEADCAFE};
  volatile uint32_t *japan_out = malloc(sizeof(uint32_t) * 2);

  japan[0] = 0xFFFBFFFF;
200802dc:	1887883a 	add	r3,r3,r2
200802e0:	a8c00015 	stw	r3,0(r21)
  japan[1] = 0xDEADCAFE;
200802e4:	00f7abb4 	movhi	r3,57006
200802e8:	18f2bf84 	addi	r3,r3,-13570
200802ec:	a8c00115 	stw	r3,4(r21)

  japan_out[0] = 0xFFFFFFFF;
200802f0:	a0800015 	stw	r2,0(r20)


  alt_msgdma_dev *to_dma, *from_dma;
  alt_msgdma_standard_descriptor *in_base, *out_base;

  in_base = malloc(sizeof(alt_msgdma_standard_descriptor));//(alt_msgdma_standard_descriptor*) memalign(32,
200802f4:	01000404 	movi	r4,16

  japan[0] = 0xFFFBFFFF;
  japan[1] = 0xDEADCAFE;

  japan_out[0] = 0xFFFFFFFF;
  japan_out[1] = 0xFFFFFFFF;
200802f8:	a0800115 	stw	r2,4(r20)


  alt_msgdma_dev *to_dma, *from_dma;
  alt_msgdma_standard_descriptor *in_base, *out_base;

  in_base = malloc(sizeof(alt_msgdma_standard_descriptor));//(alt_msgdma_standard_descriptor*) memalign(32,
200802fc:	00803d00 	call	200803d0 <malloc>
		  //3 * sizeof(alt_msgdma_standard_descriptor));
  out_base = malloc(sizeof(alt_msgdma_standard_descriptor));//(alt_msgdma_standard_descriptor*) memalign(32,
20080300:	01000404 	movi	r4,16


  alt_msgdma_dev *to_dma, *from_dma;
  alt_msgdma_standard_descriptor *in_base, *out_base;

  in_base = malloc(sizeof(alt_msgdma_standard_descriptor));//(alt_msgdma_standard_descriptor*) memalign(32,
20080304:	1021883a 	mov	r16,r2
		  //3 * sizeof(alt_msgdma_standard_descriptor));
  out_base = malloc(sizeof(alt_msgdma_standard_descriptor));//(alt_msgdma_standard_descriptor*) memalign(32,
20080308:	00803d00 	call	200803d0 <malloc>
		  //3 * sizeof(alt_msgdma_standard_descriptor));

  to_dma = alt_msgdma_open(TO_IDCT_HWACEL_CSR_NAME);
2008030c:	01000034 	movhi	r4,0
20080310:	21000504 	addi	r4,r4,20
  alt_msgdma_dev *to_dma, *from_dma;
  alt_msgdma_standard_descriptor *in_base, *out_base;

  in_base = malloc(sizeof(alt_msgdma_standard_descriptor));//(alt_msgdma_standard_descriptor*) memalign(32,
		  //3 * sizeof(alt_msgdma_standard_descriptor));
  out_base = malloc(sizeof(alt_msgdma_standard_descriptor));//(alt_msgdma_standard_descriptor*) memalign(32,
20080314:	1023883a 	mov	r17,r2
		  //3 * sizeof(alt_msgdma_standard_descriptor));

  to_dma = alt_msgdma_open(TO_IDCT_HWACEL_CSR_NAME);
20080318:	008f8900 	call	2008f890 <alt_msgdma_open>
  from_dma = alt_msgdma_open(FROM_IDCT_HWACEL_CSR_NAME);
2008031c:	01000034 	movhi	r4,0
20080320:	21000b04 	addi	r4,r4,44
  in_base = malloc(sizeof(alt_msgdma_standard_descriptor));//(alt_msgdma_standard_descriptor*) memalign(32,
		  //3 * sizeof(alt_msgdma_standard_descriptor));
  out_base = malloc(sizeof(alt_msgdma_standard_descriptor));//(alt_msgdma_standard_descriptor*) memalign(32,
		  //3 * sizeof(alt_msgdma_standard_descriptor));

  to_dma = alt_msgdma_open(TO_IDCT_HWACEL_CSR_NAME);
20080324:	1025883a 	mov	r18,r2
  from_dma = alt_msgdma_open(FROM_IDCT_HWACEL_CSR_NAME);
20080328:	008f8900 	call	2008f890 <alt_msgdma_open>

  while(0 != alt_msgdma_construct_standard_mm_to_st_descriptor(to_dma,
2008032c:	05900004 	movi	r22,16384
		  //3 * sizeof(alt_msgdma_standard_descriptor));
  out_base = malloc(sizeof(alt_msgdma_standard_descriptor));//(alt_msgdma_standard_descriptor*) memalign(32,
		  //3 * sizeof(alt_msgdma_standard_descriptor));

  to_dma = alt_msgdma_open(TO_IDCT_HWACEL_CSR_NAME);
  from_dma = alt_msgdma_open(FROM_IDCT_HWACEL_CSR_NAME);
20080330:	1027883a 	mov	r19,r2

  while(0 != alt_msgdma_construct_standard_mm_to_st_descriptor(to_dma,
20080334:	dd800015 	stw	r22,0(sp)
20080338:	9009883a 	mov	r4,r18
2008033c:	880b883a 	mov	r5,r17
20080340:	a80d883a 	mov	r6,r21
20080344:	01c00404 	movi	r7,16
20080348:	008e91c0 	call	2008e91c <alt_msgdma_construct_standard_mm_to_st_descriptor>
2008034c:	103ff91e 	bne	r2,zero,20080334 <__flash_rwdata_start+0xfffeea04>
  				out_base,
  				(alt_u32 *) japan, 16,
  				DESC_CONTROL));

  while(0 != alt_msgdma_construct_standard_st_to_mm_descriptor(from_dma,
20080350:	05500004 	movi	r21,16384
20080354:	dd400015 	stw	r21,0(sp)
20080358:	9809883a 	mov	r4,r19
2008035c:	800b883a 	mov	r5,r16
20080360:	a00d883a 	mov	r6,r20
20080364:	01c00104 	movi	r7,4
20080368:	008e8c40 	call	2008e8c4 <alt_msgdma_construct_standard_st_to_mm_descriptor>
2008036c:	103ff91e 	bne	r2,zero,20080354 <__flash_rwdata_start+0xfffeea24>
  	from_dma,
  	callvack,
  	DESC_CONTROL,
  	0);*/

	while (alt_msgdma_standard_descriptor_sync_transfer(to_dma,
20080370:	9009883a 	mov	r4,r18
20080374:	880b883a 	mov	r5,r17
20080378:	008fb200 	call	2008fb20 <alt_msgdma_standard_descriptor_sync_transfer>
2008037c:	103ffc1e 	bne	r2,zero,20080370 <__flash_rwdata_start+0xfffeea40>
			!= 0);

	//while(!got_mem_yet);
	//got_mem_yet = 0;

	while (alt_msgdma_standard_descriptor_sync_transfer(from_dma,
20080380:	9809883a 	mov	r4,r19
20080384:	800b883a 	mov	r5,r16
20080388:	008fb200 	call	2008fb20 <alt_msgdma_standard_descriptor_sync_transfer>
2008038c:	103ffc1e 	bne	r2,zero,20080380 <__flash_rwdata_start+0xfffeea50>
			in_base)
			!= 0);

	//while(!got_mem_yet);
    unsigned int guckjdfashjkde = japan_out[0];
20080390:	a1400017 	ldw	r5,0(r20)
	printf("goted\n [0]: %X\n [1]: %X\n",guckjdfashjkde, japan_out[1]);
20080394:	a1800117 	ldw	r6,4(r20)
20080398:	01000034 	movhi	r4,0
2008039c:	21001204 	addi	r4,r4,72
200803a0:	0080bcc0 	call	20080bcc <printf>


  return 0;
}
200803a4:	0005883a 	mov	r2,zero
200803a8:	dfc00817 	ldw	ra,32(sp)
200803ac:	dd800717 	ldw	r22,28(sp)
200803b0:	dd400617 	ldw	r21,24(sp)
200803b4:	dd000517 	ldw	r20,20(sp)
200803b8:	dcc00417 	ldw	r19,16(sp)
200803bc:	dc800317 	ldw	r18,12(sp)
200803c0:	dc400217 	ldw	r17,8(sp)
200803c4:	dc000117 	ldw	r16,4(sp)
200803c8:	dec00904 	addi	sp,sp,36
200803cc:	f800283a 	ret

200803d0 <malloc>:
200803d0:	00800034 	movhi	r2,0
200803d4:	10886104 	addi	r2,r2,8580
200803d8:	200b883a 	mov	r5,r4
200803dc:	11000017 	ldw	r4,0(r2)
200803e0:	00803f81 	jmpi	200803f8 <_malloc_r>

200803e4 <free>:
200803e4:	00800034 	movhi	r2,0
200803e8:	10886104 	addi	r2,r2,8580
200803ec:	200b883a 	mov	r5,r4
200803f0:	11000017 	ldw	r4,0(r2)
200803f4:	0084fb41 	jmpi	20084fb4 <_free_r>

200803f8 <_malloc_r>:
200803f8:	defff504 	addi	sp,sp,-44
200803fc:	dc800315 	stw	r18,12(sp)
20080400:	dfc00a15 	stw	ra,40(sp)
20080404:	df000915 	stw	fp,36(sp)
20080408:	ddc00815 	stw	r23,32(sp)
2008040c:	dd800715 	stw	r22,28(sp)
20080410:	dd400615 	stw	r21,24(sp)
20080414:	dd000515 	stw	r20,20(sp)
20080418:	dcc00415 	stw	r19,16(sp)
2008041c:	dc400215 	stw	r17,8(sp)
20080420:	dc000115 	stw	r16,4(sp)
20080424:	288002c4 	addi	r2,r5,11
20080428:	00c00584 	movi	r3,22
2008042c:	2025883a 	mov	r18,r4
20080430:	18802a2e 	bgeu	r3,r2,200804dc <_malloc_r+0xe4>
20080434:	047ffe04 	movi	r17,-8
20080438:	1462703a 	and	r17,r2,r17
2008043c:	88009e16 	blt	r17,zero,200806b8 <_malloc_r+0x2c0>
20080440:	89409d36 	bltu	r17,r5,200806b8 <_malloc_r+0x2c0>
20080444:	008cd780 	call	2008cd78 <__malloc_lock>
20080448:	00807dc4 	movi	r2,503
2008044c:	14402736 	bltu	r2,r17,200804ec <_malloc_r+0xf4>
20080450:	8806d0fa 	srli	r3,r17,3
20080454:	04c00034 	movhi	r19,0
20080458:	9cc16b04 	addi	r19,r19,1452
2008045c:	18c5883a 	add	r2,r3,r3
20080460:	1085883a 	add	r2,r2,r2
20080464:	1085883a 	add	r2,r2,r2
20080468:	9885883a 	add	r2,r19,r2
2008046c:	14000317 	ldw	r16,12(r2)
20080470:	80814a26 	beq	r16,r2,2008099c <_malloc_r+0x5a4>
20080474:	80c00117 	ldw	r3,4(r16)
20080478:	81000317 	ldw	r4,12(r16)
2008047c:	00bfff04 	movi	r2,-4
20080480:	1884703a 	and	r2,r3,r2
20080484:	81400217 	ldw	r5,8(r16)
20080488:	8085883a 	add	r2,r16,r2
2008048c:	10c00117 	ldw	r3,4(r2)
20080490:	29000315 	stw	r4,12(r5)
20080494:	21400215 	stw	r5,8(r4)
20080498:	18c00054 	ori	r3,r3,1
2008049c:	10c00115 	stw	r3,4(r2)
200804a0:	9009883a 	mov	r4,r18
200804a4:	008cd980 	call	2008cd98 <__malloc_unlock>
200804a8:	80800204 	addi	r2,r16,8
200804ac:	dfc00a17 	ldw	ra,40(sp)
200804b0:	df000917 	ldw	fp,36(sp)
200804b4:	ddc00817 	ldw	r23,32(sp)
200804b8:	dd800717 	ldw	r22,28(sp)
200804bc:	dd400617 	ldw	r21,24(sp)
200804c0:	dd000517 	ldw	r20,20(sp)
200804c4:	dcc00417 	ldw	r19,16(sp)
200804c8:	dc800317 	ldw	r18,12(sp)
200804cc:	dc400217 	ldw	r17,8(sp)
200804d0:	dc000117 	ldw	r16,4(sp)
200804d4:	dec00b04 	addi	sp,sp,44
200804d8:	f800283a 	ret
200804dc:	04400404 	movi	r17,16
200804e0:	89407536 	bltu	r17,r5,200806b8 <_malloc_r+0x2c0>
200804e4:	008cd780 	call	2008cd78 <__malloc_lock>
200804e8:	003fd906 	br	20080450 <__flash_rwdata_start+0xfffeeb20>
200804ec:	8806d27a 	srli	r3,r17,9
200804f0:	18007526 	beq	r3,zero,200806c8 <_malloc_r+0x2d0>
200804f4:	00800104 	movi	r2,4
200804f8:	10c0ef36 	bltu	r2,r3,200808b8 <_malloc_r+0x4c0>
200804fc:	8806d1ba 	srli	r3,r17,6
20080500:	19c00e04 	addi	r7,r3,56
20080504:	39cb883a 	add	r5,r7,r7
20080508:	04c00034 	movhi	r19,0
2008050c:	294b883a 	add	r5,r5,r5
20080510:	9cc16b04 	addi	r19,r19,1452
20080514:	294b883a 	add	r5,r5,r5
20080518:	994b883a 	add	r5,r19,r5
2008051c:	2c000317 	ldw	r16,12(r5)
20080520:	2c000e26 	beq	r5,r16,2008055c <_malloc_r+0x164>
20080524:	80800117 	ldw	r2,4(r16)
20080528:	01bfff04 	movi	r6,-4
2008052c:	010003c4 	movi	r4,15
20080530:	1184703a 	and	r2,r2,r6
20080534:	1447c83a 	sub	r3,r2,r17
20080538:	20c00716 	blt	r4,r3,20080558 <_malloc_r+0x160>
2008053c:	1800650e 	bge	r3,zero,200806d4 <_malloc_r+0x2dc>
20080540:	84000317 	ldw	r16,12(r16)
20080544:	2c000526 	beq	r5,r16,2008055c <_malloc_r+0x164>
20080548:	80800117 	ldw	r2,4(r16)
2008054c:	1184703a 	and	r2,r2,r6
20080550:	1447c83a 	sub	r3,r2,r17
20080554:	20fff90e 	bge	r4,r3,2008053c <__flash_rwdata_start+0xfffeec0c>
20080558:	39ffffc4 	addi	r7,r7,-1
2008055c:	38c00044 	addi	r3,r7,1
20080560:	01800034 	movhi	r6,0
20080564:	9c000417 	ldw	r16,16(r19)
20080568:	31816b04 	addi	r6,r6,1452
2008056c:	32400204 	addi	r9,r6,8
20080570:	82410326 	beq	r16,r9,20080980 <_malloc_r+0x588>
20080574:	81000117 	ldw	r4,4(r16)
20080578:	00bfff04 	movi	r2,-4
2008057c:	208e703a 	and	r7,r4,r2
20080580:	3c45c83a 	sub	r2,r7,r17
20080584:	010003c4 	movi	r4,15
20080588:	2080ee16 	blt	r4,r2,20080944 <_malloc_r+0x54c>
2008058c:	32400515 	stw	r9,20(r6)
20080590:	32400415 	stw	r9,16(r6)
20080594:	1000510e 	bge	r2,zero,200806dc <_malloc_r+0x2e4>
20080598:	00807fc4 	movi	r2,511
2008059c:	11c0ce36 	bltu	r2,r7,200808d8 <_malloc_r+0x4e0>
200805a0:	3808d0fa 	srli	r4,r7,3
200805a4:	01c00044 	movi	r7,1
200805a8:	30800117 	ldw	r2,4(r6)
200805ac:	210b883a 	add	r5,r4,r4
200805b0:	294b883a 	add	r5,r5,r5
200805b4:	2009d0ba 	srai	r4,r4,2
200805b8:	294b883a 	add	r5,r5,r5
200805bc:	298b883a 	add	r5,r5,r6
200805c0:	2a000217 	ldw	r8,8(r5)
200805c4:	3908983a 	sll	r4,r7,r4
200805c8:	81400315 	stw	r5,12(r16)
200805cc:	82000215 	stw	r8,8(r16)
200805d0:	2088b03a 	or	r4,r4,r2
200805d4:	2c000215 	stw	r16,8(r5)
200805d8:	31000115 	stw	r4,4(r6)
200805dc:	44000315 	stw	r16,12(r8)
200805e0:	1805d0ba 	srai	r2,r3,2
200805e4:	01400044 	movi	r5,1
200805e8:	288a983a 	sll	r5,r5,r2
200805ec:	21404336 	bltu	r4,r5,200806fc <_malloc_r+0x304>
200805f0:	2144703a 	and	r2,r4,r5
200805f4:	10000a1e 	bne	r2,zero,20080620 <_malloc_r+0x228>
200805f8:	00bfff04 	movi	r2,-4
200805fc:	294b883a 	add	r5,r5,r5
20080600:	1886703a 	and	r3,r3,r2
20080604:	2144703a 	and	r2,r4,r5
20080608:	18c00104 	addi	r3,r3,4
2008060c:	1000041e 	bne	r2,zero,20080620 <_malloc_r+0x228>
20080610:	294b883a 	add	r5,r5,r5
20080614:	2144703a 	and	r2,r4,r5
20080618:	18c00104 	addi	r3,r3,4
2008061c:	103ffc26 	beq	r2,zero,20080610 <__flash_rwdata_start+0xfffeece0>
20080620:	023fff04 	movi	r8,-4
20080624:	01c003c4 	movi	r7,15
20080628:	18c5883a 	add	r2,r3,r3
2008062c:	1085883a 	add	r2,r2,r2
20080630:	1085883a 	add	r2,r2,r2
20080634:	9895883a 	add	r10,r19,r2
20080638:	52c00304 	addi	r11,r10,12
2008063c:	1819883a 	mov	r12,r3
20080640:	5c000017 	ldw	r16,0(r11)
20080644:	59bffd04 	addi	r6,r11,-12
20080648:	8180041e 	bne	r16,r6,2008065c <_malloc_r+0x264>
2008064c:	0000ce06 	br	20080988 <_malloc_r+0x590>
20080650:	2000d70e 	bge	r4,zero,200809b0 <_malloc_r+0x5b8>
20080654:	84000317 	ldw	r16,12(r16)
20080658:	8180cb26 	beq	r16,r6,20080988 <_malloc_r+0x590>
2008065c:	80800117 	ldw	r2,4(r16)
20080660:	1204703a 	and	r2,r2,r8
20080664:	1449c83a 	sub	r4,r2,r17
20080668:	393ff90e 	bge	r7,r4,20080650 <__flash_rwdata_start+0xfffeed20>
2008066c:	80800317 	ldw	r2,12(r16)
20080670:	80c00217 	ldw	r3,8(r16)
20080674:	89400054 	ori	r5,r17,1
20080678:	81400115 	stw	r5,4(r16)
2008067c:	18800315 	stw	r2,12(r3)
20080680:	10c00215 	stw	r3,8(r2)
20080684:	8463883a 	add	r17,r16,r17
20080688:	9c400515 	stw	r17,20(r19)
2008068c:	9c400415 	stw	r17,16(r19)
20080690:	20800054 	ori	r2,r4,1
20080694:	88800115 	stw	r2,4(r17)
20080698:	8a400315 	stw	r9,12(r17)
2008069c:	8a400215 	stw	r9,8(r17)
200806a0:	8923883a 	add	r17,r17,r4
200806a4:	89000015 	stw	r4,0(r17)
200806a8:	9009883a 	mov	r4,r18
200806ac:	008cd980 	call	2008cd98 <__malloc_unlock>
200806b0:	80800204 	addi	r2,r16,8
200806b4:	003f7d06 	br	200804ac <__flash_rwdata_start+0xfffeeb7c>
200806b8:	00800304 	movi	r2,12
200806bc:	90800015 	stw	r2,0(r18)
200806c0:	0005883a 	mov	r2,zero
200806c4:	003f7906 	br	200804ac <__flash_rwdata_start+0xfffeeb7c>
200806c8:	01401f84 	movi	r5,126
200806cc:	01c00fc4 	movi	r7,63
200806d0:	003f8d06 	br	20080508 <__flash_rwdata_start+0xfffeebd8>
200806d4:	81000317 	ldw	r4,12(r16)
200806d8:	003f6a06 	br	20080484 <__flash_rwdata_start+0xfffeeb54>
200806dc:	81c5883a 	add	r2,r16,r7
200806e0:	10c00117 	ldw	r3,4(r2)
200806e4:	9009883a 	mov	r4,r18
200806e8:	18c00054 	ori	r3,r3,1
200806ec:	10c00115 	stw	r3,4(r2)
200806f0:	008cd980 	call	2008cd98 <__malloc_unlock>
200806f4:	80800204 	addi	r2,r16,8
200806f8:	003f6c06 	br	200804ac <__flash_rwdata_start+0xfffeeb7c>
200806fc:	9c000217 	ldw	r16,8(r19)
20080700:	00bfff04 	movi	r2,-4
20080704:	85800117 	ldw	r22,4(r16)
20080708:	b0ac703a 	and	r22,r22,r2
2008070c:	b4400336 	bltu	r22,r17,2008071c <_malloc_r+0x324>
20080710:	b445c83a 	sub	r2,r22,r17
20080714:	00c003c4 	movi	r3,15
20080718:	18805d16 	blt	r3,r2,20080890 <_malloc_r+0x498>
2008071c:	05c00034 	movhi	r23,0
20080720:	00800034 	movhi	r2,0
20080724:	bdc85e04 	addi	r23,r23,8568
20080728:	10887304 	addi	r2,r2,8652
2008072c:	15400017 	ldw	r21,0(r2)
20080730:	b9000017 	ldw	r4,0(r23)
20080734:	00ffffc4 	movi	r3,-1
20080738:	858d883a 	add	r6,r16,r22
2008073c:	8d6b883a 	add	r21,r17,r21
20080740:	20c0e426 	beq	r4,r3,20080ad4 <_malloc_r+0x6dc>
20080744:	ad4403c4 	addi	r21,r21,4111
20080748:	00fc0004 	movi	r3,-4096
2008074c:	a8ea703a 	and	r21,r21,r3
20080750:	9009883a 	mov	r4,r18
20080754:	a80b883a 	mov	r5,r21
20080758:	d9800015 	stw	r6,0(sp)
2008075c:	0080cc40 	call	20080cc4 <_sbrk_r>
20080760:	00ffffc4 	movi	r3,-1
20080764:	1029883a 	mov	r20,r2
20080768:	d9800017 	ldw	r6,0(sp)
2008076c:	10c0a426 	beq	r2,r3,20080a00 <_malloc_r+0x608>
20080770:	1180a236 	bltu	r2,r6,200809fc <_malloc_r+0x604>
20080774:	07000034 	movhi	fp,0
20080778:	e7088104 	addi	fp,fp,8708
2008077c:	e0c00017 	ldw	r3,0(fp)
20080780:	a8c7883a 	add	r3,r21,r3
20080784:	e0c00015 	stw	r3,0(fp)
20080788:	3500da26 	beq	r6,r20,20080af4 <_malloc_r+0x6fc>
2008078c:	b9000017 	ldw	r4,0(r23)
20080790:	00bfffc4 	movi	r2,-1
20080794:	2080e426 	beq	r4,r2,20080b28 <_malloc_r+0x730>
20080798:	a185c83a 	sub	r2,r20,r6
2008079c:	1885883a 	add	r2,r3,r2
200807a0:	e0800015 	stw	r2,0(fp)
200807a4:	a0c001cc 	andi	r3,r20,7
200807a8:	1800b526 	beq	r3,zero,20080a80 <_malloc_r+0x688>
200807ac:	a0e9c83a 	sub	r20,r20,r3
200807b0:	00840204 	movi	r2,4104
200807b4:	a5000204 	addi	r20,r20,8
200807b8:	10c7c83a 	sub	r3,r2,r3
200807bc:	a545883a 	add	r2,r20,r21
200807c0:	1083ffcc 	andi	r2,r2,4095
200807c4:	18abc83a 	sub	r21,r3,r2
200807c8:	9009883a 	mov	r4,r18
200807cc:	a80b883a 	mov	r5,r21
200807d0:	0080cc40 	call	20080cc4 <_sbrk_r>
200807d4:	00ffffc4 	movi	r3,-1
200807d8:	10c0d026 	beq	r2,r3,20080b1c <_malloc_r+0x724>
200807dc:	1507c83a 	sub	r3,r2,r20
200807e0:	a8c7883a 	add	r3,r21,r3
200807e4:	18c00054 	ori	r3,r3,1
200807e8:	e0800017 	ldw	r2,0(fp)
200807ec:	9d000215 	stw	r20,8(r19)
200807f0:	a0c00115 	stw	r3,4(r20)
200807f4:	a887883a 	add	r3,r21,r2
200807f8:	e0c00015 	stw	r3,0(fp)
200807fc:	84c00e26 	beq	r16,r19,20080838 <_malloc_r+0x440>
20080800:	018003c4 	movi	r6,15
20080804:	3580a02e 	bgeu	r6,r22,20080a88 <_malloc_r+0x690>
20080808:	81400117 	ldw	r5,4(r16)
2008080c:	013ffe04 	movi	r4,-8
20080810:	b0bffd04 	addi	r2,r22,-12
20080814:	1104703a 	and	r2,r2,r4
20080818:	2900004c 	andi	r4,r5,1
2008081c:	1108b03a 	or	r4,r2,r4
20080820:	81000115 	stw	r4,4(r16)
20080824:	01400144 	movi	r5,5
20080828:	8089883a 	add	r4,r16,r2
2008082c:	21400115 	stw	r5,4(r4)
20080830:	21400215 	stw	r5,8(r4)
20080834:	3080c036 	bltu	r6,r2,20080b38 <_malloc_r+0x740>
20080838:	00800034 	movhi	r2,0
2008083c:	10887204 	addi	r2,r2,8648
20080840:	11000017 	ldw	r4,0(r2)
20080844:	20c0012e 	bgeu	r4,r3,2008084c <_malloc_r+0x454>
20080848:	10c00015 	stw	r3,0(r2)
2008084c:	00800034 	movhi	r2,0
20080850:	10887104 	addi	r2,r2,8644
20080854:	11000017 	ldw	r4,0(r2)
20080858:	9c000217 	ldw	r16,8(r19)
2008085c:	20c0012e 	bgeu	r4,r3,20080864 <_malloc_r+0x46c>
20080860:	10c00015 	stw	r3,0(r2)
20080864:	80c00117 	ldw	r3,4(r16)
20080868:	00bfff04 	movi	r2,-4
2008086c:	1886703a 	and	r3,r3,r2
20080870:	1c45c83a 	sub	r2,r3,r17
20080874:	1c400236 	bltu	r3,r17,20080880 <_malloc_r+0x488>
20080878:	00c003c4 	movi	r3,15
2008087c:	18800416 	blt	r3,r2,20080890 <_malloc_r+0x498>
20080880:	9009883a 	mov	r4,r18
20080884:	008cd980 	call	2008cd98 <__malloc_unlock>
20080888:	0005883a 	mov	r2,zero
2008088c:	003f0706 	br	200804ac <__flash_rwdata_start+0xfffeeb7c>
20080890:	88c00054 	ori	r3,r17,1
20080894:	80c00115 	stw	r3,4(r16)
20080898:	8463883a 	add	r17,r16,r17
2008089c:	10800054 	ori	r2,r2,1
200808a0:	9c400215 	stw	r17,8(r19)
200808a4:	88800115 	stw	r2,4(r17)
200808a8:	9009883a 	mov	r4,r18
200808ac:	008cd980 	call	2008cd98 <__malloc_unlock>
200808b0:	80800204 	addi	r2,r16,8
200808b4:	003efd06 	br	200804ac <__flash_rwdata_start+0xfffeeb7c>
200808b8:	00800504 	movi	r2,20
200808bc:	10c0482e 	bgeu	r2,r3,200809e0 <_malloc_r+0x5e8>
200808c0:	00801504 	movi	r2,84
200808c4:	10c06836 	bltu	r2,r3,20080a68 <_malloc_r+0x670>
200808c8:	8806d33a 	srli	r3,r17,12
200808cc:	19c01b84 	addi	r7,r3,110
200808d0:	39cb883a 	add	r5,r7,r7
200808d4:	003f0c06 	br	20080508 <__flash_rwdata_start+0xfffeebd8>
200808d8:	3804d27a 	srli	r2,r7,9
200808dc:	01000104 	movi	r4,4
200808e0:	2080422e 	bgeu	r4,r2,200809ec <_malloc_r+0x5f4>
200808e4:	01000504 	movi	r4,20
200808e8:	20807c36 	bltu	r4,r2,20080adc <_malloc_r+0x6e4>
200808ec:	110016c4 	addi	r4,r2,91
200808f0:	210b883a 	add	r5,r4,r4
200808f4:	294b883a 	add	r5,r5,r5
200808f8:	294b883a 	add	r5,r5,r5
200808fc:	994b883a 	add	r5,r19,r5
20080900:	28800217 	ldw	r2,8(r5)
20080904:	02000034 	movhi	r8,0
20080908:	42016b04 	addi	r8,r8,1452
2008090c:	11406326 	beq	r2,r5,20080a9c <_malloc_r+0x6a4>
20080910:	01bfff04 	movi	r6,-4
20080914:	11000117 	ldw	r4,4(r2)
20080918:	2188703a 	and	r4,r4,r6
2008091c:	3900022e 	bgeu	r7,r4,20080928 <_malloc_r+0x530>
20080920:	10800217 	ldw	r2,8(r2)
20080924:	28bffb1e 	bne	r5,r2,20080914 <__flash_rwdata_start+0xfffeefe4>
20080928:	11800317 	ldw	r6,12(r2)
2008092c:	99000117 	ldw	r4,4(r19)
20080930:	81800315 	stw	r6,12(r16)
20080934:	80800215 	stw	r2,8(r16)
20080938:	34000215 	stw	r16,8(r6)
2008093c:	14000315 	stw	r16,12(r2)
20080940:	003f2706 	br	200805e0 <__flash_rwdata_start+0xfffeecb0>
20080944:	88c00054 	ori	r3,r17,1
20080948:	80c00115 	stw	r3,4(r16)
2008094c:	8463883a 	add	r17,r16,r17
20080950:	34400515 	stw	r17,20(r6)
20080954:	34400415 	stw	r17,16(r6)
20080958:	10c00054 	ori	r3,r2,1
2008095c:	8a400315 	stw	r9,12(r17)
20080960:	8a400215 	stw	r9,8(r17)
20080964:	88c00115 	stw	r3,4(r17)
20080968:	88a3883a 	add	r17,r17,r2
2008096c:	88800015 	stw	r2,0(r17)
20080970:	9009883a 	mov	r4,r18
20080974:	008cd980 	call	2008cd98 <__malloc_unlock>
20080978:	80800204 	addi	r2,r16,8
2008097c:	003ecb06 	br	200804ac <__flash_rwdata_start+0xfffeeb7c>
20080980:	31000117 	ldw	r4,4(r6)
20080984:	003f1606 	br	200805e0 <__flash_rwdata_start+0xfffeecb0>
20080988:	63000044 	addi	r12,r12,1
2008098c:	608000cc 	andi	r2,r12,3
20080990:	5ac00204 	addi	r11,r11,8
20080994:	103f2a1e 	bne	r2,zero,20080640 <__flash_rwdata_start+0xfffeed10>
20080998:	00002106 	br	20080a20 <_malloc_r+0x628>
2008099c:	80800204 	addi	r2,r16,8
200809a0:	84000517 	ldw	r16,20(r16)
200809a4:	143eb31e 	bne	r2,r16,20080474 <__flash_rwdata_start+0xfffeeb44>
200809a8:	18c00084 	addi	r3,r3,2
200809ac:	003eec06 	br	20080560 <__flash_rwdata_start+0xfffeec30>
200809b0:	8085883a 	add	r2,r16,r2
200809b4:	10c00117 	ldw	r3,4(r2)
200809b8:	81000317 	ldw	r4,12(r16)
200809bc:	81400217 	ldw	r5,8(r16)
200809c0:	18c00054 	ori	r3,r3,1
200809c4:	10c00115 	stw	r3,4(r2)
200809c8:	29000315 	stw	r4,12(r5)
200809cc:	21400215 	stw	r5,8(r4)
200809d0:	9009883a 	mov	r4,r18
200809d4:	008cd980 	call	2008cd98 <__malloc_unlock>
200809d8:	80800204 	addi	r2,r16,8
200809dc:	003eb306 	br	200804ac <__flash_rwdata_start+0xfffeeb7c>
200809e0:	19c016c4 	addi	r7,r3,91
200809e4:	39cb883a 	add	r5,r7,r7
200809e8:	003ec706 	br	20080508 <__flash_rwdata_start+0xfffeebd8>
200809ec:	3804d1ba 	srli	r2,r7,6
200809f0:	11000e04 	addi	r4,r2,56
200809f4:	210b883a 	add	r5,r4,r4
200809f8:	003fbe06 	br	200808f4 <__flash_rwdata_start+0xfffeefc4>
200809fc:	84ff5d26 	beq	r16,r19,20080774 <__flash_rwdata_start+0xfffeee44>
20080a00:	9c000217 	ldw	r16,8(r19)
20080a04:	00bfff04 	movi	r2,-4
20080a08:	80c00117 	ldw	r3,4(r16)
20080a0c:	1886703a 	and	r3,r3,r2
20080a10:	003f9706 	br	20080870 <__flash_rwdata_start+0xfffeef40>
20080a14:	52800017 	ldw	r10,0(r10)
20080a18:	18ffffc4 	addi	r3,r3,-1
20080a1c:	50805c1e 	bne	r10,r2,20080b90 <_malloc_r+0x798>
20080a20:	190000cc 	andi	r4,r3,3
20080a24:	50bffe04 	addi	r2,r10,-8
20080a28:	203ffa1e 	bne	r4,zero,20080a14 <__flash_rwdata_start+0xfffef0e4>
20080a2c:	98800117 	ldw	r2,4(r19)
20080a30:	0146303a 	nor	r3,zero,r5
20080a34:	1884703a 	and	r2,r3,r2
20080a38:	98800115 	stw	r2,4(r19)
20080a3c:	294b883a 	add	r5,r5,r5
20080a40:	117f2e36 	bltu	r2,r5,200806fc <__flash_rwdata_start+0xfffeedcc>
20080a44:	283f2d26 	beq	r5,zero,200806fc <__flash_rwdata_start+0xfffeedcc>
20080a48:	1146703a 	and	r3,r2,r5
20080a4c:	1800521e 	bne	r3,zero,20080b98 <_malloc_r+0x7a0>
20080a50:	6007883a 	mov	r3,r12
20080a54:	294b883a 	add	r5,r5,r5
20080a58:	1148703a 	and	r4,r2,r5
20080a5c:	18c00104 	addi	r3,r3,4
20080a60:	203ffc26 	beq	r4,zero,20080a54 <__flash_rwdata_start+0xfffef124>
20080a64:	003ef006 	br	20080628 <__flash_rwdata_start+0xfffeecf8>
20080a68:	00805504 	movi	r2,340
20080a6c:	10c01336 	bltu	r2,r3,20080abc <_malloc_r+0x6c4>
20080a70:	8806d3fa 	srli	r3,r17,15
20080a74:	19c01dc4 	addi	r7,r3,119
20080a78:	39cb883a 	add	r5,r7,r7
20080a7c:	003ea206 	br	20080508 <__flash_rwdata_start+0xfffeebd8>
20080a80:	00c40004 	movi	r3,4096
20080a84:	003f4d06 	br	200807bc <__flash_rwdata_start+0xfffeee8c>
20080a88:	00800044 	movi	r2,1
20080a8c:	a0800115 	stw	r2,4(r20)
20080a90:	a021883a 	mov	r16,r20
20080a94:	0007883a 	mov	r3,zero
20080a98:	003f7506 	br	20080870 <__flash_rwdata_start+0xfffeef40>
20080a9c:	200bd0ba 	srai	r5,r4,2
20080aa0:	01800044 	movi	r6,1
20080aa4:	41000117 	ldw	r4,4(r8)
20080aa8:	314a983a 	sll	r5,r6,r5
20080aac:	100d883a 	mov	r6,r2
20080ab0:	2908b03a 	or	r4,r5,r4
20080ab4:	41000115 	stw	r4,4(r8)
20080ab8:	003f9d06 	br	20080930 <__flash_rwdata_start+0xfffef000>
20080abc:	00815504 	movi	r2,1364
20080ac0:	10c01336 	bltu	r2,r3,20080b10 <_malloc_r+0x718>
20080ac4:	8806d4ba 	srli	r3,r17,18
20080ac8:	19c01f04 	addi	r7,r3,124
20080acc:	39cb883a 	add	r5,r7,r7
20080ad0:	003e8d06 	br	20080508 <__flash_rwdata_start+0xfffeebd8>
20080ad4:	ad400404 	addi	r21,r21,16
20080ad8:	003f1d06 	br	20080750 <__flash_rwdata_start+0xfffeee20>
20080adc:	01001504 	movi	r4,84
20080ae0:	20801c36 	bltu	r4,r2,20080b54 <_malloc_r+0x75c>
20080ae4:	3804d33a 	srli	r2,r7,12
20080ae8:	11001b84 	addi	r4,r2,110
20080aec:	210b883a 	add	r5,r4,r4
20080af0:	003f8006 	br	200808f4 <__flash_rwdata_start+0xfffeefc4>
20080af4:	3083ffcc 	andi	r2,r6,4095
20080af8:	103f241e 	bne	r2,zero,2008078c <__flash_rwdata_start+0xfffeee5c>
20080afc:	99000217 	ldw	r4,8(r19)
20080b00:	ad85883a 	add	r2,r21,r22
20080b04:	10800054 	ori	r2,r2,1
20080b08:	20800115 	stw	r2,4(r4)
20080b0c:	003f4a06 	br	20080838 <__flash_rwdata_start+0xfffeef08>
20080b10:	01403f04 	movi	r5,252
20080b14:	01c01f84 	movi	r7,126
20080b18:	003e7b06 	br	20080508 <__flash_rwdata_start+0xfffeebd8>
20080b1c:	00c00044 	movi	r3,1
20080b20:	002b883a 	mov	r21,zero
20080b24:	003f3006 	br	200807e8 <__flash_rwdata_start+0xfffeeeb8>
20080b28:	00800034 	movhi	r2,0
20080b2c:	10885e04 	addi	r2,r2,8568
20080b30:	15000015 	stw	r20,0(r2)
20080b34:	003f1b06 	br	200807a4 <__flash_rwdata_start+0xfffeee74>
20080b38:	9009883a 	mov	r4,r18
20080b3c:	81400204 	addi	r5,r16,8
20080b40:	0084fb40 	call	20084fb4 <_free_r>
20080b44:	00800034 	movhi	r2,0
20080b48:	10888104 	addi	r2,r2,8708
20080b4c:	10c00017 	ldw	r3,0(r2)
20080b50:	003f3906 	br	20080838 <__flash_rwdata_start+0xfffeef08>
20080b54:	01005504 	movi	r4,340
20080b58:	20800436 	bltu	r4,r2,20080b6c <_malloc_r+0x774>
20080b5c:	3804d3fa 	srli	r2,r7,15
20080b60:	11001dc4 	addi	r4,r2,119
20080b64:	210b883a 	add	r5,r4,r4
20080b68:	003f6206 	br	200808f4 <__flash_rwdata_start+0xfffeefc4>
20080b6c:	01015504 	movi	r4,1364
20080b70:	20800436 	bltu	r4,r2,20080b84 <_malloc_r+0x78c>
20080b74:	3804d4ba 	srli	r2,r7,18
20080b78:	11001f04 	addi	r4,r2,124
20080b7c:	210b883a 	add	r5,r4,r4
20080b80:	003f5c06 	br	200808f4 <__flash_rwdata_start+0xfffeefc4>
20080b84:	01403f04 	movi	r5,252
20080b88:	01001f84 	movi	r4,126
20080b8c:	003f5906 	br	200808f4 <__flash_rwdata_start+0xfffeefc4>
20080b90:	98800117 	ldw	r2,4(r19)
20080b94:	003fa906 	br	20080a3c <__flash_rwdata_start+0xfffef10c>
20080b98:	6007883a 	mov	r3,r12
20080b9c:	003ea206 	br	20080628 <__flash_rwdata_start+0xfffeecf8>

20080ba0 <_printf_r>:
20080ba0:	defffd04 	addi	sp,sp,-12
20080ba4:	dfc00015 	stw	ra,0(sp)
20080ba8:	d9800115 	stw	r6,4(sp)
20080bac:	d9c00215 	stw	r7,8(sp)
20080bb0:	280d883a 	mov	r6,r5
20080bb4:	21400217 	ldw	r5,8(r4)
20080bb8:	d9c00104 	addi	r7,sp,4
20080bbc:	0080db00 	call	20080db0 <___vfprintf_internal_r>
20080bc0:	dfc00017 	ldw	ra,0(sp)
20080bc4:	dec00304 	addi	sp,sp,12
20080bc8:	f800283a 	ret

20080bcc <printf>:
20080bcc:	defffc04 	addi	sp,sp,-16
20080bd0:	dfc00015 	stw	ra,0(sp)
20080bd4:	d9400115 	stw	r5,4(sp)
20080bd8:	d9800215 	stw	r6,8(sp)
20080bdc:	d9c00315 	stw	r7,12(sp)
20080be0:	00800034 	movhi	r2,0
20080be4:	10886104 	addi	r2,r2,8580
20080be8:	10800017 	ldw	r2,0(r2)
20080bec:	200b883a 	mov	r5,r4
20080bf0:	d9800104 	addi	r6,sp,4
20080bf4:	11000217 	ldw	r4,8(r2)
20080bf8:	0082d000 	call	20082d00 <__vfprintf_internal>
20080bfc:	dfc00017 	ldw	ra,0(sp)
20080c00:	dec00404 	addi	sp,sp,16
20080c04:	f800283a 	ret

20080c08 <_puts_r>:
20080c08:	defff604 	addi	sp,sp,-40
20080c0c:	dc000715 	stw	r16,28(sp)
20080c10:	2021883a 	mov	r16,r4
20080c14:	2809883a 	mov	r4,r5
20080c18:	dc400815 	stw	r17,32(sp)
20080c1c:	dfc00915 	stw	ra,36(sp)
20080c20:	2823883a 	mov	r17,r5
20080c24:	0080d180 	call	20080d18 <strlen>
20080c28:	81400217 	ldw	r5,8(r16)
20080c2c:	11000044 	addi	r4,r2,1
20080c30:	d8800115 	stw	r2,4(sp)
20080c34:	00800034 	movhi	r2,0
20080c38:	2980030b 	ldhu	r6,12(r5)
20080c3c:	10801904 	addi	r2,r2,100
20080c40:	d8800215 	stw	r2,8(sp)
20080c44:	00800044 	movi	r2,1
20080c48:	d8800315 	stw	r2,12(sp)
20080c4c:	00800084 	movi	r2,2
20080c50:	d8800515 	stw	r2,20(sp)
20080c54:	dc400015 	stw	r17,0(sp)
20080c58:	d9000615 	stw	r4,24(sp)
20080c5c:	dec00415 	stw	sp,16(sp)
20080c60:	3088000c 	andi	r2,r6,8192
20080c64:	1000061e 	bne	r2,zero,20080c80 <_puts_r+0x78>
20080c68:	29001917 	ldw	r4,100(r5)
20080c6c:	00b7ffc4 	movi	r2,-8193
20080c70:	31880014 	ori	r6,r6,8192
20080c74:	2084703a 	and	r2,r4,r2
20080c78:	2980030d 	sth	r6,12(r5)
20080c7c:	28801915 	stw	r2,100(r5)
20080c80:	8009883a 	mov	r4,r16
20080c84:	d9800404 	addi	r6,sp,16
20080c88:	00852a40 	call	200852a4 <__sfvwrite_r>
20080c8c:	1000061e 	bne	r2,zero,20080ca8 <_puts_r+0xa0>
20080c90:	00800284 	movi	r2,10
20080c94:	dfc00917 	ldw	ra,36(sp)
20080c98:	dc400817 	ldw	r17,32(sp)
20080c9c:	dc000717 	ldw	r16,28(sp)
20080ca0:	dec00a04 	addi	sp,sp,40
20080ca4:	f800283a 	ret
20080ca8:	00bfffc4 	movi	r2,-1
20080cac:	003ff906 	br	20080c94 <__flash_rwdata_start+0xfffef364>

20080cb0 <puts>:
20080cb0:	00800034 	movhi	r2,0
20080cb4:	10886104 	addi	r2,r2,8580
20080cb8:	200b883a 	mov	r5,r4
20080cbc:	11000017 	ldw	r4,0(r2)
20080cc0:	0080c081 	jmpi	20080c08 <_puts_r>

20080cc4 <_sbrk_r>:
20080cc4:	defffd04 	addi	sp,sp,-12
20080cc8:	dc000015 	stw	r16,0(sp)
20080ccc:	04000034 	movhi	r16,0
20080cd0:	dc400115 	stw	r17,4(sp)
20080cd4:	84087404 	addi	r16,r16,8656
20080cd8:	2023883a 	mov	r17,r4
20080cdc:	2809883a 	mov	r4,r5
20080ce0:	dfc00215 	stw	ra,8(sp)
20080ce4:	80000015 	stw	zero,0(r16)
20080ce8:	008cf640 	call	2008cf64 <sbrk>
20080cec:	00ffffc4 	movi	r3,-1
20080cf0:	10c00526 	beq	r2,r3,20080d08 <_sbrk_r+0x44>
20080cf4:	dfc00217 	ldw	ra,8(sp)
20080cf8:	dc400117 	ldw	r17,4(sp)
20080cfc:	dc000017 	ldw	r16,0(sp)
20080d00:	dec00304 	addi	sp,sp,12
20080d04:	f800283a 	ret
20080d08:	80c00017 	ldw	r3,0(r16)
20080d0c:	183ff926 	beq	r3,zero,20080cf4 <__flash_rwdata_start+0xfffef3c4>
20080d10:	88c00015 	stw	r3,0(r17)
20080d14:	003ff706 	br	20080cf4 <__flash_rwdata_start+0xfffef3c4>

20080d18 <strlen>:
20080d18:	208000cc 	andi	r2,r4,3
20080d1c:	10002026 	beq	r2,zero,20080da0 <strlen+0x88>
20080d20:	20800007 	ldb	r2,0(r4)
20080d24:	10002026 	beq	r2,zero,20080da8 <strlen+0x90>
20080d28:	2005883a 	mov	r2,r4
20080d2c:	00000206 	br	20080d38 <strlen+0x20>
20080d30:	10c00007 	ldb	r3,0(r2)
20080d34:	18001826 	beq	r3,zero,20080d98 <strlen+0x80>
20080d38:	10800044 	addi	r2,r2,1
20080d3c:	10c000cc 	andi	r3,r2,3
20080d40:	183ffb1e 	bne	r3,zero,20080d30 <__flash_rwdata_start+0xfffef400>
20080d44:	10c00017 	ldw	r3,0(r2)
20080d48:	01ffbff4 	movhi	r7,65279
20080d4c:	39ffbfc4 	addi	r7,r7,-257
20080d50:	00ca303a 	nor	r5,zero,r3
20080d54:	01a02074 	movhi	r6,32897
20080d58:	19c7883a 	add	r3,r3,r7
20080d5c:	31a02004 	addi	r6,r6,-32640
20080d60:	1946703a 	and	r3,r3,r5
20080d64:	1986703a 	and	r3,r3,r6
20080d68:	1800091e 	bne	r3,zero,20080d90 <strlen+0x78>
20080d6c:	10800104 	addi	r2,r2,4
20080d70:	10c00017 	ldw	r3,0(r2)
20080d74:	19cb883a 	add	r5,r3,r7
20080d78:	00c6303a 	nor	r3,zero,r3
20080d7c:	28c6703a 	and	r3,r5,r3
20080d80:	1986703a 	and	r3,r3,r6
20080d84:	183ff926 	beq	r3,zero,20080d6c <__flash_rwdata_start+0xfffef43c>
20080d88:	00000106 	br	20080d90 <strlen+0x78>
20080d8c:	10800044 	addi	r2,r2,1
20080d90:	10c00007 	ldb	r3,0(r2)
20080d94:	183ffd1e 	bne	r3,zero,20080d8c <__flash_rwdata_start+0xfffef45c>
20080d98:	1105c83a 	sub	r2,r2,r4
20080d9c:	f800283a 	ret
20080da0:	2005883a 	mov	r2,r4
20080da4:	003fe706 	br	20080d44 <__flash_rwdata_start+0xfffef414>
20080da8:	0005883a 	mov	r2,zero
20080dac:	f800283a 	ret

20080db0 <___vfprintf_internal_r>:
20080db0:	deffb604 	addi	sp,sp,-296
20080db4:	dfc04915 	stw	ra,292(sp)
20080db8:	ddc04715 	stw	r23,284(sp)
20080dbc:	dd804615 	stw	r22,280(sp)
20080dc0:	282f883a 	mov	r23,r5
20080dc4:	202d883a 	mov	r22,r4
20080dc8:	d9802a15 	stw	r6,168(sp)
20080dcc:	d9c02d15 	stw	r7,180(sp)
20080dd0:	df004815 	stw	fp,288(sp)
20080dd4:	dd404515 	stw	r21,276(sp)
20080dd8:	dd004415 	stw	r20,272(sp)
20080ddc:	dcc04315 	stw	r19,268(sp)
20080de0:	dc804215 	stw	r18,264(sp)
20080de4:	dc404115 	stw	r17,260(sp)
20080de8:	dc004015 	stw	r16,256(sp)
20080dec:	00859980 	call	20085998 <_localeconv_r>
20080df0:	10800017 	ldw	r2,0(r2)
20080df4:	1009883a 	mov	r4,r2
20080df8:	d8803515 	stw	r2,212(sp)
20080dfc:	0080d180 	call	20080d18 <strlen>
20080e00:	d8803815 	stw	r2,224(sp)
20080e04:	b0000226 	beq	r22,zero,20080e10 <___vfprintf_internal_r+0x60>
20080e08:	b0800e17 	ldw	r2,56(r22)
20080e0c:	1000e126 	beq	r2,zero,20081194 <___vfprintf_internal_r+0x3e4>
20080e10:	b880030b 	ldhu	r2,12(r23)
20080e14:	10c8000c 	andi	r3,r2,8192
20080e18:	1800061e 	bne	r3,zero,20080e34 <___vfprintf_internal_r+0x84>
20080e1c:	b9001917 	ldw	r4,100(r23)
20080e20:	00f7ffc4 	movi	r3,-8193
20080e24:	10880014 	ori	r2,r2,8192
20080e28:	20c6703a 	and	r3,r4,r3
20080e2c:	b880030d 	sth	r2,12(r23)
20080e30:	b8c01915 	stw	r3,100(r23)
20080e34:	10c0020c 	andi	r3,r2,8
20080e38:	1800a726 	beq	r3,zero,200810d8 <___vfprintf_internal_r+0x328>
20080e3c:	b8c00417 	ldw	r3,16(r23)
20080e40:	1800a526 	beq	r3,zero,200810d8 <___vfprintf_internal_r+0x328>
20080e44:	1080068c 	andi	r2,r2,26
20080e48:	00c00284 	movi	r3,10
20080e4c:	10c0aa26 	beq	r2,r3,200810f8 <___vfprintf_internal_r+0x348>
20080e50:	dac01e04 	addi	r11,sp,120
20080e54:	db001dc4 	addi	r12,sp,119
20080e58:	d8800404 	addi	r2,sp,16
20080e5c:	05000034 	movhi	r20,0
20080e60:	dac02815 	stw	r11,160(sp)
20080e64:	5b17c83a 	sub	r11,r11,r12
20080e68:	a5002a84 	addi	r20,r20,170
20080e6c:	db002915 	stw	r12,164(sp)
20080e70:	d8801e15 	stw	r2,120(sp)
20080e74:	d8002015 	stw	zero,128(sp)
20080e78:	d8001f15 	stw	zero,124(sp)
20080e7c:	d8003315 	stw	zero,204(sp)
20080e80:	d8003715 	stw	zero,220(sp)
20080e84:	d8003915 	stw	zero,228(sp)
20080e88:	1011883a 	mov	r8,r2
20080e8c:	d8003b15 	stw	zero,236(sp)
20080e90:	d8003a15 	stw	zero,232(sp)
20080e94:	d8002f15 	stw	zero,188(sp)
20080e98:	dac03c15 	stw	r11,240(sp)
20080e9c:	db002a17 	ldw	r12,168(sp)
20080ea0:	60800007 	ldb	r2,0(r12)
20080ea4:	1000be26 	beq	r2,zero,200811a0 <___vfprintf_internal_r+0x3f0>
20080ea8:	00c00944 	movi	r3,37
20080eac:	10c0bc26 	beq	r2,r3,200811a0 <___vfprintf_internal_r+0x3f0>
20080eb0:	6021883a 	mov	r16,r12
20080eb4:	00000106 	br	20080ebc <___vfprintf_internal_r+0x10c>
20080eb8:	10c08426 	beq	r2,r3,200810cc <___vfprintf_internal_r+0x31c>
20080ebc:	84000044 	addi	r16,r16,1
20080ec0:	80800007 	ldb	r2,0(r16)
20080ec4:	103ffc1e 	bne	r2,zero,20080eb8 <__flash_rwdata_start+0xfffef588>
20080ec8:	dac02a17 	ldw	r11,168(sp)
20080ecc:	82e3c83a 	sub	r17,r16,r11
20080ed0:	88000f26 	beq	r17,zero,20080f10 <___vfprintf_internal_r+0x160>
20080ed4:	d8c02017 	ldw	r3,128(sp)
20080ed8:	d8801f17 	ldw	r2,124(sp)
20080edc:	dac02a17 	ldw	r11,168(sp)
20080ee0:	1c47883a 	add	r3,r3,r17
20080ee4:	10800044 	addi	r2,r2,1
20080ee8:	d8c02015 	stw	r3,128(sp)
20080eec:	42c00015 	stw	r11,0(r8)
20080ef0:	44400115 	stw	r17,4(r8)
20080ef4:	d8801f15 	stw	r2,124(sp)
20080ef8:	00c001c4 	movi	r3,7
20080efc:	18809316 	blt	r3,r2,2008114c <___vfprintf_internal_r+0x39c>
20080f00:	42000204 	addi	r8,r8,8
20080f04:	db002f17 	ldw	r12,188(sp)
20080f08:	6459883a 	add	r12,r12,r17
20080f0c:	db002f15 	stw	r12,188(sp)
20080f10:	80800007 	ldb	r2,0(r16)
20080f14:	10009426 	beq	r2,zero,20081168 <___vfprintf_internal_r+0x3b8>
20080f18:	80800044 	addi	r2,r16,1
20080f1c:	84000047 	ldb	r16,1(r16)
20080f20:	d8002785 	stb	zero,158(sp)
20080f24:	000d883a 	mov	r6,zero
20080f28:	027fffc4 	movi	r9,-1
20080f2c:	d8002e15 	stw	zero,184(sp)
20080f30:	0023883a 	mov	r17,zero
20080f34:	01001604 	movi	r4,88
20080f38:	01400244 	movi	r5,9
20080f3c:	02800a84 	movi	r10,42
20080f40:	01c01b04 	movi	r7,108
20080f44:	10c00044 	addi	r3,r2,1
20080f48:	80bff804 	addi	r2,r16,-32
20080f4c:	2082cd36 	bltu	r4,r2,20081a84 <___vfprintf_internal_r+0xcd4>
20080f50:	100490ba 	slli	r2,r2,2
20080f54:	02c80234 	movhi	r11,8200
20080f58:	5ac3da04 	addi	r11,r11,3944
20080f5c:	12c5883a 	add	r2,r2,r11
20080f60:	10800017 	ldw	r2,0(r2)
20080f64:	1000683a 	jmp	r2
20080f68:	2008189c 	xori	zero,r4,8290
20080f6c:	20081a84 	addi	zero,r4,8298
20080f70:	20081a84 	addi	zero,r4,8298
20080f74:	200819ec 	andhi	zero,r4,8295
20080f78:	20081a84 	addi	zero,r4,8298
20080f7c:	20081a84 	addi	zero,r4,8298
20080f80:	20081a84 	addi	zero,r4,8298
20080f84:	20081a84 	addi	zero,r4,8298
20080f88:	20081a84 	addi	zero,r4,8298
20080f8c:	20081a84 	addi	zero,r4,8298
20080f90:	200818bc 	xorhi	zero,r4,8290
20080f94:	200818e8 	cmpgeui	zero,r4,8291
20080f98:	20081a84 	addi	zero,r4,8298
20080f9c:	200811a8 	cmpgeui	zero,r4,8262
20080fa0:	200811b8 	rdprs	zero,r4,8262
20080fa4:	20081a84 	addi	zero,r4,8298
20080fa8:	200811f8 	rdprs	zero,r4,8263
20080fac:	20081208 	cmpgei	zero,r4,8264
20080fb0:	20081208 	cmpgei	zero,r4,8264
20080fb4:	20081208 	cmpgei	zero,r4,8264
20080fb8:	20081208 	cmpgei	zero,r4,8264
20080fbc:	20081208 	cmpgei	zero,r4,8264
20080fc0:	20081208 	cmpgei	zero,r4,8264
20080fc4:	20081208 	cmpgei	zero,r4,8264
20080fc8:	20081208 	cmpgei	zero,r4,8264
20080fcc:	20081208 	cmpgei	zero,r4,8264
20080fd0:	20081a84 	addi	zero,r4,8298
20080fd4:	20081a84 	addi	zero,r4,8298
20080fd8:	20081a84 	addi	zero,r4,8298
20080fdc:	20081a84 	addi	zero,r4,8298
20080fe0:	20081a84 	addi	zero,r4,8298
20080fe4:	20081a84 	addi	zero,r4,8298
20080fe8:	20081a84 	addi	zero,r4,8298
20080fec:	20081a84 	addi	zero,r4,8298
20080ff0:	20081a84 	addi	zero,r4,8298
20080ff4:	20081a84 	addi	zero,r4,8298
20080ff8:	2008123c 	xorhi	zero,r4,8264
20080ffc:	200816ac 	andhi	zero,r4,8282
20081000:	20081a84 	addi	zero,r4,8298
20081004:	200816ac 	andhi	zero,r4,8282
20081008:	20081a84 	addi	zero,r4,8298
2008100c:	20081a84 	addi	zero,r4,8298
20081010:	20081a84 	addi	zero,r4,8298
20081014:	20081a84 	addi	zero,r4,8298
20081018:	20081798 	cmpnei	zero,r4,8286
2008101c:	20081a84 	addi	zero,r4,8298
20081020:	20081a84 	addi	zero,r4,8298
20081024:	20081640 	call	22008164 <__flash_rwdata_start+0x1f76834>
20081028:	20081a84 	addi	zero,r4,8298
2008102c:	20081a84 	addi	zero,r4,8298
20081030:	20081a84 	addi	zero,r4,8298
20081034:	20081a84 	addi	zero,r4,8298
20081038:	20081a84 	addi	zero,r4,8298
2008103c:	2008167c 	xorhi	zero,r4,8281
20081040:	20081a84 	addi	zero,r4,8298
20081044:	20081a84 	addi	zero,r4,8298
20081048:	20081840 	call	22008184 <__flash_rwdata_start+0x1f76854>
2008104c:	20081a84 	addi	zero,r4,8298
20081050:	20081a84 	addi	zero,r4,8298
20081054:	20081a84 	addi	zero,r4,8298
20081058:	20081a84 	addi	zero,r4,8298
2008105c:	20081a84 	addi	zero,r4,8298
20081060:	20081a84 	addi	zero,r4,8298
20081064:	20081a84 	addi	zero,r4,8298
20081068:	20081a84 	addi	zero,r4,8298
2008106c:	20081a84 	addi	zero,r4,8298
20081070:	20081a84 	addi	zero,r4,8298
20081074:	200818f8 	rdprs	zero,r4,8291
20081078:	200817a8 	cmpgeui	zero,r4,8286
2008107c:	200816ac 	andhi	zero,r4,8282
20081080:	200816ac 	andhi	zero,r4,8282
20081084:	200816ac 	andhi	zero,r4,8282
20081088:	200817e8 	cmpgeui	zero,r4,8287
2008108c:	200817a8 	cmpgeui	zero,r4,8286
20081090:	20081a84 	addi	zero,r4,8298
20081094:	20081a84 	addi	zero,r4,8298
20081098:	200817f8 	rdprs	zero,r4,8287
2008109c:	20081a84 	addi	zero,r4,8298
200810a0:	2008180c 	andi	zero,r4,8288
200810a4:	20081a48 	cmpgei	zero,r4,8297
200810a8:	20081750 	cmplti	zero,r4,8285
200810ac:	200819fc 	xorhi	zero,r4,8295
200810b0:	20081a84 	addi	zero,r4,8298
200810b4:	20081938 	rdprs	zero,r4,8292
200810b8:	20081a84 	addi	zero,r4,8298
200810bc:	20081a0c 	andi	zero,r4,8296
200810c0:	20081a84 	addi	zero,r4,8298
200810c4:	20081a84 	addi	zero,r4,8298
200810c8:	200819ac 	andhi	zero,r4,8294
200810cc:	db002a17 	ldw	r12,168(sp)
200810d0:	8323c83a 	sub	r17,r16,r12
200810d4:	003f7e06 	br	20080ed0 <__flash_rwdata_start+0xfffef5a0>
200810d8:	b009883a 	mov	r4,r22
200810dc:	b80b883a 	mov	r5,r23
200810e0:	0082de00 	call	20082de0 <__swsetup_r>
200810e4:	10000c1e 	bne	r2,zero,20081118 <___vfprintf_internal_r+0x368>
200810e8:	b880030b 	ldhu	r2,12(r23)
200810ec:	00c00284 	movi	r3,10
200810f0:	1080068c 	andi	r2,r2,26
200810f4:	10ff561e 	bne	r2,r3,20080e50 <__flash_rwdata_start+0xfffef520>
200810f8:	b880038f 	ldh	r2,14(r23)
200810fc:	103f5416 	blt	r2,zero,20080e50 <__flash_rwdata_start+0xfffef520>
20081100:	d9802a17 	ldw	r6,168(sp)
20081104:	d9c02d17 	ldw	r7,180(sp)
20081108:	b009883a 	mov	r4,r22
2008110c:	b80b883a 	mov	r5,r23
20081110:	0082d240 	call	20082d24 <__sbprintf>
20081114:	00000106 	br	2008111c <___vfprintf_internal_r+0x36c>
20081118:	00bfffc4 	movi	r2,-1
2008111c:	dfc04917 	ldw	ra,292(sp)
20081120:	df004817 	ldw	fp,288(sp)
20081124:	ddc04717 	ldw	r23,284(sp)
20081128:	dd804617 	ldw	r22,280(sp)
2008112c:	dd404517 	ldw	r21,276(sp)
20081130:	dd004417 	ldw	r20,272(sp)
20081134:	dcc04317 	ldw	r19,268(sp)
20081138:	dc804217 	ldw	r18,264(sp)
2008113c:	dc404117 	ldw	r17,260(sp)
20081140:	dc004017 	ldw	r16,256(sp)
20081144:	dec04a04 	addi	sp,sp,296
20081148:	f800283a 	ret
2008114c:	b009883a 	mov	r4,r22
20081150:	b80b883a 	mov	r5,r23
20081154:	d9801e04 	addi	r6,sp,120
20081158:	008787c0 	call	2008787c <__sprint_r>
2008115c:	1000081e 	bne	r2,zero,20081180 <___vfprintf_internal_r+0x3d0>
20081160:	da000404 	addi	r8,sp,16
20081164:	003f6706 	br	20080f04 <__flash_rwdata_start+0xfffef5d4>
20081168:	d8802017 	ldw	r2,128(sp)
2008116c:	10000426 	beq	r2,zero,20081180 <___vfprintf_internal_r+0x3d0>
20081170:	b009883a 	mov	r4,r22
20081174:	b80b883a 	mov	r5,r23
20081178:	d9801e04 	addi	r6,sp,120
2008117c:	008787c0 	call	2008787c <__sprint_r>
20081180:	b880030b 	ldhu	r2,12(r23)
20081184:	1080100c 	andi	r2,r2,64
20081188:	103fe31e 	bne	r2,zero,20081118 <__flash_rwdata_start+0xfffef7e8>
2008118c:	d8802f17 	ldw	r2,188(sp)
20081190:	003fe206 	br	2008111c <__flash_rwdata_start+0xfffef7ec>
20081194:	b009883a 	mov	r4,r22
20081198:	0084e400 	call	20084e40 <__sinit>
2008119c:	003f1c06 	br	20080e10 <__flash_rwdata_start+0xfffef4e0>
200811a0:	dc002a17 	ldw	r16,168(sp)
200811a4:	003f5a06 	br	20080f10 <__flash_rwdata_start+0xfffef5e0>
200811a8:	1805883a 	mov	r2,r3
200811ac:	8c400114 	ori	r17,r17,4
200811b0:	1c000007 	ldb	r16,0(r3)
200811b4:	003f6306 	br	20080f44 <__flash_rwdata_start+0xfffef614>
200811b8:	1c000007 	ldb	r16,0(r3)
200811bc:	18800044 	addi	r2,r3,1
200811c0:	8286ad26 	beq	r16,r10,20082c78 <___vfprintf_internal_r+0x1ec8>
200811c4:	82fff404 	addi	r11,r16,-48
200811c8:	1007883a 	mov	r3,r2
200811cc:	0013883a 	mov	r9,zero
200811d0:	2aff5d36 	bltu	r5,r11,20080f48 <__flash_rwdata_start+0xfffef618>
200811d4:	1c000007 	ldb	r16,0(r3)
200811d8:	4a4002a4 	muli	r9,r9,10
200811dc:	18c00044 	addi	r3,r3,1
200811e0:	5a53883a 	add	r9,r11,r9
200811e4:	82fff404 	addi	r11,r16,-48
200811e8:	2afffa2e 	bgeu	r5,r11,200811d4 <__flash_rwdata_start+0xfffef8a4>
200811ec:	483f560e 	bge	r9,zero,20080f48 <__flash_rwdata_start+0xfffef618>
200811f0:	027fffc4 	movi	r9,-1
200811f4:	003f5406 	br	20080f48 <__flash_rwdata_start+0xfffef618>
200811f8:	8c402014 	ori	r17,r17,128
200811fc:	1805883a 	mov	r2,r3
20081200:	1c000007 	ldb	r16,0(r3)
20081204:	003f4f06 	br	20080f44 <__flash_rwdata_start+0xfffef614>
20081208:	1805883a 	mov	r2,r3
2008120c:	d8002e15 	stw	zero,184(sp)
20081210:	82fff404 	addi	r11,r16,-48
20081214:	0019883a 	mov	r12,zero
20081218:	14000007 	ldb	r16,0(r2)
2008121c:	630002a4 	muli	r12,r12,10
20081220:	18c00044 	addi	r3,r3,1
20081224:	1805883a 	mov	r2,r3
20081228:	62d9883a 	add	r12,r12,r11
2008122c:	82fff404 	addi	r11,r16,-48
20081230:	2afff92e 	bgeu	r5,r11,20081218 <__flash_rwdata_start+0xfffef8e8>
20081234:	db002e15 	stw	r12,184(sp)
20081238:	003f4306 	br	20080f48 <__flash_rwdata_start+0xfffef618>
2008123c:	8c400414 	ori	r17,r17,16
20081240:	d8c02a15 	stw	r3,168(sp)
20081244:	d9802785 	stb	r6,158(sp)
20081248:	8880080c 	andi	r2,r17,32
2008124c:	d8c02d17 	ldw	r3,180(sp)
20081250:	10015a26 	beq	r2,zero,200817bc <___vfprintf_internal_r+0xa0c>
20081254:	db002d17 	ldw	r12,180(sp)
20081258:	18800117 	ldw	r2,4(r3)
2008125c:	1cc00017 	ldw	r19,0(r3)
20081260:	63000204 	addi	r12,r12,8
20081264:	db002d15 	stw	r12,180(sp)
20081268:	1039883a 	mov	fp,r2
2008126c:	10044516 	blt	r2,zero,20082384 <___vfprintf_internal_r+0x15d4>
20081270:	dd402783 	ldbu	r21,158(sp)
20081274:	da403215 	stw	r9,200(sp)
20081278:	00800044 	movi	r2,1
2008127c:	9f06b03a 	or	r3,r19,fp
20081280:	48000216 	blt	r9,zero,2008128c <___vfprintf_internal_r+0x4dc>
20081284:	013fdfc4 	movi	r4,-129
20081288:	8922703a 	and	r17,r17,r4
2008128c:	1802071e 	bne	r3,zero,20081aac <___vfprintf_internal_r+0xcfc>
20081290:	4802fa26 	beq	r9,zero,20081e7c <___vfprintf_internal_r+0x10cc>
20081294:	10803fcc 	andi	r2,r2,255
20081298:	00c00044 	movi	r3,1
2008129c:	10c22926 	beq	r2,r3,20081b44 <___vfprintf_internal_r+0xd94>
200812a0:	00c00084 	movi	r3,2
200812a4:	10c31726 	beq	r2,r3,20081f04 <___vfprintf_internal_r+0x1154>
200812a8:	d8c01e04 	addi	r3,sp,120
200812ac:	9808d0fa 	srli	r4,r19,3
200812b0:	e00a977a 	slli	r5,fp,29
200812b4:	e038d0fa 	srli	fp,fp,3
200812b8:	9cc001cc 	andi	r19,r19,7
200812bc:	98800c04 	addi	r2,r19,48
200812c0:	18ffffc4 	addi	r3,r3,-1
200812c4:	2926b03a 	or	r19,r5,r4
200812c8:	18800005 	stb	r2,0(r3)
200812cc:	9f08b03a 	or	r4,r19,fp
200812d0:	203ff61e 	bne	r4,zero,200812ac <__flash_rwdata_start+0xfffef97c>
200812d4:	8900004c 	andi	r4,r17,1
200812d8:	d8c03115 	stw	r3,196(sp)
200812dc:	2003931e 	bne	r4,zero,2008212c <___vfprintf_internal_r+0x137c>
200812e0:	dac02817 	ldw	r11,160(sp)
200812e4:	58e5c83a 	sub	r18,r11,r3
200812e8:	9005883a 	mov	r2,r18
200812ec:	9240010e 	bge	r18,r9,200812f4 <___vfprintf_internal_r+0x544>
200812f0:	4805883a 	mov	r2,r9
200812f4:	d8802b15 	stw	r2,172(sp)
200812f8:	d8003415 	stw	zero,208(sp)
200812fc:	a8803fcc 	andi	r2,r21,255
20081300:	1080201c 	xori	r2,r2,128
20081304:	10bfe004 	addi	r2,r2,-128
20081308:	10000326 	beq	r2,zero,20081318 <___vfprintf_internal_r+0x568>
2008130c:	db002b17 	ldw	r12,172(sp)
20081310:	63000044 	addi	r12,r12,1
20081314:	db002b15 	stw	r12,172(sp)
20081318:	88c0008c 	andi	r3,r17,2
2008131c:	d8c02c15 	stw	r3,176(sp)
20081320:	18000326 	beq	r3,zero,20081330 <___vfprintf_internal_r+0x580>
20081324:	dac02b17 	ldw	r11,172(sp)
20081328:	5ac00084 	addi	r11,r11,2
2008132c:	dac02b15 	stw	r11,172(sp)
20081330:	8b00210c 	andi	r12,r17,132
20081334:	db003015 	stw	r12,192(sp)
20081338:	6001da1e 	bne	r12,zero,20081aa4 <___vfprintf_internal_r+0xcf4>
2008133c:	dac02e17 	ldw	r11,184(sp)
20081340:	db002b17 	ldw	r12,172(sp)
20081344:	5b39c83a 	sub	fp,r11,r12
20081348:	0701d60e 	bge	zero,fp,20081aa4 <___vfprintf_internal_r+0xcf4>
2008134c:	02400404 	movi	r9,16
20081350:	d8c02017 	ldw	r3,128(sp)
20081354:	d8801f17 	ldw	r2,124(sp)
20081358:	4f053c0e 	bge	r9,fp,2008284c <___vfprintf_internal_r+0x1a9c>
2008135c:	01400034 	movhi	r5,0
20081360:	29402e84 	addi	r5,r5,186
20081364:	d9403615 	stw	r5,216(sp)
20081368:	482b883a 	mov	r21,r9
2008136c:	04c001c4 	movi	r19,7
20081370:	00000306 	br	20081380 <___vfprintf_internal_r+0x5d0>
20081374:	e73ffc04 	addi	fp,fp,-16
20081378:	42000204 	addi	r8,r8,8
2008137c:	af00130e 	bge	r21,fp,200813cc <___vfprintf_internal_r+0x61c>
20081380:	02c00034 	movhi	r11,0
20081384:	18c00404 	addi	r3,r3,16
20081388:	10800044 	addi	r2,r2,1
2008138c:	5ac02e84 	addi	r11,r11,186
20081390:	42c00015 	stw	r11,0(r8)
20081394:	45400115 	stw	r21,4(r8)
20081398:	d8c02015 	stw	r3,128(sp)
2008139c:	d8801f15 	stw	r2,124(sp)
200813a0:	98bff40e 	bge	r19,r2,20081374 <__flash_rwdata_start+0xfffefa44>
200813a4:	b009883a 	mov	r4,r22
200813a8:	b80b883a 	mov	r5,r23
200813ac:	d9801e04 	addi	r6,sp,120
200813b0:	008787c0 	call	2008787c <__sprint_r>
200813b4:	103f721e 	bne	r2,zero,20081180 <__flash_rwdata_start+0xfffef850>
200813b8:	e73ffc04 	addi	fp,fp,-16
200813bc:	d8c02017 	ldw	r3,128(sp)
200813c0:	d8801f17 	ldw	r2,124(sp)
200813c4:	da000404 	addi	r8,sp,16
200813c8:	af3fed16 	blt	r21,fp,20081380 <__flash_rwdata_start+0xfffefa50>
200813cc:	db003617 	ldw	r12,216(sp)
200813d0:	e0c7883a 	add	r3,fp,r3
200813d4:	10800044 	addi	r2,r2,1
200813d8:	43000015 	stw	r12,0(r8)
200813dc:	47000115 	stw	fp,4(r8)
200813e0:	d8c02015 	stw	r3,128(sp)
200813e4:	d8801f15 	stw	r2,124(sp)
200813e8:	010001c4 	movi	r4,7
200813ec:	20830e16 	blt	r4,r2,20082028 <___vfprintf_internal_r+0x1278>
200813f0:	d8802787 	ldb	r2,158(sp)
200813f4:	42000204 	addi	r8,r8,8
200813f8:	10000c26 	beq	r2,zero,2008142c <___vfprintf_internal_r+0x67c>
200813fc:	d8801f17 	ldw	r2,124(sp)
20081400:	d9002784 	addi	r4,sp,158
20081404:	18c00044 	addi	r3,r3,1
20081408:	10800044 	addi	r2,r2,1
2008140c:	41000015 	stw	r4,0(r8)
20081410:	01000044 	movi	r4,1
20081414:	41000115 	stw	r4,4(r8)
20081418:	d8c02015 	stw	r3,128(sp)
2008141c:	d8801f15 	stw	r2,124(sp)
20081420:	010001c4 	movi	r4,7
20081424:	2082a716 	blt	r4,r2,20081ec4 <___vfprintf_internal_r+0x1114>
20081428:	42000204 	addi	r8,r8,8
2008142c:	dac02c17 	ldw	r11,176(sp)
20081430:	58000c26 	beq	r11,zero,20081464 <___vfprintf_internal_r+0x6b4>
20081434:	d8801f17 	ldw	r2,124(sp)
20081438:	d9002704 	addi	r4,sp,156
2008143c:	18c00084 	addi	r3,r3,2
20081440:	10800044 	addi	r2,r2,1
20081444:	41000015 	stw	r4,0(r8)
20081448:	01000084 	movi	r4,2
2008144c:	41000115 	stw	r4,4(r8)
20081450:	d8c02015 	stw	r3,128(sp)
20081454:	d8801f15 	stw	r2,124(sp)
20081458:	010001c4 	movi	r4,7
2008145c:	2082a116 	blt	r4,r2,20081ee4 <___vfprintf_internal_r+0x1134>
20081460:	42000204 	addi	r8,r8,8
20081464:	db003017 	ldw	r12,192(sp)
20081468:	00802004 	movi	r2,128
2008146c:	60820326 	beq	r12,r2,20081c7c <___vfprintf_internal_r+0xecc>
20081470:	db003217 	ldw	r12,200(sp)
20081474:	64abc83a 	sub	r21,r12,r18
20081478:	0540260e 	bge	zero,r21,20081514 <___vfprintf_internal_r+0x764>
2008147c:	07000404 	movi	fp,16
20081480:	d8801f17 	ldw	r2,124(sp)
20081484:	e544570e 	bge	fp,r21,200825e4 <___vfprintf_internal_r+0x1834>
20081488:	01400034 	movhi	r5,0
2008148c:	29402a84 	addi	r5,r5,170
20081490:	d9402c15 	stw	r5,176(sp)
20081494:	04c001c4 	movi	r19,7
20081498:	00000306 	br	200814a8 <___vfprintf_internal_r+0x6f8>
2008149c:	ad7ffc04 	addi	r21,r21,-16
200814a0:	42000204 	addi	r8,r8,8
200814a4:	e540110e 	bge	fp,r21,200814ec <___vfprintf_internal_r+0x73c>
200814a8:	18c00404 	addi	r3,r3,16
200814ac:	10800044 	addi	r2,r2,1
200814b0:	45000015 	stw	r20,0(r8)
200814b4:	47000115 	stw	fp,4(r8)
200814b8:	d8c02015 	stw	r3,128(sp)
200814bc:	d8801f15 	stw	r2,124(sp)
200814c0:	98bff60e 	bge	r19,r2,2008149c <__flash_rwdata_start+0xfffefb6c>
200814c4:	b009883a 	mov	r4,r22
200814c8:	b80b883a 	mov	r5,r23
200814cc:	d9801e04 	addi	r6,sp,120
200814d0:	008787c0 	call	2008787c <__sprint_r>
200814d4:	103f2a1e 	bne	r2,zero,20081180 <__flash_rwdata_start+0xfffef850>
200814d8:	ad7ffc04 	addi	r21,r21,-16
200814dc:	d8c02017 	ldw	r3,128(sp)
200814e0:	d8801f17 	ldw	r2,124(sp)
200814e4:	da000404 	addi	r8,sp,16
200814e8:	e57fef16 	blt	fp,r21,200814a8 <__flash_rwdata_start+0xfffefb78>
200814ec:	dac02c17 	ldw	r11,176(sp)
200814f0:	1d47883a 	add	r3,r3,r21
200814f4:	10800044 	addi	r2,r2,1
200814f8:	42c00015 	stw	r11,0(r8)
200814fc:	45400115 	stw	r21,4(r8)
20081500:	d8c02015 	stw	r3,128(sp)
20081504:	d8801f15 	stw	r2,124(sp)
20081508:	010001c4 	movi	r4,7
2008150c:	20826516 	blt	r4,r2,20081ea4 <___vfprintf_internal_r+0x10f4>
20081510:	42000204 	addi	r8,r8,8
20081514:	8880400c 	andi	r2,r17,256
20081518:	1001901e 	bne	r2,zero,20081b5c <___vfprintf_internal_r+0xdac>
2008151c:	d8801f17 	ldw	r2,124(sp)
20081520:	db003117 	ldw	r12,196(sp)
20081524:	1c87883a 	add	r3,r3,r18
20081528:	10800044 	addi	r2,r2,1
2008152c:	43000015 	stw	r12,0(r8)
20081530:	44800115 	stw	r18,4(r8)
20081534:	d8c02015 	stw	r3,128(sp)
20081538:	d8801f15 	stw	r2,124(sp)
2008153c:	010001c4 	movi	r4,7
20081540:	20824016 	blt	r4,r2,20081e44 <___vfprintf_internal_r+0x1094>
20081544:	42000204 	addi	r8,r8,8
20081548:	8c40010c 	andi	r17,r17,4
2008154c:	88003126 	beq	r17,zero,20081614 <___vfprintf_internal_r+0x864>
20081550:	db002e17 	ldw	r12,184(sp)
20081554:	dac02b17 	ldw	r11,172(sp)
20081558:	62e1c83a 	sub	r16,r12,r11
2008155c:	04002d0e 	bge	zero,r16,20081614 <___vfprintf_internal_r+0x864>
20081560:	04400404 	movi	r17,16
20081564:	d8801f17 	ldw	r2,124(sp)
20081568:	8c05150e 	bge	r17,r16,200829c0 <___vfprintf_internal_r+0x1c10>
2008156c:	01000034 	movhi	r4,0
20081570:	21002e84 	addi	r4,r4,186
20081574:	d9003615 	stw	r4,216(sp)
20081578:	048001c4 	movi	r18,7
2008157c:	00000306 	br	2008158c <___vfprintf_internal_r+0x7dc>
20081580:	843ffc04 	addi	r16,r16,-16
20081584:	42000204 	addi	r8,r8,8
20081588:	8c00130e 	bge	r17,r16,200815d8 <___vfprintf_internal_r+0x828>
2008158c:	01400034 	movhi	r5,0
20081590:	18c00404 	addi	r3,r3,16
20081594:	10800044 	addi	r2,r2,1
20081598:	29402e84 	addi	r5,r5,186
2008159c:	41400015 	stw	r5,0(r8)
200815a0:	44400115 	stw	r17,4(r8)
200815a4:	d8c02015 	stw	r3,128(sp)
200815a8:	d8801f15 	stw	r2,124(sp)
200815ac:	90bff40e 	bge	r18,r2,20081580 <__flash_rwdata_start+0xfffefc50>
200815b0:	b009883a 	mov	r4,r22
200815b4:	b80b883a 	mov	r5,r23
200815b8:	d9801e04 	addi	r6,sp,120
200815bc:	008787c0 	call	2008787c <__sprint_r>
200815c0:	103eef1e 	bne	r2,zero,20081180 <__flash_rwdata_start+0xfffef850>
200815c4:	843ffc04 	addi	r16,r16,-16
200815c8:	d8c02017 	ldw	r3,128(sp)
200815cc:	d8801f17 	ldw	r2,124(sp)
200815d0:	da000404 	addi	r8,sp,16
200815d4:	8c3fed16 	blt	r17,r16,2008158c <__flash_rwdata_start+0xfffefc5c>
200815d8:	dac03617 	ldw	r11,216(sp)
200815dc:	1c07883a 	add	r3,r3,r16
200815e0:	10800044 	addi	r2,r2,1
200815e4:	42c00015 	stw	r11,0(r8)
200815e8:	44000115 	stw	r16,4(r8)
200815ec:	d8c02015 	stw	r3,128(sp)
200815f0:	d8801f15 	stw	r2,124(sp)
200815f4:	010001c4 	movi	r4,7
200815f8:	2080060e 	bge	r4,r2,20081614 <___vfprintf_internal_r+0x864>
200815fc:	b009883a 	mov	r4,r22
20081600:	b80b883a 	mov	r5,r23
20081604:	d9801e04 	addi	r6,sp,120
20081608:	008787c0 	call	2008787c <__sprint_r>
2008160c:	103edc1e 	bne	r2,zero,20081180 <__flash_rwdata_start+0xfffef850>
20081610:	d8c02017 	ldw	r3,128(sp)
20081614:	d8802b17 	ldw	r2,172(sp)
20081618:	db002e17 	ldw	r12,184(sp)
2008161c:	1300010e 	bge	r2,r12,20081624 <___vfprintf_internal_r+0x874>
20081620:	6005883a 	mov	r2,r12
20081624:	dac02f17 	ldw	r11,188(sp)
20081628:	5897883a 	add	r11,r11,r2
2008162c:	dac02f15 	stw	r11,188(sp)
20081630:	18020c1e 	bne	r3,zero,20081e64 <___vfprintf_internal_r+0x10b4>
20081634:	d8001f15 	stw	zero,124(sp)
20081638:	da000404 	addi	r8,sp,16
2008163c:	003e1706 	br	20080e9c <__flash_rwdata_start+0xfffef56c>
20081640:	8c400414 	ori	r17,r17,16
20081644:	d8c02a15 	stw	r3,168(sp)
20081648:	8880080c 	andi	r2,r17,32
2008164c:	10010126 	beq	r2,zero,20081a54 <___vfprintf_internal_r+0xca4>
20081650:	db002d17 	ldw	r12,180(sp)
20081654:	0005883a 	mov	r2,zero
20081658:	64c00017 	ldw	r19,0(r12)
2008165c:	67000117 	ldw	fp,4(r12)
20081660:	63000204 	addi	r12,r12,8
20081664:	db002d15 	stw	r12,180(sp)
20081668:	9f06b03a 	or	r3,r19,fp
2008166c:	d8002785 	stb	zero,158(sp)
20081670:	da403215 	stw	r9,200(sp)
20081674:	002b883a 	mov	r21,zero
20081678:	003f0106 	br	20081280 <__flash_rwdata_start+0xfffef950>
2008167c:	8c400414 	ori	r17,r17,16
20081680:	d8c02a15 	stw	r3,168(sp)
20081684:	8880080c 	andi	r2,r17,32
20081688:	1000e326 	beq	r2,zero,20081a18 <___vfprintf_internal_r+0xc68>
2008168c:	dac02d17 	ldw	r11,180(sp)
20081690:	00800044 	movi	r2,1
20081694:	5cc00017 	ldw	r19,0(r11)
20081698:	5f000117 	ldw	fp,4(r11)
2008169c:	5ac00204 	addi	r11,r11,8
200816a0:	dac02d15 	stw	r11,180(sp)
200816a4:	9f06b03a 	or	r3,r19,fp
200816a8:	003ff006 	br	2008166c <__flash_rwdata_start+0xfffefd3c>
200816ac:	db002d17 	ldw	r12,180(sp)
200816b0:	dac02d17 	ldw	r11,180(sp)
200816b4:	d8c02a15 	stw	r3,168(sp)
200816b8:	63000017 	ldw	r12,0(r12)
200816bc:	5ac00117 	ldw	r11,4(r11)
200816c0:	d9802785 	stb	r6,158(sp)
200816c4:	6009883a 	mov	r4,r12
200816c8:	580b883a 	mov	r5,r11
200816cc:	db003715 	stw	r12,220(sp)
200816d0:	da003f15 	stw	r8,252(sp)
200816d4:	da403e15 	stw	r9,248(sp)
200816d8:	dac03915 	stw	r11,228(sp)
200816dc:	008752c0 	call	2008752c <__fpclassifyd>
200816e0:	db002d17 	ldw	r12,180(sp)
200816e4:	04800044 	movi	r18,1
200816e8:	da003f17 	ldw	r8,252(sp)
200816ec:	64c00204 	addi	r19,r12,8
200816f0:	da403e17 	ldw	r9,248(sp)
200816f4:	d9003717 	ldw	r4,220(sp)
200816f8:	d9403917 	ldw	r5,228(sp)
200816fc:	14832b1e 	bne	r2,r18,200823ac <___vfprintf_internal_r+0x15fc>
20081700:	000d883a 	mov	r6,zero
20081704:	000f883a 	mov	r7,zero
20081708:	008b4840 	call	2008b484 <__ledf2>
2008170c:	da003f17 	ldw	r8,252(sp)
20081710:	1004b716 	blt	r2,zero,200829f0 <___vfprintf_internal_r+0x1c40>
20081714:	dd402783 	ldbu	r21,158(sp)
20081718:	008011c4 	movi	r2,71
2008171c:	14040e0e 	bge	r2,r16,20082758 <___vfprintf_internal_r+0x19a8>
20081720:	00c00034 	movhi	r3,0
20081724:	18c01b04 	addi	r3,r3,108
20081728:	d8c03115 	stw	r3,196(sp)
2008172c:	02c000c4 	movi	r11,3
20081730:	00bfdfc4 	movi	r2,-129
20081734:	dac02b15 	stw	r11,172(sp)
20081738:	88a2703a 	and	r17,r17,r2
2008173c:	dcc02d15 	stw	r19,180(sp)
20081740:	5825883a 	mov	r18,r11
20081744:	d8003215 	stw	zero,200(sp)
20081748:	d8003415 	stw	zero,208(sp)
2008174c:	003eeb06 	br	200812fc <__flash_rwdata_start+0xfffef9cc>
20081750:	db002d17 	ldw	r12,180(sp)
20081754:	00800c04 	movi	r2,48
20081758:	d8802705 	stb	r2,156(sp)
2008175c:	64c00017 	ldw	r19,0(r12)
20081760:	00801e04 	movi	r2,120
20081764:	d8802745 	stb	r2,157(sp)
20081768:	00800034 	movhi	r2,0
2008176c:	10802304 	addi	r2,r2,140
20081770:	63000104 	addi	r12,r12,4
20081774:	d8c02a15 	stw	r3,168(sp)
20081778:	d8803b15 	stw	r2,236(sp)
2008177c:	0039883a 	mov	fp,zero
20081780:	8c400094 	ori	r17,r17,2
20081784:	db002d15 	stw	r12,180(sp)
20081788:	00800084 	movi	r2,2
2008178c:	04001e04 	movi	r16,120
20081790:	9807883a 	mov	r3,r19
20081794:	003fb506 	br	2008166c <__flash_rwdata_start+0xfffefd3c>
20081798:	8c400214 	ori	r17,r17,8
2008179c:	1805883a 	mov	r2,r3
200817a0:	1c000007 	ldb	r16,0(r3)
200817a4:	003de706 	br	20080f44 <__flash_rwdata_start+0xfffef614>
200817a8:	d8c02a15 	stw	r3,168(sp)
200817ac:	d9802785 	stb	r6,158(sp)
200817b0:	8880080c 	andi	r2,r17,32
200817b4:	d8c02d17 	ldw	r3,180(sp)
200817b8:	103ea61e 	bne	r2,zero,20081254 <__flash_rwdata_start+0xfffef924>
200817bc:	8880040c 	andi	r2,r17,16
200817c0:	1002221e 	bne	r2,zero,2008204c <___vfprintf_internal_r+0x129c>
200817c4:	8880100c 	andi	r2,r17,64
200817c8:	10022026 	beq	r2,zero,2008204c <___vfprintf_internal_r+0x129c>
200817cc:	1cc0000f 	ldh	r19,0(r3)
200817d0:	db002d17 	ldw	r12,180(sp)
200817d4:	9839d7fa 	srai	fp,r19,31
200817d8:	63000104 	addi	r12,r12,4
200817dc:	db002d15 	stw	r12,180(sp)
200817e0:	e005883a 	mov	r2,fp
200817e4:	003ea106 	br	2008126c <__flash_rwdata_start+0xfffef93c>
200817e8:	8c401014 	ori	r17,r17,64
200817ec:	1805883a 	mov	r2,r3
200817f0:	1c000007 	ldb	r16,0(r3)
200817f4:	003dd306 	br	20080f44 <__flash_rwdata_start+0xfffef614>
200817f8:	1c000007 	ldb	r16,0(r3)
200817fc:	81c3e926 	beq	r16,r7,200827a4 <___vfprintf_internal_r+0x19f4>
20081800:	8c400414 	ori	r17,r17,16
20081804:	1805883a 	mov	r2,r3
20081808:	003dce06 	br	20080f44 <__flash_rwdata_start+0xfffef614>
2008180c:	d8c02a15 	stw	r3,168(sp)
20081810:	d9802785 	stb	r6,158(sp)
20081814:	8880080c 	andi	r2,r17,32
20081818:	10034726 	beq	r2,zero,20082538 <___vfprintf_internal_r+0x1788>
2008181c:	db002d17 	ldw	r12,180(sp)
20081820:	dac02f17 	ldw	r11,188(sp)
20081824:	60800017 	ldw	r2,0(r12)
20081828:	5807d7fa 	srai	r3,r11,31
2008182c:	63000104 	addi	r12,r12,4
20081830:	db002d15 	stw	r12,180(sp)
20081834:	12c00015 	stw	r11,0(r2)
20081838:	10c00115 	stw	r3,4(r2)
2008183c:	003d9706 	br	20080e9c <__flash_rwdata_start+0xfffef56c>
20081840:	03000034 	movhi	r12,0
20081844:	63001e04 	addi	r12,r12,120
20081848:	d8c02a15 	stw	r3,168(sp)
2008184c:	d9802785 	stb	r6,158(sp)
20081850:	db003b15 	stw	r12,236(sp)
20081854:	88c0080c 	andi	r3,r17,32
20081858:	d8802d17 	ldw	r2,180(sp)
2008185c:	18005b26 	beq	r3,zero,200819cc <___vfprintf_internal_r+0xc1c>
20081860:	dac02d17 	ldw	r11,180(sp)
20081864:	14c00017 	ldw	r19,0(r2)
20081868:	17000117 	ldw	fp,4(r2)
2008186c:	5ac00204 	addi	r11,r11,8
20081870:	dac02d15 	stw	r11,180(sp)
20081874:	8880004c 	andi	r2,r17,1
20081878:	10022926 	beq	r2,zero,20082120 <___vfprintf_internal_r+0x1370>
2008187c:	9f06b03a 	or	r3,r19,fp
20081880:	18032b26 	beq	r3,zero,20082530 <___vfprintf_internal_r+0x1780>
20081884:	00800c04 	movi	r2,48
20081888:	d8802705 	stb	r2,156(sp)
2008188c:	dc002745 	stb	r16,157(sp)
20081890:	8c400094 	ori	r17,r17,2
20081894:	00800084 	movi	r2,2
20081898:	003f7406 	br	2008166c <__flash_rwdata_start+0xfffefd3c>
2008189c:	30803fcc 	andi	r2,r6,255
200818a0:	1080201c 	xori	r2,r2,128
200818a4:	10bfe004 	addi	r2,r2,-128
200818a8:	1003351e 	bne	r2,zero,20082580 <___vfprintf_internal_r+0x17d0>
200818ac:	1805883a 	mov	r2,r3
200818b0:	01800804 	movi	r6,32
200818b4:	1c000007 	ldb	r16,0(r3)
200818b8:	003da206 	br	20080f44 <__flash_rwdata_start+0xfffef614>
200818bc:	dac02d17 	ldw	r11,180(sp)
200818c0:	db002d17 	ldw	r12,180(sp)
200818c4:	5ac00017 	ldw	r11,0(r11)
200818c8:	dac02e15 	stw	r11,184(sp)
200818cc:	62c00104 	addi	r11,r12,4
200818d0:	db002e17 	ldw	r12,184(sp)
200818d4:	6003ad16 	blt	r12,zero,2008278c <___vfprintf_internal_r+0x19dc>
200818d8:	dac02d15 	stw	r11,180(sp)
200818dc:	1805883a 	mov	r2,r3
200818e0:	1c000007 	ldb	r16,0(r3)
200818e4:	003d9706 	br	20080f44 <__flash_rwdata_start+0xfffef614>
200818e8:	1805883a 	mov	r2,r3
200818ec:	01800ac4 	movi	r6,43
200818f0:	1c000007 	ldb	r16,0(r3)
200818f4:	003d9306 	br	20080f44 <__flash_rwdata_start+0xfffef614>
200818f8:	db002d17 	ldw	r12,180(sp)
200818fc:	d8c02a15 	stw	r3,168(sp)
20081900:	00c00044 	movi	r3,1
20081904:	60800017 	ldw	r2,0(r12)
20081908:	63000104 	addi	r12,r12,4
2008190c:	d8c02b15 	stw	r3,172(sp)
20081910:	d8002785 	stb	zero,158(sp)
20081914:	d8801405 	stb	r2,80(sp)
20081918:	db002d15 	stw	r12,180(sp)
2008191c:	dac01404 	addi	r11,sp,80
20081920:	1825883a 	mov	r18,r3
20081924:	d8003215 	stw	zero,200(sp)
20081928:	d8003415 	stw	zero,208(sp)
2008192c:	dac03115 	stw	r11,196(sp)
20081930:	0005883a 	mov	r2,zero
20081934:	003e7806 	br	20081318 <__flash_rwdata_start+0xfffef9e8>
20081938:	dac02d17 	ldw	r11,180(sp)
2008193c:	db002d17 	ldw	r12,180(sp)
20081940:	d8c02a15 	stw	r3,168(sp)
20081944:	5ac00017 	ldw	r11,0(r11)
20081948:	d8002785 	stb	zero,158(sp)
2008194c:	64c00104 	addi	r19,r12,4
20081950:	dac03115 	stw	r11,196(sp)
20081954:	5803fe26 	beq	r11,zero,20082950 <___vfprintf_internal_r+0x1ba0>
20081958:	d9003117 	ldw	r4,196(sp)
2008195c:	4803b416 	blt	r9,zero,20082830 <___vfprintf_internal_r+0x1a80>
20081960:	480d883a 	mov	r6,r9
20081964:	000b883a 	mov	r5,zero
20081968:	da003f15 	stw	r8,252(sp)
2008196c:	da403e15 	stw	r9,248(sp)
20081970:	0085b840 	call	20085b84 <memchr>
20081974:	da003f17 	ldw	r8,252(sp)
20081978:	da403e17 	ldw	r9,248(sp)
2008197c:	10043026 	beq	r2,zero,20082a40 <___vfprintf_internal_r+0x1c90>
20081980:	d8c03117 	ldw	r3,196(sp)
20081984:	10e5c83a 	sub	r18,r2,r3
20081988:	4c836b16 	blt	r9,r18,20082738 <___vfprintf_internal_r+0x1988>
2008198c:	9005883a 	mov	r2,r18
20081990:	9003ac16 	blt	r18,zero,20082844 <___vfprintf_internal_r+0x1a94>
20081994:	dd402783 	ldbu	r21,158(sp)
20081998:	d8802b15 	stw	r2,172(sp)
2008199c:	dcc02d15 	stw	r19,180(sp)
200819a0:	d8003215 	stw	zero,200(sp)
200819a4:	d8003415 	stw	zero,208(sp)
200819a8:	003e5406 	br	200812fc <__flash_rwdata_start+0xfffef9cc>
200819ac:	00800034 	movhi	r2,0
200819b0:	10802304 	addi	r2,r2,140
200819b4:	d8c02a15 	stw	r3,168(sp)
200819b8:	d8803b15 	stw	r2,236(sp)
200819bc:	d9802785 	stb	r6,158(sp)
200819c0:	88c0080c 	andi	r3,r17,32
200819c4:	d8802d17 	ldw	r2,180(sp)
200819c8:	183fa51e 	bne	r3,zero,20081860 <__flash_rwdata_start+0xfffeff30>
200819cc:	88c0040c 	andi	r3,r17,16
200819d0:	1802ee26 	beq	r3,zero,2008258c <___vfprintf_internal_r+0x17dc>
200819d4:	db002d17 	ldw	r12,180(sp)
200819d8:	14c00017 	ldw	r19,0(r2)
200819dc:	0039883a 	mov	fp,zero
200819e0:	63000104 	addi	r12,r12,4
200819e4:	db002d15 	stw	r12,180(sp)
200819e8:	003fa206 	br	20081874 <__flash_rwdata_start+0xfffeff44>
200819ec:	8c400054 	ori	r17,r17,1
200819f0:	1805883a 	mov	r2,r3
200819f4:	1c000007 	ldb	r16,0(r3)
200819f8:	003d5206 	br	20080f44 <__flash_rwdata_start+0xfffef614>
200819fc:	8c400814 	ori	r17,r17,32
20081a00:	1805883a 	mov	r2,r3
20081a04:	1c000007 	ldb	r16,0(r3)
20081a08:	003d4e06 	br	20080f44 <__flash_rwdata_start+0xfffef614>
20081a0c:	d8c02a15 	stw	r3,168(sp)
20081a10:	8880080c 	andi	r2,r17,32
20081a14:	103f1d1e 	bne	r2,zero,2008168c <__flash_rwdata_start+0xfffefd5c>
20081a18:	8880040c 	andi	r2,r17,16
20081a1c:	1001b81e 	bne	r2,zero,20082100 <___vfprintf_internal_r+0x1350>
20081a20:	8880100c 	andi	r2,r17,64
20081a24:	1001b626 	beq	r2,zero,20082100 <___vfprintf_internal_r+0x1350>
20081a28:	dac02d17 	ldw	r11,180(sp)
20081a2c:	0039883a 	mov	fp,zero
20081a30:	00800044 	movi	r2,1
20081a34:	5cc0000b 	ldhu	r19,0(r11)
20081a38:	5ac00104 	addi	r11,r11,4
20081a3c:	dac02d15 	stw	r11,180(sp)
20081a40:	9807883a 	mov	r3,r19
20081a44:	003f0906 	br	2008166c <__flash_rwdata_start+0xfffefd3c>
20081a48:	d8c02a15 	stw	r3,168(sp)
20081a4c:	8880080c 	andi	r2,r17,32
20081a50:	103eff1e 	bne	r2,zero,20081650 <__flash_rwdata_start+0xfffefd20>
20081a54:	8880040c 	andi	r2,r17,16
20081a58:	1001a11e 	bne	r2,zero,200820e0 <___vfprintf_internal_r+0x1330>
20081a5c:	8880100c 	andi	r2,r17,64
20081a60:	10019f26 	beq	r2,zero,200820e0 <___vfprintf_internal_r+0x1330>
20081a64:	db002d17 	ldw	r12,180(sp)
20081a68:	0039883a 	mov	fp,zero
20081a6c:	0005883a 	mov	r2,zero
20081a70:	64c0000b 	ldhu	r19,0(r12)
20081a74:	63000104 	addi	r12,r12,4
20081a78:	db002d15 	stw	r12,180(sp)
20081a7c:	9807883a 	mov	r3,r19
20081a80:	003efa06 	br	2008166c <__flash_rwdata_start+0xfffefd3c>
20081a84:	d8c02a15 	stw	r3,168(sp)
20081a88:	d9802785 	stb	r6,158(sp)
20081a8c:	803db626 	beq	r16,zero,20081168 <__flash_rwdata_start+0xfffef838>
20081a90:	00c00044 	movi	r3,1
20081a94:	d8c02b15 	stw	r3,172(sp)
20081a98:	dc001405 	stb	r16,80(sp)
20081a9c:	d8002785 	stb	zero,158(sp)
20081aa0:	003f9e06 	br	2008191c <__flash_rwdata_start+0xfffeffec>
20081aa4:	d8c02017 	ldw	r3,128(sp)
20081aa8:	003e5306 	br	200813f8 <__flash_rwdata_start+0xfffefac8>
20081aac:	10803fcc 	andi	r2,r2,255
20081ab0:	00c00044 	movi	r3,1
20081ab4:	10fdfa1e 	bne	r2,r3,200812a0 <__flash_rwdata_start+0xfffef970>
20081ab8:	e000021e 	bne	fp,zero,20081ac4 <___vfprintf_internal_r+0xd14>
20081abc:	00800244 	movi	r2,9
20081ac0:	14c0202e 	bgeu	r2,r19,20081b44 <___vfprintf_internal_r+0xd94>
20081ac4:	dc002b15 	stw	r16,172(sp)
20081ac8:	dc402c15 	stw	r17,176(sp)
20081acc:	9821883a 	mov	r16,r19
20081ad0:	e023883a 	mov	r17,fp
20081ad4:	dc801e04 	addi	r18,sp,120
20081ad8:	4827883a 	mov	r19,r9
20081adc:	4039883a 	mov	fp,r8
20081ae0:	8009883a 	mov	r4,r16
20081ae4:	880b883a 	mov	r5,r17
20081ae8:	01800284 	movi	r6,10
20081aec:	000f883a 	mov	r7,zero
20081af0:	0089afc0 	call	20089afc <__umoddi3>
20081af4:	10800c04 	addi	r2,r2,48
20081af8:	94bfffc4 	addi	r18,r18,-1
20081afc:	8009883a 	mov	r4,r16
20081b00:	880b883a 	mov	r5,r17
20081b04:	01800284 	movi	r6,10
20081b08:	000f883a 	mov	r7,zero
20081b0c:	90800005 	stb	r2,0(r18)
20081b10:	008953c0 	call	2008953c <__udivdi3>
20081b14:	1021883a 	mov	r16,r2
20081b18:	10c4b03a 	or	r2,r2,r3
20081b1c:	1823883a 	mov	r17,r3
20081b20:	103fef1e 	bne	r2,zero,20081ae0 <__flash_rwdata_start+0xffff01b0>
20081b24:	dac02817 	ldw	r11,160(sp)
20081b28:	dc803115 	stw	r18,196(sp)
20081b2c:	dc002b17 	ldw	r16,172(sp)
20081b30:	dc402c17 	ldw	r17,176(sp)
20081b34:	9813883a 	mov	r9,r19
20081b38:	e011883a 	mov	r8,fp
20081b3c:	5ca5c83a 	sub	r18,r11,r18
20081b40:	003de906 	br	200812e8 <__flash_rwdata_start+0xfffef9b8>
20081b44:	9cc00c04 	addi	r19,r19,48
20081b48:	d8c01dc4 	addi	r3,sp,119
20081b4c:	dcc01dc5 	stb	r19,119(sp)
20081b50:	dc803c17 	ldw	r18,240(sp)
20081b54:	d8c03115 	stw	r3,196(sp)
20081b58:	003de306 	br	200812e8 <__flash_rwdata_start+0xfffef9b8>
20081b5c:	00801944 	movi	r2,101
20081b60:	1400710e 	bge	r2,r16,20081d28 <___vfprintf_internal_r+0xf78>
20081b64:	d9003717 	ldw	r4,220(sp)
20081b68:	d9403917 	ldw	r5,228(sp)
20081b6c:	000d883a 	mov	r6,zero
20081b70:	000f883a 	mov	r7,zero
20081b74:	d8c03d15 	stw	r3,244(sp)
20081b78:	da003f15 	stw	r8,252(sp)
20081b7c:	008b3200 	call	2008b320 <__eqdf2>
20081b80:	d8c03d17 	ldw	r3,244(sp)
20081b84:	da003f17 	ldw	r8,252(sp)
20081b88:	1000ef1e 	bne	r2,zero,20081f48 <___vfprintf_internal_r+0x1198>
20081b8c:	d8801f17 	ldw	r2,124(sp)
20081b90:	01000034 	movhi	r4,0
20081b94:	21002a04 	addi	r4,r4,168
20081b98:	18c00044 	addi	r3,r3,1
20081b9c:	10800044 	addi	r2,r2,1
20081ba0:	41000015 	stw	r4,0(r8)
20081ba4:	01000044 	movi	r4,1
20081ba8:	41000115 	stw	r4,4(r8)
20081bac:	d8c02015 	stw	r3,128(sp)
20081bb0:	d8801f15 	stw	r2,124(sp)
20081bb4:	010001c4 	movi	r4,7
20081bb8:	20828e16 	blt	r4,r2,200825f4 <___vfprintf_internal_r+0x1844>
20081bbc:	42000204 	addi	r8,r8,8
20081bc0:	d8802617 	ldw	r2,152(sp)
20081bc4:	dac03317 	ldw	r11,204(sp)
20081bc8:	12c00216 	blt	r2,r11,20081bd4 <___vfprintf_internal_r+0xe24>
20081bcc:	8880004c 	andi	r2,r17,1
20081bd0:	103e5d26 	beq	r2,zero,20081548 <__flash_rwdata_start+0xfffefc18>
20081bd4:	db003817 	ldw	r12,224(sp)
20081bd8:	d8801f17 	ldw	r2,124(sp)
20081bdc:	dac03517 	ldw	r11,212(sp)
20081be0:	1b07883a 	add	r3,r3,r12
20081be4:	10800044 	addi	r2,r2,1
20081be8:	42c00015 	stw	r11,0(r8)
20081bec:	43000115 	stw	r12,4(r8)
20081bf0:	d8c02015 	stw	r3,128(sp)
20081bf4:	d8801f15 	stw	r2,124(sp)
20081bf8:	010001c4 	movi	r4,7
20081bfc:	2082ed16 	blt	r4,r2,200827b4 <___vfprintf_internal_r+0x1a04>
20081c00:	42000204 	addi	r8,r8,8
20081c04:	db003317 	ldw	r12,204(sp)
20081c08:	643fffc4 	addi	r16,r12,-1
20081c0c:	043e4e0e 	bge	zero,r16,20081548 <__flash_rwdata_start+0xfffefc18>
20081c10:	04800404 	movi	r18,16
20081c14:	d8801f17 	ldw	r2,124(sp)
20081c18:	94007e0e 	bge	r18,r16,20081e14 <___vfprintf_internal_r+0x1064>
20081c1c:	01400034 	movhi	r5,0
20081c20:	29402a84 	addi	r5,r5,170
20081c24:	d9402c15 	stw	r5,176(sp)
20081c28:	054001c4 	movi	r21,7
20081c2c:	00000306 	br	20081c3c <___vfprintf_internal_r+0xe8c>
20081c30:	42000204 	addi	r8,r8,8
20081c34:	843ffc04 	addi	r16,r16,-16
20081c38:	9400790e 	bge	r18,r16,20081e20 <___vfprintf_internal_r+0x1070>
20081c3c:	18c00404 	addi	r3,r3,16
20081c40:	10800044 	addi	r2,r2,1
20081c44:	45000015 	stw	r20,0(r8)
20081c48:	44800115 	stw	r18,4(r8)
20081c4c:	d8c02015 	stw	r3,128(sp)
20081c50:	d8801f15 	stw	r2,124(sp)
20081c54:	a8bff60e 	bge	r21,r2,20081c30 <__flash_rwdata_start+0xffff0300>
20081c58:	b009883a 	mov	r4,r22
20081c5c:	b80b883a 	mov	r5,r23
20081c60:	d9801e04 	addi	r6,sp,120
20081c64:	008787c0 	call	2008787c <__sprint_r>
20081c68:	103d451e 	bne	r2,zero,20081180 <__flash_rwdata_start+0xfffef850>
20081c6c:	d8c02017 	ldw	r3,128(sp)
20081c70:	d8801f17 	ldw	r2,124(sp)
20081c74:	da000404 	addi	r8,sp,16
20081c78:	003fee06 	br	20081c34 <__flash_rwdata_start+0xffff0304>
20081c7c:	dac02e17 	ldw	r11,184(sp)
20081c80:	db002b17 	ldw	r12,172(sp)
20081c84:	5b2bc83a 	sub	r21,r11,r12
20081c88:	057df90e 	bge	zero,r21,20081470 <__flash_rwdata_start+0xfffefb40>
20081c8c:	07000404 	movi	fp,16
20081c90:	d8801f17 	ldw	r2,124(sp)
20081c94:	e543640e 	bge	fp,r21,20082a28 <___vfprintf_internal_r+0x1c78>
20081c98:	01400034 	movhi	r5,0
20081c9c:	29402a84 	addi	r5,r5,170
20081ca0:	d9402c15 	stw	r5,176(sp)
20081ca4:	04c001c4 	movi	r19,7
20081ca8:	00000306 	br	20081cb8 <___vfprintf_internal_r+0xf08>
20081cac:	ad7ffc04 	addi	r21,r21,-16
20081cb0:	42000204 	addi	r8,r8,8
20081cb4:	e540110e 	bge	fp,r21,20081cfc <___vfprintf_internal_r+0xf4c>
20081cb8:	18c00404 	addi	r3,r3,16
20081cbc:	10800044 	addi	r2,r2,1
20081cc0:	45000015 	stw	r20,0(r8)
20081cc4:	47000115 	stw	fp,4(r8)
20081cc8:	d8c02015 	stw	r3,128(sp)
20081ccc:	d8801f15 	stw	r2,124(sp)
20081cd0:	98bff60e 	bge	r19,r2,20081cac <__flash_rwdata_start+0xffff037c>
20081cd4:	b009883a 	mov	r4,r22
20081cd8:	b80b883a 	mov	r5,r23
20081cdc:	d9801e04 	addi	r6,sp,120
20081ce0:	008787c0 	call	2008787c <__sprint_r>
20081ce4:	103d261e 	bne	r2,zero,20081180 <__flash_rwdata_start+0xfffef850>
20081ce8:	ad7ffc04 	addi	r21,r21,-16
20081cec:	d8c02017 	ldw	r3,128(sp)
20081cf0:	d8801f17 	ldw	r2,124(sp)
20081cf4:	da000404 	addi	r8,sp,16
20081cf8:	e57fef16 	blt	fp,r21,20081cb8 <__flash_rwdata_start+0xffff0388>
20081cfc:	dac02c17 	ldw	r11,176(sp)
20081d00:	1d47883a 	add	r3,r3,r21
20081d04:	10800044 	addi	r2,r2,1
20081d08:	42c00015 	stw	r11,0(r8)
20081d0c:	45400115 	stw	r21,4(r8)
20081d10:	d8c02015 	stw	r3,128(sp)
20081d14:	d8801f15 	stw	r2,124(sp)
20081d18:	010001c4 	movi	r4,7
20081d1c:	20819116 	blt	r4,r2,20082364 <___vfprintf_internal_r+0x15b4>
20081d20:	42000204 	addi	r8,r8,8
20081d24:	003dd206 	br	20081470 <__flash_rwdata_start+0xfffefb40>
20081d28:	db003317 	ldw	r12,204(sp)
20081d2c:	00800044 	movi	r2,1
20081d30:	18c00044 	addi	r3,r3,1
20081d34:	1301530e 	bge	r2,r12,20082284 <___vfprintf_internal_r+0x14d4>
20081d38:	dc001f17 	ldw	r16,124(sp)
20081d3c:	dac03117 	ldw	r11,196(sp)
20081d40:	00800044 	movi	r2,1
20081d44:	84000044 	addi	r16,r16,1
20081d48:	40800115 	stw	r2,4(r8)
20081d4c:	42c00015 	stw	r11,0(r8)
20081d50:	d8c02015 	stw	r3,128(sp)
20081d54:	dc001f15 	stw	r16,124(sp)
20081d58:	008001c4 	movi	r2,7
20081d5c:	14016b16 	blt	r2,r16,2008230c <___vfprintf_internal_r+0x155c>
20081d60:	42000204 	addi	r8,r8,8
20081d64:	db003817 	ldw	r12,224(sp)
20081d68:	dac03517 	ldw	r11,212(sp)
20081d6c:	84000044 	addi	r16,r16,1
20081d70:	1b07883a 	add	r3,r3,r12
20081d74:	42c00015 	stw	r11,0(r8)
20081d78:	43000115 	stw	r12,4(r8)
20081d7c:	d8c02015 	stw	r3,128(sp)
20081d80:	dc001f15 	stw	r16,124(sp)
20081d84:	008001c4 	movi	r2,7
20081d88:	14016916 	blt	r2,r16,20082330 <___vfprintf_internal_r+0x1580>
20081d8c:	44800204 	addi	r18,r8,8
20081d90:	d9003717 	ldw	r4,220(sp)
20081d94:	d9403917 	ldw	r5,228(sp)
20081d98:	000d883a 	mov	r6,zero
20081d9c:	000f883a 	mov	r7,zero
20081da0:	d8c03d15 	stw	r3,244(sp)
20081da4:	008b3200 	call	2008b320 <__eqdf2>
20081da8:	d8c03d17 	ldw	r3,244(sp)
20081dac:	db003317 	ldw	r12,204(sp)
20081db0:	1000ad26 	beq	r2,zero,20082068 <___vfprintf_internal_r+0x12b8>
20081db4:	dac03117 	ldw	r11,196(sp)
20081db8:	60bfffc4 	addi	r2,r12,-1
20081dbc:	1887883a 	add	r3,r3,r2
20081dc0:	59000044 	addi	r4,r11,1
20081dc4:	84000044 	addi	r16,r16,1
20081dc8:	90800115 	stw	r2,4(r18)
20081dcc:	91000015 	stw	r4,0(r18)
20081dd0:	d8c02015 	stw	r3,128(sp)
20081dd4:	dc001f15 	stw	r16,124(sp)
20081dd8:	008001c4 	movi	r2,7
20081ddc:	14014216 	blt	r2,r16,200822e8 <___vfprintf_internal_r+0x1538>
20081de0:	94800204 	addi	r18,r18,8
20081de4:	dac03a17 	ldw	r11,232(sp)
20081de8:	dd4022c4 	addi	r21,sp,139
20081dec:	84000044 	addi	r16,r16,1
20081df0:	1ac7883a 	add	r3,r3,r11
20081df4:	95400015 	stw	r21,0(r18)
20081df8:	92c00115 	stw	r11,4(r18)
20081dfc:	d8c02015 	stw	r3,128(sp)
20081e00:	dc001f15 	stw	r16,124(sp)
20081e04:	008001c4 	movi	r2,7
20081e08:	14000e16 	blt	r2,r16,20081e44 <___vfprintf_internal_r+0x1094>
20081e0c:	92000204 	addi	r8,r18,8
20081e10:	003dcd06 	br	20081548 <__flash_rwdata_start+0xfffefc18>
20081e14:	01000034 	movhi	r4,0
20081e18:	21002a84 	addi	r4,r4,170
20081e1c:	d9002c15 	stw	r4,176(sp)
20081e20:	dac02c17 	ldw	r11,176(sp)
20081e24:	1c07883a 	add	r3,r3,r16
20081e28:	44000115 	stw	r16,4(r8)
20081e2c:	42c00015 	stw	r11,0(r8)
20081e30:	10800044 	addi	r2,r2,1
20081e34:	d8c02015 	stw	r3,128(sp)
20081e38:	d8801f15 	stw	r2,124(sp)
20081e3c:	010001c4 	movi	r4,7
20081e40:	20bdc00e 	bge	r4,r2,20081544 <__flash_rwdata_start+0xfffefc14>
20081e44:	b009883a 	mov	r4,r22
20081e48:	b80b883a 	mov	r5,r23
20081e4c:	d9801e04 	addi	r6,sp,120
20081e50:	008787c0 	call	2008787c <__sprint_r>
20081e54:	103cca1e 	bne	r2,zero,20081180 <__flash_rwdata_start+0xfffef850>
20081e58:	d8c02017 	ldw	r3,128(sp)
20081e5c:	da000404 	addi	r8,sp,16
20081e60:	003db906 	br	20081548 <__flash_rwdata_start+0xfffefc18>
20081e64:	b009883a 	mov	r4,r22
20081e68:	b80b883a 	mov	r5,r23
20081e6c:	d9801e04 	addi	r6,sp,120
20081e70:	008787c0 	call	2008787c <__sprint_r>
20081e74:	103def26 	beq	r2,zero,20081634 <__flash_rwdata_start+0xfffefd04>
20081e78:	003cc106 	br	20081180 <__flash_rwdata_start+0xfffef850>
20081e7c:	10803fcc 	andi	r2,r2,255
20081e80:	1000651e 	bne	r2,zero,20082018 <___vfprintf_internal_r+0x1268>
20081e84:	8880004c 	andi	r2,r17,1
20081e88:	10013226 	beq	r2,zero,20082354 <___vfprintf_internal_r+0x15a4>
20081e8c:	00800c04 	movi	r2,48
20081e90:	d8c01dc4 	addi	r3,sp,119
20081e94:	d8801dc5 	stb	r2,119(sp)
20081e98:	dc803c17 	ldw	r18,240(sp)
20081e9c:	d8c03115 	stw	r3,196(sp)
20081ea0:	003d1106 	br	200812e8 <__flash_rwdata_start+0xfffef9b8>
20081ea4:	b009883a 	mov	r4,r22
20081ea8:	b80b883a 	mov	r5,r23
20081eac:	d9801e04 	addi	r6,sp,120
20081eb0:	008787c0 	call	2008787c <__sprint_r>
20081eb4:	103cb21e 	bne	r2,zero,20081180 <__flash_rwdata_start+0xfffef850>
20081eb8:	d8c02017 	ldw	r3,128(sp)
20081ebc:	da000404 	addi	r8,sp,16
20081ec0:	003d9406 	br	20081514 <__flash_rwdata_start+0xfffefbe4>
20081ec4:	b009883a 	mov	r4,r22
20081ec8:	b80b883a 	mov	r5,r23
20081ecc:	d9801e04 	addi	r6,sp,120
20081ed0:	008787c0 	call	2008787c <__sprint_r>
20081ed4:	103caa1e 	bne	r2,zero,20081180 <__flash_rwdata_start+0xfffef850>
20081ed8:	d8c02017 	ldw	r3,128(sp)
20081edc:	da000404 	addi	r8,sp,16
20081ee0:	003d5206 	br	2008142c <__flash_rwdata_start+0xfffefafc>
20081ee4:	b009883a 	mov	r4,r22
20081ee8:	b80b883a 	mov	r5,r23
20081eec:	d9801e04 	addi	r6,sp,120
20081ef0:	008787c0 	call	2008787c <__sprint_r>
20081ef4:	103ca21e 	bne	r2,zero,20081180 <__flash_rwdata_start+0xfffef850>
20081ef8:	d8c02017 	ldw	r3,128(sp)
20081efc:	da000404 	addi	r8,sp,16
20081f00:	003d5806 	br	20081464 <__flash_rwdata_start+0xfffefb34>
20081f04:	d9403b17 	ldw	r5,236(sp)
20081f08:	d8c01e04 	addi	r3,sp,120
20081f0c:	988003cc 	andi	r2,r19,15
20081f10:	e008973a 	slli	r4,fp,28
20081f14:	2885883a 	add	r2,r5,r2
20081f18:	9826d13a 	srli	r19,r19,4
20081f1c:	10800003 	ldbu	r2,0(r2)
20081f20:	e038d13a 	srli	fp,fp,4
20081f24:	18ffffc4 	addi	r3,r3,-1
20081f28:	24e6b03a 	or	r19,r4,r19
20081f2c:	18800005 	stb	r2,0(r3)
20081f30:	9f04b03a 	or	r2,r19,fp
20081f34:	103ff51e 	bne	r2,zero,20081f0c <__flash_rwdata_start+0xffff05dc>
20081f38:	db002817 	ldw	r12,160(sp)
20081f3c:	d8c03115 	stw	r3,196(sp)
20081f40:	60e5c83a 	sub	r18,r12,r3
20081f44:	003ce806 	br	200812e8 <__flash_rwdata_start+0xfffef9b8>
20081f48:	dc002617 	ldw	r16,152(sp)
20081f4c:	0401b10e 	bge	zero,r16,20082614 <___vfprintf_internal_r+0x1864>
20081f50:	db003117 	ldw	r12,196(sp)
20081f54:	dac03317 	ldw	r11,204(sp)
20081f58:	62e1883a 	add	r16,r12,r11
20081f5c:	db003417 	ldw	r12,208(sp)
20081f60:	5825883a 	mov	r18,r11
20081f64:	62c0010e 	bge	r12,r11,20081f6c <___vfprintf_internal_r+0x11bc>
20081f68:	6025883a 	mov	r18,r12
20081f6c:	04800b0e 	bge	zero,r18,20081f9c <___vfprintf_internal_r+0x11ec>
20081f70:	d8801f17 	ldw	r2,124(sp)
20081f74:	dac03117 	ldw	r11,196(sp)
20081f78:	1c87883a 	add	r3,r3,r18
20081f7c:	10800044 	addi	r2,r2,1
20081f80:	42c00015 	stw	r11,0(r8)
20081f84:	44800115 	stw	r18,4(r8)
20081f88:	d8c02015 	stw	r3,128(sp)
20081f8c:	d8801f15 	stw	r2,124(sp)
20081f90:	010001c4 	movi	r4,7
20081f94:	20824f16 	blt	r4,r2,200828d4 <___vfprintf_internal_r+0x1b24>
20081f98:	42000204 	addi	r8,r8,8
20081f9c:	90024b16 	blt	r18,zero,200828cc <___vfprintf_internal_r+0x1b1c>
20081fa0:	db003417 	ldw	r12,208(sp)
20081fa4:	64a5c83a 	sub	r18,r12,r18
20081fa8:	0480730e 	bge	zero,r18,20082178 <___vfprintf_internal_r+0x13c8>
20081fac:	05400404 	movi	r21,16
20081fb0:	d8801f17 	ldw	r2,124(sp)
20081fb4:	ac817d0e 	bge	r21,r18,200825ac <___vfprintf_internal_r+0x17fc>
20081fb8:	01400034 	movhi	r5,0
20081fbc:	29402a84 	addi	r5,r5,170
20081fc0:	d9402c15 	stw	r5,176(sp)
20081fc4:	070001c4 	movi	fp,7
20081fc8:	00000306 	br	20081fd8 <___vfprintf_internal_r+0x1228>
20081fcc:	42000204 	addi	r8,r8,8
20081fd0:	94bffc04 	addi	r18,r18,-16
20081fd4:	ac81780e 	bge	r21,r18,200825b8 <___vfprintf_internal_r+0x1808>
20081fd8:	18c00404 	addi	r3,r3,16
20081fdc:	10800044 	addi	r2,r2,1
20081fe0:	45000015 	stw	r20,0(r8)
20081fe4:	45400115 	stw	r21,4(r8)
20081fe8:	d8c02015 	stw	r3,128(sp)
20081fec:	d8801f15 	stw	r2,124(sp)
20081ff0:	e0bff60e 	bge	fp,r2,20081fcc <__flash_rwdata_start+0xffff069c>
20081ff4:	b009883a 	mov	r4,r22
20081ff8:	b80b883a 	mov	r5,r23
20081ffc:	d9801e04 	addi	r6,sp,120
20082000:	008787c0 	call	2008787c <__sprint_r>
20082004:	103c5e1e 	bne	r2,zero,20081180 <__flash_rwdata_start+0xfffef850>
20082008:	d8c02017 	ldw	r3,128(sp)
2008200c:	d8801f17 	ldw	r2,124(sp)
20082010:	da000404 	addi	r8,sp,16
20082014:	003fee06 	br	20081fd0 <__flash_rwdata_start+0xffff06a0>
20082018:	dac01e04 	addi	r11,sp,120
2008201c:	0025883a 	mov	r18,zero
20082020:	dac03115 	stw	r11,196(sp)
20082024:	003cb006 	br	200812e8 <__flash_rwdata_start+0xfffef9b8>
20082028:	b009883a 	mov	r4,r22
2008202c:	b80b883a 	mov	r5,r23
20082030:	d9801e04 	addi	r6,sp,120
20082034:	008787c0 	call	2008787c <__sprint_r>
20082038:	103c511e 	bne	r2,zero,20081180 <__flash_rwdata_start+0xfffef850>
2008203c:	d8c02017 	ldw	r3,128(sp)
20082040:	d8802787 	ldb	r2,158(sp)
20082044:	da000404 	addi	r8,sp,16
20082048:	003ceb06 	br	200813f8 <__flash_rwdata_start+0xfffefac8>
2008204c:	1cc00017 	ldw	r19,0(r3)
20082050:	dac02d17 	ldw	r11,180(sp)
20082054:	9839d7fa 	srai	fp,r19,31
20082058:	5ac00104 	addi	r11,r11,4
2008205c:	dac02d15 	stw	r11,180(sp)
20082060:	e005883a 	mov	r2,fp
20082064:	003c8106 	br	2008126c <__flash_rwdata_start+0xfffef93c>
20082068:	657fffc4 	addi	r21,r12,-1
2008206c:	057f5d0e 	bge	zero,r21,20081de4 <__flash_rwdata_start+0xffff04b4>
20082070:	07000404 	movi	fp,16
20082074:	e540900e 	bge	fp,r21,200822b8 <___vfprintf_internal_r+0x1508>
20082078:	01000034 	movhi	r4,0
2008207c:	21002a84 	addi	r4,r4,170
20082080:	d9002c15 	stw	r4,176(sp)
20082084:	01c001c4 	movi	r7,7
20082088:	00000306 	br	20082098 <___vfprintf_internal_r+0x12e8>
2008208c:	94800204 	addi	r18,r18,8
20082090:	ad7ffc04 	addi	r21,r21,-16
20082094:	e5408b0e 	bge	fp,r21,200822c4 <___vfprintf_internal_r+0x1514>
20082098:	18c00404 	addi	r3,r3,16
2008209c:	84000044 	addi	r16,r16,1
200820a0:	95000015 	stw	r20,0(r18)
200820a4:	97000115 	stw	fp,4(r18)
200820a8:	d8c02015 	stw	r3,128(sp)
200820ac:	dc001f15 	stw	r16,124(sp)
200820b0:	3c3ff60e 	bge	r7,r16,2008208c <__flash_rwdata_start+0xffff075c>
200820b4:	b009883a 	mov	r4,r22
200820b8:	b80b883a 	mov	r5,r23
200820bc:	d9801e04 	addi	r6,sp,120
200820c0:	d9c03d15 	stw	r7,244(sp)
200820c4:	008787c0 	call	2008787c <__sprint_r>
200820c8:	d9c03d17 	ldw	r7,244(sp)
200820cc:	103c2c1e 	bne	r2,zero,20081180 <__flash_rwdata_start+0xfffef850>
200820d0:	d8c02017 	ldw	r3,128(sp)
200820d4:	dc001f17 	ldw	r16,124(sp)
200820d8:	dc800404 	addi	r18,sp,16
200820dc:	003fec06 	br	20082090 <__flash_rwdata_start+0xffff0760>
200820e0:	dac02d17 	ldw	r11,180(sp)
200820e4:	0039883a 	mov	fp,zero
200820e8:	0005883a 	mov	r2,zero
200820ec:	5cc00017 	ldw	r19,0(r11)
200820f0:	5ac00104 	addi	r11,r11,4
200820f4:	dac02d15 	stw	r11,180(sp)
200820f8:	9807883a 	mov	r3,r19
200820fc:	003d5b06 	br	2008166c <__flash_rwdata_start+0xfffefd3c>
20082100:	db002d17 	ldw	r12,180(sp)
20082104:	0039883a 	mov	fp,zero
20082108:	00800044 	movi	r2,1
2008210c:	64c00017 	ldw	r19,0(r12)
20082110:	63000104 	addi	r12,r12,4
20082114:	db002d15 	stw	r12,180(sp)
20082118:	9807883a 	mov	r3,r19
2008211c:	003d5306 	br	2008166c <__flash_rwdata_start+0xfffefd3c>
20082120:	00800084 	movi	r2,2
20082124:	9f06b03a 	or	r3,r19,fp
20082128:	003d5006 	br	2008166c <__flash_rwdata_start+0xfffefd3c>
2008212c:	10803fcc 	andi	r2,r2,255
20082130:	1080201c 	xori	r2,r2,128
20082134:	10bfe004 	addi	r2,r2,-128
20082138:	01000c04 	movi	r4,48
2008213c:	1101a526 	beq	r2,r4,200827d4 <___vfprintf_internal_r+0x1a24>
20082140:	dac03117 	ldw	r11,196(sp)
20082144:	db002817 	ldw	r12,160(sp)
20082148:	193fffc5 	stb	r4,-1(r3)
2008214c:	5affffc4 	addi	r11,r11,-1
20082150:	dac03115 	stw	r11,196(sp)
20082154:	62e5c83a 	sub	r18,r12,r11
20082158:	003c6306 	br	200812e8 <__flash_rwdata_start+0xfffef9b8>
2008215c:	b009883a 	mov	r4,r22
20082160:	b80b883a 	mov	r5,r23
20082164:	d9801e04 	addi	r6,sp,120
20082168:	008787c0 	call	2008787c <__sprint_r>
2008216c:	103c041e 	bne	r2,zero,20081180 <__flash_rwdata_start+0xfffef850>
20082170:	d8c02017 	ldw	r3,128(sp)
20082174:	da000404 	addi	r8,sp,16
20082178:	db003117 	ldw	r12,196(sp)
2008217c:	dac03417 	ldw	r11,208(sp)
20082180:	d8802617 	ldw	r2,152(sp)
20082184:	62e5883a 	add	r18,r12,r11
20082188:	db003317 	ldw	r12,204(sp)
2008218c:	13000216 	blt	r2,r12,20082198 <___vfprintf_internal_r+0x13e8>
20082190:	8900004c 	andi	r4,r17,1
20082194:	20000c26 	beq	r4,zero,200821c8 <___vfprintf_internal_r+0x1418>
20082198:	dac03817 	ldw	r11,224(sp)
2008219c:	d9001f17 	ldw	r4,124(sp)
200821a0:	db003517 	ldw	r12,212(sp)
200821a4:	1ac7883a 	add	r3,r3,r11
200821a8:	21000044 	addi	r4,r4,1
200821ac:	43000015 	stw	r12,0(r8)
200821b0:	42c00115 	stw	r11,4(r8)
200821b4:	d8c02015 	stw	r3,128(sp)
200821b8:	d9001f15 	stw	r4,124(sp)
200821bc:	014001c4 	movi	r5,7
200821c0:	2901cc16 	blt	r5,r4,200828f4 <___vfprintf_internal_r+0x1b44>
200821c4:	42000204 	addi	r8,r8,8
200821c8:	dac03317 	ldw	r11,204(sp)
200821cc:	8489c83a 	sub	r4,r16,r18
200821d0:	5885c83a 	sub	r2,r11,r2
200821d4:	1021883a 	mov	r16,r2
200821d8:	2080010e 	bge	r4,r2,200821e0 <___vfprintf_internal_r+0x1430>
200821dc:	2021883a 	mov	r16,r4
200821e0:	04000a0e 	bge	zero,r16,2008220c <___vfprintf_internal_r+0x145c>
200821e4:	d9001f17 	ldw	r4,124(sp)
200821e8:	1c07883a 	add	r3,r3,r16
200821ec:	44800015 	stw	r18,0(r8)
200821f0:	21000044 	addi	r4,r4,1
200821f4:	44000115 	stw	r16,4(r8)
200821f8:	d8c02015 	stw	r3,128(sp)
200821fc:	d9001f15 	stw	r4,124(sp)
20082200:	014001c4 	movi	r5,7
20082204:	2901e316 	blt	r5,r4,20082994 <___vfprintf_internal_r+0x1be4>
20082208:	42000204 	addi	r8,r8,8
2008220c:	8001df16 	blt	r16,zero,2008298c <___vfprintf_internal_r+0x1bdc>
20082210:	1421c83a 	sub	r16,r2,r16
20082214:	043ccc0e 	bge	zero,r16,20081548 <__flash_rwdata_start+0xfffefc18>
20082218:	04800404 	movi	r18,16
2008221c:	d8801f17 	ldw	r2,124(sp)
20082220:	943efc0e 	bge	r18,r16,20081e14 <__flash_rwdata_start+0xffff04e4>
20082224:	01400034 	movhi	r5,0
20082228:	29402a84 	addi	r5,r5,170
2008222c:	d9402c15 	stw	r5,176(sp)
20082230:	054001c4 	movi	r21,7
20082234:	00000306 	br	20082244 <___vfprintf_internal_r+0x1494>
20082238:	42000204 	addi	r8,r8,8
2008223c:	843ffc04 	addi	r16,r16,-16
20082240:	943ef70e 	bge	r18,r16,20081e20 <__flash_rwdata_start+0xffff04f0>
20082244:	18c00404 	addi	r3,r3,16
20082248:	10800044 	addi	r2,r2,1
2008224c:	45000015 	stw	r20,0(r8)
20082250:	44800115 	stw	r18,4(r8)
20082254:	d8c02015 	stw	r3,128(sp)
20082258:	d8801f15 	stw	r2,124(sp)
2008225c:	a8bff60e 	bge	r21,r2,20082238 <__flash_rwdata_start+0xffff0908>
20082260:	b009883a 	mov	r4,r22
20082264:	b80b883a 	mov	r5,r23
20082268:	d9801e04 	addi	r6,sp,120
2008226c:	008787c0 	call	2008787c <__sprint_r>
20082270:	103bc31e 	bne	r2,zero,20081180 <__flash_rwdata_start+0xfffef850>
20082274:	d8c02017 	ldw	r3,128(sp)
20082278:	d8801f17 	ldw	r2,124(sp)
2008227c:	da000404 	addi	r8,sp,16
20082280:	003fee06 	br	2008223c <__flash_rwdata_start+0xffff090c>
20082284:	8888703a 	and	r4,r17,r2
20082288:	203eab1e 	bne	r4,zero,20081d38 <__flash_rwdata_start+0xffff0408>
2008228c:	dc001f17 	ldw	r16,124(sp)
20082290:	db003117 	ldw	r12,196(sp)
20082294:	40800115 	stw	r2,4(r8)
20082298:	84000044 	addi	r16,r16,1
2008229c:	43000015 	stw	r12,0(r8)
200822a0:	d8c02015 	stw	r3,128(sp)
200822a4:	dc001f15 	stw	r16,124(sp)
200822a8:	008001c4 	movi	r2,7
200822ac:	14000e16 	blt	r2,r16,200822e8 <___vfprintf_internal_r+0x1538>
200822b0:	44800204 	addi	r18,r8,8
200822b4:	003ecb06 	br	20081de4 <__flash_rwdata_start+0xffff04b4>
200822b8:	00800034 	movhi	r2,0
200822bc:	10802a84 	addi	r2,r2,170
200822c0:	d8802c15 	stw	r2,176(sp)
200822c4:	dac02c17 	ldw	r11,176(sp)
200822c8:	1d47883a 	add	r3,r3,r21
200822cc:	84000044 	addi	r16,r16,1
200822d0:	92c00015 	stw	r11,0(r18)
200822d4:	95400115 	stw	r21,4(r18)
200822d8:	d8c02015 	stw	r3,128(sp)
200822dc:	dc001f15 	stw	r16,124(sp)
200822e0:	008001c4 	movi	r2,7
200822e4:	143ebe0e 	bge	r2,r16,20081de0 <__flash_rwdata_start+0xffff04b0>
200822e8:	b009883a 	mov	r4,r22
200822ec:	b80b883a 	mov	r5,r23
200822f0:	d9801e04 	addi	r6,sp,120
200822f4:	008787c0 	call	2008787c <__sprint_r>
200822f8:	103ba11e 	bne	r2,zero,20081180 <__flash_rwdata_start+0xfffef850>
200822fc:	d8c02017 	ldw	r3,128(sp)
20082300:	dc001f17 	ldw	r16,124(sp)
20082304:	dc800404 	addi	r18,sp,16
20082308:	003eb606 	br	20081de4 <__flash_rwdata_start+0xffff04b4>
2008230c:	b009883a 	mov	r4,r22
20082310:	b80b883a 	mov	r5,r23
20082314:	d9801e04 	addi	r6,sp,120
20082318:	008787c0 	call	2008787c <__sprint_r>
2008231c:	103b981e 	bne	r2,zero,20081180 <__flash_rwdata_start+0xfffef850>
20082320:	d8c02017 	ldw	r3,128(sp)
20082324:	dc001f17 	ldw	r16,124(sp)
20082328:	da000404 	addi	r8,sp,16
2008232c:	003e8d06 	br	20081d64 <__flash_rwdata_start+0xffff0434>
20082330:	b009883a 	mov	r4,r22
20082334:	b80b883a 	mov	r5,r23
20082338:	d9801e04 	addi	r6,sp,120
2008233c:	008787c0 	call	2008787c <__sprint_r>
20082340:	103b8f1e 	bne	r2,zero,20081180 <__flash_rwdata_start+0xfffef850>
20082344:	d8c02017 	ldw	r3,128(sp)
20082348:	dc001f17 	ldw	r16,124(sp)
2008234c:	dc800404 	addi	r18,sp,16
20082350:	003e8f06 	br	20081d90 <__flash_rwdata_start+0xffff0460>
20082354:	db001e04 	addi	r12,sp,120
20082358:	0025883a 	mov	r18,zero
2008235c:	db003115 	stw	r12,196(sp)
20082360:	003be106 	br	200812e8 <__flash_rwdata_start+0xfffef9b8>
20082364:	b009883a 	mov	r4,r22
20082368:	b80b883a 	mov	r5,r23
2008236c:	d9801e04 	addi	r6,sp,120
20082370:	008787c0 	call	2008787c <__sprint_r>
20082374:	103b821e 	bne	r2,zero,20081180 <__flash_rwdata_start+0xfffef850>
20082378:	d8c02017 	ldw	r3,128(sp)
2008237c:	da000404 	addi	r8,sp,16
20082380:	003c3b06 	br	20081470 <__flash_rwdata_start+0xfffefb40>
20082384:	04e7c83a 	sub	r19,zero,r19
20082388:	9804c03a 	cmpne	r2,r19,zero
2008238c:	0739c83a 	sub	fp,zero,fp
20082390:	e0b9c83a 	sub	fp,fp,r2
20082394:	05400b44 	movi	r21,45
20082398:	dd402785 	stb	r21,158(sp)
2008239c:	da403215 	stw	r9,200(sp)
200823a0:	00800044 	movi	r2,1
200823a4:	9f06b03a 	or	r3,r19,fp
200823a8:	003bb506 	br	20081280 <__flash_rwdata_start+0xfffef950>
200823ac:	da003f15 	stw	r8,252(sp)
200823b0:	da403e15 	stw	r9,248(sp)
200823b4:	008752c0 	call	2008752c <__fpclassifyd>
200823b8:	da003f17 	ldw	r8,252(sp)
200823bc:	da403e17 	ldw	r9,248(sp)
200823c0:	1000ce26 	beq	r2,zero,200826fc <___vfprintf_internal_r+0x194c>
200823c4:	057ff7c4 	movi	r21,-33
200823c8:	00bfffc4 	movi	r2,-1
200823cc:	856a703a 	and	r21,r16,r21
200823d0:	4881e826 	beq	r9,r2,20082b74 <___vfprintf_internal_r+0x1dc4>
200823d4:	008011c4 	movi	r2,71
200823d8:	a881e326 	beq	r21,r2,20082b68 <___vfprintf_internal_r+0x1db8>
200823dc:	db003917 	ldw	r12,228(sp)
200823e0:	8ac04014 	ori	r11,r17,256
200823e4:	dac02d15 	stw	r11,180(sp)
200823e8:	6001ed16 	blt	r12,zero,20082ba0 <___vfprintf_internal_r+0x1df0>
200823ec:	dc803917 	ldw	r18,228(sp)
200823f0:	d8002b05 	stb	zero,172(sp)
200823f4:	00801984 	movi	r2,102
200823f8:	80811826 	beq	r16,r2,2008285c <___vfprintf_internal_r+0x1aac>
200823fc:	00801184 	movi	r2,70
20082400:	80811626 	beq	r16,r2,2008285c <___vfprintf_internal_r+0x1aac>
20082404:	00801144 	movi	r2,69
20082408:	a881e926 	beq	r21,r2,20082bb0 <___vfprintf_internal_r+0x1e00>
2008240c:	4839883a 	mov	fp,r9
20082410:	d8802604 	addi	r2,sp,152
20082414:	d8800115 	stw	r2,4(sp)
20082418:	d9403717 	ldw	r5,220(sp)
2008241c:	d8802504 	addi	r2,sp,148
20082420:	d8800215 	stw	r2,8(sp)
20082424:	d8802104 	addi	r2,sp,132
20082428:	df000015 	stw	fp,0(sp)
2008242c:	d8800315 	stw	r2,12(sp)
20082430:	b009883a 	mov	r4,r22
20082434:	900d883a 	mov	r6,r18
20082438:	01c00084 	movi	r7,2
2008243c:	da003f15 	stw	r8,252(sp)
20082440:	da403e15 	stw	r9,248(sp)
20082444:	00831340 	call	20083134 <_dtoa_r>
20082448:	d8803115 	stw	r2,196(sp)
2008244c:	008019c4 	movi	r2,103
20082450:	da003f17 	ldw	r8,252(sp)
20082454:	da403e17 	ldw	r9,248(sp)
20082458:	80800226 	beq	r16,r2,20082464 <___vfprintf_internal_r+0x16b4>
2008245c:	008011c4 	movi	r2,71
20082460:	8081101e 	bne	r16,r2,200828a4 <___vfprintf_internal_r+0x1af4>
20082464:	8880004c 	andi	r2,r17,1
20082468:	1001dd26 	beq	r2,zero,20082be0 <___vfprintf_internal_r+0x1e30>
2008246c:	db003117 	ldw	r12,196(sp)
20082470:	6715883a 	add	r10,r12,fp
20082474:	d9003717 	ldw	r4,220(sp)
20082478:	900b883a 	mov	r5,r18
2008247c:	000d883a 	mov	r6,zero
20082480:	000f883a 	mov	r7,zero
20082484:	da003f15 	stw	r8,252(sp)
20082488:	da403e15 	stw	r9,248(sp)
2008248c:	da803d15 	stw	r10,244(sp)
20082490:	008b3200 	call	2008b320 <__eqdf2>
20082494:	da003f17 	ldw	r8,252(sp)
20082498:	da403e17 	ldw	r9,248(sp)
2008249c:	da803d17 	ldw	r10,244(sp)
200824a0:	10016526 	beq	r2,zero,20082a38 <___vfprintf_internal_r+0x1c88>
200824a4:	d8802117 	ldw	r2,132(sp)
200824a8:	1280062e 	bgeu	r2,r10,200824c4 <___vfprintf_internal_r+0x1714>
200824ac:	01000c04 	movi	r4,48
200824b0:	10c00044 	addi	r3,r2,1
200824b4:	d8c02115 	stw	r3,132(sp)
200824b8:	11000005 	stb	r4,0(r2)
200824bc:	d8802117 	ldw	r2,132(sp)
200824c0:	12bffb36 	bltu	r2,r10,200824b0 <__flash_rwdata_start+0xffff0b80>
200824c4:	db003117 	ldw	r12,196(sp)
200824c8:	1305c83a 	sub	r2,r2,r12
200824cc:	d8803315 	stw	r2,204(sp)
200824d0:	008011c4 	movi	r2,71
200824d4:	a8814d26 	beq	r21,r2,20082a0c <___vfprintf_internal_r+0x1c5c>
200824d8:	00801944 	movi	r2,101
200824dc:	1402060e 	bge	r2,r16,20082cf8 <___vfprintf_internal_r+0x1f48>
200824e0:	00801984 	movi	r2,102
200824e4:	8081b426 	beq	r16,r2,20082bb8 <___vfprintf_internal_r+0x1e08>
200824e8:	db002617 	ldw	r12,152(sp)
200824ec:	db003415 	stw	r12,208(sp)
200824f0:	db003417 	ldw	r12,208(sp)
200824f4:	dac03317 	ldw	r11,204(sp)
200824f8:	62c1a016 	blt	r12,r11,20082b7c <___vfprintf_internal_r+0x1dcc>
200824fc:	8c40004c 	andi	r17,r17,1
20082500:	8801bf1e 	bne	r17,zero,20082c00 <___vfprintf_internal_r+0x1e50>
20082504:	6005883a 	mov	r2,r12
20082508:	6001b316 	blt	r12,zero,20082bd8 <___vfprintf_internal_r+0x1e28>
2008250c:	dc803417 	ldw	r18,208(sp)
20082510:	df002b07 	ldb	fp,172(sp)
20082514:	e0012e1e 	bne	fp,zero,200829d0 <___vfprintf_internal_r+0x1c20>
20082518:	dc402d17 	ldw	r17,180(sp)
2008251c:	dd402783 	ldbu	r21,158(sp)
20082520:	d8802b15 	stw	r2,172(sp)
20082524:	dcc02d15 	stw	r19,180(sp)
20082528:	d8003215 	stw	zero,200(sp)
2008252c:	003b7306 	br	200812fc <__flash_rwdata_start+0xfffef9cc>
20082530:	00800084 	movi	r2,2
20082534:	003c4d06 	br	2008166c <__flash_rwdata_start+0xfffefd3c>
20082538:	8880040c 	andi	r2,r17,16
2008253c:	1000091e 	bne	r2,zero,20082564 <___vfprintf_internal_r+0x17b4>
20082540:	8c40100c 	andi	r17,r17,64
20082544:	88000726 	beq	r17,zero,20082564 <___vfprintf_internal_r+0x17b4>
20082548:	db002d17 	ldw	r12,180(sp)
2008254c:	dac02f17 	ldw	r11,188(sp)
20082550:	60800017 	ldw	r2,0(r12)
20082554:	63000104 	addi	r12,r12,4
20082558:	db002d15 	stw	r12,180(sp)
2008255c:	12c0000d 	sth	r11,0(r2)
20082560:	003a4e06 	br	20080e9c <__flash_rwdata_start+0xfffef56c>
20082564:	db002d17 	ldw	r12,180(sp)
20082568:	dac02f17 	ldw	r11,188(sp)
2008256c:	60800017 	ldw	r2,0(r12)
20082570:	63000104 	addi	r12,r12,4
20082574:	db002d15 	stw	r12,180(sp)
20082578:	12c00015 	stw	r11,0(r2)
2008257c:	003a4706 	br	20080e9c <__flash_rwdata_start+0xfffef56c>
20082580:	1c000007 	ldb	r16,0(r3)
20082584:	1805883a 	mov	r2,r3
20082588:	003a6e06 	br	20080f44 <__flash_rwdata_start+0xfffef614>
2008258c:	88c0100c 	andi	r3,r17,64
20082590:	18006b26 	beq	r3,zero,20082740 <___vfprintf_internal_r+0x1990>
20082594:	dac02d17 	ldw	r11,180(sp)
20082598:	14c0000b 	ldhu	r19,0(r2)
2008259c:	0039883a 	mov	fp,zero
200825a0:	5ac00104 	addi	r11,r11,4
200825a4:	dac02d15 	stw	r11,180(sp)
200825a8:	003cb206 	br	20081874 <__flash_rwdata_start+0xfffeff44>
200825ac:	01000034 	movhi	r4,0
200825b0:	21002a84 	addi	r4,r4,170
200825b4:	d9002c15 	stw	r4,176(sp)
200825b8:	dac02c17 	ldw	r11,176(sp)
200825bc:	1c87883a 	add	r3,r3,r18
200825c0:	10800044 	addi	r2,r2,1
200825c4:	42c00015 	stw	r11,0(r8)
200825c8:	44800115 	stw	r18,4(r8)
200825cc:	d8c02015 	stw	r3,128(sp)
200825d0:	d8801f15 	stw	r2,124(sp)
200825d4:	010001c4 	movi	r4,7
200825d8:	20bee016 	blt	r4,r2,2008215c <__flash_rwdata_start+0xffff082c>
200825dc:	42000204 	addi	r8,r8,8
200825e0:	003ee506 	br	20082178 <__flash_rwdata_start+0xffff0848>
200825e4:	01000034 	movhi	r4,0
200825e8:	21002a84 	addi	r4,r4,170
200825ec:	d9002c15 	stw	r4,176(sp)
200825f0:	003bbe06 	br	200814ec <__flash_rwdata_start+0xfffefbbc>
200825f4:	b009883a 	mov	r4,r22
200825f8:	b80b883a 	mov	r5,r23
200825fc:	d9801e04 	addi	r6,sp,120
20082600:	008787c0 	call	2008787c <__sprint_r>
20082604:	103ade1e 	bne	r2,zero,20081180 <__flash_rwdata_start+0xfffef850>
20082608:	d8c02017 	ldw	r3,128(sp)
2008260c:	da000404 	addi	r8,sp,16
20082610:	003d6b06 	br	20081bc0 <__flash_rwdata_start+0xffff0290>
20082614:	d8801f17 	ldw	r2,124(sp)
20082618:	03000034 	movhi	r12,0
2008261c:	01000044 	movi	r4,1
20082620:	18c00044 	addi	r3,r3,1
20082624:	10800044 	addi	r2,r2,1
20082628:	63002a04 	addi	r12,r12,168
2008262c:	41000115 	stw	r4,4(r8)
20082630:	43000015 	stw	r12,0(r8)
20082634:	d8c02015 	stw	r3,128(sp)
20082638:	d8801f15 	stw	r2,124(sp)
2008263c:	010001c4 	movi	r4,7
20082640:	20804916 	blt	r4,r2,20082768 <___vfprintf_internal_r+0x19b8>
20082644:	42000204 	addi	r8,r8,8
20082648:	8000041e 	bne	r16,zero,2008265c <___vfprintf_internal_r+0x18ac>
2008264c:	dac03317 	ldw	r11,204(sp)
20082650:	5800021e 	bne	r11,zero,2008265c <___vfprintf_internal_r+0x18ac>
20082654:	8880004c 	andi	r2,r17,1
20082658:	103bbb26 	beq	r2,zero,20081548 <__flash_rwdata_start+0xfffefc18>
2008265c:	db003817 	ldw	r12,224(sp)
20082660:	d8801f17 	ldw	r2,124(sp)
20082664:	dac03517 	ldw	r11,212(sp)
20082668:	1b07883a 	add	r3,r3,r12
2008266c:	10800044 	addi	r2,r2,1
20082670:	42c00015 	stw	r11,0(r8)
20082674:	43000115 	stw	r12,4(r8)
20082678:	d8c02015 	stw	r3,128(sp)
2008267c:	d8801f15 	stw	r2,124(sp)
20082680:	010001c4 	movi	r4,7
20082684:	20812e16 	blt	r4,r2,20082b40 <___vfprintf_internal_r+0x1d90>
20082688:	42000204 	addi	r8,r8,8
2008268c:	0421c83a 	sub	r16,zero,r16
20082690:	04005c0e 	bge	zero,r16,20082804 <___vfprintf_internal_r+0x1a54>
20082694:	04800404 	movi	r18,16
20082698:	94009f0e 	bge	r18,r16,20082918 <___vfprintf_internal_r+0x1b68>
2008269c:	01000034 	movhi	r4,0
200826a0:	21002a84 	addi	r4,r4,170
200826a4:	d9002c15 	stw	r4,176(sp)
200826a8:	054001c4 	movi	r21,7
200826ac:	00000306 	br	200826bc <___vfprintf_internal_r+0x190c>
200826b0:	42000204 	addi	r8,r8,8
200826b4:	843ffc04 	addi	r16,r16,-16
200826b8:	94009a0e 	bge	r18,r16,20082924 <___vfprintf_internal_r+0x1b74>
200826bc:	18c00404 	addi	r3,r3,16
200826c0:	10800044 	addi	r2,r2,1
200826c4:	45000015 	stw	r20,0(r8)
200826c8:	44800115 	stw	r18,4(r8)
200826cc:	d8c02015 	stw	r3,128(sp)
200826d0:	d8801f15 	stw	r2,124(sp)
200826d4:	a8bff60e 	bge	r21,r2,200826b0 <__flash_rwdata_start+0xffff0d80>
200826d8:	b009883a 	mov	r4,r22
200826dc:	b80b883a 	mov	r5,r23
200826e0:	d9801e04 	addi	r6,sp,120
200826e4:	008787c0 	call	2008787c <__sprint_r>
200826e8:	103aa51e 	bne	r2,zero,20081180 <__flash_rwdata_start+0xfffef850>
200826ec:	d8c02017 	ldw	r3,128(sp)
200826f0:	d8801f17 	ldw	r2,124(sp)
200826f4:	da000404 	addi	r8,sp,16
200826f8:	003fee06 	br	200826b4 <__flash_rwdata_start+0xffff0d84>
200826fc:	008011c4 	movi	r2,71
20082700:	1400be16 	blt	r2,r16,200829fc <___vfprintf_internal_r+0x1c4c>
20082704:	03000034 	movhi	r12,0
20082708:	63001c04 	addi	r12,r12,112
2008270c:	db003115 	stw	r12,196(sp)
20082710:	00c000c4 	movi	r3,3
20082714:	00bfdfc4 	movi	r2,-129
20082718:	d8c02b15 	stw	r3,172(sp)
2008271c:	88a2703a 	and	r17,r17,r2
20082720:	dd402783 	ldbu	r21,158(sp)
20082724:	dcc02d15 	stw	r19,180(sp)
20082728:	1825883a 	mov	r18,r3
2008272c:	d8003215 	stw	zero,200(sp)
20082730:	d8003415 	stw	zero,208(sp)
20082734:	003af106 	br	200812fc <__flash_rwdata_start+0xfffef9cc>
20082738:	4825883a 	mov	r18,r9
2008273c:	003c9306 	br	2008198c <__flash_rwdata_start+0xffff005c>
20082740:	db002d17 	ldw	r12,180(sp)
20082744:	14c00017 	ldw	r19,0(r2)
20082748:	0039883a 	mov	fp,zero
2008274c:	63000104 	addi	r12,r12,4
20082750:	db002d15 	stw	r12,180(sp)
20082754:	003c4706 	br	20081874 <__flash_rwdata_start+0xfffeff44>
20082758:	00800034 	movhi	r2,0
2008275c:	10801a04 	addi	r2,r2,104
20082760:	d8803115 	stw	r2,196(sp)
20082764:	003bf106 	br	2008172c <__flash_rwdata_start+0xfffefdfc>
20082768:	b009883a 	mov	r4,r22
2008276c:	b80b883a 	mov	r5,r23
20082770:	d9801e04 	addi	r6,sp,120
20082774:	008787c0 	call	2008787c <__sprint_r>
20082778:	103a811e 	bne	r2,zero,20081180 <__flash_rwdata_start+0xfffef850>
2008277c:	dc002617 	ldw	r16,152(sp)
20082780:	d8c02017 	ldw	r3,128(sp)
20082784:	da000404 	addi	r8,sp,16
20082788:	003faf06 	br	20082648 <__flash_rwdata_start+0xffff0d18>
2008278c:	db002e17 	ldw	r12,184(sp)
20082790:	1805883a 	mov	r2,r3
20082794:	dac02d15 	stw	r11,180(sp)
20082798:	0319c83a 	sub	r12,zero,r12
2008279c:	db002e15 	stw	r12,184(sp)
200827a0:	003a8206 	br	200811ac <__flash_rwdata_start+0xfffef87c>
200827a4:	18800044 	addi	r2,r3,1
200827a8:	8c400814 	ori	r17,r17,32
200827ac:	1c000047 	ldb	r16,1(r3)
200827b0:	0039e406 	br	20080f44 <__flash_rwdata_start+0xfffef614>
200827b4:	b009883a 	mov	r4,r22
200827b8:	b80b883a 	mov	r5,r23
200827bc:	d9801e04 	addi	r6,sp,120
200827c0:	008787c0 	call	2008787c <__sprint_r>
200827c4:	103a6e1e 	bne	r2,zero,20081180 <__flash_rwdata_start+0xfffef850>
200827c8:	d8c02017 	ldw	r3,128(sp)
200827cc:	da000404 	addi	r8,sp,16
200827d0:	003d0c06 	br	20081c04 <__flash_rwdata_start+0xffff02d4>
200827d4:	db002817 	ldw	r12,160(sp)
200827d8:	d8c03117 	ldw	r3,196(sp)
200827dc:	60e5c83a 	sub	r18,r12,r3
200827e0:	003ac106 	br	200812e8 <__flash_rwdata_start+0xfffef9b8>
200827e4:	b009883a 	mov	r4,r22
200827e8:	b80b883a 	mov	r5,r23
200827ec:	d9801e04 	addi	r6,sp,120
200827f0:	008787c0 	call	2008787c <__sprint_r>
200827f4:	103a621e 	bne	r2,zero,20081180 <__flash_rwdata_start+0xfffef850>
200827f8:	d8c02017 	ldw	r3,128(sp)
200827fc:	d8801f17 	ldw	r2,124(sp)
20082800:	da000404 	addi	r8,sp,16
20082804:	db003317 	ldw	r12,204(sp)
20082808:	dac03117 	ldw	r11,196(sp)
2008280c:	10800044 	addi	r2,r2,1
20082810:	1b07883a 	add	r3,r3,r12
20082814:	42c00015 	stw	r11,0(r8)
20082818:	43000115 	stw	r12,4(r8)
2008281c:	d8c02015 	stw	r3,128(sp)
20082820:	d8801f15 	stw	r2,124(sp)
20082824:	010001c4 	movi	r4,7
20082828:	20bb460e 	bge	r4,r2,20081544 <__flash_rwdata_start+0xfffefc14>
2008282c:	003d8506 	br	20081e44 <__flash_rwdata_start+0xffff0514>
20082830:	da003f15 	stw	r8,252(sp)
20082834:	0080d180 	call	20080d18 <strlen>
20082838:	1025883a 	mov	r18,r2
2008283c:	da003f17 	ldw	r8,252(sp)
20082840:	903c540e 	bge	r18,zero,20081994 <__flash_rwdata_start+0xffff0064>
20082844:	0005883a 	mov	r2,zero
20082848:	003c5206 	br	20081994 <__flash_rwdata_start+0xffff0064>
2008284c:	01000034 	movhi	r4,0
20082850:	21002e84 	addi	r4,r4,186
20082854:	d9003615 	stw	r4,216(sp)
20082858:	003adc06 	br	200813cc <__flash_rwdata_start+0xfffefa9c>
2008285c:	d8802604 	addi	r2,sp,152
20082860:	d8800115 	stw	r2,4(sp)
20082864:	d9403717 	ldw	r5,220(sp)
20082868:	d8802504 	addi	r2,sp,148
2008286c:	d8800215 	stw	r2,8(sp)
20082870:	d8802104 	addi	r2,sp,132
20082874:	da400015 	stw	r9,0(sp)
20082878:	d8800315 	stw	r2,12(sp)
2008287c:	b009883a 	mov	r4,r22
20082880:	900d883a 	mov	r6,r18
20082884:	01c000c4 	movi	r7,3
20082888:	da003f15 	stw	r8,252(sp)
2008288c:	da403e15 	stw	r9,248(sp)
20082890:	00831340 	call	20083134 <_dtoa_r>
20082894:	da403e17 	ldw	r9,248(sp)
20082898:	da003f17 	ldw	r8,252(sp)
2008289c:	d8803115 	stw	r2,196(sp)
200828a0:	4839883a 	mov	fp,r9
200828a4:	dac03117 	ldw	r11,196(sp)
200828a8:	00801184 	movi	r2,70
200828ac:	5f15883a 	add	r10,r11,fp
200828b0:	a8bef01e 	bne	r21,r2,20082474 <__flash_rwdata_start+0xffff0b44>
200828b4:	59000007 	ldb	r4,0(r11)
200828b8:	00800c04 	movi	r2,48
200828bc:	2080d526 	beq	r4,r2,20082c14 <___vfprintf_internal_r+0x1e64>
200828c0:	d8c02617 	ldw	r3,152(sp)
200828c4:	50d5883a 	add	r10,r10,r3
200828c8:	003eea06 	br	20082474 <__flash_rwdata_start+0xffff0b44>
200828cc:	0025883a 	mov	r18,zero
200828d0:	003db306 	br	20081fa0 <__flash_rwdata_start+0xffff0670>
200828d4:	b009883a 	mov	r4,r22
200828d8:	b80b883a 	mov	r5,r23
200828dc:	d9801e04 	addi	r6,sp,120
200828e0:	008787c0 	call	2008787c <__sprint_r>
200828e4:	103a261e 	bne	r2,zero,20081180 <__flash_rwdata_start+0xfffef850>
200828e8:	d8c02017 	ldw	r3,128(sp)
200828ec:	da000404 	addi	r8,sp,16
200828f0:	003daa06 	br	20081f9c <__flash_rwdata_start+0xffff066c>
200828f4:	b009883a 	mov	r4,r22
200828f8:	b80b883a 	mov	r5,r23
200828fc:	d9801e04 	addi	r6,sp,120
20082900:	008787c0 	call	2008787c <__sprint_r>
20082904:	103a1e1e 	bne	r2,zero,20081180 <__flash_rwdata_start+0xfffef850>
20082908:	d8802617 	ldw	r2,152(sp)
2008290c:	d8c02017 	ldw	r3,128(sp)
20082910:	da000404 	addi	r8,sp,16
20082914:	003e2c06 	br	200821c8 <__flash_rwdata_start+0xffff0898>
20082918:	03000034 	movhi	r12,0
2008291c:	63002a84 	addi	r12,r12,170
20082920:	db002c15 	stw	r12,176(sp)
20082924:	dac02c17 	ldw	r11,176(sp)
20082928:	1c07883a 	add	r3,r3,r16
2008292c:	10800044 	addi	r2,r2,1
20082930:	42c00015 	stw	r11,0(r8)
20082934:	44000115 	stw	r16,4(r8)
20082938:	d8c02015 	stw	r3,128(sp)
2008293c:	d8801f15 	stw	r2,124(sp)
20082940:	010001c4 	movi	r4,7
20082944:	20bfa716 	blt	r4,r2,200827e4 <__flash_rwdata_start+0xffff0eb4>
20082948:	42000204 	addi	r8,r8,8
2008294c:	003fad06 	br	20082804 <__flash_rwdata_start+0xffff0ed4>
20082950:	00800184 	movi	r2,6
20082954:	1240012e 	bgeu	r2,r9,2008295c <___vfprintf_internal_r+0x1bac>
20082958:	1013883a 	mov	r9,r2
2008295c:	4825883a 	mov	r18,r9
20082960:	4805883a 	mov	r2,r9
20082964:	4800c216 	blt	r9,zero,20082c70 <___vfprintf_internal_r+0x1ec0>
20082968:	d8802b15 	stw	r2,172(sp)
2008296c:	00800034 	movhi	r2,0
20082970:	10802804 	addi	r2,r2,160
20082974:	d8803115 	stw	r2,196(sp)
20082978:	dcc02d15 	stw	r19,180(sp)
2008297c:	d8003215 	stw	zero,200(sp)
20082980:	d8003415 	stw	zero,208(sp)
20082984:	0005883a 	mov	r2,zero
20082988:	003a6306 	br	20081318 <__flash_rwdata_start+0xfffef9e8>
2008298c:	0021883a 	mov	r16,zero
20082990:	003e1f06 	br	20082210 <__flash_rwdata_start+0xffff08e0>
20082994:	b009883a 	mov	r4,r22
20082998:	b80b883a 	mov	r5,r23
2008299c:	d9801e04 	addi	r6,sp,120
200829a0:	008787c0 	call	2008787c <__sprint_r>
200829a4:	1039f61e 	bne	r2,zero,20081180 <__flash_rwdata_start+0xfffef850>
200829a8:	d8802617 	ldw	r2,152(sp)
200829ac:	db003317 	ldw	r12,204(sp)
200829b0:	d8c02017 	ldw	r3,128(sp)
200829b4:	da000404 	addi	r8,sp,16
200829b8:	6085c83a 	sub	r2,r12,r2
200829bc:	003e1306 	br	2008220c <__flash_rwdata_start+0xffff08dc>
200829c0:	03000034 	movhi	r12,0
200829c4:	63002e84 	addi	r12,r12,186
200829c8:	db003615 	stw	r12,216(sp)
200829cc:	003b0206 	br	200815d8 <__flash_rwdata_start+0xfffefca8>
200829d0:	00c00b44 	movi	r3,45
200829d4:	d8802b15 	stw	r2,172(sp)
200829d8:	dc402d17 	ldw	r17,180(sp)
200829dc:	d8c02785 	stb	r3,158(sp)
200829e0:	dcc02d15 	stw	r19,180(sp)
200829e4:	d8003215 	stw	zero,200(sp)
200829e8:	00800b44 	movi	r2,45
200829ec:	003a4706 	br	2008130c <__flash_rwdata_start+0xfffef9dc>
200829f0:	05400b44 	movi	r21,45
200829f4:	dd402785 	stb	r21,158(sp)
200829f8:	003b4706 	br	20081718 <__flash_rwdata_start+0xfffefde8>
200829fc:	00800034 	movhi	r2,0
20082a00:	10801d04 	addi	r2,r2,116
20082a04:	d8803115 	stw	r2,196(sp)
20082a08:	003f4106 	br	20082710 <__flash_rwdata_start+0xffff0de0>
20082a0c:	d8c02617 	ldw	r3,152(sp)
20082a10:	00bfff44 	movi	r2,-3
20082a14:	18801116 	blt	r3,r2,20082a5c <___vfprintf_internal_r+0x1cac>
20082a18:	48c01016 	blt	r9,r3,20082a5c <___vfprintf_internal_r+0x1cac>
20082a1c:	d8c03415 	stw	r3,208(sp)
20082a20:	040019c4 	movi	r16,103
20082a24:	003eb206 	br	200824f0 <__flash_rwdata_start+0xffff0bc0>
20082a28:	01000034 	movhi	r4,0
20082a2c:	21002a84 	addi	r4,r4,170
20082a30:	d9002c15 	stw	r4,176(sp)
20082a34:	003cb106 	br	20081cfc <__flash_rwdata_start+0xffff03cc>
20082a38:	5005883a 	mov	r2,r10
20082a3c:	003ea106 	br	200824c4 <__flash_rwdata_start+0xffff0b94>
20082a40:	da402b15 	stw	r9,172(sp)
20082a44:	dd402783 	ldbu	r21,158(sp)
20082a48:	4825883a 	mov	r18,r9
20082a4c:	dcc02d15 	stw	r19,180(sp)
20082a50:	d8003215 	stw	zero,200(sp)
20082a54:	d8003415 	stw	zero,208(sp)
20082a58:	003a2806 	br	200812fc <__flash_rwdata_start+0xfffef9cc>
20082a5c:	843fff84 	addi	r16,r16,-2
20082a60:	1f3fffc4 	addi	fp,r3,-1
20082a64:	df002615 	stw	fp,152(sp)
20082a68:	dc0022c5 	stb	r16,139(sp)
20082a6c:	e0009816 	blt	fp,zero,20082cd0 <___vfprintf_internal_r+0x1f20>
20082a70:	00800ac4 	movi	r2,43
20082a74:	d8802305 	stb	r2,140(sp)
20082a78:	00800244 	movi	r2,9
20082a7c:	1700750e 	bge	r2,fp,20082c54 <___vfprintf_internal_r+0x1ea4>
20082a80:	dd4022c4 	addi	r21,sp,139
20082a84:	dc002c15 	stw	r16,176(sp)
20082a88:	4025883a 	mov	r18,r8
20082a8c:	a821883a 	mov	r16,r21
20082a90:	e009883a 	mov	r4,fp
20082a94:	01400284 	movi	r5,10
20082a98:	008a14c0 	call	2008a14c <__modsi3>
20082a9c:	10800c04 	addi	r2,r2,48
20082aa0:	843fffc4 	addi	r16,r16,-1
20082aa4:	e009883a 	mov	r4,fp
20082aa8:	01400284 	movi	r5,10
20082aac:	80800005 	stb	r2,0(r16)
20082ab0:	008a0f80 	call	2008a0f8 <__divsi3>
20082ab4:	1039883a 	mov	fp,r2
20082ab8:	00800244 	movi	r2,9
20082abc:	173ff416 	blt	r2,fp,20082a90 <__flash_rwdata_start+0xffff1160>
20082ac0:	9011883a 	mov	r8,r18
20082ac4:	e0800c04 	addi	r2,fp,48
20082ac8:	8025883a 	mov	r18,r16
20082acc:	913fffc4 	addi	r4,r18,-1
20082ad0:	90bfffc5 	stb	r2,-1(r18)
20082ad4:	dc002c17 	ldw	r16,176(sp)
20082ad8:	2540852e 	bgeu	r4,r21,20082cf0 <___vfprintf_internal_r+0x1f40>
20082adc:	d9402384 	addi	r5,sp,142
20082ae0:	2c8bc83a 	sub	r5,r5,r18
20082ae4:	d8c02344 	addi	r3,sp,141
20082ae8:	a94b883a 	add	r5,r21,r5
20082aec:	00000106 	br	20082af4 <___vfprintf_internal_r+0x1d44>
20082af0:	20800003 	ldbu	r2,0(r4)
20082af4:	18800005 	stb	r2,0(r3)
20082af8:	18c00044 	addi	r3,r3,1
20082afc:	21000044 	addi	r4,r4,1
20082b00:	197ffb1e 	bne	r3,r5,20082af0 <__flash_rwdata_start+0xffff11c0>
20082b04:	d8802304 	addi	r2,sp,140
20082b08:	1485c83a 	sub	r2,r2,r18
20082b0c:	d8c02344 	addi	r3,sp,141
20082b10:	1885883a 	add	r2,r3,r2
20082b14:	dac03317 	ldw	r11,204(sp)
20082b18:	156bc83a 	sub	r21,r2,r21
20082b1c:	dd403a15 	stw	r21,232(sp)
20082b20:	00800044 	movi	r2,1
20082b24:	5d65883a 	add	r18,r11,r21
20082b28:	12c0660e 	bge	r2,r11,20082cc4 <___vfprintf_internal_r+0x1f14>
20082b2c:	94800044 	addi	r18,r18,1
20082b30:	9005883a 	mov	r2,r18
20082b34:	90006116 	blt	r18,zero,20082cbc <___vfprintf_internal_r+0x1f0c>
20082b38:	d8003415 	stw	zero,208(sp)
20082b3c:	003e7406 	br	20082510 <__flash_rwdata_start+0xffff0be0>
20082b40:	b009883a 	mov	r4,r22
20082b44:	b80b883a 	mov	r5,r23
20082b48:	d9801e04 	addi	r6,sp,120
20082b4c:	008787c0 	call	2008787c <__sprint_r>
20082b50:	10398b1e 	bne	r2,zero,20081180 <__flash_rwdata_start+0xfffef850>
20082b54:	dc002617 	ldw	r16,152(sp)
20082b58:	d8c02017 	ldw	r3,128(sp)
20082b5c:	d8801f17 	ldw	r2,124(sp)
20082b60:	da000404 	addi	r8,sp,16
20082b64:	003ec906 	br	2008268c <__flash_rwdata_start+0xffff0d5c>
20082b68:	483e1c1e 	bne	r9,zero,200823dc <__flash_rwdata_start+0xffff0aac>
20082b6c:	9013883a 	mov	r9,r18
20082b70:	003e1a06 	br	200823dc <__flash_rwdata_start+0xffff0aac>
20082b74:	02400184 	movi	r9,6
20082b78:	003e1806 	br	200823dc <__flash_rwdata_start+0xffff0aac>
20082b7c:	d8c03417 	ldw	r3,208(sp)
20082b80:	00c04b0e 	bge	zero,r3,20082cb0 <___vfprintf_internal_r+0x1f00>
20082b84:	04800044 	movi	r18,1
20082b88:	dac03317 	ldw	r11,204(sp)
20082b8c:	92e5883a 	add	r18,r18,r11
20082b90:	9005883a 	mov	r2,r18
20082b94:	903e5e0e 	bge	r18,zero,20082510 <__flash_rwdata_start+0xffff0be0>
20082b98:	0005883a 	mov	r2,zero
20082b9c:	003e5c06 	br	20082510 <__flash_rwdata_start+0xffff0be0>
20082ba0:	00c00b44 	movi	r3,45
20082ba4:	64a0003c 	xorhi	r18,r12,32768
20082ba8:	d8c02b05 	stb	r3,172(sp)
20082bac:	003e1106 	br	200823f4 <__flash_rwdata_start+0xffff0ac4>
20082bb0:	4f000044 	addi	fp,r9,1
20082bb4:	003e1606 	br	20082410 <__flash_rwdata_start+0xffff0ae0>
20082bb8:	d8c02617 	ldw	r3,152(sp)
20082bbc:	d8c03415 	stw	r3,208(sp)
20082bc0:	00c0350e 	bge	zero,r3,20082c98 <___vfprintf_internal_r+0x1ee8>
20082bc4:	4800081e 	bne	r9,zero,20082be8 <___vfprintf_internal_r+0x1e38>
20082bc8:	8c40004c 	andi	r17,r17,1
20082bcc:	8800061e 	bne	r17,zero,20082be8 <___vfprintf_internal_r+0x1e38>
20082bd0:	1805883a 	mov	r2,r3
20082bd4:	183e4d0e 	bge	r3,zero,2008250c <__flash_rwdata_start+0xffff0bdc>
20082bd8:	0005883a 	mov	r2,zero
20082bdc:	003e4b06 	br	2008250c <__flash_rwdata_start+0xffff0bdc>
20082be0:	d8802117 	ldw	r2,132(sp)
20082be4:	003e3706 	br	200824c4 <__flash_rwdata_start+0xffff0b94>
20082be8:	dac03417 	ldw	r11,208(sp)
20082bec:	4a400044 	addi	r9,r9,1
20082bf0:	5a65883a 	add	r18,r11,r9
20082bf4:	9005883a 	mov	r2,r18
20082bf8:	903e450e 	bge	r18,zero,20082510 <__flash_rwdata_start+0xffff0be0>
20082bfc:	003fe606 	br	20082b98 <__flash_rwdata_start+0xffff1268>
20082c00:	db003417 	ldw	r12,208(sp)
20082c04:	64800044 	addi	r18,r12,1
20082c08:	9005883a 	mov	r2,r18
20082c0c:	903e400e 	bge	r18,zero,20082510 <__flash_rwdata_start+0xffff0be0>
20082c10:	003fe106 	br	20082b98 <__flash_rwdata_start+0xffff1268>
20082c14:	d9003717 	ldw	r4,220(sp)
20082c18:	900b883a 	mov	r5,r18
20082c1c:	000d883a 	mov	r6,zero
20082c20:	000f883a 	mov	r7,zero
20082c24:	da003f15 	stw	r8,252(sp)
20082c28:	da403e15 	stw	r9,248(sp)
20082c2c:	da803d15 	stw	r10,244(sp)
20082c30:	008b3200 	call	2008b320 <__eqdf2>
20082c34:	da003f17 	ldw	r8,252(sp)
20082c38:	da403e17 	ldw	r9,248(sp)
20082c3c:	da803d17 	ldw	r10,244(sp)
20082c40:	103f1f26 	beq	r2,zero,200828c0 <__flash_rwdata_start+0xffff0f90>
20082c44:	00800044 	movi	r2,1
20082c48:	1707c83a 	sub	r3,r2,fp
20082c4c:	d8c02615 	stw	r3,152(sp)
20082c50:	003f1c06 	br	200828c4 <__flash_rwdata_start+0xffff0f94>
20082c54:	00800c04 	movi	r2,48
20082c58:	e0c00c04 	addi	r3,fp,48
20082c5c:	d8802345 	stb	r2,141(sp)
20082c60:	d8c02385 	stb	r3,142(sp)
20082c64:	d88023c4 	addi	r2,sp,143
20082c68:	dd4022c4 	addi	r21,sp,139
20082c6c:	003fa906 	br	20082b14 <__flash_rwdata_start+0xffff11e4>
20082c70:	0005883a 	mov	r2,zero
20082c74:	003f3c06 	br	20082968 <__flash_rwdata_start+0xffff1038>
20082c78:	dac02d17 	ldw	r11,180(sp)
20082c7c:	5a400017 	ldw	r9,0(r11)
20082c80:	5ac00104 	addi	r11,r11,4
20082c84:	dac02d15 	stw	r11,180(sp)
20082c88:	483ec80e 	bge	r9,zero,200827ac <__flash_rwdata_start+0xffff0e7c>
20082c8c:	027fffc4 	movi	r9,-1
20082c90:	1c000047 	ldb	r16,1(r3)
20082c94:	0038ab06 	br	20080f44 <__flash_rwdata_start+0xfffef614>
20082c98:	4800111e 	bne	r9,zero,20082ce0 <___vfprintf_internal_r+0x1f30>
20082c9c:	8c40004c 	andi	r17,r17,1
20082ca0:	88000f1e 	bne	r17,zero,20082ce0 <___vfprintf_internal_r+0x1f30>
20082ca4:	00800044 	movi	r2,1
20082ca8:	1025883a 	mov	r18,r2
20082cac:	003e1806 	br	20082510 <__flash_rwdata_start+0xffff0be0>
20082cb0:	04800084 	movi	r18,2
20082cb4:	90e5c83a 	sub	r18,r18,r3
20082cb8:	003fb306 	br	20082b88 <__flash_rwdata_start+0xffff1258>
20082cbc:	0005883a 	mov	r2,zero
20082cc0:	003f9d06 	br	20082b38 <__flash_rwdata_start+0xffff1208>
20082cc4:	88a2703a 	and	r17,r17,r2
20082cc8:	883f9926 	beq	r17,zero,20082b30 <__flash_rwdata_start+0xffff1200>
20082ccc:	003f9706 	br	20082b2c <__flash_rwdata_start+0xffff11fc>
20082cd0:	00800b44 	movi	r2,45
20082cd4:	0739c83a 	sub	fp,zero,fp
20082cd8:	d8802305 	stb	r2,140(sp)
20082cdc:	003f6606 	br	20082a78 <__flash_rwdata_start+0xffff1148>
20082ce0:	4c800084 	addi	r18,r9,2
20082ce4:	9005883a 	mov	r2,r18
20082ce8:	903e090e 	bge	r18,zero,20082510 <__flash_rwdata_start+0xffff0be0>
20082cec:	003faa06 	br	20082b98 <__flash_rwdata_start+0xffff1268>
20082cf0:	d8802344 	addi	r2,sp,141
20082cf4:	003f8706 	br	20082b14 <__flash_rwdata_start+0xffff11e4>
20082cf8:	d8c02617 	ldw	r3,152(sp)
20082cfc:	003f5806 	br	20082a60 <__flash_rwdata_start+0xffff1130>

20082d00 <__vfprintf_internal>:
20082d00:	2007883a 	mov	r3,r4
20082d04:	01000034 	movhi	r4,0
20082d08:	21086104 	addi	r4,r4,8580
20082d0c:	21000017 	ldw	r4,0(r4)
20082d10:	2805883a 	mov	r2,r5
20082d14:	300f883a 	mov	r7,r6
20082d18:	180b883a 	mov	r5,r3
20082d1c:	100d883a 	mov	r6,r2
20082d20:	0080db01 	jmpi	20080db0 <___vfprintf_internal_r>

20082d24 <__sbprintf>:
20082d24:	2880030b 	ldhu	r2,12(r5)
20082d28:	2ac01917 	ldw	r11,100(r5)
20082d2c:	2a80038b 	ldhu	r10,14(r5)
20082d30:	2a400717 	ldw	r9,28(r5)
20082d34:	2a000917 	ldw	r8,36(r5)
20082d38:	defee204 	addi	sp,sp,-1144
20082d3c:	00c10004 	movi	r3,1024
20082d40:	dc011a15 	stw	r16,1128(sp)
20082d44:	10bfff4c 	andi	r2,r2,65533
20082d48:	2821883a 	mov	r16,r5
20082d4c:	d8cb883a 	add	r5,sp,r3
20082d50:	dc811c15 	stw	r18,1136(sp)
20082d54:	dc411b15 	stw	r17,1132(sp)
20082d58:	dfc11d15 	stw	ra,1140(sp)
20082d5c:	2025883a 	mov	r18,r4
20082d60:	d881030d 	sth	r2,1036(sp)
20082d64:	dac11915 	stw	r11,1124(sp)
20082d68:	da81038d 	sth	r10,1038(sp)
20082d6c:	da410715 	stw	r9,1052(sp)
20082d70:	da010915 	stw	r8,1060(sp)
20082d74:	dec10015 	stw	sp,1024(sp)
20082d78:	dec10415 	stw	sp,1040(sp)
20082d7c:	d8c10215 	stw	r3,1032(sp)
20082d80:	d8c10515 	stw	r3,1044(sp)
20082d84:	d8010615 	stw	zero,1048(sp)
20082d88:	0080db00 	call	20080db0 <___vfprintf_internal_r>
20082d8c:	1023883a 	mov	r17,r2
20082d90:	10000416 	blt	r2,zero,20082da4 <__sbprintf+0x80>
20082d94:	9009883a 	mov	r4,r18
20082d98:	d9410004 	addi	r5,sp,1024
20082d9c:	0084a640 	call	20084a64 <_fflush_r>
20082da0:	10000d1e 	bne	r2,zero,20082dd8 <__sbprintf+0xb4>
20082da4:	d8c1030b 	ldhu	r3,1036(sp)
20082da8:	18c0100c 	andi	r3,r3,64
20082dac:	18000326 	beq	r3,zero,20082dbc <__sbprintf+0x98>
20082db0:	8080030b 	ldhu	r2,12(r16)
20082db4:	10801014 	ori	r2,r2,64
20082db8:	8080030d 	sth	r2,12(r16)
20082dbc:	8805883a 	mov	r2,r17
20082dc0:	dfc11d17 	ldw	ra,1140(sp)
20082dc4:	dc811c17 	ldw	r18,1136(sp)
20082dc8:	dc411b17 	ldw	r17,1132(sp)
20082dcc:	dc011a17 	ldw	r16,1128(sp)
20082dd0:	dec11e04 	addi	sp,sp,1144
20082dd4:	f800283a 	ret
20082dd8:	047fffc4 	movi	r17,-1
20082ddc:	003ff106 	br	20082da4 <__flash_rwdata_start+0xffff1474>

20082de0 <__swsetup_r>:
20082de0:	00800034 	movhi	r2,0
20082de4:	defffd04 	addi	sp,sp,-12
20082de8:	10886104 	addi	r2,r2,8580
20082dec:	dc400115 	stw	r17,4(sp)
20082df0:	2023883a 	mov	r17,r4
20082df4:	11000017 	ldw	r4,0(r2)
20082df8:	dc000015 	stw	r16,0(sp)
20082dfc:	dfc00215 	stw	ra,8(sp)
20082e00:	2821883a 	mov	r16,r5
20082e04:	20000226 	beq	r4,zero,20082e10 <__swsetup_r+0x30>
20082e08:	20c00e17 	ldw	r3,56(r4)
20082e0c:	18003126 	beq	r3,zero,20082ed4 <__swsetup_r+0xf4>
20082e10:	8080030b 	ldhu	r2,12(r16)
20082e14:	10c0020c 	andi	r3,r2,8
20082e18:	100d883a 	mov	r6,r2
20082e1c:	18000f26 	beq	r3,zero,20082e5c <__swsetup_r+0x7c>
20082e20:	80c00417 	ldw	r3,16(r16)
20082e24:	18001526 	beq	r3,zero,20082e7c <__swsetup_r+0x9c>
20082e28:	1100004c 	andi	r4,r2,1
20082e2c:	20001c1e 	bne	r4,zero,20082ea0 <__swsetup_r+0xc0>
20082e30:	1080008c 	andi	r2,r2,2
20082e34:	1000291e 	bne	r2,zero,20082edc <__swsetup_r+0xfc>
20082e38:	80800517 	ldw	r2,20(r16)
20082e3c:	80800215 	stw	r2,8(r16)
20082e40:	18001c26 	beq	r3,zero,20082eb4 <__swsetup_r+0xd4>
20082e44:	0005883a 	mov	r2,zero
20082e48:	dfc00217 	ldw	ra,8(sp)
20082e4c:	dc400117 	ldw	r17,4(sp)
20082e50:	dc000017 	ldw	r16,0(sp)
20082e54:	dec00304 	addi	sp,sp,12
20082e58:	f800283a 	ret
20082e5c:	3080040c 	andi	r2,r6,16
20082e60:	10002e26 	beq	r2,zero,20082f1c <__swsetup_r+0x13c>
20082e64:	3080010c 	andi	r2,r6,4
20082e68:	10001e1e 	bne	r2,zero,20082ee4 <__swsetup_r+0x104>
20082e6c:	80c00417 	ldw	r3,16(r16)
20082e70:	30800214 	ori	r2,r6,8
20082e74:	8080030d 	sth	r2,12(r16)
20082e78:	183feb1e 	bne	r3,zero,20082e28 <__flash_rwdata_start+0xffff14f8>
20082e7c:	1140a00c 	andi	r5,r2,640
20082e80:	01008004 	movi	r4,512
20082e84:	293fe826 	beq	r5,r4,20082e28 <__flash_rwdata_start+0xffff14f8>
20082e88:	8809883a 	mov	r4,r17
20082e8c:	800b883a 	mov	r5,r16
20082e90:	00859cc0 	call	200859cc <__smakebuf_r>
20082e94:	8080030b 	ldhu	r2,12(r16)
20082e98:	80c00417 	ldw	r3,16(r16)
20082e9c:	003fe206 	br	20082e28 <__flash_rwdata_start+0xffff14f8>
20082ea0:	80800517 	ldw	r2,20(r16)
20082ea4:	80000215 	stw	zero,8(r16)
20082ea8:	0085c83a 	sub	r2,zero,r2
20082eac:	80800615 	stw	r2,24(r16)
20082eb0:	183fe41e 	bne	r3,zero,20082e44 <__flash_rwdata_start+0xffff1514>
20082eb4:	80c0030b 	ldhu	r3,12(r16)
20082eb8:	0005883a 	mov	r2,zero
20082ebc:	1900200c 	andi	r4,r3,128
20082ec0:	203fe126 	beq	r4,zero,20082e48 <__flash_rwdata_start+0xffff1518>
20082ec4:	18c01014 	ori	r3,r3,64
20082ec8:	80c0030d 	sth	r3,12(r16)
20082ecc:	00bfffc4 	movi	r2,-1
20082ed0:	003fdd06 	br	20082e48 <__flash_rwdata_start+0xffff1518>
20082ed4:	0084e400 	call	20084e40 <__sinit>
20082ed8:	003fcd06 	br	20082e10 <__flash_rwdata_start+0xffff14e0>
20082edc:	0005883a 	mov	r2,zero
20082ee0:	003fd606 	br	20082e3c <__flash_rwdata_start+0xffff150c>
20082ee4:	81400c17 	ldw	r5,48(r16)
20082ee8:	28000626 	beq	r5,zero,20082f04 <__swsetup_r+0x124>
20082eec:	80801004 	addi	r2,r16,64
20082ef0:	28800326 	beq	r5,r2,20082f00 <__swsetup_r+0x120>
20082ef4:	8809883a 	mov	r4,r17
20082ef8:	0084fb40 	call	20084fb4 <_free_r>
20082efc:	8180030b 	ldhu	r6,12(r16)
20082f00:	80000c15 	stw	zero,48(r16)
20082f04:	80c00417 	ldw	r3,16(r16)
20082f08:	00bff6c4 	movi	r2,-37
20082f0c:	118c703a 	and	r6,r2,r6
20082f10:	80000115 	stw	zero,4(r16)
20082f14:	80c00015 	stw	r3,0(r16)
20082f18:	003fd506 	br	20082e70 <__flash_rwdata_start+0xffff1540>
20082f1c:	00800244 	movi	r2,9
20082f20:	88800015 	stw	r2,0(r17)
20082f24:	30801014 	ori	r2,r6,64
20082f28:	8080030d 	sth	r2,12(r16)
20082f2c:	00bfffc4 	movi	r2,-1
20082f30:	003fc506 	br	20082e48 <__flash_rwdata_start+0xffff1518>

20082f34 <quorem>:
20082f34:	defff704 	addi	sp,sp,-36
20082f38:	dc800215 	stw	r18,8(sp)
20082f3c:	20800417 	ldw	r2,16(r4)
20082f40:	2c800417 	ldw	r18,16(r5)
20082f44:	dfc00815 	stw	ra,32(sp)
20082f48:	ddc00715 	stw	r23,28(sp)
20082f4c:	dd800615 	stw	r22,24(sp)
20082f50:	dd400515 	stw	r21,20(sp)
20082f54:	dd000415 	stw	r20,16(sp)
20082f58:	dcc00315 	stw	r19,12(sp)
20082f5c:	dc400115 	stw	r17,4(sp)
20082f60:	dc000015 	stw	r16,0(sp)
20082f64:	14807116 	blt	r2,r18,2008312c <quorem+0x1f8>
20082f68:	94bfffc4 	addi	r18,r18,-1
20082f6c:	94ad883a 	add	r22,r18,r18
20082f70:	b5ad883a 	add	r22,r22,r22
20082f74:	2c400504 	addi	r17,r5,20
20082f78:	8da9883a 	add	r20,r17,r22
20082f7c:	25400504 	addi	r21,r4,20
20082f80:	282f883a 	mov	r23,r5
20082f84:	adad883a 	add	r22,r21,r22
20082f88:	a1400017 	ldw	r5,0(r20)
20082f8c:	2021883a 	mov	r16,r4
20082f90:	b1000017 	ldw	r4,0(r22)
20082f94:	29400044 	addi	r5,r5,1
20082f98:	008a1a80 	call	2008a1a8 <__udivsi3>
20082f9c:	1027883a 	mov	r19,r2
20082fa0:	10002c26 	beq	r2,zero,20083054 <quorem+0x120>
20082fa4:	a813883a 	mov	r9,r21
20082fa8:	8811883a 	mov	r8,r17
20082fac:	0009883a 	mov	r4,zero
20082fb0:	000d883a 	mov	r6,zero
20082fb4:	41c00017 	ldw	r7,0(r8)
20082fb8:	49400017 	ldw	r5,0(r9)
20082fbc:	42000104 	addi	r8,r8,4
20082fc0:	38bfffcc 	andi	r2,r7,65535
20082fc4:	14c5383a 	mul	r2,r2,r19
20082fc8:	380ed43a 	srli	r7,r7,16
20082fcc:	28ffffcc 	andi	r3,r5,65535
20082fd0:	2085883a 	add	r2,r4,r2
20082fd4:	1008d43a 	srli	r4,r2,16
20082fd8:	3ccf383a 	mul	r7,r7,r19
20082fdc:	198d883a 	add	r6,r3,r6
20082fe0:	10ffffcc 	andi	r3,r2,65535
20082fe4:	30c7c83a 	sub	r3,r6,r3
20082fe8:	280ad43a 	srli	r5,r5,16
20082fec:	21c9883a 	add	r4,r4,r7
20082ff0:	180dd43a 	srai	r6,r3,16
20082ff4:	20bfffcc 	andi	r2,r4,65535
20082ff8:	288bc83a 	sub	r5,r5,r2
20082ffc:	298b883a 	add	r5,r5,r6
20083000:	280e943a 	slli	r7,r5,16
20083004:	18ffffcc 	andi	r3,r3,65535
20083008:	2008d43a 	srli	r4,r4,16
2008300c:	38ceb03a 	or	r7,r7,r3
20083010:	49c00015 	stw	r7,0(r9)
20083014:	280dd43a 	srai	r6,r5,16
20083018:	4a400104 	addi	r9,r9,4
2008301c:	a23fe52e 	bgeu	r20,r8,20082fb4 <__flash_rwdata_start+0xffff1684>
20083020:	b0800017 	ldw	r2,0(r22)
20083024:	10000b1e 	bne	r2,zero,20083054 <quorem+0x120>
20083028:	b0bfff04 	addi	r2,r22,-4
2008302c:	a880082e 	bgeu	r21,r2,20083050 <quorem+0x11c>
20083030:	b0ffff17 	ldw	r3,-4(r22)
20083034:	18000326 	beq	r3,zero,20083044 <quorem+0x110>
20083038:	00000506 	br	20083050 <quorem+0x11c>
2008303c:	10c00017 	ldw	r3,0(r2)
20083040:	1800031e 	bne	r3,zero,20083050 <quorem+0x11c>
20083044:	10bfff04 	addi	r2,r2,-4
20083048:	94bfffc4 	addi	r18,r18,-1
2008304c:	a8bffb36 	bltu	r21,r2,2008303c <__flash_rwdata_start+0xffff170c>
20083050:	84800415 	stw	r18,16(r16)
20083054:	8009883a 	mov	r4,r16
20083058:	b80b883a 	mov	r5,r23
2008305c:	00868f80 	call	200868f8 <__mcmp>
20083060:	10002616 	blt	r2,zero,200830fc <quorem+0x1c8>
20083064:	9cc00044 	addi	r19,r19,1
20083068:	a80d883a 	mov	r6,r21
2008306c:	000b883a 	mov	r5,zero
20083070:	31000017 	ldw	r4,0(r6)
20083074:	88800017 	ldw	r2,0(r17)
20083078:	31800104 	addi	r6,r6,4
2008307c:	20ffffcc 	andi	r3,r4,65535
20083080:	194b883a 	add	r5,r3,r5
20083084:	10ffffcc 	andi	r3,r2,65535
20083088:	28c7c83a 	sub	r3,r5,r3
2008308c:	1004d43a 	srli	r2,r2,16
20083090:	2008d43a 	srli	r4,r4,16
20083094:	180bd43a 	srai	r5,r3,16
20083098:	18ffffcc 	andi	r3,r3,65535
2008309c:	2089c83a 	sub	r4,r4,r2
200830a0:	2149883a 	add	r4,r4,r5
200830a4:	2004943a 	slli	r2,r4,16
200830a8:	8c400104 	addi	r17,r17,4
200830ac:	200bd43a 	srai	r5,r4,16
200830b0:	10c6b03a 	or	r3,r2,r3
200830b4:	30ffff15 	stw	r3,-4(r6)
200830b8:	a47fed2e 	bgeu	r20,r17,20083070 <__flash_rwdata_start+0xffff1740>
200830bc:	9485883a 	add	r2,r18,r18
200830c0:	1085883a 	add	r2,r2,r2
200830c4:	a887883a 	add	r3,r21,r2
200830c8:	18800017 	ldw	r2,0(r3)
200830cc:	10000b1e 	bne	r2,zero,200830fc <quorem+0x1c8>
200830d0:	18bfff04 	addi	r2,r3,-4
200830d4:	a880082e 	bgeu	r21,r2,200830f8 <quorem+0x1c4>
200830d8:	18ffff17 	ldw	r3,-4(r3)
200830dc:	18000326 	beq	r3,zero,200830ec <quorem+0x1b8>
200830e0:	00000506 	br	200830f8 <quorem+0x1c4>
200830e4:	10c00017 	ldw	r3,0(r2)
200830e8:	1800031e 	bne	r3,zero,200830f8 <quorem+0x1c4>
200830ec:	10bfff04 	addi	r2,r2,-4
200830f0:	94bfffc4 	addi	r18,r18,-1
200830f4:	a8bffb36 	bltu	r21,r2,200830e4 <__flash_rwdata_start+0xffff17b4>
200830f8:	84800415 	stw	r18,16(r16)
200830fc:	9805883a 	mov	r2,r19
20083100:	dfc00817 	ldw	ra,32(sp)
20083104:	ddc00717 	ldw	r23,28(sp)
20083108:	dd800617 	ldw	r22,24(sp)
2008310c:	dd400517 	ldw	r21,20(sp)
20083110:	dd000417 	ldw	r20,16(sp)
20083114:	dcc00317 	ldw	r19,12(sp)
20083118:	dc800217 	ldw	r18,8(sp)
2008311c:	dc400117 	ldw	r17,4(sp)
20083120:	dc000017 	ldw	r16,0(sp)
20083124:	dec00904 	addi	sp,sp,36
20083128:	f800283a 	ret
2008312c:	0005883a 	mov	r2,zero
20083130:	003ff306 	br	20083100 <__flash_rwdata_start+0xffff17d0>

20083134 <_dtoa_r>:
20083134:	20801017 	ldw	r2,64(r4)
20083138:	deffde04 	addi	sp,sp,-136
2008313c:	dd401d15 	stw	r21,116(sp)
20083140:	dcc01b15 	stw	r19,108(sp)
20083144:	dc801a15 	stw	r18,104(sp)
20083148:	dc401915 	stw	r17,100(sp)
2008314c:	dc001815 	stw	r16,96(sp)
20083150:	dfc02115 	stw	ra,132(sp)
20083154:	df002015 	stw	fp,128(sp)
20083158:	ddc01f15 	stw	r23,124(sp)
2008315c:	dd801e15 	stw	r22,120(sp)
20083160:	dd001c15 	stw	r20,112(sp)
20083164:	d9c00315 	stw	r7,12(sp)
20083168:	2021883a 	mov	r16,r4
2008316c:	302b883a 	mov	r21,r6
20083170:	2825883a 	mov	r18,r5
20083174:	dc402417 	ldw	r17,144(sp)
20083178:	3027883a 	mov	r19,r6
2008317c:	10000826 	beq	r2,zero,200831a0 <_dtoa_r+0x6c>
20083180:	21801117 	ldw	r6,68(r4)
20083184:	00c00044 	movi	r3,1
20083188:	100b883a 	mov	r5,r2
2008318c:	1986983a 	sll	r3,r3,r6
20083190:	11800115 	stw	r6,4(r2)
20083194:	10c00215 	stw	r3,8(r2)
20083198:	00860cc0 	call	200860cc <_Bfree>
2008319c:	80001015 	stw	zero,64(r16)
200831a0:	a8002d16 	blt	r21,zero,20083258 <_dtoa_r+0x124>
200831a4:	88000015 	stw	zero,0(r17)
200831a8:	a8dffc2c 	andhi	r3,r21,32752
200831ac:	009ffc34 	movhi	r2,32752
200831b0:	18801b26 	beq	r3,r2,20083220 <_dtoa_r+0xec>
200831b4:	9009883a 	mov	r4,r18
200831b8:	980b883a 	mov	r5,r19
200831bc:	000d883a 	mov	r6,zero
200831c0:	000f883a 	mov	r7,zero
200831c4:	008b3200 	call	2008b320 <__eqdf2>
200831c8:	10002a1e 	bne	r2,zero,20083274 <_dtoa_r+0x140>
200831cc:	d8c02317 	ldw	r3,140(sp)
200831d0:	d9002517 	ldw	r4,148(sp)
200831d4:	00800044 	movi	r2,1
200831d8:	18800015 	stw	r2,0(r3)
200831dc:	2001a226 	beq	r4,zero,20083868 <_dtoa_r+0x734>
200831e0:	00800034 	movhi	r2,0
200831e4:	10802a44 	addi	r2,r2,169
200831e8:	20800015 	stw	r2,0(r4)
200831ec:	10bfffc4 	addi	r2,r2,-1
200831f0:	dfc02117 	ldw	ra,132(sp)
200831f4:	df002017 	ldw	fp,128(sp)
200831f8:	ddc01f17 	ldw	r23,124(sp)
200831fc:	dd801e17 	ldw	r22,120(sp)
20083200:	dd401d17 	ldw	r21,116(sp)
20083204:	dd001c17 	ldw	r20,112(sp)
20083208:	dcc01b17 	ldw	r19,108(sp)
2008320c:	dc801a17 	ldw	r18,104(sp)
20083210:	dc401917 	ldw	r17,100(sp)
20083214:	dc001817 	ldw	r16,96(sp)
20083218:	dec02204 	addi	sp,sp,136
2008321c:	f800283a 	ret
20083220:	d8c02317 	ldw	r3,140(sp)
20083224:	0089c3c4 	movi	r2,9999
20083228:	18800015 	stw	r2,0(r3)
2008322c:	90017c26 	beq	r18,zero,20083820 <_dtoa_r+0x6ec>
20083230:	00800034 	movhi	r2,0
20083234:	10803604 	addi	r2,r2,216
20083238:	d9002517 	ldw	r4,148(sp)
2008323c:	203fec26 	beq	r4,zero,200831f0 <__flash_rwdata_start+0xffff18c0>
20083240:	10c000c7 	ldb	r3,3(r2)
20083244:	18017d1e 	bne	r3,zero,2008383c <_dtoa_r+0x708>
20083248:	10c000c4 	addi	r3,r2,3
2008324c:	d9802517 	ldw	r6,148(sp)
20083250:	30c00015 	stw	r3,0(r6)
20083254:	003fe606 	br	200831f0 <__flash_rwdata_start+0xffff18c0>
20083258:	04e00034 	movhi	r19,32768
2008325c:	9cffffc4 	addi	r19,r19,-1
20083260:	00800044 	movi	r2,1
20083264:	ace6703a 	and	r19,r21,r19
20083268:	88800015 	stw	r2,0(r17)
2008326c:	982b883a 	mov	r21,r19
20083270:	003fcd06 	br	200831a8 <__flash_rwdata_start+0xffff1878>
20083274:	d8800204 	addi	r2,sp,8
20083278:	a822d53a 	srli	r17,r21,20
2008327c:	d8800015 	stw	r2,0(sp)
20083280:	8009883a 	mov	r4,r16
20083284:	900b883a 	mov	r5,r18
20083288:	980d883a 	mov	r6,r19
2008328c:	d9c00104 	addi	r7,sp,4
20083290:	0086c6c0 	call	20086c6c <__d2b>
20083294:	1039883a 	mov	fp,r2
20083298:	88016a1e 	bne	r17,zero,20083844 <_dtoa_r+0x710>
2008329c:	dd000217 	ldw	r20,8(sp)
200832a0:	dc400117 	ldw	r17,4(sp)
200832a4:	00befbc4 	movi	r2,-1041
200832a8:	a463883a 	add	r17,r20,r17
200832ac:	8882ea16 	blt	r17,r2,20083e58 <_dtoa_r+0xd24>
200832b0:	00bf0384 	movi	r2,-1010
200832b4:	1445c83a 	sub	r2,r2,r17
200832b8:	89010484 	addi	r4,r17,1042
200832bc:	a8aa983a 	sll	r21,r21,r2
200832c0:	9108d83a 	srl	r4,r18,r4
200832c4:	a908b03a 	or	r4,r21,r4
200832c8:	008c6b00 	call	2008c6b0 <__floatunsidf>
200832cc:	017f8434 	movhi	r5,65040
200832d0:	01800044 	movi	r6,1
200832d4:	1009883a 	mov	r4,r2
200832d8:	194b883a 	add	r5,r3,r5
200832dc:	8c7fffc4 	addi	r17,r17,-1
200832e0:	d9800f15 	stw	r6,60(sp)
200832e4:	000d883a 	mov	r6,zero
200832e8:	01cffe34 	movhi	r7,16376
200832ec:	008bc880 	call	2008bc88 <__subdf3>
200832f0:	0198dbf4 	movhi	r6,25455
200832f4:	01cff4f4 	movhi	r7,16339
200832f8:	1009883a 	mov	r4,r2
200832fc:	180b883a 	mov	r5,r3
20083300:	3190d844 	addi	r6,r6,17249
20083304:	39e1e9c4 	addi	r7,r7,-30809
20083308:	008b5640 	call	2008b564 <__muldf3>
2008330c:	01a2d874 	movhi	r6,35681
20083310:	01cff1f4 	movhi	r7,16327
20083314:	180b883a 	mov	r5,r3
20083318:	31b22cc4 	addi	r6,r6,-14157
2008331c:	39e28a04 	addi	r7,r7,-30168
20083320:	1009883a 	mov	r4,r2
20083324:	008a1b80 	call	2008a1b8 <__adddf3>
20083328:	8809883a 	mov	r4,r17
2008332c:	102d883a 	mov	r22,r2
20083330:	182b883a 	mov	r21,r3
20083334:	008c5e00 	call	2008c5e0 <__floatsidf>
20083338:	019427f4 	movhi	r6,20639
2008333c:	01cff4f4 	movhi	r7,16339
20083340:	1009883a 	mov	r4,r2
20083344:	180b883a 	mov	r5,r3
20083348:	319e7ec4 	addi	r6,r6,31227
2008334c:	39d104c4 	addi	r7,r7,17427
20083350:	008b5640 	call	2008b564 <__muldf3>
20083354:	b009883a 	mov	r4,r22
20083358:	a80b883a 	mov	r5,r21
2008335c:	100d883a 	mov	r6,r2
20083360:	180f883a 	mov	r7,r3
20083364:	008a1b80 	call	2008a1b8 <__adddf3>
20083368:	1009883a 	mov	r4,r2
2008336c:	180b883a 	mov	r5,r3
20083370:	102d883a 	mov	r22,r2
20083374:	182b883a 	mov	r21,r3
20083378:	008c5580 	call	2008c558 <__fixdfsi>
2008337c:	b009883a 	mov	r4,r22
20083380:	a80b883a 	mov	r5,r21
20083384:	000d883a 	mov	r6,zero
20083388:	000f883a 	mov	r7,zero
2008338c:	d8800515 	stw	r2,20(sp)
20083390:	008b4840 	call	2008b484 <__ledf2>
20083394:	10023116 	blt	r2,zero,20083c5c <_dtoa_r+0xb28>
20083398:	d8c00517 	ldw	r3,20(sp)
2008339c:	00800584 	movi	r2,22
200833a0:	10c21f36 	bltu	r2,r3,20083c20 <_dtoa_r+0xaec>
200833a4:	180490fa 	slli	r2,r3,3
200833a8:	00c00034 	movhi	r3,0
200833ac:	18c05204 	addi	r3,r3,328
200833b0:	1885883a 	add	r2,r3,r2
200833b4:	11000017 	ldw	r4,0(r2)
200833b8:	11400117 	ldw	r5,4(r2)
200833bc:	900d883a 	mov	r6,r18
200833c0:	980f883a 	mov	r7,r19
200833c4:	008b3a40 	call	2008b3a4 <__gedf2>
200833c8:	0082a70e 	bge	zero,r2,20083e68 <_dtoa_r+0xd34>
200833cc:	d9000517 	ldw	r4,20(sp)
200833d0:	d8000d15 	stw	zero,52(sp)
200833d4:	213fffc4 	addi	r4,r4,-1
200833d8:	d9000515 	stw	r4,20(sp)
200833dc:	a463c83a 	sub	r17,r20,r17
200833e0:	8dbfffc4 	addi	r22,r17,-1
200833e4:	b0021916 	blt	r22,zero,20083c4c <_dtoa_r+0xb18>
200833e8:	d8000815 	stw	zero,32(sp)
200833ec:	d8800517 	ldw	r2,20(sp)
200833f0:	10020e16 	blt	r2,zero,20083c2c <_dtoa_r+0xaf8>
200833f4:	b0ad883a 	add	r22,r22,r2
200833f8:	d8800a15 	stw	r2,40(sp)
200833fc:	d8000915 	stw	zero,36(sp)
20083400:	d8c00317 	ldw	r3,12(sp)
20083404:	00800244 	movi	r2,9
20083408:	10c11a36 	bltu	r2,r3,20083874 <_dtoa_r+0x740>
2008340c:	00800144 	movi	r2,5
20083410:	10c4fc0e 	bge	r2,r3,20084804 <_dtoa_r+0x16d0>
20083414:	18ffff04 	addi	r3,r3,-4
20083418:	d8c00315 	stw	r3,12(sp)
2008341c:	0029883a 	mov	r20,zero
20083420:	d9800317 	ldw	r6,12(sp)
20083424:	008000c4 	movi	r2,3
20083428:	3083bd26 	beq	r6,r2,20084320 <_dtoa_r+0x11ec>
2008342c:	1183670e 	bge	r2,r6,200841cc <_dtoa_r+0x1098>
20083430:	d8c00317 	ldw	r3,12(sp)
20083434:	00800104 	movi	r2,4
20083438:	1882e726 	beq	r3,r2,20083fd8 <_dtoa_r+0xea4>
2008343c:	00800144 	movi	r2,5
20083440:	1884f21e 	bne	r3,r2,2008480c <_dtoa_r+0x16d8>
20083444:	00800044 	movi	r2,1
20083448:	d8800b15 	stw	r2,44(sp)
2008344c:	d8c02217 	ldw	r3,136(sp)
20083450:	d9000517 	ldw	r4,20(sp)
20083454:	1907883a 	add	r3,r3,r4
20083458:	19800044 	addi	r6,r3,1
2008345c:	d8c00c15 	stw	r3,48(sp)
20083460:	d9800615 	stw	r6,24(sp)
20083464:	0183c30e 	bge	zero,r6,20084374 <_dtoa_r+0x1240>
20083468:	d9800617 	ldw	r6,24(sp)
2008346c:	3023883a 	mov	r17,r6
20083470:	80001115 	stw	zero,68(r16)
20083474:	008005c4 	movi	r2,23
20083478:	1184f62e 	bgeu	r2,r6,20084854 <_dtoa_r+0x1720>
2008347c:	00c00044 	movi	r3,1
20083480:	00800104 	movi	r2,4
20083484:	1085883a 	add	r2,r2,r2
20083488:	11000504 	addi	r4,r2,20
2008348c:	180b883a 	mov	r5,r3
20083490:	18c00044 	addi	r3,r3,1
20083494:	313ffb2e 	bgeu	r6,r4,20083484 <__flash_rwdata_start+0xffff1b54>
20083498:	81401115 	stw	r5,68(r16)
2008349c:	8009883a 	mov	r4,r16
200834a0:	00860240 	call	20086024 <_Balloc>
200834a4:	d8800715 	stw	r2,28(sp)
200834a8:	80801015 	stw	r2,64(r16)
200834ac:	00800384 	movi	r2,14
200834b0:	1440fd36 	bltu	r2,r17,200838a8 <_dtoa_r+0x774>
200834b4:	a000fc26 	beq	r20,zero,200838a8 <_dtoa_r+0x774>
200834b8:	d8800517 	ldw	r2,20(sp)
200834bc:	0083b90e 	bge	zero,r2,200843a4 <_dtoa_r+0x1270>
200834c0:	d8c00517 	ldw	r3,20(sp)
200834c4:	108003cc 	andi	r2,r2,15
200834c8:	100490fa 	slli	r2,r2,3
200834cc:	182fd13a 	srai	r23,r3,4
200834d0:	00c00034 	movhi	r3,0
200834d4:	18c05204 	addi	r3,r3,328
200834d8:	1885883a 	add	r2,r3,r2
200834dc:	b8c0040c 	andi	r3,r23,16
200834e0:	12c00017 	ldw	r11,0(r2)
200834e4:	12800117 	ldw	r10,4(r2)
200834e8:	18039726 	beq	r3,zero,20084348 <_dtoa_r+0x1214>
200834ec:	00800034 	movhi	r2,0
200834f0:	10804804 	addi	r2,r2,288
200834f4:	11800817 	ldw	r6,32(r2)
200834f8:	11c00917 	ldw	r7,36(r2)
200834fc:	9009883a 	mov	r4,r18
20083500:	980b883a 	mov	r5,r19
20083504:	da801615 	stw	r10,88(sp)
20083508:	dac01515 	stw	r11,84(sp)
2008350c:	008aa540 	call	2008aa54 <__divdf3>
20083510:	da801617 	ldw	r10,88(sp)
20083514:	dac01517 	ldw	r11,84(sp)
20083518:	bdc003cc 	andi	r23,r23,15
2008351c:	044000c4 	movi	r17,3
20083520:	d8800e15 	stw	r2,56(sp)
20083524:	182b883a 	mov	r21,r3
20083528:	b8001126 	beq	r23,zero,20083570 <_dtoa_r+0x43c>
2008352c:	05000034 	movhi	r20,0
20083530:	a5004804 	addi	r20,r20,288
20083534:	5805883a 	mov	r2,r11
20083538:	5007883a 	mov	r3,r10
2008353c:	b980004c 	andi	r6,r23,1
20083540:	1009883a 	mov	r4,r2
20083544:	b82fd07a 	srai	r23,r23,1
20083548:	180b883a 	mov	r5,r3
2008354c:	30000426 	beq	r6,zero,20083560 <_dtoa_r+0x42c>
20083550:	a1800017 	ldw	r6,0(r20)
20083554:	a1c00117 	ldw	r7,4(r20)
20083558:	8c400044 	addi	r17,r17,1
2008355c:	008b5640 	call	2008b564 <__muldf3>
20083560:	a5000204 	addi	r20,r20,8
20083564:	b83ff51e 	bne	r23,zero,2008353c <__flash_rwdata_start+0xffff1c0c>
20083568:	1017883a 	mov	r11,r2
2008356c:	1815883a 	mov	r10,r3
20083570:	d9000e17 	ldw	r4,56(sp)
20083574:	a80b883a 	mov	r5,r21
20083578:	580d883a 	mov	r6,r11
2008357c:	500f883a 	mov	r7,r10
20083580:	008aa540 	call	2008aa54 <__divdf3>
20083584:	1029883a 	mov	r20,r2
20083588:	182b883a 	mov	r21,r3
2008358c:	d9800d17 	ldw	r6,52(sp)
20083590:	30000626 	beq	r6,zero,200835ac <_dtoa_r+0x478>
20083594:	a009883a 	mov	r4,r20
20083598:	a80b883a 	mov	r5,r21
2008359c:	000d883a 	mov	r6,zero
200835a0:	01cffc34 	movhi	r7,16368
200835a4:	008b4840 	call	2008b484 <__ledf2>
200835a8:	10043216 	blt	r2,zero,20084674 <_dtoa_r+0x1540>
200835ac:	8809883a 	mov	r4,r17
200835b0:	008c5e00 	call	2008c5e0 <__floatsidf>
200835b4:	1009883a 	mov	r4,r2
200835b8:	180b883a 	mov	r5,r3
200835bc:	a00d883a 	mov	r6,r20
200835c0:	a80f883a 	mov	r7,r21
200835c4:	008b5640 	call	2008b564 <__muldf3>
200835c8:	000d883a 	mov	r6,zero
200835cc:	1009883a 	mov	r4,r2
200835d0:	180b883a 	mov	r5,r3
200835d4:	01d00734 	movhi	r7,16412
200835d8:	008a1b80 	call	2008a1b8 <__adddf3>
200835dc:	1023883a 	mov	r17,r2
200835e0:	d9800617 	ldw	r6,24(sp)
200835e4:	00bf3034 	movhi	r2,64704
200835e8:	1885883a 	add	r2,r3,r2
200835ec:	d8800e15 	stw	r2,56(sp)
200835f0:	30032e26 	beq	r6,zero,200842ac <_dtoa_r+0x1178>
200835f4:	d8c00517 	ldw	r3,20(sp)
200835f8:	da800617 	ldw	r10,24(sp)
200835fc:	d8c01215 	stw	r3,72(sp)
20083600:	d9000b17 	ldw	r4,44(sp)
20083604:	2003b026 	beq	r4,zero,200844c8 <_dtoa_r+0x1394>
20083608:	50bfffc4 	addi	r2,r10,-1
2008360c:	100490fa 	slli	r2,r2,3
20083610:	00c00034 	movhi	r3,0
20083614:	18c05204 	addi	r3,r3,328
20083618:	1885883a 	add	r2,r3,r2
2008361c:	11800017 	ldw	r6,0(r2)
20083620:	11c00117 	ldw	r7,4(r2)
20083624:	d8800717 	ldw	r2,28(sp)
20083628:	0009883a 	mov	r4,zero
2008362c:	014ff834 	movhi	r5,16352
20083630:	da801615 	stw	r10,88(sp)
20083634:	15c00044 	addi	r23,r2,1
20083638:	008aa540 	call	2008aa54 <__divdf3>
2008363c:	d9c00e17 	ldw	r7,56(sp)
20083640:	880d883a 	mov	r6,r17
20083644:	1009883a 	mov	r4,r2
20083648:	180b883a 	mov	r5,r3
2008364c:	008bc880 	call	2008bc88 <__subdf3>
20083650:	a80b883a 	mov	r5,r21
20083654:	a009883a 	mov	r4,r20
20083658:	d8c01015 	stw	r3,64(sp)
2008365c:	d8800e15 	stw	r2,56(sp)
20083660:	008c5580 	call	2008c558 <__fixdfsi>
20083664:	1009883a 	mov	r4,r2
20083668:	d8801715 	stw	r2,92(sp)
2008366c:	008c5e00 	call	2008c5e0 <__floatsidf>
20083670:	a009883a 	mov	r4,r20
20083674:	a80b883a 	mov	r5,r21
20083678:	100d883a 	mov	r6,r2
2008367c:	180f883a 	mov	r7,r3
20083680:	008bc880 	call	2008bc88 <__subdf3>
20083684:	da001717 	ldw	r8,92(sp)
20083688:	1829883a 	mov	r20,r3
2008368c:	d8c00717 	ldw	r3,28(sp)
20083690:	d9000e17 	ldw	r4,56(sp)
20083694:	d9401017 	ldw	r5,64(sp)
20083698:	42000c04 	addi	r8,r8,48
2008369c:	1023883a 	mov	r17,r2
200836a0:	1a000005 	stb	r8,0(r3)
200836a4:	880d883a 	mov	r6,r17
200836a8:	a00f883a 	mov	r7,r20
200836ac:	402b883a 	mov	r21,r8
200836b0:	008b3a40 	call	2008b3a4 <__gedf2>
200836b4:	00844516 	blt	zero,r2,200847cc <_dtoa_r+0x1698>
200836b8:	0009883a 	mov	r4,zero
200836bc:	014ffc34 	movhi	r5,16368
200836c0:	880d883a 	mov	r6,r17
200836c4:	a00f883a 	mov	r7,r20
200836c8:	008bc880 	call	2008bc88 <__subdf3>
200836cc:	d9000e17 	ldw	r4,56(sp)
200836d0:	d9401017 	ldw	r5,64(sp)
200836d4:	100d883a 	mov	r6,r2
200836d8:	180f883a 	mov	r7,r3
200836dc:	008b3a40 	call	2008b3a4 <__gedf2>
200836e0:	da801617 	ldw	r10,88(sp)
200836e4:	00843616 	blt	zero,r2,200847c0 <_dtoa_r+0x168c>
200836e8:	00800044 	movi	r2,1
200836ec:	12806e0e 	bge	r2,r10,200838a8 <_dtoa_r+0x774>
200836f0:	d9000717 	ldw	r4,28(sp)
200836f4:	dd801315 	stw	r22,76(sp)
200836f8:	dc001115 	stw	r16,68(sp)
200836fc:	2295883a 	add	r10,r4,r10
20083700:	dcc01415 	stw	r19,80(sp)
20083704:	502d883a 	mov	r22,r10
20083708:	dcc01017 	ldw	r19,64(sp)
2008370c:	b821883a 	mov	r16,r23
20083710:	dc801015 	stw	r18,64(sp)
20083714:	dc800e17 	ldw	r18,56(sp)
20083718:	00000906 	br	20083740 <_dtoa_r+0x60c>
2008371c:	008bc880 	call	2008bc88 <__subdf3>
20083720:	1009883a 	mov	r4,r2
20083724:	180b883a 	mov	r5,r3
20083728:	900d883a 	mov	r6,r18
2008372c:	980f883a 	mov	r7,r19
20083730:	008b4840 	call	2008b484 <__ledf2>
20083734:	10040e16 	blt	r2,zero,20084770 <_dtoa_r+0x163c>
20083738:	b821883a 	mov	r16,r23
2008373c:	bd841026 	beq	r23,r22,20084780 <_dtoa_r+0x164c>
20083740:	9009883a 	mov	r4,r18
20083744:	980b883a 	mov	r5,r19
20083748:	000d883a 	mov	r6,zero
2008374c:	01d00934 	movhi	r7,16420
20083750:	008b5640 	call	2008b564 <__muldf3>
20083754:	000d883a 	mov	r6,zero
20083758:	01d00934 	movhi	r7,16420
2008375c:	8809883a 	mov	r4,r17
20083760:	a00b883a 	mov	r5,r20
20083764:	1025883a 	mov	r18,r2
20083768:	1827883a 	mov	r19,r3
2008376c:	008b5640 	call	2008b564 <__muldf3>
20083770:	180b883a 	mov	r5,r3
20083774:	1009883a 	mov	r4,r2
20083778:	1823883a 	mov	r17,r3
2008377c:	1029883a 	mov	r20,r2
20083780:	008c5580 	call	2008c558 <__fixdfsi>
20083784:	1009883a 	mov	r4,r2
20083788:	102b883a 	mov	r21,r2
2008378c:	008c5e00 	call	2008c5e0 <__floatsidf>
20083790:	a009883a 	mov	r4,r20
20083794:	880b883a 	mov	r5,r17
20083798:	100d883a 	mov	r6,r2
2008379c:	180f883a 	mov	r7,r3
200837a0:	008bc880 	call	2008bc88 <__subdf3>
200837a4:	ad400c04 	addi	r21,r21,48
200837a8:	1009883a 	mov	r4,r2
200837ac:	180b883a 	mov	r5,r3
200837b0:	900d883a 	mov	r6,r18
200837b4:	980f883a 	mov	r7,r19
200837b8:	85400005 	stb	r21,0(r16)
200837bc:	1023883a 	mov	r17,r2
200837c0:	1829883a 	mov	r20,r3
200837c4:	008b4840 	call	2008b484 <__ledf2>
200837c8:	bdc00044 	addi	r23,r23,1
200837cc:	0009883a 	mov	r4,zero
200837d0:	014ffc34 	movhi	r5,16368
200837d4:	880d883a 	mov	r6,r17
200837d8:	a00f883a 	mov	r7,r20
200837dc:	103fcf0e 	bge	r2,zero,2008371c <__flash_rwdata_start+0xffff1dec>
200837e0:	d9801217 	ldw	r6,72(sp)
200837e4:	dc001117 	ldw	r16,68(sp)
200837e8:	d9800515 	stw	r6,20(sp)
200837ec:	8009883a 	mov	r4,r16
200837f0:	e00b883a 	mov	r5,fp
200837f4:	00860cc0 	call	200860cc <_Bfree>
200837f8:	d8c00517 	ldw	r3,20(sp)
200837fc:	d9002317 	ldw	r4,140(sp)
20083800:	d9802517 	ldw	r6,148(sp)
20083804:	b8000005 	stb	zero,0(r23)
20083808:	18800044 	addi	r2,r3,1
2008380c:	20800015 	stw	r2,0(r4)
20083810:	30027226 	beq	r6,zero,200841dc <_dtoa_r+0x10a8>
20083814:	35c00015 	stw	r23,0(r6)
20083818:	d8800717 	ldw	r2,28(sp)
2008381c:	003e7406 	br	200831f0 <__flash_rwdata_start+0xffff18c0>
20083820:	00800434 	movhi	r2,16
20083824:	10bfffc4 	addi	r2,r2,-1
20083828:	a8aa703a 	and	r21,r21,r2
2008382c:	a83e801e 	bne	r21,zero,20083230 <__flash_rwdata_start+0xffff1900>
20083830:	00800034 	movhi	r2,0
20083834:	10803304 	addi	r2,r2,204
20083838:	003e7f06 	br	20083238 <__flash_rwdata_start+0xffff1908>
2008383c:	10c00204 	addi	r3,r2,8
20083840:	003e8206 	br	2008324c <__flash_rwdata_start+0xffff191c>
20083844:	01400434 	movhi	r5,16
20083848:	297fffc4 	addi	r5,r5,-1
2008384c:	994a703a 	and	r5,r19,r5
20083850:	9009883a 	mov	r4,r18
20083854:	8c7f0044 	addi	r17,r17,-1023
20083858:	294ffc34 	orhi	r5,r5,16368
2008385c:	dd000217 	ldw	r20,8(sp)
20083860:	d8000f15 	stw	zero,60(sp)
20083864:	003e9f06 	br	200832e4 <__flash_rwdata_start+0xffff19b4>
20083868:	00800034 	movhi	r2,0
2008386c:	10802a04 	addi	r2,r2,168
20083870:	003e5f06 	br	200831f0 <__flash_rwdata_start+0xffff18c0>
20083874:	80001115 	stw	zero,68(r16)
20083878:	8009883a 	mov	r4,r16
2008387c:	000b883a 	mov	r5,zero
20083880:	00860240 	call	20086024 <_Balloc>
20083884:	01bfffc4 	movi	r6,-1
20083888:	d8800715 	stw	r2,28(sp)
2008388c:	80801015 	stw	r2,64(r16)
20083890:	00800044 	movi	r2,1
20083894:	d9800c15 	stw	r6,48(sp)
20083898:	d8800b15 	stw	r2,44(sp)
2008389c:	d9800615 	stw	r6,24(sp)
200838a0:	d8002215 	stw	zero,136(sp)
200838a4:	d8000315 	stw	zero,12(sp)
200838a8:	d8800117 	ldw	r2,4(sp)
200838ac:	10008e16 	blt	r2,zero,20083ae8 <_dtoa_r+0x9b4>
200838b0:	d9000517 	ldw	r4,20(sp)
200838b4:	00c00384 	movi	r3,14
200838b8:	19008b16 	blt	r3,r4,20083ae8 <_dtoa_r+0x9b4>
200838bc:	200490fa 	slli	r2,r4,3
200838c0:	00c00034 	movhi	r3,0
200838c4:	d9802217 	ldw	r6,136(sp)
200838c8:	18c05204 	addi	r3,r3,328
200838cc:	1885883a 	add	r2,r3,r2
200838d0:	14400017 	ldw	r17,0(r2)
200838d4:	15000117 	ldw	r20,4(r2)
200838d8:	3001c716 	blt	r6,zero,20083ff8 <_dtoa_r+0xec4>
200838dc:	880d883a 	mov	r6,r17
200838e0:	a00f883a 	mov	r7,r20
200838e4:	9009883a 	mov	r4,r18
200838e8:	980b883a 	mov	r5,r19
200838ec:	008aa540 	call	2008aa54 <__divdf3>
200838f0:	180b883a 	mov	r5,r3
200838f4:	1009883a 	mov	r4,r2
200838f8:	008c5580 	call	2008c558 <__fixdfsi>
200838fc:	1009883a 	mov	r4,r2
20083900:	102d883a 	mov	r22,r2
20083904:	008c5e00 	call	2008c5e0 <__floatsidf>
20083908:	1009883a 	mov	r4,r2
2008390c:	180b883a 	mov	r5,r3
20083910:	880d883a 	mov	r6,r17
20083914:	a00f883a 	mov	r7,r20
20083918:	008b5640 	call	2008b564 <__muldf3>
2008391c:	9009883a 	mov	r4,r18
20083920:	980b883a 	mov	r5,r19
20083924:	100d883a 	mov	r6,r2
20083928:	180f883a 	mov	r7,r3
2008392c:	008bc880 	call	2008bc88 <__subdf3>
20083930:	d9000717 	ldw	r4,28(sp)
20083934:	d9800617 	ldw	r6,24(sp)
20083938:	180b883a 	mov	r5,r3
2008393c:	b0c00c04 	addi	r3,r22,48
20083940:	20c00005 	stb	r3,0(r4)
20083944:	25c00044 	addi	r23,r4,1
20083948:	01000044 	movi	r4,1
2008394c:	1011883a 	mov	r8,r2
20083950:	2807883a 	mov	r3,r5
20083954:	31003d26 	beq	r6,r4,20083a4c <_dtoa_r+0x918>
20083958:	000d883a 	mov	r6,zero
2008395c:	01d00934 	movhi	r7,16420
20083960:	1009883a 	mov	r4,r2
20083964:	008b5640 	call	2008b564 <__muldf3>
20083968:	1009883a 	mov	r4,r2
2008396c:	180b883a 	mov	r5,r3
20083970:	000d883a 	mov	r6,zero
20083974:	000f883a 	mov	r7,zero
20083978:	1027883a 	mov	r19,r2
2008397c:	182b883a 	mov	r21,r3
20083980:	008b3200 	call	2008b320 <__eqdf2>
20083984:	103f9926 	beq	r2,zero,200837ec <__flash_rwdata_start+0xffff1ebc>
20083988:	d8c00617 	ldw	r3,24(sp)
2008398c:	d9000717 	ldw	r4,28(sp)
20083990:	b825883a 	mov	r18,r23
20083994:	18bfffc4 	addi	r2,r3,-1
20083998:	20ad883a 	add	r22,r4,r2
2008399c:	dc000315 	stw	r16,12(sp)
200839a0:	00000a06 	br	200839cc <_dtoa_r+0x898>
200839a4:	008b5640 	call	2008b564 <__muldf3>
200839a8:	1009883a 	mov	r4,r2
200839ac:	180b883a 	mov	r5,r3
200839b0:	000d883a 	mov	r6,zero
200839b4:	000f883a 	mov	r7,zero
200839b8:	1027883a 	mov	r19,r2
200839bc:	182b883a 	mov	r21,r3
200839c0:	b825883a 	mov	r18,r23
200839c4:	008b3200 	call	2008b320 <__eqdf2>
200839c8:	10022626 	beq	r2,zero,20084264 <_dtoa_r+0x1130>
200839cc:	880d883a 	mov	r6,r17
200839d0:	a00f883a 	mov	r7,r20
200839d4:	9809883a 	mov	r4,r19
200839d8:	a80b883a 	mov	r5,r21
200839dc:	008aa540 	call	2008aa54 <__divdf3>
200839e0:	180b883a 	mov	r5,r3
200839e4:	1009883a 	mov	r4,r2
200839e8:	008c5580 	call	2008c558 <__fixdfsi>
200839ec:	1009883a 	mov	r4,r2
200839f0:	1021883a 	mov	r16,r2
200839f4:	008c5e00 	call	2008c5e0 <__floatsidf>
200839f8:	1009883a 	mov	r4,r2
200839fc:	180b883a 	mov	r5,r3
20083a00:	880d883a 	mov	r6,r17
20083a04:	a00f883a 	mov	r7,r20
20083a08:	008b5640 	call	2008b564 <__muldf3>
20083a0c:	9809883a 	mov	r4,r19
20083a10:	a80b883a 	mov	r5,r21
20083a14:	100d883a 	mov	r6,r2
20083a18:	180f883a 	mov	r7,r3
20083a1c:	008bc880 	call	2008bc88 <__subdf3>
20083a20:	82000c04 	addi	r8,r16,48
20083a24:	92000005 	stb	r8,0(r18)
20083a28:	1009883a 	mov	r4,r2
20083a2c:	180b883a 	mov	r5,r3
20083a30:	000d883a 	mov	r6,zero
20083a34:	01d00934 	movhi	r7,16420
20083a38:	1011883a 	mov	r8,r2
20083a3c:	bdc00044 	addi	r23,r23,1
20083a40:	95bfd81e 	bne	r18,r22,200839a4 <__flash_rwdata_start+0xffff2074>
20083a44:	802d883a 	mov	r22,r16
20083a48:	dc000317 	ldw	r16,12(sp)
20083a4c:	4009883a 	mov	r4,r8
20083a50:	180b883a 	mov	r5,r3
20083a54:	400d883a 	mov	r6,r8
20083a58:	180f883a 	mov	r7,r3
20083a5c:	008a1b80 	call	2008a1b8 <__adddf3>
20083a60:	8809883a 	mov	r4,r17
20083a64:	a00b883a 	mov	r5,r20
20083a68:	100d883a 	mov	r6,r2
20083a6c:	180f883a 	mov	r7,r3
20083a70:	1027883a 	mov	r19,r2
20083a74:	1825883a 	mov	r18,r3
20083a78:	008b4840 	call	2008b484 <__ledf2>
20083a7c:	10000816 	blt	r2,zero,20083aa0 <_dtoa_r+0x96c>
20083a80:	8809883a 	mov	r4,r17
20083a84:	a00b883a 	mov	r5,r20
20083a88:	980d883a 	mov	r6,r19
20083a8c:	900f883a 	mov	r7,r18
20083a90:	008b3200 	call	2008b320 <__eqdf2>
20083a94:	103f551e 	bne	r2,zero,200837ec <__flash_rwdata_start+0xffff1ebc>
20083a98:	b580004c 	andi	r22,r22,1
20083a9c:	b03f5326 	beq	r22,zero,200837ec <__flash_rwdata_start+0xffff1ebc>
20083aa0:	bd7fffc3 	ldbu	r21,-1(r23)
20083aa4:	b8bfffc4 	addi	r2,r23,-1
20083aa8:	1007883a 	mov	r3,r2
20083aac:	01400e44 	movi	r5,57
20083ab0:	d9800717 	ldw	r6,28(sp)
20083ab4:	00000506 	br	20083acc <_dtoa_r+0x998>
20083ab8:	18ffffc4 	addi	r3,r3,-1
20083abc:	30825e26 	beq	r6,r2,20084438 <_dtoa_r+0x1304>
20083ac0:	1d400003 	ldbu	r21,0(r3)
20083ac4:	102f883a 	mov	r23,r2
20083ac8:	10bfffc4 	addi	r2,r2,-1
20083acc:	a9003fcc 	andi	r4,r21,255
20083ad0:	2100201c 	xori	r4,r4,128
20083ad4:	213fe004 	addi	r4,r4,-128
20083ad8:	217ff726 	beq	r4,r5,20083ab8 <__flash_rwdata_start+0xffff2188>
20083adc:	aa000044 	addi	r8,r21,1
20083ae0:	12000005 	stb	r8,0(r2)
20083ae4:	003f4106 	br	200837ec <__flash_rwdata_start+0xffff1ebc>
20083ae8:	d8c00b17 	ldw	r3,44(sp)
20083aec:	18006726 	beq	r3,zero,20083c8c <_dtoa_r+0xb58>
20083af0:	d9000317 	ldw	r4,12(sp)
20083af4:	00c00044 	movi	r3,1
20083af8:	19016a0e 	bge	r3,r4,200840a4 <_dtoa_r+0xf70>
20083afc:	d8800617 	ldw	r2,24(sp)
20083b00:	d8c00917 	ldw	r3,36(sp)
20083b04:	157fffc4 	addi	r21,r2,-1
20083b08:	1d420716 	blt	r3,r21,20084328 <_dtoa_r+0x11f4>
20083b0c:	1d6bc83a 	sub	r21,r3,r21
20083b10:	d8800617 	ldw	r2,24(sp)
20083b14:	1002c716 	blt	r2,zero,20084634 <_dtoa_r+0x1500>
20083b18:	dd000817 	ldw	r20,32(sp)
20083b1c:	d8800617 	ldw	r2,24(sp)
20083b20:	d9800817 	ldw	r6,32(sp)
20083b24:	8009883a 	mov	r4,r16
20083b28:	01400044 	movi	r5,1
20083b2c:	308d883a 	add	r6,r6,r2
20083b30:	d9800815 	stw	r6,32(sp)
20083b34:	b0ad883a 	add	r22,r22,r2
20083b38:	00864300 	call	20086430 <__i2b>
20083b3c:	1023883a 	mov	r17,r2
20083b40:	a0000826 	beq	r20,zero,20083b64 <_dtoa_r+0xa30>
20083b44:	0580070e 	bge	zero,r22,20083b64 <_dtoa_r+0xa30>
20083b48:	b005883a 	mov	r2,r22
20083b4c:	a5812016 	blt	r20,r22,20083fd0 <_dtoa_r+0xe9c>
20083b50:	d8c00817 	ldw	r3,32(sp)
20083b54:	a0a9c83a 	sub	r20,r20,r2
20083b58:	b0adc83a 	sub	r22,r22,r2
20083b5c:	1887c83a 	sub	r3,r3,r2
20083b60:	d8c00815 	stw	r3,32(sp)
20083b64:	d9000917 	ldw	r4,36(sp)
20083b68:	0100140e 	bge	zero,r4,20083bbc <_dtoa_r+0xa88>
20083b6c:	d9800b17 	ldw	r6,44(sp)
20083b70:	3001e526 	beq	r6,zero,20084308 <_dtoa_r+0x11d4>
20083b74:	05400e0e 	bge	zero,r21,20083bb0 <_dtoa_r+0xa7c>
20083b78:	880b883a 	mov	r5,r17
20083b7c:	8009883a 	mov	r4,r16
20083b80:	a80d883a 	mov	r6,r21
20083b84:	00866680 	call	20086668 <__pow5mult>
20083b88:	e00d883a 	mov	r6,fp
20083b8c:	8009883a 	mov	r4,r16
20083b90:	100b883a 	mov	r5,r2
20083b94:	1023883a 	mov	r17,r2
20083b98:	008646c0 	call	2008646c <__multiply>
20083b9c:	102f883a 	mov	r23,r2
20083ba0:	e00b883a 	mov	r5,fp
20083ba4:	8009883a 	mov	r4,r16
20083ba8:	00860cc0 	call	200860cc <_Bfree>
20083bac:	b839883a 	mov	fp,r23
20083bb0:	d8800917 	ldw	r2,36(sp)
20083bb4:	154dc83a 	sub	r6,r2,r21
20083bb8:	3001281e 	bne	r6,zero,2008405c <_dtoa_r+0xf28>
20083bbc:	05c00044 	movi	r23,1
20083bc0:	8009883a 	mov	r4,r16
20083bc4:	b80b883a 	mov	r5,r23
20083bc8:	00864300 	call	20086430 <__i2b>
20083bcc:	d8c00a17 	ldw	r3,40(sp)
20083bd0:	102b883a 	mov	r21,r2
20083bd4:	00c0310e 	bge	zero,r3,20083c9c <_dtoa_r+0xb68>
20083bd8:	8009883a 	mov	r4,r16
20083bdc:	100b883a 	mov	r5,r2
20083be0:	180d883a 	mov	r6,r3
20083be4:	00866680 	call	20086668 <__pow5mult>
20083be8:	d9000317 	ldw	r4,12(sp)
20083bec:	102b883a 	mov	r21,r2
20083bf0:	b9011f0e 	bge	r23,r4,20084070 <_dtoa_r+0xf3c>
20083bf4:	0027883a 	mov	r19,zero
20083bf8:	a8800417 	ldw	r2,16(r21)
20083bfc:	10800104 	addi	r2,r2,4
20083c00:	1085883a 	add	r2,r2,r2
20083c04:	1085883a 	add	r2,r2,r2
20083c08:	a885883a 	add	r2,r21,r2
20083c0c:	11000017 	ldw	r4,0(r2)
20083c10:	00863180 	call	20086318 <__hi0bits>
20083c14:	00c00804 	movi	r3,32
20083c18:	1885c83a 	sub	r2,r3,r2
20083c1c:	00002506 	br	20083cb4 <_dtoa_r+0xb80>
20083c20:	01800044 	movi	r6,1
20083c24:	d9800d15 	stw	r6,52(sp)
20083c28:	003dec06 	br	200833dc <__flash_rwdata_start+0xffff1aac>
20083c2c:	d8c00817 	ldw	r3,32(sp)
20083c30:	d9000517 	ldw	r4,20(sp)
20083c34:	d8000a15 	stw	zero,40(sp)
20083c38:	1907c83a 	sub	r3,r3,r4
20083c3c:	010dc83a 	sub	r6,zero,r4
20083c40:	d8c00815 	stw	r3,32(sp)
20083c44:	d9800915 	stw	r6,36(sp)
20083c48:	003ded06 	br	20083400 <__flash_rwdata_start+0xffff1ad0>
20083c4c:	05adc83a 	sub	r22,zero,r22
20083c50:	dd800815 	stw	r22,32(sp)
20083c54:	002d883a 	mov	r22,zero
20083c58:	003de406 	br	200833ec <__flash_rwdata_start+0xffff1abc>
20083c5c:	d9000517 	ldw	r4,20(sp)
20083c60:	008c5e00 	call	2008c5e0 <__floatsidf>
20083c64:	1009883a 	mov	r4,r2
20083c68:	180b883a 	mov	r5,r3
20083c6c:	b00d883a 	mov	r6,r22
20083c70:	a80f883a 	mov	r7,r21
20083c74:	008b3200 	call	2008b320 <__eqdf2>
20083c78:	103dc726 	beq	r2,zero,20083398 <__flash_rwdata_start+0xffff1a68>
20083c7c:	d8800517 	ldw	r2,20(sp)
20083c80:	10bfffc4 	addi	r2,r2,-1
20083c84:	d8800515 	stw	r2,20(sp)
20083c88:	003dc306 	br	20083398 <__flash_rwdata_start+0xffff1a68>
20083c8c:	dd400917 	ldw	r21,36(sp)
20083c90:	dd000817 	ldw	r20,32(sp)
20083c94:	0023883a 	mov	r17,zero
20083c98:	003fa906 	br	20083b40 <__flash_rwdata_start+0xffff2210>
20083c9c:	d9800317 	ldw	r6,12(sp)
20083ca0:	b981670e 	bge	r23,r6,20084240 <_dtoa_r+0x110c>
20083ca4:	0027883a 	mov	r19,zero
20083ca8:	d8c00a17 	ldw	r3,40(sp)
20083cac:	183fd21e 	bne	r3,zero,20083bf8 <__flash_rwdata_start+0xffff22c8>
20083cb0:	00800044 	movi	r2,1
20083cb4:	1585883a 	add	r2,r2,r22
20083cb8:	108007cc 	andi	r2,r2,31
20083cbc:	10005f26 	beq	r2,zero,20083e3c <_dtoa_r+0xd08>
20083cc0:	00c00804 	movi	r3,32
20083cc4:	1887c83a 	sub	r3,r3,r2
20083cc8:	01000104 	movi	r4,4
20083ccc:	20c2dd0e 	bge	r4,r3,20084844 <_dtoa_r+0x1710>
20083cd0:	d9000817 	ldw	r4,32(sp)
20083cd4:	00c00704 	movi	r3,28
20083cd8:	1885c83a 	sub	r2,r3,r2
20083cdc:	2089883a 	add	r4,r4,r2
20083ce0:	d9000815 	stw	r4,32(sp)
20083ce4:	a0a9883a 	add	r20,r20,r2
20083ce8:	b0ad883a 	add	r22,r22,r2
20083cec:	d8800817 	ldw	r2,32(sp)
20083cf0:	0080050e 	bge	zero,r2,20083d08 <_dtoa_r+0xbd4>
20083cf4:	e00b883a 	mov	r5,fp
20083cf8:	8009883a 	mov	r4,r16
20083cfc:	100d883a 	mov	r6,r2
20083d00:	00867a80 	call	200867a8 <__lshift>
20083d04:	1039883a 	mov	fp,r2
20083d08:	0580050e 	bge	zero,r22,20083d20 <_dtoa_r+0xbec>
20083d0c:	a80b883a 	mov	r5,r21
20083d10:	8009883a 	mov	r4,r16
20083d14:	b00d883a 	mov	r6,r22
20083d18:	00867a80 	call	200867a8 <__lshift>
20083d1c:	102b883a 	mov	r21,r2
20083d20:	d8c00d17 	ldw	r3,52(sp)
20083d24:	1801161e 	bne	r3,zero,20084180 <_dtoa_r+0x104c>
20083d28:	d8c00617 	ldw	r3,24(sp)
20083d2c:	00c12d0e 	bge	zero,r3,200841e4 <_dtoa_r+0x10b0>
20083d30:	d8c00b17 	ldw	r3,44(sp)
20083d34:	1800571e 	bne	r3,zero,20083e94 <_dtoa_r+0xd60>
20083d38:	dc800717 	ldw	r18,28(sp)
20083d3c:	dcc00617 	ldw	r19,24(sp)
20083d40:	9029883a 	mov	r20,r18
20083d44:	00000206 	br	20083d50 <_dtoa_r+0xc1c>
20083d48:	00860f40 	call	200860f4 <__multadd>
20083d4c:	1039883a 	mov	fp,r2
20083d50:	e009883a 	mov	r4,fp
20083d54:	a80b883a 	mov	r5,r21
20083d58:	0082f340 	call	20082f34 <quorem>
20083d5c:	10800c04 	addi	r2,r2,48
20083d60:	90800005 	stb	r2,0(r18)
20083d64:	94800044 	addi	r18,r18,1
20083d68:	9507c83a 	sub	r3,r18,r20
20083d6c:	8009883a 	mov	r4,r16
20083d70:	e00b883a 	mov	r5,fp
20083d74:	01800284 	movi	r6,10
20083d78:	000f883a 	mov	r7,zero
20083d7c:	1cfff216 	blt	r3,r19,20083d48 <__flash_rwdata_start+0xffff2418>
20083d80:	1011883a 	mov	r8,r2
20083d84:	d8800617 	ldw	r2,24(sp)
20083d88:	00822e0e 	bge	zero,r2,20084644 <_dtoa_r+0x1510>
20083d8c:	d9000717 	ldw	r4,28(sp)
20083d90:	0025883a 	mov	r18,zero
20083d94:	20af883a 	add	r23,r4,r2
20083d98:	e00b883a 	mov	r5,fp
20083d9c:	01800044 	movi	r6,1
20083da0:	8009883a 	mov	r4,r16
20083da4:	da001715 	stw	r8,92(sp)
20083da8:	00867a80 	call	200867a8 <__lshift>
20083dac:	1009883a 	mov	r4,r2
20083db0:	a80b883a 	mov	r5,r21
20083db4:	1039883a 	mov	fp,r2
20083db8:	00868f80 	call	200868f8 <__mcmp>
20083dbc:	da001717 	ldw	r8,92(sp)
20083dc0:	00816e0e 	bge	zero,r2,2008437c <_dtoa_r+0x1248>
20083dc4:	b93fffc3 	ldbu	r4,-1(r23)
20083dc8:	b8bfffc4 	addi	r2,r23,-1
20083dcc:	1007883a 	mov	r3,r2
20083dd0:	01800e44 	movi	r6,57
20083dd4:	d9c00717 	ldw	r7,28(sp)
20083dd8:	00000506 	br	20083df0 <_dtoa_r+0xcbc>
20083ddc:	18ffffc4 	addi	r3,r3,-1
20083de0:	38811926 	beq	r7,r2,20084248 <_dtoa_r+0x1114>
20083de4:	19000003 	ldbu	r4,0(r3)
20083de8:	102f883a 	mov	r23,r2
20083dec:	10bfffc4 	addi	r2,r2,-1
20083df0:	21403fcc 	andi	r5,r4,255
20083df4:	2940201c 	xori	r5,r5,128
20083df8:	297fe004 	addi	r5,r5,-128
20083dfc:	29bff726 	beq	r5,r6,20083ddc <__flash_rwdata_start+0xffff24ac>
20083e00:	21000044 	addi	r4,r4,1
20083e04:	11000005 	stb	r4,0(r2)
20083e08:	8009883a 	mov	r4,r16
20083e0c:	a80b883a 	mov	r5,r21
20083e10:	00860cc0 	call	200860cc <_Bfree>
20083e14:	883e7526 	beq	r17,zero,200837ec <__flash_rwdata_start+0xffff1ebc>
20083e18:	90000426 	beq	r18,zero,20083e2c <_dtoa_r+0xcf8>
20083e1c:	94400326 	beq	r18,r17,20083e2c <_dtoa_r+0xcf8>
20083e20:	8009883a 	mov	r4,r16
20083e24:	900b883a 	mov	r5,r18
20083e28:	00860cc0 	call	200860cc <_Bfree>
20083e2c:	8009883a 	mov	r4,r16
20083e30:	880b883a 	mov	r5,r17
20083e34:	00860cc0 	call	200860cc <_Bfree>
20083e38:	003e6c06 	br	200837ec <__flash_rwdata_start+0xffff1ebc>
20083e3c:	00800704 	movi	r2,28
20083e40:	d9800817 	ldw	r6,32(sp)
20083e44:	a0a9883a 	add	r20,r20,r2
20083e48:	b0ad883a 	add	r22,r22,r2
20083e4c:	308d883a 	add	r6,r6,r2
20083e50:	d9800815 	stw	r6,32(sp)
20083e54:	003fa506 	br	20083cec <__flash_rwdata_start+0xffff23bc>
20083e58:	013efb84 	movi	r4,-1042
20083e5c:	246bc83a 	sub	r21,r4,r17
20083e60:	9548983a 	sll	r4,r18,r21
20083e64:	003d1806 	br	200832c8 <__flash_rwdata_start+0xffff1998>
20083e68:	d8000d15 	stw	zero,52(sp)
20083e6c:	003d5b06 	br	200833dc <__flash_rwdata_start+0xffff1aac>
20083e70:	880b883a 	mov	r5,r17
20083e74:	8009883a 	mov	r4,r16
20083e78:	01800284 	movi	r6,10
20083e7c:	000f883a 	mov	r7,zero
20083e80:	00860f40 	call	200860f4 <__multadd>
20083e84:	1023883a 	mov	r17,r2
20083e88:	d8800c17 	ldw	r2,48(sp)
20083e8c:	0082550e 	bge	zero,r2,200847e4 <_dtoa_r+0x16b0>
20083e90:	d8800615 	stw	r2,24(sp)
20083e94:	0500050e 	bge	zero,r20,20083eac <_dtoa_r+0xd78>
20083e98:	880b883a 	mov	r5,r17
20083e9c:	8009883a 	mov	r4,r16
20083ea0:	a00d883a 	mov	r6,r20
20083ea4:	00867a80 	call	200867a8 <__lshift>
20083ea8:	1023883a 	mov	r17,r2
20083eac:	98016a1e 	bne	r19,zero,20084458 <_dtoa_r+0x1324>
20083eb0:	8829883a 	mov	r20,r17
20083eb4:	d9000617 	ldw	r4,24(sp)
20083eb8:	dcc00717 	ldw	r19,28(sp)
20083ebc:	9480004c 	andi	r18,r18,1
20083ec0:	20bfffc4 	addi	r2,r4,-1
20083ec4:	9885883a 	add	r2,r19,r2
20083ec8:	d8800415 	stw	r2,16(sp)
20083ecc:	dc800615 	stw	r18,24(sp)
20083ed0:	e009883a 	mov	r4,fp
20083ed4:	a80b883a 	mov	r5,r21
20083ed8:	0082f340 	call	20082f34 <quorem>
20083edc:	e009883a 	mov	r4,fp
20083ee0:	880b883a 	mov	r5,r17
20083ee4:	102f883a 	mov	r23,r2
20083ee8:	00868f80 	call	200868f8 <__mcmp>
20083eec:	8009883a 	mov	r4,r16
20083ef0:	a80b883a 	mov	r5,r21
20083ef4:	a00d883a 	mov	r6,r20
20083ef8:	102d883a 	mov	r22,r2
20083efc:	00869580 	call	20086958 <__mdiff>
20083f00:	1007883a 	mov	r3,r2
20083f04:	10800317 	ldw	r2,12(r2)
20083f08:	bc800c04 	addi	r18,r23,48
20083f0c:	1000971e 	bne	r2,zero,2008416c <_dtoa_r+0x1038>
20083f10:	180b883a 	mov	r5,r3
20083f14:	e009883a 	mov	r4,fp
20083f18:	d8c01515 	stw	r3,84(sp)
20083f1c:	00868f80 	call	200868f8 <__mcmp>
20083f20:	d8c01517 	ldw	r3,84(sp)
20083f24:	8009883a 	mov	r4,r16
20083f28:	d8801515 	stw	r2,84(sp)
20083f2c:	180b883a 	mov	r5,r3
20083f30:	00860cc0 	call	200860cc <_Bfree>
20083f34:	d8801517 	ldw	r2,84(sp)
20083f38:	1000041e 	bne	r2,zero,20083f4c <_dtoa_r+0xe18>
20083f3c:	d9800317 	ldw	r6,12(sp)
20083f40:	3000021e 	bne	r6,zero,20083f4c <_dtoa_r+0xe18>
20083f44:	d8c00617 	ldw	r3,24(sp)
20083f48:	18007626 	beq	r3,zero,20084124 <_dtoa_r+0xff0>
20083f4c:	b0005b16 	blt	r22,zero,200840bc <_dtoa_r+0xf88>
20083f50:	b000041e 	bne	r22,zero,20083f64 <_dtoa_r+0xe30>
20083f54:	d9000317 	ldw	r4,12(sp)
20083f58:	2000021e 	bne	r4,zero,20083f64 <_dtoa_r+0xe30>
20083f5c:	d8c00617 	ldw	r3,24(sp)
20083f60:	18005626 	beq	r3,zero,200840bc <_dtoa_r+0xf88>
20083f64:	00814d16 	blt	zero,r2,2008449c <_dtoa_r+0x1368>
20083f68:	d8c00417 	ldw	r3,16(sp)
20083f6c:	9d800044 	addi	r22,r19,1
20083f70:	9c800005 	stb	r18,0(r19)
20083f74:	b02f883a 	mov	r23,r22
20083f78:	98c14c26 	beq	r19,r3,200844ac <_dtoa_r+0x1378>
20083f7c:	e00b883a 	mov	r5,fp
20083f80:	8009883a 	mov	r4,r16
20083f84:	01800284 	movi	r6,10
20083f88:	000f883a 	mov	r7,zero
20083f8c:	00860f40 	call	200860f4 <__multadd>
20083f90:	1039883a 	mov	fp,r2
20083f94:	8d006d26 	beq	r17,r20,2008414c <_dtoa_r+0x1018>
20083f98:	880b883a 	mov	r5,r17
20083f9c:	01800284 	movi	r6,10
20083fa0:	000f883a 	mov	r7,zero
20083fa4:	8009883a 	mov	r4,r16
20083fa8:	00860f40 	call	200860f4 <__multadd>
20083fac:	a00b883a 	mov	r5,r20
20083fb0:	8009883a 	mov	r4,r16
20083fb4:	01800284 	movi	r6,10
20083fb8:	000f883a 	mov	r7,zero
20083fbc:	1023883a 	mov	r17,r2
20083fc0:	00860f40 	call	200860f4 <__multadd>
20083fc4:	1029883a 	mov	r20,r2
20083fc8:	b027883a 	mov	r19,r22
20083fcc:	003fc006 	br	20083ed0 <__flash_rwdata_start+0xffff25a0>
20083fd0:	a005883a 	mov	r2,r20
20083fd4:	003ede06 	br	20083b50 <__flash_rwdata_start+0xffff2220>
20083fd8:	01000044 	movi	r4,1
20083fdc:	d9000b15 	stw	r4,44(sp)
20083fe0:	d9802217 	ldw	r6,136(sp)
20083fe4:	0180dc0e 	bge	zero,r6,20084358 <_dtoa_r+0x1224>
20083fe8:	3023883a 	mov	r17,r6
20083fec:	d9800c15 	stw	r6,48(sp)
20083ff0:	d9800615 	stw	r6,24(sp)
20083ff4:	003d1e06 	br	20083470 <__flash_rwdata_start+0xffff1b40>
20083ff8:	d8800617 	ldw	r2,24(sp)
20083ffc:	00be3716 	blt	zero,r2,200838dc <__flash_rwdata_start+0xffff1fac>
20084000:	1000be1e 	bne	r2,zero,200842fc <_dtoa_r+0x11c8>
20084004:	8809883a 	mov	r4,r17
20084008:	a00b883a 	mov	r5,r20
2008400c:	000d883a 	mov	r6,zero
20084010:	01d00534 	movhi	r7,16404
20084014:	008b5640 	call	2008b564 <__muldf3>
20084018:	1009883a 	mov	r4,r2
2008401c:	180b883a 	mov	r5,r3
20084020:	900d883a 	mov	r6,r18
20084024:	980f883a 	mov	r7,r19
20084028:	008b3a40 	call	2008b3a4 <__gedf2>
2008402c:	002b883a 	mov	r21,zero
20084030:	0023883a 	mov	r17,zero
20084034:	10007a16 	blt	r2,zero,20084220 <_dtoa_r+0x10ec>
20084038:	d9002217 	ldw	r4,136(sp)
2008403c:	ddc00717 	ldw	r23,28(sp)
20084040:	0108303a 	nor	r4,zero,r4
20084044:	d9000515 	stw	r4,20(sp)
20084048:	8009883a 	mov	r4,r16
2008404c:	a80b883a 	mov	r5,r21
20084050:	00860cc0 	call	200860cc <_Bfree>
20084054:	883f751e 	bne	r17,zero,20083e2c <__flash_rwdata_start+0xffff24fc>
20084058:	003de406 	br	200837ec <__flash_rwdata_start+0xffff1ebc>
2008405c:	e00b883a 	mov	r5,fp
20084060:	8009883a 	mov	r4,r16
20084064:	00866680 	call	20086668 <__pow5mult>
20084068:	1039883a 	mov	fp,r2
2008406c:	003ed306 	br	20083bbc <__flash_rwdata_start+0xffff228c>
20084070:	903ee01e 	bne	r18,zero,20083bf4 <__flash_rwdata_start+0xffff22c4>
20084074:	00800434 	movhi	r2,16
20084078:	10bfffc4 	addi	r2,r2,-1
2008407c:	9884703a 	and	r2,r19,r2
20084080:	103f081e 	bne	r2,zero,20083ca4 <__flash_rwdata_start+0xffff2374>
20084084:	9cdffc2c 	andhi	r19,r19,32752
20084088:	983f0626 	beq	r19,zero,20083ca4 <__flash_rwdata_start+0xffff2374>
2008408c:	d8800817 	ldw	r2,32(sp)
20084090:	b5800044 	addi	r22,r22,1
20084094:	04c00044 	movi	r19,1
20084098:	10800044 	addi	r2,r2,1
2008409c:	d8800815 	stw	r2,32(sp)
200840a0:	003f0106 	br	20083ca8 <__flash_rwdata_start+0xffff2378>
200840a4:	d9800f17 	ldw	r6,60(sp)
200840a8:	30016826 	beq	r6,zero,2008464c <_dtoa_r+0x1518>
200840ac:	10810cc4 	addi	r2,r2,1075
200840b0:	dd400917 	ldw	r21,36(sp)
200840b4:	dd000817 	ldw	r20,32(sp)
200840b8:	003e9906 	br	20083b20 <__flash_rwdata_start+0xffff21f0>
200840bc:	9011883a 	mov	r8,r18
200840c0:	4007883a 	mov	r3,r8
200840c4:	e02d883a 	mov	r22,fp
200840c8:	0080100e 	bge	zero,r2,2008410c <_dtoa_r+0xfd8>
200840cc:	01800044 	movi	r6,1
200840d0:	8009883a 	mov	r4,r16
200840d4:	e00b883a 	mov	r5,fp
200840d8:	da001515 	stw	r8,84(sp)
200840dc:	da001715 	stw	r8,92(sp)
200840e0:	00867a80 	call	200867a8 <__lshift>
200840e4:	1009883a 	mov	r4,r2
200840e8:	a80b883a 	mov	r5,r21
200840ec:	102d883a 	mov	r22,r2
200840f0:	00868f80 	call	200868f8 <__mcmp>
200840f4:	d8c01517 	ldw	r3,84(sp)
200840f8:	da001717 	ldw	r8,92(sp)
200840fc:	0081a50e 	bge	zero,r2,20084794 <_dtoa_r+0x1660>
20084100:	00800e44 	movi	r2,57
20084104:	40817b26 	beq	r8,r2,200846f4 <_dtoa_r+0x15c0>
20084108:	40c00044 	addi	r3,r8,1
2008410c:	8825883a 	mov	r18,r17
20084110:	9dc00044 	addi	r23,r19,1
20084114:	98c00005 	stb	r3,0(r19)
20084118:	a023883a 	mov	r17,r20
2008411c:	b039883a 	mov	fp,r22
20084120:	003f3906 	br	20083e08 <__flash_rwdata_start+0xffff24d8>
20084124:	00800e44 	movi	r2,57
20084128:	9011883a 	mov	r8,r18
2008412c:	90817226 	beq	r18,r2,200846f8 <_dtoa_r+0x15c4>
20084130:	0580010e 	bge	zero,r22,20084138 <_dtoa_r+0x1004>
20084134:	ba000c44 	addi	r8,r23,49
20084138:	8825883a 	mov	r18,r17
2008413c:	9dc00044 	addi	r23,r19,1
20084140:	9a000005 	stb	r8,0(r19)
20084144:	a023883a 	mov	r17,r20
20084148:	003f2f06 	br	20083e08 <__flash_rwdata_start+0xffff24d8>
2008414c:	880b883a 	mov	r5,r17
20084150:	8009883a 	mov	r4,r16
20084154:	01800284 	movi	r6,10
20084158:	000f883a 	mov	r7,zero
2008415c:	00860f40 	call	200860f4 <__multadd>
20084160:	1023883a 	mov	r17,r2
20084164:	1029883a 	mov	r20,r2
20084168:	003f9706 	br	20083fc8 <__flash_rwdata_start+0xffff2698>
2008416c:	8009883a 	mov	r4,r16
20084170:	180b883a 	mov	r5,r3
20084174:	00860cc0 	call	200860cc <_Bfree>
20084178:	00800044 	movi	r2,1
2008417c:	003f7306 	br	20083f4c <__flash_rwdata_start+0xffff261c>
20084180:	e009883a 	mov	r4,fp
20084184:	a80b883a 	mov	r5,r21
20084188:	00868f80 	call	200868f8 <__mcmp>
2008418c:	103ee60e 	bge	r2,zero,20083d28 <__flash_rwdata_start+0xffff23f8>
20084190:	8009883a 	mov	r4,r16
20084194:	e00b883a 	mov	r5,fp
20084198:	01800284 	movi	r6,10
2008419c:	000f883a 	mov	r7,zero
200841a0:	00860f40 	call	200860f4 <__multadd>
200841a4:	d9000517 	ldw	r4,20(sp)
200841a8:	d9800b17 	ldw	r6,44(sp)
200841ac:	1039883a 	mov	fp,r2
200841b0:	213fffc4 	addi	r4,r4,-1
200841b4:	d9000515 	stw	r4,20(sp)
200841b8:	303f2d1e 	bne	r6,zero,20083e70 <__flash_rwdata_start+0xffff2540>
200841bc:	d9000c17 	ldw	r4,48(sp)
200841c0:	0101780e 	bge	zero,r4,200847a4 <_dtoa_r+0x1670>
200841c4:	d9000615 	stw	r4,24(sp)
200841c8:	003edb06 	br	20083d38 <__flash_rwdata_start+0xffff2408>
200841cc:	00800084 	movi	r2,2
200841d0:	30818e1e 	bne	r6,r2,2008480c <_dtoa_r+0x16d8>
200841d4:	d8000b15 	stw	zero,44(sp)
200841d8:	003f8106 	br	20083fe0 <__flash_rwdata_start+0xffff26b0>
200841dc:	d8800717 	ldw	r2,28(sp)
200841e0:	003c0306 	br	200831f0 <__flash_rwdata_start+0xffff18c0>
200841e4:	d9000317 	ldw	r4,12(sp)
200841e8:	00800084 	movi	r2,2
200841ec:	113ed00e 	bge	r2,r4,20083d30 <__flash_rwdata_start+0xffff2400>
200841f0:	d8c00617 	ldw	r3,24(sp)
200841f4:	183f901e 	bne	r3,zero,20084038 <__flash_rwdata_start+0xffff2708>
200841f8:	a80b883a 	mov	r5,r21
200841fc:	8009883a 	mov	r4,r16
20084200:	01800144 	movi	r6,5
20084204:	000f883a 	mov	r7,zero
20084208:	00860f40 	call	200860f4 <__multadd>
2008420c:	e009883a 	mov	r4,fp
20084210:	100b883a 	mov	r5,r2
20084214:	102b883a 	mov	r21,r2
20084218:	00868f80 	call	200868f8 <__mcmp>
2008421c:	00bf860e 	bge	zero,r2,20084038 <__flash_rwdata_start+0xffff2708>
20084220:	d9800717 	ldw	r6,28(sp)
20084224:	00800c44 	movi	r2,49
20084228:	30800005 	stb	r2,0(r6)
2008422c:	d8800517 	ldw	r2,20(sp)
20084230:	35c00044 	addi	r23,r6,1
20084234:	10800044 	addi	r2,r2,1
20084238:	d8800515 	stw	r2,20(sp)
2008423c:	003f8206 	br	20084048 <__flash_rwdata_start+0xffff2718>
20084240:	903e981e 	bne	r18,zero,20083ca4 <__flash_rwdata_start+0xffff2374>
20084244:	003f8b06 	br	20084074 <__flash_rwdata_start+0xffff2744>
20084248:	d9800517 	ldw	r6,20(sp)
2008424c:	d8c00717 	ldw	r3,28(sp)
20084250:	00800c44 	movi	r2,49
20084254:	31800044 	addi	r6,r6,1
20084258:	d9800515 	stw	r6,20(sp)
2008425c:	18800005 	stb	r2,0(r3)
20084260:	003ee906 	br	20083e08 <__flash_rwdata_start+0xffff24d8>
20084264:	dc000317 	ldw	r16,12(sp)
20084268:	003d6006 	br	200837ec <__flash_rwdata_start+0xffff1ebc>
2008426c:	8809883a 	mov	r4,r17
20084270:	008c5e00 	call	2008c5e0 <__floatsidf>
20084274:	a009883a 	mov	r4,r20
20084278:	a80b883a 	mov	r5,r21
2008427c:	100d883a 	mov	r6,r2
20084280:	180f883a 	mov	r7,r3
20084284:	008b5640 	call	2008b564 <__muldf3>
20084288:	1009883a 	mov	r4,r2
2008428c:	180b883a 	mov	r5,r3
20084290:	000d883a 	mov	r6,zero
20084294:	01d00734 	movhi	r7,16412
20084298:	008a1b80 	call	2008a1b8 <__adddf3>
2008429c:	1023883a 	mov	r17,r2
200842a0:	00bf3034 	movhi	r2,64704
200842a4:	1885883a 	add	r2,r3,r2
200842a8:	d8800e15 	stw	r2,56(sp)
200842ac:	a009883a 	mov	r4,r20
200842b0:	a80b883a 	mov	r5,r21
200842b4:	000d883a 	mov	r6,zero
200842b8:	01d00534 	movhi	r7,16404
200842bc:	008bc880 	call	2008bc88 <__subdf3>
200842c0:	d9c00e17 	ldw	r7,56(sp)
200842c4:	1009883a 	mov	r4,r2
200842c8:	180b883a 	mov	r5,r3
200842cc:	880d883a 	mov	r6,r17
200842d0:	102b883a 	mov	r21,r2
200842d4:	1829883a 	mov	r20,r3
200842d8:	008b3a40 	call	2008b3a4 <__gedf2>
200842dc:	00807716 	blt	zero,r2,200844bc <_dtoa_r+0x1388>
200842e0:	d8800e17 	ldw	r2,56(sp)
200842e4:	a809883a 	mov	r4,r21
200842e8:	a00b883a 	mov	r5,r20
200842ec:	11e0003c 	xorhi	r7,r2,32768
200842f0:	880d883a 	mov	r6,r17
200842f4:	008b4840 	call	2008b484 <__ledf2>
200842f8:	103d6b0e 	bge	r2,zero,200838a8 <__flash_rwdata_start+0xffff1f78>
200842fc:	002b883a 	mov	r21,zero
20084300:	0023883a 	mov	r17,zero
20084304:	003f4c06 	br	20084038 <__flash_rwdata_start+0xffff2708>
20084308:	d9800917 	ldw	r6,36(sp)
2008430c:	e00b883a 	mov	r5,fp
20084310:	8009883a 	mov	r4,r16
20084314:	00866680 	call	20086668 <__pow5mult>
20084318:	1039883a 	mov	fp,r2
2008431c:	003e2706 	br	20083bbc <__flash_rwdata_start+0xffff228c>
20084320:	d8000b15 	stw	zero,44(sp)
20084324:	003c4906 	br	2008344c <__flash_rwdata_start+0xffff1b1c>
20084328:	d9000917 	ldw	r4,36(sp)
2008432c:	d9800a17 	ldw	r6,40(sp)
20084330:	dd400915 	stw	r21,36(sp)
20084334:	a905c83a 	sub	r2,r21,r4
20084338:	308d883a 	add	r6,r6,r2
2008433c:	d9800a15 	stw	r6,40(sp)
20084340:	002b883a 	mov	r21,zero
20084344:	003df206 	br	20083b10 <__flash_rwdata_start+0xffff21e0>
20084348:	dc800e15 	stw	r18,56(sp)
2008434c:	982b883a 	mov	r21,r19
20084350:	04400084 	movi	r17,2
20084354:	003c7406 	br	20083528 <__flash_rwdata_start+0xffff1bf8>
20084358:	04400044 	movi	r17,1
2008435c:	dc400c15 	stw	r17,48(sp)
20084360:	dc400615 	stw	r17,24(sp)
20084364:	dc402215 	stw	r17,136(sp)
20084368:	80001115 	stw	zero,68(r16)
2008436c:	000b883a 	mov	r5,zero
20084370:	003c4a06 	br	2008349c <__flash_rwdata_start+0xffff1b6c>
20084374:	3023883a 	mov	r17,r6
20084378:	003ffb06 	br	20084368 <__flash_rwdata_start+0xffff2a38>
2008437c:	1000021e 	bne	r2,zero,20084388 <_dtoa_r+0x1254>
20084380:	4200004c 	andi	r8,r8,1
20084384:	403e8f1e 	bne	r8,zero,20083dc4 <__flash_rwdata_start+0xffff2494>
20084388:	01000c04 	movi	r4,48
2008438c:	00000106 	br	20084394 <_dtoa_r+0x1260>
20084390:	102f883a 	mov	r23,r2
20084394:	b8bfffc4 	addi	r2,r23,-1
20084398:	10c00007 	ldb	r3,0(r2)
2008439c:	193ffc26 	beq	r3,r4,20084390 <__flash_rwdata_start+0xffff2a60>
200843a0:	003e9906 	br	20083e08 <__flash_rwdata_start+0xffff24d8>
200843a4:	d9000517 	ldw	r4,20(sp)
200843a8:	012fc83a 	sub	r23,zero,r4
200843ac:	b800ad26 	beq	r23,zero,20084664 <_dtoa_r+0x1530>
200843b0:	b88003cc 	andi	r2,r23,15
200843b4:	100490fa 	slli	r2,r2,3
200843b8:	00c00034 	movhi	r3,0
200843bc:	18c05204 	addi	r3,r3,328
200843c0:	1885883a 	add	r2,r3,r2
200843c4:	11800017 	ldw	r6,0(r2)
200843c8:	11c00117 	ldw	r7,4(r2)
200843cc:	b82fd13a 	srai	r23,r23,4
200843d0:	9009883a 	mov	r4,r18
200843d4:	980b883a 	mov	r5,r19
200843d8:	008b5640 	call	2008b564 <__muldf3>
200843dc:	1029883a 	mov	r20,r2
200843e0:	182b883a 	mov	r21,r3
200843e4:	b800f426 	beq	r23,zero,200847b8 <_dtoa_r+0x1684>
200843e8:	02000034 	movhi	r8,0
200843ec:	42004804 	addi	r8,r8,288
200843f0:	8029883a 	mov	r20,r16
200843f4:	04400084 	movi	r17,2
200843f8:	4021883a 	mov	r16,r8
200843fc:	b980004c 	andi	r6,r23,1
20084400:	1009883a 	mov	r4,r2
20084404:	b82fd07a 	srai	r23,r23,1
20084408:	180b883a 	mov	r5,r3
2008440c:	30000426 	beq	r6,zero,20084420 <_dtoa_r+0x12ec>
20084410:	81800017 	ldw	r6,0(r16)
20084414:	81c00117 	ldw	r7,4(r16)
20084418:	8c400044 	addi	r17,r17,1
2008441c:	008b5640 	call	2008b564 <__muldf3>
20084420:	84000204 	addi	r16,r16,8
20084424:	b83ff51e 	bne	r23,zero,200843fc <__flash_rwdata_start+0xffff2acc>
20084428:	a021883a 	mov	r16,r20
2008442c:	182b883a 	mov	r21,r3
20084430:	1029883a 	mov	r20,r2
20084434:	003c5506 	br	2008358c <__flash_rwdata_start+0xffff1c5c>
20084438:	d9800517 	ldw	r6,20(sp)
2008443c:	d9000717 	ldw	r4,28(sp)
20084440:	00c00c04 	movi	r3,48
20084444:	31800044 	addi	r6,r6,1
20084448:	d9800515 	stw	r6,20(sp)
2008444c:	20c00005 	stb	r3,0(r4)
20084450:	02000c44 	movi	r8,49
20084454:	003da206 	br	20083ae0 <__flash_rwdata_start+0xffff21b0>
20084458:	89400117 	ldw	r5,4(r17)
2008445c:	8009883a 	mov	r4,r16
20084460:	00860240 	call	20086024 <_Balloc>
20084464:	89800417 	ldw	r6,16(r17)
20084468:	11000304 	addi	r4,r2,12
2008446c:	89400304 	addi	r5,r17,12
20084470:	31800084 	addi	r6,r6,2
20084474:	318d883a 	add	r6,r6,r6
20084478:	318d883a 	add	r6,r6,r6
2008447c:	1027883a 	mov	r19,r2
20084480:	0085c6c0 	call	20085c6c <memcpy>
20084484:	8009883a 	mov	r4,r16
20084488:	980b883a 	mov	r5,r19
2008448c:	01800044 	movi	r6,1
20084490:	00867a80 	call	200867a8 <__lshift>
20084494:	1029883a 	mov	r20,r2
20084498:	003e8606 	br	20083eb4 <__flash_rwdata_start+0xffff2584>
2008449c:	00800e44 	movi	r2,57
200844a0:	90809526 	beq	r18,r2,200846f8 <_dtoa_r+0x15c4>
200844a4:	92000044 	addi	r8,r18,1
200844a8:	003f2306 	br	20084138 <__flash_rwdata_start+0xffff2808>
200844ac:	9011883a 	mov	r8,r18
200844b0:	8825883a 	mov	r18,r17
200844b4:	a023883a 	mov	r17,r20
200844b8:	003e3706 	br	20083d98 <__flash_rwdata_start+0xffff2468>
200844bc:	002b883a 	mov	r21,zero
200844c0:	0023883a 	mov	r17,zero
200844c4:	003f5606 	br	20084220 <__flash_rwdata_start+0xffff28f0>
200844c8:	51bfffc4 	addi	r6,r10,-1
200844cc:	300490fa 	slli	r2,r6,3
200844d0:	00c00034 	movhi	r3,0
200844d4:	18c05204 	addi	r3,r3,328
200844d8:	1885883a 	add	r2,r3,r2
200844dc:	d9c00e17 	ldw	r7,56(sp)
200844e0:	11000017 	ldw	r4,0(r2)
200844e4:	11400117 	ldw	r5,4(r2)
200844e8:	d8800717 	ldw	r2,28(sp)
200844ec:	d9801015 	stw	r6,64(sp)
200844f0:	880d883a 	mov	r6,r17
200844f4:	da801615 	stw	r10,88(sp)
200844f8:	15c00044 	addi	r23,r2,1
200844fc:	008b5640 	call	2008b564 <__muldf3>
20084500:	a80b883a 	mov	r5,r21
20084504:	a009883a 	mov	r4,r20
20084508:	d8c01115 	stw	r3,68(sp)
2008450c:	d8800e15 	stw	r2,56(sp)
20084510:	008c5580 	call	2008c558 <__fixdfsi>
20084514:	1009883a 	mov	r4,r2
20084518:	1023883a 	mov	r17,r2
2008451c:	008c5e00 	call	2008c5e0 <__floatsidf>
20084520:	a009883a 	mov	r4,r20
20084524:	a80b883a 	mov	r5,r21
20084528:	100d883a 	mov	r6,r2
2008452c:	180f883a 	mov	r7,r3
20084530:	008bc880 	call	2008bc88 <__subdf3>
20084534:	1813883a 	mov	r9,r3
20084538:	d8c00717 	ldw	r3,28(sp)
2008453c:	8c400c04 	addi	r17,r17,48
20084540:	1011883a 	mov	r8,r2
20084544:	1c400005 	stb	r17,0(r3)
20084548:	da801617 	ldw	r10,88(sp)
2008454c:	00800044 	movi	r2,1
20084550:	50802326 	beq	r10,r2,200845e0 <_dtoa_r+0x14ac>
20084554:	d8800717 	ldw	r2,28(sp)
20084558:	b82b883a 	mov	r21,r23
2008455c:	dc001315 	stw	r16,76(sp)
20084560:	12a9883a 	add	r20,r2,r10
20084564:	4807883a 	mov	r3,r9
20084568:	4005883a 	mov	r2,r8
2008456c:	dc801415 	stw	r18,80(sp)
20084570:	000d883a 	mov	r6,zero
20084574:	01d00934 	movhi	r7,16420
20084578:	1009883a 	mov	r4,r2
2008457c:	180b883a 	mov	r5,r3
20084580:	008b5640 	call	2008b564 <__muldf3>
20084584:	180b883a 	mov	r5,r3
20084588:	1009883a 	mov	r4,r2
2008458c:	1821883a 	mov	r16,r3
20084590:	1025883a 	mov	r18,r2
20084594:	008c5580 	call	2008c558 <__fixdfsi>
20084598:	1009883a 	mov	r4,r2
2008459c:	1023883a 	mov	r17,r2
200845a0:	008c5e00 	call	2008c5e0 <__floatsidf>
200845a4:	9009883a 	mov	r4,r18
200845a8:	800b883a 	mov	r5,r16
200845ac:	100d883a 	mov	r6,r2
200845b0:	180f883a 	mov	r7,r3
200845b4:	8c400c04 	addi	r17,r17,48
200845b8:	008bc880 	call	2008bc88 <__subdf3>
200845bc:	ad400044 	addi	r21,r21,1
200845c0:	ac7fffc5 	stb	r17,-1(r21)
200845c4:	ad3fea1e 	bne	r21,r20,20084570 <__flash_rwdata_start+0xffff2c40>
200845c8:	1813883a 	mov	r9,r3
200845cc:	d8c01017 	ldw	r3,64(sp)
200845d0:	dc001317 	ldw	r16,76(sp)
200845d4:	dc801417 	ldw	r18,80(sp)
200845d8:	1011883a 	mov	r8,r2
200845dc:	b8ef883a 	add	r23,r23,r3
200845e0:	d9000e17 	ldw	r4,56(sp)
200845e4:	d9401117 	ldw	r5,68(sp)
200845e8:	000d883a 	mov	r6,zero
200845ec:	01cff834 	movhi	r7,16352
200845f0:	da001715 	stw	r8,92(sp)
200845f4:	da401515 	stw	r9,84(sp)
200845f8:	008a1b80 	call	2008a1b8 <__adddf3>
200845fc:	da001717 	ldw	r8,92(sp)
20084600:	da401517 	ldw	r9,84(sp)
20084604:	1009883a 	mov	r4,r2
20084608:	400d883a 	mov	r6,r8
2008460c:	480f883a 	mov	r7,r9
20084610:	180b883a 	mov	r5,r3
20084614:	008b4840 	call	2008b484 <__ledf2>
20084618:	da001717 	ldw	r8,92(sp)
2008461c:	da401517 	ldw	r9,84(sp)
20084620:	10003b0e 	bge	r2,zero,20084710 <_dtoa_r+0x15dc>
20084624:	d9001217 	ldw	r4,72(sp)
20084628:	bd7fffc3 	ldbu	r21,-1(r23)
2008462c:	d9000515 	stw	r4,20(sp)
20084630:	003d1c06 	br	20083aa4 <__flash_rwdata_start+0xffff2174>
20084634:	d8c00817 	ldw	r3,32(sp)
20084638:	18a9c83a 	sub	r20,r3,r2
2008463c:	0005883a 	mov	r2,zero
20084640:	003d3706 	br	20083b20 <__flash_rwdata_start+0xffff21f0>
20084644:	00800044 	movi	r2,1
20084648:	003dd006 	br	20083d8c <__flash_rwdata_start+0xffff245c>
2008464c:	d8c00217 	ldw	r3,8(sp)
20084650:	00800d84 	movi	r2,54
20084654:	dd400917 	ldw	r21,36(sp)
20084658:	10c5c83a 	sub	r2,r2,r3
2008465c:	dd000817 	ldw	r20,32(sp)
20084660:	003d2f06 	br	20083b20 <__flash_rwdata_start+0xffff21f0>
20084664:	9029883a 	mov	r20,r18
20084668:	982b883a 	mov	r21,r19
2008466c:	04400084 	movi	r17,2
20084670:	003bc606 	br	2008358c <__flash_rwdata_start+0xffff1c5c>
20084674:	d8800617 	ldw	r2,24(sp)
20084678:	103efc26 	beq	r2,zero,2008426c <__flash_rwdata_start+0xffff293c>
2008467c:	d8c00c17 	ldw	r3,48(sp)
20084680:	00fc890e 	bge	zero,r3,200838a8 <__flash_rwdata_start+0xffff1f78>
20084684:	a80b883a 	mov	r5,r21
20084688:	a009883a 	mov	r4,r20
2008468c:	000d883a 	mov	r6,zero
20084690:	01d00934 	movhi	r7,16420
20084694:	008b5640 	call	2008b564 <__muldf3>
20084698:	89000044 	addi	r4,r17,1
2008469c:	1029883a 	mov	r20,r2
200846a0:	182b883a 	mov	r21,r3
200846a4:	008c5e00 	call	2008c5e0 <__floatsidf>
200846a8:	a009883a 	mov	r4,r20
200846ac:	a80b883a 	mov	r5,r21
200846b0:	100d883a 	mov	r6,r2
200846b4:	180f883a 	mov	r7,r3
200846b8:	008b5640 	call	2008b564 <__muldf3>
200846bc:	1009883a 	mov	r4,r2
200846c0:	180b883a 	mov	r5,r3
200846c4:	000d883a 	mov	r6,zero
200846c8:	01d00734 	movhi	r7,16412
200846cc:	008a1b80 	call	2008a1b8 <__adddf3>
200846d0:	d9000517 	ldw	r4,20(sp)
200846d4:	1023883a 	mov	r17,r2
200846d8:	00bf3034 	movhi	r2,64704
200846dc:	213fffc4 	addi	r4,r4,-1
200846e0:	1885883a 	add	r2,r3,r2
200846e4:	d9001215 	stw	r4,72(sp)
200846e8:	d8800e15 	stw	r2,56(sp)
200846ec:	da800c17 	ldw	r10,48(sp)
200846f0:	003bc306 	br	20083600 <__flash_rwdata_start+0xffff1cd0>
200846f4:	b039883a 	mov	fp,r22
200846f8:	01000e44 	movi	r4,57
200846fc:	8825883a 	mov	r18,r17
20084700:	9dc00044 	addi	r23,r19,1
20084704:	99000005 	stb	r4,0(r19)
20084708:	a023883a 	mov	r17,r20
2008470c:	003dae06 	br	20083dc8 <__flash_rwdata_start+0xffff2498>
20084710:	d9800e17 	ldw	r6,56(sp)
20084714:	d9c01117 	ldw	r7,68(sp)
20084718:	0009883a 	mov	r4,zero
2008471c:	014ff834 	movhi	r5,16352
20084720:	da001715 	stw	r8,92(sp)
20084724:	da401515 	stw	r9,84(sp)
20084728:	008bc880 	call	2008bc88 <__subdf3>
2008472c:	da001717 	ldw	r8,92(sp)
20084730:	da401517 	ldw	r9,84(sp)
20084734:	1009883a 	mov	r4,r2
20084738:	180b883a 	mov	r5,r3
2008473c:	400d883a 	mov	r6,r8
20084740:	480f883a 	mov	r7,r9
20084744:	008b3a40 	call	2008b3a4 <__gedf2>
20084748:	00bc570e 	bge	zero,r2,200838a8 <__flash_rwdata_start+0xffff1f78>
2008474c:	01000c04 	movi	r4,48
20084750:	00000106 	br	20084758 <_dtoa_r+0x1624>
20084754:	102f883a 	mov	r23,r2
20084758:	b8bfffc4 	addi	r2,r23,-1
2008475c:	10c00007 	ldb	r3,0(r2)
20084760:	193ffc26 	beq	r3,r4,20084754 <__flash_rwdata_start+0xffff2e24>
20084764:	d9801217 	ldw	r6,72(sp)
20084768:	d9800515 	stw	r6,20(sp)
2008476c:	003c1f06 	br	200837ec <__flash_rwdata_start+0xffff1ebc>
20084770:	d8801217 	ldw	r2,72(sp)
20084774:	dc001117 	ldw	r16,68(sp)
20084778:	d8800515 	stw	r2,20(sp)
2008477c:	003cc906 	br	20083aa4 <__flash_rwdata_start+0xffff2174>
20084780:	dd801317 	ldw	r22,76(sp)
20084784:	dc001117 	ldw	r16,68(sp)
20084788:	dcc01417 	ldw	r19,80(sp)
2008478c:	dc801017 	ldw	r18,64(sp)
20084790:	003c4506 	br	200838a8 <__flash_rwdata_start+0xffff1f78>
20084794:	103e5d1e 	bne	r2,zero,2008410c <__flash_rwdata_start+0xffff27dc>
20084798:	4080004c 	andi	r2,r8,1
2008479c:	103e5b26 	beq	r2,zero,2008410c <__flash_rwdata_start+0xffff27dc>
200847a0:	003e5706 	br	20084100 <__flash_rwdata_start+0xffff27d0>
200847a4:	d8c00317 	ldw	r3,12(sp)
200847a8:	00800084 	movi	r2,2
200847ac:	10c00a16 	blt	r2,r3,200847d8 <_dtoa_r+0x16a4>
200847b0:	d9000c17 	ldw	r4,48(sp)
200847b4:	003e8306 	br	200841c4 <__flash_rwdata_start+0xffff2894>
200847b8:	04400084 	movi	r17,2
200847bc:	003b7306 	br	2008358c <__flash_rwdata_start+0xffff1c5c>
200847c0:	d9801217 	ldw	r6,72(sp)
200847c4:	d9800515 	stw	r6,20(sp)
200847c8:	003cb606 	br	20083aa4 <__flash_rwdata_start+0xffff2174>
200847cc:	d9001217 	ldw	r4,72(sp)
200847d0:	d9000515 	stw	r4,20(sp)
200847d4:	003c0506 	br	200837ec <__flash_rwdata_start+0xffff1ebc>
200847d8:	d9800c17 	ldw	r6,48(sp)
200847dc:	d9800615 	stw	r6,24(sp)
200847e0:	003e8306 	br	200841f0 <__flash_rwdata_start+0xffff28c0>
200847e4:	d9800317 	ldw	r6,12(sp)
200847e8:	00800084 	movi	r2,2
200847ec:	11800216 	blt	r2,r6,200847f8 <_dtoa_r+0x16c4>
200847f0:	d8800c17 	ldw	r2,48(sp)
200847f4:	003da606 	br	20083e90 <__flash_rwdata_start+0xffff2560>
200847f8:	d8800c17 	ldw	r2,48(sp)
200847fc:	d8800615 	stw	r2,24(sp)
20084800:	003e7b06 	br	200841f0 <__flash_rwdata_start+0xffff28c0>
20084804:	05000044 	movi	r20,1
20084808:	003b0506 	br	20083420 <__flash_rwdata_start+0xffff1af0>
2008480c:	8009883a 	mov	r4,r16
20084810:	80001115 	stw	zero,68(r16)
20084814:	000b883a 	mov	r5,zero
20084818:	00860240 	call	20086024 <_Balloc>
2008481c:	d8800715 	stw	r2,28(sp)
20084820:	d8c00717 	ldw	r3,28(sp)
20084824:	00bfffc4 	movi	r2,-1
20084828:	01000044 	movi	r4,1
2008482c:	d8800c15 	stw	r2,48(sp)
20084830:	80c01015 	stw	r3,64(r16)
20084834:	d9000b15 	stw	r4,44(sp)
20084838:	d8800615 	stw	r2,24(sp)
2008483c:	d8002215 	stw	zero,136(sp)
20084840:	003c1906 	br	200838a8 <__flash_rwdata_start+0xffff1f78>
20084844:	193d2926 	beq	r3,r4,20083cec <__flash_rwdata_start+0xffff23bc>
20084848:	00c00f04 	movi	r3,60
2008484c:	1885c83a 	sub	r2,r3,r2
20084850:	003d7b06 	br	20083e40 <__flash_rwdata_start+0xffff2510>
20084854:	000b883a 	mov	r5,zero
20084858:	003b1006 	br	2008349c <__flash_rwdata_start+0xffff1b6c>

2008485c <__sflush_r>:
2008485c:	2880030b 	ldhu	r2,12(r5)
20084860:	defffb04 	addi	sp,sp,-20
20084864:	dcc00315 	stw	r19,12(sp)
20084868:	dc400115 	stw	r17,4(sp)
2008486c:	dfc00415 	stw	ra,16(sp)
20084870:	dc800215 	stw	r18,8(sp)
20084874:	dc000015 	stw	r16,0(sp)
20084878:	10c0020c 	andi	r3,r2,8
2008487c:	2823883a 	mov	r17,r5
20084880:	2027883a 	mov	r19,r4
20084884:	1800311e 	bne	r3,zero,2008494c <__sflush_r+0xf0>
20084888:	28c00117 	ldw	r3,4(r5)
2008488c:	10820014 	ori	r2,r2,2048
20084890:	2880030d 	sth	r2,12(r5)
20084894:	00c04b0e 	bge	zero,r3,200849c4 <__sflush_r+0x168>
20084898:	8a000a17 	ldw	r8,40(r17)
2008489c:	40002326 	beq	r8,zero,2008492c <__sflush_r+0xd0>
200848a0:	9c000017 	ldw	r16,0(r19)
200848a4:	10c4000c 	andi	r3,r2,4096
200848a8:	98000015 	stw	zero,0(r19)
200848ac:	18004826 	beq	r3,zero,200849d0 <__sflush_r+0x174>
200848b0:	89801417 	ldw	r6,80(r17)
200848b4:	10c0010c 	andi	r3,r2,4
200848b8:	18000626 	beq	r3,zero,200848d4 <__sflush_r+0x78>
200848bc:	88c00117 	ldw	r3,4(r17)
200848c0:	88800c17 	ldw	r2,48(r17)
200848c4:	30cdc83a 	sub	r6,r6,r3
200848c8:	10000226 	beq	r2,zero,200848d4 <__sflush_r+0x78>
200848cc:	88800f17 	ldw	r2,60(r17)
200848d0:	308dc83a 	sub	r6,r6,r2
200848d4:	89400717 	ldw	r5,28(r17)
200848d8:	9809883a 	mov	r4,r19
200848dc:	000f883a 	mov	r7,zero
200848e0:	403ee83a 	callr	r8
200848e4:	00ffffc4 	movi	r3,-1
200848e8:	10c04426 	beq	r2,r3,200849fc <__sflush_r+0x1a0>
200848ec:	88c0030b 	ldhu	r3,12(r17)
200848f0:	89000417 	ldw	r4,16(r17)
200848f4:	88000115 	stw	zero,4(r17)
200848f8:	197dffcc 	andi	r5,r3,63487
200848fc:	8940030d 	sth	r5,12(r17)
20084900:	89000015 	stw	r4,0(r17)
20084904:	18c4000c 	andi	r3,r3,4096
20084908:	18002c1e 	bne	r3,zero,200849bc <__sflush_r+0x160>
2008490c:	89400c17 	ldw	r5,48(r17)
20084910:	9c000015 	stw	r16,0(r19)
20084914:	28000526 	beq	r5,zero,2008492c <__sflush_r+0xd0>
20084918:	88801004 	addi	r2,r17,64
2008491c:	28800226 	beq	r5,r2,20084928 <__sflush_r+0xcc>
20084920:	9809883a 	mov	r4,r19
20084924:	0084fb40 	call	20084fb4 <_free_r>
20084928:	88000c15 	stw	zero,48(r17)
2008492c:	0005883a 	mov	r2,zero
20084930:	dfc00417 	ldw	ra,16(sp)
20084934:	dcc00317 	ldw	r19,12(sp)
20084938:	dc800217 	ldw	r18,8(sp)
2008493c:	dc400117 	ldw	r17,4(sp)
20084940:	dc000017 	ldw	r16,0(sp)
20084944:	dec00504 	addi	sp,sp,20
20084948:	f800283a 	ret
2008494c:	2c800417 	ldw	r18,16(r5)
20084950:	903ff626 	beq	r18,zero,2008492c <__flash_rwdata_start+0xffff2ffc>
20084954:	2c000017 	ldw	r16,0(r5)
20084958:	108000cc 	andi	r2,r2,3
2008495c:	2c800015 	stw	r18,0(r5)
20084960:	84a1c83a 	sub	r16,r16,r18
20084964:	1000131e 	bne	r2,zero,200849b4 <__sflush_r+0x158>
20084968:	28800517 	ldw	r2,20(r5)
2008496c:	88800215 	stw	r2,8(r17)
20084970:	04000316 	blt	zero,r16,20084980 <__sflush_r+0x124>
20084974:	003fed06 	br	2008492c <__flash_rwdata_start+0xffff2ffc>
20084978:	90a5883a 	add	r18,r18,r2
2008497c:	043feb0e 	bge	zero,r16,2008492c <__flash_rwdata_start+0xffff2ffc>
20084980:	88800917 	ldw	r2,36(r17)
20084984:	89400717 	ldw	r5,28(r17)
20084988:	800f883a 	mov	r7,r16
2008498c:	900d883a 	mov	r6,r18
20084990:	9809883a 	mov	r4,r19
20084994:	103ee83a 	callr	r2
20084998:	80a1c83a 	sub	r16,r16,r2
2008499c:	00bff616 	blt	zero,r2,20084978 <__flash_rwdata_start+0xffff3048>
200849a0:	88c0030b 	ldhu	r3,12(r17)
200849a4:	00bfffc4 	movi	r2,-1
200849a8:	18c01014 	ori	r3,r3,64
200849ac:	88c0030d 	sth	r3,12(r17)
200849b0:	003fdf06 	br	20084930 <__flash_rwdata_start+0xffff3000>
200849b4:	0005883a 	mov	r2,zero
200849b8:	003fec06 	br	2008496c <__flash_rwdata_start+0xffff303c>
200849bc:	88801415 	stw	r2,80(r17)
200849c0:	003fd206 	br	2008490c <__flash_rwdata_start+0xffff2fdc>
200849c4:	28c00f17 	ldw	r3,60(r5)
200849c8:	00ffb316 	blt	zero,r3,20084898 <__flash_rwdata_start+0xffff2f68>
200849cc:	003fd706 	br	2008492c <__flash_rwdata_start+0xffff2ffc>
200849d0:	89400717 	ldw	r5,28(r17)
200849d4:	000d883a 	mov	r6,zero
200849d8:	9809883a 	mov	r4,r19
200849dc:	01c00044 	movi	r7,1
200849e0:	403ee83a 	callr	r8
200849e4:	100d883a 	mov	r6,r2
200849e8:	00bfffc4 	movi	r2,-1
200849ec:	30801426 	beq	r6,r2,20084a40 <__sflush_r+0x1e4>
200849f0:	8880030b 	ldhu	r2,12(r17)
200849f4:	8a000a17 	ldw	r8,40(r17)
200849f8:	003fae06 	br	200848b4 <__flash_rwdata_start+0xffff2f84>
200849fc:	98c00017 	ldw	r3,0(r19)
20084a00:	183fba26 	beq	r3,zero,200848ec <__flash_rwdata_start+0xffff2fbc>
20084a04:	01000744 	movi	r4,29
20084a08:	19000626 	beq	r3,r4,20084a24 <__sflush_r+0x1c8>
20084a0c:	01000584 	movi	r4,22
20084a10:	19000426 	beq	r3,r4,20084a24 <__sflush_r+0x1c8>
20084a14:	88c0030b 	ldhu	r3,12(r17)
20084a18:	18c01014 	ori	r3,r3,64
20084a1c:	88c0030d 	sth	r3,12(r17)
20084a20:	003fc306 	br	20084930 <__flash_rwdata_start+0xffff3000>
20084a24:	8880030b 	ldhu	r2,12(r17)
20084a28:	88c00417 	ldw	r3,16(r17)
20084a2c:	88000115 	stw	zero,4(r17)
20084a30:	10bdffcc 	andi	r2,r2,63487
20084a34:	8880030d 	sth	r2,12(r17)
20084a38:	88c00015 	stw	r3,0(r17)
20084a3c:	003fb306 	br	2008490c <__flash_rwdata_start+0xffff2fdc>
20084a40:	98800017 	ldw	r2,0(r19)
20084a44:	103fea26 	beq	r2,zero,200849f0 <__flash_rwdata_start+0xffff30c0>
20084a48:	00c00744 	movi	r3,29
20084a4c:	10c00226 	beq	r2,r3,20084a58 <__sflush_r+0x1fc>
20084a50:	00c00584 	movi	r3,22
20084a54:	10ffd21e 	bne	r2,r3,200849a0 <__flash_rwdata_start+0xffff3070>
20084a58:	9c000015 	stw	r16,0(r19)
20084a5c:	0005883a 	mov	r2,zero
20084a60:	003fb306 	br	20084930 <__flash_rwdata_start+0xffff3000>

20084a64 <_fflush_r>:
20084a64:	defffd04 	addi	sp,sp,-12
20084a68:	dc000115 	stw	r16,4(sp)
20084a6c:	dfc00215 	stw	ra,8(sp)
20084a70:	2021883a 	mov	r16,r4
20084a74:	20000226 	beq	r4,zero,20084a80 <_fflush_r+0x1c>
20084a78:	20800e17 	ldw	r2,56(r4)
20084a7c:	10000c26 	beq	r2,zero,20084ab0 <_fflush_r+0x4c>
20084a80:	2880030f 	ldh	r2,12(r5)
20084a84:	1000051e 	bne	r2,zero,20084a9c <_fflush_r+0x38>
20084a88:	0005883a 	mov	r2,zero
20084a8c:	dfc00217 	ldw	ra,8(sp)
20084a90:	dc000117 	ldw	r16,4(sp)
20084a94:	dec00304 	addi	sp,sp,12
20084a98:	f800283a 	ret
20084a9c:	8009883a 	mov	r4,r16
20084aa0:	dfc00217 	ldw	ra,8(sp)
20084aa4:	dc000117 	ldw	r16,4(sp)
20084aa8:	dec00304 	addi	sp,sp,12
20084aac:	008485c1 	jmpi	2008485c <__sflush_r>
20084ab0:	d9400015 	stw	r5,0(sp)
20084ab4:	0084e400 	call	20084e40 <__sinit>
20084ab8:	d9400017 	ldw	r5,0(sp)
20084abc:	003ff006 	br	20084a80 <__flash_rwdata_start+0xffff3150>

20084ac0 <fflush>:
20084ac0:	20000526 	beq	r4,zero,20084ad8 <fflush+0x18>
20084ac4:	00800034 	movhi	r2,0
20084ac8:	10886104 	addi	r2,r2,8580
20084acc:	200b883a 	mov	r5,r4
20084ad0:	11000017 	ldw	r4,0(r2)
20084ad4:	0084a641 	jmpi	20084a64 <_fflush_r>
20084ad8:	00800034 	movhi	r2,0
20084adc:	10886004 	addi	r2,r2,8576
20084ae0:	11000017 	ldw	r4,0(r2)
20084ae4:	01480234 	movhi	r5,8200
20084ae8:	29529904 	addi	r5,r5,19044
20084aec:	00858281 	jmpi	20085828 <_fwalk_reent>

20084af0 <__fp_lock>:
20084af0:	0005883a 	mov	r2,zero
20084af4:	f800283a 	ret

20084af8 <__fp_unlock>:
20084af8:	0005883a 	mov	r2,zero
20084afc:	f800283a 	ret

20084b00 <_cleanup_r>:
20084b00:	01480274 	movhi	r5,8201
20084b04:	29636e04 	addi	r5,r5,-29256
20084b08:	00858281 	jmpi	20085828 <_fwalk_reent>

20084b0c <__sinit.part.1>:
20084b0c:	defff704 	addi	sp,sp,-36
20084b10:	00c80234 	movhi	r3,8200
20084b14:	dfc00815 	stw	ra,32(sp)
20084b18:	ddc00715 	stw	r23,28(sp)
20084b1c:	dd800615 	stw	r22,24(sp)
20084b20:	dd400515 	stw	r21,20(sp)
20084b24:	dd000415 	stw	r20,16(sp)
20084b28:	dcc00315 	stw	r19,12(sp)
20084b2c:	dc800215 	stw	r18,8(sp)
20084b30:	dc400115 	stw	r17,4(sp)
20084b34:	dc000015 	stw	r16,0(sp)
20084b38:	18d2c004 	addi	r3,r3,19200
20084b3c:	24000117 	ldw	r16,4(r4)
20084b40:	20c00f15 	stw	r3,60(r4)
20084b44:	2080bb04 	addi	r2,r4,748
20084b48:	00c000c4 	movi	r3,3
20084b4c:	20c0b915 	stw	r3,740(r4)
20084b50:	2080ba15 	stw	r2,744(r4)
20084b54:	2000b815 	stw	zero,736(r4)
20084b58:	05c00204 	movi	r23,8
20084b5c:	00800104 	movi	r2,4
20084b60:	2025883a 	mov	r18,r4
20084b64:	b80d883a 	mov	r6,r23
20084b68:	81001704 	addi	r4,r16,92
20084b6c:	000b883a 	mov	r5,zero
20084b70:	80000015 	stw	zero,0(r16)
20084b74:	80000115 	stw	zero,4(r16)
20084b78:	80000215 	stw	zero,8(r16)
20084b7c:	8080030d 	sth	r2,12(r16)
20084b80:	80001915 	stw	zero,100(r16)
20084b84:	8000038d 	sth	zero,14(r16)
20084b88:	80000415 	stw	zero,16(r16)
20084b8c:	80000515 	stw	zero,20(r16)
20084b90:	80000615 	stw	zero,24(r16)
20084b94:	0085f000 	call	20085f00 <memset>
20084b98:	05880234 	movhi	r22,8200
20084b9c:	94400217 	ldw	r17,8(r18)
20084ba0:	05480234 	movhi	r21,8200
20084ba4:	05080234 	movhi	r20,8200
20084ba8:	04c80234 	movhi	r19,8200
20084bac:	b59d6804 	addi	r22,r22,30112
20084bb0:	ad5d7f04 	addi	r21,r21,30204
20084bb4:	a51d9e04 	addi	r20,r20,30328
20084bb8:	9cddb504 	addi	r19,r19,30420
20084bbc:	85800815 	stw	r22,32(r16)
20084bc0:	85400915 	stw	r21,36(r16)
20084bc4:	85000a15 	stw	r20,40(r16)
20084bc8:	84c00b15 	stw	r19,44(r16)
20084bcc:	84000715 	stw	r16,28(r16)
20084bd0:	00800284 	movi	r2,10
20084bd4:	8880030d 	sth	r2,12(r17)
20084bd8:	00800044 	movi	r2,1
20084bdc:	89001704 	addi	r4,r17,92
20084be0:	b80d883a 	mov	r6,r23
20084be4:	000b883a 	mov	r5,zero
20084be8:	88000015 	stw	zero,0(r17)
20084bec:	88000115 	stw	zero,4(r17)
20084bf0:	88000215 	stw	zero,8(r17)
20084bf4:	88001915 	stw	zero,100(r17)
20084bf8:	8880038d 	sth	r2,14(r17)
20084bfc:	88000415 	stw	zero,16(r17)
20084c00:	88000515 	stw	zero,20(r17)
20084c04:	88000615 	stw	zero,24(r17)
20084c08:	0085f000 	call	20085f00 <memset>
20084c0c:	94000317 	ldw	r16,12(r18)
20084c10:	00800484 	movi	r2,18
20084c14:	8c400715 	stw	r17,28(r17)
20084c18:	8d800815 	stw	r22,32(r17)
20084c1c:	8d400915 	stw	r21,36(r17)
20084c20:	8d000a15 	stw	r20,40(r17)
20084c24:	8cc00b15 	stw	r19,44(r17)
20084c28:	8080030d 	sth	r2,12(r16)
20084c2c:	00800084 	movi	r2,2
20084c30:	80000015 	stw	zero,0(r16)
20084c34:	80000115 	stw	zero,4(r16)
20084c38:	80000215 	stw	zero,8(r16)
20084c3c:	80001915 	stw	zero,100(r16)
20084c40:	8080038d 	sth	r2,14(r16)
20084c44:	80000415 	stw	zero,16(r16)
20084c48:	80000515 	stw	zero,20(r16)
20084c4c:	80000615 	stw	zero,24(r16)
20084c50:	81001704 	addi	r4,r16,92
20084c54:	000b883a 	mov	r5,zero
20084c58:	b80d883a 	mov	r6,r23
20084c5c:	0085f000 	call	20085f00 <memset>
20084c60:	00800044 	movi	r2,1
20084c64:	84000715 	stw	r16,28(r16)
20084c68:	85800815 	stw	r22,32(r16)
20084c6c:	85400915 	stw	r21,36(r16)
20084c70:	85000a15 	stw	r20,40(r16)
20084c74:	84c00b15 	stw	r19,44(r16)
20084c78:	90800e15 	stw	r2,56(r18)
20084c7c:	dfc00817 	ldw	ra,32(sp)
20084c80:	ddc00717 	ldw	r23,28(sp)
20084c84:	dd800617 	ldw	r22,24(sp)
20084c88:	dd400517 	ldw	r21,20(sp)
20084c8c:	dd000417 	ldw	r20,16(sp)
20084c90:	dcc00317 	ldw	r19,12(sp)
20084c94:	dc800217 	ldw	r18,8(sp)
20084c98:	dc400117 	ldw	r17,4(sp)
20084c9c:	dc000017 	ldw	r16,0(sp)
20084ca0:	dec00904 	addi	sp,sp,36
20084ca4:	f800283a 	ret

20084ca8 <__sfmoreglue>:
20084ca8:	defffc04 	addi	sp,sp,-16
20084cac:	dc400115 	stw	r17,4(sp)
20084cb0:	2c7fffc4 	addi	r17,r5,-1
20084cb4:	8c401a24 	muli	r17,r17,104
20084cb8:	dc800215 	stw	r18,8(sp)
20084cbc:	2825883a 	mov	r18,r5
20084cc0:	89401d04 	addi	r5,r17,116
20084cc4:	dc000015 	stw	r16,0(sp)
20084cc8:	dfc00315 	stw	ra,12(sp)
20084ccc:	00803f80 	call	200803f8 <_malloc_r>
20084cd0:	1021883a 	mov	r16,r2
20084cd4:	10000726 	beq	r2,zero,20084cf4 <__sfmoreglue+0x4c>
20084cd8:	11000304 	addi	r4,r2,12
20084cdc:	10000015 	stw	zero,0(r2)
20084ce0:	14800115 	stw	r18,4(r2)
20084ce4:	11000215 	stw	r4,8(r2)
20084ce8:	000b883a 	mov	r5,zero
20084cec:	89801a04 	addi	r6,r17,104
20084cf0:	0085f000 	call	20085f00 <memset>
20084cf4:	8005883a 	mov	r2,r16
20084cf8:	dfc00317 	ldw	ra,12(sp)
20084cfc:	dc800217 	ldw	r18,8(sp)
20084d00:	dc400117 	ldw	r17,4(sp)
20084d04:	dc000017 	ldw	r16,0(sp)
20084d08:	dec00404 	addi	sp,sp,16
20084d0c:	f800283a 	ret

20084d10 <__sfp>:
20084d10:	00800034 	movhi	r2,0
20084d14:	defffb04 	addi	sp,sp,-20
20084d18:	10886004 	addi	r2,r2,8576
20084d1c:	dc800215 	stw	r18,8(sp)
20084d20:	14800017 	ldw	r18,0(r2)
20084d24:	dcc00315 	stw	r19,12(sp)
20084d28:	dfc00415 	stw	ra,16(sp)
20084d2c:	90800e17 	ldw	r2,56(r18)
20084d30:	dc400115 	stw	r17,4(sp)
20084d34:	dc000015 	stw	r16,0(sp)
20084d38:	2027883a 	mov	r19,r4
20084d3c:	1000021e 	bne	r2,zero,20084d48 <__sfp+0x38>
20084d40:	9009883a 	mov	r4,r18
20084d44:	0084b0c0 	call	20084b0c <__sinit.part.1>
20084d48:	9480b804 	addi	r18,r18,736
20084d4c:	047fffc4 	movi	r17,-1
20084d50:	91400117 	ldw	r5,4(r18)
20084d54:	94000217 	ldw	r16,8(r18)
20084d58:	297fffc4 	addi	r5,r5,-1
20084d5c:	28000a16 	blt	r5,zero,20084d88 <__sfp+0x78>
20084d60:	8080030f 	ldh	r2,12(r16)
20084d64:	10000c26 	beq	r2,zero,20084d98 <__sfp+0x88>
20084d68:	80c01d04 	addi	r3,r16,116
20084d6c:	00000206 	br	20084d78 <__sfp+0x68>
20084d70:	18bfe60f 	ldh	r2,-104(r3)
20084d74:	10000826 	beq	r2,zero,20084d98 <__sfp+0x88>
20084d78:	297fffc4 	addi	r5,r5,-1
20084d7c:	1c3ffd04 	addi	r16,r3,-12
20084d80:	18c01a04 	addi	r3,r3,104
20084d84:	2c7ffa1e 	bne	r5,r17,20084d70 <__flash_rwdata_start+0xffff3440>
20084d88:	90800017 	ldw	r2,0(r18)
20084d8c:	10001d26 	beq	r2,zero,20084e04 <__sfp+0xf4>
20084d90:	1025883a 	mov	r18,r2
20084d94:	003fee06 	br	20084d50 <__flash_rwdata_start+0xffff3420>
20084d98:	00bfffc4 	movi	r2,-1
20084d9c:	8080038d 	sth	r2,14(r16)
20084da0:	00800044 	movi	r2,1
20084da4:	8080030d 	sth	r2,12(r16)
20084da8:	80001915 	stw	zero,100(r16)
20084dac:	80000015 	stw	zero,0(r16)
20084db0:	80000215 	stw	zero,8(r16)
20084db4:	80000115 	stw	zero,4(r16)
20084db8:	80000415 	stw	zero,16(r16)
20084dbc:	80000515 	stw	zero,20(r16)
20084dc0:	80000615 	stw	zero,24(r16)
20084dc4:	81001704 	addi	r4,r16,92
20084dc8:	000b883a 	mov	r5,zero
20084dcc:	01800204 	movi	r6,8
20084dd0:	0085f000 	call	20085f00 <memset>
20084dd4:	8005883a 	mov	r2,r16
20084dd8:	80000c15 	stw	zero,48(r16)
20084ddc:	80000d15 	stw	zero,52(r16)
20084de0:	80001115 	stw	zero,68(r16)
20084de4:	80001215 	stw	zero,72(r16)
20084de8:	dfc00417 	ldw	ra,16(sp)
20084dec:	dcc00317 	ldw	r19,12(sp)
20084df0:	dc800217 	ldw	r18,8(sp)
20084df4:	dc400117 	ldw	r17,4(sp)
20084df8:	dc000017 	ldw	r16,0(sp)
20084dfc:	dec00504 	addi	sp,sp,20
20084e00:	f800283a 	ret
20084e04:	9809883a 	mov	r4,r19
20084e08:	01400104 	movi	r5,4
20084e0c:	0084ca80 	call	20084ca8 <__sfmoreglue>
20084e10:	90800015 	stw	r2,0(r18)
20084e14:	103fde1e 	bne	r2,zero,20084d90 <__flash_rwdata_start+0xffff3460>
20084e18:	00800304 	movi	r2,12
20084e1c:	98800015 	stw	r2,0(r19)
20084e20:	0005883a 	mov	r2,zero
20084e24:	003ff006 	br	20084de8 <__flash_rwdata_start+0xffff34b8>

20084e28 <_cleanup>:
20084e28:	00800034 	movhi	r2,0
20084e2c:	10886004 	addi	r2,r2,8576
20084e30:	11000017 	ldw	r4,0(r2)
20084e34:	01480274 	movhi	r5,8201
20084e38:	29636e04 	addi	r5,r5,-29256
20084e3c:	00858281 	jmpi	20085828 <_fwalk_reent>

20084e40 <__sinit>:
20084e40:	20800e17 	ldw	r2,56(r4)
20084e44:	10000126 	beq	r2,zero,20084e4c <__sinit+0xc>
20084e48:	f800283a 	ret
20084e4c:	0084b0c1 	jmpi	20084b0c <__sinit.part.1>

20084e50 <__sfp_lock_acquire>:
20084e50:	f800283a 	ret

20084e54 <__sfp_lock_release>:
20084e54:	f800283a 	ret

20084e58 <__sinit_lock_acquire>:
20084e58:	f800283a 	ret

20084e5c <__sinit_lock_release>:
20084e5c:	f800283a 	ret

20084e60 <__fp_lock_all>:
20084e60:	00800034 	movhi	r2,0
20084e64:	10886104 	addi	r2,r2,8580
20084e68:	11000017 	ldw	r4,0(r2)
20084e6c:	01480234 	movhi	r5,8200
20084e70:	2952bc04 	addi	r5,r5,19184
20084e74:	00857641 	jmpi	20085764 <_fwalk>

20084e78 <__fp_unlock_all>:
20084e78:	00800034 	movhi	r2,0
20084e7c:	10886104 	addi	r2,r2,8580
20084e80:	11000017 	ldw	r4,0(r2)
20084e84:	01480234 	movhi	r5,8200
20084e88:	2952be04 	addi	r5,r5,19192
20084e8c:	00857641 	jmpi	20085764 <_fwalk>

20084e90 <_malloc_trim_r>:
20084e90:	defffb04 	addi	sp,sp,-20
20084e94:	dcc00315 	stw	r19,12(sp)
20084e98:	04c00034 	movhi	r19,0
20084e9c:	dc800215 	stw	r18,8(sp)
20084ea0:	dc400115 	stw	r17,4(sp)
20084ea4:	dc000015 	stw	r16,0(sp)
20084ea8:	dfc00415 	stw	ra,16(sp)
20084eac:	2821883a 	mov	r16,r5
20084eb0:	9cc16b04 	addi	r19,r19,1452
20084eb4:	2025883a 	mov	r18,r4
20084eb8:	008cd780 	call	2008cd78 <__malloc_lock>
20084ebc:	98800217 	ldw	r2,8(r19)
20084ec0:	14400117 	ldw	r17,4(r2)
20084ec4:	00bfff04 	movi	r2,-4
20084ec8:	88a2703a 	and	r17,r17,r2
20084ecc:	8c21c83a 	sub	r16,r17,r16
20084ed0:	8403fbc4 	addi	r16,r16,4079
20084ed4:	8020d33a 	srli	r16,r16,12
20084ed8:	0083ffc4 	movi	r2,4095
20084edc:	843fffc4 	addi	r16,r16,-1
20084ee0:	8020933a 	slli	r16,r16,12
20084ee4:	1400060e 	bge	r2,r16,20084f00 <_malloc_trim_r+0x70>
20084ee8:	9009883a 	mov	r4,r18
20084eec:	000b883a 	mov	r5,zero
20084ef0:	0080cc40 	call	20080cc4 <_sbrk_r>
20084ef4:	98c00217 	ldw	r3,8(r19)
20084ef8:	1c47883a 	add	r3,r3,r17
20084efc:	10c00a26 	beq	r2,r3,20084f28 <_malloc_trim_r+0x98>
20084f00:	9009883a 	mov	r4,r18
20084f04:	008cd980 	call	2008cd98 <__malloc_unlock>
20084f08:	0005883a 	mov	r2,zero
20084f0c:	dfc00417 	ldw	ra,16(sp)
20084f10:	dcc00317 	ldw	r19,12(sp)
20084f14:	dc800217 	ldw	r18,8(sp)
20084f18:	dc400117 	ldw	r17,4(sp)
20084f1c:	dc000017 	ldw	r16,0(sp)
20084f20:	dec00504 	addi	sp,sp,20
20084f24:	f800283a 	ret
20084f28:	9009883a 	mov	r4,r18
20084f2c:	040bc83a 	sub	r5,zero,r16
20084f30:	0080cc40 	call	20080cc4 <_sbrk_r>
20084f34:	00ffffc4 	movi	r3,-1
20084f38:	10c00d26 	beq	r2,r3,20084f70 <_malloc_trim_r+0xe0>
20084f3c:	00c00034 	movhi	r3,0
20084f40:	18c88104 	addi	r3,r3,8708
20084f44:	18800017 	ldw	r2,0(r3)
20084f48:	99000217 	ldw	r4,8(r19)
20084f4c:	8c23c83a 	sub	r17,r17,r16
20084f50:	8c400054 	ori	r17,r17,1
20084f54:	1421c83a 	sub	r16,r2,r16
20084f58:	24400115 	stw	r17,4(r4)
20084f5c:	9009883a 	mov	r4,r18
20084f60:	1c000015 	stw	r16,0(r3)
20084f64:	008cd980 	call	2008cd98 <__malloc_unlock>
20084f68:	00800044 	movi	r2,1
20084f6c:	003fe706 	br	20084f0c <__flash_rwdata_start+0xffff35dc>
20084f70:	9009883a 	mov	r4,r18
20084f74:	000b883a 	mov	r5,zero
20084f78:	0080cc40 	call	20080cc4 <_sbrk_r>
20084f7c:	99000217 	ldw	r4,8(r19)
20084f80:	014003c4 	movi	r5,15
20084f84:	1107c83a 	sub	r3,r2,r4
20084f88:	28ffdd0e 	bge	r5,r3,20084f00 <__flash_rwdata_start+0xffff35d0>
20084f8c:	01400034 	movhi	r5,0
20084f90:	29485e04 	addi	r5,r5,8568
20084f94:	29400017 	ldw	r5,0(r5)
20084f98:	18c00054 	ori	r3,r3,1
20084f9c:	20c00115 	stw	r3,4(r4)
20084fa0:	00c00034 	movhi	r3,0
20084fa4:	1145c83a 	sub	r2,r2,r5
20084fa8:	18c88104 	addi	r3,r3,8708
20084fac:	18800015 	stw	r2,0(r3)
20084fb0:	003fd306 	br	20084f00 <__flash_rwdata_start+0xffff35d0>

20084fb4 <_free_r>:
20084fb4:	28004c26 	beq	r5,zero,200850e8 <_free_r+0x134>
20084fb8:	defffd04 	addi	sp,sp,-12
20084fbc:	dc400115 	stw	r17,4(sp)
20084fc0:	dc000015 	stw	r16,0(sp)
20084fc4:	2023883a 	mov	r17,r4
20084fc8:	2821883a 	mov	r16,r5
20084fcc:	dfc00215 	stw	ra,8(sp)
20084fd0:	008cd780 	call	2008cd78 <__malloc_lock>
20084fd4:	813fff17 	ldw	r4,-4(r16)
20084fd8:	00bfff84 	movi	r2,-2
20084fdc:	02400034 	movhi	r9,0
20084fe0:	81bffe04 	addi	r6,r16,-8
20084fe4:	2084703a 	and	r2,r4,r2
20084fe8:	4a416b04 	addi	r9,r9,1452
20084fec:	308b883a 	add	r5,r6,r2
20084ff0:	2a000117 	ldw	r8,4(r5)
20084ff4:	49c00217 	ldw	r7,8(r9)
20084ff8:	00ffff04 	movi	r3,-4
20084ffc:	40c6703a 	and	r3,r8,r3
20085000:	39405326 	beq	r7,r5,20085150 <_free_r+0x19c>
20085004:	28c00115 	stw	r3,4(r5)
20085008:	2100004c 	andi	r4,r4,1
2008500c:	2000091e 	bne	r4,zero,20085034 <_free_r+0x80>
20085010:	81fffe17 	ldw	r7,-8(r16)
20085014:	4a000204 	addi	r8,r9,8
20085018:	31cdc83a 	sub	r6,r6,r7
2008501c:	31000217 	ldw	r4,8(r6)
20085020:	11c5883a 	add	r2,r2,r7
20085024:	22006126 	beq	r4,r8,200851ac <_free_r+0x1f8>
20085028:	31c00317 	ldw	r7,12(r6)
2008502c:	21c00315 	stw	r7,12(r4)
20085030:	39000215 	stw	r4,8(r7)
20085034:	28c9883a 	add	r4,r5,r3
20085038:	21c00117 	ldw	r7,4(r4)
2008503c:	39c0004c 	andi	r7,r7,1
20085040:	38000d1e 	bne	r7,zero,20085078 <_free_r+0xc4>
20085044:	29000217 	ldw	r4,8(r5)
20085048:	10c5883a 	add	r2,r2,r3
2008504c:	00c00034 	movhi	r3,0
20085050:	18c16d04 	addi	r3,r3,1460
20085054:	20c07526 	beq	r4,r3,2008522c <_free_r+0x278>
20085058:	29c00317 	ldw	r7,12(r5)
2008505c:	11400054 	ori	r5,r2,1
20085060:	3087883a 	add	r3,r6,r2
20085064:	21c00315 	stw	r7,12(r4)
20085068:	39000215 	stw	r4,8(r7)
2008506c:	31400115 	stw	r5,4(r6)
20085070:	18800015 	stw	r2,0(r3)
20085074:	00000406 	br	20085088 <_free_r+0xd4>
20085078:	10c00054 	ori	r3,r2,1
2008507c:	30c00115 	stw	r3,4(r6)
20085080:	3087883a 	add	r3,r6,r2
20085084:	18800015 	stw	r2,0(r3)
20085088:	00c07fc4 	movi	r3,511
2008508c:	18801736 	bltu	r3,r2,200850ec <_free_r+0x138>
20085090:	1004d0fa 	srli	r2,r2,3
20085094:	01400044 	movi	r5,1
20085098:	49000117 	ldw	r4,4(r9)
2008509c:	1087883a 	add	r3,r2,r2
200850a0:	18c7883a 	add	r3,r3,r3
200850a4:	1005d0ba 	srai	r2,r2,2
200850a8:	18c7883a 	add	r3,r3,r3
200850ac:	1a47883a 	add	r3,r3,r9
200850b0:	19c00217 	ldw	r7,8(r3)
200850b4:	2884983a 	sll	r2,r5,r2
200850b8:	30c00315 	stw	r3,12(r6)
200850bc:	31c00215 	stw	r7,8(r6)
200850c0:	1104b03a 	or	r2,r2,r4
200850c4:	19800215 	stw	r6,8(r3)
200850c8:	48800115 	stw	r2,4(r9)
200850cc:	39800315 	stw	r6,12(r7)
200850d0:	8809883a 	mov	r4,r17
200850d4:	dfc00217 	ldw	ra,8(sp)
200850d8:	dc400117 	ldw	r17,4(sp)
200850dc:	dc000017 	ldw	r16,0(sp)
200850e0:	dec00304 	addi	sp,sp,12
200850e4:	008cd981 	jmpi	2008cd98 <__malloc_unlock>
200850e8:	f800283a 	ret
200850ec:	1006d27a 	srli	r3,r2,9
200850f0:	01000104 	movi	r4,4
200850f4:	20c04036 	bltu	r4,r3,200851f8 <_free_r+0x244>
200850f8:	1006d1ba 	srli	r3,r2,6
200850fc:	19400e04 	addi	r5,r3,56
20085100:	2947883a 	add	r3,r5,r5
20085104:	18c7883a 	add	r3,r3,r3
20085108:	18c7883a 	add	r3,r3,r3
2008510c:	1a49883a 	add	r4,r3,r9
20085110:	20c00217 	ldw	r3,8(r4)
20085114:	01c00034 	movhi	r7,0
20085118:	39c16b04 	addi	r7,r7,1452
2008511c:	19003b26 	beq	r3,r4,2008520c <_free_r+0x258>
20085120:	01ffff04 	movi	r7,-4
20085124:	19400117 	ldw	r5,4(r3)
20085128:	29ca703a 	and	r5,r5,r7
2008512c:	1140022e 	bgeu	r2,r5,20085138 <_free_r+0x184>
20085130:	18c00217 	ldw	r3,8(r3)
20085134:	20fffb1e 	bne	r4,r3,20085124 <__flash_rwdata_start+0xffff37f4>
20085138:	18800317 	ldw	r2,12(r3)
2008513c:	30800315 	stw	r2,12(r6)
20085140:	30c00215 	stw	r3,8(r6)
20085144:	11800215 	stw	r6,8(r2)
20085148:	19800315 	stw	r6,12(r3)
2008514c:	003fe006 	br	200850d0 <__flash_rwdata_start+0xffff37a0>
20085150:	2100004c 	andi	r4,r4,1
20085154:	1885883a 	add	r2,r3,r2
20085158:	2000071e 	bne	r4,zero,20085178 <_free_r+0x1c4>
2008515c:	817ffe17 	ldw	r5,-8(r16)
20085160:	314dc83a 	sub	r6,r6,r5
20085164:	30c00317 	ldw	r3,12(r6)
20085168:	31000217 	ldw	r4,8(r6)
2008516c:	1145883a 	add	r2,r2,r5
20085170:	20c00315 	stw	r3,12(r4)
20085174:	19000215 	stw	r4,8(r3)
20085178:	10c00054 	ori	r3,r2,1
2008517c:	30c00115 	stw	r3,4(r6)
20085180:	00c00034 	movhi	r3,0
20085184:	18c85f04 	addi	r3,r3,8572
20085188:	18c00017 	ldw	r3,0(r3)
2008518c:	49800215 	stw	r6,8(r9)
20085190:	10ffcf36 	bltu	r2,r3,200850d0 <__flash_rwdata_start+0xffff37a0>
20085194:	00800034 	movhi	r2,0
20085198:	10887304 	addi	r2,r2,8652
2008519c:	11400017 	ldw	r5,0(r2)
200851a0:	8809883a 	mov	r4,r17
200851a4:	0084e900 	call	20084e90 <_malloc_trim_r>
200851a8:	003fc906 	br	200850d0 <__flash_rwdata_start+0xffff37a0>
200851ac:	28c9883a 	add	r4,r5,r3
200851b0:	21000117 	ldw	r4,4(r4)
200851b4:	2100004c 	andi	r4,r4,1
200851b8:	20000a1e 	bne	r4,zero,200851e4 <_free_r+0x230>
200851bc:	29000317 	ldw	r4,12(r5)
200851c0:	29400217 	ldw	r5,8(r5)
200851c4:	10c5883a 	add	r2,r2,r3
200851c8:	10c00054 	ori	r3,r2,1
200851cc:	29000315 	stw	r4,12(r5)
200851d0:	21400215 	stw	r5,8(r4)
200851d4:	30c00115 	stw	r3,4(r6)
200851d8:	308d883a 	add	r6,r6,r2
200851dc:	30800015 	stw	r2,0(r6)
200851e0:	003fbb06 	br	200850d0 <__flash_rwdata_start+0xffff37a0>
200851e4:	10c00054 	ori	r3,r2,1
200851e8:	30c00115 	stw	r3,4(r6)
200851ec:	308d883a 	add	r6,r6,r2
200851f0:	30800015 	stw	r2,0(r6)
200851f4:	003fb606 	br	200850d0 <__flash_rwdata_start+0xffff37a0>
200851f8:	01000504 	movi	r4,20
200851fc:	20c01436 	bltu	r4,r3,20085250 <_free_r+0x29c>
20085200:	194016c4 	addi	r5,r3,91
20085204:	2947883a 	add	r3,r5,r5
20085208:	003fbe06 	br	20085104 <__flash_rwdata_start+0xffff37d4>
2008520c:	280bd0ba 	srai	r5,r5,2
20085210:	00800044 	movi	r2,1
20085214:	39000117 	ldw	r4,4(r7)
20085218:	114a983a 	sll	r5,r2,r5
2008521c:	1805883a 	mov	r2,r3
20085220:	2908b03a 	or	r4,r5,r4
20085224:	39000115 	stw	r4,4(r7)
20085228:	003fc406 	br	2008513c <__flash_rwdata_start+0xffff380c>
2008522c:	49800515 	stw	r6,20(r9)
20085230:	49800415 	stw	r6,16(r9)
20085234:	10c00054 	ori	r3,r2,1
20085238:	31000315 	stw	r4,12(r6)
2008523c:	31000215 	stw	r4,8(r6)
20085240:	30c00115 	stw	r3,4(r6)
20085244:	308d883a 	add	r6,r6,r2
20085248:	30800015 	stw	r2,0(r6)
2008524c:	003fa006 	br	200850d0 <__flash_rwdata_start+0xffff37a0>
20085250:	01001504 	movi	r4,84
20085254:	20c00436 	bltu	r4,r3,20085268 <_free_r+0x2b4>
20085258:	1006d33a 	srli	r3,r2,12
2008525c:	19401b84 	addi	r5,r3,110
20085260:	2947883a 	add	r3,r5,r5
20085264:	003fa706 	br	20085104 <__flash_rwdata_start+0xffff37d4>
20085268:	01005504 	movi	r4,340
2008526c:	20c00436 	bltu	r4,r3,20085280 <_free_r+0x2cc>
20085270:	1006d3fa 	srli	r3,r2,15
20085274:	19401dc4 	addi	r5,r3,119
20085278:	2947883a 	add	r3,r5,r5
2008527c:	003fa106 	br	20085104 <__flash_rwdata_start+0xffff37d4>
20085280:	01015504 	movi	r4,1364
20085284:	20c00436 	bltu	r4,r3,20085298 <_free_r+0x2e4>
20085288:	1006d4ba 	srli	r3,r2,18
2008528c:	19401f04 	addi	r5,r3,124
20085290:	2947883a 	add	r3,r5,r5
20085294:	003f9b06 	br	20085104 <__flash_rwdata_start+0xffff37d4>
20085298:	00c03f04 	movi	r3,252
2008529c:	01401f84 	movi	r5,126
200852a0:	003f9806 	br	20085104 <__flash_rwdata_start+0xffff37d4>

200852a4 <__sfvwrite_r>:
200852a4:	30800217 	ldw	r2,8(r6)
200852a8:	10006726 	beq	r2,zero,20085448 <__sfvwrite_r+0x1a4>
200852ac:	defff404 	addi	sp,sp,-48
200852b0:	dd000615 	stw	r20,24(sp)
200852b4:	2029883a 	mov	r20,r4
200852b8:	2900030b 	ldhu	r4,12(r5)
200852bc:	ddc00915 	stw	r23,36(sp)
200852c0:	dc000215 	stw	r16,8(sp)
200852c4:	dfc00b15 	stw	ra,44(sp)
200852c8:	df000a15 	stw	fp,40(sp)
200852cc:	dd800815 	stw	r22,32(sp)
200852d0:	dd400715 	stw	r21,28(sp)
200852d4:	dcc00515 	stw	r19,20(sp)
200852d8:	dc800415 	stw	r18,16(sp)
200852dc:	dc400315 	stw	r17,12(sp)
200852e0:	2080020c 	andi	r2,r4,8
200852e4:	2821883a 	mov	r16,r5
200852e8:	302f883a 	mov	r23,r6
200852ec:	10002726 	beq	r2,zero,2008538c <__sfvwrite_r+0xe8>
200852f0:	28800417 	ldw	r2,16(r5)
200852f4:	10002526 	beq	r2,zero,2008538c <__sfvwrite_r+0xe8>
200852f8:	2080008c 	andi	r2,r4,2
200852fc:	bc400017 	ldw	r17,0(r23)
20085300:	10002a26 	beq	r2,zero,200853ac <__sfvwrite_r+0x108>
20085304:	05600034 	movhi	r21,32768
20085308:	0027883a 	mov	r19,zero
2008530c:	0025883a 	mov	r18,zero
20085310:	ad7f0004 	addi	r21,r21,-1024
20085314:	980d883a 	mov	r6,r19
20085318:	a009883a 	mov	r4,r20
2008531c:	90004626 	beq	r18,zero,20085438 <__sfvwrite_r+0x194>
20085320:	900f883a 	mov	r7,r18
20085324:	81400717 	ldw	r5,28(r16)
20085328:	ac80022e 	bgeu	r21,r18,20085334 <__sfvwrite_r+0x90>
2008532c:	01e00034 	movhi	r7,32768
20085330:	39ff0004 	addi	r7,r7,-1024
20085334:	80800917 	ldw	r2,36(r16)
20085338:	103ee83a 	callr	r2
2008533c:	0080520e 	bge	zero,r2,20085488 <__sfvwrite_r+0x1e4>
20085340:	b8c00217 	ldw	r3,8(r23)
20085344:	98a7883a 	add	r19,r19,r2
20085348:	90a5c83a 	sub	r18,r18,r2
2008534c:	1885c83a 	sub	r2,r3,r2
20085350:	b8800215 	stw	r2,8(r23)
20085354:	103fef1e 	bne	r2,zero,20085314 <__flash_rwdata_start+0xffff39e4>
20085358:	0005883a 	mov	r2,zero
2008535c:	dfc00b17 	ldw	ra,44(sp)
20085360:	df000a17 	ldw	fp,40(sp)
20085364:	ddc00917 	ldw	r23,36(sp)
20085368:	dd800817 	ldw	r22,32(sp)
2008536c:	dd400717 	ldw	r21,28(sp)
20085370:	dd000617 	ldw	r20,24(sp)
20085374:	dcc00517 	ldw	r19,20(sp)
20085378:	dc800417 	ldw	r18,16(sp)
2008537c:	dc400317 	ldw	r17,12(sp)
20085380:	dc000217 	ldw	r16,8(sp)
20085384:	dec00c04 	addi	sp,sp,48
20085388:	f800283a 	ret
2008538c:	a009883a 	mov	r4,r20
20085390:	800b883a 	mov	r5,r16
20085394:	0082de00 	call	20082de0 <__swsetup_r>
20085398:	1000ec1e 	bne	r2,zero,2008574c <__sfvwrite_r+0x4a8>
2008539c:	8100030b 	ldhu	r4,12(r16)
200853a0:	bc400017 	ldw	r17,0(r23)
200853a4:	2080008c 	andi	r2,r4,2
200853a8:	103fd61e 	bne	r2,zero,20085304 <__flash_rwdata_start+0xffff39d4>
200853ac:	2080004c 	andi	r2,r4,1
200853b0:	10003a1e 	bne	r2,zero,2008549c <__sfvwrite_r+0x1f8>
200853b4:	0039883a 	mov	fp,zero
200853b8:	0025883a 	mov	r18,zero
200853bc:	90001a26 	beq	r18,zero,20085428 <__sfvwrite_r+0x184>
200853c0:	2080800c 	andi	r2,r4,512
200853c4:	85800217 	ldw	r22,8(r16)
200853c8:	10007626 	beq	r2,zero,200855a4 <__sfvwrite_r+0x300>
200853cc:	b027883a 	mov	r19,r22
200853d0:	95809436 	bltu	r18,r22,20085624 <__sfvwrite_r+0x380>
200853d4:	2081200c 	andi	r2,r4,1152
200853d8:	10009f1e 	bne	r2,zero,20085658 <__sfvwrite_r+0x3b4>
200853dc:	81000017 	ldw	r4,0(r16)
200853e0:	e00b883a 	mov	r5,fp
200853e4:	980d883a 	mov	r6,r19
200853e8:	0085da40 	call	20085da4 <memmove>
200853ec:	81000217 	ldw	r4,8(r16)
200853f0:	81400017 	ldw	r5,0(r16)
200853f4:	9005883a 	mov	r2,r18
200853f8:	2587c83a 	sub	r3,r4,r22
200853fc:	2ce7883a 	add	r19,r5,r19
20085400:	80c00215 	stw	r3,8(r16)
20085404:	84c00015 	stw	r19,0(r16)
20085408:	b8c00217 	ldw	r3,8(r23)
2008540c:	e0b9883a 	add	fp,fp,r2
20085410:	90a5c83a 	sub	r18,r18,r2
20085414:	1885c83a 	sub	r2,r3,r2
20085418:	b8800215 	stw	r2,8(r23)
2008541c:	103fce26 	beq	r2,zero,20085358 <__flash_rwdata_start+0xffff3a28>
20085420:	8100030b 	ldhu	r4,12(r16)
20085424:	903fe61e 	bne	r18,zero,200853c0 <__flash_rwdata_start+0xffff3a90>
20085428:	8f000017 	ldw	fp,0(r17)
2008542c:	8c800117 	ldw	r18,4(r17)
20085430:	8c400204 	addi	r17,r17,8
20085434:	003fe106 	br	200853bc <__flash_rwdata_start+0xffff3a8c>
20085438:	8cc00017 	ldw	r19,0(r17)
2008543c:	8c800117 	ldw	r18,4(r17)
20085440:	8c400204 	addi	r17,r17,8
20085444:	003fb306 	br	20085314 <__flash_rwdata_start+0xffff39e4>
20085448:	0005883a 	mov	r2,zero
2008544c:	f800283a 	ret
20085450:	00a00034 	movhi	r2,32768
20085454:	10bfffc4 	addi	r2,r2,-1
20085458:	9009883a 	mov	r4,r18
2008545c:	1480012e 	bgeu	r2,r18,20085464 <__sfvwrite_r+0x1c0>
20085460:	1009883a 	mov	r4,r2
20085464:	980b883a 	mov	r5,r19
20085468:	008a0f80 	call	2008a0f8 <__divsi3>
2008546c:	81400717 	ldw	r5,28(r16)
20085470:	80c00917 	ldw	r3,36(r16)
20085474:	988f383a 	mul	r7,r19,r2
20085478:	a009883a 	mov	r4,r20
2008547c:	e00d883a 	mov	r6,fp
20085480:	183ee83a 	callr	r3
20085484:	00bfe016 	blt	zero,r2,20085408 <__flash_rwdata_start+0xffff3ad8>
20085488:	8080030b 	ldhu	r2,12(r16)
2008548c:	10801014 	ori	r2,r2,64
20085490:	8080030d 	sth	r2,12(r16)
20085494:	00bfffc4 	movi	r2,-1
20085498:	003fb006 	br	2008535c <__flash_rwdata_start+0xffff3a2c>
2008549c:	0027883a 	mov	r19,zero
200854a0:	0011883a 	mov	r8,zero
200854a4:	0039883a 	mov	fp,zero
200854a8:	0025883a 	mov	r18,zero
200854ac:	90001f26 	beq	r18,zero,2008552c <__sfvwrite_r+0x288>
200854b0:	40006026 	beq	r8,zero,20085634 <__sfvwrite_r+0x390>
200854b4:	982b883a 	mov	r21,r19
200854b8:	94c0012e 	bgeu	r18,r19,200854c0 <__sfvwrite_r+0x21c>
200854bc:	902b883a 	mov	r21,r18
200854c0:	81000017 	ldw	r4,0(r16)
200854c4:	80800417 	ldw	r2,16(r16)
200854c8:	a82d883a 	mov	r22,r21
200854cc:	81800217 	ldw	r6,8(r16)
200854d0:	81c00517 	ldw	r7,20(r16)
200854d4:	1100022e 	bgeu	r2,r4,200854e0 <__sfvwrite_r+0x23c>
200854d8:	31c7883a 	add	r3,r6,r7
200854dc:	1d401816 	blt	r3,r21,20085540 <__sfvwrite_r+0x29c>
200854e0:	a9c04416 	blt	r21,r7,200855f4 <__sfvwrite_r+0x350>
200854e4:	80800917 	ldw	r2,36(r16)
200854e8:	81400717 	ldw	r5,28(r16)
200854ec:	a009883a 	mov	r4,r20
200854f0:	da000115 	stw	r8,4(sp)
200854f4:	e00d883a 	mov	r6,fp
200854f8:	103ee83a 	callr	r2
200854fc:	102d883a 	mov	r22,r2
20085500:	da000117 	ldw	r8,4(sp)
20085504:	00bfe00e 	bge	zero,r2,20085488 <__flash_rwdata_start+0xffff3b58>
20085508:	9da7c83a 	sub	r19,r19,r22
2008550c:	98001f26 	beq	r19,zero,2008558c <__sfvwrite_r+0x2e8>
20085510:	b8800217 	ldw	r2,8(r23)
20085514:	e5b9883a 	add	fp,fp,r22
20085518:	95a5c83a 	sub	r18,r18,r22
2008551c:	15adc83a 	sub	r22,r2,r22
20085520:	bd800215 	stw	r22,8(r23)
20085524:	b03f8c26 	beq	r22,zero,20085358 <__flash_rwdata_start+0xffff3a28>
20085528:	903fe11e 	bne	r18,zero,200854b0 <__flash_rwdata_start+0xffff3b80>
2008552c:	8f000017 	ldw	fp,0(r17)
20085530:	8c800117 	ldw	r18,4(r17)
20085534:	0011883a 	mov	r8,zero
20085538:	8c400204 	addi	r17,r17,8
2008553c:	003fdb06 	br	200854ac <__flash_rwdata_start+0xffff3b7c>
20085540:	180d883a 	mov	r6,r3
20085544:	e00b883a 	mov	r5,fp
20085548:	da000115 	stw	r8,4(sp)
2008554c:	d8c00015 	stw	r3,0(sp)
20085550:	0085da40 	call	20085da4 <memmove>
20085554:	d8c00017 	ldw	r3,0(sp)
20085558:	80800017 	ldw	r2,0(r16)
2008555c:	a009883a 	mov	r4,r20
20085560:	800b883a 	mov	r5,r16
20085564:	10c5883a 	add	r2,r2,r3
20085568:	80800015 	stw	r2,0(r16)
2008556c:	d8c00015 	stw	r3,0(sp)
20085570:	0084a640 	call	20084a64 <_fflush_r>
20085574:	d8c00017 	ldw	r3,0(sp)
20085578:	da000117 	ldw	r8,4(sp)
2008557c:	103fc21e 	bne	r2,zero,20085488 <__flash_rwdata_start+0xffff3b58>
20085580:	182d883a 	mov	r22,r3
20085584:	9da7c83a 	sub	r19,r19,r22
20085588:	983fe11e 	bne	r19,zero,20085510 <__flash_rwdata_start+0xffff3be0>
2008558c:	a009883a 	mov	r4,r20
20085590:	800b883a 	mov	r5,r16
20085594:	0084a640 	call	20084a64 <_fflush_r>
20085598:	103fbb1e 	bne	r2,zero,20085488 <__flash_rwdata_start+0xffff3b58>
2008559c:	0011883a 	mov	r8,zero
200855a0:	003fdb06 	br	20085510 <__flash_rwdata_start+0xffff3be0>
200855a4:	81000017 	ldw	r4,0(r16)
200855a8:	80800417 	ldw	r2,16(r16)
200855ac:	11000236 	bltu	r2,r4,200855b8 <__sfvwrite_r+0x314>
200855b0:	84c00517 	ldw	r19,20(r16)
200855b4:	94ffa62e 	bgeu	r18,r19,20085450 <__flash_rwdata_start+0xffff3b20>
200855b8:	9027883a 	mov	r19,r18
200855bc:	b480012e 	bgeu	r22,r18,200855c4 <__sfvwrite_r+0x320>
200855c0:	b027883a 	mov	r19,r22
200855c4:	e00b883a 	mov	r5,fp
200855c8:	980d883a 	mov	r6,r19
200855cc:	0085da40 	call	20085da4 <memmove>
200855d0:	80800217 	ldw	r2,8(r16)
200855d4:	80c00017 	ldw	r3,0(r16)
200855d8:	14c5c83a 	sub	r2,r2,r19
200855dc:	1cc7883a 	add	r3,r3,r19
200855e0:	80800215 	stw	r2,8(r16)
200855e4:	80c00015 	stw	r3,0(r16)
200855e8:	10004326 	beq	r2,zero,200856f8 <__sfvwrite_r+0x454>
200855ec:	9805883a 	mov	r2,r19
200855f0:	003f8506 	br	20085408 <__flash_rwdata_start+0xffff3ad8>
200855f4:	a80d883a 	mov	r6,r21
200855f8:	e00b883a 	mov	r5,fp
200855fc:	da000115 	stw	r8,4(sp)
20085600:	0085da40 	call	20085da4 <memmove>
20085604:	80800217 	ldw	r2,8(r16)
20085608:	80c00017 	ldw	r3,0(r16)
2008560c:	da000117 	ldw	r8,4(sp)
20085610:	1545c83a 	sub	r2,r2,r21
20085614:	1d6b883a 	add	r21,r3,r21
20085618:	80800215 	stw	r2,8(r16)
2008561c:	85400015 	stw	r21,0(r16)
20085620:	003fb906 	br	20085508 <__flash_rwdata_start+0xffff3bd8>
20085624:	81000017 	ldw	r4,0(r16)
20085628:	902d883a 	mov	r22,r18
2008562c:	9027883a 	mov	r19,r18
20085630:	003f6b06 	br	200853e0 <__flash_rwdata_start+0xffff3ab0>
20085634:	e009883a 	mov	r4,fp
20085638:	01400284 	movi	r5,10
2008563c:	900d883a 	mov	r6,r18
20085640:	0085b840 	call	20085b84 <memchr>
20085644:	10003e26 	beq	r2,zero,20085740 <__sfvwrite_r+0x49c>
20085648:	10800044 	addi	r2,r2,1
2008564c:	1727c83a 	sub	r19,r2,fp
20085650:	02000044 	movi	r8,1
20085654:	003f9706 	br	200854b4 <__flash_rwdata_start+0xffff3b84>
20085658:	80800517 	ldw	r2,20(r16)
2008565c:	81400417 	ldw	r5,16(r16)
20085660:	80c00017 	ldw	r3,0(r16)
20085664:	10a7883a 	add	r19,r2,r2
20085668:	9885883a 	add	r2,r19,r2
2008566c:	1026d7fa 	srli	r19,r2,31
20085670:	196bc83a 	sub	r21,r3,r5
20085674:	a9800044 	addi	r6,r21,1
20085678:	9885883a 	add	r2,r19,r2
2008567c:	1027d07a 	srai	r19,r2,1
20085680:	3485883a 	add	r2,r6,r18
20085684:	980d883a 	mov	r6,r19
20085688:	9880022e 	bgeu	r19,r2,20085694 <__sfvwrite_r+0x3f0>
2008568c:	1027883a 	mov	r19,r2
20085690:	100d883a 	mov	r6,r2
20085694:	2101000c 	andi	r4,r4,1024
20085698:	20001c26 	beq	r4,zero,2008570c <__sfvwrite_r+0x468>
2008569c:	a009883a 	mov	r4,r20
200856a0:	300b883a 	mov	r5,r6
200856a4:	00803f80 	call	200803f8 <_malloc_r>
200856a8:	102d883a 	mov	r22,r2
200856ac:	10002926 	beq	r2,zero,20085754 <__sfvwrite_r+0x4b0>
200856b0:	81400417 	ldw	r5,16(r16)
200856b4:	1009883a 	mov	r4,r2
200856b8:	a80d883a 	mov	r6,r21
200856bc:	0085c6c0 	call	20085c6c <memcpy>
200856c0:	8080030b 	ldhu	r2,12(r16)
200856c4:	00fedfc4 	movi	r3,-1153
200856c8:	10c4703a 	and	r2,r2,r3
200856cc:	10802014 	ori	r2,r2,128
200856d0:	8080030d 	sth	r2,12(r16)
200856d4:	b549883a 	add	r4,r22,r21
200856d8:	9d4bc83a 	sub	r5,r19,r21
200856dc:	85800415 	stw	r22,16(r16)
200856e0:	84c00515 	stw	r19,20(r16)
200856e4:	81000015 	stw	r4,0(r16)
200856e8:	902d883a 	mov	r22,r18
200856ec:	81400215 	stw	r5,8(r16)
200856f0:	9027883a 	mov	r19,r18
200856f4:	003f3a06 	br	200853e0 <__flash_rwdata_start+0xffff3ab0>
200856f8:	a009883a 	mov	r4,r20
200856fc:	800b883a 	mov	r5,r16
20085700:	0084a640 	call	20084a64 <_fflush_r>
20085704:	103fb926 	beq	r2,zero,200855ec <__flash_rwdata_start+0xffff3cbc>
20085708:	003f5f06 	br	20085488 <__flash_rwdata_start+0xffff3b58>
2008570c:	a009883a 	mov	r4,r20
20085710:	0086fc40 	call	20086fc4 <_realloc_r>
20085714:	102d883a 	mov	r22,r2
20085718:	103fee1e 	bne	r2,zero,200856d4 <__flash_rwdata_start+0xffff3da4>
2008571c:	81400417 	ldw	r5,16(r16)
20085720:	a009883a 	mov	r4,r20
20085724:	0084fb40 	call	20084fb4 <_free_r>
20085728:	8080030b 	ldhu	r2,12(r16)
2008572c:	00ffdfc4 	movi	r3,-129
20085730:	1884703a 	and	r2,r3,r2
20085734:	00c00304 	movi	r3,12
20085738:	a0c00015 	stw	r3,0(r20)
2008573c:	003f5306 	br	2008548c <__flash_rwdata_start+0xffff3b5c>
20085740:	94c00044 	addi	r19,r18,1
20085744:	02000044 	movi	r8,1
20085748:	003f5a06 	br	200854b4 <__flash_rwdata_start+0xffff3b84>
2008574c:	00bfffc4 	movi	r2,-1
20085750:	003f0206 	br	2008535c <__flash_rwdata_start+0xffff3a2c>
20085754:	00800304 	movi	r2,12
20085758:	a0800015 	stw	r2,0(r20)
2008575c:	8080030b 	ldhu	r2,12(r16)
20085760:	003f4a06 	br	2008548c <__flash_rwdata_start+0xffff3b5c>

20085764 <_fwalk>:
20085764:	defff704 	addi	sp,sp,-36
20085768:	dd000415 	stw	r20,16(sp)
2008576c:	dfc00815 	stw	ra,32(sp)
20085770:	ddc00715 	stw	r23,28(sp)
20085774:	dd800615 	stw	r22,24(sp)
20085778:	dd400515 	stw	r21,20(sp)
2008577c:	dcc00315 	stw	r19,12(sp)
20085780:	dc800215 	stw	r18,8(sp)
20085784:	dc400115 	stw	r17,4(sp)
20085788:	dc000015 	stw	r16,0(sp)
2008578c:	2500b804 	addi	r20,r4,736
20085790:	a0002326 	beq	r20,zero,20085820 <_fwalk+0xbc>
20085794:	282b883a 	mov	r21,r5
20085798:	002f883a 	mov	r23,zero
2008579c:	05800044 	movi	r22,1
200857a0:	04ffffc4 	movi	r19,-1
200857a4:	a4400117 	ldw	r17,4(r20)
200857a8:	a4800217 	ldw	r18,8(r20)
200857ac:	8c7fffc4 	addi	r17,r17,-1
200857b0:	88000d16 	blt	r17,zero,200857e8 <_fwalk+0x84>
200857b4:	94000304 	addi	r16,r18,12
200857b8:	94800384 	addi	r18,r18,14
200857bc:	80c0000b 	ldhu	r3,0(r16)
200857c0:	8c7fffc4 	addi	r17,r17,-1
200857c4:	813ffd04 	addi	r4,r16,-12
200857c8:	b0c0042e 	bgeu	r22,r3,200857dc <_fwalk+0x78>
200857cc:	90c0000f 	ldh	r3,0(r18)
200857d0:	1cc00226 	beq	r3,r19,200857dc <_fwalk+0x78>
200857d4:	a83ee83a 	callr	r21
200857d8:	b8aeb03a 	or	r23,r23,r2
200857dc:	84001a04 	addi	r16,r16,104
200857e0:	94801a04 	addi	r18,r18,104
200857e4:	8cfff51e 	bne	r17,r19,200857bc <__flash_rwdata_start+0xffff3e8c>
200857e8:	a5000017 	ldw	r20,0(r20)
200857ec:	a03fed1e 	bne	r20,zero,200857a4 <__flash_rwdata_start+0xffff3e74>
200857f0:	b805883a 	mov	r2,r23
200857f4:	dfc00817 	ldw	ra,32(sp)
200857f8:	ddc00717 	ldw	r23,28(sp)
200857fc:	dd800617 	ldw	r22,24(sp)
20085800:	dd400517 	ldw	r21,20(sp)
20085804:	dd000417 	ldw	r20,16(sp)
20085808:	dcc00317 	ldw	r19,12(sp)
2008580c:	dc800217 	ldw	r18,8(sp)
20085810:	dc400117 	ldw	r17,4(sp)
20085814:	dc000017 	ldw	r16,0(sp)
20085818:	dec00904 	addi	sp,sp,36
2008581c:	f800283a 	ret
20085820:	002f883a 	mov	r23,zero
20085824:	003ff206 	br	200857f0 <__flash_rwdata_start+0xffff3ec0>

20085828 <_fwalk_reent>:
20085828:	defff704 	addi	sp,sp,-36
2008582c:	dd400515 	stw	r21,20(sp)
20085830:	dfc00815 	stw	ra,32(sp)
20085834:	ddc00715 	stw	r23,28(sp)
20085838:	dd800615 	stw	r22,24(sp)
2008583c:	dd000415 	stw	r20,16(sp)
20085840:	dcc00315 	stw	r19,12(sp)
20085844:	dc800215 	stw	r18,8(sp)
20085848:	dc400115 	stw	r17,4(sp)
2008584c:	dc000015 	stw	r16,0(sp)
20085850:	2540b804 	addi	r21,r4,736
20085854:	a8002326 	beq	r21,zero,200858e4 <_fwalk_reent+0xbc>
20085858:	2829883a 	mov	r20,r5
2008585c:	202d883a 	mov	r22,r4
20085860:	002f883a 	mov	r23,zero
20085864:	04c00044 	movi	r19,1
20085868:	04bfffc4 	movi	r18,-1
2008586c:	ac400117 	ldw	r17,4(r21)
20085870:	ac000217 	ldw	r16,8(r21)
20085874:	8c7fffc4 	addi	r17,r17,-1
20085878:	88000c16 	blt	r17,zero,200858ac <_fwalk_reent+0x84>
2008587c:	84000304 	addi	r16,r16,12
20085880:	80c0000b 	ldhu	r3,0(r16)
20085884:	8c7fffc4 	addi	r17,r17,-1
20085888:	817ffd04 	addi	r5,r16,-12
2008588c:	98c0052e 	bgeu	r19,r3,200858a4 <_fwalk_reent+0x7c>
20085890:	80c0008f 	ldh	r3,2(r16)
20085894:	b009883a 	mov	r4,r22
20085898:	1c800226 	beq	r3,r18,200858a4 <_fwalk_reent+0x7c>
2008589c:	a03ee83a 	callr	r20
200858a0:	b8aeb03a 	or	r23,r23,r2
200858a4:	84001a04 	addi	r16,r16,104
200858a8:	8cbff51e 	bne	r17,r18,20085880 <__flash_rwdata_start+0xffff3f50>
200858ac:	ad400017 	ldw	r21,0(r21)
200858b0:	a83fee1e 	bne	r21,zero,2008586c <__flash_rwdata_start+0xffff3f3c>
200858b4:	b805883a 	mov	r2,r23
200858b8:	dfc00817 	ldw	ra,32(sp)
200858bc:	ddc00717 	ldw	r23,28(sp)
200858c0:	dd800617 	ldw	r22,24(sp)
200858c4:	dd400517 	ldw	r21,20(sp)
200858c8:	dd000417 	ldw	r20,16(sp)
200858cc:	dcc00317 	ldw	r19,12(sp)
200858d0:	dc800217 	ldw	r18,8(sp)
200858d4:	dc400117 	ldw	r17,4(sp)
200858d8:	dc000017 	ldw	r16,0(sp)
200858dc:	dec00904 	addi	sp,sp,36
200858e0:	f800283a 	ret
200858e4:	002f883a 	mov	r23,zero
200858e8:	003ff206 	br	200858b4 <__flash_rwdata_start+0xffff3f84>

200858ec <_setlocale_r>:
200858ec:	30001b26 	beq	r6,zero,2008595c <_setlocale_r+0x70>
200858f0:	01400034 	movhi	r5,0
200858f4:	defffe04 	addi	sp,sp,-8
200858f8:	29403804 	addi	r5,r5,224
200858fc:	3009883a 	mov	r4,r6
20085900:	dc000015 	stw	r16,0(sp)
20085904:	dfc00115 	stw	ra,4(sp)
20085908:	3021883a 	mov	r16,r6
2008590c:	00876dc0 	call	200876dc <strcmp>
20085910:	1000061e 	bne	r2,zero,2008592c <_setlocale_r+0x40>
20085914:	00800034 	movhi	r2,0
20085918:	10803704 	addi	r2,r2,220
2008591c:	dfc00117 	ldw	ra,4(sp)
20085920:	dc000017 	ldw	r16,0(sp)
20085924:	dec00204 	addi	sp,sp,8
20085928:	f800283a 	ret
2008592c:	01400034 	movhi	r5,0
20085930:	29403704 	addi	r5,r5,220
20085934:	8009883a 	mov	r4,r16
20085938:	00876dc0 	call	200876dc <strcmp>
2008593c:	103ff526 	beq	r2,zero,20085914 <__flash_rwdata_start+0xffff3fe4>
20085940:	01400034 	movhi	r5,0
20085944:	29401804 	addi	r5,r5,96
20085948:	8009883a 	mov	r4,r16
2008594c:	00876dc0 	call	200876dc <strcmp>
20085950:	103ff026 	beq	r2,zero,20085914 <__flash_rwdata_start+0xffff3fe4>
20085954:	0005883a 	mov	r2,zero
20085958:	003ff006 	br	2008591c <__flash_rwdata_start+0xffff3fec>
2008595c:	00800034 	movhi	r2,0
20085960:	10803704 	addi	r2,r2,220
20085964:	f800283a 	ret

20085968 <__locale_charset>:
20085968:	00800034 	movhi	r2,0
2008596c:	10837e04 	addi	r2,r2,3576
20085970:	f800283a 	ret

20085974 <__locale_mb_cur_max>:
20085974:	00800034 	movhi	r2,0
20085978:	10886204 	addi	r2,r2,8584
2008597c:	10800017 	ldw	r2,0(r2)
20085980:	f800283a 	ret

20085984 <__locale_msgcharset>:
20085984:	00800034 	movhi	r2,0
20085988:	10837604 	addi	r2,r2,3544
2008598c:	f800283a 	ret

20085990 <__locale_cjk_lang>:
20085990:	0005883a 	mov	r2,zero
20085994:	f800283a 	ret

20085998 <_localeconv_r>:
20085998:	00800034 	movhi	r2,0
2008599c:	10838604 	addi	r2,r2,3608
200859a0:	f800283a 	ret

200859a4 <setlocale>:
200859a4:	00c00034 	movhi	r3,0
200859a8:	18c86104 	addi	r3,r3,8580
200859ac:	2005883a 	mov	r2,r4
200859b0:	19000017 	ldw	r4,0(r3)
200859b4:	280d883a 	mov	r6,r5
200859b8:	100b883a 	mov	r5,r2
200859bc:	00858ec1 	jmpi	200858ec <_setlocale_r>

200859c0 <localeconv>:
200859c0:	00800034 	movhi	r2,0
200859c4:	10838604 	addi	r2,r2,3608
200859c8:	f800283a 	ret

200859cc <__smakebuf_r>:
200859cc:	2880030b 	ldhu	r2,12(r5)
200859d0:	10c0008c 	andi	r3,r2,2
200859d4:	1800401e 	bne	r3,zero,20085ad8 <__smakebuf_r+0x10c>
200859d8:	deffec04 	addi	sp,sp,-80
200859dc:	dc000f15 	stw	r16,60(sp)
200859e0:	2821883a 	mov	r16,r5
200859e4:	2940038f 	ldh	r5,14(r5)
200859e8:	dc401015 	stw	r17,64(sp)
200859ec:	dfc01315 	stw	ra,76(sp)
200859f0:	dcc01215 	stw	r19,72(sp)
200859f4:	dc801115 	stw	r18,68(sp)
200859f8:	2023883a 	mov	r17,r4
200859fc:	28001b16 	blt	r5,zero,20085a6c <__smakebuf_r+0xa0>
20085a00:	d80d883a 	mov	r6,sp
20085a04:	008909c0 	call	2008909c <_fstat_r>
20085a08:	10001716 	blt	r2,zero,20085a68 <__smakebuf_r+0x9c>
20085a0c:	d8800117 	ldw	r2,4(sp)
20085a10:	00e00014 	movui	r3,32768
20085a14:	10bc000c 	andi	r2,r2,61440
20085a18:	10c03726 	beq	r2,r3,20085af8 <__smakebuf_r+0x12c>
20085a1c:	80c0030b 	ldhu	r3,12(r16)
20085a20:	18c20014 	ori	r3,r3,2048
20085a24:	80c0030d 	sth	r3,12(r16)
20085a28:	00c80004 	movi	r3,8192
20085a2c:	10c03c1e 	bne	r2,r3,20085b20 <__smakebuf_r+0x154>
20085a30:	8140038f 	ldh	r5,14(r16)
20085a34:	8809883a 	mov	r4,r17
20085a38:	00890f40 	call	200890f4 <_isatty_r>
20085a3c:	10004e26 	beq	r2,zero,20085b78 <__smakebuf_r+0x1ac>
20085a40:	8080030b 	ldhu	r2,12(r16)
20085a44:	04c00044 	movi	r19,1
20085a48:	80c010c4 	addi	r3,r16,67
20085a4c:	14c4b03a 	or	r2,r2,r19
20085a50:	8080030d 	sth	r2,12(r16)
20085a54:	80c00015 	stw	r3,0(r16)
20085a58:	80c00415 	stw	r3,16(r16)
20085a5c:	84c00515 	stw	r19,20(r16)
20085a60:	04810004 	movi	r18,1024
20085a64:	00000706 	br	20085a84 <__smakebuf_r+0xb8>
20085a68:	8080030b 	ldhu	r2,12(r16)
20085a6c:	10c0200c 	andi	r3,r2,128
20085a70:	18001f1e 	bne	r3,zero,20085af0 <__smakebuf_r+0x124>
20085a74:	04810004 	movi	r18,1024
20085a78:	10820014 	ori	r2,r2,2048
20085a7c:	8080030d 	sth	r2,12(r16)
20085a80:	0027883a 	mov	r19,zero
20085a84:	8809883a 	mov	r4,r17
20085a88:	900b883a 	mov	r5,r18
20085a8c:	00803f80 	call	200803f8 <_malloc_r>
20085a90:	10002e26 	beq	r2,zero,20085b4c <__smakebuf_r+0x180>
20085a94:	80c0030b 	ldhu	r3,12(r16)
20085a98:	01080234 	movhi	r4,8200
20085a9c:	2112c004 	addi	r4,r4,19200
20085aa0:	89000f15 	stw	r4,60(r17)
20085aa4:	18c02014 	ori	r3,r3,128
20085aa8:	80c0030d 	sth	r3,12(r16)
20085aac:	80800015 	stw	r2,0(r16)
20085ab0:	80800415 	stw	r2,16(r16)
20085ab4:	84800515 	stw	r18,20(r16)
20085ab8:	98001c1e 	bne	r19,zero,20085b2c <__smakebuf_r+0x160>
20085abc:	dfc01317 	ldw	ra,76(sp)
20085ac0:	dcc01217 	ldw	r19,72(sp)
20085ac4:	dc801117 	ldw	r18,68(sp)
20085ac8:	dc401017 	ldw	r17,64(sp)
20085acc:	dc000f17 	ldw	r16,60(sp)
20085ad0:	dec01404 	addi	sp,sp,80
20085ad4:	f800283a 	ret
20085ad8:	288010c4 	addi	r2,r5,67
20085adc:	28800015 	stw	r2,0(r5)
20085ae0:	28800415 	stw	r2,16(r5)
20085ae4:	00800044 	movi	r2,1
20085ae8:	28800515 	stw	r2,20(r5)
20085aec:	f800283a 	ret
20085af0:	04801004 	movi	r18,64
20085af4:	003fe006 	br	20085a78 <__flash_rwdata_start+0xffff4148>
20085af8:	81000a17 	ldw	r4,40(r16)
20085afc:	00c80234 	movhi	r3,8200
20085b00:	18dd9e04 	addi	r3,r3,30328
20085b04:	20ffc51e 	bne	r4,r3,20085a1c <__flash_rwdata_start+0xffff40ec>
20085b08:	80c0030b 	ldhu	r3,12(r16)
20085b0c:	01010004 	movi	r4,1024
20085b10:	81001315 	stw	r4,76(r16)
20085b14:	1906b03a 	or	r3,r3,r4
20085b18:	80c0030d 	sth	r3,12(r16)
20085b1c:	003fc206 	br	20085a28 <__flash_rwdata_start+0xffff40f8>
20085b20:	0027883a 	mov	r19,zero
20085b24:	04810004 	movi	r18,1024
20085b28:	003fd606 	br	20085a84 <__flash_rwdata_start+0xffff4154>
20085b2c:	8140038f 	ldh	r5,14(r16)
20085b30:	8809883a 	mov	r4,r17
20085b34:	00890f40 	call	200890f4 <_isatty_r>
20085b38:	103fe026 	beq	r2,zero,20085abc <__flash_rwdata_start+0xffff418c>
20085b3c:	8080030b 	ldhu	r2,12(r16)
20085b40:	10800054 	ori	r2,r2,1
20085b44:	8080030d 	sth	r2,12(r16)
20085b48:	003fdc06 	br	20085abc <__flash_rwdata_start+0xffff418c>
20085b4c:	8080030b 	ldhu	r2,12(r16)
20085b50:	10c0800c 	andi	r3,r2,512
20085b54:	183fd91e 	bne	r3,zero,20085abc <__flash_rwdata_start+0xffff418c>
20085b58:	10800094 	ori	r2,r2,2
20085b5c:	80c010c4 	addi	r3,r16,67
20085b60:	8080030d 	sth	r2,12(r16)
20085b64:	00800044 	movi	r2,1
20085b68:	80c00015 	stw	r3,0(r16)
20085b6c:	80c00415 	stw	r3,16(r16)
20085b70:	80800515 	stw	r2,20(r16)
20085b74:	003fd106 	br	20085abc <__flash_rwdata_start+0xffff418c>
20085b78:	04c00044 	movi	r19,1
20085b7c:	04810004 	movi	r18,1024
20085b80:	003fc006 	br	20085a84 <__flash_rwdata_start+0xffff4154>

20085b84 <memchr>:
20085b84:	208000cc 	andi	r2,r4,3
20085b88:	280f883a 	mov	r7,r5
20085b8c:	10003526 	beq	r2,zero,20085c64 <memchr+0xe0>
20085b90:	30bfffc4 	addi	r2,r6,-1
20085b94:	30001b26 	beq	r6,zero,20085c04 <memchr+0x80>
20085b98:	21800003 	ldbu	r6,0(r4)
20085b9c:	28c03fcc 	andi	r3,r5,255
20085ba0:	30c01a26 	beq	r6,r3,20085c0c <memchr+0x88>
20085ba4:	180d883a 	mov	r6,r3
20085ba8:	00000406 	br	20085bbc <memchr+0x38>
20085bac:	10001526 	beq	r2,zero,20085c04 <memchr+0x80>
20085bb0:	20c00003 	ldbu	r3,0(r4)
20085bb4:	10bfffc4 	addi	r2,r2,-1
20085bb8:	19801426 	beq	r3,r6,20085c0c <memchr+0x88>
20085bbc:	21000044 	addi	r4,r4,1
20085bc0:	20c000cc 	andi	r3,r4,3
20085bc4:	183ff91e 	bne	r3,zero,20085bac <__flash_rwdata_start+0xffff427c>
20085bc8:	024000c4 	movi	r9,3
20085bcc:	48801136 	bltu	r9,r2,20085c14 <memchr+0x90>
20085bd0:	10000c26 	beq	r2,zero,20085c04 <memchr+0x80>
20085bd4:	20c00003 	ldbu	r3,0(r4)
20085bd8:	29403fcc 	andi	r5,r5,255
20085bdc:	19400b26 	beq	r3,r5,20085c0c <memchr+0x88>
20085be0:	20c00044 	addi	r3,r4,1
20085be4:	2085883a 	add	r2,r4,r2
20085be8:	39803fcc 	andi	r6,r7,255
20085bec:	00000306 	br	20085bfc <memchr+0x78>
20085bf0:	18c00044 	addi	r3,r3,1
20085bf4:	197fffc3 	ldbu	r5,-1(r3)
20085bf8:	29800426 	beq	r5,r6,20085c0c <memchr+0x88>
20085bfc:	1809883a 	mov	r4,r3
20085c00:	18bffb1e 	bne	r3,r2,20085bf0 <__flash_rwdata_start+0xffff42c0>
20085c04:	0005883a 	mov	r2,zero
20085c08:	f800283a 	ret
20085c0c:	2005883a 	mov	r2,r4
20085c10:	f800283a 	ret
20085c14:	28c03fcc 	andi	r3,r5,255
20085c18:	1810923a 	slli	r8,r3,8
20085c1c:	02ffbff4 	movhi	r11,65279
20085c20:	02a02074 	movhi	r10,32897
20085c24:	40c6b03a 	or	r3,r8,r3
20085c28:	1810943a 	slli	r8,r3,16
20085c2c:	5affbfc4 	addi	r11,r11,-257
20085c30:	52a02004 	addi	r10,r10,-32640
20085c34:	40d0b03a 	or	r8,r8,r3
20085c38:	20c00017 	ldw	r3,0(r4)
20085c3c:	40c6f03a 	xor	r3,r8,r3
20085c40:	1acd883a 	add	r6,r3,r11
20085c44:	00c6303a 	nor	r3,zero,r3
20085c48:	30c6703a 	and	r3,r6,r3
20085c4c:	1a86703a 	and	r3,r3,r10
20085c50:	183fdf1e 	bne	r3,zero,20085bd0 <__flash_rwdata_start+0xffff42a0>
20085c54:	10bfff04 	addi	r2,r2,-4
20085c58:	21000104 	addi	r4,r4,4
20085c5c:	48bff636 	bltu	r9,r2,20085c38 <__flash_rwdata_start+0xffff4308>
20085c60:	003fdb06 	br	20085bd0 <__flash_rwdata_start+0xffff42a0>
20085c64:	3005883a 	mov	r2,r6
20085c68:	003fd706 	br	20085bc8 <__flash_rwdata_start+0xffff4298>

20085c6c <memcpy>:
20085c6c:	deffff04 	addi	sp,sp,-4
20085c70:	dc000015 	stw	r16,0(sp)
20085c74:	00c003c4 	movi	r3,15
20085c78:	2005883a 	mov	r2,r4
20085c7c:	1980432e 	bgeu	r3,r6,20085d8c <memcpy+0x120>
20085c80:	2146b03a 	or	r3,r4,r5
20085c84:	18c000cc 	andi	r3,r3,3
20085c88:	1800421e 	bne	r3,zero,20085d94 <memcpy+0x128>
20085c8c:	343ffc04 	addi	r16,r6,-16
20085c90:	8020d13a 	srli	r16,r16,4
20085c94:	28c00104 	addi	r3,r5,4
20085c98:	23400104 	addi	r13,r4,4
20085c9c:	801e913a 	slli	r15,r16,4
20085ca0:	2b000204 	addi	r12,r5,8
20085ca4:	22c00204 	addi	r11,r4,8
20085ca8:	7bc00504 	addi	r15,r15,20
20085cac:	2a800304 	addi	r10,r5,12
20085cb0:	22400304 	addi	r9,r4,12
20085cb4:	2bdf883a 	add	r15,r5,r15
20085cb8:	2811883a 	mov	r8,r5
20085cbc:	200f883a 	mov	r7,r4
20085cc0:	41000017 	ldw	r4,0(r8)
20085cc4:	39c00404 	addi	r7,r7,16
20085cc8:	18c00404 	addi	r3,r3,16
20085ccc:	393ffc15 	stw	r4,-16(r7)
20085cd0:	1bbffc17 	ldw	r14,-16(r3)
20085cd4:	6b400404 	addi	r13,r13,16
20085cd8:	5ac00404 	addi	r11,r11,16
20085cdc:	6bbffc15 	stw	r14,-16(r13)
20085ce0:	63800017 	ldw	r14,0(r12)
20085ce4:	4a400404 	addi	r9,r9,16
20085ce8:	42000404 	addi	r8,r8,16
20085cec:	5bbffc15 	stw	r14,-16(r11)
20085cf0:	53800017 	ldw	r14,0(r10)
20085cf4:	63000404 	addi	r12,r12,16
20085cf8:	52800404 	addi	r10,r10,16
20085cfc:	4bbffc15 	stw	r14,-16(r9)
20085d00:	1bffef1e 	bne	r3,r15,20085cc0 <__flash_rwdata_start+0xffff4390>
20085d04:	81c00044 	addi	r7,r16,1
20085d08:	380e913a 	slli	r7,r7,4
20085d0c:	310003cc 	andi	r4,r6,15
20085d10:	02c000c4 	movi	r11,3
20085d14:	11c7883a 	add	r3,r2,r7
20085d18:	29cb883a 	add	r5,r5,r7
20085d1c:	59001f2e 	bgeu	r11,r4,20085d9c <memcpy+0x130>
20085d20:	1813883a 	mov	r9,r3
20085d24:	2811883a 	mov	r8,r5
20085d28:	200f883a 	mov	r7,r4
20085d2c:	42800017 	ldw	r10,0(r8)
20085d30:	4a400104 	addi	r9,r9,4
20085d34:	39ffff04 	addi	r7,r7,-4
20085d38:	4abfff15 	stw	r10,-4(r9)
20085d3c:	42000104 	addi	r8,r8,4
20085d40:	59fffa36 	bltu	r11,r7,20085d2c <__flash_rwdata_start+0xffff43fc>
20085d44:	213fff04 	addi	r4,r4,-4
20085d48:	2008d0ba 	srli	r4,r4,2
20085d4c:	318000cc 	andi	r6,r6,3
20085d50:	21000044 	addi	r4,r4,1
20085d54:	2109883a 	add	r4,r4,r4
20085d58:	2109883a 	add	r4,r4,r4
20085d5c:	1907883a 	add	r3,r3,r4
20085d60:	290b883a 	add	r5,r5,r4
20085d64:	30000626 	beq	r6,zero,20085d80 <memcpy+0x114>
20085d68:	198d883a 	add	r6,r3,r6
20085d6c:	29c00003 	ldbu	r7,0(r5)
20085d70:	18c00044 	addi	r3,r3,1
20085d74:	29400044 	addi	r5,r5,1
20085d78:	19ffffc5 	stb	r7,-1(r3)
20085d7c:	19bffb1e 	bne	r3,r6,20085d6c <__flash_rwdata_start+0xffff443c>
20085d80:	dc000017 	ldw	r16,0(sp)
20085d84:	dec00104 	addi	sp,sp,4
20085d88:	f800283a 	ret
20085d8c:	2007883a 	mov	r3,r4
20085d90:	003ff406 	br	20085d64 <__flash_rwdata_start+0xffff4434>
20085d94:	2007883a 	mov	r3,r4
20085d98:	003ff306 	br	20085d68 <__flash_rwdata_start+0xffff4438>
20085d9c:	200d883a 	mov	r6,r4
20085da0:	003ff006 	br	20085d64 <__flash_rwdata_start+0xffff4434>

20085da4 <memmove>:
20085da4:	2005883a 	mov	r2,r4
20085da8:	29000b2e 	bgeu	r5,r4,20085dd8 <memmove+0x34>
20085dac:	298f883a 	add	r7,r5,r6
20085db0:	21c0092e 	bgeu	r4,r7,20085dd8 <memmove+0x34>
20085db4:	2187883a 	add	r3,r4,r6
20085db8:	198bc83a 	sub	r5,r3,r6
20085dbc:	30004b26 	beq	r6,zero,20085eec <memmove+0x148>
20085dc0:	39ffffc4 	addi	r7,r7,-1
20085dc4:	39000003 	ldbu	r4,0(r7)
20085dc8:	18ffffc4 	addi	r3,r3,-1
20085dcc:	19000005 	stb	r4,0(r3)
20085dd0:	197ffb1e 	bne	r3,r5,20085dc0 <__flash_rwdata_start+0xffff4490>
20085dd4:	f800283a 	ret
20085dd8:	00c003c4 	movi	r3,15
20085ddc:	1980412e 	bgeu	r3,r6,20085ee4 <memmove+0x140>
20085de0:	1146b03a 	or	r3,r2,r5
20085de4:	18c000cc 	andi	r3,r3,3
20085de8:	1800411e 	bne	r3,zero,20085ef0 <memmove+0x14c>
20085dec:	33fffc04 	addi	r15,r6,-16
20085df0:	781ed13a 	srli	r15,r15,4
20085df4:	28c00104 	addi	r3,r5,4
20085df8:	13400104 	addi	r13,r2,4
20085dfc:	781c913a 	slli	r14,r15,4
20085e00:	2b000204 	addi	r12,r5,8
20085e04:	12c00204 	addi	r11,r2,8
20085e08:	73800504 	addi	r14,r14,20
20085e0c:	2a800304 	addi	r10,r5,12
20085e10:	12400304 	addi	r9,r2,12
20085e14:	2b9d883a 	add	r14,r5,r14
20085e18:	2811883a 	mov	r8,r5
20085e1c:	100f883a 	mov	r7,r2
20085e20:	41000017 	ldw	r4,0(r8)
20085e24:	39c00404 	addi	r7,r7,16
20085e28:	18c00404 	addi	r3,r3,16
20085e2c:	393ffc15 	stw	r4,-16(r7)
20085e30:	193ffc17 	ldw	r4,-16(r3)
20085e34:	6b400404 	addi	r13,r13,16
20085e38:	5ac00404 	addi	r11,r11,16
20085e3c:	693ffc15 	stw	r4,-16(r13)
20085e40:	61000017 	ldw	r4,0(r12)
20085e44:	4a400404 	addi	r9,r9,16
20085e48:	42000404 	addi	r8,r8,16
20085e4c:	593ffc15 	stw	r4,-16(r11)
20085e50:	51000017 	ldw	r4,0(r10)
20085e54:	63000404 	addi	r12,r12,16
20085e58:	52800404 	addi	r10,r10,16
20085e5c:	493ffc15 	stw	r4,-16(r9)
20085e60:	1bbfef1e 	bne	r3,r14,20085e20 <__flash_rwdata_start+0xffff44f0>
20085e64:	79000044 	addi	r4,r15,1
20085e68:	2008913a 	slli	r4,r4,4
20085e6c:	328003cc 	andi	r10,r6,15
20085e70:	02c000c4 	movi	r11,3
20085e74:	1107883a 	add	r3,r2,r4
20085e78:	290b883a 	add	r5,r5,r4
20085e7c:	5a801e2e 	bgeu	r11,r10,20085ef8 <memmove+0x154>
20085e80:	1813883a 	mov	r9,r3
20085e84:	2811883a 	mov	r8,r5
20085e88:	500f883a 	mov	r7,r10
20085e8c:	41000017 	ldw	r4,0(r8)
20085e90:	4a400104 	addi	r9,r9,4
20085e94:	39ffff04 	addi	r7,r7,-4
20085e98:	493fff15 	stw	r4,-4(r9)
20085e9c:	42000104 	addi	r8,r8,4
20085ea0:	59fffa36 	bltu	r11,r7,20085e8c <__flash_rwdata_start+0xffff455c>
20085ea4:	513fff04 	addi	r4,r10,-4
20085ea8:	2008d0ba 	srli	r4,r4,2
20085eac:	318000cc 	andi	r6,r6,3
20085eb0:	21000044 	addi	r4,r4,1
20085eb4:	2109883a 	add	r4,r4,r4
20085eb8:	2109883a 	add	r4,r4,r4
20085ebc:	1907883a 	add	r3,r3,r4
20085ec0:	290b883a 	add	r5,r5,r4
20085ec4:	30000926 	beq	r6,zero,20085eec <memmove+0x148>
20085ec8:	198d883a 	add	r6,r3,r6
20085ecc:	29c00003 	ldbu	r7,0(r5)
20085ed0:	18c00044 	addi	r3,r3,1
20085ed4:	29400044 	addi	r5,r5,1
20085ed8:	19ffffc5 	stb	r7,-1(r3)
20085edc:	19bffb1e 	bne	r3,r6,20085ecc <__flash_rwdata_start+0xffff459c>
20085ee0:	f800283a 	ret
20085ee4:	1007883a 	mov	r3,r2
20085ee8:	003ff606 	br	20085ec4 <__flash_rwdata_start+0xffff4594>
20085eec:	f800283a 	ret
20085ef0:	1007883a 	mov	r3,r2
20085ef4:	003ff406 	br	20085ec8 <__flash_rwdata_start+0xffff4598>
20085ef8:	500d883a 	mov	r6,r10
20085efc:	003ff106 	br	20085ec4 <__flash_rwdata_start+0xffff4594>

20085f00 <memset>:
20085f00:	20c000cc 	andi	r3,r4,3
20085f04:	2005883a 	mov	r2,r4
20085f08:	18004326 	beq	r3,zero,20086018 <memset+0x118>
20085f0c:	31ffffc4 	addi	r7,r6,-1
20085f10:	30004026 	beq	r6,zero,20086014 <memset+0x114>
20085f14:	2813883a 	mov	r9,r5
20085f18:	200d883a 	mov	r6,r4
20085f1c:	2007883a 	mov	r3,r4
20085f20:	00000406 	br	20085f34 <memset+0x34>
20085f24:	3a3fffc4 	addi	r8,r7,-1
20085f28:	31800044 	addi	r6,r6,1
20085f2c:	38003926 	beq	r7,zero,20086014 <memset+0x114>
20085f30:	400f883a 	mov	r7,r8
20085f34:	18c00044 	addi	r3,r3,1
20085f38:	32400005 	stb	r9,0(r6)
20085f3c:	1a0000cc 	andi	r8,r3,3
20085f40:	403ff81e 	bne	r8,zero,20085f24 <__flash_rwdata_start+0xffff45f4>
20085f44:	010000c4 	movi	r4,3
20085f48:	21c02d2e 	bgeu	r4,r7,20086000 <memset+0x100>
20085f4c:	29803fcc 	andi	r6,r5,255
20085f50:	3008923a 	slli	r4,r6,8
20085f54:	218cb03a 	or	r6,r4,r6
20085f58:	3008943a 	slli	r4,r6,16
20085f5c:	218cb03a 	or	r6,r4,r6
20085f60:	010003c4 	movi	r4,15
20085f64:	21c0182e 	bgeu	r4,r7,20085fc8 <memset+0xc8>
20085f68:	3b3ffc04 	addi	r12,r7,-16
20085f6c:	6018d13a 	srli	r12,r12,4
20085f70:	1a000104 	addi	r8,r3,4
20085f74:	1ac00204 	addi	r11,r3,8
20085f78:	6008913a 	slli	r4,r12,4
20085f7c:	1a800304 	addi	r10,r3,12
20085f80:	1813883a 	mov	r9,r3
20085f84:	21000504 	addi	r4,r4,20
20085f88:	1909883a 	add	r4,r3,r4
20085f8c:	49800015 	stw	r6,0(r9)
20085f90:	41800015 	stw	r6,0(r8)
20085f94:	59800015 	stw	r6,0(r11)
20085f98:	51800015 	stw	r6,0(r10)
20085f9c:	42000404 	addi	r8,r8,16
20085fa0:	4a400404 	addi	r9,r9,16
20085fa4:	5ac00404 	addi	r11,r11,16
20085fa8:	52800404 	addi	r10,r10,16
20085fac:	413ff71e 	bne	r8,r4,20085f8c <__flash_rwdata_start+0xffff465c>
20085fb0:	63000044 	addi	r12,r12,1
20085fb4:	6018913a 	slli	r12,r12,4
20085fb8:	39c003cc 	andi	r7,r7,15
20085fbc:	010000c4 	movi	r4,3
20085fc0:	1b07883a 	add	r3,r3,r12
20085fc4:	21c00e2e 	bgeu	r4,r7,20086000 <memset+0x100>
20085fc8:	1813883a 	mov	r9,r3
20085fcc:	3811883a 	mov	r8,r7
20085fd0:	010000c4 	movi	r4,3
20085fd4:	49800015 	stw	r6,0(r9)
20085fd8:	423fff04 	addi	r8,r8,-4
20085fdc:	4a400104 	addi	r9,r9,4
20085fe0:	223ffc36 	bltu	r4,r8,20085fd4 <__flash_rwdata_start+0xffff46a4>
20085fe4:	393fff04 	addi	r4,r7,-4
20085fe8:	2008d0ba 	srli	r4,r4,2
20085fec:	39c000cc 	andi	r7,r7,3
20085ff0:	21000044 	addi	r4,r4,1
20085ff4:	2109883a 	add	r4,r4,r4
20085ff8:	2109883a 	add	r4,r4,r4
20085ffc:	1907883a 	add	r3,r3,r4
20086000:	38000426 	beq	r7,zero,20086014 <memset+0x114>
20086004:	19cf883a 	add	r7,r3,r7
20086008:	19400005 	stb	r5,0(r3)
2008600c:	18c00044 	addi	r3,r3,1
20086010:	19fffd1e 	bne	r3,r7,20086008 <__flash_rwdata_start+0xffff46d8>
20086014:	f800283a 	ret
20086018:	2007883a 	mov	r3,r4
2008601c:	300f883a 	mov	r7,r6
20086020:	003fc806 	br	20085f44 <__flash_rwdata_start+0xffff4614>

20086024 <_Balloc>:
20086024:	20801317 	ldw	r2,76(r4)
20086028:	defffc04 	addi	sp,sp,-16
2008602c:	dc400115 	stw	r17,4(sp)
20086030:	dc000015 	stw	r16,0(sp)
20086034:	dfc00315 	stw	ra,12(sp)
20086038:	dc800215 	stw	r18,8(sp)
2008603c:	2023883a 	mov	r17,r4
20086040:	2821883a 	mov	r16,r5
20086044:	10000f26 	beq	r2,zero,20086084 <_Balloc+0x60>
20086048:	8407883a 	add	r3,r16,r16
2008604c:	18c7883a 	add	r3,r3,r3
20086050:	10c7883a 	add	r3,r2,r3
20086054:	18800017 	ldw	r2,0(r3)
20086058:	10001126 	beq	r2,zero,200860a0 <_Balloc+0x7c>
2008605c:	11000017 	ldw	r4,0(r2)
20086060:	19000015 	stw	r4,0(r3)
20086064:	10000415 	stw	zero,16(r2)
20086068:	10000315 	stw	zero,12(r2)
2008606c:	dfc00317 	ldw	ra,12(sp)
20086070:	dc800217 	ldw	r18,8(sp)
20086074:	dc400117 	ldw	r17,4(sp)
20086078:	dc000017 	ldw	r16,0(sp)
2008607c:	dec00404 	addi	sp,sp,16
20086080:	f800283a 	ret
20086084:	01400104 	movi	r5,4
20086088:	01800844 	movi	r6,33
2008608c:	0088cf40 	call	20088cf4 <_calloc_r>
20086090:	88801315 	stw	r2,76(r17)
20086094:	103fec1e 	bne	r2,zero,20086048 <__flash_rwdata_start+0xffff4718>
20086098:	0005883a 	mov	r2,zero
2008609c:	003ff306 	br	2008606c <__flash_rwdata_start+0xffff473c>
200860a0:	01400044 	movi	r5,1
200860a4:	2c24983a 	sll	r18,r5,r16
200860a8:	8809883a 	mov	r4,r17
200860ac:	91800144 	addi	r6,r18,5
200860b0:	318d883a 	add	r6,r6,r6
200860b4:	318d883a 	add	r6,r6,r6
200860b8:	0088cf40 	call	20088cf4 <_calloc_r>
200860bc:	103ff626 	beq	r2,zero,20086098 <__flash_rwdata_start+0xffff4768>
200860c0:	14000115 	stw	r16,4(r2)
200860c4:	14800215 	stw	r18,8(r2)
200860c8:	003fe606 	br	20086064 <__flash_rwdata_start+0xffff4734>

200860cc <_Bfree>:
200860cc:	28000826 	beq	r5,zero,200860f0 <_Bfree+0x24>
200860d0:	28c00117 	ldw	r3,4(r5)
200860d4:	20801317 	ldw	r2,76(r4)
200860d8:	18c7883a 	add	r3,r3,r3
200860dc:	18c7883a 	add	r3,r3,r3
200860e0:	10c5883a 	add	r2,r2,r3
200860e4:	10c00017 	ldw	r3,0(r2)
200860e8:	28c00015 	stw	r3,0(r5)
200860ec:	11400015 	stw	r5,0(r2)
200860f0:	f800283a 	ret

200860f4 <__multadd>:
200860f4:	defffa04 	addi	sp,sp,-24
200860f8:	dc000115 	stw	r16,4(sp)
200860fc:	2c000417 	ldw	r16,16(r5)
20086100:	dc800315 	stw	r18,12(sp)
20086104:	dc400215 	stw	r17,8(sp)
20086108:	dfc00515 	stw	ra,20(sp)
2008610c:	dcc00415 	stw	r19,16(sp)
20086110:	2823883a 	mov	r17,r5
20086114:	2025883a 	mov	r18,r4
20086118:	2a400504 	addi	r9,r5,20
2008611c:	0015883a 	mov	r10,zero
20086120:	4a000017 	ldw	r8,0(r9)
20086124:	4a400104 	addi	r9,r9,4
20086128:	52800044 	addi	r10,r10,1
2008612c:	40ffffcc 	andi	r3,r8,65535
20086130:	1987383a 	mul	r3,r3,r6
20086134:	4010d43a 	srli	r8,r8,16
20086138:	19cf883a 	add	r7,r3,r7
2008613c:	4191383a 	mul	r8,r8,r6
20086140:	3816d43a 	srli	r11,r7,16
20086144:	38ffffcc 	andi	r3,r7,65535
20086148:	5a0f883a 	add	r7,r11,r8
2008614c:	3810943a 	slli	r8,r7,16
20086150:	380ed43a 	srli	r7,r7,16
20086154:	40c7883a 	add	r3,r8,r3
20086158:	48ffff15 	stw	r3,-4(r9)
2008615c:	543ff016 	blt	r10,r16,20086120 <__flash_rwdata_start+0xffff47f0>
20086160:	38000926 	beq	r7,zero,20086188 <__multadd+0x94>
20086164:	88800217 	ldw	r2,8(r17)
20086168:	80800f0e 	bge	r16,r2,200861a8 <__multadd+0xb4>
2008616c:	80800144 	addi	r2,r16,5
20086170:	1085883a 	add	r2,r2,r2
20086174:	1085883a 	add	r2,r2,r2
20086178:	8885883a 	add	r2,r17,r2
2008617c:	11c00015 	stw	r7,0(r2)
20086180:	84000044 	addi	r16,r16,1
20086184:	8c000415 	stw	r16,16(r17)
20086188:	8805883a 	mov	r2,r17
2008618c:	dfc00517 	ldw	ra,20(sp)
20086190:	dcc00417 	ldw	r19,16(sp)
20086194:	dc800317 	ldw	r18,12(sp)
20086198:	dc400217 	ldw	r17,8(sp)
2008619c:	dc000117 	ldw	r16,4(sp)
200861a0:	dec00604 	addi	sp,sp,24
200861a4:	f800283a 	ret
200861a8:	89400117 	ldw	r5,4(r17)
200861ac:	9009883a 	mov	r4,r18
200861b0:	d9c00015 	stw	r7,0(sp)
200861b4:	29400044 	addi	r5,r5,1
200861b8:	00860240 	call	20086024 <_Balloc>
200861bc:	89800417 	ldw	r6,16(r17)
200861c0:	11000304 	addi	r4,r2,12
200861c4:	89400304 	addi	r5,r17,12
200861c8:	31800084 	addi	r6,r6,2
200861cc:	318d883a 	add	r6,r6,r6
200861d0:	318d883a 	add	r6,r6,r6
200861d4:	1027883a 	mov	r19,r2
200861d8:	0085c6c0 	call	20085c6c <memcpy>
200861dc:	d9c00017 	ldw	r7,0(sp)
200861e0:	88000a26 	beq	r17,zero,2008620c <__multadd+0x118>
200861e4:	89000117 	ldw	r4,4(r17)
200861e8:	90c01317 	ldw	r3,76(r18)
200861ec:	2109883a 	add	r4,r4,r4
200861f0:	2109883a 	add	r4,r4,r4
200861f4:	1907883a 	add	r3,r3,r4
200861f8:	18800017 	ldw	r2,0(r3)
200861fc:	88800015 	stw	r2,0(r17)
20086200:	1c400015 	stw	r17,0(r3)
20086204:	9823883a 	mov	r17,r19
20086208:	003fd806 	br	2008616c <__flash_rwdata_start+0xffff483c>
2008620c:	9823883a 	mov	r17,r19
20086210:	003fd606 	br	2008616c <__flash_rwdata_start+0xffff483c>

20086214 <__s2b>:
20086214:	defff904 	addi	sp,sp,-28
20086218:	dc400115 	stw	r17,4(sp)
2008621c:	dc000015 	stw	r16,0(sp)
20086220:	2023883a 	mov	r17,r4
20086224:	2821883a 	mov	r16,r5
20086228:	39000204 	addi	r4,r7,8
2008622c:	01400244 	movi	r5,9
20086230:	dcc00315 	stw	r19,12(sp)
20086234:	dc800215 	stw	r18,8(sp)
20086238:	dfc00615 	stw	ra,24(sp)
2008623c:	dd400515 	stw	r21,20(sp)
20086240:	dd000415 	stw	r20,16(sp)
20086244:	3825883a 	mov	r18,r7
20086248:	3027883a 	mov	r19,r6
2008624c:	008a0f80 	call	2008a0f8 <__divsi3>
20086250:	00c00044 	movi	r3,1
20086254:	000b883a 	mov	r5,zero
20086258:	1880030e 	bge	r3,r2,20086268 <__s2b+0x54>
2008625c:	18c7883a 	add	r3,r3,r3
20086260:	29400044 	addi	r5,r5,1
20086264:	18bffd16 	blt	r3,r2,2008625c <__flash_rwdata_start+0xffff492c>
20086268:	8809883a 	mov	r4,r17
2008626c:	00860240 	call	20086024 <_Balloc>
20086270:	d8c00717 	ldw	r3,28(sp)
20086274:	10c00515 	stw	r3,20(r2)
20086278:	00c00044 	movi	r3,1
2008627c:	10c00415 	stw	r3,16(r2)
20086280:	00c00244 	movi	r3,9
20086284:	1cc0210e 	bge	r3,r19,2008630c <__s2b+0xf8>
20086288:	80eb883a 	add	r21,r16,r3
2008628c:	a829883a 	mov	r20,r21
20086290:	84e1883a 	add	r16,r16,r19
20086294:	a1c00007 	ldb	r7,0(r20)
20086298:	8809883a 	mov	r4,r17
2008629c:	a5000044 	addi	r20,r20,1
200862a0:	100b883a 	mov	r5,r2
200862a4:	01800284 	movi	r6,10
200862a8:	39fff404 	addi	r7,r7,-48
200862ac:	00860f40 	call	200860f4 <__multadd>
200862b0:	a43ff81e 	bne	r20,r16,20086294 <__flash_rwdata_start+0xffff4964>
200862b4:	ace1883a 	add	r16,r21,r19
200862b8:	843ffe04 	addi	r16,r16,-8
200862bc:	9c800a0e 	bge	r19,r18,200862e8 <__s2b+0xd4>
200862c0:	94e5c83a 	sub	r18,r18,r19
200862c4:	84a5883a 	add	r18,r16,r18
200862c8:	81c00007 	ldb	r7,0(r16)
200862cc:	8809883a 	mov	r4,r17
200862d0:	84000044 	addi	r16,r16,1
200862d4:	100b883a 	mov	r5,r2
200862d8:	01800284 	movi	r6,10
200862dc:	39fff404 	addi	r7,r7,-48
200862e0:	00860f40 	call	200860f4 <__multadd>
200862e4:	84bff81e 	bne	r16,r18,200862c8 <__flash_rwdata_start+0xffff4998>
200862e8:	dfc00617 	ldw	ra,24(sp)
200862ec:	dd400517 	ldw	r21,20(sp)
200862f0:	dd000417 	ldw	r20,16(sp)
200862f4:	dcc00317 	ldw	r19,12(sp)
200862f8:	dc800217 	ldw	r18,8(sp)
200862fc:	dc400117 	ldw	r17,4(sp)
20086300:	dc000017 	ldw	r16,0(sp)
20086304:	dec00704 	addi	sp,sp,28
20086308:	f800283a 	ret
2008630c:	84000284 	addi	r16,r16,10
20086310:	1827883a 	mov	r19,r3
20086314:	003fe906 	br	200862bc <__flash_rwdata_start+0xffff498c>

20086318 <__hi0bits>:
20086318:	20bfffec 	andhi	r2,r4,65535
2008631c:	1000141e 	bne	r2,zero,20086370 <__hi0bits+0x58>
20086320:	2008943a 	slli	r4,r4,16
20086324:	00800404 	movi	r2,16
20086328:	20ffc02c 	andhi	r3,r4,65280
2008632c:	1800021e 	bne	r3,zero,20086338 <__hi0bits+0x20>
20086330:	2008923a 	slli	r4,r4,8
20086334:	10800204 	addi	r2,r2,8
20086338:	20fc002c 	andhi	r3,r4,61440
2008633c:	1800021e 	bne	r3,zero,20086348 <__hi0bits+0x30>
20086340:	2008913a 	slli	r4,r4,4
20086344:	10800104 	addi	r2,r2,4
20086348:	20f0002c 	andhi	r3,r4,49152
2008634c:	1800031e 	bne	r3,zero,2008635c <__hi0bits+0x44>
20086350:	2109883a 	add	r4,r4,r4
20086354:	10800084 	addi	r2,r2,2
20086358:	2109883a 	add	r4,r4,r4
2008635c:	20000316 	blt	r4,zero,2008636c <__hi0bits+0x54>
20086360:	2110002c 	andhi	r4,r4,16384
20086364:	2000041e 	bne	r4,zero,20086378 <__hi0bits+0x60>
20086368:	00800804 	movi	r2,32
2008636c:	f800283a 	ret
20086370:	0005883a 	mov	r2,zero
20086374:	003fec06 	br	20086328 <__flash_rwdata_start+0xffff49f8>
20086378:	10800044 	addi	r2,r2,1
2008637c:	f800283a 	ret

20086380 <__lo0bits>:
20086380:	20c00017 	ldw	r3,0(r4)
20086384:	188001cc 	andi	r2,r3,7
20086388:	10000826 	beq	r2,zero,200863ac <__lo0bits+0x2c>
2008638c:	1880004c 	andi	r2,r3,1
20086390:	1000211e 	bne	r2,zero,20086418 <__lo0bits+0x98>
20086394:	1880008c 	andi	r2,r3,2
20086398:	1000211e 	bne	r2,zero,20086420 <__lo0bits+0xa0>
2008639c:	1806d0ba 	srli	r3,r3,2
200863a0:	00800084 	movi	r2,2
200863a4:	20c00015 	stw	r3,0(r4)
200863a8:	f800283a 	ret
200863ac:	18bfffcc 	andi	r2,r3,65535
200863b0:	10001326 	beq	r2,zero,20086400 <__lo0bits+0x80>
200863b4:	0005883a 	mov	r2,zero
200863b8:	19403fcc 	andi	r5,r3,255
200863bc:	2800021e 	bne	r5,zero,200863c8 <__lo0bits+0x48>
200863c0:	1806d23a 	srli	r3,r3,8
200863c4:	10800204 	addi	r2,r2,8
200863c8:	194003cc 	andi	r5,r3,15
200863cc:	2800021e 	bne	r5,zero,200863d8 <__lo0bits+0x58>
200863d0:	1806d13a 	srli	r3,r3,4
200863d4:	10800104 	addi	r2,r2,4
200863d8:	194000cc 	andi	r5,r3,3
200863dc:	2800021e 	bne	r5,zero,200863e8 <__lo0bits+0x68>
200863e0:	1806d0ba 	srli	r3,r3,2
200863e4:	10800084 	addi	r2,r2,2
200863e8:	1940004c 	andi	r5,r3,1
200863ec:	2800081e 	bne	r5,zero,20086410 <__lo0bits+0x90>
200863f0:	1806d07a 	srli	r3,r3,1
200863f4:	1800051e 	bne	r3,zero,2008640c <__lo0bits+0x8c>
200863f8:	00800804 	movi	r2,32
200863fc:	f800283a 	ret
20086400:	1806d43a 	srli	r3,r3,16
20086404:	00800404 	movi	r2,16
20086408:	003feb06 	br	200863b8 <__flash_rwdata_start+0xffff4a88>
2008640c:	10800044 	addi	r2,r2,1
20086410:	20c00015 	stw	r3,0(r4)
20086414:	f800283a 	ret
20086418:	0005883a 	mov	r2,zero
2008641c:	f800283a 	ret
20086420:	1806d07a 	srli	r3,r3,1
20086424:	00800044 	movi	r2,1
20086428:	20c00015 	stw	r3,0(r4)
2008642c:	f800283a 	ret

20086430 <__i2b>:
20086430:	defffd04 	addi	sp,sp,-12
20086434:	dc000015 	stw	r16,0(sp)
20086438:	04000044 	movi	r16,1
2008643c:	dc400115 	stw	r17,4(sp)
20086440:	2823883a 	mov	r17,r5
20086444:	800b883a 	mov	r5,r16
20086448:	dfc00215 	stw	ra,8(sp)
2008644c:	00860240 	call	20086024 <_Balloc>
20086450:	14400515 	stw	r17,20(r2)
20086454:	14000415 	stw	r16,16(r2)
20086458:	dfc00217 	ldw	ra,8(sp)
2008645c:	dc400117 	ldw	r17,4(sp)
20086460:	dc000017 	ldw	r16,0(sp)
20086464:	dec00304 	addi	sp,sp,12
20086468:	f800283a 	ret

2008646c <__multiply>:
2008646c:	defffa04 	addi	sp,sp,-24
20086470:	dcc00315 	stw	r19,12(sp)
20086474:	dc800215 	stw	r18,8(sp)
20086478:	2cc00417 	ldw	r19,16(r5)
2008647c:	34800417 	ldw	r18,16(r6)
20086480:	dd000415 	stw	r20,16(sp)
20086484:	dc400115 	stw	r17,4(sp)
20086488:	dfc00515 	stw	ra,20(sp)
2008648c:	dc000015 	stw	r16,0(sp)
20086490:	2829883a 	mov	r20,r5
20086494:	3023883a 	mov	r17,r6
20086498:	9c807016 	blt	r19,r18,2008665c <__multiply+0x1f0>
2008649c:	9005883a 	mov	r2,r18
200864a0:	9825883a 	mov	r18,r19
200864a4:	1027883a 	mov	r19,r2
200864a8:	a0800217 	ldw	r2,8(r20)
200864ac:	94e1883a 	add	r16,r18,r19
200864b0:	a1400117 	ldw	r5,4(r20)
200864b4:	1400010e 	bge	r2,r16,200864bc <__multiply+0x50>
200864b8:	29400044 	addi	r5,r5,1
200864bc:	00860240 	call	20086024 <_Balloc>
200864c0:	8417883a 	add	r11,r16,r16
200864c4:	13000504 	addi	r12,r2,20
200864c8:	5ad7883a 	add	r11,r11,r11
200864cc:	62d7883a 	add	r11,r12,r11
200864d0:	6007883a 	mov	r3,r12
200864d4:	62c0032e 	bgeu	r12,r11,200864e4 <__multiply+0x78>
200864d8:	18000015 	stw	zero,0(r3)
200864dc:	18c00104 	addi	r3,r3,4
200864e0:	1afffd36 	bltu	r3,r11,200864d8 <__flash_rwdata_start+0xffff4ba8>
200864e4:	9ce7883a 	add	r19,r19,r19
200864e8:	94a5883a 	add	r18,r18,r18
200864ec:	89800504 	addi	r6,r17,20
200864f0:	9ce7883a 	add	r19,r19,r19
200864f4:	a3800504 	addi	r14,r20,20
200864f8:	94a5883a 	add	r18,r18,r18
200864fc:	34db883a 	add	r13,r6,r19
20086500:	7495883a 	add	r10,r14,r18
20086504:	3340422e 	bgeu	r6,r13,20086610 <__multiply+0x1a4>
20086508:	34400017 	ldw	r17,0(r6)
2008650c:	8cbfffcc 	andi	r18,r17,65535
20086510:	90001b26 	beq	r18,zero,20086580 <__multiply+0x114>
20086514:	6013883a 	mov	r9,r12
20086518:	7023883a 	mov	r17,r14
2008651c:	0011883a 	mov	r8,zero
20086520:	88c00017 	ldw	r3,0(r17)
20086524:	4bc00017 	ldw	r15,0(r9)
20086528:	8c400104 	addi	r17,r17,4
2008652c:	19ffffcc 	andi	r7,r3,65535
20086530:	3c8f383a 	mul	r7,r7,r18
20086534:	1808d43a 	srli	r4,r3,16
20086538:	797fffcc 	andi	r5,r15,65535
2008653c:	29cb883a 	add	r5,r5,r7
20086540:	2a0b883a 	add	r5,r5,r8
20086544:	2489383a 	mul	r4,r4,r18
20086548:	7806d43a 	srli	r3,r15,16
2008654c:	2810d43a 	srli	r8,r5,16
20086550:	297fffcc 	andi	r5,r5,65535
20086554:	1907883a 	add	r3,r3,r4
20086558:	1a07883a 	add	r3,r3,r8
2008655c:	1808943a 	slli	r4,r3,16
20086560:	480f883a 	mov	r7,r9
20086564:	1810d43a 	srli	r8,r3,16
20086568:	214ab03a 	or	r5,r4,r5
2008656c:	49400015 	stw	r5,0(r9)
20086570:	4a400104 	addi	r9,r9,4
20086574:	8abfea36 	bltu	r17,r10,20086520 <__flash_rwdata_start+0xffff4bf0>
20086578:	3a000115 	stw	r8,4(r7)
2008657c:	34400017 	ldw	r17,0(r6)
20086580:	8822d43a 	srli	r17,r17,16
20086584:	88001f26 	beq	r17,zero,20086604 <__multiply+0x198>
20086588:	60c00017 	ldw	r3,0(r12)
2008658c:	7013883a 	mov	r9,r14
20086590:	601f883a 	mov	r15,r12
20086594:	1811883a 	mov	r8,r3
20086598:	6027883a 	mov	r19,r12
2008659c:	000f883a 	mov	r7,zero
200865a0:	00000106 	br	200865a8 <__multiply+0x13c>
200865a4:	9027883a 	mov	r19,r18
200865a8:	4940000b 	ldhu	r5,0(r9)
200865ac:	4010d43a 	srli	r8,r8,16
200865b0:	193fffcc 	andi	r4,r3,65535
200865b4:	2c4b383a 	mul	r5,r5,r17
200865b8:	7bc00104 	addi	r15,r15,4
200865bc:	4a400104 	addi	r9,r9,4
200865c0:	2a0b883a 	add	r5,r5,r8
200865c4:	29cb883a 	add	r5,r5,r7
200865c8:	2806943a 	slli	r3,r5,16
200865cc:	9c800104 	addi	r18,r19,4
200865d0:	280ad43a 	srli	r5,r5,16
200865d4:	1908b03a 	or	r4,r3,r4
200865d8:	793fff15 	stw	r4,-4(r15)
200865dc:	48ffff17 	ldw	r3,-4(r9)
200865e0:	92000017 	ldw	r8,0(r18)
200865e4:	1806d43a 	srli	r3,r3,16
200865e8:	413fffcc 	andi	r4,r8,65535
200865ec:	1c47383a 	mul	r3,r3,r17
200865f0:	1907883a 	add	r3,r3,r4
200865f4:	1947883a 	add	r3,r3,r5
200865f8:	180ed43a 	srli	r7,r3,16
200865fc:	4abfe936 	bltu	r9,r10,200865a4 <__flash_rwdata_start+0xffff4c74>
20086600:	98c00115 	stw	r3,4(r19)
20086604:	31800104 	addi	r6,r6,4
20086608:	63000104 	addi	r12,r12,4
2008660c:	337fbe36 	bltu	r6,r13,20086508 <__flash_rwdata_start+0xffff4bd8>
20086610:	0400090e 	bge	zero,r16,20086638 <__multiply+0x1cc>
20086614:	58ffff17 	ldw	r3,-4(r11)
20086618:	5affff04 	addi	r11,r11,-4
2008661c:	18000326 	beq	r3,zero,2008662c <__multiply+0x1c0>
20086620:	00000506 	br	20086638 <__multiply+0x1cc>
20086624:	58c00017 	ldw	r3,0(r11)
20086628:	1800031e 	bne	r3,zero,20086638 <__multiply+0x1cc>
2008662c:	843fffc4 	addi	r16,r16,-1
20086630:	5affff04 	addi	r11,r11,-4
20086634:	803ffb1e 	bne	r16,zero,20086624 <__flash_rwdata_start+0xffff4cf4>
20086638:	14000415 	stw	r16,16(r2)
2008663c:	dfc00517 	ldw	ra,20(sp)
20086640:	dd000417 	ldw	r20,16(sp)
20086644:	dcc00317 	ldw	r19,12(sp)
20086648:	dc800217 	ldw	r18,8(sp)
2008664c:	dc400117 	ldw	r17,4(sp)
20086650:	dc000017 	ldw	r16,0(sp)
20086654:	dec00604 	addi	sp,sp,24
20086658:	f800283a 	ret
2008665c:	3029883a 	mov	r20,r6
20086660:	2823883a 	mov	r17,r5
20086664:	003f9006 	br	200864a8 <__flash_rwdata_start+0xffff4b78>

20086668 <__pow5mult>:
20086668:	defffa04 	addi	sp,sp,-24
2008666c:	dcc00315 	stw	r19,12(sp)
20086670:	dc800215 	stw	r18,8(sp)
20086674:	dc000015 	stw	r16,0(sp)
20086678:	dfc00515 	stw	ra,20(sp)
2008667c:	dd000415 	stw	r20,16(sp)
20086680:	dc400115 	stw	r17,4(sp)
20086684:	308000cc 	andi	r2,r6,3
20086688:	3021883a 	mov	r16,r6
2008668c:	2027883a 	mov	r19,r4
20086690:	2825883a 	mov	r18,r5
20086694:	10002e1e 	bne	r2,zero,20086750 <__pow5mult+0xe8>
20086698:	8021d0ba 	srai	r16,r16,2
2008669c:	80001a26 	beq	r16,zero,20086708 <__pow5mult+0xa0>
200866a0:	9c401217 	ldw	r17,72(r19)
200866a4:	8800061e 	bne	r17,zero,200866c0 <__pow5mult+0x58>
200866a8:	00003406 	br	2008677c <__pow5mult+0x114>
200866ac:	8021d07a 	srai	r16,r16,1
200866b0:	80001526 	beq	r16,zero,20086708 <__pow5mult+0xa0>
200866b4:	88800017 	ldw	r2,0(r17)
200866b8:	10001c26 	beq	r2,zero,2008672c <__pow5mult+0xc4>
200866bc:	1023883a 	mov	r17,r2
200866c0:	80c0004c 	andi	r3,r16,1
200866c4:	183ff926 	beq	r3,zero,200866ac <__flash_rwdata_start+0xffff4d7c>
200866c8:	900b883a 	mov	r5,r18
200866cc:	880d883a 	mov	r6,r17
200866d0:	9809883a 	mov	r4,r19
200866d4:	008646c0 	call	2008646c <__multiply>
200866d8:	90001b26 	beq	r18,zero,20086748 <__pow5mult+0xe0>
200866dc:	91c00117 	ldw	r7,4(r18)
200866e0:	98c01317 	ldw	r3,76(r19)
200866e4:	8021d07a 	srai	r16,r16,1
200866e8:	39cf883a 	add	r7,r7,r7
200866ec:	39cf883a 	add	r7,r7,r7
200866f0:	19c7883a 	add	r3,r3,r7
200866f4:	19000017 	ldw	r4,0(r3)
200866f8:	91000015 	stw	r4,0(r18)
200866fc:	1c800015 	stw	r18,0(r3)
20086700:	1025883a 	mov	r18,r2
20086704:	803feb1e 	bne	r16,zero,200866b4 <__flash_rwdata_start+0xffff4d84>
20086708:	9005883a 	mov	r2,r18
2008670c:	dfc00517 	ldw	ra,20(sp)
20086710:	dd000417 	ldw	r20,16(sp)
20086714:	dcc00317 	ldw	r19,12(sp)
20086718:	dc800217 	ldw	r18,8(sp)
2008671c:	dc400117 	ldw	r17,4(sp)
20086720:	dc000017 	ldw	r16,0(sp)
20086724:	dec00604 	addi	sp,sp,24
20086728:	f800283a 	ret
2008672c:	9809883a 	mov	r4,r19
20086730:	880b883a 	mov	r5,r17
20086734:	880d883a 	mov	r6,r17
20086738:	008646c0 	call	2008646c <__multiply>
2008673c:	88800015 	stw	r2,0(r17)
20086740:	10000015 	stw	zero,0(r2)
20086744:	003fdd06 	br	200866bc <__flash_rwdata_start+0xffff4d8c>
20086748:	1025883a 	mov	r18,r2
2008674c:	003fd706 	br	200866ac <__flash_rwdata_start+0xffff4d7c>
20086750:	10bfffc4 	addi	r2,r2,-1
20086754:	1085883a 	add	r2,r2,r2
20086758:	00c00034 	movhi	r3,0
2008675c:	18c03b04 	addi	r3,r3,236
20086760:	1085883a 	add	r2,r2,r2
20086764:	1885883a 	add	r2,r3,r2
20086768:	11800017 	ldw	r6,0(r2)
2008676c:	000f883a 	mov	r7,zero
20086770:	00860f40 	call	200860f4 <__multadd>
20086774:	1025883a 	mov	r18,r2
20086778:	003fc706 	br	20086698 <__flash_rwdata_start+0xffff4d68>
2008677c:	05000044 	movi	r20,1
20086780:	9809883a 	mov	r4,r19
20086784:	a00b883a 	mov	r5,r20
20086788:	00860240 	call	20086024 <_Balloc>
2008678c:	1023883a 	mov	r17,r2
20086790:	00809c44 	movi	r2,625
20086794:	88800515 	stw	r2,20(r17)
20086798:	8d000415 	stw	r20,16(r17)
2008679c:	9c401215 	stw	r17,72(r19)
200867a0:	88000015 	stw	zero,0(r17)
200867a4:	003fc606 	br	200866c0 <__flash_rwdata_start+0xffff4d90>

200867a8 <__lshift>:
200867a8:	defff904 	addi	sp,sp,-28
200867ac:	dd000415 	stw	r20,16(sp)
200867b0:	dcc00315 	stw	r19,12(sp)
200867b4:	3029d17a 	srai	r20,r6,5
200867b8:	2cc00417 	ldw	r19,16(r5)
200867bc:	28800217 	ldw	r2,8(r5)
200867c0:	dd400515 	stw	r21,20(sp)
200867c4:	a4e7883a 	add	r19,r20,r19
200867c8:	dc800215 	stw	r18,8(sp)
200867cc:	dc400115 	stw	r17,4(sp)
200867d0:	dc000015 	stw	r16,0(sp)
200867d4:	dfc00615 	stw	ra,24(sp)
200867d8:	9c000044 	addi	r16,r19,1
200867dc:	2823883a 	mov	r17,r5
200867e0:	302b883a 	mov	r21,r6
200867e4:	2025883a 	mov	r18,r4
200867e8:	29400117 	ldw	r5,4(r5)
200867ec:	1400030e 	bge	r2,r16,200867fc <__lshift+0x54>
200867f0:	1085883a 	add	r2,r2,r2
200867f4:	29400044 	addi	r5,r5,1
200867f8:	143ffd16 	blt	r2,r16,200867f0 <__flash_rwdata_start+0xffff4ec0>
200867fc:	9009883a 	mov	r4,r18
20086800:	00860240 	call	20086024 <_Balloc>
20086804:	11c00504 	addi	r7,r2,20
20086808:	0500090e 	bge	zero,r20,20086830 <__lshift+0x88>
2008680c:	3811883a 	mov	r8,r7
20086810:	0007883a 	mov	r3,zero
20086814:	40000015 	stw	zero,0(r8)
20086818:	18c00044 	addi	r3,r3,1
2008681c:	42000104 	addi	r8,r8,4
20086820:	1d3ffc1e 	bne	r3,r20,20086814 <__flash_rwdata_start+0xffff4ee4>
20086824:	18c7883a 	add	r3,r3,r3
20086828:	18c7883a 	add	r3,r3,r3
2008682c:	38cf883a 	add	r7,r7,r3
20086830:	89000417 	ldw	r4,16(r17)
20086834:	88c00504 	addi	r3,r17,20
20086838:	a98007cc 	andi	r6,r21,31
2008683c:	2109883a 	add	r4,r4,r4
20086840:	2109883a 	add	r4,r4,r4
20086844:	1909883a 	add	r4,r3,r4
20086848:	30002326 	beq	r6,zero,200868d8 <__lshift+0x130>
2008684c:	01400804 	movi	r5,32
20086850:	298bc83a 	sub	r5,r5,r6
20086854:	0013883a 	mov	r9,zero
20086858:	1a000017 	ldw	r8,0(r3)
2008685c:	3815883a 	mov	r10,r7
20086860:	39c00104 	addi	r7,r7,4
20086864:	4190983a 	sll	r8,r8,r6
20086868:	18c00104 	addi	r3,r3,4
2008686c:	4a10b03a 	or	r8,r9,r8
20086870:	3a3fff15 	stw	r8,-4(r7)
20086874:	1a3fff17 	ldw	r8,-4(r3)
20086878:	4152d83a 	srl	r9,r8,r5
2008687c:	193ff636 	bltu	r3,r4,20086858 <__flash_rwdata_start+0xffff4f28>
20086880:	52400115 	stw	r9,4(r10)
20086884:	48001a1e 	bne	r9,zero,200868f0 <__lshift+0x148>
20086888:	843fffc4 	addi	r16,r16,-1
2008688c:	14000415 	stw	r16,16(r2)
20086890:	88000826 	beq	r17,zero,200868b4 <__lshift+0x10c>
20086894:	89000117 	ldw	r4,4(r17)
20086898:	90c01317 	ldw	r3,76(r18)
2008689c:	2109883a 	add	r4,r4,r4
200868a0:	2109883a 	add	r4,r4,r4
200868a4:	1907883a 	add	r3,r3,r4
200868a8:	19000017 	ldw	r4,0(r3)
200868ac:	89000015 	stw	r4,0(r17)
200868b0:	1c400015 	stw	r17,0(r3)
200868b4:	dfc00617 	ldw	ra,24(sp)
200868b8:	dd400517 	ldw	r21,20(sp)
200868bc:	dd000417 	ldw	r20,16(sp)
200868c0:	dcc00317 	ldw	r19,12(sp)
200868c4:	dc800217 	ldw	r18,8(sp)
200868c8:	dc400117 	ldw	r17,4(sp)
200868cc:	dc000017 	ldw	r16,0(sp)
200868d0:	dec00704 	addi	sp,sp,28
200868d4:	f800283a 	ret
200868d8:	19400017 	ldw	r5,0(r3)
200868dc:	39c00104 	addi	r7,r7,4
200868e0:	18c00104 	addi	r3,r3,4
200868e4:	397fff15 	stw	r5,-4(r7)
200868e8:	193ffb36 	bltu	r3,r4,200868d8 <__flash_rwdata_start+0xffff4fa8>
200868ec:	003fe606 	br	20086888 <__flash_rwdata_start+0xffff4f58>
200868f0:	9c000084 	addi	r16,r19,2
200868f4:	003fe406 	br	20086888 <__flash_rwdata_start+0xffff4f58>

200868f8 <__mcmp>:
200868f8:	20800417 	ldw	r2,16(r4)
200868fc:	28c00417 	ldw	r3,16(r5)
20086900:	10c5c83a 	sub	r2,r2,r3
20086904:	1000111e 	bne	r2,zero,2008694c <__mcmp+0x54>
20086908:	18c7883a 	add	r3,r3,r3
2008690c:	18c7883a 	add	r3,r3,r3
20086910:	21000504 	addi	r4,r4,20
20086914:	29400504 	addi	r5,r5,20
20086918:	20c5883a 	add	r2,r4,r3
2008691c:	28cb883a 	add	r5,r5,r3
20086920:	00000106 	br	20086928 <__mcmp+0x30>
20086924:	20800a2e 	bgeu	r4,r2,20086950 <__mcmp+0x58>
20086928:	10bfff04 	addi	r2,r2,-4
2008692c:	297fff04 	addi	r5,r5,-4
20086930:	11800017 	ldw	r6,0(r2)
20086934:	28c00017 	ldw	r3,0(r5)
20086938:	30fffa26 	beq	r6,r3,20086924 <__flash_rwdata_start+0xffff4ff4>
2008693c:	30c00236 	bltu	r6,r3,20086948 <__mcmp+0x50>
20086940:	00800044 	movi	r2,1
20086944:	f800283a 	ret
20086948:	00bfffc4 	movi	r2,-1
2008694c:	f800283a 	ret
20086950:	0005883a 	mov	r2,zero
20086954:	f800283a 	ret

20086958 <__mdiff>:
20086958:	defffb04 	addi	sp,sp,-20
2008695c:	dc000015 	stw	r16,0(sp)
20086960:	2821883a 	mov	r16,r5
20086964:	dcc00315 	stw	r19,12(sp)
20086968:	300b883a 	mov	r5,r6
2008696c:	2027883a 	mov	r19,r4
20086970:	8009883a 	mov	r4,r16
20086974:	dc800215 	stw	r18,8(sp)
20086978:	dfc00415 	stw	ra,16(sp)
2008697c:	dc400115 	stw	r17,4(sp)
20086980:	3025883a 	mov	r18,r6
20086984:	00868f80 	call	200868f8 <__mcmp>
20086988:	10005226 	beq	r2,zero,20086ad4 <__mdiff+0x17c>
2008698c:	10004c16 	blt	r2,zero,20086ac0 <__mdiff+0x168>
20086990:	0023883a 	mov	r17,zero
20086994:	81400117 	ldw	r5,4(r16)
20086998:	9809883a 	mov	r4,r19
2008699c:	00860240 	call	20086024 <_Balloc>
200869a0:	83400417 	ldw	r13,16(r16)
200869a4:	93800417 	ldw	r14,16(r18)
200869a8:	81000504 	addi	r4,r16,20
200869ac:	6b59883a 	add	r12,r13,r13
200869b0:	739d883a 	add	r14,r14,r14
200869b4:	6319883a 	add	r12,r12,r12
200869b8:	91800504 	addi	r6,r18,20
200869bc:	739d883a 	add	r14,r14,r14
200869c0:	14400315 	stw	r17,12(r2)
200869c4:	2319883a 	add	r12,r4,r12
200869c8:	339d883a 	add	r14,r6,r14
200869cc:	12400504 	addi	r9,r2,20
200869d0:	0007883a 	mov	r3,zero
200869d4:	22000017 	ldw	r8,0(r4)
200869d8:	32800017 	ldw	r10,0(r6)
200869dc:	4ac00104 	addi	r11,r9,4
200869e0:	41ffffcc 	andi	r7,r8,65535
200869e4:	38c7883a 	add	r3,r7,r3
200869e8:	51ffffcc 	andi	r7,r10,65535
200869ec:	19cfc83a 	sub	r7,r3,r7
200869f0:	4010d43a 	srli	r8,r8,16
200869f4:	5014d43a 	srli	r10,r10,16
200869f8:	3807d43a 	srai	r3,r7,16
200869fc:	39ffffcc 	andi	r7,r7,65535
20086a00:	4291c83a 	sub	r8,r8,r10
20086a04:	40c7883a 	add	r3,r8,r3
20086a08:	1810943a 	slli	r8,r3,16
20086a0c:	31800104 	addi	r6,r6,4
20086a10:	21000104 	addi	r4,r4,4
20086a14:	41ceb03a 	or	r7,r8,r7
20086a18:	49c00015 	stw	r7,0(r9)
20086a1c:	1807d43a 	srai	r3,r3,16
20086a20:	580b883a 	mov	r5,r11
20086a24:	5813883a 	mov	r9,r11
20086a28:	33bfea36 	bltu	r6,r14,200869d4 <__flash_rwdata_start+0xffff50a4>
20086a2c:	2011883a 	mov	r8,r4
20086a30:	2300152e 	bgeu	r4,r12,20086a88 <__mdiff+0x130>
20086a34:	21400017 	ldw	r5,0(r4)
20086a38:	4a400104 	addi	r9,r9,4
20086a3c:	21000104 	addi	r4,r4,4
20086a40:	29ffffcc 	andi	r7,r5,65535
20086a44:	38c7883a 	add	r3,r7,r3
20086a48:	280ad43a 	srli	r5,r5,16
20086a4c:	180dd43a 	srai	r6,r3,16
20086a50:	19ffffcc 	andi	r7,r3,65535
20086a54:	3147883a 	add	r3,r6,r5
20086a58:	180a943a 	slli	r5,r3,16
20086a5c:	1807d43a 	srai	r3,r3,16
20086a60:	29ceb03a 	or	r7,r5,r7
20086a64:	49ffff15 	stw	r7,-4(r9)
20086a68:	233ff236 	bltu	r4,r12,20086a34 <__flash_rwdata_start+0xffff5104>
20086a6c:	0206303a 	nor	r3,zero,r8
20086a70:	1b07883a 	add	r3,r3,r12
20086a74:	1806d0ba 	srli	r3,r3,2
20086a78:	18c00044 	addi	r3,r3,1
20086a7c:	18c7883a 	add	r3,r3,r3
20086a80:	18c7883a 	add	r3,r3,r3
20086a84:	58cb883a 	add	r5,r11,r3
20086a88:	28ffff04 	addi	r3,r5,-4
20086a8c:	3800041e 	bne	r7,zero,20086aa0 <__mdiff+0x148>
20086a90:	18ffff04 	addi	r3,r3,-4
20086a94:	19000017 	ldw	r4,0(r3)
20086a98:	6b7fffc4 	addi	r13,r13,-1
20086a9c:	203ffc26 	beq	r4,zero,20086a90 <__flash_rwdata_start+0xffff5160>
20086aa0:	13400415 	stw	r13,16(r2)
20086aa4:	dfc00417 	ldw	ra,16(sp)
20086aa8:	dcc00317 	ldw	r19,12(sp)
20086aac:	dc800217 	ldw	r18,8(sp)
20086ab0:	dc400117 	ldw	r17,4(sp)
20086ab4:	dc000017 	ldw	r16,0(sp)
20086ab8:	dec00504 	addi	sp,sp,20
20086abc:	f800283a 	ret
20086ac0:	8005883a 	mov	r2,r16
20086ac4:	04400044 	movi	r17,1
20086ac8:	9021883a 	mov	r16,r18
20086acc:	1025883a 	mov	r18,r2
20086ad0:	003fb006 	br	20086994 <__flash_rwdata_start+0xffff5064>
20086ad4:	9809883a 	mov	r4,r19
20086ad8:	000b883a 	mov	r5,zero
20086adc:	00860240 	call	20086024 <_Balloc>
20086ae0:	00c00044 	movi	r3,1
20086ae4:	10c00415 	stw	r3,16(r2)
20086ae8:	10000515 	stw	zero,20(r2)
20086aec:	003fed06 	br	20086aa4 <__flash_rwdata_start+0xffff5174>

20086af0 <__ulp>:
20086af0:	295ffc2c 	andhi	r5,r5,32752
20086af4:	00bf3034 	movhi	r2,64704
20086af8:	2887883a 	add	r3,r5,r2
20086afc:	00c0020e 	bge	zero,r3,20086b08 <__ulp+0x18>
20086b00:	0005883a 	mov	r2,zero
20086b04:	f800283a 	ret
20086b08:	00c7c83a 	sub	r3,zero,r3
20086b0c:	180bd53a 	srai	r5,r3,20
20086b10:	008004c4 	movi	r2,19
20086b14:	11400a0e 	bge	r2,r5,20086b40 <__ulp+0x50>
20086b18:	00800c84 	movi	r2,50
20086b1c:	0007883a 	mov	r3,zero
20086b20:	11400516 	blt	r2,r5,20086b38 <__ulp+0x48>
20086b24:	00800cc4 	movi	r2,51
20086b28:	114bc83a 	sub	r5,r2,r5
20086b2c:	00800044 	movi	r2,1
20086b30:	1144983a 	sll	r2,r2,r5
20086b34:	f800283a 	ret
20086b38:	00800044 	movi	r2,1
20086b3c:	f800283a 	ret
20086b40:	00800234 	movhi	r2,8
20086b44:	1147d83a 	sra	r3,r2,r5
20086b48:	0005883a 	mov	r2,zero
20086b4c:	f800283a 	ret

20086b50 <__b2d>:
20086b50:	defffa04 	addi	sp,sp,-24
20086b54:	dc000015 	stw	r16,0(sp)
20086b58:	24000417 	ldw	r16,16(r4)
20086b5c:	dc400115 	stw	r17,4(sp)
20086b60:	24400504 	addi	r17,r4,20
20086b64:	8421883a 	add	r16,r16,r16
20086b68:	8421883a 	add	r16,r16,r16
20086b6c:	8c21883a 	add	r16,r17,r16
20086b70:	dc800215 	stw	r18,8(sp)
20086b74:	84bfff17 	ldw	r18,-4(r16)
20086b78:	dd000415 	stw	r20,16(sp)
20086b7c:	dcc00315 	stw	r19,12(sp)
20086b80:	9009883a 	mov	r4,r18
20086b84:	2829883a 	mov	r20,r5
20086b88:	dfc00515 	stw	ra,20(sp)
20086b8c:	00863180 	call	20086318 <__hi0bits>
20086b90:	00c00804 	movi	r3,32
20086b94:	1887c83a 	sub	r3,r3,r2
20086b98:	a0c00015 	stw	r3,0(r20)
20086b9c:	00c00284 	movi	r3,10
20086ba0:	84ffff04 	addi	r19,r16,-4
20086ba4:	18801216 	blt	r3,r2,20086bf0 <__b2d+0xa0>
20086ba8:	014002c4 	movi	r5,11
20086bac:	2889c83a 	sub	r4,r5,r2
20086bb0:	9106d83a 	srl	r3,r18,r4
20086bb4:	18cffc34 	orhi	r3,r3,16368
20086bb8:	8cc0282e 	bgeu	r17,r19,20086c5c <__b2d+0x10c>
20086bbc:	817ffe17 	ldw	r5,-8(r16)
20086bc0:	290ad83a 	srl	r5,r5,r4
20086bc4:	10800544 	addi	r2,r2,21
20086bc8:	9084983a 	sll	r2,r18,r2
20086bcc:	2884b03a 	or	r2,r5,r2
20086bd0:	dfc00517 	ldw	ra,20(sp)
20086bd4:	dd000417 	ldw	r20,16(sp)
20086bd8:	dcc00317 	ldw	r19,12(sp)
20086bdc:	dc800217 	ldw	r18,8(sp)
20086be0:	dc400117 	ldw	r17,4(sp)
20086be4:	dc000017 	ldw	r16,0(sp)
20086be8:	dec00604 	addi	sp,sp,24
20086bec:	f800283a 	ret
20086bf0:	113ffd44 	addi	r4,r2,-11
20086bf4:	8cc00f2e 	bgeu	r17,r19,20086c34 <__b2d+0xe4>
20086bf8:	81bffe04 	addi	r6,r16,-8
20086bfc:	817ffe17 	ldw	r5,-8(r16)
20086c00:	20001326 	beq	r4,zero,20086c50 <__b2d+0x100>
20086c04:	00c00ac4 	movi	r3,43
20086c08:	1885c83a 	sub	r2,r3,r2
20086c0c:	2886d83a 	srl	r3,r5,r2
20086c10:	9124983a 	sll	r18,r18,r4
20086c14:	90e4b03a 	or	r18,r18,r3
20086c18:	90cffc34 	orhi	r3,r18,16368
20086c1c:	8980112e 	bgeu	r17,r6,20086c64 <__b2d+0x114>
20086c20:	81bffd17 	ldw	r6,-12(r16)
20086c24:	308cd83a 	srl	r6,r6,r2
20086c28:	2904983a 	sll	r2,r5,r4
20086c2c:	1184b03a 	or	r2,r2,r6
20086c30:	003fe706 	br	20086bd0 <__flash_rwdata_start+0xffff52a0>
20086c34:	20000526 	beq	r4,zero,20086c4c <__b2d+0xfc>
20086c38:	9124983a 	sll	r18,r18,r4
20086c3c:	000d883a 	mov	r6,zero
20086c40:	000b883a 	mov	r5,zero
20086c44:	90cffc34 	orhi	r3,r18,16368
20086c48:	003ff706 	br	20086c28 <__flash_rwdata_start+0xffff52f8>
20086c4c:	000b883a 	mov	r5,zero
20086c50:	90cffc34 	orhi	r3,r18,16368
20086c54:	2805883a 	mov	r2,r5
20086c58:	003fdd06 	br	20086bd0 <__flash_rwdata_start+0xffff52a0>
20086c5c:	000b883a 	mov	r5,zero
20086c60:	003fd806 	br	20086bc4 <__flash_rwdata_start+0xffff5294>
20086c64:	000d883a 	mov	r6,zero
20086c68:	003fef06 	br	20086c28 <__flash_rwdata_start+0xffff52f8>

20086c6c <__d2b>:
20086c6c:	defff704 	addi	sp,sp,-36
20086c70:	dc000215 	stw	r16,8(sp)
20086c74:	3021883a 	mov	r16,r6
20086c78:	dc400315 	stw	r17,12(sp)
20086c7c:	8022907a 	slli	r17,r16,1
20086c80:	dd400715 	stw	r21,28(sp)
20086c84:	282b883a 	mov	r21,r5
20086c88:	01400044 	movi	r5,1
20086c8c:	dd000615 	stw	r20,24(sp)
20086c90:	dcc00515 	stw	r19,20(sp)
20086c94:	dc800415 	stw	r18,16(sp)
20086c98:	dfc00815 	stw	ra,32(sp)
20086c9c:	3829883a 	mov	r20,r7
20086ca0:	dc800917 	ldw	r18,36(sp)
20086ca4:	8822d57a 	srli	r17,r17,21
20086ca8:	00860240 	call	20086024 <_Balloc>
20086cac:	1027883a 	mov	r19,r2
20086cb0:	00800434 	movhi	r2,16
20086cb4:	10bfffc4 	addi	r2,r2,-1
20086cb8:	808c703a 	and	r6,r16,r2
20086cbc:	88000126 	beq	r17,zero,20086cc4 <__d2b+0x58>
20086cc0:	31800434 	orhi	r6,r6,16
20086cc4:	d9800015 	stw	r6,0(sp)
20086cc8:	a8001f26 	beq	r21,zero,20086d48 <__d2b+0xdc>
20086ccc:	d9000104 	addi	r4,sp,4
20086cd0:	dd400115 	stw	r21,4(sp)
20086cd4:	00863800 	call	20086380 <__lo0bits>
20086cd8:	d8c00017 	ldw	r3,0(sp)
20086cdc:	1000291e 	bne	r2,zero,20086d84 <__d2b+0x118>
20086ce0:	d9000117 	ldw	r4,4(sp)
20086ce4:	99000515 	stw	r4,20(r19)
20086ce8:	1820c03a 	cmpne	r16,r3,zero
20086cec:	84000044 	addi	r16,r16,1
20086cf0:	98c00615 	stw	r3,24(r19)
20086cf4:	9c000415 	stw	r16,16(r19)
20086cf8:	88001b1e 	bne	r17,zero,20086d68 <__d2b+0xfc>
20086cfc:	800690ba 	slli	r3,r16,2
20086d00:	10bef384 	addi	r2,r2,-1074
20086d04:	a0800015 	stw	r2,0(r20)
20086d08:	98c5883a 	add	r2,r19,r3
20086d0c:	11000417 	ldw	r4,16(r2)
20086d10:	8020917a 	slli	r16,r16,5
20086d14:	00863180 	call	20086318 <__hi0bits>
20086d18:	8085c83a 	sub	r2,r16,r2
20086d1c:	90800015 	stw	r2,0(r18)
20086d20:	9805883a 	mov	r2,r19
20086d24:	dfc00817 	ldw	ra,32(sp)
20086d28:	dd400717 	ldw	r21,28(sp)
20086d2c:	dd000617 	ldw	r20,24(sp)
20086d30:	dcc00517 	ldw	r19,20(sp)
20086d34:	dc800417 	ldw	r18,16(sp)
20086d38:	dc400317 	ldw	r17,12(sp)
20086d3c:	dc000217 	ldw	r16,8(sp)
20086d40:	dec00904 	addi	sp,sp,36
20086d44:	f800283a 	ret
20086d48:	d809883a 	mov	r4,sp
20086d4c:	00863800 	call	20086380 <__lo0bits>
20086d50:	d8c00017 	ldw	r3,0(sp)
20086d54:	04000044 	movi	r16,1
20086d58:	9c000415 	stw	r16,16(r19)
20086d5c:	98c00515 	stw	r3,20(r19)
20086d60:	10800804 	addi	r2,r2,32
20086d64:	883fe526 	beq	r17,zero,20086cfc <__flash_rwdata_start+0xffff53cc>
20086d68:	8c7ef344 	addi	r17,r17,-1075
20086d6c:	88a3883a 	add	r17,r17,r2
20086d70:	00c00d44 	movi	r3,53
20086d74:	a4400015 	stw	r17,0(r20)
20086d78:	1885c83a 	sub	r2,r3,r2
20086d7c:	90800015 	stw	r2,0(r18)
20086d80:	003fe706 	br	20086d20 <__flash_rwdata_start+0xffff53f0>
20086d84:	01000804 	movi	r4,32
20086d88:	2089c83a 	sub	r4,r4,r2
20086d8c:	1908983a 	sll	r4,r3,r4
20086d90:	d9400117 	ldw	r5,4(sp)
20086d94:	1886d83a 	srl	r3,r3,r2
20086d98:	2148b03a 	or	r4,r4,r5
20086d9c:	99000515 	stw	r4,20(r19)
20086da0:	d8c00015 	stw	r3,0(sp)
20086da4:	003fd006 	br	20086ce8 <__flash_rwdata_start+0xffff53b8>

20086da8 <__ratio>:
20086da8:	defff904 	addi	sp,sp,-28
20086dac:	dc400315 	stw	r17,12(sp)
20086db0:	2823883a 	mov	r17,r5
20086db4:	d9400104 	addi	r5,sp,4
20086db8:	dfc00615 	stw	ra,24(sp)
20086dbc:	dcc00515 	stw	r19,20(sp)
20086dc0:	dc800415 	stw	r18,16(sp)
20086dc4:	2027883a 	mov	r19,r4
20086dc8:	dc000215 	stw	r16,8(sp)
20086dcc:	0086b500 	call	20086b50 <__b2d>
20086dd0:	8809883a 	mov	r4,r17
20086dd4:	d80b883a 	mov	r5,sp
20086dd8:	1025883a 	mov	r18,r2
20086ddc:	1821883a 	mov	r16,r3
20086de0:	0086b500 	call	20086b50 <__b2d>
20086de4:	8a400417 	ldw	r9,16(r17)
20086de8:	9a000417 	ldw	r8,16(r19)
20086dec:	100d883a 	mov	r6,r2
20086df0:	d8800017 	ldw	r2,0(sp)
20086df4:	4251c83a 	sub	r8,r8,r9
20086df8:	4012917a 	slli	r9,r8,5
20086dfc:	da000117 	ldw	r8,4(sp)
20086e00:	4091c83a 	sub	r8,r8,r2
20086e04:	4251883a 	add	r8,r8,r9
20086e08:	02000d0e 	bge	zero,r8,20086e40 <__ratio+0x98>
20086e0c:	4010953a 	slli	r8,r8,20
20086e10:	4421883a 	add	r16,r8,r16
20086e14:	9009883a 	mov	r4,r18
20086e18:	800b883a 	mov	r5,r16
20086e1c:	180f883a 	mov	r7,r3
20086e20:	008aa540 	call	2008aa54 <__divdf3>
20086e24:	dfc00617 	ldw	ra,24(sp)
20086e28:	dcc00517 	ldw	r19,20(sp)
20086e2c:	dc800417 	ldw	r18,16(sp)
20086e30:	dc400317 	ldw	r17,12(sp)
20086e34:	dc000217 	ldw	r16,8(sp)
20086e38:	dec00704 	addi	sp,sp,28
20086e3c:	f800283a 	ret
20086e40:	4010953a 	slli	r8,r8,20
20086e44:	1a07c83a 	sub	r3,r3,r8
20086e48:	003ff206 	br	20086e14 <__flash_rwdata_start+0xffff54e4>

20086e4c <_mprec_log10>:
20086e4c:	defffe04 	addi	sp,sp,-8
20086e50:	dc000015 	stw	r16,0(sp)
20086e54:	dfc00115 	stw	ra,4(sp)
20086e58:	008005c4 	movi	r2,23
20086e5c:	2021883a 	mov	r16,r4
20086e60:	11000d0e 	bge	r2,r4,20086e98 <_mprec_log10+0x4c>
20086e64:	0005883a 	mov	r2,zero
20086e68:	00cffc34 	movhi	r3,16368
20086e6c:	843fffc4 	addi	r16,r16,-1
20086e70:	1009883a 	mov	r4,r2
20086e74:	180b883a 	mov	r5,r3
20086e78:	000d883a 	mov	r6,zero
20086e7c:	01d00934 	movhi	r7,16420
20086e80:	008b5640 	call	2008b564 <__muldf3>
20086e84:	803ff91e 	bne	r16,zero,20086e6c <__flash_rwdata_start+0xffff553c>
20086e88:	dfc00117 	ldw	ra,4(sp)
20086e8c:	dc000017 	ldw	r16,0(sp)
20086e90:	dec00204 	addi	sp,sp,8
20086e94:	f800283a 	ret
20086e98:	202090fa 	slli	r16,r4,3
20086e9c:	00800034 	movhi	r2,0
20086ea0:	10805204 	addi	r2,r2,328
20086ea4:	1421883a 	add	r16,r2,r16
20086ea8:	80800017 	ldw	r2,0(r16)
20086eac:	80c00117 	ldw	r3,4(r16)
20086eb0:	dfc00117 	ldw	ra,4(sp)
20086eb4:	dc000017 	ldw	r16,0(sp)
20086eb8:	dec00204 	addi	sp,sp,8
20086ebc:	f800283a 	ret

20086ec0 <__copybits>:
20086ec0:	297fffc4 	addi	r5,r5,-1
20086ec4:	280fd17a 	srai	r7,r5,5
20086ec8:	30c00417 	ldw	r3,16(r6)
20086ecc:	30800504 	addi	r2,r6,20
20086ed0:	39c00044 	addi	r7,r7,1
20086ed4:	18c7883a 	add	r3,r3,r3
20086ed8:	39cf883a 	add	r7,r7,r7
20086edc:	18c7883a 	add	r3,r3,r3
20086ee0:	39cf883a 	add	r7,r7,r7
20086ee4:	10c7883a 	add	r3,r2,r3
20086ee8:	21cf883a 	add	r7,r4,r7
20086eec:	10c00d2e 	bgeu	r2,r3,20086f24 <__copybits+0x64>
20086ef0:	200b883a 	mov	r5,r4
20086ef4:	12000017 	ldw	r8,0(r2)
20086ef8:	29400104 	addi	r5,r5,4
20086efc:	10800104 	addi	r2,r2,4
20086f00:	2a3fff15 	stw	r8,-4(r5)
20086f04:	10fffb36 	bltu	r2,r3,20086ef4 <__flash_rwdata_start+0xffff55c4>
20086f08:	1985c83a 	sub	r2,r3,r6
20086f0c:	10bffac4 	addi	r2,r2,-21
20086f10:	1004d0ba 	srli	r2,r2,2
20086f14:	10800044 	addi	r2,r2,1
20086f18:	1085883a 	add	r2,r2,r2
20086f1c:	1085883a 	add	r2,r2,r2
20086f20:	2089883a 	add	r4,r4,r2
20086f24:	21c0032e 	bgeu	r4,r7,20086f34 <__copybits+0x74>
20086f28:	20000015 	stw	zero,0(r4)
20086f2c:	21000104 	addi	r4,r4,4
20086f30:	21fffd36 	bltu	r4,r7,20086f28 <__flash_rwdata_start+0xffff55f8>
20086f34:	f800283a 	ret

20086f38 <__any_on>:
20086f38:	20c00417 	ldw	r3,16(r4)
20086f3c:	2805d17a 	srai	r2,r5,5
20086f40:	21000504 	addi	r4,r4,20
20086f44:	18800d0e 	bge	r3,r2,20086f7c <__any_on+0x44>
20086f48:	18c7883a 	add	r3,r3,r3
20086f4c:	18c7883a 	add	r3,r3,r3
20086f50:	20c7883a 	add	r3,r4,r3
20086f54:	20c0192e 	bgeu	r4,r3,20086fbc <__any_on+0x84>
20086f58:	18bfff17 	ldw	r2,-4(r3)
20086f5c:	18ffff04 	addi	r3,r3,-4
20086f60:	1000041e 	bne	r2,zero,20086f74 <__any_on+0x3c>
20086f64:	20c0142e 	bgeu	r4,r3,20086fb8 <__any_on+0x80>
20086f68:	18ffff04 	addi	r3,r3,-4
20086f6c:	19400017 	ldw	r5,0(r3)
20086f70:	283ffc26 	beq	r5,zero,20086f64 <__flash_rwdata_start+0xffff5634>
20086f74:	00800044 	movi	r2,1
20086f78:	f800283a 	ret
20086f7c:	10c00a0e 	bge	r2,r3,20086fa8 <__any_on+0x70>
20086f80:	1085883a 	add	r2,r2,r2
20086f84:	1085883a 	add	r2,r2,r2
20086f88:	294007cc 	andi	r5,r5,31
20086f8c:	2087883a 	add	r3,r4,r2
20086f90:	283ff026 	beq	r5,zero,20086f54 <__flash_rwdata_start+0xffff5624>
20086f94:	19800017 	ldw	r6,0(r3)
20086f98:	3144d83a 	srl	r2,r6,r5
20086f9c:	114a983a 	sll	r5,r2,r5
20086fa0:	29bff41e 	bne	r5,r6,20086f74 <__flash_rwdata_start+0xffff5644>
20086fa4:	003feb06 	br	20086f54 <__flash_rwdata_start+0xffff5624>
20086fa8:	1085883a 	add	r2,r2,r2
20086fac:	1085883a 	add	r2,r2,r2
20086fb0:	2087883a 	add	r3,r4,r2
20086fb4:	003fe706 	br	20086f54 <__flash_rwdata_start+0xffff5624>
20086fb8:	f800283a 	ret
20086fbc:	0005883a 	mov	r2,zero
20086fc0:	f800283a 	ret

20086fc4 <_realloc_r>:
20086fc4:	defff604 	addi	sp,sp,-40
20086fc8:	dd000415 	stw	r20,16(sp)
20086fcc:	dc400115 	stw	r17,4(sp)
20086fd0:	dfc00915 	stw	ra,36(sp)
20086fd4:	df000815 	stw	fp,32(sp)
20086fd8:	ddc00715 	stw	r23,28(sp)
20086fdc:	dd800615 	stw	r22,24(sp)
20086fe0:	dd400515 	stw	r21,20(sp)
20086fe4:	dcc00315 	stw	r19,12(sp)
20086fe8:	dc800215 	stw	r18,8(sp)
20086fec:	dc000015 	stw	r16,0(sp)
20086ff0:	2829883a 	mov	r20,r5
20086ff4:	3023883a 	mov	r17,r6
20086ff8:	2800ad26 	beq	r5,zero,200872b0 <_realloc_r+0x2ec>
20086ffc:	2025883a 	mov	r18,r4
20087000:	008cd780 	call	2008cd78 <__malloc_lock>
20087004:	a0ffff17 	ldw	r3,-4(r20)
20087008:	043fff04 	movi	r16,-4
2008700c:	890002c4 	addi	r4,r17,11
20087010:	01c00584 	movi	r7,22
20087014:	a57ffe04 	addi	r21,r20,-8
20087018:	1c20703a 	and	r16,r3,r16
2008701c:	39001d2e 	bgeu	r7,r4,20087094 <_realloc_r+0xd0>
20087020:	05bffe04 	movi	r22,-8
20087024:	25ac703a 	and	r22,r4,r22
20087028:	b00f883a 	mov	r7,r22
2008702c:	b0006516 	blt	r22,zero,200871c4 <_realloc_r+0x200>
20087030:	b4406436 	bltu	r22,r17,200871c4 <_realloc_r+0x200>
20087034:	81c01a0e 	bge	r16,r7,200870a0 <_realloc_r+0xdc>
20087038:	07000034 	movhi	fp,0
2008703c:	e7016b04 	addi	fp,fp,1452
20087040:	e1400217 	ldw	r5,8(fp)
20087044:	ac11883a 	add	r8,r21,r16
20087048:	2a006226 	beq	r5,r8,200871d4 <_realloc_r+0x210>
2008704c:	41800117 	ldw	r6,4(r8)
20087050:	027fff84 	movi	r9,-2
20087054:	3252703a 	and	r9,r6,r9
20087058:	4253883a 	add	r9,r8,r9
2008705c:	49000117 	ldw	r4,4(r9)
20087060:	2100004c 	andi	r4,r4,1
20087064:	2000281e 	bne	r4,zero,20087108 <_realloc_r+0x144>
20087068:	00bfff04 	movi	r2,-4
2008706c:	3084703a 	and	r2,r6,r2
20087070:	1409883a 	add	r4,r2,r16
20087074:	21c05e16 	blt	r4,r7,200871f0 <_realloc_r+0x22c>
20087078:	40800317 	ldw	r2,12(r8)
2008707c:	41400217 	ldw	r5,8(r8)
20087080:	a023883a 	mov	r17,r20
20087084:	2021883a 	mov	r16,r4
20087088:	28800315 	stw	r2,12(r5)
2008708c:	11400215 	stw	r5,8(r2)
20087090:	00000406 	br	200870a4 <_realloc_r+0xe0>
20087094:	01c00404 	movi	r7,16
20087098:	382d883a 	mov	r22,r7
2008709c:	003fe406 	br	20087030 <__flash_rwdata_start+0xffff5700>
200870a0:	a023883a 	mov	r17,r20
200870a4:	858fc83a 	sub	r7,r16,r22
200870a8:	008003c4 	movi	r2,15
200870ac:	18c0004c 	andi	r3,r3,1
200870b0:	11c07236 	bltu	r2,r7,2008727c <_realloc_r+0x2b8>
200870b4:	1c06b03a 	or	r3,r3,r16
200870b8:	a8c00115 	stw	r3,4(r21)
200870bc:	ac21883a 	add	r16,r21,r16
200870c0:	80800117 	ldw	r2,4(r16)
200870c4:	10800054 	ori	r2,r2,1
200870c8:	80800115 	stw	r2,4(r16)
200870cc:	9009883a 	mov	r4,r18
200870d0:	008cd980 	call	2008cd98 <__malloc_unlock>
200870d4:	8805883a 	mov	r2,r17
200870d8:	dfc00917 	ldw	ra,36(sp)
200870dc:	df000817 	ldw	fp,32(sp)
200870e0:	ddc00717 	ldw	r23,28(sp)
200870e4:	dd800617 	ldw	r22,24(sp)
200870e8:	dd400517 	ldw	r21,20(sp)
200870ec:	dd000417 	ldw	r20,16(sp)
200870f0:	dcc00317 	ldw	r19,12(sp)
200870f4:	dc800217 	ldw	r18,8(sp)
200870f8:	dc400117 	ldw	r17,4(sp)
200870fc:	dc000017 	ldw	r16,0(sp)
20087100:	dec00a04 	addi	sp,sp,40
20087104:	f800283a 	ret
20087108:	18c0004c 	andi	r3,r3,1
2008710c:	1800081e 	bne	r3,zero,20087130 <_realloc_r+0x16c>
20087110:	a4fffe17 	ldw	r19,-8(r20)
20087114:	00bfff04 	movi	r2,-4
20087118:	ace7c83a 	sub	r19,r21,r19
2008711c:	98c00117 	ldw	r3,4(r19)
20087120:	1886703a 	and	r3,r3,r2
20087124:	98000226 	beq	r19,zero,20087130 <_realloc_r+0x16c>
20087128:	1c2f883a 	add	r23,r3,r16
2008712c:	b9c06d0e 	bge	r23,r7,200872e4 <_realloc_r+0x320>
20087130:	880b883a 	mov	r5,r17
20087134:	9009883a 	mov	r4,r18
20087138:	00803f80 	call	200803f8 <_malloc_r>
2008713c:	1023883a 	mov	r17,r2
20087140:	1000ef26 	beq	r2,zero,20087500 <_realloc_r+0x53c>
20087144:	a0ffff17 	ldw	r3,-4(r20)
20087148:	113ffe04 	addi	r4,r2,-8
2008714c:	00bfff84 	movi	r2,-2
20087150:	1884703a 	and	r2,r3,r2
20087154:	a885883a 	add	r2,r21,r2
20087158:	2080bf26 	beq	r4,r2,20087458 <_realloc_r+0x494>
2008715c:	81bfff04 	addi	r6,r16,-4
20087160:	00800904 	movi	r2,36
20087164:	11808936 	bltu	r2,r6,2008738c <_realloc_r+0x3c8>
20087168:	00c004c4 	movi	r3,19
2008716c:	19806c2e 	bgeu	r3,r6,20087320 <_realloc_r+0x35c>
20087170:	a0c00017 	ldw	r3,0(r20)
20087174:	88c00015 	stw	r3,0(r17)
20087178:	a0c00117 	ldw	r3,4(r20)
2008717c:	88c00115 	stw	r3,4(r17)
20087180:	00c006c4 	movi	r3,27
20087184:	1980ac36 	bltu	r3,r6,20087438 <_realloc_r+0x474>
20087188:	88800204 	addi	r2,r17,8
2008718c:	a0c00204 	addi	r3,r20,8
20087190:	19000017 	ldw	r4,0(r3)
20087194:	11000015 	stw	r4,0(r2)
20087198:	19000117 	ldw	r4,4(r3)
2008719c:	11000115 	stw	r4,4(r2)
200871a0:	18c00217 	ldw	r3,8(r3)
200871a4:	10c00215 	stw	r3,8(r2)
200871a8:	a00b883a 	mov	r5,r20
200871ac:	9009883a 	mov	r4,r18
200871b0:	0084fb40 	call	20084fb4 <_free_r>
200871b4:	9009883a 	mov	r4,r18
200871b8:	008cd980 	call	2008cd98 <__malloc_unlock>
200871bc:	8805883a 	mov	r2,r17
200871c0:	003fc506 	br	200870d8 <__flash_rwdata_start+0xffff57a8>
200871c4:	00800304 	movi	r2,12
200871c8:	90800015 	stw	r2,0(r18)
200871cc:	0005883a 	mov	r2,zero
200871d0:	003fc106 	br	200870d8 <__flash_rwdata_start+0xffff57a8>
200871d4:	29800117 	ldw	r6,4(r5)
200871d8:	00bfff04 	movi	r2,-4
200871dc:	b1000404 	addi	r4,r22,16
200871e0:	3084703a 	and	r2,r6,r2
200871e4:	140d883a 	add	r6,r2,r16
200871e8:	31005b0e 	bge	r6,r4,20087358 <_realloc_r+0x394>
200871ec:	2811883a 	mov	r8,r5
200871f0:	18c0004c 	andi	r3,r3,1
200871f4:	183fce1e 	bne	r3,zero,20087130 <__flash_rwdata_start+0xffff5800>
200871f8:	a4fffe17 	ldw	r19,-8(r20)
200871fc:	00ffff04 	movi	r3,-4
20087200:	ace7c83a 	sub	r19,r21,r19
20087204:	99000117 	ldw	r4,4(r19)
20087208:	20c6703a 	and	r3,r4,r3
2008720c:	403fc526 	beq	r8,zero,20087124 <__flash_rwdata_start+0xffff57f4>
20087210:	1c2f883a 	add	r23,r3,r16
20087214:	b8af883a 	add	r23,r23,r2
20087218:	41406026 	beq	r8,r5,2008739c <_realloc_r+0x3d8>
2008721c:	b9ffc116 	blt	r23,r7,20087124 <__flash_rwdata_start+0xffff57f4>
20087220:	40c00217 	ldw	r3,8(r8)
20087224:	40800317 	ldw	r2,12(r8)
20087228:	81bfff04 	addi	r6,r16,-4
2008722c:	01000904 	movi	r4,36
20087230:	18800315 	stw	r2,12(r3)
20087234:	10c00215 	stw	r3,8(r2)
20087238:	99400217 	ldw	r5,8(r19)
2008723c:	98c00317 	ldw	r3,12(r19)
20087240:	9c400204 	addi	r17,r19,8
20087244:	28c00315 	stw	r3,12(r5)
20087248:	19400215 	stw	r5,8(r3)
2008724c:	21802d36 	bltu	r4,r6,20087304 <_realloc_r+0x340>
20087250:	008004c4 	movi	r2,19
20087254:	1180352e 	bgeu	r2,r6,2008732c <_realloc_r+0x368>
20087258:	a0800017 	ldw	r2,0(r20)
2008725c:	98800215 	stw	r2,8(r19)
20087260:	a0800117 	ldw	r2,4(r20)
20087264:	98800315 	stw	r2,12(r19)
20087268:	008006c4 	movi	r2,27
2008726c:	11808036 	bltu	r2,r6,20087470 <_realloc_r+0x4ac>
20087270:	98c00404 	addi	r3,r19,16
20087274:	a5000204 	addi	r20,r20,8
20087278:	00002d06 	br	20087330 <_realloc_r+0x36c>
2008727c:	1d86b03a 	or	r3,r3,r22
20087280:	ad8b883a 	add	r5,r21,r22
20087284:	a8c00115 	stw	r3,4(r21)
20087288:	38800054 	ori	r2,r7,1
2008728c:	28800115 	stw	r2,4(r5)
20087290:	29cf883a 	add	r7,r5,r7
20087294:	38800117 	ldw	r2,4(r7)
20087298:	9009883a 	mov	r4,r18
2008729c:	29400204 	addi	r5,r5,8
200872a0:	10800054 	ori	r2,r2,1
200872a4:	38800115 	stw	r2,4(r7)
200872a8:	0084fb40 	call	20084fb4 <_free_r>
200872ac:	003f8706 	br	200870cc <__flash_rwdata_start+0xffff579c>
200872b0:	300b883a 	mov	r5,r6
200872b4:	dfc00917 	ldw	ra,36(sp)
200872b8:	df000817 	ldw	fp,32(sp)
200872bc:	ddc00717 	ldw	r23,28(sp)
200872c0:	dd800617 	ldw	r22,24(sp)
200872c4:	dd400517 	ldw	r21,20(sp)
200872c8:	dd000417 	ldw	r20,16(sp)
200872cc:	dcc00317 	ldw	r19,12(sp)
200872d0:	dc800217 	ldw	r18,8(sp)
200872d4:	dc400117 	ldw	r17,4(sp)
200872d8:	dc000017 	ldw	r16,0(sp)
200872dc:	dec00a04 	addi	sp,sp,40
200872e0:	00803f81 	jmpi	200803f8 <_malloc_r>
200872e4:	98800317 	ldw	r2,12(r19)
200872e8:	98c00217 	ldw	r3,8(r19)
200872ec:	81bfff04 	addi	r6,r16,-4
200872f0:	01000904 	movi	r4,36
200872f4:	18800315 	stw	r2,12(r3)
200872f8:	10c00215 	stw	r3,8(r2)
200872fc:	9c400204 	addi	r17,r19,8
20087300:	21bfd32e 	bgeu	r4,r6,20087250 <__flash_rwdata_start+0xffff5920>
20087304:	8809883a 	mov	r4,r17
20087308:	a00b883a 	mov	r5,r20
2008730c:	0085da40 	call	20085da4 <memmove>
20087310:	98c00117 	ldw	r3,4(r19)
20087314:	b821883a 	mov	r16,r23
20087318:	982b883a 	mov	r21,r19
2008731c:	003f6106 	br	200870a4 <__flash_rwdata_start+0xffff5774>
20087320:	8805883a 	mov	r2,r17
20087324:	a007883a 	mov	r3,r20
20087328:	003f9906 	br	20087190 <__flash_rwdata_start+0xffff5860>
2008732c:	8807883a 	mov	r3,r17
20087330:	a0800017 	ldw	r2,0(r20)
20087334:	b821883a 	mov	r16,r23
20087338:	982b883a 	mov	r21,r19
2008733c:	18800015 	stw	r2,0(r3)
20087340:	a0800117 	ldw	r2,4(r20)
20087344:	18800115 	stw	r2,4(r3)
20087348:	a0800217 	ldw	r2,8(r20)
2008734c:	18800215 	stw	r2,8(r3)
20087350:	98c00117 	ldw	r3,4(r19)
20087354:	003f5306 	br	200870a4 <__flash_rwdata_start+0xffff5774>
20087358:	adab883a 	add	r21,r21,r22
2008735c:	3585c83a 	sub	r2,r6,r22
20087360:	e5400215 	stw	r21,8(fp)
20087364:	10800054 	ori	r2,r2,1
20087368:	a8800115 	stw	r2,4(r21)
2008736c:	a0bfff17 	ldw	r2,-4(r20)
20087370:	9009883a 	mov	r4,r18
20087374:	1080004c 	andi	r2,r2,1
20087378:	b0acb03a 	or	r22,r22,r2
2008737c:	a5bfff15 	stw	r22,-4(r20)
20087380:	008cd980 	call	2008cd98 <__malloc_unlock>
20087384:	a005883a 	mov	r2,r20
20087388:	003f5306 	br	200870d8 <__flash_rwdata_start+0xffff57a8>
2008738c:	8809883a 	mov	r4,r17
20087390:	a00b883a 	mov	r5,r20
20087394:	0085da40 	call	20085da4 <memmove>
20087398:	003f8306 	br	200871a8 <__flash_rwdata_start+0xffff5878>
2008739c:	b0800404 	addi	r2,r22,16
200873a0:	b8bf6016 	blt	r23,r2,20087124 <__flash_rwdata_start+0xffff57f4>
200873a4:	98800317 	ldw	r2,12(r19)
200873a8:	98c00217 	ldw	r3,8(r19)
200873ac:	81bfff04 	addi	r6,r16,-4
200873b0:	01000904 	movi	r4,36
200873b4:	18800315 	stw	r2,12(r3)
200873b8:	10c00215 	stw	r3,8(r2)
200873bc:	9c400204 	addi	r17,r19,8
200873c0:	21804336 	bltu	r4,r6,200874d0 <_realloc_r+0x50c>
200873c4:	008004c4 	movi	r2,19
200873c8:	11803f2e 	bgeu	r2,r6,200874c8 <_realloc_r+0x504>
200873cc:	a0800017 	ldw	r2,0(r20)
200873d0:	98800215 	stw	r2,8(r19)
200873d4:	a0800117 	ldw	r2,4(r20)
200873d8:	98800315 	stw	r2,12(r19)
200873dc:	008006c4 	movi	r2,27
200873e0:	11803f36 	bltu	r2,r6,200874e0 <_realloc_r+0x51c>
200873e4:	98800404 	addi	r2,r19,16
200873e8:	a5000204 	addi	r20,r20,8
200873ec:	a0c00017 	ldw	r3,0(r20)
200873f0:	10c00015 	stw	r3,0(r2)
200873f4:	a0c00117 	ldw	r3,4(r20)
200873f8:	10c00115 	stw	r3,4(r2)
200873fc:	a0c00217 	ldw	r3,8(r20)
20087400:	10c00215 	stw	r3,8(r2)
20087404:	9d87883a 	add	r3,r19,r22
20087408:	bd85c83a 	sub	r2,r23,r22
2008740c:	e0c00215 	stw	r3,8(fp)
20087410:	10800054 	ori	r2,r2,1
20087414:	18800115 	stw	r2,4(r3)
20087418:	98800117 	ldw	r2,4(r19)
2008741c:	9009883a 	mov	r4,r18
20087420:	1080004c 	andi	r2,r2,1
20087424:	b0acb03a 	or	r22,r22,r2
20087428:	9d800115 	stw	r22,4(r19)
2008742c:	008cd980 	call	2008cd98 <__malloc_unlock>
20087430:	8805883a 	mov	r2,r17
20087434:	003f2806 	br	200870d8 <__flash_rwdata_start+0xffff57a8>
20087438:	a0c00217 	ldw	r3,8(r20)
2008743c:	88c00215 	stw	r3,8(r17)
20087440:	a0c00317 	ldw	r3,12(r20)
20087444:	88c00315 	stw	r3,12(r17)
20087448:	30801126 	beq	r6,r2,20087490 <_realloc_r+0x4cc>
2008744c:	88800404 	addi	r2,r17,16
20087450:	a0c00404 	addi	r3,r20,16
20087454:	003f4e06 	br	20087190 <__flash_rwdata_start+0xffff5860>
20087458:	893fff17 	ldw	r4,-4(r17)
2008745c:	00bfff04 	movi	r2,-4
20087460:	a023883a 	mov	r17,r20
20087464:	2084703a 	and	r2,r4,r2
20087468:	80a1883a 	add	r16,r16,r2
2008746c:	003f0d06 	br	200870a4 <__flash_rwdata_start+0xffff5774>
20087470:	a0800217 	ldw	r2,8(r20)
20087474:	98800415 	stw	r2,16(r19)
20087478:	a0800317 	ldw	r2,12(r20)
2008747c:	98800515 	stw	r2,20(r19)
20087480:	31000a26 	beq	r6,r4,200874ac <_realloc_r+0x4e8>
20087484:	98c00604 	addi	r3,r19,24
20087488:	a5000404 	addi	r20,r20,16
2008748c:	003fa806 	br	20087330 <__flash_rwdata_start+0xffff5a00>
20087490:	a1000417 	ldw	r4,16(r20)
20087494:	88800604 	addi	r2,r17,24
20087498:	a0c00604 	addi	r3,r20,24
2008749c:	89000415 	stw	r4,16(r17)
200874a0:	a1000517 	ldw	r4,20(r20)
200874a4:	89000515 	stw	r4,20(r17)
200874a8:	003f3906 	br	20087190 <__flash_rwdata_start+0xffff5860>
200874ac:	a0800417 	ldw	r2,16(r20)
200874b0:	a5000604 	addi	r20,r20,24
200874b4:	98c00804 	addi	r3,r19,32
200874b8:	98800615 	stw	r2,24(r19)
200874bc:	a0bfff17 	ldw	r2,-4(r20)
200874c0:	98800715 	stw	r2,28(r19)
200874c4:	003f9a06 	br	20087330 <__flash_rwdata_start+0xffff5a00>
200874c8:	8805883a 	mov	r2,r17
200874cc:	003fc706 	br	200873ec <__flash_rwdata_start+0xffff5abc>
200874d0:	8809883a 	mov	r4,r17
200874d4:	a00b883a 	mov	r5,r20
200874d8:	0085da40 	call	20085da4 <memmove>
200874dc:	003fc906 	br	20087404 <__flash_rwdata_start+0xffff5ad4>
200874e0:	a0800217 	ldw	r2,8(r20)
200874e4:	98800415 	stw	r2,16(r19)
200874e8:	a0800317 	ldw	r2,12(r20)
200874ec:	98800515 	stw	r2,20(r19)
200874f0:	31000726 	beq	r6,r4,20087510 <_realloc_r+0x54c>
200874f4:	98800604 	addi	r2,r19,24
200874f8:	a5000404 	addi	r20,r20,16
200874fc:	003fbb06 	br	200873ec <__flash_rwdata_start+0xffff5abc>
20087500:	9009883a 	mov	r4,r18
20087504:	008cd980 	call	2008cd98 <__malloc_unlock>
20087508:	0005883a 	mov	r2,zero
2008750c:	003ef206 	br	200870d8 <__flash_rwdata_start+0xffff57a8>
20087510:	a0c00417 	ldw	r3,16(r20)
20087514:	a5000604 	addi	r20,r20,24
20087518:	98800804 	addi	r2,r19,32
2008751c:	98c00615 	stw	r3,24(r19)
20087520:	a0ffff17 	ldw	r3,-4(r20)
20087524:	98c00715 	stw	r3,28(r19)
20087528:	003fb006 	br	200873ec <__flash_rwdata_start+0xffff5abc>

2008752c <__fpclassifyd>:
2008752c:	00a00034 	movhi	r2,32768
20087530:	10bfffc4 	addi	r2,r2,-1
20087534:	2884703a 	and	r2,r5,r2
20087538:	10000726 	beq	r2,zero,20087558 <__fpclassifyd+0x2c>
2008753c:	00fffc34 	movhi	r3,65520
20087540:	019ff834 	movhi	r6,32736
20087544:	28c7883a 	add	r3,r5,r3
20087548:	31bfffc4 	addi	r6,r6,-1
2008754c:	30c00536 	bltu	r6,r3,20087564 <__fpclassifyd+0x38>
20087550:	00800104 	movi	r2,4
20087554:	f800283a 	ret
20087558:	2000021e 	bne	r4,zero,20087564 <__fpclassifyd+0x38>
2008755c:	00800084 	movi	r2,2
20087560:	f800283a 	ret
20087564:	00dffc34 	movhi	r3,32752
20087568:	019ff834 	movhi	r6,32736
2008756c:	28cb883a 	add	r5,r5,r3
20087570:	31bfffc4 	addi	r6,r6,-1
20087574:	317ff62e 	bgeu	r6,r5,20087550 <__flash_rwdata_start+0xffff5c20>
20087578:	01400434 	movhi	r5,16
2008757c:	297fffc4 	addi	r5,r5,-1
20087580:	28800236 	bltu	r5,r2,2008758c <__fpclassifyd+0x60>
20087584:	008000c4 	movi	r2,3
20087588:	f800283a 	ret
2008758c:	10c00226 	beq	r2,r3,20087598 <__fpclassifyd+0x6c>
20087590:	0005883a 	mov	r2,zero
20087594:	f800283a 	ret
20087598:	2005003a 	cmpeq	r2,r4,zero
2008759c:	f800283a 	ret

200875a0 <__sread>:
200875a0:	defffe04 	addi	sp,sp,-8
200875a4:	dc000015 	stw	r16,0(sp)
200875a8:	2821883a 	mov	r16,r5
200875ac:	2940038f 	ldh	r5,14(r5)
200875b0:	dfc00115 	stw	ra,4(sp)
200875b4:	00891a40 	call	200891a4 <_read_r>
200875b8:	10000716 	blt	r2,zero,200875d8 <__sread+0x38>
200875bc:	80c01417 	ldw	r3,80(r16)
200875c0:	1887883a 	add	r3,r3,r2
200875c4:	80c01415 	stw	r3,80(r16)
200875c8:	dfc00117 	ldw	ra,4(sp)
200875cc:	dc000017 	ldw	r16,0(sp)
200875d0:	dec00204 	addi	sp,sp,8
200875d4:	f800283a 	ret
200875d8:	80c0030b 	ldhu	r3,12(r16)
200875dc:	18fbffcc 	andi	r3,r3,61439
200875e0:	80c0030d 	sth	r3,12(r16)
200875e4:	dfc00117 	ldw	ra,4(sp)
200875e8:	dc000017 	ldw	r16,0(sp)
200875ec:	dec00204 	addi	sp,sp,8
200875f0:	f800283a 	ret

200875f4 <__seofread>:
200875f4:	0005883a 	mov	r2,zero
200875f8:	f800283a 	ret

200875fc <__swrite>:
200875fc:	2880030b 	ldhu	r2,12(r5)
20087600:	defffb04 	addi	sp,sp,-20
20087604:	dcc00315 	stw	r19,12(sp)
20087608:	dc800215 	stw	r18,8(sp)
2008760c:	dc400115 	stw	r17,4(sp)
20087610:	dc000015 	stw	r16,0(sp)
20087614:	dfc00415 	stw	ra,16(sp)
20087618:	10c0400c 	andi	r3,r2,256
2008761c:	2821883a 	mov	r16,r5
20087620:	2027883a 	mov	r19,r4
20087624:	3025883a 	mov	r18,r6
20087628:	3823883a 	mov	r17,r7
2008762c:	18000526 	beq	r3,zero,20087644 <__swrite+0x48>
20087630:	2940038f 	ldh	r5,14(r5)
20087634:	000d883a 	mov	r6,zero
20087638:	01c00084 	movi	r7,2
2008763c:	00891480 	call	20089148 <_lseek_r>
20087640:	8080030b 	ldhu	r2,12(r16)
20087644:	8140038f 	ldh	r5,14(r16)
20087648:	10bbffcc 	andi	r2,r2,61439
2008764c:	9809883a 	mov	r4,r19
20087650:	900d883a 	mov	r6,r18
20087654:	880f883a 	mov	r7,r17
20087658:	8080030d 	sth	r2,12(r16)
2008765c:	dfc00417 	ldw	ra,16(sp)
20087660:	dcc00317 	ldw	r19,12(sp)
20087664:	dc800217 	ldw	r18,8(sp)
20087668:	dc400117 	ldw	r17,4(sp)
2008766c:	dc000017 	ldw	r16,0(sp)
20087670:	dec00504 	addi	sp,sp,20
20087674:	0088c441 	jmpi	20088c44 <_write_r>

20087678 <__sseek>:
20087678:	defffe04 	addi	sp,sp,-8
2008767c:	dc000015 	stw	r16,0(sp)
20087680:	2821883a 	mov	r16,r5
20087684:	2940038f 	ldh	r5,14(r5)
20087688:	dfc00115 	stw	ra,4(sp)
2008768c:	00891480 	call	20089148 <_lseek_r>
20087690:	00ffffc4 	movi	r3,-1
20087694:	10c00826 	beq	r2,r3,200876b8 <__sseek+0x40>
20087698:	80c0030b 	ldhu	r3,12(r16)
2008769c:	80801415 	stw	r2,80(r16)
200876a0:	18c40014 	ori	r3,r3,4096
200876a4:	80c0030d 	sth	r3,12(r16)
200876a8:	dfc00117 	ldw	ra,4(sp)
200876ac:	dc000017 	ldw	r16,0(sp)
200876b0:	dec00204 	addi	sp,sp,8
200876b4:	f800283a 	ret
200876b8:	80c0030b 	ldhu	r3,12(r16)
200876bc:	18fbffcc 	andi	r3,r3,61439
200876c0:	80c0030d 	sth	r3,12(r16)
200876c4:	dfc00117 	ldw	ra,4(sp)
200876c8:	dc000017 	ldw	r16,0(sp)
200876cc:	dec00204 	addi	sp,sp,8
200876d0:	f800283a 	ret

200876d4 <__sclose>:
200876d4:	2940038f 	ldh	r5,14(r5)
200876d8:	0088ca01 	jmpi	20088ca0 <_close_r>

200876dc <strcmp>:
200876dc:	2144b03a 	or	r2,r4,r5
200876e0:	108000cc 	andi	r2,r2,3
200876e4:	1000171e 	bne	r2,zero,20087744 <strcmp+0x68>
200876e8:	20800017 	ldw	r2,0(r4)
200876ec:	28c00017 	ldw	r3,0(r5)
200876f0:	10c0141e 	bne	r2,r3,20087744 <strcmp+0x68>
200876f4:	027fbff4 	movhi	r9,65279
200876f8:	4a7fbfc4 	addi	r9,r9,-257
200876fc:	0086303a 	nor	r3,zero,r2
20087700:	02202074 	movhi	r8,32897
20087704:	1245883a 	add	r2,r2,r9
20087708:	42202004 	addi	r8,r8,-32640
2008770c:	10c4703a 	and	r2,r2,r3
20087710:	1204703a 	and	r2,r2,r8
20087714:	10000226 	beq	r2,zero,20087720 <strcmp+0x44>
20087718:	00001706 	br	20087778 <strcmp+0x9c>
2008771c:	1000161e 	bne	r2,zero,20087778 <strcmp+0x9c>
20087720:	21000104 	addi	r4,r4,4
20087724:	20c00017 	ldw	r3,0(r4)
20087728:	29400104 	addi	r5,r5,4
2008772c:	29800017 	ldw	r6,0(r5)
20087730:	1a4f883a 	add	r7,r3,r9
20087734:	00c4303a 	nor	r2,zero,r3
20087738:	3884703a 	and	r2,r7,r2
2008773c:	1204703a 	and	r2,r2,r8
20087740:	19bff626 	beq	r3,r6,2008771c <__flash_rwdata_start+0xffff5dec>
20087744:	20800007 	ldb	r2,0(r4)
20087748:	1000051e 	bne	r2,zero,20087760 <strcmp+0x84>
2008774c:	00000606 	br	20087768 <strcmp+0x8c>
20087750:	21000044 	addi	r4,r4,1
20087754:	20800007 	ldb	r2,0(r4)
20087758:	29400044 	addi	r5,r5,1
2008775c:	10000226 	beq	r2,zero,20087768 <strcmp+0x8c>
20087760:	28c00007 	ldb	r3,0(r5)
20087764:	10fffa26 	beq	r2,r3,20087750 <__flash_rwdata_start+0xffff5e20>
20087768:	20800003 	ldbu	r2,0(r4)
2008776c:	28c00003 	ldbu	r3,0(r5)
20087770:	10c5c83a 	sub	r2,r2,r3
20087774:	f800283a 	ret
20087778:	0005883a 	mov	r2,zero
2008777c:	f800283a 	ret

20087780 <__sprint_r.part.0>:
20087780:	28801917 	ldw	r2,100(r5)
20087784:	defff604 	addi	sp,sp,-40
20087788:	dd400515 	stw	r21,20(sp)
2008778c:	dcc00315 	stw	r19,12(sp)
20087790:	dfc00915 	stw	ra,36(sp)
20087794:	df000815 	stw	fp,32(sp)
20087798:	ddc00715 	stw	r23,28(sp)
2008779c:	dd800615 	stw	r22,24(sp)
200877a0:	dd000415 	stw	r20,16(sp)
200877a4:	dc800215 	stw	r18,8(sp)
200877a8:	dc400115 	stw	r17,4(sp)
200877ac:	dc000015 	stw	r16,0(sp)
200877b0:	1088000c 	andi	r2,r2,8192
200877b4:	2827883a 	mov	r19,r5
200877b8:	302b883a 	mov	r21,r6
200877bc:	10002d26 	beq	r2,zero,20087874 <__sprint_r.part.0+0xf4>
200877c0:	30800217 	ldw	r2,8(r6)
200877c4:	35800017 	ldw	r22,0(r6)
200877c8:	10002826 	beq	r2,zero,2008786c <__sprint_r.part.0+0xec>
200877cc:	2029883a 	mov	r20,r4
200877d0:	b5c00104 	addi	r23,r22,4
200877d4:	04bfffc4 	movi	r18,-1
200877d8:	bc400017 	ldw	r17,0(r23)
200877dc:	b4000017 	ldw	r16,0(r22)
200877e0:	0039883a 	mov	fp,zero
200877e4:	8822d0ba 	srli	r17,r17,2
200877e8:	04400316 	blt	zero,r17,200877f8 <__sprint_r.part.0+0x78>
200877ec:	00001806 	br	20087850 <__sprint_r.part.0+0xd0>
200877f0:	84000104 	addi	r16,r16,4
200877f4:	8f001526 	beq	r17,fp,2008784c <__sprint_r.part.0+0xcc>
200877f8:	81400017 	ldw	r5,0(r16)
200877fc:	a009883a 	mov	r4,r20
20087800:	980d883a 	mov	r6,r19
20087804:	0088ebc0 	call	20088ebc <_fputwc_r>
20087808:	e7000044 	addi	fp,fp,1
2008780c:	14bff81e 	bne	r2,r18,200877f0 <__flash_rwdata_start+0xffff5ec0>
20087810:	9005883a 	mov	r2,r18
20087814:	a8000215 	stw	zero,8(r21)
20087818:	a8000115 	stw	zero,4(r21)
2008781c:	dfc00917 	ldw	ra,36(sp)
20087820:	df000817 	ldw	fp,32(sp)
20087824:	ddc00717 	ldw	r23,28(sp)
20087828:	dd800617 	ldw	r22,24(sp)
2008782c:	dd400517 	ldw	r21,20(sp)
20087830:	dd000417 	ldw	r20,16(sp)
20087834:	dcc00317 	ldw	r19,12(sp)
20087838:	dc800217 	ldw	r18,8(sp)
2008783c:	dc400117 	ldw	r17,4(sp)
20087840:	dc000017 	ldw	r16,0(sp)
20087844:	dec00a04 	addi	sp,sp,40
20087848:	f800283a 	ret
2008784c:	a8800217 	ldw	r2,8(r21)
20087850:	8c63883a 	add	r17,r17,r17
20087854:	8c63883a 	add	r17,r17,r17
20087858:	1445c83a 	sub	r2,r2,r17
2008785c:	a8800215 	stw	r2,8(r21)
20087860:	b5800204 	addi	r22,r22,8
20087864:	bdc00204 	addi	r23,r23,8
20087868:	103fdb1e 	bne	r2,zero,200877d8 <__flash_rwdata_start+0xffff5ea8>
2008786c:	0005883a 	mov	r2,zero
20087870:	003fe806 	br	20087814 <__flash_rwdata_start+0xffff5ee4>
20087874:	00852a40 	call	200852a4 <__sfvwrite_r>
20087878:	003fe606 	br	20087814 <__flash_rwdata_start+0xffff5ee4>

2008787c <__sprint_r>:
2008787c:	30c00217 	ldw	r3,8(r6)
20087880:	18000126 	beq	r3,zero,20087888 <__sprint_r+0xc>
20087884:	00877801 	jmpi	20087780 <__sprint_r.part.0>
20087888:	30000115 	stw	zero,4(r6)
2008788c:	0005883a 	mov	r2,zero
20087890:	f800283a 	ret

20087894 <___vfiprintf_internal_r>:
20087894:	deffca04 	addi	sp,sp,-216
20087898:	dd803215 	stw	r22,200(sp)
2008789c:	dd403115 	stw	r21,196(sp)
200878a0:	dfc03515 	stw	ra,212(sp)
200878a4:	df003415 	stw	fp,208(sp)
200878a8:	ddc03315 	stw	r23,204(sp)
200878ac:	dd003015 	stw	r20,192(sp)
200878b0:	dcc02f15 	stw	r19,188(sp)
200878b4:	dc802e15 	stw	r18,184(sp)
200878b8:	dc402d15 	stw	r17,180(sp)
200878bc:	dc002c15 	stw	r16,176(sp)
200878c0:	d9002015 	stw	r4,128(sp)
200878c4:	d9c02215 	stw	r7,136(sp)
200878c8:	282b883a 	mov	r21,r5
200878cc:	302d883a 	mov	r22,r6
200878d0:	20000226 	beq	r4,zero,200878dc <___vfiprintf_internal_r+0x48>
200878d4:	20800e17 	ldw	r2,56(r4)
200878d8:	1001b126 	beq	r2,zero,20087fa0 <___vfiprintf_internal_r+0x70c>
200878dc:	a880030b 	ldhu	r2,12(r21)
200878e0:	10c8000c 	andi	r3,r2,8192
200878e4:	1800061e 	bne	r3,zero,20087900 <___vfiprintf_internal_r+0x6c>
200878e8:	a9001917 	ldw	r4,100(r21)
200878ec:	00f7ffc4 	movi	r3,-8193
200878f0:	10880014 	ori	r2,r2,8192
200878f4:	20c6703a 	and	r3,r4,r3
200878f8:	a880030d 	sth	r2,12(r21)
200878fc:	a8c01915 	stw	r3,100(r21)
20087900:	10c0020c 	andi	r3,r2,8
20087904:	18018926 	beq	r3,zero,20087f2c <___vfiprintf_internal_r+0x698>
20087908:	a8c00417 	ldw	r3,16(r21)
2008790c:	18018726 	beq	r3,zero,20087f2c <___vfiprintf_internal_r+0x698>
20087910:	1080068c 	andi	r2,r2,26
20087914:	00c00284 	movi	r3,10
20087918:	10c18c26 	beq	r2,r3,20087f4c <___vfiprintf_internal_r+0x6b8>
2008791c:	d8801a04 	addi	r2,sp,104
20087920:	d8c019c4 	addi	r3,sp,103
20087924:	07000034 	movhi	fp,0
20087928:	05c00034 	movhi	r23,0
2008792c:	10c9c83a 	sub	r4,r2,r3
20087930:	e7008804 	addi	fp,fp,544
20087934:	bdc08404 	addi	r23,r23,528
20087938:	d8801e15 	stw	r2,120(sp)
2008793c:	d8c01f15 	stw	r3,124(sp)
20087940:	dec01a15 	stw	sp,104(sp)
20087944:	d8001c15 	stw	zero,112(sp)
20087948:	d8001b15 	stw	zero,108(sp)
2008794c:	d8002615 	stw	zero,152(sp)
20087950:	d8002315 	stw	zero,140(sp)
20087954:	d9002715 	stw	r4,156(sp)
20087958:	d811883a 	mov	r8,sp
2008795c:	dd402115 	stw	r21,132(sp)
20087960:	b021883a 	mov	r16,r22
20087964:	80800007 	ldb	r2,0(r16)
20087968:	10037226 	beq	r2,zero,20088734 <___vfiprintf_internal_r+0xea0>
2008796c:	01000944 	movi	r4,37
20087970:	11037026 	beq	r2,r4,20088734 <___vfiprintf_internal_r+0xea0>
20087974:	8005883a 	mov	r2,r16
20087978:	00000106 	br	20087980 <___vfiprintf_internal_r+0xec>
2008797c:	19000326 	beq	r3,r4,2008798c <___vfiprintf_internal_r+0xf8>
20087980:	10800044 	addi	r2,r2,1
20087984:	10c00007 	ldb	r3,0(r2)
20087988:	183ffc1e 	bne	r3,zero,2008797c <__flash_rwdata_start+0xffff604c>
2008798c:	1425c83a 	sub	r18,r2,r16
20087990:	1023883a 	mov	r17,r2
20087994:	90001026 	beq	r18,zero,200879d8 <___vfiprintf_internal_r+0x144>
20087998:	d8c01c17 	ldw	r3,112(sp)
2008799c:	d8801b17 	ldw	r2,108(sp)
200879a0:	44000015 	stw	r16,0(r8)
200879a4:	90c7883a 	add	r3,r18,r3
200879a8:	10800044 	addi	r2,r2,1
200879ac:	44800115 	stw	r18,4(r8)
200879b0:	d8c01c15 	stw	r3,112(sp)
200879b4:	d8801b15 	stw	r2,108(sp)
200879b8:	010001c4 	movi	r4,7
200879bc:	2080750e 	bge	r4,r2,20087b94 <___vfiprintf_internal_r+0x300>
200879c0:	18036f1e 	bne	r3,zero,20088780 <___vfiprintf_internal_r+0xeec>
200879c4:	d8802317 	ldw	r2,140(sp)
200879c8:	d8001b15 	stw	zero,108(sp)
200879cc:	d811883a 	mov	r8,sp
200879d0:	1485883a 	add	r2,r2,r18
200879d4:	d8802315 	stw	r2,140(sp)
200879d8:	88800007 	ldb	r2,0(r17)
200879dc:	10041026 	beq	r2,zero,20088a20 <___vfiprintf_internal_r+0x118c>
200879e0:	88c00047 	ldb	r3,1(r17)
200879e4:	88800044 	addi	r2,r17,1
200879e8:	d8001d85 	stb	zero,118(sp)
200879ec:	000f883a 	mov	r7,zero
200879f0:	027fffc4 	movi	r9,-1
200879f4:	0025883a 	mov	r18,zero
200879f8:	002b883a 	mov	r21,zero
200879fc:	01401604 	movi	r5,88
20087a00:	01800244 	movi	r6,9
20087a04:	03400a84 	movi	r13,42
20087a08:	03001b04 	movi	r12,108
20087a0c:	14000044 	addi	r16,r2,1
20087a10:	18bff804 	addi	r2,r3,-32
20087a14:	28825536 	bltu	r5,r2,2008836c <___vfiprintf_internal_r+0xad8>
20087a18:	100490ba 	slli	r2,r2,2
20087a1c:	01080234 	movhi	r4,8200
20087a20:	211e8c04 	addi	r4,r4,31280
20087a24:	1105883a 	add	r2,r2,r4
20087a28:	10800017 	ldw	r2,0(r2)
20087a2c:	1000683a 	jmp	r2
20087a30:	20088130 	cmpltui	zero,r4,8708
20087a34:	2008836c 	andhi	zero,r4,8717
20087a38:	2008836c 	andhi	zero,r4,8717
20087a3c:	20088150 	cmplti	zero,r4,8709
20087a40:	2008836c 	andhi	zero,r4,8717
20087a44:	2008836c 	andhi	zero,r4,8717
20087a48:	2008836c 	andhi	zero,r4,8717
20087a4c:	2008836c 	andhi	zero,r4,8717
20087a50:	2008836c 	andhi	zero,r4,8717
20087a54:	2008836c 	andhi	zero,r4,8717
20087a58:	20088160 	cmpeqi	zero,r4,8709
20087a5c:	20088180 	call	22008818 <__flash_rwdata_start+0x1f76ee8>
20087a60:	2008836c 	andhi	zero,r4,8717
20087a64:	20087fa8 	cmpgeui	zero,r4,8702
20087a68:	20088094 	ori	zero,r4,8706
20087a6c:	2008836c 	andhi	zero,r4,8717
20087a70:	20088014 	ori	zero,r4,8704
20087a74:	20088024 	muli	zero,r4,8704
20087a78:	20088024 	muli	zero,r4,8704
20087a7c:	20088024 	muli	zero,r4,8704
20087a80:	20088024 	muli	zero,r4,8704
20087a84:	20088024 	muli	zero,r4,8704
20087a88:	20088024 	muli	zero,r4,8704
20087a8c:	20088024 	muli	zero,r4,8704
20087a90:	20088024 	muli	zero,r4,8704
20087a94:	20088024 	muli	zero,r4,8704
20087a98:	2008836c 	andhi	zero,r4,8717
20087a9c:	2008836c 	andhi	zero,r4,8717
20087aa0:	2008836c 	andhi	zero,r4,8717
20087aa4:	2008836c 	andhi	zero,r4,8717
20087aa8:	2008836c 	andhi	zero,r4,8717
20087aac:	2008836c 	andhi	zero,r4,8717
20087ab0:	2008836c 	andhi	zero,r4,8717
20087ab4:	2008836c 	andhi	zero,r4,8717
20087ab8:	2008836c 	andhi	zero,r4,8717
20087abc:	2008836c 	andhi	zero,r4,8717
20087ac0:	20088050 	cmplti	zero,r4,8705
20087ac4:	2008836c 	andhi	zero,r4,8717
20087ac8:	2008836c 	andhi	zero,r4,8717
20087acc:	2008836c 	andhi	zero,r4,8717
20087ad0:	2008836c 	andhi	zero,r4,8717
20087ad4:	2008836c 	andhi	zero,r4,8717
20087ad8:	2008836c 	andhi	zero,r4,8717
20087adc:	2008836c 	andhi	zero,r4,8717
20087ae0:	2008836c 	andhi	zero,r4,8717
20087ae4:	2008836c 	andhi	zero,r4,8717
20087ae8:	2008836c 	andhi	zero,r4,8717
20087aec:	20087bdc 	xori	zero,r4,8687
20087af0:	2008836c 	andhi	zero,r4,8717
20087af4:	2008836c 	andhi	zero,r4,8717
20087af8:	2008836c 	andhi	zero,r4,8717
20087afc:	2008836c 	andhi	zero,r4,8717
20087b00:	2008836c 	andhi	zero,r4,8717
20087b04:	20087ba8 	cmpgeui	zero,r4,8686
20087b08:	2008836c 	andhi	zero,r4,8717
20087b0c:	2008836c 	andhi	zero,r4,8717
20087b10:	200881f0 	cmpltui	zero,r4,8711
20087b14:	2008836c 	andhi	zero,r4,8717
20087b18:	2008836c 	andhi	zero,r4,8717
20087b1c:	2008836c 	andhi	zero,r4,8717
20087b20:	2008836c 	andhi	zero,r4,8717
20087b24:	2008836c 	andhi	zero,r4,8717
20087b28:	2008836c 	andhi	zero,r4,8717
20087b2c:	2008836c 	andhi	zero,r4,8717
20087b30:	2008836c 	andhi	zero,r4,8717
20087b34:	2008836c 	andhi	zero,r4,8717
20087b38:	2008836c 	andhi	zero,r4,8717
20087b3c:	20088190 	cmplti	zero,r4,8710
20087b40:	200881bc 	xorhi	zero,r4,8710
20087b44:	2008836c 	andhi	zero,r4,8717
20087b48:	2008836c 	andhi	zero,r4,8717
20087b4c:	2008836c 	andhi	zero,r4,8717
20087b50:	20088298 	cmpnei	zero,r4,8714
20087b54:	200881bc 	xorhi	zero,r4,8710
20087b58:	2008836c 	andhi	zero,r4,8717
20087b5c:	2008836c 	andhi	zero,r4,8717
20087b60:	200882a8 	cmpgeui	zero,r4,8714
20087b64:	2008836c 	andhi	zero,r4,8717
20087b68:	200880d4 	ori	zero,r4,8707
20087b6c:	20087be0 	cmpeqi	zero,r4,8687
20087b70:	200882bc 	xorhi	zero,r4,8714
20087b74:	200882fc 	xorhi	zero,r4,8715
20087b78:	2008836c 	andhi	zero,r4,8717
20087b7c:	20088244 	addi	zero,r4,8713
20087b80:	2008836c 	andhi	zero,r4,8717
20087b84:	20087bac 	andhi	zero,r4,8686
20087b88:	2008836c 	andhi	zero,r4,8717
20087b8c:	2008836c 	andhi	zero,r4,8717
20087b90:	2008830c 	andi	zero,r4,8716
20087b94:	42000204 	addi	r8,r8,8
20087b98:	d8802317 	ldw	r2,140(sp)
20087b9c:	1485883a 	add	r2,r2,r18
20087ba0:	d8802315 	stw	r2,140(sp)
20087ba4:	003f8c06 	br	200879d8 <__flash_rwdata_start+0xffff60a8>
20087ba8:	ad400414 	ori	r21,r21,16
20087bac:	a880080c 	andi	r2,r21,32
20087bb0:	1001e61e 	bne	r2,zero,2008834c <___vfiprintf_internal_r+0xab8>
20087bb4:	a880040c 	andi	r2,r21,16
20087bb8:	10034726 	beq	r2,zero,200888d8 <___vfiprintf_internal_r+0x1044>
20087bbc:	d8802217 	ldw	r2,136(sp)
20087bc0:	001b883a 	mov	r13,zero
20087bc4:	15800017 	ldw	r22,0(r2)
20087bc8:	10800104 	addi	r2,r2,4
20087bcc:	d8802215 	stw	r2,136(sp)
20087bd0:	b009883a 	mov	r4,r22
20087bd4:	00800044 	movi	r2,1
20087bd8:	00000c06 	br	20087c0c <___vfiprintf_internal_r+0x378>
20087bdc:	ad400414 	ori	r21,r21,16
20087be0:	a880080c 	andi	r2,r21,32
20087be4:	1001491e 	bne	r2,zero,2008810c <___vfiprintf_internal_r+0x878>
20087be8:	a880040c 	andi	r2,r21,16
20087bec:	10032d26 	beq	r2,zero,200888a4 <___vfiprintf_internal_r+0x1010>
20087bf0:	d9002217 	ldw	r4,136(sp)
20087bf4:	001b883a 	mov	r13,zero
20087bf8:	0005883a 	mov	r2,zero
20087bfc:	25800017 	ldw	r22,0(r4)
20087c00:	21000104 	addi	r4,r4,4
20087c04:	d9002215 	stw	r4,136(sp)
20087c08:	b009883a 	mov	r4,r22
20087c0c:	d8001d85 	stb	zero,118(sp)
20087c10:	4827883a 	mov	r19,r9
20087c14:	001d883a 	mov	r14,zero
20087c18:	48000216 	blt	r9,zero,20087c24 <___vfiprintf_internal_r+0x390>
20087c1c:	00ffdfc4 	movi	r3,-129
20087c20:	a8ea703a 	and	r21,r21,r3
20087c24:	2002071e 	bne	r4,zero,20088444 <___vfiprintf_internal_r+0xbb0>
20087c28:	4802ad26 	beq	r9,zero,200886e0 <___vfiprintf_internal_r+0xe4c>
20087c2c:	10803fcc 	andi	r2,r2,255
20087c30:	00c00044 	movi	r3,1
20087c34:	10c22b26 	beq	r2,r3,200884e4 <___vfiprintf_internal_r+0xc50>
20087c38:	00c00084 	movi	r3,2
20087c3c:	dd001a04 	addi	r20,sp,104
20087c40:	10c0dd1e 	bne	r2,r3,20087fb8 <___vfiprintf_internal_r+0x724>
20087c44:	d9002617 	ldw	r4,152(sp)
20087c48:	b08003cc 	andi	r2,r22,15
20087c4c:	6806973a 	slli	r3,r13,28
20087c50:	2085883a 	add	r2,r4,r2
20087c54:	b02cd13a 	srli	r22,r22,4
20087c58:	10800003 	ldbu	r2,0(r2)
20087c5c:	681ad13a 	srli	r13,r13,4
20087c60:	a53fffc4 	addi	r20,r20,-1
20087c64:	1dacb03a 	or	r22,r3,r22
20087c68:	a0800005 	stb	r2,0(r20)
20087c6c:	b344b03a 	or	r2,r22,r13
20087c70:	103ff51e 	bne	r2,zero,20087c48 <__flash_rwdata_start+0xffff6318>
20087c74:	d9001e17 	ldw	r4,120(sp)
20087c78:	2527c83a 	sub	r19,r4,r20
20087c7c:	9823883a 	mov	r17,r19
20087c80:	9a40010e 	bge	r19,r9,20087c88 <___vfiprintf_internal_r+0x3f4>
20087c84:	4823883a 	mov	r17,r9
20087c88:	73803fcc 	andi	r14,r14,255
20087c8c:	7380201c 	xori	r14,r14,128
20087c90:	73bfe004 	addi	r14,r14,-128
20087c94:	70000126 	beq	r14,zero,20087c9c <___vfiprintf_internal_r+0x408>
20087c98:	8c400044 	addi	r17,r17,1
20087c9c:	ab40008c 	andi	r13,r21,2
20087ca0:	68000126 	beq	r13,zero,20087ca8 <___vfiprintf_internal_r+0x414>
20087ca4:	8c400084 	addi	r17,r17,2
20087ca8:	ad80210c 	andi	r22,r21,132
20087cac:	b001c51e 	bne	r22,zero,200883c4 <___vfiprintf_internal_r+0xb30>
20087cb0:	9447c83a 	sub	r3,r18,r17
20087cb4:	00c1c30e 	bge	zero,r3,200883c4 <___vfiprintf_internal_r+0xb30>
20087cb8:	01c00404 	movi	r7,16
20087cbc:	d8801c17 	ldw	r2,112(sp)
20087cc0:	38c37b0e 	bge	r7,r3,20088ab0 <___vfiprintf_internal_r+0x121c>
20087cc4:	01000034 	movhi	r4,0
20087cc8:	21008804 	addi	r4,r4,544
20087ccc:	dc002915 	stw	r16,164(sp)
20087cd0:	d9801b17 	ldw	r6,108(sp)
20087cd4:	d9002415 	stw	r4,144(sp)
20087cd8:	03c001c4 	movi	r15,7
20087cdc:	da402515 	stw	r9,148(sp)
20087ce0:	db402815 	stw	r13,160(sp)
20087ce4:	1821883a 	mov	r16,r3
20087ce8:	00000506 	br	20087d00 <___vfiprintf_internal_r+0x46c>
20087cec:	31400084 	addi	r5,r6,2
20087cf0:	42000204 	addi	r8,r8,8
20087cf4:	200d883a 	mov	r6,r4
20087cf8:	843ffc04 	addi	r16,r16,-16
20087cfc:	3c000d0e 	bge	r7,r16,20087d34 <___vfiprintf_internal_r+0x4a0>
20087d00:	10800404 	addi	r2,r2,16
20087d04:	31000044 	addi	r4,r6,1
20087d08:	47000015 	stw	fp,0(r8)
20087d0c:	41c00115 	stw	r7,4(r8)
20087d10:	d8801c15 	stw	r2,112(sp)
20087d14:	d9001b15 	stw	r4,108(sp)
20087d18:	793ff40e 	bge	r15,r4,20087cec <__flash_rwdata_start+0xffff63bc>
20087d1c:	10019b1e 	bne	r2,zero,2008838c <___vfiprintf_internal_r+0xaf8>
20087d20:	843ffc04 	addi	r16,r16,-16
20087d24:	000d883a 	mov	r6,zero
20087d28:	01400044 	movi	r5,1
20087d2c:	d811883a 	mov	r8,sp
20087d30:	3c3ff316 	blt	r7,r16,20087d00 <__flash_rwdata_start+0xffff63d0>
20087d34:	8007883a 	mov	r3,r16
20087d38:	da402517 	ldw	r9,148(sp)
20087d3c:	db402817 	ldw	r13,160(sp)
20087d40:	dc002917 	ldw	r16,164(sp)
20087d44:	d9002417 	ldw	r4,144(sp)
20087d48:	1885883a 	add	r2,r3,r2
20087d4c:	40c00115 	stw	r3,4(r8)
20087d50:	41000015 	stw	r4,0(r8)
20087d54:	d8801c15 	stw	r2,112(sp)
20087d58:	d9401b15 	stw	r5,108(sp)
20087d5c:	00c001c4 	movi	r3,7
20087d60:	19426a16 	blt	r3,r5,2008870c <___vfiprintf_internal_r+0xe78>
20087d64:	d8c01d87 	ldb	r3,118(sp)
20087d68:	42000204 	addi	r8,r8,8
20087d6c:	29000044 	addi	r4,r5,1
20087d70:	1801991e 	bne	r3,zero,200883d8 <___vfiprintf_internal_r+0xb44>
20087d74:	68000c26 	beq	r13,zero,20087da8 <___vfiprintf_internal_r+0x514>
20087d78:	d8c01d04 	addi	r3,sp,116
20087d7c:	10800084 	addi	r2,r2,2
20087d80:	40c00015 	stw	r3,0(r8)
20087d84:	00c00084 	movi	r3,2
20087d88:	40c00115 	stw	r3,4(r8)
20087d8c:	d8801c15 	stw	r2,112(sp)
20087d90:	d9001b15 	stw	r4,108(sp)
20087d94:	00c001c4 	movi	r3,7
20087d98:	19024c16 	blt	r3,r4,200886cc <___vfiprintf_internal_r+0xe38>
20087d9c:	200b883a 	mov	r5,r4
20087da0:	42000204 	addi	r8,r8,8
20087da4:	21000044 	addi	r4,r4,1
20087da8:	00c02004 	movi	r3,128
20087dac:	b0c20126 	beq	r22,r3,200885b4 <___vfiprintf_internal_r+0xd20>
20087db0:	4cedc83a 	sub	r22,r9,r19
20087db4:	0580230e 	bge	zero,r22,20087e44 <___vfiprintf_internal_r+0x5b0>
20087db8:	01c00404 	movi	r7,16
20087dbc:	3d83140e 	bge	r7,r22,20088a10 <___vfiprintf_internal_r+0x117c>
20087dc0:	01000034 	movhi	r4,0
20087dc4:	21008404 	addi	r4,r4,528
20087dc8:	d9002415 	stw	r4,144(sp)
20087dcc:	034001c4 	movi	r13,7
20087dd0:	00000506 	br	20087de8 <___vfiprintf_internal_r+0x554>
20087dd4:	29000084 	addi	r4,r5,2
20087dd8:	42000204 	addi	r8,r8,8
20087ddc:	180b883a 	mov	r5,r3
20087de0:	b5bffc04 	addi	r22,r22,-16
20087de4:	3d800d0e 	bge	r7,r22,20087e1c <___vfiprintf_internal_r+0x588>
20087de8:	10800404 	addi	r2,r2,16
20087dec:	28c00044 	addi	r3,r5,1
20087df0:	45c00015 	stw	r23,0(r8)
20087df4:	41c00115 	stw	r7,4(r8)
20087df8:	d8801c15 	stw	r2,112(sp)
20087dfc:	d8c01b15 	stw	r3,108(sp)
20087e00:	68fff40e 	bge	r13,r3,20087dd4 <__flash_rwdata_start+0xffff64a4>
20087e04:	1001811e 	bne	r2,zero,2008840c <___vfiprintf_internal_r+0xb78>
20087e08:	b5bffc04 	addi	r22,r22,-16
20087e0c:	01000044 	movi	r4,1
20087e10:	000b883a 	mov	r5,zero
20087e14:	d811883a 	mov	r8,sp
20087e18:	3dbff316 	blt	r7,r22,20087de8 <__flash_rwdata_start+0xffff64b8>
20087e1c:	d8c02417 	ldw	r3,144(sp)
20087e20:	1585883a 	add	r2,r2,r22
20087e24:	45800115 	stw	r22,4(r8)
20087e28:	40c00015 	stw	r3,0(r8)
20087e2c:	d8801c15 	stw	r2,112(sp)
20087e30:	d9001b15 	stw	r4,108(sp)
20087e34:	00c001c4 	movi	r3,7
20087e38:	1901d016 	blt	r3,r4,2008857c <___vfiprintf_internal_r+0xce8>
20087e3c:	42000204 	addi	r8,r8,8
20087e40:	21000044 	addi	r4,r4,1
20087e44:	14c5883a 	add	r2,r2,r19
20087e48:	45000015 	stw	r20,0(r8)
20087e4c:	44c00115 	stw	r19,4(r8)
20087e50:	d8801c15 	stw	r2,112(sp)
20087e54:	d9001b15 	stw	r4,108(sp)
20087e58:	00c001c4 	movi	r3,7
20087e5c:	1901cf0e 	bge	r3,r4,2008859c <___vfiprintf_internal_r+0xd08>
20087e60:	1002361e 	bne	r2,zero,2008873c <___vfiprintf_internal_r+0xea8>
20087e64:	d8001b15 	stw	zero,108(sp)
20087e68:	aac0010c 	andi	r11,r21,4
20087e6c:	58002826 	beq	r11,zero,20087f10 <___vfiprintf_internal_r+0x67c>
20087e70:	9467c83a 	sub	r19,r18,r17
20087e74:	d811883a 	mov	r8,sp
20087e78:	04c3340e 	bge	zero,r19,20088b4c <___vfiprintf_internal_r+0x12b8>
20087e7c:	01c00404 	movi	r7,16
20087e80:	3cc31b0e 	bge	r7,r19,20088af0 <___vfiprintf_internal_r+0x125c>
20087e84:	00c00034 	movhi	r3,0
20087e88:	18c08804 	addi	r3,r3,544
20087e8c:	d9001b17 	ldw	r4,108(sp)
20087e90:	d8c02415 	stw	r3,144(sp)
20087e94:	382b883a 	mov	r21,r7
20087e98:	050001c4 	movi	r20,7
20087e9c:	dd802017 	ldw	r22,128(sp)
20087ea0:	00000506 	br	20087eb8 <___vfiprintf_internal_r+0x624>
20087ea4:	21400084 	addi	r5,r4,2
20087ea8:	42000204 	addi	r8,r8,8
20087eac:	1809883a 	mov	r4,r3
20087eb0:	9cfffc04 	addi	r19,r19,-16
20087eb4:	acc00d0e 	bge	r21,r19,20087eec <___vfiprintf_internal_r+0x658>
20087eb8:	10800404 	addi	r2,r2,16
20087ebc:	20c00044 	addi	r3,r4,1
20087ec0:	47000015 	stw	fp,0(r8)
20087ec4:	45400115 	stw	r21,4(r8)
20087ec8:	d8801c15 	stw	r2,112(sp)
20087ecc:	d8c01b15 	stw	r3,108(sp)
20087ed0:	a0fff40e 	bge	r20,r3,20087ea4 <__flash_rwdata_start+0xffff6574>
20087ed4:	10019f1e 	bne	r2,zero,20088554 <___vfiprintf_internal_r+0xcc0>
20087ed8:	9cfffc04 	addi	r19,r19,-16
20087edc:	01400044 	movi	r5,1
20087ee0:	0009883a 	mov	r4,zero
20087ee4:	d811883a 	mov	r8,sp
20087ee8:	acfff316 	blt	r21,r19,20087eb8 <__flash_rwdata_start+0xffff6588>
20087eec:	d8c02417 	ldw	r3,144(sp)
20087ef0:	14c5883a 	add	r2,r2,r19
20087ef4:	44c00115 	stw	r19,4(r8)
20087ef8:	40c00015 	stw	r3,0(r8)
20087efc:	d8801c15 	stw	r2,112(sp)
20087f00:	d9401b15 	stw	r5,108(sp)
20087f04:	00c001c4 	movi	r3,7
20087f08:	1941810e 	bge	r3,r5,20088510 <___vfiprintf_internal_r+0xc7c>
20087f0c:	10017a1e 	bne	r2,zero,200884f8 <___vfiprintf_internal_r+0xc64>
20087f10:	8c82a416 	blt	r17,r18,200889a4 <___vfiprintf_internal_r+0x1110>
20087f14:	d9002317 	ldw	r4,140(sp)
20087f18:	2449883a 	add	r4,r4,r17
20087f1c:	d9002315 	stw	r4,140(sp)
20087f20:	d8001b15 	stw	zero,108(sp)
20087f24:	d811883a 	mov	r8,sp
20087f28:	003e8e06 	br	20087964 <__flash_rwdata_start+0xffff6034>
20087f2c:	d9002017 	ldw	r4,128(sp)
20087f30:	a80b883a 	mov	r5,r21
20087f34:	0082de00 	call	20082de0 <__swsetup_r>
20087f38:	10000c1e 	bne	r2,zero,20087f6c <___vfiprintf_internal_r+0x6d8>
20087f3c:	a880030b 	ldhu	r2,12(r21)
20087f40:	00c00284 	movi	r3,10
20087f44:	1080068c 	andi	r2,r2,26
20087f48:	10fe741e 	bne	r2,r3,2008791c <__flash_rwdata_start+0xffff5fec>
20087f4c:	a880038f 	ldh	r2,14(r21)
20087f50:	103e7216 	blt	r2,zero,2008791c <__flash_rwdata_start+0xffff5fec>
20087f54:	d9002017 	ldw	r4,128(sp)
20087f58:	d9c02217 	ldw	r7,136(sp)
20087f5c:	a80b883a 	mov	r5,r21
20087f60:	b00d883a 	mov	r6,r22
20087f64:	0088b880 	call	20088b88 <__sbprintf>
20087f68:	00000106 	br	20087f70 <___vfiprintf_internal_r+0x6dc>
20087f6c:	00bfffc4 	movi	r2,-1
20087f70:	dfc03517 	ldw	ra,212(sp)
20087f74:	df003417 	ldw	fp,208(sp)
20087f78:	ddc03317 	ldw	r23,204(sp)
20087f7c:	dd803217 	ldw	r22,200(sp)
20087f80:	dd403117 	ldw	r21,196(sp)
20087f84:	dd003017 	ldw	r20,192(sp)
20087f88:	dcc02f17 	ldw	r19,188(sp)
20087f8c:	dc802e17 	ldw	r18,184(sp)
20087f90:	dc402d17 	ldw	r17,180(sp)
20087f94:	dc002c17 	ldw	r16,176(sp)
20087f98:	dec03604 	addi	sp,sp,216
20087f9c:	f800283a 	ret
20087fa0:	0084e400 	call	20084e40 <__sinit>
20087fa4:	003e4d06 	br	200878dc <__flash_rwdata_start+0xffff5fac>
20087fa8:	8005883a 	mov	r2,r16
20087fac:	ad400114 	ori	r21,r21,4
20087fb0:	80c00007 	ldb	r3,0(r16)
20087fb4:	003e9506 	br	20087a0c <__flash_rwdata_start+0xffff60dc>
20087fb8:	b006d0fa 	srli	r3,r22,3
20087fbc:	6808977a 	slli	r4,r13,29
20087fc0:	681ad0fa 	srli	r13,r13,3
20087fc4:	b58001cc 	andi	r22,r22,7
20087fc8:	b0800c04 	addi	r2,r22,48
20087fcc:	a53fffc4 	addi	r20,r20,-1
20087fd0:	20ecb03a 	or	r22,r4,r3
20087fd4:	a0800005 	stb	r2,0(r20)
20087fd8:	b346b03a 	or	r3,r22,r13
20087fdc:	183ff61e 	bne	r3,zero,20087fb8 <__flash_rwdata_start+0xffff6688>
20087fe0:	a8c0004c 	andi	r3,r21,1
20087fe4:	a009883a 	mov	r4,r20
20087fe8:	18013b26 	beq	r3,zero,200884d8 <___vfiprintf_internal_r+0xc44>
20087fec:	10803fcc 	andi	r2,r2,255
20087ff0:	1080201c 	xori	r2,r2,128
20087ff4:	10bfe004 	addi	r2,r2,-128
20087ff8:	00c00c04 	movi	r3,48
20087ffc:	10ff1d26 	beq	r2,r3,20087c74 <__flash_rwdata_start+0xffff6344>
20088000:	d8801e17 	ldw	r2,120(sp)
20088004:	a53fffc4 	addi	r20,r20,-1
20088008:	20ffffc5 	stb	r3,-1(r4)
2008800c:	1527c83a 	sub	r19,r2,r20
20088010:	003f1a06 	br	20087c7c <__flash_rwdata_start+0xffff634c>
20088014:	ad402014 	ori	r21,r21,128
20088018:	8005883a 	mov	r2,r16
2008801c:	80c00007 	ldb	r3,0(r16)
20088020:	003e7a06 	br	20087a0c <__flash_rwdata_start+0xffff60dc>
20088024:	8005883a 	mov	r2,r16
20088028:	0025883a 	mov	r18,zero
2008802c:	193ff404 	addi	r4,r3,-48
20088030:	10c00007 	ldb	r3,0(r2)
20088034:	948002a4 	muli	r18,r18,10
20088038:	84000044 	addi	r16,r16,1
2008803c:	8005883a 	mov	r2,r16
20088040:	9125883a 	add	r18,r18,r4
20088044:	193ff404 	addi	r4,r3,-48
20088048:	313ff92e 	bgeu	r6,r4,20088030 <__flash_rwdata_start+0xffff6700>
2008804c:	003e7006 	br	20087a10 <__flash_rwdata_start+0xffff60e0>
20088050:	ad400414 	ori	r21,r21,16
20088054:	d9c01d85 	stb	r7,118(sp)
20088058:	a880080c 	andi	r2,r21,32
2008805c:	d8c02217 	ldw	r3,136(sp)
20088060:	10005a26 	beq	r2,zero,200881cc <___vfiprintf_internal_r+0x938>
20088064:	d9002217 	ldw	r4,136(sp)
20088068:	18800117 	ldw	r2,4(r3)
2008806c:	1d800017 	ldw	r22,0(r3)
20088070:	21000204 	addi	r4,r4,8
20088074:	d9002215 	stw	r4,136(sp)
20088078:	101b883a 	mov	r13,r2
2008807c:	1001f416 	blt	r2,zero,20088850 <___vfiprintf_internal_r+0xfbc>
20088080:	db801d83 	ldbu	r14,118(sp)
20088084:	4827883a 	mov	r19,r9
20088088:	00800044 	movi	r2,1
2008808c:	b348b03a 	or	r4,r22,r13
20088090:	003ee106 	br	20087c18 <__flash_rwdata_start+0xffff62e8>
20088094:	80c00007 	ldb	r3,0(r16)
20088098:	80800044 	addi	r2,r16,1
2008809c:	1b42a326 	beq	r3,r13,20088b2c <___vfiprintf_internal_r+0x1298>
200880a0:	193ff404 	addi	r4,r3,-48
200880a4:	1021883a 	mov	r16,r2
200880a8:	0013883a 	mov	r9,zero
200880ac:	313e5836 	bltu	r6,r4,20087a10 <__flash_rwdata_start+0xffff60e0>
200880b0:	80c00007 	ldb	r3,0(r16)
200880b4:	4a4002a4 	muli	r9,r9,10
200880b8:	84000044 	addi	r16,r16,1
200880bc:	2253883a 	add	r9,r4,r9
200880c0:	193ff404 	addi	r4,r3,-48
200880c4:	313ffa2e 	bgeu	r6,r4,200880b0 <__flash_rwdata_start+0xffff6780>
200880c8:	483e510e 	bge	r9,zero,20087a10 <__flash_rwdata_start+0xffff60e0>
200880cc:	027fffc4 	movi	r9,-1
200880d0:	003e4f06 	br	20087a10 <__flash_rwdata_start+0xffff60e0>
200880d4:	d9c01d85 	stb	r7,118(sp)
200880d8:	a880080c 	andi	r2,r21,32
200880dc:	10020826 	beq	r2,zero,20088900 <___vfiprintf_internal_r+0x106c>
200880e0:	d8c02217 	ldw	r3,136(sp)
200880e4:	d9002317 	ldw	r4,140(sp)
200880e8:	18800017 	ldw	r2,0(r3)
200880ec:	2007d7fa 	srai	r3,r4,31
200880f0:	d9002217 	ldw	r4,136(sp)
200880f4:	10c00115 	stw	r3,4(r2)
200880f8:	21000104 	addi	r4,r4,4
200880fc:	d9002215 	stw	r4,136(sp)
20088100:	d9002317 	ldw	r4,140(sp)
20088104:	11000015 	stw	r4,0(r2)
20088108:	003e1606 	br	20087964 <__flash_rwdata_start+0xffff6034>
2008810c:	d8802217 	ldw	r2,136(sp)
20088110:	d8c02217 	ldw	r3,136(sp)
20088114:	15800017 	ldw	r22,0(r2)
20088118:	13400117 	ldw	r13,4(r2)
2008811c:	18c00204 	addi	r3,r3,8
20088120:	0005883a 	mov	r2,zero
20088124:	d8c02215 	stw	r3,136(sp)
20088128:	b348b03a 	or	r4,r22,r13
2008812c:	003eb706 	br	20087c0c <__flash_rwdata_start+0xffff62dc>
20088130:	38803fcc 	andi	r2,r7,255
20088134:	1080201c 	xori	r2,r2,128
20088138:	10bfe004 	addi	r2,r2,-128
2008813c:	1001e31e 	bne	r2,zero,200888cc <___vfiprintf_internal_r+0x1038>
20088140:	8005883a 	mov	r2,r16
20088144:	01c00804 	movi	r7,32
20088148:	80c00007 	ldb	r3,0(r16)
2008814c:	003e2f06 	br	20087a0c <__flash_rwdata_start+0xffff60dc>
20088150:	ad400054 	ori	r21,r21,1
20088154:	8005883a 	mov	r2,r16
20088158:	80c00007 	ldb	r3,0(r16)
2008815c:	003e2b06 	br	20087a0c <__flash_rwdata_start+0xffff60dc>
20088160:	d8c02217 	ldw	r3,136(sp)
20088164:	1c800017 	ldw	r18,0(r3)
20088168:	18c00104 	addi	r3,r3,4
2008816c:	90023816 	blt	r18,zero,20088a50 <___vfiprintf_internal_r+0x11bc>
20088170:	d8c02215 	stw	r3,136(sp)
20088174:	8005883a 	mov	r2,r16
20088178:	80c00007 	ldb	r3,0(r16)
2008817c:	003e2306 	br	20087a0c <__flash_rwdata_start+0xffff60dc>
20088180:	8005883a 	mov	r2,r16
20088184:	01c00ac4 	movi	r7,43
20088188:	80c00007 	ldb	r3,0(r16)
2008818c:	003e1f06 	br	20087a0c <__flash_rwdata_start+0xffff60dc>
20088190:	d8c02217 	ldw	r3,136(sp)
20088194:	04400044 	movi	r17,1
20088198:	d8001d85 	stb	zero,118(sp)
2008819c:	18800017 	ldw	r2,0(r3)
200881a0:	18c00104 	addi	r3,r3,4
200881a4:	d8c02215 	stw	r3,136(sp)
200881a8:	d8801005 	stb	r2,64(sp)
200881ac:	8827883a 	mov	r19,r17
200881b0:	dd001004 	addi	r20,sp,64
200881b4:	0013883a 	mov	r9,zero
200881b8:	003eb806 	br	20087c9c <__flash_rwdata_start+0xffff636c>
200881bc:	d9c01d85 	stb	r7,118(sp)
200881c0:	a880080c 	andi	r2,r21,32
200881c4:	d8c02217 	ldw	r3,136(sp)
200881c8:	103fa61e 	bne	r2,zero,20088064 <__flash_rwdata_start+0xffff6734>
200881cc:	a880040c 	andi	r2,r21,16
200881d0:	1001dd26 	beq	r2,zero,20088948 <___vfiprintf_internal_r+0x10b4>
200881d4:	1d800017 	ldw	r22,0(r3)
200881d8:	d8802217 	ldw	r2,136(sp)
200881dc:	b01bd7fa 	srai	r13,r22,31
200881e0:	10800104 	addi	r2,r2,4
200881e4:	d8802215 	stw	r2,136(sp)
200881e8:	6805883a 	mov	r2,r13
200881ec:	003fa306 	br	2008807c <__flash_rwdata_start+0xffff674c>
200881f0:	00800034 	movhi	r2,0
200881f4:	10801e04 	addi	r2,r2,120
200881f8:	d8802615 	stw	r2,152(sp)
200881fc:	d9c01d85 	stb	r7,118(sp)
20088200:	a880080c 	andi	r2,r21,32
20088204:	10004726 	beq	r2,zero,20088324 <___vfiprintf_internal_r+0xa90>
20088208:	d9002217 	ldw	r4,136(sp)
2008820c:	25800017 	ldw	r22,0(r4)
20088210:	23400117 	ldw	r13,4(r4)
20088214:	21000204 	addi	r4,r4,8
20088218:	d9002215 	stw	r4,136(sp)
2008821c:	a880004c 	andi	r2,r21,1
20088220:	10014e26 	beq	r2,zero,2008875c <___vfiprintf_internal_r+0xec8>
20088224:	b348b03a 	or	r4,r22,r13
20088228:	20019c26 	beq	r4,zero,2008889c <___vfiprintf_internal_r+0x1008>
2008822c:	00800c04 	movi	r2,48
20088230:	d8801d05 	stb	r2,116(sp)
20088234:	d8c01d45 	stb	r3,117(sp)
20088238:	ad400094 	ori	r21,r21,2
2008823c:	00800084 	movi	r2,2
20088240:	003e7206 	br	20087c0c <__flash_rwdata_start+0xffff62dc>
20088244:	d8c02217 	ldw	r3,136(sp)
20088248:	d8001d85 	stb	zero,118(sp)
2008824c:	1d000017 	ldw	r20,0(r3)
20088250:	1d800104 	addi	r22,r3,4
20088254:	a0021c26 	beq	r20,zero,20088ac8 <___vfiprintf_internal_r+0x1234>
20088258:	a009883a 	mov	r4,r20
2008825c:	48020016 	blt	r9,zero,20088a60 <___vfiprintf_internal_r+0x11cc>
20088260:	480d883a 	mov	r6,r9
20088264:	000b883a 	mov	r5,zero
20088268:	da002a15 	stw	r8,168(sp)
2008826c:	da402b15 	stw	r9,172(sp)
20088270:	0085b840 	call	20085b84 <memchr>
20088274:	da002a17 	ldw	r8,168(sp)
20088278:	da402b17 	ldw	r9,172(sp)
2008827c:	10022226 	beq	r2,zero,20088b08 <___vfiprintf_internal_r+0x1274>
20088280:	1527c83a 	sub	r19,r2,r20
20088284:	4cc1c916 	blt	r9,r19,200889ac <___vfiprintf_internal_r+0x1118>
20088288:	db801d83 	ldbu	r14,118(sp)
2008828c:	dd802215 	stw	r22,136(sp)
20088290:	0013883a 	mov	r9,zero
20088294:	003e7906 	br	20087c7c <__flash_rwdata_start+0xffff634c>
20088298:	ad401014 	ori	r21,r21,64
2008829c:	8005883a 	mov	r2,r16
200882a0:	80c00007 	ldb	r3,0(r16)
200882a4:	003dd906 	br	20087a0c <__flash_rwdata_start+0xffff60dc>
200882a8:	80c00007 	ldb	r3,0(r16)
200882ac:	8005883a 	mov	r2,r16
200882b0:	1b01e326 	beq	r3,r12,20088a40 <___vfiprintf_internal_r+0x11ac>
200882b4:	ad400414 	ori	r21,r21,16
200882b8:	003dd406 	br	20087a0c <__flash_rwdata_start+0xffff60dc>
200882bc:	d9002217 	ldw	r4,136(sp)
200882c0:	00800c04 	movi	r2,48
200882c4:	d8801d05 	stb	r2,116(sp)
200882c8:	25800017 	ldw	r22,0(r4)
200882cc:	00801e04 	movi	r2,120
200882d0:	d8801d45 	stb	r2,117(sp)
200882d4:	00800034 	movhi	r2,0
200882d8:	21000104 	addi	r4,r4,4
200882dc:	10802304 	addi	r2,r2,140
200882e0:	d9002215 	stw	r4,136(sp)
200882e4:	d8802615 	stw	r2,152(sp)
200882e8:	001b883a 	mov	r13,zero
200882ec:	ad400094 	ori	r21,r21,2
200882f0:	00800084 	movi	r2,2
200882f4:	b009883a 	mov	r4,r22
200882f8:	003e4406 	br	20087c0c <__flash_rwdata_start+0xffff62dc>
200882fc:	ad400814 	ori	r21,r21,32
20088300:	8005883a 	mov	r2,r16
20088304:	80c00007 	ldb	r3,0(r16)
20088308:	003dc006 	br	20087a0c <__flash_rwdata_start+0xffff60dc>
2008830c:	00800034 	movhi	r2,0
20088310:	10802304 	addi	r2,r2,140
20088314:	d8802615 	stw	r2,152(sp)
20088318:	d9c01d85 	stb	r7,118(sp)
2008831c:	a880080c 	andi	r2,r21,32
20088320:	103fb91e 	bne	r2,zero,20088208 <__flash_rwdata_start+0xffff68d8>
20088324:	a880040c 	andi	r2,r21,16
20088328:	10010f1e 	bne	r2,zero,20088768 <___vfiprintf_internal_r+0xed4>
2008832c:	a880100c 	andi	r2,r21,64
20088330:	10010d26 	beq	r2,zero,20088768 <___vfiprintf_internal_r+0xed4>
20088334:	d9002217 	ldw	r4,136(sp)
20088338:	001b883a 	mov	r13,zero
2008833c:	2580000b 	ldhu	r22,0(r4)
20088340:	21000104 	addi	r4,r4,4
20088344:	d9002215 	stw	r4,136(sp)
20088348:	003fb406 	br	2008821c <__flash_rwdata_start+0xffff68ec>
2008834c:	d9002217 	ldw	r4,136(sp)
20088350:	00800044 	movi	r2,1
20088354:	25800017 	ldw	r22,0(r4)
20088358:	23400117 	ldw	r13,4(r4)
2008835c:	21000204 	addi	r4,r4,8
20088360:	d9002215 	stw	r4,136(sp)
20088364:	b348b03a 	or	r4,r22,r13
20088368:	003e2806 	br	20087c0c <__flash_rwdata_start+0xffff62dc>
2008836c:	d9c01d85 	stb	r7,118(sp)
20088370:	1801ab26 	beq	r3,zero,20088a20 <___vfiprintf_internal_r+0x118c>
20088374:	04400044 	movi	r17,1
20088378:	d8c01005 	stb	r3,64(sp)
2008837c:	d8001d85 	stb	zero,118(sp)
20088380:	8827883a 	mov	r19,r17
20088384:	dd001004 	addi	r20,sp,64
20088388:	003f8a06 	br	200881b4 <__flash_rwdata_start+0xffff6884>
2008838c:	d9002017 	ldw	r4,128(sp)
20088390:	d9402117 	ldw	r5,132(sp)
20088394:	d9801a04 	addi	r6,sp,104
20088398:	d9c02b15 	stw	r7,172(sp)
2008839c:	dbc02a15 	stw	r15,168(sp)
200883a0:	00877800 	call	20087780 <__sprint_r.part.0>
200883a4:	d9c02b17 	ldw	r7,172(sp)
200883a8:	dbc02a17 	ldw	r15,168(sp)
200883ac:	1000631e 	bne	r2,zero,2008853c <___vfiprintf_internal_r+0xca8>
200883b0:	d9801b17 	ldw	r6,108(sp)
200883b4:	d8801c17 	ldw	r2,112(sp)
200883b8:	d811883a 	mov	r8,sp
200883bc:	31400044 	addi	r5,r6,1
200883c0:	003e4d06 	br	20087cf8 <__flash_rwdata_start+0xffff63c8>
200883c4:	d9401b17 	ldw	r5,108(sp)
200883c8:	d8801c17 	ldw	r2,112(sp)
200883cc:	29000044 	addi	r4,r5,1
200883d0:	d8c01d87 	ldb	r3,118(sp)
200883d4:	183e6726 	beq	r3,zero,20087d74 <__flash_rwdata_start+0xffff6444>
200883d8:	00c00044 	movi	r3,1
200883dc:	d9401d84 	addi	r5,sp,118
200883e0:	10c5883a 	add	r2,r2,r3
200883e4:	41400015 	stw	r5,0(r8)
200883e8:	40c00115 	stw	r3,4(r8)
200883ec:	d8801c15 	stw	r2,112(sp)
200883f0:	d9001b15 	stw	r4,108(sp)
200883f4:	014001c4 	movi	r5,7
200883f8:	2900ab16 	blt	r5,r4,200886a8 <___vfiprintf_internal_r+0xe14>
200883fc:	200b883a 	mov	r5,r4
20088400:	42000204 	addi	r8,r8,8
20088404:	21000044 	addi	r4,r4,1
20088408:	003e5a06 	br	20087d74 <__flash_rwdata_start+0xffff6444>
2008840c:	d9002017 	ldw	r4,128(sp)
20088410:	d9402117 	ldw	r5,132(sp)
20088414:	d9801a04 	addi	r6,sp,104
20088418:	d9c02b15 	stw	r7,172(sp)
2008841c:	db402a15 	stw	r13,168(sp)
20088420:	00877800 	call	20087780 <__sprint_r.part.0>
20088424:	d9c02b17 	ldw	r7,172(sp)
20088428:	db402a17 	ldw	r13,168(sp)
2008842c:	1000431e 	bne	r2,zero,2008853c <___vfiprintf_internal_r+0xca8>
20088430:	d9401b17 	ldw	r5,108(sp)
20088434:	d8801c17 	ldw	r2,112(sp)
20088438:	d811883a 	mov	r8,sp
2008843c:	29000044 	addi	r4,r5,1
20088440:	003e6706 	br	20087de0 <__flash_rwdata_start+0xffff64b0>
20088444:	10803fcc 	andi	r2,r2,255
20088448:	00c00044 	movi	r3,1
2008844c:	10fdfa1e 	bne	r2,r3,20087c38 <__flash_rwdata_start+0xffff6308>
20088450:	6800021e 	bne	r13,zero,2008845c <___vfiprintf_internal_r+0xbc8>
20088454:	00800244 	movi	r2,9
20088458:	1580222e 	bgeu	r2,r22,200884e4 <___vfiprintf_internal_r+0xc50>
2008845c:	dc802415 	stw	r18,144(sp)
20088460:	dc002515 	stw	r16,148(sp)
20088464:	dc401a04 	addi	r17,sp,104
20088468:	b021883a 	mov	r16,r22
2008846c:	4827883a 	mov	r19,r9
20088470:	4029883a 	mov	r20,r8
20088474:	702d883a 	mov	r22,r14
20088478:	6825883a 	mov	r18,r13
2008847c:	8009883a 	mov	r4,r16
20088480:	900b883a 	mov	r5,r18
20088484:	01800284 	movi	r6,10
20088488:	000f883a 	mov	r7,zero
2008848c:	0089afc0 	call	20089afc <__umoddi3>
20088490:	10800c04 	addi	r2,r2,48
20088494:	8c7fffc4 	addi	r17,r17,-1
20088498:	8009883a 	mov	r4,r16
2008849c:	900b883a 	mov	r5,r18
200884a0:	01800284 	movi	r6,10
200884a4:	000f883a 	mov	r7,zero
200884a8:	88800005 	stb	r2,0(r17)
200884ac:	008953c0 	call	2008953c <__udivdi3>
200884b0:	1021883a 	mov	r16,r2
200884b4:	10c4b03a 	or	r2,r2,r3
200884b8:	1825883a 	mov	r18,r3
200884bc:	103fef1e 	bne	r2,zero,2008847c <__flash_rwdata_start+0xffff6b4c>
200884c0:	dc802417 	ldw	r18,144(sp)
200884c4:	dc002517 	ldw	r16,148(sp)
200884c8:	a011883a 	mov	r8,r20
200884cc:	9813883a 	mov	r9,r19
200884d0:	b01d883a 	mov	r14,r22
200884d4:	8829883a 	mov	r20,r17
200884d8:	d8c01e17 	ldw	r3,120(sp)
200884dc:	1d27c83a 	sub	r19,r3,r20
200884e0:	003de606 	br	20087c7c <__flash_rwdata_start+0xffff634c>
200884e4:	b5800c04 	addi	r22,r22,48
200884e8:	dd8019c5 	stb	r22,103(sp)
200884ec:	dcc02717 	ldw	r19,156(sp)
200884f0:	dd0019c4 	addi	r20,sp,103
200884f4:	003de106 	br	20087c7c <__flash_rwdata_start+0xffff634c>
200884f8:	d9002017 	ldw	r4,128(sp)
200884fc:	d9402117 	ldw	r5,132(sp)
20088500:	d9801a04 	addi	r6,sp,104
20088504:	00877800 	call	20087780 <__sprint_r.part.0>
20088508:	10000c1e 	bne	r2,zero,2008853c <___vfiprintf_internal_r+0xca8>
2008850c:	d8801c17 	ldw	r2,112(sp)
20088510:	8c80010e 	bge	r17,r18,20088518 <___vfiprintf_internal_r+0xc84>
20088514:	9023883a 	mov	r17,r18
20088518:	d8c02317 	ldw	r3,140(sp)
2008851c:	1c47883a 	add	r3,r3,r17
20088520:	d8c02315 	stw	r3,140(sp)
20088524:	103e7e26 	beq	r2,zero,20087f20 <__flash_rwdata_start+0xffff65f0>
20088528:	d9002017 	ldw	r4,128(sp)
2008852c:	d9402117 	ldw	r5,132(sp)
20088530:	d9801a04 	addi	r6,sp,104
20088534:	00877800 	call	20087780 <__sprint_r.part.0>
20088538:	103e7926 	beq	r2,zero,20087f20 <__flash_rwdata_start+0xffff65f0>
2008853c:	dd402117 	ldw	r21,132(sp)
20088540:	a880030b 	ldhu	r2,12(r21)
20088544:	1080100c 	andi	r2,r2,64
20088548:	103e881e 	bne	r2,zero,20087f6c <__flash_rwdata_start+0xffff663c>
2008854c:	d8802317 	ldw	r2,140(sp)
20088550:	003e8706 	br	20087f70 <__flash_rwdata_start+0xffff6640>
20088554:	d9402117 	ldw	r5,132(sp)
20088558:	b009883a 	mov	r4,r22
2008855c:	d9801a04 	addi	r6,sp,104
20088560:	00877800 	call	20087780 <__sprint_r.part.0>
20088564:	103ff51e 	bne	r2,zero,2008853c <__flash_rwdata_start+0xffff6c0c>
20088568:	d9001b17 	ldw	r4,108(sp)
2008856c:	d8801c17 	ldw	r2,112(sp)
20088570:	d811883a 	mov	r8,sp
20088574:	21400044 	addi	r5,r4,1
20088578:	003e4d06 	br	20087eb0 <__flash_rwdata_start+0xffff6580>
2008857c:	1000aa1e 	bne	r2,zero,20088828 <___vfiprintf_internal_r+0xf94>
20088580:	00c00044 	movi	r3,1
20088584:	9805883a 	mov	r2,r19
20088588:	dd000015 	stw	r20,0(sp)
2008858c:	dcc00115 	stw	r19,4(sp)
20088590:	dcc01c15 	stw	r19,112(sp)
20088594:	d8c01b15 	stw	r3,108(sp)
20088598:	d811883a 	mov	r8,sp
2008859c:	42000204 	addi	r8,r8,8
200885a0:	aac0010c 	andi	r11,r21,4
200885a4:	583fda26 	beq	r11,zero,20088510 <__flash_rwdata_start+0xffff6be0>
200885a8:	9467c83a 	sub	r19,r18,r17
200885ac:	04fe3316 	blt	zero,r19,20087e7c <__flash_rwdata_start+0xffff654c>
200885b0:	003fd706 	br	20088510 <__flash_rwdata_start+0xffff6be0>
200885b4:	946dc83a 	sub	r22,r18,r17
200885b8:	05bdfd0e 	bge	zero,r22,20087db0 <__flash_rwdata_start+0xffff6480>
200885bc:	00c00034 	movhi	r3,0
200885c0:	18c08404 	addi	r3,r3,528
200885c4:	01c00404 	movi	r7,16
200885c8:	d8c02415 	stw	r3,144(sp)
200885cc:	3d81530e 	bge	r7,r22,20088b1c <___vfiprintf_internal_r+0x1288>
200885d0:	8007883a 	mov	r3,r16
200885d4:	034001c4 	movi	r13,7
200885d8:	b021883a 	mov	r16,r22
200885dc:	da402515 	stw	r9,148(sp)
200885e0:	182d883a 	mov	r22,r3
200885e4:	00000506 	br	200885fc <___vfiprintf_internal_r+0xd68>
200885e8:	29800084 	addi	r6,r5,2
200885ec:	42000204 	addi	r8,r8,8
200885f0:	180b883a 	mov	r5,r3
200885f4:	843ffc04 	addi	r16,r16,-16
200885f8:	3c000d0e 	bge	r7,r16,20088630 <___vfiprintf_internal_r+0xd9c>
200885fc:	10800404 	addi	r2,r2,16
20088600:	28c00044 	addi	r3,r5,1
20088604:	45c00015 	stw	r23,0(r8)
20088608:	41c00115 	stw	r7,4(r8)
2008860c:	d8801c15 	stw	r2,112(sp)
20088610:	d8c01b15 	stw	r3,108(sp)
20088614:	68fff40e 	bge	r13,r3,200885e8 <__flash_rwdata_start+0xffff6cb8>
20088618:	1000151e 	bne	r2,zero,20088670 <___vfiprintf_internal_r+0xddc>
2008861c:	843ffc04 	addi	r16,r16,-16
20088620:	01800044 	movi	r6,1
20088624:	000b883a 	mov	r5,zero
20088628:	d811883a 	mov	r8,sp
2008862c:	3c3ff316 	blt	r7,r16,200885fc <__flash_rwdata_start+0xffff6ccc>
20088630:	da402517 	ldw	r9,148(sp)
20088634:	b007883a 	mov	r3,r22
20088638:	802d883a 	mov	r22,r16
2008863c:	1821883a 	mov	r16,r3
20088640:	d8c02417 	ldw	r3,144(sp)
20088644:	1585883a 	add	r2,r2,r22
20088648:	45800115 	stw	r22,4(r8)
2008864c:	40c00015 	stw	r3,0(r8)
20088650:	d8801c15 	stw	r2,112(sp)
20088654:	d9801b15 	stw	r6,108(sp)
20088658:	00c001c4 	movi	r3,7
2008865c:	19806d16 	blt	r3,r6,20088814 <___vfiprintf_internal_r+0xf80>
20088660:	42000204 	addi	r8,r8,8
20088664:	31000044 	addi	r4,r6,1
20088668:	300b883a 	mov	r5,r6
2008866c:	003dd006 	br	20087db0 <__flash_rwdata_start+0xffff6480>
20088670:	d9002017 	ldw	r4,128(sp)
20088674:	d9402117 	ldw	r5,132(sp)
20088678:	d9801a04 	addi	r6,sp,104
2008867c:	d9c02b15 	stw	r7,172(sp)
20088680:	db402a15 	stw	r13,168(sp)
20088684:	00877800 	call	20087780 <__sprint_r.part.0>
20088688:	d9c02b17 	ldw	r7,172(sp)
2008868c:	db402a17 	ldw	r13,168(sp)
20088690:	103faa1e 	bne	r2,zero,2008853c <__flash_rwdata_start+0xffff6c0c>
20088694:	d9401b17 	ldw	r5,108(sp)
20088698:	d8801c17 	ldw	r2,112(sp)
2008869c:	d811883a 	mov	r8,sp
200886a0:	29800044 	addi	r6,r5,1
200886a4:	003fd306 	br	200885f4 <__flash_rwdata_start+0xffff6cc4>
200886a8:	1000401e 	bne	r2,zero,200887ac <___vfiprintf_internal_r+0xf18>
200886ac:	68003b26 	beq	r13,zero,2008879c <___vfiprintf_internal_r+0xf08>
200886b0:	d9001d04 	addi	r4,sp,116
200886b4:	00800084 	movi	r2,2
200886b8:	d9000015 	stw	r4,0(sp)
200886bc:	d8800115 	stw	r2,4(sp)
200886c0:	1809883a 	mov	r4,r3
200886c4:	d811883a 	mov	r8,sp
200886c8:	003db406 	br	20087d9c <__flash_rwdata_start+0xffff646c>
200886cc:	1000451e 	bne	r2,zero,200887e4 <___vfiprintf_internal_r+0xf50>
200886d0:	01000044 	movi	r4,1
200886d4:	000b883a 	mov	r5,zero
200886d8:	d811883a 	mov	r8,sp
200886dc:	003db206 	br	20087da8 <__flash_rwdata_start+0xffff6478>
200886e0:	10803fcc 	andi	r2,r2,255
200886e4:	1000071e 	bne	r2,zero,20088704 <___vfiprintf_internal_r+0xe70>
200886e8:	a880004c 	andi	r2,r21,1
200886ec:	10000526 	beq	r2,zero,20088704 <___vfiprintf_internal_r+0xe70>
200886f0:	00800c04 	movi	r2,48
200886f4:	d88019c5 	stb	r2,103(sp)
200886f8:	dcc02717 	ldw	r19,156(sp)
200886fc:	dd0019c4 	addi	r20,sp,103
20088700:	003d5e06 	br	20087c7c <__flash_rwdata_start+0xffff634c>
20088704:	dd001a04 	addi	r20,sp,104
20088708:	003d5c06 	br	20087c7c <__flash_rwdata_start+0xffff634c>
2008870c:	1000971e 	bne	r2,zero,2008896c <___vfiprintf_internal_r+0x10d8>
20088710:	d8c01d87 	ldb	r3,118(sp)
20088714:	18005826 	beq	r3,zero,20088878 <___vfiprintf_internal_r+0xfe4>
20088718:	00800044 	movi	r2,1
2008871c:	d8c01d84 	addi	r3,sp,118
20088720:	1009883a 	mov	r4,r2
20088724:	d8c00015 	stw	r3,0(sp)
20088728:	d8800115 	stw	r2,4(sp)
2008872c:	d811883a 	mov	r8,sp
20088730:	003f3206 	br	200883fc <__flash_rwdata_start+0xffff6acc>
20088734:	8023883a 	mov	r17,r16
20088738:	003ca706 	br	200879d8 <__flash_rwdata_start+0xffff60a8>
2008873c:	d9002017 	ldw	r4,128(sp)
20088740:	d9402117 	ldw	r5,132(sp)
20088744:	d9801a04 	addi	r6,sp,104
20088748:	00877800 	call	20087780 <__sprint_r.part.0>
2008874c:	103f7b1e 	bne	r2,zero,2008853c <__flash_rwdata_start+0xffff6c0c>
20088750:	d8801c17 	ldw	r2,112(sp)
20088754:	d811883a 	mov	r8,sp
20088758:	003f9106 	br	200885a0 <__flash_rwdata_start+0xffff6c70>
2008875c:	00800084 	movi	r2,2
20088760:	b348b03a 	or	r4,r22,r13
20088764:	003d2906 	br	20087c0c <__flash_rwdata_start+0xffff62dc>
20088768:	d8802217 	ldw	r2,136(sp)
2008876c:	001b883a 	mov	r13,zero
20088770:	15800017 	ldw	r22,0(r2)
20088774:	10800104 	addi	r2,r2,4
20088778:	d8802215 	stw	r2,136(sp)
2008877c:	003ea706 	br	2008821c <__flash_rwdata_start+0xffff68ec>
20088780:	d9002017 	ldw	r4,128(sp)
20088784:	d9402117 	ldw	r5,132(sp)
20088788:	d9801a04 	addi	r6,sp,104
2008878c:	00877800 	call	20087780 <__sprint_r.part.0>
20088790:	103f6a1e 	bne	r2,zero,2008853c <__flash_rwdata_start+0xffff6c0c>
20088794:	d811883a 	mov	r8,sp
20088798:	003cff06 	br	20087b98 <__flash_rwdata_start+0xffff6268>
2008879c:	000b883a 	mov	r5,zero
200887a0:	1809883a 	mov	r4,r3
200887a4:	d811883a 	mov	r8,sp
200887a8:	003d7f06 	br	20087da8 <__flash_rwdata_start+0xffff6478>
200887ac:	d9002017 	ldw	r4,128(sp)
200887b0:	d9402117 	ldw	r5,132(sp)
200887b4:	d9801a04 	addi	r6,sp,104
200887b8:	da402b15 	stw	r9,172(sp)
200887bc:	db402a15 	stw	r13,168(sp)
200887c0:	00877800 	call	20087780 <__sprint_r.part.0>
200887c4:	da402b17 	ldw	r9,172(sp)
200887c8:	db402a17 	ldw	r13,168(sp)
200887cc:	103f5b1e 	bne	r2,zero,2008853c <__flash_rwdata_start+0xffff6c0c>
200887d0:	d9401b17 	ldw	r5,108(sp)
200887d4:	d8801c17 	ldw	r2,112(sp)
200887d8:	d811883a 	mov	r8,sp
200887dc:	29000044 	addi	r4,r5,1
200887e0:	003d6406 	br	20087d74 <__flash_rwdata_start+0xffff6444>
200887e4:	d9002017 	ldw	r4,128(sp)
200887e8:	d9402117 	ldw	r5,132(sp)
200887ec:	d9801a04 	addi	r6,sp,104
200887f0:	da402b15 	stw	r9,172(sp)
200887f4:	00877800 	call	20087780 <__sprint_r.part.0>
200887f8:	da402b17 	ldw	r9,172(sp)
200887fc:	103f4f1e 	bne	r2,zero,2008853c <__flash_rwdata_start+0xffff6c0c>
20088800:	d9401b17 	ldw	r5,108(sp)
20088804:	d8801c17 	ldw	r2,112(sp)
20088808:	d811883a 	mov	r8,sp
2008880c:	29000044 	addi	r4,r5,1
20088810:	003d6506 	br	20087da8 <__flash_rwdata_start+0xffff6478>
20088814:	10009a1e 	bne	r2,zero,20088a80 <___vfiprintf_internal_r+0x11ec>
20088818:	01000044 	movi	r4,1
2008881c:	000b883a 	mov	r5,zero
20088820:	d811883a 	mov	r8,sp
20088824:	003d6206 	br	20087db0 <__flash_rwdata_start+0xffff6480>
20088828:	d9002017 	ldw	r4,128(sp)
2008882c:	d9402117 	ldw	r5,132(sp)
20088830:	d9801a04 	addi	r6,sp,104
20088834:	00877800 	call	20087780 <__sprint_r.part.0>
20088838:	103f401e 	bne	r2,zero,2008853c <__flash_rwdata_start+0xffff6c0c>
2008883c:	d9001b17 	ldw	r4,108(sp)
20088840:	d8801c17 	ldw	r2,112(sp)
20088844:	d811883a 	mov	r8,sp
20088848:	21000044 	addi	r4,r4,1
2008884c:	003d7d06 	br	20087e44 <__flash_rwdata_start+0xffff6514>
20088850:	05adc83a 	sub	r22,zero,r22
20088854:	b004c03a 	cmpne	r2,r22,zero
20088858:	035bc83a 	sub	r13,zero,r13
2008885c:	689bc83a 	sub	r13,r13,r2
20088860:	03800b44 	movi	r14,45
20088864:	db801d85 	stb	r14,118(sp)
20088868:	4827883a 	mov	r19,r9
2008886c:	00800044 	movi	r2,1
20088870:	b348b03a 	or	r4,r22,r13
20088874:	003ce806 	br	20087c18 <__flash_rwdata_start+0xffff62e8>
20088878:	000b883a 	mov	r5,zero
2008887c:	01000044 	movi	r4,1
20088880:	d811883a 	mov	r8,sp
20088884:	683d4826 	beq	r13,zero,20087da8 <__flash_rwdata_start+0xffff6478>
20088888:	00800084 	movi	r2,2
2008888c:	d8c01d04 	addi	r3,sp,116
20088890:	d8c00015 	stw	r3,0(sp)
20088894:	d8800115 	stw	r2,4(sp)
20088898:	003d4006 	br	20087d9c <__flash_rwdata_start+0xffff646c>
2008889c:	00800084 	movi	r2,2
200888a0:	003cda06 	br	20087c0c <__flash_rwdata_start+0xffff62dc>
200888a4:	a880100c 	andi	r2,r21,64
200888a8:	10004226 	beq	r2,zero,200889b4 <___vfiprintf_internal_r+0x1120>
200888ac:	d8802217 	ldw	r2,136(sp)
200888b0:	001b883a 	mov	r13,zero
200888b4:	1580000b 	ldhu	r22,0(r2)
200888b8:	10800104 	addi	r2,r2,4
200888bc:	d8802215 	stw	r2,136(sp)
200888c0:	b009883a 	mov	r4,r22
200888c4:	0005883a 	mov	r2,zero
200888c8:	003cd006 	br	20087c0c <__flash_rwdata_start+0xffff62dc>
200888cc:	80c00007 	ldb	r3,0(r16)
200888d0:	8005883a 	mov	r2,r16
200888d4:	003c4d06 	br	20087a0c <__flash_rwdata_start+0xffff60dc>
200888d8:	a880100c 	andi	r2,r21,64
200888dc:	10004426 	beq	r2,zero,200889f0 <___vfiprintf_internal_r+0x115c>
200888e0:	d8c02217 	ldw	r3,136(sp)
200888e4:	001b883a 	mov	r13,zero
200888e8:	00800044 	movi	r2,1
200888ec:	1d80000b 	ldhu	r22,0(r3)
200888f0:	18c00104 	addi	r3,r3,4
200888f4:	d8c02215 	stw	r3,136(sp)
200888f8:	b009883a 	mov	r4,r22
200888fc:	003cc306 	br	20087c0c <__flash_rwdata_start+0xffff62dc>
20088900:	a880040c 	andi	r2,r21,16
20088904:	1000091e 	bne	r2,zero,2008892c <___vfiprintf_internal_r+0x1098>
20088908:	aac0100c 	andi	r11,r21,64
2008890c:	58000726 	beq	r11,zero,2008892c <___vfiprintf_internal_r+0x1098>
20088910:	d8c02217 	ldw	r3,136(sp)
20088914:	d9002317 	ldw	r4,140(sp)
20088918:	18800017 	ldw	r2,0(r3)
2008891c:	18c00104 	addi	r3,r3,4
20088920:	d8c02215 	stw	r3,136(sp)
20088924:	1100000d 	sth	r4,0(r2)
20088928:	003c0e06 	br	20087964 <__flash_rwdata_start+0xffff6034>
2008892c:	d8c02217 	ldw	r3,136(sp)
20088930:	d9002317 	ldw	r4,140(sp)
20088934:	18800017 	ldw	r2,0(r3)
20088938:	18c00104 	addi	r3,r3,4
2008893c:	d8c02215 	stw	r3,136(sp)
20088940:	11000015 	stw	r4,0(r2)
20088944:	003c0706 	br	20087964 <__flash_rwdata_start+0xffff6034>
20088948:	a880100c 	andi	r2,r21,64
2008894c:	10002126 	beq	r2,zero,200889d4 <___vfiprintf_internal_r+0x1140>
20088950:	1d80000f 	ldh	r22,0(r3)
20088954:	d8c02217 	ldw	r3,136(sp)
20088958:	b01bd7fa 	srai	r13,r22,31
2008895c:	18c00104 	addi	r3,r3,4
20088960:	d8c02215 	stw	r3,136(sp)
20088964:	6805883a 	mov	r2,r13
20088968:	003dc406 	br	2008807c <__flash_rwdata_start+0xffff674c>
2008896c:	d9002017 	ldw	r4,128(sp)
20088970:	d9402117 	ldw	r5,132(sp)
20088974:	d9801a04 	addi	r6,sp,104
20088978:	da402b15 	stw	r9,172(sp)
2008897c:	db402a15 	stw	r13,168(sp)
20088980:	00877800 	call	20087780 <__sprint_r.part.0>
20088984:	da402b17 	ldw	r9,172(sp)
20088988:	db402a17 	ldw	r13,168(sp)
2008898c:	103eeb1e 	bne	r2,zero,2008853c <__flash_rwdata_start+0xffff6c0c>
20088990:	d9401b17 	ldw	r5,108(sp)
20088994:	d8801c17 	ldw	r2,112(sp)
20088998:	d811883a 	mov	r8,sp
2008899c:	29000044 	addi	r4,r5,1
200889a0:	003e8b06 	br	200883d0 <__flash_rwdata_start+0xffff6aa0>
200889a4:	9023883a 	mov	r17,r18
200889a8:	003d5a06 	br	20087f14 <__flash_rwdata_start+0xffff65e4>
200889ac:	4827883a 	mov	r19,r9
200889b0:	003e3506 	br	20088288 <__flash_rwdata_start+0xffff6958>
200889b4:	d8c02217 	ldw	r3,136(sp)
200889b8:	001b883a 	mov	r13,zero
200889bc:	0005883a 	mov	r2,zero
200889c0:	1d800017 	ldw	r22,0(r3)
200889c4:	18c00104 	addi	r3,r3,4
200889c8:	d8c02215 	stw	r3,136(sp)
200889cc:	b009883a 	mov	r4,r22
200889d0:	003c8e06 	br	20087c0c <__flash_rwdata_start+0xffff62dc>
200889d4:	1d800017 	ldw	r22,0(r3)
200889d8:	d9002217 	ldw	r4,136(sp)
200889dc:	b01bd7fa 	srai	r13,r22,31
200889e0:	21000104 	addi	r4,r4,4
200889e4:	d9002215 	stw	r4,136(sp)
200889e8:	6805883a 	mov	r2,r13
200889ec:	003da306 	br	2008807c <__flash_rwdata_start+0xffff674c>
200889f0:	d9002217 	ldw	r4,136(sp)
200889f4:	001b883a 	mov	r13,zero
200889f8:	00800044 	movi	r2,1
200889fc:	25800017 	ldw	r22,0(r4)
20088a00:	21000104 	addi	r4,r4,4
20088a04:	d9002215 	stw	r4,136(sp)
20088a08:	b009883a 	mov	r4,r22
20088a0c:	003c7f06 	br	20087c0c <__flash_rwdata_start+0xffff62dc>
20088a10:	00c00034 	movhi	r3,0
20088a14:	18c08404 	addi	r3,r3,528
20088a18:	d8c02415 	stw	r3,144(sp)
20088a1c:	003cff06 	br	20087e1c <__flash_rwdata_start+0xffff64ec>
20088a20:	d8801c17 	ldw	r2,112(sp)
20088a24:	dd402117 	ldw	r21,132(sp)
20088a28:	103ec526 	beq	r2,zero,20088540 <__flash_rwdata_start+0xffff6c10>
20088a2c:	d9002017 	ldw	r4,128(sp)
20088a30:	a80b883a 	mov	r5,r21
20088a34:	d9801a04 	addi	r6,sp,104
20088a38:	00877800 	call	20087780 <__sprint_r.part.0>
20088a3c:	003ec006 	br	20088540 <__flash_rwdata_start+0xffff6c10>
20088a40:	80800044 	addi	r2,r16,1
20088a44:	ad400814 	ori	r21,r21,32
20088a48:	80c00047 	ldb	r3,1(r16)
20088a4c:	003bef06 	br	20087a0c <__flash_rwdata_start+0xffff60dc>
20088a50:	04a5c83a 	sub	r18,zero,r18
20088a54:	8005883a 	mov	r2,r16
20088a58:	d8c02215 	stw	r3,136(sp)
20088a5c:	003d5306 	br	20087fac <__flash_rwdata_start+0xffff667c>
20088a60:	da002a15 	stw	r8,168(sp)
20088a64:	0080d180 	call	20080d18 <strlen>
20088a68:	1027883a 	mov	r19,r2
20088a6c:	db801d83 	ldbu	r14,118(sp)
20088a70:	dd802215 	stw	r22,136(sp)
20088a74:	0013883a 	mov	r9,zero
20088a78:	da002a17 	ldw	r8,168(sp)
20088a7c:	003c7f06 	br	20087c7c <__flash_rwdata_start+0xffff634c>
20088a80:	d9002017 	ldw	r4,128(sp)
20088a84:	d9402117 	ldw	r5,132(sp)
20088a88:	d9801a04 	addi	r6,sp,104
20088a8c:	da402b15 	stw	r9,172(sp)
20088a90:	00877800 	call	20087780 <__sprint_r.part.0>
20088a94:	da402b17 	ldw	r9,172(sp)
20088a98:	103ea81e 	bne	r2,zero,2008853c <__flash_rwdata_start+0xffff6c0c>
20088a9c:	d9401b17 	ldw	r5,108(sp)
20088aa0:	d8801c17 	ldw	r2,112(sp)
20088aa4:	d811883a 	mov	r8,sp
20088aa8:	29000044 	addi	r4,r5,1
20088aac:	003cc006 	br	20087db0 <__flash_rwdata_start+0xffff6480>
20088ab0:	d9401b17 	ldw	r5,108(sp)
20088ab4:	01000034 	movhi	r4,0
20088ab8:	21008804 	addi	r4,r4,544
20088abc:	d9002415 	stw	r4,144(sp)
20088ac0:	29400044 	addi	r5,r5,1
20088ac4:	003c9f06 	br	20087d44 <__flash_rwdata_start+0xffff6414>
20088ac8:	00800184 	movi	r2,6
20088acc:	1240012e 	bgeu	r2,r9,20088ad4 <___vfiprintf_internal_r+0x1240>
20088ad0:	1013883a 	mov	r9,r2
20088ad4:	4827883a 	mov	r19,r9
20088ad8:	4823883a 	mov	r17,r9
20088adc:	48001116 	blt	r9,zero,20088b24 <___vfiprintf_internal_r+0x1290>
20088ae0:	05000034 	movhi	r20,0
20088ae4:	dd802215 	stw	r22,136(sp)
20088ae8:	a5002804 	addi	r20,r20,160
20088aec:	003db106 	br	200881b4 <__flash_rwdata_start+0xffff6884>
20088af0:	d9401b17 	ldw	r5,108(sp)
20088af4:	01000034 	movhi	r4,0
20088af8:	21008804 	addi	r4,r4,544
20088afc:	d9002415 	stw	r4,144(sp)
20088b00:	29400044 	addi	r5,r5,1
20088b04:	003cf906 	br	20087eec <__flash_rwdata_start+0xffff65bc>
20088b08:	4827883a 	mov	r19,r9
20088b0c:	db801d83 	ldbu	r14,118(sp)
20088b10:	dd802215 	stw	r22,136(sp)
20088b14:	0013883a 	mov	r9,zero
20088b18:	003c5806 	br	20087c7c <__flash_rwdata_start+0xffff634c>
20088b1c:	200d883a 	mov	r6,r4
20088b20:	003ec706 	br	20088640 <__flash_rwdata_start+0xffff6d10>
20088b24:	0023883a 	mov	r17,zero
20088b28:	003fed06 	br	20088ae0 <__flash_rwdata_start+0xffff71b0>
20088b2c:	d9002217 	ldw	r4,136(sp)
20088b30:	22400017 	ldw	r9,0(r4)
20088b34:	20c00104 	addi	r3,r4,4
20088b38:	d8c02215 	stw	r3,136(sp)
20088b3c:	483fc20e 	bge	r9,zero,20088a48 <__flash_rwdata_start+0xffff7118>
20088b40:	027fffc4 	movi	r9,-1
20088b44:	80c00047 	ldb	r3,1(r16)
20088b48:	003bb006 	br	20087a0c <__flash_rwdata_start+0xffff60dc>
20088b4c:	8c80010e 	bge	r17,r18,20088b54 <___vfiprintf_internal_r+0x12c0>
20088b50:	9023883a 	mov	r17,r18
20088b54:	d8802317 	ldw	r2,140(sp)
20088b58:	1445883a 	add	r2,r2,r17
20088b5c:	d8802315 	stw	r2,140(sp)
20088b60:	003cef06 	br	20087f20 <__flash_rwdata_start+0xffff65f0>

20088b64 <__vfiprintf_internal>:
20088b64:	2007883a 	mov	r3,r4
20088b68:	01000034 	movhi	r4,0
20088b6c:	21086104 	addi	r4,r4,8580
20088b70:	21000017 	ldw	r4,0(r4)
20088b74:	2805883a 	mov	r2,r5
20088b78:	300f883a 	mov	r7,r6
20088b7c:	180b883a 	mov	r5,r3
20088b80:	100d883a 	mov	r6,r2
20088b84:	00878941 	jmpi	20087894 <___vfiprintf_internal_r>

20088b88 <__sbprintf>:
20088b88:	2880030b 	ldhu	r2,12(r5)
20088b8c:	2ac01917 	ldw	r11,100(r5)
20088b90:	2a80038b 	ldhu	r10,14(r5)
20088b94:	2a400717 	ldw	r9,28(r5)
20088b98:	2a000917 	ldw	r8,36(r5)
20088b9c:	defee204 	addi	sp,sp,-1144
20088ba0:	00c10004 	movi	r3,1024
20088ba4:	dc011a15 	stw	r16,1128(sp)
20088ba8:	10bfff4c 	andi	r2,r2,65533
20088bac:	2821883a 	mov	r16,r5
20088bb0:	d8cb883a 	add	r5,sp,r3
20088bb4:	dc811c15 	stw	r18,1136(sp)
20088bb8:	dc411b15 	stw	r17,1132(sp)
20088bbc:	dfc11d15 	stw	ra,1140(sp)
20088bc0:	2025883a 	mov	r18,r4
20088bc4:	d881030d 	sth	r2,1036(sp)
20088bc8:	dac11915 	stw	r11,1124(sp)
20088bcc:	da81038d 	sth	r10,1038(sp)
20088bd0:	da410715 	stw	r9,1052(sp)
20088bd4:	da010915 	stw	r8,1060(sp)
20088bd8:	dec10015 	stw	sp,1024(sp)
20088bdc:	dec10415 	stw	sp,1040(sp)
20088be0:	d8c10215 	stw	r3,1032(sp)
20088be4:	d8c10515 	stw	r3,1044(sp)
20088be8:	d8010615 	stw	zero,1048(sp)
20088bec:	00878940 	call	20087894 <___vfiprintf_internal_r>
20088bf0:	1023883a 	mov	r17,r2
20088bf4:	10000416 	blt	r2,zero,20088c08 <__sbprintf+0x80>
20088bf8:	9009883a 	mov	r4,r18
20088bfc:	d9410004 	addi	r5,sp,1024
20088c00:	0084a640 	call	20084a64 <_fflush_r>
20088c04:	10000d1e 	bne	r2,zero,20088c3c <__sbprintf+0xb4>
20088c08:	d8c1030b 	ldhu	r3,1036(sp)
20088c0c:	18c0100c 	andi	r3,r3,64
20088c10:	18000326 	beq	r3,zero,20088c20 <__sbprintf+0x98>
20088c14:	8080030b 	ldhu	r2,12(r16)
20088c18:	10801014 	ori	r2,r2,64
20088c1c:	8080030d 	sth	r2,12(r16)
20088c20:	8805883a 	mov	r2,r17
20088c24:	dfc11d17 	ldw	ra,1140(sp)
20088c28:	dc811c17 	ldw	r18,1136(sp)
20088c2c:	dc411b17 	ldw	r17,1132(sp)
20088c30:	dc011a17 	ldw	r16,1128(sp)
20088c34:	dec11e04 	addi	sp,sp,1144
20088c38:	f800283a 	ret
20088c3c:	047fffc4 	movi	r17,-1
20088c40:	003ff106 	br	20088c08 <__flash_rwdata_start+0xffff72d8>

20088c44 <_write_r>:
20088c44:	defffd04 	addi	sp,sp,-12
20088c48:	dc000015 	stw	r16,0(sp)
20088c4c:	04000034 	movhi	r16,0
20088c50:	dc400115 	stw	r17,4(sp)
20088c54:	84087404 	addi	r16,r16,8656
20088c58:	2023883a 	mov	r17,r4
20088c5c:	2809883a 	mov	r4,r5
20088c60:	300b883a 	mov	r5,r6
20088c64:	380d883a 	mov	r6,r7
20088c68:	dfc00215 	stw	ra,8(sp)
20088c6c:	80000015 	stw	zero,0(r16)
20088c70:	008d0640 	call	2008d064 <write>
20088c74:	00ffffc4 	movi	r3,-1
20088c78:	10c00526 	beq	r2,r3,20088c90 <_write_r+0x4c>
20088c7c:	dfc00217 	ldw	ra,8(sp)
20088c80:	dc400117 	ldw	r17,4(sp)
20088c84:	dc000017 	ldw	r16,0(sp)
20088c88:	dec00304 	addi	sp,sp,12
20088c8c:	f800283a 	ret
20088c90:	80c00017 	ldw	r3,0(r16)
20088c94:	183ff926 	beq	r3,zero,20088c7c <__flash_rwdata_start+0xffff734c>
20088c98:	88c00015 	stw	r3,0(r17)
20088c9c:	003ff706 	br	20088c7c <__flash_rwdata_start+0xffff734c>

20088ca0 <_close_r>:
20088ca0:	defffd04 	addi	sp,sp,-12
20088ca4:	dc000015 	stw	r16,0(sp)
20088ca8:	04000034 	movhi	r16,0
20088cac:	dc400115 	stw	r17,4(sp)
20088cb0:	84087404 	addi	r16,r16,8656
20088cb4:	2023883a 	mov	r17,r4
20088cb8:	2809883a 	mov	r4,r5
20088cbc:	dfc00215 	stw	ra,8(sp)
20088cc0:	80000015 	stw	zero,0(r16)
20088cc4:	008c8080 	call	2008c808 <close>
20088cc8:	00ffffc4 	movi	r3,-1
20088ccc:	10c00526 	beq	r2,r3,20088ce4 <_close_r+0x44>
20088cd0:	dfc00217 	ldw	ra,8(sp)
20088cd4:	dc400117 	ldw	r17,4(sp)
20088cd8:	dc000017 	ldw	r16,0(sp)
20088cdc:	dec00304 	addi	sp,sp,12
20088ce0:	f800283a 	ret
20088ce4:	80c00017 	ldw	r3,0(r16)
20088ce8:	183ff926 	beq	r3,zero,20088cd0 <__flash_rwdata_start+0xffff73a0>
20088cec:	88c00015 	stw	r3,0(r17)
20088cf0:	003ff706 	br	20088cd0 <__flash_rwdata_start+0xffff73a0>

20088cf4 <_calloc_r>:
20088cf4:	298b383a 	mul	r5,r5,r6
20088cf8:	defffe04 	addi	sp,sp,-8
20088cfc:	dc000015 	stw	r16,0(sp)
20088d00:	dfc00115 	stw	ra,4(sp)
20088d04:	00803f80 	call	200803f8 <_malloc_r>
20088d08:	1021883a 	mov	r16,r2
20088d0c:	10002826 	beq	r2,zero,20088db0 <_calloc_r+0xbc>
20088d10:	11bfff17 	ldw	r6,-4(r2)
20088d14:	00bfff04 	movi	r2,-4
20088d18:	00c00904 	movi	r3,36
20088d1c:	308c703a 	and	r6,r6,r2
20088d20:	308d883a 	add	r6,r6,r2
20088d24:	19801436 	bltu	r3,r6,20088d78 <_calloc_r+0x84>
20088d28:	008004c4 	movi	r2,19
20088d2c:	11800936 	bltu	r2,r6,20088d54 <_calloc_r+0x60>
20088d30:	8005883a 	mov	r2,r16
20088d34:	10000015 	stw	zero,0(r2)
20088d38:	10000115 	stw	zero,4(r2)
20088d3c:	10000215 	stw	zero,8(r2)
20088d40:	8005883a 	mov	r2,r16
20088d44:	dfc00117 	ldw	ra,4(sp)
20088d48:	dc000017 	ldw	r16,0(sp)
20088d4c:	dec00204 	addi	sp,sp,8
20088d50:	f800283a 	ret
20088d54:	80000015 	stw	zero,0(r16)
20088d58:	80000115 	stw	zero,4(r16)
20088d5c:	008006c4 	movi	r2,27
20088d60:	11800d2e 	bgeu	r2,r6,20088d98 <_calloc_r+0xa4>
20088d64:	80000215 	stw	zero,8(r16)
20088d68:	80000315 	stw	zero,12(r16)
20088d6c:	30c00c26 	beq	r6,r3,20088da0 <_calloc_r+0xac>
20088d70:	80800404 	addi	r2,r16,16
20088d74:	003fef06 	br	20088d34 <__flash_rwdata_start+0xffff7404>
20088d78:	8009883a 	mov	r4,r16
20088d7c:	000b883a 	mov	r5,zero
20088d80:	0085f000 	call	20085f00 <memset>
20088d84:	8005883a 	mov	r2,r16
20088d88:	dfc00117 	ldw	ra,4(sp)
20088d8c:	dc000017 	ldw	r16,0(sp)
20088d90:	dec00204 	addi	sp,sp,8
20088d94:	f800283a 	ret
20088d98:	80800204 	addi	r2,r16,8
20088d9c:	003fe506 	br	20088d34 <__flash_rwdata_start+0xffff7404>
20088da0:	80000415 	stw	zero,16(r16)
20088da4:	80800604 	addi	r2,r16,24
20088da8:	80000515 	stw	zero,20(r16)
20088dac:	003fe106 	br	20088d34 <__flash_rwdata_start+0xffff7404>
20088db0:	0005883a 	mov	r2,zero
20088db4:	003fe306 	br	20088d44 <__flash_rwdata_start+0xffff7414>

20088db8 <_fclose_r>:
20088db8:	28003926 	beq	r5,zero,20088ea0 <_fclose_r+0xe8>
20088dbc:	defffc04 	addi	sp,sp,-16
20088dc0:	dc400115 	stw	r17,4(sp)
20088dc4:	dc000015 	stw	r16,0(sp)
20088dc8:	dfc00315 	stw	ra,12(sp)
20088dcc:	dc800215 	stw	r18,8(sp)
20088dd0:	2023883a 	mov	r17,r4
20088dd4:	2821883a 	mov	r16,r5
20088dd8:	20000226 	beq	r4,zero,20088de4 <_fclose_r+0x2c>
20088ddc:	20800e17 	ldw	r2,56(r4)
20088de0:	10002726 	beq	r2,zero,20088e80 <_fclose_r+0xc8>
20088de4:	8080030f 	ldh	r2,12(r16)
20088de8:	1000071e 	bne	r2,zero,20088e08 <_fclose_r+0x50>
20088dec:	0005883a 	mov	r2,zero
20088df0:	dfc00317 	ldw	ra,12(sp)
20088df4:	dc800217 	ldw	r18,8(sp)
20088df8:	dc400117 	ldw	r17,4(sp)
20088dfc:	dc000017 	ldw	r16,0(sp)
20088e00:	dec00404 	addi	sp,sp,16
20088e04:	f800283a 	ret
20088e08:	8809883a 	mov	r4,r17
20088e0c:	800b883a 	mov	r5,r16
20088e10:	008485c0 	call	2008485c <__sflush_r>
20088e14:	1025883a 	mov	r18,r2
20088e18:	80800b17 	ldw	r2,44(r16)
20088e1c:	10000426 	beq	r2,zero,20088e30 <_fclose_r+0x78>
20088e20:	81400717 	ldw	r5,28(r16)
20088e24:	8809883a 	mov	r4,r17
20088e28:	103ee83a 	callr	r2
20088e2c:	10001616 	blt	r2,zero,20088e88 <_fclose_r+0xd0>
20088e30:	8080030b 	ldhu	r2,12(r16)
20088e34:	1080200c 	andi	r2,r2,128
20088e38:	1000151e 	bne	r2,zero,20088e90 <_fclose_r+0xd8>
20088e3c:	81400c17 	ldw	r5,48(r16)
20088e40:	28000526 	beq	r5,zero,20088e58 <_fclose_r+0xa0>
20088e44:	80801004 	addi	r2,r16,64
20088e48:	28800226 	beq	r5,r2,20088e54 <_fclose_r+0x9c>
20088e4c:	8809883a 	mov	r4,r17
20088e50:	0084fb40 	call	20084fb4 <_free_r>
20088e54:	80000c15 	stw	zero,48(r16)
20088e58:	81401117 	ldw	r5,68(r16)
20088e5c:	28000326 	beq	r5,zero,20088e6c <_fclose_r+0xb4>
20088e60:	8809883a 	mov	r4,r17
20088e64:	0084fb40 	call	20084fb4 <_free_r>
20088e68:	80001115 	stw	zero,68(r16)
20088e6c:	0084e500 	call	20084e50 <__sfp_lock_acquire>
20088e70:	8000030d 	sth	zero,12(r16)
20088e74:	0084e540 	call	20084e54 <__sfp_lock_release>
20088e78:	9005883a 	mov	r2,r18
20088e7c:	003fdc06 	br	20088df0 <__flash_rwdata_start+0xffff74c0>
20088e80:	0084e400 	call	20084e40 <__sinit>
20088e84:	003fd706 	br	20088de4 <__flash_rwdata_start+0xffff74b4>
20088e88:	04bfffc4 	movi	r18,-1
20088e8c:	003fe806 	br	20088e30 <__flash_rwdata_start+0xffff7500>
20088e90:	81400417 	ldw	r5,16(r16)
20088e94:	8809883a 	mov	r4,r17
20088e98:	0084fb40 	call	20084fb4 <_free_r>
20088e9c:	003fe706 	br	20088e3c <__flash_rwdata_start+0xffff750c>
20088ea0:	0005883a 	mov	r2,zero
20088ea4:	f800283a 	ret

20088ea8 <fclose>:
20088ea8:	00800034 	movhi	r2,0
20088eac:	10886104 	addi	r2,r2,8580
20088eb0:	200b883a 	mov	r5,r4
20088eb4:	11000017 	ldw	r4,0(r2)
20088eb8:	0088db81 	jmpi	20088db8 <_fclose_r>

20088ebc <_fputwc_r>:
20088ebc:	3080030b 	ldhu	r2,12(r6)
20088ec0:	defff804 	addi	sp,sp,-32
20088ec4:	dcc00415 	stw	r19,16(sp)
20088ec8:	dc800315 	stw	r18,12(sp)
20088ecc:	dc000115 	stw	r16,4(sp)
20088ed0:	dfc00715 	stw	ra,28(sp)
20088ed4:	dd400615 	stw	r21,24(sp)
20088ed8:	dd000515 	stw	r20,20(sp)
20088edc:	dc400215 	stw	r17,8(sp)
20088ee0:	10c8000c 	andi	r3,r2,8192
20088ee4:	3021883a 	mov	r16,r6
20088ee8:	2027883a 	mov	r19,r4
20088eec:	2825883a 	mov	r18,r5
20088ef0:	1800051e 	bne	r3,zero,20088f08 <_fputwc_r+0x4c>
20088ef4:	30c01917 	ldw	r3,100(r6)
20088ef8:	10880014 	ori	r2,r2,8192
20088efc:	3080030d 	sth	r2,12(r6)
20088f00:	18880014 	ori	r2,r3,8192
20088f04:	30801915 	stw	r2,100(r6)
20088f08:	00859740 	call	20085974 <__locale_mb_cur_max>
20088f0c:	00c00044 	movi	r3,1
20088f10:	10c03e26 	beq	r2,r3,2008900c <_fputwc_r+0x150>
20088f14:	9809883a 	mov	r4,r19
20088f18:	d80b883a 	mov	r5,sp
20088f1c:	900d883a 	mov	r6,r18
20088f20:	81c01704 	addi	r7,r16,92
20088f24:	00893540 	call	20089354 <_wcrtomb_r>
20088f28:	1029883a 	mov	r20,r2
20088f2c:	00bfffc4 	movi	r2,-1
20088f30:	a0802026 	beq	r20,r2,20088fb4 <_fputwc_r+0xf8>
20088f34:	d9400003 	ldbu	r5,0(sp)
20088f38:	a0001c26 	beq	r20,zero,20088fac <_fputwc_r+0xf0>
20088f3c:	0023883a 	mov	r17,zero
20088f40:	05400284 	movi	r21,10
20088f44:	00000906 	br	20088f6c <_fputwc_r+0xb0>
20088f48:	80800017 	ldw	r2,0(r16)
20088f4c:	11400005 	stb	r5,0(r2)
20088f50:	80c00017 	ldw	r3,0(r16)
20088f54:	18c00044 	addi	r3,r3,1
20088f58:	80c00015 	stw	r3,0(r16)
20088f5c:	8c400044 	addi	r17,r17,1
20088f60:	dc45883a 	add	r2,sp,r17
20088f64:	8d00112e 	bgeu	r17,r20,20088fac <_fputwc_r+0xf0>
20088f68:	11400003 	ldbu	r5,0(r2)
20088f6c:	80c00217 	ldw	r3,8(r16)
20088f70:	18ffffc4 	addi	r3,r3,-1
20088f74:	80c00215 	stw	r3,8(r16)
20088f78:	183ff30e 	bge	r3,zero,20088f48 <__flash_rwdata_start+0xffff7618>
20088f7c:	80800617 	ldw	r2,24(r16)
20088f80:	18801916 	blt	r3,r2,20088fe8 <_fputwc_r+0x12c>
20088f84:	80800017 	ldw	r2,0(r16)
20088f88:	11400005 	stb	r5,0(r2)
20088f8c:	80800017 	ldw	r2,0(r16)
20088f90:	10c00003 	ldbu	r3,0(r2)
20088f94:	10800044 	addi	r2,r2,1
20088f98:	1d402326 	beq	r3,r21,20089028 <_fputwc_r+0x16c>
20088f9c:	80800015 	stw	r2,0(r16)
20088fa0:	8c400044 	addi	r17,r17,1
20088fa4:	dc45883a 	add	r2,sp,r17
20088fa8:	8d3fef36 	bltu	r17,r20,20088f68 <__flash_rwdata_start+0xffff7638>
20088fac:	9005883a 	mov	r2,r18
20088fb0:	00000406 	br	20088fc4 <_fputwc_r+0x108>
20088fb4:	80c0030b 	ldhu	r3,12(r16)
20088fb8:	a005883a 	mov	r2,r20
20088fbc:	18c01014 	ori	r3,r3,64
20088fc0:	80c0030d 	sth	r3,12(r16)
20088fc4:	dfc00717 	ldw	ra,28(sp)
20088fc8:	dd400617 	ldw	r21,24(sp)
20088fcc:	dd000517 	ldw	r20,20(sp)
20088fd0:	dcc00417 	ldw	r19,16(sp)
20088fd4:	dc800317 	ldw	r18,12(sp)
20088fd8:	dc400217 	ldw	r17,8(sp)
20088fdc:	dc000117 	ldw	r16,4(sp)
20088fe0:	dec00804 	addi	sp,sp,32
20088fe4:	f800283a 	ret
20088fe8:	9809883a 	mov	r4,r19
20088fec:	29403fcc 	andi	r5,r5,255
20088ff0:	800d883a 	mov	r6,r16
20088ff4:	00892000 	call	20089200 <__swbuf_r>
20088ff8:	10bfffe0 	cmpeqi	r2,r2,-1
20088ffc:	10803fcc 	andi	r2,r2,255
20089000:	103fd626 	beq	r2,zero,20088f5c <__flash_rwdata_start+0xffff762c>
20089004:	00bfffc4 	movi	r2,-1
20089008:	003fee06 	br	20088fc4 <__flash_rwdata_start+0xffff7694>
2008900c:	90ffffc4 	addi	r3,r18,-1
20089010:	01003f84 	movi	r4,254
20089014:	20ffbf36 	bltu	r4,r3,20088f14 <__flash_rwdata_start+0xffff75e4>
20089018:	900b883a 	mov	r5,r18
2008901c:	dc800005 	stb	r18,0(sp)
20089020:	1029883a 	mov	r20,r2
20089024:	003fc506 	br	20088f3c <__flash_rwdata_start+0xffff760c>
20089028:	9809883a 	mov	r4,r19
2008902c:	a80b883a 	mov	r5,r21
20089030:	800d883a 	mov	r6,r16
20089034:	00892000 	call	20089200 <__swbuf_r>
20089038:	10bfffe0 	cmpeqi	r2,r2,-1
2008903c:	003fef06 	br	20088ffc <__flash_rwdata_start+0xffff76cc>

20089040 <fputwc>:
20089040:	00800034 	movhi	r2,0
20089044:	defffc04 	addi	sp,sp,-16
20089048:	10886104 	addi	r2,r2,8580
2008904c:	dc000115 	stw	r16,4(sp)
20089050:	14000017 	ldw	r16,0(r2)
20089054:	dc400215 	stw	r17,8(sp)
20089058:	dfc00315 	stw	ra,12(sp)
2008905c:	2023883a 	mov	r17,r4
20089060:	280d883a 	mov	r6,r5
20089064:	80000626 	beq	r16,zero,20089080 <fputwc+0x40>
20089068:	80800e17 	ldw	r2,56(r16)
2008906c:	1000041e 	bne	r2,zero,20089080 <fputwc+0x40>
20089070:	8009883a 	mov	r4,r16
20089074:	d9400015 	stw	r5,0(sp)
20089078:	0084e400 	call	20084e40 <__sinit>
2008907c:	d9800017 	ldw	r6,0(sp)
20089080:	8009883a 	mov	r4,r16
20089084:	880b883a 	mov	r5,r17
20089088:	dfc00317 	ldw	ra,12(sp)
2008908c:	dc400217 	ldw	r17,8(sp)
20089090:	dc000117 	ldw	r16,4(sp)
20089094:	dec00404 	addi	sp,sp,16
20089098:	0088ebc1 	jmpi	20088ebc <_fputwc_r>

2008909c <_fstat_r>:
2008909c:	defffd04 	addi	sp,sp,-12
200890a0:	dc000015 	stw	r16,0(sp)
200890a4:	04000034 	movhi	r16,0
200890a8:	dc400115 	stw	r17,4(sp)
200890ac:	84087404 	addi	r16,r16,8656
200890b0:	2023883a 	mov	r17,r4
200890b4:	2809883a 	mov	r4,r5
200890b8:	300b883a 	mov	r5,r6
200890bc:	dfc00215 	stw	ra,8(sp)
200890c0:	80000015 	stw	zero,0(r16)
200890c4:	008c9540 	call	2008c954 <fstat>
200890c8:	00ffffc4 	movi	r3,-1
200890cc:	10c00526 	beq	r2,r3,200890e4 <_fstat_r+0x48>
200890d0:	dfc00217 	ldw	ra,8(sp)
200890d4:	dc400117 	ldw	r17,4(sp)
200890d8:	dc000017 	ldw	r16,0(sp)
200890dc:	dec00304 	addi	sp,sp,12
200890e0:	f800283a 	ret
200890e4:	80c00017 	ldw	r3,0(r16)
200890e8:	183ff926 	beq	r3,zero,200890d0 <__flash_rwdata_start+0xffff77a0>
200890ec:	88c00015 	stw	r3,0(r17)
200890f0:	003ff706 	br	200890d0 <__flash_rwdata_start+0xffff77a0>

200890f4 <_isatty_r>:
200890f4:	defffd04 	addi	sp,sp,-12
200890f8:	dc000015 	stw	r16,0(sp)
200890fc:	04000034 	movhi	r16,0
20089100:	dc400115 	stw	r17,4(sp)
20089104:	84087404 	addi	r16,r16,8656
20089108:	2023883a 	mov	r17,r4
2008910c:	2809883a 	mov	r4,r5
20089110:	dfc00215 	stw	ra,8(sp)
20089114:	80000015 	stw	zero,0(r16)
20089118:	008ca540 	call	2008ca54 <isatty>
2008911c:	00ffffc4 	movi	r3,-1
20089120:	10c00526 	beq	r2,r3,20089138 <_isatty_r+0x44>
20089124:	dfc00217 	ldw	ra,8(sp)
20089128:	dc400117 	ldw	r17,4(sp)
2008912c:	dc000017 	ldw	r16,0(sp)
20089130:	dec00304 	addi	sp,sp,12
20089134:	f800283a 	ret
20089138:	80c00017 	ldw	r3,0(r16)
2008913c:	183ff926 	beq	r3,zero,20089124 <__flash_rwdata_start+0xffff77f4>
20089140:	88c00015 	stw	r3,0(r17)
20089144:	003ff706 	br	20089124 <__flash_rwdata_start+0xffff77f4>

20089148 <_lseek_r>:
20089148:	defffd04 	addi	sp,sp,-12
2008914c:	dc000015 	stw	r16,0(sp)
20089150:	04000034 	movhi	r16,0
20089154:	dc400115 	stw	r17,4(sp)
20089158:	84087404 	addi	r16,r16,8656
2008915c:	2023883a 	mov	r17,r4
20089160:	2809883a 	mov	r4,r5
20089164:	300b883a 	mov	r5,r6
20089168:	380d883a 	mov	r6,r7
2008916c:	dfc00215 	stw	ra,8(sp)
20089170:	80000015 	stw	zero,0(r16)
20089174:	008cc2c0 	call	2008cc2c <lseek>
20089178:	00ffffc4 	movi	r3,-1
2008917c:	10c00526 	beq	r2,r3,20089194 <_lseek_r+0x4c>
20089180:	dfc00217 	ldw	ra,8(sp)
20089184:	dc400117 	ldw	r17,4(sp)
20089188:	dc000017 	ldw	r16,0(sp)
2008918c:	dec00304 	addi	sp,sp,12
20089190:	f800283a 	ret
20089194:	80c00017 	ldw	r3,0(r16)
20089198:	183ff926 	beq	r3,zero,20089180 <__flash_rwdata_start+0xffff7850>
2008919c:	88c00015 	stw	r3,0(r17)
200891a0:	003ff706 	br	20089180 <__flash_rwdata_start+0xffff7850>

200891a4 <_read_r>:
200891a4:	defffd04 	addi	sp,sp,-12
200891a8:	dc000015 	stw	r16,0(sp)
200891ac:	04000034 	movhi	r16,0
200891b0:	dc400115 	stw	r17,4(sp)
200891b4:	84087404 	addi	r16,r16,8656
200891b8:	2023883a 	mov	r17,r4
200891bc:	2809883a 	mov	r4,r5
200891c0:	300b883a 	mov	r5,r6
200891c4:	380d883a 	mov	r6,r7
200891c8:	dfc00215 	stw	ra,8(sp)
200891cc:	80000015 	stw	zero,0(r16)
200891d0:	008ce080 	call	2008ce08 <read>
200891d4:	00ffffc4 	movi	r3,-1
200891d8:	10c00526 	beq	r2,r3,200891f0 <_read_r+0x4c>
200891dc:	dfc00217 	ldw	ra,8(sp)
200891e0:	dc400117 	ldw	r17,4(sp)
200891e4:	dc000017 	ldw	r16,0(sp)
200891e8:	dec00304 	addi	sp,sp,12
200891ec:	f800283a 	ret
200891f0:	80c00017 	ldw	r3,0(r16)
200891f4:	183ff926 	beq	r3,zero,200891dc <__flash_rwdata_start+0xffff78ac>
200891f8:	88c00015 	stw	r3,0(r17)
200891fc:	003ff706 	br	200891dc <__flash_rwdata_start+0xffff78ac>

20089200 <__swbuf_r>:
20089200:	defffc04 	addi	sp,sp,-16
20089204:	dc800215 	stw	r18,8(sp)
20089208:	dc400115 	stw	r17,4(sp)
2008920c:	dc000015 	stw	r16,0(sp)
20089210:	dfc00315 	stw	ra,12(sp)
20089214:	2025883a 	mov	r18,r4
20089218:	2823883a 	mov	r17,r5
2008921c:	3021883a 	mov	r16,r6
20089220:	20000226 	beq	r4,zero,2008922c <__swbuf_r+0x2c>
20089224:	20800e17 	ldw	r2,56(r4)
20089228:	10004126 	beq	r2,zero,20089330 <__swbuf_r+0x130>
2008922c:	80c00617 	ldw	r3,24(r16)
20089230:	8180030b 	ldhu	r6,12(r16)
20089234:	80c00215 	stw	r3,8(r16)
20089238:	30c0020c 	andi	r3,r6,8
2008923c:	18003526 	beq	r3,zero,20089314 <__swbuf_r+0x114>
20089240:	80c00417 	ldw	r3,16(r16)
20089244:	18003326 	beq	r3,zero,20089314 <__swbuf_r+0x114>
20089248:	3088000c 	andi	r2,r6,8192
2008924c:	8c403fcc 	andi	r17,r17,255
20089250:	10001726 	beq	r2,zero,200892b0 <__swbuf_r+0xb0>
20089254:	80800017 	ldw	r2,0(r16)
20089258:	81000517 	ldw	r4,20(r16)
2008925c:	10c7c83a 	sub	r3,r2,r3
20089260:	19001d0e 	bge	r3,r4,200892d8 <__swbuf_r+0xd8>
20089264:	18c00044 	addi	r3,r3,1
20089268:	81400217 	ldw	r5,8(r16)
2008926c:	11000044 	addi	r4,r2,1
20089270:	81000015 	stw	r4,0(r16)
20089274:	297fffc4 	addi	r5,r5,-1
20089278:	81400215 	stw	r5,8(r16)
2008927c:	14400005 	stb	r17,0(r2)
20089280:	80800517 	ldw	r2,20(r16)
20089284:	10c01d26 	beq	r2,r3,200892fc <__swbuf_r+0xfc>
20089288:	8080030b 	ldhu	r2,12(r16)
2008928c:	1080004c 	andi	r2,r2,1
20089290:	1000181e 	bne	r2,zero,200892f4 <__swbuf_r+0xf4>
20089294:	8805883a 	mov	r2,r17
20089298:	dfc00317 	ldw	ra,12(sp)
2008929c:	dc800217 	ldw	r18,8(sp)
200892a0:	dc400117 	ldw	r17,4(sp)
200892a4:	dc000017 	ldw	r16,0(sp)
200892a8:	dec00404 	addi	sp,sp,16
200892ac:	f800283a 	ret
200892b0:	81001917 	ldw	r4,100(r16)
200892b4:	00b7ffc4 	movi	r2,-8193
200892b8:	31880014 	ori	r6,r6,8192
200892bc:	2084703a 	and	r2,r4,r2
200892c0:	80801915 	stw	r2,100(r16)
200892c4:	80800017 	ldw	r2,0(r16)
200892c8:	81000517 	ldw	r4,20(r16)
200892cc:	8180030d 	sth	r6,12(r16)
200892d0:	10c7c83a 	sub	r3,r2,r3
200892d4:	193fe316 	blt	r3,r4,20089264 <__flash_rwdata_start+0xffff7934>
200892d8:	9009883a 	mov	r4,r18
200892dc:	800b883a 	mov	r5,r16
200892e0:	0084a640 	call	20084a64 <_fflush_r>
200892e4:	1000091e 	bne	r2,zero,2008930c <__swbuf_r+0x10c>
200892e8:	80800017 	ldw	r2,0(r16)
200892ec:	00c00044 	movi	r3,1
200892f0:	003fdd06 	br	20089268 <__flash_rwdata_start+0xffff7938>
200892f4:	00800284 	movi	r2,10
200892f8:	88bfe61e 	bne	r17,r2,20089294 <__flash_rwdata_start+0xffff7964>
200892fc:	9009883a 	mov	r4,r18
20089300:	800b883a 	mov	r5,r16
20089304:	0084a640 	call	20084a64 <_fflush_r>
20089308:	103fe226 	beq	r2,zero,20089294 <__flash_rwdata_start+0xffff7964>
2008930c:	00bfffc4 	movi	r2,-1
20089310:	003fe106 	br	20089298 <__flash_rwdata_start+0xffff7968>
20089314:	9009883a 	mov	r4,r18
20089318:	800b883a 	mov	r5,r16
2008931c:	0082de00 	call	20082de0 <__swsetup_r>
20089320:	103ffa1e 	bne	r2,zero,2008930c <__flash_rwdata_start+0xffff79dc>
20089324:	8180030b 	ldhu	r6,12(r16)
20089328:	80c00417 	ldw	r3,16(r16)
2008932c:	003fc606 	br	20089248 <__flash_rwdata_start+0xffff7918>
20089330:	0084e400 	call	20084e40 <__sinit>
20089334:	003fbd06 	br	2008922c <__flash_rwdata_start+0xffff78fc>

20089338 <__swbuf>:
20089338:	00c00034 	movhi	r3,0
2008933c:	18c86104 	addi	r3,r3,8580
20089340:	2005883a 	mov	r2,r4
20089344:	19000017 	ldw	r4,0(r3)
20089348:	280d883a 	mov	r6,r5
2008934c:	100b883a 	mov	r5,r2
20089350:	00892001 	jmpi	20089200 <__swbuf_r>

20089354 <_wcrtomb_r>:
20089354:	defff604 	addi	sp,sp,-40
20089358:	00800034 	movhi	r2,0
2008935c:	dc800815 	stw	r18,32(sp)
20089360:	dc400715 	stw	r17,28(sp)
20089364:	dc000615 	stw	r16,24(sp)
20089368:	10886304 	addi	r2,r2,8588
2008936c:	dfc00915 	stw	ra,36(sp)
20089370:	2021883a 	mov	r16,r4
20089374:	3823883a 	mov	r17,r7
20089378:	14800017 	ldw	r18,0(r2)
2008937c:	28001426 	beq	r5,zero,200893d0 <_wcrtomb_r+0x7c>
20089380:	d9400415 	stw	r5,16(sp)
20089384:	d9800515 	stw	r6,20(sp)
20089388:	00859680 	call	20085968 <__locale_charset>
2008938c:	d9400417 	ldw	r5,16(sp)
20089390:	d9800517 	ldw	r6,20(sp)
20089394:	8009883a 	mov	r4,r16
20089398:	dc400015 	stw	r17,0(sp)
2008939c:	100f883a 	mov	r7,r2
200893a0:	903ee83a 	callr	r18
200893a4:	00ffffc4 	movi	r3,-1
200893a8:	10c0031e 	bne	r2,r3,200893b8 <_wcrtomb_r+0x64>
200893ac:	88000015 	stw	zero,0(r17)
200893b0:	00c02284 	movi	r3,138
200893b4:	80c00015 	stw	r3,0(r16)
200893b8:	dfc00917 	ldw	ra,36(sp)
200893bc:	dc800817 	ldw	r18,32(sp)
200893c0:	dc400717 	ldw	r17,28(sp)
200893c4:	dc000617 	ldw	r16,24(sp)
200893c8:	dec00a04 	addi	sp,sp,40
200893cc:	f800283a 	ret
200893d0:	00859680 	call	20085968 <__locale_charset>
200893d4:	8009883a 	mov	r4,r16
200893d8:	dc400015 	stw	r17,0(sp)
200893dc:	d9400104 	addi	r5,sp,4
200893e0:	000d883a 	mov	r6,zero
200893e4:	100f883a 	mov	r7,r2
200893e8:	903ee83a 	callr	r18
200893ec:	003fed06 	br	200893a4 <__flash_rwdata_start+0xffff7a74>

200893f0 <wcrtomb>:
200893f0:	defff604 	addi	sp,sp,-40
200893f4:	00800034 	movhi	r2,0
200893f8:	dc800615 	stw	r18,24(sp)
200893fc:	dc400515 	stw	r17,20(sp)
20089400:	dc000415 	stw	r16,16(sp)
20089404:	10886104 	addi	r2,r2,8580
20089408:	dfc00915 	stw	ra,36(sp)
2008940c:	dd000815 	stw	r20,32(sp)
20089410:	dcc00715 	stw	r19,28(sp)
20089414:	2021883a 	mov	r16,r4
20089418:	3025883a 	mov	r18,r6
2008941c:	14400017 	ldw	r17,0(r2)
20089420:	20001826 	beq	r4,zero,20089484 <wcrtomb+0x94>
20089424:	00800034 	movhi	r2,0
20089428:	10886304 	addi	r2,r2,8588
2008942c:	15000017 	ldw	r20,0(r2)
20089430:	2827883a 	mov	r19,r5
20089434:	00859680 	call	20085968 <__locale_charset>
20089438:	8809883a 	mov	r4,r17
2008943c:	dc800015 	stw	r18,0(sp)
20089440:	800b883a 	mov	r5,r16
20089444:	980d883a 	mov	r6,r19
20089448:	100f883a 	mov	r7,r2
2008944c:	a03ee83a 	callr	r20
20089450:	00ffffc4 	movi	r3,-1
20089454:	10c0031e 	bne	r2,r3,20089464 <wcrtomb+0x74>
20089458:	90000015 	stw	zero,0(r18)
2008945c:	00c02284 	movi	r3,138
20089460:	88c00015 	stw	r3,0(r17)
20089464:	dfc00917 	ldw	ra,36(sp)
20089468:	dd000817 	ldw	r20,32(sp)
2008946c:	dcc00717 	ldw	r19,28(sp)
20089470:	dc800617 	ldw	r18,24(sp)
20089474:	dc400517 	ldw	r17,20(sp)
20089478:	dc000417 	ldw	r16,16(sp)
2008947c:	dec00a04 	addi	sp,sp,40
20089480:	f800283a 	ret
20089484:	00800034 	movhi	r2,0
20089488:	10886304 	addi	r2,r2,8588
2008948c:	14000017 	ldw	r16,0(r2)
20089490:	00859680 	call	20085968 <__locale_charset>
20089494:	8809883a 	mov	r4,r17
20089498:	dc800015 	stw	r18,0(sp)
2008949c:	d9400104 	addi	r5,sp,4
200894a0:	000d883a 	mov	r6,zero
200894a4:	100f883a 	mov	r7,r2
200894a8:	803ee83a 	callr	r16
200894ac:	003fe806 	br	20089450 <__flash_rwdata_start+0xffff7b20>

200894b0 <__ascii_wctomb>:
200894b0:	28000526 	beq	r5,zero,200894c8 <__ascii_wctomb+0x18>
200894b4:	00803fc4 	movi	r2,255
200894b8:	11800536 	bltu	r2,r6,200894d0 <__ascii_wctomb+0x20>
200894bc:	29800005 	stb	r6,0(r5)
200894c0:	00800044 	movi	r2,1
200894c4:	f800283a 	ret
200894c8:	0005883a 	mov	r2,zero
200894cc:	f800283a 	ret
200894d0:	00802284 	movi	r2,138
200894d4:	20800015 	stw	r2,0(r4)
200894d8:	00bfffc4 	movi	r2,-1
200894dc:	f800283a 	ret

200894e0 <_wctomb_r>:
200894e0:	00800034 	movhi	r2,0
200894e4:	defff904 	addi	sp,sp,-28
200894e8:	10886304 	addi	r2,r2,8588
200894ec:	dfc00615 	stw	ra,24(sp)
200894f0:	dc400515 	stw	r17,20(sp)
200894f4:	dc000415 	stw	r16,16(sp)
200894f8:	3823883a 	mov	r17,r7
200894fc:	14000017 	ldw	r16,0(r2)
20089500:	d9000115 	stw	r4,4(sp)
20089504:	d9400215 	stw	r5,8(sp)
20089508:	d9800315 	stw	r6,12(sp)
2008950c:	00859680 	call	20085968 <__locale_charset>
20089510:	d9000117 	ldw	r4,4(sp)
20089514:	d9400217 	ldw	r5,8(sp)
20089518:	d9800317 	ldw	r6,12(sp)
2008951c:	dc400015 	stw	r17,0(sp)
20089520:	100f883a 	mov	r7,r2
20089524:	803ee83a 	callr	r16
20089528:	dfc00617 	ldw	ra,24(sp)
2008952c:	dc400517 	ldw	r17,20(sp)
20089530:	dc000417 	ldw	r16,16(sp)
20089534:	dec00704 	addi	sp,sp,28
20089538:	f800283a 	ret

2008953c <__udivdi3>:
2008953c:	defff504 	addi	sp,sp,-44
20089540:	dcc00415 	stw	r19,16(sp)
20089544:	dc000115 	stw	r16,4(sp)
20089548:	dfc00a15 	stw	ra,40(sp)
2008954c:	df000915 	stw	fp,36(sp)
20089550:	ddc00815 	stw	r23,32(sp)
20089554:	dd800715 	stw	r22,28(sp)
20089558:	dd400615 	stw	r21,24(sp)
2008955c:	dd000515 	stw	r20,20(sp)
20089560:	dc800315 	stw	r18,12(sp)
20089564:	dc400215 	stw	r17,8(sp)
20089568:	2027883a 	mov	r19,r4
2008956c:	2821883a 	mov	r16,r5
20089570:	3800421e 	bne	r7,zero,2008967c <__udivdi3+0x140>
20089574:	3025883a 	mov	r18,r6
20089578:	2023883a 	mov	r17,r4
2008957c:	2980542e 	bgeu	r5,r6,200896d0 <__udivdi3+0x194>
20089580:	00bfffd4 	movui	r2,65535
20089584:	282d883a 	mov	r22,r5
20089588:	1180a836 	bltu	r2,r6,2008982c <__udivdi3+0x2f0>
2008958c:	00803fc4 	movi	r2,255
20089590:	1181422e 	bgeu	r2,r6,20089a9c <__udivdi3+0x560>
20089594:	00800204 	movi	r2,8
20089598:	1007883a 	mov	r3,r2
2008959c:	3084d83a 	srl	r2,r6,r2
200895a0:	01000034 	movhi	r4,0
200895a4:	21008c04 	addi	r4,r4,560
200895a8:	2085883a 	add	r2,r4,r2
200895ac:	10800003 	ldbu	r2,0(r2)
200895b0:	10c7883a 	add	r3,r2,r3
200895b4:	00800804 	movi	r2,32
200895b8:	10c5c83a 	sub	r2,r2,r3
200895bc:	10000526 	beq	r2,zero,200895d4 <__udivdi3+0x98>
200895c0:	80a0983a 	sll	r16,r16,r2
200895c4:	98c6d83a 	srl	r3,r19,r3
200895c8:	30a4983a 	sll	r18,r6,r2
200895cc:	98a2983a 	sll	r17,r19,r2
200895d0:	80ecb03a 	or	r22,r16,r3
200895d4:	902ad43a 	srli	r21,r18,16
200895d8:	b009883a 	mov	r4,r22
200895dc:	953fffcc 	andi	r20,r18,65535
200895e0:	a80b883a 	mov	r5,r21
200895e4:	008a1b00 	call	2008a1b0 <__umodsi3>
200895e8:	b009883a 	mov	r4,r22
200895ec:	a80b883a 	mov	r5,r21
200895f0:	1027883a 	mov	r19,r2
200895f4:	008a1a80 	call	2008a1a8 <__udivsi3>
200895f8:	1021883a 	mov	r16,r2
200895fc:	8806d43a 	srli	r3,r17,16
20089600:	9804943a 	slli	r2,r19,16
20089604:	8527383a 	mul	r19,r16,r20
20089608:	10c4b03a 	or	r2,r2,r3
2008960c:	14c0052e 	bgeu	r2,r19,20089624 <__udivdi3+0xe8>
20089610:	1485883a 	add	r2,r2,r18
20089614:	80ffffc4 	addi	r3,r16,-1
20089618:	14800136 	bltu	r2,r18,20089620 <__udivdi3+0xe4>
2008961c:	14c13436 	bltu	r2,r19,20089af0 <__udivdi3+0x5b4>
20089620:	1821883a 	mov	r16,r3
20089624:	14e7c83a 	sub	r19,r2,r19
20089628:	9809883a 	mov	r4,r19
2008962c:	a80b883a 	mov	r5,r21
20089630:	008a1b00 	call	2008a1b0 <__umodsi3>
20089634:	102d883a 	mov	r22,r2
20089638:	9809883a 	mov	r4,r19
2008963c:	a80b883a 	mov	r5,r21
20089640:	008a1a80 	call	2008a1a8 <__udivsi3>
20089644:	b02c943a 	slli	r22,r22,16
20089648:	1529383a 	mul	r20,r2,r20
2008964c:	8c7fffcc 	andi	r17,r17,65535
20089650:	b462b03a 	or	r17,r22,r17
20089654:	8d00052e 	bgeu	r17,r20,2008966c <__udivdi3+0x130>
20089658:	8ca3883a 	add	r17,r17,r18
2008965c:	10ffffc4 	addi	r3,r2,-1
20089660:	8c80f636 	bltu	r17,r18,20089a3c <__udivdi3+0x500>
20089664:	8d00f52e 	bgeu	r17,r20,20089a3c <__udivdi3+0x500>
20089668:	10bfff84 	addi	r2,r2,-2
2008966c:	8020943a 	slli	r16,r16,16
20089670:	0007883a 	mov	r3,zero
20089674:	1404b03a 	or	r2,r2,r16
20089678:	00005b06 	br	200897e8 <__udivdi3+0x2ac>
2008967c:	29c05836 	bltu	r5,r7,200897e0 <__udivdi3+0x2a4>
20089680:	00bfffd4 	movui	r2,65535
20089684:	11c0642e 	bgeu	r2,r7,20089818 <__udivdi3+0x2dc>
20089688:	00804034 	movhi	r2,256
2008968c:	10bfffc4 	addi	r2,r2,-1
20089690:	11c0f32e 	bgeu	r2,r7,20089a60 <__udivdi3+0x524>
20089694:	00c00604 	movi	r3,24
20089698:	180b883a 	mov	r5,r3
2008969c:	38c6d83a 	srl	r3,r7,r3
200896a0:	00800034 	movhi	r2,0
200896a4:	10808c04 	addi	r2,r2,560
200896a8:	10c7883a 	add	r3,r2,r3
200896ac:	18c00003 	ldbu	r3,0(r3)
200896b0:	01000804 	movi	r4,32
200896b4:	1947883a 	add	r3,r3,r5
200896b8:	20e5c83a 	sub	r18,r4,r3
200896bc:	9000661e 	bne	r18,zero,20089858 <__udivdi3+0x31c>
200896c0:	3c00f936 	bltu	r7,r16,20089aa8 <__udivdi3+0x56c>
200896c4:	9985403a 	cmpgeu	r2,r19,r6
200896c8:	0007883a 	mov	r3,zero
200896cc:	00004606 	br	200897e8 <__udivdi3+0x2ac>
200896d0:	3000041e 	bne	r6,zero,200896e4 <__udivdi3+0x1a8>
200896d4:	01000044 	movi	r4,1
200896d8:	000b883a 	mov	r5,zero
200896dc:	008a1a80 	call	2008a1a8 <__udivsi3>
200896e0:	1025883a 	mov	r18,r2
200896e4:	00bfffd4 	movui	r2,65535
200896e8:	1480562e 	bgeu	r2,r18,20089844 <__udivdi3+0x308>
200896ec:	00804034 	movhi	r2,256
200896f0:	10bfffc4 	addi	r2,r2,-1
200896f4:	1480e32e 	bgeu	r2,r18,20089a84 <__udivdi3+0x548>
200896f8:	00800604 	movi	r2,24
200896fc:	1007883a 	mov	r3,r2
20089700:	9084d83a 	srl	r2,r18,r2
20089704:	01000034 	movhi	r4,0
20089708:	21008c04 	addi	r4,r4,560
2008970c:	2085883a 	add	r2,r4,r2
20089710:	10800003 	ldbu	r2,0(r2)
20089714:	10c5883a 	add	r2,r2,r3
20089718:	00c00804 	movi	r3,32
2008971c:	1887c83a 	sub	r3,r3,r2
20089720:	1800911e 	bne	r3,zero,20089968 <__udivdi3+0x42c>
20089724:	9028d43a 	srli	r20,r18,16
20089728:	84a1c83a 	sub	r16,r16,r18
2008972c:	957fffcc 	andi	r21,r18,65535
20089730:	00c00044 	movi	r3,1
20089734:	8009883a 	mov	r4,r16
20089738:	a00b883a 	mov	r5,r20
2008973c:	d8c00015 	stw	r3,0(sp)
20089740:	008a1b00 	call	2008a1b0 <__umodsi3>
20089744:	8009883a 	mov	r4,r16
20089748:	a00b883a 	mov	r5,r20
2008974c:	1027883a 	mov	r19,r2
20089750:	008a1a80 	call	2008a1a8 <__udivsi3>
20089754:	1021883a 	mov	r16,r2
20089758:	880cd43a 	srli	r6,r17,16
2008975c:	9804943a 	slli	r2,r19,16
20089760:	8567383a 	mul	r19,r16,r21
20089764:	d8c00017 	ldw	r3,0(sp)
20089768:	1188b03a 	or	r4,r2,r6
2008976c:	24c0052e 	bgeu	r4,r19,20089784 <__udivdi3+0x248>
20089770:	2489883a 	add	r4,r4,r18
20089774:	80bfffc4 	addi	r2,r16,-1
20089778:	24800136 	bltu	r4,r18,20089780 <__udivdi3+0x244>
2008977c:	24c0d936 	bltu	r4,r19,20089ae4 <__udivdi3+0x5a8>
20089780:	1021883a 	mov	r16,r2
20089784:	24e7c83a 	sub	r19,r4,r19
20089788:	9809883a 	mov	r4,r19
2008978c:	a00b883a 	mov	r5,r20
20089790:	d8c00015 	stw	r3,0(sp)
20089794:	008a1b00 	call	2008a1b0 <__umodsi3>
20089798:	102d883a 	mov	r22,r2
2008979c:	9809883a 	mov	r4,r19
200897a0:	a00b883a 	mov	r5,r20
200897a4:	008a1a80 	call	2008a1a8 <__udivsi3>
200897a8:	b02c943a 	slli	r22,r22,16
200897ac:	156b383a 	mul	r21,r2,r21
200897b0:	8c7fffcc 	andi	r17,r17,65535
200897b4:	b462b03a 	or	r17,r22,r17
200897b8:	d8c00017 	ldw	r3,0(sp)
200897bc:	8d40052e 	bgeu	r17,r21,200897d4 <__udivdi3+0x298>
200897c0:	8ca3883a 	add	r17,r17,r18
200897c4:	113fffc4 	addi	r4,r2,-1
200897c8:	8c809a36 	bltu	r17,r18,20089a34 <__udivdi3+0x4f8>
200897cc:	8d40992e 	bgeu	r17,r21,20089a34 <__udivdi3+0x4f8>
200897d0:	10bfff84 	addi	r2,r2,-2
200897d4:	8020943a 	slli	r16,r16,16
200897d8:	1404b03a 	or	r2,r2,r16
200897dc:	00000206 	br	200897e8 <__udivdi3+0x2ac>
200897e0:	0007883a 	mov	r3,zero
200897e4:	0005883a 	mov	r2,zero
200897e8:	dfc00a17 	ldw	ra,40(sp)
200897ec:	df000917 	ldw	fp,36(sp)
200897f0:	ddc00817 	ldw	r23,32(sp)
200897f4:	dd800717 	ldw	r22,28(sp)
200897f8:	dd400617 	ldw	r21,24(sp)
200897fc:	dd000517 	ldw	r20,20(sp)
20089800:	dcc00417 	ldw	r19,16(sp)
20089804:	dc800317 	ldw	r18,12(sp)
20089808:	dc400217 	ldw	r17,8(sp)
2008980c:	dc000117 	ldw	r16,4(sp)
20089810:	dec00b04 	addi	sp,sp,44
20089814:	f800283a 	ret
20089818:	00803fc4 	movi	r2,255
2008981c:	11c0932e 	bgeu	r2,r7,20089a6c <__udivdi3+0x530>
20089820:	00c00204 	movi	r3,8
20089824:	180b883a 	mov	r5,r3
20089828:	003f9c06 	br	2008969c <__flash_rwdata_start+0xffff7d6c>
2008982c:	00804034 	movhi	r2,256
20089830:	10bfffc4 	addi	r2,r2,-1
20089834:	1180902e 	bgeu	r2,r6,20089a78 <__udivdi3+0x53c>
20089838:	00800604 	movi	r2,24
2008983c:	1007883a 	mov	r3,r2
20089840:	003f5606 	br	2008959c <__flash_rwdata_start+0xffff7c6c>
20089844:	00803fc4 	movi	r2,255
20089848:	1480912e 	bgeu	r2,r18,20089a90 <__udivdi3+0x554>
2008984c:	00800204 	movi	r2,8
20089850:	1007883a 	mov	r3,r2
20089854:	003faa06 	br	20089700 <__flash_rwdata_start+0xffff7dd0>
20089858:	30eed83a 	srl	r23,r6,r3
2008985c:	3c8e983a 	sll	r7,r7,r18
20089860:	80f8d83a 	srl	fp,r16,r3
20089864:	98c6d83a 	srl	r3,r19,r3
20089868:	3deeb03a 	or	r23,r7,r23
2008986c:	b828d43a 	srli	r20,r23,16
20089870:	84a0983a 	sll	r16,r16,r18
20089874:	e009883a 	mov	r4,fp
20089878:	a00b883a 	mov	r5,r20
2008987c:	80e2b03a 	or	r17,r16,r3
20089880:	34aa983a 	sll	r21,r6,r18
20089884:	008a1b00 	call	2008a1b0 <__umodsi3>
20089888:	e009883a 	mov	r4,fp
2008988c:	a00b883a 	mov	r5,r20
20089890:	102d883a 	mov	r22,r2
20089894:	008a1a80 	call	2008a1a8 <__udivsi3>
20089898:	1021883a 	mov	r16,r2
2008989c:	bf3fffcc 	andi	fp,r23,65535
200898a0:	b004943a 	slli	r2,r22,16
200898a4:	8808d43a 	srli	r4,r17,16
200898a8:	872d383a 	mul	r22,r16,fp
200898ac:	1104b03a 	or	r2,r2,r4
200898b0:	1580042e 	bgeu	r2,r22,200898c4 <__udivdi3+0x388>
200898b4:	15c5883a 	add	r2,r2,r23
200898b8:	80ffffc4 	addi	r3,r16,-1
200898bc:	15c0812e 	bgeu	r2,r23,20089ac4 <__udivdi3+0x588>
200898c0:	1821883a 	mov	r16,r3
200898c4:	15adc83a 	sub	r22,r2,r22
200898c8:	b009883a 	mov	r4,r22
200898cc:	a00b883a 	mov	r5,r20
200898d0:	008a1b00 	call	2008a1b0 <__umodsi3>
200898d4:	a00b883a 	mov	r5,r20
200898d8:	b009883a 	mov	r4,r22
200898dc:	d8800015 	stw	r2,0(sp)
200898e0:	008a1a80 	call	2008a1a8 <__udivsi3>
200898e4:	d8c00017 	ldw	r3,0(sp)
200898e8:	170b383a 	mul	r5,r2,fp
200898ec:	8c7fffcc 	andi	r17,r17,65535
200898f0:	1806943a 	slli	r3,r3,16
200898f4:	1c46b03a 	or	r3,r3,r17
200898f8:	1940042e 	bgeu	r3,r5,2008990c <__udivdi3+0x3d0>
200898fc:	1dc7883a 	add	r3,r3,r23
20089900:	113fffc4 	addi	r4,r2,-1
20089904:	1dc06b2e 	bgeu	r3,r23,20089ab4 <__udivdi3+0x578>
20089908:	2005883a 	mov	r2,r4
2008990c:	8020943a 	slli	r16,r16,16
20089910:	a9ffffcc 	andi	r7,r21,65535
20089914:	a82ad43a 	srli	r21,r21,16
20089918:	1404b03a 	or	r2,r2,r16
2008991c:	113fffcc 	andi	r4,r2,65535
20089920:	100cd43a 	srli	r6,r2,16
20089924:	21d3383a 	mul	r9,r4,r7
20089928:	2549383a 	mul	r4,r4,r21
2008992c:	31cf383a 	mul	r7,r6,r7
20089930:	4810d43a 	srli	r8,r9,16
20089934:	1947c83a 	sub	r3,r3,r5
20089938:	3909883a 	add	r4,r7,r4
2008993c:	2209883a 	add	r4,r4,r8
20089940:	354d383a 	mul	r6,r6,r21
20089944:	21c0022e 	bgeu	r4,r7,20089950 <__udivdi3+0x414>
20089948:	01400074 	movhi	r5,1
2008994c:	314d883a 	add	r6,r6,r5
20089950:	202ad43a 	srli	r21,r4,16
20089954:	354d883a 	add	r6,r6,r21
20089958:	19803f36 	bltu	r3,r6,20089a58 <__udivdi3+0x51c>
2008995c:	19803926 	beq	r3,r6,20089a44 <__udivdi3+0x508>
20089960:	0007883a 	mov	r3,zero
20089964:	003fa006 	br	200897e8 <__flash_rwdata_start+0xffff7eb8>
20089968:	90e4983a 	sll	r18,r18,r3
2008996c:	80aad83a 	srl	r21,r16,r2
20089970:	80e0983a 	sll	r16,r16,r3
20089974:	9028d43a 	srli	r20,r18,16
20089978:	9884d83a 	srl	r2,r19,r2
2008997c:	a809883a 	mov	r4,r21
20089980:	a00b883a 	mov	r5,r20
20089984:	80acb03a 	or	r22,r16,r2
20089988:	98e2983a 	sll	r17,r19,r3
2008998c:	008a1b00 	call	2008a1b0 <__umodsi3>
20089990:	a809883a 	mov	r4,r21
20089994:	a00b883a 	mov	r5,r20
20089998:	1021883a 	mov	r16,r2
2008999c:	008a1a80 	call	2008a1a8 <__udivsi3>
200899a0:	957fffcc 	andi	r21,r18,65535
200899a4:	8020943a 	slli	r16,r16,16
200899a8:	b00ad43a 	srli	r5,r22,16
200899ac:	1567383a 	mul	r19,r2,r21
200899b0:	102f883a 	mov	r23,r2
200899b4:	8148b03a 	or	r4,r16,r5
200899b8:	24c0062e 	bgeu	r4,r19,200899d4 <__udivdi3+0x498>
200899bc:	2489883a 	add	r4,r4,r18
200899c0:	10bfffc4 	addi	r2,r2,-1
200899c4:	24804536 	bltu	r4,r18,20089adc <__udivdi3+0x5a0>
200899c8:	24c0442e 	bgeu	r4,r19,20089adc <__udivdi3+0x5a0>
200899cc:	bdffff84 	addi	r23,r23,-2
200899d0:	2489883a 	add	r4,r4,r18
200899d4:	24e7c83a 	sub	r19,r4,r19
200899d8:	9809883a 	mov	r4,r19
200899dc:	a00b883a 	mov	r5,r20
200899e0:	008a1b00 	call	2008a1b0 <__umodsi3>
200899e4:	1021883a 	mov	r16,r2
200899e8:	9809883a 	mov	r4,r19
200899ec:	a00b883a 	mov	r5,r20
200899f0:	008a1a80 	call	2008a1a8 <__udivsi3>
200899f4:	8020943a 	slli	r16,r16,16
200899f8:	1007883a 	mov	r3,r2
200899fc:	1545383a 	mul	r2,r2,r21
20089a00:	b13fffcc 	andi	r4,r22,65535
20089a04:	8108b03a 	or	r4,r16,r4
20089a08:	2080062e 	bgeu	r4,r2,20089a24 <__udivdi3+0x4e8>
20089a0c:	2489883a 	add	r4,r4,r18
20089a10:	197fffc4 	addi	r5,r3,-1
20089a14:	24802f36 	bltu	r4,r18,20089ad4 <__udivdi3+0x598>
20089a18:	20802e2e 	bgeu	r4,r2,20089ad4 <__udivdi3+0x598>
20089a1c:	18ffff84 	addi	r3,r3,-2
20089a20:	2489883a 	add	r4,r4,r18
20089a24:	b82e943a 	slli	r23,r23,16
20089a28:	20a1c83a 	sub	r16,r4,r2
20089a2c:	1dc6b03a 	or	r3,r3,r23
20089a30:	003f4006 	br	20089734 <__flash_rwdata_start+0xffff7e04>
20089a34:	2005883a 	mov	r2,r4
20089a38:	003f6606 	br	200897d4 <__flash_rwdata_start+0xffff7ea4>
20089a3c:	1805883a 	mov	r2,r3
20089a40:	003f0a06 	br	2008966c <__flash_rwdata_start+0xffff7d3c>
20089a44:	2006943a 	slli	r3,r4,16
20089a48:	9c88983a 	sll	r4,r19,r18
20089a4c:	4a7fffcc 	andi	r9,r9,65535
20089a50:	1a47883a 	add	r3,r3,r9
20089a54:	20ffc22e 	bgeu	r4,r3,20089960 <__flash_rwdata_start+0xffff8030>
20089a58:	10bfffc4 	addi	r2,r2,-1
20089a5c:	003fc006 	br	20089960 <__flash_rwdata_start+0xffff8030>
20089a60:	00c00404 	movi	r3,16
20089a64:	180b883a 	mov	r5,r3
20089a68:	003f0c06 	br	2008969c <__flash_rwdata_start+0xffff7d6c>
20089a6c:	0007883a 	mov	r3,zero
20089a70:	000b883a 	mov	r5,zero
20089a74:	003f0906 	br	2008969c <__flash_rwdata_start+0xffff7d6c>
20089a78:	00800404 	movi	r2,16
20089a7c:	1007883a 	mov	r3,r2
20089a80:	003ec606 	br	2008959c <__flash_rwdata_start+0xffff7c6c>
20089a84:	00800404 	movi	r2,16
20089a88:	1007883a 	mov	r3,r2
20089a8c:	003f1c06 	br	20089700 <__flash_rwdata_start+0xffff7dd0>
20089a90:	0005883a 	mov	r2,zero
20089a94:	0007883a 	mov	r3,zero
20089a98:	003f1906 	br	20089700 <__flash_rwdata_start+0xffff7dd0>
20089a9c:	0005883a 	mov	r2,zero
20089aa0:	0007883a 	mov	r3,zero
20089aa4:	003ebd06 	br	2008959c <__flash_rwdata_start+0xffff7c6c>
20089aa8:	0007883a 	mov	r3,zero
20089aac:	00800044 	movi	r2,1
20089ab0:	003f4d06 	br	200897e8 <__flash_rwdata_start+0xffff7eb8>
20089ab4:	197f942e 	bgeu	r3,r5,20089908 <__flash_rwdata_start+0xffff7fd8>
20089ab8:	10bfff84 	addi	r2,r2,-2
20089abc:	1dc7883a 	add	r3,r3,r23
20089ac0:	003f9206 	br	2008990c <__flash_rwdata_start+0xffff7fdc>
20089ac4:	15bf7e2e 	bgeu	r2,r22,200898c0 <__flash_rwdata_start+0xffff7f90>
20089ac8:	843fff84 	addi	r16,r16,-2
20089acc:	15c5883a 	add	r2,r2,r23
20089ad0:	003f7c06 	br	200898c4 <__flash_rwdata_start+0xffff7f94>
20089ad4:	2807883a 	mov	r3,r5
20089ad8:	003fd206 	br	20089a24 <__flash_rwdata_start+0xffff80f4>
20089adc:	102f883a 	mov	r23,r2
20089ae0:	003fbc06 	br	200899d4 <__flash_rwdata_start+0xffff80a4>
20089ae4:	843fff84 	addi	r16,r16,-2
20089ae8:	2489883a 	add	r4,r4,r18
20089aec:	003f2506 	br	20089784 <__flash_rwdata_start+0xffff7e54>
20089af0:	843fff84 	addi	r16,r16,-2
20089af4:	1485883a 	add	r2,r2,r18
20089af8:	003eca06 	br	20089624 <__flash_rwdata_start+0xffff7cf4>

20089afc <__umoddi3>:
20089afc:	defff404 	addi	sp,sp,-48
20089b00:	ddc00915 	stw	r23,36(sp)
20089b04:	dc400315 	stw	r17,12(sp)
20089b08:	dc000215 	stw	r16,8(sp)
20089b0c:	dfc00b15 	stw	ra,44(sp)
20089b10:	df000a15 	stw	fp,40(sp)
20089b14:	dd800815 	stw	r22,32(sp)
20089b18:	dd400715 	stw	r21,28(sp)
20089b1c:	dd000615 	stw	r20,24(sp)
20089b20:	dcc00515 	stw	r19,20(sp)
20089b24:	dc800415 	stw	r18,16(sp)
20089b28:	2021883a 	mov	r16,r4
20089b2c:	2823883a 	mov	r17,r5
20089b30:	282f883a 	mov	r23,r5
20089b34:	3800381e 	bne	r7,zero,20089c18 <__umoddi3+0x11c>
20089b38:	3027883a 	mov	r19,r6
20089b3c:	2029883a 	mov	r20,r4
20089b40:	29804e2e 	bgeu	r5,r6,20089c7c <__umoddi3+0x180>
20089b44:	00bfffd4 	movui	r2,65535
20089b48:	11809c36 	bltu	r2,r6,20089dbc <__umoddi3+0x2c0>
20089b4c:	00803fc4 	movi	r2,255
20089b50:	11813b2e 	bgeu	r2,r6,2008a040 <__umoddi3+0x544>
20089b54:	01400204 	movi	r5,8
20089b58:	2805883a 	mov	r2,r5
20089b5c:	314ad83a 	srl	r5,r6,r5
20089b60:	00c00034 	movhi	r3,0
20089b64:	18c08c04 	addi	r3,r3,560
20089b68:	194b883a 	add	r5,r3,r5
20089b6c:	29000003 	ldbu	r4,0(r5)
20089b70:	2089883a 	add	r4,r4,r2
20089b74:	00800804 	movi	r2,32
20089b78:	1105c83a 	sub	r2,r2,r4
20089b7c:	1000ec26 	beq	r2,zero,20089f30 <__umoddi3+0x434>
20089b80:	88a2983a 	sll	r17,r17,r2
20089b84:	8108d83a 	srl	r4,r16,r4
20089b88:	30a6983a 	sll	r19,r6,r2
20089b8c:	80a8983a 	sll	r20,r16,r2
20089b90:	1025883a 	mov	r18,r2
20089b94:	892eb03a 	or	r23,r17,r4
20089b98:	982cd43a 	srli	r22,r19,16
20089b9c:	b809883a 	mov	r4,r23
20089ba0:	9d7fffcc 	andi	r21,r19,65535
20089ba4:	b00b883a 	mov	r5,r22
20089ba8:	008a1b00 	call	2008a1b0 <__umodsi3>
20089bac:	b809883a 	mov	r4,r23
20089bb0:	b00b883a 	mov	r5,r22
20089bb4:	1021883a 	mov	r16,r2
20089bb8:	008a1a80 	call	2008a1a8 <__udivsi3>
20089bbc:	8020943a 	slli	r16,r16,16
20089bc0:	a00cd43a 	srli	r6,r20,16
20089bc4:	1545383a 	mul	r2,r2,r21
20089bc8:	8188b03a 	or	r4,r16,r6
20089bcc:	2080042e 	bgeu	r4,r2,20089be0 <__umoddi3+0xe4>
20089bd0:	24c9883a 	add	r4,r4,r19
20089bd4:	24c00236 	bltu	r4,r19,20089be0 <__umoddi3+0xe4>
20089bd8:	2080012e 	bgeu	r4,r2,20089be0 <__umoddi3+0xe4>
20089bdc:	24c9883a 	add	r4,r4,r19
20089be0:	20a3c83a 	sub	r17,r4,r2
20089be4:	8809883a 	mov	r4,r17
20089be8:	b00b883a 	mov	r5,r22
20089bec:	008a1b00 	call	2008a1b0 <__umodsi3>
20089bf0:	8809883a 	mov	r4,r17
20089bf4:	b00b883a 	mov	r5,r22
20089bf8:	1021883a 	mov	r16,r2
20089bfc:	008a1a80 	call	2008a1a8 <__udivsi3>
20089c00:	8006943a 	slli	r3,r16,16
20089c04:	1545383a 	mul	r2,r2,r21
20089c08:	a13fffcc 	andi	r4,r20,65535
20089c0c:	1906b03a 	or	r3,r3,r4
20089c10:	1880532e 	bgeu	r3,r2,20089d60 <__umoddi3+0x264>
20089c14:	00004e06 	br	20089d50 <__umoddi3+0x254>
20089c18:	29c05536 	bltu	r5,r7,20089d70 <__umoddi3+0x274>
20089c1c:	00bfffd4 	movui	r2,65535
20089c20:	11c0612e 	bgeu	r2,r7,20089da8 <__umoddi3+0x2ac>
20089c24:	00804034 	movhi	r2,256
20089c28:	10bfffc4 	addi	r2,r2,-1
20089c2c:	11c0f82e 	bgeu	r2,r7,2008a010 <__umoddi3+0x514>
20089c30:	01400604 	movi	r5,24
20089c34:	282b883a 	mov	r21,r5
20089c38:	394ad83a 	srl	r5,r7,r5
20089c3c:	00c00034 	movhi	r3,0
20089c40:	18c08c04 	addi	r3,r3,560
20089c44:	194b883a 	add	r5,r3,r5
20089c48:	28800003 	ldbu	r2,0(r5)
20089c4c:	00c00804 	movi	r3,32
20089c50:	156b883a 	add	r21,r2,r21
20089c54:	1d69c83a 	sub	r20,r3,r21
20089c58:	a000631e 	bne	r20,zero,20089de8 <__umoddi3+0x2ec>
20089c5c:	3c400136 	bltu	r7,r17,20089c64 <__umoddi3+0x168>
20089c60:	81810436 	bltu	r16,r6,2008a074 <__umoddi3+0x578>
20089c64:	8185c83a 	sub	r2,r16,r6
20089c68:	89e3c83a 	sub	r17,r17,r7
20089c6c:	8087803a 	cmpltu	r3,r16,r2
20089c70:	88efc83a 	sub	r23,r17,r3
20089c74:	b807883a 	mov	r3,r23
20089c78:	00003f06 	br	20089d78 <__umoddi3+0x27c>
20089c7c:	3000041e 	bne	r6,zero,20089c90 <__umoddi3+0x194>
20089c80:	01000044 	movi	r4,1
20089c84:	000b883a 	mov	r5,zero
20089c88:	008a1a80 	call	2008a1a8 <__udivsi3>
20089c8c:	1027883a 	mov	r19,r2
20089c90:	00bfffd4 	movui	r2,65535
20089c94:	14c04f2e 	bgeu	r2,r19,20089dd4 <__umoddi3+0x2d8>
20089c98:	00804034 	movhi	r2,256
20089c9c:	10bfffc4 	addi	r2,r2,-1
20089ca0:	14c0e42e 	bgeu	r2,r19,2008a034 <__umoddi3+0x538>
20089ca4:	00800604 	movi	r2,24
20089ca8:	1007883a 	mov	r3,r2
20089cac:	9884d83a 	srl	r2,r19,r2
20089cb0:	01000034 	movhi	r4,0
20089cb4:	21008c04 	addi	r4,r4,560
20089cb8:	2085883a 	add	r2,r4,r2
20089cbc:	11000003 	ldbu	r4,0(r2)
20089cc0:	00800804 	movi	r2,32
20089cc4:	20c7883a 	add	r3,r4,r3
20089cc8:	10c5c83a 	sub	r2,r2,r3
20089ccc:	10009a1e 	bne	r2,zero,20089f38 <__umoddi3+0x43c>
20089cd0:	982cd43a 	srli	r22,r19,16
20089cd4:	8ce3c83a 	sub	r17,r17,r19
20089cd8:	9c3fffcc 	andi	r16,r19,65535
20089cdc:	0025883a 	mov	r18,zero
20089ce0:	8809883a 	mov	r4,r17
20089ce4:	b00b883a 	mov	r5,r22
20089ce8:	008a1b00 	call	2008a1b0 <__umodsi3>
20089cec:	8809883a 	mov	r4,r17
20089cf0:	b00b883a 	mov	r5,r22
20089cf4:	102b883a 	mov	r21,r2
20089cf8:	008a1a80 	call	2008a1a8 <__udivsi3>
20089cfc:	a806943a 	slli	r3,r21,16
20089d00:	a008d43a 	srli	r4,r20,16
20089d04:	1405383a 	mul	r2,r2,r16
20089d08:	190cb03a 	or	r6,r3,r4
20089d0c:	3080032e 	bgeu	r6,r2,20089d1c <__umoddi3+0x220>
20089d10:	34cd883a 	add	r6,r6,r19
20089d14:	34c00136 	bltu	r6,r19,20089d1c <__umoddi3+0x220>
20089d18:	3080d436 	bltu	r6,r2,2008a06c <__umoddi3+0x570>
20089d1c:	30abc83a 	sub	r21,r6,r2
20089d20:	a809883a 	mov	r4,r21
20089d24:	b00b883a 	mov	r5,r22
20089d28:	008a1b00 	call	2008a1b0 <__umodsi3>
20089d2c:	1023883a 	mov	r17,r2
20089d30:	a809883a 	mov	r4,r21
20089d34:	b00b883a 	mov	r5,r22
20089d38:	008a1a80 	call	2008a1a8 <__udivsi3>
20089d3c:	8822943a 	slli	r17,r17,16
20089d40:	1405383a 	mul	r2,r2,r16
20089d44:	a13fffcc 	andi	r4,r20,65535
20089d48:	8906b03a 	or	r3,r17,r4
20089d4c:	1880042e 	bgeu	r3,r2,20089d60 <__umoddi3+0x264>
20089d50:	1cc7883a 	add	r3,r3,r19
20089d54:	1cc00236 	bltu	r3,r19,20089d60 <__umoddi3+0x264>
20089d58:	1880012e 	bgeu	r3,r2,20089d60 <__umoddi3+0x264>
20089d5c:	1cc7883a 	add	r3,r3,r19
20089d60:	1887c83a 	sub	r3,r3,r2
20089d64:	1c84d83a 	srl	r2,r3,r18
20089d68:	0007883a 	mov	r3,zero
20089d6c:	00000206 	br	20089d78 <__umoddi3+0x27c>
20089d70:	2005883a 	mov	r2,r4
20089d74:	2807883a 	mov	r3,r5
20089d78:	dfc00b17 	ldw	ra,44(sp)
20089d7c:	df000a17 	ldw	fp,40(sp)
20089d80:	ddc00917 	ldw	r23,36(sp)
20089d84:	dd800817 	ldw	r22,32(sp)
20089d88:	dd400717 	ldw	r21,28(sp)
20089d8c:	dd000617 	ldw	r20,24(sp)
20089d90:	dcc00517 	ldw	r19,20(sp)
20089d94:	dc800417 	ldw	r18,16(sp)
20089d98:	dc400317 	ldw	r17,12(sp)
20089d9c:	dc000217 	ldw	r16,8(sp)
20089da0:	dec00c04 	addi	sp,sp,48
20089da4:	f800283a 	ret
20089da8:	00803fc4 	movi	r2,255
20089dac:	11c0952e 	bgeu	r2,r7,2008a004 <__umoddi3+0x508>
20089db0:	01400204 	movi	r5,8
20089db4:	282b883a 	mov	r21,r5
20089db8:	003f9f06 	br	20089c38 <__flash_rwdata_start+0xffff8308>
20089dbc:	00804034 	movhi	r2,256
20089dc0:	10bfffc4 	addi	r2,r2,-1
20089dc4:	1180952e 	bgeu	r2,r6,2008a01c <__umoddi3+0x520>
20089dc8:	01400604 	movi	r5,24
20089dcc:	2805883a 	mov	r2,r5
20089dd0:	003f6206 	br	20089b5c <__flash_rwdata_start+0xffff822c>
20089dd4:	00803fc4 	movi	r2,255
20089dd8:	14c0932e 	bgeu	r2,r19,2008a028 <__umoddi3+0x52c>
20089ddc:	00800204 	movi	r2,8
20089de0:	1007883a 	mov	r3,r2
20089de4:	003fb106 	br	20089cac <__flash_rwdata_start+0xffff837c>
20089de8:	3548d83a 	srl	r4,r6,r21
20089dec:	3d0e983a 	sll	r7,r7,r20
20089df0:	8d10983a 	sll	r8,r17,r20
20089df4:	8d6cd83a 	srl	r22,r17,r21
20089df8:	3922b03a 	or	r17,r7,r4
20089dfc:	882ed43a 	srli	r23,r17,16
20089e00:	8564d83a 	srl	r18,r16,r21
20089e04:	b009883a 	mov	r4,r22
20089e08:	b80b883a 	mov	r5,r23
20089e0c:	44a4b03a 	or	r18,r8,r18
20089e10:	3526983a 	sll	r19,r6,r20
20089e14:	008a1b00 	call	2008a1b0 <__umodsi3>
20089e18:	b009883a 	mov	r4,r22
20089e1c:	b80b883a 	mov	r5,r23
20089e20:	1039883a 	mov	fp,r2
20089e24:	008a1a80 	call	2008a1a8 <__udivsi3>
20089e28:	102d883a 	mov	r22,r2
20089e2c:	8a3fffcc 	andi	r8,r17,65535
20089e30:	e004943a 	slli	r2,fp,16
20089e34:	900cd43a 	srli	r6,r18,16
20089e38:	b239383a 	mul	fp,r22,r8
20089e3c:	8520983a 	sll	r16,r16,r20
20089e40:	118ab03a 	or	r5,r2,r6
20089e44:	2f00042e 	bgeu	r5,fp,20089e58 <__umoddi3+0x35c>
20089e48:	2c4b883a 	add	r5,r5,r17
20089e4c:	b0bfffc4 	addi	r2,r22,-1
20089e50:	2c40822e 	bgeu	r5,r17,2008a05c <__umoddi3+0x560>
20089e54:	102d883a 	mov	r22,r2
20089e58:	2f39c83a 	sub	fp,r5,fp
20089e5c:	e009883a 	mov	r4,fp
20089e60:	b80b883a 	mov	r5,r23
20089e64:	da000115 	stw	r8,4(sp)
20089e68:	008a1b00 	call	2008a1b0 <__umodsi3>
20089e6c:	e009883a 	mov	r4,fp
20089e70:	b80b883a 	mov	r5,r23
20089e74:	d8800015 	stw	r2,0(sp)
20089e78:	008a1a80 	call	2008a1a8 <__udivsi3>
20089e7c:	d9800017 	ldw	r6,0(sp)
20089e80:	da000117 	ldw	r8,4(sp)
20089e84:	94bfffcc 	andi	r18,r18,65535
20089e88:	300c943a 	slli	r6,r6,16
20089e8c:	1209383a 	mul	r4,r2,r8
20089e90:	3490b03a 	or	r8,r6,r18
20089e94:	4100042e 	bgeu	r8,r4,20089ea8 <__umoddi3+0x3ac>
20089e98:	4451883a 	add	r8,r8,r17
20089e9c:	10ffffc4 	addi	r3,r2,-1
20089ea0:	44406a2e 	bgeu	r8,r17,2008a04c <__umoddi3+0x550>
20089ea4:	1805883a 	mov	r2,r3
20089ea8:	b012943a 	slli	r9,r22,16
20089eac:	9abfffcc 	andi	r10,r19,65535
20089eb0:	980ed43a 	srli	r7,r19,16
20089eb4:	124ab03a 	or	r5,r2,r9
20089eb8:	2a7fffcc 	andi	r9,r5,65535
20089ebc:	280ad43a 	srli	r5,r5,16
20089ec0:	4a8d383a 	mul	r6,r9,r10
20089ec4:	49d3383a 	mul	r9,r9,r7
20089ec8:	2a95383a 	mul	r10,r5,r10
20089ecc:	3004d43a 	srli	r2,r6,16
20089ed0:	4111c83a 	sub	r8,r8,r4
20089ed4:	5253883a 	add	r9,r10,r9
20089ed8:	4893883a 	add	r9,r9,r2
20089edc:	29cb383a 	mul	r5,r5,r7
20089ee0:	4a80022e 	bgeu	r9,r10,20089eec <__umoddi3+0x3f0>
20089ee4:	00800074 	movhi	r2,1
20089ee8:	288b883a 	add	r5,r5,r2
20089eec:	4808d43a 	srli	r4,r9,16
20089ef0:	4812943a 	slli	r9,r9,16
20089ef4:	31bfffcc 	andi	r6,r6,65535
20089ef8:	290b883a 	add	r5,r5,r4
20089efc:	498d883a 	add	r6,r9,r6
20089f00:	41403a36 	bltu	r8,r5,20089fec <__umoddi3+0x4f0>
20089f04:	41405d26 	beq	r8,r5,2008a07c <__umoddi3+0x580>
20089f08:	4149c83a 	sub	r4,r8,r5
20089f0c:	300f883a 	mov	r7,r6
20089f10:	81cfc83a 	sub	r7,r16,r7
20089f14:	81c7803a 	cmpltu	r3,r16,r7
20089f18:	20c7c83a 	sub	r3,r4,r3
20089f1c:	1d44983a 	sll	r2,r3,r21
20089f20:	3d0ed83a 	srl	r7,r7,r20
20089f24:	1d06d83a 	srl	r3,r3,r20
20089f28:	11c4b03a 	or	r2,r2,r7
20089f2c:	003f9206 	br	20089d78 <__flash_rwdata_start+0xffff8448>
20089f30:	0025883a 	mov	r18,zero
20089f34:	003f1806 	br	20089b98 <__flash_rwdata_start+0xffff8268>
20089f38:	98a6983a 	sll	r19,r19,r2
20089f3c:	88e8d83a 	srl	r20,r17,r3
20089f40:	80c6d83a 	srl	r3,r16,r3
20089f44:	982cd43a 	srli	r22,r19,16
20089f48:	88a2983a 	sll	r17,r17,r2
20089f4c:	a009883a 	mov	r4,r20
20089f50:	b00b883a 	mov	r5,r22
20089f54:	88eab03a 	or	r21,r17,r3
20089f58:	1025883a 	mov	r18,r2
20089f5c:	008a1b00 	call	2008a1b0 <__umodsi3>
20089f60:	a009883a 	mov	r4,r20
20089f64:	b00b883a 	mov	r5,r22
20089f68:	1023883a 	mov	r17,r2
20089f6c:	008a1a80 	call	2008a1a8 <__udivsi3>
20089f70:	9f3fffcc 	andi	fp,r19,65535
20089f74:	8822943a 	slli	r17,r17,16
20089f78:	a80ad43a 	srli	r5,r21,16
20089f7c:	1705383a 	mul	r2,r2,fp
20089f80:	84a8983a 	sll	r20,r16,r18
20089f84:	8948b03a 	or	r4,r17,r5
20089f88:	2080042e 	bgeu	r4,r2,20089f9c <__umoddi3+0x4a0>
20089f8c:	24c9883a 	add	r4,r4,r19
20089f90:	24c00236 	bltu	r4,r19,20089f9c <__umoddi3+0x4a0>
20089f94:	2080012e 	bgeu	r4,r2,20089f9c <__umoddi3+0x4a0>
20089f98:	24c9883a 	add	r4,r4,r19
20089f9c:	20afc83a 	sub	r23,r4,r2
20089fa0:	b809883a 	mov	r4,r23
20089fa4:	b00b883a 	mov	r5,r22
20089fa8:	008a1b00 	call	2008a1b0 <__umodsi3>
20089fac:	1023883a 	mov	r17,r2
20089fb0:	b809883a 	mov	r4,r23
20089fb4:	b00b883a 	mov	r5,r22
20089fb8:	008a1a80 	call	2008a1a8 <__udivsi3>
20089fbc:	8822943a 	slli	r17,r17,16
20089fc0:	1705383a 	mul	r2,r2,fp
20089fc4:	a93fffcc 	andi	r4,r21,65535
20089fc8:	8908b03a 	or	r4,r17,r4
20089fcc:	2080042e 	bgeu	r4,r2,20089fe0 <__umoddi3+0x4e4>
20089fd0:	24c9883a 	add	r4,r4,r19
20089fd4:	24c00236 	bltu	r4,r19,20089fe0 <__umoddi3+0x4e4>
20089fd8:	2080012e 	bgeu	r4,r2,20089fe0 <__umoddi3+0x4e4>
20089fdc:	24c9883a 	add	r4,r4,r19
20089fe0:	20a3c83a 	sub	r17,r4,r2
20089fe4:	e021883a 	mov	r16,fp
20089fe8:	003f3d06 	br	20089ce0 <__flash_rwdata_start+0xffff83b0>
20089fec:	34cfc83a 	sub	r7,r6,r19
20089ff0:	2c4bc83a 	sub	r5,r5,r17
20089ff4:	31cd803a 	cmpltu	r6,r6,r7
20089ff8:	298dc83a 	sub	r6,r5,r6
20089ffc:	4189c83a 	sub	r4,r8,r6
2008a000:	003fc306 	br	20089f10 <__flash_rwdata_start+0xffff85e0>
2008a004:	000b883a 	mov	r5,zero
2008a008:	002b883a 	mov	r21,zero
2008a00c:	003f0a06 	br	20089c38 <__flash_rwdata_start+0xffff8308>
2008a010:	01400404 	movi	r5,16
2008a014:	282b883a 	mov	r21,r5
2008a018:	003f0706 	br	20089c38 <__flash_rwdata_start+0xffff8308>
2008a01c:	01400404 	movi	r5,16
2008a020:	2805883a 	mov	r2,r5
2008a024:	003ecd06 	br	20089b5c <__flash_rwdata_start+0xffff822c>
2008a028:	0005883a 	mov	r2,zero
2008a02c:	0007883a 	mov	r3,zero
2008a030:	003f1e06 	br	20089cac <__flash_rwdata_start+0xffff837c>
2008a034:	00800404 	movi	r2,16
2008a038:	1007883a 	mov	r3,r2
2008a03c:	003f1b06 	br	20089cac <__flash_rwdata_start+0xffff837c>
2008a040:	000b883a 	mov	r5,zero
2008a044:	0005883a 	mov	r2,zero
2008a048:	003ec406 	br	20089b5c <__flash_rwdata_start+0xffff822c>
2008a04c:	413f952e 	bgeu	r8,r4,20089ea4 <__flash_rwdata_start+0xffff8574>
2008a050:	10bfff84 	addi	r2,r2,-2
2008a054:	4451883a 	add	r8,r8,r17
2008a058:	003f9306 	br	20089ea8 <__flash_rwdata_start+0xffff8578>
2008a05c:	2f3f7d2e 	bgeu	r5,fp,20089e54 <__flash_rwdata_start+0xffff8524>
2008a060:	b5bfff84 	addi	r22,r22,-2
2008a064:	2c4b883a 	add	r5,r5,r17
2008a068:	003f7b06 	br	20089e58 <__flash_rwdata_start+0xffff8528>
2008a06c:	34cd883a 	add	r6,r6,r19
2008a070:	003f2a06 	br	20089d1c <__flash_rwdata_start+0xffff83ec>
2008a074:	8005883a 	mov	r2,r16
2008a078:	003efe06 	br	20089c74 <__flash_rwdata_start+0xffff8344>
2008a07c:	81bfdb36 	bltu	r16,r6,20089fec <__flash_rwdata_start+0xffff86bc>
2008a080:	300f883a 	mov	r7,r6
2008a084:	0009883a 	mov	r4,zero
2008a088:	003fa106 	br	20089f10 <__flash_rwdata_start+0xffff85e0>

2008a08c <udivmodsi4>:
2008a08c:	2900182e 	bgeu	r5,r4,2008a0f0 <udivmodsi4+0x64>
2008a090:	28001716 	blt	r5,zero,2008a0f0 <udivmodsi4+0x64>
2008a094:	00800804 	movi	r2,32
2008a098:	00c00044 	movi	r3,1
2008a09c:	00000206 	br	2008a0a8 <udivmodsi4+0x1c>
2008a0a0:	10001126 	beq	r2,zero,2008a0e8 <udivmodsi4+0x5c>
2008a0a4:	28000516 	blt	r5,zero,2008a0bc <udivmodsi4+0x30>
2008a0a8:	294b883a 	add	r5,r5,r5
2008a0ac:	10bfffc4 	addi	r2,r2,-1
2008a0b0:	18c7883a 	add	r3,r3,r3
2008a0b4:	293ffa36 	bltu	r5,r4,2008a0a0 <__flash_rwdata_start+0xffff8770>
2008a0b8:	18000b26 	beq	r3,zero,2008a0e8 <udivmodsi4+0x5c>
2008a0bc:	0005883a 	mov	r2,zero
2008a0c0:	21400236 	bltu	r4,r5,2008a0cc <udivmodsi4+0x40>
2008a0c4:	2149c83a 	sub	r4,r4,r5
2008a0c8:	10c4b03a 	or	r2,r2,r3
2008a0cc:	1806d07a 	srli	r3,r3,1
2008a0d0:	280ad07a 	srli	r5,r5,1
2008a0d4:	183ffa1e 	bne	r3,zero,2008a0c0 <__flash_rwdata_start+0xffff8790>
2008a0d8:	3000011e 	bne	r6,zero,2008a0e0 <udivmodsi4+0x54>
2008a0dc:	f800283a 	ret
2008a0e0:	2005883a 	mov	r2,r4
2008a0e4:	f800283a 	ret
2008a0e8:	0005883a 	mov	r2,zero
2008a0ec:	003ffa06 	br	2008a0d8 <__flash_rwdata_start+0xffff87a8>
2008a0f0:	00c00044 	movi	r3,1
2008a0f4:	003ff106 	br	2008a0bc <__flash_rwdata_start+0xffff878c>

2008a0f8 <__divsi3>:
2008a0f8:	defffe04 	addi	sp,sp,-8
2008a0fc:	dfc00115 	stw	ra,4(sp)
2008a100:	dc000015 	stw	r16,0(sp)
2008a104:	20000b16 	blt	r4,zero,2008a134 <__divsi3+0x3c>
2008a108:	0021883a 	mov	r16,zero
2008a10c:	28000c16 	blt	r5,zero,2008a140 <__divsi3+0x48>
2008a110:	000d883a 	mov	r6,zero
2008a114:	008a08c0 	call	2008a08c <udivmodsi4>
2008a118:	0407c83a 	sub	r3,zero,r16
2008a11c:	1884f03a 	xor	r2,r3,r2
2008a120:	1405883a 	add	r2,r2,r16
2008a124:	dfc00117 	ldw	ra,4(sp)
2008a128:	dc000017 	ldw	r16,0(sp)
2008a12c:	dec00204 	addi	sp,sp,8
2008a130:	f800283a 	ret
2008a134:	0109c83a 	sub	r4,zero,r4
2008a138:	04000044 	movi	r16,1
2008a13c:	283ff40e 	bge	r5,zero,2008a110 <__flash_rwdata_start+0xffff87e0>
2008a140:	014bc83a 	sub	r5,zero,r5
2008a144:	8400005c 	xori	r16,r16,1
2008a148:	003ff106 	br	2008a110 <__flash_rwdata_start+0xffff87e0>

2008a14c <__modsi3>:
2008a14c:	defffd04 	addi	sp,sp,-12
2008a150:	dfc00215 	stw	ra,8(sp)
2008a154:	dc400115 	stw	r17,4(sp)
2008a158:	dc000015 	stw	r16,0(sp)
2008a15c:	20000c16 	blt	r4,zero,2008a190 <__modsi3+0x44>
2008a160:	0023883a 	mov	r17,zero
2008a164:	0021883a 	mov	r16,zero
2008a168:	28000d16 	blt	r5,zero,2008a1a0 <__modsi3+0x54>
2008a16c:	01800044 	movi	r6,1
2008a170:	008a08c0 	call	2008a08c <udivmodsi4>
2008a174:	1404f03a 	xor	r2,r2,r16
2008a178:	8885883a 	add	r2,r17,r2
2008a17c:	dfc00217 	ldw	ra,8(sp)
2008a180:	dc400117 	ldw	r17,4(sp)
2008a184:	dc000017 	ldw	r16,0(sp)
2008a188:	dec00304 	addi	sp,sp,12
2008a18c:	f800283a 	ret
2008a190:	0109c83a 	sub	r4,zero,r4
2008a194:	04400044 	movi	r17,1
2008a198:	043fffc4 	movi	r16,-1
2008a19c:	283ff30e 	bge	r5,zero,2008a16c <__flash_rwdata_start+0xffff883c>
2008a1a0:	014bc83a 	sub	r5,zero,r5
2008a1a4:	003ff106 	br	2008a16c <__flash_rwdata_start+0xffff883c>

2008a1a8 <__udivsi3>:
2008a1a8:	000d883a 	mov	r6,zero
2008a1ac:	008a08c1 	jmpi	2008a08c <udivmodsi4>

2008a1b0 <__umodsi3>:
2008a1b0:	01800044 	movi	r6,1
2008a1b4:	008a08c1 	jmpi	2008a08c <udivmodsi4>

2008a1b8 <__adddf3>:
2008a1b8:	02000434 	movhi	r8,16
2008a1bc:	423fffc4 	addi	r8,r8,-1
2008a1c0:	defffb04 	addi	sp,sp,-20
2008a1c4:	2a12703a 	and	r9,r5,r8
2008a1c8:	2806d7fa 	srli	r3,r5,31
2008a1cc:	3a10703a 	and	r8,r7,r8
2008a1d0:	3804d53a 	srli	r2,r7,20
2008a1d4:	3014d77a 	srli	r10,r6,29
2008a1d8:	dc000015 	stw	r16,0(sp)
2008a1dc:	481290fa 	slli	r9,r9,3
2008a1e0:	2820d53a 	srli	r16,r5,20
2008a1e4:	401090fa 	slli	r8,r8,3
2008a1e8:	200ad77a 	srli	r5,r4,29
2008a1ec:	380ed7fa 	srli	r7,r7,31
2008a1f0:	dc800215 	stw	r18,8(sp)
2008a1f4:	dc400115 	stw	r17,4(sp)
2008a1f8:	dfc00415 	stw	ra,16(sp)
2008a1fc:	dcc00315 	stw	r19,12(sp)
2008a200:	1c803fcc 	andi	r18,r3,255
2008a204:	8401ffcc 	andi	r16,r16,2047
2008a208:	494ab03a 	or	r5,r9,r5
2008a20c:	202290fa 	slli	r17,r4,3
2008a210:	1081ffcc 	andi	r2,r2,2047
2008a214:	4290b03a 	or	r8,r8,r10
2008a218:	300c90fa 	slli	r6,r6,3
2008a21c:	91c07026 	beq	r18,r7,2008a3e0 <__adddf3+0x228>
2008a220:	8087c83a 	sub	r3,r16,r2
2008a224:	00c0b30e 	bge	zero,r3,2008a4f4 <__adddf3+0x33c>
2008a228:	10002a1e 	bne	r2,zero,2008a2d4 <__adddf3+0x11c>
2008a22c:	4184b03a 	or	r2,r8,r6
2008a230:	1000991e 	bne	r2,zero,2008a498 <__adddf3+0x2e0>
2008a234:	888001cc 	andi	r2,r17,7
2008a238:	10005b26 	beq	r2,zero,2008a3a8 <__adddf3+0x1f0>
2008a23c:	88c003cc 	andi	r3,r17,15
2008a240:	00800104 	movi	r2,4
2008a244:	18805826 	beq	r3,r2,2008a3a8 <__adddf3+0x1f0>
2008a248:	89800104 	addi	r6,r17,4
2008a24c:	3463803a 	cmpltu	r17,r6,r17
2008a250:	2c4b883a 	add	r5,r5,r17
2008a254:	2880202c 	andhi	r2,r5,128
2008a258:	9007883a 	mov	r3,r18
2008a25c:	3023883a 	mov	r17,r6
2008a260:	10005426 	beq	r2,zero,2008a3b4 <__adddf3+0x1fc>
2008a264:	84000044 	addi	r16,r16,1
2008a268:	0081ffc4 	movi	r2,2047
2008a26c:	8080c126 	beq	r16,r2,2008a574 <__adddf3+0x3bc>
2008a270:	013fe034 	movhi	r4,65408
2008a274:	213fffc4 	addi	r4,r4,-1
2008a278:	290a703a 	and	r5,r5,r4
2008a27c:	2804977a 	slli	r2,r5,29
2008a280:	280a927a 	slli	r5,r5,9
2008a284:	8822d0fa 	srli	r17,r17,3
2008a288:	8401ffcc 	andi	r16,r16,2047
2008a28c:	2808d33a 	srli	r4,r5,12
2008a290:	1444b03a 	or	r2,r2,r17
2008a294:	8401ffcc 	andi	r16,r16,2047
2008a298:	800a953a 	slli	r5,r16,20
2008a29c:	18c03fcc 	andi	r3,r3,255
2008a2a0:	04000434 	movhi	r16,16
2008a2a4:	180697fa 	slli	r3,r3,31
2008a2a8:	843fffc4 	addi	r16,r16,-1
2008a2ac:	2420703a 	and	r16,r4,r16
2008a2b0:	8160b03a 	or	r16,r16,r5
2008a2b4:	80c6b03a 	or	r3,r16,r3
2008a2b8:	dfc00417 	ldw	ra,16(sp)
2008a2bc:	dcc00317 	ldw	r19,12(sp)
2008a2c0:	dc800217 	ldw	r18,8(sp)
2008a2c4:	dc400117 	ldw	r17,4(sp)
2008a2c8:	dc000017 	ldw	r16,0(sp)
2008a2cc:	dec00504 	addi	sp,sp,20
2008a2d0:	f800283a 	ret
2008a2d4:	0081ffc4 	movi	r2,2047
2008a2d8:	80bfd626 	beq	r16,r2,2008a234 <__flash_rwdata_start+0xffff8904>
2008a2dc:	42002034 	orhi	r8,r8,128
2008a2e0:	00800e04 	movi	r2,56
2008a2e4:	10c0a616 	blt	r2,r3,2008a580 <__adddf3+0x3c8>
2008a2e8:	008007c4 	movi	r2,31
2008a2ec:	10c0c916 	blt	r2,r3,2008a614 <__adddf3+0x45c>
2008a2f0:	00800804 	movi	r2,32
2008a2f4:	10c5c83a 	sub	r2,r2,r3
2008a2f8:	408e983a 	sll	r7,r8,r2
2008a2fc:	30c8d83a 	srl	r4,r6,r3
2008a300:	3084983a 	sll	r2,r6,r2
2008a304:	40c6d83a 	srl	r3,r8,r3
2008a308:	390cb03a 	or	r6,r7,r4
2008a30c:	1004c03a 	cmpne	r2,r2,zero
2008a310:	308cb03a 	or	r6,r6,r2
2008a314:	898dc83a 	sub	r6,r17,r6
2008a318:	89a3803a 	cmpltu	r17,r17,r6
2008a31c:	28cbc83a 	sub	r5,r5,r3
2008a320:	2c4bc83a 	sub	r5,r5,r17
2008a324:	3023883a 	mov	r17,r6
2008a328:	2880202c 	andhi	r2,r5,128
2008a32c:	10006d26 	beq	r2,zero,2008a4e4 <__adddf3+0x32c>
2008a330:	04c02034 	movhi	r19,128
2008a334:	9cffffc4 	addi	r19,r19,-1
2008a338:	2ce6703a 	and	r19,r5,r19
2008a33c:	98007e26 	beq	r19,zero,2008a538 <__adddf3+0x380>
2008a340:	9809883a 	mov	r4,r19
2008a344:	008c7540 	call	2008c754 <__clzsi2>
2008a348:	10fffe04 	addi	r3,r2,-8
2008a34c:	010007c4 	movi	r4,31
2008a350:	20c07f16 	blt	r4,r3,2008a550 <__adddf3+0x398>
2008a354:	01400a04 	movi	r5,40
2008a358:	2885c83a 	sub	r2,r5,r2
2008a35c:	888ad83a 	srl	r5,r17,r2
2008a360:	98e6983a 	sll	r19,r19,r3
2008a364:	88e2983a 	sll	r17,r17,r3
2008a368:	2ce6b03a 	or	r19,r5,r19
2008a36c:	1c007c16 	blt	r3,r16,2008a560 <__adddf3+0x3a8>
2008a370:	1c21c83a 	sub	r16,r3,r16
2008a374:	81400044 	addi	r5,r16,1
2008a378:	00c007c4 	movi	r3,31
2008a37c:	19409816 	blt	r3,r5,2008a5e0 <__adddf3+0x428>
2008a380:	1c21c83a 	sub	r16,r3,r16
2008a384:	8c08983a 	sll	r4,r17,r16
2008a388:	8946d83a 	srl	r3,r17,r5
2008a38c:	9c20983a 	sll	r16,r19,r16
2008a390:	2008c03a 	cmpne	r4,r4,zero
2008a394:	994ad83a 	srl	r5,r19,r5
2008a398:	1c06b03a 	or	r3,r3,r16
2008a39c:	1922b03a 	or	r17,r3,r4
2008a3a0:	0021883a 	mov	r16,zero
2008a3a4:	003fa306 	br	2008a234 <__flash_rwdata_start+0xffff8904>
2008a3a8:	2880202c 	andhi	r2,r5,128
2008a3ac:	9007883a 	mov	r3,r18
2008a3b0:	103fac1e 	bne	r2,zero,2008a264 <__flash_rwdata_start+0xffff8934>
2008a3b4:	2804977a 	slli	r2,r5,29
2008a3b8:	8822d0fa 	srli	r17,r17,3
2008a3bc:	0101ffc4 	movi	r4,2047
2008a3c0:	280ad0fa 	srli	r5,r5,3
2008a3c4:	1444b03a 	or	r2,r2,r17
2008a3c8:	81002c26 	beq	r16,r4,2008a47c <__adddf3+0x2c4>
2008a3cc:	8120703a 	and	r16,r16,r4
2008a3d0:	01000434 	movhi	r4,16
2008a3d4:	213fffc4 	addi	r4,r4,-1
2008a3d8:	2908703a 	and	r4,r5,r4
2008a3dc:	003fad06 	br	2008a294 <__flash_rwdata_start+0xffff8964>
2008a3e0:	8089c83a 	sub	r4,r16,r2
2008a3e4:	01006a0e 	bge	zero,r4,2008a590 <__adddf3+0x3d8>
2008a3e8:	10003326 	beq	r2,zero,2008a4b8 <__adddf3+0x300>
2008a3ec:	0081ffc4 	movi	r2,2047
2008a3f0:	80bf9026 	beq	r16,r2,2008a234 <__flash_rwdata_start+0xffff8904>
2008a3f4:	42002034 	orhi	r8,r8,128
2008a3f8:	00800e04 	movi	r2,56
2008a3fc:	1100b116 	blt	r2,r4,2008a6c4 <__adddf3+0x50c>
2008a400:	008007c4 	movi	r2,31
2008a404:	1100e216 	blt	r2,r4,2008a790 <__adddf3+0x5d8>
2008a408:	00800804 	movi	r2,32
2008a40c:	1105c83a 	sub	r2,r2,r4
2008a410:	4092983a 	sll	r9,r8,r2
2008a414:	310ed83a 	srl	r7,r6,r4
2008a418:	3084983a 	sll	r2,r6,r2
2008a41c:	4110d83a 	srl	r8,r8,r4
2008a420:	49ccb03a 	or	r6,r9,r7
2008a424:	1004c03a 	cmpne	r2,r2,zero
2008a428:	308cb03a 	or	r6,r6,r2
2008a42c:	344d883a 	add	r6,r6,r17
2008a430:	3463803a 	cmpltu	r17,r6,r17
2008a434:	414b883a 	add	r5,r8,r5
2008a438:	2c4b883a 	add	r5,r5,r17
2008a43c:	3023883a 	mov	r17,r6
2008a440:	2880202c 	andhi	r2,r5,128
2008a444:	10002726 	beq	r2,zero,2008a4e4 <__adddf3+0x32c>
2008a448:	84000044 	addi	r16,r16,1
2008a44c:	0081ffc4 	movi	r2,2047
2008a450:	8080ae26 	beq	r16,r2,2008a70c <__adddf3+0x554>
2008a454:	00bfe034 	movhi	r2,65408
2008a458:	10bfffc4 	addi	r2,r2,-1
2008a45c:	288a703a 	and	r5,r5,r2
2008a460:	880cd07a 	srli	r6,r17,1
2008a464:	280897fa 	slli	r4,r5,31
2008a468:	88c0004c 	andi	r3,r17,1
2008a46c:	30e2b03a 	or	r17,r6,r3
2008a470:	280ad07a 	srli	r5,r5,1
2008a474:	8922b03a 	or	r17,r17,r4
2008a478:	003f6e06 	br	2008a234 <__flash_rwdata_start+0xffff8904>
2008a47c:	1148b03a 	or	r4,r2,r5
2008a480:	20003c26 	beq	r4,zero,2008a574 <__adddf3+0x3bc>
2008a484:	29000234 	orhi	r4,r5,8
2008a488:	01400434 	movhi	r5,16
2008a48c:	297fffc4 	addi	r5,r5,-1
2008a490:	2148703a 	and	r4,r4,r5
2008a494:	003f7f06 	br	2008a294 <__flash_rwdata_start+0xffff8964>
2008a498:	18ffffc4 	addi	r3,r3,-1
2008a49c:	18004d1e 	bne	r3,zero,2008a5d4 <__adddf3+0x41c>
2008a4a0:	898dc83a 	sub	r6,r17,r6
2008a4a4:	89a3803a 	cmpltu	r17,r17,r6
2008a4a8:	2a0bc83a 	sub	r5,r5,r8
2008a4ac:	2c4bc83a 	sub	r5,r5,r17
2008a4b0:	3023883a 	mov	r17,r6
2008a4b4:	003f9c06 	br	2008a328 <__flash_rwdata_start+0xffff89f8>
2008a4b8:	4184b03a 	or	r2,r8,r6
2008a4bc:	103f5d26 	beq	r2,zero,2008a234 <__flash_rwdata_start+0xffff8904>
2008a4c0:	213fffc4 	addi	r4,r4,-1
2008a4c4:	203fd926 	beq	r4,zero,2008a42c <__flash_rwdata_start+0xffff8afc>
2008a4c8:	0081ffc4 	movi	r2,2047
2008a4cc:	80bfca1e 	bne	r16,r2,2008a3f8 <__flash_rwdata_start+0xffff8ac8>
2008a4d0:	003f5806 	br	2008a234 <__flash_rwdata_start+0xffff8904>
2008a4d4:	10c8b03a 	or	r4,r2,r3
2008a4d8:	20008b26 	beq	r4,zero,2008a708 <__adddf3+0x550>
2008a4dc:	100b883a 	mov	r5,r2
2008a4e0:	1823883a 	mov	r17,r3
2008a4e4:	888001cc 	andi	r2,r17,7
2008a4e8:	103f541e 	bne	r2,zero,2008a23c <__flash_rwdata_start+0xffff890c>
2008a4ec:	9007883a 	mov	r3,r18
2008a4f0:	003fb006 	br	2008a3b4 <__flash_rwdata_start+0xffff8a84>
2008a4f4:	1800531e 	bne	r3,zero,2008a644 <__adddf3+0x48c>
2008a4f8:	80800044 	addi	r2,r16,1
2008a4fc:	1081ffcc 	andi	r2,r2,2047
2008a500:	00c00044 	movi	r3,1
2008a504:	1880990e 	bge	r3,r2,2008a76c <__adddf3+0x5b4>
2008a508:	8985c83a 	sub	r2,r17,r6
2008a50c:	8887803a 	cmpltu	r3,r17,r2
2008a510:	2a27c83a 	sub	r19,r5,r8
2008a514:	98e7c83a 	sub	r19,r19,r3
2008a518:	98c0202c 	andhi	r3,r19,128
2008a51c:	18006226 	beq	r3,zero,2008a6a8 <__adddf3+0x4f0>
2008a520:	3463c83a 	sub	r17,r6,r17
2008a524:	4151c83a 	sub	r8,r8,r5
2008a528:	344d803a 	cmpltu	r6,r6,r17
2008a52c:	41a7c83a 	sub	r19,r8,r6
2008a530:	3825883a 	mov	r18,r7
2008a534:	983f821e 	bne	r19,zero,2008a340 <__flash_rwdata_start+0xffff8a10>
2008a538:	8809883a 	mov	r4,r17
2008a53c:	008c7540 	call	2008c754 <__clzsi2>
2008a540:	10800804 	addi	r2,r2,32
2008a544:	10fffe04 	addi	r3,r2,-8
2008a548:	010007c4 	movi	r4,31
2008a54c:	20ff810e 	bge	r4,r3,2008a354 <__flash_rwdata_start+0xffff8a24>
2008a550:	14fff604 	addi	r19,r2,-40
2008a554:	8ce6983a 	sll	r19,r17,r19
2008a558:	0023883a 	mov	r17,zero
2008a55c:	1c3f840e 	bge	r3,r16,2008a370 <__flash_rwdata_start+0xffff8a40>
2008a560:	017fe034 	movhi	r5,65408
2008a564:	297fffc4 	addi	r5,r5,-1
2008a568:	80e1c83a 	sub	r16,r16,r3
2008a56c:	994a703a 	and	r5,r19,r5
2008a570:	003f3006 	br	2008a234 <__flash_rwdata_start+0xffff8904>
2008a574:	0009883a 	mov	r4,zero
2008a578:	0005883a 	mov	r2,zero
2008a57c:	003f4506 	br	2008a294 <__flash_rwdata_start+0xffff8964>
2008a580:	418cb03a 	or	r6,r8,r6
2008a584:	300cc03a 	cmpne	r6,r6,zero
2008a588:	0007883a 	mov	r3,zero
2008a58c:	003f6106 	br	2008a314 <__flash_rwdata_start+0xffff89e4>
2008a590:	2000921e 	bne	r4,zero,2008a7dc <__adddf3+0x624>
2008a594:	80800044 	addi	r2,r16,1
2008a598:	11c1ffcc 	andi	r7,r2,2047
2008a59c:	01000044 	movi	r4,1
2008a5a0:	21c0610e 	bge	r4,r7,2008a728 <__adddf3+0x570>
2008a5a4:	0101ffc4 	movi	r4,2047
2008a5a8:	1100a326 	beq	r2,r4,2008a838 <__adddf3+0x680>
2008a5ac:	344d883a 	add	r6,r6,r17
2008a5b0:	3463803a 	cmpltu	r17,r6,r17
2008a5b4:	414b883a 	add	r5,r8,r5
2008a5b8:	2c4b883a 	add	r5,r5,r17
2008a5bc:	282297fa 	slli	r17,r5,31
2008a5c0:	300cd07a 	srli	r6,r6,1
2008a5c4:	280ad07a 	srli	r5,r5,1
2008a5c8:	1021883a 	mov	r16,r2
2008a5cc:	89a2b03a 	or	r17,r17,r6
2008a5d0:	003f1806 	br	2008a234 <__flash_rwdata_start+0xffff8904>
2008a5d4:	0081ffc4 	movi	r2,2047
2008a5d8:	80bf411e 	bne	r16,r2,2008a2e0 <__flash_rwdata_start+0xffff89b0>
2008a5dc:	003f1506 	br	2008a234 <__flash_rwdata_start+0xffff8904>
2008a5e0:	80bff844 	addi	r2,r16,-31
2008a5e4:	00c00804 	movi	r3,32
2008a5e8:	9884d83a 	srl	r2,r19,r2
2008a5ec:	28c04a26 	beq	r5,r3,2008a718 <__adddf3+0x560>
2008a5f0:	00c00fc4 	movi	r3,63
2008a5f4:	1c21c83a 	sub	r16,r3,r16
2008a5f8:	9c26983a 	sll	r19,r19,r16
2008a5fc:	9c62b03a 	or	r17,r19,r17
2008a600:	8822c03a 	cmpne	r17,r17,zero
2008a604:	88a2b03a 	or	r17,r17,r2
2008a608:	000b883a 	mov	r5,zero
2008a60c:	0021883a 	mov	r16,zero
2008a610:	003fb406 	br	2008a4e4 <__flash_rwdata_start+0xffff8bb4>
2008a614:	18bff804 	addi	r2,r3,-32
2008a618:	01000804 	movi	r4,32
2008a61c:	4084d83a 	srl	r2,r8,r2
2008a620:	19003f26 	beq	r3,r4,2008a720 <__adddf3+0x568>
2008a624:	01001004 	movi	r4,64
2008a628:	20c7c83a 	sub	r3,r4,r3
2008a62c:	40d0983a 	sll	r8,r8,r3
2008a630:	418cb03a 	or	r6,r8,r6
2008a634:	300cc03a 	cmpne	r6,r6,zero
2008a638:	308cb03a 	or	r6,r6,r2
2008a63c:	0007883a 	mov	r3,zero
2008a640:	003f3406 	br	2008a314 <__flash_rwdata_start+0xffff89e4>
2008a644:	80002326 	beq	r16,zero,2008a6d4 <__adddf3+0x51c>
2008a648:	0101ffc4 	movi	r4,2047
2008a64c:	11005e26 	beq	r2,r4,2008a7c8 <__adddf3+0x610>
2008a650:	00c7c83a 	sub	r3,zero,r3
2008a654:	29402034 	orhi	r5,r5,128
2008a658:	01000e04 	movi	r4,56
2008a65c:	20c07216 	blt	r4,r3,2008a828 <__adddf3+0x670>
2008a660:	010007c4 	movi	r4,31
2008a664:	20c0ce16 	blt	r4,r3,2008a9a0 <__adddf3+0x7e8>
2008a668:	01000804 	movi	r4,32
2008a66c:	20c9c83a 	sub	r4,r4,r3
2008a670:	2914983a 	sll	r10,r5,r4
2008a674:	88d2d83a 	srl	r9,r17,r3
2008a678:	8908983a 	sll	r4,r17,r4
2008a67c:	28c6d83a 	srl	r3,r5,r3
2008a680:	5262b03a 	or	r17,r10,r9
2008a684:	2008c03a 	cmpne	r4,r4,zero
2008a688:	8922b03a 	or	r17,r17,r4
2008a68c:	3463c83a 	sub	r17,r6,r17
2008a690:	40c7c83a 	sub	r3,r8,r3
2008a694:	344d803a 	cmpltu	r6,r6,r17
2008a698:	198bc83a 	sub	r5,r3,r6
2008a69c:	1021883a 	mov	r16,r2
2008a6a0:	3825883a 	mov	r18,r7
2008a6a4:	003f2006 	br	2008a328 <__flash_rwdata_start+0xffff89f8>
2008a6a8:	9886b03a 	or	r3,r19,r2
2008a6ac:	1800141e 	bne	r3,zero,2008a700 <__adddf3+0x548>
2008a6b0:	0007883a 	mov	r3,zero
2008a6b4:	000b883a 	mov	r5,zero
2008a6b8:	0023883a 	mov	r17,zero
2008a6bc:	0021883a 	mov	r16,zero
2008a6c0:	003f3c06 	br	2008a3b4 <__flash_rwdata_start+0xffff8a84>
2008a6c4:	418cb03a 	or	r6,r8,r6
2008a6c8:	300cc03a 	cmpne	r6,r6,zero
2008a6cc:	0011883a 	mov	r8,zero
2008a6d0:	003f5606 	br	2008a42c <__flash_rwdata_start+0xffff8afc>
2008a6d4:	2c48b03a 	or	r4,r5,r17
2008a6d8:	20003b26 	beq	r4,zero,2008a7c8 <__adddf3+0x610>
2008a6dc:	00c6303a 	nor	r3,zero,r3
2008a6e0:	1800371e 	bne	r3,zero,2008a7c0 <__adddf3+0x608>
2008a6e4:	3463c83a 	sub	r17,r6,r17
2008a6e8:	414bc83a 	sub	r5,r8,r5
2008a6ec:	344d803a 	cmpltu	r6,r6,r17
2008a6f0:	298bc83a 	sub	r5,r5,r6
2008a6f4:	1021883a 	mov	r16,r2
2008a6f8:	3825883a 	mov	r18,r7
2008a6fc:	003f0a06 	br	2008a328 <__flash_rwdata_start+0xffff89f8>
2008a700:	1023883a 	mov	r17,r2
2008a704:	003f0d06 	br	2008a33c <__flash_rwdata_start+0xffff8a0c>
2008a708:	0007883a 	mov	r3,zero
2008a70c:	000b883a 	mov	r5,zero
2008a710:	0023883a 	mov	r17,zero
2008a714:	003f2706 	br	2008a3b4 <__flash_rwdata_start+0xffff8a84>
2008a718:	0027883a 	mov	r19,zero
2008a71c:	003fb706 	br	2008a5fc <__flash_rwdata_start+0xffff8ccc>
2008a720:	0011883a 	mov	r8,zero
2008a724:	003fc206 	br	2008a630 <__flash_rwdata_start+0xffff8d00>
2008a728:	2c44b03a 	or	r2,r5,r17
2008a72c:	8000871e 	bne	r16,zero,2008a94c <__adddf3+0x794>
2008a730:	1000b126 	beq	r2,zero,2008a9f8 <__adddf3+0x840>
2008a734:	4184b03a 	or	r2,r8,r6
2008a738:	103ebe26 	beq	r2,zero,2008a234 <__flash_rwdata_start+0xffff8904>
2008a73c:	3445883a 	add	r2,r6,r17
2008a740:	1463803a 	cmpltu	r17,r2,r17
2008a744:	414b883a 	add	r5,r8,r5
2008a748:	2c4b883a 	add	r5,r5,r17
2008a74c:	28c0202c 	andhi	r3,r5,128
2008a750:	1023883a 	mov	r17,r2
2008a754:	183f6326 	beq	r3,zero,2008a4e4 <__flash_rwdata_start+0xffff8bb4>
2008a758:	00bfe034 	movhi	r2,65408
2008a75c:	10bfffc4 	addi	r2,r2,-1
2008a760:	2021883a 	mov	r16,r4
2008a764:	288a703a 	and	r5,r5,r2
2008a768:	003eb206 	br	2008a234 <__flash_rwdata_start+0xffff8904>
2008a76c:	2c44b03a 	or	r2,r5,r17
2008a770:	8000251e 	bne	r16,zero,2008a808 <__adddf3+0x650>
2008a774:	10004b1e 	bne	r2,zero,2008a8a4 <__adddf3+0x6ec>
2008a778:	4184b03a 	or	r2,r8,r6
2008a77c:	103fe226 	beq	r2,zero,2008a708 <__flash_rwdata_start+0xffff8dd8>
2008a780:	400b883a 	mov	r5,r8
2008a784:	3023883a 	mov	r17,r6
2008a788:	3825883a 	mov	r18,r7
2008a78c:	003ea906 	br	2008a234 <__flash_rwdata_start+0xffff8904>
2008a790:	20bff804 	addi	r2,r4,-32
2008a794:	01c00804 	movi	r7,32
2008a798:	4084d83a 	srl	r2,r8,r2
2008a79c:	21c07e26 	beq	r4,r7,2008a998 <__adddf3+0x7e0>
2008a7a0:	01c01004 	movi	r7,64
2008a7a4:	3909c83a 	sub	r4,r7,r4
2008a7a8:	4110983a 	sll	r8,r8,r4
2008a7ac:	418cb03a 	or	r6,r8,r6
2008a7b0:	300cc03a 	cmpne	r6,r6,zero
2008a7b4:	308cb03a 	or	r6,r6,r2
2008a7b8:	0011883a 	mov	r8,zero
2008a7bc:	003f1b06 	br	2008a42c <__flash_rwdata_start+0xffff8afc>
2008a7c0:	0101ffc4 	movi	r4,2047
2008a7c4:	113fa41e 	bne	r2,r4,2008a658 <__flash_rwdata_start+0xffff8d28>
2008a7c8:	400b883a 	mov	r5,r8
2008a7cc:	3023883a 	mov	r17,r6
2008a7d0:	1021883a 	mov	r16,r2
2008a7d4:	3825883a 	mov	r18,r7
2008a7d8:	003e9606 	br	2008a234 <__flash_rwdata_start+0xffff8904>
2008a7dc:	80001a1e 	bne	r16,zero,2008a848 <__adddf3+0x690>
2008a7e0:	2c4eb03a 	or	r7,r5,r17
2008a7e4:	38005526 	beq	r7,zero,2008a93c <__adddf3+0x784>
2008a7e8:	0108303a 	nor	r4,zero,r4
2008a7ec:	2000511e 	bne	r4,zero,2008a934 <__adddf3+0x77c>
2008a7f0:	89a3883a 	add	r17,r17,r6
2008a7f4:	414b883a 	add	r5,r8,r5
2008a7f8:	898d803a 	cmpltu	r6,r17,r6
2008a7fc:	298b883a 	add	r5,r5,r6
2008a800:	1021883a 	mov	r16,r2
2008a804:	003f0e06 	br	2008a440 <__flash_rwdata_start+0xffff8b10>
2008a808:	1000341e 	bne	r2,zero,2008a8dc <__adddf3+0x724>
2008a80c:	4184b03a 	or	r2,r8,r6
2008a810:	10006f26 	beq	r2,zero,2008a9d0 <__adddf3+0x818>
2008a814:	400b883a 	mov	r5,r8
2008a818:	3023883a 	mov	r17,r6
2008a81c:	3825883a 	mov	r18,r7
2008a820:	0401ffc4 	movi	r16,2047
2008a824:	003e8306 	br	2008a234 <__flash_rwdata_start+0xffff8904>
2008a828:	2c62b03a 	or	r17,r5,r17
2008a82c:	8822c03a 	cmpne	r17,r17,zero
2008a830:	0007883a 	mov	r3,zero
2008a834:	003f9506 	br	2008a68c <__flash_rwdata_start+0xffff8d5c>
2008a838:	1021883a 	mov	r16,r2
2008a83c:	000b883a 	mov	r5,zero
2008a840:	0023883a 	mov	r17,zero
2008a844:	003edb06 	br	2008a3b4 <__flash_rwdata_start+0xffff8a84>
2008a848:	01c1ffc4 	movi	r7,2047
2008a84c:	11c03b26 	beq	r2,r7,2008a93c <__adddf3+0x784>
2008a850:	0109c83a 	sub	r4,zero,r4
2008a854:	29402034 	orhi	r5,r5,128
2008a858:	01c00e04 	movi	r7,56
2008a85c:	39006216 	blt	r7,r4,2008a9e8 <__adddf3+0x830>
2008a860:	01c007c4 	movi	r7,31
2008a864:	39006b16 	blt	r7,r4,2008aa14 <__adddf3+0x85c>
2008a868:	01c00804 	movi	r7,32
2008a86c:	390fc83a 	sub	r7,r7,r4
2008a870:	29d4983a 	sll	r10,r5,r7
2008a874:	8912d83a 	srl	r9,r17,r4
2008a878:	89ce983a 	sll	r7,r17,r7
2008a87c:	2908d83a 	srl	r4,r5,r4
2008a880:	5262b03a 	or	r17,r10,r9
2008a884:	380ac03a 	cmpne	r5,r7,zero
2008a888:	8962b03a 	or	r17,r17,r5
2008a88c:	89a3883a 	add	r17,r17,r6
2008a890:	2211883a 	add	r8,r4,r8
2008a894:	898d803a 	cmpltu	r6,r17,r6
2008a898:	418b883a 	add	r5,r8,r6
2008a89c:	1021883a 	mov	r16,r2
2008a8a0:	003ee706 	br	2008a440 <__flash_rwdata_start+0xffff8b10>
2008a8a4:	4184b03a 	or	r2,r8,r6
2008a8a8:	103e6226 	beq	r2,zero,2008a234 <__flash_rwdata_start+0xffff8904>
2008a8ac:	8987c83a 	sub	r3,r17,r6
2008a8b0:	88c9803a 	cmpltu	r4,r17,r3
2008a8b4:	2a05c83a 	sub	r2,r5,r8
2008a8b8:	1105c83a 	sub	r2,r2,r4
2008a8bc:	1100202c 	andhi	r4,r2,128
2008a8c0:	203f0426 	beq	r4,zero,2008a4d4 <__flash_rwdata_start+0xffff8ba4>
2008a8c4:	3463c83a 	sub	r17,r6,r17
2008a8c8:	414bc83a 	sub	r5,r8,r5
2008a8cc:	344d803a 	cmpltu	r6,r6,r17
2008a8d0:	298bc83a 	sub	r5,r5,r6
2008a8d4:	3825883a 	mov	r18,r7
2008a8d8:	003e5606 	br	2008a234 <__flash_rwdata_start+0xffff8904>
2008a8dc:	4184b03a 	or	r2,r8,r6
2008a8e0:	10002b26 	beq	r2,zero,2008a990 <__adddf3+0x7d8>
2008a8e4:	2804d0fa 	srli	r2,r5,3
2008a8e8:	8822d0fa 	srli	r17,r17,3
2008a8ec:	280a977a 	slli	r5,r5,29
2008a8f0:	10c0022c 	andhi	r3,r2,8
2008a8f4:	2c62b03a 	or	r17,r5,r17
2008a8f8:	18000826 	beq	r3,zero,2008a91c <__adddf3+0x764>
2008a8fc:	4008d0fa 	srli	r4,r8,3
2008a900:	20c0022c 	andhi	r3,r4,8
2008a904:	1800051e 	bne	r3,zero,2008a91c <__adddf3+0x764>
2008a908:	300cd0fa 	srli	r6,r6,3
2008a90c:	4010977a 	slli	r8,r8,29
2008a910:	2005883a 	mov	r2,r4
2008a914:	3825883a 	mov	r18,r7
2008a918:	41a2b03a 	or	r17,r8,r6
2008a91c:	880ad77a 	srli	r5,r17,29
2008a920:	100490fa 	slli	r2,r2,3
2008a924:	882290fa 	slli	r17,r17,3
2008a928:	0401ffc4 	movi	r16,2047
2008a92c:	288ab03a 	or	r5,r5,r2
2008a930:	003e4006 	br	2008a234 <__flash_rwdata_start+0xffff8904>
2008a934:	01c1ffc4 	movi	r7,2047
2008a938:	11ffc71e 	bne	r2,r7,2008a858 <__flash_rwdata_start+0xffff8f28>
2008a93c:	400b883a 	mov	r5,r8
2008a940:	3023883a 	mov	r17,r6
2008a944:	1021883a 	mov	r16,r2
2008a948:	003e3a06 	br	2008a234 <__flash_rwdata_start+0xffff8904>
2008a94c:	10002d26 	beq	r2,zero,2008aa04 <__adddf3+0x84c>
2008a950:	4184b03a 	or	r2,r8,r6
2008a954:	10000e26 	beq	r2,zero,2008a990 <__adddf3+0x7d8>
2008a958:	2804d0fa 	srli	r2,r5,3
2008a95c:	8822d0fa 	srli	r17,r17,3
2008a960:	280a977a 	slli	r5,r5,29
2008a964:	10c0022c 	andhi	r3,r2,8
2008a968:	2c62b03a 	or	r17,r5,r17
2008a96c:	183feb26 	beq	r3,zero,2008a91c <__flash_rwdata_start+0xffff8fec>
2008a970:	4008d0fa 	srli	r4,r8,3
2008a974:	20c0022c 	andhi	r3,r4,8
2008a978:	183fe81e 	bne	r3,zero,2008a91c <__flash_rwdata_start+0xffff8fec>
2008a97c:	300cd0fa 	srli	r6,r6,3
2008a980:	4010977a 	slli	r8,r8,29
2008a984:	2005883a 	mov	r2,r4
2008a988:	41a2b03a 	or	r17,r8,r6
2008a98c:	003fe306 	br	2008a91c <__flash_rwdata_start+0xffff8fec>
2008a990:	0401ffc4 	movi	r16,2047
2008a994:	003e2706 	br	2008a234 <__flash_rwdata_start+0xffff8904>
2008a998:	0011883a 	mov	r8,zero
2008a99c:	003f8306 	br	2008a7ac <__flash_rwdata_start+0xffff8e7c>
2008a9a0:	193ff804 	addi	r4,r3,-32
2008a9a4:	02400804 	movi	r9,32
2008a9a8:	2908d83a 	srl	r4,r5,r4
2008a9ac:	1a402526 	beq	r3,r9,2008aa44 <__adddf3+0x88c>
2008a9b0:	02401004 	movi	r9,64
2008a9b4:	48c7c83a 	sub	r3,r9,r3
2008a9b8:	28ca983a 	sll	r5,r5,r3
2008a9bc:	2c62b03a 	or	r17,r5,r17
2008a9c0:	8822c03a 	cmpne	r17,r17,zero
2008a9c4:	8922b03a 	or	r17,r17,r4
2008a9c8:	0007883a 	mov	r3,zero
2008a9cc:	003f2f06 	br	2008a68c <__flash_rwdata_start+0xffff8d5c>
2008a9d0:	01402034 	movhi	r5,128
2008a9d4:	0007883a 	mov	r3,zero
2008a9d8:	297fffc4 	addi	r5,r5,-1
2008a9dc:	047ffe04 	movi	r17,-8
2008a9e0:	0401ffc4 	movi	r16,2047
2008a9e4:	003e7306 	br	2008a3b4 <__flash_rwdata_start+0xffff8a84>
2008a9e8:	2c62b03a 	or	r17,r5,r17
2008a9ec:	8822c03a 	cmpne	r17,r17,zero
2008a9f0:	0009883a 	mov	r4,zero
2008a9f4:	003fa506 	br	2008a88c <__flash_rwdata_start+0xffff8f5c>
2008a9f8:	400b883a 	mov	r5,r8
2008a9fc:	3023883a 	mov	r17,r6
2008aa00:	003e0c06 	br	2008a234 <__flash_rwdata_start+0xffff8904>
2008aa04:	400b883a 	mov	r5,r8
2008aa08:	3023883a 	mov	r17,r6
2008aa0c:	0401ffc4 	movi	r16,2047
2008aa10:	003e0806 	br	2008a234 <__flash_rwdata_start+0xffff8904>
2008aa14:	21fff804 	addi	r7,r4,-32
2008aa18:	02400804 	movi	r9,32
2008aa1c:	29ced83a 	srl	r7,r5,r7
2008aa20:	22400a26 	beq	r4,r9,2008aa4c <__adddf3+0x894>
2008aa24:	02401004 	movi	r9,64
2008aa28:	4909c83a 	sub	r4,r9,r4
2008aa2c:	290a983a 	sll	r5,r5,r4
2008aa30:	2c62b03a 	or	r17,r5,r17
2008aa34:	8822c03a 	cmpne	r17,r17,zero
2008aa38:	89e2b03a 	or	r17,r17,r7
2008aa3c:	0009883a 	mov	r4,zero
2008aa40:	003f9206 	br	2008a88c <__flash_rwdata_start+0xffff8f5c>
2008aa44:	000b883a 	mov	r5,zero
2008aa48:	003fdc06 	br	2008a9bc <__flash_rwdata_start+0xffff908c>
2008aa4c:	000b883a 	mov	r5,zero
2008aa50:	003ff706 	br	2008aa30 <__flash_rwdata_start+0xffff9100>

2008aa54 <__divdf3>:
2008aa54:	defff204 	addi	sp,sp,-56
2008aa58:	dd000815 	stw	r20,32(sp)
2008aa5c:	2828d53a 	srli	r20,r5,20
2008aa60:	dd800a15 	stw	r22,40(sp)
2008aa64:	282cd7fa 	srli	r22,r5,31
2008aa68:	dc000415 	stw	r16,16(sp)
2008aa6c:	04000434 	movhi	r16,16
2008aa70:	df000c15 	stw	fp,48(sp)
2008aa74:	dcc00715 	stw	r19,28(sp)
2008aa78:	dc800615 	stw	r18,24(sp)
2008aa7c:	dc400515 	stw	r17,20(sp)
2008aa80:	843fffc4 	addi	r16,r16,-1
2008aa84:	dfc00d15 	stw	ra,52(sp)
2008aa88:	ddc00b15 	stw	r23,44(sp)
2008aa8c:	dd400915 	stw	r21,36(sp)
2008aa90:	a501ffcc 	andi	r20,r20,2047
2008aa94:	2025883a 	mov	r18,r4
2008aa98:	2027883a 	mov	r19,r4
2008aa9c:	2c22703a 	and	r17,r5,r16
2008aaa0:	b7003fcc 	andi	fp,r22,255
2008aaa4:	a0005e26 	beq	r20,zero,2008ac20 <__divdf3+0x1cc>
2008aaa8:	0081ffc4 	movi	r2,2047
2008aaac:	a0803526 	beq	r20,r2,2008ab84 <__divdf3+0x130>
2008aab0:	8c000434 	orhi	r16,r17,16
2008aab4:	2004d77a 	srli	r2,r4,29
2008aab8:	802090fa 	slli	r16,r16,3
2008aabc:	202690fa 	slli	r19,r4,3
2008aac0:	a53f0044 	addi	r20,r20,-1023
2008aac4:	80a2b03a 	or	r17,r16,r2
2008aac8:	0025883a 	mov	r18,zero
2008aacc:	0011883a 	mov	r8,zero
2008aad0:	380ad53a 	srli	r5,r7,20
2008aad4:	382ed7fa 	srli	r23,r7,31
2008aad8:	04000434 	movhi	r16,16
2008aadc:	843fffc4 	addi	r16,r16,-1
2008aae0:	2941ffcc 	andi	r5,r5,2047
2008aae4:	302b883a 	mov	r21,r6
2008aae8:	3c20703a 	and	r16,r7,r16
2008aaec:	ba403fcc 	andi	r9,r23,255
2008aaf0:	28006726 	beq	r5,zero,2008ac90 <__divdf3+0x23c>
2008aaf4:	0081ffc4 	movi	r2,2047
2008aaf8:	28805f26 	beq	r5,r2,2008ac78 <__divdf3+0x224>
2008aafc:	84000434 	orhi	r16,r16,16
2008ab00:	3004d77a 	srli	r2,r6,29
2008ab04:	802090fa 	slli	r16,r16,3
2008ab08:	302a90fa 	slli	r21,r6,3
2008ab0c:	297f0044 	addi	r5,r5,-1023
2008ab10:	80a0b03a 	or	r16,r16,r2
2008ab14:	000f883a 	mov	r7,zero
2008ab18:	3c86b03a 	or	r3,r7,r18
2008ab1c:	180690ba 	slli	r3,r3,2
2008ab20:	00880274 	movhi	r2,8201
2008ab24:	10aad104 	addi	r2,r2,-21692
2008ab28:	1887883a 	add	r3,r3,r2
2008ab2c:	18c00017 	ldw	r3,0(r3)
2008ab30:	b5c8f03a 	xor	r4,r22,r23
2008ab34:	200d883a 	mov	r6,r4
2008ab38:	24803fcc 	andi	r18,r4,255
2008ab3c:	a169c83a 	sub	r20,r20,r5
2008ab40:	1800683a 	jmp	r3
2008ab44:	2008ad8c 	andi	zero,r4,8886
2008ab48:	2008abbc 	xorhi	zero,r4,8878
2008ab4c:	2008ad50 	cmplti	zero,r4,8885
2008ab50:	2008aba0 	cmpeqi	zero,r4,8878
2008ab54:	2008ad50 	cmplti	zero,r4,8885
2008ab58:	2008ad24 	muli	zero,r4,8884
2008ab5c:	2008ad50 	cmplti	zero,r4,8885
2008ab60:	2008aba0 	cmpeqi	zero,r4,8878
2008ab64:	2008abbc 	xorhi	zero,r4,8878
2008ab68:	2008abbc 	xorhi	zero,r4,8878
2008ab6c:	2008ad24 	muli	zero,r4,8884
2008ab70:	2008aba0 	cmpeqi	zero,r4,8878
2008ab74:	2008abb0 	cmpltui	zero,r4,8878
2008ab78:	2008abb0 	cmpltui	zero,r4,8878
2008ab7c:	2008abb0 	cmpltui	zero,r4,8878
2008ab80:	2008ad60 	cmpeqi	zero,r4,8885
2008ab84:	8904b03a 	or	r2,r17,r4
2008ab88:	1000631e 	bne	r2,zero,2008ad18 <__divdf3+0x2c4>
2008ab8c:	04800204 	movi	r18,8
2008ab90:	0023883a 	mov	r17,zero
2008ab94:	0027883a 	mov	r19,zero
2008ab98:	02000084 	movi	r8,2
2008ab9c:	003fcc06 	br	2008aad0 <__flash_rwdata_start+0xffff91a0>
2008aba0:	8023883a 	mov	r17,r16
2008aba4:	a827883a 	mov	r19,r21
2008aba8:	4839883a 	mov	fp,r9
2008abac:	3811883a 	mov	r8,r7
2008abb0:	00800084 	movi	r2,2
2008abb4:	40812a1e 	bne	r8,r2,2008b060 <__divdf3+0x60c>
2008abb8:	e025883a 	mov	r18,fp
2008abbc:	9180004c 	andi	r6,r18,1
2008abc0:	0101ffc4 	movi	r4,2047
2008abc4:	000b883a 	mov	r5,zero
2008abc8:	0027883a 	mov	r19,zero
2008abcc:	2008953a 	slli	r4,r4,20
2008abd0:	30c03fcc 	andi	r3,r6,255
2008abd4:	04000434 	movhi	r16,16
2008abd8:	180697fa 	slli	r3,r3,31
2008abdc:	843fffc4 	addi	r16,r16,-1
2008abe0:	2c20703a 	and	r16,r5,r16
2008abe4:	8120b03a 	or	r16,r16,r4
2008abe8:	80c6b03a 	or	r3,r16,r3
2008abec:	9805883a 	mov	r2,r19
2008abf0:	dfc00d17 	ldw	ra,52(sp)
2008abf4:	df000c17 	ldw	fp,48(sp)
2008abf8:	ddc00b17 	ldw	r23,44(sp)
2008abfc:	dd800a17 	ldw	r22,40(sp)
2008ac00:	dd400917 	ldw	r21,36(sp)
2008ac04:	dd000817 	ldw	r20,32(sp)
2008ac08:	dcc00717 	ldw	r19,28(sp)
2008ac0c:	dc800617 	ldw	r18,24(sp)
2008ac10:	dc400517 	ldw	r17,20(sp)
2008ac14:	dc000417 	ldw	r16,16(sp)
2008ac18:	dec00e04 	addi	sp,sp,56
2008ac1c:	f800283a 	ret
2008ac20:	8904b03a 	or	r2,r17,r4
2008ac24:	10003726 	beq	r2,zero,2008ad04 <__divdf3+0x2b0>
2008ac28:	88011c26 	beq	r17,zero,2008b09c <__divdf3+0x648>
2008ac2c:	8809883a 	mov	r4,r17
2008ac30:	d9800315 	stw	r6,12(sp)
2008ac34:	d9c00115 	stw	r7,4(sp)
2008ac38:	008c7540 	call	2008c754 <__clzsi2>
2008ac3c:	d9800317 	ldw	r6,12(sp)
2008ac40:	d9c00117 	ldw	r7,4(sp)
2008ac44:	1007883a 	mov	r3,r2
2008ac48:	01000a04 	movi	r4,40
2008ac4c:	1cfffe04 	addi	r19,r3,-8
2008ac50:	20c9c83a 	sub	r4,r4,r3
2008ac54:	8cca983a 	sll	r5,r17,r19
2008ac58:	9108d83a 	srl	r4,r18,r4
2008ac5c:	94e6983a 	sll	r19,r18,r19
2008ac60:	2162b03a 	or	r17,r4,r5
2008ac64:	053f0344 	movi	r20,-1011
2008ac68:	a0e9c83a 	sub	r20,r20,r3
2008ac6c:	0025883a 	mov	r18,zero
2008ac70:	0011883a 	mov	r8,zero
2008ac74:	003f9606 	br	2008aad0 <__flash_rwdata_start+0xffff91a0>
2008ac78:	8184b03a 	or	r2,r16,r6
2008ac7c:	10001f1e 	bne	r2,zero,2008acfc <__divdf3+0x2a8>
2008ac80:	0021883a 	mov	r16,zero
2008ac84:	002b883a 	mov	r21,zero
2008ac88:	01c00084 	movi	r7,2
2008ac8c:	003fa206 	br	2008ab18 <__flash_rwdata_start+0xffff91e8>
2008ac90:	8184b03a 	or	r2,r16,r6
2008ac94:	10001526 	beq	r2,zero,2008acec <__divdf3+0x298>
2008ac98:	80010c26 	beq	r16,zero,2008b0cc <__divdf3+0x678>
2008ac9c:	8009883a 	mov	r4,r16
2008aca0:	d9800315 	stw	r6,12(sp)
2008aca4:	da000215 	stw	r8,8(sp)
2008aca8:	da400015 	stw	r9,0(sp)
2008acac:	008c7540 	call	2008c754 <__clzsi2>
2008acb0:	d9800317 	ldw	r6,12(sp)
2008acb4:	da000217 	ldw	r8,8(sp)
2008acb8:	da400017 	ldw	r9,0(sp)
2008acbc:	1007883a 	mov	r3,r2
2008acc0:	01000a04 	movi	r4,40
2008acc4:	1d7ffe04 	addi	r21,r3,-8
2008acc8:	20c9c83a 	sub	r4,r4,r3
2008accc:	8560983a 	sll	r16,r16,r21
2008acd0:	3108d83a 	srl	r4,r6,r4
2008acd4:	356a983a 	sll	r21,r6,r21
2008acd8:	2420b03a 	or	r16,r4,r16
2008acdc:	017f0344 	movi	r5,-1011
2008ace0:	28cbc83a 	sub	r5,r5,r3
2008ace4:	000f883a 	mov	r7,zero
2008ace8:	003f8b06 	br	2008ab18 <__flash_rwdata_start+0xffff91e8>
2008acec:	0021883a 	mov	r16,zero
2008acf0:	002b883a 	mov	r21,zero
2008acf4:	01c00044 	movi	r7,1
2008acf8:	003f8706 	br	2008ab18 <__flash_rwdata_start+0xffff91e8>
2008acfc:	01c000c4 	movi	r7,3
2008ad00:	003f8506 	br	2008ab18 <__flash_rwdata_start+0xffff91e8>
2008ad04:	04800104 	movi	r18,4
2008ad08:	0023883a 	mov	r17,zero
2008ad0c:	0027883a 	mov	r19,zero
2008ad10:	02000044 	movi	r8,1
2008ad14:	003f6e06 	br	2008aad0 <__flash_rwdata_start+0xffff91a0>
2008ad18:	04800304 	movi	r18,12
2008ad1c:	020000c4 	movi	r8,3
2008ad20:	003f6b06 	br	2008aad0 <__flash_rwdata_start+0xffff91a0>
2008ad24:	01400434 	movhi	r5,16
2008ad28:	000d883a 	mov	r6,zero
2008ad2c:	297fffc4 	addi	r5,r5,-1
2008ad30:	04ffffc4 	movi	r19,-1
2008ad34:	0101ffc4 	movi	r4,2047
2008ad38:	003fa406 	br	2008abcc <__flash_rwdata_start+0xffff929c>
2008ad3c:	043f0084 	movi	r16,-1022
2008ad40:	8521c83a 	sub	r16,r16,r20
2008ad44:	00800e04 	movi	r2,56
2008ad48:	1401200e 	bge	r2,r16,2008b1cc <__divdf3+0x778>
2008ad4c:	9180004c 	andi	r6,r18,1
2008ad50:	0009883a 	mov	r4,zero
2008ad54:	000b883a 	mov	r5,zero
2008ad58:	0027883a 	mov	r19,zero
2008ad5c:	003f9b06 	br	2008abcc <__flash_rwdata_start+0xffff929c>
2008ad60:	8880022c 	andhi	r2,r17,8
2008ad64:	1000c726 	beq	r2,zero,2008b084 <__divdf3+0x630>
2008ad68:	8080022c 	andhi	r2,r16,8
2008ad6c:	1000c51e 	bne	r2,zero,2008b084 <__divdf3+0x630>
2008ad70:	00800434 	movhi	r2,16
2008ad74:	81400234 	orhi	r5,r16,8
2008ad78:	10bfffc4 	addi	r2,r2,-1
2008ad7c:	b80d883a 	mov	r6,r23
2008ad80:	288a703a 	and	r5,r5,r2
2008ad84:	a827883a 	mov	r19,r21
2008ad88:	003fea06 	br	2008ad34 <__flash_rwdata_start+0xffff9404>
2008ad8c:	8440ea36 	bltu	r16,r17,2008b138 <__divdf3+0x6e4>
2008ad90:	8c00e826 	beq	r17,r16,2008b134 <__divdf3+0x6e0>
2008ad94:	a53fffc4 	addi	r20,r20,-1
2008ad98:	882d883a 	mov	r22,r17
2008ad9c:	000d883a 	mov	r6,zero
2008ada0:	a804d63a 	srli	r2,r21,24
2008ada4:	8020923a 	slli	r16,r16,8
2008ada8:	b009883a 	mov	r4,r22
2008adac:	d9800315 	stw	r6,12(sp)
2008adb0:	1420b03a 	or	r16,r2,r16
2008adb4:	802ed43a 	srli	r23,r16,16
2008adb8:	873fffcc 	andi	fp,r16,65535
2008adbc:	a82a923a 	slli	r21,r21,8
2008adc0:	b80b883a 	mov	r5,r23
2008adc4:	008a1a80 	call	2008a1a8 <__udivsi3>
2008adc8:	b009883a 	mov	r4,r22
2008adcc:	b80b883a 	mov	r5,r23
2008add0:	1023883a 	mov	r17,r2
2008add4:	008a1b00 	call	2008a1b0 <__umodsi3>
2008add8:	1004943a 	slli	r2,r2,16
2008addc:	9808d43a 	srli	r4,r19,16
2008ade0:	8f2d383a 	mul	r22,r17,fp
2008ade4:	d9800317 	ldw	r6,12(sp)
2008ade8:	1106b03a 	or	r3,r2,r4
2008adec:	1d80062e 	bgeu	r3,r22,2008ae08 <__divdf3+0x3b4>
2008adf0:	1c07883a 	add	r3,r3,r16
2008adf4:	88bfffc4 	addi	r2,r17,-1
2008adf8:	1c00dc36 	bltu	r3,r16,2008b16c <__divdf3+0x718>
2008adfc:	1d80db2e 	bgeu	r3,r22,2008b16c <__divdf3+0x718>
2008ae00:	8c7fff84 	addi	r17,r17,-2
2008ae04:	1c07883a 	add	r3,r3,r16
2008ae08:	1dadc83a 	sub	r22,r3,r22
2008ae0c:	b009883a 	mov	r4,r22
2008ae10:	b80b883a 	mov	r5,r23
2008ae14:	d9800315 	stw	r6,12(sp)
2008ae18:	008a1a80 	call	2008a1a8 <__udivsi3>
2008ae1c:	b009883a 	mov	r4,r22
2008ae20:	b80b883a 	mov	r5,r23
2008ae24:	d8800015 	stw	r2,0(sp)
2008ae28:	008a1b00 	call	2008a1b0 <__umodsi3>
2008ae2c:	da400017 	ldw	r9,0(sp)
2008ae30:	1004943a 	slli	r2,r2,16
2008ae34:	9cffffcc 	andi	r19,r19,65535
2008ae38:	4f07383a 	mul	r3,r9,fp
2008ae3c:	14c8b03a 	or	r4,r2,r19
2008ae40:	d9800317 	ldw	r6,12(sp)
2008ae44:	20c0062e 	bgeu	r4,r3,2008ae60 <__divdf3+0x40c>
2008ae48:	2409883a 	add	r4,r4,r16
2008ae4c:	48bfffc4 	addi	r2,r9,-1
2008ae50:	2400c436 	bltu	r4,r16,2008b164 <__divdf3+0x710>
2008ae54:	20c0c32e 	bgeu	r4,r3,2008b164 <__divdf3+0x710>
2008ae58:	4a7fff84 	addi	r9,r9,-2
2008ae5c:	2409883a 	add	r4,r4,r16
2008ae60:	8822943a 	slli	r17,r17,16
2008ae64:	a80ed43a 	srli	r7,r21,16
2008ae68:	aa3fffcc 	andi	r8,r21,65535
2008ae6c:	4c62b03a 	or	r17,r9,r17
2008ae70:	8816d43a 	srli	r11,r17,16
2008ae74:	897fffcc 	andi	r5,r17,65535
2008ae78:	2a15383a 	mul	r10,r5,r8
2008ae7c:	5a19383a 	mul	r12,r11,r8
2008ae80:	29cb383a 	mul	r5,r5,r7
2008ae84:	5012d43a 	srli	r9,r10,16
2008ae88:	20c5c83a 	sub	r2,r4,r3
2008ae8c:	614b883a 	add	r5,r12,r5
2008ae90:	2a4b883a 	add	r5,r5,r9
2008ae94:	59c7383a 	mul	r3,r11,r7
2008ae98:	2b00022e 	bgeu	r5,r12,2008aea4 <__divdf3+0x450>
2008ae9c:	01000074 	movhi	r4,1
2008aea0:	1907883a 	add	r3,r3,r4
2008aea4:	2808d43a 	srli	r4,r5,16
2008aea8:	280a943a 	slli	r5,r5,16
2008aeac:	54ffffcc 	andi	r19,r10,65535
2008aeb0:	1907883a 	add	r3,r3,r4
2008aeb4:	2ccb883a 	add	r5,r5,r19
2008aeb8:	10c09336 	bltu	r2,r3,2008b108 <__divdf3+0x6b4>
2008aebc:	10c0ad26 	beq	r2,r3,2008b174 <__divdf3+0x720>
2008aec0:	10c7c83a 	sub	r3,r2,r3
2008aec4:	3167c83a 	sub	r19,r6,r5
2008aec8:	34ed803a 	cmpltu	r22,r6,r19
2008aecc:	1dadc83a 	sub	r22,r3,r22
2008aed0:	b400b226 	beq	r22,r16,2008b19c <__divdf3+0x748>
2008aed4:	b009883a 	mov	r4,r22
2008aed8:	b80b883a 	mov	r5,r23
2008aedc:	d9c00115 	stw	r7,4(sp)
2008aee0:	da000215 	stw	r8,8(sp)
2008aee4:	008a1a80 	call	2008a1a8 <__udivsi3>
2008aee8:	b009883a 	mov	r4,r22
2008aeec:	b80b883a 	mov	r5,r23
2008aef0:	d8800315 	stw	r2,12(sp)
2008aef4:	008a1b00 	call	2008a1b0 <__umodsi3>
2008aef8:	d9800317 	ldw	r6,12(sp)
2008aefc:	1004943a 	slli	r2,r2,16
2008af00:	9808d43a 	srli	r4,r19,16
2008af04:	372d383a 	mul	r22,r6,fp
2008af08:	d9c00117 	ldw	r7,4(sp)
2008af0c:	1106b03a 	or	r3,r2,r4
2008af10:	da000217 	ldw	r8,8(sp)
2008af14:	1d80062e 	bgeu	r3,r22,2008af30 <__divdf3+0x4dc>
2008af18:	1c07883a 	add	r3,r3,r16
2008af1c:	30bfffc4 	addi	r2,r6,-1
2008af20:	1c00a036 	bltu	r3,r16,2008b1a4 <__divdf3+0x750>
2008af24:	1d809f2e 	bgeu	r3,r22,2008b1a4 <__divdf3+0x750>
2008af28:	31bfff84 	addi	r6,r6,-2
2008af2c:	1c07883a 	add	r3,r3,r16
2008af30:	1dadc83a 	sub	r22,r3,r22
2008af34:	b009883a 	mov	r4,r22
2008af38:	b80b883a 	mov	r5,r23
2008af3c:	d9800315 	stw	r6,12(sp)
2008af40:	d9c00115 	stw	r7,4(sp)
2008af44:	da000215 	stw	r8,8(sp)
2008af48:	008a1a80 	call	2008a1a8 <__udivsi3>
2008af4c:	b009883a 	mov	r4,r22
2008af50:	b80b883a 	mov	r5,r23
2008af54:	d8800015 	stw	r2,0(sp)
2008af58:	008a1b00 	call	2008a1b0 <__umodsi3>
2008af5c:	da400017 	ldw	r9,0(sp)
2008af60:	1004943a 	slli	r2,r2,16
2008af64:	993fffcc 	andi	r4,r19,65535
2008af68:	4f39383a 	mul	fp,r9,fp
2008af6c:	1106b03a 	or	r3,r2,r4
2008af70:	d9800317 	ldw	r6,12(sp)
2008af74:	d9c00117 	ldw	r7,4(sp)
2008af78:	da000217 	ldw	r8,8(sp)
2008af7c:	1f00062e 	bgeu	r3,fp,2008af98 <__divdf3+0x544>
2008af80:	1c07883a 	add	r3,r3,r16
2008af84:	48bfffc4 	addi	r2,r9,-1
2008af88:	1c008836 	bltu	r3,r16,2008b1ac <__divdf3+0x758>
2008af8c:	1f00872e 	bgeu	r3,fp,2008b1ac <__divdf3+0x758>
2008af90:	4a7fff84 	addi	r9,r9,-2
2008af94:	1c07883a 	add	r3,r3,r16
2008af98:	3008943a 	slli	r4,r6,16
2008af9c:	1f07c83a 	sub	r3,r3,fp
2008afa0:	4926b03a 	or	r19,r9,r4
2008afa4:	993fffcc 	andi	r4,r19,65535
2008afa8:	980cd43a 	srli	r6,r19,16
2008afac:	220b383a 	mul	r5,r4,r8
2008afb0:	21c5383a 	mul	r2,r4,r7
2008afb4:	3211383a 	mul	r8,r6,r8
2008afb8:	2808d43a 	srli	r4,r5,16
2008afbc:	31cf383a 	mul	r7,r6,r7
2008afc0:	4085883a 	add	r2,r8,r2
2008afc4:	1105883a 	add	r2,r2,r4
2008afc8:	1200022e 	bgeu	r2,r8,2008afd4 <__divdf3+0x580>
2008afcc:	01000074 	movhi	r4,1
2008afd0:	390f883a 	add	r7,r7,r4
2008afd4:	1008d43a 	srli	r4,r2,16
2008afd8:	1004943a 	slli	r2,r2,16
2008afdc:	297fffcc 	andi	r5,r5,65535
2008afe0:	390f883a 	add	r7,r7,r4
2008afe4:	1145883a 	add	r2,r2,r5
2008afe8:	19c06536 	bltu	r3,r7,2008b180 <__divdf3+0x72c>
2008afec:	19c09f26 	beq	r3,r7,2008b26c <__divdf3+0x818>
2008aff0:	9cc00054 	ori	r19,r19,1
2008aff4:	a100ffc4 	addi	r4,r20,1023
2008aff8:	013f500e 	bge	zero,r4,2008ad3c <__flash_rwdata_start+0xffff940c>
2008affc:	988001cc 	andi	r2,r19,7
2008b000:	10000726 	beq	r2,zero,2008b020 <__divdf3+0x5cc>
2008b004:	98c003cc 	andi	r3,r19,15
2008b008:	00800104 	movi	r2,4
2008b00c:	18800426 	beq	r3,r2,2008b020 <__divdf3+0x5cc>
2008b010:	9885883a 	add	r2,r19,r2
2008b014:	14e1803a 	cmpltu	r16,r2,r19
2008b018:	8c23883a 	add	r17,r17,r16
2008b01c:	1027883a 	mov	r19,r2
2008b020:	8880402c 	andhi	r2,r17,256
2008b024:	10000426 	beq	r2,zero,2008b038 <__divdf3+0x5e4>
2008b028:	00bfc034 	movhi	r2,65280
2008b02c:	10bfffc4 	addi	r2,r2,-1
2008b030:	a1010004 	addi	r4,r20,1024
2008b034:	88a2703a 	and	r17,r17,r2
2008b038:	0081ff84 	movi	r2,2046
2008b03c:	113edf16 	blt	r2,r4,2008abbc <__flash_rwdata_start+0xffff928c>
2008b040:	9826d0fa 	srli	r19,r19,3
2008b044:	8804977a 	slli	r2,r17,29
2008b048:	8820927a 	slli	r16,r17,9
2008b04c:	2101ffcc 	andi	r4,r4,2047
2008b050:	14e6b03a 	or	r19,r2,r19
2008b054:	800ad33a 	srli	r5,r16,12
2008b058:	9180004c 	andi	r6,r18,1
2008b05c:	003edb06 	br	2008abcc <__flash_rwdata_start+0xffff929c>
2008b060:	008000c4 	movi	r2,3
2008b064:	4080a826 	beq	r8,r2,2008b308 <__divdf3+0x8b4>
2008b068:	00800044 	movi	r2,1
2008b06c:	4080551e 	bne	r8,r2,2008b1c4 <__divdf3+0x770>
2008b070:	e00d883a 	mov	r6,fp
2008b074:	0009883a 	mov	r4,zero
2008b078:	000b883a 	mov	r5,zero
2008b07c:	0027883a 	mov	r19,zero
2008b080:	003ed206 	br	2008abcc <__flash_rwdata_start+0xffff929c>
2008b084:	00800434 	movhi	r2,16
2008b088:	89400234 	orhi	r5,r17,8
2008b08c:	10bfffc4 	addi	r2,r2,-1
2008b090:	b00d883a 	mov	r6,r22
2008b094:	288a703a 	and	r5,r5,r2
2008b098:	003f2606 	br	2008ad34 <__flash_rwdata_start+0xffff9404>
2008b09c:	d9800315 	stw	r6,12(sp)
2008b0a0:	d9c00115 	stw	r7,4(sp)
2008b0a4:	008c7540 	call	2008c754 <__clzsi2>
2008b0a8:	10c00804 	addi	r3,r2,32
2008b0ac:	010009c4 	movi	r4,39
2008b0b0:	d9800317 	ldw	r6,12(sp)
2008b0b4:	d9c00117 	ldw	r7,4(sp)
2008b0b8:	20fee30e 	bge	r4,r3,2008ac48 <__flash_rwdata_start+0xffff9318>
2008b0bc:	117ffe04 	addi	r5,r2,-8
2008b0c0:	9162983a 	sll	r17,r18,r5
2008b0c4:	0027883a 	mov	r19,zero
2008b0c8:	003ee606 	br	2008ac64 <__flash_rwdata_start+0xffff9334>
2008b0cc:	3009883a 	mov	r4,r6
2008b0d0:	d9800315 	stw	r6,12(sp)
2008b0d4:	da000215 	stw	r8,8(sp)
2008b0d8:	da400015 	stw	r9,0(sp)
2008b0dc:	008c7540 	call	2008c754 <__clzsi2>
2008b0e0:	10c00804 	addi	r3,r2,32
2008b0e4:	010009c4 	movi	r4,39
2008b0e8:	d9800317 	ldw	r6,12(sp)
2008b0ec:	da000217 	ldw	r8,8(sp)
2008b0f0:	da400017 	ldw	r9,0(sp)
2008b0f4:	20fef20e 	bge	r4,r3,2008acc0 <__flash_rwdata_start+0xffff9390>
2008b0f8:	10bffe04 	addi	r2,r2,-8
2008b0fc:	a8a0983a 	sll	r16,r21,r2
2008b100:	002b883a 	mov	r21,zero
2008b104:	003ef506 	br	2008acdc <__flash_rwdata_start+0xffff93ac>
2008b108:	354d883a 	add	r6,r6,r21
2008b10c:	3549803a 	cmpltu	r4,r6,r21
2008b110:	2409883a 	add	r4,r4,r16
2008b114:	2089883a 	add	r4,r4,r2
2008b118:	88bfffc4 	addi	r2,r17,-1
2008b11c:	81000c2e 	bgeu	r16,r4,2008b150 <__divdf3+0x6fc>
2008b120:	20c04436 	bltu	r4,r3,2008b234 <__divdf3+0x7e0>
2008b124:	19006f26 	beq	r3,r4,2008b2e4 <__divdf3+0x890>
2008b128:	20c7c83a 	sub	r3,r4,r3
2008b12c:	1023883a 	mov	r17,r2
2008b130:	003f6406 	br	2008aec4 <__flash_rwdata_start+0xffff9594>
2008b134:	9d7f1736 	bltu	r19,r21,2008ad94 <__flash_rwdata_start+0xffff9464>
2008b138:	9806d07a 	srli	r3,r19,1
2008b13c:	880497fa 	slli	r2,r17,31
2008b140:	980c97fa 	slli	r6,r19,31
2008b144:	882cd07a 	srli	r22,r17,1
2008b148:	18a6b03a 	or	r19,r3,r2
2008b14c:	003f1406 	br	2008ada0 <__flash_rwdata_start+0xffff9470>
2008b150:	243ff51e 	bne	r4,r16,2008b128 <__flash_rwdata_start+0xffff97f8>
2008b154:	357ff22e 	bgeu	r6,r21,2008b120 <__flash_rwdata_start+0xffff97f0>
2008b158:	80c7c83a 	sub	r3,r16,r3
2008b15c:	1023883a 	mov	r17,r2
2008b160:	003f5806 	br	2008aec4 <__flash_rwdata_start+0xffff9594>
2008b164:	1013883a 	mov	r9,r2
2008b168:	003f3d06 	br	2008ae60 <__flash_rwdata_start+0xffff9530>
2008b16c:	1023883a 	mov	r17,r2
2008b170:	003f2506 	br	2008ae08 <__flash_rwdata_start+0xffff94d8>
2008b174:	317fe436 	bltu	r6,r5,2008b108 <__flash_rwdata_start+0xffff97d8>
2008b178:	0007883a 	mov	r3,zero
2008b17c:	003f5106 	br	2008aec4 <__flash_rwdata_start+0xffff9594>
2008b180:	1c07883a 	add	r3,r3,r16
2008b184:	993fffc4 	addi	r4,r19,-1
2008b188:	1c000a2e 	bgeu	r3,r16,2008b1b4 <__divdf3+0x760>
2008b18c:	2027883a 	mov	r19,r4
2008b190:	19ff971e 	bne	r3,r7,2008aff0 <__flash_rwdata_start+0xffff96c0>
2008b194:	a8bf961e 	bne	r21,r2,2008aff0 <__flash_rwdata_start+0xffff96c0>
2008b198:	003f9606 	br	2008aff4 <__flash_rwdata_start+0xffff96c4>
2008b19c:	04ffffc4 	movi	r19,-1
2008b1a0:	003f9406 	br	2008aff4 <__flash_rwdata_start+0xffff96c4>
2008b1a4:	100d883a 	mov	r6,r2
2008b1a8:	003f6106 	br	2008af30 <__flash_rwdata_start+0xffff9600>
2008b1ac:	1013883a 	mov	r9,r2
2008b1b0:	003f7906 	br	2008af98 <__flash_rwdata_start+0xffff9668>
2008b1b4:	19c02636 	bltu	r3,r7,2008b250 <__divdf3+0x7fc>
2008b1b8:	38c04d26 	beq	r7,r3,2008b2f0 <__divdf3+0x89c>
2008b1bc:	2027883a 	mov	r19,r4
2008b1c0:	003f8b06 	br	2008aff0 <__flash_rwdata_start+0xffff96c0>
2008b1c4:	e025883a 	mov	r18,fp
2008b1c8:	003f8a06 	br	2008aff4 <__flash_rwdata_start+0xffff96c4>
2008b1cc:	008007c4 	movi	r2,31
2008b1d0:	14002a16 	blt	r2,r16,2008b27c <__divdf3+0x828>
2008b1d4:	a5010784 	addi	r20,r20,1054
2008b1d8:	8d04983a 	sll	r2,r17,r20
2008b1dc:	9c06d83a 	srl	r3,r19,r16
2008b1e0:	9d28983a 	sll	r20,r19,r20
2008b1e4:	8c20d83a 	srl	r16,r17,r16
2008b1e8:	1886b03a 	or	r3,r3,r2
2008b1ec:	a004c03a 	cmpne	r2,r20,zero
2008b1f0:	1884b03a 	or	r2,r3,r2
2008b1f4:	10c001cc 	andi	r3,r2,7
2008b1f8:	18000726 	beq	r3,zero,2008b218 <__divdf3+0x7c4>
2008b1fc:	110003cc 	andi	r4,r2,15
2008b200:	00c00104 	movi	r3,4
2008b204:	20c00426 	beq	r4,r3,2008b218 <__divdf3+0x7c4>
2008b208:	10c00104 	addi	r3,r2,4
2008b20c:	1885803a 	cmpltu	r2,r3,r2
2008b210:	80a1883a 	add	r16,r16,r2
2008b214:	1805883a 	mov	r2,r3
2008b218:	80c0202c 	andhi	r3,r16,128
2008b21c:	18002d26 	beq	r3,zero,2008b2d4 <__divdf3+0x880>
2008b220:	9180004c 	andi	r6,r18,1
2008b224:	01000044 	movi	r4,1
2008b228:	000b883a 	mov	r5,zero
2008b22c:	0027883a 	mov	r19,zero
2008b230:	003e6606 	br	2008abcc <__flash_rwdata_start+0xffff929c>
2008b234:	354d883a 	add	r6,r6,r21
2008b238:	356d803a 	cmpltu	r22,r6,r21
2008b23c:	b42d883a 	add	r22,r22,r16
2008b240:	b12d883a 	add	r22,r22,r4
2008b244:	8c7fff84 	addi	r17,r17,-2
2008b248:	b0c7c83a 	sub	r3,r22,r3
2008b24c:	003f1d06 	br	2008aec4 <__flash_rwdata_start+0xffff9594>
2008b250:	ad4b883a 	add	r5,r21,r21
2008b254:	2d6b803a 	cmpltu	r21,r5,r21
2008b258:	ac2b883a 	add	r21,r21,r16
2008b25c:	1d47883a 	add	r3,r3,r21
2008b260:	993fff84 	addi	r4,r19,-2
2008b264:	282b883a 	mov	r21,r5
2008b268:	003fc806 	br	2008b18c <__flash_rwdata_start+0xffff985c>
2008b26c:	103fc41e 	bne	r2,zero,2008b180 <__flash_rwdata_start+0xffff9850>
2008b270:	002b883a 	mov	r21,zero
2008b274:	a8bf5e1e 	bne	r21,r2,2008aff0 <__flash_rwdata_start+0xffff96c0>
2008b278:	003f5e06 	br	2008aff4 <__flash_rwdata_start+0xffff96c4>
2008b27c:	00bef884 	movi	r2,-1054
2008b280:	1505c83a 	sub	r2,r2,r20
2008b284:	00c00804 	movi	r3,32
2008b288:	8884d83a 	srl	r2,r17,r2
2008b28c:	80c01c26 	beq	r16,r3,2008b300 <__divdf3+0x8ac>
2008b290:	a0c10f84 	addi	r3,r20,1086
2008b294:	88c6983a 	sll	r3,r17,r3
2008b298:	1cc6b03a 	or	r3,r3,r19
2008b29c:	1806c03a 	cmpne	r3,r3,zero
2008b2a0:	1884b03a 	or	r2,r3,r2
2008b2a4:	140001cc 	andi	r16,r2,7
2008b2a8:	8000061e 	bne	r16,zero,2008b2c4 <__divdf3+0x870>
2008b2ac:	000b883a 	mov	r5,zero
2008b2b0:	1004d0fa 	srli	r2,r2,3
2008b2b4:	9180004c 	andi	r6,r18,1
2008b2b8:	0009883a 	mov	r4,zero
2008b2bc:	1426b03a 	or	r19,r2,r16
2008b2c0:	003e4206 	br	2008abcc <__flash_rwdata_start+0xffff929c>
2008b2c4:	110003cc 	andi	r4,r2,15
2008b2c8:	00c00104 	movi	r3,4
2008b2cc:	0021883a 	mov	r16,zero
2008b2d0:	20ffcd1e 	bne	r4,r3,2008b208 <__flash_rwdata_start+0xffff98d8>
2008b2d4:	800a927a 	slli	r5,r16,9
2008b2d8:	8020977a 	slli	r16,r16,29
2008b2dc:	280ad33a 	srli	r5,r5,12
2008b2e0:	003ff306 	br	2008b2b0 <__flash_rwdata_start+0xffff9980>
2008b2e4:	317fd336 	bltu	r6,r5,2008b234 <__flash_rwdata_start+0xffff9904>
2008b2e8:	1023883a 	mov	r17,r2
2008b2ec:	003fa206 	br	2008b178 <__flash_rwdata_start+0xffff9848>
2008b2f0:	a8bfd736 	bltu	r21,r2,2008b250 <__flash_rwdata_start+0xffff9920>
2008b2f4:	2027883a 	mov	r19,r4
2008b2f8:	a8bf3d1e 	bne	r21,r2,2008aff0 <__flash_rwdata_start+0xffff96c0>
2008b2fc:	003f3d06 	br	2008aff4 <__flash_rwdata_start+0xffff96c4>
2008b300:	0007883a 	mov	r3,zero
2008b304:	003fe406 	br	2008b298 <__flash_rwdata_start+0xffff9968>
2008b308:	00800434 	movhi	r2,16
2008b30c:	89400234 	orhi	r5,r17,8
2008b310:	10bfffc4 	addi	r2,r2,-1
2008b314:	e00d883a 	mov	r6,fp
2008b318:	288a703a 	and	r5,r5,r2
2008b31c:	003e8506 	br	2008ad34 <__flash_rwdata_start+0xffff9404>

2008b320 <__eqdf2>:
2008b320:	2804d53a 	srli	r2,r5,20
2008b324:	3806d53a 	srli	r3,r7,20
2008b328:	02000434 	movhi	r8,16
2008b32c:	423fffc4 	addi	r8,r8,-1
2008b330:	1081ffcc 	andi	r2,r2,2047
2008b334:	0241ffc4 	movi	r9,2047
2008b338:	2a14703a 	and	r10,r5,r8
2008b33c:	18c1ffcc 	andi	r3,r3,2047
2008b340:	3a10703a 	and	r8,r7,r8
2008b344:	280ad7fa 	srli	r5,r5,31
2008b348:	380ed7fa 	srli	r7,r7,31
2008b34c:	12400f26 	beq	r2,r9,2008b38c <__eqdf2+0x6c>
2008b350:	0241ffc4 	movi	r9,2047
2008b354:	1a400326 	beq	r3,r9,2008b364 <__eqdf2+0x44>
2008b358:	10c00526 	beq	r2,r3,2008b370 <__eqdf2+0x50>
2008b35c:	00800044 	movi	r2,1
2008b360:	f800283a 	ret
2008b364:	4192b03a 	or	r9,r8,r6
2008b368:	483ffc1e 	bne	r9,zero,2008b35c <__flash_rwdata_start+0xffff9a2c>
2008b36c:	10fffb1e 	bne	r2,r3,2008b35c <__flash_rwdata_start+0xffff9a2c>
2008b370:	523ffa1e 	bne	r10,r8,2008b35c <__flash_rwdata_start+0xffff9a2c>
2008b374:	21bff91e 	bne	r4,r6,2008b35c <__flash_rwdata_start+0xffff9a2c>
2008b378:	29c00826 	beq	r5,r7,2008b39c <__eqdf2+0x7c>
2008b37c:	103ff71e 	bne	r2,zero,2008b35c <__flash_rwdata_start+0xffff9a2c>
2008b380:	5104b03a 	or	r2,r10,r4
2008b384:	1004c03a 	cmpne	r2,r2,zero
2008b388:	f800283a 	ret
2008b38c:	5112b03a 	or	r9,r10,r4
2008b390:	483fef26 	beq	r9,zero,2008b350 <__flash_rwdata_start+0xffff9a20>
2008b394:	00800044 	movi	r2,1
2008b398:	f800283a 	ret
2008b39c:	0005883a 	mov	r2,zero
2008b3a0:	f800283a 	ret

2008b3a4 <__gedf2>:
2008b3a4:	2804d53a 	srli	r2,r5,20
2008b3a8:	3806d53a 	srli	r3,r7,20
2008b3ac:	02000434 	movhi	r8,16
2008b3b0:	423fffc4 	addi	r8,r8,-1
2008b3b4:	0241ffc4 	movi	r9,2047
2008b3b8:	1081ffcc 	andi	r2,r2,2047
2008b3bc:	2a14703a 	and	r10,r5,r8
2008b3c0:	1a46703a 	and	r3,r3,r9
2008b3c4:	3a10703a 	and	r8,r7,r8
2008b3c8:	280ad7fa 	srli	r5,r5,31
2008b3cc:	380ed7fa 	srli	r7,r7,31
2008b3d0:	12400b26 	beq	r2,r9,2008b400 <__gedf2+0x5c>
2008b3d4:	1a401626 	beq	r3,r9,2008b430 <__gedf2+0x8c>
2008b3d8:	10000c1e 	bne	r2,zero,2008b40c <__gedf2+0x68>
2008b3dc:	5112b03a 	or	r9,r10,r4
2008b3e0:	4813003a 	cmpeq	r9,r9,zero
2008b3e4:	4817883a 	mov	r11,r9
2008b3e8:	18000c1e 	bne	r3,zero,2008b41c <__gedf2+0x78>
2008b3ec:	4198b03a 	or	r12,r8,r6
2008b3f0:	60000a1e 	bne	r12,zero,2008b41c <__gedf2+0x78>
2008b3f4:	48001326 	beq	r9,zero,2008b444 <__gedf2+0xa0>
2008b3f8:	0005883a 	mov	r2,zero
2008b3fc:	f800283a 	ret
2008b400:	5112b03a 	or	r9,r10,r4
2008b404:	4800191e 	bne	r9,zero,2008b46c <__gedf2+0xc8>
2008b408:	18800926 	beq	r3,r2,2008b430 <__gedf2+0x8c>
2008b40c:	18000b1e 	bne	r3,zero,2008b43c <__gedf2+0x98>
2008b410:	4192b03a 	or	r9,r8,r6
2008b414:	0017883a 	mov	r11,zero
2008b418:	48000a26 	beq	r9,zero,2008b444 <__gedf2+0xa0>
2008b41c:	39c03fcc 	andi	r7,r7,255
2008b420:	58000726 	beq	r11,zero,2008b440 <__gedf2+0x9c>
2008b424:	3800081e 	bne	r7,zero,2008b448 <__gedf2+0xa4>
2008b428:	00bfffc4 	movi	r2,-1
2008b42c:	f800283a 	ret
2008b430:	4192b03a 	or	r9,r8,r6
2008b434:	48000d1e 	bne	r9,zero,2008b46c <__gedf2+0xc8>
2008b438:	103fe826 	beq	r2,zero,2008b3dc <__flash_rwdata_start+0xffff9aac>
2008b43c:	39c03fcc 	andi	r7,r7,255
2008b440:	29c00326 	beq	r5,r7,2008b450 <__gedf2+0xac>
2008b444:	283ff81e 	bne	r5,zero,2008b428 <__flash_rwdata_start+0xffff9af8>
2008b448:	00800044 	movi	r2,1
2008b44c:	f800283a 	ret
2008b450:	18bffc16 	blt	r3,r2,2008b444 <__flash_rwdata_start+0xffff9b14>
2008b454:	10c00316 	blt	r2,r3,2008b464 <__gedf2+0xc0>
2008b458:	42bffa36 	bltu	r8,r10,2008b444 <__flash_rwdata_start+0xffff9b14>
2008b45c:	52000526 	beq	r10,r8,2008b474 <__gedf2+0xd0>
2008b460:	523fe52e 	bgeu	r10,r8,2008b3f8 <__flash_rwdata_start+0xffff9ac8>
2008b464:	283ff026 	beq	r5,zero,2008b428 <__flash_rwdata_start+0xffff9af8>
2008b468:	003ff706 	br	2008b448 <__flash_rwdata_start+0xffff9b18>
2008b46c:	00bfff84 	movi	r2,-2
2008b470:	f800283a 	ret
2008b474:	313ff336 	bltu	r6,r4,2008b444 <__flash_rwdata_start+0xffff9b14>
2008b478:	21bfdf2e 	bgeu	r4,r6,2008b3f8 <__flash_rwdata_start+0xffff9ac8>
2008b47c:	283fea26 	beq	r5,zero,2008b428 <__flash_rwdata_start+0xffff9af8>
2008b480:	003ff106 	br	2008b448 <__flash_rwdata_start+0xffff9b18>

2008b484 <__ledf2>:
2008b484:	2804d53a 	srli	r2,r5,20
2008b488:	3810d53a 	srli	r8,r7,20
2008b48c:	00c00434 	movhi	r3,16
2008b490:	18ffffc4 	addi	r3,r3,-1
2008b494:	0241ffc4 	movi	r9,2047
2008b498:	1081ffcc 	andi	r2,r2,2047
2008b49c:	28d4703a 	and	r10,r5,r3
2008b4a0:	4250703a 	and	r8,r8,r9
2008b4a4:	38c6703a 	and	r3,r7,r3
2008b4a8:	280ad7fa 	srli	r5,r5,31
2008b4ac:	380ed7fa 	srli	r7,r7,31
2008b4b0:	12400b26 	beq	r2,r9,2008b4e0 <__ledf2+0x5c>
2008b4b4:	42401926 	beq	r8,r9,2008b51c <__ledf2+0x98>
2008b4b8:	10000c1e 	bne	r2,zero,2008b4ec <__ledf2+0x68>
2008b4bc:	5112b03a 	or	r9,r10,r4
2008b4c0:	4813003a 	cmpeq	r9,r9,zero
2008b4c4:	4817883a 	mov	r11,r9
2008b4c8:	40000f26 	beq	r8,zero,2008b508 <__ledf2+0x84>
2008b4cc:	39c03fcc 	andi	r7,r7,255
2008b4d0:	58001826 	beq	r11,zero,2008b534 <__ledf2+0xb0>
2008b4d4:	38000a1e 	bne	r7,zero,2008b500 <__ledf2+0x7c>
2008b4d8:	00bfffc4 	movi	r2,-1
2008b4dc:	f800283a 	ret
2008b4e0:	5112b03a 	or	r9,r10,r4
2008b4e4:	48000f1e 	bne	r9,zero,2008b524 <__ledf2+0xa0>
2008b4e8:	40800c26 	beq	r8,r2,2008b51c <__ledf2+0x98>
2008b4ec:	4000101e 	bne	r8,zero,2008b530 <__ledf2+0xac>
2008b4f0:	1992b03a 	or	r9,r3,r6
2008b4f4:	0017883a 	mov	r11,zero
2008b4f8:	483ff41e 	bne	r9,zero,2008b4cc <__flash_rwdata_start+0xffff9b9c>
2008b4fc:	283ff61e 	bne	r5,zero,2008b4d8 <__flash_rwdata_start+0xffff9ba8>
2008b500:	00800044 	movi	r2,1
2008b504:	f800283a 	ret
2008b508:	1998b03a 	or	r12,r3,r6
2008b50c:	603fef1e 	bne	r12,zero,2008b4cc <__flash_rwdata_start+0xffff9b9c>
2008b510:	483ffa26 	beq	r9,zero,2008b4fc <__flash_rwdata_start+0xffff9bcc>
2008b514:	0005883a 	mov	r2,zero
2008b518:	f800283a 	ret
2008b51c:	1992b03a 	or	r9,r3,r6
2008b520:	48000226 	beq	r9,zero,2008b52c <__ledf2+0xa8>
2008b524:	00800084 	movi	r2,2
2008b528:	f800283a 	ret
2008b52c:	103fe326 	beq	r2,zero,2008b4bc <__flash_rwdata_start+0xffff9b8c>
2008b530:	39c03fcc 	andi	r7,r7,255
2008b534:	29fff11e 	bne	r5,r7,2008b4fc <__flash_rwdata_start+0xffff9bcc>
2008b538:	40bff016 	blt	r8,r2,2008b4fc <__flash_rwdata_start+0xffff9bcc>
2008b53c:	12000316 	blt	r2,r8,2008b54c <__ledf2+0xc8>
2008b540:	1abfee36 	bltu	r3,r10,2008b4fc <__flash_rwdata_start+0xffff9bcc>
2008b544:	50c00326 	beq	r10,r3,2008b554 <__ledf2+0xd0>
2008b548:	50fff22e 	bgeu	r10,r3,2008b514 <__flash_rwdata_start+0xffff9be4>
2008b54c:	283fe226 	beq	r5,zero,2008b4d8 <__flash_rwdata_start+0xffff9ba8>
2008b550:	003feb06 	br	2008b500 <__flash_rwdata_start+0xffff9bd0>
2008b554:	313fe936 	bltu	r6,r4,2008b4fc <__flash_rwdata_start+0xffff9bcc>
2008b558:	21bfee2e 	bgeu	r4,r6,2008b514 <__flash_rwdata_start+0xffff9be4>
2008b55c:	283fde26 	beq	r5,zero,2008b4d8 <__flash_rwdata_start+0xffff9ba8>
2008b560:	003fe706 	br	2008b500 <__flash_rwdata_start+0xffff9bd0>

2008b564 <__muldf3>:
2008b564:	defff204 	addi	sp,sp,-56
2008b568:	2804d53a 	srli	r2,r5,20
2008b56c:	dd800a15 	stw	r22,40(sp)
2008b570:	282cd7fa 	srli	r22,r5,31
2008b574:	dc000415 	stw	r16,16(sp)
2008b578:	04000434 	movhi	r16,16
2008b57c:	df000c15 	stw	fp,48(sp)
2008b580:	dd000815 	stw	r20,32(sp)
2008b584:	dcc00715 	stw	r19,28(sp)
2008b588:	dc800615 	stw	r18,24(sp)
2008b58c:	dc400515 	stw	r17,20(sp)
2008b590:	843fffc4 	addi	r16,r16,-1
2008b594:	dfc00d15 	stw	ra,52(sp)
2008b598:	ddc00b15 	stw	r23,44(sp)
2008b59c:	dd400915 	stw	r21,36(sp)
2008b5a0:	1501ffcc 	andi	r20,r2,2047
2008b5a4:	2023883a 	mov	r17,r4
2008b5a8:	2025883a 	mov	r18,r4
2008b5ac:	2c20703a 	and	r16,r5,r16
2008b5b0:	b027883a 	mov	r19,r22
2008b5b4:	b7003fcc 	andi	fp,r22,255
2008b5b8:	a0005926 	beq	r20,zero,2008b720 <__muldf3+0x1bc>
2008b5bc:	0081ffc4 	movi	r2,2047
2008b5c0:	a0803426 	beq	r20,r2,2008b694 <__muldf3+0x130>
2008b5c4:	84000434 	orhi	r16,r16,16
2008b5c8:	2004d77a 	srli	r2,r4,29
2008b5cc:	802090fa 	slli	r16,r16,3
2008b5d0:	202490fa 	slli	r18,r4,3
2008b5d4:	a53f0044 	addi	r20,r20,-1023
2008b5d8:	80a0b03a 	or	r16,r16,r2
2008b5dc:	002b883a 	mov	r21,zero
2008b5e0:	0015883a 	mov	r10,zero
2008b5e4:	3812d53a 	srli	r9,r7,20
2008b5e8:	3806d7fa 	srli	r3,r7,31
2008b5ec:	02000434 	movhi	r8,16
2008b5f0:	423fffc4 	addi	r8,r8,-1
2008b5f4:	4941ffcc 	andi	r5,r9,2047
2008b5f8:	302f883a 	mov	r23,r6
2008b5fc:	3a22703a 	and	r17,r7,r8
2008b600:	1ac03fcc 	andi	r11,r3,255
2008b604:	28006226 	beq	r5,zero,2008b790 <__muldf3+0x22c>
2008b608:	0081ffc4 	movi	r2,2047
2008b60c:	28805a26 	beq	r5,r2,2008b778 <__muldf3+0x214>
2008b610:	8a000434 	orhi	r8,r17,16
2008b614:	3004d77a 	srli	r2,r6,29
2008b618:	401090fa 	slli	r8,r8,3
2008b61c:	302e90fa 	slli	r23,r6,3
2008b620:	297f0044 	addi	r5,r5,-1023
2008b624:	40a2b03a 	or	r17,r8,r2
2008b628:	0013883a 	mov	r9,zero
2008b62c:	4d4cb03a 	or	r6,r9,r21
2008b630:	300c90ba 	slli	r6,r6,2
2008b634:	02080274 	movhi	r8,8201
2008b638:	422d9504 	addi	r8,r8,-18860
2008b63c:	320d883a 	add	r6,r6,r8
2008b640:	31800017 	ldw	r6,0(r6)
2008b644:	a14b883a 	add	r5,r20,r5
2008b648:	1dacf03a 	xor	r22,r3,r22
2008b64c:	2b000044 	addi	r12,r5,1
2008b650:	3000683a 	jmp	r6
2008b654:	2008b890 	cmplti	zero,r4,8930
2008b658:	2008b87c 	xorhi	zero,r4,8929
2008b65c:	2008b87c 	xorhi	zero,r4,8929
2008b660:	2008b868 	cmpgeui	zero,r4,8929
2008b664:	2008b6b0 	cmpltui	zero,r4,8922
2008b668:	2008b6b0 	cmpltui	zero,r4,8922
2008b66c:	2008b850 	cmplti	zero,r4,8929
2008b670:	2008b868 	cmpgeui	zero,r4,8929
2008b674:	2008b6b0 	cmpltui	zero,r4,8922
2008b678:	2008b850 	cmplti	zero,r4,8929
2008b67c:	2008b6b0 	cmpltui	zero,r4,8922
2008b680:	2008b868 	cmpgeui	zero,r4,8929
2008b684:	2008b6b4 	orhi	zero,r4,8922
2008b688:	2008b6b4 	orhi	zero,r4,8922
2008b68c:	2008b6b4 	orhi	zero,r4,8922
2008b690:	2008ba8c 	andi	zero,r4,8938
2008b694:	8104b03a 	or	r2,r16,r4
2008b698:	10006a1e 	bne	r2,zero,2008b844 <__muldf3+0x2e0>
2008b69c:	05400204 	movi	r21,8
2008b6a0:	0021883a 	mov	r16,zero
2008b6a4:	0025883a 	mov	r18,zero
2008b6a8:	02800084 	movi	r10,2
2008b6ac:	003fcd06 	br	2008b5e4 <__flash_rwdata_start+0xffff9cb4>
2008b6b0:	b039883a 	mov	fp,r22
2008b6b4:	00800084 	movi	r2,2
2008b6b8:	50804e1e 	bne	r10,r2,2008b7f4 <__muldf3+0x290>
2008b6bc:	e4c0004c 	andi	r19,fp,1
2008b6c0:	0101ffc4 	movi	r4,2047
2008b6c4:	0021883a 	mov	r16,zero
2008b6c8:	0025883a 	mov	r18,zero
2008b6cc:	2008953a 	slli	r4,r4,20
2008b6d0:	98c03fcc 	andi	r3,r19,255
2008b6d4:	01400434 	movhi	r5,16
2008b6d8:	297fffc4 	addi	r5,r5,-1
2008b6dc:	180697fa 	slli	r3,r3,31
2008b6e0:	8160703a 	and	r16,r16,r5
2008b6e4:	8120b03a 	or	r16,r16,r4
2008b6e8:	80c6b03a 	or	r3,r16,r3
2008b6ec:	9005883a 	mov	r2,r18
2008b6f0:	dfc00d17 	ldw	ra,52(sp)
2008b6f4:	df000c17 	ldw	fp,48(sp)
2008b6f8:	ddc00b17 	ldw	r23,44(sp)
2008b6fc:	dd800a17 	ldw	r22,40(sp)
2008b700:	dd400917 	ldw	r21,36(sp)
2008b704:	dd000817 	ldw	r20,32(sp)
2008b708:	dcc00717 	ldw	r19,28(sp)
2008b70c:	dc800617 	ldw	r18,24(sp)
2008b710:	dc400517 	ldw	r17,20(sp)
2008b714:	dc000417 	ldw	r16,16(sp)
2008b718:	dec00e04 	addi	sp,sp,56
2008b71c:	f800283a 	ret
2008b720:	8104b03a 	or	r2,r16,r4
2008b724:	10004226 	beq	r2,zero,2008b830 <__muldf3+0x2cc>
2008b728:	8000f926 	beq	r16,zero,2008bb10 <__muldf3+0x5ac>
2008b72c:	8009883a 	mov	r4,r16
2008b730:	d9800315 	stw	r6,12(sp)
2008b734:	d9c00015 	stw	r7,0(sp)
2008b738:	008c7540 	call	2008c754 <__clzsi2>
2008b73c:	d9800317 	ldw	r6,12(sp)
2008b740:	d9c00017 	ldw	r7,0(sp)
2008b744:	1007883a 	mov	r3,r2
2008b748:	01000a04 	movi	r4,40
2008b74c:	18bffe04 	addi	r2,r3,-8
2008b750:	20c9c83a 	sub	r4,r4,r3
2008b754:	80a0983a 	sll	r16,r16,r2
2008b758:	8908d83a 	srl	r4,r17,r4
2008b75c:	88a4983a 	sll	r18,r17,r2
2008b760:	2420b03a 	or	r16,r4,r16
2008b764:	017f0344 	movi	r5,-1011
2008b768:	28e9c83a 	sub	r20,r5,r3
2008b76c:	002b883a 	mov	r21,zero
2008b770:	0015883a 	mov	r10,zero
2008b774:	003f9b06 	br	2008b5e4 <__flash_rwdata_start+0xffff9cb4>
2008b778:	8984b03a 	or	r2,r17,r6
2008b77c:	10002a1e 	bne	r2,zero,2008b828 <__muldf3+0x2c4>
2008b780:	0023883a 	mov	r17,zero
2008b784:	002f883a 	mov	r23,zero
2008b788:	02400084 	movi	r9,2
2008b78c:	003fa706 	br	2008b62c <__flash_rwdata_start+0xffff9cfc>
2008b790:	8984b03a 	or	r2,r17,r6
2008b794:	10002026 	beq	r2,zero,2008b818 <__muldf3+0x2b4>
2008b798:	8800cc26 	beq	r17,zero,2008bacc <__muldf3+0x568>
2008b79c:	8809883a 	mov	r4,r17
2008b7a0:	d8c00215 	stw	r3,8(sp)
2008b7a4:	d9800315 	stw	r6,12(sp)
2008b7a8:	da800015 	stw	r10,0(sp)
2008b7ac:	dac00115 	stw	r11,4(sp)
2008b7b0:	008c7540 	call	2008c754 <__clzsi2>
2008b7b4:	d8c00217 	ldw	r3,8(sp)
2008b7b8:	d9800317 	ldw	r6,12(sp)
2008b7bc:	da800017 	ldw	r10,0(sp)
2008b7c0:	dac00117 	ldw	r11,4(sp)
2008b7c4:	1009883a 	mov	r4,r2
2008b7c8:	01400a04 	movi	r5,40
2008b7cc:	25fffe04 	addi	r23,r4,-8
2008b7d0:	290bc83a 	sub	r5,r5,r4
2008b7d4:	8dd0983a 	sll	r8,r17,r23
2008b7d8:	314ad83a 	srl	r5,r6,r5
2008b7dc:	35ee983a 	sll	r23,r6,r23
2008b7e0:	2a22b03a 	or	r17,r5,r8
2008b7e4:	017f0344 	movi	r5,-1011
2008b7e8:	290bc83a 	sub	r5,r5,r4
2008b7ec:	0013883a 	mov	r9,zero
2008b7f0:	003f8e06 	br	2008b62c <__flash_rwdata_start+0xffff9cfc>
2008b7f4:	008000c4 	movi	r2,3
2008b7f8:	50811d26 	beq	r10,r2,2008bc70 <__muldf3+0x70c>
2008b7fc:	00800044 	movi	r2,1
2008b800:	5080e01e 	bne	r10,r2,2008bb84 <__muldf3+0x620>
2008b804:	e0a6703a 	and	r19,fp,r2
2008b808:	0009883a 	mov	r4,zero
2008b80c:	0021883a 	mov	r16,zero
2008b810:	0025883a 	mov	r18,zero
2008b814:	003fad06 	br	2008b6cc <__flash_rwdata_start+0xffff9d9c>
2008b818:	0023883a 	mov	r17,zero
2008b81c:	002f883a 	mov	r23,zero
2008b820:	02400044 	movi	r9,1
2008b824:	003f8106 	br	2008b62c <__flash_rwdata_start+0xffff9cfc>
2008b828:	024000c4 	movi	r9,3
2008b82c:	003f7f06 	br	2008b62c <__flash_rwdata_start+0xffff9cfc>
2008b830:	05400104 	movi	r21,4
2008b834:	0021883a 	mov	r16,zero
2008b838:	0025883a 	mov	r18,zero
2008b83c:	02800044 	movi	r10,1
2008b840:	003f6806 	br	2008b5e4 <__flash_rwdata_start+0xffff9cb4>
2008b844:	05400304 	movi	r21,12
2008b848:	028000c4 	movi	r10,3
2008b84c:	003f6506 	br	2008b5e4 <__flash_rwdata_start+0xffff9cb4>
2008b850:	04000434 	movhi	r16,16
2008b854:	0027883a 	mov	r19,zero
2008b858:	843fffc4 	addi	r16,r16,-1
2008b85c:	04bfffc4 	movi	r18,-1
2008b860:	0101ffc4 	movi	r4,2047
2008b864:	003f9906 	br	2008b6cc <__flash_rwdata_start+0xffff9d9c>
2008b868:	8821883a 	mov	r16,r17
2008b86c:	b825883a 	mov	r18,r23
2008b870:	5839883a 	mov	fp,r11
2008b874:	4815883a 	mov	r10,r9
2008b878:	003f8e06 	br	2008b6b4 <__flash_rwdata_start+0xffff9d84>
2008b87c:	8821883a 	mov	r16,r17
2008b880:	b825883a 	mov	r18,r23
2008b884:	b039883a 	mov	fp,r22
2008b888:	4815883a 	mov	r10,r9
2008b88c:	003f8906 	br	2008b6b4 <__flash_rwdata_start+0xffff9d84>
2008b890:	b80cd43a 	srli	r6,r23,16
2008b894:	9006d43a 	srli	r3,r18,16
2008b898:	90bfffcc 	andi	r2,r18,65535
2008b89c:	bdffffcc 	andi	r23,r23,65535
2008b8a0:	b891383a 	mul	r8,r23,r2
2008b8a4:	b8c9383a 	mul	r4,r23,r3
2008b8a8:	309b383a 	mul	r13,r6,r2
2008b8ac:	400ed43a 	srli	r7,r8,16
2008b8b0:	30df383a 	mul	r15,r6,r3
2008b8b4:	235b883a 	add	r13,r4,r13
2008b8b8:	69db883a 	add	r13,r13,r7
2008b8bc:	6900022e 	bgeu	r13,r4,2008b8c8 <__muldf3+0x364>
2008b8c0:	01000074 	movhi	r4,1
2008b8c4:	791f883a 	add	r15,r15,r4
2008b8c8:	8828d43a 	srli	r20,r17,16
2008b8cc:	8c7fffcc 	andi	r17,r17,65535
2008b8d0:	888f383a 	mul	r7,r17,r2
2008b8d4:	88d3383a 	mul	r9,r17,r3
2008b8d8:	a0a5383a 	mul	r18,r20,r2
2008b8dc:	3816d43a 	srli	r11,r7,16
2008b8e0:	6814943a 	slli	r10,r13,16
2008b8e4:	4ca5883a 	add	r18,r9,r18
2008b8e8:	423fffcc 	andi	r8,r8,65535
2008b8ec:	92e5883a 	add	r18,r18,r11
2008b8f0:	6808d43a 	srli	r4,r13,16
2008b8f4:	5215883a 	add	r10,r10,r8
2008b8f8:	a0c7383a 	mul	r3,r20,r3
2008b8fc:	9240022e 	bgeu	r18,r9,2008b908 <__muldf3+0x3a4>
2008b900:	00800074 	movhi	r2,1
2008b904:	1887883a 	add	r3,r3,r2
2008b908:	802ad43a 	srli	r21,r16,16
2008b90c:	80bfffcc 	andi	r2,r16,65535
2008b910:	b893383a 	mul	r9,r23,r2
2008b914:	3091383a 	mul	r8,r6,r2
2008b918:	bd6f383a 	mul	r23,r23,r21
2008b91c:	9026943a 	slli	r19,r18,16
2008b920:	481ad43a 	srli	r13,r9,16
2008b924:	9024d43a 	srli	r18,r18,16
2008b928:	39ffffcc 	andi	r7,r7,65535
2008b92c:	ba11883a 	add	r8,r23,r8
2008b930:	99e7883a 	add	r19,r19,r7
2008b934:	4351883a 	add	r8,r8,r13
2008b938:	1c97883a 	add	r11,r3,r18
2008b93c:	354d383a 	mul	r6,r6,r21
2008b940:	9925883a 	add	r18,r19,r4
2008b944:	45c0022e 	bgeu	r8,r23,2008b950 <__muldf3+0x3ec>
2008b948:	00c00074 	movhi	r3,1
2008b94c:	30cd883a 	add	r6,r6,r3
2008b950:	8889383a 	mul	r4,r17,r2
2008b954:	8d63383a 	mul	r17,r17,r21
2008b958:	a085383a 	mul	r2,r20,r2
2008b95c:	200ed43a 	srli	r7,r4,16
2008b960:	401cd43a 	srli	r14,r8,16
2008b964:	401a943a 	slli	r13,r8,16
2008b968:	8885883a 	add	r2,r17,r2
2008b96c:	4a3fffcc 	andi	r8,r9,65535
2008b970:	11c5883a 	add	r2,r2,r7
2008b974:	339d883a 	add	r14,r6,r14
2008b978:	6a11883a 	add	r8,r13,r8
2008b97c:	a561383a 	mul	r16,r20,r21
2008b980:	1440022e 	bgeu	r2,r17,2008b98c <__muldf3+0x428>
2008b984:	00c00074 	movhi	r3,1
2008b988:	80e1883a 	add	r16,r16,r3
2008b98c:	1006943a 	slli	r3,r2,16
2008b990:	213fffcc 	andi	r4,r4,65535
2008b994:	93db883a 	add	r13,r18,r15
2008b998:	1909883a 	add	r4,r3,r4
2008b99c:	22c7883a 	add	r3,r4,r11
2008b9a0:	6cd3803a 	cmpltu	r9,r13,r19
2008b9a4:	6a09883a 	add	r4,r13,r8
2008b9a8:	1a5b883a 	add	r13,r3,r9
2008b9ac:	2211803a 	cmpltu	r8,r4,r8
2008b9b0:	734d883a 	add	r6,r14,r13
2008b9b4:	100ed43a 	srli	r7,r2,16
2008b9b8:	6a53803a 	cmpltu	r9,r13,r9
2008b9bc:	3205883a 	add	r2,r6,r8
2008b9c0:	1ac7803a 	cmpltu	r3,r3,r11
2008b9c4:	1211803a 	cmpltu	r8,r2,r8
2008b9c8:	48c6b03a 	or	r3,r9,r3
2008b9cc:	338d803a 	cmpltu	r6,r6,r14
2008b9d0:	19c7883a 	add	r3,r3,r7
2008b9d4:	418cb03a 	or	r6,r8,r6
2008b9d8:	1987883a 	add	r3,r3,r6
2008b9dc:	2024927a 	slli	r18,r4,9
2008b9e0:	1c07883a 	add	r3,r3,r16
2008b9e4:	1806927a 	slli	r3,r3,9
2008b9e8:	1020d5fa 	srli	r16,r2,23
2008b9ec:	2008d5fa 	srli	r4,r4,23
2008b9f0:	9294b03a 	or	r10,r18,r10
2008b9f4:	1004927a 	slli	r2,r2,9
2008b9f8:	5024c03a 	cmpne	r18,r10,zero
2008b9fc:	1c20b03a 	or	r16,r3,r16
2008ba00:	9108b03a 	or	r4,r18,r4
2008ba04:	80c0402c 	andhi	r3,r16,256
2008ba08:	20a4b03a 	or	r18,r4,r2
2008ba0c:	18000726 	beq	r3,zero,2008ba2c <__muldf3+0x4c8>
2008ba10:	9006d07a 	srli	r3,r18,1
2008ba14:	800897fa 	slli	r4,r16,31
2008ba18:	9080004c 	andi	r2,r18,1
2008ba1c:	8020d07a 	srli	r16,r16,1
2008ba20:	10c4b03a 	or	r2,r2,r3
2008ba24:	1124b03a 	or	r18,r2,r4
2008ba28:	600b883a 	mov	r5,r12
2008ba2c:	2900ffc4 	addi	r4,r5,1023
2008ba30:	01004b0e 	bge	zero,r4,2008bb60 <__muldf3+0x5fc>
2008ba34:	908001cc 	andi	r2,r18,7
2008ba38:	10000726 	beq	r2,zero,2008ba58 <__muldf3+0x4f4>
2008ba3c:	90c003cc 	andi	r3,r18,15
2008ba40:	00800104 	movi	r2,4
2008ba44:	18800426 	beq	r3,r2,2008ba58 <__muldf3+0x4f4>
2008ba48:	9087883a 	add	r3,r18,r2
2008ba4c:	1c85803a 	cmpltu	r2,r3,r18
2008ba50:	80a1883a 	add	r16,r16,r2
2008ba54:	1825883a 	mov	r18,r3
2008ba58:	8080402c 	andhi	r2,r16,256
2008ba5c:	10000426 	beq	r2,zero,2008ba70 <__muldf3+0x50c>
2008ba60:	00bfc034 	movhi	r2,65280
2008ba64:	10bfffc4 	addi	r2,r2,-1
2008ba68:	29010004 	addi	r4,r5,1024
2008ba6c:	80a0703a 	and	r16,r16,r2
2008ba70:	0081ff84 	movi	r2,2046
2008ba74:	1100320e 	bge	r2,r4,2008bb40 <__muldf3+0x5dc>
2008ba78:	b4c0004c 	andi	r19,r22,1
2008ba7c:	0101ffc4 	movi	r4,2047
2008ba80:	0021883a 	mov	r16,zero
2008ba84:	0025883a 	mov	r18,zero
2008ba88:	003f1006 	br	2008b6cc <__flash_rwdata_start+0xffff9d9c>
2008ba8c:	8080022c 	andhi	r2,r16,8
2008ba90:	10000926 	beq	r2,zero,2008bab8 <__muldf3+0x554>
2008ba94:	8880022c 	andhi	r2,r17,8
2008ba98:	1000071e 	bne	r2,zero,2008bab8 <__muldf3+0x554>
2008ba9c:	00800434 	movhi	r2,16
2008baa0:	8c000234 	orhi	r16,r17,8
2008baa4:	10bfffc4 	addi	r2,r2,-1
2008baa8:	1827883a 	mov	r19,r3
2008baac:	80a0703a 	and	r16,r16,r2
2008bab0:	b825883a 	mov	r18,r23
2008bab4:	003f6a06 	br	2008b860 <__flash_rwdata_start+0xffff9f30>
2008bab8:	00800434 	movhi	r2,16
2008babc:	84000234 	orhi	r16,r16,8
2008bac0:	10bfffc4 	addi	r2,r2,-1
2008bac4:	80a0703a 	and	r16,r16,r2
2008bac8:	003f6506 	br	2008b860 <__flash_rwdata_start+0xffff9f30>
2008bacc:	3009883a 	mov	r4,r6
2008bad0:	d8c00215 	stw	r3,8(sp)
2008bad4:	d9800315 	stw	r6,12(sp)
2008bad8:	da800015 	stw	r10,0(sp)
2008badc:	dac00115 	stw	r11,4(sp)
2008bae0:	008c7540 	call	2008c754 <__clzsi2>
2008bae4:	11000804 	addi	r4,r2,32
2008bae8:	014009c4 	movi	r5,39
2008baec:	d8c00217 	ldw	r3,8(sp)
2008baf0:	d9800317 	ldw	r6,12(sp)
2008baf4:	da800017 	ldw	r10,0(sp)
2008baf8:	dac00117 	ldw	r11,4(sp)
2008bafc:	293f320e 	bge	r5,r4,2008b7c8 <__flash_rwdata_start+0xffff9e98>
2008bb00:	10bffe04 	addi	r2,r2,-8
2008bb04:	b8a2983a 	sll	r17,r23,r2
2008bb08:	002f883a 	mov	r23,zero
2008bb0c:	003f3506 	br	2008b7e4 <__flash_rwdata_start+0xffff9eb4>
2008bb10:	d9800315 	stw	r6,12(sp)
2008bb14:	d9c00015 	stw	r7,0(sp)
2008bb18:	008c7540 	call	2008c754 <__clzsi2>
2008bb1c:	10c00804 	addi	r3,r2,32
2008bb20:	010009c4 	movi	r4,39
2008bb24:	d9800317 	ldw	r6,12(sp)
2008bb28:	d9c00017 	ldw	r7,0(sp)
2008bb2c:	20ff060e 	bge	r4,r3,2008b748 <__flash_rwdata_start+0xffff9e18>
2008bb30:	10bffe04 	addi	r2,r2,-8
2008bb34:	88a0983a 	sll	r16,r17,r2
2008bb38:	0025883a 	mov	r18,zero
2008bb3c:	003f0906 	br	2008b764 <__flash_rwdata_start+0xffff9e34>
2008bb40:	9004d0fa 	srli	r2,r18,3
2008bb44:	8024977a 	slli	r18,r16,29
2008bb48:	8020927a 	slli	r16,r16,9
2008bb4c:	2101ffcc 	andi	r4,r4,2047
2008bb50:	90a4b03a 	or	r18,r18,r2
2008bb54:	8020d33a 	srli	r16,r16,12
2008bb58:	b4c0004c 	andi	r19,r22,1
2008bb5c:	003edb06 	br	2008b6cc <__flash_rwdata_start+0xffff9d9c>
2008bb60:	00ff0084 	movi	r3,-1022
2008bb64:	1947c83a 	sub	r3,r3,r5
2008bb68:	00800e04 	movi	r2,56
2008bb6c:	10c0080e 	bge	r2,r3,2008bb90 <__muldf3+0x62c>
2008bb70:	b4c0004c 	andi	r19,r22,1
2008bb74:	0009883a 	mov	r4,zero
2008bb78:	0021883a 	mov	r16,zero
2008bb7c:	0025883a 	mov	r18,zero
2008bb80:	003ed206 	br	2008b6cc <__flash_rwdata_start+0xffff9d9c>
2008bb84:	600b883a 	mov	r5,r12
2008bb88:	e02d883a 	mov	r22,fp
2008bb8c:	003fa706 	br	2008ba2c <__flash_rwdata_start+0xffffa0fc>
2008bb90:	008007c4 	movi	r2,31
2008bb94:	10c01816 	blt	r2,r3,2008bbf8 <__muldf3+0x694>
2008bb98:	29410784 	addi	r5,r5,1054
2008bb9c:	8144983a 	sll	r2,r16,r5
2008bba0:	90c8d83a 	srl	r4,r18,r3
2008bba4:	914a983a 	sll	r5,r18,r5
2008bba8:	80c6d83a 	srl	r3,r16,r3
2008bbac:	2088b03a 	or	r4,r4,r2
2008bbb0:	2804c03a 	cmpne	r2,r5,zero
2008bbb4:	2084b03a 	or	r2,r4,r2
2008bbb8:	110001cc 	andi	r4,r2,7
2008bbbc:	20000726 	beq	r4,zero,2008bbdc <__muldf3+0x678>
2008bbc0:	114003cc 	andi	r5,r2,15
2008bbc4:	01000104 	movi	r4,4
2008bbc8:	29000426 	beq	r5,r4,2008bbdc <__muldf3+0x678>
2008bbcc:	11000104 	addi	r4,r2,4
2008bbd0:	2085803a 	cmpltu	r2,r4,r2
2008bbd4:	1887883a 	add	r3,r3,r2
2008bbd8:	2005883a 	mov	r2,r4
2008bbdc:	1900202c 	andhi	r4,r3,128
2008bbe0:	20001826 	beq	r4,zero,2008bc44 <__muldf3+0x6e0>
2008bbe4:	b4c0004c 	andi	r19,r22,1
2008bbe8:	01000044 	movi	r4,1
2008bbec:	0021883a 	mov	r16,zero
2008bbf0:	0025883a 	mov	r18,zero
2008bbf4:	003eb506 	br	2008b6cc <__flash_rwdata_start+0xffff9d9c>
2008bbf8:	00bef884 	movi	r2,-1054
2008bbfc:	1145c83a 	sub	r2,r2,r5
2008bc00:	8088d83a 	srl	r4,r16,r2
2008bc04:	00800804 	movi	r2,32
2008bc08:	18801726 	beq	r3,r2,2008bc68 <__muldf3+0x704>
2008bc0c:	28810f84 	addi	r2,r5,1086
2008bc10:	8084983a 	sll	r2,r16,r2
2008bc14:	1484b03a 	or	r2,r2,r18
2008bc18:	1004c03a 	cmpne	r2,r2,zero
2008bc1c:	1104b03a 	or	r2,r2,r4
2008bc20:	10c001cc 	andi	r3,r2,7
2008bc24:	18000b1e 	bne	r3,zero,2008bc54 <__muldf3+0x6f0>
2008bc28:	0021883a 	mov	r16,zero
2008bc2c:	1004d0fa 	srli	r2,r2,3
2008bc30:	b4c0004c 	andi	r19,r22,1
2008bc34:	0009883a 	mov	r4,zero
2008bc38:	10e4b03a 	or	r18,r2,r3
2008bc3c:	003ea306 	br	2008b6cc <__flash_rwdata_start+0xffff9d9c>
2008bc40:	0007883a 	mov	r3,zero
2008bc44:	1820927a 	slli	r16,r3,9
2008bc48:	1806977a 	slli	r3,r3,29
2008bc4c:	8020d33a 	srli	r16,r16,12
2008bc50:	003ff606 	br	2008bc2c <__flash_rwdata_start+0xffffa2fc>
2008bc54:	110003cc 	andi	r4,r2,15
2008bc58:	00c00104 	movi	r3,4
2008bc5c:	20fff826 	beq	r4,r3,2008bc40 <__flash_rwdata_start+0xffffa310>
2008bc60:	0007883a 	mov	r3,zero
2008bc64:	003fd906 	br	2008bbcc <__flash_rwdata_start+0xffffa29c>
2008bc68:	0005883a 	mov	r2,zero
2008bc6c:	003fe906 	br	2008bc14 <__flash_rwdata_start+0xffffa2e4>
2008bc70:	00800434 	movhi	r2,16
2008bc74:	84000234 	orhi	r16,r16,8
2008bc78:	10bfffc4 	addi	r2,r2,-1
2008bc7c:	e4c0004c 	andi	r19,fp,1
2008bc80:	80a0703a 	and	r16,r16,r2
2008bc84:	003ef606 	br	2008b860 <__flash_rwdata_start+0xffff9f30>

2008bc88 <__subdf3>:
2008bc88:	00c00434 	movhi	r3,16
2008bc8c:	18ffffc4 	addi	r3,r3,-1
2008bc90:	defffb04 	addi	sp,sp,-20
2008bc94:	28d2703a 	and	r9,r5,r3
2008bc98:	3814d53a 	srli	r10,r7,20
2008bc9c:	38c6703a 	and	r3,r7,r3
2008bca0:	3004d77a 	srli	r2,r6,29
2008bca4:	dc800215 	stw	r18,8(sp)
2008bca8:	dc000015 	stw	r16,0(sp)
2008bcac:	2824d7fa 	srli	r18,r5,31
2008bcb0:	2820d53a 	srli	r16,r5,20
2008bcb4:	481290fa 	slli	r9,r9,3
2008bcb8:	200ad77a 	srli	r5,r4,29
2008bcbc:	180690fa 	slli	r3,r3,3
2008bcc0:	dc400115 	stw	r17,4(sp)
2008bcc4:	dfc00415 	stw	ra,16(sp)
2008bcc8:	202290fa 	slli	r17,r4,3
2008bccc:	dcc00315 	stw	r19,12(sp)
2008bcd0:	5281ffcc 	andi	r10,r10,2047
2008bcd4:	0101ffc4 	movi	r4,2047
2008bcd8:	9011883a 	mov	r8,r18
2008bcdc:	8401ffcc 	andi	r16,r16,2047
2008bce0:	94803fcc 	andi	r18,r18,255
2008bce4:	494ab03a 	or	r5,r9,r5
2008bce8:	380ed7fa 	srli	r7,r7,31
2008bcec:	1886b03a 	or	r3,r3,r2
2008bcf0:	300c90fa 	slli	r6,r6,3
2008bcf4:	51009026 	beq	r10,r4,2008bf38 <__subdf3+0x2b0>
2008bcf8:	39c0005c 	xori	r7,r7,1
2008bcfc:	8285c83a 	sub	r2,r16,r10
2008bd00:	91c06f26 	beq	r18,r7,2008bec0 <__subdf3+0x238>
2008bd04:	0080b10e 	bge	zero,r2,2008bfcc <__subdf3+0x344>
2008bd08:	50002a1e 	bne	r10,zero,2008bdb4 <__subdf3+0x12c>
2008bd0c:	1988b03a 	or	r4,r3,r6
2008bd10:	2000941e 	bne	r4,zero,2008bf64 <__subdf3+0x2dc>
2008bd14:	888001cc 	andi	r2,r17,7
2008bd18:	10005b26 	beq	r2,zero,2008be88 <__subdf3+0x200>
2008bd1c:	88c003cc 	andi	r3,r17,15
2008bd20:	00800104 	movi	r2,4
2008bd24:	18805826 	beq	r3,r2,2008be88 <__subdf3+0x200>
2008bd28:	88c00104 	addi	r3,r17,4
2008bd2c:	1c63803a 	cmpltu	r17,r3,r17
2008bd30:	2c4b883a 	add	r5,r5,r17
2008bd34:	2880202c 	andhi	r2,r5,128
2008bd38:	9200004c 	andi	r8,r18,1
2008bd3c:	1823883a 	mov	r17,r3
2008bd40:	10005426 	beq	r2,zero,2008be94 <__subdf3+0x20c>
2008bd44:	84000044 	addi	r16,r16,1
2008bd48:	0081ffc4 	movi	r2,2047
2008bd4c:	8080bf26 	beq	r16,r2,2008c04c <__subdf3+0x3c4>
2008bd50:	013fe034 	movhi	r4,65408
2008bd54:	213fffc4 	addi	r4,r4,-1
2008bd58:	290a703a 	and	r5,r5,r4
2008bd5c:	2804977a 	slli	r2,r5,29
2008bd60:	280a927a 	slli	r5,r5,9
2008bd64:	8822d0fa 	srli	r17,r17,3
2008bd68:	8401ffcc 	andi	r16,r16,2047
2008bd6c:	2808d33a 	srli	r4,r5,12
2008bd70:	1444b03a 	or	r2,r2,r17
2008bd74:	8401ffcc 	andi	r16,r16,2047
2008bd78:	800a953a 	slli	r5,r16,20
2008bd7c:	40c03fcc 	andi	r3,r8,255
2008bd80:	04000434 	movhi	r16,16
2008bd84:	180697fa 	slli	r3,r3,31
2008bd88:	843fffc4 	addi	r16,r16,-1
2008bd8c:	2420703a 	and	r16,r4,r16
2008bd90:	8160b03a 	or	r16,r16,r5
2008bd94:	80c6b03a 	or	r3,r16,r3
2008bd98:	dfc00417 	ldw	ra,16(sp)
2008bd9c:	dcc00317 	ldw	r19,12(sp)
2008bda0:	dc800217 	ldw	r18,8(sp)
2008bda4:	dc400117 	ldw	r17,4(sp)
2008bda8:	dc000017 	ldw	r16,0(sp)
2008bdac:	dec00504 	addi	sp,sp,20
2008bdb0:	f800283a 	ret
2008bdb4:	0101ffc4 	movi	r4,2047
2008bdb8:	813fd626 	beq	r16,r4,2008bd14 <__flash_rwdata_start+0xffffa3e4>
2008bdbc:	18c02034 	orhi	r3,r3,128
2008bdc0:	01000e04 	movi	r4,56
2008bdc4:	2080a416 	blt	r4,r2,2008c058 <__subdf3+0x3d0>
2008bdc8:	010007c4 	movi	r4,31
2008bdcc:	2080c716 	blt	r4,r2,2008c0ec <__subdf3+0x464>
2008bdd0:	01000804 	movi	r4,32
2008bdd4:	2089c83a 	sub	r4,r4,r2
2008bdd8:	1910983a 	sll	r8,r3,r4
2008bddc:	308ed83a 	srl	r7,r6,r2
2008bde0:	3108983a 	sll	r4,r6,r4
2008bde4:	1884d83a 	srl	r2,r3,r2
2008bde8:	41ccb03a 	or	r6,r8,r7
2008bdec:	2008c03a 	cmpne	r4,r4,zero
2008bdf0:	310cb03a 	or	r6,r6,r4
2008bdf4:	898dc83a 	sub	r6,r17,r6
2008bdf8:	89a3803a 	cmpltu	r17,r17,r6
2008bdfc:	288bc83a 	sub	r5,r5,r2
2008be00:	2c4bc83a 	sub	r5,r5,r17
2008be04:	3023883a 	mov	r17,r6
2008be08:	2880202c 	andhi	r2,r5,128
2008be0c:	10006b26 	beq	r2,zero,2008bfbc <__subdf3+0x334>
2008be10:	04c02034 	movhi	r19,128
2008be14:	9cffffc4 	addi	r19,r19,-1
2008be18:	2ce6703a 	and	r19,r5,r19
2008be1c:	98007c26 	beq	r19,zero,2008c010 <__subdf3+0x388>
2008be20:	9809883a 	mov	r4,r19
2008be24:	008c7540 	call	2008c754 <__clzsi2>
2008be28:	10fffe04 	addi	r3,r2,-8
2008be2c:	010007c4 	movi	r4,31
2008be30:	20c07d16 	blt	r4,r3,2008c028 <__subdf3+0x3a0>
2008be34:	01400a04 	movi	r5,40
2008be38:	2885c83a 	sub	r2,r5,r2
2008be3c:	888ad83a 	srl	r5,r17,r2
2008be40:	98e6983a 	sll	r19,r19,r3
2008be44:	88e2983a 	sll	r17,r17,r3
2008be48:	2ce6b03a 	or	r19,r5,r19
2008be4c:	1c007a16 	blt	r3,r16,2008c038 <__subdf3+0x3b0>
2008be50:	1c21c83a 	sub	r16,r3,r16
2008be54:	81400044 	addi	r5,r16,1
2008be58:	00c007c4 	movi	r3,31
2008be5c:	19409616 	blt	r3,r5,2008c0b8 <__subdf3+0x430>
2008be60:	1c21c83a 	sub	r16,r3,r16
2008be64:	8c08983a 	sll	r4,r17,r16
2008be68:	8946d83a 	srl	r3,r17,r5
2008be6c:	9c20983a 	sll	r16,r19,r16
2008be70:	2008c03a 	cmpne	r4,r4,zero
2008be74:	994ad83a 	srl	r5,r19,r5
2008be78:	1c06b03a 	or	r3,r3,r16
2008be7c:	1922b03a 	or	r17,r3,r4
2008be80:	0021883a 	mov	r16,zero
2008be84:	003fa306 	br	2008bd14 <__flash_rwdata_start+0xffffa3e4>
2008be88:	2880202c 	andhi	r2,r5,128
2008be8c:	9200004c 	andi	r8,r18,1
2008be90:	103fac1e 	bne	r2,zero,2008bd44 <__flash_rwdata_start+0xffffa414>
2008be94:	2804977a 	slli	r2,r5,29
2008be98:	8822d0fa 	srli	r17,r17,3
2008be9c:	00c1ffc4 	movi	r3,2047
2008bea0:	280ad0fa 	srli	r5,r5,3
2008bea4:	1444b03a 	or	r2,r2,r17
2008bea8:	80c02726 	beq	r16,r3,2008bf48 <__subdf3+0x2c0>
2008beac:	01000434 	movhi	r4,16
2008beb0:	213fffc4 	addi	r4,r4,-1
2008beb4:	80e0703a 	and	r16,r16,r3
2008beb8:	2908703a 	and	r4,r5,r4
2008bebc:	003fad06 	br	2008bd74 <__flash_rwdata_start+0xffffa444>
2008bec0:	0080690e 	bge	zero,r2,2008c068 <__subdf3+0x3e0>
2008bec4:	50002f26 	beq	r10,zero,2008bf84 <__subdf3+0x2fc>
2008bec8:	0101ffc4 	movi	r4,2047
2008becc:	813f9126 	beq	r16,r4,2008bd14 <__flash_rwdata_start+0xffffa3e4>
2008bed0:	18c02034 	orhi	r3,r3,128
2008bed4:	01000e04 	movi	r4,56
2008bed8:	2080b00e 	bge	r4,r2,2008c19c <__subdf3+0x514>
2008bedc:	198cb03a 	or	r6,r3,r6
2008bee0:	300ec03a 	cmpne	r7,r6,zero
2008bee4:	0005883a 	mov	r2,zero
2008bee8:	3c4f883a 	add	r7,r7,r17
2008beec:	3c63803a 	cmpltu	r17,r7,r17
2008bef0:	114b883a 	add	r5,r2,r5
2008bef4:	2c4b883a 	add	r5,r5,r17
2008bef8:	3823883a 	mov	r17,r7
2008befc:	2880202c 	andhi	r2,r5,128
2008bf00:	10002e26 	beq	r2,zero,2008bfbc <__subdf3+0x334>
2008bf04:	84000044 	addi	r16,r16,1
2008bf08:	0081ffc4 	movi	r2,2047
2008bf0c:	8080de26 	beq	r16,r2,2008c288 <__subdf3+0x600>
2008bf10:	00bfe034 	movhi	r2,65408
2008bf14:	10bfffc4 	addi	r2,r2,-1
2008bf18:	288a703a 	and	r5,r5,r2
2008bf1c:	880cd07a 	srli	r6,r17,1
2008bf20:	280897fa 	slli	r4,r5,31
2008bf24:	88c0004c 	andi	r3,r17,1
2008bf28:	30e2b03a 	or	r17,r6,r3
2008bf2c:	280ad07a 	srli	r5,r5,1
2008bf30:	8922b03a 	or	r17,r17,r4
2008bf34:	003f7706 	br	2008bd14 <__flash_rwdata_start+0xffffa3e4>
2008bf38:	1984b03a 	or	r2,r3,r6
2008bf3c:	103f6e26 	beq	r2,zero,2008bcf8 <__flash_rwdata_start+0xffffa3c8>
2008bf40:	39c03fcc 	andi	r7,r7,255
2008bf44:	003f6d06 	br	2008bcfc <__flash_rwdata_start+0xffffa3cc>
2008bf48:	1146b03a 	or	r3,r2,r5
2008bf4c:	18003f26 	beq	r3,zero,2008c04c <__subdf3+0x3c4>
2008bf50:	00c00434 	movhi	r3,16
2008bf54:	29000234 	orhi	r4,r5,8
2008bf58:	18ffffc4 	addi	r3,r3,-1
2008bf5c:	20c8703a 	and	r4,r4,r3
2008bf60:	003f8406 	br	2008bd74 <__flash_rwdata_start+0xffffa444>
2008bf64:	10bfffc4 	addi	r2,r2,-1
2008bf68:	1000501e 	bne	r2,zero,2008c0ac <__subdf3+0x424>
2008bf6c:	898fc83a 	sub	r7,r17,r6
2008bf70:	89e3803a 	cmpltu	r17,r17,r7
2008bf74:	28cbc83a 	sub	r5,r5,r3
2008bf78:	2c4bc83a 	sub	r5,r5,r17
2008bf7c:	3823883a 	mov	r17,r7
2008bf80:	003fa106 	br	2008be08 <__flash_rwdata_start+0xffffa4d8>
2008bf84:	1988b03a 	or	r4,r3,r6
2008bf88:	203f6226 	beq	r4,zero,2008bd14 <__flash_rwdata_start+0xffffa3e4>
2008bf8c:	10bfffc4 	addi	r2,r2,-1
2008bf90:	10009b1e 	bne	r2,zero,2008c200 <__subdf3+0x578>
2008bf94:	344d883a 	add	r6,r6,r17
2008bf98:	3463803a 	cmpltu	r17,r6,r17
2008bf9c:	194b883a 	add	r5,r3,r5
2008bfa0:	2c4b883a 	add	r5,r5,r17
2008bfa4:	3023883a 	mov	r17,r6
2008bfa8:	003fd406 	br	2008befc <__flash_rwdata_start+0xffffa5cc>
2008bfac:	1106b03a 	or	r3,r2,r4
2008bfb0:	1800b426 	beq	r3,zero,2008c284 <__subdf3+0x5fc>
2008bfb4:	100b883a 	mov	r5,r2
2008bfb8:	2023883a 	mov	r17,r4
2008bfbc:	888001cc 	andi	r2,r17,7
2008bfc0:	103f561e 	bne	r2,zero,2008bd1c <__flash_rwdata_start+0xffffa3ec>
2008bfc4:	9200004c 	andi	r8,r18,1
2008bfc8:	003fb206 	br	2008be94 <__flash_rwdata_start+0xffffa564>
2008bfcc:	1000531e 	bne	r2,zero,2008c11c <__subdf3+0x494>
2008bfd0:	80800044 	addi	r2,r16,1
2008bfd4:	1081ffcc 	andi	r2,r2,2047
2008bfd8:	01000044 	movi	r4,1
2008bfdc:	2080a00e 	bge	r4,r2,2008c260 <__subdf3+0x5d8>
2008bfe0:	8985c83a 	sub	r2,r17,r6
2008bfe4:	8889803a 	cmpltu	r4,r17,r2
2008bfe8:	28e7c83a 	sub	r19,r5,r3
2008bfec:	9927c83a 	sub	r19,r19,r4
2008bff0:	9900202c 	andhi	r4,r19,128
2008bff4:	20006226 	beq	r4,zero,2008c180 <__subdf3+0x4f8>
2008bff8:	3463c83a 	sub	r17,r6,r17
2008bffc:	194bc83a 	sub	r5,r3,r5
2008c000:	344d803a 	cmpltu	r6,r6,r17
2008c004:	29a7c83a 	sub	r19,r5,r6
2008c008:	3825883a 	mov	r18,r7
2008c00c:	983f841e 	bne	r19,zero,2008be20 <__flash_rwdata_start+0xffffa4f0>
2008c010:	8809883a 	mov	r4,r17
2008c014:	008c7540 	call	2008c754 <__clzsi2>
2008c018:	10800804 	addi	r2,r2,32
2008c01c:	10fffe04 	addi	r3,r2,-8
2008c020:	010007c4 	movi	r4,31
2008c024:	20ff830e 	bge	r4,r3,2008be34 <__flash_rwdata_start+0xffffa504>
2008c028:	14fff604 	addi	r19,r2,-40
2008c02c:	8ce6983a 	sll	r19,r17,r19
2008c030:	0023883a 	mov	r17,zero
2008c034:	1c3f860e 	bge	r3,r16,2008be50 <__flash_rwdata_start+0xffffa520>
2008c038:	017fe034 	movhi	r5,65408
2008c03c:	297fffc4 	addi	r5,r5,-1
2008c040:	80e1c83a 	sub	r16,r16,r3
2008c044:	994a703a 	and	r5,r19,r5
2008c048:	003f3206 	br	2008bd14 <__flash_rwdata_start+0xffffa3e4>
2008c04c:	0009883a 	mov	r4,zero
2008c050:	0005883a 	mov	r2,zero
2008c054:	003f4706 	br	2008bd74 <__flash_rwdata_start+0xffffa444>
2008c058:	198cb03a 	or	r6,r3,r6
2008c05c:	300cc03a 	cmpne	r6,r6,zero
2008c060:	0005883a 	mov	r2,zero
2008c064:	003f6306 	br	2008bdf4 <__flash_rwdata_start+0xffffa4c4>
2008c068:	10009d1e 	bne	r2,zero,2008c2e0 <__subdf3+0x658>
2008c06c:	81c00044 	addi	r7,r16,1
2008c070:	3881ffcc 	andi	r2,r7,2047
2008c074:	02400044 	movi	r9,1
2008c078:	4880680e 	bge	r9,r2,2008c21c <__subdf3+0x594>
2008c07c:	0081ffc4 	movi	r2,2047
2008c080:	3880ae26 	beq	r7,r2,2008c33c <__subdf3+0x6b4>
2008c084:	344d883a 	add	r6,r6,r17
2008c088:	3463803a 	cmpltu	r17,r6,r17
2008c08c:	194b883a 	add	r5,r3,r5
2008c090:	2c4b883a 	add	r5,r5,r17
2008c094:	282297fa 	slli	r17,r5,31
2008c098:	300cd07a 	srli	r6,r6,1
2008c09c:	280ad07a 	srli	r5,r5,1
2008c0a0:	3821883a 	mov	r16,r7
2008c0a4:	89a2b03a 	or	r17,r17,r6
2008c0a8:	003f1a06 	br	2008bd14 <__flash_rwdata_start+0xffffa3e4>
2008c0ac:	0101ffc4 	movi	r4,2047
2008c0b0:	813f431e 	bne	r16,r4,2008bdc0 <__flash_rwdata_start+0xffffa490>
2008c0b4:	003f1706 	br	2008bd14 <__flash_rwdata_start+0xffffa3e4>
2008c0b8:	80bff844 	addi	r2,r16,-31
2008c0bc:	00c00804 	movi	r3,32
2008c0c0:	9884d83a 	srl	r2,r19,r2
2008c0c4:	28c05126 	beq	r5,r3,2008c20c <__subdf3+0x584>
2008c0c8:	00c00fc4 	movi	r3,63
2008c0cc:	1c21c83a 	sub	r16,r3,r16
2008c0d0:	9c26983a 	sll	r19,r19,r16
2008c0d4:	9c62b03a 	or	r17,r19,r17
2008c0d8:	8822c03a 	cmpne	r17,r17,zero
2008c0dc:	88a2b03a 	or	r17,r17,r2
2008c0e0:	000b883a 	mov	r5,zero
2008c0e4:	0021883a 	mov	r16,zero
2008c0e8:	003fb406 	br	2008bfbc <__flash_rwdata_start+0xffffa68c>
2008c0ec:	113ff804 	addi	r4,r2,-32
2008c0f0:	01c00804 	movi	r7,32
2008c0f4:	1908d83a 	srl	r4,r3,r4
2008c0f8:	11c04626 	beq	r2,r7,2008c214 <__subdf3+0x58c>
2008c0fc:	01c01004 	movi	r7,64
2008c100:	3885c83a 	sub	r2,r7,r2
2008c104:	1884983a 	sll	r2,r3,r2
2008c108:	118cb03a 	or	r6,r2,r6
2008c10c:	300cc03a 	cmpne	r6,r6,zero
2008c110:	310cb03a 	or	r6,r6,r4
2008c114:	0005883a 	mov	r2,zero
2008c118:	003f3606 	br	2008bdf4 <__flash_rwdata_start+0xffffa4c4>
2008c11c:	80002b26 	beq	r16,zero,2008c1cc <__subdf3+0x544>
2008c120:	0101ffc4 	movi	r4,2047
2008c124:	51006926 	beq	r10,r4,2008c2cc <__subdf3+0x644>
2008c128:	0085c83a 	sub	r2,zero,r2
2008c12c:	29402034 	orhi	r5,r5,128
2008c130:	01000e04 	movi	r4,56
2008c134:	20807d16 	blt	r4,r2,2008c32c <__subdf3+0x6a4>
2008c138:	010007c4 	movi	r4,31
2008c13c:	2080d916 	blt	r4,r2,2008c4a4 <__subdf3+0x81c>
2008c140:	01000804 	movi	r4,32
2008c144:	2089c83a 	sub	r4,r4,r2
2008c148:	2912983a 	sll	r9,r5,r4
2008c14c:	8890d83a 	srl	r8,r17,r2
2008c150:	8908983a 	sll	r4,r17,r4
2008c154:	2884d83a 	srl	r2,r5,r2
2008c158:	4a22b03a 	or	r17,r9,r8
2008c15c:	2008c03a 	cmpne	r4,r4,zero
2008c160:	8922b03a 	or	r17,r17,r4
2008c164:	3463c83a 	sub	r17,r6,r17
2008c168:	1885c83a 	sub	r2,r3,r2
2008c16c:	344d803a 	cmpltu	r6,r6,r17
2008c170:	118bc83a 	sub	r5,r2,r6
2008c174:	5021883a 	mov	r16,r10
2008c178:	3825883a 	mov	r18,r7
2008c17c:	003f2206 	br	2008be08 <__flash_rwdata_start+0xffffa4d8>
2008c180:	9886b03a 	or	r3,r19,r2
2008c184:	18001c1e 	bne	r3,zero,2008c1f8 <__subdf3+0x570>
2008c188:	0011883a 	mov	r8,zero
2008c18c:	000b883a 	mov	r5,zero
2008c190:	0023883a 	mov	r17,zero
2008c194:	0021883a 	mov	r16,zero
2008c198:	003f3e06 	br	2008be94 <__flash_rwdata_start+0xffffa564>
2008c19c:	010007c4 	movi	r4,31
2008c1a0:	20803c16 	blt	r4,r2,2008c294 <__subdf3+0x60c>
2008c1a4:	01000804 	movi	r4,32
2008c1a8:	2089c83a 	sub	r4,r4,r2
2008c1ac:	1912983a 	sll	r9,r3,r4
2008c1b0:	308ed83a 	srl	r7,r6,r2
2008c1b4:	3108983a 	sll	r4,r6,r4
2008c1b8:	1884d83a 	srl	r2,r3,r2
2008c1bc:	49ceb03a 	or	r7,r9,r7
2008c1c0:	2008c03a 	cmpne	r4,r4,zero
2008c1c4:	390eb03a 	or	r7,r7,r4
2008c1c8:	003f4706 	br	2008bee8 <__flash_rwdata_start+0xffffa5b8>
2008c1cc:	2c48b03a 	or	r4,r5,r17
2008c1d0:	20003e26 	beq	r4,zero,2008c2cc <__subdf3+0x644>
2008c1d4:	0084303a 	nor	r2,zero,r2
2008c1d8:	10003a1e 	bne	r2,zero,2008c2c4 <__subdf3+0x63c>
2008c1dc:	3463c83a 	sub	r17,r6,r17
2008c1e0:	194bc83a 	sub	r5,r3,r5
2008c1e4:	344d803a 	cmpltu	r6,r6,r17
2008c1e8:	298bc83a 	sub	r5,r5,r6
2008c1ec:	5021883a 	mov	r16,r10
2008c1f0:	3825883a 	mov	r18,r7
2008c1f4:	003f0406 	br	2008be08 <__flash_rwdata_start+0xffffa4d8>
2008c1f8:	1023883a 	mov	r17,r2
2008c1fc:	003f0706 	br	2008be1c <__flash_rwdata_start+0xffffa4ec>
2008c200:	0101ffc4 	movi	r4,2047
2008c204:	813f331e 	bne	r16,r4,2008bed4 <__flash_rwdata_start+0xffffa5a4>
2008c208:	003ec206 	br	2008bd14 <__flash_rwdata_start+0xffffa3e4>
2008c20c:	0027883a 	mov	r19,zero
2008c210:	003fb006 	br	2008c0d4 <__flash_rwdata_start+0xffffa7a4>
2008c214:	0005883a 	mov	r2,zero
2008c218:	003fbb06 	br	2008c108 <__flash_rwdata_start+0xffffa7d8>
2008c21c:	2c44b03a 	or	r2,r5,r17
2008c220:	80008b1e 	bne	r16,zero,2008c450 <__subdf3+0x7c8>
2008c224:	1000b526 	beq	r2,zero,2008c4fc <__subdf3+0x874>
2008c228:	1984b03a 	or	r2,r3,r6
2008c22c:	103eb926 	beq	r2,zero,2008bd14 <__flash_rwdata_start+0xffffa3e4>
2008c230:	3449883a 	add	r4,r6,r17
2008c234:	2463803a 	cmpltu	r17,r4,r17
2008c238:	194b883a 	add	r5,r3,r5
2008c23c:	2c4b883a 	add	r5,r5,r17
2008c240:	2880202c 	andhi	r2,r5,128
2008c244:	2023883a 	mov	r17,r4
2008c248:	103f5c26 	beq	r2,zero,2008bfbc <__flash_rwdata_start+0xffffa68c>
2008c24c:	00bfe034 	movhi	r2,65408
2008c250:	10bfffc4 	addi	r2,r2,-1
2008c254:	4821883a 	mov	r16,r9
2008c258:	288a703a 	and	r5,r5,r2
2008c25c:	003ead06 	br	2008bd14 <__flash_rwdata_start+0xffffa3e4>
2008c260:	2c44b03a 	or	r2,r5,r17
2008c264:	8000291e 	bne	r16,zero,2008c30c <__subdf3+0x684>
2008c268:	10004f1e 	bne	r2,zero,2008c3a8 <__subdf3+0x720>
2008c26c:	1984b03a 	or	r2,r3,r6
2008c270:	10000426 	beq	r2,zero,2008c284 <__subdf3+0x5fc>
2008c274:	180b883a 	mov	r5,r3
2008c278:	3023883a 	mov	r17,r6
2008c27c:	3825883a 	mov	r18,r7
2008c280:	003ea406 	br	2008bd14 <__flash_rwdata_start+0xffffa3e4>
2008c284:	0011883a 	mov	r8,zero
2008c288:	000b883a 	mov	r5,zero
2008c28c:	0023883a 	mov	r17,zero
2008c290:	003f0006 	br	2008be94 <__flash_rwdata_start+0xffffa564>
2008c294:	11fff804 	addi	r7,r2,-32
2008c298:	19c8d83a 	srl	r4,r3,r7
2008c29c:	01c00804 	movi	r7,32
2008c2a0:	11c07e26 	beq	r2,r7,2008c49c <__subdf3+0x814>
2008c2a4:	01c01004 	movi	r7,64
2008c2a8:	3885c83a 	sub	r2,r7,r2
2008c2ac:	1884983a 	sll	r2,r3,r2
2008c2b0:	118cb03a 	or	r6,r2,r6
2008c2b4:	300ec03a 	cmpne	r7,r6,zero
2008c2b8:	390eb03a 	or	r7,r7,r4
2008c2bc:	0005883a 	mov	r2,zero
2008c2c0:	003f0906 	br	2008bee8 <__flash_rwdata_start+0xffffa5b8>
2008c2c4:	0101ffc4 	movi	r4,2047
2008c2c8:	513f991e 	bne	r10,r4,2008c130 <__flash_rwdata_start+0xffffa800>
2008c2cc:	180b883a 	mov	r5,r3
2008c2d0:	3023883a 	mov	r17,r6
2008c2d4:	5021883a 	mov	r16,r10
2008c2d8:	3825883a 	mov	r18,r7
2008c2dc:	003e8d06 	br	2008bd14 <__flash_rwdata_start+0xffffa3e4>
2008c2e0:	80001a1e 	bne	r16,zero,2008c34c <__subdf3+0x6c4>
2008c2e4:	2c48b03a 	or	r4,r5,r17
2008c2e8:	20005526 	beq	r4,zero,2008c440 <__subdf3+0x7b8>
2008c2ec:	0084303a 	nor	r2,zero,r2
2008c2f0:	1000511e 	bne	r2,zero,2008c438 <__subdf3+0x7b0>
2008c2f4:	89a3883a 	add	r17,r17,r6
2008c2f8:	194b883a 	add	r5,r3,r5
2008c2fc:	898d803a 	cmpltu	r6,r17,r6
2008c300:	298b883a 	add	r5,r5,r6
2008c304:	5021883a 	mov	r16,r10
2008c308:	003efc06 	br	2008befc <__flash_rwdata_start+0xffffa5cc>
2008c30c:	1000341e 	bne	r2,zero,2008c3e0 <__subdf3+0x758>
2008c310:	1984b03a 	or	r2,r3,r6
2008c314:	10006f26 	beq	r2,zero,2008c4d4 <__subdf3+0x84c>
2008c318:	180b883a 	mov	r5,r3
2008c31c:	3023883a 	mov	r17,r6
2008c320:	3825883a 	mov	r18,r7
2008c324:	0401ffc4 	movi	r16,2047
2008c328:	003e7a06 	br	2008bd14 <__flash_rwdata_start+0xffffa3e4>
2008c32c:	2c62b03a 	or	r17,r5,r17
2008c330:	8822c03a 	cmpne	r17,r17,zero
2008c334:	0005883a 	mov	r2,zero
2008c338:	003f8a06 	br	2008c164 <__flash_rwdata_start+0xffffa834>
2008c33c:	3821883a 	mov	r16,r7
2008c340:	000b883a 	mov	r5,zero
2008c344:	0023883a 	mov	r17,zero
2008c348:	003ed206 	br	2008be94 <__flash_rwdata_start+0xffffa564>
2008c34c:	0101ffc4 	movi	r4,2047
2008c350:	51003b26 	beq	r10,r4,2008c440 <__subdf3+0x7b8>
2008c354:	0085c83a 	sub	r2,zero,r2
2008c358:	29402034 	orhi	r5,r5,128
2008c35c:	01000e04 	movi	r4,56
2008c360:	20806216 	blt	r4,r2,2008c4ec <__subdf3+0x864>
2008c364:	010007c4 	movi	r4,31
2008c368:	20806b16 	blt	r4,r2,2008c518 <__subdf3+0x890>
2008c36c:	01000804 	movi	r4,32
2008c370:	2089c83a 	sub	r4,r4,r2
2008c374:	2912983a 	sll	r9,r5,r4
2008c378:	888ed83a 	srl	r7,r17,r2
2008c37c:	8908983a 	sll	r4,r17,r4
2008c380:	2884d83a 	srl	r2,r5,r2
2008c384:	49e2b03a 	or	r17,r9,r7
2008c388:	2008c03a 	cmpne	r4,r4,zero
2008c38c:	8922b03a 	or	r17,r17,r4
2008c390:	89a3883a 	add	r17,r17,r6
2008c394:	10c5883a 	add	r2,r2,r3
2008c398:	898d803a 	cmpltu	r6,r17,r6
2008c39c:	118b883a 	add	r5,r2,r6
2008c3a0:	5021883a 	mov	r16,r10
2008c3a4:	003ed506 	br	2008befc <__flash_rwdata_start+0xffffa5cc>
2008c3a8:	1984b03a 	or	r2,r3,r6
2008c3ac:	103e5926 	beq	r2,zero,2008bd14 <__flash_rwdata_start+0xffffa3e4>
2008c3b0:	8989c83a 	sub	r4,r17,r6
2008c3b4:	8911803a 	cmpltu	r8,r17,r4
2008c3b8:	28c5c83a 	sub	r2,r5,r3
2008c3bc:	1205c83a 	sub	r2,r2,r8
2008c3c0:	1200202c 	andhi	r8,r2,128
2008c3c4:	403ef926 	beq	r8,zero,2008bfac <__flash_rwdata_start+0xffffa67c>
2008c3c8:	3463c83a 	sub	r17,r6,r17
2008c3cc:	194bc83a 	sub	r5,r3,r5
2008c3d0:	344d803a 	cmpltu	r6,r6,r17
2008c3d4:	298bc83a 	sub	r5,r5,r6
2008c3d8:	3825883a 	mov	r18,r7
2008c3dc:	003e4d06 	br	2008bd14 <__flash_rwdata_start+0xffffa3e4>
2008c3e0:	1984b03a 	or	r2,r3,r6
2008c3e4:	10002b26 	beq	r2,zero,2008c494 <__subdf3+0x80c>
2008c3e8:	2808d0fa 	srli	r4,r5,3
2008c3ec:	8822d0fa 	srli	r17,r17,3
2008c3f0:	280a977a 	slli	r5,r5,29
2008c3f4:	2080022c 	andhi	r2,r4,8
2008c3f8:	2c62b03a 	or	r17,r5,r17
2008c3fc:	10000826 	beq	r2,zero,2008c420 <__subdf3+0x798>
2008c400:	1810d0fa 	srli	r8,r3,3
2008c404:	4080022c 	andhi	r2,r8,8
2008c408:	1000051e 	bne	r2,zero,2008c420 <__subdf3+0x798>
2008c40c:	300cd0fa 	srli	r6,r6,3
2008c410:	1804977a 	slli	r2,r3,29
2008c414:	4009883a 	mov	r4,r8
2008c418:	3825883a 	mov	r18,r7
2008c41c:	11a2b03a 	or	r17,r2,r6
2008c420:	880ad77a 	srli	r5,r17,29
2008c424:	200890fa 	slli	r4,r4,3
2008c428:	882290fa 	slli	r17,r17,3
2008c42c:	0401ffc4 	movi	r16,2047
2008c430:	290ab03a 	or	r5,r5,r4
2008c434:	003e3706 	br	2008bd14 <__flash_rwdata_start+0xffffa3e4>
2008c438:	0101ffc4 	movi	r4,2047
2008c43c:	513fc71e 	bne	r10,r4,2008c35c <__flash_rwdata_start+0xffffaa2c>
2008c440:	180b883a 	mov	r5,r3
2008c444:	3023883a 	mov	r17,r6
2008c448:	5021883a 	mov	r16,r10
2008c44c:	003e3106 	br	2008bd14 <__flash_rwdata_start+0xffffa3e4>
2008c450:	10002d26 	beq	r2,zero,2008c508 <__subdf3+0x880>
2008c454:	1984b03a 	or	r2,r3,r6
2008c458:	10000e26 	beq	r2,zero,2008c494 <__subdf3+0x80c>
2008c45c:	2808d0fa 	srli	r4,r5,3
2008c460:	8822d0fa 	srli	r17,r17,3
2008c464:	280a977a 	slli	r5,r5,29
2008c468:	2080022c 	andhi	r2,r4,8
2008c46c:	2c62b03a 	or	r17,r5,r17
2008c470:	103feb26 	beq	r2,zero,2008c420 <__flash_rwdata_start+0xffffaaf0>
2008c474:	180ed0fa 	srli	r7,r3,3
2008c478:	3880022c 	andhi	r2,r7,8
2008c47c:	103fe81e 	bne	r2,zero,2008c420 <__flash_rwdata_start+0xffffaaf0>
2008c480:	300cd0fa 	srli	r6,r6,3
2008c484:	1804977a 	slli	r2,r3,29
2008c488:	3809883a 	mov	r4,r7
2008c48c:	11a2b03a 	or	r17,r2,r6
2008c490:	003fe306 	br	2008c420 <__flash_rwdata_start+0xffffaaf0>
2008c494:	0401ffc4 	movi	r16,2047
2008c498:	003e1e06 	br	2008bd14 <__flash_rwdata_start+0xffffa3e4>
2008c49c:	0005883a 	mov	r2,zero
2008c4a0:	003f8306 	br	2008c2b0 <__flash_rwdata_start+0xffffa980>
2008c4a4:	113ff804 	addi	r4,r2,-32
2008c4a8:	02000804 	movi	r8,32
2008c4ac:	2908d83a 	srl	r4,r5,r4
2008c4b0:	12002526 	beq	r2,r8,2008c548 <__subdf3+0x8c0>
2008c4b4:	02001004 	movi	r8,64
2008c4b8:	4085c83a 	sub	r2,r8,r2
2008c4bc:	288a983a 	sll	r5,r5,r2
2008c4c0:	2c62b03a 	or	r17,r5,r17
2008c4c4:	8822c03a 	cmpne	r17,r17,zero
2008c4c8:	8922b03a 	or	r17,r17,r4
2008c4cc:	0005883a 	mov	r2,zero
2008c4d0:	003f2406 	br	2008c164 <__flash_rwdata_start+0xffffa834>
2008c4d4:	01402034 	movhi	r5,128
2008c4d8:	0011883a 	mov	r8,zero
2008c4dc:	297fffc4 	addi	r5,r5,-1
2008c4e0:	047ffe04 	movi	r17,-8
2008c4e4:	0401ffc4 	movi	r16,2047
2008c4e8:	003e6a06 	br	2008be94 <__flash_rwdata_start+0xffffa564>
2008c4ec:	2c62b03a 	or	r17,r5,r17
2008c4f0:	8822c03a 	cmpne	r17,r17,zero
2008c4f4:	0005883a 	mov	r2,zero
2008c4f8:	003fa506 	br	2008c390 <__flash_rwdata_start+0xffffaa60>
2008c4fc:	180b883a 	mov	r5,r3
2008c500:	3023883a 	mov	r17,r6
2008c504:	003e0306 	br	2008bd14 <__flash_rwdata_start+0xffffa3e4>
2008c508:	180b883a 	mov	r5,r3
2008c50c:	3023883a 	mov	r17,r6
2008c510:	0401ffc4 	movi	r16,2047
2008c514:	003dff06 	br	2008bd14 <__flash_rwdata_start+0xffffa3e4>
2008c518:	113ff804 	addi	r4,r2,-32
2008c51c:	01c00804 	movi	r7,32
2008c520:	2908d83a 	srl	r4,r5,r4
2008c524:	11c00a26 	beq	r2,r7,2008c550 <__subdf3+0x8c8>
2008c528:	01c01004 	movi	r7,64
2008c52c:	3885c83a 	sub	r2,r7,r2
2008c530:	288a983a 	sll	r5,r5,r2
2008c534:	2c62b03a 	or	r17,r5,r17
2008c538:	8822c03a 	cmpne	r17,r17,zero
2008c53c:	8922b03a 	or	r17,r17,r4
2008c540:	0005883a 	mov	r2,zero
2008c544:	003f9206 	br	2008c390 <__flash_rwdata_start+0xffffaa60>
2008c548:	000b883a 	mov	r5,zero
2008c54c:	003fdc06 	br	2008c4c0 <__flash_rwdata_start+0xffffab90>
2008c550:	000b883a 	mov	r5,zero
2008c554:	003ff706 	br	2008c534 <__flash_rwdata_start+0xffffac04>

2008c558 <__fixdfsi>:
2008c558:	2806d53a 	srli	r3,r5,20
2008c55c:	00800434 	movhi	r2,16
2008c560:	10bfffc4 	addi	r2,r2,-1
2008c564:	18c1ffcc 	andi	r3,r3,2047
2008c568:	0180ff84 	movi	r6,1022
2008c56c:	2884703a 	and	r2,r5,r2
2008c570:	280ad7fa 	srli	r5,r5,31
2008c574:	30c0130e 	bge	r6,r3,2008c5c4 <__fixdfsi+0x6c>
2008c578:	01810744 	movi	r6,1053
2008c57c:	30c00d16 	blt	r6,r3,2008c5b4 <__fixdfsi+0x5c>
2008c580:	01810cc4 	movi	r6,1075
2008c584:	30cdc83a 	sub	r6,r6,r3
2008c588:	01c007c4 	movi	r7,31
2008c58c:	10800434 	orhi	r2,r2,16
2008c590:	39800e0e 	bge	r7,r6,2008c5cc <__fixdfsi+0x74>
2008c594:	010104c4 	movi	r4,1043
2008c598:	20c7c83a 	sub	r3,r4,r3
2008c59c:	10c6d83a 	srl	r3,r2,r3
2008c5a0:	29403fcc 	andi	r5,r5,255
2008c5a4:	0145c83a 	sub	r2,zero,r5
2008c5a8:	1884f03a 	xor	r2,r3,r2
2008c5ac:	1145883a 	add	r2,r2,r5
2008c5b0:	f800283a 	ret
2008c5b4:	00a00034 	movhi	r2,32768
2008c5b8:	10bfffc4 	addi	r2,r2,-1
2008c5bc:	2885883a 	add	r2,r5,r2
2008c5c0:	f800283a 	ret
2008c5c4:	0005883a 	mov	r2,zero
2008c5c8:	f800283a 	ret
2008c5cc:	18fefb44 	addi	r3,r3,-1043
2008c5d0:	2188d83a 	srl	r4,r4,r6
2008c5d4:	10c6983a 	sll	r3,r2,r3
2008c5d8:	20c6b03a 	or	r3,r4,r3
2008c5dc:	003ff006 	br	2008c5a0 <__flash_rwdata_start+0xffffac70>

2008c5e0 <__floatsidf>:
2008c5e0:	defffd04 	addi	sp,sp,-12
2008c5e4:	dc400115 	stw	r17,4(sp)
2008c5e8:	dfc00215 	stw	ra,8(sp)
2008c5ec:	dc000015 	stw	r16,0(sp)
2008c5f0:	2023883a 	mov	r17,r4
2008c5f4:	20001426 	beq	r4,zero,2008c648 <__floatsidf+0x68>
2008c5f8:	2020d7fa 	srli	r16,r4,31
2008c5fc:	80000126 	beq	r16,zero,2008c604 <__floatsidf+0x24>
2008c600:	0123c83a 	sub	r17,zero,r4
2008c604:	8809883a 	mov	r4,r17
2008c608:	008c7540 	call	2008c754 <__clzsi2>
2008c60c:	01410784 	movi	r5,1054
2008c610:	00c00284 	movi	r3,10
2008c614:	288bc83a 	sub	r5,r5,r2
2008c618:	18801c16 	blt	r3,r2,2008c68c <__floatsidf+0xac>
2008c61c:	00c002c4 	movi	r3,11
2008c620:	1887c83a 	sub	r3,r3,r2
2008c624:	88c8d83a 	srl	r4,r17,r3
2008c628:	00c00434 	movhi	r3,16
2008c62c:	18ffffc4 	addi	r3,r3,-1
2008c630:	10800544 	addi	r2,r2,21
2008c634:	20c8703a 	and	r4,r4,r3
2008c638:	8884983a 	sll	r2,r17,r2
2008c63c:	28c1ffcc 	andi	r3,r5,2047
2008c640:	800d883a 	mov	r6,r16
2008c644:	00000406 	br	2008c658 <__floatsidf+0x78>
2008c648:	000d883a 	mov	r6,zero
2008c64c:	0007883a 	mov	r3,zero
2008c650:	0009883a 	mov	r4,zero
2008c654:	0005883a 	mov	r2,zero
2008c658:	180a953a 	slli	r5,r3,20
2008c65c:	31803fcc 	andi	r6,r6,255
2008c660:	00c00434 	movhi	r3,16
2008c664:	300c97fa 	slli	r6,r6,31
2008c668:	18ffffc4 	addi	r3,r3,-1
2008c66c:	20c6703a 	and	r3,r4,r3
2008c670:	1946b03a 	or	r3,r3,r5
2008c674:	1986b03a 	or	r3,r3,r6
2008c678:	dfc00217 	ldw	ra,8(sp)
2008c67c:	dc400117 	ldw	r17,4(sp)
2008c680:	dc000017 	ldw	r16,0(sp)
2008c684:	dec00304 	addi	sp,sp,12
2008c688:	f800283a 	ret
2008c68c:	10fffd44 	addi	r3,r2,-11
2008c690:	88c8983a 	sll	r4,r17,r3
2008c694:	00800434 	movhi	r2,16
2008c698:	10bfffc4 	addi	r2,r2,-1
2008c69c:	2088703a 	and	r4,r4,r2
2008c6a0:	28c1ffcc 	andi	r3,r5,2047
2008c6a4:	800d883a 	mov	r6,r16
2008c6a8:	0005883a 	mov	r2,zero
2008c6ac:	003fea06 	br	2008c658 <__flash_rwdata_start+0xffffad28>

2008c6b0 <__floatunsidf>:
2008c6b0:	defffe04 	addi	sp,sp,-8
2008c6b4:	dc000015 	stw	r16,0(sp)
2008c6b8:	dfc00115 	stw	ra,4(sp)
2008c6bc:	2021883a 	mov	r16,r4
2008c6c0:	20001026 	beq	r4,zero,2008c704 <__floatunsidf+0x54>
2008c6c4:	008c7540 	call	2008c754 <__clzsi2>
2008c6c8:	01410784 	movi	r5,1054
2008c6cc:	100d883a 	mov	r6,r2
2008c6d0:	288bc83a 	sub	r5,r5,r2
2008c6d4:	00800284 	movi	r2,10
2008c6d8:	11801616 	blt	r2,r6,2008c734 <__floatunsidf+0x84>
2008c6dc:	008002c4 	movi	r2,11
2008c6e0:	1185c83a 	sub	r2,r2,r6
2008c6e4:	8084d83a 	srl	r2,r16,r2
2008c6e8:	00c00434 	movhi	r3,16
2008c6ec:	31c00544 	addi	r7,r6,21
2008c6f0:	18ffffc4 	addi	r3,r3,-1
2008c6f4:	81e0983a 	sll	r16,r16,r7
2008c6f8:	10cc703a 	and	r6,r2,r3
2008c6fc:	2941ffcc 	andi	r5,r5,2047
2008c700:	00000206 	br	2008c70c <__floatunsidf+0x5c>
2008c704:	000b883a 	mov	r5,zero
2008c708:	000d883a 	mov	r6,zero
2008c70c:	280a953a 	slli	r5,r5,20
2008c710:	00c00434 	movhi	r3,16
2008c714:	18ffffc4 	addi	r3,r3,-1
2008c718:	30c6703a 	and	r3,r6,r3
2008c71c:	8005883a 	mov	r2,r16
2008c720:	1946b03a 	or	r3,r3,r5
2008c724:	dfc00117 	ldw	ra,4(sp)
2008c728:	dc000017 	ldw	r16,0(sp)
2008c72c:	dec00204 	addi	sp,sp,8
2008c730:	f800283a 	ret
2008c734:	31bffd44 	addi	r6,r6,-11
2008c738:	818c983a 	sll	r6,r16,r6
2008c73c:	00800434 	movhi	r2,16
2008c740:	10bfffc4 	addi	r2,r2,-1
2008c744:	2941ffcc 	andi	r5,r5,2047
2008c748:	0021883a 	mov	r16,zero
2008c74c:	308c703a 	and	r6,r6,r2
2008c750:	003fee06 	br	2008c70c <__flash_rwdata_start+0xffffaddc>

2008c754 <__clzsi2>:
2008c754:	00bfffd4 	movui	r2,65535
2008c758:	11000b36 	bltu	r2,r4,2008c788 <__clzsi2+0x34>
2008c75c:	00803fc4 	movi	r2,255
2008c760:	1100122e 	bgeu	r2,r4,2008c7ac <__clzsi2+0x58>
2008c764:	00c00204 	movi	r3,8
2008c768:	01400604 	movi	r5,24
2008c76c:	20c8d83a 	srl	r4,r4,r3
2008c770:	00800034 	movhi	r2,0
2008c774:	10808c04 	addi	r2,r2,560
2008c778:	1109883a 	add	r4,r2,r4
2008c77c:	20800003 	ldbu	r2,0(r4)
2008c780:	2885c83a 	sub	r2,r5,r2
2008c784:	f800283a 	ret
2008c788:	00804034 	movhi	r2,256
2008c78c:	10bfffc4 	addi	r2,r2,-1
2008c790:	11000336 	bltu	r2,r4,2008c7a0 <__clzsi2+0x4c>
2008c794:	00c00404 	movi	r3,16
2008c798:	180b883a 	mov	r5,r3
2008c79c:	003ff306 	br	2008c76c <__flash_rwdata_start+0xffffae3c>
2008c7a0:	00c00604 	movi	r3,24
2008c7a4:	01400204 	movi	r5,8
2008c7a8:	003ff006 	br	2008c76c <__flash_rwdata_start+0xffffae3c>
2008c7ac:	0007883a 	mov	r3,zero
2008c7b0:	01400804 	movi	r5,32
2008c7b4:	003fed06 	br	2008c76c <__flash_rwdata_start+0xffffae3c>

2008c7b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2008c7b8:	defffe04 	addi	sp,sp,-8
2008c7bc:	dfc00115 	stw	ra,4(sp)
2008c7c0:	df000015 	stw	fp,0(sp)
2008c7c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2008c7c8:	00800034 	movhi	r2,0
2008c7cc:	10886904 	addi	r2,r2,8612
2008c7d0:	10800017 	ldw	r2,0(r2)
2008c7d4:	10000526 	beq	r2,zero,2008c7ec <alt_get_errno+0x34>
2008c7d8:	00800034 	movhi	r2,0
2008c7dc:	10886904 	addi	r2,r2,8612
2008c7e0:	10800017 	ldw	r2,0(r2)
2008c7e4:	103ee83a 	callr	r2
2008c7e8:	00000206 	br	2008c7f4 <alt_get_errno+0x3c>
2008c7ec:	00800034 	movhi	r2,0
2008c7f0:	10887404 	addi	r2,r2,8656
}
2008c7f4:	e037883a 	mov	sp,fp
2008c7f8:	dfc00117 	ldw	ra,4(sp)
2008c7fc:	df000017 	ldw	fp,0(sp)
2008c800:	dec00204 	addi	sp,sp,8
2008c804:	f800283a 	ret

2008c808 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
2008c808:	defffb04 	addi	sp,sp,-20
2008c80c:	dfc00415 	stw	ra,16(sp)
2008c810:	df000315 	stw	fp,12(sp)
2008c814:	df000304 	addi	fp,sp,12
2008c818:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
2008c81c:	e0bfff17 	ldw	r2,-4(fp)
2008c820:	10000616 	blt	r2,zero,2008c83c <close+0x34>
2008c824:	e0bfff17 	ldw	r2,-4(fp)
2008c828:	10c00324 	muli	r3,r2,12
2008c82c:	00800034 	movhi	r2,0
2008c830:	10839e04 	addi	r2,r2,3704
2008c834:	1885883a 	add	r2,r3,r2
2008c838:	00000106 	br	2008c840 <close+0x38>
2008c83c:	0005883a 	mov	r2,zero
2008c840:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
2008c844:	e0bffd17 	ldw	r2,-12(fp)
2008c848:	10001926 	beq	r2,zero,2008c8b0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
2008c84c:	e0bffd17 	ldw	r2,-12(fp)
2008c850:	10800017 	ldw	r2,0(r2)
2008c854:	10800417 	ldw	r2,16(r2)
2008c858:	10000626 	beq	r2,zero,2008c874 <close+0x6c>
2008c85c:	e0bffd17 	ldw	r2,-12(fp)
2008c860:	10800017 	ldw	r2,0(r2)
2008c864:	10800417 	ldw	r2,16(r2)
2008c868:	e13ffd17 	ldw	r4,-12(fp)
2008c86c:	103ee83a 	callr	r2
2008c870:	00000106 	br	2008c878 <close+0x70>
2008c874:	0005883a 	mov	r2,zero
2008c878:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
2008c87c:	e13fff17 	ldw	r4,-4(fp)
2008c880:	008cf040 	call	2008cf04 <alt_release_fd>
    if (rval < 0)
2008c884:	e0bffe17 	ldw	r2,-8(fp)
2008c888:	1000070e 	bge	r2,zero,2008c8a8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
2008c88c:	008c7b80 	call	2008c7b8 <alt_get_errno>
2008c890:	1007883a 	mov	r3,r2
2008c894:	e0bffe17 	ldw	r2,-8(fp)
2008c898:	0085c83a 	sub	r2,zero,r2
2008c89c:	18800015 	stw	r2,0(r3)
      return -1;
2008c8a0:	00bfffc4 	movi	r2,-1
2008c8a4:	00000706 	br	2008c8c4 <close+0xbc>
    }
    return 0;
2008c8a8:	0005883a 	mov	r2,zero
2008c8ac:	00000506 	br	2008c8c4 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
2008c8b0:	008c7b80 	call	2008c7b8 <alt_get_errno>
2008c8b4:	1007883a 	mov	r3,r2
2008c8b8:	00801444 	movi	r2,81
2008c8bc:	18800015 	stw	r2,0(r3)
    return -1;
2008c8c0:	00bfffc4 	movi	r2,-1
  }
}
2008c8c4:	e037883a 	mov	sp,fp
2008c8c8:	dfc00117 	ldw	ra,4(sp)
2008c8cc:	df000017 	ldw	fp,0(sp)
2008c8d0:	dec00204 	addi	sp,sp,8
2008c8d4:	f800283a 	ret

2008c8d8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
2008c8d8:	defffc04 	addi	sp,sp,-16
2008c8dc:	df000315 	stw	fp,12(sp)
2008c8e0:	df000304 	addi	fp,sp,12
2008c8e4:	e13ffd15 	stw	r4,-12(fp)
2008c8e8:	e17ffe15 	stw	r5,-8(fp)
2008c8ec:	e1bfff15 	stw	r6,-4(fp)
  return len;
2008c8f0:	e0bfff17 	ldw	r2,-4(fp)
}
2008c8f4:	e037883a 	mov	sp,fp
2008c8f8:	df000017 	ldw	fp,0(sp)
2008c8fc:	dec00104 	addi	sp,sp,4
2008c900:	f800283a 	ret

2008c904 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2008c904:	defffe04 	addi	sp,sp,-8
2008c908:	dfc00115 	stw	ra,4(sp)
2008c90c:	df000015 	stw	fp,0(sp)
2008c910:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2008c914:	00800034 	movhi	r2,0
2008c918:	10886904 	addi	r2,r2,8612
2008c91c:	10800017 	ldw	r2,0(r2)
2008c920:	10000526 	beq	r2,zero,2008c938 <alt_get_errno+0x34>
2008c924:	00800034 	movhi	r2,0
2008c928:	10886904 	addi	r2,r2,8612
2008c92c:	10800017 	ldw	r2,0(r2)
2008c930:	103ee83a 	callr	r2
2008c934:	00000206 	br	2008c940 <alt_get_errno+0x3c>
2008c938:	00800034 	movhi	r2,0
2008c93c:	10887404 	addi	r2,r2,8656
}
2008c940:	e037883a 	mov	sp,fp
2008c944:	dfc00117 	ldw	ra,4(sp)
2008c948:	df000017 	ldw	fp,0(sp)
2008c94c:	dec00204 	addi	sp,sp,8
2008c950:	f800283a 	ret

2008c954 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
2008c954:	defffb04 	addi	sp,sp,-20
2008c958:	dfc00415 	stw	ra,16(sp)
2008c95c:	df000315 	stw	fp,12(sp)
2008c960:	df000304 	addi	fp,sp,12
2008c964:	e13ffe15 	stw	r4,-8(fp)
2008c968:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
2008c96c:	e0bffe17 	ldw	r2,-8(fp)
2008c970:	10000616 	blt	r2,zero,2008c98c <fstat+0x38>
2008c974:	e0bffe17 	ldw	r2,-8(fp)
2008c978:	10c00324 	muli	r3,r2,12
2008c97c:	00800034 	movhi	r2,0
2008c980:	10839e04 	addi	r2,r2,3704
2008c984:	1885883a 	add	r2,r3,r2
2008c988:	00000106 	br	2008c990 <fstat+0x3c>
2008c98c:	0005883a 	mov	r2,zero
2008c990:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
2008c994:	e0bffd17 	ldw	r2,-12(fp)
2008c998:	10001026 	beq	r2,zero,2008c9dc <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
2008c99c:	e0bffd17 	ldw	r2,-12(fp)
2008c9a0:	10800017 	ldw	r2,0(r2)
2008c9a4:	10800817 	ldw	r2,32(r2)
2008c9a8:	10000726 	beq	r2,zero,2008c9c8 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
2008c9ac:	e0bffd17 	ldw	r2,-12(fp)
2008c9b0:	10800017 	ldw	r2,0(r2)
2008c9b4:	10800817 	ldw	r2,32(r2)
2008c9b8:	e13ffd17 	ldw	r4,-12(fp)
2008c9bc:	e17fff17 	ldw	r5,-4(fp)
2008c9c0:	103ee83a 	callr	r2
2008c9c4:	00000a06 	br	2008c9f0 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
2008c9c8:	e0bfff17 	ldw	r2,-4(fp)
2008c9cc:	00c80004 	movi	r3,8192
2008c9d0:	10c00115 	stw	r3,4(r2)
      return 0;
2008c9d4:	0005883a 	mov	r2,zero
2008c9d8:	00000506 	br	2008c9f0 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
2008c9dc:	008c9040 	call	2008c904 <alt_get_errno>
2008c9e0:	1007883a 	mov	r3,r2
2008c9e4:	00801444 	movi	r2,81
2008c9e8:	18800015 	stw	r2,0(r3)
    return -1;
2008c9ec:	00bfffc4 	movi	r2,-1
  }
}
2008c9f0:	e037883a 	mov	sp,fp
2008c9f4:	dfc00117 	ldw	ra,4(sp)
2008c9f8:	df000017 	ldw	fp,0(sp)
2008c9fc:	dec00204 	addi	sp,sp,8
2008ca00:	f800283a 	ret

2008ca04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2008ca04:	defffe04 	addi	sp,sp,-8
2008ca08:	dfc00115 	stw	ra,4(sp)
2008ca0c:	df000015 	stw	fp,0(sp)
2008ca10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2008ca14:	00800034 	movhi	r2,0
2008ca18:	10886904 	addi	r2,r2,8612
2008ca1c:	10800017 	ldw	r2,0(r2)
2008ca20:	10000526 	beq	r2,zero,2008ca38 <alt_get_errno+0x34>
2008ca24:	00800034 	movhi	r2,0
2008ca28:	10886904 	addi	r2,r2,8612
2008ca2c:	10800017 	ldw	r2,0(r2)
2008ca30:	103ee83a 	callr	r2
2008ca34:	00000206 	br	2008ca40 <alt_get_errno+0x3c>
2008ca38:	00800034 	movhi	r2,0
2008ca3c:	10887404 	addi	r2,r2,8656
}
2008ca40:	e037883a 	mov	sp,fp
2008ca44:	dfc00117 	ldw	ra,4(sp)
2008ca48:	df000017 	ldw	fp,0(sp)
2008ca4c:	dec00204 	addi	sp,sp,8
2008ca50:	f800283a 	ret

2008ca54 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
2008ca54:	deffed04 	addi	sp,sp,-76
2008ca58:	dfc01215 	stw	ra,72(sp)
2008ca5c:	df001115 	stw	fp,68(sp)
2008ca60:	df001104 	addi	fp,sp,68
2008ca64:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
2008ca68:	e0bfff17 	ldw	r2,-4(fp)
2008ca6c:	10000616 	blt	r2,zero,2008ca88 <isatty+0x34>
2008ca70:	e0bfff17 	ldw	r2,-4(fp)
2008ca74:	10c00324 	muli	r3,r2,12
2008ca78:	00800034 	movhi	r2,0
2008ca7c:	10839e04 	addi	r2,r2,3704
2008ca80:	1885883a 	add	r2,r3,r2
2008ca84:	00000106 	br	2008ca8c <isatty+0x38>
2008ca88:	0005883a 	mov	r2,zero
2008ca8c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
2008ca90:	e0bfef17 	ldw	r2,-68(fp)
2008ca94:	10000e26 	beq	r2,zero,2008cad0 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
2008ca98:	e0bfef17 	ldw	r2,-68(fp)
2008ca9c:	10800017 	ldw	r2,0(r2)
2008caa0:	10800817 	ldw	r2,32(r2)
2008caa4:	1000021e 	bne	r2,zero,2008cab0 <isatty+0x5c>
    {
      return 1;
2008caa8:	00800044 	movi	r2,1
2008caac:	00000d06 	br	2008cae4 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
2008cab0:	e0bff004 	addi	r2,fp,-64
2008cab4:	e13fff17 	ldw	r4,-4(fp)
2008cab8:	100b883a 	mov	r5,r2
2008cabc:	008c9540 	call	2008c954 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
2008cac0:	e0bff117 	ldw	r2,-60(fp)
2008cac4:	10880020 	cmpeqi	r2,r2,8192
2008cac8:	10803fcc 	andi	r2,r2,255
2008cacc:	00000506 	br	2008cae4 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
2008cad0:	008ca040 	call	2008ca04 <alt_get_errno>
2008cad4:	1007883a 	mov	r3,r2
2008cad8:	00801444 	movi	r2,81
2008cadc:	18800015 	stw	r2,0(r3)
    return 0;
2008cae0:	0005883a 	mov	r2,zero
  }
}
2008cae4:	e037883a 	mov	sp,fp
2008cae8:	dfc00117 	ldw	ra,4(sp)
2008caec:	df000017 	ldw	fp,0(sp)
2008caf0:	dec00204 	addi	sp,sp,8
2008caf4:	f800283a 	ret

2008caf8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
2008caf8:	defffc04 	addi	sp,sp,-16
2008cafc:	df000315 	stw	fp,12(sp)
2008cb00:	df000304 	addi	fp,sp,12
2008cb04:	e13ffd15 	stw	r4,-12(fp)
2008cb08:	e17ffe15 	stw	r5,-8(fp)
2008cb0c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
2008cb10:	e0fffe17 	ldw	r3,-8(fp)
2008cb14:	e0bffd17 	ldw	r2,-12(fp)
2008cb18:	18800c26 	beq	r3,r2,2008cb4c <alt_load_section+0x54>
  {
    while( to != end )
2008cb1c:	00000806 	br	2008cb40 <alt_load_section+0x48>
    {
      *to++ = *from++;
2008cb20:	e0bffe17 	ldw	r2,-8(fp)
2008cb24:	10c00104 	addi	r3,r2,4
2008cb28:	e0fffe15 	stw	r3,-8(fp)
2008cb2c:	e0fffd17 	ldw	r3,-12(fp)
2008cb30:	19000104 	addi	r4,r3,4
2008cb34:	e13ffd15 	stw	r4,-12(fp)
2008cb38:	18c00017 	ldw	r3,0(r3)
2008cb3c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
2008cb40:	e0fffe17 	ldw	r3,-8(fp)
2008cb44:	e0bfff17 	ldw	r2,-4(fp)
2008cb48:	18bff51e 	bne	r3,r2,2008cb20 <__flash_rwdata_start+0xffffb1f0>
    {
      *to++ = *from++;
    }
  }
}
2008cb4c:	e037883a 	mov	sp,fp
2008cb50:	df000017 	ldw	fp,0(sp)
2008cb54:	dec00104 	addi	sp,sp,4
2008cb58:	f800283a 	ret

2008cb5c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
2008cb5c:	defffe04 	addi	sp,sp,-8
2008cb60:	dfc00115 	stw	ra,4(sp)
2008cb64:	df000015 	stw	fp,0(sp)
2008cb68:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
2008cb6c:	01080274 	movhi	r4,8201
2008cb70:	21064c04 	addi	r4,r4,6448
2008cb74:	01400034 	movhi	r5,0
2008cb78:	29416b04 	addi	r5,r5,1452
2008cb7c:	01800034 	movhi	r6,0
2008cb80:	31887004 	addi	r6,r6,8640
2008cb84:	008caf80 	call	2008caf8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
2008cb88:	01080234 	movhi	r4,8200
2008cb8c:	21000804 	addi	r4,r4,32
2008cb90:	01480234 	movhi	r5,8200
2008cb94:	29400804 	addi	r5,r5,32
2008cb98:	01880234 	movhi	r6,8200
2008cb9c:	31809004 	addi	r6,r6,576
2008cba0:	008caf80 	call	2008caf8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
2008cba4:	01080274 	movhi	r4,8201
2008cba8:	2104e104 	addi	r4,r4,4996
2008cbac:	01400034 	movhi	r5,0
2008cbb0:	29400004 	addi	r5,r5,0
2008cbb4:	01800034 	movhi	r6,0
2008cbb8:	31816b04 	addi	r6,r6,1452
2008cbbc:	008caf80 	call	2008caf8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
2008cbc0:	008fe300 	call	2008fe30 <alt_dcache_flush_all>
  alt_icache_flush_all();
2008cbc4:	00900b00 	call	200900b0 <alt_icache_flush_all>
}
2008cbc8:	e037883a 	mov	sp,fp
2008cbcc:	dfc00117 	ldw	ra,4(sp)
2008cbd0:	df000017 	ldw	fp,0(sp)
2008cbd4:	dec00204 	addi	sp,sp,8
2008cbd8:	f800283a 	ret

2008cbdc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2008cbdc:	defffe04 	addi	sp,sp,-8
2008cbe0:	dfc00115 	stw	ra,4(sp)
2008cbe4:	df000015 	stw	fp,0(sp)
2008cbe8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2008cbec:	00800034 	movhi	r2,0
2008cbf0:	10886904 	addi	r2,r2,8612
2008cbf4:	10800017 	ldw	r2,0(r2)
2008cbf8:	10000526 	beq	r2,zero,2008cc10 <alt_get_errno+0x34>
2008cbfc:	00800034 	movhi	r2,0
2008cc00:	10886904 	addi	r2,r2,8612
2008cc04:	10800017 	ldw	r2,0(r2)
2008cc08:	103ee83a 	callr	r2
2008cc0c:	00000206 	br	2008cc18 <alt_get_errno+0x3c>
2008cc10:	00800034 	movhi	r2,0
2008cc14:	10887404 	addi	r2,r2,8656
}
2008cc18:	e037883a 	mov	sp,fp
2008cc1c:	dfc00117 	ldw	ra,4(sp)
2008cc20:	df000017 	ldw	fp,0(sp)
2008cc24:	dec00204 	addi	sp,sp,8
2008cc28:	f800283a 	ret

2008cc2c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
2008cc2c:	defff904 	addi	sp,sp,-28
2008cc30:	dfc00615 	stw	ra,24(sp)
2008cc34:	df000515 	stw	fp,20(sp)
2008cc38:	df000504 	addi	fp,sp,20
2008cc3c:	e13ffd15 	stw	r4,-12(fp)
2008cc40:	e17ffe15 	stw	r5,-8(fp)
2008cc44:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
2008cc48:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
2008cc4c:	e0bffd17 	ldw	r2,-12(fp)
2008cc50:	10000616 	blt	r2,zero,2008cc6c <lseek+0x40>
2008cc54:	e0bffd17 	ldw	r2,-12(fp)
2008cc58:	10c00324 	muli	r3,r2,12
2008cc5c:	00800034 	movhi	r2,0
2008cc60:	10839e04 	addi	r2,r2,3704
2008cc64:	1885883a 	add	r2,r3,r2
2008cc68:	00000106 	br	2008cc70 <lseek+0x44>
2008cc6c:	0005883a 	mov	r2,zero
2008cc70:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
2008cc74:	e0bffc17 	ldw	r2,-16(fp)
2008cc78:	10001026 	beq	r2,zero,2008ccbc <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
2008cc7c:	e0bffc17 	ldw	r2,-16(fp)
2008cc80:	10800017 	ldw	r2,0(r2)
2008cc84:	10800717 	ldw	r2,28(r2)
2008cc88:	10000926 	beq	r2,zero,2008ccb0 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
2008cc8c:	e0bffc17 	ldw	r2,-16(fp)
2008cc90:	10800017 	ldw	r2,0(r2)
2008cc94:	10800717 	ldw	r2,28(r2)
2008cc98:	e13ffc17 	ldw	r4,-16(fp)
2008cc9c:	e17ffe17 	ldw	r5,-8(fp)
2008cca0:	e1bfff17 	ldw	r6,-4(fp)
2008cca4:	103ee83a 	callr	r2
2008cca8:	e0bffb15 	stw	r2,-20(fp)
2008ccac:	00000506 	br	2008ccc4 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
2008ccb0:	00bfde84 	movi	r2,-134
2008ccb4:	e0bffb15 	stw	r2,-20(fp)
2008ccb8:	00000206 	br	2008ccc4 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
2008ccbc:	00bfebc4 	movi	r2,-81
2008ccc0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
2008ccc4:	e0bffb17 	ldw	r2,-20(fp)
2008ccc8:	1000070e 	bge	r2,zero,2008cce8 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
2008cccc:	008cbdc0 	call	2008cbdc <alt_get_errno>
2008ccd0:	1007883a 	mov	r3,r2
2008ccd4:	e0bffb17 	ldw	r2,-20(fp)
2008ccd8:	0085c83a 	sub	r2,zero,r2
2008ccdc:	18800015 	stw	r2,0(r3)
    rc = -1;
2008cce0:	00bfffc4 	movi	r2,-1
2008cce4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
2008cce8:	e0bffb17 	ldw	r2,-20(fp)
}
2008ccec:	e037883a 	mov	sp,fp
2008ccf0:	dfc00117 	ldw	ra,4(sp)
2008ccf4:	df000017 	ldw	fp,0(sp)
2008ccf8:	dec00204 	addi	sp,sp,8
2008ccfc:	f800283a 	ret

2008cd00 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
2008cd00:	defffd04 	addi	sp,sp,-12
2008cd04:	dfc00215 	stw	ra,8(sp)
2008cd08:	df000115 	stw	fp,4(sp)
2008cd0c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
2008cd10:	0009883a 	mov	r4,zero
2008cd14:	008d1940 	call	2008d194 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
2008cd18:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
2008cd1c:	008d1c80 	call	2008d1c8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
2008cd20:	01000034 	movhi	r4,0
2008cd24:	2100cf04 	addi	r4,r4,828
2008cd28:	01400034 	movhi	r5,0
2008cd2c:	2940cf04 	addi	r5,r5,828
2008cd30:	01800034 	movhi	r6,0
2008cd34:	3180cf04 	addi	r6,r6,828
2008cd38:	00904700 	call	20090470 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
2008cd3c:	008ff680 	call	2008ff68 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
2008cd40:	01080274 	movhi	r4,8201
2008cd44:	213ff104 	addi	r4,r4,-60
2008cd48:	0090e740 	call	20090e74 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
2008cd4c:	d1201a17 	ldw	r4,-32664(gp)
2008cd50:	d0e01b17 	ldw	r3,-32660(gp)
2008cd54:	d0a01c17 	ldw	r2,-32656(gp)
2008cd58:	180b883a 	mov	r5,r3
2008cd5c:	100d883a 	mov	r6,r2
2008cd60:	008028c0 	call	2008028c <main>
2008cd64:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
2008cd68:	01000044 	movi	r4,1
2008cd6c:	008c8080 	call	2008c808 <close>
  exit (result);
2008cd70:	e13fff17 	ldw	r4,-4(fp)
2008cd74:	0090e880 	call	20090e88 <exit>

2008cd78 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
2008cd78:	defffe04 	addi	sp,sp,-8
2008cd7c:	df000115 	stw	fp,4(sp)
2008cd80:	df000104 	addi	fp,sp,4
2008cd84:	e13fff15 	stw	r4,-4(fp)
}
2008cd88:	e037883a 	mov	sp,fp
2008cd8c:	df000017 	ldw	fp,0(sp)
2008cd90:	dec00104 	addi	sp,sp,4
2008cd94:	f800283a 	ret

2008cd98 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
2008cd98:	defffe04 	addi	sp,sp,-8
2008cd9c:	df000115 	stw	fp,4(sp)
2008cda0:	df000104 	addi	fp,sp,4
2008cda4:	e13fff15 	stw	r4,-4(fp)
}
2008cda8:	e037883a 	mov	sp,fp
2008cdac:	df000017 	ldw	fp,0(sp)
2008cdb0:	dec00104 	addi	sp,sp,4
2008cdb4:	f800283a 	ret

2008cdb8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2008cdb8:	defffe04 	addi	sp,sp,-8
2008cdbc:	dfc00115 	stw	ra,4(sp)
2008cdc0:	df000015 	stw	fp,0(sp)
2008cdc4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2008cdc8:	00800034 	movhi	r2,0
2008cdcc:	10886904 	addi	r2,r2,8612
2008cdd0:	10800017 	ldw	r2,0(r2)
2008cdd4:	10000526 	beq	r2,zero,2008cdec <alt_get_errno+0x34>
2008cdd8:	00800034 	movhi	r2,0
2008cddc:	10886904 	addi	r2,r2,8612
2008cde0:	10800017 	ldw	r2,0(r2)
2008cde4:	103ee83a 	callr	r2
2008cde8:	00000206 	br	2008cdf4 <alt_get_errno+0x3c>
2008cdec:	00800034 	movhi	r2,0
2008cdf0:	10887404 	addi	r2,r2,8656
}
2008cdf4:	e037883a 	mov	sp,fp
2008cdf8:	dfc00117 	ldw	ra,4(sp)
2008cdfc:	df000017 	ldw	fp,0(sp)
2008ce00:	dec00204 	addi	sp,sp,8
2008ce04:	f800283a 	ret

2008ce08 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
2008ce08:	defff904 	addi	sp,sp,-28
2008ce0c:	dfc00615 	stw	ra,24(sp)
2008ce10:	df000515 	stw	fp,20(sp)
2008ce14:	df000504 	addi	fp,sp,20
2008ce18:	e13ffd15 	stw	r4,-12(fp)
2008ce1c:	e17ffe15 	stw	r5,-8(fp)
2008ce20:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
2008ce24:	e0bffd17 	ldw	r2,-12(fp)
2008ce28:	10000616 	blt	r2,zero,2008ce44 <read+0x3c>
2008ce2c:	e0bffd17 	ldw	r2,-12(fp)
2008ce30:	10c00324 	muli	r3,r2,12
2008ce34:	00800034 	movhi	r2,0
2008ce38:	10839e04 	addi	r2,r2,3704
2008ce3c:	1885883a 	add	r2,r3,r2
2008ce40:	00000106 	br	2008ce48 <read+0x40>
2008ce44:	0005883a 	mov	r2,zero
2008ce48:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
2008ce4c:	e0bffb17 	ldw	r2,-20(fp)
2008ce50:	10002226 	beq	r2,zero,2008cedc <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
2008ce54:	e0bffb17 	ldw	r2,-20(fp)
2008ce58:	10800217 	ldw	r2,8(r2)
2008ce5c:	108000cc 	andi	r2,r2,3
2008ce60:	10800060 	cmpeqi	r2,r2,1
2008ce64:	1000181e 	bne	r2,zero,2008cec8 <read+0xc0>
        (fd->dev->read))
2008ce68:	e0bffb17 	ldw	r2,-20(fp)
2008ce6c:	10800017 	ldw	r2,0(r2)
2008ce70:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
2008ce74:	10001426 	beq	r2,zero,2008cec8 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
2008ce78:	e0bffb17 	ldw	r2,-20(fp)
2008ce7c:	10800017 	ldw	r2,0(r2)
2008ce80:	10800517 	ldw	r2,20(r2)
2008ce84:	e0ffff17 	ldw	r3,-4(fp)
2008ce88:	e13ffb17 	ldw	r4,-20(fp)
2008ce8c:	e17ffe17 	ldw	r5,-8(fp)
2008ce90:	180d883a 	mov	r6,r3
2008ce94:	103ee83a 	callr	r2
2008ce98:	e0bffc15 	stw	r2,-16(fp)
2008ce9c:	e0bffc17 	ldw	r2,-16(fp)
2008cea0:	1000070e 	bge	r2,zero,2008cec0 <read+0xb8>
        {
          ALT_ERRNO = -rval;
2008cea4:	008cdb80 	call	2008cdb8 <alt_get_errno>
2008cea8:	1007883a 	mov	r3,r2
2008ceac:	e0bffc17 	ldw	r2,-16(fp)
2008ceb0:	0085c83a 	sub	r2,zero,r2
2008ceb4:	18800015 	stw	r2,0(r3)
          return -1;
2008ceb8:	00bfffc4 	movi	r2,-1
2008cebc:	00000c06 	br	2008cef0 <read+0xe8>
        }
        return rval;
2008cec0:	e0bffc17 	ldw	r2,-16(fp)
2008cec4:	00000a06 	br	2008cef0 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
2008cec8:	008cdb80 	call	2008cdb8 <alt_get_errno>
2008cecc:	1007883a 	mov	r3,r2
2008ced0:	00800344 	movi	r2,13
2008ced4:	18800015 	stw	r2,0(r3)
2008ced8:	00000406 	br	2008ceec <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
2008cedc:	008cdb80 	call	2008cdb8 <alt_get_errno>
2008cee0:	1007883a 	mov	r3,r2
2008cee4:	00801444 	movi	r2,81
2008cee8:	18800015 	stw	r2,0(r3)
  }
  return -1;
2008ceec:	00bfffc4 	movi	r2,-1
}
2008cef0:	e037883a 	mov	sp,fp
2008cef4:	dfc00117 	ldw	ra,4(sp)
2008cef8:	df000017 	ldw	fp,0(sp)
2008cefc:	dec00204 	addi	sp,sp,8
2008cf00:	f800283a 	ret

2008cf04 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
2008cf04:	defffe04 	addi	sp,sp,-8
2008cf08:	df000115 	stw	fp,4(sp)
2008cf0c:	df000104 	addi	fp,sp,4
2008cf10:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
2008cf14:	e0bfff17 	ldw	r2,-4(fp)
2008cf18:	108000d0 	cmplti	r2,r2,3
2008cf1c:	10000d1e 	bne	r2,zero,2008cf54 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
2008cf20:	00800034 	movhi	r2,0
2008cf24:	10839e04 	addi	r2,r2,3704
2008cf28:	e0ffff17 	ldw	r3,-4(fp)
2008cf2c:	18c00324 	muli	r3,r3,12
2008cf30:	18c00204 	addi	r3,r3,8
2008cf34:	10c5883a 	add	r2,r2,r3
2008cf38:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
2008cf3c:	00800034 	movhi	r2,0
2008cf40:	10839e04 	addi	r2,r2,3704
2008cf44:	e0ffff17 	ldw	r3,-4(fp)
2008cf48:	18c00324 	muli	r3,r3,12
2008cf4c:	10c5883a 	add	r2,r2,r3
2008cf50:	10000015 	stw	zero,0(r2)
  }
}
2008cf54:	e037883a 	mov	sp,fp
2008cf58:	df000017 	ldw	fp,0(sp)
2008cf5c:	dec00104 	addi	sp,sp,4
2008cf60:	f800283a 	ret

2008cf64 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
2008cf64:	defff904 	addi	sp,sp,-28
2008cf68:	df000615 	stw	fp,24(sp)
2008cf6c:	df000604 	addi	fp,sp,24
2008cf70:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2008cf74:	0005303a 	rdctl	r2,status
2008cf78:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2008cf7c:	e0fffc17 	ldw	r3,-16(fp)
2008cf80:	00bfff84 	movi	r2,-2
2008cf84:	1884703a 	and	r2,r3,r2
2008cf88:	1001703a 	wrctl	status,r2
  
  return context;
2008cf8c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
2008cf90:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
2008cf94:	d0a00c17 	ldw	r2,-32720(gp)
2008cf98:	10c000c4 	addi	r3,r2,3
2008cf9c:	00bfff04 	movi	r2,-4
2008cfa0:	1884703a 	and	r2,r3,r2
2008cfa4:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
2008cfa8:	d0e00c17 	ldw	r3,-32720(gp)
2008cfac:	e0bfff17 	ldw	r2,-4(fp)
2008cfb0:	1887883a 	add	r3,r3,r2
2008cfb4:	00880034 	movhi	r2,8192
2008cfb8:	10800004 	addi	r2,r2,0
2008cfbc:	10c0062e 	bgeu	r2,r3,2008cfd8 <sbrk+0x74>
2008cfc0:	e0bffa17 	ldw	r2,-24(fp)
2008cfc4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2008cfc8:	e0bffd17 	ldw	r2,-12(fp)
2008cfcc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
2008cfd0:	00bfffc4 	movi	r2,-1
2008cfd4:	00000b06 	br	2008d004 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
2008cfd8:	d0a00c17 	ldw	r2,-32720(gp)
2008cfdc:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
2008cfe0:	d0e00c17 	ldw	r3,-32720(gp)
2008cfe4:	e0bfff17 	ldw	r2,-4(fp)
2008cfe8:	1885883a 	add	r2,r3,r2
2008cfec:	d0a00c15 	stw	r2,-32720(gp)
2008cff0:	e0bffa17 	ldw	r2,-24(fp)
2008cff4:	e0bffe15 	stw	r2,-8(fp)
2008cff8:	e0bffe17 	ldw	r2,-8(fp)
2008cffc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
2008d000:	e0bffb17 	ldw	r2,-20(fp)
} 
2008d004:	e037883a 	mov	sp,fp
2008d008:	df000017 	ldw	fp,0(sp)
2008d00c:	dec00104 	addi	sp,sp,4
2008d010:	f800283a 	ret

2008d014 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2008d014:	defffe04 	addi	sp,sp,-8
2008d018:	dfc00115 	stw	ra,4(sp)
2008d01c:	df000015 	stw	fp,0(sp)
2008d020:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2008d024:	00800034 	movhi	r2,0
2008d028:	10886904 	addi	r2,r2,8612
2008d02c:	10800017 	ldw	r2,0(r2)
2008d030:	10000526 	beq	r2,zero,2008d048 <alt_get_errno+0x34>
2008d034:	00800034 	movhi	r2,0
2008d038:	10886904 	addi	r2,r2,8612
2008d03c:	10800017 	ldw	r2,0(r2)
2008d040:	103ee83a 	callr	r2
2008d044:	00000206 	br	2008d050 <alt_get_errno+0x3c>
2008d048:	00800034 	movhi	r2,0
2008d04c:	10887404 	addi	r2,r2,8656
}
2008d050:	e037883a 	mov	sp,fp
2008d054:	dfc00117 	ldw	ra,4(sp)
2008d058:	df000017 	ldw	fp,0(sp)
2008d05c:	dec00204 	addi	sp,sp,8
2008d060:	f800283a 	ret

2008d064 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
2008d064:	defff904 	addi	sp,sp,-28
2008d068:	dfc00615 	stw	ra,24(sp)
2008d06c:	df000515 	stw	fp,20(sp)
2008d070:	df000504 	addi	fp,sp,20
2008d074:	e13ffd15 	stw	r4,-12(fp)
2008d078:	e17ffe15 	stw	r5,-8(fp)
2008d07c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
2008d080:	e0bffd17 	ldw	r2,-12(fp)
2008d084:	10000616 	blt	r2,zero,2008d0a0 <write+0x3c>
2008d088:	e0bffd17 	ldw	r2,-12(fp)
2008d08c:	10c00324 	muli	r3,r2,12
2008d090:	00800034 	movhi	r2,0
2008d094:	10839e04 	addi	r2,r2,3704
2008d098:	1885883a 	add	r2,r3,r2
2008d09c:	00000106 	br	2008d0a4 <write+0x40>
2008d0a0:	0005883a 	mov	r2,zero
2008d0a4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
2008d0a8:	e0bffb17 	ldw	r2,-20(fp)
2008d0ac:	10002126 	beq	r2,zero,2008d134 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
2008d0b0:	e0bffb17 	ldw	r2,-20(fp)
2008d0b4:	10800217 	ldw	r2,8(r2)
2008d0b8:	108000cc 	andi	r2,r2,3
2008d0bc:	10001826 	beq	r2,zero,2008d120 <write+0xbc>
2008d0c0:	e0bffb17 	ldw	r2,-20(fp)
2008d0c4:	10800017 	ldw	r2,0(r2)
2008d0c8:	10800617 	ldw	r2,24(r2)
2008d0cc:	10001426 	beq	r2,zero,2008d120 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
2008d0d0:	e0bffb17 	ldw	r2,-20(fp)
2008d0d4:	10800017 	ldw	r2,0(r2)
2008d0d8:	10800617 	ldw	r2,24(r2)
2008d0dc:	e0ffff17 	ldw	r3,-4(fp)
2008d0e0:	e13ffb17 	ldw	r4,-20(fp)
2008d0e4:	e17ffe17 	ldw	r5,-8(fp)
2008d0e8:	180d883a 	mov	r6,r3
2008d0ec:	103ee83a 	callr	r2
2008d0f0:	e0bffc15 	stw	r2,-16(fp)
2008d0f4:	e0bffc17 	ldw	r2,-16(fp)
2008d0f8:	1000070e 	bge	r2,zero,2008d118 <write+0xb4>
      {
        ALT_ERRNO = -rval;
2008d0fc:	008d0140 	call	2008d014 <alt_get_errno>
2008d100:	1007883a 	mov	r3,r2
2008d104:	e0bffc17 	ldw	r2,-16(fp)
2008d108:	0085c83a 	sub	r2,zero,r2
2008d10c:	18800015 	stw	r2,0(r3)
        return -1;
2008d110:	00bfffc4 	movi	r2,-1
2008d114:	00000c06 	br	2008d148 <write+0xe4>
      }
      return rval;
2008d118:	e0bffc17 	ldw	r2,-16(fp)
2008d11c:	00000a06 	br	2008d148 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
2008d120:	008d0140 	call	2008d014 <alt_get_errno>
2008d124:	1007883a 	mov	r3,r2
2008d128:	00800344 	movi	r2,13
2008d12c:	18800015 	stw	r2,0(r3)
2008d130:	00000406 	br	2008d144 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
2008d134:	008d0140 	call	2008d014 <alt_get_errno>
2008d138:	1007883a 	mov	r3,r2
2008d13c:	00801444 	movi	r2,81
2008d140:	18800015 	stw	r2,0(r3)
  }
  return -1;
2008d144:	00bfffc4 	movi	r2,-1
}
2008d148:	e037883a 	mov	sp,fp
2008d14c:	dfc00117 	ldw	ra,4(sp)
2008d150:	df000017 	ldw	fp,0(sp)
2008d154:	dec00204 	addi	sp,sp,8
2008d158:	f800283a 	ret

2008d15c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
2008d15c:	defffd04 	addi	sp,sp,-12
2008d160:	dfc00215 	stw	ra,8(sp)
2008d164:	df000115 	stw	fp,4(sp)
2008d168:	df000104 	addi	fp,sp,4
2008d16c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
2008d170:	e13fff17 	ldw	r4,-4(fp)
2008d174:	01400034 	movhi	r5,0
2008d178:	29486604 	addi	r5,r5,8600
2008d17c:	008fec40 	call	2008fec4 <alt_dev_llist_insert>
}
2008d180:	e037883a 	mov	sp,fp
2008d184:	dfc00117 	ldw	ra,4(sp)
2008d188:	df000017 	ldw	fp,0(sp)
2008d18c:	dec00204 	addi	sp,sp,8
2008d190:	f800283a 	ret

2008d194 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
2008d194:	defffd04 	addi	sp,sp,-12
2008d198:	dfc00215 	stw	ra,8(sp)
2008d19c:	df000115 	stw	fp,4(sp)
2008d1a0:	df000104 	addi	fp,sp,4
2008d1a4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
2008d1a8:	0090b640 	call	20090b64 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
2008d1ac:	00800044 	movi	r2,1
2008d1b0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
2008d1b4:	e037883a 	mov	sp,fp
2008d1b8:	dfc00117 	ldw	ra,4(sp)
2008d1bc:	df000017 	ldw	fp,0(sp)
2008d1c0:	dec00204 	addi	sp,sp,8
2008d1c4:	f800283a 	ret

2008d1c8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
2008d1c8:	defffe04 	addi	sp,sp,-8
2008d1cc:	dfc00115 	stw	ra,4(sp)
2008d1d0:	df000015 	stw	fp,0(sp)
2008d1d4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
2008d1d8:	00800034 	movhi	r2,0
2008d1dc:	10887b04 	addi	r2,r2,8684
2008d1e0:	00c80434 	movhi	r3,8208
2008d1e4:	18c52804 	addi	r3,r3,5280
2008d1e8:	10c00015 	stw	r3,0(r2)
2008d1ec:	00800034 	movhi	r2,0
2008d1f0:	10887c04 	addi	r2,r2,8688
2008d1f4:	00c1dcf4 	movhi	r3,1907
2008d1f8:	18d65004 	addi	r3,r3,22848
2008d1fc:	10c00015 	stw	r3,0(r2)
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
2008d200:	01000034 	movhi	r4,0
2008d204:	21040804 	addi	r4,r4,4128
2008d208:	000b883a 	mov	r5,zero
2008d20c:	01800044 	movi	r6,1
2008d210:	008d4200 	call	2008d420 <altera_avalon_jtag_uart_init>
2008d214:	01000034 	movhi	r4,0
2008d218:	2103fe04 	addi	r4,r4,4088
2008d21c:	008d15c0 	call	2008d15c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
2008d220:	0001883a 	nop
    ALTERA_MSGDMA_INIT ( FROM_IDCT_HWACEL, from_idct_hwacel);
2008d224:	00800034 	movhi	r2,0
2008d228:	10881604 	addi	r2,r2,8280
2008d22c:	10c00717 	ldw	r3,28(r2)
2008d230:	00800034 	movhi	r2,0
2008d234:	10881604 	addi	r2,r2,8280
2008d238:	10800817 	ldw	r2,32(r2)
2008d23c:	01000034 	movhi	r4,0
2008d240:	21081604 	addi	r4,r4,8280
2008d244:	180b883a 	mov	r5,r3
2008d248:	100d883a 	mov	r6,r2
2008d24c:	008f8e80 	call	2008f8e8 <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( TO_IDCT_HWACEL, to_idct_hwacel);
2008d250:	00800034 	movhi	r2,0
2008d254:	10882e04 	addi	r2,r2,8376
2008d258:	10c00717 	ldw	r3,28(r2)
2008d25c:	00800034 	movhi	r2,0
2008d260:	10882e04 	addi	r2,r2,8376
2008d264:	10800817 	ldw	r2,32(r2)
2008d268:	01000034 	movhi	r4,0
2008d26c:	21082e04 	addi	r4,r4,8376
2008d270:	180b883a 	mov	r5,r3
2008d274:	100d883a 	mov	r6,r2
2008d278:	008f8e80 	call	2008f8e8 <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( VIDEO_DMA, video_dma);
2008d27c:	00800034 	movhi	r2,0
2008d280:	10884604 	addi	r2,r2,8472
2008d284:	10c00717 	ldw	r3,28(r2)
2008d288:	00800034 	movhi	r2,0
2008d28c:	10884604 	addi	r2,r2,8472
2008d290:	10800817 	ldw	r2,32(r2)
2008d294:	01000034 	movhi	r4,0
2008d298:	21084604 	addi	r4,r4,8472
2008d29c:	180b883a 	mov	r5,r3
2008d2a0:	100d883a 	mov	r6,r2
2008d2a4:	008f8e80 	call	2008f8e8 <alt_msgdma_init>
}
2008d2a8:	e037883a 	mov	sp,fp
2008d2ac:	dfc00117 	ldw	ra,4(sp)
2008d2b0:	df000017 	ldw	fp,0(sp)
2008d2b4:	dec00204 	addi	sp,sp,8
2008d2b8:	f800283a 	ret

2008d2bc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
2008d2bc:	defffa04 	addi	sp,sp,-24
2008d2c0:	dfc00515 	stw	ra,20(sp)
2008d2c4:	df000415 	stw	fp,16(sp)
2008d2c8:	df000404 	addi	fp,sp,16
2008d2cc:	e13ffd15 	stw	r4,-12(fp)
2008d2d0:	e17ffe15 	stw	r5,-8(fp)
2008d2d4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
2008d2d8:	e0bffd17 	ldw	r2,-12(fp)
2008d2dc:	10800017 	ldw	r2,0(r2)
2008d2e0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
2008d2e4:	e0bffc17 	ldw	r2,-16(fp)
2008d2e8:	10c00a04 	addi	r3,r2,40
2008d2ec:	e0bffd17 	ldw	r2,-12(fp)
2008d2f0:	10800217 	ldw	r2,8(r2)
2008d2f4:	1809883a 	mov	r4,r3
2008d2f8:	e17ffe17 	ldw	r5,-8(fp)
2008d2fc:	e1bfff17 	ldw	r6,-4(fp)
2008d300:	100f883a 	mov	r7,r2
2008d304:	008d8e40 	call	2008d8e4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
2008d308:	e037883a 	mov	sp,fp
2008d30c:	dfc00117 	ldw	ra,4(sp)
2008d310:	df000017 	ldw	fp,0(sp)
2008d314:	dec00204 	addi	sp,sp,8
2008d318:	f800283a 	ret

2008d31c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
2008d31c:	defffa04 	addi	sp,sp,-24
2008d320:	dfc00515 	stw	ra,20(sp)
2008d324:	df000415 	stw	fp,16(sp)
2008d328:	df000404 	addi	fp,sp,16
2008d32c:	e13ffd15 	stw	r4,-12(fp)
2008d330:	e17ffe15 	stw	r5,-8(fp)
2008d334:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
2008d338:	e0bffd17 	ldw	r2,-12(fp)
2008d33c:	10800017 	ldw	r2,0(r2)
2008d340:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
2008d344:	e0bffc17 	ldw	r2,-16(fp)
2008d348:	10c00a04 	addi	r3,r2,40
2008d34c:	e0bffd17 	ldw	r2,-12(fp)
2008d350:	10800217 	ldw	r2,8(r2)
2008d354:	1809883a 	mov	r4,r3
2008d358:	e17ffe17 	ldw	r5,-8(fp)
2008d35c:	e1bfff17 	ldw	r6,-4(fp)
2008d360:	100f883a 	mov	r7,r2
2008d364:	008daf00 	call	2008daf0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
2008d368:	e037883a 	mov	sp,fp
2008d36c:	dfc00117 	ldw	ra,4(sp)
2008d370:	df000017 	ldw	fp,0(sp)
2008d374:	dec00204 	addi	sp,sp,8
2008d378:	f800283a 	ret

2008d37c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
2008d37c:	defffc04 	addi	sp,sp,-16
2008d380:	dfc00315 	stw	ra,12(sp)
2008d384:	df000215 	stw	fp,8(sp)
2008d388:	df000204 	addi	fp,sp,8
2008d38c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
2008d390:	e0bfff17 	ldw	r2,-4(fp)
2008d394:	10800017 	ldw	r2,0(r2)
2008d398:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
2008d39c:	e0bffe17 	ldw	r2,-8(fp)
2008d3a0:	10c00a04 	addi	r3,r2,40
2008d3a4:	e0bfff17 	ldw	r2,-4(fp)
2008d3a8:	10800217 	ldw	r2,8(r2)
2008d3ac:	1809883a 	mov	r4,r3
2008d3b0:	100b883a 	mov	r5,r2
2008d3b4:	008d7900 	call	2008d790 <altera_avalon_jtag_uart_close>
}
2008d3b8:	e037883a 	mov	sp,fp
2008d3bc:	dfc00117 	ldw	ra,4(sp)
2008d3c0:	df000017 	ldw	fp,0(sp)
2008d3c4:	dec00204 	addi	sp,sp,8
2008d3c8:	f800283a 	ret

2008d3cc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
2008d3cc:	defffa04 	addi	sp,sp,-24
2008d3d0:	dfc00515 	stw	ra,20(sp)
2008d3d4:	df000415 	stw	fp,16(sp)
2008d3d8:	df000404 	addi	fp,sp,16
2008d3dc:	e13ffd15 	stw	r4,-12(fp)
2008d3e0:	e17ffe15 	stw	r5,-8(fp)
2008d3e4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
2008d3e8:	e0bffd17 	ldw	r2,-12(fp)
2008d3ec:	10800017 	ldw	r2,0(r2)
2008d3f0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
2008d3f4:	e0bffc17 	ldw	r2,-16(fp)
2008d3f8:	10800a04 	addi	r2,r2,40
2008d3fc:	1009883a 	mov	r4,r2
2008d400:	e17ffe17 	ldw	r5,-8(fp)
2008d404:	e1bfff17 	ldw	r6,-4(fp)
2008d408:	008d7f80 	call	2008d7f8 <altera_avalon_jtag_uart_ioctl>
}
2008d40c:	e037883a 	mov	sp,fp
2008d410:	dfc00117 	ldw	ra,4(sp)
2008d414:	df000017 	ldw	fp,0(sp)
2008d418:	dec00204 	addi	sp,sp,8
2008d41c:	f800283a 	ret

2008d420 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
2008d420:	defffa04 	addi	sp,sp,-24
2008d424:	dfc00515 	stw	ra,20(sp)
2008d428:	df000415 	stw	fp,16(sp)
2008d42c:	df000404 	addi	fp,sp,16
2008d430:	e13ffd15 	stw	r4,-12(fp)
2008d434:	e17ffe15 	stw	r5,-8(fp)
2008d438:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
2008d43c:	e0bffd17 	ldw	r2,-12(fp)
2008d440:	00c00044 	movi	r3,1
2008d444:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
2008d448:	e0bffd17 	ldw	r2,-12(fp)
2008d44c:	10800017 	ldw	r2,0(r2)
2008d450:	10800104 	addi	r2,r2,4
2008d454:	1007883a 	mov	r3,r2
2008d458:	e0bffd17 	ldw	r2,-12(fp)
2008d45c:	10800817 	ldw	r2,32(r2)
2008d460:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
2008d464:	e0fffe17 	ldw	r3,-8(fp)
2008d468:	e0bfff17 	ldw	r2,-4(fp)
2008d46c:	d8000015 	stw	zero,0(sp)
2008d470:	1809883a 	mov	r4,r3
2008d474:	100b883a 	mov	r5,r2
2008d478:	01880274 	movhi	r6,8201
2008d47c:	31b53904 	addi	r6,r6,-11036
2008d480:	e1fffd17 	ldw	r7,-12(fp)
2008d484:	00900e00 	call	200900e0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
2008d488:	e0bffd17 	ldw	r2,-12(fp)
2008d48c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
2008d490:	e0bffd17 	ldw	r2,-12(fp)
2008d494:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
2008d498:	00800034 	movhi	r2,0
2008d49c:	10887e04 	addi	r2,r2,8696
2008d4a0:	10800017 	ldw	r2,0(r2)
2008d4a4:	1809883a 	mov	r4,r3
2008d4a8:	100b883a 	mov	r5,r2
2008d4ac:	01880274 	movhi	r6,8201
2008d4b0:	31b5ba04 	addi	r6,r6,-10520
2008d4b4:	e1fffd17 	ldw	r7,-12(fp)
2008d4b8:	008fb980 	call	2008fb98 <alt_alarm_start>
2008d4bc:	1000040e 	bge	r2,zero,2008d4d0 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
2008d4c0:	e0fffd17 	ldw	r3,-12(fp)
2008d4c4:	00a00034 	movhi	r2,32768
2008d4c8:	10bfffc4 	addi	r2,r2,-1
2008d4cc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
2008d4d0:	e037883a 	mov	sp,fp
2008d4d4:	dfc00117 	ldw	ra,4(sp)
2008d4d8:	df000017 	ldw	fp,0(sp)
2008d4dc:	dec00204 	addi	sp,sp,8
2008d4e0:	f800283a 	ret

2008d4e4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
2008d4e4:	defff804 	addi	sp,sp,-32
2008d4e8:	df000715 	stw	fp,28(sp)
2008d4ec:	df000704 	addi	fp,sp,28
2008d4f0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
2008d4f4:	e0bfff17 	ldw	r2,-4(fp)
2008d4f8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
2008d4fc:	e0bffb17 	ldw	r2,-20(fp)
2008d500:	10800017 	ldw	r2,0(r2)
2008d504:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
2008d508:	e0bffc17 	ldw	r2,-16(fp)
2008d50c:	10800104 	addi	r2,r2,4
2008d510:	10800037 	ldwio	r2,0(r2)
2008d514:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
2008d518:	e0bffd17 	ldw	r2,-12(fp)
2008d51c:	1080c00c 	andi	r2,r2,768
2008d520:	1000011e 	bne	r2,zero,2008d528 <altera_avalon_jtag_uart_irq+0x44>
      break;
2008d524:	00006c06 	br	2008d6d8 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
2008d528:	e0bffd17 	ldw	r2,-12(fp)
2008d52c:	1080400c 	andi	r2,r2,256
2008d530:	10003426 	beq	r2,zero,2008d604 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
2008d534:	00800074 	movhi	r2,1
2008d538:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
2008d53c:	e0bffb17 	ldw	r2,-20(fp)
2008d540:	10800a17 	ldw	r2,40(r2)
2008d544:	10800044 	addi	r2,r2,1
2008d548:	1081ffcc 	andi	r2,r2,2047
2008d54c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
2008d550:	e0bffb17 	ldw	r2,-20(fp)
2008d554:	10c00b17 	ldw	r3,44(r2)
2008d558:	e0bffe17 	ldw	r2,-8(fp)
2008d55c:	1880011e 	bne	r3,r2,2008d564 <altera_avalon_jtag_uart_irq+0x80>
          break;
2008d560:	00001606 	br	2008d5bc <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
2008d564:	e0bffc17 	ldw	r2,-16(fp)
2008d568:	10800037 	ldwio	r2,0(r2)
2008d56c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
2008d570:	e0bff917 	ldw	r2,-28(fp)
2008d574:	10a0000c 	andi	r2,r2,32768
2008d578:	1000011e 	bne	r2,zero,2008d580 <altera_avalon_jtag_uart_irq+0x9c>
          break;
2008d57c:	00000f06 	br	2008d5bc <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
2008d580:	e0bffb17 	ldw	r2,-20(fp)
2008d584:	10800a17 	ldw	r2,40(r2)
2008d588:	e0fff917 	ldw	r3,-28(fp)
2008d58c:	1809883a 	mov	r4,r3
2008d590:	e0fffb17 	ldw	r3,-20(fp)
2008d594:	1885883a 	add	r2,r3,r2
2008d598:	10800e04 	addi	r2,r2,56
2008d59c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
2008d5a0:	e0bffb17 	ldw	r2,-20(fp)
2008d5a4:	10800a17 	ldw	r2,40(r2)
2008d5a8:	10800044 	addi	r2,r2,1
2008d5ac:	10c1ffcc 	andi	r3,r2,2047
2008d5b0:	e0bffb17 	ldw	r2,-20(fp)
2008d5b4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
2008d5b8:	003fe006 	br	2008d53c <__flash_rwdata_start+0xffffbc0c>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
2008d5bc:	e0bff917 	ldw	r2,-28(fp)
2008d5c0:	10bfffec 	andhi	r2,r2,65535
2008d5c4:	10000f26 	beq	r2,zero,2008d604 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
2008d5c8:	e0bffb17 	ldw	r2,-20(fp)
2008d5cc:	10c00817 	ldw	r3,32(r2)
2008d5d0:	00bfff84 	movi	r2,-2
2008d5d4:	1886703a 	and	r3,r3,r2
2008d5d8:	e0bffb17 	ldw	r2,-20(fp)
2008d5dc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
2008d5e0:	e0bffc17 	ldw	r2,-16(fp)
2008d5e4:	10800104 	addi	r2,r2,4
2008d5e8:	1007883a 	mov	r3,r2
2008d5ec:	e0bffb17 	ldw	r2,-20(fp)
2008d5f0:	10800817 	ldw	r2,32(r2)
2008d5f4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
2008d5f8:	e0bffc17 	ldw	r2,-16(fp)
2008d5fc:	10800104 	addi	r2,r2,4
2008d600:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
2008d604:	e0bffd17 	ldw	r2,-12(fp)
2008d608:	1080800c 	andi	r2,r2,512
2008d60c:	10003126 	beq	r2,zero,2008d6d4 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
2008d610:	e0bffd17 	ldw	r2,-12(fp)
2008d614:	1004d43a 	srli	r2,r2,16
2008d618:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
2008d61c:	00001406 	br	2008d670 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
2008d620:	e0bffc17 	ldw	r2,-16(fp)
2008d624:	e0fffb17 	ldw	r3,-20(fp)
2008d628:	18c00d17 	ldw	r3,52(r3)
2008d62c:	e13ffb17 	ldw	r4,-20(fp)
2008d630:	20c7883a 	add	r3,r4,r3
2008d634:	18c20e04 	addi	r3,r3,2104
2008d638:	18c00003 	ldbu	r3,0(r3)
2008d63c:	18c03fcc 	andi	r3,r3,255
2008d640:	18c0201c 	xori	r3,r3,128
2008d644:	18ffe004 	addi	r3,r3,-128
2008d648:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
2008d64c:	e0bffb17 	ldw	r2,-20(fp)
2008d650:	10800d17 	ldw	r2,52(r2)
2008d654:	10800044 	addi	r2,r2,1
2008d658:	10c1ffcc 	andi	r3,r2,2047
2008d65c:	e0bffb17 	ldw	r2,-20(fp)
2008d660:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
2008d664:	e0bffa17 	ldw	r2,-24(fp)
2008d668:	10bfffc4 	addi	r2,r2,-1
2008d66c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
2008d670:	e0bffa17 	ldw	r2,-24(fp)
2008d674:	10000526 	beq	r2,zero,2008d68c <altera_avalon_jtag_uart_irq+0x1a8>
2008d678:	e0bffb17 	ldw	r2,-20(fp)
2008d67c:	10c00d17 	ldw	r3,52(r2)
2008d680:	e0bffb17 	ldw	r2,-20(fp)
2008d684:	10800c17 	ldw	r2,48(r2)
2008d688:	18bfe51e 	bne	r3,r2,2008d620 <__flash_rwdata_start+0xffffbcf0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
2008d68c:	e0bffa17 	ldw	r2,-24(fp)
2008d690:	10001026 	beq	r2,zero,2008d6d4 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
2008d694:	e0bffb17 	ldw	r2,-20(fp)
2008d698:	10c00817 	ldw	r3,32(r2)
2008d69c:	00bfff44 	movi	r2,-3
2008d6a0:	1886703a 	and	r3,r3,r2
2008d6a4:	e0bffb17 	ldw	r2,-20(fp)
2008d6a8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
2008d6ac:	e0bffb17 	ldw	r2,-20(fp)
2008d6b0:	10800017 	ldw	r2,0(r2)
2008d6b4:	10800104 	addi	r2,r2,4
2008d6b8:	1007883a 	mov	r3,r2
2008d6bc:	e0bffb17 	ldw	r2,-20(fp)
2008d6c0:	10800817 	ldw	r2,32(r2)
2008d6c4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
2008d6c8:	e0bffc17 	ldw	r2,-16(fp)
2008d6cc:	10800104 	addi	r2,r2,4
2008d6d0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
2008d6d4:	003f8c06 	br	2008d508 <__flash_rwdata_start+0xffffbbd8>
}
2008d6d8:	e037883a 	mov	sp,fp
2008d6dc:	df000017 	ldw	fp,0(sp)
2008d6e0:	dec00104 	addi	sp,sp,4
2008d6e4:	f800283a 	ret

2008d6e8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
2008d6e8:	defff804 	addi	sp,sp,-32
2008d6ec:	df000715 	stw	fp,28(sp)
2008d6f0:	df000704 	addi	fp,sp,28
2008d6f4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
2008d6f8:	e0bffb17 	ldw	r2,-20(fp)
2008d6fc:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
2008d700:	e0bff917 	ldw	r2,-28(fp)
2008d704:	10800017 	ldw	r2,0(r2)
2008d708:	10800104 	addi	r2,r2,4
2008d70c:	10800037 	ldwio	r2,0(r2)
2008d710:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
2008d714:	e0bffa17 	ldw	r2,-24(fp)
2008d718:	1081000c 	andi	r2,r2,1024
2008d71c:	10000b26 	beq	r2,zero,2008d74c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
2008d720:	e0bff917 	ldw	r2,-28(fp)
2008d724:	10800017 	ldw	r2,0(r2)
2008d728:	10800104 	addi	r2,r2,4
2008d72c:	1007883a 	mov	r3,r2
2008d730:	e0bff917 	ldw	r2,-28(fp)
2008d734:	10800817 	ldw	r2,32(r2)
2008d738:	10810014 	ori	r2,r2,1024
2008d73c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
2008d740:	e0bff917 	ldw	r2,-28(fp)
2008d744:	10000915 	stw	zero,36(r2)
2008d748:	00000a06 	br	2008d774 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
2008d74c:	e0bff917 	ldw	r2,-28(fp)
2008d750:	10c00917 	ldw	r3,36(r2)
2008d754:	00a00034 	movhi	r2,32768
2008d758:	10bfff04 	addi	r2,r2,-4
2008d75c:	10c00536 	bltu	r2,r3,2008d774 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
2008d760:	e0bff917 	ldw	r2,-28(fp)
2008d764:	10800917 	ldw	r2,36(r2)
2008d768:	10c00044 	addi	r3,r2,1
2008d76c:	e0bff917 	ldw	r2,-28(fp)
2008d770:	10c00915 	stw	r3,36(r2)
2008d774:	00800034 	movhi	r2,0
2008d778:	10887e04 	addi	r2,r2,8696
2008d77c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
2008d780:	e037883a 	mov	sp,fp
2008d784:	df000017 	ldw	fp,0(sp)
2008d788:	dec00104 	addi	sp,sp,4
2008d78c:	f800283a 	ret

2008d790 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
2008d790:	defffd04 	addi	sp,sp,-12
2008d794:	df000215 	stw	fp,8(sp)
2008d798:	df000204 	addi	fp,sp,8
2008d79c:	e13ffe15 	stw	r4,-8(fp)
2008d7a0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
2008d7a4:	00000506 	br	2008d7bc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
2008d7a8:	e0bfff17 	ldw	r2,-4(fp)
2008d7ac:	1090000c 	andi	r2,r2,16384
2008d7b0:	10000226 	beq	r2,zero,2008d7bc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
2008d7b4:	00bffd44 	movi	r2,-11
2008d7b8:	00000b06 	br	2008d7e8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
2008d7bc:	e0bffe17 	ldw	r2,-8(fp)
2008d7c0:	10c00d17 	ldw	r3,52(r2)
2008d7c4:	e0bffe17 	ldw	r2,-8(fp)
2008d7c8:	10800c17 	ldw	r2,48(r2)
2008d7cc:	18800526 	beq	r3,r2,2008d7e4 <altera_avalon_jtag_uart_close+0x54>
2008d7d0:	e0bffe17 	ldw	r2,-8(fp)
2008d7d4:	10c00917 	ldw	r3,36(r2)
2008d7d8:	e0bffe17 	ldw	r2,-8(fp)
2008d7dc:	10800117 	ldw	r2,4(r2)
2008d7e0:	18bff136 	bltu	r3,r2,2008d7a8 <__flash_rwdata_start+0xffffbe78>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
2008d7e4:	0005883a 	mov	r2,zero
}
2008d7e8:	e037883a 	mov	sp,fp
2008d7ec:	df000017 	ldw	fp,0(sp)
2008d7f0:	dec00104 	addi	sp,sp,4
2008d7f4:	f800283a 	ret

2008d7f8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
2008d7f8:	defffa04 	addi	sp,sp,-24
2008d7fc:	df000515 	stw	fp,20(sp)
2008d800:	df000504 	addi	fp,sp,20
2008d804:	e13ffd15 	stw	r4,-12(fp)
2008d808:	e17ffe15 	stw	r5,-8(fp)
2008d80c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
2008d810:	00bff9c4 	movi	r2,-25
2008d814:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
2008d818:	e0bffe17 	ldw	r2,-8(fp)
2008d81c:	10da8060 	cmpeqi	r3,r2,27137
2008d820:	1800031e 	bne	r3,zero,2008d830 <altera_avalon_jtag_uart_ioctl+0x38>
2008d824:	109a80a0 	cmpeqi	r2,r2,27138
2008d828:	1000191e 	bne	r2,zero,2008d890 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
2008d82c:	00002806 	br	2008d8d0 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
2008d830:	e0bffd17 	ldw	r2,-12(fp)
2008d834:	10c00117 	ldw	r3,4(r2)
2008d838:	00a00034 	movhi	r2,32768
2008d83c:	10bfffc4 	addi	r2,r2,-1
2008d840:	18801226 	beq	r3,r2,2008d88c <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
2008d844:	e0bfff17 	ldw	r2,-4(fp)
2008d848:	10800017 	ldw	r2,0(r2)
2008d84c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
2008d850:	e0bffc17 	ldw	r2,-16(fp)
2008d854:	10800090 	cmplti	r2,r2,2
2008d858:	1000061e 	bne	r2,zero,2008d874 <altera_avalon_jtag_uart_ioctl+0x7c>
2008d85c:	e0fffc17 	ldw	r3,-16(fp)
2008d860:	00a00034 	movhi	r2,32768
2008d864:	10bfffc4 	addi	r2,r2,-1
2008d868:	18800226 	beq	r3,r2,2008d874 <altera_avalon_jtag_uart_ioctl+0x7c>
2008d86c:	e0bffc17 	ldw	r2,-16(fp)
2008d870:	00000206 	br	2008d87c <altera_avalon_jtag_uart_ioctl+0x84>
2008d874:	00a00034 	movhi	r2,32768
2008d878:	10bfff84 	addi	r2,r2,-2
2008d87c:	e0fffd17 	ldw	r3,-12(fp)
2008d880:	18800115 	stw	r2,4(r3)
      rc = 0;
2008d884:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
2008d888:	00001106 	br	2008d8d0 <altera_avalon_jtag_uart_ioctl+0xd8>
2008d88c:	00001006 	br	2008d8d0 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
2008d890:	e0bffd17 	ldw	r2,-12(fp)
2008d894:	10c00117 	ldw	r3,4(r2)
2008d898:	00a00034 	movhi	r2,32768
2008d89c:	10bfffc4 	addi	r2,r2,-1
2008d8a0:	18800a26 	beq	r3,r2,2008d8cc <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
2008d8a4:	e0bffd17 	ldw	r2,-12(fp)
2008d8a8:	10c00917 	ldw	r3,36(r2)
2008d8ac:	e0bffd17 	ldw	r2,-12(fp)
2008d8b0:	10800117 	ldw	r2,4(r2)
2008d8b4:	1885803a 	cmpltu	r2,r3,r2
2008d8b8:	10c03fcc 	andi	r3,r2,255
2008d8bc:	e0bfff17 	ldw	r2,-4(fp)
2008d8c0:	10c00015 	stw	r3,0(r2)
      rc = 0;
2008d8c4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
2008d8c8:	00000006 	br	2008d8cc <altera_avalon_jtag_uart_ioctl+0xd4>
2008d8cc:	0001883a 	nop

  default:
    break;
  }

  return rc;
2008d8d0:	e0bffb17 	ldw	r2,-20(fp)
}
2008d8d4:	e037883a 	mov	sp,fp
2008d8d8:	df000017 	ldw	fp,0(sp)
2008d8dc:	dec00104 	addi	sp,sp,4
2008d8e0:	f800283a 	ret

2008d8e4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
2008d8e4:	defff304 	addi	sp,sp,-52
2008d8e8:	dfc00c15 	stw	ra,48(sp)
2008d8ec:	df000b15 	stw	fp,44(sp)
2008d8f0:	df000b04 	addi	fp,sp,44
2008d8f4:	e13ffc15 	stw	r4,-16(fp)
2008d8f8:	e17ffd15 	stw	r5,-12(fp)
2008d8fc:	e1bffe15 	stw	r6,-8(fp)
2008d900:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
2008d904:	e0bffd17 	ldw	r2,-12(fp)
2008d908:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
2008d90c:	00004906 	br	2008da34 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
2008d910:	e0bffc17 	ldw	r2,-16(fp)
2008d914:	10800a17 	ldw	r2,40(r2)
2008d918:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
2008d91c:	e0bffc17 	ldw	r2,-16(fp)
2008d920:	10800b17 	ldw	r2,44(r2)
2008d924:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
2008d928:	e0fff717 	ldw	r3,-36(fp)
2008d92c:	e0bff817 	ldw	r2,-32(fp)
2008d930:	18800536 	bltu	r3,r2,2008d948 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
2008d934:	e0fff717 	ldw	r3,-36(fp)
2008d938:	e0bff817 	ldw	r2,-32(fp)
2008d93c:	1885c83a 	sub	r2,r3,r2
2008d940:	e0bff615 	stw	r2,-40(fp)
2008d944:	00000406 	br	2008d958 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
2008d948:	00c20004 	movi	r3,2048
2008d94c:	e0bff817 	ldw	r2,-32(fp)
2008d950:	1885c83a 	sub	r2,r3,r2
2008d954:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
2008d958:	e0bff617 	ldw	r2,-40(fp)
2008d95c:	1000011e 	bne	r2,zero,2008d964 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
2008d960:	00001d06 	br	2008d9d8 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
2008d964:	e0fffe17 	ldw	r3,-8(fp)
2008d968:	e0bff617 	ldw	r2,-40(fp)
2008d96c:	1880022e 	bgeu	r3,r2,2008d978 <altera_avalon_jtag_uart_read+0x94>
        n = space;
2008d970:	e0bffe17 	ldw	r2,-8(fp)
2008d974:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
2008d978:	e0bff817 	ldw	r2,-32(fp)
2008d97c:	10800e04 	addi	r2,r2,56
2008d980:	e0fffc17 	ldw	r3,-16(fp)
2008d984:	1885883a 	add	r2,r3,r2
2008d988:	e13ff517 	ldw	r4,-44(fp)
2008d98c:	100b883a 	mov	r5,r2
2008d990:	e1bff617 	ldw	r6,-40(fp)
2008d994:	0085c6c0 	call	20085c6c <memcpy>
      ptr   += n;
2008d998:	e0fff517 	ldw	r3,-44(fp)
2008d99c:	e0bff617 	ldw	r2,-40(fp)
2008d9a0:	1885883a 	add	r2,r3,r2
2008d9a4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
2008d9a8:	e0fffe17 	ldw	r3,-8(fp)
2008d9ac:	e0bff617 	ldw	r2,-40(fp)
2008d9b0:	1885c83a 	sub	r2,r3,r2
2008d9b4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
2008d9b8:	e0fff817 	ldw	r3,-32(fp)
2008d9bc:	e0bff617 	ldw	r2,-40(fp)
2008d9c0:	1885883a 	add	r2,r3,r2
2008d9c4:	10c1ffcc 	andi	r3,r2,2047
2008d9c8:	e0bffc17 	ldw	r2,-16(fp)
2008d9cc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
2008d9d0:	e0bffe17 	ldw	r2,-8(fp)
2008d9d4:	00bfce16 	blt	zero,r2,2008d910 <__flash_rwdata_start+0xffffbfe0>

    /* If we read any data then return it */
    if (ptr != buffer)
2008d9d8:	e0fff517 	ldw	r3,-44(fp)
2008d9dc:	e0bffd17 	ldw	r2,-12(fp)
2008d9e0:	18800126 	beq	r3,r2,2008d9e8 <altera_avalon_jtag_uart_read+0x104>
      break;
2008d9e4:	00001506 	br	2008da3c <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
2008d9e8:	e0bfff17 	ldw	r2,-4(fp)
2008d9ec:	1090000c 	andi	r2,r2,16384
2008d9f0:	10000126 	beq	r2,zero,2008d9f8 <altera_avalon_jtag_uart_read+0x114>
      break;
2008d9f4:	00001106 	br	2008da3c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
2008d9f8:	0001883a 	nop
2008d9fc:	e0bffc17 	ldw	r2,-16(fp)
2008da00:	10c00a17 	ldw	r3,40(r2)
2008da04:	e0bff717 	ldw	r2,-36(fp)
2008da08:	1880051e 	bne	r3,r2,2008da20 <altera_avalon_jtag_uart_read+0x13c>
2008da0c:	e0bffc17 	ldw	r2,-16(fp)
2008da10:	10c00917 	ldw	r3,36(r2)
2008da14:	e0bffc17 	ldw	r2,-16(fp)
2008da18:	10800117 	ldw	r2,4(r2)
2008da1c:	18bff736 	bltu	r3,r2,2008d9fc <__flash_rwdata_start+0xffffc0cc>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
2008da20:	e0bffc17 	ldw	r2,-16(fp)
2008da24:	10c00a17 	ldw	r3,40(r2)
2008da28:	e0bff717 	ldw	r2,-36(fp)
2008da2c:	1880011e 	bne	r3,r2,2008da34 <altera_avalon_jtag_uart_read+0x150>
      break;
2008da30:	00000206 	br	2008da3c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
2008da34:	e0bffe17 	ldw	r2,-8(fp)
2008da38:	00bfb516 	blt	zero,r2,2008d910 <__flash_rwdata_start+0xffffbfe0>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
2008da3c:	e0fff517 	ldw	r3,-44(fp)
2008da40:	e0bffd17 	ldw	r2,-12(fp)
2008da44:	18801826 	beq	r3,r2,2008daa8 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2008da48:	0005303a 	rdctl	r2,status
2008da4c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2008da50:	e0fffa17 	ldw	r3,-24(fp)
2008da54:	00bfff84 	movi	r2,-2
2008da58:	1884703a 	and	r2,r3,r2
2008da5c:	1001703a 	wrctl	status,r2
  
  return context;
2008da60:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
2008da64:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
2008da68:	e0bffc17 	ldw	r2,-16(fp)
2008da6c:	10800817 	ldw	r2,32(r2)
2008da70:	10c00054 	ori	r3,r2,1
2008da74:	e0bffc17 	ldw	r2,-16(fp)
2008da78:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
2008da7c:	e0bffc17 	ldw	r2,-16(fp)
2008da80:	10800017 	ldw	r2,0(r2)
2008da84:	10800104 	addi	r2,r2,4
2008da88:	1007883a 	mov	r3,r2
2008da8c:	e0bffc17 	ldw	r2,-16(fp)
2008da90:	10800817 	ldw	r2,32(r2)
2008da94:	18800035 	stwio	r2,0(r3)
2008da98:	e0bff917 	ldw	r2,-28(fp)
2008da9c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2008daa0:	e0bffb17 	ldw	r2,-20(fp)
2008daa4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
2008daa8:	e0fff517 	ldw	r3,-44(fp)
2008daac:	e0bffd17 	ldw	r2,-12(fp)
2008dab0:	18800426 	beq	r3,r2,2008dac4 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
2008dab4:	e0fff517 	ldw	r3,-44(fp)
2008dab8:	e0bffd17 	ldw	r2,-12(fp)
2008dabc:	1885c83a 	sub	r2,r3,r2
2008dac0:	00000606 	br	2008dadc <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
2008dac4:	e0bfff17 	ldw	r2,-4(fp)
2008dac8:	1090000c 	andi	r2,r2,16384
2008dacc:	10000226 	beq	r2,zero,2008dad8 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
2008dad0:	00bffd44 	movi	r2,-11
2008dad4:	00000106 	br	2008dadc <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
2008dad8:	00bffec4 	movi	r2,-5
}
2008dadc:	e037883a 	mov	sp,fp
2008dae0:	dfc00117 	ldw	ra,4(sp)
2008dae4:	df000017 	ldw	fp,0(sp)
2008dae8:	dec00204 	addi	sp,sp,8
2008daec:	f800283a 	ret

2008daf0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
2008daf0:	defff304 	addi	sp,sp,-52
2008daf4:	dfc00c15 	stw	ra,48(sp)
2008daf8:	df000b15 	stw	fp,44(sp)
2008dafc:	df000b04 	addi	fp,sp,44
2008db00:	e13ffc15 	stw	r4,-16(fp)
2008db04:	e17ffd15 	stw	r5,-12(fp)
2008db08:	e1bffe15 	stw	r6,-8(fp)
2008db0c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
2008db10:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
2008db14:	e0bffd17 	ldw	r2,-12(fp)
2008db18:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
2008db1c:	00003806 	br	2008dc00 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
2008db20:	e0bffc17 	ldw	r2,-16(fp)
2008db24:	10800c17 	ldw	r2,48(r2)
2008db28:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
2008db2c:	e0bffc17 	ldw	r2,-16(fp)
2008db30:	10800d17 	ldw	r2,52(r2)
2008db34:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
2008db38:	e0fff817 	ldw	r3,-32(fp)
2008db3c:	e0bff517 	ldw	r2,-44(fp)
2008db40:	1880062e 	bgeu	r3,r2,2008db5c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
2008db44:	e0fff517 	ldw	r3,-44(fp)
2008db48:	e0bff817 	ldw	r2,-32(fp)
2008db4c:	1885c83a 	sub	r2,r3,r2
2008db50:	10bfffc4 	addi	r2,r2,-1
2008db54:	e0bff615 	stw	r2,-40(fp)
2008db58:	00000b06 	br	2008db88 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
2008db5c:	e0bff517 	ldw	r2,-44(fp)
2008db60:	10000526 	beq	r2,zero,2008db78 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
2008db64:	00c20004 	movi	r3,2048
2008db68:	e0bff817 	ldw	r2,-32(fp)
2008db6c:	1885c83a 	sub	r2,r3,r2
2008db70:	e0bff615 	stw	r2,-40(fp)
2008db74:	00000406 	br	2008db88 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
2008db78:	00c1ffc4 	movi	r3,2047
2008db7c:	e0bff817 	ldw	r2,-32(fp)
2008db80:	1885c83a 	sub	r2,r3,r2
2008db84:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
2008db88:	e0bff617 	ldw	r2,-40(fp)
2008db8c:	1000011e 	bne	r2,zero,2008db94 <altera_avalon_jtag_uart_write+0xa4>
        break;
2008db90:	00001d06 	br	2008dc08 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
2008db94:	e0fffe17 	ldw	r3,-8(fp)
2008db98:	e0bff617 	ldw	r2,-40(fp)
2008db9c:	1880022e 	bgeu	r3,r2,2008dba8 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
2008dba0:	e0bffe17 	ldw	r2,-8(fp)
2008dba4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
2008dba8:	e0bff817 	ldw	r2,-32(fp)
2008dbac:	10820e04 	addi	r2,r2,2104
2008dbb0:	e0fffc17 	ldw	r3,-16(fp)
2008dbb4:	1885883a 	add	r2,r3,r2
2008dbb8:	1009883a 	mov	r4,r2
2008dbbc:	e17ffd17 	ldw	r5,-12(fp)
2008dbc0:	e1bff617 	ldw	r6,-40(fp)
2008dbc4:	0085c6c0 	call	20085c6c <memcpy>
      ptr   += n;
2008dbc8:	e0fffd17 	ldw	r3,-12(fp)
2008dbcc:	e0bff617 	ldw	r2,-40(fp)
2008dbd0:	1885883a 	add	r2,r3,r2
2008dbd4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
2008dbd8:	e0fffe17 	ldw	r3,-8(fp)
2008dbdc:	e0bff617 	ldw	r2,-40(fp)
2008dbe0:	1885c83a 	sub	r2,r3,r2
2008dbe4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
2008dbe8:	e0fff817 	ldw	r3,-32(fp)
2008dbec:	e0bff617 	ldw	r2,-40(fp)
2008dbf0:	1885883a 	add	r2,r3,r2
2008dbf4:	10c1ffcc 	andi	r3,r2,2047
2008dbf8:	e0bffc17 	ldw	r2,-16(fp)
2008dbfc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
2008dc00:	e0bffe17 	ldw	r2,-8(fp)
2008dc04:	00bfc616 	blt	zero,r2,2008db20 <__flash_rwdata_start+0xffffc1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2008dc08:	0005303a 	rdctl	r2,status
2008dc0c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2008dc10:	e0fffa17 	ldw	r3,-24(fp)
2008dc14:	00bfff84 	movi	r2,-2
2008dc18:	1884703a 	and	r2,r3,r2
2008dc1c:	1001703a 	wrctl	status,r2
  
  return context;
2008dc20:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
2008dc24:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
2008dc28:	e0bffc17 	ldw	r2,-16(fp)
2008dc2c:	10800817 	ldw	r2,32(r2)
2008dc30:	10c00094 	ori	r3,r2,2
2008dc34:	e0bffc17 	ldw	r2,-16(fp)
2008dc38:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
2008dc3c:	e0bffc17 	ldw	r2,-16(fp)
2008dc40:	10800017 	ldw	r2,0(r2)
2008dc44:	10800104 	addi	r2,r2,4
2008dc48:	1007883a 	mov	r3,r2
2008dc4c:	e0bffc17 	ldw	r2,-16(fp)
2008dc50:	10800817 	ldw	r2,32(r2)
2008dc54:	18800035 	stwio	r2,0(r3)
2008dc58:	e0bff917 	ldw	r2,-28(fp)
2008dc5c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2008dc60:	e0bffb17 	ldw	r2,-20(fp)
2008dc64:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
2008dc68:	e0bffe17 	ldw	r2,-8(fp)
2008dc6c:	0080120e 	bge	zero,r2,2008dcb8 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
2008dc70:	e0bfff17 	ldw	r2,-4(fp)
2008dc74:	1090000c 	andi	r2,r2,16384
2008dc78:	10000126 	beq	r2,zero,2008dc80 <altera_avalon_jtag_uart_write+0x190>
        break;
2008dc7c:	00001006 	br	2008dcc0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
2008dc80:	0001883a 	nop
2008dc84:	e0bffc17 	ldw	r2,-16(fp)
2008dc88:	10c00d17 	ldw	r3,52(r2)
2008dc8c:	e0bff517 	ldw	r2,-44(fp)
2008dc90:	1880051e 	bne	r3,r2,2008dca8 <altera_avalon_jtag_uart_write+0x1b8>
2008dc94:	e0bffc17 	ldw	r2,-16(fp)
2008dc98:	10c00917 	ldw	r3,36(r2)
2008dc9c:	e0bffc17 	ldw	r2,-16(fp)
2008dca0:	10800117 	ldw	r2,4(r2)
2008dca4:	18bff736 	bltu	r3,r2,2008dc84 <__flash_rwdata_start+0xffffc354>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
2008dca8:	e0bffc17 	ldw	r2,-16(fp)
2008dcac:	10800917 	ldw	r2,36(r2)
2008dcb0:	10000126 	beq	r2,zero,2008dcb8 <altera_avalon_jtag_uart_write+0x1c8>
         break;
2008dcb4:	00000206 	br	2008dcc0 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
2008dcb8:	e0bffe17 	ldw	r2,-8(fp)
2008dcbc:	00bf9716 	blt	zero,r2,2008db1c <__flash_rwdata_start+0xffffc1ec>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
2008dcc0:	e0fffd17 	ldw	r3,-12(fp)
2008dcc4:	e0bff717 	ldw	r2,-36(fp)
2008dcc8:	18800426 	beq	r3,r2,2008dcdc <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
2008dccc:	e0fffd17 	ldw	r3,-12(fp)
2008dcd0:	e0bff717 	ldw	r2,-36(fp)
2008dcd4:	1885c83a 	sub	r2,r3,r2
2008dcd8:	00000606 	br	2008dcf4 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
2008dcdc:	e0bfff17 	ldw	r2,-4(fp)
2008dce0:	1090000c 	andi	r2,r2,16384
2008dce4:	10000226 	beq	r2,zero,2008dcf0 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
2008dce8:	00bffd44 	movi	r2,-11
2008dcec:	00000106 	br	2008dcf4 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
2008dcf0:	00bffec4 	movi	r2,-5
}
2008dcf4:	e037883a 	mov	sp,fp
2008dcf8:	dfc00117 	ldw	ra,4(sp)
2008dcfc:	df000017 	ldw	fp,0(sp)
2008dd00:	dec00204 	addi	sp,sp,8
2008dd04:	f800283a 	ret

2008dd08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2008dd08:	defffe04 	addi	sp,sp,-8
2008dd0c:	dfc00115 	stw	ra,4(sp)
2008dd10:	df000015 	stw	fp,0(sp)
2008dd14:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2008dd18:	00800034 	movhi	r2,0
2008dd1c:	10886904 	addi	r2,r2,8612
2008dd20:	10800017 	ldw	r2,0(r2)
2008dd24:	10000526 	beq	r2,zero,2008dd3c <alt_get_errno+0x34>
2008dd28:	00800034 	movhi	r2,0
2008dd2c:	10886904 	addi	r2,r2,8612
2008dd30:	10800017 	ldw	r2,0(r2)
2008dd34:	103ee83a 	callr	r2
2008dd38:	00000206 	br	2008dd44 <alt_get_errno+0x3c>
2008dd3c:	00800034 	movhi	r2,0
2008dd40:	10887404 	addi	r2,r2,8656
}
2008dd44:	e037883a 	mov	sp,fp
2008dd48:	dfc00117 	ldw	ra,4(sp)
2008dd4c:	df000017 	ldw	fp,0(sp)
2008dd50:	dec00204 	addi	sp,sp,8
2008dd54:	f800283a 	ret

2008dd58 <alt_msgdma_write_standard_descriptor>:
 */
static int alt_msgdma_write_standard_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_standard_descriptor *descriptor)
{
2008dd58:	defffc04 	addi	sp,sp,-16
2008dd5c:	df000315 	stw	fp,12(sp)
2008dd60:	df000304 	addi	fp,sp,12
2008dd64:	e13ffd15 	stw	r4,-12(fp)
2008dd68:	e17ffe15 	stw	r5,-8(fp)
2008dd6c:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
2008dd70:	e0bffd17 	ldw	r2,-12(fp)
2008dd74:	10800037 	ldwio	r2,0(r2)
2008dd78:	1080010c 	andi	r2,r2,4
2008dd7c:	10000226 	beq	r2,zero,2008dd88 <alt_msgdma_write_standard_descriptor+0x30>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
		is non-blocking*/
        return -ENOSPC;
2008dd80:	00bff904 	movi	r2,-28
2008dd84:	00001506 	br	2008dddc <alt_msgdma_write_standard_descriptor+0x84>
    }

	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base, 
2008dd88:	e0bfff17 	ldw	r2,-4(fp)
2008dd8c:	10800017 	ldw	r2,0(r2)
2008dd90:	1007883a 	mov	r3,r2
2008dd94:	e0bffe17 	ldw	r2,-8(fp)
2008dd98:	10c00035 	stwio	r3,0(r2)
		(alt_u32)descriptor->read_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base, 
2008dd9c:	e0bffe17 	ldw	r2,-8(fp)
2008dda0:	10800104 	addi	r2,r2,4
2008dda4:	e0ffff17 	ldw	r3,-4(fp)
2008dda8:	18c00117 	ldw	r3,4(r3)
2008ddac:	10c00035 	stwio	r3,0(r2)
	(	alt_u32)descriptor->write_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base, 
2008ddb0:	e0bffe17 	ldw	r2,-8(fp)
2008ddb4:	10800204 	addi	r2,r2,8
2008ddb8:	e0ffff17 	ldw	r3,-4(fp)
2008ddbc:	18c00217 	ldw	r3,8(r3)
2008ddc0:	10c00035 	stwio	r3,0(r2)
		descriptor->transfer_length);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_STANDARD(descriptor_base, 
2008ddc4:	e0bffe17 	ldw	r2,-8(fp)
2008ddc8:	10800304 	addi	r2,r2,12
2008ddcc:	e0ffff17 	ldw	r3,-4(fp)
2008ddd0:	18c00317 	ldw	r3,12(r3)
2008ddd4:	10c00035 	stwio	r3,0(r2)
		descriptor->control);
        return 0;
2008ddd8:	0005883a 	mov	r2,zero
}
2008dddc:	e037883a 	mov	sp,fp
2008dde0:	df000017 	ldw	fp,0(sp)
2008dde4:	dec00104 	addi	sp,sp,4
2008dde8:	f800283a 	ret

2008ddec <alt_msgdma_write_extended_descriptor>:
 */
static int alt_msgdma_write_extended_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_extended_descriptor *descriptor)
{
2008ddec:	defffc04 	addi	sp,sp,-16
2008ddf0:	df000315 	stw	fp,12(sp)
2008ddf4:	df000304 	addi	fp,sp,12
2008ddf8:	e13ffd15 	stw	r4,-12(fp)
2008ddfc:	e17ffe15 	stw	r5,-8(fp)
2008de00:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
2008de04:	e0bffd17 	ldw	r2,-12(fp)
2008de08:	10800037 	ldwio	r2,0(r2)
2008de0c:	1080010c 	andi	r2,r2,4
2008de10:	10000226 	beq	r2,zero,2008de1c <alt_msgdma_write_extended_descriptor+0x30>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
	is non-blocking*/
        return -ENOSPC;
2008de14:	00bff904 	movi	r2,-28
2008de18:	00003b06 	br	2008df08 <alt_msgdma_write_extended_descriptor+0x11c>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(
2008de1c:	e0bfff17 	ldw	r2,-4(fp)
2008de20:	10800017 	ldw	r2,0(r2)
2008de24:	1007883a 	mov	r3,r2
2008de28:	e0bffe17 	ldw	r2,-8(fp)
2008de2c:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	(alt_u32)descriptor->read_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(
2008de30:	e0bffe17 	ldw	r2,-8(fp)
2008de34:	10800104 	addi	r2,r2,4
2008de38:	e0ffff17 	ldw	r3,-4(fp)
2008de3c:	18c00117 	ldw	r3,4(r3)
2008de40:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
		(alt_u32)descriptor->write_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(
2008de44:	e0bffe17 	ldw	r2,-8(fp)
2008de48:	10800204 	addi	r2,r2,8
2008de4c:	e0ffff17 	ldw	r3,-4(fp)
2008de50:	18c00217 	ldw	r3,8(r3)
2008de54:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(
2008de58:	e0bffe17 	ldw	r2,-8(fp)
2008de5c:	10800304 	addi	r2,r2,12
2008de60:	e0ffff17 	ldw	r3,-4(fp)
2008de64:	18c0030b 	ldhu	r3,12(r3)
2008de68:	18ffffcc 	andi	r3,r3,65535
2008de6c:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->sequence_number);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(
2008de70:	e0bffe17 	ldw	r2,-8(fp)
2008de74:	10800384 	addi	r2,r2,14
2008de78:	e0ffff17 	ldw	r3,-4(fp)
2008de7c:	18c00383 	ldbu	r3,14(r3)
2008de80:	18c03fcc 	andi	r3,r3,255
2008de84:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(
2008de88:	e0bffe17 	ldw	r2,-8(fp)
2008de8c:	108003c4 	addi	r2,r2,15
2008de90:	e0ffff17 	ldw	r3,-4(fp)
2008de94:	18c003c3 	ldbu	r3,15(r3)
2008de98:	18c03fcc 	andi	r3,r3,255
2008de9c:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(
2008dea0:	e0bffe17 	ldw	r2,-8(fp)
2008dea4:	10800404 	addi	r2,r2,16
2008dea8:	e0ffff17 	ldw	r3,-4(fp)
2008deac:	18c0040b 	ldhu	r3,16(r3)
2008deb0:	18ffffcc 	andi	r3,r3,65535
2008deb4:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(
2008deb8:	e0bffe17 	ldw	r2,-8(fp)
2008debc:	10800484 	addi	r2,r2,18
2008dec0:	e0ffff17 	ldw	r3,-4(fp)
2008dec4:	18c0048b 	ldhu	r3,18(r3)
2008dec8:	18ffffcc 	andi	r3,r3,65535
2008decc:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base, 0);
2008ded0:	e0bffe17 	ldw	r2,-8(fp)
2008ded4:	10800504 	addi	r2,r2,20
2008ded8:	0007883a 	mov	r3,zero
2008dedc:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base, 0);
2008dee0:	e0bffe17 	ldw	r2,-8(fp)
2008dee4:	10800604 	addi	r2,r2,24
2008dee8:	0007883a 	mov	r3,zero
2008deec:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(
2008def0:	e0bffe17 	ldw	r2,-8(fp)
2008def4:	10800704 	addi	r2,r2,28
2008def8:	e0ffff17 	ldw	r3,-4(fp)
2008defc:	18c00717 	ldw	r3,28(r3)
2008df00:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->control);
    return 0;
2008df04:	0005883a 	mov	r2,zero
}
2008df08:	e037883a 	mov	sp,fp
2008df0c:	df000017 	ldw	fp,0(sp)
2008df10:	dec00104 	addi	sp,sp,4
2008df14:	f800283a 	ret

2008df18 <alt_msgdma_irq>:
 * alt_msgdma_irq()
 *
 * Interrupt handler for the Modular Scatter-Gather DMA controller.
 */
static void alt_msgdma_irq(void *context)
{
2008df18:	defff804 	addi	sp,sp,-32
2008df1c:	dfc00715 	stw	ra,28(sp)
2008df20:	df000615 	stw	fp,24(sp)
2008df24:	df000604 	addi	fp,sp,24
2008df28:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev *dev = (alt_msgdma_dev *) context;
2008df2c:	e0bfff17 	ldw	r2,-4(fp)
2008df30:	e0bffa15 	stw	r2,-24(fp)
    alt_irq_context cpu_sr;
    alt_u32 temporary_control;

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
2008df34:	e0bffa17 	ldw	r2,-24(fp)
2008df38:	10801783 	ldbu	r2,94(r2)
2008df3c:	10803fcc 	andi	r2,r2,255
2008df40:	10001126 	beq	r2,zero,2008df88 <alt_msgdma_irq+0x70>
    {
        temporary_control = 
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
2008df44:	e0bffa17 	ldw	r2,-24(fp)
2008df48:	10800617 	ldw	r2,24(r2)
2008df4c:	10800037 	ldwio	r2,0(r2)

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
    {
        temporary_control = 
2008df50:	1007883a 	mov	r3,r2
2008df54:	00bffdc4 	movi	r2,-9
2008df58:	1884703a 	and	r2,r3,r2
2008df5c:	e0bffb15 	stw	r2,-20(fp)
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				& ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
2008df60:	e0bffa17 	ldw	r2,-24(fp)
2008df64:	10800617 	ldw	r2,24(r2)
2008df68:	e0fffb17 	ldw	r3,-20(fp)
2008df6c:	10c00035 	stwio	r3,0(r2)
        		temporary_control);
        
        /* clear the IRQ status- W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base,
2008df70:	e0bffa17 	ldw	r2,-24(fp)
2008df74:	10800617 	ldw	r2,24(r2)
2008df78:	10800404 	addi	r2,r2,16
2008df7c:	00c00044 	movi	r3,1
2008df80:	10c00035 	stwio	r3,0(r2)
2008df84:	00001106 	br	2008dfcc <alt_msgdma_irq+0xb4>
        		ALT_MSGDMA_PREFETCHER_STATUS_IRQ_SET_MASK);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
2008df88:	e0bffa17 	ldw	r2,-24(fp)
2008df8c:	10800317 	ldw	r2,12(r2)
2008df90:	10800104 	addi	r2,r2,4
2008df94:	10800037 	ldwio	r2,0(r2)
2008df98:	1007883a 	mov	r3,r2
2008df9c:	00bffbc4 	movi	r2,-17
2008dfa0:	1884703a 	and	r2,r3,r2
2008dfa4:	e0bffb15 	stw	r2,-20(fp)
    			& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
2008dfa8:	e0bffa17 	ldw	r2,-24(fp)
2008dfac:	10800317 	ldw	r2,12(r2)
2008dfb0:	10800104 	addi	r2,r2,4
2008dfb4:	e0fffb17 	ldw	r3,-20(fp)
2008dfb8:	10c00035 	stwio	r3,0(r2)
    	/* clear the IRQ status */
    	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
2008dfbc:	e0bffa17 	ldw	r2,-24(fp)
2008dfc0:	10800317 	ldw	r2,12(r2)
2008dfc4:	00c08004 	movi	r3,512
2008dfc8:	10c00035 	stwio	r3,0(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
2008dfcc:	e0bffa17 	ldw	r2,-24(fp)
2008dfd0:	10800b17 	ldw	r2,44(r2)
2008dfd4:	10001226 	beq	r2,zero,2008e020 <alt_msgdma_irq+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2008dfd8:	0005303a 	rdctl	r2,status
2008dfdc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2008dfe0:	e0fffd17 	ldw	r3,-12(fp)
2008dfe4:	00bfff84 	movi	r2,-2
2008dfe8:	1884703a 	and	r2,r3,r2
2008dfec:	1001703a 	wrctl	status,r2
  
  return context;
2008dff0:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
2008dff4:	e0bffc15 	stw	r2,-16(fp)
        dev->callback (dev->callback_context);
2008dff8:	e0bffa17 	ldw	r2,-24(fp)
2008dffc:	10800b17 	ldw	r2,44(r2)
2008e000:	e0fffa17 	ldw	r3,-24(fp)
2008e004:	18c00c17 	ldw	r3,48(r3)
2008e008:	1809883a 	mov	r4,r3
2008e00c:	103ee83a 	callr	r2
2008e010:	e0bffc17 	ldw	r2,-16(fp)
2008e014:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2008e018:	e0bffe17 	ldw	r2,-8(fp)
2008e01c:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
2008e020:	e0bffa17 	ldw	r2,-24(fp)
2008e024:	10801783 	ldbu	r2,94(r2)
2008e028:	10803fcc 	andi	r2,r2,255
2008e02c:	10000a26 	beq	r2,zero,2008e058 <alt_msgdma_irq+0x140>
    {
    	temporary_control = 
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
2008e030:	e0bffa17 	ldw	r2,-24(fp)
2008e034:	10800617 	ldw	r2,24(r2)
2008e038:	10800037 	ldwio	r2,0(r2)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
2008e03c:	10800214 	ori	r2,r2,8
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
    {
    	temporary_control = 
2008e040:	e0bffb15 	stw	r2,-20(fp)
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
    	
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
2008e044:	e0bffa17 	ldw	r2,-24(fp)
2008e048:	10800617 	ldw	r2,24(r2)
2008e04c:	e0fffb17 	ldw	r3,-20(fp)
2008e050:	10c00035 	stwio	r3,0(r2)
2008e054:	00000b06 	br	2008e084 <alt_msgdma_irq+0x16c>
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
2008e058:	e0bffa17 	ldw	r2,-24(fp)
2008e05c:	10800317 	ldw	r2,12(r2)
2008e060:	10800104 	addi	r2,r2,4
2008e064:	10800037 	ldwio	r2,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
2008e068:	10800414 	ori	r2,r2,16
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
2008e06c:	e0bffb15 	stw	r2,-20(fp)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
2008e070:	e0bffa17 	ldw	r2,-24(fp)
2008e074:	10800317 	ldw	r2,12(r2)
2008e078:	10800104 	addi	r2,r2,4
2008e07c:	e0fffb17 	ldw	r3,-20(fp)
2008e080:	10c00035 	stwio	r3,0(r2)
    }

    return;
2008e084:	0001883a 	nop
}
2008e088:	e037883a 	mov	sp,fp
2008e08c:	dfc00117 	ldw	ra,4(sp)
2008e090:	df000017 	ldw	fp,0(sp)
2008e094:	dec00204 	addi	sp,sp,8
2008e098:	f800283a 	ret

2008e09c <alt_msgdma_construct_standard_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
2008e09c:	defffb04 	addi	sp,sp,-20
2008e0a0:	df000415 	stw	fp,16(sp)
2008e0a4:	df000404 	addi	fp,sp,16
2008e0a8:	e13ffc15 	stw	r4,-16(fp)
2008e0ac:	e17ffd15 	stw	r5,-12(fp)
2008e0b0:	e1bffe15 	stw	r6,-8(fp)
2008e0b4:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
2008e0b8:	e0bffc17 	ldw	r2,-16(fp)
2008e0bc:	10c01217 	ldw	r3,72(r2)
2008e0c0:	e0800117 	ldw	r2,4(fp)
2008e0c4:	18800436 	bltu	r3,r2,2008e0d8 <alt_msgdma_construct_standard_descriptor+0x3c>
       dev->enhanced_features != 0
2008e0c8:	e0bffc17 	ldw	r2,-16(fp)
2008e0cc:	10801703 	ldbu	r2,92(r2)
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
2008e0d0:	10803fcc 	andi	r2,r2,255
2008e0d4:	10000226 	beq	r2,zero,2008e0e0 <alt_msgdma_construct_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
2008e0d8:	00bffa84 	movi	r2,-22
2008e0dc:	00000e06 	br	2008e118 <alt_msgdma_construct_standard_descriptor+0x7c>
    }
    descriptor->read_address = read_address;
2008e0e0:	e0bffd17 	ldw	r2,-12(fp)
2008e0e4:	e0fffe17 	ldw	r3,-8(fp)
2008e0e8:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
2008e0ec:	e0bffd17 	ldw	r2,-12(fp)
2008e0f0:	e0ffff17 	ldw	r3,-4(fp)
2008e0f4:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
2008e0f8:	e0bffd17 	ldw	r2,-12(fp)
2008e0fc:	e0c00117 	ldw	r3,4(fp)
2008e100:	10c00215 	stw	r3,8(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
2008e104:	e0800217 	ldw	r2,8(fp)
2008e108:	10e00034 	orhi	r3,r2,32768
2008e10c:	e0bffd17 	ldw	r2,-12(fp)
2008e110:	10c00315 	stw	r3,12(r2)
    
    return 0;
2008e114:	0005883a 	mov	r2,zero
}
2008e118:	e037883a 	mov	sp,fp
2008e11c:	df000017 	ldw	fp,0(sp)
2008e120:	dec00104 	addi	sp,sp,4
2008e124:	f800283a 	ret

2008e128 <alt_msgdma_construct_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
2008e128:	defff604 	addi	sp,sp,-40
2008e12c:	df000915 	stw	fp,36(sp)
2008e130:	df000904 	addi	fp,sp,36
2008e134:	e13ff715 	stw	r4,-36(fp)
2008e138:	e17ff815 	stw	r5,-32(fp)
2008e13c:	e1bff915 	stw	r6,-28(fp)
2008e140:	e1fffa15 	stw	r7,-24(fp)
2008e144:	e1800317 	ldw	r6,12(fp)
2008e148:	e1400417 	ldw	r5,16(fp)
2008e14c:	e1000517 	ldw	r4,20(fp)
2008e150:	e0c00617 	ldw	r3,24(fp)
2008e154:	e0800717 	ldw	r2,28(fp)
2008e158:	e1bffb0d 	sth	r6,-20(fp)
2008e15c:	e17ffc05 	stb	r5,-16(fp)
2008e160:	e13ffd05 	stb	r4,-12(fp)
2008e164:	e0fffe0d 	sth	r3,-8(fp)
2008e168:	e0bfff0d 	sth	r2,-4(fp)
    if(dev->max_byte < length ||
2008e16c:	e0bff717 	ldw	r2,-36(fp)
2008e170:	10c01217 	ldw	r3,72(r2)
2008e174:	e0800117 	ldw	r2,4(fp)
2008e178:	18801936 	bltu	r3,r2,2008e1e0 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
2008e17c:	e13ff717 	ldw	r4,-36(fp)
2008e180:	20801317 	ldw	r2,76(r4)
2008e184:	20c01417 	ldw	r3,80(r4)
2008e188:	e13ffe0b 	ldhu	r4,-8(fp)
2008e18c:	213fffcc 	andi	r4,r4,65535
2008e190:	2015883a 	mov	r10,r4
2008e194:	0017883a 	mov	r11,zero
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
2008e198:	1ac01136 	bltu	r3,r11,2008e1e0 <alt_msgdma_construct_extended_descriptor+0xb8>
2008e19c:	58c0011e 	bne	r11,r3,2008e1a4 <alt_msgdma_construct_extended_descriptor+0x7c>
2008e1a0:	12800f36 	bltu	r2,r10,2008e1e0 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
2008e1a4:	e13ff717 	ldw	r4,-36(fp)
2008e1a8:	20801317 	ldw	r2,76(r4)
2008e1ac:	20c01417 	ldw	r3,80(r4)
2008e1b0:	e13fff0b 	ldhu	r4,-4(fp)
2008e1b4:	213fffcc 	andi	r4,r4,65535
2008e1b8:	2011883a 	mov	r8,r4
2008e1bc:	0013883a 	mov	r9,zero
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
2008e1c0:	1a400736 	bltu	r3,r9,2008e1e0 <alt_msgdma_construct_extended_descriptor+0xb8>
2008e1c4:	48c0011e 	bne	r9,r3,2008e1cc <alt_msgdma_construct_extended_descriptor+0xa4>
2008e1c8:	12000536 	bltu	r2,r8,2008e1e0 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
2008e1cc:	e0bff717 	ldw	r2,-36(fp)
2008e1d0:	10801703 	ldbu	r2,92(r2)
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
2008e1d4:	10803fcc 	andi	r2,r2,255
2008e1d8:	10800060 	cmpeqi	r2,r2,1
2008e1dc:	1000021e 	bne	r2,zero,2008e1e8 <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
2008e1e0:	00bffa84 	movi	r2,-22
2008e1e4:	00002106 	br	2008e26c <alt_msgdma_construct_extended_descriptor+0x144>
    }
    
    descriptor->read_address_low = read_address;
2008e1e8:	e0bff817 	ldw	r2,-32(fp)
2008e1ec:	e0fff917 	ldw	r3,-28(fp)
2008e1f0:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_low = write_address;
2008e1f4:	e0bff817 	ldw	r2,-32(fp)
2008e1f8:	e0fffa17 	ldw	r3,-24(fp)
2008e1fc:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
2008e200:	e0bff817 	ldw	r2,-32(fp)
2008e204:	e0c00117 	ldw	r3,4(fp)
2008e208:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
2008e20c:	e0bff817 	ldw	r2,-32(fp)
2008e210:	e0fffb0b 	ldhu	r3,-20(fp)
2008e214:	10c0030d 	sth	r3,12(r2)
    descriptor->read_burst_count = read_burst_count;
2008e218:	e0bff817 	ldw	r2,-32(fp)
2008e21c:	e0fffc03 	ldbu	r3,-16(fp)
2008e220:	10c00385 	stb	r3,14(r2)
    descriptor->write_burst_count = write_burst_count;
2008e224:	e0bff817 	ldw	r2,-32(fp)
2008e228:	e0fffd03 	ldbu	r3,-12(fp)
2008e22c:	10c003c5 	stb	r3,15(r2)
    descriptor->read_stride = read_stride;
2008e230:	e0bff817 	ldw	r2,-32(fp)
2008e234:	e0fffe0b 	ldhu	r3,-8(fp)
2008e238:	10c0040d 	sth	r3,16(r2)
    descriptor->write_stride = write_stride;
2008e23c:	e0bff817 	ldw	r2,-32(fp)
2008e240:	e0ffff0b 	ldhu	r3,-4(fp)
2008e244:	10c0048d 	sth	r3,18(r2)
    descriptor->read_address_high = NULL;
2008e248:	e0bff817 	ldw	r2,-32(fp)
2008e24c:	10000515 	stw	zero,20(r2)
    descriptor->write_address_high = NULL;
2008e250:	e0bff817 	ldw	r2,-32(fp)
2008e254:	10000615 	stw	zero,24(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
2008e258:	e0800217 	ldw	r2,8(fp)
2008e25c:	10e00034 	orhi	r3,r2,32768
2008e260:	e0bff817 	ldw	r2,-32(fp)
2008e264:	10c00715 	stw	r3,28(r2)

  return 0 ;
2008e268:	0005883a 	mov	r2,zero

}
2008e26c:	e037883a 	mov	sp,fp
2008e270:	df000017 	ldw	fp,0(sp)
2008e274:	dec00104 	addi	sp,sp,4
2008e278:	f800283a 	ret

2008e27c <alt_msgdma_descriptor_async_transfer>:
 */
static int alt_msgdma_descriptor_async_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
2008e27c:	defff004 	addi	sp,sp,-64
2008e280:	dfc00f15 	stw	ra,60(sp)
2008e284:	df000e15 	stw	fp,56(sp)
2008e288:	df000e04 	addi	fp,sp,56
2008e28c:	e13ffd15 	stw	r4,-12(fp)
2008e290:	e17ffe15 	stw	r5,-8(fp)
2008e294:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control = 0;
2008e298:	e03ff315 	stw	zero,-52(fp)
    alt_irq_context context = 0;
2008e29c:	e03ff415 	stw	zero,-48(fp)
    alt_u16 counter = 0;
2008e2a0:	e03ff20d 	sth	zero,-56(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
2008e2a4:	e0bffd17 	ldw	r2,-12(fp)
2008e2a8:	10800317 	ldw	r2,12(r2)
2008e2ac:	10800204 	addi	r2,r2,8
2008e2b0:	10800037 	ldwio	r2,0(r2)
	alt_msgdma_extended_descriptor *extended_desc)
{
    alt_u32 control = 0;
    alt_irq_context context = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
2008e2b4:	10bfffcc 	andi	r2,r2,65535
2008e2b8:	e0bff515 	stw	r2,-44(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
2008e2bc:	e0bffd17 	ldw	r2,-12(fp)
2008e2c0:	10800317 	ldw	r2,12(r2)
2008e2c4:	10800204 	addi	r2,r2,8
2008e2c8:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
2008e2cc:	1004d43a 	srli	r2,r2,16
2008e2d0:	e0bff615 	stw	r2,-40(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
2008e2d4:	e0bffd17 	ldw	r2,-12(fp)
2008e2d8:	10800917 	ldw	r2,36(r2)
2008e2dc:	e0fff617 	ldw	r3,-40(fp)
2008e2e0:	1880042e 	bgeu	r3,r2,2008e2f4 <alt_msgdma_descriptor_async_transfer+0x78>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
2008e2e4:	e0bffd17 	ldw	r2,-12(fp)
2008e2e8:	10800917 	ldw	r2,36(r2)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
2008e2ec:	e0fff517 	ldw	r3,-44(fp)
2008e2f0:	18800236 	bltu	r3,r2,2008e2fc <alt_msgdma_descriptor_async_transfer+0x80>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
	{
		/*at least one write or read FIFO descriptor buffer is full,
		returning so that this function is non-blocking*/
		return -ENOSPC;
2008e2f4:	00bff904 	movi	r2,-28
2008e2f8:	00008f06 	br	2008e538 <alt_msgdma_descriptor_async_transfer+0x2bc>
	ALT_SEM_PEND (dev->regs_lock, 0);
	
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	read or write masters  */
	/* stop issuing more descriptors */
	control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
2008e2fc:	00800804 	movi	r2,32
2008e300:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2008e304:	0005303a 	rdctl	r2,status
2008e308:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2008e30c:	e0fff717 	ldw	r3,-36(fp)
2008e310:	00bfff84 	movi	r2,-2
2008e314:	1884703a 	and	r2,r3,r2
2008e318:	1001703a 	wrctl	status,r2
  
  return context;
2008e31c:	e0bff717 	ldw	r2,-36(fp)
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
2008e320:	e0bff415 	stw	r2,-48(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
2008e324:	e0bffd17 	ldw	r2,-12(fp)
2008e328:	10800317 	ldw	r2,12(r2)
2008e32c:	10800104 	addi	r2,r2,4
2008e330:	e0fff317 	ldw	r3,-52(fp)
2008e334:	10c00035 	stwio	r3,0(r2)
	/*
	* Clear any (previous) status register information
	* that might occlude our error checking later.
	*/
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
2008e338:	e0bffd17 	ldw	r2,-12(fp)
2008e33c:	10800317 	ldw	r2,12(r2)
2008e340:	e0fffd17 	ldw	r3,-12(fp)
2008e344:	18c00317 	ldw	r3,12(r3)
2008e348:	18c00037 	ldwio	r3,0(r3)
2008e34c:	10c00035 	stwio	r3,0(r2)
2008e350:	e0bff417 	ldw	r2,-48(fp)
2008e354:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2008e358:	e0bff817 	ldw	r2,-32(fp)
2008e35c:	1001703a 	wrctl	status,r2
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
2008e360:	e0bffe17 	ldw	r2,-8(fp)
2008e364:	10001a26 	beq	r2,zero,2008e3d0 <alt_msgdma_descriptor_async_transfer+0x154>
2008e368:	e0bfff17 	ldw	r2,-4(fp)
2008e36c:	1000181e 	bne	r2,zero,2008e3d0 <alt_msgdma_descriptor_async_transfer+0x154>
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
2008e370:	00000d06 	br	2008e3a8 <alt_msgdma_descriptor_async_transfer+0x12c>
		dev->csr_base, dev->descriptor_base, standard_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
2008e374:	01000044 	movi	r4,1
2008e378:	008fcd80 	call	2008fcd8 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
2008e37c:	e0bff20b 	ldhu	r2,-56(fp)
2008e380:	1084e230 	cmpltui	r2,r2,5000
2008e384:	1000051e 	bne	r2,zero,2008e39c <alt_msgdma_descriptor_async_transfer+0x120>
            {
                alt_printf("time out after 5 msec while waiting" 
2008e388:	01000034 	movhi	r4,0
2008e38c:	2100ef04 	addi	r4,r4,956
2008e390:	009075c0 	call	2009075c <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
2008e394:	00bff084 	movi	r2,-62
2008e398:	00006706 	br	2008e538 <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
2008e39c:	e0bff20b 	ldhu	r2,-56(fp)
2008e3a0:	10800044 	addi	r2,r2,1
2008e3a4:	e0bff20d 	sth	r2,-56(fp)

    if (NULL != standard_desc && NULL == extended_desc)
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
2008e3a8:	e0bffd17 	ldw	r2,-12(fp)
2008e3ac:	10c00317 	ldw	r3,12(r2)
2008e3b0:	e0bffd17 	ldw	r2,-12(fp)
2008e3b4:	10800417 	ldw	r2,16(r2)
2008e3b8:	1809883a 	mov	r4,r3
2008e3bc:	100b883a 	mov	r5,r2
2008e3c0:	e1bffe17 	ldw	r6,-8(fp)
2008e3c4:	008dd580 	call	2008dd58 <alt_msgdma_write_standard_descriptor>
2008e3c8:	103fea1e 	bne	r2,zero,2008e374 <__flash_rwdata_start+0xffffca44>
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
2008e3cc:	00001f06 	br	2008e44c <alt_msgdma_descriptor_async_transfer+0x1d0>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
2008e3d0:	e0bffe17 	ldw	r2,-8(fp)
2008e3d4:	10001b1e 	bne	r2,zero,2008e444 <alt_msgdma_descriptor_async_transfer+0x1c8>
2008e3d8:	e0bfff17 	ldw	r2,-4(fp)
2008e3dc:	10001926 	beq	r2,zero,2008e444 <alt_msgdma_descriptor_async_transfer+0x1c8>
    {
        counter = 0; /* reset counter */
2008e3e0:	e03ff20d 	sth	zero,-56(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
2008e3e4:	00000d06 	br	2008e41c <alt_msgdma_descriptor_async_transfer+0x1a0>
		dev->csr_base, 
		dev->descriptor_base, 
		extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
2008e3e8:	01000044 	movi	r4,1
2008e3ec:	008fcd80 	call	2008fcd8 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
2008e3f0:	e0bff20b 	ldhu	r2,-56(fp)
2008e3f4:	1084e230 	cmpltui	r2,r2,5000
2008e3f8:	1000051e 	bne	r2,zero,2008e410 <alt_msgdma_descriptor_async_transfer+0x194>
            {
                alt_printf("time out after 5 msec while waiting free FIFO buffer" 
2008e3fc:	01000034 	movhi	r4,0
2008e400:	21010504 	addi	r4,r4,1044
2008e404:	009075c0 	call	2009075c <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
2008e408:	00bff084 	movi	r2,-62
2008e40c:	00004a06 	br	2008e538 <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
2008e410:	e0bff20b 	ldhu	r2,-56(fp)
2008e414:	10800044 	addi	r2,r2,1
2008e418:	e0bff20d 	sth	r2,-56(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
2008e41c:	e0bffd17 	ldw	r2,-12(fp)
2008e420:	10c00317 	ldw	r3,12(r2)
2008e424:	e0bffd17 	ldw	r2,-12(fp)
2008e428:	10800417 	ldw	r2,16(r2)
2008e42c:	1809883a 	mov	r4,r3
2008e430:	100b883a 	mov	r5,r2
2008e434:	e1bfff17 	ldw	r6,-4(fp)
2008e438:	008ddec0 	call	2008ddec <alt_msgdma_write_extended_descriptor>
2008e43c:	103fea1e 	bne	r2,zero,2008e3e8 <__flash_rwdata_start+0xffffcab8>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
2008e440:	00000206 	br	2008e44c <alt_msgdma_descriptor_async_transfer+0x1d0>
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
2008e444:	00bfffc4 	movi	r2,-1
2008e448:	00003b06 	br	2008e538 <alt_msgdma_descriptor_async_transfer+0x2bc>
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
2008e44c:	e0bffd17 	ldw	r2,-12(fp)
2008e450:	10800b17 	ldw	r2,44(r2)
2008e454:	10001c26 	beq	r2,zero,2008e4c8 <alt_msgdma_descriptor_async_transfer+0x24c>
    {

        control |= (dev->control |
2008e458:	e0bffd17 	ldw	r2,-12(fp)
2008e45c:	10c00d17 	ldw	r3,52(r2)
2008e460:	e0bff317 	ldw	r2,-52(fp)
2008e464:	1884b03a 	or	r2,r3,r2
2008e468:	10800514 	ori	r2,r2,20
2008e46c:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
2008e470:	e0fff317 	ldw	r3,-52(fp)
2008e474:	00bff7c4 	movi	r2,-33
2008e478:	1884703a 	and	r2,r3,r2
2008e47c:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2008e480:	0005303a 	rdctl	r2,status
2008e484:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2008e488:	e0fff917 	ldw	r3,-28(fp)
2008e48c:	00bfff84 	movi	r2,-2
2008e490:	1884703a 	and	r2,r3,r2
2008e494:	1001703a 	wrctl	status,r2
  
  return context;
2008e498:	e0bff917 	ldw	r2,-28(fp)
    /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
2008e49c:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
2008e4a0:	e0bffd17 	ldw	r2,-12(fp)
2008e4a4:	10800317 	ldw	r2,12(r2)
2008e4a8:	10800104 	addi	r2,r2,4
2008e4ac:	e0fff317 	ldw	r3,-52(fp)
2008e4b0:	10c00035 	stwio	r3,0(r2)
2008e4b4:	e0bff417 	ldw	r2,-48(fp)
2008e4b8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2008e4bc:	e0bffa17 	ldw	r2,-24(fp)
2008e4c0:	1001703a 	wrctl	status,r2
2008e4c4:	00001b06 	br	2008e534 <alt_msgdma_descriptor_async_transfer+0x2b8>
    *   - Stop on an error with any particular descriptor
    *   - Disable interrupt generation
    */
    else
    {
        control |= (dev->control |
2008e4c8:	e0bffd17 	ldw	r2,-12(fp)
2008e4cc:	10c00d17 	ldw	r3,52(r2)
2008e4d0:	e0bff317 	ldw	r2,-52(fp)
2008e4d4:	1884b03a 	or	r2,r3,r2
2008e4d8:	10800114 	ori	r2,r2,4
2008e4dc:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
2008e4e0:	e0fff317 	ldw	r3,-52(fp)
2008e4e4:	00bff3c4 	movi	r2,-49
2008e4e8:	1884703a 	and	r2,r3,r2
2008e4ec:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2008e4f0:	0005303a 	rdctl	r2,status
2008e4f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2008e4f8:	e0fffb17 	ldw	r3,-20(fp)
2008e4fc:	00bfff84 	movi	r2,-2
2008e500:	1884703a 	and	r2,r3,r2
2008e504:	1001703a 	wrctl	status,r2
  
  return context;
2008e508:	e0bffb17 	ldw	r2,-20(fp)
                   (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all();
2008e50c:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
2008e510:	e0bffd17 	ldw	r2,-12(fp)
2008e514:	10800317 	ldw	r2,12(r2)
2008e518:	10800104 	addi	r2,r2,4
2008e51c:	e0fff317 	ldw	r3,-52(fp)
2008e520:	10c00035 	stwio	r3,0(r2)
2008e524:	e0bff417 	ldw	r2,-48(fp)
2008e528:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2008e52c:	e0bffc17 	ldw	r2,-16(fp)
2008e530:	1001703a 	wrctl	status,r2
	 * Now that access to the registers is complete, release the registers
     * semaphore so that other threads can access the registers.
     */
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
2008e534:	0005883a 	mov	r2,zero
}
2008e538:	e037883a 	mov	sp,fp
2008e53c:	dfc00117 	ldw	ra,4(sp)
2008e540:	df000017 	ldw	fp,0(sp)
2008e544:	dec00204 	addi	sp,sp,8
2008e548:	f800283a 	ret

2008e54c <alt_msgdma_descriptor_sync_transfer>:
 */
static int alt_msgdma_descriptor_sync_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
2008e54c:	defff004 	addi	sp,sp,-64
2008e550:	dfc00f15 	stw	ra,60(sp)
2008e554:	df000e15 	stw	fp,56(sp)
2008e558:	df000e04 	addi	fp,sp,56
2008e55c:	e13ffd15 	stw	r4,-12(fp)
2008e560:	e17ffe15 	stw	r5,-8(fp)
2008e564:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control=0;
2008e568:	e03ff615 	stw	zero,-40(fp)
    alt_irq_context context=0;
2008e56c:	e03ff715 	stw	zero,-36(fp)
    alt_u32 csr_status = 0;
2008e570:	e03ff215 	stw	zero,-56(fp)
    alt_u16 counter = 0;
2008e574:	e03ff30d 	sth	zero,-52(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
2008e578:	e0bffd17 	ldw	r2,-12(fp)
2008e57c:	10800317 	ldw	r2,12(r2)
2008e580:	10800204 	addi	r2,r2,8
2008e584:	10800037 	ldwio	r2,0(r2)
{
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
2008e588:	10bfffcc 	andi	r2,r2,65535
2008e58c:	e0bff415 	stw	r2,-48(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
2008e590:	e0bffd17 	ldw	r2,-12(fp)
2008e594:	10800317 	ldw	r2,12(r2)
2008e598:	10800204 	addi	r2,r2,8
2008e59c:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
2008e5a0:	1004d43a 	srli	r2,r2,16
2008e5a4:	e0bff515 	stw	r2,-44(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
    alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK | 
2008e5a8:	00807804 	movi	r2,480
2008e5ac:	e0bff815 	stw	r2,-32(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
2008e5b0:	00001906 	br	2008e618 <alt_msgdma_descriptor_sync_transfer+0xcc>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
2008e5b4:	01000044 	movi	r4,1
2008e5b8:	008fcd80 	call	2008fcd8 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
2008e5bc:	e0bff30b 	ldhu	r2,-52(fp)
2008e5c0:	1084e230 	cmpltui	r2,r2,5000
2008e5c4:	1000051e 	bne	r2,zero,2008e5dc <alt_msgdma_descriptor_sync_transfer+0x90>
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
2008e5c8:	01000034 	movhi	r4,0
2008e5cc:	21011b04 	addi	r4,r4,1132
2008e5d0:	009075c0 	call	2009075c <alt_printf>
				" for storing descriptor\n");
            return -ETIME;
2008e5d4:	00bff084 	movi	r2,-62
2008e5d8:	0000b506 	br	2008e8b0 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;  
2008e5dc:	e0bff30b 	ldhu	r2,-52(fp)
2008e5e0:	10800044 	addi	r2,r2,1
2008e5e4:	e0bff30d 	sth	r2,-52(fp)
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
2008e5e8:	e0bffd17 	ldw	r2,-12(fp)
2008e5ec:	10800317 	ldw	r2,12(r2)
2008e5f0:	10800204 	addi	r2,r2,8
2008e5f4:	10800037 	ldwio	r2,0(r2)
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
				" for storing descriptor\n");
            return -ETIME;
        }
        counter++;  
        fifo_read_fill_level = (
2008e5f8:	10bfffcc 	andi	r2,r2,65535
2008e5fc:	e0bff415 	stw	r2,-48(fp)
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
2008e600:	e0bffd17 	ldw	r2,-12(fp)
2008e604:	10800317 	ldw	r2,12(r2)
2008e608:	10800204 	addi	r2,r2,8
2008e60c:	10800037 	ldwio	r2,0(r2)
        counter++;  
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
2008e610:	1004d43a 	srli	r2,r2,16
2008e614:	e0bff515 	stw	r2,-44(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
2008e618:	e0bffd17 	ldw	r2,-12(fp)
2008e61c:	10800917 	ldw	r2,36(r2)
2008e620:	e0fff517 	ldw	r3,-44(fp)
2008e624:	18bfe32e 	bgeu	r3,r2,2008e5b4 <__flash_rwdata_start+0xffffcc84>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
2008e628:	e0bffd17 	ldw	r2,-12(fp)
2008e62c:	10800917 	ldw	r2,36(r2)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
2008e630:	e0fff417 	ldw	r3,-48(fp)
2008e634:	18bfdf2e 	bgeu	r3,r2,2008e5b4 <__flash_rwdata_start+0xffffcc84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2008e638:	0005303a 	rdctl	r2,status
2008e63c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2008e640:	e0fff917 	ldw	r3,-28(fp)
2008e644:	00bfff84 	movi	r2,-2
2008e648:	1884703a 	and	r2,r3,r2
2008e64c:	1001703a 	wrctl	status,r2
  
  return context;
2008e650:	e0bff917 	ldw	r2,-28(fp)
	ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
2008e654:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
2008e658:	e0bffd17 	ldw	r2,-12(fp)
2008e65c:	10800317 	ldw	r2,12(r2)
2008e660:	10800104 	addi	r2,r2,4
2008e664:	00c00804 	movi	r3,32
2008e668:	10c00035 	stwio	r3,0(r2)
        ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
2008e66c:	e0bffd17 	ldw	r2,-12(fp)
2008e670:	10800317 	ldw	r2,12(r2)
2008e674:	e0fffd17 	ldw	r3,-12(fp)
2008e678:	18c00317 	ldw	r3,12(r3)
2008e67c:	18c00037 	ldwio	r3,0(r3)
2008e680:	10c00035 	stwio	r3,0(r2)
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
2008e684:	e0bffe17 	ldw	r2,-8(fp)
2008e688:	10001b26 	beq	r2,zero,2008e6f8 <alt_msgdma_descriptor_sync_transfer+0x1ac>
2008e68c:	e0bfff17 	ldw	r2,-4(fp)
2008e690:	1000191e 	bne	r2,zero,2008e6f8 <alt_msgdma_descriptor_sync_transfer+0x1ac>
    {
        counter = 0; /* reset counter */
2008e694:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
2008e698:	00000d06 	br	2008e6d0 <alt_msgdma_descriptor_sync_transfer+0x184>
			dev->csr_base, dev->descriptor_base, standard_desc))
        {     
            alt_busy_sleep(1); /* delay 1us */
2008e69c:	01000044 	movi	r4,1
2008e6a0:	008fcd80 	call	2008fcd8 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
2008e6a4:	e0bff30b 	ldhu	r2,-52(fp)
2008e6a8:	1084e230 	cmpltui	r2,r2,5000
2008e6ac:	1000051e 	bne	r2,zero,2008e6c4 <alt_msgdma_descriptor_sync_transfer+0x178>
            {
                alt_printf("time out after 5 msec while writing standard" 
2008e6b0:	01000034 	movhi	r4,0
2008e6b4:	21012f04 	addi	r4,r4,1212
2008e6b8:	009075c0 	call	2009075c <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
2008e6bc:	00bff084 	movi	r2,-62
2008e6c0:	00007b06 	br	2008e8b0 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;    
2008e6c4:	e0bff30b 	ldhu	r2,-52(fp)
2008e6c8:	10800044 	addi	r2,r2,1
2008e6cc:	e0bff30d 	sth	r2,-52(fp)
    if (NULL != standard_desc && NULL == extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
2008e6d0:	e0bffd17 	ldw	r2,-12(fp)
2008e6d4:	10c00317 	ldw	r3,12(r2)
2008e6d8:	e0bffd17 	ldw	r2,-12(fp)
2008e6dc:	10800417 	ldw	r2,16(r2)
2008e6e0:	1809883a 	mov	r4,r3
2008e6e4:	100b883a 	mov	r5,r2
2008e6e8:	e1bffe17 	ldw	r6,-8(fp)
2008e6ec:	008dd580 	call	2008dd58 <alt_msgdma_write_standard_descriptor>
2008e6f0:	103fea1e 	bne	r2,zero,2008e69c <__flash_rwdata_start+0xffffcd6c>
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
2008e6f4:	00001f06 	br	2008e774 <alt_msgdma_descriptor_sync_transfer+0x228>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
2008e6f8:	e0bffe17 	ldw	r2,-8(fp)
2008e6fc:	10001b1e 	bne	r2,zero,2008e76c <alt_msgdma_descriptor_sync_transfer+0x220>
2008e700:	e0bfff17 	ldw	r2,-4(fp)
2008e704:	10001926 	beq	r2,zero,2008e76c <alt_msgdma_descriptor_sync_transfer+0x220>
    {
        counter = 0; /* reset counter */
2008e708:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
2008e70c:	00000d06 	br	2008e744 <alt_msgdma_descriptor_sync_transfer+0x1f8>
			dev->csr_base, dev->descriptor_base, extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
2008e710:	01000044 	movi	r4,1
2008e714:	008fcd80 	call	2008fcd8 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
2008e718:	e0bff30b 	ldhu	r2,-52(fp)
2008e71c:	1084e230 	cmpltui	r2,r2,5000
2008e720:	1000051e 	bne	r2,zero,2008e738 <alt_msgdma_descriptor_sync_transfer+0x1ec>
            {
                alt_printf("time out after 5 msec while writing extended" 
2008e724:	01000034 	movhi	r4,0
2008e728:	21014004 	addi	r4,r4,1280
2008e72c:	009075c0 	call	2009075c <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
2008e730:	00bff084 	movi	r2,-62
2008e734:	00005e06 	br	2008e8b0 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;
2008e738:	e0bff30b 	ldhu	r2,-52(fp)
2008e73c:	10800044 	addi	r2,r2,1
2008e740:	e0bff30d 	sth	r2,-52(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
2008e744:	e0bffd17 	ldw	r2,-12(fp)
2008e748:	10c00317 	ldw	r3,12(r2)
2008e74c:	e0bffd17 	ldw	r2,-12(fp)
2008e750:	10800417 	ldw	r2,16(r2)
2008e754:	1809883a 	mov	r4,r3
2008e758:	100b883a 	mov	r5,r2
2008e75c:	e1bfff17 	ldw	r6,-4(fp)
2008e760:	008ddec0 	call	2008ddec <alt_msgdma_write_extended_descriptor>
2008e764:	103fea1e 	bne	r2,zero,2008e710 <__flash_rwdata_start+0xffffcde0>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
2008e768:	00000206 	br	2008e774 <alt_msgdma_descriptor_sync_transfer+0x228>
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
2008e76c:	00bfffc4 	movi	r2,-1
2008e770:	00004f06 	br	2008e8b0 <alt_msgdma_descriptor_sync_transfer+0x364>
    * Set up msgdma controller to:
    * - Disable interrupt generation
    * - Run once a valid descriptor is written to controller
    * - Stop on an error with any particular descriptor
    */
     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
2008e774:	e0bffd17 	ldw	r2,-12(fp)
2008e778:	10800317 	ldw	r2,12(r2)
2008e77c:	10800104 	addi	r2,r2,4
2008e780:	e0fffd17 	ldw	r3,-12(fp)
2008e784:	19000d17 	ldw	r4,52(r3)
2008e788:	00fff2c4 	movi	r3,-53
2008e78c:	20c6703a 	and	r3,r4,r3
2008e790:	18c00114 	ori	r3,r3,4
2008e794:	10c00035 	stwio	r3,0(r2)
2008e798:	e0bff717 	ldw	r2,-36(fp)
2008e79c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2008e7a0:	e0bffa17 	ldw	r2,-24(fp)
2008e7a4:	1001703a 	wrctl	status,r2
		(~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
		(~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK)) ;
	 
	alt_irq_enable_all(context);
     
    counter = 0; /* reset counter */ 
2008e7a8:	e03ff30d 	sth	zero,-52(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
2008e7ac:	e0bffd17 	ldw	r2,-12(fp)
2008e7b0:	10800317 	ldw	r2,12(r2)
2008e7b4:	10800037 	ldwio	r2,0(r2)
2008e7b8:	e0bff215 	stw	r2,-56(fp)
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
2008e7bc:	00001106 	br	2008e804 <alt_msgdma_descriptor_sync_transfer+0x2b8>
    {
        alt_busy_sleep(1); /* delay 1us */
2008e7c0:	01000044 	movi	r4,1
2008e7c4:	008fcd80 	call	2008fcd8 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
2008e7c8:	e0bff30b 	ldhu	r2,-52(fp)
2008e7cc:	1084e230 	cmpltui	r2,r2,5000
2008e7d0:	1000051e 	bne	r2,zero,2008e7e8 <alt_msgdma_descriptor_sync_transfer+0x29c>
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
2008e7d4:	01000034 	movhi	r4,0
2008e7d8:	21015104 	addi	r4,r4,1348
2008e7dc:	009075c0 	call	2009075c <alt_printf>
			* Now that access to the registers is complete, release the registers
			* semaphore so that other threads can access the registers.
			*/
			ALT_SEM_POST (dev->regs_lock);
			
            return -ETIME;
2008e7e0:	00bff084 	movi	r2,-62
2008e7e4:	00003206 	br	2008e8b0 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;
2008e7e8:	e0bff30b 	ldhu	r2,-52(fp)
2008e7ec:	10800044 	addi	r2,r2,1
2008e7f0:	e0bff30d 	sth	r2,-52(fp)
        csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
2008e7f4:	e0bffd17 	ldw	r2,-12(fp)
2008e7f8:	10800317 	ldw	r2,12(r2)
2008e7fc:	10800037 	ldwio	r2,0(r2)
2008e800:	e0bff215 	stw	r2,-56(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
2008e804:	e0fff217 	ldw	r3,-56(fp)
2008e808:	e0bff817 	ldw	r2,-32(fp)
2008e80c:	1884703a 	and	r2,r3,r2
2008e810:	1000031e 	bne	r2,zero,2008e820 <alt_msgdma_descriptor_sync_transfer+0x2d4>
2008e814:	e0bff217 	ldw	r2,-56(fp)
2008e818:	1080004c 	andi	r2,r2,1
2008e81c:	103fe81e 	bne	r2,zero,2008e7c0 <__flash_rwdata_start+0xffffce90>
    }
    

    /*Errors or conditions causing the dispatcher stopping issuing read/write 
      commands to masters*/
    if(0 != (csr_status & error))
2008e820:	e0fff217 	ldw	r3,-56(fp)
2008e824:	e0bff817 	ldw	r2,-32(fp)
2008e828:	1884703a 	and	r2,r3,r2
2008e82c:	10000226 	beq	r2,zero,2008e838 <alt_msgdma_descriptor_sync_transfer+0x2ec>
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        return error;
2008e830:	e0bff817 	ldw	r2,-32(fp)
2008e834:	00001e06 	br	2008e8b0 <alt_msgdma_descriptor_sync_transfer+0x364>
    }

    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) | 
2008e838:	e0bffd17 	ldw	r2,-12(fp)
2008e83c:	10800317 	ldw	r2,12(r2)
2008e840:	10800104 	addi	r2,r2,4
2008e844:	10800037 	ldwio	r2,0(r2)
2008e848:	10800814 	ori	r2,r2,32
2008e84c:	e0bff615 	stw	r2,-40(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2008e850:	0005303a 	rdctl	r2,status
2008e854:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2008e858:	e0fffb17 	ldw	r3,-20(fp)
2008e85c:	00bfff84 	movi	r2,-2
2008e860:	1884703a 	and	r2,r3,r2
2008e864:	1001703a 	wrctl	status,r2
  
  return context;
2008e868:	e0bffb17 	ldw	r2,-20(fp)
	ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();  
2008e86c:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
2008e870:	e0bffd17 	ldw	r2,-12(fp)
2008e874:	10800317 	ldw	r2,12(r2)
2008e878:	10800104 	addi	r2,r2,4
2008e87c:	e0fff617 	ldw	r3,-40(fp)
2008e880:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
2008e884:	e0bffd17 	ldw	r2,-12(fp)
2008e888:	10800317 	ldw	r2,12(r2)
2008e88c:	e0fffd17 	ldw	r3,-12(fp)
2008e890:	18c00317 	ldw	r3,12(r3)
2008e894:	18c00037 	ldwio	r3,0(r3)
2008e898:	10c00035 	stwio	r3,0(r2)
2008e89c:	e0bff717 	ldw	r2,-36(fp)
2008e8a0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2008e8a4:	e0bffc17 	ldw	r2,-16(fp)
2008e8a8:	1001703a 	wrctl	status,r2
	* Now that access to the registers is complete, release the registers
	* semaphore so that other threads can access the registers.
	*/
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
2008e8ac:	0005883a 	mov	r2,zero

}
2008e8b0:	e037883a 	mov	sp,fp
2008e8b4:	dfc00117 	ldw	ra,4(sp)
2008e8b8:	df000017 	ldw	fp,0(sp)
2008e8bc:	dec00204 	addi	sp,sp,8
2008e8c0:	f800283a 	ret

2008e8c4 <alt_msgdma_construct_standard_st_to_mm_descriptor>:
 */
int alt_msgdma_construct_standard_st_to_mm_descriptor (
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *write_address, alt_u32 length, alt_u32 control)
{
2008e8c4:	defff804 	addi	sp,sp,-32
2008e8c8:	dfc00715 	stw	ra,28(sp)
2008e8cc:	df000615 	stw	fp,24(sp)
2008e8d0:	df000604 	addi	fp,sp,24
2008e8d4:	e13ffc15 	stw	r4,-16(fp)
2008e8d8:	e17ffd15 	stw	r5,-12(fp)
2008e8dc:	e1bffe15 	stw	r6,-8(fp)
2008e8e0:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, NULL, 
2008e8e4:	e0bfff17 	ldw	r2,-4(fp)
2008e8e8:	d8800015 	stw	r2,0(sp)
2008e8ec:	e0800217 	ldw	r2,8(fp)
2008e8f0:	d8800115 	stw	r2,4(sp)
2008e8f4:	e13ffc17 	ldw	r4,-16(fp)
2008e8f8:	e17ffd17 	ldw	r5,-12(fp)
2008e8fc:	000d883a 	mov	r6,zero
2008e900:	e1fffe17 	ldw	r7,-8(fp)
2008e904:	008e09c0 	call	2008e09c <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
2008e908:	e037883a 	mov	sp,fp
2008e90c:	dfc00117 	ldw	ra,4(sp)
2008e910:	df000017 	ldw	fp,0(sp)
2008e914:	dec00204 	addi	sp,sp,8
2008e918:	f800283a 	ret

2008e91c <alt_msgdma_construct_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address,
	alt_u32 length,
	alt_u32 control)
{
2008e91c:	defff804 	addi	sp,sp,-32
2008e920:	dfc00715 	stw	ra,28(sp)
2008e924:	df000615 	stw	fp,24(sp)
2008e928:	df000604 	addi	fp,sp,24
2008e92c:	e13ffc15 	stw	r4,-16(fp)
2008e930:	e17ffd15 	stw	r5,-12(fp)
2008e934:	e1bffe15 	stw	r6,-8(fp)
2008e938:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
2008e93c:	e0bfff17 	ldw	r2,-4(fp)
2008e940:	d8800015 	stw	r2,0(sp)
2008e944:	e0800217 	ldw	r2,8(fp)
2008e948:	d8800115 	stw	r2,4(sp)
2008e94c:	e13ffc17 	ldw	r4,-16(fp)
2008e950:	e17ffd17 	ldw	r5,-12(fp)
2008e954:	e1bffe17 	ldw	r6,-8(fp)
2008e958:	000f883a 	mov	r7,zero
2008e95c:	008e09c0 	call	2008e09c <alt_msgdma_construct_standard_descriptor>
            NULL, length, control);

}
2008e960:	e037883a 	mov	sp,fp
2008e964:	dfc00117 	ldw	ra,4(sp)
2008e968:	df000017 	ldw	fp,0(sp)
2008e96c:	dec00204 	addi	sp,sp,8
2008e970:	f800283a 	ret

2008e974 <alt_msgdma_construct_standard_mm_to_mm_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
2008e974:	defff804 	addi	sp,sp,-32
2008e978:	dfc00715 	stw	ra,28(sp)
2008e97c:	df000615 	stw	fp,24(sp)
2008e980:	df000604 	addi	fp,sp,24
2008e984:	e13ffc15 	stw	r4,-16(fp)
2008e988:	e17ffd15 	stw	r5,-12(fp)
2008e98c:	e1bffe15 	stw	r6,-8(fp)
2008e990:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
2008e994:	e0800217 	ldw	r2,8(fp)
2008e998:	d8800015 	stw	r2,0(sp)
2008e99c:	e0800317 	ldw	r2,12(fp)
2008e9a0:	d8800115 	stw	r2,4(sp)
2008e9a4:	e13ffc17 	ldw	r4,-16(fp)
2008e9a8:	e17ffd17 	ldw	r5,-12(fp)
2008e9ac:	e1bffe17 	ldw	r6,-8(fp)
2008e9b0:	e1ffff17 	ldw	r7,-4(fp)
2008e9b4:	008e09c0 	call	2008e09c <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
2008e9b8:	e037883a 	mov	sp,fp
2008e9bc:	dfc00117 	ldw	ra,4(sp)
2008e9c0:	df000017 	ldw	fp,0(sp)
2008e9c4:	dec00204 	addi	sp,sp,8
2008e9c8:	f800283a 	ret

2008e9cc <alt_msgdma_construct_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 write_burst_count, 
	alt_u16 write_stride)
{
2008e9cc:	defff004 	addi	sp,sp,-64
2008e9d0:	dfc00f15 	stw	ra,60(sp)
2008e9d4:	df000e15 	stw	fp,56(sp)
2008e9d8:	df000e04 	addi	fp,sp,56
2008e9dc:	e13ff915 	stw	r4,-28(fp)
2008e9e0:	e17ffa15 	stw	r5,-24(fp)
2008e9e4:	e1bffb15 	stw	r6,-20(fp)
2008e9e8:	e1fffc15 	stw	r7,-16(fp)
2008e9ec:	e1000317 	ldw	r4,12(fp)
2008e9f0:	e0c00417 	ldw	r3,16(fp)
2008e9f4:	e0800517 	ldw	r2,20(fp)
2008e9f8:	e13ffd0d 	sth	r4,-12(fp)
2008e9fc:	e0fffe05 	stb	r3,-8(fp)
2008ea00:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
2008ea04:	e13ffd0b 	ldhu	r4,-12(fp)
2008ea08:	e0fffe03 	ldbu	r3,-8(fp)
2008ea0c:	e0bfff0b 	ldhu	r2,-4(fp)
2008ea10:	e17ffc17 	ldw	r5,-16(fp)
2008ea14:	d9400015 	stw	r5,0(sp)
2008ea18:	e1400217 	ldw	r5,8(fp)
2008ea1c:	d9400115 	stw	r5,4(sp)
2008ea20:	d9000215 	stw	r4,8(sp)
2008ea24:	d8000315 	stw	zero,12(sp)
2008ea28:	d8c00415 	stw	r3,16(sp)
2008ea2c:	d8000515 	stw	zero,20(sp)
2008ea30:	d8800615 	stw	r2,24(sp)
2008ea34:	e13ff917 	ldw	r4,-28(fp)
2008ea38:	e17ffa17 	ldw	r5,-24(fp)
2008ea3c:	000d883a 	mov	r6,zero
2008ea40:	e1fffb17 	ldw	r7,-20(fp)
2008ea44:	008e1280 	call	2008e128 <alt_msgdma_construct_extended_descriptor>
            NULL, write_address, length, control, sequence_number, 0, 
            write_burst_count, 0, write_stride);
}
2008ea48:	e037883a 	mov	sp,fp
2008ea4c:	dfc00117 	ldw	ra,4(sp)
2008ea50:	df000017 	ldw	fp,0(sp)
2008ea54:	dec00204 	addi	sp,sp,8
2008ea58:	f800283a 	ret

2008ea5c <alt_msgdma_construct_extended_mm_to_st_descriptor>:
	alt_u32 length,
	alt_u32 control,
	alt_u16 sequence_number,
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
2008ea5c:	defff004 	addi	sp,sp,-64
2008ea60:	dfc00f15 	stw	ra,60(sp)
2008ea64:	df000e15 	stw	fp,56(sp)
2008ea68:	df000e04 	addi	fp,sp,56
2008ea6c:	e13ff915 	stw	r4,-28(fp)
2008ea70:	e17ffa15 	stw	r5,-24(fp)
2008ea74:	e1bffb15 	stw	r6,-20(fp)
2008ea78:	e1fffc15 	stw	r7,-16(fp)
2008ea7c:	e1000317 	ldw	r4,12(fp)
2008ea80:	e0c00417 	ldw	r3,16(fp)
2008ea84:	e0800517 	ldw	r2,20(fp)
2008ea88:	e13ffd0d 	sth	r4,-12(fp)
2008ea8c:	e0fffe05 	stb	r3,-8(fp)
2008ea90:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, read_address, 
2008ea94:	e13ffd0b 	ldhu	r4,-12(fp)
2008ea98:	e0fffe03 	ldbu	r3,-8(fp)
2008ea9c:	e0bfff0b 	ldhu	r2,-4(fp)
2008eaa0:	e17ffc17 	ldw	r5,-16(fp)
2008eaa4:	d9400015 	stw	r5,0(sp)
2008eaa8:	e1400217 	ldw	r5,8(fp)
2008eaac:	d9400115 	stw	r5,4(sp)
2008eab0:	d9000215 	stw	r4,8(sp)
2008eab4:	d8c00315 	stw	r3,12(sp)
2008eab8:	d8000415 	stw	zero,16(sp)
2008eabc:	d8800515 	stw	r2,20(sp)
2008eac0:	d8000615 	stw	zero,24(sp)
2008eac4:	e13ff917 	ldw	r4,-28(fp)
2008eac8:	e17ffa17 	ldw	r5,-24(fp)
2008eacc:	e1bffb17 	ldw	r6,-20(fp)
2008ead0:	000f883a 	mov	r7,zero
2008ead4:	008e1280 	call	2008e128 <alt_msgdma_construct_extended_descriptor>
            NULL, length, control, sequence_number, read_burst_count, 0, 
            read_stride, 0);

}
2008ead8:	e037883a 	mov	sp,fp
2008eadc:	dfc00117 	ldw	ra,4(sp)
2008eae0:	df000017 	ldw	fp,0(sp)
2008eae4:	dec00204 	addi	sp,sp,8
2008eae8:	f800283a 	ret

2008eaec <alt_msgdma_construct_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
2008eaec:	deffee04 	addi	sp,sp,-72
2008eaf0:	dfc01115 	stw	ra,68(sp)
2008eaf4:	df001015 	stw	fp,64(sp)
2008eaf8:	df001004 	addi	fp,sp,64
2008eafc:	e13ff715 	stw	r4,-36(fp)
2008eb00:	e17ff815 	stw	r5,-32(fp)
2008eb04:	e1bff915 	stw	r6,-28(fp)
2008eb08:	e1fffa15 	stw	r7,-24(fp)
2008eb0c:	e1800417 	ldw	r6,16(fp)
2008eb10:	e1400517 	ldw	r5,20(fp)
2008eb14:	e1000617 	ldw	r4,24(fp)
2008eb18:	e0c00717 	ldw	r3,28(fp)
2008eb1c:	e0800817 	ldw	r2,32(fp)
2008eb20:	e1bffb0d 	sth	r6,-20(fp)
2008eb24:	e17ffc05 	stb	r5,-16(fp)
2008eb28:	e13ffd05 	stb	r4,-12(fp)
2008eb2c:	e0fffe0d 	sth	r3,-8(fp)
2008eb30:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
2008eb34:	e1bffb0b 	ldhu	r6,-20(fp)
2008eb38:	e17ffc03 	ldbu	r5,-16(fp)
2008eb3c:	e13ffd03 	ldbu	r4,-12(fp)
2008eb40:	e0fffe0b 	ldhu	r3,-8(fp)
2008eb44:	e0bfff0b 	ldhu	r2,-4(fp)
2008eb48:	e1c00217 	ldw	r7,8(fp)
2008eb4c:	d9c00015 	stw	r7,0(sp)
2008eb50:	e1c00317 	ldw	r7,12(fp)
2008eb54:	d9c00115 	stw	r7,4(sp)
2008eb58:	d9800215 	stw	r6,8(sp)
2008eb5c:	d9400315 	stw	r5,12(sp)
2008eb60:	d9000415 	stw	r4,16(sp)
2008eb64:	d8c00515 	stw	r3,20(sp)
2008eb68:	d8800615 	stw	r2,24(sp)
2008eb6c:	e13ff717 	ldw	r4,-36(fp)
2008eb70:	e17ff817 	ldw	r5,-32(fp)
2008eb74:	e1bff917 	ldw	r6,-28(fp)
2008eb78:	e1fffa17 	ldw	r7,-24(fp)
2008eb7c:	008e1280 	call	2008e128 <alt_msgdma_construct_extended_descriptor>
            read_address, write_address, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
2008eb80:	e037883a 	mov	sp,fp
2008eb84:	dfc00117 	ldw	ra,4(sp)
2008eb88:	df000017 	ldw	fp,0(sp)
2008eb8c:	dec00204 	addi	sp,sp,8
2008eb90:	f800283a 	ret

2008eb94 <alt_msgdma_construct_prefetcher_standard_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
2008eb94:	defffb04 	addi	sp,sp,-20
2008eb98:	df000415 	stw	fp,16(sp)
2008eb9c:	df000404 	addi	fp,sp,16
2008eba0:	e13ffc15 	stw	r4,-16(fp)
2008eba4:	e17ffd15 	stw	r5,-12(fp)
2008eba8:	e1bffe15 	stw	r6,-8(fp)
2008ebac:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
2008ebb0:	e0bffc17 	ldw	r2,-16(fp)
2008ebb4:	10c01217 	ldw	r3,72(r2)
2008ebb8:	e0800117 	ldw	r2,4(fp)
2008ebbc:	18800436 	bltu	r3,r2,2008ebd0 <alt_msgdma_construct_prefetcher_standard_descriptor+0x3c>
       dev->enhanced_features != 0
2008ebc0:	e0bffc17 	ldw	r2,-16(fp)
2008ebc4:	10801703 	ldbu	r2,92(r2)
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
2008ebc8:	10803fcc 	andi	r2,r2,255
2008ebcc:	10000226 	beq	r2,zero,2008ebd8 <alt_msgdma_construct_prefetcher_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
2008ebd0:	00bffa84 	movi	r2,-22
2008ebd4:	00001406 	br	2008ec28 <alt_msgdma_construct_prefetcher_standard_descriptor+0x94>
    }
    descriptor->read_address = read_address;
2008ebd8:	e0bffd17 	ldw	r2,-12(fp)
2008ebdc:	e0fffe17 	ldw	r3,-8(fp)
2008ebe0:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
2008ebe4:	e0bffd17 	ldw	r2,-12(fp)
2008ebe8:	e0ffff17 	ldw	r3,-4(fp)
2008ebec:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
2008ebf0:	e0bffd17 	ldw	r2,-12(fp)
2008ebf4:	e0c00117 	ldw	r3,4(fp)
2008ebf8:	10c00215 	stw	r3,8(r2)
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
2008ebfc:	e0fffd17 	ldw	r3,-12(fp)
2008ec00:	e0bffd17 	ldw	r2,-12(fp)
2008ec04:	10c00315 	stw	r3,12(r2)
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
2008ec08:	e0c00217 	ldw	r3,8(fp)
2008ec0c:	00900034 	movhi	r2,16384
2008ec10:	10bfffc4 	addi	r2,r2,-1
2008ec14:	1884703a 	and	r2,r3,r2
2008ec18:	10e00034 	orhi	r3,r2,32768
    descriptor->transfer_length = length;
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
2008ec1c:	e0bffd17 	ldw	r2,-12(fp)
2008ec20:	10c00715 	stw	r3,28(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
2008ec24:	0005883a 	mov	r2,zero
}
2008ec28:	e037883a 	mov	sp,fp
2008ec2c:	df000017 	ldw	fp,0(sp)
2008ec30:	dec00104 	addi	sp,sp,4
2008ec34:	f800283a 	ret

2008ec38 <alt_msgdma_construct_prefetcher_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
2008ec38:	defff404 	addi	sp,sp,-48
2008ec3c:	df000b15 	stw	fp,44(sp)
2008ec40:	df000b04 	addi	fp,sp,44
2008ec44:	e13ff715 	stw	r4,-36(fp)
2008ec48:	e17ff815 	stw	r5,-32(fp)
2008ec4c:	e1bff915 	stw	r6,-28(fp)
2008ec50:	e1fffa15 	stw	r7,-24(fp)
2008ec54:	e1800517 	ldw	r6,20(fp)
2008ec58:	e1400617 	ldw	r5,24(fp)
2008ec5c:	e1000717 	ldw	r4,28(fp)
2008ec60:	e0c00817 	ldw	r3,32(fp)
2008ec64:	e0800917 	ldw	r2,36(fp)
2008ec68:	e1bffb0d 	sth	r6,-20(fp)
2008ec6c:	e17ffc05 	stb	r5,-16(fp)
2008ec70:	e13ffd05 	stb	r4,-12(fp)
2008ec74:	e0fffe0d 	sth	r3,-8(fp)
2008ec78:	e0bfff0d 	sth	r2,-4(fp)
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
2008ec7c:	e0bff717 	ldw	r2,-36(fp)
2008ec80:	10c01217 	ldw	r3,72(r2)
2008ec84:	e0800317 	ldw	r2,12(fp)
2008ec88:	18801936 	bltu	r3,r2,2008ecf0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
2008ec8c:	e13ff717 	ldw	r4,-36(fp)
2008ec90:	20801317 	ldw	r2,76(r4)
2008ec94:	20c01417 	ldw	r3,80(r4)
2008ec98:	e13ffe0b 	ldhu	r4,-8(fp)
2008ec9c:	213fffcc 	andi	r4,r4,65535
2008eca0:	2015883a 	mov	r10,r4
2008eca4:	0017883a 	mov	r11,zero
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
2008eca8:	1ac01136 	bltu	r3,r11,2008ecf0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
2008ecac:	58c0011e 	bne	r11,r3,2008ecb4 <alt_msgdma_construct_prefetcher_extended_descriptor+0x7c>
2008ecb0:	12800f36 	bltu	r2,r10,2008ecf0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
2008ecb4:	e13ff717 	ldw	r4,-36(fp)
2008ecb8:	20801317 	ldw	r2,76(r4)
2008ecbc:	20c01417 	ldw	r3,80(r4)
2008ecc0:	e13fff0b 	ldhu	r4,-4(fp)
2008ecc4:	213fffcc 	andi	r4,r4,65535
2008ecc8:	2011883a 	mov	r8,r4
2008eccc:	0013883a 	mov	r9,zero
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
2008ecd0:	1a400736 	bltu	r3,r9,2008ecf0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
2008ecd4:	48c0011e 	bne	r9,r3,2008ecdc <alt_msgdma_construct_prefetcher_extended_descriptor+0xa4>
2008ecd8:	12000536 	bltu	r2,r8,2008ecf0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
2008ecdc:	e0bff717 	ldw	r2,-36(fp)
2008ece0:	10801703 	ldbu	r2,92(r2)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
2008ece4:	10803fcc 	andi	r2,r2,255
2008ece8:	10800060 	cmpeqi	r2,r2,1
2008ecec:	1000021e 	bne	r2,zero,2008ecf8 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
2008ecf0:	00bffa84 	movi	r2,-22
2008ecf4:	00003106 	br	2008edbc <alt_msgdma_construct_prefetcher_extended_descriptor+0x184>
    }
    
    descriptor->read_address_high = read_address_high;
2008ecf8:	e0bff817 	ldw	r2,-32(fp)
2008ecfc:	e0fff917 	ldw	r3,-28(fp)
2008ed00:	10c00915 	stw	r3,36(r2)
    descriptor->read_address_low = read_address_low;
2008ed04:	e0bff817 	ldw	r2,-32(fp)
2008ed08:	e0fffa17 	ldw	r3,-24(fp)
2008ed0c:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_high = write_address_high;
2008ed10:	e0bff817 	ldw	r2,-32(fp)
2008ed14:	e0c00117 	ldw	r3,4(fp)
2008ed18:	10c00a15 	stw	r3,40(r2)
    descriptor->write_address_low = write_address_low;
2008ed1c:	e0bff817 	ldw	r2,-32(fp)
2008ed20:	e0c00217 	ldw	r3,8(fp)
2008ed24:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
2008ed28:	e0bff817 	ldw	r2,-32(fp)
2008ed2c:	e0c00317 	ldw	r3,12(fp)
2008ed30:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
2008ed34:	e0bff817 	ldw	r2,-32(fp)
2008ed38:	e0fffb0b 	ldhu	r3,-20(fp)
2008ed3c:	10c0070d 	sth	r3,28(r2)
    descriptor->read_burst_count = read_burst_count;
2008ed40:	e0bff817 	ldw	r2,-32(fp)
2008ed44:	e0fffc03 	ldbu	r3,-16(fp)
2008ed48:	10c00785 	stb	r3,30(r2)
    descriptor->write_burst_count = write_burst_count;
2008ed4c:	e0bff817 	ldw	r2,-32(fp)
2008ed50:	e0fffd03 	ldbu	r3,-12(fp)
2008ed54:	10c007c5 	stb	r3,31(r2)
    descriptor->read_stride = read_stride;
2008ed58:	e0bff817 	ldw	r2,-32(fp)
2008ed5c:	e0fffe0b 	ldhu	r3,-8(fp)
2008ed60:	10c0080d 	sth	r3,32(r2)
    descriptor->write_stride = write_stride;
2008ed64:	e0bff817 	ldw	r2,-32(fp)
2008ed68:	e0ffff0b 	ldhu	r3,-4(fp)
2008ed6c:	10c0088d 	sth	r3,34(r2)
    /* have descriptor point to itself */
	node_addr.u64 = (uintptr_t)descriptor;
2008ed70:	e0bff817 	ldw	r2,-32(fp)
2008ed74:	1019883a 	mov	r12,r2
2008ed78:	001b883a 	mov	r13,zero
2008ed7c:	e33ff515 	stw	r12,-44(fp)
2008ed80:	e37ff615 	stw	r13,-40(fp)
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
2008ed84:	e0fff517 	ldw	r3,-44(fp)
2008ed88:	e0bff817 	ldw	r2,-32(fp)
2008ed8c:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
2008ed90:	e0fff617 	ldw	r3,-40(fp)
2008ed94:	e0bff817 	ldw	r2,-32(fp)
2008ed98:	10c00b15 	stw	r3,44(r2)
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
2008ed9c:	e0c00417 	ldw	r3,16(fp)
2008eda0:	00900034 	movhi	r2,16384
2008eda4:	10bfffc4 	addi	r2,r2,-1
2008eda8:	1884703a 	and	r2,r3,r2
2008edac:	10e00034 	orhi	r3,r2,32768
	node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
2008edb0:	e0bff817 	ldw	r2,-32(fp)
2008edb4:	10c00f15 	stw	r3,60(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
2008edb8:	0005883a 	mov	r2,zero
}
2008edbc:	e037883a 	mov	sp,fp
2008edc0:	df000017 	ldw	fp,0(sp)
2008edc4:	dec00104 	addi	sp,sp,4
2008edc8:	f800283a 	ret

2008edcc <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address,
	alt_u32 write_address,
	alt_u32 length,
	alt_u32 control)
{
2008edcc:	defff804 	addi	sp,sp,-32
2008edd0:	dfc00715 	stw	ra,28(sp)
2008edd4:	df000615 	stw	fp,24(sp)
2008edd8:	df000604 	addi	fp,sp,24
2008eddc:	e13ffc15 	stw	r4,-16(fp)
2008ede0:	e17ffd15 	stw	r5,-12(fp)
2008ede4:	e1bffe15 	stw	r6,-8(fp)
2008ede8:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
2008edec:	e0800217 	ldw	r2,8(fp)
2008edf0:	d8800015 	stw	r2,0(sp)
2008edf4:	e0800317 	ldw	r2,12(fp)
2008edf8:	d8800115 	stw	r2,4(sp)
2008edfc:	e13ffc17 	ldw	r4,-16(fp)
2008ee00:	e17ffd17 	ldw	r5,-12(fp)
2008ee04:	e1bffe17 	ldw	r6,-8(fp)
2008ee08:	e1ffff17 	ldw	r7,-4(fp)
2008ee0c:	008eb940 	call	2008eb94 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, write_address, length, control);
}
2008ee10:	e037883a 	mov	sp,fp
2008ee14:	dfc00117 	ldw	ra,4(sp)
2008ee18:	df000017 	ldw	fp,0(sp)
2008ee1c:	dec00204 	addi	sp,sp,8
2008ee20:	f800283a 	ret

2008ee24 <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
2008ee24:	defff804 	addi	sp,sp,-32
2008ee28:	dfc00715 	stw	ra,28(sp)
2008ee2c:	df000615 	stw	fp,24(sp)
2008ee30:	df000604 	addi	fp,sp,24
2008ee34:	e13ffc15 	stw	r4,-16(fp)
2008ee38:	e17ffd15 	stw	r5,-12(fp)
2008ee3c:	e1bffe15 	stw	r6,-8(fp)
2008ee40:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
2008ee44:	e0bfff17 	ldw	r2,-4(fp)
2008ee48:	d8800015 	stw	r2,0(sp)
2008ee4c:	e0800217 	ldw	r2,8(fp)
2008ee50:	d8800115 	stw	r2,4(sp)
2008ee54:	e13ffc17 	ldw	r4,-16(fp)
2008ee58:	e17ffd17 	ldw	r5,-12(fp)
2008ee5c:	000d883a 	mov	r6,zero
2008ee60:	e1fffe17 	ldw	r7,-8(fp)
2008ee64:	008eb940 	call	2008eb94 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		0, write_address, length, control);
}
2008ee68:	e037883a 	mov	sp,fp
2008ee6c:	dfc00117 	ldw	ra,4(sp)
2008ee70:	df000017 	ldw	fp,0(sp)
2008ee74:	dec00204 	addi	sp,sp,8
2008ee78:	f800283a 	ret

2008ee7c <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 read_address, 
	alt_u32 length, 
	alt_u32 control)
{
2008ee7c:	defff804 	addi	sp,sp,-32
2008ee80:	dfc00715 	stw	ra,28(sp)
2008ee84:	df000615 	stw	fp,24(sp)
2008ee88:	df000604 	addi	fp,sp,24
2008ee8c:	e13ffc15 	stw	r4,-16(fp)
2008ee90:	e17ffd15 	stw	r5,-12(fp)
2008ee94:	e1bffe15 	stw	r6,-8(fp)
2008ee98:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
2008ee9c:	e0bfff17 	ldw	r2,-4(fp)
2008eea0:	d8800015 	stw	r2,0(sp)
2008eea4:	e0800217 	ldw	r2,8(fp)
2008eea8:	d8800115 	stw	r2,4(sp)
2008eeac:	e13ffc17 	ldw	r4,-16(fp)
2008eeb0:	e17ffd17 	ldw	r5,-12(fp)
2008eeb4:	e1bffe17 	ldw	r6,-8(fp)
2008eeb8:	000f883a 	mov	r7,zero
2008eebc:	008eb940 	call	2008eb94 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, 0, length, control);
}
2008eec0:	e037883a 	mov	sp,fp
2008eec4:	dfc00117 	ldw	ra,4(sp)
2008eec8:	df000017 	ldw	fp,0(sp)
2008eecc:	dec00204 	addi	sp,sp,8
2008eed0:	f800283a 	ret

2008eed4 <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number,
	alt_u8 write_burst_count,
	alt_u16 write_stride)
{
2008eed4:	deffee04 	addi	sp,sp,-72
2008eed8:	dfc01115 	stw	ra,68(sp)
2008eedc:	df001015 	stw	fp,64(sp)
2008eee0:	df001004 	addi	fp,sp,64
2008eee4:	e13ff915 	stw	r4,-28(fp)
2008eee8:	e17ffa15 	stw	r5,-24(fp)
2008eeec:	e1bffb15 	stw	r6,-20(fp)
2008eef0:	e1fffc15 	stw	r7,-16(fp)
2008eef4:	e1000417 	ldw	r4,16(fp)
2008eef8:	e0c00517 	ldw	r3,20(fp)
2008eefc:	e0800617 	ldw	r2,24(fp)
2008ef00:	e13ffd0d 	sth	r4,-12(fp)
2008ef04:	e0fffe05 	stb	r3,-8(fp)
2008ef08:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor, 
2008ef0c:	e13ffd0b 	ldhu	r4,-12(fp)
2008ef10:	e0fffe03 	ldbu	r3,-8(fp)
2008ef14:	e0bfff0b 	ldhu	r2,-4(fp)
2008ef18:	e17ffb17 	ldw	r5,-20(fp)
2008ef1c:	d9400015 	stw	r5,0(sp)
2008ef20:	e17ffc17 	ldw	r5,-16(fp)
2008ef24:	d9400115 	stw	r5,4(sp)
2008ef28:	e1400217 	ldw	r5,8(fp)
2008ef2c:	d9400215 	stw	r5,8(sp)
2008ef30:	e1400317 	ldw	r5,12(fp)
2008ef34:	d9400315 	stw	r5,12(sp)
2008ef38:	d9000415 	stw	r4,16(sp)
2008ef3c:	d8000515 	stw	zero,20(sp)
2008ef40:	d8c00615 	stw	r3,24(sp)
2008ef44:	d8000715 	stw	zero,28(sp)
2008ef48:	d8800815 	stw	r2,32(sp)
2008ef4c:	e13ff917 	ldw	r4,-28(fp)
2008ef50:	e17ffa17 	ldw	r5,-24(fp)
2008ef54:	000d883a 	mov	r6,zero
2008ef58:	000f883a 	mov	r7,zero
2008ef5c:	008ec380 	call	2008ec38 <alt_msgdma_construct_prefetcher_extended_descriptor>
            0, 0, write_address_high, write_address_low, length, control, 
			sequence_number, 0, write_burst_count, 0, write_stride);
}
2008ef60:	e037883a 	mov	sp,fp
2008ef64:	dfc00117 	ldw	ra,4(sp)
2008ef68:	df000017 	ldw	fp,0(sp)
2008ef6c:	dec00204 	addi	sp,sp,8
2008ef70:	f800283a 	ret

2008ef74 <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
2008ef74:	deffee04 	addi	sp,sp,-72
2008ef78:	dfc01115 	stw	ra,68(sp)
2008ef7c:	df001015 	stw	fp,64(sp)
2008ef80:	df001004 	addi	fp,sp,64
2008ef84:	e13ff915 	stw	r4,-28(fp)
2008ef88:	e17ffa15 	stw	r5,-24(fp)
2008ef8c:	e1bffb15 	stw	r6,-20(fp)
2008ef90:	e1fffc15 	stw	r7,-16(fp)
2008ef94:	e1000417 	ldw	r4,16(fp)
2008ef98:	e0c00517 	ldw	r3,20(fp)
2008ef9c:	e0800617 	ldw	r2,24(fp)
2008efa0:	e13ffd0d 	sth	r4,-12(fp)
2008efa4:	e0fffe05 	stb	r3,-8(fp)
2008efa8:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
2008efac:	e13ffd0b 	ldhu	r4,-12(fp)
2008efb0:	e0fffe03 	ldbu	r3,-8(fp)
2008efb4:	e0bfff0b 	ldhu	r2,-4(fp)
2008efb8:	d8000015 	stw	zero,0(sp)
2008efbc:	d8000115 	stw	zero,4(sp)
2008efc0:	e1400217 	ldw	r5,8(fp)
2008efc4:	d9400215 	stw	r5,8(sp)
2008efc8:	e1400317 	ldw	r5,12(fp)
2008efcc:	d9400315 	stw	r5,12(sp)
2008efd0:	d9000415 	stw	r4,16(sp)
2008efd4:	d8c00515 	stw	r3,20(sp)
2008efd8:	d8000615 	stw	zero,24(sp)
2008efdc:	d8800715 	stw	r2,28(sp)
2008efe0:	d8000815 	stw	zero,32(sp)
2008efe4:	e13ff917 	ldw	r4,-28(fp)
2008efe8:	e17ffa17 	ldw	r5,-24(fp)
2008efec:	e1bffb17 	ldw	r6,-20(fp)
2008eff0:	e1fffc17 	ldw	r7,-16(fp)
2008eff4:	008ec380 	call	2008ec38 <alt_msgdma_construct_prefetcher_extended_descriptor>
    		read_address_high, read_address_low, 0, 0, length, control, 
			sequence_number, read_burst_count, 0, read_stride, 0);
}
2008eff8:	e037883a 	mov	sp,fp
2008effc:	dfc00117 	ldw	ra,4(sp)
2008f000:	df000017 	ldw	fp,0(sp)
2008f004:	dec00204 	addi	sp,sp,8
2008f008:	f800283a 	ret

2008f00c <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor>:
	alt_u16 sequence_number,
	alt_u8 read_burst_count,
	alt_u8 write_burst_count, 
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
2008f00c:	deffec04 	addi	sp,sp,-80
2008f010:	dfc01315 	stw	ra,76(sp)
2008f014:	df001215 	stw	fp,72(sp)
2008f018:	df001204 	addi	fp,sp,72
2008f01c:	e13ff715 	stw	r4,-36(fp)
2008f020:	e17ff815 	stw	r5,-32(fp)
2008f024:	e1bff915 	stw	r6,-28(fp)
2008f028:	e1fffa15 	stw	r7,-24(fp)
2008f02c:	e1800617 	ldw	r6,24(fp)
2008f030:	e1400717 	ldw	r5,28(fp)
2008f034:	e1000817 	ldw	r4,32(fp)
2008f038:	e0c00917 	ldw	r3,36(fp)
2008f03c:	e0800a17 	ldw	r2,40(fp)
2008f040:	e1bffb0d 	sth	r6,-20(fp)
2008f044:	e17ffc05 	stb	r5,-16(fp)
2008f048:	e13ffd05 	stb	r4,-12(fp)
2008f04c:	e0fffe0d 	sth	r3,-8(fp)
2008f050:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
2008f054:	e1bffb0b 	ldhu	r6,-20(fp)
2008f058:	e17ffc03 	ldbu	r5,-16(fp)
2008f05c:	e13ffd03 	ldbu	r4,-12(fp)
2008f060:	e0fffe0b 	ldhu	r3,-8(fp)
2008f064:	e0bfff0b 	ldhu	r2,-4(fp)
2008f068:	e1c00217 	ldw	r7,8(fp)
2008f06c:	d9c00015 	stw	r7,0(sp)
2008f070:	e1c00317 	ldw	r7,12(fp)
2008f074:	d9c00115 	stw	r7,4(sp)
2008f078:	e1c00417 	ldw	r7,16(fp)
2008f07c:	d9c00215 	stw	r7,8(sp)
2008f080:	e1c00517 	ldw	r7,20(fp)
2008f084:	d9c00315 	stw	r7,12(sp)
2008f088:	d9800415 	stw	r6,16(sp)
2008f08c:	d9400515 	stw	r5,20(sp)
2008f090:	d9000615 	stw	r4,24(sp)
2008f094:	d8c00715 	stw	r3,28(sp)
2008f098:	d8800815 	stw	r2,32(sp)
2008f09c:	e13ff717 	ldw	r4,-36(fp)
2008f0a0:	e17ff817 	ldw	r5,-32(fp)
2008f0a4:	e1bff917 	ldw	r6,-28(fp)
2008f0a8:	e1fffa17 	ldw	r7,-24(fp)
2008f0ac:	008ec380 	call	2008ec38 <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, write_address_high, 
			write_address_low, length, control, sequence_number, 
			read_burst_count, write_burst_count, read_stride, write_stride);

}
2008f0b0:	e037883a 	mov	sp,fp
2008f0b4:	dfc00117 	ldw	ra,4(sp)
2008f0b8:	df000017 	ldw	fp,0(sp)
2008f0bc:	dec00204 	addi	sp,sp,8
2008f0c0:	f800283a 	ret

2008f0c4 <alt_msgdma_prefetcher_add_standard_desc_to_list>:
 *           descriptor.next_ptr not pointing back to itslef)
 */
int alt_msgdma_prefetcher_add_standard_desc_to_list (
	alt_msgdma_prefetcher_standard_descriptor** list,
	alt_msgdma_prefetcher_standard_descriptor* descriptor)
{
2008f0c4:	defffc04 	addi	sp,sp,-16
2008f0c8:	df000315 	stw	fp,12(sp)
2008f0cc:	df000304 	addi	fp,sp,12
2008f0d0:	e13ffe15 	stw	r4,-8(fp)
2008f0d4:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	
	if (descriptor == NULL)
2008f0d8:	e0bfff17 	ldw	r2,-4(fp)
2008f0dc:	1000021e 	bne	r2,zero,2008f0e8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x24>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
2008f0e0:	00bffa84 	movi	r2,-22
2008f0e4:	00002f06 	br	2008f1a4 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (descriptor->next_desc_ptr != (alt_u32)descriptor)
2008f0e8:	e0bfff17 	ldw	r2,-4(fp)
2008f0ec:	10c00317 	ldw	r3,12(r2)
2008f0f0:	e0bfff17 	ldw	r2,-4(fp)
2008f0f4:	18800226 	beq	r3,r2,2008f100 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x3c>
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
2008f0f8:	00bffa84 	movi	r2,-22
2008f0fc:	00002906 	br	2008f1a4 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (*list == NULL)
2008f100:	e0bffe17 	ldw	r2,-8(fp)
2008f104:	10800017 	ldw	r2,0(r2)
2008f108:	1000051e 	bne	r2,zero,2008f120 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x5c>
	{
		*list = descriptor;  /* make this root-node if list is empty */
2008f10c:	e0bffe17 	ldw	r2,-8(fp)
2008f110:	e0ffff17 	ldw	r3,-4(fp)
2008f114:	10c00015 	stw	r3,0(r2)
		return 0;  /* successfully added */
2008f118:	0005883a 	mov	r2,zero
2008f11c:	00002106 	br	2008f1a4 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (*list == descriptor)
2008f120:	e0bffe17 	ldw	r2,-8(fp)
2008f124:	10c00017 	ldw	r3,0(r2)
2008f128:	e0bfff17 	ldw	r2,-4(fp)
2008f12c:	1880021e 	bne	r3,r2,2008f138 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x74>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
2008f130:	00bffa84 	movi	r2,-22
2008f134:	00001b06 	br	2008f1a4 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
2008f138:	e0bffe17 	ldw	r2,-8(fp)
2008f13c:	10800017 	ldw	r2,0(r2)
2008f140:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
2008f144:	00000906 	br	2008f16c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xa8>
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
2008f148:	e0bffd17 	ldw	r2,-12(fp)
2008f14c:	10c00317 	ldw	r3,12(r2)
2008f150:	e0bfff17 	ldw	r2,-4(fp)
2008f154:	1880021e 	bne	r3,r2,2008f160 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x9c>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
2008f158:	00bffa84 	movi	r2,-22
2008f15c:	00001106 	br	2008f1a4 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
2008f160:	e0bffd17 	ldw	r2,-12(fp)
2008f164:	10800317 	ldw	r2,12(r2)
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		last_descr_ptr = 
2008f168:	e0bffd15 	stw	r2,-12(fp)
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
2008f16c:	e0bffd17 	ldw	r2,-12(fp)
2008f170:	10800317 	ldw	r2,12(r2)
2008f174:	e0fffe17 	ldw	r3,-8(fp)
2008f178:	18c00017 	ldw	r3,0(r3)
2008f17c:	10fff21e 	bne	r2,r3,2008f148 <__flash_rwdata_start+0xffffd818>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* add this descriptor to end of list */
	last_descr_ptr->next_desc_ptr = (alt_u32)((uintptr_t)descriptor);
2008f180:	e0ffff17 	ldw	r3,-4(fp)
2008f184:	e0bffd17 	ldw	r2,-12(fp)
2008f188:	10c00315 	stw	r3,12(r2)
	/* ensure new last pointer points the start of the list */
	descriptor->next_desc_ptr = (alt_u32)((uintptr_t)*list);  
2008f18c:	e0bffe17 	ldw	r2,-8(fp)
2008f190:	10800017 	ldw	r2,0(r2)
2008f194:	1007883a 	mov	r3,r2
2008f198:	e0bfff17 	ldw	r2,-4(fp)
2008f19c:	10c00315 	stw	r3,12(r2)
	return 0; /* successfully added */
2008f1a0:	0005883a 	mov	r2,zero
}
2008f1a4:	e037883a 	mov	sp,fp
2008f1a8:	df000017 	ldw	fp,0(sp)
2008f1ac:	dec00104 	addi	sp,sp,4
2008f1b0:	f800283a 	ret

2008f1b4 <alt_msgdma_prefetcher_add_extended_desc_to_list>:

int alt_msgdma_prefetcher_add_extended_desc_to_list (
	alt_msgdma_prefetcher_extended_descriptor** list,
	alt_msgdma_prefetcher_extended_descriptor* descriptor)
{
2008f1b4:	defff804 	addi	sp,sp,-32
2008f1b8:	df000715 	stw	fp,28(sp)
2008f1bc:	df000704 	addi	fp,sp,28
2008f1c0:	e13ffe15 	stw	r4,-8(fp)
2008f1c4:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	msgdma_addr64 root_node_addr, next_node_addr;
	
	if (descriptor == NULL)
2008f1c8:	e13fff17 	ldw	r4,-4(fp)
2008f1cc:	2000021e 	bne	r4,zero,2008f1d8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x24>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
2008f1d0:	00bffa84 	movi	r2,-22
2008f1d4:	00005906 	br	2008f33c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
2008f1d8:	e13fff17 	ldw	r4,-4(fp)
2008f1dc:	2015883a 	mov	r10,r4
2008f1e0:	0017883a 	mov	r11,zero
2008f1e4:	e2bffc15 	stw	r10,-16(fp)
2008f1e8:	e2fffd15 	stw	r11,-12(fp)
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
2008f1ec:	e13fff17 	ldw	r4,-4(fp)
2008f1f0:	21400317 	ldw	r5,12(r4)
2008f1f4:	e13ffc17 	ldw	r4,-16(fp)
2008f1f8:	29000626 	beq	r5,r4,2008f214 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
2008f1fc:	e13fff17 	ldw	r4,-4(fp)
2008f200:	21400b17 	ldw	r5,44(r4)
2008f204:	e13ffd17 	ldw	r4,-12(fp)
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
2008f208:	29000226 	beq	r5,r4,2008f214 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
2008f20c:	00bffa84 	movi	r2,-22
2008f210:	00004a06 	br	2008f33c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	if (*list == NULL)
2008f214:	e13ffe17 	ldw	r4,-8(fp)
2008f218:	21000017 	ldw	r4,0(r4)
2008f21c:	2000051e 	bne	r4,zero,2008f234 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x80>
	{
		*list = descriptor;  /* make this the root-node if list is empty */
2008f220:	e0bffe17 	ldw	r2,-8(fp)
2008f224:	e0ffff17 	ldw	r3,-4(fp)
2008f228:	10c00015 	stw	r3,0(r2)
		return 0;
2008f22c:	0005883a 	mov	r2,zero
2008f230:	00004206 	br	2008f33c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	if (*list == descriptor)
2008f234:	e13ffe17 	ldw	r4,-8(fp)
2008f238:	21400017 	ldw	r5,0(r4)
2008f23c:	e13fff17 	ldw	r4,-4(fp)
2008f240:	2900021e 	bne	r5,r4,2008f24c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x98>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
2008f244:	00bffa84 	movi	r2,-22
2008f248:	00003c06 	br	2008f33c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
2008f24c:	e13ffe17 	ldw	r4,-8(fp)
2008f250:	21000017 	ldw	r4,0(r4)
2008f254:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
2008f258:	e13ffe17 	ldw	r4,-8(fp)
2008f25c:	21000017 	ldw	r4,0(r4)
2008f260:	2011883a 	mov	r8,r4
2008f264:	0013883a 	mov	r9,zero
2008f268:	e23ffa15 	stw	r8,-24(fp)
2008f26c:	e27ffb15 	stw	r9,-20(fp)
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
2008f270:	00001806 	br	2008f2d4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x120>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* first check if descriptor already in the list */
		next_node_addr.u64 = (uintptr_t)descriptor;
2008f274:	e13fff17 	ldw	r4,-4(fp)
2008f278:	200d883a 	mov	r6,r4
2008f27c:	000f883a 	mov	r7,zero
2008f280:	e1bffc15 	stw	r6,-16(fp)
2008f284:	e1fffd15 	stw	r7,-12(fp)
		if ((last_descr_ptr->next_desc_ptr_low == next_node_addr.u32[0])
2008f288:	e13ff917 	ldw	r4,-28(fp)
2008f28c:	21400317 	ldw	r5,12(r4)
2008f290:	e13ffc17 	ldw	r4,-16(fp)
2008f294:	2900061e 	bne	r5,r4,2008f2b0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
			&& (last_descr_ptr->next_desc_ptr_high == next_node_addr.u32[1]))
2008f298:	e13ff917 	ldw	r4,-28(fp)
2008f29c:	21400b17 	ldw	r5,44(r4)
2008f2a0:	e13ffd17 	ldw	r4,-12(fp)
2008f2a4:	2900021e 	bne	r5,r4,2008f2b0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
2008f2a8:	00bffa84 	movi	r2,-22
2008f2ac:	00002306 	br	2008f33c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
2008f2b0:	e13ff917 	ldw	r4,-28(fp)
2008f2b4:	21000317 	ldw	r4,12(r4)
2008f2b8:	e13ffc15 	stw	r4,-16(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
2008f2bc:	e13ff917 	ldw	r4,-28(fp)
2008f2c0:	21000b17 	ldw	r4,44(r4)
2008f2c4:	e13ffd15 	stw	r4,-12(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
2008f2c8:	e13ffc17 	ldw	r4,-16(fp)
2008f2cc:	e17ffd17 	ldw	r5,-12(fp)
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
2008f2d0:	e13ff915 	stw	r4,-28(fp)
	last_descr_ptr = *list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
2008f2d4:	e13ff917 	ldw	r4,-28(fp)
2008f2d8:	21400317 	ldw	r5,12(r4)
2008f2dc:	e13ffa17 	ldw	r4,-24(fp)
2008f2e0:	29000426 	beq	r5,r4,2008f2f4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x140>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
2008f2e4:	e13ff917 	ldw	r4,-28(fp)
2008f2e8:	21400b17 	ldw	r5,44(r4)
2008f2ec:	e13ffb17 	ldw	r4,-20(fp)
2008f2f0:	293fe01e 	bne	r5,r4,2008f274 <__flash_rwdata_start+0xffffd944>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* add this descriptor to end of list */
	next_node_addr.u64 = (uintptr_t)descriptor;
2008f2f4:	e13fff17 	ldw	r4,-4(fp)
2008f2f8:	2005883a 	mov	r2,r4
2008f2fc:	0007883a 	mov	r3,zero
2008f300:	e0bffc15 	stw	r2,-16(fp)
2008f304:	e0fffd15 	stw	r3,-12(fp)
	last_descr_ptr->next_desc_ptr_low = next_node_addr.u32[0];
2008f308:	e0fffc17 	ldw	r3,-16(fp)
2008f30c:	e0bff917 	ldw	r2,-28(fp)
2008f310:	10c00315 	stw	r3,12(r2)
	last_descr_ptr->next_desc_ptr_high = next_node_addr.u32[1];
2008f314:	e0fffd17 	ldw	r3,-12(fp)
2008f318:	e0bff917 	ldw	r2,-28(fp)
2008f31c:	10c00b15 	stw	r3,44(r2)
	/* ensure new last pointer points the beginning of the list */
	descriptor->next_desc_ptr_low = root_node_addr.u32[0];
2008f320:	e0fffa17 	ldw	r3,-24(fp)
2008f324:	e0bfff17 	ldw	r2,-4(fp)
2008f328:	10c00315 	stw	r3,12(r2)
	descriptor->next_desc_ptr_high = root_node_addr.u32[1];
2008f32c:	e0fffb17 	ldw	r3,-20(fp)
2008f330:	e0bfff17 	ldw	r2,-4(fp)
2008f334:	10c00b15 	stw	r3,44(r2)
	return 0;
2008f338:	0005883a 	mov	r2,zero
}
2008f33c:	e037883a 	mov	sp,fp
2008f340:	df000017 	ldw	fp,0(sp)
2008f344:	dec00104 	addi	sp,sp,4
2008f348:	f800283a 	ret

2008f34c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_std_list_own_by_hw_bits (
	alt_msgdma_prefetcher_standard_descriptor *list)
{
2008f34c:	defffc04 	addi	sp,sp,-16
2008f350:	df000315 	stw	fp,12(sp)
2008f354:	df000304 	addi	fp,sp,12
2008f358:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
2008f35c:	e03ffe15 	stw	zero,-8(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	if (list == NULL)
2008f360:	e0bfff17 	ldw	r2,-4(fp)
2008f364:	1000021e 	bne	r2,zero,2008f370 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x24>
	{
		return -EINVAL;  /* this list cannot be empty */
2008f368:	00bffa84 	movi	r2,-22
2008f36c:	00001906 	br	2008f3d4 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x88>
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
2008f370:	e0bfff17 	ldw	r2,-4(fp)
2008f374:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
2008f378:	00000a06 	br	2008f3a4 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x58>
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
2008f37c:	e0bffd17 	ldw	r2,-12(fp)
2008f380:	10800717 	ldw	r2,28(r2)
2008f384:	e0bffe15 	stw	r2,-8(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
2008f388:	e0bffe17 	ldw	r2,-8(fp)
2008f38c:	10d00034 	orhi	r3,r2,16384
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
2008f390:	e0bffd17 	ldw	r2,-12(fp)
2008f394:	10c00715 	stw	r3,28(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
2008f398:	e0bffd17 	ldw	r2,-12(fp)
2008f39c:	10800317 	ldw	r2,12(r2)
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
2008f3a0:	e0bffd15 	stw	r2,-12(fp)
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
2008f3a4:	e0bffd17 	ldw	r2,-12(fp)
2008f3a8:	10c00317 	ldw	r3,12(r2)
2008f3ac:	e0bfff17 	ldw	r2,-4(fp)
2008f3b0:	18bff21e 	bne	r3,r2,2008f37c <__flash_rwdata_start+0xffffda4c>
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
2008f3b4:	e0bffd17 	ldw	r2,-12(fp)
2008f3b8:	10800717 	ldw	r2,28(r2)
2008f3bc:	e0bffe15 	stw	r2,-8(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
2008f3c0:	e0bffe17 	ldw	r2,-8(fp)
2008f3c4:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
2008f3c8:	e0bffd17 	ldw	r2,-12(fp)
2008f3cc:	10c00715 	stw	r3,28(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	
	return 0;
2008f3d0:	0005883a 	mov	r2,zero
}
2008f3d4:	e037883a 	mov	sp,fp
2008f3d8:	df000017 	ldw	fp,0(sp)
2008f3dc:	dec00104 	addi	sp,sp,4
2008f3e0:	f800283a 	ret

2008f3e4 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits (
	alt_msgdma_prefetcher_extended_descriptor *list)
{
2008f3e4:	defff804 	addi	sp,sp,-32
2008f3e8:	df000715 	stw	fp,28(sp)
2008f3ec:	df000704 	addi	fp,sp,28
2008f3f0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
2008f3f4:	e03ffa15 	stw	zero,-24(fp)
	msgdma_addr64 root_node_addr, next_node_addr;
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	
	if (list == NULL)
2008f3f8:	e13fff17 	ldw	r4,-4(fp)
2008f3fc:	2000021e 	bne	r4,zero,2008f408 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x24>
	{
		return -EINVAL;  /* this list cannot be empty */
2008f400:	00bffa84 	movi	r2,-22
2008f404:	00002806 	br	2008f4a8 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xc4>
	}
	
	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
2008f408:	e13fff17 	ldw	r4,-4(fp)
2008f40c:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;
2008f410:	e13fff17 	ldw	r4,-4(fp)
2008f414:	2005883a 	mov	r2,r4
2008f418:	0007883a 	mov	r3,zero
2008f41c:	e0bffb15 	stw	r2,-20(fp)
2008f420:	e0fffc15 	stw	r3,-16(fp)

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
2008f424:	00001006 	br	2008f468 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x84>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
2008f428:	e0bff917 	ldw	r2,-28(fp)
2008f42c:	10800f17 	ldw	r2,60(r2)
2008f430:	e0bffa15 	stw	r2,-24(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
2008f434:	e0bffa17 	ldw	r2,-24(fp)
2008f438:	10d00034 	orhi	r3,r2,16384
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
2008f43c:	e0bff917 	ldw	r2,-28(fp)
2008f440:	10c00f15 	stw	r3,60(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
2008f444:	e0bff917 	ldw	r2,-28(fp)
2008f448:	10800317 	ldw	r2,12(r2)
2008f44c:	e0bffd15 	stw	r2,-12(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
2008f450:	e0bff917 	ldw	r2,-28(fp)
2008f454:	10800b17 	ldw	r2,44(r2)
2008f458:	e0bffe15 	stw	r2,-8(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
2008f45c:	e0bffd17 	ldw	r2,-12(fp)
2008f460:	e0fffe17 	ldw	r3,-8(fp)
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
2008f464:	e0bff915 	stw	r2,-28(fp)
	last_descr_ptr = list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
2008f468:	e0bff917 	ldw	r2,-28(fp)
2008f46c:	10c00317 	ldw	r3,12(r2)
2008f470:	e0bffb17 	ldw	r2,-20(fp)
2008f474:	18800426 	beq	r3,r2,2008f488 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xa4>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
2008f478:	e0bff917 	ldw	r2,-28(fp)
2008f47c:	10c00b17 	ldw	r3,44(r2)
2008f480:	e0bffc17 	ldw	r2,-16(fp)
2008f484:	18bfe81e 	bne	r3,r2,2008f428 <__flash_rwdata_start+0xffffdaf8>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
2008f488:	e0bff917 	ldw	r2,-28(fp)
2008f48c:	10800f17 	ldw	r2,60(r2)
2008f490:	e0bffa15 	stw	r2,-24(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
2008f494:	e0bffa17 	ldw	r2,-24(fp)
2008f498:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
2008f49c:	e0bff917 	ldw	r2,-28(fp)
2008f4a0:	10c00f15 	stw	r3,60(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	return 0;
2008f4a4:	0005883a 	mov	r2,zero
}
2008f4a8:	e037883a 	mov	sp,fp
2008f4ac:	df000017 	ldw	fp,0(sp)
2008f4b0:	dec00104 	addi	sp,sp,4
2008f4b4:	f800283a 	ret

2008f4b8 <alt_msgdma_start_prefetcher_with_list_addr>:
int alt_msgdma_start_prefetcher_with_list_addr (
	alt_msgdma_dev *dev,
	alt_u64  list_addr,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
2008f4b8:	deffef04 	addi	sp,sp,-68
2008f4bc:	df001015 	stw	fp,64(sp)
2008f4c0:	df001004 	addi	fp,sp,64
2008f4c4:	e13ffb15 	stw	r4,-20(fp)
2008f4c8:	e17ffc15 	stw	r5,-16(fp)
2008f4cc:	e1bffd15 	stw	r6,-12(fp)
2008f4d0:	3807883a 	mov	r3,r7
2008f4d4:	e0800117 	ldw	r2,4(fp)
2008f4d8:	e0fffe05 	stb	r3,-8(fp)
2008f4dc:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 prefetcher_ctl = 0;
2008f4e0:	e03ff015 	stw	zero,-64(fp)
	alt_u32 dispatcher_ctl = 0;
2008f4e4:	e03ff115 	stw	zero,-60(fp)
	alt_irq_context context = 0;
2008f4e8:	e03ff215 	stw	zero,-56(fp)
	
	/* use helper struct to get easy access to hi/low address */
	msgdma_addr64 root_node_addr;
	root_node_addr.u64 = list_addr;  
2008f4ec:	e0bffc17 	ldw	r2,-16(fp)
2008f4f0:	e0bff915 	stw	r2,-28(fp)
2008f4f4:	e0bffd17 	ldw	r2,-12(fp)
2008f4f8:	e0bffa15 	stw	r2,-24(fp)
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND (dev->regs_lock, 0);
	
	/* case where prefetcher already started, return busy error */ 
	prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
2008f4fc:	e0bffb17 	ldw	r2,-20(fp)
2008f500:	10800617 	ldw	r2,24(r2)
2008f504:	10800037 	ldwio	r2,0(r2)
2008f508:	e0bff015 	stw	r2,-64(fp)
	if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
2008f50c:	e0bff017 	ldw	r2,-64(fp)
2008f510:	1080004c 	andi	r2,r2,1
2008f514:	10000226 	beq	r2,zero,2008f520 <alt_msgdma_start_prefetcher_with_list_addr+0x68>
		/* release the registers semaphore */
		ALT_SEM_POST (dev->regs_lock);
		return -EBUSY;
2008f518:	00bffc04 	movi	r2,-16
2008f51c:	00009206 	br	2008f768 <alt_msgdma_start_prefetcher_with_list_addr+0x2b0>
	}
		
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	   read or write masters  */
	/* stop issuing more descriptors */
	dispatcher_ctl = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
2008f520:	00800804 	movi	r2,32
2008f524:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2008f528:	0005303a 	rdctl	r2,status
2008f52c:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2008f530:	e0fff317 	ldw	r3,-52(fp)
2008f534:	00bfff84 	movi	r2,-2
2008f538:	1884703a 	and	r2,r3,r2
2008f53c:	1001703a 	wrctl	status,r2
  
  return context;
2008f540:	e0bff317 	ldw	r2,-52(fp)
	
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
2008f544:	e0bff215 	stw	r2,-56(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
2008f548:	e0bffb17 	ldw	r2,-20(fp)
2008f54c:	10800317 	ldw	r2,12(r2)
2008f550:	10800104 	addi	r2,r2,4
2008f554:	e0fff117 	ldw	r3,-60(fp)
2008f558:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS( dev->csr_base, 
2008f55c:	e0bffb17 	ldw	r2,-20(fp)
2008f560:	10800317 	ldw	r2,12(r2)
2008f564:	e0fffb17 	ldw	r3,-20(fp)
2008f568:	18c00317 	ldw	r3,12(r3)
2008f56c:	18c00037 	ldwio	r3,0(r3)
2008f570:	10c00035 	stwio	r3,0(r2)
2008f574:	e0bff217 	ldw	r2,-56(fp)
2008f578:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2008f57c:	e0bff417 	ldw	r2,-48(fp)
2008f580:	1001703a 	wrctl	status,r2
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up dispatcher to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if(dev->callback)
2008f584:	e0bffb17 	ldw	r2,-20(fp)
2008f588:	10800b17 	ldw	r2,44(r2)
2008f58c:	10002326 	beq	r2,zero,2008f61c <alt_msgdma_start_prefetcher_with_list_addr+0x164>
	{
		dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
2008f590:	e0bffb17 	ldw	r2,-20(fp)
2008f594:	10c00d17 	ldw	r3,52(r2)
2008f598:	e0bff117 	ldw	r2,-60(fp)
2008f59c:	1884b03a 	or	r2,r3,r2
2008f5a0:	10800514 	ori	r2,r2,20
2008f5a4:	e0bff115 	stw	r2,-60(fp)
				| ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
		dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
2008f5a8:	e0fff117 	ldw	r3,-60(fp)
2008f5ac:	00bff7c4 	movi	r2,-33
2008f5b0:	1884703a 	and	r2,r3,r2
2008f5b4:	e0bff115 	stw	r2,-60(fp)
		
		prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
2008f5b8:	e0bff017 	ldw	r2,-64(fp)
2008f5bc:	10800214 	ori	r2,r2,8
2008f5c0:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2008f5c4:	0005303a 	rdctl	r2,status
2008f5c8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2008f5cc:	e0fff517 	ldw	r3,-44(fp)
2008f5d0:	00bfff84 	movi	r2,-2
2008f5d4:	1884703a 	and	r2,r3,r2
2008f5d8:	1001703a 	wrctl	status,r2
  
  return context;
2008f5dc:	e0bff517 	ldw	r2,-44(fp)
	    /* making sure the read-modify-write below can't be pre-empted */
	    context = alt_irq_disable_all(); 
2008f5e0:	e0bff215 	stw	r2,-56(fp)
	    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
2008f5e4:	e0bffb17 	ldw	r2,-20(fp)
2008f5e8:	10800317 	ldw	r2,12(r2)
2008f5ec:	10800104 	addi	r2,r2,4
2008f5f0:	e0fff117 	ldw	r3,-60(fp)
2008f5f4:	10c00035 	stwio	r3,0(r2)
		IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
2008f5f8:	e0bffb17 	ldw	r2,-20(fp)
2008f5fc:	10800617 	ldw	r2,24(r2)
2008f600:	e0fff017 	ldw	r3,-64(fp)
2008f604:	10c00035 	stwio	r3,0(r2)
2008f608:	e0bff217 	ldw	r2,-56(fp)
2008f60c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2008f610:	e0bff617 	ldw	r2,-40(fp)
2008f614:	1001703a 	wrctl	status,r2
2008f618:	00002306 	br	2008f6a8 <alt_msgdma_start_prefetcher_with_list_addr+0x1f0>
	  *   - Stop on an error with any particular descriptor
	  *   - Disable interrupt generation
	  */
	 else
	 {
		 dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
2008f61c:	e0bffb17 	ldw	r2,-20(fp)
2008f620:	10c00d17 	ldw	r3,52(r2)
2008f624:	e0bff117 	ldw	r2,-60(fp)
2008f628:	1884b03a 	or	r2,r3,r2
2008f62c:	10800114 	ori	r2,r2,4
2008f630:	e0bff115 	stw	r2,-60(fp)
		 dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
2008f634:	e0fff117 	ldw	r3,-60(fp)
2008f638:	00bff3c4 	movi	r2,-49
2008f63c:	1884703a 	and	r2,r3,r2
2008f640:	e0bff115 	stw	r2,-60(fp)
				 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
2008f644:	e0fff017 	ldw	r3,-64(fp)
2008f648:	00bffdc4 	movi	r2,-9
2008f64c:	1884703a 	and	r2,r3,r2
2008f650:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2008f654:	0005303a 	rdctl	r2,status
2008f658:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2008f65c:	e0fff717 	ldw	r3,-36(fp)
2008f660:	00bfff84 	movi	r2,-2
2008f664:	1884703a 	and	r2,r3,r2
2008f668:	1001703a 	wrctl	status,r2
  
  return context;
2008f66c:	e0bff717 	ldw	r2,-36(fp)
	     /* making sure the read-modify-write below can't be pre-empted */
	     context = alt_irq_disable_all();
2008f670:	e0bff215 	stw	r2,-56(fp)
	     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
2008f674:	e0bffb17 	ldw	r2,-20(fp)
2008f678:	10800317 	ldw	r2,12(r2)
2008f67c:	10800104 	addi	r2,r2,4
2008f680:	e0fff117 	ldw	r3,-60(fp)
2008f684:	10c00035 	stwio	r3,0(r2)
	     IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
2008f688:	e0bffb17 	ldw	r2,-20(fp)
2008f68c:	10800617 	ldw	r2,24(r2)
2008f690:	e0fff017 	ldw	r3,-64(fp)
2008f694:	10c00035 	stwio	r3,0(r2)
2008f698:	e0bff217 	ldw	r2,-56(fp)
2008f69c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2008f6a0:	e0bff817 	ldw	r2,-32(fp)
2008f6a4:	1001703a 	wrctl	status,r2
	     alt_irq_enable_all(context);
	 }   
	
	 /* set next descriptor registers to point to the list root-node */
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_LOW(dev->prefetcher_base,
2008f6a8:	e0bffb17 	ldw	r2,-20(fp)
2008f6ac:	10800617 	ldw	r2,24(r2)
2008f6b0:	10800104 	addi	r2,r2,4
2008f6b4:	e0fff917 	ldw	r3,-28(fp)
2008f6b8:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[0]);
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
2008f6bc:	e0bffb17 	ldw	r2,-20(fp)
2008f6c0:	10800617 	ldw	r2,24(r2)
2008f6c4:	10800204 	addi	r2,r2,8
2008f6c8:	e0fffa17 	ldw	r3,-24(fp)
2008f6cc:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[1]);
		
	 /* set park-mode */
	 if (park_mode_en){
2008f6d0:	e0bffe03 	ldbu	r2,-8(fp)
2008f6d4:	10000426 	beq	r2,zero,2008f6e8 <alt_msgdma_start_prefetcher_with_list_addr+0x230>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
2008f6d8:	e0bff017 	ldw	r2,-64(fp)
2008f6dc:	10800414 	ori	r2,r2,16
2008f6e0:	e0bff015 	stw	r2,-64(fp)
2008f6e4:	00000406 	br	2008f6f8 <alt_msgdma_start_prefetcher_with_list_addr+0x240>
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
2008f6e8:	e0fff017 	ldw	r3,-64(fp)
2008f6ec:	00bffbc4 	movi	r2,-17
2008f6f0:	1884703a 	and	r2,r3,r2
2008f6f4:	e0bff015 	stw	r2,-64(fp)
	 }
	 
	 /* set poll-en */
	 if (poll_en){
2008f6f8:	e0bfff03 	ldbu	r2,-4(fp)
2008f6fc:	10000e26 	beq	r2,zero,2008f738 <alt_msgdma_start_prefetcher_with_list_addr+0x280>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
2008f700:	e0bff017 	ldw	r2,-64(fp)
2008f704:	10800094 	ori	r2,r2,2
2008f708:	e0bff015 	stw	r2,-64(fp)
		 if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
2008f70c:	e0bffb17 	ldw	r2,-20(fp)
2008f710:	10800617 	ldw	r2,24(r2)
2008f714:	10800304 	addi	r2,r2,12
2008f718:	10800037 	ldwio	r2,0(r2)
2008f71c:	10000a1e 	bne	r2,zero,2008f748 <alt_msgdma_start_prefetcher_with_list_addr+0x290>
				 dev->prefetcher_base) == 0){
			 /* set poll frequency to some non-zero default value */
			 IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
2008f720:	e0bffb17 	ldw	r2,-20(fp)
2008f724:	10800617 	ldw	r2,24(r2)
2008f728:	10800304 	addi	r2,r2,12
2008f72c:	00c03fc4 	movi	r3,255
2008f730:	10c00035 	stwio	r3,0(r2)
2008f734:	00000406 	br	2008f748 <alt_msgdma_start_prefetcher_with_list_addr+0x290>
					 dev->prefetcher_base, 0xFF);
		 }
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_CLR_MASK; 
2008f738:	e0fff017 	ldw	r3,-64(fp)
2008f73c:	00bfff44 	movi	r2,-3
2008f740:	1884703a 	and	r2,r3,r2
2008f744:	e0bff015 	stw	r2,-64(fp)
	 }
	 
	 /* set the prefetcher run bit */
	 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_RUN_SET_MASK;
2008f748:	e0bff017 	ldw	r2,-64(fp)
2008f74c:	10800054 	ori	r2,r2,1
2008f750:	e0bff015 	stw	r2,-64(fp)
	 /* start the dma since run bit is set */
	 IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
2008f754:	e0bffb17 	ldw	r2,-20(fp)
2008f758:	10800617 	ldw	r2,24(r2)
2008f75c:	e0fff017 	ldw	r3,-64(fp)
2008f760:	10c00035 	stwio	r3,0(r2)
	  * Now that access to the registers is complete, release the registers
	  * semaphore so that other threads can access the registers.
	  */
	 ALT_SEM_POST (dev->regs_lock);
	 
	 return 0;
2008f764:	0005883a 	mov	r2,zero
}
2008f768:	e037883a 	mov	sp,fp
2008f76c:	df000017 	ldw	fp,0(sp)
2008f770:	dec00104 	addi	sp,sp,4
2008f774:	f800283a 	ret

2008f778 <alt_msgdma_start_prefetcher_with_std_desc_list>:
int alt_msgdma_start_prefetcher_with_std_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{	
2008f778:	defff704 	addi	sp,sp,-36
2008f77c:	dfc00815 	stw	ra,32(sp)
2008f780:	df000715 	stw	fp,28(sp)
2008f784:	dc400615 	stw	r17,24(sp)
2008f788:	dc000515 	stw	r16,20(sp)
2008f78c:	df000704 	addi	fp,sp,28
2008f790:	e13ffa15 	stw	r4,-24(fp)
2008f794:	e17ffb15 	stw	r5,-20(fp)
2008f798:	3007883a 	mov	r3,r6
2008f79c:	3805883a 	mov	r2,r7
2008f7a0:	e0fffc05 	stb	r3,-16(fp)
2008f7a4:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_std_list_own_by_hw_bits(list) != 0){
2008f7a8:	e13ffb17 	ldw	r4,-20(fp)
2008f7ac:	008f34c0 	call	2008f34c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>
2008f7b0:	10000226 	beq	r2,zero,2008f7bc <alt_msgdma_start_prefetcher_with_std_desc_list+0x44>
		return -EINVAL;
2008f7b4:	00bffa84 	movi	r2,-22
2008f7b8:	00000b06 	br	2008f7e8 <alt_msgdma_start_prefetcher_with_std_desc_list+0x70>
	}
	
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list,
2008f7bc:	e0bffb17 	ldw	r2,-20(fp)
2008f7c0:	1021883a 	mov	r16,r2
2008f7c4:	0023883a 	mov	r17,zero
2008f7c8:	e0fffc03 	ldbu	r3,-16(fp)
2008f7cc:	e0bffd03 	ldbu	r2,-12(fp)
2008f7d0:	d8800015 	stw	r2,0(sp)
2008f7d4:	e13ffa17 	ldw	r4,-24(fp)
2008f7d8:	800b883a 	mov	r5,r16
2008f7dc:	880d883a 	mov	r6,r17
2008f7e0:	180f883a 	mov	r7,r3
2008f7e4:	008f4b80 	call	2008f4b8 <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
2008f7e8:	e6fffe04 	addi	sp,fp,-8
2008f7ec:	dfc00317 	ldw	ra,12(sp)
2008f7f0:	df000217 	ldw	fp,8(sp)
2008f7f4:	dc400117 	ldw	r17,4(sp)
2008f7f8:	dc000017 	ldw	r16,0(sp)
2008f7fc:	dec00404 	addi	sp,sp,16
2008f800:	f800283a 	ret

2008f804 <alt_msgdma_start_prefetcher_with_extd_desc_list>:
int alt_msgdma_start_prefetcher_with_extd_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_extended_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
2008f804:	defff704 	addi	sp,sp,-36
2008f808:	dfc00815 	stw	ra,32(sp)
2008f80c:	df000715 	stw	fp,28(sp)
2008f810:	dc400615 	stw	r17,24(sp)
2008f814:	dc000515 	stw	r16,20(sp)
2008f818:	df000704 	addi	fp,sp,28
2008f81c:	e13ffa15 	stw	r4,-24(fp)
2008f820:	e17ffb15 	stw	r5,-20(fp)
2008f824:	3007883a 	mov	r3,r6
2008f828:	3805883a 	mov	r2,r7
2008f82c:	e0fffc05 	stb	r3,-16(fp)
2008f830:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list) != 0){
2008f834:	e13ffb17 	ldw	r4,-20(fp)
2008f838:	008f3e40 	call	2008f3e4 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>
2008f83c:	10000226 	beq	r2,zero,2008f848 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x44>
		return -EINVAL;
2008f840:	00bffa84 	movi	r2,-22
2008f844:	00000b06 	br	2008f874 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x70>
	}
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list, 
2008f848:	e0bffb17 	ldw	r2,-20(fp)
2008f84c:	1021883a 	mov	r16,r2
2008f850:	0023883a 	mov	r17,zero
2008f854:	e0fffc03 	ldbu	r3,-16(fp)
2008f858:	e0bffd03 	ldbu	r2,-12(fp)
2008f85c:	d8800015 	stw	r2,0(sp)
2008f860:	e13ffa17 	ldw	r4,-24(fp)
2008f864:	800b883a 	mov	r5,r16
2008f868:	880d883a 	mov	r6,r17
2008f86c:	180f883a 	mov	r7,r3
2008f870:	008f4b80 	call	2008f4b8 <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
2008f874:	e6fffe04 	addi	sp,fp,-8
2008f878:	dfc00317 	ldw	ra,12(sp)
2008f87c:	df000217 	ldw	fp,8(sp)
2008f880:	dc400117 	ldw	r17,4(sp)
2008f884:	dc000017 	ldw	r16,0(sp)
2008f888:	dec00404 	addi	sp,sp,16
2008f88c:	f800283a 	ret

2008f890 <alt_msgdma_open>:
 * Returns:
 * - Pointer to msgdma device instance structure, or null if the device
 *   could not be opened.
 */
alt_msgdma_dev* alt_msgdma_open (const char* name)
{
2008f890:	defffc04 	addi	sp,sp,-16
2008f894:	dfc00315 	stw	ra,12(sp)
2008f898:	df000215 	stw	fp,8(sp)
2008f89c:	df000204 	addi	fp,sp,8
2008f8a0:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev* dev = NULL;
2008f8a4:	e03ffe15 	stw	zero,-8(fp)

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
2008f8a8:	e13fff17 	ldw	r4,-4(fp)
2008f8ac:	d1600d04 	addi	r5,gp,-32716
2008f8b0:	00900200 	call	20090020 <alt_find_dev>
2008f8b4:	e0bffe15 	stw	r2,-8(fp)

    if (NULL == dev)
2008f8b8:	e0bffe17 	ldw	r2,-8(fp)
2008f8bc:	1000041e 	bne	r2,zero,2008f8d0 <alt_msgdma_open+0x40>
    {
        ALT_ERRNO = ENODEV;
2008f8c0:	008dd080 	call	2008dd08 <alt_get_errno>
2008f8c4:	1007883a 	mov	r3,r2
2008f8c8:	008004c4 	movi	r2,19
2008f8cc:	18800015 	stw	r2,0(r3)
    }

    return dev;
2008f8d0:	e0bffe17 	ldw	r2,-8(fp)
}
2008f8d4:	e037883a 	mov	sp,fp
2008f8d8:	dfc00117 	ldw	ra,4(sp)
2008f8dc:	df000017 	ldw	fp,0(sp)
2008f8e0:	dec00204 	addi	sp,sp,8
2008f8e4:	f800283a 	ret

2008f8e8 <alt_msgdma_init>:
 * This routine disables interrupts, descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_msgdma_init (alt_msgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
2008f8e8:	defff804 	addi	sp,sp,-32
2008f8ec:	dfc00715 	stw	ra,28(sp)
2008f8f0:	df000615 	stw	fp,24(sp)
2008f8f4:	df000604 	addi	fp,sp,24
2008f8f8:	e13ffd15 	stw	r4,-12(fp)
2008f8fc:	e17ffe15 	stw	r5,-8(fp)
2008f900:	e1bfff15 	stw	r6,-4(fp)
    extern alt_llist alt_msgdma_list;
    alt_u32 temporary_control;
    int error;

    if (dev->prefetcher_enable)
2008f904:	e0bffd17 	ldw	r2,-12(fp)
2008f908:	10801783 	ldbu	r2,94(r2)
2008f90c:	10803fcc 	andi	r2,r2,255
2008f910:	10000b26 	beq	r2,zero,2008f940 <alt_msgdma_init+0x58>
    {
    	/* start prefetcher reset sequence */
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, 
2008f914:	e0bffd17 	ldw	r2,-12(fp)
2008f918:	10800617 	ldw	r2,24(r2)
2008f91c:	00c00104 	movi	r3,4
2008f920:	10c00035 	stwio	r3,0(r2)
    			ALT_MSGDMA_PREFETCHER_CTRL_RESET_SET_MASK);
    	/* wait until hw clears the bit */
    	while(ALT_MSGDMA_PREFETCHER_CTRL_RESET_GET(
2008f924:	0001883a 	nop
2008f928:	e0bffd17 	ldw	r2,-12(fp)
2008f92c:	10800617 	ldw	r2,24(r2)
2008f930:	10800037 	ldwio	r2,0(r2)
2008f934:	1080010c 	andi	r2,r2,4
2008f938:	1005d0ba 	srai	r2,r2,2
2008f93c:	103ffa1e 	bne	r2,zero,2008f928 <__flash_rwdata_start+0xffffdff8>
    }    
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
2008f940:	e0bffd17 	ldw	r2,-12(fp)
2008f944:	10800317 	ldw	r2,12(r2)
2008f948:	10800104 	addi	r2,r2,4
2008f94c:	00c00084 	movi	r3,2
2008f950:	10c00035 	stwio	r3,0(r2)
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
2008f954:	0001883a 	nop
2008f958:	e0bffd17 	ldw	r2,-12(fp)
2008f95c:	10800317 	ldw	r2,12(r2)
2008f960:	10800037 	ldwio	r2,0(r2)
    		& ALTERA_MSGDMA_CSR_RESET_STATE_MASK));
2008f964:	1080100c 	andi	r2,r2,64
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
2008f968:	103ffb1e 	bne	r2,zero,2008f958 <__flash_rwdata_start+0xffffe028>
    * Disable interrupts, halt descriptor processing,
    * and clear status register content
    */

    /* disable global interrupt */
    temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
2008f96c:	e0bffd17 	ldw	r2,-12(fp)
2008f970:	10800317 	ldw	r2,12(r2)
2008f974:	10800104 	addi	r2,r2,4
2008f978:	10800037 	ldwio	r2,0(r2)
2008f97c:	1007883a 	mov	r3,r2
2008f980:	00bffbc4 	movi	r2,-17
2008f984:	1884703a 	and	r2,r3,r2
2008f988:	e0bffb15 	stw	r2,-20(fp)
    		& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    /* stopping descriptor */
    temporary_control |= ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
2008f98c:	e0bffb17 	ldw	r2,-20(fp)
2008f990:	10800814 	ori	r2,r2,32
2008f994:	e0bffb15 	stw	r2,-20(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
2008f998:	e0bffd17 	ldw	r2,-12(fp)
2008f99c:	10800317 	ldw	r2,12(r2)
2008f9a0:	10800104 	addi	r2,r2,4
2008f9a4:	e0fffb17 	ldw	r3,-20(fp)
2008f9a8:	10c00035 	stwio	r3,0(r2)

    /* clear the CSR status register */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base, 
2008f9ac:	e0bffd17 	ldw	r2,-12(fp)
2008f9b0:	10800317 	ldw	r2,12(r2)
2008f9b4:	e0fffd17 	ldw	r3,-12(fp)
2008f9b8:	18c00317 	ldw	r3,12(r3)
2008f9bc:	18c00037 	ldwio	r3,0(r3)
2008f9c0:	10c00035 	stwio	r3,0(r2)
    		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    
    if (dev->prefetcher_enable)
2008f9c4:	e0bffd17 	ldw	r2,-12(fp)
2008f9c8:	10801783 	ldbu	r2,94(r2)
2008f9cc:	10803fcc 	andi	r2,r2,255
2008f9d0:	10000826 	beq	r2,zero,2008f9f4 <alt_msgdma_init+0x10c>
    {
    	/* clear all status bits that are set, since theyre W1C */
    	IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base, 
2008f9d4:	e0bffd17 	ldw	r2,-12(fp)
2008f9d8:	10800617 	ldw	r2,24(r2)
2008f9dc:	10800404 	addi	r2,r2,16
2008f9e0:	e0fffd17 	ldw	r3,-12(fp)
2008f9e4:	18c00617 	ldw	r3,24(r3)
2008f9e8:	18c00404 	addi	r3,r3,16
2008f9ec:	18c00037 	ldwio	r3,0(r3)
2008f9f0:	10c00035 	stwio	r3,0(r2)
    			IORD_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base));
    }

    /* Register this instance of the msgdma controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_msgdma_list);
2008f9f4:	e13ffd17 	ldw	r4,-12(fp)
2008f9f8:	d1600d04 	addi	r5,gp,-32716
2008f9fc:	008fec40 	call	2008fec4 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
2008fa00:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
2008fa04:	e0bffc15 	stw	r2,-16(fp)
            
    if (!error)
2008fa08:	e0bffc17 	ldw	r2,-16(fp)
2008fa0c:	1000081e 	bne	r2,zero,2008fa30 <alt_msgdma_init+0x148>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
2008fa10:	d8000015 	stw	zero,0(sp)
2008fa14:	e13ffe17 	ldw	r4,-8(fp)
2008fa18:	e17fff17 	ldw	r5,-4(fp)
2008fa1c:	01880274 	movhi	r6,8201
2008fa20:	31b7c604 	addi	r6,r6,-8424
2008fa24:	e1fffd17 	ldw	r7,-12(fp)
2008fa28:	00900e00 	call	200900e0 <alt_ic_isr_register>
2008fa2c:	00000306 	br	2008fa3c <alt_msgdma_init+0x154>
    }
    else
    {
        alt_printf("failed to create semaphores\n");
2008fa30:	01000034 	movhi	r4,0
2008fa34:	21016304 	addi	r4,r4,1420
2008fa38:	009075c0 	call	2009075c <alt_printf>
    }
    
    return;
2008fa3c:	0001883a 	nop

}
2008fa40:	e037883a 	mov	sp,fp
2008fa44:	dfc00117 	ldw	ra,4(sp)
2008fa48:	df000017 	ldw	fp,0(sp)
2008fa4c:	dec00204 	addi	sp,sp,8
2008fa50:	f800283a 	ret

2008fa54 <alt_msgdma_register_callback>:
void alt_msgdma_register_callback(
	alt_msgdma_dev *dev,
	alt_msgdma_callback callback,
	alt_u32 control,
	void *context)
{
2008fa54:	defffb04 	addi	sp,sp,-20
2008fa58:	df000415 	stw	fp,16(sp)
2008fa5c:	df000404 	addi	fp,sp,16
2008fa60:	e13ffc15 	stw	r4,-16(fp)
2008fa64:	e17ffd15 	stw	r5,-12(fp)
2008fa68:	e1bffe15 	stw	r6,-8(fp)
2008fa6c:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
2008fa70:	e0bffc17 	ldw	r2,-16(fp)
2008fa74:	e0fffd17 	ldw	r3,-12(fp)
2008fa78:	10c00b15 	stw	r3,44(r2)
    dev->callback_context = context;
2008fa7c:	e0bffc17 	ldw	r2,-16(fp)
2008fa80:	e0ffff17 	ldw	r3,-4(fp)
2008fa84:	10c00c15 	stw	r3,48(r2)
    dev->control          = control;
2008fa88:	e0bffc17 	ldw	r2,-16(fp)
2008fa8c:	e0fffe17 	ldw	r3,-8(fp)
2008fa90:	10c00d15 	stw	r3,52(r2)

    return ;
2008fa94:	0001883a 	nop
}
2008fa98:	e037883a 	mov	sp,fp
2008fa9c:	df000017 	ldw	fp,0(sp)
2008faa0:	dec00104 	addi	sp,sp,4
2008faa4:	f800283a 	ret

2008faa8 <alt_msgdma_standard_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_standard_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
2008faa8:	defffc04 	addi	sp,sp,-16
2008faac:	dfc00315 	stw	ra,12(sp)
2008fab0:	df000215 	stw	fp,8(sp)
2008fab4:	df000204 	addi	fp,sp,8
2008fab8:	e13ffe15 	stw	r4,-8(fp)
2008fabc:	e17fff15 	stw	r5,-4(fp)
   /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
    return alt_msgdma_descriptor_async_transfer(dev, desc, NULL);
2008fac0:	e13ffe17 	ldw	r4,-8(fp)
2008fac4:	e17fff17 	ldw	r5,-4(fp)
2008fac8:	000d883a 	mov	r6,zero
2008facc:	008e27c0 	call	2008e27c <alt_msgdma_descriptor_async_transfer>

}
2008fad0:	e037883a 	mov	sp,fp
2008fad4:	dfc00117 	ldw	ra,4(sp)
2008fad8:	df000017 	ldw	fp,0(sp)
2008fadc:	dec00204 	addi	sp,sp,8
2008fae0:	f800283a 	ret

2008fae4 <alt_msgdma_extended_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_extended_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
2008fae4:	defffc04 	addi	sp,sp,-16
2008fae8:	dfc00315 	stw	ra,12(sp)
2008faec:	df000215 	stw	fp,8(sp)
2008faf0:	df000204 	addi	fp,sp,8
2008faf4:	e13ffe15 	stw	r4,-8(fp)
2008faf8:	e17fff15 	stw	r5,-4(fp)
    /*
    * Error detection/handling should be performed at the application
    * or callback level as appropriate.
    */
    return alt_msgdma_descriptor_async_transfer(dev, NULL, desc);
2008fafc:	e13ffe17 	ldw	r4,-8(fp)
2008fb00:	000b883a 	mov	r5,zero
2008fb04:	e1bfff17 	ldw	r6,-4(fp)
2008fb08:	008e27c0 	call	2008e27c <alt_msgdma_descriptor_async_transfer>
}
2008fb0c:	e037883a 	mov	sp,fp
2008fb10:	dfc00117 	ldw	ra,4(sp)
2008fb14:	df000017 	ldw	fp,0(sp)
2008fb18:	dec00204 	addi	sp,sp,8
2008fb1c:	f800283a 	ret

2008fb20 <alt_msgdma_standard_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_standard_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
2008fb20:	defffc04 	addi	sp,sp,-16
2008fb24:	dfc00315 	stw	ra,12(sp)
2008fb28:	df000215 	stw	fp,8(sp)
2008fb2c:	df000204 	addi	fp,sp,8
2008fb30:	e13ffe15 	stw	r4,-8(fp)
2008fb34:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, desc, NULL);
2008fb38:	e13ffe17 	ldw	r4,-8(fp)
2008fb3c:	e17fff17 	ldw	r5,-4(fp)
2008fb40:	000d883a 	mov	r6,zero
2008fb44:	008e54c0 	call	2008e54c <alt_msgdma_descriptor_sync_transfer>
}
2008fb48:	e037883a 	mov	sp,fp
2008fb4c:	dfc00117 	ldw	ra,4(sp)
2008fb50:	df000017 	ldw	fp,0(sp)
2008fb54:	dec00204 	addi	sp,sp,8
2008fb58:	f800283a 	ret

2008fb5c <alt_msgdma_extended_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_extended_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
2008fb5c:	defffc04 	addi	sp,sp,-16
2008fb60:	dfc00315 	stw	ra,12(sp)
2008fb64:	df000215 	stw	fp,8(sp)
2008fb68:	df000204 	addi	fp,sp,8
2008fb6c:	e13ffe15 	stw	r4,-8(fp)
2008fb70:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, NULL, desc);
2008fb74:	e13ffe17 	ldw	r4,-8(fp)
2008fb78:	000b883a 	mov	r5,zero
2008fb7c:	e1bfff17 	ldw	r6,-4(fp)
2008fb80:	008e54c0 	call	2008e54c <alt_msgdma_descriptor_sync_transfer>
}
2008fb84:	e037883a 	mov	sp,fp
2008fb88:	dfc00117 	ldw	ra,4(sp)
2008fb8c:	df000017 	ldw	fp,0(sp)
2008fb90:	dec00204 	addi	sp,sp,8
2008fb94:	f800283a 	ret

2008fb98 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
2008fb98:	defff504 	addi	sp,sp,-44
2008fb9c:	df000a15 	stw	fp,40(sp)
2008fba0:	df000a04 	addi	fp,sp,40
2008fba4:	e13ffc15 	stw	r4,-16(fp)
2008fba8:	e17ffd15 	stw	r5,-12(fp)
2008fbac:	e1bffe15 	stw	r6,-8(fp)
2008fbb0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
2008fbb4:	e03ff615 	stw	zero,-40(fp)
2008fbb8:	00800034 	movhi	r2,0
2008fbbc:	10887e04 	addi	r2,r2,8696
2008fbc0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
2008fbc4:	10003f26 	beq	r2,zero,2008fcc4 <alt_alarm_start+0x12c>
  {
    if (alarm)
2008fbc8:	e0bffc17 	ldw	r2,-16(fp)
2008fbcc:	10003b26 	beq	r2,zero,2008fcbc <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
2008fbd0:	e0bffc17 	ldw	r2,-16(fp)
2008fbd4:	e0fffe17 	ldw	r3,-8(fp)
2008fbd8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
2008fbdc:	e0bffc17 	ldw	r2,-16(fp)
2008fbe0:	e0ffff17 	ldw	r3,-4(fp)
2008fbe4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2008fbe8:	0005303a 	rdctl	r2,status
2008fbec:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2008fbf0:	e0fff817 	ldw	r3,-32(fp)
2008fbf4:	00bfff84 	movi	r2,-2
2008fbf8:	1884703a 	and	r2,r3,r2
2008fbfc:	1001703a 	wrctl	status,r2
  
  return context;
2008fc00:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
2008fc04:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
2008fc08:	00800034 	movhi	r2,0
2008fc0c:	10887f04 	addi	r2,r2,8700
2008fc10:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
2008fc14:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
2008fc18:	e0fffd17 	ldw	r3,-12(fp)
2008fc1c:	e0bff617 	ldw	r2,-40(fp)
2008fc20:	1885883a 	add	r2,r3,r2
2008fc24:	10c00044 	addi	r3,r2,1
2008fc28:	e0bffc17 	ldw	r2,-16(fp)
2008fc2c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
2008fc30:	e0bffc17 	ldw	r2,-16(fp)
2008fc34:	10c00217 	ldw	r3,8(r2)
2008fc38:	e0bff617 	ldw	r2,-40(fp)
2008fc3c:	1880042e 	bgeu	r3,r2,2008fc50 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
2008fc40:	e0bffc17 	ldw	r2,-16(fp)
2008fc44:	00c00044 	movi	r3,1
2008fc48:	10c00405 	stb	r3,16(r2)
2008fc4c:	00000206 	br	2008fc58 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
2008fc50:	e0bffc17 	ldw	r2,-16(fp)
2008fc54:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
2008fc58:	e0fffc17 	ldw	r3,-16(fp)
2008fc5c:	00800034 	movhi	r2,0
2008fc60:	10886e04 	addi	r2,r2,8632
2008fc64:	e0bff915 	stw	r2,-28(fp)
2008fc68:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
2008fc6c:	e0bffa17 	ldw	r2,-24(fp)
2008fc70:	e0fff917 	ldw	r3,-28(fp)
2008fc74:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
2008fc78:	e0bff917 	ldw	r2,-28(fp)
2008fc7c:	10c00017 	ldw	r3,0(r2)
2008fc80:	e0bffa17 	ldw	r2,-24(fp)
2008fc84:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
2008fc88:	e0bff917 	ldw	r2,-28(fp)
2008fc8c:	10800017 	ldw	r2,0(r2)
2008fc90:	e0fffa17 	ldw	r3,-24(fp)
2008fc94:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
2008fc98:	e0bff917 	ldw	r2,-28(fp)
2008fc9c:	e0fffa17 	ldw	r3,-24(fp)
2008fca0:	10c00015 	stw	r3,0(r2)
2008fca4:	e0bff717 	ldw	r2,-36(fp)
2008fca8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2008fcac:	e0bffb17 	ldw	r2,-20(fp)
2008fcb0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
2008fcb4:	0005883a 	mov	r2,zero
2008fcb8:	00000306 	br	2008fcc8 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
2008fcbc:	00bffa84 	movi	r2,-22
2008fcc0:	00000106 	br	2008fcc8 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
2008fcc4:	00bfde84 	movi	r2,-134
  }
}
2008fcc8:	e037883a 	mov	sp,fp
2008fccc:	df000017 	ldw	fp,0(sp)
2008fcd0:	dec00104 	addi	sp,sp,4
2008fcd4:	f800283a 	ret

2008fcd8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
2008fcd8:	defffa04 	addi	sp,sp,-24
2008fcdc:	dfc00515 	stw	ra,20(sp)
2008fce0:	df000415 	stw	fp,16(sp)
2008fce4:	df000404 	addi	fp,sp,16
2008fce8:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
2008fcec:	008000c4 	movi	r2,3
2008fcf0:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
2008fcf4:	e0fffd17 	ldw	r3,-12(fp)
2008fcf8:	008003f4 	movhi	r2,15
2008fcfc:	10909004 	addi	r2,r2,16960
2008fd00:	1885383a 	mul	r2,r3,r2
2008fd04:	0101dcf4 	movhi	r4,1907
2008fd08:	21165004 	addi	r4,r4,22848
2008fd0c:	100b883a 	mov	r5,r2
2008fd10:	008a1a80 	call	2008a1a8 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
2008fd14:	01200034 	movhi	r4,32768
2008fd18:	213fffc4 	addi	r4,r4,-1
2008fd1c:	100b883a 	mov	r5,r2
2008fd20:	008a1a80 	call	2008a1a8 <__udivsi3>
2008fd24:	e13fff17 	ldw	r4,-4(fp)
2008fd28:	100b883a 	mov	r5,r2
2008fd2c:	008a1a80 	call	2008a1a8 <__udivsi3>
2008fd30:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
2008fd34:	e0bffe17 	ldw	r2,-8(fp)
2008fd38:	10002a26 	beq	r2,zero,2008fde4 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
2008fd3c:	e03ffc15 	stw	zero,-16(fp)
2008fd40:	00001706 	br	2008fda0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
2008fd44:	00a00034 	movhi	r2,32768
2008fd48:	10bfffc4 	addi	r2,r2,-1
2008fd4c:	10bfffc4 	addi	r2,r2,-1
2008fd50:	103ffe1e 	bne	r2,zero,2008fd4c <__flash_rwdata_start+0xffffe41c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
2008fd54:	e0fffd17 	ldw	r3,-12(fp)
2008fd58:	008003f4 	movhi	r2,15
2008fd5c:	10909004 	addi	r2,r2,16960
2008fd60:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
2008fd64:	0101dcf4 	movhi	r4,1907
2008fd68:	21165004 	addi	r4,r4,22848
2008fd6c:	100b883a 	mov	r5,r2
2008fd70:	008a1a80 	call	2008a1a8 <__udivsi3>
2008fd74:	01200034 	movhi	r4,32768
2008fd78:	213fffc4 	addi	r4,r4,-1
2008fd7c:	100b883a 	mov	r5,r2
2008fd80:	008a1a80 	call	2008a1a8 <__udivsi3>
2008fd84:	1007883a 	mov	r3,r2
2008fd88:	e0bfff17 	ldw	r2,-4(fp)
2008fd8c:	10c5c83a 	sub	r2,r2,r3
2008fd90:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
2008fd94:	e0bffc17 	ldw	r2,-16(fp)
2008fd98:	10800044 	addi	r2,r2,1
2008fd9c:	e0bffc15 	stw	r2,-16(fp)
2008fda0:	e0fffc17 	ldw	r3,-16(fp)
2008fda4:	e0bffe17 	ldw	r2,-8(fp)
2008fda8:	18bfe616 	blt	r3,r2,2008fd44 <__flash_rwdata_start+0xffffe414>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
2008fdac:	e0fffd17 	ldw	r3,-12(fp)
2008fdb0:	008003f4 	movhi	r2,15
2008fdb4:	10909004 	addi	r2,r2,16960
2008fdb8:	1885383a 	mul	r2,r3,r2
2008fdbc:	0101dcf4 	movhi	r4,1907
2008fdc0:	21165004 	addi	r4,r4,22848
2008fdc4:	100b883a 	mov	r5,r2
2008fdc8:	008a1a80 	call	2008a1a8 <__udivsi3>
2008fdcc:	1007883a 	mov	r3,r2
2008fdd0:	e0bfff17 	ldw	r2,-4(fp)
2008fdd4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
2008fdd8:	10bfffc4 	addi	r2,r2,-1
2008fddc:	103ffe1e 	bne	r2,zero,2008fdd8 <__flash_rwdata_start+0xffffe4a8>
2008fde0:	00000d06 	br	2008fe18 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
2008fde4:	e0fffd17 	ldw	r3,-12(fp)
2008fde8:	008003f4 	movhi	r2,15
2008fdec:	10909004 	addi	r2,r2,16960
2008fdf0:	1885383a 	mul	r2,r3,r2
2008fdf4:	0101dcf4 	movhi	r4,1907
2008fdf8:	21165004 	addi	r4,r4,22848
2008fdfc:	100b883a 	mov	r5,r2
2008fe00:	008a1a80 	call	2008a1a8 <__udivsi3>
2008fe04:	1007883a 	mov	r3,r2
2008fe08:	e0bfff17 	ldw	r2,-4(fp)
2008fe0c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
2008fe10:	10bfffc4 	addi	r2,r2,-1
2008fe14:	00bffe16 	blt	zero,r2,2008fe10 <__flash_rwdata_start+0xffffe4e0>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
2008fe18:	0005883a 	mov	r2,zero
}
2008fe1c:	e037883a 	mov	sp,fp
2008fe20:	dfc00117 	ldw	ra,4(sp)
2008fe24:	df000017 	ldw	fp,0(sp)
2008fe28:	dec00204 	addi	sp,sp,8
2008fe2c:	f800283a 	ret

2008fe30 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
2008fe30:	defffe04 	addi	sp,sp,-8
2008fe34:	df000115 	stw	fp,4(sp)
2008fe38:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
2008fe3c:	e03fff15 	stw	zero,-4(fp)
2008fe40:	00000506 	br	2008fe58 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
2008fe44:	e0bfff17 	ldw	r2,-4(fp)
2008fe48:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
2008fe4c:	e0bfff17 	ldw	r2,-4(fp)
2008fe50:	10800804 	addi	r2,r2,32
2008fe54:	e0bfff15 	stw	r2,-4(fp)
2008fe58:	e0bfff17 	ldw	r2,-4(fp)
2008fe5c:	10900030 	cmpltui	r2,r2,16384
2008fe60:	103ff81e 	bne	r2,zero,2008fe44 <__flash_rwdata_start+0xffffe514>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
2008fe64:	e037883a 	mov	sp,fp
2008fe68:	df000017 	ldw	fp,0(sp)
2008fe6c:	dec00104 	addi	sp,sp,4
2008fe70:	f800283a 	ret

2008fe74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2008fe74:	defffe04 	addi	sp,sp,-8
2008fe78:	dfc00115 	stw	ra,4(sp)
2008fe7c:	df000015 	stw	fp,0(sp)
2008fe80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2008fe84:	00800034 	movhi	r2,0
2008fe88:	10886904 	addi	r2,r2,8612
2008fe8c:	10800017 	ldw	r2,0(r2)
2008fe90:	10000526 	beq	r2,zero,2008fea8 <alt_get_errno+0x34>
2008fe94:	00800034 	movhi	r2,0
2008fe98:	10886904 	addi	r2,r2,8612
2008fe9c:	10800017 	ldw	r2,0(r2)
2008fea0:	103ee83a 	callr	r2
2008fea4:	00000206 	br	2008feb0 <alt_get_errno+0x3c>
2008fea8:	00800034 	movhi	r2,0
2008feac:	10887404 	addi	r2,r2,8656
}
2008feb0:	e037883a 	mov	sp,fp
2008feb4:	dfc00117 	ldw	ra,4(sp)
2008feb8:	df000017 	ldw	fp,0(sp)
2008febc:	dec00204 	addi	sp,sp,8
2008fec0:	f800283a 	ret

2008fec4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
2008fec4:	defffa04 	addi	sp,sp,-24
2008fec8:	dfc00515 	stw	ra,20(sp)
2008fecc:	df000415 	stw	fp,16(sp)
2008fed0:	df000404 	addi	fp,sp,16
2008fed4:	e13ffe15 	stw	r4,-8(fp)
2008fed8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
2008fedc:	e0bffe17 	ldw	r2,-8(fp)
2008fee0:	10000326 	beq	r2,zero,2008fef0 <alt_dev_llist_insert+0x2c>
2008fee4:	e0bffe17 	ldw	r2,-8(fp)
2008fee8:	10800217 	ldw	r2,8(r2)
2008feec:	1000061e 	bne	r2,zero,2008ff08 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
2008fef0:	008fe740 	call	2008fe74 <alt_get_errno>
2008fef4:	1007883a 	mov	r3,r2
2008fef8:	00800584 	movi	r2,22
2008fefc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
2008ff00:	00bffa84 	movi	r2,-22
2008ff04:	00001306 	br	2008ff54 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
2008ff08:	e0bffe17 	ldw	r2,-8(fp)
2008ff0c:	e0ffff17 	ldw	r3,-4(fp)
2008ff10:	e0fffc15 	stw	r3,-16(fp)
2008ff14:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
2008ff18:	e0bffd17 	ldw	r2,-12(fp)
2008ff1c:	e0fffc17 	ldw	r3,-16(fp)
2008ff20:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
2008ff24:	e0bffc17 	ldw	r2,-16(fp)
2008ff28:	10c00017 	ldw	r3,0(r2)
2008ff2c:	e0bffd17 	ldw	r2,-12(fp)
2008ff30:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
2008ff34:	e0bffc17 	ldw	r2,-16(fp)
2008ff38:	10800017 	ldw	r2,0(r2)
2008ff3c:	e0fffd17 	ldw	r3,-12(fp)
2008ff40:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
2008ff44:	e0bffc17 	ldw	r2,-16(fp)
2008ff48:	e0fffd17 	ldw	r3,-12(fp)
2008ff4c:	10c00015 	stw	r3,0(r2)

  return 0;  
2008ff50:	0005883a 	mov	r2,zero
}
2008ff54:	e037883a 	mov	sp,fp
2008ff58:	dfc00117 	ldw	ra,4(sp)
2008ff5c:	df000017 	ldw	fp,0(sp)
2008ff60:	dec00204 	addi	sp,sp,8
2008ff64:	f800283a 	ret

2008ff68 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
2008ff68:	defffd04 	addi	sp,sp,-12
2008ff6c:	dfc00215 	stw	ra,8(sp)
2008ff70:	df000115 	stw	fp,4(sp)
2008ff74:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
2008ff78:	00880274 	movhi	r2,8201
2008ff7c:	1084e004 	addi	r2,r2,4992
2008ff80:	e0bfff15 	stw	r2,-4(fp)
2008ff84:	00000606 	br	2008ffa0 <_do_ctors+0x38>
        (*ctor) (); 
2008ff88:	e0bfff17 	ldw	r2,-4(fp)
2008ff8c:	10800017 	ldw	r2,0(r2)
2008ff90:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
2008ff94:	e0bfff17 	ldw	r2,-4(fp)
2008ff98:	10bfff04 	addi	r2,r2,-4
2008ff9c:	e0bfff15 	stw	r2,-4(fp)
2008ffa0:	e0ffff17 	ldw	r3,-4(fp)
2008ffa4:	00880274 	movhi	r2,8201
2008ffa8:	1084e104 	addi	r2,r2,4996
2008ffac:	18bff62e 	bgeu	r3,r2,2008ff88 <__flash_rwdata_start+0xffffe658>
        (*ctor) (); 
}
2008ffb0:	e037883a 	mov	sp,fp
2008ffb4:	dfc00117 	ldw	ra,4(sp)
2008ffb8:	df000017 	ldw	fp,0(sp)
2008ffbc:	dec00204 	addi	sp,sp,8
2008ffc0:	f800283a 	ret

2008ffc4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
2008ffc4:	defffd04 	addi	sp,sp,-12
2008ffc8:	dfc00215 	stw	ra,8(sp)
2008ffcc:	df000115 	stw	fp,4(sp)
2008ffd0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
2008ffd4:	00880274 	movhi	r2,8201
2008ffd8:	1084e004 	addi	r2,r2,4992
2008ffdc:	e0bfff15 	stw	r2,-4(fp)
2008ffe0:	00000606 	br	2008fffc <_do_dtors+0x38>
        (*dtor) (); 
2008ffe4:	e0bfff17 	ldw	r2,-4(fp)
2008ffe8:	10800017 	ldw	r2,0(r2)
2008ffec:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
2008fff0:	e0bfff17 	ldw	r2,-4(fp)
2008fff4:	10bfff04 	addi	r2,r2,-4
2008fff8:	e0bfff15 	stw	r2,-4(fp)
2008fffc:	e0ffff17 	ldw	r3,-4(fp)
20090000:	00880274 	movhi	r2,8201
20090004:	1084e104 	addi	r2,r2,4996
20090008:	18bff62e 	bgeu	r3,r2,2008ffe4 <__flash_rwdata_start+0xffffe6b4>
        (*dtor) (); 
}
2009000c:	e037883a 	mov	sp,fp
20090010:	dfc00117 	ldw	ra,4(sp)
20090014:	df000017 	ldw	fp,0(sp)
20090018:	dec00204 	addi	sp,sp,8
2009001c:	f800283a 	ret

20090020 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
20090020:	defffa04 	addi	sp,sp,-24
20090024:	dfc00515 	stw	ra,20(sp)
20090028:	df000415 	stw	fp,16(sp)
2009002c:	df000404 	addi	fp,sp,16
20090030:	e13ffe15 	stw	r4,-8(fp)
20090034:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
20090038:	e0bfff17 	ldw	r2,-4(fp)
2009003c:	10800017 	ldw	r2,0(r2)
20090040:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
20090044:	e13ffe17 	ldw	r4,-8(fp)
20090048:	0080d180 	call	20080d18 <strlen>
2009004c:	10800044 	addi	r2,r2,1
20090050:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
20090054:	00000d06 	br	2009008c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
20090058:	e0bffc17 	ldw	r2,-16(fp)
2009005c:	10c00217 	ldw	r3,8(r2)
20090060:	e0bffd17 	ldw	r2,-12(fp)
20090064:	1809883a 	mov	r4,r3
20090068:	e17ffe17 	ldw	r5,-8(fp)
2009006c:	100d883a 	mov	r6,r2
20090070:	0090ec00 	call	20090ec0 <memcmp>
20090074:	1000021e 	bne	r2,zero,20090080 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
20090078:	e0bffc17 	ldw	r2,-16(fp)
2009007c:	00000706 	br	2009009c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
20090080:	e0bffc17 	ldw	r2,-16(fp)
20090084:	10800017 	ldw	r2,0(r2)
20090088:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
2009008c:	e0fffc17 	ldw	r3,-16(fp)
20090090:	e0bfff17 	ldw	r2,-4(fp)
20090094:	18bff01e 	bne	r3,r2,20090058 <__flash_rwdata_start+0xffffe728>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
20090098:	0005883a 	mov	r2,zero
}
2009009c:	e037883a 	mov	sp,fp
200900a0:	dfc00117 	ldw	ra,4(sp)
200900a4:	df000017 	ldw	fp,0(sp)
200900a8:	dec00204 	addi	sp,sp,8
200900ac:	f800283a 	ret

200900b0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
200900b0:	defffe04 	addi	sp,sp,-8
200900b4:	dfc00115 	stw	ra,4(sp)
200900b8:	df000015 	stw	fp,0(sp)
200900bc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
200900c0:	0009883a 	mov	r4,zero
200900c4:	01440004 	movi	r5,4096
200900c8:	0090d4c0 	call	20090d4c <alt_icache_flush>
#endif
}
200900cc:	e037883a 	mov	sp,fp
200900d0:	dfc00117 	ldw	ra,4(sp)
200900d4:	df000017 	ldw	fp,0(sp)
200900d8:	dec00204 	addi	sp,sp,8
200900dc:	f800283a 	ret

200900e0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
200900e0:	defff904 	addi	sp,sp,-28
200900e4:	dfc00615 	stw	ra,24(sp)
200900e8:	df000515 	stw	fp,20(sp)
200900ec:	df000504 	addi	fp,sp,20
200900f0:	e13ffc15 	stw	r4,-16(fp)
200900f4:	e17ffd15 	stw	r5,-12(fp)
200900f8:	e1bffe15 	stw	r6,-8(fp)
200900fc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
20090100:	e0800217 	ldw	r2,8(fp)
20090104:	d8800015 	stw	r2,0(sp)
20090108:	e13ffc17 	ldw	r4,-16(fp)
2009010c:	e17ffd17 	ldw	r5,-12(fp)
20090110:	e1bffe17 	ldw	r6,-8(fp)
20090114:	e1ffff17 	ldw	r7,-4(fp)
20090118:	00902c00 	call	200902c0 <alt_iic_isr_register>
}  
2009011c:	e037883a 	mov	sp,fp
20090120:	dfc00117 	ldw	ra,4(sp)
20090124:	df000017 	ldw	fp,0(sp)
20090128:	dec00204 	addi	sp,sp,8
2009012c:	f800283a 	ret

20090130 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
20090130:	defff904 	addi	sp,sp,-28
20090134:	df000615 	stw	fp,24(sp)
20090138:	df000604 	addi	fp,sp,24
2009013c:	e13ffe15 	stw	r4,-8(fp)
20090140:	e17fff15 	stw	r5,-4(fp)
20090144:	e0bfff17 	ldw	r2,-4(fp)
20090148:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2009014c:	0005303a 	rdctl	r2,status
20090150:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20090154:	e0fffb17 	ldw	r3,-20(fp)
20090158:	00bfff84 	movi	r2,-2
2009015c:	1884703a 	and	r2,r3,r2
20090160:	1001703a 	wrctl	status,r2
  
  return context;
20090164:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
20090168:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
2009016c:	e0bffa17 	ldw	r2,-24(fp)
20090170:	00c00044 	movi	r3,1
20090174:	1884983a 	sll	r2,r3,r2
20090178:	1007883a 	mov	r3,r2
2009017c:	00800034 	movhi	r2,0
20090180:	10887d04 	addi	r2,r2,8692
20090184:	10800017 	ldw	r2,0(r2)
20090188:	1886b03a 	or	r3,r3,r2
2009018c:	00800034 	movhi	r2,0
20090190:	10887d04 	addi	r2,r2,8692
20090194:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
20090198:	00800034 	movhi	r2,0
2009019c:	10887d04 	addi	r2,r2,8692
200901a0:	10800017 	ldw	r2,0(r2)
200901a4:	100170fa 	wrctl	ienable,r2
200901a8:	e0bffc17 	ldw	r2,-16(fp)
200901ac:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200901b0:	e0bffd17 	ldw	r2,-12(fp)
200901b4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
200901b8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
200901bc:	0001883a 	nop
}
200901c0:	e037883a 	mov	sp,fp
200901c4:	df000017 	ldw	fp,0(sp)
200901c8:	dec00104 	addi	sp,sp,4
200901cc:	f800283a 	ret

200901d0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
200901d0:	defff904 	addi	sp,sp,-28
200901d4:	df000615 	stw	fp,24(sp)
200901d8:	df000604 	addi	fp,sp,24
200901dc:	e13ffe15 	stw	r4,-8(fp)
200901e0:	e17fff15 	stw	r5,-4(fp)
200901e4:	e0bfff17 	ldw	r2,-4(fp)
200901e8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200901ec:	0005303a 	rdctl	r2,status
200901f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200901f4:	e0fffb17 	ldw	r3,-20(fp)
200901f8:	00bfff84 	movi	r2,-2
200901fc:	1884703a 	and	r2,r3,r2
20090200:	1001703a 	wrctl	status,r2
  
  return context;
20090204:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
20090208:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
2009020c:	e0bffa17 	ldw	r2,-24(fp)
20090210:	00c00044 	movi	r3,1
20090214:	1884983a 	sll	r2,r3,r2
20090218:	0084303a 	nor	r2,zero,r2
2009021c:	1007883a 	mov	r3,r2
20090220:	00800034 	movhi	r2,0
20090224:	10887d04 	addi	r2,r2,8692
20090228:	10800017 	ldw	r2,0(r2)
2009022c:	1886703a 	and	r3,r3,r2
20090230:	00800034 	movhi	r2,0
20090234:	10887d04 	addi	r2,r2,8692
20090238:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
2009023c:	00800034 	movhi	r2,0
20090240:	10887d04 	addi	r2,r2,8692
20090244:	10800017 	ldw	r2,0(r2)
20090248:	100170fa 	wrctl	ienable,r2
2009024c:	e0bffc17 	ldw	r2,-16(fp)
20090250:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20090254:	e0bffd17 	ldw	r2,-12(fp)
20090258:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
2009025c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
20090260:	0001883a 	nop
}
20090264:	e037883a 	mov	sp,fp
20090268:	df000017 	ldw	fp,0(sp)
2009026c:	dec00104 	addi	sp,sp,4
20090270:	f800283a 	ret

20090274 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
20090274:	defffc04 	addi	sp,sp,-16
20090278:	df000315 	stw	fp,12(sp)
2009027c:	df000304 	addi	fp,sp,12
20090280:	e13ffe15 	stw	r4,-8(fp)
20090284:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
20090288:	000530fa 	rdctl	r2,ienable
2009028c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
20090290:	e0bfff17 	ldw	r2,-4(fp)
20090294:	00c00044 	movi	r3,1
20090298:	1884983a 	sll	r2,r3,r2
2009029c:	1007883a 	mov	r3,r2
200902a0:	e0bffd17 	ldw	r2,-12(fp)
200902a4:	1884703a 	and	r2,r3,r2
200902a8:	1004c03a 	cmpne	r2,r2,zero
200902ac:	10803fcc 	andi	r2,r2,255
}
200902b0:	e037883a 	mov	sp,fp
200902b4:	df000017 	ldw	fp,0(sp)
200902b8:	dec00104 	addi	sp,sp,4
200902bc:	f800283a 	ret

200902c0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
200902c0:	defff504 	addi	sp,sp,-44
200902c4:	dfc00a15 	stw	ra,40(sp)
200902c8:	df000915 	stw	fp,36(sp)
200902cc:	df000904 	addi	fp,sp,36
200902d0:	e13ffc15 	stw	r4,-16(fp)
200902d4:	e17ffd15 	stw	r5,-12(fp)
200902d8:	e1bffe15 	stw	r6,-8(fp)
200902dc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
200902e0:	00bffa84 	movi	r2,-22
200902e4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
200902e8:	e0bffd17 	ldw	r2,-12(fp)
200902ec:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
200902f0:	e0bff817 	ldw	r2,-32(fp)
200902f4:	10800808 	cmpgei	r2,r2,32
200902f8:	1000271e 	bne	r2,zero,20090398 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200902fc:	0005303a 	rdctl	r2,status
20090300:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20090304:	e0fffa17 	ldw	r3,-24(fp)
20090308:	00bfff84 	movi	r2,-2
2009030c:	1884703a 	and	r2,r3,r2
20090310:	1001703a 	wrctl	status,r2
  
  return context;
20090314:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
20090318:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
2009031c:	00800034 	movhi	r2,0
20090320:	10888b04 	addi	r2,r2,8748
20090324:	e0fff817 	ldw	r3,-32(fp)
20090328:	180690fa 	slli	r3,r3,3
2009032c:	10c5883a 	add	r2,r2,r3
20090330:	e0fffe17 	ldw	r3,-8(fp)
20090334:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
20090338:	00800034 	movhi	r2,0
2009033c:	10888b04 	addi	r2,r2,8748
20090340:	e0fff817 	ldw	r3,-32(fp)
20090344:	180690fa 	slli	r3,r3,3
20090348:	18c00104 	addi	r3,r3,4
2009034c:	10c5883a 	add	r2,r2,r3
20090350:	e0ffff17 	ldw	r3,-4(fp)
20090354:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
20090358:	e0bffe17 	ldw	r2,-8(fp)
2009035c:	10000526 	beq	r2,zero,20090374 <alt_iic_isr_register+0xb4>
20090360:	e0bff817 	ldw	r2,-32(fp)
20090364:	e13ffc17 	ldw	r4,-16(fp)
20090368:	100b883a 	mov	r5,r2
2009036c:	00901300 	call	20090130 <alt_ic_irq_enable>
20090370:	00000406 	br	20090384 <alt_iic_isr_register+0xc4>
20090374:	e0bff817 	ldw	r2,-32(fp)
20090378:	e13ffc17 	ldw	r4,-16(fp)
2009037c:	100b883a 	mov	r5,r2
20090380:	00901d00 	call	200901d0 <alt_ic_irq_disable>
20090384:	e0bff715 	stw	r2,-36(fp)
20090388:	e0bff917 	ldw	r2,-28(fp)
2009038c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20090390:	e0bffb17 	ldw	r2,-20(fp)
20090394:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
20090398:	e0bff717 	ldw	r2,-36(fp)
}
2009039c:	e037883a 	mov	sp,fp
200903a0:	dfc00117 	ldw	ra,4(sp)
200903a4:	df000017 	ldw	fp,0(sp)
200903a8:	dec00204 	addi	sp,sp,8
200903ac:	f800283a 	ret

200903b0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
200903b0:	defff904 	addi	sp,sp,-28
200903b4:	dfc00615 	stw	ra,24(sp)
200903b8:	df000515 	stw	fp,20(sp)
200903bc:	df000504 	addi	fp,sp,20
200903c0:	e13ffc15 	stw	r4,-16(fp)
200903c4:	e17ffd15 	stw	r5,-12(fp)
200903c8:	e1bffe15 	stw	r6,-8(fp)
200903cc:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
200903d0:	e13ffd17 	ldw	r4,-12(fp)
200903d4:	e17ffe17 	ldw	r5,-8(fp)
200903d8:	e1bfff17 	ldw	r6,-4(fp)
200903dc:	00906040 	call	20090604 <open>
200903e0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
200903e4:	e0bffb17 	ldw	r2,-20(fp)
200903e8:	10001c16 	blt	r2,zero,2009045c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
200903ec:	00800034 	movhi	r2,0
200903f0:	10839e04 	addi	r2,r2,3704
200903f4:	e0fffb17 	ldw	r3,-20(fp)
200903f8:	18c00324 	muli	r3,r3,12
200903fc:	10c5883a 	add	r2,r2,r3
20090400:	10c00017 	ldw	r3,0(r2)
20090404:	e0bffc17 	ldw	r2,-16(fp)
20090408:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
2009040c:	00800034 	movhi	r2,0
20090410:	10839e04 	addi	r2,r2,3704
20090414:	e0fffb17 	ldw	r3,-20(fp)
20090418:	18c00324 	muli	r3,r3,12
2009041c:	18c00104 	addi	r3,r3,4
20090420:	10c5883a 	add	r2,r2,r3
20090424:	10c00017 	ldw	r3,0(r2)
20090428:	e0bffc17 	ldw	r2,-16(fp)
2009042c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
20090430:	00800034 	movhi	r2,0
20090434:	10839e04 	addi	r2,r2,3704
20090438:	e0fffb17 	ldw	r3,-20(fp)
2009043c:	18c00324 	muli	r3,r3,12
20090440:	18c00204 	addi	r3,r3,8
20090444:	10c5883a 	add	r2,r2,r3
20090448:	10c00017 	ldw	r3,0(r2)
2009044c:	e0bffc17 	ldw	r2,-16(fp)
20090450:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
20090454:	e13ffb17 	ldw	r4,-20(fp)
20090458:	008cf040 	call	2008cf04 <alt_release_fd>
  }
} 
2009045c:	e037883a 	mov	sp,fp
20090460:	dfc00117 	ldw	ra,4(sp)
20090464:	df000017 	ldw	fp,0(sp)
20090468:	dec00204 	addi	sp,sp,8
2009046c:	f800283a 	ret

20090470 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
20090470:	defffb04 	addi	sp,sp,-20
20090474:	dfc00415 	stw	ra,16(sp)
20090478:	df000315 	stw	fp,12(sp)
2009047c:	df000304 	addi	fp,sp,12
20090480:	e13ffd15 	stw	r4,-12(fp)
20090484:	e17ffe15 	stw	r5,-8(fp)
20090488:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
2009048c:	01000034 	movhi	r4,0
20090490:	2103a104 	addi	r4,r4,3716
20090494:	e17ffd17 	ldw	r5,-12(fp)
20090498:	01800044 	movi	r6,1
2009049c:	01c07fc4 	movi	r7,511
200904a0:	00903b00 	call	200903b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
200904a4:	01000034 	movhi	r4,0
200904a8:	21039e04 	addi	r4,r4,3704
200904ac:	e17ffe17 	ldw	r5,-8(fp)
200904b0:	000d883a 	mov	r6,zero
200904b4:	01c07fc4 	movi	r7,511
200904b8:	00903b00 	call	200903b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
200904bc:	01000034 	movhi	r4,0
200904c0:	2103a404 	addi	r4,r4,3728
200904c4:	e17fff17 	ldw	r5,-4(fp)
200904c8:	01800044 	movi	r6,1
200904cc:	01c07fc4 	movi	r7,511
200904d0:	00903b00 	call	200903b0 <alt_open_fd>
}  
200904d4:	e037883a 	mov	sp,fp
200904d8:	dfc00117 	ldw	ra,4(sp)
200904dc:	df000017 	ldw	fp,0(sp)
200904e0:	dec00204 	addi	sp,sp,8
200904e4:	f800283a 	ret

200904e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
200904e8:	defffe04 	addi	sp,sp,-8
200904ec:	dfc00115 	stw	ra,4(sp)
200904f0:	df000015 	stw	fp,0(sp)
200904f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
200904f8:	00800034 	movhi	r2,0
200904fc:	10886904 	addi	r2,r2,8612
20090500:	10800017 	ldw	r2,0(r2)
20090504:	10000526 	beq	r2,zero,2009051c <alt_get_errno+0x34>
20090508:	00800034 	movhi	r2,0
2009050c:	10886904 	addi	r2,r2,8612
20090510:	10800017 	ldw	r2,0(r2)
20090514:	103ee83a 	callr	r2
20090518:	00000206 	br	20090524 <alt_get_errno+0x3c>
2009051c:	00800034 	movhi	r2,0
20090520:	10887404 	addi	r2,r2,8656
}
20090524:	e037883a 	mov	sp,fp
20090528:	dfc00117 	ldw	ra,4(sp)
2009052c:	df000017 	ldw	fp,0(sp)
20090530:	dec00204 	addi	sp,sp,8
20090534:	f800283a 	ret

20090538 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
20090538:	defffd04 	addi	sp,sp,-12
2009053c:	df000215 	stw	fp,8(sp)
20090540:	df000204 	addi	fp,sp,8
20090544:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
20090548:	e0bfff17 	ldw	r2,-4(fp)
2009054c:	10800217 	ldw	r2,8(r2)
20090550:	10d00034 	orhi	r3,r2,16384
20090554:	e0bfff17 	ldw	r2,-4(fp)
20090558:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
2009055c:	e03ffe15 	stw	zero,-8(fp)
20090560:	00001d06 	br	200905d8 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
20090564:	00800034 	movhi	r2,0
20090568:	10839e04 	addi	r2,r2,3704
2009056c:	e0fffe17 	ldw	r3,-8(fp)
20090570:	18c00324 	muli	r3,r3,12
20090574:	10c5883a 	add	r2,r2,r3
20090578:	10c00017 	ldw	r3,0(r2)
2009057c:	e0bfff17 	ldw	r2,-4(fp)
20090580:	10800017 	ldw	r2,0(r2)
20090584:	1880111e 	bne	r3,r2,200905cc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
20090588:	00800034 	movhi	r2,0
2009058c:	10839e04 	addi	r2,r2,3704
20090590:	e0fffe17 	ldw	r3,-8(fp)
20090594:	18c00324 	muli	r3,r3,12
20090598:	18c00204 	addi	r3,r3,8
2009059c:	10c5883a 	add	r2,r2,r3
200905a0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
200905a4:	1000090e 	bge	r2,zero,200905cc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
200905a8:	e0bffe17 	ldw	r2,-8(fp)
200905ac:	10c00324 	muli	r3,r2,12
200905b0:	00800034 	movhi	r2,0
200905b4:	10839e04 	addi	r2,r2,3704
200905b8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
200905bc:	e0bfff17 	ldw	r2,-4(fp)
200905c0:	18800226 	beq	r3,r2,200905cc <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
200905c4:	00bffcc4 	movi	r2,-13
200905c8:	00000a06 	br	200905f4 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
200905cc:	e0bffe17 	ldw	r2,-8(fp)
200905d0:	10800044 	addi	r2,r2,1
200905d4:	e0bffe15 	stw	r2,-8(fp)
200905d8:	00800034 	movhi	r2,0
200905dc:	10886804 	addi	r2,r2,8608
200905e0:	10800017 	ldw	r2,0(r2)
200905e4:	1007883a 	mov	r3,r2
200905e8:	e0bffe17 	ldw	r2,-8(fp)
200905ec:	18bfdd2e 	bgeu	r3,r2,20090564 <__flash_rwdata_start+0xffffec34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
200905f0:	0005883a 	mov	r2,zero
}
200905f4:	e037883a 	mov	sp,fp
200905f8:	df000017 	ldw	fp,0(sp)
200905fc:	dec00104 	addi	sp,sp,4
20090600:	f800283a 	ret

20090604 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
20090604:	defff604 	addi	sp,sp,-40
20090608:	dfc00915 	stw	ra,36(sp)
2009060c:	df000815 	stw	fp,32(sp)
20090610:	df000804 	addi	fp,sp,32
20090614:	e13ffd15 	stw	r4,-12(fp)
20090618:	e17ffe15 	stw	r5,-8(fp)
2009061c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
20090620:	00bfffc4 	movi	r2,-1
20090624:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
20090628:	00bffb44 	movi	r2,-19
2009062c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
20090630:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
20090634:	e13ffd17 	ldw	r4,-12(fp)
20090638:	01400034 	movhi	r5,0
2009063c:	29486604 	addi	r5,r5,8600
20090640:	00900200 	call	20090020 <alt_find_dev>
20090644:	e0bff815 	stw	r2,-32(fp)
20090648:	e0bff817 	ldw	r2,-32(fp)
2009064c:	1000051e 	bne	r2,zero,20090664 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
20090650:	e13ffd17 	ldw	r4,-12(fp)
20090654:	0090b840 	call	20090b84 <alt_find_file>
20090658:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
2009065c:	00800044 	movi	r2,1
20090660:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
20090664:	e0bff817 	ldw	r2,-32(fp)
20090668:	10002926 	beq	r2,zero,20090710 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
2009066c:	e13ff817 	ldw	r4,-32(fp)
20090670:	0090c980 	call	20090c98 <alt_get_fd>
20090674:	e0bff915 	stw	r2,-28(fp)
20090678:	e0bff917 	ldw	r2,-28(fp)
2009067c:	1000030e 	bge	r2,zero,2009068c <open+0x88>
    {
      status = index;
20090680:	e0bff917 	ldw	r2,-28(fp)
20090684:	e0bffa15 	stw	r2,-24(fp)
20090688:	00002306 	br	20090718 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
2009068c:	e0bff917 	ldw	r2,-28(fp)
20090690:	10c00324 	muli	r3,r2,12
20090694:	00800034 	movhi	r2,0
20090698:	10839e04 	addi	r2,r2,3704
2009069c:	1885883a 	add	r2,r3,r2
200906a0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
200906a4:	e0fffe17 	ldw	r3,-8(fp)
200906a8:	00900034 	movhi	r2,16384
200906ac:	10bfffc4 	addi	r2,r2,-1
200906b0:	1886703a 	and	r3,r3,r2
200906b4:	e0bffc17 	ldw	r2,-16(fp)
200906b8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
200906bc:	e0bffb17 	ldw	r2,-20(fp)
200906c0:	1000051e 	bne	r2,zero,200906d8 <open+0xd4>
200906c4:	e13ffc17 	ldw	r4,-16(fp)
200906c8:	00905380 	call	20090538 <alt_file_locked>
200906cc:	e0bffa15 	stw	r2,-24(fp)
200906d0:	e0bffa17 	ldw	r2,-24(fp)
200906d4:	10001016 	blt	r2,zero,20090718 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
200906d8:	e0bff817 	ldw	r2,-32(fp)
200906dc:	10800317 	ldw	r2,12(r2)
200906e0:	10000826 	beq	r2,zero,20090704 <open+0x100>
200906e4:	e0bff817 	ldw	r2,-32(fp)
200906e8:	10800317 	ldw	r2,12(r2)
200906ec:	e13ffc17 	ldw	r4,-16(fp)
200906f0:	e17ffd17 	ldw	r5,-12(fp)
200906f4:	e1bffe17 	ldw	r6,-8(fp)
200906f8:	e1ffff17 	ldw	r7,-4(fp)
200906fc:	103ee83a 	callr	r2
20090700:	00000106 	br	20090708 <open+0x104>
20090704:	0005883a 	mov	r2,zero
20090708:	e0bffa15 	stw	r2,-24(fp)
2009070c:	00000206 	br	20090718 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
20090710:	00bffb44 	movi	r2,-19
20090714:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
20090718:	e0bffa17 	ldw	r2,-24(fp)
2009071c:	1000090e 	bge	r2,zero,20090744 <open+0x140>
  {
    alt_release_fd (index);  
20090720:	e13ff917 	ldw	r4,-28(fp)
20090724:	008cf040 	call	2008cf04 <alt_release_fd>
    ALT_ERRNO = -status;
20090728:	00904e80 	call	200904e8 <alt_get_errno>
2009072c:	1007883a 	mov	r3,r2
20090730:	e0bffa17 	ldw	r2,-24(fp)
20090734:	0085c83a 	sub	r2,zero,r2
20090738:	18800015 	stw	r2,0(r3)
    return -1;
2009073c:	00bfffc4 	movi	r2,-1
20090740:	00000106 	br	20090748 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
20090744:	e0bff917 	ldw	r2,-28(fp)
}
20090748:	e037883a 	mov	sp,fp
2009074c:	dfc00117 	ldw	ra,4(sp)
20090750:	df000017 	ldw	fp,0(sp)
20090754:	dec00204 	addi	sp,sp,8
20090758:	f800283a 	ret

2009075c <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
2009075c:	defff204 	addi	sp,sp,-56
20090760:	dfc00a15 	stw	ra,40(sp)
20090764:	df000915 	stw	fp,36(sp)
20090768:	df000904 	addi	fp,sp,36
2009076c:	e1400215 	stw	r5,8(fp)
20090770:	e1800315 	stw	r6,12(fp)
20090774:	e1c00415 	stw	r7,16(fp)
20090778:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
2009077c:	e0800204 	addi	r2,fp,8
20090780:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
20090784:	e0bfff17 	ldw	r2,-4(fp)
20090788:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
2009078c:	00007106 	br	20090954 <alt_printf+0x1f8>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
20090790:	e0bff807 	ldb	r2,-32(fp)
20090794:	10800960 	cmpeqi	r2,r2,37
20090798:	1000041e 	bne	r2,zero,200907ac <alt_printf+0x50>
        {
            alt_putchar(c);
2009079c:	e0bff807 	ldb	r2,-32(fp)
200907a0:	1009883a 	mov	r4,r2
200907a4:	00909840 	call	20090984 <alt_putchar>
200907a8:	00006a06 	br	20090954 <alt_printf+0x1f8>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
200907ac:	e0bff717 	ldw	r2,-36(fp)
200907b0:	10c00044 	addi	r3,r2,1
200907b4:	e0fff715 	stw	r3,-36(fp)
200907b8:	10800003 	ldbu	r2,0(r2)
200907bc:	e0bff805 	stb	r2,-32(fp)
200907c0:	e0bff807 	ldb	r2,-32(fp)
200907c4:	10006226 	beq	r2,zero,20090950 <alt_printf+0x1f4>
            {
                if (c == '%')
200907c8:	e0bff807 	ldb	r2,-32(fp)
200907cc:	10800958 	cmpnei	r2,r2,37
200907d0:	1000041e 	bne	r2,zero,200907e4 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
200907d4:	e0bff807 	ldb	r2,-32(fp)
200907d8:	1009883a 	mov	r4,r2
200907dc:	00909840 	call	20090984 <alt_putchar>
200907e0:	00005c06 	br	20090954 <alt_printf+0x1f8>
                } 
                else if (c == 'c')
200907e4:	e0bff807 	ldb	r2,-32(fp)
200907e8:	108018d8 	cmpnei	r2,r2,99
200907ec:	1000081e 	bne	r2,zero,20090810 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
200907f0:	e0bffe17 	ldw	r2,-8(fp)
200907f4:	10c00104 	addi	r3,r2,4
200907f8:	e0fffe15 	stw	r3,-8(fp)
200907fc:	10800017 	ldw	r2,0(r2)
20090800:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
20090804:	e13ffd17 	ldw	r4,-12(fp)
20090808:	00909840 	call	20090984 <alt_putchar>
2009080c:	00005106 	br	20090954 <alt_printf+0x1f8>
                }
                else if (c == 'x')
20090810:	e0bff807 	ldb	r2,-32(fp)
20090814:	10801e18 	cmpnei	r2,r2,120
20090818:	1000341e 	bne	r2,zero,200908ec <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
2009081c:	e0bffe17 	ldw	r2,-8(fp)
20090820:	10c00104 	addi	r3,r2,4
20090824:	e0fffe15 	stw	r3,-8(fp)
20090828:	10800017 	ldw	r2,0(r2)
2009082c:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
20090830:	e0bffb17 	ldw	r2,-20(fp)
20090834:	1000031e 	bne	r2,zero,20090844 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
20090838:	01000c04 	movi	r4,48
2009083c:	00909840 	call	20090984 <alt_putchar>
                        continue;
20090840:	00004406 	br	20090954 <alt_printf+0x1f8>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
20090844:	00800704 	movi	r2,28
20090848:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
2009084c:	00000306 	br	2009085c <alt_printf+0x100>
                        digit_shift -= 4;
20090850:	e0bff917 	ldw	r2,-28(fp)
20090854:	10bfff04 	addi	r2,r2,-4
20090858:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
2009085c:	00c003c4 	movi	r3,15
20090860:	e0bff917 	ldw	r2,-28(fp)
20090864:	1884983a 	sll	r2,r3,r2
20090868:	1007883a 	mov	r3,r2
2009086c:	e0bffb17 	ldw	r2,-20(fp)
20090870:	1884703a 	and	r2,r3,r2
20090874:	103ff626 	beq	r2,zero,20090850 <__flash_rwdata_start+0xffffef20>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
20090878:	00001906 	br	200908e0 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
2009087c:	00c003c4 	movi	r3,15
20090880:	e0bff917 	ldw	r2,-28(fp)
20090884:	1884983a 	sll	r2,r3,r2
20090888:	1007883a 	mov	r3,r2
2009088c:	e0bffb17 	ldw	r2,-20(fp)
20090890:	1886703a 	and	r3,r3,r2
20090894:	e0bff917 	ldw	r2,-28(fp)
20090898:	1884d83a 	srl	r2,r3,r2
2009089c:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
200908a0:	e0bffc17 	ldw	r2,-16(fp)
200908a4:	108002a8 	cmpgeui	r2,r2,10
200908a8:	1000041e 	bne	r2,zero,200908bc <alt_printf+0x160>
                            c = '0' + digit;
200908ac:	e0bffc17 	ldw	r2,-16(fp)
200908b0:	10800c04 	addi	r2,r2,48
200908b4:	e0bff805 	stb	r2,-32(fp)
200908b8:	00000306 	br	200908c8 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
200908bc:	e0bffc17 	ldw	r2,-16(fp)
200908c0:	108015c4 	addi	r2,r2,87
200908c4:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
200908c8:	e0bff807 	ldb	r2,-32(fp)
200908cc:	1009883a 	mov	r4,r2
200908d0:	00909840 	call	20090984 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
200908d4:	e0bff917 	ldw	r2,-28(fp)
200908d8:	10bfff04 	addi	r2,r2,-4
200908dc:	e0bff915 	stw	r2,-28(fp)
200908e0:	e0bff917 	ldw	r2,-28(fp)
200908e4:	103fe50e 	bge	r2,zero,2009087c <__flash_rwdata_start+0xffffef4c>
200908e8:	00001a06 	br	20090954 <alt_printf+0x1f8>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
200908ec:	e0bff807 	ldb	r2,-32(fp)
200908f0:	10801cd8 	cmpnei	r2,r2,115
200908f4:	1000151e 	bne	r2,zero,2009094c <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
200908f8:	e0bffe17 	ldw	r2,-8(fp)
200908fc:	10c00104 	addi	r3,r2,4
20090900:	e0fffe15 	stw	r3,-8(fp)
20090904:	10800017 	ldw	r2,0(r2)
20090908:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
2009090c:	00000906 	br	20090934 <alt_printf+0x1d8>
                      alt_putchar(*s++);
20090910:	e0bffa17 	ldw	r2,-24(fp)
20090914:	10c00044 	addi	r3,r2,1
20090918:	e0fffa15 	stw	r3,-24(fp)
2009091c:	10800003 	ldbu	r2,0(r2)
20090920:	10803fcc 	andi	r2,r2,255
20090924:	1080201c 	xori	r2,r2,128
20090928:	10bfe004 	addi	r2,r2,-128
2009092c:	1009883a 	mov	r4,r2
20090930:	00909840 	call	20090984 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
20090934:	e0bffa17 	ldw	r2,-24(fp)
20090938:	10800003 	ldbu	r2,0(r2)
2009093c:	10803fcc 	andi	r2,r2,255
20090940:	1080201c 	xori	r2,r2,128
20090944:	10bfe004 	addi	r2,r2,-128
20090948:	103ff11e 	bne	r2,zero,20090910 <__flash_rwdata_start+0xffffefe0>
2009094c:	00000106 	br	20090954 <alt_printf+0x1f8>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
20090950:	00000706 	br	20090970 <alt_printf+0x214>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
20090954:	e0bff717 	ldw	r2,-36(fp)
20090958:	10c00044 	addi	r3,r2,1
2009095c:	e0fff715 	stw	r3,-36(fp)
20090960:	10800003 	ldbu	r2,0(r2)
20090964:	e0bff805 	stb	r2,-32(fp)
20090968:	e0bff807 	ldb	r2,-32(fp)
2009096c:	103f881e 	bne	r2,zero,20090790 <__flash_rwdata_start+0xffffee60>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
20090970:	e037883a 	mov	sp,fp
20090974:	dfc00117 	ldw	ra,4(sp)
20090978:	df000017 	ldw	fp,0(sp)
2009097c:	dec00504 	addi	sp,sp,20
20090980:	f800283a 	ret

20090984 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
20090984:	defffd04 	addi	sp,sp,-12
20090988:	dfc00215 	stw	ra,8(sp)
2009098c:	df000115 	stw	fp,4(sp)
20090990:	df000104 	addi	fp,sp,4
20090994:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
20090998:	00800034 	movhi	r2,0
2009099c:	10886104 	addi	r2,r2,8580
200909a0:	10800017 	ldw	r2,0(r2)
200909a4:	10800217 	ldw	r2,8(r2)
200909a8:	e13fff17 	ldw	r4,-4(fp)
200909ac:	100b883a 	mov	r5,r2
200909b0:	0090fdc0 	call	20090fdc <putc>
#endif
#endif
}
200909b4:	e037883a 	mov	sp,fp
200909b8:	dfc00117 	ldw	ra,4(sp)
200909bc:	df000017 	ldw	fp,0(sp)
200909c0:	dec00204 	addi	sp,sp,8
200909c4:	f800283a 	ret

200909c8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
200909c8:	defffa04 	addi	sp,sp,-24
200909cc:	df000515 	stw	fp,20(sp)
200909d0:	df000504 	addi	fp,sp,20
200909d4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200909d8:	0005303a 	rdctl	r2,status
200909dc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200909e0:	e0fffc17 	ldw	r3,-16(fp)
200909e4:	00bfff84 	movi	r2,-2
200909e8:	1884703a 	and	r2,r3,r2
200909ec:	1001703a 	wrctl	status,r2
  
  return context;
200909f0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
200909f4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
200909f8:	e0bfff17 	ldw	r2,-4(fp)
200909fc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
20090a00:	e0bffd17 	ldw	r2,-12(fp)
20090a04:	10800017 	ldw	r2,0(r2)
20090a08:	e0fffd17 	ldw	r3,-12(fp)
20090a0c:	18c00117 	ldw	r3,4(r3)
20090a10:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
20090a14:	e0bffd17 	ldw	r2,-12(fp)
20090a18:	10800117 	ldw	r2,4(r2)
20090a1c:	e0fffd17 	ldw	r3,-12(fp)
20090a20:	18c00017 	ldw	r3,0(r3)
20090a24:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
20090a28:	e0bffd17 	ldw	r2,-12(fp)
20090a2c:	e0fffd17 	ldw	r3,-12(fp)
20090a30:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
20090a34:	e0bffd17 	ldw	r2,-12(fp)
20090a38:	e0fffd17 	ldw	r3,-12(fp)
20090a3c:	10c00015 	stw	r3,0(r2)
20090a40:	e0bffb17 	ldw	r2,-20(fp)
20090a44:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20090a48:	e0bffe17 	ldw	r2,-8(fp)
20090a4c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
20090a50:	e037883a 	mov	sp,fp
20090a54:	df000017 	ldw	fp,0(sp)
20090a58:	dec00104 	addi	sp,sp,4
20090a5c:	f800283a 	ret

20090a60 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
20090a60:	defffb04 	addi	sp,sp,-20
20090a64:	dfc00415 	stw	ra,16(sp)
20090a68:	df000315 	stw	fp,12(sp)
20090a6c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
20090a70:	d0a01017 	ldw	r2,-32704(gp)
20090a74:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
20090a78:	d0a02117 	ldw	r2,-32636(gp)
20090a7c:	10800044 	addi	r2,r2,1
20090a80:	d0a02115 	stw	r2,-32636(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
20090a84:	00002e06 	br	20090b40 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
20090a88:	e0bffd17 	ldw	r2,-12(fp)
20090a8c:	10800017 	ldw	r2,0(r2)
20090a90:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
20090a94:	e0bffd17 	ldw	r2,-12(fp)
20090a98:	10800403 	ldbu	r2,16(r2)
20090a9c:	10803fcc 	andi	r2,r2,255
20090aa0:	10000426 	beq	r2,zero,20090ab4 <alt_tick+0x54>
20090aa4:	d0a02117 	ldw	r2,-32636(gp)
20090aa8:	1000021e 	bne	r2,zero,20090ab4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
20090aac:	e0bffd17 	ldw	r2,-12(fp)
20090ab0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
20090ab4:	e0bffd17 	ldw	r2,-12(fp)
20090ab8:	10800217 	ldw	r2,8(r2)
20090abc:	d0e02117 	ldw	r3,-32636(gp)
20090ac0:	18801d36 	bltu	r3,r2,20090b38 <alt_tick+0xd8>
20090ac4:	e0bffd17 	ldw	r2,-12(fp)
20090ac8:	10800403 	ldbu	r2,16(r2)
20090acc:	10803fcc 	andi	r2,r2,255
20090ad0:	1000191e 	bne	r2,zero,20090b38 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
20090ad4:	e0bffd17 	ldw	r2,-12(fp)
20090ad8:	10800317 	ldw	r2,12(r2)
20090adc:	e0fffd17 	ldw	r3,-12(fp)
20090ae0:	18c00517 	ldw	r3,20(r3)
20090ae4:	1809883a 	mov	r4,r3
20090ae8:	103ee83a 	callr	r2
20090aec:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
20090af0:	e0bfff17 	ldw	r2,-4(fp)
20090af4:	1000031e 	bne	r2,zero,20090b04 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
20090af8:	e13ffd17 	ldw	r4,-12(fp)
20090afc:	00909c80 	call	200909c8 <alt_alarm_stop>
20090b00:	00000d06 	br	20090b38 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
20090b04:	e0bffd17 	ldw	r2,-12(fp)
20090b08:	10c00217 	ldw	r3,8(r2)
20090b0c:	e0bfff17 	ldw	r2,-4(fp)
20090b10:	1887883a 	add	r3,r3,r2
20090b14:	e0bffd17 	ldw	r2,-12(fp)
20090b18:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
20090b1c:	e0bffd17 	ldw	r2,-12(fp)
20090b20:	10c00217 	ldw	r3,8(r2)
20090b24:	d0a02117 	ldw	r2,-32636(gp)
20090b28:	1880032e 	bgeu	r3,r2,20090b38 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
20090b2c:	e0bffd17 	ldw	r2,-12(fp)
20090b30:	00c00044 	movi	r3,1
20090b34:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
20090b38:	e0bffe17 	ldw	r2,-8(fp)
20090b3c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
20090b40:	e0fffd17 	ldw	r3,-12(fp)
20090b44:	d0a01004 	addi	r2,gp,-32704
20090b48:	18bfcf1e 	bne	r3,r2,20090a88 <__flash_rwdata_start+0xfffff158>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
20090b4c:	0001883a 	nop
}
20090b50:	e037883a 	mov	sp,fp
20090b54:	dfc00117 	ldw	ra,4(sp)
20090b58:	df000017 	ldw	fp,0(sp)
20090b5c:	dec00204 	addi	sp,sp,8
20090b60:	f800283a 	ret

20090b64 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
20090b64:	deffff04 	addi	sp,sp,-4
20090b68:	df000015 	stw	fp,0(sp)
20090b6c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
20090b70:	000170fa 	wrctl	ienable,zero
}
20090b74:	e037883a 	mov	sp,fp
20090b78:	df000017 	ldw	fp,0(sp)
20090b7c:	dec00104 	addi	sp,sp,4
20090b80:	f800283a 	ret

20090b84 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
20090b84:	defffb04 	addi	sp,sp,-20
20090b88:	dfc00415 	stw	ra,16(sp)
20090b8c:	df000315 	stw	fp,12(sp)
20090b90:	df000304 	addi	fp,sp,12
20090b94:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
20090b98:	00800034 	movhi	r2,0
20090b9c:	10886404 	addi	r2,r2,8592
20090ba0:	10800017 	ldw	r2,0(r2)
20090ba4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
20090ba8:	00003106 	br	20090c70 <alt_find_file+0xec>
  {
    len = strlen(next->name);
20090bac:	e0bffd17 	ldw	r2,-12(fp)
20090bb0:	10800217 	ldw	r2,8(r2)
20090bb4:	1009883a 	mov	r4,r2
20090bb8:	0080d180 	call	20080d18 <strlen>
20090bbc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
20090bc0:	e0bffd17 	ldw	r2,-12(fp)
20090bc4:	10c00217 	ldw	r3,8(r2)
20090bc8:	e0bffe17 	ldw	r2,-8(fp)
20090bcc:	10bfffc4 	addi	r2,r2,-1
20090bd0:	1885883a 	add	r2,r3,r2
20090bd4:	10800003 	ldbu	r2,0(r2)
20090bd8:	10803fcc 	andi	r2,r2,255
20090bdc:	1080201c 	xori	r2,r2,128
20090be0:	10bfe004 	addi	r2,r2,-128
20090be4:	10800bd8 	cmpnei	r2,r2,47
20090be8:	1000031e 	bne	r2,zero,20090bf8 <alt_find_file+0x74>
    {
      len -= 1;
20090bec:	e0bffe17 	ldw	r2,-8(fp)
20090bf0:	10bfffc4 	addi	r2,r2,-1
20090bf4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
20090bf8:	e0bffe17 	ldw	r2,-8(fp)
20090bfc:	e0ffff17 	ldw	r3,-4(fp)
20090c00:	1885883a 	add	r2,r3,r2
20090c04:	10800003 	ldbu	r2,0(r2)
20090c08:	10803fcc 	andi	r2,r2,255
20090c0c:	1080201c 	xori	r2,r2,128
20090c10:	10bfe004 	addi	r2,r2,-128
20090c14:	10800be0 	cmpeqi	r2,r2,47
20090c18:	1000081e 	bne	r2,zero,20090c3c <alt_find_file+0xb8>
20090c1c:	e0bffe17 	ldw	r2,-8(fp)
20090c20:	e0ffff17 	ldw	r3,-4(fp)
20090c24:	1885883a 	add	r2,r3,r2
20090c28:	10800003 	ldbu	r2,0(r2)
20090c2c:	10803fcc 	andi	r2,r2,255
20090c30:	1080201c 	xori	r2,r2,128
20090c34:	10bfe004 	addi	r2,r2,-128
20090c38:	10000a1e 	bne	r2,zero,20090c64 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
20090c3c:	e0bffd17 	ldw	r2,-12(fp)
20090c40:	10c00217 	ldw	r3,8(r2)
20090c44:	e0bffe17 	ldw	r2,-8(fp)
20090c48:	1809883a 	mov	r4,r3
20090c4c:	e17fff17 	ldw	r5,-4(fp)
20090c50:	100d883a 	mov	r6,r2
20090c54:	0090ec00 	call	20090ec0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
20090c58:	1000021e 	bne	r2,zero,20090c64 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
20090c5c:	e0bffd17 	ldw	r2,-12(fp)
20090c60:	00000806 	br	20090c84 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
20090c64:	e0bffd17 	ldw	r2,-12(fp)
20090c68:	10800017 	ldw	r2,0(r2)
20090c6c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
20090c70:	e0fffd17 	ldw	r3,-12(fp)
20090c74:	00800034 	movhi	r2,0
20090c78:	10886404 	addi	r2,r2,8592
20090c7c:	18bfcb1e 	bne	r3,r2,20090bac <__flash_rwdata_start+0xfffff27c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
20090c80:	0005883a 	mov	r2,zero
}
20090c84:	e037883a 	mov	sp,fp
20090c88:	dfc00117 	ldw	ra,4(sp)
20090c8c:	df000017 	ldw	fp,0(sp)
20090c90:	dec00204 	addi	sp,sp,8
20090c94:	f800283a 	ret

20090c98 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
20090c98:	defffc04 	addi	sp,sp,-16
20090c9c:	df000315 	stw	fp,12(sp)
20090ca0:	df000304 	addi	fp,sp,12
20090ca4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
20090ca8:	00bffa04 	movi	r2,-24
20090cac:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
20090cb0:	e03ffd15 	stw	zero,-12(fp)
20090cb4:	00001d06 	br	20090d2c <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
20090cb8:	00800034 	movhi	r2,0
20090cbc:	10839e04 	addi	r2,r2,3704
20090cc0:	e0fffd17 	ldw	r3,-12(fp)
20090cc4:	18c00324 	muli	r3,r3,12
20090cc8:	10c5883a 	add	r2,r2,r3
20090ccc:	10800017 	ldw	r2,0(r2)
20090cd0:	1000131e 	bne	r2,zero,20090d20 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
20090cd4:	00800034 	movhi	r2,0
20090cd8:	10839e04 	addi	r2,r2,3704
20090cdc:	e0fffd17 	ldw	r3,-12(fp)
20090ce0:	18c00324 	muli	r3,r3,12
20090ce4:	10c5883a 	add	r2,r2,r3
20090ce8:	e0ffff17 	ldw	r3,-4(fp)
20090cec:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
20090cf0:	00800034 	movhi	r2,0
20090cf4:	10886804 	addi	r2,r2,8608
20090cf8:	10c00017 	ldw	r3,0(r2)
20090cfc:	e0bffd17 	ldw	r2,-12(fp)
20090d00:	1880040e 	bge	r3,r2,20090d14 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
20090d04:	00800034 	movhi	r2,0
20090d08:	10886804 	addi	r2,r2,8608
20090d0c:	e0fffd17 	ldw	r3,-12(fp)
20090d10:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
20090d14:	e0bffd17 	ldw	r2,-12(fp)
20090d18:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
20090d1c:	00000606 	br	20090d38 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
20090d20:	e0bffd17 	ldw	r2,-12(fp)
20090d24:	10800044 	addi	r2,r2,1
20090d28:	e0bffd15 	stw	r2,-12(fp)
20090d2c:	e0bffd17 	ldw	r2,-12(fp)
20090d30:	10800810 	cmplti	r2,r2,32
20090d34:	103fe01e 	bne	r2,zero,20090cb8 <__flash_rwdata_start+0xfffff388>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
20090d38:	e0bffe17 	ldw	r2,-8(fp)
}
20090d3c:	e037883a 	mov	sp,fp
20090d40:	df000017 	ldw	fp,0(sp)
20090d44:	dec00104 	addi	sp,sp,4
20090d48:	f800283a 	ret

20090d4c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
20090d4c:	defffb04 	addi	sp,sp,-20
20090d50:	df000415 	stw	fp,16(sp)
20090d54:	df000404 	addi	fp,sp,16
20090d58:	e13ffe15 	stw	r4,-8(fp)
20090d5c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
20090d60:	e0bfff17 	ldw	r2,-4(fp)
20090d64:	10840070 	cmpltui	r2,r2,4097
20090d68:	1000021e 	bne	r2,zero,20090d74 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
20090d6c:	00840004 	movi	r2,4096
20090d70:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
20090d74:	e0fffe17 	ldw	r3,-8(fp)
20090d78:	e0bfff17 	ldw	r2,-4(fp)
20090d7c:	1885883a 	add	r2,r3,r2
20090d80:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
20090d84:	e0bffe17 	ldw	r2,-8(fp)
20090d88:	e0bffc15 	stw	r2,-16(fp)
20090d8c:	00000506 	br	20090da4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
20090d90:	e0bffc17 	ldw	r2,-16(fp)
20090d94:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
20090d98:	e0bffc17 	ldw	r2,-16(fp)
20090d9c:	10800804 	addi	r2,r2,32
20090da0:	e0bffc15 	stw	r2,-16(fp)
20090da4:	e0fffc17 	ldw	r3,-16(fp)
20090da8:	e0bffd17 	ldw	r2,-12(fp)
20090dac:	18bff836 	bltu	r3,r2,20090d90 <__flash_rwdata_start+0xfffff460>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
20090db0:	e0bffe17 	ldw	r2,-8(fp)
20090db4:	108007cc 	andi	r2,r2,31
20090db8:	10000226 	beq	r2,zero,20090dc4 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
20090dbc:	e0bffc17 	ldw	r2,-16(fp)
20090dc0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
20090dc4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
20090dc8:	e037883a 	mov	sp,fp
20090dcc:	df000017 	ldw	fp,0(sp)
20090dd0:	dec00104 	addi	sp,sp,4
20090dd4:	f800283a 	ret

20090dd8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
20090dd8:	defffe04 	addi	sp,sp,-8
20090ddc:	df000115 	stw	fp,4(sp)
20090de0:	df000104 	addi	fp,sp,4
20090de4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
20090de8:	e0bfff17 	ldw	r2,-4(fp)
20090dec:	10bffe84 	addi	r2,r2,-6
20090df0:	10c00428 	cmpgeui	r3,r2,16
20090df4:	18001a1e 	bne	r3,zero,20090e60 <alt_exception_cause_generated_bad_addr+0x88>
20090df8:	100690ba 	slli	r3,r2,2
20090dfc:	00880274 	movhi	r2,8201
20090e00:	10838404 	addi	r2,r2,3600
20090e04:	1885883a 	add	r2,r3,r2
20090e08:	10800017 	ldw	r2,0(r2)
20090e0c:	1000683a 	jmp	r2
20090e10:	20090e50 	cmplti	zero,r4,9273
20090e14:	20090e50 	cmplti	zero,r4,9273
20090e18:	20090e60 	cmpeqi	zero,r4,9273
20090e1c:	20090e60 	cmpeqi	zero,r4,9273
20090e20:	20090e60 	cmpeqi	zero,r4,9273
20090e24:	20090e50 	cmplti	zero,r4,9273
20090e28:	20090e58 	cmpnei	zero,r4,9273
20090e2c:	20090e60 	cmpeqi	zero,r4,9273
20090e30:	20090e50 	cmplti	zero,r4,9273
20090e34:	20090e50 	cmplti	zero,r4,9273
20090e38:	20090e60 	cmpeqi	zero,r4,9273
20090e3c:	20090e50 	cmplti	zero,r4,9273
20090e40:	20090e58 	cmpnei	zero,r4,9273
20090e44:	20090e60 	cmpeqi	zero,r4,9273
20090e48:	20090e60 	cmpeqi	zero,r4,9273
20090e4c:	20090e50 	cmplti	zero,r4,9273
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
20090e50:	00800044 	movi	r2,1
20090e54:	00000306 	br	20090e64 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
20090e58:	0005883a 	mov	r2,zero
20090e5c:	00000106 	br	20090e64 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
20090e60:	0005883a 	mov	r2,zero
  }
}
20090e64:	e037883a 	mov	sp,fp
20090e68:	df000017 	ldw	fp,0(sp)
20090e6c:	dec00104 	addi	sp,sp,4
20090e70:	f800283a 	ret

20090e74 <atexit>:
20090e74:	200b883a 	mov	r5,r4
20090e78:	000d883a 	mov	r6,zero
20090e7c:	0009883a 	mov	r4,zero
20090e80:	000f883a 	mov	r7,zero
20090e84:	00910a81 	jmpi	200910a8 <__register_exitproc>

20090e88 <exit>:
20090e88:	defffe04 	addi	sp,sp,-8
20090e8c:	000b883a 	mov	r5,zero
20090e90:	dc000015 	stw	r16,0(sp)
20090e94:	dfc00115 	stw	ra,4(sp)
20090e98:	2021883a 	mov	r16,r4
20090e9c:	00911bc0 	call	200911bc <__call_exitprocs>
20090ea0:	00800034 	movhi	r2,0
20090ea4:	10886004 	addi	r2,r2,8576
20090ea8:	11000017 	ldw	r4,0(r2)
20090eac:	20800f17 	ldw	r2,60(r4)
20090eb0:	10000126 	beq	r2,zero,20090eb8 <exit+0x30>
20090eb4:	103ee83a 	callr	r2
20090eb8:	8009883a 	mov	r4,r16
20090ebc:	00913500 	call	20091350 <_exit>

20090ec0 <memcmp>:
20090ec0:	01c000c4 	movi	r7,3
20090ec4:	3980192e 	bgeu	r7,r6,20090f2c <memcmp+0x6c>
20090ec8:	2144b03a 	or	r2,r4,r5
20090ecc:	11c4703a 	and	r2,r2,r7
20090ed0:	10000f26 	beq	r2,zero,20090f10 <memcmp+0x50>
20090ed4:	20800003 	ldbu	r2,0(r4)
20090ed8:	28c00003 	ldbu	r3,0(r5)
20090edc:	10c0151e 	bne	r2,r3,20090f34 <memcmp+0x74>
20090ee0:	31bfff84 	addi	r6,r6,-2
20090ee4:	01ffffc4 	movi	r7,-1
20090ee8:	00000406 	br	20090efc <memcmp+0x3c>
20090eec:	20800003 	ldbu	r2,0(r4)
20090ef0:	28c00003 	ldbu	r3,0(r5)
20090ef4:	31bfffc4 	addi	r6,r6,-1
20090ef8:	10c00e1e 	bne	r2,r3,20090f34 <memcmp+0x74>
20090efc:	21000044 	addi	r4,r4,1
20090f00:	29400044 	addi	r5,r5,1
20090f04:	31fff91e 	bne	r6,r7,20090eec <__flash_rwdata_start+0xfffff5bc>
20090f08:	0005883a 	mov	r2,zero
20090f0c:	f800283a 	ret
20090f10:	20c00017 	ldw	r3,0(r4)
20090f14:	28800017 	ldw	r2,0(r5)
20090f18:	1880041e 	bne	r3,r2,20090f2c <memcmp+0x6c>
20090f1c:	31bfff04 	addi	r6,r6,-4
20090f20:	21000104 	addi	r4,r4,4
20090f24:	29400104 	addi	r5,r5,4
20090f28:	39bff936 	bltu	r7,r6,20090f10 <__flash_rwdata_start+0xfffff5e0>
20090f2c:	303fe91e 	bne	r6,zero,20090ed4 <__flash_rwdata_start+0xfffff5a4>
20090f30:	003ff506 	br	20090f08 <__flash_rwdata_start+0xfffff5d8>
20090f34:	10c5c83a 	sub	r2,r2,r3
20090f38:	f800283a 	ret

20090f3c <_putc_r>:
20090f3c:	defffc04 	addi	sp,sp,-16
20090f40:	dc000215 	stw	r16,8(sp)
20090f44:	dfc00315 	stw	ra,12(sp)
20090f48:	2021883a 	mov	r16,r4
20090f4c:	20000226 	beq	r4,zero,20090f58 <_putc_r+0x1c>
20090f50:	20800e17 	ldw	r2,56(r4)
20090f54:	10001b26 	beq	r2,zero,20090fc4 <_putc_r+0x88>
20090f58:	30800217 	ldw	r2,8(r6)
20090f5c:	10bfffc4 	addi	r2,r2,-1
20090f60:	30800215 	stw	r2,8(r6)
20090f64:	10000a16 	blt	r2,zero,20090f90 <_putc_r+0x54>
20090f68:	30800017 	ldw	r2,0(r6)
20090f6c:	11400005 	stb	r5,0(r2)
20090f70:	30800017 	ldw	r2,0(r6)
20090f74:	10c00044 	addi	r3,r2,1
20090f78:	30c00015 	stw	r3,0(r6)
20090f7c:	10800003 	ldbu	r2,0(r2)
20090f80:	dfc00317 	ldw	ra,12(sp)
20090f84:	dc000217 	ldw	r16,8(sp)
20090f88:	dec00404 	addi	sp,sp,16
20090f8c:	f800283a 	ret
20090f90:	30c00617 	ldw	r3,24(r6)
20090f94:	10c00616 	blt	r2,r3,20090fb0 <_putc_r+0x74>
20090f98:	30800017 	ldw	r2,0(r6)
20090f9c:	00c00284 	movi	r3,10
20090fa0:	11400005 	stb	r5,0(r2)
20090fa4:	30800017 	ldw	r2,0(r6)
20090fa8:	11400003 	ldbu	r5,0(r2)
20090fac:	28fff11e 	bne	r5,r3,20090f74 <__flash_rwdata_start+0xfffff644>
20090fb0:	8009883a 	mov	r4,r16
20090fb4:	dfc00317 	ldw	ra,12(sp)
20090fb8:	dc000217 	ldw	r16,8(sp)
20090fbc:	dec00404 	addi	sp,sp,16
20090fc0:	00892001 	jmpi	20089200 <__swbuf_r>
20090fc4:	d9400015 	stw	r5,0(sp)
20090fc8:	d9800115 	stw	r6,4(sp)
20090fcc:	0084e400 	call	20084e40 <__sinit>
20090fd0:	d9800117 	ldw	r6,4(sp)
20090fd4:	d9400017 	ldw	r5,0(sp)
20090fd8:	003fdf06 	br	20090f58 <__flash_rwdata_start+0xfffff628>

20090fdc <putc>:
20090fdc:	00800034 	movhi	r2,0
20090fe0:	defffc04 	addi	sp,sp,-16
20090fe4:	10886104 	addi	r2,r2,8580
20090fe8:	dc400115 	stw	r17,4(sp)
20090fec:	14400017 	ldw	r17,0(r2)
20090ff0:	dc800215 	stw	r18,8(sp)
20090ff4:	dc000015 	stw	r16,0(sp)
20090ff8:	dfc00315 	stw	ra,12(sp)
20090ffc:	2025883a 	mov	r18,r4
20091000:	2821883a 	mov	r16,r5
20091004:	88000226 	beq	r17,zero,20091010 <putc+0x34>
20091008:	88800e17 	ldw	r2,56(r17)
2009100c:	10001a26 	beq	r2,zero,20091078 <putc+0x9c>
20091010:	80800217 	ldw	r2,8(r16)
20091014:	10bfffc4 	addi	r2,r2,-1
20091018:	80800215 	stw	r2,8(r16)
2009101c:	10000c16 	blt	r2,zero,20091050 <putc+0x74>
20091020:	80800017 	ldw	r2,0(r16)
20091024:	14800005 	stb	r18,0(r2)
20091028:	80800017 	ldw	r2,0(r16)
2009102c:	10c00044 	addi	r3,r2,1
20091030:	80c00015 	stw	r3,0(r16)
20091034:	10800003 	ldbu	r2,0(r2)
20091038:	dfc00317 	ldw	ra,12(sp)
2009103c:	dc800217 	ldw	r18,8(sp)
20091040:	dc400117 	ldw	r17,4(sp)
20091044:	dc000017 	ldw	r16,0(sp)
20091048:	dec00404 	addi	sp,sp,16
2009104c:	f800283a 	ret
20091050:	80c00617 	ldw	r3,24(r16)
20091054:	10c00b16 	blt	r2,r3,20091084 <putc+0xa8>
20091058:	80800017 	ldw	r2,0(r16)
2009105c:	00c00284 	movi	r3,10
20091060:	14800005 	stb	r18,0(r2)
20091064:	80800017 	ldw	r2,0(r16)
20091068:	11400003 	ldbu	r5,0(r2)
2009106c:	28ffef1e 	bne	r5,r3,2009102c <__flash_rwdata_start+0xfffff6fc>
20091070:	8809883a 	mov	r4,r17
20091074:	00000506 	br	2009108c <putc+0xb0>
20091078:	8809883a 	mov	r4,r17
2009107c:	0084e400 	call	20084e40 <__sinit>
20091080:	003fe306 	br	20091010 <__flash_rwdata_start+0xfffff6e0>
20091084:	8809883a 	mov	r4,r17
20091088:	900b883a 	mov	r5,r18
2009108c:	800d883a 	mov	r6,r16
20091090:	dfc00317 	ldw	ra,12(sp)
20091094:	dc800217 	ldw	r18,8(sp)
20091098:	dc400117 	ldw	r17,4(sp)
2009109c:	dc000017 	ldw	r16,0(sp)
200910a0:	dec00404 	addi	sp,sp,16
200910a4:	00892001 	jmpi	20089200 <__swbuf_r>

200910a8 <__register_exitproc>:
200910a8:	00800034 	movhi	r2,0
200910ac:	defffa04 	addi	sp,sp,-24
200910b0:	10886004 	addi	r2,r2,8576
200910b4:	dc000315 	stw	r16,12(sp)
200910b8:	14000017 	ldw	r16,0(r2)
200910bc:	dc400415 	stw	r17,16(sp)
200910c0:	dfc00515 	stw	ra,20(sp)
200910c4:	80805217 	ldw	r2,328(r16)
200910c8:	2023883a 	mov	r17,r4
200910cc:	10003626 	beq	r2,zero,200911a8 <__register_exitproc+0x100>
200910d0:	10c00117 	ldw	r3,4(r2)
200910d4:	010007c4 	movi	r4,31
200910d8:	20c00e16 	blt	r4,r3,20091114 <__register_exitproc+0x6c>
200910dc:	1a400044 	addi	r9,r3,1
200910e0:	8800211e 	bne	r17,zero,20091168 <__register_exitproc+0xc0>
200910e4:	18c00084 	addi	r3,r3,2
200910e8:	18c7883a 	add	r3,r3,r3
200910ec:	18c7883a 	add	r3,r3,r3
200910f0:	12400115 	stw	r9,4(r2)
200910f4:	10c7883a 	add	r3,r2,r3
200910f8:	19400015 	stw	r5,0(r3)
200910fc:	0005883a 	mov	r2,zero
20091100:	dfc00517 	ldw	ra,20(sp)
20091104:	dc400417 	ldw	r17,16(sp)
20091108:	dc000317 	ldw	r16,12(sp)
2009110c:	dec00604 	addi	sp,sp,24
20091110:	f800283a 	ret
20091114:	00880234 	movhi	r2,8200
20091118:	1080f404 	addi	r2,r2,976
2009111c:	10002526 	beq	r2,zero,200911b4 <__register_exitproc+0x10c>
20091120:	01006404 	movi	r4,400
20091124:	d9400015 	stw	r5,0(sp)
20091128:	d9800115 	stw	r6,4(sp)
2009112c:	d9c00215 	stw	r7,8(sp)
20091130:	00803d00 	call	200803d0 <malloc>
20091134:	d9400017 	ldw	r5,0(sp)
20091138:	d9800117 	ldw	r6,4(sp)
2009113c:	d9c00217 	ldw	r7,8(sp)
20091140:	10001c26 	beq	r2,zero,200911b4 <__register_exitproc+0x10c>
20091144:	80c05217 	ldw	r3,328(r16)
20091148:	10000115 	stw	zero,4(r2)
2009114c:	02400044 	movi	r9,1
20091150:	10c00015 	stw	r3,0(r2)
20091154:	80805215 	stw	r2,328(r16)
20091158:	10006215 	stw	zero,392(r2)
2009115c:	10006315 	stw	zero,396(r2)
20091160:	0007883a 	mov	r3,zero
20091164:	883fdf26 	beq	r17,zero,200910e4 <__flash_rwdata_start+0xfffff7b4>
20091168:	18d1883a 	add	r8,r3,r3
2009116c:	4211883a 	add	r8,r8,r8
20091170:	1211883a 	add	r8,r2,r8
20091174:	41802215 	stw	r6,136(r8)
20091178:	01000044 	movi	r4,1
2009117c:	11806217 	ldw	r6,392(r2)
20091180:	20c8983a 	sll	r4,r4,r3
20091184:	310cb03a 	or	r6,r6,r4
20091188:	11806215 	stw	r6,392(r2)
2009118c:	41c04215 	stw	r7,264(r8)
20091190:	01800084 	movi	r6,2
20091194:	89bfd31e 	bne	r17,r6,200910e4 <__flash_rwdata_start+0xfffff7b4>
20091198:	11806317 	ldw	r6,396(r2)
2009119c:	3108b03a 	or	r4,r6,r4
200911a0:	11006315 	stw	r4,396(r2)
200911a4:	003fcf06 	br	200910e4 <__flash_rwdata_start+0xfffff7b4>
200911a8:	80805304 	addi	r2,r16,332
200911ac:	80805215 	stw	r2,328(r16)
200911b0:	003fc706 	br	200910d0 <__flash_rwdata_start+0xfffff7a0>
200911b4:	00bfffc4 	movi	r2,-1
200911b8:	003fd106 	br	20091100 <__flash_rwdata_start+0xfffff7d0>

200911bc <__call_exitprocs>:
200911bc:	00800034 	movhi	r2,0
200911c0:	10886004 	addi	r2,r2,8576
200911c4:	10800017 	ldw	r2,0(r2)
200911c8:	defff404 	addi	sp,sp,-48
200911cc:	dd800815 	stw	r22,32(sp)
200911d0:	d8800015 	stw	r2,0(sp)
200911d4:	10805204 	addi	r2,r2,328
200911d8:	dd000615 	stw	r20,24(sp)
200911dc:	dc800415 	stw	r18,16(sp)
200911e0:	dfc00b15 	stw	ra,44(sp)
200911e4:	df000a15 	stw	fp,40(sp)
200911e8:	ddc00915 	stw	r23,36(sp)
200911ec:	dd400715 	stw	r21,28(sp)
200911f0:	dcc00515 	stw	r19,20(sp)
200911f4:	dc400315 	stw	r17,12(sp)
200911f8:	dc000215 	stw	r16,8(sp)
200911fc:	2025883a 	mov	r18,r4
20091200:	2829883a 	mov	r20,r5
20091204:	d8800115 	stw	r2,4(sp)
20091208:	05bfffc4 	movi	r22,-1
2009120c:	d8800017 	ldw	r2,0(sp)
20091210:	14c05217 	ldw	r19,328(r2)
20091214:	98001d26 	beq	r19,zero,2009128c <__call_exitprocs+0xd0>
20091218:	dd400117 	ldw	r21,4(sp)
2009121c:	98800117 	ldw	r2,4(r19)
20091220:	173fffc4 	addi	fp,r2,-1
20091224:	e0000d16 	blt	fp,zero,2009125c <__call_exitprocs+0xa0>
20091228:	14000044 	addi	r16,r2,1
2009122c:	8421883a 	add	r16,r16,r16
20091230:	8421883a 	add	r16,r16,r16
20091234:	84402004 	addi	r17,r16,128
20091238:	9c63883a 	add	r17,r19,r17
2009123c:	9c21883a 	add	r16,r19,r16
20091240:	a0001e26 	beq	r20,zero,200912bc <__call_exitprocs+0x100>
20091244:	80804017 	ldw	r2,256(r16)
20091248:	15001c26 	beq	r2,r20,200912bc <__call_exitprocs+0x100>
2009124c:	e73fffc4 	addi	fp,fp,-1
20091250:	843fff04 	addi	r16,r16,-4
20091254:	8c7fff04 	addi	r17,r17,-4
20091258:	e5bff91e 	bne	fp,r22,20091240 <__flash_rwdata_start+0xfffff910>
2009125c:	00880234 	movhi	r2,8200
20091260:	1080f904 	addi	r2,r2,996
20091264:	10000926 	beq	r2,zero,2009128c <__call_exitprocs+0xd0>
20091268:	98800117 	ldw	r2,4(r19)
2009126c:	1000311e 	bne	r2,zero,20091334 <__call_exitprocs+0x178>
20091270:	98800017 	ldw	r2,0(r19)
20091274:	10003426 	beq	r2,zero,20091348 <__call_exitprocs+0x18c>
20091278:	9809883a 	mov	r4,r19
2009127c:	a8800015 	stw	r2,0(r21)
20091280:	00803e40 	call	200803e4 <free>
20091284:	acc00017 	ldw	r19,0(r21)
20091288:	983fe41e 	bne	r19,zero,2009121c <__flash_rwdata_start+0xfffff8ec>
2009128c:	dfc00b17 	ldw	ra,44(sp)
20091290:	df000a17 	ldw	fp,40(sp)
20091294:	ddc00917 	ldw	r23,36(sp)
20091298:	dd800817 	ldw	r22,32(sp)
2009129c:	dd400717 	ldw	r21,28(sp)
200912a0:	dd000617 	ldw	r20,24(sp)
200912a4:	dcc00517 	ldw	r19,20(sp)
200912a8:	dc800417 	ldw	r18,16(sp)
200912ac:	dc400317 	ldw	r17,12(sp)
200912b0:	dc000217 	ldw	r16,8(sp)
200912b4:	dec00c04 	addi	sp,sp,48
200912b8:	f800283a 	ret
200912bc:	98800117 	ldw	r2,4(r19)
200912c0:	80c00017 	ldw	r3,0(r16)
200912c4:	10bfffc4 	addi	r2,r2,-1
200912c8:	17001526 	beq	r2,fp,20091320 <__call_exitprocs+0x164>
200912cc:	80000015 	stw	zero,0(r16)
200912d0:	183fde26 	beq	r3,zero,2009124c <__flash_rwdata_start+0xfffff91c>
200912d4:	00800044 	movi	r2,1
200912d8:	1708983a 	sll	r4,r2,fp
200912dc:	98806217 	ldw	r2,392(r19)
200912e0:	9dc00117 	ldw	r23,4(r19)
200912e4:	2084703a 	and	r2,r4,r2
200912e8:	1000061e 	bne	r2,zero,20091304 <__call_exitprocs+0x148>
200912ec:	183ee83a 	callr	r3
200912f0:	98800117 	ldw	r2,4(r19)
200912f4:	15ffc51e 	bne	r2,r23,2009120c <__flash_rwdata_start+0xfffff8dc>
200912f8:	a8800017 	ldw	r2,0(r21)
200912fc:	14ffd326 	beq	r2,r19,2009124c <__flash_rwdata_start+0xfffff91c>
20091300:	003fc206 	br	2009120c <__flash_rwdata_start+0xfffff8dc>
20091304:	98806317 	ldw	r2,396(r19)
20091308:	2084703a 	and	r2,r4,r2
2009130c:	1000061e 	bne	r2,zero,20091328 <__call_exitprocs+0x16c>
20091310:	89400017 	ldw	r5,0(r17)
20091314:	9009883a 	mov	r4,r18
20091318:	183ee83a 	callr	r3
2009131c:	003ff406 	br	200912f0 <__flash_rwdata_start+0xfffff9c0>
20091320:	9f000115 	stw	fp,4(r19)
20091324:	003fea06 	br	200912d0 <__flash_rwdata_start+0xfffff9a0>
20091328:	89000017 	ldw	r4,0(r17)
2009132c:	183ee83a 	callr	r3
20091330:	003fef06 	br	200912f0 <__flash_rwdata_start+0xfffff9c0>
20091334:	98800017 	ldw	r2,0(r19)
20091338:	982b883a 	mov	r21,r19
2009133c:	1027883a 	mov	r19,r2
20091340:	983fb61e 	bne	r19,zero,2009121c <__flash_rwdata_start+0xfffff8ec>
20091344:	003fd106 	br	2009128c <__flash_rwdata_start+0xfffff95c>
20091348:	0005883a 	mov	r2,zero
2009134c:	003ffa06 	br	20091338 <__flash_rwdata_start+0xfffffa08>

20091350 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
20091350:	defffd04 	addi	sp,sp,-12
20091354:	df000215 	stw	fp,8(sp)
20091358:	df000204 	addi	fp,sp,8
2009135c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
20091360:	0001883a 	nop
20091364:	e0bfff17 	ldw	r2,-4(fp)
20091368:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
2009136c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
20091370:	10000226 	beq	r2,zero,2009137c <_exit+0x2c>
    ALT_SIM_FAIL();
20091374:	002af070 	cmpltui	zero,zero,43969
20091378:	00000106 	br	20091380 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
2009137c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
20091380:	003fff06 	br	20091380 <__flash_rwdata_start+0xfffffa50>
