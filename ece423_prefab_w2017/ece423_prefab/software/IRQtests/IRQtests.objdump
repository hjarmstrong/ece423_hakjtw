
IRQtests.elf:     file format elf32-littlenios2
IRQtests.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x20080240

Program Header:
    LOAD off    0x00001000 vaddr 0x20080000 paddr 0x20080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x20080020 paddr 0x20080020 align 2**12
         filesz 0x0001155c memsz 0x0001155c flags r-x
    LOAD off    0x00013000 vaddr 0x00000000 paddr 0x2009157c align 2**12
         filesz 0x00002088 memsz 0x000021f4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  20080000  20080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000220  20080020  20080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001133c  20080240  20080240  00001240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000534  00000000  2009157c  00013000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b54  00000534  20091ab0  00013534  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000016c  00002088  20093604  00015088  2**2
                  ALLOC, SMALL_DATA
  6 .lpddr2       00000000  000021f4  000021f4  00015088  2**0
                  CONTENTS
  7 .sram         00000000  20093604  20093604  00015088  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00015088  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000f90  00000000  00000000  000150b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002695e  00000000  00000000  00016040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009a15  00000000  00000000  0003c99e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000bdec  00000000  00000000  000463b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002754  00000000  00000000  000521a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000411f  00000000  00000000  000548f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017128  00000000  00000000  00058a13  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  0006fb3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001838  00000000  00000000  0006fba0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00074fe6  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  00074fe9  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00074fec  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00074fed  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00074fee  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00074ff2  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00074ff6  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  00074ffa  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  00075003  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0007500c  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  00075015  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000032  00000000  00000000  00075020  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0010594e  00000000  00000000  00075052  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
20080000 l    d  .entry	00000000 .entry
20080020 l    d  .exceptions	00000000 .exceptions
20080240 l    d  .text	00000000 .text
00000000 l    d  .rodata	00000000 .rodata
00000534 l    d  .rwdata	00000000 .rwdata
00002088 l    d  .bss	00000000 .bss
000021f4 l    d  .lpddr2	00000000 .lpddr2
20093604 l    d  .sram	00000000 .sram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../IRQtests_bsp//obj/HAL/src/crt0.o
20080288 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
2008028c l     F .text	00000040 timer1_isr
200802cc l     F .text	00000040 pio_isr
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000066 l     O .rodata	00000010 zeroes.4255
200825c8 l     F .text	000000bc __sbprintf
00000076 l     O .rodata	00000010 blanks.4254
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
200827d8 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
20084394 l     F .text	00000008 __fp_lock
2008439c l     F .text	00000008 __fp_unlock
200843b0 l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00000534 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00000978 l     O .rwdata	00000020 lc_ctype_charset
00000958 l     O .rwdata	00000020 lc_message_charset
00000998 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
000000a8 l     O .rodata	0000000c p05.2710
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
20087820 l     F .text	000000fc __sprint_r.part.0
000001dc l     O .rodata	00000010 blanks.4199
000001cc l     O .rodata	00000010 zeroes.4200
20088c28 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
2008a12c l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
2008c858 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
2008c978 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
2008c9a4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
2008cc54 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
2008cd48 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
2008ce2c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
2008d008 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00002074 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
2008d264 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
2008d3ac l     F .text	00000038 alt_dev_reg
00000f80 l     O .rwdata	00001060 jtag_uart
00001fe0 l     O .rwdata	00000060 video_dma
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
2008d6dc l     F .text	00000204 altera_avalon_jtag_uart_irq
2008d8e0 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_msgdma.c
2008df00 l     F .text	00000050 alt_get_errno
2008df50 l     F .text	00000094 alt_msgdma_write_standard_descriptor
2008dfe4 l     F .text	0000012c alt_msgdma_write_extended_descriptor
2008e110 l     F .text	00000184 alt_msgdma_irq
2008e294 l     F .text	0000008c alt_msgdma_construct_standard_descriptor
2008e320 l     F .text	00000154 alt_msgdma_construct_extended_descriptor
2008e474 l     F .text	000002d0 alt_msgdma_descriptor_async_transfer
2008e744 l     F .text	00000378 alt_msgdma_descriptor_sync_transfer
2008ed8c l     F .text	000000a4 alt_msgdma_construct_prefetcher_standard_descriptor
2008ee30 l     F .text	00000194 alt_msgdma_construct_prefetcher_extended_descriptor
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
2009006c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
200905a8 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
200906e0 l     F .text	00000050 alt_get_errno
20090730 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000020c8 g     O .bss	00000004 alt_instruction_exception_handler
2008fca0 g     F .text	0000003c alt_msgdma_standard_descriptor_async_transfer
20086e98 g     F .text	00000074 _mprec_log10
20086f84 g     F .text	0000008c __any_on
20089194 g     F .text	00000054 _isatty_r
000000b4 g     O .rodata	00000028 __mprec_tinytens
2008cf50 g     F .text	00000078 alt_main
20080500 g     F .text	000000a8 _puts_r
000020f4 g     O .bss	00000100 alt_irq
200891e8 g     F .text	0000005c _lseek_r
20091ab0 g       *ABS*	00000000 __flash_rwdata_start
2008b3c0 g     F .text	00000084 .hidden __eqdf2
2008eb6c g     F .text	00000058 alt_msgdma_construct_standard_mm_to_mm_descriptor
000021f4 g       *ABS*	00000000 __alt_heap_start
200804c4 g     F .text	0000003c printf
200893f4 g     F .text	0000009c _wcrtomb_r
20080000 g       *ABS*	00000000 __alt_mem_sram
20087718 g     F .text	0000005c __sseek
200846e4 g     F .text	00000010 __sinit
200892a0 g     F .text	00000138 __swbuf_r
20085190 g     F .text	0000007c _setlocale_r
2008454c g     F .text	00000068 __sfmoreglue
2008cfe8 g     F .text	00000020 __malloc_unlock
000020bc g     O .bss	00000004 altera_avalon_timer_ts_freq
20085df0 g     F .text	0000015c memmove
200846cc g     F .text	00000018 _cleanup
20086070 g     F .text	000000a8 _Balloc
2008eabc g     F .text	00000058 alt_msgdma_construct_standard_st_to_mm_descriptor
2008b444 g     F .text	000000e0 .hidden __gtdf2
20090d5c g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
20080000 g     F .entry	0000001c __reset
20080020 g       *ABS*	00000000 __flash_exceptions_start
2008913c g     F .text	00000058 _fstat_r
000020a4 g     O .bss	00000004 errno
20087694 g     F .text	00000008 __seofread
000020b0 g     O .bss	00000004 alt_argv
0000a040 g       *ABS*	00000000 _gp
2008f5dc g     F .text	000000d4 alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits
00000e00 g     O .rwdata	00000180 alt_fd_list
20090218 g     F .text	00000090 alt_find_dev
20085cb8 g     F .text	00000138 memcpy
200843a4 g     F .text	0000000c _cleanup_r
2008c680 g     F .text	000000d0 .hidden __floatsidf
20090668 g     F .text	00000078 alt_io_redirect
2008b524 g     F .text	000000e0 .hidden __ltdf2
2009157c g       *ABS*	00000000 __DTOR_END__
2008f9fc g     F .text	0000008c alt_msgdma_start_prefetcher_with_extd_desc_list
2008fcdc g     F .text	0000003c alt_msgdma_extended_descriptor_async_transfer
2008fc4c g     F .text	00000054 alt_msgdma_register_callback
200805a8 g     F .text	00000014 puts
20090fd0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
20087578 g     F .text	00000074 __fpclassifyd
20086df4 g     F .text	000000a4 __ratio
20088c04 g     F .text	00000024 __vfiprintf_internal
2008dadc g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
2008f2bc g     F .text	000000f0 alt_msgdma_prefetcher_add_standard_desc_to_list
20080498 g     F .text	0000002c _printf_r
2008a248 g     F .text	00000008 .hidden __udivsi3
2008cca4 g     F .text	000000a4 isatty
00000104 g     O .rodata	000000c8 __mprec_tens
2008520c g     F .text	0000000c __locale_charset
20090f44 g     F .text	0000008c alt_icache_flush
000020a0 g     O .bss	00000004 __malloc_top_pad
00002048 g     O .rwdata	00000004 __mb_cur_max
2008523c g     F .text	0000000c _localeconv_r
2008647c g     F .text	0000003c __i2b
20084b48 g     F .text	000004c0 __sfvwrite_r
200875ec g     F .text	00000054 _sbrk_r
20089244 g     F .text	0000005c _read_r
00002068 g     O .rwdata	00000004 alt_max_fd
20088e58 g     F .text	000000f0 _fclose_r
20084364 g     F .text	00000030 fflush
0000209c g     O .bss	00000004 __malloc_max_sbrked_mem
2008caa4 g     F .text	000001b0 alt_irq_register
2008a258 g     F .text	0000089c .hidden __adddf3
20086b9c g     F .text	0000011c __b2d
2008f01c g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor
20089b9c g     F .text	00000590 .hidden __umoddi3
2008ce7c g     F .text	000000d4 lseek
00002040 g     O .rwdata	00000004 _global_impure_ptr
20087010 g     F .text	00000568 _realloc_r
000021f4 g       *ABS*	00000000 __bss_end
200904b8 g     F .text	000000f0 alt_iic_isr_register
20090c58 g     F .text	00000104 alt_tick
2008fae0 g     F .text	0000016c alt_msgdma_init
200895dc g     F .text	000005c0 .hidden __udivdi3
20088f5c g     F .text	00000184 _fputwc_r
000000dc g     O .rodata	00000028 __mprec_bigtens
20086260 g     F .text	00000104 __s2b
2008c750 g     F .text	000000a4 .hidden __floatunsidf
20086944 g     F .text	00000060 __mcmp
2008fd54 g     F .text	0000003c alt_msgdma_extended_descriptor_sync_transfer
20084704 g     F .text	00000018 __fp_lock_all
2009046c g     F .text	0000004c alt_ic_irq_enabled
20090bc0 g     F .text	00000098 alt_alarm_stop
000020a8 g     O .bss	00000004 alt_irq_active
200800fc g     F .exceptions	000000d0 alt_irq_handler
00000dd8 g     O .rwdata	00000028 alt_dev_null
2008ec54 g     F .text	00000090 alt_msgdma_construct_extended_mm_to_st_descriptor
2008f970 g     F .text	0000008c alt_msgdma_start_prefetcher_with_std_desc_list
20090028 g     F .text	00000044 alt_dcache_flush_all
20086364 g     F .text	00000068 __hi0bits
2008c5f8 g     F .text	00000088 .hidden __fixdfsi
00002088 g       *ABS*	00000000 __ram_rwdata_end
00002060 g     O .rwdata	00000008 alt_dev_list
2008d2b4 g     F .text	000000f8 write
20091134 g     F .text	000000a0 _putc_r
00000534 g       *ABS*	00000000 __ram_rodata_end
2008c9f4 g     F .text	000000b0 fstat
2008b524 g     F .text	000000e0 .hidden __ledf2
200866b4 g     F .text	00000140 __pow5mult
20087934 g     F .text	000012d0 ___vfiprintf_internal_r
00002094 g     O .bss	00000004 __nlocale_changed
2008a250 g     F .text	00000008 .hidden __umodsi3
2008f074 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor
000021f4 g       *ABS*	00000000 end
2008d618 g     F .text	000000c4 altera_avalon_jtag_uart_init
200801cc g     F .exceptions	00000074 alt_instruction_exception_entry
2009157c g       *ABS*	00000000 __CTOR_LIST__
20000000 g       *ABS*	00000000 __alt_stack_pointer
2008c7f4 g     F .text	00000064 .hidden __clzsi2
2008dce8 g     F .text	00000218 altera_avalon_jtag_uart_write
200846f4 g     F .text	00000004 __sfp_lock_acquire
20085bd0 g     F .text	000000e8 memchr
20080654 g     F .text	00001f50 ___vfprintf_internal_r
20084858 g     F .text	000002f0 _free_r
20090954 g     F .text	00000228 alt_printf
20085218 g     F .text	00000010 __locale_mb_cur_max
200913b4 g     F .text	00000194 __call_exitprocs
00002090 g     O .bss	00000004 __mlocale_changed
0000204c g     O .rwdata	00000004 __malloc_sbrk_base
20080240 g     F .text	0000004c _start
000020c0 g     O .bss	00000004 _alt_tick_rate
200867f4 g     F .text	00000150 __lshift
000020c4 g     O .bss	00000004 _alt_nticks
2008eb14 g     F .text	00000058 alt_msgdma_construct_standard_mm_to_st_descriptor
2008d058 g     F .text	000000fc read
2008d418 g     F .text	0000009c alt_sys_init
200912a0 g     F .text	00000114 __register_exitproc
200864b8 g     F .text	000001fc __multiply
2008d988 g     F .text	00000068 altera_avalon_jtag_uart_close
00000534 g       *ABS*	00000000 __ram_rwdata_start
00000000 g       *ABS*	00000000 __ram_rodata_start
000020cc g     O .bss	00000028 __malloc_current_mallinfo
20086cb8 g     F .text	0000013c __d2b
2008d4b4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
20090e90 g     F .text	000000b4 alt_get_fd
2008fed0 g     F .text	00000158 alt_busy_sleep
20088d40 g     F .text	00000054 _close_r
2008efc4 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor
200910b8 g     F .text	0000007c memcmp
2008d574 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000021f4 g       *ABS*	00000000 __alt_stack_base
2008d5c4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
2008f0cc g     F .text	000000a0 alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor
20082684 g     F .text	00000154 __swsetup_r
2008aaf4 g     F .text	000008cc .hidden __divdf3
200845b4 g     F .text	00000118 __sfp
20086f0c g     F .text	00000078 __copybits
000009d0 g     O .rwdata	00000408 __malloc_av_
20084700 g     F .text	00000004 __sinit_lock_release
2008b604 g     F .text	00000724 .hidden __muldf3
20087640 g     F .text	00000054 __sread
20090d7c g     F .text	00000114 alt_find_file
200900bc g     F .text	000000a4 alt_dev_llist_insert
2008cfc8 g     F .text	00000020 __malloc_lock
2008d1b4 g     F .text	000000b0 sbrk
20084308 g     F .text	0000005c _fflush_r
20088d94 g     F .text	000000c4 _calloc_r
00002088 g       *ABS*	00000000 __bss_start
20085f4c g     F .text	00000124 memset
2008fa88 g     F .text	00000058 alt_msgdma_open
2008030c g     F .text	0000018c main
000020b4 g     O .bss	00000004 alt_envp
00002098 g     O .bss	00000004 __malloc_max_total_mem
2008f3ac g     F .text	00000198 alt_msgdma_prefetcher_add_extended_desc_to_list
2008d514 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
200893d8 g     F .text	0000001c __swbuf
20087774 g     F .text	00000008 __sclose
20000000 g       *ABS*	00000000 __alt_heap_limit
20088f48 g     F .text	00000014 fclose
200829d8 g     F .text	00001728 _dtoa_r
2008f6b0 g     F .text	000002c0 alt_msgdma_start_prefetcher_with_list_addr
20085428 g     F .text	000007a8 _malloc_r
20089550 g     F .text	00000030 __ascii_wctomb
0000206c g     O .rwdata	00000004 alt_errno
2008f204 g     F .text	000000b8 alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor
20085008 g     F .text	000000c4 _fwalk
200911d4 g     F .text	000000cc putc
2008a198 g     F .text	00000054 .hidden __divsi3
20084734 g     F .text	00000124 _malloc_trim_r
2009157c g       *ABS*	00000000 __CTOR_END__
2008777c g     F .text	000000a4 strcmp
2009157c g       *ABS*	00000000 __flash_rodata_start
2009157c g       *ABS*	00000000 __DTOR_LIST__
2008b3c0 g     F .text	00000084 .hidden __nedf2
2008d3e4 g     F .text	00000034 alt_irq_init
2008d154 g     F .text	00000060 alt_release_fd
2008fd18 g     F .text	0000003c alt_msgdma_standard_descriptor_sync_transfer
00002088 g     O .bss	00000004 comand
000001ec g     O .rodata	00000100 .hidden __clz_tab
0000208c g     O .bss	00000004 _PathLocale
2009106c g     F .text	00000014 atexit
20088ce4 g     F .text	0000005c _write_r
20085248 g     F .text	0000001c setlocale
2008f16c g     F .text	00000098 alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor
00002044 g     O .rwdata	00000004 _impure_ptr
000020ac g     O .bss	00000004 alt_argc
20084100 g     F .text	00000208 __sflush_r
000020b8 g     O .bss	00000004 altera_avalon_timer_ts_base
200901bc g     F .text	0000005c _do_dtors
20085234 g     F .text	00000008 __locale_cjk_lang
20080020 g       .exceptions	00000000 alt_irq_entry
20086b3c g     F .text	00000060 __ulp
2008471c g     F .text	00000018 __fp_unlock_all
00000000 g       *ABS*	00000000 __alt_mem_lpddr2
00002058 g     O .rwdata	00000008 alt_fs_list
20080020 g       *ABS*	00000000 __ram_exceptions_start
20085264 g     F .text	0000000c localeconv
200902d8 g     F .text	00000050 alt_ic_isr_register
00002088 g       *ABS*	00000000 _edata
000021f4 g       *ABS*	00000000 _end
20080240 g       *ABS*	00000000 __ram_exceptions_end
2008d9f0 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
200903c8 g     F .text	000000a4 alt_ic_irq_disable
2008769c g     F .text	0000007c __swrite
00002050 g     O .rwdata	00000004 __malloc_trim_threshold
20085228 g     F .text	0000000c __locale_msgcharset
20091080 g     F .text	00000038 exit
200850cc g     F .text	000000c4 _fwalk_reent
2008f544 g     F .text	00000098 alt_msgdma_prefetcher_set_std_list_own_by_hw_bits
200869a4 g     F .text	00000198 __mdiff
2008a1ec g     F .text	0000005c .hidden __modsi3
20000000 g       *ABS*	00000000 __alt_data_end
20080020 g     F .exceptions	00000000 alt_exception
200846f8 g     F .text	00000004 __sfp_lock_release
2008ece4 g     F .text	000000a8 alt_msgdma_construct_extended_mm_to_mm_descriptor
2008ebc4 g     F .text	00000090 alt_msgdma_construct_extended_st_to_mm_descriptor
20091548 g     F .text	00000034 _exit
2008fd90 g     F .text	00000140 alt_alarm_start
20085270 g     F .text	000001b8 __smakebuf_r
00002078 g     O .rwdata	00000008 alt_msgdma_list
200805bc g     F .text	00000098 strlen
200907fc g     F .text	00000158 open
2008b444 g     F .text	000000e0 .hidden __gedf2
20090b7c g     F .text	00000044 alt_putchar
00002054 g     O .rwdata	00000004 __wctomb
2008791c g     F .text	00000018 __sprint_r
200902a8 g     F .text	00000030 alt_icache_flush_all
00002070 g     O .rwdata	00000004 alt_priority_mask
20090328 g     F .text	000000a0 alt_ic_irq_enable
200825a4 g     F .text	00000024 __vfprintf_internal
20089580 g     F .text	0000005c _wctomb_r
2008bd28 g     F .text	000008d0 .hidden __subdf3
200863cc g     F .text	000000b0 __lo0bits
00002080 g     O .rwdata	00000008 alt_alarm_list
20090160 g     F .text	0000005c _do_ctors
20089490 g     F .text	000000c0 wcrtomb
2008c8a8 g     F .text	000000d0 close
2008cdac g     F .text	00000080 alt_load
200890e0 g     F .text	0000005c fputwc
00000000  w      *UND*	00000000 free
200846fc g     F .text	00000004 __sinit_lock_acquire
20086140 g     F .text	00000120 __multadd
20086118 g     F .text	00000028 _Bfree



Disassembly of section .entry:

20080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
20080000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
20080004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
20080008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
2008000c:	00bffd16 	blt	zero,r2,20080004 <__flash_rwdata_start+0xfffee554>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
20080010:	00480234 	movhi	at,8200
    ori r1, r1, %lo(_start)
20080014:	08409014 	ori	at,at,576
    jmp r1
20080018:	0800683a 	jmp	at
2008001c:	00000000 	call	20000000 <__alt_data_end>

Disassembly of section .exceptions:

20080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
20080020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
20080024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
20080028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
2008002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
20080030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
20080034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
20080038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
2008003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
20080040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
20080044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
20080048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
2008004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
20080050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
20080054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
20080058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
2008005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
20080060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
20080064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
20080068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
2008006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
20080070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
20080074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
20080078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
2008007c:	10000326 	beq	r2,zero,2008008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
20080080:	20000226 	beq	r4,zero,2008008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
20080084:	00800fc0 	call	200800fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
20080088:	00000706 	br	200800a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
2008008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
20080090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
20080094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
20080098:	00801cc0 	call	200801cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
2008009c:	1000021e 	bne	r2,zero,200800a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
200800a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
200800a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
200800a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
200800ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
200800b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
200800b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
200800b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
200800bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
200800c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
200800c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
200800c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
200800cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
200800d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
200800d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
200800d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
200800dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
200800e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
200800e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
200800e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
200800ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
200800f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
200800f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
200800f8:	ef80083a 	eret

200800fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
200800fc:	defff904 	addi	sp,sp,-28
20080100:	dfc00615 	stw	ra,24(sp)
20080104:	df000515 	stw	fp,20(sp)
20080108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
2008010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
20080110:	0005313a 	rdctl	r2,ipending
20080114:	e0bffe15 	stw	r2,-8(fp)

  return active;
20080118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
2008011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
20080120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
20080124:	00800044 	movi	r2,1
20080128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
2008012c:	e0fffb17 	ldw	r3,-20(fp)
20080130:	e0bffc17 	ldw	r2,-16(fp)
20080134:	1884703a 	and	r2,r3,r2
20080138:	10001426 	beq	r2,zero,2008018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
2008013c:	00800034 	movhi	r2,0
20080140:	10883d04 	addi	r2,r2,8436
20080144:	e0fffd17 	ldw	r3,-12(fp)
20080148:	180690fa 	slli	r3,r3,3
2008014c:	10c5883a 	add	r2,r2,r3
20080150:	10c00017 	ldw	r3,0(r2)
20080154:	00800034 	movhi	r2,0
20080158:	10883d04 	addi	r2,r2,8436
2008015c:	e13ffd17 	ldw	r4,-12(fp)
20080160:	200890fa 	slli	r4,r4,3
20080164:	21000104 	addi	r4,r4,4
20080168:	1105883a 	add	r2,r2,r4
2008016c:	10800017 	ldw	r2,0(r2)
20080170:	1009883a 	mov	r4,r2
20080174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
20080178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
2008017c:	0005313a 	rdctl	r2,ipending
20080180:	e0bfff15 	stw	r2,-4(fp)

  return active;
20080184:	e0bfff17 	ldw	r2,-4(fp)
20080188:	00000706 	br	200801a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
2008018c:	e0bffc17 	ldw	r2,-16(fp)
20080190:	1085883a 	add	r2,r2,r2
20080194:	e0bffc15 	stw	r2,-16(fp)
      i++;
20080198:	e0bffd17 	ldw	r2,-12(fp)
2008019c:	10800044 	addi	r2,r2,1
200801a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
200801a4:	003fe106 	br	2008012c <__flash_rwdata_start+0xfffee67c>

    active = alt_irq_pending ();
200801a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
200801ac:	e0bffb17 	ldw	r2,-20(fp)
200801b0:	103fdb1e 	bne	r2,zero,20080120 <__flash_rwdata_start+0xfffee670>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
200801b4:	0001883a 	nop
}
200801b8:	e037883a 	mov	sp,fp
200801bc:	dfc00117 	ldw	ra,4(sp)
200801c0:	df000017 	ldw	fp,0(sp)
200801c4:	dec00204 	addi	sp,sp,8
200801c8:	f800283a 	ret

200801cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
200801cc:	defffb04 	addi	sp,sp,-20
200801d0:	dfc00415 	stw	ra,16(sp)
200801d4:	df000315 	stw	fp,12(sp)
200801d8:	df000304 	addi	fp,sp,12
200801dc:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
200801e0:	000531fa 	rdctl	r2,exception
200801e4:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
200801e8:	e0bffd17 	ldw	r2,-12(fp)
200801ec:	10801f0c 	andi	r2,r2,124
200801f0:	1004d0ba 	srli	r2,r2,2
200801f4:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
200801f8:	0005333a 	rdctl	r2,badaddr
200801fc:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
20080200:	d0a02217 	ldw	r2,-32632(gp)
20080204:	10000726 	beq	r2,zero,20080224 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
20080208:	d0a02217 	ldw	r2,-32632(gp)
2008020c:	e0fffd17 	ldw	r3,-12(fp)
20080210:	1809883a 	mov	r4,r3
20080214:	e17fff17 	ldw	r5,-4(fp)
20080218:	e1bffe17 	ldw	r6,-8(fp)
2008021c:	103ee83a 	callr	r2
20080220:	00000206 	br	2008022c <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
20080224:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
20080228:	0005883a 	mov	r2,zero
}
2008022c:	e037883a 	mov	sp,fp
20080230:	dfc00117 	ldw	ra,4(sp)
20080234:	df000017 	ldw	fp,0(sp)
20080238:	dec00204 	addi	sp,sp,8
2008023c:	f800283a 	ret

Disassembly of section .text:

20080240 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
20080240:	00900014 	movui	r2,16384
#endif

0:
    initd 0(r2)
20080244:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
20080248:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
2008024c:	00bffd16 	blt	zero,r2,20080244 <__flash_rwdata_start+0xfffee794>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
20080250:	06c80034 	movhi	sp,8192
    ori sp, sp, %lo(__alt_stack_pointer)
20080254:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
20080258:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
2008025c:	d6a81014 	ori	gp,gp,41024
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
20080260:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
20080264:	10882214 	ori	r2,r2,8328

    movhi r3, %hi(__bss_end)
20080268:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
2008026c:	18c87d14 	ori	r3,r3,8692

    beq r2, r3, 1f
20080270:	10c00326 	beq	r2,r3,20080280 <_start+0x40>

0:
    stw zero, (r2)
20080274:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
20080278:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
2008027c:	10fffd36 	bltu	r2,r3,20080274 <__flash_rwdata_start+0xfffee7c4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
20080280:	008cdac0 	call	2008cdac <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
20080284:	008cf500 	call	2008cf50 <alt_main>

20080288 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
20080288:	003fff06 	br	20080288 <__flash_rwdata_start+0xfffee7d8>

2008028c <timer1_isr>:
#include "altera_avalon_pio_regs.h"

volatile alt_u32 comand = 0;

static void timer1_isr(void *context)
{
2008028c:	defffe04 	addi	sp,sp,-8
20080290:	df000115 	stw	fp,4(sp)
20080294:	df000104 	addi	fp,sp,4
20080298:	e13fff15 	stw	r4,-4(fp)
	//ack interupt
	IOWR(TIMER_1_BASE, 0, 0);
2008029c:	0007883a 	mov	r3,zero
200802a0:	00880434 	movhi	r2,8208
200802a4:	10850004 	addi	r2,r2,5120
200802a8:	10c00035 	stwio	r3,0(r2)

    comand = IORD(KEY_BASE, 0);
200802ac:	00880434 	movhi	r2,8208
200802b0:	10853c04 	addi	r2,r2,5360
200802b4:	10800037 	ldwio	r2,0(r2)
200802b8:	d0a01215 	stw	r2,-32696(gp)
}
200802bc:	e037883a 	mov	sp,fp
200802c0:	df000017 	ldw	fp,0(sp)
200802c4:	dec00104 	addi	sp,sp,4
200802c8:	f800283a 	ret

200802cc <pio_isr>:

static void pio_isr(void *context)
{
200802cc:	defffe04 	addi	sp,sp,-8
200802d0:	df000115 	stw	fp,4(sp)
200802d4:	df000104 	addi	fp,sp,4
200802d8:	e13fff15 	stw	r4,-4(fp)
	//ack interupt
    IOWR(KEY_BASE, 3, 0);
200802dc:	0007883a 	mov	r3,zero
200802e0:	00880434 	movhi	r2,8208
200802e4:	10853f04 	addi	r2,r2,5372
200802e8:	10c00035 	stwio	r3,0(r2)

    comand = IORD(KEY_BASE, 0);
200802ec:	00880434 	movhi	r2,8208
200802f0:	10853c04 	addi	r2,r2,5360
200802f4:	10800037 	ldwio	r2,0(r2)
200802f8:	d0a01215 	stw	r2,-32696(gp)
}
200802fc:	e037883a 	mov	sp,fp
20080300:	df000017 	ldw	fp,0(sp)
20080304:	dec00104 	addi	sp,sp,4
20080308:	f800283a 	ret

2008030c <main>:

int main(void)
{
2008030c:	defff504 	addi	sp,sp,-44
20080310:	dfc00a15 	stw	ra,40(sp)
20080314:	df000915 	stw	fp,36(sp)
20080318:	df000904 	addi	fp,sp,36
  printf("Hello Japan!\n");
2008031c:	01000034 	movhi	r4,0
20080320:	21000004 	addi	r4,r4,0
20080324:	00805a80 	call	200805a8 <puts>

  IOWR(KEY_BASE, 2, 0xF); // interupt on all buttons
20080328:	00c003c4 	movi	r3,15
2008032c:	00880434 	movhi	r2,8208
20080330:	10853e04 	addi	r2,r2,5368
20080334:	10c00035 	stwio	r3,0(r2)
  alt_irq_register(KEY_IRQ, (void *)0, pio_isr);
20080338:	01000084 	movi	r4,2
2008033c:	000b883a 	mov	r5,zero
20080340:	01880234 	movhi	r6,8200
20080344:	3180b304 	addi	r6,r6,716
20080348:	008caa40 	call	2008caa4 <alt_irq_register>
2008034c:	00800084 	movi	r2,2
20080350:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20080354:	0005303a 	rdctl	r2,status
20080358:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2008035c:	e0fff917 	ldw	r3,-28(fp)
20080360:	00bfff84 	movi	r2,-2
20080364:	1884703a 	and	r2,r3,r2
20080368:	1001703a 	wrctl	status,r2
  
  return context;
2008036c:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
20080370:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active |= (1 << id);
20080374:	e0bff817 	ldw	r2,-32(fp)
20080378:	00c00044 	movi	r3,1
2008037c:	1884983a 	sll	r2,r3,r2
20080380:	1007883a 	mov	r3,r2
20080384:	00800034 	movhi	r2,0
20080388:	10882a04 	addi	r2,r2,8360
2008038c:	10800017 	ldw	r2,0(r2)
20080390:	1886b03a 	or	r3,r3,r2
20080394:	00800034 	movhi	r2,0
20080398:	10882a04 	addi	r2,r2,8360
2008039c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
200803a0:	00800034 	movhi	r2,0
200803a4:	10882a04 	addi	r2,r2,8360
200803a8:	10800017 	ldw	r2,0(r2)
200803ac:	100170fa 	wrctl	ienable,r2
200803b0:	e0bffa17 	ldw	r2,-24(fp)
200803b4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200803b8:	e0bffb17 	ldw	r2,-20(fp)
200803bc:	1001703a 	wrctl	status,r2
  alt_irq_enable(KEY_IRQ);

  // Period
  IOWR(TIMER_1_BASE, 3, 0xFEE6);
200803c0:	00ffb994 	movui	r3,65254
200803c4:	00880434 	movhi	r2,8208
200803c8:	10850304 	addi	r2,r2,5132
200803cc:	10c00035 	stwio	r3,0(r2)
  IOWR(TIMER_1_BASE, 2, 0xB280);
200803d0:	00eca014 	movui	r3,45696
200803d4:	00880434 	movhi	r2,8208
200803d8:	10850204 	addi	r2,r2,5128
200803dc:	10c00035 	stwio	r3,0(r2)
 //                      START   CONT   ITO
  IOWR(TIMER_1_BASE, 1, (1<<2) |(1<<1) | 1 );
200803e0:	00c001c4 	movi	r3,7
200803e4:	00880434 	movhi	r2,8208
200803e8:	10850104 	addi	r2,r2,5124
200803ec:	10c00035 	stwio	r3,0(r2)

  alt_irq_register(TIMER_1_IRQ, (void *)0, timer1_isr);
200803f0:	01000104 	movi	r4,4
200803f4:	000b883a 	mov	r5,zero
200803f8:	01880234 	movhi	r6,8200
200803fc:	3180a304 	addi	r6,r6,652
20080400:	008caa40 	call	2008caa4 <alt_irq_register>
20080404:	00800104 	movi	r2,4
20080408:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2008040c:	0005303a 	rdctl	r2,status
20080410:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20080414:	e0fffd17 	ldw	r3,-12(fp)
20080418:	00bfff84 	movi	r2,-2
2008041c:	1884703a 	and	r2,r3,r2
20080420:	1001703a 	wrctl	status,r2
  
  return context;
20080424:	e0bffd17 	ldw	r2,-12(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
20080428:	e0bffe15 	stw	r2,-8(fp)

  alt_irq_active |= (1 << id);
2008042c:	e0bffc17 	ldw	r2,-16(fp)
20080430:	00c00044 	movi	r3,1
20080434:	1884983a 	sll	r2,r3,r2
20080438:	1007883a 	mov	r3,r2
2008043c:	00800034 	movhi	r2,0
20080440:	10882a04 	addi	r2,r2,8360
20080444:	10800017 	ldw	r2,0(r2)
20080448:	1886b03a 	or	r3,r3,r2
2008044c:	00800034 	movhi	r2,0
20080450:	10882a04 	addi	r2,r2,8360
20080454:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
20080458:	00800034 	movhi	r2,0
2008045c:	10882a04 	addi	r2,r2,8360
20080460:	10800017 	ldw	r2,0(r2)
20080464:	100170fa 	wrctl	ienable,r2
20080468:	e0bffe17 	ldw	r2,-8(fp)
2008046c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20080470:	e0bfff17 	ldw	r2,-4(fp)
20080474:	1001703a 	wrctl	status,r2
  alt_irq_enable(TIMER_1_IRQ);

  while(1)
  {
		printf("Command is %d \n", comand);
20080478:	d0a01217 	ldw	r2,-32696(gp)
2008047c:	01000034 	movhi	r4,0
20080480:	21000404 	addi	r4,r4,16
20080484:	100b883a 	mov	r5,r2
20080488:	00804c40 	call	200804c4 <printf>
			}
			// Please don't optimize me out!!!
		}*/
		while(1)
		{
		    int k = comand;
2008048c:	d0a01217 	ldw	r2,-32696(gp)
20080490:	e0bff715 	stw	r2,-36(fp)
		}
20080494:	003ffd06 	br	2008048c <__flash_rwdata_start+0xfffee9dc>

20080498 <_printf_r>:
20080498:	defffd04 	addi	sp,sp,-12
2008049c:	dfc00015 	stw	ra,0(sp)
200804a0:	d9800115 	stw	r6,4(sp)
200804a4:	d9c00215 	stw	r7,8(sp)
200804a8:	280d883a 	mov	r6,r5
200804ac:	21400217 	ldw	r5,8(r4)
200804b0:	d9c00104 	addi	r7,sp,4
200804b4:	00806540 	call	20080654 <___vfprintf_internal_r>
200804b8:	dfc00017 	ldw	ra,0(sp)
200804bc:	dec00304 	addi	sp,sp,12
200804c0:	f800283a 	ret

200804c4 <printf>:
200804c4:	defffc04 	addi	sp,sp,-16
200804c8:	dfc00015 	stw	ra,0(sp)
200804cc:	d9400115 	stw	r5,4(sp)
200804d0:	d9800215 	stw	r6,8(sp)
200804d4:	d9c00315 	stw	r7,12(sp)
200804d8:	00800034 	movhi	r2,0
200804dc:	10881104 	addi	r2,r2,8260
200804e0:	10800017 	ldw	r2,0(r2)
200804e4:	200b883a 	mov	r5,r4
200804e8:	d9800104 	addi	r6,sp,4
200804ec:	11000217 	ldw	r4,8(r2)
200804f0:	00825a40 	call	200825a4 <__vfprintf_internal>
200804f4:	dfc00017 	ldw	ra,0(sp)
200804f8:	dec00404 	addi	sp,sp,16
200804fc:	f800283a 	ret

20080500 <_puts_r>:
20080500:	defff604 	addi	sp,sp,-40
20080504:	dc000715 	stw	r16,28(sp)
20080508:	2021883a 	mov	r16,r4
2008050c:	2809883a 	mov	r4,r5
20080510:	dc400815 	stw	r17,32(sp)
20080514:	dfc00915 	stw	ra,36(sp)
20080518:	2823883a 	mov	r17,r5
2008051c:	00805bc0 	call	200805bc <strlen>
20080520:	81400217 	ldw	r5,8(r16)
20080524:	11000044 	addi	r4,r2,1
20080528:	d8800115 	stw	r2,4(sp)
2008052c:	00800034 	movhi	r2,0
20080530:	2980030b 	ldhu	r6,12(r5)
20080534:	10800804 	addi	r2,r2,32
20080538:	d8800215 	stw	r2,8(sp)
2008053c:	00800044 	movi	r2,1
20080540:	d8800315 	stw	r2,12(sp)
20080544:	00800084 	movi	r2,2
20080548:	d8800515 	stw	r2,20(sp)
2008054c:	dc400015 	stw	r17,0(sp)
20080550:	d9000615 	stw	r4,24(sp)
20080554:	dec00415 	stw	sp,16(sp)
20080558:	3088000c 	andi	r2,r6,8192
2008055c:	1000061e 	bne	r2,zero,20080578 <_puts_r+0x78>
20080560:	29001917 	ldw	r4,100(r5)
20080564:	00b7ffc4 	movi	r2,-8193
20080568:	31880014 	ori	r6,r6,8192
2008056c:	2084703a 	and	r2,r4,r2
20080570:	2980030d 	sth	r6,12(r5)
20080574:	28801915 	stw	r2,100(r5)
20080578:	8009883a 	mov	r4,r16
2008057c:	d9800404 	addi	r6,sp,16
20080580:	0084b480 	call	20084b48 <__sfvwrite_r>
20080584:	1000061e 	bne	r2,zero,200805a0 <_puts_r+0xa0>
20080588:	00800284 	movi	r2,10
2008058c:	dfc00917 	ldw	ra,36(sp)
20080590:	dc400817 	ldw	r17,32(sp)
20080594:	dc000717 	ldw	r16,28(sp)
20080598:	dec00a04 	addi	sp,sp,40
2008059c:	f800283a 	ret
200805a0:	00bfffc4 	movi	r2,-1
200805a4:	003ff906 	br	2008058c <__flash_rwdata_start+0xfffeeadc>

200805a8 <puts>:
200805a8:	00800034 	movhi	r2,0
200805ac:	10881104 	addi	r2,r2,8260
200805b0:	200b883a 	mov	r5,r4
200805b4:	11000017 	ldw	r4,0(r2)
200805b8:	00805001 	jmpi	20080500 <_puts_r>

200805bc <strlen>:
200805bc:	208000cc 	andi	r2,r4,3
200805c0:	10002026 	beq	r2,zero,20080644 <strlen+0x88>
200805c4:	20800007 	ldb	r2,0(r4)
200805c8:	10002026 	beq	r2,zero,2008064c <strlen+0x90>
200805cc:	2005883a 	mov	r2,r4
200805d0:	00000206 	br	200805dc <strlen+0x20>
200805d4:	10c00007 	ldb	r3,0(r2)
200805d8:	18001826 	beq	r3,zero,2008063c <strlen+0x80>
200805dc:	10800044 	addi	r2,r2,1
200805e0:	10c000cc 	andi	r3,r2,3
200805e4:	183ffb1e 	bne	r3,zero,200805d4 <__flash_rwdata_start+0xfffeeb24>
200805e8:	10c00017 	ldw	r3,0(r2)
200805ec:	01ffbff4 	movhi	r7,65279
200805f0:	39ffbfc4 	addi	r7,r7,-257
200805f4:	00ca303a 	nor	r5,zero,r3
200805f8:	01a02074 	movhi	r6,32897
200805fc:	19c7883a 	add	r3,r3,r7
20080600:	31a02004 	addi	r6,r6,-32640
20080604:	1946703a 	and	r3,r3,r5
20080608:	1986703a 	and	r3,r3,r6
2008060c:	1800091e 	bne	r3,zero,20080634 <strlen+0x78>
20080610:	10800104 	addi	r2,r2,4
20080614:	10c00017 	ldw	r3,0(r2)
20080618:	19cb883a 	add	r5,r3,r7
2008061c:	00c6303a 	nor	r3,zero,r3
20080620:	28c6703a 	and	r3,r5,r3
20080624:	1986703a 	and	r3,r3,r6
20080628:	183ff926 	beq	r3,zero,20080610 <__flash_rwdata_start+0xfffeeb60>
2008062c:	00000106 	br	20080634 <strlen+0x78>
20080630:	10800044 	addi	r2,r2,1
20080634:	10c00007 	ldb	r3,0(r2)
20080638:	183ffd1e 	bne	r3,zero,20080630 <__flash_rwdata_start+0xfffeeb80>
2008063c:	1105c83a 	sub	r2,r2,r4
20080640:	f800283a 	ret
20080644:	2005883a 	mov	r2,r4
20080648:	003fe706 	br	200805e8 <__flash_rwdata_start+0xfffeeb38>
2008064c:	0005883a 	mov	r2,zero
20080650:	f800283a 	ret

20080654 <___vfprintf_internal_r>:
20080654:	deffb604 	addi	sp,sp,-296
20080658:	dfc04915 	stw	ra,292(sp)
2008065c:	ddc04715 	stw	r23,284(sp)
20080660:	dd804615 	stw	r22,280(sp)
20080664:	282f883a 	mov	r23,r5
20080668:	202d883a 	mov	r22,r4
2008066c:	d9802a15 	stw	r6,168(sp)
20080670:	d9c02d15 	stw	r7,180(sp)
20080674:	df004815 	stw	fp,288(sp)
20080678:	dd404515 	stw	r21,276(sp)
2008067c:	dd004415 	stw	r20,272(sp)
20080680:	dcc04315 	stw	r19,268(sp)
20080684:	dc804215 	stw	r18,264(sp)
20080688:	dc404115 	stw	r17,260(sp)
2008068c:	dc004015 	stw	r16,256(sp)
20080690:	008523c0 	call	2008523c <_localeconv_r>
20080694:	10800017 	ldw	r2,0(r2)
20080698:	1009883a 	mov	r4,r2
2008069c:	d8803515 	stw	r2,212(sp)
200806a0:	00805bc0 	call	200805bc <strlen>
200806a4:	d8803815 	stw	r2,224(sp)
200806a8:	b0000226 	beq	r22,zero,200806b4 <___vfprintf_internal_r+0x60>
200806ac:	b0800e17 	ldw	r2,56(r22)
200806b0:	1000e126 	beq	r2,zero,20080a38 <___vfprintf_internal_r+0x3e4>
200806b4:	b880030b 	ldhu	r2,12(r23)
200806b8:	10c8000c 	andi	r3,r2,8192
200806bc:	1800061e 	bne	r3,zero,200806d8 <___vfprintf_internal_r+0x84>
200806c0:	b9001917 	ldw	r4,100(r23)
200806c4:	00f7ffc4 	movi	r3,-8193
200806c8:	10880014 	ori	r2,r2,8192
200806cc:	20c6703a 	and	r3,r4,r3
200806d0:	b880030d 	sth	r2,12(r23)
200806d4:	b8c01915 	stw	r3,100(r23)
200806d8:	10c0020c 	andi	r3,r2,8
200806dc:	1800a726 	beq	r3,zero,2008097c <___vfprintf_internal_r+0x328>
200806e0:	b8c00417 	ldw	r3,16(r23)
200806e4:	1800a526 	beq	r3,zero,2008097c <___vfprintf_internal_r+0x328>
200806e8:	1080068c 	andi	r2,r2,26
200806ec:	00c00284 	movi	r3,10
200806f0:	10c0aa26 	beq	r2,r3,2008099c <___vfprintf_internal_r+0x348>
200806f4:	dac01e04 	addi	r11,sp,120
200806f8:	db001dc4 	addi	r12,sp,119
200806fc:	d8800404 	addi	r2,sp,16
20080700:	05000034 	movhi	r20,0
20080704:	dac02815 	stw	r11,160(sp)
20080708:	5b17c83a 	sub	r11,r11,r12
2008070c:	a5001984 	addi	r20,r20,102
20080710:	db002915 	stw	r12,164(sp)
20080714:	d8801e15 	stw	r2,120(sp)
20080718:	d8002015 	stw	zero,128(sp)
2008071c:	d8001f15 	stw	zero,124(sp)
20080720:	d8003315 	stw	zero,204(sp)
20080724:	d8003715 	stw	zero,220(sp)
20080728:	d8003915 	stw	zero,228(sp)
2008072c:	1011883a 	mov	r8,r2
20080730:	d8003b15 	stw	zero,236(sp)
20080734:	d8003a15 	stw	zero,232(sp)
20080738:	d8002f15 	stw	zero,188(sp)
2008073c:	dac03c15 	stw	r11,240(sp)
20080740:	db002a17 	ldw	r12,168(sp)
20080744:	60800007 	ldb	r2,0(r12)
20080748:	1000be26 	beq	r2,zero,20080a44 <___vfprintf_internal_r+0x3f0>
2008074c:	00c00944 	movi	r3,37
20080750:	10c0bc26 	beq	r2,r3,20080a44 <___vfprintf_internal_r+0x3f0>
20080754:	6021883a 	mov	r16,r12
20080758:	00000106 	br	20080760 <___vfprintf_internal_r+0x10c>
2008075c:	10c08426 	beq	r2,r3,20080970 <___vfprintf_internal_r+0x31c>
20080760:	84000044 	addi	r16,r16,1
20080764:	80800007 	ldb	r2,0(r16)
20080768:	103ffc1e 	bne	r2,zero,2008075c <__flash_rwdata_start+0xfffeecac>
2008076c:	dac02a17 	ldw	r11,168(sp)
20080770:	82e3c83a 	sub	r17,r16,r11
20080774:	88000f26 	beq	r17,zero,200807b4 <___vfprintf_internal_r+0x160>
20080778:	d8c02017 	ldw	r3,128(sp)
2008077c:	d8801f17 	ldw	r2,124(sp)
20080780:	dac02a17 	ldw	r11,168(sp)
20080784:	1c47883a 	add	r3,r3,r17
20080788:	10800044 	addi	r2,r2,1
2008078c:	d8c02015 	stw	r3,128(sp)
20080790:	42c00015 	stw	r11,0(r8)
20080794:	44400115 	stw	r17,4(r8)
20080798:	d8801f15 	stw	r2,124(sp)
2008079c:	00c001c4 	movi	r3,7
200807a0:	18809316 	blt	r3,r2,200809f0 <___vfprintf_internal_r+0x39c>
200807a4:	42000204 	addi	r8,r8,8
200807a8:	db002f17 	ldw	r12,188(sp)
200807ac:	6459883a 	add	r12,r12,r17
200807b0:	db002f15 	stw	r12,188(sp)
200807b4:	80800007 	ldb	r2,0(r16)
200807b8:	10009426 	beq	r2,zero,20080a0c <___vfprintf_internal_r+0x3b8>
200807bc:	80800044 	addi	r2,r16,1
200807c0:	84000047 	ldb	r16,1(r16)
200807c4:	d8002785 	stb	zero,158(sp)
200807c8:	000d883a 	mov	r6,zero
200807cc:	027fffc4 	movi	r9,-1
200807d0:	d8002e15 	stw	zero,184(sp)
200807d4:	0023883a 	mov	r17,zero
200807d8:	01001604 	movi	r4,88
200807dc:	01400244 	movi	r5,9
200807e0:	02800a84 	movi	r10,42
200807e4:	01c01b04 	movi	r7,108
200807e8:	10c00044 	addi	r3,r2,1
200807ec:	80bff804 	addi	r2,r16,-32
200807f0:	2082cd36 	bltu	r4,r2,20081328 <___vfprintf_internal_r+0xcd4>
200807f4:	100490ba 	slli	r2,r2,2
200807f8:	02c80234 	movhi	r11,8200
200807fc:	5ac20304 	addi	r11,r11,2060
20080800:	12c5883a 	add	r2,r2,r11
20080804:	10800017 	ldw	r2,0(r2)
20080808:	1000683a 	jmp	r2
2008080c:	20081140 	call	22008114 <__flash_rwdata_start+0x1f76664>
20080810:	20081328 	cmpgeui	zero,r4,8268
20080814:	20081328 	cmpgeui	zero,r4,8268
20080818:	20081290 	cmplti	zero,r4,8266
2008081c:	20081328 	cmpgeui	zero,r4,8268
20080820:	20081328 	cmpgeui	zero,r4,8268
20080824:	20081328 	cmpgeui	zero,r4,8268
20080828:	20081328 	cmpgeui	zero,r4,8268
2008082c:	20081328 	cmpgeui	zero,r4,8268
20080830:	20081328 	cmpgeui	zero,r4,8268
20080834:	20081160 	cmpeqi	zero,r4,8261
20080838:	2008118c 	andi	zero,r4,8262
2008083c:	20081328 	cmpgeui	zero,r4,8268
20080840:	20080a4c 	andi	zero,r4,8233
20080844:	20080a5c 	xori	zero,r4,8233
20080848:	20081328 	cmpgeui	zero,r4,8268
2008084c:	20080a9c 	xori	zero,r4,8234
20080850:	20080aac 	andhi	zero,r4,8234
20080854:	20080aac 	andhi	zero,r4,8234
20080858:	20080aac 	andhi	zero,r4,8234
2008085c:	20080aac 	andhi	zero,r4,8234
20080860:	20080aac 	andhi	zero,r4,8234
20080864:	20080aac 	andhi	zero,r4,8234
20080868:	20080aac 	andhi	zero,r4,8234
2008086c:	20080aac 	andhi	zero,r4,8234
20080870:	20080aac 	andhi	zero,r4,8234
20080874:	20081328 	cmpgeui	zero,r4,8268
20080878:	20081328 	cmpgeui	zero,r4,8268
2008087c:	20081328 	cmpgeui	zero,r4,8268
20080880:	20081328 	cmpgeui	zero,r4,8268
20080884:	20081328 	cmpgeui	zero,r4,8268
20080888:	20081328 	cmpgeui	zero,r4,8268
2008088c:	20081328 	cmpgeui	zero,r4,8268
20080890:	20081328 	cmpgeui	zero,r4,8268
20080894:	20081328 	cmpgeui	zero,r4,8268
20080898:	20081328 	cmpgeui	zero,r4,8268
2008089c:	20080ae0 	cmpeqi	zero,r4,8235
200808a0:	20080f50 	cmplti	zero,r4,8253
200808a4:	20081328 	cmpgeui	zero,r4,8268
200808a8:	20080f50 	cmplti	zero,r4,8253
200808ac:	20081328 	cmpgeui	zero,r4,8268
200808b0:	20081328 	cmpgeui	zero,r4,8268
200808b4:	20081328 	cmpgeui	zero,r4,8268
200808b8:	20081328 	cmpgeui	zero,r4,8268
200808bc:	2008103c 	xorhi	zero,r4,8256
200808c0:	20081328 	cmpgeui	zero,r4,8268
200808c4:	20081328 	cmpgeui	zero,r4,8268
200808c8:	20080ee4 	muli	zero,r4,8251
200808cc:	20081328 	cmpgeui	zero,r4,8268
200808d0:	20081328 	cmpgeui	zero,r4,8268
200808d4:	20081328 	cmpgeui	zero,r4,8268
200808d8:	20081328 	cmpgeui	zero,r4,8268
200808dc:	20081328 	cmpgeui	zero,r4,8268
200808e0:	20080f20 	cmpeqi	zero,r4,8252
200808e4:	20081328 	cmpgeui	zero,r4,8268
200808e8:	20081328 	cmpgeui	zero,r4,8268
200808ec:	200810e4 	muli	zero,r4,8259
200808f0:	20081328 	cmpgeui	zero,r4,8268
200808f4:	20081328 	cmpgeui	zero,r4,8268
200808f8:	20081328 	cmpgeui	zero,r4,8268
200808fc:	20081328 	cmpgeui	zero,r4,8268
20080900:	20081328 	cmpgeui	zero,r4,8268
20080904:	20081328 	cmpgeui	zero,r4,8268
20080908:	20081328 	cmpgeui	zero,r4,8268
2008090c:	20081328 	cmpgeui	zero,r4,8268
20080910:	20081328 	cmpgeui	zero,r4,8268
20080914:	20081328 	cmpgeui	zero,r4,8268
20080918:	2008119c 	xori	zero,r4,8262
2008091c:	2008104c 	andi	zero,r4,8257
20080920:	20080f50 	cmplti	zero,r4,8253
20080924:	20080f50 	cmplti	zero,r4,8253
20080928:	20080f50 	cmplti	zero,r4,8253
2008092c:	2008108c 	andi	zero,r4,8258
20080930:	2008104c 	andi	zero,r4,8257
20080934:	20081328 	cmpgeui	zero,r4,8268
20080938:	20081328 	cmpgeui	zero,r4,8268
2008093c:	2008109c 	xori	zero,r4,8258
20080940:	20081328 	cmpgeui	zero,r4,8268
20080944:	200810b0 	cmpltui	zero,r4,8258
20080948:	200812ec 	andhi	zero,r4,8267
2008094c:	20080ff4 	orhi	zero,r4,8255
20080950:	200812a0 	cmpeqi	zero,r4,8266
20080954:	20081328 	cmpgeui	zero,r4,8268
20080958:	200811dc 	xori	zero,r4,8263
2008095c:	20081328 	cmpgeui	zero,r4,8268
20080960:	200812b0 	cmpltui	zero,r4,8266
20080964:	20081328 	cmpgeui	zero,r4,8268
20080968:	20081328 	cmpgeui	zero,r4,8268
2008096c:	20081250 	cmplti	zero,r4,8265
20080970:	db002a17 	ldw	r12,168(sp)
20080974:	8323c83a 	sub	r17,r16,r12
20080978:	003f7e06 	br	20080774 <__flash_rwdata_start+0xfffeecc4>
2008097c:	b009883a 	mov	r4,r22
20080980:	b80b883a 	mov	r5,r23
20080984:	00826840 	call	20082684 <__swsetup_r>
20080988:	10000c1e 	bne	r2,zero,200809bc <___vfprintf_internal_r+0x368>
2008098c:	b880030b 	ldhu	r2,12(r23)
20080990:	00c00284 	movi	r3,10
20080994:	1080068c 	andi	r2,r2,26
20080998:	10ff561e 	bne	r2,r3,200806f4 <__flash_rwdata_start+0xfffeec44>
2008099c:	b880038f 	ldh	r2,14(r23)
200809a0:	103f5416 	blt	r2,zero,200806f4 <__flash_rwdata_start+0xfffeec44>
200809a4:	d9802a17 	ldw	r6,168(sp)
200809a8:	d9c02d17 	ldw	r7,180(sp)
200809ac:	b009883a 	mov	r4,r22
200809b0:	b80b883a 	mov	r5,r23
200809b4:	00825c80 	call	200825c8 <__sbprintf>
200809b8:	00000106 	br	200809c0 <___vfprintf_internal_r+0x36c>
200809bc:	00bfffc4 	movi	r2,-1
200809c0:	dfc04917 	ldw	ra,292(sp)
200809c4:	df004817 	ldw	fp,288(sp)
200809c8:	ddc04717 	ldw	r23,284(sp)
200809cc:	dd804617 	ldw	r22,280(sp)
200809d0:	dd404517 	ldw	r21,276(sp)
200809d4:	dd004417 	ldw	r20,272(sp)
200809d8:	dcc04317 	ldw	r19,268(sp)
200809dc:	dc804217 	ldw	r18,264(sp)
200809e0:	dc404117 	ldw	r17,260(sp)
200809e4:	dc004017 	ldw	r16,256(sp)
200809e8:	dec04a04 	addi	sp,sp,296
200809ec:	f800283a 	ret
200809f0:	b009883a 	mov	r4,r22
200809f4:	b80b883a 	mov	r5,r23
200809f8:	d9801e04 	addi	r6,sp,120
200809fc:	008791c0 	call	2008791c <__sprint_r>
20080a00:	1000081e 	bne	r2,zero,20080a24 <___vfprintf_internal_r+0x3d0>
20080a04:	da000404 	addi	r8,sp,16
20080a08:	003f6706 	br	200807a8 <__flash_rwdata_start+0xfffeecf8>
20080a0c:	d8802017 	ldw	r2,128(sp)
20080a10:	10000426 	beq	r2,zero,20080a24 <___vfprintf_internal_r+0x3d0>
20080a14:	b009883a 	mov	r4,r22
20080a18:	b80b883a 	mov	r5,r23
20080a1c:	d9801e04 	addi	r6,sp,120
20080a20:	008791c0 	call	2008791c <__sprint_r>
20080a24:	b880030b 	ldhu	r2,12(r23)
20080a28:	1080100c 	andi	r2,r2,64
20080a2c:	103fe31e 	bne	r2,zero,200809bc <__flash_rwdata_start+0xfffeef0c>
20080a30:	d8802f17 	ldw	r2,188(sp)
20080a34:	003fe206 	br	200809c0 <__flash_rwdata_start+0xfffeef10>
20080a38:	b009883a 	mov	r4,r22
20080a3c:	00846e40 	call	200846e4 <__sinit>
20080a40:	003f1c06 	br	200806b4 <__flash_rwdata_start+0xfffeec04>
20080a44:	dc002a17 	ldw	r16,168(sp)
20080a48:	003f5a06 	br	200807b4 <__flash_rwdata_start+0xfffeed04>
20080a4c:	1805883a 	mov	r2,r3
20080a50:	8c400114 	ori	r17,r17,4
20080a54:	1c000007 	ldb	r16,0(r3)
20080a58:	003f6306 	br	200807e8 <__flash_rwdata_start+0xfffeed38>
20080a5c:	1c000007 	ldb	r16,0(r3)
20080a60:	18800044 	addi	r2,r3,1
20080a64:	8286ad26 	beq	r16,r10,2008251c <___vfprintf_internal_r+0x1ec8>
20080a68:	82fff404 	addi	r11,r16,-48
20080a6c:	1007883a 	mov	r3,r2
20080a70:	0013883a 	mov	r9,zero
20080a74:	2aff5d36 	bltu	r5,r11,200807ec <__flash_rwdata_start+0xfffeed3c>
20080a78:	1c000007 	ldb	r16,0(r3)
20080a7c:	4a4002a4 	muli	r9,r9,10
20080a80:	18c00044 	addi	r3,r3,1
20080a84:	5a53883a 	add	r9,r11,r9
20080a88:	82fff404 	addi	r11,r16,-48
20080a8c:	2afffa2e 	bgeu	r5,r11,20080a78 <__flash_rwdata_start+0xfffeefc8>
20080a90:	483f560e 	bge	r9,zero,200807ec <__flash_rwdata_start+0xfffeed3c>
20080a94:	027fffc4 	movi	r9,-1
20080a98:	003f5406 	br	200807ec <__flash_rwdata_start+0xfffeed3c>
20080a9c:	8c402014 	ori	r17,r17,128
20080aa0:	1805883a 	mov	r2,r3
20080aa4:	1c000007 	ldb	r16,0(r3)
20080aa8:	003f4f06 	br	200807e8 <__flash_rwdata_start+0xfffeed38>
20080aac:	1805883a 	mov	r2,r3
20080ab0:	d8002e15 	stw	zero,184(sp)
20080ab4:	82fff404 	addi	r11,r16,-48
20080ab8:	0019883a 	mov	r12,zero
20080abc:	14000007 	ldb	r16,0(r2)
20080ac0:	630002a4 	muli	r12,r12,10
20080ac4:	18c00044 	addi	r3,r3,1
20080ac8:	1805883a 	mov	r2,r3
20080acc:	62d9883a 	add	r12,r12,r11
20080ad0:	82fff404 	addi	r11,r16,-48
20080ad4:	2afff92e 	bgeu	r5,r11,20080abc <__flash_rwdata_start+0xfffef00c>
20080ad8:	db002e15 	stw	r12,184(sp)
20080adc:	003f4306 	br	200807ec <__flash_rwdata_start+0xfffeed3c>
20080ae0:	8c400414 	ori	r17,r17,16
20080ae4:	d8c02a15 	stw	r3,168(sp)
20080ae8:	d9802785 	stb	r6,158(sp)
20080aec:	8880080c 	andi	r2,r17,32
20080af0:	d8c02d17 	ldw	r3,180(sp)
20080af4:	10015a26 	beq	r2,zero,20081060 <___vfprintf_internal_r+0xa0c>
20080af8:	db002d17 	ldw	r12,180(sp)
20080afc:	18800117 	ldw	r2,4(r3)
20080b00:	1cc00017 	ldw	r19,0(r3)
20080b04:	63000204 	addi	r12,r12,8
20080b08:	db002d15 	stw	r12,180(sp)
20080b0c:	1039883a 	mov	fp,r2
20080b10:	10044516 	blt	r2,zero,20081c28 <___vfprintf_internal_r+0x15d4>
20080b14:	dd402783 	ldbu	r21,158(sp)
20080b18:	da403215 	stw	r9,200(sp)
20080b1c:	00800044 	movi	r2,1
20080b20:	9f06b03a 	or	r3,r19,fp
20080b24:	48000216 	blt	r9,zero,20080b30 <___vfprintf_internal_r+0x4dc>
20080b28:	013fdfc4 	movi	r4,-129
20080b2c:	8922703a 	and	r17,r17,r4
20080b30:	1802071e 	bne	r3,zero,20081350 <___vfprintf_internal_r+0xcfc>
20080b34:	4802fa26 	beq	r9,zero,20081720 <___vfprintf_internal_r+0x10cc>
20080b38:	10803fcc 	andi	r2,r2,255
20080b3c:	00c00044 	movi	r3,1
20080b40:	10c22926 	beq	r2,r3,200813e8 <___vfprintf_internal_r+0xd94>
20080b44:	00c00084 	movi	r3,2
20080b48:	10c31726 	beq	r2,r3,200817a8 <___vfprintf_internal_r+0x1154>
20080b4c:	d8c01e04 	addi	r3,sp,120
20080b50:	9808d0fa 	srli	r4,r19,3
20080b54:	e00a977a 	slli	r5,fp,29
20080b58:	e038d0fa 	srli	fp,fp,3
20080b5c:	9cc001cc 	andi	r19,r19,7
20080b60:	98800c04 	addi	r2,r19,48
20080b64:	18ffffc4 	addi	r3,r3,-1
20080b68:	2926b03a 	or	r19,r5,r4
20080b6c:	18800005 	stb	r2,0(r3)
20080b70:	9f08b03a 	or	r4,r19,fp
20080b74:	203ff61e 	bne	r4,zero,20080b50 <__flash_rwdata_start+0xfffef0a0>
20080b78:	8900004c 	andi	r4,r17,1
20080b7c:	d8c03115 	stw	r3,196(sp)
20080b80:	2003931e 	bne	r4,zero,200819d0 <___vfprintf_internal_r+0x137c>
20080b84:	dac02817 	ldw	r11,160(sp)
20080b88:	58e5c83a 	sub	r18,r11,r3
20080b8c:	9005883a 	mov	r2,r18
20080b90:	9240010e 	bge	r18,r9,20080b98 <___vfprintf_internal_r+0x544>
20080b94:	4805883a 	mov	r2,r9
20080b98:	d8802b15 	stw	r2,172(sp)
20080b9c:	d8003415 	stw	zero,208(sp)
20080ba0:	a8803fcc 	andi	r2,r21,255
20080ba4:	1080201c 	xori	r2,r2,128
20080ba8:	10bfe004 	addi	r2,r2,-128
20080bac:	10000326 	beq	r2,zero,20080bbc <___vfprintf_internal_r+0x568>
20080bb0:	db002b17 	ldw	r12,172(sp)
20080bb4:	63000044 	addi	r12,r12,1
20080bb8:	db002b15 	stw	r12,172(sp)
20080bbc:	88c0008c 	andi	r3,r17,2
20080bc0:	d8c02c15 	stw	r3,176(sp)
20080bc4:	18000326 	beq	r3,zero,20080bd4 <___vfprintf_internal_r+0x580>
20080bc8:	dac02b17 	ldw	r11,172(sp)
20080bcc:	5ac00084 	addi	r11,r11,2
20080bd0:	dac02b15 	stw	r11,172(sp)
20080bd4:	8b00210c 	andi	r12,r17,132
20080bd8:	db003015 	stw	r12,192(sp)
20080bdc:	6001da1e 	bne	r12,zero,20081348 <___vfprintf_internal_r+0xcf4>
20080be0:	dac02e17 	ldw	r11,184(sp)
20080be4:	db002b17 	ldw	r12,172(sp)
20080be8:	5b39c83a 	sub	fp,r11,r12
20080bec:	0701d60e 	bge	zero,fp,20081348 <___vfprintf_internal_r+0xcf4>
20080bf0:	02400404 	movi	r9,16
20080bf4:	d8c02017 	ldw	r3,128(sp)
20080bf8:	d8801f17 	ldw	r2,124(sp)
20080bfc:	4f053c0e 	bge	r9,fp,200820f0 <___vfprintf_internal_r+0x1a9c>
20080c00:	01400034 	movhi	r5,0
20080c04:	29401d84 	addi	r5,r5,118
20080c08:	d9403615 	stw	r5,216(sp)
20080c0c:	482b883a 	mov	r21,r9
20080c10:	04c001c4 	movi	r19,7
20080c14:	00000306 	br	20080c24 <___vfprintf_internal_r+0x5d0>
20080c18:	e73ffc04 	addi	fp,fp,-16
20080c1c:	42000204 	addi	r8,r8,8
20080c20:	af00130e 	bge	r21,fp,20080c70 <___vfprintf_internal_r+0x61c>
20080c24:	02c00034 	movhi	r11,0
20080c28:	18c00404 	addi	r3,r3,16
20080c2c:	10800044 	addi	r2,r2,1
20080c30:	5ac01d84 	addi	r11,r11,118
20080c34:	42c00015 	stw	r11,0(r8)
20080c38:	45400115 	stw	r21,4(r8)
20080c3c:	d8c02015 	stw	r3,128(sp)
20080c40:	d8801f15 	stw	r2,124(sp)
20080c44:	98bff40e 	bge	r19,r2,20080c18 <__flash_rwdata_start+0xfffef168>
20080c48:	b009883a 	mov	r4,r22
20080c4c:	b80b883a 	mov	r5,r23
20080c50:	d9801e04 	addi	r6,sp,120
20080c54:	008791c0 	call	2008791c <__sprint_r>
20080c58:	103f721e 	bne	r2,zero,20080a24 <__flash_rwdata_start+0xfffeef74>
20080c5c:	e73ffc04 	addi	fp,fp,-16
20080c60:	d8c02017 	ldw	r3,128(sp)
20080c64:	d8801f17 	ldw	r2,124(sp)
20080c68:	da000404 	addi	r8,sp,16
20080c6c:	af3fed16 	blt	r21,fp,20080c24 <__flash_rwdata_start+0xfffef174>
20080c70:	db003617 	ldw	r12,216(sp)
20080c74:	e0c7883a 	add	r3,fp,r3
20080c78:	10800044 	addi	r2,r2,1
20080c7c:	43000015 	stw	r12,0(r8)
20080c80:	47000115 	stw	fp,4(r8)
20080c84:	d8c02015 	stw	r3,128(sp)
20080c88:	d8801f15 	stw	r2,124(sp)
20080c8c:	010001c4 	movi	r4,7
20080c90:	20830e16 	blt	r4,r2,200818cc <___vfprintf_internal_r+0x1278>
20080c94:	d8802787 	ldb	r2,158(sp)
20080c98:	42000204 	addi	r8,r8,8
20080c9c:	10000c26 	beq	r2,zero,20080cd0 <___vfprintf_internal_r+0x67c>
20080ca0:	d8801f17 	ldw	r2,124(sp)
20080ca4:	d9002784 	addi	r4,sp,158
20080ca8:	18c00044 	addi	r3,r3,1
20080cac:	10800044 	addi	r2,r2,1
20080cb0:	41000015 	stw	r4,0(r8)
20080cb4:	01000044 	movi	r4,1
20080cb8:	41000115 	stw	r4,4(r8)
20080cbc:	d8c02015 	stw	r3,128(sp)
20080cc0:	d8801f15 	stw	r2,124(sp)
20080cc4:	010001c4 	movi	r4,7
20080cc8:	2082a716 	blt	r4,r2,20081768 <___vfprintf_internal_r+0x1114>
20080ccc:	42000204 	addi	r8,r8,8
20080cd0:	dac02c17 	ldw	r11,176(sp)
20080cd4:	58000c26 	beq	r11,zero,20080d08 <___vfprintf_internal_r+0x6b4>
20080cd8:	d8801f17 	ldw	r2,124(sp)
20080cdc:	d9002704 	addi	r4,sp,156
20080ce0:	18c00084 	addi	r3,r3,2
20080ce4:	10800044 	addi	r2,r2,1
20080ce8:	41000015 	stw	r4,0(r8)
20080cec:	01000084 	movi	r4,2
20080cf0:	41000115 	stw	r4,4(r8)
20080cf4:	d8c02015 	stw	r3,128(sp)
20080cf8:	d8801f15 	stw	r2,124(sp)
20080cfc:	010001c4 	movi	r4,7
20080d00:	2082a116 	blt	r4,r2,20081788 <___vfprintf_internal_r+0x1134>
20080d04:	42000204 	addi	r8,r8,8
20080d08:	db003017 	ldw	r12,192(sp)
20080d0c:	00802004 	movi	r2,128
20080d10:	60820326 	beq	r12,r2,20081520 <___vfprintf_internal_r+0xecc>
20080d14:	db003217 	ldw	r12,200(sp)
20080d18:	64abc83a 	sub	r21,r12,r18
20080d1c:	0540260e 	bge	zero,r21,20080db8 <___vfprintf_internal_r+0x764>
20080d20:	07000404 	movi	fp,16
20080d24:	d8801f17 	ldw	r2,124(sp)
20080d28:	e544570e 	bge	fp,r21,20081e88 <___vfprintf_internal_r+0x1834>
20080d2c:	01400034 	movhi	r5,0
20080d30:	29401984 	addi	r5,r5,102
20080d34:	d9402c15 	stw	r5,176(sp)
20080d38:	04c001c4 	movi	r19,7
20080d3c:	00000306 	br	20080d4c <___vfprintf_internal_r+0x6f8>
20080d40:	ad7ffc04 	addi	r21,r21,-16
20080d44:	42000204 	addi	r8,r8,8
20080d48:	e540110e 	bge	fp,r21,20080d90 <___vfprintf_internal_r+0x73c>
20080d4c:	18c00404 	addi	r3,r3,16
20080d50:	10800044 	addi	r2,r2,1
20080d54:	45000015 	stw	r20,0(r8)
20080d58:	47000115 	stw	fp,4(r8)
20080d5c:	d8c02015 	stw	r3,128(sp)
20080d60:	d8801f15 	stw	r2,124(sp)
20080d64:	98bff60e 	bge	r19,r2,20080d40 <__flash_rwdata_start+0xfffef290>
20080d68:	b009883a 	mov	r4,r22
20080d6c:	b80b883a 	mov	r5,r23
20080d70:	d9801e04 	addi	r6,sp,120
20080d74:	008791c0 	call	2008791c <__sprint_r>
20080d78:	103f2a1e 	bne	r2,zero,20080a24 <__flash_rwdata_start+0xfffeef74>
20080d7c:	ad7ffc04 	addi	r21,r21,-16
20080d80:	d8c02017 	ldw	r3,128(sp)
20080d84:	d8801f17 	ldw	r2,124(sp)
20080d88:	da000404 	addi	r8,sp,16
20080d8c:	e57fef16 	blt	fp,r21,20080d4c <__flash_rwdata_start+0xfffef29c>
20080d90:	dac02c17 	ldw	r11,176(sp)
20080d94:	1d47883a 	add	r3,r3,r21
20080d98:	10800044 	addi	r2,r2,1
20080d9c:	42c00015 	stw	r11,0(r8)
20080da0:	45400115 	stw	r21,4(r8)
20080da4:	d8c02015 	stw	r3,128(sp)
20080da8:	d8801f15 	stw	r2,124(sp)
20080dac:	010001c4 	movi	r4,7
20080db0:	20826516 	blt	r4,r2,20081748 <___vfprintf_internal_r+0x10f4>
20080db4:	42000204 	addi	r8,r8,8
20080db8:	8880400c 	andi	r2,r17,256
20080dbc:	1001901e 	bne	r2,zero,20081400 <___vfprintf_internal_r+0xdac>
20080dc0:	d8801f17 	ldw	r2,124(sp)
20080dc4:	db003117 	ldw	r12,196(sp)
20080dc8:	1c87883a 	add	r3,r3,r18
20080dcc:	10800044 	addi	r2,r2,1
20080dd0:	43000015 	stw	r12,0(r8)
20080dd4:	44800115 	stw	r18,4(r8)
20080dd8:	d8c02015 	stw	r3,128(sp)
20080ddc:	d8801f15 	stw	r2,124(sp)
20080de0:	010001c4 	movi	r4,7
20080de4:	20824016 	blt	r4,r2,200816e8 <___vfprintf_internal_r+0x1094>
20080de8:	42000204 	addi	r8,r8,8
20080dec:	8c40010c 	andi	r17,r17,4
20080df0:	88003126 	beq	r17,zero,20080eb8 <___vfprintf_internal_r+0x864>
20080df4:	db002e17 	ldw	r12,184(sp)
20080df8:	dac02b17 	ldw	r11,172(sp)
20080dfc:	62e1c83a 	sub	r16,r12,r11
20080e00:	04002d0e 	bge	zero,r16,20080eb8 <___vfprintf_internal_r+0x864>
20080e04:	04400404 	movi	r17,16
20080e08:	d8801f17 	ldw	r2,124(sp)
20080e0c:	8c05150e 	bge	r17,r16,20082264 <___vfprintf_internal_r+0x1c10>
20080e10:	01000034 	movhi	r4,0
20080e14:	21001d84 	addi	r4,r4,118
20080e18:	d9003615 	stw	r4,216(sp)
20080e1c:	048001c4 	movi	r18,7
20080e20:	00000306 	br	20080e30 <___vfprintf_internal_r+0x7dc>
20080e24:	843ffc04 	addi	r16,r16,-16
20080e28:	42000204 	addi	r8,r8,8
20080e2c:	8c00130e 	bge	r17,r16,20080e7c <___vfprintf_internal_r+0x828>
20080e30:	01400034 	movhi	r5,0
20080e34:	18c00404 	addi	r3,r3,16
20080e38:	10800044 	addi	r2,r2,1
20080e3c:	29401d84 	addi	r5,r5,118
20080e40:	41400015 	stw	r5,0(r8)
20080e44:	44400115 	stw	r17,4(r8)
20080e48:	d8c02015 	stw	r3,128(sp)
20080e4c:	d8801f15 	stw	r2,124(sp)
20080e50:	90bff40e 	bge	r18,r2,20080e24 <__flash_rwdata_start+0xfffef374>
20080e54:	b009883a 	mov	r4,r22
20080e58:	b80b883a 	mov	r5,r23
20080e5c:	d9801e04 	addi	r6,sp,120
20080e60:	008791c0 	call	2008791c <__sprint_r>
20080e64:	103eef1e 	bne	r2,zero,20080a24 <__flash_rwdata_start+0xfffeef74>
20080e68:	843ffc04 	addi	r16,r16,-16
20080e6c:	d8c02017 	ldw	r3,128(sp)
20080e70:	d8801f17 	ldw	r2,124(sp)
20080e74:	da000404 	addi	r8,sp,16
20080e78:	8c3fed16 	blt	r17,r16,20080e30 <__flash_rwdata_start+0xfffef380>
20080e7c:	dac03617 	ldw	r11,216(sp)
20080e80:	1c07883a 	add	r3,r3,r16
20080e84:	10800044 	addi	r2,r2,1
20080e88:	42c00015 	stw	r11,0(r8)
20080e8c:	44000115 	stw	r16,4(r8)
20080e90:	d8c02015 	stw	r3,128(sp)
20080e94:	d8801f15 	stw	r2,124(sp)
20080e98:	010001c4 	movi	r4,7
20080e9c:	2080060e 	bge	r4,r2,20080eb8 <___vfprintf_internal_r+0x864>
20080ea0:	b009883a 	mov	r4,r22
20080ea4:	b80b883a 	mov	r5,r23
20080ea8:	d9801e04 	addi	r6,sp,120
20080eac:	008791c0 	call	2008791c <__sprint_r>
20080eb0:	103edc1e 	bne	r2,zero,20080a24 <__flash_rwdata_start+0xfffeef74>
20080eb4:	d8c02017 	ldw	r3,128(sp)
20080eb8:	d8802b17 	ldw	r2,172(sp)
20080ebc:	db002e17 	ldw	r12,184(sp)
20080ec0:	1300010e 	bge	r2,r12,20080ec8 <___vfprintf_internal_r+0x874>
20080ec4:	6005883a 	mov	r2,r12
20080ec8:	dac02f17 	ldw	r11,188(sp)
20080ecc:	5897883a 	add	r11,r11,r2
20080ed0:	dac02f15 	stw	r11,188(sp)
20080ed4:	18020c1e 	bne	r3,zero,20081708 <___vfprintf_internal_r+0x10b4>
20080ed8:	d8001f15 	stw	zero,124(sp)
20080edc:	da000404 	addi	r8,sp,16
20080ee0:	003e1706 	br	20080740 <__flash_rwdata_start+0xfffeec90>
20080ee4:	8c400414 	ori	r17,r17,16
20080ee8:	d8c02a15 	stw	r3,168(sp)
20080eec:	8880080c 	andi	r2,r17,32
20080ef0:	10010126 	beq	r2,zero,200812f8 <___vfprintf_internal_r+0xca4>
20080ef4:	db002d17 	ldw	r12,180(sp)
20080ef8:	0005883a 	mov	r2,zero
20080efc:	64c00017 	ldw	r19,0(r12)
20080f00:	67000117 	ldw	fp,4(r12)
20080f04:	63000204 	addi	r12,r12,8
20080f08:	db002d15 	stw	r12,180(sp)
20080f0c:	9f06b03a 	or	r3,r19,fp
20080f10:	d8002785 	stb	zero,158(sp)
20080f14:	da403215 	stw	r9,200(sp)
20080f18:	002b883a 	mov	r21,zero
20080f1c:	003f0106 	br	20080b24 <__flash_rwdata_start+0xfffef074>
20080f20:	8c400414 	ori	r17,r17,16
20080f24:	d8c02a15 	stw	r3,168(sp)
20080f28:	8880080c 	andi	r2,r17,32
20080f2c:	1000e326 	beq	r2,zero,200812bc <___vfprintf_internal_r+0xc68>
20080f30:	dac02d17 	ldw	r11,180(sp)
20080f34:	00800044 	movi	r2,1
20080f38:	5cc00017 	ldw	r19,0(r11)
20080f3c:	5f000117 	ldw	fp,4(r11)
20080f40:	5ac00204 	addi	r11,r11,8
20080f44:	dac02d15 	stw	r11,180(sp)
20080f48:	9f06b03a 	or	r3,r19,fp
20080f4c:	003ff006 	br	20080f10 <__flash_rwdata_start+0xfffef460>
20080f50:	db002d17 	ldw	r12,180(sp)
20080f54:	dac02d17 	ldw	r11,180(sp)
20080f58:	d8c02a15 	stw	r3,168(sp)
20080f5c:	63000017 	ldw	r12,0(r12)
20080f60:	5ac00117 	ldw	r11,4(r11)
20080f64:	d9802785 	stb	r6,158(sp)
20080f68:	6009883a 	mov	r4,r12
20080f6c:	580b883a 	mov	r5,r11
20080f70:	db003715 	stw	r12,220(sp)
20080f74:	da003f15 	stw	r8,252(sp)
20080f78:	da403e15 	stw	r9,248(sp)
20080f7c:	dac03915 	stw	r11,228(sp)
20080f80:	00875780 	call	20087578 <__fpclassifyd>
20080f84:	db002d17 	ldw	r12,180(sp)
20080f88:	04800044 	movi	r18,1
20080f8c:	da003f17 	ldw	r8,252(sp)
20080f90:	64c00204 	addi	r19,r12,8
20080f94:	da403e17 	ldw	r9,248(sp)
20080f98:	d9003717 	ldw	r4,220(sp)
20080f9c:	d9403917 	ldw	r5,228(sp)
20080fa0:	14832b1e 	bne	r2,r18,20081c50 <___vfprintf_internal_r+0x15fc>
20080fa4:	000d883a 	mov	r6,zero
20080fa8:	000f883a 	mov	r7,zero
20080fac:	008b5240 	call	2008b524 <__ledf2>
20080fb0:	da003f17 	ldw	r8,252(sp)
20080fb4:	1004b716 	blt	r2,zero,20082294 <___vfprintf_internal_r+0x1c40>
20080fb8:	dd402783 	ldbu	r21,158(sp)
20080fbc:	008011c4 	movi	r2,71
20080fc0:	14040e0e 	bge	r2,r16,20081ffc <___vfprintf_internal_r+0x19a8>
20080fc4:	00c00034 	movhi	r3,0
20080fc8:	18c00a04 	addi	r3,r3,40
20080fcc:	d8c03115 	stw	r3,196(sp)
20080fd0:	02c000c4 	movi	r11,3
20080fd4:	00bfdfc4 	movi	r2,-129
20080fd8:	dac02b15 	stw	r11,172(sp)
20080fdc:	88a2703a 	and	r17,r17,r2
20080fe0:	dcc02d15 	stw	r19,180(sp)
20080fe4:	5825883a 	mov	r18,r11
20080fe8:	d8003215 	stw	zero,200(sp)
20080fec:	d8003415 	stw	zero,208(sp)
20080ff0:	003eeb06 	br	20080ba0 <__flash_rwdata_start+0xfffef0f0>
20080ff4:	db002d17 	ldw	r12,180(sp)
20080ff8:	00800c04 	movi	r2,48
20080ffc:	d8802705 	stb	r2,156(sp)
20081000:	64c00017 	ldw	r19,0(r12)
20081004:	00801e04 	movi	r2,120
20081008:	d8802745 	stb	r2,157(sp)
2008100c:	00800034 	movhi	r2,0
20081010:	10801204 	addi	r2,r2,72
20081014:	63000104 	addi	r12,r12,4
20081018:	d8c02a15 	stw	r3,168(sp)
2008101c:	d8803b15 	stw	r2,236(sp)
20081020:	0039883a 	mov	fp,zero
20081024:	8c400094 	ori	r17,r17,2
20081028:	db002d15 	stw	r12,180(sp)
2008102c:	00800084 	movi	r2,2
20081030:	04001e04 	movi	r16,120
20081034:	9807883a 	mov	r3,r19
20081038:	003fb506 	br	20080f10 <__flash_rwdata_start+0xfffef460>
2008103c:	8c400214 	ori	r17,r17,8
20081040:	1805883a 	mov	r2,r3
20081044:	1c000007 	ldb	r16,0(r3)
20081048:	003de706 	br	200807e8 <__flash_rwdata_start+0xfffeed38>
2008104c:	d8c02a15 	stw	r3,168(sp)
20081050:	d9802785 	stb	r6,158(sp)
20081054:	8880080c 	andi	r2,r17,32
20081058:	d8c02d17 	ldw	r3,180(sp)
2008105c:	103ea61e 	bne	r2,zero,20080af8 <__flash_rwdata_start+0xfffef048>
20081060:	8880040c 	andi	r2,r17,16
20081064:	1002221e 	bne	r2,zero,200818f0 <___vfprintf_internal_r+0x129c>
20081068:	8880100c 	andi	r2,r17,64
2008106c:	10022026 	beq	r2,zero,200818f0 <___vfprintf_internal_r+0x129c>
20081070:	1cc0000f 	ldh	r19,0(r3)
20081074:	db002d17 	ldw	r12,180(sp)
20081078:	9839d7fa 	srai	fp,r19,31
2008107c:	63000104 	addi	r12,r12,4
20081080:	db002d15 	stw	r12,180(sp)
20081084:	e005883a 	mov	r2,fp
20081088:	003ea106 	br	20080b10 <__flash_rwdata_start+0xfffef060>
2008108c:	8c401014 	ori	r17,r17,64
20081090:	1805883a 	mov	r2,r3
20081094:	1c000007 	ldb	r16,0(r3)
20081098:	003dd306 	br	200807e8 <__flash_rwdata_start+0xfffeed38>
2008109c:	1c000007 	ldb	r16,0(r3)
200810a0:	81c3e926 	beq	r16,r7,20082048 <___vfprintf_internal_r+0x19f4>
200810a4:	8c400414 	ori	r17,r17,16
200810a8:	1805883a 	mov	r2,r3
200810ac:	003dce06 	br	200807e8 <__flash_rwdata_start+0xfffeed38>
200810b0:	d8c02a15 	stw	r3,168(sp)
200810b4:	d9802785 	stb	r6,158(sp)
200810b8:	8880080c 	andi	r2,r17,32
200810bc:	10034726 	beq	r2,zero,20081ddc <___vfprintf_internal_r+0x1788>
200810c0:	db002d17 	ldw	r12,180(sp)
200810c4:	dac02f17 	ldw	r11,188(sp)
200810c8:	60800017 	ldw	r2,0(r12)
200810cc:	5807d7fa 	srai	r3,r11,31
200810d0:	63000104 	addi	r12,r12,4
200810d4:	db002d15 	stw	r12,180(sp)
200810d8:	12c00015 	stw	r11,0(r2)
200810dc:	10c00115 	stw	r3,4(r2)
200810e0:	003d9706 	br	20080740 <__flash_rwdata_start+0xfffeec90>
200810e4:	03000034 	movhi	r12,0
200810e8:	63000d04 	addi	r12,r12,52
200810ec:	d8c02a15 	stw	r3,168(sp)
200810f0:	d9802785 	stb	r6,158(sp)
200810f4:	db003b15 	stw	r12,236(sp)
200810f8:	88c0080c 	andi	r3,r17,32
200810fc:	d8802d17 	ldw	r2,180(sp)
20081100:	18005b26 	beq	r3,zero,20081270 <___vfprintf_internal_r+0xc1c>
20081104:	dac02d17 	ldw	r11,180(sp)
20081108:	14c00017 	ldw	r19,0(r2)
2008110c:	17000117 	ldw	fp,4(r2)
20081110:	5ac00204 	addi	r11,r11,8
20081114:	dac02d15 	stw	r11,180(sp)
20081118:	8880004c 	andi	r2,r17,1
2008111c:	10022926 	beq	r2,zero,200819c4 <___vfprintf_internal_r+0x1370>
20081120:	9f06b03a 	or	r3,r19,fp
20081124:	18032b26 	beq	r3,zero,20081dd4 <___vfprintf_internal_r+0x1780>
20081128:	00800c04 	movi	r2,48
2008112c:	d8802705 	stb	r2,156(sp)
20081130:	dc002745 	stb	r16,157(sp)
20081134:	8c400094 	ori	r17,r17,2
20081138:	00800084 	movi	r2,2
2008113c:	003f7406 	br	20080f10 <__flash_rwdata_start+0xfffef460>
20081140:	30803fcc 	andi	r2,r6,255
20081144:	1080201c 	xori	r2,r2,128
20081148:	10bfe004 	addi	r2,r2,-128
2008114c:	1003351e 	bne	r2,zero,20081e24 <___vfprintf_internal_r+0x17d0>
20081150:	1805883a 	mov	r2,r3
20081154:	01800804 	movi	r6,32
20081158:	1c000007 	ldb	r16,0(r3)
2008115c:	003da206 	br	200807e8 <__flash_rwdata_start+0xfffeed38>
20081160:	dac02d17 	ldw	r11,180(sp)
20081164:	db002d17 	ldw	r12,180(sp)
20081168:	5ac00017 	ldw	r11,0(r11)
2008116c:	dac02e15 	stw	r11,184(sp)
20081170:	62c00104 	addi	r11,r12,4
20081174:	db002e17 	ldw	r12,184(sp)
20081178:	6003ad16 	blt	r12,zero,20082030 <___vfprintf_internal_r+0x19dc>
2008117c:	dac02d15 	stw	r11,180(sp)
20081180:	1805883a 	mov	r2,r3
20081184:	1c000007 	ldb	r16,0(r3)
20081188:	003d9706 	br	200807e8 <__flash_rwdata_start+0xfffeed38>
2008118c:	1805883a 	mov	r2,r3
20081190:	01800ac4 	movi	r6,43
20081194:	1c000007 	ldb	r16,0(r3)
20081198:	003d9306 	br	200807e8 <__flash_rwdata_start+0xfffeed38>
2008119c:	db002d17 	ldw	r12,180(sp)
200811a0:	d8c02a15 	stw	r3,168(sp)
200811a4:	00c00044 	movi	r3,1
200811a8:	60800017 	ldw	r2,0(r12)
200811ac:	63000104 	addi	r12,r12,4
200811b0:	d8c02b15 	stw	r3,172(sp)
200811b4:	d8002785 	stb	zero,158(sp)
200811b8:	d8801405 	stb	r2,80(sp)
200811bc:	db002d15 	stw	r12,180(sp)
200811c0:	dac01404 	addi	r11,sp,80
200811c4:	1825883a 	mov	r18,r3
200811c8:	d8003215 	stw	zero,200(sp)
200811cc:	d8003415 	stw	zero,208(sp)
200811d0:	dac03115 	stw	r11,196(sp)
200811d4:	0005883a 	mov	r2,zero
200811d8:	003e7806 	br	20080bbc <__flash_rwdata_start+0xfffef10c>
200811dc:	dac02d17 	ldw	r11,180(sp)
200811e0:	db002d17 	ldw	r12,180(sp)
200811e4:	d8c02a15 	stw	r3,168(sp)
200811e8:	5ac00017 	ldw	r11,0(r11)
200811ec:	d8002785 	stb	zero,158(sp)
200811f0:	64c00104 	addi	r19,r12,4
200811f4:	dac03115 	stw	r11,196(sp)
200811f8:	5803fe26 	beq	r11,zero,200821f4 <___vfprintf_internal_r+0x1ba0>
200811fc:	d9003117 	ldw	r4,196(sp)
20081200:	4803b416 	blt	r9,zero,200820d4 <___vfprintf_internal_r+0x1a80>
20081204:	480d883a 	mov	r6,r9
20081208:	000b883a 	mov	r5,zero
2008120c:	da003f15 	stw	r8,252(sp)
20081210:	da403e15 	stw	r9,248(sp)
20081214:	0085bd00 	call	20085bd0 <memchr>
20081218:	da003f17 	ldw	r8,252(sp)
2008121c:	da403e17 	ldw	r9,248(sp)
20081220:	10043026 	beq	r2,zero,200822e4 <___vfprintf_internal_r+0x1c90>
20081224:	d8c03117 	ldw	r3,196(sp)
20081228:	10e5c83a 	sub	r18,r2,r3
2008122c:	4c836b16 	blt	r9,r18,20081fdc <___vfprintf_internal_r+0x1988>
20081230:	9005883a 	mov	r2,r18
20081234:	9003ac16 	blt	r18,zero,200820e8 <___vfprintf_internal_r+0x1a94>
20081238:	dd402783 	ldbu	r21,158(sp)
2008123c:	d8802b15 	stw	r2,172(sp)
20081240:	dcc02d15 	stw	r19,180(sp)
20081244:	d8003215 	stw	zero,200(sp)
20081248:	d8003415 	stw	zero,208(sp)
2008124c:	003e5406 	br	20080ba0 <__flash_rwdata_start+0xfffef0f0>
20081250:	00800034 	movhi	r2,0
20081254:	10801204 	addi	r2,r2,72
20081258:	d8c02a15 	stw	r3,168(sp)
2008125c:	d8803b15 	stw	r2,236(sp)
20081260:	d9802785 	stb	r6,158(sp)
20081264:	88c0080c 	andi	r3,r17,32
20081268:	d8802d17 	ldw	r2,180(sp)
2008126c:	183fa51e 	bne	r3,zero,20081104 <__flash_rwdata_start+0xfffef654>
20081270:	88c0040c 	andi	r3,r17,16
20081274:	1802ee26 	beq	r3,zero,20081e30 <___vfprintf_internal_r+0x17dc>
20081278:	db002d17 	ldw	r12,180(sp)
2008127c:	14c00017 	ldw	r19,0(r2)
20081280:	0039883a 	mov	fp,zero
20081284:	63000104 	addi	r12,r12,4
20081288:	db002d15 	stw	r12,180(sp)
2008128c:	003fa206 	br	20081118 <__flash_rwdata_start+0xfffef668>
20081290:	8c400054 	ori	r17,r17,1
20081294:	1805883a 	mov	r2,r3
20081298:	1c000007 	ldb	r16,0(r3)
2008129c:	003d5206 	br	200807e8 <__flash_rwdata_start+0xfffeed38>
200812a0:	8c400814 	ori	r17,r17,32
200812a4:	1805883a 	mov	r2,r3
200812a8:	1c000007 	ldb	r16,0(r3)
200812ac:	003d4e06 	br	200807e8 <__flash_rwdata_start+0xfffeed38>
200812b0:	d8c02a15 	stw	r3,168(sp)
200812b4:	8880080c 	andi	r2,r17,32
200812b8:	103f1d1e 	bne	r2,zero,20080f30 <__flash_rwdata_start+0xfffef480>
200812bc:	8880040c 	andi	r2,r17,16
200812c0:	1001b81e 	bne	r2,zero,200819a4 <___vfprintf_internal_r+0x1350>
200812c4:	8880100c 	andi	r2,r17,64
200812c8:	1001b626 	beq	r2,zero,200819a4 <___vfprintf_internal_r+0x1350>
200812cc:	dac02d17 	ldw	r11,180(sp)
200812d0:	0039883a 	mov	fp,zero
200812d4:	00800044 	movi	r2,1
200812d8:	5cc0000b 	ldhu	r19,0(r11)
200812dc:	5ac00104 	addi	r11,r11,4
200812e0:	dac02d15 	stw	r11,180(sp)
200812e4:	9807883a 	mov	r3,r19
200812e8:	003f0906 	br	20080f10 <__flash_rwdata_start+0xfffef460>
200812ec:	d8c02a15 	stw	r3,168(sp)
200812f0:	8880080c 	andi	r2,r17,32
200812f4:	103eff1e 	bne	r2,zero,20080ef4 <__flash_rwdata_start+0xfffef444>
200812f8:	8880040c 	andi	r2,r17,16
200812fc:	1001a11e 	bne	r2,zero,20081984 <___vfprintf_internal_r+0x1330>
20081300:	8880100c 	andi	r2,r17,64
20081304:	10019f26 	beq	r2,zero,20081984 <___vfprintf_internal_r+0x1330>
20081308:	db002d17 	ldw	r12,180(sp)
2008130c:	0039883a 	mov	fp,zero
20081310:	0005883a 	mov	r2,zero
20081314:	64c0000b 	ldhu	r19,0(r12)
20081318:	63000104 	addi	r12,r12,4
2008131c:	db002d15 	stw	r12,180(sp)
20081320:	9807883a 	mov	r3,r19
20081324:	003efa06 	br	20080f10 <__flash_rwdata_start+0xfffef460>
20081328:	d8c02a15 	stw	r3,168(sp)
2008132c:	d9802785 	stb	r6,158(sp)
20081330:	803db626 	beq	r16,zero,20080a0c <__flash_rwdata_start+0xfffeef5c>
20081334:	00c00044 	movi	r3,1
20081338:	d8c02b15 	stw	r3,172(sp)
2008133c:	dc001405 	stb	r16,80(sp)
20081340:	d8002785 	stb	zero,158(sp)
20081344:	003f9e06 	br	200811c0 <__flash_rwdata_start+0xfffef710>
20081348:	d8c02017 	ldw	r3,128(sp)
2008134c:	003e5306 	br	20080c9c <__flash_rwdata_start+0xfffef1ec>
20081350:	10803fcc 	andi	r2,r2,255
20081354:	00c00044 	movi	r3,1
20081358:	10fdfa1e 	bne	r2,r3,20080b44 <__flash_rwdata_start+0xfffef094>
2008135c:	e000021e 	bne	fp,zero,20081368 <___vfprintf_internal_r+0xd14>
20081360:	00800244 	movi	r2,9
20081364:	14c0202e 	bgeu	r2,r19,200813e8 <___vfprintf_internal_r+0xd94>
20081368:	dc002b15 	stw	r16,172(sp)
2008136c:	dc402c15 	stw	r17,176(sp)
20081370:	9821883a 	mov	r16,r19
20081374:	e023883a 	mov	r17,fp
20081378:	dc801e04 	addi	r18,sp,120
2008137c:	4827883a 	mov	r19,r9
20081380:	4039883a 	mov	fp,r8
20081384:	8009883a 	mov	r4,r16
20081388:	880b883a 	mov	r5,r17
2008138c:	01800284 	movi	r6,10
20081390:	000f883a 	mov	r7,zero
20081394:	0089b9c0 	call	20089b9c <__umoddi3>
20081398:	10800c04 	addi	r2,r2,48
2008139c:	94bfffc4 	addi	r18,r18,-1
200813a0:	8009883a 	mov	r4,r16
200813a4:	880b883a 	mov	r5,r17
200813a8:	01800284 	movi	r6,10
200813ac:	000f883a 	mov	r7,zero
200813b0:	90800005 	stb	r2,0(r18)
200813b4:	00895dc0 	call	200895dc <__udivdi3>
200813b8:	1021883a 	mov	r16,r2
200813bc:	10c4b03a 	or	r2,r2,r3
200813c0:	1823883a 	mov	r17,r3
200813c4:	103fef1e 	bne	r2,zero,20081384 <__flash_rwdata_start+0xfffef8d4>
200813c8:	dac02817 	ldw	r11,160(sp)
200813cc:	dc803115 	stw	r18,196(sp)
200813d0:	dc002b17 	ldw	r16,172(sp)
200813d4:	dc402c17 	ldw	r17,176(sp)
200813d8:	9813883a 	mov	r9,r19
200813dc:	e011883a 	mov	r8,fp
200813e0:	5ca5c83a 	sub	r18,r11,r18
200813e4:	003de906 	br	20080b8c <__flash_rwdata_start+0xfffef0dc>
200813e8:	9cc00c04 	addi	r19,r19,48
200813ec:	d8c01dc4 	addi	r3,sp,119
200813f0:	dcc01dc5 	stb	r19,119(sp)
200813f4:	dc803c17 	ldw	r18,240(sp)
200813f8:	d8c03115 	stw	r3,196(sp)
200813fc:	003de306 	br	20080b8c <__flash_rwdata_start+0xfffef0dc>
20081400:	00801944 	movi	r2,101
20081404:	1400710e 	bge	r2,r16,200815cc <___vfprintf_internal_r+0xf78>
20081408:	d9003717 	ldw	r4,220(sp)
2008140c:	d9403917 	ldw	r5,228(sp)
20081410:	000d883a 	mov	r6,zero
20081414:	000f883a 	mov	r7,zero
20081418:	d8c03d15 	stw	r3,244(sp)
2008141c:	da003f15 	stw	r8,252(sp)
20081420:	008b3c00 	call	2008b3c0 <__eqdf2>
20081424:	d8c03d17 	ldw	r3,244(sp)
20081428:	da003f17 	ldw	r8,252(sp)
2008142c:	1000ef1e 	bne	r2,zero,200817ec <___vfprintf_internal_r+0x1198>
20081430:	d8801f17 	ldw	r2,124(sp)
20081434:	01000034 	movhi	r4,0
20081438:	21001904 	addi	r4,r4,100
2008143c:	18c00044 	addi	r3,r3,1
20081440:	10800044 	addi	r2,r2,1
20081444:	41000015 	stw	r4,0(r8)
20081448:	01000044 	movi	r4,1
2008144c:	41000115 	stw	r4,4(r8)
20081450:	d8c02015 	stw	r3,128(sp)
20081454:	d8801f15 	stw	r2,124(sp)
20081458:	010001c4 	movi	r4,7
2008145c:	20828e16 	blt	r4,r2,20081e98 <___vfprintf_internal_r+0x1844>
20081460:	42000204 	addi	r8,r8,8
20081464:	d8802617 	ldw	r2,152(sp)
20081468:	dac03317 	ldw	r11,204(sp)
2008146c:	12c00216 	blt	r2,r11,20081478 <___vfprintf_internal_r+0xe24>
20081470:	8880004c 	andi	r2,r17,1
20081474:	103e5d26 	beq	r2,zero,20080dec <__flash_rwdata_start+0xfffef33c>
20081478:	db003817 	ldw	r12,224(sp)
2008147c:	d8801f17 	ldw	r2,124(sp)
20081480:	dac03517 	ldw	r11,212(sp)
20081484:	1b07883a 	add	r3,r3,r12
20081488:	10800044 	addi	r2,r2,1
2008148c:	42c00015 	stw	r11,0(r8)
20081490:	43000115 	stw	r12,4(r8)
20081494:	d8c02015 	stw	r3,128(sp)
20081498:	d8801f15 	stw	r2,124(sp)
2008149c:	010001c4 	movi	r4,7
200814a0:	2082ed16 	blt	r4,r2,20082058 <___vfprintf_internal_r+0x1a04>
200814a4:	42000204 	addi	r8,r8,8
200814a8:	db003317 	ldw	r12,204(sp)
200814ac:	643fffc4 	addi	r16,r12,-1
200814b0:	043e4e0e 	bge	zero,r16,20080dec <__flash_rwdata_start+0xfffef33c>
200814b4:	04800404 	movi	r18,16
200814b8:	d8801f17 	ldw	r2,124(sp)
200814bc:	94007e0e 	bge	r18,r16,200816b8 <___vfprintf_internal_r+0x1064>
200814c0:	01400034 	movhi	r5,0
200814c4:	29401984 	addi	r5,r5,102
200814c8:	d9402c15 	stw	r5,176(sp)
200814cc:	054001c4 	movi	r21,7
200814d0:	00000306 	br	200814e0 <___vfprintf_internal_r+0xe8c>
200814d4:	42000204 	addi	r8,r8,8
200814d8:	843ffc04 	addi	r16,r16,-16
200814dc:	9400790e 	bge	r18,r16,200816c4 <___vfprintf_internal_r+0x1070>
200814e0:	18c00404 	addi	r3,r3,16
200814e4:	10800044 	addi	r2,r2,1
200814e8:	45000015 	stw	r20,0(r8)
200814ec:	44800115 	stw	r18,4(r8)
200814f0:	d8c02015 	stw	r3,128(sp)
200814f4:	d8801f15 	stw	r2,124(sp)
200814f8:	a8bff60e 	bge	r21,r2,200814d4 <__flash_rwdata_start+0xfffefa24>
200814fc:	b009883a 	mov	r4,r22
20081500:	b80b883a 	mov	r5,r23
20081504:	d9801e04 	addi	r6,sp,120
20081508:	008791c0 	call	2008791c <__sprint_r>
2008150c:	103d451e 	bne	r2,zero,20080a24 <__flash_rwdata_start+0xfffeef74>
20081510:	d8c02017 	ldw	r3,128(sp)
20081514:	d8801f17 	ldw	r2,124(sp)
20081518:	da000404 	addi	r8,sp,16
2008151c:	003fee06 	br	200814d8 <__flash_rwdata_start+0xfffefa28>
20081520:	dac02e17 	ldw	r11,184(sp)
20081524:	db002b17 	ldw	r12,172(sp)
20081528:	5b2bc83a 	sub	r21,r11,r12
2008152c:	057df90e 	bge	zero,r21,20080d14 <__flash_rwdata_start+0xfffef264>
20081530:	07000404 	movi	fp,16
20081534:	d8801f17 	ldw	r2,124(sp)
20081538:	e543640e 	bge	fp,r21,200822cc <___vfprintf_internal_r+0x1c78>
2008153c:	01400034 	movhi	r5,0
20081540:	29401984 	addi	r5,r5,102
20081544:	d9402c15 	stw	r5,176(sp)
20081548:	04c001c4 	movi	r19,7
2008154c:	00000306 	br	2008155c <___vfprintf_internal_r+0xf08>
20081550:	ad7ffc04 	addi	r21,r21,-16
20081554:	42000204 	addi	r8,r8,8
20081558:	e540110e 	bge	fp,r21,200815a0 <___vfprintf_internal_r+0xf4c>
2008155c:	18c00404 	addi	r3,r3,16
20081560:	10800044 	addi	r2,r2,1
20081564:	45000015 	stw	r20,0(r8)
20081568:	47000115 	stw	fp,4(r8)
2008156c:	d8c02015 	stw	r3,128(sp)
20081570:	d8801f15 	stw	r2,124(sp)
20081574:	98bff60e 	bge	r19,r2,20081550 <__flash_rwdata_start+0xfffefaa0>
20081578:	b009883a 	mov	r4,r22
2008157c:	b80b883a 	mov	r5,r23
20081580:	d9801e04 	addi	r6,sp,120
20081584:	008791c0 	call	2008791c <__sprint_r>
20081588:	103d261e 	bne	r2,zero,20080a24 <__flash_rwdata_start+0xfffeef74>
2008158c:	ad7ffc04 	addi	r21,r21,-16
20081590:	d8c02017 	ldw	r3,128(sp)
20081594:	d8801f17 	ldw	r2,124(sp)
20081598:	da000404 	addi	r8,sp,16
2008159c:	e57fef16 	blt	fp,r21,2008155c <__flash_rwdata_start+0xfffefaac>
200815a0:	dac02c17 	ldw	r11,176(sp)
200815a4:	1d47883a 	add	r3,r3,r21
200815a8:	10800044 	addi	r2,r2,1
200815ac:	42c00015 	stw	r11,0(r8)
200815b0:	45400115 	stw	r21,4(r8)
200815b4:	d8c02015 	stw	r3,128(sp)
200815b8:	d8801f15 	stw	r2,124(sp)
200815bc:	010001c4 	movi	r4,7
200815c0:	20819116 	blt	r4,r2,20081c08 <___vfprintf_internal_r+0x15b4>
200815c4:	42000204 	addi	r8,r8,8
200815c8:	003dd206 	br	20080d14 <__flash_rwdata_start+0xfffef264>
200815cc:	db003317 	ldw	r12,204(sp)
200815d0:	00800044 	movi	r2,1
200815d4:	18c00044 	addi	r3,r3,1
200815d8:	1301530e 	bge	r2,r12,20081b28 <___vfprintf_internal_r+0x14d4>
200815dc:	dc001f17 	ldw	r16,124(sp)
200815e0:	dac03117 	ldw	r11,196(sp)
200815e4:	00800044 	movi	r2,1
200815e8:	84000044 	addi	r16,r16,1
200815ec:	40800115 	stw	r2,4(r8)
200815f0:	42c00015 	stw	r11,0(r8)
200815f4:	d8c02015 	stw	r3,128(sp)
200815f8:	dc001f15 	stw	r16,124(sp)
200815fc:	008001c4 	movi	r2,7
20081600:	14016b16 	blt	r2,r16,20081bb0 <___vfprintf_internal_r+0x155c>
20081604:	42000204 	addi	r8,r8,8
20081608:	db003817 	ldw	r12,224(sp)
2008160c:	dac03517 	ldw	r11,212(sp)
20081610:	84000044 	addi	r16,r16,1
20081614:	1b07883a 	add	r3,r3,r12
20081618:	42c00015 	stw	r11,0(r8)
2008161c:	43000115 	stw	r12,4(r8)
20081620:	d8c02015 	stw	r3,128(sp)
20081624:	dc001f15 	stw	r16,124(sp)
20081628:	008001c4 	movi	r2,7
2008162c:	14016916 	blt	r2,r16,20081bd4 <___vfprintf_internal_r+0x1580>
20081630:	44800204 	addi	r18,r8,8
20081634:	d9003717 	ldw	r4,220(sp)
20081638:	d9403917 	ldw	r5,228(sp)
2008163c:	000d883a 	mov	r6,zero
20081640:	000f883a 	mov	r7,zero
20081644:	d8c03d15 	stw	r3,244(sp)
20081648:	008b3c00 	call	2008b3c0 <__eqdf2>
2008164c:	d8c03d17 	ldw	r3,244(sp)
20081650:	db003317 	ldw	r12,204(sp)
20081654:	1000ad26 	beq	r2,zero,2008190c <___vfprintf_internal_r+0x12b8>
20081658:	dac03117 	ldw	r11,196(sp)
2008165c:	60bfffc4 	addi	r2,r12,-1
20081660:	1887883a 	add	r3,r3,r2
20081664:	59000044 	addi	r4,r11,1
20081668:	84000044 	addi	r16,r16,1
2008166c:	90800115 	stw	r2,4(r18)
20081670:	91000015 	stw	r4,0(r18)
20081674:	d8c02015 	stw	r3,128(sp)
20081678:	dc001f15 	stw	r16,124(sp)
2008167c:	008001c4 	movi	r2,7
20081680:	14014216 	blt	r2,r16,20081b8c <___vfprintf_internal_r+0x1538>
20081684:	94800204 	addi	r18,r18,8
20081688:	dac03a17 	ldw	r11,232(sp)
2008168c:	dd4022c4 	addi	r21,sp,139
20081690:	84000044 	addi	r16,r16,1
20081694:	1ac7883a 	add	r3,r3,r11
20081698:	95400015 	stw	r21,0(r18)
2008169c:	92c00115 	stw	r11,4(r18)
200816a0:	d8c02015 	stw	r3,128(sp)
200816a4:	dc001f15 	stw	r16,124(sp)
200816a8:	008001c4 	movi	r2,7
200816ac:	14000e16 	blt	r2,r16,200816e8 <___vfprintf_internal_r+0x1094>
200816b0:	92000204 	addi	r8,r18,8
200816b4:	003dcd06 	br	20080dec <__flash_rwdata_start+0xfffef33c>
200816b8:	01000034 	movhi	r4,0
200816bc:	21001984 	addi	r4,r4,102
200816c0:	d9002c15 	stw	r4,176(sp)
200816c4:	dac02c17 	ldw	r11,176(sp)
200816c8:	1c07883a 	add	r3,r3,r16
200816cc:	44000115 	stw	r16,4(r8)
200816d0:	42c00015 	stw	r11,0(r8)
200816d4:	10800044 	addi	r2,r2,1
200816d8:	d8c02015 	stw	r3,128(sp)
200816dc:	d8801f15 	stw	r2,124(sp)
200816e0:	010001c4 	movi	r4,7
200816e4:	20bdc00e 	bge	r4,r2,20080de8 <__flash_rwdata_start+0xfffef338>
200816e8:	b009883a 	mov	r4,r22
200816ec:	b80b883a 	mov	r5,r23
200816f0:	d9801e04 	addi	r6,sp,120
200816f4:	008791c0 	call	2008791c <__sprint_r>
200816f8:	103cca1e 	bne	r2,zero,20080a24 <__flash_rwdata_start+0xfffeef74>
200816fc:	d8c02017 	ldw	r3,128(sp)
20081700:	da000404 	addi	r8,sp,16
20081704:	003db906 	br	20080dec <__flash_rwdata_start+0xfffef33c>
20081708:	b009883a 	mov	r4,r22
2008170c:	b80b883a 	mov	r5,r23
20081710:	d9801e04 	addi	r6,sp,120
20081714:	008791c0 	call	2008791c <__sprint_r>
20081718:	103def26 	beq	r2,zero,20080ed8 <__flash_rwdata_start+0xfffef428>
2008171c:	003cc106 	br	20080a24 <__flash_rwdata_start+0xfffeef74>
20081720:	10803fcc 	andi	r2,r2,255
20081724:	1000651e 	bne	r2,zero,200818bc <___vfprintf_internal_r+0x1268>
20081728:	8880004c 	andi	r2,r17,1
2008172c:	10013226 	beq	r2,zero,20081bf8 <___vfprintf_internal_r+0x15a4>
20081730:	00800c04 	movi	r2,48
20081734:	d8c01dc4 	addi	r3,sp,119
20081738:	d8801dc5 	stb	r2,119(sp)
2008173c:	dc803c17 	ldw	r18,240(sp)
20081740:	d8c03115 	stw	r3,196(sp)
20081744:	003d1106 	br	20080b8c <__flash_rwdata_start+0xfffef0dc>
20081748:	b009883a 	mov	r4,r22
2008174c:	b80b883a 	mov	r5,r23
20081750:	d9801e04 	addi	r6,sp,120
20081754:	008791c0 	call	2008791c <__sprint_r>
20081758:	103cb21e 	bne	r2,zero,20080a24 <__flash_rwdata_start+0xfffeef74>
2008175c:	d8c02017 	ldw	r3,128(sp)
20081760:	da000404 	addi	r8,sp,16
20081764:	003d9406 	br	20080db8 <__flash_rwdata_start+0xfffef308>
20081768:	b009883a 	mov	r4,r22
2008176c:	b80b883a 	mov	r5,r23
20081770:	d9801e04 	addi	r6,sp,120
20081774:	008791c0 	call	2008791c <__sprint_r>
20081778:	103caa1e 	bne	r2,zero,20080a24 <__flash_rwdata_start+0xfffeef74>
2008177c:	d8c02017 	ldw	r3,128(sp)
20081780:	da000404 	addi	r8,sp,16
20081784:	003d5206 	br	20080cd0 <__flash_rwdata_start+0xfffef220>
20081788:	b009883a 	mov	r4,r22
2008178c:	b80b883a 	mov	r5,r23
20081790:	d9801e04 	addi	r6,sp,120
20081794:	008791c0 	call	2008791c <__sprint_r>
20081798:	103ca21e 	bne	r2,zero,20080a24 <__flash_rwdata_start+0xfffeef74>
2008179c:	d8c02017 	ldw	r3,128(sp)
200817a0:	da000404 	addi	r8,sp,16
200817a4:	003d5806 	br	20080d08 <__flash_rwdata_start+0xfffef258>
200817a8:	d9403b17 	ldw	r5,236(sp)
200817ac:	d8c01e04 	addi	r3,sp,120
200817b0:	988003cc 	andi	r2,r19,15
200817b4:	e008973a 	slli	r4,fp,28
200817b8:	2885883a 	add	r2,r5,r2
200817bc:	9826d13a 	srli	r19,r19,4
200817c0:	10800003 	ldbu	r2,0(r2)
200817c4:	e038d13a 	srli	fp,fp,4
200817c8:	18ffffc4 	addi	r3,r3,-1
200817cc:	24e6b03a 	or	r19,r4,r19
200817d0:	18800005 	stb	r2,0(r3)
200817d4:	9f04b03a 	or	r2,r19,fp
200817d8:	103ff51e 	bne	r2,zero,200817b0 <__flash_rwdata_start+0xfffefd00>
200817dc:	db002817 	ldw	r12,160(sp)
200817e0:	d8c03115 	stw	r3,196(sp)
200817e4:	60e5c83a 	sub	r18,r12,r3
200817e8:	003ce806 	br	20080b8c <__flash_rwdata_start+0xfffef0dc>
200817ec:	dc002617 	ldw	r16,152(sp)
200817f0:	0401b10e 	bge	zero,r16,20081eb8 <___vfprintf_internal_r+0x1864>
200817f4:	db003117 	ldw	r12,196(sp)
200817f8:	dac03317 	ldw	r11,204(sp)
200817fc:	62e1883a 	add	r16,r12,r11
20081800:	db003417 	ldw	r12,208(sp)
20081804:	5825883a 	mov	r18,r11
20081808:	62c0010e 	bge	r12,r11,20081810 <___vfprintf_internal_r+0x11bc>
2008180c:	6025883a 	mov	r18,r12
20081810:	04800b0e 	bge	zero,r18,20081840 <___vfprintf_internal_r+0x11ec>
20081814:	d8801f17 	ldw	r2,124(sp)
20081818:	dac03117 	ldw	r11,196(sp)
2008181c:	1c87883a 	add	r3,r3,r18
20081820:	10800044 	addi	r2,r2,1
20081824:	42c00015 	stw	r11,0(r8)
20081828:	44800115 	stw	r18,4(r8)
2008182c:	d8c02015 	stw	r3,128(sp)
20081830:	d8801f15 	stw	r2,124(sp)
20081834:	010001c4 	movi	r4,7
20081838:	20824f16 	blt	r4,r2,20082178 <___vfprintf_internal_r+0x1b24>
2008183c:	42000204 	addi	r8,r8,8
20081840:	90024b16 	blt	r18,zero,20082170 <___vfprintf_internal_r+0x1b1c>
20081844:	db003417 	ldw	r12,208(sp)
20081848:	64a5c83a 	sub	r18,r12,r18
2008184c:	0480730e 	bge	zero,r18,20081a1c <___vfprintf_internal_r+0x13c8>
20081850:	05400404 	movi	r21,16
20081854:	d8801f17 	ldw	r2,124(sp)
20081858:	ac817d0e 	bge	r21,r18,20081e50 <___vfprintf_internal_r+0x17fc>
2008185c:	01400034 	movhi	r5,0
20081860:	29401984 	addi	r5,r5,102
20081864:	d9402c15 	stw	r5,176(sp)
20081868:	070001c4 	movi	fp,7
2008186c:	00000306 	br	2008187c <___vfprintf_internal_r+0x1228>
20081870:	42000204 	addi	r8,r8,8
20081874:	94bffc04 	addi	r18,r18,-16
20081878:	ac81780e 	bge	r21,r18,20081e5c <___vfprintf_internal_r+0x1808>
2008187c:	18c00404 	addi	r3,r3,16
20081880:	10800044 	addi	r2,r2,1
20081884:	45000015 	stw	r20,0(r8)
20081888:	45400115 	stw	r21,4(r8)
2008188c:	d8c02015 	stw	r3,128(sp)
20081890:	d8801f15 	stw	r2,124(sp)
20081894:	e0bff60e 	bge	fp,r2,20081870 <__flash_rwdata_start+0xfffefdc0>
20081898:	b009883a 	mov	r4,r22
2008189c:	b80b883a 	mov	r5,r23
200818a0:	d9801e04 	addi	r6,sp,120
200818a4:	008791c0 	call	2008791c <__sprint_r>
200818a8:	103c5e1e 	bne	r2,zero,20080a24 <__flash_rwdata_start+0xfffeef74>
200818ac:	d8c02017 	ldw	r3,128(sp)
200818b0:	d8801f17 	ldw	r2,124(sp)
200818b4:	da000404 	addi	r8,sp,16
200818b8:	003fee06 	br	20081874 <__flash_rwdata_start+0xfffefdc4>
200818bc:	dac01e04 	addi	r11,sp,120
200818c0:	0025883a 	mov	r18,zero
200818c4:	dac03115 	stw	r11,196(sp)
200818c8:	003cb006 	br	20080b8c <__flash_rwdata_start+0xfffef0dc>
200818cc:	b009883a 	mov	r4,r22
200818d0:	b80b883a 	mov	r5,r23
200818d4:	d9801e04 	addi	r6,sp,120
200818d8:	008791c0 	call	2008791c <__sprint_r>
200818dc:	103c511e 	bne	r2,zero,20080a24 <__flash_rwdata_start+0xfffeef74>
200818e0:	d8c02017 	ldw	r3,128(sp)
200818e4:	d8802787 	ldb	r2,158(sp)
200818e8:	da000404 	addi	r8,sp,16
200818ec:	003ceb06 	br	20080c9c <__flash_rwdata_start+0xfffef1ec>
200818f0:	1cc00017 	ldw	r19,0(r3)
200818f4:	dac02d17 	ldw	r11,180(sp)
200818f8:	9839d7fa 	srai	fp,r19,31
200818fc:	5ac00104 	addi	r11,r11,4
20081900:	dac02d15 	stw	r11,180(sp)
20081904:	e005883a 	mov	r2,fp
20081908:	003c8106 	br	20080b10 <__flash_rwdata_start+0xfffef060>
2008190c:	657fffc4 	addi	r21,r12,-1
20081910:	057f5d0e 	bge	zero,r21,20081688 <__flash_rwdata_start+0xfffefbd8>
20081914:	07000404 	movi	fp,16
20081918:	e540900e 	bge	fp,r21,20081b5c <___vfprintf_internal_r+0x1508>
2008191c:	01000034 	movhi	r4,0
20081920:	21001984 	addi	r4,r4,102
20081924:	d9002c15 	stw	r4,176(sp)
20081928:	01c001c4 	movi	r7,7
2008192c:	00000306 	br	2008193c <___vfprintf_internal_r+0x12e8>
20081930:	94800204 	addi	r18,r18,8
20081934:	ad7ffc04 	addi	r21,r21,-16
20081938:	e5408b0e 	bge	fp,r21,20081b68 <___vfprintf_internal_r+0x1514>
2008193c:	18c00404 	addi	r3,r3,16
20081940:	84000044 	addi	r16,r16,1
20081944:	95000015 	stw	r20,0(r18)
20081948:	97000115 	stw	fp,4(r18)
2008194c:	d8c02015 	stw	r3,128(sp)
20081950:	dc001f15 	stw	r16,124(sp)
20081954:	3c3ff60e 	bge	r7,r16,20081930 <__flash_rwdata_start+0xfffefe80>
20081958:	b009883a 	mov	r4,r22
2008195c:	b80b883a 	mov	r5,r23
20081960:	d9801e04 	addi	r6,sp,120
20081964:	d9c03d15 	stw	r7,244(sp)
20081968:	008791c0 	call	2008791c <__sprint_r>
2008196c:	d9c03d17 	ldw	r7,244(sp)
20081970:	103c2c1e 	bne	r2,zero,20080a24 <__flash_rwdata_start+0xfffeef74>
20081974:	d8c02017 	ldw	r3,128(sp)
20081978:	dc001f17 	ldw	r16,124(sp)
2008197c:	dc800404 	addi	r18,sp,16
20081980:	003fec06 	br	20081934 <__flash_rwdata_start+0xfffefe84>
20081984:	dac02d17 	ldw	r11,180(sp)
20081988:	0039883a 	mov	fp,zero
2008198c:	0005883a 	mov	r2,zero
20081990:	5cc00017 	ldw	r19,0(r11)
20081994:	5ac00104 	addi	r11,r11,4
20081998:	dac02d15 	stw	r11,180(sp)
2008199c:	9807883a 	mov	r3,r19
200819a0:	003d5b06 	br	20080f10 <__flash_rwdata_start+0xfffef460>
200819a4:	db002d17 	ldw	r12,180(sp)
200819a8:	0039883a 	mov	fp,zero
200819ac:	00800044 	movi	r2,1
200819b0:	64c00017 	ldw	r19,0(r12)
200819b4:	63000104 	addi	r12,r12,4
200819b8:	db002d15 	stw	r12,180(sp)
200819bc:	9807883a 	mov	r3,r19
200819c0:	003d5306 	br	20080f10 <__flash_rwdata_start+0xfffef460>
200819c4:	00800084 	movi	r2,2
200819c8:	9f06b03a 	or	r3,r19,fp
200819cc:	003d5006 	br	20080f10 <__flash_rwdata_start+0xfffef460>
200819d0:	10803fcc 	andi	r2,r2,255
200819d4:	1080201c 	xori	r2,r2,128
200819d8:	10bfe004 	addi	r2,r2,-128
200819dc:	01000c04 	movi	r4,48
200819e0:	1101a526 	beq	r2,r4,20082078 <___vfprintf_internal_r+0x1a24>
200819e4:	dac03117 	ldw	r11,196(sp)
200819e8:	db002817 	ldw	r12,160(sp)
200819ec:	193fffc5 	stb	r4,-1(r3)
200819f0:	5affffc4 	addi	r11,r11,-1
200819f4:	dac03115 	stw	r11,196(sp)
200819f8:	62e5c83a 	sub	r18,r12,r11
200819fc:	003c6306 	br	20080b8c <__flash_rwdata_start+0xfffef0dc>
20081a00:	b009883a 	mov	r4,r22
20081a04:	b80b883a 	mov	r5,r23
20081a08:	d9801e04 	addi	r6,sp,120
20081a0c:	008791c0 	call	2008791c <__sprint_r>
20081a10:	103c041e 	bne	r2,zero,20080a24 <__flash_rwdata_start+0xfffeef74>
20081a14:	d8c02017 	ldw	r3,128(sp)
20081a18:	da000404 	addi	r8,sp,16
20081a1c:	db003117 	ldw	r12,196(sp)
20081a20:	dac03417 	ldw	r11,208(sp)
20081a24:	d8802617 	ldw	r2,152(sp)
20081a28:	62e5883a 	add	r18,r12,r11
20081a2c:	db003317 	ldw	r12,204(sp)
20081a30:	13000216 	blt	r2,r12,20081a3c <___vfprintf_internal_r+0x13e8>
20081a34:	8900004c 	andi	r4,r17,1
20081a38:	20000c26 	beq	r4,zero,20081a6c <___vfprintf_internal_r+0x1418>
20081a3c:	dac03817 	ldw	r11,224(sp)
20081a40:	d9001f17 	ldw	r4,124(sp)
20081a44:	db003517 	ldw	r12,212(sp)
20081a48:	1ac7883a 	add	r3,r3,r11
20081a4c:	21000044 	addi	r4,r4,1
20081a50:	43000015 	stw	r12,0(r8)
20081a54:	42c00115 	stw	r11,4(r8)
20081a58:	d8c02015 	stw	r3,128(sp)
20081a5c:	d9001f15 	stw	r4,124(sp)
20081a60:	014001c4 	movi	r5,7
20081a64:	2901cc16 	blt	r5,r4,20082198 <___vfprintf_internal_r+0x1b44>
20081a68:	42000204 	addi	r8,r8,8
20081a6c:	dac03317 	ldw	r11,204(sp)
20081a70:	8489c83a 	sub	r4,r16,r18
20081a74:	5885c83a 	sub	r2,r11,r2
20081a78:	1021883a 	mov	r16,r2
20081a7c:	2080010e 	bge	r4,r2,20081a84 <___vfprintf_internal_r+0x1430>
20081a80:	2021883a 	mov	r16,r4
20081a84:	04000a0e 	bge	zero,r16,20081ab0 <___vfprintf_internal_r+0x145c>
20081a88:	d9001f17 	ldw	r4,124(sp)
20081a8c:	1c07883a 	add	r3,r3,r16
20081a90:	44800015 	stw	r18,0(r8)
20081a94:	21000044 	addi	r4,r4,1
20081a98:	44000115 	stw	r16,4(r8)
20081a9c:	d8c02015 	stw	r3,128(sp)
20081aa0:	d9001f15 	stw	r4,124(sp)
20081aa4:	014001c4 	movi	r5,7
20081aa8:	2901e316 	blt	r5,r4,20082238 <___vfprintf_internal_r+0x1be4>
20081aac:	42000204 	addi	r8,r8,8
20081ab0:	8001df16 	blt	r16,zero,20082230 <___vfprintf_internal_r+0x1bdc>
20081ab4:	1421c83a 	sub	r16,r2,r16
20081ab8:	043ccc0e 	bge	zero,r16,20080dec <__flash_rwdata_start+0xfffef33c>
20081abc:	04800404 	movi	r18,16
20081ac0:	d8801f17 	ldw	r2,124(sp)
20081ac4:	943efc0e 	bge	r18,r16,200816b8 <__flash_rwdata_start+0xfffefc08>
20081ac8:	01400034 	movhi	r5,0
20081acc:	29401984 	addi	r5,r5,102
20081ad0:	d9402c15 	stw	r5,176(sp)
20081ad4:	054001c4 	movi	r21,7
20081ad8:	00000306 	br	20081ae8 <___vfprintf_internal_r+0x1494>
20081adc:	42000204 	addi	r8,r8,8
20081ae0:	843ffc04 	addi	r16,r16,-16
20081ae4:	943ef70e 	bge	r18,r16,200816c4 <__flash_rwdata_start+0xfffefc14>
20081ae8:	18c00404 	addi	r3,r3,16
20081aec:	10800044 	addi	r2,r2,1
20081af0:	45000015 	stw	r20,0(r8)
20081af4:	44800115 	stw	r18,4(r8)
20081af8:	d8c02015 	stw	r3,128(sp)
20081afc:	d8801f15 	stw	r2,124(sp)
20081b00:	a8bff60e 	bge	r21,r2,20081adc <__flash_rwdata_start+0xffff002c>
20081b04:	b009883a 	mov	r4,r22
20081b08:	b80b883a 	mov	r5,r23
20081b0c:	d9801e04 	addi	r6,sp,120
20081b10:	008791c0 	call	2008791c <__sprint_r>
20081b14:	103bc31e 	bne	r2,zero,20080a24 <__flash_rwdata_start+0xfffeef74>
20081b18:	d8c02017 	ldw	r3,128(sp)
20081b1c:	d8801f17 	ldw	r2,124(sp)
20081b20:	da000404 	addi	r8,sp,16
20081b24:	003fee06 	br	20081ae0 <__flash_rwdata_start+0xffff0030>
20081b28:	8888703a 	and	r4,r17,r2
20081b2c:	203eab1e 	bne	r4,zero,200815dc <__flash_rwdata_start+0xfffefb2c>
20081b30:	dc001f17 	ldw	r16,124(sp)
20081b34:	db003117 	ldw	r12,196(sp)
20081b38:	40800115 	stw	r2,4(r8)
20081b3c:	84000044 	addi	r16,r16,1
20081b40:	43000015 	stw	r12,0(r8)
20081b44:	d8c02015 	stw	r3,128(sp)
20081b48:	dc001f15 	stw	r16,124(sp)
20081b4c:	008001c4 	movi	r2,7
20081b50:	14000e16 	blt	r2,r16,20081b8c <___vfprintf_internal_r+0x1538>
20081b54:	44800204 	addi	r18,r8,8
20081b58:	003ecb06 	br	20081688 <__flash_rwdata_start+0xfffefbd8>
20081b5c:	00800034 	movhi	r2,0
20081b60:	10801984 	addi	r2,r2,102
20081b64:	d8802c15 	stw	r2,176(sp)
20081b68:	dac02c17 	ldw	r11,176(sp)
20081b6c:	1d47883a 	add	r3,r3,r21
20081b70:	84000044 	addi	r16,r16,1
20081b74:	92c00015 	stw	r11,0(r18)
20081b78:	95400115 	stw	r21,4(r18)
20081b7c:	d8c02015 	stw	r3,128(sp)
20081b80:	dc001f15 	stw	r16,124(sp)
20081b84:	008001c4 	movi	r2,7
20081b88:	143ebe0e 	bge	r2,r16,20081684 <__flash_rwdata_start+0xfffefbd4>
20081b8c:	b009883a 	mov	r4,r22
20081b90:	b80b883a 	mov	r5,r23
20081b94:	d9801e04 	addi	r6,sp,120
20081b98:	008791c0 	call	2008791c <__sprint_r>
20081b9c:	103ba11e 	bne	r2,zero,20080a24 <__flash_rwdata_start+0xfffeef74>
20081ba0:	d8c02017 	ldw	r3,128(sp)
20081ba4:	dc001f17 	ldw	r16,124(sp)
20081ba8:	dc800404 	addi	r18,sp,16
20081bac:	003eb606 	br	20081688 <__flash_rwdata_start+0xfffefbd8>
20081bb0:	b009883a 	mov	r4,r22
20081bb4:	b80b883a 	mov	r5,r23
20081bb8:	d9801e04 	addi	r6,sp,120
20081bbc:	008791c0 	call	2008791c <__sprint_r>
20081bc0:	103b981e 	bne	r2,zero,20080a24 <__flash_rwdata_start+0xfffeef74>
20081bc4:	d8c02017 	ldw	r3,128(sp)
20081bc8:	dc001f17 	ldw	r16,124(sp)
20081bcc:	da000404 	addi	r8,sp,16
20081bd0:	003e8d06 	br	20081608 <__flash_rwdata_start+0xfffefb58>
20081bd4:	b009883a 	mov	r4,r22
20081bd8:	b80b883a 	mov	r5,r23
20081bdc:	d9801e04 	addi	r6,sp,120
20081be0:	008791c0 	call	2008791c <__sprint_r>
20081be4:	103b8f1e 	bne	r2,zero,20080a24 <__flash_rwdata_start+0xfffeef74>
20081be8:	d8c02017 	ldw	r3,128(sp)
20081bec:	dc001f17 	ldw	r16,124(sp)
20081bf0:	dc800404 	addi	r18,sp,16
20081bf4:	003e8f06 	br	20081634 <__flash_rwdata_start+0xfffefb84>
20081bf8:	db001e04 	addi	r12,sp,120
20081bfc:	0025883a 	mov	r18,zero
20081c00:	db003115 	stw	r12,196(sp)
20081c04:	003be106 	br	20080b8c <__flash_rwdata_start+0xfffef0dc>
20081c08:	b009883a 	mov	r4,r22
20081c0c:	b80b883a 	mov	r5,r23
20081c10:	d9801e04 	addi	r6,sp,120
20081c14:	008791c0 	call	2008791c <__sprint_r>
20081c18:	103b821e 	bne	r2,zero,20080a24 <__flash_rwdata_start+0xfffeef74>
20081c1c:	d8c02017 	ldw	r3,128(sp)
20081c20:	da000404 	addi	r8,sp,16
20081c24:	003c3b06 	br	20080d14 <__flash_rwdata_start+0xfffef264>
20081c28:	04e7c83a 	sub	r19,zero,r19
20081c2c:	9804c03a 	cmpne	r2,r19,zero
20081c30:	0739c83a 	sub	fp,zero,fp
20081c34:	e0b9c83a 	sub	fp,fp,r2
20081c38:	05400b44 	movi	r21,45
20081c3c:	dd402785 	stb	r21,158(sp)
20081c40:	da403215 	stw	r9,200(sp)
20081c44:	00800044 	movi	r2,1
20081c48:	9f06b03a 	or	r3,r19,fp
20081c4c:	003bb506 	br	20080b24 <__flash_rwdata_start+0xfffef074>
20081c50:	da003f15 	stw	r8,252(sp)
20081c54:	da403e15 	stw	r9,248(sp)
20081c58:	00875780 	call	20087578 <__fpclassifyd>
20081c5c:	da003f17 	ldw	r8,252(sp)
20081c60:	da403e17 	ldw	r9,248(sp)
20081c64:	1000ce26 	beq	r2,zero,20081fa0 <___vfprintf_internal_r+0x194c>
20081c68:	057ff7c4 	movi	r21,-33
20081c6c:	00bfffc4 	movi	r2,-1
20081c70:	856a703a 	and	r21,r16,r21
20081c74:	4881e826 	beq	r9,r2,20082418 <___vfprintf_internal_r+0x1dc4>
20081c78:	008011c4 	movi	r2,71
20081c7c:	a881e326 	beq	r21,r2,2008240c <___vfprintf_internal_r+0x1db8>
20081c80:	db003917 	ldw	r12,228(sp)
20081c84:	8ac04014 	ori	r11,r17,256
20081c88:	dac02d15 	stw	r11,180(sp)
20081c8c:	6001ed16 	blt	r12,zero,20082444 <___vfprintf_internal_r+0x1df0>
20081c90:	dc803917 	ldw	r18,228(sp)
20081c94:	d8002b05 	stb	zero,172(sp)
20081c98:	00801984 	movi	r2,102
20081c9c:	80811826 	beq	r16,r2,20082100 <___vfprintf_internal_r+0x1aac>
20081ca0:	00801184 	movi	r2,70
20081ca4:	80811626 	beq	r16,r2,20082100 <___vfprintf_internal_r+0x1aac>
20081ca8:	00801144 	movi	r2,69
20081cac:	a881e926 	beq	r21,r2,20082454 <___vfprintf_internal_r+0x1e00>
20081cb0:	4839883a 	mov	fp,r9
20081cb4:	d8802604 	addi	r2,sp,152
20081cb8:	d8800115 	stw	r2,4(sp)
20081cbc:	d9403717 	ldw	r5,220(sp)
20081cc0:	d8802504 	addi	r2,sp,148
20081cc4:	d8800215 	stw	r2,8(sp)
20081cc8:	d8802104 	addi	r2,sp,132
20081ccc:	df000015 	stw	fp,0(sp)
20081cd0:	d8800315 	stw	r2,12(sp)
20081cd4:	b009883a 	mov	r4,r22
20081cd8:	900d883a 	mov	r6,r18
20081cdc:	01c00084 	movi	r7,2
20081ce0:	da003f15 	stw	r8,252(sp)
20081ce4:	da403e15 	stw	r9,248(sp)
20081ce8:	00829d80 	call	200829d8 <_dtoa_r>
20081cec:	d8803115 	stw	r2,196(sp)
20081cf0:	008019c4 	movi	r2,103
20081cf4:	da003f17 	ldw	r8,252(sp)
20081cf8:	da403e17 	ldw	r9,248(sp)
20081cfc:	80800226 	beq	r16,r2,20081d08 <___vfprintf_internal_r+0x16b4>
20081d00:	008011c4 	movi	r2,71
20081d04:	8081101e 	bne	r16,r2,20082148 <___vfprintf_internal_r+0x1af4>
20081d08:	8880004c 	andi	r2,r17,1
20081d0c:	1001dd26 	beq	r2,zero,20082484 <___vfprintf_internal_r+0x1e30>
20081d10:	db003117 	ldw	r12,196(sp)
20081d14:	6715883a 	add	r10,r12,fp
20081d18:	d9003717 	ldw	r4,220(sp)
20081d1c:	900b883a 	mov	r5,r18
20081d20:	000d883a 	mov	r6,zero
20081d24:	000f883a 	mov	r7,zero
20081d28:	da003f15 	stw	r8,252(sp)
20081d2c:	da403e15 	stw	r9,248(sp)
20081d30:	da803d15 	stw	r10,244(sp)
20081d34:	008b3c00 	call	2008b3c0 <__eqdf2>
20081d38:	da003f17 	ldw	r8,252(sp)
20081d3c:	da403e17 	ldw	r9,248(sp)
20081d40:	da803d17 	ldw	r10,244(sp)
20081d44:	10016526 	beq	r2,zero,200822dc <___vfprintf_internal_r+0x1c88>
20081d48:	d8802117 	ldw	r2,132(sp)
20081d4c:	1280062e 	bgeu	r2,r10,20081d68 <___vfprintf_internal_r+0x1714>
20081d50:	01000c04 	movi	r4,48
20081d54:	10c00044 	addi	r3,r2,1
20081d58:	d8c02115 	stw	r3,132(sp)
20081d5c:	11000005 	stb	r4,0(r2)
20081d60:	d8802117 	ldw	r2,132(sp)
20081d64:	12bffb36 	bltu	r2,r10,20081d54 <__flash_rwdata_start+0xffff02a4>
20081d68:	db003117 	ldw	r12,196(sp)
20081d6c:	1305c83a 	sub	r2,r2,r12
20081d70:	d8803315 	stw	r2,204(sp)
20081d74:	008011c4 	movi	r2,71
20081d78:	a8814d26 	beq	r21,r2,200822b0 <___vfprintf_internal_r+0x1c5c>
20081d7c:	00801944 	movi	r2,101
20081d80:	1402060e 	bge	r2,r16,2008259c <___vfprintf_internal_r+0x1f48>
20081d84:	00801984 	movi	r2,102
20081d88:	8081b426 	beq	r16,r2,2008245c <___vfprintf_internal_r+0x1e08>
20081d8c:	db002617 	ldw	r12,152(sp)
20081d90:	db003415 	stw	r12,208(sp)
20081d94:	db003417 	ldw	r12,208(sp)
20081d98:	dac03317 	ldw	r11,204(sp)
20081d9c:	62c1a016 	blt	r12,r11,20082420 <___vfprintf_internal_r+0x1dcc>
20081da0:	8c40004c 	andi	r17,r17,1
20081da4:	8801bf1e 	bne	r17,zero,200824a4 <___vfprintf_internal_r+0x1e50>
20081da8:	6005883a 	mov	r2,r12
20081dac:	6001b316 	blt	r12,zero,2008247c <___vfprintf_internal_r+0x1e28>
20081db0:	dc803417 	ldw	r18,208(sp)
20081db4:	df002b07 	ldb	fp,172(sp)
20081db8:	e0012e1e 	bne	fp,zero,20082274 <___vfprintf_internal_r+0x1c20>
20081dbc:	dc402d17 	ldw	r17,180(sp)
20081dc0:	dd402783 	ldbu	r21,158(sp)
20081dc4:	d8802b15 	stw	r2,172(sp)
20081dc8:	dcc02d15 	stw	r19,180(sp)
20081dcc:	d8003215 	stw	zero,200(sp)
20081dd0:	003b7306 	br	20080ba0 <__flash_rwdata_start+0xfffef0f0>
20081dd4:	00800084 	movi	r2,2
20081dd8:	003c4d06 	br	20080f10 <__flash_rwdata_start+0xfffef460>
20081ddc:	8880040c 	andi	r2,r17,16
20081de0:	1000091e 	bne	r2,zero,20081e08 <___vfprintf_internal_r+0x17b4>
20081de4:	8c40100c 	andi	r17,r17,64
20081de8:	88000726 	beq	r17,zero,20081e08 <___vfprintf_internal_r+0x17b4>
20081dec:	db002d17 	ldw	r12,180(sp)
20081df0:	dac02f17 	ldw	r11,188(sp)
20081df4:	60800017 	ldw	r2,0(r12)
20081df8:	63000104 	addi	r12,r12,4
20081dfc:	db002d15 	stw	r12,180(sp)
20081e00:	12c0000d 	sth	r11,0(r2)
20081e04:	003a4e06 	br	20080740 <__flash_rwdata_start+0xfffeec90>
20081e08:	db002d17 	ldw	r12,180(sp)
20081e0c:	dac02f17 	ldw	r11,188(sp)
20081e10:	60800017 	ldw	r2,0(r12)
20081e14:	63000104 	addi	r12,r12,4
20081e18:	db002d15 	stw	r12,180(sp)
20081e1c:	12c00015 	stw	r11,0(r2)
20081e20:	003a4706 	br	20080740 <__flash_rwdata_start+0xfffeec90>
20081e24:	1c000007 	ldb	r16,0(r3)
20081e28:	1805883a 	mov	r2,r3
20081e2c:	003a6e06 	br	200807e8 <__flash_rwdata_start+0xfffeed38>
20081e30:	88c0100c 	andi	r3,r17,64
20081e34:	18006b26 	beq	r3,zero,20081fe4 <___vfprintf_internal_r+0x1990>
20081e38:	dac02d17 	ldw	r11,180(sp)
20081e3c:	14c0000b 	ldhu	r19,0(r2)
20081e40:	0039883a 	mov	fp,zero
20081e44:	5ac00104 	addi	r11,r11,4
20081e48:	dac02d15 	stw	r11,180(sp)
20081e4c:	003cb206 	br	20081118 <__flash_rwdata_start+0xfffef668>
20081e50:	01000034 	movhi	r4,0
20081e54:	21001984 	addi	r4,r4,102
20081e58:	d9002c15 	stw	r4,176(sp)
20081e5c:	dac02c17 	ldw	r11,176(sp)
20081e60:	1c87883a 	add	r3,r3,r18
20081e64:	10800044 	addi	r2,r2,1
20081e68:	42c00015 	stw	r11,0(r8)
20081e6c:	44800115 	stw	r18,4(r8)
20081e70:	d8c02015 	stw	r3,128(sp)
20081e74:	d8801f15 	stw	r2,124(sp)
20081e78:	010001c4 	movi	r4,7
20081e7c:	20bee016 	blt	r4,r2,20081a00 <__flash_rwdata_start+0xfffeff50>
20081e80:	42000204 	addi	r8,r8,8
20081e84:	003ee506 	br	20081a1c <__flash_rwdata_start+0xfffeff6c>
20081e88:	01000034 	movhi	r4,0
20081e8c:	21001984 	addi	r4,r4,102
20081e90:	d9002c15 	stw	r4,176(sp)
20081e94:	003bbe06 	br	20080d90 <__flash_rwdata_start+0xfffef2e0>
20081e98:	b009883a 	mov	r4,r22
20081e9c:	b80b883a 	mov	r5,r23
20081ea0:	d9801e04 	addi	r6,sp,120
20081ea4:	008791c0 	call	2008791c <__sprint_r>
20081ea8:	103ade1e 	bne	r2,zero,20080a24 <__flash_rwdata_start+0xfffeef74>
20081eac:	d8c02017 	ldw	r3,128(sp)
20081eb0:	da000404 	addi	r8,sp,16
20081eb4:	003d6b06 	br	20081464 <__flash_rwdata_start+0xfffef9b4>
20081eb8:	d8801f17 	ldw	r2,124(sp)
20081ebc:	03000034 	movhi	r12,0
20081ec0:	01000044 	movi	r4,1
20081ec4:	18c00044 	addi	r3,r3,1
20081ec8:	10800044 	addi	r2,r2,1
20081ecc:	63001904 	addi	r12,r12,100
20081ed0:	41000115 	stw	r4,4(r8)
20081ed4:	43000015 	stw	r12,0(r8)
20081ed8:	d8c02015 	stw	r3,128(sp)
20081edc:	d8801f15 	stw	r2,124(sp)
20081ee0:	010001c4 	movi	r4,7
20081ee4:	20804916 	blt	r4,r2,2008200c <___vfprintf_internal_r+0x19b8>
20081ee8:	42000204 	addi	r8,r8,8
20081eec:	8000041e 	bne	r16,zero,20081f00 <___vfprintf_internal_r+0x18ac>
20081ef0:	dac03317 	ldw	r11,204(sp)
20081ef4:	5800021e 	bne	r11,zero,20081f00 <___vfprintf_internal_r+0x18ac>
20081ef8:	8880004c 	andi	r2,r17,1
20081efc:	103bbb26 	beq	r2,zero,20080dec <__flash_rwdata_start+0xfffef33c>
20081f00:	db003817 	ldw	r12,224(sp)
20081f04:	d8801f17 	ldw	r2,124(sp)
20081f08:	dac03517 	ldw	r11,212(sp)
20081f0c:	1b07883a 	add	r3,r3,r12
20081f10:	10800044 	addi	r2,r2,1
20081f14:	42c00015 	stw	r11,0(r8)
20081f18:	43000115 	stw	r12,4(r8)
20081f1c:	d8c02015 	stw	r3,128(sp)
20081f20:	d8801f15 	stw	r2,124(sp)
20081f24:	010001c4 	movi	r4,7
20081f28:	20812e16 	blt	r4,r2,200823e4 <___vfprintf_internal_r+0x1d90>
20081f2c:	42000204 	addi	r8,r8,8
20081f30:	0421c83a 	sub	r16,zero,r16
20081f34:	04005c0e 	bge	zero,r16,200820a8 <___vfprintf_internal_r+0x1a54>
20081f38:	04800404 	movi	r18,16
20081f3c:	94009f0e 	bge	r18,r16,200821bc <___vfprintf_internal_r+0x1b68>
20081f40:	01000034 	movhi	r4,0
20081f44:	21001984 	addi	r4,r4,102
20081f48:	d9002c15 	stw	r4,176(sp)
20081f4c:	054001c4 	movi	r21,7
20081f50:	00000306 	br	20081f60 <___vfprintf_internal_r+0x190c>
20081f54:	42000204 	addi	r8,r8,8
20081f58:	843ffc04 	addi	r16,r16,-16
20081f5c:	94009a0e 	bge	r18,r16,200821c8 <___vfprintf_internal_r+0x1b74>
20081f60:	18c00404 	addi	r3,r3,16
20081f64:	10800044 	addi	r2,r2,1
20081f68:	45000015 	stw	r20,0(r8)
20081f6c:	44800115 	stw	r18,4(r8)
20081f70:	d8c02015 	stw	r3,128(sp)
20081f74:	d8801f15 	stw	r2,124(sp)
20081f78:	a8bff60e 	bge	r21,r2,20081f54 <__flash_rwdata_start+0xffff04a4>
20081f7c:	b009883a 	mov	r4,r22
20081f80:	b80b883a 	mov	r5,r23
20081f84:	d9801e04 	addi	r6,sp,120
20081f88:	008791c0 	call	2008791c <__sprint_r>
20081f8c:	103aa51e 	bne	r2,zero,20080a24 <__flash_rwdata_start+0xfffeef74>
20081f90:	d8c02017 	ldw	r3,128(sp)
20081f94:	d8801f17 	ldw	r2,124(sp)
20081f98:	da000404 	addi	r8,sp,16
20081f9c:	003fee06 	br	20081f58 <__flash_rwdata_start+0xffff04a8>
20081fa0:	008011c4 	movi	r2,71
20081fa4:	1400be16 	blt	r2,r16,200822a0 <___vfprintf_internal_r+0x1c4c>
20081fa8:	03000034 	movhi	r12,0
20081fac:	63000b04 	addi	r12,r12,44
20081fb0:	db003115 	stw	r12,196(sp)
20081fb4:	00c000c4 	movi	r3,3
20081fb8:	00bfdfc4 	movi	r2,-129
20081fbc:	d8c02b15 	stw	r3,172(sp)
20081fc0:	88a2703a 	and	r17,r17,r2
20081fc4:	dd402783 	ldbu	r21,158(sp)
20081fc8:	dcc02d15 	stw	r19,180(sp)
20081fcc:	1825883a 	mov	r18,r3
20081fd0:	d8003215 	stw	zero,200(sp)
20081fd4:	d8003415 	stw	zero,208(sp)
20081fd8:	003af106 	br	20080ba0 <__flash_rwdata_start+0xfffef0f0>
20081fdc:	4825883a 	mov	r18,r9
20081fe0:	003c9306 	br	20081230 <__flash_rwdata_start+0xfffef780>
20081fe4:	db002d17 	ldw	r12,180(sp)
20081fe8:	14c00017 	ldw	r19,0(r2)
20081fec:	0039883a 	mov	fp,zero
20081ff0:	63000104 	addi	r12,r12,4
20081ff4:	db002d15 	stw	r12,180(sp)
20081ff8:	003c4706 	br	20081118 <__flash_rwdata_start+0xfffef668>
20081ffc:	00800034 	movhi	r2,0
20082000:	10800904 	addi	r2,r2,36
20082004:	d8803115 	stw	r2,196(sp)
20082008:	003bf106 	br	20080fd0 <__flash_rwdata_start+0xfffef520>
2008200c:	b009883a 	mov	r4,r22
20082010:	b80b883a 	mov	r5,r23
20082014:	d9801e04 	addi	r6,sp,120
20082018:	008791c0 	call	2008791c <__sprint_r>
2008201c:	103a811e 	bne	r2,zero,20080a24 <__flash_rwdata_start+0xfffeef74>
20082020:	dc002617 	ldw	r16,152(sp)
20082024:	d8c02017 	ldw	r3,128(sp)
20082028:	da000404 	addi	r8,sp,16
2008202c:	003faf06 	br	20081eec <__flash_rwdata_start+0xffff043c>
20082030:	db002e17 	ldw	r12,184(sp)
20082034:	1805883a 	mov	r2,r3
20082038:	dac02d15 	stw	r11,180(sp)
2008203c:	0319c83a 	sub	r12,zero,r12
20082040:	db002e15 	stw	r12,184(sp)
20082044:	003a8206 	br	20080a50 <__flash_rwdata_start+0xfffeefa0>
20082048:	18800044 	addi	r2,r3,1
2008204c:	8c400814 	ori	r17,r17,32
20082050:	1c000047 	ldb	r16,1(r3)
20082054:	0039e406 	br	200807e8 <__flash_rwdata_start+0xfffeed38>
20082058:	b009883a 	mov	r4,r22
2008205c:	b80b883a 	mov	r5,r23
20082060:	d9801e04 	addi	r6,sp,120
20082064:	008791c0 	call	2008791c <__sprint_r>
20082068:	103a6e1e 	bne	r2,zero,20080a24 <__flash_rwdata_start+0xfffeef74>
2008206c:	d8c02017 	ldw	r3,128(sp)
20082070:	da000404 	addi	r8,sp,16
20082074:	003d0c06 	br	200814a8 <__flash_rwdata_start+0xfffef9f8>
20082078:	db002817 	ldw	r12,160(sp)
2008207c:	d8c03117 	ldw	r3,196(sp)
20082080:	60e5c83a 	sub	r18,r12,r3
20082084:	003ac106 	br	20080b8c <__flash_rwdata_start+0xfffef0dc>
20082088:	b009883a 	mov	r4,r22
2008208c:	b80b883a 	mov	r5,r23
20082090:	d9801e04 	addi	r6,sp,120
20082094:	008791c0 	call	2008791c <__sprint_r>
20082098:	103a621e 	bne	r2,zero,20080a24 <__flash_rwdata_start+0xfffeef74>
2008209c:	d8c02017 	ldw	r3,128(sp)
200820a0:	d8801f17 	ldw	r2,124(sp)
200820a4:	da000404 	addi	r8,sp,16
200820a8:	db003317 	ldw	r12,204(sp)
200820ac:	dac03117 	ldw	r11,196(sp)
200820b0:	10800044 	addi	r2,r2,1
200820b4:	1b07883a 	add	r3,r3,r12
200820b8:	42c00015 	stw	r11,0(r8)
200820bc:	43000115 	stw	r12,4(r8)
200820c0:	d8c02015 	stw	r3,128(sp)
200820c4:	d8801f15 	stw	r2,124(sp)
200820c8:	010001c4 	movi	r4,7
200820cc:	20bb460e 	bge	r4,r2,20080de8 <__flash_rwdata_start+0xfffef338>
200820d0:	003d8506 	br	200816e8 <__flash_rwdata_start+0xfffefc38>
200820d4:	da003f15 	stw	r8,252(sp)
200820d8:	00805bc0 	call	200805bc <strlen>
200820dc:	1025883a 	mov	r18,r2
200820e0:	da003f17 	ldw	r8,252(sp)
200820e4:	903c540e 	bge	r18,zero,20081238 <__flash_rwdata_start+0xfffef788>
200820e8:	0005883a 	mov	r2,zero
200820ec:	003c5206 	br	20081238 <__flash_rwdata_start+0xfffef788>
200820f0:	01000034 	movhi	r4,0
200820f4:	21001d84 	addi	r4,r4,118
200820f8:	d9003615 	stw	r4,216(sp)
200820fc:	003adc06 	br	20080c70 <__flash_rwdata_start+0xfffef1c0>
20082100:	d8802604 	addi	r2,sp,152
20082104:	d8800115 	stw	r2,4(sp)
20082108:	d9403717 	ldw	r5,220(sp)
2008210c:	d8802504 	addi	r2,sp,148
20082110:	d8800215 	stw	r2,8(sp)
20082114:	d8802104 	addi	r2,sp,132
20082118:	da400015 	stw	r9,0(sp)
2008211c:	d8800315 	stw	r2,12(sp)
20082120:	b009883a 	mov	r4,r22
20082124:	900d883a 	mov	r6,r18
20082128:	01c000c4 	movi	r7,3
2008212c:	da003f15 	stw	r8,252(sp)
20082130:	da403e15 	stw	r9,248(sp)
20082134:	00829d80 	call	200829d8 <_dtoa_r>
20082138:	da403e17 	ldw	r9,248(sp)
2008213c:	da003f17 	ldw	r8,252(sp)
20082140:	d8803115 	stw	r2,196(sp)
20082144:	4839883a 	mov	fp,r9
20082148:	dac03117 	ldw	r11,196(sp)
2008214c:	00801184 	movi	r2,70
20082150:	5f15883a 	add	r10,r11,fp
20082154:	a8bef01e 	bne	r21,r2,20081d18 <__flash_rwdata_start+0xffff0268>
20082158:	59000007 	ldb	r4,0(r11)
2008215c:	00800c04 	movi	r2,48
20082160:	2080d526 	beq	r4,r2,200824b8 <___vfprintf_internal_r+0x1e64>
20082164:	d8c02617 	ldw	r3,152(sp)
20082168:	50d5883a 	add	r10,r10,r3
2008216c:	003eea06 	br	20081d18 <__flash_rwdata_start+0xffff0268>
20082170:	0025883a 	mov	r18,zero
20082174:	003db306 	br	20081844 <__flash_rwdata_start+0xfffefd94>
20082178:	b009883a 	mov	r4,r22
2008217c:	b80b883a 	mov	r5,r23
20082180:	d9801e04 	addi	r6,sp,120
20082184:	008791c0 	call	2008791c <__sprint_r>
20082188:	103a261e 	bne	r2,zero,20080a24 <__flash_rwdata_start+0xfffeef74>
2008218c:	d8c02017 	ldw	r3,128(sp)
20082190:	da000404 	addi	r8,sp,16
20082194:	003daa06 	br	20081840 <__flash_rwdata_start+0xfffefd90>
20082198:	b009883a 	mov	r4,r22
2008219c:	b80b883a 	mov	r5,r23
200821a0:	d9801e04 	addi	r6,sp,120
200821a4:	008791c0 	call	2008791c <__sprint_r>
200821a8:	103a1e1e 	bne	r2,zero,20080a24 <__flash_rwdata_start+0xfffeef74>
200821ac:	d8802617 	ldw	r2,152(sp)
200821b0:	d8c02017 	ldw	r3,128(sp)
200821b4:	da000404 	addi	r8,sp,16
200821b8:	003e2c06 	br	20081a6c <__flash_rwdata_start+0xfffeffbc>
200821bc:	03000034 	movhi	r12,0
200821c0:	63001984 	addi	r12,r12,102
200821c4:	db002c15 	stw	r12,176(sp)
200821c8:	dac02c17 	ldw	r11,176(sp)
200821cc:	1c07883a 	add	r3,r3,r16
200821d0:	10800044 	addi	r2,r2,1
200821d4:	42c00015 	stw	r11,0(r8)
200821d8:	44000115 	stw	r16,4(r8)
200821dc:	d8c02015 	stw	r3,128(sp)
200821e0:	d8801f15 	stw	r2,124(sp)
200821e4:	010001c4 	movi	r4,7
200821e8:	20bfa716 	blt	r4,r2,20082088 <__flash_rwdata_start+0xffff05d8>
200821ec:	42000204 	addi	r8,r8,8
200821f0:	003fad06 	br	200820a8 <__flash_rwdata_start+0xffff05f8>
200821f4:	00800184 	movi	r2,6
200821f8:	1240012e 	bgeu	r2,r9,20082200 <___vfprintf_internal_r+0x1bac>
200821fc:	1013883a 	mov	r9,r2
20082200:	4825883a 	mov	r18,r9
20082204:	4805883a 	mov	r2,r9
20082208:	4800c216 	blt	r9,zero,20082514 <___vfprintf_internal_r+0x1ec0>
2008220c:	d8802b15 	stw	r2,172(sp)
20082210:	00800034 	movhi	r2,0
20082214:	10801704 	addi	r2,r2,92
20082218:	d8803115 	stw	r2,196(sp)
2008221c:	dcc02d15 	stw	r19,180(sp)
20082220:	d8003215 	stw	zero,200(sp)
20082224:	d8003415 	stw	zero,208(sp)
20082228:	0005883a 	mov	r2,zero
2008222c:	003a6306 	br	20080bbc <__flash_rwdata_start+0xfffef10c>
20082230:	0021883a 	mov	r16,zero
20082234:	003e1f06 	br	20081ab4 <__flash_rwdata_start+0xffff0004>
20082238:	b009883a 	mov	r4,r22
2008223c:	b80b883a 	mov	r5,r23
20082240:	d9801e04 	addi	r6,sp,120
20082244:	008791c0 	call	2008791c <__sprint_r>
20082248:	1039f61e 	bne	r2,zero,20080a24 <__flash_rwdata_start+0xfffeef74>
2008224c:	d8802617 	ldw	r2,152(sp)
20082250:	db003317 	ldw	r12,204(sp)
20082254:	d8c02017 	ldw	r3,128(sp)
20082258:	da000404 	addi	r8,sp,16
2008225c:	6085c83a 	sub	r2,r12,r2
20082260:	003e1306 	br	20081ab0 <__flash_rwdata_start+0xffff0000>
20082264:	03000034 	movhi	r12,0
20082268:	63001d84 	addi	r12,r12,118
2008226c:	db003615 	stw	r12,216(sp)
20082270:	003b0206 	br	20080e7c <__flash_rwdata_start+0xfffef3cc>
20082274:	00c00b44 	movi	r3,45
20082278:	d8802b15 	stw	r2,172(sp)
2008227c:	dc402d17 	ldw	r17,180(sp)
20082280:	d8c02785 	stb	r3,158(sp)
20082284:	dcc02d15 	stw	r19,180(sp)
20082288:	d8003215 	stw	zero,200(sp)
2008228c:	00800b44 	movi	r2,45
20082290:	003a4706 	br	20080bb0 <__flash_rwdata_start+0xfffef100>
20082294:	05400b44 	movi	r21,45
20082298:	dd402785 	stb	r21,158(sp)
2008229c:	003b4706 	br	20080fbc <__flash_rwdata_start+0xfffef50c>
200822a0:	00800034 	movhi	r2,0
200822a4:	10800c04 	addi	r2,r2,48
200822a8:	d8803115 	stw	r2,196(sp)
200822ac:	003f4106 	br	20081fb4 <__flash_rwdata_start+0xffff0504>
200822b0:	d8c02617 	ldw	r3,152(sp)
200822b4:	00bfff44 	movi	r2,-3
200822b8:	18801116 	blt	r3,r2,20082300 <___vfprintf_internal_r+0x1cac>
200822bc:	48c01016 	blt	r9,r3,20082300 <___vfprintf_internal_r+0x1cac>
200822c0:	d8c03415 	stw	r3,208(sp)
200822c4:	040019c4 	movi	r16,103
200822c8:	003eb206 	br	20081d94 <__flash_rwdata_start+0xffff02e4>
200822cc:	01000034 	movhi	r4,0
200822d0:	21001984 	addi	r4,r4,102
200822d4:	d9002c15 	stw	r4,176(sp)
200822d8:	003cb106 	br	200815a0 <__flash_rwdata_start+0xfffefaf0>
200822dc:	5005883a 	mov	r2,r10
200822e0:	003ea106 	br	20081d68 <__flash_rwdata_start+0xffff02b8>
200822e4:	da402b15 	stw	r9,172(sp)
200822e8:	dd402783 	ldbu	r21,158(sp)
200822ec:	4825883a 	mov	r18,r9
200822f0:	dcc02d15 	stw	r19,180(sp)
200822f4:	d8003215 	stw	zero,200(sp)
200822f8:	d8003415 	stw	zero,208(sp)
200822fc:	003a2806 	br	20080ba0 <__flash_rwdata_start+0xfffef0f0>
20082300:	843fff84 	addi	r16,r16,-2
20082304:	1f3fffc4 	addi	fp,r3,-1
20082308:	df002615 	stw	fp,152(sp)
2008230c:	dc0022c5 	stb	r16,139(sp)
20082310:	e0009816 	blt	fp,zero,20082574 <___vfprintf_internal_r+0x1f20>
20082314:	00800ac4 	movi	r2,43
20082318:	d8802305 	stb	r2,140(sp)
2008231c:	00800244 	movi	r2,9
20082320:	1700750e 	bge	r2,fp,200824f8 <___vfprintf_internal_r+0x1ea4>
20082324:	dd4022c4 	addi	r21,sp,139
20082328:	dc002c15 	stw	r16,176(sp)
2008232c:	4025883a 	mov	r18,r8
20082330:	a821883a 	mov	r16,r21
20082334:	e009883a 	mov	r4,fp
20082338:	01400284 	movi	r5,10
2008233c:	008a1ec0 	call	2008a1ec <__modsi3>
20082340:	10800c04 	addi	r2,r2,48
20082344:	843fffc4 	addi	r16,r16,-1
20082348:	e009883a 	mov	r4,fp
2008234c:	01400284 	movi	r5,10
20082350:	80800005 	stb	r2,0(r16)
20082354:	008a1980 	call	2008a198 <__divsi3>
20082358:	1039883a 	mov	fp,r2
2008235c:	00800244 	movi	r2,9
20082360:	173ff416 	blt	r2,fp,20082334 <__flash_rwdata_start+0xffff0884>
20082364:	9011883a 	mov	r8,r18
20082368:	e0800c04 	addi	r2,fp,48
2008236c:	8025883a 	mov	r18,r16
20082370:	913fffc4 	addi	r4,r18,-1
20082374:	90bfffc5 	stb	r2,-1(r18)
20082378:	dc002c17 	ldw	r16,176(sp)
2008237c:	2540852e 	bgeu	r4,r21,20082594 <___vfprintf_internal_r+0x1f40>
20082380:	d9402384 	addi	r5,sp,142
20082384:	2c8bc83a 	sub	r5,r5,r18
20082388:	d8c02344 	addi	r3,sp,141
2008238c:	a94b883a 	add	r5,r21,r5
20082390:	00000106 	br	20082398 <___vfprintf_internal_r+0x1d44>
20082394:	20800003 	ldbu	r2,0(r4)
20082398:	18800005 	stb	r2,0(r3)
2008239c:	18c00044 	addi	r3,r3,1
200823a0:	21000044 	addi	r4,r4,1
200823a4:	197ffb1e 	bne	r3,r5,20082394 <__flash_rwdata_start+0xffff08e4>
200823a8:	d8802304 	addi	r2,sp,140
200823ac:	1485c83a 	sub	r2,r2,r18
200823b0:	d8c02344 	addi	r3,sp,141
200823b4:	1885883a 	add	r2,r3,r2
200823b8:	dac03317 	ldw	r11,204(sp)
200823bc:	156bc83a 	sub	r21,r2,r21
200823c0:	dd403a15 	stw	r21,232(sp)
200823c4:	00800044 	movi	r2,1
200823c8:	5d65883a 	add	r18,r11,r21
200823cc:	12c0660e 	bge	r2,r11,20082568 <___vfprintf_internal_r+0x1f14>
200823d0:	94800044 	addi	r18,r18,1
200823d4:	9005883a 	mov	r2,r18
200823d8:	90006116 	blt	r18,zero,20082560 <___vfprintf_internal_r+0x1f0c>
200823dc:	d8003415 	stw	zero,208(sp)
200823e0:	003e7406 	br	20081db4 <__flash_rwdata_start+0xffff0304>
200823e4:	b009883a 	mov	r4,r22
200823e8:	b80b883a 	mov	r5,r23
200823ec:	d9801e04 	addi	r6,sp,120
200823f0:	008791c0 	call	2008791c <__sprint_r>
200823f4:	10398b1e 	bne	r2,zero,20080a24 <__flash_rwdata_start+0xfffeef74>
200823f8:	dc002617 	ldw	r16,152(sp)
200823fc:	d8c02017 	ldw	r3,128(sp)
20082400:	d8801f17 	ldw	r2,124(sp)
20082404:	da000404 	addi	r8,sp,16
20082408:	003ec906 	br	20081f30 <__flash_rwdata_start+0xffff0480>
2008240c:	483e1c1e 	bne	r9,zero,20081c80 <__flash_rwdata_start+0xffff01d0>
20082410:	9013883a 	mov	r9,r18
20082414:	003e1a06 	br	20081c80 <__flash_rwdata_start+0xffff01d0>
20082418:	02400184 	movi	r9,6
2008241c:	003e1806 	br	20081c80 <__flash_rwdata_start+0xffff01d0>
20082420:	d8c03417 	ldw	r3,208(sp)
20082424:	00c04b0e 	bge	zero,r3,20082554 <___vfprintf_internal_r+0x1f00>
20082428:	04800044 	movi	r18,1
2008242c:	dac03317 	ldw	r11,204(sp)
20082430:	92e5883a 	add	r18,r18,r11
20082434:	9005883a 	mov	r2,r18
20082438:	903e5e0e 	bge	r18,zero,20081db4 <__flash_rwdata_start+0xffff0304>
2008243c:	0005883a 	mov	r2,zero
20082440:	003e5c06 	br	20081db4 <__flash_rwdata_start+0xffff0304>
20082444:	00c00b44 	movi	r3,45
20082448:	64a0003c 	xorhi	r18,r12,32768
2008244c:	d8c02b05 	stb	r3,172(sp)
20082450:	003e1106 	br	20081c98 <__flash_rwdata_start+0xffff01e8>
20082454:	4f000044 	addi	fp,r9,1
20082458:	003e1606 	br	20081cb4 <__flash_rwdata_start+0xffff0204>
2008245c:	d8c02617 	ldw	r3,152(sp)
20082460:	d8c03415 	stw	r3,208(sp)
20082464:	00c0350e 	bge	zero,r3,2008253c <___vfprintf_internal_r+0x1ee8>
20082468:	4800081e 	bne	r9,zero,2008248c <___vfprintf_internal_r+0x1e38>
2008246c:	8c40004c 	andi	r17,r17,1
20082470:	8800061e 	bne	r17,zero,2008248c <___vfprintf_internal_r+0x1e38>
20082474:	1805883a 	mov	r2,r3
20082478:	183e4d0e 	bge	r3,zero,20081db0 <__flash_rwdata_start+0xffff0300>
2008247c:	0005883a 	mov	r2,zero
20082480:	003e4b06 	br	20081db0 <__flash_rwdata_start+0xffff0300>
20082484:	d8802117 	ldw	r2,132(sp)
20082488:	003e3706 	br	20081d68 <__flash_rwdata_start+0xffff02b8>
2008248c:	dac03417 	ldw	r11,208(sp)
20082490:	4a400044 	addi	r9,r9,1
20082494:	5a65883a 	add	r18,r11,r9
20082498:	9005883a 	mov	r2,r18
2008249c:	903e450e 	bge	r18,zero,20081db4 <__flash_rwdata_start+0xffff0304>
200824a0:	003fe606 	br	2008243c <__flash_rwdata_start+0xffff098c>
200824a4:	db003417 	ldw	r12,208(sp)
200824a8:	64800044 	addi	r18,r12,1
200824ac:	9005883a 	mov	r2,r18
200824b0:	903e400e 	bge	r18,zero,20081db4 <__flash_rwdata_start+0xffff0304>
200824b4:	003fe106 	br	2008243c <__flash_rwdata_start+0xffff098c>
200824b8:	d9003717 	ldw	r4,220(sp)
200824bc:	900b883a 	mov	r5,r18
200824c0:	000d883a 	mov	r6,zero
200824c4:	000f883a 	mov	r7,zero
200824c8:	da003f15 	stw	r8,252(sp)
200824cc:	da403e15 	stw	r9,248(sp)
200824d0:	da803d15 	stw	r10,244(sp)
200824d4:	008b3c00 	call	2008b3c0 <__eqdf2>
200824d8:	da003f17 	ldw	r8,252(sp)
200824dc:	da403e17 	ldw	r9,248(sp)
200824e0:	da803d17 	ldw	r10,244(sp)
200824e4:	103f1f26 	beq	r2,zero,20082164 <__flash_rwdata_start+0xffff06b4>
200824e8:	00800044 	movi	r2,1
200824ec:	1707c83a 	sub	r3,r2,fp
200824f0:	d8c02615 	stw	r3,152(sp)
200824f4:	003f1c06 	br	20082168 <__flash_rwdata_start+0xffff06b8>
200824f8:	00800c04 	movi	r2,48
200824fc:	e0c00c04 	addi	r3,fp,48
20082500:	d8802345 	stb	r2,141(sp)
20082504:	d8c02385 	stb	r3,142(sp)
20082508:	d88023c4 	addi	r2,sp,143
2008250c:	dd4022c4 	addi	r21,sp,139
20082510:	003fa906 	br	200823b8 <__flash_rwdata_start+0xffff0908>
20082514:	0005883a 	mov	r2,zero
20082518:	003f3c06 	br	2008220c <__flash_rwdata_start+0xffff075c>
2008251c:	dac02d17 	ldw	r11,180(sp)
20082520:	5a400017 	ldw	r9,0(r11)
20082524:	5ac00104 	addi	r11,r11,4
20082528:	dac02d15 	stw	r11,180(sp)
2008252c:	483ec80e 	bge	r9,zero,20082050 <__flash_rwdata_start+0xffff05a0>
20082530:	027fffc4 	movi	r9,-1
20082534:	1c000047 	ldb	r16,1(r3)
20082538:	0038ab06 	br	200807e8 <__flash_rwdata_start+0xfffeed38>
2008253c:	4800111e 	bne	r9,zero,20082584 <___vfprintf_internal_r+0x1f30>
20082540:	8c40004c 	andi	r17,r17,1
20082544:	88000f1e 	bne	r17,zero,20082584 <___vfprintf_internal_r+0x1f30>
20082548:	00800044 	movi	r2,1
2008254c:	1025883a 	mov	r18,r2
20082550:	003e1806 	br	20081db4 <__flash_rwdata_start+0xffff0304>
20082554:	04800084 	movi	r18,2
20082558:	90e5c83a 	sub	r18,r18,r3
2008255c:	003fb306 	br	2008242c <__flash_rwdata_start+0xffff097c>
20082560:	0005883a 	mov	r2,zero
20082564:	003f9d06 	br	200823dc <__flash_rwdata_start+0xffff092c>
20082568:	88a2703a 	and	r17,r17,r2
2008256c:	883f9926 	beq	r17,zero,200823d4 <__flash_rwdata_start+0xffff0924>
20082570:	003f9706 	br	200823d0 <__flash_rwdata_start+0xffff0920>
20082574:	00800b44 	movi	r2,45
20082578:	0739c83a 	sub	fp,zero,fp
2008257c:	d8802305 	stb	r2,140(sp)
20082580:	003f6606 	br	2008231c <__flash_rwdata_start+0xffff086c>
20082584:	4c800084 	addi	r18,r9,2
20082588:	9005883a 	mov	r2,r18
2008258c:	903e090e 	bge	r18,zero,20081db4 <__flash_rwdata_start+0xffff0304>
20082590:	003faa06 	br	2008243c <__flash_rwdata_start+0xffff098c>
20082594:	d8802344 	addi	r2,sp,141
20082598:	003f8706 	br	200823b8 <__flash_rwdata_start+0xffff0908>
2008259c:	d8c02617 	ldw	r3,152(sp)
200825a0:	003f5806 	br	20082304 <__flash_rwdata_start+0xffff0854>

200825a4 <__vfprintf_internal>:
200825a4:	2007883a 	mov	r3,r4
200825a8:	01000034 	movhi	r4,0
200825ac:	21081104 	addi	r4,r4,8260
200825b0:	21000017 	ldw	r4,0(r4)
200825b4:	2805883a 	mov	r2,r5
200825b8:	300f883a 	mov	r7,r6
200825bc:	180b883a 	mov	r5,r3
200825c0:	100d883a 	mov	r6,r2
200825c4:	00806541 	jmpi	20080654 <___vfprintf_internal_r>

200825c8 <__sbprintf>:
200825c8:	2880030b 	ldhu	r2,12(r5)
200825cc:	2ac01917 	ldw	r11,100(r5)
200825d0:	2a80038b 	ldhu	r10,14(r5)
200825d4:	2a400717 	ldw	r9,28(r5)
200825d8:	2a000917 	ldw	r8,36(r5)
200825dc:	defee204 	addi	sp,sp,-1144
200825e0:	00c10004 	movi	r3,1024
200825e4:	dc011a15 	stw	r16,1128(sp)
200825e8:	10bfff4c 	andi	r2,r2,65533
200825ec:	2821883a 	mov	r16,r5
200825f0:	d8cb883a 	add	r5,sp,r3
200825f4:	dc811c15 	stw	r18,1136(sp)
200825f8:	dc411b15 	stw	r17,1132(sp)
200825fc:	dfc11d15 	stw	ra,1140(sp)
20082600:	2025883a 	mov	r18,r4
20082604:	d881030d 	sth	r2,1036(sp)
20082608:	dac11915 	stw	r11,1124(sp)
2008260c:	da81038d 	sth	r10,1038(sp)
20082610:	da410715 	stw	r9,1052(sp)
20082614:	da010915 	stw	r8,1060(sp)
20082618:	dec10015 	stw	sp,1024(sp)
2008261c:	dec10415 	stw	sp,1040(sp)
20082620:	d8c10215 	stw	r3,1032(sp)
20082624:	d8c10515 	stw	r3,1044(sp)
20082628:	d8010615 	stw	zero,1048(sp)
2008262c:	00806540 	call	20080654 <___vfprintf_internal_r>
20082630:	1023883a 	mov	r17,r2
20082634:	10000416 	blt	r2,zero,20082648 <__sbprintf+0x80>
20082638:	9009883a 	mov	r4,r18
2008263c:	d9410004 	addi	r5,sp,1024
20082640:	00843080 	call	20084308 <_fflush_r>
20082644:	10000d1e 	bne	r2,zero,2008267c <__sbprintf+0xb4>
20082648:	d8c1030b 	ldhu	r3,1036(sp)
2008264c:	18c0100c 	andi	r3,r3,64
20082650:	18000326 	beq	r3,zero,20082660 <__sbprintf+0x98>
20082654:	8080030b 	ldhu	r2,12(r16)
20082658:	10801014 	ori	r2,r2,64
2008265c:	8080030d 	sth	r2,12(r16)
20082660:	8805883a 	mov	r2,r17
20082664:	dfc11d17 	ldw	ra,1140(sp)
20082668:	dc811c17 	ldw	r18,1136(sp)
2008266c:	dc411b17 	ldw	r17,1132(sp)
20082670:	dc011a17 	ldw	r16,1128(sp)
20082674:	dec11e04 	addi	sp,sp,1144
20082678:	f800283a 	ret
2008267c:	047fffc4 	movi	r17,-1
20082680:	003ff106 	br	20082648 <__flash_rwdata_start+0xffff0b98>

20082684 <__swsetup_r>:
20082684:	00800034 	movhi	r2,0
20082688:	defffd04 	addi	sp,sp,-12
2008268c:	10881104 	addi	r2,r2,8260
20082690:	dc400115 	stw	r17,4(sp)
20082694:	2023883a 	mov	r17,r4
20082698:	11000017 	ldw	r4,0(r2)
2008269c:	dc000015 	stw	r16,0(sp)
200826a0:	dfc00215 	stw	ra,8(sp)
200826a4:	2821883a 	mov	r16,r5
200826a8:	20000226 	beq	r4,zero,200826b4 <__swsetup_r+0x30>
200826ac:	20c00e17 	ldw	r3,56(r4)
200826b0:	18003126 	beq	r3,zero,20082778 <__swsetup_r+0xf4>
200826b4:	8080030b 	ldhu	r2,12(r16)
200826b8:	10c0020c 	andi	r3,r2,8
200826bc:	100d883a 	mov	r6,r2
200826c0:	18000f26 	beq	r3,zero,20082700 <__swsetup_r+0x7c>
200826c4:	80c00417 	ldw	r3,16(r16)
200826c8:	18001526 	beq	r3,zero,20082720 <__swsetup_r+0x9c>
200826cc:	1100004c 	andi	r4,r2,1
200826d0:	20001c1e 	bne	r4,zero,20082744 <__swsetup_r+0xc0>
200826d4:	1080008c 	andi	r2,r2,2
200826d8:	1000291e 	bne	r2,zero,20082780 <__swsetup_r+0xfc>
200826dc:	80800517 	ldw	r2,20(r16)
200826e0:	80800215 	stw	r2,8(r16)
200826e4:	18001c26 	beq	r3,zero,20082758 <__swsetup_r+0xd4>
200826e8:	0005883a 	mov	r2,zero
200826ec:	dfc00217 	ldw	ra,8(sp)
200826f0:	dc400117 	ldw	r17,4(sp)
200826f4:	dc000017 	ldw	r16,0(sp)
200826f8:	dec00304 	addi	sp,sp,12
200826fc:	f800283a 	ret
20082700:	3080040c 	andi	r2,r6,16
20082704:	10002e26 	beq	r2,zero,200827c0 <__swsetup_r+0x13c>
20082708:	3080010c 	andi	r2,r6,4
2008270c:	10001e1e 	bne	r2,zero,20082788 <__swsetup_r+0x104>
20082710:	80c00417 	ldw	r3,16(r16)
20082714:	30800214 	ori	r2,r6,8
20082718:	8080030d 	sth	r2,12(r16)
2008271c:	183feb1e 	bne	r3,zero,200826cc <__flash_rwdata_start+0xffff0c1c>
20082720:	1140a00c 	andi	r5,r2,640
20082724:	01008004 	movi	r4,512
20082728:	293fe826 	beq	r5,r4,200826cc <__flash_rwdata_start+0xffff0c1c>
2008272c:	8809883a 	mov	r4,r17
20082730:	800b883a 	mov	r5,r16
20082734:	00852700 	call	20085270 <__smakebuf_r>
20082738:	8080030b 	ldhu	r2,12(r16)
2008273c:	80c00417 	ldw	r3,16(r16)
20082740:	003fe206 	br	200826cc <__flash_rwdata_start+0xffff0c1c>
20082744:	80800517 	ldw	r2,20(r16)
20082748:	80000215 	stw	zero,8(r16)
2008274c:	0085c83a 	sub	r2,zero,r2
20082750:	80800615 	stw	r2,24(r16)
20082754:	183fe41e 	bne	r3,zero,200826e8 <__flash_rwdata_start+0xffff0c38>
20082758:	80c0030b 	ldhu	r3,12(r16)
2008275c:	0005883a 	mov	r2,zero
20082760:	1900200c 	andi	r4,r3,128
20082764:	203fe126 	beq	r4,zero,200826ec <__flash_rwdata_start+0xffff0c3c>
20082768:	18c01014 	ori	r3,r3,64
2008276c:	80c0030d 	sth	r3,12(r16)
20082770:	00bfffc4 	movi	r2,-1
20082774:	003fdd06 	br	200826ec <__flash_rwdata_start+0xffff0c3c>
20082778:	00846e40 	call	200846e4 <__sinit>
2008277c:	003fcd06 	br	200826b4 <__flash_rwdata_start+0xffff0c04>
20082780:	0005883a 	mov	r2,zero
20082784:	003fd606 	br	200826e0 <__flash_rwdata_start+0xffff0c30>
20082788:	81400c17 	ldw	r5,48(r16)
2008278c:	28000626 	beq	r5,zero,200827a8 <__swsetup_r+0x124>
20082790:	80801004 	addi	r2,r16,64
20082794:	28800326 	beq	r5,r2,200827a4 <__swsetup_r+0x120>
20082798:	8809883a 	mov	r4,r17
2008279c:	00848580 	call	20084858 <_free_r>
200827a0:	8180030b 	ldhu	r6,12(r16)
200827a4:	80000c15 	stw	zero,48(r16)
200827a8:	80c00417 	ldw	r3,16(r16)
200827ac:	00bff6c4 	movi	r2,-37
200827b0:	118c703a 	and	r6,r2,r6
200827b4:	80000115 	stw	zero,4(r16)
200827b8:	80c00015 	stw	r3,0(r16)
200827bc:	003fd506 	br	20082714 <__flash_rwdata_start+0xffff0c64>
200827c0:	00800244 	movi	r2,9
200827c4:	88800015 	stw	r2,0(r17)
200827c8:	30801014 	ori	r2,r6,64
200827cc:	8080030d 	sth	r2,12(r16)
200827d0:	00bfffc4 	movi	r2,-1
200827d4:	003fc506 	br	200826ec <__flash_rwdata_start+0xffff0c3c>

200827d8 <quorem>:
200827d8:	defff704 	addi	sp,sp,-36
200827dc:	dc800215 	stw	r18,8(sp)
200827e0:	20800417 	ldw	r2,16(r4)
200827e4:	2c800417 	ldw	r18,16(r5)
200827e8:	dfc00815 	stw	ra,32(sp)
200827ec:	ddc00715 	stw	r23,28(sp)
200827f0:	dd800615 	stw	r22,24(sp)
200827f4:	dd400515 	stw	r21,20(sp)
200827f8:	dd000415 	stw	r20,16(sp)
200827fc:	dcc00315 	stw	r19,12(sp)
20082800:	dc400115 	stw	r17,4(sp)
20082804:	dc000015 	stw	r16,0(sp)
20082808:	14807116 	blt	r2,r18,200829d0 <quorem+0x1f8>
2008280c:	94bfffc4 	addi	r18,r18,-1
20082810:	94ad883a 	add	r22,r18,r18
20082814:	b5ad883a 	add	r22,r22,r22
20082818:	2c400504 	addi	r17,r5,20
2008281c:	8da9883a 	add	r20,r17,r22
20082820:	25400504 	addi	r21,r4,20
20082824:	282f883a 	mov	r23,r5
20082828:	adad883a 	add	r22,r21,r22
2008282c:	a1400017 	ldw	r5,0(r20)
20082830:	2021883a 	mov	r16,r4
20082834:	b1000017 	ldw	r4,0(r22)
20082838:	29400044 	addi	r5,r5,1
2008283c:	008a2480 	call	2008a248 <__udivsi3>
20082840:	1027883a 	mov	r19,r2
20082844:	10002c26 	beq	r2,zero,200828f8 <quorem+0x120>
20082848:	a813883a 	mov	r9,r21
2008284c:	8811883a 	mov	r8,r17
20082850:	0009883a 	mov	r4,zero
20082854:	000d883a 	mov	r6,zero
20082858:	41c00017 	ldw	r7,0(r8)
2008285c:	49400017 	ldw	r5,0(r9)
20082860:	42000104 	addi	r8,r8,4
20082864:	38bfffcc 	andi	r2,r7,65535
20082868:	14c5383a 	mul	r2,r2,r19
2008286c:	380ed43a 	srli	r7,r7,16
20082870:	28ffffcc 	andi	r3,r5,65535
20082874:	2085883a 	add	r2,r4,r2
20082878:	1008d43a 	srli	r4,r2,16
2008287c:	3ccf383a 	mul	r7,r7,r19
20082880:	198d883a 	add	r6,r3,r6
20082884:	10ffffcc 	andi	r3,r2,65535
20082888:	30c7c83a 	sub	r3,r6,r3
2008288c:	280ad43a 	srli	r5,r5,16
20082890:	21c9883a 	add	r4,r4,r7
20082894:	180dd43a 	srai	r6,r3,16
20082898:	20bfffcc 	andi	r2,r4,65535
2008289c:	288bc83a 	sub	r5,r5,r2
200828a0:	298b883a 	add	r5,r5,r6
200828a4:	280e943a 	slli	r7,r5,16
200828a8:	18ffffcc 	andi	r3,r3,65535
200828ac:	2008d43a 	srli	r4,r4,16
200828b0:	38ceb03a 	or	r7,r7,r3
200828b4:	49c00015 	stw	r7,0(r9)
200828b8:	280dd43a 	srai	r6,r5,16
200828bc:	4a400104 	addi	r9,r9,4
200828c0:	a23fe52e 	bgeu	r20,r8,20082858 <__flash_rwdata_start+0xffff0da8>
200828c4:	b0800017 	ldw	r2,0(r22)
200828c8:	10000b1e 	bne	r2,zero,200828f8 <quorem+0x120>
200828cc:	b0bfff04 	addi	r2,r22,-4
200828d0:	a880082e 	bgeu	r21,r2,200828f4 <quorem+0x11c>
200828d4:	b0ffff17 	ldw	r3,-4(r22)
200828d8:	18000326 	beq	r3,zero,200828e8 <quorem+0x110>
200828dc:	00000506 	br	200828f4 <quorem+0x11c>
200828e0:	10c00017 	ldw	r3,0(r2)
200828e4:	1800031e 	bne	r3,zero,200828f4 <quorem+0x11c>
200828e8:	10bfff04 	addi	r2,r2,-4
200828ec:	94bfffc4 	addi	r18,r18,-1
200828f0:	a8bffb36 	bltu	r21,r2,200828e0 <__flash_rwdata_start+0xffff0e30>
200828f4:	84800415 	stw	r18,16(r16)
200828f8:	8009883a 	mov	r4,r16
200828fc:	b80b883a 	mov	r5,r23
20082900:	00869440 	call	20086944 <__mcmp>
20082904:	10002616 	blt	r2,zero,200829a0 <quorem+0x1c8>
20082908:	9cc00044 	addi	r19,r19,1
2008290c:	a80d883a 	mov	r6,r21
20082910:	000b883a 	mov	r5,zero
20082914:	31000017 	ldw	r4,0(r6)
20082918:	88800017 	ldw	r2,0(r17)
2008291c:	31800104 	addi	r6,r6,4
20082920:	20ffffcc 	andi	r3,r4,65535
20082924:	194b883a 	add	r5,r3,r5
20082928:	10ffffcc 	andi	r3,r2,65535
2008292c:	28c7c83a 	sub	r3,r5,r3
20082930:	1004d43a 	srli	r2,r2,16
20082934:	2008d43a 	srli	r4,r4,16
20082938:	180bd43a 	srai	r5,r3,16
2008293c:	18ffffcc 	andi	r3,r3,65535
20082940:	2089c83a 	sub	r4,r4,r2
20082944:	2149883a 	add	r4,r4,r5
20082948:	2004943a 	slli	r2,r4,16
2008294c:	8c400104 	addi	r17,r17,4
20082950:	200bd43a 	srai	r5,r4,16
20082954:	10c6b03a 	or	r3,r2,r3
20082958:	30ffff15 	stw	r3,-4(r6)
2008295c:	a47fed2e 	bgeu	r20,r17,20082914 <__flash_rwdata_start+0xffff0e64>
20082960:	9485883a 	add	r2,r18,r18
20082964:	1085883a 	add	r2,r2,r2
20082968:	a887883a 	add	r3,r21,r2
2008296c:	18800017 	ldw	r2,0(r3)
20082970:	10000b1e 	bne	r2,zero,200829a0 <quorem+0x1c8>
20082974:	18bfff04 	addi	r2,r3,-4
20082978:	a880082e 	bgeu	r21,r2,2008299c <quorem+0x1c4>
2008297c:	18ffff17 	ldw	r3,-4(r3)
20082980:	18000326 	beq	r3,zero,20082990 <quorem+0x1b8>
20082984:	00000506 	br	2008299c <quorem+0x1c4>
20082988:	10c00017 	ldw	r3,0(r2)
2008298c:	1800031e 	bne	r3,zero,2008299c <quorem+0x1c4>
20082990:	10bfff04 	addi	r2,r2,-4
20082994:	94bfffc4 	addi	r18,r18,-1
20082998:	a8bffb36 	bltu	r21,r2,20082988 <__flash_rwdata_start+0xffff0ed8>
2008299c:	84800415 	stw	r18,16(r16)
200829a0:	9805883a 	mov	r2,r19
200829a4:	dfc00817 	ldw	ra,32(sp)
200829a8:	ddc00717 	ldw	r23,28(sp)
200829ac:	dd800617 	ldw	r22,24(sp)
200829b0:	dd400517 	ldw	r21,20(sp)
200829b4:	dd000417 	ldw	r20,16(sp)
200829b8:	dcc00317 	ldw	r19,12(sp)
200829bc:	dc800217 	ldw	r18,8(sp)
200829c0:	dc400117 	ldw	r17,4(sp)
200829c4:	dc000017 	ldw	r16,0(sp)
200829c8:	dec00904 	addi	sp,sp,36
200829cc:	f800283a 	ret
200829d0:	0005883a 	mov	r2,zero
200829d4:	003ff306 	br	200829a4 <__flash_rwdata_start+0xffff0ef4>

200829d8 <_dtoa_r>:
200829d8:	20801017 	ldw	r2,64(r4)
200829dc:	deffde04 	addi	sp,sp,-136
200829e0:	dd401d15 	stw	r21,116(sp)
200829e4:	dcc01b15 	stw	r19,108(sp)
200829e8:	dc801a15 	stw	r18,104(sp)
200829ec:	dc401915 	stw	r17,100(sp)
200829f0:	dc001815 	stw	r16,96(sp)
200829f4:	dfc02115 	stw	ra,132(sp)
200829f8:	df002015 	stw	fp,128(sp)
200829fc:	ddc01f15 	stw	r23,124(sp)
20082a00:	dd801e15 	stw	r22,120(sp)
20082a04:	dd001c15 	stw	r20,112(sp)
20082a08:	d9c00315 	stw	r7,12(sp)
20082a0c:	2021883a 	mov	r16,r4
20082a10:	302b883a 	mov	r21,r6
20082a14:	2825883a 	mov	r18,r5
20082a18:	dc402417 	ldw	r17,144(sp)
20082a1c:	3027883a 	mov	r19,r6
20082a20:	10000826 	beq	r2,zero,20082a44 <_dtoa_r+0x6c>
20082a24:	21801117 	ldw	r6,68(r4)
20082a28:	00c00044 	movi	r3,1
20082a2c:	100b883a 	mov	r5,r2
20082a30:	1986983a 	sll	r3,r3,r6
20082a34:	11800115 	stw	r6,4(r2)
20082a38:	10c00215 	stw	r3,8(r2)
20082a3c:	00861180 	call	20086118 <_Bfree>
20082a40:	80001015 	stw	zero,64(r16)
20082a44:	a8002d16 	blt	r21,zero,20082afc <_dtoa_r+0x124>
20082a48:	88000015 	stw	zero,0(r17)
20082a4c:	a8dffc2c 	andhi	r3,r21,32752
20082a50:	009ffc34 	movhi	r2,32752
20082a54:	18801b26 	beq	r3,r2,20082ac4 <_dtoa_r+0xec>
20082a58:	9009883a 	mov	r4,r18
20082a5c:	980b883a 	mov	r5,r19
20082a60:	000d883a 	mov	r6,zero
20082a64:	000f883a 	mov	r7,zero
20082a68:	008b3c00 	call	2008b3c0 <__eqdf2>
20082a6c:	10002a1e 	bne	r2,zero,20082b18 <_dtoa_r+0x140>
20082a70:	d8c02317 	ldw	r3,140(sp)
20082a74:	d9002517 	ldw	r4,148(sp)
20082a78:	00800044 	movi	r2,1
20082a7c:	18800015 	stw	r2,0(r3)
20082a80:	2001a226 	beq	r4,zero,2008310c <_dtoa_r+0x734>
20082a84:	00800034 	movhi	r2,0
20082a88:	10801944 	addi	r2,r2,101
20082a8c:	20800015 	stw	r2,0(r4)
20082a90:	10bfffc4 	addi	r2,r2,-1
20082a94:	dfc02117 	ldw	ra,132(sp)
20082a98:	df002017 	ldw	fp,128(sp)
20082a9c:	ddc01f17 	ldw	r23,124(sp)
20082aa0:	dd801e17 	ldw	r22,120(sp)
20082aa4:	dd401d17 	ldw	r21,116(sp)
20082aa8:	dd001c17 	ldw	r20,112(sp)
20082aac:	dcc01b17 	ldw	r19,108(sp)
20082ab0:	dc801a17 	ldw	r18,104(sp)
20082ab4:	dc401917 	ldw	r17,100(sp)
20082ab8:	dc001817 	ldw	r16,96(sp)
20082abc:	dec02204 	addi	sp,sp,136
20082ac0:	f800283a 	ret
20082ac4:	d8c02317 	ldw	r3,140(sp)
20082ac8:	0089c3c4 	movi	r2,9999
20082acc:	18800015 	stw	r2,0(r3)
20082ad0:	90017c26 	beq	r18,zero,200830c4 <_dtoa_r+0x6ec>
20082ad4:	00800034 	movhi	r2,0
20082ad8:	10802504 	addi	r2,r2,148
20082adc:	d9002517 	ldw	r4,148(sp)
20082ae0:	203fec26 	beq	r4,zero,20082a94 <__flash_rwdata_start+0xffff0fe4>
20082ae4:	10c000c7 	ldb	r3,3(r2)
20082ae8:	18017d1e 	bne	r3,zero,200830e0 <_dtoa_r+0x708>
20082aec:	10c000c4 	addi	r3,r2,3
20082af0:	d9802517 	ldw	r6,148(sp)
20082af4:	30c00015 	stw	r3,0(r6)
20082af8:	003fe606 	br	20082a94 <__flash_rwdata_start+0xffff0fe4>
20082afc:	04e00034 	movhi	r19,32768
20082b00:	9cffffc4 	addi	r19,r19,-1
20082b04:	00800044 	movi	r2,1
20082b08:	ace6703a 	and	r19,r21,r19
20082b0c:	88800015 	stw	r2,0(r17)
20082b10:	982b883a 	mov	r21,r19
20082b14:	003fcd06 	br	20082a4c <__flash_rwdata_start+0xffff0f9c>
20082b18:	d8800204 	addi	r2,sp,8
20082b1c:	a822d53a 	srli	r17,r21,20
20082b20:	d8800015 	stw	r2,0(sp)
20082b24:	8009883a 	mov	r4,r16
20082b28:	900b883a 	mov	r5,r18
20082b2c:	980d883a 	mov	r6,r19
20082b30:	d9c00104 	addi	r7,sp,4
20082b34:	0086cb80 	call	20086cb8 <__d2b>
20082b38:	1039883a 	mov	fp,r2
20082b3c:	88016a1e 	bne	r17,zero,200830e8 <_dtoa_r+0x710>
20082b40:	dd000217 	ldw	r20,8(sp)
20082b44:	dc400117 	ldw	r17,4(sp)
20082b48:	00befbc4 	movi	r2,-1041
20082b4c:	a463883a 	add	r17,r20,r17
20082b50:	8882ea16 	blt	r17,r2,200836fc <_dtoa_r+0xd24>
20082b54:	00bf0384 	movi	r2,-1010
20082b58:	1445c83a 	sub	r2,r2,r17
20082b5c:	89010484 	addi	r4,r17,1042
20082b60:	a8aa983a 	sll	r21,r21,r2
20082b64:	9108d83a 	srl	r4,r18,r4
20082b68:	a908b03a 	or	r4,r21,r4
20082b6c:	008c7500 	call	2008c750 <__floatunsidf>
20082b70:	017f8434 	movhi	r5,65040
20082b74:	01800044 	movi	r6,1
20082b78:	1009883a 	mov	r4,r2
20082b7c:	194b883a 	add	r5,r3,r5
20082b80:	8c7fffc4 	addi	r17,r17,-1
20082b84:	d9800f15 	stw	r6,60(sp)
20082b88:	000d883a 	mov	r6,zero
20082b8c:	01cffe34 	movhi	r7,16376
20082b90:	008bd280 	call	2008bd28 <__subdf3>
20082b94:	0198dbf4 	movhi	r6,25455
20082b98:	01cff4f4 	movhi	r7,16339
20082b9c:	1009883a 	mov	r4,r2
20082ba0:	180b883a 	mov	r5,r3
20082ba4:	3190d844 	addi	r6,r6,17249
20082ba8:	39e1e9c4 	addi	r7,r7,-30809
20082bac:	008b6040 	call	2008b604 <__muldf3>
20082bb0:	01a2d874 	movhi	r6,35681
20082bb4:	01cff1f4 	movhi	r7,16327
20082bb8:	180b883a 	mov	r5,r3
20082bbc:	31b22cc4 	addi	r6,r6,-14157
20082bc0:	39e28a04 	addi	r7,r7,-30168
20082bc4:	1009883a 	mov	r4,r2
20082bc8:	008a2580 	call	2008a258 <__adddf3>
20082bcc:	8809883a 	mov	r4,r17
20082bd0:	102d883a 	mov	r22,r2
20082bd4:	182b883a 	mov	r21,r3
20082bd8:	008c6800 	call	2008c680 <__floatsidf>
20082bdc:	019427f4 	movhi	r6,20639
20082be0:	01cff4f4 	movhi	r7,16339
20082be4:	1009883a 	mov	r4,r2
20082be8:	180b883a 	mov	r5,r3
20082bec:	319e7ec4 	addi	r6,r6,31227
20082bf0:	39d104c4 	addi	r7,r7,17427
20082bf4:	008b6040 	call	2008b604 <__muldf3>
20082bf8:	b009883a 	mov	r4,r22
20082bfc:	a80b883a 	mov	r5,r21
20082c00:	100d883a 	mov	r6,r2
20082c04:	180f883a 	mov	r7,r3
20082c08:	008a2580 	call	2008a258 <__adddf3>
20082c0c:	1009883a 	mov	r4,r2
20082c10:	180b883a 	mov	r5,r3
20082c14:	102d883a 	mov	r22,r2
20082c18:	182b883a 	mov	r21,r3
20082c1c:	008c5f80 	call	2008c5f8 <__fixdfsi>
20082c20:	b009883a 	mov	r4,r22
20082c24:	a80b883a 	mov	r5,r21
20082c28:	000d883a 	mov	r6,zero
20082c2c:	000f883a 	mov	r7,zero
20082c30:	d8800515 	stw	r2,20(sp)
20082c34:	008b5240 	call	2008b524 <__ledf2>
20082c38:	10023116 	blt	r2,zero,20083500 <_dtoa_r+0xb28>
20082c3c:	d8c00517 	ldw	r3,20(sp)
20082c40:	00800584 	movi	r2,22
20082c44:	10c21f36 	bltu	r2,r3,200834c4 <_dtoa_r+0xaec>
20082c48:	180490fa 	slli	r2,r3,3
20082c4c:	00c00034 	movhi	r3,0
20082c50:	18c04104 	addi	r3,r3,260
20082c54:	1885883a 	add	r2,r3,r2
20082c58:	11000017 	ldw	r4,0(r2)
20082c5c:	11400117 	ldw	r5,4(r2)
20082c60:	900d883a 	mov	r6,r18
20082c64:	980f883a 	mov	r7,r19
20082c68:	008b4440 	call	2008b444 <__gedf2>
20082c6c:	0082a70e 	bge	zero,r2,2008370c <_dtoa_r+0xd34>
20082c70:	d9000517 	ldw	r4,20(sp)
20082c74:	d8000d15 	stw	zero,52(sp)
20082c78:	213fffc4 	addi	r4,r4,-1
20082c7c:	d9000515 	stw	r4,20(sp)
20082c80:	a463c83a 	sub	r17,r20,r17
20082c84:	8dbfffc4 	addi	r22,r17,-1
20082c88:	b0021916 	blt	r22,zero,200834f0 <_dtoa_r+0xb18>
20082c8c:	d8000815 	stw	zero,32(sp)
20082c90:	d8800517 	ldw	r2,20(sp)
20082c94:	10020e16 	blt	r2,zero,200834d0 <_dtoa_r+0xaf8>
20082c98:	b0ad883a 	add	r22,r22,r2
20082c9c:	d8800a15 	stw	r2,40(sp)
20082ca0:	d8000915 	stw	zero,36(sp)
20082ca4:	d8c00317 	ldw	r3,12(sp)
20082ca8:	00800244 	movi	r2,9
20082cac:	10c11a36 	bltu	r2,r3,20083118 <_dtoa_r+0x740>
20082cb0:	00800144 	movi	r2,5
20082cb4:	10c4fc0e 	bge	r2,r3,200840a8 <_dtoa_r+0x16d0>
20082cb8:	18ffff04 	addi	r3,r3,-4
20082cbc:	d8c00315 	stw	r3,12(sp)
20082cc0:	0029883a 	mov	r20,zero
20082cc4:	d9800317 	ldw	r6,12(sp)
20082cc8:	008000c4 	movi	r2,3
20082ccc:	3083bd26 	beq	r6,r2,20083bc4 <_dtoa_r+0x11ec>
20082cd0:	1183670e 	bge	r2,r6,20083a70 <_dtoa_r+0x1098>
20082cd4:	d8c00317 	ldw	r3,12(sp)
20082cd8:	00800104 	movi	r2,4
20082cdc:	1882e726 	beq	r3,r2,2008387c <_dtoa_r+0xea4>
20082ce0:	00800144 	movi	r2,5
20082ce4:	1884f21e 	bne	r3,r2,200840b0 <_dtoa_r+0x16d8>
20082ce8:	00800044 	movi	r2,1
20082cec:	d8800b15 	stw	r2,44(sp)
20082cf0:	d8c02217 	ldw	r3,136(sp)
20082cf4:	d9000517 	ldw	r4,20(sp)
20082cf8:	1907883a 	add	r3,r3,r4
20082cfc:	19800044 	addi	r6,r3,1
20082d00:	d8c00c15 	stw	r3,48(sp)
20082d04:	d9800615 	stw	r6,24(sp)
20082d08:	0183c30e 	bge	zero,r6,20083c18 <_dtoa_r+0x1240>
20082d0c:	d9800617 	ldw	r6,24(sp)
20082d10:	3023883a 	mov	r17,r6
20082d14:	80001115 	stw	zero,68(r16)
20082d18:	008005c4 	movi	r2,23
20082d1c:	1184f62e 	bgeu	r2,r6,200840f8 <_dtoa_r+0x1720>
20082d20:	00c00044 	movi	r3,1
20082d24:	00800104 	movi	r2,4
20082d28:	1085883a 	add	r2,r2,r2
20082d2c:	11000504 	addi	r4,r2,20
20082d30:	180b883a 	mov	r5,r3
20082d34:	18c00044 	addi	r3,r3,1
20082d38:	313ffb2e 	bgeu	r6,r4,20082d28 <__flash_rwdata_start+0xffff1278>
20082d3c:	81401115 	stw	r5,68(r16)
20082d40:	8009883a 	mov	r4,r16
20082d44:	00860700 	call	20086070 <_Balloc>
20082d48:	d8800715 	stw	r2,28(sp)
20082d4c:	80801015 	stw	r2,64(r16)
20082d50:	00800384 	movi	r2,14
20082d54:	1440fd36 	bltu	r2,r17,2008314c <_dtoa_r+0x774>
20082d58:	a000fc26 	beq	r20,zero,2008314c <_dtoa_r+0x774>
20082d5c:	d8800517 	ldw	r2,20(sp)
20082d60:	0083b90e 	bge	zero,r2,20083c48 <_dtoa_r+0x1270>
20082d64:	d8c00517 	ldw	r3,20(sp)
20082d68:	108003cc 	andi	r2,r2,15
20082d6c:	100490fa 	slli	r2,r2,3
20082d70:	182fd13a 	srai	r23,r3,4
20082d74:	00c00034 	movhi	r3,0
20082d78:	18c04104 	addi	r3,r3,260
20082d7c:	1885883a 	add	r2,r3,r2
20082d80:	b8c0040c 	andi	r3,r23,16
20082d84:	12c00017 	ldw	r11,0(r2)
20082d88:	12800117 	ldw	r10,4(r2)
20082d8c:	18039726 	beq	r3,zero,20083bec <_dtoa_r+0x1214>
20082d90:	00800034 	movhi	r2,0
20082d94:	10803704 	addi	r2,r2,220
20082d98:	11800817 	ldw	r6,32(r2)
20082d9c:	11c00917 	ldw	r7,36(r2)
20082da0:	9009883a 	mov	r4,r18
20082da4:	980b883a 	mov	r5,r19
20082da8:	da801615 	stw	r10,88(sp)
20082dac:	dac01515 	stw	r11,84(sp)
20082db0:	008aaf40 	call	2008aaf4 <__divdf3>
20082db4:	da801617 	ldw	r10,88(sp)
20082db8:	dac01517 	ldw	r11,84(sp)
20082dbc:	bdc003cc 	andi	r23,r23,15
20082dc0:	044000c4 	movi	r17,3
20082dc4:	d8800e15 	stw	r2,56(sp)
20082dc8:	182b883a 	mov	r21,r3
20082dcc:	b8001126 	beq	r23,zero,20082e14 <_dtoa_r+0x43c>
20082dd0:	05000034 	movhi	r20,0
20082dd4:	a5003704 	addi	r20,r20,220
20082dd8:	5805883a 	mov	r2,r11
20082ddc:	5007883a 	mov	r3,r10
20082de0:	b980004c 	andi	r6,r23,1
20082de4:	1009883a 	mov	r4,r2
20082de8:	b82fd07a 	srai	r23,r23,1
20082dec:	180b883a 	mov	r5,r3
20082df0:	30000426 	beq	r6,zero,20082e04 <_dtoa_r+0x42c>
20082df4:	a1800017 	ldw	r6,0(r20)
20082df8:	a1c00117 	ldw	r7,4(r20)
20082dfc:	8c400044 	addi	r17,r17,1
20082e00:	008b6040 	call	2008b604 <__muldf3>
20082e04:	a5000204 	addi	r20,r20,8
20082e08:	b83ff51e 	bne	r23,zero,20082de0 <__flash_rwdata_start+0xffff1330>
20082e0c:	1017883a 	mov	r11,r2
20082e10:	1815883a 	mov	r10,r3
20082e14:	d9000e17 	ldw	r4,56(sp)
20082e18:	a80b883a 	mov	r5,r21
20082e1c:	580d883a 	mov	r6,r11
20082e20:	500f883a 	mov	r7,r10
20082e24:	008aaf40 	call	2008aaf4 <__divdf3>
20082e28:	1029883a 	mov	r20,r2
20082e2c:	182b883a 	mov	r21,r3
20082e30:	d9800d17 	ldw	r6,52(sp)
20082e34:	30000626 	beq	r6,zero,20082e50 <_dtoa_r+0x478>
20082e38:	a009883a 	mov	r4,r20
20082e3c:	a80b883a 	mov	r5,r21
20082e40:	000d883a 	mov	r6,zero
20082e44:	01cffc34 	movhi	r7,16368
20082e48:	008b5240 	call	2008b524 <__ledf2>
20082e4c:	10043216 	blt	r2,zero,20083f18 <_dtoa_r+0x1540>
20082e50:	8809883a 	mov	r4,r17
20082e54:	008c6800 	call	2008c680 <__floatsidf>
20082e58:	1009883a 	mov	r4,r2
20082e5c:	180b883a 	mov	r5,r3
20082e60:	a00d883a 	mov	r6,r20
20082e64:	a80f883a 	mov	r7,r21
20082e68:	008b6040 	call	2008b604 <__muldf3>
20082e6c:	000d883a 	mov	r6,zero
20082e70:	1009883a 	mov	r4,r2
20082e74:	180b883a 	mov	r5,r3
20082e78:	01d00734 	movhi	r7,16412
20082e7c:	008a2580 	call	2008a258 <__adddf3>
20082e80:	1023883a 	mov	r17,r2
20082e84:	d9800617 	ldw	r6,24(sp)
20082e88:	00bf3034 	movhi	r2,64704
20082e8c:	1885883a 	add	r2,r3,r2
20082e90:	d8800e15 	stw	r2,56(sp)
20082e94:	30032e26 	beq	r6,zero,20083b50 <_dtoa_r+0x1178>
20082e98:	d8c00517 	ldw	r3,20(sp)
20082e9c:	da800617 	ldw	r10,24(sp)
20082ea0:	d8c01215 	stw	r3,72(sp)
20082ea4:	d9000b17 	ldw	r4,44(sp)
20082ea8:	2003b026 	beq	r4,zero,20083d6c <_dtoa_r+0x1394>
20082eac:	50bfffc4 	addi	r2,r10,-1
20082eb0:	100490fa 	slli	r2,r2,3
20082eb4:	00c00034 	movhi	r3,0
20082eb8:	18c04104 	addi	r3,r3,260
20082ebc:	1885883a 	add	r2,r3,r2
20082ec0:	11800017 	ldw	r6,0(r2)
20082ec4:	11c00117 	ldw	r7,4(r2)
20082ec8:	d8800717 	ldw	r2,28(sp)
20082ecc:	0009883a 	mov	r4,zero
20082ed0:	014ff834 	movhi	r5,16352
20082ed4:	da801615 	stw	r10,88(sp)
20082ed8:	15c00044 	addi	r23,r2,1
20082edc:	008aaf40 	call	2008aaf4 <__divdf3>
20082ee0:	d9c00e17 	ldw	r7,56(sp)
20082ee4:	880d883a 	mov	r6,r17
20082ee8:	1009883a 	mov	r4,r2
20082eec:	180b883a 	mov	r5,r3
20082ef0:	008bd280 	call	2008bd28 <__subdf3>
20082ef4:	a80b883a 	mov	r5,r21
20082ef8:	a009883a 	mov	r4,r20
20082efc:	d8c01015 	stw	r3,64(sp)
20082f00:	d8800e15 	stw	r2,56(sp)
20082f04:	008c5f80 	call	2008c5f8 <__fixdfsi>
20082f08:	1009883a 	mov	r4,r2
20082f0c:	d8801715 	stw	r2,92(sp)
20082f10:	008c6800 	call	2008c680 <__floatsidf>
20082f14:	a009883a 	mov	r4,r20
20082f18:	a80b883a 	mov	r5,r21
20082f1c:	100d883a 	mov	r6,r2
20082f20:	180f883a 	mov	r7,r3
20082f24:	008bd280 	call	2008bd28 <__subdf3>
20082f28:	da001717 	ldw	r8,92(sp)
20082f2c:	1829883a 	mov	r20,r3
20082f30:	d8c00717 	ldw	r3,28(sp)
20082f34:	d9000e17 	ldw	r4,56(sp)
20082f38:	d9401017 	ldw	r5,64(sp)
20082f3c:	42000c04 	addi	r8,r8,48
20082f40:	1023883a 	mov	r17,r2
20082f44:	1a000005 	stb	r8,0(r3)
20082f48:	880d883a 	mov	r6,r17
20082f4c:	a00f883a 	mov	r7,r20
20082f50:	402b883a 	mov	r21,r8
20082f54:	008b4440 	call	2008b444 <__gedf2>
20082f58:	00844516 	blt	zero,r2,20084070 <_dtoa_r+0x1698>
20082f5c:	0009883a 	mov	r4,zero
20082f60:	014ffc34 	movhi	r5,16368
20082f64:	880d883a 	mov	r6,r17
20082f68:	a00f883a 	mov	r7,r20
20082f6c:	008bd280 	call	2008bd28 <__subdf3>
20082f70:	d9000e17 	ldw	r4,56(sp)
20082f74:	d9401017 	ldw	r5,64(sp)
20082f78:	100d883a 	mov	r6,r2
20082f7c:	180f883a 	mov	r7,r3
20082f80:	008b4440 	call	2008b444 <__gedf2>
20082f84:	da801617 	ldw	r10,88(sp)
20082f88:	00843616 	blt	zero,r2,20084064 <_dtoa_r+0x168c>
20082f8c:	00800044 	movi	r2,1
20082f90:	12806e0e 	bge	r2,r10,2008314c <_dtoa_r+0x774>
20082f94:	d9000717 	ldw	r4,28(sp)
20082f98:	dd801315 	stw	r22,76(sp)
20082f9c:	dc001115 	stw	r16,68(sp)
20082fa0:	2295883a 	add	r10,r4,r10
20082fa4:	dcc01415 	stw	r19,80(sp)
20082fa8:	502d883a 	mov	r22,r10
20082fac:	dcc01017 	ldw	r19,64(sp)
20082fb0:	b821883a 	mov	r16,r23
20082fb4:	dc801015 	stw	r18,64(sp)
20082fb8:	dc800e17 	ldw	r18,56(sp)
20082fbc:	00000906 	br	20082fe4 <_dtoa_r+0x60c>
20082fc0:	008bd280 	call	2008bd28 <__subdf3>
20082fc4:	1009883a 	mov	r4,r2
20082fc8:	180b883a 	mov	r5,r3
20082fcc:	900d883a 	mov	r6,r18
20082fd0:	980f883a 	mov	r7,r19
20082fd4:	008b5240 	call	2008b524 <__ledf2>
20082fd8:	10040e16 	blt	r2,zero,20084014 <_dtoa_r+0x163c>
20082fdc:	b821883a 	mov	r16,r23
20082fe0:	bd841026 	beq	r23,r22,20084024 <_dtoa_r+0x164c>
20082fe4:	9009883a 	mov	r4,r18
20082fe8:	980b883a 	mov	r5,r19
20082fec:	000d883a 	mov	r6,zero
20082ff0:	01d00934 	movhi	r7,16420
20082ff4:	008b6040 	call	2008b604 <__muldf3>
20082ff8:	000d883a 	mov	r6,zero
20082ffc:	01d00934 	movhi	r7,16420
20083000:	8809883a 	mov	r4,r17
20083004:	a00b883a 	mov	r5,r20
20083008:	1025883a 	mov	r18,r2
2008300c:	1827883a 	mov	r19,r3
20083010:	008b6040 	call	2008b604 <__muldf3>
20083014:	180b883a 	mov	r5,r3
20083018:	1009883a 	mov	r4,r2
2008301c:	1823883a 	mov	r17,r3
20083020:	1029883a 	mov	r20,r2
20083024:	008c5f80 	call	2008c5f8 <__fixdfsi>
20083028:	1009883a 	mov	r4,r2
2008302c:	102b883a 	mov	r21,r2
20083030:	008c6800 	call	2008c680 <__floatsidf>
20083034:	a009883a 	mov	r4,r20
20083038:	880b883a 	mov	r5,r17
2008303c:	100d883a 	mov	r6,r2
20083040:	180f883a 	mov	r7,r3
20083044:	008bd280 	call	2008bd28 <__subdf3>
20083048:	ad400c04 	addi	r21,r21,48
2008304c:	1009883a 	mov	r4,r2
20083050:	180b883a 	mov	r5,r3
20083054:	900d883a 	mov	r6,r18
20083058:	980f883a 	mov	r7,r19
2008305c:	85400005 	stb	r21,0(r16)
20083060:	1023883a 	mov	r17,r2
20083064:	1829883a 	mov	r20,r3
20083068:	008b5240 	call	2008b524 <__ledf2>
2008306c:	bdc00044 	addi	r23,r23,1
20083070:	0009883a 	mov	r4,zero
20083074:	014ffc34 	movhi	r5,16368
20083078:	880d883a 	mov	r6,r17
2008307c:	a00f883a 	mov	r7,r20
20083080:	103fcf0e 	bge	r2,zero,20082fc0 <__flash_rwdata_start+0xffff1510>
20083084:	d9801217 	ldw	r6,72(sp)
20083088:	dc001117 	ldw	r16,68(sp)
2008308c:	d9800515 	stw	r6,20(sp)
20083090:	8009883a 	mov	r4,r16
20083094:	e00b883a 	mov	r5,fp
20083098:	00861180 	call	20086118 <_Bfree>
2008309c:	d8c00517 	ldw	r3,20(sp)
200830a0:	d9002317 	ldw	r4,140(sp)
200830a4:	d9802517 	ldw	r6,148(sp)
200830a8:	b8000005 	stb	zero,0(r23)
200830ac:	18800044 	addi	r2,r3,1
200830b0:	20800015 	stw	r2,0(r4)
200830b4:	30027226 	beq	r6,zero,20083a80 <_dtoa_r+0x10a8>
200830b8:	35c00015 	stw	r23,0(r6)
200830bc:	d8800717 	ldw	r2,28(sp)
200830c0:	003e7406 	br	20082a94 <__flash_rwdata_start+0xffff0fe4>
200830c4:	00800434 	movhi	r2,16
200830c8:	10bfffc4 	addi	r2,r2,-1
200830cc:	a8aa703a 	and	r21,r21,r2
200830d0:	a83e801e 	bne	r21,zero,20082ad4 <__flash_rwdata_start+0xffff1024>
200830d4:	00800034 	movhi	r2,0
200830d8:	10802204 	addi	r2,r2,136
200830dc:	003e7f06 	br	20082adc <__flash_rwdata_start+0xffff102c>
200830e0:	10c00204 	addi	r3,r2,8
200830e4:	003e8206 	br	20082af0 <__flash_rwdata_start+0xffff1040>
200830e8:	01400434 	movhi	r5,16
200830ec:	297fffc4 	addi	r5,r5,-1
200830f0:	994a703a 	and	r5,r19,r5
200830f4:	9009883a 	mov	r4,r18
200830f8:	8c7f0044 	addi	r17,r17,-1023
200830fc:	294ffc34 	orhi	r5,r5,16368
20083100:	dd000217 	ldw	r20,8(sp)
20083104:	d8000f15 	stw	zero,60(sp)
20083108:	003e9f06 	br	20082b88 <__flash_rwdata_start+0xffff10d8>
2008310c:	00800034 	movhi	r2,0
20083110:	10801904 	addi	r2,r2,100
20083114:	003e5f06 	br	20082a94 <__flash_rwdata_start+0xffff0fe4>
20083118:	80001115 	stw	zero,68(r16)
2008311c:	8009883a 	mov	r4,r16
20083120:	000b883a 	mov	r5,zero
20083124:	00860700 	call	20086070 <_Balloc>
20083128:	01bfffc4 	movi	r6,-1
2008312c:	d8800715 	stw	r2,28(sp)
20083130:	80801015 	stw	r2,64(r16)
20083134:	00800044 	movi	r2,1
20083138:	d9800c15 	stw	r6,48(sp)
2008313c:	d8800b15 	stw	r2,44(sp)
20083140:	d9800615 	stw	r6,24(sp)
20083144:	d8002215 	stw	zero,136(sp)
20083148:	d8000315 	stw	zero,12(sp)
2008314c:	d8800117 	ldw	r2,4(sp)
20083150:	10008e16 	blt	r2,zero,2008338c <_dtoa_r+0x9b4>
20083154:	d9000517 	ldw	r4,20(sp)
20083158:	00c00384 	movi	r3,14
2008315c:	19008b16 	blt	r3,r4,2008338c <_dtoa_r+0x9b4>
20083160:	200490fa 	slli	r2,r4,3
20083164:	00c00034 	movhi	r3,0
20083168:	d9802217 	ldw	r6,136(sp)
2008316c:	18c04104 	addi	r3,r3,260
20083170:	1885883a 	add	r2,r3,r2
20083174:	14400017 	ldw	r17,0(r2)
20083178:	15000117 	ldw	r20,4(r2)
2008317c:	3001c716 	blt	r6,zero,2008389c <_dtoa_r+0xec4>
20083180:	880d883a 	mov	r6,r17
20083184:	a00f883a 	mov	r7,r20
20083188:	9009883a 	mov	r4,r18
2008318c:	980b883a 	mov	r5,r19
20083190:	008aaf40 	call	2008aaf4 <__divdf3>
20083194:	180b883a 	mov	r5,r3
20083198:	1009883a 	mov	r4,r2
2008319c:	008c5f80 	call	2008c5f8 <__fixdfsi>
200831a0:	1009883a 	mov	r4,r2
200831a4:	102d883a 	mov	r22,r2
200831a8:	008c6800 	call	2008c680 <__floatsidf>
200831ac:	1009883a 	mov	r4,r2
200831b0:	180b883a 	mov	r5,r3
200831b4:	880d883a 	mov	r6,r17
200831b8:	a00f883a 	mov	r7,r20
200831bc:	008b6040 	call	2008b604 <__muldf3>
200831c0:	9009883a 	mov	r4,r18
200831c4:	980b883a 	mov	r5,r19
200831c8:	100d883a 	mov	r6,r2
200831cc:	180f883a 	mov	r7,r3
200831d0:	008bd280 	call	2008bd28 <__subdf3>
200831d4:	d9000717 	ldw	r4,28(sp)
200831d8:	d9800617 	ldw	r6,24(sp)
200831dc:	180b883a 	mov	r5,r3
200831e0:	b0c00c04 	addi	r3,r22,48
200831e4:	20c00005 	stb	r3,0(r4)
200831e8:	25c00044 	addi	r23,r4,1
200831ec:	01000044 	movi	r4,1
200831f0:	1011883a 	mov	r8,r2
200831f4:	2807883a 	mov	r3,r5
200831f8:	31003d26 	beq	r6,r4,200832f0 <_dtoa_r+0x918>
200831fc:	000d883a 	mov	r6,zero
20083200:	01d00934 	movhi	r7,16420
20083204:	1009883a 	mov	r4,r2
20083208:	008b6040 	call	2008b604 <__muldf3>
2008320c:	1009883a 	mov	r4,r2
20083210:	180b883a 	mov	r5,r3
20083214:	000d883a 	mov	r6,zero
20083218:	000f883a 	mov	r7,zero
2008321c:	1027883a 	mov	r19,r2
20083220:	182b883a 	mov	r21,r3
20083224:	008b3c00 	call	2008b3c0 <__eqdf2>
20083228:	103f9926 	beq	r2,zero,20083090 <__flash_rwdata_start+0xffff15e0>
2008322c:	d8c00617 	ldw	r3,24(sp)
20083230:	d9000717 	ldw	r4,28(sp)
20083234:	b825883a 	mov	r18,r23
20083238:	18bfffc4 	addi	r2,r3,-1
2008323c:	20ad883a 	add	r22,r4,r2
20083240:	dc000315 	stw	r16,12(sp)
20083244:	00000a06 	br	20083270 <_dtoa_r+0x898>
20083248:	008b6040 	call	2008b604 <__muldf3>
2008324c:	1009883a 	mov	r4,r2
20083250:	180b883a 	mov	r5,r3
20083254:	000d883a 	mov	r6,zero
20083258:	000f883a 	mov	r7,zero
2008325c:	1027883a 	mov	r19,r2
20083260:	182b883a 	mov	r21,r3
20083264:	b825883a 	mov	r18,r23
20083268:	008b3c00 	call	2008b3c0 <__eqdf2>
2008326c:	10022626 	beq	r2,zero,20083b08 <_dtoa_r+0x1130>
20083270:	880d883a 	mov	r6,r17
20083274:	a00f883a 	mov	r7,r20
20083278:	9809883a 	mov	r4,r19
2008327c:	a80b883a 	mov	r5,r21
20083280:	008aaf40 	call	2008aaf4 <__divdf3>
20083284:	180b883a 	mov	r5,r3
20083288:	1009883a 	mov	r4,r2
2008328c:	008c5f80 	call	2008c5f8 <__fixdfsi>
20083290:	1009883a 	mov	r4,r2
20083294:	1021883a 	mov	r16,r2
20083298:	008c6800 	call	2008c680 <__floatsidf>
2008329c:	1009883a 	mov	r4,r2
200832a0:	180b883a 	mov	r5,r3
200832a4:	880d883a 	mov	r6,r17
200832a8:	a00f883a 	mov	r7,r20
200832ac:	008b6040 	call	2008b604 <__muldf3>
200832b0:	9809883a 	mov	r4,r19
200832b4:	a80b883a 	mov	r5,r21
200832b8:	100d883a 	mov	r6,r2
200832bc:	180f883a 	mov	r7,r3
200832c0:	008bd280 	call	2008bd28 <__subdf3>
200832c4:	82000c04 	addi	r8,r16,48
200832c8:	92000005 	stb	r8,0(r18)
200832cc:	1009883a 	mov	r4,r2
200832d0:	180b883a 	mov	r5,r3
200832d4:	000d883a 	mov	r6,zero
200832d8:	01d00934 	movhi	r7,16420
200832dc:	1011883a 	mov	r8,r2
200832e0:	bdc00044 	addi	r23,r23,1
200832e4:	95bfd81e 	bne	r18,r22,20083248 <__flash_rwdata_start+0xffff1798>
200832e8:	802d883a 	mov	r22,r16
200832ec:	dc000317 	ldw	r16,12(sp)
200832f0:	4009883a 	mov	r4,r8
200832f4:	180b883a 	mov	r5,r3
200832f8:	400d883a 	mov	r6,r8
200832fc:	180f883a 	mov	r7,r3
20083300:	008a2580 	call	2008a258 <__adddf3>
20083304:	8809883a 	mov	r4,r17
20083308:	a00b883a 	mov	r5,r20
2008330c:	100d883a 	mov	r6,r2
20083310:	180f883a 	mov	r7,r3
20083314:	1027883a 	mov	r19,r2
20083318:	1825883a 	mov	r18,r3
2008331c:	008b5240 	call	2008b524 <__ledf2>
20083320:	10000816 	blt	r2,zero,20083344 <_dtoa_r+0x96c>
20083324:	8809883a 	mov	r4,r17
20083328:	a00b883a 	mov	r5,r20
2008332c:	980d883a 	mov	r6,r19
20083330:	900f883a 	mov	r7,r18
20083334:	008b3c00 	call	2008b3c0 <__eqdf2>
20083338:	103f551e 	bne	r2,zero,20083090 <__flash_rwdata_start+0xffff15e0>
2008333c:	b580004c 	andi	r22,r22,1
20083340:	b03f5326 	beq	r22,zero,20083090 <__flash_rwdata_start+0xffff15e0>
20083344:	bd7fffc3 	ldbu	r21,-1(r23)
20083348:	b8bfffc4 	addi	r2,r23,-1
2008334c:	1007883a 	mov	r3,r2
20083350:	01400e44 	movi	r5,57
20083354:	d9800717 	ldw	r6,28(sp)
20083358:	00000506 	br	20083370 <_dtoa_r+0x998>
2008335c:	18ffffc4 	addi	r3,r3,-1
20083360:	30825e26 	beq	r6,r2,20083cdc <_dtoa_r+0x1304>
20083364:	1d400003 	ldbu	r21,0(r3)
20083368:	102f883a 	mov	r23,r2
2008336c:	10bfffc4 	addi	r2,r2,-1
20083370:	a9003fcc 	andi	r4,r21,255
20083374:	2100201c 	xori	r4,r4,128
20083378:	213fe004 	addi	r4,r4,-128
2008337c:	217ff726 	beq	r4,r5,2008335c <__flash_rwdata_start+0xffff18ac>
20083380:	aa000044 	addi	r8,r21,1
20083384:	12000005 	stb	r8,0(r2)
20083388:	003f4106 	br	20083090 <__flash_rwdata_start+0xffff15e0>
2008338c:	d8c00b17 	ldw	r3,44(sp)
20083390:	18006726 	beq	r3,zero,20083530 <_dtoa_r+0xb58>
20083394:	d9000317 	ldw	r4,12(sp)
20083398:	00c00044 	movi	r3,1
2008339c:	19016a0e 	bge	r3,r4,20083948 <_dtoa_r+0xf70>
200833a0:	d8800617 	ldw	r2,24(sp)
200833a4:	d8c00917 	ldw	r3,36(sp)
200833a8:	157fffc4 	addi	r21,r2,-1
200833ac:	1d420716 	blt	r3,r21,20083bcc <_dtoa_r+0x11f4>
200833b0:	1d6bc83a 	sub	r21,r3,r21
200833b4:	d8800617 	ldw	r2,24(sp)
200833b8:	1002c716 	blt	r2,zero,20083ed8 <_dtoa_r+0x1500>
200833bc:	dd000817 	ldw	r20,32(sp)
200833c0:	d8800617 	ldw	r2,24(sp)
200833c4:	d9800817 	ldw	r6,32(sp)
200833c8:	8009883a 	mov	r4,r16
200833cc:	01400044 	movi	r5,1
200833d0:	308d883a 	add	r6,r6,r2
200833d4:	d9800815 	stw	r6,32(sp)
200833d8:	b0ad883a 	add	r22,r22,r2
200833dc:	008647c0 	call	2008647c <__i2b>
200833e0:	1023883a 	mov	r17,r2
200833e4:	a0000826 	beq	r20,zero,20083408 <_dtoa_r+0xa30>
200833e8:	0580070e 	bge	zero,r22,20083408 <_dtoa_r+0xa30>
200833ec:	b005883a 	mov	r2,r22
200833f0:	a5812016 	blt	r20,r22,20083874 <_dtoa_r+0xe9c>
200833f4:	d8c00817 	ldw	r3,32(sp)
200833f8:	a0a9c83a 	sub	r20,r20,r2
200833fc:	b0adc83a 	sub	r22,r22,r2
20083400:	1887c83a 	sub	r3,r3,r2
20083404:	d8c00815 	stw	r3,32(sp)
20083408:	d9000917 	ldw	r4,36(sp)
2008340c:	0100140e 	bge	zero,r4,20083460 <_dtoa_r+0xa88>
20083410:	d9800b17 	ldw	r6,44(sp)
20083414:	3001e526 	beq	r6,zero,20083bac <_dtoa_r+0x11d4>
20083418:	05400e0e 	bge	zero,r21,20083454 <_dtoa_r+0xa7c>
2008341c:	880b883a 	mov	r5,r17
20083420:	8009883a 	mov	r4,r16
20083424:	a80d883a 	mov	r6,r21
20083428:	00866b40 	call	200866b4 <__pow5mult>
2008342c:	e00d883a 	mov	r6,fp
20083430:	8009883a 	mov	r4,r16
20083434:	100b883a 	mov	r5,r2
20083438:	1023883a 	mov	r17,r2
2008343c:	00864b80 	call	200864b8 <__multiply>
20083440:	102f883a 	mov	r23,r2
20083444:	e00b883a 	mov	r5,fp
20083448:	8009883a 	mov	r4,r16
2008344c:	00861180 	call	20086118 <_Bfree>
20083450:	b839883a 	mov	fp,r23
20083454:	d8800917 	ldw	r2,36(sp)
20083458:	154dc83a 	sub	r6,r2,r21
2008345c:	3001281e 	bne	r6,zero,20083900 <_dtoa_r+0xf28>
20083460:	05c00044 	movi	r23,1
20083464:	8009883a 	mov	r4,r16
20083468:	b80b883a 	mov	r5,r23
2008346c:	008647c0 	call	2008647c <__i2b>
20083470:	d8c00a17 	ldw	r3,40(sp)
20083474:	102b883a 	mov	r21,r2
20083478:	00c0310e 	bge	zero,r3,20083540 <_dtoa_r+0xb68>
2008347c:	8009883a 	mov	r4,r16
20083480:	100b883a 	mov	r5,r2
20083484:	180d883a 	mov	r6,r3
20083488:	00866b40 	call	200866b4 <__pow5mult>
2008348c:	d9000317 	ldw	r4,12(sp)
20083490:	102b883a 	mov	r21,r2
20083494:	b9011f0e 	bge	r23,r4,20083914 <_dtoa_r+0xf3c>
20083498:	0027883a 	mov	r19,zero
2008349c:	a8800417 	ldw	r2,16(r21)
200834a0:	10800104 	addi	r2,r2,4
200834a4:	1085883a 	add	r2,r2,r2
200834a8:	1085883a 	add	r2,r2,r2
200834ac:	a885883a 	add	r2,r21,r2
200834b0:	11000017 	ldw	r4,0(r2)
200834b4:	00863640 	call	20086364 <__hi0bits>
200834b8:	00c00804 	movi	r3,32
200834bc:	1885c83a 	sub	r2,r3,r2
200834c0:	00002506 	br	20083558 <_dtoa_r+0xb80>
200834c4:	01800044 	movi	r6,1
200834c8:	d9800d15 	stw	r6,52(sp)
200834cc:	003dec06 	br	20082c80 <__flash_rwdata_start+0xffff11d0>
200834d0:	d8c00817 	ldw	r3,32(sp)
200834d4:	d9000517 	ldw	r4,20(sp)
200834d8:	d8000a15 	stw	zero,40(sp)
200834dc:	1907c83a 	sub	r3,r3,r4
200834e0:	010dc83a 	sub	r6,zero,r4
200834e4:	d8c00815 	stw	r3,32(sp)
200834e8:	d9800915 	stw	r6,36(sp)
200834ec:	003ded06 	br	20082ca4 <__flash_rwdata_start+0xffff11f4>
200834f0:	05adc83a 	sub	r22,zero,r22
200834f4:	dd800815 	stw	r22,32(sp)
200834f8:	002d883a 	mov	r22,zero
200834fc:	003de406 	br	20082c90 <__flash_rwdata_start+0xffff11e0>
20083500:	d9000517 	ldw	r4,20(sp)
20083504:	008c6800 	call	2008c680 <__floatsidf>
20083508:	1009883a 	mov	r4,r2
2008350c:	180b883a 	mov	r5,r3
20083510:	b00d883a 	mov	r6,r22
20083514:	a80f883a 	mov	r7,r21
20083518:	008b3c00 	call	2008b3c0 <__eqdf2>
2008351c:	103dc726 	beq	r2,zero,20082c3c <__flash_rwdata_start+0xffff118c>
20083520:	d8800517 	ldw	r2,20(sp)
20083524:	10bfffc4 	addi	r2,r2,-1
20083528:	d8800515 	stw	r2,20(sp)
2008352c:	003dc306 	br	20082c3c <__flash_rwdata_start+0xffff118c>
20083530:	dd400917 	ldw	r21,36(sp)
20083534:	dd000817 	ldw	r20,32(sp)
20083538:	0023883a 	mov	r17,zero
2008353c:	003fa906 	br	200833e4 <__flash_rwdata_start+0xffff1934>
20083540:	d9800317 	ldw	r6,12(sp)
20083544:	b981670e 	bge	r23,r6,20083ae4 <_dtoa_r+0x110c>
20083548:	0027883a 	mov	r19,zero
2008354c:	d8c00a17 	ldw	r3,40(sp)
20083550:	183fd21e 	bne	r3,zero,2008349c <__flash_rwdata_start+0xffff19ec>
20083554:	00800044 	movi	r2,1
20083558:	1585883a 	add	r2,r2,r22
2008355c:	108007cc 	andi	r2,r2,31
20083560:	10005f26 	beq	r2,zero,200836e0 <_dtoa_r+0xd08>
20083564:	00c00804 	movi	r3,32
20083568:	1887c83a 	sub	r3,r3,r2
2008356c:	01000104 	movi	r4,4
20083570:	20c2dd0e 	bge	r4,r3,200840e8 <_dtoa_r+0x1710>
20083574:	d9000817 	ldw	r4,32(sp)
20083578:	00c00704 	movi	r3,28
2008357c:	1885c83a 	sub	r2,r3,r2
20083580:	2089883a 	add	r4,r4,r2
20083584:	d9000815 	stw	r4,32(sp)
20083588:	a0a9883a 	add	r20,r20,r2
2008358c:	b0ad883a 	add	r22,r22,r2
20083590:	d8800817 	ldw	r2,32(sp)
20083594:	0080050e 	bge	zero,r2,200835ac <_dtoa_r+0xbd4>
20083598:	e00b883a 	mov	r5,fp
2008359c:	8009883a 	mov	r4,r16
200835a0:	100d883a 	mov	r6,r2
200835a4:	00867f40 	call	200867f4 <__lshift>
200835a8:	1039883a 	mov	fp,r2
200835ac:	0580050e 	bge	zero,r22,200835c4 <_dtoa_r+0xbec>
200835b0:	a80b883a 	mov	r5,r21
200835b4:	8009883a 	mov	r4,r16
200835b8:	b00d883a 	mov	r6,r22
200835bc:	00867f40 	call	200867f4 <__lshift>
200835c0:	102b883a 	mov	r21,r2
200835c4:	d8c00d17 	ldw	r3,52(sp)
200835c8:	1801161e 	bne	r3,zero,20083a24 <_dtoa_r+0x104c>
200835cc:	d8c00617 	ldw	r3,24(sp)
200835d0:	00c12d0e 	bge	zero,r3,20083a88 <_dtoa_r+0x10b0>
200835d4:	d8c00b17 	ldw	r3,44(sp)
200835d8:	1800571e 	bne	r3,zero,20083738 <_dtoa_r+0xd60>
200835dc:	dc800717 	ldw	r18,28(sp)
200835e0:	dcc00617 	ldw	r19,24(sp)
200835e4:	9029883a 	mov	r20,r18
200835e8:	00000206 	br	200835f4 <_dtoa_r+0xc1c>
200835ec:	00861400 	call	20086140 <__multadd>
200835f0:	1039883a 	mov	fp,r2
200835f4:	e009883a 	mov	r4,fp
200835f8:	a80b883a 	mov	r5,r21
200835fc:	00827d80 	call	200827d8 <quorem>
20083600:	10800c04 	addi	r2,r2,48
20083604:	90800005 	stb	r2,0(r18)
20083608:	94800044 	addi	r18,r18,1
2008360c:	9507c83a 	sub	r3,r18,r20
20083610:	8009883a 	mov	r4,r16
20083614:	e00b883a 	mov	r5,fp
20083618:	01800284 	movi	r6,10
2008361c:	000f883a 	mov	r7,zero
20083620:	1cfff216 	blt	r3,r19,200835ec <__flash_rwdata_start+0xffff1b3c>
20083624:	1011883a 	mov	r8,r2
20083628:	d8800617 	ldw	r2,24(sp)
2008362c:	00822e0e 	bge	zero,r2,20083ee8 <_dtoa_r+0x1510>
20083630:	d9000717 	ldw	r4,28(sp)
20083634:	0025883a 	mov	r18,zero
20083638:	20af883a 	add	r23,r4,r2
2008363c:	e00b883a 	mov	r5,fp
20083640:	01800044 	movi	r6,1
20083644:	8009883a 	mov	r4,r16
20083648:	da001715 	stw	r8,92(sp)
2008364c:	00867f40 	call	200867f4 <__lshift>
20083650:	1009883a 	mov	r4,r2
20083654:	a80b883a 	mov	r5,r21
20083658:	1039883a 	mov	fp,r2
2008365c:	00869440 	call	20086944 <__mcmp>
20083660:	da001717 	ldw	r8,92(sp)
20083664:	00816e0e 	bge	zero,r2,20083c20 <_dtoa_r+0x1248>
20083668:	b93fffc3 	ldbu	r4,-1(r23)
2008366c:	b8bfffc4 	addi	r2,r23,-1
20083670:	1007883a 	mov	r3,r2
20083674:	01800e44 	movi	r6,57
20083678:	d9c00717 	ldw	r7,28(sp)
2008367c:	00000506 	br	20083694 <_dtoa_r+0xcbc>
20083680:	18ffffc4 	addi	r3,r3,-1
20083684:	38811926 	beq	r7,r2,20083aec <_dtoa_r+0x1114>
20083688:	19000003 	ldbu	r4,0(r3)
2008368c:	102f883a 	mov	r23,r2
20083690:	10bfffc4 	addi	r2,r2,-1
20083694:	21403fcc 	andi	r5,r4,255
20083698:	2940201c 	xori	r5,r5,128
2008369c:	297fe004 	addi	r5,r5,-128
200836a0:	29bff726 	beq	r5,r6,20083680 <__flash_rwdata_start+0xffff1bd0>
200836a4:	21000044 	addi	r4,r4,1
200836a8:	11000005 	stb	r4,0(r2)
200836ac:	8009883a 	mov	r4,r16
200836b0:	a80b883a 	mov	r5,r21
200836b4:	00861180 	call	20086118 <_Bfree>
200836b8:	883e7526 	beq	r17,zero,20083090 <__flash_rwdata_start+0xffff15e0>
200836bc:	90000426 	beq	r18,zero,200836d0 <_dtoa_r+0xcf8>
200836c0:	94400326 	beq	r18,r17,200836d0 <_dtoa_r+0xcf8>
200836c4:	8009883a 	mov	r4,r16
200836c8:	900b883a 	mov	r5,r18
200836cc:	00861180 	call	20086118 <_Bfree>
200836d0:	8009883a 	mov	r4,r16
200836d4:	880b883a 	mov	r5,r17
200836d8:	00861180 	call	20086118 <_Bfree>
200836dc:	003e6c06 	br	20083090 <__flash_rwdata_start+0xffff15e0>
200836e0:	00800704 	movi	r2,28
200836e4:	d9800817 	ldw	r6,32(sp)
200836e8:	a0a9883a 	add	r20,r20,r2
200836ec:	b0ad883a 	add	r22,r22,r2
200836f0:	308d883a 	add	r6,r6,r2
200836f4:	d9800815 	stw	r6,32(sp)
200836f8:	003fa506 	br	20083590 <__flash_rwdata_start+0xffff1ae0>
200836fc:	013efb84 	movi	r4,-1042
20083700:	246bc83a 	sub	r21,r4,r17
20083704:	9548983a 	sll	r4,r18,r21
20083708:	003d1806 	br	20082b6c <__flash_rwdata_start+0xffff10bc>
2008370c:	d8000d15 	stw	zero,52(sp)
20083710:	003d5b06 	br	20082c80 <__flash_rwdata_start+0xffff11d0>
20083714:	880b883a 	mov	r5,r17
20083718:	8009883a 	mov	r4,r16
2008371c:	01800284 	movi	r6,10
20083720:	000f883a 	mov	r7,zero
20083724:	00861400 	call	20086140 <__multadd>
20083728:	1023883a 	mov	r17,r2
2008372c:	d8800c17 	ldw	r2,48(sp)
20083730:	0082550e 	bge	zero,r2,20084088 <_dtoa_r+0x16b0>
20083734:	d8800615 	stw	r2,24(sp)
20083738:	0500050e 	bge	zero,r20,20083750 <_dtoa_r+0xd78>
2008373c:	880b883a 	mov	r5,r17
20083740:	8009883a 	mov	r4,r16
20083744:	a00d883a 	mov	r6,r20
20083748:	00867f40 	call	200867f4 <__lshift>
2008374c:	1023883a 	mov	r17,r2
20083750:	98016a1e 	bne	r19,zero,20083cfc <_dtoa_r+0x1324>
20083754:	8829883a 	mov	r20,r17
20083758:	d9000617 	ldw	r4,24(sp)
2008375c:	dcc00717 	ldw	r19,28(sp)
20083760:	9480004c 	andi	r18,r18,1
20083764:	20bfffc4 	addi	r2,r4,-1
20083768:	9885883a 	add	r2,r19,r2
2008376c:	d8800415 	stw	r2,16(sp)
20083770:	dc800615 	stw	r18,24(sp)
20083774:	e009883a 	mov	r4,fp
20083778:	a80b883a 	mov	r5,r21
2008377c:	00827d80 	call	200827d8 <quorem>
20083780:	e009883a 	mov	r4,fp
20083784:	880b883a 	mov	r5,r17
20083788:	102f883a 	mov	r23,r2
2008378c:	00869440 	call	20086944 <__mcmp>
20083790:	8009883a 	mov	r4,r16
20083794:	a80b883a 	mov	r5,r21
20083798:	a00d883a 	mov	r6,r20
2008379c:	102d883a 	mov	r22,r2
200837a0:	00869a40 	call	200869a4 <__mdiff>
200837a4:	1007883a 	mov	r3,r2
200837a8:	10800317 	ldw	r2,12(r2)
200837ac:	bc800c04 	addi	r18,r23,48
200837b0:	1000971e 	bne	r2,zero,20083a10 <_dtoa_r+0x1038>
200837b4:	180b883a 	mov	r5,r3
200837b8:	e009883a 	mov	r4,fp
200837bc:	d8c01515 	stw	r3,84(sp)
200837c0:	00869440 	call	20086944 <__mcmp>
200837c4:	d8c01517 	ldw	r3,84(sp)
200837c8:	8009883a 	mov	r4,r16
200837cc:	d8801515 	stw	r2,84(sp)
200837d0:	180b883a 	mov	r5,r3
200837d4:	00861180 	call	20086118 <_Bfree>
200837d8:	d8801517 	ldw	r2,84(sp)
200837dc:	1000041e 	bne	r2,zero,200837f0 <_dtoa_r+0xe18>
200837e0:	d9800317 	ldw	r6,12(sp)
200837e4:	3000021e 	bne	r6,zero,200837f0 <_dtoa_r+0xe18>
200837e8:	d8c00617 	ldw	r3,24(sp)
200837ec:	18007626 	beq	r3,zero,200839c8 <_dtoa_r+0xff0>
200837f0:	b0005b16 	blt	r22,zero,20083960 <_dtoa_r+0xf88>
200837f4:	b000041e 	bne	r22,zero,20083808 <_dtoa_r+0xe30>
200837f8:	d9000317 	ldw	r4,12(sp)
200837fc:	2000021e 	bne	r4,zero,20083808 <_dtoa_r+0xe30>
20083800:	d8c00617 	ldw	r3,24(sp)
20083804:	18005626 	beq	r3,zero,20083960 <_dtoa_r+0xf88>
20083808:	00814d16 	blt	zero,r2,20083d40 <_dtoa_r+0x1368>
2008380c:	d8c00417 	ldw	r3,16(sp)
20083810:	9d800044 	addi	r22,r19,1
20083814:	9c800005 	stb	r18,0(r19)
20083818:	b02f883a 	mov	r23,r22
2008381c:	98c14c26 	beq	r19,r3,20083d50 <_dtoa_r+0x1378>
20083820:	e00b883a 	mov	r5,fp
20083824:	8009883a 	mov	r4,r16
20083828:	01800284 	movi	r6,10
2008382c:	000f883a 	mov	r7,zero
20083830:	00861400 	call	20086140 <__multadd>
20083834:	1039883a 	mov	fp,r2
20083838:	8d006d26 	beq	r17,r20,200839f0 <_dtoa_r+0x1018>
2008383c:	880b883a 	mov	r5,r17
20083840:	01800284 	movi	r6,10
20083844:	000f883a 	mov	r7,zero
20083848:	8009883a 	mov	r4,r16
2008384c:	00861400 	call	20086140 <__multadd>
20083850:	a00b883a 	mov	r5,r20
20083854:	8009883a 	mov	r4,r16
20083858:	01800284 	movi	r6,10
2008385c:	000f883a 	mov	r7,zero
20083860:	1023883a 	mov	r17,r2
20083864:	00861400 	call	20086140 <__multadd>
20083868:	1029883a 	mov	r20,r2
2008386c:	b027883a 	mov	r19,r22
20083870:	003fc006 	br	20083774 <__flash_rwdata_start+0xffff1cc4>
20083874:	a005883a 	mov	r2,r20
20083878:	003ede06 	br	200833f4 <__flash_rwdata_start+0xffff1944>
2008387c:	01000044 	movi	r4,1
20083880:	d9000b15 	stw	r4,44(sp)
20083884:	d9802217 	ldw	r6,136(sp)
20083888:	0180dc0e 	bge	zero,r6,20083bfc <_dtoa_r+0x1224>
2008388c:	3023883a 	mov	r17,r6
20083890:	d9800c15 	stw	r6,48(sp)
20083894:	d9800615 	stw	r6,24(sp)
20083898:	003d1e06 	br	20082d14 <__flash_rwdata_start+0xffff1264>
2008389c:	d8800617 	ldw	r2,24(sp)
200838a0:	00be3716 	blt	zero,r2,20083180 <__flash_rwdata_start+0xffff16d0>
200838a4:	1000be1e 	bne	r2,zero,20083ba0 <_dtoa_r+0x11c8>
200838a8:	8809883a 	mov	r4,r17
200838ac:	a00b883a 	mov	r5,r20
200838b0:	000d883a 	mov	r6,zero
200838b4:	01d00534 	movhi	r7,16404
200838b8:	008b6040 	call	2008b604 <__muldf3>
200838bc:	1009883a 	mov	r4,r2
200838c0:	180b883a 	mov	r5,r3
200838c4:	900d883a 	mov	r6,r18
200838c8:	980f883a 	mov	r7,r19
200838cc:	008b4440 	call	2008b444 <__gedf2>
200838d0:	002b883a 	mov	r21,zero
200838d4:	0023883a 	mov	r17,zero
200838d8:	10007a16 	blt	r2,zero,20083ac4 <_dtoa_r+0x10ec>
200838dc:	d9002217 	ldw	r4,136(sp)
200838e0:	ddc00717 	ldw	r23,28(sp)
200838e4:	0108303a 	nor	r4,zero,r4
200838e8:	d9000515 	stw	r4,20(sp)
200838ec:	8009883a 	mov	r4,r16
200838f0:	a80b883a 	mov	r5,r21
200838f4:	00861180 	call	20086118 <_Bfree>
200838f8:	883f751e 	bne	r17,zero,200836d0 <__flash_rwdata_start+0xffff1c20>
200838fc:	003de406 	br	20083090 <__flash_rwdata_start+0xffff15e0>
20083900:	e00b883a 	mov	r5,fp
20083904:	8009883a 	mov	r4,r16
20083908:	00866b40 	call	200866b4 <__pow5mult>
2008390c:	1039883a 	mov	fp,r2
20083910:	003ed306 	br	20083460 <__flash_rwdata_start+0xffff19b0>
20083914:	903ee01e 	bne	r18,zero,20083498 <__flash_rwdata_start+0xffff19e8>
20083918:	00800434 	movhi	r2,16
2008391c:	10bfffc4 	addi	r2,r2,-1
20083920:	9884703a 	and	r2,r19,r2
20083924:	103f081e 	bne	r2,zero,20083548 <__flash_rwdata_start+0xffff1a98>
20083928:	9cdffc2c 	andhi	r19,r19,32752
2008392c:	983f0626 	beq	r19,zero,20083548 <__flash_rwdata_start+0xffff1a98>
20083930:	d8800817 	ldw	r2,32(sp)
20083934:	b5800044 	addi	r22,r22,1
20083938:	04c00044 	movi	r19,1
2008393c:	10800044 	addi	r2,r2,1
20083940:	d8800815 	stw	r2,32(sp)
20083944:	003f0106 	br	2008354c <__flash_rwdata_start+0xffff1a9c>
20083948:	d9800f17 	ldw	r6,60(sp)
2008394c:	30016826 	beq	r6,zero,20083ef0 <_dtoa_r+0x1518>
20083950:	10810cc4 	addi	r2,r2,1075
20083954:	dd400917 	ldw	r21,36(sp)
20083958:	dd000817 	ldw	r20,32(sp)
2008395c:	003e9906 	br	200833c4 <__flash_rwdata_start+0xffff1914>
20083960:	9011883a 	mov	r8,r18
20083964:	4007883a 	mov	r3,r8
20083968:	e02d883a 	mov	r22,fp
2008396c:	0080100e 	bge	zero,r2,200839b0 <_dtoa_r+0xfd8>
20083970:	01800044 	movi	r6,1
20083974:	8009883a 	mov	r4,r16
20083978:	e00b883a 	mov	r5,fp
2008397c:	da001515 	stw	r8,84(sp)
20083980:	da001715 	stw	r8,92(sp)
20083984:	00867f40 	call	200867f4 <__lshift>
20083988:	1009883a 	mov	r4,r2
2008398c:	a80b883a 	mov	r5,r21
20083990:	102d883a 	mov	r22,r2
20083994:	00869440 	call	20086944 <__mcmp>
20083998:	d8c01517 	ldw	r3,84(sp)
2008399c:	da001717 	ldw	r8,92(sp)
200839a0:	0081a50e 	bge	zero,r2,20084038 <_dtoa_r+0x1660>
200839a4:	00800e44 	movi	r2,57
200839a8:	40817b26 	beq	r8,r2,20083f98 <_dtoa_r+0x15c0>
200839ac:	40c00044 	addi	r3,r8,1
200839b0:	8825883a 	mov	r18,r17
200839b4:	9dc00044 	addi	r23,r19,1
200839b8:	98c00005 	stb	r3,0(r19)
200839bc:	a023883a 	mov	r17,r20
200839c0:	b039883a 	mov	fp,r22
200839c4:	003f3906 	br	200836ac <__flash_rwdata_start+0xffff1bfc>
200839c8:	00800e44 	movi	r2,57
200839cc:	9011883a 	mov	r8,r18
200839d0:	90817226 	beq	r18,r2,20083f9c <_dtoa_r+0x15c4>
200839d4:	0580010e 	bge	zero,r22,200839dc <_dtoa_r+0x1004>
200839d8:	ba000c44 	addi	r8,r23,49
200839dc:	8825883a 	mov	r18,r17
200839e0:	9dc00044 	addi	r23,r19,1
200839e4:	9a000005 	stb	r8,0(r19)
200839e8:	a023883a 	mov	r17,r20
200839ec:	003f2f06 	br	200836ac <__flash_rwdata_start+0xffff1bfc>
200839f0:	880b883a 	mov	r5,r17
200839f4:	8009883a 	mov	r4,r16
200839f8:	01800284 	movi	r6,10
200839fc:	000f883a 	mov	r7,zero
20083a00:	00861400 	call	20086140 <__multadd>
20083a04:	1023883a 	mov	r17,r2
20083a08:	1029883a 	mov	r20,r2
20083a0c:	003f9706 	br	2008386c <__flash_rwdata_start+0xffff1dbc>
20083a10:	8009883a 	mov	r4,r16
20083a14:	180b883a 	mov	r5,r3
20083a18:	00861180 	call	20086118 <_Bfree>
20083a1c:	00800044 	movi	r2,1
20083a20:	003f7306 	br	200837f0 <__flash_rwdata_start+0xffff1d40>
20083a24:	e009883a 	mov	r4,fp
20083a28:	a80b883a 	mov	r5,r21
20083a2c:	00869440 	call	20086944 <__mcmp>
20083a30:	103ee60e 	bge	r2,zero,200835cc <__flash_rwdata_start+0xffff1b1c>
20083a34:	8009883a 	mov	r4,r16
20083a38:	e00b883a 	mov	r5,fp
20083a3c:	01800284 	movi	r6,10
20083a40:	000f883a 	mov	r7,zero
20083a44:	00861400 	call	20086140 <__multadd>
20083a48:	d9000517 	ldw	r4,20(sp)
20083a4c:	d9800b17 	ldw	r6,44(sp)
20083a50:	1039883a 	mov	fp,r2
20083a54:	213fffc4 	addi	r4,r4,-1
20083a58:	d9000515 	stw	r4,20(sp)
20083a5c:	303f2d1e 	bne	r6,zero,20083714 <__flash_rwdata_start+0xffff1c64>
20083a60:	d9000c17 	ldw	r4,48(sp)
20083a64:	0101780e 	bge	zero,r4,20084048 <_dtoa_r+0x1670>
20083a68:	d9000615 	stw	r4,24(sp)
20083a6c:	003edb06 	br	200835dc <__flash_rwdata_start+0xffff1b2c>
20083a70:	00800084 	movi	r2,2
20083a74:	30818e1e 	bne	r6,r2,200840b0 <_dtoa_r+0x16d8>
20083a78:	d8000b15 	stw	zero,44(sp)
20083a7c:	003f8106 	br	20083884 <__flash_rwdata_start+0xffff1dd4>
20083a80:	d8800717 	ldw	r2,28(sp)
20083a84:	003c0306 	br	20082a94 <__flash_rwdata_start+0xffff0fe4>
20083a88:	d9000317 	ldw	r4,12(sp)
20083a8c:	00800084 	movi	r2,2
20083a90:	113ed00e 	bge	r2,r4,200835d4 <__flash_rwdata_start+0xffff1b24>
20083a94:	d8c00617 	ldw	r3,24(sp)
20083a98:	183f901e 	bne	r3,zero,200838dc <__flash_rwdata_start+0xffff1e2c>
20083a9c:	a80b883a 	mov	r5,r21
20083aa0:	8009883a 	mov	r4,r16
20083aa4:	01800144 	movi	r6,5
20083aa8:	000f883a 	mov	r7,zero
20083aac:	00861400 	call	20086140 <__multadd>
20083ab0:	e009883a 	mov	r4,fp
20083ab4:	100b883a 	mov	r5,r2
20083ab8:	102b883a 	mov	r21,r2
20083abc:	00869440 	call	20086944 <__mcmp>
20083ac0:	00bf860e 	bge	zero,r2,200838dc <__flash_rwdata_start+0xffff1e2c>
20083ac4:	d9800717 	ldw	r6,28(sp)
20083ac8:	00800c44 	movi	r2,49
20083acc:	30800005 	stb	r2,0(r6)
20083ad0:	d8800517 	ldw	r2,20(sp)
20083ad4:	35c00044 	addi	r23,r6,1
20083ad8:	10800044 	addi	r2,r2,1
20083adc:	d8800515 	stw	r2,20(sp)
20083ae0:	003f8206 	br	200838ec <__flash_rwdata_start+0xffff1e3c>
20083ae4:	903e981e 	bne	r18,zero,20083548 <__flash_rwdata_start+0xffff1a98>
20083ae8:	003f8b06 	br	20083918 <__flash_rwdata_start+0xffff1e68>
20083aec:	d9800517 	ldw	r6,20(sp)
20083af0:	d8c00717 	ldw	r3,28(sp)
20083af4:	00800c44 	movi	r2,49
20083af8:	31800044 	addi	r6,r6,1
20083afc:	d9800515 	stw	r6,20(sp)
20083b00:	18800005 	stb	r2,0(r3)
20083b04:	003ee906 	br	200836ac <__flash_rwdata_start+0xffff1bfc>
20083b08:	dc000317 	ldw	r16,12(sp)
20083b0c:	003d6006 	br	20083090 <__flash_rwdata_start+0xffff15e0>
20083b10:	8809883a 	mov	r4,r17
20083b14:	008c6800 	call	2008c680 <__floatsidf>
20083b18:	a009883a 	mov	r4,r20
20083b1c:	a80b883a 	mov	r5,r21
20083b20:	100d883a 	mov	r6,r2
20083b24:	180f883a 	mov	r7,r3
20083b28:	008b6040 	call	2008b604 <__muldf3>
20083b2c:	1009883a 	mov	r4,r2
20083b30:	180b883a 	mov	r5,r3
20083b34:	000d883a 	mov	r6,zero
20083b38:	01d00734 	movhi	r7,16412
20083b3c:	008a2580 	call	2008a258 <__adddf3>
20083b40:	1023883a 	mov	r17,r2
20083b44:	00bf3034 	movhi	r2,64704
20083b48:	1885883a 	add	r2,r3,r2
20083b4c:	d8800e15 	stw	r2,56(sp)
20083b50:	a009883a 	mov	r4,r20
20083b54:	a80b883a 	mov	r5,r21
20083b58:	000d883a 	mov	r6,zero
20083b5c:	01d00534 	movhi	r7,16404
20083b60:	008bd280 	call	2008bd28 <__subdf3>
20083b64:	d9c00e17 	ldw	r7,56(sp)
20083b68:	1009883a 	mov	r4,r2
20083b6c:	180b883a 	mov	r5,r3
20083b70:	880d883a 	mov	r6,r17
20083b74:	102b883a 	mov	r21,r2
20083b78:	1829883a 	mov	r20,r3
20083b7c:	008b4440 	call	2008b444 <__gedf2>
20083b80:	00807716 	blt	zero,r2,20083d60 <_dtoa_r+0x1388>
20083b84:	d8800e17 	ldw	r2,56(sp)
20083b88:	a809883a 	mov	r4,r21
20083b8c:	a00b883a 	mov	r5,r20
20083b90:	11e0003c 	xorhi	r7,r2,32768
20083b94:	880d883a 	mov	r6,r17
20083b98:	008b5240 	call	2008b524 <__ledf2>
20083b9c:	103d6b0e 	bge	r2,zero,2008314c <__flash_rwdata_start+0xffff169c>
20083ba0:	002b883a 	mov	r21,zero
20083ba4:	0023883a 	mov	r17,zero
20083ba8:	003f4c06 	br	200838dc <__flash_rwdata_start+0xffff1e2c>
20083bac:	d9800917 	ldw	r6,36(sp)
20083bb0:	e00b883a 	mov	r5,fp
20083bb4:	8009883a 	mov	r4,r16
20083bb8:	00866b40 	call	200866b4 <__pow5mult>
20083bbc:	1039883a 	mov	fp,r2
20083bc0:	003e2706 	br	20083460 <__flash_rwdata_start+0xffff19b0>
20083bc4:	d8000b15 	stw	zero,44(sp)
20083bc8:	003c4906 	br	20082cf0 <__flash_rwdata_start+0xffff1240>
20083bcc:	d9000917 	ldw	r4,36(sp)
20083bd0:	d9800a17 	ldw	r6,40(sp)
20083bd4:	dd400915 	stw	r21,36(sp)
20083bd8:	a905c83a 	sub	r2,r21,r4
20083bdc:	308d883a 	add	r6,r6,r2
20083be0:	d9800a15 	stw	r6,40(sp)
20083be4:	002b883a 	mov	r21,zero
20083be8:	003df206 	br	200833b4 <__flash_rwdata_start+0xffff1904>
20083bec:	dc800e15 	stw	r18,56(sp)
20083bf0:	982b883a 	mov	r21,r19
20083bf4:	04400084 	movi	r17,2
20083bf8:	003c7406 	br	20082dcc <__flash_rwdata_start+0xffff131c>
20083bfc:	04400044 	movi	r17,1
20083c00:	dc400c15 	stw	r17,48(sp)
20083c04:	dc400615 	stw	r17,24(sp)
20083c08:	dc402215 	stw	r17,136(sp)
20083c0c:	80001115 	stw	zero,68(r16)
20083c10:	000b883a 	mov	r5,zero
20083c14:	003c4a06 	br	20082d40 <__flash_rwdata_start+0xffff1290>
20083c18:	3023883a 	mov	r17,r6
20083c1c:	003ffb06 	br	20083c0c <__flash_rwdata_start+0xffff215c>
20083c20:	1000021e 	bne	r2,zero,20083c2c <_dtoa_r+0x1254>
20083c24:	4200004c 	andi	r8,r8,1
20083c28:	403e8f1e 	bne	r8,zero,20083668 <__flash_rwdata_start+0xffff1bb8>
20083c2c:	01000c04 	movi	r4,48
20083c30:	00000106 	br	20083c38 <_dtoa_r+0x1260>
20083c34:	102f883a 	mov	r23,r2
20083c38:	b8bfffc4 	addi	r2,r23,-1
20083c3c:	10c00007 	ldb	r3,0(r2)
20083c40:	193ffc26 	beq	r3,r4,20083c34 <__flash_rwdata_start+0xffff2184>
20083c44:	003e9906 	br	200836ac <__flash_rwdata_start+0xffff1bfc>
20083c48:	d9000517 	ldw	r4,20(sp)
20083c4c:	012fc83a 	sub	r23,zero,r4
20083c50:	b800ad26 	beq	r23,zero,20083f08 <_dtoa_r+0x1530>
20083c54:	b88003cc 	andi	r2,r23,15
20083c58:	100490fa 	slli	r2,r2,3
20083c5c:	00c00034 	movhi	r3,0
20083c60:	18c04104 	addi	r3,r3,260
20083c64:	1885883a 	add	r2,r3,r2
20083c68:	11800017 	ldw	r6,0(r2)
20083c6c:	11c00117 	ldw	r7,4(r2)
20083c70:	b82fd13a 	srai	r23,r23,4
20083c74:	9009883a 	mov	r4,r18
20083c78:	980b883a 	mov	r5,r19
20083c7c:	008b6040 	call	2008b604 <__muldf3>
20083c80:	1029883a 	mov	r20,r2
20083c84:	182b883a 	mov	r21,r3
20083c88:	b800f426 	beq	r23,zero,2008405c <_dtoa_r+0x1684>
20083c8c:	02000034 	movhi	r8,0
20083c90:	42003704 	addi	r8,r8,220
20083c94:	8029883a 	mov	r20,r16
20083c98:	04400084 	movi	r17,2
20083c9c:	4021883a 	mov	r16,r8
20083ca0:	b980004c 	andi	r6,r23,1
20083ca4:	1009883a 	mov	r4,r2
20083ca8:	b82fd07a 	srai	r23,r23,1
20083cac:	180b883a 	mov	r5,r3
20083cb0:	30000426 	beq	r6,zero,20083cc4 <_dtoa_r+0x12ec>
20083cb4:	81800017 	ldw	r6,0(r16)
20083cb8:	81c00117 	ldw	r7,4(r16)
20083cbc:	8c400044 	addi	r17,r17,1
20083cc0:	008b6040 	call	2008b604 <__muldf3>
20083cc4:	84000204 	addi	r16,r16,8
20083cc8:	b83ff51e 	bne	r23,zero,20083ca0 <__flash_rwdata_start+0xffff21f0>
20083ccc:	a021883a 	mov	r16,r20
20083cd0:	182b883a 	mov	r21,r3
20083cd4:	1029883a 	mov	r20,r2
20083cd8:	003c5506 	br	20082e30 <__flash_rwdata_start+0xffff1380>
20083cdc:	d9800517 	ldw	r6,20(sp)
20083ce0:	d9000717 	ldw	r4,28(sp)
20083ce4:	00c00c04 	movi	r3,48
20083ce8:	31800044 	addi	r6,r6,1
20083cec:	d9800515 	stw	r6,20(sp)
20083cf0:	20c00005 	stb	r3,0(r4)
20083cf4:	02000c44 	movi	r8,49
20083cf8:	003da206 	br	20083384 <__flash_rwdata_start+0xffff18d4>
20083cfc:	89400117 	ldw	r5,4(r17)
20083d00:	8009883a 	mov	r4,r16
20083d04:	00860700 	call	20086070 <_Balloc>
20083d08:	89800417 	ldw	r6,16(r17)
20083d0c:	11000304 	addi	r4,r2,12
20083d10:	89400304 	addi	r5,r17,12
20083d14:	31800084 	addi	r6,r6,2
20083d18:	318d883a 	add	r6,r6,r6
20083d1c:	318d883a 	add	r6,r6,r6
20083d20:	1027883a 	mov	r19,r2
20083d24:	0085cb80 	call	20085cb8 <memcpy>
20083d28:	8009883a 	mov	r4,r16
20083d2c:	980b883a 	mov	r5,r19
20083d30:	01800044 	movi	r6,1
20083d34:	00867f40 	call	200867f4 <__lshift>
20083d38:	1029883a 	mov	r20,r2
20083d3c:	003e8606 	br	20083758 <__flash_rwdata_start+0xffff1ca8>
20083d40:	00800e44 	movi	r2,57
20083d44:	90809526 	beq	r18,r2,20083f9c <_dtoa_r+0x15c4>
20083d48:	92000044 	addi	r8,r18,1
20083d4c:	003f2306 	br	200839dc <__flash_rwdata_start+0xffff1f2c>
20083d50:	9011883a 	mov	r8,r18
20083d54:	8825883a 	mov	r18,r17
20083d58:	a023883a 	mov	r17,r20
20083d5c:	003e3706 	br	2008363c <__flash_rwdata_start+0xffff1b8c>
20083d60:	002b883a 	mov	r21,zero
20083d64:	0023883a 	mov	r17,zero
20083d68:	003f5606 	br	20083ac4 <__flash_rwdata_start+0xffff2014>
20083d6c:	51bfffc4 	addi	r6,r10,-1
20083d70:	300490fa 	slli	r2,r6,3
20083d74:	00c00034 	movhi	r3,0
20083d78:	18c04104 	addi	r3,r3,260
20083d7c:	1885883a 	add	r2,r3,r2
20083d80:	d9c00e17 	ldw	r7,56(sp)
20083d84:	11000017 	ldw	r4,0(r2)
20083d88:	11400117 	ldw	r5,4(r2)
20083d8c:	d8800717 	ldw	r2,28(sp)
20083d90:	d9801015 	stw	r6,64(sp)
20083d94:	880d883a 	mov	r6,r17
20083d98:	da801615 	stw	r10,88(sp)
20083d9c:	15c00044 	addi	r23,r2,1
20083da0:	008b6040 	call	2008b604 <__muldf3>
20083da4:	a80b883a 	mov	r5,r21
20083da8:	a009883a 	mov	r4,r20
20083dac:	d8c01115 	stw	r3,68(sp)
20083db0:	d8800e15 	stw	r2,56(sp)
20083db4:	008c5f80 	call	2008c5f8 <__fixdfsi>
20083db8:	1009883a 	mov	r4,r2
20083dbc:	1023883a 	mov	r17,r2
20083dc0:	008c6800 	call	2008c680 <__floatsidf>
20083dc4:	a009883a 	mov	r4,r20
20083dc8:	a80b883a 	mov	r5,r21
20083dcc:	100d883a 	mov	r6,r2
20083dd0:	180f883a 	mov	r7,r3
20083dd4:	008bd280 	call	2008bd28 <__subdf3>
20083dd8:	1813883a 	mov	r9,r3
20083ddc:	d8c00717 	ldw	r3,28(sp)
20083de0:	8c400c04 	addi	r17,r17,48
20083de4:	1011883a 	mov	r8,r2
20083de8:	1c400005 	stb	r17,0(r3)
20083dec:	da801617 	ldw	r10,88(sp)
20083df0:	00800044 	movi	r2,1
20083df4:	50802326 	beq	r10,r2,20083e84 <_dtoa_r+0x14ac>
20083df8:	d8800717 	ldw	r2,28(sp)
20083dfc:	b82b883a 	mov	r21,r23
20083e00:	dc001315 	stw	r16,76(sp)
20083e04:	12a9883a 	add	r20,r2,r10
20083e08:	4807883a 	mov	r3,r9
20083e0c:	4005883a 	mov	r2,r8
20083e10:	dc801415 	stw	r18,80(sp)
20083e14:	000d883a 	mov	r6,zero
20083e18:	01d00934 	movhi	r7,16420
20083e1c:	1009883a 	mov	r4,r2
20083e20:	180b883a 	mov	r5,r3
20083e24:	008b6040 	call	2008b604 <__muldf3>
20083e28:	180b883a 	mov	r5,r3
20083e2c:	1009883a 	mov	r4,r2
20083e30:	1821883a 	mov	r16,r3
20083e34:	1025883a 	mov	r18,r2
20083e38:	008c5f80 	call	2008c5f8 <__fixdfsi>
20083e3c:	1009883a 	mov	r4,r2
20083e40:	1023883a 	mov	r17,r2
20083e44:	008c6800 	call	2008c680 <__floatsidf>
20083e48:	9009883a 	mov	r4,r18
20083e4c:	800b883a 	mov	r5,r16
20083e50:	100d883a 	mov	r6,r2
20083e54:	180f883a 	mov	r7,r3
20083e58:	8c400c04 	addi	r17,r17,48
20083e5c:	008bd280 	call	2008bd28 <__subdf3>
20083e60:	ad400044 	addi	r21,r21,1
20083e64:	ac7fffc5 	stb	r17,-1(r21)
20083e68:	ad3fea1e 	bne	r21,r20,20083e14 <__flash_rwdata_start+0xffff2364>
20083e6c:	1813883a 	mov	r9,r3
20083e70:	d8c01017 	ldw	r3,64(sp)
20083e74:	dc001317 	ldw	r16,76(sp)
20083e78:	dc801417 	ldw	r18,80(sp)
20083e7c:	1011883a 	mov	r8,r2
20083e80:	b8ef883a 	add	r23,r23,r3
20083e84:	d9000e17 	ldw	r4,56(sp)
20083e88:	d9401117 	ldw	r5,68(sp)
20083e8c:	000d883a 	mov	r6,zero
20083e90:	01cff834 	movhi	r7,16352
20083e94:	da001715 	stw	r8,92(sp)
20083e98:	da401515 	stw	r9,84(sp)
20083e9c:	008a2580 	call	2008a258 <__adddf3>
20083ea0:	da001717 	ldw	r8,92(sp)
20083ea4:	da401517 	ldw	r9,84(sp)
20083ea8:	1009883a 	mov	r4,r2
20083eac:	400d883a 	mov	r6,r8
20083eb0:	480f883a 	mov	r7,r9
20083eb4:	180b883a 	mov	r5,r3
20083eb8:	008b5240 	call	2008b524 <__ledf2>
20083ebc:	da001717 	ldw	r8,92(sp)
20083ec0:	da401517 	ldw	r9,84(sp)
20083ec4:	10003b0e 	bge	r2,zero,20083fb4 <_dtoa_r+0x15dc>
20083ec8:	d9001217 	ldw	r4,72(sp)
20083ecc:	bd7fffc3 	ldbu	r21,-1(r23)
20083ed0:	d9000515 	stw	r4,20(sp)
20083ed4:	003d1c06 	br	20083348 <__flash_rwdata_start+0xffff1898>
20083ed8:	d8c00817 	ldw	r3,32(sp)
20083edc:	18a9c83a 	sub	r20,r3,r2
20083ee0:	0005883a 	mov	r2,zero
20083ee4:	003d3706 	br	200833c4 <__flash_rwdata_start+0xffff1914>
20083ee8:	00800044 	movi	r2,1
20083eec:	003dd006 	br	20083630 <__flash_rwdata_start+0xffff1b80>
20083ef0:	d8c00217 	ldw	r3,8(sp)
20083ef4:	00800d84 	movi	r2,54
20083ef8:	dd400917 	ldw	r21,36(sp)
20083efc:	10c5c83a 	sub	r2,r2,r3
20083f00:	dd000817 	ldw	r20,32(sp)
20083f04:	003d2f06 	br	200833c4 <__flash_rwdata_start+0xffff1914>
20083f08:	9029883a 	mov	r20,r18
20083f0c:	982b883a 	mov	r21,r19
20083f10:	04400084 	movi	r17,2
20083f14:	003bc606 	br	20082e30 <__flash_rwdata_start+0xffff1380>
20083f18:	d8800617 	ldw	r2,24(sp)
20083f1c:	103efc26 	beq	r2,zero,20083b10 <__flash_rwdata_start+0xffff2060>
20083f20:	d8c00c17 	ldw	r3,48(sp)
20083f24:	00fc890e 	bge	zero,r3,2008314c <__flash_rwdata_start+0xffff169c>
20083f28:	a80b883a 	mov	r5,r21
20083f2c:	a009883a 	mov	r4,r20
20083f30:	000d883a 	mov	r6,zero
20083f34:	01d00934 	movhi	r7,16420
20083f38:	008b6040 	call	2008b604 <__muldf3>
20083f3c:	89000044 	addi	r4,r17,1
20083f40:	1029883a 	mov	r20,r2
20083f44:	182b883a 	mov	r21,r3
20083f48:	008c6800 	call	2008c680 <__floatsidf>
20083f4c:	a009883a 	mov	r4,r20
20083f50:	a80b883a 	mov	r5,r21
20083f54:	100d883a 	mov	r6,r2
20083f58:	180f883a 	mov	r7,r3
20083f5c:	008b6040 	call	2008b604 <__muldf3>
20083f60:	1009883a 	mov	r4,r2
20083f64:	180b883a 	mov	r5,r3
20083f68:	000d883a 	mov	r6,zero
20083f6c:	01d00734 	movhi	r7,16412
20083f70:	008a2580 	call	2008a258 <__adddf3>
20083f74:	d9000517 	ldw	r4,20(sp)
20083f78:	1023883a 	mov	r17,r2
20083f7c:	00bf3034 	movhi	r2,64704
20083f80:	213fffc4 	addi	r4,r4,-1
20083f84:	1885883a 	add	r2,r3,r2
20083f88:	d9001215 	stw	r4,72(sp)
20083f8c:	d8800e15 	stw	r2,56(sp)
20083f90:	da800c17 	ldw	r10,48(sp)
20083f94:	003bc306 	br	20082ea4 <__flash_rwdata_start+0xffff13f4>
20083f98:	b039883a 	mov	fp,r22
20083f9c:	01000e44 	movi	r4,57
20083fa0:	8825883a 	mov	r18,r17
20083fa4:	9dc00044 	addi	r23,r19,1
20083fa8:	99000005 	stb	r4,0(r19)
20083fac:	a023883a 	mov	r17,r20
20083fb0:	003dae06 	br	2008366c <__flash_rwdata_start+0xffff1bbc>
20083fb4:	d9800e17 	ldw	r6,56(sp)
20083fb8:	d9c01117 	ldw	r7,68(sp)
20083fbc:	0009883a 	mov	r4,zero
20083fc0:	014ff834 	movhi	r5,16352
20083fc4:	da001715 	stw	r8,92(sp)
20083fc8:	da401515 	stw	r9,84(sp)
20083fcc:	008bd280 	call	2008bd28 <__subdf3>
20083fd0:	da001717 	ldw	r8,92(sp)
20083fd4:	da401517 	ldw	r9,84(sp)
20083fd8:	1009883a 	mov	r4,r2
20083fdc:	180b883a 	mov	r5,r3
20083fe0:	400d883a 	mov	r6,r8
20083fe4:	480f883a 	mov	r7,r9
20083fe8:	008b4440 	call	2008b444 <__gedf2>
20083fec:	00bc570e 	bge	zero,r2,2008314c <__flash_rwdata_start+0xffff169c>
20083ff0:	01000c04 	movi	r4,48
20083ff4:	00000106 	br	20083ffc <_dtoa_r+0x1624>
20083ff8:	102f883a 	mov	r23,r2
20083ffc:	b8bfffc4 	addi	r2,r23,-1
20084000:	10c00007 	ldb	r3,0(r2)
20084004:	193ffc26 	beq	r3,r4,20083ff8 <__flash_rwdata_start+0xffff2548>
20084008:	d9801217 	ldw	r6,72(sp)
2008400c:	d9800515 	stw	r6,20(sp)
20084010:	003c1f06 	br	20083090 <__flash_rwdata_start+0xffff15e0>
20084014:	d8801217 	ldw	r2,72(sp)
20084018:	dc001117 	ldw	r16,68(sp)
2008401c:	d8800515 	stw	r2,20(sp)
20084020:	003cc906 	br	20083348 <__flash_rwdata_start+0xffff1898>
20084024:	dd801317 	ldw	r22,76(sp)
20084028:	dc001117 	ldw	r16,68(sp)
2008402c:	dcc01417 	ldw	r19,80(sp)
20084030:	dc801017 	ldw	r18,64(sp)
20084034:	003c4506 	br	2008314c <__flash_rwdata_start+0xffff169c>
20084038:	103e5d1e 	bne	r2,zero,200839b0 <__flash_rwdata_start+0xffff1f00>
2008403c:	4080004c 	andi	r2,r8,1
20084040:	103e5b26 	beq	r2,zero,200839b0 <__flash_rwdata_start+0xffff1f00>
20084044:	003e5706 	br	200839a4 <__flash_rwdata_start+0xffff1ef4>
20084048:	d8c00317 	ldw	r3,12(sp)
2008404c:	00800084 	movi	r2,2
20084050:	10c00a16 	blt	r2,r3,2008407c <_dtoa_r+0x16a4>
20084054:	d9000c17 	ldw	r4,48(sp)
20084058:	003e8306 	br	20083a68 <__flash_rwdata_start+0xffff1fb8>
2008405c:	04400084 	movi	r17,2
20084060:	003b7306 	br	20082e30 <__flash_rwdata_start+0xffff1380>
20084064:	d9801217 	ldw	r6,72(sp)
20084068:	d9800515 	stw	r6,20(sp)
2008406c:	003cb606 	br	20083348 <__flash_rwdata_start+0xffff1898>
20084070:	d9001217 	ldw	r4,72(sp)
20084074:	d9000515 	stw	r4,20(sp)
20084078:	003c0506 	br	20083090 <__flash_rwdata_start+0xffff15e0>
2008407c:	d9800c17 	ldw	r6,48(sp)
20084080:	d9800615 	stw	r6,24(sp)
20084084:	003e8306 	br	20083a94 <__flash_rwdata_start+0xffff1fe4>
20084088:	d9800317 	ldw	r6,12(sp)
2008408c:	00800084 	movi	r2,2
20084090:	11800216 	blt	r2,r6,2008409c <_dtoa_r+0x16c4>
20084094:	d8800c17 	ldw	r2,48(sp)
20084098:	003da606 	br	20083734 <__flash_rwdata_start+0xffff1c84>
2008409c:	d8800c17 	ldw	r2,48(sp)
200840a0:	d8800615 	stw	r2,24(sp)
200840a4:	003e7b06 	br	20083a94 <__flash_rwdata_start+0xffff1fe4>
200840a8:	05000044 	movi	r20,1
200840ac:	003b0506 	br	20082cc4 <__flash_rwdata_start+0xffff1214>
200840b0:	8009883a 	mov	r4,r16
200840b4:	80001115 	stw	zero,68(r16)
200840b8:	000b883a 	mov	r5,zero
200840bc:	00860700 	call	20086070 <_Balloc>
200840c0:	d8800715 	stw	r2,28(sp)
200840c4:	d8c00717 	ldw	r3,28(sp)
200840c8:	00bfffc4 	movi	r2,-1
200840cc:	01000044 	movi	r4,1
200840d0:	d8800c15 	stw	r2,48(sp)
200840d4:	80c01015 	stw	r3,64(r16)
200840d8:	d9000b15 	stw	r4,44(sp)
200840dc:	d8800615 	stw	r2,24(sp)
200840e0:	d8002215 	stw	zero,136(sp)
200840e4:	003c1906 	br	2008314c <__flash_rwdata_start+0xffff169c>
200840e8:	193d2926 	beq	r3,r4,20083590 <__flash_rwdata_start+0xffff1ae0>
200840ec:	00c00f04 	movi	r3,60
200840f0:	1885c83a 	sub	r2,r3,r2
200840f4:	003d7b06 	br	200836e4 <__flash_rwdata_start+0xffff1c34>
200840f8:	000b883a 	mov	r5,zero
200840fc:	003b1006 	br	20082d40 <__flash_rwdata_start+0xffff1290>

20084100 <__sflush_r>:
20084100:	2880030b 	ldhu	r2,12(r5)
20084104:	defffb04 	addi	sp,sp,-20
20084108:	dcc00315 	stw	r19,12(sp)
2008410c:	dc400115 	stw	r17,4(sp)
20084110:	dfc00415 	stw	ra,16(sp)
20084114:	dc800215 	stw	r18,8(sp)
20084118:	dc000015 	stw	r16,0(sp)
2008411c:	10c0020c 	andi	r3,r2,8
20084120:	2823883a 	mov	r17,r5
20084124:	2027883a 	mov	r19,r4
20084128:	1800311e 	bne	r3,zero,200841f0 <__sflush_r+0xf0>
2008412c:	28c00117 	ldw	r3,4(r5)
20084130:	10820014 	ori	r2,r2,2048
20084134:	2880030d 	sth	r2,12(r5)
20084138:	00c04b0e 	bge	zero,r3,20084268 <__sflush_r+0x168>
2008413c:	8a000a17 	ldw	r8,40(r17)
20084140:	40002326 	beq	r8,zero,200841d0 <__sflush_r+0xd0>
20084144:	9c000017 	ldw	r16,0(r19)
20084148:	10c4000c 	andi	r3,r2,4096
2008414c:	98000015 	stw	zero,0(r19)
20084150:	18004826 	beq	r3,zero,20084274 <__sflush_r+0x174>
20084154:	89801417 	ldw	r6,80(r17)
20084158:	10c0010c 	andi	r3,r2,4
2008415c:	18000626 	beq	r3,zero,20084178 <__sflush_r+0x78>
20084160:	88c00117 	ldw	r3,4(r17)
20084164:	88800c17 	ldw	r2,48(r17)
20084168:	30cdc83a 	sub	r6,r6,r3
2008416c:	10000226 	beq	r2,zero,20084178 <__sflush_r+0x78>
20084170:	88800f17 	ldw	r2,60(r17)
20084174:	308dc83a 	sub	r6,r6,r2
20084178:	89400717 	ldw	r5,28(r17)
2008417c:	9809883a 	mov	r4,r19
20084180:	000f883a 	mov	r7,zero
20084184:	403ee83a 	callr	r8
20084188:	00ffffc4 	movi	r3,-1
2008418c:	10c04426 	beq	r2,r3,200842a0 <__sflush_r+0x1a0>
20084190:	88c0030b 	ldhu	r3,12(r17)
20084194:	89000417 	ldw	r4,16(r17)
20084198:	88000115 	stw	zero,4(r17)
2008419c:	197dffcc 	andi	r5,r3,63487
200841a0:	8940030d 	sth	r5,12(r17)
200841a4:	89000015 	stw	r4,0(r17)
200841a8:	18c4000c 	andi	r3,r3,4096
200841ac:	18002c1e 	bne	r3,zero,20084260 <__sflush_r+0x160>
200841b0:	89400c17 	ldw	r5,48(r17)
200841b4:	9c000015 	stw	r16,0(r19)
200841b8:	28000526 	beq	r5,zero,200841d0 <__sflush_r+0xd0>
200841bc:	88801004 	addi	r2,r17,64
200841c0:	28800226 	beq	r5,r2,200841cc <__sflush_r+0xcc>
200841c4:	9809883a 	mov	r4,r19
200841c8:	00848580 	call	20084858 <_free_r>
200841cc:	88000c15 	stw	zero,48(r17)
200841d0:	0005883a 	mov	r2,zero
200841d4:	dfc00417 	ldw	ra,16(sp)
200841d8:	dcc00317 	ldw	r19,12(sp)
200841dc:	dc800217 	ldw	r18,8(sp)
200841e0:	dc400117 	ldw	r17,4(sp)
200841e4:	dc000017 	ldw	r16,0(sp)
200841e8:	dec00504 	addi	sp,sp,20
200841ec:	f800283a 	ret
200841f0:	2c800417 	ldw	r18,16(r5)
200841f4:	903ff626 	beq	r18,zero,200841d0 <__flash_rwdata_start+0xffff2720>
200841f8:	2c000017 	ldw	r16,0(r5)
200841fc:	108000cc 	andi	r2,r2,3
20084200:	2c800015 	stw	r18,0(r5)
20084204:	84a1c83a 	sub	r16,r16,r18
20084208:	1000131e 	bne	r2,zero,20084258 <__sflush_r+0x158>
2008420c:	28800517 	ldw	r2,20(r5)
20084210:	88800215 	stw	r2,8(r17)
20084214:	04000316 	blt	zero,r16,20084224 <__sflush_r+0x124>
20084218:	003fed06 	br	200841d0 <__flash_rwdata_start+0xffff2720>
2008421c:	90a5883a 	add	r18,r18,r2
20084220:	043feb0e 	bge	zero,r16,200841d0 <__flash_rwdata_start+0xffff2720>
20084224:	88800917 	ldw	r2,36(r17)
20084228:	89400717 	ldw	r5,28(r17)
2008422c:	800f883a 	mov	r7,r16
20084230:	900d883a 	mov	r6,r18
20084234:	9809883a 	mov	r4,r19
20084238:	103ee83a 	callr	r2
2008423c:	80a1c83a 	sub	r16,r16,r2
20084240:	00bff616 	blt	zero,r2,2008421c <__flash_rwdata_start+0xffff276c>
20084244:	88c0030b 	ldhu	r3,12(r17)
20084248:	00bfffc4 	movi	r2,-1
2008424c:	18c01014 	ori	r3,r3,64
20084250:	88c0030d 	sth	r3,12(r17)
20084254:	003fdf06 	br	200841d4 <__flash_rwdata_start+0xffff2724>
20084258:	0005883a 	mov	r2,zero
2008425c:	003fec06 	br	20084210 <__flash_rwdata_start+0xffff2760>
20084260:	88801415 	stw	r2,80(r17)
20084264:	003fd206 	br	200841b0 <__flash_rwdata_start+0xffff2700>
20084268:	28c00f17 	ldw	r3,60(r5)
2008426c:	00ffb316 	blt	zero,r3,2008413c <__flash_rwdata_start+0xffff268c>
20084270:	003fd706 	br	200841d0 <__flash_rwdata_start+0xffff2720>
20084274:	89400717 	ldw	r5,28(r17)
20084278:	000d883a 	mov	r6,zero
2008427c:	9809883a 	mov	r4,r19
20084280:	01c00044 	movi	r7,1
20084284:	403ee83a 	callr	r8
20084288:	100d883a 	mov	r6,r2
2008428c:	00bfffc4 	movi	r2,-1
20084290:	30801426 	beq	r6,r2,200842e4 <__sflush_r+0x1e4>
20084294:	8880030b 	ldhu	r2,12(r17)
20084298:	8a000a17 	ldw	r8,40(r17)
2008429c:	003fae06 	br	20084158 <__flash_rwdata_start+0xffff26a8>
200842a0:	98c00017 	ldw	r3,0(r19)
200842a4:	183fba26 	beq	r3,zero,20084190 <__flash_rwdata_start+0xffff26e0>
200842a8:	01000744 	movi	r4,29
200842ac:	19000626 	beq	r3,r4,200842c8 <__sflush_r+0x1c8>
200842b0:	01000584 	movi	r4,22
200842b4:	19000426 	beq	r3,r4,200842c8 <__sflush_r+0x1c8>
200842b8:	88c0030b 	ldhu	r3,12(r17)
200842bc:	18c01014 	ori	r3,r3,64
200842c0:	88c0030d 	sth	r3,12(r17)
200842c4:	003fc306 	br	200841d4 <__flash_rwdata_start+0xffff2724>
200842c8:	8880030b 	ldhu	r2,12(r17)
200842cc:	88c00417 	ldw	r3,16(r17)
200842d0:	88000115 	stw	zero,4(r17)
200842d4:	10bdffcc 	andi	r2,r2,63487
200842d8:	8880030d 	sth	r2,12(r17)
200842dc:	88c00015 	stw	r3,0(r17)
200842e0:	003fb306 	br	200841b0 <__flash_rwdata_start+0xffff2700>
200842e4:	98800017 	ldw	r2,0(r19)
200842e8:	103fea26 	beq	r2,zero,20084294 <__flash_rwdata_start+0xffff27e4>
200842ec:	00c00744 	movi	r3,29
200842f0:	10c00226 	beq	r2,r3,200842fc <__sflush_r+0x1fc>
200842f4:	00c00584 	movi	r3,22
200842f8:	10ffd21e 	bne	r2,r3,20084244 <__flash_rwdata_start+0xffff2794>
200842fc:	9c000015 	stw	r16,0(r19)
20084300:	0005883a 	mov	r2,zero
20084304:	003fb306 	br	200841d4 <__flash_rwdata_start+0xffff2724>

20084308 <_fflush_r>:
20084308:	defffd04 	addi	sp,sp,-12
2008430c:	dc000115 	stw	r16,4(sp)
20084310:	dfc00215 	stw	ra,8(sp)
20084314:	2021883a 	mov	r16,r4
20084318:	20000226 	beq	r4,zero,20084324 <_fflush_r+0x1c>
2008431c:	20800e17 	ldw	r2,56(r4)
20084320:	10000c26 	beq	r2,zero,20084354 <_fflush_r+0x4c>
20084324:	2880030f 	ldh	r2,12(r5)
20084328:	1000051e 	bne	r2,zero,20084340 <_fflush_r+0x38>
2008432c:	0005883a 	mov	r2,zero
20084330:	dfc00217 	ldw	ra,8(sp)
20084334:	dc000117 	ldw	r16,4(sp)
20084338:	dec00304 	addi	sp,sp,12
2008433c:	f800283a 	ret
20084340:	8009883a 	mov	r4,r16
20084344:	dfc00217 	ldw	ra,8(sp)
20084348:	dc000117 	ldw	r16,4(sp)
2008434c:	dec00304 	addi	sp,sp,12
20084350:	00841001 	jmpi	20084100 <__sflush_r>
20084354:	d9400015 	stw	r5,0(sp)
20084358:	00846e40 	call	200846e4 <__sinit>
2008435c:	d9400017 	ldw	r5,0(sp)
20084360:	003ff006 	br	20084324 <__flash_rwdata_start+0xffff2874>

20084364 <fflush>:
20084364:	20000526 	beq	r4,zero,2008437c <fflush+0x18>
20084368:	00800034 	movhi	r2,0
2008436c:	10881104 	addi	r2,r2,8260
20084370:	200b883a 	mov	r5,r4
20084374:	11000017 	ldw	r4,0(r2)
20084378:	00843081 	jmpi	20084308 <_fflush_r>
2008437c:	00800034 	movhi	r2,0
20084380:	10881004 	addi	r2,r2,8256
20084384:	11000017 	ldw	r4,0(r2)
20084388:	01480234 	movhi	r5,8200
2008438c:	2950c204 	addi	r5,r5,17160
20084390:	00850cc1 	jmpi	200850cc <_fwalk_reent>

20084394 <__fp_lock>:
20084394:	0005883a 	mov	r2,zero
20084398:	f800283a 	ret

2008439c <__fp_unlock>:
2008439c:	0005883a 	mov	r2,zero
200843a0:	f800283a 	ret

200843a4 <_cleanup_r>:
200843a4:	01480274 	movhi	r5,8201
200843a8:	29639604 	addi	r5,r5,-29096
200843ac:	00850cc1 	jmpi	200850cc <_fwalk_reent>

200843b0 <__sinit.part.1>:
200843b0:	defff704 	addi	sp,sp,-36
200843b4:	00c80234 	movhi	r3,8200
200843b8:	dfc00815 	stw	ra,32(sp)
200843bc:	ddc00715 	stw	r23,28(sp)
200843c0:	dd800615 	stw	r22,24(sp)
200843c4:	dd400515 	stw	r21,20(sp)
200843c8:	dd000415 	stw	r20,16(sp)
200843cc:	dcc00315 	stw	r19,12(sp)
200843d0:	dc800215 	stw	r18,8(sp)
200843d4:	dc400115 	stw	r17,4(sp)
200843d8:	dc000015 	stw	r16,0(sp)
200843dc:	18d0e904 	addi	r3,r3,17316
200843e0:	24000117 	ldw	r16,4(r4)
200843e4:	20c00f15 	stw	r3,60(r4)
200843e8:	2080bb04 	addi	r2,r4,748
200843ec:	00c000c4 	movi	r3,3
200843f0:	20c0b915 	stw	r3,740(r4)
200843f4:	2080ba15 	stw	r2,744(r4)
200843f8:	2000b815 	stw	zero,736(r4)
200843fc:	05c00204 	movi	r23,8
20084400:	00800104 	movi	r2,4
20084404:	2025883a 	mov	r18,r4
20084408:	b80d883a 	mov	r6,r23
2008440c:	81001704 	addi	r4,r16,92
20084410:	000b883a 	mov	r5,zero
20084414:	80000015 	stw	zero,0(r16)
20084418:	80000115 	stw	zero,4(r16)
2008441c:	80000215 	stw	zero,8(r16)
20084420:	8080030d 	sth	r2,12(r16)
20084424:	80001915 	stw	zero,100(r16)
20084428:	8000038d 	sth	zero,14(r16)
2008442c:	80000415 	stw	zero,16(r16)
20084430:	80000515 	stw	zero,20(r16)
20084434:	80000615 	stw	zero,24(r16)
20084438:	0085f4c0 	call	20085f4c <memset>
2008443c:	05880234 	movhi	r22,8200
20084440:	94400217 	ldw	r17,8(r18)
20084444:	05480234 	movhi	r21,8200
20084448:	05080234 	movhi	r20,8200
2008444c:	04c80234 	movhi	r19,8200
20084450:	b59d9004 	addi	r22,r22,30272
20084454:	ad5da704 	addi	r21,r21,30364
20084458:	a51dc604 	addi	r20,r20,30488
2008445c:	9cdddd04 	addi	r19,r19,30580
20084460:	85800815 	stw	r22,32(r16)
20084464:	85400915 	stw	r21,36(r16)
20084468:	85000a15 	stw	r20,40(r16)
2008446c:	84c00b15 	stw	r19,44(r16)
20084470:	84000715 	stw	r16,28(r16)
20084474:	00800284 	movi	r2,10
20084478:	8880030d 	sth	r2,12(r17)
2008447c:	00800044 	movi	r2,1
20084480:	89001704 	addi	r4,r17,92
20084484:	b80d883a 	mov	r6,r23
20084488:	000b883a 	mov	r5,zero
2008448c:	88000015 	stw	zero,0(r17)
20084490:	88000115 	stw	zero,4(r17)
20084494:	88000215 	stw	zero,8(r17)
20084498:	88001915 	stw	zero,100(r17)
2008449c:	8880038d 	sth	r2,14(r17)
200844a0:	88000415 	stw	zero,16(r17)
200844a4:	88000515 	stw	zero,20(r17)
200844a8:	88000615 	stw	zero,24(r17)
200844ac:	0085f4c0 	call	20085f4c <memset>
200844b0:	94000317 	ldw	r16,12(r18)
200844b4:	00800484 	movi	r2,18
200844b8:	8c400715 	stw	r17,28(r17)
200844bc:	8d800815 	stw	r22,32(r17)
200844c0:	8d400915 	stw	r21,36(r17)
200844c4:	8d000a15 	stw	r20,40(r17)
200844c8:	8cc00b15 	stw	r19,44(r17)
200844cc:	8080030d 	sth	r2,12(r16)
200844d0:	00800084 	movi	r2,2
200844d4:	80000015 	stw	zero,0(r16)
200844d8:	80000115 	stw	zero,4(r16)
200844dc:	80000215 	stw	zero,8(r16)
200844e0:	80001915 	stw	zero,100(r16)
200844e4:	8080038d 	sth	r2,14(r16)
200844e8:	80000415 	stw	zero,16(r16)
200844ec:	80000515 	stw	zero,20(r16)
200844f0:	80000615 	stw	zero,24(r16)
200844f4:	81001704 	addi	r4,r16,92
200844f8:	000b883a 	mov	r5,zero
200844fc:	b80d883a 	mov	r6,r23
20084500:	0085f4c0 	call	20085f4c <memset>
20084504:	00800044 	movi	r2,1
20084508:	84000715 	stw	r16,28(r16)
2008450c:	85800815 	stw	r22,32(r16)
20084510:	85400915 	stw	r21,36(r16)
20084514:	85000a15 	stw	r20,40(r16)
20084518:	84c00b15 	stw	r19,44(r16)
2008451c:	90800e15 	stw	r2,56(r18)
20084520:	dfc00817 	ldw	ra,32(sp)
20084524:	ddc00717 	ldw	r23,28(sp)
20084528:	dd800617 	ldw	r22,24(sp)
2008452c:	dd400517 	ldw	r21,20(sp)
20084530:	dd000417 	ldw	r20,16(sp)
20084534:	dcc00317 	ldw	r19,12(sp)
20084538:	dc800217 	ldw	r18,8(sp)
2008453c:	dc400117 	ldw	r17,4(sp)
20084540:	dc000017 	ldw	r16,0(sp)
20084544:	dec00904 	addi	sp,sp,36
20084548:	f800283a 	ret

2008454c <__sfmoreglue>:
2008454c:	defffc04 	addi	sp,sp,-16
20084550:	dc400115 	stw	r17,4(sp)
20084554:	2c7fffc4 	addi	r17,r5,-1
20084558:	8c401a24 	muli	r17,r17,104
2008455c:	dc800215 	stw	r18,8(sp)
20084560:	2825883a 	mov	r18,r5
20084564:	89401d04 	addi	r5,r17,116
20084568:	dc000015 	stw	r16,0(sp)
2008456c:	dfc00315 	stw	ra,12(sp)
20084570:	00854280 	call	20085428 <_malloc_r>
20084574:	1021883a 	mov	r16,r2
20084578:	10000726 	beq	r2,zero,20084598 <__sfmoreglue+0x4c>
2008457c:	11000304 	addi	r4,r2,12
20084580:	10000015 	stw	zero,0(r2)
20084584:	14800115 	stw	r18,4(r2)
20084588:	11000215 	stw	r4,8(r2)
2008458c:	000b883a 	mov	r5,zero
20084590:	89801a04 	addi	r6,r17,104
20084594:	0085f4c0 	call	20085f4c <memset>
20084598:	8005883a 	mov	r2,r16
2008459c:	dfc00317 	ldw	ra,12(sp)
200845a0:	dc800217 	ldw	r18,8(sp)
200845a4:	dc400117 	ldw	r17,4(sp)
200845a8:	dc000017 	ldw	r16,0(sp)
200845ac:	dec00404 	addi	sp,sp,16
200845b0:	f800283a 	ret

200845b4 <__sfp>:
200845b4:	00800034 	movhi	r2,0
200845b8:	defffb04 	addi	sp,sp,-20
200845bc:	10881004 	addi	r2,r2,8256
200845c0:	dc800215 	stw	r18,8(sp)
200845c4:	14800017 	ldw	r18,0(r2)
200845c8:	dcc00315 	stw	r19,12(sp)
200845cc:	dfc00415 	stw	ra,16(sp)
200845d0:	90800e17 	ldw	r2,56(r18)
200845d4:	dc400115 	stw	r17,4(sp)
200845d8:	dc000015 	stw	r16,0(sp)
200845dc:	2027883a 	mov	r19,r4
200845e0:	1000021e 	bne	r2,zero,200845ec <__sfp+0x38>
200845e4:	9009883a 	mov	r4,r18
200845e8:	00843b00 	call	200843b0 <__sinit.part.1>
200845ec:	9480b804 	addi	r18,r18,736
200845f0:	047fffc4 	movi	r17,-1
200845f4:	91400117 	ldw	r5,4(r18)
200845f8:	94000217 	ldw	r16,8(r18)
200845fc:	297fffc4 	addi	r5,r5,-1
20084600:	28000a16 	blt	r5,zero,2008462c <__sfp+0x78>
20084604:	8080030f 	ldh	r2,12(r16)
20084608:	10000c26 	beq	r2,zero,2008463c <__sfp+0x88>
2008460c:	80c01d04 	addi	r3,r16,116
20084610:	00000206 	br	2008461c <__sfp+0x68>
20084614:	18bfe60f 	ldh	r2,-104(r3)
20084618:	10000826 	beq	r2,zero,2008463c <__sfp+0x88>
2008461c:	297fffc4 	addi	r5,r5,-1
20084620:	1c3ffd04 	addi	r16,r3,-12
20084624:	18c01a04 	addi	r3,r3,104
20084628:	2c7ffa1e 	bne	r5,r17,20084614 <__flash_rwdata_start+0xffff2b64>
2008462c:	90800017 	ldw	r2,0(r18)
20084630:	10001d26 	beq	r2,zero,200846a8 <__sfp+0xf4>
20084634:	1025883a 	mov	r18,r2
20084638:	003fee06 	br	200845f4 <__flash_rwdata_start+0xffff2b44>
2008463c:	00bfffc4 	movi	r2,-1
20084640:	8080038d 	sth	r2,14(r16)
20084644:	00800044 	movi	r2,1
20084648:	8080030d 	sth	r2,12(r16)
2008464c:	80001915 	stw	zero,100(r16)
20084650:	80000015 	stw	zero,0(r16)
20084654:	80000215 	stw	zero,8(r16)
20084658:	80000115 	stw	zero,4(r16)
2008465c:	80000415 	stw	zero,16(r16)
20084660:	80000515 	stw	zero,20(r16)
20084664:	80000615 	stw	zero,24(r16)
20084668:	81001704 	addi	r4,r16,92
2008466c:	000b883a 	mov	r5,zero
20084670:	01800204 	movi	r6,8
20084674:	0085f4c0 	call	20085f4c <memset>
20084678:	8005883a 	mov	r2,r16
2008467c:	80000c15 	stw	zero,48(r16)
20084680:	80000d15 	stw	zero,52(r16)
20084684:	80001115 	stw	zero,68(r16)
20084688:	80001215 	stw	zero,72(r16)
2008468c:	dfc00417 	ldw	ra,16(sp)
20084690:	dcc00317 	ldw	r19,12(sp)
20084694:	dc800217 	ldw	r18,8(sp)
20084698:	dc400117 	ldw	r17,4(sp)
2008469c:	dc000017 	ldw	r16,0(sp)
200846a0:	dec00504 	addi	sp,sp,20
200846a4:	f800283a 	ret
200846a8:	9809883a 	mov	r4,r19
200846ac:	01400104 	movi	r5,4
200846b0:	008454c0 	call	2008454c <__sfmoreglue>
200846b4:	90800015 	stw	r2,0(r18)
200846b8:	103fde1e 	bne	r2,zero,20084634 <__flash_rwdata_start+0xffff2b84>
200846bc:	00800304 	movi	r2,12
200846c0:	98800015 	stw	r2,0(r19)
200846c4:	0005883a 	mov	r2,zero
200846c8:	003ff006 	br	2008468c <__flash_rwdata_start+0xffff2bdc>

200846cc <_cleanup>:
200846cc:	00800034 	movhi	r2,0
200846d0:	10881004 	addi	r2,r2,8256
200846d4:	11000017 	ldw	r4,0(r2)
200846d8:	01480274 	movhi	r5,8201
200846dc:	29639604 	addi	r5,r5,-29096
200846e0:	00850cc1 	jmpi	200850cc <_fwalk_reent>

200846e4 <__sinit>:
200846e4:	20800e17 	ldw	r2,56(r4)
200846e8:	10000126 	beq	r2,zero,200846f0 <__sinit+0xc>
200846ec:	f800283a 	ret
200846f0:	00843b01 	jmpi	200843b0 <__sinit.part.1>

200846f4 <__sfp_lock_acquire>:
200846f4:	f800283a 	ret

200846f8 <__sfp_lock_release>:
200846f8:	f800283a 	ret

200846fc <__sinit_lock_acquire>:
200846fc:	f800283a 	ret

20084700 <__sinit_lock_release>:
20084700:	f800283a 	ret

20084704 <__fp_lock_all>:
20084704:	00800034 	movhi	r2,0
20084708:	10881104 	addi	r2,r2,8260
2008470c:	11000017 	ldw	r4,0(r2)
20084710:	01480234 	movhi	r5,8200
20084714:	2950e504 	addi	r5,r5,17300
20084718:	00850081 	jmpi	20085008 <_fwalk>

2008471c <__fp_unlock_all>:
2008471c:	00800034 	movhi	r2,0
20084720:	10881104 	addi	r2,r2,8260
20084724:	11000017 	ldw	r4,0(r2)
20084728:	01480234 	movhi	r5,8200
2008472c:	2950e704 	addi	r5,r5,17308
20084730:	00850081 	jmpi	20085008 <_fwalk>

20084734 <_malloc_trim_r>:
20084734:	defffb04 	addi	sp,sp,-20
20084738:	dcc00315 	stw	r19,12(sp)
2008473c:	04c00034 	movhi	r19,0
20084740:	dc800215 	stw	r18,8(sp)
20084744:	dc400115 	stw	r17,4(sp)
20084748:	dc000015 	stw	r16,0(sp)
2008474c:	dfc00415 	stw	ra,16(sp)
20084750:	2821883a 	mov	r16,r5
20084754:	9cc27404 	addi	r19,r19,2512
20084758:	2025883a 	mov	r18,r4
2008475c:	008cfc80 	call	2008cfc8 <__malloc_lock>
20084760:	98800217 	ldw	r2,8(r19)
20084764:	14400117 	ldw	r17,4(r2)
20084768:	00bfff04 	movi	r2,-4
2008476c:	88a2703a 	and	r17,r17,r2
20084770:	8c21c83a 	sub	r16,r17,r16
20084774:	8403fbc4 	addi	r16,r16,4079
20084778:	8020d33a 	srli	r16,r16,12
2008477c:	0083ffc4 	movi	r2,4095
20084780:	843fffc4 	addi	r16,r16,-1
20084784:	8020933a 	slli	r16,r16,12
20084788:	1400060e 	bge	r2,r16,200847a4 <_malloc_trim_r+0x70>
2008478c:	9009883a 	mov	r4,r18
20084790:	000b883a 	mov	r5,zero
20084794:	00875ec0 	call	200875ec <_sbrk_r>
20084798:	98c00217 	ldw	r3,8(r19)
2008479c:	1c47883a 	add	r3,r3,r17
200847a0:	10c00a26 	beq	r2,r3,200847cc <_malloc_trim_r+0x98>
200847a4:	9009883a 	mov	r4,r18
200847a8:	008cfe80 	call	2008cfe8 <__malloc_unlock>
200847ac:	0005883a 	mov	r2,zero
200847b0:	dfc00417 	ldw	ra,16(sp)
200847b4:	dcc00317 	ldw	r19,12(sp)
200847b8:	dc800217 	ldw	r18,8(sp)
200847bc:	dc400117 	ldw	r17,4(sp)
200847c0:	dc000017 	ldw	r16,0(sp)
200847c4:	dec00504 	addi	sp,sp,20
200847c8:	f800283a 	ret
200847cc:	9009883a 	mov	r4,r18
200847d0:	040bc83a 	sub	r5,zero,r16
200847d4:	00875ec0 	call	200875ec <_sbrk_r>
200847d8:	00ffffc4 	movi	r3,-1
200847dc:	10c00d26 	beq	r2,r3,20084814 <_malloc_trim_r+0xe0>
200847e0:	00c00034 	movhi	r3,0
200847e4:	18c83304 	addi	r3,r3,8396
200847e8:	18800017 	ldw	r2,0(r3)
200847ec:	99000217 	ldw	r4,8(r19)
200847f0:	8c23c83a 	sub	r17,r17,r16
200847f4:	8c400054 	ori	r17,r17,1
200847f8:	1421c83a 	sub	r16,r2,r16
200847fc:	24400115 	stw	r17,4(r4)
20084800:	9009883a 	mov	r4,r18
20084804:	1c000015 	stw	r16,0(r3)
20084808:	008cfe80 	call	2008cfe8 <__malloc_unlock>
2008480c:	00800044 	movi	r2,1
20084810:	003fe706 	br	200847b0 <__flash_rwdata_start+0xffff2d00>
20084814:	9009883a 	mov	r4,r18
20084818:	000b883a 	mov	r5,zero
2008481c:	00875ec0 	call	200875ec <_sbrk_r>
20084820:	99000217 	ldw	r4,8(r19)
20084824:	014003c4 	movi	r5,15
20084828:	1107c83a 	sub	r3,r2,r4
2008482c:	28ffdd0e 	bge	r5,r3,200847a4 <__flash_rwdata_start+0xffff2cf4>
20084830:	01400034 	movhi	r5,0
20084834:	29481304 	addi	r5,r5,8268
20084838:	29400017 	ldw	r5,0(r5)
2008483c:	18c00054 	ori	r3,r3,1
20084840:	20c00115 	stw	r3,4(r4)
20084844:	00c00034 	movhi	r3,0
20084848:	1145c83a 	sub	r2,r2,r5
2008484c:	18c83304 	addi	r3,r3,8396
20084850:	18800015 	stw	r2,0(r3)
20084854:	003fd306 	br	200847a4 <__flash_rwdata_start+0xffff2cf4>

20084858 <_free_r>:
20084858:	28004c26 	beq	r5,zero,2008498c <_free_r+0x134>
2008485c:	defffd04 	addi	sp,sp,-12
20084860:	dc400115 	stw	r17,4(sp)
20084864:	dc000015 	stw	r16,0(sp)
20084868:	2023883a 	mov	r17,r4
2008486c:	2821883a 	mov	r16,r5
20084870:	dfc00215 	stw	ra,8(sp)
20084874:	008cfc80 	call	2008cfc8 <__malloc_lock>
20084878:	813fff17 	ldw	r4,-4(r16)
2008487c:	00bfff84 	movi	r2,-2
20084880:	02400034 	movhi	r9,0
20084884:	81bffe04 	addi	r6,r16,-8
20084888:	2084703a 	and	r2,r4,r2
2008488c:	4a427404 	addi	r9,r9,2512
20084890:	308b883a 	add	r5,r6,r2
20084894:	2a000117 	ldw	r8,4(r5)
20084898:	49c00217 	ldw	r7,8(r9)
2008489c:	00ffff04 	movi	r3,-4
200848a0:	40c6703a 	and	r3,r8,r3
200848a4:	39405326 	beq	r7,r5,200849f4 <_free_r+0x19c>
200848a8:	28c00115 	stw	r3,4(r5)
200848ac:	2100004c 	andi	r4,r4,1
200848b0:	2000091e 	bne	r4,zero,200848d8 <_free_r+0x80>
200848b4:	81fffe17 	ldw	r7,-8(r16)
200848b8:	4a000204 	addi	r8,r9,8
200848bc:	31cdc83a 	sub	r6,r6,r7
200848c0:	31000217 	ldw	r4,8(r6)
200848c4:	11c5883a 	add	r2,r2,r7
200848c8:	22006126 	beq	r4,r8,20084a50 <_free_r+0x1f8>
200848cc:	31c00317 	ldw	r7,12(r6)
200848d0:	21c00315 	stw	r7,12(r4)
200848d4:	39000215 	stw	r4,8(r7)
200848d8:	28c9883a 	add	r4,r5,r3
200848dc:	21c00117 	ldw	r7,4(r4)
200848e0:	39c0004c 	andi	r7,r7,1
200848e4:	38000d1e 	bne	r7,zero,2008491c <_free_r+0xc4>
200848e8:	29000217 	ldw	r4,8(r5)
200848ec:	10c5883a 	add	r2,r2,r3
200848f0:	00c00034 	movhi	r3,0
200848f4:	18c27604 	addi	r3,r3,2520
200848f8:	20c07526 	beq	r4,r3,20084ad0 <_free_r+0x278>
200848fc:	29c00317 	ldw	r7,12(r5)
20084900:	11400054 	ori	r5,r2,1
20084904:	3087883a 	add	r3,r6,r2
20084908:	21c00315 	stw	r7,12(r4)
2008490c:	39000215 	stw	r4,8(r7)
20084910:	31400115 	stw	r5,4(r6)
20084914:	18800015 	stw	r2,0(r3)
20084918:	00000406 	br	2008492c <_free_r+0xd4>
2008491c:	10c00054 	ori	r3,r2,1
20084920:	30c00115 	stw	r3,4(r6)
20084924:	3087883a 	add	r3,r6,r2
20084928:	18800015 	stw	r2,0(r3)
2008492c:	00c07fc4 	movi	r3,511
20084930:	18801736 	bltu	r3,r2,20084990 <_free_r+0x138>
20084934:	1004d0fa 	srli	r2,r2,3
20084938:	01400044 	movi	r5,1
2008493c:	49000117 	ldw	r4,4(r9)
20084940:	1087883a 	add	r3,r2,r2
20084944:	18c7883a 	add	r3,r3,r3
20084948:	1005d0ba 	srai	r2,r2,2
2008494c:	18c7883a 	add	r3,r3,r3
20084950:	1a47883a 	add	r3,r3,r9
20084954:	19c00217 	ldw	r7,8(r3)
20084958:	2884983a 	sll	r2,r5,r2
2008495c:	30c00315 	stw	r3,12(r6)
20084960:	31c00215 	stw	r7,8(r6)
20084964:	1104b03a 	or	r2,r2,r4
20084968:	19800215 	stw	r6,8(r3)
2008496c:	48800115 	stw	r2,4(r9)
20084970:	39800315 	stw	r6,12(r7)
20084974:	8809883a 	mov	r4,r17
20084978:	dfc00217 	ldw	ra,8(sp)
2008497c:	dc400117 	ldw	r17,4(sp)
20084980:	dc000017 	ldw	r16,0(sp)
20084984:	dec00304 	addi	sp,sp,12
20084988:	008cfe81 	jmpi	2008cfe8 <__malloc_unlock>
2008498c:	f800283a 	ret
20084990:	1006d27a 	srli	r3,r2,9
20084994:	01000104 	movi	r4,4
20084998:	20c04036 	bltu	r4,r3,20084a9c <_free_r+0x244>
2008499c:	1006d1ba 	srli	r3,r2,6
200849a0:	19400e04 	addi	r5,r3,56
200849a4:	2947883a 	add	r3,r5,r5
200849a8:	18c7883a 	add	r3,r3,r3
200849ac:	18c7883a 	add	r3,r3,r3
200849b0:	1a49883a 	add	r4,r3,r9
200849b4:	20c00217 	ldw	r3,8(r4)
200849b8:	01c00034 	movhi	r7,0
200849bc:	39c27404 	addi	r7,r7,2512
200849c0:	19003b26 	beq	r3,r4,20084ab0 <_free_r+0x258>
200849c4:	01ffff04 	movi	r7,-4
200849c8:	19400117 	ldw	r5,4(r3)
200849cc:	29ca703a 	and	r5,r5,r7
200849d0:	1140022e 	bgeu	r2,r5,200849dc <_free_r+0x184>
200849d4:	18c00217 	ldw	r3,8(r3)
200849d8:	20fffb1e 	bne	r4,r3,200849c8 <__flash_rwdata_start+0xffff2f18>
200849dc:	18800317 	ldw	r2,12(r3)
200849e0:	30800315 	stw	r2,12(r6)
200849e4:	30c00215 	stw	r3,8(r6)
200849e8:	11800215 	stw	r6,8(r2)
200849ec:	19800315 	stw	r6,12(r3)
200849f0:	003fe006 	br	20084974 <__flash_rwdata_start+0xffff2ec4>
200849f4:	2100004c 	andi	r4,r4,1
200849f8:	1885883a 	add	r2,r3,r2
200849fc:	2000071e 	bne	r4,zero,20084a1c <_free_r+0x1c4>
20084a00:	817ffe17 	ldw	r5,-8(r16)
20084a04:	314dc83a 	sub	r6,r6,r5
20084a08:	30c00317 	ldw	r3,12(r6)
20084a0c:	31000217 	ldw	r4,8(r6)
20084a10:	1145883a 	add	r2,r2,r5
20084a14:	20c00315 	stw	r3,12(r4)
20084a18:	19000215 	stw	r4,8(r3)
20084a1c:	10c00054 	ori	r3,r2,1
20084a20:	30c00115 	stw	r3,4(r6)
20084a24:	00c00034 	movhi	r3,0
20084a28:	18c81404 	addi	r3,r3,8272
20084a2c:	18c00017 	ldw	r3,0(r3)
20084a30:	49800215 	stw	r6,8(r9)
20084a34:	10ffcf36 	bltu	r2,r3,20084974 <__flash_rwdata_start+0xffff2ec4>
20084a38:	00800034 	movhi	r2,0
20084a3c:	10882804 	addi	r2,r2,8352
20084a40:	11400017 	ldw	r5,0(r2)
20084a44:	8809883a 	mov	r4,r17
20084a48:	00847340 	call	20084734 <_malloc_trim_r>
20084a4c:	003fc906 	br	20084974 <__flash_rwdata_start+0xffff2ec4>
20084a50:	28c9883a 	add	r4,r5,r3
20084a54:	21000117 	ldw	r4,4(r4)
20084a58:	2100004c 	andi	r4,r4,1
20084a5c:	20000a1e 	bne	r4,zero,20084a88 <_free_r+0x230>
20084a60:	29000317 	ldw	r4,12(r5)
20084a64:	29400217 	ldw	r5,8(r5)
20084a68:	10c5883a 	add	r2,r2,r3
20084a6c:	10c00054 	ori	r3,r2,1
20084a70:	29000315 	stw	r4,12(r5)
20084a74:	21400215 	stw	r5,8(r4)
20084a78:	30c00115 	stw	r3,4(r6)
20084a7c:	308d883a 	add	r6,r6,r2
20084a80:	30800015 	stw	r2,0(r6)
20084a84:	003fbb06 	br	20084974 <__flash_rwdata_start+0xffff2ec4>
20084a88:	10c00054 	ori	r3,r2,1
20084a8c:	30c00115 	stw	r3,4(r6)
20084a90:	308d883a 	add	r6,r6,r2
20084a94:	30800015 	stw	r2,0(r6)
20084a98:	003fb606 	br	20084974 <__flash_rwdata_start+0xffff2ec4>
20084a9c:	01000504 	movi	r4,20
20084aa0:	20c01436 	bltu	r4,r3,20084af4 <_free_r+0x29c>
20084aa4:	194016c4 	addi	r5,r3,91
20084aa8:	2947883a 	add	r3,r5,r5
20084aac:	003fbe06 	br	200849a8 <__flash_rwdata_start+0xffff2ef8>
20084ab0:	280bd0ba 	srai	r5,r5,2
20084ab4:	00800044 	movi	r2,1
20084ab8:	39000117 	ldw	r4,4(r7)
20084abc:	114a983a 	sll	r5,r2,r5
20084ac0:	1805883a 	mov	r2,r3
20084ac4:	2908b03a 	or	r4,r5,r4
20084ac8:	39000115 	stw	r4,4(r7)
20084acc:	003fc406 	br	200849e0 <__flash_rwdata_start+0xffff2f30>
20084ad0:	49800515 	stw	r6,20(r9)
20084ad4:	49800415 	stw	r6,16(r9)
20084ad8:	10c00054 	ori	r3,r2,1
20084adc:	31000315 	stw	r4,12(r6)
20084ae0:	31000215 	stw	r4,8(r6)
20084ae4:	30c00115 	stw	r3,4(r6)
20084ae8:	308d883a 	add	r6,r6,r2
20084aec:	30800015 	stw	r2,0(r6)
20084af0:	003fa006 	br	20084974 <__flash_rwdata_start+0xffff2ec4>
20084af4:	01001504 	movi	r4,84
20084af8:	20c00436 	bltu	r4,r3,20084b0c <_free_r+0x2b4>
20084afc:	1006d33a 	srli	r3,r2,12
20084b00:	19401b84 	addi	r5,r3,110
20084b04:	2947883a 	add	r3,r5,r5
20084b08:	003fa706 	br	200849a8 <__flash_rwdata_start+0xffff2ef8>
20084b0c:	01005504 	movi	r4,340
20084b10:	20c00436 	bltu	r4,r3,20084b24 <_free_r+0x2cc>
20084b14:	1006d3fa 	srli	r3,r2,15
20084b18:	19401dc4 	addi	r5,r3,119
20084b1c:	2947883a 	add	r3,r5,r5
20084b20:	003fa106 	br	200849a8 <__flash_rwdata_start+0xffff2ef8>
20084b24:	01015504 	movi	r4,1364
20084b28:	20c00436 	bltu	r4,r3,20084b3c <_free_r+0x2e4>
20084b2c:	1006d4ba 	srli	r3,r2,18
20084b30:	19401f04 	addi	r5,r3,124
20084b34:	2947883a 	add	r3,r5,r5
20084b38:	003f9b06 	br	200849a8 <__flash_rwdata_start+0xffff2ef8>
20084b3c:	00c03f04 	movi	r3,252
20084b40:	01401f84 	movi	r5,126
20084b44:	003f9806 	br	200849a8 <__flash_rwdata_start+0xffff2ef8>

20084b48 <__sfvwrite_r>:
20084b48:	30800217 	ldw	r2,8(r6)
20084b4c:	10006726 	beq	r2,zero,20084cec <__sfvwrite_r+0x1a4>
20084b50:	defff404 	addi	sp,sp,-48
20084b54:	dd000615 	stw	r20,24(sp)
20084b58:	2029883a 	mov	r20,r4
20084b5c:	2900030b 	ldhu	r4,12(r5)
20084b60:	ddc00915 	stw	r23,36(sp)
20084b64:	dc000215 	stw	r16,8(sp)
20084b68:	dfc00b15 	stw	ra,44(sp)
20084b6c:	df000a15 	stw	fp,40(sp)
20084b70:	dd800815 	stw	r22,32(sp)
20084b74:	dd400715 	stw	r21,28(sp)
20084b78:	dcc00515 	stw	r19,20(sp)
20084b7c:	dc800415 	stw	r18,16(sp)
20084b80:	dc400315 	stw	r17,12(sp)
20084b84:	2080020c 	andi	r2,r4,8
20084b88:	2821883a 	mov	r16,r5
20084b8c:	302f883a 	mov	r23,r6
20084b90:	10002726 	beq	r2,zero,20084c30 <__sfvwrite_r+0xe8>
20084b94:	28800417 	ldw	r2,16(r5)
20084b98:	10002526 	beq	r2,zero,20084c30 <__sfvwrite_r+0xe8>
20084b9c:	2080008c 	andi	r2,r4,2
20084ba0:	bc400017 	ldw	r17,0(r23)
20084ba4:	10002a26 	beq	r2,zero,20084c50 <__sfvwrite_r+0x108>
20084ba8:	05600034 	movhi	r21,32768
20084bac:	0027883a 	mov	r19,zero
20084bb0:	0025883a 	mov	r18,zero
20084bb4:	ad7f0004 	addi	r21,r21,-1024
20084bb8:	980d883a 	mov	r6,r19
20084bbc:	a009883a 	mov	r4,r20
20084bc0:	90004626 	beq	r18,zero,20084cdc <__sfvwrite_r+0x194>
20084bc4:	900f883a 	mov	r7,r18
20084bc8:	81400717 	ldw	r5,28(r16)
20084bcc:	ac80022e 	bgeu	r21,r18,20084bd8 <__sfvwrite_r+0x90>
20084bd0:	01e00034 	movhi	r7,32768
20084bd4:	39ff0004 	addi	r7,r7,-1024
20084bd8:	80800917 	ldw	r2,36(r16)
20084bdc:	103ee83a 	callr	r2
20084be0:	0080520e 	bge	zero,r2,20084d2c <__sfvwrite_r+0x1e4>
20084be4:	b8c00217 	ldw	r3,8(r23)
20084be8:	98a7883a 	add	r19,r19,r2
20084bec:	90a5c83a 	sub	r18,r18,r2
20084bf0:	1885c83a 	sub	r2,r3,r2
20084bf4:	b8800215 	stw	r2,8(r23)
20084bf8:	103fef1e 	bne	r2,zero,20084bb8 <__flash_rwdata_start+0xffff3108>
20084bfc:	0005883a 	mov	r2,zero
20084c00:	dfc00b17 	ldw	ra,44(sp)
20084c04:	df000a17 	ldw	fp,40(sp)
20084c08:	ddc00917 	ldw	r23,36(sp)
20084c0c:	dd800817 	ldw	r22,32(sp)
20084c10:	dd400717 	ldw	r21,28(sp)
20084c14:	dd000617 	ldw	r20,24(sp)
20084c18:	dcc00517 	ldw	r19,20(sp)
20084c1c:	dc800417 	ldw	r18,16(sp)
20084c20:	dc400317 	ldw	r17,12(sp)
20084c24:	dc000217 	ldw	r16,8(sp)
20084c28:	dec00c04 	addi	sp,sp,48
20084c2c:	f800283a 	ret
20084c30:	a009883a 	mov	r4,r20
20084c34:	800b883a 	mov	r5,r16
20084c38:	00826840 	call	20082684 <__swsetup_r>
20084c3c:	1000ec1e 	bne	r2,zero,20084ff0 <__sfvwrite_r+0x4a8>
20084c40:	8100030b 	ldhu	r4,12(r16)
20084c44:	bc400017 	ldw	r17,0(r23)
20084c48:	2080008c 	andi	r2,r4,2
20084c4c:	103fd61e 	bne	r2,zero,20084ba8 <__flash_rwdata_start+0xffff30f8>
20084c50:	2080004c 	andi	r2,r4,1
20084c54:	10003a1e 	bne	r2,zero,20084d40 <__sfvwrite_r+0x1f8>
20084c58:	0039883a 	mov	fp,zero
20084c5c:	0025883a 	mov	r18,zero
20084c60:	90001a26 	beq	r18,zero,20084ccc <__sfvwrite_r+0x184>
20084c64:	2080800c 	andi	r2,r4,512
20084c68:	85800217 	ldw	r22,8(r16)
20084c6c:	10007626 	beq	r2,zero,20084e48 <__sfvwrite_r+0x300>
20084c70:	b027883a 	mov	r19,r22
20084c74:	95809436 	bltu	r18,r22,20084ec8 <__sfvwrite_r+0x380>
20084c78:	2081200c 	andi	r2,r4,1152
20084c7c:	10009f1e 	bne	r2,zero,20084efc <__sfvwrite_r+0x3b4>
20084c80:	81000017 	ldw	r4,0(r16)
20084c84:	e00b883a 	mov	r5,fp
20084c88:	980d883a 	mov	r6,r19
20084c8c:	0085df00 	call	20085df0 <memmove>
20084c90:	81000217 	ldw	r4,8(r16)
20084c94:	81400017 	ldw	r5,0(r16)
20084c98:	9005883a 	mov	r2,r18
20084c9c:	2587c83a 	sub	r3,r4,r22
20084ca0:	2ce7883a 	add	r19,r5,r19
20084ca4:	80c00215 	stw	r3,8(r16)
20084ca8:	84c00015 	stw	r19,0(r16)
20084cac:	b8c00217 	ldw	r3,8(r23)
20084cb0:	e0b9883a 	add	fp,fp,r2
20084cb4:	90a5c83a 	sub	r18,r18,r2
20084cb8:	1885c83a 	sub	r2,r3,r2
20084cbc:	b8800215 	stw	r2,8(r23)
20084cc0:	103fce26 	beq	r2,zero,20084bfc <__flash_rwdata_start+0xffff314c>
20084cc4:	8100030b 	ldhu	r4,12(r16)
20084cc8:	903fe61e 	bne	r18,zero,20084c64 <__flash_rwdata_start+0xffff31b4>
20084ccc:	8f000017 	ldw	fp,0(r17)
20084cd0:	8c800117 	ldw	r18,4(r17)
20084cd4:	8c400204 	addi	r17,r17,8
20084cd8:	003fe106 	br	20084c60 <__flash_rwdata_start+0xffff31b0>
20084cdc:	8cc00017 	ldw	r19,0(r17)
20084ce0:	8c800117 	ldw	r18,4(r17)
20084ce4:	8c400204 	addi	r17,r17,8
20084ce8:	003fb306 	br	20084bb8 <__flash_rwdata_start+0xffff3108>
20084cec:	0005883a 	mov	r2,zero
20084cf0:	f800283a 	ret
20084cf4:	00a00034 	movhi	r2,32768
20084cf8:	10bfffc4 	addi	r2,r2,-1
20084cfc:	9009883a 	mov	r4,r18
20084d00:	1480012e 	bgeu	r2,r18,20084d08 <__sfvwrite_r+0x1c0>
20084d04:	1009883a 	mov	r4,r2
20084d08:	980b883a 	mov	r5,r19
20084d0c:	008a1980 	call	2008a198 <__divsi3>
20084d10:	81400717 	ldw	r5,28(r16)
20084d14:	80c00917 	ldw	r3,36(r16)
20084d18:	988f383a 	mul	r7,r19,r2
20084d1c:	a009883a 	mov	r4,r20
20084d20:	e00d883a 	mov	r6,fp
20084d24:	183ee83a 	callr	r3
20084d28:	00bfe016 	blt	zero,r2,20084cac <__flash_rwdata_start+0xffff31fc>
20084d2c:	8080030b 	ldhu	r2,12(r16)
20084d30:	10801014 	ori	r2,r2,64
20084d34:	8080030d 	sth	r2,12(r16)
20084d38:	00bfffc4 	movi	r2,-1
20084d3c:	003fb006 	br	20084c00 <__flash_rwdata_start+0xffff3150>
20084d40:	0027883a 	mov	r19,zero
20084d44:	0011883a 	mov	r8,zero
20084d48:	0039883a 	mov	fp,zero
20084d4c:	0025883a 	mov	r18,zero
20084d50:	90001f26 	beq	r18,zero,20084dd0 <__sfvwrite_r+0x288>
20084d54:	40006026 	beq	r8,zero,20084ed8 <__sfvwrite_r+0x390>
20084d58:	982b883a 	mov	r21,r19
20084d5c:	94c0012e 	bgeu	r18,r19,20084d64 <__sfvwrite_r+0x21c>
20084d60:	902b883a 	mov	r21,r18
20084d64:	81000017 	ldw	r4,0(r16)
20084d68:	80800417 	ldw	r2,16(r16)
20084d6c:	a82d883a 	mov	r22,r21
20084d70:	81800217 	ldw	r6,8(r16)
20084d74:	81c00517 	ldw	r7,20(r16)
20084d78:	1100022e 	bgeu	r2,r4,20084d84 <__sfvwrite_r+0x23c>
20084d7c:	31c7883a 	add	r3,r6,r7
20084d80:	1d401816 	blt	r3,r21,20084de4 <__sfvwrite_r+0x29c>
20084d84:	a9c04416 	blt	r21,r7,20084e98 <__sfvwrite_r+0x350>
20084d88:	80800917 	ldw	r2,36(r16)
20084d8c:	81400717 	ldw	r5,28(r16)
20084d90:	a009883a 	mov	r4,r20
20084d94:	da000115 	stw	r8,4(sp)
20084d98:	e00d883a 	mov	r6,fp
20084d9c:	103ee83a 	callr	r2
20084da0:	102d883a 	mov	r22,r2
20084da4:	da000117 	ldw	r8,4(sp)
20084da8:	00bfe00e 	bge	zero,r2,20084d2c <__flash_rwdata_start+0xffff327c>
20084dac:	9da7c83a 	sub	r19,r19,r22
20084db0:	98001f26 	beq	r19,zero,20084e30 <__sfvwrite_r+0x2e8>
20084db4:	b8800217 	ldw	r2,8(r23)
20084db8:	e5b9883a 	add	fp,fp,r22
20084dbc:	95a5c83a 	sub	r18,r18,r22
20084dc0:	15adc83a 	sub	r22,r2,r22
20084dc4:	bd800215 	stw	r22,8(r23)
20084dc8:	b03f8c26 	beq	r22,zero,20084bfc <__flash_rwdata_start+0xffff314c>
20084dcc:	903fe11e 	bne	r18,zero,20084d54 <__flash_rwdata_start+0xffff32a4>
20084dd0:	8f000017 	ldw	fp,0(r17)
20084dd4:	8c800117 	ldw	r18,4(r17)
20084dd8:	0011883a 	mov	r8,zero
20084ddc:	8c400204 	addi	r17,r17,8
20084de0:	003fdb06 	br	20084d50 <__flash_rwdata_start+0xffff32a0>
20084de4:	180d883a 	mov	r6,r3
20084de8:	e00b883a 	mov	r5,fp
20084dec:	da000115 	stw	r8,4(sp)
20084df0:	d8c00015 	stw	r3,0(sp)
20084df4:	0085df00 	call	20085df0 <memmove>
20084df8:	d8c00017 	ldw	r3,0(sp)
20084dfc:	80800017 	ldw	r2,0(r16)
20084e00:	a009883a 	mov	r4,r20
20084e04:	800b883a 	mov	r5,r16
20084e08:	10c5883a 	add	r2,r2,r3
20084e0c:	80800015 	stw	r2,0(r16)
20084e10:	d8c00015 	stw	r3,0(sp)
20084e14:	00843080 	call	20084308 <_fflush_r>
20084e18:	d8c00017 	ldw	r3,0(sp)
20084e1c:	da000117 	ldw	r8,4(sp)
20084e20:	103fc21e 	bne	r2,zero,20084d2c <__flash_rwdata_start+0xffff327c>
20084e24:	182d883a 	mov	r22,r3
20084e28:	9da7c83a 	sub	r19,r19,r22
20084e2c:	983fe11e 	bne	r19,zero,20084db4 <__flash_rwdata_start+0xffff3304>
20084e30:	a009883a 	mov	r4,r20
20084e34:	800b883a 	mov	r5,r16
20084e38:	00843080 	call	20084308 <_fflush_r>
20084e3c:	103fbb1e 	bne	r2,zero,20084d2c <__flash_rwdata_start+0xffff327c>
20084e40:	0011883a 	mov	r8,zero
20084e44:	003fdb06 	br	20084db4 <__flash_rwdata_start+0xffff3304>
20084e48:	81000017 	ldw	r4,0(r16)
20084e4c:	80800417 	ldw	r2,16(r16)
20084e50:	11000236 	bltu	r2,r4,20084e5c <__sfvwrite_r+0x314>
20084e54:	84c00517 	ldw	r19,20(r16)
20084e58:	94ffa62e 	bgeu	r18,r19,20084cf4 <__flash_rwdata_start+0xffff3244>
20084e5c:	9027883a 	mov	r19,r18
20084e60:	b480012e 	bgeu	r22,r18,20084e68 <__sfvwrite_r+0x320>
20084e64:	b027883a 	mov	r19,r22
20084e68:	e00b883a 	mov	r5,fp
20084e6c:	980d883a 	mov	r6,r19
20084e70:	0085df00 	call	20085df0 <memmove>
20084e74:	80800217 	ldw	r2,8(r16)
20084e78:	80c00017 	ldw	r3,0(r16)
20084e7c:	14c5c83a 	sub	r2,r2,r19
20084e80:	1cc7883a 	add	r3,r3,r19
20084e84:	80800215 	stw	r2,8(r16)
20084e88:	80c00015 	stw	r3,0(r16)
20084e8c:	10004326 	beq	r2,zero,20084f9c <__sfvwrite_r+0x454>
20084e90:	9805883a 	mov	r2,r19
20084e94:	003f8506 	br	20084cac <__flash_rwdata_start+0xffff31fc>
20084e98:	a80d883a 	mov	r6,r21
20084e9c:	e00b883a 	mov	r5,fp
20084ea0:	da000115 	stw	r8,4(sp)
20084ea4:	0085df00 	call	20085df0 <memmove>
20084ea8:	80800217 	ldw	r2,8(r16)
20084eac:	80c00017 	ldw	r3,0(r16)
20084eb0:	da000117 	ldw	r8,4(sp)
20084eb4:	1545c83a 	sub	r2,r2,r21
20084eb8:	1d6b883a 	add	r21,r3,r21
20084ebc:	80800215 	stw	r2,8(r16)
20084ec0:	85400015 	stw	r21,0(r16)
20084ec4:	003fb906 	br	20084dac <__flash_rwdata_start+0xffff32fc>
20084ec8:	81000017 	ldw	r4,0(r16)
20084ecc:	902d883a 	mov	r22,r18
20084ed0:	9027883a 	mov	r19,r18
20084ed4:	003f6b06 	br	20084c84 <__flash_rwdata_start+0xffff31d4>
20084ed8:	e009883a 	mov	r4,fp
20084edc:	01400284 	movi	r5,10
20084ee0:	900d883a 	mov	r6,r18
20084ee4:	0085bd00 	call	20085bd0 <memchr>
20084ee8:	10003e26 	beq	r2,zero,20084fe4 <__sfvwrite_r+0x49c>
20084eec:	10800044 	addi	r2,r2,1
20084ef0:	1727c83a 	sub	r19,r2,fp
20084ef4:	02000044 	movi	r8,1
20084ef8:	003f9706 	br	20084d58 <__flash_rwdata_start+0xffff32a8>
20084efc:	80800517 	ldw	r2,20(r16)
20084f00:	81400417 	ldw	r5,16(r16)
20084f04:	80c00017 	ldw	r3,0(r16)
20084f08:	10a7883a 	add	r19,r2,r2
20084f0c:	9885883a 	add	r2,r19,r2
20084f10:	1026d7fa 	srli	r19,r2,31
20084f14:	196bc83a 	sub	r21,r3,r5
20084f18:	a9800044 	addi	r6,r21,1
20084f1c:	9885883a 	add	r2,r19,r2
20084f20:	1027d07a 	srai	r19,r2,1
20084f24:	3485883a 	add	r2,r6,r18
20084f28:	980d883a 	mov	r6,r19
20084f2c:	9880022e 	bgeu	r19,r2,20084f38 <__sfvwrite_r+0x3f0>
20084f30:	1027883a 	mov	r19,r2
20084f34:	100d883a 	mov	r6,r2
20084f38:	2101000c 	andi	r4,r4,1024
20084f3c:	20001c26 	beq	r4,zero,20084fb0 <__sfvwrite_r+0x468>
20084f40:	a009883a 	mov	r4,r20
20084f44:	300b883a 	mov	r5,r6
20084f48:	00854280 	call	20085428 <_malloc_r>
20084f4c:	102d883a 	mov	r22,r2
20084f50:	10002926 	beq	r2,zero,20084ff8 <__sfvwrite_r+0x4b0>
20084f54:	81400417 	ldw	r5,16(r16)
20084f58:	1009883a 	mov	r4,r2
20084f5c:	a80d883a 	mov	r6,r21
20084f60:	0085cb80 	call	20085cb8 <memcpy>
20084f64:	8080030b 	ldhu	r2,12(r16)
20084f68:	00fedfc4 	movi	r3,-1153
20084f6c:	10c4703a 	and	r2,r2,r3
20084f70:	10802014 	ori	r2,r2,128
20084f74:	8080030d 	sth	r2,12(r16)
20084f78:	b549883a 	add	r4,r22,r21
20084f7c:	9d4bc83a 	sub	r5,r19,r21
20084f80:	85800415 	stw	r22,16(r16)
20084f84:	84c00515 	stw	r19,20(r16)
20084f88:	81000015 	stw	r4,0(r16)
20084f8c:	902d883a 	mov	r22,r18
20084f90:	81400215 	stw	r5,8(r16)
20084f94:	9027883a 	mov	r19,r18
20084f98:	003f3a06 	br	20084c84 <__flash_rwdata_start+0xffff31d4>
20084f9c:	a009883a 	mov	r4,r20
20084fa0:	800b883a 	mov	r5,r16
20084fa4:	00843080 	call	20084308 <_fflush_r>
20084fa8:	103fb926 	beq	r2,zero,20084e90 <__flash_rwdata_start+0xffff33e0>
20084fac:	003f5f06 	br	20084d2c <__flash_rwdata_start+0xffff327c>
20084fb0:	a009883a 	mov	r4,r20
20084fb4:	00870100 	call	20087010 <_realloc_r>
20084fb8:	102d883a 	mov	r22,r2
20084fbc:	103fee1e 	bne	r2,zero,20084f78 <__flash_rwdata_start+0xffff34c8>
20084fc0:	81400417 	ldw	r5,16(r16)
20084fc4:	a009883a 	mov	r4,r20
20084fc8:	00848580 	call	20084858 <_free_r>
20084fcc:	8080030b 	ldhu	r2,12(r16)
20084fd0:	00ffdfc4 	movi	r3,-129
20084fd4:	1884703a 	and	r2,r3,r2
20084fd8:	00c00304 	movi	r3,12
20084fdc:	a0c00015 	stw	r3,0(r20)
20084fe0:	003f5306 	br	20084d30 <__flash_rwdata_start+0xffff3280>
20084fe4:	94c00044 	addi	r19,r18,1
20084fe8:	02000044 	movi	r8,1
20084fec:	003f5a06 	br	20084d58 <__flash_rwdata_start+0xffff32a8>
20084ff0:	00bfffc4 	movi	r2,-1
20084ff4:	003f0206 	br	20084c00 <__flash_rwdata_start+0xffff3150>
20084ff8:	00800304 	movi	r2,12
20084ffc:	a0800015 	stw	r2,0(r20)
20085000:	8080030b 	ldhu	r2,12(r16)
20085004:	003f4a06 	br	20084d30 <__flash_rwdata_start+0xffff3280>

20085008 <_fwalk>:
20085008:	defff704 	addi	sp,sp,-36
2008500c:	dd000415 	stw	r20,16(sp)
20085010:	dfc00815 	stw	ra,32(sp)
20085014:	ddc00715 	stw	r23,28(sp)
20085018:	dd800615 	stw	r22,24(sp)
2008501c:	dd400515 	stw	r21,20(sp)
20085020:	dcc00315 	stw	r19,12(sp)
20085024:	dc800215 	stw	r18,8(sp)
20085028:	dc400115 	stw	r17,4(sp)
2008502c:	dc000015 	stw	r16,0(sp)
20085030:	2500b804 	addi	r20,r4,736
20085034:	a0002326 	beq	r20,zero,200850c4 <_fwalk+0xbc>
20085038:	282b883a 	mov	r21,r5
2008503c:	002f883a 	mov	r23,zero
20085040:	05800044 	movi	r22,1
20085044:	04ffffc4 	movi	r19,-1
20085048:	a4400117 	ldw	r17,4(r20)
2008504c:	a4800217 	ldw	r18,8(r20)
20085050:	8c7fffc4 	addi	r17,r17,-1
20085054:	88000d16 	blt	r17,zero,2008508c <_fwalk+0x84>
20085058:	94000304 	addi	r16,r18,12
2008505c:	94800384 	addi	r18,r18,14
20085060:	80c0000b 	ldhu	r3,0(r16)
20085064:	8c7fffc4 	addi	r17,r17,-1
20085068:	813ffd04 	addi	r4,r16,-12
2008506c:	b0c0042e 	bgeu	r22,r3,20085080 <_fwalk+0x78>
20085070:	90c0000f 	ldh	r3,0(r18)
20085074:	1cc00226 	beq	r3,r19,20085080 <_fwalk+0x78>
20085078:	a83ee83a 	callr	r21
2008507c:	b8aeb03a 	or	r23,r23,r2
20085080:	84001a04 	addi	r16,r16,104
20085084:	94801a04 	addi	r18,r18,104
20085088:	8cfff51e 	bne	r17,r19,20085060 <__flash_rwdata_start+0xffff35b0>
2008508c:	a5000017 	ldw	r20,0(r20)
20085090:	a03fed1e 	bne	r20,zero,20085048 <__flash_rwdata_start+0xffff3598>
20085094:	b805883a 	mov	r2,r23
20085098:	dfc00817 	ldw	ra,32(sp)
2008509c:	ddc00717 	ldw	r23,28(sp)
200850a0:	dd800617 	ldw	r22,24(sp)
200850a4:	dd400517 	ldw	r21,20(sp)
200850a8:	dd000417 	ldw	r20,16(sp)
200850ac:	dcc00317 	ldw	r19,12(sp)
200850b0:	dc800217 	ldw	r18,8(sp)
200850b4:	dc400117 	ldw	r17,4(sp)
200850b8:	dc000017 	ldw	r16,0(sp)
200850bc:	dec00904 	addi	sp,sp,36
200850c0:	f800283a 	ret
200850c4:	002f883a 	mov	r23,zero
200850c8:	003ff206 	br	20085094 <__flash_rwdata_start+0xffff35e4>

200850cc <_fwalk_reent>:
200850cc:	defff704 	addi	sp,sp,-36
200850d0:	dd400515 	stw	r21,20(sp)
200850d4:	dfc00815 	stw	ra,32(sp)
200850d8:	ddc00715 	stw	r23,28(sp)
200850dc:	dd800615 	stw	r22,24(sp)
200850e0:	dd000415 	stw	r20,16(sp)
200850e4:	dcc00315 	stw	r19,12(sp)
200850e8:	dc800215 	stw	r18,8(sp)
200850ec:	dc400115 	stw	r17,4(sp)
200850f0:	dc000015 	stw	r16,0(sp)
200850f4:	2540b804 	addi	r21,r4,736
200850f8:	a8002326 	beq	r21,zero,20085188 <_fwalk_reent+0xbc>
200850fc:	2829883a 	mov	r20,r5
20085100:	202d883a 	mov	r22,r4
20085104:	002f883a 	mov	r23,zero
20085108:	04c00044 	movi	r19,1
2008510c:	04bfffc4 	movi	r18,-1
20085110:	ac400117 	ldw	r17,4(r21)
20085114:	ac000217 	ldw	r16,8(r21)
20085118:	8c7fffc4 	addi	r17,r17,-1
2008511c:	88000c16 	blt	r17,zero,20085150 <_fwalk_reent+0x84>
20085120:	84000304 	addi	r16,r16,12
20085124:	80c0000b 	ldhu	r3,0(r16)
20085128:	8c7fffc4 	addi	r17,r17,-1
2008512c:	817ffd04 	addi	r5,r16,-12
20085130:	98c0052e 	bgeu	r19,r3,20085148 <_fwalk_reent+0x7c>
20085134:	80c0008f 	ldh	r3,2(r16)
20085138:	b009883a 	mov	r4,r22
2008513c:	1c800226 	beq	r3,r18,20085148 <_fwalk_reent+0x7c>
20085140:	a03ee83a 	callr	r20
20085144:	b8aeb03a 	or	r23,r23,r2
20085148:	84001a04 	addi	r16,r16,104
2008514c:	8cbff51e 	bne	r17,r18,20085124 <__flash_rwdata_start+0xffff3674>
20085150:	ad400017 	ldw	r21,0(r21)
20085154:	a83fee1e 	bne	r21,zero,20085110 <__flash_rwdata_start+0xffff3660>
20085158:	b805883a 	mov	r2,r23
2008515c:	dfc00817 	ldw	ra,32(sp)
20085160:	ddc00717 	ldw	r23,28(sp)
20085164:	dd800617 	ldw	r22,24(sp)
20085168:	dd400517 	ldw	r21,20(sp)
2008516c:	dd000417 	ldw	r20,16(sp)
20085170:	dcc00317 	ldw	r19,12(sp)
20085174:	dc800217 	ldw	r18,8(sp)
20085178:	dc400117 	ldw	r17,4(sp)
2008517c:	dc000017 	ldw	r16,0(sp)
20085180:	dec00904 	addi	sp,sp,36
20085184:	f800283a 	ret
20085188:	002f883a 	mov	r23,zero
2008518c:	003ff206 	br	20085158 <__flash_rwdata_start+0xffff36a8>

20085190 <_setlocale_r>:
20085190:	30001b26 	beq	r6,zero,20085200 <_setlocale_r+0x70>
20085194:	01400034 	movhi	r5,0
20085198:	defffe04 	addi	sp,sp,-8
2008519c:	29402704 	addi	r5,r5,156
200851a0:	3009883a 	mov	r4,r6
200851a4:	dc000015 	stw	r16,0(sp)
200851a8:	dfc00115 	stw	ra,4(sp)
200851ac:	3021883a 	mov	r16,r6
200851b0:	008777c0 	call	2008777c <strcmp>
200851b4:	1000061e 	bne	r2,zero,200851d0 <_setlocale_r+0x40>
200851b8:	00800034 	movhi	r2,0
200851bc:	10802604 	addi	r2,r2,152
200851c0:	dfc00117 	ldw	ra,4(sp)
200851c4:	dc000017 	ldw	r16,0(sp)
200851c8:	dec00204 	addi	sp,sp,8
200851cc:	f800283a 	ret
200851d0:	01400034 	movhi	r5,0
200851d4:	29402604 	addi	r5,r5,152
200851d8:	8009883a 	mov	r4,r16
200851dc:	008777c0 	call	2008777c <strcmp>
200851e0:	103ff526 	beq	r2,zero,200851b8 <__flash_rwdata_start+0xffff3708>
200851e4:	01400034 	movhi	r5,0
200851e8:	29401104 	addi	r5,r5,68
200851ec:	8009883a 	mov	r4,r16
200851f0:	008777c0 	call	2008777c <strcmp>
200851f4:	103ff026 	beq	r2,zero,200851b8 <__flash_rwdata_start+0xffff3708>
200851f8:	0005883a 	mov	r2,zero
200851fc:	003ff006 	br	200851c0 <__flash_rwdata_start+0xffff3710>
20085200:	00800034 	movhi	r2,0
20085204:	10802604 	addi	r2,r2,152
20085208:	f800283a 	ret

2008520c <__locale_charset>:
2008520c:	00800034 	movhi	r2,0
20085210:	10825e04 	addi	r2,r2,2424
20085214:	f800283a 	ret

20085218 <__locale_mb_cur_max>:
20085218:	00800034 	movhi	r2,0
2008521c:	10881204 	addi	r2,r2,8264
20085220:	10800017 	ldw	r2,0(r2)
20085224:	f800283a 	ret

20085228 <__locale_msgcharset>:
20085228:	00800034 	movhi	r2,0
2008522c:	10825604 	addi	r2,r2,2392
20085230:	f800283a 	ret

20085234 <__locale_cjk_lang>:
20085234:	0005883a 	mov	r2,zero
20085238:	f800283a 	ret

2008523c <_localeconv_r>:
2008523c:	00800034 	movhi	r2,0
20085240:	10826604 	addi	r2,r2,2456
20085244:	f800283a 	ret

20085248 <setlocale>:
20085248:	00c00034 	movhi	r3,0
2008524c:	18c81104 	addi	r3,r3,8260
20085250:	2005883a 	mov	r2,r4
20085254:	19000017 	ldw	r4,0(r3)
20085258:	280d883a 	mov	r6,r5
2008525c:	100b883a 	mov	r5,r2
20085260:	00851901 	jmpi	20085190 <_setlocale_r>

20085264 <localeconv>:
20085264:	00800034 	movhi	r2,0
20085268:	10826604 	addi	r2,r2,2456
2008526c:	f800283a 	ret

20085270 <__smakebuf_r>:
20085270:	2880030b 	ldhu	r2,12(r5)
20085274:	10c0008c 	andi	r3,r2,2
20085278:	1800401e 	bne	r3,zero,2008537c <__smakebuf_r+0x10c>
2008527c:	deffec04 	addi	sp,sp,-80
20085280:	dc000f15 	stw	r16,60(sp)
20085284:	2821883a 	mov	r16,r5
20085288:	2940038f 	ldh	r5,14(r5)
2008528c:	dc401015 	stw	r17,64(sp)
20085290:	dfc01315 	stw	ra,76(sp)
20085294:	dcc01215 	stw	r19,72(sp)
20085298:	dc801115 	stw	r18,68(sp)
2008529c:	2023883a 	mov	r17,r4
200852a0:	28001b16 	blt	r5,zero,20085310 <__smakebuf_r+0xa0>
200852a4:	d80d883a 	mov	r6,sp
200852a8:	008913c0 	call	2008913c <_fstat_r>
200852ac:	10001716 	blt	r2,zero,2008530c <__smakebuf_r+0x9c>
200852b0:	d8800117 	ldw	r2,4(sp)
200852b4:	00e00014 	movui	r3,32768
200852b8:	10bc000c 	andi	r2,r2,61440
200852bc:	10c03726 	beq	r2,r3,2008539c <__smakebuf_r+0x12c>
200852c0:	80c0030b 	ldhu	r3,12(r16)
200852c4:	18c20014 	ori	r3,r3,2048
200852c8:	80c0030d 	sth	r3,12(r16)
200852cc:	00c80004 	movi	r3,8192
200852d0:	10c03c1e 	bne	r2,r3,200853c4 <__smakebuf_r+0x154>
200852d4:	8140038f 	ldh	r5,14(r16)
200852d8:	8809883a 	mov	r4,r17
200852dc:	00891940 	call	20089194 <_isatty_r>
200852e0:	10004e26 	beq	r2,zero,2008541c <__smakebuf_r+0x1ac>
200852e4:	8080030b 	ldhu	r2,12(r16)
200852e8:	04c00044 	movi	r19,1
200852ec:	80c010c4 	addi	r3,r16,67
200852f0:	14c4b03a 	or	r2,r2,r19
200852f4:	8080030d 	sth	r2,12(r16)
200852f8:	80c00015 	stw	r3,0(r16)
200852fc:	80c00415 	stw	r3,16(r16)
20085300:	84c00515 	stw	r19,20(r16)
20085304:	04810004 	movi	r18,1024
20085308:	00000706 	br	20085328 <__smakebuf_r+0xb8>
2008530c:	8080030b 	ldhu	r2,12(r16)
20085310:	10c0200c 	andi	r3,r2,128
20085314:	18001f1e 	bne	r3,zero,20085394 <__smakebuf_r+0x124>
20085318:	04810004 	movi	r18,1024
2008531c:	10820014 	ori	r2,r2,2048
20085320:	8080030d 	sth	r2,12(r16)
20085324:	0027883a 	mov	r19,zero
20085328:	8809883a 	mov	r4,r17
2008532c:	900b883a 	mov	r5,r18
20085330:	00854280 	call	20085428 <_malloc_r>
20085334:	10002e26 	beq	r2,zero,200853f0 <__smakebuf_r+0x180>
20085338:	80c0030b 	ldhu	r3,12(r16)
2008533c:	01080234 	movhi	r4,8200
20085340:	2110e904 	addi	r4,r4,17316
20085344:	89000f15 	stw	r4,60(r17)
20085348:	18c02014 	ori	r3,r3,128
2008534c:	80c0030d 	sth	r3,12(r16)
20085350:	80800015 	stw	r2,0(r16)
20085354:	80800415 	stw	r2,16(r16)
20085358:	84800515 	stw	r18,20(r16)
2008535c:	98001c1e 	bne	r19,zero,200853d0 <__smakebuf_r+0x160>
20085360:	dfc01317 	ldw	ra,76(sp)
20085364:	dcc01217 	ldw	r19,72(sp)
20085368:	dc801117 	ldw	r18,68(sp)
2008536c:	dc401017 	ldw	r17,64(sp)
20085370:	dc000f17 	ldw	r16,60(sp)
20085374:	dec01404 	addi	sp,sp,80
20085378:	f800283a 	ret
2008537c:	288010c4 	addi	r2,r5,67
20085380:	28800015 	stw	r2,0(r5)
20085384:	28800415 	stw	r2,16(r5)
20085388:	00800044 	movi	r2,1
2008538c:	28800515 	stw	r2,20(r5)
20085390:	f800283a 	ret
20085394:	04801004 	movi	r18,64
20085398:	003fe006 	br	2008531c <__flash_rwdata_start+0xffff386c>
2008539c:	81000a17 	ldw	r4,40(r16)
200853a0:	00c80234 	movhi	r3,8200
200853a4:	18ddc604 	addi	r3,r3,30488
200853a8:	20ffc51e 	bne	r4,r3,200852c0 <__flash_rwdata_start+0xffff3810>
200853ac:	80c0030b 	ldhu	r3,12(r16)
200853b0:	01010004 	movi	r4,1024
200853b4:	81001315 	stw	r4,76(r16)
200853b8:	1906b03a 	or	r3,r3,r4
200853bc:	80c0030d 	sth	r3,12(r16)
200853c0:	003fc206 	br	200852cc <__flash_rwdata_start+0xffff381c>
200853c4:	0027883a 	mov	r19,zero
200853c8:	04810004 	movi	r18,1024
200853cc:	003fd606 	br	20085328 <__flash_rwdata_start+0xffff3878>
200853d0:	8140038f 	ldh	r5,14(r16)
200853d4:	8809883a 	mov	r4,r17
200853d8:	00891940 	call	20089194 <_isatty_r>
200853dc:	103fe026 	beq	r2,zero,20085360 <__flash_rwdata_start+0xffff38b0>
200853e0:	8080030b 	ldhu	r2,12(r16)
200853e4:	10800054 	ori	r2,r2,1
200853e8:	8080030d 	sth	r2,12(r16)
200853ec:	003fdc06 	br	20085360 <__flash_rwdata_start+0xffff38b0>
200853f0:	8080030b 	ldhu	r2,12(r16)
200853f4:	10c0800c 	andi	r3,r2,512
200853f8:	183fd91e 	bne	r3,zero,20085360 <__flash_rwdata_start+0xffff38b0>
200853fc:	10800094 	ori	r2,r2,2
20085400:	80c010c4 	addi	r3,r16,67
20085404:	8080030d 	sth	r2,12(r16)
20085408:	00800044 	movi	r2,1
2008540c:	80c00015 	stw	r3,0(r16)
20085410:	80c00415 	stw	r3,16(r16)
20085414:	80800515 	stw	r2,20(r16)
20085418:	003fd106 	br	20085360 <__flash_rwdata_start+0xffff38b0>
2008541c:	04c00044 	movi	r19,1
20085420:	04810004 	movi	r18,1024
20085424:	003fc006 	br	20085328 <__flash_rwdata_start+0xffff3878>

20085428 <_malloc_r>:
20085428:	defff504 	addi	sp,sp,-44
2008542c:	dc800315 	stw	r18,12(sp)
20085430:	dfc00a15 	stw	ra,40(sp)
20085434:	df000915 	stw	fp,36(sp)
20085438:	ddc00815 	stw	r23,32(sp)
2008543c:	dd800715 	stw	r22,28(sp)
20085440:	dd400615 	stw	r21,24(sp)
20085444:	dd000515 	stw	r20,20(sp)
20085448:	dcc00415 	stw	r19,16(sp)
2008544c:	dc400215 	stw	r17,8(sp)
20085450:	dc000115 	stw	r16,4(sp)
20085454:	288002c4 	addi	r2,r5,11
20085458:	00c00584 	movi	r3,22
2008545c:	2025883a 	mov	r18,r4
20085460:	18802a2e 	bgeu	r3,r2,2008550c <_malloc_r+0xe4>
20085464:	047ffe04 	movi	r17,-8
20085468:	1462703a 	and	r17,r2,r17
2008546c:	88009e16 	blt	r17,zero,200856e8 <_malloc_r+0x2c0>
20085470:	89409d36 	bltu	r17,r5,200856e8 <_malloc_r+0x2c0>
20085474:	008cfc80 	call	2008cfc8 <__malloc_lock>
20085478:	00807dc4 	movi	r2,503
2008547c:	14402736 	bltu	r2,r17,2008551c <_malloc_r+0xf4>
20085480:	8806d0fa 	srli	r3,r17,3
20085484:	04c00034 	movhi	r19,0
20085488:	9cc27404 	addi	r19,r19,2512
2008548c:	18c5883a 	add	r2,r3,r3
20085490:	1085883a 	add	r2,r2,r2
20085494:	1085883a 	add	r2,r2,r2
20085498:	9885883a 	add	r2,r19,r2
2008549c:	14000317 	ldw	r16,12(r2)
200854a0:	80814a26 	beq	r16,r2,200859cc <_malloc_r+0x5a4>
200854a4:	80c00117 	ldw	r3,4(r16)
200854a8:	81000317 	ldw	r4,12(r16)
200854ac:	00bfff04 	movi	r2,-4
200854b0:	1884703a 	and	r2,r3,r2
200854b4:	81400217 	ldw	r5,8(r16)
200854b8:	8085883a 	add	r2,r16,r2
200854bc:	10c00117 	ldw	r3,4(r2)
200854c0:	29000315 	stw	r4,12(r5)
200854c4:	21400215 	stw	r5,8(r4)
200854c8:	18c00054 	ori	r3,r3,1
200854cc:	10c00115 	stw	r3,4(r2)
200854d0:	9009883a 	mov	r4,r18
200854d4:	008cfe80 	call	2008cfe8 <__malloc_unlock>
200854d8:	80800204 	addi	r2,r16,8
200854dc:	dfc00a17 	ldw	ra,40(sp)
200854e0:	df000917 	ldw	fp,36(sp)
200854e4:	ddc00817 	ldw	r23,32(sp)
200854e8:	dd800717 	ldw	r22,28(sp)
200854ec:	dd400617 	ldw	r21,24(sp)
200854f0:	dd000517 	ldw	r20,20(sp)
200854f4:	dcc00417 	ldw	r19,16(sp)
200854f8:	dc800317 	ldw	r18,12(sp)
200854fc:	dc400217 	ldw	r17,8(sp)
20085500:	dc000117 	ldw	r16,4(sp)
20085504:	dec00b04 	addi	sp,sp,44
20085508:	f800283a 	ret
2008550c:	04400404 	movi	r17,16
20085510:	89407536 	bltu	r17,r5,200856e8 <_malloc_r+0x2c0>
20085514:	008cfc80 	call	2008cfc8 <__malloc_lock>
20085518:	003fd906 	br	20085480 <__flash_rwdata_start+0xffff39d0>
2008551c:	8806d27a 	srli	r3,r17,9
20085520:	18007526 	beq	r3,zero,200856f8 <_malloc_r+0x2d0>
20085524:	00800104 	movi	r2,4
20085528:	10c0ef36 	bltu	r2,r3,200858e8 <_malloc_r+0x4c0>
2008552c:	8806d1ba 	srli	r3,r17,6
20085530:	19c00e04 	addi	r7,r3,56
20085534:	39cb883a 	add	r5,r7,r7
20085538:	04c00034 	movhi	r19,0
2008553c:	294b883a 	add	r5,r5,r5
20085540:	9cc27404 	addi	r19,r19,2512
20085544:	294b883a 	add	r5,r5,r5
20085548:	994b883a 	add	r5,r19,r5
2008554c:	2c000317 	ldw	r16,12(r5)
20085550:	2c000e26 	beq	r5,r16,2008558c <_malloc_r+0x164>
20085554:	80800117 	ldw	r2,4(r16)
20085558:	01bfff04 	movi	r6,-4
2008555c:	010003c4 	movi	r4,15
20085560:	1184703a 	and	r2,r2,r6
20085564:	1447c83a 	sub	r3,r2,r17
20085568:	20c00716 	blt	r4,r3,20085588 <_malloc_r+0x160>
2008556c:	1800650e 	bge	r3,zero,20085704 <_malloc_r+0x2dc>
20085570:	84000317 	ldw	r16,12(r16)
20085574:	2c000526 	beq	r5,r16,2008558c <_malloc_r+0x164>
20085578:	80800117 	ldw	r2,4(r16)
2008557c:	1184703a 	and	r2,r2,r6
20085580:	1447c83a 	sub	r3,r2,r17
20085584:	20fff90e 	bge	r4,r3,2008556c <__flash_rwdata_start+0xffff3abc>
20085588:	39ffffc4 	addi	r7,r7,-1
2008558c:	38c00044 	addi	r3,r7,1
20085590:	01800034 	movhi	r6,0
20085594:	9c000417 	ldw	r16,16(r19)
20085598:	31827404 	addi	r6,r6,2512
2008559c:	32400204 	addi	r9,r6,8
200855a0:	82410326 	beq	r16,r9,200859b0 <_malloc_r+0x588>
200855a4:	81000117 	ldw	r4,4(r16)
200855a8:	00bfff04 	movi	r2,-4
200855ac:	208e703a 	and	r7,r4,r2
200855b0:	3c45c83a 	sub	r2,r7,r17
200855b4:	010003c4 	movi	r4,15
200855b8:	2080ee16 	blt	r4,r2,20085974 <_malloc_r+0x54c>
200855bc:	32400515 	stw	r9,20(r6)
200855c0:	32400415 	stw	r9,16(r6)
200855c4:	1000510e 	bge	r2,zero,2008570c <_malloc_r+0x2e4>
200855c8:	00807fc4 	movi	r2,511
200855cc:	11c0ce36 	bltu	r2,r7,20085908 <_malloc_r+0x4e0>
200855d0:	3808d0fa 	srli	r4,r7,3
200855d4:	01c00044 	movi	r7,1
200855d8:	30800117 	ldw	r2,4(r6)
200855dc:	210b883a 	add	r5,r4,r4
200855e0:	294b883a 	add	r5,r5,r5
200855e4:	2009d0ba 	srai	r4,r4,2
200855e8:	294b883a 	add	r5,r5,r5
200855ec:	298b883a 	add	r5,r5,r6
200855f0:	2a000217 	ldw	r8,8(r5)
200855f4:	3908983a 	sll	r4,r7,r4
200855f8:	81400315 	stw	r5,12(r16)
200855fc:	82000215 	stw	r8,8(r16)
20085600:	2088b03a 	or	r4,r4,r2
20085604:	2c000215 	stw	r16,8(r5)
20085608:	31000115 	stw	r4,4(r6)
2008560c:	44000315 	stw	r16,12(r8)
20085610:	1805d0ba 	srai	r2,r3,2
20085614:	01400044 	movi	r5,1
20085618:	288a983a 	sll	r5,r5,r2
2008561c:	21404336 	bltu	r4,r5,2008572c <_malloc_r+0x304>
20085620:	2144703a 	and	r2,r4,r5
20085624:	10000a1e 	bne	r2,zero,20085650 <_malloc_r+0x228>
20085628:	00bfff04 	movi	r2,-4
2008562c:	294b883a 	add	r5,r5,r5
20085630:	1886703a 	and	r3,r3,r2
20085634:	2144703a 	and	r2,r4,r5
20085638:	18c00104 	addi	r3,r3,4
2008563c:	1000041e 	bne	r2,zero,20085650 <_malloc_r+0x228>
20085640:	294b883a 	add	r5,r5,r5
20085644:	2144703a 	and	r2,r4,r5
20085648:	18c00104 	addi	r3,r3,4
2008564c:	103ffc26 	beq	r2,zero,20085640 <__flash_rwdata_start+0xffff3b90>
20085650:	023fff04 	movi	r8,-4
20085654:	01c003c4 	movi	r7,15
20085658:	18c5883a 	add	r2,r3,r3
2008565c:	1085883a 	add	r2,r2,r2
20085660:	1085883a 	add	r2,r2,r2
20085664:	9895883a 	add	r10,r19,r2
20085668:	52c00304 	addi	r11,r10,12
2008566c:	1819883a 	mov	r12,r3
20085670:	5c000017 	ldw	r16,0(r11)
20085674:	59bffd04 	addi	r6,r11,-12
20085678:	8180041e 	bne	r16,r6,2008568c <_malloc_r+0x264>
2008567c:	0000ce06 	br	200859b8 <_malloc_r+0x590>
20085680:	2000d70e 	bge	r4,zero,200859e0 <_malloc_r+0x5b8>
20085684:	84000317 	ldw	r16,12(r16)
20085688:	8180cb26 	beq	r16,r6,200859b8 <_malloc_r+0x590>
2008568c:	80800117 	ldw	r2,4(r16)
20085690:	1204703a 	and	r2,r2,r8
20085694:	1449c83a 	sub	r4,r2,r17
20085698:	393ff90e 	bge	r7,r4,20085680 <__flash_rwdata_start+0xffff3bd0>
2008569c:	80800317 	ldw	r2,12(r16)
200856a0:	80c00217 	ldw	r3,8(r16)
200856a4:	89400054 	ori	r5,r17,1
200856a8:	81400115 	stw	r5,4(r16)
200856ac:	18800315 	stw	r2,12(r3)
200856b0:	10c00215 	stw	r3,8(r2)
200856b4:	8463883a 	add	r17,r16,r17
200856b8:	9c400515 	stw	r17,20(r19)
200856bc:	9c400415 	stw	r17,16(r19)
200856c0:	20800054 	ori	r2,r4,1
200856c4:	88800115 	stw	r2,4(r17)
200856c8:	8a400315 	stw	r9,12(r17)
200856cc:	8a400215 	stw	r9,8(r17)
200856d0:	8923883a 	add	r17,r17,r4
200856d4:	89000015 	stw	r4,0(r17)
200856d8:	9009883a 	mov	r4,r18
200856dc:	008cfe80 	call	2008cfe8 <__malloc_unlock>
200856e0:	80800204 	addi	r2,r16,8
200856e4:	003f7d06 	br	200854dc <__flash_rwdata_start+0xffff3a2c>
200856e8:	00800304 	movi	r2,12
200856ec:	90800015 	stw	r2,0(r18)
200856f0:	0005883a 	mov	r2,zero
200856f4:	003f7906 	br	200854dc <__flash_rwdata_start+0xffff3a2c>
200856f8:	01401f84 	movi	r5,126
200856fc:	01c00fc4 	movi	r7,63
20085700:	003f8d06 	br	20085538 <__flash_rwdata_start+0xffff3a88>
20085704:	81000317 	ldw	r4,12(r16)
20085708:	003f6a06 	br	200854b4 <__flash_rwdata_start+0xffff3a04>
2008570c:	81c5883a 	add	r2,r16,r7
20085710:	10c00117 	ldw	r3,4(r2)
20085714:	9009883a 	mov	r4,r18
20085718:	18c00054 	ori	r3,r3,1
2008571c:	10c00115 	stw	r3,4(r2)
20085720:	008cfe80 	call	2008cfe8 <__malloc_unlock>
20085724:	80800204 	addi	r2,r16,8
20085728:	003f6c06 	br	200854dc <__flash_rwdata_start+0xffff3a2c>
2008572c:	9c000217 	ldw	r16,8(r19)
20085730:	00bfff04 	movi	r2,-4
20085734:	85800117 	ldw	r22,4(r16)
20085738:	b0ac703a 	and	r22,r22,r2
2008573c:	b4400336 	bltu	r22,r17,2008574c <_malloc_r+0x324>
20085740:	b445c83a 	sub	r2,r22,r17
20085744:	00c003c4 	movi	r3,15
20085748:	18805d16 	blt	r3,r2,200858c0 <_malloc_r+0x498>
2008574c:	05c00034 	movhi	r23,0
20085750:	00800034 	movhi	r2,0
20085754:	bdc81304 	addi	r23,r23,8268
20085758:	10882804 	addi	r2,r2,8352
2008575c:	15400017 	ldw	r21,0(r2)
20085760:	b9000017 	ldw	r4,0(r23)
20085764:	00ffffc4 	movi	r3,-1
20085768:	858d883a 	add	r6,r16,r22
2008576c:	8d6b883a 	add	r21,r17,r21
20085770:	20c0e426 	beq	r4,r3,20085b04 <_malloc_r+0x6dc>
20085774:	ad4403c4 	addi	r21,r21,4111
20085778:	00fc0004 	movi	r3,-4096
2008577c:	a8ea703a 	and	r21,r21,r3
20085780:	9009883a 	mov	r4,r18
20085784:	a80b883a 	mov	r5,r21
20085788:	d9800015 	stw	r6,0(sp)
2008578c:	00875ec0 	call	200875ec <_sbrk_r>
20085790:	00ffffc4 	movi	r3,-1
20085794:	1029883a 	mov	r20,r2
20085798:	d9800017 	ldw	r6,0(sp)
2008579c:	10c0a426 	beq	r2,r3,20085a30 <_malloc_r+0x608>
200857a0:	1180a236 	bltu	r2,r6,20085a2c <_malloc_r+0x604>
200857a4:	07000034 	movhi	fp,0
200857a8:	e7083304 	addi	fp,fp,8396
200857ac:	e0c00017 	ldw	r3,0(fp)
200857b0:	a8c7883a 	add	r3,r21,r3
200857b4:	e0c00015 	stw	r3,0(fp)
200857b8:	3500da26 	beq	r6,r20,20085b24 <_malloc_r+0x6fc>
200857bc:	b9000017 	ldw	r4,0(r23)
200857c0:	00bfffc4 	movi	r2,-1
200857c4:	2080e426 	beq	r4,r2,20085b58 <_malloc_r+0x730>
200857c8:	a185c83a 	sub	r2,r20,r6
200857cc:	1885883a 	add	r2,r3,r2
200857d0:	e0800015 	stw	r2,0(fp)
200857d4:	a0c001cc 	andi	r3,r20,7
200857d8:	1800b526 	beq	r3,zero,20085ab0 <_malloc_r+0x688>
200857dc:	a0e9c83a 	sub	r20,r20,r3
200857e0:	00840204 	movi	r2,4104
200857e4:	a5000204 	addi	r20,r20,8
200857e8:	10c7c83a 	sub	r3,r2,r3
200857ec:	a545883a 	add	r2,r20,r21
200857f0:	1083ffcc 	andi	r2,r2,4095
200857f4:	18abc83a 	sub	r21,r3,r2
200857f8:	9009883a 	mov	r4,r18
200857fc:	a80b883a 	mov	r5,r21
20085800:	00875ec0 	call	200875ec <_sbrk_r>
20085804:	00ffffc4 	movi	r3,-1
20085808:	10c0d026 	beq	r2,r3,20085b4c <_malloc_r+0x724>
2008580c:	1507c83a 	sub	r3,r2,r20
20085810:	a8c7883a 	add	r3,r21,r3
20085814:	18c00054 	ori	r3,r3,1
20085818:	e0800017 	ldw	r2,0(fp)
2008581c:	9d000215 	stw	r20,8(r19)
20085820:	a0c00115 	stw	r3,4(r20)
20085824:	a887883a 	add	r3,r21,r2
20085828:	e0c00015 	stw	r3,0(fp)
2008582c:	84c00e26 	beq	r16,r19,20085868 <_malloc_r+0x440>
20085830:	018003c4 	movi	r6,15
20085834:	3580a02e 	bgeu	r6,r22,20085ab8 <_malloc_r+0x690>
20085838:	81400117 	ldw	r5,4(r16)
2008583c:	013ffe04 	movi	r4,-8
20085840:	b0bffd04 	addi	r2,r22,-12
20085844:	1104703a 	and	r2,r2,r4
20085848:	2900004c 	andi	r4,r5,1
2008584c:	1108b03a 	or	r4,r2,r4
20085850:	81000115 	stw	r4,4(r16)
20085854:	01400144 	movi	r5,5
20085858:	8089883a 	add	r4,r16,r2
2008585c:	21400115 	stw	r5,4(r4)
20085860:	21400215 	stw	r5,8(r4)
20085864:	3080c036 	bltu	r6,r2,20085b68 <_malloc_r+0x740>
20085868:	00800034 	movhi	r2,0
2008586c:	10882704 	addi	r2,r2,8348
20085870:	11000017 	ldw	r4,0(r2)
20085874:	20c0012e 	bgeu	r4,r3,2008587c <_malloc_r+0x454>
20085878:	10c00015 	stw	r3,0(r2)
2008587c:	00800034 	movhi	r2,0
20085880:	10882604 	addi	r2,r2,8344
20085884:	11000017 	ldw	r4,0(r2)
20085888:	9c000217 	ldw	r16,8(r19)
2008588c:	20c0012e 	bgeu	r4,r3,20085894 <_malloc_r+0x46c>
20085890:	10c00015 	stw	r3,0(r2)
20085894:	80c00117 	ldw	r3,4(r16)
20085898:	00bfff04 	movi	r2,-4
2008589c:	1886703a 	and	r3,r3,r2
200858a0:	1c45c83a 	sub	r2,r3,r17
200858a4:	1c400236 	bltu	r3,r17,200858b0 <_malloc_r+0x488>
200858a8:	00c003c4 	movi	r3,15
200858ac:	18800416 	blt	r3,r2,200858c0 <_malloc_r+0x498>
200858b0:	9009883a 	mov	r4,r18
200858b4:	008cfe80 	call	2008cfe8 <__malloc_unlock>
200858b8:	0005883a 	mov	r2,zero
200858bc:	003f0706 	br	200854dc <__flash_rwdata_start+0xffff3a2c>
200858c0:	88c00054 	ori	r3,r17,1
200858c4:	80c00115 	stw	r3,4(r16)
200858c8:	8463883a 	add	r17,r16,r17
200858cc:	10800054 	ori	r2,r2,1
200858d0:	9c400215 	stw	r17,8(r19)
200858d4:	88800115 	stw	r2,4(r17)
200858d8:	9009883a 	mov	r4,r18
200858dc:	008cfe80 	call	2008cfe8 <__malloc_unlock>
200858e0:	80800204 	addi	r2,r16,8
200858e4:	003efd06 	br	200854dc <__flash_rwdata_start+0xffff3a2c>
200858e8:	00800504 	movi	r2,20
200858ec:	10c0482e 	bgeu	r2,r3,20085a10 <_malloc_r+0x5e8>
200858f0:	00801504 	movi	r2,84
200858f4:	10c06836 	bltu	r2,r3,20085a98 <_malloc_r+0x670>
200858f8:	8806d33a 	srli	r3,r17,12
200858fc:	19c01b84 	addi	r7,r3,110
20085900:	39cb883a 	add	r5,r7,r7
20085904:	003f0c06 	br	20085538 <__flash_rwdata_start+0xffff3a88>
20085908:	3804d27a 	srli	r2,r7,9
2008590c:	01000104 	movi	r4,4
20085910:	2080422e 	bgeu	r4,r2,20085a1c <_malloc_r+0x5f4>
20085914:	01000504 	movi	r4,20
20085918:	20807c36 	bltu	r4,r2,20085b0c <_malloc_r+0x6e4>
2008591c:	110016c4 	addi	r4,r2,91
20085920:	210b883a 	add	r5,r4,r4
20085924:	294b883a 	add	r5,r5,r5
20085928:	294b883a 	add	r5,r5,r5
2008592c:	994b883a 	add	r5,r19,r5
20085930:	28800217 	ldw	r2,8(r5)
20085934:	02000034 	movhi	r8,0
20085938:	42027404 	addi	r8,r8,2512
2008593c:	11406326 	beq	r2,r5,20085acc <_malloc_r+0x6a4>
20085940:	01bfff04 	movi	r6,-4
20085944:	11000117 	ldw	r4,4(r2)
20085948:	2188703a 	and	r4,r4,r6
2008594c:	3900022e 	bgeu	r7,r4,20085958 <_malloc_r+0x530>
20085950:	10800217 	ldw	r2,8(r2)
20085954:	28bffb1e 	bne	r5,r2,20085944 <__flash_rwdata_start+0xffff3e94>
20085958:	11800317 	ldw	r6,12(r2)
2008595c:	99000117 	ldw	r4,4(r19)
20085960:	81800315 	stw	r6,12(r16)
20085964:	80800215 	stw	r2,8(r16)
20085968:	34000215 	stw	r16,8(r6)
2008596c:	14000315 	stw	r16,12(r2)
20085970:	003f2706 	br	20085610 <__flash_rwdata_start+0xffff3b60>
20085974:	88c00054 	ori	r3,r17,1
20085978:	80c00115 	stw	r3,4(r16)
2008597c:	8463883a 	add	r17,r16,r17
20085980:	34400515 	stw	r17,20(r6)
20085984:	34400415 	stw	r17,16(r6)
20085988:	10c00054 	ori	r3,r2,1
2008598c:	8a400315 	stw	r9,12(r17)
20085990:	8a400215 	stw	r9,8(r17)
20085994:	88c00115 	stw	r3,4(r17)
20085998:	88a3883a 	add	r17,r17,r2
2008599c:	88800015 	stw	r2,0(r17)
200859a0:	9009883a 	mov	r4,r18
200859a4:	008cfe80 	call	2008cfe8 <__malloc_unlock>
200859a8:	80800204 	addi	r2,r16,8
200859ac:	003ecb06 	br	200854dc <__flash_rwdata_start+0xffff3a2c>
200859b0:	31000117 	ldw	r4,4(r6)
200859b4:	003f1606 	br	20085610 <__flash_rwdata_start+0xffff3b60>
200859b8:	63000044 	addi	r12,r12,1
200859bc:	608000cc 	andi	r2,r12,3
200859c0:	5ac00204 	addi	r11,r11,8
200859c4:	103f2a1e 	bne	r2,zero,20085670 <__flash_rwdata_start+0xffff3bc0>
200859c8:	00002106 	br	20085a50 <_malloc_r+0x628>
200859cc:	80800204 	addi	r2,r16,8
200859d0:	84000517 	ldw	r16,20(r16)
200859d4:	143eb31e 	bne	r2,r16,200854a4 <__flash_rwdata_start+0xffff39f4>
200859d8:	18c00084 	addi	r3,r3,2
200859dc:	003eec06 	br	20085590 <__flash_rwdata_start+0xffff3ae0>
200859e0:	8085883a 	add	r2,r16,r2
200859e4:	10c00117 	ldw	r3,4(r2)
200859e8:	81000317 	ldw	r4,12(r16)
200859ec:	81400217 	ldw	r5,8(r16)
200859f0:	18c00054 	ori	r3,r3,1
200859f4:	10c00115 	stw	r3,4(r2)
200859f8:	29000315 	stw	r4,12(r5)
200859fc:	21400215 	stw	r5,8(r4)
20085a00:	9009883a 	mov	r4,r18
20085a04:	008cfe80 	call	2008cfe8 <__malloc_unlock>
20085a08:	80800204 	addi	r2,r16,8
20085a0c:	003eb306 	br	200854dc <__flash_rwdata_start+0xffff3a2c>
20085a10:	19c016c4 	addi	r7,r3,91
20085a14:	39cb883a 	add	r5,r7,r7
20085a18:	003ec706 	br	20085538 <__flash_rwdata_start+0xffff3a88>
20085a1c:	3804d1ba 	srli	r2,r7,6
20085a20:	11000e04 	addi	r4,r2,56
20085a24:	210b883a 	add	r5,r4,r4
20085a28:	003fbe06 	br	20085924 <__flash_rwdata_start+0xffff3e74>
20085a2c:	84ff5d26 	beq	r16,r19,200857a4 <__flash_rwdata_start+0xffff3cf4>
20085a30:	9c000217 	ldw	r16,8(r19)
20085a34:	00bfff04 	movi	r2,-4
20085a38:	80c00117 	ldw	r3,4(r16)
20085a3c:	1886703a 	and	r3,r3,r2
20085a40:	003f9706 	br	200858a0 <__flash_rwdata_start+0xffff3df0>
20085a44:	52800017 	ldw	r10,0(r10)
20085a48:	18ffffc4 	addi	r3,r3,-1
20085a4c:	50805c1e 	bne	r10,r2,20085bc0 <_malloc_r+0x798>
20085a50:	190000cc 	andi	r4,r3,3
20085a54:	50bffe04 	addi	r2,r10,-8
20085a58:	203ffa1e 	bne	r4,zero,20085a44 <__flash_rwdata_start+0xffff3f94>
20085a5c:	98800117 	ldw	r2,4(r19)
20085a60:	0146303a 	nor	r3,zero,r5
20085a64:	1884703a 	and	r2,r3,r2
20085a68:	98800115 	stw	r2,4(r19)
20085a6c:	294b883a 	add	r5,r5,r5
20085a70:	117f2e36 	bltu	r2,r5,2008572c <__flash_rwdata_start+0xffff3c7c>
20085a74:	283f2d26 	beq	r5,zero,2008572c <__flash_rwdata_start+0xffff3c7c>
20085a78:	1146703a 	and	r3,r2,r5
20085a7c:	1800521e 	bne	r3,zero,20085bc8 <_malloc_r+0x7a0>
20085a80:	6007883a 	mov	r3,r12
20085a84:	294b883a 	add	r5,r5,r5
20085a88:	1148703a 	and	r4,r2,r5
20085a8c:	18c00104 	addi	r3,r3,4
20085a90:	203ffc26 	beq	r4,zero,20085a84 <__flash_rwdata_start+0xffff3fd4>
20085a94:	003ef006 	br	20085658 <__flash_rwdata_start+0xffff3ba8>
20085a98:	00805504 	movi	r2,340
20085a9c:	10c01336 	bltu	r2,r3,20085aec <_malloc_r+0x6c4>
20085aa0:	8806d3fa 	srli	r3,r17,15
20085aa4:	19c01dc4 	addi	r7,r3,119
20085aa8:	39cb883a 	add	r5,r7,r7
20085aac:	003ea206 	br	20085538 <__flash_rwdata_start+0xffff3a88>
20085ab0:	00c40004 	movi	r3,4096
20085ab4:	003f4d06 	br	200857ec <__flash_rwdata_start+0xffff3d3c>
20085ab8:	00800044 	movi	r2,1
20085abc:	a0800115 	stw	r2,4(r20)
20085ac0:	a021883a 	mov	r16,r20
20085ac4:	0007883a 	mov	r3,zero
20085ac8:	003f7506 	br	200858a0 <__flash_rwdata_start+0xffff3df0>
20085acc:	200bd0ba 	srai	r5,r4,2
20085ad0:	01800044 	movi	r6,1
20085ad4:	41000117 	ldw	r4,4(r8)
20085ad8:	314a983a 	sll	r5,r6,r5
20085adc:	100d883a 	mov	r6,r2
20085ae0:	2908b03a 	or	r4,r5,r4
20085ae4:	41000115 	stw	r4,4(r8)
20085ae8:	003f9d06 	br	20085960 <__flash_rwdata_start+0xffff3eb0>
20085aec:	00815504 	movi	r2,1364
20085af0:	10c01336 	bltu	r2,r3,20085b40 <_malloc_r+0x718>
20085af4:	8806d4ba 	srli	r3,r17,18
20085af8:	19c01f04 	addi	r7,r3,124
20085afc:	39cb883a 	add	r5,r7,r7
20085b00:	003e8d06 	br	20085538 <__flash_rwdata_start+0xffff3a88>
20085b04:	ad400404 	addi	r21,r21,16
20085b08:	003f1d06 	br	20085780 <__flash_rwdata_start+0xffff3cd0>
20085b0c:	01001504 	movi	r4,84
20085b10:	20801c36 	bltu	r4,r2,20085b84 <_malloc_r+0x75c>
20085b14:	3804d33a 	srli	r2,r7,12
20085b18:	11001b84 	addi	r4,r2,110
20085b1c:	210b883a 	add	r5,r4,r4
20085b20:	003f8006 	br	20085924 <__flash_rwdata_start+0xffff3e74>
20085b24:	3083ffcc 	andi	r2,r6,4095
20085b28:	103f241e 	bne	r2,zero,200857bc <__flash_rwdata_start+0xffff3d0c>
20085b2c:	99000217 	ldw	r4,8(r19)
20085b30:	ad85883a 	add	r2,r21,r22
20085b34:	10800054 	ori	r2,r2,1
20085b38:	20800115 	stw	r2,4(r4)
20085b3c:	003f4a06 	br	20085868 <__flash_rwdata_start+0xffff3db8>
20085b40:	01403f04 	movi	r5,252
20085b44:	01c01f84 	movi	r7,126
20085b48:	003e7b06 	br	20085538 <__flash_rwdata_start+0xffff3a88>
20085b4c:	00c00044 	movi	r3,1
20085b50:	002b883a 	mov	r21,zero
20085b54:	003f3006 	br	20085818 <__flash_rwdata_start+0xffff3d68>
20085b58:	00800034 	movhi	r2,0
20085b5c:	10881304 	addi	r2,r2,8268
20085b60:	15000015 	stw	r20,0(r2)
20085b64:	003f1b06 	br	200857d4 <__flash_rwdata_start+0xffff3d24>
20085b68:	9009883a 	mov	r4,r18
20085b6c:	81400204 	addi	r5,r16,8
20085b70:	00848580 	call	20084858 <_free_r>
20085b74:	00800034 	movhi	r2,0
20085b78:	10883304 	addi	r2,r2,8396
20085b7c:	10c00017 	ldw	r3,0(r2)
20085b80:	003f3906 	br	20085868 <__flash_rwdata_start+0xffff3db8>
20085b84:	01005504 	movi	r4,340
20085b88:	20800436 	bltu	r4,r2,20085b9c <_malloc_r+0x774>
20085b8c:	3804d3fa 	srli	r2,r7,15
20085b90:	11001dc4 	addi	r4,r2,119
20085b94:	210b883a 	add	r5,r4,r4
20085b98:	003f6206 	br	20085924 <__flash_rwdata_start+0xffff3e74>
20085b9c:	01015504 	movi	r4,1364
20085ba0:	20800436 	bltu	r4,r2,20085bb4 <_malloc_r+0x78c>
20085ba4:	3804d4ba 	srli	r2,r7,18
20085ba8:	11001f04 	addi	r4,r2,124
20085bac:	210b883a 	add	r5,r4,r4
20085bb0:	003f5c06 	br	20085924 <__flash_rwdata_start+0xffff3e74>
20085bb4:	01403f04 	movi	r5,252
20085bb8:	01001f84 	movi	r4,126
20085bbc:	003f5906 	br	20085924 <__flash_rwdata_start+0xffff3e74>
20085bc0:	98800117 	ldw	r2,4(r19)
20085bc4:	003fa906 	br	20085a6c <__flash_rwdata_start+0xffff3fbc>
20085bc8:	6007883a 	mov	r3,r12
20085bcc:	003ea206 	br	20085658 <__flash_rwdata_start+0xffff3ba8>

20085bd0 <memchr>:
20085bd0:	208000cc 	andi	r2,r4,3
20085bd4:	280f883a 	mov	r7,r5
20085bd8:	10003526 	beq	r2,zero,20085cb0 <memchr+0xe0>
20085bdc:	30bfffc4 	addi	r2,r6,-1
20085be0:	30001b26 	beq	r6,zero,20085c50 <memchr+0x80>
20085be4:	21800003 	ldbu	r6,0(r4)
20085be8:	28c03fcc 	andi	r3,r5,255
20085bec:	30c01a26 	beq	r6,r3,20085c58 <memchr+0x88>
20085bf0:	180d883a 	mov	r6,r3
20085bf4:	00000406 	br	20085c08 <memchr+0x38>
20085bf8:	10001526 	beq	r2,zero,20085c50 <memchr+0x80>
20085bfc:	20c00003 	ldbu	r3,0(r4)
20085c00:	10bfffc4 	addi	r2,r2,-1
20085c04:	19801426 	beq	r3,r6,20085c58 <memchr+0x88>
20085c08:	21000044 	addi	r4,r4,1
20085c0c:	20c000cc 	andi	r3,r4,3
20085c10:	183ff91e 	bne	r3,zero,20085bf8 <__flash_rwdata_start+0xffff4148>
20085c14:	024000c4 	movi	r9,3
20085c18:	48801136 	bltu	r9,r2,20085c60 <memchr+0x90>
20085c1c:	10000c26 	beq	r2,zero,20085c50 <memchr+0x80>
20085c20:	20c00003 	ldbu	r3,0(r4)
20085c24:	29403fcc 	andi	r5,r5,255
20085c28:	19400b26 	beq	r3,r5,20085c58 <memchr+0x88>
20085c2c:	20c00044 	addi	r3,r4,1
20085c30:	2085883a 	add	r2,r4,r2
20085c34:	39803fcc 	andi	r6,r7,255
20085c38:	00000306 	br	20085c48 <memchr+0x78>
20085c3c:	18c00044 	addi	r3,r3,1
20085c40:	197fffc3 	ldbu	r5,-1(r3)
20085c44:	29800426 	beq	r5,r6,20085c58 <memchr+0x88>
20085c48:	1809883a 	mov	r4,r3
20085c4c:	18bffb1e 	bne	r3,r2,20085c3c <__flash_rwdata_start+0xffff418c>
20085c50:	0005883a 	mov	r2,zero
20085c54:	f800283a 	ret
20085c58:	2005883a 	mov	r2,r4
20085c5c:	f800283a 	ret
20085c60:	28c03fcc 	andi	r3,r5,255
20085c64:	1810923a 	slli	r8,r3,8
20085c68:	02ffbff4 	movhi	r11,65279
20085c6c:	02a02074 	movhi	r10,32897
20085c70:	40c6b03a 	or	r3,r8,r3
20085c74:	1810943a 	slli	r8,r3,16
20085c78:	5affbfc4 	addi	r11,r11,-257
20085c7c:	52a02004 	addi	r10,r10,-32640
20085c80:	40d0b03a 	or	r8,r8,r3
20085c84:	20c00017 	ldw	r3,0(r4)
20085c88:	40c6f03a 	xor	r3,r8,r3
20085c8c:	1acd883a 	add	r6,r3,r11
20085c90:	00c6303a 	nor	r3,zero,r3
20085c94:	30c6703a 	and	r3,r6,r3
20085c98:	1a86703a 	and	r3,r3,r10
20085c9c:	183fdf1e 	bne	r3,zero,20085c1c <__flash_rwdata_start+0xffff416c>
20085ca0:	10bfff04 	addi	r2,r2,-4
20085ca4:	21000104 	addi	r4,r4,4
20085ca8:	48bff636 	bltu	r9,r2,20085c84 <__flash_rwdata_start+0xffff41d4>
20085cac:	003fdb06 	br	20085c1c <__flash_rwdata_start+0xffff416c>
20085cb0:	3005883a 	mov	r2,r6
20085cb4:	003fd706 	br	20085c14 <__flash_rwdata_start+0xffff4164>

20085cb8 <memcpy>:
20085cb8:	deffff04 	addi	sp,sp,-4
20085cbc:	dc000015 	stw	r16,0(sp)
20085cc0:	00c003c4 	movi	r3,15
20085cc4:	2005883a 	mov	r2,r4
20085cc8:	1980432e 	bgeu	r3,r6,20085dd8 <memcpy+0x120>
20085ccc:	2146b03a 	or	r3,r4,r5
20085cd0:	18c000cc 	andi	r3,r3,3
20085cd4:	1800421e 	bne	r3,zero,20085de0 <memcpy+0x128>
20085cd8:	343ffc04 	addi	r16,r6,-16
20085cdc:	8020d13a 	srli	r16,r16,4
20085ce0:	28c00104 	addi	r3,r5,4
20085ce4:	23400104 	addi	r13,r4,4
20085ce8:	801e913a 	slli	r15,r16,4
20085cec:	2b000204 	addi	r12,r5,8
20085cf0:	22c00204 	addi	r11,r4,8
20085cf4:	7bc00504 	addi	r15,r15,20
20085cf8:	2a800304 	addi	r10,r5,12
20085cfc:	22400304 	addi	r9,r4,12
20085d00:	2bdf883a 	add	r15,r5,r15
20085d04:	2811883a 	mov	r8,r5
20085d08:	200f883a 	mov	r7,r4
20085d0c:	41000017 	ldw	r4,0(r8)
20085d10:	39c00404 	addi	r7,r7,16
20085d14:	18c00404 	addi	r3,r3,16
20085d18:	393ffc15 	stw	r4,-16(r7)
20085d1c:	1bbffc17 	ldw	r14,-16(r3)
20085d20:	6b400404 	addi	r13,r13,16
20085d24:	5ac00404 	addi	r11,r11,16
20085d28:	6bbffc15 	stw	r14,-16(r13)
20085d2c:	63800017 	ldw	r14,0(r12)
20085d30:	4a400404 	addi	r9,r9,16
20085d34:	42000404 	addi	r8,r8,16
20085d38:	5bbffc15 	stw	r14,-16(r11)
20085d3c:	53800017 	ldw	r14,0(r10)
20085d40:	63000404 	addi	r12,r12,16
20085d44:	52800404 	addi	r10,r10,16
20085d48:	4bbffc15 	stw	r14,-16(r9)
20085d4c:	1bffef1e 	bne	r3,r15,20085d0c <__flash_rwdata_start+0xffff425c>
20085d50:	81c00044 	addi	r7,r16,1
20085d54:	380e913a 	slli	r7,r7,4
20085d58:	310003cc 	andi	r4,r6,15
20085d5c:	02c000c4 	movi	r11,3
20085d60:	11c7883a 	add	r3,r2,r7
20085d64:	29cb883a 	add	r5,r5,r7
20085d68:	59001f2e 	bgeu	r11,r4,20085de8 <memcpy+0x130>
20085d6c:	1813883a 	mov	r9,r3
20085d70:	2811883a 	mov	r8,r5
20085d74:	200f883a 	mov	r7,r4
20085d78:	42800017 	ldw	r10,0(r8)
20085d7c:	4a400104 	addi	r9,r9,4
20085d80:	39ffff04 	addi	r7,r7,-4
20085d84:	4abfff15 	stw	r10,-4(r9)
20085d88:	42000104 	addi	r8,r8,4
20085d8c:	59fffa36 	bltu	r11,r7,20085d78 <__flash_rwdata_start+0xffff42c8>
20085d90:	213fff04 	addi	r4,r4,-4
20085d94:	2008d0ba 	srli	r4,r4,2
20085d98:	318000cc 	andi	r6,r6,3
20085d9c:	21000044 	addi	r4,r4,1
20085da0:	2109883a 	add	r4,r4,r4
20085da4:	2109883a 	add	r4,r4,r4
20085da8:	1907883a 	add	r3,r3,r4
20085dac:	290b883a 	add	r5,r5,r4
20085db0:	30000626 	beq	r6,zero,20085dcc <memcpy+0x114>
20085db4:	198d883a 	add	r6,r3,r6
20085db8:	29c00003 	ldbu	r7,0(r5)
20085dbc:	18c00044 	addi	r3,r3,1
20085dc0:	29400044 	addi	r5,r5,1
20085dc4:	19ffffc5 	stb	r7,-1(r3)
20085dc8:	19bffb1e 	bne	r3,r6,20085db8 <__flash_rwdata_start+0xffff4308>
20085dcc:	dc000017 	ldw	r16,0(sp)
20085dd0:	dec00104 	addi	sp,sp,4
20085dd4:	f800283a 	ret
20085dd8:	2007883a 	mov	r3,r4
20085ddc:	003ff406 	br	20085db0 <__flash_rwdata_start+0xffff4300>
20085de0:	2007883a 	mov	r3,r4
20085de4:	003ff306 	br	20085db4 <__flash_rwdata_start+0xffff4304>
20085de8:	200d883a 	mov	r6,r4
20085dec:	003ff006 	br	20085db0 <__flash_rwdata_start+0xffff4300>

20085df0 <memmove>:
20085df0:	2005883a 	mov	r2,r4
20085df4:	29000b2e 	bgeu	r5,r4,20085e24 <memmove+0x34>
20085df8:	298f883a 	add	r7,r5,r6
20085dfc:	21c0092e 	bgeu	r4,r7,20085e24 <memmove+0x34>
20085e00:	2187883a 	add	r3,r4,r6
20085e04:	198bc83a 	sub	r5,r3,r6
20085e08:	30004b26 	beq	r6,zero,20085f38 <memmove+0x148>
20085e0c:	39ffffc4 	addi	r7,r7,-1
20085e10:	39000003 	ldbu	r4,0(r7)
20085e14:	18ffffc4 	addi	r3,r3,-1
20085e18:	19000005 	stb	r4,0(r3)
20085e1c:	197ffb1e 	bne	r3,r5,20085e0c <__flash_rwdata_start+0xffff435c>
20085e20:	f800283a 	ret
20085e24:	00c003c4 	movi	r3,15
20085e28:	1980412e 	bgeu	r3,r6,20085f30 <memmove+0x140>
20085e2c:	1146b03a 	or	r3,r2,r5
20085e30:	18c000cc 	andi	r3,r3,3
20085e34:	1800411e 	bne	r3,zero,20085f3c <memmove+0x14c>
20085e38:	33fffc04 	addi	r15,r6,-16
20085e3c:	781ed13a 	srli	r15,r15,4
20085e40:	28c00104 	addi	r3,r5,4
20085e44:	13400104 	addi	r13,r2,4
20085e48:	781c913a 	slli	r14,r15,4
20085e4c:	2b000204 	addi	r12,r5,8
20085e50:	12c00204 	addi	r11,r2,8
20085e54:	73800504 	addi	r14,r14,20
20085e58:	2a800304 	addi	r10,r5,12
20085e5c:	12400304 	addi	r9,r2,12
20085e60:	2b9d883a 	add	r14,r5,r14
20085e64:	2811883a 	mov	r8,r5
20085e68:	100f883a 	mov	r7,r2
20085e6c:	41000017 	ldw	r4,0(r8)
20085e70:	39c00404 	addi	r7,r7,16
20085e74:	18c00404 	addi	r3,r3,16
20085e78:	393ffc15 	stw	r4,-16(r7)
20085e7c:	193ffc17 	ldw	r4,-16(r3)
20085e80:	6b400404 	addi	r13,r13,16
20085e84:	5ac00404 	addi	r11,r11,16
20085e88:	693ffc15 	stw	r4,-16(r13)
20085e8c:	61000017 	ldw	r4,0(r12)
20085e90:	4a400404 	addi	r9,r9,16
20085e94:	42000404 	addi	r8,r8,16
20085e98:	593ffc15 	stw	r4,-16(r11)
20085e9c:	51000017 	ldw	r4,0(r10)
20085ea0:	63000404 	addi	r12,r12,16
20085ea4:	52800404 	addi	r10,r10,16
20085ea8:	493ffc15 	stw	r4,-16(r9)
20085eac:	1bbfef1e 	bne	r3,r14,20085e6c <__flash_rwdata_start+0xffff43bc>
20085eb0:	79000044 	addi	r4,r15,1
20085eb4:	2008913a 	slli	r4,r4,4
20085eb8:	328003cc 	andi	r10,r6,15
20085ebc:	02c000c4 	movi	r11,3
20085ec0:	1107883a 	add	r3,r2,r4
20085ec4:	290b883a 	add	r5,r5,r4
20085ec8:	5a801e2e 	bgeu	r11,r10,20085f44 <memmove+0x154>
20085ecc:	1813883a 	mov	r9,r3
20085ed0:	2811883a 	mov	r8,r5
20085ed4:	500f883a 	mov	r7,r10
20085ed8:	41000017 	ldw	r4,0(r8)
20085edc:	4a400104 	addi	r9,r9,4
20085ee0:	39ffff04 	addi	r7,r7,-4
20085ee4:	493fff15 	stw	r4,-4(r9)
20085ee8:	42000104 	addi	r8,r8,4
20085eec:	59fffa36 	bltu	r11,r7,20085ed8 <__flash_rwdata_start+0xffff4428>
20085ef0:	513fff04 	addi	r4,r10,-4
20085ef4:	2008d0ba 	srli	r4,r4,2
20085ef8:	318000cc 	andi	r6,r6,3
20085efc:	21000044 	addi	r4,r4,1
20085f00:	2109883a 	add	r4,r4,r4
20085f04:	2109883a 	add	r4,r4,r4
20085f08:	1907883a 	add	r3,r3,r4
20085f0c:	290b883a 	add	r5,r5,r4
20085f10:	30000926 	beq	r6,zero,20085f38 <memmove+0x148>
20085f14:	198d883a 	add	r6,r3,r6
20085f18:	29c00003 	ldbu	r7,0(r5)
20085f1c:	18c00044 	addi	r3,r3,1
20085f20:	29400044 	addi	r5,r5,1
20085f24:	19ffffc5 	stb	r7,-1(r3)
20085f28:	19bffb1e 	bne	r3,r6,20085f18 <__flash_rwdata_start+0xffff4468>
20085f2c:	f800283a 	ret
20085f30:	1007883a 	mov	r3,r2
20085f34:	003ff606 	br	20085f10 <__flash_rwdata_start+0xffff4460>
20085f38:	f800283a 	ret
20085f3c:	1007883a 	mov	r3,r2
20085f40:	003ff406 	br	20085f14 <__flash_rwdata_start+0xffff4464>
20085f44:	500d883a 	mov	r6,r10
20085f48:	003ff106 	br	20085f10 <__flash_rwdata_start+0xffff4460>

20085f4c <memset>:
20085f4c:	20c000cc 	andi	r3,r4,3
20085f50:	2005883a 	mov	r2,r4
20085f54:	18004326 	beq	r3,zero,20086064 <memset+0x118>
20085f58:	31ffffc4 	addi	r7,r6,-1
20085f5c:	30004026 	beq	r6,zero,20086060 <memset+0x114>
20085f60:	2813883a 	mov	r9,r5
20085f64:	200d883a 	mov	r6,r4
20085f68:	2007883a 	mov	r3,r4
20085f6c:	00000406 	br	20085f80 <memset+0x34>
20085f70:	3a3fffc4 	addi	r8,r7,-1
20085f74:	31800044 	addi	r6,r6,1
20085f78:	38003926 	beq	r7,zero,20086060 <memset+0x114>
20085f7c:	400f883a 	mov	r7,r8
20085f80:	18c00044 	addi	r3,r3,1
20085f84:	32400005 	stb	r9,0(r6)
20085f88:	1a0000cc 	andi	r8,r3,3
20085f8c:	403ff81e 	bne	r8,zero,20085f70 <__flash_rwdata_start+0xffff44c0>
20085f90:	010000c4 	movi	r4,3
20085f94:	21c02d2e 	bgeu	r4,r7,2008604c <memset+0x100>
20085f98:	29803fcc 	andi	r6,r5,255
20085f9c:	3008923a 	slli	r4,r6,8
20085fa0:	218cb03a 	or	r6,r4,r6
20085fa4:	3008943a 	slli	r4,r6,16
20085fa8:	218cb03a 	or	r6,r4,r6
20085fac:	010003c4 	movi	r4,15
20085fb0:	21c0182e 	bgeu	r4,r7,20086014 <memset+0xc8>
20085fb4:	3b3ffc04 	addi	r12,r7,-16
20085fb8:	6018d13a 	srli	r12,r12,4
20085fbc:	1a000104 	addi	r8,r3,4
20085fc0:	1ac00204 	addi	r11,r3,8
20085fc4:	6008913a 	slli	r4,r12,4
20085fc8:	1a800304 	addi	r10,r3,12
20085fcc:	1813883a 	mov	r9,r3
20085fd0:	21000504 	addi	r4,r4,20
20085fd4:	1909883a 	add	r4,r3,r4
20085fd8:	49800015 	stw	r6,0(r9)
20085fdc:	41800015 	stw	r6,0(r8)
20085fe0:	59800015 	stw	r6,0(r11)
20085fe4:	51800015 	stw	r6,0(r10)
20085fe8:	42000404 	addi	r8,r8,16
20085fec:	4a400404 	addi	r9,r9,16
20085ff0:	5ac00404 	addi	r11,r11,16
20085ff4:	52800404 	addi	r10,r10,16
20085ff8:	413ff71e 	bne	r8,r4,20085fd8 <__flash_rwdata_start+0xffff4528>
20085ffc:	63000044 	addi	r12,r12,1
20086000:	6018913a 	slli	r12,r12,4
20086004:	39c003cc 	andi	r7,r7,15
20086008:	010000c4 	movi	r4,3
2008600c:	1b07883a 	add	r3,r3,r12
20086010:	21c00e2e 	bgeu	r4,r7,2008604c <memset+0x100>
20086014:	1813883a 	mov	r9,r3
20086018:	3811883a 	mov	r8,r7
2008601c:	010000c4 	movi	r4,3
20086020:	49800015 	stw	r6,0(r9)
20086024:	423fff04 	addi	r8,r8,-4
20086028:	4a400104 	addi	r9,r9,4
2008602c:	223ffc36 	bltu	r4,r8,20086020 <__flash_rwdata_start+0xffff4570>
20086030:	393fff04 	addi	r4,r7,-4
20086034:	2008d0ba 	srli	r4,r4,2
20086038:	39c000cc 	andi	r7,r7,3
2008603c:	21000044 	addi	r4,r4,1
20086040:	2109883a 	add	r4,r4,r4
20086044:	2109883a 	add	r4,r4,r4
20086048:	1907883a 	add	r3,r3,r4
2008604c:	38000426 	beq	r7,zero,20086060 <memset+0x114>
20086050:	19cf883a 	add	r7,r3,r7
20086054:	19400005 	stb	r5,0(r3)
20086058:	18c00044 	addi	r3,r3,1
2008605c:	19fffd1e 	bne	r3,r7,20086054 <__flash_rwdata_start+0xffff45a4>
20086060:	f800283a 	ret
20086064:	2007883a 	mov	r3,r4
20086068:	300f883a 	mov	r7,r6
2008606c:	003fc806 	br	20085f90 <__flash_rwdata_start+0xffff44e0>

20086070 <_Balloc>:
20086070:	20801317 	ldw	r2,76(r4)
20086074:	defffc04 	addi	sp,sp,-16
20086078:	dc400115 	stw	r17,4(sp)
2008607c:	dc000015 	stw	r16,0(sp)
20086080:	dfc00315 	stw	ra,12(sp)
20086084:	dc800215 	stw	r18,8(sp)
20086088:	2023883a 	mov	r17,r4
2008608c:	2821883a 	mov	r16,r5
20086090:	10000f26 	beq	r2,zero,200860d0 <_Balloc+0x60>
20086094:	8407883a 	add	r3,r16,r16
20086098:	18c7883a 	add	r3,r3,r3
2008609c:	10c7883a 	add	r3,r2,r3
200860a0:	18800017 	ldw	r2,0(r3)
200860a4:	10001126 	beq	r2,zero,200860ec <_Balloc+0x7c>
200860a8:	11000017 	ldw	r4,0(r2)
200860ac:	19000015 	stw	r4,0(r3)
200860b0:	10000415 	stw	zero,16(r2)
200860b4:	10000315 	stw	zero,12(r2)
200860b8:	dfc00317 	ldw	ra,12(sp)
200860bc:	dc800217 	ldw	r18,8(sp)
200860c0:	dc400117 	ldw	r17,4(sp)
200860c4:	dc000017 	ldw	r16,0(sp)
200860c8:	dec00404 	addi	sp,sp,16
200860cc:	f800283a 	ret
200860d0:	01400104 	movi	r5,4
200860d4:	01800844 	movi	r6,33
200860d8:	0088d940 	call	20088d94 <_calloc_r>
200860dc:	88801315 	stw	r2,76(r17)
200860e0:	103fec1e 	bne	r2,zero,20086094 <__flash_rwdata_start+0xffff45e4>
200860e4:	0005883a 	mov	r2,zero
200860e8:	003ff306 	br	200860b8 <__flash_rwdata_start+0xffff4608>
200860ec:	01400044 	movi	r5,1
200860f0:	2c24983a 	sll	r18,r5,r16
200860f4:	8809883a 	mov	r4,r17
200860f8:	91800144 	addi	r6,r18,5
200860fc:	318d883a 	add	r6,r6,r6
20086100:	318d883a 	add	r6,r6,r6
20086104:	0088d940 	call	20088d94 <_calloc_r>
20086108:	103ff626 	beq	r2,zero,200860e4 <__flash_rwdata_start+0xffff4634>
2008610c:	14000115 	stw	r16,4(r2)
20086110:	14800215 	stw	r18,8(r2)
20086114:	003fe606 	br	200860b0 <__flash_rwdata_start+0xffff4600>

20086118 <_Bfree>:
20086118:	28000826 	beq	r5,zero,2008613c <_Bfree+0x24>
2008611c:	28c00117 	ldw	r3,4(r5)
20086120:	20801317 	ldw	r2,76(r4)
20086124:	18c7883a 	add	r3,r3,r3
20086128:	18c7883a 	add	r3,r3,r3
2008612c:	10c5883a 	add	r2,r2,r3
20086130:	10c00017 	ldw	r3,0(r2)
20086134:	28c00015 	stw	r3,0(r5)
20086138:	11400015 	stw	r5,0(r2)
2008613c:	f800283a 	ret

20086140 <__multadd>:
20086140:	defffa04 	addi	sp,sp,-24
20086144:	dc000115 	stw	r16,4(sp)
20086148:	2c000417 	ldw	r16,16(r5)
2008614c:	dc800315 	stw	r18,12(sp)
20086150:	dc400215 	stw	r17,8(sp)
20086154:	dfc00515 	stw	ra,20(sp)
20086158:	dcc00415 	stw	r19,16(sp)
2008615c:	2823883a 	mov	r17,r5
20086160:	2025883a 	mov	r18,r4
20086164:	2a400504 	addi	r9,r5,20
20086168:	0015883a 	mov	r10,zero
2008616c:	4a000017 	ldw	r8,0(r9)
20086170:	4a400104 	addi	r9,r9,4
20086174:	52800044 	addi	r10,r10,1
20086178:	40ffffcc 	andi	r3,r8,65535
2008617c:	1987383a 	mul	r3,r3,r6
20086180:	4010d43a 	srli	r8,r8,16
20086184:	19cf883a 	add	r7,r3,r7
20086188:	4191383a 	mul	r8,r8,r6
2008618c:	3816d43a 	srli	r11,r7,16
20086190:	38ffffcc 	andi	r3,r7,65535
20086194:	5a0f883a 	add	r7,r11,r8
20086198:	3810943a 	slli	r8,r7,16
2008619c:	380ed43a 	srli	r7,r7,16
200861a0:	40c7883a 	add	r3,r8,r3
200861a4:	48ffff15 	stw	r3,-4(r9)
200861a8:	543ff016 	blt	r10,r16,2008616c <__flash_rwdata_start+0xffff46bc>
200861ac:	38000926 	beq	r7,zero,200861d4 <__multadd+0x94>
200861b0:	88800217 	ldw	r2,8(r17)
200861b4:	80800f0e 	bge	r16,r2,200861f4 <__multadd+0xb4>
200861b8:	80800144 	addi	r2,r16,5
200861bc:	1085883a 	add	r2,r2,r2
200861c0:	1085883a 	add	r2,r2,r2
200861c4:	8885883a 	add	r2,r17,r2
200861c8:	11c00015 	stw	r7,0(r2)
200861cc:	84000044 	addi	r16,r16,1
200861d0:	8c000415 	stw	r16,16(r17)
200861d4:	8805883a 	mov	r2,r17
200861d8:	dfc00517 	ldw	ra,20(sp)
200861dc:	dcc00417 	ldw	r19,16(sp)
200861e0:	dc800317 	ldw	r18,12(sp)
200861e4:	dc400217 	ldw	r17,8(sp)
200861e8:	dc000117 	ldw	r16,4(sp)
200861ec:	dec00604 	addi	sp,sp,24
200861f0:	f800283a 	ret
200861f4:	89400117 	ldw	r5,4(r17)
200861f8:	9009883a 	mov	r4,r18
200861fc:	d9c00015 	stw	r7,0(sp)
20086200:	29400044 	addi	r5,r5,1
20086204:	00860700 	call	20086070 <_Balloc>
20086208:	89800417 	ldw	r6,16(r17)
2008620c:	11000304 	addi	r4,r2,12
20086210:	89400304 	addi	r5,r17,12
20086214:	31800084 	addi	r6,r6,2
20086218:	318d883a 	add	r6,r6,r6
2008621c:	318d883a 	add	r6,r6,r6
20086220:	1027883a 	mov	r19,r2
20086224:	0085cb80 	call	20085cb8 <memcpy>
20086228:	d9c00017 	ldw	r7,0(sp)
2008622c:	88000a26 	beq	r17,zero,20086258 <__multadd+0x118>
20086230:	89000117 	ldw	r4,4(r17)
20086234:	90c01317 	ldw	r3,76(r18)
20086238:	2109883a 	add	r4,r4,r4
2008623c:	2109883a 	add	r4,r4,r4
20086240:	1907883a 	add	r3,r3,r4
20086244:	18800017 	ldw	r2,0(r3)
20086248:	88800015 	stw	r2,0(r17)
2008624c:	1c400015 	stw	r17,0(r3)
20086250:	9823883a 	mov	r17,r19
20086254:	003fd806 	br	200861b8 <__flash_rwdata_start+0xffff4708>
20086258:	9823883a 	mov	r17,r19
2008625c:	003fd606 	br	200861b8 <__flash_rwdata_start+0xffff4708>

20086260 <__s2b>:
20086260:	defff904 	addi	sp,sp,-28
20086264:	dc400115 	stw	r17,4(sp)
20086268:	dc000015 	stw	r16,0(sp)
2008626c:	2023883a 	mov	r17,r4
20086270:	2821883a 	mov	r16,r5
20086274:	39000204 	addi	r4,r7,8
20086278:	01400244 	movi	r5,9
2008627c:	dcc00315 	stw	r19,12(sp)
20086280:	dc800215 	stw	r18,8(sp)
20086284:	dfc00615 	stw	ra,24(sp)
20086288:	dd400515 	stw	r21,20(sp)
2008628c:	dd000415 	stw	r20,16(sp)
20086290:	3825883a 	mov	r18,r7
20086294:	3027883a 	mov	r19,r6
20086298:	008a1980 	call	2008a198 <__divsi3>
2008629c:	00c00044 	movi	r3,1
200862a0:	000b883a 	mov	r5,zero
200862a4:	1880030e 	bge	r3,r2,200862b4 <__s2b+0x54>
200862a8:	18c7883a 	add	r3,r3,r3
200862ac:	29400044 	addi	r5,r5,1
200862b0:	18bffd16 	blt	r3,r2,200862a8 <__flash_rwdata_start+0xffff47f8>
200862b4:	8809883a 	mov	r4,r17
200862b8:	00860700 	call	20086070 <_Balloc>
200862bc:	d8c00717 	ldw	r3,28(sp)
200862c0:	10c00515 	stw	r3,20(r2)
200862c4:	00c00044 	movi	r3,1
200862c8:	10c00415 	stw	r3,16(r2)
200862cc:	00c00244 	movi	r3,9
200862d0:	1cc0210e 	bge	r3,r19,20086358 <__s2b+0xf8>
200862d4:	80eb883a 	add	r21,r16,r3
200862d8:	a829883a 	mov	r20,r21
200862dc:	84e1883a 	add	r16,r16,r19
200862e0:	a1c00007 	ldb	r7,0(r20)
200862e4:	8809883a 	mov	r4,r17
200862e8:	a5000044 	addi	r20,r20,1
200862ec:	100b883a 	mov	r5,r2
200862f0:	01800284 	movi	r6,10
200862f4:	39fff404 	addi	r7,r7,-48
200862f8:	00861400 	call	20086140 <__multadd>
200862fc:	a43ff81e 	bne	r20,r16,200862e0 <__flash_rwdata_start+0xffff4830>
20086300:	ace1883a 	add	r16,r21,r19
20086304:	843ffe04 	addi	r16,r16,-8
20086308:	9c800a0e 	bge	r19,r18,20086334 <__s2b+0xd4>
2008630c:	94e5c83a 	sub	r18,r18,r19
20086310:	84a5883a 	add	r18,r16,r18
20086314:	81c00007 	ldb	r7,0(r16)
20086318:	8809883a 	mov	r4,r17
2008631c:	84000044 	addi	r16,r16,1
20086320:	100b883a 	mov	r5,r2
20086324:	01800284 	movi	r6,10
20086328:	39fff404 	addi	r7,r7,-48
2008632c:	00861400 	call	20086140 <__multadd>
20086330:	84bff81e 	bne	r16,r18,20086314 <__flash_rwdata_start+0xffff4864>
20086334:	dfc00617 	ldw	ra,24(sp)
20086338:	dd400517 	ldw	r21,20(sp)
2008633c:	dd000417 	ldw	r20,16(sp)
20086340:	dcc00317 	ldw	r19,12(sp)
20086344:	dc800217 	ldw	r18,8(sp)
20086348:	dc400117 	ldw	r17,4(sp)
2008634c:	dc000017 	ldw	r16,0(sp)
20086350:	dec00704 	addi	sp,sp,28
20086354:	f800283a 	ret
20086358:	84000284 	addi	r16,r16,10
2008635c:	1827883a 	mov	r19,r3
20086360:	003fe906 	br	20086308 <__flash_rwdata_start+0xffff4858>

20086364 <__hi0bits>:
20086364:	20bfffec 	andhi	r2,r4,65535
20086368:	1000141e 	bne	r2,zero,200863bc <__hi0bits+0x58>
2008636c:	2008943a 	slli	r4,r4,16
20086370:	00800404 	movi	r2,16
20086374:	20ffc02c 	andhi	r3,r4,65280
20086378:	1800021e 	bne	r3,zero,20086384 <__hi0bits+0x20>
2008637c:	2008923a 	slli	r4,r4,8
20086380:	10800204 	addi	r2,r2,8
20086384:	20fc002c 	andhi	r3,r4,61440
20086388:	1800021e 	bne	r3,zero,20086394 <__hi0bits+0x30>
2008638c:	2008913a 	slli	r4,r4,4
20086390:	10800104 	addi	r2,r2,4
20086394:	20f0002c 	andhi	r3,r4,49152
20086398:	1800031e 	bne	r3,zero,200863a8 <__hi0bits+0x44>
2008639c:	2109883a 	add	r4,r4,r4
200863a0:	10800084 	addi	r2,r2,2
200863a4:	2109883a 	add	r4,r4,r4
200863a8:	20000316 	blt	r4,zero,200863b8 <__hi0bits+0x54>
200863ac:	2110002c 	andhi	r4,r4,16384
200863b0:	2000041e 	bne	r4,zero,200863c4 <__hi0bits+0x60>
200863b4:	00800804 	movi	r2,32
200863b8:	f800283a 	ret
200863bc:	0005883a 	mov	r2,zero
200863c0:	003fec06 	br	20086374 <__flash_rwdata_start+0xffff48c4>
200863c4:	10800044 	addi	r2,r2,1
200863c8:	f800283a 	ret

200863cc <__lo0bits>:
200863cc:	20c00017 	ldw	r3,0(r4)
200863d0:	188001cc 	andi	r2,r3,7
200863d4:	10000826 	beq	r2,zero,200863f8 <__lo0bits+0x2c>
200863d8:	1880004c 	andi	r2,r3,1
200863dc:	1000211e 	bne	r2,zero,20086464 <__lo0bits+0x98>
200863e0:	1880008c 	andi	r2,r3,2
200863e4:	1000211e 	bne	r2,zero,2008646c <__lo0bits+0xa0>
200863e8:	1806d0ba 	srli	r3,r3,2
200863ec:	00800084 	movi	r2,2
200863f0:	20c00015 	stw	r3,0(r4)
200863f4:	f800283a 	ret
200863f8:	18bfffcc 	andi	r2,r3,65535
200863fc:	10001326 	beq	r2,zero,2008644c <__lo0bits+0x80>
20086400:	0005883a 	mov	r2,zero
20086404:	19403fcc 	andi	r5,r3,255
20086408:	2800021e 	bne	r5,zero,20086414 <__lo0bits+0x48>
2008640c:	1806d23a 	srli	r3,r3,8
20086410:	10800204 	addi	r2,r2,8
20086414:	194003cc 	andi	r5,r3,15
20086418:	2800021e 	bne	r5,zero,20086424 <__lo0bits+0x58>
2008641c:	1806d13a 	srli	r3,r3,4
20086420:	10800104 	addi	r2,r2,4
20086424:	194000cc 	andi	r5,r3,3
20086428:	2800021e 	bne	r5,zero,20086434 <__lo0bits+0x68>
2008642c:	1806d0ba 	srli	r3,r3,2
20086430:	10800084 	addi	r2,r2,2
20086434:	1940004c 	andi	r5,r3,1
20086438:	2800081e 	bne	r5,zero,2008645c <__lo0bits+0x90>
2008643c:	1806d07a 	srli	r3,r3,1
20086440:	1800051e 	bne	r3,zero,20086458 <__lo0bits+0x8c>
20086444:	00800804 	movi	r2,32
20086448:	f800283a 	ret
2008644c:	1806d43a 	srli	r3,r3,16
20086450:	00800404 	movi	r2,16
20086454:	003feb06 	br	20086404 <__flash_rwdata_start+0xffff4954>
20086458:	10800044 	addi	r2,r2,1
2008645c:	20c00015 	stw	r3,0(r4)
20086460:	f800283a 	ret
20086464:	0005883a 	mov	r2,zero
20086468:	f800283a 	ret
2008646c:	1806d07a 	srli	r3,r3,1
20086470:	00800044 	movi	r2,1
20086474:	20c00015 	stw	r3,0(r4)
20086478:	f800283a 	ret

2008647c <__i2b>:
2008647c:	defffd04 	addi	sp,sp,-12
20086480:	dc000015 	stw	r16,0(sp)
20086484:	04000044 	movi	r16,1
20086488:	dc400115 	stw	r17,4(sp)
2008648c:	2823883a 	mov	r17,r5
20086490:	800b883a 	mov	r5,r16
20086494:	dfc00215 	stw	ra,8(sp)
20086498:	00860700 	call	20086070 <_Balloc>
2008649c:	14400515 	stw	r17,20(r2)
200864a0:	14000415 	stw	r16,16(r2)
200864a4:	dfc00217 	ldw	ra,8(sp)
200864a8:	dc400117 	ldw	r17,4(sp)
200864ac:	dc000017 	ldw	r16,0(sp)
200864b0:	dec00304 	addi	sp,sp,12
200864b4:	f800283a 	ret

200864b8 <__multiply>:
200864b8:	defffa04 	addi	sp,sp,-24
200864bc:	dcc00315 	stw	r19,12(sp)
200864c0:	dc800215 	stw	r18,8(sp)
200864c4:	2cc00417 	ldw	r19,16(r5)
200864c8:	34800417 	ldw	r18,16(r6)
200864cc:	dd000415 	stw	r20,16(sp)
200864d0:	dc400115 	stw	r17,4(sp)
200864d4:	dfc00515 	stw	ra,20(sp)
200864d8:	dc000015 	stw	r16,0(sp)
200864dc:	2829883a 	mov	r20,r5
200864e0:	3023883a 	mov	r17,r6
200864e4:	9c807016 	blt	r19,r18,200866a8 <__multiply+0x1f0>
200864e8:	9005883a 	mov	r2,r18
200864ec:	9825883a 	mov	r18,r19
200864f0:	1027883a 	mov	r19,r2
200864f4:	a0800217 	ldw	r2,8(r20)
200864f8:	94e1883a 	add	r16,r18,r19
200864fc:	a1400117 	ldw	r5,4(r20)
20086500:	1400010e 	bge	r2,r16,20086508 <__multiply+0x50>
20086504:	29400044 	addi	r5,r5,1
20086508:	00860700 	call	20086070 <_Balloc>
2008650c:	8417883a 	add	r11,r16,r16
20086510:	13000504 	addi	r12,r2,20
20086514:	5ad7883a 	add	r11,r11,r11
20086518:	62d7883a 	add	r11,r12,r11
2008651c:	6007883a 	mov	r3,r12
20086520:	62c0032e 	bgeu	r12,r11,20086530 <__multiply+0x78>
20086524:	18000015 	stw	zero,0(r3)
20086528:	18c00104 	addi	r3,r3,4
2008652c:	1afffd36 	bltu	r3,r11,20086524 <__flash_rwdata_start+0xffff4a74>
20086530:	9ce7883a 	add	r19,r19,r19
20086534:	94a5883a 	add	r18,r18,r18
20086538:	89800504 	addi	r6,r17,20
2008653c:	9ce7883a 	add	r19,r19,r19
20086540:	a3800504 	addi	r14,r20,20
20086544:	94a5883a 	add	r18,r18,r18
20086548:	34db883a 	add	r13,r6,r19
2008654c:	7495883a 	add	r10,r14,r18
20086550:	3340422e 	bgeu	r6,r13,2008665c <__multiply+0x1a4>
20086554:	34400017 	ldw	r17,0(r6)
20086558:	8cbfffcc 	andi	r18,r17,65535
2008655c:	90001b26 	beq	r18,zero,200865cc <__multiply+0x114>
20086560:	6013883a 	mov	r9,r12
20086564:	7023883a 	mov	r17,r14
20086568:	0011883a 	mov	r8,zero
2008656c:	88c00017 	ldw	r3,0(r17)
20086570:	4bc00017 	ldw	r15,0(r9)
20086574:	8c400104 	addi	r17,r17,4
20086578:	19ffffcc 	andi	r7,r3,65535
2008657c:	3c8f383a 	mul	r7,r7,r18
20086580:	1808d43a 	srli	r4,r3,16
20086584:	797fffcc 	andi	r5,r15,65535
20086588:	29cb883a 	add	r5,r5,r7
2008658c:	2a0b883a 	add	r5,r5,r8
20086590:	2489383a 	mul	r4,r4,r18
20086594:	7806d43a 	srli	r3,r15,16
20086598:	2810d43a 	srli	r8,r5,16
2008659c:	297fffcc 	andi	r5,r5,65535
200865a0:	1907883a 	add	r3,r3,r4
200865a4:	1a07883a 	add	r3,r3,r8
200865a8:	1808943a 	slli	r4,r3,16
200865ac:	480f883a 	mov	r7,r9
200865b0:	1810d43a 	srli	r8,r3,16
200865b4:	214ab03a 	or	r5,r4,r5
200865b8:	49400015 	stw	r5,0(r9)
200865bc:	4a400104 	addi	r9,r9,4
200865c0:	8abfea36 	bltu	r17,r10,2008656c <__flash_rwdata_start+0xffff4abc>
200865c4:	3a000115 	stw	r8,4(r7)
200865c8:	34400017 	ldw	r17,0(r6)
200865cc:	8822d43a 	srli	r17,r17,16
200865d0:	88001f26 	beq	r17,zero,20086650 <__multiply+0x198>
200865d4:	60c00017 	ldw	r3,0(r12)
200865d8:	7013883a 	mov	r9,r14
200865dc:	601f883a 	mov	r15,r12
200865e0:	1811883a 	mov	r8,r3
200865e4:	6027883a 	mov	r19,r12
200865e8:	000f883a 	mov	r7,zero
200865ec:	00000106 	br	200865f4 <__multiply+0x13c>
200865f0:	9027883a 	mov	r19,r18
200865f4:	4940000b 	ldhu	r5,0(r9)
200865f8:	4010d43a 	srli	r8,r8,16
200865fc:	193fffcc 	andi	r4,r3,65535
20086600:	2c4b383a 	mul	r5,r5,r17
20086604:	7bc00104 	addi	r15,r15,4
20086608:	4a400104 	addi	r9,r9,4
2008660c:	2a0b883a 	add	r5,r5,r8
20086610:	29cb883a 	add	r5,r5,r7
20086614:	2806943a 	slli	r3,r5,16
20086618:	9c800104 	addi	r18,r19,4
2008661c:	280ad43a 	srli	r5,r5,16
20086620:	1908b03a 	or	r4,r3,r4
20086624:	793fff15 	stw	r4,-4(r15)
20086628:	48ffff17 	ldw	r3,-4(r9)
2008662c:	92000017 	ldw	r8,0(r18)
20086630:	1806d43a 	srli	r3,r3,16
20086634:	413fffcc 	andi	r4,r8,65535
20086638:	1c47383a 	mul	r3,r3,r17
2008663c:	1907883a 	add	r3,r3,r4
20086640:	1947883a 	add	r3,r3,r5
20086644:	180ed43a 	srli	r7,r3,16
20086648:	4abfe936 	bltu	r9,r10,200865f0 <__flash_rwdata_start+0xffff4b40>
2008664c:	98c00115 	stw	r3,4(r19)
20086650:	31800104 	addi	r6,r6,4
20086654:	63000104 	addi	r12,r12,4
20086658:	337fbe36 	bltu	r6,r13,20086554 <__flash_rwdata_start+0xffff4aa4>
2008665c:	0400090e 	bge	zero,r16,20086684 <__multiply+0x1cc>
20086660:	58ffff17 	ldw	r3,-4(r11)
20086664:	5affff04 	addi	r11,r11,-4
20086668:	18000326 	beq	r3,zero,20086678 <__multiply+0x1c0>
2008666c:	00000506 	br	20086684 <__multiply+0x1cc>
20086670:	58c00017 	ldw	r3,0(r11)
20086674:	1800031e 	bne	r3,zero,20086684 <__multiply+0x1cc>
20086678:	843fffc4 	addi	r16,r16,-1
2008667c:	5affff04 	addi	r11,r11,-4
20086680:	803ffb1e 	bne	r16,zero,20086670 <__flash_rwdata_start+0xffff4bc0>
20086684:	14000415 	stw	r16,16(r2)
20086688:	dfc00517 	ldw	ra,20(sp)
2008668c:	dd000417 	ldw	r20,16(sp)
20086690:	dcc00317 	ldw	r19,12(sp)
20086694:	dc800217 	ldw	r18,8(sp)
20086698:	dc400117 	ldw	r17,4(sp)
2008669c:	dc000017 	ldw	r16,0(sp)
200866a0:	dec00604 	addi	sp,sp,24
200866a4:	f800283a 	ret
200866a8:	3029883a 	mov	r20,r6
200866ac:	2823883a 	mov	r17,r5
200866b0:	003f9006 	br	200864f4 <__flash_rwdata_start+0xffff4a44>

200866b4 <__pow5mult>:
200866b4:	defffa04 	addi	sp,sp,-24
200866b8:	dcc00315 	stw	r19,12(sp)
200866bc:	dc800215 	stw	r18,8(sp)
200866c0:	dc000015 	stw	r16,0(sp)
200866c4:	dfc00515 	stw	ra,20(sp)
200866c8:	dd000415 	stw	r20,16(sp)
200866cc:	dc400115 	stw	r17,4(sp)
200866d0:	308000cc 	andi	r2,r6,3
200866d4:	3021883a 	mov	r16,r6
200866d8:	2027883a 	mov	r19,r4
200866dc:	2825883a 	mov	r18,r5
200866e0:	10002e1e 	bne	r2,zero,2008679c <__pow5mult+0xe8>
200866e4:	8021d0ba 	srai	r16,r16,2
200866e8:	80001a26 	beq	r16,zero,20086754 <__pow5mult+0xa0>
200866ec:	9c401217 	ldw	r17,72(r19)
200866f0:	8800061e 	bne	r17,zero,2008670c <__pow5mult+0x58>
200866f4:	00003406 	br	200867c8 <__pow5mult+0x114>
200866f8:	8021d07a 	srai	r16,r16,1
200866fc:	80001526 	beq	r16,zero,20086754 <__pow5mult+0xa0>
20086700:	88800017 	ldw	r2,0(r17)
20086704:	10001c26 	beq	r2,zero,20086778 <__pow5mult+0xc4>
20086708:	1023883a 	mov	r17,r2
2008670c:	80c0004c 	andi	r3,r16,1
20086710:	183ff926 	beq	r3,zero,200866f8 <__flash_rwdata_start+0xffff4c48>
20086714:	900b883a 	mov	r5,r18
20086718:	880d883a 	mov	r6,r17
2008671c:	9809883a 	mov	r4,r19
20086720:	00864b80 	call	200864b8 <__multiply>
20086724:	90001b26 	beq	r18,zero,20086794 <__pow5mult+0xe0>
20086728:	91c00117 	ldw	r7,4(r18)
2008672c:	98c01317 	ldw	r3,76(r19)
20086730:	8021d07a 	srai	r16,r16,1
20086734:	39cf883a 	add	r7,r7,r7
20086738:	39cf883a 	add	r7,r7,r7
2008673c:	19c7883a 	add	r3,r3,r7
20086740:	19000017 	ldw	r4,0(r3)
20086744:	91000015 	stw	r4,0(r18)
20086748:	1c800015 	stw	r18,0(r3)
2008674c:	1025883a 	mov	r18,r2
20086750:	803feb1e 	bne	r16,zero,20086700 <__flash_rwdata_start+0xffff4c50>
20086754:	9005883a 	mov	r2,r18
20086758:	dfc00517 	ldw	ra,20(sp)
2008675c:	dd000417 	ldw	r20,16(sp)
20086760:	dcc00317 	ldw	r19,12(sp)
20086764:	dc800217 	ldw	r18,8(sp)
20086768:	dc400117 	ldw	r17,4(sp)
2008676c:	dc000017 	ldw	r16,0(sp)
20086770:	dec00604 	addi	sp,sp,24
20086774:	f800283a 	ret
20086778:	9809883a 	mov	r4,r19
2008677c:	880b883a 	mov	r5,r17
20086780:	880d883a 	mov	r6,r17
20086784:	00864b80 	call	200864b8 <__multiply>
20086788:	88800015 	stw	r2,0(r17)
2008678c:	10000015 	stw	zero,0(r2)
20086790:	003fdd06 	br	20086708 <__flash_rwdata_start+0xffff4c58>
20086794:	1025883a 	mov	r18,r2
20086798:	003fd706 	br	200866f8 <__flash_rwdata_start+0xffff4c48>
2008679c:	10bfffc4 	addi	r2,r2,-1
200867a0:	1085883a 	add	r2,r2,r2
200867a4:	00c00034 	movhi	r3,0
200867a8:	18c02a04 	addi	r3,r3,168
200867ac:	1085883a 	add	r2,r2,r2
200867b0:	1885883a 	add	r2,r3,r2
200867b4:	11800017 	ldw	r6,0(r2)
200867b8:	000f883a 	mov	r7,zero
200867bc:	00861400 	call	20086140 <__multadd>
200867c0:	1025883a 	mov	r18,r2
200867c4:	003fc706 	br	200866e4 <__flash_rwdata_start+0xffff4c34>
200867c8:	05000044 	movi	r20,1
200867cc:	9809883a 	mov	r4,r19
200867d0:	a00b883a 	mov	r5,r20
200867d4:	00860700 	call	20086070 <_Balloc>
200867d8:	1023883a 	mov	r17,r2
200867dc:	00809c44 	movi	r2,625
200867e0:	88800515 	stw	r2,20(r17)
200867e4:	8d000415 	stw	r20,16(r17)
200867e8:	9c401215 	stw	r17,72(r19)
200867ec:	88000015 	stw	zero,0(r17)
200867f0:	003fc606 	br	2008670c <__flash_rwdata_start+0xffff4c5c>

200867f4 <__lshift>:
200867f4:	defff904 	addi	sp,sp,-28
200867f8:	dd000415 	stw	r20,16(sp)
200867fc:	dcc00315 	stw	r19,12(sp)
20086800:	3029d17a 	srai	r20,r6,5
20086804:	2cc00417 	ldw	r19,16(r5)
20086808:	28800217 	ldw	r2,8(r5)
2008680c:	dd400515 	stw	r21,20(sp)
20086810:	a4e7883a 	add	r19,r20,r19
20086814:	dc800215 	stw	r18,8(sp)
20086818:	dc400115 	stw	r17,4(sp)
2008681c:	dc000015 	stw	r16,0(sp)
20086820:	dfc00615 	stw	ra,24(sp)
20086824:	9c000044 	addi	r16,r19,1
20086828:	2823883a 	mov	r17,r5
2008682c:	302b883a 	mov	r21,r6
20086830:	2025883a 	mov	r18,r4
20086834:	29400117 	ldw	r5,4(r5)
20086838:	1400030e 	bge	r2,r16,20086848 <__lshift+0x54>
2008683c:	1085883a 	add	r2,r2,r2
20086840:	29400044 	addi	r5,r5,1
20086844:	143ffd16 	blt	r2,r16,2008683c <__flash_rwdata_start+0xffff4d8c>
20086848:	9009883a 	mov	r4,r18
2008684c:	00860700 	call	20086070 <_Balloc>
20086850:	11c00504 	addi	r7,r2,20
20086854:	0500090e 	bge	zero,r20,2008687c <__lshift+0x88>
20086858:	3811883a 	mov	r8,r7
2008685c:	0007883a 	mov	r3,zero
20086860:	40000015 	stw	zero,0(r8)
20086864:	18c00044 	addi	r3,r3,1
20086868:	42000104 	addi	r8,r8,4
2008686c:	1d3ffc1e 	bne	r3,r20,20086860 <__flash_rwdata_start+0xffff4db0>
20086870:	18c7883a 	add	r3,r3,r3
20086874:	18c7883a 	add	r3,r3,r3
20086878:	38cf883a 	add	r7,r7,r3
2008687c:	89000417 	ldw	r4,16(r17)
20086880:	88c00504 	addi	r3,r17,20
20086884:	a98007cc 	andi	r6,r21,31
20086888:	2109883a 	add	r4,r4,r4
2008688c:	2109883a 	add	r4,r4,r4
20086890:	1909883a 	add	r4,r3,r4
20086894:	30002326 	beq	r6,zero,20086924 <__lshift+0x130>
20086898:	01400804 	movi	r5,32
2008689c:	298bc83a 	sub	r5,r5,r6
200868a0:	0013883a 	mov	r9,zero
200868a4:	1a000017 	ldw	r8,0(r3)
200868a8:	3815883a 	mov	r10,r7
200868ac:	39c00104 	addi	r7,r7,4
200868b0:	4190983a 	sll	r8,r8,r6
200868b4:	18c00104 	addi	r3,r3,4
200868b8:	4a10b03a 	or	r8,r9,r8
200868bc:	3a3fff15 	stw	r8,-4(r7)
200868c0:	1a3fff17 	ldw	r8,-4(r3)
200868c4:	4152d83a 	srl	r9,r8,r5
200868c8:	193ff636 	bltu	r3,r4,200868a4 <__flash_rwdata_start+0xffff4df4>
200868cc:	52400115 	stw	r9,4(r10)
200868d0:	48001a1e 	bne	r9,zero,2008693c <__lshift+0x148>
200868d4:	843fffc4 	addi	r16,r16,-1
200868d8:	14000415 	stw	r16,16(r2)
200868dc:	88000826 	beq	r17,zero,20086900 <__lshift+0x10c>
200868e0:	89000117 	ldw	r4,4(r17)
200868e4:	90c01317 	ldw	r3,76(r18)
200868e8:	2109883a 	add	r4,r4,r4
200868ec:	2109883a 	add	r4,r4,r4
200868f0:	1907883a 	add	r3,r3,r4
200868f4:	19000017 	ldw	r4,0(r3)
200868f8:	89000015 	stw	r4,0(r17)
200868fc:	1c400015 	stw	r17,0(r3)
20086900:	dfc00617 	ldw	ra,24(sp)
20086904:	dd400517 	ldw	r21,20(sp)
20086908:	dd000417 	ldw	r20,16(sp)
2008690c:	dcc00317 	ldw	r19,12(sp)
20086910:	dc800217 	ldw	r18,8(sp)
20086914:	dc400117 	ldw	r17,4(sp)
20086918:	dc000017 	ldw	r16,0(sp)
2008691c:	dec00704 	addi	sp,sp,28
20086920:	f800283a 	ret
20086924:	19400017 	ldw	r5,0(r3)
20086928:	39c00104 	addi	r7,r7,4
2008692c:	18c00104 	addi	r3,r3,4
20086930:	397fff15 	stw	r5,-4(r7)
20086934:	193ffb36 	bltu	r3,r4,20086924 <__flash_rwdata_start+0xffff4e74>
20086938:	003fe606 	br	200868d4 <__flash_rwdata_start+0xffff4e24>
2008693c:	9c000084 	addi	r16,r19,2
20086940:	003fe406 	br	200868d4 <__flash_rwdata_start+0xffff4e24>

20086944 <__mcmp>:
20086944:	20800417 	ldw	r2,16(r4)
20086948:	28c00417 	ldw	r3,16(r5)
2008694c:	10c5c83a 	sub	r2,r2,r3
20086950:	1000111e 	bne	r2,zero,20086998 <__mcmp+0x54>
20086954:	18c7883a 	add	r3,r3,r3
20086958:	18c7883a 	add	r3,r3,r3
2008695c:	21000504 	addi	r4,r4,20
20086960:	29400504 	addi	r5,r5,20
20086964:	20c5883a 	add	r2,r4,r3
20086968:	28cb883a 	add	r5,r5,r3
2008696c:	00000106 	br	20086974 <__mcmp+0x30>
20086970:	20800a2e 	bgeu	r4,r2,2008699c <__mcmp+0x58>
20086974:	10bfff04 	addi	r2,r2,-4
20086978:	297fff04 	addi	r5,r5,-4
2008697c:	11800017 	ldw	r6,0(r2)
20086980:	28c00017 	ldw	r3,0(r5)
20086984:	30fffa26 	beq	r6,r3,20086970 <__flash_rwdata_start+0xffff4ec0>
20086988:	30c00236 	bltu	r6,r3,20086994 <__mcmp+0x50>
2008698c:	00800044 	movi	r2,1
20086990:	f800283a 	ret
20086994:	00bfffc4 	movi	r2,-1
20086998:	f800283a 	ret
2008699c:	0005883a 	mov	r2,zero
200869a0:	f800283a 	ret

200869a4 <__mdiff>:
200869a4:	defffb04 	addi	sp,sp,-20
200869a8:	dc000015 	stw	r16,0(sp)
200869ac:	2821883a 	mov	r16,r5
200869b0:	dcc00315 	stw	r19,12(sp)
200869b4:	300b883a 	mov	r5,r6
200869b8:	2027883a 	mov	r19,r4
200869bc:	8009883a 	mov	r4,r16
200869c0:	dc800215 	stw	r18,8(sp)
200869c4:	dfc00415 	stw	ra,16(sp)
200869c8:	dc400115 	stw	r17,4(sp)
200869cc:	3025883a 	mov	r18,r6
200869d0:	00869440 	call	20086944 <__mcmp>
200869d4:	10005226 	beq	r2,zero,20086b20 <__mdiff+0x17c>
200869d8:	10004c16 	blt	r2,zero,20086b0c <__mdiff+0x168>
200869dc:	0023883a 	mov	r17,zero
200869e0:	81400117 	ldw	r5,4(r16)
200869e4:	9809883a 	mov	r4,r19
200869e8:	00860700 	call	20086070 <_Balloc>
200869ec:	83400417 	ldw	r13,16(r16)
200869f0:	93800417 	ldw	r14,16(r18)
200869f4:	81000504 	addi	r4,r16,20
200869f8:	6b59883a 	add	r12,r13,r13
200869fc:	739d883a 	add	r14,r14,r14
20086a00:	6319883a 	add	r12,r12,r12
20086a04:	91800504 	addi	r6,r18,20
20086a08:	739d883a 	add	r14,r14,r14
20086a0c:	14400315 	stw	r17,12(r2)
20086a10:	2319883a 	add	r12,r4,r12
20086a14:	339d883a 	add	r14,r6,r14
20086a18:	12400504 	addi	r9,r2,20
20086a1c:	0007883a 	mov	r3,zero
20086a20:	22000017 	ldw	r8,0(r4)
20086a24:	32800017 	ldw	r10,0(r6)
20086a28:	4ac00104 	addi	r11,r9,4
20086a2c:	41ffffcc 	andi	r7,r8,65535
20086a30:	38c7883a 	add	r3,r7,r3
20086a34:	51ffffcc 	andi	r7,r10,65535
20086a38:	19cfc83a 	sub	r7,r3,r7
20086a3c:	4010d43a 	srli	r8,r8,16
20086a40:	5014d43a 	srli	r10,r10,16
20086a44:	3807d43a 	srai	r3,r7,16
20086a48:	39ffffcc 	andi	r7,r7,65535
20086a4c:	4291c83a 	sub	r8,r8,r10
20086a50:	40c7883a 	add	r3,r8,r3
20086a54:	1810943a 	slli	r8,r3,16
20086a58:	31800104 	addi	r6,r6,4
20086a5c:	21000104 	addi	r4,r4,4
20086a60:	41ceb03a 	or	r7,r8,r7
20086a64:	49c00015 	stw	r7,0(r9)
20086a68:	1807d43a 	srai	r3,r3,16
20086a6c:	580b883a 	mov	r5,r11
20086a70:	5813883a 	mov	r9,r11
20086a74:	33bfea36 	bltu	r6,r14,20086a20 <__flash_rwdata_start+0xffff4f70>
20086a78:	2011883a 	mov	r8,r4
20086a7c:	2300152e 	bgeu	r4,r12,20086ad4 <__mdiff+0x130>
20086a80:	21400017 	ldw	r5,0(r4)
20086a84:	4a400104 	addi	r9,r9,4
20086a88:	21000104 	addi	r4,r4,4
20086a8c:	29ffffcc 	andi	r7,r5,65535
20086a90:	38c7883a 	add	r3,r7,r3
20086a94:	280ad43a 	srli	r5,r5,16
20086a98:	180dd43a 	srai	r6,r3,16
20086a9c:	19ffffcc 	andi	r7,r3,65535
20086aa0:	3147883a 	add	r3,r6,r5
20086aa4:	180a943a 	slli	r5,r3,16
20086aa8:	1807d43a 	srai	r3,r3,16
20086aac:	29ceb03a 	or	r7,r5,r7
20086ab0:	49ffff15 	stw	r7,-4(r9)
20086ab4:	233ff236 	bltu	r4,r12,20086a80 <__flash_rwdata_start+0xffff4fd0>
20086ab8:	0206303a 	nor	r3,zero,r8
20086abc:	1b07883a 	add	r3,r3,r12
20086ac0:	1806d0ba 	srli	r3,r3,2
20086ac4:	18c00044 	addi	r3,r3,1
20086ac8:	18c7883a 	add	r3,r3,r3
20086acc:	18c7883a 	add	r3,r3,r3
20086ad0:	58cb883a 	add	r5,r11,r3
20086ad4:	28ffff04 	addi	r3,r5,-4
20086ad8:	3800041e 	bne	r7,zero,20086aec <__mdiff+0x148>
20086adc:	18ffff04 	addi	r3,r3,-4
20086ae0:	19000017 	ldw	r4,0(r3)
20086ae4:	6b7fffc4 	addi	r13,r13,-1
20086ae8:	203ffc26 	beq	r4,zero,20086adc <__flash_rwdata_start+0xffff502c>
20086aec:	13400415 	stw	r13,16(r2)
20086af0:	dfc00417 	ldw	ra,16(sp)
20086af4:	dcc00317 	ldw	r19,12(sp)
20086af8:	dc800217 	ldw	r18,8(sp)
20086afc:	dc400117 	ldw	r17,4(sp)
20086b00:	dc000017 	ldw	r16,0(sp)
20086b04:	dec00504 	addi	sp,sp,20
20086b08:	f800283a 	ret
20086b0c:	8005883a 	mov	r2,r16
20086b10:	04400044 	movi	r17,1
20086b14:	9021883a 	mov	r16,r18
20086b18:	1025883a 	mov	r18,r2
20086b1c:	003fb006 	br	200869e0 <__flash_rwdata_start+0xffff4f30>
20086b20:	9809883a 	mov	r4,r19
20086b24:	000b883a 	mov	r5,zero
20086b28:	00860700 	call	20086070 <_Balloc>
20086b2c:	00c00044 	movi	r3,1
20086b30:	10c00415 	stw	r3,16(r2)
20086b34:	10000515 	stw	zero,20(r2)
20086b38:	003fed06 	br	20086af0 <__flash_rwdata_start+0xffff5040>

20086b3c <__ulp>:
20086b3c:	295ffc2c 	andhi	r5,r5,32752
20086b40:	00bf3034 	movhi	r2,64704
20086b44:	2887883a 	add	r3,r5,r2
20086b48:	00c0020e 	bge	zero,r3,20086b54 <__ulp+0x18>
20086b4c:	0005883a 	mov	r2,zero
20086b50:	f800283a 	ret
20086b54:	00c7c83a 	sub	r3,zero,r3
20086b58:	180bd53a 	srai	r5,r3,20
20086b5c:	008004c4 	movi	r2,19
20086b60:	11400a0e 	bge	r2,r5,20086b8c <__ulp+0x50>
20086b64:	00800c84 	movi	r2,50
20086b68:	0007883a 	mov	r3,zero
20086b6c:	11400516 	blt	r2,r5,20086b84 <__ulp+0x48>
20086b70:	00800cc4 	movi	r2,51
20086b74:	114bc83a 	sub	r5,r2,r5
20086b78:	00800044 	movi	r2,1
20086b7c:	1144983a 	sll	r2,r2,r5
20086b80:	f800283a 	ret
20086b84:	00800044 	movi	r2,1
20086b88:	f800283a 	ret
20086b8c:	00800234 	movhi	r2,8
20086b90:	1147d83a 	sra	r3,r2,r5
20086b94:	0005883a 	mov	r2,zero
20086b98:	f800283a 	ret

20086b9c <__b2d>:
20086b9c:	defffa04 	addi	sp,sp,-24
20086ba0:	dc000015 	stw	r16,0(sp)
20086ba4:	24000417 	ldw	r16,16(r4)
20086ba8:	dc400115 	stw	r17,4(sp)
20086bac:	24400504 	addi	r17,r4,20
20086bb0:	8421883a 	add	r16,r16,r16
20086bb4:	8421883a 	add	r16,r16,r16
20086bb8:	8c21883a 	add	r16,r17,r16
20086bbc:	dc800215 	stw	r18,8(sp)
20086bc0:	84bfff17 	ldw	r18,-4(r16)
20086bc4:	dd000415 	stw	r20,16(sp)
20086bc8:	dcc00315 	stw	r19,12(sp)
20086bcc:	9009883a 	mov	r4,r18
20086bd0:	2829883a 	mov	r20,r5
20086bd4:	dfc00515 	stw	ra,20(sp)
20086bd8:	00863640 	call	20086364 <__hi0bits>
20086bdc:	00c00804 	movi	r3,32
20086be0:	1887c83a 	sub	r3,r3,r2
20086be4:	a0c00015 	stw	r3,0(r20)
20086be8:	00c00284 	movi	r3,10
20086bec:	84ffff04 	addi	r19,r16,-4
20086bf0:	18801216 	blt	r3,r2,20086c3c <__b2d+0xa0>
20086bf4:	014002c4 	movi	r5,11
20086bf8:	2889c83a 	sub	r4,r5,r2
20086bfc:	9106d83a 	srl	r3,r18,r4
20086c00:	18cffc34 	orhi	r3,r3,16368
20086c04:	8cc0282e 	bgeu	r17,r19,20086ca8 <__b2d+0x10c>
20086c08:	817ffe17 	ldw	r5,-8(r16)
20086c0c:	290ad83a 	srl	r5,r5,r4
20086c10:	10800544 	addi	r2,r2,21
20086c14:	9084983a 	sll	r2,r18,r2
20086c18:	2884b03a 	or	r2,r5,r2
20086c1c:	dfc00517 	ldw	ra,20(sp)
20086c20:	dd000417 	ldw	r20,16(sp)
20086c24:	dcc00317 	ldw	r19,12(sp)
20086c28:	dc800217 	ldw	r18,8(sp)
20086c2c:	dc400117 	ldw	r17,4(sp)
20086c30:	dc000017 	ldw	r16,0(sp)
20086c34:	dec00604 	addi	sp,sp,24
20086c38:	f800283a 	ret
20086c3c:	113ffd44 	addi	r4,r2,-11
20086c40:	8cc00f2e 	bgeu	r17,r19,20086c80 <__b2d+0xe4>
20086c44:	81bffe04 	addi	r6,r16,-8
20086c48:	817ffe17 	ldw	r5,-8(r16)
20086c4c:	20001326 	beq	r4,zero,20086c9c <__b2d+0x100>
20086c50:	00c00ac4 	movi	r3,43
20086c54:	1885c83a 	sub	r2,r3,r2
20086c58:	2886d83a 	srl	r3,r5,r2
20086c5c:	9124983a 	sll	r18,r18,r4
20086c60:	90e4b03a 	or	r18,r18,r3
20086c64:	90cffc34 	orhi	r3,r18,16368
20086c68:	8980112e 	bgeu	r17,r6,20086cb0 <__b2d+0x114>
20086c6c:	81bffd17 	ldw	r6,-12(r16)
20086c70:	308cd83a 	srl	r6,r6,r2
20086c74:	2904983a 	sll	r2,r5,r4
20086c78:	1184b03a 	or	r2,r2,r6
20086c7c:	003fe706 	br	20086c1c <__flash_rwdata_start+0xffff516c>
20086c80:	20000526 	beq	r4,zero,20086c98 <__b2d+0xfc>
20086c84:	9124983a 	sll	r18,r18,r4
20086c88:	000d883a 	mov	r6,zero
20086c8c:	000b883a 	mov	r5,zero
20086c90:	90cffc34 	orhi	r3,r18,16368
20086c94:	003ff706 	br	20086c74 <__flash_rwdata_start+0xffff51c4>
20086c98:	000b883a 	mov	r5,zero
20086c9c:	90cffc34 	orhi	r3,r18,16368
20086ca0:	2805883a 	mov	r2,r5
20086ca4:	003fdd06 	br	20086c1c <__flash_rwdata_start+0xffff516c>
20086ca8:	000b883a 	mov	r5,zero
20086cac:	003fd806 	br	20086c10 <__flash_rwdata_start+0xffff5160>
20086cb0:	000d883a 	mov	r6,zero
20086cb4:	003fef06 	br	20086c74 <__flash_rwdata_start+0xffff51c4>

20086cb8 <__d2b>:
20086cb8:	defff704 	addi	sp,sp,-36
20086cbc:	dc000215 	stw	r16,8(sp)
20086cc0:	3021883a 	mov	r16,r6
20086cc4:	dc400315 	stw	r17,12(sp)
20086cc8:	8022907a 	slli	r17,r16,1
20086ccc:	dd400715 	stw	r21,28(sp)
20086cd0:	282b883a 	mov	r21,r5
20086cd4:	01400044 	movi	r5,1
20086cd8:	dd000615 	stw	r20,24(sp)
20086cdc:	dcc00515 	stw	r19,20(sp)
20086ce0:	dc800415 	stw	r18,16(sp)
20086ce4:	dfc00815 	stw	ra,32(sp)
20086ce8:	3829883a 	mov	r20,r7
20086cec:	dc800917 	ldw	r18,36(sp)
20086cf0:	8822d57a 	srli	r17,r17,21
20086cf4:	00860700 	call	20086070 <_Balloc>
20086cf8:	1027883a 	mov	r19,r2
20086cfc:	00800434 	movhi	r2,16
20086d00:	10bfffc4 	addi	r2,r2,-1
20086d04:	808c703a 	and	r6,r16,r2
20086d08:	88000126 	beq	r17,zero,20086d10 <__d2b+0x58>
20086d0c:	31800434 	orhi	r6,r6,16
20086d10:	d9800015 	stw	r6,0(sp)
20086d14:	a8001f26 	beq	r21,zero,20086d94 <__d2b+0xdc>
20086d18:	d9000104 	addi	r4,sp,4
20086d1c:	dd400115 	stw	r21,4(sp)
20086d20:	00863cc0 	call	200863cc <__lo0bits>
20086d24:	d8c00017 	ldw	r3,0(sp)
20086d28:	1000291e 	bne	r2,zero,20086dd0 <__d2b+0x118>
20086d2c:	d9000117 	ldw	r4,4(sp)
20086d30:	99000515 	stw	r4,20(r19)
20086d34:	1820c03a 	cmpne	r16,r3,zero
20086d38:	84000044 	addi	r16,r16,1
20086d3c:	98c00615 	stw	r3,24(r19)
20086d40:	9c000415 	stw	r16,16(r19)
20086d44:	88001b1e 	bne	r17,zero,20086db4 <__d2b+0xfc>
20086d48:	800690ba 	slli	r3,r16,2
20086d4c:	10bef384 	addi	r2,r2,-1074
20086d50:	a0800015 	stw	r2,0(r20)
20086d54:	98c5883a 	add	r2,r19,r3
20086d58:	11000417 	ldw	r4,16(r2)
20086d5c:	8020917a 	slli	r16,r16,5
20086d60:	00863640 	call	20086364 <__hi0bits>
20086d64:	8085c83a 	sub	r2,r16,r2
20086d68:	90800015 	stw	r2,0(r18)
20086d6c:	9805883a 	mov	r2,r19
20086d70:	dfc00817 	ldw	ra,32(sp)
20086d74:	dd400717 	ldw	r21,28(sp)
20086d78:	dd000617 	ldw	r20,24(sp)
20086d7c:	dcc00517 	ldw	r19,20(sp)
20086d80:	dc800417 	ldw	r18,16(sp)
20086d84:	dc400317 	ldw	r17,12(sp)
20086d88:	dc000217 	ldw	r16,8(sp)
20086d8c:	dec00904 	addi	sp,sp,36
20086d90:	f800283a 	ret
20086d94:	d809883a 	mov	r4,sp
20086d98:	00863cc0 	call	200863cc <__lo0bits>
20086d9c:	d8c00017 	ldw	r3,0(sp)
20086da0:	04000044 	movi	r16,1
20086da4:	9c000415 	stw	r16,16(r19)
20086da8:	98c00515 	stw	r3,20(r19)
20086dac:	10800804 	addi	r2,r2,32
20086db0:	883fe526 	beq	r17,zero,20086d48 <__flash_rwdata_start+0xffff5298>
20086db4:	8c7ef344 	addi	r17,r17,-1075
20086db8:	88a3883a 	add	r17,r17,r2
20086dbc:	00c00d44 	movi	r3,53
20086dc0:	a4400015 	stw	r17,0(r20)
20086dc4:	1885c83a 	sub	r2,r3,r2
20086dc8:	90800015 	stw	r2,0(r18)
20086dcc:	003fe706 	br	20086d6c <__flash_rwdata_start+0xffff52bc>
20086dd0:	01000804 	movi	r4,32
20086dd4:	2089c83a 	sub	r4,r4,r2
20086dd8:	1908983a 	sll	r4,r3,r4
20086ddc:	d9400117 	ldw	r5,4(sp)
20086de0:	1886d83a 	srl	r3,r3,r2
20086de4:	2148b03a 	or	r4,r4,r5
20086de8:	99000515 	stw	r4,20(r19)
20086dec:	d8c00015 	stw	r3,0(sp)
20086df0:	003fd006 	br	20086d34 <__flash_rwdata_start+0xffff5284>

20086df4 <__ratio>:
20086df4:	defff904 	addi	sp,sp,-28
20086df8:	dc400315 	stw	r17,12(sp)
20086dfc:	2823883a 	mov	r17,r5
20086e00:	d9400104 	addi	r5,sp,4
20086e04:	dfc00615 	stw	ra,24(sp)
20086e08:	dcc00515 	stw	r19,20(sp)
20086e0c:	dc800415 	stw	r18,16(sp)
20086e10:	2027883a 	mov	r19,r4
20086e14:	dc000215 	stw	r16,8(sp)
20086e18:	0086b9c0 	call	20086b9c <__b2d>
20086e1c:	8809883a 	mov	r4,r17
20086e20:	d80b883a 	mov	r5,sp
20086e24:	1025883a 	mov	r18,r2
20086e28:	1821883a 	mov	r16,r3
20086e2c:	0086b9c0 	call	20086b9c <__b2d>
20086e30:	8a400417 	ldw	r9,16(r17)
20086e34:	9a000417 	ldw	r8,16(r19)
20086e38:	100d883a 	mov	r6,r2
20086e3c:	d8800017 	ldw	r2,0(sp)
20086e40:	4251c83a 	sub	r8,r8,r9
20086e44:	4012917a 	slli	r9,r8,5
20086e48:	da000117 	ldw	r8,4(sp)
20086e4c:	4091c83a 	sub	r8,r8,r2
20086e50:	4251883a 	add	r8,r8,r9
20086e54:	02000d0e 	bge	zero,r8,20086e8c <__ratio+0x98>
20086e58:	4010953a 	slli	r8,r8,20
20086e5c:	4421883a 	add	r16,r8,r16
20086e60:	9009883a 	mov	r4,r18
20086e64:	800b883a 	mov	r5,r16
20086e68:	180f883a 	mov	r7,r3
20086e6c:	008aaf40 	call	2008aaf4 <__divdf3>
20086e70:	dfc00617 	ldw	ra,24(sp)
20086e74:	dcc00517 	ldw	r19,20(sp)
20086e78:	dc800417 	ldw	r18,16(sp)
20086e7c:	dc400317 	ldw	r17,12(sp)
20086e80:	dc000217 	ldw	r16,8(sp)
20086e84:	dec00704 	addi	sp,sp,28
20086e88:	f800283a 	ret
20086e8c:	4010953a 	slli	r8,r8,20
20086e90:	1a07c83a 	sub	r3,r3,r8
20086e94:	003ff206 	br	20086e60 <__flash_rwdata_start+0xffff53b0>

20086e98 <_mprec_log10>:
20086e98:	defffe04 	addi	sp,sp,-8
20086e9c:	dc000015 	stw	r16,0(sp)
20086ea0:	dfc00115 	stw	ra,4(sp)
20086ea4:	008005c4 	movi	r2,23
20086ea8:	2021883a 	mov	r16,r4
20086eac:	11000d0e 	bge	r2,r4,20086ee4 <_mprec_log10+0x4c>
20086eb0:	0005883a 	mov	r2,zero
20086eb4:	00cffc34 	movhi	r3,16368
20086eb8:	843fffc4 	addi	r16,r16,-1
20086ebc:	1009883a 	mov	r4,r2
20086ec0:	180b883a 	mov	r5,r3
20086ec4:	000d883a 	mov	r6,zero
20086ec8:	01d00934 	movhi	r7,16420
20086ecc:	008b6040 	call	2008b604 <__muldf3>
20086ed0:	803ff91e 	bne	r16,zero,20086eb8 <__flash_rwdata_start+0xffff5408>
20086ed4:	dfc00117 	ldw	ra,4(sp)
20086ed8:	dc000017 	ldw	r16,0(sp)
20086edc:	dec00204 	addi	sp,sp,8
20086ee0:	f800283a 	ret
20086ee4:	202090fa 	slli	r16,r4,3
20086ee8:	00800034 	movhi	r2,0
20086eec:	10804104 	addi	r2,r2,260
20086ef0:	1421883a 	add	r16,r2,r16
20086ef4:	80800017 	ldw	r2,0(r16)
20086ef8:	80c00117 	ldw	r3,4(r16)
20086efc:	dfc00117 	ldw	ra,4(sp)
20086f00:	dc000017 	ldw	r16,0(sp)
20086f04:	dec00204 	addi	sp,sp,8
20086f08:	f800283a 	ret

20086f0c <__copybits>:
20086f0c:	297fffc4 	addi	r5,r5,-1
20086f10:	280fd17a 	srai	r7,r5,5
20086f14:	30c00417 	ldw	r3,16(r6)
20086f18:	30800504 	addi	r2,r6,20
20086f1c:	39c00044 	addi	r7,r7,1
20086f20:	18c7883a 	add	r3,r3,r3
20086f24:	39cf883a 	add	r7,r7,r7
20086f28:	18c7883a 	add	r3,r3,r3
20086f2c:	39cf883a 	add	r7,r7,r7
20086f30:	10c7883a 	add	r3,r2,r3
20086f34:	21cf883a 	add	r7,r4,r7
20086f38:	10c00d2e 	bgeu	r2,r3,20086f70 <__copybits+0x64>
20086f3c:	200b883a 	mov	r5,r4
20086f40:	12000017 	ldw	r8,0(r2)
20086f44:	29400104 	addi	r5,r5,4
20086f48:	10800104 	addi	r2,r2,4
20086f4c:	2a3fff15 	stw	r8,-4(r5)
20086f50:	10fffb36 	bltu	r2,r3,20086f40 <__flash_rwdata_start+0xffff5490>
20086f54:	1985c83a 	sub	r2,r3,r6
20086f58:	10bffac4 	addi	r2,r2,-21
20086f5c:	1004d0ba 	srli	r2,r2,2
20086f60:	10800044 	addi	r2,r2,1
20086f64:	1085883a 	add	r2,r2,r2
20086f68:	1085883a 	add	r2,r2,r2
20086f6c:	2089883a 	add	r4,r4,r2
20086f70:	21c0032e 	bgeu	r4,r7,20086f80 <__copybits+0x74>
20086f74:	20000015 	stw	zero,0(r4)
20086f78:	21000104 	addi	r4,r4,4
20086f7c:	21fffd36 	bltu	r4,r7,20086f74 <__flash_rwdata_start+0xffff54c4>
20086f80:	f800283a 	ret

20086f84 <__any_on>:
20086f84:	20c00417 	ldw	r3,16(r4)
20086f88:	2805d17a 	srai	r2,r5,5
20086f8c:	21000504 	addi	r4,r4,20
20086f90:	18800d0e 	bge	r3,r2,20086fc8 <__any_on+0x44>
20086f94:	18c7883a 	add	r3,r3,r3
20086f98:	18c7883a 	add	r3,r3,r3
20086f9c:	20c7883a 	add	r3,r4,r3
20086fa0:	20c0192e 	bgeu	r4,r3,20087008 <__any_on+0x84>
20086fa4:	18bfff17 	ldw	r2,-4(r3)
20086fa8:	18ffff04 	addi	r3,r3,-4
20086fac:	1000041e 	bne	r2,zero,20086fc0 <__any_on+0x3c>
20086fb0:	20c0142e 	bgeu	r4,r3,20087004 <__any_on+0x80>
20086fb4:	18ffff04 	addi	r3,r3,-4
20086fb8:	19400017 	ldw	r5,0(r3)
20086fbc:	283ffc26 	beq	r5,zero,20086fb0 <__flash_rwdata_start+0xffff5500>
20086fc0:	00800044 	movi	r2,1
20086fc4:	f800283a 	ret
20086fc8:	10c00a0e 	bge	r2,r3,20086ff4 <__any_on+0x70>
20086fcc:	1085883a 	add	r2,r2,r2
20086fd0:	1085883a 	add	r2,r2,r2
20086fd4:	294007cc 	andi	r5,r5,31
20086fd8:	2087883a 	add	r3,r4,r2
20086fdc:	283ff026 	beq	r5,zero,20086fa0 <__flash_rwdata_start+0xffff54f0>
20086fe0:	19800017 	ldw	r6,0(r3)
20086fe4:	3144d83a 	srl	r2,r6,r5
20086fe8:	114a983a 	sll	r5,r2,r5
20086fec:	29bff41e 	bne	r5,r6,20086fc0 <__flash_rwdata_start+0xffff5510>
20086ff0:	003feb06 	br	20086fa0 <__flash_rwdata_start+0xffff54f0>
20086ff4:	1085883a 	add	r2,r2,r2
20086ff8:	1085883a 	add	r2,r2,r2
20086ffc:	2087883a 	add	r3,r4,r2
20087000:	003fe706 	br	20086fa0 <__flash_rwdata_start+0xffff54f0>
20087004:	f800283a 	ret
20087008:	0005883a 	mov	r2,zero
2008700c:	f800283a 	ret

20087010 <_realloc_r>:
20087010:	defff604 	addi	sp,sp,-40
20087014:	dd000415 	stw	r20,16(sp)
20087018:	dc400115 	stw	r17,4(sp)
2008701c:	dfc00915 	stw	ra,36(sp)
20087020:	df000815 	stw	fp,32(sp)
20087024:	ddc00715 	stw	r23,28(sp)
20087028:	dd800615 	stw	r22,24(sp)
2008702c:	dd400515 	stw	r21,20(sp)
20087030:	dcc00315 	stw	r19,12(sp)
20087034:	dc800215 	stw	r18,8(sp)
20087038:	dc000015 	stw	r16,0(sp)
2008703c:	2829883a 	mov	r20,r5
20087040:	3023883a 	mov	r17,r6
20087044:	2800ad26 	beq	r5,zero,200872fc <_realloc_r+0x2ec>
20087048:	2025883a 	mov	r18,r4
2008704c:	008cfc80 	call	2008cfc8 <__malloc_lock>
20087050:	a0ffff17 	ldw	r3,-4(r20)
20087054:	043fff04 	movi	r16,-4
20087058:	890002c4 	addi	r4,r17,11
2008705c:	01c00584 	movi	r7,22
20087060:	a57ffe04 	addi	r21,r20,-8
20087064:	1c20703a 	and	r16,r3,r16
20087068:	39001d2e 	bgeu	r7,r4,200870e0 <_realloc_r+0xd0>
2008706c:	05bffe04 	movi	r22,-8
20087070:	25ac703a 	and	r22,r4,r22
20087074:	b00f883a 	mov	r7,r22
20087078:	b0006516 	blt	r22,zero,20087210 <_realloc_r+0x200>
2008707c:	b4406436 	bltu	r22,r17,20087210 <_realloc_r+0x200>
20087080:	81c01a0e 	bge	r16,r7,200870ec <_realloc_r+0xdc>
20087084:	07000034 	movhi	fp,0
20087088:	e7027404 	addi	fp,fp,2512
2008708c:	e1400217 	ldw	r5,8(fp)
20087090:	ac11883a 	add	r8,r21,r16
20087094:	2a006226 	beq	r5,r8,20087220 <_realloc_r+0x210>
20087098:	41800117 	ldw	r6,4(r8)
2008709c:	027fff84 	movi	r9,-2
200870a0:	3252703a 	and	r9,r6,r9
200870a4:	4253883a 	add	r9,r8,r9
200870a8:	49000117 	ldw	r4,4(r9)
200870ac:	2100004c 	andi	r4,r4,1
200870b0:	2000281e 	bne	r4,zero,20087154 <_realloc_r+0x144>
200870b4:	00bfff04 	movi	r2,-4
200870b8:	3084703a 	and	r2,r6,r2
200870bc:	1409883a 	add	r4,r2,r16
200870c0:	21c05e16 	blt	r4,r7,2008723c <_realloc_r+0x22c>
200870c4:	40800317 	ldw	r2,12(r8)
200870c8:	41400217 	ldw	r5,8(r8)
200870cc:	a023883a 	mov	r17,r20
200870d0:	2021883a 	mov	r16,r4
200870d4:	28800315 	stw	r2,12(r5)
200870d8:	11400215 	stw	r5,8(r2)
200870dc:	00000406 	br	200870f0 <_realloc_r+0xe0>
200870e0:	01c00404 	movi	r7,16
200870e4:	382d883a 	mov	r22,r7
200870e8:	003fe406 	br	2008707c <__flash_rwdata_start+0xffff55cc>
200870ec:	a023883a 	mov	r17,r20
200870f0:	858fc83a 	sub	r7,r16,r22
200870f4:	008003c4 	movi	r2,15
200870f8:	18c0004c 	andi	r3,r3,1
200870fc:	11c07236 	bltu	r2,r7,200872c8 <_realloc_r+0x2b8>
20087100:	1c06b03a 	or	r3,r3,r16
20087104:	a8c00115 	stw	r3,4(r21)
20087108:	ac21883a 	add	r16,r21,r16
2008710c:	80800117 	ldw	r2,4(r16)
20087110:	10800054 	ori	r2,r2,1
20087114:	80800115 	stw	r2,4(r16)
20087118:	9009883a 	mov	r4,r18
2008711c:	008cfe80 	call	2008cfe8 <__malloc_unlock>
20087120:	8805883a 	mov	r2,r17
20087124:	dfc00917 	ldw	ra,36(sp)
20087128:	df000817 	ldw	fp,32(sp)
2008712c:	ddc00717 	ldw	r23,28(sp)
20087130:	dd800617 	ldw	r22,24(sp)
20087134:	dd400517 	ldw	r21,20(sp)
20087138:	dd000417 	ldw	r20,16(sp)
2008713c:	dcc00317 	ldw	r19,12(sp)
20087140:	dc800217 	ldw	r18,8(sp)
20087144:	dc400117 	ldw	r17,4(sp)
20087148:	dc000017 	ldw	r16,0(sp)
2008714c:	dec00a04 	addi	sp,sp,40
20087150:	f800283a 	ret
20087154:	18c0004c 	andi	r3,r3,1
20087158:	1800081e 	bne	r3,zero,2008717c <_realloc_r+0x16c>
2008715c:	a4fffe17 	ldw	r19,-8(r20)
20087160:	00bfff04 	movi	r2,-4
20087164:	ace7c83a 	sub	r19,r21,r19
20087168:	98c00117 	ldw	r3,4(r19)
2008716c:	1886703a 	and	r3,r3,r2
20087170:	98000226 	beq	r19,zero,2008717c <_realloc_r+0x16c>
20087174:	1c2f883a 	add	r23,r3,r16
20087178:	b9c06d0e 	bge	r23,r7,20087330 <_realloc_r+0x320>
2008717c:	880b883a 	mov	r5,r17
20087180:	9009883a 	mov	r4,r18
20087184:	00854280 	call	20085428 <_malloc_r>
20087188:	1023883a 	mov	r17,r2
2008718c:	1000ef26 	beq	r2,zero,2008754c <_realloc_r+0x53c>
20087190:	a0ffff17 	ldw	r3,-4(r20)
20087194:	113ffe04 	addi	r4,r2,-8
20087198:	00bfff84 	movi	r2,-2
2008719c:	1884703a 	and	r2,r3,r2
200871a0:	a885883a 	add	r2,r21,r2
200871a4:	2080bf26 	beq	r4,r2,200874a4 <_realloc_r+0x494>
200871a8:	81bfff04 	addi	r6,r16,-4
200871ac:	00800904 	movi	r2,36
200871b0:	11808936 	bltu	r2,r6,200873d8 <_realloc_r+0x3c8>
200871b4:	00c004c4 	movi	r3,19
200871b8:	19806c2e 	bgeu	r3,r6,2008736c <_realloc_r+0x35c>
200871bc:	a0c00017 	ldw	r3,0(r20)
200871c0:	88c00015 	stw	r3,0(r17)
200871c4:	a0c00117 	ldw	r3,4(r20)
200871c8:	88c00115 	stw	r3,4(r17)
200871cc:	00c006c4 	movi	r3,27
200871d0:	1980ac36 	bltu	r3,r6,20087484 <_realloc_r+0x474>
200871d4:	88800204 	addi	r2,r17,8
200871d8:	a0c00204 	addi	r3,r20,8
200871dc:	19000017 	ldw	r4,0(r3)
200871e0:	11000015 	stw	r4,0(r2)
200871e4:	19000117 	ldw	r4,4(r3)
200871e8:	11000115 	stw	r4,4(r2)
200871ec:	18c00217 	ldw	r3,8(r3)
200871f0:	10c00215 	stw	r3,8(r2)
200871f4:	a00b883a 	mov	r5,r20
200871f8:	9009883a 	mov	r4,r18
200871fc:	00848580 	call	20084858 <_free_r>
20087200:	9009883a 	mov	r4,r18
20087204:	008cfe80 	call	2008cfe8 <__malloc_unlock>
20087208:	8805883a 	mov	r2,r17
2008720c:	003fc506 	br	20087124 <__flash_rwdata_start+0xffff5674>
20087210:	00800304 	movi	r2,12
20087214:	90800015 	stw	r2,0(r18)
20087218:	0005883a 	mov	r2,zero
2008721c:	003fc106 	br	20087124 <__flash_rwdata_start+0xffff5674>
20087220:	29800117 	ldw	r6,4(r5)
20087224:	00bfff04 	movi	r2,-4
20087228:	b1000404 	addi	r4,r22,16
2008722c:	3084703a 	and	r2,r6,r2
20087230:	140d883a 	add	r6,r2,r16
20087234:	31005b0e 	bge	r6,r4,200873a4 <_realloc_r+0x394>
20087238:	2811883a 	mov	r8,r5
2008723c:	18c0004c 	andi	r3,r3,1
20087240:	183fce1e 	bne	r3,zero,2008717c <__flash_rwdata_start+0xffff56cc>
20087244:	a4fffe17 	ldw	r19,-8(r20)
20087248:	00ffff04 	movi	r3,-4
2008724c:	ace7c83a 	sub	r19,r21,r19
20087250:	99000117 	ldw	r4,4(r19)
20087254:	20c6703a 	and	r3,r4,r3
20087258:	403fc526 	beq	r8,zero,20087170 <__flash_rwdata_start+0xffff56c0>
2008725c:	1c2f883a 	add	r23,r3,r16
20087260:	b8af883a 	add	r23,r23,r2
20087264:	41406026 	beq	r8,r5,200873e8 <_realloc_r+0x3d8>
20087268:	b9ffc116 	blt	r23,r7,20087170 <__flash_rwdata_start+0xffff56c0>
2008726c:	40c00217 	ldw	r3,8(r8)
20087270:	40800317 	ldw	r2,12(r8)
20087274:	81bfff04 	addi	r6,r16,-4
20087278:	01000904 	movi	r4,36
2008727c:	18800315 	stw	r2,12(r3)
20087280:	10c00215 	stw	r3,8(r2)
20087284:	99400217 	ldw	r5,8(r19)
20087288:	98c00317 	ldw	r3,12(r19)
2008728c:	9c400204 	addi	r17,r19,8
20087290:	28c00315 	stw	r3,12(r5)
20087294:	19400215 	stw	r5,8(r3)
20087298:	21802d36 	bltu	r4,r6,20087350 <_realloc_r+0x340>
2008729c:	008004c4 	movi	r2,19
200872a0:	1180352e 	bgeu	r2,r6,20087378 <_realloc_r+0x368>
200872a4:	a0800017 	ldw	r2,0(r20)
200872a8:	98800215 	stw	r2,8(r19)
200872ac:	a0800117 	ldw	r2,4(r20)
200872b0:	98800315 	stw	r2,12(r19)
200872b4:	008006c4 	movi	r2,27
200872b8:	11808036 	bltu	r2,r6,200874bc <_realloc_r+0x4ac>
200872bc:	98c00404 	addi	r3,r19,16
200872c0:	a5000204 	addi	r20,r20,8
200872c4:	00002d06 	br	2008737c <_realloc_r+0x36c>
200872c8:	1d86b03a 	or	r3,r3,r22
200872cc:	ad8b883a 	add	r5,r21,r22
200872d0:	a8c00115 	stw	r3,4(r21)
200872d4:	38800054 	ori	r2,r7,1
200872d8:	28800115 	stw	r2,4(r5)
200872dc:	29cf883a 	add	r7,r5,r7
200872e0:	38800117 	ldw	r2,4(r7)
200872e4:	9009883a 	mov	r4,r18
200872e8:	29400204 	addi	r5,r5,8
200872ec:	10800054 	ori	r2,r2,1
200872f0:	38800115 	stw	r2,4(r7)
200872f4:	00848580 	call	20084858 <_free_r>
200872f8:	003f8706 	br	20087118 <__flash_rwdata_start+0xffff5668>
200872fc:	300b883a 	mov	r5,r6
20087300:	dfc00917 	ldw	ra,36(sp)
20087304:	df000817 	ldw	fp,32(sp)
20087308:	ddc00717 	ldw	r23,28(sp)
2008730c:	dd800617 	ldw	r22,24(sp)
20087310:	dd400517 	ldw	r21,20(sp)
20087314:	dd000417 	ldw	r20,16(sp)
20087318:	dcc00317 	ldw	r19,12(sp)
2008731c:	dc800217 	ldw	r18,8(sp)
20087320:	dc400117 	ldw	r17,4(sp)
20087324:	dc000017 	ldw	r16,0(sp)
20087328:	dec00a04 	addi	sp,sp,40
2008732c:	00854281 	jmpi	20085428 <_malloc_r>
20087330:	98800317 	ldw	r2,12(r19)
20087334:	98c00217 	ldw	r3,8(r19)
20087338:	81bfff04 	addi	r6,r16,-4
2008733c:	01000904 	movi	r4,36
20087340:	18800315 	stw	r2,12(r3)
20087344:	10c00215 	stw	r3,8(r2)
20087348:	9c400204 	addi	r17,r19,8
2008734c:	21bfd32e 	bgeu	r4,r6,2008729c <__flash_rwdata_start+0xffff57ec>
20087350:	8809883a 	mov	r4,r17
20087354:	a00b883a 	mov	r5,r20
20087358:	0085df00 	call	20085df0 <memmove>
2008735c:	98c00117 	ldw	r3,4(r19)
20087360:	b821883a 	mov	r16,r23
20087364:	982b883a 	mov	r21,r19
20087368:	003f6106 	br	200870f0 <__flash_rwdata_start+0xffff5640>
2008736c:	8805883a 	mov	r2,r17
20087370:	a007883a 	mov	r3,r20
20087374:	003f9906 	br	200871dc <__flash_rwdata_start+0xffff572c>
20087378:	8807883a 	mov	r3,r17
2008737c:	a0800017 	ldw	r2,0(r20)
20087380:	b821883a 	mov	r16,r23
20087384:	982b883a 	mov	r21,r19
20087388:	18800015 	stw	r2,0(r3)
2008738c:	a0800117 	ldw	r2,4(r20)
20087390:	18800115 	stw	r2,4(r3)
20087394:	a0800217 	ldw	r2,8(r20)
20087398:	18800215 	stw	r2,8(r3)
2008739c:	98c00117 	ldw	r3,4(r19)
200873a0:	003f5306 	br	200870f0 <__flash_rwdata_start+0xffff5640>
200873a4:	adab883a 	add	r21,r21,r22
200873a8:	3585c83a 	sub	r2,r6,r22
200873ac:	e5400215 	stw	r21,8(fp)
200873b0:	10800054 	ori	r2,r2,1
200873b4:	a8800115 	stw	r2,4(r21)
200873b8:	a0bfff17 	ldw	r2,-4(r20)
200873bc:	9009883a 	mov	r4,r18
200873c0:	1080004c 	andi	r2,r2,1
200873c4:	b0acb03a 	or	r22,r22,r2
200873c8:	a5bfff15 	stw	r22,-4(r20)
200873cc:	008cfe80 	call	2008cfe8 <__malloc_unlock>
200873d0:	a005883a 	mov	r2,r20
200873d4:	003f5306 	br	20087124 <__flash_rwdata_start+0xffff5674>
200873d8:	8809883a 	mov	r4,r17
200873dc:	a00b883a 	mov	r5,r20
200873e0:	0085df00 	call	20085df0 <memmove>
200873e4:	003f8306 	br	200871f4 <__flash_rwdata_start+0xffff5744>
200873e8:	b0800404 	addi	r2,r22,16
200873ec:	b8bf6016 	blt	r23,r2,20087170 <__flash_rwdata_start+0xffff56c0>
200873f0:	98800317 	ldw	r2,12(r19)
200873f4:	98c00217 	ldw	r3,8(r19)
200873f8:	81bfff04 	addi	r6,r16,-4
200873fc:	01000904 	movi	r4,36
20087400:	18800315 	stw	r2,12(r3)
20087404:	10c00215 	stw	r3,8(r2)
20087408:	9c400204 	addi	r17,r19,8
2008740c:	21804336 	bltu	r4,r6,2008751c <_realloc_r+0x50c>
20087410:	008004c4 	movi	r2,19
20087414:	11803f2e 	bgeu	r2,r6,20087514 <_realloc_r+0x504>
20087418:	a0800017 	ldw	r2,0(r20)
2008741c:	98800215 	stw	r2,8(r19)
20087420:	a0800117 	ldw	r2,4(r20)
20087424:	98800315 	stw	r2,12(r19)
20087428:	008006c4 	movi	r2,27
2008742c:	11803f36 	bltu	r2,r6,2008752c <_realloc_r+0x51c>
20087430:	98800404 	addi	r2,r19,16
20087434:	a5000204 	addi	r20,r20,8
20087438:	a0c00017 	ldw	r3,0(r20)
2008743c:	10c00015 	stw	r3,0(r2)
20087440:	a0c00117 	ldw	r3,4(r20)
20087444:	10c00115 	stw	r3,4(r2)
20087448:	a0c00217 	ldw	r3,8(r20)
2008744c:	10c00215 	stw	r3,8(r2)
20087450:	9d87883a 	add	r3,r19,r22
20087454:	bd85c83a 	sub	r2,r23,r22
20087458:	e0c00215 	stw	r3,8(fp)
2008745c:	10800054 	ori	r2,r2,1
20087460:	18800115 	stw	r2,4(r3)
20087464:	98800117 	ldw	r2,4(r19)
20087468:	9009883a 	mov	r4,r18
2008746c:	1080004c 	andi	r2,r2,1
20087470:	b0acb03a 	or	r22,r22,r2
20087474:	9d800115 	stw	r22,4(r19)
20087478:	008cfe80 	call	2008cfe8 <__malloc_unlock>
2008747c:	8805883a 	mov	r2,r17
20087480:	003f2806 	br	20087124 <__flash_rwdata_start+0xffff5674>
20087484:	a0c00217 	ldw	r3,8(r20)
20087488:	88c00215 	stw	r3,8(r17)
2008748c:	a0c00317 	ldw	r3,12(r20)
20087490:	88c00315 	stw	r3,12(r17)
20087494:	30801126 	beq	r6,r2,200874dc <_realloc_r+0x4cc>
20087498:	88800404 	addi	r2,r17,16
2008749c:	a0c00404 	addi	r3,r20,16
200874a0:	003f4e06 	br	200871dc <__flash_rwdata_start+0xffff572c>
200874a4:	893fff17 	ldw	r4,-4(r17)
200874a8:	00bfff04 	movi	r2,-4
200874ac:	a023883a 	mov	r17,r20
200874b0:	2084703a 	and	r2,r4,r2
200874b4:	80a1883a 	add	r16,r16,r2
200874b8:	003f0d06 	br	200870f0 <__flash_rwdata_start+0xffff5640>
200874bc:	a0800217 	ldw	r2,8(r20)
200874c0:	98800415 	stw	r2,16(r19)
200874c4:	a0800317 	ldw	r2,12(r20)
200874c8:	98800515 	stw	r2,20(r19)
200874cc:	31000a26 	beq	r6,r4,200874f8 <_realloc_r+0x4e8>
200874d0:	98c00604 	addi	r3,r19,24
200874d4:	a5000404 	addi	r20,r20,16
200874d8:	003fa806 	br	2008737c <__flash_rwdata_start+0xffff58cc>
200874dc:	a1000417 	ldw	r4,16(r20)
200874e0:	88800604 	addi	r2,r17,24
200874e4:	a0c00604 	addi	r3,r20,24
200874e8:	89000415 	stw	r4,16(r17)
200874ec:	a1000517 	ldw	r4,20(r20)
200874f0:	89000515 	stw	r4,20(r17)
200874f4:	003f3906 	br	200871dc <__flash_rwdata_start+0xffff572c>
200874f8:	a0800417 	ldw	r2,16(r20)
200874fc:	a5000604 	addi	r20,r20,24
20087500:	98c00804 	addi	r3,r19,32
20087504:	98800615 	stw	r2,24(r19)
20087508:	a0bfff17 	ldw	r2,-4(r20)
2008750c:	98800715 	stw	r2,28(r19)
20087510:	003f9a06 	br	2008737c <__flash_rwdata_start+0xffff58cc>
20087514:	8805883a 	mov	r2,r17
20087518:	003fc706 	br	20087438 <__flash_rwdata_start+0xffff5988>
2008751c:	8809883a 	mov	r4,r17
20087520:	a00b883a 	mov	r5,r20
20087524:	0085df00 	call	20085df0 <memmove>
20087528:	003fc906 	br	20087450 <__flash_rwdata_start+0xffff59a0>
2008752c:	a0800217 	ldw	r2,8(r20)
20087530:	98800415 	stw	r2,16(r19)
20087534:	a0800317 	ldw	r2,12(r20)
20087538:	98800515 	stw	r2,20(r19)
2008753c:	31000726 	beq	r6,r4,2008755c <_realloc_r+0x54c>
20087540:	98800604 	addi	r2,r19,24
20087544:	a5000404 	addi	r20,r20,16
20087548:	003fbb06 	br	20087438 <__flash_rwdata_start+0xffff5988>
2008754c:	9009883a 	mov	r4,r18
20087550:	008cfe80 	call	2008cfe8 <__malloc_unlock>
20087554:	0005883a 	mov	r2,zero
20087558:	003ef206 	br	20087124 <__flash_rwdata_start+0xffff5674>
2008755c:	a0c00417 	ldw	r3,16(r20)
20087560:	a5000604 	addi	r20,r20,24
20087564:	98800804 	addi	r2,r19,32
20087568:	98c00615 	stw	r3,24(r19)
2008756c:	a0ffff17 	ldw	r3,-4(r20)
20087570:	98c00715 	stw	r3,28(r19)
20087574:	003fb006 	br	20087438 <__flash_rwdata_start+0xffff5988>

20087578 <__fpclassifyd>:
20087578:	00a00034 	movhi	r2,32768
2008757c:	10bfffc4 	addi	r2,r2,-1
20087580:	2884703a 	and	r2,r5,r2
20087584:	10000726 	beq	r2,zero,200875a4 <__fpclassifyd+0x2c>
20087588:	00fffc34 	movhi	r3,65520
2008758c:	019ff834 	movhi	r6,32736
20087590:	28c7883a 	add	r3,r5,r3
20087594:	31bfffc4 	addi	r6,r6,-1
20087598:	30c00536 	bltu	r6,r3,200875b0 <__fpclassifyd+0x38>
2008759c:	00800104 	movi	r2,4
200875a0:	f800283a 	ret
200875a4:	2000021e 	bne	r4,zero,200875b0 <__fpclassifyd+0x38>
200875a8:	00800084 	movi	r2,2
200875ac:	f800283a 	ret
200875b0:	00dffc34 	movhi	r3,32752
200875b4:	019ff834 	movhi	r6,32736
200875b8:	28cb883a 	add	r5,r5,r3
200875bc:	31bfffc4 	addi	r6,r6,-1
200875c0:	317ff62e 	bgeu	r6,r5,2008759c <__flash_rwdata_start+0xffff5aec>
200875c4:	01400434 	movhi	r5,16
200875c8:	297fffc4 	addi	r5,r5,-1
200875cc:	28800236 	bltu	r5,r2,200875d8 <__fpclassifyd+0x60>
200875d0:	008000c4 	movi	r2,3
200875d4:	f800283a 	ret
200875d8:	10c00226 	beq	r2,r3,200875e4 <__fpclassifyd+0x6c>
200875dc:	0005883a 	mov	r2,zero
200875e0:	f800283a 	ret
200875e4:	2005003a 	cmpeq	r2,r4,zero
200875e8:	f800283a 	ret

200875ec <_sbrk_r>:
200875ec:	defffd04 	addi	sp,sp,-12
200875f0:	dc000015 	stw	r16,0(sp)
200875f4:	04000034 	movhi	r16,0
200875f8:	dc400115 	stw	r17,4(sp)
200875fc:	84082904 	addi	r16,r16,8356
20087600:	2023883a 	mov	r17,r4
20087604:	2809883a 	mov	r4,r5
20087608:	dfc00215 	stw	ra,8(sp)
2008760c:	80000015 	stw	zero,0(r16)
20087610:	008d1b40 	call	2008d1b4 <sbrk>
20087614:	00ffffc4 	movi	r3,-1
20087618:	10c00526 	beq	r2,r3,20087630 <_sbrk_r+0x44>
2008761c:	dfc00217 	ldw	ra,8(sp)
20087620:	dc400117 	ldw	r17,4(sp)
20087624:	dc000017 	ldw	r16,0(sp)
20087628:	dec00304 	addi	sp,sp,12
2008762c:	f800283a 	ret
20087630:	80c00017 	ldw	r3,0(r16)
20087634:	183ff926 	beq	r3,zero,2008761c <__flash_rwdata_start+0xffff5b6c>
20087638:	88c00015 	stw	r3,0(r17)
2008763c:	003ff706 	br	2008761c <__flash_rwdata_start+0xffff5b6c>

20087640 <__sread>:
20087640:	defffe04 	addi	sp,sp,-8
20087644:	dc000015 	stw	r16,0(sp)
20087648:	2821883a 	mov	r16,r5
2008764c:	2940038f 	ldh	r5,14(r5)
20087650:	dfc00115 	stw	ra,4(sp)
20087654:	00892440 	call	20089244 <_read_r>
20087658:	10000716 	blt	r2,zero,20087678 <__sread+0x38>
2008765c:	80c01417 	ldw	r3,80(r16)
20087660:	1887883a 	add	r3,r3,r2
20087664:	80c01415 	stw	r3,80(r16)
20087668:	dfc00117 	ldw	ra,4(sp)
2008766c:	dc000017 	ldw	r16,0(sp)
20087670:	dec00204 	addi	sp,sp,8
20087674:	f800283a 	ret
20087678:	80c0030b 	ldhu	r3,12(r16)
2008767c:	18fbffcc 	andi	r3,r3,61439
20087680:	80c0030d 	sth	r3,12(r16)
20087684:	dfc00117 	ldw	ra,4(sp)
20087688:	dc000017 	ldw	r16,0(sp)
2008768c:	dec00204 	addi	sp,sp,8
20087690:	f800283a 	ret

20087694 <__seofread>:
20087694:	0005883a 	mov	r2,zero
20087698:	f800283a 	ret

2008769c <__swrite>:
2008769c:	2880030b 	ldhu	r2,12(r5)
200876a0:	defffb04 	addi	sp,sp,-20
200876a4:	dcc00315 	stw	r19,12(sp)
200876a8:	dc800215 	stw	r18,8(sp)
200876ac:	dc400115 	stw	r17,4(sp)
200876b0:	dc000015 	stw	r16,0(sp)
200876b4:	dfc00415 	stw	ra,16(sp)
200876b8:	10c0400c 	andi	r3,r2,256
200876bc:	2821883a 	mov	r16,r5
200876c0:	2027883a 	mov	r19,r4
200876c4:	3025883a 	mov	r18,r6
200876c8:	3823883a 	mov	r17,r7
200876cc:	18000526 	beq	r3,zero,200876e4 <__swrite+0x48>
200876d0:	2940038f 	ldh	r5,14(r5)
200876d4:	000d883a 	mov	r6,zero
200876d8:	01c00084 	movi	r7,2
200876dc:	00891e80 	call	200891e8 <_lseek_r>
200876e0:	8080030b 	ldhu	r2,12(r16)
200876e4:	8140038f 	ldh	r5,14(r16)
200876e8:	10bbffcc 	andi	r2,r2,61439
200876ec:	9809883a 	mov	r4,r19
200876f0:	900d883a 	mov	r6,r18
200876f4:	880f883a 	mov	r7,r17
200876f8:	8080030d 	sth	r2,12(r16)
200876fc:	dfc00417 	ldw	ra,16(sp)
20087700:	dcc00317 	ldw	r19,12(sp)
20087704:	dc800217 	ldw	r18,8(sp)
20087708:	dc400117 	ldw	r17,4(sp)
2008770c:	dc000017 	ldw	r16,0(sp)
20087710:	dec00504 	addi	sp,sp,20
20087714:	0088ce41 	jmpi	20088ce4 <_write_r>

20087718 <__sseek>:
20087718:	defffe04 	addi	sp,sp,-8
2008771c:	dc000015 	stw	r16,0(sp)
20087720:	2821883a 	mov	r16,r5
20087724:	2940038f 	ldh	r5,14(r5)
20087728:	dfc00115 	stw	ra,4(sp)
2008772c:	00891e80 	call	200891e8 <_lseek_r>
20087730:	00ffffc4 	movi	r3,-1
20087734:	10c00826 	beq	r2,r3,20087758 <__sseek+0x40>
20087738:	80c0030b 	ldhu	r3,12(r16)
2008773c:	80801415 	stw	r2,80(r16)
20087740:	18c40014 	ori	r3,r3,4096
20087744:	80c0030d 	sth	r3,12(r16)
20087748:	dfc00117 	ldw	ra,4(sp)
2008774c:	dc000017 	ldw	r16,0(sp)
20087750:	dec00204 	addi	sp,sp,8
20087754:	f800283a 	ret
20087758:	80c0030b 	ldhu	r3,12(r16)
2008775c:	18fbffcc 	andi	r3,r3,61439
20087760:	80c0030d 	sth	r3,12(r16)
20087764:	dfc00117 	ldw	ra,4(sp)
20087768:	dc000017 	ldw	r16,0(sp)
2008776c:	dec00204 	addi	sp,sp,8
20087770:	f800283a 	ret

20087774 <__sclose>:
20087774:	2940038f 	ldh	r5,14(r5)
20087778:	0088d401 	jmpi	20088d40 <_close_r>

2008777c <strcmp>:
2008777c:	2144b03a 	or	r2,r4,r5
20087780:	108000cc 	andi	r2,r2,3
20087784:	1000171e 	bne	r2,zero,200877e4 <strcmp+0x68>
20087788:	20800017 	ldw	r2,0(r4)
2008778c:	28c00017 	ldw	r3,0(r5)
20087790:	10c0141e 	bne	r2,r3,200877e4 <strcmp+0x68>
20087794:	027fbff4 	movhi	r9,65279
20087798:	4a7fbfc4 	addi	r9,r9,-257
2008779c:	0086303a 	nor	r3,zero,r2
200877a0:	02202074 	movhi	r8,32897
200877a4:	1245883a 	add	r2,r2,r9
200877a8:	42202004 	addi	r8,r8,-32640
200877ac:	10c4703a 	and	r2,r2,r3
200877b0:	1204703a 	and	r2,r2,r8
200877b4:	10000226 	beq	r2,zero,200877c0 <strcmp+0x44>
200877b8:	00001706 	br	20087818 <strcmp+0x9c>
200877bc:	1000161e 	bne	r2,zero,20087818 <strcmp+0x9c>
200877c0:	21000104 	addi	r4,r4,4
200877c4:	20c00017 	ldw	r3,0(r4)
200877c8:	29400104 	addi	r5,r5,4
200877cc:	29800017 	ldw	r6,0(r5)
200877d0:	1a4f883a 	add	r7,r3,r9
200877d4:	00c4303a 	nor	r2,zero,r3
200877d8:	3884703a 	and	r2,r7,r2
200877dc:	1204703a 	and	r2,r2,r8
200877e0:	19bff626 	beq	r3,r6,200877bc <__flash_rwdata_start+0xffff5d0c>
200877e4:	20800007 	ldb	r2,0(r4)
200877e8:	1000051e 	bne	r2,zero,20087800 <strcmp+0x84>
200877ec:	00000606 	br	20087808 <strcmp+0x8c>
200877f0:	21000044 	addi	r4,r4,1
200877f4:	20800007 	ldb	r2,0(r4)
200877f8:	29400044 	addi	r5,r5,1
200877fc:	10000226 	beq	r2,zero,20087808 <strcmp+0x8c>
20087800:	28c00007 	ldb	r3,0(r5)
20087804:	10fffa26 	beq	r2,r3,200877f0 <__flash_rwdata_start+0xffff5d40>
20087808:	20800003 	ldbu	r2,0(r4)
2008780c:	28c00003 	ldbu	r3,0(r5)
20087810:	10c5c83a 	sub	r2,r2,r3
20087814:	f800283a 	ret
20087818:	0005883a 	mov	r2,zero
2008781c:	f800283a 	ret

20087820 <__sprint_r.part.0>:
20087820:	28801917 	ldw	r2,100(r5)
20087824:	defff604 	addi	sp,sp,-40
20087828:	dd400515 	stw	r21,20(sp)
2008782c:	dcc00315 	stw	r19,12(sp)
20087830:	dfc00915 	stw	ra,36(sp)
20087834:	df000815 	stw	fp,32(sp)
20087838:	ddc00715 	stw	r23,28(sp)
2008783c:	dd800615 	stw	r22,24(sp)
20087840:	dd000415 	stw	r20,16(sp)
20087844:	dc800215 	stw	r18,8(sp)
20087848:	dc400115 	stw	r17,4(sp)
2008784c:	dc000015 	stw	r16,0(sp)
20087850:	1088000c 	andi	r2,r2,8192
20087854:	2827883a 	mov	r19,r5
20087858:	302b883a 	mov	r21,r6
2008785c:	10002d26 	beq	r2,zero,20087914 <__sprint_r.part.0+0xf4>
20087860:	30800217 	ldw	r2,8(r6)
20087864:	35800017 	ldw	r22,0(r6)
20087868:	10002826 	beq	r2,zero,2008790c <__sprint_r.part.0+0xec>
2008786c:	2029883a 	mov	r20,r4
20087870:	b5c00104 	addi	r23,r22,4
20087874:	04bfffc4 	movi	r18,-1
20087878:	bc400017 	ldw	r17,0(r23)
2008787c:	b4000017 	ldw	r16,0(r22)
20087880:	0039883a 	mov	fp,zero
20087884:	8822d0ba 	srli	r17,r17,2
20087888:	04400316 	blt	zero,r17,20087898 <__sprint_r.part.0+0x78>
2008788c:	00001806 	br	200878f0 <__sprint_r.part.0+0xd0>
20087890:	84000104 	addi	r16,r16,4
20087894:	8f001526 	beq	r17,fp,200878ec <__sprint_r.part.0+0xcc>
20087898:	81400017 	ldw	r5,0(r16)
2008789c:	a009883a 	mov	r4,r20
200878a0:	980d883a 	mov	r6,r19
200878a4:	0088f5c0 	call	20088f5c <_fputwc_r>
200878a8:	e7000044 	addi	fp,fp,1
200878ac:	14bff81e 	bne	r2,r18,20087890 <__flash_rwdata_start+0xffff5de0>
200878b0:	9005883a 	mov	r2,r18
200878b4:	a8000215 	stw	zero,8(r21)
200878b8:	a8000115 	stw	zero,4(r21)
200878bc:	dfc00917 	ldw	ra,36(sp)
200878c0:	df000817 	ldw	fp,32(sp)
200878c4:	ddc00717 	ldw	r23,28(sp)
200878c8:	dd800617 	ldw	r22,24(sp)
200878cc:	dd400517 	ldw	r21,20(sp)
200878d0:	dd000417 	ldw	r20,16(sp)
200878d4:	dcc00317 	ldw	r19,12(sp)
200878d8:	dc800217 	ldw	r18,8(sp)
200878dc:	dc400117 	ldw	r17,4(sp)
200878e0:	dc000017 	ldw	r16,0(sp)
200878e4:	dec00a04 	addi	sp,sp,40
200878e8:	f800283a 	ret
200878ec:	a8800217 	ldw	r2,8(r21)
200878f0:	8c63883a 	add	r17,r17,r17
200878f4:	8c63883a 	add	r17,r17,r17
200878f8:	1445c83a 	sub	r2,r2,r17
200878fc:	a8800215 	stw	r2,8(r21)
20087900:	b5800204 	addi	r22,r22,8
20087904:	bdc00204 	addi	r23,r23,8
20087908:	103fdb1e 	bne	r2,zero,20087878 <__flash_rwdata_start+0xffff5dc8>
2008790c:	0005883a 	mov	r2,zero
20087910:	003fe806 	br	200878b4 <__flash_rwdata_start+0xffff5e04>
20087914:	0084b480 	call	20084b48 <__sfvwrite_r>
20087918:	003fe606 	br	200878b4 <__flash_rwdata_start+0xffff5e04>

2008791c <__sprint_r>:
2008791c:	30c00217 	ldw	r3,8(r6)
20087920:	18000126 	beq	r3,zero,20087928 <__sprint_r+0xc>
20087924:	00878201 	jmpi	20087820 <__sprint_r.part.0>
20087928:	30000115 	stw	zero,4(r6)
2008792c:	0005883a 	mov	r2,zero
20087930:	f800283a 	ret

20087934 <___vfiprintf_internal_r>:
20087934:	deffca04 	addi	sp,sp,-216
20087938:	dd803215 	stw	r22,200(sp)
2008793c:	dd403115 	stw	r21,196(sp)
20087940:	dfc03515 	stw	ra,212(sp)
20087944:	df003415 	stw	fp,208(sp)
20087948:	ddc03315 	stw	r23,204(sp)
2008794c:	dd003015 	stw	r20,192(sp)
20087950:	dcc02f15 	stw	r19,188(sp)
20087954:	dc802e15 	stw	r18,184(sp)
20087958:	dc402d15 	stw	r17,180(sp)
2008795c:	dc002c15 	stw	r16,176(sp)
20087960:	d9002015 	stw	r4,128(sp)
20087964:	d9c02215 	stw	r7,136(sp)
20087968:	282b883a 	mov	r21,r5
2008796c:	302d883a 	mov	r22,r6
20087970:	20000226 	beq	r4,zero,2008797c <___vfiprintf_internal_r+0x48>
20087974:	20800e17 	ldw	r2,56(r4)
20087978:	1001b126 	beq	r2,zero,20088040 <___vfiprintf_internal_r+0x70c>
2008797c:	a880030b 	ldhu	r2,12(r21)
20087980:	10c8000c 	andi	r3,r2,8192
20087984:	1800061e 	bne	r3,zero,200879a0 <___vfiprintf_internal_r+0x6c>
20087988:	a9001917 	ldw	r4,100(r21)
2008798c:	00f7ffc4 	movi	r3,-8193
20087990:	10880014 	ori	r2,r2,8192
20087994:	20c6703a 	and	r3,r4,r3
20087998:	a880030d 	sth	r2,12(r21)
2008799c:	a8c01915 	stw	r3,100(r21)
200879a0:	10c0020c 	andi	r3,r2,8
200879a4:	18018926 	beq	r3,zero,20087fcc <___vfiprintf_internal_r+0x698>
200879a8:	a8c00417 	ldw	r3,16(r21)
200879ac:	18018726 	beq	r3,zero,20087fcc <___vfiprintf_internal_r+0x698>
200879b0:	1080068c 	andi	r2,r2,26
200879b4:	00c00284 	movi	r3,10
200879b8:	10c18c26 	beq	r2,r3,20087fec <___vfiprintf_internal_r+0x6b8>
200879bc:	d8801a04 	addi	r2,sp,104
200879c0:	d8c019c4 	addi	r3,sp,103
200879c4:	07000034 	movhi	fp,0
200879c8:	05c00034 	movhi	r23,0
200879cc:	10c9c83a 	sub	r4,r2,r3
200879d0:	e7007704 	addi	fp,fp,476
200879d4:	bdc07304 	addi	r23,r23,460
200879d8:	d8801e15 	stw	r2,120(sp)
200879dc:	d8c01f15 	stw	r3,124(sp)
200879e0:	dec01a15 	stw	sp,104(sp)
200879e4:	d8001c15 	stw	zero,112(sp)
200879e8:	d8001b15 	stw	zero,108(sp)
200879ec:	d8002615 	stw	zero,152(sp)
200879f0:	d8002315 	stw	zero,140(sp)
200879f4:	d9002715 	stw	r4,156(sp)
200879f8:	d811883a 	mov	r8,sp
200879fc:	dd402115 	stw	r21,132(sp)
20087a00:	b021883a 	mov	r16,r22
20087a04:	80800007 	ldb	r2,0(r16)
20087a08:	10037226 	beq	r2,zero,200887d4 <___vfiprintf_internal_r+0xea0>
20087a0c:	01000944 	movi	r4,37
20087a10:	11037026 	beq	r2,r4,200887d4 <___vfiprintf_internal_r+0xea0>
20087a14:	8005883a 	mov	r2,r16
20087a18:	00000106 	br	20087a20 <___vfiprintf_internal_r+0xec>
20087a1c:	19000326 	beq	r3,r4,20087a2c <___vfiprintf_internal_r+0xf8>
20087a20:	10800044 	addi	r2,r2,1
20087a24:	10c00007 	ldb	r3,0(r2)
20087a28:	183ffc1e 	bne	r3,zero,20087a1c <__flash_rwdata_start+0xffff5f6c>
20087a2c:	1425c83a 	sub	r18,r2,r16
20087a30:	1023883a 	mov	r17,r2
20087a34:	90001026 	beq	r18,zero,20087a78 <___vfiprintf_internal_r+0x144>
20087a38:	d8c01c17 	ldw	r3,112(sp)
20087a3c:	d8801b17 	ldw	r2,108(sp)
20087a40:	44000015 	stw	r16,0(r8)
20087a44:	90c7883a 	add	r3,r18,r3
20087a48:	10800044 	addi	r2,r2,1
20087a4c:	44800115 	stw	r18,4(r8)
20087a50:	d8c01c15 	stw	r3,112(sp)
20087a54:	d8801b15 	stw	r2,108(sp)
20087a58:	010001c4 	movi	r4,7
20087a5c:	2080750e 	bge	r4,r2,20087c34 <___vfiprintf_internal_r+0x300>
20087a60:	18036f1e 	bne	r3,zero,20088820 <___vfiprintf_internal_r+0xeec>
20087a64:	d8802317 	ldw	r2,140(sp)
20087a68:	d8001b15 	stw	zero,108(sp)
20087a6c:	d811883a 	mov	r8,sp
20087a70:	1485883a 	add	r2,r2,r18
20087a74:	d8802315 	stw	r2,140(sp)
20087a78:	88800007 	ldb	r2,0(r17)
20087a7c:	10041026 	beq	r2,zero,20088ac0 <___vfiprintf_internal_r+0x118c>
20087a80:	88c00047 	ldb	r3,1(r17)
20087a84:	88800044 	addi	r2,r17,1
20087a88:	d8001d85 	stb	zero,118(sp)
20087a8c:	000f883a 	mov	r7,zero
20087a90:	027fffc4 	movi	r9,-1
20087a94:	0025883a 	mov	r18,zero
20087a98:	002b883a 	mov	r21,zero
20087a9c:	01401604 	movi	r5,88
20087aa0:	01800244 	movi	r6,9
20087aa4:	03400a84 	movi	r13,42
20087aa8:	03001b04 	movi	r12,108
20087aac:	14000044 	addi	r16,r2,1
20087ab0:	18bff804 	addi	r2,r3,-32
20087ab4:	28825536 	bltu	r5,r2,2008840c <___vfiprintf_internal_r+0xad8>
20087ab8:	100490ba 	slli	r2,r2,2
20087abc:	01080234 	movhi	r4,8200
20087ac0:	211eb404 	addi	r4,r4,31440
20087ac4:	1105883a 	add	r2,r2,r4
20087ac8:	10800017 	ldw	r2,0(r2)
20087acc:	1000683a 	jmp	r2
20087ad0:	200881d0 	cmplti	zero,r4,8711
20087ad4:	2008840c 	andi	zero,r4,8720
20087ad8:	2008840c 	andi	zero,r4,8720
20087adc:	200881f0 	cmpltui	zero,r4,8711
20087ae0:	2008840c 	andi	zero,r4,8720
20087ae4:	2008840c 	andi	zero,r4,8720
20087ae8:	2008840c 	andi	zero,r4,8720
20087aec:	2008840c 	andi	zero,r4,8720
20087af0:	2008840c 	andi	zero,r4,8720
20087af4:	2008840c 	andi	zero,r4,8720
20087af8:	20088200 	call	22008820 <__flash_rwdata_start+0x1f76d70>
20087afc:	20088220 	cmpeqi	zero,r4,8712
20087b00:	2008840c 	andi	zero,r4,8720
20087b04:	20088048 	cmpgei	zero,r4,8705
20087b08:	20088134 	orhi	zero,r4,8708
20087b0c:	2008840c 	andi	zero,r4,8720
20087b10:	200880b4 	orhi	zero,r4,8706
20087b14:	200880c4 	addi	zero,r4,8707
20087b18:	200880c4 	addi	zero,r4,8707
20087b1c:	200880c4 	addi	zero,r4,8707
20087b20:	200880c4 	addi	zero,r4,8707
20087b24:	200880c4 	addi	zero,r4,8707
20087b28:	200880c4 	addi	zero,r4,8707
20087b2c:	200880c4 	addi	zero,r4,8707
20087b30:	200880c4 	addi	zero,r4,8707
20087b34:	200880c4 	addi	zero,r4,8707
20087b38:	2008840c 	andi	zero,r4,8720
20087b3c:	2008840c 	andi	zero,r4,8720
20087b40:	2008840c 	andi	zero,r4,8720
20087b44:	2008840c 	andi	zero,r4,8720
20087b48:	2008840c 	andi	zero,r4,8720
20087b4c:	2008840c 	andi	zero,r4,8720
20087b50:	2008840c 	andi	zero,r4,8720
20087b54:	2008840c 	andi	zero,r4,8720
20087b58:	2008840c 	andi	zero,r4,8720
20087b5c:	2008840c 	andi	zero,r4,8720
20087b60:	200880f0 	cmpltui	zero,r4,8707
20087b64:	2008840c 	andi	zero,r4,8720
20087b68:	2008840c 	andi	zero,r4,8720
20087b6c:	2008840c 	andi	zero,r4,8720
20087b70:	2008840c 	andi	zero,r4,8720
20087b74:	2008840c 	andi	zero,r4,8720
20087b78:	2008840c 	andi	zero,r4,8720
20087b7c:	2008840c 	andi	zero,r4,8720
20087b80:	2008840c 	andi	zero,r4,8720
20087b84:	2008840c 	andi	zero,r4,8720
20087b88:	2008840c 	andi	zero,r4,8720
20087b8c:	20087c7c 	xorhi	zero,r4,8689
20087b90:	2008840c 	andi	zero,r4,8720
20087b94:	2008840c 	andi	zero,r4,8720
20087b98:	2008840c 	andi	zero,r4,8720
20087b9c:	2008840c 	andi	zero,r4,8720
20087ba0:	2008840c 	andi	zero,r4,8720
20087ba4:	20087c48 	cmpgei	zero,r4,8689
20087ba8:	2008840c 	andi	zero,r4,8720
20087bac:	2008840c 	andi	zero,r4,8720
20087bb0:	20088290 	cmplti	zero,r4,8714
20087bb4:	2008840c 	andi	zero,r4,8720
20087bb8:	2008840c 	andi	zero,r4,8720
20087bbc:	2008840c 	andi	zero,r4,8720
20087bc0:	2008840c 	andi	zero,r4,8720
20087bc4:	2008840c 	andi	zero,r4,8720
20087bc8:	2008840c 	andi	zero,r4,8720
20087bcc:	2008840c 	andi	zero,r4,8720
20087bd0:	2008840c 	andi	zero,r4,8720
20087bd4:	2008840c 	andi	zero,r4,8720
20087bd8:	2008840c 	andi	zero,r4,8720
20087bdc:	20088230 	cmpltui	zero,r4,8712
20087be0:	2008825c 	xori	zero,r4,8713
20087be4:	2008840c 	andi	zero,r4,8720
20087be8:	2008840c 	andi	zero,r4,8720
20087bec:	2008840c 	andi	zero,r4,8720
20087bf0:	20088338 	rdprs	zero,r4,8716
20087bf4:	2008825c 	xori	zero,r4,8713
20087bf8:	2008840c 	andi	zero,r4,8720
20087bfc:	2008840c 	andi	zero,r4,8720
20087c00:	20088348 	cmpgei	zero,r4,8717
20087c04:	2008840c 	andi	zero,r4,8720
20087c08:	20088174 	orhi	zero,r4,8709
20087c0c:	20087c80 	call	220087c8 <__flash_rwdata_start+0x1f76d18>
20087c10:	2008835c 	xori	zero,r4,8717
20087c14:	2008839c 	xori	zero,r4,8718
20087c18:	2008840c 	andi	zero,r4,8720
20087c1c:	200882e4 	muli	zero,r4,8715
20087c20:	2008840c 	andi	zero,r4,8720
20087c24:	20087c4c 	andi	zero,r4,8689
20087c28:	2008840c 	andi	zero,r4,8720
20087c2c:	2008840c 	andi	zero,r4,8720
20087c30:	200883ac 	andhi	zero,r4,8718
20087c34:	42000204 	addi	r8,r8,8
20087c38:	d8802317 	ldw	r2,140(sp)
20087c3c:	1485883a 	add	r2,r2,r18
20087c40:	d8802315 	stw	r2,140(sp)
20087c44:	003f8c06 	br	20087a78 <__flash_rwdata_start+0xffff5fc8>
20087c48:	ad400414 	ori	r21,r21,16
20087c4c:	a880080c 	andi	r2,r21,32
20087c50:	1001e61e 	bne	r2,zero,200883ec <___vfiprintf_internal_r+0xab8>
20087c54:	a880040c 	andi	r2,r21,16
20087c58:	10034726 	beq	r2,zero,20088978 <___vfiprintf_internal_r+0x1044>
20087c5c:	d8802217 	ldw	r2,136(sp)
20087c60:	001b883a 	mov	r13,zero
20087c64:	15800017 	ldw	r22,0(r2)
20087c68:	10800104 	addi	r2,r2,4
20087c6c:	d8802215 	stw	r2,136(sp)
20087c70:	b009883a 	mov	r4,r22
20087c74:	00800044 	movi	r2,1
20087c78:	00000c06 	br	20087cac <___vfiprintf_internal_r+0x378>
20087c7c:	ad400414 	ori	r21,r21,16
20087c80:	a880080c 	andi	r2,r21,32
20087c84:	1001491e 	bne	r2,zero,200881ac <___vfiprintf_internal_r+0x878>
20087c88:	a880040c 	andi	r2,r21,16
20087c8c:	10032d26 	beq	r2,zero,20088944 <___vfiprintf_internal_r+0x1010>
20087c90:	d9002217 	ldw	r4,136(sp)
20087c94:	001b883a 	mov	r13,zero
20087c98:	0005883a 	mov	r2,zero
20087c9c:	25800017 	ldw	r22,0(r4)
20087ca0:	21000104 	addi	r4,r4,4
20087ca4:	d9002215 	stw	r4,136(sp)
20087ca8:	b009883a 	mov	r4,r22
20087cac:	d8001d85 	stb	zero,118(sp)
20087cb0:	4827883a 	mov	r19,r9
20087cb4:	001d883a 	mov	r14,zero
20087cb8:	48000216 	blt	r9,zero,20087cc4 <___vfiprintf_internal_r+0x390>
20087cbc:	00ffdfc4 	movi	r3,-129
20087cc0:	a8ea703a 	and	r21,r21,r3
20087cc4:	2002071e 	bne	r4,zero,200884e4 <___vfiprintf_internal_r+0xbb0>
20087cc8:	4802ad26 	beq	r9,zero,20088780 <___vfiprintf_internal_r+0xe4c>
20087ccc:	10803fcc 	andi	r2,r2,255
20087cd0:	00c00044 	movi	r3,1
20087cd4:	10c22b26 	beq	r2,r3,20088584 <___vfiprintf_internal_r+0xc50>
20087cd8:	00c00084 	movi	r3,2
20087cdc:	dd001a04 	addi	r20,sp,104
20087ce0:	10c0dd1e 	bne	r2,r3,20088058 <___vfiprintf_internal_r+0x724>
20087ce4:	d9002617 	ldw	r4,152(sp)
20087ce8:	b08003cc 	andi	r2,r22,15
20087cec:	6806973a 	slli	r3,r13,28
20087cf0:	2085883a 	add	r2,r4,r2
20087cf4:	b02cd13a 	srli	r22,r22,4
20087cf8:	10800003 	ldbu	r2,0(r2)
20087cfc:	681ad13a 	srli	r13,r13,4
20087d00:	a53fffc4 	addi	r20,r20,-1
20087d04:	1dacb03a 	or	r22,r3,r22
20087d08:	a0800005 	stb	r2,0(r20)
20087d0c:	b344b03a 	or	r2,r22,r13
20087d10:	103ff51e 	bne	r2,zero,20087ce8 <__flash_rwdata_start+0xffff6238>
20087d14:	d9001e17 	ldw	r4,120(sp)
20087d18:	2527c83a 	sub	r19,r4,r20
20087d1c:	9823883a 	mov	r17,r19
20087d20:	9a40010e 	bge	r19,r9,20087d28 <___vfiprintf_internal_r+0x3f4>
20087d24:	4823883a 	mov	r17,r9
20087d28:	73803fcc 	andi	r14,r14,255
20087d2c:	7380201c 	xori	r14,r14,128
20087d30:	73bfe004 	addi	r14,r14,-128
20087d34:	70000126 	beq	r14,zero,20087d3c <___vfiprintf_internal_r+0x408>
20087d38:	8c400044 	addi	r17,r17,1
20087d3c:	ab40008c 	andi	r13,r21,2
20087d40:	68000126 	beq	r13,zero,20087d48 <___vfiprintf_internal_r+0x414>
20087d44:	8c400084 	addi	r17,r17,2
20087d48:	ad80210c 	andi	r22,r21,132
20087d4c:	b001c51e 	bne	r22,zero,20088464 <___vfiprintf_internal_r+0xb30>
20087d50:	9447c83a 	sub	r3,r18,r17
20087d54:	00c1c30e 	bge	zero,r3,20088464 <___vfiprintf_internal_r+0xb30>
20087d58:	01c00404 	movi	r7,16
20087d5c:	d8801c17 	ldw	r2,112(sp)
20087d60:	38c37b0e 	bge	r7,r3,20088b50 <___vfiprintf_internal_r+0x121c>
20087d64:	01000034 	movhi	r4,0
20087d68:	21007704 	addi	r4,r4,476
20087d6c:	dc002915 	stw	r16,164(sp)
20087d70:	d9801b17 	ldw	r6,108(sp)
20087d74:	d9002415 	stw	r4,144(sp)
20087d78:	03c001c4 	movi	r15,7
20087d7c:	da402515 	stw	r9,148(sp)
20087d80:	db402815 	stw	r13,160(sp)
20087d84:	1821883a 	mov	r16,r3
20087d88:	00000506 	br	20087da0 <___vfiprintf_internal_r+0x46c>
20087d8c:	31400084 	addi	r5,r6,2
20087d90:	42000204 	addi	r8,r8,8
20087d94:	200d883a 	mov	r6,r4
20087d98:	843ffc04 	addi	r16,r16,-16
20087d9c:	3c000d0e 	bge	r7,r16,20087dd4 <___vfiprintf_internal_r+0x4a0>
20087da0:	10800404 	addi	r2,r2,16
20087da4:	31000044 	addi	r4,r6,1
20087da8:	47000015 	stw	fp,0(r8)
20087dac:	41c00115 	stw	r7,4(r8)
20087db0:	d8801c15 	stw	r2,112(sp)
20087db4:	d9001b15 	stw	r4,108(sp)
20087db8:	793ff40e 	bge	r15,r4,20087d8c <__flash_rwdata_start+0xffff62dc>
20087dbc:	10019b1e 	bne	r2,zero,2008842c <___vfiprintf_internal_r+0xaf8>
20087dc0:	843ffc04 	addi	r16,r16,-16
20087dc4:	000d883a 	mov	r6,zero
20087dc8:	01400044 	movi	r5,1
20087dcc:	d811883a 	mov	r8,sp
20087dd0:	3c3ff316 	blt	r7,r16,20087da0 <__flash_rwdata_start+0xffff62f0>
20087dd4:	8007883a 	mov	r3,r16
20087dd8:	da402517 	ldw	r9,148(sp)
20087ddc:	db402817 	ldw	r13,160(sp)
20087de0:	dc002917 	ldw	r16,164(sp)
20087de4:	d9002417 	ldw	r4,144(sp)
20087de8:	1885883a 	add	r2,r3,r2
20087dec:	40c00115 	stw	r3,4(r8)
20087df0:	41000015 	stw	r4,0(r8)
20087df4:	d8801c15 	stw	r2,112(sp)
20087df8:	d9401b15 	stw	r5,108(sp)
20087dfc:	00c001c4 	movi	r3,7
20087e00:	19426a16 	blt	r3,r5,200887ac <___vfiprintf_internal_r+0xe78>
20087e04:	d8c01d87 	ldb	r3,118(sp)
20087e08:	42000204 	addi	r8,r8,8
20087e0c:	29000044 	addi	r4,r5,1
20087e10:	1801991e 	bne	r3,zero,20088478 <___vfiprintf_internal_r+0xb44>
20087e14:	68000c26 	beq	r13,zero,20087e48 <___vfiprintf_internal_r+0x514>
20087e18:	d8c01d04 	addi	r3,sp,116
20087e1c:	10800084 	addi	r2,r2,2
20087e20:	40c00015 	stw	r3,0(r8)
20087e24:	00c00084 	movi	r3,2
20087e28:	40c00115 	stw	r3,4(r8)
20087e2c:	d8801c15 	stw	r2,112(sp)
20087e30:	d9001b15 	stw	r4,108(sp)
20087e34:	00c001c4 	movi	r3,7
20087e38:	19024c16 	blt	r3,r4,2008876c <___vfiprintf_internal_r+0xe38>
20087e3c:	200b883a 	mov	r5,r4
20087e40:	42000204 	addi	r8,r8,8
20087e44:	21000044 	addi	r4,r4,1
20087e48:	00c02004 	movi	r3,128
20087e4c:	b0c20126 	beq	r22,r3,20088654 <___vfiprintf_internal_r+0xd20>
20087e50:	4cedc83a 	sub	r22,r9,r19
20087e54:	0580230e 	bge	zero,r22,20087ee4 <___vfiprintf_internal_r+0x5b0>
20087e58:	01c00404 	movi	r7,16
20087e5c:	3d83140e 	bge	r7,r22,20088ab0 <___vfiprintf_internal_r+0x117c>
20087e60:	01000034 	movhi	r4,0
20087e64:	21007304 	addi	r4,r4,460
20087e68:	d9002415 	stw	r4,144(sp)
20087e6c:	034001c4 	movi	r13,7
20087e70:	00000506 	br	20087e88 <___vfiprintf_internal_r+0x554>
20087e74:	29000084 	addi	r4,r5,2
20087e78:	42000204 	addi	r8,r8,8
20087e7c:	180b883a 	mov	r5,r3
20087e80:	b5bffc04 	addi	r22,r22,-16
20087e84:	3d800d0e 	bge	r7,r22,20087ebc <___vfiprintf_internal_r+0x588>
20087e88:	10800404 	addi	r2,r2,16
20087e8c:	28c00044 	addi	r3,r5,1
20087e90:	45c00015 	stw	r23,0(r8)
20087e94:	41c00115 	stw	r7,4(r8)
20087e98:	d8801c15 	stw	r2,112(sp)
20087e9c:	d8c01b15 	stw	r3,108(sp)
20087ea0:	68fff40e 	bge	r13,r3,20087e74 <__flash_rwdata_start+0xffff63c4>
20087ea4:	1001811e 	bne	r2,zero,200884ac <___vfiprintf_internal_r+0xb78>
20087ea8:	b5bffc04 	addi	r22,r22,-16
20087eac:	01000044 	movi	r4,1
20087eb0:	000b883a 	mov	r5,zero
20087eb4:	d811883a 	mov	r8,sp
20087eb8:	3dbff316 	blt	r7,r22,20087e88 <__flash_rwdata_start+0xffff63d8>
20087ebc:	d8c02417 	ldw	r3,144(sp)
20087ec0:	1585883a 	add	r2,r2,r22
20087ec4:	45800115 	stw	r22,4(r8)
20087ec8:	40c00015 	stw	r3,0(r8)
20087ecc:	d8801c15 	stw	r2,112(sp)
20087ed0:	d9001b15 	stw	r4,108(sp)
20087ed4:	00c001c4 	movi	r3,7
20087ed8:	1901d016 	blt	r3,r4,2008861c <___vfiprintf_internal_r+0xce8>
20087edc:	42000204 	addi	r8,r8,8
20087ee0:	21000044 	addi	r4,r4,1
20087ee4:	14c5883a 	add	r2,r2,r19
20087ee8:	45000015 	stw	r20,0(r8)
20087eec:	44c00115 	stw	r19,4(r8)
20087ef0:	d8801c15 	stw	r2,112(sp)
20087ef4:	d9001b15 	stw	r4,108(sp)
20087ef8:	00c001c4 	movi	r3,7
20087efc:	1901cf0e 	bge	r3,r4,2008863c <___vfiprintf_internal_r+0xd08>
20087f00:	1002361e 	bne	r2,zero,200887dc <___vfiprintf_internal_r+0xea8>
20087f04:	d8001b15 	stw	zero,108(sp)
20087f08:	aac0010c 	andi	r11,r21,4
20087f0c:	58002826 	beq	r11,zero,20087fb0 <___vfiprintf_internal_r+0x67c>
20087f10:	9467c83a 	sub	r19,r18,r17
20087f14:	d811883a 	mov	r8,sp
20087f18:	04c3340e 	bge	zero,r19,20088bec <___vfiprintf_internal_r+0x12b8>
20087f1c:	01c00404 	movi	r7,16
20087f20:	3cc31b0e 	bge	r7,r19,20088b90 <___vfiprintf_internal_r+0x125c>
20087f24:	00c00034 	movhi	r3,0
20087f28:	18c07704 	addi	r3,r3,476
20087f2c:	d9001b17 	ldw	r4,108(sp)
20087f30:	d8c02415 	stw	r3,144(sp)
20087f34:	382b883a 	mov	r21,r7
20087f38:	050001c4 	movi	r20,7
20087f3c:	dd802017 	ldw	r22,128(sp)
20087f40:	00000506 	br	20087f58 <___vfiprintf_internal_r+0x624>
20087f44:	21400084 	addi	r5,r4,2
20087f48:	42000204 	addi	r8,r8,8
20087f4c:	1809883a 	mov	r4,r3
20087f50:	9cfffc04 	addi	r19,r19,-16
20087f54:	acc00d0e 	bge	r21,r19,20087f8c <___vfiprintf_internal_r+0x658>
20087f58:	10800404 	addi	r2,r2,16
20087f5c:	20c00044 	addi	r3,r4,1
20087f60:	47000015 	stw	fp,0(r8)
20087f64:	45400115 	stw	r21,4(r8)
20087f68:	d8801c15 	stw	r2,112(sp)
20087f6c:	d8c01b15 	stw	r3,108(sp)
20087f70:	a0fff40e 	bge	r20,r3,20087f44 <__flash_rwdata_start+0xffff6494>
20087f74:	10019f1e 	bne	r2,zero,200885f4 <___vfiprintf_internal_r+0xcc0>
20087f78:	9cfffc04 	addi	r19,r19,-16
20087f7c:	01400044 	movi	r5,1
20087f80:	0009883a 	mov	r4,zero
20087f84:	d811883a 	mov	r8,sp
20087f88:	acfff316 	blt	r21,r19,20087f58 <__flash_rwdata_start+0xffff64a8>
20087f8c:	d8c02417 	ldw	r3,144(sp)
20087f90:	14c5883a 	add	r2,r2,r19
20087f94:	44c00115 	stw	r19,4(r8)
20087f98:	40c00015 	stw	r3,0(r8)
20087f9c:	d8801c15 	stw	r2,112(sp)
20087fa0:	d9401b15 	stw	r5,108(sp)
20087fa4:	00c001c4 	movi	r3,7
20087fa8:	1941810e 	bge	r3,r5,200885b0 <___vfiprintf_internal_r+0xc7c>
20087fac:	10017a1e 	bne	r2,zero,20088598 <___vfiprintf_internal_r+0xc64>
20087fb0:	8c82a416 	blt	r17,r18,20088a44 <___vfiprintf_internal_r+0x1110>
20087fb4:	d9002317 	ldw	r4,140(sp)
20087fb8:	2449883a 	add	r4,r4,r17
20087fbc:	d9002315 	stw	r4,140(sp)
20087fc0:	d8001b15 	stw	zero,108(sp)
20087fc4:	d811883a 	mov	r8,sp
20087fc8:	003e8e06 	br	20087a04 <__flash_rwdata_start+0xffff5f54>
20087fcc:	d9002017 	ldw	r4,128(sp)
20087fd0:	a80b883a 	mov	r5,r21
20087fd4:	00826840 	call	20082684 <__swsetup_r>
20087fd8:	10000c1e 	bne	r2,zero,2008800c <___vfiprintf_internal_r+0x6d8>
20087fdc:	a880030b 	ldhu	r2,12(r21)
20087fe0:	00c00284 	movi	r3,10
20087fe4:	1080068c 	andi	r2,r2,26
20087fe8:	10fe741e 	bne	r2,r3,200879bc <__flash_rwdata_start+0xffff5f0c>
20087fec:	a880038f 	ldh	r2,14(r21)
20087ff0:	103e7216 	blt	r2,zero,200879bc <__flash_rwdata_start+0xffff5f0c>
20087ff4:	d9002017 	ldw	r4,128(sp)
20087ff8:	d9c02217 	ldw	r7,136(sp)
20087ffc:	a80b883a 	mov	r5,r21
20088000:	b00d883a 	mov	r6,r22
20088004:	0088c280 	call	20088c28 <__sbprintf>
20088008:	00000106 	br	20088010 <___vfiprintf_internal_r+0x6dc>
2008800c:	00bfffc4 	movi	r2,-1
20088010:	dfc03517 	ldw	ra,212(sp)
20088014:	df003417 	ldw	fp,208(sp)
20088018:	ddc03317 	ldw	r23,204(sp)
2008801c:	dd803217 	ldw	r22,200(sp)
20088020:	dd403117 	ldw	r21,196(sp)
20088024:	dd003017 	ldw	r20,192(sp)
20088028:	dcc02f17 	ldw	r19,188(sp)
2008802c:	dc802e17 	ldw	r18,184(sp)
20088030:	dc402d17 	ldw	r17,180(sp)
20088034:	dc002c17 	ldw	r16,176(sp)
20088038:	dec03604 	addi	sp,sp,216
2008803c:	f800283a 	ret
20088040:	00846e40 	call	200846e4 <__sinit>
20088044:	003e4d06 	br	2008797c <__flash_rwdata_start+0xffff5ecc>
20088048:	8005883a 	mov	r2,r16
2008804c:	ad400114 	ori	r21,r21,4
20088050:	80c00007 	ldb	r3,0(r16)
20088054:	003e9506 	br	20087aac <__flash_rwdata_start+0xffff5ffc>
20088058:	b006d0fa 	srli	r3,r22,3
2008805c:	6808977a 	slli	r4,r13,29
20088060:	681ad0fa 	srli	r13,r13,3
20088064:	b58001cc 	andi	r22,r22,7
20088068:	b0800c04 	addi	r2,r22,48
2008806c:	a53fffc4 	addi	r20,r20,-1
20088070:	20ecb03a 	or	r22,r4,r3
20088074:	a0800005 	stb	r2,0(r20)
20088078:	b346b03a 	or	r3,r22,r13
2008807c:	183ff61e 	bne	r3,zero,20088058 <__flash_rwdata_start+0xffff65a8>
20088080:	a8c0004c 	andi	r3,r21,1
20088084:	a009883a 	mov	r4,r20
20088088:	18013b26 	beq	r3,zero,20088578 <___vfiprintf_internal_r+0xc44>
2008808c:	10803fcc 	andi	r2,r2,255
20088090:	1080201c 	xori	r2,r2,128
20088094:	10bfe004 	addi	r2,r2,-128
20088098:	00c00c04 	movi	r3,48
2008809c:	10ff1d26 	beq	r2,r3,20087d14 <__flash_rwdata_start+0xffff6264>
200880a0:	d8801e17 	ldw	r2,120(sp)
200880a4:	a53fffc4 	addi	r20,r20,-1
200880a8:	20ffffc5 	stb	r3,-1(r4)
200880ac:	1527c83a 	sub	r19,r2,r20
200880b0:	003f1a06 	br	20087d1c <__flash_rwdata_start+0xffff626c>
200880b4:	ad402014 	ori	r21,r21,128
200880b8:	8005883a 	mov	r2,r16
200880bc:	80c00007 	ldb	r3,0(r16)
200880c0:	003e7a06 	br	20087aac <__flash_rwdata_start+0xffff5ffc>
200880c4:	8005883a 	mov	r2,r16
200880c8:	0025883a 	mov	r18,zero
200880cc:	193ff404 	addi	r4,r3,-48
200880d0:	10c00007 	ldb	r3,0(r2)
200880d4:	948002a4 	muli	r18,r18,10
200880d8:	84000044 	addi	r16,r16,1
200880dc:	8005883a 	mov	r2,r16
200880e0:	9125883a 	add	r18,r18,r4
200880e4:	193ff404 	addi	r4,r3,-48
200880e8:	313ff92e 	bgeu	r6,r4,200880d0 <__flash_rwdata_start+0xffff6620>
200880ec:	003e7006 	br	20087ab0 <__flash_rwdata_start+0xffff6000>
200880f0:	ad400414 	ori	r21,r21,16
200880f4:	d9c01d85 	stb	r7,118(sp)
200880f8:	a880080c 	andi	r2,r21,32
200880fc:	d8c02217 	ldw	r3,136(sp)
20088100:	10005a26 	beq	r2,zero,2008826c <___vfiprintf_internal_r+0x938>
20088104:	d9002217 	ldw	r4,136(sp)
20088108:	18800117 	ldw	r2,4(r3)
2008810c:	1d800017 	ldw	r22,0(r3)
20088110:	21000204 	addi	r4,r4,8
20088114:	d9002215 	stw	r4,136(sp)
20088118:	101b883a 	mov	r13,r2
2008811c:	1001f416 	blt	r2,zero,200888f0 <___vfiprintf_internal_r+0xfbc>
20088120:	db801d83 	ldbu	r14,118(sp)
20088124:	4827883a 	mov	r19,r9
20088128:	00800044 	movi	r2,1
2008812c:	b348b03a 	or	r4,r22,r13
20088130:	003ee106 	br	20087cb8 <__flash_rwdata_start+0xffff6208>
20088134:	80c00007 	ldb	r3,0(r16)
20088138:	80800044 	addi	r2,r16,1
2008813c:	1b42a326 	beq	r3,r13,20088bcc <___vfiprintf_internal_r+0x1298>
20088140:	193ff404 	addi	r4,r3,-48
20088144:	1021883a 	mov	r16,r2
20088148:	0013883a 	mov	r9,zero
2008814c:	313e5836 	bltu	r6,r4,20087ab0 <__flash_rwdata_start+0xffff6000>
20088150:	80c00007 	ldb	r3,0(r16)
20088154:	4a4002a4 	muli	r9,r9,10
20088158:	84000044 	addi	r16,r16,1
2008815c:	2253883a 	add	r9,r4,r9
20088160:	193ff404 	addi	r4,r3,-48
20088164:	313ffa2e 	bgeu	r6,r4,20088150 <__flash_rwdata_start+0xffff66a0>
20088168:	483e510e 	bge	r9,zero,20087ab0 <__flash_rwdata_start+0xffff6000>
2008816c:	027fffc4 	movi	r9,-1
20088170:	003e4f06 	br	20087ab0 <__flash_rwdata_start+0xffff6000>
20088174:	d9c01d85 	stb	r7,118(sp)
20088178:	a880080c 	andi	r2,r21,32
2008817c:	10020826 	beq	r2,zero,200889a0 <___vfiprintf_internal_r+0x106c>
20088180:	d8c02217 	ldw	r3,136(sp)
20088184:	d9002317 	ldw	r4,140(sp)
20088188:	18800017 	ldw	r2,0(r3)
2008818c:	2007d7fa 	srai	r3,r4,31
20088190:	d9002217 	ldw	r4,136(sp)
20088194:	10c00115 	stw	r3,4(r2)
20088198:	21000104 	addi	r4,r4,4
2008819c:	d9002215 	stw	r4,136(sp)
200881a0:	d9002317 	ldw	r4,140(sp)
200881a4:	11000015 	stw	r4,0(r2)
200881a8:	003e1606 	br	20087a04 <__flash_rwdata_start+0xffff5f54>
200881ac:	d8802217 	ldw	r2,136(sp)
200881b0:	d8c02217 	ldw	r3,136(sp)
200881b4:	15800017 	ldw	r22,0(r2)
200881b8:	13400117 	ldw	r13,4(r2)
200881bc:	18c00204 	addi	r3,r3,8
200881c0:	0005883a 	mov	r2,zero
200881c4:	d8c02215 	stw	r3,136(sp)
200881c8:	b348b03a 	or	r4,r22,r13
200881cc:	003eb706 	br	20087cac <__flash_rwdata_start+0xffff61fc>
200881d0:	38803fcc 	andi	r2,r7,255
200881d4:	1080201c 	xori	r2,r2,128
200881d8:	10bfe004 	addi	r2,r2,-128
200881dc:	1001e31e 	bne	r2,zero,2008896c <___vfiprintf_internal_r+0x1038>
200881e0:	8005883a 	mov	r2,r16
200881e4:	01c00804 	movi	r7,32
200881e8:	80c00007 	ldb	r3,0(r16)
200881ec:	003e2f06 	br	20087aac <__flash_rwdata_start+0xffff5ffc>
200881f0:	ad400054 	ori	r21,r21,1
200881f4:	8005883a 	mov	r2,r16
200881f8:	80c00007 	ldb	r3,0(r16)
200881fc:	003e2b06 	br	20087aac <__flash_rwdata_start+0xffff5ffc>
20088200:	d8c02217 	ldw	r3,136(sp)
20088204:	1c800017 	ldw	r18,0(r3)
20088208:	18c00104 	addi	r3,r3,4
2008820c:	90023816 	blt	r18,zero,20088af0 <___vfiprintf_internal_r+0x11bc>
20088210:	d8c02215 	stw	r3,136(sp)
20088214:	8005883a 	mov	r2,r16
20088218:	80c00007 	ldb	r3,0(r16)
2008821c:	003e2306 	br	20087aac <__flash_rwdata_start+0xffff5ffc>
20088220:	8005883a 	mov	r2,r16
20088224:	01c00ac4 	movi	r7,43
20088228:	80c00007 	ldb	r3,0(r16)
2008822c:	003e1f06 	br	20087aac <__flash_rwdata_start+0xffff5ffc>
20088230:	d8c02217 	ldw	r3,136(sp)
20088234:	04400044 	movi	r17,1
20088238:	d8001d85 	stb	zero,118(sp)
2008823c:	18800017 	ldw	r2,0(r3)
20088240:	18c00104 	addi	r3,r3,4
20088244:	d8c02215 	stw	r3,136(sp)
20088248:	d8801005 	stb	r2,64(sp)
2008824c:	8827883a 	mov	r19,r17
20088250:	dd001004 	addi	r20,sp,64
20088254:	0013883a 	mov	r9,zero
20088258:	003eb806 	br	20087d3c <__flash_rwdata_start+0xffff628c>
2008825c:	d9c01d85 	stb	r7,118(sp)
20088260:	a880080c 	andi	r2,r21,32
20088264:	d8c02217 	ldw	r3,136(sp)
20088268:	103fa61e 	bne	r2,zero,20088104 <__flash_rwdata_start+0xffff6654>
2008826c:	a880040c 	andi	r2,r21,16
20088270:	1001dd26 	beq	r2,zero,200889e8 <___vfiprintf_internal_r+0x10b4>
20088274:	1d800017 	ldw	r22,0(r3)
20088278:	d8802217 	ldw	r2,136(sp)
2008827c:	b01bd7fa 	srai	r13,r22,31
20088280:	10800104 	addi	r2,r2,4
20088284:	d8802215 	stw	r2,136(sp)
20088288:	6805883a 	mov	r2,r13
2008828c:	003fa306 	br	2008811c <__flash_rwdata_start+0xffff666c>
20088290:	00800034 	movhi	r2,0
20088294:	10800d04 	addi	r2,r2,52
20088298:	d8802615 	stw	r2,152(sp)
2008829c:	d9c01d85 	stb	r7,118(sp)
200882a0:	a880080c 	andi	r2,r21,32
200882a4:	10004726 	beq	r2,zero,200883c4 <___vfiprintf_internal_r+0xa90>
200882a8:	d9002217 	ldw	r4,136(sp)
200882ac:	25800017 	ldw	r22,0(r4)
200882b0:	23400117 	ldw	r13,4(r4)
200882b4:	21000204 	addi	r4,r4,8
200882b8:	d9002215 	stw	r4,136(sp)
200882bc:	a880004c 	andi	r2,r21,1
200882c0:	10014e26 	beq	r2,zero,200887fc <___vfiprintf_internal_r+0xec8>
200882c4:	b348b03a 	or	r4,r22,r13
200882c8:	20019c26 	beq	r4,zero,2008893c <___vfiprintf_internal_r+0x1008>
200882cc:	00800c04 	movi	r2,48
200882d0:	d8801d05 	stb	r2,116(sp)
200882d4:	d8c01d45 	stb	r3,117(sp)
200882d8:	ad400094 	ori	r21,r21,2
200882dc:	00800084 	movi	r2,2
200882e0:	003e7206 	br	20087cac <__flash_rwdata_start+0xffff61fc>
200882e4:	d8c02217 	ldw	r3,136(sp)
200882e8:	d8001d85 	stb	zero,118(sp)
200882ec:	1d000017 	ldw	r20,0(r3)
200882f0:	1d800104 	addi	r22,r3,4
200882f4:	a0021c26 	beq	r20,zero,20088b68 <___vfiprintf_internal_r+0x1234>
200882f8:	a009883a 	mov	r4,r20
200882fc:	48020016 	blt	r9,zero,20088b00 <___vfiprintf_internal_r+0x11cc>
20088300:	480d883a 	mov	r6,r9
20088304:	000b883a 	mov	r5,zero
20088308:	da002a15 	stw	r8,168(sp)
2008830c:	da402b15 	stw	r9,172(sp)
20088310:	0085bd00 	call	20085bd0 <memchr>
20088314:	da002a17 	ldw	r8,168(sp)
20088318:	da402b17 	ldw	r9,172(sp)
2008831c:	10022226 	beq	r2,zero,20088ba8 <___vfiprintf_internal_r+0x1274>
20088320:	1527c83a 	sub	r19,r2,r20
20088324:	4cc1c916 	blt	r9,r19,20088a4c <___vfiprintf_internal_r+0x1118>
20088328:	db801d83 	ldbu	r14,118(sp)
2008832c:	dd802215 	stw	r22,136(sp)
20088330:	0013883a 	mov	r9,zero
20088334:	003e7906 	br	20087d1c <__flash_rwdata_start+0xffff626c>
20088338:	ad401014 	ori	r21,r21,64
2008833c:	8005883a 	mov	r2,r16
20088340:	80c00007 	ldb	r3,0(r16)
20088344:	003dd906 	br	20087aac <__flash_rwdata_start+0xffff5ffc>
20088348:	80c00007 	ldb	r3,0(r16)
2008834c:	8005883a 	mov	r2,r16
20088350:	1b01e326 	beq	r3,r12,20088ae0 <___vfiprintf_internal_r+0x11ac>
20088354:	ad400414 	ori	r21,r21,16
20088358:	003dd406 	br	20087aac <__flash_rwdata_start+0xffff5ffc>
2008835c:	d9002217 	ldw	r4,136(sp)
20088360:	00800c04 	movi	r2,48
20088364:	d8801d05 	stb	r2,116(sp)
20088368:	25800017 	ldw	r22,0(r4)
2008836c:	00801e04 	movi	r2,120
20088370:	d8801d45 	stb	r2,117(sp)
20088374:	00800034 	movhi	r2,0
20088378:	21000104 	addi	r4,r4,4
2008837c:	10801204 	addi	r2,r2,72
20088380:	d9002215 	stw	r4,136(sp)
20088384:	d8802615 	stw	r2,152(sp)
20088388:	001b883a 	mov	r13,zero
2008838c:	ad400094 	ori	r21,r21,2
20088390:	00800084 	movi	r2,2
20088394:	b009883a 	mov	r4,r22
20088398:	003e4406 	br	20087cac <__flash_rwdata_start+0xffff61fc>
2008839c:	ad400814 	ori	r21,r21,32
200883a0:	8005883a 	mov	r2,r16
200883a4:	80c00007 	ldb	r3,0(r16)
200883a8:	003dc006 	br	20087aac <__flash_rwdata_start+0xffff5ffc>
200883ac:	00800034 	movhi	r2,0
200883b0:	10801204 	addi	r2,r2,72
200883b4:	d8802615 	stw	r2,152(sp)
200883b8:	d9c01d85 	stb	r7,118(sp)
200883bc:	a880080c 	andi	r2,r21,32
200883c0:	103fb91e 	bne	r2,zero,200882a8 <__flash_rwdata_start+0xffff67f8>
200883c4:	a880040c 	andi	r2,r21,16
200883c8:	10010f1e 	bne	r2,zero,20088808 <___vfiprintf_internal_r+0xed4>
200883cc:	a880100c 	andi	r2,r21,64
200883d0:	10010d26 	beq	r2,zero,20088808 <___vfiprintf_internal_r+0xed4>
200883d4:	d9002217 	ldw	r4,136(sp)
200883d8:	001b883a 	mov	r13,zero
200883dc:	2580000b 	ldhu	r22,0(r4)
200883e0:	21000104 	addi	r4,r4,4
200883e4:	d9002215 	stw	r4,136(sp)
200883e8:	003fb406 	br	200882bc <__flash_rwdata_start+0xffff680c>
200883ec:	d9002217 	ldw	r4,136(sp)
200883f0:	00800044 	movi	r2,1
200883f4:	25800017 	ldw	r22,0(r4)
200883f8:	23400117 	ldw	r13,4(r4)
200883fc:	21000204 	addi	r4,r4,8
20088400:	d9002215 	stw	r4,136(sp)
20088404:	b348b03a 	or	r4,r22,r13
20088408:	003e2806 	br	20087cac <__flash_rwdata_start+0xffff61fc>
2008840c:	d9c01d85 	stb	r7,118(sp)
20088410:	1801ab26 	beq	r3,zero,20088ac0 <___vfiprintf_internal_r+0x118c>
20088414:	04400044 	movi	r17,1
20088418:	d8c01005 	stb	r3,64(sp)
2008841c:	d8001d85 	stb	zero,118(sp)
20088420:	8827883a 	mov	r19,r17
20088424:	dd001004 	addi	r20,sp,64
20088428:	003f8a06 	br	20088254 <__flash_rwdata_start+0xffff67a4>
2008842c:	d9002017 	ldw	r4,128(sp)
20088430:	d9402117 	ldw	r5,132(sp)
20088434:	d9801a04 	addi	r6,sp,104
20088438:	d9c02b15 	stw	r7,172(sp)
2008843c:	dbc02a15 	stw	r15,168(sp)
20088440:	00878200 	call	20087820 <__sprint_r.part.0>
20088444:	d9c02b17 	ldw	r7,172(sp)
20088448:	dbc02a17 	ldw	r15,168(sp)
2008844c:	1000631e 	bne	r2,zero,200885dc <___vfiprintf_internal_r+0xca8>
20088450:	d9801b17 	ldw	r6,108(sp)
20088454:	d8801c17 	ldw	r2,112(sp)
20088458:	d811883a 	mov	r8,sp
2008845c:	31400044 	addi	r5,r6,1
20088460:	003e4d06 	br	20087d98 <__flash_rwdata_start+0xffff62e8>
20088464:	d9401b17 	ldw	r5,108(sp)
20088468:	d8801c17 	ldw	r2,112(sp)
2008846c:	29000044 	addi	r4,r5,1
20088470:	d8c01d87 	ldb	r3,118(sp)
20088474:	183e6726 	beq	r3,zero,20087e14 <__flash_rwdata_start+0xffff6364>
20088478:	00c00044 	movi	r3,1
2008847c:	d9401d84 	addi	r5,sp,118
20088480:	10c5883a 	add	r2,r2,r3
20088484:	41400015 	stw	r5,0(r8)
20088488:	40c00115 	stw	r3,4(r8)
2008848c:	d8801c15 	stw	r2,112(sp)
20088490:	d9001b15 	stw	r4,108(sp)
20088494:	014001c4 	movi	r5,7
20088498:	2900ab16 	blt	r5,r4,20088748 <___vfiprintf_internal_r+0xe14>
2008849c:	200b883a 	mov	r5,r4
200884a0:	42000204 	addi	r8,r8,8
200884a4:	21000044 	addi	r4,r4,1
200884a8:	003e5a06 	br	20087e14 <__flash_rwdata_start+0xffff6364>
200884ac:	d9002017 	ldw	r4,128(sp)
200884b0:	d9402117 	ldw	r5,132(sp)
200884b4:	d9801a04 	addi	r6,sp,104
200884b8:	d9c02b15 	stw	r7,172(sp)
200884bc:	db402a15 	stw	r13,168(sp)
200884c0:	00878200 	call	20087820 <__sprint_r.part.0>
200884c4:	d9c02b17 	ldw	r7,172(sp)
200884c8:	db402a17 	ldw	r13,168(sp)
200884cc:	1000431e 	bne	r2,zero,200885dc <___vfiprintf_internal_r+0xca8>
200884d0:	d9401b17 	ldw	r5,108(sp)
200884d4:	d8801c17 	ldw	r2,112(sp)
200884d8:	d811883a 	mov	r8,sp
200884dc:	29000044 	addi	r4,r5,1
200884e0:	003e6706 	br	20087e80 <__flash_rwdata_start+0xffff63d0>
200884e4:	10803fcc 	andi	r2,r2,255
200884e8:	00c00044 	movi	r3,1
200884ec:	10fdfa1e 	bne	r2,r3,20087cd8 <__flash_rwdata_start+0xffff6228>
200884f0:	6800021e 	bne	r13,zero,200884fc <___vfiprintf_internal_r+0xbc8>
200884f4:	00800244 	movi	r2,9
200884f8:	1580222e 	bgeu	r2,r22,20088584 <___vfiprintf_internal_r+0xc50>
200884fc:	dc802415 	stw	r18,144(sp)
20088500:	dc002515 	stw	r16,148(sp)
20088504:	dc401a04 	addi	r17,sp,104
20088508:	b021883a 	mov	r16,r22
2008850c:	4827883a 	mov	r19,r9
20088510:	4029883a 	mov	r20,r8
20088514:	702d883a 	mov	r22,r14
20088518:	6825883a 	mov	r18,r13
2008851c:	8009883a 	mov	r4,r16
20088520:	900b883a 	mov	r5,r18
20088524:	01800284 	movi	r6,10
20088528:	000f883a 	mov	r7,zero
2008852c:	0089b9c0 	call	20089b9c <__umoddi3>
20088530:	10800c04 	addi	r2,r2,48
20088534:	8c7fffc4 	addi	r17,r17,-1
20088538:	8009883a 	mov	r4,r16
2008853c:	900b883a 	mov	r5,r18
20088540:	01800284 	movi	r6,10
20088544:	000f883a 	mov	r7,zero
20088548:	88800005 	stb	r2,0(r17)
2008854c:	00895dc0 	call	200895dc <__udivdi3>
20088550:	1021883a 	mov	r16,r2
20088554:	10c4b03a 	or	r2,r2,r3
20088558:	1825883a 	mov	r18,r3
2008855c:	103fef1e 	bne	r2,zero,2008851c <__flash_rwdata_start+0xffff6a6c>
20088560:	dc802417 	ldw	r18,144(sp)
20088564:	dc002517 	ldw	r16,148(sp)
20088568:	a011883a 	mov	r8,r20
2008856c:	9813883a 	mov	r9,r19
20088570:	b01d883a 	mov	r14,r22
20088574:	8829883a 	mov	r20,r17
20088578:	d8c01e17 	ldw	r3,120(sp)
2008857c:	1d27c83a 	sub	r19,r3,r20
20088580:	003de606 	br	20087d1c <__flash_rwdata_start+0xffff626c>
20088584:	b5800c04 	addi	r22,r22,48
20088588:	dd8019c5 	stb	r22,103(sp)
2008858c:	dcc02717 	ldw	r19,156(sp)
20088590:	dd0019c4 	addi	r20,sp,103
20088594:	003de106 	br	20087d1c <__flash_rwdata_start+0xffff626c>
20088598:	d9002017 	ldw	r4,128(sp)
2008859c:	d9402117 	ldw	r5,132(sp)
200885a0:	d9801a04 	addi	r6,sp,104
200885a4:	00878200 	call	20087820 <__sprint_r.part.0>
200885a8:	10000c1e 	bne	r2,zero,200885dc <___vfiprintf_internal_r+0xca8>
200885ac:	d8801c17 	ldw	r2,112(sp)
200885b0:	8c80010e 	bge	r17,r18,200885b8 <___vfiprintf_internal_r+0xc84>
200885b4:	9023883a 	mov	r17,r18
200885b8:	d8c02317 	ldw	r3,140(sp)
200885bc:	1c47883a 	add	r3,r3,r17
200885c0:	d8c02315 	stw	r3,140(sp)
200885c4:	103e7e26 	beq	r2,zero,20087fc0 <__flash_rwdata_start+0xffff6510>
200885c8:	d9002017 	ldw	r4,128(sp)
200885cc:	d9402117 	ldw	r5,132(sp)
200885d0:	d9801a04 	addi	r6,sp,104
200885d4:	00878200 	call	20087820 <__sprint_r.part.0>
200885d8:	103e7926 	beq	r2,zero,20087fc0 <__flash_rwdata_start+0xffff6510>
200885dc:	dd402117 	ldw	r21,132(sp)
200885e0:	a880030b 	ldhu	r2,12(r21)
200885e4:	1080100c 	andi	r2,r2,64
200885e8:	103e881e 	bne	r2,zero,2008800c <__flash_rwdata_start+0xffff655c>
200885ec:	d8802317 	ldw	r2,140(sp)
200885f0:	003e8706 	br	20088010 <__flash_rwdata_start+0xffff6560>
200885f4:	d9402117 	ldw	r5,132(sp)
200885f8:	b009883a 	mov	r4,r22
200885fc:	d9801a04 	addi	r6,sp,104
20088600:	00878200 	call	20087820 <__sprint_r.part.0>
20088604:	103ff51e 	bne	r2,zero,200885dc <__flash_rwdata_start+0xffff6b2c>
20088608:	d9001b17 	ldw	r4,108(sp)
2008860c:	d8801c17 	ldw	r2,112(sp)
20088610:	d811883a 	mov	r8,sp
20088614:	21400044 	addi	r5,r4,1
20088618:	003e4d06 	br	20087f50 <__flash_rwdata_start+0xffff64a0>
2008861c:	1000aa1e 	bne	r2,zero,200888c8 <___vfiprintf_internal_r+0xf94>
20088620:	00c00044 	movi	r3,1
20088624:	9805883a 	mov	r2,r19
20088628:	dd000015 	stw	r20,0(sp)
2008862c:	dcc00115 	stw	r19,4(sp)
20088630:	dcc01c15 	stw	r19,112(sp)
20088634:	d8c01b15 	stw	r3,108(sp)
20088638:	d811883a 	mov	r8,sp
2008863c:	42000204 	addi	r8,r8,8
20088640:	aac0010c 	andi	r11,r21,4
20088644:	583fda26 	beq	r11,zero,200885b0 <__flash_rwdata_start+0xffff6b00>
20088648:	9467c83a 	sub	r19,r18,r17
2008864c:	04fe3316 	blt	zero,r19,20087f1c <__flash_rwdata_start+0xffff646c>
20088650:	003fd706 	br	200885b0 <__flash_rwdata_start+0xffff6b00>
20088654:	946dc83a 	sub	r22,r18,r17
20088658:	05bdfd0e 	bge	zero,r22,20087e50 <__flash_rwdata_start+0xffff63a0>
2008865c:	00c00034 	movhi	r3,0
20088660:	18c07304 	addi	r3,r3,460
20088664:	01c00404 	movi	r7,16
20088668:	d8c02415 	stw	r3,144(sp)
2008866c:	3d81530e 	bge	r7,r22,20088bbc <___vfiprintf_internal_r+0x1288>
20088670:	8007883a 	mov	r3,r16
20088674:	034001c4 	movi	r13,7
20088678:	b021883a 	mov	r16,r22
2008867c:	da402515 	stw	r9,148(sp)
20088680:	182d883a 	mov	r22,r3
20088684:	00000506 	br	2008869c <___vfiprintf_internal_r+0xd68>
20088688:	29800084 	addi	r6,r5,2
2008868c:	42000204 	addi	r8,r8,8
20088690:	180b883a 	mov	r5,r3
20088694:	843ffc04 	addi	r16,r16,-16
20088698:	3c000d0e 	bge	r7,r16,200886d0 <___vfiprintf_internal_r+0xd9c>
2008869c:	10800404 	addi	r2,r2,16
200886a0:	28c00044 	addi	r3,r5,1
200886a4:	45c00015 	stw	r23,0(r8)
200886a8:	41c00115 	stw	r7,4(r8)
200886ac:	d8801c15 	stw	r2,112(sp)
200886b0:	d8c01b15 	stw	r3,108(sp)
200886b4:	68fff40e 	bge	r13,r3,20088688 <__flash_rwdata_start+0xffff6bd8>
200886b8:	1000151e 	bne	r2,zero,20088710 <___vfiprintf_internal_r+0xddc>
200886bc:	843ffc04 	addi	r16,r16,-16
200886c0:	01800044 	movi	r6,1
200886c4:	000b883a 	mov	r5,zero
200886c8:	d811883a 	mov	r8,sp
200886cc:	3c3ff316 	blt	r7,r16,2008869c <__flash_rwdata_start+0xffff6bec>
200886d0:	da402517 	ldw	r9,148(sp)
200886d4:	b007883a 	mov	r3,r22
200886d8:	802d883a 	mov	r22,r16
200886dc:	1821883a 	mov	r16,r3
200886e0:	d8c02417 	ldw	r3,144(sp)
200886e4:	1585883a 	add	r2,r2,r22
200886e8:	45800115 	stw	r22,4(r8)
200886ec:	40c00015 	stw	r3,0(r8)
200886f0:	d8801c15 	stw	r2,112(sp)
200886f4:	d9801b15 	stw	r6,108(sp)
200886f8:	00c001c4 	movi	r3,7
200886fc:	19806d16 	blt	r3,r6,200888b4 <___vfiprintf_internal_r+0xf80>
20088700:	42000204 	addi	r8,r8,8
20088704:	31000044 	addi	r4,r6,1
20088708:	300b883a 	mov	r5,r6
2008870c:	003dd006 	br	20087e50 <__flash_rwdata_start+0xffff63a0>
20088710:	d9002017 	ldw	r4,128(sp)
20088714:	d9402117 	ldw	r5,132(sp)
20088718:	d9801a04 	addi	r6,sp,104
2008871c:	d9c02b15 	stw	r7,172(sp)
20088720:	db402a15 	stw	r13,168(sp)
20088724:	00878200 	call	20087820 <__sprint_r.part.0>
20088728:	d9c02b17 	ldw	r7,172(sp)
2008872c:	db402a17 	ldw	r13,168(sp)
20088730:	103faa1e 	bne	r2,zero,200885dc <__flash_rwdata_start+0xffff6b2c>
20088734:	d9401b17 	ldw	r5,108(sp)
20088738:	d8801c17 	ldw	r2,112(sp)
2008873c:	d811883a 	mov	r8,sp
20088740:	29800044 	addi	r6,r5,1
20088744:	003fd306 	br	20088694 <__flash_rwdata_start+0xffff6be4>
20088748:	1000401e 	bne	r2,zero,2008884c <___vfiprintf_internal_r+0xf18>
2008874c:	68003b26 	beq	r13,zero,2008883c <___vfiprintf_internal_r+0xf08>
20088750:	d9001d04 	addi	r4,sp,116
20088754:	00800084 	movi	r2,2
20088758:	d9000015 	stw	r4,0(sp)
2008875c:	d8800115 	stw	r2,4(sp)
20088760:	1809883a 	mov	r4,r3
20088764:	d811883a 	mov	r8,sp
20088768:	003db406 	br	20087e3c <__flash_rwdata_start+0xffff638c>
2008876c:	1000451e 	bne	r2,zero,20088884 <___vfiprintf_internal_r+0xf50>
20088770:	01000044 	movi	r4,1
20088774:	000b883a 	mov	r5,zero
20088778:	d811883a 	mov	r8,sp
2008877c:	003db206 	br	20087e48 <__flash_rwdata_start+0xffff6398>
20088780:	10803fcc 	andi	r2,r2,255
20088784:	1000071e 	bne	r2,zero,200887a4 <___vfiprintf_internal_r+0xe70>
20088788:	a880004c 	andi	r2,r21,1
2008878c:	10000526 	beq	r2,zero,200887a4 <___vfiprintf_internal_r+0xe70>
20088790:	00800c04 	movi	r2,48
20088794:	d88019c5 	stb	r2,103(sp)
20088798:	dcc02717 	ldw	r19,156(sp)
2008879c:	dd0019c4 	addi	r20,sp,103
200887a0:	003d5e06 	br	20087d1c <__flash_rwdata_start+0xffff626c>
200887a4:	dd001a04 	addi	r20,sp,104
200887a8:	003d5c06 	br	20087d1c <__flash_rwdata_start+0xffff626c>
200887ac:	1000971e 	bne	r2,zero,20088a0c <___vfiprintf_internal_r+0x10d8>
200887b0:	d8c01d87 	ldb	r3,118(sp)
200887b4:	18005826 	beq	r3,zero,20088918 <___vfiprintf_internal_r+0xfe4>
200887b8:	00800044 	movi	r2,1
200887bc:	d8c01d84 	addi	r3,sp,118
200887c0:	1009883a 	mov	r4,r2
200887c4:	d8c00015 	stw	r3,0(sp)
200887c8:	d8800115 	stw	r2,4(sp)
200887cc:	d811883a 	mov	r8,sp
200887d0:	003f3206 	br	2008849c <__flash_rwdata_start+0xffff69ec>
200887d4:	8023883a 	mov	r17,r16
200887d8:	003ca706 	br	20087a78 <__flash_rwdata_start+0xffff5fc8>
200887dc:	d9002017 	ldw	r4,128(sp)
200887e0:	d9402117 	ldw	r5,132(sp)
200887e4:	d9801a04 	addi	r6,sp,104
200887e8:	00878200 	call	20087820 <__sprint_r.part.0>
200887ec:	103f7b1e 	bne	r2,zero,200885dc <__flash_rwdata_start+0xffff6b2c>
200887f0:	d8801c17 	ldw	r2,112(sp)
200887f4:	d811883a 	mov	r8,sp
200887f8:	003f9106 	br	20088640 <__flash_rwdata_start+0xffff6b90>
200887fc:	00800084 	movi	r2,2
20088800:	b348b03a 	or	r4,r22,r13
20088804:	003d2906 	br	20087cac <__flash_rwdata_start+0xffff61fc>
20088808:	d8802217 	ldw	r2,136(sp)
2008880c:	001b883a 	mov	r13,zero
20088810:	15800017 	ldw	r22,0(r2)
20088814:	10800104 	addi	r2,r2,4
20088818:	d8802215 	stw	r2,136(sp)
2008881c:	003ea706 	br	200882bc <__flash_rwdata_start+0xffff680c>
20088820:	d9002017 	ldw	r4,128(sp)
20088824:	d9402117 	ldw	r5,132(sp)
20088828:	d9801a04 	addi	r6,sp,104
2008882c:	00878200 	call	20087820 <__sprint_r.part.0>
20088830:	103f6a1e 	bne	r2,zero,200885dc <__flash_rwdata_start+0xffff6b2c>
20088834:	d811883a 	mov	r8,sp
20088838:	003cff06 	br	20087c38 <__flash_rwdata_start+0xffff6188>
2008883c:	000b883a 	mov	r5,zero
20088840:	1809883a 	mov	r4,r3
20088844:	d811883a 	mov	r8,sp
20088848:	003d7f06 	br	20087e48 <__flash_rwdata_start+0xffff6398>
2008884c:	d9002017 	ldw	r4,128(sp)
20088850:	d9402117 	ldw	r5,132(sp)
20088854:	d9801a04 	addi	r6,sp,104
20088858:	da402b15 	stw	r9,172(sp)
2008885c:	db402a15 	stw	r13,168(sp)
20088860:	00878200 	call	20087820 <__sprint_r.part.0>
20088864:	da402b17 	ldw	r9,172(sp)
20088868:	db402a17 	ldw	r13,168(sp)
2008886c:	103f5b1e 	bne	r2,zero,200885dc <__flash_rwdata_start+0xffff6b2c>
20088870:	d9401b17 	ldw	r5,108(sp)
20088874:	d8801c17 	ldw	r2,112(sp)
20088878:	d811883a 	mov	r8,sp
2008887c:	29000044 	addi	r4,r5,1
20088880:	003d6406 	br	20087e14 <__flash_rwdata_start+0xffff6364>
20088884:	d9002017 	ldw	r4,128(sp)
20088888:	d9402117 	ldw	r5,132(sp)
2008888c:	d9801a04 	addi	r6,sp,104
20088890:	da402b15 	stw	r9,172(sp)
20088894:	00878200 	call	20087820 <__sprint_r.part.0>
20088898:	da402b17 	ldw	r9,172(sp)
2008889c:	103f4f1e 	bne	r2,zero,200885dc <__flash_rwdata_start+0xffff6b2c>
200888a0:	d9401b17 	ldw	r5,108(sp)
200888a4:	d8801c17 	ldw	r2,112(sp)
200888a8:	d811883a 	mov	r8,sp
200888ac:	29000044 	addi	r4,r5,1
200888b0:	003d6506 	br	20087e48 <__flash_rwdata_start+0xffff6398>
200888b4:	10009a1e 	bne	r2,zero,20088b20 <___vfiprintf_internal_r+0x11ec>
200888b8:	01000044 	movi	r4,1
200888bc:	000b883a 	mov	r5,zero
200888c0:	d811883a 	mov	r8,sp
200888c4:	003d6206 	br	20087e50 <__flash_rwdata_start+0xffff63a0>
200888c8:	d9002017 	ldw	r4,128(sp)
200888cc:	d9402117 	ldw	r5,132(sp)
200888d0:	d9801a04 	addi	r6,sp,104
200888d4:	00878200 	call	20087820 <__sprint_r.part.0>
200888d8:	103f401e 	bne	r2,zero,200885dc <__flash_rwdata_start+0xffff6b2c>
200888dc:	d9001b17 	ldw	r4,108(sp)
200888e0:	d8801c17 	ldw	r2,112(sp)
200888e4:	d811883a 	mov	r8,sp
200888e8:	21000044 	addi	r4,r4,1
200888ec:	003d7d06 	br	20087ee4 <__flash_rwdata_start+0xffff6434>
200888f0:	05adc83a 	sub	r22,zero,r22
200888f4:	b004c03a 	cmpne	r2,r22,zero
200888f8:	035bc83a 	sub	r13,zero,r13
200888fc:	689bc83a 	sub	r13,r13,r2
20088900:	03800b44 	movi	r14,45
20088904:	db801d85 	stb	r14,118(sp)
20088908:	4827883a 	mov	r19,r9
2008890c:	00800044 	movi	r2,1
20088910:	b348b03a 	or	r4,r22,r13
20088914:	003ce806 	br	20087cb8 <__flash_rwdata_start+0xffff6208>
20088918:	000b883a 	mov	r5,zero
2008891c:	01000044 	movi	r4,1
20088920:	d811883a 	mov	r8,sp
20088924:	683d4826 	beq	r13,zero,20087e48 <__flash_rwdata_start+0xffff6398>
20088928:	00800084 	movi	r2,2
2008892c:	d8c01d04 	addi	r3,sp,116
20088930:	d8c00015 	stw	r3,0(sp)
20088934:	d8800115 	stw	r2,4(sp)
20088938:	003d4006 	br	20087e3c <__flash_rwdata_start+0xffff638c>
2008893c:	00800084 	movi	r2,2
20088940:	003cda06 	br	20087cac <__flash_rwdata_start+0xffff61fc>
20088944:	a880100c 	andi	r2,r21,64
20088948:	10004226 	beq	r2,zero,20088a54 <___vfiprintf_internal_r+0x1120>
2008894c:	d8802217 	ldw	r2,136(sp)
20088950:	001b883a 	mov	r13,zero
20088954:	1580000b 	ldhu	r22,0(r2)
20088958:	10800104 	addi	r2,r2,4
2008895c:	d8802215 	stw	r2,136(sp)
20088960:	b009883a 	mov	r4,r22
20088964:	0005883a 	mov	r2,zero
20088968:	003cd006 	br	20087cac <__flash_rwdata_start+0xffff61fc>
2008896c:	80c00007 	ldb	r3,0(r16)
20088970:	8005883a 	mov	r2,r16
20088974:	003c4d06 	br	20087aac <__flash_rwdata_start+0xffff5ffc>
20088978:	a880100c 	andi	r2,r21,64
2008897c:	10004426 	beq	r2,zero,20088a90 <___vfiprintf_internal_r+0x115c>
20088980:	d8c02217 	ldw	r3,136(sp)
20088984:	001b883a 	mov	r13,zero
20088988:	00800044 	movi	r2,1
2008898c:	1d80000b 	ldhu	r22,0(r3)
20088990:	18c00104 	addi	r3,r3,4
20088994:	d8c02215 	stw	r3,136(sp)
20088998:	b009883a 	mov	r4,r22
2008899c:	003cc306 	br	20087cac <__flash_rwdata_start+0xffff61fc>
200889a0:	a880040c 	andi	r2,r21,16
200889a4:	1000091e 	bne	r2,zero,200889cc <___vfiprintf_internal_r+0x1098>
200889a8:	aac0100c 	andi	r11,r21,64
200889ac:	58000726 	beq	r11,zero,200889cc <___vfiprintf_internal_r+0x1098>
200889b0:	d8c02217 	ldw	r3,136(sp)
200889b4:	d9002317 	ldw	r4,140(sp)
200889b8:	18800017 	ldw	r2,0(r3)
200889bc:	18c00104 	addi	r3,r3,4
200889c0:	d8c02215 	stw	r3,136(sp)
200889c4:	1100000d 	sth	r4,0(r2)
200889c8:	003c0e06 	br	20087a04 <__flash_rwdata_start+0xffff5f54>
200889cc:	d8c02217 	ldw	r3,136(sp)
200889d0:	d9002317 	ldw	r4,140(sp)
200889d4:	18800017 	ldw	r2,0(r3)
200889d8:	18c00104 	addi	r3,r3,4
200889dc:	d8c02215 	stw	r3,136(sp)
200889e0:	11000015 	stw	r4,0(r2)
200889e4:	003c0706 	br	20087a04 <__flash_rwdata_start+0xffff5f54>
200889e8:	a880100c 	andi	r2,r21,64
200889ec:	10002126 	beq	r2,zero,20088a74 <___vfiprintf_internal_r+0x1140>
200889f0:	1d80000f 	ldh	r22,0(r3)
200889f4:	d8c02217 	ldw	r3,136(sp)
200889f8:	b01bd7fa 	srai	r13,r22,31
200889fc:	18c00104 	addi	r3,r3,4
20088a00:	d8c02215 	stw	r3,136(sp)
20088a04:	6805883a 	mov	r2,r13
20088a08:	003dc406 	br	2008811c <__flash_rwdata_start+0xffff666c>
20088a0c:	d9002017 	ldw	r4,128(sp)
20088a10:	d9402117 	ldw	r5,132(sp)
20088a14:	d9801a04 	addi	r6,sp,104
20088a18:	da402b15 	stw	r9,172(sp)
20088a1c:	db402a15 	stw	r13,168(sp)
20088a20:	00878200 	call	20087820 <__sprint_r.part.0>
20088a24:	da402b17 	ldw	r9,172(sp)
20088a28:	db402a17 	ldw	r13,168(sp)
20088a2c:	103eeb1e 	bne	r2,zero,200885dc <__flash_rwdata_start+0xffff6b2c>
20088a30:	d9401b17 	ldw	r5,108(sp)
20088a34:	d8801c17 	ldw	r2,112(sp)
20088a38:	d811883a 	mov	r8,sp
20088a3c:	29000044 	addi	r4,r5,1
20088a40:	003e8b06 	br	20088470 <__flash_rwdata_start+0xffff69c0>
20088a44:	9023883a 	mov	r17,r18
20088a48:	003d5a06 	br	20087fb4 <__flash_rwdata_start+0xffff6504>
20088a4c:	4827883a 	mov	r19,r9
20088a50:	003e3506 	br	20088328 <__flash_rwdata_start+0xffff6878>
20088a54:	d8c02217 	ldw	r3,136(sp)
20088a58:	001b883a 	mov	r13,zero
20088a5c:	0005883a 	mov	r2,zero
20088a60:	1d800017 	ldw	r22,0(r3)
20088a64:	18c00104 	addi	r3,r3,4
20088a68:	d8c02215 	stw	r3,136(sp)
20088a6c:	b009883a 	mov	r4,r22
20088a70:	003c8e06 	br	20087cac <__flash_rwdata_start+0xffff61fc>
20088a74:	1d800017 	ldw	r22,0(r3)
20088a78:	d9002217 	ldw	r4,136(sp)
20088a7c:	b01bd7fa 	srai	r13,r22,31
20088a80:	21000104 	addi	r4,r4,4
20088a84:	d9002215 	stw	r4,136(sp)
20088a88:	6805883a 	mov	r2,r13
20088a8c:	003da306 	br	2008811c <__flash_rwdata_start+0xffff666c>
20088a90:	d9002217 	ldw	r4,136(sp)
20088a94:	001b883a 	mov	r13,zero
20088a98:	00800044 	movi	r2,1
20088a9c:	25800017 	ldw	r22,0(r4)
20088aa0:	21000104 	addi	r4,r4,4
20088aa4:	d9002215 	stw	r4,136(sp)
20088aa8:	b009883a 	mov	r4,r22
20088aac:	003c7f06 	br	20087cac <__flash_rwdata_start+0xffff61fc>
20088ab0:	00c00034 	movhi	r3,0
20088ab4:	18c07304 	addi	r3,r3,460
20088ab8:	d8c02415 	stw	r3,144(sp)
20088abc:	003cff06 	br	20087ebc <__flash_rwdata_start+0xffff640c>
20088ac0:	d8801c17 	ldw	r2,112(sp)
20088ac4:	dd402117 	ldw	r21,132(sp)
20088ac8:	103ec526 	beq	r2,zero,200885e0 <__flash_rwdata_start+0xffff6b30>
20088acc:	d9002017 	ldw	r4,128(sp)
20088ad0:	a80b883a 	mov	r5,r21
20088ad4:	d9801a04 	addi	r6,sp,104
20088ad8:	00878200 	call	20087820 <__sprint_r.part.0>
20088adc:	003ec006 	br	200885e0 <__flash_rwdata_start+0xffff6b30>
20088ae0:	80800044 	addi	r2,r16,1
20088ae4:	ad400814 	ori	r21,r21,32
20088ae8:	80c00047 	ldb	r3,1(r16)
20088aec:	003bef06 	br	20087aac <__flash_rwdata_start+0xffff5ffc>
20088af0:	04a5c83a 	sub	r18,zero,r18
20088af4:	8005883a 	mov	r2,r16
20088af8:	d8c02215 	stw	r3,136(sp)
20088afc:	003d5306 	br	2008804c <__flash_rwdata_start+0xffff659c>
20088b00:	da002a15 	stw	r8,168(sp)
20088b04:	00805bc0 	call	200805bc <strlen>
20088b08:	1027883a 	mov	r19,r2
20088b0c:	db801d83 	ldbu	r14,118(sp)
20088b10:	dd802215 	stw	r22,136(sp)
20088b14:	0013883a 	mov	r9,zero
20088b18:	da002a17 	ldw	r8,168(sp)
20088b1c:	003c7f06 	br	20087d1c <__flash_rwdata_start+0xffff626c>
20088b20:	d9002017 	ldw	r4,128(sp)
20088b24:	d9402117 	ldw	r5,132(sp)
20088b28:	d9801a04 	addi	r6,sp,104
20088b2c:	da402b15 	stw	r9,172(sp)
20088b30:	00878200 	call	20087820 <__sprint_r.part.0>
20088b34:	da402b17 	ldw	r9,172(sp)
20088b38:	103ea81e 	bne	r2,zero,200885dc <__flash_rwdata_start+0xffff6b2c>
20088b3c:	d9401b17 	ldw	r5,108(sp)
20088b40:	d8801c17 	ldw	r2,112(sp)
20088b44:	d811883a 	mov	r8,sp
20088b48:	29000044 	addi	r4,r5,1
20088b4c:	003cc006 	br	20087e50 <__flash_rwdata_start+0xffff63a0>
20088b50:	d9401b17 	ldw	r5,108(sp)
20088b54:	01000034 	movhi	r4,0
20088b58:	21007704 	addi	r4,r4,476
20088b5c:	d9002415 	stw	r4,144(sp)
20088b60:	29400044 	addi	r5,r5,1
20088b64:	003c9f06 	br	20087de4 <__flash_rwdata_start+0xffff6334>
20088b68:	00800184 	movi	r2,6
20088b6c:	1240012e 	bgeu	r2,r9,20088b74 <___vfiprintf_internal_r+0x1240>
20088b70:	1013883a 	mov	r9,r2
20088b74:	4827883a 	mov	r19,r9
20088b78:	4823883a 	mov	r17,r9
20088b7c:	48001116 	blt	r9,zero,20088bc4 <___vfiprintf_internal_r+0x1290>
20088b80:	05000034 	movhi	r20,0
20088b84:	dd802215 	stw	r22,136(sp)
20088b88:	a5001704 	addi	r20,r20,92
20088b8c:	003db106 	br	20088254 <__flash_rwdata_start+0xffff67a4>
20088b90:	d9401b17 	ldw	r5,108(sp)
20088b94:	01000034 	movhi	r4,0
20088b98:	21007704 	addi	r4,r4,476
20088b9c:	d9002415 	stw	r4,144(sp)
20088ba0:	29400044 	addi	r5,r5,1
20088ba4:	003cf906 	br	20087f8c <__flash_rwdata_start+0xffff64dc>
20088ba8:	4827883a 	mov	r19,r9
20088bac:	db801d83 	ldbu	r14,118(sp)
20088bb0:	dd802215 	stw	r22,136(sp)
20088bb4:	0013883a 	mov	r9,zero
20088bb8:	003c5806 	br	20087d1c <__flash_rwdata_start+0xffff626c>
20088bbc:	200d883a 	mov	r6,r4
20088bc0:	003ec706 	br	200886e0 <__flash_rwdata_start+0xffff6c30>
20088bc4:	0023883a 	mov	r17,zero
20088bc8:	003fed06 	br	20088b80 <__flash_rwdata_start+0xffff70d0>
20088bcc:	d9002217 	ldw	r4,136(sp)
20088bd0:	22400017 	ldw	r9,0(r4)
20088bd4:	20c00104 	addi	r3,r4,4
20088bd8:	d8c02215 	stw	r3,136(sp)
20088bdc:	483fc20e 	bge	r9,zero,20088ae8 <__flash_rwdata_start+0xffff7038>
20088be0:	027fffc4 	movi	r9,-1
20088be4:	80c00047 	ldb	r3,1(r16)
20088be8:	003bb006 	br	20087aac <__flash_rwdata_start+0xffff5ffc>
20088bec:	8c80010e 	bge	r17,r18,20088bf4 <___vfiprintf_internal_r+0x12c0>
20088bf0:	9023883a 	mov	r17,r18
20088bf4:	d8802317 	ldw	r2,140(sp)
20088bf8:	1445883a 	add	r2,r2,r17
20088bfc:	d8802315 	stw	r2,140(sp)
20088c00:	003cef06 	br	20087fc0 <__flash_rwdata_start+0xffff6510>

20088c04 <__vfiprintf_internal>:
20088c04:	2007883a 	mov	r3,r4
20088c08:	01000034 	movhi	r4,0
20088c0c:	21081104 	addi	r4,r4,8260
20088c10:	21000017 	ldw	r4,0(r4)
20088c14:	2805883a 	mov	r2,r5
20088c18:	300f883a 	mov	r7,r6
20088c1c:	180b883a 	mov	r5,r3
20088c20:	100d883a 	mov	r6,r2
20088c24:	00879341 	jmpi	20087934 <___vfiprintf_internal_r>

20088c28 <__sbprintf>:
20088c28:	2880030b 	ldhu	r2,12(r5)
20088c2c:	2ac01917 	ldw	r11,100(r5)
20088c30:	2a80038b 	ldhu	r10,14(r5)
20088c34:	2a400717 	ldw	r9,28(r5)
20088c38:	2a000917 	ldw	r8,36(r5)
20088c3c:	defee204 	addi	sp,sp,-1144
20088c40:	00c10004 	movi	r3,1024
20088c44:	dc011a15 	stw	r16,1128(sp)
20088c48:	10bfff4c 	andi	r2,r2,65533
20088c4c:	2821883a 	mov	r16,r5
20088c50:	d8cb883a 	add	r5,sp,r3
20088c54:	dc811c15 	stw	r18,1136(sp)
20088c58:	dc411b15 	stw	r17,1132(sp)
20088c5c:	dfc11d15 	stw	ra,1140(sp)
20088c60:	2025883a 	mov	r18,r4
20088c64:	d881030d 	sth	r2,1036(sp)
20088c68:	dac11915 	stw	r11,1124(sp)
20088c6c:	da81038d 	sth	r10,1038(sp)
20088c70:	da410715 	stw	r9,1052(sp)
20088c74:	da010915 	stw	r8,1060(sp)
20088c78:	dec10015 	stw	sp,1024(sp)
20088c7c:	dec10415 	stw	sp,1040(sp)
20088c80:	d8c10215 	stw	r3,1032(sp)
20088c84:	d8c10515 	stw	r3,1044(sp)
20088c88:	d8010615 	stw	zero,1048(sp)
20088c8c:	00879340 	call	20087934 <___vfiprintf_internal_r>
20088c90:	1023883a 	mov	r17,r2
20088c94:	10000416 	blt	r2,zero,20088ca8 <__sbprintf+0x80>
20088c98:	9009883a 	mov	r4,r18
20088c9c:	d9410004 	addi	r5,sp,1024
20088ca0:	00843080 	call	20084308 <_fflush_r>
20088ca4:	10000d1e 	bne	r2,zero,20088cdc <__sbprintf+0xb4>
20088ca8:	d8c1030b 	ldhu	r3,1036(sp)
20088cac:	18c0100c 	andi	r3,r3,64
20088cb0:	18000326 	beq	r3,zero,20088cc0 <__sbprintf+0x98>
20088cb4:	8080030b 	ldhu	r2,12(r16)
20088cb8:	10801014 	ori	r2,r2,64
20088cbc:	8080030d 	sth	r2,12(r16)
20088cc0:	8805883a 	mov	r2,r17
20088cc4:	dfc11d17 	ldw	ra,1140(sp)
20088cc8:	dc811c17 	ldw	r18,1136(sp)
20088ccc:	dc411b17 	ldw	r17,1132(sp)
20088cd0:	dc011a17 	ldw	r16,1128(sp)
20088cd4:	dec11e04 	addi	sp,sp,1144
20088cd8:	f800283a 	ret
20088cdc:	047fffc4 	movi	r17,-1
20088ce0:	003ff106 	br	20088ca8 <__flash_rwdata_start+0xffff71f8>

20088ce4 <_write_r>:
20088ce4:	defffd04 	addi	sp,sp,-12
20088ce8:	dc000015 	stw	r16,0(sp)
20088cec:	04000034 	movhi	r16,0
20088cf0:	dc400115 	stw	r17,4(sp)
20088cf4:	84082904 	addi	r16,r16,8356
20088cf8:	2023883a 	mov	r17,r4
20088cfc:	2809883a 	mov	r4,r5
20088d00:	300b883a 	mov	r5,r6
20088d04:	380d883a 	mov	r6,r7
20088d08:	dfc00215 	stw	ra,8(sp)
20088d0c:	80000015 	stw	zero,0(r16)
20088d10:	008d2b40 	call	2008d2b4 <write>
20088d14:	00ffffc4 	movi	r3,-1
20088d18:	10c00526 	beq	r2,r3,20088d30 <_write_r+0x4c>
20088d1c:	dfc00217 	ldw	ra,8(sp)
20088d20:	dc400117 	ldw	r17,4(sp)
20088d24:	dc000017 	ldw	r16,0(sp)
20088d28:	dec00304 	addi	sp,sp,12
20088d2c:	f800283a 	ret
20088d30:	80c00017 	ldw	r3,0(r16)
20088d34:	183ff926 	beq	r3,zero,20088d1c <__flash_rwdata_start+0xffff726c>
20088d38:	88c00015 	stw	r3,0(r17)
20088d3c:	003ff706 	br	20088d1c <__flash_rwdata_start+0xffff726c>

20088d40 <_close_r>:
20088d40:	defffd04 	addi	sp,sp,-12
20088d44:	dc000015 	stw	r16,0(sp)
20088d48:	04000034 	movhi	r16,0
20088d4c:	dc400115 	stw	r17,4(sp)
20088d50:	84082904 	addi	r16,r16,8356
20088d54:	2023883a 	mov	r17,r4
20088d58:	2809883a 	mov	r4,r5
20088d5c:	dfc00215 	stw	ra,8(sp)
20088d60:	80000015 	stw	zero,0(r16)
20088d64:	008c8a80 	call	2008c8a8 <close>
20088d68:	00ffffc4 	movi	r3,-1
20088d6c:	10c00526 	beq	r2,r3,20088d84 <_close_r+0x44>
20088d70:	dfc00217 	ldw	ra,8(sp)
20088d74:	dc400117 	ldw	r17,4(sp)
20088d78:	dc000017 	ldw	r16,0(sp)
20088d7c:	dec00304 	addi	sp,sp,12
20088d80:	f800283a 	ret
20088d84:	80c00017 	ldw	r3,0(r16)
20088d88:	183ff926 	beq	r3,zero,20088d70 <__flash_rwdata_start+0xffff72c0>
20088d8c:	88c00015 	stw	r3,0(r17)
20088d90:	003ff706 	br	20088d70 <__flash_rwdata_start+0xffff72c0>

20088d94 <_calloc_r>:
20088d94:	298b383a 	mul	r5,r5,r6
20088d98:	defffe04 	addi	sp,sp,-8
20088d9c:	dc000015 	stw	r16,0(sp)
20088da0:	dfc00115 	stw	ra,4(sp)
20088da4:	00854280 	call	20085428 <_malloc_r>
20088da8:	1021883a 	mov	r16,r2
20088dac:	10002826 	beq	r2,zero,20088e50 <_calloc_r+0xbc>
20088db0:	11bfff17 	ldw	r6,-4(r2)
20088db4:	00bfff04 	movi	r2,-4
20088db8:	00c00904 	movi	r3,36
20088dbc:	308c703a 	and	r6,r6,r2
20088dc0:	308d883a 	add	r6,r6,r2
20088dc4:	19801436 	bltu	r3,r6,20088e18 <_calloc_r+0x84>
20088dc8:	008004c4 	movi	r2,19
20088dcc:	11800936 	bltu	r2,r6,20088df4 <_calloc_r+0x60>
20088dd0:	8005883a 	mov	r2,r16
20088dd4:	10000015 	stw	zero,0(r2)
20088dd8:	10000115 	stw	zero,4(r2)
20088ddc:	10000215 	stw	zero,8(r2)
20088de0:	8005883a 	mov	r2,r16
20088de4:	dfc00117 	ldw	ra,4(sp)
20088de8:	dc000017 	ldw	r16,0(sp)
20088dec:	dec00204 	addi	sp,sp,8
20088df0:	f800283a 	ret
20088df4:	80000015 	stw	zero,0(r16)
20088df8:	80000115 	stw	zero,4(r16)
20088dfc:	008006c4 	movi	r2,27
20088e00:	11800d2e 	bgeu	r2,r6,20088e38 <_calloc_r+0xa4>
20088e04:	80000215 	stw	zero,8(r16)
20088e08:	80000315 	stw	zero,12(r16)
20088e0c:	30c00c26 	beq	r6,r3,20088e40 <_calloc_r+0xac>
20088e10:	80800404 	addi	r2,r16,16
20088e14:	003fef06 	br	20088dd4 <__flash_rwdata_start+0xffff7324>
20088e18:	8009883a 	mov	r4,r16
20088e1c:	000b883a 	mov	r5,zero
20088e20:	0085f4c0 	call	20085f4c <memset>
20088e24:	8005883a 	mov	r2,r16
20088e28:	dfc00117 	ldw	ra,4(sp)
20088e2c:	dc000017 	ldw	r16,0(sp)
20088e30:	dec00204 	addi	sp,sp,8
20088e34:	f800283a 	ret
20088e38:	80800204 	addi	r2,r16,8
20088e3c:	003fe506 	br	20088dd4 <__flash_rwdata_start+0xffff7324>
20088e40:	80000415 	stw	zero,16(r16)
20088e44:	80800604 	addi	r2,r16,24
20088e48:	80000515 	stw	zero,20(r16)
20088e4c:	003fe106 	br	20088dd4 <__flash_rwdata_start+0xffff7324>
20088e50:	0005883a 	mov	r2,zero
20088e54:	003fe306 	br	20088de4 <__flash_rwdata_start+0xffff7334>

20088e58 <_fclose_r>:
20088e58:	28003926 	beq	r5,zero,20088f40 <_fclose_r+0xe8>
20088e5c:	defffc04 	addi	sp,sp,-16
20088e60:	dc400115 	stw	r17,4(sp)
20088e64:	dc000015 	stw	r16,0(sp)
20088e68:	dfc00315 	stw	ra,12(sp)
20088e6c:	dc800215 	stw	r18,8(sp)
20088e70:	2023883a 	mov	r17,r4
20088e74:	2821883a 	mov	r16,r5
20088e78:	20000226 	beq	r4,zero,20088e84 <_fclose_r+0x2c>
20088e7c:	20800e17 	ldw	r2,56(r4)
20088e80:	10002726 	beq	r2,zero,20088f20 <_fclose_r+0xc8>
20088e84:	8080030f 	ldh	r2,12(r16)
20088e88:	1000071e 	bne	r2,zero,20088ea8 <_fclose_r+0x50>
20088e8c:	0005883a 	mov	r2,zero
20088e90:	dfc00317 	ldw	ra,12(sp)
20088e94:	dc800217 	ldw	r18,8(sp)
20088e98:	dc400117 	ldw	r17,4(sp)
20088e9c:	dc000017 	ldw	r16,0(sp)
20088ea0:	dec00404 	addi	sp,sp,16
20088ea4:	f800283a 	ret
20088ea8:	8809883a 	mov	r4,r17
20088eac:	800b883a 	mov	r5,r16
20088eb0:	00841000 	call	20084100 <__sflush_r>
20088eb4:	1025883a 	mov	r18,r2
20088eb8:	80800b17 	ldw	r2,44(r16)
20088ebc:	10000426 	beq	r2,zero,20088ed0 <_fclose_r+0x78>
20088ec0:	81400717 	ldw	r5,28(r16)
20088ec4:	8809883a 	mov	r4,r17
20088ec8:	103ee83a 	callr	r2
20088ecc:	10001616 	blt	r2,zero,20088f28 <_fclose_r+0xd0>
20088ed0:	8080030b 	ldhu	r2,12(r16)
20088ed4:	1080200c 	andi	r2,r2,128
20088ed8:	1000151e 	bne	r2,zero,20088f30 <_fclose_r+0xd8>
20088edc:	81400c17 	ldw	r5,48(r16)
20088ee0:	28000526 	beq	r5,zero,20088ef8 <_fclose_r+0xa0>
20088ee4:	80801004 	addi	r2,r16,64
20088ee8:	28800226 	beq	r5,r2,20088ef4 <_fclose_r+0x9c>
20088eec:	8809883a 	mov	r4,r17
20088ef0:	00848580 	call	20084858 <_free_r>
20088ef4:	80000c15 	stw	zero,48(r16)
20088ef8:	81401117 	ldw	r5,68(r16)
20088efc:	28000326 	beq	r5,zero,20088f0c <_fclose_r+0xb4>
20088f00:	8809883a 	mov	r4,r17
20088f04:	00848580 	call	20084858 <_free_r>
20088f08:	80001115 	stw	zero,68(r16)
20088f0c:	00846f40 	call	200846f4 <__sfp_lock_acquire>
20088f10:	8000030d 	sth	zero,12(r16)
20088f14:	00846f80 	call	200846f8 <__sfp_lock_release>
20088f18:	9005883a 	mov	r2,r18
20088f1c:	003fdc06 	br	20088e90 <__flash_rwdata_start+0xffff73e0>
20088f20:	00846e40 	call	200846e4 <__sinit>
20088f24:	003fd706 	br	20088e84 <__flash_rwdata_start+0xffff73d4>
20088f28:	04bfffc4 	movi	r18,-1
20088f2c:	003fe806 	br	20088ed0 <__flash_rwdata_start+0xffff7420>
20088f30:	81400417 	ldw	r5,16(r16)
20088f34:	8809883a 	mov	r4,r17
20088f38:	00848580 	call	20084858 <_free_r>
20088f3c:	003fe706 	br	20088edc <__flash_rwdata_start+0xffff742c>
20088f40:	0005883a 	mov	r2,zero
20088f44:	f800283a 	ret

20088f48 <fclose>:
20088f48:	00800034 	movhi	r2,0
20088f4c:	10881104 	addi	r2,r2,8260
20088f50:	200b883a 	mov	r5,r4
20088f54:	11000017 	ldw	r4,0(r2)
20088f58:	0088e581 	jmpi	20088e58 <_fclose_r>

20088f5c <_fputwc_r>:
20088f5c:	3080030b 	ldhu	r2,12(r6)
20088f60:	defff804 	addi	sp,sp,-32
20088f64:	dcc00415 	stw	r19,16(sp)
20088f68:	dc800315 	stw	r18,12(sp)
20088f6c:	dc000115 	stw	r16,4(sp)
20088f70:	dfc00715 	stw	ra,28(sp)
20088f74:	dd400615 	stw	r21,24(sp)
20088f78:	dd000515 	stw	r20,20(sp)
20088f7c:	dc400215 	stw	r17,8(sp)
20088f80:	10c8000c 	andi	r3,r2,8192
20088f84:	3021883a 	mov	r16,r6
20088f88:	2027883a 	mov	r19,r4
20088f8c:	2825883a 	mov	r18,r5
20088f90:	1800051e 	bne	r3,zero,20088fa8 <_fputwc_r+0x4c>
20088f94:	30c01917 	ldw	r3,100(r6)
20088f98:	10880014 	ori	r2,r2,8192
20088f9c:	3080030d 	sth	r2,12(r6)
20088fa0:	18880014 	ori	r2,r3,8192
20088fa4:	30801915 	stw	r2,100(r6)
20088fa8:	00852180 	call	20085218 <__locale_mb_cur_max>
20088fac:	00c00044 	movi	r3,1
20088fb0:	10c03e26 	beq	r2,r3,200890ac <_fputwc_r+0x150>
20088fb4:	9809883a 	mov	r4,r19
20088fb8:	d80b883a 	mov	r5,sp
20088fbc:	900d883a 	mov	r6,r18
20088fc0:	81c01704 	addi	r7,r16,92
20088fc4:	00893f40 	call	200893f4 <_wcrtomb_r>
20088fc8:	1029883a 	mov	r20,r2
20088fcc:	00bfffc4 	movi	r2,-1
20088fd0:	a0802026 	beq	r20,r2,20089054 <_fputwc_r+0xf8>
20088fd4:	d9400003 	ldbu	r5,0(sp)
20088fd8:	a0001c26 	beq	r20,zero,2008904c <_fputwc_r+0xf0>
20088fdc:	0023883a 	mov	r17,zero
20088fe0:	05400284 	movi	r21,10
20088fe4:	00000906 	br	2008900c <_fputwc_r+0xb0>
20088fe8:	80800017 	ldw	r2,0(r16)
20088fec:	11400005 	stb	r5,0(r2)
20088ff0:	80c00017 	ldw	r3,0(r16)
20088ff4:	18c00044 	addi	r3,r3,1
20088ff8:	80c00015 	stw	r3,0(r16)
20088ffc:	8c400044 	addi	r17,r17,1
20089000:	dc45883a 	add	r2,sp,r17
20089004:	8d00112e 	bgeu	r17,r20,2008904c <_fputwc_r+0xf0>
20089008:	11400003 	ldbu	r5,0(r2)
2008900c:	80c00217 	ldw	r3,8(r16)
20089010:	18ffffc4 	addi	r3,r3,-1
20089014:	80c00215 	stw	r3,8(r16)
20089018:	183ff30e 	bge	r3,zero,20088fe8 <__flash_rwdata_start+0xffff7538>
2008901c:	80800617 	ldw	r2,24(r16)
20089020:	18801916 	blt	r3,r2,20089088 <_fputwc_r+0x12c>
20089024:	80800017 	ldw	r2,0(r16)
20089028:	11400005 	stb	r5,0(r2)
2008902c:	80800017 	ldw	r2,0(r16)
20089030:	10c00003 	ldbu	r3,0(r2)
20089034:	10800044 	addi	r2,r2,1
20089038:	1d402326 	beq	r3,r21,200890c8 <_fputwc_r+0x16c>
2008903c:	80800015 	stw	r2,0(r16)
20089040:	8c400044 	addi	r17,r17,1
20089044:	dc45883a 	add	r2,sp,r17
20089048:	8d3fef36 	bltu	r17,r20,20089008 <__flash_rwdata_start+0xffff7558>
2008904c:	9005883a 	mov	r2,r18
20089050:	00000406 	br	20089064 <_fputwc_r+0x108>
20089054:	80c0030b 	ldhu	r3,12(r16)
20089058:	a005883a 	mov	r2,r20
2008905c:	18c01014 	ori	r3,r3,64
20089060:	80c0030d 	sth	r3,12(r16)
20089064:	dfc00717 	ldw	ra,28(sp)
20089068:	dd400617 	ldw	r21,24(sp)
2008906c:	dd000517 	ldw	r20,20(sp)
20089070:	dcc00417 	ldw	r19,16(sp)
20089074:	dc800317 	ldw	r18,12(sp)
20089078:	dc400217 	ldw	r17,8(sp)
2008907c:	dc000117 	ldw	r16,4(sp)
20089080:	dec00804 	addi	sp,sp,32
20089084:	f800283a 	ret
20089088:	9809883a 	mov	r4,r19
2008908c:	29403fcc 	andi	r5,r5,255
20089090:	800d883a 	mov	r6,r16
20089094:	00892a00 	call	200892a0 <__swbuf_r>
20089098:	10bfffe0 	cmpeqi	r2,r2,-1
2008909c:	10803fcc 	andi	r2,r2,255
200890a0:	103fd626 	beq	r2,zero,20088ffc <__flash_rwdata_start+0xffff754c>
200890a4:	00bfffc4 	movi	r2,-1
200890a8:	003fee06 	br	20089064 <__flash_rwdata_start+0xffff75b4>
200890ac:	90ffffc4 	addi	r3,r18,-1
200890b0:	01003f84 	movi	r4,254
200890b4:	20ffbf36 	bltu	r4,r3,20088fb4 <__flash_rwdata_start+0xffff7504>
200890b8:	900b883a 	mov	r5,r18
200890bc:	dc800005 	stb	r18,0(sp)
200890c0:	1029883a 	mov	r20,r2
200890c4:	003fc506 	br	20088fdc <__flash_rwdata_start+0xffff752c>
200890c8:	9809883a 	mov	r4,r19
200890cc:	a80b883a 	mov	r5,r21
200890d0:	800d883a 	mov	r6,r16
200890d4:	00892a00 	call	200892a0 <__swbuf_r>
200890d8:	10bfffe0 	cmpeqi	r2,r2,-1
200890dc:	003fef06 	br	2008909c <__flash_rwdata_start+0xffff75ec>

200890e0 <fputwc>:
200890e0:	00800034 	movhi	r2,0
200890e4:	defffc04 	addi	sp,sp,-16
200890e8:	10881104 	addi	r2,r2,8260
200890ec:	dc000115 	stw	r16,4(sp)
200890f0:	14000017 	ldw	r16,0(r2)
200890f4:	dc400215 	stw	r17,8(sp)
200890f8:	dfc00315 	stw	ra,12(sp)
200890fc:	2023883a 	mov	r17,r4
20089100:	280d883a 	mov	r6,r5
20089104:	80000626 	beq	r16,zero,20089120 <fputwc+0x40>
20089108:	80800e17 	ldw	r2,56(r16)
2008910c:	1000041e 	bne	r2,zero,20089120 <fputwc+0x40>
20089110:	8009883a 	mov	r4,r16
20089114:	d9400015 	stw	r5,0(sp)
20089118:	00846e40 	call	200846e4 <__sinit>
2008911c:	d9800017 	ldw	r6,0(sp)
20089120:	8009883a 	mov	r4,r16
20089124:	880b883a 	mov	r5,r17
20089128:	dfc00317 	ldw	ra,12(sp)
2008912c:	dc400217 	ldw	r17,8(sp)
20089130:	dc000117 	ldw	r16,4(sp)
20089134:	dec00404 	addi	sp,sp,16
20089138:	0088f5c1 	jmpi	20088f5c <_fputwc_r>

2008913c <_fstat_r>:
2008913c:	defffd04 	addi	sp,sp,-12
20089140:	dc000015 	stw	r16,0(sp)
20089144:	04000034 	movhi	r16,0
20089148:	dc400115 	stw	r17,4(sp)
2008914c:	84082904 	addi	r16,r16,8356
20089150:	2023883a 	mov	r17,r4
20089154:	2809883a 	mov	r4,r5
20089158:	300b883a 	mov	r5,r6
2008915c:	dfc00215 	stw	ra,8(sp)
20089160:	80000015 	stw	zero,0(r16)
20089164:	008c9f40 	call	2008c9f4 <fstat>
20089168:	00ffffc4 	movi	r3,-1
2008916c:	10c00526 	beq	r2,r3,20089184 <_fstat_r+0x48>
20089170:	dfc00217 	ldw	ra,8(sp)
20089174:	dc400117 	ldw	r17,4(sp)
20089178:	dc000017 	ldw	r16,0(sp)
2008917c:	dec00304 	addi	sp,sp,12
20089180:	f800283a 	ret
20089184:	80c00017 	ldw	r3,0(r16)
20089188:	183ff926 	beq	r3,zero,20089170 <__flash_rwdata_start+0xffff76c0>
2008918c:	88c00015 	stw	r3,0(r17)
20089190:	003ff706 	br	20089170 <__flash_rwdata_start+0xffff76c0>

20089194 <_isatty_r>:
20089194:	defffd04 	addi	sp,sp,-12
20089198:	dc000015 	stw	r16,0(sp)
2008919c:	04000034 	movhi	r16,0
200891a0:	dc400115 	stw	r17,4(sp)
200891a4:	84082904 	addi	r16,r16,8356
200891a8:	2023883a 	mov	r17,r4
200891ac:	2809883a 	mov	r4,r5
200891b0:	dfc00215 	stw	ra,8(sp)
200891b4:	80000015 	stw	zero,0(r16)
200891b8:	008cca40 	call	2008cca4 <isatty>
200891bc:	00ffffc4 	movi	r3,-1
200891c0:	10c00526 	beq	r2,r3,200891d8 <_isatty_r+0x44>
200891c4:	dfc00217 	ldw	ra,8(sp)
200891c8:	dc400117 	ldw	r17,4(sp)
200891cc:	dc000017 	ldw	r16,0(sp)
200891d0:	dec00304 	addi	sp,sp,12
200891d4:	f800283a 	ret
200891d8:	80c00017 	ldw	r3,0(r16)
200891dc:	183ff926 	beq	r3,zero,200891c4 <__flash_rwdata_start+0xffff7714>
200891e0:	88c00015 	stw	r3,0(r17)
200891e4:	003ff706 	br	200891c4 <__flash_rwdata_start+0xffff7714>

200891e8 <_lseek_r>:
200891e8:	defffd04 	addi	sp,sp,-12
200891ec:	dc000015 	stw	r16,0(sp)
200891f0:	04000034 	movhi	r16,0
200891f4:	dc400115 	stw	r17,4(sp)
200891f8:	84082904 	addi	r16,r16,8356
200891fc:	2023883a 	mov	r17,r4
20089200:	2809883a 	mov	r4,r5
20089204:	300b883a 	mov	r5,r6
20089208:	380d883a 	mov	r6,r7
2008920c:	dfc00215 	stw	ra,8(sp)
20089210:	80000015 	stw	zero,0(r16)
20089214:	008ce7c0 	call	2008ce7c <lseek>
20089218:	00ffffc4 	movi	r3,-1
2008921c:	10c00526 	beq	r2,r3,20089234 <_lseek_r+0x4c>
20089220:	dfc00217 	ldw	ra,8(sp)
20089224:	dc400117 	ldw	r17,4(sp)
20089228:	dc000017 	ldw	r16,0(sp)
2008922c:	dec00304 	addi	sp,sp,12
20089230:	f800283a 	ret
20089234:	80c00017 	ldw	r3,0(r16)
20089238:	183ff926 	beq	r3,zero,20089220 <__flash_rwdata_start+0xffff7770>
2008923c:	88c00015 	stw	r3,0(r17)
20089240:	003ff706 	br	20089220 <__flash_rwdata_start+0xffff7770>

20089244 <_read_r>:
20089244:	defffd04 	addi	sp,sp,-12
20089248:	dc000015 	stw	r16,0(sp)
2008924c:	04000034 	movhi	r16,0
20089250:	dc400115 	stw	r17,4(sp)
20089254:	84082904 	addi	r16,r16,8356
20089258:	2023883a 	mov	r17,r4
2008925c:	2809883a 	mov	r4,r5
20089260:	300b883a 	mov	r5,r6
20089264:	380d883a 	mov	r6,r7
20089268:	dfc00215 	stw	ra,8(sp)
2008926c:	80000015 	stw	zero,0(r16)
20089270:	008d0580 	call	2008d058 <read>
20089274:	00ffffc4 	movi	r3,-1
20089278:	10c00526 	beq	r2,r3,20089290 <_read_r+0x4c>
2008927c:	dfc00217 	ldw	ra,8(sp)
20089280:	dc400117 	ldw	r17,4(sp)
20089284:	dc000017 	ldw	r16,0(sp)
20089288:	dec00304 	addi	sp,sp,12
2008928c:	f800283a 	ret
20089290:	80c00017 	ldw	r3,0(r16)
20089294:	183ff926 	beq	r3,zero,2008927c <__flash_rwdata_start+0xffff77cc>
20089298:	88c00015 	stw	r3,0(r17)
2008929c:	003ff706 	br	2008927c <__flash_rwdata_start+0xffff77cc>

200892a0 <__swbuf_r>:
200892a0:	defffc04 	addi	sp,sp,-16
200892a4:	dc800215 	stw	r18,8(sp)
200892a8:	dc400115 	stw	r17,4(sp)
200892ac:	dc000015 	stw	r16,0(sp)
200892b0:	dfc00315 	stw	ra,12(sp)
200892b4:	2025883a 	mov	r18,r4
200892b8:	2823883a 	mov	r17,r5
200892bc:	3021883a 	mov	r16,r6
200892c0:	20000226 	beq	r4,zero,200892cc <__swbuf_r+0x2c>
200892c4:	20800e17 	ldw	r2,56(r4)
200892c8:	10004126 	beq	r2,zero,200893d0 <__swbuf_r+0x130>
200892cc:	80c00617 	ldw	r3,24(r16)
200892d0:	8180030b 	ldhu	r6,12(r16)
200892d4:	80c00215 	stw	r3,8(r16)
200892d8:	30c0020c 	andi	r3,r6,8
200892dc:	18003526 	beq	r3,zero,200893b4 <__swbuf_r+0x114>
200892e0:	80c00417 	ldw	r3,16(r16)
200892e4:	18003326 	beq	r3,zero,200893b4 <__swbuf_r+0x114>
200892e8:	3088000c 	andi	r2,r6,8192
200892ec:	8c403fcc 	andi	r17,r17,255
200892f0:	10001726 	beq	r2,zero,20089350 <__swbuf_r+0xb0>
200892f4:	80800017 	ldw	r2,0(r16)
200892f8:	81000517 	ldw	r4,20(r16)
200892fc:	10c7c83a 	sub	r3,r2,r3
20089300:	19001d0e 	bge	r3,r4,20089378 <__swbuf_r+0xd8>
20089304:	18c00044 	addi	r3,r3,1
20089308:	81400217 	ldw	r5,8(r16)
2008930c:	11000044 	addi	r4,r2,1
20089310:	81000015 	stw	r4,0(r16)
20089314:	297fffc4 	addi	r5,r5,-1
20089318:	81400215 	stw	r5,8(r16)
2008931c:	14400005 	stb	r17,0(r2)
20089320:	80800517 	ldw	r2,20(r16)
20089324:	10c01d26 	beq	r2,r3,2008939c <__swbuf_r+0xfc>
20089328:	8080030b 	ldhu	r2,12(r16)
2008932c:	1080004c 	andi	r2,r2,1
20089330:	1000181e 	bne	r2,zero,20089394 <__swbuf_r+0xf4>
20089334:	8805883a 	mov	r2,r17
20089338:	dfc00317 	ldw	ra,12(sp)
2008933c:	dc800217 	ldw	r18,8(sp)
20089340:	dc400117 	ldw	r17,4(sp)
20089344:	dc000017 	ldw	r16,0(sp)
20089348:	dec00404 	addi	sp,sp,16
2008934c:	f800283a 	ret
20089350:	81001917 	ldw	r4,100(r16)
20089354:	00b7ffc4 	movi	r2,-8193
20089358:	31880014 	ori	r6,r6,8192
2008935c:	2084703a 	and	r2,r4,r2
20089360:	80801915 	stw	r2,100(r16)
20089364:	80800017 	ldw	r2,0(r16)
20089368:	81000517 	ldw	r4,20(r16)
2008936c:	8180030d 	sth	r6,12(r16)
20089370:	10c7c83a 	sub	r3,r2,r3
20089374:	193fe316 	blt	r3,r4,20089304 <__flash_rwdata_start+0xffff7854>
20089378:	9009883a 	mov	r4,r18
2008937c:	800b883a 	mov	r5,r16
20089380:	00843080 	call	20084308 <_fflush_r>
20089384:	1000091e 	bne	r2,zero,200893ac <__swbuf_r+0x10c>
20089388:	80800017 	ldw	r2,0(r16)
2008938c:	00c00044 	movi	r3,1
20089390:	003fdd06 	br	20089308 <__flash_rwdata_start+0xffff7858>
20089394:	00800284 	movi	r2,10
20089398:	88bfe61e 	bne	r17,r2,20089334 <__flash_rwdata_start+0xffff7884>
2008939c:	9009883a 	mov	r4,r18
200893a0:	800b883a 	mov	r5,r16
200893a4:	00843080 	call	20084308 <_fflush_r>
200893a8:	103fe226 	beq	r2,zero,20089334 <__flash_rwdata_start+0xffff7884>
200893ac:	00bfffc4 	movi	r2,-1
200893b0:	003fe106 	br	20089338 <__flash_rwdata_start+0xffff7888>
200893b4:	9009883a 	mov	r4,r18
200893b8:	800b883a 	mov	r5,r16
200893bc:	00826840 	call	20082684 <__swsetup_r>
200893c0:	103ffa1e 	bne	r2,zero,200893ac <__flash_rwdata_start+0xffff78fc>
200893c4:	8180030b 	ldhu	r6,12(r16)
200893c8:	80c00417 	ldw	r3,16(r16)
200893cc:	003fc606 	br	200892e8 <__flash_rwdata_start+0xffff7838>
200893d0:	00846e40 	call	200846e4 <__sinit>
200893d4:	003fbd06 	br	200892cc <__flash_rwdata_start+0xffff781c>

200893d8 <__swbuf>:
200893d8:	00c00034 	movhi	r3,0
200893dc:	18c81104 	addi	r3,r3,8260
200893e0:	2005883a 	mov	r2,r4
200893e4:	19000017 	ldw	r4,0(r3)
200893e8:	280d883a 	mov	r6,r5
200893ec:	100b883a 	mov	r5,r2
200893f0:	00892a01 	jmpi	200892a0 <__swbuf_r>

200893f4 <_wcrtomb_r>:
200893f4:	defff604 	addi	sp,sp,-40
200893f8:	00800034 	movhi	r2,0
200893fc:	dc800815 	stw	r18,32(sp)
20089400:	dc400715 	stw	r17,28(sp)
20089404:	dc000615 	stw	r16,24(sp)
20089408:	10881504 	addi	r2,r2,8276
2008940c:	dfc00915 	stw	ra,36(sp)
20089410:	2021883a 	mov	r16,r4
20089414:	3823883a 	mov	r17,r7
20089418:	14800017 	ldw	r18,0(r2)
2008941c:	28001426 	beq	r5,zero,20089470 <_wcrtomb_r+0x7c>
20089420:	d9400415 	stw	r5,16(sp)
20089424:	d9800515 	stw	r6,20(sp)
20089428:	008520c0 	call	2008520c <__locale_charset>
2008942c:	d9400417 	ldw	r5,16(sp)
20089430:	d9800517 	ldw	r6,20(sp)
20089434:	8009883a 	mov	r4,r16
20089438:	dc400015 	stw	r17,0(sp)
2008943c:	100f883a 	mov	r7,r2
20089440:	903ee83a 	callr	r18
20089444:	00ffffc4 	movi	r3,-1
20089448:	10c0031e 	bne	r2,r3,20089458 <_wcrtomb_r+0x64>
2008944c:	88000015 	stw	zero,0(r17)
20089450:	00c02284 	movi	r3,138
20089454:	80c00015 	stw	r3,0(r16)
20089458:	dfc00917 	ldw	ra,36(sp)
2008945c:	dc800817 	ldw	r18,32(sp)
20089460:	dc400717 	ldw	r17,28(sp)
20089464:	dc000617 	ldw	r16,24(sp)
20089468:	dec00a04 	addi	sp,sp,40
2008946c:	f800283a 	ret
20089470:	008520c0 	call	2008520c <__locale_charset>
20089474:	8009883a 	mov	r4,r16
20089478:	dc400015 	stw	r17,0(sp)
2008947c:	d9400104 	addi	r5,sp,4
20089480:	000d883a 	mov	r6,zero
20089484:	100f883a 	mov	r7,r2
20089488:	903ee83a 	callr	r18
2008948c:	003fed06 	br	20089444 <__flash_rwdata_start+0xffff7994>

20089490 <wcrtomb>:
20089490:	defff604 	addi	sp,sp,-40
20089494:	00800034 	movhi	r2,0
20089498:	dc800615 	stw	r18,24(sp)
2008949c:	dc400515 	stw	r17,20(sp)
200894a0:	dc000415 	stw	r16,16(sp)
200894a4:	10881104 	addi	r2,r2,8260
200894a8:	dfc00915 	stw	ra,36(sp)
200894ac:	dd000815 	stw	r20,32(sp)
200894b0:	dcc00715 	stw	r19,28(sp)
200894b4:	2021883a 	mov	r16,r4
200894b8:	3025883a 	mov	r18,r6
200894bc:	14400017 	ldw	r17,0(r2)
200894c0:	20001826 	beq	r4,zero,20089524 <wcrtomb+0x94>
200894c4:	00800034 	movhi	r2,0
200894c8:	10881504 	addi	r2,r2,8276
200894cc:	15000017 	ldw	r20,0(r2)
200894d0:	2827883a 	mov	r19,r5
200894d4:	008520c0 	call	2008520c <__locale_charset>
200894d8:	8809883a 	mov	r4,r17
200894dc:	dc800015 	stw	r18,0(sp)
200894e0:	800b883a 	mov	r5,r16
200894e4:	980d883a 	mov	r6,r19
200894e8:	100f883a 	mov	r7,r2
200894ec:	a03ee83a 	callr	r20
200894f0:	00ffffc4 	movi	r3,-1
200894f4:	10c0031e 	bne	r2,r3,20089504 <wcrtomb+0x74>
200894f8:	90000015 	stw	zero,0(r18)
200894fc:	00c02284 	movi	r3,138
20089500:	88c00015 	stw	r3,0(r17)
20089504:	dfc00917 	ldw	ra,36(sp)
20089508:	dd000817 	ldw	r20,32(sp)
2008950c:	dcc00717 	ldw	r19,28(sp)
20089510:	dc800617 	ldw	r18,24(sp)
20089514:	dc400517 	ldw	r17,20(sp)
20089518:	dc000417 	ldw	r16,16(sp)
2008951c:	dec00a04 	addi	sp,sp,40
20089520:	f800283a 	ret
20089524:	00800034 	movhi	r2,0
20089528:	10881504 	addi	r2,r2,8276
2008952c:	14000017 	ldw	r16,0(r2)
20089530:	008520c0 	call	2008520c <__locale_charset>
20089534:	8809883a 	mov	r4,r17
20089538:	dc800015 	stw	r18,0(sp)
2008953c:	d9400104 	addi	r5,sp,4
20089540:	000d883a 	mov	r6,zero
20089544:	100f883a 	mov	r7,r2
20089548:	803ee83a 	callr	r16
2008954c:	003fe806 	br	200894f0 <__flash_rwdata_start+0xffff7a40>

20089550 <__ascii_wctomb>:
20089550:	28000526 	beq	r5,zero,20089568 <__ascii_wctomb+0x18>
20089554:	00803fc4 	movi	r2,255
20089558:	11800536 	bltu	r2,r6,20089570 <__ascii_wctomb+0x20>
2008955c:	29800005 	stb	r6,0(r5)
20089560:	00800044 	movi	r2,1
20089564:	f800283a 	ret
20089568:	0005883a 	mov	r2,zero
2008956c:	f800283a 	ret
20089570:	00802284 	movi	r2,138
20089574:	20800015 	stw	r2,0(r4)
20089578:	00bfffc4 	movi	r2,-1
2008957c:	f800283a 	ret

20089580 <_wctomb_r>:
20089580:	00800034 	movhi	r2,0
20089584:	defff904 	addi	sp,sp,-28
20089588:	10881504 	addi	r2,r2,8276
2008958c:	dfc00615 	stw	ra,24(sp)
20089590:	dc400515 	stw	r17,20(sp)
20089594:	dc000415 	stw	r16,16(sp)
20089598:	3823883a 	mov	r17,r7
2008959c:	14000017 	ldw	r16,0(r2)
200895a0:	d9000115 	stw	r4,4(sp)
200895a4:	d9400215 	stw	r5,8(sp)
200895a8:	d9800315 	stw	r6,12(sp)
200895ac:	008520c0 	call	2008520c <__locale_charset>
200895b0:	d9000117 	ldw	r4,4(sp)
200895b4:	d9400217 	ldw	r5,8(sp)
200895b8:	d9800317 	ldw	r6,12(sp)
200895bc:	dc400015 	stw	r17,0(sp)
200895c0:	100f883a 	mov	r7,r2
200895c4:	803ee83a 	callr	r16
200895c8:	dfc00617 	ldw	ra,24(sp)
200895cc:	dc400517 	ldw	r17,20(sp)
200895d0:	dc000417 	ldw	r16,16(sp)
200895d4:	dec00704 	addi	sp,sp,28
200895d8:	f800283a 	ret

200895dc <__udivdi3>:
200895dc:	defff504 	addi	sp,sp,-44
200895e0:	dcc00415 	stw	r19,16(sp)
200895e4:	dc000115 	stw	r16,4(sp)
200895e8:	dfc00a15 	stw	ra,40(sp)
200895ec:	df000915 	stw	fp,36(sp)
200895f0:	ddc00815 	stw	r23,32(sp)
200895f4:	dd800715 	stw	r22,28(sp)
200895f8:	dd400615 	stw	r21,24(sp)
200895fc:	dd000515 	stw	r20,20(sp)
20089600:	dc800315 	stw	r18,12(sp)
20089604:	dc400215 	stw	r17,8(sp)
20089608:	2027883a 	mov	r19,r4
2008960c:	2821883a 	mov	r16,r5
20089610:	3800421e 	bne	r7,zero,2008971c <__udivdi3+0x140>
20089614:	3025883a 	mov	r18,r6
20089618:	2023883a 	mov	r17,r4
2008961c:	2980542e 	bgeu	r5,r6,20089770 <__udivdi3+0x194>
20089620:	00bfffd4 	movui	r2,65535
20089624:	282d883a 	mov	r22,r5
20089628:	1180a836 	bltu	r2,r6,200898cc <__udivdi3+0x2f0>
2008962c:	00803fc4 	movi	r2,255
20089630:	1181422e 	bgeu	r2,r6,20089b3c <__udivdi3+0x560>
20089634:	00800204 	movi	r2,8
20089638:	1007883a 	mov	r3,r2
2008963c:	3084d83a 	srl	r2,r6,r2
20089640:	01000034 	movhi	r4,0
20089644:	21007b04 	addi	r4,r4,492
20089648:	2085883a 	add	r2,r4,r2
2008964c:	10800003 	ldbu	r2,0(r2)
20089650:	10c7883a 	add	r3,r2,r3
20089654:	00800804 	movi	r2,32
20089658:	10c5c83a 	sub	r2,r2,r3
2008965c:	10000526 	beq	r2,zero,20089674 <__udivdi3+0x98>
20089660:	80a0983a 	sll	r16,r16,r2
20089664:	98c6d83a 	srl	r3,r19,r3
20089668:	30a4983a 	sll	r18,r6,r2
2008966c:	98a2983a 	sll	r17,r19,r2
20089670:	80ecb03a 	or	r22,r16,r3
20089674:	902ad43a 	srli	r21,r18,16
20089678:	b009883a 	mov	r4,r22
2008967c:	953fffcc 	andi	r20,r18,65535
20089680:	a80b883a 	mov	r5,r21
20089684:	008a2500 	call	2008a250 <__umodsi3>
20089688:	b009883a 	mov	r4,r22
2008968c:	a80b883a 	mov	r5,r21
20089690:	1027883a 	mov	r19,r2
20089694:	008a2480 	call	2008a248 <__udivsi3>
20089698:	1021883a 	mov	r16,r2
2008969c:	8806d43a 	srli	r3,r17,16
200896a0:	9804943a 	slli	r2,r19,16
200896a4:	8527383a 	mul	r19,r16,r20
200896a8:	10c4b03a 	or	r2,r2,r3
200896ac:	14c0052e 	bgeu	r2,r19,200896c4 <__udivdi3+0xe8>
200896b0:	1485883a 	add	r2,r2,r18
200896b4:	80ffffc4 	addi	r3,r16,-1
200896b8:	14800136 	bltu	r2,r18,200896c0 <__udivdi3+0xe4>
200896bc:	14c13436 	bltu	r2,r19,20089b90 <__udivdi3+0x5b4>
200896c0:	1821883a 	mov	r16,r3
200896c4:	14e7c83a 	sub	r19,r2,r19
200896c8:	9809883a 	mov	r4,r19
200896cc:	a80b883a 	mov	r5,r21
200896d0:	008a2500 	call	2008a250 <__umodsi3>
200896d4:	102d883a 	mov	r22,r2
200896d8:	9809883a 	mov	r4,r19
200896dc:	a80b883a 	mov	r5,r21
200896e0:	008a2480 	call	2008a248 <__udivsi3>
200896e4:	b02c943a 	slli	r22,r22,16
200896e8:	1529383a 	mul	r20,r2,r20
200896ec:	8c7fffcc 	andi	r17,r17,65535
200896f0:	b462b03a 	or	r17,r22,r17
200896f4:	8d00052e 	bgeu	r17,r20,2008970c <__udivdi3+0x130>
200896f8:	8ca3883a 	add	r17,r17,r18
200896fc:	10ffffc4 	addi	r3,r2,-1
20089700:	8c80f636 	bltu	r17,r18,20089adc <__udivdi3+0x500>
20089704:	8d00f52e 	bgeu	r17,r20,20089adc <__udivdi3+0x500>
20089708:	10bfff84 	addi	r2,r2,-2
2008970c:	8020943a 	slli	r16,r16,16
20089710:	0007883a 	mov	r3,zero
20089714:	1404b03a 	or	r2,r2,r16
20089718:	00005b06 	br	20089888 <__udivdi3+0x2ac>
2008971c:	29c05836 	bltu	r5,r7,20089880 <__udivdi3+0x2a4>
20089720:	00bfffd4 	movui	r2,65535
20089724:	11c0642e 	bgeu	r2,r7,200898b8 <__udivdi3+0x2dc>
20089728:	00804034 	movhi	r2,256
2008972c:	10bfffc4 	addi	r2,r2,-1
20089730:	11c0f32e 	bgeu	r2,r7,20089b00 <__udivdi3+0x524>
20089734:	00c00604 	movi	r3,24
20089738:	180b883a 	mov	r5,r3
2008973c:	38c6d83a 	srl	r3,r7,r3
20089740:	00800034 	movhi	r2,0
20089744:	10807b04 	addi	r2,r2,492
20089748:	10c7883a 	add	r3,r2,r3
2008974c:	18c00003 	ldbu	r3,0(r3)
20089750:	01000804 	movi	r4,32
20089754:	1947883a 	add	r3,r3,r5
20089758:	20e5c83a 	sub	r18,r4,r3
2008975c:	9000661e 	bne	r18,zero,200898f8 <__udivdi3+0x31c>
20089760:	3c00f936 	bltu	r7,r16,20089b48 <__udivdi3+0x56c>
20089764:	9985403a 	cmpgeu	r2,r19,r6
20089768:	0007883a 	mov	r3,zero
2008976c:	00004606 	br	20089888 <__udivdi3+0x2ac>
20089770:	3000041e 	bne	r6,zero,20089784 <__udivdi3+0x1a8>
20089774:	01000044 	movi	r4,1
20089778:	000b883a 	mov	r5,zero
2008977c:	008a2480 	call	2008a248 <__udivsi3>
20089780:	1025883a 	mov	r18,r2
20089784:	00bfffd4 	movui	r2,65535
20089788:	1480562e 	bgeu	r2,r18,200898e4 <__udivdi3+0x308>
2008978c:	00804034 	movhi	r2,256
20089790:	10bfffc4 	addi	r2,r2,-1
20089794:	1480e32e 	bgeu	r2,r18,20089b24 <__udivdi3+0x548>
20089798:	00800604 	movi	r2,24
2008979c:	1007883a 	mov	r3,r2
200897a0:	9084d83a 	srl	r2,r18,r2
200897a4:	01000034 	movhi	r4,0
200897a8:	21007b04 	addi	r4,r4,492
200897ac:	2085883a 	add	r2,r4,r2
200897b0:	10800003 	ldbu	r2,0(r2)
200897b4:	10c5883a 	add	r2,r2,r3
200897b8:	00c00804 	movi	r3,32
200897bc:	1887c83a 	sub	r3,r3,r2
200897c0:	1800911e 	bne	r3,zero,20089a08 <__udivdi3+0x42c>
200897c4:	9028d43a 	srli	r20,r18,16
200897c8:	84a1c83a 	sub	r16,r16,r18
200897cc:	957fffcc 	andi	r21,r18,65535
200897d0:	00c00044 	movi	r3,1
200897d4:	8009883a 	mov	r4,r16
200897d8:	a00b883a 	mov	r5,r20
200897dc:	d8c00015 	stw	r3,0(sp)
200897e0:	008a2500 	call	2008a250 <__umodsi3>
200897e4:	8009883a 	mov	r4,r16
200897e8:	a00b883a 	mov	r5,r20
200897ec:	1027883a 	mov	r19,r2
200897f0:	008a2480 	call	2008a248 <__udivsi3>
200897f4:	1021883a 	mov	r16,r2
200897f8:	880cd43a 	srli	r6,r17,16
200897fc:	9804943a 	slli	r2,r19,16
20089800:	8567383a 	mul	r19,r16,r21
20089804:	d8c00017 	ldw	r3,0(sp)
20089808:	1188b03a 	or	r4,r2,r6
2008980c:	24c0052e 	bgeu	r4,r19,20089824 <__udivdi3+0x248>
20089810:	2489883a 	add	r4,r4,r18
20089814:	80bfffc4 	addi	r2,r16,-1
20089818:	24800136 	bltu	r4,r18,20089820 <__udivdi3+0x244>
2008981c:	24c0d936 	bltu	r4,r19,20089b84 <__udivdi3+0x5a8>
20089820:	1021883a 	mov	r16,r2
20089824:	24e7c83a 	sub	r19,r4,r19
20089828:	9809883a 	mov	r4,r19
2008982c:	a00b883a 	mov	r5,r20
20089830:	d8c00015 	stw	r3,0(sp)
20089834:	008a2500 	call	2008a250 <__umodsi3>
20089838:	102d883a 	mov	r22,r2
2008983c:	9809883a 	mov	r4,r19
20089840:	a00b883a 	mov	r5,r20
20089844:	008a2480 	call	2008a248 <__udivsi3>
20089848:	b02c943a 	slli	r22,r22,16
2008984c:	156b383a 	mul	r21,r2,r21
20089850:	8c7fffcc 	andi	r17,r17,65535
20089854:	b462b03a 	or	r17,r22,r17
20089858:	d8c00017 	ldw	r3,0(sp)
2008985c:	8d40052e 	bgeu	r17,r21,20089874 <__udivdi3+0x298>
20089860:	8ca3883a 	add	r17,r17,r18
20089864:	113fffc4 	addi	r4,r2,-1
20089868:	8c809a36 	bltu	r17,r18,20089ad4 <__udivdi3+0x4f8>
2008986c:	8d40992e 	bgeu	r17,r21,20089ad4 <__udivdi3+0x4f8>
20089870:	10bfff84 	addi	r2,r2,-2
20089874:	8020943a 	slli	r16,r16,16
20089878:	1404b03a 	or	r2,r2,r16
2008987c:	00000206 	br	20089888 <__udivdi3+0x2ac>
20089880:	0007883a 	mov	r3,zero
20089884:	0005883a 	mov	r2,zero
20089888:	dfc00a17 	ldw	ra,40(sp)
2008988c:	df000917 	ldw	fp,36(sp)
20089890:	ddc00817 	ldw	r23,32(sp)
20089894:	dd800717 	ldw	r22,28(sp)
20089898:	dd400617 	ldw	r21,24(sp)
2008989c:	dd000517 	ldw	r20,20(sp)
200898a0:	dcc00417 	ldw	r19,16(sp)
200898a4:	dc800317 	ldw	r18,12(sp)
200898a8:	dc400217 	ldw	r17,8(sp)
200898ac:	dc000117 	ldw	r16,4(sp)
200898b0:	dec00b04 	addi	sp,sp,44
200898b4:	f800283a 	ret
200898b8:	00803fc4 	movi	r2,255
200898bc:	11c0932e 	bgeu	r2,r7,20089b0c <__udivdi3+0x530>
200898c0:	00c00204 	movi	r3,8
200898c4:	180b883a 	mov	r5,r3
200898c8:	003f9c06 	br	2008973c <__flash_rwdata_start+0xffff7c8c>
200898cc:	00804034 	movhi	r2,256
200898d0:	10bfffc4 	addi	r2,r2,-1
200898d4:	1180902e 	bgeu	r2,r6,20089b18 <__udivdi3+0x53c>
200898d8:	00800604 	movi	r2,24
200898dc:	1007883a 	mov	r3,r2
200898e0:	003f5606 	br	2008963c <__flash_rwdata_start+0xffff7b8c>
200898e4:	00803fc4 	movi	r2,255
200898e8:	1480912e 	bgeu	r2,r18,20089b30 <__udivdi3+0x554>
200898ec:	00800204 	movi	r2,8
200898f0:	1007883a 	mov	r3,r2
200898f4:	003faa06 	br	200897a0 <__flash_rwdata_start+0xffff7cf0>
200898f8:	30eed83a 	srl	r23,r6,r3
200898fc:	3c8e983a 	sll	r7,r7,r18
20089900:	80f8d83a 	srl	fp,r16,r3
20089904:	98c6d83a 	srl	r3,r19,r3
20089908:	3deeb03a 	or	r23,r7,r23
2008990c:	b828d43a 	srli	r20,r23,16
20089910:	84a0983a 	sll	r16,r16,r18
20089914:	e009883a 	mov	r4,fp
20089918:	a00b883a 	mov	r5,r20
2008991c:	80e2b03a 	or	r17,r16,r3
20089920:	34aa983a 	sll	r21,r6,r18
20089924:	008a2500 	call	2008a250 <__umodsi3>
20089928:	e009883a 	mov	r4,fp
2008992c:	a00b883a 	mov	r5,r20
20089930:	102d883a 	mov	r22,r2
20089934:	008a2480 	call	2008a248 <__udivsi3>
20089938:	1021883a 	mov	r16,r2
2008993c:	bf3fffcc 	andi	fp,r23,65535
20089940:	b004943a 	slli	r2,r22,16
20089944:	8808d43a 	srli	r4,r17,16
20089948:	872d383a 	mul	r22,r16,fp
2008994c:	1104b03a 	or	r2,r2,r4
20089950:	1580042e 	bgeu	r2,r22,20089964 <__udivdi3+0x388>
20089954:	15c5883a 	add	r2,r2,r23
20089958:	80ffffc4 	addi	r3,r16,-1
2008995c:	15c0812e 	bgeu	r2,r23,20089b64 <__udivdi3+0x588>
20089960:	1821883a 	mov	r16,r3
20089964:	15adc83a 	sub	r22,r2,r22
20089968:	b009883a 	mov	r4,r22
2008996c:	a00b883a 	mov	r5,r20
20089970:	008a2500 	call	2008a250 <__umodsi3>
20089974:	a00b883a 	mov	r5,r20
20089978:	b009883a 	mov	r4,r22
2008997c:	d8800015 	stw	r2,0(sp)
20089980:	008a2480 	call	2008a248 <__udivsi3>
20089984:	d8c00017 	ldw	r3,0(sp)
20089988:	170b383a 	mul	r5,r2,fp
2008998c:	8c7fffcc 	andi	r17,r17,65535
20089990:	1806943a 	slli	r3,r3,16
20089994:	1c46b03a 	or	r3,r3,r17
20089998:	1940042e 	bgeu	r3,r5,200899ac <__udivdi3+0x3d0>
2008999c:	1dc7883a 	add	r3,r3,r23
200899a0:	113fffc4 	addi	r4,r2,-1
200899a4:	1dc06b2e 	bgeu	r3,r23,20089b54 <__udivdi3+0x578>
200899a8:	2005883a 	mov	r2,r4
200899ac:	8020943a 	slli	r16,r16,16
200899b0:	a9ffffcc 	andi	r7,r21,65535
200899b4:	a82ad43a 	srli	r21,r21,16
200899b8:	1404b03a 	or	r2,r2,r16
200899bc:	113fffcc 	andi	r4,r2,65535
200899c0:	100cd43a 	srli	r6,r2,16
200899c4:	21d3383a 	mul	r9,r4,r7
200899c8:	2549383a 	mul	r4,r4,r21
200899cc:	31cf383a 	mul	r7,r6,r7
200899d0:	4810d43a 	srli	r8,r9,16
200899d4:	1947c83a 	sub	r3,r3,r5
200899d8:	3909883a 	add	r4,r7,r4
200899dc:	2209883a 	add	r4,r4,r8
200899e0:	354d383a 	mul	r6,r6,r21
200899e4:	21c0022e 	bgeu	r4,r7,200899f0 <__udivdi3+0x414>
200899e8:	01400074 	movhi	r5,1
200899ec:	314d883a 	add	r6,r6,r5
200899f0:	202ad43a 	srli	r21,r4,16
200899f4:	354d883a 	add	r6,r6,r21
200899f8:	19803f36 	bltu	r3,r6,20089af8 <__udivdi3+0x51c>
200899fc:	19803926 	beq	r3,r6,20089ae4 <__udivdi3+0x508>
20089a00:	0007883a 	mov	r3,zero
20089a04:	003fa006 	br	20089888 <__flash_rwdata_start+0xffff7dd8>
20089a08:	90e4983a 	sll	r18,r18,r3
20089a0c:	80aad83a 	srl	r21,r16,r2
20089a10:	80e0983a 	sll	r16,r16,r3
20089a14:	9028d43a 	srli	r20,r18,16
20089a18:	9884d83a 	srl	r2,r19,r2
20089a1c:	a809883a 	mov	r4,r21
20089a20:	a00b883a 	mov	r5,r20
20089a24:	80acb03a 	or	r22,r16,r2
20089a28:	98e2983a 	sll	r17,r19,r3
20089a2c:	008a2500 	call	2008a250 <__umodsi3>
20089a30:	a809883a 	mov	r4,r21
20089a34:	a00b883a 	mov	r5,r20
20089a38:	1021883a 	mov	r16,r2
20089a3c:	008a2480 	call	2008a248 <__udivsi3>
20089a40:	957fffcc 	andi	r21,r18,65535
20089a44:	8020943a 	slli	r16,r16,16
20089a48:	b00ad43a 	srli	r5,r22,16
20089a4c:	1567383a 	mul	r19,r2,r21
20089a50:	102f883a 	mov	r23,r2
20089a54:	8148b03a 	or	r4,r16,r5
20089a58:	24c0062e 	bgeu	r4,r19,20089a74 <__udivdi3+0x498>
20089a5c:	2489883a 	add	r4,r4,r18
20089a60:	10bfffc4 	addi	r2,r2,-1
20089a64:	24804536 	bltu	r4,r18,20089b7c <__udivdi3+0x5a0>
20089a68:	24c0442e 	bgeu	r4,r19,20089b7c <__udivdi3+0x5a0>
20089a6c:	bdffff84 	addi	r23,r23,-2
20089a70:	2489883a 	add	r4,r4,r18
20089a74:	24e7c83a 	sub	r19,r4,r19
20089a78:	9809883a 	mov	r4,r19
20089a7c:	a00b883a 	mov	r5,r20
20089a80:	008a2500 	call	2008a250 <__umodsi3>
20089a84:	1021883a 	mov	r16,r2
20089a88:	9809883a 	mov	r4,r19
20089a8c:	a00b883a 	mov	r5,r20
20089a90:	008a2480 	call	2008a248 <__udivsi3>
20089a94:	8020943a 	slli	r16,r16,16
20089a98:	1007883a 	mov	r3,r2
20089a9c:	1545383a 	mul	r2,r2,r21
20089aa0:	b13fffcc 	andi	r4,r22,65535
20089aa4:	8108b03a 	or	r4,r16,r4
20089aa8:	2080062e 	bgeu	r4,r2,20089ac4 <__udivdi3+0x4e8>
20089aac:	2489883a 	add	r4,r4,r18
20089ab0:	197fffc4 	addi	r5,r3,-1
20089ab4:	24802f36 	bltu	r4,r18,20089b74 <__udivdi3+0x598>
20089ab8:	20802e2e 	bgeu	r4,r2,20089b74 <__udivdi3+0x598>
20089abc:	18ffff84 	addi	r3,r3,-2
20089ac0:	2489883a 	add	r4,r4,r18
20089ac4:	b82e943a 	slli	r23,r23,16
20089ac8:	20a1c83a 	sub	r16,r4,r2
20089acc:	1dc6b03a 	or	r3,r3,r23
20089ad0:	003f4006 	br	200897d4 <__flash_rwdata_start+0xffff7d24>
20089ad4:	2005883a 	mov	r2,r4
20089ad8:	003f6606 	br	20089874 <__flash_rwdata_start+0xffff7dc4>
20089adc:	1805883a 	mov	r2,r3
20089ae0:	003f0a06 	br	2008970c <__flash_rwdata_start+0xffff7c5c>
20089ae4:	2006943a 	slli	r3,r4,16
20089ae8:	9c88983a 	sll	r4,r19,r18
20089aec:	4a7fffcc 	andi	r9,r9,65535
20089af0:	1a47883a 	add	r3,r3,r9
20089af4:	20ffc22e 	bgeu	r4,r3,20089a00 <__flash_rwdata_start+0xffff7f50>
20089af8:	10bfffc4 	addi	r2,r2,-1
20089afc:	003fc006 	br	20089a00 <__flash_rwdata_start+0xffff7f50>
20089b00:	00c00404 	movi	r3,16
20089b04:	180b883a 	mov	r5,r3
20089b08:	003f0c06 	br	2008973c <__flash_rwdata_start+0xffff7c8c>
20089b0c:	0007883a 	mov	r3,zero
20089b10:	000b883a 	mov	r5,zero
20089b14:	003f0906 	br	2008973c <__flash_rwdata_start+0xffff7c8c>
20089b18:	00800404 	movi	r2,16
20089b1c:	1007883a 	mov	r3,r2
20089b20:	003ec606 	br	2008963c <__flash_rwdata_start+0xffff7b8c>
20089b24:	00800404 	movi	r2,16
20089b28:	1007883a 	mov	r3,r2
20089b2c:	003f1c06 	br	200897a0 <__flash_rwdata_start+0xffff7cf0>
20089b30:	0005883a 	mov	r2,zero
20089b34:	0007883a 	mov	r3,zero
20089b38:	003f1906 	br	200897a0 <__flash_rwdata_start+0xffff7cf0>
20089b3c:	0005883a 	mov	r2,zero
20089b40:	0007883a 	mov	r3,zero
20089b44:	003ebd06 	br	2008963c <__flash_rwdata_start+0xffff7b8c>
20089b48:	0007883a 	mov	r3,zero
20089b4c:	00800044 	movi	r2,1
20089b50:	003f4d06 	br	20089888 <__flash_rwdata_start+0xffff7dd8>
20089b54:	197f942e 	bgeu	r3,r5,200899a8 <__flash_rwdata_start+0xffff7ef8>
20089b58:	10bfff84 	addi	r2,r2,-2
20089b5c:	1dc7883a 	add	r3,r3,r23
20089b60:	003f9206 	br	200899ac <__flash_rwdata_start+0xffff7efc>
20089b64:	15bf7e2e 	bgeu	r2,r22,20089960 <__flash_rwdata_start+0xffff7eb0>
20089b68:	843fff84 	addi	r16,r16,-2
20089b6c:	15c5883a 	add	r2,r2,r23
20089b70:	003f7c06 	br	20089964 <__flash_rwdata_start+0xffff7eb4>
20089b74:	2807883a 	mov	r3,r5
20089b78:	003fd206 	br	20089ac4 <__flash_rwdata_start+0xffff8014>
20089b7c:	102f883a 	mov	r23,r2
20089b80:	003fbc06 	br	20089a74 <__flash_rwdata_start+0xffff7fc4>
20089b84:	843fff84 	addi	r16,r16,-2
20089b88:	2489883a 	add	r4,r4,r18
20089b8c:	003f2506 	br	20089824 <__flash_rwdata_start+0xffff7d74>
20089b90:	843fff84 	addi	r16,r16,-2
20089b94:	1485883a 	add	r2,r2,r18
20089b98:	003eca06 	br	200896c4 <__flash_rwdata_start+0xffff7c14>

20089b9c <__umoddi3>:
20089b9c:	defff404 	addi	sp,sp,-48
20089ba0:	ddc00915 	stw	r23,36(sp)
20089ba4:	dc400315 	stw	r17,12(sp)
20089ba8:	dc000215 	stw	r16,8(sp)
20089bac:	dfc00b15 	stw	ra,44(sp)
20089bb0:	df000a15 	stw	fp,40(sp)
20089bb4:	dd800815 	stw	r22,32(sp)
20089bb8:	dd400715 	stw	r21,28(sp)
20089bbc:	dd000615 	stw	r20,24(sp)
20089bc0:	dcc00515 	stw	r19,20(sp)
20089bc4:	dc800415 	stw	r18,16(sp)
20089bc8:	2021883a 	mov	r16,r4
20089bcc:	2823883a 	mov	r17,r5
20089bd0:	282f883a 	mov	r23,r5
20089bd4:	3800381e 	bne	r7,zero,20089cb8 <__umoddi3+0x11c>
20089bd8:	3027883a 	mov	r19,r6
20089bdc:	2029883a 	mov	r20,r4
20089be0:	29804e2e 	bgeu	r5,r6,20089d1c <__umoddi3+0x180>
20089be4:	00bfffd4 	movui	r2,65535
20089be8:	11809c36 	bltu	r2,r6,20089e5c <__umoddi3+0x2c0>
20089bec:	00803fc4 	movi	r2,255
20089bf0:	11813b2e 	bgeu	r2,r6,2008a0e0 <__umoddi3+0x544>
20089bf4:	01400204 	movi	r5,8
20089bf8:	2805883a 	mov	r2,r5
20089bfc:	314ad83a 	srl	r5,r6,r5
20089c00:	00c00034 	movhi	r3,0
20089c04:	18c07b04 	addi	r3,r3,492
20089c08:	194b883a 	add	r5,r3,r5
20089c0c:	29000003 	ldbu	r4,0(r5)
20089c10:	2089883a 	add	r4,r4,r2
20089c14:	00800804 	movi	r2,32
20089c18:	1105c83a 	sub	r2,r2,r4
20089c1c:	1000ec26 	beq	r2,zero,20089fd0 <__umoddi3+0x434>
20089c20:	88a2983a 	sll	r17,r17,r2
20089c24:	8108d83a 	srl	r4,r16,r4
20089c28:	30a6983a 	sll	r19,r6,r2
20089c2c:	80a8983a 	sll	r20,r16,r2
20089c30:	1025883a 	mov	r18,r2
20089c34:	892eb03a 	or	r23,r17,r4
20089c38:	982cd43a 	srli	r22,r19,16
20089c3c:	b809883a 	mov	r4,r23
20089c40:	9d7fffcc 	andi	r21,r19,65535
20089c44:	b00b883a 	mov	r5,r22
20089c48:	008a2500 	call	2008a250 <__umodsi3>
20089c4c:	b809883a 	mov	r4,r23
20089c50:	b00b883a 	mov	r5,r22
20089c54:	1021883a 	mov	r16,r2
20089c58:	008a2480 	call	2008a248 <__udivsi3>
20089c5c:	8020943a 	slli	r16,r16,16
20089c60:	a00cd43a 	srli	r6,r20,16
20089c64:	1545383a 	mul	r2,r2,r21
20089c68:	8188b03a 	or	r4,r16,r6
20089c6c:	2080042e 	bgeu	r4,r2,20089c80 <__umoddi3+0xe4>
20089c70:	24c9883a 	add	r4,r4,r19
20089c74:	24c00236 	bltu	r4,r19,20089c80 <__umoddi3+0xe4>
20089c78:	2080012e 	bgeu	r4,r2,20089c80 <__umoddi3+0xe4>
20089c7c:	24c9883a 	add	r4,r4,r19
20089c80:	20a3c83a 	sub	r17,r4,r2
20089c84:	8809883a 	mov	r4,r17
20089c88:	b00b883a 	mov	r5,r22
20089c8c:	008a2500 	call	2008a250 <__umodsi3>
20089c90:	8809883a 	mov	r4,r17
20089c94:	b00b883a 	mov	r5,r22
20089c98:	1021883a 	mov	r16,r2
20089c9c:	008a2480 	call	2008a248 <__udivsi3>
20089ca0:	8006943a 	slli	r3,r16,16
20089ca4:	1545383a 	mul	r2,r2,r21
20089ca8:	a13fffcc 	andi	r4,r20,65535
20089cac:	1906b03a 	or	r3,r3,r4
20089cb0:	1880532e 	bgeu	r3,r2,20089e00 <__umoddi3+0x264>
20089cb4:	00004e06 	br	20089df0 <__umoddi3+0x254>
20089cb8:	29c05536 	bltu	r5,r7,20089e10 <__umoddi3+0x274>
20089cbc:	00bfffd4 	movui	r2,65535
20089cc0:	11c0612e 	bgeu	r2,r7,20089e48 <__umoddi3+0x2ac>
20089cc4:	00804034 	movhi	r2,256
20089cc8:	10bfffc4 	addi	r2,r2,-1
20089ccc:	11c0f82e 	bgeu	r2,r7,2008a0b0 <__umoddi3+0x514>
20089cd0:	01400604 	movi	r5,24
20089cd4:	282b883a 	mov	r21,r5
20089cd8:	394ad83a 	srl	r5,r7,r5
20089cdc:	00c00034 	movhi	r3,0
20089ce0:	18c07b04 	addi	r3,r3,492
20089ce4:	194b883a 	add	r5,r3,r5
20089ce8:	28800003 	ldbu	r2,0(r5)
20089cec:	00c00804 	movi	r3,32
20089cf0:	156b883a 	add	r21,r2,r21
20089cf4:	1d69c83a 	sub	r20,r3,r21
20089cf8:	a000631e 	bne	r20,zero,20089e88 <__umoddi3+0x2ec>
20089cfc:	3c400136 	bltu	r7,r17,20089d04 <__umoddi3+0x168>
20089d00:	81810436 	bltu	r16,r6,2008a114 <__umoddi3+0x578>
20089d04:	8185c83a 	sub	r2,r16,r6
20089d08:	89e3c83a 	sub	r17,r17,r7
20089d0c:	8087803a 	cmpltu	r3,r16,r2
20089d10:	88efc83a 	sub	r23,r17,r3
20089d14:	b807883a 	mov	r3,r23
20089d18:	00003f06 	br	20089e18 <__umoddi3+0x27c>
20089d1c:	3000041e 	bne	r6,zero,20089d30 <__umoddi3+0x194>
20089d20:	01000044 	movi	r4,1
20089d24:	000b883a 	mov	r5,zero
20089d28:	008a2480 	call	2008a248 <__udivsi3>
20089d2c:	1027883a 	mov	r19,r2
20089d30:	00bfffd4 	movui	r2,65535
20089d34:	14c04f2e 	bgeu	r2,r19,20089e74 <__umoddi3+0x2d8>
20089d38:	00804034 	movhi	r2,256
20089d3c:	10bfffc4 	addi	r2,r2,-1
20089d40:	14c0e42e 	bgeu	r2,r19,2008a0d4 <__umoddi3+0x538>
20089d44:	00800604 	movi	r2,24
20089d48:	1007883a 	mov	r3,r2
20089d4c:	9884d83a 	srl	r2,r19,r2
20089d50:	01000034 	movhi	r4,0
20089d54:	21007b04 	addi	r4,r4,492
20089d58:	2085883a 	add	r2,r4,r2
20089d5c:	11000003 	ldbu	r4,0(r2)
20089d60:	00800804 	movi	r2,32
20089d64:	20c7883a 	add	r3,r4,r3
20089d68:	10c5c83a 	sub	r2,r2,r3
20089d6c:	10009a1e 	bne	r2,zero,20089fd8 <__umoddi3+0x43c>
20089d70:	982cd43a 	srli	r22,r19,16
20089d74:	8ce3c83a 	sub	r17,r17,r19
20089d78:	9c3fffcc 	andi	r16,r19,65535
20089d7c:	0025883a 	mov	r18,zero
20089d80:	8809883a 	mov	r4,r17
20089d84:	b00b883a 	mov	r5,r22
20089d88:	008a2500 	call	2008a250 <__umodsi3>
20089d8c:	8809883a 	mov	r4,r17
20089d90:	b00b883a 	mov	r5,r22
20089d94:	102b883a 	mov	r21,r2
20089d98:	008a2480 	call	2008a248 <__udivsi3>
20089d9c:	a806943a 	slli	r3,r21,16
20089da0:	a008d43a 	srli	r4,r20,16
20089da4:	1405383a 	mul	r2,r2,r16
20089da8:	190cb03a 	or	r6,r3,r4
20089dac:	3080032e 	bgeu	r6,r2,20089dbc <__umoddi3+0x220>
20089db0:	34cd883a 	add	r6,r6,r19
20089db4:	34c00136 	bltu	r6,r19,20089dbc <__umoddi3+0x220>
20089db8:	3080d436 	bltu	r6,r2,2008a10c <__umoddi3+0x570>
20089dbc:	30abc83a 	sub	r21,r6,r2
20089dc0:	a809883a 	mov	r4,r21
20089dc4:	b00b883a 	mov	r5,r22
20089dc8:	008a2500 	call	2008a250 <__umodsi3>
20089dcc:	1023883a 	mov	r17,r2
20089dd0:	a809883a 	mov	r4,r21
20089dd4:	b00b883a 	mov	r5,r22
20089dd8:	008a2480 	call	2008a248 <__udivsi3>
20089ddc:	8822943a 	slli	r17,r17,16
20089de0:	1405383a 	mul	r2,r2,r16
20089de4:	a13fffcc 	andi	r4,r20,65535
20089de8:	8906b03a 	or	r3,r17,r4
20089dec:	1880042e 	bgeu	r3,r2,20089e00 <__umoddi3+0x264>
20089df0:	1cc7883a 	add	r3,r3,r19
20089df4:	1cc00236 	bltu	r3,r19,20089e00 <__umoddi3+0x264>
20089df8:	1880012e 	bgeu	r3,r2,20089e00 <__umoddi3+0x264>
20089dfc:	1cc7883a 	add	r3,r3,r19
20089e00:	1887c83a 	sub	r3,r3,r2
20089e04:	1c84d83a 	srl	r2,r3,r18
20089e08:	0007883a 	mov	r3,zero
20089e0c:	00000206 	br	20089e18 <__umoddi3+0x27c>
20089e10:	2005883a 	mov	r2,r4
20089e14:	2807883a 	mov	r3,r5
20089e18:	dfc00b17 	ldw	ra,44(sp)
20089e1c:	df000a17 	ldw	fp,40(sp)
20089e20:	ddc00917 	ldw	r23,36(sp)
20089e24:	dd800817 	ldw	r22,32(sp)
20089e28:	dd400717 	ldw	r21,28(sp)
20089e2c:	dd000617 	ldw	r20,24(sp)
20089e30:	dcc00517 	ldw	r19,20(sp)
20089e34:	dc800417 	ldw	r18,16(sp)
20089e38:	dc400317 	ldw	r17,12(sp)
20089e3c:	dc000217 	ldw	r16,8(sp)
20089e40:	dec00c04 	addi	sp,sp,48
20089e44:	f800283a 	ret
20089e48:	00803fc4 	movi	r2,255
20089e4c:	11c0952e 	bgeu	r2,r7,2008a0a4 <__umoddi3+0x508>
20089e50:	01400204 	movi	r5,8
20089e54:	282b883a 	mov	r21,r5
20089e58:	003f9f06 	br	20089cd8 <__flash_rwdata_start+0xffff8228>
20089e5c:	00804034 	movhi	r2,256
20089e60:	10bfffc4 	addi	r2,r2,-1
20089e64:	1180952e 	bgeu	r2,r6,2008a0bc <__umoddi3+0x520>
20089e68:	01400604 	movi	r5,24
20089e6c:	2805883a 	mov	r2,r5
20089e70:	003f6206 	br	20089bfc <__flash_rwdata_start+0xffff814c>
20089e74:	00803fc4 	movi	r2,255
20089e78:	14c0932e 	bgeu	r2,r19,2008a0c8 <__umoddi3+0x52c>
20089e7c:	00800204 	movi	r2,8
20089e80:	1007883a 	mov	r3,r2
20089e84:	003fb106 	br	20089d4c <__flash_rwdata_start+0xffff829c>
20089e88:	3548d83a 	srl	r4,r6,r21
20089e8c:	3d0e983a 	sll	r7,r7,r20
20089e90:	8d10983a 	sll	r8,r17,r20
20089e94:	8d6cd83a 	srl	r22,r17,r21
20089e98:	3922b03a 	or	r17,r7,r4
20089e9c:	882ed43a 	srli	r23,r17,16
20089ea0:	8564d83a 	srl	r18,r16,r21
20089ea4:	b009883a 	mov	r4,r22
20089ea8:	b80b883a 	mov	r5,r23
20089eac:	44a4b03a 	or	r18,r8,r18
20089eb0:	3526983a 	sll	r19,r6,r20
20089eb4:	008a2500 	call	2008a250 <__umodsi3>
20089eb8:	b009883a 	mov	r4,r22
20089ebc:	b80b883a 	mov	r5,r23
20089ec0:	1039883a 	mov	fp,r2
20089ec4:	008a2480 	call	2008a248 <__udivsi3>
20089ec8:	102d883a 	mov	r22,r2
20089ecc:	8a3fffcc 	andi	r8,r17,65535
20089ed0:	e004943a 	slli	r2,fp,16
20089ed4:	900cd43a 	srli	r6,r18,16
20089ed8:	b239383a 	mul	fp,r22,r8
20089edc:	8520983a 	sll	r16,r16,r20
20089ee0:	118ab03a 	or	r5,r2,r6
20089ee4:	2f00042e 	bgeu	r5,fp,20089ef8 <__umoddi3+0x35c>
20089ee8:	2c4b883a 	add	r5,r5,r17
20089eec:	b0bfffc4 	addi	r2,r22,-1
20089ef0:	2c40822e 	bgeu	r5,r17,2008a0fc <__umoddi3+0x560>
20089ef4:	102d883a 	mov	r22,r2
20089ef8:	2f39c83a 	sub	fp,r5,fp
20089efc:	e009883a 	mov	r4,fp
20089f00:	b80b883a 	mov	r5,r23
20089f04:	da000115 	stw	r8,4(sp)
20089f08:	008a2500 	call	2008a250 <__umodsi3>
20089f0c:	e009883a 	mov	r4,fp
20089f10:	b80b883a 	mov	r5,r23
20089f14:	d8800015 	stw	r2,0(sp)
20089f18:	008a2480 	call	2008a248 <__udivsi3>
20089f1c:	d9800017 	ldw	r6,0(sp)
20089f20:	da000117 	ldw	r8,4(sp)
20089f24:	94bfffcc 	andi	r18,r18,65535
20089f28:	300c943a 	slli	r6,r6,16
20089f2c:	1209383a 	mul	r4,r2,r8
20089f30:	3490b03a 	or	r8,r6,r18
20089f34:	4100042e 	bgeu	r8,r4,20089f48 <__umoddi3+0x3ac>
20089f38:	4451883a 	add	r8,r8,r17
20089f3c:	10ffffc4 	addi	r3,r2,-1
20089f40:	44406a2e 	bgeu	r8,r17,2008a0ec <__umoddi3+0x550>
20089f44:	1805883a 	mov	r2,r3
20089f48:	b012943a 	slli	r9,r22,16
20089f4c:	9abfffcc 	andi	r10,r19,65535
20089f50:	980ed43a 	srli	r7,r19,16
20089f54:	124ab03a 	or	r5,r2,r9
20089f58:	2a7fffcc 	andi	r9,r5,65535
20089f5c:	280ad43a 	srli	r5,r5,16
20089f60:	4a8d383a 	mul	r6,r9,r10
20089f64:	49d3383a 	mul	r9,r9,r7
20089f68:	2a95383a 	mul	r10,r5,r10
20089f6c:	3004d43a 	srli	r2,r6,16
20089f70:	4111c83a 	sub	r8,r8,r4
20089f74:	5253883a 	add	r9,r10,r9
20089f78:	4893883a 	add	r9,r9,r2
20089f7c:	29cb383a 	mul	r5,r5,r7
20089f80:	4a80022e 	bgeu	r9,r10,20089f8c <__umoddi3+0x3f0>
20089f84:	00800074 	movhi	r2,1
20089f88:	288b883a 	add	r5,r5,r2
20089f8c:	4808d43a 	srli	r4,r9,16
20089f90:	4812943a 	slli	r9,r9,16
20089f94:	31bfffcc 	andi	r6,r6,65535
20089f98:	290b883a 	add	r5,r5,r4
20089f9c:	498d883a 	add	r6,r9,r6
20089fa0:	41403a36 	bltu	r8,r5,2008a08c <__umoddi3+0x4f0>
20089fa4:	41405d26 	beq	r8,r5,2008a11c <__umoddi3+0x580>
20089fa8:	4149c83a 	sub	r4,r8,r5
20089fac:	300f883a 	mov	r7,r6
20089fb0:	81cfc83a 	sub	r7,r16,r7
20089fb4:	81c7803a 	cmpltu	r3,r16,r7
20089fb8:	20c7c83a 	sub	r3,r4,r3
20089fbc:	1d44983a 	sll	r2,r3,r21
20089fc0:	3d0ed83a 	srl	r7,r7,r20
20089fc4:	1d06d83a 	srl	r3,r3,r20
20089fc8:	11c4b03a 	or	r2,r2,r7
20089fcc:	003f9206 	br	20089e18 <__flash_rwdata_start+0xffff8368>
20089fd0:	0025883a 	mov	r18,zero
20089fd4:	003f1806 	br	20089c38 <__flash_rwdata_start+0xffff8188>
20089fd8:	98a6983a 	sll	r19,r19,r2
20089fdc:	88e8d83a 	srl	r20,r17,r3
20089fe0:	80c6d83a 	srl	r3,r16,r3
20089fe4:	982cd43a 	srli	r22,r19,16
20089fe8:	88a2983a 	sll	r17,r17,r2
20089fec:	a009883a 	mov	r4,r20
20089ff0:	b00b883a 	mov	r5,r22
20089ff4:	88eab03a 	or	r21,r17,r3
20089ff8:	1025883a 	mov	r18,r2
20089ffc:	008a2500 	call	2008a250 <__umodsi3>
2008a000:	a009883a 	mov	r4,r20
2008a004:	b00b883a 	mov	r5,r22
2008a008:	1023883a 	mov	r17,r2
2008a00c:	008a2480 	call	2008a248 <__udivsi3>
2008a010:	9f3fffcc 	andi	fp,r19,65535
2008a014:	8822943a 	slli	r17,r17,16
2008a018:	a80ad43a 	srli	r5,r21,16
2008a01c:	1705383a 	mul	r2,r2,fp
2008a020:	84a8983a 	sll	r20,r16,r18
2008a024:	8948b03a 	or	r4,r17,r5
2008a028:	2080042e 	bgeu	r4,r2,2008a03c <__umoddi3+0x4a0>
2008a02c:	24c9883a 	add	r4,r4,r19
2008a030:	24c00236 	bltu	r4,r19,2008a03c <__umoddi3+0x4a0>
2008a034:	2080012e 	bgeu	r4,r2,2008a03c <__umoddi3+0x4a0>
2008a038:	24c9883a 	add	r4,r4,r19
2008a03c:	20afc83a 	sub	r23,r4,r2
2008a040:	b809883a 	mov	r4,r23
2008a044:	b00b883a 	mov	r5,r22
2008a048:	008a2500 	call	2008a250 <__umodsi3>
2008a04c:	1023883a 	mov	r17,r2
2008a050:	b809883a 	mov	r4,r23
2008a054:	b00b883a 	mov	r5,r22
2008a058:	008a2480 	call	2008a248 <__udivsi3>
2008a05c:	8822943a 	slli	r17,r17,16
2008a060:	1705383a 	mul	r2,r2,fp
2008a064:	a93fffcc 	andi	r4,r21,65535
2008a068:	8908b03a 	or	r4,r17,r4
2008a06c:	2080042e 	bgeu	r4,r2,2008a080 <__umoddi3+0x4e4>
2008a070:	24c9883a 	add	r4,r4,r19
2008a074:	24c00236 	bltu	r4,r19,2008a080 <__umoddi3+0x4e4>
2008a078:	2080012e 	bgeu	r4,r2,2008a080 <__umoddi3+0x4e4>
2008a07c:	24c9883a 	add	r4,r4,r19
2008a080:	20a3c83a 	sub	r17,r4,r2
2008a084:	e021883a 	mov	r16,fp
2008a088:	003f3d06 	br	20089d80 <__flash_rwdata_start+0xffff82d0>
2008a08c:	34cfc83a 	sub	r7,r6,r19
2008a090:	2c4bc83a 	sub	r5,r5,r17
2008a094:	31cd803a 	cmpltu	r6,r6,r7
2008a098:	298dc83a 	sub	r6,r5,r6
2008a09c:	4189c83a 	sub	r4,r8,r6
2008a0a0:	003fc306 	br	20089fb0 <__flash_rwdata_start+0xffff8500>
2008a0a4:	000b883a 	mov	r5,zero
2008a0a8:	002b883a 	mov	r21,zero
2008a0ac:	003f0a06 	br	20089cd8 <__flash_rwdata_start+0xffff8228>
2008a0b0:	01400404 	movi	r5,16
2008a0b4:	282b883a 	mov	r21,r5
2008a0b8:	003f0706 	br	20089cd8 <__flash_rwdata_start+0xffff8228>
2008a0bc:	01400404 	movi	r5,16
2008a0c0:	2805883a 	mov	r2,r5
2008a0c4:	003ecd06 	br	20089bfc <__flash_rwdata_start+0xffff814c>
2008a0c8:	0005883a 	mov	r2,zero
2008a0cc:	0007883a 	mov	r3,zero
2008a0d0:	003f1e06 	br	20089d4c <__flash_rwdata_start+0xffff829c>
2008a0d4:	00800404 	movi	r2,16
2008a0d8:	1007883a 	mov	r3,r2
2008a0dc:	003f1b06 	br	20089d4c <__flash_rwdata_start+0xffff829c>
2008a0e0:	000b883a 	mov	r5,zero
2008a0e4:	0005883a 	mov	r2,zero
2008a0e8:	003ec406 	br	20089bfc <__flash_rwdata_start+0xffff814c>
2008a0ec:	413f952e 	bgeu	r8,r4,20089f44 <__flash_rwdata_start+0xffff8494>
2008a0f0:	10bfff84 	addi	r2,r2,-2
2008a0f4:	4451883a 	add	r8,r8,r17
2008a0f8:	003f9306 	br	20089f48 <__flash_rwdata_start+0xffff8498>
2008a0fc:	2f3f7d2e 	bgeu	r5,fp,20089ef4 <__flash_rwdata_start+0xffff8444>
2008a100:	b5bfff84 	addi	r22,r22,-2
2008a104:	2c4b883a 	add	r5,r5,r17
2008a108:	003f7b06 	br	20089ef8 <__flash_rwdata_start+0xffff8448>
2008a10c:	34cd883a 	add	r6,r6,r19
2008a110:	003f2a06 	br	20089dbc <__flash_rwdata_start+0xffff830c>
2008a114:	8005883a 	mov	r2,r16
2008a118:	003efe06 	br	20089d14 <__flash_rwdata_start+0xffff8264>
2008a11c:	81bfdb36 	bltu	r16,r6,2008a08c <__flash_rwdata_start+0xffff85dc>
2008a120:	300f883a 	mov	r7,r6
2008a124:	0009883a 	mov	r4,zero
2008a128:	003fa106 	br	20089fb0 <__flash_rwdata_start+0xffff8500>

2008a12c <udivmodsi4>:
2008a12c:	2900182e 	bgeu	r5,r4,2008a190 <udivmodsi4+0x64>
2008a130:	28001716 	blt	r5,zero,2008a190 <udivmodsi4+0x64>
2008a134:	00800804 	movi	r2,32
2008a138:	00c00044 	movi	r3,1
2008a13c:	00000206 	br	2008a148 <udivmodsi4+0x1c>
2008a140:	10001126 	beq	r2,zero,2008a188 <udivmodsi4+0x5c>
2008a144:	28000516 	blt	r5,zero,2008a15c <udivmodsi4+0x30>
2008a148:	294b883a 	add	r5,r5,r5
2008a14c:	10bfffc4 	addi	r2,r2,-1
2008a150:	18c7883a 	add	r3,r3,r3
2008a154:	293ffa36 	bltu	r5,r4,2008a140 <__flash_rwdata_start+0xffff8690>
2008a158:	18000b26 	beq	r3,zero,2008a188 <udivmodsi4+0x5c>
2008a15c:	0005883a 	mov	r2,zero
2008a160:	21400236 	bltu	r4,r5,2008a16c <udivmodsi4+0x40>
2008a164:	2149c83a 	sub	r4,r4,r5
2008a168:	10c4b03a 	or	r2,r2,r3
2008a16c:	1806d07a 	srli	r3,r3,1
2008a170:	280ad07a 	srli	r5,r5,1
2008a174:	183ffa1e 	bne	r3,zero,2008a160 <__flash_rwdata_start+0xffff86b0>
2008a178:	3000011e 	bne	r6,zero,2008a180 <udivmodsi4+0x54>
2008a17c:	f800283a 	ret
2008a180:	2005883a 	mov	r2,r4
2008a184:	f800283a 	ret
2008a188:	0005883a 	mov	r2,zero
2008a18c:	003ffa06 	br	2008a178 <__flash_rwdata_start+0xffff86c8>
2008a190:	00c00044 	movi	r3,1
2008a194:	003ff106 	br	2008a15c <__flash_rwdata_start+0xffff86ac>

2008a198 <__divsi3>:
2008a198:	defffe04 	addi	sp,sp,-8
2008a19c:	dfc00115 	stw	ra,4(sp)
2008a1a0:	dc000015 	stw	r16,0(sp)
2008a1a4:	20000b16 	blt	r4,zero,2008a1d4 <__divsi3+0x3c>
2008a1a8:	0021883a 	mov	r16,zero
2008a1ac:	28000c16 	blt	r5,zero,2008a1e0 <__divsi3+0x48>
2008a1b0:	000d883a 	mov	r6,zero
2008a1b4:	008a12c0 	call	2008a12c <udivmodsi4>
2008a1b8:	0407c83a 	sub	r3,zero,r16
2008a1bc:	1884f03a 	xor	r2,r3,r2
2008a1c0:	1405883a 	add	r2,r2,r16
2008a1c4:	dfc00117 	ldw	ra,4(sp)
2008a1c8:	dc000017 	ldw	r16,0(sp)
2008a1cc:	dec00204 	addi	sp,sp,8
2008a1d0:	f800283a 	ret
2008a1d4:	0109c83a 	sub	r4,zero,r4
2008a1d8:	04000044 	movi	r16,1
2008a1dc:	283ff40e 	bge	r5,zero,2008a1b0 <__flash_rwdata_start+0xffff8700>
2008a1e0:	014bc83a 	sub	r5,zero,r5
2008a1e4:	8400005c 	xori	r16,r16,1
2008a1e8:	003ff106 	br	2008a1b0 <__flash_rwdata_start+0xffff8700>

2008a1ec <__modsi3>:
2008a1ec:	defffd04 	addi	sp,sp,-12
2008a1f0:	dfc00215 	stw	ra,8(sp)
2008a1f4:	dc400115 	stw	r17,4(sp)
2008a1f8:	dc000015 	stw	r16,0(sp)
2008a1fc:	20000c16 	blt	r4,zero,2008a230 <__modsi3+0x44>
2008a200:	0023883a 	mov	r17,zero
2008a204:	0021883a 	mov	r16,zero
2008a208:	28000d16 	blt	r5,zero,2008a240 <__modsi3+0x54>
2008a20c:	01800044 	movi	r6,1
2008a210:	008a12c0 	call	2008a12c <udivmodsi4>
2008a214:	1404f03a 	xor	r2,r2,r16
2008a218:	8885883a 	add	r2,r17,r2
2008a21c:	dfc00217 	ldw	ra,8(sp)
2008a220:	dc400117 	ldw	r17,4(sp)
2008a224:	dc000017 	ldw	r16,0(sp)
2008a228:	dec00304 	addi	sp,sp,12
2008a22c:	f800283a 	ret
2008a230:	0109c83a 	sub	r4,zero,r4
2008a234:	04400044 	movi	r17,1
2008a238:	043fffc4 	movi	r16,-1
2008a23c:	283ff30e 	bge	r5,zero,2008a20c <__flash_rwdata_start+0xffff875c>
2008a240:	014bc83a 	sub	r5,zero,r5
2008a244:	003ff106 	br	2008a20c <__flash_rwdata_start+0xffff875c>

2008a248 <__udivsi3>:
2008a248:	000d883a 	mov	r6,zero
2008a24c:	008a12c1 	jmpi	2008a12c <udivmodsi4>

2008a250 <__umodsi3>:
2008a250:	01800044 	movi	r6,1
2008a254:	008a12c1 	jmpi	2008a12c <udivmodsi4>

2008a258 <__adddf3>:
2008a258:	02000434 	movhi	r8,16
2008a25c:	423fffc4 	addi	r8,r8,-1
2008a260:	defffb04 	addi	sp,sp,-20
2008a264:	2a12703a 	and	r9,r5,r8
2008a268:	2806d7fa 	srli	r3,r5,31
2008a26c:	3a10703a 	and	r8,r7,r8
2008a270:	3804d53a 	srli	r2,r7,20
2008a274:	3014d77a 	srli	r10,r6,29
2008a278:	dc000015 	stw	r16,0(sp)
2008a27c:	481290fa 	slli	r9,r9,3
2008a280:	2820d53a 	srli	r16,r5,20
2008a284:	401090fa 	slli	r8,r8,3
2008a288:	200ad77a 	srli	r5,r4,29
2008a28c:	380ed7fa 	srli	r7,r7,31
2008a290:	dc800215 	stw	r18,8(sp)
2008a294:	dc400115 	stw	r17,4(sp)
2008a298:	dfc00415 	stw	ra,16(sp)
2008a29c:	dcc00315 	stw	r19,12(sp)
2008a2a0:	1c803fcc 	andi	r18,r3,255
2008a2a4:	8401ffcc 	andi	r16,r16,2047
2008a2a8:	494ab03a 	or	r5,r9,r5
2008a2ac:	202290fa 	slli	r17,r4,3
2008a2b0:	1081ffcc 	andi	r2,r2,2047
2008a2b4:	4290b03a 	or	r8,r8,r10
2008a2b8:	300c90fa 	slli	r6,r6,3
2008a2bc:	91c07026 	beq	r18,r7,2008a480 <__adddf3+0x228>
2008a2c0:	8087c83a 	sub	r3,r16,r2
2008a2c4:	00c0b30e 	bge	zero,r3,2008a594 <__adddf3+0x33c>
2008a2c8:	10002a1e 	bne	r2,zero,2008a374 <__adddf3+0x11c>
2008a2cc:	4184b03a 	or	r2,r8,r6
2008a2d0:	1000991e 	bne	r2,zero,2008a538 <__adddf3+0x2e0>
2008a2d4:	888001cc 	andi	r2,r17,7
2008a2d8:	10005b26 	beq	r2,zero,2008a448 <__adddf3+0x1f0>
2008a2dc:	88c003cc 	andi	r3,r17,15
2008a2e0:	00800104 	movi	r2,4
2008a2e4:	18805826 	beq	r3,r2,2008a448 <__adddf3+0x1f0>
2008a2e8:	89800104 	addi	r6,r17,4
2008a2ec:	3463803a 	cmpltu	r17,r6,r17
2008a2f0:	2c4b883a 	add	r5,r5,r17
2008a2f4:	2880202c 	andhi	r2,r5,128
2008a2f8:	9007883a 	mov	r3,r18
2008a2fc:	3023883a 	mov	r17,r6
2008a300:	10005426 	beq	r2,zero,2008a454 <__adddf3+0x1fc>
2008a304:	84000044 	addi	r16,r16,1
2008a308:	0081ffc4 	movi	r2,2047
2008a30c:	8080c126 	beq	r16,r2,2008a614 <__adddf3+0x3bc>
2008a310:	013fe034 	movhi	r4,65408
2008a314:	213fffc4 	addi	r4,r4,-1
2008a318:	290a703a 	and	r5,r5,r4
2008a31c:	2804977a 	slli	r2,r5,29
2008a320:	280a927a 	slli	r5,r5,9
2008a324:	8822d0fa 	srli	r17,r17,3
2008a328:	8401ffcc 	andi	r16,r16,2047
2008a32c:	2808d33a 	srli	r4,r5,12
2008a330:	1444b03a 	or	r2,r2,r17
2008a334:	8401ffcc 	andi	r16,r16,2047
2008a338:	800a953a 	slli	r5,r16,20
2008a33c:	18c03fcc 	andi	r3,r3,255
2008a340:	04000434 	movhi	r16,16
2008a344:	180697fa 	slli	r3,r3,31
2008a348:	843fffc4 	addi	r16,r16,-1
2008a34c:	2420703a 	and	r16,r4,r16
2008a350:	8160b03a 	or	r16,r16,r5
2008a354:	80c6b03a 	or	r3,r16,r3
2008a358:	dfc00417 	ldw	ra,16(sp)
2008a35c:	dcc00317 	ldw	r19,12(sp)
2008a360:	dc800217 	ldw	r18,8(sp)
2008a364:	dc400117 	ldw	r17,4(sp)
2008a368:	dc000017 	ldw	r16,0(sp)
2008a36c:	dec00504 	addi	sp,sp,20
2008a370:	f800283a 	ret
2008a374:	0081ffc4 	movi	r2,2047
2008a378:	80bfd626 	beq	r16,r2,2008a2d4 <__flash_rwdata_start+0xffff8824>
2008a37c:	42002034 	orhi	r8,r8,128
2008a380:	00800e04 	movi	r2,56
2008a384:	10c0a616 	blt	r2,r3,2008a620 <__adddf3+0x3c8>
2008a388:	008007c4 	movi	r2,31
2008a38c:	10c0c916 	blt	r2,r3,2008a6b4 <__adddf3+0x45c>
2008a390:	00800804 	movi	r2,32
2008a394:	10c5c83a 	sub	r2,r2,r3
2008a398:	408e983a 	sll	r7,r8,r2
2008a39c:	30c8d83a 	srl	r4,r6,r3
2008a3a0:	3084983a 	sll	r2,r6,r2
2008a3a4:	40c6d83a 	srl	r3,r8,r3
2008a3a8:	390cb03a 	or	r6,r7,r4
2008a3ac:	1004c03a 	cmpne	r2,r2,zero
2008a3b0:	308cb03a 	or	r6,r6,r2
2008a3b4:	898dc83a 	sub	r6,r17,r6
2008a3b8:	89a3803a 	cmpltu	r17,r17,r6
2008a3bc:	28cbc83a 	sub	r5,r5,r3
2008a3c0:	2c4bc83a 	sub	r5,r5,r17
2008a3c4:	3023883a 	mov	r17,r6
2008a3c8:	2880202c 	andhi	r2,r5,128
2008a3cc:	10006d26 	beq	r2,zero,2008a584 <__adddf3+0x32c>
2008a3d0:	04c02034 	movhi	r19,128
2008a3d4:	9cffffc4 	addi	r19,r19,-1
2008a3d8:	2ce6703a 	and	r19,r5,r19
2008a3dc:	98007e26 	beq	r19,zero,2008a5d8 <__adddf3+0x380>
2008a3e0:	9809883a 	mov	r4,r19
2008a3e4:	008c7f40 	call	2008c7f4 <__clzsi2>
2008a3e8:	10fffe04 	addi	r3,r2,-8
2008a3ec:	010007c4 	movi	r4,31
2008a3f0:	20c07f16 	blt	r4,r3,2008a5f0 <__adddf3+0x398>
2008a3f4:	01400a04 	movi	r5,40
2008a3f8:	2885c83a 	sub	r2,r5,r2
2008a3fc:	888ad83a 	srl	r5,r17,r2
2008a400:	98e6983a 	sll	r19,r19,r3
2008a404:	88e2983a 	sll	r17,r17,r3
2008a408:	2ce6b03a 	or	r19,r5,r19
2008a40c:	1c007c16 	blt	r3,r16,2008a600 <__adddf3+0x3a8>
2008a410:	1c21c83a 	sub	r16,r3,r16
2008a414:	81400044 	addi	r5,r16,1
2008a418:	00c007c4 	movi	r3,31
2008a41c:	19409816 	blt	r3,r5,2008a680 <__adddf3+0x428>
2008a420:	1c21c83a 	sub	r16,r3,r16
2008a424:	8c08983a 	sll	r4,r17,r16
2008a428:	8946d83a 	srl	r3,r17,r5
2008a42c:	9c20983a 	sll	r16,r19,r16
2008a430:	2008c03a 	cmpne	r4,r4,zero
2008a434:	994ad83a 	srl	r5,r19,r5
2008a438:	1c06b03a 	or	r3,r3,r16
2008a43c:	1922b03a 	or	r17,r3,r4
2008a440:	0021883a 	mov	r16,zero
2008a444:	003fa306 	br	2008a2d4 <__flash_rwdata_start+0xffff8824>
2008a448:	2880202c 	andhi	r2,r5,128
2008a44c:	9007883a 	mov	r3,r18
2008a450:	103fac1e 	bne	r2,zero,2008a304 <__flash_rwdata_start+0xffff8854>
2008a454:	2804977a 	slli	r2,r5,29
2008a458:	8822d0fa 	srli	r17,r17,3
2008a45c:	0101ffc4 	movi	r4,2047
2008a460:	280ad0fa 	srli	r5,r5,3
2008a464:	1444b03a 	or	r2,r2,r17
2008a468:	81002c26 	beq	r16,r4,2008a51c <__adddf3+0x2c4>
2008a46c:	8120703a 	and	r16,r16,r4
2008a470:	01000434 	movhi	r4,16
2008a474:	213fffc4 	addi	r4,r4,-1
2008a478:	2908703a 	and	r4,r5,r4
2008a47c:	003fad06 	br	2008a334 <__flash_rwdata_start+0xffff8884>
2008a480:	8089c83a 	sub	r4,r16,r2
2008a484:	01006a0e 	bge	zero,r4,2008a630 <__adddf3+0x3d8>
2008a488:	10003326 	beq	r2,zero,2008a558 <__adddf3+0x300>
2008a48c:	0081ffc4 	movi	r2,2047
2008a490:	80bf9026 	beq	r16,r2,2008a2d4 <__flash_rwdata_start+0xffff8824>
2008a494:	42002034 	orhi	r8,r8,128
2008a498:	00800e04 	movi	r2,56
2008a49c:	1100b116 	blt	r2,r4,2008a764 <__adddf3+0x50c>
2008a4a0:	008007c4 	movi	r2,31
2008a4a4:	1100e216 	blt	r2,r4,2008a830 <__adddf3+0x5d8>
2008a4a8:	00800804 	movi	r2,32
2008a4ac:	1105c83a 	sub	r2,r2,r4
2008a4b0:	4092983a 	sll	r9,r8,r2
2008a4b4:	310ed83a 	srl	r7,r6,r4
2008a4b8:	3084983a 	sll	r2,r6,r2
2008a4bc:	4110d83a 	srl	r8,r8,r4
2008a4c0:	49ccb03a 	or	r6,r9,r7
2008a4c4:	1004c03a 	cmpne	r2,r2,zero
2008a4c8:	308cb03a 	or	r6,r6,r2
2008a4cc:	344d883a 	add	r6,r6,r17
2008a4d0:	3463803a 	cmpltu	r17,r6,r17
2008a4d4:	414b883a 	add	r5,r8,r5
2008a4d8:	2c4b883a 	add	r5,r5,r17
2008a4dc:	3023883a 	mov	r17,r6
2008a4e0:	2880202c 	andhi	r2,r5,128
2008a4e4:	10002726 	beq	r2,zero,2008a584 <__adddf3+0x32c>
2008a4e8:	84000044 	addi	r16,r16,1
2008a4ec:	0081ffc4 	movi	r2,2047
2008a4f0:	8080ae26 	beq	r16,r2,2008a7ac <__adddf3+0x554>
2008a4f4:	00bfe034 	movhi	r2,65408
2008a4f8:	10bfffc4 	addi	r2,r2,-1
2008a4fc:	288a703a 	and	r5,r5,r2
2008a500:	880cd07a 	srli	r6,r17,1
2008a504:	280897fa 	slli	r4,r5,31
2008a508:	88c0004c 	andi	r3,r17,1
2008a50c:	30e2b03a 	or	r17,r6,r3
2008a510:	280ad07a 	srli	r5,r5,1
2008a514:	8922b03a 	or	r17,r17,r4
2008a518:	003f6e06 	br	2008a2d4 <__flash_rwdata_start+0xffff8824>
2008a51c:	1148b03a 	or	r4,r2,r5
2008a520:	20003c26 	beq	r4,zero,2008a614 <__adddf3+0x3bc>
2008a524:	29000234 	orhi	r4,r5,8
2008a528:	01400434 	movhi	r5,16
2008a52c:	297fffc4 	addi	r5,r5,-1
2008a530:	2148703a 	and	r4,r4,r5
2008a534:	003f7f06 	br	2008a334 <__flash_rwdata_start+0xffff8884>
2008a538:	18ffffc4 	addi	r3,r3,-1
2008a53c:	18004d1e 	bne	r3,zero,2008a674 <__adddf3+0x41c>
2008a540:	898dc83a 	sub	r6,r17,r6
2008a544:	89a3803a 	cmpltu	r17,r17,r6
2008a548:	2a0bc83a 	sub	r5,r5,r8
2008a54c:	2c4bc83a 	sub	r5,r5,r17
2008a550:	3023883a 	mov	r17,r6
2008a554:	003f9c06 	br	2008a3c8 <__flash_rwdata_start+0xffff8918>
2008a558:	4184b03a 	or	r2,r8,r6
2008a55c:	103f5d26 	beq	r2,zero,2008a2d4 <__flash_rwdata_start+0xffff8824>
2008a560:	213fffc4 	addi	r4,r4,-1
2008a564:	203fd926 	beq	r4,zero,2008a4cc <__flash_rwdata_start+0xffff8a1c>
2008a568:	0081ffc4 	movi	r2,2047
2008a56c:	80bfca1e 	bne	r16,r2,2008a498 <__flash_rwdata_start+0xffff89e8>
2008a570:	003f5806 	br	2008a2d4 <__flash_rwdata_start+0xffff8824>
2008a574:	10c8b03a 	or	r4,r2,r3
2008a578:	20008b26 	beq	r4,zero,2008a7a8 <__adddf3+0x550>
2008a57c:	100b883a 	mov	r5,r2
2008a580:	1823883a 	mov	r17,r3
2008a584:	888001cc 	andi	r2,r17,7
2008a588:	103f541e 	bne	r2,zero,2008a2dc <__flash_rwdata_start+0xffff882c>
2008a58c:	9007883a 	mov	r3,r18
2008a590:	003fb006 	br	2008a454 <__flash_rwdata_start+0xffff89a4>
2008a594:	1800531e 	bne	r3,zero,2008a6e4 <__adddf3+0x48c>
2008a598:	80800044 	addi	r2,r16,1
2008a59c:	1081ffcc 	andi	r2,r2,2047
2008a5a0:	00c00044 	movi	r3,1
2008a5a4:	1880990e 	bge	r3,r2,2008a80c <__adddf3+0x5b4>
2008a5a8:	8985c83a 	sub	r2,r17,r6
2008a5ac:	8887803a 	cmpltu	r3,r17,r2
2008a5b0:	2a27c83a 	sub	r19,r5,r8
2008a5b4:	98e7c83a 	sub	r19,r19,r3
2008a5b8:	98c0202c 	andhi	r3,r19,128
2008a5bc:	18006226 	beq	r3,zero,2008a748 <__adddf3+0x4f0>
2008a5c0:	3463c83a 	sub	r17,r6,r17
2008a5c4:	4151c83a 	sub	r8,r8,r5
2008a5c8:	344d803a 	cmpltu	r6,r6,r17
2008a5cc:	41a7c83a 	sub	r19,r8,r6
2008a5d0:	3825883a 	mov	r18,r7
2008a5d4:	983f821e 	bne	r19,zero,2008a3e0 <__flash_rwdata_start+0xffff8930>
2008a5d8:	8809883a 	mov	r4,r17
2008a5dc:	008c7f40 	call	2008c7f4 <__clzsi2>
2008a5e0:	10800804 	addi	r2,r2,32
2008a5e4:	10fffe04 	addi	r3,r2,-8
2008a5e8:	010007c4 	movi	r4,31
2008a5ec:	20ff810e 	bge	r4,r3,2008a3f4 <__flash_rwdata_start+0xffff8944>
2008a5f0:	14fff604 	addi	r19,r2,-40
2008a5f4:	8ce6983a 	sll	r19,r17,r19
2008a5f8:	0023883a 	mov	r17,zero
2008a5fc:	1c3f840e 	bge	r3,r16,2008a410 <__flash_rwdata_start+0xffff8960>
2008a600:	017fe034 	movhi	r5,65408
2008a604:	297fffc4 	addi	r5,r5,-1
2008a608:	80e1c83a 	sub	r16,r16,r3
2008a60c:	994a703a 	and	r5,r19,r5
2008a610:	003f3006 	br	2008a2d4 <__flash_rwdata_start+0xffff8824>
2008a614:	0009883a 	mov	r4,zero
2008a618:	0005883a 	mov	r2,zero
2008a61c:	003f4506 	br	2008a334 <__flash_rwdata_start+0xffff8884>
2008a620:	418cb03a 	or	r6,r8,r6
2008a624:	300cc03a 	cmpne	r6,r6,zero
2008a628:	0007883a 	mov	r3,zero
2008a62c:	003f6106 	br	2008a3b4 <__flash_rwdata_start+0xffff8904>
2008a630:	2000921e 	bne	r4,zero,2008a87c <__adddf3+0x624>
2008a634:	80800044 	addi	r2,r16,1
2008a638:	11c1ffcc 	andi	r7,r2,2047
2008a63c:	01000044 	movi	r4,1
2008a640:	21c0610e 	bge	r4,r7,2008a7c8 <__adddf3+0x570>
2008a644:	0101ffc4 	movi	r4,2047
2008a648:	1100a326 	beq	r2,r4,2008a8d8 <__adddf3+0x680>
2008a64c:	344d883a 	add	r6,r6,r17
2008a650:	3463803a 	cmpltu	r17,r6,r17
2008a654:	414b883a 	add	r5,r8,r5
2008a658:	2c4b883a 	add	r5,r5,r17
2008a65c:	282297fa 	slli	r17,r5,31
2008a660:	300cd07a 	srli	r6,r6,1
2008a664:	280ad07a 	srli	r5,r5,1
2008a668:	1021883a 	mov	r16,r2
2008a66c:	89a2b03a 	or	r17,r17,r6
2008a670:	003f1806 	br	2008a2d4 <__flash_rwdata_start+0xffff8824>
2008a674:	0081ffc4 	movi	r2,2047
2008a678:	80bf411e 	bne	r16,r2,2008a380 <__flash_rwdata_start+0xffff88d0>
2008a67c:	003f1506 	br	2008a2d4 <__flash_rwdata_start+0xffff8824>
2008a680:	80bff844 	addi	r2,r16,-31
2008a684:	00c00804 	movi	r3,32
2008a688:	9884d83a 	srl	r2,r19,r2
2008a68c:	28c04a26 	beq	r5,r3,2008a7b8 <__adddf3+0x560>
2008a690:	00c00fc4 	movi	r3,63
2008a694:	1c21c83a 	sub	r16,r3,r16
2008a698:	9c26983a 	sll	r19,r19,r16
2008a69c:	9c62b03a 	or	r17,r19,r17
2008a6a0:	8822c03a 	cmpne	r17,r17,zero
2008a6a4:	88a2b03a 	or	r17,r17,r2
2008a6a8:	000b883a 	mov	r5,zero
2008a6ac:	0021883a 	mov	r16,zero
2008a6b0:	003fb406 	br	2008a584 <__flash_rwdata_start+0xffff8ad4>
2008a6b4:	18bff804 	addi	r2,r3,-32
2008a6b8:	01000804 	movi	r4,32
2008a6bc:	4084d83a 	srl	r2,r8,r2
2008a6c0:	19003f26 	beq	r3,r4,2008a7c0 <__adddf3+0x568>
2008a6c4:	01001004 	movi	r4,64
2008a6c8:	20c7c83a 	sub	r3,r4,r3
2008a6cc:	40d0983a 	sll	r8,r8,r3
2008a6d0:	418cb03a 	or	r6,r8,r6
2008a6d4:	300cc03a 	cmpne	r6,r6,zero
2008a6d8:	308cb03a 	or	r6,r6,r2
2008a6dc:	0007883a 	mov	r3,zero
2008a6e0:	003f3406 	br	2008a3b4 <__flash_rwdata_start+0xffff8904>
2008a6e4:	80002326 	beq	r16,zero,2008a774 <__adddf3+0x51c>
2008a6e8:	0101ffc4 	movi	r4,2047
2008a6ec:	11005e26 	beq	r2,r4,2008a868 <__adddf3+0x610>
2008a6f0:	00c7c83a 	sub	r3,zero,r3
2008a6f4:	29402034 	orhi	r5,r5,128
2008a6f8:	01000e04 	movi	r4,56
2008a6fc:	20c07216 	blt	r4,r3,2008a8c8 <__adddf3+0x670>
2008a700:	010007c4 	movi	r4,31
2008a704:	20c0ce16 	blt	r4,r3,2008aa40 <__adddf3+0x7e8>
2008a708:	01000804 	movi	r4,32
2008a70c:	20c9c83a 	sub	r4,r4,r3
2008a710:	2914983a 	sll	r10,r5,r4
2008a714:	88d2d83a 	srl	r9,r17,r3
2008a718:	8908983a 	sll	r4,r17,r4
2008a71c:	28c6d83a 	srl	r3,r5,r3
2008a720:	5262b03a 	or	r17,r10,r9
2008a724:	2008c03a 	cmpne	r4,r4,zero
2008a728:	8922b03a 	or	r17,r17,r4
2008a72c:	3463c83a 	sub	r17,r6,r17
2008a730:	40c7c83a 	sub	r3,r8,r3
2008a734:	344d803a 	cmpltu	r6,r6,r17
2008a738:	198bc83a 	sub	r5,r3,r6
2008a73c:	1021883a 	mov	r16,r2
2008a740:	3825883a 	mov	r18,r7
2008a744:	003f2006 	br	2008a3c8 <__flash_rwdata_start+0xffff8918>
2008a748:	9886b03a 	or	r3,r19,r2
2008a74c:	1800141e 	bne	r3,zero,2008a7a0 <__adddf3+0x548>
2008a750:	0007883a 	mov	r3,zero
2008a754:	000b883a 	mov	r5,zero
2008a758:	0023883a 	mov	r17,zero
2008a75c:	0021883a 	mov	r16,zero
2008a760:	003f3c06 	br	2008a454 <__flash_rwdata_start+0xffff89a4>
2008a764:	418cb03a 	or	r6,r8,r6
2008a768:	300cc03a 	cmpne	r6,r6,zero
2008a76c:	0011883a 	mov	r8,zero
2008a770:	003f5606 	br	2008a4cc <__flash_rwdata_start+0xffff8a1c>
2008a774:	2c48b03a 	or	r4,r5,r17
2008a778:	20003b26 	beq	r4,zero,2008a868 <__adddf3+0x610>
2008a77c:	00c6303a 	nor	r3,zero,r3
2008a780:	1800371e 	bne	r3,zero,2008a860 <__adddf3+0x608>
2008a784:	3463c83a 	sub	r17,r6,r17
2008a788:	414bc83a 	sub	r5,r8,r5
2008a78c:	344d803a 	cmpltu	r6,r6,r17
2008a790:	298bc83a 	sub	r5,r5,r6
2008a794:	1021883a 	mov	r16,r2
2008a798:	3825883a 	mov	r18,r7
2008a79c:	003f0a06 	br	2008a3c8 <__flash_rwdata_start+0xffff8918>
2008a7a0:	1023883a 	mov	r17,r2
2008a7a4:	003f0d06 	br	2008a3dc <__flash_rwdata_start+0xffff892c>
2008a7a8:	0007883a 	mov	r3,zero
2008a7ac:	000b883a 	mov	r5,zero
2008a7b0:	0023883a 	mov	r17,zero
2008a7b4:	003f2706 	br	2008a454 <__flash_rwdata_start+0xffff89a4>
2008a7b8:	0027883a 	mov	r19,zero
2008a7bc:	003fb706 	br	2008a69c <__flash_rwdata_start+0xffff8bec>
2008a7c0:	0011883a 	mov	r8,zero
2008a7c4:	003fc206 	br	2008a6d0 <__flash_rwdata_start+0xffff8c20>
2008a7c8:	2c44b03a 	or	r2,r5,r17
2008a7cc:	8000871e 	bne	r16,zero,2008a9ec <__adddf3+0x794>
2008a7d0:	1000b126 	beq	r2,zero,2008aa98 <__adddf3+0x840>
2008a7d4:	4184b03a 	or	r2,r8,r6
2008a7d8:	103ebe26 	beq	r2,zero,2008a2d4 <__flash_rwdata_start+0xffff8824>
2008a7dc:	3445883a 	add	r2,r6,r17
2008a7e0:	1463803a 	cmpltu	r17,r2,r17
2008a7e4:	414b883a 	add	r5,r8,r5
2008a7e8:	2c4b883a 	add	r5,r5,r17
2008a7ec:	28c0202c 	andhi	r3,r5,128
2008a7f0:	1023883a 	mov	r17,r2
2008a7f4:	183f6326 	beq	r3,zero,2008a584 <__flash_rwdata_start+0xffff8ad4>
2008a7f8:	00bfe034 	movhi	r2,65408
2008a7fc:	10bfffc4 	addi	r2,r2,-1
2008a800:	2021883a 	mov	r16,r4
2008a804:	288a703a 	and	r5,r5,r2
2008a808:	003eb206 	br	2008a2d4 <__flash_rwdata_start+0xffff8824>
2008a80c:	2c44b03a 	or	r2,r5,r17
2008a810:	8000251e 	bne	r16,zero,2008a8a8 <__adddf3+0x650>
2008a814:	10004b1e 	bne	r2,zero,2008a944 <__adddf3+0x6ec>
2008a818:	4184b03a 	or	r2,r8,r6
2008a81c:	103fe226 	beq	r2,zero,2008a7a8 <__flash_rwdata_start+0xffff8cf8>
2008a820:	400b883a 	mov	r5,r8
2008a824:	3023883a 	mov	r17,r6
2008a828:	3825883a 	mov	r18,r7
2008a82c:	003ea906 	br	2008a2d4 <__flash_rwdata_start+0xffff8824>
2008a830:	20bff804 	addi	r2,r4,-32
2008a834:	01c00804 	movi	r7,32
2008a838:	4084d83a 	srl	r2,r8,r2
2008a83c:	21c07e26 	beq	r4,r7,2008aa38 <__adddf3+0x7e0>
2008a840:	01c01004 	movi	r7,64
2008a844:	3909c83a 	sub	r4,r7,r4
2008a848:	4110983a 	sll	r8,r8,r4
2008a84c:	418cb03a 	or	r6,r8,r6
2008a850:	300cc03a 	cmpne	r6,r6,zero
2008a854:	308cb03a 	or	r6,r6,r2
2008a858:	0011883a 	mov	r8,zero
2008a85c:	003f1b06 	br	2008a4cc <__flash_rwdata_start+0xffff8a1c>
2008a860:	0101ffc4 	movi	r4,2047
2008a864:	113fa41e 	bne	r2,r4,2008a6f8 <__flash_rwdata_start+0xffff8c48>
2008a868:	400b883a 	mov	r5,r8
2008a86c:	3023883a 	mov	r17,r6
2008a870:	1021883a 	mov	r16,r2
2008a874:	3825883a 	mov	r18,r7
2008a878:	003e9606 	br	2008a2d4 <__flash_rwdata_start+0xffff8824>
2008a87c:	80001a1e 	bne	r16,zero,2008a8e8 <__adddf3+0x690>
2008a880:	2c4eb03a 	or	r7,r5,r17
2008a884:	38005526 	beq	r7,zero,2008a9dc <__adddf3+0x784>
2008a888:	0108303a 	nor	r4,zero,r4
2008a88c:	2000511e 	bne	r4,zero,2008a9d4 <__adddf3+0x77c>
2008a890:	89a3883a 	add	r17,r17,r6
2008a894:	414b883a 	add	r5,r8,r5
2008a898:	898d803a 	cmpltu	r6,r17,r6
2008a89c:	298b883a 	add	r5,r5,r6
2008a8a0:	1021883a 	mov	r16,r2
2008a8a4:	003f0e06 	br	2008a4e0 <__flash_rwdata_start+0xffff8a30>
2008a8a8:	1000341e 	bne	r2,zero,2008a97c <__adddf3+0x724>
2008a8ac:	4184b03a 	or	r2,r8,r6
2008a8b0:	10006f26 	beq	r2,zero,2008aa70 <__adddf3+0x818>
2008a8b4:	400b883a 	mov	r5,r8
2008a8b8:	3023883a 	mov	r17,r6
2008a8bc:	3825883a 	mov	r18,r7
2008a8c0:	0401ffc4 	movi	r16,2047
2008a8c4:	003e8306 	br	2008a2d4 <__flash_rwdata_start+0xffff8824>
2008a8c8:	2c62b03a 	or	r17,r5,r17
2008a8cc:	8822c03a 	cmpne	r17,r17,zero
2008a8d0:	0007883a 	mov	r3,zero
2008a8d4:	003f9506 	br	2008a72c <__flash_rwdata_start+0xffff8c7c>
2008a8d8:	1021883a 	mov	r16,r2
2008a8dc:	000b883a 	mov	r5,zero
2008a8e0:	0023883a 	mov	r17,zero
2008a8e4:	003edb06 	br	2008a454 <__flash_rwdata_start+0xffff89a4>
2008a8e8:	01c1ffc4 	movi	r7,2047
2008a8ec:	11c03b26 	beq	r2,r7,2008a9dc <__adddf3+0x784>
2008a8f0:	0109c83a 	sub	r4,zero,r4
2008a8f4:	29402034 	orhi	r5,r5,128
2008a8f8:	01c00e04 	movi	r7,56
2008a8fc:	39006216 	blt	r7,r4,2008aa88 <__adddf3+0x830>
2008a900:	01c007c4 	movi	r7,31
2008a904:	39006b16 	blt	r7,r4,2008aab4 <__adddf3+0x85c>
2008a908:	01c00804 	movi	r7,32
2008a90c:	390fc83a 	sub	r7,r7,r4
2008a910:	29d4983a 	sll	r10,r5,r7
2008a914:	8912d83a 	srl	r9,r17,r4
2008a918:	89ce983a 	sll	r7,r17,r7
2008a91c:	2908d83a 	srl	r4,r5,r4
2008a920:	5262b03a 	or	r17,r10,r9
2008a924:	380ac03a 	cmpne	r5,r7,zero
2008a928:	8962b03a 	or	r17,r17,r5
2008a92c:	89a3883a 	add	r17,r17,r6
2008a930:	2211883a 	add	r8,r4,r8
2008a934:	898d803a 	cmpltu	r6,r17,r6
2008a938:	418b883a 	add	r5,r8,r6
2008a93c:	1021883a 	mov	r16,r2
2008a940:	003ee706 	br	2008a4e0 <__flash_rwdata_start+0xffff8a30>
2008a944:	4184b03a 	or	r2,r8,r6
2008a948:	103e6226 	beq	r2,zero,2008a2d4 <__flash_rwdata_start+0xffff8824>
2008a94c:	8987c83a 	sub	r3,r17,r6
2008a950:	88c9803a 	cmpltu	r4,r17,r3
2008a954:	2a05c83a 	sub	r2,r5,r8
2008a958:	1105c83a 	sub	r2,r2,r4
2008a95c:	1100202c 	andhi	r4,r2,128
2008a960:	203f0426 	beq	r4,zero,2008a574 <__flash_rwdata_start+0xffff8ac4>
2008a964:	3463c83a 	sub	r17,r6,r17
2008a968:	414bc83a 	sub	r5,r8,r5
2008a96c:	344d803a 	cmpltu	r6,r6,r17
2008a970:	298bc83a 	sub	r5,r5,r6
2008a974:	3825883a 	mov	r18,r7
2008a978:	003e5606 	br	2008a2d4 <__flash_rwdata_start+0xffff8824>
2008a97c:	4184b03a 	or	r2,r8,r6
2008a980:	10002b26 	beq	r2,zero,2008aa30 <__adddf3+0x7d8>
2008a984:	2804d0fa 	srli	r2,r5,3
2008a988:	8822d0fa 	srli	r17,r17,3
2008a98c:	280a977a 	slli	r5,r5,29
2008a990:	10c0022c 	andhi	r3,r2,8
2008a994:	2c62b03a 	or	r17,r5,r17
2008a998:	18000826 	beq	r3,zero,2008a9bc <__adddf3+0x764>
2008a99c:	4008d0fa 	srli	r4,r8,3
2008a9a0:	20c0022c 	andhi	r3,r4,8
2008a9a4:	1800051e 	bne	r3,zero,2008a9bc <__adddf3+0x764>
2008a9a8:	300cd0fa 	srli	r6,r6,3
2008a9ac:	4010977a 	slli	r8,r8,29
2008a9b0:	2005883a 	mov	r2,r4
2008a9b4:	3825883a 	mov	r18,r7
2008a9b8:	41a2b03a 	or	r17,r8,r6
2008a9bc:	880ad77a 	srli	r5,r17,29
2008a9c0:	100490fa 	slli	r2,r2,3
2008a9c4:	882290fa 	slli	r17,r17,3
2008a9c8:	0401ffc4 	movi	r16,2047
2008a9cc:	288ab03a 	or	r5,r5,r2
2008a9d0:	003e4006 	br	2008a2d4 <__flash_rwdata_start+0xffff8824>
2008a9d4:	01c1ffc4 	movi	r7,2047
2008a9d8:	11ffc71e 	bne	r2,r7,2008a8f8 <__flash_rwdata_start+0xffff8e48>
2008a9dc:	400b883a 	mov	r5,r8
2008a9e0:	3023883a 	mov	r17,r6
2008a9e4:	1021883a 	mov	r16,r2
2008a9e8:	003e3a06 	br	2008a2d4 <__flash_rwdata_start+0xffff8824>
2008a9ec:	10002d26 	beq	r2,zero,2008aaa4 <__adddf3+0x84c>
2008a9f0:	4184b03a 	or	r2,r8,r6
2008a9f4:	10000e26 	beq	r2,zero,2008aa30 <__adddf3+0x7d8>
2008a9f8:	2804d0fa 	srli	r2,r5,3
2008a9fc:	8822d0fa 	srli	r17,r17,3
2008aa00:	280a977a 	slli	r5,r5,29
2008aa04:	10c0022c 	andhi	r3,r2,8
2008aa08:	2c62b03a 	or	r17,r5,r17
2008aa0c:	183feb26 	beq	r3,zero,2008a9bc <__flash_rwdata_start+0xffff8f0c>
2008aa10:	4008d0fa 	srli	r4,r8,3
2008aa14:	20c0022c 	andhi	r3,r4,8
2008aa18:	183fe81e 	bne	r3,zero,2008a9bc <__flash_rwdata_start+0xffff8f0c>
2008aa1c:	300cd0fa 	srli	r6,r6,3
2008aa20:	4010977a 	slli	r8,r8,29
2008aa24:	2005883a 	mov	r2,r4
2008aa28:	41a2b03a 	or	r17,r8,r6
2008aa2c:	003fe306 	br	2008a9bc <__flash_rwdata_start+0xffff8f0c>
2008aa30:	0401ffc4 	movi	r16,2047
2008aa34:	003e2706 	br	2008a2d4 <__flash_rwdata_start+0xffff8824>
2008aa38:	0011883a 	mov	r8,zero
2008aa3c:	003f8306 	br	2008a84c <__flash_rwdata_start+0xffff8d9c>
2008aa40:	193ff804 	addi	r4,r3,-32
2008aa44:	02400804 	movi	r9,32
2008aa48:	2908d83a 	srl	r4,r5,r4
2008aa4c:	1a402526 	beq	r3,r9,2008aae4 <__adddf3+0x88c>
2008aa50:	02401004 	movi	r9,64
2008aa54:	48c7c83a 	sub	r3,r9,r3
2008aa58:	28ca983a 	sll	r5,r5,r3
2008aa5c:	2c62b03a 	or	r17,r5,r17
2008aa60:	8822c03a 	cmpne	r17,r17,zero
2008aa64:	8922b03a 	or	r17,r17,r4
2008aa68:	0007883a 	mov	r3,zero
2008aa6c:	003f2f06 	br	2008a72c <__flash_rwdata_start+0xffff8c7c>
2008aa70:	01402034 	movhi	r5,128
2008aa74:	0007883a 	mov	r3,zero
2008aa78:	297fffc4 	addi	r5,r5,-1
2008aa7c:	047ffe04 	movi	r17,-8
2008aa80:	0401ffc4 	movi	r16,2047
2008aa84:	003e7306 	br	2008a454 <__flash_rwdata_start+0xffff89a4>
2008aa88:	2c62b03a 	or	r17,r5,r17
2008aa8c:	8822c03a 	cmpne	r17,r17,zero
2008aa90:	0009883a 	mov	r4,zero
2008aa94:	003fa506 	br	2008a92c <__flash_rwdata_start+0xffff8e7c>
2008aa98:	400b883a 	mov	r5,r8
2008aa9c:	3023883a 	mov	r17,r6
2008aaa0:	003e0c06 	br	2008a2d4 <__flash_rwdata_start+0xffff8824>
2008aaa4:	400b883a 	mov	r5,r8
2008aaa8:	3023883a 	mov	r17,r6
2008aaac:	0401ffc4 	movi	r16,2047
2008aab0:	003e0806 	br	2008a2d4 <__flash_rwdata_start+0xffff8824>
2008aab4:	21fff804 	addi	r7,r4,-32
2008aab8:	02400804 	movi	r9,32
2008aabc:	29ced83a 	srl	r7,r5,r7
2008aac0:	22400a26 	beq	r4,r9,2008aaec <__adddf3+0x894>
2008aac4:	02401004 	movi	r9,64
2008aac8:	4909c83a 	sub	r4,r9,r4
2008aacc:	290a983a 	sll	r5,r5,r4
2008aad0:	2c62b03a 	or	r17,r5,r17
2008aad4:	8822c03a 	cmpne	r17,r17,zero
2008aad8:	89e2b03a 	or	r17,r17,r7
2008aadc:	0009883a 	mov	r4,zero
2008aae0:	003f9206 	br	2008a92c <__flash_rwdata_start+0xffff8e7c>
2008aae4:	000b883a 	mov	r5,zero
2008aae8:	003fdc06 	br	2008aa5c <__flash_rwdata_start+0xffff8fac>
2008aaec:	000b883a 	mov	r5,zero
2008aaf0:	003ff706 	br	2008aad0 <__flash_rwdata_start+0xffff9020>

2008aaf4 <__divdf3>:
2008aaf4:	defff204 	addi	sp,sp,-56
2008aaf8:	dd000815 	stw	r20,32(sp)
2008aafc:	2828d53a 	srli	r20,r5,20
2008ab00:	dd800a15 	stw	r22,40(sp)
2008ab04:	282cd7fa 	srli	r22,r5,31
2008ab08:	dc000415 	stw	r16,16(sp)
2008ab0c:	04000434 	movhi	r16,16
2008ab10:	df000c15 	stw	fp,48(sp)
2008ab14:	dcc00715 	stw	r19,28(sp)
2008ab18:	dc800615 	stw	r18,24(sp)
2008ab1c:	dc400515 	stw	r17,20(sp)
2008ab20:	843fffc4 	addi	r16,r16,-1
2008ab24:	dfc00d15 	stw	ra,52(sp)
2008ab28:	ddc00b15 	stw	r23,44(sp)
2008ab2c:	dd400915 	stw	r21,36(sp)
2008ab30:	a501ffcc 	andi	r20,r20,2047
2008ab34:	2025883a 	mov	r18,r4
2008ab38:	2027883a 	mov	r19,r4
2008ab3c:	2c22703a 	and	r17,r5,r16
2008ab40:	b7003fcc 	andi	fp,r22,255
2008ab44:	a0005e26 	beq	r20,zero,2008acc0 <__divdf3+0x1cc>
2008ab48:	0081ffc4 	movi	r2,2047
2008ab4c:	a0803526 	beq	r20,r2,2008ac24 <__divdf3+0x130>
2008ab50:	8c000434 	orhi	r16,r17,16
2008ab54:	2004d77a 	srli	r2,r4,29
2008ab58:	802090fa 	slli	r16,r16,3
2008ab5c:	202690fa 	slli	r19,r4,3
2008ab60:	a53f0044 	addi	r20,r20,-1023
2008ab64:	80a2b03a 	or	r17,r16,r2
2008ab68:	0025883a 	mov	r18,zero
2008ab6c:	0011883a 	mov	r8,zero
2008ab70:	380ad53a 	srli	r5,r7,20
2008ab74:	382ed7fa 	srli	r23,r7,31
2008ab78:	04000434 	movhi	r16,16
2008ab7c:	843fffc4 	addi	r16,r16,-1
2008ab80:	2941ffcc 	andi	r5,r5,2047
2008ab84:	302b883a 	mov	r21,r6
2008ab88:	3c20703a 	and	r16,r7,r16
2008ab8c:	ba403fcc 	andi	r9,r23,255
2008ab90:	28006726 	beq	r5,zero,2008ad30 <__divdf3+0x23c>
2008ab94:	0081ffc4 	movi	r2,2047
2008ab98:	28805f26 	beq	r5,r2,2008ad18 <__divdf3+0x224>
2008ab9c:	84000434 	orhi	r16,r16,16
2008aba0:	3004d77a 	srli	r2,r6,29
2008aba4:	802090fa 	slli	r16,r16,3
2008aba8:	302a90fa 	slli	r21,r6,3
2008abac:	297f0044 	addi	r5,r5,-1023
2008abb0:	80a0b03a 	or	r16,r16,r2
2008abb4:	000f883a 	mov	r7,zero
2008abb8:	3c86b03a 	or	r3,r7,r18
2008abbc:	180690ba 	slli	r3,r3,2
2008abc0:	00880274 	movhi	r2,8201
2008abc4:	10aaf904 	addi	r2,r2,-21532
2008abc8:	1887883a 	add	r3,r3,r2
2008abcc:	18c00017 	ldw	r3,0(r3)
2008abd0:	b5c8f03a 	xor	r4,r22,r23
2008abd4:	200d883a 	mov	r6,r4
2008abd8:	24803fcc 	andi	r18,r4,255
2008abdc:	a169c83a 	sub	r20,r20,r5
2008abe0:	1800683a 	jmp	r3
2008abe4:	2008ae2c 	andhi	zero,r4,8888
2008abe8:	2008ac5c 	xori	zero,r4,8881
2008abec:	2008adf0 	cmpltui	zero,r4,8887
2008abf0:	2008ac40 	call	22008ac4 <__flash_rwdata_start+0x1f77014>
2008abf4:	2008adf0 	cmpltui	zero,r4,8887
2008abf8:	2008adc4 	addi	zero,r4,8887
2008abfc:	2008adf0 	cmpltui	zero,r4,8887
2008ac00:	2008ac40 	call	22008ac4 <__flash_rwdata_start+0x1f77014>
2008ac04:	2008ac5c 	xori	zero,r4,8881
2008ac08:	2008ac5c 	xori	zero,r4,8881
2008ac0c:	2008adc4 	addi	zero,r4,8887
2008ac10:	2008ac40 	call	22008ac4 <__flash_rwdata_start+0x1f77014>
2008ac14:	2008ac50 	cmplti	zero,r4,8881
2008ac18:	2008ac50 	cmplti	zero,r4,8881
2008ac1c:	2008ac50 	cmplti	zero,r4,8881
2008ac20:	2008ae00 	call	22008ae0 <__flash_rwdata_start+0x1f77030>
2008ac24:	8904b03a 	or	r2,r17,r4
2008ac28:	1000631e 	bne	r2,zero,2008adb8 <__divdf3+0x2c4>
2008ac2c:	04800204 	movi	r18,8
2008ac30:	0023883a 	mov	r17,zero
2008ac34:	0027883a 	mov	r19,zero
2008ac38:	02000084 	movi	r8,2
2008ac3c:	003fcc06 	br	2008ab70 <__flash_rwdata_start+0xffff90c0>
2008ac40:	8023883a 	mov	r17,r16
2008ac44:	a827883a 	mov	r19,r21
2008ac48:	4839883a 	mov	fp,r9
2008ac4c:	3811883a 	mov	r8,r7
2008ac50:	00800084 	movi	r2,2
2008ac54:	40812a1e 	bne	r8,r2,2008b100 <__divdf3+0x60c>
2008ac58:	e025883a 	mov	r18,fp
2008ac5c:	9180004c 	andi	r6,r18,1
2008ac60:	0101ffc4 	movi	r4,2047
2008ac64:	000b883a 	mov	r5,zero
2008ac68:	0027883a 	mov	r19,zero
2008ac6c:	2008953a 	slli	r4,r4,20
2008ac70:	30c03fcc 	andi	r3,r6,255
2008ac74:	04000434 	movhi	r16,16
2008ac78:	180697fa 	slli	r3,r3,31
2008ac7c:	843fffc4 	addi	r16,r16,-1
2008ac80:	2c20703a 	and	r16,r5,r16
2008ac84:	8120b03a 	or	r16,r16,r4
2008ac88:	80c6b03a 	or	r3,r16,r3
2008ac8c:	9805883a 	mov	r2,r19
2008ac90:	dfc00d17 	ldw	ra,52(sp)
2008ac94:	df000c17 	ldw	fp,48(sp)
2008ac98:	ddc00b17 	ldw	r23,44(sp)
2008ac9c:	dd800a17 	ldw	r22,40(sp)
2008aca0:	dd400917 	ldw	r21,36(sp)
2008aca4:	dd000817 	ldw	r20,32(sp)
2008aca8:	dcc00717 	ldw	r19,28(sp)
2008acac:	dc800617 	ldw	r18,24(sp)
2008acb0:	dc400517 	ldw	r17,20(sp)
2008acb4:	dc000417 	ldw	r16,16(sp)
2008acb8:	dec00e04 	addi	sp,sp,56
2008acbc:	f800283a 	ret
2008acc0:	8904b03a 	or	r2,r17,r4
2008acc4:	10003726 	beq	r2,zero,2008ada4 <__divdf3+0x2b0>
2008acc8:	88011c26 	beq	r17,zero,2008b13c <__divdf3+0x648>
2008accc:	8809883a 	mov	r4,r17
2008acd0:	d9800315 	stw	r6,12(sp)
2008acd4:	d9c00115 	stw	r7,4(sp)
2008acd8:	008c7f40 	call	2008c7f4 <__clzsi2>
2008acdc:	d9800317 	ldw	r6,12(sp)
2008ace0:	d9c00117 	ldw	r7,4(sp)
2008ace4:	1007883a 	mov	r3,r2
2008ace8:	01000a04 	movi	r4,40
2008acec:	1cfffe04 	addi	r19,r3,-8
2008acf0:	20c9c83a 	sub	r4,r4,r3
2008acf4:	8cca983a 	sll	r5,r17,r19
2008acf8:	9108d83a 	srl	r4,r18,r4
2008acfc:	94e6983a 	sll	r19,r18,r19
2008ad00:	2162b03a 	or	r17,r4,r5
2008ad04:	053f0344 	movi	r20,-1011
2008ad08:	a0e9c83a 	sub	r20,r20,r3
2008ad0c:	0025883a 	mov	r18,zero
2008ad10:	0011883a 	mov	r8,zero
2008ad14:	003f9606 	br	2008ab70 <__flash_rwdata_start+0xffff90c0>
2008ad18:	8184b03a 	or	r2,r16,r6
2008ad1c:	10001f1e 	bne	r2,zero,2008ad9c <__divdf3+0x2a8>
2008ad20:	0021883a 	mov	r16,zero
2008ad24:	002b883a 	mov	r21,zero
2008ad28:	01c00084 	movi	r7,2
2008ad2c:	003fa206 	br	2008abb8 <__flash_rwdata_start+0xffff9108>
2008ad30:	8184b03a 	or	r2,r16,r6
2008ad34:	10001526 	beq	r2,zero,2008ad8c <__divdf3+0x298>
2008ad38:	80010c26 	beq	r16,zero,2008b16c <__divdf3+0x678>
2008ad3c:	8009883a 	mov	r4,r16
2008ad40:	d9800315 	stw	r6,12(sp)
2008ad44:	da000215 	stw	r8,8(sp)
2008ad48:	da400015 	stw	r9,0(sp)
2008ad4c:	008c7f40 	call	2008c7f4 <__clzsi2>
2008ad50:	d9800317 	ldw	r6,12(sp)
2008ad54:	da000217 	ldw	r8,8(sp)
2008ad58:	da400017 	ldw	r9,0(sp)
2008ad5c:	1007883a 	mov	r3,r2
2008ad60:	01000a04 	movi	r4,40
2008ad64:	1d7ffe04 	addi	r21,r3,-8
2008ad68:	20c9c83a 	sub	r4,r4,r3
2008ad6c:	8560983a 	sll	r16,r16,r21
2008ad70:	3108d83a 	srl	r4,r6,r4
2008ad74:	356a983a 	sll	r21,r6,r21
2008ad78:	2420b03a 	or	r16,r4,r16
2008ad7c:	017f0344 	movi	r5,-1011
2008ad80:	28cbc83a 	sub	r5,r5,r3
2008ad84:	000f883a 	mov	r7,zero
2008ad88:	003f8b06 	br	2008abb8 <__flash_rwdata_start+0xffff9108>
2008ad8c:	0021883a 	mov	r16,zero
2008ad90:	002b883a 	mov	r21,zero
2008ad94:	01c00044 	movi	r7,1
2008ad98:	003f8706 	br	2008abb8 <__flash_rwdata_start+0xffff9108>
2008ad9c:	01c000c4 	movi	r7,3
2008ada0:	003f8506 	br	2008abb8 <__flash_rwdata_start+0xffff9108>
2008ada4:	04800104 	movi	r18,4
2008ada8:	0023883a 	mov	r17,zero
2008adac:	0027883a 	mov	r19,zero
2008adb0:	02000044 	movi	r8,1
2008adb4:	003f6e06 	br	2008ab70 <__flash_rwdata_start+0xffff90c0>
2008adb8:	04800304 	movi	r18,12
2008adbc:	020000c4 	movi	r8,3
2008adc0:	003f6b06 	br	2008ab70 <__flash_rwdata_start+0xffff90c0>
2008adc4:	01400434 	movhi	r5,16
2008adc8:	000d883a 	mov	r6,zero
2008adcc:	297fffc4 	addi	r5,r5,-1
2008add0:	04ffffc4 	movi	r19,-1
2008add4:	0101ffc4 	movi	r4,2047
2008add8:	003fa406 	br	2008ac6c <__flash_rwdata_start+0xffff91bc>
2008addc:	043f0084 	movi	r16,-1022
2008ade0:	8521c83a 	sub	r16,r16,r20
2008ade4:	00800e04 	movi	r2,56
2008ade8:	1401200e 	bge	r2,r16,2008b26c <__divdf3+0x778>
2008adec:	9180004c 	andi	r6,r18,1
2008adf0:	0009883a 	mov	r4,zero
2008adf4:	000b883a 	mov	r5,zero
2008adf8:	0027883a 	mov	r19,zero
2008adfc:	003f9b06 	br	2008ac6c <__flash_rwdata_start+0xffff91bc>
2008ae00:	8880022c 	andhi	r2,r17,8
2008ae04:	1000c726 	beq	r2,zero,2008b124 <__divdf3+0x630>
2008ae08:	8080022c 	andhi	r2,r16,8
2008ae0c:	1000c51e 	bne	r2,zero,2008b124 <__divdf3+0x630>
2008ae10:	00800434 	movhi	r2,16
2008ae14:	81400234 	orhi	r5,r16,8
2008ae18:	10bfffc4 	addi	r2,r2,-1
2008ae1c:	b80d883a 	mov	r6,r23
2008ae20:	288a703a 	and	r5,r5,r2
2008ae24:	a827883a 	mov	r19,r21
2008ae28:	003fea06 	br	2008add4 <__flash_rwdata_start+0xffff9324>
2008ae2c:	8440ea36 	bltu	r16,r17,2008b1d8 <__divdf3+0x6e4>
2008ae30:	8c00e826 	beq	r17,r16,2008b1d4 <__divdf3+0x6e0>
2008ae34:	a53fffc4 	addi	r20,r20,-1
2008ae38:	882d883a 	mov	r22,r17
2008ae3c:	000d883a 	mov	r6,zero
2008ae40:	a804d63a 	srli	r2,r21,24
2008ae44:	8020923a 	slli	r16,r16,8
2008ae48:	b009883a 	mov	r4,r22
2008ae4c:	d9800315 	stw	r6,12(sp)
2008ae50:	1420b03a 	or	r16,r2,r16
2008ae54:	802ed43a 	srli	r23,r16,16
2008ae58:	873fffcc 	andi	fp,r16,65535
2008ae5c:	a82a923a 	slli	r21,r21,8
2008ae60:	b80b883a 	mov	r5,r23
2008ae64:	008a2480 	call	2008a248 <__udivsi3>
2008ae68:	b009883a 	mov	r4,r22
2008ae6c:	b80b883a 	mov	r5,r23
2008ae70:	1023883a 	mov	r17,r2
2008ae74:	008a2500 	call	2008a250 <__umodsi3>
2008ae78:	1004943a 	slli	r2,r2,16
2008ae7c:	9808d43a 	srli	r4,r19,16
2008ae80:	8f2d383a 	mul	r22,r17,fp
2008ae84:	d9800317 	ldw	r6,12(sp)
2008ae88:	1106b03a 	or	r3,r2,r4
2008ae8c:	1d80062e 	bgeu	r3,r22,2008aea8 <__divdf3+0x3b4>
2008ae90:	1c07883a 	add	r3,r3,r16
2008ae94:	88bfffc4 	addi	r2,r17,-1
2008ae98:	1c00dc36 	bltu	r3,r16,2008b20c <__divdf3+0x718>
2008ae9c:	1d80db2e 	bgeu	r3,r22,2008b20c <__divdf3+0x718>
2008aea0:	8c7fff84 	addi	r17,r17,-2
2008aea4:	1c07883a 	add	r3,r3,r16
2008aea8:	1dadc83a 	sub	r22,r3,r22
2008aeac:	b009883a 	mov	r4,r22
2008aeb0:	b80b883a 	mov	r5,r23
2008aeb4:	d9800315 	stw	r6,12(sp)
2008aeb8:	008a2480 	call	2008a248 <__udivsi3>
2008aebc:	b009883a 	mov	r4,r22
2008aec0:	b80b883a 	mov	r5,r23
2008aec4:	d8800015 	stw	r2,0(sp)
2008aec8:	008a2500 	call	2008a250 <__umodsi3>
2008aecc:	da400017 	ldw	r9,0(sp)
2008aed0:	1004943a 	slli	r2,r2,16
2008aed4:	9cffffcc 	andi	r19,r19,65535
2008aed8:	4f07383a 	mul	r3,r9,fp
2008aedc:	14c8b03a 	or	r4,r2,r19
2008aee0:	d9800317 	ldw	r6,12(sp)
2008aee4:	20c0062e 	bgeu	r4,r3,2008af00 <__divdf3+0x40c>
2008aee8:	2409883a 	add	r4,r4,r16
2008aeec:	48bfffc4 	addi	r2,r9,-1
2008aef0:	2400c436 	bltu	r4,r16,2008b204 <__divdf3+0x710>
2008aef4:	20c0c32e 	bgeu	r4,r3,2008b204 <__divdf3+0x710>
2008aef8:	4a7fff84 	addi	r9,r9,-2
2008aefc:	2409883a 	add	r4,r4,r16
2008af00:	8822943a 	slli	r17,r17,16
2008af04:	a80ed43a 	srli	r7,r21,16
2008af08:	aa3fffcc 	andi	r8,r21,65535
2008af0c:	4c62b03a 	or	r17,r9,r17
2008af10:	8816d43a 	srli	r11,r17,16
2008af14:	897fffcc 	andi	r5,r17,65535
2008af18:	2a15383a 	mul	r10,r5,r8
2008af1c:	5a19383a 	mul	r12,r11,r8
2008af20:	29cb383a 	mul	r5,r5,r7
2008af24:	5012d43a 	srli	r9,r10,16
2008af28:	20c5c83a 	sub	r2,r4,r3
2008af2c:	614b883a 	add	r5,r12,r5
2008af30:	2a4b883a 	add	r5,r5,r9
2008af34:	59c7383a 	mul	r3,r11,r7
2008af38:	2b00022e 	bgeu	r5,r12,2008af44 <__divdf3+0x450>
2008af3c:	01000074 	movhi	r4,1
2008af40:	1907883a 	add	r3,r3,r4
2008af44:	2808d43a 	srli	r4,r5,16
2008af48:	280a943a 	slli	r5,r5,16
2008af4c:	54ffffcc 	andi	r19,r10,65535
2008af50:	1907883a 	add	r3,r3,r4
2008af54:	2ccb883a 	add	r5,r5,r19
2008af58:	10c09336 	bltu	r2,r3,2008b1a8 <__divdf3+0x6b4>
2008af5c:	10c0ad26 	beq	r2,r3,2008b214 <__divdf3+0x720>
2008af60:	10c7c83a 	sub	r3,r2,r3
2008af64:	3167c83a 	sub	r19,r6,r5
2008af68:	34ed803a 	cmpltu	r22,r6,r19
2008af6c:	1dadc83a 	sub	r22,r3,r22
2008af70:	b400b226 	beq	r22,r16,2008b23c <__divdf3+0x748>
2008af74:	b009883a 	mov	r4,r22
2008af78:	b80b883a 	mov	r5,r23
2008af7c:	d9c00115 	stw	r7,4(sp)
2008af80:	da000215 	stw	r8,8(sp)
2008af84:	008a2480 	call	2008a248 <__udivsi3>
2008af88:	b009883a 	mov	r4,r22
2008af8c:	b80b883a 	mov	r5,r23
2008af90:	d8800315 	stw	r2,12(sp)
2008af94:	008a2500 	call	2008a250 <__umodsi3>
2008af98:	d9800317 	ldw	r6,12(sp)
2008af9c:	1004943a 	slli	r2,r2,16
2008afa0:	9808d43a 	srli	r4,r19,16
2008afa4:	372d383a 	mul	r22,r6,fp
2008afa8:	d9c00117 	ldw	r7,4(sp)
2008afac:	1106b03a 	or	r3,r2,r4
2008afb0:	da000217 	ldw	r8,8(sp)
2008afb4:	1d80062e 	bgeu	r3,r22,2008afd0 <__divdf3+0x4dc>
2008afb8:	1c07883a 	add	r3,r3,r16
2008afbc:	30bfffc4 	addi	r2,r6,-1
2008afc0:	1c00a036 	bltu	r3,r16,2008b244 <__divdf3+0x750>
2008afc4:	1d809f2e 	bgeu	r3,r22,2008b244 <__divdf3+0x750>
2008afc8:	31bfff84 	addi	r6,r6,-2
2008afcc:	1c07883a 	add	r3,r3,r16
2008afd0:	1dadc83a 	sub	r22,r3,r22
2008afd4:	b009883a 	mov	r4,r22
2008afd8:	b80b883a 	mov	r5,r23
2008afdc:	d9800315 	stw	r6,12(sp)
2008afe0:	d9c00115 	stw	r7,4(sp)
2008afe4:	da000215 	stw	r8,8(sp)
2008afe8:	008a2480 	call	2008a248 <__udivsi3>
2008afec:	b009883a 	mov	r4,r22
2008aff0:	b80b883a 	mov	r5,r23
2008aff4:	d8800015 	stw	r2,0(sp)
2008aff8:	008a2500 	call	2008a250 <__umodsi3>
2008affc:	da400017 	ldw	r9,0(sp)
2008b000:	1004943a 	slli	r2,r2,16
2008b004:	993fffcc 	andi	r4,r19,65535
2008b008:	4f39383a 	mul	fp,r9,fp
2008b00c:	1106b03a 	or	r3,r2,r4
2008b010:	d9800317 	ldw	r6,12(sp)
2008b014:	d9c00117 	ldw	r7,4(sp)
2008b018:	da000217 	ldw	r8,8(sp)
2008b01c:	1f00062e 	bgeu	r3,fp,2008b038 <__divdf3+0x544>
2008b020:	1c07883a 	add	r3,r3,r16
2008b024:	48bfffc4 	addi	r2,r9,-1
2008b028:	1c008836 	bltu	r3,r16,2008b24c <__divdf3+0x758>
2008b02c:	1f00872e 	bgeu	r3,fp,2008b24c <__divdf3+0x758>
2008b030:	4a7fff84 	addi	r9,r9,-2
2008b034:	1c07883a 	add	r3,r3,r16
2008b038:	3008943a 	slli	r4,r6,16
2008b03c:	1f07c83a 	sub	r3,r3,fp
2008b040:	4926b03a 	or	r19,r9,r4
2008b044:	993fffcc 	andi	r4,r19,65535
2008b048:	980cd43a 	srli	r6,r19,16
2008b04c:	220b383a 	mul	r5,r4,r8
2008b050:	21c5383a 	mul	r2,r4,r7
2008b054:	3211383a 	mul	r8,r6,r8
2008b058:	2808d43a 	srli	r4,r5,16
2008b05c:	31cf383a 	mul	r7,r6,r7
2008b060:	4085883a 	add	r2,r8,r2
2008b064:	1105883a 	add	r2,r2,r4
2008b068:	1200022e 	bgeu	r2,r8,2008b074 <__divdf3+0x580>
2008b06c:	01000074 	movhi	r4,1
2008b070:	390f883a 	add	r7,r7,r4
2008b074:	1008d43a 	srli	r4,r2,16
2008b078:	1004943a 	slli	r2,r2,16
2008b07c:	297fffcc 	andi	r5,r5,65535
2008b080:	390f883a 	add	r7,r7,r4
2008b084:	1145883a 	add	r2,r2,r5
2008b088:	19c06536 	bltu	r3,r7,2008b220 <__divdf3+0x72c>
2008b08c:	19c09f26 	beq	r3,r7,2008b30c <__divdf3+0x818>
2008b090:	9cc00054 	ori	r19,r19,1
2008b094:	a100ffc4 	addi	r4,r20,1023
2008b098:	013f500e 	bge	zero,r4,2008addc <__flash_rwdata_start+0xffff932c>
2008b09c:	988001cc 	andi	r2,r19,7
2008b0a0:	10000726 	beq	r2,zero,2008b0c0 <__divdf3+0x5cc>
2008b0a4:	98c003cc 	andi	r3,r19,15
2008b0a8:	00800104 	movi	r2,4
2008b0ac:	18800426 	beq	r3,r2,2008b0c0 <__divdf3+0x5cc>
2008b0b0:	9885883a 	add	r2,r19,r2
2008b0b4:	14e1803a 	cmpltu	r16,r2,r19
2008b0b8:	8c23883a 	add	r17,r17,r16
2008b0bc:	1027883a 	mov	r19,r2
2008b0c0:	8880402c 	andhi	r2,r17,256
2008b0c4:	10000426 	beq	r2,zero,2008b0d8 <__divdf3+0x5e4>
2008b0c8:	00bfc034 	movhi	r2,65280
2008b0cc:	10bfffc4 	addi	r2,r2,-1
2008b0d0:	a1010004 	addi	r4,r20,1024
2008b0d4:	88a2703a 	and	r17,r17,r2
2008b0d8:	0081ff84 	movi	r2,2046
2008b0dc:	113edf16 	blt	r2,r4,2008ac5c <__flash_rwdata_start+0xffff91ac>
2008b0e0:	9826d0fa 	srli	r19,r19,3
2008b0e4:	8804977a 	slli	r2,r17,29
2008b0e8:	8820927a 	slli	r16,r17,9
2008b0ec:	2101ffcc 	andi	r4,r4,2047
2008b0f0:	14e6b03a 	or	r19,r2,r19
2008b0f4:	800ad33a 	srli	r5,r16,12
2008b0f8:	9180004c 	andi	r6,r18,1
2008b0fc:	003edb06 	br	2008ac6c <__flash_rwdata_start+0xffff91bc>
2008b100:	008000c4 	movi	r2,3
2008b104:	4080a826 	beq	r8,r2,2008b3a8 <__divdf3+0x8b4>
2008b108:	00800044 	movi	r2,1
2008b10c:	4080551e 	bne	r8,r2,2008b264 <__divdf3+0x770>
2008b110:	e00d883a 	mov	r6,fp
2008b114:	0009883a 	mov	r4,zero
2008b118:	000b883a 	mov	r5,zero
2008b11c:	0027883a 	mov	r19,zero
2008b120:	003ed206 	br	2008ac6c <__flash_rwdata_start+0xffff91bc>
2008b124:	00800434 	movhi	r2,16
2008b128:	89400234 	orhi	r5,r17,8
2008b12c:	10bfffc4 	addi	r2,r2,-1
2008b130:	b00d883a 	mov	r6,r22
2008b134:	288a703a 	and	r5,r5,r2
2008b138:	003f2606 	br	2008add4 <__flash_rwdata_start+0xffff9324>
2008b13c:	d9800315 	stw	r6,12(sp)
2008b140:	d9c00115 	stw	r7,4(sp)
2008b144:	008c7f40 	call	2008c7f4 <__clzsi2>
2008b148:	10c00804 	addi	r3,r2,32
2008b14c:	010009c4 	movi	r4,39
2008b150:	d9800317 	ldw	r6,12(sp)
2008b154:	d9c00117 	ldw	r7,4(sp)
2008b158:	20fee30e 	bge	r4,r3,2008ace8 <__flash_rwdata_start+0xffff9238>
2008b15c:	117ffe04 	addi	r5,r2,-8
2008b160:	9162983a 	sll	r17,r18,r5
2008b164:	0027883a 	mov	r19,zero
2008b168:	003ee606 	br	2008ad04 <__flash_rwdata_start+0xffff9254>
2008b16c:	3009883a 	mov	r4,r6
2008b170:	d9800315 	stw	r6,12(sp)
2008b174:	da000215 	stw	r8,8(sp)
2008b178:	da400015 	stw	r9,0(sp)
2008b17c:	008c7f40 	call	2008c7f4 <__clzsi2>
2008b180:	10c00804 	addi	r3,r2,32
2008b184:	010009c4 	movi	r4,39
2008b188:	d9800317 	ldw	r6,12(sp)
2008b18c:	da000217 	ldw	r8,8(sp)
2008b190:	da400017 	ldw	r9,0(sp)
2008b194:	20fef20e 	bge	r4,r3,2008ad60 <__flash_rwdata_start+0xffff92b0>
2008b198:	10bffe04 	addi	r2,r2,-8
2008b19c:	a8a0983a 	sll	r16,r21,r2
2008b1a0:	002b883a 	mov	r21,zero
2008b1a4:	003ef506 	br	2008ad7c <__flash_rwdata_start+0xffff92cc>
2008b1a8:	354d883a 	add	r6,r6,r21
2008b1ac:	3549803a 	cmpltu	r4,r6,r21
2008b1b0:	2409883a 	add	r4,r4,r16
2008b1b4:	2089883a 	add	r4,r4,r2
2008b1b8:	88bfffc4 	addi	r2,r17,-1
2008b1bc:	81000c2e 	bgeu	r16,r4,2008b1f0 <__divdf3+0x6fc>
2008b1c0:	20c04436 	bltu	r4,r3,2008b2d4 <__divdf3+0x7e0>
2008b1c4:	19006f26 	beq	r3,r4,2008b384 <__divdf3+0x890>
2008b1c8:	20c7c83a 	sub	r3,r4,r3
2008b1cc:	1023883a 	mov	r17,r2
2008b1d0:	003f6406 	br	2008af64 <__flash_rwdata_start+0xffff94b4>
2008b1d4:	9d7f1736 	bltu	r19,r21,2008ae34 <__flash_rwdata_start+0xffff9384>
2008b1d8:	9806d07a 	srli	r3,r19,1
2008b1dc:	880497fa 	slli	r2,r17,31
2008b1e0:	980c97fa 	slli	r6,r19,31
2008b1e4:	882cd07a 	srli	r22,r17,1
2008b1e8:	18a6b03a 	or	r19,r3,r2
2008b1ec:	003f1406 	br	2008ae40 <__flash_rwdata_start+0xffff9390>
2008b1f0:	243ff51e 	bne	r4,r16,2008b1c8 <__flash_rwdata_start+0xffff9718>
2008b1f4:	357ff22e 	bgeu	r6,r21,2008b1c0 <__flash_rwdata_start+0xffff9710>
2008b1f8:	80c7c83a 	sub	r3,r16,r3
2008b1fc:	1023883a 	mov	r17,r2
2008b200:	003f5806 	br	2008af64 <__flash_rwdata_start+0xffff94b4>
2008b204:	1013883a 	mov	r9,r2
2008b208:	003f3d06 	br	2008af00 <__flash_rwdata_start+0xffff9450>
2008b20c:	1023883a 	mov	r17,r2
2008b210:	003f2506 	br	2008aea8 <__flash_rwdata_start+0xffff93f8>
2008b214:	317fe436 	bltu	r6,r5,2008b1a8 <__flash_rwdata_start+0xffff96f8>
2008b218:	0007883a 	mov	r3,zero
2008b21c:	003f5106 	br	2008af64 <__flash_rwdata_start+0xffff94b4>
2008b220:	1c07883a 	add	r3,r3,r16
2008b224:	993fffc4 	addi	r4,r19,-1
2008b228:	1c000a2e 	bgeu	r3,r16,2008b254 <__divdf3+0x760>
2008b22c:	2027883a 	mov	r19,r4
2008b230:	19ff971e 	bne	r3,r7,2008b090 <__flash_rwdata_start+0xffff95e0>
2008b234:	a8bf961e 	bne	r21,r2,2008b090 <__flash_rwdata_start+0xffff95e0>
2008b238:	003f9606 	br	2008b094 <__flash_rwdata_start+0xffff95e4>
2008b23c:	04ffffc4 	movi	r19,-1
2008b240:	003f9406 	br	2008b094 <__flash_rwdata_start+0xffff95e4>
2008b244:	100d883a 	mov	r6,r2
2008b248:	003f6106 	br	2008afd0 <__flash_rwdata_start+0xffff9520>
2008b24c:	1013883a 	mov	r9,r2
2008b250:	003f7906 	br	2008b038 <__flash_rwdata_start+0xffff9588>
2008b254:	19c02636 	bltu	r3,r7,2008b2f0 <__divdf3+0x7fc>
2008b258:	38c04d26 	beq	r7,r3,2008b390 <__divdf3+0x89c>
2008b25c:	2027883a 	mov	r19,r4
2008b260:	003f8b06 	br	2008b090 <__flash_rwdata_start+0xffff95e0>
2008b264:	e025883a 	mov	r18,fp
2008b268:	003f8a06 	br	2008b094 <__flash_rwdata_start+0xffff95e4>
2008b26c:	008007c4 	movi	r2,31
2008b270:	14002a16 	blt	r2,r16,2008b31c <__divdf3+0x828>
2008b274:	a5010784 	addi	r20,r20,1054
2008b278:	8d04983a 	sll	r2,r17,r20
2008b27c:	9c06d83a 	srl	r3,r19,r16
2008b280:	9d28983a 	sll	r20,r19,r20
2008b284:	8c20d83a 	srl	r16,r17,r16
2008b288:	1886b03a 	or	r3,r3,r2
2008b28c:	a004c03a 	cmpne	r2,r20,zero
2008b290:	1884b03a 	or	r2,r3,r2
2008b294:	10c001cc 	andi	r3,r2,7
2008b298:	18000726 	beq	r3,zero,2008b2b8 <__divdf3+0x7c4>
2008b29c:	110003cc 	andi	r4,r2,15
2008b2a0:	00c00104 	movi	r3,4
2008b2a4:	20c00426 	beq	r4,r3,2008b2b8 <__divdf3+0x7c4>
2008b2a8:	10c00104 	addi	r3,r2,4
2008b2ac:	1885803a 	cmpltu	r2,r3,r2
2008b2b0:	80a1883a 	add	r16,r16,r2
2008b2b4:	1805883a 	mov	r2,r3
2008b2b8:	80c0202c 	andhi	r3,r16,128
2008b2bc:	18002d26 	beq	r3,zero,2008b374 <__divdf3+0x880>
2008b2c0:	9180004c 	andi	r6,r18,1
2008b2c4:	01000044 	movi	r4,1
2008b2c8:	000b883a 	mov	r5,zero
2008b2cc:	0027883a 	mov	r19,zero
2008b2d0:	003e6606 	br	2008ac6c <__flash_rwdata_start+0xffff91bc>
2008b2d4:	354d883a 	add	r6,r6,r21
2008b2d8:	356d803a 	cmpltu	r22,r6,r21
2008b2dc:	b42d883a 	add	r22,r22,r16
2008b2e0:	b12d883a 	add	r22,r22,r4
2008b2e4:	8c7fff84 	addi	r17,r17,-2
2008b2e8:	b0c7c83a 	sub	r3,r22,r3
2008b2ec:	003f1d06 	br	2008af64 <__flash_rwdata_start+0xffff94b4>
2008b2f0:	ad4b883a 	add	r5,r21,r21
2008b2f4:	2d6b803a 	cmpltu	r21,r5,r21
2008b2f8:	ac2b883a 	add	r21,r21,r16
2008b2fc:	1d47883a 	add	r3,r3,r21
2008b300:	993fff84 	addi	r4,r19,-2
2008b304:	282b883a 	mov	r21,r5
2008b308:	003fc806 	br	2008b22c <__flash_rwdata_start+0xffff977c>
2008b30c:	103fc41e 	bne	r2,zero,2008b220 <__flash_rwdata_start+0xffff9770>
2008b310:	002b883a 	mov	r21,zero
2008b314:	a8bf5e1e 	bne	r21,r2,2008b090 <__flash_rwdata_start+0xffff95e0>
2008b318:	003f5e06 	br	2008b094 <__flash_rwdata_start+0xffff95e4>
2008b31c:	00bef884 	movi	r2,-1054
2008b320:	1505c83a 	sub	r2,r2,r20
2008b324:	00c00804 	movi	r3,32
2008b328:	8884d83a 	srl	r2,r17,r2
2008b32c:	80c01c26 	beq	r16,r3,2008b3a0 <__divdf3+0x8ac>
2008b330:	a0c10f84 	addi	r3,r20,1086
2008b334:	88c6983a 	sll	r3,r17,r3
2008b338:	1cc6b03a 	or	r3,r3,r19
2008b33c:	1806c03a 	cmpne	r3,r3,zero
2008b340:	1884b03a 	or	r2,r3,r2
2008b344:	140001cc 	andi	r16,r2,7
2008b348:	8000061e 	bne	r16,zero,2008b364 <__divdf3+0x870>
2008b34c:	000b883a 	mov	r5,zero
2008b350:	1004d0fa 	srli	r2,r2,3
2008b354:	9180004c 	andi	r6,r18,1
2008b358:	0009883a 	mov	r4,zero
2008b35c:	1426b03a 	or	r19,r2,r16
2008b360:	003e4206 	br	2008ac6c <__flash_rwdata_start+0xffff91bc>
2008b364:	110003cc 	andi	r4,r2,15
2008b368:	00c00104 	movi	r3,4
2008b36c:	0021883a 	mov	r16,zero
2008b370:	20ffcd1e 	bne	r4,r3,2008b2a8 <__flash_rwdata_start+0xffff97f8>
2008b374:	800a927a 	slli	r5,r16,9
2008b378:	8020977a 	slli	r16,r16,29
2008b37c:	280ad33a 	srli	r5,r5,12
2008b380:	003ff306 	br	2008b350 <__flash_rwdata_start+0xffff98a0>
2008b384:	317fd336 	bltu	r6,r5,2008b2d4 <__flash_rwdata_start+0xffff9824>
2008b388:	1023883a 	mov	r17,r2
2008b38c:	003fa206 	br	2008b218 <__flash_rwdata_start+0xffff9768>
2008b390:	a8bfd736 	bltu	r21,r2,2008b2f0 <__flash_rwdata_start+0xffff9840>
2008b394:	2027883a 	mov	r19,r4
2008b398:	a8bf3d1e 	bne	r21,r2,2008b090 <__flash_rwdata_start+0xffff95e0>
2008b39c:	003f3d06 	br	2008b094 <__flash_rwdata_start+0xffff95e4>
2008b3a0:	0007883a 	mov	r3,zero
2008b3a4:	003fe406 	br	2008b338 <__flash_rwdata_start+0xffff9888>
2008b3a8:	00800434 	movhi	r2,16
2008b3ac:	89400234 	orhi	r5,r17,8
2008b3b0:	10bfffc4 	addi	r2,r2,-1
2008b3b4:	e00d883a 	mov	r6,fp
2008b3b8:	288a703a 	and	r5,r5,r2
2008b3bc:	003e8506 	br	2008add4 <__flash_rwdata_start+0xffff9324>

2008b3c0 <__eqdf2>:
2008b3c0:	2804d53a 	srli	r2,r5,20
2008b3c4:	3806d53a 	srli	r3,r7,20
2008b3c8:	02000434 	movhi	r8,16
2008b3cc:	423fffc4 	addi	r8,r8,-1
2008b3d0:	1081ffcc 	andi	r2,r2,2047
2008b3d4:	0241ffc4 	movi	r9,2047
2008b3d8:	2a14703a 	and	r10,r5,r8
2008b3dc:	18c1ffcc 	andi	r3,r3,2047
2008b3e0:	3a10703a 	and	r8,r7,r8
2008b3e4:	280ad7fa 	srli	r5,r5,31
2008b3e8:	380ed7fa 	srli	r7,r7,31
2008b3ec:	12400f26 	beq	r2,r9,2008b42c <__eqdf2+0x6c>
2008b3f0:	0241ffc4 	movi	r9,2047
2008b3f4:	1a400326 	beq	r3,r9,2008b404 <__eqdf2+0x44>
2008b3f8:	10c00526 	beq	r2,r3,2008b410 <__eqdf2+0x50>
2008b3fc:	00800044 	movi	r2,1
2008b400:	f800283a 	ret
2008b404:	4192b03a 	or	r9,r8,r6
2008b408:	483ffc1e 	bne	r9,zero,2008b3fc <__flash_rwdata_start+0xffff994c>
2008b40c:	10fffb1e 	bne	r2,r3,2008b3fc <__flash_rwdata_start+0xffff994c>
2008b410:	523ffa1e 	bne	r10,r8,2008b3fc <__flash_rwdata_start+0xffff994c>
2008b414:	21bff91e 	bne	r4,r6,2008b3fc <__flash_rwdata_start+0xffff994c>
2008b418:	29c00826 	beq	r5,r7,2008b43c <__eqdf2+0x7c>
2008b41c:	103ff71e 	bne	r2,zero,2008b3fc <__flash_rwdata_start+0xffff994c>
2008b420:	5104b03a 	or	r2,r10,r4
2008b424:	1004c03a 	cmpne	r2,r2,zero
2008b428:	f800283a 	ret
2008b42c:	5112b03a 	or	r9,r10,r4
2008b430:	483fef26 	beq	r9,zero,2008b3f0 <__flash_rwdata_start+0xffff9940>
2008b434:	00800044 	movi	r2,1
2008b438:	f800283a 	ret
2008b43c:	0005883a 	mov	r2,zero
2008b440:	f800283a 	ret

2008b444 <__gedf2>:
2008b444:	2804d53a 	srli	r2,r5,20
2008b448:	3806d53a 	srli	r3,r7,20
2008b44c:	02000434 	movhi	r8,16
2008b450:	423fffc4 	addi	r8,r8,-1
2008b454:	0241ffc4 	movi	r9,2047
2008b458:	1081ffcc 	andi	r2,r2,2047
2008b45c:	2a14703a 	and	r10,r5,r8
2008b460:	1a46703a 	and	r3,r3,r9
2008b464:	3a10703a 	and	r8,r7,r8
2008b468:	280ad7fa 	srli	r5,r5,31
2008b46c:	380ed7fa 	srli	r7,r7,31
2008b470:	12400b26 	beq	r2,r9,2008b4a0 <__gedf2+0x5c>
2008b474:	1a401626 	beq	r3,r9,2008b4d0 <__gedf2+0x8c>
2008b478:	10000c1e 	bne	r2,zero,2008b4ac <__gedf2+0x68>
2008b47c:	5112b03a 	or	r9,r10,r4
2008b480:	4813003a 	cmpeq	r9,r9,zero
2008b484:	4817883a 	mov	r11,r9
2008b488:	18000c1e 	bne	r3,zero,2008b4bc <__gedf2+0x78>
2008b48c:	4198b03a 	or	r12,r8,r6
2008b490:	60000a1e 	bne	r12,zero,2008b4bc <__gedf2+0x78>
2008b494:	48001326 	beq	r9,zero,2008b4e4 <__gedf2+0xa0>
2008b498:	0005883a 	mov	r2,zero
2008b49c:	f800283a 	ret
2008b4a0:	5112b03a 	or	r9,r10,r4
2008b4a4:	4800191e 	bne	r9,zero,2008b50c <__gedf2+0xc8>
2008b4a8:	18800926 	beq	r3,r2,2008b4d0 <__gedf2+0x8c>
2008b4ac:	18000b1e 	bne	r3,zero,2008b4dc <__gedf2+0x98>
2008b4b0:	4192b03a 	or	r9,r8,r6
2008b4b4:	0017883a 	mov	r11,zero
2008b4b8:	48000a26 	beq	r9,zero,2008b4e4 <__gedf2+0xa0>
2008b4bc:	39c03fcc 	andi	r7,r7,255
2008b4c0:	58000726 	beq	r11,zero,2008b4e0 <__gedf2+0x9c>
2008b4c4:	3800081e 	bne	r7,zero,2008b4e8 <__gedf2+0xa4>
2008b4c8:	00bfffc4 	movi	r2,-1
2008b4cc:	f800283a 	ret
2008b4d0:	4192b03a 	or	r9,r8,r6
2008b4d4:	48000d1e 	bne	r9,zero,2008b50c <__gedf2+0xc8>
2008b4d8:	103fe826 	beq	r2,zero,2008b47c <__flash_rwdata_start+0xffff99cc>
2008b4dc:	39c03fcc 	andi	r7,r7,255
2008b4e0:	29c00326 	beq	r5,r7,2008b4f0 <__gedf2+0xac>
2008b4e4:	283ff81e 	bne	r5,zero,2008b4c8 <__flash_rwdata_start+0xffff9a18>
2008b4e8:	00800044 	movi	r2,1
2008b4ec:	f800283a 	ret
2008b4f0:	18bffc16 	blt	r3,r2,2008b4e4 <__flash_rwdata_start+0xffff9a34>
2008b4f4:	10c00316 	blt	r2,r3,2008b504 <__gedf2+0xc0>
2008b4f8:	42bffa36 	bltu	r8,r10,2008b4e4 <__flash_rwdata_start+0xffff9a34>
2008b4fc:	52000526 	beq	r10,r8,2008b514 <__gedf2+0xd0>
2008b500:	523fe52e 	bgeu	r10,r8,2008b498 <__flash_rwdata_start+0xffff99e8>
2008b504:	283ff026 	beq	r5,zero,2008b4c8 <__flash_rwdata_start+0xffff9a18>
2008b508:	003ff706 	br	2008b4e8 <__flash_rwdata_start+0xffff9a38>
2008b50c:	00bfff84 	movi	r2,-2
2008b510:	f800283a 	ret
2008b514:	313ff336 	bltu	r6,r4,2008b4e4 <__flash_rwdata_start+0xffff9a34>
2008b518:	21bfdf2e 	bgeu	r4,r6,2008b498 <__flash_rwdata_start+0xffff99e8>
2008b51c:	283fea26 	beq	r5,zero,2008b4c8 <__flash_rwdata_start+0xffff9a18>
2008b520:	003ff106 	br	2008b4e8 <__flash_rwdata_start+0xffff9a38>

2008b524 <__ledf2>:
2008b524:	2804d53a 	srli	r2,r5,20
2008b528:	3810d53a 	srli	r8,r7,20
2008b52c:	00c00434 	movhi	r3,16
2008b530:	18ffffc4 	addi	r3,r3,-1
2008b534:	0241ffc4 	movi	r9,2047
2008b538:	1081ffcc 	andi	r2,r2,2047
2008b53c:	28d4703a 	and	r10,r5,r3
2008b540:	4250703a 	and	r8,r8,r9
2008b544:	38c6703a 	and	r3,r7,r3
2008b548:	280ad7fa 	srli	r5,r5,31
2008b54c:	380ed7fa 	srli	r7,r7,31
2008b550:	12400b26 	beq	r2,r9,2008b580 <__ledf2+0x5c>
2008b554:	42401926 	beq	r8,r9,2008b5bc <__ledf2+0x98>
2008b558:	10000c1e 	bne	r2,zero,2008b58c <__ledf2+0x68>
2008b55c:	5112b03a 	or	r9,r10,r4
2008b560:	4813003a 	cmpeq	r9,r9,zero
2008b564:	4817883a 	mov	r11,r9
2008b568:	40000f26 	beq	r8,zero,2008b5a8 <__ledf2+0x84>
2008b56c:	39c03fcc 	andi	r7,r7,255
2008b570:	58001826 	beq	r11,zero,2008b5d4 <__ledf2+0xb0>
2008b574:	38000a1e 	bne	r7,zero,2008b5a0 <__ledf2+0x7c>
2008b578:	00bfffc4 	movi	r2,-1
2008b57c:	f800283a 	ret
2008b580:	5112b03a 	or	r9,r10,r4
2008b584:	48000f1e 	bne	r9,zero,2008b5c4 <__ledf2+0xa0>
2008b588:	40800c26 	beq	r8,r2,2008b5bc <__ledf2+0x98>
2008b58c:	4000101e 	bne	r8,zero,2008b5d0 <__ledf2+0xac>
2008b590:	1992b03a 	or	r9,r3,r6
2008b594:	0017883a 	mov	r11,zero
2008b598:	483ff41e 	bne	r9,zero,2008b56c <__flash_rwdata_start+0xffff9abc>
2008b59c:	283ff61e 	bne	r5,zero,2008b578 <__flash_rwdata_start+0xffff9ac8>
2008b5a0:	00800044 	movi	r2,1
2008b5a4:	f800283a 	ret
2008b5a8:	1998b03a 	or	r12,r3,r6
2008b5ac:	603fef1e 	bne	r12,zero,2008b56c <__flash_rwdata_start+0xffff9abc>
2008b5b0:	483ffa26 	beq	r9,zero,2008b59c <__flash_rwdata_start+0xffff9aec>
2008b5b4:	0005883a 	mov	r2,zero
2008b5b8:	f800283a 	ret
2008b5bc:	1992b03a 	or	r9,r3,r6
2008b5c0:	48000226 	beq	r9,zero,2008b5cc <__ledf2+0xa8>
2008b5c4:	00800084 	movi	r2,2
2008b5c8:	f800283a 	ret
2008b5cc:	103fe326 	beq	r2,zero,2008b55c <__flash_rwdata_start+0xffff9aac>
2008b5d0:	39c03fcc 	andi	r7,r7,255
2008b5d4:	29fff11e 	bne	r5,r7,2008b59c <__flash_rwdata_start+0xffff9aec>
2008b5d8:	40bff016 	blt	r8,r2,2008b59c <__flash_rwdata_start+0xffff9aec>
2008b5dc:	12000316 	blt	r2,r8,2008b5ec <__ledf2+0xc8>
2008b5e0:	1abfee36 	bltu	r3,r10,2008b59c <__flash_rwdata_start+0xffff9aec>
2008b5e4:	50c00326 	beq	r10,r3,2008b5f4 <__ledf2+0xd0>
2008b5e8:	50fff22e 	bgeu	r10,r3,2008b5b4 <__flash_rwdata_start+0xffff9b04>
2008b5ec:	283fe226 	beq	r5,zero,2008b578 <__flash_rwdata_start+0xffff9ac8>
2008b5f0:	003feb06 	br	2008b5a0 <__flash_rwdata_start+0xffff9af0>
2008b5f4:	313fe936 	bltu	r6,r4,2008b59c <__flash_rwdata_start+0xffff9aec>
2008b5f8:	21bfee2e 	bgeu	r4,r6,2008b5b4 <__flash_rwdata_start+0xffff9b04>
2008b5fc:	283fde26 	beq	r5,zero,2008b578 <__flash_rwdata_start+0xffff9ac8>
2008b600:	003fe706 	br	2008b5a0 <__flash_rwdata_start+0xffff9af0>

2008b604 <__muldf3>:
2008b604:	defff204 	addi	sp,sp,-56
2008b608:	2804d53a 	srli	r2,r5,20
2008b60c:	dd800a15 	stw	r22,40(sp)
2008b610:	282cd7fa 	srli	r22,r5,31
2008b614:	dc000415 	stw	r16,16(sp)
2008b618:	04000434 	movhi	r16,16
2008b61c:	df000c15 	stw	fp,48(sp)
2008b620:	dd000815 	stw	r20,32(sp)
2008b624:	dcc00715 	stw	r19,28(sp)
2008b628:	dc800615 	stw	r18,24(sp)
2008b62c:	dc400515 	stw	r17,20(sp)
2008b630:	843fffc4 	addi	r16,r16,-1
2008b634:	dfc00d15 	stw	ra,52(sp)
2008b638:	ddc00b15 	stw	r23,44(sp)
2008b63c:	dd400915 	stw	r21,36(sp)
2008b640:	1501ffcc 	andi	r20,r2,2047
2008b644:	2023883a 	mov	r17,r4
2008b648:	2025883a 	mov	r18,r4
2008b64c:	2c20703a 	and	r16,r5,r16
2008b650:	b027883a 	mov	r19,r22
2008b654:	b7003fcc 	andi	fp,r22,255
2008b658:	a0005926 	beq	r20,zero,2008b7c0 <__muldf3+0x1bc>
2008b65c:	0081ffc4 	movi	r2,2047
2008b660:	a0803426 	beq	r20,r2,2008b734 <__muldf3+0x130>
2008b664:	84000434 	orhi	r16,r16,16
2008b668:	2004d77a 	srli	r2,r4,29
2008b66c:	802090fa 	slli	r16,r16,3
2008b670:	202490fa 	slli	r18,r4,3
2008b674:	a53f0044 	addi	r20,r20,-1023
2008b678:	80a0b03a 	or	r16,r16,r2
2008b67c:	002b883a 	mov	r21,zero
2008b680:	0015883a 	mov	r10,zero
2008b684:	3812d53a 	srli	r9,r7,20
2008b688:	3806d7fa 	srli	r3,r7,31
2008b68c:	02000434 	movhi	r8,16
2008b690:	423fffc4 	addi	r8,r8,-1
2008b694:	4941ffcc 	andi	r5,r9,2047
2008b698:	302f883a 	mov	r23,r6
2008b69c:	3a22703a 	and	r17,r7,r8
2008b6a0:	1ac03fcc 	andi	r11,r3,255
2008b6a4:	28006226 	beq	r5,zero,2008b830 <__muldf3+0x22c>
2008b6a8:	0081ffc4 	movi	r2,2047
2008b6ac:	28805a26 	beq	r5,r2,2008b818 <__muldf3+0x214>
2008b6b0:	8a000434 	orhi	r8,r17,16
2008b6b4:	3004d77a 	srli	r2,r6,29
2008b6b8:	401090fa 	slli	r8,r8,3
2008b6bc:	302e90fa 	slli	r23,r6,3
2008b6c0:	297f0044 	addi	r5,r5,-1023
2008b6c4:	40a2b03a 	or	r17,r8,r2
2008b6c8:	0013883a 	mov	r9,zero
2008b6cc:	4d4cb03a 	or	r6,r9,r21
2008b6d0:	300c90ba 	slli	r6,r6,2
2008b6d4:	02080274 	movhi	r8,8201
2008b6d8:	422dbd04 	addi	r8,r8,-18700
2008b6dc:	320d883a 	add	r6,r6,r8
2008b6e0:	31800017 	ldw	r6,0(r6)
2008b6e4:	a14b883a 	add	r5,r20,r5
2008b6e8:	1dacf03a 	xor	r22,r3,r22
2008b6ec:	2b000044 	addi	r12,r5,1
2008b6f0:	3000683a 	jmp	r6
2008b6f4:	2008b930 	cmpltui	zero,r4,8932
2008b6f8:	2008b91c 	xori	zero,r4,8932
2008b6fc:	2008b91c 	xori	zero,r4,8932
2008b700:	2008b908 	cmpgei	zero,r4,8932
2008b704:	2008b750 	cmplti	zero,r4,8925
2008b708:	2008b750 	cmplti	zero,r4,8925
2008b70c:	2008b8f0 	cmpltui	zero,r4,8931
2008b710:	2008b908 	cmpgei	zero,r4,8932
2008b714:	2008b750 	cmplti	zero,r4,8925
2008b718:	2008b8f0 	cmpltui	zero,r4,8931
2008b71c:	2008b750 	cmplti	zero,r4,8925
2008b720:	2008b908 	cmpgei	zero,r4,8932
2008b724:	2008b754 	ori	zero,r4,8925
2008b728:	2008b754 	ori	zero,r4,8925
2008b72c:	2008b754 	ori	zero,r4,8925
2008b730:	2008bb2c 	andhi	zero,r4,8940
2008b734:	8104b03a 	or	r2,r16,r4
2008b738:	10006a1e 	bne	r2,zero,2008b8e4 <__muldf3+0x2e0>
2008b73c:	05400204 	movi	r21,8
2008b740:	0021883a 	mov	r16,zero
2008b744:	0025883a 	mov	r18,zero
2008b748:	02800084 	movi	r10,2
2008b74c:	003fcd06 	br	2008b684 <__flash_rwdata_start+0xffff9bd4>
2008b750:	b039883a 	mov	fp,r22
2008b754:	00800084 	movi	r2,2
2008b758:	50804e1e 	bne	r10,r2,2008b894 <__muldf3+0x290>
2008b75c:	e4c0004c 	andi	r19,fp,1
2008b760:	0101ffc4 	movi	r4,2047
2008b764:	0021883a 	mov	r16,zero
2008b768:	0025883a 	mov	r18,zero
2008b76c:	2008953a 	slli	r4,r4,20
2008b770:	98c03fcc 	andi	r3,r19,255
2008b774:	01400434 	movhi	r5,16
2008b778:	297fffc4 	addi	r5,r5,-1
2008b77c:	180697fa 	slli	r3,r3,31
2008b780:	8160703a 	and	r16,r16,r5
2008b784:	8120b03a 	or	r16,r16,r4
2008b788:	80c6b03a 	or	r3,r16,r3
2008b78c:	9005883a 	mov	r2,r18
2008b790:	dfc00d17 	ldw	ra,52(sp)
2008b794:	df000c17 	ldw	fp,48(sp)
2008b798:	ddc00b17 	ldw	r23,44(sp)
2008b79c:	dd800a17 	ldw	r22,40(sp)
2008b7a0:	dd400917 	ldw	r21,36(sp)
2008b7a4:	dd000817 	ldw	r20,32(sp)
2008b7a8:	dcc00717 	ldw	r19,28(sp)
2008b7ac:	dc800617 	ldw	r18,24(sp)
2008b7b0:	dc400517 	ldw	r17,20(sp)
2008b7b4:	dc000417 	ldw	r16,16(sp)
2008b7b8:	dec00e04 	addi	sp,sp,56
2008b7bc:	f800283a 	ret
2008b7c0:	8104b03a 	or	r2,r16,r4
2008b7c4:	10004226 	beq	r2,zero,2008b8d0 <__muldf3+0x2cc>
2008b7c8:	8000f926 	beq	r16,zero,2008bbb0 <__muldf3+0x5ac>
2008b7cc:	8009883a 	mov	r4,r16
2008b7d0:	d9800315 	stw	r6,12(sp)
2008b7d4:	d9c00015 	stw	r7,0(sp)
2008b7d8:	008c7f40 	call	2008c7f4 <__clzsi2>
2008b7dc:	d9800317 	ldw	r6,12(sp)
2008b7e0:	d9c00017 	ldw	r7,0(sp)
2008b7e4:	1007883a 	mov	r3,r2
2008b7e8:	01000a04 	movi	r4,40
2008b7ec:	18bffe04 	addi	r2,r3,-8
2008b7f0:	20c9c83a 	sub	r4,r4,r3
2008b7f4:	80a0983a 	sll	r16,r16,r2
2008b7f8:	8908d83a 	srl	r4,r17,r4
2008b7fc:	88a4983a 	sll	r18,r17,r2
2008b800:	2420b03a 	or	r16,r4,r16
2008b804:	017f0344 	movi	r5,-1011
2008b808:	28e9c83a 	sub	r20,r5,r3
2008b80c:	002b883a 	mov	r21,zero
2008b810:	0015883a 	mov	r10,zero
2008b814:	003f9b06 	br	2008b684 <__flash_rwdata_start+0xffff9bd4>
2008b818:	8984b03a 	or	r2,r17,r6
2008b81c:	10002a1e 	bne	r2,zero,2008b8c8 <__muldf3+0x2c4>
2008b820:	0023883a 	mov	r17,zero
2008b824:	002f883a 	mov	r23,zero
2008b828:	02400084 	movi	r9,2
2008b82c:	003fa706 	br	2008b6cc <__flash_rwdata_start+0xffff9c1c>
2008b830:	8984b03a 	or	r2,r17,r6
2008b834:	10002026 	beq	r2,zero,2008b8b8 <__muldf3+0x2b4>
2008b838:	8800cc26 	beq	r17,zero,2008bb6c <__muldf3+0x568>
2008b83c:	8809883a 	mov	r4,r17
2008b840:	d8c00215 	stw	r3,8(sp)
2008b844:	d9800315 	stw	r6,12(sp)
2008b848:	da800015 	stw	r10,0(sp)
2008b84c:	dac00115 	stw	r11,4(sp)
2008b850:	008c7f40 	call	2008c7f4 <__clzsi2>
2008b854:	d8c00217 	ldw	r3,8(sp)
2008b858:	d9800317 	ldw	r6,12(sp)
2008b85c:	da800017 	ldw	r10,0(sp)
2008b860:	dac00117 	ldw	r11,4(sp)
2008b864:	1009883a 	mov	r4,r2
2008b868:	01400a04 	movi	r5,40
2008b86c:	25fffe04 	addi	r23,r4,-8
2008b870:	290bc83a 	sub	r5,r5,r4
2008b874:	8dd0983a 	sll	r8,r17,r23
2008b878:	314ad83a 	srl	r5,r6,r5
2008b87c:	35ee983a 	sll	r23,r6,r23
2008b880:	2a22b03a 	or	r17,r5,r8
2008b884:	017f0344 	movi	r5,-1011
2008b888:	290bc83a 	sub	r5,r5,r4
2008b88c:	0013883a 	mov	r9,zero
2008b890:	003f8e06 	br	2008b6cc <__flash_rwdata_start+0xffff9c1c>
2008b894:	008000c4 	movi	r2,3
2008b898:	50811d26 	beq	r10,r2,2008bd10 <__muldf3+0x70c>
2008b89c:	00800044 	movi	r2,1
2008b8a0:	5080e01e 	bne	r10,r2,2008bc24 <__muldf3+0x620>
2008b8a4:	e0a6703a 	and	r19,fp,r2
2008b8a8:	0009883a 	mov	r4,zero
2008b8ac:	0021883a 	mov	r16,zero
2008b8b0:	0025883a 	mov	r18,zero
2008b8b4:	003fad06 	br	2008b76c <__flash_rwdata_start+0xffff9cbc>
2008b8b8:	0023883a 	mov	r17,zero
2008b8bc:	002f883a 	mov	r23,zero
2008b8c0:	02400044 	movi	r9,1
2008b8c4:	003f8106 	br	2008b6cc <__flash_rwdata_start+0xffff9c1c>
2008b8c8:	024000c4 	movi	r9,3
2008b8cc:	003f7f06 	br	2008b6cc <__flash_rwdata_start+0xffff9c1c>
2008b8d0:	05400104 	movi	r21,4
2008b8d4:	0021883a 	mov	r16,zero
2008b8d8:	0025883a 	mov	r18,zero
2008b8dc:	02800044 	movi	r10,1
2008b8e0:	003f6806 	br	2008b684 <__flash_rwdata_start+0xffff9bd4>
2008b8e4:	05400304 	movi	r21,12
2008b8e8:	028000c4 	movi	r10,3
2008b8ec:	003f6506 	br	2008b684 <__flash_rwdata_start+0xffff9bd4>
2008b8f0:	04000434 	movhi	r16,16
2008b8f4:	0027883a 	mov	r19,zero
2008b8f8:	843fffc4 	addi	r16,r16,-1
2008b8fc:	04bfffc4 	movi	r18,-1
2008b900:	0101ffc4 	movi	r4,2047
2008b904:	003f9906 	br	2008b76c <__flash_rwdata_start+0xffff9cbc>
2008b908:	8821883a 	mov	r16,r17
2008b90c:	b825883a 	mov	r18,r23
2008b910:	5839883a 	mov	fp,r11
2008b914:	4815883a 	mov	r10,r9
2008b918:	003f8e06 	br	2008b754 <__flash_rwdata_start+0xffff9ca4>
2008b91c:	8821883a 	mov	r16,r17
2008b920:	b825883a 	mov	r18,r23
2008b924:	b039883a 	mov	fp,r22
2008b928:	4815883a 	mov	r10,r9
2008b92c:	003f8906 	br	2008b754 <__flash_rwdata_start+0xffff9ca4>
2008b930:	b80cd43a 	srli	r6,r23,16
2008b934:	9006d43a 	srli	r3,r18,16
2008b938:	90bfffcc 	andi	r2,r18,65535
2008b93c:	bdffffcc 	andi	r23,r23,65535
2008b940:	b891383a 	mul	r8,r23,r2
2008b944:	b8c9383a 	mul	r4,r23,r3
2008b948:	309b383a 	mul	r13,r6,r2
2008b94c:	400ed43a 	srli	r7,r8,16
2008b950:	30df383a 	mul	r15,r6,r3
2008b954:	235b883a 	add	r13,r4,r13
2008b958:	69db883a 	add	r13,r13,r7
2008b95c:	6900022e 	bgeu	r13,r4,2008b968 <__muldf3+0x364>
2008b960:	01000074 	movhi	r4,1
2008b964:	791f883a 	add	r15,r15,r4
2008b968:	8828d43a 	srli	r20,r17,16
2008b96c:	8c7fffcc 	andi	r17,r17,65535
2008b970:	888f383a 	mul	r7,r17,r2
2008b974:	88d3383a 	mul	r9,r17,r3
2008b978:	a0a5383a 	mul	r18,r20,r2
2008b97c:	3816d43a 	srli	r11,r7,16
2008b980:	6814943a 	slli	r10,r13,16
2008b984:	4ca5883a 	add	r18,r9,r18
2008b988:	423fffcc 	andi	r8,r8,65535
2008b98c:	92e5883a 	add	r18,r18,r11
2008b990:	6808d43a 	srli	r4,r13,16
2008b994:	5215883a 	add	r10,r10,r8
2008b998:	a0c7383a 	mul	r3,r20,r3
2008b99c:	9240022e 	bgeu	r18,r9,2008b9a8 <__muldf3+0x3a4>
2008b9a0:	00800074 	movhi	r2,1
2008b9a4:	1887883a 	add	r3,r3,r2
2008b9a8:	802ad43a 	srli	r21,r16,16
2008b9ac:	80bfffcc 	andi	r2,r16,65535
2008b9b0:	b893383a 	mul	r9,r23,r2
2008b9b4:	3091383a 	mul	r8,r6,r2
2008b9b8:	bd6f383a 	mul	r23,r23,r21
2008b9bc:	9026943a 	slli	r19,r18,16
2008b9c0:	481ad43a 	srli	r13,r9,16
2008b9c4:	9024d43a 	srli	r18,r18,16
2008b9c8:	39ffffcc 	andi	r7,r7,65535
2008b9cc:	ba11883a 	add	r8,r23,r8
2008b9d0:	99e7883a 	add	r19,r19,r7
2008b9d4:	4351883a 	add	r8,r8,r13
2008b9d8:	1c97883a 	add	r11,r3,r18
2008b9dc:	354d383a 	mul	r6,r6,r21
2008b9e0:	9925883a 	add	r18,r19,r4
2008b9e4:	45c0022e 	bgeu	r8,r23,2008b9f0 <__muldf3+0x3ec>
2008b9e8:	00c00074 	movhi	r3,1
2008b9ec:	30cd883a 	add	r6,r6,r3
2008b9f0:	8889383a 	mul	r4,r17,r2
2008b9f4:	8d63383a 	mul	r17,r17,r21
2008b9f8:	a085383a 	mul	r2,r20,r2
2008b9fc:	200ed43a 	srli	r7,r4,16
2008ba00:	401cd43a 	srli	r14,r8,16
2008ba04:	401a943a 	slli	r13,r8,16
2008ba08:	8885883a 	add	r2,r17,r2
2008ba0c:	4a3fffcc 	andi	r8,r9,65535
2008ba10:	11c5883a 	add	r2,r2,r7
2008ba14:	339d883a 	add	r14,r6,r14
2008ba18:	6a11883a 	add	r8,r13,r8
2008ba1c:	a561383a 	mul	r16,r20,r21
2008ba20:	1440022e 	bgeu	r2,r17,2008ba2c <__muldf3+0x428>
2008ba24:	00c00074 	movhi	r3,1
2008ba28:	80e1883a 	add	r16,r16,r3
2008ba2c:	1006943a 	slli	r3,r2,16
2008ba30:	213fffcc 	andi	r4,r4,65535
2008ba34:	93db883a 	add	r13,r18,r15
2008ba38:	1909883a 	add	r4,r3,r4
2008ba3c:	22c7883a 	add	r3,r4,r11
2008ba40:	6cd3803a 	cmpltu	r9,r13,r19
2008ba44:	6a09883a 	add	r4,r13,r8
2008ba48:	1a5b883a 	add	r13,r3,r9
2008ba4c:	2211803a 	cmpltu	r8,r4,r8
2008ba50:	734d883a 	add	r6,r14,r13
2008ba54:	100ed43a 	srli	r7,r2,16
2008ba58:	6a53803a 	cmpltu	r9,r13,r9
2008ba5c:	3205883a 	add	r2,r6,r8
2008ba60:	1ac7803a 	cmpltu	r3,r3,r11
2008ba64:	1211803a 	cmpltu	r8,r2,r8
2008ba68:	48c6b03a 	or	r3,r9,r3
2008ba6c:	338d803a 	cmpltu	r6,r6,r14
2008ba70:	19c7883a 	add	r3,r3,r7
2008ba74:	418cb03a 	or	r6,r8,r6
2008ba78:	1987883a 	add	r3,r3,r6
2008ba7c:	2024927a 	slli	r18,r4,9
2008ba80:	1c07883a 	add	r3,r3,r16
2008ba84:	1806927a 	slli	r3,r3,9
2008ba88:	1020d5fa 	srli	r16,r2,23
2008ba8c:	2008d5fa 	srli	r4,r4,23
2008ba90:	9294b03a 	or	r10,r18,r10
2008ba94:	1004927a 	slli	r2,r2,9
2008ba98:	5024c03a 	cmpne	r18,r10,zero
2008ba9c:	1c20b03a 	or	r16,r3,r16
2008baa0:	9108b03a 	or	r4,r18,r4
2008baa4:	80c0402c 	andhi	r3,r16,256
2008baa8:	20a4b03a 	or	r18,r4,r2
2008baac:	18000726 	beq	r3,zero,2008bacc <__muldf3+0x4c8>
2008bab0:	9006d07a 	srli	r3,r18,1
2008bab4:	800897fa 	slli	r4,r16,31
2008bab8:	9080004c 	andi	r2,r18,1
2008babc:	8020d07a 	srli	r16,r16,1
2008bac0:	10c4b03a 	or	r2,r2,r3
2008bac4:	1124b03a 	or	r18,r2,r4
2008bac8:	600b883a 	mov	r5,r12
2008bacc:	2900ffc4 	addi	r4,r5,1023
2008bad0:	01004b0e 	bge	zero,r4,2008bc00 <__muldf3+0x5fc>
2008bad4:	908001cc 	andi	r2,r18,7
2008bad8:	10000726 	beq	r2,zero,2008baf8 <__muldf3+0x4f4>
2008badc:	90c003cc 	andi	r3,r18,15
2008bae0:	00800104 	movi	r2,4
2008bae4:	18800426 	beq	r3,r2,2008baf8 <__muldf3+0x4f4>
2008bae8:	9087883a 	add	r3,r18,r2
2008baec:	1c85803a 	cmpltu	r2,r3,r18
2008baf0:	80a1883a 	add	r16,r16,r2
2008baf4:	1825883a 	mov	r18,r3
2008baf8:	8080402c 	andhi	r2,r16,256
2008bafc:	10000426 	beq	r2,zero,2008bb10 <__muldf3+0x50c>
2008bb00:	00bfc034 	movhi	r2,65280
2008bb04:	10bfffc4 	addi	r2,r2,-1
2008bb08:	29010004 	addi	r4,r5,1024
2008bb0c:	80a0703a 	and	r16,r16,r2
2008bb10:	0081ff84 	movi	r2,2046
2008bb14:	1100320e 	bge	r2,r4,2008bbe0 <__muldf3+0x5dc>
2008bb18:	b4c0004c 	andi	r19,r22,1
2008bb1c:	0101ffc4 	movi	r4,2047
2008bb20:	0021883a 	mov	r16,zero
2008bb24:	0025883a 	mov	r18,zero
2008bb28:	003f1006 	br	2008b76c <__flash_rwdata_start+0xffff9cbc>
2008bb2c:	8080022c 	andhi	r2,r16,8
2008bb30:	10000926 	beq	r2,zero,2008bb58 <__muldf3+0x554>
2008bb34:	8880022c 	andhi	r2,r17,8
2008bb38:	1000071e 	bne	r2,zero,2008bb58 <__muldf3+0x554>
2008bb3c:	00800434 	movhi	r2,16
2008bb40:	8c000234 	orhi	r16,r17,8
2008bb44:	10bfffc4 	addi	r2,r2,-1
2008bb48:	1827883a 	mov	r19,r3
2008bb4c:	80a0703a 	and	r16,r16,r2
2008bb50:	b825883a 	mov	r18,r23
2008bb54:	003f6a06 	br	2008b900 <__flash_rwdata_start+0xffff9e50>
2008bb58:	00800434 	movhi	r2,16
2008bb5c:	84000234 	orhi	r16,r16,8
2008bb60:	10bfffc4 	addi	r2,r2,-1
2008bb64:	80a0703a 	and	r16,r16,r2
2008bb68:	003f6506 	br	2008b900 <__flash_rwdata_start+0xffff9e50>
2008bb6c:	3009883a 	mov	r4,r6
2008bb70:	d8c00215 	stw	r3,8(sp)
2008bb74:	d9800315 	stw	r6,12(sp)
2008bb78:	da800015 	stw	r10,0(sp)
2008bb7c:	dac00115 	stw	r11,4(sp)
2008bb80:	008c7f40 	call	2008c7f4 <__clzsi2>
2008bb84:	11000804 	addi	r4,r2,32
2008bb88:	014009c4 	movi	r5,39
2008bb8c:	d8c00217 	ldw	r3,8(sp)
2008bb90:	d9800317 	ldw	r6,12(sp)
2008bb94:	da800017 	ldw	r10,0(sp)
2008bb98:	dac00117 	ldw	r11,4(sp)
2008bb9c:	293f320e 	bge	r5,r4,2008b868 <__flash_rwdata_start+0xffff9db8>
2008bba0:	10bffe04 	addi	r2,r2,-8
2008bba4:	b8a2983a 	sll	r17,r23,r2
2008bba8:	002f883a 	mov	r23,zero
2008bbac:	003f3506 	br	2008b884 <__flash_rwdata_start+0xffff9dd4>
2008bbb0:	d9800315 	stw	r6,12(sp)
2008bbb4:	d9c00015 	stw	r7,0(sp)
2008bbb8:	008c7f40 	call	2008c7f4 <__clzsi2>
2008bbbc:	10c00804 	addi	r3,r2,32
2008bbc0:	010009c4 	movi	r4,39
2008bbc4:	d9800317 	ldw	r6,12(sp)
2008bbc8:	d9c00017 	ldw	r7,0(sp)
2008bbcc:	20ff060e 	bge	r4,r3,2008b7e8 <__flash_rwdata_start+0xffff9d38>
2008bbd0:	10bffe04 	addi	r2,r2,-8
2008bbd4:	88a0983a 	sll	r16,r17,r2
2008bbd8:	0025883a 	mov	r18,zero
2008bbdc:	003f0906 	br	2008b804 <__flash_rwdata_start+0xffff9d54>
2008bbe0:	9004d0fa 	srli	r2,r18,3
2008bbe4:	8024977a 	slli	r18,r16,29
2008bbe8:	8020927a 	slli	r16,r16,9
2008bbec:	2101ffcc 	andi	r4,r4,2047
2008bbf0:	90a4b03a 	or	r18,r18,r2
2008bbf4:	8020d33a 	srli	r16,r16,12
2008bbf8:	b4c0004c 	andi	r19,r22,1
2008bbfc:	003edb06 	br	2008b76c <__flash_rwdata_start+0xffff9cbc>
2008bc00:	00ff0084 	movi	r3,-1022
2008bc04:	1947c83a 	sub	r3,r3,r5
2008bc08:	00800e04 	movi	r2,56
2008bc0c:	10c0080e 	bge	r2,r3,2008bc30 <__muldf3+0x62c>
2008bc10:	b4c0004c 	andi	r19,r22,1
2008bc14:	0009883a 	mov	r4,zero
2008bc18:	0021883a 	mov	r16,zero
2008bc1c:	0025883a 	mov	r18,zero
2008bc20:	003ed206 	br	2008b76c <__flash_rwdata_start+0xffff9cbc>
2008bc24:	600b883a 	mov	r5,r12
2008bc28:	e02d883a 	mov	r22,fp
2008bc2c:	003fa706 	br	2008bacc <__flash_rwdata_start+0xffffa01c>
2008bc30:	008007c4 	movi	r2,31
2008bc34:	10c01816 	blt	r2,r3,2008bc98 <__muldf3+0x694>
2008bc38:	29410784 	addi	r5,r5,1054
2008bc3c:	8144983a 	sll	r2,r16,r5
2008bc40:	90c8d83a 	srl	r4,r18,r3
2008bc44:	914a983a 	sll	r5,r18,r5
2008bc48:	80c6d83a 	srl	r3,r16,r3
2008bc4c:	2088b03a 	or	r4,r4,r2
2008bc50:	2804c03a 	cmpne	r2,r5,zero
2008bc54:	2084b03a 	or	r2,r4,r2
2008bc58:	110001cc 	andi	r4,r2,7
2008bc5c:	20000726 	beq	r4,zero,2008bc7c <__muldf3+0x678>
2008bc60:	114003cc 	andi	r5,r2,15
2008bc64:	01000104 	movi	r4,4
2008bc68:	29000426 	beq	r5,r4,2008bc7c <__muldf3+0x678>
2008bc6c:	11000104 	addi	r4,r2,4
2008bc70:	2085803a 	cmpltu	r2,r4,r2
2008bc74:	1887883a 	add	r3,r3,r2
2008bc78:	2005883a 	mov	r2,r4
2008bc7c:	1900202c 	andhi	r4,r3,128
2008bc80:	20001826 	beq	r4,zero,2008bce4 <__muldf3+0x6e0>
2008bc84:	b4c0004c 	andi	r19,r22,1
2008bc88:	01000044 	movi	r4,1
2008bc8c:	0021883a 	mov	r16,zero
2008bc90:	0025883a 	mov	r18,zero
2008bc94:	003eb506 	br	2008b76c <__flash_rwdata_start+0xffff9cbc>
2008bc98:	00bef884 	movi	r2,-1054
2008bc9c:	1145c83a 	sub	r2,r2,r5
2008bca0:	8088d83a 	srl	r4,r16,r2
2008bca4:	00800804 	movi	r2,32
2008bca8:	18801726 	beq	r3,r2,2008bd08 <__muldf3+0x704>
2008bcac:	28810f84 	addi	r2,r5,1086
2008bcb0:	8084983a 	sll	r2,r16,r2
2008bcb4:	1484b03a 	or	r2,r2,r18
2008bcb8:	1004c03a 	cmpne	r2,r2,zero
2008bcbc:	1104b03a 	or	r2,r2,r4
2008bcc0:	10c001cc 	andi	r3,r2,7
2008bcc4:	18000b1e 	bne	r3,zero,2008bcf4 <__muldf3+0x6f0>
2008bcc8:	0021883a 	mov	r16,zero
2008bccc:	1004d0fa 	srli	r2,r2,3
2008bcd0:	b4c0004c 	andi	r19,r22,1
2008bcd4:	0009883a 	mov	r4,zero
2008bcd8:	10e4b03a 	or	r18,r2,r3
2008bcdc:	003ea306 	br	2008b76c <__flash_rwdata_start+0xffff9cbc>
2008bce0:	0007883a 	mov	r3,zero
2008bce4:	1820927a 	slli	r16,r3,9
2008bce8:	1806977a 	slli	r3,r3,29
2008bcec:	8020d33a 	srli	r16,r16,12
2008bcf0:	003ff606 	br	2008bccc <__flash_rwdata_start+0xffffa21c>
2008bcf4:	110003cc 	andi	r4,r2,15
2008bcf8:	00c00104 	movi	r3,4
2008bcfc:	20fff826 	beq	r4,r3,2008bce0 <__flash_rwdata_start+0xffffa230>
2008bd00:	0007883a 	mov	r3,zero
2008bd04:	003fd906 	br	2008bc6c <__flash_rwdata_start+0xffffa1bc>
2008bd08:	0005883a 	mov	r2,zero
2008bd0c:	003fe906 	br	2008bcb4 <__flash_rwdata_start+0xffffa204>
2008bd10:	00800434 	movhi	r2,16
2008bd14:	84000234 	orhi	r16,r16,8
2008bd18:	10bfffc4 	addi	r2,r2,-1
2008bd1c:	e4c0004c 	andi	r19,fp,1
2008bd20:	80a0703a 	and	r16,r16,r2
2008bd24:	003ef606 	br	2008b900 <__flash_rwdata_start+0xffff9e50>

2008bd28 <__subdf3>:
2008bd28:	00c00434 	movhi	r3,16
2008bd2c:	18ffffc4 	addi	r3,r3,-1
2008bd30:	defffb04 	addi	sp,sp,-20
2008bd34:	28d2703a 	and	r9,r5,r3
2008bd38:	3814d53a 	srli	r10,r7,20
2008bd3c:	38c6703a 	and	r3,r7,r3
2008bd40:	3004d77a 	srli	r2,r6,29
2008bd44:	dc800215 	stw	r18,8(sp)
2008bd48:	dc000015 	stw	r16,0(sp)
2008bd4c:	2824d7fa 	srli	r18,r5,31
2008bd50:	2820d53a 	srli	r16,r5,20
2008bd54:	481290fa 	slli	r9,r9,3
2008bd58:	200ad77a 	srli	r5,r4,29
2008bd5c:	180690fa 	slli	r3,r3,3
2008bd60:	dc400115 	stw	r17,4(sp)
2008bd64:	dfc00415 	stw	ra,16(sp)
2008bd68:	202290fa 	slli	r17,r4,3
2008bd6c:	dcc00315 	stw	r19,12(sp)
2008bd70:	5281ffcc 	andi	r10,r10,2047
2008bd74:	0101ffc4 	movi	r4,2047
2008bd78:	9011883a 	mov	r8,r18
2008bd7c:	8401ffcc 	andi	r16,r16,2047
2008bd80:	94803fcc 	andi	r18,r18,255
2008bd84:	494ab03a 	or	r5,r9,r5
2008bd88:	380ed7fa 	srli	r7,r7,31
2008bd8c:	1886b03a 	or	r3,r3,r2
2008bd90:	300c90fa 	slli	r6,r6,3
2008bd94:	51009026 	beq	r10,r4,2008bfd8 <__subdf3+0x2b0>
2008bd98:	39c0005c 	xori	r7,r7,1
2008bd9c:	8285c83a 	sub	r2,r16,r10
2008bda0:	91c06f26 	beq	r18,r7,2008bf60 <__subdf3+0x238>
2008bda4:	0080b10e 	bge	zero,r2,2008c06c <__subdf3+0x344>
2008bda8:	50002a1e 	bne	r10,zero,2008be54 <__subdf3+0x12c>
2008bdac:	1988b03a 	or	r4,r3,r6
2008bdb0:	2000941e 	bne	r4,zero,2008c004 <__subdf3+0x2dc>
2008bdb4:	888001cc 	andi	r2,r17,7
2008bdb8:	10005b26 	beq	r2,zero,2008bf28 <__subdf3+0x200>
2008bdbc:	88c003cc 	andi	r3,r17,15
2008bdc0:	00800104 	movi	r2,4
2008bdc4:	18805826 	beq	r3,r2,2008bf28 <__subdf3+0x200>
2008bdc8:	88c00104 	addi	r3,r17,4
2008bdcc:	1c63803a 	cmpltu	r17,r3,r17
2008bdd0:	2c4b883a 	add	r5,r5,r17
2008bdd4:	2880202c 	andhi	r2,r5,128
2008bdd8:	9200004c 	andi	r8,r18,1
2008bddc:	1823883a 	mov	r17,r3
2008bde0:	10005426 	beq	r2,zero,2008bf34 <__subdf3+0x20c>
2008bde4:	84000044 	addi	r16,r16,1
2008bde8:	0081ffc4 	movi	r2,2047
2008bdec:	8080bf26 	beq	r16,r2,2008c0ec <__subdf3+0x3c4>
2008bdf0:	013fe034 	movhi	r4,65408
2008bdf4:	213fffc4 	addi	r4,r4,-1
2008bdf8:	290a703a 	and	r5,r5,r4
2008bdfc:	2804977a 	slli	r2,r5,29
2008be00:	280a927a 	slli	r5,r5,9
2008be04:	8822d0fa 	srli	r17,r17,3
2008be08:	8401ffcc 	andi	r16,r16,2047
2008be0c:	2808d33a 	srli	r4,r5,12
2008be10:	1444b03a 	or	r2,r2,r17
2008be14:	8401ffcc 	andi	r16,r16,2047
2008be18:	800a953a 	slli	r5,r16,20
2008be1c:	40c03fcc 	andi	r3,r8,255
2008be20:	04000434 	movhi	r16,16
2008be24:	180697fa 	slli	r3,r3,31
2008be28:	843fffc4 	addi	r16,r16,-1
2008be2c:	2420703a 	and	r16,r4,r16
2008be30:	8160b03a 	or	r16,r16,r5
2008be34:	80c6b03a 	or	r3,r16,r3
2008be38:	dfc00417 	ldw	ra,16(sp)
2008be3c:	dcc00317 	ldw	r19,12(sp)
2008be40:	dc800217 	ldw	r18,8(sp)
2008be44:	dc400117 	ldw	r17,4(sp)
2008be48:	dc000017 	ldw	r16,0(sp)
2008be4c:	dec00504 	addi	sp,sp,20
2008be50:	f800283a 	ret
2008be54:	0101ffc4 	movi	r4,2047
2008be58:	813fd626 	beq	r16,r4,2008bdb4 <__flash_rwdata_start+0xffffa304>
2008be5c:	18c02034 	orhi	r3,r3,128
2008be60:	01000e04 	movi	r4,56
2008be64:	2080a416 	blt	r4,r2,2008c0f8 <__subdf3+0x3d0>
2008be68:	010007c4 	movi	r4,31
2008be6c:	2080c716 	blt	r4,r2,2008c18c <__subdf3+0x464>
2008be70:	01000804 	movi	r4,32
2008be74:	2089c83a 	sub	r4,r4,r2
2008be78:	1910983a 	sll	r8,r3,r4
2008be7c:	308ed83a 	srl	r7,r6,r2
2008be80:	3108983a 	sll	r4,r6,r4
2008be84:	1884d83a 	srl	r2,r3,r2
2008be88:	41ccb03a 	or	r6,r8,r7
2008be8c:	2008c03a 	cmpne	r4,r4,zero
2008be90:	310cb03a 	or	r6,r6,r4
2008be94:	898dc83a 	sub	r6,r17,r6
2008be98:	89a3803a 	cmpltu	r17,r17,r6
2008be9c:	288bc83a 	sub	r5,r5,r2
2008bea0:	2c4bc83a 	sub	r5,r5,r17
2008bea4:	3023883a 	mov	r17,r6
2008bea8:	2880202c 	andhi	r2,r5,128
2008beac:	10006b26 	beq	r2,zero,2008c05c <__subdf3+0x334>
2008beb0:	04c02034 	movhi	r19,128
2008beb4:	9cffffc4 	addi	r19,r19,-1
2008beb8:	2ce6703a 	and	r19,r5,r19
2008bebc:	98007c26 	beq	r19,zero,2008c0b0 <__subdf3+0x388>
2008bec0:	9809883a 	mov	r4,r19
2008bec4:	008c7f40 	call	2008c7f4 <__clzsi2>
2008bec8:	10fffe04 	addi	r3,r2,-8
2008becc:	010007c4 	movi	r4,31
2008bed0:	20c07d16 	blt	r4,r3,2008c0c8 <__subdf3+0x3a0>
2008bed4:	01400a04 	movi	r5,40
2008bed8:	2885c83a 	sub	r2,r5,r2
2008bedc:	888ad83a 	srl	r5,r17,r2
2008bee0:	98e6983a 	sll	r19,r19,r3
2008bee4:	88e2983a 	sll	r17,r17,r3
2008bee8:	2ce6b03a 	or	r19,r5,r19
2008beec:	1c007a16 	blt	r3,r16,2008c0d8 <__subdf3+0x3b0>
2008bef0:	1c21c83a 	sub	r16,r3,r16
2008bef4:	81400044 	addi	r5,r16,1
2008bef8:	00c007c4 	movi	r3,31
2008befc:	19409616 	blt	r3,r5,2008c158 <__subdf3+0x430>
2008bf00:	1c21c83a 	sub	r16,r3,r16
2008bf04:	8c08983a 	sll	r4,r17,r16
2008bf08:	8946d83a 	srl	r3,r17,r5
2008bf0c:	9c20983a 	sll	r16,r19,r16
2008bf10:	2008c03a 	cmpne	r4,r4,zero
2008bf14:	994ad83a 	srl	r5,r19,r5
2008bf18:	1c06b03a 	or	r3,r3,r16
2008bf1c:	1922b03a 	or	r17,r3,r4
2008bf20:	0021883a 	mov	r16,zero
2008bf24:	003fa306 	br	2008bdb4 <__flash_rwdata_start+0xffffa304>
2008bf28:	2880202c 	andhi	r2,r5,128
2008bf2c:	9200004c 	andi	r8,r18,1
2008bf30:	103fac1e 	bne	r2,zero,2008bde4 <__flash_rwdata_start+0xffffa334>
2008bf34:	2804977a 	slli	r2,r5,29
2008bf38:	8822d0fa 	srli	r17,r17,3
2008bf3c:	00c1ffc4 	movi	r3,2047
2008bf40:	280ad0fa 	srli	r5,r5,3
2008bf44:	1444b03a 	or	r2,r2,r17
2008bf48:	80c02726 	beq	r16,r3,2008bfe8 <__subdf3+0x2c0>
2008bf4c:	01000434 	movhi	r4,16
2008bf50:	213fffc4 	addi	r4,r4,-1
2008bf54:	80e0703a 	and	r16,r16,r3
2008bf58:	2908703a 	and	r4,r5,r4
2008bf5c:	003fad06 	br	2008be14 <__flash_rwdata_start+0xffffa364>
2008bf60:	0080690e 	bge	zero,r2,2008c108 <__subdf3+0x3e0>
2008bf64:	50002f26 	beq	r10,zero,2008c024 <__subdf3+0x2fc>
2008bf68:	0101ffc4 	movi	r4,2047
2008bf6c:	813f9126 	beq	r16,r4,2008bdb4 <__flash_rwdata_start+0xffffa304>
2008bf70:	18c02034 	orhi	r3,r3,128
2008bf74:	01000e04 	movi	r4,56
2008bf78:	2080b00e 	bge	r4,r2,2008c23c <__subdf3+0x514>
2008bf7c:	198cb03a 	or	r6,r3,r6
2008bf80:	300ec03a 	cmpne	r7,r6,zero
2008bf84:	0005883a 	mov	r2,zero
2008bf88:	3c4f883a 	add	r7,r7,r17
2008bf8c:	3c63803a 	cmpltu	r17,r7,r17
2008bf90:	114b883a 	add	r5,r2,r5
2008bf94:	2c4b883a 	add	r5,r5,r17
2008bf98:	3823883a 	mov	r17,r7
2008bf9c:	2880202c 	andhi	r2,r5,128
2008bfa0:	10002e26 	beq	r2,zero,2008c05c <__subdf3+0x334>
2008bfa4:	84000044 	addi	r16,r16,1
2008bfa8:	0081ffc4 	movi	r2,2047
2008bfac:	8080de26 	beq	r16,r2,2008c328 <__subdf3+0x600>
2008bfb0:	00bfe034 	movhi	r2,65408
2008bfb4:	10bfffc4 	addi	r2,r2,-1
2008bfb8:	288a703a 	and	r5,r5,r2
2008bfbc:	880cd07a 	srli	r6,r17,1
2008bfc0:	280897fa 	slli	r4,r5,31
2008bfc4:	88c0004c 	andi	r3,r17,1
2008bfc8:	30e2b03a 	or	r17,r6,r3
2008bfcc:	280ad07a 	srli	r5,r5,1
2008bfd0:	8922b03a 	or	r17,r17,r4
2008bfd4:	003f7706 	br	2008bdb4 <__flash_rwdata_start+0xffffa304>
2008bfd8:	1984b03a 	or	r2,r3,r6
2008bfdc:	103f6e26 	beq	r2,zero,2008bd98 <__flash_rwdata_start+0xffffa2e8>
2008bfe0:	39c03fcc 	andi	r7,r7,255
2008bfe4:	003f6d06 	br	2008bd9c <__flash_rwdata_start+0xffffa2ec>
2008bfe8:	1146b03a 	or	r3,r2,r5
2008bfec:	18003f26 	beq	r3,zero,2008c0ec <__subdf3+0x3c4>
2008bff0:	00c00434 	movhi	r3,16
2008bff4:	29000234 	orhi	r4,r5,8
2008bff8:	18ffffc4 	addi	r3,r3,-1
2008bffc:	20c8703a 	and	r4,r4,r3
2008c000:	003f8406 	br	2008be14 <__flash_rwdata_start+0xffffa364>
2008c004:	10bfffc4 	addi	r2,r2,-1
2008c008:	1000501e 	bne	r2,zero,2008c14c <__subdf3+0x424>
2008c00c:	898fc83a 	sub	r7,r17,r6
2008c010:	89e3803a 	cmpltu	r17,r17,r7
2008c014:	28cbc83a 	sub	r5,r5,r3
2008c018:	2c4bc83a 	sub	r5,r5,r17
2008c01c:	3823883a 	mov	r17,r7
2008c020:	003fa106 	br	2008bea8 <__flash_rwdata_start+0xffffa3f8>
2008c024:	1988b03a 	or	r4,r3,r6
2008c028:	203f6226 	beq	r4,zero,2008bdb4 <__flash_rwdata_start+0xffffa304>
2008c02c:	10bfffc4 	addi	r2,r2,-1
2008c030:	10009b1e 	bne	r2,zero,2008c2a0 <__subdf3+0x578>
2008c034:	344d883a 	add	r6,r6,r17
2008c038:	3463803a 	cmpltu	r17,r6,r17
2008c03c:	194b883a 	add	r5,r3,r5
2008c040:	2c4b883a 	add	r5,r5,r17
2008c044:	3023883a 	mov	r17,r6
2008c048:	003fd406 	br	2008bf9c <__flash_rwdata_start+0xffffa4ec>
2008c04c:	1106b03a 	or	r3,r2,r4
2008c050:	1800b426 	beq	r3,zero,2008c324 <__subdf3+0x5fc>
2008c054:	100b883a 	mov	r5,r2
2008c058:	2023883a 	mov	r17,r4
2008c05c:	888001cc 	andi	r2,r17,7
2008c060:	103f561e 	bne	r2,zero,2008bdbc <__flash_rwdata_start+0xffffa30c>
2008c064:	9200004c 	andi	r8,r18,1
2008c068:	003fb206 	br	2008bf34 <__flash_rwdata_start+0xffffa484>
2008c06c:	1000531e 	bne	r2,zero,2008c1bc <__subdf3+0x494>
2008c070:	80800044 	addi	r2,r16,1
2008c074:	1081ffcc 	andi	r2,r2,2047
2008c078:	01000044 	movi	r4,1
2008c07c:	2080a00e 	bge	r4,r2,2008c300 <__subdf3+0x5d8>
2008c080:	8985c83a 	sub	r2,r17,r6
2008c084:	8889803a 	cmpltu	r4,r17,r2
2008c088:	28e7c83a 	sub	r19,r5,r3
2008c08c:	9927c83a 	sub	r19,r19,r4
2008c090:	9900202c 	andhi	r4,r19,128
2008c094:	20006226 	beq	r4,zero,2008c220 <__subdf3+0x4f8>
2008c098:	3463c83a 	sub	r17,r6,r17
2008c09c:	194bc83a 	sub	r5,r3,r5
2008c0a0:	344d803a 	cmpltu	r6,r6,r17
2008c0a4:	29a7c83a 	sub	r19,r5,r6
2008c0a8:	3825883a 	mov	r18,r7
2008c0ac:	983f841e 	bne	r19,zero,2008bec0 <__flash_rwdata_start+0xffffa410>
2008c0b0:	8809883a 	mov	r4,r17
2008c0b4:	008c7f40 	call	2008c7f4 <__clzsi2>
2008c0b8:	10800804 	addi	r2,r2,32
2008c0bc:	10fffe04 	addi	r3,r2,-8
2008c0c0:	010007c4 	movi	r4,31
2008c0c4:	20ff830e 	bge	r4,r3,2008bed4 <__flash_rwdata_start+0xffffa424>
2008c0c8:	14fff604 	addi	r19,r2,-40
2008c0cc:	8ce6983a 	sll	r19,r17,r19
2008c0d0:	0023883a 	mov	r17,zero
2008c0d4:	1c3f860e 	bge	r3,r16,2008bef0 <__flash_rwdata_start+0xffffa440>
2008c0d8:	017fe034 	movhi	r5,65408
2008c0dc:	297fffc4 	addi	r5,r5,-1
2008c0e0:	80e1c83a 	sub	r16,r16,r3
2008c0e4:	994a703a 	and	r5,r19,r5
2008c0e8:	003f3206 	br	2008bdb4 <__flash_rwdata_start+0xffffa304>
2008c0ec:	0009883a 	mov	r4,zero
2008c0f0:	0005883a 	mov	r2,zero
2008c0f4:	003f4706 	br	2008be14 <__flash_rwdata_start+0xffffa364>
2008c0f8:	198cb03a 	or	r6,r3,r6
2008c0fc:	300cc03a 	cmpne	r6,r6,zero
2008c100:	0005883a 	mov	r2,zero
2008c104:	003f6306 	br	2008be94 <__flash_rwdata_start+0xffffa3e4>
2008c108:	10009d1e 	bne	r2,zero,2008c380 <__subdf3+0x658>
2008c10c:	81c00044 	addi	r7,r16,1
2008c110:	3881ffcc 	andi	r2,r7,2047
2008c114:	02400044 	movi	r9,1
2008c118:	4880680e 	bge	r9,r2,2008c2bc <__subdf3+0x594>
2008c11c:	0081ffc4 	movi	r2,2047
2008c120:	3880ae26 	beq	r7,r2,2008c3dc <__subdf3+0x6b4>
2008c124:	344d883a 	add	r6,r6,r17
2008c128:	3463803a 	cmpltu	r17,r6,r17
2008c12c:	194b883a 	add	r5,r3,r5
2008c130:	2c4b883a 	add	r5,r5,r17
2008c134:	282297fa 	slli	r17,r5,31
2008c138:	300cd07a 	srli	r6,r6,1
2008c13c:	280ad07a 	srli	r5,r5,1
2008c140:	3821883a 	mov	r16,r7
2008c144:	89a2b03a 	or	r17,r17,r6
2008c148:	003f1a06 	br	2008bdb4 <__flash_rwdata_start+0xffffa304>
2008c14c:	0101ffc4 	movi	r4,2047
2008c150:	813f431e 	bne	r16,r4,2008be60 <__flash_rwdata_start+0xffffa3b0>
2008c154:	003f1706 	br	2008bdb4 <__flash_rwdata_start+0xffffa304>
2008c158:	80bff844 	addi	r2,r16,-31
2008c15c:	00c00804 	movi	r3,32
2008c160:	9884d83a 	srl	r2,r19,r2
2008c164:	28c05126 	beq	r5,r3,2008c2ac <__subdf3+0x584>
2008c168:	00c00fc4 	movi	r3,63
2008c16c:	1c21c83a 	sub	r16,r3,r16
2008c170:	9c26983a 	sll	r19,r19,r16
2008c174:	9c62b03a 	or	r17,r19,r17
2008c178:	8822c03a 	cmpne	r17,r17,zero
2008c17c:	88a2b03a 	or	r17,r17,r2
2008c180:	000b883a 	mov	r5,zero
2008c184:	0021883a 	mov	r16,zero
2008c188:	003fb406 	br	2008c05c <__flash_rwdata_start+0xffffa5ac>
2008c18c:	113ff804 	addi	r4,r2,-32
2008c190:	01c00804 	movi	r7,32
2008c194:	1908d83a 	srl	r4,r3,r4
2008c198:	11c04626 	beq	r2,r7,2008c2b4 <__subdf3+0x58c>
2008c19c:	01c01004 	movi	r7,64
2008c1a0:	3885c83a 	sub	r2,r7,r2
2008c1a4:	1884983a 	sll	r2,r3,r2
2008c1a8:	118cb03a 	or	r6,r2,r6
2008c1ac:	300cc03a 	cmpne	r6,r6,zero
2008c1b0:	310cb03a 	or	r6,r6,r4
2008c1b4:	0005883a 	mov	r2,zero
2008c1b8:	003f3606 	br	2008be94 <__flash_rwdata_start+0xffffa3e4>
2008c1bc:	80002b26 	beq	r16,zero,2008c26c <__subdf3+0x544>
2008c1c0:	0101ffc4 	movi	r4,2047
2008c1c4:	51006926 	beq	r10,r4,2008c36c <__subdf3+0x644>
2008c1c8:	0085c83a 	sub	r2,zero,r2
2008c1cc:	29402034 	orhi	r5,r5,128
2008c1d0:	01000e04 	movi	r4,56
2008c1d4:	20807d16 	blt	r4,r2,2008c3cc <__subdf3+0x6a4>
2008c1d8:	010007c4 	movi	r4,31
2008c1dc:	2080d916 	blt	r4,r2,2008c544 <__subdf3+0x81c>
2008c1e0:	01000804 	movi	r4,32
2008c1e4:	2089c83a 	sub	r4,r4,r2
2008c1e8:	2912983a 	sll	r9,r5,r4
2008c1ec:	8890d83a 	srl	r8,r17,r2
2008c1f0:	8908983a 	sll	r4,r17,r4
2008c1f4:	2884d83a 	srl	r2,r5,r2
2008c1f8:	4a22b03a 	or	r17,r9,r8
2008c1fc:	2008c03a 	cmpne	r4,r4,zero
2008c200:	8922b03a 	or	r17,r17,r4
2008c204:	3463c83a 	sub	r17,r6,r17
2008c208:	1885c83a 	sub	r2,r3,r2
2008c20c:	344d803a 	cmpltu	r6,r6,r17
2008c210:	118bc83a 	sub	r5,r2,r6
2008c214:	5021883a 	mov	r16,r10
2008c218:	3825883a 	mov	r18,r7
2008c21c:	003f2206 	br	2008bea8 <__flash_rwdata_start+0xffffa3f8>
2008c220:	9886b03a 	or	r3,r19,r2
2008c224:	18001c1e 	bne	r3,zero,2008c298 <__subdf3+0x570>
2008c228:	0011883a 	mov	r8,zero
2008c22c:	000b883a 	mov	r5,zero
2008c230:	0023883a 	mov	r17,zero
2008c234:	0021883a 	mov	r16,zero
2008c238:	003f3e06 	br	2008bf34 <__flash_rwdata_start+0xffffa484>
2008c23c:	010007c4 	movi	r4,31
2008c240:	20803c16 	blt	r4,r2,2008c334 <__subdf3+0x60c>
2008c244:	01000804 	movi	r4,32
2008c248:	2089c83a 	sub	r4,r4,r2
2008c24c:	1912983a 	sll	r9,r3,r4
2008c250:	308ed83a 	srl	r7,r6,r2
2008c254:	3108983a 	sll	r4,r6,r4
2008c258:	1884d83a 	srl	r2,r3,r2
2008c25c:	49ceb03a 	or	r7,r9,r7
2008c260:	2008c03a 	cmpne	r4,r4,zero
2008c264:	390eb03a 	or	r7,r7,r4
2008c268:	003f4706 	br	2008bf88 <__flash_rwdata_start+0xffffa4d8>
2008c26c:	2c48b03a 	or	r4,r5,r17
2008c270:	20003e26 	beq	r4,zero,2008c36c <__subdf3+0x644>
2008c274:	0084303a 	nor	r2,zero,r2
2008c278:	10003a1e 	bne	r2,zero,2008c364 <__subdf3+0x63c>
2008c27c:	3463c83a 	sub	r17,r6,r17
2008c280:	194bc83a 	sub	r5,r3,r5
2008c284:	344d803a 	cmpltu	r6,r6,r17
2008c288:	298bc83a 	sub	r5,r5,r6
2008c28c:	5021883a 	mov	r16,r10
2008c290:	3825883a 	mov	r18,r7
2008c294:	003f0406 	br	2008bea8 <__flash_rwdata_start+0xffffa3f8>
2008c298:	1023883a 	mov	r17,r2
2008c29c:	003f0706 	br	2008bebc <__flash_rwdata_start+0xffffa40c>
2008c2a0:	0101ffc4 	movi	r4,2047
2008c2a4:	813f331e 	bne	r16,r4,2008bf74 <__flash_rwdata_start+0xffffa4c4>
2008c2a8:	003ec206 	br	2008bdb4 <__flash_rwdata_start+0xffffa304>
2008c2ac:	0027883a 	mov	r19,zero
2008c2b0:	003fb006 	br	2008c174 <__flash_rwdata_start+0xffffa6c4>
2008c2b4:	0005883a 	mov	r2,zero
2008c2b8:	003fbb06 	br	2008c1a8 <__flash_rwdata_start+0xffffa6f8>
2008c2bc:	2c44b03a 	or	r2,r5,r17
2008c2c0:	80008b1e 	bne	r16,zero,2008c4f0 <__subdf3+0x7c8>
2008c2c4:	1000b526 	beq	r2,zero,2008c59c <__subdf3+0x874>
2008c2c8:	1984b03a 	or	r2,r3,r6
2008c2cc:	103eb926 	beq	r2,zero,2008bdb4 <__flash_rwdata_start+0xffffa304>
2008c2d0:	3449883a 	add	r4,r6,r17
2008c2d4:	2463803a 	cmpltu	r17,r4,r17
2008c2d8:	194b883a 	add	r5,r3,r5
2008c2dc:	2c4b883a 	add	r5,r5,r17
2008c2e0:	2880202c 	andhi	r2,r5,128
2008c2e4:	2023883a 	mov	r17,r4
2008c2e8:	103f5c26 	beq	r2,zero,2008c05c <__flash_rwdata_start+0xffffa5ac>
2008c2ec:	00bfe034 	movhi	r2,65408
2008c2f0:	10bfffc4 	addi	r2,r2,-1
2008c2f4:	4821883a 	mov	r16,r9
2008c2f8:	288a703a 	and	r5,r5,r2
2008c2fc:	003ead06 	br	2008bdb4 <__flash_rwdata_start+0xffffa304>
2008c300:	2c44b03a 	or	r2,r5,r17
2008c304:	8000291e 	bne	r16,zero,2008c3ac <__subdf3+0x684>
2008c308:	10004f1e 	bne	r2,zero,2008c448 <__subdf3+0x720>
2008c30c:	1984b03a 	or	r2,r3,r6
2008c310:	10000426 	beq	r2,zero,2008c324 <__subdf3+0x5fc>
2008c314:	180b883a 	mov	r5,r3
2008c318:	3023883a 	mov	r17,r6
2008c31c:	3825883a 	mov	r18,r7
2008c320:	003ea406 	br	2008bdb4 <__flash_rwdata_start+0xffffa304>
2008c324:	0011883a 	mov	r8,zero
2008c328:	000b883a 	mov	r5,zero
2008c32c:	0023883a 	mov	r17,zero
2008c330:	003f0006 	br	2008bf34 <__flash_rwdata_start+0xffffa484>
2008c334:	11fff804 	addi	r7,r2,-32
2008c338:	19c8d83a 	srl	r4,r3,r7
2008c33c:	01c00804 	movi	r7,32
2008c340:	11c07e26 	beq	r2,r7,2008c53c <__subdf3+0x814>
2008c344:	01c01004 	movi	r7,64
2008c348:	3885c83a 	sub	r2,r7,r2
2008c34c:	1884983a 	sll	r2,r3,r2
2008c350:	118cb03a 	or	r6,r2,r6
2008c354:	300ec03a 	cmpne	r7,r6,zero
2008c358:	390eb03a 	or	r7,r7,r4
2008c35c:	0005883a 	mov	r2,zero
2008c360:	003f0906 	br	2008bf88 <__flash_rwdata_start+0xffffa4d8>
2008c364:	0101ffc4 	movi	r4,2047
2008c368:	513f991e 	bne	r10,r4,2008c1d0 <__flash_rwdata_start+0xffffa720>
2008c36c:	180b883a 	mov	r5,r3
2008c370:	3023883a 	mov	r17,r6
2008c374:	5021883a 	mov	r16,r10
2008c378:	3825883a 	mov	r18,r7
2008c37c:	003e8d06 	br	2008bdb4 <__flash_rwdata_start+0xffffa304>
2008c380:	80001a1e 	bne	r16,zero,2008c3ec <__subdf3+0x6c4>
2008c384:	2c48b03a 	or	r4,r5,r17
2008c388:	20005526 	beq	r4,zero,2008c4e0 <__subdf3+0x7b8>
2008c38c:	0084303a 	nor	r2,zero,r2
2008c390:	1000511e 	bne	r2,zero,2008c4d8 <__subdf3+0x7b0>
2008c394:	89a3883a 	add	r17,r17,r6
2008c398:	194b883a 	add	r5,r3,r5
2008c39c:	898d803a 	cmpltu	r6,r17,r6
2008c3a0:	298b883a 	add	r5,r5,r6
2008c3a4:	5021883a 	mov	r16,r10
2008c3a8:	003efc06 	br	2008bf9c <__flash_rwdata_start+0xffffa4ec>
2008c3ac:	1000341e 	bne	r2,zero,2008c480 <__subdf3+0x758>
2008c3b0:	1984b03a 	or	r2,r3,r6
2008c3b4:	10006f26 	beq	r2,zero,2008c574 <__subdf3+0x84c>
2008c3b8:	180b883a 	mov	r5,r3
2008c3bc:	3023883a 	mov	r17,r6
2008c3c0:	3825883a 	mov	r18,r7
2008c3c4:	0401ffc4 	movi	r16,2047
2008c3c8:	003e7a06 	br	2008bdb4 <__flash_rwdata_start+0xffffa304>
2008c3cc:	2c62b03a 	or	r17,r5,r17
2008c3d0:	8822c03a 	cmpne	r17,r17,zero
2008c3d4:	0005883a 	mov	r2,zero
2008c3d8:	003f8a06 	br	2008c204 <__flash_rwdata_start+0xffffa754>
2008c3dc:	3821883a 	mov	r16,r7
2008c3e0:	000b883a 	mov	r5,zero
2008c3e4:	0023883a 	mov	r17,zero
2008c3e8:	003ed206 	br	2008bf34 <__flash_rwdata_start+0xffffa484>
2008c3ec:	0101ffc4 	movi	r4,2047
2008c3f0:	51003b26 	beq	r10,r4,2008c4e0 <__subdf3+0x7b8>
2008c3f4:	0085c83a 	sub	r2,zero,r2
2008c3f8:	29402034 	orhi	r5,r5,128
2008c3fc:	01000e04 	movi	r4,56
2008c400:	20806216 	blt	r4,r2,2008c58c <__subdf3+0x864>
2008c404:	010007c4 	movi	r4,31
2008c408:	20806b16 	blt	r4,r2,2008c5b8 <__subdf3+0x890>
2008c40c:	01000804 	movi	r4,32
2008c410:	2089c83a 	sub	r4,r4,r2
2008c414:	2912983a 	sll	r9,r5,r4
2008c418:	888ed83a 	srl	r7,r17,r2
2008c41c:	8908983a 	sll	r4,r17,r4
2008c420:	2884d83a 	srl	r2,r5,r2
2008c424:	49e2b03a 	or	r17,r9,r7
2008c428:	2008c03a 	cmpne	r4,r4,zero
2008c42c:	8922b03a 	or	r17,r17,r4
2008c430:	89a3883a 	add	r17,r17,r6
2008c434:	10c5883a 	add	r2,r2,r3
2008c438:	898d803a 	cmpltu	r6,r17,r6
2008c43c:	118b883a 	add	r5,r2,r6
2008c440:	5021883a 	mov	r16,r10
2008c444:	003ed506 	br	2008bf9c <__flash_rwdata_start+0xffffa4ec>
2008c448:	1984b03a 	or	r2,r3,r6
2008c44c:	103e5926 	beq	r2,zero,2008bdb4 <__flash_rwdata_start+0xffffa304>
2008c450:	8989c83a 	sub	r4,r17,r6
2008c454:	8911803a 	cmpltu	r8,r17,r4
2008c458:	28c5c83a 	sub	r2,r5,r3
2008c45c:	1205c83a 	sub	r2,r2,r8
2008c460:	1200202c 	andhi	r8,r2,128
2008c464:	403ef926 	beq	r8,zero,2008c04c <__flash_rwdata_start+0xffffa59c>
2008c468:	3463c83a 	sub	r17,r6,r17
2008c46c:	194bc83a 	sub	r5,r3,r5
2008c470:	344d803a 	cmpltu	r6,r6,r17
2008c474:	298bc83a 	sub	r5,r5,r6
2008c478:	3825883a 	mov	r18,r7
2008c47c:	003e4d06 	br	2008bdb4 <__flash_rwdata_start+0xffffa304>
2008c480:	1984b03a 	or	r2,r3,r6
2008c484:	10002b26 	beq	r2,zero,2008c534 <__subdf3+0x80c>
2008c488:	2808d0fa 	srli	r4,r5,3
2008c48c:	8822d0fa 	srli	r17,r17,3
2008c490:	280a977a 	slli	r5,r5,29
2008c494:	2080022c 	andhi	r2,r4,8
2008c498:	2c62b03a 	or	r17,r5,r17
2008c49c:	10000826 	beq	r2,zero,2008c4c0 <__subdf3+0x798>
2008c4a0:	1810d0fa 	srli	r8,r3,3
2008c4a4:	4080022c 	andhi	r2,r8,8
2008c4a8:	1000051e 	bne	r2,zero,2008c4c0 <__subdf3+0x798>
2008c4ac:	300cd0fa 	srli	r6,r6,3
2008c4b0:	1804977a 	slli	r2,r3,29
2008c4b4:	4009883a 	mov	r4,r8
2008c4b8:	3825883a 	mov	r18,r7
2008c4bc:	11a2b03a 	or	r17,r2,r6
2008c4c0:	880ad77a 	srli	r5,r17,29
2008c4c4:	200890fa 	slli	r4,r4,3
2008c4c8:	882290fa 	slli	r17,r17,3
2008c4cc:	0401ffc4 	movi	r16,2047
2008c4d0:	290ab03a 	or	r5,r5,r4
2008c4d4:	003e3706 	br	2008bdb4 <__flash_rwdata_start+0xffffa304>
2008c4d8:	0101ffc4 	movi	r4,2047
2008c4dc:	513fc71e 	bne	r10,r4,2008c3fc <__flash_rwdata_start+0xffffa94c>
2008c4e0:	180b883a 	mov	r5,r3
2008c4e4:	3023883a 	mov	r17,r6
2008c4e8:	5021883a 	mov	r16,r10
2008c4ec:	003e3106 	br	2008bdb4 <__flash_rwdata_start+0xffffa304>
2008c4f0:	10002d26 	beq	r2,zero,2008c5a8 <__subdf3+0x880>
2008c4f4:	1984b03a 	or	r2,r3,r6
2008c4f8:	10000e26 	beq	r2,zero,2008c534 <__subdf3+0x80c>
2008c4fc:	2808d0fa 	srli	r4,r5,3
2008c500:	8822d0fa 	srli	r17,r17,3
2008c504:	280a977a 	slli	r5,r5,29
2008c508:	2080022c 	andhi	r2,r4,8
2008c50c:	2c62b03a 	or	r17,r5,r17
2008c510:	103feb26 	beq	r2,zero,2008c4c0 <__flash_rwdata_start+0xffffaa10>
2008c514:	180ed0fa 	srli	r7,r3,3
2008c518:	3880022c 	andhi	r2,r7,8
2008c51c:	103fe81e 	bne	r2,zero,2008c4c0 <__flash_rwdata_start+0xffffaa10>
2008c520:	300cd0fa 	srli	r6,r6,3
2008c524:	1804977a 	slli	r2,r3,29
2008c528:	3809883a 	mov	r4,r7
2008c52c:	11a2b03a 	or	r17,r2,r6
2008c530:	003fe306 	br	2008c4c0 <__flash_rwdata_start+0xffffaa10>
2008c534:	0401ffc4 	movi	r16,2047
2008c538:	003e1e06 	br	2008bdb4 <__flash_rwdata_start+0xffffa304>
2008c53c:	0005883a 	mov	r2,zero
2008c540:	003f8306 	br	2008c350 <__flash_rwdata_start+0xffffa8a0>
2008c544:	113ff804 	addi	r4,r2,-32
2008c548:	02000804 	movi	r8,32
2008c54c:	2908d83a 	srl	r4,r5,r4
2008c550:	12002526 	beq	r2,r8,2008c5e8 <__subdf3+0x8c0>
2008c554:	02001004 	movi	r8,64
2008c558:	4085c83a 	sub	r2,r8,r2
2008c55c:	288a983a 	sll	r5,r5,r2
2008c560:	2c62b03a 	or	r17,r5,r17
2008c564:	8822c03a 	cmpne	r17,r17,zero
2008c568:	8922b03a 	or	r17,r17,r4
2008c56c:	0005883a 	mov	r2,zero
2008c570:	003f2406 	br	2008c204 <__flash_rwdata_start+0xffffa754>
2008c574:	01402034 	movhi	r5,128
2008c578:	0011883a 	mov	r8,zero
2008c57c:	297fffc4 	addi	r5,r5,-1
2008c580:	047ffe04 	movi	r17,-8
2008c584:	0401ffc4 	movi	r16,2047
2008c588:	003e6a06 	br	2008bf34 <__flash_rwdata_start+0xffffa484>
2008c58c:	2c62b03a 	or	r17,r5,r17
2008c590:	8822c03a 	cmpne	r17,r17,zero
2008c594:	0005883a 	mov	r2,zero
2008c598:	003fa506 	br	2008c430 <__flash_rwdata_start+0xffffa980>
2008c59c:	180b883a 	mov	r5,r3
2008c5a0:	3023883a 	mov	r17,r6
2008c5a4:	003e0306 	br	2008bdb4 <__flash_rwdata_start+0xffffa304>
2008c5a8:	180b883a 	mov	r5,r3
2008c5ac:	3023883a 	mov	r17,r6
2008c5b0:	0401ffc4 	movi	r16,2047
2008c5b4:	003dff06 	br	2008bdb4 <__flash_rwdata_start+0xffffa304>
2008c5b8:	113ff804 	addi	r4,r2,-32
2008c5bc:	01c00804 	movi	r7,32
2008c5c0:	2908d83a 	srl	r4,r5,r4
2008c5c4:	11c00a26 	beq	r2,r7,2008c5f0 <__subdf3+0x8c8>
2008c5c8:	01c01004 	movi	r7,64
2008c5cc:	3885c83a 	sub	r2,r7,r2
2008c5d0:	288a983a 	sll	r5,r5,r2
2008c5d4:	2c62b03a 	or	r17,r5,r17
2008c5d8:	8822c03a 	cmpne	r17,r17,zero
2008c5dc:	8922b03a 	or	r17,r17,r4
2008c5e0:	0005883a 	mov	r2,zero
2008c5e4:	003f9206 	br	2008c430 <__flash_rwdata_start+0xffffa980>
2008c5e8:	000b883a 	mov	r5,zero
2008c5ec:	003fdc06 	br	2008c560 <__flash_rwdata_start+0xffffaab0>
2008c5f0:	000b883a 	mov	r5,zero
2008c5f4:	003ff706 	br	2008c5d4 <__flash_rwdata_start+0xffffab24>

2008c5f8 <__fixdfsi>:
2008c5f8:	2806d53a 	srli	r3,r5,20
2008c5fc:	00800434 	movhi	r2,16
2008c600:	10bfffc4 	addi	r2,r2,-1
2008c604:	18c1ffcc 	andi	r3,r3,2047
2008c608:	0180ff84 	movi	r6,1022
2008c60c:	2884703a 	and	r2,r5,r2
2008c610:	280ad7fa 	srli	r5,r5,31
2008c614:	30c0130e 	bge	r6,r3,2008c664 <__fixdfsi+0x6c>
2008c618:	01810744 	movi	r6,1053
2008c61c:	30c00d16 	blt	r6,r3,2008c654 <__fixdfsi+0x5c>
2008c620:	01810cc4 	movi	r6,1075
2008c624:	30cdc83a 	sub	r6,r6,r3
2008c628:	01c007c4 	movi	r7,31
2008c62c:	10800434 	orhi	r2,r2,16
2008c630:	39800e0e 	bge	r7,r6,2008c66c <__fixdfsi+0x74>
2008c634:	010104c4 	movi	r4,1043
2008c638:	20c7c83a 	sub	r3,r4,r3
2008c63c:	10c6d83a 	srl	r3,r2,r3
2008c640:	29403fcc 	andi	r5,r5,255
2008c644:	0145c83a 	sub	r2,zero,r5
2008c648:	1884f03a 	xor	r2,r3,r2
2008c64c:	1145883a 	add	r2,r2,r5
2008c650:	f800283a 	ret
2008c654:	00a00034 	movhi	r2,32768
2008c658:	10bfffc4 	addi	r2,r2,-1
2008c65c:	2885883a 	add	r2,r5,r2
2008c660:	f800283a 	ret
2008c664:	0005883a 	mov	r2,zero
2008c668:	f800283a 	ret
2008c66c:	18fefb44 	addi	r3,r3,-1043
2008c670:	2188d83a 	srl	r4,r4,r6
2008c674:	10c6983a 	sll	r3,r2,r3
2008c678:	20c6b03a 	or	r3,r4,r3
2008c67c:	003ff006 	br	2008c640 <__flash_rwdata_start+0xffffab90>

2008c680 <__floatsidf>:
2008c680:	defffd04 	addi	sp,sp,-12
2008c684:	dc400115 	stw	r17,4(sp)
2008c688:	dfc00215 	stw	ra,8(sp)
2008c68c:	dc000015 	stw	r16,0(sp)
2008c690:	2023883a 	mov	r17,r4
2008c694:	20001426 	beq	r4,zero,2008c6e8 <__floatsidf+0x68>
2008c698:	2020d7fa 	srli	r16,r4,31
2008c69c:	80000126 	beq	r16,zero,2008c6a4 <__floatsidf+0x24>
2008c6a0:	0123c83a 	sub	r17,zero,r4
2008c6a4:	8809883a 	mov	r4,r17
2008c6a8:	008c7f40 	call	2008c7f4 <__clzsi2>
2008c6ac:	01410784 	movi	r5,1054
2008c6b0:	00c00284 	movi	r3,10
2008c6b4:	288bc83a 	sub	r5,r5,r2
2008c6b8:	18801c16 	blt	r3,r2,2008c72c <__floatsidf+0xac>
2008c6bc:	00c002c4 	movi	r3,11
2008c6c0:	1887c83a 	sub	r3,r3,r2
2008c6c4:	88c8d83a 	srl	r4,r17,r3
2008c6c8:	00c00434 	movhi	r3,16
2008c6cc:	18ffffc4 	addi	r3,r3,-1
2008c6d0:	10800544 	addi	r2,r2,21
2008c6d4:	20c8703a 	and	r4,r4,r3
2008c6d8:	8884983a 	sll	r2,r17,r2
2008c6dc:	28c1ffcc 	andi	r3,r5,2047
2008c6e0:	800d883a 	mov	r6,r16
2008c6e4:	00000406 	br	2008c6f8 <__floatsidf+0x78>
2008c6e8:	000d883a 	mov	r6,zero
2008c6ec:	0007883a 	mov	r3,zero
2008c6f0:	0009883a 	mov	r4,zero
2008c6f4:	0005883a 	mov	r2,zero
2008c6f8:	180a953a 	slli	r5,r3,20
2008c6fc:	31803fcc 	andi	r6,r6,255
2008c700:	00c00434 	movhi	r3,16
2008c704:	300c97fa 	slli	r6,r6,31
2008c708:	18ffffc4 	addi	r3,r3,-1
2008c70c:	20c6703a 	and	r3,r4,r3
2008c710:	1946b03a 	or	r3,r3,r5
2008c714:	1986b03a 	or	r3,r3,r6
2008c718:	dfc00217 	ldw	ra,8(sp)
2008c71c:	dc400117 	ldw	r17,4(sp)
2008c720:	dc000017 	ldw	r16,0(sp)
2008c724:	dec00304 	addi	sp,sp,12
2008c728:	f800283a 	ret
2008c72c:	10fffd44 	addi	r3,r2,-11
2008c730:	88c8983a 	sll	r4,r17,r3
2008c734:	00800434 	movhi	r2,16
2008c738:	10bfffc4 	addi	r2,r2,-1
2008c73c:	2088703a 	and	r4,r4,r2
2008c740:	28c1ffcc 	andi	r3,r5,2047
2008c744:	800d883a 	mov	r6,r16
2008c748:	0005883a 	mov	r2,zero
2008c74c:	003fea06 	br	2008c6f8 <__flash_rwdata_start+0xffffac48>

2008c750 <__floatunsidf>:
2008c750:	defffe04 	addi	sp,sp,-8
2008c754:	dc000015 	stw	r16,0(sp)
2008c758:	dfc00115 	stw	ra,4(sp)
2008c75c:	2021883a 	mov	r16,r4
2008c760:	20001026 	beq	r4,zero,2008c7a4 <__floatunsidf+0x54>
2008c764:	008c7f40 	call	2008c7f4 <__clzsi2>
2008c768:	01410784 	movi	r5,1054
2008c76c:	100d883a 	mov	r6,r2
2008c770:	288bc83a 	sub	r5,r5,r2
2008c774:	00800284 	movi	r2,10
2008c778:	11801616 	blt	r2,r6,2008c7d4 <__floatunsidf+0x84>
2008c77c:	008002c4 	movi	r2,11
2008c780:	1185c83a 	sub	r2,r2,r6
2008c784:	8084d83a 	srl	r2,r16,r2
2008c788:	00c00434 	movhi	r3,16
2008c78c:	31c00544 	addi	r7,r6,21
2008c790:	18ffffc4 	addi	r3,r3,-1
2008c794:	81e0983a 	sll	r16,r16,r7
2008c798:	10cc703a 	and	r6,r2,r3
2008c79c:	2941ffcc 	andi	r5,r5,2047
2008c7a0:	00000206 	br	2008c7ac <__floatunsidf+0x5c>
2008c7a4:	000b883a 	mov	r5,zero
2008c7a8:	000d883a 	mov	r6,zero
2008c7ac:	280a953a 	slli	r5,r5,20
2008c7b0:	00c00434 	movhi	r3,16
2008c7b4:	18ffffc4 	addi	r3,r3,-1
2008c7b8:	30c6703a 	and	r3,r6,r3
2008c7bc:	8005883a 	mov	r2,r16
2008c7c0:	1946b03a 	or	r3,r3,r5
2008c7c4:	dfc00117 	ldw	ra,4(sp)
2008c7c8:	dc000017 	ldw	r16,0(sp)
2008c7cc:	dec00204 	addi	sp,sp,8
2008c7d0:	f800283a 	ret
2008c7d4:	31bffd44 	addi	r6,r6,-11
2008c7d8:	818c983a 	sll	r6,r16,r6
2008c7dc:	00800434 	movhi	r2,16
2008c7e0:	10bfffc4 	addi	r2,r2,-1
2008c7e4:	2941ffcc 	andi	r5,r5,2047
2008c7e8:	0021883a 	mov	r16,zero
2008c7ec:	308c703a 	and	r6,r6,r2
2008c7f0:	003fee06 	br	2008c7ac <__flash_rwdata_start+0xffffacfc>

2008c7f4 <__clzsi2>:
2008c7f4:	00bfffd4 	movui	r2,65535
2008c7f8:	11000b36 	bltu	r2,r4,2008c828 <__clzsi2+0x34>
2008c7fc:	00803fc4 	movi	r2,255
2008c800:	1100122e 	bgeu	r2,r4,2008c84c <__clzsi2+0x58>
2008c804:	00c00204 	movi	r3,8
2008c808:	01400604 	movi	r5,24
2008c80c:	20c8d83a 	srl	r4,r4,r3
2008c810:	00800034 	movhi	r2,0
2008c814:	10807b04 	addi	r2,r2,492
2008c818:	1109883a 	add	r4,r2,r4
2008c81c:	20800003 	ldbu	r2,0(r4)
2008c820:	2885c83a 	sub	r2,r5,r2
2008c824:	f800283a 	ret
2008c828:	00804034 	movhi	r2,256
2008c82c:	10bfffc4 	addi	r2,r2,-1
2008c830:	11000336 	bltu	r2,r4,2008c840 <__clzsi2+0x4c>
2008c834:	00c00404 	movi	r3,16
2008c838:	180b883a 	mov	r5,r3
2008c83c:	003ff306 	br	2008c80c <__flash_rwdata_start+0xffffad5c>
2008c840:	00c00604 	movi	r3,24
2008c844:	01400204 	movi	r5,8
2008c848:	003ff006 	br	2008c80c <__flash_rwdata_start+0xffffad5c>
2008c84c:	0007883a 	mov	r3,zero
2008c850:	01400804 	movi	r5,32
2008c854:	003fed06 	br	2008c80c <__flash_rwdata_start+0xffffad5c>

2008c858 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2008c858:	defffe04 	addi	sp,sp,-8
2008c85c:	dfc00115 	stw	ra,4(sp)
2008c860:	df000015 	stw	fp,0(sp)
2008c864:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2008c868:	00800034 	movhi	r2,0
2008c86c:	10881b04 	addi	r2,r2,8300
2008c870:	10800017 	ldw	r2,0(r2)
2008c874:	10000526 	beq	r2,zero,2008c88c <alt_get_errno+0x34>
2008c878:	00800034 	movhi	r2,0
2008c87c:	10881b04 	addi	r2,r2,8300
2008c880:	10800017 	ldw	r2,0(r2)
2008c884:	103ee83a 	callr	r2
2008c888:	00000206 	br	2008c894 <alt_get_errno+0x3c>
2008c88c:	00800034 	movhi	r2,0
2008c890:	10882904 	addi	r2,r2,8356
}
2008c894:	e037883a 	mov	sp,fp
2008c898:	dfc00117 	ldw	ra,4(sp)
2008c89c:	df000017 	ldw	fp,0(sp)
2008c8a0:	dec00204 	addi	sp,sp,8
2008c8a4:	f800283a 	ret

2008c8a8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
2008c8a8:	defffb04 	addi	sp,sp,-20
2008c8ac:	dfc00415 	stw	ra,16(sp)
2008c8b0:	df000315 	stw	fp,12(sp)
2008c8b4:	df000304 	addi	fp,sp,12
2008c8b8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
2008c8bc:	e0bfff17 	ldw	r2,-4(fp)
2008c8c0:	10000616 	blt	r2,zero,2008c8dc <close+0x34>
2008c8c4:	e0bfff17 	ldw	r2,-4(fp)
2008c8c8:	10c00324 	muli	r3,r2,12
2008c8cc:	00800034 	movhi	r2,0
2008c8d0:	10838004 	addi	r2,r2,3584
2008c8d4:	1885883a 	add	r2,r3,r2
2008c8d8:	00000106 	br	2008c8e0 <close+0x38>
2008c8dc:	0005883a 	mov	r2,zero
2008c8e0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
2008c8e4:	e0bffd17 	ldw	r2,-12(fp)
2008c8e8:	10001926 	beq	r2,zero,2008c950 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
2008c8ec:	e0bffd17 	ldw	r2,-12(fp)
2008c8f0:	10800017 	ldw	r2,0(r2)
2008c8f4:	10800417 	ldw	r2,16(r2)
2008c8f8:	10000626 	beq	r2,zero,2008c914 <close+0x6c>
2008c8fc:	e0bffd17 	ldw	r2,-12(fp)
2008c900:	10800017 	ldw	r2,0(r2)
2008c904:	10800417 	ldw	r2,16(r2)
2008c908:	e13ffd17 	ldw	r4,-12(fp)
2008c90c:	103ee83a 	callr	r2
2008c910:	00000106 	br	2008c918 <close+0x70>
2008c914:	0005883a 	mov	r2,zero
2008c918:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
2008c91c:	e13fff17 	ldw	r4,-4(fp)
2008c920:	008d1540 	call	2008d154 <alt_release_fd>
    if (rval < 0)
2008c924:	e0bffe17 	ldw	r2,-8(fp)
2008c928:	1000070e 	bge	r2,zero,2008c948 <close+0xa0>
    {
      ALT_ERRNO = -rval;
2008c92c:	008c8580 	call	2008c858 <alt_get_errno>
2008c930:	1007883a 	mov	r3,r2
2008c934:	e0bffe17 	ldw	r2,-8(fp)
2008c938:	0085c83a 	sub	r2,zero,r2
2008c93c:	18800015 	stw	r2,0(r3)
      return -1;
2008c940:	00bfffc4 	movi	r2,-1
2008c944:	00000706 	br	2008c964 <close+0xbc>
    }
    return 0;
2008c948:	0005883a 	mov	r2,zero
2008c94c:	00000506 	br	2008c964 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
2008c950:	008c8580 	call	2008c858 <alt_get_errno>
2008c954:	1007883a 	mov	r3,r2
2008c958:	00801444 	movi	r2,81
2008c95c:	18800015 	stw	r2,0(r3)
    return -1;
2008c960:	00bfffc4 	movi	r2,-1
  }
}
2008c964:	e037883a 	mov	sp,fp
2008c968:	dfc00117 	ldw	ra,4(sp)
2008c96c:	df000017 	ldw	fp,0(sp)
2008c970:	dec00204 	addi	sp,sp,8
2008c974:	f800283a 	ret

2008c978 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
2008c978:	defffc04 	addi	sp,sp,-16
2008c97c:	df000315 	stw	fp,12(sp)
2008c980:	df000304 	addi	fp,sp,12
2008c984:	e13ffd15 	stw	r4,-12(fp)
2008c988:	e17ffe15 	stw	r5,-8(fp)
2008c98c:	e1bfff15 	stw	r6,-4(fp)
  return len;
2008c990:	e0bfff17 	ldw	r2,-4(fp)
}
2008c994:	e037883a 	mov	sp,fp
2008c998:	df000017 	ldw	fp,0(sp)
2008c99c:	dec00104 	addi	sp,sp,4
2008c9a0:	f800283a 	ret

2008c9a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2008c9a4:	defffe04 	addi	sp,sp,-8
2008c9a8:	dfc00115 	stw	ra,4(sp)
2008c9ac:	df000015 	stw	fp,0(sp)
2008c9b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2008c9b4:	00800034 	movhi	r2,0
2008c9b8:	10881b04 	addi	r2,r2,8300
2008c9bc:	10800017 	ldw	r2,0(r2)
2008c9c0:	10000526 	beq	r2,zero,2008c9d8 <alt_get_errno+0x34>
2008c9c4:	00800034 	movhi	r2,0
2008c9c8:	10881b04 	addi	r2,r2,8300
2008c9cc:	10800017 	ldw	r2,0(r2)
2008c9d0:	103ee83a 	callr	r2
2008c9d4:	00000206 	br	2008c9e0 <alt_get_errno+0x3c>
2008c9d8:	00800034 	movhi	r2,0
2008c9dc:	10882904 	addi	r2,r2,8356
}
2008c9e0:	e037883a 	mov	sp,fp
2008c9e4:	dfc00117 	ldw	ra,4(sp)
2008c9e8:	df000017 	ldw	fp,0(sp)
2008c9ec:	dec00204 	addi	sp,sp,8
2008c9f0:	f800283a 	ret

2008c9f4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
2008c9f4:	defffb04 	addi	sp,sp,-20
2008c9f8:	dfc00415 	stw	ra,16(sp)
2008c9fc:	df000315 	stw	fp,12(sp)
2008ca00:	df000304 	addi	fp,sp,12
2008ca04:	e13ffe15 	stw	r4,-8(fp)
2008ca08:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
2008ca0c:	e0bffe17 	ldw	r2,-8(fp)
2008ca10:	10000616 	blt	r2,zero,2008ca2c <fstat+0x38>
2008ca14:	e0bffe17 	ldw	r2,-8(fp)
2008ca18:	10c00324 	muli	r3,r2,12
2008ca1c:	00800034 	movhi	r2,0
2008ca20:	10838004 	addi	r2,r2,3584
2008ca24:	1885883a 	add	r2,r3,r2
2008ca28:	00000106 	br	2008ca30 <fstat+0x3c>
2008ca2c:	0005883a 	mov	r2,zero
2008ca30:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
2008ca34:	e0bffd17 	ldw	r2,-12(fp)
2008ca38:	10001026 	beq	r2,zero,2008ca7c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
2008ca3c:	e0bffd17 	ldw	r2,-12(fp)
2008ca40:	10800017 	ldw	r2,0(r2)
2008ca44:	10800817 	ldw	r2,32(r2)
2008ca48:	10000726 	beq	r2,zero,2008ca68 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
2008ca4c:	e0bffd17 	ldw	r2,-12(fp)
2008ca50:	10800017 	ldw	r2,0(r2)
2008ca54:	10800817 	ldw	r2,32(r2)
2008ca58:	e13ffd17 	ldw	r4,-12(fp)
2008ca5c:	e17fff17 	ldw	r5,-4(fp)
2008ca60:	103ee83a 	callr	r2
2008ca64:	00000a06 	br	2008ca90 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
2008ca68:	e0bfff17 	ldw	r2,-4(fp)
2008ca6c:	00c80004 	movi	r3,8192
2008ca70:	10c00115 	stw	r3,4(r2)
      return 0;
2008ca74:	0005883a 	mov	r2,zero
2008ca78:	00000506 	br	2008ca90 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
2008ca7c:	008c9a40 	call	2008c9a4 <alt_get_errno>
2008ca80:	1007883a 	mov	r3,r2
2008ca84:	00801444 	movi	r2,81
2008ca88:	18800015 	stw	r2,0(r3)
    return -1;
2008ca8c:	00bfffc4 	movi	r2,-1
  }
}
2008ca90:	e037883a 	mov	sp,fp
2008ca94:	dfc00117 	ldw	ra,4(sp)
2008ca98:	df000017 	ldw	fp,0(sp)
2008ca9c:	dec00204 	addi	sp,sp,8
2008caa0:	f800283a 	ret

2008caa4 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
2008caa4:	defff004 	addi	sp,sp,-64
2008caa8:	df000f15 	stw	fp,60(sp)
2008caac:	df000f04 	addi	fp,sp,60
2008cab0:	e13ffd15 	stw	r4,-12(fp)
2008cab4:	e17ffe15 	stw	r5,-8(fp)
2008cab8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
2008cabc:	00bffa84 	movi	r2,-22
2008cac0:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
2008cac4:	e0bffd17 	ldw	r2,-12(fp)
2008cac8:	10800828 	cmpgeui	r2,r2,32
2008cacc:	10005c1e 	bne	r2,zero,2008cc40 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2008cad0:	0005303a 	rdctl	r2,status
2008cad4:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2008cad8:	e0fff317 	ldw	r3,-52(fp)
2008cadc:	00bfff84 	movi	r2,-2
2008cae0:	1884703a 	and	r2,r3,r2
2008cae4:	1001703a 	wrctl	status,r2
  
  return context;
2008cae8:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
2008caec:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
2008caf0:	00800034 	movhi	r2,0
2008caf4:	10883d04 	addi	r2,r2,8436
2008caf8:	e0fffd17 	ldw	r3,-12(fp)
2008cafc:	180690fa 	slli	r3,r3,3
2008cb00:	10c5883a 	add	r2,r2,r3
2008cb04:	e0ffff17 	ldw	r3,-4(fp)
2008cb08:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
2008cb0c:	00800034 	movhi	r2,0
2008cb10:	10883d04 	addi	r2,r2,8436
2008cb14:	e0fffd17 	ldw	r3,-12(fp)
2008cb18:	180690fa 	slli	r3,r3,3
2008cb1c:	18c00104 	addi	r3,r3,4
2008cb20:	10c5883a 	add	r2,r2,r3
2008cb24:	e0fffe17 	ldw	r3,-8(fp)
2008cb28:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
2008cb2c:	e0bfff17 	ldw	r2,-4(fp)
2008cb30:	10001f26 	beq	r2,zero,2008cbb0 <alt_irq_register+0x10c>
2008cb34:	e0bffd17 	ldw	r2,-12(fp)
2008cb38:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2008cb3c:	0005303a 	rdctl	r2,status
2008cb40:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2008cb44:	e0fff517 	ldw	r3,-44(fp)
2008cb48:	00bfff84 	movi	r2,-2
2008cb4c:	1884703a 	and	r2,r3,r2
2008cb50:	1001703a 	wrctl	status,r2
  
  return context;
2008cb54:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
2008cb58:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
2008cb5c:	e0bff417 	ldw	r2,-48(fp)
2008cb60:	00c00044 	movi	r3,1
2008cb64:	1884983a 	sll	r2,r3,r2
2008cb68:	1007883a 	mov	r3,r2
2008cb6c:	00800034 	movhi	r2,0
2008cb70:	10882a04 	addi	r2,r2,8360
2008cb74:	10800017 	ldw	r2,0(r2)
2008cb78:	1886b03a 	or	r3,r3,r2
2008cb7c:	00800034 	movhi	r2,0
2008cb80:	10882a04 	addi	r2,r2,8360
2008cb84:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
2008cb88:	00800034 	movhi	r2,0
2008cb8c:	10882a04 	addi	r2,r2,8360
2008cb90:	10800017 	ldw	r2,0(r2)
2008cb94:	100170fa 	wrctl	ienable,r2
2008cb98:	e0bff617 	ldw	r2,-40(fp)
2008cb9c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2008cba0:	e0bff717 	ldw	r2,-36(fp)
2008cba4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
2008cba8:	0005883a 	mov	r2,zero
2008cbac:	00001f06 	br	2008cc2c <alt_irq_register+0x188>
2008cbb0:	e0bffd17 	ldw	r2,-12(fp)
2008cbb4:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2008cbb8:	0005303a 	rdctl	r2,status
2008cbbc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2008cbc0:	e0fff917 	ldw	r3,-28(fp)
2008cbc4:	00bfff84 	movi	r2,-2
2008cbc8:	1884703a 	and	r2,r3,r2
2008cbcc:	1001703a 	wrctl	status,r2
  
  return context;
2008cbd0:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
2008cbd4:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
2008cbd8:	e0bff817 	ldw	r2,-32(fp)
2008cbdc:	00c00044 	movi	r3,1
2008cbe0:	1884983a 	sll	r2,r3,r2
2008cbe4:	0084303a 	nor	r2,zero,r2
2008cbe8:	1007883a 	mov	r3,r2
2008cbec:	00800034 	movhi	r2,0
2008cbf0:	10882a04 	addi	r2,r2,8360
2008cbf4:	10800017 	ldw	r2,0(r2)
2008cbf8:	1886703a 	and	r3,r3,r2
2008cbfc:	00800034 	movhi	r2,0
2008cc00:	10882a04 	addi	r2,r2,8360
2008cc04:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
2008cc08:	00800034 	movhi	r2,0
2008cc0c:	10882a04 	addi	r2,r2,8360
2008cc10:	10800017 	ldw	r2,0(r2)
2008cc14:	100170fa 	wrctl	ienable,r2
2008cc18:	e0bffa17 	ldw	r2,-24(fp)
2008cc1c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2008cc20:	e0bffb17 	ldw	r2,-20(fp)
2008cc24:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
2008cc28:	0005883a 	mov	r2,zero
2008cc2c:	e0bff115 	stw	r2,-60(fp)
2008cc30:	e0bff217 	ldw	r2,-56(fp)
2008cc34:	e0bffc15 	stw	r2,-16(fp)
2008cc38:	e0bffc17 	ldw	r2,-16(fp)
2008cc3c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
2008cc40:	e0bff117 	ldw	r2,-60(fp)
}
2008cc44:	e037883a 	mov	sp,fp
2008cc48:	df000017 	ldw	fp,0(sp)
2008cc4c:	dec00104 	addi	sp,sp,4
2008cc50:	f800283a 	ret

2008cc54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2008cc54:	defffe04 	addi	sp,sp,-8
2008cc58:	dfc00115 	stw	ra,4(sp)
2008cc5c:	df000015 	stw	fp,0(sp)
2008cc60:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2008cc64:	00800034 	movhi	r2,0
2008cc68:	10881b04 	addi	r2,r2,8300
2008cc6c:	10800017 	ldw	r2,0(r2)
2008cc70:	10000526 	beq	r2,zero,2008cc88 <alt_get_errno+0x34>
2008cc74:	00800034 	movhi	r2,0
2008cc78:	10881b04 	addi	r2,r2,8300
2008cc7c:	10800017 	ldw	r2,0(r2)
2008cc80:	103ee83a 	callr	r2
2008cc84:	00000206 	br	2008cc90 <alt_get_errno+0x3c>
2008cc88:	00800034 	movhi	r2,0
2008cc8c:	10882904 	addi	r2,r2,8356
}
2008cc90:	e037883a 	mov	sp,fp
2008cc94:	dfc00117 	ldw	ra,4(sp)
2008cc98:	df000017 	ldw	fp,0(sp)
2008cc9c:	dec00204 	addi	sp,sp,8
2008cca0:	f800283a 	ret

2008cca4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
2008cca4:	deffed04 	addi	sp,sp,-76
2008cca8:	dfc01215 	stw	ra,72(sp)
2008ccac:	df001115 	stw	fp,68(sp)
2008ccb0:	df001104 	addi	fp,sp,68
2008ccb4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
2008ccb8:	e0bfff17 	ldw	r2,-4(fp)
2008ccbc:	10000616 	blt	r2,zero,2008ccd8 <isatty+0x34>
2008ccc0:	e0bfff17 	ldw	r2,-4(fp)
2008ccc4:	10c00324 	muli	r3,r2,12
2008ccc8:	00800034 	movhi	r2,0
2008cccc:	10838004 	addi	r2,r2,3584
2008ccd0:	1885883a 	add	r2,r3,r2
2008ccd4:	00000106 	br	2008ccdc <isatty+0x38>
2008ccd8:	0005883a 	mov	r2,zero
2008ccdc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
2008cce0:	e0bfef17 	ldw	r2,-68(fp)
2008cce4:	10000e26 	beq	r2,zero,2008cd20 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
2008cce8:	e0bfef17 	ldw	r2,-68(fp)
2008ccec:	10800017 	ldw	r2,0(r2)
2008ccf0:	10800817 	ldw	r2,32(r2)
2008ccf4:	1000021e 	bne	r2,zero,2008cd00 <isatty+0x5c>
    {
      return 1;
2008ccf8:	00800044 	movi	r2,1
2008ccfc:	00000d06 	br	2008cd34 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
2008cd00:	e0bff004 	addi	r2,fp,-64
2008cd04:	e13fff17 	ldw	r4,-4(fp)
2008cd08:	100b883a 	mov	r5,r2
2008cd0c:	008c9f40 	call	2008c9f4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
2008cd10:	e0bff117 	ldw	r2,-60(fp)
2008cd14:	10880020 	cmpeqi	r2,r2,8192
2008cd18:	10803fcc 	andi	r2,r2,255
2008cd1c:	00000506 	br	2008cd34 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
2008cd20:	008cc540 	call	2008cc54 <alt_get_errno>
2008cd24:	1007883a 	mov	r3,r2
2008cd28:	00801444 	movi	r2,81
2008cd2c:	18800015 	stw	r2,0(r3)
    return 0;
2008cd30:	0005883a 	mov	r2,zero
  }
}
2008cd34:	e037883a 	mov	sp,fp
2008cd38:	dfc00117 	ldw	ra,4(sp)
2008cd3c:	df000017 	ldw	fp,0(sp)
2008cd40:	dec00204 	addi	sp,sp,8
2008cd44:	f800283a 	ret

2008cd48 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
2008cd48:	defffc04 	addi	sp,sp,-16
2008cd4c:	df000315 	stw	fp,12(sp)
2008cd50:	df000304 	addi	fp,sp,12
2008cd54:	e13ffd15 	stw	r4,-12(fp)
2008cd58:	e17ffe15 	stw	r5,-8(fp)
2008cd5c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
2008cd60:	e0fffe17 	ldw	r3,-8(fp)
2008cd64:	e0bffd17 	ldw	r2,-12(fp)
2008cd68:	18800c26 	beq	r3,r2,2008cd9c <alt_load_section+0x54>
  {
    while( to != end )
2008cd6c:	00000806 	br	2008cd90 <alt_load_section+0x48>
    {
      *to++ = *from++;
2008cd70:	e0bffe17 	ldw	r2,-8(fp)
2008cd74:	10c00104 	addi	r3,r2,4
2008cd78:	e0fffe15 	stw	r3,-8(fp)
2008cd7c:	e0fffd17 	ldw	r3,-12(fp)
2008cd80:	19000104 	addi	r4,r3,4
2008cd84:	e13ffd15 	stw	r4,-12(fp)
2008cd88:	18c00017 	ldw	r3,0(r3)
2008cd8c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
2008cd90:	e0fffe17 	ldw	r3,-8(fp)
2008cd94:	e0bfff17 	ldw	r2,-4(fp)
2008cd98:	18bff51e 	bne	r3,r2,2008cd70 <__flash_rwdata_start+0xffffb2c0>
    {
      *to++ = *from++;
    }
  }
}
2008cd9c:	e037883a 	mov	sp,fp
2008cda0:	df000017 	ldw	fp,0(sp)
2008cda4:	dec00104 	addi	sp,sp,4
2008cda8:	f800283a 	ret

2008cdac <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
2008cdac:	defffe04 	addi	sp,sp,-8
2008cdb0:	dfc00115 	stw	ra,4(sp)
2008cdb4:	df000015 	stw	fp,0(sp)
2008cdb8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
2008cdbc:	01080274 	movhi	r4,8201
2008cdc0:	2106ac04 	addi	r4,r4,6832
2008cdc4:	01400034 	movhi	r5,0
2008cdc8:	29414d04 	addi	r5,r5,1332
2008cdcc:	01800034 	movhi	r6,0
2008cdd0:	31882204 	addi	r6,r6,8328
2008cdd4:	008cd480 	call	2008cd48 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
2008cdd8:	01080234 	movhi	r4,8200
2008cddc:	21000804 	addi	r4,r4,32
2008cde0:	01480234 	movhi	r5,8200
2008cde4:	29400804 	addi	r5,r5,32
2008cde8:	01880234 	movhi	r6,8200
2008cdec:	31809004 	addi	r6,r6,576
2008cdf0:	008cd480 	call	2008cd48 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
2008cdf4:	01080274 	movhi	r4,8201
2008cdf8:	21055f04 	addi	r4,r4,5500
2008cdfc:	01400034 	movhi	r5,0
2008ce00:	29400004 	addi	r5,r5,0
2008ce04:	01800034 	movhi	r6,0
2008ce08:	31814d04 	addi	r6,r6,1332
2008ce0c:	008cd480 	call	2008cd48 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
2008ce10:	00900280 	call	20090028 <alt_dcache_flush_all>
  alt_icache_flush_all();
2008ce14:	00902a80 	call	200902a8 <alt_icache_flush_all>
}
2008ce18:	e037883a 	mov	sp,fp
2008ce1c:	dfc00117 	ldw	ra,4(sp)
2008ce20:	df000017 	ldw	fp,0(sp)
2008ce24:	dec00204 	addi	sp,sp,8
2008ce28:	f800283a 	ret

2008ce2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2008ce2c:	defffe04 	addi	sp,sp,-8
2008ce30:	dfc00115 	stw	ra,4(sp)
2008ce34:	df000015 	stw	fp,0(sp)
2008ce38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2008ce3c:	00800034 	movhi	r2,0
2008ce40:	10881b04 	addi	r2,r2,8300
2008ce44:	10800017 	ldw	r2,0(r2)
2008ce48:	10000526 	beq	r2,zero,2008ce60 <alt_get_errno+0x34>
2008ce4c:	00800034 	movhi	r2,0
2008ce50:	10881b04 	addi	r2,r2,8300
2008ce54:	10800017 	ldw	r2,0(r2)
2008ce58:	103ee83a 	callr	r2
2008ce5c:	00000206 	br	2008ce68 <alt_get_errno+0x3c>
2008ce60:	00800034 	movhi	r2,0
2008ce64:	10882904 	addi	r2,r2,8356
}
2008ce68:	e037883a 	mov	sp,fp
2008ce6c:	dfc00117 	ldw	ra,4(sp)
2008ce70:	df000017 	ldw	fp,0(sp)
2008ce74:	dec00204 	addi	sp,sp,8
2008ce78:	f800283a 	ret

2008ce7c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
2008ce7c:	defff904 	addi	sp,sp,-28
2008ce80:	dfc00615 	stw	ra,24(sp)
2008ce84:	df000515 	stw	fp,20(sp)
2008ce88:	df000504 	addi	fp,sp,20
2008ce8c:	e13ffd15 	stw	r4,-12(fp)
2008ce90:	e17ffe15 	stw	r5,-8(fp)
2008ce94:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
2008ce98:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
2008ce9c:	e0bffd17 	ldw	r2,-12(fp)
2008cea0:	10000616 	blt	r2,zero,2008cebc <lseek+0x40>
2008cea4:	e0bffd17 	ldw	r2,-12(fp)
2008cea8:	10c00324 	muli	r3,r2,12
2008ceac:	00800034 	movhi	r2,0
2008ceb0:	10838004 	addi	r2,r2,3584
2008ceb4:	1885883a 	add	r2,r3,r2
2008ceb8:	00000106 	br	2008cec0 <lseek+0x44>
2008cebc:	0005883a 	mov	r2,zero
2008cec0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
2008cec4:	e0bffc17 	ldw	r2,-16(fp)
2008cec8:	10001026 	beq	r2,zero,2008cf0c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
2008cecc:	e0bffc17 	ldw	r2,-16(fp)
2008ced0:	10800017 	ldw	r2,0(r2)
2008ced4:	10800717 	ldw	r2,28(r2)
2008ced8:	10000926 	beq	r2,zero,2008cf00 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
2008cedc:	e0bffc17 	ldw	r2,-16(fp)
2008cee0:	10800017 	ldw	r2,0(r2)
2008cee4:	10800717 	ldw	r2,28(r2)
2008cee8:	e13ffc17 	ldw	r4,-16(fp)
2008ceec:	e17ffe17 	ldw	r5,-8(fp)
2008cef0:	e1bfff17 	ldw	r6,-4(fp)
2008cef4:	103ee83a 	callr	r2
2008cef8:	e0bffb15 	stw	r2,-20(fp)
2008cefc:	00000506 	br	2008cf14 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
2008cf00:	00bfde84 	movi	r2,-134
2008cf04:	e0bffb15 	stw	r2,-20(fp)
2008cf08:	00000206 	br	2008cf14 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
2008cf0c:	00bfebc4 	movi	r2,-81
2008cf10:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
2008cf14:	e0bffb17 	ldw	r2,-20(fp)
2008cf18:	1000070e 	bge	r2,zero,2008cf38 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
2008cf1c:	008ce2c0 	call	2008ce2c <alt_get_errno>
2008cf20:	1007883a 	mov	r3,r2
2008cf24:	e0bffb17 	ldw	r2,-20(fp)
2008cf28:	0085c83a 	sub	r2,zero,r2
2008cf2c:	18800015 	stw	r2,0(r3)
    rc = -1;
2008cf30:	00bfffc4 	movi	r2,-1
2008cf34:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
2008cf38:	e0bffb17 	ldw	r2,-20(fp)
}
2008cf3c:	e037883a 	mov	sp,fp
2008cf40:	dfc00117 	ldw	ra,4(sp)
2008cf44:	df000017 	ldw	fp,0(sp)
2008cf48:	dec00204 	addi	sp,sp,8
2008cf4c:	f800283a 	ret

2008cf50 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
2008cf50:	defffd04 	addi	sp,sp,-12
2008cf54:	dfc00215 	stw	ra,8(sp)
2008cf58:	df000115 	stw	fp,4(sp)
2008cf5c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
2008cf60:	0009883a 	mov	r4,zero
2008cf64:	008d3e40 	call	2008d3e4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
2008cf68:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
2008cf6c:	008d4180 	call	2008d418 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
2008cf70:	01000034 	movhi	r4,0
2008cf74:	2100be04 	addi	r4,r4,760
2008cf78:	01400034 	movhi	r5,0
2008cf7c:	2940be04 	addi	r5,r5,760
2008cf80:	01800034 	movhi	r6,0
2008cf84:	3180be04 	addi	r6,r6,760
2008cf88:	00906680 	call	20090668 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
2008cf8c:	00901600 	call	20090160 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
2008cf90:	01080274 	movhi	r4,8201
2008cf94:	21006f04 	addi	r4,r4,444
2008cf98:	009106c0 	call	2009106c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
2008cf9c:	d1201b17 	ldw	r4,-32660(gp)
2008cfa0:	d0e01c17 	ldw	r3,-32656(gp)
2008cfa4:	d0a01d17 	ldw	r2,-32652(gp)
2008cfa8:	180b883a 	mov	r5,r3
2008cfac:	100d883a 	mov	r6,r2
2008cfb0:	008030c0 	call	2008030c <main>
2008cfb4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
2008cfb8:	01000044 	movi	r4,1
2008cfbc:	008c8a80 	call	2008c8a8 <close>
  exit (result);
2008cfc0:	e13fff17 	ldw	r4,-4(fp)
2008cfc4:	00910800 	call	20091080 <exit>

2008cfc8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
2008cfc8:	defffe04 	addi	sp,sp,-8
2008cfcc:	df000115 	stw	fp,4(sp)
2008cfd0:	df000104 	addi	fp,sp,4
2008cfd4:	e13fff15 	stw	r4,-4(fp)
}
2008cfd8:	e037883a 	mov	sp,fp
2008cfdc:	df000017 	ldw	fp,0(sp)
2008cfe0:	dec00104 	addi	sp,sp,4
2008cfe4:	f800283a 	ret

2008cfe8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
2008cfe8:	defffe04 	addi	sp,sp,-8
2008cfec:	df000115 	stw	fp,4(sp)
2008cff0:	df000104 	addi	fp,sp,4
2008cff4:	e13fff15 	stw	r4,-4(fp)
}
2008cff8:	e037883a 	mov	sp,fp
2008cffc:	df000017 	ldw	fp,0(sp)
2008d000:	dec00104 	addi	sp,sp,4
2008d004:	f800283a 	ret

2008d008 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2008d008:	defffe04 	addi	sp,sp,-8
2008d00c:	dfc00115 	stw	ra,4(sp)
2008d010:	df000015 	stw	fp,0(sp)
2008d014:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2008d018:	00800034 	movhi	r2,0
2008d01c:	10881b04 	addi	r2,r2,8300
2008d020:	10800017 	ldw	r2,0(r2)
2008d024:	10000526 	beq	r2,zero,2008d03c <alt_get_errno+0x34>
2008d028:	00800034 	movhi	r2,0
2008d02c:	10881b04 	addi	r2,r2,8300
2008d030:	10800017 	ldw	r2,0(r2)
2008d034:	103ee83a 	callr	r2
2008d038:	00000206 	br	2008d044 <alt_get_errno+0x3c>
2008d03c:	00800034 	movhi	r2,0
2008d040:	10882904 	addi	r2,r2,8356
}
2008d044:	e037883a 	mov	sp,fp
2008d048:	dfc00117 	ldw	ra,4(sp)
2008d04c:	df000017 	ldw	fp,0(sp)
2008d050:	dec00204 	addi	sp,sp,8
2008d054:	f800283a 	ret

2008d058 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
2008d058:	defff904 	addi	sp,sp,-28
2008d05c:	dfc00615 	stw	ra,24(sp)
2008d060:	df000515 	stw	fp,20(sp)
2008d064:	df000504 	addi	fp,sp,20
2008d068:	e13ffd15 	stw	r4,-12(fp)
2008d06c:	e17ffe15 	stw	r5,-8(fp)
2008d070:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
2008d074:	e0bffd17 	ldw	r2,-12(fp)
2008d078:	10000616 	blt	r2,zero,2008d094 <read+0x3c>
2008d07c:	e0bffd17 	ldw	r2,-12(fp)
2008d080:	10c00324 	muli	r3,r2,12
2008d084:	00800034 	movhi	r2,0
2008d088:	10838004 	addi	r2,r2,3584
2008d08c:	1885883a 	add	r2,r3,r2
2008d090:	00000106 	br	2008d098 <read+0x40>
2008d094:	0005883a 	mov	r2,zero
2008d098:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
2008d09c:	e0bffb17 	ldw	r2,-20(fp)
2008d0a0:	10002226 	beq	r2,zero,2008d12c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
2008d0a4:	e0bffb17 	ldw	r2,-20(fp)
2008d0a8:	10800217 	ldw	r2,8(r2)
2008d0ac:	108000cc 	andi	r2,r2,3
2008d0b0:	10800060 	cmpeqi	r2,r2,1
2008d0b4:	1000181e 	bne	r2,zero,2008d118 <read+0xc0>
        (fd->dev->read))
2008d0b8:	e0bffb17 	ldw	r2,-20(fp)
2008d0bc:	10800017 	ldw	r2,0(r2)
2008d0c0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
2008d0c4:	10001426 	beq	r2,zero,2008d118 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
2008d0c8:	e0bffb17 	ldw	r2,-20(fp)
2008d0cc:	10800017 	ldw	r2,0(r2)
2008d0d0:	10800517 	ldw	r2,20(r2)
2008d0d4:	e0ffff17 	ldw	r3,-4(fp)
2008d0d8:	e13ffb17 	ldw	r4,-20(fp)
2008d0dc:	e17ffe17 	ldw	r5,-8(fp)
2008d0e0:	180d883a 	mov	r6,r3
2008d0e4:	103ee83a 	callr	r2
2008d0e8:	e0bffc15 	stw	r2,-16(fp)
2008d0ec:	e0bffc17 	ldw	r2,-16(fp)
2008d0f0:	1000070e 	bge	r2,zero,2008d110 <read+0xb8>
        {
          ALT_ERRNO = -rval;
2008d0f4:	008d0080 	call	2008d008 <alt_get_errno>
2008d0f8:	1007883a 	mov	r3,r2
2008d0fc:	e0bffc17 	ldw	r2,-16(fp)
2008d100:	0085c83a 	sub	r2,zero,r2
2008d104:	18800015 	stw	r2,0(r3)
          return -1;
2008d108:	00bfffc4 	movi	r2,-1
2008d10c:	00000c06 	br	2008d140 <read+0xe8>
        }
        return rval;
2008d110:	e0bffc17 	ldw	r2,-16(fp)
2008d114:	00000a06 	br	2008d140 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
2008d118:	008d0080 	call	2008d008 <alt_get_errno>
2008d11c:	1007883a 	mov	r3,r2
2008d120:	00800344 	movi	r2,13
2008d124:	18800015 	stw	r2,0(r3)
2008d128:	00000406 	br	2008d13c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
2008d12c:	008d0080 	call	2008d008 <alt_get_errno>
2008d130:	1007883a 	mov	r3,r2
2008d134:	00801444 	movi	r2,81
2008d138:	18800015 	stw	r2,0(r3)
  }
  return -1;
2008d13c:	00bfffc4 	movi	r2,-1
}
2008d140:	e037883a 	mov	sp,fp
2008d144:	dfc00117 	ldw	ra,4(sp)
2008d148:	df000017 	ldw	fp,0(sp)
2008d14c:	dec00204 	addi	sp,sp,8
2008d150:	f800283a 	ret

2008d154 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
2008d154:	defffe04 	addi	sp,sp,-8
2008d158:	df000115 	stw	fp,4(sp)
2008d15c:	df000104 	addi	fp,sp,4
2008d160:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
2008d164:	e0bfff17 	ldw	r2,-4(fp)
2008d168:	108000d0 	cmplti	r2,r2,3
2008d16c:	10000d1e 	bne	r2,zero,2008d1a4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
2008d170:	00800034 	movhi	r2,0
2008d174:	10838004 	addi	r2,r2,3584
2008d178:	e0ffff17 	ldw	r3,-4(fp)
2008d17c:	18c00324 	muli	r3,r3,12
2008d180:	18c00204 	addi	r3,r3,8
2008d184:	10c5883a 	add	r2,r2,r3
2008d188:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
2008d18c:	00800034 	movhi	r2,0
2008d190:	10838004 	addi	r2,r2,3584
2008d194:	e0ffff17 	ldw	r3,-4(fp)
2008d198:	18c00324 	muli	r3,r3,12
2008d19c:	10c5883a 	add	r2,r2,r3
2008d1a0:	10000015 	stw	zero,0(r2)
  }
}
2008d1a4:	e037883a 	mov	sp,fp
2008d1a8:	df000017 	ldw	fp,0(sp)
2008d1ac:	dec00104 	addi	sp,sp,4
2008d1b0:	f800283a 	ret

2008d1b4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
2008d1b4:	defff904 	addi	sp,sp,-28
2008d1b8:	df000615 	stw	fp,24(sp)
2008d1bc:	df000604 	addi	fp,sp,24
2008d1c0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2008d1c4:	0005303a 	rdctl	r2,status
2008d1c8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2008d1cc:	e0fffc17 	ldw	r3,-16(fp)
2008d1d0:	00bfff84 	movi	r2,-2
2008d1d4:	1884703a 	and	r2,r3,r2
2008d1d8:	1001703a 	wrctl	status,r2
  
  return context;
2008d1dc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
2008d1e0:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
2008d1e4:	d0a00d17 	ldw	r2,-32716(gp)
2008d1e8:	10c000c4 	addi	r3,r2,3
2008d1ec:	00bfff04 	movi	r2,-4
2008d1f0:	1884703a 	and	r2,r3,r2
2008d1f4:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
2008d1f8:	d0e00d17 	ldw	r3,-32716(gp)
2008d1fc:	e0bfff17 	ldw	r2,-4(fp)
2008d200:	1887883a 	add	r3,r3,r2
2008d204:	00880034 	movhi	r2,8192
2008d208:	10800004 	addi	r2,r2,0
2008d20c:	10c0062e 	bgeu	r2,r3,2008d228 <sbrk+0x74>
2008d210:	e0bffa17 	ldw	r2,-24(fp)
2008d214:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2008d218:	e0bffd17 	ldw	r2,-12(fp)
2008d21c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
2008d220:	00bfffc4 	movi	r2,-1
2008d224:	00000b06 	br	2008d254 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
2008d228:	d0a00d17 	ldw	r2,-32716(gp)
2008d22c:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
2008d230:	d0e00d17 	ldw	r3,-32716(gp)
2008d234:	e0bfff17 	ldw	r2,-4(fp)
2008d238:	1885883a 	add	r2,r3,r2
2008d23c:	d0a00d15 	stw	r2,-32716(gp)
2008d240:	e0bffa17 	ldw	r2,-24(fp)
2008d244:	e0bffe15 	stw	r2,-8(fp)
2008d248:	e0bffe17 	ldw	r2,-8(fp)
2008d24c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
2008d250:	e0bffb17 	ldw	r2,-20(fp)
} 
2008d254:	e037883a 	mov	sp,fp
2008d258:	df000017 	ldw	fp,0(sp)
2008d25c:	dec00104 	addi	sp,sp,4
2008d260:	f800283a 	ret

2008d264 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2008d264:	defffe04 	addi	sp,sp,-8
2008d268:	dfc00115 	stw	ra,4(sp)
2008d26c:	df000015 	stw	fp,0(sp)
2008d270:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2008d274:	00800034 	movhi	r2,0
2008d278:	10881b04 	addi	r2,r2,8300
2008d27c:	10800017 	ldw	r2,0(r2)
2008d280:	10000526 	beq	r2,zero,2008d298 <alt_get_errno+0x34>
2008d284:	00800034 	movhi	r2,0
2008d288:	10881b04 	addi	r2,r2,8300
2008d28c:	10800017 	ldw	r2,0(r2)
2008d290:	103ee83a 	callr	r2
2008d294:	00000206 	br	2008d2a0 <alt_get_errno+0x3c>
2008d298:	00800034 	movhi	r2,0
2008d29c:	10882904 	addi	r2,r2,8356
}
2008d2a0:	e037883a 	mov	sp,fp
2008d2a4:	dfc00117 	ldw	ra,4(sp)
2008d2a8:	df000017 	ldw	fp,0(sp)
2008d2ac:	dec00204 	addi	sp,sp,8
2008d2b0:	f800283a 	ret

2008d2b4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
2008d2b4:	defff904 	addi	sp,sp,-28
2008d2b8:	dfc00615 	stw	ra,24(sp)
2008d2bc:	df000515 	stw	fp,20(sp)
2008d2c0:	df000504 	addi	fp,sp,20
2008d2c4:	e13ffd15 	stw	r4,-12(fp)
2008d2c8:	e17ffe15 	stw	r5,-8(fp)
2008d2cc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
2008d2d0:	e0bffd17 	ldw	r2,-12(fp)
2008d2d4:	10000616 	blt	r2,zero,2008d2f0 <write+0x3c>
2008d2d8:	e0bffd17 	ldw	r2,-12(fp)
2008d2dc:	10c00324 	muli	r3,r2,12
2008d2e0:	00800034 	movhi	r2,0
2008d2e4:	10838004 	addi	r2,r2,3584
2008d2e8:	1885883a 	add	r2,r3,r2
2008d2ec:	00000106 	br	2008d2f4 <write+0x40>
2008d2f0:	0005883a 	mov	r2,zero
2008d2f4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
2008d2f8:	e0bffb17 	ldw	r2,-20(fp)
2008d2fc:	10002126 	beq	r2,zero,2008d384 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
2008d300:	e0bffb17 	ldw	r2,-20(fp)
2008d304:	10800217 	ldw	r2,8(r2)
2008d308:	108000cc 	andi	r2,r2,3
2008d30c:	10001826 	beq	r2,zero,2008d370 <write+0xbc>
2008d310:	e0bffb17 	ldw	r2,-20(fp)
2008d314:	10800017 	ldw	r2,0(r2)
2008d318:	10800617 	ldw	r2,24(r2)
2008d31c:	10001426 	beq	r2,zero,2008d370 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
2008d320:	e0bffb17 	ldw	r2,-20(fp)
2008d324:	10800017 	ldw	r2,0(r2)
2008d328:	10800617 	ldw	r2,24(r2)
2008d32c:	e0ffff17 	ldw	r3,-4(fp)
2008d330:	e13ffb17 	ldw	r4,-20(fp)
2008d334:	e17ffe17 	ldw	r5,-8(fp)
2008d338:	180d883a 	mov	r6,r3
2008d33c:	103ee83a 	callr	r2
2008d340:	e0bffc15 	stw	r2,-16(fp)
2008d344:	e0bffc17 	ldw	r2,-16(fp)
2008d348:	1000070e 	bge	r2,zero,2008d368 <write+0xb4>
      {
        ALT_ERRNO = -rval;
2008d34c:	008d2640 	call	2008d264 <alt_get_errno>
2008d350:	1007883a 	mov	r3,r2
2008d354:	e0bffc17 	ldw	r2,-16(fp)
2008d358:	0085c83a 	sub	r2,zero,r2
2008d35c:	18800015 	stw	r2,0(r3)
        return -1;
2008d360:	00bfffc4 	movi	r2,-1
2008d364:	00000c06 	br	2008d398 <write+0xe4>
      }
      return rval;
2008d368:	e0bffc17 	ldw	r2,-16(fp)
2008d36c:	00000a06 	br	2008d398 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
2008d370:	008d2640 	call	2008d264 <alt_get_errno>
2008d374:	1007883a 	mov	r3,r2
2008d378:	00800344 	movi	r2,13
2008d37c:	18800015 	stw	r2,0(r3)
2008d380:	00000406 	br	2008d394 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
2008d384:	008d2640 	call	2008d264 <alt_get_errno>
2008d388:	1007883a 	mov	r3,r2
2008d38c:	00801444 	movi	r2,81
2008d390:	18800015 	stw	r2,0(r3)
  }
  return -1;
2008d394:	00bfffc4 	movi	r2,-1
}
2008d398:	e037883a 	mov	sp,fp
2008d39c:	dfc00117 	ldw	ra,4(sp)
2008d3a0:	df000017 	ldw	fp,0(sp)
2008d3a4:	dec00204 	addi	sp,sp,8
2008d3a8:	f800283a 	ret

2008d3ac <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
2008d3ac:	defffd04 	addi	sp,sp,-12
2008d3b0:	dfc00215 	stw	ra,8(sp)
2008d3b4:	df000115 	stw	fp,4(sp)
2008d3b8:	df000104 	addi	fp,sp,4
2008d3bc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
2008d3c0:	e13fff17 	ldw	r4,-4(fp)
2008d3c4:	01400034 	movhi	r5,0
2008d3c8:	29481804 	addi	r5,r5,8288
2008d3cc:	00900bc0 	call	200900bc <alt_dev_llist_insert>
}
2008d3d0:	e037883a 	mov	sp,fp
2008d3d4:	dfc00117 	ldw	ra,4(sp)
2008d3d8:	df000017 	ldw	fp,0(sp)
2008d3dc:	dec00204 	addi	sp,sp,8
2008d3e0:	f800283a 	ret

2008d3e4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
2008d3e4:	defffd04 	addi	sp,sp,-12
2008d3e8:	dfc00215 	stw	ra,8(sp)
2008d3ec:	df000115 	stw	fp,4(sp)
2008d3f0:	df000104 	addi	fp,sp,4
2008d3f4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
2008d3f8:	0090d5c0 	call	20090d5c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
2008d3fc:	00800044 	movi	r2,1
2008d400:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
2008d404:	e037883a 	mov	sp,fp
2008d408:	dfc00117 	ldw	ra,4(sp)
2008d40c:	df000017 	ldw	fp,0(sp)
2008d410:	dec00204 	addi	sp,sp,8
2008d414:	f800283a 	ret

2008d418 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
2008d418:	defffe04 	addi	sp,sp,-8
2008d41c:	dfc00115 	stw	ra,4(sp)
2008d420:	df000015 	stw	fp,0(sp)
2008d424:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
2008d428:	00800034 	movhi	r2,0
2008d42c:	10882e04 	addi	r2,r2,8376
2008d430:	00c80434 	movhi	r3,8208
2008d434:	18c52804 	addi	r3,r3,5280
2008d438:	10c00015 	stw	r3,0(r2)
2008d43c:	00800034 	movhi	r2,0
2008d440:	10882f04 	addi	r2,r2,8380
2008d444:	00c1dcf4 	movhi	r3,1907
2008d448:	18d65004 	addi	r3,r3,22848
2008d44c:	10c00015 	stw	r3,0(r2)
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
2008d450:	01000034 	movhi	r4,0
2008d454:	2103ea04 	addi	r4,r4,4008
2008d458:	000b883a 	mov	r5,zero
2008d45c:	01800044 	movi	r6,1
2008d460:	008d6180 	call	2008d618 <altera_avalon_jtag_uart_init>
2008d464:	01000034 	movhi	r4,0
2008d468:	2103e004 	addi	r4,r4,3968
2008d46c:	008d3ac0 	call	2008d3ac <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
2008d470:	0001883a 	nop
    ALTERA_MSGDMA_INIT ( VIDEO_DMA, video_dma);
2008d474:	00800034 	movhi	r2,0
2008d478:	1087f804 	addi	r2,r2,8160
2008d47c:	10c00717 	ldw	r3,28(r2)
2008d480:	00800034 	movhi	r2,0
2008d484:	1087f804 	addi	r2,r2,8160
2008d488:	10800817 	ldw	r2,32(r2)
2008d48c:	01000034 	movhi	r4,0
2008d490:	2107f804 	addi	r4,r4,8160
2008d494:	180b883a 	mov	r5,r3
2008d498:	100d883a 	mov	r6,r2
2008d49c:	008fae00 	call	2008fae0 <alt_msgdma_init>
}
2008d4a0:	e037883a 	mov	sp,fp
2008d4a4:	dfc00117 	ldw	ra,4(sp)
2008d4a8:	df000017 	ldw	fp,0(sp)
2008d4ac:	dec00204 	addi	sp,sp,8
2008d4b0:	f800283a 	ret

2008d4b4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
2008d4b4:	defffa04 	addi	sp,sp,-24
2008d4b8:	dfc00515 	stw	ra,20(sp)
2008d4bc:	df000415 	stw	fp,16(sp)
2008d4c0:	df000404 	addi	fp,sp,16
2008d4c4:	e13ffd15 	stw	r4,-12(fp)
2008d4c8:	e17ffe15 	stw	r5,-8(fp)
2008d4cc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
2008d4d0:	e0bffd17 	ldw	r2,-12(fp)
2008d4d4:	10800017 	ldw	r2,0(r2)
2008d4d8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
2008d4dc:	e0bffc17 	ldw	r2,-16(fp)
2008d4e0:	10c00a04 	addi	r3,r2,40
2008d4e4:	e0bffd17 	ldw	r2,-12(fp)
2008d4e8:	10800217 	ldw	r2,8(r2)
2008d4ec:	1809883a 	mov	r4,r3
2008d4f0:	e17ffe17 	ldw	r5,-8(fp)
2008d4f4:	e1bfff17 	ldw	r6,-4(fp)
2008d4f8:	100f883a 	mov	r7,r2
2008d4fc:	008dadc0 	call	2008dadc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
2008d500:	e037883a 	mov	sp,fp
2008d504:	dfc00117 	ldw	ra,4(sp)
2008d508:	df000017 	ldw	fp,0(sp)
2008d50c:	dec00204 	addi	sp,sp,8
2008d510:	f800283a 	ret

2008d514 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
2008d514:	defffa04 	addi	sp,sp,-24
2008d518:	dfc00515 	stw	ra,20(sp)
2008d51c:	df000415 	stw	fp,16(sp)
2008d520:	df000404 	addi	fp,sp,16
2008d524:	e13ffd15 	stw	r4,-12(fp)
2008d528:	e17ffe15 	stw	r5,-8(fp)
2008d52c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
2008d530:	e0bffd17 	ldw	r2,-12(fp)
2008d534:	10800017 	ldw	r2,0(r2)
2008d538:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
2008d53c:	e0bffc17 	ldw	r2,-16(fp)
2008d540:	10c00a04 	addi	r3,r2,40
2008d544:	e0bffd17 	ldw	r2,-12(fp)
2008d548:	10800217 	ldw	r2,8(r2)
2008d54c:	1809883a 	mov	r4,r3
2008d550:	e17ffe17 	ldw	r5,-8(fp)
2008d554:	e1bfff17 	ldw	r6,-4(fp)
2008d558:	100f883a 	mov	r7,r2
2008d55c:	008dce80 	call	2008dce8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
2008d560:	e037883a 	mov	sp,fp
2008d564:	dfc00117 	ldw	ra,4(sp)
2008d568:	df000017 	ldw	fp,0(sp)
2008d56c:	dec00204 	addi	sp,sp,8
2008d570:	f800283a 	ret

2008d574 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
2008d574:	defffc04 	addi	sp,sp,-16
2008d578:	dfc00315 	stw	ra,12(sp)
2008d57c:	df000215 	stw	fp,8(sp)
2008d580:	df000204 	addi	fp,sp,8
2008d584:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
2008d588:	e0bfff17 	ldw	r2,-4(fp)
2008d58c:	10800017 	ldw	r2,0(r2)
2008d590:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
2008d594:	e0bffe17 	ldw	r2,-8(fp)
2008d598:	10c00a04 	addi	r3,r2,40
2008d59c:	e0bfff17 	ldw	r2,-4(fp)
2008d5a0:	10800217 	ldw	r2,8(r2)
2008d5a4:	1809883a 	mov	r4,r3
2008d5a8:	100b883a 	mov	r5,r2
2008d5ac:	008d9880 	call	2008d988 <altera_avalon_jtag_uart_close>
}
2008d5b0:	e037883a 	mov	sp,fp
2008d5b4:	dfc00117 	ldw	ra,4(sp)
2008d5b8:	df000017 	ldw	fp,0(sp)
2008d5bc:	dec00204 	addi	sp,sp,8
2008d5c0:	f800283a 	ret

2008d5c4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
2008d5c4:	defffa04 	addi	sp,sp,-24
2008d5c8:	dfc00515 	stw	ra,20(sp)
2008d5cc:	df000415 	stw	fp,16(sp)
2008d5d0:	df000404 	addi	fp,sp,16
2008d5d4:	e13ffd15 	stw	r4,-12(fp)
2008d5d8:	e17ffe15 	stw	r5,-8(fp)
2008d5dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
2008d5e0:	e0bffd17 	ldw	r2,-12(fp)
2008d5e4:	10800017 	ldw	r2,0(r2)
2008d5e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
2008d5ec:	e0bffc17 	ldw	r2,-16(fp)
2008d5f0:	10800a04 	addi	r2,r2,40
2008d5f4:	1009883a 	mov	r4,r2
2008d5f8:	e17ffe17 	ldw	r5,-8(fp)
2008d5fc:	e1bfff17 	ldw	r6,-4(fp)
2008d600:	008d9f00 	call	2008d9f0 <altera_avalon_jtag_uart_ioctl>
}
2008d604:	e037883a 	mov	sp,fp
2008d608:	dfc00117 	ldw	ra,4(sp)
2008d60c:	df000017 	ldw	fp,0(sp)
2008d610:	dec00204 	addi	sp,sp,8
2008d614:	f800283a 	ret

2008d618 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
2008d618:	defffa04 	addi	sp,sp,-24
2008d61c:	dfc00515 	stw	ra,20(sp)
2008d620:	df000415 	stw	fp,16(sp)
2008d624:	df000404 	addi	fp,sp,16
2008d628:	e13ffd15 	stw	r4,-12(fp)
2008d62c:	e17ffe15 	stw	r5,-8(fp)
2008d630:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
2008d634:	e0bffd17 	ldw	r2,-12(fp)
2008d638:	00c00044 	movi	r3,1
2008d63c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
2008d640:	e0bffd17 	ldw	r2,-12(fp)
2008d644:	10800017 	ldw	r2,0(r2)
2008d648:	10800104 	addi	r2,r2,4
2008d64c:	1007883a 	mov	r3,r2
2008d650:	e0bffd17 	ldw	r2,-12(fp)
2008d654:	10800817 	ldw	r2,32(r2)
2008d658:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
2008d65c:	e0fffe17 	ldw	r3,-8(fp)
2008d660:	e0bfff17 	ldw	r2,-4(fp)
2008d664:	d8000015 	stw	zero,0(sp)
2008d668:	1809883a 	mov	r4,r3
2008d66c:	100b883a 	mov	r5,r2
2008d670:	01880274 	movhi	r6,8201
2008d674:	31b5b704 	addi	r6,r6,-10532
2008d678:	e1fffd17 	ldw	r7,-12(fp)
2008d67c:	00902d80 	call	200902d8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
2008d680:	e0bffd17 	ldw	r2,-12(fp)
2008d684:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
2008d688:	e0bffd17 	ldw	r2,-12(fp)
2008d68c:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
2008d690:	00800034 	movhi	r2,0
2008d694:	10883004 	addi	r2,r2,8384
2008d698:	10800017 	ldw	r2,0(r2)
2008d69c:	1809883a 	mov	r4,r3
2008d6a0:	100b883a 	mov	r5,r2
2008d6a4:	01880274 	movhi	r6,8201
2008d6a8:	31b63804 	addi	r6,r6,-10016
2008d6ac:	e1fffd17 	ldw	r7,-12(fp)
2008d6b0:	008fd900 	call	2008fd90 <alt_alarm_start>
2008d6b4:	1000040e 	bge	r2,zero,2008d6c8 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
2008d6b8:	e0fffd17 	ldw	r3,-12(fp)
2008d6bc:	00a00034 	movhi	r2,32768
2008d6c0:	10bfffc4 	addi	r2,r2,-1
2008d6c4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
2008d6c8:	e037883a 	mov	sp,fp
2008d6cc:	dfc00117 	ldw	ra,4(sp)
2008d6d0:	df000017 	ldw	fp,0(sp)
2008d6d4:	dec00204 	addi	sp,sp,8
2008d6d8:	f800283a 	ret

2008d6dc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
2008d6dc:	defff804 	addi	sp,sp,-32
2008d6e0:	df000715 	stw	fp,28(sp)
2008d6e4:	df000704 	addi	fp,sp,28
2008d6e8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
2008d6ec:	e0bfff17 	ldw	r2,-4(fp)
2008d6f0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
2008d6f4:	e0bffb17 	ldw	r2,-20(fp)
2008d6f8:	10800017 	ldw	r2,0(r2)
2008d6fc:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
2008d700:	e0bffc17 	ldw	r2,-16(fp)
2008d704:	10800104 	addi	r2,r2,4
2008d708:	10800037 	ldwio	r2,0(r2)
2008d70c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
2008d710:	e0bffd17 	ldw	r2,-12(fp)
2008d714:	1080c00c 	andi	r2,r2,768
2008d718:	1000011e 	bne	r2,zero,2008d720 <altera_avalon_jtag_uart_irq+0x44>
      break;
2008d71c:	00006c06 	br	2008d8d0 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
2008d720:	e0bffd17 	ldw	r2,-12(fp)
2008d724:	1080400c 	andi	r2,r2,256
2008d728:	10003426 	beq	r2,zero,2008d7fc <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
2008d72c:	00800074 	movhi	r2,1
2008d730:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
2008d734:	e0bffb17 	ldw	r2,-20(fp)
2008d738:	10800a17 	ldw	r2,40(r2)
2008d73c:	10800044 	addi	r2,r2,1
2008d740:	1081ffcc 	andi	r2,r2,2047
2008d744:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
2008d748:	e0bffb17 	ldw	r2,-20(fp)
2008d74c:	10c00b17 	ldw	r3,44(r2)
2008d750:	e0bffe17 	ldw	r2,-8(fp)
2008d754:	1880011e 	bne	r3,r2,2008d75c <altera_avalon_jtag_uart_irq+0x80>
          break;
2008d758:	00001606 	br	2008d7b4 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
2008d75c:	e0bffc17 	ldw	r2,-16(fp)
2008d760:	10800037 	ldwio	r2,0(r2)
2008d764:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
2008d768:	e0bff917 	ldw	r2,-28(fp)
2008d76c:	10a0000c 	andi	r2,r2,32768
2008d770:	1000011e 	bne	r2,zero,2008d778 <altera_avalon_jtag_uart_irq+0x9c>
          break;
2008d774:	00000f06 	br	2008d7b4 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
2008d778:	e0bffb17 	ldw	r2,-20(fp)
2008d77c:	10800a17 	ldw	r2,40(r2)
2008d780:	e0fff917 	ldw	r3,-28(fp)
2008d784:	1809883a 	mov	r4,r3
2008d788:	e0fffb17 	ldw	r3,-20(fp)
2008d78c:	1885883a 	add	r2,r3,r2
2008d790:	10800e04 	addi	r2,r2,56
2008d794:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
2008d798:	e0bffb17 	ldw	r2,-20(fp)
2008d79c:	10800a17 	ldw	r2,40(r2)
2008d7a0:	10800044 	addi	r2,r2,1
2008d7a4:	10c1ffcc 	andi	r3,r2,2047
2008d7a8:	e0bffb17 	ldw	r2,-20(fp)
2008d7ac:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
2008d7b0:	003fe006 	br	2008d734 <__flash_rwdata_start+0xffffbc84>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
2008d7b4:	e0bff917 	ldw	r2,-28(fp)
2008d7b8:	10bfffec 	andhi	r2,r2,65535
2008d7bc:	10000f26 	beq	r2,zero,2008d7fc <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
2008d7c0:	e0bffb17 	ldw	r2,-20(fp)
2008d7c4:	10c00817 	ldw	r3,32(r2)
2008d7c8:	00bfff84 	movi	r2,-2
2008d7cc:	1886703a 	and	r3,r3,r2
2008d7d0:	e0bffb17 	ldw	r2,-20(fp)
2008d7d4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
2008d7d8:	e0bffc17 	ldw	r2,-16(fp)
2008d7dc:	10800104 	addi	r2,r2,4
2008d7e0:	1007883a 	mov	r3,r2
2008d7e4:	e0bffb17 	ldw	r2,-20(fp)
2008d7e8:	10800817 	ldw	r2,32(r2)
2008d7ec:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
2008d7f0:	e0bffc17 	ldw	r2,-16(fp)
2008d7f4:	10800104 	addi	r2,r2,4
2008d7f8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
2008d7fc:	e0bffd17 	ldw	r2,-12(fp)
2008d800:	1080800c 	andi	r2,r2,512
2008d804:	10003126 	beq	r2,zero,2008d8cc <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
2008d808:	e0bffd17 	ldw	r2,-12(fp)
2008d80c:	1004d43a 	srli	r2,r2,16
2008d810:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
2008d814:	00001406 	br	2008d868 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
2008d818:	e0bffc17 	ldw	r2,-16(fp)
2008d81c:	e0fffb17 	ldw	r3,-20(fp)
2008d820:	18c00d17 	ldw	r3,52(r3)
2008d824:	e13ffb17 	ldw	r4,-20(fp)
2008d828:	20c7883a 	add	r3,r4,r3
2008d82c:	18c20e04 	addi	r3,r3,2104
2008d830:	18c00003 	ldbu	r3,0(r3)
2008d834:	18c03fcc 	andi	r3,r3,255
2008d838:	18c0201c 	xori	r3,r3,128
2008d83c:	18ffe004 	addi	r3,r3,-128
2008d840:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
2008d844:	e0bffb17 	ldw	r2,-20(fp)
2008d848:	10800d17 	ldw	r2,52(r2)
2008d84c:	10800044 	addi	r2,r2,1
2008d850:	10c1ffcc 	andi	r3,r2,2047
2008d854:	e0bffb17 	ldw	r2,-20(fp)
2008d858:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
2008d85c:	e0bffa17 	ldw	r2,-24(fp)
2008d860:	10bfffc4 	addi	r2,r2,-1
2008d864:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
2008d868:	e0bffa17 	ldw	r2,-24(fp)
2008d86c:	10000526 	beq	r2,zero,2008d884 <altera_avalon_jtag_uart_irq+0x1a8>
2008d870:	e0bffb17 	ldw	r2,-20(fp)
2008d874:	10c00d17 	ldw	r3,52(r2)
2008d878:	e0bffb17 	ldw	r2,-20(fp)
2008d87c:	10800c17 	ldw	r2,48(r2)
2008d880:	18bfe51e 	bne	r3,r2,2008d818 <__flash_rwdata_start+0xffffbd68>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
2008d884:	e0bffa17 	ldw	r2,-24(fp)
2008d888:	10001026 	beq	r2,zero,2008d8cc <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
2008d88c:	e0bffb17 	ldw	r2,-20(fp)
2008d890:	10c00817 	ldw	r3,32(r2)
2008d894:	00bfff44 	movi	r2,-3
2008d898:	1886703a 	and	r3,r3,r2
2008d89c:	e0bffb17 	ldw	r2,-20(fp)
2008d8a0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
2008d8a4:	e0bffb17 	ldw	r2,-20(fp)
2008d8a8:	10800017 	ldw	r2,0(r2)
2008d8ac:	10800104 	addi	r2,r2,4
2008d8b0:	1007883a 	mov	r3,r2
2008d8b4:	e0bffb17 	ldw	r2,-20(fp)
2008d8b8:	10800817 	ldw	r2,32(r2)
2008d8bc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
2008d8c0:	e0bffc17 	ldw	r2,-16(fp)
2008d8c4:	10800104 	addi	r2,r2,4
2008d8c8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
2008d8cc:	003f8c06 	br	2008d700 <__flash_rwdata_start+0xffffbc50>
}
2008d8d0:	e037883a 	mov	sp,fp
2008d8d4:	df000017 	ldw	fp,0(sp)
2008d8d8:	dec00104 	addi	sp,sp,4
2008d8dc:	f800283a 	ret

2008d8e0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
2008d8e0:	defff804 	addi	sp,sp,-32
2008d8e4:	df000715 	stw	fp,28(sp)
2008d8e8:	df000704 	addi	fp,sp,28
2008d8ec:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
2008d8f0:	e0bffb17 	ldw	r2,-20(fp)
2008d8f4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
2008d8f8:	e0bff917 	ldw	r2,-28(fp)
2008d8fc:	10800017 	ldw	r2,0(r2)
2008d900:	10800104 	addi	r2,r2,4
2008d904:	10800037 	ldwio	r2,0(r2)
2008d908:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
2008d90c:	e0bffa17 	ldw	r2,-24(fp)
2008d910:	1081000c 	andi	r2,r2,1024
2008d914:	10000b26 	beq	r2,zero,2008d944 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
2008d918:	e0bff917 	ldw	r2,-28(fp)
2008d91c:	10800017 	ldw	r2,0(r2)
2008d920:	10800104 	addi	r2,r2,4
2008d924:	1007883a 	mov	r3,r2
2008d928:	e0bff917 	ldw	r2,-28(fp)
2008d92c:	10800817 	ldw	r2,32(r2)
2008d930:	10810014 	ori	r2,r2,1024
2008d934:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
2008d938:	e0bff917 	ldw	r2,-28(fp)
2008d93c:	10000915 	stw	zero,36(r2)
2008d940:	00000a06 	br	2008d96c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
2008d944:	e0bff917 	ldw	r2,-28(fp)
2008d948:	10c00917 	ldw	r3,36(r2)
2008d94c:	00a00034 	movhi	r2,32768
2008d950:	10bfff04 	addi	r2,r2,-4
2008d954:	10c00536 	bltu	r2,r3,2008d96c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
2008d958:	e0bff917 	ldw	r2,-28(fp)
2008d95c:	10800917 	ldw	r2,36(r2)
2008d960:	10c00044 	addi	r3,r2,1
2008d964:	e0bff917 	ldw	r2,-28(fp)
2008d968:	10c00915 	stw	r3,36(r2)
2008d96c:	00800034 	movhi	r2,0
2008d970:	10883004 	addi	r2,r2,8384
2008d974:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
2008d978:	e037883a 	mov	sp,fp
2008d97c:	df000017 	ldw	fp,0(sp)
2008d980:	dec00104 	addi	sp,sp,4
2008d984:	f800283a 	ret

2008d988 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
2008d988:	defffd04 	addi	sp,sp,-12
2008d98c:	df000215 	stw	fp,8(sp)
2008d990:	df000204 	addi	fp,sp,8
2008d994:	e13ffe15 	stw	r4,-8(fp)
2008d998:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
2008d99c:	00000506 	br	2008d9b4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
2008d9a0:	e0bfff17 	ldw	r2,-4(fp)
2008d9a4:	1090000c 	andi	r2,r2,16384
2008d9a8:	10000226 	beq	r2,zero,2008d9b4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
2008d9ac:	00bffd44 	movi	r2,-11
2008d9b0:	00000b06 	br	2008d9e0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
2008d9b4:	e0bffe17 	ldw	r2,-8(fp)
2008d9b8:	10c00d17 	ldw	r3,52(r2)
2008d9bc:	e0bffe17 	ldw	r2,-8(fp)
2008d9c0:	10800c17 	ldw	r2,48(r2)
2008d9c4:	18800526 	beq	r3,r2,2008d9dc <altera_avalon_jtag_uart_close+0x54>
2008d9c8:	e0bffe17 	ldw	r2,-8(fp)
2008d9cc:	10c00917 	ldw	r3,36(r2)
2008d9d0:	e0bffe17 	ldw	r2,-8(fp)
2008d9d4:	10800117 	ldw	r2,4(r2)
2008d9d8:	18bff136 	bltu	r3,r2,2008d9a0 <__flash_rwdata_start+0xffffbef0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
2008d9dc:	0005883a 	mov	r2,zero
}
2008d9e0:	e037883a 	mov	sp,fp
2008d9e4:	df000017 	ldw	fp,0(sp)
2008d9e8:	dec00104 	addi	sp,sp,4
2008d9ec:	f800283a 	ret

2008d9f0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
2008d9f0:	defffa04 	addi	sp,sp,-24
2008d9f4:	df000515 	stw	fp,20(sp)
2008d9f8:	df000504 	addi	fp,sp,20
2008d9fc:	e13ffd15 	stw	r4,-12(fp)
2008da00:	e17ffe15 	stw	r5,-8(fp)
2008da04:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
2008da08:	00bff9c4 	movi	r2,-25
2008da0c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
2008da10:	e0bffe17 	ldw	r2,-8(fp)
2008da14:	10da8060 	cmpeqi	r3,r2,27137
2008da18:	1800031e 	bne	r3,zero,2008da28 <altera_avalon_jtag_uart_ioctl+0x38>
2008da1c:	109a80a0 	cmpeqi	r2,r2,27138
2008da20:	1000191e 	bne	r2,zero,2008da88 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
2008da24:	00002806 	br	2008dac8 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
2008da28:	e0bffd17 	ldw	r2,-12(fp)
2008da2c:	10c00117 	ldw	r3,4(r2)
2008da30:	00a00034 	movhi	r2,32768
2008da34:	10bfffc4 	addi	r2,r2,-1
2008da38:	18801226 	beq	r3,r2,2008da84 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
2008da3c:	e0bfff17 	ldw	r2,-4(fp)
2008da40:	10800017 	ldw	r2,0(r2)
2008da44:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
2008da48:	e0bffc17 	ldw	r2,-16(fp)
2008da4c:	10800090 	cmplti	r2,r2,2
2008da50:	1000061e 	bne	r2,zero,2008da6c <altera_avalon_jtag_uart_ioctl+0x7c>
2008da54:	e0fffc17 	ldw	r3,-16(fp)
2008da58:	00a00034 	movhi	r2,32768
2008da5c:	10bfffc4 	addi	r2,r2,-1
2008da60:	18800226 	beq	r3,r2,2008da6c <altera_avalon_jtag_uart_ioctl+0x7c>
2008da64:	e0bffc17 	ldw	r2,-16(fp)
2008da68:	00000206 	br	2008da74 <altera_avalon_jtag_uart_ioctl+0x84>
2008da6c:	00a00034 	movhi	r2,32768
2008da70:	10bfff84 	addi	r2,r2,-2
2008da74:	e0fffd17 	ldw	r3,-12(fp)
2008da78:	18800115 	stw	r2,4(r3)
      rc = 0;
2008da7c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
2008da80:	00001106 	br	2008dac8 <altera_avalon_jtag_uart_ioctl+0xd8>
2008da84:	00001006 	br	2008dac8 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
2008da88:	e0bffd17 	ldw	r2,-12(fp)
2008da8c:	10c00117 	ldw	r3,4(r2)
2008da90:	00a00034 	movhi	r2,32768
2008da94:	10bfffc4 	addi	r2,r2,-1
2008da98:	18800a26 	beq	r3,r2,2008dac4 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
2008da9c:	e0bffd17 	ldw	r2,-12(fp)
2008daa0:	10c00917 	ldw	r3,36(r2)
2008daa4:	e0bffd17 	ldw	r2,-12(fp)
2008daa8:	10800117 	ldw	r2,4(r2)
2008daac:	1885803a 	cmpltu	r2,r3,r2
2008dab0:	10c03fcc 	andi	r3,r2,255
2008dab4:	e0bfff17 	ldw	r2,-4(fp)
2008dab8:	10c00015 	stw	r3,0(r2)
      rc = 0;
2008dabc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
2008dac0:	00000006 	br	2008dac4 <altera_avalon_jtag_uart_ioctl+0xd4>
2008dac4:	0001883a 	nop

  default:
    break;
  }

  return rc;
2008dac8:	e0bffb17 	ldw	r2,-20(fp)
}
2008dacc:	e037883a 	mov	sp,fp
2008dad0:	df000017 	ldw	fp,0(sp)
2008dad4:	dec00104 	addi	sp,sp,4
2008dad8:	f800283a 	ret

2008dadc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
2008dadc:	defff304 	addi	sp,sp,-52
2008dae0:	dfc00c15 	stw	ra,48(sp)
2008dae4:	df000b15 	stw	fp,44(sp)
2008dae8:	df000b04 	addi	fp,sp,44
2008daec:	e13ffc15 	stw	r4,-16(fp)
2008daf0:	e17ffd15 	stw	r5,-12(fp)
2008daf4:	e1bffe15 	stw	r6,-8(fp)
2008daf8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
2008dafc:	e0bffd17 	ldw	r2,-12(fp)
2008db00:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
2008db04:	00004906 	br	2008dc2c <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
2008db08:	e0bffc17 	ldw	r2,-16(fp)
2008db0c:	10800a17 	ldw	r2,40(r2)
2008db10:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
2008db14:	e0bffc17 	ldw	r2,-16(fp)
2008db18:	10800b17 	ldw	r2,44(r2)
2008db1c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
2008db20:	e0fff717 	ldw	r3,-36(fp)
2008db24:	e0bff817 	ldw	r2,-32(fp)
2008db28:	18800536 	bltu	r3,r2,2008db40 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
2008db2c:	e0fff717 	ldw	r3,-36(fp)
2008db30:	e0bff817 	ldw	r2,-32(fp)
2008db34:	1885c83a 	sub	r2,r3,r2
2008db38:	e0bff615 	stw	r2,-40(fp)
2008db3c:	00000406 	br	2008db50 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
2008db40:	00c20004 	movi	r3,2048
2008db44:	e0bff817 	ldw	r2,-32(fp)
2008db48:	1885c83a 	sub	r2,r3,r2
2008db4c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
2008db50:	e0bff617 	ldw	r2,-40(fp)
2008db54:	1000011e 	bne	r2,zero,2008db5c <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
2008db58:	00001d06 	br	2008dbd0 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
2008db5c:	e0fffe17 	ldw	r3,-8(fp)
2008db60:	e0bff617 	ldw	r2,-40(fp)
2008db64:	1880022e 	bgeu	r3,r2,2008db70 <altera_avalon_jtag_uart_read+0x94>
        n = space;
2008db68:	e0bffe17 	ldw	r2,-8(fp)
2008db6c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
2008db70:	e0bff817 	ldw	r2,-32(fp)
2008db74:	10800e04 	addi	r2,r2,56
2008db78:	e0fffc17 	ldw	r3,-16(fp)
2008db7c:	1885883a 	add	r2,r3,r2
2008db80:	e13ff517 	ldw	r4,-44(fp)
2008db84:	100b883a 	mov	r5,r2
2008db88:	e1bff617 	ldw	r6,-40(fp)
2008db8c:	0085cb80 	call	20085cb8 <memcpy>
      ptr   += n;
2008db90:	e0fff517 	ldw	r3,-44(fp)
2008db94:	e0bff617 	ldw	r2,-40(fp)
2008db98:	1885883a 	add	r2,r3,r2
2008db9c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
2008dba0:	e0fffe17 	ldw	r3,-8(fp)
2008dba4:	e0bff617 	ldw	r2,-40(fp)
2008dba8:	1885c83a 	sub	r2,r3,r2
2008dbac:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
2008dbb0:	e0fff817 	ldw	r3,-32(fp)
2008dbb4:	e0bff617 	ldw	r2,-40(fp)
2008dbb8:	1885883a 	add	r2,r3,r2
2008dbbc:	10c1ffcc 	andi	r3,r2,2047
2008dbc0:	e0bffc17 	ldw	r2,-16(fp)
2008dbc4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
2008dbc8:	e0bffe17 	ldw	r2,-8(fp)
2008dbcc:	00bfce16 	blt	zero,r2,2008db08 <__flash_rwdata_start+0xffffc058>

    /* If we read any data then return it */
    if (ptr != buffer)
2008dbd0:	e0fff517 	ldw	r3,-44(fp)
2008dbd4:	e0bffd17 	ldw	r2,-12(fp)
2008dbd8:	18800126 	beq	r3,r2,2008dbe0 <altera_avalon_jtag_uart_read+0x104>
      break;
2008dbdc:	00001506 	br	2008dc34 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
2008dbe0:	e0bfff17 	ldw	r2,-4(fp)
2008dbe4:	1090000c 	andi	r2,r2,16384
2008dbe8:	10000126 	beq	r2,zero,2008dbf0 <altera_avalon_jtag_uart_read+0x114>
      break;
2008dbec:	00001106 	br	2008dc34 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
2008dbf0:	0001883a 	nop
2008dbf4:	e0bffc17 	ldw	r2,-16(fp)
2008dbf8:	10c00a17 	ldw	r3,40(r2)
2008dbfc:	e0bff717 	ldw	r2,-36(fp)
2008dc00:	1880051e 	bne	r3,r2,2008dc18 <altera_avalon_jtag_uart_read+0x13c>
2008dc04:	e0bffc17 	ldw	r2,-16(fp)
2008dc08:	10c00917 	ldw	r3,36(r2)
2008dc0c:	e0bffc17 	ldw	r2,-16(fp)
2008dc10:	10800117 	ldw	r2,4(r2)
2008dc14:	18bff736 	bltu	r3,r2,2008dbf4 <__flash_rwdata_start+0xffffc144>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
2008dc18:	e0bffc17 	ldw	r2,-16(fp)
2008dc1c:	10c00a17 	ldw	r3,40(r2)
2008dc20:	e0bff717 	ldw	r2,-36(fp)
2008dc24:	1880011e 	bne	r3,r2,2008dc2c <altera_avalon_jtag_uart_read+0x150>
      break;
2008dc28:	00000206 	br	2008dc34 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
2008dc2c:	e0bffe17 	ldw	r2,-8(fp)
2008dc30:	00bfb516 	blt	zero,r2,2008db08 <__flash_rwdata_start+0xffffc058>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
2008dc34:	e0fff517 	ldw	r3,-44(fp)
2008dc38:	e0bffd17 	ldw	r2,-12(fp)
2008dc3c:	18801826 	beq	r3,r2,2008dca0 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2008dc40:	0005303a 	rdctl	r2,status
2008dc44:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2008dc48:	e0fffa17 	ldw	r3,-24(fp)
2008dc4c:	00bfff84 	movi	r2,-2
2008dc50:	1884703a 	and	r2,r3,r2
2008dc54:	1001703a 	wrctl	status,r2
  
  return context;
2008dc58:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
2008dc5c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
2008dc60:	e0bffc17 	ldw	r2,-16(fp)
2008dc64:	10800817 	ldw	r2,32(r2)
2008dc68:	10c00054 	ori	r3,r2,1
2008dc6c:	e0bffc17 	ldw	r2,-16(fp)
2008dc70:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
2008dc74:	e0bffc17 	ldw	r2,-16(fp)
2008dc78:	10800017 	ldw	r2,0(r2)
2008dc7c:	10800104 	addi	r2,r2,4
2008dc80:	1007883a 	mov	r3,r2
2008dc84:	e0bffc17 	ldw	r2,-16(fp)
2008dc88:	10800817 	ldw	r2,32(r2)
2008dc8c:	18800035 	stwio	r2,0(r3)
2008dc90:	e0bff917 	ldw	r2,-28(fp)
2008dc94:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2008dc98:	e0bffb17 	ldw	r2,-20(fp)
2008dc9c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
2008dca0:	e0fff517 	ldw	r3,-44(fp)
2008dca4:	e0bffd17 	ldw	r2,-12(fp)
2008dca8:	18800426 	beq	r3,r2,2008dcbc <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
2008dcac:	e0fff517 	ldw	r3,-44(fp)
2008dcb0:	e0bffd17 	ldw	r2,-12(fp)
2008dcb4:	1885c83a 	sub	r2,r3,r2
2008dcb8:	00000606 	br	2008dcd4 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
2008dcbc:	e0bfff17 	ldw	r2,-4(fp)
2008dcc0:	1090000c 	andi	r2,r2,16384
2008dcc4:	10000226 	beq	r2,zero,2008dcd0 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
2008dcc8:	00bffd44 	movi	r2,-11
2008dccc:	00000106 	br	2008dcd4 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
2008dcd0:	00bffec4 	movi	r2,-5
}
2008dcd4:	e037883a 	mov	sp,fp
2008dcd8:	dfc00117 	ldw	ra,4(sp)
2008dcdc:	df000017 	ldw	fp,0(sp)
2008dce0:	dec00204 	addi	sp,sp,8
2008dce4:	f800283a 	ret

2008dce8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
2008dce8:	defff304 	addi	sp,sp,-52
2008dcec:	dfc00c15 	stw	ra,48(sp)
2008dcf0:	df000b15 	stw	fp,44(sp)
2008dcf4:	df000b04 	addi	fp,sp,44
2008dcf8:	e13ffc15 	stw	r4,-16(fp)
2008dcfc:	e17ffd15 	stw	r5,-12(fp)
2008dd00:	e1bffe15 	stw	r6,-8(fp)
2008dd04:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
2008dd08:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
2008dd0c:	e0bffd17 	ldw	r2,-12(fp)
2008dd10:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
2008dd14:	00003806 	br	2008ddf8 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
2008dd18:	e0bffc17 	ldw	r2,-16(fp)
2008dd1c:	10800c17 	ldw	r2,48(r2)
2008dd20:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
2008dd24:	e0bffc17 	ldw	r2,-16(fp)
2008dd28:	10800d17 	ldw	r2,52(r2)
2008dd2c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
2008dd30:	e0fff817 	ldw	r3,-32(fp)
2008dd34:	e0bff517 	ldw	r2,-44(fp)
2008dd38:	1880062e 	bgeu	r3,r2,2008dd54 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
2008dd3c:	e0fff517 	ldw	r3,-44(fp)
2008dd40:	e0bff817 	ldw	r2,-32(fp)
2008dd44:	1885c83a 	sub	r2,r3,r2
2008dd48:	10bfffc4 	addi	r2,r2,-1
2008dd4c:	e0bff615 	stw	r2,-40(fp)
2008dd50:	00000b06 	br	2008dd80 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
2008dd54:	e0bff517 	ldw	r2,-44(fp)
2008dd58:	10000526 	beq	r2,zero,2008dd70 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
2008dd5c:	00c20004 	movi	r3,2048
2008dd60:	e0bff817 	ldw	r2,-32(fp)
2008dd64:	1885c83a 	sub	r2,r3,r2
2008dd68:	e0bff615 	stw	r2,-40(fp)
2008dd6c:	00000406 	br	2008dd80 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
2008dd70:	00c1ffc4 	movi	r3,2047
2008dd74:	e0bff817 	ldw	r2,-32(fp)
2008dd78:	1885c83a 	sub	r2,r3,r2
2008dd7c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
2008dd80:	e0bff617 	ldw	r2,-40(fp)
2008dd84:	1000011e 	bne	r2,zero,2008dd8c <altera_avalon_jtag_uart_write+0xa4>
        break;
2008dd88:	00001d06 	br	2008de00 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
2008dd8c:	e0fffe17 	ldw	r3,-8(fp)
2008dd90:	e0bff617 	ldw	r2,-40(fp)
2008dd94:	1880022e 	bgeu	r3,r2,2008dda0 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
2008dd98:	e0bffe17 	ldw	r2,-8(fp)
2008dd9c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
2008dda0:	e0bff817 	ldw	r2,-32(fp)
2008dda4:	10820e04 	addi	r2,r2,2104
2008dda8:	e0fffc17 	ldw	r3,-16(fp)
2008ddac:	1885883a 	add	r2,r3,r2
2008ddb0:	1009883a 	mov	r4,r2
2008ddb4:	e17ffd17 	ldw	r5,-12(fp)
2008ddb8:	e1bff617 	ldw	r6,-40(fp)
2008ddbc:	0085cb80 	call	20085cb8 <memcpy>
      ptr   += n;
2008ddc0:	e0fffd17 	ldw	r3,-12(fp)
2008ddc4:	e0bff617 	ldw	r2,-40(fp)
2008ddc8:	1885883a 	add	r2,r3,r2
2008ddcc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
2008ddd0:	e0fffe17 	ldw	r3,-8(fp)
2008ddd4:	e0bff617 	ldw	r2,-40(fp)
2008ddd8:	1885c83a 	sub	r2,r3,r2
2008dddc:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
2008dde0:	e0fff817 	ldw	r3,-32(fp)
2008dde4:	e0bff617 	ldw	r2,-40(fp)
2008dde8:	1885883a 	add	r2,r3,r2
2008ddec:	10c1ffcc 	andi	r3,r2,2047
2008ddf0:	e0bffc17 	ldw	r2,-16(fp)
2008ddf4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
2008ddf8:	e0bffe17 	ldw	r2,-8(fp)
2008ddfc:	00bfc616 	blt	zero,r2,2008dd18 <__flash_rwdata_start+0xffffc268>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2008de00:	0005303a 	rdctl	r2,status
2008de04:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2008de08:	e0fffa17 	ldw	r3,-24(fp)
2008de0c:	00bfff84 	movi	r2,-2
2008de10:	1884703a 	and	r2,r3,r2
2008de14:	1001703a 	wrctl	status,r2
  
  return context;
2008de18:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
2008de1c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
2008de20:	e0bffc17 	ldw	r2,-16(fp)
2008de24:	10800817 	ldw	r2,32(r2)
2008de28:	10c00094 	ori	r3,r2,2
2008de2c:	e0bffc17 	ldw	r2,-16(fp)
2008de30:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
2008de34:	e0bffc17 	ldw	r2,-16(fp)
2008de38:	10800017 	ldw	r2,0(r2)
2008de3c:	10800104 	addi	r2,r2,4
2008de40:	1007883a 	mov	r3,r2
2008de44:	e0bffc17 	ldw	r2,-16(fp)
2008de48:	10800817 	ldw	r2,32(r2)
2008de4c:	18800035 	stwio	r2,0(r3)
2008de50:	e0bff917 	ldw	r2,-28(fp)
2008de54:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2008de58:	e0bffb17 	ldw	r2,-20(fp)
2008de5c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
2008de60:	e0bffe17 	ldw	r2,-8(fp)
2008de64:	0080120e 	bge	zero,r2,2008deb0 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
2008de68:	e0bfff17 	ldw	r2,-4(fp)
2008de6c:	1090000c 	andi	r2,r2,16384
2008de70:	10000126 	beq	r2,zero,2008de78 <altera_avalon_jtag_uart_write+0x190>
        break;
2008de74:	00001006 	br	2008deb8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
2008de78:	0001883a 	nop
2008de7c:	e0bffc17 	ldw	r2,-16(fp)
2008de80:	10c00d17 	ldw	r3,52(r2)
2008de84:	e0bff517 	ldw	r2,-44(fp)
2008de88:	1880051e 	bne	r3,r2,2008dea0 <altera_avalon_jtag_uart_write+0x1b8>
2008de8c:	e0bffc17 	ldw	r2,-16(fp)
2008de90:	10c00917 	ldw	r3,36(r2)
2008de94:	e0bffc17 	ldw	r2,-16(fp)
2008de98:	10800117 	ldw	r2,4(r2)
2008de9c:	18bff736 	bltu	r3,r2,2008de7c <__flash_rwdata_start+0xffffc3cc>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
2008dea0:	e0bffc17 	ldw	r2,-16(fp)
2008dea4:	10800917 	ldw	r2,36(r2)
2008dea8:	10000126 	beq	r2,zero,2008deb0 <altera_avalon_jtag_uart_write+0x1c8>
         break;
2008deac:	00000206 	br	2008deb8 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
2008deb0:	e0bffe17 	ldw	r2,-8(fp)
2008deb4:	00bf9716 	blt	zero,r2,2008dd14 <__flash_rwdata_start+0xffffc264>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
2008deb8:	e0fffd17 	ldw	r3,-12(fp)
2008debc:	e0bff717 	ldw	r2,-36(fp)
2008dec0:	18800426 	beq	r3,r2,2008ded4 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
2008dec4:	e0fffd17 	ldw	r3,-12(fp)
2008dec8:	e0bff717 	ldw	r2,-36(fp)
2008decc:	1885c83a 	sub	r2,r3,r2
2008ded0:	00000606 	br	2008deec <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
2008ded4:	e0bfff17 	ldw	r2,-4(fp)
2008ded8:	1090000c 	andi	r2,r2,16384
2008dedc:	10000226 	beq	r2,zero,2008dee8 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
2008dee0:	00bffd44 	movi	r2,-11
2008dee4:	00000106 	br	2008deec <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
2008dee8:	00bffec4 	movi	r2,-5
}
2008deec:	e037883a 	mov	sp,fp
2008def0:	dfc00117 	ldw	ra,4(sp)
2008def4:	df000017 	ldw	fp,0(sp)
2008def8:	dec00204 	addi	sp,sp,8
2008defc:	f800283a 	ret

2008df00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2008df00:	defffe04 	addi	sp,sp,-8
2008df04:	dfc00115 	stw	ra,4(sp)
2008df08:	df000015 	stw	fp,0(sp)
2008df0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2008df10:	00800034 	movhi	r2,0
2008df14:	10881b04 	addi	r2,r2,8300
2008df18:	10800017 	ldw	r2,0(r2)
2008df1c:	10000526 	beq	r2,zero,2008df34 <alt_get_errno+0x34>
2008df20:	00800034 	movhi	r2,0
2008df24:	10881b04 	addi	r2,r2,8300
2008df28:	10800017 	ldw	r2,0(r2)
2008df2c:	103ee83a 	callr	r2
2008df30:	00000206 	br	2008df3c <alt_get_errno+0x3c>
2008df34:	00800034 	movhi	r2,0
2008df38:	10882904 	addi	r2,r2,8356
}
2008df3c:	e037883a 	mov	sp,fp
2008df40:	dfc00117 	ldw	ra,4(sp)
2008df44:	df000017 	ldw	fp,0(sp)
2008df48:	dec00204 	addi	sp,sp,8
2008df4c:	f800283a 	ret

2008df50 <alt_msgdma_write_standard_descriptor>:
 */
static int alt_msgdma_write_standard_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_standard_descriptor *descriptor)
{
2008df50:	defffc04 	addi	sp,sp,-16
2008df54:	df000315 	stw	fp,12(sp)
2008df58:	df000304 	addi	fp,sp,12
2008df5c:	e13ffd15 	stw	r4,-12(fp)
2008df60:	e17ffe15 	stw	r5,-8(fp)
2008df64:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
2008df68:	e0bffd17 	ldw	r2,-12(fp)
2008df6c:	10800037 	ldwio	r2,0(r2)
2008df70:	1080010c 	andi	r2,r2,4
2008df74:	10000226 	beq	r2,zero,2008df80 <alt_msgdma_write_standard_descriptor+0x30>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
		is non-blocking*/
        return -ENOSPC;
2008df78:	00bff904 	movi	r2,-28
2008df7c:	00001506 	br	2008dfd4 <alt_msgdma_write_standard_descriptor+0x84>
    }

	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base, 
2008df80:	e0bfff17 	ldw	r2,-4(fp)
2008df84:	10800017 	ldw	r2,0(r2)
2008df88:	1007883a 	mov	r3,r2
2008df8c:	e0bffe17 	ldw	r2,-8(fp)
2008df90:	10c00035 	stwio	r3,0(r2)
		(alt_u32)descriptor->read_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base, 
2008df94:	e0bffe17 	ldw	r2,-8(fp)
2008df98:	10800104 	addi	r2,r2,4
2008df9c:	e0ffff17 	ldw	r3,-4(fp)
2008dfa0:	18c00117 	ldw	r3,4(r3)
2008dfa4:	10c00035 	stwio	r3,0(r2)
	(	alt_u32)descriptor->write_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base, 
2008dfa8:	e0bffe17 	ldw	r2,-8(fp)
2008dfac:	10800204 	addi	r2,r2,8
2008dfb0:	e0ffff17 	ldw	r3,-4(fp)
2008dfb4:	18c00217 	ldw	r3,8(r3)
2008dfb8:	10c00035 	stwio	r3,0(r2)
		descriptor->transfer_length);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_STANDARD(descriptor_base, 
2008dfbc:	e0bffe17 	ldw	r2,-8(fp)
2008dfc0:	10800304 	addi	r2,r2,12
2008dfc4:	e0ffff17 	ldw	r3,-4(fp)
2008dfc8:	18c00317 	ldw	r3,12(r3)
2008dfcc:	10c00035 	stwio	r3,0(r2)
		descriptor->control);
        return 0;
2008dfd0:	0005883a 	mov	r2,zero
}
2008dfd4:	e037883a 	mov	sp,fp
2008dfd8:	df000017 	ldw	fp,0(sp)
2008dfdc:	dec00104 	addi	sp,sp,4
2008dfe0:	f800283a 	ret

2008dfe4 <alt_msgdma_write_extended_descriptor>:
 */
static int alt_msgdma_write_extended_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_extended_descriptor *descriptor)
{
2008dfe4:	defffc04 	addi	sp,sp,-16
2008dfe8:	df000315 	stw	fp,12(sp)
2008dfec:	df000304 	addi	fp,sp,12
2008dff0:	e13ffd15 	stw	r4,-12(fp)
2008dff4:	e17ffe15 	stw	r5,-8(fp)
2008dff8:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
2008dffc:	e0bffd17 	ldw	r2,-12(fp)
2008e000:	10800037 	ldwio	r2,0(r2)
2008e004:	1080010c 	andi	r2,r2,4
2008e008:	10000226 	beq	r2,zero,2008e014 <alt_msgdma_write_extended_descriptor+0x30>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
	is non-blocking*/
        return -ENOSPC;
2008e00c:	00bff904 	movi	r2,-28
2008e010:	00003b06 	br	2008e100 <alt_msgdma_write_extended_descriptor+0x11c>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(
2008e014:	e0bfff17 	ldw	r2,-4(fp)
2008e018:	10800017 	ldw	r2,0(r2)
2008e01c:	1007883a 	mov	r3,r2
2008e020:	e0bffe17 	ldw	r2,-8(fp)
2008e024:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	(alt_u32)descriptor->read_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(
2008e028:	e0bffe17 	ldw	r2,-8(fp)
2008e02c:	10800104 	addi	r2,r2,4
2008e030:	e0ffff17 	ldw	r3,-4(fp)
2008e034:	18c00117 	ldw	r3,4(r3)
2008e038:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
		(alt_u32)descriptor->write_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(
2008e03c:	e0bffe17 	ldw	r2,-8(fp)
2008e040:	10800204 	addi	r2,r2,8
2008e044:	e0ffff17 	ldw	r3,-4(fp)
2008e048:	18c00217 	ldw	r3,8(r3)
2008e04c:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(
2008e050:	e0bffe17 	ldw	r2,-8(fp)
2008e054:	10800304 	addi	r2,r2,12
2008e058:	e0ffff17 	ldw	r3,-4(fp)
2008e05c:	18c0030b 	ldhu	r3,12(r3)
2008e060:	18ffffcc 	andi	r3,r3,65535
2008e064:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->sequence_number);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(
2008e068:	e0bffe17 	ldw	r2,-8(fp)
2008e06c:	10800384 	addi	r2,r2,14
2008e070:	e0ffff17 	ldw	r3,-4(fp)
2008e074:	18c00383 	ldbu	r3,14(r3)
2008e078:	18c03fcc 	andi	r3,r3,255
2008e07c:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(
2008e080:	e0bffe17 	ldw	r2,-8(fp)
2008e084:	108003c4 	addi	r2,r2,15
2008e088:	e0ffff17 	ldw	r3,-4(fp)
2008e08c:	18c003c3 	ldbu	r3,15(r3)
2008e090:	18c03fcc 	andi	r3,r3,255
2008e094:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(
2008e098:	e0bffe17 	ldw	r2,-8(fp)
2008e09c:	10800404 	addi	r2,r2,16
2008e0a0:	e0ffff17 	ldw	r3,-4(fp)
2008e0a4:	18c0040b 	ldhu	r3,16(r3)
2008e0a8:	18ffffcc 	andi	r3,r3,65535
2008e0ac:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(
2008e0b0:	e0bffe17 	ldw	r2,-8(fp)
2008e0b4:	10800484 	addi	r2,r2,18
2008e0b8:	e0ffff17 	ldw	r3,-4(fp)
2008e0bc:	18c0048b 	ldhu	r3,18(r3)
2008e0c0:	18ffffcc 	andi	r3,r3,65535
2008e0c4:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base, 0);
2008e0c8:	e0bffe17 	ldw	r2,-8(fp)
2008e0cc:	10800504 	addi	r2,r2,20
2008e0d0:	0007883a 	mov	r3,zero
2008e0d4:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base, 0);
2008e0d8:	e0bffe17 	ldw	r2,-8(fp)
2008e0dc:	10800604 	addi	r2,r2,24
2008e0e0:	0007883a 	mov	r3,zero
2008e0e4:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(
2008e0e8:	e0bffe17 	ldw	r2,-8(fp)
2008e0ec:	10800704 	addi	r2,r2,28
2008e0f0:	e0ffff17 	ldw	r3,-4(fp)
2008e0f4:	18c00717 	ldw	r3,28(r3)
2008e0f8:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->control);
    return 0;
2008e0fc:	0005883a 	mov	r2,zero
}
2008e100:	e037883a 	mov	sp,fp
2008e104:	df000017 	ldw	fp,0(sp)
2008e108:	dec00104 	addi	sp,sp,4
2008e10c:	f800283a 	ret

2008e110 <alt_msgdma_irq>:
 * alt_msgdma_irq()
 *
 * Interrupt handler for the Modular Scatter-Gather DMA controller.
 */
static void alt_msgdma_irq(void *context)
{
2008e110:	defff804 	addi	sp,sp,-32
2008e114:	dfc00715 	stw	ra,28(sp)
2008e118:	df000615 	stw	fp,24(sp)
2008e11c:	df000604 	addi	fp,sp,24
2008e120:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev *dev = (alt_msgdma_dev *) context;
2008e124:	e0bfff17 	ldw	r2,-4(fp)
2008e128:	e0bffa15 	stw	r2,-24(fp)
    alt_irq_context cpu_sr;
    alt_u32 temporary_control;

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
2008e12c:	e0bffa17 	ldw	r2,-24(fp)
2008e130:	10801783 	ldbu	r2,94(r2)
2008e134:	10803fcc 	andi	r2,r2,255
2008e138:	10001126 	beq	r2,zero,2008e180 <alt_msgdma_irq+0x70>
    {
        temporary_control = 
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
2008e13c:	e0bffa17 	ldw	r2,-24(fp)
2008e140:	10800617 	ldw	r2,24(r2)
2008e144:	10800037 	ldwio	r2,0(r2)

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
    {
        temporary_control = 
2008e148:	1007883a 	mov	r3,r2
2008e14c:	00bffdc4 	movi	r2,-9
2008e150:	1884703a 	and	r2,r3,r2
2008e154:	e0bffb15 	stw	r2,-20(fp)
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				& ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
2008e158:	e0bffa17 	ldw	r2,-24(fp)
2008e15c:	10800617 	ldw	r2,24(r2)
2008e160:	e0fffb17 	ldw	r3,-20(fp)
2008e164:	10c00035 	stwio	r3,0(r2)
        		temporary_control);
        
        /* clear the IRQ status- W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base,
2008e168:	e0bffa17 	ldw	r2,-24(fp)
2008e16c:	10800617 	ldw	r2,24(r2)
2008e170:	10800404 	addi	r2,r2,16
2008e174:	00c00044 	movi	r3,1
2008e178:	10c00035 	stwio	r3,0(r2)
2008e17c:	00001106 	br	2008e1c4 <alt_msgdma_irq+0xb4>
        		ALT_MSGDMA_PREFETCHER_STATUS_IRQ_SET_MASK);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
2008e180:	e0bffa17 	ldw	r2,-24(fp)
2008e184:	10800317 	ldw	r2,12(r2)
2008e188:	10800104 	addi	r2,r2,4
2008e18c:	10800037 	ldwio	r2,0(r2)
2008e190:	1007883a 	mov	r3,r2
2008e194:	00bffbc4 	movi	r2,-17
2008e198:	1884703a 	and	r2,r3,r2
2008e19c:	e0bffb15 	stw	r2,-20(fp)
    			& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
2008e1a0:	e0bffa17 	ldw	r2,-24(fp)
2008e1a4:	10800317 	ldw	r2,12(r2)
2008e1a8:	10800104 	addi	r2,r2,4
2008e1ac:	e0fffb17 	ldw	r3,-20(fp)
2008e1b0:	10c00035 	stwio	r3,0(r2)
    	/* clear the IRQ status */
    	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
2008e1b4:	e0bffa17 	ldw	r2,-24(fp)
2008e1b8:	10800317 	ldw	r2,12(r2)
2008e1bc:	00c08004 	movi	r3,512
2008e1c0:	10c00035 	stwio	r3,0(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
2008e1c4:	e0bffa17 	ldw	r2,-24(fp)
2008e1c8:	10800b17 	ldw	r2,44(r2)
2008e1cc:	10001226 	beq	r2,zero,2008e218 <alt_msgdma_irq+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2008e1d0:	0005303a 	rdctl	r2,status
2008e1d4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2008e1d8:	e0fffd17 	ldw	r3,-12(fp)
2008e1dc:	00bfff84 	movi	r2,-2
2008e1e0:	1884703a 	and	r2,r3,r2
2008e1e4:	1001703a 	wrctl	status,r2
  
  return context;
2008e1e8:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
2008e1ec:	e0bffc15 	stw	r2,-16(fp)
        dev->callback (dev->callback_context);
2008e1f0:	e0bffa17 	ldw	r2,-24(fp)
2008e1f4:	10800b17 	ldw	r2,44(r2)
2008e1f8:	e0fffa17 	ldw	r3,-24(fp)
2008e1fc:	18c00c17 	ldw	r3,48(r3)
2008e200:	1809883a 	mov	r4,r3
2008e204:	103ee83a 	callr	r2
2008e208:	e0bffc17 	ldw	r2,-16(fp)
2008e20c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2008e210:	e0bffe17 	ldw	r2,-8(fp)
2008e214:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
2008e218:	e0bffa17 	ldw	r2,-24(fp)
2008e21c:	10801783 	ldbu	r2,94(r2)
2008e220:	10803fcc 	andi	r2,r2,255
2008e224:	10000a26 	beq	r2,zero,2008e250 <alt_msgdma_irq+0x140>
    {
    	temporary_control = 
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
2008e228:	e0bffa17 	ldw	r2,-24(fp)
2008e22c:	10800617 	ldw	r2,24(r2)
2008e230:	10800037 	ldwio	r2,0(r2)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
2008e234:	10800214 	ori	r2,r2,8
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
    {
    	temporary_control = 
2008e238:	e0bffb15 	stw	r2,-20(fp)
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
    	
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
2008e23c:	e0bffa17 	ldw	r2,-24(fp)
2008e240:	10800617 	ldw	r2,24(r2)
2008e244:	e0fffb17 	ldw	r3,-20(fp)
2008e248:	10c00035 	stwio	r3,0(r2)
2008e24c:	00000b06 	br	2008e27c <alt_msgdma_irq+0x16c>
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
2008e250:	e0bffa17 	ldw	r2,-24(fp)
2008e254:	10800317 	ldw	r2,12(r2)
2008e258:	10800104 	addi	r2,r2,4
2008e25c:	10800037 	ldwio	r2,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
2008e260:	10800414 	ori	r2,r2,16
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
2008e264:	e0bffb15 	stw	r2,-20(fp)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
2008e268:	e0bffa17 	ldw	r2,-24(fp)
2008e26c:	10800317 	ldw	r2,12(r2)
2008e270:	10800104 	addi	r2,r2,4
2008e274:	e0fffb17 	ldw	r3,-20(fp)
2008e278:	10c00035 	stwio	r3,0(r2)
    }

    return;
2008e27c:	0001883a 	nop
}
2008e280:	e037883a 	mov	sp,fp
2008e284:	dfc00117 	ldw	ra,4(sp)
2008e288:	df000017 	ldw	fp,0(sp)
2008e28c:	dec00204 	addi	sp,sp,8
2008e290:	f800283a 	ret

2008e294 <alt_msgdma_construct_standard_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
2008e294:	defffb04 	addi	sp,sp,-20
2008e298:	df000415 	stw	fp,16(sp)
2008e29c:	df000404 	addi	fp,sp,16
2008e2a0:	e13ffc15 	stw	r4,-16(fp)
2008e2a4:	e17ffd15 	stw	r5,-12(fp)
2008e2a8:	e1bffe15 	stw	r6,-8(fp)
2008e2ac:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
2008e2b0:	e0bffc17 	ldw	r2,-16(fp)
2008e2b4:	10c01217 	ldw	r3,72(r2)
2008e2b8:	e0800117 	ldw	r2,4(fp)
2008e2bc:	18800436 	bltu	r3,r2,2008e2d0 <alt_msgdma_construct_standard_descriptor+0x3c>
       dev->enhanced_features != 0
2008e2c0:	e0bffc17 	ldw	r2,-16(fp)
2008e2c4:	10801703 	ldbu	r2,92(r2)
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
2008e2c8:	10803fcc 	andi	r2,r2,255
2008e2cc:	10000226 	beq	r2,zero,2008e2d8 <alt_msgdma_construct_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
2008e2d0:	00bffa84 	movi	r2,-22
2008e2d4:	00000e06 	br	2008e310 <alt_msgdma_construct_standard_descriptor+0x7c>
    }
    descriptor->read_address = read_address;
2008e2d8:	e0bffd17 	ldw	r2,-12(fp)
2008e2dc:	e0fffe17 	ldw	r3,-8(fp)
2008e2e0:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
2008e2e4:	e0bffd17 	ldw	r2,-12(fp)
2008e2e8:	e0ffff17 	ldw	r3,-4(fp)
2008e2ec:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
2008e2f0:	e0bffd17 	ldw	r2,-12(fp)
2008e2f4:	e0c00117 	ldw	r3,4(fp)
2008e2f8:	10c00215 	stw	r3,8(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
2008e2fc:	e0800217 	ldw	r2,8(fp)
2008e300:	10e00034 	orhi	r3,r2,32768
2008e304:	e0bffd17 	ldw	r2,-12(fp)
2008e308:	10c00315 	stw	r3,12(r2)
    
    return 0;
2008e30c:	0005883a 	mov	r2,zero
}
2008e310:	e037883a 	mov	sp,fp
2008e314:	df000017 	ldw	fp,0(sp)
2008e318:	dec00104 	addi	sp,sp,4
2008e31c:	f800283a 	ret

2008e320 <alt_msgdma_construct_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
2008e320:	defff604 	addi	sp,sp,-40
2008e324:	df000915 	stw	fp,36(sp)
2008e328:	df000904 	addi	fp,sp,36
2008e32c:	e13ff715 	stw	r4,-36(fp)
2008e330:	e17ff815 	stw	r5,-32(fp)
2008e334:	e1bff915 	stw	r6,-28(fp)
2008e338:	e1fffa15 	stw	r7,-24(fp)
2008e33c:	e1800317 	ldw	r6,12(fp)
2008e340:	e1400417 	ldw	r5,16(fp)
2008e344:	e1000517 	ldw	r4,20(fp)
2008e348:	e0c00617 	ldw	r3,24(fp)
2008e34c:	e0800717 	ldw	r2,28(fp)
2008e350:	e1bffb0d 	sth	r6,-20(fp)
2008e354:	e17ffc05 	stb	r5,-16(fp)
2008e358:	e13ffd05 	stb	r4,-12(fp)
2008e35c:	e0fffe0d 	sth	r3,-8(fp)
2008e360:	e0bfff0d 	sth	r2,-4(fp)
    if(dev->max_byte < length ||
2008e364:	e0bff717 	ldw	r2,-36(fp)
2008e368:	10c01217 	ldw	r3,72(r2)
2008e36c:	e0800117 	ldw	r2,4(fp)
2008e370:	18801936 	bltu	r3,r2,2008e3d8 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
2008e374:	e13ff717 	ldw	r4,-36(fp)
2008e378:	20801317 	ldw	r2,76(r4)
2008e37c:	20c01417 	ldw	r3,80(r4)
2008e380:	e13ffe0b 	ldhu	r4,-8(fp)
2008e384:	213fffcc 	andi	r4,r4,65535
2008e388:	2015883a 	mov	r10,r4
2008e38c:	0017883a 	mov	r11,zero
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
2008e390:	1ac01136 	bltu	r3,r11,2008e3d8 <alt_msgdma_construct_extended_descriptor+0xb8>
2008e394:	58c0011e 	bne	r11,r3,2008e39c <alt_msgdma_construct_extended_descriptor+0x7c>
2008e398:	12800f36 	bltu	r2,r10,2008e3d8 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
2008e39c:	e13ff717 	ldw	r4,-36(fp)
2008e3a0:	20801317 	ldw	r2,76(r4)
2008e3a4:	20c01417 	ldw	r3,80(r4)
2008e3a8:	e13fff0b 	ldhu	r4,-4(fp)
2008e3ac:	213fffcc 	andi	r4,r4,65535
2008e3b0:	2011883a 	mov	r8,r4
2008e3b4:	0013883a 	mov	r9,zero
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
2008e3b8:	1a400736 	bltu	r3,r9,2008e3d8 <alt_msgdma_construct_extended_descriptor+0xb8>
2008e3bc:	48c0011e 	bne	r9,r3,2008e3c4 <alt_msgdma_construct_extended_descriptor+0xa4>
2008e3c0:	12000536 	bltu	r2,r8,2008e3d8 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
2008e3c4:	e0bff717 	ldw	r2,-36(fp)
2008e3c8:	10801703 	ldbu	r2,92(r2)
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
2008e3cc:	10803fcc 	andi	r2,r2,255
2008e3d0:	10800060 	cmpeqi	r2,r2,1
2008e3d4:	1000021e 	bne	r2,zero,2008e3e0 <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
2008e3d8:	00bffa84 	movi	r2,-22
2008e3dc:	00002106 	br	2008e464 <alt_msgdma_construct_extended_descriptor+0x144>
    }
    
    descriptor->read_address_low = read_address;
2008e3e0:	e0bff817 	ldw	r2,-32(fp)
2008e3e4:	e0fff917 	ldw	r3,-28(fp)
2008e3e8:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_low = write_address;
2008e3ec:	e0bff817 	ldw	r2,-32(fp)
2008e3f0:	e0fffa17 	ldw	r3,-24(fp)
2008e3f4:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
2008e3f8:	e0bff817 	ldw	r2,-32(fp)
2008e3fc:	e0c00117 	ldw	r3,4(fp)
2008e400:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
2008e404:	e0bff817 	ldw	r2,-32(fp)
2008e408:	e0fffb0b 	ldhu	r3,-20(fp)
2008e40c:	10c0030d 	sth	r3,12(r2)
    descriptor->read_burst_count = read_burst_count;
2008e410:	e0bff817 	ldw	r2,-32(fp)
2008e414:	e0fffc03 	ldbu	r3,-16(fp)
2008e418:	10c00385 	stb	r3,14(r2)
    descriptor->write_burst_count = write_burst_count;
2008e41c:	e0bff817 	ldw	r2,-32(fp)
2008e420:	e0fffd03 	ldbu	r3,-12(fp)
2008e424:	10c003c5 	stb	r3,15(r2)
    descriptor->read_stride = read_stride;
2008e428:	e0bff817 	ldw	r2,-32(fp)
2008e42c:	e0fffe0b 	ldhu	r3,-8(fp)
2008e430:	10c0040d 	sth	r3,16(r2)
    descriptor->write_stride = write_stride;
2008e434:	e0bff817 	ldw	r2,-32(fp)
2008e438:	e0ffff0b 	ldhu	r3,-4(fp)
2008e43c:	10c0048d 	sth	r3,18(r2)
    descriptor->read_address_high = NULL;
2008e440:	e0bff817 	ldw	r2,-32(fp)
2008e444:	10000515 	stw	zero,20(r2)
    descriptor->write_address_high = NULL;
2008e448:	e0bff817 	ldw	r2,-32(fp)
2008e44c:	10000615 	stw	zero,24(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
2008e450:	e0800217 	ldw	r2,8(fp)
2008e454:	10e00034 	orhi	r3,r2,32768
2008e458:	e0bff817 	ldw	r2,-32(fp)
2008e45c:	10c00715 	stw	r3,28(r2)

  return 0 ;
2008e460:	0005883a 	mov	r2,zero

}
2008e464:	e037883a 	mov	sp,fp
2008e468:	df000017 	ldw	fp,0(sp)
2008e46c:	dec00104 	addi	sp,sp,4
2008e470:	f800283a 	ret

2008e474 <alt_msgdma_descriptor_async_transfer>:
 */
static int alt_msgdma_descriptor_async_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
2008e474:	defff004 	addi	sp,sp,-64
2008e478:	dfc00f15 	stw	ra,60(sp)
2008e47c:	df000e15 	stw	fp,56(sp)
2008e480:	df000e04 	addi	fp,sp,56
2008e484:	e13ffd15 	stw	r4,-12(fp)
2008e488:	e17ffe15 	stw	r5,-8(fp)
2008e48c:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control = 0;
2008e490:	e03ff315 	stw	zero,-52(fp)
    alt_irq_context context = 0;
2008e494:	e03ff415 	stw	zero,-48(fp)
    alt_u16 counter = 0;
2008e498:	e03ff20d 	sth	zero,-56(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
2008e49c:	e0bffd17 	ldw	r2,-12(fp)
2008e4a0:	10800317 	ldw	r2,12(r2)
2008e4a4:	10800204 	addi	r2,r2,8
2008e4a8:	10800037 	ldwio	r2,0(r2)
	alt_msgdma_extended_descriptor *extended_desc)
{
    alt_u32 control = 0;
    alt_irq_context context = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
2008e4ac:	10bfffcc 	andi	r2,r2,65535
2008e4b0:	e0bff515 	stw	r2,-44(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
2008e4b4:	e0bffd17 	ldw	r2,-12(fp)
2008e4b8:	10800317 	ldw	r2,12(r2)
2008e4bc:	10800204 	addi	r2,r2,8
2008e4c0:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
2008e4c4:	1004d43a 	srli	r2,r2,16
2008e4c8:	e0bff615 	stw	r2,-40(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
2008e4cc:	e0bffd17 	ldw	r2,-12(fp)
2008e4d0:	10800917 	ldw	r2,36(r2)
2008e4d4:	e0fff617 	ldw	r3,-40(fp)
2008e4d8:	1880042e 	bgeu	r3,r2,2008e4ec <alt_msgdma_descriptor_async_transfer+0x78>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
2008e4dc:	e0bffd17 	ldw	r2,-12(fp)
2008e4e0:	10800917 	ldw	r2,36(r2)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
2008e4e4:	e0fff517 	ldw	r3,-44(fp)
2008e4e8:	18800236 	bltu	r3,r2,2008e4f4 <alt_msgdma_descriptor_async_transfer+0x80>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
	{
		/*at least one write or read FIFO descriptor buffer is full,
		returning so that this function is non-blocking*/
		return -ENOSPC;
2008e4ec:	00bff904 	movi	r2,-28
2008e4f0:	00008f06 	br	2008e730 <alt_msgdma_descriptor_async_transfer+0x2bc>
	ALT_SEM_PEND (dev->regs_lock, 0);
	
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	read or write masters  */
	/* stop issuing more descriptors */
	control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
2008e4f4:	00800804 	movi	r2,32
2008e4f8:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2008e4fc:	0005303a 	rdctl	r2,status
2008e500:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2008e504:	e0fff717 	ldw	r3,-36(fp)
2008e508:	00bfff84 	movi	r2,-2
2008e50c:	1884703a 	and	r2,r3,r2
2008e510:	1001703a 	wrctl	status,r2
  
  return context;
2008e514:	e0bff717 	ldw	r2,-36(fp)
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
2008e518:	e0bff415 	stw	r2,-48(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
2008e51c:	e0bffd17 	ldw	r2,-12(fp)
2008e520:	10800317 	ldw	r2,12(r2)
2008e524:	10800104 	addi	r2,r2,4
2008e528:	e0fff317 	ldw	r3,-52(fp)
2008e52c:	10c00035 	stwio	r3,0(r2)
	/*
	* Clear any (previous) status register information
	* that might occlude our error checking later.
	*/
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
2008e530:	e0bffd17 	ldw	r2,-12(fp)
2008e534:	10800317 	ldw	r2,12(r2)
2008e538:	e0fffd17 	ldw	r3,-12(fp)
2008e53c:	18c00317 	ldw	r3,12(r3)
2008e540:	18c00037 	ldwio	r3,0(r3)
2008e544:	10c00035 	stwio	r3,0(r2)
2008e548:	e0bff417 	ldw	r2,-48(fp)
2008e54c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2008e550:	e0bff817 	ldw	r2,-32(fp)
2008e554:	1001703a 	wrctl	status,r2
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
2008e558:	e0bffe17 	ldw	r2,-8(fp)
2008e55c:	10001a26 	beq	r2,zero,2008e5c8 <alt_msgdma_descriptor_async_transfer+0x154>
2008e560:	e0bfff17 	ldw	r2,-4(fp)
2008e564:	1000181e 	bne	r2,zero,2008e5c8 <alt_msgdma_descriptor_async_transfer+0x154>
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
2008e568:	00000d06 	br	2008e5a0 <alt_msgdma_descriptor_async_transfer+0x12c>
		dev->csr_base, dev->descriptor_base, standard_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
2008e56c:	01000044 	movi	r4,1
2008e570:	008fed00 	call	2008fed0 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
2008e574:	e0bff20b 	ldhu	r2,-56(fp)
2008e578:	1084e230 	cmpltui	r2,r2,5000
2008e57c:	1000051e 	bne	r2,zero,2008e594 <alt_msgdma_descriptor_async_transfer+0x120>
            {
                alt_printf("time out after 5 msec while waiting" 
2008e580:	01000034 	movhi	r4,0
2008e584:	2100d104 	addi	r4,r4,836
2008e588:	00909540 	call	20090954 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
2008e58c:	00bff084 	movi	r2,-62
2008e590:	00006706 	br	2008e730 <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
2008e594:	e0bff20b 	ldhu	r2,-56(fp)
2008e598:	10800044 	addi	r2,r2,1
2008e59c:	e0bff20d 	sth	r2,-56(fp)

    if (NULL != standard_desc && NULL == extended_desc)
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
2008e5a0:	e0bffd17 	ldw	r2,-12(fp)
2008e5a4:	10c00317 	ldw	r3,12(r2)
2008e5a8:	e0bffd17 	ldw	r2,-12(fp)
2008e5ac:	10800417 	ldw	r2,16(r2)
2008e5b0:	1809883a 	mov	r4,r3
2008e5b4:	100b883a 	mov	r5,r2
2008e5b8:	e1bffe17 	ldw	r6,-8(fp)
2008e5bc:	008df500 	call	2008df50 <alt_msgdma_write_standard_descriptor>
2008e5c0:	103fea1e 	bne	r2,zero,2008e56c <__flash_rwdata_start+0xffffcabc>
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
2008e5c4:	00001f06 	br	2008e644 <alt_msgdma_descriptor_async_transfer+0x1d0>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
2008e5c8:	e0bffe17 	ldw	r2,-8(fp)
2008e5cc:	10001b1e 	bne	r2,zero,2008e63c <alt_msgdma_descriptor_async_transfer+0x1c8>
2008e5d0:	e0bfff17 	ldw	r2,-4(fp)
2008e5d4:	10001926 	beq	r2,zero,2008e63c <alt_msgdma_descriptor_async_transfer+0x1c8>
    {
        counter = 0; /* reset counter */
2008e5d8:	e03ff20d 	sth	zero,-56(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
2008e5dc:	00000d06 	br	2008e614 <alt_msgdma_descriptor_async_transfer+0x1a0>
		dev->csr_base, 
		dev->descriptor_base, 
		extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
2008e5e0:	01000044 	movi	r4,1
2008e5e4:	008fed00 	call	2008fed0 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
2008e5e8:	e0bff20b 	ldhu	r2,-56(fp)
2008e5ec:	1084e230 	cmpltui	r2,r2,5000
2008e5f0:	1000051e 	bne	r2,zero,2008e608 <alt_msgdma_descriptor_async_transfer+0x194>
            {
                alt_printf("time out after 5 msec while waiting free FIFO buffer" 
2008e5f4:	01000034 	movhi	r4,0
2008e5f8:	2100e704 	addi	r4,r4,924
2008e5fc:	00909540 	call	20090954 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
2008e600:	00bff084 	movi	r2,-62
2008e604:	00004a06 	br	2008e730 <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
2008e608:	e0bff20b 	ldhu	r2,-56(fp)
2008e60c:	10800044 	addi	r2,r2,1
2008e610:	e0bff20d 	sth	r2,-56(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
2008e614:	e0bffd17 	ldw	r2,-12(fp)
2008e618:	10c00317 	ldw	r3,12(r2)
2008e61c:	e0bffd17 	ldw	r2,-12(fp)
2008e620:	10800417 	ldw	r2,16(r2)
2008e624:	1809883a 	mov	r4,r3
2008e628:	100b883a 	mov	r5,r2
2008e62c:	e1bfff17 	ldw	r6,-4(fp)
2008e630:	008dfe40 	call	2008dfe4 <alt_msgdma_write_extended_descriptor>
2008e634:	103fea1e 	bne	r2,zero,2008e5e0 <__flash_rwdata_start+0xffffcb30>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
2008e638:	00000206 	br	2008e644 <alt_msgdma_descriptor_async_transfer+0x1d0>
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
2008e63c:	00bfffc4 	movi	r2,-1
2008e640:	00003b06 	br	2008e730 <alt_msgdma_descriptor_async_transfer+0x2bc>
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
2008e644:	e0bffd17 	ldw	r2,-12(fp)
2008e648:	10800b17 	ldw	r2,44(r2)
2008e64c:	10001c26 	beq	r2,zero,2008e6c0 <alt_msgdma_descriptor_async_transfer+0x24c>
    {

        control |= (dev->control |
2008e650:	e0bffd17 	ldw	r2,-12(fp)
2008e654:	10c00d17 	ldw	r3,52(r2)
2008e658:	e0bff317 	ldw	r2,-52(fp)
2008e65c:	1884b03a 	or	r2,r3,r2
2008e660:	10800514 	ori	r2,r2,20
2008e664:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
2008e668:	e0fff317 	ldw	r3,-52(fp)
2008e66c:	00bff7c4 	movi	r2,-33
2008e670:	1884703a 	and	r2,r3,r2
2008e674:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2008e678:	0005303a 	rdctl	r2,status
2008e67c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2008e680:	e0fff917 	ldw	r3,-28(fp)
2008e684:	00bfff84 	movi	r2,-2
2008e688:	1884703a 	and	r2,r3,r2
2008e68c:	1001703a 	wrctl	status,r2
  
  return context;
2008e690:	e0bff917 	ldw	r2,-28(fp)
    /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
2008e694:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
2008e698:	e0bffd17 	ldw	r2,-12(fp)
2008e69c:	10800317 	ldw	r2,12(r2)
2008e6a0:	10800104 	addi	r2,r2,4
2008e6a4:	e0fff317 	ldw	r3,-52(fp)
2008e6a8:	10c00035 	stwio	r3,0(r2)
2008e6ac:	e0bff417 	ldw	r2,-48(fp)
2008e6b0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2008e6b4:	e0bffa17 	ldw	r2,-24(fp)
2008e6b8:	1001703a 	wrctl	status,r2
2008e6bc:	00001b06 	br	2008e72c <alt_msgdma_descriptor_async_transfer+0x2b8>
    *   - Stop on an error with any particular descriptor
    *   - Disable interrupt generation
    */
    else
    {
        control |= (dev->control |
2008e6c0:	e0bffd17 	ldw	r2,-12(fp)
2008e6c4:	10c00d17 	ldw	r3,52(r2)
2008e6c8:	e0bff317 	ldw	r2,-52(fp)
2008e6cc:	1884b03a 	or	r2,r3,r2
2008e6d0:	10800114 	ori	r2,r2,4
2008e6d4:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
2008e6d8:	e0fff317 	ldw	r3,-52(fp)
2008e6dc:	00bff3c4 	movi	r2,-49
2008e6e0:	1884703a 	and	r2,r3,r2
2008e6e4:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2008e6e8:	0005303a 	rdctl	r2,status
2008e6ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2008e6f0:	e0fffb17 	ldw	r3,-20(fp)
2008e6f4:	00bfff84 	movi	r2,-2
2008e6f8:	1884703a 	and	r2,r3,r2
2008e6fc:	1001703a 	wrctl	status,r2
  
  return context;
2008e700:	e0bffb17 	ldw	r2,-20(fp)
                   (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all();
2008e704:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
2008e708:	e0bffd17 	ldw	r2,-12(fp)
2008e70c:	10800317 	ldw	r2,12(r2)
2008e710:	10800104 	addi	r2,r2,4
2008e714:	e0fff317 	ldw	r3,-52(fp)
2008e718:	10c00035 	stwio	r3,0(r2)
2008e71c:	e0bff417 	ldw	r2,-48(fp)
2008e720:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2008e724:	e0bffc17 	ldw	r2,-16(fp)
2008e728:	1001703a 	wrctl	status,r2
	 * Now that access to the registers is complete, release the registers
     * semaphore so that other threads can access the registers.
     */
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
2008e72c:	0005883a 	mov	r2,zero
}
2008e730:	e037883a 	mov	sp,fp
2008e734:	dfc00117 	ldw	ra,4(sp)
2008e738:	df000017 	ldw	fp,0(sp)
2008e73c:	dec00204 	addi	sp,sp,8
2008e740:	f800283a 	ret

2008e744 <alt_msgdma_descriptor_sync_transfer>:
 */
static int alt_msgdma_descriptor_sync_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
2008e744:	defff004 	addi	sp,sp,-64
2008e748:	dfc00f15 	stw	ra,60(sp)
2008e74c:	df000e15 	stw	fp,56(sp)
2008e750:	df000e04 	addi	fp,sp,56
2008e754:	e13ffd15 	stw	r4,-12(fp)
2008e758:	e17ffe15 	stw	r5,-8(fp)
2008e75c:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control=0;
2008e760:	e03ff615 	stw	zero,-40(fp)
    alt_irq_context context=0;
2008e764:	e03ff715 	stw	zero,-36(fp)
    alt_u32 csr_status = 0;
2008e768:	e03ff215 	stw	zero,-56(fp)
    alt_u16 counter = 0;
2008e76c:	e03ff30d 	sth	zero,-52(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
2008e770:	e0bffd17 	ldw	r2,-12(fp)
2008e774:	10800317 	ldw	r2,12(r2)
2008e778:	10800204 	addi	r2,r2,8
2008e77c:	10800037 	ldwio	r2,0(r2)
{
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
2008e780:	10bfffcc 	andi	r2,r2,65535
2008e784:	e0bff415 	stw	r2,-48(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
2008e788:	e0bffd17 	ldw	r2,-12(fp)
2008e78c:	10800317 	ldw	r2,12(r2)
2008e790:	10800204 	addi	r2,r2,8
2008e794:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
2008e798:	1004d43a 	srli	r2,r2,16
2008e79c:	e0bff515 	stw	r2,-44(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
    alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK | 
2008e7a0:	00807804 	movi	r2,480
2008e7a4:	e0bff815 	stw	r2,-32(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
2008e7a8:	00001906 	br	2008e810 <alt_msgdma_descriptor_sync_transfer+0xcc>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
2008e7ac:	01000044 	movi	r4,1
2008e7b0:	008fed00 	call	2008fed0 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
2008e7b4:	e0bff30b 	ldhu	r2,-52(fp)
2008e7b8:	1084e230 	cmpltui	r2,r2,5000
2008e7bc:	1000051e 	bne	r2,zero,2008e7d4 <alt_msgdma_descriptor_sync_transfer+0x90>
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
2008e7c0:	01000034 	movhi	r4,0
2008e7c4:	2100fd04 	addi	r4,r4,1012
2008e7c8:	00909540 	call	20090954 <alt_printf>
				" for storing descriptor\n");
            return -ETIME;
2008e7cc:	00bff084 	movi	r2,-62
2008e7d0:	0000b506 	br	2008eaa8 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;  
2008e7d4:	e0bff30b 	ldhu	r2,-52(fp)
2008e7d8:	10800044 	addi	r2,r2,1
2008e7dc:	e0bff30d 	sth	r2,-52(fp)
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
2008e7e0:	e0bffd17 	ldw	r2,-12(fp)
2008e7e4:	10800317 	ldw	r2,12(r2)
2008e7e8:	10800204 	addi	r2,r2,8
2008e7ec:	10800037 	ldwio	r2,0(r2)
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
				" for storing descriptor\n");
            return -ETIME;
        }
        counter++;  
        fifo_read_fill_level = (
2008e7f0:	10bfffcc 	andi	r2,r2,65535
2008e7f4:	e0bff415 	stw	r2,-48(fp)
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
2008e7f8:	e0bffd17 	ldw	r2,-12(fp)
2008e7fc:	10800317 	ldw	r2,12(r2)
2008e800:	10800204 	addi	r2,r2,8
2008e804:	10800037 	ldwio	r2,0(r2)
        counter++;  
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
2008e808:	1004d43a 	srli	r2,r2,16
2008e80c:	e0bff515 	stw	r2,-44(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
2008e810:	e0bffd17 	ldw	r2,-12(fp)
2008e814:	10800917 	ldw	r2,36(r2)
2008e818:	e0fff517 	ldw	r3,-44(fp)
2008e81c:	18bfe32e 	bgeu	r3,r2,2008e7ac <__flash_rwdata_start+0xffffccfc>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
2008e820:	e0bffd17 	ldw	r2,-12(fp)
2008e824:	10800917 	ldw	r2,36(r2)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
2008e828:	e0fff417 	ldw	r3,-48(fp)
2008e82c:	18bfdf2e 	bgeu	r3,r2,2008e7ac <__flash_rwdata_start+0xffffccfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2008e830:	0005303a 	rdctl	r2,status
2008e834:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2008e838:	e0fff917 	ldw	r3,-28(fp)
2008e83c:	00bfff84 	movi	r2,-2
2008e840:	1884703a 	and	r2,r3,r2
2008e844:	1001703a 	wrctl	status,r2
  
  return context;
2008e848:	e0bff917 	ldw	r2,-28(fp)
	ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
2008e84c:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
2008e850:	e0bffd17 	ldw	r2,-12(fp)
2008e854:	10800317 	ldw	r2,12(r2)
2008e858:	10800104 	addi	r2,r2,4
2008e85c:	00c00804 	movi	r3,32
2008e860:	10c00035 	stwio	r3,0(r2)
        ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
2008e864:	e0bffd17 	ldw	r2,-12(fp)
2008e868:	10800317 	ldw	r2,12(r2)
2008e86c:	e0fffd17 	ldw	r3,-12(fp)
2008e870:	18c00317 	ldw	r3,12(r3)
2008e874:	18c00037 	ldwio	r3,0(r3)
2008e878:	10c00035 	stwio	r3,0(r2)
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
2008e87c:	e0bffe17 	ldw	r2,-8(fp)
2008e880:	10001b26 	beq	r2,zero,2008e8f0 <alt_msgdma_descriptor_sync_transfer+0x1ac>
2008e884:	e0bfff17 	ldw	r2,-4(fp)
2008e888:	1000191e 	bne	r2,zero,2008e8f0 <alt_msgdma_descriptor_sync_transfer+0x1ac>
    {
        counter = 0; /* reset counter */
2008e88c:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
2008e890:	00000d06 	br	2008e8c8 <alt_msgdma_descriptor_sync_transfer+0x184>
			dev->csr_base, dev->descriptor_base, standard_desc))
        {     
            alt_busy_sleep(1); /* delay 1us */
2008e894:	01000044 	movi	r4,1
2008e898:	008fed00 	call	2008fed0 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
2008e89c:	e0bff30b 	ldhu	r2,-52(fp)
2008e8a0:	1084e230 	cmpltui	r2,r2,5000
2008e8a4:	1000051e 	bne	r2,zero,2008e8bc <alt_msgdma_descriptor_sync_transfer+0x178>
            {
                alt_printf("time out after 5 msec while writing standard" 
2008e8a8:	01000034 	movhi	r4,0
2008e8ac:	21011104 	addi	r4,r4,1092
2008e8b0:	00909540 	call	20090954 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
2008e8b4:	00bff084 	movi	r2,-62
2008e8b8:	00007b06 	br	2008eaa8 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;    
2008e8bc:	e0bff30b 	ldhu	r2,-52(fp)
2008e8c0:	10800044 	addi	r2,r2,1
2008e8c4:	e0bff30d 	sth	r2,-52(fp)
    if (NULL != standard_desc && NULL == extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
2008e8c8:	e0bffd17 	ldw	r2,-12(fp)
2008e8cc:	10c00317 	ldw	r3,12(r2)
2008e8d0:	e0bffd17 	ldw	r2,-12(fp)
2008e8d4:	10800417 	ldw	r2,16(r2)
2008e8d8:	1809883a 	mov	r4,r3
2008e8dc:	100b883a 	mov	r5,r2
2008e8e0:	e1bffe17 	ldw	r6,-8(fp)
2008e8e4:	008df500 	call	2008df50 <alt_msgdma_write_standard_descriptor>
2008e8e8:	103fea1e 	bne	r2,zero,2008e894 <__flash_rwdata_start+0xffffcde4>
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
2008e8ec:	00001f06 	br	2008e96c <alt_msgdma_descriptor_sync_transfer+0x228>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
2008e8f0:	e0bffe17 	ldw	r2,-8(fp)
2008e8f4:	10001b1e 	bne	r2,zero,2008e964 <alt_msgdma_descriptor_sync_transfer+0x220>
2008e8f8:	e0bfff17 	ldw	r2,-4(fp)
2008e8fc:	10001926 	beq	r2,zero,2008e964 <alt_msgdma_descriptor_sync_transfer+0x220>
    {
        counter = 0; /* reset counter */
2008e900:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
2008e904:	00000d06 	br	2008e93c <alt_msgdma_descriptor_sync_transfer+0x1f8>
			dev->csr_base, dev->descriptor_base, extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
2008e908:	01000044 	movi	r4,1
2008e90c:	008fed00 	call	2008fed0 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
2008e910:	e0bff30b 	ldhu	r2,-52(fp)
2008e914:	1084e230 	cmpltui	r2,r2,5000
2008e918:	1000051e 	bne	r2,zero,2008e930 <alt_msgdma_descriptor_sync_transfer+0x1ec>
            {
                alt_printf("time out after 5 msec while writing extended" 
2008e91c:	01000034 	movhi	r4,0
2008e920:	21012204 	addi	r4,r4,1160
2008e924:	00909540 	call	20090954 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
2008e928:	00bff084 	movi	r2,-62
2008e92c:	00005e06 	br	2008eaa8 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;
2008e930:	e0bff30b 	ldhu	r2,-52(fp)
2008e934:	10800044 	addi	r2,r2,1
2008e938:	e0bff30d 	sth	r2,-52(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
2008e93c:	e0bffd17 	ldw	r2,-12(fp)
2008e940:	10c00317 	ldw	r3,12(r2)
2008e944:	e0bffd17 	ldw	r2,-12(fp)
2008e948:	10800417 	ldw	r2,16(r2)
2008e94c:	1809883a 	mov	r4,r3
2008e950:	100b883a 	mov	r5,r2
2008e954:	e1bfff17 	ldw	r6,-4(fp)
2008e958:	008dfe40 	call	2008dfe4 <alt_msgdma_write_extended_descriptor>
2008e95c:	103fea1e 	bne	r2,zero,2008e908 <__flash_rwdata_start+0xffffce58>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
2008e960:	00000206 	br	2008e96c <alt_msgdma_descriptor_sync_transfer+0x228>
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
2008e964:	00bfffc4 	movi	r2,-1
2008e968:	00004f06 	br	2008eaa8 <alt_msgdma_descriptor_sync_transfer+0x364>
    * Set up msgdma controller to:
    * - Disable interrupt generation
    * - Run once a valid descriptor is written to controller
    * - Stop on an error with any particular descriptor
    */
     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
2008e96c:	e0bffd17 	ldw	r2,-12(fp)
2008e970:	10800317 	ldw	r2,12(r2)
2008e974:	10800104 	addi	r2,r2,4
2008e978:	e0fffd17 	ldw	r3,-12(fp)
2008e97c:	19000d17 	ldw	r4,52(r3)
2008e980:	00fff2c4 	movi	r3,-53
2008e984:	20c6703a 	and	r3,r4,r3
2008e988:	18c00114 	ori	r3,r3,4
2008e98c:	10c00035 	stwio	r3,0(r2)
2008e990:	e0bff717 	ldw	r2,-36(fp)
2008e994:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2008e998:	e0bffa17 	ldw	r2,-24(fp)
2008e99c:	1001703a 	wrctl	status,r2
		(~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
		(~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK)) ;
	 
	alt_irq_enable_all(context);
     
    counter = 0; /* reset counter */ 
2008e9a0:	e03ff30d 	sth	zero,-52(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
2008e9a4:	e0bffd17 	ldw	r2,-12(fp)
2008e9a8:	10800317 	ldw	r2,12(r2)
2008e9ac:	10800037 	ldwio	r2,0(r2)
2008e9b0:	e0bff215 	stw	r2,-56(fp)
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
2008e9b4:	00001106 	br	2008e9fc <alt_msgdma_descriptor_sync_transfer+0x2b8>
    {
        alt_busy_sleep(1); /* delay 1us */
2008e9b8:	01000044 	movi	r4,1
2008e9bc:	008fed00 	call	2008fed0 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
2008e9c0:	e0bff30b 	ldhu	r2,-52(fp)
2008e9c4:	1084e230 	cmpltui	r2,r2,5000
2008e9c8:	1000051e 	bne	r2,zero,2008e9e0 <alt_msgdma_descriptor_sync_transfer+0x29c>
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
2008e9cc:	01000034 	movhi	r4,0
2008e9d0:	21013304 	addi	r4,r4,1228
2008e9d4:	00909540 	call	20090954 <alt_printf>
			* Now that access to the registers is complete, release the registers
			* semaphore so that other threads can access the registers.
			*/
			ALT_SEM_POST (dev->regs_lock);
			
            return -ETIME;
2008e9d8:	00bff084 	movi	r2,-62
2008e9dc:	00003206 	br	2008eaa8 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;
2008e9e0:	e0bff30b 	ldhu	r2,-52(fp)
2008e9e4:	10800044 	addi	r2,r2,1
2008e9e8:	e0bff30d 	sth	r2,-52(fp)
        csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
2008e9ec:	e0bffd17 	ldw	r2,-12(fp)
2008e9f0:	10800317 	ldw	r2,12(r2)
2008e9f4:	10800037 	ldwio	r2,0(r2)
2008e9f8:	e0bff215 	stw	r2,-56(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
2008e9fc:	e0fff217 	ldw	r3,-56(fp)
2008ea00:	e0bff817 	ldw	r2,-32(fp)
2008ea04:	1884703a 	and	r2,r3,r2
2008ea08:	1000031e 	bne	r2,zero,2008ea18 <alt_msgdma_descriptor_sync_transfer+0x2d4>
2008ea0c:	e0bff217 	ldw	r2,-56(fp)
2008ea10:	1080004c 	andi	r2,r2,1
2008ea14:	103fe81e 	bne	r2,zero,2008e9b8 <__flash_rwdata_start+0xffffcf08>
    }
    

    /*Errors or conditions causing the dispatcher stopping issuing read/write 
      commands to masters*/
    if(0 != (csr_status & error))
2008ea18:	e0fff217 	ldw	r3,-56(fp)
2008ea1c:	e0bff817 	ldw	r2,-32(fp)
2008ea20:	1884703a 	and	r2,r3,r2
2008ea24:	10000226 	beq	r2,zero,2008ea30 <alt_msgdma_descriptor_sync_transfer+0x2ec>
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        return error;
2008ea28:	e0bff817 	ldw	r2,-32(fp)
2008ea2c:	00001e06 	br	2008eaa8 <alt_msgdma_descriptor_sync_transfer+0x364>
    }

    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) | 
2008ea30:	e0bffd17 	ldw	r2,-12(fp)
2008ea34:	10800317 	ldw	r2,12(r2)
2008ea38:	10800104 	addi	r2,r2,4
2008ea3c:	10800037 	ldwio	r2,0(r2)
2008ea40:	10800814 	ori	r2,r2,32
2008ea44:	e0bff615 	stw	r2,-40(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2008ea48:	0005303a 	rdctl	r2,status
2008ea4c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2008ea50:	e0fffb17 	ldw	r3,-20(fp)
2008ea54:	00bfff84 	movi	r2,-2
2008ea58:	1884703a 	and	r2,r3,r2
2008ea5c:	1001703a 	wrctl	status,r2
  
  return context;
2008ea60:	e0bffb17 	ldw	r2,-20(fp)
	ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();  
2008ea64:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
2008ea68:	e0bffd17 	ldw	r2,-12(fp)
2008ea6c:	10800317 	ldw	r2,12(r2)
2008ea70:	10800104 	addi	r2,r2,4
2008ea74:	e0fff617 	ldw	r3,-40(fp)
2008ea78:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
2008ea7c:	e0bffd17 	ldw	r2,-12(fp)
2008ea80:	10800317 	ldw	r2,12(r2)
2008ea84:	e0fffd17 	ldw	r3,-12(fp)
2008ea88:	18c00317 	ldw	r3,12(r3)
2008ea8c:	18c00037 	ldwio	r3,0(r3)
2008ea90:	10c00035 	stwio	r3,0(r2)
2008ea94:	e0bff717 	ldw	r2,-36(fp)
2008ea98:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2008ea9c:	e0bffc17 	ldw	r2,-16(fp)
2008eaa0:	1001703a 	wrctl	status,r2
	* Now that access to the registers is complete, release the registers
	* semaphore so that other threads can access the registers.
	*/
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
2008eaa4:	0005883a 	mov	r2,zero

}
2008eaa8:	e037883a 	mov	sp,fp
2008eaac:	dfc00117 	ldw	ra,4(sp)
2008eab0:	df000017 	ldw	fp,0(sp)
2008eab4:	dec00204 	addi	sp,sp,8
2008eab8:	f800283a 	ret

2008eabc <alt_msgdma_construct_standard_st_to_mm_descriptor>:
 */
int alt_msgdma_construct_standard_st_to_mm_descriptor (
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *write_address, alt_u32 length, alt_u32 control)
{
2008eabc:	defff804 	addi	sp,sp,-32
2008eac0:	dfc00715 	stw	ra,28(sp)
2008eac4:	df000615 	stw	fp,24(sp)
2008eac8:	df000604 	addi	fp,sp,24
2008eacc:	e13ffc15 	stw	r4,-16(fp)
2008ead0:	e17ffd15 	stw	r5,-12(fp)
2008ead4:	e1bffe15 	stw	r6,-8(fp)
2008ead8:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, NULL, 
2008eadc:	e0bfff17 	ldw	r2,-4(fp)
2008eae0:	d8800015 	stw	r2,0(sp)
2008eae4:	e0800217 	ldw	r2,8(fp)
2008eae8:	d8800115 	stw	r2,4(sp)
2008eaec:	e13ffc17 	ldw	r4,-16(fp)
2008eaf0:	e17ffd17 	ldw	r5,-12(fp)
2008eaf4:	000d883a 	mov	r6,zero
2008eaf8:	e1fffe17 	ldw	r7,-8(fp)
2008eafc:	008e2940 	call	2008e294 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
2008eb00:	e037883a 	mov	sp,fp
2008eb04:	dfc00117 	ldw	ra,4(sp)
2008eb08:	df000017 	ldw	fp,0(sp)
2008eb0c:	dec00204 	addi	sp,sp,8
2008eb10:	f800283a 	ret

2008eb14 <alt_msgdma_construct_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address,
	alt_u32 length,
	alt_u32 control)
{
2008eb14:	defff804 	addi	sp,sp,-32
2008eb18:	dfc00715 	stw	ra,28(sp)
2008eb1c:	df000615 	stw	fp,24(sp)
2008eb20:	df000604 	addi	fp,sp,24
2008eb24:	e13ffc15 	stw	r4,-16(fp)
2008eb28:	e17ffd15 	stw	r5,-12(fp)
2008eb2c:	e1bffe15 	stw	r6,-8(fp)
2008eb30:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
2008eb34:	e0bfff17 	ldw	r2,-4(fp)
2008eb38:	d8800015 	stw	r2,0(sp)
2008eb3c:	e0800217 	ldw	r2,8(fp)
2008eb40:	d8800115 	stw	r2,4(sp)
2008eb44:	e13ffc17 	ldw	r4,-16(fp)
2008eb48:	e17ffd17 	ldw	r5,-12(fp)
2008eb4c:	e1bffe17 	ldw	r6,-8(fp)
2008eb50:	000f883a 	mov	r7,zero
2008eb54:	008e2940 	call	2008e294 <alt_msgdma_construct_standard_descriptor>
            NULL, length, control);

}
2008eb58:	e037883a 	mov	sp,fp
2008eb5c:	dfc00117 	ldw	ra,4(sp)
2008eb60:	df000017 	ldw	fp,0(sp)
2008eb64:	dec00204 	addi	sp,sp,8
2008eb68:	f800283a 	ret

2008eb6c <alt_msgdma_construct_standard_mm_to_mm_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
2008eb6c:	defff804 	addi	sp,sp,-32
2008eb70:	dfc00715 	stw	ra,28(sp)
2008eb74:	df000615 	stw	fp,24(sp)
2008eb78:	df000604 	addi	fp,sp,24
2008eb7c:	e13ffc15 	stw	r4,-16(fp)
2008eb80:	e17ffd15 	stw	r5,-12(fp)
2008eb84:	e1bffe15 	stw	r6,-8(fp)
2008eb88:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
2008eb8c:	e0800217 	ldw	r2,8(fp)
2008eb90:	d8800015 	stw	r2,0(sp)
2008eb94:	e0800317 	ldw	r2,12(fp)
2008eb98:	d8800115 	stw	r2,4(sp)
2008eb9c:	e13ffc17 	ldw	r4,-16(fp)
2008eba0:	e17ffd17 	ldw	r5,-12(fp)
2008eba4:	e1bffe17 	ldw	r6,-8(fp)
2008eba8:	e1ffff17 	ldw	r7,-4(fp)
2008ebac:	008e2940 	call	2008e294 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
2008ebb0:	e037883a 	mov	sp,fp
2008ebb4:	dfc00117 	ldw	ra,4(sp)
2008ebb8:	df000017 	ldw	fp,0(sp)
2008ebbc:	dec00204 	addi	sp,sp,8
2008ebc0:	f800283a 	ret

2008ebc4 <alt_msgdma_construct_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 write_burst_count, 
	alt_u16 write_stride)
{
2008ebc4:	defff004 	addi	sp,sp,-64
2008ebc8:	dfc00f15 	stw	ra,60(sp)
2008ebcc:	df000e15 	stw	fp,56(sp)
2008ebd0:	df000e04 	addi	fp,sp,56
2008ebd4:	e13ff915 	stw	r4,-28(fp)
2008ebd8:	e17ffa15 	stw	r5,-24(fp)
2008ebdc:	e1bffb15 	stw	r6,-20(fp)
2008ebe0:	e1fffc15 	stw	r7,-16(fp)
2008ebe4:	e1000317 	ldw	r4,12(fp)
2008ebe8:	e0c00417 	ldw	r3,16(fp)
2008ebec:	e0800517 	ldw	r2,20(fp)
2008ebf0:	e13ffd0d 	sth	r4,-12(fp)
2008ebf4:	e0fffe05 	stb	r3,-8(fp)
2008ebf8:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
2008ebfc:	e13ffd0b 	ldhu	r4,-12(fp)
2008ec00:	e0fffe03 	ldbu	r3,-8(fp)
2008ec04:	e0bfff0b 	ldhu	r2,-4(fp)
2008ec08:	e17ffc17 	ldw	r5,-16(fp)
2008ec0c:	d9400015 	stw	r5,0(sp)
2008ec10:	e1400217 	ldw	r5,8(fp)
2008ec14:	d9400115 	stw	r5,4(sp)
2008ec18:	d9000215 	stw	r4,8(sp)
2008ec1c:	d8000315 	stw	zero,12(sp)
2008ec20:	d8c00415 	stw	r3,16(sp)
2008ec24:	d8000515 	stw	zero,20(sp)
2008ec28:	d8800615 	stw	r2,24(sp)
2008ec2c:	e13ff917 	ldw	r4,-28(fp)
2008ec30:	e17ffa17 	ldw	r5,-24(fp)
2008ec34:	000d883a 	mov	r6,zero
2008ec38:	e1fffb17 	ldw	r7,-20(fp)
2008ec3c:	008e3200 	call	2008e320 <alt_msgdma_construct_extended_descriptor>
            NULL, write_address, length, control, sequence_number, 0, 
            write_burst_count, 0, write_stride);
}
2008ec40:	e037883a 	mov	sp,fp
2008ec44:	dfc00117 	ldw	ra,4(sp)
2008ec48:	df000017 	ldw	fp,0(sp)
2008ec4c:	dec00204 	addi	sp,sp,8
2008ec50:	f800283a 	ret

2008ec54 <alt_msgdma_construct_extended_mm_to_st_descriptor>:
	alt_u32 length,
	alt_u32 control,
	alt_u16 sequence_number,
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
2008ec54:	defff004 	addi	sp,sp,-64
2008ec58:	dfc00f15 	stw	ra,60(sp)
2008ec5c:	df000e15 	stw	fp,56(sp)
2008ec60:	df000e04 	addi	fp,sp,56
2008ec64:	e13ff915 	stw	r4,-28(fp)
2008ec68:	e17ffa15 	stw	r5,-24(fp)
2008ec6c:	e1bffb15 	stw	r6,-20(fp)
2008ec70:	e1fffc15 	stw	r7,-16(fp)
2008ec74:	e1000317 	ldw	r4,12(fp)
2008ec78:	e0c00417 	ldw	r3,16(fp)
2008ec7c:	e0800517 	ldw	r2,20(fp)
2008ec80:	e13ffd0d 	sth	r4,-12(fp)
2008ec84:	e0fffe05 	stb	r3,-8(fp)
2008ec88:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, read_address, 
2008ec8c:	e13ffd0b 	ldhu	r4,-12(fp)
2008ec90:	e0fffe03 	ldbu	r3,-8(fp)
2008ec94:	e0bfff0b 	ldhu	r2,-4(fp)
2008ec98:	e17ffc17 	ldw	r5,-16(fp)
2008ec9c:	d9400015 	stw	r5,0(sp)
2008eca0:	e1400217 	ldw	r5,8(fp)
2008eca4:	d9400115 	stw	r5,4(sp)
2008eca8:	d9000215 	stw	r4,8(sp)
2008ecac:	d8c00315 	stw	r3,12(sp)
2008ecb0:	d8000415 	stw	zero,16(sp)
2008ecb4:	d8800515 	stw	r2,20(sp)
2008ecb8:	d8000615 	stw	zero,24(sp)
2008ecbc:	e13ff917 	ldw	r4,-28(fp)
2008ecc0:	e17ffa17 	ldw	r5,-24(fp)
2008ecc4:	e1bffb17 	ldw	r6,-20(fp)
2008ecc8:	000f883a 	mov	r7,zero
2008eccc:	008e3200 	call	2008e320 <alt_msgdma_construct_extended_descriptor>
            NULL, length, control, sequence_number, read_burst_count, 0, 
            read_stride, 0);

}
2008ecd0:	e037883a 	mov	sp,fp
2008ecd4:	dfc00117 	ldw	ra,4(sp)
2008ecd8:	df000017 	ldw	fp,0(sp)
2008ecdc:	dec00204 	addi	sp,sp,8
2008ece0:	f800283a 	ret

2008ece4 <alt_msgdma_construct_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
2008ece4:	deffee04 	addi	sp,sp,-72
2008ece8:	dfc01115 	stw	ra,68(sp)
2008ecec:	df001015 	stw	fp,64(sp)
2008ecf0:	df001004 	addi	fp,sp,64
2008ecf4:	e13ff715 	stw	r4,-36(fp)
2008ecf8:	e17ff815 	stw	r5,-32(fp)
2008ecfc:	e1bff915 	stw	r6,-28(fp)
2008ed00:	e1fffa15 	stw	r7,-24(fp)
2008ed04:	e1800417 	ldw	r6,16(fp)
2008ed08:	e1400517 	ldw	r5,20(fp)
2008ed0c:	e1000617 	ldw	r4,24(fp)
2008ed10:	e0c00717 	ldw	r3,28(fp)
2008ed14:	e0800817 	ldw	r2,32(fp)
2008ed18:	e1bffb0d 	sth	r6,-20(fp)
2008ed1c:	e17ffc05 	stb	r5,-16(fp)
2008ed20:	e13ffd05 	stb	r4,-12(fp)
2008ed24:	e0fffe0d 	sth	r3,-8(fp)
2008ed28:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
2008ed2c:	e1bffb0b 	ldhu	r6,-20(fp)
2008ed30:	e17ffc03 	ldbu	r5,-16(fp)
2008ed34:	e13ffd03 	ldbu	r4,-12(fp)
2008ed38:	e0fffe0b 	ldhu	r3,-8(fp)
2008ed3c:	e0bfff0b 	ldhu	r2,-4(fp)
2008ed40:	e1c00217 	ldw	r7,8(fp)
2008ed44:	d9c00015 	stw	r7,0(sp)
2008ed48:	e1c00317 	ldw	r7,12(fp)
2008ed4c:	d9c00115 	stw	r7,4(sp)
2008ed50:	d9800215 	stw	r6,8(sp)
2008ed54:	d9400315 	stw	r5,12(sp)
2008ed58:	d9000415 	stw	r4,16(sp)
2008ed5c:	d8c00515 	stw	r3,20(sp)
2008ed60:	d8800615 	stw	r2,24(sp)
2008ed64:	e13ff717 	ldw	r4,-36(fp)
2008ed68:	e17ff817 	ldw	r5,-32(fp)
2008ed6c:	e1bff917 	ldw	r6,-28(fp)
2008ed70:	e1fffa17 	ldw	r7,-24(fp)
2008ed74:	008e3200 	call	2008e320 <alt_msgdma_construct_extended_descriptor>
            read_address, write_address, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
2008ed78:	e037883a 	mov	sp,fp
2008ed7c:	dfc00117 	ldw	ra,4(sp)
2008ed80:	df000017 	ldw	fp,0(sp)
2008ed84:	dec00204 	addi	sp,sp,8
2008ed88:	f800283a 	ret

2008ed8c <alt_msgdma_construct_prefetcher_standard_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
2008ed8c:	defffb04 	addi	sp,sp,-20
2008ed90:	df000415 	stw	fp,16(sp)
2008ed94:	df000404 	addi	fp,sp,16
2008ed98:	e13ffc15 	stw	r4,-16(fp)
2008ed9c:	e17ffd15 	stw	r5,-12(fp)
2008eda0:	e1bffe15 	stw	r6,-8(fp)
2008eda4:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
2008eda8:	e0bffc17 	ldw	r2,-16(fp)
2008edac:	10c01217 	ldw	r3,72(r2)
2008edb0:	e0800117 	ldw	r2,4(fp)
2008edb4:	18800436 	bltu	r3,r2,2008edc8 <alt_msgdma_construct_prefetcher_standard_descriptor+0x3c>
       dev->enhanced_features != 0
2008edb8:	e0bffc17 	ldw	r2,-16(fp)
2008edbc:	10801703 	ldbu	r2,92(r2)
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
2008edc0:	10803fcc 	andi	r2,r2,255
2008edc4:	10000226 	beq	r2,zero,2008edd0 <alt_msgdma_construct_prefetcher_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
2008edc8:	00bffa84 	movi	r2,-22
2008edcc:	00001406 	br	2008ee20 <alt_msgdma_construct_prefetcher_standard_descriptor+0x94>
    }
    descriptor->read_address = read_address;
2008edd0:	e0bffd17 	ldw	r2,-12(fp)
2008edd4:	e0fffe17 	ldw	r3,-8(fp)
2008edd8:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
2008eddc:	e0bffd17 	ldw	r2,-12(fp)
2008ede0:	e0ffff17 	ldw	r3,-4(fp)
2008ede4:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
2008ede8:	e0bffd17 	ldw	r2,-12(fp)
2008edec:	e0c00117 	ldw	r3,4(fp)
2008edf0:	10c00215 	stw	r3,8(r2)
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
2008edf4:	e0fffd17 	ldw	r3,-12(fp)
2008edf8:	e0bffd17 	ldw	r2,-12(fp)
2008edfc:	10c00315 	stw	r3,12(r2)
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
2008ee00:	e0c00217 	ldw	r3,8(fp)
2008ee04:	00900034 	movhi	r2,16384
2008ee08:	10bfffc4 	addi	r2,r2,-1
2008ee0c:	1884703a 	and	r2,r3,r2
2008ee10:	10e00034 	orhi	r3,r2,32768
    descriptor->transfer_length = length;
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
2008ee14:	e0bffd17 	ldw	r2,-12(fp)
2008ee18:	10c00715 	stw	r3,28(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
2008ee1c:	0005883a 	mov	r2,zero
}
2008ee20:	e037883a 	mov	sp,fp
2008ee24:	df000017 	ldw	fp,0(sp)
2008ee28:	dec00104 	addi	sp,sp,4
2008ee2c:	f800283a 	ret

2008ee30 <alt_msgdma_construct_prefetcher_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
2008ee30:	defff404 	addi	sp,sp,-48
2008ee34:	df000b15 	stw	fp,44(sp)
2008ee38:	df000b04 	addi	fp,sp,44
2008ee3c:	e13ff715 	stw	r4,-36(fp)
2008ee40:	e17ff815 	stw	r5,-32(fp)
2008ee44:	e1bff915 	stw	r6,-28(fp)
2008ee48:	e1fffa15 	stw	r7,-24(fp)
2008ee4c:	e1800517 	ldw	r6,20(fp)
2008ee50:	e1400617 	ldw	r5,24(fp)
2008ee54:	e1000717 	ldw	r4,28(fp)
2008ee58:	e0c00817 	ldw	r3,32(fp)
2008ee5c:	e0800917 	ldw	r2,36(fp)
2008ee60:	e1bffb0d 	sth	r6,-20(fp)
2008ee64:	e17ffc05 	stb	r5,-16(fp)
2008ee68:	e13ffd05 	stb	r4,-12(fp)
2008ee6c:	e0fffe0d 	sth	r3,-8(fp)
2008ee70:	e0bfff0d 	sth	r2,-4(fp)
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
2008ee74:	e0bff717 	ldw	r2,-36(fp)
2008ee78:	10c01217 	ldw	r3,72(r2)
2008ee7c:	e0800317 	ldw	r2,12(fp)
2008ee80:	18801936 	bltu	r3,r2,2008eee8 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
2008ee84:	e13ff717 	ldw	r4,-36(fp)
2008ee88:	20801317 	ldw	r2,76(r4)
2008ee8c:	20c01417 	ldw	r3,80(r4)
2008ee90:	e13ffe0b 	ldhu	r4,-8(fp)
2008ee94:	213fffcc 	andi	r4,r4,65535
2008ee98:	2015883a 	mov	r10,r4
2008ee9c:	0017883a 	mov	r11,zero
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
2008eea0:	1ac01136 	bltu	r3,r11,2008eee8 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
2008eea4:	58c0011e 	bne	r11,r3,2008eeac <alt_msgdma_construct_prefetcher_extended_descriptor+0x7c>
2008eea8:	12800f36 	bltu	r2,r10,2008eee8 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
2008eeac:	e13ff717 	ldw	r4,-36(fp)
2008eeb0:	20801317 	ldw	r2,76(r4)
2008eeb4:	20c01417 	ldw	r3,80(r4)
2008eeb8:	e13fff0b 	ldhu	r4,-4(fp)
2008eebc:	213fffcc 	andi	r4,r4,65535
2008eec0:	2011883a 	mov	r8,r4
2008eec4:	0013883a 	mov	r9,zero
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
2008eec8:	1a400736 	bltu	r3,r9,2008eee8 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
2008eecc:	48c0011e 	bne	r9,r3,2008eed4 <alt_msgdma_construct_prefetcher_extended_descriptor+0xa4>
2008eed0:	12000536 	bltu	r2,r8,2008eee8 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
2008eed4:	e0bff717 	ldw	r2,-36(fp)
2008eed8:	10801703 	ldbu	r2,92(r2)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
2008eedc:	10803fcc 	andi	r2,r2,255
2008eee0:	10800060 	cmpeqi	r2,r2,1
2008eee4:	1000021e 	bne	r2,zero,2008eef0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
2008eee8:	00bffa84 	movi	r2,-22
2008eeec:	00003106 	br	2008efb4 <alt_msgdma_construct_prefetcher_extended_descriptor+0x184>
    }
    
    descriptor->read_address_high = read_address_high;
2008eef0:	e0bff817 	ldw	r2,-32(fp)
2008eef4:	e0fff917 	ldw	r3,-28(fp)
2008eef8:	10c00915 	stw	r3,36(r2)
    descriptor->read_address_low = read_address_low;
2008eefc:	e0bff817 	ldw	r2,-32(fp)
2008ef00:	e0fffa17 	ldw	r3,-24(fp)
2008ef04:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_high = write_address_high;
2008ef08:	e0bff817 	ldw	r2,-32(fp)
2008ef0c:	e0c00117 	ldw	r3,4(fp)
2008ef10:	10c00a15 	stw	r3,40(r2)
    descriptor->write_address_low = write_address_low;
2008ef14:	e0bff817 	ldw	r2,-32(fp)
2008ef18:	e0c00217 	ldw	r3,8(fp)
2008ef1c:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
2008ef20:	e0bff817 	ldw	r2,-32(fp)
2008ef24:	e0c00317 	ldw	r3,12(fp)
2008ef28:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
2008ef2c:	e0bff817 	ldw	r2,-32(fp)
2008ef30:	e0fffb0b 	ldhu	r3,-20(fp)
2008ef34:	10c0070d 	sth	r3,28(r2)
    descriptor->read_burst_count = read_burst_count;
2008ef38:	e0bff817 	ldw	r2,-32(fp)
2008ef3c:	e0fffc03 	ldbu	r3,-16(fp)
2008ef40:	10c00785 	stb	r3,30(r2)
    descriptor->write_burst_count = write_burst_count;
2008ef44:	e0bff817 	ldw	r2,-32(fp)
2008ef48:	e0fffd03 	ldbu	r3,-12(fp)
2008ef4c:	10c007c5 	stb	r3,31(r2)
    descriptor->read_stride = read_stride;
2008ef50:	e0bff817 	ldw	r2,-32(fp)
2008ef54:	e0fffe0b 	ldhu	r3,-8(fp)
2008ef58:	10c0080d 	sth	r3,32(r2)
    descriptor->write_stride = write_stride;
2008ef5c:	e0bff817 	ldw	r2,-32(fp)
2008ef60:	e0ffff0b 	ldhu	r3,-4(fp)
2008ef64:	10c0088d 	sth	r3,34(r2)
    /* have descriptor point to itself */
	node_addr.u64 = (uintptr_t)descriptor;
2008ef68:	e0bff817 	ldw	r2,-32(fp)
2008ef6c:	1019883a 	mov	r12,r2
2008ef70:	001b883a 	mov	r13,zero
2008ef74:	e33ff515 	stw	r12,-44(fp)
2008ef78:	e37ff615 	stw	r13,-40(fp)
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
2008ef7c:	e0fff517 	ldw	r3,-44(fp)
2008ef80:	e0bff817 	ldw	r2,-32(fp)
2008ef84:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
2008ef88:	e0fff617 	ldw	r3,-40(fp)
2008ef8c:	e0bff817 	ldw	r2,-32(fp)
2008ef90:	10c00b15 	stw	r3,44(r2)
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
2008ef94:	e0c00417 	ldw	r3,16(fp)
2008ef98:	00900034 	movhi	r2,16384
2008ef9c:	10bfffc4 	addi	r2,r2,-1
2008efa0:	1884703a 	and	r2,r3,r2
2008efa4:	10e00034 	orhi	r3,r2,32768
	node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
2008efa8:	e0bff817 	ldw	r2,-32(fp)
2008efac:	10c00f15 	stw	r3,60(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
2008efb0:	0005883a 	mov	r2,zero
}
2008efb4:	e037883a 	mov	sp,fp
2008efb8:	df000017 	ldw	fp,0(sp)
2008efbc:	dec00104 	addi	sp,sp,4
2008efc0:	f800283a 	ret

2008efc4 <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address,
	alt_u32 write_address,
	alt_u32 length,
	alt_u32 control)
{
2008efc4:	defff804 	addi	sp,sp,-32
2008efc8:	dfc00715 	stw	ra,28(sp)
2008efcc:	df000615 	stw	fp,24(sp)
2008efd0:	df000604 	addi	fp,sp,24
2008efd4:	e13ffc15 	stw	r4,-16(fp)
2008efd8:	e17ffd15 	stw	r5,-12(fp)
2008efdc:	e1bffe15 	stw	r6,-8(fp)
2008efe0:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
2008efe4:	e0800217 	ldw	r2,8(fp)
2008efe8:	d8800015 	stw	r2,0(sp)
2008efec:	e0800317 	ldw	r2,12(fp)
2008eff0:	d8800115 	stw	r2,4(sp)
2008eff4:	e13ffc17 	ldw	r4,-16(fp)
2008eff8:	e17ffd17 	ldw	r5,-12(fp)
2008effc:	e1bffe17 	ldw	r6,-8(fp)
2008f000:	e1ffff17 	ldw	r7,-4(fp)
2008f004:	008ed8c0 	call	2008ed8c <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, write_address, length, control);
}
2008f008:	e037883a 	mov	sp,fp
2008f00c:	dfc00117 	ldw	ra,4(sp)
2008f010:	df000017 	ldw	fp,0(sp)
2008f014:	dec00204 	addi	sp,sp,8
2008f018:	f800283a 	ret

2008f01c <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
2008f01c:	defff804 	addi	sp,sp,-32
2008f020:	dfc00715 	stw	ra,28(sp)
2008f024:	df000615 	stw	fp,24(sp)
2008f028:	df000604 	addi	fp,sp,24
2008f02c:	e13ffc15 	stw	r4,-16(fp)
2008f030:	e17ffd15 	stw	r5,-12(fp)
2008f034:	e1bffe15 	stw	r6,-8(fp)
2008f038:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
2008f03c:	e0bfff17 	ldw	r2,-4(fp)
2008f040:	d8800015 	stw	r2,0(sp)
2008f044:	e0800217 	ldw	r2,8(fp)
2008f048:	d8800115 	stw	r2,4(sp)
2008f04c:	e13ffc17 	ldw	r4,-16(fp)
2008f050:	e17ffd17 	ldw	r5,-12(fp)
2008f054:	000d883a 	mov	r6,zero
2008f058:	e1fffe17 	ldw	r7,-8(fp)
2008f05c:	008ed8c0 	call	2008ed8c <alt_msgdma_construct_prefetcher_standard_descriptor>
    		0, write_address, length, control);
}
2008f060:	e037883a 	mov	sp,fp
2008f064:	dfc00117 	ldw	ra,4(sp)
2008f068:	df000017 	ldw	fp,0(sp)
2008f06c:	dec00204 	addi	sp,sp,8
2008f070:	f800283a 	ret

2008f074 <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 read_address, 
	alt_u32 length, 
	alt_u32 control)
{
2008f074:	defff804 	addi	sp,sp,-32
2008f078:	dfc00715 	stw	ra,28(sp)
2008f07c:	df000615 	stw	fp,24(sp)
2008f080:	df000604 	addi	fp,sp,24
2008f084:	e13ffc15 	stw	r4,-16(fp)
2008f088:	e17ffd15 	stw	r5,-12(fp)
2008f08c:	e1bffe15 	stw	r6,-8(fp)
2008f090:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
2008f094:	e0bfff17 	ldw	r2,-4(fp)
2008f098:	d8800015 	stw	r2,0(sp)
2008f09c:	e0800217 	ldw	r2,8(fp)
2008f0a0:	d8800115 	stw	r2,4(sp)
2008f0a4:	e13ffc17 	ldw	r4,-16(fp)
2008f0a8:	e17ffd17 	ldw	r5,-12(fp)
2008f0ac:	e1bffe17 	ldw	r6,-8(fp)
2008f0b0:	000f883a 	mov	r7,zero
2008f0b4:	008ed8c0 	call	2008ed8c <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, 0, length, control);
}
2008f0b8:	e037883a 	mov	sp,fp
2008f0bc:	dfc00117 	ldw	ra,4(sp)
2008f0c0:	df000017 	ldw	fp,0(sp)
2008f0c4:	dec00204 	addi	sp,sp,8
2008f0c8:	f800283a 	ret

2008f0cc <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number,
	alt_u8 write_burst_count,
	alt_u16 write_stride)
{
2008f0cc:	deffee04 	addi	sp,sp,-72
2008f0d0:	dfc01115 	stw	ra,68(sp)
2008f0d4:	df001015 	stw	fp,64(sp)
2008f0d8:	df001004 	addi	fp,sp,64
2008f0dc:	e13ff915 	stw	r4,-28(fp)
2008f0e0:	e17ffa15 	stw	r5,-24(fp)
2008f0e4:	e1bffb15 	stw	r6,-20(fp)
2008f0e8:	e1fffc15 	stw	r7,-16(fp)
2008f0ec:	e1000417 	ldw	r4,16(fp)
2008f0f0:	e0c00517 	ldw	r3,20(fp)
2008f0f4:	e0800617 	ldw	r2,24(fp)
2008f0f8:	e13ffd0d 	sth	r4,-12(fp)
2008f0fc:	e0fffe05 	stb	r3,-8(fp)
2008f100:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor, 
2008f104:	e13ffd0b 	ldhu	r4,-12(fp)
2008f108:	e0fffe03 	ldbu	r3,-8(fp)
2008f10c:	e0bfff0b 	ldhu	r2,-4(fp)
2008f110:	e17ffb17 	ldw	r5,-20(fp)
2008f114:	d9400015 	stw	r5,0(sp)
2008f118:	e17ffc17 	ldw	r5,-16(fp)
2008f11c:	d9400115 	stw	r5,4(sp)
2008f120:	e1400217 	ldw	r5,8(fp)
2008f124:	d9400215 	stw	r5,8(sp)
2008f128:	e1400317 	ldw	r5,12(fp)
2008f12c:	d9400315 	stw	r5,12(sp)
2008f130:	d9000415 	stw	r4,16(sp)
2008f134:	d8000515 	stw	zero,20(sp)
2008f138:	d8c00615 	stw	r3,24(sp)
2008f13c:	d8000715 	stw	zero,28(sp)
2008f140:	d8800815 	stw	r2,32(sp)
2008f144:	e13ff917 	ldw	r4,-28(fp)
2008f148:	e17ffa17 	ldw	r5,-24(fp)
2008f14c:	000d883a 	mov	r6,zero
2008f150:	000f883a 	mov	r7,zero
2008f154:	008ee300 	call	2008ee30 <alt_msgdma_construct_prefetcher_extended_descriptor>
            0, 0, write_address_high, write_address_low, length, control, 
			sequence_number, 0, write_burst_count, 0, write_stride);
}
2008f158:	e037883a 	mov	sp,fp
2008f15c:	dfc00117 	ldw	ra,4(sp)
2008f160:	df000017 	ldw	fp,0(sp)
2008f164:	dec00204 	addi	sp,sp,8
2008f168:	f800283a 	ret

2008f16c <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
2008f16c:	deffee04 	addi	sp,sp,-72
2008f170:	dfc01115 	stw	ra,68(sp)
2008f174:	df001015 	stw	fp,64(sp)
2008f178:	df001004 	addi	fp,sp,64
2008f17c:	e13ff915 	stw	r4,-28(fp)
2008f180:	e17ffa15 	stw	r5,-24(fp)
2008f184:	e1bffb15 	stw	r6,-20(fp)
2008f188:	e1fffc15 	stw	r7,-16(fp)
2008f18c:	e1000417 	ldw	r4,16(fp)
2008f190:	e0c00517 	ldw	r3,20(fp)
2008f194:	e0800617 	ldw	r2,24(fp)
2008f198:	e13ffd0d 	sth	r4,-12(fp)
2008f19c:	e0fffe05 	stb	r3,-8(fp)
2008f1a0:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
2008f1a4:	e13ffd0b 	ldhu	r4,-12(fp)
2008f1a8:	e0fffe03 	ldbu	r3,-8(fp)
2008f1ac:	e0bfff0b 	ldhu	r2,-4(fp)
2008f1b0:	d8000015 	stw	zero,0(sp)
2008f1b4:	d8000115 	stw	zero,4(sp)
2008f1b8:	e1400217 	ldw	r5,8(fp)
2008f1bc:	d9400215 	stw	r5,8(sp)
2008f1c0:	e1400317 	ldw	r5,12(fp)
2008f1c4:	d9400315 	stw	r5,12(sp)
2008f1c8:	d9000415 	stw	r4,16(sp)
2008f1cc:	d8c00515 	stw	r3,20(sp)
2008f1d0:	d8000615 	stw	zero,24(sp)
2008f1d4:	d8800715 	stw	r2,28(sp)
2008f1d8:	d8000815 	stw	zero,32(sp)
2008f1dc:	e13ff917 	ldw	r4,-28(fp)
2008f1e0:	e17ffa17 	ldw	r5,-24(fp)
2008f1e4:	e1bffb17 	ldw	r6,-20(fp)
2008f1e8:	e1fffc17 	ldw	r7,-16(fp)
2008f1ec:	008ee300 	call	2008ee30 <alt_msgdma_construct_prefetcher_extended_descriptor>
    		read_address_high, read_address_low, 0, 0, length, control, 
			sequence_number, read_burst_count, 0, read_stride, 0);
}
2008f1f0:	e037883a 	mov	sp,fp
2008f1f4:	dfc00117 	ldw	ra,4(sp)
2008f1f8:	df000017 	ldw	fp,0(sp)
2008f1fc:	dec00204 	addi	sp,sp,8
2008f200:	f800283a 	ret

2008f204 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor>:
	alt_u16 sequence_number,
	alt_u8 read_burst_count,
	alt_u8 write_burst_count, 
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
2008f204:	deffec04 	addi	sp,sp,-80
2008f208:	dfc01315 	stw	ra,76(sp)
2008f20c:	df001215 	stw	fp,72(sp)
2008f210:	df001204 	addi	fp,sp,72
2008f214:	e13ff715 	stw	r4,-36(fp)
2008f218:	e17ff815 	stw	r5,-32(fp)
2008f21c:	e1bff915 	stw	r6,-28(fp)
2008f220:	e1fffa15 	stw	r7,-24(fp)
2008f224:	e1800617 	ldw	r6,24(fp)
2008f228:	e1400717 	ldw	r5,28(fp)
2008f22c:	e1000817 	ldw	r4,32(fp)
2008f230:	e0c00917 	ldw	r3,36(fp)
2008f234:	e0800a17 	ldw	r2,40(fp)
2008f238:	e1bffb0d 	sth	r6,-20(fp)
2008f23c:	e17ffc05 	stb	r5,-16(fp)
2008f240:	e13ffd05 	stb	r4,-12(fp)
2008f244:	e0fffe0d 	sth	r3,-8(fp)
2008f248:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
2008f24c:	e1bffb0b 	ldhu	r6,-20(fp)
2008f250:	e17ffc03 	ldbu	r5,-16(fp)
2008f254:	e13ffd03 	ldbu	r4,-12(fp)
2008f258:	e0fffe0b 	ldhu	r3,-8(fp)
2008f25c:	e0bfff0b 	ldhu	r2,-4(fp)
2008f260:	e1c00217 	ldw	r7,8(fp)
2008f264:	d9c00015 	stw	r7,0(sp)
2008f268:	e1c00317 	ldw	r7,12(fp)
2008f26c:	d9c00115 	stw	r7,4(sp)
2008f270:	e1c00417 	ldw	r7,16(fp)
2008f274:	d9c00215 	stw	r7,8(sp)
2008f278:	e1c00517 	ldw	r7,20(fp)
2008f27c:	d9c00315 	stw	r7,12(sp)
2008f280:	d9800415 	stw	r6,16(sp)
2008f284:	d9400515 	stw	r5,20(sp)
2008f288:	d9000615 	stw	r4,24(sp)
2008f28c:	d8c00715 	stw	r3,28(sp)
2008f290:	d8800815 	stw	r2,32(sp)
2008f294:	e13ff717 	ldw	r4,-36(fp)
2008f298:	e17ff817 	ldw	r5,-32(fp)
2008f29c:	e1bff917 	ldw	r6,-28(fp)
2008f2a0:	e1fffa17 	ldw	r7,-24(fp)
2008f2a4:	008ee300 	call	2008ee30 <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, write_address_high, 
			write_address_low, length, control, sequence_number, 
			read_burst_count, write_burst_count, read_stride, write_stride);

}
2008f2a8:	e037883a 	mov	sp,fp
2008f2ac:	dfc00117 	ldw	ra,4(sp)
2008f2b0:	df000017 	ldw	fp,0(sp)
2008f2b4:	dec00204 	addi	sp,sp,8
2008f2b8:	f800283a 	ret

2008f2bc <alt_msgdma_prefetcher_add_standard_desc_to_list>:
 *           descriptor.next_ptr not pointing back to itslef)
 */
int alt_msgdma_prefetcher_add_standard_desc_to_list (
	alt_msgdma_prefetcher_standard_descriptor** list,
	alt_msgdma_prefetcher_standard_descriptor* descriptor)
{
2008f2bc:	defffc04 	addi	sp,sp,-16
2008f2c0:	df000315 	stw	fp,12(sp)
2008f2c4:	df000304 	addi	fp,sp,12
2008f2c8:	e13ffe15 	stw	r4,-8(fp)
2008f2cc:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	
	if (descriptor == NULL)
2008f2d0:	e0bfff17 	ldw	r2,-4(fp)
2008f2d4:	1000021e 	bne	r2,zero,2008f2e0 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x24>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
2008f2d8:	00bffa84 	movi	r2,-22
2008f2dc:	00002f06 	br	2008f39c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (descriptor->next_desc_ptr != (alt_u32)descriptor)
2008f2e0:	e0bfff17 	ldw	r2,-4(fp)
2008f2e4:	10c00317 	ldw	r3,12(r2)
2008f2e8:	e0bfff17 	ldw	r2,-4(fp)
2008f2ec:	18800226 	beq	r3,r2,2008f2f8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x3c>
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
2008f2f0:	00bffa84 	movi	r2,-22
2008f2f4:	00002906 	br	2008f39c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (*list == NULL)
2008f2f8:	e0bffe17 	ldw	r2,-8(fp)
2008f2fc:	10800017 	ldw	r2,0(r2)
2008f300:	1000051e 	bne	r2,zero,2008f318 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x5c>
	{
		*list = descriptor;  /* make this root-node if list is empty */
2008f304:	e0bffe17 	ldw	r2,-8(fp)
2008f308:	e0ffff17 	ldw	r3,-4(fp)
2008f30c:	10c00015 	stw	r3,0(r2)
		return 0;  /* successfully added */
2008f310:	0005883a 	mov	r2,zero
2008f314:	00002106 	br	2008f39c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (*list == descriptor)
2008f318:	e0bffe17 	ldw	r2,-8(fp)
2008f31c:	10c00017 	ldw	r3,0(r2)
2008f320:	e0bfff17 	ldw	r2,-4(fp)
2008f324:	1880021e 	bne	r3,r2,2008f330 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x74>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
2008f328:	00bffa84 	movi	r2,-22
2008f32c:	00001b06 	br	2008f39c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
2008f330:	e0bffe17 	ldw	r2,-8(fp)
2008f334:	10800017 	ldw	r2,0(r2)
2008f338:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
2008f33c:	00000906 	br	2008f364 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xa8>
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
2008f340:	e0bffd17 	ldw	r2,-12(fp)
2008f344:	10c00317 	ldw	r3,12(r2)
2008f348:	e0bfff17 	ldw	r2,-4(fp)
2008f34c:	1880021e 	bne	r3,r2,2008f358 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x9c>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
2008f350:	00bffa84 	movi	r2,-22
2008f354:	00001106 	br	2008f39c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
2008f358:	e0bffd17 	ldw	r2,-12(fp)
2008f35c:	10800317 	ldw	r2,12(r2)
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		last_descr_ptr = 
2008f360:	e0bffd15 	stw	r2,-12(fp)
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
2008f364:	e0bffd17 	ldw	r2,-12(fp)
2008f368:	10800317 	ldw	r2,12(r2)
2008f36c:	e0fffe17 	ldw	r3,-8(fp)
2008f370:	18c00017 	ldw	r3,0(r3)
2008f374:	10fff21e 	bne	r2,r3,2008f340 <__flash_rwdata_start+0xffffd890>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* add this descriptor to end of list */
	last_descr_ptr->next_desc_ptr = (alt_u32)((uintptr_t)descriptor);
2008f378:	e0ffff17 	ldw	r3,-4(fp)
2008f37c:	e0bffd17 	ldw	r2,-12(fp)
2008f380:	10c00315 	stw	r3,12(r2)
	/* ensure new last pointer points the start of the list */
	descriptor->next_desc_ptr = (alt_u32)((uintptr_t)*list);  
2008f384:	e0bffe17 	ldw	r2,-8(fp)
2008f388:	10800017 	ldw	r2,0(r2)
2008f38c:	1007883a 	mov	r3,r2
2008f390:	e0bfff17 	ldw	r2,-4(fp)
2008f394:	10c00315 	stw	r3,12(r2)
	return 0; /* successfully added */
2008f398:	0005883a 	mov	r2,zero
}
2008f39c:	e037883a 	mov	sp,fp
2008f3a0:	df000017 	ldw	fp,0(sp)
2008f3a4:	dec00104 	addi	sp,sp,4
2008f3a8:	f800283a 	ret

2008f3ac <alt_msgdma_prefetcher_add_extended_desc_to_list>:

int alt_msgdma_prefetcher_add_extended_desc_to_list (
	alt_msgdma_prefetcher_extended_descriptor** list,
	alt_msgdma_prefetcher_extended_descriptor* descriptor)
{
2008f3ac:	defff804 	addi	sp,sp,-32
2008f3b0:	df000715 	stw	fp,28(sp)
2008f3b4:	df000704 	addi	fp,sp,28
2008f3b8:	e13ffe15 	stw	r4,-8(fp)
2008f3bc:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	msgdma_addr64 root_node_addr, next_node_addr;
	
	if (descriptor == NULL)
2008f3c0:	e13fff17 	ldw	r4,-4(fp)
2008f3c4:	2000021e 	bne	r4,zero,2008f3d0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x24>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
2008f3c8:	00bffa84 	movi	r2,-22
2008f3cc:	00005906 	br	2008f534 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
2008f3d0:	e13fff17 	ldw	r4,-4(fp)
2008f3d4:	2015883a 	mov	r10,r4
2008f3d8:	0017883a 	mov	r11,zero
2008f3dc:	e2bffc15 	stw	r10,-16(fp)
2008f3e0:	e2fffd15 	stw	r11,-12(fp)
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
2008f3e4:	e13fff17 	ldw	r4,-4(fp)
2008f3e8:	21400317 	ldw	r5,12(r4)
2008f3ec:	e13ffc17 	ldw	r4,-16(fp)
2008f3f0:	29000626 	beq	r5,r4,2008f40c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
2008f3f4:	e13fff17 	ldw	r4,-4(fp)
2008f3f8:	21400b17 	ldw	r5,44(r4)
2008f3fc:	e13ffd17 	ldw	r4,-12(fp)
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
2008f400:	29000226 	beq	r5,r4,2008f40c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
2008f404:	00bffa84 	movi	r2,-22
2008f408:	00004a06 	br	2008f534 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	if (*list == NULL)
2008f40c:	e13ffe17 	ldw	r4,-8(fp)
2008f410:	21000017 	ldw	r4,0(r4)
2008f414:	2000051e 	bne	r4,zero,2008f42c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x80>
	{
		*list = descriptor;  /* make this the root-node if list is empty */
2008f418:	e0bffe17 	ldw	r2,-8(fp)
2008f41c:	e0ffff17 	ldw	r3,-4(fp)
2008f420:	10c00015 	stw	r3,0(r2)
		return 0;
2008f424:	0005883a 	mov	r2,zero
2008f428:	00004206 	br	2008f534 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	if (*list == descriptor)
2008f42c:	e13ffe17 	ldw	r4,-8(fp)
2008f430:	21400017 	ldw	r5,0(r4)
2008f434:	e13fff17 	ldw	r4,-4(fp)
2008f438:	2900021e 	bne	r5,r4,2008f444 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x98>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
2008f43c:	00bffa84 	movi	r2,-22
2008f440:	00003c06 	br	2008f534 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
2008f444:	e13ffe17 	ldw	r4,-8(fp)
2008f448:	21000017 	ldw	r4,0(r4)
2008f44c:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
2008f450:	e13ffe17 	ldw	r4,-8(fp)
2008f454:	21000017 	ldw	r4,0(r4)
2008f458:	2011883a 	mov	r8,r4
2008f45c:	0013883a 	mov	r9,zero
2008f460:	e23ffa15 	stw	r8,-24(fp)
2008f464:	e27ffb15 	stw	r9,-20(fp)
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
2008f468:	00001806 	br	2008f4cc <alt_msgdma_prefetcher_add_extended_desc_to_list+0x120>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* first check if descriptor already in the list */
		next_node_addr.u64 = (uintptr_t)descriptor;
2008f46c:	e13fff17 	ldw	r4,-4(fp)
2008f470:	200d883a 	mov	r6,r4
2008f474:	000f883a 	mov	r7,zero
2008f478:	e1bffc15 	stw	r6,-16(fp)
2008f47c:	e1fffd15 	stw	r7,-12(fp)
		if ((last_descr_ptr->next_desc_ptr_low == next_node_addr.u32[0])
2008f480:	e13ff917 	ldw	r4,-28(fp)
2008f484:	21400317 	ldw	r5,12(r4)
2008f488:	e13ffc17 	ldw	r4,-16(fp)
2008f48c:	2900061e 	bne	r5,r4,2008f4a8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
			&& (last_descr_ptr->next_desc_ptr_high == next_node_addr.u32[1]))
2008f490:	e13ff917 	ldw	r4,-28(fp)
2008f494:	21400b17 	ldw	r5,44(r4)
2008f498:	e13ffd17 	ldw	r4,-12(fp)
2008f49c:	2900021e 	bne	r5,r4,2008f4a8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
2008f4a0:	00bffa84 	movi	r2,-22
2008f4a4:	00002306 	br	2008f534 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
2008f4a8:	e13ff917 	ldw	r4,-28(fp)
2008f4ac:	21000317 	ldw	r4,12(r4)
2008f4b0:	e13ffc15 	stw	r4,-16(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
2008f4b4:	e13ff917 	ldw	r4,-28(fp)
2008f4b8:	21000b17 	ldw	r4,44(r4)
2008f4bc:	e13ffd15 	stw	r4,-12(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
2008f4c0:	e13ffc17 	ldw	r4,-16(fp)
2008f4c4:	e17ffd17 	ldw	r5,-12(fp)
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
2008f4c8:	e13ff915 	stw	r4,-28(fp)
	last_descr_ptr = *list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
2008f4cc:	e13ff917 	ldw	r4,-28(fp)
2008f4d0:	21400317 	ldw	r5,12(r4)
2008f4d4:	e13ffa17 	ldw	r4,-24(fp)
2008f4d8:	29000426 	beq	r5,r4,2008f4ec <alt_msgdma_prefetcher_add_extended_desc_to_list+0x140>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
2008f4dc:	e13ff917 	ldw	r4,-28(fp)
2008f4e0:	21400b17 	ldw	r5,44(r4)
2008f4e4:	e13ffb17 	ldw	r4,-20(fp)
2008f4e8:	293fe01e 	bne	r5,r4,2008f46c <__flash_rwdata_start+0xffffd9bc>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* add this descriptor to end of list */
	next_node_addr.u64 = (uintptr_t)descriptor;
2008f4ec:	e13fff17 	ldw	r4,-4(fp)
2008f4f0:	2005883a 	mov	r2,r4
2008f4f4:	0007883a 	mov	r3,zero
2008f4f8:	e0bffc15 	stw	r2,-16(fp)
2008f4fc:	e0fffd15 	stw	r3,-12(fp)
	last_descr_ptr->next_desc_ptr_low = next_node_addr.u32[0];
2008f500:	e0fffc17 	ldw	r3,-16(fp)
2008f504:	e0bff917 	ldw	r2,-28(fp)
2008f508:	10c00315 	stw	r3,12(r2)
	last_descr_ptr->next_desc_ptr_high = next_node_addr.u32[1];
2008f50c:	e0fffd17 	ldw	r3,-12(fp)
2008f510:	e0bff917 	ldw	r2,-28(fp)
2008f514:	10c00b15 	stw	r3,44(r2)
	/* ensure new last pointer points the beginning of the list */
	descriptor->next_desc_ptr_low = root_node_addr.u32[0];
2008f518:	e0fffa17 	ldw	r3,-24(fp)
2008f51c:	e0bfff17 	ldw	r2,-4(fp)
2008f520:	10c00315 	stw	r3,12(r2)
	descriptor->next_desc_ptr_high = root_node_addr.u32[1];
2008f524:	e0fffb17 	ldw	r3,-20(fp)
2008f528:	e0bfff17 	ldw	r2,-4(fp)
2008f52c:	10c00b15 	stw	r3,44(r2)
	return 0;
2008f530:	0005883a 	mov	r2,zero
}
2008f534:	e037883a 	mov	sp,fp
2008f538:	df000017 	ldw	fp,0(sp)
2008f53c:	dec00104 	addi	sp,sp,4
2008f540:	f800283a 	ret

2008f544 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_std_list_own_by_hw_bits (
	alt_msgdma_prefetcher_standard_descriptor *list)
{
2008f544:	defffc04 	addi	sp,sp,-16
2008f548:	df000315 	stw	fp,12(sp)
2008f54c:	df000304 	addi	fp,sp,12
2008f550:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
2008f554:	e03ffe15 	stw	zero,-8(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	if (list == NULL)
2008f558:	e0bfff17 	ldw	r2,-4(fp)
2008f55c:	1000021e 	bne	r2,zero,2008f568 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x24>
	{
		return -EINVAL;  /* this list cannot be empty */
2008f560:	00bffa84 	movi	r2,-22
2008f564:	00001906 	br	2008f5cc <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x88>
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
2008f568:	e0bfff17 	ldw	r2,-4(fp)
2008f56c:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
2008f570:	00000a06 	br	2008f59c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x58>
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
2008f574:	e0bffd17 	ldw	r2,-12(fp)
2008f578:	10800717 	ldw	r2,28(r2)
2008f57c:	e0bffe15 	stw	r2,-8(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
2008f580:	e0bffe17 	ldw	r2,-8(fp)
2008f584:	10d00034 	orhi	r3,r2,16384
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
2008f588:	e0bffd17 	ldw	r2,-12(fp)
2008f58c:	10c00715 	stw	r3,28(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
2008f590:	e0bffd17 	ldw	r2,-12(fp)
2008f594:	10800317 	ldw	r2,12(r2)
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
2008f598:	e0bffd15 	stw	r2,-12(fp)
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
2008f59c:	e0bffd17 	ldw	r2,-12(fp)
2008f5a0:	10c00317 	ldw	r3,12(r2)
2008f5a4:	e0bfff17 	ldw	r2,-4(fp)
2008f5a8:	18bff21e 	bne	r3,r2,2008f574 <__flash_rwdata_start+0xffffdac4>
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
2008f5ac:	e0bffd17 	ldw	r2,-12(fp)
2008f5b0:	10800717 	ldw	r2,28(r2)
2008f5b4:	e0bffe15 	stw	r2,-8(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
2008f5b8:	e0bffe17 	ldw	r2,-8(fp)
2008f5bc:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
2008f5c0:	e0bffd17 	ldw	r2,-12(fp)
2008f5c4:	10c00715 	stw	r3,28(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	
	return 0;
2008f5c8:	0005883a 	mov	r2,zero
}
2008f5cc:	e037883a 	mov	sp,fp
2008f5d0:	df000017 	ldw	fp,0(sp)
2008f5d4:	dec00104 	addi	sp,sp,4
2008f5d8:	f800283a 	ret

2008f5dc <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits (
	alt_msgdma_prefetcher_extended_descriptor *list)
{
2008f5dc:	defff804 	addi	sp,sp,-32
2008f5e0:	df000715 	stw	fp,28(sp)
2008f5e4:	df000704 	addi	fp,sp,28
2008f5e8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
2008f5ec:	e03ffa15 	stw	zero,-24(fp)
	msgdma_addr64 root_node_addr, next_node_addr;
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	
	if (list == NULL)
2008f5f0:	e13fff17 	ldw	r4,-4(fp)
2008f5f4:	2000021e 	bne	r4,zero,2008f600 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x24>
	{
		return -EINVAL;  /* this list cannot be empty */
2008f5f8:	00bffa84 	movi	r2,-22
2008f5fc:	00002806 	br	2008f6a0 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xc4>
	}
	
	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
2008f600:	e13fff17 	ldw	r4,-4(fp)
2008f604:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;
2008f608:	e13fff17 	ldw	r4,-4(fp)
2008f60c:	2005883a 	mov	r2,r4
2008f610:	0007883a 	mov	r3,zero
2008f614:	e0bffb15 	stw	r2,-20(fp)
2008f618:	e0fffc15 	stw	r3,-16(fp)

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
2008f61c:	00001006 	br	2008f660 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x84>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
2008f620:	e0bff917 	ldw	r2,-28(fp)
2008f624:	10800f17 	ldw	r2,60(r2)
2008f628:	e0bffa15 	stw	r2,-24(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
2008f62c:	e0bffa17 	ldw	r2,-24(fp)
2008f630:	10d00034 	orhi	r3,r2,16384
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
2008f634:	e0bff917 	ldw	r2,-28(fp)
2008f638:	10c00f15 	stw	r3,60(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
2008f63c:	e0bff917 	ldw	r2,-28(fp)
2008f640:	10800317 	ldw	r2,12(r2)
2008f644:	e0bffd15 	stw	r2,-12(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
2008f648:	e0bff917 	ldw	r2,-28(fp)
2008f64c:	10800b17 	ldw	r2,44(r2)
2008f650:	e0bffe15 	stw	r2,-8(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
2008f654:	e0bffd17 	ldw	r2,-12(fp)
2008f658:	e0fffe17 	ldw	r3,-8(fp)
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
2008f65c:	e0bff915 	stw	r2,-28(fp)
	last_descr_ptr = list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
2008f660:	e0bff917 	ldw	r2,-28(fp)
2008f664:	10c00317 	ldw	r3,12(r2)
2008f668:	e0bffb17 	ldw	r2,-20(fp)
2008f66c:	18800426 	beq	r3,r2,2008f680 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xa4>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
2008f670:	e0bff917 	ldw	r2,-28(fp)
2008f674:	10c00b17 	ldw	r3,44(r2)
2008f678:	e0bffc17 	ldw	r2,-16(fp)
2008f67c:	18bfe81e 	bne	r3,r2,2008f620 <__flash_rwdata_start+0xffffdb70>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
2008f680:	e0bff917 	ldw	r2,-28(fp)
2008f684:	10800f17 	ldw	r2,60(r2)
2008f688:	e0bffa15 	stw	r2,-24(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
2008f68c:	e0bffa17 	ldw	r2,-24(fp)
2008f690:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
2008f694:	e0bff917 	ldw	r2,-28(fp)
2008f698:	10c00f15 	stw	r3,60(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	return 0;
2008f69c:	0005883a 	mov	r2,zero
}
2008f6a0:	e037883a 	mov	sp,fp
2008f6a4:	df000017 	ldw	fp,0(sp)
2008f6a8:	dec00104 	addi	sp,sp,4
2008f6ac:	f800283a 	ret

2008f6b0 <alt_msgdma_start_prefetcher_with_list_addr>:
int alt_msgdma_start_prefetcher_with_list_addr (
	alt_msgdma_dev *dev,
	alt_u64  list_addr,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
2008f6b0:	deffef04 	addi	sp,sp,-68
2008f6b4:	df001015 	stw	fp,64(sp)
2008f6b8:	df001004 	addi	fp,sp,64
2008f6bc:	e13ffb15 	stw	r4,-20(fp)
2008f6c0:	e17ffc15 	stw	r5,-16(fp)
2008f6c4:	e1bffd15 	stw	r6,-12(fp)
2008f6c8:	3807883a 	mov	r3,r7
2008f6cc:	e0800117 	ldw	r2,4(fp)
2008f6d0:	e0fffe05 	stb	r3,-8(fp)
2008f6d4:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 prefetcher_ctl = 0;
2008f6d8:	e03ff015 	stw	zero,-64(fp)
	alt_u32 dispatcher_ctl = 0;
2008f6dc:	e03ff115 	stw	zero,-60(fp)
	alt_irq_context context = 0;
2008f6e0:	e03ff215 	stw	zero,-56(fp)
	
	/* use helper struct to get easy access to hi/low address */
	msgdma_addr64 root_node_addr;
	root_node_addr.u64 = list_addr;  
2008f6e4:	e0bffc17 	ldw	r2,-16(fp)
2008f6e8:	e0bff915 	stw	r2,-28(fp)
2008f6ec:	e0bffd17 	ldw	r2,-12(fp)
2008f6f0:	e0bffa15 	stw	r2,-24(fp)
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND (dev->regs_lock, 0);
	
	/* case where prefetcher already started, return busy error */ 
	prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
2008f6f4:	e0bffb17 	ldw	r2,-20(fp)
2008f6f8:	10800617 	ldw	r2,24(r2)
2008f6fc:	10800037 	ldwio	r2,0(r2)
2008f700:	e0bff015 	stw	r2,-64(fp)
	if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
2008f704:	e0bff017 	ldw	r2,-64(fp)
2008f708:	1080004c 	andi	r2,r2,1
2008f70c:	10000226 	beq	r2,zero,2008f718 <alt_msgdma_start_prefetcher_with_list_addr+0x68>
		/* release the registers semaphore */
		ALT_SEM_POST (dev->regs_lock);
		return -EBUSY;
2008f710:	00bffc04 	movi	r2,-16
2008f714:	00009206 	br	2008f960 <alt_msgdma_start_prefetcher_with_list_addr+0x2b0>
	}
		
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	   read or write masters  */
	/* stop issuing more descriptors */
	dispatcher_ctl = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
2008f718:	00800804 	movi	r2,32
2008f71c:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2008f720:	0005303a 	rdctl	r2,status
2008f724:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2008f728:	e0fff317 	ldw	r3,-52(fp)
2008f72c:	00bfff84 	movi	r2,-2
2008f730:	1884703a 	and	r2,r3,r2
2008f734:	1001703a 	wrctl	status,r2
  
  return context;
2008f738:	e0bff317 	ldw	r2,-52(fp)
	
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
2008f73c:	e0bff215 	stw	r2,-56(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
2008f740:	e0bffb17 	ldw	r2,-20(fp)
2008f744:	10800317 	ldw	r2,12(r2)
2008f748:	10800104 	addi	r2,r2,4
2008f74c:	e0fff117 	ldw	r3,-60(fp)
2008f750:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS( dev->csr_base, 
2008f754:	e0bffb17 	ldw	r2,-20(fp)
2008f758:	10800317 	ldw	r2,12(r2)
2008f75c:	e0fffb17 	ldw	r3,-20(fp)
2008f760:	18c00317 	ldw	r3,12(r3)
2008f764:	18c00037 	ldwio	r3,0(r3)
2008f768:	10c00035 	stwio	r3,0(r2)
2008f76c:	e0bff217 	ldw	r2,-56(fp)
2008f770:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2008f774:	e0bff417 	ldw	r2,-48(fp)
2008f778:	1001703a 	wrctl	status,r2
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up dispatcher to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if(dev->callback)
2008f77c:	e0bffb17 	ldw	r2,-20(fp)
2008f780:	10800b17 	ldw	r2,44(r2)
2008f784:	10002326 	beq	r2,zero,2008f814 <alt_msgdma_start_prefetcher_with_list_addr+0x164>
	{
		dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
2008f788:	e0bffb17 	ldw	r2,-20(fp)
2008f78c:	10c00d17 	ldw	r3,52(r2)
2008f790:	e0bff117 	ldw	r2,-60(fp)
2008f794:	1884b03a 	or	r2,r3,r2
2008f798:	10800514 	ori	r2,r2,20
2008f79c:	e0bff115 	stw	r2,-60(fp)
				| ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
		dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
2008f7a0:	e0fff117 	ldw	r3,-60(fp)
2008f7a4:	00bff7c4 	movi	r2,-33
2008f7a8:	1884703a 	and	r2,r3,r2
2008f7ac:	e0bff115 	stw	r2,-60(fp)
		
		prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
2008f7b0:	e0bff017 	ldw	r2,-64(fp)
2008f7b4:	10800214 	ori	r2,r2,8
2008f7b8:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2008f7bc:	0005303a 	rdctl	r2,status
2008f7c0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2008f7c4:	e0fff517 	ldw	r3,-44(fp)
2008f7c8:	00bfff84 	movi	r2,-2
2008f7cc:	1884703a 	and	r2,r3,r2
2008f7d0:	1001703a 	wrctl	status,r2
  
  return context;
2008f7d4:	e0bff517 	ldw	r2,-44(fp)
	    /* making sure the read-modify-write below can't be pre-empted */
	    context = alt_irq_disable_all(); 
2008f7d8:	e0bff215 	stw	r2,-56(fp)
	    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
2008f7dc:	e0bffb17 	ldw	r2,-20(fp)
2008f7e0:	10800317 	ldw	r2,12(r2)
2008f7e4:	10800104 	addi	r2,r2,4
2008f7e8:	e0fff117 	ldw	r3,-60(fp)
2008f7ec:	10c00035 	stwio	r3,0(r2)
		IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
2008f7f0:	e0bffb17 	ldw	r2,-20(fp)
2008f7f4:	10800617 	ldw	r2,24(r2)
2008f7f8:	e0fff017 	ldw	r3,-64(fp)
2008f7fc:	10c00035 	stwio	r3,0(r2)
2008f800:	e0bff217 	ldw	r2,-56(fp)
2008f804:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2008f808:	e0bff617 	ldw	r2,-40(fp)
2008f80c:	1001703a 	wrctl	status,r2
2008f810:	00002306 	br	2008f8a0 <alt_msgdma_start_prefetcher_with_list_addr+0x1f0>
	  *   - Stop on an error with any particular descriptor
	  *   - Disable interrupt generation
	  */
	 else
	 {
		 dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
2008f814:	e0bffb17 	ldw	r2,-20(fp)
2008f818:	10c00d17 	ldw	r3,52(r2)
2008f81c:	e0bff117 	ldw	r2,-60(fp)
2008f820:	1884b03a 	or	r2,r3,r2
2008f824:	10800114 	ori	r2,r2,4
2008f828:	e0bff115 	stw	r2,-60(fp)
		 dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
2008f82c:	e0fff117 	ldw	r3,-60(fp)
2008f830:	00bff3c4 	movi	r2,-49
2008f834:	1884703a 	and	r2,r3,r2
2008f838:	e0bff115 	stw	r2,-60(fp)
				 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
2008f83c:	e0fff017 	ldw	r3,-64(fp)
2008f840:	00bffdc4 	movi	r2,-9
2008f844:	1884703a 	and	r2,r3,r2
2008f848:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2008f84c:	0005303a 	rdctl	r2,status
2008f850:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2008f854:	e0fff717 	ldw	r3,-36(fp)
2008f858:	00bfff84 	movi	r2,-2
2008f85c:	1884703a 	and	r2,r3,r2
2008f860:	1001703a 	wrctl	status,r2
  
  return context;
2008f864:	e0bff717 	ldw	r2,-36(fp)
	     /* making sure the read-modify-write below can't be pre-empted */
	     context = alt_irq_disable_all();
2008f868:	e0bff215 	stw	r2,-56(fp)
	     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
2008f86c:	e0bffb17 	ldw	r2,-20(fp)
2008f870:	10800317 	ldw	r2,12(r2)
2008f874:	10800104 	addi	r2,r2,4
2008f878:	e0fff117 	ldw	r3,-60(fp)
2008f87c:	10c00035 	stwio	r3,0(r2)
	     IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
2008f880:	e0bffb17 	ldw	r2,-20(fp)
2008f884:	10800617 	ldw	r2,24(r2)
2008f888:	e0fff017 	ldw	r3,-64(fp)
2008f88c:	10c00035 	stwio	r3,0(r2)
2008f890:	e0bff217 	ldw	r2,-56(fp)
2008f894:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2008f898:	e0bff817 	ldw	r2,-32(fp)
2008f89c:	1001703a 	wrctl	status,r2
	     alt_irq_enable_all(context);
	 }   
	
	 /* set next descriptor registers to point to the list root-node */
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_LOW(dev->prefetcher_base,
2008f8a0:	e0bffb17 	ldw	r2,-20(fp)
2008f8a4:	10800617 	ldw	r2,24(r2)
2008f8a8:	10800104 	addi	r2,r2,4
2008f8ac:	e0fff917 	ldw	r3,-28(fp)
2008f8b0:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[0]);
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
2008f8b4:	e0bffb17 	ldw	r2,-20(fp)
2008f8b8:	10800617 	ldw	r2,24(r2)
2008f8bc:	10800204 	addi	r2,r2,8
2008f8c0:	e0fffa17 	ldw	r3,-24(fp)
2008f8c4:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[1]);
		
	 /* set park-mode */
	 if (park_mode_en){
2008f8c8:	e0bffe03 	ldbu	r2,-8(fp)
2008f8cc:	10000426 	beq	r2,zero,2008f8e0 <alt_msgdma_start_prefetcher_with_list_addr+0x230>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
2008f8d0:	e0bff017 	ldw	r2,-64(fp)
2008f8d4:	10800414 	ori	r2,r2,16
2008f8d8:	e0bff015 	stw	r2,-64(fp)
2008f8dc:	00000406 	br	2008f8f0 <alt_msgdma_start_prefetcher_with_list_addr+0x240>
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
2008f8e0:	e0fff017 	ldw	r3,-64(fp)
2008f8e4:	00bffbc4 	movi	r2,-17
2008f8e8:	1884703a 	and	r2,r3,r2
2008f8ec:	e0bff015 	stw	r2,-64(fp)
	 }
	 
	 /* set poll-en */
	 if (poll_en){
2008f8f0:	e0bfff03 	ldbu	r2,-4(fp)
2008f8f4:	10000e26 	beq	r2,zero,2008f930 <alt_msgdma_start_prefetcher_with_list_addr+0x280>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
2008f8f8:	e0bff017 	ldw	r2,-64(fp)
2008f8fc:	10800094 	ori	r2,r2,2
2008f900:	e0bff015 	stw	r2,-64(fp)
		 if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
2008f904:	e0bffb17 	ldw	r2,-20(fp)
2008f908:	10800617 	ldw	r2,24(r2)
2008f90c:	10800304 	addi	r2,r2,12
2008f910:	10800037 	ldwio	r2,0(r2)
2008f914:	10000a1e 	bne	r2,zero,2008f940 <alt_msgdma_start_prefetcher_with_list_addr+0x290>
				 dev->prefetcher_base) == 0){
			 /* set poll frequency to some non-zero default value */
			 IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
2008f918:	e0bffb17 	ldw	r2,-20(fp)
2008f91c:	10800617 	ldw	r2,24(r2)
2008f920:	10800304 	addi	r2,r2,12
2008f924:	00c03fc4 	movi	r3,255
2008f928:	10c00035 	stwio	r3,0(r2)
2008f92c:	00000406 	br	2008f940 <alt_msgdma_start_prefetcher_with_list_addr+0x290>
					 dev->prefetcher_base, 0xFF);
		 }
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_CLR_MASK; 
2008f930:	e0fff017 	ldw	r3,-64(fp)
2008f934:	00bfff44 	movi	r2,-3
2008f938:	1884703a 	and	r2,r3,r2
2008f93c:	e0bff015 	stw	r2,-64(fp)
	 }
	 
	 /* set the prefetcher run bit */
	 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_RUN_SET_MASK;
2008f940:	e0bff017 	ldw	r2,-64(fp)
2008f944:	10800054 	ori	r2,r2,1
2008f948:	e0bff015 	stw	r2,-64(fp)
	 /* start the dma since run bit is set */
	 IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
2008f94c:	e0bffb17 	ldw	r2,-20(fp)
2008f950:	10800617 	ldw	r2,24(r2)
2008f954:	e0fff017 	ldw	r3,-64(fp)
2008f958:	10c00035 	stwio	r3,0(r2)
	  * Now that access to the registers is complete, release the registers
	  * semaphore so that other threads can access the registers.
	  */
	 ALT_SEM_POST (dev->regs_lock);
	 
	 return 0;
2008f95c:	0005883a 	mov	r2,zero
}
2008f960:	e037883a 	mov	sp,fp
2008f964:	df000017 	ldw	fp,0(sp)
2008f968:	dec00104 	addi	sp,sp,4
2008f96c:	f800283a 	ret

2008f970 <alt_msgdma_start_prefetcher_with_std_desc_list>:
int alt_msgdma_start_prefetcher_with_std_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{	
2008f970:	defff704 	addi	sp,sp,-36
2008f974:	dfc00815 	stw	ra,32(sp)
2008f978:	df000715 	stw	fp,28(sp)
2008f97c:	dc400615 	stw	r17,24(sp)
2008f980:	dc000515 	stw	r16,20(sp)
2008f984:	df000704 	addi	fp,sp,28
2008f988:	e13ffa15 	stw	r4,-24(fp)
2008f98c:	e17ffb15 	stw	r5,-20(fp)
2008f990:	3007883a 	mov	r3,r6
2008f994:	3805883a 	mov	r2,r7
2008f998:	e0fffc05 	stb	r3,-16(fp)
2008f99c:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_std_list_own_by_hw_bits(list) != 0){
2008f9a0:	e13ffb17 	ldw	r4,-20(fp)
2008f9a4:	008f5440 	call	2008f544 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>
2008f9a8:	10000226 	beq	r2,zero,2008f9b4 <alt_msgdma_start_prefetcher_with_std_desc_list+0x44>
		return -EINVAL;
2008f9ac:	00bffa84 	movi	r2,-22
2008f9b0:	00000b06 	br	2008f9e0 <alt_msgdma_start_prefetcher_with_std_desc_list+0x70>
	}
	
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list,
2008f9b4:	e0bffb17 	ldw	r2,-20(fp)
2008f9b8:	1021883a 	mov	r16,r2
2008f9bc:	0023883a 	mov	r17,zero
2008f9c0:	e0fffc03 	ldbu	r3,-16(fp)
2008f9c4:	e0bffd03 	ldbu	r2,-12(fp)
2008f9c8:	d8800015 	stw	r2,0(sp)
2008f9cc:	e13ffa17 	ldw	r4,-24(fp)
2008f9d0:	800b883a 	mov	r5,r16
2008f9d4:	880d883a 	mov	r6,r17
2008f9d8:	180f883a 	mov	r7,r3
2008f9dc:	008f6b00 	call	2008f6b0 <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
2008f9e0:	e6fffe04 	addi	sp,fp,-8
2008f9e4:	dfc00317 	ldw	ra,12(sp)
2008f9e8:	df000217 	ldw	fp,8(sp)
2008f9ec:	dc400117 	ldw	r17,4(sp)
2008f9f0:	dc000017 	ldw	r16,0(sp)
2008f9f4:	dec00404 	addi	sp,sp,16
2008f9f8:	f800283a 	ret

2008f9fc <alt_msgdma_start_prefetcher_with_extd_desc_list>:
int alt_msgdma_start_prefetcher_with_extd_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_extended_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
2008f9fc:	defff704 	addi	sp,sp,-36
2008fa00:	dfc00815 	stw	ra,32(sp)
2008fa04:	df000715 	stw	fp,28(sp)
2008fa08:	dc400615 	stw	r17,24(sp)
2008fa0c:	dc000515 	stw	r16,20(sp)
2008fa10:	df000704 	addi	fp,sp,28
2008fa14:	e13ffa15 	stw	r4,-24(fp)
2008fa18:	e17ffb15 	stw	r5,-20(fp)
2008fa1c:	3007883a 	mov	r3,r6
2008fa20:	3805883a 	mov	r2,r7
2008fa24:	e0fffc05 	stb	r3,-16(fp)
2008fa28:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list) != 0){
2008fa2c:	e13ffb17 	ldw	r4,-20(fp)
2008fa30:	008f5dc0 	call	2008f5dc <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>
2008fa34:	10000226 	beq	r2,zero,2008fa40 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x44>
		return -EINVAL;
2008fa38:	00bffa84 	movi	r2,-22
2008fa3c:	00000b06 	br	2008fa6c <alt_msgdma_start_prefetcher_with_extd_desc_list+0x70>
	}
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list, 
2008fa40:	e0bffb17 	ldw	r2,-20(fp)
2008fa44:	1021883a 	mov	r16,r2
2008fa48:	0023883a 	mov	r17,zero
2008fa4c:	e0fffc03 	ldbu	r3,-16(fp)
2008fa50:	e0bffd03 	ldbu	r2,-12(fp)
2008fa54:	d8800015 	stw	r2,0(sp)
2008fa58:	e13ffa17 	ldw	r4,-24(fp)
2008fa5c:	800b883a 	mov	r5,r16
2008fa60:	880d883a 	mov	r6,r17
2008fa64:	180f883a 	mov	r7,r3
2008fa68:	008f6b00 	call	2008f6b0 <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
2008fa6c:	e6fffe04 	addi	sp,fp,-8
2008fa70:	dfc00317 	ldw	ra,12(sp)
2008fa74:	df000217 	ldw	fp,8(sp)
2008fa78:	dc400117 	ldw	r17,4(sp)
2008fa7c:	dc000017 	ldw	r16,0(sp)
2008fa80:	dec00404 	addi	sp,sp,16
2008fa84:	f800283a 	ret

2008fa88 <alt_msgdma_open>:
 * Returns:
 * - Pointer to msgdma device instance structure, or null if the device
 *   could not be opened.
 */
alt_msgdma_dev* alt_msgdma_open (const char* name)
{
2008fa88:	defffc04 	addi	sp,sp,-16
2008fa8c:	dfc00315 	stw	ra,12(sp)
2008fa90:	df000215 	stw	fp,8(sp)
2008fa94:	df000204 	addi	fp,sp,8
2008fa98:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev* dev = NULL;
2008fa9c:	e03ffe15 	stw	zero,-8(fp)

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
2008faa0:	e13fff17 	ldw	r4,-4(fp)
2008faa4:	d1600e04 	addi	r5,gp,-32712
2008faa8:	00902180 	call	20090218 <alt_find_dev>
2008faac:	e0bffe15 	stw	r2,-8(fp)

    if (NULL == dev)
2008fab0:	e0bffe17 	ldw	r2,-8(fp)
2008fab4:	1000041e 	bne	r2,zero,2008fac8 <alt_msgdma_open+0x40>
    {
        ALT_ERRNO = ENODEV;
2008fab8:	008df000 	call	2008df00 <alt_get_errno>
2008fabc:	1007883a 	mov	r3,r2
2008fac0:	008004c4 	movi	r2,19
2008fac4:	18800015 	stw	r2,0(r3)
    }

    return dev;
2008fac8:	e0bffe17 	ldw	r2,-8(fp)
}
2008facc:	e037883a 	mov	sp,fp
2008fad0:	dfc00117 	ldw	ra,4(sp)
2008fad4:	df000017 	ldw	fp,0(sp)
2008fad8:	dec00204 	addi	sp,sp,8
2008fadc:	f800283a 	ret

2008fae0 <alt_msgdma_init>:
 * This routine disables interrupts, descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_msgdma_init (alt_msgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
2008fae0:	defff804 	addi	sp,sp,-32
2008fae4:	dfc00715 	stw	ra,28(sp)
2008fae8:	df000615 	stw	fp,24(sp)
2008faec:	df000604 	addi	fp,sp,24
2008faf0:	e13ffd15 	stw	r4,-12(fp)
2008faf4:	e17ffe15 	stw	r5,-8(fp)
2008faf8:	e1bfff15 	stw	r6,-4(fp)
    extern alt_llist alt_msgdma_list;
    alt_u32 temporary_control;
    int error;

    if (dev->prefetcher_enable)
2008fafc:	e0bffd17 	ldw	r2,-12(fp)
2008fb00:	10801783 	ldbu	r2,94(r2)
2008fb04:	10803fcc 	andi	r2,r2,255
2008fb08:	10000b26 	beq	r2,zero,2008fb38 <alt_msgdma_init+0x58>
    {
    	/* start prefetcher reset sequence */
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, 
2008fb0c:	e0bffd17 	ldw	r2,-12(fp)
2008fb10:	10800617 	ldw	r2,24(r2)
2008fb14:	00c00104 	movi	r3,4
2008fb18:	10c00035 	stwio	r3,0(r2)
    			ALT_MSGDMA_PREFETCHER_CTRL_RESET_SET_MASK);
    	/* wait until hw clears the bit */
    	while(ALT_MSGDMA_PREFETCHER_CTRL_RESET_GET(
2008fb1c:	0001883a 	nop
2008fb20:	e0bffd17 	ldw	r2,-12(fp)
2008fb24:	10800617 	ldw	r2,24(r2)
2008fb28:	10800037 	ldwio	r2,0(r2)
2008fb2c:	1080010c 	andi	r2,r2,4
2008fb30:	1005d0ba 	srai	r2,r2,2
2008fb34:	103ffa1e 	bne	r2,zero,2008fb20 <__flash_rwdata_start+0xffffe070>
    }    
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
2008fb38:	e0bffd17 	ldw	r2,-12(fp)
2008fb3c:	10800317 	ldw	r2,12(r2)
2008fb40:	10800104 	addi	r2,r2,4
2008fb44:	00c00084 	movi	r3,2
2008fb48:	10c00035 	stwio	r3,0(r2)
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
2008fb4c:	0001883a 	nop
2008fb50:	e0bffd17 	ldw	r2,-12(fp)
2008fb54:	10800317 	ldw	r2,12(r2)
2008fb58:	10800037 	ldwio	r2,0(r2)
    		& ALTERA_MSGDMA_CSR_RESET_STATE_MASK));
2008fb5c:	1080100c 	andi	r2,r2,64
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
2008fb60:	103ffb1e 	bne	r2,zero,2008fb50 <__flash_rwdata_start+0xffffe0a0>
    * Disable interrupts, halt descriptor processing,
    * and clear status register content
    */

    /* disable global interrupt */
    temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
2008fb64:	e0bffd17 	ldw	r2,-12(fp)
2008fb68:	10800317 	ldw	r2,12(r2)
2008fb6c:	10800104 	addi	r2,r2,4
2008fb70:	10800037 	ldwio	r2,0(r2)
2008fb74:	1007883a 	mov	r3,r2
2008fb78:	00bffbc4 	movi	r2,-17
2008fb7c:	1884703a 	and	r2,r3,r2
2008fb80:	e0bffb15 	stw	r2,-20(fp)
    		& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    /* stopping descriptor */
    temporary_control |= ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
2008fb84:	e0bffb17 	ldw	r2,-20(fp)
2008fb88:	10800814 	ori	r2,r2,32
2008fb8c:	e0bffb15 	stw	r2,-20(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
2008fb90:	e0bffd17 	ldw	r2,-12(fp)
2008fb94:	10800317 	ldw	r2,12(r2)
2008fb98:	10800104 	addi	r2,r2,4
2008fb9c:	e0fffb17 	ldw	r3,-20(fp)
2008fba0:	10c00035 	stwio	r3,0(r2)

    /* clear the CSR status register */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base, 
2008fba4:	e0bffd17 	ldw	r2,-12(fp)
2008fba8:	10800317 	ldw	r2,12(r2)
2008fbac:	e0fffd17 	ldw	r3,-12(fp)
2008fbb0:	18c00317 	ldw	r3,12(r3)
2008fbb4:	18c00037 	ldwio	r3,0(r3)
2008fbb8:	10c00035 	stwio	r3,0(r2)
    		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    
    if (dev->prefetcher_enable)
2008fbbc:	e0bffd17 	ldw	r2,-12(fp)
2008fbc0:	10801783 	ldbu	r2,94(r2)
2008fbc4:	10803fcc 	andi	r2,r2,255
2008fbc8:	10000826 	beq	r2,zero,2008fbec <alt_msgdma_init+0x10c>
    {
    	/* clear all status bits that are set, since theyre W1C */
    	IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base, 
2008fbcc:	e0bffd17 	ldw	r2,-12(fp)
2008fbd0:	10800617 	ldw	r2,24(r2)
2008fbd4:	10800404 	addi	r2,r2,16
2008fbd8:	e0fffd17 	ldw	r3,-12(fp)
2008fbdc:	18c00617 	ldw	r3,24(r3)
2008fbe0:	18c00404 	addi	r3,r3,16
2008fbe4:	18c00037 	ldwio	r3,0(r3)
2008fbe8:	10c00035 	stwio	r3,0(r2)
    			IORD_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base));
    }

    /* Register this instance of the msgdma controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_msgdma_list);
2008fbec:	e13ffd17 	ldw	r4,-12(fp)
2008fbf0:	d1600e04 	addi	r5,gp,-32712
2008fbf4:	00900bc0 	call	200900bc <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
2008fbf8:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
2008fbfc:	e0bffc15 	stw	r2,-16(fp)
            
    if (!error)
2008fc00:	e0bffc17 	ldw	r2,-16(fp)
2008fc04:	1000081e 	bne	r2,zero,2008fc28 <alt_msgdma_init+0x148>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
2008fc08:	d8000015 	stw	zero,0(sp)
2008fc0c:	e13ffe17 	ldw	r4,-8(fp)
2008fc10:	e17fff17 	ldw	r5,-4(fp)
2008fc14:	01880274 	movhi	r6,8201
2008fc18:	31b84404 	addi	r6,r6,-7920
2008fc1c:	e1fffd17 	ldw	r7,-12(fp)
2008fc20:	00902d80 	call	200902d8 <alt_ic_isr_register>
2008fc24:	00000306 	br	2008fc34 <alt_msgdma_init+0x154>
    }
    else
    {
        alt_printf("failed to create semaphores\n");
2008fc28:	01000034 	movhi	r4,0
2008fc2c:	21014504 	addi	r4,r4,1300
2008fc30:	00909540 	call	20090954 <alt_printf>
    }
    
    return;
2008fc34:	0001883a 	nop

}
2008fc38:	e037883a 	mov	sp,fp
2008fc3c:	dfc00117 	ldw	ra,4(sp)
2008fc40:	df000017 	ldw	fp,0(sp)
2008fc44:	dec00204 	addi	sp,sp,8
2008fc48:	f800283a 	ret

2008fc4c <alt_msgdma_register_callback>:
void alt_msgdma_register_callback(
	alt_msgdma_dev *dev,
	alt_msgdma_callback callback,
	alt_u32 control,
	void *context)
{
2008fc4c:	defffb04 	addi	sp,sp,-20
2008fc50:	df000415 	stw	fp,16(sp)
2008fc54:	df000404 	addi	fp,sp,16
2008fc58:	e13ffc15 	stw	r4,-16(fp)
2008fc5c:	e17ffd15 	stw	r5,-12(fp)
2008fc60:	e1bffe15 	stw	r6,-8(fp)
2008fc64:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
2008fc68:	e0bffc17 	ldw	r2,-16(fp)
2008fc6c:	e0fffd17 	ldw	r3,-12(fp)
2008fc70:	10c00b15 	stw	r3,44(r2)
    dev->callback_context = context;
2008fc74:	e0bffc17 	ldw	r2,-16(fp)
2008fc78:	e0ffff17 	ldw	r3,-4(fp)
2008fc7c:	10c00c15 	stw	r3,48(r2)
    dev->control          = control;
2008fc80:	e0bffc17 	ldw	r2,-16(fp)
2008fc84:	e0fffe17 	ldw	r3,-8(fp)
2008fc88:	10c00d15 	stw	r3,52(r2)

    return ;
2008fc8c:	0001883a 	nop
}
2008fc90:	e037883a 	mov	sp,fp
2008fc94:	df000017 	ldw	fp,0(sp)
2008fc98:	dec00104 	addi	sp,sp,4
2008fc9c:	f800283a 	ret

2008fca0 <alt_msgdma_standard_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_standard_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
2008fca0:	defffc04 	addi	sp,sp,-16
2008fca4:	dfc00315 	stw	ra,12(sp)
2008fca8:	df000215 	stw	fp,8(sp)
2008fcac:	df000204 	addi	fp,sp,8
2008fcb0:	e13ffe15 	stw	r4,-8(fp)
2008fcb4:	e17fff15 	stw	r5,-4(fp)
   /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
    return alt_msgdma_descriptor_async_transfer(dev, desc, NULL);
2008fcb8:	e13ffe17 	ldw	r4,-8(fp)
2008fcbc:	e17fff17 	ldw	r5,-4(fp)
2008fcc0:	000d883a 	mov	r6,zero
2008fcc4:	008e4740 	call	2008e474 <alt_msgdma_descriptor_async_transfer>

}
2008fcc8:	e037883a 	mov	sp,fp
2008fccc:	dfc00117 	ldw	ra,4(sp)
2008fcd0:	df000017 	ldw	fp,0(sp)
2008fcd4:	dec00204 	addi	sp,sp,8
2008fcd8:	f800283a 	ret

2008fcdc <alt_msgdma_extended_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_extended_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
2008fcdc:	defffc04 	addi	sp,sp,-16
2008fce0:	dfc00315 	stw	ra,12(sp)
2008fce4:	df000215 	stw	fp,8(sp)
2008fce8:	df000204 	addi	fp,sp,8
2008fcec:	e13ffe15 	stw	r4,-8(fp)
2008fcf0:	e17fff15 	stw	r5,-4(fp)
    /*
    * Error detection/handling should be performed at the application
    * or callback level as appropriate.
    */
    return alt_msgdma_descriptor_async_transfer(dev, NULL, desc);
2008fcf4:	e13ffe17 	ldw	r4,-8(fp)
2008fcf8:	000b883a 	mov	r5,zero
2008fcfc:	e1bfff17 	ldw	r6,-4(fp)
2008fd00:	008e4740 	call	2008e474 <alt_msgdma_descriptor_async_transfer>
}
2008fd04:	e037883a 	mov	sp,fp
2008fd08:	dfc00117 	ldw	ra,4(sp)
2008fd0c:	df000017 	ldw	fp,0(sp)
2008fd10:	dec00204 	addi	sp,sp,8
2008fd14:	f800283a 	ret

2008fd18 <alt_msgdma_standard_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_standard_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
2008fd18:	defffc04 	addi	sp,sp,-16
2008fd1c:	dfc00315 	stw	ra,12(sp)
2008fd20:	df000215 	stw	fp,8(sp)
2008fd24:	df000204 	addi	fp,sp,8
2008fd28:	e13ffe15 	stw	r4,-8(fp)
2008fd2c:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, desc, NULL);
2008fd30:	e13ffe17 	ldw	r4,-8(fp)
2008fd34:	e17fff17 	ldw	r5,-4(fp)
2008fd38:	000d883a 	mov	r6,zero
2008fd3c:	008e7440 	call	2008e744 <alt_msgdma_descriptor_sync_transfer>
}
2008fd40:	e037883a 	mov	sp,fp
2008fd44:	dfc00117 	ldw	ra,4(sp)
2008fd48:	df000017 	ldw	fp,0(sp)
2008fd4c:	dec00204 	addi	sp,sp,8
2008fd50:	f800283a 	ret

2008fd54 <alt_msgdma_extended_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_extended_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
2008fd54:	defffc04 	addi	sp,sp,-16
2008fd58:	dfc00315 	stw	ra,12(sp)
2008fd5c:	df000215 	stw	fp,8(sp)
2008fd60:	df000204 	addi	fp,sp,8
2008fd64:	e13ffe15 	stw	r4,-8(fp)
2008fd68:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, NULL, desc);
2008fd6c:	e13ffe17 	ldw	r4,-8(fp)
2008fd70:	000b883a 	mov	r5,zero
2008fd74:	e1bfff17 	ldw	r6,-4(fp)
2008fd78:	008e7440 	call	2008e744 <alt_msgdma_descriptor_sync_transfer>
}
2008fd7c:	e037883a 	mov	sp,fp
2008fd80:	dfc00117 	ldw	ra,4(sp)
2008fd84:	df000017 	ldw	fp,0(sp)
2008fd88:	dec00204 	addi	sp,sp,8
2008fd8c:	f800283a 	ret

2008fd90 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
2008fd90:	defff504 	addi	sp,sp,-44
2008fd94:	df000a15 	stw	fp,40(sp)
2008fd98:	df000a04 	addi	fp,sp,40
2008fd9c:	e13ffc15 	stw	r4,-16(fp)
2008fda0:	e17ffd15 	stw	r5,-12(fp)
2008fda4:	e1bffe15 	stw	r6,-8(fp)
2008fda8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
2008fdac:	e03ff615 	stw	zero,-40(fp)
2008fdb0:	00800034 	movhi	r2,0
2008fdb4:	10883004 	addi	r2,r2,8384
2008fdb8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
2008fdbc:	10003f26 	beq	r2,zero,2008febc <alt_alarm_start+0x12c>
  {
    if (alarm)
2008fdc0:	e0bffc17 	ldw	r2,-16(fp)
2008fdc4:	10003b26 	beq	r2,zero,2008feb4 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
2008fdc8:	e0bffc17 	ldw	r2,-16(fp)
2008fdcc:	e0fffe17 	ldw	r3,-8(fp)
2008fdd0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
2008fdd4:	e0bffc17 	ldw	r2,-16(fp)
2008fdd8:	e0ffff17 	ldw	r3,-4(fp)
2008fddc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2008fde0:	0005303a 	rdctl	r2,status
2008fde4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2008fde8:	e0fff817 	ldw	r3,-32(fp)
2008fdec:	00bfff84 	movi	r2,-2
2008fdf0:	1884703a 	and	r2,r3,r2
2008fdf4:	1001703a 	wrctl	status,r2
  
  return context;
2008fdf8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
2008fdfc:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
2008fe00:	00800034 	movhi	r2,0
2008fe04:	10883104 	addi	r2,r2,8388
2008fe08:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
2008fe0c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
2008fe10:	e0fffd17 	ldw	r3,-12(fp)
2008fe14:	e0bff617 	ldw	r2,-40(fp)
2008fe18:	1885883a 	add	r2,r3,r2
2008fe1c:	10c00044 	addi	r3,r2,1
2008fe20:	e0bffc17 	ldw	r2,-16(fp)
2008fe24:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
2008fe28:	e0bffc17 	ldw	r2,-16(fp)
2008fe2c:	10c00217 	ldw	r3,8(r2)
2008fe30:	e0bff617 	ldw	r2,-40(fp)
2008fe34:	1880042e 	bgeu	r3,r2,2008fe48 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
2008fe38:	e0bffc17 	ldw	r2,-16(fp)
2008fe3c:	00c00044 	movi	r3,1
2008fe40:	10c00405 	stb	r3,16(r2)
2008fe44:	00000206 	br	2008fe50 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
2008fe48:	e0bffc17 	ldw	r2,-16(fp)
2008fe4c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
2008fe50:	e0fffc17 	ldw	r3,-16(fp)
2008fe54:	00800034 	movhi	r2,0
2008fe58:	10882004 	addi	r2,r2,8320
2008fe5c:	e0bff915 	stw	r2,-28(fp)
2008fe60:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
2008fe64:	e0bffa17 	ldw	r2,-24(fp)
2008fe68:	e0fff917 	ldw	r3,-28(fp)
2008fe6c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
2008fe70:	e0bff917 	ldw	r2,-28(fp)
2008fe74:	10c00017 	ldw	r3,0(r2)
2008fe78:	e0bffa17 	ldw	r2,-24(fp)
2008fe7c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
2008fe80:	e0bff917 	ldw	r2,-28(fp)
2008fe84:	10800017 	ldw	r2,0(r2)
2008fe88:	e0fffa17 	ldw	r3,-24(fp)
2008fe8c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
2008fe90:	e0bff917 	ldw	r2,-28(fp)
2008fe94:	e0fffa17 	ldw	r3,-24(fp)
2008fe98:	10c00015 	stw	r3,0(r2)
2008fe9c:	e0bff717 	ldw	r2,-36(fp)
2008fea0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2008fea4:	e0bffb17 	ldw	r2,-20(fp)
2008fea8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
2008feac:	0005883a 	mov	r2,zero
2008feb0:	00000306 	br	2008fec0 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
2008feb4:	00bffa84 	movi	r2,-22
2008feb8:	00000106 	br	2008fec0 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
2008febc:	00bfde84 	movi	r2,-134
  }
}
2008fec0:	e037883a 	mov	sp,fp
2008fec4:	df000017 	ldw	fp,0(sp)
2008fec8:	dec00104 	addi	sp,sp,4
2008fecc:	f800283a 	ret

2008fed0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
2008fed0:	defffa04 	addi	sp,sp,-24
2008fed4:	dfc00515 	stw	ra,20(sp)
2008fed8:	df000415 	stw	fp,16(sp)
2008fedc:	df000404 	addi	fp,sp,16
2008fee0:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
2008fee4:	008000c4 	movi	r2,3
2008fee8:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
2008feec:	e0fffd17 	ldw	r3,-12(fp)
2008fef0:	008003f4 	movhi	r2,15
2008fef4:	10909004 	addi	r2,r2,16960
2008fef8:	1885383a 	mul	r2,r3,r2
2008fefc:	0101dcf4 	movhi	r4,1907
2008ff00:	21165004 	addi	r4,r4,22848
2008ff04:	100b883a 	mov	r5,r2
2008ff08:	008a2480 	call	2008a248 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
2008ff0c:	01200034 	movhi	r4,32768
2008ff10:	213fffc4 	addi	r4,r4,-1
2008ff14:	100b883a 	mov	r5,r2
2008ff18:	008a2480 	call	2008a248 <__udivsi3>
2008ff1c:	e13fff17 	ldw	r4,-4(fp)
2008ff20:	100b883a 	mov	r5,r2
2008ff24:	008a2480 	call	2008a248 <__udivsi3>
2008ff28:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
2008ff2c:	e0bffe17 	ldw	r2,-8(fp)
2008ff30:	10002a26 	beq	r2,zero,2008ffdc <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
2008ff34:	e03ffc15 	stw	zero,-16(fp)
2008ff38:	00001706 	br	2008ff98 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
2008ff3c:	00a00034 	movhi	r2,32768
2008ff40:	10bfffc4 	addi	r2,r2,-1
2008ff44:	10bfffc4 	addi	r2,r2,-1
2008ff48:	103ffe1e 	bne	r2,zero,2008ff44 <__flash_rwdata_start+0xffffe494>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
2008ff4c:	e0fffd17 	ldw	r3,-12(fp)
2008ff50:	008003f4 	movhi	r2,15
2008ff54:	10909004 	addi	r2,r2,16960
2008ff58:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
2008ff5c:	0101dcf4 	movhi	r4,1907
2008ff60:	21165004 	addi	r4,r4,22848
2008ff64:	100b883a 	mov	r5,r2
2008ff68:	008a2480 	call	2008a248 <__udivsi3>
2008ff6c:	01200034 	movhi	r4,32768
2008ff70:	213fffc4 	addi	r4,r4,-1
2008ff74:	100b883a 	mov	r5,r2
2008ff78:	008a2480 	call	2008a248 <__udivsi3>
2008ff7c:	1007883a 	mov	r3,r2
2008ff80:	e0bfff17 	ldw	r2,-4(fp)
2008ff84:	10c5c83a 	sub	r2,r2,r3
2008ff88:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
2008ff8c:	e0bffc17 	ldw	r2,-16(fp)
2008ff90:	10800044 	addi	r2,r2,1
2008ff94:	e0bffc15 	stw	r2,-16(fp)
2008ff98:	e0fffc17 	ldw	r3,-16(fp)
2008ff9c:	e0bffe17 	ldw	r2,-8(fp)
2008ffa0:	18bfe616 	blt	r3,r2,2008ff3c <__flash_rwdata_start+0xffffe48c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
2008ffa4:	e0fffd17 	ldw	r3,-12(fp)
2008ffa8:	008003f4 	movhi	r2,15
2008ffac:	10909004 	addi	r2,r2,16960
2008ffb0:	1885383a 	mul	r2,r3,r2
2008ffb4:	0101dcf4 	movhi	r4,1907
2008ffb8:	21165004 	addi	r4,r4,22848
2008ffbc:	100b883a 	mov	r5,r2
2008ffc0:	008a2480 	call	2008a248 <__udivsi3>
2008ffc4:	1007883a 	mov	r3,r2
2008ffc8:	e0bfff17 	ldw	r2,-4(fp)
2008ffcc:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
2008ffd0:	10bfffc4 	addi	r2,r2,-1
2008ffd4:	103ffe1e 	bne	r2,zero,2008ffd0 <__flash_rwdata_start+0xffffe520>
2008ffd8:	00000d06 	br	20090010 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
2008ffdc:	e0fffd17 	ldw	r3,-12(fp)
2008ffe0:	008003f4 	movhi	r2,15
2008ffe4:	10909004 	addi	r2,r2,16960
2008ffe8:	1885383a 	mul	r2,r3,r2
2008ffec:	0101dcf4 	movhi	r4,1907
2008fff0:	21165004 	addi	r4,r4,22848
2008fff4:	100b883a 	mov	r5,r2
2008fff8:	008a2480 	call	2008a248 <__udivsi3>
2008fffc:	1007883a 	mov	r3,r2
20090000:	e0bfff17 	ldw	r2,-4(fp)
20090004:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
20090008:	10bfffc4 	addi	r2,r2,-1
2009000c:	00bffe16 	blt	zero,r2,20090008 <__flash_rwdata_start+0xffffe558>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
20090010:	0005883a 	mov	r2,zero
}
20090014:	e037883a 	mov	sp,fp
20090018:	dfc00117 	ldw	ra,4(sp)
2009001c:	df000017 	ldw	fp,0(sp)
20090020:	dec00204 	addi	sp,sp,8
20090024:	f800283a 	ret

20090028 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
20090028:	defffe04 	addi	sp,sp,-8
2009002c:	df000115 	stw	fp,4(sp)
20090030:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
20090034:	e03fff15 	stw	zero,-4(fp)
20090038:	00000506 	br	20090050 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
2009003c:	e0bfff17 	ldw	r2,-4(fp)
20090040:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
20090044:	e0bfff17 	ldw	r2,-4(fp)
20090048:	10800804 	addi	r2,r2,32
2009004c:	e0bfff15 	stw	r2,-4(fp)
20090050:	e0bfff17 	ldw	r2,-4(fp)
20090054:	10900030 	cmpltui	r2,r2,16384
20090058:	103ff81e 	bne	r2,zero,2009003c <__flash_rwdata_start+0xffffe58c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
2009005c:	e037883a 	mov	sp,fp
20090060:	df000017 	ldw	fp,0(sp)
20090064:	dec00104 	addi	sp,sp,4
20090068:	f800283a 	ret

2009006c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2009006c:	defffe04 	addi	sp,sp,-8
20090070:	dfc00115 	stw	ra,4(sp)
20090074:	df000015 	stw	fp,0(sp)
20090078:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2009007c:	00800034 	movhi	r2,0
20090080:	10881b04 	addi	r2,r2,8300
20090084:	10800017 	ldw	r2,0(r2)
20090088:	10000526 	beq	r2,zero,200900a0 <alt_get_errno+0x34>
2009008c:	00800034 	movhi	r2,0
20090090:	10881b04 	addi	r2,r2,8300
20090094:	10800017 	ldw	r2,0(r2)
20090098:	103ee83a 	callr	r2
2009009c:	00000206 	br	200900a8 <alt_get_errno+0x3c>
200900a0:	00800034 	movhi	r2,0
200900a4:	10882904 	addi	r2,r2,8356
}
200900a8:	e037883a 	mov	sp,fp
200900ac:	dfc00117 	ldw	ra,4(sp)
200900b0:	df000017 	ldw	fp,0(sp)
200900b4:	dec00204 	addi	sp,sp,8
200900b8:	f800283a 	ret

200900bc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
200900bc:	defffa04 	addi	sp,sp,-24
200900c0:	dfc00515 	stw	ra,20(sp)
200900c4:	df000415 	stw	fp,16(sp)
200900c8:	df000404 	addi	fp,sp,16
200900cc:	e13ffe15 	stw	r4,-8(fp)
200900d0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
200900d4:	e0bffe17 	ldw	r2,-8(fp)
200900d8:	10000326 	beq	r2,zero,200900e8 <alt_dev_llist_insert+0x2c>
200900dc:	e0bffe17 	ldw	r2,-8(fp)
200900e0:	10800217 	ldw	r2,8(r2)
200900e4:	1000061e 	bne	r2,zero,20090100 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
200900e8:	009006c0 	call	2009006c <alt_get_errno>
200900ec:	1007883a 	mov	r3,r2
200900f0:	00800584 	movi	r2,22
200900f4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
200900f8:	00bffa84 	movi	r2,-22
200900fc:	00001306 	br	2009014c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
20090100:	e0bffe17 	ldw	r2,-8(fp)
20090104:	e0ffff17 	ldw	r3,-4(fp)
20090108:	e0fffc15 	stw	r3,-16(fp)
2009010c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
20090110:	e0bffd17 	ldw	r2,-12(fp)
20090114:	e0fffc17 	ldw	r3,-16(fp)
20090118:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
2009011c:	e0bffc17 	ldw	r2,-16(fp)
20090120:	10c00017 	ldw	r3,0(r2)
20090124:	e0bffd17 	ldw	r2,-12(fp)
20090128:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
2009012c:	e0bffc17 	ldw	r2,-16(fp)
20090130:	10800017 	ldw	r2,0(r2)
20090134:	e0fffd17 	ldw	r3,-12(fp)
20090138:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
2009013c:	e0bffc17 	ldw	r2,-16(fp)
20090140:	e0fffd17 	ldw	r3,-12(fp)
20090144:	10c00015 	stw	r3,0(r2)

  return 0;  
20090148:	0005883a 	mov	r2,zero
}
2009014c:	e037883a 	mov	sp,fp
20090150:	dfc00117 	ldw	ra,4(sp)
20090154:	df000017 	ldw	fp,0(sp)
20090158:	dec00204 	addi	sp,sp,8
2009015c:	f800283a 	ret

20090160 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
20090160:	defffd04 	addi	sp,sp,-12
20090164:	dfc00215 	stw	ra,8(sp)
20090168:	df000115 	stw	fp,4(sp)
2009016c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
20090170:	00880274 	movhi	r2,8201
20090174:	10855e04 	addi	r2,r2,5496
20090178:	e0bfff15 	stw	r2,-4(fp)
2009017c:	00000606 	br	20090198 <_do_ctors+0x38>
        (*ctor) (); 
20090180:	e0bfff17 	ldw	r2,-4(fp)
20090184:	10800017 	ldw	r2,0(r2)
20090188:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
2009018c:	e0bfff17 	ldw	r2,-4(fp)
20090190:	10bfff04 	addi	r2,r2,-4
20090194:	e0bfff15 	stw	r2,-4(fp)
20090198:	e0ffff17 	ldw	r3,-4(fp)
2009019c:	00880274 	movhi	r2,8201
200901a0:	10855f04 	addi	r2,r2,5500
200901a4:	18bff62e 	bgeu	r3,r2,20090180 <__flash_rwdata_start+0xffffe6d0>
        (*ctor) (); 
}
200901a8:	e037883a 	mov	sp,fp
200901ac:	dfc00117 	ldw	ra,4(sp)
200901b0:	df000017 	ldw	fp,0(sp)
200901b4:	dec00204 	addi	sp,sp,8
200901b8:	f800283a 	ret

200901bc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
200901bc:	defffd04 	addi	sp,sp,-12
200901c0:	dfc00215 	stw	ra,8(sp)
200901c4:	df000115 	stw	fp,4(sp)
200901c8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
200901cc:	00880274 	movhi	r2,8201
200901d0:	10855e04 	addi	r2,r2,5496
200901d4:	e0bfff15 	stw	r2,-4(fp)
200901d8:	00000606 	br	200901f4 <_do_dtors+0x38>
        (*dtor) (); 
200901dc:	e0bfff17 	ldw	r2,-4(fp)
200901e0:	10800017 	ldw	r2,0(r2)
200901e4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
200901e8:	e0bfff17 	ldw	r2,-4(fp)
200901ec:	10bfff04 	addi	r2,r2,-4
200901f0:	e0bfff15 	stw	r2,-4(fp)
200901f4:	e0ffff17 	ldw	r3,-4(fp)
200901f8:	00880274 	movhi	r2,8201
200901fc:	10855f04 	addi	r2,r2,5500
20090200:	18bff62e 	bgeu	r3,r2,200901dc <__flash_rwdata_start+0xffffe72c>
        (*dtor) (); 
}
20090204:	e037883a 	mov	sp,fp
20090208:	dfc00117 	ldw	ra,4(sp)
2009020c:	df000017 	ldw	fp,0(sp)
20090210:	dec00204 	addi	sp,sp,8
20090214:	f800283a 	ret

20090218 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
20090218:	defffa04 	addi	sp,sp,-24
2009021c:	dfc00515 	stw	ra,20(sp)
20090220:	df000415 	stw	fp,16(sp)
20090224:	df000404 	addi	fp,sp,16
20090228:	e13ffe15 	stw	r4,-8(fp)
2009022c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
20090230:	e0bfff17 	ldw	r2,-4(fp)
20090234:	10800017 	ldw	r2,0(r2)
20090238:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
2009023c:	e13ffe17 	ldw	r4,-8(fp)
20090240:	00805bc0 	call	200805bc <strlen>
20090244:	10800044 	addi	r2,r2,1
20090248:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
2009024c:	00000d06 	br	20090284 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
20090250:	e0bffc17 	ldw	r2,-16(fp)
20090254:	10c00217 	ldw	r3,8(r2)
20090258:	e0bffd17 	ldw	r2,-12(fp)
2009025c:	1809883a 	mov	r4,r3
20090260:	e17ffe17 	ldw	r5,-8(fp)
20090264:	100d883a 	mov	r6,r2
20090268:	00910b80 	call	200910b8 <memcmp>
2009026c:	1000021e 	bne	r2,zero,20090278 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
20090270:	e0bffc17 	ldw	r2,-16(fp)
20090274:	00000706 	br	20090294 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
20090278:	e0bffc17 	ldw	r2,-16(fp)
2009027c:	10800017 	ldw	r2,0(r2)
20090280:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
20090284:	e0fffc17 	ldw	r3,-16(fp)
20090288:	e0bfff17 	ldw	r2,-4(fp)
2009028c:	18bff01e 	bne	r3,r2,20090250 <__flash_rwdata_start+0xffffe7a0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
20090290:	0005883a 	mov	r2,zero
}
20090294:	e037883a 	mov	sp,fp
20090298:	dfc00117 	ldw	ra,4(sp)
2009029c:	df000017 	ldw	fp,0(sp)
200902a0:	dec00204 	addi	sp,sp,8
200902a4:	f800283a 	ret

200902a8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
200902a8:	defffe04 	addi	sp,sp,-8
200902ac:	dfc00115 	stw	ra,4(sp)
200902b0:	df000015 	stw	fp,0(sp)
200902b4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
200902b8:	0009883a 	mov	r4,zero
200902bc:	01440004 	movi	r5,4096
200902c0:	0090f440 	call	20090f44 <alt_icache_flush>
#endif
}
200902c4:	e037883a 	mov	sp,fp
200902c8:	dfc00117 	ldw	ra,4(sp)
200902cc:	df000017 	ldw	fp,0(sp)
200902d0:	dec00204 	addi	sp,sp,8
200902d4:	f800283a 	ret

200902d8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
200902d8:	defff904 	addi	sp,sp,-28
200902dc:	dfc00615 	stw	ra,24(sp)
200902e0:	df000515 	stw	fp,20(sp)
200902e4:	df000504 	addi	fp,sp,20
200902e8:	e13ffc15 	stw	r4,-16(fp)
200902ec:	e17ffd15 	stw	r5,-12(fp)
200902f0:	e1bffe15 	stw	r6,-8(fp)
200902f4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
200902f8:	e0800217 	ldw	r2,8(fp)
200902fc:	d8800015 	stw	r2,0(sp)
20090300:	e13ffc17 	ldw	r4,-16(fp)
20090304:	e17ffd17 	ldw	r5,-12(fp)
20090308:	e1bffe17 	ldw	r6,-8(fp)
2009030c:	e1ffff17 	ldw	r7,-4(fp)
20090310:	00904b80 	call	200904b8 <alt_iic_isr_register>
}  
20090314:	e037883a 	mov	sp,fp
20090318:	dfc00117 	ldw	ra,4(sp)
2009031c:	df000017 	ldw	fp,0(sp)
20090320:	dec00204 	addi	sp,sp,8
20090324:	f800283a 	ret

20090328 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
20090328:	defff904 	addi	sp,sp,-28
2009032c:	df000615 	stw	fp,24(sp)
20090330:	df000604 	addi	fp,sp,24
20090334:	e13ffe15 	stw	r4,-8(fp)
20090338:	e17fff15 	stw	r5,-4(fp)
2009033c:	e0bfff17 	ldw	r2,-4(fp)
20090340:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20090344:	0005303a 	rdctl	r2,status
20090348:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2009034c:	e0fffb17 	ldw	r3,-20(fp)
20090350:	00bfff84 	movi	r2,-2
20090354:	1884703a 	and	r2,r3,r2
20090358:	1001703a 	wrctl	status,r2
  
  return context;
2009035c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
20090360:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
20090364:	e0bffa17 	ldw	r2,-24(fp)
20090368:	00c00044 	movi	r3,1
2009036c:	1884983a 	sll	r2,r3,r2
20090370:	1007883a 	mov	r3,r2
20090374:	00800034 	movhi	r2,0
20090378:	10882a04 	addi	r2,r2,8360
2009037c:	10800017 	ldw	r2,0(r2)
20090380:	1886b03a 	or	r3,r3,r2
20090384:	00800034 	movhi	r2,0
20090388:	10882a04 	addi	r2,r2,8360
2009038c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
20090390:	00800034 	movhi	r2,0
20090394:	10882a04 	addi	r2,r2,8360
20090398:	10800017 	ldw	r2,0(r2)
2009039c:	100170fa 	wrctl	ienable,r2
200903a0:	e0bffc17 	ldw	r2,-16(fp)
200903a4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200903a8:	e0bffd17 	ldw	r2,-12(fp)
200903ac:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
200903b0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
200903b4:	0001883a 	nop
}
200903b8:	e037883a 	mov	sp,fp
200903bc:	df000017 	ldw	fp,0(sp)
200903c0:	dec00104 	addi	sp,sp,4
200903c4:	f800283a 	ret

200903c8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
200903c8:	defff904 	addi	sp,sp,-28
200903cc:	df000615 	stw	fp,24(sp)
200903d0:	df000604 	addi	fp,sp,24
200903d4:	e13ffe15 	stw	r4,-8(fp)
200903d8:	e17fff15 	stw	r5,-4(fp)
200903dc:	e0bfff17 	ldw	r2,-4(fp)
200903e0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200903e4:	0005303a 	rdctl	r2,status
200903e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200903ec:	e0fffb17 	ldw	r3,-20(fp)
200903f0:	00bfff84 	movi	r2,-2
200903f4:	1884703a 	and	r2,r3,r2
200903f8:	1001703a 	wrctl	status,r2
  
  return context;
200903fc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
20090400:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
20090404:	e0bffa17 	ldw	r2,-24(fp)
20090408:	00c00044 	movi	r3,1
2009040c:	1884983a 	sll	r2,r3,r2
20090410:	0084303a 	nor	r2,zero,r2
20090414:	1007883a 	mov	r3,r2
20090418:	00800034 	movhi	r2,0
2009041c:	10882a04 	addi	r2,r2,8360
20090420:	10800017 	ldw	r2,0(r2)
20090424:	1886703a 	and	r3,r3,r2
20090428:	00800034 	movhi	r2,0
2009042c:	10882a04 	addi	r2,r2,8360
20090430:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
20090434:	00800034 	movhi	r2,0
20090438:	10882a04 	addi	r2,r2,8360
2009043c:	10800017 	ldw	r2,0(r2)
20090440:	100170fa 	wrctl	ienable,r2
20090444:	e0bffc17 	ldw	r2,-16(fp)
20090448:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2009044c:	e0bffd17 	ldw	r2,-12(fp)
20090450:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
20090454:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
20090458:	0001883a 	nop
}
2009045c:	e037883a 	mov	sp,fp
20090460:	df000017 	ldw	fp,0(sp)
20090464:	dec00104 	addi	sp,sp,4
20090468:	f800283a 	ret

2009046c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
2009046c:	defffc04 	addi	sp,sp,-16
20090470:	df000315 	stw	fp,12(sp)
20090474:	df000304 	addi	fp,sp,12
20090478:	e13ffe15 	stw	r4,-8(fp)
2009047c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
20090480:	000530fa 	rdctl	r2,ienable
20090484:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
20090488:	e0bfff17 	ldw	r2,-4(fp)
2009048c:	00c00044 	movi	r3,1
20090490:	1884983a 	sll	r2,r3,r2
20090494:	1007883a 	mov	r3,r2
20090498:	e0bffd17 	ldw	r2,-12(fp)
2009049c:	1884703a 	and	r2,r3,r2
200904a0:	1004c03a 	cmpne	r2,r2,zero
200904a4:	10803fcc 	andi	r2,r2,255
}
200904a8:	e037883a 	mov	sp,fp
200904ac:	df000017 	ldw	fp,0(sp)
200904b0:	dec00104 	addi	sp,sp,4
200904b4:	f800283a 	ret

200904b8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
200904b8:	defff504 	addi	sp,sp,-44
200904bc:	dfc00a15 	stw	ra,40(sp)
200904c0:	df000915 	stw	fp,36(sp)
200904c4:	df000904 	addi	fp,sp,36
200904c8:	e13ffc15 	stw	r4,-16(fp)
200904cc:	e17ffd15 	stw	r5,-12(fp)
200904d0:	e1bffe15 	stw	r6,-8(fp)
200904d4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
200904d8:	00bffa84 	movi	r2,-22
200904dc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
200904e0:	e0bffd17 	ldw	r2,-12(fp)
200904e4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
200904e8:	e0bff817 	ldw	r2,-32(fp)
200904ec:	10800808 	cmpgei	r2,r2,32
200904f0:	1000271e 	bne	r2,zero,20090590 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200904f4:	0005303a 	rdctl	r2,status
200904f8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200904fc:	e0fffa17 	ldw	r3,-24(fp)
20090500:	00bfff84 	movi	r2,-2
20090504:	1884703a 	and	r2,r3,r2
20090508:	1001703a 	wrctl	status,r2
  
  return context;
2009050c:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
20090510:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
20090514:	00800034 	movhi	r2,0
20090518:	10883d04 	addi	r2,r2,8436
2009051c:	e0fff817 	ldw	r3,-32(fp)
20090520:	180690fa 	slli	r3,r3,3
20090524:	10c5883a 	add	r2,r2,r3
20090528:	e0fffe17 	ldw	r3,-8(fp)
2009052c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
20090530:	00800034 	movhi	r2,0
20090534:	10883d04 	addi	r2,r2,8436
20090538:	e0fff817 	ldw	r3,-32(fp)
2009053c:	180690fa 	slli	r3,r3,3
20090540:	18c00104 	addi	r3,r3,4
20090544:	10c5883a 	add	r2,r2,r3
20090548:	e0ffff17 	ldw	r3,-4(fp)
2009054c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
20090550:	e0bffe17 	ldw	r2,-8(fp)
20090554:	10000526 	beq	r2,zero,2009056c <alt_iic_isr_register+0xb4>
20090558:	e0bff817 	ldw	r2,-32(fp)
2009055c:	e13ffc17 	ldw	r4,-16(fp)
20090560:	100b883a 	mov	r5,r2
20090564:	00903280 	call	20090328 <alt_ic_irq_enable>
20090568:	00000406 	br	2009057c <alt_iic_isr_register+0xc4>
2009056c:	e0bff817 	ldw	r2,-32(fp)
20090570:	e13ffc17 	ldw	r4,-16(fp)
20090574:	100b883a 	mov	r5,r2
20090578:	00903c80 	call	200903c8 <alt_ic_irq_disable>
2009057c:	e0bff715 	stw	r2,-36(fp)
20090580:	e0bff917 	ldw	r2,-28(fp)
20090584:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20090588:	e0bffb17 	ldw	r2,-20(fp)
2009058c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
20090590:	e0bff717 	ldw	r2,-36(fp)
}
20090594:	e037883a 	mov	sp,fp
20090598:	dfc00117 	ldw	ra,4(sp)
2009059c:	df000017 	ldw	fp,0(sp)
200905a0:	dec00204 	addi	sp,sp,8
200905a4:	f800283a 	ret

200905a8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
200905a8:	defff904 	addi	sp,sp,-28
200905ac:	dfc00615 	stw	ra,24(sp)
200905b0:	df000515 	stw	fp,20(sp)
200905b4:	df000504 	addi	fp,sp,20
200905b8:	e13ffc15 	stw	r4,-16(fp)
200905bc:	e17ffd15 	stw	r5,-12(fp)
200905c0:	e1bffe15 	stw	r6,-8(fp)
200905c4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
200905c8:	e13ffd17 	ldw	r4,-12(fp)
200905cc:	e17ffe17 	ldw	r5,-8(fp)
200905d0:	e1bfff17 	ldw	r6,-4(fp)
200905d4:	00907fc0 	call	200907fc <open>
200905d8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
200905dc:	e0bffb17 	ldw	r2,-20(fp)
200905e0:	10001c16 	blt	r2,zero,20090654 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
200905e4:	00800034 	movhi	r2,0
200905e8:	10838004 	addi	r2,r2,3584
200905ec:	e0fffb17 	ldw	r3,-20(fp)
200905f0:	18c00324 	muli	r3,r3,12
200905f4:	10c5883a 	add	r2,r2,r3
200905f8:	10c00017 	ldw	r3,0(r2)
200905fc:	e0bffc17 	ldw	r2,-16(fp)
20090600:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
20090604:	00800034 	movhi	r2,0
20090608:	10838004 	addi	r2,r2,3584
2009060c:	e0fffb17 	ldw	r3,-20(fp)
20090610:	18c00324 	muli	r3,r3,12
20090614:	18c00104 	addi	r3,r3,4
20090618:	10c5883a 	add	r2,r2,r3
2009061c:	10c00017 	ldw	r3,0(r2)
20090620:	e0bffc17 	ldw	r2,-16(fp)
20090624:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
20090628:	00800034 	movhi	r2,0
2009062c:	10838004 	addi	r2,r2,3584
20090630:	e0fffb17 	ldw	r3,-20(fp)
20090634:	18c00324 	muli	r3,r3,12
20090638:	18c00204 	addi	r3,r3,8
2009063c:	10c5883a 	add	r2,r2,r3
20090640:	10c00017 	ldw	r3,0(r2)
20090644:	e0bffc17 	ldw	r2,-16(fp)
20090648:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
2009064c:	e13ffb17 	ldw	r4,-20(fp)
20090650:	008d1540 	call	2008d154 <alt_release_fd>
  }
} 
20090654:	e037883a 	mov	sp,fp
20090658:	dfc00117 	ldw	ra,4(sp)
2009065c:	df000017 	ldw	fp,0(sp)
20090660:	dec00204 	addi	sp,sp,8
20090664:	f800283a 	ret

20090668 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
20090668:	defffb04 	addi	sp,sp,-20
2009066c:	dfc00415 	stw	ra,16(sp)
20090670:	df000315 	stw	fp,12(sp)
20090674:	df000304 	addi	fp,sp,12
20090678:	e13ffd15 	stw	r4,-12(fp)
2009067c:	e17ffe15 	stw	r5,-8(fp)
20090680:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
20090684:	01000034 	movhi	r4,0
20090688:	21038304 	addi	r4,r4,3596
2009068c:	e17ffd17 	ldw	r5,-12(fp)
20090690:	01800044 	movi	r6,1
20090694:	01c07fc4 	movi	r7,511
20090698:	00905a80 	call	200905a8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
2009069c:	01000034 	movhi	r4,0
200906a0:	21038004 	addi	r4,r4,3584
200906a4:	e17ffe17 	ldw	r5,-8(fp)
200906a8:	000d883a 	mov	r6,zero
200906ac:	01c07fc4 	movi	r7,511
200906b0:	00905a80 	call	200905a8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
200906b4:	01000034 	movhi	r4,0
200906b8:	21038604 	addi	r4,r4,3608
200906bc:	e17fff17 	ldw	r5,-4(fp)
200906c0:	01800044 	movi	r6,1
200906c4:	01c07fc4 	movi	r7,511
200906c8:	00905a80 	call	200905a8 <alt_open_fd>
}  
200906cc:	e037883a 	mov	sp,fp
200906d0:	dfc00117 	ldw	ra,4(sp)
200906d4:	df000017 	ldw	fp,0(sp)
200906d8:	dec00204 	addi	sp,sp,8
200906dc:	f800283a 	ret

200906e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
200906e0:	defffe04 	addi	sp,sp,-8
200906e4:	dfc00115 	stw	ra,4(sp)
200906e8:	df000015 	stw	fp,0(sp)
200906ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
200906f0:	00800034 	movhi	r2,0
200906f4:	10881b04 	addi	r2,r2,8300
200906f8:	10800017 	ldw	r2,0(r2)
200906fc:	10000526 	beq	r2,zero,20090714 <alt_get_errno+0x34>
20090700:	00800034 	movhi	r2,0
20090704:	10881b04 	addi	r2,r2,8300
20090708:	10800017 	ldw	r2,0(r2)
2009070c:	103ee83a 	callr	r2
20090710:	00000206 	br	2009071c <alt_get_errno+0x3c>
20090714:	00800034 	movhi	r2,0
20090718:	10882904 	addi	r2,r2,8356
}
2009071c:	e037883a 	mov	sp,fp
20090720:	dfc00117 	ldw	ra,4(sp)
20090724:	df000017 	ldw	fp,0(sp)
20090728:	dec00204 	addi	sp,sp,8
2009072c:	f800283a 	ret

20090730 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
20090730:	defffd04 	addi	sp,sp,-12
20090734:	df000215 	stw	fp,8(sp)
20090738:	df000204 	addi	fp,sp,8
2009073c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
20090740:	e0bfff17 	ldw	r2,-4(fp)
20090744:	10800217 	ldw	r2,8(r2)
20090748:	10d00034 	orhi	r3,r2,16384
2009074c:	e0bfff17 	ldw	r2,-4(fp)
20090750:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
20090754:	e03ffe15 	stw	zero,-8(fp)
20090758:	00001d06 	br	200907d0 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
2009075c:	00800034 	movhi	r2,0
20090760:	10838004 	addi	r2,r2,3584
20090764:	e0fffe17 	ldw	r3,-8(fp)
20090768:	18c00324 	muli	r3,r3,12
2009076c:	10c5883a 	add	r2,r2,r3
20090770:	10c00017 	ldw	r3,0(r2)
20090774:	e0bfff17 	ldw	r2,-4(fp)
20090778:	10800017 	ldw	r2,0(r2)
2009077c:	1880111e 	bne	r3,r2,200907c4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
20090780:	00800034 	movhi	r2,0
20090784:	10838004 	addi	r2,r2,3584
20090788:	e0fffe17 	ldw	r3,-8(fp)
2009078c:	18c00324 	muli	r3,r3,12
20090790:	18c00204 	addi	r3,r3,8
20090794:	10c5883a 	add	r2,r2,r3
20090798:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
2009079c:	1000090e 	bge	r2,zero,200907c4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
200907a0:	e0bffe17 	ldw	r2,-8(fp)
200907a4:	10c00324 	muli	r3,r2,12
200907a8:	00800034 	movhi	r2,0
200907ac:	10838004 	addi	r2,r2,3584
200907b0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
200907b4:	e0bfff17 	ldw	r2,-4(fp)
200907b8:	18800226 	beq	r3,r2,200907c4 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
200907bc:	00bffcc4 	movi	r2,-13
200907c0:	00000a06 	br	200907ec <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
200907c4:	e0bffe17 	ldw	r2,-8(fp)
200907c8:	10800044 	addi	r2,r2,1
200907cc:	e0bffe15 	stw	r2,-8(fp)
200907d0:	00800034 	movhi	r2,0
200907d4:	10881a04 	addi	r2,r2,8296
200907d8:	10800017 	ldw	r2,0(r2)
200907dc:	1007883a 	mov	r3,r2
200907e0:	e0bffe17 	ldw	r2,-8(fp)
200907e4:	18bfdd2e 	bgeu	r3,r2,2009075c <__flash_rwdata_start+0xffffecac>
    }
  }
  
  /* The device is not locked */
 
  return 0;
200907e8:	0005883a 	mov	r2,zero
}
200907ec:	e037883a 	mov	sp,fp
200907f0:	df000017 	ldw	fp,0(sp)
200907f4:	dec00104 	addi	sp,sp,4
200907f8:	f800283a 	ret

200907fc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
200907fc:	defff604 	addi	sp,sp,-40
20090800:	dfc00915 	stw	ra,36(sp)
20090804:	df000815 	stw	fp,32(sp)
20090808:	df000804 	addi	fp,sp,32
2009080c:	e13ffd15 	stw	r4,-12(fp)
20090810:	e17ffe15 	stw	r5,-8(fp)
20090814:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
20090818:	00bfffc4 	movi	r2,-1
2009081c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
20090820:	00bffb44 	movi	r2,-19
20090824:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
20090828:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
2009082c:	e13ffd17 	ldw	r4,-12(fp)
20090830:	01400034 	movhi	r5,0
20090834:	29481804 	addi	r5,r5,8288
20090838:	00902180 	call	20090218 <alt_find_dev>
2009083c:	e0bff815 	stw	r2,-32(fp)
20090840:	e0bff817 	ldw	r2,-32(fp)
20090844:	1000051e 	bne	r2,zero,2009085c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
20090848:	e13ffd17 	ldw	r4,-12(fp)
2009084c:	0090d7c0 	call	20090d7c <alt_find_file>
20090850:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
20090854:	00800044 	movi	r2,1
20090858:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
2009085c:	e0bff817 	ldw	r2,-32(fp)
20090860:	10002926 	beq	r2,zero,20090908 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
20090864:	e13ff817 	ldw	r4,-32(fp)
20090868:	0090e900 	call	20090e90 <alt_get_fd>
2009086c:	e0bff915 	stw	r2,-28(fp)
20090870:	e0bff917 	ldw	r2,-28(fp)
20090874:	1000030e 	bge	r2,zero,20090884 <open+0x88>
    {
      status = index;
20090878:	e0bff917 	ldw	r2,-28(fp)
2009087c:	e0bffa15 	stw	r2,-24(fp)
20090880:	00002306 	br	20090910 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
20090884:	e0bff917 	ldw	r2,-28(fp)
20090888:	10c00324 	muli	r3,r2,12
2009088c:	00800034 	movhi	r2,0
20090890:	10838004 	addi	r2,r2,3584
20090894:	1885883a 	add	r2,r3,r2
20090898:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
2009089c:	e0fffe17 	ldw	r3,-8(fp)
200908a0:	00900034 	movhi	r2,16384
200908a4:	10bfffc4 	addi	r2,r2,-1
200908a8:	1886703a 	and	r3,r3,r2
200908ac:	e0bffc17 	ldw	r2,-16(fp)
200908b0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
200908b4:	e0bffb17 	ldw	r2,-20(fp)
200908b8:	1000051e 	bne	r2,zero,200908d0 <open+0xd4>
200908bc:	e13ffc17 	ldw	r4,-16(fp)
200908c0:	00907300 	call	20090730 <alt_file_locked>
200908c4:	e0bffa15 	stw	r2,-24(fp)
200908c8:	e0bffa17 	ldw	r2,-24(fp)
200908cc:	10001016 	blt	r2,zero,20090910 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
200908d0:	e0bff817 	ldw	r2,-32(fp)
200908d4:	10800317 	ldw	r2,12(r2)
200908d8:	10000826 	beq	r2,zero,200908fc <open+0x100>
200908dc:	e0bff817 	ldw	r2,-32(fp)
200908e0:	10800317 	ldw	r2,12(r2)
200908e4:	e13ffc17 	ldw	r4,-16(fp)
200908e8:	e17ffd17 	ldw	r5,-12(fp)
200908ec:	e1bffe17 	ldw	r6,-8(fp)
200908f0:	e1ffff17 	ldw	r7,-4(fp)
200908f4:	103ee83a 	callr	r2
200908f8:	00000106 	br	20090900 <open+0x104>
200908fc:	0005883a 	mov	r2,zero
20090900:	e0bffa15 	stw	r2,-24(fp)
20090904:	00000206 	br	20090910 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
20090908:	00bffb44 	movi	r2,-19
2009090c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
20090910:	e0bffa17 	ldw	r2,-24(fp)
20090914:	1000090e 	bge	r2,zero,2009093c <open+0x140>
  {
    alt_release_fd (index);  
20090918:	e13ff917 	ldw	r4,-28(fp)
2009091c:	008d1540 	call	2008d154 <alt_release_fd>
    ALT_ERRNO = -status;
20090920:	00906e00 	call	200906e0 <alt_get_errno>
20090924:	1007883a 	mov	r3,r2
20090928:	e0bffa17 	ldw	r2,-24(fp)
2009092c:	0085c83a 	sub	r2,zero,r2
20090930:	18800015 	stw	r2,0(r3)
    return -1;
20090934:	00bfffc4 	movi	r2,-1
20090938:	00000106 	br	20090940 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
2009093c:	e0bff917 	ldw	r2,-28(fp)
}
20090940:	e037883a 	mov	sp,fp
20090944:	dfc00117 	ldw	ra,4(sp)
20090948:	df000017 	ldw	fp,0(sp)
2009094c:	dec00204 	addi	sp,sp,8
20090950:	f800283a 	ret

20090954 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
20090954:	defff204 	addi	sp,sp,-56
20090958:	dfc00a15 	stw	ra,40(sp)
2009095c:	df000915 	stw	fp,36(sp)
20090960:	df000904 	addi	fp,sp,36
20090964:	e1400215 	stw	r5,8(fp)
20090968:	e1800315 	stw	r6,12(fp)
2009096c:	e1c00415 	stw	r7,16(fp)
20090970:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
20090974:	e0800204 	addi	r2,fp,8
20090978:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
2009097c:	e0bfff17 	ldw	r2,-4(fp)
20090980:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
20090984:	00007106 	br	20090b4c <alt_printf+0x1f8>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
20090988:	e0bff807 	ldb	r2,-32(fp)
2009098c:	10800960 	cmpeqi	r2,r2,37
20090990:	1000041e 	bne	r2,zero,200909a4 <alt_printf+0x50>
        {
            alt_putchar(c);
20090994:	e0bff807 	ldb	r2,-32(fp)
20090998:	1009883a 	mov	r4,r2
2009099c:	0090b7c0 	call	20090b7c <alt_putchar>
200909a0:	00006a06 	br	20090b4c <alt_printf+0x1f8>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
200909a4:	e0bff717 	ldw	r2,-36(fp)
200909a8:	10c00044 	addi	r3,r2,1
200909ac:	e0fff715 	stw	r3,-36(fp)
200909b0:	10800003 	ldbu	r2,0(r2)
200909b4:	e0bff805 	stb	r2,-32(fp)
200909b8:	e0bff807 	ldb	r2,-32(fp)
200909bc:	10006226 	beq	r2,zero,20090b48 <alt_printf+0x1f4>
            {
                if (c == '%')
200909c0:	e0bff807 	ldb	r2,-32(fp)
200909c4:	10800958 	cmpnei	r2,r2,37
200909c8:	1000041e 	bne	r2,zero,200909dc <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
200909cc:	e0bff807 	ldb	r2,-32(fp)
200909d0:	1009883a 	mov	r4,r2
200909d4:	0090b7c0 	call	20090b7c <alt_putchar>
200909d8:	00005c06 	br	20090b4c <alt_printf+0x1f8>
                } 
                else if (c == 'c')
200909dc:	e0bff807 	ldb	r2,-32(fp)
200909e0:	108018d8 	cmpnei	r2,r2,99
200909e4:	1000081e 	bne	r2,zero,20090a08 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
200909e8:	e0bffe17 	ldw	r2,-8(fp)
200909ec:	10c00104 	addi	r3,r2,4
200909f0:	e0fffe15 	stw	r3,-8(fp)
200909f4:	10800017 	ldw	r2,0(r2)
200909f8:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
200909fc:	e13ffd17 	ldw	r4,-12(fp)
20090a00:	0090b7c0 	call	20090b7c <alt_putchar>
20090a04:	00005106 	br	20090b4c <alt_printf+0x1f8>
                }
                else if (c == 'x')
20090a08:	e0bff807 	ldb	r2,-32(fp)
20090a0c:	10801e18 	cmpnei	r2,r2,120
20090a10:	1000341e 	bne	r2,zero,20090ae4 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
20090a14:	e0bffe17 	ldw	r2,-8(fp)
20090a18:	10c00104 	addi	r3,r2,4
20090a1c:	e0fffe15 	stw	r3,-8(fp)
20090a20:	10800017 	ldw	r2,0(r2)
20090a24:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
20090a28:	e0bffb17 	ldw	r2,-20(fp)
20090a2c:	1000031e 	bne	r2,zero,20090a3c <alt_printf+0xe8>
                    {
                        alt_putchar('0');
20090a30:	01000c04 	movi	r4,48
20090a34:	0090b7c0 	call	20090b7c <alt_putchar>
                        continue;
20090a38:	00004406 	br	20090b4c <alt_printf+0x1f8>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
20090a3c:	00800704 	movi	r2,28
20090a40:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
20090a44:	00000306 	br	20090a54 <alt_printf+0x100>
                        digit_shift -= 4;
20090a48:	e0bff917 	ldw	r2,-28(fp)
20090a4c:	10bfff04 	addi	r2,r2,-4
20090a50:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
20090a54:	00c003c4 	movi	r3,15
20090a58:	e0bff917 	ldw	r2,-28(fp)
20090a5c:	1884983a 	sll	r2,r3,r2
20090a60:	1007883a 	mov	r3,r2
20090a64:	e0bffb17 	ldw	r2,-20(fp)
20090a68:	1884703a 	and	r2,r3,r2
20090a6c:	103ff626 	beq	r2,zero,20090a48 <__flash_rwdata_start+0xffffef98>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
20090a70:	00001906 	br	20090ad8 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
20090a74:	00c003c4 	movi	r3,15
20090a78:	e0bff917 	ldw	r2,-28(fp)
20090a7c:	1884983a 	sll	r2,r3,r2
20090a80:	1007883a 	mov	r3,r2
20090a84:	e0bffb17 	ldw	r2,-20(fp)
20090a88:	1886703a 	and	r3,r3,r2
20090a8c:	e0bff917 	ldw	r2,-28(fp)
20090a90:	1884d83a 	srl	r2,r3,r2
20090a94:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
20090a98:	e0bffc17 	ldw	r2,-16(fp)
20090a9c:	108002a8 	cmpgeui	r2,r2,10
20090aa0:	1000041e 	bne	r2,zero,20090ab4 <alt_printf+0x160>
                            c = '0' + digit;
20090aa4:	e0bffc17 	ldw	r2,-16(fp)
20090aa8:	10800c04 	addi	r2,r2,48
20090aac:	e0bff805 	stb	r2,-32(fp)
20090ab0:	00000306 	br	20090ac0 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
20090ab4:	e0bffc17 	ldw	r2,-16(fp)
20090ab8:	108015c4 	addi	r2,r2,87
20090abc:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
20090ac0:	e0bff807 	ldb	r2,-32(fp)
20090ac4:	1009883a 	mov	r4,r2
20090ac8:	0090b7c0 	call	20090b7c <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
20090acc:	e0bff917 	ldw	r2,-28(fp)
20090ad0:	10bfff04 	addi	r2,r2,-4
20090ad4:	e0bff915 	stw	r2,-28(fp)
20090ad8:	e0bff917 	ldw	r2,-28(fp)
20090adc:	103fe50e 	bge	r2,zero,20090a74 <__flash_rwdata_start+0xffffefc4>
20090ae0:	00001a06 	br	20090b4c <alt_printf+0x1f8>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
20090ae4:	e0bff807 	ldb	r2,-32(fp)
20090ae8:	10801cd8 	cmpnei	r2,r2,115
20090aec:	1000151e 	bne	r2,zero,20090b44 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
20090af0:	e0bffe17 	ldw	r2,-8(fp)
20090af4:	10c00104 	addi	r3,r2,4
20090af8:	e0fffe15 	stw	r3,-8(fp)
20090afc:	10800017 	ldw	r2,0(r2)
20090b00:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
20090b04:	00000906 	br	20090b2c <alt_printf+0x1d8>
                      alt_putchar(*s++);
20090b08:	e0bffa17 	ldw	r2,-24(fp)
20090b0c:	10c00044 	addi	r3,r2,1
20090b10:	e0fffa15 	stw	r3,-24(fp)
20090b14:	10800003 	ldbu	r2,0(r2)
20090b18:	10803fcc 	andi	r2,r2,255
20090b1c:	1080201c 	xori	r2,r2,128
20090b20:	10bfe004 	addi	r2,r2,-128
20090b24:	1009883a 	mov	r4,r2
20090b28:	0090b7c0 	call	20090b7c <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
20090b2c:	e0bffa17 	ldw	r2,-24(fp)
20090b30:	10800003 	ldbu	r2,0(r2)
20090b34:	10803fcc 	andi	r2,r2,255
20090b38:	1080201c 	xori	r2,r2,128
20090b3c:	10bfe004 	addi	r2,r2,-128
20090b40:	103ff11e 	bne	r2,zero,20090b08 <__flash_rwdata_start+0xfffff058>
20090b44:	00000106 	br	20090b4c <alt_printf+0x1f8>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
20090b48:	00000706 	br	20090b68 <alt_printf+0x214>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
20090b4c:	e0bff717 	ldw	r2,-36(fp)
20090b50:	10c00044 	addi	r3,r2,1
20090b54:	e0fff715 	stw	r3,-36(fp)
20090b58:	10800003 	ldbu	r2,0(r2)
20090b5c:	e0bff805 	stb	r2,-32(fp)
20090b60:	e0bff807 	ldb	r2,-32(fp)
20090b64:	103f881e 	bne	r2,zero,20090988 <__flash_rwdata_start+0xffffeed8>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
20090b68:	e037883a 	mov	sp,fp
20090b6c:	dfc00117 	ldw	ra,4(sp)
20090b70:	df000017 	ldw	fp,0(sp)
20090b74:	dec00504 	addi	sp,sp,20
20090b78:	f800283a 	ret

20090b7c <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
20090b7c:	defffd04 	addi	sp,sp,-12
20090b80:	dfc00215 	stw	ra,8(sp)
20090b84:	df000115 	stw	fp,4(sp)
20090b88:	df000104 	addi	fp,sp,4
20090b8c:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
20090b90:	00800034 	movhi	r2,0
20090b94:	10881104 	addi	r2,r2,8260
20090b98:	10800017 	ldw	r2,0(r2)
20090b9c:	10800217 	ldw	r2,8(r2)
20090ba0:	e13fff17 	ldw	r4,-4(fp)
20090ba4:	100b883a 	mov	r5,r2
20090ba8:	00911d40 	call	200911d4 <putc>
#endif
#endif
}
20090bac:	e037883a 	mov	sp,fp
20090bb0:	dfc00117 	ldw	ra,4(sp)
20090bb4:	df000017 	ldw	fp,0(sp)
20090bb8:	dec00204 	addi	sp,sp,8
20090bbc:	f800283a 	ret

20090bc0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
20090bc0:	defffa04 	addi	sp,sp,-24
20090bc4:	df000515 	stw	fp,20(sp)
20090bc8:	df000504 	addi	fp,sp,20
20090bcc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20090bd0:	0005303a 	rdctl	r2,status
20090bd4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20090bd8:	e0fffc17 	ldw	r3,-16(fp)
20090bdc:	00bfff84 	movi	r2,-2
20090be0:	1884703a 	and	r2,r3,r2
20090be4:	1001703a 	wrctl	status,r2
  
  return context;
20090be8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
20090bec:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
20090bf0:	e0bfff17 	ldw	r2,-4(fp)
20090bf4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
20090bf8:	e0bffd17 	ldw	r2,-12(fp)
20090bfc:	10800017 	ldw	r2,0(r2)
20090c00:	e0fffd17 	ldw	r3,-12(fp)
20090c04:	18c00117 	ldw	r3,4(r3)
20090c08:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
20090c0c:	e0bffd17 	ldw	r2,-12(fp)
20090c10:	10800117 	ldw	r2,4(r2)
20090c14:	e0fffd17 	ldw	r3,-12(fp)
20090c18:	18c00017 	ldw	r3,0(r3)
20090c1c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
20090c20:	e0bffd17 	ldw	r2,-12(fp)
20090c24:	e0fffd17 	ldw	r3,-12(fp)
20090c28:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
20090c2c:	e0bffd17 	ldw	r2,-12(fp)
20090c30:	e0fffd17 	ldw	r3,-12(fp)
20090c34:	10c00015 	stw	r3,0(r2)
20090c38:	e0bffb17 	ldw	r2,-20(fp)
20090c3c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20090c40:	e0bffe17 	ldw	r2,-8(fp)
20090c44:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
20090c48:	e037883a 	mov	sp,fp
20090c4c:	df000017 	ldw	fp,0(sp)
20090c50:	dec00104 	addi	sp,sp,4
20090c54:	f800283a 	ret

20090c58 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
20090c58:	defffb04 	addi	sp,sp,-20
20090c5c:	dfc00415 	stw	ra,16(sp)
20090c60:	df000315 	stw	fp,12(sp)
20090c64:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
20090c68:	d0a01017 	ldw	r2,-32704(gp)
20090c6c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
20090c70:	d0a02117 	ldw	r2,-32636(gp)
20090c74:	10800044 	addi	r2,r2,1
20090c78:	d0a02115 	stw	r2,-32636(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
20090c7c:	00002e06 	br	20090d38 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
20090c80:	e0bffd17 	ldw	r2,-12(fp)
20090c84:	10800017 	ldw	r2,0(r2)
20090c88:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
20090c8c:	e0bffd17 	ldw	r2,-12(fp)
20090c90:	10800403 	ldbu	r2,16(r2)
20090c94:	10803fcc 	andi	r2,r2,255
20090c98:	10000426 	beq	r2,zero,20090cac <alt_tick+0x54>
20090c9c:	d0a02117 	ldw	r2,-32636(gp)
20090ca0:	1000021e 	bne	r2,zero,20090cac <alt_tick+0x54>
    {
      alarm->rollover = 0;
20090ca4:	e0bffd17 	ldw	r2,-12(fp)
20090ca8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
20090cac:	e0bffd17 	ldw	r2,-12(fp)
20090cb0:	10800217 	ldw	r2,8(r2)
20090cb4:	d0e02117 	ldw	r3,-32636(gp)
20090cb8:	18801d36 	bltu	r3,r2,20090d30 <alt_tick+0xd8>
20090cbc:	e0bffd17 	ldw	r2,-12(fp)
20090cc0:	10800403 	ldbu	r2,16(r2)
20090cc4:	10803fcc 	andi	r2,r2,255
20090cc8:	1000191e 	bne	r2,zero,20090d30 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
20090ccc:	e0bffd17 	ldw	r2,-12(fp)
20090cd0:	10800317 	ldw	r2,12(r2)
20090cd4:	e0fffd17 	ldw	r3,-12(fp)
20090cd8:	18c00517 	ldw	r3,20(r3)
20090cdc:	1809883a 	mov	r4,r3
20090ce0:	103ee83a 	callr	r2
20090ce4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
20090ce8:	e0bfff17 	ldw	r2,-4(fp)
20090cec:	1000031e 	bne	r2,zero,20090cfc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
20090cf0:	e13ffd17 	ldw	r4,-12(fp)
20090cf4:	0090bc00 	call	20090bc0 <alt_alarm_stop>
20090cf8:	00000d06 	br	20090d30 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
20090cfc:	e0bffd17 	ldw	r2,-12(fp)
20090d00:	10c00217 	ldw	r3,8(r2)
20090d04:	e0bfff17 	ldw	r2,-4(fp)
20090d08:	1887883a 	add	r3,r3,r2
20090d0c:	e0bffd17 	ldw	r2,-12(fp)
20090d10:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
20090d14:	e0bffd17 	ldw	r2,-12(fp)
20090d18:	10c00217 	ldw	r3,8(r2)
20090d1c:	d0a02117 	ldw	r2,-32636(gp)
20090d20:	1880032e 	bgeu	r3,r2,20090d30 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
20090d24:	e0bffd17 	ldw	r2,-12(fp)
20090d28:	00c00044 	movi	r3,1
20090d2c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
20090d30:	e0bffe17 	ldw	r2,-8(fp)
20090d34:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
20090d38:	e0fffd17 	ldw	r3,-12(fp)
20090d3c:	d0a01004 	addi	r2,gp,-32704
20090d40:	18bfcf1e 	bne	r3,r2,20090c80 <__flash_rwdata_start+0xfffff1d0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
20090d44:	0001883a 	nop
}
20090d48:	e037883a 	mov	sp,fp
20090d4c:	dfc00117 	ldw	ra,4(sp)
20090d50:	df000017 	ldw	fp,0(sp)
20090d54:	dec00204 	addi	sp,sp,8
20090d58:	f800283a 	ret

20090d5c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
20090d5c:	deffff04 	addi	sp,sp,-4
20090d60:	df000015 	stw	fp,0(sp)
20090d64:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
20090d68:	000170fa 	wrctl	ienable,zero
}
20090d6c:	e037883a 	mov	sp,fp
20090d70:	df000017 	ldw	fp,0(sp)
20090d74:	dec00104 	addi	sp,sp,4
20090d78:	f800283a 	ret

20090d7c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
20090d7c:	defffb04 	addi	sp,sp,-20
20090d80:	dfc00415 	stw	ra,16(sp)
20090d84:	df000315 	stw	fp,12(sp)
20090d88:	df000304 	addi	fp,sp,12
20090d8c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
20090d90:	00800034 	movhi	r2,0
20090d94:	10881604 	addi	r2,r2,8280
20090d98:	10800017 	ldw	r2,0(r2)
20090d9c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
20090da0:	00003106 	br	20090e68 <alt_find_file+0xec>
  {
    len = strlen(next->name);
20090da4:	e0bffd17 	ldw	r2,-12(fp)
20090da8:	10800217 	ldw	r2,8(r2)
20090dac:	1009883a 	mov	r4,r2
20090db0:	00805bc0 	call	200805bc <strlen>
20090db4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
20090db8:	e0bffd17 	ldw	r2,-12(fp)
20090dbc:	10c00217 	ldw	r3,8(r2)
20090dc0:	e0bffe17 	ldw	r2,-8(fp)
20090dc4:	10bfffc4 	addi	r2,r2,-1
20090dc8:	1885883a 	add	r2,r3,r2
20090dcc:	10800003 	ldbu	r2,0(r2)
20090dd0:	10803fcc 	andi	r2,r2,255
20090dd4:	1080201c 	xori	r2,r2,128
20090dd8:	10bfe004 	addi	r2,r2,-128
20090ddc:	10800bd8 	cmpnei	r2,r2,47
20090de0:	1000031e 	bne	r2,zero,20090df0 <alt_find_file+0x74>
    {
      len -= 1;
20090de4:	e0bffe17 	ldw	r2,-8(fp)
20090de8:	10bfffc4 	addi	r2,r2,-1
20090dec:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
20090df0:	e0bffe17 	ldw	r2,-8(fp)
20090df4:	e0ffff17 	ldw	r3,-4(fp)
20090df8:	1885883a 	add	r2,r3,r2
20090dfc:	10800003 	ldbu	r2,0(r2)
20090e00:	10803fcc 	andi	r2,r2,255
20090e04:	1080201c 	xori	r2,r2,128
20090e08:	10bfe004 	addi	r2,r2,-128
20090e0c:	10800be0 	cmpeqi	r2,r2,47
20090e10:	1000081e 	bne	r2,zero,20090e34 <alt_find_file+0xb8>
20090e14:	e0bffe17 	ldw	r2,-8(fp)
20090e18:	e0ffff17 	ldw	r3,-4(fp)
20090e1c:	1885883a 	add	r2,r3,r2
20090e20:	10800003 	ldbu	r2,0(r2)
20090e24:	10803fcc 	andi	r2,r2,255
20090e28:	1080201c 	xori	r2,r2,128
20090e2c:	10bfe004 	addi	r2,r2,-128
20090e30:	10000a1e 	bne	r2,zero,20090e5c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
20090e34:	e0bffd17 	ldw	r2,-12(fp)
20090e38:	10c00217 	ldw	r3,8(r2)
20090e3c:	e0bffe17 	ldw	r2,-8(fp)
20090e40:	1809883a 	mov	r4,r3
20090e44:	e17fff17 	ldw	r5,-4(fp)
20090e48:	100d883a 	mov	r6,r2
20090e4c:	00910b80 	call	200910b8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
20090e50:	1000021e 	bne	r2,zero,20090e5c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
20090e54:	e0bffd17 	ldw	r2,-12(fp)
20090e58:	00000806 	br	20090e7c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
20090e5c:	e0bffd17 	ldw	r2,-12(fp)
20090e60:	10800017 	ldw	r2,0(r2)
20090e64:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
20090e68:	e0fffd17 	ldw	r3,-12(fp)
20090e6c:	00800034 	movhi	r2,0
20090e70:	10881604 	addi	r2,r2,8280
20090e74:	18bfcb1e 	bne	r3,r2,20090da4 <__flash_rwdata_start+0xfffff2f4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
20090e78:	0005883a 	mov	r2,zero
}
20090e7c:	e037883a 	mov	sp,fp
20090e80:	dfc00117 	ldw	ra,4(sp)
20090e84:	df000017 	ldw	fp,0(sp)
20090e88:	dec00204 	addi	sp,sp,8
20090e8c:	f800283a 	ret

20090e90 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
20090e90:	defffc04 	addi	sp,sp,-16
20090e94:	df000315 	stw	fp,12(sp)
20090e98:	df000304 	addi	fp,sp,12
20090e9c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
20090ea0:	00bffa04 	movi	r2,-24
20090ea4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
20090ea8:	e03ffd15 	stw	zero,-12(fp)
20090eac:	00001d06 	br	20090f24 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
20090eb0:	00800034 	movhi	r2,0
20090eb4:	10838004 	addi	r2,r2,3584
20090eb8:	e0fffd17 	ldw	r3,-12(fp)
20090ebc:	18c00324 	muli	r3,r3,12
20090ec0:	10c5883a 	add	r2,r2,r3
20090ec4:	10800017 	ldw	r2,0(r2)
20090ec8:	1000131e 	bne	r2,zero,20090f18 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
20090ecc:	00800034 	movhi	r2,0
20090ed0:	10838004 	addi	r2,r2,3584
20090ed4:	e0fffd17 	ldw	r3,-12(fp)
20090ed8:	18c00324 	muli	r3,r3,12
20090edc:	10c5883a 	add	r2,r2,r3
20090ee0:	e0ffff17 	ldw	r3,-4(fp)
20090ee4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
20090ee8:	00800034 	movhi	r2,0
20090eec:	10881a04 	addi	r2,r2,8296
20090ef0:	10c00017 	ldw	r3,0(r2)
20090ef4:	e0bffd17 	ldw	r2,-12(fp)
20090ef8:	1880040e 	bge	r3,r2,20090f0c <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
20090efc:	00800034 	movhi	r2,0
20090f00:	10881a04 	addi	r2,r2,8296
20090f04:	e0fffd17 	ldw	r3,-12(fp)
20090f08:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
20090f0c:	e0bffd17 	ldw	r2,-12(fp)
20090f10:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
20090f14:	00000606 	br	20090f30 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
20090f18:	e0bffd17 	ldw	r2,-12(fp)
20090f1c:	10800044 	addi	r2,r2,1
20090f20:	e0bffd15 	stw	r2,-12(fp)
20090f24:	e0bffd17 	ldw	r2,-12(fp)
20090f28:	10800810 	cmplti	r2,r2,32
20090f2c:	103fe01e 	bne	r2,zero,20090eb0 <__flash_rwdata_start+0xfffff400>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
20090f30:	e0bffe17 	ldw	r2,-8(fp)
}
20090f34:	e037883a 	mov	sp,fp
20090f38:	df000017 	ldw	fp,0(sp)
20090f3c:	dec00104 	addi	sp,sp,4
20090f40:	f800283a 	ret

20090f44 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
20090f44:	defffb04 	addi	sp,sp,-20
20090f48:	df000415 	stw	fp,16(sp)
20090f4c:	df000404 	addi	fp,sp,16
20090f50:	e13ffe15 	stw	r4,-8(fp)
20090f54:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
20090f58:	e0bfff17 	ldw	r2,-4(fp)
20090f5c:	10840070 	cmpltui	r2,r2,4097
20090f60:	1000021e 	bne	r2,zero,20090f6c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
20090f64:	00840004 	movi	r2,4096
20090f68:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
20090f6c:	e0fffe17 	ldw	r3,-8(fp)
20090f70:	e0bfff17 	ldw	r2,-4(fp)
20090f74:	1885883a 	add	r2,r3,r2
20090f78:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
20090f7c:	e0bffe17 	ldw	r2,-8(fp)
20090f80:	e0bffc15 	stw	r2,-16(fp)
20090f84:	00000506 	br	20090f9c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
20090f88:	e0bffc17 	ldw	r2,-16(fp)
20090f8c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
20090f90:	e0bffc17 	ldw	r2,-16(fp)
20090f94:	10800804 	addi	r2,r2,32
20090f98:	e0bffc15 	stw	r2,-16(fp)
20090f9c:	e0fffc17 	ldw	r3,-16(fp)
20090fa0:	e0bffd17 	ldw	r2,-12(fp)
20090fa4:	18bff836 	bltu	r3,r2,20090f88 <__flash_rwdata_start+0xfffff4d8>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
20090fa8:	e0bffe17 	ldw	r2,-8(fp)
20090fac:	108007cc 	andi	r2,r2,31
20090fb0:	10000226 	beq	r2,zero,20090fbc <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
20090fb4:	e0bffc17 	ldw	r2,-16(fp)
20090fb8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
20090fbc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
20090fc0:	e037883a 	mov	sp,fp
20090fc4:	df000017 	ldw	fp,0(sp)
20090fc8:	dec00104 	addi	sp,sp,4
20090fcc:	f800283a 	ret

20090fd0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
20090fd0:	defffe04 	addi	sp,sp,-8
20090fd4:	df000115 	stw	fp,4(sp)
20090fd8:	df000104 	addi	fp,sp,4
20090fdc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
20090fe0:	e0bfff17 	ldw	r2,-4(fp)
20090fe4:	10bffe84 	addi	r2,r2,-6
20090fe8:	10c00428 	cmpgeui	r3,r2,16
20090fec:	18001a1e 	bne	r3,zero,20091058 <alt_exception_cause_generated_bad_addr+0x88>
20090ff0:	100690ba 	slli	r3,r2,2
20090ff4:	00880274 	movhi	r2,8201
20090ff8:	10840204 	addi	r2,r2,4104
20090ffc:	1885883a 	add	r2,r3,r2
20091000:	10800017 	ldw	r2,0(r2)
20091004:	1000683a 	jmp	r2
20091008:	20091048 	cmpgei	zero,r4,9281
2009100c:	20091048 	cmpgei	zero,r4,9281
20091010:	20091058 	cmpnei	zero,r4,9281
20091014:	20091058 	cmpnei	zero,r4,9281
20091018:	20091058 	cmpnei	zero,r4,9281
2009101c:	20091048 	cmpgei	zero,r4,9281
20091020:	20091050 	cmplti	zero,r4,9281
20091024:	20091058 	cmpnei	zero,r4,9281
20091028:	20091048 	cmpgei	zero,r4,9281
2009102c:	20091048 	cmpgei	zero,r4,9281
20091030:	20091058 	cmpnei	zero,r4,9281
20091034:	20091048 	cmpgei	zero,r4,9281
20091038:	20091050 	cmplti	zero,r4,9281
2009103c:	20091058 	cmpnei	zero,r4,9281
20091040:	20091058 	cmpnei	zero,r4,9281
20091044:	20091048 	cmpgei	zero,r4,9281
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
20091048:	00800044 	movi	r2,1
2009104c:	00000306 	br	2009105c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
20091050:	0005883a 	mov	r2,zero
20091054:	00000106 	br	2009105c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
20091058:	0005883a 	mov	r2,zero
  }
}
2009105c:	e037883a 	mov	sp,fp
20091060:	df000017 	ldw	fp,0(sp)
20091064:	dec00104 	addi	sp,sp,4
20091068:	f800283a 	ret

2009106c <atexit>:
2009106c:	200b883a 	mov	r5,r4
20091070:	000d883a 	mov	r6,zero
20091074:	0009883a 	mov	r4,zero
20091078:	000f883a 	mov	r7,zero
2009107c:	00912a01 	jmpi	200912a0 <__register_exitproc>

20091080 <exit>:
20091080:	defffe04 	addi	sp,sp,-8
20091084:	000b883a 	mov	r5,zero
20091088:	dc000015 	stw	r16,0(sp)
2009108c:	dfc00115 	stw	ra,4(sp)
20091090:	2021883a 	mov	r16,r4
20091094:	00913b40 	call	200913b4 <__call_exitprocs>
20091098:	00800034 	movhi	r2,0
2009109c:	10881004 	addi	r2,r2,8256
200910a0:	11000017 	ldw	r4,0(r2)
200910a4:	20800f17 	ldw	r2,60(r4)
200910a8:	10000126 	beq	r2,zero,200910b0 <exit+0x30>
200910ac:	103ee83a 	callr	r2
200910b0:	8009883a 	mov	r4,r16
200910b4:	00915480 	call	20091548 <_exit>

200910b8 <memcmp>:
200910b8:	01c000c4 	movi	r7,3
200910bc:	3980192e 	bgeu	r7,r6,20091124 <memcmp+0x6c>
200910c0:	2144b03a 	or	r2,r4,r5
200910c4:	11c4703a 	and	r2,r2,r7
200910c8:	10000f26 	beq	r2,zero,20091108 <memcmp+0x50>
200910cc:	20800003 	ldbu	r2,0(r4)
200910d0:	28c00003 	ldbu	r3,0(r5)
200910d4:	10c0151e 	bne	r2,r3,2009112c <memcmp+0x74>
200910d8:	31bfff84 	addi	r6,r6,-2
200910dc:	01ffffc4 	movi	r7,-1
200910e0:	00000406 	br	200910f4 <memcmp+0x3c>
200910e4:	20800003 	ldbu	r2,0(r4)
200910e8:	28c00003 	ldbu	r3,0(r5)
200910ec:	31bfffc4 	addi	r6,r6,-1
200910f0:	10c00e1e 	bne	r2,r3,2009112c <memcmp+0x74>
200910f4:	21000044 	addi	r4,r4,1
200910f8:	29400044 	addi	r5,r5,1
200910fc:	31fff91e 	bne	r6,r7,200910e4 <__flash_rwdata_start+0xfffff634>
20091100:	0005883a 	mov	r2,zero
20091104:	f800283a 	ret
20091108:	20c00017 	ldw	r3,0(r4)
2009110c:	28800017 	ldw	r2,0(r5)
20091110:	1880041e 	bne	r3,r2,20091124 <memcmp+0x6c>
20091114:	31bfff04 	addi	r6,r6,-4
20091118:	21000104 	addi	r4,r4,4
2009111c:	29400104 	addi	r5,r5,4
20091120:	39bff936 	bltu	r7,r6,20091108 <__flash_rwdata_start+0xfffff658>
20091124:	303fe91e 	bne	r6,zero,200910cc <__flash_rwdata_start+0xfffff61c>
20091128:	003ff506 	br	20091100 <__flash_rwdata_start+0xfffff650>
2009112c:	10c5c83a 	sub	r2,r2,r3
20091130:	f800283a 	ret

20091134 <_putc_r>:
20091134:	defffc04 	addi	sp,sp,-16
20091138:	dc000215 	stw	r16,8(sp)
2009113c:	dfc00315 	stw	ra,12(sp)
20091140:	2021883a 	mov	r16,r4
20091144:	20000226 	beq	r4,zero,20091150 <_putc_r+0x1c>
20091148:	20800e17 	ldw	r2,56(r4)
2009114c:	10001b26 	beq	r2,zero,200911bc <_putc_r+0x88>
20091150:	30800217 	ldw	r2,8(r6)
20091154:	10bfffc4 	addi	r2,r2,-1
20091158:	30800215 	stw	r2,8(r6)
2009115c:	10000a16 	blt	r2,zero,20091188 <_putc_r+0x54>
20091160:	30800017 	ldw	r2,0(r6)
20091164:	11400005 	stb	r5,0(r2)
20091168:	30800017 	ldw	r2,0(r6)
2009116c:	10c00044 	addi	r3,r2,1
20091170:	30c00015 	stw	r3,0(r6)
20091174:	10800003 	ldbu	r2,0(r2)
20091178:	dfc00317 	ldw	ra,12(sp)
2009117c:	dc000217 	ldw	r16,8(sp)
20091180:	dec00404 	addi	sp,sp,16
20091184:	f800283a 	ret
20091188:	30c00617 	ldw	r3,24(r6)
2009118c:	10c00616 	blt	r2,r3,200911a8 <_putc_r+0x74>
20091190:	30800017 	ldw	r2,0(r6)
20091194:	00c00284 	movi	r3,10
20091198:	11400005 	stb	r5,0(r2)
2009119c:	30800017 	ldw	r2,0(r6)
200911a0:	11400003 	ldbu	r5,0(r2)
200911a4:	28fff11e 	bne	r5,r3,2009116c <__flash_rwdata_start+0xfffff6bc>
200911a8:	8009883a 	mov	r4,r16
200911ac:	dfc00317 	ldw	ra,12(sp)
200911b0:	dc000217 	ldw	r16,8(sp)
200911b4:	dec00404 	addi	sp,sp,16
200911b8:	00892a01 	jmpi	200892a0 <__swbuf_r>
200911bc:	d9400015 	stw	r5,0(sp)
200911c0:	d9800115 	stw	r6,4(sp)
200911c4:	00846e40 	call	200846e4 <__sinit>
200911c8:	d9800117 	ldw	r6,4(sp)
200911cc:	d9400017 	ldw	r5,0(sp)
200911d0:	003fdf06 	br	20091150 <__flash_rwdata_start+0xfffff6a0>

200911d4 <putc>:
200911d4:	00800034 	movhi	r2,0
200911d8:	defffc04 	addi	sp,sp,-16
200911dc:	10881104 	addi	r2,r2,8260
200911e0:	dc400115 	stw	r17,4(sp)
200911e4:	14400017 	ldw	r17,0(r2)
200911e8:	dc800215 	stw	r18,8(sp)
200911ec:	dc000015 	stw	r16,0(sp)
200911f0:	dfc00315 	stw	ra,12(sp)
200911f4:	2025883a 	mov	r18,r4
200911f8:	2821883a 	mov	r16,r5
200911fc:	88000226 	beq	r17,zero,20091208 <putc+0x34>
20091200:	88800e17 	ldw	r2,56(r17)
20091204:	10001a26 	beq	r2,zero,20091270 <putc+0x9c>
20091208:	80800217 	ldw	r2,8(r16)
2009120c:	10bfffc4 	addi	r2,r2,-1
20091210:	80800215 	stw	r2,8(r16)
20091214:	10000c16 	blt	r2,zero,20091248 <putc+0x74>
20091218:	80800017 	ldw	r2,0(r16)
2009121c:	14800005 	stb	r18,0(r2)
20091220:	80800017 	ldw	r2,0(r16)
20091224:	10c00044 	addi	r3,r2,1
20091228:	80c00015 	stw	r3,0(r16)
2009122c:	10800003 	ldbu	r2,0(r2)
20091230:	dfc00317 	ldw	ra,12(sp)
20091234:	dc800217 	ldw	r18,8(sp)
20091238:	dc400117 	ldw	r17,4(sp)
2009123c:	dc000017 	ldw	r16,0(sp)
20091240:	dec00404 	addi	sp,sp,16
20091244:	f800283a 	ret
20091248:	80c00617 	ldw	r3,24(r16)
2009124c:	10c00b16 	blt	r2,r3,2009127c <putc+0xa8>
20091250:	80800017 	ldw	r2,0(r16)
20091254:	00c00284 	movi	r3,10
20091258:	14800005 	stb	r18,0(r2)
2009125c:	80800017 	ldw	r2,0(r16)
20091260:	11400003 	ldbu	r5,0(r2)
20091264:	28ffef1e 	bne	r5,r3,20091224 <__flash_rwdata_start+0xfffff774>
20091268:	8809883a 	mov	r4,r17
2009126c:	00000506 	br	20091284 <putc+0xb0>
20091270:	8809883a 	mov	r4,r17
20091274:	00846e40 	call	200846e4 <__sinit>
20091278:	003fe306 	br	20091208 <__flash_rwdata_start+0xfffff758>
2009127c:	8809883a 	mov	r4,r17
20091280:	900b883a 	mov	r5,r18
20091284:	800d883a 	mov	r6,r16
20091288:	dfc00317 	ldw	ra,12(sp)
2009128c:	dc800217 	ldw	r18,8(sp)
20091290:	dc400117 	ldw	r17,4(sp)
20091294:	dc000017 	ldw	r16,0(sp)
20091298:	dec00404 	addi	sp,sp,16
2009129c:	00892a01 	jmpi	200892a0 <__swbuf_r>

200912a0 <__register_exitproc>:
200912a0:	00800034 	movhi	r2,0
200912a4:	defffa04 	addi	sp,sp,-24
200912a8:	10881004 	addi	r2,r2,8256
200912ac:	dc000315 	stw	r16,12(sp)
200912b0:	14000017 	ldw	r16,0(r2)
200912b4:	dc400415 	stw	r17,16(sp)
200912b8:	dfc00515 	stw	ra,20(sp)
200912bc:	80805217 	ldw	r2,328(r16)
200912c0:	2023883a 	mov	r17,r4
200912c4:	10003626 	beq	r2,zero,200913a0 <__register_exitproc+0x100>
200912c8:	10c00117 	ldw	r3,4(r2)
200912cc:	010007c4 	movi	r4,31
200912d0:	20c00e16 	blt	r4,r3,2009130c <__register_exitproc+0x6c>
200912d4:	1a400044 	addi	r9,r3,1
200912d8:	8800211e 	bne	r17,zero,20091360 <__register_exitproc+0xc0>
200912dc:	18c00084 	addi	r3,r3,2
200912e0:	18c7883a 	add	r3,r3,r3
200912e4:	18c7883a 	add	r3,r3,r3
200912e8:	12400115 	stw	r9,4(r2)
200912ec:	10c7883a 	add	r3,r2,r3
200912f0:	19400015 	stw	r5,0(r3)
200912f4:	0005883a 	mov	r2,zero
200912f8:	dfc00517 	ldw	ra,20(sp)
200912fc:	dc400417 	ldw	r17,16(sp)
20091300:	dc000317 	ldw	r16,12(sp)
20091304:	dec00604 	addi	sp,sp,24
20091308:	f800283a 	ret
2009130c:	00800034 	movhi	r2,0
20091310:	10800004 	addi	r2,r2,0
20091314:	10002526 	beq	r2,zero,200913ac <__register_exitproc+0x10c>
20091318:	01006404 	movi	r4,400
2009131c:	d9400015 	stw	r5,0(sp)
20091320:	d9800115 	stw	r6,4(sp)
20091324:	d9c00215 	stw	r7,8(sp)
20091328:	00000000 	call	20000000 <__alt_data_end>
2009132c:	d9400017 	ldw	r5,0(sp)
20091330:	d9800117 	ldw	r6,4(sp)
20091334:	d9c00217 	ldw	r7,8(sp)
20091338:	10001c26 	beq	r2,zero,200913ac <__register_exitproc+0x10c>
2009133c:	80c05217 	ldw	r3,328(r16)
20091340:	10000115 	stw	zero,4(r2)
20091344:	02400044 	movi	r9,1
20091348:	10c00015 	stw	r3,0(r2)
2009134c:	80805215 	stw	r2,328(r16)
20091350:	10006215 	stw	zero,392(r2)
20091354:	10006315 	stw	zero,396(r2)
20091358:	0007883a 	mov	r3,zero
2009135c:	883fdf26 	beq	r17,zero,200912dc <__flash_rwdata_start+0xfffff82c>
20091360:	18d1883a 	add	r8,r3,r3
20091364:	4211883a 	add	r8,r8,r8
20091368:	1211883a 	add	r8,r2,r8
2009136c:	41802215 	stw	r6,136(r8)
20091370:	01000044 	movi	r4,1
20091374:	11806217 	ldw	r6,392(r2)
20091378:	20c8983a 	sll	r4,r4,r3
2009137c:	310cb03a 	or	r6,r6,r4
20091380:	11806215 	stw	r6,392(r2)
20091384:	41c04215 	stw	r7,264(r8)
20091388:	01800084 	movi	r6,2
2009138c:	89bfd31e 	bne	r17,r6,200912dc <__flash_rwdata_start+0xfffff82c>
20091390:	11806317 	ldw	r6,396(r2)
20091394:	3108b03a 	or	r4,r6,r4
20091398:	11006315 	stw	r4,396(r2)
2009139c:	003fcf06 	br	200912dc <__flash_rwdata_start+0xfffff82c>
200913a0:	80805304 	addi	r2,r16,332
200913a4:	80805215 	stw	r2,328(r16)
200913a8:	003fc706 	br	200912c8 <__flash_rwdata_start+0xfffff818>
200913ac:	00bfffc4 	movi	r2,-1
200913b0:	003fd106 	br	200912f8 <__flash_rwdata_start+0xfffff848>

200913b4 <__call_exitprocs>:
200913b4:	00800034 	movhi	r2,0
200913b8:	10881004 	addi	r2,r2,8256
200913bc:	10800017 	ldw	r2,0(r2)
200913c0:	defff404 	addi	sp,sp,-48
200913c4:	dd800815 	stw	r22,32(sp)
200913c8:	d8800015 	stw	r2,0(sp)
200913cc:	10805204 	addi	r2,r2,328
200913d0:	dd000615 	stw	r20,24(sp)
200913d4:	dc800415 	stw	r18,16(sp)
200913d8:	dfc00b15 	stw	ra,44(sp)
200913dc:	df000a15 	stw	fp,40(sp)
200913e0:	ddc00915 	stw	r23,36(sp)
200913e4:	dd400715 	stw	r21,28(sp)
200913e8:	dcc00515 	stw	r19,20(sp)
200913ec:	dc400315 	stw	r17,12(sp)
200913f0:	dc000215 	stw	r16,8(sp)
200913f4:	2025883a 	mov	r18,r4
200913f8:	2829883a 	mov	r20,r5
200913fc:	d8800115 	stw	r2,4(sp)
20091400:	05bfffc4 	movi	r22,-1
20091404:	d8800017 	ldw	r2,0(sp)
20091408:	14c05217 	ldw	r19,328(r2)
2009140c:	98001d26 	beq	r19,zero,20091484 <__call_exitprocs+0xd0>
20091410:	dd400117 	ldw	r21,4(sp)
20091414:	98800117 	ldw	r2,4(r19)
20091418:	173fffc4 	addi	fp,r2,-1
2009141c:	e0000d16 	blt	fp,zero,20091454 <__call_exitprocs+0xa0>
20091420:	14000044 	addi	r16,r2,1
20091424:	8421883a 	add	r16,r16,r16
20091428:	8421883a 	add	r16,r16,r16
2009142c:	84402004 	addi	r17,r16,128
20091430:	9c63883a 	add	r17,r19,r17
20091434:	9c21883a 	add	r16,r19,r16
20091438:	a0001e26 	beq	r20,zero,200914b4 <__call_exitprocs+0x100>
2009143c:	80804017 	ldw	r2,256(r16)
20091440:	15001c26 	beq	r2,r20,200914b4 <__call_exitprocs+0x100>
20091444:	e73fffc4 	addi	fp,fp,-1
20091448:	843fff04 	addi	r16,r16,-4
2009144c:	8c7fff04 	addi	r17,r17,-4
20091450:	e5bff91e 	bne	fp,r22,20091438 <__flash_rwdata_start+0xfffff988>
20091454:	00800034 	movhi	r2,0
20091458:	10800004 	addi	r2,r2,0
2009145c:	10000926 	beq	r2,zero,20091484 <__call_exitprocs+0xd0>
20091460:	98800117 	ldw	r2,4(r19)
20091464:	1000311e 	bne	r2,zero,2009152c <__call_exitprocs+0x178>
20091468:	98800017 	ldw	r2,0(r19)
2009146c:	10003426 	beq	r2,zero,20091540 <__call_exitprocs+0x18c>
20091470:	9809883a 	mov	r4,r19
20091474:	a8800015 	stw	r2,0(r21)
20091478:	00000000 	call	20000000 <__alt_data_end>
2009147c:	acc00017 	ldw	r19,0(r21)
20091480:	983fe41e 	bne	r19,zero,20091414 <__flash_rwdata_start+0xfffff964>
20091484:	dfc00b17 	ldw	ra,44(sp)
20091488:	df000a17 	ldw	fp,40(sp)
2009148c:	ddc00917 	ldw	r23,36(sp)
20091490:	dd800817 	ldw	r22,32(sp)
20091494:	dd400717 	ldw	r21,28(sp)
20091498:	dd000617 	ldw	r20,24(sp)
2009149c:	dcc00517 	ldw	r19,20(sp)
200914a0:	dc800417 	ldw	r18,16(sp)
200914a4:	dc400317 	ldw	r17,12(sp)
200914a8:	dc000217 	ldw	r16,8(sp)
200914ac:	dec00c04 	addi	sp,sp,48
200914b0:	f800283a 	ret
200914b4:	98800117 	ldw	r2,4(r19)
200914b8:	80c00017 	ldw	r3,0(r16)
200914bc:	10bfffc4 	addi	r2,r2,-1
200914c0:	17001526 	beq	r2,fp,20091518 <__call_exitprocs+0x164>
200914c4:	80000015 	stw	zero,0(r16)
200914c8:	183fde26 	beq	r3,zero,20091444 <__flash_rwdata_start+0xfffff994>
200914cc:	00800044 	movi	r2,1
200914d0:	1708983a 	sll	r4,r2,fp
200914d4:	98806217 	ldw	r2,392(r19)
200914d8:	9dc00117 	ldw	r23,4(r19)
200914dc:	2084703a 	and	r2,r4,r2
200914e0:	1000061e 	bne	r2,zero,200914fc <__call_exitprocs+0x148>
200914e4:	183ee83a 	callr	r3
200914e8:	98800117 	ldw	r2,4(r19)
200914ec:	15ffc51e 	bne	r2,r23,20091404 <__flash_rwdata_start+0xfffff954>
200914f0:	a8800017 	ldw	r2,0(r21)
200914f4:	14ffd326 	beq	r2,r19,20091444 <__flash_rwdata_start+0xfffff994>
200914f8:	003fc206 	br	20091404 <__flash_rwdata_start+0xfffff954>
200914fc:	98806317 	ldw	r2,396(r19)
20091500:	2084703a 	and	r2,r4,r2
20091504:	1000061e 	bne	r2,zero,20091520 <__call_exitprocs+0x16c>
20091508:	89400017 	ldw	r5,0(r17)
2009150c:	9009883a 	mov	r4,r18
20091510:	183ee83a 	callr	r3
20091514:	003ff406 	br	200914e8 <__flash_rwdata_start+0xfffffa38>
20091518:	9f000115 	stw	fp,4(r19)
2009151c:	003fea06 	br	200914c8 <__flash_rwdata_start+0xfffffa18>
20091520:	89000017 	ldw	r4,0(r17)
20091524:	183ee83a 	callr	r3
20091528:	003fef06 	br	200914e8 <__flash_rwdata_start+0xfffffa38>
2009152c:	98800017 	ldw	r2,0(r19)
20091530:	982b883a 	mov	r21,r19
20091534:	1027883a 	mov	r19,r2
20091538:	983fb61e 	bne	r19,zero,20091414 <__flash_rwdata_start+0xfffff964>
2009153c:	003fd106 	br	20091484 <__flash_rwdata_start+0xfffff9d4>
20091540:	0005883a 	mov	r2,zero
20091544:	003ffa06 	br	20091530 <__flash_rwdata_start+0xfffffa80>

20091548 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
20091548:	defffd04 	addi	sp,sp,-12
2009154c:	df000215 	stw	fp,8(sp)
20091550:	df000204 	addi	fp,sp,8
20091554:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
20091558:	0001883a 	nop
2009155c:	e0bfff17 	ldw	r2,-4(fp)
20091560:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
20091564:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
20091568:	10000226 	beq	r2,zero,20091574 <_exit+0x2c>
    ALT_SIM_FAIL();
2009156c:	002af070 	cmpltui	zero,zero,43969
20091570:	00000106 	br	20091578 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
20091574:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
20091578:	003fff06 	br	20091578 <__flash_rwdata_start+0xfffffac8>
