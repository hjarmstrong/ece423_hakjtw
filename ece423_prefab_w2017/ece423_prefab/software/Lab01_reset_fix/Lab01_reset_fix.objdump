
Lab01_reset_fix.elf:     file format elf32-littlenios2
Lab01_reset_fix.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x20080240

Program Header:
    LOAD off    0x00001000 vaddr 0x20080000 paddr 0x20080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x20080020 paddr 0x20080020 align 2**12
         filesz 0x0001bbf0 memsz 0x0001bbf0 flags r-x
    LOAD off    0x0001d000 vaddr 0x00000000 paddr 0x2009bc10 align 2**12
         filesz 0x00002894 memsz 0x00002fdc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  20080000  20080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000220  20080020  20080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001b9d0  20080240  20080240  00001240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a38  00000000  2009bc10  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001e5c  00000a38  2009c648  0001da38  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000748  00002894  2009e4a4  0001f894  2**2
                  ALLOC, SMALL_DATA
  6 .lpddr2       00000000  00002fdc  00002fdc  0001f894  2**0
                  CONTENTS
  7 .sram         00000000  2009e4a4  2009e4a4  0001f894  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001f894  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000013d0  00000000  00000000  0001f8b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00037ade  00000000  00000000  00020c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000d6d2  00000000  00000000  00058766  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00011a55  00000000  00000000  00065e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000039b0  00000000  00000000  00077890  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00005afc  00000000  00000000  0007b240  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00026acd  00000000  00000000  00080d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  000a780c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00002888  00000000  00000000  000a7870  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000aef4e  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  000aef51  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000aef54  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000aef55  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000aef56  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000aef5a  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000aef5e  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  000aef62  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  000aef6b  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  000aef74  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  000aef7d  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000032  00000000  00000000  000aef88  2**0
                  CONTENTS, READONLY
 30 .jdi          000039ed  00000000  00000000  000aefba  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0010895c  00000000  00000000  000b29a7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
20080000 l    d  .entry	00000000 .entry
20080020 l    d  .exceptions	00000000 .exceptions
20080240 l    d  .text	00000000 .text
00000000 l    d  .rodata	00000000 .rodata
00000a38 l    d  .rwdata	00000000 .rwdata
00002894 l    d  .bss	00000000 .bss
00002fdc l    d  .lpddr2	00000000 .lpddr2
2009e4a4 l    d  .sram	00000000 .sram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Lab01_reset_fix_bsp//obj/HAL/src/crt0.o
20080288 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 tables.c
00000000 l    df *ABS*	00000000 util.c
00000000 l    df *ABS*	00000000 idct.c
00000000 l    df *ABS*	00000000 lossless_decode.c
00000000 l    df *ABS*	00000000 mjpeg423_decoder.c
00000000 l    df *ABS*	00000000 ycbcr_to_rgb.c
00000000 l    df *ABS*	00000000 FatFileSystem.c
000028ec l     O .bss	00000140 fInfo.3428
00000000 l    df *ABS*	00000000 FatInternal.c
00002a2c l     O .bss	00000200 szBlock.3473
00000000 l    df *ABS*	00000000 debug.c
00000000 l    df *ABS*	00000000 mmc.c
20083928 l     F .text	00000124 mmc_send_status.constprop.4
20083a4c l     F .text	00000a64 mmc_startup
000003ec l     O .rodata	00000040 multipliers
0000042c l     O .rodata	00000010 fbase
0000289c l     O .bss	00000008 scr.3318
00002c2c l     O .bss	00000040 switch_status.3319
00000000 l    df *ABS*	00000000 ocsdc.c
20084c44 l     F .text	00000100 ocsdc_set_ios
20084d44 l     F .text	000001e0 ocsdc_send_cmd
20084f24 l     F .text	000000fc ocsdc_init
00000000 l    df *ABS*	00000000 sd_lib.c
00000000 l    df *ABS*	00000000 ece423_vid_ctl.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 main.c
200863d0 l     F .text	00000040 timer1_isr
20086410 l     F .text	00000088 pio_isr
00000000 l    df *ABS*	00000000 lib2-divmod.c
20086678 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-divtable.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00000d38 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malign.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strrchr.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000062e l     O .rodata	00000010 zeroes.4240
0000063e l     O .rodata	00000010 blanks.4239
00000000 l    df *ABS*	00000000 vfprintf.c
0000064e l     O .rodata	00000010 zeroes.4255
2008e740 l     F .text	000000bc __sbprintf
0000065e l     O .rodata	00000010 blanks.4254
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
2008ec14 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
200907d0 l     F .text	00000008 __fp_lock
200907d8 l     F .text	00000008 __fp_unlock
200907ec l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00001584 l     O .rwdata	00000020 lc_ctype_charset
00001564 l     O .rwdata	00000020 lc_message_charset
000015a4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0000068c l     O .rodata	0000000c p05.2710
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 vfprintf.c
000007b0 l     O .rodata	00000010 zeroes.4184
000007c0 l     O .rodata	00000010 blanks.4183
00000000 l    df *ABS*	00000000 vfprintf.c
20094634 l     F .text	000000fc __sprint_r.part.0
000007e0 l     O .rodata	00000010 blanks.4199
000007d0 l     O .rodata	00000010 zeroes.4200
20095a3c l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 alt_close.c
20097184 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dev.c
20097318 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
20097378 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
20097628 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
2009771c l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
20097800 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
200979dc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00002880 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_uncached_malloc.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
20097e7c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
20097fc4 l     F .text	00000038 alt_dev_reg
00001784 l     O .rwdata	00001060 jtag_uart
000027e4 l     O .rwdata	00000060 video_dma
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
200982f4 l     F .text	00000204 altera_avalon_jtag_uart_irq
200984f8 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_msgdma.c
20098b18 l     F .text	00000050 alt_get_errno
20098b68 l     F .text	00000094 alt_msgdma_write_standard_descriptor
20098bfc l     F .text	0000012c alt_msgdma_write_extended_descriptor
20098d28 l     F .text	00000184 alt_msgdma_irq
20098eac l     F .text	0000008c alt_msgdma_construct_standard_descriptor
20098f38 l     F .text	00000154 alt_msgdma_construct_extended_descriptor
2009908c l     F .text	000002d0 alt_msgdma_descriptor_async_transfer
2009935c l     F .text	00000378 alt_msgdma_descriptor_sync_transfer
200999a4 l     F .text	000000a4 alt_msgdma_construct_prefetcher_standard_descriptor
20099a48 l     F .text	00000194 alt_msgdma_construct_prefetcher_extended_descriptor
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
2009ac84 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
2009b1c0 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
2009b2f8 l     F .text	00000050 alt_get_errno
2009b348 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 __atexit.c
000028e8 g     O .bss	00000004 alt_instruction_exception_handler
2009a8b8 g     F .text	0000003c alt_msgdma_standard_descriptor_async_transfer
2008a4ac g     F .text	00000018 putchar
200928d0 g     F .text	00000074 _mprec_log10
20085df8 g     F .text	00000338 I2C_Read
200929bc g     F .text	0000008c __any_on
200960fc g     F .text	00000054 _isatty_r
00000698 g     O .rodata	00000028 __mprec_tinytens
20097924 g     F .text	00000078 alt_main
2008a4c4 g     F .text	000000a8 _puts_r
20081a58 g     F .text	00000028 Fat_FileBrowseBegin
00002edc g     O .bss	00000100 alt_irq
20096150 g     F .text	0000005c _lseek_r
200817ac g     F .text	00000270 ycbcr_to_rgb
2009c648 g       *ABS*	00000000 __flash_rwdata_start
20096f40 g     F .text	00000084 .hidden __eqdf2
20099784 g     F .text	00000058 alt_msgdma_construct_standard_mm_to_mm_descriptor
00002fdc g       *ABS*	00000000 __alt_heap_start
2008a468 g     F .text	0000003c printf
20096208 g     F .text	0000009c _wcrtomb_r
00000bb8 g     O .rwdata	00000080 Yquant
20080000 g       *ABS*	00000000 __alt_mem_sram
20093268 g     F .text	0000005c __sseek
20090b20 g     F .text	00000010 __sinit
20095af8 g     F .text	00000138 __swbuf_r
200915cc g     F .text	0000007c _setlocale_r
20090988 g     F .text	00000068 __sfmoreglue
200979bc g     F .text	00000020 __malloc_unlock
20081a80 g     F .text	000005a0 Fat_FileBrowseNext
200867a4 g     F .text	00000450 .hidden __divsf3
000028e4 g     O .bss	00000004 altera_avalon_timer_ts_freq
200830a8 g     F .text	000000d4 fatIsValidDir
2009194c g     F .text	0000015c memmove
20090b08 g     F .text	00000018 _cleanup
20091aa8 g     F .text	000000a8 _Balloc
200996d4 g     F .text	00000058 alt_msgdma_construct_standard_st_to_mm_descriptor
20096fc4 g     F .text	000000e0 .hidden __gtdf2
2009b7d8 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
200861e4 g     F .text	000000e4 i2c_write
20080000 g     F .entry	0000001c __reset
20080020 g       *ABS*	00000000 __flash_exceptions_start
200960a4 g     F .text	00000058 _fstat_r
000028b8 g     O .bss	00000004 errno
000028a8 g     O .bss	00000004 ready_frames
200931e4 g     F .text	00000008 __seofread
200935fc g     F .text	00001038 ___svfiprintf_internal_r
20082b48 g     F .text	00000198 fatNextCluster
000028d0 g     O .bss	00000004 alt_argv
0000a844 g       *ABS*	00000000 _gp
20097e4c g     F .text	00000030 usleep
20097dd4 g     F .text	00000078 alt_uncached_malloc
2009a1f4 g     F .text	000000d4 alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits
00001604 g     O .rwdata	00000180 alt_fd_list
2008a4a4 g     F .text	00000008 _putchar_r
2009ae30 g     F .text	00000090 alt_find_dev
2008a1e0 g     F .text	00000138 memcpy
200907e0 g     F .text	0000000c _cleanup_r
2008930c g     F .text	000000d0 .hidden __floatsidf
2009b280 g     F .text	00000078 alt_io_redirect
200970a4 g     F .text	000000e0 .hidden __ltdf2
2009bc10 g       *ABS*	00000000 __DTOR_END__
2009a614 g     F .text	0000008c alt_msgdma_start_prefetcher_with_extd_desc_list
2009a8f4 g     F .text	0000003c alt_msgdma_extended_descriptor_async_transfer
2009a864 g     F .text	00000054 alt_msgdma_register_callback
200822e0 g     F .text	000000bc Fat_FileExist
2008a56c g     F .text	00000014 puts
2009ba4c g     F .text	0000009c alt_exception_cause_generated_bad_addr
2009311c g     F .text	00000074 __fpclassifyd
2009282c g     F .text	000000a4 __ratio
20095a18 g     F .text	00000024 __vfiprintf_internal
200986f4 g     F .text	0000020c altera_avalon_jtag_uart_read
20089994 g     F .text	00000014 malloc
20099ed4 g     F .text	000000f0 alt_msgdma_prefetcher_add_standard_desc_to_list
2008a43c g     F .text	0000002c _printf_r
200809d0 g     F .text	000002f4 lossless_decode
20086794 g     F .text	00000008 .hidden __udivsi3
20097678 g     F .text	000000a4 isatty
000006e8 g     O .rodata	000000c8 __mprec_tens
20091648 g     F .text	0000000c __locale_charset
2008e8ec g     F .text	00000040 vsnprintf
2009b9c0 g     F .text	0000008c alt_icache_flush
000028b4 g     O .bss	00000004 __malloc_top_pad
0000285c g     O .rwdata	00000004 __mb_cur_max
20091678 g     F .text	0000000c _localeconv_r
20091eb4 g     F .text	0000003c __i2b
20090f84 g     F .text	000004c0 __sfvwrite_r
2008a580 g     F .text	00000054 _sbrk_r
200961ac g     F .text	0000005c _read_r
00002844 g     O .rwdata	00000004 command
200972a4 g     F .text	00000074 alt_dcache_flush
00002874 g     O .rwdata	00000004 alt_max_fd
20085544 g     F .text	00000410 ece423_init_hdmi
200833fc g     F .text	000001e0 fatMount
20095dc0 g     F .text	000000f0 _fclose_r
200907a0 g     F .text	00000030 fflush
000028b0 g     O .bss	00000004 __malloc_max_sbrked_mem
20097478 g     F .text	000001b0 alt_irq_register
20089480 g     F .text	00000110 .hidden __extendsfdf2
20087128 g     F .text	0000089c .hidden __adddf3
2008317c g     F .text	0000000c fatIsUnusedDir
200925d4 g     F .text	0000011c __b2d
20099c34 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor
200969b0 g     F .text	00000590 .hidden __umoddi3
20085954 g     F .text	00000250 ece423_video_display_init
20097850 g     F .text	000000d4 lseek
20080314 g     F .text	00000068 print_dct
0000284c g     O .rwdata	00000004 _global_impure_ptr
20092bb4 g     F .text	00000568 _realloc_r
00002fdc g       *ABS*	00000000 __bss_end
2009b0d0 g     F .text	000000f0 alt_iic_isr_register
20097cd0 g     F .text	00000104 alt_tick
2009a6f8 g     F .text	0000016c alt_msgdma_init
200963f0 g     F .text	000005c0 .hidden __udivdi3
20095ec4 g     F .text	00000184 _fputwc_r
000006c0 g     O .rodata	00000028 __mprec_bigtens
20091c98 g     F .text	00000104 __s2b
200893dc g     F .text	000000a4 .hidden __floatunsidf
20082a68 g     F .text	00000010 SD_ReadBlocks
2009237c g     F .text	00000060 __mcmp
2009a96c g     F .text	0000003c alt_msgdma_extended_descriptor_sync_transfer
20082a5c g     F .text	0000000c SD_ReadBlock512
20090b40 g     F .text	00000018 __fp_lock_all
2009b084 g     F .text	0000004c alt_ic_irq_enabled
20085ba4 g     F .text	00000254 I2C_Write
2008239c g     F .text	00000158 Fat_FileOpen
20097c38 g     F .text	00000098 alt_alarm_stop
20080de4 g     F .text	00000070 input_AC
000028c8 g     O .bss	00000004 alt_irq_active
20082e84 g     F .text	00000210 fatDelClusterList
20080e54 g     F .text	00000958 mjpeg423_decode
200800fc g     F .exceptions	000000d0 alt_irq_handler
000015dc g     O .rwdata	00000028 alt_dev_null
2009986c g     F .text	00000090 alt_msgdma_construct_extended_mm_to_st_descriptor
20086130 g     F .text	0000006c i2c_start
2009a588 g     F .text	0000008c alt_msgdma_start_prefetcher_with_std_desc_list
2008a7d4 g     F .text	00000068 strrchr
2009ac40 g     F .text	00000044 alt_dcache_flush_all
20091d9c g     F .text	00000068 __hi0bits
20089284 g     F .text	00000088 .hidden __fixdfsi
20085020 g     F .text	00000008 flush_dcache_range
00002894 g       *ABS*	00000000 __ram_rwdata_end
0000286c g     O .rwdata	00000008 alt_dev_list
20081a1c g     F .text	00000004 Fat_Mount
20097ecc g     F .text	000000f8 write
20092a48 g     F .text	000000a0 _putc_r
00000a38 g       *ABS*	00000000 __ram_rodata_end
200973c8 g     F .text	000000b0 fstat
200970a4 g     F .text	000000e0 .hidden __ledf2
20083810 g     F .text	0000004c myprintf
200920ec g     F .text	00000140 __pow5mult
20094748 g     F .text	000012d0 ___vfiprintf_internal_r
000028c4 g     O .bss	00000004 __nlocale_changed
2008679c g     F .text	00000008 .hidden __umodsi3
20099c8c g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor
00002fdc g       *ABS*	00000000 end
200844ec g     F .text	00000468 mmc_init
20098230 g     F .text	000000c4 altera_avalon_jtag_uart_init
200801cc g     F .exceptions	00000074 alt_instruction_exception_entry
2009bc10 g       *ABS*	00000000 __CTOR_LIST__
20000000 g       *ABS*	00000000 __alt_stack_pointer
20089728 g     F .text	00000064 .hidden __clzsi2
20098900 g     F .text	00000218 altera_avalon_jtag_uart_write
200828e8 g     F .text	00000004 Fat_FileClose
20090b30 g     F .text	00000004 __sfp_lock_acquire
20082020 g     F .text	0000005c Fat_FileCount
20091864 g     F .text	000000e8 memchr
2008c7cc g     F .text	00001f50 ___vfprintf_internal_r
2008a5d4 g     F .text	00000058 _sprintf_r
20090c94 g     F .text	000002f0 _free_r
2009b56c g     F .text	00000228 alt_printf
20091654 g     F .text	00000010 __locale_mb_cur_max
2008ea80 g     F .text	00000194 __call_exitprocs
000028c0 g     O .bss	00000004 __mlocale_changed
00002854 g     O .rwdata	00000004 __malloc_sbrk_base
20080240 g     F .text	0000004c _start
000028d8 g     O .bss	00000004 _alt_tick_rate
200802ac g     F .text	00000068 print_block
2008037c g     F .text	00000080 print_bitstream
2009222c g     F .text	00000150 __lshift
2009972c g     F .text	00000058 alt_msgdma_construct_standard_mm_to_st_descriptor
000028dc g     O .bss	00000004 _alt_nticks
20097a2c g     F .text	000000fc read
20098030 g     F .text	0000009c alt_sys_init
20093430 g     F .text	000001cc __ssprint_r
20085218 g     F .text	0000007c ece423_video_display_register_written_buffer
2009bafc g     F .text	00000114 __register_exitproc
200824f4 g     F .text	00000018 Fat_FileSize
20091ef0 g     F .text	000001fc __multiply
200985a0 g     F .text	00000068 altera_avalon_jtag_uart_close
00000a38 g       *ABS*	00000000 __ram_rwdata_start
00000000 g       *ABS*	00000000 __ram_rodata_start
200844b0 g     F .text	0000003c udelay
00002c6c g     O .bss	00000028 __malloc_current_mallinfo
200926f0 g     F .text	0000013c __d2b
200980cc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
2009b90c g     F .text	000000b4 alt_get_fd
2009aae8 g     F .text	00000158 alt_busy_sleep
20085028 g     F .text	0000011c ocsdc_mmc_init
20095ca8 g     F .text	00000054 _close_r
00002848 g     O .rwdata	00000004 is_video_playing
20099bdc g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor
2008250c g     F .text	0000035c Fat_FileRead
2008a164 g     F .text	0000007c memcmp
2009818c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00002fdc g       *ABS*	00000000 __alt_stack_base
200981dc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
200803fc g     F .text	000005d4 idct
20083304 g     F .text	000000f8 fatFindUnusedDirectory
20099ce4 g     F .text	000000a0 alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor
2008e92c g     F .text	00000154 __swsetup_r
00002898 g     O .bss	00000004 init
200879c4 g     F .text	000008cc .hidden __divdf3
200909f0 g     F .text	00000118 __sfp
20092944 g     F .text	00000078 __copybits
0000115c g     O .rwdata	00000408 __malloc_av_
20090b3c g     F .text	00000004 __sinit_lock_release
200853f0 g     F .text	00000030 ece423_video_display_clear_screen
2008e7fc g     F .text	000000f0 _vsnprintf_r
2008619c g     F .text	00000048 i2c_stop
20088290 g     F .text	00000724 .hidden __muldf3
20093190 g     F .text	00000054 __sread
200828ec g     F .text	00000170 Fat_SpeedTest
2009b7f8 g     F .text	00000114 alt_find_file
2009acd4 g     F .text	000000a4 alt_dev_llist_insert
2009799c g     F .text	00000020 __malloc_lock
20097b88 g     F .text	000000b0 sbrk
2008a83c g     F .text	00001f90 ___svfprintf_internal_r
20090744 g     F .text	0000005c _fflush_r
20095cfc g     F .text	000000c4 _calloc_r
2008227c g     F .text	0000005c Fat_CheckExtension
20083264 g     F .text	000000a0 fatFindDirectory
20080d7c g     F .text	00000068 input_DC
00000c38 g     O .rwdata	00000100 .hidden __divsi3_table
00002894 g       *ABS*	00000000 __bss_start
2008a318 g     F .text	00000124 memset
2009a6a0 g     F .text	00000058 alt_msgdma_open
20086498 g     F .text	000001e0 main
200831d8 g     F .text	00000068 fatReadSecter
000028d4 g     O .bss	00000004 alt_envp
000028ac g     O .bss	00000004 __malloc_max_total_mem
20099fc4 g     F .text	00000198 alt_msgdma_prefetcher_add_extended_desc_to_list
2008385c g     F .text	00000064 myprintf_hexarray
2009812c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
200862c8 g     F .text	00000108 i2c_read
20095c30 g     F .text	0000001c __swbuf
200932c4 g     F .text	00000008 __sclose
20083188 g     F .text	00000028 fatDump
20000000 g       *ABS*	00000000 __alt_heap_limit
20095eb0 g     F .text	00000014 fclose
20089590 g     F .text	00000198 .hidden __truncdfsf2
2008ee14 g     F .text	00001728 _dtoa_r
2009a2c8 g     F .text	000002c0 alt_msgdma_start_prefetcher_with_list_addr
200899bc g     F .text	000007a8 _malloc_r
20096364 g     F .text	00000030 __ascii_wctomb
00002878 g     O .rwdata	00000004 alt_errno
20099e1c g     F .text	000000b8 alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor
20091444 g     F .text	000000c4 _fwalk
20083094 g     F .text	00000004 fatDumpDate
20092ae8 g     F .text	000000cc putc
20082868 g     F .text	00000080 Fat_FileSeek
200866e4 g     F .text	00000054 .hidden __divsi3
20090b70 g     F .text	00000124 _malloc_trim_r
2009bc10 g       *ABS*	00000000 __CTOR_END__
20086bf4 g     F .text	00000424 .hidden __mulsf3
2008a698 g     F .text	000000a4 strcmp
2009bc10 g       *ABS*	00000000 __flash_rodata_start
2009bc10 g       *ABS*	00000000 __DTOR_LIST__
200831b0 g     F .text	00000028 fatArray2Value
20084b18 g     F .text	0000012c print_mmcinfo
20096f40 g     F .text	00000084 .hidden __nedf2
20082ad8 g     F .text	00000070 fat32ClusterType
20097ffc g     F .text	00000034 alt_irq_init
20097b28 g     F .text	00000060 alt_release_fd
2009a930 g     F .text	0000003c alt_msgdma_standard_descriptor_sync_transfer
200897c4 g     F .text	0000001c memalign
2008a62c g     F .text	0000006c sprintf
000004e9 g     O .rodata	00000100 .hidden __clz_tab
2008380c g     F .text	00000004 debug_output
000028bc g     O .bss	00000004 _PathLocale
2009bae8 g     F .text	00000014 atexit
20095c4c g     F .text	0000005c _write_r
200820ac g     F .text	000001d0 fatComposeShortFilename
20091684 g     F .text	0000001c setlocale
20099d84 g     F .text	00000098 alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor
00002850 g     O .rwdata	00000004 _impure_ptr
000028cc g     O .bss	00000004 alt_argc
2009053c g     F .text	00000208 __sflush_r
000028e0 g     O .bss	00000004 altera_avalon_timer_ts_base
2009add4 g     F .text	0000005c _do_dtors
20091670 g     F .text	00000008 __locale_cjk_lang
20081a2c g     F .text	0000002c Fat_Type
200838c0 g     F .text	00000068 myprintf_dwordarray
20084954 g     F .text	000001c4 mmc_bread
00000a38 g     O .rwdata	00000100 zigzag_table
20080020 g       .exceptions	00000000 alt_irq_entry
2008028c g     F .text	00000020 error_and_exit
20092574 g     F .text	00000060 __ulp
20090b58 g     F .text	00000018 __fp_unlock_all
20082a78 g     F .text	00000060 fat16ClusterType
00000000 g       *ABS*	00000000 __alt_mem_lpddr2
00002864 g     O .rwdata	00000008 alt_fs_list
20085524 g     F .text	00000020 ece423_video_display_get_buffer
20085420 g     F .text	00000010 ece423_video_display_get_descriptor_span
20083240 g     F .text	00000024 fatReadMultiSecter
20080020 g       *ABS*	00000000 __ram_exceptions_start
200916a0 g     F .text	0000000c localeconv
2008207c g     F .text	00000030 fatSameLongFilename
2009aef0 g     F .text	00000050 alt_ic_isr_register
00002894 g       *ABS*	00000000 _edata
20083098 g     F .text	00000004 fatDumpTime
20080cc4 g     F .text	000000b8 update_buffer
00002fdc g       *ABS*	00000000 _end
20080240 g       *ABS*	00000000 __ram_exceptions_end
20098608 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
20085294 g     F .text	00000028 ece423_video_display_buffer_is_available
2009afe0 g     F .text	000000a4 alt_ic_irq_disable
200931ec g     F .text	0000007c __swrite
00002858 g     O .rwdata	00000004 __malloc_trim_threshold
20091664 g     F .text	0000000c __locale_msgcharset
2008978c g     F .text	00000038 exit
200835dc g     F .text	00000230 fatMountSdcard
20091508 g     F .text	000000c4 _fwalk_reent
2009a15c g     F .text	00000098 alt_msgdma_prefetcher_set_std_list_own_by_hw_bits
20087018 g     F .text	00000110 .hidden __floatunsisf
200923dc g     F .text	00000198 __mdiff
20086738 g     F .text	0000005c .hidden __modsi3
200897e0 g     F .text	000001b4 _memalign_r
20000000 g       *ABS*	00000000 __alt_data_end
20080020 g     F .exceptions	00000000 alt_exception
20090b34 g     F .text	00000004 __sfp_lock_release
200998fc g     F .text	000000a8 alt_msgdma_construct_extended_mm_to_mm_descriptor
200851e4 g     F .text	00000034 SDLIB_ReadBlocks
20085144 g     F .text	00000070 SDLIB_Init
200997dc g     F .text	00000090 alt_msgdma_construct_extended_st_to_mm_descriptor
20097344 g     F .text	00000034 _exit
2009a9a8 g     F .text	00000140 alt_alarm_start
200916ac g     F .text	000001b8 __smakebuf_r
0000288c g     O .rwdata	00000008 alt_msgdma_list
2008a73c g     F .text	00000098 strlen
200852bc g     F .text	00000134 ece423_video_display_switch_frames
20085430 g     F .text	000000f4 ece423_video_display_allocate_buffers
2009b414 g     F .text	00000158 open
20096fc4 g     F .text	000000e0 .hidden __gedf2
2009b794 g     F .text	00000044 alt_putchar
00002860 g     O .rwdata	00000004 __wctomb
200822d8 g     F .text	00000008 Fat_GetFileName
20094730 g     F .text	00000018 __sprint_r
2009aec0 g     F .text	00000030 alt_icache_flush_all
200932cc g     F .text	00000164 strchr
0000287c g     O .rwdata	00000004 alt_priority_mask
00000b38 g     O .rwdata	00000080 Cquant
2009af40 g     F .text	000000a0 alt_ic_irq_enable
2008e71c g     F .text	00000024 __vfprintf_internal
20082ce0 g     F .text	000001a4 fatFindUnusedCluster
20096394 g     F .text	0000005c _wctomb_r
200889b4 g     F .text	000008d0 .hidden __subdf3
000028a4 g     O .bss	00000004 sd_drv
20091e04 g     F .text	000000b0 __lo0bits
00002884 g     O .rwdata	00000008 alt_alarm_list
2009ad78 g     F .text	0000005c _do_ctors
200962a4 g     F .text	000000c0 wcrtomb
200971d4 g     F .text	000000d0 close
00002894 g     O .bss	00000004 disp
20081a20 g     F .text	0000000c Fat_Unmount
20097780 g     F .text	00000080 alt_load
00002c94 g     O .bss	00000248 vInfo
20096048 g     F .text	0000005c fputwc
200899a8 g     F .text	00000014 free
20090b38 g     F .text	00000004 __sinit_lock_acquire
20091b78 g     F .text	00000120 __multadd
2008309c g     F .text	0000000c fatIsLastDir
20091b50 g     F .text	00000028 _Bfree
200851b4 g     F .text	00000030 SDLIB_ReadBlock512



Disassembly of section .entry:

20080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
20080000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
20080004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
20080008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
2008000c:	00bffd16 	blt	zero,r2,20080004 <__flash_rwdata_start+0xfffe39bc>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
20080010:	00480234 	movhi	at,8200
    ori r1, r1, %lo(_start)
20080014:	08409014 	ori	at,at,576
    jmp r1
20080018:	0800683a 	jmp	at
2008001c:	00000000 	call	20000000 <__alt_data_end>

Disassembly of section .exceptions:

20080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
20080020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
20080024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
20080028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
2008002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
20080030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
20080034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
20080038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
2008003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
20080040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
20080044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
20080048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
2008004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
20080050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
20080054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
20080058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
2008005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
20080060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
20080064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
20080068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
2008006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
20080070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
20080074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
20080078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
2008007c:	10000326 	beq	r2,zero,2008008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
20080080:	20000226 	beq	r4,zero,2008008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
20080084:	00800fc0 	call	200800fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
20080088:	00000706 	br	200800a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
2008008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
20080090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
20080094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
20080098:	00801cc0 	call	200801cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
2008009c:	1000021e 	bne	r2,zero,200800a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
200800a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
200800a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
200800a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
200800ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
200800b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
200800b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
200800b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
200800bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
200800c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
200800c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
200800c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
200800cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
200800d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
200800d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
200800d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
200800dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
200800e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
200800e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
200800e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
200800ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
200800f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
200800f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
200800f8:	ef80083a 	eret

200800fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
200800fc:	defff904 	addi	sp,sp,-28
20080100:	dfc00615 	stw	ra,24(sp)
20080104:	df000515 	stw	fp,20(sp)
20080108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
2008010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
20080110:	0005313a 	rdctl	r2,ipending
20080114:	e0bffe15 	stw	r2,-8(fp)

  return active;
20080118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
2008011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
20080120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
20080124:	00800044 	movi	r2,1
20080128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
2008012c:	e0fffb17 	ldw	r3,-20(fp)
20080130:	e0bffc17 	ldw	r2,-16(fp)
20080134:	1884703a 	and	r2,r3,r2
20080138:	10001426 	beq	r2,zero,2008018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
2008013c:	00800034 	movhi	r2,0
20080140:	108bb704 	addi	r2,r2,11996
20080144:	e0fffd17 	ldw	r3,-12(fp)
20080148:	180690fa 	slli	r3,r3,3
2008014c:	10c5883a 	add	r2,r2,r3
20080150:	10c00017 	ldw	r3,0(r2)
20080154:	00800034 	movhi	r2,0
20080158:	108bb704 	addi	r2,r2,11996
2008015c:	e13ffd17 	ldw	r4,-12(fp)
20080160:	200890fa 	slli	r4,r4,3
20080164:	21000104 	addi	r4,r4,4
20080168:	1105883a 	add	r2,r2,r4
2008016c:	10800017 	ldw	r2,0(r2)
20080170:	1009883a 	mov	r4,r2
20080174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
20080178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
2008017c:	0005313a 	rdctl	r2,ipending
20080180:	e0bfff15 	stw	r2,-4(fp)

  return active;
20080184:	e0bfff17 	ldw	r2,-4(fp)
20080188:	00000706 	br	200801a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
2008018c:	e0bffc17 	ldw	r2,-16(fp)
20080190:	1085883a 	add	r2,r2,r2
20080194:	e0bffc15 	stw	r2,-16(fp)
      i++;
20080198:	e0bffd17 	ldw	r2,-12(fp)
2008019c:	10800044 	addi	r2,r2,1
200801a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
200801a4:	003fe106 	br	2008012c <__flash_rwdata_start+0xfffe3ae4>

    active = alt_irq_pending ();
200801a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
200801ac:	e0bffb17 	ldw	r2,-20(fp)
200801b0:	103fdb1e 	bne	r2,zero,20080120 <__flash_rwdata_start+0xfffe3ad8>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
200801b4:	0001883a 	nop
}
200801b8:	e037883a 	mov	sp,fp
200801bc:	dfc00117 	ldw	ra,4(sp)
200801c0:	df000017 	ldw	fp,0(sp)
200801c4:	dec00204 	addi	sp,sp,8
200801c8:	f800283a 	ret

200801cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
200801cc:	defffb04 	addi	sp,sp,-20
200801d0:	dfc00415 	stw	ra,16(sp)
200801d4:	df000315 	stw	fp,12(sp)
200801d8:	df000304 	addi	fp,sp,12
200801dc:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
200801e0:	000531fa 	rdctl	r2,exception
200801e4:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
200801e8:	e0bffd17 	ldw	r2,-12(fp)
200801ec:	10801f0c 	andi	r2,r2,124
200801f0:	1004d0ba 	srli	r2,r2,2
200801f4:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
200801f8:	0005333a 	rdctl	r2,badaddr
200801fc:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
20080200:	d0a02917 	ldw	r2,-32604(gp)
20080204:	10000726 	beq	r2,zero,20080224 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
20080208:	d0a02917 	ldw	r2,-32604(gp)
2008020c:	e0fffd17 	ldw	r3,-12(fp)
20080210:	1809883a 	mov	r4,r3
20080214:	e17fff17 	ldw	r5,-4(fp)
20080218:	e1bffe17 	ldw	r6,-8(fp)
2008021c:	103ee83a 	callr	r2
20080220:	00000206 	br	2008022c <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
20080224:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
20080228:	0005883a 	mov	r2,zero
}
2008022c:	e037883a 	mov	sp,fp
20080230:	dfc00117 	ldw	ra,4(sp)
20080234:	df000017 	ldw	fp,0(sp)
20080238:	dec00204 	addi	sp,sp,8
2008023c:	f800283a 	ret

Disassembly of section .text:

20080240 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
20080240:	00900014 	movui	r2,16384
#endif

0:
    initd 0(r2)
20080244:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
20080248:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
2008024c:	00bffd16 	blt	zero,r2,20080244 <__flash_rwdata_start+0xfffe3bfc>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
20080250:	06c80034 	movhi	sp,8192
    ori sp, sp, %lo(__alt_stack_pointer)
20080254:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
20080258:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
2008025c:	d6aa1114 	ori	gp,gp,43076
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
20080260:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
20080264:	108a2514 	ori	r2,r2,10388

    movhi r3, %hi(__bss_end)
20080268:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
2008026c:	18cbf714 	ori	r3,r3,12252

    beq r2, r3, 1f
20080270:	10c00326 	beq	r2,r3,20080280 <_start+0x40>

0:
    stw zero, (r2)
20080274:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
20080278:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
2008027c:	10fffd36 	bltu	r2,r3,20080274 <__flash_rwdata_start+0xfffe3c2c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
20080280:	00977800 	call	20097780 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
20080284:	00979240 	call	20097924 <alt_main>

20080288 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
20080288:	003fff06 	br	20080288 <__flash_rwdata_start+0xfffe3c40>

2008028c <error_and_exit>:

#include <stdio.h>
#include <stdlib.h>
#include "util.h"

void error_and_exit(const char* str){
2008028c:	200b883a 	mov	r5,r4
    printf("Error: %s\n", str);
20080290:	01000034 	movhi	r4,0

#include <stdio.h>
#include <stdlib.h>
#include "util.h"

void error_and_exit(const char* str){
20080294:	deffff04 	addi	sp,sp,-4
    printf("Error: %s\n", str);
20080298:	21000004 	addi	r4,r4,0

#include <stdio.h>
#include <stdlib.h>
#include "util.h"

void error_and_exit(const char* str){
2008029c:	dfc00015 	stw	ra,0(sp)
    printf("Error: %s\n", str);
200802a0:	008a4680 	call	2008a468 <printf>
    exit(-1);
200802a4:	013fffc4 	movi	r4,-1
200802a8:	008978c0 	call	2008978c <exit>

200802ac <print_block>:
}

void print_block(pcolor_block_t b)
{
200802ac:	defffc04 	addi	sp,sp,-16
200802b0:	dc800215 	stw	r18,8(sp)
200802b4:	dc400115 	stw	r17,4(sp)
200802b8:	dfc00315 	stw	ra,12(sp)
200802bc:	dc000015 	stw	r16,0(sp)
200802c0:	244001c4 	addi	r17,r4,7
200802c4:	248011c4 	addi	r18,r4,71
200802c8:	8c3ffe44 	addi	r16,r17,-7
    for (int row = 0; row < 8; row++)
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
200802cc:	81400003 	ldbu	r5,0(r16)
200802d0:	01000034 	movhi	r4,0
200802d4:	84000044 	addi	r16,r16,1
200802d8:	21000304 	addi	r4,r4,12
200802dc:	008a4680 	call	2008a468 <printf>
200802e0:	8c3ffa1e 	bne	r17,r16,200802cc <__flash_rwdata_start+0xfffe3c84>
            else printf("%u\n", b[row][column]);
200802e4:	89400003 	ldbu	r5,0(r17)
200802e8:	01000034 	movhi	r4,0
200802ec:	8c400204 	addi	r17,r17,8
200802f0:	21006d04 	addi	r4,r4,436
200802f4:	008a4680 	call	2008a468 <printf>
    exit(-1);
}

void print_block(pcolor_block_t b)
{
    for (int row = 0; row < 8; row++)
200802f8:	8cbff31e 	bne	r17,r18,200802c8 <__flash_rwdata_start+0xfffe3c80>
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
            else printf("%u\n", b[row][column]);
        } 
}
200802fc:	dfc00317 	ldw	ra,12(sp)
20080300:	dc800217 	ldw	r18,8(sp)
20080304:	dc400117 	ldw	r17,4(sp)
20080308:	dc000017 	ldw	r16,0(sp)
2008030c:	dec00404 	addi	sp,sp,16
20080310:	f800283a 	ret

20080314 <print_dct>:

void print_dct(pdct_block_t b)
{
20080314:	defffc04 	addi	sp,sp,-16
20080318:	dc800215 	stw	r18,8(sp)
2008031c:	dc400115 	stw	r17,4(sp)
20080320:	dfc00315 	stw	ra,12(sp)
20080324:	dc000015 	stw	r16,0(sp)
20080328:	24400384 	addi	r17,r4,14
2008032c:	24802384 	addi	r18,r4,142
20080330:	8c3ffc84 	addi	r16,r17,-14
    for (int row = 0; row < 8; row++)
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
20080334:	8140000f 	ldh	r5,0(r16)
20080338:	01000034 	movhi	r4,0
2008033c:	84000084 	addi	r16,r16,2
20080340:	21000304 	addi	r4,r4,12
20080344:	008a4680 	call	2008a468 <printf>
20080348:	8c3ffa1e 	bne	r17,r16,20080334 <__flash_rwdata_start+0xfffe3cec>
            else printf("%d\n", b[row][column]);
2008034c:	8940000f 	ldh	r5,0(r17)
20080350:	01000034 	movhi	r4,0
20080354:	8c400404 	addi	r17,r17,16
20080358:	21000404 	addi	r4,r4,16
2008035c:	008a4680 	call	2008a468 <printf>
        } 
}

void print_dct(pdct_block_t b)
{
    for (int row = 0; row < 8; row++)
20080360:	8cbff31e 	bne	r17,r18,20080330 <__flash_rwdata_start+0xfffe3ce8>
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
            else printf("%d\n", b[row][column]);
        } 
}
20080364:	dfc00317 	ldw	ra,12(sp)
20080368:	dc800217 	ldw	r18,8(sp)
2008036c:	dc400117 	ldw	r17,4(sp)
20080370:	dc000017 	ldw	r16,0(sp)
20080374:	dec00404 	addi	sp,sp,16
20080378:	f800283a 	ret

2008037c <print_bitstream>:

void print_bitstream(int num_bytes, void* bitstream)
{
    for (int index = 0; index < num_bytes; index++)
2008037c:	01001d0e 	bge	zero,r4,200803f4 <print_bitstream+0x78>
            else printf("%d\n", b[row][column]);
        } 
}

void print_bitstream(int num_bytes, void* bitstream)
{
20080380:	defffb04 	addi	sp,sp,-20
20080384:	dcc00315 	stw	r19,12(sp)
20080388:	dc800215 	stw	r18,8(sp)
2008038c:	dc400115 	stw	r17,4(sp)
20080390:	dfc00415 	stw	ra,16(sp)
20080394:	dc000015 	stw	r16,0(sp)
20080398:	2823883a 	mov	r17,r5
2008039c:	2927883a 	add	r19,r5,r4
    for (int index = 0; index < num_bytes; index++)
        for(int x = 0; x < 8 ; x++)
200803a0:	04800204 	movi	r18,8
            else printf("%d\n", b[row][column]);
        } 
}

void print_bitstream(int num_bytes, void* bitstream)
{
200803a4:	0021883a 	mov	r16,zero
    for (int index = 0; index < num_bytes; index++)
        for(int x = 0; x < 8 ; x++)
            printf("%u", (uint8_t)((((uint8_t*)bitstream)[index]) << x) >> 7);
200803a8:	89400003 	ldbu	r5,0(r17)
200803ac:	01000034 	movhi	r4,0
200803b0:	21000504 	addi	r4,r4,20
200803b4:	2c0a983a 	sll	r5,r5,r16
}

void print_bitstream(int num_bytes, void* bitstream)
{
    for (int index = 0; index < num_bytes; index++)
        for(int x = 0; x < 8 ; x++)
200803b8:	84000044 	addi	r16,r16,1
            printf("%u", (uint8_t)((((uint8_t*)bitstream)[index]) << x) >> 7);
200803bc:	29403fcc 	andi	r5,r5,255
200803c0:	280ad1fa 	srli	r5,r5,7
200803c4:	008a4680 	call	2008a468 <printf>
}

void print_bitstream(int num_bytes, void* bitstream)
{
    for (int index = 0; index < num_bytes; index++)
        for(int x = 0; x < 8 ; x++)
200803c8:	84bff71e 	bne	r16,r18,200803a8 <__flash_rwdata_start+0xfffe3d60>
200803cc:	8c400044 	addi	r17,r17,1
        } 
}

void print_bitstream(int num_bytes, void* bitstream)
{
    for (int index = 0; index < num_bytes; index++)
200803d0:	8cfff41e 	bne	r17,r19,200803a4 <__flash_rwdata_start+0xfffe3d5c>
        for(int x = 0; x < 8 ; x++)
            printf("%u", (uint8_t)((((uint8_t*)bitstream)[index]) << x) >> 7);
    printf("\n");
200803d4:	01000284 	movi	r4,10
}
200803d8:	dfc00417 	ldw	ra,16(sp)
200803dc:	dcc00317 	ldw	r19,12(sp)
200803e0:	dc800217 	ldw	r18,8(sp)
200803e4:	dc400117 	ldw	r17,4(sp)
200803e8:	dc000017 	ldw	r16,0(sp)
200803ec:	dec00504 	addi	sp,sp,20
void print_bitstream(int num_bytes, void* bitstream)
{
    for (int index = 0; index < num_bytes; index++)
        for(int x = 0; x < 8 ; x++)
            printf("%u", (uint8_t)((((uint8_t*)bitstream)[index]) << x) >> 7);
    printf("\n");
200803f0:	008a4ac1 	jmpi	2008a4ac <putchar>
200803f4:	01000284 	movi	r4,10
200803f8:	008a4ac1 	jmpi	2008a4ac <putchar>

200803fc <idct>:
/* normalize the result between 0 and 255 */
/* this is required to handle precision errors that might cause the decoded result to fall out of range */
#define NORMALIZE(x) (temp = (x), ( (temp < 0) ? 0 : ( (temp > 255) ? 255 : temp  ) ) )

void idct(pdct_block_t DCAC, pcolor_block_t block)
{
200803fc:	deffa904 	addi	sp,sp,-348
20080400:	20800404 	addi	r2,r4,16
20080404:	d8c03804 	addi	r3,sp,224
20080408:	dc804f15 	stw	r18,316(sp)
2008040c:	d8804815 	stw	r2,288(sp)
20080410:	1025883a 	mov	r18,r2
20080414:	d8c04715 	stw	r3,284(sp)
20080418:	d9c00804 	addi	r7,sp,32
2008041c:	da003004 	addi	r8,sp,192
20080420:	dac01004 	addi	r11,sp,64
20080424:	dbc02804 	addi	r15,sp,160
20080428:	d8801804 	addi	r2,sp,96
2008042c:	d8c02004 	addi	r3,sp,128
20080430:	df005515 	stw	fp,340(sp)
20080434:	ddc05415 	stw	r23,336(sp)
20080438:	dd805315 	stw	r22,332(sp)
2008043c:	dd405215 	stw	r21,328(sp)
20080440:	dd005115 	stw	r20,324(sp)
20080444:	dcc05015 	stw	r19,320(sp)
20080448:	dfc05615 	stw	ra,344(sp)
2008044c:	dc404e15 	stw	r17,312(sp)
20080450:	dc004d15 	stw	r16,308(sp)
20080454:	d9404915 	stw	r5,292(sp)
20080458:	27000804 	addi	fp,r4,32
2008045c:	25c01804 	addi	r23,r4,96
20080460:	25801004 	addi	r22,r4,64
20080464:	25401c04 	addi	r21,r4,112
20080468:	25001404 	addi	r20,r4,80
2008046c:	24c00c04 	addi	r19,r4,48
20080470:	d9c04615 	stw	r7,280(sp)
20080474:	da004515 	stw	r8,276(sp)
20080478:	dac04415 	stw	r11,272(sp)
2008047c:	dbc04315 	stw	r15,268(sp)
20080480:	d8804215 	stw	r2,264(sp)
20080484:	d8c04115 	stw	r3,260(sp)
    /* Pass 1: process columns from input, store into work array. */
    /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
    /* furthermore, we scale the results by 2**PASS1_BITS. */
    
    inptr = DCAC[0];
    wsptr = workspace;
20080488:	dec04015 	stw	sp,256(sp)
        /* Odd part per figure 8; the matrix is unitary and hence its
         * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
         */
        
        tmp0 = inptr[DCTSIZE*7];
        tmp1 =inptr[DCTSIZE*5];
2008048c:	a300000f 	ldh	r12,0(r20)
        
        /* Odd part per figure 8; the matrix is unitary and hence its
         * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
         */
        
        tmp0 = inptr[DCTSIZE*7];
20080490:	aac0000f 	ldh	r11,0(r21)
        tmp1 =inptr[DCTSIZE*5];
        tmp2 = inptr[DCTSIZE*3];
20080494:	9b80000f 	ldh	r14,0(r19)
        tmp3 = inptr[DCTSIZE*1];
20080498:	90c0000f 	ldh	r3,0(r18)
    for (ctr = DCTSIZE; ctr > 0; ctr--) {
        
        /* Even part: reverse the even part of the forward DCT. */
        /* The rotator is sqrt(2)*c(-6). */
        
        z2 = inptr[DCTSIZE*2];
2008049c:	e240000f 	ldh	r9,0(fp)
        z3 = inptr[DCTSIZE*6];
200804a0:	ba80000f 	ldh	r10,0(r23)
        tmp2 = inptr[DCTSIZE*3];
        tmp3 = inptr[DCTSIZE*1];
        
        z1 = tmp0 + tmp3;
        z2 = tmp1 + tmp2;
        z3 = tmp0 + tmp2;
200804a4:	5b8d883a 	add	r6,r11,r14
        z4 = tmp1 + tmp3;
200804a8:	60c5883a 	add	r2,r12,r3
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
        
        z2 = inptr[DCTSIZE*0];
200804ac:	2440000f 	ldh	r17,0(r4)
        z3 = inptr[DCTSIZE*4];
200804b0:	b200000f 	ldh	r8,0(r22)
        
        z1 = tmp0 + tmp3;
        z2 = tmp1 + tmp2;
        z3 = tmp0 + tmp2;
        z4 = tmp1 + tmp3;
        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
200804b4:	309b883a 	add	r13,r6,r2
200804b8:	6b496864 	muli	r13,r13,9633
        tmp0 = inptr[DCTSIZE*7];
        tmp1 =inptr[DCTSIZE*5];
        tmp2 = inptr[DCTSIZE*3];
        tmp3 = inptr[DCTSIZE*1];
        
        z1 = tmp0 + tmp3;
200804bc:	58df883a 	add	r15,r11,r3
        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
        tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
        z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
        z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
        z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
200804c0:	10bce124 	muli	r2,r2,-3196
        /* The rotator is sqrt(2)*c(-6). */
        
        z2 = inptr[DCTSIZE*2];
        z3 = inptr[DCTSIZE*6];
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
200804c4:	4abf883a 	add	ra,r9,r10
        
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
        tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
        z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
200804c8:	7bf8cce4 	muli	r15,r15,-7373
        tmp1 =inptr[DCTSIZE*5];
        tmp2 = inptr[DCTSIZE*3];
        tmp3 = inptr[DCTSIZE*1];
        
        z1 = tmp0 + tmp3;
        z2 = tmp1 + tmp2;
200804cc:	63a1883a 	add	r16,r12,r14
        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
        tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
        z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
        z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
        z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
200804d0:	31b04ee4 	muli	r6,r6,-16069
        /* The rotator is sqrt(2)*c(-6). */
        
        z2 = inptr[DCTSIZE*2];
        z3 = inptr[DCTSIZE*6];
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
200804d4:	ffc45464 	muli	ra,ra,4433
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
        
        z2 = inptr[DCTSIZE*0];
        z3 = inptr[DCTSIZE*4];
        
        tmp0 = (z2 + z3) << CONST_BITS;
200804d8:	8a0b883a 	add	r5,r17,r8
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
        tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
        z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
        z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
200804dc:	842b7f64 	muli	r16,r16,-20995
        
        z2 = inptr[DCTSIZE*0];
        z3 = inptr[DCTSIZE*4];
        
        tmp0 = (z2 + z3) << CONST_BITS;
        tmp1 = (z2 - z3) << CONST_BITS;
200804e0:	8a11c83a 	sub	r8,r17,r8
        z2 = inptr[DCTSIZE*2];
        z3 = inptr[DCTSIZE*6];
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
200804e4:	4a461fa4 	muli	r9,r9,6270
        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
        
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
        tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
200804e8:	18cc02e4 	muli	r3,r3,12299
        
        z2 = inptr[DCTSIZE*2];
        z3 = inptr[DCTSIZE*6];
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
200804ec:	52b137e4 	muli	r10,r10,-15137
        z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
        z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
        
        z3 += z5;
        z4 += z5;
200804f0:	1345883a 	add	r2,r2,r13
        
        z2 = inptr[DCTSIZE*0];
        z3 = inptr[DCTSIZE*4];
        
        tmp0 = (z2 + z3) << CONST_BITS;
        tmp1 = (z2 - z3) << CONST_BITS;
200804f4:	4010937a 	slli	r8,r8,13
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
        
        z2 = inptr[DCTSIZE*0];
        z3 = inptr[DCTSIZE*4];
        
        tmp0 = (z2 + z3) << CONST_BITS;
200804f8:	280a937a 	slli	r5,r5,13
        z4 = tmp1 + tmp3;
        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
        
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
200804fc:	73989524 	muli	r14,r14,25172
        z4 += z5;
        
        tmp0 += z1 + z3;
        tmp1 += z2 + z4;
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
20080500:	788f883a 	add	r7,r15,r2
        z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
        z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
        z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
        
        z3 += z5;
20080504:	334d883a 	add	r6,r6,r13
        z2 = inptr[DCTSIZE*2];
        z3 = inptr[DCTSIZE*6];
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
20080508:	4fd3883a 	add	r9,r9,ra
        z4 += z5;
        
        tmp0 += z1 + z3;
        tmp1 += z2 + z4;
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
2008050c:	38c7883a 	add	r3,r7,r3
        
        z2 = inptr[DCTSIZE*2];
        z3 = inptr[DCTSIZE*6];
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
20080510:	57d5883a 	add	r10,r10,ra
        z3 += z5;
        z4 += z5;
        
        tmp0 += z1 + z3;
        tmp1 += z2 + z4;
        tmp2 += z2 + z3;
20080514:	818f883a 	add	r7,r16,r6
        tmp0 = (z2 + z3) << CONST_BITS;
        tmp1 = (z2 - z3) << CONST_BITS;
        
        tmp10 = tmp0 + tmp3;
        tmp13 = tmp0 - tmp3;
        tmp11 = tmp1 + tmp2;
20080518:	42bf883a 	add	ra,r8,r10
        z3 = inptr[DCTSIZE*4];
        
        tmp0 = (z2 + z3) << CONST_BITS;
        tmp1 = (z2 - z3) << CONST_BITS;
        
        tmp10 = tmp0 + tmp3;
2008051c:	2a63883a 	add	r17,r5,r9
        z3 += z5;
        z4 += z5;
        
        tmp0 += z1 + z3;
        tmp1 += z2 + z4;
        tmp2 += z2 + z3;
20080520:	3b8f883a 	add	r7,r7,r14
        z3 = tmp0 + tmp2;
        z4 = tmp1 + tmp3;
        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
        
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
20080524:	63506ce4 	muli	r13,r12,16819
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
20080528:	f9dd883a 	add	r14,ra,r7
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
2008052c:	88d9883a 	add	r12,r17,r3
        tmp1 = (z2 - z3) << CONST_BITS;
        
        tmp10 = tmp0 + tmp3;
        tmp13 = tmp0 - tmp3;
        tmp11 = tmp1 + tmp2;
        tmp12 = tmp1 - tmp2;
20080530:	4295c83a 	sub	r10,r8,r10
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
20080534:	63010004 	addi	r12,r12,1024
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
20080538:	72010004 	addi	r8,r14,1024
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
2008053c:	88c7c83a 	sub	r3,r17,r3
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
20080540:	401dd2fa 	srai	r14,r8,11
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
20080544:	6019d2fa 	srai	r12,r12,11
20080548:	da004017 	ldw	r8,256(sp)
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
2008054c:	18c10004 	addi	r3,r3,1024
        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
        
        z3 += z5;
        z4 += z5;
        
        tmp0 += z1 + z3;
20080550:	798d883a 	add	r6,r15,r6
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
20080554:	1807d2fa 	srai	r3,r3,11
20080558:	dbc04717 	ldw	r15,284(sp)
        z2 = tmp1 + tmp2;
        z3 = tmp0 + tmp2;
        z4 = tmp1 + tmp3;
        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
        
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
2008055c:	5ac263a4 	muli	r11,r11,2446
        
        z3 += z5;
        z4 += z5;
        
        tmp0 += z1 + z3;
        tmp1 += z2 + z4;
20080560:	8085883a 	add	r2,r16,r2
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
20080564:	43000015 	stw	r12,0(r8)
        
        z3 += z5;
        z4 += z5;
        
        tmp0 += z1 + z3;
        tmp1 += z2 + z4;
20080568:	1345883a 	add	r2,r2,r13
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*6] = (int32_t) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
2008056c:	f9cfc83a 	sub	r7,ra,r7
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
20080570:	78c00015 	stw	r3,0(r15)
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*6] = (int32_t) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*2] = (int32_t) DESCALE(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
20080574:	509b883a 	add	r13,r10,r2
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
20080578:	d8c04617 	ldw	r3,280(sp)
        wsptr[DCTSIZE*6] = (int32_t) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
2008057c:	39c10004 	addi	r7,r7,1024
        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
        
        z3 += z5;
        z4 += z5;
        
        tmp0 += z1 + z3;
20080580:	32d7883a 	add	r11,r6,r11
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*6] = (int32_t) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
20080584:	da004517 	ldw	r8,276(sp)
        
        tmp0 = (z2 + z3) << CONST_BITS;
        tmp1 = (z2 - z3) << CONST_BITS;
        
        tmp10 = tmp0 + tmp3;
        tmp13 = tmp0 - tmp3;
20080588:	2a4bc83a 	sub	r5,r5,r9
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*6] = (int32_t) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
2008058c:	380fd2fa 	srai	r7,r7,11
        wsptr[DCTSIZE*2] = (int32_t) DESCALE(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*5] = (int32_t) DESCALE(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
20080590:	5095c83a 	sub	r10,r10,r2
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*6] = (int32_t) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*2] = (int32_t) DESCALE(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
20080594:	69810004 	addi	r6,r13,1024
        wsptr[DCTSIZE*5] = (int32_t) DESCALE(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*3] = (int32_t) DESCALE(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
20080598:	2ac5883a 	add	r2,r5,r11
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*6] = (int32_t) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*2] = (int32_t) DESCALE(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
2008059c:	301bd2fa 	srai	r13,r6,11
        wsptr[DCTSIZE*5] = (int32_t) DESCALE(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*3] = (int32_t) DESCALE(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*4] = (int32_t) DESCALE(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
200805a0:	2acbc83a 	sub	r5,r5,r11
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*6] = (int32_t) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*2] = (int32_t) DESCALE(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*5] = (int32_t) DESCALE(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
200805a4:	52810004 	addi	r10,r10,1024
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*6] = (int32_t) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*2] = (int32_t) DESCALE(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
200805a8:	dac04417 	ldw	r11,272(sp)
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
200805ac:	1b800015 	stw	r14,0(r3)
        wsptr[DCTSIZE*6] = (int32_t) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*2] = (int32_t) DESCALE(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*5] = (int32_t) DESCALE(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
200805b0:	dbc04317 	ldw	r15,268(sp)
200805b4:	5015d2fa 	srai	r10,r10,11
        wsptr[DCTSIZE*3] = (int32_t) DESCALE(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
200805b8:	10810004 	addi	r2,r2,1024
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*6] = (int32_t) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
200805bc:	41c00015 	stw	r7,0(r8)
        wsptr[DCTSIZE*2] = (int32_t) DESCALE(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*5] = (int32_t) DESCALE(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*3] = (int32_t) DESCALE(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
200805c0:	d8c04217 	ldw	r3,264(sp)
200805c4:	1005d2fa 	srai	r2,r2,11
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*6] = (int32_t) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*2] = (int32_t) DESCALE(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
200805c8:	5b400015 	stw	r13,0(r11)
        wsptr[DCTSIZE*5] = (int32_t) DESCALE(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
200805cc:	7a800015 	stw	r10,0(r15)
        wsptr[DCTSIZE*3] = (int32_t) DESCALE(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
200805d0:	18800015 	stw	r2,0(r3)
        wsptr[DCTSIZE*4] = (int32_t) DESCALE(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
        
        inptr++;			/* advance pointers to next column */
        wsptr++;
200805d4:	da004017 	ldw	r8,256(sp)
200805d8:	dac04717 	ldw	r11,284(sp)
200805dc:	dbc04617 	ldw	r15,280(sp)
200805e0:	d8804517 	ldw	r2,276(sp)
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*6] = (int32_t) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*2] = (int32_t) DESCALE(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*5] = (int32_t) DESCALE(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*3] = (int32_t) DESCALE(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*4] = (int32_t) DESCALE(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
200805e4:	29410004 	addi	r5,r5,1024
200805e8:	d9c04117 	ldw	r7,260(sp)
200805ec:	d8c04417 	ldw	r3,272(sp)
200805f0:	280bd2fa 	srai	r5,r5,11
        
        inptr++;			/* advance pointers to next column */
        wsptr++;
200805f4:	42000104 	addi	r8,r8,4
200805f8:	5ac00104 	addi	r11,r11,4
200805fc:	7bc00104 	addi	r15,r15,4
20080600:	10800104 	addi	r2,r2,4
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*6] = (int32_t) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*2] = (int32_t) DESCALE(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*5] = (int32_t) DESCALE(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*3] = (int32_t) DESCALE(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*4] = (int32_t) DESCALE(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
20080604:	39400015 	stw	r5,0(r7)
        
        inptr++;			/* advance pointers to next column */
        wsptr++;
20080608:	da004015 	stw	r8,256(sp)
2008060c:	dac04715 	stw	r11,284(sp)
20080610:	dbc04615 	stw	r15,280(sp)
20080614:	d8804515 	stw	r2,276(sp)
20080618:	18c00104 	addi	r3,r3,4
2008061c:	d8c04415 	stw	r3,272(sp)
20080620:	d9c04317 	ldw	r7,268(sp)
20080624:	da004217 	ldw	r8,264(sp)
20080628:	dac04117 	ldw	r11,260(sp)
    /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
    /* furthermore, we scale the results by 2**PASS1_BITS. */
    
    inptr = DCAC[0];
    wsptr = workspace;
    for (ctr = DCTSIZE; ctr > 0; ctr--) {
2008062c:	dbc04817 	ldw	r15,288(sp)
20080630:	39c00104 	addi	r7,r7,4
20080634:	42000104 	addi	r8,r8,4
20080638:	5ac00104 	addi	r11,r11,4
        wsptr[DCTSIZE*2] = (int32_t) DESCALE(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*5] = (int32_t) DESCALE(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*3] = (int32_t) DESCALE(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*4] = (int32_t) DESCALE(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
        
        inptr++;			/* advance pointers to next column */
2008063c:	21000084 	addi	r4,r4,2
20080640:	d9c04315 	stw	r7,268(sp)
20080644:	da004215 	stw	r8,264(sp)
20080648:	dac04115 	stw	r11,260(sp)
2008064c:	e7000084 	addi	fp,fp,2
20080650:	bdc00084 	addi	r23,r23,2
20080654:	b5800084 	addi	r22,r22,2
20080658:	ad400084 	addi	r21,r21,2
2008065c:	a5000084 	addi	r20,r20,2
20080660:	9cc00084 	addi	r19,r19,2
20080664:	94800084 	addi	r18,r18,2
    /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
    /* furthermore, we scale the results by 2**PASS1_BITS. */
    
    inptr = DCAC[0];
    wsptr = workspace;
    for (ctr = DCTSIZE; ctr > 0; ctr--) {
20080668:	23ff881e 	bne	r4,r15,2008048c <__flash_rwdata_start+0xfffe3e44>
2008066c:	dc404917 	ldw	r17,292(sp)
20080670:	d8800304 	addi	r2,sp,12
20080674:	d8c00104 	addi	r3,sp,4
20080678:	dfc00204 	addi	ra,sp,8
2008067c:	d8804815 	stw	r2,288(sp)
20080680:	d8c04715 	stw	r3,284(sp)
20080684:	89000044 	addi	r4,r17,1
20080688:	89c00184 	addi	r7,r17,6
2008068c:	8a000084 	addi	r8,r17,2
20080690:	8ac00144 	addi	r11,r17,5
20080694:	8bc000c4 	addi	r15,r17,3
20080698:	88800104 	addi	r2,r17,4
2008069c:	88c011c4 	addi	r3,r17,71
200806a0:	df000604 	addi	fp,sp,24
200806a4:	ddc00404 	addi	r23,sp,16
200806a8:	dd800704 	addi	r22,sp,28
200806ac:	dd400504 	addi	r21,sp,20
200806b0:	8a4001c4 	addi	r9,r17,7
200806b4:	d9004615 	stw	r4,280(sp)
200806b8:	d9c04515 	stw	r7,276(sp)
200806bc:	da004415 	stw	r8,272(sp)
200806c0:	dac04315 	stw	r11,268(sp)
200806c4:	dbc04215 	stw	r15,264(sp)
200806c8:	d8804115 	stw	r2,260(sp)
200806cc:	d8c04a15 	stw	r3,296(sp)
200806d0:	d80d883a 	mov	r6,sp
        tmp1 += z2 + z4;
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
200806d4:	04c000b4 	movhi	r19,2
200806d8:	05003fc4 	movi	r20,255
200806dc:	f815883a 	mov	r10,ra
200806e0:	00005f06 	br	20080860 <idct+0x464>
200806e4:	a1c0010e 	bge	r20,r7,200806ec <idct+0x2f0>
200806e8:	01c03fc4 	movi	r7,255
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
200806ec:	2309c83a 	sub	r4,r4,r12
200806f0:	24c9883a 	add	r4,r4,r19
        tmp1 += z2 + z4;
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
200806f4:	dbc04917 	ldw	r15,292(sp)
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
200806f8:	2009d4ba 	srai	r4,r4,18
        tmp1 += z2 + z4;
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
200806fc:	79c00005 	stb	r7,0(r15)
20080700:	2000a316 	blt	r4,zero,20080990 <idct+0x594>
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
20080704:	a100010e 	bge	r20,r4,2008070c <idct+0x310>
20080708:	01003fc4 	movi	r4,255
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
2008070c:	6947883a 	add	r3,r13,r5
20080710:	1cc7883a 	add	r3,r3,r19
20080714:	1807d4ba 	srai	r3,r3,18
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
20080718:	49000005 	stb	r4,0(r9)
2008071c:	18009e16 	blt	r3,zero,20080998 <idct+0x59c>
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
20080720:	a0c0010e 	bge	r20,r3,20080728 <idct+0x32c>
20080724:	00c03fc4 	movi	r3,255
        outptr[6] = NORMALIZE(DESCALE(tmp11 - tmp2,CONST_BITS+PASS1_BITS+3));
20080728:	694bc83a 	sub	r5,r13,r5
2008072c:	2ccb883a 	add	r5,r5,r19
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
20080730:	d9004617 	ldw	r4,280(sp)
        outptr[6] = NORMALIZE(DESCALE(tmp11 - tmp2,CONST_BITS+PASS1_BITS+3));
20080734:	280bd4ba 	srai	r5,r5,18
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
20080738:	20c00005 	stb	r3,0(r4)
2008073c:	28009216 	blt	r5,zero,20080988 <idct+0x58c>
        outptr[6] = NORMALIZE(DESCALE(tmp11 - tmp2,CONST_BITS+PASS1_BITS+3));
20080740:	a140010e 	bge	r20,r5,20080748 <idct+0x34c>
20080744:	01403fc4 	movi	r5,255
        outptr[2] = NORMALIZE(DESCALE(tmp12 + tmp1,CONST_BITS+PASS1_BITS+3));
20080748:	8207883a 	add	r3,r16,r8
2008074c:	1cc7883a 	add	r3,r3,r19
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
        outptr[6] = NORMALIZE(DESCALE(tmp11 - tmp2,CONST_BITS+PASS1_BITS+3));
20080750:	d9c04517 	ldw	r7,276(sp)
        outptr[2] = NORMALIZE(DESCALE(tmp12 + tmp1,CONST_BITS+PASS1_BITS+3));
20080754:	1807d4ba 	srai	r3,r3,18
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
        outptr[6] = NORMALIZE(DESCALE(tmp11 - tmp2,CONST_BITS+PASS1_BITS+3));
20080758:	39400005 	stb	r5,0(r7)
2008075c:	18008816 	blt	r3,zero,20080980 <idct+0x584>
        outptr[2] = NORMALIZE(DESCALE(tmp12 + tmp1,CONST_BITS+PASS1_BITS+3));
20080760:	a0c0010e 	bge	r20,r3,20080768 <idct+0x36c>
20080764:	00c03fc4 	movi	r3,255
        outptr[5] = NORMALIZE(DESCALE(tmp12 - tmp1,CONST_BITS+PASS1_BITS+3));
20080768:	8221c83a 	sub	r16,r16,r8
2008076c:	84e1883a 	add	r16,r16,r19
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
        outptr[6] = NORMALIZE(DESCALE(tmp11 - tmp2,CONST_BITS+PASS1_BITS+3));
        outptr[2] = NORMALIZE(DESCALE(tmp12 + tmp1,CONST_BITS+PASS1_BITS+3));
20080770:	da004417 	ldw	r8,272(sp)
        outptr[5] = NORMALIZE(DESCALE(tmp12 - tmp1,CONST_BITS+PASS1_BITS+3));
20080774:	8021d4ba 	srai	r16,r16,18
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
        outptr[6] = NORMALIZE(DESCALE(tmp11 - tmp2,CONST_BITS+PASS1_BITS+3));
        outptr[2] = NORMALIZE(DESCALE(tmp12 + tmp1,CONST_BITS+PASS1_BITS+3));
20080778:	40c00005 	stb	r3,0(r8)
2008077c:	80007e16 	blt	r16,zero,20080978 <idct+0x57c>
        outptr[5] = NORMALIZE(DESCALE(tmp12 - tmp1,CONST_BITS+PASS1_BITS+3));
20080780:	a400010e 	bge	r20,r16,20080788 <idct+0x38c>
20080784:	04003fc4 	movi	r16,255
        outptr[3] = NORMALIZE(DESCALE(tmp13 + tmp0,CONST_BITS+PASS1_BITS+3));
20080788:	1387883a 	add	r3,r2,r14
2008078c:	1cc7883a 	add	r3,r3,r19
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
        outptr[6] = NORMALIZE(DESCALE(tmp11 - tmp2,CONST_BITS+PASS1_BITS+3));
        outptr[2] = NORMALIZE(DESCALE(tmp12 + tmp1,CONST_BITS+PASS1_BITS+3));
        outptr[5] = NORMALIZE(DESCALE(tmp12 - tmp1,CONST_BITS+PASS1_BITS+3));
20080790:	dac04317 	ldw	r11,268(sp)
        outptr[3] = NORMALIZE(DESCALE(tmp13 + tmp0,CONST_BITS+PASS1_BITS+3));
20080794:	1807d4ba 	srai	r3,r3,18
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
        outptr[6] = NORMALIZE(DESCALE(tmp11 - tmp2,CONST_BITS+PASS1_BITS+3));
        outptr[2] = NORMALIZE(DESCALE(tmp12 + tmp1,CONST_BITS+PASS1_BITS+3));
        outptr[5] = NORMALIZE(DESCALE(tmp12 - tmp1,CONST_BITS+PASS1_BITS+3));
20080798:	5c000005 	stb	r16,0(r11)
2008079c:	18007416 	blt	r3,zero,20080970 <idct+0x574>
        outptr[3] = NORMALIZE(DESCALE(tmp13 + tmp0,CONST_BITS+PASS1_BITS+3));
200807a0:	a0c0010e 	bge	r20,r3,200807a8 <idct+0x3ac>
200807a4:	00c03fc4 	movi	r3,255
        outptr[4] = NORMALIZE(DESCALE(tmp13 - tmp0,CONST_BITS+PASS1_BITS+3));
200807a8:	1385c83a 	sub	r2,r2,r14
200807ac:	14c5883a 	add	r2,r2,r19
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
        outptr[6] = NORMALIZE(DESCALE(tmp11 - tmp2,CONST_BITS+PASS1_BITS+3));
        outptr[2] = NORMALIZE(DESCALE(tmp12 + tmp1,CONST_BITS+PASS1_BITS+3));
        outptr[5] = NORMALIZE(DESCALE(tmp12 - tmp1,CONST_BITS+PASS1_BITS+3));
        outptr[3] = NORMALIZE(DESCALE(tmp13 + tmp0,CONST_BITS+PASS1_BITS+3));
200807b0:	dbc04217 	ldw	r15,264(sp)
        outptr[4] = NORMALIZE(DESCALE(tmp13 - tmp0,CONST_BITS+PASS1_BITS+3));
200807b4:	1005d4ba 	srai	r2,r2,18
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
        outptr[6] = NORMALIZE(DESCALE(tmp11 - tmp2,CONST_BITS+PASS1_BITS+3));
        outptr[2] = NORMALIZE(DESCALE(tmp12 + tmp1,CONST_BITS+PASS1_BITS+3));
        outptr[5] = NORMALIZE(DESCALE(tmp12 - tmp1,CONST_BITS+PASS1_BITS+3));
        outptr[3] = NORMALIZE(DESCALE(tmp13 + tmp0,CONST_BITS+PASS1_BITS+3));
200807b8:	78c00005 	stb	r3,0(r15)
200807bc:	10006a16 	blt	r2,zero,20080968 <idct+0x56c>
        outptr[4] = NORMALIZE(DESCALE(tmp13 - tmp0,CONST_BITS+PASS1_BITS+3));
200807c0:	a080010e 	bge	r20,r2,200807c8 <idct+0x3cc>
200807c4:	00803fc4 	movi	r2,255
200807c8:	d9004817 	ldw	r4,288(sp)
200807cc:	d9c04717 	ldw	r7,284(sp)
200807d0:	d8c04117 	ldw	r3,260(sp)
200807d4:	da004917 	ldw	r8,292(sp)
200807d8:	21000804 	addi	r4,r4,32
200807dc:	39c00804 	addi	r7,r7,32
200807e0:	18800005 	stb	r2,0(r3)
200807e4:	dac04617 	ldw	r11,280(sp)
200807e8:	dbc04517 	ldw	r15,276(sp)
200807ec:	d8804417 	ldw	r2,272(sp)
200807f0:	d8c04317 	ldw	r3,268(sp)
200807f4:	d9004815 	stw	r4,288(sp)
200807f8:	d9c04715 	stw	r7,284(sp)
200807fc:	d9004217 	ldw	r4,264(sp)
20080800:	d9c04117 	ldw	r7,260(sp)
20080804:	42000204 	addi	r8,r8,8
20080808:	da004915 	stw	r8,292(sp)
    /* Pass 2: process rows from work array, store into output array. */
    /* Note that we must descale the results by a factor of 8 == 2**3, */
    /* and also undo the PASS1_BITS scaling. */
    
    wsptr = workspace;
    for (ctr = 0; ctr < DCTSIZE; ctr++) {
2008080c:	da004a17 	ldw	r8,296(sp)
20080810:	5ac00204 	addi	r11,r11,8
20080814:	7bc00204 	addi	r15,r15,8
20080818:	10800204 	addi	r2,r2,8
2008081c:	18c00204 	addi	r3,r3,8
20080820:	21000204 	addi	r4,r4,8
20080824:	39c00204 	addi	r7,r7,8
20080828:	4a400204 	addi	r9,r9,8
2008082c:	dac04615 	stw	r11,280(sp)
20080830:	dbc04515 	stw	r15,276(sp)
20080834:	d8804415 	stw	r2,272(sp)
20080838:	d8c04315 	stw	r3,268(sp)
2008083c:	d9004215 	stw	r4,264(sp)
20080840:	d9c04115 	stw	r7,260(sp)
        outptr[2] = NORMALIZE(DESCALE(tmp12 + tmp1,CONST_BITS+PASS1_BITS+3));
        outptr[5] = NORMALIZE(DESCALE(tmp12 - tmp1,CONST_BITS+PASS1_BITS+3));
        outptr[3] = NORMALIZE(DESCALE(tmp13 + tmp0,CONST_BITS+PASS1_BITS+3));
        outptr[4] = NORMALIZE(DESCALE(tmp13 - tmp0,CONST_BITS+PASS1_BITS+3));
        
        wsptr += DCTSIZE;		/* advance pointer to next row */
20080844:	31800804 	addi	r6,r6,32
20080848:	52800804 	addi	r10,r10,32
2008084c:	e7000804 	addi	fp,fp,32
20080850:	bdc00804 	addi	r23,r23,32
20080854:	b5800804 	addi	r22,r22,32
20080858:	ad400804 	addi	r21,r21,32
    /* Pass 2: process rows from work array, store into output array. */
    /* Note that we must descale the results by a factor of 8 == 2**3, */
    /* and also undo the PASS1_BITS scaling. */
    
    wsptr = workspace;
    for (ctr = 0; ctr < DCTSIZE; ctr++) {
2008085c:	4a005026 	beq	r9,r8,200809a0 <idct+0x5a4>
         */
        
        tmp0 = (int32_t) wsptr[7];
        tmp1 = (int32_t) wsptr[5];
        tmp2 = (int32_t) wsptr[3];
        tmp3 = (int32_t) wsptr[1];
20080860:	d9c04717 	ldw	r7,284(sp)
         * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
         */
        
        tmp0 = (int32_t) wsptr[7];
        tmp1 = (int32_t) wsptr[5];
        tmp2 = (int32_t) wsptr[3];
20080864:	d9004817 	ldw	r4,288(sp)
        tmp3 = (int32_t) wsptr[1];
        
        z1 = tmp0 + tmp3;
        z2 = tmp1 + tmp2;
        z3 = tmp0 + tmp2;
        z4 = tmp1 + tmp3;
20080868:	aac00017 	ldw	r11,0(r21)
         */
        
        tmp0 = (int32_t) wsptr[7];
        tmp1 = (int32_t) wsptr[5];
        tmp2 = (int32_t) wsptr[3];
        tmp3 = (int32_t) wsptr[1];
2008086c:	3b000017 	ldw	r12,0(r7)
         * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
         */
        
        tmp0 = (int32_t) wsptr[7];
        tmp1 = (int32_t) wsptr[5];
        tmp2 = (int32_t) wsptr[3];
20080870:	21000017 	ldw	r4,0(r4)
        tmp3 = (int32_t) wsptr[1];
        
        z1 = tmp0 + tmp3;
        z2 = tmp1 + tmp2;
        z3 = tmp0 + tmp2;
20080874:	b2000017 	ldw	r8,0(r22)
        tmp0 = (int32_t) wsptr[7];
        tmp1 = (int32_t) wsptr[5];
        tmp2 = (int32_t) wsptr[3];
        tmp3 = (int32_t) wsptr[1];
        
        z1 = tmp0 + tmp3;
20080878:	b3c00017 	ldw	r15,0(r22)
         * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
         */
        
        tmp0 = (int32_t) wsptr[7];
        tmp1 = (int32_t) wsptr[5];
        tmp2 = (int32_t) wsptr[3];
2008087c:	d9004b15 	stw	r4,300(sp)
        tmp3 = (int32_t) wsptr[1];
        
        z1 = tmp0 + tmp3;
        z2 = tmp1 + tmp2;
        z3 = tmp0 + tmp2;
20080880:	413f883a 	add	ra,r8,r4
        z4 = tmp1 + tmp3;
20080884:	5b11883a 	add	r8,r11,r12
        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
20080888:	fa0b883a 	add	r5,ra,r8
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
        
        tmp0 = ((int32_t) wsptr[0] + (int32_t) wsptr[4]) << CONST_BITS;
2008088c:	30c00017 	ldw	r3,0(r6)
20080890:	b9000017 	ldw	r4,0(r23)
        tmp1 = (int32_t) wsptr[5];
        tmp2 = (int32_t) wsptr[3];
        tmp3 = (int32_t) wsptr[1];
        
        z1 = tmp0 + tmp3;
        z2 = tmp1 + tmp2;
20080894:	d9c04b17 	ldw	r7,300(sp)
        tmp0 = (int32_t) wsptr[7];
        tmp1 = (int32_t) wsptr[5];
        tmp2 = (int32_t) wsptr[3];
        tmp3 = (int32_t) wsptr[1];
        
        z1 = tmp0 + tmp3;
20080898:	7b1d883a 	add	r14,r15,r12
        z2 = tmp1 + tmp2;
        z3 = tmp0 + tmp2;
        z4 = tmp1 + tmp3;
        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
2008089c:	29496864 	muli	r5,r5,9633
        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
        tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
        z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
        z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
        z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
200808a0:	423ce124 	muli	r8,r8,-3196
        
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
        tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
        z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
200808a4:	73b8cce4 	muli	r14,r14,-7373
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
        
        tmp0 = ((int32_t) wsptr[0] + (int32_t) wsptr[4]) << CONST_BITS;
200808a8:	1905883a 	add	r2,r3,r4
        tmp1 = (int32_t) wsptr[5];
        tmp2 = (int32_t) wsptr[3];
        tmp3 = (int32_t) wsptr[1];
        
        z1 = tmp0 + tmp3;
        z2 = tmp1 + tmp2;
200808ac:	59e3883a 	add	r17,r11,r7
        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
        
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
        tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
200808b0:	60cc02e4 	muli	r3,r12,12299
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
        
        tmp0 = ((int32_t) wsptr[0] + (int32_t) wsptr[4]) << CONST_BITS;
        tmp1 = ((int32_t) wsptr[0] - (int32_t) wsptr[4]) << CONST_BITS;
200808b4:	32c00017 	ldw	r11,0(r6)
200808b8:	bbc00017 	ldw	r15,0(r23)
        z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
        z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
        
        z3 += z5;
        z4 += z5;
200808bc:	4151883a 	add	r8,r8,r5
        outptr = block[ctr];
        
        /* Even part: reverse the even part of the forward DCT. */
        /* The rotator is sqrt(2)*c(-6). */
        
        z2 = (int32_t) wsptr[2];
200808c0:	53400017 	ldw	r13,0(r10)
        z3 = (int32_t) wsptr[6];
200808c4:	e4000017 	ldw	r16,0(fp)
        z4 += z5;
        
        tmp0 += z1 + z3;
        tmp1 += z2 + z4;
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
200808c8:	7219883a 	add	r12,r14,r8
200808cc:	60d9883a 	add	r12,r12,r3
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
        
        tmp0 = ((int32_t) wsptr[0] + (int32_t) wsptr[4]) << CONST_BITS;
        tmp1 = ((int32_t) wsptr[0] - (int32_t) wsptr[4]) << CONST_BITS;
200808d0:	5bc7c83a 	sub	r3,r11,r15
        z2 = tmp1 + tmp2;
        z3 = tmp0 + tmp2;
        z4 = tmp1 + tmp3;
        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
        
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
200808d4:	b2c00017 	ldw	r11,0(r22)
        /* The rotator is sqrt(2)*c(-6). */
        
        z2 = (int32_t) wsptr[2];
        z3 = (int32_t) wsptr[6];
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
200808d8:	6c25883a 	add	r18,r13,r16
200808dc:	94845464 	muli	r18,r18,4433
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
200808e0:	6b461fa4 	muli	r13,r13,6270
        z3 = tmp0 + tmp2;
        z4 = tmp1 + tmp3;
        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
        
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
200808e4:	abc00017 	ldw	r15,0(r21)
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
        
        tmp0 = ((int32_t) wsptr[0] + (int32_t) wsptr[4]) << CONST_BITS;
200808e8:	1004937a 	slli	r2,r2,13
        z2 = tmp1 + tmp2;
        z3 = tmp0 + tmp2;
        z4 = tmp1 + tmp3;
        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
        
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
200808ec:	5ac263a4 	muli	r11,r11,2446
        z2 = (int32_t) wsptr[2];
        z3 = (int32_t) wsptr[6];
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
200808f0:	6c9b883a 	add	r13,r13,r18
        z3 = tmp0 + tmp2;
        z4 = tmp1 + tmp3;
        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
        
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
200808f4:	7bd06ce4 	muli	r15,r15,16819
        
        z2 = (int32_t) wsptr[2];
        z3 = (int32_t) wsptr[6];
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
200808f8:	843137e4 	muli	r16,r16,-15137
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
        
        tmp0 = ((int32_t) wsptr[0] + (int32_t) wsptr[4]) << CONST_BITS;
        tmp1 = ((int32_t) wsptr[0] - (int32_t) wsptr[4]) << CONST_BITS;
        
        tmp10 = tmp0 + tmp3;
200808fc:	1349883a 	add	r4,r2,r13
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
        
        tmp0 = ((int32_t) wsptr[0] + (int32_t) wsptr[4]) << CONST_BITS;
        tmp1 = ((int32_t) wsptr[0] - (int32_t) wsptr[4]) << CONST_BITS;
20080900:	1806937a 	slli	r3,r3,13
        z2 = tmp1 + tmp2;
        z3 = tmp0 + tmp2;
        z4 = tmp1 + tmp3;
        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
        
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
20080904:	dac04015 	stw	r11,256(sp)
        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
20080908:	dac04b17 	ldw	r11,300(sp)
        tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
        z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
        z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
        z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
2008090c:	fff04ee4 	muli	ra,ra,-16069
        tmp1 += z2 + z4;
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
20080910:	230f883a 	add	r7,r4,r12
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
        tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
        z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
        z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
20080914:	8c6b7f64 	muli	r17,r17,-20995
        z3 = tmp0 + tmp2;
        z4 = tmp1 + tmp3;
        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
        
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
20080918:	dbc04c15 	stw	r15,304(sp)
        
        z2 = (int32_t) wsptr[2];
        z3 = (int32_t) wsptr[6];
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
2008091c:	84a1883a 	add	r16,r16,r18
        tmp1 += z2 + z4;
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
20080920:	3ccf883a 	add	r7,r7,r19
        z4 = tmp1 + tmp3;
        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
        
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
20080924:	5bd89524 	muli	r15,r11,25172
        
        tmp0 = ((int32_t) wsptr[0] + (int32_t) wsptr[4]) << CONST_BITS;
        tmp1 = ((int32_t) wsptr[0] - (int32_t) wsptr[4]) << CONST_BITS;
        
        tmp10 = tmp0 + tmp3;
        tmp13 = tmp0 - tmp3;
20080928:	1345c83a 	sub	r2,r2,r13
        
        z3 += z5;
        z4 += z5;
        
        tmp0 += z1 + z3;
        tmp1 += z2 + z4;
2008092c:	dac04c17 	ldw	r11,304(sp)
        tmp0 = ((int32_t) wsptr[0] + (int32_t) wsptr[4]) << CONST_BITS;
        tmp1 = ((int32_t) wsptr[0] - (int32_t) wsptr[4]) << CONST_BITS;
        
        tmp10 = tmp0 + tmp3;
        tmp13 = tmp0 - tmp3;
        tmp11 = tmp1 + tmp2;
20080930:	1c1b883a 	add	r13,r3,r16
        tmp1 += z2 + z4;
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
20080934:	380fd4ba 	srai	r7,r7,18
        tmp1 = ((int32_t) wsptr[0] - (int32_t) wsptr[4]) << CONST_BITS;
        
        tmp10 = tmp0 + tmp3;
        tmp13 = tmp0 - tmp3;
        tmp11 = tmp1 + tmp2;
        tmp12 = tmp1 - tmp2;
20080938:	1c21c83a 	sub	r16,r3,r16
        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
        
        z3 += z5;
        z4 += z5;
        
        tmp0 += z1 + z3;
2008093c:	d8c04017 	ldw	r3,256(sp)
        z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
        z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
        z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
        
        z3 += z5;
20080940:	f94b883a 	add	r5,ra,r5
        z4 += z5;
        
        tmp0 += z1 + z3;
20080944:	715d883a 	add	r14,r14,r5
        tmp1 += z2 + z4;
20080948:	8a11883a 	add	r8,r17,r8
        tmp2 += z2 + z3;
2008094c:	894b883a 	add	r5,r17,r5
        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
        
        z3 += z5;
        z4 += z5;
        
        tmp0 += z1 + z3;
20080950:	70dd883a 	add	r14,r14,r3
        tmp1 += z2 + z4;
20080954:	42d1883a 	add	r8,r8,r11
        tmp2 += z2 + z3;
20080958:	2bcb883a 	add	r5,r5,r15
2008095c:	383f610e 	bge	r7,zero,200806e4 <__flash_rwdata_start+0xfffe409c>
20080960:	000f883a 	mov	r7,zero
20080964:	003f6106 	br	200806ec <__flash_rwdata_start+0xfffe40a4>
20080968:	0005883a 	mov	r2,zero
2008096c:	003f9606 	br	200807c8 <__flash_rwdata_start+0xfffe4180>
20080970:	0007883a 	mov	r3,zero
20080974:	003f8c06 	br	200807a8 <__flash_rwdata_start+0xfffe4160>
20080978:	0021883a 	mov	r16,zero
2008097c:	003f8206 	br	20080788 <__flash_rwdata_start+0xfffe4140>
20080980:	0007883a 	mov	r3,zero
20080984:	003f7806 	br	20080768 <__flash_rwdata_start+0xfffe4120>
20080988:	000b883a 	mov	r5,zero
2008098c:	003f6e06 	br	20080748 <__flash_rwdata_start+0xfffe4100>
20080990:	0009883a 	mov	r4,zero
20080994:	003f5d06 	br	2008070c <__flash_rwdata_start+0xfffe40c4>
20080998:	0007883a 	mov	r3,zero
2008099c:	003f6206 	br	20080728 <__flash_rwdata_start+0xfffe40e0>
        outptr[3] = NORMALIZE(DESCALE(tmp13 + tmp0,CONST_BITS+PASS1_BITS+3));
        outptr[4] = NORMALIZE(DESCALE(tmp13 - tmp0,CONST_BITS+PASS1_BITS+3));
        
        wsptr += DCTSIZE;		/* advance pointer to next row */
    }
}
200809a0:	dfc05617 	ldw	ra,344(sp)
200809a4:	df005517 	ldw	fp,340(sp)
200809a8:	ddc05417 	ldw	r23,336(sp)
200809ac:	dd805317 	ldw	r22,332(sp)
200809b0:	dd405217 	ldw	r21,328(sp)
200809b4:	dd005117 	ldw	r20,324(sp)
200809b8:	dcc05017 	ldw	r19,320(sp)
200809bc:	dc804f17 	ldw	r18,316(sp)
200809c0:	dc404e17 	ldw	r17,312(sp)
200809c4:	dc004d17 	ldw	r16,308(sp)
200809c8:	dec05704 	addi	sp,sp,348
200809cc:	f800283a 	ret

200809d0 <lossless_decode>:
 To perform the update, the bitstream pointer is incremented every
 time bits from a new byte in the bistream are shifted in.

******************************** */
void lossless_decode(int num_blocks, void* bitstream, dct_block_t* DCACq, dct_block_t quant, bool P)
{
200809d0:	defff604 	addi	sp,sp,-40
200809d4:	dd000515 	stw	r20,20(sp)
200809d8:	dcc00415 	stw	r19,16(sp)
200809dc:	dc800315 	stw	r18,12(sp)
200809e0:	dc400215 	stw	r17,8(sp)
200809e4:	dfc00915 	stw	ra,36(sp)
200809e8:	ddc00815 	stw	r23,32(sp)
200809ec:	dd800715 	stw	r22,28(sp)
200809f0:	dd400615 	stw	r21,24(sp)
200809f4:	dc000115 	stw	r16,4(sp)
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if (*pbitcount >= 8) { //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 8);
200809f8:	2a000003 	ldbu	r8,0(r5)
        *pbitstream = ((uint8_t*) *pbitstream) + 1;
        if (*pbitcount >= 16) { //at least 2 bytes
            *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 16);
200809fc:	28c00043 	ldbu	r3,1(r5)
            *pbitstream = ((uint8_t*) *pbitstream) + 1;
            if (*pbitcount >= 24) { //at least 3 bytes
                *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 24);
20080a00:	28800083 	ldbu	r2,2(r5)
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if (*pbitcount >= 8) { //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 8);
20080a04:	4010963a 	slli	r8,r8,24
        *pbitstream = ((uint8_t*) *pbitstream) + 1;
        if (*pbitcount >= 16) { //at least 2 bytes
            *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 16);
20080a08:	1806943a 	slli	r3,r3,16
            *pbitstream = ((uint8_t*) *pbitstream) + 1;
            if (*pbitcount >= 24) { //at least 3 bytes
                *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*) *pbitstream) + 1;
                if (*pbitcount == 32) { //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*) (*pbitstream));
20080a0c:	2c0000c3 	ldbu	r16,3(r5)
        *pbitstream = ((uint8_t*) *pbitstream) + 1;
        if (*pbitcount >= 16) { //at least 2 bytes
            *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*) *pbitstream) + 1;
            if (*pbitcount >= 24) { //at least 3 bytes
                *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 24);
20080a10:	1004923a 	slli	r2,r2,8
 To perform the update, the bitstream pointer is incremented every
 time bits from a new byte in the bistream are shifted in.

******************************** */
void lossless_decode(int num_blocks, void* bitstream, dct_block_t* DCACq, dct_block_t quant, bool P)
{
20080a14:	dc800a17 	ldw	r18,40(sp)
    *pbitcount += size;
    if (*pbitcount >= 8) { //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*) *pbitstream) + 1;
        if (*pbitcount >= 16) { //at least 2 bytes
            *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 16);
20080a18:	40c6b03a 	or	r3,r8,r3
20080a1c:	1c06b03a 	or	r3,r3,r16
 To perform the update, the bitstream pointer is incremented every
 time bits from a new byte in the bistream are shifted in.

******************************** */
void lossless_decode(int num_blocks, void* bitstream, dct_block_t* DCACq, dct_block_t quant, bool P)
{
20080a20:	2027883a 	mov	r19,r4
20080a24:	3029883a 	mov	r20,r6
            *pbitstream = ((uint8_t*) *pbitstream) + 1;
            if (*pbitcount >= 24) { //at least 3 bytes
                *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*) *pbitstream) + 1;
                if (*pbitcount == 32) { //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*) (*pbitstream));
20080a28:	18a0b03a 	or	r16,r3,r2
                    *pbitstream = ((uint8_t*) *pbitstream) + 1;
20080a2c:	2c400104 	addi	r17,r5,4

    huff_input_t ib;
    //Used for I frame DC differential encoding
    DCTELEM cur = 0;

    if(P == 0)
20080a30:	90009d26 	beq	r18,zero,20080ca8 <lossless_decode+0x2d8>
        memset(DCACq, 0, num_blocks*64*sizeof(DCTELEM));

    for(int count = 0; count < num_blocks; count ++){
20080a34:	04c07e0e 	bge	zero,r19,20080c30 <lossless_decode+0x260>
20080a38:	982691fa 	slli	r19,r19,7
#ifndef NULL_QUANT
                if(P){ //differential decoding based on previous frame
                    pe[zigzag_table[index]] += ib.e * (((DCTELEM*)quant)[zigzag_table[index]]);
                }
                else{ //no differential decoding
                    pe[zigzag_table[index]] = ib.e * (((DCTELEM*)quant)[zigzag_table[index]]);
20080a3c:	03400034 	movhi	r13,0
20080a40:	a00d883a 	mov	r6,r20
20080a44:	a4e7883a 	add	r19,r20,r19
20080a48:	6b428e04 	addi	r13,r13,2616
    DCTELEM cur = 0;

    if(P == 0)
        memset(DCACq, 0, num_blocks*64*sizeof(DCTELEM));

    for(int count = 0; count < num_blocks; count ++){
20080a4c:	0009883a 	mov	r4,zero
20080a50:	002b883a 	mov	r21,zero
        ib.e = 0;
        ib.bits = 4;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
20080a54:	02c00804 	movi	r11,32
20080a58:	03ffffc4 	movi	r15,-1
        uint8_t size) {
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if (*pbitcount >= 8) { //we need to shift in at least 1 byte
20080a5c:	050001c4 	movi	r20,7
        *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*) *pbitstream) + 1;
        if (*pbitcount >= 16) { //at least 2 bytes
20080a60:	028003c4 	movi	r10,15
            *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*) *pbitstream) + 1;
            if (*pbitcount >= 24) { //at least 3 bytes
20080a64:	038005c4 	movi	r14,23
                    pe[zigzag_table[index]] = ib.e * (((DCTELEM*)quant)[zigzag_table[index]]);
                }
#else
                pe[zigzag_table[index]] = ib.e;
#endif
                if(index >= 63) break;
20080a68:	03000f84 	movi	r12,62

//DC decode function
huff_input_t input_DC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size = INPUT_BITS(bitbuffer, 4);
20080a6c:	8006d73a 	srli	r3,r16,28
    if(size == 0){
20080a70:	18008226 	beq	r3,zero,20080c7c <lossless_decode+0x2ac>
        ib.e = 0;
        ib.bits = 4;
    }
    else{
        bitbuffer <<= 4;
20080a74:	8004913a 	slli	r2,r16,4
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
20080a78:	58d3c83a 	sub	r9,r11,r3
20080a7c:	1a3fffc4 	addi	r8,r3,-1
20080a80:	100b883a 	mov	r5,r2
20080a84:	2a44d83a 	srl	r2,r5,r9
20080a88:	120ad83a 	srl	r5,r2,r8
20080a8c:	2800031e 	bne	r5,zero,20080a9c <lossless_decode+0xcc>
20080a90:	78ca983a 	sll	r5,r15,r3
20080a94:	29400044 	addi	r5,r5,1
20080a98:	2885883a 	add	r2,r5,r2
20080a9c:	18c00104 	addi	r3,r3,4
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount,
        uint8_t size) {
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
20080aa0:	20c9883a 	add	r4,r4,r3

//update buffer
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount,
        uint8_t size) {
    //remove decoded bits
    (*pbitbuffer) <<= size;
20080aa4:	80e0983a 	sll	r16,r16,r3
    //total number of bits to be shifted in
    *pbitcount += size;
    if (*pbitcount >= 8) { //we need to shift in at least 1 byte
20080aa8:	a100100e 	bge	r20,r4,20080aec <lossless_decode+0x11c>
        *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 8);
20080aac:	88c00003 	ldbu	r3,0(r17)
20080ab0:	217ffe04 	addi	r5,r4,-8
20080ab4:	1946983a 	sll	r3,r3,r5
20080ab8:	80e0b03a 	or	r16,r16,r3
        *pbitstream = ((uint8_t*) *pbitstream) + 1;
        if (*pbitcount >= 16) { //at least 2 bytes
20080abc:	5100720e 	bge	r10,r4,20080c88 <lossless_decode+0x2b8>
            *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 16);
20080ac0:	88c00043 	ldbu	r3,1(r17)
20080ac4:	217ffc04 	addi	r5,r4,-16
20080ac8:	1946983a 	sll	r3,r3,r5
20080acc:	80e0b03a 	or	r16,r16,r3
            *pbitstream = ((uint8_t*) *pbitstream) + 1;
            if (*pbitcount >= 24) { //at least 3 bytes
20080ad0:	71006f0e 	bge	r14,r4,20080c90 <lossless_decode+0x2c0>
                *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 24);
20080ad4:	88c00083 	ldbu	r3,2(r17)
20080ad8:	217ffa04 	addi	r5,r4,-24
20080adc:	1946983a 	sll	r3,r3,r5
20080ae0:	80e0b03a 	or	r16,r16,r3
                *pbitstream = ((uint8_t*) *pbitstream) + 1;
                if (*pbitcount == 32) { //all 4 bytes shifted in
20080ae4:	22c06c26 	beq	r4,r11,20080c98 <lossless_decode+0x2c8>
        if (*pbitcount >= 16) { //at least 2 bytes
            *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*) *pbitstream) + 1;
            if (*pbitcount >= 24) { //at least 3 bytes
                *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*) *pbitstream) + 1;
20080ae8:	8c4000c4 	addi	r17,r17,3
                    *pbitstream = ((uint8_t*) *pbitstream) + 1;
                }
            }
        }
    }
    *pbitcount &= 7; //the resulting *pbitcount should be between 0 and 7
20080aec:	210001cc 	andi	r4,r4,7

        //decode DC coefficients
        ib = input_DC(bitbuffer);
        update_buffer(&bitbuffer, &bitstream, &bitcount, ib.bits);
#ifndef NULL_QUANT
        if(P){ //differential decoding based on previous frame
20080af0:	90005c26 	beq	r18,zero,20080c64 <lossless_decode+0x294>
            pe[0] += (ib.e * (((DCTELEM*)quant)[0]) );
20080af4:	3940000b 	ldhu	r5,0(r7)
20080af8:	30c0000b 	ldhu	r3,0(r6)
20080afc:	1145383a 	mul	r2,r2,r5
20080b00:	10c5883a 	add	r2,r2,r3
20080b04:	3080000d 	sth	r2,0(r6)
        }
#else   //null dequantization, no differential
        pe[0] = ib.e;
#endif

        uint8_t index = 1; //zig-zag order index for AC values in the 8x8 matrix, [0, 63]
20080b08:	02000044 	movi	r8,1
huff_input_t input_AC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
    bitbuffer <<= 4;
20080b0c:	8004913a 	slli	r2,r16,4
//AC decode function
huff_input_t input_AC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
20080b10:	8012d73a 	srli	r9,r16,28
    bitbuffer <<= 4;
    size  = INPUT_BITS(bitbuffer, 4);
20080b14:	1004d73a 	srli	r2,r2,28
    if(size == 0) {
20080b18:	10002726 	beq	r2,zero,20080bb8 <lossless_decode+0x1e8>
        //and if size > 0, the amplitude cannot be 0.
        ib.e = 0;
        ib.bits = 8;
    }
    else{
        bitbuffer <<= 4;
20080b1c:	8006923a 	slli	r3,r16,8
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
20080b20:	58afc83a 	sub	r23,r11,r2
20080b24:	15bfffc4 	addi	r22,r2,-1
20080b28:	180b883a 	mov	r5,r3
20080b2c:	2dc6d83a 	srl	r3,r5,r23
20080b30:	1d8ad83a 	srl	r5,r3,r22
20080b34:	2800031e 	bne	r5,zero,20080b44 <lossless_decode+0x174>
20080b38:	788a983a 	sll	r5,r15,r2
20080b3c:	29400044 	addi	r5,r5,1
20080b40:	28c7883a 	add	r3,r5,r3
20080b44:	10800204 	addi	r2,r2,8
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if (*pbitcount >= 8) { //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 8);
20080b48:	89400003 	ldbu	r5,0(r17)
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount,
        uint8_t size) {
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
20080b4c:	2089883a 	add	r4,r4,r2
    if (*pbitcount >= 8) { //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 8);
20080b50:	25bffe04 	addi	r22,r4,-8

//update buffer
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount,
        uint8_t size) {
    //remove decoded bits
    (*pbitbuffer) <<= size;
20080b54:	8084983a 	sll	r2,r16,r2
    //total number of bits to be shifted in
    *pbitcount += size;
    if (*pbitcount >= 8) { //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 8);
20080b58:	2da0983a 	sll	r16,r5,r22
20080b5c:	80a0b03a 	or	r16,r16,r2
        *pbitstream = ((uint8_t*) *pbitstream) + 1;
        if (*pbitcount >= 16) { //at least 2 bytes
20080b60:	51002a0e 	bge	r10,r4,20080c0c <lossless_decode+0x23c>
            *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 16);
20080b64:	88800043 	ldbu	r2,1(r17)
20080b68:	217ffc04 	addi	r5,r4,-16
20080b6c:	1144983a 	sll	r2,r2,r5
20080b70:	80a0b03a 	or	r16,r16,r2
            *pbitstream = ((uint8_t*) *pbitstream) + 1;
            if (*pbitcount >= 24) { //at least 3 bytes
20080b74:	7100390e 	bge	r14,r4,20080c5c <lossless_decode+0x28c>
                *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 24);
20080b78:	89400083 	ldbu	r5,2(r17)
20080b7c:	20bffa04 	addi	r2,r4,-24
                *pbitstream = ((uint8_t*) *pbitstream) + 1;
20080b80:	8c4000c4 	addi	r17,r17,3
        *pbitstream = ((uint8_t*) *pbitstream) + 1;
        if (*pbitcount >= 16) { //at least 2 bytes
            *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*) *pbitstream) + 1;
            if (*pbitcount >= 24) { //at least 3 bytes
                *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 24);
20080b84:	2884983a 	sll	r2,r5,r2
20080b88:	80a0b03a 	or	r16,r16,r2
        uint8_t index = 1; //zig-zag order index for AC values in the 8x8 matrix, [0, 63]
        while(1){
            //decode AC coefficient
            ib = input_AC(bitbuffer);
            update_buffer(&bitbuffer, &bitstream, &bitcount, ib.bits);
            if(ib.e == 0){
20080b8c:	18bfffcc 	andi	r2,r3,65535
20080b90:	10a0001c 	xori	r2,r2,32768
20080b94:	10a00004 	addi	r2,r2,-32768
                    *pbitstream = ((uint8_t*) *pbitstream) + 1;
                }
            }
        }
    }
    *pbitcount &= 7; //the resulting *pbitcount should be between 0 and 7
20080b98:	210001cc 	andi	r4,r4,7
        uint8_t index = 1; //zig-zag order index for AC values in the 8x8 matrix, [0, 63]
        while(1){
            //decode AC coefficient
            ib = input_AC(bitbuffer);
            update_buffer(&bitbuffer, &bitstream, &bitcount, ib.bits);
            if(ib.e == 0){
20080b9c:	1000091e 	bne	r2,zero,20080bc4 <lossless_decode+0x1f4>
                if(ib.runlength == 15){
20080ba0:	4a80211e 	bne	r9,r10,20080c28 <lossless_decode+0x258>
huff_input_t input_AC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
    bitbuffer <<= 4;
20080ba4:	8004913a 	slli	r2,r16,4
            ib = input_AC(bitbuffer);
            update_buffer(&bitbuffer, &bitstream, &bitcount, ib.bits);
            if(ib.e == 0){
                if(ib.runlength == 15){
                    //EZL
                    index += 16;
20080ba8:	42000404 	addi	r8,r8,16
//AC decode function
huff_input_t input_AC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
20080bac:	8012d73a 	srli	r9,r16,28
    bitbuffer <<= 4;
    size  = INPUT_BITS(bitbuffer, 4);
20080bb0:	1004d73a 	srli	r2,r2,28
    if(size == 0) {
20080bb4:	103fd91e 	bne	r2,zero,20080b1c <__flash_rwdata_start+0xfffe44d4>
20080bb8:	00800204 	movi	r2,8
        //return a value of 0. Notice this is ok size if size == 0, then it's either a END or ZRL,
        //and if size > 0, the amplitude cannot be 0.
        ib.e = 0;
20080bbc:	0007883a 	mov	r3,zero
20080bc0:	003fe106 	br	20080b48 <__flash_rwdata_start+0xfffe4500>
                    break; //break from while and go to next block
                }
            }
            else{ //ib.e != 0

                index += ib.runlength;
20080bc4:	4a11883a 	add	r8,r9,r8
                //now add the actual value
#ifndef NULL_QUANT
                if(P){ //differential decoding based on previous frame
                    pe[zigzag_table[index]] += ib.e * (((DCTELEM*)quant)[zigzag_table[index]]);
20080bc8:	41403fcc 	andi	r5,r8,255
20080bcc:	2945883a 	add	r2,r5,r5
20080bd0:	1085883a 	add	r2,r2,r2
20080bd4:	6885883a 	add	r2,r13,r2
20080bd8:	10800017 	ldw	r2,0(r2)
20080bdc:	1085883a 	add	r2,r2,r2
20080be0:	3893883a 	add	r9,r7,r2
            else{ //ib.e != 0

                index += ib.runlength;
                //now add the actual value
#ifndef NULL_QUANT
                if(P){ //differential decoding based on previous frame
20080be4:	90000b26 	beq	r18,zero,20080c14 <lossless_decode+0x244>
                    pe[zigzag_table[index]] += ib.e * (((DCTELEM*)quant)[zigzag_table[index]]);
20080be8:	4d80000b 	ldhu	r22,0(r9)
20080bec:	3085883a 	add	r2,r6,r2
20080bf0:	1240000b 	ldhu	r9,0(r2)
20080bf4:	1d87383a 	mul	r3,r3,r22
20080bf8:	1a47883a 	add	r3,r3,r9
20080bfc:	10c0000d 	sth	r3,0(r2)
                    pe[zigzag_table[index]] = ib.e * (((DCTELEM*)quant)[zigzag_table[index]]);
                }
#else
                pe[zigzag_table[index]] = ib.e;
#endif
                if(index >= 63) break;
20080c00:	61400936 	bltu	r12,r5,20080c28 <lossless_decode+0x258>
                index++;
20080c04:	42000044 	addi	r8,r8,1
20080c08:	003fc006 	br	20080b0c <__flash_rwdata_start+0xfffe44c4>
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if (*pbitcount >= 8) { //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*) *pbitstream) + 1;
20080c0c:	8c400044 	addi	r17,r17,1
20080c10:	003fde06 	br	20080b8c <__flash_rwdata_start+0xfffe4544>
#ifndef NULL_QUANT
                if(P){ //differential decoding based on previous frame
                    pe[zigzag_table[index]] += ib.e * (((DCTELEM*)quant)[zigzag_table[index]]);
                }
                else{ //no differential decoding
                    pe[zigzag_table[index]] = ib.e * (((DCTELEM*)quant)[zigzag_table[index]]);
20080c14:	4a40000b 	ldhu	r9,0(r9)
20080c18:	3085883a 	add	r2,r6,r2
20080c1c:	1a47383a 	mul	r3,r3,r9
20080c20:	10c0000d 	sth	r3,0(r2)
                }
#else
                pe[zigzag_table[index]] = ib.e;
#endif
                if(index >= 63) break;
20080c24:	617ff72e 	bgeu	r12,r5,20080c04 <__flash_rwdata_start+0xfffe45bc>
20080c28:	31802004 	addi	r6,r6,128
    DCTELEM cur = 0;

    if(P == 0)
        memset(DCACq, 0, num_blocks*64*sizeof(DCTELEM));

    for(int count = 0; count < num_blocks; count ++){
20080c2c:	34ff8f1e 	bne	r6,r19,20080a6c <__flash_rwdata_start+0xfffe4424>
                if(index >= 63) break;
                index++;
            }
        }
    }
}
20080c30:	dfc00917 	ldw	ra,36(sp)
20080c34:	ddc00817 	ldw	r23,32(sp)
20080c38:	dd800717 	ldw	r22,28(sp)
20080c3c:	dd400617 	ldw	r21,24(sp)
20080c40:	dd000517 	ldw	r20,20(sp)
20080c44:	dcc00417 	ldw	r19,16(sp)
20080c48:	dc800317 	ldw	r18,12(sp)
20080c4c:	dc400217 	ldw	r17,8(sp)
20080c50:	dc000117 	ldw	r16,4(sp)
20080c54:	dec00a04 	addi	sp,sp,40
20080c58:	f800283a 	ret
    if (*pbitcount >= 8) { //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*) *pbitstream) + 1;
        if (*pbitcount >= 16) { //at least 2 bytes
            *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*) *pbitstream) + 1;
20080c5c:	8c400084 	addi	r17,r17,2
20080c60:	003fca06 	br	20080b8c <__flash_rwdata_start+0xfffe4544>
        if(P){ //differential decoding based on previous frame
            pe[0] += (ib.e * (((DCTELEM*)quant)[0]) );
        }
        else{ //differential decoding based on previous block
            cur += ib.e;
            pe[0] = cur * (((DCTELEM*)quant)[0]);
20080c64:	38c0000b 	ldhu	r3,0(r7)
#ifndef NULL_QUANT
        if(P){ //differential decoding based on previous frame
            pe[0] += (ib.e * (((DCTELEM*)quant)[0]) );
        }
        else{ //differential decoding based on previous block
            cur += ib.e;
20080c68:	1545883a 	add	r2,r2,r21
20080c6c:	102b883a 	mov	r21,r2
            pe[0] = cur * (((DCTELEM*)quant)[0]);
20080c70:	10c5383a 	mul	r2,r2,r3
20080c74:	3080000d 	sth	r2,0(r6)
20080c78:	003fa306 	br	20080b08 <__flash_rwdata_start+0xfffe44c0>
//DC decode function
huff_input_t input_DC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size = INPUT_BITS(bitbuffer, 4);
    if(size == 0){
20080c7c:	00c00104 	movi	r3,4
20080c80:	0005883a 	mov	r2,zero
20080c84:	003f8606 	br	20080aa0 <__flash_rwdata_start+0xfffe4458>
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if (*pbitcount >= 8) { //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*) *pbitstream) + 1;
20080c88:	8c400044 	addi	r17,r17,1
20080c8c:	003f9706 	br	20080aec <__flash_rwdata_start+0xfffe44a4>
        if (*pbitcount >= 16) { //at least 2 bytes
            *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*) *pbitstream) + 1;
20080c90:	8c400084 	addi	r17,r17,2
20080c94:	003f9506 	br	20080aec <__flash_rwdata_start+0xfffe44a4>
            if (*pbitcount >= 24) { //at least 3 bytes
                *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*) *pbitstream) + 1;
                if (*pbitcount == 32) { //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*) (*pbitstream));
20080c98:	88c000c3 	ldbu	r3,3(r17)
                    *pbitstream = ((uint8_t*) *pbitstream) + 1;
20080c9c:	8c400104 	addi	r17,r17,4
            *pbitstream = ((uint8_t*) *pbitstream) + 1;
            if (*pbitcount >= 24) { //at least 3 bytes
                *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*) *pbitstream) + 1;
                if (*pbitcount == 32) { //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*) (*pbitstream));
20080ca0:	80e0b03a 	or	r16,r16,r3
20080ca4:	003f9106 	br	20080aec <__flash_rwdata_start+0xfffe44a4>
    huff_input_t ib;
    //Used for I frame DC differential encoding
    DCTELEM cur = 0;

    if(P == 0)
        memset(DCACq, 0, num_blocks*64*sizeof(DCTELEM));
20080ca8:	200c91fa 	slli	r6,r4,7
20080cac:	000b883a 	mov	r5,zero
20080cb0:	a009883a 	mov	r4,r20
20080cb4:	d9c00015 	stw	r7,0(sp)
20080cb8:	008a3180 	call	2008a318 <memset>
20080cbc:	d9c00017 	ldw	r7,0(sp)
20080cc0:	003f5c06 	br	20080a34 <__flash_rwdata_start+0xfffe43ec>

20080cc4 <update_buffer>:

//update buffer
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount,
        uint8_t size) {
    //remove decoded bits
    (*pbitbuffer) <<= size;
20080cc4:	20800017 	ldw	r2,0(r4)
20080cc8:	39c03fcc 	andi	r7,r7,255
    //total number of bits to be shifted in
    *pbitcount += size;
20080ccc:	30c00017 	ldw	r3,0(r6)

//update buffer
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount,
        uint8_t size) {
    //remove decoded bits
    (*pbitbuffer) <<= size;
20080cd0:	11c4983a 	sll	r2,r2,r7
    //total number of bits to be shifted in
    *pbitcount += size;
20080cd4:	38cf883a 	add	r7,r7,r3

//update buffer
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount,
        uint8_t size) {
    //remove decoded bits
    (*pbitbuffer) <<= size;
20080cd8:	20800015 	stw	r2,0(r4)
    //total number of bits to be shifted in
    *pbitcount += size;
20080cdc:	31c00015 	stw	r7,0(r6)
    if (*pbitcount >= 8) { //we need to shift in at least 1 byte
20080ce0:	00c001c4 	movi	r3,7
20080ce4:	19c01c0e 	bge	r3,r7,20080d58 <update_buffer+0x94>
        *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 8);
20080ce8:	28c00017 	ldw	r3,0(r5)
20080cec:	3a3ffe04 	addi	r8,r7,-8
20080cf0:	1a400003 	ldbu	r9,0(r3)
        *pbitstream = ((uint8_t*) *pbitstream) + 1;
20080cf4:	1a800044 	addi	r10,r3,1
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if (*pbitcount >= 8) { //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 8);
20080cf8:	4a10983a 	sll	r8,r9,r8
20080cfc:	4084b03a 	or	r2,r8,r2
20080d00:	20800015 	stw	r2,0(r4)
        *pbitstream = ((uint8_t*) *pbitstream) + 1;
20080d04:	2a800015 	stw	r10,0(r5)
        if (*pbitcount >= 16) { //at least 2 bytes
20080d08:	020003c4 	movi	r8,15
20080d0c:	41c0120e 	bge	r8,r7,20080d58 <update_buffer+0x94>
            *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 16);
20080d10:	1a400043 	ldbu	r9,1(r3)
20080d14:	3a3ffc04 	addi	r8,r7,-16
            *pbitstream = ((uint8_t*) *pbitstream) + 1;
20080d18:	1a800084 	addi	r10,r3,2
    *pbitcount += size;
    if (*pbitcount >= 8) { //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*) *pbitstream) + 1;
        if (*pbitcount >= 16) { //at least 2 bytes
            *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 16);
20080d1c:	4a10983a 	sll	r8,r9,r8
20080d20:	1204b03a 	or	r2,r2,r8
20080d24:	20800015 	stw	r2,0(r4)
            *pbitstream = ((uint8_t*) *pbitstream) + 1;
20080d28:	2a800015 	stw	r10,0(r5)
            if (*pbitcount >= 24) { //at least 3 bytes
20080d2c:	020005c4 	movi	r8,23
20080d30:	41c0090e 	bge	r8,r7,20080d58 <update_buffer+0x94>
                *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 24);
20080d34:	1a400083 	ldbu	r9,2(r3)
20080d38:	3a3ffa04 	addi	r8,r7,-24
                *pbitstream = ((uint8_t*) *pbitstream) + 1;
20080d3c:	1a8000c4 	addi	r10,r3,3
        *pbitstream = ((uint8_t*) *pbitstream) + 1;
        if (*pbitcount >= 16) { //at least 2 bytes
            *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*) *pbitstream) + 1;
            if (*pbitcount >= 24) { //at least 3 bytes
                *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 24);
20080d40:	4a10983a 	sll	r8,r9,r8
20080d44:	1204b03a 	or	r2,r2,r8
20080d48:	20800015 	stw	r2,0(r4)
                *pbitstream = ((uint8_t*) *pbitstream) + 1;
20080d4c:	2a800015 	stw	r10,0(r5)
                if (*pbitcount == 32) { //all 4 bytes shifted in
20080d50:	02000804 	movi	r8,32
20080d54:	3a000326 	beq	r7,r8,20080d64 <update_buffer+0xa0>
                    *pbitstream = ((uint8_t*) *pbitstream) + 1;
                }
            }
        }
    }
    *pbitcount &= 7; //the resulting *pbitcount should be between 0 and 7
20080d58:	39c001cc 	andi	r7,r7,7
20080d5c:	31c00015 	stw	r7,0(r6)
20080d60:	f800283a 	ret
            *pbitstream = ((uint8_t*) *pbitstream) + 1;
            if (*pbitcount >= 24) { //at least 3 bytes
                *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*) *pbitstream) + 1;
                if (*pbitcount == 32) { //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*) (*pbitstream));
20080d64:	1a0000c3 	ldbu	r8,3(r3)
                    *pbitstream = ((uint8_t*) *pbitstream) + 1;
20080d68:	18c00104 	addi	r3,r3,4
            *pbitstream = ((uint8_t*) *pbitstream) + 1;
            if (*pbitcount >= 24) { //at least 3 bytes
                *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*) *pbitstream) + 1;
                if (*pbitcount == 32) { //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*) (*pbitstream));
20080d6c:	1204b03a 	or	r2,r2,r8
20080d70:	20800015 	stw	r2,0(r4)
                    *pbitstream = ((uint8_t*) *pbitstream) + 1;
20080d74:	28c00015 	stw	r3,0(r5)
20080d78:	003ff706 	br	20080d58 <__flash_rwdata_start+0xfffe4710>

20080d7c <input_DC>:

//DC decode function
huff_input_t input_DC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size = INPUT_BITS(bitbuffer, 4);
20080d7c:	2006d73a 	srli	r3,r4,28
//extract num bits from the buffer and returns them
#define INPUT_BITS(buffer, num) (buffer) >> (32 - (num))

//DC decode function
huff_input_t input_DC(uint32_t bitbuffer)
{
20080d80:	deffff04 	addi	sp,sp,-4
    huff_input_t ib;
    uint8_t size = INPUT_BITS(bitbuffer, 4);
    if(size == 0){
20080d84:	18001426 	beq	r3,zero,20080dd8 <input_DC+0x5c>
        ib.e = 0;
        ib.bits = 4;
    }
    else{
        bitbuffer <<= 4;
20080d88:	2008913a 	slli	r4,r4,4
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
20080d8c:	00800804 	movi	r2,32
20080d90:	10c5c83a 	sub	r2,r2,r3
20080d94:	2088d83a 	srl	r4,r4,r2
20080d98:	18bfffc4 	addi	r2,r3,-1
20080d9c:	2084d83a 	srl	r2,r4,r2
20080da0:	10000826 	beq	r2,zero,20080dc4 <input_DC+0x48>
        ib.bits = size + 4;
20080da4:	18c00104 	addi	r3,r3,4
    }
    return ib;
20080da8:	d8c00005 	stb	r3,0(sp)
20080dac:	d8000045 	stb	zero,1(sp)
20080db0:	d880000b 	ldhu	r2,0(sp)
20080db4:	2008943a 	slli	r4,r4,16
}
20080db8:	1104b03a 	or	r2,r2,r4
20080dbc:	dec00104 	addi	sp,sp,4
20080dc0:	f800283a 	ret
        ib.e = 0;
        ib.bits = 4;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
20080dc4:	00bfffc4 	movi	r2,-1
20080dc8:	10c4983a 	sll	r2,r2,r3
20080dcc:	10800044 	addi	r2,r2,1
20080dd0:	1109883a 	add	r4,r2,r4
20080dd4:	003ff306 	br	20080da4 <__flash_rwdata_start+0xfffe475c>
huff_input_t input_DC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size = INPUT_BITS(bitbuffer, 4);
    if(size == 0){
        ib.e = 0;
20080dd8:	0009883a 	mov	r4,zero
        ib.bits = 4;
20080ddc:	00c00104 	movi	r3,4
20080de0:	003ff106 	br	20080da8 <__flash_rwdata_start+0xfffe4760>

20080de4 <input_AC>:
huff_input_t input_AC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
    bitbuffer <<= 4;
20080de4:	2006913a 	slli	r3,r4,4
    return ib;
}

//AC decode function
huff_input_t input_AC(uint32_t bitbuffer)
{
20080de8:	deffff04 	addi	sp,sp,-4
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
20080dec:	200ad73a 	srli	r5,r4,28
    bitbuffer <<= 4;
    size  = INPUT_BITS(bitbuffer, 4);
20080df0:	1806d73a 	srli	r3,r3,28
    if(size == 0) {
20080df4:	18001426 	beq	r3,zero,20080e48 <input_AC+0x64>
        //and if size > 0, the amplitude cannot be 0.
        ib.e = 0;
        ib.bits = 8;
    }
    else{
        bitbuffer <<= 4;
20080df8:	2008923a 	slli	r4,r4,8
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
20080dfc:	00800804 	movi	r2,32
20080e00:	10c5c83a 	sub	r2,r2,r3
20080e04:	2088d83a 	srl	r4,r4,r2
20080e08:	18bfffc4 	addi	r2,r3,-1
20080e0c:	2084d83a 	srl	r2,r4,r2
20080e10:	10000826 	beq	r2,zero,20080e34 <input_AC+0x50>
        ib.bits = size + 8;
20080e14:	18c00204 	addi	r3,r3,8
    }
    return ib;
20080e18:	d8c00005 	stb	r3,0(sp)
20080e1c:	d9400045 	stb	r5,1(sp)
20080e20:	d880000b 	ldhu	r2,0(sp)
20080e24:	2008943a 	slli	r4,r4,16
}
20080e28:	1104b03a 	or	r2,r2,r4
20080e2c:	dec00104 	addi	sp,sp,4
20080e30:	f800283a 	ret
        ib.e = 0;
        ib.bits = 8;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
20080e34:	00bfffc4 	movi	r2,-1
20080e38:	10c4983a 	sll	r2,r2,r3
20080e3c:	10800044 	addi	r2,r2,1
20080e40:	1109883a 	add	r4,r2,r4
20080e44:	003ff306 	br	20080e14 <__flash_rwdata_start+0xfffe47cc>
    bitbuffer <<= 4;
    size  = INPUT_BITS(bitbuffer, 4);
    if(size == 0) {
        //return a value of 0. Notice this is ok size if size == 0, then it's either a END or ZRL,
        //and if size > 0, the amplitude cannot be 0.
        ib.e = 0;
20080e48:	0009883a 	mov	r4,zero
        ib.bits = 8;
20080e4c:	00c00204 	movi	r3,8
20080e50:	003ff106 	br	20080e18 <__flash_rwdata_start+0xfffe47d0>

20080e54 <mjpeg423_decode>:
bool init = FALSE;
ece423_video_display *disp = (void *)0;

//main decoder function
void mjpeg423_decode(const char* filename_in, FAT_HANDLE sd_fat_handle)
{
20080e54:	2005883a 	mov	r2,r4
20080e58:	deffd704 	addi	sp,sp,-164
    uint32_t file_header[5], frame_header[4];

    //file streams(changed to fat handle)
    FAT_FILE_HANDLE file_in;

    if((file_in = Fat_FileOpen(sd_fat_handle, filename_in)) == NULL) error_and_exit("cannot open input file");
20080e5c:	2809883a 	mov	r4,r5
20080e60:	100b883a 	mov	r5,r2
bool init = FALSE;
ece423_video_display *disp = (void *)0;

//main decoder function
void mjpeg423_decode(const char* filename_in, FAT_HANDLE sd_fat_handle)
{
20080e64:	dfc02815 	stw	ra,160(sp)
20080e68:	df002715 	stw	fp,156(sp)
20080e6c:	ddc02615 	stw	r23,152(sp)
20080e70:	dd802515 	stw	r22,148(sp)
20080e74:	dd402415 	stw	r21,144(sp)
20080e78:	dd002315 	stw	r20,140(sp)
20080e7c:	dcc02215 	stw	r19,136(sp)
20080e80:	dc802115 	stw	r18,132(sp)
20080e84:	dc402015 	stw	r17,128(sp)
20080e88:	dc001f15 	stw	r16,124(sp)
    uint32_t file_header[5], frame_header[4];

    //file streams(changed to fat handle)
    FAT_FILE_HANDLE file_in;

    if((file_in = Fat_FileOpen(sd_fat_handle, filename_in)) == NULL) error_and_exit("cannot open input file");
20080e8c:	008239c0 	call	2008239c <Fat_FileOpen>
20080e90:	d8801315 	stw	r2,76(sp)
20080e94:	10023d26 	beq	r2,zero,2008178c <mjpeg423_decode+0x938>
    // char* filename_out = malloc(strlen(filenamebase_out)+1);
    // strcpy(filename_out, filenamebase_out);

    //read header
    if(!Fat_FileRead(file_in, file_header, 5*sizeof(uint32_t))) error_and_exit("cannot read input file");
20080e98:	d9001317 	ldw	r4,76(sp)
20080e9c:	d9400304 	addi	r5,sp,12
20080ea0:	01800504 	movi	r6,20
20080ea4:	008250c0 	call	2008250c <Fat_FileRead>
20080ea8:	10021026 	beq	r2,zero,200816ec <mjpeg423_decode+0x898>
    num_frames      = file_header[0];
20080eac:	d8c00317 	ldw	r3,12(sp)
    w_size          = file_header[1];
    h_size          = file_header[2];
20080eb0:	dc400517 	ldw	r17,20(sp)
    num_iframes     = file_header[3];
    payload_size    = file_header[4];

    DEBUG_PRINT_ARG("Decoder start. Num frames #%u\n", num_frames)
20080eb4:	01000034 	movhi	r4,0
20080eb8:	180b883a 	mov	r5,r3
20080ebc:	21001204 	addi	r4,r4,72
    // strcpy(filename_out, filenamebase_out);

    //read header
    if(!Fat_FileRead(file_in, file_header, 5*sizeof(uint32_t))) error_and_exit("cannot read input file");
    num_frames      = file_header[0];
    w_size          = file_header[1];
20080ec0:	dc800417 	ldw	r18,16(sp)
    // char* filename_out = malloc(strlen(filenamebase_out)+1);
    // strcpy(filename_out, filenamebase_out);

    //read header
    if(!Fat_FileRead(file_in, file_header, 5*sizeof(uint32_t))) error_and_exit("cannot read input file");
    num_frames      = file_header[0];
20080ec4:	d8c01a15 	stw	r3,104(sp)
    w_size          = file_header[1];
    h_size          = file_header[2];
    num_iframes     = file_header[3];
20080ec8:	dd400617 	ldw	r21,24(sp)
    payload_size    = file_header[4];
20080ecc:	dd000717 	ldw	r20,28(sp)

    DEBUG_PRINT_ARG("Decoder start. Num frames #%u\n", num_frames)
20080ed0:	008a4680 	call	2008a468 <printf>
    DEBUG_PRINT_ARG("Width %u\n", w_size)
    DEBUG_PRINT_ARG("Height %u\n", h_size)
    DEBUG_PRINT_ARG("Num i frames %u\n", num_iframes)

    int hCb_size = h_size/8;           //number of chrominance blocks
20080ed4:	8806d0fa 	srli	r3,r17,3
    h_size          = file_header[2];
    num_iframes     = file_header[3];
    payload_size    = file_header[4];

    DEBUG_PRINT_ARG("Decoder start. Num frames #%u\n", num_frames)
    DEBUG_PRINT_ARG("Width %u\n", w_size)
20080ed8:	01000034 	movhi	r4,0
20080edc:	21001a04 	addi	r4,r4,104
20080ee0:	900b883a 	mov	r5,r18
    DEBUG_PRINT_ARG("Height %u\n", h_size)
    DEBUG_PRINT_ARG("Num i frames %u\n", num_iframes)

    int hCb_size = h_size/8;           //number of chrominance blocks
20080ee4:	d8c00d15 	stw	r3,52(sp)
    h_size          = file_header[2];
    num_iframes     = file_header[3];
    payload_size    = file_header[4];

    DEBUG_PRINT_ARG("Decoder start. Num frames #%u\n", num_frames)
    DEBUG_PRINT_ARG("Width %u\n", w_size)
20080ee8:	008a4680 	call	2008a468 <printf>
    DEBUG_PRINT_ARG("Height %u\n", h_size)
20080eec:	01000034 	movhi	r4,0
20080ef0:	21001d04 	addi	r4,r4,116
20080ef4:	880b883a 	mov	r5,r17
20080ef8:	008a4680 	call	2008a468 <printf>
    DEBUG_PRINT_ARG("Num i frames %u\n", num_iframes)
20080efc:	01000034 	movhi	r4,0
20080f00:	a80b883a 	mov	r5,r21
20080f04:	21002004 	addi	r4,r4,128
20080f08:	008a4680 	call	2008a468 <printf>
    int wCb_size = w_size/8;
    int hYb_size = h_size/8;           //number of luminance blocks. Same as chrominance in the sample app
    int wYb_size = w_size/8;

    //trailer structure
    iframe_trailer_t* trailer = malloc(sizeof(iframe_trailer_t)*num_frames);
20080f0c:	d8c01a17 	ldw	r3,104(sp)
    DEBUG_PRINT_ARG("Width %u\n", w_size)
    DEBUG_PRINT_ARG("Height %u\n", h_size)
    DEBUG_PRINT_ARG("Num i frames %u\n", num_iframes)

    int hCb_size = h_size/8;           //number of chrominance blocks
    int wCb_size = w_size/8;
20080f10:	9020d0fa 	srli	r16,r18,3
    int hYb_size = h_size/8;           //number of luminance blocks. Same as chrominance in the sample app
    int wYb_size = w_size/8;

    //trailer structure
    iframe_trailer_t* trailer = malloc(sizeof(iframe_trailer_t)*num_frames);
20080f14:	180890fa 	slli	r4,r3,3
20080f18:	00899940 	call	20089994 <malloc>

    //main data structures. See lab manual for explanation
    rgb_pixel_t* rgbblock;
    if((rgbblock = malloc(w_size*h_size*sizeof(rgb_pixel_t)))==NULL) error_and_exit("cannot allocate rgbblock");
20080f1c:	9449383a 	mul	r4,r18,r17
    int wCb_size = w_size/8;
    int hYb_size = h_size/8;           //number of luminance blocks. Same as chrominance in the sample app
    int wYb_size = w_size/8;

    //trailer structure
    iframe_trailer_t* trailer = malloc(sizeof(iframe_trailer_t)*num_frames);
20080f20:	d8801615 	stw	r2,88(sp)

    //main data structures. See lab manual for explanation
    rgb_pixel_t* rgbblock;
    if((rgbblock = malloc(w_size*h_size*sizeof(rgb_pixel_t)))==NULL) error_and_exit("cannot allocate rgbblock");
20080f24:	2109883a 	add	r4,r4,r4
20080f28:	2109883a 	add	r4,r4,r4
20080f2c:	00899940 	call	20089994 <malloc>
20080f30:	d8801d15 	stw	r2,116(sp)
20080f34:	1001f126 	beq	r2,zero,200816fc <mjpeg423_decode+0x8a8>
    color_block_t* Yblock;
    if((Yblock = malloc(hYb_size * wYb_size * 64))==NULL) error_and_exit("cannot allocate Yblock");
20080f38:	d8c00d17 	ldw	r3,52(sp)
20080f3c:	1c07383a 	mul	r3,r3,r16
20080f40:	182291ba 	slli	r17,r3,6
20080f44:	d8c01215 	stw	r3,72(sp)
20080f48:	8809883a 	mov	r4,r17
20080f4c:	00899940 	call	20089994 <malloc>
20080f50:	d8800e15 	stw	r2,56(sp)
20080f54:	1001ed26 	beq	r2,zero,2008170c <mjpeg423_decode+0x8b8>
    color_block_t* Cbblock;
    if((Cbblock = malloc(hCb_size * wCb_size * 64))==NULL) error_and_exit("cannot allocate Cbblock");
20080f58:	8809883a 	mov	r4,r17
20080f5c:	00899940 	call	20089994 <malloc>
20080f60:	d8800f15 	stw	r2,60(sp)
20080f64:	1001ed26 	beq	r2,zero,2008171c <mjpeg423_decode+0x8c8>
    color_block_t* Crblock;
    if((Crblock = malloc(hCb_size * wCb_size * 64))==NULL) error_and_exit("cannot allocate Crblock");;
20080f68:	8809883a 	mov	r4,r17
20080f6c:	00899940 	call	20089994 <malloc>
20080f70:	d8801015 	stw	r2,64(sp)
20080f74:	1001ed26 	beq	r2,zero,2008172c <mjpeg423_decode+0x8d8>
    dct_block_t* YDCAC;
    if((YDCAC = malloc(hYb_size * wYb_size * 64 * sizeof(DCTELEM)))==NULL) error_and_exit("cannot allocate YDCAC");
20080f78:	d8c01217 	ldw	r3,72(sp)
20080f7c:	182691fa 	slli	r19,r3,7
20080f80:	9809883a 	mov	r4,r19
20080f84:	00899940 	call	20089994 <malloc>
20080f88:	d8801715 	stw	r2,92(sp)
20080f8c:	1001eb26 	beq	r2,zero,2008173c <mjpeg423_decode+0x8e8>
    dct_block_t* CbDCAC;
    if((CbDCAC = malloc(hCb_size * wCb_size * 64 * sizeof(DCTELEM)))==NULL) error_and_exit("cannot allocate CbDCAC");
20080f90:	9809883a 	mov	r4,r19
20080f94:	00899940 	call	20089994 <malloc>
20080f98:	d8801815 	stw	r2,96(sp)
20080f9c:	1001eb26 	beq	r2,zero,2008174c <mjpeg423_decode+0x8f8>
    dct_block_t* CrDCAC;
    if((CrDCAC = malloc(hCb_size * wCb_size * 64 * sizeof(DCTELEM)))==NULL) error_and_exit("cannot allocate CrDCAC");
20080fa0:	9809883a 	mov	r4,r19
20080fa4:	00899940 	call	20089994 <malloc>
20080fa8:	d8801915 	stw	r2,100(sp)
20080fac:	1001eb26 	beq	r2,zero,2008175c <mjpeg423_decode+0x908>
    //Ybitstream is assigned a size sufficient to hold all bistreams
    //the bitstream is then read from the file into Ybitstream
    //the remaining pointers simply point to the beginning of the Cb and Cr streams within Ybitstream
    uint8_t* Ybitstream;
    if((Ybitstream = malloc(hYb_size * wYb_size * 64 * sizeof(DCTELEM) + 2 * hCb_size * wCb_size * 64 * sizeof(DCTELEM)))==NULL) error_and_exit("cannot allocate bitstream");
20080fb0:	d8c00d17 	ldw	r3,52(sp)
20080fb4:	180891fa 	slli	r4,r3,7
20080fb8:	2409383a 	mul	r4,r4,r16
20080fbc:	2449883a 	add	r4,r4,r17
20080fc0:	2109883a 	add	r4,r4,r4
20080fc4:	00899940 	call	20089994 <malloc>
20080fc8:	d8801515 	stw	r2,84(sp)
20080fcc:	1001e726 	beq	r2,zero,2008176c <mjpeg423_decode+0x918>
    uint8_t* Cbbitstream;
    uint8_t* Crbitstream;

    //read trailer. Note: the trailer information is not used in the sample decoder app
    //set file to beginning of trailer
    if(!Fat_FileSeek(file_in,  SEEK_SET, 5 * sizeof(uint32_t) + payload_size)) error_and_exit("cannot seek into file");
20080fd0:	d9001317 	ldw	r4,76(sp)
20080fd4:	000b883a 	mov	r5,zero
20080fd8:	a1800504 	addi	r6,r20,20
20080fdc:	00828680 	call	20082868 <Fat_FileSeek>
20080fe0:	1001ba26 	beq	r2,zero,200816cc <mjpeg423_decode+0x878>
    for(int count = 0; count < num_iframes; count++){
20080fe4:	a8002326 	beq	r21,zero,20081074 <mjpeg423_decode+0x220>
20080fe8:	dcc01617 	ldw	r19,88(sp)
20080fec:	0029883a 	mov	r20,zero
20080ff0:	dd801317 	ldw	r22,76(sp)
20080ff4:	9c400104 	addi	r17,r19,4
20080ff8:	00001106 	br	20081040 <mjpeg423_decode+0x1ec>
        if(!Fat_FileRead(file_in,&(trailer[count].frame_index), sizeof(uint32_t))) error_and_exit("cannot read input file");
        if(!Fat_FileRead(file_in,&(trailer[count].frame_position), sizeof(uint32_t))) error_and_exit("cannot read input file");
20080ffc:	b009883a 	mov	r4,r22
20081000:	880b883a 	mov	r5,r17
20081004:	01800104 	movi	r6,4
20081008:	008250c0 	call	2008250c <Fat_FileRead>
2008100c:	10001526 	beq	r2,zero,20081064 <mjpeg423_decode+0x210>
        DEBUG_PRINT_ARG("I frame index %u, ", trailer[count].frame_index)
20081010:	99400017 	ldw	r5,0(r19)
20081014:	01000034 	movhi	r4,0
20081018:	21005d04 	addi	r4,r4,372
2008101c:	008a4680 	call	2008a468 <printf>
        DEBUG_PRINT_ARG("position %u\n", trailer[count].frame_position)
20081020:	89400017 	ldw	r5,0(r17)
20081024:	01000034 	movhi	r4,0
    uint8_t* Crbitstream;

    //read trailer. Note: the trailer information is not used in the sample decoder app
    //set file to beginning of trailer
    if(!Fat_FileSeek(file_in,  SEEK_SET, 5 * sizeof(uint32_t) + payload_size)) error_and_exit("cannot seek into file");
    for(int count = 0; count < num_iframes; count++){
20081028:	a5000044 	addi	r20,r20,1
        if(!Fat_FileRead(file_in,&(trailer[count].frame_index), sizeof(uint32_t))) error_and_exit("cannot read input file");
        if(!Fat_FileRead(file_in,&(trailer[count].frame_position), sizeof(uint32_t))) error_and_exit("cannot read input file");
        DEBUG_PRINT_ARG("I frame index %u, ", trailer[count].frame_index)
        DEBUG_PRINT_ARG("position %u\n", trailer[count].frame_position)
2008102c:	21006204 	addi	r4,r4,392
20081030:	9cc00204 	addi	r19,r19,8
20081034:	8c400204 	addi	r17,r17,8
20081038:	008a4680 	call	2008a468 <printf>
    uint8_t* Crbitstream;

    //read trailer. Note: the trailer information is not used in the sample decoder app
    //set file to beginning of trailer
    if(!Fat_FileSeek(file_in,  SEEK_SET, 5 * sizeof(uint32_t) + payload_size)) error_and_exit("cannot seek into file");
    for(int count = 0; count < num_iframes; count++){
2008103c:	a5400d26 	beq	r20,r21,20081074 <mjpeg423_decode+0x220>
        if(!Fat_FileRead(file_in,&(trailer[count].frame_index), sizeof(uint32_t))) error_and_exit("cannot read input file");
20081040:	b009883a 	mov	r4,r22
20081044:	980b883a 	mov	r5,r19
20081048:	01800104 	movi	r6,4
2008104c:	008250c0 	call	2008250c <Fat_FileRead>
20081050:	103fea1e 	bne	r2,zero,20080ffc <__flash_rwdata_start+0xfffe49b4>
20081054:	01000034 	movhi	r4,0
20081058:	21000c04 	addi	r4,r4,48
2008105c:	008028c0 	call	2008028c <error_and_exit>
20081060:	003fe606 	br	20080ffc <__flash_rwdata_start+0xfffe49b4>
        if(!Fat_FileRead(file_in,&(trailer[count].frame_position), sizeof(uint32_t))) error_and_exit("cannot read input file");
20081064:	01000034 	movhi	r4,0
20081068:	21000c04 	addi	r4,r4,48
2008106c:	008028c0 	call	2008028c <error_and_exit>
20081070:	003fe706 	br	20081010 <__flash_rwdata_start+0xfffe49c8>
        DEBUG_PRINT_ARG("I frame index %u, ", trailer[count].frame_index)
        DEBUG_PRINT_ARG("position %u\n", trailer[count].frame_position)
    }
    //set it back to beginning of payload
    if(!Fat_FileSeek(file_in, SEEK_SET, 5 * sizeof(uint32_t))) error_and_exit("cannot seek into file");
20081074:	d9001317 	ldw	r4,76(sp)
20081078:	000b883a 	mov	r5,zero
2008107c:	01800504 	movi	r6,20
20081080:	00828680 	call	20082868 <Fat_FileSeek>
20081084:	10019526 	beq	r2,zero,200816dc <mjpeg423_decode+0x888>


    //encode and write frames
    for(int frame_index = 0; frame_index < num_frames; frame_index ++){
20081088:	d8c01a17 	ldw	r3,104(sp)
2008108c:	18013b26 	beq	r3,zero,2008157c <mjpeg423_decode+0x728>
								ready_frames = 0;
								command = NO_CMD;
								goto Exit;
							}

							int japan_high = num_iframes - 1;
20081090:	ad7fffc4 	addi	r21,r21,-1
							int japan_low = 0;
							int middle = 0;
							while(japan_low <= japan_high)
							{
                                int middle = (japan_high + japan_low)/2;
20081094:	a807d07a 	srai	r3,r21,1
								ready_frames = 0;
								command = NO_CMD;
								goto Exit;
							}

							int japan_high = num_iframes - 1;
20081098:	dd401b15 	stw	r21,108(sp)
							int japan_low = 0;
							int middle = 0;
							while(japan_low <= japan_high)
							{
                                int middle = (japan_high + japan_low)/2;
                                if(trailer[middle].frame_index == desired_skip_frame)
2008109c:	d8001415 	stw	zero,80(sp)
200810a0:	180490fa 	slli	r2,r3,3
							int japan_high = num_iframes - 1;
							int japan_low = 0;
							int middle = 0;
							while(japan_low <= japan_high)
							{
                                int middle = (japan_high + japan_low)/2;
200810a4:	d8c01c15 	stw	r3,112(sp)
200810a8:	800691ba 	slli	r3,r16,6
200810ac:	d8c01115 	stw	r3,68(sp)
                                if(trailer[middle].frame_index == desired_skip_frame)
200810b0:	d8c01617 	ldw	r3,88(sp)
200810b4:	1885883a 	add	r2,r3,r2
200810b8:	d8801e15 	stw	r2,120(sp)
    if(!Fat_FileSeek(file_in, SEEK_SET, 5 * sizeof(uint32_t))) error_and_exit("cannot seek into file");


    //encode and write frames
    for(int frame_index = 0; frame_index < num_frames; frame_index ++){
        DEBUG_PRINT_ARG("\nFrame #%u\n",frame_index)
200810bc:	d9401417 	ldw	r5,80(sp)
200810c0:	01000034 	movhi	r4,0
200810c4:	21006b04 	addi	r4,r4,428
200810c8:	008a4680 	call	2008a468 <printf>

        //read frame payload
        if(!Fat_FileRead(file_in, frame_header, 4*sizeof(uint32_t))) error_and_exit("cannot read input file");
200810cc:	d9001317 	ldw	r4,76(sp)
200810d0:	d9400804 	addi	r5,sp,32
200810d4:	01800404 	movi	r6,16
200810d8:	008250c0 	call	2008250c <Fat_FileRead>
200810dc:	10017726 	beq	r2,zero,200816bc <mjpeg423_decode+0x868>
        frame_size  = frame_header[0];
200810e0:	dd400817 	ldw	r21,32(sp)
        frame_type  = frame_header[1];
        Ysize       = frame_header[2];
        Cbsize      = frame_header[3];

        DEBUG_PRINT_ARG("Frame_size %u\n",frame_size)
200810e4:	01000034 	movhi	r4,0
200810e8:	21006e04 	addi	r4,r4,440
        DEBUG_PRINT_ARG("\nFrame #%u\n",frame_index)

        //read frame payload
        if(!Fat_FileRead(file_in, frame_header, 4*sizeof(uint32_t))) error_and_exit("cannot read input file");
        frame_size  = frame_header[0];
        frame_type  = frame_header[1];
200810ec:	dc400917 	ldw	r17,36(sp)
        Ysize       = frame_header[2];
        Cbsize      = frame_header[3];

        DEBUG_PRINT_ARG("Frame_size %u\n",frame_size)
200810f0:	a80b883a 	mov	r5,r21

        //read frame payload
        if(!Fat_FileRead(file_in, frame_header, 4*sizeof(uint32_t))) error_and_exit("cannot read input file");
        frame_size  = frame_header[0];
        frame_type  = frame_header[1];
        Ysize       = frame_header[2];
200810f4:	dcc00a17 	ldw	r19,40(sp)
        Cbsize      = frame_header[3];
200810f8:	dd000b17 	ldw	r20,44(sp)

        DEBUG_PRINT_ARG("Frame_size %u\n",frame_size)
200810fc:	008a4680 	call	2008a468 <printf>
        DEBUG_PRINT_ARG("Frame_type %u\n",frame_type)
20081100:	01000034 	movhi	r4,0
20081104:	21007204 	addi	r4,r4,456
20081108:	880b883a 	mov	r5,r17
2008110c:	008a4680 	call	2008a468 <printf>

        if(!Fat_FileRead(file_in, Ybitstream, frame_size - 4 * sizeof(uint32_t)))
20081110:	d9001317 	ldw	r4,76(sp)
20081114:	d9401517 	ldw	r5,84(sp)
20081118:	a9bffc04 	addi	r6,r21,-16
2008111c:	008250c0 	call	2008250c <Fat_FileRead>
20081120:	10014826 	beq	r2,zero,20081644 <mjpeg423_decode+0x7f0>

#ifdef PROFILEING
        if(alt_timestamp_start() != 0) error_and_exit("Can't start timestamp");
#endif
        //lossless decoding
        lossless_decode(hYb_size*wYb_size, Ybitstream, YDCAC, Yquant, frame_type);
20081124:	d9001217 	ldw	r4,72(sp)
20081128:	d9401517 	ldw	r5,84(sp)
2008112c:	d9801717 	ldw	r6,92(sp)
20081130:	01c00034 	movhi	r7,0
20081134:	39c2ee04 	addi	r7,r7,3000
20081138:	dc400015 	stw	r17,0(sp)
2008113c:	00809d00 	call	200809d0 <lossless_decode>
        DEBUG_PRINT_ARG("Frame_type %u\n",frame_type)

        if(!Fat_FileRead(file_in, Ybitstream, frame_size - 4 * sizeof(uint32_t)))
            error_and_exit("cannot read input file");
        //set the Cb and Cr bitstreams to point to the right location
        Cbbitstream = Ybitstream + Ysize;
20081140:	d8c01517 	ldw	r3,84(sp)
#ifdef PROFILEING
        if(alt_timestamp_start() != 0) error_and_exit("Can't start timestamp");
#endif
        //lossless decoding
        lossless_decode(hYb_size*wYb_size, Ybitstream, YDCAC, Yquant, frame_type);
        lossless_decode(hCb_size*wCb_size, Cbbitstream, CbDCAC, Cquant, frame_type);
20081144:	d9001217 	ldw	r4,72(sp)
20081148:	d9801817 	ldw	r6,96(sp)
        DEBUG_PRINT_ARG("Frame_type %u\n",frame_type)

        if(!Fat_FileRead(file_in, Ybitstream, frame_size - 4 * sizeof(uint32_t)))
            error_and_exit("cannot read input file");
        //set the Cb and Cr bitstreams to point to the right location
        Cbbitstream = Ybitstream + Ysize;
2008114c:	1ce7883a 	add	r19,r3,r19
#ifdef PROFILEING
        if(alt_timestamp_start() != 0) error_and_exit("Can't start timestamp");
#endif
        //lossless decoding
        lossless_decode(hYb_size*wYb_size, Ybitstream, YDCAC, Yquant, frame_type);
        lossless_decode(hCb_size*wCb_size, Cbbitstream, CbDCAC, Cquant, frame_type);
20081150:	01c00034 	movhi	r7,0
20081154:	39c2ce04 	addi	r7,r7,2872
20081158:	980b883a 	mov	r5,r19
2008115c:	dc400015 	stw	r17,0(sp)
20081160:	00809d00 	call	200809d0 <lossless_decode>
        lossless_decode(hCb_size*wCb_size, Crbitstream, CrDCAC, Cquant, frame_type);
20081164:	d9001217 	ldw	r4,72(sp)
20081168:	d9801917 	ldw	r6,100(sp)
2008116c:	01c00034 	movhi	r7,0
20081170:	39c2ce04 	addi	r7,r7,2872

        if(!Fat_FileRead(file_in, Ybitstream, frame_size - 4 * sizeof(uint32_t)))
            error_and_exit("cannot read input file");
        //set the Cb and Cr bitstreams to point to the right location
        Cbbitstream = Ybitstream + Ysize;
        Crbitstream = Cbbitstream + Cbsize;
20081174:	9d0b883a 	add	r5,r19,r20
        if(alt_timestamp_start() != 0) error_and_exit("Can't start timestamp");
#endif
        //lossless decoding
        lossless_decode(hYb_size*wYb_size, Ybitstream, YDCAC, Yquant, frame_type);
        lossless_decode(hCb_size*wCb_size, Cbbitstream, CbDCAC, Cquant, frame_type);
        lossless_decode(hCb_size*wCb_size, Crbitstream, CrDCAC, Cquant, frame_type);
20081178:	dc400015 	stw	r17,0(sp)
2008117c:	00809d00 	call	200809d0 <lossless_decode>

        //fdct
        for(int b = 0; b < hYb_size*wYb_size; b++) idct(YDCAC[b], Yblock[b]);
20081180:	d8c01217 	ldw	r3,72(sp)
20081184:	00c0210e 	bge	zero,r3,2008120c <mjpeg423_decode+0x3b8>
20081188:	dd001717 	ldw	r20,92(sp)
2008118c:	dcc00e17 	ldw	r19,56(sp)
							int japan_low = 0;
							int middle = 0;
							while(japan_low <= japan_high)
							{
                                int middle = (japan_high + japan_low)/2;
                                if(trailer[middle].frame_index == desired_skip_frame)
20081190:	dd401217 	ldw	r21,72(sp)
20081194:	0023883a 	mov	r17,zero
        lossless_decode(hYb_size*wYb_size, Ybitstream, YDCAC, Yquant, frame_type);
        lossless_decode(hCb_size*wCb_size, Cbbitstream, CbDCAC, Cquant, frame_type);
        lossless_decode(hCb_size*wCb_size, Crbitstream, CrDCAC, Cquant, frame_type);

        //fdct
        for(int b = 0; b < hYb_size*wYb_size; b++) idct(YDCAC[b], Yblock[b]);
20081198:	a009883a 	mov	r4,r20
2008119c:	980b883a 	mov	r5,r19
200811a0:	8c400044 	addi	r17,r17,1
200811a4:	00803fc0 	call	200803fc <idct>
200811a8:	a5002004 	addi	r20,r20,128
200811ac:	9cc01004 	addi	r19,r19,64
200811b0:	8d7ff91e 	bne	r17,r21,20081198 <__flash_rwdata_start+0xfffe4b50>
200811b4:	dd001817 	ldw	r20,96(sp)
200811b8:	dcc00f17 	ldw	r19,60(sp)
200811bc:	dd401217 	ldw	r21,72(sp)
200811c0:	0023883a 	mov	r17,zero
        for(int b = 0; b < hCb_size*wCb_size; b++) idct(CbDCAC[b], Cbblock[b]);
200811c4:	a009883a 	mov	r4,r20
200811c8:	980b883a 	mov	r5,r19
200811cc:	8c400044 	addi	r17,r17,1
200811d0:	00803fc0 	call	200803fc <idct>
200811d4:	a5002004 	addi	r20,r20,128
200811d8:	9cc01004 	addi	r19,r19,64
200811dc:	8d7ff91e 	bne	r17,r21,200811c4 <__flash_rwdata_start+0xfffe4b7c>
200811e0:	dd001917 	ldw	r20,100(sp)
200811e4:	dcc01017 	ldw	r19,64(sp)
200811e8:	dd401217 	ldw	r21,72(sp)
200811ec:	0023883a 	mov	r17,zero
        for(int b = 0; b < hCb_size*wCb_size; b++) idct(CrDCAC[b], Crblock[b]);
200811f0:	a009883a 	mov	r4,r20
200811f4:	980b883a 	mov	r5,r19
200811f8:	8c400044 	addi	r17,r17,1
200811fc:	00803fc0 	call	200803fc <idct>
20081200:	a5002004 	addi	r20,r20,128
20081204:	9cc01004 	addi	r19,r19,64
20081208:	8d7ff916 	blt	r17,r21,200811f0 <__flash_rwdata_start+0xfffe4ba8>

#ifdef PROFILEING
        printf("it took %u cycles at a frequency of %uHz to decode this frame\n", alt_timestamp(), alt_timestamp_freq());
#endif

        if(!init)
2008120c:	d0a01517 	ldw	r2,-32684(gp)
20081210:	10010126 	beq	r2,zero,20081618 <mjpeg423_decode+0x7c4>
20081214:	d1201417 	ldw	r4,-32688(gp)
        {
            disp = ece423_video_display_init(VIDEO_DMA_CSR_NAME,640,480,NUM_BUFFERS);
            init = TRUE;
        }

        alt_u32 *frame1 = ece423_video_display_get_buffer(disp);
20081218:	00855240 	call	20085524 <ece423_video_display_get_buffer>
2008121c:	1027883a 	mov	r19,r2

        //ybcbr to rgb conversion
        while(ece423_video_display_buffer_is_available(disp) || (ready_frames > NUM_BUFFERS-5));
20081220:	04400144 	movi	r17,5
20081224:	d1201417 	ldw	r4,-32688(gp)
20081228:	00852940 	call	20085294 <ece423_video_display_buffer_is_available>
2008122c:	103ffd1e 	bne	r2,zero,20081224 <__flash_rwdata_start+0xfffe4bdc>
20081230:	01000034 	movhi	r4,0
20081234:	210a2a04 	addi	r4,r4,10408
20081238:	20800017 	ldw	r2,0(r4)
2008123c:	88bff936 	bltu	r17,r2,20081224 <__flash_rwdata_start+0xfffe4bdc>

        for (int h = 0; h < hCb_size; h++)
20081240:	d8c00d17 	ldw	r3,52(sp)
20081244:	00c0200e 	bge	zero,r3,200812c8 <mjpeg423_decode+0x474>
20081248:	0029883a 	mov	r20,zero
2008124c:	d8000c15 	stw	zero,48(sp)
            for (int w = 0; w < wCb_size; w++) {
20081250:	0400160e 	bge	zero,r16,200812ac <mjpeg423_decode+0x458>
20081254:	d8c00e17 	ldw	r3,56(sp)
20081258:	d8800c17 	ldw	r2,48(sp)
2008125c:	0039883a 	mov	fp,zero
20081260:	1d2b883a 	add	r21,r3,r20
20081264:	d8c00f17 	ldw	r3,60(sp)
20081268:	102290fa 	slli	r17,r2,3
2008126c:	1d2f883a 	add	r23,r3,r20
20081270:	d8c01017 	ldw	r3,64(sp)
20081274:	1d2d883a 	add	r22,r3,r20
                int b = h * wCb_size + w;

                ycbcr_to_rgb(h << 3, w << 3, w_size, Yblock[b], Cbblock[b], Crblock[b], (void *)frame1);
20081278:	e00a90fa 	slli	r5,fp,3
2008127c:	ddc00015 	stw	r23,0(sp)
20081280:	dd800115 	stw	r22,4(sp)
20081284:	a80f883a 	mov	r7,r21
20081288:	dcc00215 	stw	r19,8(sp)
2008128c:	8809883a 	mov	r4,r17
20081290:	900d883a 	mov	r6,r18

        //ybcbr to rgb conversion
        while(ece423_video_display_buffer_is_available(disp) || (ready_frames > NUM_BUFFERS-5));

        for (int h = 0; h < hCb_size; h++)
            for (int w = 0; w < wCb_size; w++) {
20081294:	e7000044 	addi	fp,fp,1
                int b = h * wCb_size + w;

                ycbcr_to_rgb(h << 3, w << 3, w_size, Yblock[b], Cbblock[b], Crblock[b], (void *)frame1);
20081298:	00817ac0 	call	200817ac <ycbcr_to_rgb>
2008129c:	ad401004 	addi	r21,r21,64
200812a0:	bdc01004 	addi	r23,r23,64
200812a4:	b5801004 	addi	r22,r22,64

        //ybcbr to rgb conversion
        while(ece423_video_display_buffer_is_available(disp) || (ready_frames > NUM_BUFFERS-5));

        for (int h = 0; h < hCb_size; h++)
            for (int w = 0; w < wCb_size; w++) {
200812a8:	873ff31e 	bne	r16,fp,20081278 <__flash_rwdata_start+0xfffe4c30>
200812ac:	d8c01117 	ldw	r3,68(sp)
        alt_u32 *frame1 = ece423_video_display_get_buffer(disp);

        //ybcbr to rgb conversion
        while(ece423_video_display_buffer_is_available(disp) || (ready_frames > NUM_BUFFERS-5));

        for (int h = 0; h < hCb_size; h++)
200812b0:	d8800c17 	ldw	r2,48(sp)
200812b4:	a0e9883a 	add	r20,r20,r3
200812b8:	d8c00d17 	ldw	r3,52(sp)
200812bc:	10800044 	addi	r2,r2,1
200812c0:	d8800c15 	stw	r2,48(sp)
200812c4:	18bfe21e 	bne	r3,r2,20081250 <__flash_rwdata_start+0xfffe4c08>
                int b = h * wCb_size + w;

                ycbcr_to_rgb(h << 3, w << 3, w_size, Yblock[b], Cbblock[b], Crblock[b], (void *)frame1);
            }

        ece423_video_display_register_written_buffer(disp);
200812c8:	d1201417 	ldw	r4,-32688(gp)
200812cc:	00852180 	call	20085218 <ece423_video_display_register_written_buffer>
        ready_frames++;
200812d0:	01000034 	movhi	r4,0
200812d4:	210a2a04 	addi	r4,r4,10408
200812d8:	20800017 	ldw	r2,0(r4)
// Displays the first frame of a new section when the video is paused
#ifdef PERIODIC_VIDEO
        if(!is_video_playing)
200812dc:	01000034 	movhi	r4,0
200812e0:	210a1204 	addi	r4,r4,10312
200812e4:	20c00017 	ldw	r3,0(r4)

                ycbcr_to_rgb(h << 3, w << 3, w_size, Yblock[b], Cbblock[b], Crblock[b], (void *)frame1);
            }

        ece423_video_display_register_written_buffer(disp);
        ready_frames++;
200812e8:	01000034 	movhi	r4,0
200812ec:	10800044 	addi	r2,r2,1
200812f0:	210a2a04 	addi	r4,r4,10408
200812f4:	20800015 	stw	r2,0(r4)
// Displays the first frame of a new section when the video is paused
#ifdef PERIODIC_VIDEO
        if(!is_video_playing)
200812f8:	1800c026 	beq	r3,zero,200815fc <mjpeg423_decode+0x7a8>
        	ready_frames--;
            ece423_video_display_switch_frames(disp);
        }
        do
        {
			if(command != NO_CMD)
200812fc:	01000034 	movhi	r4,0
20081300:	210a1104 	addi	r4,r4,10308
20081304:	20800017 	ldw	r2,0(r4)
20081308:	04400144 	movi	r17,5
			{
				int32_t desired_skip_frame;
					switch(command)
2008130c:	04c00104 	movi	r19,4
					{
						case START:
							is_video_playing = TRUE;
20081310:	05000044 	movi	r20,1
        	ready_frames--;
            ece423_video_display_switch_frames(disp);
        }
        do
        {
			if(command != NO_CMD)
20081314:	14405126 	beq	r2,r17,2008145c <mjpeg423_decode+0x608>
			{
				int32_t desired_skip_frame;
					switch(command)
20081318:	01000034 	movhi	r4,0
2008131c:	210a1104 	addi	r4,r4,10308
20081320:	20800017 	ldw	r2,0(r4)
20081324:	9880aa36 	bltu	r19,r2,200815d0 <mjpeg423_decode+0x77c>
20081328:	100490ba 	slli	r2,r2,2
2008132c:	00c80234 	movhi	r3,8200
20081330:	18c4d004 	addi	r3,r3,4928
20081334:	10c5883a 	add	r2,r2,r3
20081338:	10800017 	ldw	r2,0(r2)
2008133c:	1000683a 	jmp	r2
20081340:	20081470 	cmpltui	zero,r4,8273
20081344:	2008142c 	andhi	zero,r4,8272
20081348:	200813b0 	cmpltui	zero,r4,8270
2008134c:	2008158c 	andi	zero,r4,8278
20081350:	20081484 	addi	zero,r4,8274
								goto EndSkip;
							}
							else if(desired_skip_frame >= num_frames - 1)
							{
								//desired_skip_frame = num_frames - 1;
								disp->buffer_being_written = ((disp->buffer_being_displayed + 1)
20081354:	d4a01417 	ldw	r18,-32688(gp)
										% disp->num_frame_buffers);
20081358:	00c003c4 	movi	r3,15
								goto EndSkip;
							}
							else if(desired_skip_frame >= num_frames - 1)
							{
								//desired_skip_frame = num_frames - 1;
								disp->buffer_being_written = ((disp->buffer_being_displayed + 1)
2008135c:	94001a17 	ldw	r16,104(r18)
										% disp->num_frame_buffers);
20081360:	94402017 	ldw	r17,128(r18)
								goto EndSkip;
							}
							else if(desired_skip_frame >= num_frames - 1)
							{
								//desired_skip_frame = num_frames - 1;
								disp->buffer_being_written = ((disp->buffer_being_displayed + 1)
20081364:	84000044 	addi	r16,r16,1
										% disp->num_frame_buffers);
20081368:	8444b03a 	or	r2,r16,r17
2008136c:	18810b36 	bltu	r3,r2,2008179c <mjpeg423_decode+0x948>
20081370:	8004913a 	slli	r2,r16,4
20081374:	1446b03a 	or	r3,r2,r17
20081378:	00800034 	movhi	r2,0
2008137c:	10830e04 	addi	r2,r2,3128
20081380:	1885883a 	add	r2,r3,r2
20081384:	10800003 	ldbu	r2,0(r2)
20081388:	1463383a 	mul	r17,r2,r17
								ready_frames = 0;
2008138c:	01000034 	movhi	r4,0
20081390:	210a2a04 	addi	r4,r4,10408
								command = NO_CMD;
20081394:	00c00034 	movhi	r3,0
							else if(desired_skip_frame >= num_frames - 1)
							{
								//desired_skip_frame = num_frames - 1;
								disp->buffer_being_written = ((disp->buffer_being_displayed + 1)
										% disp->num_frame_buffers);
								ready_frames = 0;
20081398:	20000015 	stw	zero,0(r4)
							}
							else if(desired_skip_frame >= num_frames - 1)
							{
								//desired_skip_frame = num_frames - 1;
								disp->buffer_being_written = ((disp->buffer_being_displayed + 1)
										% disp->num_frame_buffers);
2008139c:	8461c83a 	sub	r16,r16,r17
								ready_frames = 0;
								command = NO_CMD;
200813a0:	00800144 	movi	r2,5
200813a4:	18ca1104 	addi	r3,r3,10308
								goto EndSkip;
							}
							else if(desired_skip_frame >= num_frames - 1)
							{
								//desired_skip_frame = num_frames - 1;
								disp->buffer_being_written = ((disp->buffer_being_displayed + 1)
200813a8:	94001b15 	stw	r16,108(r18)
										% disp->num_frame_buffers);
								ready_frames = 0;
								command = NO_CMD;
200813ac:	18800015 	stw	r2,0(r3)
    } //end frame iteration
    DEBUG_PRINT("\nDecoder done.\n\n\n")

Exit:
    //close down
    Fat_FileClose(file_in);
200813b0:	d9001317 	ldw	r4,76(sp)
200813b4:	00828e80 	call	200828e8 <Fat_FileClose>
    free(rgbblock);
200813b8:	d9001d17 	ldw	r4,116(sp)
200813bc:	00899a80 	call	200899a8 <free>
    free(Yblock);
200813c0:	d9000e17 	ldw	r4,56(sp)
200813c4:	00899a80 	call	200899a8 <free>
    free(Cbblock);
200813c8:	d9000f17 	ldw	r4,60(sp)
200813cc:	00899a80 	call	200899a8 <free>
    free(Crblock);
200813d0:	d9001017 	ldw	r4,64(sp)
200813d4:	00899a80 	call	200899a8 <free>
    free(YDCAC);
200813d8:	d9001717 	ldw	r4,92(sp)
200813dc:	00899a80 	call	200899a8 <free>
    free(CbDCAC);
200813e0:	d9001817 	ldw	r4,96(sp)
200813e4:	00899a80 	call	200899a8 <free>
    free(CrDCAC);
200813e8:	d9001917 	ldw	r4,100(sp)
200813ec:	00899a80 	call	200899a8 <free>
    free(Ybitstream);
200813f0:	d9001517 	ldw	r4,84(sp)
200813f4:	00899a80 	call	200899a8 <free>
    free(trailer);
200813f8:	d9001617 	ldw	r4,88(sp)
}
200813fc:	dfc02817 	ldw	ra,160(sp)
20081400:	df002717 	ldw	fp,156(sp)
20081404:	ddc02617 	ldw	r23,152(sp)
20081408:	dd802517 	ldw	r22,148(sp)
2008140c:	dd402417 	ldw	r21,144(sp)
20081410:	dd002317 	ldw	r20,140(sp)
20081414:	dcc02217 	ldw	r19,136(sp)
20081418:	dc802117 	ldw	r18,132(sp)
2008141c:	dc402017 	ldw	r17,128(sp)
20081420:	dc001f17 	ldw	r16,124(sp)
20081424:	dec02904 	addi	sp,sp,164
    free(Crblock);
    free(YDCAC);
    free(CbDCAC);
    free(CrDCAC);
    free(Ybitstream);
    free(trailer);
20081428:	00899a81 	jmpi	200899a8 <free>
					{
						case START:
							is_video_playing = TRUE;
							break;
						case PAUSE:
							is_video_playing = FALSE;
2008142c:	00800034 	movhi	r2,0
20081430:	108a1204 	addi	r2,r2,10312
20081434:	10000015 	stw	zero,0(r2)
							break;
20081438:	0005883a 	mov	r2,zero
							break;
						default:
							error_and_exit("Invalid State");
							break;
					}
					command = NO_CMD;
2008143c:	01000034 	movhi	r4,0
20081440:	210a1104 	addi	r4,r4,10308
20081444:	24400015 	stw	r17,0(r4)

			}
		} while(!is_video_playing);
20081448:	1000471e 	bne	r2,zero,20081568 <mjpeg423_decode+0x714>
        	ready_frames--;
            ece423_video_display_switch_frames(disp);
        }
        do
        {
			if(command != NO_CMD)
2008144c:	01000034 	movhi	r4,0
20081450:	210a1104 	addi	r4,r4,10308
20081454:	20800017 	ldw	r2,0(r4)
20081458:	147faf1e 	bne	r2,r17,20081318 <__flash_rwdata_start+0xfffe4cd0>
2008145c:	00c00034 	movhi	r3,0
20081460:	18ca1204 	addi	r3,r3,10312
20081464:	18800017 	ldw	r2,0(r3)
							break;
					}
					command = NO_CMD;

			}
		} while(!is_video_playing);
20081468:	103ff826 	beq	r2,zero,2008144c <__flash_rwdata_start+0xfffe4e04>
2008146c:	00003e06 	br	20081568 <mjpeg423_decode+0x714>
			{
				int32_t desired_skip_frame;
					switch(command)
					{
						case START:
							is_video_playing = TRUE;
20081470:	01000034 	movhi	r4,0
20081474:	210a1204 	addi	r4,r4,10312
20081478:	25000015 	stw	r20,0(r4)
							break;
2008147c:	00800044 	movi	r2,1
20081480:	003fee06 	br	2008143c <__flash_rwdata_start+0xfffe4df4>
							}
							command = NO_CMD;
							goto EndSkip;*/
							break;
						case FORWARD:
							desired_skip_frame = frame_index + 120;
20081484:	d8c01417 	ldw	r3,80(sp)
20081488:	19801e04 	addi	r6,r3,120
							        if(!Fat_FileSeek(file_in, SEEK_SET, trailer[count].frame_position)) error_and_exit("cannot seek into file");
							        break;
							    }
							}*/
							SkipIt:
							if(desired_skip_frame <= 0)
2008148c:	0180420e 	bge	zero,r6,20081598 <mjpeg423_decode+0x744>
										% disp->num_frame_buffers);

								command = NO_CMD;
								goto EndSkip;
							}
							else if(desired_skip_frame >= num_frames - 1)
20081490:	d8c01a17 	ldw	r3,104(sp)
20081494:	18bfffc4 	addi	r2,r3,-1
20081498:	30bfae2e 	bgeu	r6,r2,20081354 <__flash_rwdata_start+0xfffe4d0c>
							}

							int japan_high = num_iframes - 1;
							int japan_low = 0;
							int middle = 0;
							while(japan_low <= japan_high)
2008149c:	d8c01b17 	ldw	r3,108(sp)
200814a0:	1800b616 	blt	r3,zero,2008177c <mjpeg423_decode+0x928>
							{
                                int middle = (japan_high + japan_low)/2;
                                if(trailer[middle].frame_index == desired_skip_frame)
200814a4:	d9001e17 	ldw	r4,120(sp)
200814a8:	20c00017 	ldw	r3,0(r4)
200814ac:	30c0b526 	beq	r6,r3,20081784 <mjpeg423_decode+0x930>
200814b0:	d8801c17 	ldw	r2,112(sp)
200814b4:	d9001b17 	ldw	r4,108(sp)
200814b8:	d9c01617 	ldw	r7,88(sp)
200814bc:	000b883a 	mov	r5,zero
                                {
                                	break;
                                }
                                else if(trailer[middle].frame_index < desired_skip_frame)
200814c0:	1980412e 	bgeu	r3,r6,200815c8 <mjpeg423_decode+0x774>
                                {
                                    japan_low = middle + 1;
200814c4:	11400044 	addi	r5,r2,1
							}

							int japan_high = num_iframes - 1;
							int japan_low = 0;
							int middle = 0;
							while(japan_low <= japan_high)
200814c8:	21400616 	blt	r4,r5,200814e4 <mjpeg423_decode+0x690>
							{
                                int middle = (japan_high + japan_low)/2;
200814cc:	2145883a 	add	r2,r4,r5
200814d0:	1005d07a 	srai	r2,r2,1
                                if(trailer[middle].frame_index == desired_skip_frame)
200814d4:	100690fa 	slli	r3,r2,3
200814d8:	38c7883a 	add	r3,r7,r3
200814dc:	18c00017 	ldw	r3,0(r3)
200814e0:	30fff71e 	bne	r6,r3,200814c0 <__flash_rwdata_start+0xfffe4e78>
                                else
                                {
                                	japan_high = middle - 1;
                                }
							}
							frame_index = trailer[japan_high].frame_index;
200814e4:	200490fa 	slli	r2,r4,3
200814e8:	d8c01617 	ldw	r3,88(sp)
							if(!Fat_FileSeek(file_in, SEEK_SET, trailer[japan_high].frame_position)) error_and_exit("cannot seek into file");
200814ec:	d9001317 	ldw	r4,76(sp)
200814f0:	000b883a 	mov	r5,zero
                                else
                                {
                                	japan_high = middle - 1;
                                }
							}
							frame_index = trailer[japan_high].frame_index;
200814f4:	1885883a 	add	r2,r3,r2
							if(!Fat_FileSeek(file_in, SEEK_SET, trailer[japan_high].frame_position)) error_and_exit("cannot seek into file");
200814f8:	11800117 	ldw	r6,4(r2)
                                else
                                {
                                	japan_high = middle - 1;
                                }
							}
							frame_index = trailer[japan_high].frame_index;
200814fc:	10800017 	ldw	r2,0(r2)
20081500:	d8801415 	stw	r2,80(sp)
							if(!Fat_FileSeek(file_in, SEEK_SET, trailer[japan_high].frame_position)) error_and_exit("cannot seek into file");
20081504:	00828680 	call	20082868 <Fat_FileSeek>
20081508:	10002b26 	beq	r2,zero,200815b8 <mjpeg423_decode+0x764>
							ready_frames = 0;
							disp->buffer_being_written = ((disp->buffer_being_displayed + 1)
2008150c:	d5201417 	ldw	r20,-32688(gp)
                                	japan_high = middle - 1;
                                }
							}
							frame_index = trailer[japan_high].frame_index;
							if(!Fat_FileSeek(file_in, SEEK_SET, trailer[japan_high].frame_position)) error_and_exit("cannot seek into file");
							ready_frames = 0;
20081510:	01000034 	movhi	r4,0
20081514:	210a2a04 	addi	r4,r4,10408
							disp->buffer_being_written = ((disp->buffer_being_displayed + 1)
20081518:	a4401a17 	ldw	r17,104(r20)
									% disp->num_frame_buffers);
2008151c:	a4c02017 	ldw	r19,128(r20)
                                	japan_high = middle - 1;
                                }
							}
							frame_index = trailer[japan_high].frame_index;
							if(!Fat_FileSeek(file_in, SEEK_SET, trailer[japan_high].frame_position)) error_and_exit("cannot seek into file");
							ready_frames = 0;
20081520:	20000015 	stw	zero,0(r4)
							disp->buffer_being_written = ((disp->buffer_being_displayed + 1)
20081524:	8c400044 	addi	r17,r17,1
									% disp->num_frame_buffers);
20081528:	8cc4b03a 	or	r2,r17,r19
2008152c:	00c003c4 	movi	r3,15
20081530:	18802e36 	bltu	r3,r2,200815ec <mjpeg423_decode+0x798>
20081534:	8804913a 	slli	r2,r17,4
20081538:	00c00034 	movhi	r3,0
2008153c:	18c30e04 	addi	r3,r3,3128
20081540:	14c4b03a 	or	r2,r2,r19
20081544:	10c5883a 	add	r2,r2,r3
20081548:	10800003 	ldbu	r2,0(r2)
2008154c:	14e7383a 	mul	r19,r2,r19

							command = NO_CMD;
20081550:	01000034 	movhi	r4,0
20081554:	00800144 	movi	r2,5
20081558:	210a1104 	addi	r4,r4,10308
2008155c:	20800015 	stw	r2,0(r4)
							}
							frame_index = trailer[japan_high].frame_index;
							if(!Fat_FileSeek(file_in, SEEK_SET, trailer[japan_high].frame_position)) error_and_exit("cannot seek into file");
							ready_frames = 0;
							disp->buffer_being_written = ((disp->buffer_being_displayed + 1)
									% disp->num_frame_buffers);
20081560:	8ce3c83a 	sub	r17,r17,r19
                                }
							}
							frame_index = trailer[japan_high].frame_index;
							if(!Fat_FileSeek(file_in, SEEK_SET, trailer[japan_high].frame_position)) error_and_exit("cannot seek into file");
							ready_frames = 0;
							disp->buffer_being_written = ((disp->buffer_being_displayed + 1)
20081564:	a4401b15 	stw	r17,108(r20)
    //set it back to beginning of payload
    if(!Fat_FileSeek(file_in, SEEK_SET, 5 * sizeof(uint32_t))) error_and_exit("cannot seek into file");


    //encode and write frames
    for(int frame_index = 0; frame_index < num_frames; frame_index ++){
20081568:	d8c01417 	ldw	r3,80(sp)
2008156c:	d9001a17 	ldw	r4,104(sp)
20081570:	18c00044 	addi	r3,r3,1
20081574:	d8c01415 	stw	r3,80(sp)
20081578:	193ed036 	bltu	r3,r4,200810bc <__flash_rwdata_start+0xfffe4a74>
		} while(!is_video_playing);

        EndSkip: ;

    } //end frame iteration
    DEBUG_PRINT("\nDecoder done.\n\n\n")
2008157c:	01000034 	movhi	r4,0
20081580:	21006604 	addi	r4,r4,408
20081584:	008a56c0 	call	2008a56c <puts>
20081588:	003f8906 	br	200813b0 <__flash_rwdata_start+0xfffe4d68>
							break;
						case CYCLE:
							goto Exit;
							break;
						case REWIND:
							desired_skip_frame = frame_index - 120;
2008158c:	d8c01417 	ldw	r3,80(sp)
20081590:	19bfe204 	addi	r6,r3,-120
							        if(!Fat_FileSeek(file_in, SEEK_SET, trailer[count].frame_position)) error_and_exit("cannot seek into file");
							        break;
							    }
							}*/
							SkipIt:
							if(desired_skip_frame <= 0)
20081594:	01bfbe16 	blt	zero,r6,20081490 <__flash_rwdata_start+0xfffe4e48>
							{
								frame_index = trailer[0].frame_index;
								if(!Fat_FileSeek(file_in, SEEK_SET, trailer[0].frame_position)) error_and_exit("cannot seek into file");
20081598:	d8c01617 	ldw	r3,88(sp)
2008159c:	d9001317 	ldw	r4,76(sp)
200815a0:	000b883a 	mov	r5,zero
200815a4:	19800117 	ldw	r6,4(r3)
							    }
							}*/
							SkipIt:
							if(desired_skip_frame <= 0)
							{
								frame_index = trailer[0].frame_index;
200815a8:	18c00017 	ldw	r3,0(r3)
200815ac:	d8c01415 	stw	r3,80(sp)
								if(!Fat_FileSeek(file_in, SEEK_SET, trailer[0].frame_position)) error_and_exit("cannot seek into file");
200815b0:	00828680 	call	20082868 <Fat_FileSeek>
200815b4:	103fd51e 	bne	r2,zero,2008150c <__flash_rwdata_start+0xfffe4ec4>
                                {
                                	japan_high = middle - 1;
                                }
							}
							frame_index = trailer[japan_high].frame_index;
							if(!Fat_FileSeek(file_in, SEEK_SET, trailer[japan_high].frame_position)) error_and_exit("cannot seek into file");
200815b8:	01000034 	movhi	r4,0
200815bc:	21005704 	addi	r4,r4,348
200815c0:	008028c0 	call	2008028c <error_and_exit>
200815c4:	003fd106 	br	2008150c <__flash_rwdata_start+0xfffe4ec4>
                                {
                                    japan_low = middle + 1;
                                }
                                else
                                {
                                	japan_high = middle - 1;
200815c8:	113fffc4 	addi	r4,r2,-1
200815cc:	003fbe06 	br	200814c8 <__flash_rwdata_start+0xfffe4e80>

							command = NO_CMD;
							goto EndSkip;
							break;
						default:
							error_and_exit("Invalid State");
200815d0:	01000034 	movhi	r4,0
200815d4:	21007b04 	addi	r4,r4,492
200815d8:	008028c0 	call	2008028c <error_and_exit>
200815dc:	00c00034 	movhi	r3,0
200815e0:	18ca1204 	addi	r3,r3,10312
200815e4:	18800017 	ldw	r2,0(r3)
							break;
200815e8:	003f9406 	br	2008143c <__flash_rwdata_start+0xfffe4df4>
							}
							frame_index = trailer[japan_high].frame_index;
							if(!Fat_FileSeek(file_in, SEEK_SET, trailer[japan_high].frame_position)) error_and_exit("cannot seek into file");
							ready_frames = 0;
							disp->buffer_being_written = ((disp->buffer_being_displayed + 1)
									% disp->num_frame_buffers);
200815ec:	8809883a 	mov	r4,r17
200815f0:	980b883a 	mov	r5,r19
200815f4:	00866e40 	call	200866e4 <__divsi3>
200815f8:	003fd406 	br	2008154c <__flash_rwdata_start+0xfffe4f04>
// Displays the first frame of a new section when the video is paused
#ifdef PERIODIC_VIDEO
        if(!is_video_playing)
#endif
        {
        	ready_frames--;
200815fc:	20800017 	ldw	r2,0(r4)
20081600:	2007883a 	mov	r3,r4
            ece423_video_display_switch_frames(disp);
20081604:	d1201417 	ldw	r4,-32688(gp)
// Displays the first frame of a new section when the video is paused
#ifdef PERIODIC_VIDEO
        if(!is_video_playing)
#endif
        {
        	ready_frames--;
20081608:	10bfffc4 	addi	r2,r2,-1
2008160c:	18800015 	stw	r2,0(r3)
            ece423_video_display_switch_frames(disp);
20081610:	00852bc0 	call	200852bc <ece423_video_display_switch_frames>
20081614:	003f3906 	br	200812fc <__flash_rwdata_start+0xfffe4cb4>
        printf("it took %u cycles at a frequency of %uHz to decode this frame\n", alt_timestamp(), alt_timestamp_freq());
#endif

        if(!init)
        {
            disp = ece423_video_display_init(VIDEO_DMA_CSR_NAME,640,480,NUM_BUFFERS);
20081618:	01000034 	movhi	r4,0
2008161c:	21007604 	addi	r4,r4,472
20081620:	0140a004 	movi	r5,640
20081624:	01807804 	movi	r6,480
20081628:	01c00284 	movi	r7,10
2008162c:	00859540 	call	20085954 <ece423_video_display_init>
20081630:	1009883a 	mov	r4,r2
20081634:	d0a01415 	stw	r2,-32688(gp)
            init = TRUE;
20081638:	00800044 	movi	r2,1
2008163c:	d0a01515 	stw	r2,-32684(gp)
20081640:	003ef506 	br	20081218 <__flash_rwdata_start+0xfffe4bd0>
        DEBUG_PRINT_ARG("Frame_type %u\n",frame_type)

        if(!Fat_FileRead(file_in, Ybitstream, frame_size - 4 * sizeof(uint32_t)))
            error_and_exit("cannot read input file");
        //set the Cb and Cr bitstreams to point to the right location
        Cbbitstream = Ybitstream + Ysize;
20081644:	d8c01517 	ldw	r3,84(sp)

        DEBUG_PRINT_ARG("Frame_size %u\n",frame_size)
        DEBUG_PRINT_ARG("Frame_type %u\n",frame_type)

        if(!Fat_FileRead(file_in, Ybitstream, frame_size - 4 * sizeof(uint32_t)))
            error_and_exit("cannot read input file");
20081648:	01000034 	movhi	r4,0
2008164c:	21000c04 	addi	r4,r4,48
        //set the Cb and Cr bitstreams to point to the right location
        Cbbitstream = Ybitstream + Ysize;
20081650:	1ce7883a 	add	r19,r3,r19

        DEBUG_PRINT_ARG("Frame_size %u\n",frame_size)
        DEBUG_PRINT_ARG("Frame_type %u\n",frame_type)

        if(!Fat_FileRead(file_in, Ybitstream, frame_size - 4 * sizeof(uint32_t)))
            error_and_exit("cannot read input file");
20081654:	008028c0 	call	2008028c <error_and_exit>

#ifdef PROFILEING
        if(alt_timestamp_start() != 0) error_and_exit("Can't start timestamp");
#endif
        //lossless decoding
        lossless_decode(hYb_size*wYb_size, Ybitstream, YDCAC, Yquant, frame_type);
20081658:	d9001217 	ldw	r4,72(sp)
2008165c:	d9401517 	ldw	r5,84(sp)
20081660:	d9801717 	ldw	r6,92(sp)
20081664:	01c00034 	movhi	r7,0
20081668:	39c2ee04 	addi	r7,r7,3000
2008166c:	dc400015 	stw	r17,0(sp)
20081670:	00809d00 	call	200809d0 <lossless_decode>
        lossless_decode(hCb_size*wCb_size, Cbbitstream, CbDCAC, Cquant, frame_type);
20081674:	d9001217 	ldw	r4,72(sp)
20081678:	d9801817 	ldw	r6,96(sp)
2008167c:	01c00034 	movhi	r7,0
20081680:	39c2ce04 	addi	r7,r7,2872
20081684:	980b883a 	mov	r5,r19
20081688:	dc400015 	stw	r17,0(sp)
2008168c:	00809d00 	call	200809d0 <lossless_decode>
        lossless_decode(hCb_size*wCb_size, Crbitstream, CrDCAC, Cquant, frame_type);
20081690:	d9001217 	ldw	r4,72(sp)
20081694:	d9801917 	ldw	r6,100(sp)

        if(!Fat_FileRead(file_in, Ybitstream, frame_size - 4 * sizeof(uint32_t)))
            error_and_exit("cannot read input file");
        //set the Cb and Cr bitstreams to point to the right location
        Cbbitstream = Ybitstream + Ysize;
        Crbitstream = Cbbitstream + Cbsize;
20081698:	9d29883a 	add	r20,r19,r20
        if(alt_timestamp_start() != 0) error_and_exit("Can't start timestamp");
#endif
        //lossless decoding
        lossless_decode(hYb_size*wYb_size, Ybitstream, YDCAC, Yquant, frame_type);
        lossless_decode(hCb_size*wCb_size, Cbbitstream, CbDCAC, Cquant, frame_type);
        lossless_decode(hCb_size*wCb_size, Crbitstream, CrDCAC, Cquant, frame_type);
2008169c:	01c00034 	movhi	r7,0
200816a0:	39c2ce04 	addi	r7,r7,2872
200816a4:	dc400015 	stw	r17,0(sp)
200816a8:	a00b883a 	mov	r5,r20
200816ac:	00809d00 	call	200809d0 <lossless_decode>

        //fdct
        for(int b = 0; b < hYb_size*wYb_size; b++) idct(YDCAC[b], Yblock[b]);
200816b0:	d8c01217 	ldw	r3,72(sp)
200816b4:	00feb416 	blt	zero,r3,20081188 <__flash_rwdata_start+0xfffe4b40>
200816b8:	003ed406 	br	2008120c <__flash_rwdata_start+0xfffe4bc4>
    //encode and write frames
    for(int frame_index = 0; frame_index < num_frames; frame_index ++){
        DEBUG_PRINT_ARG("\nFrame #%u\n",frame_index)

        //read frame payload
        if(!Fat_FileRead(file_in, frame_header, 4*sizeof(uint32_t))) error_and_exit("cannot read input file");
200816bc:	01000034 	movhi	r4,0
200816c0:	21000c04 	addi	r4,r4,48
200816c4:	008028c0 	call	2008028c <error_and_exit>
200816c8:	003e8506 	br	200810e0 <__flash_rwdata_start+0xfffe4a98>
    uint8_t* Cbbitstream;
    uint8_t* Crbitstream;

    //read trailer. Note: the trailer information is not used in the sample decoder app
    //set file to beginning of trailer
    if(!Fat_FileSeek(file_in,  SEEK_SET, 5 * sizeof(uint32_t) + payload_size)) error_and_exit("cannot seek into file");
200816cc:	01000034 	movhi	r4,0
200816d0:	21005704 	addi	r4,r4,348
200816d4:	008028c0 	call	2008028c <error_and_exit>
200816d8:	003e4206 	br	20080fe4 <__flash_rwdata_start+0xfffe499c>
        if(!Fat_FileRead(file_in,&(trailer[count].frame_position), sizeof(uint32_t))) error_and_exit("cannot read input file");
        DEBUG_PRINT_ARG("I frame index %u, ", trailer[count].frame_index)
        DEBUG_PRINT_ARG("position %u\n", trailer[count].frame_position)
    }
    //set it back to beginning of payload
    if(!Fat_FileSeek(file_in, SEEK_SET, 5 * sizeof(uint32_t))) error_and_exit("cannot seek into file");
200816dc:	01000034 	movhi	r4,0
200816e0:	21005704 	addi	r4,r4,348
200816e4:	008028c0 	call	2008028c <error_and_exit>
200816e8:	003e6706 	br	20081088 <__flash_rwdata_start+0xfffe4a40>
    if((file_in = Fat_FileOpen(sd_fat_handle, filename_in)) == NULL) error_and_exit("cannot open input file");
    // char* filename_out = malloc(strlen(filenamebase_out)+1);
    // strcpy(filename_out, filenamebase_out);

    //read header
    if(!Fat_FileRead(file_in, file_header, 5*sizeof(uint32_t))) error_and_exit("cannot read input file");
200816ec:	01000034 	movhi	r4,0
200816f0:	21000c04 	addi	r4,r4,48
200816f4:	008028c0 	call	2008028c <error_and_exit>
200816f8:	003dec06 	br	20080eac <__flash_rwdata_start+0xfffe4864>
    //trailer structure
    iframe_trailer_t* trailer = malloc(sizeof(iframe_trailer_t)*num_frames);

    //main data structures. See lab manual for explanation
    rgb_pixel_t* rgbblock;
    if((rgbblock = malloc(w_size*h_size*sizeof(rgb_pixel_t)))==NULL) error_and_exit("cannot allocate rgbblock");
200816fc:	01000034 	movhi	r4,0
20081700:	21002504 	addi	r4,r4,148
20081704:	008028c0 	call	2008028c <error_and_exit>
20081708:	003e0b06 	br	20080f38 <__flash_rwdata_start+0xfffe48f0>
    color_block_t* Yblock;
    if((Yblock = malloc(hYb_size * wYb_size * 64))==NULL) error_and_exit("cannot allocate Yblock");
2008170c:	01000034 	movhi	r4,0
20081710:	21002c04 	addi	r4,r4,176
20081714:	008028c0 	call	2008028c <error_and_exit>
20081718:	003e0f06 	br	20080f58 <__flash_rwdata_start+0xfffe4910>
    color_block_t* Cbblock;
    if((Cbblock = malloc(hCb_size * wCb_size * 64))==NULL) error_and_exit("cannot allocate Cbblock");
2008171c:	01000034 	movhi	r4,0
20081720:	21003204 	addi	r4,r4,200
20081724:	008028c0 	call	2008028c <error_and_exit>
20081728:	003e0f06 	br	20080f68 <__flash_rwdata_start+0xfffe4920>
    color_block_t* Crblock;
    if((Crblock = malloc(hCb_size * wCb_size * 64))==NULL) error_and_exit("cannot allocate Crblock");;
2008172c:	01000034 	movhi	r4,0
20081730:	21003804 	addi	r4,r4,224
20081734:	008028c0 	call	2008028c <error_and_exit>
20081738:	003e0f06 	br	20080f78 <__flash_rwdata_start+0xfffe4930>
    dct_block_t* YDCAC;
    if((YDCAC = malloc(hYb_size * wYb_size * 64 * sizeof(DCTELEM)))==NULL) error_and_exit("cannot allocate YDCAC");
2008173c:	01000034 	movhi	r4,0
20081740:	21003e04 	addi	r4,r4,248
20081744:	008028c0 	call	2008028c <error_and_exit>
20081748:	003e1106 	br	20080f90 <__flash_rwdata_start+0xfffe4948>
    dct_block_t* CbDCAC;
    if((CbDCAC = malloc(hCb_size * wCb_size * 64 * sizeof(DCTELEM)))==NULL) error_and_exit("cannot allocate CbDCAC");
2008174c:	01000034 	movhi	r4,0
20081750:	21004404 	addi	r4,r4,272
20081754:	008028c0 	call	2008028c <error_and_exit>
20081758:	003e1106 	br	20080fa0 <__flash_rwdata_start+0xfffe4958>
    dct_block_t* CrDCAC;
    if((CrDCAC = malloc(hCb_size * wCb_size * 64 * sizeof(DCTELEM)))==NULL) error_and_exit("cannot allocate CrDCAC");
2008175c:	01000034 	movhi	r4,0
20081760:	21004a04 	addi	r4,r4,296
20081764:	008028c0 	call	2008028c <error_and_exit>
20081768:	003e1106 	br	20080fb0 <__flash_rwdata_start+0xfffe4968>
    //Ybitstream is assigned a size sufficient to hold all bistreams
    //the bitstream is then read from the file into Ybitstream
    //the remaining pointers simply point to the beginning of the Cb and Cr streams within Ybitstream
    uint8_t* Ybitstream;
    if((Ybitstream = malloc(hYb_size * wYb_size * 64 * sizeof(DCTELEM) + 2 * hCb_size * wCb_size * 64 * sizeof(DCTELEM)))==NULL) error_and_exit("cannot allocate bitstream");
2008176c:	01000034 	movhi	r4,0
20081770:	21005004 	addi	r4,r4,320
20081774:	008028c0 	call	2008028c <error_and_exit>
20081778:	003e1506 	br	20080fd0 <__flash_rwdata_start+0xfffe4988>
2008177c:	1809883a 	mov	r4,r3
20081780:	003f5806 	br	200814e4 <__flash_rwdata_start+0xfffe4e9c>
							int japan_low = 0;
							int middle = 0;
							while(japan_low <= japan_high)
							{
                                int middle = (japan_high + japan_low)/2;
                                if(trailer[middle].frame_index == desired_skip_frame)
20081784:	d9001b17 	ldw	r4,108(sp)
20081788:	003f5606 	br	200814e4 <__flash_rwdata_start+0xfffe4e9c>
    uint32_t file_header[5], frame_header[4];

    //file streams(changed to fat handle)
    FAT_FILE_HANDLE file_in;

    if((file_in = Fat_FileOpen(sd_fat_handle, filename_in)) == NULL) error_and_exit("cannot open input file");
2008178c:	01000034 	movhi	r4,0
20081790:	21000604 	addi	r4,r4,24
20081794:	008028c0 	call	2008028c <error_and_exit>
20081798:	003dbf06 	br	20080e98 <__flash_rwdata_start+0xfffe4850>
							}
							else if(desired_skip_frame >= num_frames - 1)
							{
								//desired_skip_frame = num_frames - 1;
								disp->buffer_being_written = ((disp->buffer_being_displayed + 1)
										% disp->num_frame_buffers);
2008179c:	8009883a 	mov	r4,r16
200817a0:	880b883a 	mov	r5,r17
200817a4:	00866e40 	call	200866e4 <__divsi3>
200817a8:	003ef706 	br	20081388 <__flash_rwdata_start+0xfffe4d40>

200817ac <ycbcr_to_rgb>:

#else

//null implementation
void ycbcr_to_rgb(int h, int w, uint32_t w_size, pcolor_block_t Y, pcolor_block_t Cb, pcolor_block_t Cr, rgb_pixel_t* rgbblock)
{
200817ac:	defff304 	addi	sp,sp,-52
200817b0:	d9800015 	stw	r6,0(sp)
200817b4:	2189383a 	mul	r4,r4,r6
200817b8:	da800017 	ldw	r10,0(sp)
200817bc:	da400e17 	ldw	r9,56(sp)
200817c0:	da000d17 	ldw	r8,52(sp)
200817c4:	290b883a 	add	r5,r5,r4
200817c8:	d8c00f17 	ldw	r3,60(sp)
200817cc:	5285883a 	add	r2,r10,r10
200817d0:	294d883a 	add	r6,r5,r5
200817d4:	318d883a 	add	r6,r6,r6
200817d8:	1085883a 	add	r2,r2,r2
200817dc:	ddc00a15 	stw	r23,40(sp)
200817e0:	dd800915 	stw	r22,36(sp)
200817e4:	dd400815 	stw	r21,32(sp)
200817e8:	dd000715 	stw	r20,28(sp)
200817ec:	dcc00615 	stw	r19,24(sp)
200817f0:	dc800515 	stw	r18,20(sp)
200817f4:	dc400415 	stw	r17,16(sp)
200817f8:	dc000315 	stw	r16,12(sp)
200817fc:	dfc00c15 	stw	ra,48(sp)
20081800:	df000b15 	stw	fp,44(sp)
20081804:	d8800115 	stw	r2,4(sp)
20081808:	198d883a 	add	r6,r3,r6
2008180c:	4dc00044 	addi	r23,r9,1
20081810:	3d800044 	addi	r22,r7,1
20081814:	45400044 	addi	r21,r8,1
20081818:	4d000084 	addi	r20,r9,2
2008181c:	3cc00084 	addi	r19,r7,2
20081820:	44800084 	addi	r18,r8,2
20081824:	4c4000c4 	addi	r17,r9,3
20081828:	3c0000c4 	addi	r16,r7,3
2008182c:	43c000c4 	addi	r15,r8,3
20081830:	4b800104 	addi	r14,r9,4
20081834:	3b400104 	addi	r13,r7,4
20081838:	43000104 	addi	r12,r8,4
2008183c:	4ac00144 	addi	r11,r9,5
20081840:	02800204 	movi	r10,8
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = Cr[y][x];
20081844:	49000003 	ldbu	r4,0(r9)
            pixel.green = Y[y][x];
20081848:	3fc00003 	ldbu	ra,0(r7)
            pixel.blue = Cb[y][x];
2008184c:	47000003 	ldbu	fp,0(r8)
            rgbblock[index] = pixel;
20081850:	31000085 	stb	r4,2(r6)
20081854:	37c00045 	stb	ra,1(r6)
20081858:	37000005 	stb	fp,0(r6)
2008185c:	300000c5 	stb	zero,3(r6)
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = Cr[y][x];
20081860:	bf000003 	ldbu	fp,0(r23)
            pixel.green = Y[y][x];
            pixel.blue = Cb[y][x];
            rgbblock[index] = pixel;
            index++;
20081864:	28800044 	addi	r2,r5,1
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = Cr[y][x];
            pixel.green = Y[y][x];
            pixel.blue = Cb[y][x];
            rgbblock[index] = pixel;
20081868:	1085883a 	add	r2,r2,r2
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = Cr[y][x];
2008186c:	df000205 	stb	fp,8(sp)
            pixel.green = Y[y][x];
            pixel.blue = Cb[y][x];
            rgbblock[index] = pixel;
20081870:	af000003 	ldbu	fp,0(r21)
20081874:	1085883a 	add	r2,r2,r2
20081878:	1889883a 	add	r4,r3,r2
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = Cr[y][x];
            pixel.green = Y[y][x];
2008187c:	b7c00003 	ldbu	ra,0(r22)
            pixel.blue = Cb[y][x];
            rgbblock[index] = pixel;
20081880:	27000005 	stb	fp,0(r4)
20081884:	df000203 	ldbu	fp,8(sp)
20081888:	27c00045 	stb	ra,1(r4)
2008188c:	200000c5 	stb	zero,3(r4)
20081890:	27000085 	stb	fp,2(r4)
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = Cr[y][x];
20081894:	a1000003 	ldbu	r4,0(r20)
            pixel.green = Y[y][x];
            pixel.blue = Cb[y][x];
            rgbblock[index] = pixel;
20081898:	97000003 	ldbu	fp,0(r18)
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = Cr[y][x];
            pixel.green = Y[y][x];
2008189c:	9fc00003 	ldbu	ra,0(r19)
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = Cr[y][x];
200818a0:	d9000205 	stb	r4,8(sp)
            pixel.green = Y[y][x];
            pixel.blue = Cb[y][x];
            rgbblock[index] = pixel;
200818a4:	11000104 	addi	r4,r2,4
200818a8:	1909883a 	add	r4,r3,r4
200818ac:	27000005 	stb	fp,0(r4)
200818b0:	df000203 	ldbu	fp,8(sp)
200818b4:	27c00045 	stb	ra,1(r4)
200818b8:	200000c5 	stb	zero,3(r4)
200818bc:	27000085 	stb	fp,2(r4)
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = Cr[y][x];
200818c0:	89000003 	ldbu	r4,0(r17)
            pixel.green = Y[y][x];
            pixel.blue = Cb[y][x];
            rgbblock[index] = pixel;
200818c4:	7f000003 	ldbu	fp,0(r15)
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = Cr[y][x];
            pixel.green = Y[y][x];
200818c8:	87c00003 	ldbu	ra,0(r16)
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = Cr[y][x];
200818cc:	d9000205 	stb	r4,8(sp)
            pixel.green = Y[y][x];
            pixel.blue = Cb[y][x];
            rgbblock[index] = pixel;
200818d0:	11000204 	addi	r4,r2,8
200818d4:	1909883a 	add	r4,r3,r4
200818d8:	27000005 	stb	fp,0(r4)
200818dc:	df000203 	ldbu	fp,8(sp)
200818e0:	27c00045 	stb	ra,1(r4)
200818e4:	52bfffc4 	addi	r10,r10,-1
200818e8:	27000085 	stb	fp,2(r4)
200818ec:	200000c5 	stb	zero,3(r4)
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = Cr[y][x];
200818f0:	71000003 	ldbu	r4,0(r14)
            pixel.green = Y[y][x];
            pixel.blue = Cb[y][x];
            rgbblock[index] = pixel;
200818f4:	67000003 	ldbu	fp,0(r12)
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = Cr[y][x];
            pixel.green = Y[y][x];
200818f8:	6fc00003 	ldbu	ra,0(r13)
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = Cr[y][x];
200818fc:	d9000205 	stb	r4,8(sp)
            pixel.green = Y[y][x];
            pixel.blue = Cb[y][x];
            rgbblock[index] = pixel;
20081900:	11000304 	addi	r4,r2,12
20081904:	1909883a 	add	r4,r3,r4
20081908:	27000005 	stb	fp,0(r4)
2008190c:	df000203 	ldbu	fp,8(sp)
20081910:	27c00045 	stb	ra,1(r4)
20081914:	200000c5 	stb	zero,3(r4)
20081918:	27000085 	stb	fp,2(r4)
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = Cr[y][x];
2008191c:	59000003 	ldbu	r4,0(r11)
            pixel.green = Y[y][x];
            pixel.blue = Cb[y][x];
            rgbblock[index] = pixel;
20081920:	47000143 	ldbu	fp,5(r8)
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = Cr[y][x];
            pixel.green = Y[y][x];
20081924:	3fc00143 	ldbu	ra,5(r7)
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = Cr[y][x];
20081928:	d9000205 	stb	r4,8(sp)
            pixel.green = Y[y][x];
            pixel.blue = Cb[y][x];
            rgbblock[index] = pixel;
2008192c:	11000404 	addi	r4,r2,16
20081930:	1909883a 	add	r4,r3,r4
20081934:	27000005 	stb	fp,0(r4)
20081938:	df000203 	ldbu	fp,8(sp)
2008193c:	27c00045 	stb	ra,1(r4)
20081940:	200000c5 	stb	zero,3(r4)
20081944:	27000085 	stb	fp,2(r4)
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = Cr[y][x];
20081948:	49000183 	ldbu	r4,6(r9)
            pixel.green = Y[y][x];
            pixel.blue = Cb[y][x];
            rgbblock[index] = pixel;
2008194c:	47000183 	ldbu	fp,6(r8)
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = Cr[y][x];
            pixel.green = Y[y][x];
20081950:	3fc00183 	ldbu	ra,6(r7)
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = Cr[y][x];
20081954:	d9000205 	stb	r4,8(sp)
            pixel.green = Y[y][x];
            pixel.blue = Cb[y][x];
            rgbblock[index] = pixel;
20081958:	11000504 	addi	r4,r2,20
2008195c:	1909883a 	add	r4,r3,r4
20081960:	27000005 	stb	fp,0(r4)
20081964:	df000203 	ldbu	fp,8(sp)
20081968:	27c00045 	stb	ra,1(r4)
2008196c:	200000c5 	stb	zero,3(r4)
20081970:	27000085 	stb	fp,2(r4)
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = Cr[y][x];
            pixel.green = Y[y][x];
20081974:	3f0001c3 	ldbu	fp,7(r7)
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = Cr[y][x];
20081978:	490001c3 	ldbu	r4,7(r9)
            pixel.green = Y[y][x];
            pixel.blue = Cb[y][x];
2008197c:	47c001c3 	ldbu	ra,7(r8)
            rgbblock[index] = pixel;
20081980:	10800604 	addi	r2,r2,24
20081984:	1885883a 	add	r2,r3,r2
20081988:	17000045 	stb	fp,1(r2)
2008198c:	17c00005 	stb	ra,0(r2)
20081990:	11000085 	stb	r4,2(r2)
20081994:	100000c5 	stb	zero,3(r2)
20081998:	d8800117 	ldw	r2,4(sp)
2008199c:	df000017 	ldw	fp,0(sp)
200819a0:	4a400204 	addi	r9,r9,8
200819a4:	39c00204 	addi	r7,r7,8
200819a8:	42000204 	addi	r8,r8,8
200819ac:	308d883a 	add	r6,r6,r2
200819b0:	2f0b883a 	add	r5,r5,fp
200819b4:	bdc00204 	addi	r23,r23,8
200819b8:	b5800204 	addi	r22,r22,8
200819bc:	ad400204 	addi	r21,r21,8
200819c0:	a5000204 	addi	r20,r20,8
200819c4:	9cc00204 	addi	r19,r19,8
200819c8:	94800204 	addi	r18,r18,8
200819cc:	8c400204 	addi	r17,r17,8
200819d0:	84000204 	addi	r16,r16,8
200819d4:	7bc00204 	addi	r15,r15,8
200819d8:	73800204 	addi	r14,r14,8
200819dc:	6b400204 	addi	r13,r13,8
200819e0:	63000204 	addi	r12,r12,8
200819e4:	5ac00204 	addi	r11,r11,8

//null implementation
void ycbcr_to_rgb(int h, int w, uint32_t w_size, pcolor_block_t Y, pcolor_block_t Cb, pcolor_block_t Cr, rgb_pixel_t* rgbblock)
{
    int index;
    for (int y = 0; y < 8; y++){
200819e8:	503f961e 	bne	r10,zero,20081844 <__flash_rwdata_start+0xfffe51fc>
            pixel.blue = Cb[y][x];
            rgbblock[index] = pixel;
            index++;
        }
    }
}
200819ec:	dfc00c17 	ldw	ra,48(sp)
200819f0:	df000b17 	ldw	fp,44(sp)
200819f4:	ddc00a17 	ldw	r23,40(sp)
200819f8:	dd800917 	ldw	r22,36(sp)
200819fc:	dd400817 	ldw	r21,32(sp)
20081a00:	dd000717 	ldw	r20,28(sp)
20081a04:	dcc00617 	ldw	r19,24(sp)
20081a08:	dc800517 	ldw	r18,20(sp)
20081a0c:	dc400417 	ldw	r17,16(sp)
20081a10:	dc000317 	ldw	r16,12(sp)
20081a14:	dec00d04 	addi	sp,sp,52
20081a18:	f800283a 	ret

20081a1c <Fat_Mount>:


FAT_HANDLE Fat_Mount(){
    
    FAT_HANDLE hFat = 0;
    hFat = fatMountSdcard();
20081a1c:	00835dc1 	jmpi	200835dc <fatMountSdcard>

20081a20 <Fat_Unmount>:
    return hFat;      
}

void Fat_Unmount(FAT_HANDLE Fat){
    VOLUME_INFO *pVol = (VOLUME_INFO *)Fat;
    if (!pVol)
20081a20:	20000126 	beq	r4,zero,20081a28 <Fat_Unmount+0x8>
    if (pVol->szFatTable){
        free(pVol->szFatTable);
        pVol->szFatTable = 0;
    }        
#endif //#ifdef FAT_READONLY
    pVol->bMount = FALSE;
20081a24:	20000515 	stw	zero,20(r4)
20081a28:	f800283a 	ret

20081a2c <Fat_Type>:
}   

FAT_TYPE Fat_Type(FAT_HANDLE Fat){
    VOLUME_INFO *pVol = (VOLUME_INFO *)Fat;
    FAT_TYPE Type = FAT_UNKNOWN;
    if (pVol){
20081a2c:	20000826 	beq	r4,zero,20081a50 <Fat_Type+0x24>
        if (pVol->Partition_Type == PARTITION_FAT16)
20081a30:	20800417 	ldw	r2,16(r4)
20081a34:	00c00184 	movi	r3,6
20081a38:	10c00326 	beq	r2,r3,20081a48 <Fat_Type+0x1c>
            Type = FAT_FAT16;
        else if (pVol->Partition_Type == PARTITION_FAT32)
            Type = FAT_FAT32;
20081a3c:	108002e0 	cmpeqi	r2,r2,11
20081a40:	1004907a 	slli	r2,r2,1
20081a44:	f800283a 	ret
FAT_TYPE Fat_Type(FAT_HANDLE Fat){
    VOLUME_INFO *pVol = (VOLUME_INFO *)Fat;
    FAT_TYPE Type = FAT_UNKNOWN;
    if (pVol){
        if (pVol->Partition_Type == PARTITION_FAT16)
            Type = FAT_FAT16;
20081a48:	00800044 	movi	r2,1
        else if (pVol->Partition_Type == PARTITION_FAT32)
            Type = FAT_FAT32;
    }
    return Type;        
}
20081a4c:	f800283a 	ret
    //free(pVol);
}   

FAT_TYPE Fat_Type(FAT_HANDLE Fat){
    VOLUME_INFO *pVol = (VOLUME_INFO *)Fat;
    FAT_TYPE Type = FAT_UNKNOWN;
20081a50:	0005883a 	mov	r2,zero
20081a54:	f800283a 	ret

20081a58 <Fat_FileBrowseBegin>:
    return Type;        
}

bool Fat_FileBrowseBegin(FAT_HANDLE hFat, FAT_BROWSE_HANDLE *pFatBrowseHandle){
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
    if (!pVol)
20081a58:	20000726 	beq	r4,zero,20081a78 <Fat_FileBrowseBegin+0x20>
        return FALSE;
    if (!pVol->bMount)
20081a5c:	20800517 	ldw	r2,20(r4)
20081a60:	10000626 	beq	r2,zero,20081a7c <Fat_FileBrowseBegin+0x24>
        return FALSE;
    pFatBrowseHandle->DirectoryIndex = -1;
20081a64:	00bfffc4 	movi	r2,-1
20081a68:	28800015 	stw	r2,0(r5)
    pFatBrowseHandle->hFat = hFat;
20081a6c:	29000115 	stw	r4,4(r5)
    return TRUE;
20081a70:	00800044 	movi	r2,1
20081a74:	f800283a 	ret
}

bool Fat_FileBrowseBegin(FAT_HANDLE hFat, FAT_BROWSE_HANDLE *pFatBrowseHandle){
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
    if (!pVol)
        return FALSE;
20081a78:	0005883a 	mov	r2,zero
    if (!pVol->bMount)
        return FALSE;
    pFatBrowseHandle->DirectoryIndex = -1;
    pFatBrowseHandle->hFat = hFat;
    return TRUE;
}
20081a7c:	f800283a 	ret

20081a80 <Fat_FileBrowseNext>:

bool Fat_FileBrowseNext(FAT_BROWSE_HANDLE *pFatBrowseHandle, FILE_CONTEXT *pFileContext){
20081a80:	defff804 	addi	sp,sp,-32
20081a84:	dc800215 	stw	r18,8(sp)
    bool bFind = FALSE, bError=FALSE, bLongFilename = FALSE;
    int OrderValue = 0;
    FAT_DIRECTORY *pDir;
    //unsigned int nSecter, nSecterOffset,nByteOffset;
    VOLUME_INFO *pVol = (VOLUME_INFO *)pFatBrowseHandle->hFat;
20081a88:	24800117 	ldw	r18,4(r4)
    pFatBrowseHandle->DirectoryIndex = -1;
    pFatBrowseHandle->hFat = hFat;
    return TRUE;
}

bool Fat_FileBrowseNext(FAT_BROWSE_HANDLE *pFatBrowseHandle, FILE_CONTEXT *pFileContext){
20081a8c:	dfc00715 	stw	ra,28(sp)
20081a90:	dd800615 	stw	r22,24(sp)
20081a94:	dd400515 	stw	r21,20(sp)
20081a98:	dd000415 	stw	r20,16(sp)
20081a9c:	dcc00315 	stw	r19,12(sp)
20081aa0:	dc400115 	stw	r17,4(sp)
20081aa4:	dc000015 	stw	r16,0(sp)
    int OrderValue = 0;
    FAT_DIRECTORY *pDir;
    //unsigned int nSecter, nSecterOffset,nByteOffset;
    VOLUME_INFO *pVol = (VOLUME_INFO *)pFatBrowseHandle->hFat;
    
    if (!pVol)
20081aa8:	90001426 	beq	r18,zero,20081afc <Fat_FileBrowseNext+0x7c>
        return FALSE;    
    
    if (!pVol->bMount)
20081aac:	90800517 	ldw	r2,20(r18)
20081ab0:	10001a26 	beq	r2,zero,20081b1c <Fat_FileBrowseNext+0x9c>
20081ab4:	2827883a 	mov	r19,r5
20081ab8:	2023883a 	mov	r17,r4
20081abc:	002d883a 	mov	r22,zero
20081ac0:	0029883a 	mov	r20,zero
        if (!pDir)
            bError = TRUE;
            
        if (!bError){                        
            if (fatIsValidDir(pDir) && !fatIsUnusedDir(pDir)){
                if ((pDir->Attribute & ATTR_LONG_NAME) == ATTR_LONG_NAME){
20081ac4:	054003c4 	movi	r21,15
    if (!pVol->bMount)
        return FALSE;
    
    
    do{  // search Directory Table
        pFatBrowseHandle->DirectoryIndex++;        
20081ac8:	89400017 	ldw	r5,0(r17)
        pDir = fatFindDirectory(pVol,pFatBrowseHandle->DirectoryIndex);
20081acc:	9009883a 	mov	r4,r18
    if (!pVol->bMount)
        return FALSE;
    
    
    do{  // search Directory Table
        pFatBrowseHandle->DirectoryIndex++;        
20081ad0:	29400044 	addi	r5,r5,1
20081ad4:	89400015 	stw	r5,0(r17)
        pDir = fatFindDirectory(pVol,pFatBrowseHandle->DirectoryIndex);
20081ad8:	00832640 	call	20083264 <fatFindDirectory>
20081adc:	1021883a 	mov	r16,r2
        if (!pDir)
20081ae0:	10000b26 	beq	r2,zero,20081b10 <Fat_FileBrowseNext+0x90>
            bError = TRUE;
            
        if (!bError){                        
            if (fatIsValidDir(pDir) && !fatIsUnusedDir(pDir)){
20081ae4:	1009883a 	mov	r4,r2
20081ae8:	00830a80 	call	200830a8 <fatIsValidDir>
20081aec:	1000151e 	bne	r2,zero,20081b44 <Fat_FileBrowseNext+0xc4>
                        pFileContext->FileSize = pDir->FileSize;
                    }                        
                }                    
            }                
        }            
    }while (!bFind && !fatIsLastDir(pDir) && !bError);
20081af0:	8009883a 	mov	r4,r16
20081af4:	008309c0 	call	2008309c <fatIsLastDir>
20081af8:	103ff326 	beq	r2,zero,20081ac8 <__flash_rwdata_start+0xfffe5480>
20081afc:	0005883a 	mov	r2,zero
20081b00:	00000606 	br	20081b1c <Fat_FileBrowseNext+0x9c>
                                bError = TRUE;
                            else
                                OrderValue = pLDIR->LDIR_Ord & 0x3F;
                            memset(pFileContext->szName, 0, sizeof(pFileContext->szName));        
                        }else{
                            if ((pLDIR->LDIR_Ord & 0x3F) != OrderValue)
20081b04:	80800003 	ldbu	r2,0(r16)
20081b08:	10800fcc 	andi	r2,r2,63
20081b0c:	1580bf26 	beq	r2,r22,20081e0c <Fat_FileBrowseNext+0x38c>
                        pFileContext->FileSize = pDir->FileSize;
                    }                        
                }                    
            }                
        }            
    }while (!bFind && !fatIsLastDir(pDir) && !bError);
20081b10:	8009883a 	mov	r4,r16
20081b14:	008309c0 	call	2008309c <fatIsLastDir>
20081b18:	0005883a 	mov	r2,zero
    
    return bFind;
    
}
20081b1c:	dfc00717 	ldw	ra,28(sp)
20081b20:	dd800617 	ldw	r22,24(sp)
20081b24:	dd400517 	ldw	r21,20(sp)
20081b28:	dd000417 	ldw	r20,16(sp)
20081b2c:	dcc00317 	ldw	r19,12(sp)
20081b30:	dc800217 	ldw	r18,8(sp)
20081b34:	dc400117 	ldw	r17,4(sp)
20081b38:	dc000017 	ldw	r16,0(sp)
20081b3c:	dec00804 	addi	sp,sp,32
20081b40:	f800283a 	ret
        pDir = fatFindDirectory(pVol,pFatBrowseHandle->DirectoryIndex);
        if (!pDir)
            bError = TRUE;
            
        if (!bError){                        
            if (fatIsValidDir(pDir) && !fatIsUnusedDir(pDir)){
20081b44:	8009883a 	mov	r4,r16
20081b48:	008317c0 	call	2008317c <fatIsUnusedDir>
20081b4c:	103fe81e 	bne	r2,zero,20081af0 <__flash_rwdata_start+0xfffe54a8>
                if ((pDir->Attribute & ATTR_LONG_NAME) == ATTR_LONG_NAME){
20081b50:	808002c3 	ldbu	r2,11(r16)
20081b54:	10c003cc 	andi	r3,r2,15
20081b58:	1d40a426 	beq	r3,r21,20081dec <Fat_FileBrowseNext+0x36c>
                        memcpy(pFileContext->szName+BaseOffset, pLDIR->LDIR_Name1, 10);
                        memcpy(pFileContext->szName+BaseOffset+10, pLDIR->LDIR_Name2, 12);
                        memcpy(pFileContext->szName+BaseOffset+22, pLDIR->LDIR_Name3, 4);
                    }                        
                }else{
                    if (bLongFilename){
20081b5c:	a0004126 	beq	r20,zero,20081c64 <Fat_FileBrowseNext+0x1e4>
                        pFileContext->Attribute = ATTR_LONG_NAME;
20081b60:	008003c4 	movi	r2,15
20081b64:	98804505 	stb	r2,276(r19)
                        if ((pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY)) == 0)
20081b68:	808002c3 	ldbu	r2,11(r16)
20081b6c:	10800c0c 	andi	r2,r2,48
20081b70:	103fe726 	beq	r2,zero,20081b10 <__flash_rwdata_start+0xfffe54c8>
                        bFind = TRUE;
                    }
                    
                    if (bFind){
                        // my ext
                        pFileContext->bLongFilename = bLongFilename;
20081b74:	9d004015 	stw	r20,256(r19)
                        pFileContext->bFile = (pDir->Attribute & ATTR_ARCHIVE)?TRUE:FALSE;
20081b78:	80c002c3 	ldbu	r3,11(r16)
                        pFileContext->LastAccessDate = pDir->LastAccessDate;
                        pFileContext->FirstLogicalClusterHi = pDir->FirstLogicalClusterHi;
                        pFileContext->LastWriteTime = pDir->LastWriteTime;
                        pFileContext->LastWriteDate = pDir->LastWriteDate;
                        pFileContext->FirstLogicalCluster = pDir->FirstLogicalCluster;
                        pFileContext->FileSize = pDir->FileSize;
20081b7c:	00800044 	movi	r2,1
                        // my ext
                        pFileContext->bLongFilename = bLongFilename;
                        pFileContext->bFile = (pDir->Attribute & ATTR_ARCHIVE)?TRUE:FALSE;
                        pFileContext->bDirectory = (pDir->Attribute & ATTR_DIRECTORY)?TRUE:FALSE;
                        pFileContext->bVolume = (pDir->Attribute & ATTR_VOLUME_ID)?TRUE:FALSE;
                        pFileContext->DirEntryIndex = pFatBrowseHandle->DirectoryIndex; // add in v2.0.0
20081b80:	89000017 	ldw	r4,0(r17)
                    }
                    
                    if (bFind){
                        // my ext
                        pFileContext->bLongFilename = bLongFilename;
                        pFileContext->bFile = (pDir->Attribute & ATTR_ARCHIVE)?TRUE:FALSE;
20081b84:	1806d17a 	srli	r3,r3,5
20081b88:	1886703a 	and	r3,r3,r2
20081b8c:	98c04115 	stw	r3,260(r19)
                        pFileContext->bDirectory = (pDir->Attribute & ATTR_DIRECTORY)?TRUE:FALSE;
20081b90:	80c002c3 	ldbu	r3,11(r16)
20081b94:	1806d13a 	srli	r3,r3,4
20081b98:	1886703a 	and	r3,r3,r2
20081b9c:	98c04215 	stw	r3,264(r19)
                        pFileContext->bVolume = (pDir->Attribute & ATTR_VOLUME_ID)?TRUE:FALSE;
20081ba0:	80c002c3 	ldbu	r3,11(r16)
                        pFileContext->DirEntryIndex = pFatBrowseHandle->DirectoryIndex; // add in v2.0.0
20081ba4:	99004415 	stw	r4,272(r19)
                    if (bFind){
                        // my ext
                        pFileContext->bLongFilename = bLongFilename;
                        pFileContext->bFile = (pDir->Attribute & ATTR_ARCHIVE)?TRUE:FALSE;
                        pFileContext->bDirectory = (pDir->Attribute & ATTR_DIRECTORY)?TRUE:FALSE;
                        pFileContext->bVolume = (pDir->Attribute & ATTR_VOLUME_ID)?TRUE:FALSE;
20081ba8:	1806d0fa 	srli	r3,r3,3
20081bac:	1886703a 	and	r3,r3,r2
20081bb0:	98c04315 	stw	r3,268(r19)
                        pFileContext->DirEntryIndex = pFatBrowseHandle->DirectoryIndex; // add in v2.0.0
                        
                        //
                        pFileContext->Attribute = pDir->Attribute;
20081bb4:	80c002c3 	ldbu	r3,11(r16)
20081bb8:	98c04505 	stb	r3,276(r19)
                        pFileContext->CreateTime = pDir->CreateTime;
20081bbc:	80c003c3 	ldbu	r3,15(r16)
20081bc0:	81000383 	ldbu	r4,14(r16)
20081bc4:	1806923a 	slli	r3,r3,8
20081bc8:	1906b03a 	or	r3,r3,r4
20081bcc:	98c0458d 	sth	r3,278(r19)
                        pFileContext->LastAccessDate = pDir->LastAccessDate;
20081bd0:	80c004c3 	ldbu	r3,19(r16)
20081bd4:	81000483 	ldbu	r4,18(r16)
20081bd8:	1806923a 	slli	r3,r3,8
20081bdc:	1906b03a 	or	r3,r3,r4
20081be0:	98c0468d 	sth	r3,282(r19)
                        pFileContext->FirstLogicalClusterHi = pDir->FirstLogicalClusterHi;
20081be4:	80c00543 	ldbu	r3,21(r16)
20081be8:	81000503 	ldbu	r4,20(r16)
20081bec:	1806923a 	slli	r3,r3,8
20081bf0:	1906b03a 	or	r3,r3,r4
20081bf4:	98c0470d 	sth	r3,284(r19)
                        pFileContext->LastWriteTime = pDir->LastWriteTime;
20081bf8:	80c005c3 	ldbu	r3,23(r16)
20081bfc:	81000583 	ldbu	r4,22(r16)
20081c00:	1806923a 	slli	r3,r3,8
20081c04:	1906b03a 	or	r3,r3,r4
20081c08:	98c0478d 	sth	r3,286(r19)
                        pFileContext->LastWriteDate = pDir->LastWriteDate;
20081c0c:	80c00643 	ldbu	r3,25(r16)
20081c10:	81000603 	ldbu	r4,24(r16)
20081c14:	1806923a 	slli	r3,r3,8
20081c18:	1906b03a 	or	r3,r3,r4
20081c1c:	98c0480d 	sth	r3,288(r19)
                        pFileContext->FirstLogicalCluster = pDir->FirstLogicalCluster;
20081c20:	80c006c3 	ldbu	r3,27(r16)
20081c24:	81000683 	ldbu	r4,26(r16)
20081c28:	1806923a 	slli	r3,r3,8
20081c2c:	1906b03a 	or	r3,r3,r4
20081c30:	98c0488d 	sth	r3,290(r19)
                        pFileContext->FileSize = pDir->FileSize;
20081c34:	81000743 	ldbu	r4,29(r16)
20081c38:	80c00783 	ldbu	r3,30(r16)
20081c3c:	818007c3 	ldbu	r6,31(r16)
20081c40:	81400703 	ldbu	r5,28(r16)
20081c44:	2008923a 	slli	r4,r4,8
20081c48:	1806943a 	slli	r3,r3,16
20081c4c:	300c963a 	slli	r6,r6,24
20081c50:	2148b03a 	or	r4,r4,r5
20081c54:	1906b03a 	or	r3,r3,r4
20081c58:	30c6b03a 	or	r3,r6,r3
20081c5c:	98c04915 	stw	r3,292(r19)
20081c60:	003fae06 	br	20081b1c <__flash_rwdata_start+0xfffe54d4>

void fatComposeShortFilename(FAT_DIRECTORY *pDir, char *szFilename){
    int i,nPos=0;
    
    i=0;
    while(i < 8 && pDir->Name[i] != 0 && pDir->Name[i] != ' ')
20081c64:	81400003 	ldbu	r5,0(r16)
20081c68:	00fff7c4 	movi	r3,-33
20081c6c:	28c8703a 	and	r4,r5,r3
20081c70:	21003fcc 	andi	r4,r4,255
20081c74:	2100201c 	xori	r4,r4,128
20081c78:	213fe004 	addi	r4,r4,-128
20081c7c:	2000b226 	beq	r4,zero,20081f48 <Fat_FileBrowseNext+0x4c8>
        szFilename[nPos++] = pDir->Name[i++];
20081c80:	99400005 	stb	r5,0(r19)

void fatComposeShortFilename(FAT_DIRECTORY *pDir, char *szFilename){
    int i,nPos=0;
    
    i=0;
    while(i < 8 && pDir->Name[i] != 0 && pDir->Name[i] != ' ')
20081c84:	81000043 	ldbu	r4,1(r16)
20081c88:	20c4703a 	and	r2,r4,r3
20081c8c:	10803fcc 	andi	r2,r2,255
20081c90:	1080201c 	xori	r2,r2,128
20081c94:	10bfe004 	addi	r2,r2,-128
20081c98:	1000b126 	beq	r2,zero,20081f60 <Fat_FileBrowseNext+0x4e0>
        szFilename[nPos++] = pDir->Name[i++];
20081c9c:	99000045 	stb	r4,1(r19)

void fatComposeShortFilename(FAT_DIRECTORY *pDir, char *szFilename){
    int i,nPos=0;
    
    i=0;
    while(i < 8 && pDir->Name[i] != 0 && pDir->Name[i] != ' ')
20081ca0:	81000083 	ldbu	r4,2(r16)
20081ca4:	20c4703a 	and	r2,r4,r3
20081ca8:	10803fcc 	andi	r2,r2,255
20081cac:	1080201c 	xori	r2,r2,128
20081cb0:	10bfe004 	addi	r2,r2,-128
20081cb4:	10009526 	beq	r2,zero,20081f0c <Fat_FileBrowseNext+0x48c>
        szFilename[nPos++] = pDir->Name[i++];
20081cb8:	99000085 	stb	r4,2(r19)

void fatComposeShortFilename(FAT_DIRECTORY *pDir, char *szFilename){
    int i,nPos=0;
    
    i=0;
    while(i < 8 && pDir->Name[i] != 0 && pDir->Name[i] != ' ')
20081cbc:	810000c3 	ldbu	r4,3(r16)
20081cc0:	20c4703a 	and	r2,r4,r3
20081cc4:	10803fcc 	andi	r2,r2,255
20081cc8:	1080201c 	xori	r2,r2,128
20081ccc:	10bfe004 	addi	r2,r2,-128
20081cd0:	1000bf26 	beq	r2,zero,20081fd0 <Fat_FileBrowseNext+0x550>
        szFilename[nPos++] = pDir->Name[i++];
20081cd4:	990000c5 	stb	r4,3(r19)

void fatComposeShortFilename(FAT_DIRECTORY *pDir, char *szFilename){
    int i,nPos=0;
    
    i=0;
    while(i < 8 && pDir->Name[i] != 0 && pDir->Name[i] != ' ')
20081cd8:	81000103 	ldbu	r4,4(r16)
20081cdc:	20c4703a 	and	r2,r4,r3
20081ce0:	10803fcc 	andi	r2,r2,255
20081ce4:	1080201c 	xori	r2,r2,128
20081ce8:	10bfe004 	addi	r2,r2,-128
20081cec:	1000b126 	beq	r2,zero,20081fb4 <Fat_FileBrowseNext+0x534>
        szFilename[nPos++] = pDir->Name[i++];
20081cf0:	99000105 	stb	r4,4(r19)

void fatComposeShortFilename(FAT_DIRECTORY *pDir, char *szFilename){
    int i,nPos=0;
    
    i=0;
    while(i < 8 && pDir->Name[i] != 0 && pDir->Name[i] != ' ')
20081cf4:	81000143 	ldbu	r4,5(r16)
20081cf8:	00bff7c4 	movi	r2,-33
20081cfc:	2086703a 	and	r3,r4,r2
20081d00:	18c03fcc 	andi	r3,r3,255
20081d04:	18c0201c 	xori	r3,r3,128
20081d08:	18ffe004 	addi	r3,r3,-128
20081d0c:	1800a226 	beq	r3,zero,20081f98 <Fat_FileBrowseNext+0x518>
        szFilename[nPos++] = pDir->Name[i++];
20081d10:	99000145 	stb	r4,5(r19)

void fatComposeShortFilename(FAT_DIRECTORY *pDir, char *szFilename){
    int i,nPos=0;
    
    i=0;
    while(i < 8 && pDir->Name[i] != 0 && pDir->Name[i] != ' ')
20081d14:	81000183 	ldbu	r4,6(r16)
20081d18:	2086703a 	and	r3,r4,r2
20081d1c:	18c03fcc 	andi	r3,r3,255
20081d20:	18c0201c 	xori	r3,r3,128
20081d24:	18ffe004 	addi	r3,r3,-128
20081d28:	18009426 	beq	r3,zero,20081f7c <Fat_FileBrowseNext+0x4fc>
        szFilename[nPos++] = pDir->Name[i++];
20081d2c:	99000185 	stb	r4,6(r19)

void fatComposeShortFilename(FAT_DIRECTORY *pDir, char *szFilename){
    int i,nPos=0;
    
    i=0;
    while(i < 8 && pDir->Name[i] != 0 && pDir->Name[i] != ' ')
20081d30:	80c001c3 	ldbu	r3,7(r16)
20081d34:	1884703a 	and	r2,r3,r2
20081d38:	10803fcc 	andi	r2,r2,255
20081d3c:	1080201c 	xori	r2,r2,128
20081d40:	10bfe004 	addi	r2,r2,-128
20081d44:	1000a926 	beq	r2,zero,20081fec <Fat_FileBrowseNext+0x56c>
        szFilename[nPos++] = pDir->Name[i++];
20081d48:	98c001c5 	stb	r3,7(r19)
20081d4c:	808002c3 	ldbu	r2,11(r16)
20081d50:	01c00304 	movi	r7,12
20081d54:	018002c4 	movi	r6,11
20081d58:	01400284 	movi	r5,10
20081d5c:	01000244 	movi	r4,9
20081d60:	00c00204 	movi	r3,8
    
    if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY)){
20081d64:	10800c0c 	andi	r2,r2,48
20081d68:	10001d26 	beq	r2,zero,20081de0 <Fat_FileBrowseNext+0x360>
        if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY))     
            szFilename[nPos++] = '.';   
20081d6c:	98c7883a 	add	r3,r19,r3
20081d70:	00800b84 	movi	r2,46
20081d74:	18800005 	stb	r2,0(r3)
        i=0;
        while(i < 3 && pDir->Extension[i] != 0 && pDir->Extension[i] != ' ')
20081d78:	80c00203 	ldbu	r3,8(r16)
20081d7c:	00bff7c4 	movi	r2,-33
20081d80:	1890703a 	and	r8,r3,r2
20081d84:	42003fcc 	andi	r8,r8,255
20081d88:	4200201c 	xori	r8,r8,128
20081d8c:	423fe004 	addi	r8,r8,-128
20081d90:	4000a126 	beq	r8,zero,20082018 <Fat_FileBrowseNext+0x598>
            szFilename[nPos++] = pDir->Extension[i++];
20081d94:	9909883a 	add	r4,r19,r4
20081d98:	20c00005 	stb	r3,0(r4)
    
    if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY)){
        if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY))     
            szFilename[nPos++] = '.';   
        i=0;
        while(i < 3 && pDir->Extension[i] != 0 && pDir->Extension[i] != ' ')
20081d9c:	81000243 	ldbu	r4,9(r16)
20081da0:	2086703a 	and	r3,r4,r2
20081da4:	18c03fcc 	andi	r3,r3,255
20081da8:	18c0201c 	xori	r3,r3,128
20081dac:	18ffe004 	addi	r3,r3,-128
20081db0:	18009526 	beq	r3,zero,20082008 <Fat_FileBrowseNext+0x588>
            szFilename[nPos++] = pDir->Extension[i++];
20081db4:	994b883a 	add	r5,r19,r5
20081db8:	29000005 	stb	r4,0(r5)
    
    if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY)){
        if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY))     
            szFilename[nPos++] = '.';   
        i=0;
        while(i < 3 && pDir->Extension[i] != 0 && pDir->Extension[i] != ' ')
20081dbc:	80c00283 	ldbu	r3,10(r16)
20081dc0:	1884703a 	and	r2,r3,r2
20081dc4:	10803fcc 	andi	r2,r2,255
20081dc8:	1080201c 	xori	r2,r2,128
20081dcc:	10bfe004 	addi	r2,r2,-128
20081dd0:	10008f26 	beq	r2,zero,20082010 <Fat_FileBrowseNext+0x590>
            szFilename[nPos++] = pDir->Extension[i++];
20081dd4:	998d883a 	add	r6,r19,r6
20081dd8:	30c00005 	stb	r3,0(r6)
20081ddc:	3807883a 	mov	r3,r7
    }            
    szFilename[nPos++] = 0;
20081de0:	98c7883a 	add	r3,r19,r3
20081de4:	18000005 	stb	zero,0(r3)
20081de8:	003f6206 	br	20081b74 <__flash_rwdata_start+0xfffe552c>
                    // check attribute
                    if ((pLDIR->LDIR_Attr & ATTR_LONG_NAME) != ATTR_LONG_NAME){
                        bError = TRUE;
                    }else{                        
                        // check order
                        if (OrderValue == 0){
20081dec:	b03f451e 	bne	r22,zero,20081b04 <__flash_rwdata_start+0xfffe54bc>
                            // last entry
                            if (bLongFilename || ((OrderValue & LAST_LONG_ENTRY) != OrderValue))
20081df0:	a0004d1e 	bne	r20,zero,20081f28 <Fat_FileBrowseNext+0x4a8>
                                bError = TRUE;
                            else
                                OrderValue = pLDIR->LDIR_Ord & 0x3F;
20081df4:	85800003 	ldbu	r22,0(r16)
                            memset(pFileContext->szName, 0, sizeof(pFileContext->szName));        
20081df8:	9809883a 	mov	r4,r19
20081dfc:	000b883a 	mov	r5,zero
20081e00:	01804004 	movi	r6,256
                        if (OrderValue == 0){
                            // last entry
                            if (bLongFilename || ((OrderValue & LAST_LONG_ENTRY) != OrderValue))
                                bError = TRUE;
                            else
                                OrderValue = pLDIR->LDIR_Ord & 0x3F;
20081e04:	b5800fcc 	andi	r22,r22,63
                            memset(pFileContext->szName, 0, sizeof(pFileContext->szName));        
20081e08:	008a3180 	call	2008a318 <memset>
                    
                    //                        
                    if (!bError){
                        int BaseOffset;
                        bLongFilename = TRUE;
                        OrderValue--;
20081e0c:	b5bfffc4 	addi	r22,r22,-1
                        BaseOffset = OrderValue * 26;
20081e10:	b10006a4 	muli	r4,r22,26
                        // cast filename
                        memcpy(pFileContext->szName+BaseOffset, pLDIR->LDIR_Name1, 10);
20081e14:	81800044 	addi	r6,r16,1
20081e18:	30800003 	ldbu	r2,0(r6)
20081e1c:	990b883a 	add	r5,r19,r4
                        memcpy(pFileContext->szName+BaseOffset+10, pLDIR->LDIR_Name2, 12);
20081e20:	80c00384 	addi	r3,r16,14
                        int BaseOffset;
                        bLongFilename = TRUE;
                        OrderValue--;
                        BaseOffset = OrderValue * 26;
                        // cast filename
                        memcpy(pFileContext->szName+BaseOffset, pLDIR->LDIR_Name1, 10);
20081e24:	28800005 	stb	r2,0(r5)
20081e28:	81c00083 	ldbu	r7,2(r16)
                        memcpy(pFileContext->szName+BaseOffset+10, pLDIR->LDIR_Name2, 12);
20081e2c:	20800284 	addi	r2,r4,10
20081e30:	9885883a 	add	r2,r19,r2
                        int BaseOffset;
                        bLongFilename = TRUE;
                        OrderValue--;
                        BaseOffset = OrderValue * 26;
                        // cast filename
                        memcpy(pFileContext->szName+BaseOffset, pLDIR->LDIR_Name1, 10);
20081e34:	29c00045 	stb	r7,1(r5)
20081e38:	820000c3 	ldbu	r8,3(r16)
                        memcpy(pFileContext->szName+BaseOffset+10, pLDIR->LDIR_Name2, 12);
                        memcpy(pFileContext->szName+BaseOffset+22, pLDIR->LDIR_Name3, 4);
20081e3c:	81c00704 	addi	r7,r16,28
20081e40:	21000584 	addi	r4,r4,22
                        int BaseOffset;
                        bLongFilename = TRUE;
                        OrderValue--;
                        BaseOffset = OrderValue * 26;
                        // cast filename
                        memcpy(pFileContext->szName+BaseOffset, pLDIR->LDIR_Name1, 10);
20081e44:	2a000085 	stb	r8,2(r5)
20081e48:	82000103 	ldbu	r8,4(r16)
                        memcpy(pFileContext->szName+BaseOffset+10, pLDIR->LDIR_Name2, 12);
                        memcpy(pFileContext->szName+BaseOffset+22, pLDIR->LDIR_Name3, 4);
20081e4c:	9909883a 	add	r4,r19,r4
                    }
                    
                    //                        
                    if (!bError){
                        int BaseOffset;
                        bLongFilename = TRUE;
20081e50:	05000044 	movi	r20,1
                        OrderValue--;
                        BaseOffset = OrderValue * 26;
                        // cast filename
                        memcpy(pFileContext->szName+BaseOffset, pLDIR->LDIR_Name1, 10);
20081e54:	2a0000c5 	stb	r8,3(r5)
20081e58:	82000143 	ldbu	r8,5(r16)
20081e5c:	2a000105 	stb	r8,4(r5)
20081e60:	82000183 	ldbu	r8,6(r16)
20081e64:	2a000145 	stb	r8,5(r5)
20081e68:	820001c3 	ldbu	r8,7(r16)
20081e6c:	2a000185 	stb	r8,6(r5)
20081e70:	82000203 	ldbu	r8,8(r16)
20081e74:	2a0001c5 	stb	r8,7(r5)
20081e78:	82000243 	ldbu	r8,9(r16)
20081e7c:	2a000205 	stb	r8,8(r5)
20081e80:	81800283 	ldbu	r6,10(r16)
20081e84:	29800245 	stb	r6,9(r5)
                        memcpy(pFileContext->szName+BaseOffset+10, pLDIR->LDIR_Name2, 12);
20081e88:	19400003 	ldbu	r5,0(r3)
20081e8c:	11400005 	stb	r5,0(r2)
20081e90:	814003c3 	ldbu	r5,15(r16)
20081e94:	11400045 	stb	r5,1(r2)
20081e98:	81400403 	ldbu	r5,16(r16)
20081e9c:	11400085 	stb	r5,2(r2)
20081ea0:	81400443 	ldbu	r5,17(r16)
20081ea4:	114000c5 	stb	r5,3(r2)
20081ea8:	81400483 	ldbu	r5,18(r16)
20081eac:	11400105 	stb	r5,4(r2)
20081eb0:	814004c3 	ldbu	r5,19(r16)
20081eb4:	11400145 	stb	r5,5(r2)
20081eb8:	81400503 	ldbu	r5,20(r16)
20081ebc:	11400185 	stb	r5,6(r2)
20081ec0:	81400543 	ldbu	r5,21(r16)
20081ec4:	114001c5 	stb	r5,7(r2)
20081ec8:	81400583 	ldbu	r5,22(r16)
20081ecc:	11400205 	stb	r5,8(r2)
20081ed0:	814005c3 	ldbu	r5,23(r16)
20081ed4:	11400245 	stb	r5,9(r2)
20081ed8:	81400603 	ldbu	r5,24(r16)
20081edc:	11400285 	stb	r5,10(r2)
20081ee0:	80c00643 	ldbu	r3,25(r16)
20081ee4:	10c002c5 	stb	r3,11(r2)
                        memcpy(pFileContext->szName+BaseOffset+22, pLDIR->LDIR_Name3, 4);
20081ee8:	38800003 	ldbu	r2,0(r7)
20081eec:	20800005 	stb	r2,0(r4)
20081ef0:	80800743 	ldbu	r2,29(r16)
20081ef4:	20800045 	stb	r2,1(r4)
20081ef8:	80800783 	ldbu	r2,30(r16)
20081efc:	20800085 	stb	r2,2(r4)
20081f00:	808007c3 	ldbu	r2,31(r16)
20081f04:	208000c5 	stb	r2,3(r4)
20081f08:	003ef906 	br	20081af0 <__flash_rwdata_start+0xfffe54a8>
20081f0c:	808002c3 	ldbu	r2,11(r16)

void fatComposeShortFilename(FAT_DIRECTORY *pDir, char *szFilename){
    int i,nPos=0;
    
    i=0;
    while(i < 8 && pDir->Name[i] != 0 && pDir->Name[i] != ' ')
20081f10:	01c00184 	movi	r7,6
20081f14:	01800144 	movi	r6,5
20081f18:	01400104 	movi	r5,4
20081f1c:	010000c4 	movi	r4,3
20081f20:	00c00084 	movi	r3,2
20081f24:	003f8f06 	br	20081d64 <__flash_rwdata_start+0xfffe571c>
                            // last entry
                            if (bLongFilename || ((OrderValue & LAST_LONG_ENTRY) != OrderValue))
                                bError = TRUE;
                            else
                                OrderValue = pLDIR->LDIR_Ord & 0x3F;
                            memset(pFileContext->szName, 0, sizeof(pFileContext->szName));        
20081f28:	000b883a 	mov	r5,zero
20081f2c:	01804004 	movi	r6,256
20081f30:	9809883a 	mov	r4,r19
20081f34:	008a3180 	call	2008a318 <memset>
                        pFileContext->FileSize = pDir->FileSize;
                    }                        
                }                    
            }                
        }            
    }while (!bFind && !fatIsLastDir(pDir) && !bError);
20081f38:	8009883a 	mov	r4,r16
20081f3c:	008309c0 	call	2008309c <fatIsLastDir>
20081f40:	0005883a 	mov	r2,zero
20081f44:	003ef506 	br	20081b1c <__flash_rwdata_start+0xfffe54d4>

void fatComposeShortFilename(FAT_DIRECTORY *pDir, char *szFilename){
    int i,nPos=0;
    
    i=0;
    while(i < 8 && pDir->Name[i] != 0 && pDir->Name[i] != ' ')
20081f48:	01c00104 	movi	r7,4
20081f4c:	018000c4 	movi	r6,3
20081f50:	01400084 	movi	r5,2
20081f54:	01000044 	movi	r4,1
20081f58:	0007883a 	mov	r3,zero
20081f5c:	003f8106 	br	20081d64 <__flash_rwdata_start+0xfffe571c>
20081f60:	808002c3 	ldbu	r2,11(r16)
20081f64:	01c00144 	movi	r7,5
20081f68:	01800104 	movi	r6,4
20081f6c:	014000c4 	movi	r5,3
20081f70:	01000084 	movi	r4,2
20081f74:	00c00044 	movi	r3,1
20081f78:	003f7a06 	br	20081d64 <__flash_rwdata_start+0xfffe571c>
20081f7c:	808002c3 	ldbu	r2,11(r16)
20081f80:	01c00284 	movi	r7,10
20081f84:	01800244 	movi	r6,9
20081f88:	01400204 	movi	r5,8
20081f8c:	010001c4 	movi	r4,7
20081f90:	00c00184 	movi	r3,6
20081f94:	003f7306 	br	20081d64 <__flash_rwdata_start+0xfffe571c>
20081f98:	808002c3 	ldbu	r2,11(r16)
20081f9c:	01c00244 	movi	r7,9
20081fa0:	01800204 	movi	r6,8
20081fa4:	014001c4 	movi	r5,7
20081fa8:	01000184 	movi	r4,6
20081fac:	00c00144 	movi	r3,5
20081fb0:	003f6c06 	br	20081d64 <__flash_rwdata_start+0xfffe571c>
20081fb4:	808002c3 	ldbu	r2,11(r16)
20081fb8:	01c00204 	movi	r7,8
20081fbc:	018001c4 	movi	r6,7
20081fc0:	01400184 	movi	r5,6
20081fc4:	01000144 	movi	r4,5
20081fc8:	00c00104 	movi	r3,4
20081fcc:	003f6506 	br	20081d64 <__flash_rwdata_start+0xfffe571c>
20081fd0:	808002c3 	ldbu	r2,11(r16)
20081fd4:	01c001c4 	movi	r7,7
20081fd8:	01800184 	movi	r6,6
20081fdc:	01400144 	movi	r5,5
20081fe0:	01000104 	movi	r4,4
20081fe4:	00c000c4 	movi	r3,3
20081fe8:	003f5e06 	br	20081d64 <__flash_rwdata_start+0xfffe571c>
20081fec:	808002c3 	ldbu	r2,11(r16)
20081ff0:	01c002c4 	movi	r7,11
20081ff4:	01800284 	movi	r6,10
20081ff8:	01400244 	movi	r5,9
20081ffc:	01000204 	movi	r4,8
20082000:	00c001c4 	movi	r3,7
20082004:	003f5706 	br	20081d64 <__flash_rwdata_start+0xfffe571c>
    
    if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY)){
        if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY))     
            szFilename[nPos++] = '.';   
        i=0;
        while(i < 3 && pDir->Extension[i] != 0 && pDir->Extension[i] != ' ')
20082008:	2807883a 	mov	r3,r5
2008200c:	003f7406 	br	20081de0 <__flash_rwdata_start+0xfffe5798>
20082010:	3007883a 	mov	r3,r6
20082014:	003f7206 	br	20081de0 <__flash_rwdata_start+0xfffe5798>
20082018:	2007883a 	mov	r3,r4
2008201c:	003f7006 	br	20081de0 <__flash_rwdata_start+0xfffe5798>

20082020 <Fat_FileCount>:
    return bFind;
    
}


unsigned int Fat_FileCount(FAT_HANDLE Fat){
20082020:	deffb204 	addi	sp,sp,-312
20082024:	dfc04d15 	stw	ra,308(sp)
20082028:	dc004c15 	stw	r16,304(sp)
    return Type;        
}

bool Fat_FileBrowseBegin(FAT_HANDLE hFat, FAT_BROWSE_HANDLE *pFatBrowseHandle){
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
    if (!pVol)
2008202c:	20000d26 	beq	r4,zero,20082064 <Fat_FileCount+0x44>
        return FALSE;
    if (!pVol->bMount)
20082030:	20800517 	ldw	r2,20(r4)
20082034:	10000b26 	beq	r2,zero,20082064 <Fat_FileCount+0x44>
        return FALSE;
    pFatBrowseHandle->DirectoryIndex = -1;
20082038:	00bfffc4 	movi	r2,-1
2008203c:	d8804a15 	stw	r2,296(sp)
    pFatBrowseHandle->hFat = hFat;
20082040:	d9004b15 	stw	r4,300(sp)
20082044:	0021883a 	mov	r16,zero
20082048:	00000106 	br	20082050 <Fat_FileCount+0x30>
    FAT_BROWSE_HANDLE hBrowse;
    FILE_CONTEXT FileContext;
    
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
        while(Fat_FileBrowseNext(&hBrowse, &FileContext))
            nCount++;
2008204c:	84000044 	addi	r16,r16,1
    unsigned int nCount = 0;
    FAT_BROWSE_HANDLE hBrowse;
    FILE_CONTEXT FileContext;
    
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
        while(Fat_FileBrowseNext(&hBrowse, &FileContext))
20082050:	d9004a04 	addi	r4,sp,296
20082054:	d80b883a 	mov	r5,sp
20082058:	0081a800 	call	20081a80 <Fat_FileBrowseNext>
2008205c:	103ffb1e 	bne	r2,zero,2008204c <__flash_rwdata_start+0xfffe5a04>
20082060:	00000106 	br	20082068 <Fat_FileCount+0x48>
    
}


unsigned int Fat_FileCount(FAT_HANDLE Fat){
    unsigned int nCount = 0;
20082064:	0021883a 	mov	r16,zero
        while(Fat_FileBrowseNext(&hBrowse, &FileContext))
            nCount++;
    }
    
    return nCount;
}
20082068:	8005883a 	mov	r2,r16
2008206c:	dfc04d17 	ldw	ra,308(sp)
20082070:	dc004c17 	ldw	r16,304(sp)
20082074:	dec04e04 	addi	sp,sp,312
20082078:	f800283a 	ret

2008207c <fatSameLongFilename>:

bool fatSameLongFilename(alt_u16 *p1, alt_u16 *p2){
    bool bSame = TRUE;
    
    while(bSame && ((*p1 != 0) || (*p2 != 0))){
2008207c:	2080000b 	ldhu	r2,0(r4)
        if (*p1 != *p2){
            bSame = FALSE;
        }
        p1++;
20082080:	21000084 	addi	r4,r4,2
}

bool fatSameLongFilename(alt_u16 *p1, alt_u16 *p2){
    bool bSame = TRUE;
    
    while(bSame && ((*p1 != 0) || (*p2 != 0))){
20082084:	1000031e 	bne	r2,zero,20082094 <fatSameLongFilename+0x18>
20082088:	2880000b 	ldhu	r2,0(r5)
2008208c:	1005003a 	cmpeq	r2,r2,zero
20082090:	f800283a 	ret
        if (*p1 != *p2){
20082094:	28c0000b 	ldhu	r3,0(r5)
            bSame = FALSE;
        }
        p1++;
        p2++;
20082098:	29400084 	addi	r5,r5,2
}

bool fatSameLongFilename(alt_u16 *p1, alt_u16 *p2){
    bool bSame = TRUE;
    
    while(bSame && ((*p1 != 0) || (*p2 != 0))){
2008209c:	18ffffcc 	andi	r3,r3,65535
200820a0:	10fff626 	beq	r2,r3,2008207c <__flash_rwdata_start+0xfffe5a34>
200820a4:	0005883a 	mov	r2,zero
        p2++;
        
    }
    
    return bSame;
}
200820a8:	f800283a 	ret

200820ac <fatComposeShortFilename>:

void fatComposeShortFilename(FAT_DIRECTORY *pDir, char *szFilename){
    int i,nPos=0;
    
    i=0;
    while(i < 8 && pDir->Name[i] != 0 && pDir->Name[i] != ' ')
200820ac:	21800003 	ldbu	r6,0(r4)
200820b0:	00bff7c4 	movi	r2,-33
200820b4:	3086703a 	and	r3,r6,r2
200820b8:	18c03fcc 	andi	r3,r3,255
200820bc:	18c0201c 	xori	r3,r3,128
200820c0:	18ffe004 	addi	r3,r3,-128
200820c4:	18005b26 	beq	r3,zero,20082234 <fatComposeShortFilename+0x188>
        szFilename[nPos++] = pDir->Name[i++];
200820c8:	29800005 	stb	r6,0(r5)

void fatComposeShortFilename(FAT_DIRECTORY *pDir, char *szFilename){
    int i,nPos=0;
    
    i=0;
    while(i < 8 && pDir->Name[i] != 0 && pDir->Name[i] != ' ')
200820cc:	21800043 	ldbu	r6,1(r4)
200820d0:	3086703a 	and	r3,r6,r2
200820d4:	18c03fcc 	andi	r3,r3,255
200820d8:	18c0201c 	xori	r3,r3,128
200820dc:	18ffe004 	addi	r3,r3,-128
200820e0:	18005626 	beq	r3,zero,2008223c <fatComposeShortFilename+0x190>
        szFilename[nPos++] = pDir->Name[i++];
200820e4:	29800045 	stb	r6,1(r5)

void fatComposeShortFilename(FAT_DIRECTORY *pDir, char *szFilename){
    int i,nPos=0;
    
    i=0;
    while(i < 8 && pDir->Name[i] != 0 && pDir->Name[i] != ' ')
200820e8:	21800083 	ldbu	r6,2(r4)
200820ec:	3086703a 	and	r3,r6,r2
200820f0:	18c03fcc 	andi	r3,r3,255
200820f4:	18c0201c 	xori	r3,r3,128
200820f8:	18ffe004 	addi	r3,r3,-128
200820fc:	18005126 	beq	r3,zero,20082244 <fatComposeShortFilename+0x198>
        szFilename[nPos++] = pDir->Name[i++];
20082100:	29800085 	stb	r6,2(r5)

void fatComposeShortFilename(FAT_DIRECTORY *pDir, char *szFilename){
    int i,nPos=0;
    
    i=0;
    while(i < 8 && pDir->Name[i] != 0 && pDir->Name[i] != ' ')
20082104:	218000c3 	ldbu	r6,3(r4)
20082108:	3086703a 	and	r3,r6,r2
2008210c:	18c03fcc 	andi	r3,r3,255
20082110:	18c0201c 	xori	r3,r3,128
20082114:	18ffe004 	addi	r3,r3,-128
20082118:	18004c26 	beq	r3,zero,2008224c <fatComposeShortFilename+0x1a0>
        szFilename[nPos++] = pDir->Name[i++];
2008211c:	298000c5 	stb	r6,3(r5)

void fatComposeShortFilename(FAT_DIRECTORY *pDir, char *szFilename){
    int i,nPos=0;
    
    i=0;
    while(i < 8 && pDir->Name[i] != 0 && pDir->Name[i] != ' ')
20082120:	21800103 	ldbu	r6,4(r4)
20082124:	3086703a 	and	r3,r6,r2
20082128:	18c03fcc 	andi	r3,r3,255
2008212c:	18c0201c 	xori	r3,r3,128
20082130:	18ffe004 	addi	r3,r3,-128
20082134:	18004726 	beq	r3,zero,20082254 <fatComposeShortFilename+0x1a8>
        szFilename[nPos++] = pDir->Name[i++];
20082138:	29800105 	stb	r6,4(r5)

void fatComposeShortFilename(FAT_DIRECTORY *pDir, char *szFilename){
    int i,nPos=0;
    
    i=0;
    while(i < 8 && pDir->Name[i] != 0 && pDir->Name[i] != ' ')
2008213c:	21800143 	ldbu	r6,5(r4)
20082140:	3086703a 	and	r3,r6,r2
20082144:	18c03fcc 	andi	r3,r3,255
20082148:	18c0201c 	xori	r3,r3,128
2008214c:	18ffe004 	addi	r3,r3,-128
20082150:	18004226 	beq	r3,zero,2008225c <fatComposeShortFilename+0x1b0>
        szFilename[nPos++] = pDir->Name[i++];
20082154:	29800145 	stb	r6,5(r5)

void fatComposeShortFilename(FAT_DIRECTORY *pDir, char *szFilename){
    int i,nPos=0;
    
    i=0;
    while(i < 8 && pDir->Name[i] != 0 && pDir->Name[i] != ' ')
20082158:	21800183 	ldbu	r6,6(r4)
2008215c:	3086703a 	and	r3,r6,r2
20082160:	18c03fcc 	andi	r3,r3,255
20082164:	18c0201c 	xori	r3,r3,128
20082168:	18ffe004 	addi	r3,r3,-128
2008216c:	18003d26 	beq	r3,zero,20082264 <fatComposeShortFilename+0x1b8>
        szFilename[nPos++] = pDir->Name[i++];
20082170:	29800185 	stb	r6,6(r5)

void fatComposeShortFilename(FAT_DIRECTORY *pDir, char *szFilename){
    int i,nPos=0;
    
    i=0;
    while(i < 8 && pDir->Name[i] != 0 && pDir->Name[i] != ' ')
20082174:	20c001c3 	ldbu	r3,7(r4)
20082178:	1884703a 	and	r2,r3,r2
2008217c:	10803fcc 	andi	r2,r2,255
20082180:	1080201c 	xori	r2,r2,128
20082184:	10bfe004 	addi	r2,r2,-128
20082188:	10003826 	beq	r2,zero,2008226c <fatComposeShortFilename+0x1c0>
        szFilename[nPos++] = pDir->Name[i++];
2008218c:	28c001c5 	stb	r3,7(r5)
20082190:	00800204 	movi	r2,8
    
    if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY)){
20082194:	20c002c3 	ldbu	r3,11(r4)
20082198:	18c00c0c 	andi	r3,r3,48
2008219c:	18002026 	beq	r3,zero,20082220 <fatComposeShortFilename+0x174>
        if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY))     
            szFilename[nPos++] = '.';   
200821a0:	2887883a 	add	r3,r5,r2
200821a4:	01800b84 	movi	r6,46
200821a8:	19800005 	stb	r6,0(r3)
        i=0;
        while(i < 3 && pDir->Extension[i] != 0 && pDir->Extension[i] != ' ')
200821ac:	22000203 	ldbu	r8,8(r4)
200821b0:	00fff7c4 	movi	r3,-33
    while(i < 8 && pDir->Name[i] != 0 && pDir->Name[i] != ' ')
        szFilename[nPos++] = pDir->Name[i++];
    
    if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY)){
        if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY))     
            szFilename[nPos++] = '.';   
200821b4:	11c00044 	addi	r7,r2,1
        i=0;
        while(i < 3 && pDir->Extension[i] != 0 && pDir->Extension[i] != ' ')
200821b8:	40cc703a 	and	r6,r8,r3
200821bc:	31803fcc 	andi	r6,r6,255
200821c0:	3180201c 	xori	r6,r6,128
200821c4:	31bfe004 	addi	r6,r6,-128
200821c8:	30001826 	beq	r6,zero,2008222c <fatComposeShortFilename+0x180>
            szFilename[nPos++] = pDir->Extension[i++];
200821cc:	29cf883a 	add	r7,r5,r7
200821d0:	3a000005 	stb	r8,0(r7)
    
    if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY)){
        if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY))     
            szFilename[nPos++] = '.';   
        i=0;
        while(i < 3 && pDir->Extension[i] != 0 && pDir->Extension[i] != ' ')
200821d4:	22000243 	ldbu	r8,9(r4)
            szFilename[nPos++] = pDir->Extension[i++];
200821d8:	11c00084 	addi	r7,r2,2
    
    if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY)){
        if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY))     
            szFilename[nPos++] = '.';   
        i=0;
        while(i < 3 && pDir->Extension[i] != 0 && pDir->Extension[i] != ' ')
200821dc:	40cc703a 	and	r6,r8,r3
200821e0:	31803fcc 	andi	r6,r6,255
200821e4:	3180201c 	xori	r6,r6,128
200821e8:	31bfe004 	addi	r6,r6,-128
200821ec:	30000f26 	beq	r6,zero,2008222c <fatComposeShortFilename+0x180>
            szFilename[nPos++] = pDir->Extension[i++];
200821f0:	29cf883a 	add	r7,r5,r7
200821f4:	3a000005 	stb	r8,0(r7)
    
    if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY)){
        if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY))     
            szFilename[nPos++] = '.';   
        i=0;
        while(i < 3 && pDir->Extension[i] != 0 && pDir->Extension[i] != ' ')
200821f8:	21800283 	ldbu	r6,10(r4)
            szFilename[nPos++] = pDir->Extension[i++];
200821fc:	110000c4 	addi	r4,r2,3
    
    if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY)){
        if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY))     
            szFilename[nPos++] = '.';   
        i=0;
        while(i < 3 && pDir->Extension[i] != 0 && pDir->Extension[i] != ' ')
20082200:	30c6703a 	and	r3,r6,r3
20082204:	18c03fcc 	andi	r3,r3,255
20082208:	18c0201c 	xori	r3,r3,128
2008220c:	18ffe004 	addi	r3,r3,-128
20082210:	18001826 	beq	r3,zero,20082274 <fatComposeShortFilename+0x1c8>
            szFilename[nPos++] = pDir->Extension[i++];
20082214:	2909883a 	add	r4,r5,r4
20082218:	10800104 	addi	r2,r2,4
2008221c:	21800005 	stb	r6,0(r4)
    }            
    szFilename[nPos++] = 0;
20082220:	288b883a 	add	r5,r5,r2
20082224:	28000005 	stb	zero,0(r5)
20082228:	f800283a 	ret
    if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY)){
        if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY))     
            szFilename[nPos++] = '.';   
        i=0;
        while(i < 3 && pDir->Extension[i] != 0 && pDir->Extension[i] != ' ')
            szFilename[nPos++] = pDir->Extension[i++];
2008222c:	3805883a 	mov	r2,r7
20082230:	003ffb06 	br	20082220 <__flash_rwdata_start+0xfffe5bd8>
    return bSame;
}


void fatComposeShortFilename(FAT_DIRECTORY *pDir, char *szFilename){
    int i,nPos=0;
20082234:	0005883a 	mov	r2,zero
20082238:	003fd606 	br	20082194 <__flash_rwdata_start+0xfffe5b4c>
    
    i=0;
    while(i < 8 && pDir->Name[i] != 0 && pDir->Name[i] != ' ')
        szFilename[nPos++] = pDir->Name[i++];
2008223c:	00800044 	movi	r2,1
20082240:	003fd406 	br	20082194 <__flash_rwdata_start+0xfffe5b4c>
20082244:	00800084 	movi	r2,2
20082248:	003fd206 	br	20082194 <__flash_rwdata_start+0xfffe5b4c>
2008224c:	008000c4 	movi	r2,3
20082250:	003fd006 	br	20082194 <__flash_rwdata_start+0xfffe5b4c>
20082254:	00800104 	movi	r2,4
20082258:	003fce06 	br	20082194 <__flash_rwdata_start+0xfffe5b4c>
2008225c:	00800144 	movi	r2,5
20082260:	003fcc06 	br	20082194 <__flash_rwdata_start+0xfffe5b4c>
20082264:	00800184 	movi	r2,6
20082268:	003fca06 	br	20082194 <__flash_rwdata_start+0xfffe5b4c>
2008226c:	008001c4 	movi	r2,7
20082270:	003fc806 	br	20082194 <__flash_rwdata_start+0xfffe5b4c>
    if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY)){
        if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY))     
            szFilename[nPos++] = '.';   
        i=0;
        while(i < 3 && pDir->Extension[i] != 0 && pDir->Extension[i] != ' ')
            szFilename[nPos++] = pDir->Extension[i++];
20082274:	2005883a 	mov	r2,r4
20082278:	003fe906 	br	20082220 <__flash_rwdata_start+0xfffe5bd8>

2008227c <Fat_CheckExtension>:
    szFilename[nPos++] = 0;
}


bool Fat_CheckExtension(FILE_CONTEXT *pFileContext, char* ext){
	if(pFileContext == NULL)
2008227c:	20001426 	beq	r4,zero,200822d0 <Fat_CheckExtension+0x54>
    }            
    szFilename[nPos++] = 0;
}


bool Fat_CheckExtension(FILE_CONTEXT *pFileContext, char* ext){
20082280:	defffe04 	addi	sp,sp,-8
20082284:	dc000015 	stw	r16,0(sp)
20082288:	2821883a 	mov	r16,r5
	if(pFileContext == NULL)
		return 0;

	char * point;
	if ((point = strrchr(pFileContext->szName, '.')) != NULL) {
2008228c:	01400b84 	movi	r5,46
    }            
    szFilename[nPos++] = 0;
}


bool Fat_CheckExtension(FILE_CONTEXT *pFileContext, char* ext){
20082290:	dfc00115 	stw	ra,4(sp)
	if(pFileContext == NULL)
		return 0;

	char * point;
	if ((point = strrchr(pFileContext->szName, '.')) != NULL) {
20082294:	008a7d40 	call	2008a7d4 <strrchr>
20082298:	10000826 	beq	r2,zero,200822bc <Fat_CheckExtension+0x40>
		if (strcmp(point, ext) == 0) {
2008229c:	1009883a 	mov	r4,r2
200822a0:	800b883a 	mov	r5,r16
200822a4:	008a6980 	call	2008a698 <strcmp>
200822a8:	1005003a 	cmpeq	r2,r2,zero
			return 1;
		}
	}

	return 0;
}
200822ac:	dfc00117 	ldw	ra,4(sp)
200822b0:	dc000017 	ldw	r16,0(sp)
200822b4:	dec00204 	addi	sp,sp,8
200822b8:	f800283a 	ret
		if (strcmp(point, ext) == 0) {
			return 1;
		}
	}

	return 0;
200822bc:	0005883a 	mov	r2,zero
}
200822c0:	dfc00117 	ldw	ra,4(sp)
200822c4:	dc000017 	ldw	r16,0(sp)
200822c8:	dec00204 	addi	sp,sp,8
200822cc:	f800283a 	ret
}


bool Fat_CheckExtension(FILE_CONTEXT *pFileContext, char* ext){
	if(pFileContext == NULL)
		return 0;
200822d0:	0005883a 	mov	r2,zero
			return 1;
		}
	}

	return 0;
}
200822d4:	f800283a 	ret

200822d8 <Fat_GetFileName>:
char* Fat_GetFileName(FILE_CONTEXT *pFileContext){
	if(pFileContext == NULL)
		return 0;
	else
		return pFileContext->szName;
}
200822d8:	2005883a 	mov	r2,r4
200822dc:	f800283a 	ret

200822e0 <Fat_FileExist>:
    return Type;        
}

bool Fat_FileBrowseBegin(FAT_HANDLE hFat, FAT_BROWSE_HANDLE *pFatBrowseHandle){
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
    if (!pVol)
200822e0:	20001926 	beq	r4,zero,20082348 <Fat_FileExist+0x68>
        return FALSE;
    if (!pVol->bMount)
200822e4:	20800517 	ldw	r2,20(r4)
200822e8:	10001726 	beq	r2,zero,20082348 <Fat_FileExist+0x68>
		return 0;
	else
		return pFileContext->szName;
}

bool Fat_FileExist(FAT_HANDLE Fat, const char *pFilename){
200822ec:	deffb204 	addi	sp,sp,-312
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
    if (!pVol)
        return FALSE;
    if (!pVol->bMount)
        return FALSE;
    pFatBrowseHandle->DirectoryIndex = -1;
200822f0:	00bfffc4 	movi	r2,-1
		return 0;
	else
		return pFileContext->szName;
}

bool Fat_FileExist(FAT_HANDLE Fat, const char *pFilename){
200822f4:	dc004c15 	stw	r16,304(sp)
200822f8:	dfc04d15 	stw	ra,308(sp)
200822fc:	2821883a 	mov	r16,r5
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
    if (!pVol)
        return FALSE;
    if (!pVol->bMount)
        return FALSE;
    pFatBrowseHandle->DirectoryIndex = -1;
20082300:	d8804a15 	stw	r2,296(sp)
    pFatBrowseHandle->hFat = hFat;
20082304:	d9004b15 	stw	r4,300(sp)
bool Fat_FileExist(FAT_HANDLE Fat, const char *pFilename){
    bool bFind = FALSE;
    FAT_BROWSE_HANDLE hBrowse;     
    FILE_CONTEXT FileContext;
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
        while (!bFind && Fat_FileBrowseNext(&hBrowse, &FileContext)){
20082308:	d9004a04 	addi	r4,sp,296
2008230c:	d80b883a 	mov	r5,sp
20082310:	0081a800 	call	20081a80 <Fat_FileBrowseNext>
20082314:	10001c26 	beq	r2,zero,20082388 <Fat_FileExist+0xa8>
            if (FileContext.bLongFilename){
20082318:	d8804017 	ldw	r2,256(sp)
2008231c:	10000c1e 	bne	r2,zero,20082350 <Fat_FileExist+0x70>
                bFind = fatSameLongFilename((alt_u16 *)FileContext.szName, (alt_u16 *)pFilename);
            }else{
                if (strcmp(FileContext.szName, pFilename) == 0)
20082320:	d809883a 	mov	r4,sp
20082324:	800b883a 	mov	r5,r16
20082328:	008a6980 	call	2008a698 <strcmp>
2008232c:	1005003a 	cmpeq	r2,r2,zero
bool Fat_FileExist(FAT_HANDLE Fat, const char *pFilename){
    bool bFind = FALSE;
    FAT_BROWSE_HANDLE hBrowse;     
    FILE_CONTEXT FileContext;
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
        while (!bFind && Fat_FileBrowseNext(&hBrowse, &FileContext)){
20082330:	103ff526 	beq	r2,zero,20082308 <__flash_rwdata_start+0xfffe5cc0>
20082334:	00800044 	movi	r2,1
            }    
        } // while 
        Fat_FileClose(Fat); 
    }
    return bFind;            
}    
20082338:	dfc04d17 	ldw	ra,308(sp)
2008233c:	dc004c17 	ldw	r16,304(sp)
20082340:	dec04e04 	addi	sp,sp,312
20082344:	f800283a 	ret
	else
		return pFileContext->szName;
}

bool Fat_FileExist(FAT_HANDLE Fat, const char *pFilename){
    bool bFind = FALSE;
20082348:	0005883a 	mov	r2,zero
            }    
        } // while 
        Fat_FileClose(Fat); 
    }
    return bFind;            
}    
2008234c:	f800283a 	ret
20082350:	8009883a 	mov	r4,r16
    bool bFind = FALSE;
    FAT_BROWSE_HANDLE hBrowse;     
    FILE_CONTEXT FileContext;
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
        while (!bFind && Fat_FileBrowseNext(&hBrowse, &FileContext)){
            if (FileContext.bLongFilename){
20082354:	d805883a 	mov	r2,sp
}

bool fatSameLongFilename(alt_u16 *p1, alt_u16 *p2){
    bool bSame = TRUE;
    
    while(bSame && ((*p1 != 0) || (*p2 != 0))){
20082358:	10c0000b 	ldhu	r3,0(r2)
        if (*p1 != *p2){
            bSame = FALSE;
        }
        p1++;
2008235c:	10800084 	addi	r2,r2,2
}

bool fatSameLongFilename(alt_u16 *p1, alt_u16 *p2){
    bool bSame = TRUE;
    
    while(bSame && ((*p1 != 0) || (*p2 != 0))){
20082360:	1800041e 	bne	r3,zero,20082374 <Fat_FileExist+0x94>
20082364:	2080000b 	ldhu	r2,0(r4)
20082368:	1005003a 	cmpeq	r2,r2,zero
bool Fat_FileExist(FAT_HANDLE Fat, const char *pFilename){
    bool bFind = FALSE;
    FAT_BROWSE_HANDLE hBrowse;     
    FILE_CONTEXT FileContext;
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
        while (!bFind && Fat_FileBrowseNext(&hBrowse, &FileContext)){
2008236c:	103fe626 	beq	r2,zero,20082308 <__flash_rwdata_start+0xfffe5cc0>
20082370:	003ff006 	br	20082334 <__flash_rwdata_start+0xfffe5cec>

bool fatSameLongFilename(alt_u16 *p1, alt_u16 *p2){
    bool bSame = TRUE;
    
    while(bSame && ((*p1 != 0) || (*p2 != 0))){
        if (*p1 != *p2){
20082374:	2180000b 	ldhu	r6,0(r4)
            bSame = FALSE;
        }
        p1++;
        p2++;
20082378:	21000084 	addi	r4,r4,2
}

bool fatSameLongFilename(alt_u16 *p1, alt_u16 *p2){
    bool bSame = TRUE;
    
    while(bSame && ((*p1 != 0) || (*p2 != 0))){
2008237c:	31bfffcc 	andi	r6,r6,65535
20082380:	30fff526 	beq	r6,r3,20082358 <__flash_rwdata_start+0xfffe5d10>
20082384:	003fe006 	br	20082308 <__flash_rwdata_start+0xfffe5cc0>
	else
		return pFileContext->szName;
}

bool Fat_FileExist(FAT_HANDLE Fat, const char *pFilename){
    bool bFind = FALSE;
20082388:	0005883a 	mov	r2,zero
            }    
        } // while 
        Fat_FileClose(Fat); 
    }
    return bFind;            
}    
2008238c:	dfc04d17 	ldw	ra,308(sp)
20082390:	dc004c17 	ldw	r16,304(sp)
20082394:	dec04e04 	addi	sp,sp,312
20082398:	f800283a 	ret

2008239c <Fat_FileOpen>:
    return Type;        
}

bool Fat_FileBrowseBegin(FAT_HANDLE hFat, FAT_BROWSE_HANDLE *pFatBrowseHandle){
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
    if (!pVol)
2008239c:	20004926 	beq	r4,zero,200824c4 <Fat_FileOpen+0x128>
        return FALSE;
    if (!pVol->bMount)
200823a0:	20800517 	ldw	r2,20(r4)
200823a4:	10004726 	beq	r2,zero,200824c4 <Fat_FileOpen+0x128>
    }
    return bFind;            
}    
 
// File Access
FAT_FILE_HANDLE Fat_FileOpen(FAT_HANDLE Fat, const char *pFilename){
200823a8:	deff7004 	addi	sp,sp,-576
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
    if (!pVol)
        return FALSE;
    if (!pVol->bMount)
        return FALSE;
    pFatBrowseHandle->DirectoryIndex = -1;
200823ac:	00bfffc4 	movi	r2,-1
    }
    return bFind;            
}    
 
// File Access
FAT_FILE_HANDLE Fat_FileOpen(FAT_HANDLE Fat, const char *pFilename){
200823b0:	dc808e15 	stw	r18,568(sp)
200823b4:	dc408d15 	stw	r17,564(sp)
200823b8:	dc008c15 	stw	r16,560(sp)
200823bc:	dfc08f15 	stw	ra,572(sp)
200823c0:	2821883a 	mov	r16,r5
200823c4:	2023883a 	mov	r17,r4
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
    if (!pVol)
        return FALSE;
    if (!pVol->bMount)
        return FALSE;
    pFatBrowseHandle->DirectoryIndex = -1;
200823c8:	d8808a15 	stw	r2,552(sp)
    pFatBrowseHandle->hFat = hFat;
200823cc:	d9008b15 	stw	r4,556(sp)
                alt_u16 *pData16;
                alt_u8 *pData8;
                pData16 = (alt_u16 *)FileContext.szName;
                pData8 = FileContext.szName;
                while(*pData16){
                    if (*pData8 && *pData8 != ' ')
200823d0:	04bff7c4 	movi	r18,-33
    FAT_FILE_INFO *pFile = 0;
    int nPos = 0;
    char szWaveFilename[MAX_FILENAME_LENGTH];
    
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
        while (!bFind && Fat_FileBrowseNext(&hBrowse, &FileContext)){
200823d4:	d9008a04 	addi	r4,sp,552
200823d8:	d80b883a 	mov	r5,sp
200823dc:	0081a800 	call	20081a80 <Fat_FileBrowseNext>
200823e0:	10004026 	beq	r2,zero,200824e4 <Fat_FileOpen+0x148>
            if (FileContext.bLongFilename){
200823e4:	d8804017 	ldw	r2,256(sp)
200823e8:	10003826 	beq	r2,zero,200824cc <Fat_FileOpen+0x130>
                nPos = 0;
                alt_u16 *pData16;
                alt_u8 *pData8;
                pData16 = (alt_u16 *)FileContext.szName;
                pData8 = FileContext.szName;
                while(*pData16){
200823ec:	d880000b 	ldhu	r2,0(sp)
200823f0:	10003e26 	beq	r2,zero,200824ec <Fat_FileOpen+0x150>
200823f4:	d9000044 	addi	r4,sp,1
200823f8:	d805883a 	mov	r2,sp
200823fc:	000d883a 	mov	r6,zero
                    if (*pData8 && *pData8 != ' ')
20082400:	11400003 	ldbu	r5,0(r2)
                        szWaveFilename[nPos++] = *pData8;
20082404:	d8c04a04 	addi	r3,sp,296
20082408:	198f883a 	add	r7,r3,r6
                alt_u16 *pData16;
                alt_u8 *pData8;
                pData16 = (alt_u16 *)FileContext.szName;
                pData8 = FileContext.szName;
                while(*pData16){
                    if (*pData8 && *pData8 != ' ')
2008240c:	2c86703a 	and	r3,r5,r18
20082410:	18c03fcc 	andi	r3,r3,255
20082414:	10800084 	addi	r2,r2,2
20082418:	18000226 	beq	r3,zero,20082424 <Fat_FileOpen+0x88>
                        szWaveFilename[nPos++] = *pData8;
2008241c:	39400005 	stb	r5,0(r7)
20082420:	31800044 	addi	r6,r6,1
                    pData8++;
                    if (*pData8 && *pData8 != ' ')
20082424:	21400003 	ldbu	r5,0(r4)
                        szWaveFilename[nPos++] = *pData8;
20082428:	d8c04a04 	addi	r3,sp,296
2008242c:	198f883a 	add	r7,r3,r6
                pData8 = FileContext.szName;
                while(*pData16){
                    if (*pData8 && *pData8 != ' ')
                        szWaveFilename[nPos++] = *pData8;
                    pData8++;
                    if (*pData8 && *pData8 != ' ')
20082430:	2c86703a 	and	r3,r5,r18
20082434:	18c03fcc 	andi	r3,r3,255
20082438:	21000084 	addi	r4,r4,2
2008243c:	18000226 	beq	r3,zero,20082448 <Fat_FileOpen+0xac>
                        szWaveFilename[nPos++] = *pData8;
20082440:	39400005 	stb	r5,0(r7)
20082444:	31800044 	addi	r6,r6,1
                nPos = 0;
                alt_u16 *pData16;
                alt_u8 *pData8;
                pData16 = (alt_u16 *)FileContext.szName;
                pData8 = FileContext.szName;
                while(*pData16){
20082448:	10c0000b 	ldhu	r3,0(r2)
2008244c:	183fec1e 	bne	r3,zero,20082400 <__flash_rwdata_start+0xfffe5db8>
                        szWaveFilename[nPos++] = *pData8;
                    pData8++;                    
                    //    
                    pData16++;
                }
                szWaveFilename[nPos] = 0;
20082450:	d8804a04 	addi	r2,sp,296
20082454:	118d883a 	add	r6,r2,r6
                
                if(strcmp(pFilename,szWaveFilename) == 0)
20082458:	8009883a 	mov	r4,r16
2008245c:	100b883a 	mov	r5,r2
                        szWaveFilename[nPos++] = *pData8;
                    pData8++;                    
                    //    
                    pData16++;
                }
                szWaveFilename[nPos] = 0;
20082460:	30000005 	stb	zero,0(r6)
                
                if(strcmp(pFilename,szWaveFilename) == 0)
20082464:	008a6980 	call	2008a698 <strcmp>
20082468:	1005003a 	cmpeq	r2,r2,zero
    FAT_FILE_INFO *pFile = 0;
    int nPos = 0;
    char szWaveFilename[MAX_FILENAME_LENGTH];
    
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
        while (!bFind && Fat_FileBrowseNext(&hBrowse, &FileContext)){
2008246c:	103fd926 	beq	r2,zero,200823d4 <__flash_rwdata_start+0xfffe5d8c>
        
        if (bFind){
            //pFile = malloc(sizeof(FAT_FILE_INFO));
        	pFile = &fInfo;
            if (pFile){
                pFile->OpenAttribute = FILE_OPEN_READ; 
20082470:	04000034 	movhi	r16,0
20082474:	840a3b04 	addi	r16,r16,10476
20082478:	04800044 	movi	r18,1
                pFile->SeekPos = 0;
                pFile->Directory = FileContext;
2008247c:	d80b883a 	mov	r5,sp
20082480:	81000504 	addi	r4,r16,20
20082484:	01804a04 	movi	r6,296
        
        if (bFind){
            //pFile = malloc(sizeof(FAT_FILE_INFO));
        	pFile = &fInfo;
            if (pFile){
                pFile->OpenAttribute = FILE_OPEN_READ; 
20082488:	84800115 	stw	r18,4(r16)
                pFile->SeekPos = 0;
2008248c:	80000215 	stw	zero,8(r16)
                pFile->Directory = FileContext;
20082490:	008a1e00 	call	2008a1e0 <memcpy>
                pFile->IsOpened = TRUE;
                pFile->Cluster = FileContext.FirstLogicalCluster;
20082494:	d880488b 	ldhu	r2,290(sp)
        	pFile = &fInfo;
            if (pFile){
                pFile->OpenAttribute = FILE_OPEN_READ; 
                pFile->SeekPos = 0;
                pFile->Directory = FileContext;
                pFile->IsOpened = TRUE;
20082498:	84800015 	stw	r18,0(r16)
                pFile->Cluster = FileContext.FirstLogicalCluster;
                pFile->ClusterSeq = 0;
2008249c:	80000415 	stw	zero,16(r16)
            if (pFile){
                pFile->OpenAttribute = FILE_OPEN_READ; 
                pFile->SeekPos = 0;
                pFile->Directory = FileContext;
                pFile->IsOpened = TRUE;
                pFile->Cluster = FileContext.FirstLogicalCluster;
200824a0:	80800315 	stw	r2,12(r16)
                pFile->ClusterSeq = 0;
                pFile->Fat = Fat;
200824a4:	84404f15 	stw	r17,316(r16)
            }    
        } // while 
        
        if (bFind){
            //pFile = malloc(sizeof(FAT_FILE_INFO));
        	pFile = &fInfo;
200824a8:	8005883a 	mov	r2,r16
        }    
    }  

    
    return (FAT_FILE_HANDLE)pFile;  
}
200824ac:	dfc08f17 	ldw	ra,572(sp)
200824b0:	dc808e17 	ldw	r18,568(sp)
200824b4:	dc408d17 	ldw	r17,564(sp)
200824b8:	dc008c17 	ldw	r16,560(sp)
200824bc:	dec09004 	addi	sp,sp,576
200824c0:	f800283a 	ret
FAT_FILE_HANDLE Fat_FileOpen(FAT_HANDLE Fat, const char *pFilename){
    bool bFind = FALSE;
    FAT_BROWSE_HANDLE hBrowse;     
    FILE_CONTEXT FileContext;
    static FAT_FILE_INFO fInfo;
    FAT_FILE_INFO *pFile = 0;
200824c4:	0005883a 	mov	r2,zero
        }    
    }  

    
    return (FAT_FILE_HANDLE)pFile;  
}
200824c8:	f800283a 	ret
                szWaveFilename[nPos] = 0;
                
                if(strcmp(pFilename,szWaveFilename) == 0)
                    bFind = TRUE;
            }else{
                if (strcmp(FileContext.szName, pFilename) == 0)
200824cc:	d809883a 	mov	r4,sp
200824d0:	800b883a 	mov	r5,r16
200824d4:	008a6980 	call	2008a698 <strcmp>
200824d8:	1005003a 	cmpeq	r2,r2,zero
    FAT_FILE_INFO *pFile = 0;
    int nPos = 0;
    char szWaveFilename[MAX_FILENAME_LENGTH];
    
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
        while (!bFind && Fat_FileBrowseNext(&hBrowse, &FileContext)){
200824dc:	103fbd26 	beq	r2,zero,200823d4 <__flash_rwdata_start+0xfffe5d8c>
200824e0:	003fe306 	br	20082470 <__flash_rwdata_start+0xfffe5e28>
FAT_FILE_HANDLE Fat_FileOpen(FAT_HANDLE Fat, const char *pFilename){
    bool bFind = FALSE;
    FAT_BROWSE_HANDLE hBrowse;     
    FILE_CONTEXT FileContext;
    static FAT_FILE_INFO fInfo;
    FAT_FILE_INFO *pFile = 0;
200824e4:	0005883a 	mov	r2,zero
200824e8:	003ff006 	br	200824ac <__flash_rwdata_start+0xfffe5e64>
                nPos = 0;
                alt_u16 *pData16;
                alt_u8 *pData8;
                pData16 = (alt_u16 *)FileContext.szName;
                pData8 = FileContext.szName;
                while(*pData16){
200824ec:	000d883a 	mov	r6,zero
200824f0:	003fd706 	br	20082450 <__flash_rwdata_start+0xfffe5e08>

200824f4 <Fat_FileSize>:
}


unsigned int Fat_FileSize(FAT_FILE_HANDLE hFileHandle){
    FAT_FILE_INFO *f = (FAT_FILE_INFO *)hFileHandle;
    if (f->IsOpened)
200824f4:	20800017 	ldw	r2,0(r4)
200824f8:	10000226 	beq	r2,zero,20082504 <Fat_FileSize+0x10>
        return f->Directory.FileSize;
200824fc:	20804e17 	ldw	r2,312(r4)
20082500:	f800283a 	ret
    return 0;        
20082504:	0005883a 	mov	r2,zero
}
20082508:	f800283a 	ret

2008250c <Fat_FileRead>:
    alt_u32 Pos, PhysicalSecter, NextCluster, Cluster;
    alt_u32 BytesPerCluster, nReadCount=0, nClusterSeq;
    int s;
    bool bSuccess= TRUE;
    
    if (!f || !f->Fat)
2008250c:	2000ad26 	beq	r4,zero,200827c4 <Fat_FileRead+0x2b8>
        return f->Directory.FileSize;
    return 0;        
}


bool Fat_FileRead(FAT_FILE_HANDLE hFileHandle, void *pBuffer, const int nBufferSize){
20082510:	defff404 	addi	sp,sp,-48
20082514:	dcc00515 	stw	r19,20(sp)
    alt_u32 Pos, PhysicalSecter, NextCluster, Cluster;
    alt_u32 BytesPerCluster, nReadCount=0, nClusterSeq;
    int s;
    bool bSuccess= TRUE;
    
    if (!f || !f->Fat)
20082518:	24c04f17 	ldw	r19,316(r4)
        return f->Directory.FileSize;
    return 0;        
}


bool Fat_FileRead(FAT_FILE_HANDLE hFileHandle, void *pBuffer, const int nBufferSize){
2008251c:	dfc00b15 	stw	ra,44(sp)
20082520:	df000a15 	stw	fp,40(sp)
20082524:	ddc00915 	stw	r23,36(sp)
20082528:	dd800815 	stw	r22,32(sp)
2008252c:	dd400715 	stw	r21,28(sp)
20082530:	dd000615 	stw	r20,24(sp)
20082534:	dc800415 	stw	r18,16(sp)
20082538:	dc400315 	stw	r17,12(sp)
2008253c:	dc000215 	stw	r16,8(sp)
    alt_u32 Pos, PhysicalSecter, NextCluster, Cluster;
    alt_u32 BytesPerCluster, nReadCount=0, nClusterSeq;
    int s;
    bool bSuccess= TRUE;
    
    if (!f || !f->Fat)
20082540:	98005226 	beq	r19,zero,2008268c <Fat_FileRead+0x180>
        return FALSE;
    pVol = (VOLUME_INFO *)f->Fat;        
    
    if (!f->IsOpened){
20082544:	20800017 	ldw	r2,0(r4)
20082548:	10005d26 	beq	r2,zero,200826c0 <Fat_FileRead+0x1b4>
        FAT_DEBUG(("[FAT] Fat_FileRead, file not opened\r\n"));
        return bSuccess;
    }        
        
    BytesPerCluster = pVol->nBytesPerCluster; //gVolumeInfo.BPB_BytsPerSec * gVolumeInfo.BPB_SecPerCluster;  
2008254c:	9c000d17 	ldw	r16,52(r19)
20082550:	d9800115 	stw	r6,4(sp)
    Pos = f->SeekPos;
    if (BytesPerCluster == 65536){
20082554:	00800074 	movhi	r2,1
20082558:	282b883a 	mov	r21,r5
2008255c:	2023883a 	mov	r17,r4
        FAT_DEBUG(("[FAT] Fat_FileRead, file not opened\r\n"));
        return bSuccess;
    }        
        
    BytesPerCluster = pVol->nBytesPerCluster; //gVolumeInfo.BPB_BytsPerSec * gVolumeInfo.BPB_SecPerCluster;  
    Pos = f->SeekPos;
20082560:	24800217 	ldw	r18,8(r4)
    if (BytesPerCluster == 65536){
20082564:	80809226 	beq	r16,r2,200827b0 <Fat_FileRead+0x2a4>
    	nClusterSeq = Pos >> 16;
    	Pos -= (f->ClusterSeq << 16);
    }else if (BytesPerCluster == 32768){
20082568:	00a00014 	movui	r2,32768
2008256c:	80809726 	beq	r16,r2,200827cc <Fat_FileRead+0x2c0>
        nClusterSeq = Pos >> 15;
        Pos -= (f->ClusterSeq << 15);
    }else if (BytesPerCluster == 16384){
20082570:	00900004 	movi	r2,16384
20082574:	80806726 	beq	r16,r2,20082714 <Fat_FileRead+0x208>
        nClusterSeq = Pos >> 14;
        Pos -= (f->ClusterSeq << 14);
    }else if (BytesPerCluster == 2048){
20082578:	00820004 	movi	r2,2048
2008257c:	80809826 	beq	r16,r2,200827e0 <Fat_FileRead+0x2d4>
        nClusterSeq = Pos >> 11;
        Pos -= (f->ClusterSeq << 11);
    }else{        
        nClusterSeq = Pos/BytesPerCluster;
20082580:	9009883a 	mov	r4,r18
20082584:	800b883a 	mov	r5,r16
20082588:	00867940 	call	20086794 <__udivsi3>
        Pos -= f->ClusterSeq*BytesPerCluster;
2008258c:	88c00417 	ldw	r3,16(r17)
20082590:	1c09383a 	mul	r4,r3,r16
20082594:	9125c83a 	sub	r18,r18,r4
    }    
        
       
    Cluster = f->Cluster;
20082598:	8d000317 	ldw	r20,12(r17)
    if (nClusterSeq != f->ClusterSeq){
2008259c:	10c00c26 	beq	r2,r3,200825d0 <Fat_FileRead+0xc4>
        Cluster = f->Cluster;  //11/20/2007, richard
        // move to first clustor for reading
        while (Pos >= BytesPerCluster && bSuccess){
200825a0:	94000b36 	bltu	r18,r16,200825d0 <Fat_FileRead+0xc4>
            // go to next cluster
            NextCluster = fatNextCluster(pVol, Cluster); 
200825a4:	a00b883a 	mov	r5,r20
200825a8:	9809883a 	mov	r4,r19
200825ac:	0082b480 	call	20082b48 <fatNextCluster>
            if (NextCluster == 0){
200825b0:	10005d26 	beq	r2,zero,20082728 <Fat_FileRead+0x21c>
            }else{
                Cluster = NextCluster;
            }        
            Pos -= BytesPerCluster;
            f->Cluster = Cluster;
            f->ClusterSeq++; 
200825b4:	88c00417 	ldw	r3,16(r17)
                bSuccess = FALSE;
                FAT_DEBUG(("[FAT] Fat_FileRead, no next Cluster, current Cluster=%d\r\n", Cluster));
            }else{
                Cluster = NextCluster;
            }        
            Pos -= BytesPerCluster;
200825b8:	9425c83a 	sub	r18,r18,r16
            f->Cluster = Cluster;
200825bc:	88800315 	stw	r2,12(r17)
            f->ClusterSeq++; 
200825c0:	18c00044 	addi	r3,r3,1
200825c4:	88c00415 	stw	r3,16(r17)
200825c8:	1029883a 	mov	r20,r2
       
    Cluster = f->Cluster;
    if (nClusterSeq != f->ClusterSeq){
        Cluster = f->Cluster;  //11/20/2007, richard
        // move to first clustor for reading
        while (Pos >= BytesPerCluster && bSuccess){
200825cc:	943ff52e 	bgeu	r18,r16,200825a4 <__flash_rwdata_start+0xfffe5f5c>
200825d0:	00c00044 	movi	r3,1
200825d4:	d8c00015 	stw	r3,0(sp)
    alt_u32 SectorOffset, ByteOffset, SectorsToRead;
    int nCopyCount, nCopySectors;

//    SectorOffset = Pos/pVol->BPB_BytsPerSec;
//    ByteOffset = Pos - SectorOffset*pVol->BPB_BytsPerSec;
    SectorOffset = Pos >> 9;
200825d8:	902ed27a 	srli	r23,r18,9
    ByteOffset = Pos - SectorOffset*pVol->BPB_BytsPerSec;
200825dc:	98800717 	ldw	r2,28(r19)

    PhysicalSecter = (Cluster-2)*pVol->BPB_SecPerCluster + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
200825e0:	9c000817 	ldw	r16,32(r19)
200825e4:	9f001017 	ldw	fp,64(r19)
    int nCopyCount, nCopySectors;

//    SectorOffset = Pos/pVol->BPB_BytsPerSec;
//    ByteOffset = Pos - SectorOffset*pVol->BPB_BytsPerSec;
    SectorOffset = Pos >> 9;
    ByteOffset = Pos - SectorOffset*pVol->BPB_BytsPerSec;
200825e8:	b885383a 	mul	r2,r23,r2

    PhysicalSecter = (Cluster-2)*pVol->BPB_SecPerCluster + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
200825ec:	a13fff84 	addi	r4,r20,-2
200825f0:	2409383a 	mul	r4,r4,r16
200825f4:	bf39883a 	add	fp,r23,fp
    int nCopyCount, nCopySectors;

//    SectorOffset = Pos/pVol->BPB_BytsPerSec;
//    ByteOffset = Pos - SectorOffset*pVol->BPB_BytsPerSec;
    SectorOffset = Pos >> 9;
    ByteOffset = Pos - SectorOffset*pVol->BPB_BytsPerSec;
200825f8:	90a5c83a 	sub	r18,r18,r2

    PhysicalSecter = (Cluster-2)*pVol->BPB_SecPerCluster + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
    PhysicalSecter += SectorOffset;
200825fc:	e139883a 	add	fp,fp,r4
    nReadCount = 0;

    // case: partial read of the first sector
    if((ByteOffset > 0) || (nBufferSize < 512)){
20082600:	9000501e 	bne	r18,zero,20082744 <Fat_FileRead+0x238>
20082604:	d8c00117 	ldw	r3,4(sp)
20082608:	00807fc4 	movi	r2,511
2008260c:	10c04d0e 	bge	r2,r3,20082744 <Fat_FileRead+0x238>
    		PhysicalSecter++;
    	}
    }

    //SectorsToRead = (nBufferSize - nReadCount)/pVol->BPB_BytsPerSec;
    SectorsToRead = (nBufferSize - nReadCount) >> 9;
20082610:	1824d27a 	srli	r18,r3,9
    SectorOffset = Pos >> 9;
    ByteOffset = Pos - SectorOffset*pVol->BPB_BytsPerSec;

    PhysicalSecter = (Cluster-2)*pVol->BPB_SecPerCluster + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
    PhysicalSecter += SectorOffset;
    nReadCount = 0;
20082614:	002d883a 	mov	r22,zero
    }

    //SectorsToRead = (nBufferSize - nReadCount)/pVol->BPB_BytsPerSec;
    SectorsToRead = (nBufferSize - nReadCount) >> 9;

    while(SectorsToRead > 0){
20082618:	90008926 	beq	r18,zero,20082840 <Fat_FileRead+0x334>
2008261c:	8005883a 	mov	r2,r16
    	if(SectorsToRead < (pVol->BPB_SecPerCluster - SectorOffset)){
20082620:	15e1c83a 	sub	r16,r2,r23
20082624:	9400012e 	bgeu	r18,r16,2008262c <Fat_FileRead+0x120>
    		nCopySectors = SectorsToRead;
20082628:	9021883a 	mov	r16,r18
    	} else {
    		nCopySectors = pVol->BPB_SecPerCluster - SectorOffset;
    	}

        if(!fatReadMultiSecter(pVol, PhysicalSecter, nCopySectors, pBuffer+nReadCount)){
2008262c:	9809883a 	mov	r4,r19
20082630:	e00b883a 	mov	r5,fp
20082634:	ad8f883a 	add	r7,r21,r22
20082638:	800d883a 	mov	r6,r16
2008263c:	00832400 	call	20083240 <fatReadMultiSecter>
			FAT_DEBUG(("[FAT] Fat_FileRead, couldn't read sectors: %d - %d\r\n", PhysicalSecter, nCopySectors));
			return FALSE;
        }
        SectorsToRead -= nCopySectors;
        //nReadCount += nCopySectors*pVol->BPB_BytsPerSec;
        nReadCount += nCopySectors << 9;
20082640:	8008927a 	slli	r4,r16,9
    		nCopySectors = SectorsToRead;
    	} else {
    		nCopySectors = pVol->BPB_SecPerCluster - SectorOffset;
    	}

        if(!fatReadMultiSecter(pVol, PhysicalSecter, nCopySectors, pBuffer+nReadCount)){
20082644:	10001126 	beq	r2,zero,2008268c <Fat_FileRead+0x180>
        //nReadCount += nCopySectors*pVol->BPB_BytsPerSec;
        nReadCount += nCopySectors << 9;
        PhysicalSecter += nCopySectors;

        // find next sector if all the sectors in current clusters are read and there is still data to read
        if(nCopySectors == (pVol->BPB_SecPerCluster - SectorOffset) && nReadCount < nBufferSize){
20082648:	98800817 	ldw	r2,32(r19)
			FAT_DEBUG(("[FAT] Fat_FileRead, couldn't read sectors: %d - %d\r\n", PhysicalSecter, nCopySectors));
			return FALSE;
        }
        SectorsToRead -= nCopySectors;
        //nReadCount += nCopySectors*pVol->BPB_BytsPerSec;
        nReadCount += nCopySectors << 9;
2008264c:	b12d883a 	add	r22,r22,r4

        if(!fatReadMultiSecter(pVol, PhysicalSecter, nCopySectors, pBuffer+nReadCount)){
			FAT_DEBUG(("[FAT] Fat_FileRead, couldn't read sectors: %d - %d\r\n", PhysicalSecter, nCopySectors));
			return FALSE;
        }
        SectorsToRead -= nCopySectors;
20082650:	9425c83a 	sub	r18,r18,r16
        //nReadCount += nCopySectors*pVol->BPB_BytsPerSec;
        nReadCount += nCopySectors << 9;
        PhysicalSecter += nCopySectors;

        // find next sector if all the sectors in current clusters are read and there is still data to read
        if(nCopySectors == (pVol->BPB_SecPerCluster - SectorOffset) && nReadCount < nBufferSize){
20082654:	15c9c83a 	sub	r4,r2,r23
			return FALSE;
        }
        SectorsToRead -= nCopySectors;
        //nReadCount += nCopySectors*pVol->BPB_BytsPerSec;
        nReadCount += nCopySectors << 9;
        PhysicalSecter += nCopySectors;
20082658:	e439883a 	add	fp,fp,r16

        // find next sector if all the sectors in current clusters are read and there is still data to read
        if(nCopySectors == (pVol->BPB_SecPerCluster - SectorOffset) && nReadCount < nBufferSize){
2008265c:	81001a26 	beq	r16,r4,200826c8 <Fat_FileRead+0x1bc>
    }

    //SectorsToRead = (nBufferSize - nReadCount)/pVol->BPB_BytsPerSec;
    SectorsToRead = (nBufferSize - nReadCount) >> 9;

    while(SectorsToRead > 0){
20082660:	903fef1e 	bne	r18,zero,20082620 <__flash_rwdata_start+0xfffe5fd8>
			PhysicalSecter = (Cluster-2)*pVol->BPB_SecPerCluster + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
			SectorOffset = 0;
        }
    }

    if(nReadCount < nBufferSize){
20082664:	d8c00117 	ldw	r3,4(sp)
20082668:	b0c07536 	bltu	r22,r3,20082840 <Fat_FileRead+0x334>
            f->Cluster = Cluster;
        }                    
    }
#endif
    
    if (bSuccess){
2008266c:	d8c00017 	ldw	r3,0(sp)
20082670:	18000626 	beq	r3,zero,2008268c <Fat_FileRead+0x180>
        f->SeekPos += nBufferSize;
20082674:	88c00217 	ldw	r3,8(r17)
20082678:	d9000117 	ldw	r4,4(sp)
2008267c:	00800044 	movi	r2,1
20082680:	192d883a 	add	r22,r3,r4
20082684:	8d800215 	stw	r22,8(r17)
20082688:	00000106 	br	20082690 <Fat_FileRead+0x184>
    alt_u32 BytesPerCluster, nReadCount=0, nClusterSeq;
    int s;
    bool bSuccess= TRUE;
    
    if (!f || !f->Fat)
        return FALSE;
2008268c:	0005883a 	mov	r2,zero
        f->SeekPos += nBufferSize;
    }        
        
    
    return bSuccess;
}
20082690:	dfc00b17 	ldw	ra,44(sp)
20082694:	df000a17 	ldw	fp,40(sp)
20082698:	ddc00917 	ldw	r23,36(sp)
2008269c:	dd800817 	ldw	r22,32(sp)
200826a0:	dd400717 	ldw	r21,28(sp)
200826a4:	dd000617 	ldw	r20,24(sp)
200826a8:	dcc00517 	ldw	r19,20(sp)
200826ac:	dc800417 	ldw	r18,16(sp)
200826b0:	dc400317 	ldw	r17,12(sp)
200826b4:	dc000217 	ldw	r16,8(sp)
200826b8:	dec00c04 	addi	sp,sp,48
200826bc:	f800283a 	ret
        return FALSE;
    pVol = (VOLUME_INFO *)f->Fat;        
    
    if (!f->IsOpened){
        FAT_DEBUG(("[FAT] Fat_FileRead, file not opened\r\n"));
        return bSuccess;
200826c0:	00800044 	movi	r2,1
200826c4:	003ff206 	br	20082690 <__flash_rwdata_start+0xfffe6048>
        //nReadCount += nCopySectors*pVol->BPB_BytsPerSec;
        nReadCount += nCopySectors << 9;
        PhysicalSecter += nCopySectors;

        // find next sector if all the sectors in current clusters are read and there is still data to read
        if(nCopySectors == (pVol->BPB_SecPerCluster - SectorOffset) && nReadCount < nBufferSize){
200826c8:	d8c00117 	ldw	r3,4(sp)
200826cc:	b0ffe42e 	bgeu	r22,r3,20082660 <__flash_rwdata_start+0xfffe6018>
			NextCluster = fatNextCluster(pVol, Cluster);
200826d0:	a00b883a 	mov	r5,r20
200826d4:	9809883a 	mov	r4,r19
200826d8:	0082b480 	call	20082b48 <fatNextCluster>
200826dc:	1029883a 	mov	r20,r2
			}else{
				Cluster = NextCluster;
			}
			f->ClusterSeq++;
			f->Cluster = Cluster;
			PhysicalSecter = (Cluster-2)*pVol->BPB_SecPerCluster + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
200826e0:	10ffff84 	addi	r3,r2,-2
        PhysicalSecter += nCopySectors;

        // find next sector if all the sectors in current clusters are read and there is still data to read
        if(nCopySectors == (pVol->BPB_SecPerCluster - SectorOffset) && nReadCount < nBufferSize){
			NextCluster = fatNextCluster(pVol, Cluster);
			if (NextCluster == 0){
200826e4:	103fe926 	beq	r2,zero,2008268c <__flash_rwdata_start+0xfffe6044>
			}else{
				Cluster = NextCluster;
			}
			f->ClusterSeq++;
			f->Cluster = Cluster;
			PhysicalSecter = (Cluster-2)*pVol->BPB_SecPerCluster + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
200826e8:	98800817 	ldw	r2,32(r19)
				FAT_DEBUG(("[FAT] Fat_FileRead, no next cluster\r\n"));
				return FALSE;
			}else{
				Cluster = NextCluster;
			}
			f->ClusterSeq++;
200826ec:	89000417 	ldw	r4,16(r17)
			f->Cluster = Cluster;
			PhysicalSecter = (Cluster-2)*pVol->BPB_SecPerCluster + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
200826f0:	9f001017 	ldw	fp,64(r19)
200826f4:	1887383a 	mul	r3,r3,r2
				FAT_DEBUG(("[FAT] Fat_FileRead, no next cluster\r\n"));
				return FALSE;
			}else{
				Cluster = NextCluster;
			}
			f->ClusterSeq++;
200826f8:	21000044 	addi	r4,r4,1
200826fc:	89000415 	stw	r4,16(r17)
			f->Cluster = Cluster;
20082700:	8d000315 	stw	r20,12(r17)
			PhysicalSecter = (Cluster-2)*pVol->BPB_SecPerCluster + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
20082704:	1f39883a 	add	fp,r3,fp
			SectorOffset = 0;
20082708:	002f883a 	mov	r23,zero
    }

    //SectorsToRead = (nBufferSize - nReadCount)/pVol->BPB_BytsPerSec;
    SectorsToRead = (nBufferSize - nReadCount) >> 9;

    while(SectorsToRead > 0){
2008270c:	903fc41e 	bne	r18,zero,20082620 <__flash_rwdata_start+0xfffe5fd8>
20082710:	003fd406 	br	20082664 <__flash_rwdata_start+0xfffe601c>
    }else if (BytesPerCluster == 32768){
        nClusterSeq = Pos >> 15;
        Pos -= (f->ClusterSeq << 15);
    }else if (BytesPerCluster == 16384){
        nClusterSeq = Pos >> 14;
        Pos -= (f->ClusterSeq << 14);
20082714:	20c00417 	ldw	r3,16(r4)
    	Pos -= (f->ClusterSeq << 16);
    }else if (BytesPerCluster == 32768){
        nClusterSeq = Pos >> 15;
        Pos -= (f->ClusterSeq << 15);
    }else if (BytesPerCluster == 16384){
        nClusterSeq = Pos >> 14;
20082718:	9004d3ba 	srli	r2,r18,14
        Pos -= (f->ClusterSeq << 14);
2008271c:	180893ba 	slli	r4,r3,14
20082720:	9125c83a 	sub	r18,r18,r4
20082724:	003f9c06 	br	20082598 <__flash_rwdata_start+0xfffe5f50>
            }else{
                Cluster = NextCluster;
            }        
            Pos -= BytesPerCluster;
            f->Cluster = Cluster;
            f->ClusterSeq++; 
20082728:	88800417 	ldw	r2,16(r17)
                bSuccess = FALSE;
                FAT_DEBUG(("[FAT] Fat_FileRead, no next Cluster, current Cluster=%d\r\n", Cluster));
            }else{
                Cluster = NextCluster;
            }        
            Pos -= BytesPerCluster;
2008272c:	9425c83a 	sub	r18,r18,r16
            f->Cluster = Cluster;
20082730:	8d000315 	stw	r20,12(r17)
            f->ClusterSeq++; 
20082734:	10800044 	addi	r2,r2,1
20082738:	88800415 	stw	r2,16(r17)
        // move to first clustor for reading
        while (Pos >= BytesPerCluster && bSuccess){
            // go to next cluster
            NextCluster = fatNextCluster(pVol, Cluster); 
            if (NextCluster == 0){
                bSuccess = FALSE;
2008273c:	d8000015 	stw	zero,0(sp)
20082740:	003fa506 	br	200825d8 <__flash_rwdata_start+0xfffe5f90>
    PhysicalSecter += SectorOffset;
    nReadCount = 0;

    // case: partial read of the first sector
    if((ByteOffset > 0) || (nBufferSize < 512)){
    	if(!fatReadSecter(pVol, PhysicalSecter)){
20082744:	9809883a 	mov	r4,r19
20082748:	e00b883a 	mov	r5,fp
2008274c:	00831d80 	call	200831d8 <fatReadSecter>
20082750:	103fce26 	beq	r2,zero,2008268c <__flash_rwdata_start+0xfffe6044>
			FAT_DEBUG(("[FAT] Fat_FileRead, couldn't read sector %d\r\n", PhysicalSecter));
			return FALSE;
        }

    	nCopyCount = nBufferSize > (512 - ByteOffset)? 512 - ByteOffset : nBufferSize;
20082754:	d8c00117 	ldw	r3,4(sp)
20082758:	02008004 	movi	r8,512
2008275c:	44adc83a 	sub	r22,r8,r18
20082760:	1d80012e 	bgeu	r3,r22,20082768 <Fat_FileRead+0x25c>
20082764:	182d883a 	mov	r22,r3
    	memcpy(pBuffer, pVol->Secter_Data+ByteOffset, nCopyCount);
20082768:	91401104 	addi	r5,r18,68
2008276c:	a809883a 	mov	r4,r21
20082770:	994b883a 	add	r5,r19,r5
20082774:	b00d883a 	mov	r6,r22
20082778:	008a1e00 	call	2008a1e0 <memcpy>
    	nReadCount = nCopyCount;

		if(nReadCount < nBufferSize && SectorOffset == pVol->BPB_SecPerCluster - 1){
2008277c:	d8c00117 	ldw	r3,4(sp)
20082780:	b0c0032e 	bgeu	r22,r3,20082790 <Fat_FileRead+0x284>
20082784:	9c000817 	ldw	r16,32(r19)
20082788:	80bfffc4 	addi	r2,r16,-1
2008278c:	15c01926 	beq	r2,r23,200827f4 <Fat_FileRead+0x2e8>
    		PhysicalSecter++;
    	}
    }

    //SectorsToRead = (nBufferSize - nReadCount)/pVol->BPB_BytsPerSec;
    SectorsToRead = (nBufferSize - nReadCount) >> 9;
20082790:	d8c00117 	ldw	r3,4(sp)
			f->ClusterSeq++;
			f->Cluster = Cluster;
			PhysicalSecter = (Cluster-2)*pVol->BPB_SecPerCluster + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
			SectorOffset = 0;
    	} else {
    		SectorOffset++;
20082794:	bdc00044 	addi	r23,r23,1
    		PhysicalSecter++;
20082798:	e7000044 	addi	fp,fp,1
    	}
    }

    //SectorsToRead = (nBufferSize - nReadCount)/pVol->BPB_BytsPerSec;
    SectorsToRead = (nBufferSize - nReadCount) >> 9;
2008279c:	1da5c83a 	sub	r18,r3,r22
200827a0:	9024d27a 	srli	r18,r18,9

    while(SectorsToRead > 0){
200827a4:	903faf26 	beq	r18,zero,20082664 <__flash_rwdata_start+0xfffe601c>
200827a8:	9c000817 	ldw	r16,32(r19)
200827ac:	003f9b06 	br	2008261c <__flash_rwdata_start+0xfffe5fd4>
        
    BytesPerCluster = pVol->nBytesPerCluster; //gVolumeInfo.BPB_BytsPerSec * gVolumeInfo.BPB_SecPerCluster;  
    Pos = f->SeekPos;
    if (BytesPerCluster == 65536){
    	nClusterSeq = Pos >> 16;
    	Pos -= (f->ClusterSeq << 16);
200827b0:	20c00417 	ldw	r3,16(r4)
    }        
        
    BytesPerCluster = pVol->nBytesPerCluster; //gVolumeInfo.BPB_BytsPerSec * gVolumeInfo.BPB_SecPerCluster;  
    Pos = f->SeekPos;
    if (BytesPerCluster == 65536){
    	nClusterSeq = Pos >> 16;
200827b4:	9004d43a 	srli	r2,r18,16
    	Pos -= (f->ClusterSeq << 16);
200827b8:	1808943a 	slli	r4,r3,16
200827bc:	9125c83a 	sub	r18,r18,r4
200827c0:	003f7506 	br	20082598 <__flash_rwdata_start+0xfffe5f50>
    alt_u32 BytesPerCluster, nReadCount=0, nClusterSeq;
    int s;
    bool bSuccess= TRUE;
    
    if (!f || !f->Fat)
        return FALSE;
200827c4:	0005883a 	mov	r2,zero
        f->SeekPos += nBufferSize;
    }        
        
    
    return bSuccess;
}
200827c8:	f800283a 	ret
    if (BytesPerCluster == 65536){
    	nClusterSeq = Pos >> 16;
    	Pos -= (f->ClusterSeq << 16);
    }else if (BytesPerCluster == 32768){
        nClusterSeq = Pos >> 15;
        Pos -= (f->ClusterSeq << 15);
200827cc:	20c00417 	ldw	r3,16(r4)
    Pos = f->SeekPos;
    if (BytesPerCluster == 65536){
    	nClusterSeq = Pos >> 16;
    	Pos -= (f->ClusterSeq << 16);
    }else if (BytesPerCluster == 32768){
        nClusterSeq = Pos >> 15;
200827d0:	9004d3fa 	srli	r2,r18,15
        Pos -= (f->ClusterSeq << 15);
200827d4:	180893fa 	slli	r4,r3,15
200827d8:	9125c83a 	sub	r18,r18,r4
200827dc:	003f6e06 	br	20082598 <__flash_rwdata_start+0xfffe5f50>
    }else if (BytesPerCluster == 16384){
        nClusterSeq = Pos >> 14;
        Pos -= (f->ClusterSeq << 14);
    }else if (BytesPerCluster == 2048){
        nClusterSeq = Pos >> 11;
        Pos -= (f->ClusterSeq << 11);
200827e0:	20c00417 	ldw	r3,16(r4)
        Pos -= (f->ClusterSeq << 15);
    }else if (BytesPerCluster == 16384){
        nClusterSeq = Pos >> 14;
        Pos -= (f->ClusterSeq << 14);
    }else if (BytesPerCluster == 2048){
        nClusterSeq = Pos >> 11;
200827e4:	9004d2fa 	srli	r2,r18,11
        Pos -= (f->ClusterSeq << 11);
200827e8:	180892fa 	slli	r4,r3,11
200827ec:	9125c83a 	sub	r18,r18,r4
200827f0:	003f6906 	br	20082598 <__flash_rwdata_start+0xfffe5f50>
    	memcpy(pBuffer, pVol->Secter_Data+ByteOffset, nCopyCount);
    	nReadCount = nCopyCount;

		if(nReadCount < nBufferSize && SectorOffset == pVol->BPB_SecPerCluster - 1){
			// case: last sector of the cluster
			NextCluster = fatNextCluster(pVol, Cluster);
200827f4:	a00b883a 	mov	r5,r20
200827f8:	9809883a 	mov	r4,r19
200827fc:	0082b480 	call	20082b48 <fatNextCluster>
20082800:	1029883a 	mov	r20,r2
			if (NextCluster == 0){
20082804:	103fa126 	beq	r2,zero,2008268c <__flash_rwdata_start+0xfffe6044>
    		PhysicalSecter++;
    	}
    }

    //SectorsToRead = (nBufferSize - nReadCount)/pVol->BPB_BytsPerSec;
    SectorsToRead = (nBufferSize - nReadCount) >> 9;
20082808:	d9000117 	ldw	r4,4(sp)
			}

			Cluster = NextCluster;
			f->ClusterSeq++;
			f->Cluster = Cluster;
			PhysicalSecter = (Cluster-2)*pVol->BPB_SecPerCluster + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
2008280c:	9c000817 	ldw	r16,32(r19)
				FAT_DEBUG(("[FAT] Fat_FileRead, no next cluster\r\n"));
				return FALSE;
			}

			Cluster = NextCluster;
			f->ClusterSeq++;
20082810:	88c00417 	ldw	r3,16(r17)
			f->Cluster = Cluster;
			PhysicalSecter = (Cluster-2)*pVol->BPB_SecPerCluster + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
20082814:	10bfff84 	addi	r2,r2,-2
    		PhysicalSecter++;
    	}
    }

    //SectorsToRead = (nBufferSize - nReadCount)/pVol->BPB_BytsPerSec;
    SectorsToRead = (nBufferSize - nReadCount) >> 9;
20082818:	25a5c83a 	sub	r18,r4,r22
			}

			Cluster = NextCluster;
			f->ClusterSeq++;
			f->Cluster = Cluster;
			PhysicalSecter = (Cluster-2)*pVol->BPB_SecPerCluster + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
2008281c:	9f001017 	ldw	fp,64(r19)
20082820:	1405383a 	mul	r2,r2,r16
    		PhysicalSecter++;
    	}
    }

    //SectorsToRead = (nBufferSize - nReadCount)/pVol->BPB_BytsPerSec;
    SectorsToRead = (nBufferSize - nReadCount) >> 9;
20082824:	9024d27a 	srli	r18,r18,9
				FAT_DEBUG(("[FAT] Fat_FileRead, no next cluster\r\n"));
				return FALSE;
			}

			Cluster = NextCluster;
			f->ClusterSeq++;
20082828:	18c00044 	addi	r3,r3,1
2008282c:	88c00415 	stw	r3,16(r17)
			f->Cluster = Cluster;
20082830:	8d000315 	stw	r20,12(r17)
			PhysicalSecter = (Cluster-2)*pVol->BPB_SecPerCluster + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
20082834:	1739883a 	add	fp,r2,fp
			SectorOffset = 0;
20082838:	002f883a 	mov	r23,zero
    }

    //SectorsToRead = (nBufferSize - nReadCount)/pVol->BPB_BytsPerSec;
    SectorsToRead = (nBufferSize - nReadCount) >> 9;

    while(SectorsToRead > 0){
2008283c:	903f771e 	bne	r18,zero,2008261c <__flash_rwdata_start+0xfffe5fd4>
			SectorOffset = 0;
        }
    }

    if(nReadCount < nBufferSize){
    	if(!fatReadSecter(pVol, PhysicalSecter)){
20082840:	9809883a 	mov	r4,r19
20082844:	e00b883a 	mov	r5,fp
20082848:	00831d80 	call	200831d8 <fatReadSecter>
2008284c:	103f8f26 	beq	r2,zero,2008268c <__flash_rwdata_start+0xfffe6044>
			FAT_DEBUG(("[FAT] Fat_FileRead, couldn't read sector\r\n"));
			return FALSE;
        }

    	nCopyCount = nBufferSize - nReadCount;
    	memcpy(pBuffer+nReadCount, pVol->Secter_Data, nCopyCount);
20082850:	d8c00117 	ldw	r3,4(sp)
20082854:	ad89883a 	add	r4,r21,r22
20082858:	99401104 	addi	r5,r19,68
2008285c:	1d8dc83a 	sub	r6,r3,r22
20082860:	008a1e00 	call	2008a1e0 <memcpy>
20082864:	003f8106 	br	2008266c <__flash_rwdata_start+0xfffe6024>

20082868 <Fat_FileSeek>:
bool Fat_FileSeek(FAT_FILE_HANDLE hFileHandle, const FAT_SEEK_POS SeekPos, const int nOffset){
    FAT_FILE_INFO *f = (FAT_FILE_INFO *)hFileHandle;
    VOLUME_INFO *pVol;
    bool bSuccess= TRUE;

    if (!f || !f->Fat)
20082868:	20001026 	beq	r4,zero,200828ac <Fat_FileSeek+0x44>
2008286c:	20804f17 	ldw	r2,316(r4)
20082870:	10000e26 	beq	r2,zero,200828ac <Fat_FileSeek+0x44>
        return FALSE;
    pVol = (VOLUME_INFO *)f->Fat;        
    
    if (!f->IsOpened)
20082874:	20800017 	ldw	r2,0(r4)
20082878:	10000d26 	beq	r2,zero,200828b0 <Fat_FileSeek+0x48>
        return FALSE;
        
    switch(SeekPos){
2008287c:	00800044 	movi	r2,1
20082880:	28800c26 	beq	r5,r2,200828b4 <Fat_FileSeek+0x4c>
20082884:	28000e26 	beq	r5,zero,200828c0 <Fat_FileSeek+0x58>
20082888:	00c00084 	movi	r3,2
2008288c:	28c0111e 	bne	r5,r3,200828d4 <Fat_FileSeek+0x6c>
            break;
        case FILE_SEEK_CURRENT: 
            f->SeekPos += nOffset; 
            break;
        case FILE_SEEK_END: 
            f->SeekPos = f->Directory.FileSize+nOffset; 
20082890:	20c04e17 	ldw	r3,312(r4)
            bSuccess = FALSE;
            break;    
              
    }
    f->Cluster = f->Directory.FirstLogicalCluster;
    f->ClusterSeq = 0;
20082894:	20000415 	stw	zero,16(r4)
            break;
        case FILE_SEEK_CURRENT: 
            f->SeekPos += nOffset; 
            break;
        case FILE_SEEK_END: 
            f->SeekPos = f->Directory.FileSize+nOffset; 
20082898:	30cd883a 	add	r6,r6,r3
        default:
            bSuccess = FALSE;
            break;    
              
    }
    f->Cluster = f->Directory.FirstLogicalCluster;
2008289c:	20c04d8b 	ldhu	r3,310(r4)
            break;
        case FILE_SEEK_CURRENT: 
            f->SeekPos += nOffset; 
            break;
        case FILE_SEEK_END: 
            f->SeekPos = f->Directory.FileSize+nOffset; 
200828a0:	21800215 	stw	r6,8(r4)
        default:
            bSuccess = FALSE;
            break;    
              
    }
    f->Cluster = f->Directory.FirstLogicalCluster;
200828a4:	20c00315 	stw	r3,12(r4)
    f->ClusterSeq = 0;
    
    return bSuccess;
200828a8:	f800283a 	ret
    FAT_FILE_INFO *f = (FAT_FILE_INFO *)hFileHandle;
    VOLUME_INFO *pVol;
    bool bSuccess= TRUE;

    if (!f || !f->Fat)
        return FALSE;
200828ac:	0005883a 	mov	r2,zero
    f->Cluster = f->Directory.FirstLogicalCluster;
    f->ClusterSeq = 0;
    
    return bSuccess;
    
}
200828b0:	f800283a 	ret
    switch(SeekPos){
        case FILE_SEEK_BEGIN: 
            f->SeekPos = nOffset; 
            break;
        case FILE_SEEK_CURRENT: 
            f->SeekPos += nOffset; 
200828b4:	20c00217 	ldw	r3,8(r4)


bool Fat_FileSeek(FAT_FILE_HANDLE hFileHandle, const FAT_SEEK_POS SeekPos, const int nOffset){
    FAT_FILE_INFO *f = (FAT_FILE_INFO *)hFileHandle;
    VOLUME_INFO *pVol;
    bool bSuccess= TRUE;
200828b8:	2805883a 	mov	r2,r5
    switch(SeekPos){
        case FILE_SEEK_BEGIN: 
            f->SeekPos = nOffset; 
            break;
        case FILE_SEEK_CURRENT: 
            f->SeekPos += nOffset; 
200828bc:	198d883a 	add	r6,r3,r6
        default:
            bSuccess = FALSE;
            break;    
              
    }
    f->Cluster = f->Directory.FirstLogicalCluster;
200828c0:	20c04d8b 	ldhu	r3,310(r4)
    switch(SeekPos){
        case FILE_SEEK_BEGIN: 
            f->SeekPos = nOffset; 
            break;
        case FILE_SEEK_CURRENT: 
            f->SeekPos += nOffset; 
200828c4:	21800215 	stw	r6,8(r4)
            bSuccess = FALSE;
            break;    
              
    }
    f->Cluster = f->Directory.FirstLogicalCluster;
    f->ClusterSeq = 0;
200828c8:	20000415 	stw	zero,16(r4)
        default:
            bSuccess = FALSE;
            break;    
              
    }
    f->Cluster = f->Directory.FirstLogicalCluster;
200828cc:	20c00315 	stw	r3,12(r4)
    f->ClusterSeq = 0;
    
    return bSuccess;
200828d0:	f800283a 	ret
        default:
            bSuccess = FALSE;
            break;    
              
    }
    f->Cluster = f->Directory.FirstLogicalCluster;
200828d4:	20c04d8b 	ldhu	r3,310(r4)
            break;
        case FILE_SEEK_END: 
            f->SeekPos = f->Directory.FileSize+nOffset; 
            break;
        default:
            bSuccess = FALSE;
200828d8:	0005883a 	mov	r2,zero
            break;    
              
    }
    f->Cluster = f->Directory.FirstLogicalCluster;
    f->ClusterSeq = 0;
200828dc:	20000415 	stw	zero,16(r4)
        default:
            bSuccess = FALSE;
            break;    
              
    }
    f->Cluster = f->Directory.FirstLogicalCluster;
200828e0:	20c00315 	stw	r3,12(r4)
    f->ClusterSeq = 0;
    
    return bSuccess;
200828e4:	f800283a 	ret

200828e8 <Fat_FileClose>:
    
}

void Fat_FileClose(FAT_FILE_HANDLE hFileHandle){
200828e8:	f800283a 	ret

200828ec <Fat_SpeedTest>:
    alt_u32 time_start, time_finish, time_elapsed, TotalReadBytes=0;
    int nSecter = 0;
    float fMegaBytePerSec = 0;
    char szBlock[512];
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
    if (!pVol)
200828ec:	20005726 	beq	r4,zero,20082a4c <Fat_SpeedTest+0x160>
    //free(f);
}



float Fat_SpeedTest(FAT_HANDLE hFat, alt_u32 TestDurInMs){
200828f0:	deff7904 	addi	sp,sp,-540
200828f4:	dd008415 	stw	r20,528(sp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
200828f8:	05000034 	movhi	r20,0
200828fc:	a50a3604 	addi	r20,r20,10456
20082900:	dc008015 	stw	r16,512(sp)
20082904:	a4000017 	ldw	r16,0(r20)
20082908:	dc408115 	stw	r17,516(sp)
2008290c:	2023883a 	mov	r17,r4
    char szBlock[512];
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
    if (!pVol)
        return 0;
    time_start = alt_nticks();
    time_finish = alt_nticks() + TestDurInMs * 1000 / alt_ticks_per_second();
20082910:	2900fa24 	muli	r4,r5,1000
    //free(f);
}



float Fat_SpeedTest(FAT_HANDLE hFat, alt_u32 TestDurInMs){
20082914:	dc808215 	stw	r18,520(sp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
20082918:	04800034 	movhi	r18,0
2008291c:	948a3704 	addi	r18,r18,10460
    char szBlock[512];
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
    if (!pVol)
        return 0;
    time_start = alt_nticks();
    time_finish = alt_nticks() + TestDurInMs * 1000 / alt_ticks_per_second();
20082920:	800b883a 	mov	r5,r16
    //free(f);
}



float Fat_SpeedTest(FAT_HANDLE hFat, alt_u32 TestDurInMs){
20082924:	dd408515 	stw	r21,532(sp)
20082928:	dcc08315 	stw	r19,524(sp)
2008292c:	95400017 	ldw	r21,0(r18)
20082930:	dfc08615 	stw	ra,536(sp)
20082934:	94c00017 	ldw	r19,0(r18)
    char szBlock[512];
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
    if (!pVol)
        return 0;
    time_start = alt_nticks();
    time_finish = alt_nticks() + TestDurInMs * 1000 / alt_ticks_per_second();
20082938:	00867940 	call	20086794 <__udivsi3>
2008293c:	90c00017 	ldw	r3,0(r18)
20082940:	14e7883a 	add	r19,r2,r19
    while(alt_nticks() < time_finish && bSuccess){
20082944:	1cc0432e 	bgeu	r3,r19,20082a54 <Fat_SpeedTest+0x168>
20082948:	0021883a 	mov	r16,zero
2008294c:	00000106 	br	20082954 <Fat_SpeedTest+0x68>
20082950:	10003a26 	beq	r2,zero,20082a3c <Fat_SpeedTest+0x150>
        bSuccess = pVol->ReadBlock512(pVol->DiskHandle, nSecter, szBlock);
20082954:	88c00117 	ldw	r3,4(r17)
20082958:	89000017 	ldw	r4,0(r17)
2008295c:	800b883a 	mov	r5,r16
20082960:	d80d883a 	mov	r6,sp
20082964:	183ee83a 	callr	r3
20082968:	90c00017 	ldw	r3,0(r18)
        nSecter++;
2008296c:	84000044 	addi	r16,r16,1
20082970:	8008927a 	slli	r4,r16,9
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
    if (!pVol)
        return 0;
    time_start = alt_nticks();
    time_finish = alt_nticks() + TestDurInMs * 1000 / alt_ticks_per_second();
    while(alt_nticks() < time_finish && bSuccess){
20082974:	1cfff636 	bltu	r3,r19,20082950 <__flash_rwdata_start+0xfffe6308>
        bSuccess = pVol->ReadBlock512(pVol->DiskHandle, nSecter, szBlock);
        nSecter++;
        TotalReadBytes += sizeof(szBlock);
        
    }        
    if (bSuccess){
20082978:	10003026 	beq	r2,zero,20082a3c <Fat_SpeedTest+0x150>
2008297c:	00870180 	call	20087018 <__floatunsisf>
20082980:	a4000017 	ldw	r16,0(r20)
20082984:	1027883a 	mov	r19,r2
        time_elapsed = alt_nticks() - time_start;
        fMegaBytePerSec = (float)TotalReadBytes * (float)alt_ticks_per_second() / (float)time_elapsed / 1024.0 / 1024.0;
20082988:	8009883a 	mov	r4,r16
2008298c:	00870180 	call	20087018 <__floatunsisf>
20082990:	94400017 	ldw	r17,0(r18)
20082994:	980b883a 	mov	r5,r19
20082998:	1009883a 	mov	r4,r2
2008299c:	0086bf40 	call	20086bf4 <__mulsf3>
200829a0:	8d49c83a 	sub	r4,r17,r21
200829a4:	1021883a 	mov	r16,r2
200829a8:	00870180 	call	20087018 <__floatunsisf>
200829ac:	8009883a 	mov	r4,r16
200829b0:	100b883a 	mov	r5,r2
200829b4:	00867a40 	call	200867a4 <__divsf3>
200829b8:	1009883a 	mov	r4,r2
200829bc:	00894800 	call	20089480 <__extendsfdf2>
200829c0:	1009883a 	mov	r4,r2
200829c4:	180b883a 	mov	r5,r3
200829c8:	000d883a 	mov	r6,zero
200829cc:	01cfd434 	movhi	r7,16208
200829d0:	00882900 	call	20088290 <__muldf3>
200829d4:	000d883a 	mov	r6,zero
200829d8:	01cfd434 	movhi	r7,16208
200829dc:	1009883a 	mov	r4,r2
200829e0:	180b883a 	mov	r5,r3
200829e4:	00882900 	call	20088290 <__muldf3>
200829e8:	180b883a 	mov	r5,r3
200829ec:	1009883a 	mov	r4,r2
200829f0:	00895900 	call	20089590 <__truncdfsf2>
200829f4:	1009883a 	mov	r4,r2
200829f8:	1021883a 	mov	r16,r2
200829fc:	00894800 	call	20089480 <__extendsfdf2>
20082a00:	100b883a 	mov	r5,r2
20082a04:	180d883a 	mov	r6,r3
    } 
    
    printf("\n--------speed:%f---------\n",fMegaBytePerSec);       
20082a08:	01000034 	movhi	r4,0
20082a0c:	21007f04 	addi	r4,r4,508
20082a10:	008a4680 	call	2008a468 <printf>
    return fMegaBytePerSec;
20082a14:	8005883a 	mov	r2,r16
    
   
}
20082a18:	dfc08617 	ldw	ra,536(sp)
20082a1c:	dd408517 	ldw	r21,532(sp)
20082a20:	dd008417 	ldw	r20,528(sp)
20082a24:	dcc08317 	ldw	r19,524(sp)
20082a28:	dc808217 	ldw	r18,520(sp)
20082a2c:	dc408117 	ldw	r17,516(sp)
20082a30:	dc008017 	ldw	r16,512(sp)
20082a34:	dec08704 	addi	sp,sp,540
20082a38:	f800283a 	ret
20082a3c:	000b883a 	mov	r5,zero
20082a40:	000d883a 	mov	r6,zero

float Fat_SpeedTest(FAT_HANDLE hFat, alt_u32 TestDurInMs){
    bool bSuccess = TRUE;
    alt_u32 time_start, time_finish, time_elapsed, TotalReadBytes=0;
    int nSecter = 0;
    float fMegaBytePerSec = 0;
20082a44:	0021883a 	mov	r16,zero
20082a48:	003fef06 	br	20082a08 <__flash_rwdata_start+0xfffe63c0>
    char szBlock[512];
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
    if (!pVol)
        return 0;
20082a4c:	0005883a 	mov	r2,zero
20082a50:	f800283a 	ret
    time_start = alt_nticks();
    time_finish = alt_nticks() + TestDurInMs * 1000 / alt_ticks_per_second();
    while(alt_nticks() < time_finish && bSuccess){
20082a54:	0027883a 	mov	r19,zero
20082a58:	003fcb06 	br	20082988 <__flash_rwdata_start+0xfffe6340>

20082a5c <SD_ReadBlock512>:

//===================== SUPPORT_SD_CARD =================================================
#ifdef SUPPORT_SD_CARD

bool SD_ReadBlock512(DISK_HANDLE DiskHandle, alt_u32 PysicalSelector, alt_u8 szBuf[512]){
    return SDLIB_ReadBlock512(PysicalSelector, szBuf);
20082a5c:	2809883a 	mov	r4,r5
20082a60:	300b883a 	mov	r5,r6
20082a64:	00851b41 	jmpi	200851b4 <SDLIB_ReadBlock512>

20082a68 <SD_ReadBlocks>:
}

bool SD_ReadBlocks(DISK_HANDLE DiskHandle, alt_u32 PysicalSelector, alt_u32 n, alt_u8* szBuf){
    return SDLIB_ReadBlocks(PysicalSelector, n, szBuf);
20082a68:	2809883a 	mov	r4,r5
20082a6c:	300b883a 	mov	r5,r6
20082a70:	380d883a 	mov	r6,r7
20082a74:	00851e41 	jmpi	200851e4 <SDLIB_ReadBlocks>

20082a78 <fat16ClusterType>:

VOLUME_INFO vInfo;

CLUSTER_TYPE fat16ClusterType(alt_u32 Fat){
    CLUSTER_TYPE Type;
    Fat = Fat & 0xFFFF; // 16 bits
20082a78:	213fffcc 	andi	r4,r4,65535
    
    if (Fat > 0 && Fat < 0xFFF0)
20082a7c:	20ffffc4 	addi	r3,r4,-1
20082a80:	017ffb94 	movui	r5,65518
20082a84:	28c00236 	bltu	r5,r3,20082a90 <fat16ClusterType+0x18>
        Type = CLUSTER_NEXT_INFILE;
20082a88:	00800104 	movi	r2,4
20082a8c:	f800283a 	ret
    else if (Fat >= 0xFFF8) // && Fat <= (unsigned short)0xFFFF)
20082a90:	00fffdd4 	movui	r3,65527
20082a94:	1900022e 	bgeu	r3,r4,20082aa0 <fat16ClusterType+0x28>
        Type = CLUSTER_LAST_INFILE;
20082a98:	008000c4 	movi	r2,3
20082a9c:	f800283a 	ret
    else if (Fat == (alt_u16)0x00)
20082aa0:	20000926 	beq	r4,zero,20082ac8 <fat16ClusterType+0x50>
        Type = CLUSTER_UNUSED;
    else if (Fat >= 0xFFF0 && Fat <= 0xFFF6)
20082aa4:	017ffff4 	movhi	r5,65535
20082aa8:	29400404 	addi	r5,r5,16
20082aac:	214b883a 	add	r5,r4,r5
20082ab0:	01800184 	movi	r6,6
20082ab4:	3140022e 	bgeu	r6,r5,20082ac0 <fat16ClusterType+0x48>
        Type = CLUSTER_RESERVED;
    else if (Fat == 0xFFF7)
20082ab8:	20c00526 	beq	r4,r3,20082ad0 <fat16ClusterType+0x58>
        Type = CLUSTER_BAD;
        
    return Type;        
         
}
20082abc:	f800283a 	ret
    else if (Fat >= 0xFFF8) // && Fat <= (unsigned short)0xFFFF)
        Type = CLUSTER_LAST_INFILE;
    else if (Fat == (alt_u16)0x00)
        Type = CLUSTER_UNUSED;
    else if (Fat >= 0xFFF0 && Fat <= 0xFFF6)
        Type = CLUSTER_RESERVED;
20082ac0:	00800044 	movi	r2,1
20082ac4:	003ffd06 	br	20082abc <__flash_rwdata_start+0xfffe6474>
    if (Fat > 0 && Fat < 0xFFF0)
        Type = CLUSTER_NEXT_INFILE;
    else if (Fat >= 0xFFF8) // && Fat <= (unsigned short)0xFFFF)
        Type = CLUSTER_LAST_INFILE;
    else if (Fat == (alt_u16)0x00)
        Type = CLUSTER_UNUSED;
20082ac8:	0005883a 	mov	r2,zero
20082acc:	f800283a 	ret
    else if (Fat >= 0xFFF0 && Fat <= 0xFFF6)
        Type = CLUSTER_RESERVED;
    else if (Fat == 0xFFF7)
        Type = CLUSTER_BAD;
20082ad0:	00800084 	movi	r2,2
20082ad4:	f800283a 	ret

20082ad8 <fat32ClusterType>:
         
}

CLUSTER_TYPE fat32ClusterType(alt_u32 Fat){
    CLUSTER_TYPE Type;
    Fat = Fat & 0xFFFFFFF; // 28 bits
20082ad8:	00c40034 	movhi	r3,4096
20082adc:	18ffffc4 	addi	r3,r3,-1
20082ae0:	20c8703a 	and	r4,r4,r3
    
    if (Fat > 0 && Fat < 0xFFFFFF0)
20082ae4:	01440034 	movhi	r5,4096
20082ae8:	20ffffc4 	addi	r3,r4,-1
20082aec:	297ffb84 	addi	r5,r5,-18
20082af0:	28c00236 	bltu	r5,r3,20082afc <fat32ClusterType+0x24>
        Type = CLUSTER_NEXT_INFILE;
20082af4:	00800104 	movi	r2,4
20082af8:	f800283a 	ret
    else if (Fat >= 0xFFFFFF8) // && Fat <= (unsigned short)0xFFFF)
20082afc:	00c40034 	movhi	r3,4096
20082b00:	18fffdc4 	addi	r3,r3,-9
20082b04:	1900022e 	bgeu	r3,r4,20082b10 <fat32ClusterType+0x38>
        Type = CLUSTER_LAST_INFILE;
20082b08:	008000c4 	movi	r2,3
20082b0c:	f800283a 	ret
    else if (Fat == (alt_u32)0x00)
20082b10:	20000926 	beq	r4,zero,20082b38 <fat32ClusterType+0x60>
        Type = CLUSTER_UNUSED;
    else if (Fat >= 0xFFFFFF0 && Fat <= 0xFFFFFF6)
20082b14:	017c0034 	movhi	r5,61440
20082b18:	29400404 	addi	r5,r5,16
20082b1c:	214b883a 	add	r5,r4,r5
20082b20:	01800184 	movi	r6,6
20082b24:	3140022e 	bgeu	r6,r5,20082b30 <fat32ClusterType+0x58>
        Type = CLUSTER_RESERVED;
    else if (Fat == 0xFFFFFF7)
20082b28:	20c00526 	beq	r4,r3,20082b40 <fat32ClusterType+0x68>
        Type = CLUSTER_BAD;
        
    return Type;        
         
}
20082b2c:	f800283a 	ret
    else if (Fat >= 0xFFFFFF8) // && Fat <= (unsigned short)0xFFFF)
        Type = CLUSTER_LAST_INFILE;
    else if (Fat == (alt_u32)0x00)
        Type = CLUSTER_UNUSED;
    else if (Fat >= 0xFFFFFF0 && Fat <= 0xFFFFFF6)
        Type = CLUSTER_RESERVED;
20082b30:	00800044 	movi	r2,1
20082b34:	003ffd06 	br	20082b2c <__flash_rwdata_start+0xfffe64e4>
    if (Fat > 0 && Fat < 0xFFFFFF0)
        Type = CLUSTER_NEXT_INFILE;
    else if (Fat >= 0xFFFFFF8) // && Fat <= (unsigned short)0xFFFF)
        Type = CLUSTER_LAST_INFILE;
    else if (Fat == (alt_u32)0x00)
        Type = CLUSTER_UNUSED;
20082b38:	0005883a 	mov	r2,zero
20082b3c:	f800283a 	ret
    else if (Fat >= 0xFFFFFF0 && Fat <= 0xFFFFFF6)
        Type = CLUSTER_RESERVED;
    else if (Fat == 0xFFFFFF7)
        Type = CLUSTER_BAD;
20082b40:	00800084 	movi	r2,2
20082b44:	f800283a 	ret

20082b48 <fatNextCluster>:
        
    return Type;        
         
}

alt_u32 fatNextCluster(VOLUME_INFO *pVol, alt_u32 ThisCluster){
20082b48:	defff804 	addi	sp,sp,-32
20082b4c:	dcc00315 	stw	r19,12(sp)
    CLUSTER_TYPE ClusterType;
    alt_u32 NextCluster;

    alt_32 nFatEntryPerSecter;
    const alt_32 nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
20082b50:	24c00417 	ldw	r19,16(r4)
        
    return Type;        
         
}

alt_u32 fatNextCluster(VOLUME_INFO *pVol, alt_u32 ThisCluster){
20082b54:	dd400515 	stw	r21,20(sp)
20082b58:	dc000015 	stw	r16,0(sp)
20082b5c:	dfc00715 	stw	ra,28(sp)
20082b60:	dd800615 	stw	r22,24(sp)
20082b64:	dd000415 	stw	r20,16(sp)
20082b68:	dc800215 	stw	r18,8(sp)
20082b6c:	dc400115 	stw	r17,4(sp)
    CLUSTER_TYPE ClusterType;
    alt_u32 NextCluster;

    alt_32 nFatEntryPerSecter;
    const alt_32 nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
20082b70:	008002c4 	movi	r2,11
        
    return Type;        
         
}

alt_u32 fatNextCluster(VOLUME_INFO *pVol, alt_u32 ThisCluster){
20082b74:	2021883a 	mov	r16,r4
20082b78:	282b883a 	mov	r21,r5
    CLUSTER_TYPE ClusterType;
    alt_u32 NextCluster;

    alt_32 nFatEntryPerSecter;
    const alt_32 nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
20082b7c:	98803f26 	beq	r19,r2,20082c7c <fatNextCluster+0x134>
20082b80:	04400084 	movi	r17,2
    alt_u32 Secter;
   // char szBlock[512];
    nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize; 
20082b84:	84800717 	ldw	r18,28(r16)
20082b88:	880b883a 	mov	r5,r17
20082b8c:	9009883a 	mov	r4,r18
20082b90:	00867940 	call	20086794 <__udivsi3>
    Secter = pVol->FatEntrySecter + (ThisCluster*nFatEntrySize)/pVol->BPB_BytsPerSec;
20082b94:	8d49383a 	mul	r4,r17,r21
20082b98:	900b883a 	mov	r5,r18

    alt_32 nFatEntryPerSecter;
    const alt_32 nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
    alt_u32 Secter;
   // char szBlock[512];
    nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize; 
20082b9c:	102d883a 	mov	r22,r2
    Secter = pVol->FatEntrySecter + (ThisCluster*nFatEntrySize)/pVol->BPB_BytsPerSec;
20082ba0:	00867940 	call	20086794 <__udivsi3>
20082ba4:	84800e17 	ldw	r18,56(r16)
//=================================================================================
//// add in v2.0
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
    bool bSuccess = TRUE;
    static char temp[512];
    if (nSecter != pVol->Secter_Index){
20082ba8:	80c09117 	ldw	r3,580(r16)
    alt_32 nFatEntryPerSecter;
    const alt_32 nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
    alt_u32 Secter;
   // char szBlock[512];
    nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize; 
    Secter = pVol->FatEntrySecter + (ThisCluster*nFatEntrySize)/pVol->BPB_BytsPerSec;
20082bac:	14a5883a 	add	r18,r2,r18
//=================================================================================
//// add in v2.0
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
    bool bSuccess = TRUE;
    static char temp[512];
    if (nSecter != pVol->Secter_Index){
20082bb0:	90c00826 	beq	r18,r3,20082bd4 <fatNextCluster+0x8c>
        if (!pVol->ReadBlock512(pVol->DiskHandle, nSecter, pVol->Secter_Data)){
20082bb4:	80800117 	ldw	r2,4(r16)
20082bb8:	81000017 	ldw	r4,0(r16)
20082bbc:	900b883a 	mov	r5,r18
20082bc0:	81801104 	addi	r6,r16,68
20082bc4:	103ee83a 	callr	r2
20082bc8:	10002426 	beq	r2,zero,20082c5c <fatNextCluster+0x114>
20082bcc:	84c00417 	ldw	r19,16(r16)
            pVol->Secter_Index = -1;
            bSuccess = FALSE;
        }else{
            pVol->Secter_Index = nSecter;
20082bd0:	84809115 	stw	r18,580(r16)
   // char szBlock[512];
    nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize; 
    Secter = pVol->FatEntrySecter + (ThisCluster*nFatEntrySize)/pVol->BPB_BytsPerSec;
    //if (pVol->ReadBlock512(pVol->DiskHandle, Secter,szBlock)){
    if (fatReadSecter(pVol, Secter)){
        if (pVol->Partition_Type == PARTITION_FAT32){
20082bd4:	008002c4 	movi	r2,11
20082bd8:	98802a26 	beq	r19,r2,20082c84 <fatNextCluster+0x13c>
            NextCluster = *(alt_u32*)(pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize); 
            ClusterType = fat32ClusterType(NextCluster);
        }else{
            NextCluster = *(alt_u16 *)(pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize); 
20082bdc:	a809883a 	mov	r4,r21
20082be0:	b00b883a 	mov	r5,r22
20082be4:	008679c0 	call	2008679c <__umodsi3>
20082be8:	1445383a 	mul	r2,r2,r17

CLUSTER_TYPE fat16ClusterType(alt_u32 Fat){
    CLUSTER_TYPE Type;
    Fat = Fat & 0xFFFF; // 16 bits
    
    if (Fat > 0 && Fat < 0xFFF0)
20082bec:	013ffb94 	movui	r4,65518
    if (fatReadSecter(pVol, Secter)){
        if (pVol->Partition_Type == PARTITION_FAT32){
            NextCluster = *(alt_u32*)(pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize); 
            ClusterType = fat32ClusterType(NextCluster);
        }else{
            NextCluster = *(alt_u16 *)(pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize); 
20082bf0:	80a1883a 	add	r16,r16,r2
20082bf4:	8080110b 	ldhu	r2,68(r16)
20082bf8:	153fffcc 	andi	r20,r2,65535

CLUSTER_TYPE fat16ClusterType(alt_u32 Fat){
    CLUSTER_TYPE Type;
    Fat = Fat & 0xFFFF; // 16 bits
    
    if (Fat > 0 && Fat < 0xFFF0)
20082bfc:	a0ffffc4 	addi	r3,r20,-1
20082c00:	20c0182e 	bgeu	r4,r3,20082c64 <fatNextCluster+0x11c>
        Type = CLUSTER_NEXT_INFILE;
    else if (Fat >= 0xFFF8) // && Fat <= (unsigned short)0xFFFF)
20082c04:	00fffdd4 	movui	r3,65527
20082c08:	1d001636 	bltu	r3,r20,20082c64 <fatNextCluster+0x11c>
        Type = CLUSTER_LAST_INFILE;
    else if (Fat == (alt_u16)0x00)
20082c0c:	a0000826 	beq	r20,zero,20082c30 <fatNextCluster+0xe8>
        Type = CLUSTER_UNUSED;
    else if (Fat >= 0xFFF0 && Fat <= 0xFFF6)
20082c10:	10800404 	addi	r2,r2,16
20082c14:	10bfffcc 	andi	r2,r2,65535
20082c18:	00c001c4 	movi	r3,7
20082c1c:	1880032e 	bgeu	r3,r2,20082c2c <fatNextCluster+0xe4>
            ClusterType = fat32ClusterType(NextCluster);
        }else{
            NextCluster = *(alt_u16 *)(pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize); 
            ClusterType = fat16ClusterType(NextCluster);
        }    
        if (ClusterType != CLUSTER_NEXT_INFILE && ClusterType != CLUSTER_LAST_INFILE)
20082c20:	00bfff44 	movi	r2,-3
20082c24:	00c00044 	movi	r3,1
20082c28:	18800e2e 	bgeu	r3,r2,20082c64 <fatNextCluster+0x11c>
20082c2c:	0029883a 	mov	r20,zero
            NextCluster = 0;  // invalid cluster
    }
    if(NextCluster > 60607)
    	printf("Error getting next cluster");
    return NextCluster;
}
20082c30:	a005883a 	mov	r2,r20
20082c34:	dfc00717 	ldw	ra,28(sp)
20082c38:	dd800617 	ldw	r22,24(sp)
20082c3c:	dd400517 	ldw	r21,20(sp)
20082c40:	dd000417 	ldw	r20,16(sp)
20082c44:	dcc00317 	ldw	r19,12(sp)
20082c48:	dc800217 	ldw	r18,8(sp)
20082c4c:	dc400117 	ldw	r17,4(sp)
20082c50:	dc000017 	ldw	r16,0(sp)
20082c54:	dec00804 	addi	sp,sp,32
20082c58:	f800283a 	ret
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
    bool bSuccess = TRUE;
    static char temp[512];
    if (nSecter != pVol->Secter_Index){
        if (!pVol->ReadBlock512(pVol->DiskHandle, nSecter, pVol->Secter_Data)){
            pVol->Secter_Index = -1;
20082c5c:	00bfffc4 	movi	r2,-1
20082c60:	80809115 	stw	r2,580(r16)
            ClusterType = fat16ClusterType(NextCluster);
        }    
        if (ClusterType != CLUSTER_NEXT_INFILE && ClusterType != CLUSTER_LAST_INFILE)
            NextCluster = 0;  // invalid cluster
    }
    if(NextCluster > 60607)
20082c64:	00bb2fd4 	movui	r2,60607
20082c68:	153ff12e 	bgeu	r2,r20,20082c30 <__flash_rwdata_start+0xfffe65e8>
    	printf("Error getting next cluster");
20082c6c:	01000034 	movhi	r4,0
20082c70:	21008604 	addi	r4,r4,536
20082c74:	008a4680 	call	2008a468 <printf>
20082c78:	003fed06 	br	20082c30 <__flash_rwdata_start+0xfffe65e8>
alt_u32 fatNextCluster(VOLUME_INFO *pVol, alt_u32 ThisCluster){
    CLUSTER_TYPE ClusterType;
    alt_u32 NextCluster;

    alt_32 nFatEntryPerSecter;
    const alt_32 nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
20082c7c:	04400104 	movi	r17,4
20082c80:	003fc006 	br	20082b84 <__flash_rwdata_start+0xfffe653c>
    nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize; 
    Secter = pVol->FatEntrySecter + (ThisCluster*nFatEntrySize)/pVol->BPB_BytsPerSec;
    //if (pVol->ReadBlock512(pVol->DiskHandle, Secter,szBlock)){
    if (fatReadSecter(pVol, Secter)){
        if (pVol->Partition_Type == PARTITION_FAT32){
            NextCluster = *(alt_u32*)(pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize); 
20082c84:	a809883a 	mov	r4,r21
20082c88:	b00b883a 	mov	r5,r22
20082c8c:	008679c0 	call	2008679c <__umodsi3>
20082c90:	1445383a 	mul	r2,r2,r17

CLUSTER_TYPE fat32ClusterType(alt_u32 Fat){
    CLUSTER_TYPE Type;
    Fat = Fat & 0xFFFFFFF; // 28 bits
    
    if (Fat > 0 && Fat < 0xFFFFFF0)
20082c94:	01040034 	movhi	r4,4096
20082c98:	213ffb84 	addi	r4,r4,-18
    nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize; 
    Secter = pVol->FatEntrySecter + (ThisCluster*nFatEntrySize)/pVol->BPB_BytsPerSec;
    //if (pVol->ReadBlock512(pVol->DiskHandle, Secter,szBlock)){
    if (fatReadSecter(pVol, Secter)){
        if (pVol->Partition_Type == PARTITION_FAT32){
            NextCluster = *(alt_u32*)(pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize); 
20082c9c:	80a1883a 	add	r16,r16,r2
20082ca0:	85001117 	ldw	r20,68(r16)
         
}

CLUSTER_TYPE fat32ClusterType(alt_u32 Fat){
    CLUSTER_TYPE Type;
    Fat = Fat & 0xFFFFFFF; // 28 bits
20082ca4:	00840034 	movhi	r2,4096
20082ca8:	10bfffc4 	addi	r2,r2,-1
20082cac:	a084703a 	and	r2,r20,r2
    
    if (Fat > 0 && Fat < 0xFFFFFF0)
20082cb0:	10ffffc4 	addi	r3,r2,-1
20082cb4:	20ffeb2e 	bgeu	r4,r3,20082c64 <__flash_rwdata_start+0xfffe661c>
        Type = CLUSTER_NEXT_INFILE;
    else if (Fat >= 0xFFFFFF8) // && Fat <= (unsigned short)0xFFFF)
20082cb8:	00c40034 	movhi	r3,4096
20082cbc:	18fffdc4 	addi	r3,r3,-9
20082cc0:	18bfe836 	bltu	r3,r2,20082c64 <__flash_rwdata_start+0xfffe661c>
        Type = CLUSTER_LAST_INFILE;
    else if (Fat == (alt_u32)0x00)
20082cc4:	103fd926 	beq	r2,zero,20082c2c <__flash_rwdata_start+0xfffe65e4>
        Type = CLUSTER_UNUSED;
    else if (Fat >= 0xFFFFFF0 && Fat <= 0xFFFFFF6)
20082cc8:	00fc0034 	movhi	r3,61440
20082ccc:	18c00404 	addi	r3,r3,16
20082cd0:	10c5883a 	add	r2,r2,r3
20082cd4:	00c001c4 	movi	r3,7
20082cd8:	18bfd42e 	bgeu	r3,r2,20082c2c <__flash_rwdata_start+0xfffe65e4>
20082cdc:	003fd006 	br	20082c20 <__flash_rwdata_start+0xfffe65d8>

20082ce0 <fatFindUnusedCluster>:
    if(NextCluster > 60607)
    	printf("Error getting next cluster");
    return NextCluster;
}

alt_u32 fatFindUnusedCluster(VOLUME_INFO *pVol){
20082ce0:	defff404 	addi	sp,sp,-48
20082ce4:	dd000615 	stw	r20,24(sp)
    CLUSTER_TYPE ClusterType;
    alt_u32 UnusedCluster=-1, ThisCluster = 2, ClusterEntryValue;
    void *pFatEntry;

    const alt_32 nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
20082ce8:	25000417 	ldw	r20,16(r4)
    if(NextCluster > 60607)
    	printf("Error getting next cluster");
    return NextCluster;
}

alt_u32 fatFindUnusedCluster(VOLUME_INFO *pVol){
20082cec:	df000a15 	stw	fp,40(sp)
20082cf0:	dfc00b15 	stw	ra,44(sp)
20082cf4:	ddc00915 	stw	r23,36(sp)
20082cf8:	dd800815 	stw	r22,32(sp)
20082cfc:	dd400715 	stw	r21,28(sp)
20082d00:	dcc00515 	stw	r19,20(sp)
20082d04:	dc800415 	stw	r18,16(sp)
20082d08:	dc400315 	stw	r17,12(sp)
20082d0c:	dc000215 	stw	r16,8(sp)
    CLUSTER_TYPE ClusterType;
    alt_u32 UnusedCluster=-1, ThisCluster = 2, ClusterEntryValue;
    void *pFatEntry;

    const alt_32 nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
20082d10:	008002c4 	movi	r2,11
    if(NextCluster > 60607)
    	printf("Error getting next cluster");
    return NextCluster;
}

alt_u32 fatFindUnusedCluster(VOLUME_INFO *pVol){
20082d14:	2039883a 	mov	fp,r4
    CLUSTER_TYPE ClusterType;
    alt_u32 UnusedCluster=-1, ThisCluster = 2, ClusterEntryValue;
    void *pFatEntry;

    const alt_32 nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
20082d18:	a0805826 	beq	r20,r2,20082e7c <fatFindUnusedCluster+0x19c>
20082d1c:	04800084 	movi	r18,2
    const alt_32 nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize;
20082d20:	e0c00717 	ldw	r3,28(fp)
20082d24:	900b883a 	mov	r5,r18
20082d28:	94a3883a 	add	r17,r18,r18
20082d2c:	1809883a 	mov	r4,r3
20082d30:	d8c00115 	stw	r3,4(sp)
20082d34:	00867940 	call	20086794 <__udivsi3>

CLUSTER_TYPE fat16ClusterType(alt_u32 Fat){
    CLUSTER_TYPE Type;
    Fat = Fat & 0xFFFF; // 16 bits
    
    if (Fat > 0 && Fat < 0xFFF0)
20082d38:	d8c00117 	ldw	r3,4(sp)
20082d3c:	e4c09117 	ldw	r19,580(fp)
    CLUSTER_TYPE ClusterType;
    alt_u32 UnusedCluster=-1, ThisCluster = 2, ClusterEntryValue;
    void *pFatEntry;

    const alt_32 nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
    const alt_32 nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize;
20082d40:	102d883a 	mov	r22,r2
//// add in v2.0
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
    bool bSuccess = TRUE;
    static char temp[512];
    if (nSecter != pVol->Secter_Index){
        if (!pVol->ReadBlock512(pVol->DiskHandle, nSecter, pVol->Secter_Data)){
20082d44:	e0801104 	addi	r2,fp,68
    return NextCluster;
}

alt_u32 fatFindUnusedCluster(VOLUME_INFO *pVol){
    CLUSTER_TYPE ClusterType;
    alt_u32 UnusedCluster=-1, ThisCluster = 2, ClusterEntryValue;
20082d48:	04000084 	movi	r16,2
//// add in v2.0
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
    bool bSuccess = TRUE;
    static char temp[512];
    if (nSecter != pVol->Secter_Index){
        if (!pVol->ReadBlock512(pVol->DiskHandle, nSecter, pVol->Secter_Data)){
20082d4c:	d8800015 	stw	r2,0(sp)

    while(!bDone){     
        Secter = pVol->FatEntrySecter + (ThisCluster*nFatEntrySize)/pVol->BPB_BytsPerSec;
        if (fatReadSecter(pVol, Secter)){
            pFatEntry = (pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize);
            if (pVol->Partition_Type == PARTITION_FAT32){
20082d50:	054002c4 	movi	r21,11
    const alt_32 nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize;
    alt_u32 Secter;
    bool bDone = FALSE;

    while(!bDone){     
        Secter = pVol->FatEntrySecter + (ThisCluster*nFatEntrySize)/pVol->BPB_BytsPerSec;
20082d54:	180b883a 	mov	r5,r3
20082d58:	8809883a 	mov	r4,r17
20082d5c:	00867940 	call	20086794 <__udivsi3>
20082d60:	e0c00e17 	ldw	r3,56(fp)
20082d64:	10ef883a 	add	r23,r2,r3
//=================================================================================
//// add in v2.0
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
    bool bSuccess = TRUE;
    static char temp[512];
    if (nSecter != pVol->Secter_Index){
20082d68:	bcc00926 	beq	r23,r19,20082d90 <fatFindUnusedCluster+0xb0>
        if (!pVol->ReadBlock512(pVol->DiskHandle, nSecter, pVol->Secter_Data)){
20082d6c:	e0800117 	ldw	r2,4(fp)
20082d70:	e1000017 	ldw	r4,0(fp)
20082d74:	d9800017 	ldw	r6,0(sp)
20082d78:	b80b883a 	mov	r5,r23
20082d7c:	103ee83a 	callr	r2
20082d80:	10003426 	beq	r2,zero,20082e54 <fatFindUnusedCluster+0x174>
20082d84:	e5000417 	ldw	r20,16(fp)
            pVol->Secter_Index = -1;
            bSuccess = FALSE;
        }else{
            pVol->Secter_Index = nSecter;
20082d88:	e5c09115 	stw	r23,580(fp)
20082d8c:	b827883a 	mov	r19,r23
    bool bDone = FALSE;

    while(!bDone){     
        Secter = pVol->FatEntrySecter + (ThisCluster*nFatEntrySize)/pVol->BPB_BytsPerSec;
        if (fatReadSecter(pVol, Secter)){
            pFatEntry = (pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize);
20082d90:	8009883a 	mov	r4,r16
20082d94:	b00b883a 	mov	r5,r22
20082d98:	008679c0 	call	2008679c <__umodsi3>
20082d9c:	1485383a 	mul	r2,r2,r18
20082da0:	10801104 	addi	r2,r2,68
20082da4:	e085883a 	add	r2,fp,r2
            if (pVol->Partition_Type == PARTITION_FAT32){
20082da8:	a5401b26 	beq	r20,r21,20082e18 <fatFindUnusedCluster+0x138>
                ClusterEntryValue = *(alt_u32*)pFatEntry; 
                ClusterType = fat32ClusterType(ClusterEntryValue);
            }else{
                ClusterEntryValue = *(alt_u16 *)pFatEntry; 
20082dac:	10c0000b 	ldhu	r3,0(r2)

CLUSTER_TYPE fat16ClusterType(alt_u32 Fat){
    CLUSTER_TYPE Type;
    Fat = Fat & 0xFFFF; // 16 bits
    
    if (Fat > 0 && Fat < 0xFFF0)
20082db0:	017ffb94 	movui	r5,65518

VOLUME_INFO vInfo;

CLUSTER_TYPE fat16ClusterType(alt_u32 Fat){
    CLUSTER_TYPE Type;
    Fat = Fat & 0xFFFF; // 16 bits
20082db4:	18bfffcc 	andi	r2,r3,65535
    
    if (Fat > 0 && Fat < 0xFFF0)
20082db8:	113fffc4 	addi	r4,r2,-1
20082dbc:	2900212e 	bgeu	r5,r4,20082e44 <fatFindUnusedCluster+0x164>
        Type = CLUSTER_NEXT_INFILE;
    else if (Fat >= 0xFFF8) // && Fat <= (unsigned short)0xFFFF)
20082dc0:	013ffdd4 	movui	r4,65527
20082dc4:	20801f36 	bltu	r4,r2,20082e44 <fatFindUnusedCluster+0x164>
        Type = CLUSTER_LAST_INFILE;
    else if (Fat == (alt_u16)0x00)
20082dc8:	10000626 	beq	r2,zero,20082de4 <fatFindUnusedCluster+0x104>
        Type = CLUSTER_UNUSED;
    else if (Fat >= 0xFFF0 && Fat <= 0xFFF6)
20082dcc:	18c00404 	addi	r3,r3,16
20082dd0:	18ffffcc 	andi	r3,r3,65535
20082dd4:	008001c4 	movi	r2,7
20082dd8:	10c01a2e 	bgeu	r2,r3,20082e44 <fatFindUnusedCluster+0x164>
20082ddc:	0005883a 	mov	r2,zero
                ClusterType = fat32ClusterType(ClusterEntryValue);
            }else{
                ClusterEntryValue = *(alt_u16 *)pFatEntry; 
                ClusterType = fat16ClusterType(ClusterEntryValue);
            }    
            if (ClusterType == CLUSTER_UNUSED){
20082de0:	1000181e 	bne	r2,zero,20082e44 <fatFindUnusedCluster+0x164>
        ThisCluster++;           
    }                
    
    return UnusedCluster;

}
20082de4:	8005883a 	mov	r2,r16
20082de8:	dfc00b17 	ldw	ra,44(sp)
20082dec:	df000a17 	ldw	fp,40(sp)
20082df0:	ddc00917 	ldw	r23,36(sp)
20082df4:	dd800817 	ldw	r22,32(sp)
20082df8:	dd400717 	ldw	r21,28(sp)
20082dfc:	dd000617 	ldw	r20,24(sp)
20082e00:	dcc00517 	ldw	r19,20(sp)
20082e04:	dc800417 	ldw	r18,16(sp)
20082e08:	dc400317 	ldw	r17,12(sp)
20082e0c:	dc000217 	ldw	r16,8(sp)
20082e10:	dec00c04 	addi	sp,sp,48
20082e14:	f800283a 	ret
         
}

CLUSTER_TYPE fat32ClusterType(alt_u32 Fat){
    CLUSTER_TYPE Type;
    Fat = Fat & 0xFFFFFFF; // 28 bits
20082e18:	10800017 	ldw	r2,0(r2)
20082e1c:	00c40034 	movhi	r3,4096
20082e20:	18ffffc4 	addi	r3,r3,-1
20082e24:	10c4703a 	and	r2,r2,r3
    
    if (Fat > 0 && Fat < 0xFFFFFF0)
20082e28:	01040034 	movhi	r4,4096
20082e2c:	10ffffc4 	addi	r3,r2,-1
20082e30:	213ffb84 	addi	r4,r4,-18
20082e34:	20c0032e 	bgeu	r4,r3,20082e44 <fatFindUnusedCluster+0x164>
        Type = CLUSTER_NEXT_INFILE;
    else if (Fat >= 0xFFFFFF8) // && Fat <= (unsigned short)0xFFFF)
20082e38:	01440034 	movhi	r5,4096
20082e3c:	297ffdc4 	addi	r5,r5,-9
20082e40:	2880072e 	bgeu	r5,r2,20082e60 <fatFindUnusedCluster+0x180>
                bDone = TRUE;
            }    
        }else{
            bDone = TRUE;
        }     
        ThisCluster++;           
20082e44:	84000044 	addi	r16,r16,1
20082e48:	e0c00717 	ldw	r3,28(fp)
20082e4c:	8ca3883a 	add	r17,r17,r18
20082e50:	003fc006 	br	20082d54 <__flash_rwdata_start+0xfffe670c>
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
    bool bSuccess = TRUE;
    static char temp[512];
    if (nSecter != pVol->Secter_Index){
        if (!pVol->ReadBlock512(pVol->DiskHandle, nSecter, pVol->Secter_Data)){
            pVol->Secter_Index = -1;
20082e54:	043fffc4 	movi	r16,-1
20082e58:	e4009115 	stw	r16,580(fp)
20082e5c:	003fe106 	br	20082de4 <__flash_rwdata_start+0xfffe679c>
    
    if (Fat > 0 && Fat < 0xFFFFFF0)
        Type = CLUSTER_NEXT_INFILE;
    else if (Fat >= 0xFFFFFF8) // && Fat <= (unsigned short)0xFFFF)
        Type = CLUSTER_LAST_INFILE;
    else if (Fat == (alt_u32)0x00)
20082e60:	103fe026 	beq	r2,zero,20082de4 <__flash_rwdata_start+0xfffe679c>
        Type = CLUSTER_UNUSED;
    else if (Fat >= 0xFFFFFF0 && Fat <= 0xFFFFFF6)
20082e64:	00fc0034 	movhi	r3,61440
20082e68:	18c00404 	addi	r3,r3,16
20082e6c:	10c5883a 	add	r2,r2,r3
20082e70:	00c001c4 	movi	r3,7
20082e74:	18bff32e 	bgeu	r3,r2,20082e44 <__flash_rwdata_start+0xfffe67fc>
20082e78:	003fd806 	br	20082ddc <__flash_rwdata_start+0xfffe6794>
alt_u32 fatFindUnusedCluster(VOLUME_INFO *pVol){
    CLUSTER_TYPE ClusterType;
    alt_u32 UnusedCluster=-1, ThisCluster = 2, ClusterEntryValue;
    void *pFatEntry;

    const alt_32 nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
20082e7c:	04800104 	movi	r18,4
20082e80:	003fa706 	br	20082d20 <__flash_rwdata_start+0xfffe66d8>

20082e84 <fatDelClusterList>:
    return UnusedCluster;

}


bool fatDelClusterList(VOLUME_INFO *pVol, alt_u32 StartCluster){
20082e84:	defff204 	addi	sp,sp,-56
20082e88:	df000c15 	stw	fp,48(sp)
20082e8c:	2039883a 	mov	fp,r4
    bool bDone = FALSE;
    alt_u32 ClusterIndex, Secter, ClusterEntryValue;
    void *pFatEntryValue;
    
    
    const int nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
20082e90:	21000417 	ldw	r4,16(r4)
    return UnusedCluster;

}


bool fatDelClusterList(VOLUME_INFO *pVol, alt_u32 StartCluster){
20082e94:	dc800615 	stw	r18,24(sp)
20082e98:	dfc00d15 	stw	ra,52(sp)
20082e9c:	ddc00b15 	stw	r23,44(sp)
20082ea0:	dd800a15 	stw	r22,40(sp)
20082ea4:	dd400915 	stw	r21,36(sp)
20082ea8:	dd000815 	stw	r20,32(sp)
20082eac:	dcc00715 	stw	r19,28(sp)
20082eb0:	dc400515 	stw	r17,20(sp)
20082eb4:	dc000415 	stw	r16,16(sp)
    bool bDone = FALSE;
    alt_u32 ClusterIndex, Secter, ClusterEntryValue;
    void *pFatEntryValue;
    
    
    const int nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
20082eb8:	008002c4 	movi	r2,11
    return UnusedCluster;

}


bool fatDelClusterList(VOLUME_INFO *pVol, alt_u32 StartCluster){
20082ebc:	2825883a 	mov	r18,r5
    bool bDone = FALSE;
    alt_u32 ClusterIndex, Secter, ClusterEntryValue;
    void *pFatEntryValue;
    
    
    const int nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
20082ec0:	20807226 	beq	r4,r2,2008308c <fatDelClusterList+0x208>
20082ec4:	04400084 	movi	r17,2
    const int nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize;
20082ec8:	e5c00717 	ldw	r23,28(fp)
20082ecc:	880b883a 	mov	r5,r17
20082ed0:	8ca1383a 	mul	r16,r17,r18
20082ed4:	b809883a 	mov	r4,r23
20082ed8:	00867940 	call	20086794 <__udivsi3>
20082edc:	1027883a 	mov	r19,r2
            }else{
                ClusterEntryValue = *(alt_u16 *)pFatEntryValue; //(pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize); 
                ClusterType = fat16ClusterType(ClusterEntryValue);
            }
                
            if (ClusterType != CLUSTER_NEXT_INFILE && ClusterType != CLUSTER_LAST_INFILE){
20082ee0:	0009883a 	mov	r4,zero
20082ee4:	0005883a 	mov	r2,zero
20082ee8:	10ffff44 	addi	r3,r2,-3
                bDone = TRUE;
                bSuccess = FALSE;
            }else{
                if (ClusterType == CLUSTER_LAST_INFILE)
20082eec:	210000e0 	cmpeqi	r4,r4,3
         
}

CLUSTER_TYPE fat32ClusterType(alt_u32 Fat){
    CLUSTER_TYPE Type;
    Fat = Fat & 0xFFFFFFF; // 28 bits
20082ef0:	05840034 	movhi	r22,4096
20082ef4:	b5bfffc4 	addi	r22,r22,-1
            }else{
                ClusterEntryValue = *(alt_u16 *)pFatEntryValue; //(pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize); 
                ClusterType = fat16ClusterType(ClusterEntryValue);
            }
                
            if (ClusterType != CLUSTER_NEXT_INFILE && ClusterType != CLUSTER_LAST_INFILE){
20082ef8:	d8c00115 	stw	r3,4(sp)
20082efc:	d8c00015 	stw	r3,0(sp)
//// add in v2.0
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
    bool bSuccess = TRUE;
    static char temp[512];
    if (nSecter != pVol->Secter_Index){
        if (!pVol->ReadBlock512(pVol->DiskHandle, nSecter, pVol->Secter_Data)){
20082f00:	e5001104 	addi	r20,fp,68
                
            if (ClusterType != CLUSTER_NEXT_INFILE && ClusterType != CLUSTER_LAST_INFILE){
                bDone = TRUE;
                bSuccess = FALSE;
            }else{
                if (ClusterType == CLUSTER_LAST_INFILE)
20082f04:	d9000215 	stw	r4,8(sp)
20082f08:	d9000315 	stw	r4,12(sp)
    const int nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize;
     
    ClusterIndex = StartCluster;
    while(bSuccess && !bDone){
        // read FAT Table
        Secter = pVol->FatEntrySecter + (ClusterIndex*nFatEntrySize)/pVol->BPB_BytsPerSec;
20082f0c:	b80b883a 	mov	r5,r23
20082f10:	8009883a 	mov	r4,r16
20082f14:	00867940 	call	20086794 <__udivsi3>
20082f18:	e1c00e17 	ldw	r7,56(fp)
//=================================================================================
//// add in v2.0
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
    bool bSuccess = TRUE;
    static char temp[512];
    if (nSecter != pVol->Secter_Index){
20082f1c:	e5409117 	ldw	r21,580(fp)
    const int nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize;
     
    ClusterIndex = StartCluster;
    while(bSuccess && !bDone){
        // read FAT Table
        Secter = pVol->FatEntrySecter + (ClusterIndex*nFatEntrySize)/pVol->BPB_BytsPerSec;
20082f20:	11ef883a 	add	r23,r2,r7
//=================================================================================
//// add in v2.0
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
    bool bSuccess = TRUE;
    static char temp[512];
    if (nSecter != pVol->Secter_Index){
20082f24:	bd400826 	beq	r23,r21,20082f48 <fatDelClusterList+0xc4>
        if (!pVol->ReadBlock512(pVol->DiskHandle, nSecter, pVol->Secter_Data)){
20082f28:	e0800117 	ldw	r2,4(fp)
20082f2c:	e1000017 	ldw	r4,0(fp)
20082f30:	b80b883a 	mov	r5,r23
20082f34:	a00d883a 	mov	r6,r20
20082f38:	103ee83a 	callr	r2
20082f3c:	10002026 	beq	r2,zero,20082fc0 <fatDelClusterList+0x13c>
            pVol->Secter_Index = -1;
            bSuccess = FALSE;
        }else{
            pVol->Secter_Index = nSecter;
20082f40:	e5c09115 	stw	r23,580(fp)
20082f44:	b82b883a 	mov	r21,r23
        // read FAT Table
        Secter = pVol->FatEntrySecter + (ClusterIndex*nFatEntrySize)/pVol->BPB_BytsPerSec;
        bSuccess = fatReadSecter(pVol, Secter);
        if (bSuccess){
            // get the value of FAT entry
            pFatEntryValue = (pVol->Secter_Data + (ClusterIndex%nFatEntryPerSecter)*nFatEntrySize);
20082f48:	9009883a 	mov	r4,r18
20082f4c:	980b883a 	mov	r5,r19
20082f50:	008679c0 	call	2008679c <__umodsi3>
20082f54:	1445383a 	mul	r2,r2,r17
            if (pVol->Partition_Type == PARTITION_FAT32){
20082f58:	e1400417 	ldw	r5,16(fp)
20082f5c:	010002c4 	movi	r4,11
        // read FAT Table
        Secter = pVol->FatEntrySecter + (ClusterIndex*nFatEntrySize)/pVol->BPB_BytsPerSec;
        bSuccess = fatReadSecter(pVol, Secter);
        if (bSuccess){
            // get the value of FAT entry
            pFatEntryValue = (pVol->Secter_Data + (ClusterIndex%nFatEntryPerSecter)*nFatEntrySize);
20082f60:	10801104 	addi	r2,r2,68
20082f64:	e085883a 	add	r2,fp,r2
            if (pVol->Partition_Type == PARTITION_FAT32){
20082f68:	29002326 	beq	r5,r4,20082ff8 <fatDelClusterList+0x174>
                ClusterEntryValue = *(alt_u32 *)pFatEntryValue; 
                ClusterType = fat32ClusterType(ClusterEntryValue);
            }else{
                ClusterEntryValue = *(alt_u16 *)pFatEntryValue; //(pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize); 
20082f6c:	1140000b 	ldhu	r5,0(r2)

CLUSTER_TYPE fat16ClusterType(alt_u32 Fat){
    CLUSTER_TYPE Type;
    Fat = Fat & 0xFFFF; // 16 bits
    
    if (Fat > 0 && Fat < 0xFFF0)
20082f70:	023ffb94 	movui	r8,65518

VOLUME_INFO vInfo;

CLUSTER_TYPE fat16ClusterType(alt_u32 Fat){
    CLUSTER_TYPE Type;
    Fat = Fat & 0xFFFF; // 16 bits
20082f74:	293fffcc 	andi	r4,r5,65535
    
    if (Fat > 0 && Fat < 0xFFF0)
20082f78:	21ffffc4 	addi	r7,r4,-1
20082f7c:	41c0132e 	bgeu	r8,r7,20082fcc <fatDelClusterList+0x148>
        Type = CLUSTER_NEXT_INFILE;
    else if (Fat >= 0xFFF8) // && Fat <= (unsigned short)0xFFFF)
20082f80:	01fffdd4 	movui	r7,65527
20082f84:	39002736 	bltu	r7,r4,20083024 <fatDelClusterList+0x1a0>
        Type = CLUSTER_LAST_INFILE;
    else if (Fat == (alt_u16)0x00)
20082f88:	20002c1e 	bne	r4,zero,2008303c <fatDelClusterList+0x1b8>
    bool bDone = FALSE;
    alt_u32 ClusterIndex, Secter, ClusterEntryValue;
    void *pFatEntryValue;
    
    
    const int nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
20082f8c:	0005883a 	mov	r2,zero
    }  // while                
    
    
    return bSuccess;

}
20082f90:	dfc00d17 	ldw	ra,52(sp)
20082f94:	df000c17 	ldw	fp,48(sp)
20082f98:	ddc00b17 	ldw	r23,44(sp)
20082f9c:	dd800a17 	ldw	r22,40(sp)
20082fa0:	dd400917 	ldw	r21,36(sp)
20082fa4:	dd000817 	ldw	r20,32(sp)
20082fa8:	dcc00717 	ldw	r19,28(sp)
20082fac:	dc800617 	ldw	r18,24(sp)
20082fb0:	dc400517 	ldw	r17,20(sp)
20082fb4:	dc000417 	ldw	r16,16(sp)
20082fb8:	dec00e04 	addi	sp,sp,56
20082fbc:	f800283a 	ret
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
    bool bSuccess = TRUE;
    static char temp[512];
    if (nSecter != pVol->Secter_Index){
        if (!pVol->ReadBlock512(pVol->DiskHandle, nSecter, pVol->Secter_Data)){
            pVol->Secter_Index = -1;
20082fc0:	00bfffc4 	movi	r2,-1
20082fc4:	e0809115 	stw	r2,580(fp)
20082fc8:	003ff006 	br	20082f8c <__flash_rwdata_start+0xfffe6944>

CLUSTER_TYPE fat16ClusterType(alt_u32 Fat){
    CLUSTER_TYPE Type;
    Fat = Fat & 0xFFFF; // 16 bits
    
    if (Fat > 0 && Fat < 0xFFF0)
20082fcc:	002f883a 	mov	r23,zero
                    bDone = TRUE; // the last cluster
                // update
                if (pVol->Partition_Type == PARTITION_FAT32)
                    *(alt_u32 *)pFatEntryValue = CLUSTER_UNUSED;
                else 
                    *(alt_u16 *)pFatEntryValue = CLUSTER_UNUSED;
20082fd0:	1000000d 	sth	zero,0(r2)
                //write back FAT Table
                bSuccess = pVol->WriteBlock512(pVol->DiskHandle, pVol->Secter_Index, pVol->Secter_Data);
20082fd4:	e0800217 	ldw	r2,8(fp)
20082fd8:	e1000017 	ldw	r4,0(fp)
20082fdc:	a80b883a 	mov	r5,r21
20082fe0:	a00d883a 	mov	r6,r20
20082fe4:	103ee83a 	callr	r2
    
    const int nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
    const int nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize;
     
    ClusterIndex = StartCluster;
    while(bSuccess && !bDone){
20082fe8:	103fe926 	beq	r2,zero,20082f90 <__flash_rwdata_start+0xfffe6948>
20082fec:	b83fe81e 	bne	r23,zero,20082f90 <__flash_rwdata_start+0xfffe6948>
20082ff0:	e5c00717 	ldw	r23,28(fp)
20082ff4:	003fc506 	br	20082f0c <__flash_rwdata_start+0xfffe68c4>
         
}

CLUSTER_TYPE fat32ClusterType(alt_u32 Fat){
    CLUSTER_TYPE Type;
    Fat = Fat & 0xFFFFFFF; // 28 bits
20082ff8:	11000017 	ldw	r4,0(r2)
    
    if (Fat > 0 && Fat < 0xFFFFFF0)
20082ffc:	00c40034 	movhi	r3,4096
20083000:	18fffb84 	addi	r3,r3,-18
         
}

CLUSTER_TYPE fat32ClusterType(alt_u32 Fat){
    CLUSTER_TYPE Type;
    Fat = Fat & 0xFFFFFFF; // 28 bits
20083004:	2588703a 	and	r4,r4,r22
    
    if (Fat > 0 && Fat < 0xFFFFFF0)
20083008:	217fffc4 	addi	r5,r4,-1
2008300c:	1940072e 	bgeu	r3,r5,2008302c <fatDelClusterList+0x1a8>
        Type = CLUSTER_NEXT_INFILE;
    else if (Fat >= 0xFFFFFF8) // && Fat <= (unsigned short)0xFFFF)
20083010:	00c40034 	movhi	r3,4096
20083014:	18fffdc4 	addi	r3,r3,-9
20083018:	1900112e 	bgeu	r3,r4,20083060 <fatDelClusterList+0x1dc>
2008301c:	05c00044 	movi	r23,1
20083020:	00000306 	br	20083030 <fatDelClusterList+0x1ac>
    CLUSTER_TYPE Type;
    Fat = Fat & 0xFFFF; // 16 bits
    
    if (Fat > 0 && Fat < 0xFFF0)
        Type = CLUSTER_NEXT_INFILE;
    else if (Fat >= 0xFFF8) // && Fat <= (unsigned short)0xFFFF)
20083024:	05c00044 	movi	r23,1
20083028:	003fe906 	br	20082fd0 <__flash_rwdata_start+0xfffe6988>

CLUSTER_TYPE fat32ClusterType(alt_u32 Fat){
    CLUSTER_TYPE Type;
    Fat = Fat & 0xFFFFFFF; // 28 bits
    
    if (Fat > 0 && Fat < 0xFFFFFF0)
2008302c:	002f883a 	mov	r23,zero
            }else{
                if (ClusterType == CLUSTER_LAST_INFILE)
                    bDone = TRUE; // the last cluster
                // update
                if (pVol->Partition_Type == PARTITION_FAT32)
                    *(alt_u32 *)pFatEntryValue = CLUSTER_UNUSED;
20083030:	10000015 	stw	zero,0(r2)
20083034:	e5409117 	ldw	r21,580(fp)
20083038:	003fe606 	br	20082fd4 <__flash_rwdata_start+0xfffe698c>
        Type = CLUSTER_NEXT_INFILE;
    else if (Fat >= 0xFFF8) // && Fat <= (unsigned short)0xFFFF)
        Type = CLUSTER_LAST_INFILE;
    else if (Fat == (alt_u16)0x00)
        Type = CLUSTER_UNUSED;
    else if (Fat >= 0xFFF0 && Fat <= 0xFFF6)
2008303c:	29400404 	addi	r5,r5,16
20083040:	297fffcc 	andi	r5,r5,65535
20083044:	010001c4 	movi	r4,7
20083048:	217fd02e 	bgeu	r4,r5,20082f8c <__flash_rwdata_start+0xfffe6944>
            }else{
                ClusterEntryValue = *(alt_u16 *)pFatEntryValue; //(pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize); 
                ClusterType = fat16ClusterType(ClusterEntryValue);
            }
                
            if (ClusterType != CLUSTER_NEXT_INFILE && ClusterType != CLUSTER_LAST_INFILE){
2008304c:	d8c00017 	ldw	r3,0(sp)
20083050:	01000044 	movi	r4,1
20083054:	20ffcd36 	bltu	r4,r3,20082f8c <__flash_rwdata_start+0xfffe6944>
                bDone = TRUE;
                bSuccess = FALSE;
            }else{
                if (ClusterType == CLUSTER_LAST_INFILE)
20083058:	ddc00217 	ldw	r23,8(sp)
2008305c:	003fdc06 	br	20082fd0 <__flash_rwdata_start+0xfffe6988>
    
    if (Fat > 0 && Fat < 0xFFFFFF0)
        Type = CLUSTER_NEXT_INFILE;
    else if (Fat >= 0xFFFFFF8) // && Fat <= (unsigned short)0xFFFF)
        Type = CLUSTER_LAST_INFILE;
    else if (Fat == (alt_u32)0x00)
20083060:	203fca26 	beq	r4,zero,20082f8c <__flash_rwdata_start+0xfffe6944>
        Type = CLUSTER_UNUSED;
    else if (Fat >= 0xFFFFFF0 && Fat <= 0xFFFFFF6)
20083064:	00fc0034 	movhi	r3,61440
20083068:	18c00404 	addi	r3,r3,16
2008306c:	20c9883a 	add	r4,r4,r3
20083070:	014001c4 	movi	r5,7
20083074:	293fc52e 	bgeu	r5,r4,20082f8c <__flash_rwdata_start+0xfffe6944>
            }else{
                ClusterEntryValue = *(alt_u16 *)pFatEntryValue; //(pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize); 
                ClusterType = fat16ClusterType(ClusterEntryValue);
            }
                
            if (ClusterType != CLUSTER_NEXT_INFILE && ClusterType != CLUSTER_LAST_INFILE){
20083078:	d8c00117 	ldw	r3,4(sp)
2008307c:	01000044 	movi	r4,1
20083080:	20ffc236 	bltu	r4,r3,20082f8c <__flash_rwdata_start+0xfffe6944>
                bDone = TRUE;
                bSuccess = FALSE;
            }else{
                if (ClusterType == CLUSTER_LAST_INFILE)
20083084:	ddc00317 	ldw	r23,12(sp)
20083088:	003fe906 	br	20083030 <__flash_rwdata_start+0xfffe69e8>
2008308c:	04400104 	movi	r17,4
20083090:	003f8d06 	br	20082ec8 <__flash_rwdata_start+0xfffe6880>

20083094 <fatDumpDate>:
    return bSuccess;

}


void fatDumpDate(unsigned short Date){
20083094:	f800283a 	ret

20083098 <fatDumpTime>:
    Month = ((Date >> 5) & 0xF);
    Day = ((Date >> 0) & 0x1F);
    FAT_DEBUG(("%d,%d,%d", Year, Month, Day)); 
}

void fatDumpTime(unsigned short Date){
20083098:	f800283a 	ret

2008309c <fatIsLastDir>:
    S = ((Date >> 0) & 0x1F)*2;
    FAT_DEBUG(("%d:%d:%d", H, M, S));     
}

bool fatIsLastDir(FAT_DIRECTORY *pDir){
    if (pDir->Name[0] == REMAINED_UNUSED_DIR_ENTRY)  // 0x00
2008309c:	20800007 	ldb	r2,0(r4)
        return TRUE;
    return FALSE;        
}
200830a0:	1005003a 	cmpeq	r2,r2,zero
200830a4:	f800283a 	ret

200830a8 <fatIsValidDir>:


bool fatIsValidDir(FAT_DIRECTORY *pDir){
200830a8:	defff904 	addi	sp,sp,-28
    char szTest[] = {0x00, 0xE5, 0x22, 0x2A, 0x2B, 0x2C, 0x2E, 0x2F, 0x3A, 0x3B, 0x3C, 0x3E, 0x3F, 0x5B, 0x5C, 0x5D, 0x7C};
200830ac:	01400034 	movhi	r5,0
        return TRUE;
    return FALSE;        
}


bool fatIsValidDir(FAT_DIRECTORY *pDir){
200830b0:	dc000515 	stw	r16,20(sp)
    char szTest[] = {0x00, 0xE5, 0x22, 0x2A, 0x2B, 0x2C, 0x2E, 0x2F, 0x3A, 0x3B, 0x3C, 0x3E, 0x3F, 0x5B, 0x5C, 0x5D, 0x7C};
200830b4:	29408cc4 	addi	r5,r5,563
        return TRUE;
    return FALSE;        
}


bool fatIsValidDir(FAT_DIRECTORY *pDir){
200830b8:	2021883a 	mov	r16,r4
    char szTest[] = {0x00, 0xE5, 0x22, 0x2A, 0x2B, 0x2C, 0x2E, 0x2F, 0x3A, 0x3B, 0x3C, 0x3E, 0x3F, 0x5B, 0x5C, 0x5D, 0x7C};
200830bc:	01800444 	movi	r6,17
200830c0:	d809883a 	mov	r4,sp
        return TRUE;
    return FALSE;        
}


bool fatIsValidDir(FAT_DIRECTORY *pDir){
200830c4:	dfc00615 	stw	ra,24(sp)
    char szTest[] = {0x00, 0xE5, 0x22, 0x2A, 0x2B, 0x2C, 0x2E, 0x2F, 0x3A, 0x3B, 0x3C, 0x3E, 0x3F, 0x5B, 0x5C, 0x5D, 0x7C};
200830c8:	008a1e00 	call	2008a1e0 <memcpy>
    int i;
    
    for(i=0;i<sizeof(szTest)/sizeof(szTest[0]);i++){
        if (pDir->Name[0] == szTest[i]){
200830cc:	80800007 	ldb	r2,0(r16)
200830d0:	d8c00007 	ldb	r3,0(sp)
200830d4:	10c02426 	beq	r2,r3,20083168 <fatIsValidDir+0xc0>
200830d8:	d8c00047 	ldb	r3,1(sp)
200830dc:	18802226 	beq	r3,r2,20083168 <fatIsValidDir+0xc0>
200830e0:	d8c00087 	ldb	r3,2(sp)
200830e4:	18802026 	beq	r3,r2,20083168 <fatIsValidDir+0xc0>
200830e8:	d8c000c7 	ldb	r3,3(sp)
200830ec:	18801e26 	beq	r3,r2,20083168 <fatIsValidDir+0xc0>
200830f0:	d8c00107 	ldb	r3,4(sp)
200830f4:	18801c26 	beq	r3,r2,20083168 <fatIsValidDir+0xc0>
200830f8:	d8c00147 	ldb	r3,5(sp)
200830fc:	18801a26 	beq	r3,r2,20083168 <fatIsValidDir+0xc0>
20083100:	d8c00187 	ldb	r3,6(sp)
20083104:	18801826 	beq	r3,r2,20083168 <fatIsValidDir+0xc0>
20083108:	d8c001c7 	ldb	r3,7(sp)
2008310c:	18801626 	beq	r3,r2,20083168 <fatIsValidDir+0xc0>
20083110:	d8c00207 	ldb	r3,8(sp)
20083114:	18801426 	beq	r3,r2,20083168 <fatIsValidDir+0xc0>
20083118:	d8c00247 	ldb	r3,9(sp)
2008311c:	18801226 	beq	r3,r2,20083168 <fatIsValidDir+0xc0>
20083120:	d8c00287 	ldb	r3,10(sp)
20083124:	18801026 	beq	r3,r2,20083168 <fatIsValidDir+0xc0>
20083128:	d8c002c7 	ldb	r3,11(sp)
2008312c:	18800e26 	beq	r3,r2,20083168 <fatIsValidDir+0xc0>
20083130:	d8c00307 	ldb	r3,12(sp)
20083134:	18800c26 	beq	r3,r2,20083168 <fatIsValidDir+0xc0>
20083138:	d8c00347 	ldb	r3,13(sp)
2008313c:	18800a26 	beq	r3,r2,20083168 <fatIsValidDir+0xc0>
20083140:	d8c00387 	ldb	r3,14(sp)
20083144:	18800826 	beq	r3,r2,20083168 <fatIsValidDir+0xc0>
20083148:	d8c003c7 	ldb	r3,15(sp)
2008314c:	18800626 	beq	r3,r2,20083168 <fatIsValidDir+0xc0>
20083150:	d8c00407 	ldb	r3,16(sp)
20083154:	1884c03a 	cmpne	r2,r3,r2
            return FALSE;
        }
    }    
    return TRUE;
    
}
20083158:	dfc00617 	ldw	ra,24(sp)
2008315c:	dc000517 	ldw	r16,20(sp)
20083160:	dec00704 	addi	sp,sp,28
20083164:	f800283a 	ret
    char szTest[] = {0x00, 0xE5, 0x22, 0x2A, 0x2B, 0x2C, 0x2E, 0x2F, 0x3A, 0x3B, 0x3C, 0x3E, 0x3F, 0x5B, 0x5C, 0x5D, 0x7C};
    int i;
    
    for(i=0;i<sizeof(szTest)/sizeof(szTest[0]);i++){
        if (pDir->Name[0] == szTest[i]){
            return FALSE;
20083168:	0005883a 	mov	r2,zero
        }
    }    
    return TRUE;
    
}
2008316c:	dfc00617 	ldw	ra,24(sp)
20083170:	dc000517 	ldw	r16,20(sp)
20083174:	dec00704 	addi	sp,sp,28
20083178:	f800283a 	ret

2008317c <fatIsUnusedDir>:

bool fatIsUnusedDir(FAT_DIRECTORY *pDir){
    if (pDir->Name[0] == (alt_8)UNUSED_DIR_ENTRY)
2008317c:	20800007 	ldb	r2,0(r4)
        return TRUE;
    return FALSE; 
}
20083180:	10bff960 	cmpeqi	r2,r2,-27
20083184:	f800283a 	ret

20083188 <fatDump>:

// debug
void fatDump(FAT_DIRECTORY *pDir){
20083188:	defffb04 	addi	sp,sp,-20
    char szInvalidName[] = {0x22, 0x2A, 0x2B, 0x2C, 0x2E, 0x2F, 0x3A, 0x3B, 0x3C, 0x3E, 0x3F, 0x5B, 0x5C, 0x5D, 0x7C};
2008318c:	01400034 	movhi	r5,0
20083190:	29409104 	addi	r5,r5,580
20083194:	d809883a 	mov	r4,sp
20083198:	018003c4 	movi	r6,15
        return TRUE;
    return FALSE; 
}

// debug
void fatDump(FAT_DIRECTORY *pDir){
2008319c:	dfc00415 	stw	ra,16(sp)
    char szInvalidName[] = {0x22, 0x2A, 0x2B, 0x2C, 0x2E, 0x2F, 0x3A, 0x3B, 0x3C, 0x3E, 0x3F, 0x5B, 0x5C, 0x5D, 0x7C};
200831a0:	008a1e00 	call	2008a1e0 <memcpy>
    FAT_DEBUG(("ClusterHi:%04Xh\n", pDir->FirstLogicalClusterHi));
    FAT_DEBUG(("LastWriteTime:")); fatDumpTime(pDir->LastWriteTime);FAT_DEBUG(("\n"));
    FAT_DEBUG(("LastWriteDate:")); fatDumpDate(pDir->LastWriteDate);FAT_DEBUG(("\n"));
    FAT_DEBUG(("Cluster:%04Xh(%d)\n", pDir->FirstLogicalCluster,pDir->FirstLogicalCluster));
    FAT_DEBUG(("File Size:%08Xh(%ld)\n", pDir->FileSize, (long)pDir->FileSize));
}
200831a4:	dfc00417 	ldw	ra,16(sp)
200831a8:	dec00504 	addi	sp,sp,20
200831ac:	f800283a 	ret

200831b0 <fatArray2Value>:


unsigned int fatArray2Value(unsigned char *pValue, unsigned int nNum){
    alt_u8 *pMSB = (pValue + nNum - 1);
200831b0:	28ffffc4 	addi	r3,r5,-1
200831b4:	20c9883a 	add	r4,r4,r3
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
200831b8:	28000626 	beq	r5,zero,200831d4 <fatArray2Value+0x24>
200831bc:	214bc83a 	sub	r5,r4,r5
        nValue <<= 8;
        nValue |= *pMSB--;
200831c0:	20c00003 	ldbu	r3,0(r4)
unsigned int fatArray2Value(unsigned char *pValue, unsigned int nNum){
    alt_u8 *pMSB = (pValue + nNum - 1);
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
        nValue <<= 8;
200831c4:	1004923a 	slli	r2,r2,8
200831c8:	213fffc4 	addi	r4,r4,-1
        nValue |= *pMSB--;
200831cc:	1884b03a 	or	r2,r3,r2

unsigned int fatArray2Value(unsigned char *pValue, unsigned int nNum){
    alt_u8 *pMSB = (pValue + nNum - 1);
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
200831d0:	217ffb1e 	bne	r4,r5,200831c0 <__flash_rwdata_start+0xfffe6b78>
        nValue |= *pMSB--;
        
    }
    
    return nValue;
}
200831d4:	f800283a 	ret

200831d8 <fatReadSecter>:
//=================================================================================
//// add in v2.0
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
    bool bSuccess = TRUE;
    static char temp[512];
    if (nSecter != pVol->Secter_Index){
200831d8:	20c09117 	ldw	r3,580(r4)
200831dc:	19401626 	beq	r3,r5,20083238 <fatReadSecter+0x60>
    return nValue;
}

//=================================================================================
//// add in v2.0
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
200831e0:	defffd04 	addi	sp,sp,-12
200831e4:	dc000015 	stw	r16,0(sp)
    bool bSuccess = TRUE;
    static char temp[512];
    if (nSecter != pVol->Secter_Index){
        if (!pVol->ReadBlock512(pVol->DiskHandle, nSecter, pVol->Secter_Data)){
200831e8:	20800117 	ldw	r2,4(r4)
200831ec:	2021883a 	mov	r16,r4
200831f0:	21000017 	ldw	r4,0(r4)
    return nValue;
}

//=================================================================================
//// add in v2.0
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
200831f4:	dc400115 	stw	r17,4(sp)
200831f8:	dfc00215 	stw	ra,8(sp)
    bool bSuccess = TRUE;
    static char temp[512];
    if (nSecter != pVol->Secter_Index){
        if (!pVol->ReadBlock512(pVol->DiskHandle, nSecter, pVol->Secter_Data)){
200831fc:	81801104 	addi	r6,r16,68
20083200:	2823883a 	mov	r17,r5
20083204:	103ee83a 	callr	r2
20083208:	10000726 	beq	r2,zero,20083228 <fatReadSecter+0x50>
            pVol->Secter_Index = -1;
            bSuccess = FALSE;
        }else{
            pVol->Secter_Index = nSecter;
2008320c:	84409115 	stw	r17,580(r16)
}

//=================================================================================
//// add in v2.0
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
    bool bSuccess = TRUE;
20083210:	00800044 	movi	r2,1
//            if(memcmp(temp, pVol->Secter_Data, 512))
//            	printf("Data check failed!\n");
        }
    }
    return bSuccess;          
}     
20083214:	dfc00217 	ldw	ra,8(sp)
20083218:	dc400117 	ldw	r17,4(sp)
2008321c:	dc000017 	ldw	r16,0(sp)
20083220:	dec00304 	addi	sp,sp,12
20083224:	f800283a 	ret
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
    bool bSuccess = TRUE;
    static char temp[512];
    if (nSecter != pVol->Secter_Index){
        if (!pVol->ReadBlock512(pVol->DiskHandle, nSecter, pVol->Secter_Data)){
            pVol->Secter_Index = -1;
20083228:	00bfffc4 	movi	r2,-1
2008322c:	80809115 	stw	r2,580(r16)
            bSuccess = FALSE;
20083230:	0005883a 	mov	r2,zero
20083234:	003ff706 	br	20083214 <__flash_rwdata_start+0xfffe6bcc>
}

//=================================================================================
//// add in v2.0
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
    bool bSuccess = TRUE;
20083238:	00800044 	movi	r2,1
2008323c:	f800283a 	ret

20083240 <fatReadMultiSecter>:
//=================================================================================
//// [ADDED]
bool fatReadMultiSecter(VOLUME_INFO *pVol, alt_u32 nSecter, alt_u32 n, char* buf){
    bool bSuccess = TRUE;

	if (!pVol->ReadBlocks(pVol->DiskHandle, nSecter, n, buf)){
20083240:	20800317 	ldw	r2,12(r4)
20083244:	21000017 	ldw	r4,0(r4)
    }
    return bSuccess;          
}     
//=================================================================================
//// [ADDED]
bool fatReadMultiSecter(VOLUME_INFO *pVol, alt_u32 nSecter, alt_u32 n, char* buf){
20083248:	deffff04 	addi	sp,sp,-4
2008324c:	dfc00015 	stw	ra,0(sp)
    bool bSuccess = TRUE;

	if (!pVol->ReadBlocks(pVol->DiskHandle, nSecter, n, buf)){
20083250:	103ee83a 	callr	r2
		bSuccess = FALSE;
	}
    return bSuccess;
}
20083254:	1004c03a 	cmpne	r2,r2,zero
20083258:	dfc00017 	ldw	ra,0(sp)
2008325c:	dec00104 	addi	sp,sp,4
20083260:	f800283a 	ret

20083264 <fatFindDirectory>:
//=================================================================================
//// add in v2.0
FAT_DIRECTORY* fatFindDirectory(VOLUME_INFO *pVol, alt_u32 nDirectoryIndex){
20083264:	defffb04 	addi	sp,sp,-20
20083268:	dcc00315 	stw	r19,12(sp)
2008326c:	dc800215 	stw	r18,8(sp)
    FAT_DIRECTORY *pDir=NULL;
    alt_u32 nSecterOffset, nSecter, nByteOffset;
             
    nSecterOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)/pVol->BPB_BytsPerSec;
20083270:	2826917a 	slli	r19,r5,5
20083274:	24800717 	ldw	r18,28(r4)
	}
    return bSuccess;
}
//=================================================================================
//// add in v2.0
FAT_DIRECTORY* fatFindDirectory(VOLUME_INFO *pVol, alt_u32 nDirectoryIndex){
20083278:	dc000015 	stw	r16,0(sp)
2008327c:	2021883a 	mov	r16,r4
    FAT_DIRECTORY *pDir=NULL;
    alt_u32 nSecterOffset, nSecter, nByteOffset;
             
    nSecterOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)/pVol->BPB_BytsPerSec;
20083280:	900b883a 	mov	r5,r18
20083284:	9809883a 	mov	r4,r19
	}
    return bSuccess;
}
//=================================================================================
//// add in v2.0
FAT_DIRECTORY* fatFindDirectory(VOLUME_INFO *pVol, alt_u32 nDirectoryIndex){
20083288:	dc400115 	stw	r17,4(sp)
2008328c:	dfc00415 	stw	ra,16(sp)
    FAT_DIRECTORY *pDir=NULL;
    alt_u32 nSecterOffset, nSecter, nByteOffset;
             
    nSecterOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)/pVol->BPB_BytsPerSec;
20083290:	00867940 	call	20086794 <__udivsi3>
    nSecter = pVol->RootDirectoryEntrySecter + nSecterOffset;
20083294:	84400f17 	ldw	r17,60(r16)
//=================================================================================
//// add in v2.0
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
    bool bSuccess = TRUE;
    static char temp[512];
    if (nSecter != pVol->Secter_Index){
20083298:	80c09117 	ldw	r3,580(r16)
FAT_DIRECTORY* fatFindDirectory(VOLUME_INFO *pVol, alt_u32 nDirectoryIndex){
    FAT_DIRECTORY *pDir=NULL;
    alt_u32 nSecterOffset, nSecter, nByteOffset;
             
    nSecterOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)/pVol->BPB_BytsPerSec;
    nSecter = pVol->RootDirectoryEntrySecter + nSecterOffset;
2008329c:	1463883a 	add	r17,r2,r17
//=================================================================================
//// add in v2.0
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
    bool bSuccess = TRUE;
    static char temp[512];
    if (nSecter != pVol->Secter_Index){
200832a0:	88c00826 	beq	r17,r3,200832c4 <fatFindDirectory+0x60>
        if (!pVol->ReadBlock512(pVol->DiskHandle, nSecter, pVol->Secter_Data)){
200832a4:	80800117 	ldw	r2,4(r16)
200832a8:	81000017 	ldw	r4,0(r16)
200832ac:	880b883a 	mov	r5,r17
200832b0:	81801104 	addi	r6,r16,68
200832b4:	103ee83a 	callr	r2
200832b8:	10000e26 	beq	r2,zero,200832f4 <fatFindDirectory+0x90>
200832bc:	84800717 	ldw	r18,28(r16)
            pVol->Secter_Index = -1;
            bSuccess = FALSE;
        }else{
            pVol->Secter_Index = nSecter;
200832c0:	84409115 	stw	r17,580(r16)
             
    nSecterOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)/pVol->BPB_BytsPerSec;
    nSecter = pVol->RootDirectoryEntrySecter + nSecterOffset;
        // read sector
    if (fatReadSecter(pVol, nSecter)){
        nByteOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)%pVol->BPB_BytsPerSec; 
200832c4:	9809883a 	mov	r4,r19
200832c8:	900b883a 	mov	r5,r18
200832cc:	008679c0 	call	2008679c <__umodsi3>
        pDir = (FAT_DIRECTORY *)(pVol->Secter_Data + nByteOffset);
200832d0:	10801104 	addi	r2,r2,68
200832d4:	8085883a 	add	r2,r16,r2
    }        
        
    return pDir;        
}
200832d8:	dfc00417 	ldw	ra,16(sp)
200832dc:	dcc00317 	ldw	r19,12(sp)
200832e0:	dc800217 	ldw	r18,8(sp)
200832e4:	dc400117 	ldw	r17,4(sp)
200832e8:	dc000017 	ldw	r16,0(sp)
200832ec:	dec00504 	addi	sp,sp,20
200832f0:	f800283a 	ret
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
    bool bSuccess = TRUE;
    static char temp[512];
    if (nSecter != pVol->Secter_Index){
        if (!pVol->ReadBlock512(pVol->DiskHandle, nSecter, pVol->Secter_Data)){
            pVol->Secter_Index = -1;
200832f4:	00bfffc4 	movi	r2,-1
200832f8:	80809115 	stw	r2,580(r16)
    return bSuccess;
}
//=================================================================================
//// add in v2.0
FAT_DIRECTORY* fatFindDirectory(VOLUME_INFO *pVol, alt_u32 nDirectoryIndex){
    FAT_DIRECTORY *pDir=NULL;
200832fc:	0005883a 	mov	r2,zero
20083300:	003ff506 	br	200832d8 <__flash_rwdata_start+0xfffe6c90>

20083304 <fatFindUnusedDirectory>:
    return pDir;        
}

//=================================================================================
//// add in v2.0
alt_u32 fatFindUnusedDirectory(VOLUME_INFO *pVol){
20083304:	defff604 	addi	sp,sp,-40
20083308:	dcc00315 	stw	r19,12(sp)
2008330c:	dc400115 	stw	r17,4(sp)
20083310:	24c09117 	ldw	r19,580(r4)
20083314:	24400717 	ldw	r17,28(r4)
20083318:	df000815 	stw	fp,32(sp)
2008331c:	ddc00715 	stw	r23,28(sp)
20083320:	dd800615 	stw	r22,24(sp)
20083324:	dd400515 	stw	r21,20(sp)
20083328:	dd000415 	stw	r20,16(sp)
2008332c:	dc800215 	stw	r18,8(sp)
20083330:	dfc00915 	stw	ra,36(sp)
20083334:	dc000015 	stw	r16,0(sp)
20083338:	2039883a 	mov	fp,r4
    alt_u32 Dir = -1;
    FAT_DIRECTORY *pDir=NULL;
    alt_u32 nSecterOffset, nSecter, nByteOffset;
    alt_u32 nDirectoryIndex = 2; //??? start from ?
2008333c:	05000084 	movi	r20,2
20083340:	04801004 	movi	r18,64
    return TRUE;
    
}

bool fatIsUnusedDir(FAT_DIRECTORY *pDir){
    if (pDir->Name[0] == (alt_8)UNUSED_DIR_ENTRY)
20083344:	05bff944 	movi	r22,-27
//// add in v2.0
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
    bool bSuccess = TRUE;
    static char temp[512];
    if (nSecter != pVol->Secter_Index){
        if (!pVol->ReadBlock512(pVol->DiskHandle, nSecter, pVol->Secter_Data)){
20083348:	25401104 	addi	r21,r4,68
            pVol->Secter_Index = -1;
2008334c:	05ffffc4 	movi	r23,-1
    alt_u32 nSecterOffset, nSecter, nByteOffset;
    alt_u32 nDirectoryIndex = 2; //??? start from ?
    bool bDone = FALSE;
             
    while(!bDone){             
        nSecterOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)/pVol->BPB_BytsPerSec;
20083350:	880b883a 	mov	r5,r17
20083354:	9009883a 	mov	r4,r18
20083358:	00867940 	call	20086794 <__udivsi3>
        nSecter = pVol->RootDirectoryEntrySecter + nSecterOffset;
2008335c:	e4000f17 	ldw	r16,60(fp)
//// add in v2.0
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
    bool bSuccess = TRUE;
    static char temp[512];
    if (nSecter != pVol->Secter_Index){
        if (!pVol->ReadBlock512(pVol->DiskHandle, nSecter, pVol->Secter_Data)){
20083360:	a80d883a 	mov	r6,r21
    alt_u32 nDirectoryIndex = 2; //??? start from ?
    bool bDone = FALSE;
             
    while(!bDone){             
        nSecterOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)/pVol->BPB_BytsPerSec;
        nSecter = pVol->RootDirectoryEntrySecter + nSecterOffset;
20083364:	1421883a 	add	r16,r2,r16
//// add in v2.0
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
    bool bSuccess = TRUE;
    static char temp[512];
    if (nSecter != pVol->Secter_Index){
        if (!pVol->ReadBlock512(pVol->DiskHandle, nSecter, pVol->Secter_Data)){
20083368:	800b883a 	mov	r5,r16
//=================================================================================
//// add in v2.0
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
    bool bSuccess = TRUE;
    static char temp[512];
    if (nSecter != pVol->Secter_Index){
2008336c:	84c00726 	beq	r16,r19,2008338c <fatFindUnusedDirectory+0x88>
        if (!pVol->ReadBlock512(pVol->DiskHandle, nSecter, pVol->Secter_Data)){
20083370:	e1000017 	ldw	r4,0(fp)
20083374:	e0800117 	ldw	r2,4(fp)
            pVol->Secter_Index = -1;
            bSuccess = FALSE;
        }else{
            pVol->Secter_Index = nSecter;
20083378:	8027883a 	mov	r19,r16
//// add in v2.0
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
    bool bSuccess = TRUE;
    static char temp[512];
    if (nSecter != pVol->Secter_Index){
        if (!pVol->ReadBlock512(pVol->DiskHandle, nSecter, pVol->Secter_Data)){
2008337c:	103ee83a 	callr	r2
20083380:	10001a26 	beq	r2,zero,200833ec <fatFindUnusedDirectory+0xe8>
20083384:	e4400717 	ldw	r17,28(fp)
            pVol->Secter_Index = -1;
            bSuccess = FALSE;
        }else{
            pVol->Secter_Index = nSecter;
20083388:	e4009115 	stw	r16,580(fp)
    while(!bDone){             
        nSecterOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)/pVol->BPB_BytsPerSec;
        nSecter = pVol->RootDirectoryEntrySecter + nSecterOffset;
            // read sector
        if (fatReadSecter(pVol, nSecter)){
            nByteOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)%pVol->BPB_BytsPerSec; 
2008338c:	9009883a 	mov	r4,r18
20083390:	880b883a 	mov	r5,r17
20083394:	008679c0 	call	2008679c <__umodsi3>
    S = ((Date >> 0) & 0x1F)*2;
    FAT_DEBUG(("%d:%d:%d", H, M, S));     
}

bool fatIsLastDir(FAT_DIRECTORY *pDir){
    if (pDir->Name[0] == REMAINED_UNUSED_DIR_ENTRY)  // 0x00
20083398:	e085883a 	add	r2,fp,r2
2008339c:	10801107 	ldb	r2,68(r2)
200833a0:	10000426 	beq	r2,zero,200833b4 <fatFindUnusedDirectory+0xb0>
    return TRUE;
    
}

bool fatIsUnusedDir(FAT_DIRECTORY *pDir){
    if (pDir->Name[0] == (alt_8)UNUSED_DIR_ENTRY)
200833a4:	15800426 	beq	r2,r22,200833b8 <fatFindUnusedDirectory+0xb4>
            if (fatIsLastDir(pDir) || fatIsUnusedDir(pDir)){
                bDone = TRUE;
                if (fatIsUnusedDir(pDir))
                    Dir = nDirectoryIndex;
            }
            nDirectoryIndex++;        
200833a8:	a5000044 	addi	r20,r20,1
200833ac:	a024917a 	slli	r18,r20,5
200833b0:	003fe706 	br	20083350 <__flash_rwdata_start+0xfffe6d08>
    S = ((Date >> 0) & 0x1F)*2;
    FAT_DEBUG(("%d:%d:%d", H, M, S));     
}

bool fatIsLastDir(FAT_DIRECTORY *pDir){
    if (pDir->Name[0] == REMAINED_UNUSED_DIR_ENTRY)  // 0x00
200833b4:	053fffc4 	movi	r20,-1
                bDone = FALSE;
        }
    }             
    
    return Dir;      
}
200833b8:	a005883a 	mov	r2,r20
200833bc:	dfc00917 	ldw	ra,36(sp)
200833c0:	df000817 	ldw	fp,32(sp)
200833c4:	ddc00717 	ldw	r23,28(sp)
200833c8:	dd800617 	ldw	r22,24(sp)
200833cc:	dd400517 	ldw	r21,20(sp)
200833d0:	dd000417 	ldw	r20,16(sp)
200833d4:	dcc00317 	ldw	r19,12(sp)
200833d8:	dc800217 	ldw	r18,8(sp)
200833dc:	dc400117 	ldw	r17,4(sp)
200833e0:	dc000017 	ldw	r16,0(sp)
200833e4:	dec00a04 	addi	sp,sp,40
200833e8:	f800283a 	ret
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
    bool bSuccess = TRUE;
    static char temp[512];
    if (nSecter != pVol->Secter_Index){
        if (!pVol->ReadBlock512(pVol->DiskHandle, nSecter, pVol->Secter_Data)){
            pVol->Secter_Index = -1;
200833ec:	e5c09115 	stw	r23,580(fp)
200833f0:	e4400717 	ldw	r17,28(fp)
200833f4:	04ffffc4 	movi	r19,-1
200833f8:	003fd506 	br	20083350 <__flash_rwdata_start+0xfffe6d08>

200833fc <fatMount>:
    
    return Dir;      
}

//=================================================================================
bool fatMount(VOLUME_INFO *pVol){
200833fc:	defff604 	addi	sp,sp,-40
20083400:	dc400115 	stw	r17,4(sp)
20083404:	dc000015 	stw	r16,0(sp)
    // 1DEh( 16 bytes): 3nd Partition Entry
    // 1EEh( 16 bytes): 4nd Partition Entry
    // 1FEh(  2 bytes): Executable Maker (55h AAh)
    
    // read first block (secotor 0), BPB(BIOS Parameter Block) or called as boot sector or reserved sector
    if (!pVol->ReadBlock512(pVol->DiskHandle, 0, szBlock)){
20083408:	04400034 	movhi	r17,0
    
    return Dir;      
}

//=================================================================================
bool fatMount(VOLUME_INFO *pVol){
2008340c:	2021883a 	mov	r16,r4
    // 1DEh( 16 bytes): 3nd Partition Entry
    // 1EEh( 16 bytes): 4nd Partition Entry
    // 1FEh(  2 bytes): Executable Maker (55h AAh)
    
    // read first block (secotor 0), BPB(BIOS Parameter Block) or called as boot sector or reserved sector
    if (!pVol->ReadBlock512(pVol->DiskHandle, 0, szBlock)){
20083410:	20800117 	ldw	r2,4(r4)
20083414:	21000017 	ldw	r4,0(r4)
20083418:	8c4a8b04 	addi	r17,r17,10796
    
    return Dir;      
}

//=================================================================================
bool fatMount(VOLUME_INFO *pVol){
2008341c:	dfc00915 	stw	ra,36(sp)
20083420:	df000815 	stw	fp,32(sp)
20083424:	ddc00715 	stw	r23,28(sp)
20083428:	dd800615 	stw	r22,24(sp)
2008342c:	dd400515 	stw	r21,20(sp)
20083430:	dd000415 	stw	r20,16(sp)
20083434:	dcc00315 	stw	r19,12(sp)
20083438:	dc800215 	stw	r18,8(sp)
    // 1DEh( 16 bytes): 3nd Partition Entry
    // 1EEh( 16 bytes): 4nd Partition Entry
    // 1FEh(  2 bytes): Executable Maker (55h AAh)
    
    // read first block (secotor 0), BPB(BIOS Parameter Block) or called as boot sector or reserved sector
    if (!pVol->ReadBlock512(pVol->DiskHandle, 0, szBlock)){
2008343c:	000b883a 	mov	r5,zero
20083440:	880d883a 	mov	r6,r17
20083444:	103ee83a 	callr	r2
20083448:	10000526 	beq	r2,zero,20083460 <fatMount+0x64>
    */
        
    // check file system 
    FirstPartitionEntry = 0x1BE;
    //PartitionType = szBlock[FirstPartitionEntry + 4];
    PartitionType = szBlock[0x01C2];
2008344c:	88807083 	ldbu	r2,450(r17)
    if (PartitionType == PARTITION_FAT16){
20083450:	00c00184 	movi	r3,6
20083454:	10c00f26 	beq	r2,r3,20083494 <fatMount+0x98>
        FAT_DEBUG(("FAT16\n"));
    }else if (PartitionType == PARTITION_FAT32){
20083458:	00c002c4 	movi	r3,11
2008345c:	10c00d26 	beq	r2,r3,20083494 <fatMount+0x98>
    // 1FEh(  2 bytes): Executable Maker (55h AAh)
    
    // read first block (secotor 0), BPB(BIOS Parameter Block) or called as boot sector or reserved sector
    if (!pVol->ReadBlock512(pVol->DiskHandle, 0, szBlock)){
        FAT_DEBUG(("Read section 0 error.\n"));
        return FALSE;
20083460:	0005883a 	mov	r2,zero
    }        
    pVol->bMount = bSuccess;
    return bSuccess;   
    

}
20083464:	dfc00917 	ldw	ra,36(sp)
20083468:	df000817 	ldw	fp,32(sp)
2008346c:	ddc00717 	ldw	r23,28(sp)
20083470:	dd800617 	ldw	r22,24(sp)
20083474:	dd400517 	ldw	r21,20(sp)
20083478:	dd000417 	ldw	r20,16(sp)
2008347c:	dcc00317 	ldw	r19,12(sp)
20083480:	dc800217 	ldw	r18,8(sp)
20083484:	dc400117 	ldw	r17,4(sp)
20083488:	dc000017 	ldw	r16,0(sp)
2008348c:	dec00a04 	addi	sp,sp,40
20083490:	f800283a 	ret
        FAT_DEBUG(("FAT32\n"));
    }else{        
        FAT_DEBUG(("the partition type(%d) is not supported.\n", PartitionType));
        return FALSE; // only support FAT16 in this example
    }       
    pVol->Partition_Type = PartitionType; 
20083494:	80800415 	stw	r2,16(r16)
    alt_u8 *pMSB = (pValue + nNum - 1);
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
        nValue <<= 8;
        nValue |= *pMSB--;
20083498:	88807243 	ldbu	r2,457(r17)
2008349c:	89007203 	ldbu	r4,456(r17)
200834a0:	88c071c3 	ldbu	r3,455(r17)
unsigned int fatArray2Value(unsigned char *pValue, unsigned int nNum){
    alt_u8 *pMSB = (pValue + nNum - 1);
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
        nValue <<= 8;
200834a4:	1004923a 	slli	r2,r2,8
        nValue |= *pMSB--;
200834a8:	8c807183 	ldbu	r18,454(r17)
                            //szBlock[FirstPartitionEntry + 8 + 1]*256 + 
                            //szBlock[FirstPartitionEntry + 8];        
    
    //3 Parsing the Volume Boot Record(BR)
    //3.1  Read the Volume Boot Record(BR)
    if (!pVol->ReadBlock512(pVol->DiskHandle, FirstSectionInVolume1, szBlock)){
200834ac:	81c00117 	ldw	r7,4(r16)
    alt_u8 *pMSB = (pValue + nNum - 1);
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
        nValue <<= 8;
        nValue |= *pMSB--;
200834b0:	1104b03a 	or	r2,r2,r4
unsigned int fatArray2Value(unsigned char *pValue, unsigned int nNum){
    alt_u8 *pMSB = (pValue + nNum - 1);
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
        nValue <<= 8;
200834b4:	1004923a 	slli	r2,r2,8
        nValue |= *pMSB--;
200834b8:	04400034 	movhi	r17,0
                            //szBlock[FirstPartitionEntry + 8 + 1]*256 + 
                            //szBlock[FirstPartitionEntry + 8];        
    
    //3 Parsing the Volume Boot Record(BR)
    //3.1  Read the Volume Boot Record(BR)
    if (!pVol->ReadBlock512(pVol->DiskHandle, FirstSectionInVolume1, szBlock)){
200834bc:	81000017 	ldw	r4,0(r16)
    alt_u8 *pMSB = (pValue + nNum - 1);
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
        nValue <<= 8;
        nValue |= *pMSB--;
200834c0:	10c4b03a 	or	r2,r2,r3
unsigned int fatArray2Value(unsigned char *pValue, unsigned int nNum){
    alt_u8 *pMSB = (pValue + nNum - 1);
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
        nValue <<= 8;
200834c4:	1004923a 	slli	r2,r2,8
        nValue |= *pMSB--;
200834c8:	8c4a8b04 	addi	r17,r17,10796
                            //szBlock[FirstPartitionEntry + 8 + 1]*256 + 
                            //szBlock[FirstPartitionEntry + 8];        
    
    //3 Parsing the Volume Boot Record(BR)
    //3.1  Read the Volume Boot Record(BR)
    if (!pVol->ReadBlock512(pVol->DiskHandle, FirstSectionInVolume1, szBlock)){
200834cc:	880d883a 	mov	r6,r17
    alt_u8 *pMSB = (pValue + nNum - 1);
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
        nValue <<= 8;
        nValue |= *pMSB--;
200834d0:	14a4b03a 	or	r18,r2,r18
                            //szBlock[FirstPartitionEntry + 8 + 1]*256 + 
                            //szBlock[FirstPartitionEntry + 8];        
    
    //3 Parsing the Volume Boot Record(BR)
    //3.1  Read the Volume Boot Record(BR)
    if (!pVol->ReadBlock512(pVol->DiskHandle, FirstSectionInVolume1, szBlock)){
200834d4:	900b883a 	mov	r5,r18
200834d8:	383ee83a 	callr	r7
200834dc:	103fe026 	beq	r2,zero,20083460 <__flash_rwdata_start+0xfffe6e18>
        FAT_DEBUG(("Read first sector in volume one fail.\n"));
        return FALSE;
    }        
    pVol->PartitionStartSecter = FirstSectionInVolume1;     
200834e0:	84800615 	stw	r18,24(r16)
    pVol->BPB_BytsPerSec = szBlock[0x0B+1]*256 + szBlock[0x0B];
200834e4:	88800303 	ldbu	r2,12(r17)
200834e8:	8f0002c3 	ldbu	fp,11(r17)
    pVol->BPB_NumFATs = szBlock[0x10];
    pVol->BPB_RootEntCnt = szBlock[0x11+1]*256 + szBlock[0x11]; 
    pVol->BPB_FATSz = szBlock[0x16+1]*256 + szBlock[0x16];
    
    // add for v2.0
    pVol->Secter_Index = -1;
200834ec:	00ffffc4 	movi	r3,-1
    if (!pVol->ReadBlock512(pVol->DiskHandle, FirstSectionInVolume1, szBlock)){
        FAT_DEBUG(("Read first sector in volume one fail.\n"));
        return FALSE;
    }        
    pVol->PartitionStartSecter = FirstSectionInVolume1;     
    pVol->BPB_BytsPerSec = szBlock[0x0B+1]*256 + szBlock[0x0B];
200834f0:	1004923a 	slli	r2,r2,8
    pVol->BPB_NumFATs = szBlock[0x10];
    pVol->BPB_RootEntCnt = szBlock[0x11+1]*256 + szBlock[0x11]; 
    pVol->BPB_FATSz = szBlock[0x16+1]*256 + szBlock[0x16];
    
    // add for v2.0
    pVol->Secter_Index = -1;
200834f4:	80c09115 	stw	r3,580(r16)
    memset(pVol->Secter_Data, 0, MY_SECTER_SIZE); // 512 bytes
200834f8:	81001104 	addi	r4,r16,68
    if (!pVol->ReadBlock512(pVol->DiskHandle, FirstSectionInVolume1, szBlock)){
        FAT_DEBUG(("Read first sector in volume one fail.\n"));
        return FALSE;
    }        
    pVol->PartitionStartSecter = FirstSectionInVolume1;     
    pVol->BPB_BytsPerSec = szBlock[0x0B+1]*256 + szBlock[0x0B];
200834fc:	1739883a 	add	fp,r2,fp
20083500:	87000715 	stw	fp,28(r16)
    pVol->BPB_SecPerCluster = szBlock[0x0D];
20083504:	8dc00343 	ldbu	r23,13(r17)
    pVol->BPB_RootEntCnt = szBlock[0x11+1]*256 + szBlock[0x11]; 
    pVol->BPB_FATSz = szBlock[0x16+1]*256 + szBlock[0x16];
    
    // add for v2.0
    pVol->Secter_Index = -1;
    memset(pVol->Secter_Data, 0, MY_SECTER_SIZE); // 512 bytes
20083508:	000b883a 	mov	r5,zero
2008350c:	01808004 	movi	r6,512
        FAT_DEBUG(("Read first sector in volume one fail.\n"));
        return FALSE;
    }        
    pVol->PartitionStartSecter = FirstSectionInVolume1;     
    pVol->BPB_BytsPerSec = szBlock[0x0B+1]*256 + szBlock[0x0B];
    pVol->BPB_SecPerCluster = szBlock[0x0D];
20083510:	85c00815 	stw	r23,32(r16)
    pVol->BPB_RsvdSecCnt = szBlock[0x0E + 1]*256 + szBlock[0x0E]; 
20083514:	888003c3 	ldbu	r2,15(r17)
20083518:	8d400383 	ldbu	r21,14(r17)
2008351c:	1004923a 	slli	r2,r2,8
20083520:	156b883a 	add	r21,r2,r21
20083524:	85400915 	stw	r21,36(r16)
    pVol->BPB_NumFATs = szBlock[0x10];
20083528:	8d800403 	ldbu	r22,16(r17)
2008352c:	85800a15 	stw	r22,40(r16)
    pVol->BPB_RootEntCnt = szBlock[0x11+1]*256 + szBlock[0x11]; 
20083530:	88800483 	ldbu	r2,18(r17)
20083534:	8cc00443 	ldbu	r19,17(r17)
20083538:	1004923a 	slli	r2,r2,8
2008353c:	14e7883a 	add	r19,r2,r19
20083540:	84c00b15 	stw	r19,44(r16)
    pVol->BPB_FATSz = szBlock[0x16+1]*256 + szBlock[0x16];
20083544:	8d0005c3 	ldbu	r20,23(r17)
20083548:	88c00583 	ldbu	r3,22(r17)
2008354c:	a028923a 	slli	r20,r20,8
20083550:	a0e9883a 	add	r20,r20,r3
20083554:	85000c15 	stw	r20,48(r16)
    
    // add for v2.0
    pVol->Secter_Index = -1;
    memset(pVol->Secter_Data, 0, MY_SECTER_SIZE); // 512 bytes
20083558:	008a3180 	call	2008a318 <memset>
    
    if (pVol->Partition_Type == PARTITION_FAT32){
2008355c:	80c00417 	ldw	r3,16(r16)
20083560:	008002c4 	movi	r2,11
20083564:	18801126 	beq	r3,r2,200835ac <fatMount+0x1b0>
        pVol->BPB_FATSz = fatArray2Value(&szBlock[0x24], 4);  // BPB_FATSz32
        //pVol->BPB_RootEntCnt = fatArray2Value(&szBlock[0x2C], 4);  // BPB_RootClus            
    }
    
    if (pVol->BPB_BytsPerSec != MY_SECTER_SIZE){
20083568:	00808004 	movi	r2,512
2008356c:	e0bfbc1e 	bne	fp,r2,20083460 <__flash_rwdata_start+0xfffe6e18>
    FAT_DEBUG(("Sectors Per FAT: %04Xh(%d)\n", pVol->BPB_FATSz, pVol->BPB_FATSz));
#endif    
    //
    pVol->FatEntrySecter = pVol->PartitionStartSecter + pVol->BPB_RsvdSecCnt;
    pVol->RootDirectoryEntrySecter = pVol->FatEntrySecter + pVol->BPB_NumFATs * pVol->BPB_FATSz;
    pVol->DataEntrySecter = pVol->RootDirectoryEntrySecter + ((pVol->BPB_RootEntCnt*32)+(pVol->BPB_BytsPerSec-1))/pVol->BPB_BytsPerSec;
20083570:	9806917a 	slli	r3,r19,5
    FAT_DEBUG(("Maxmun Root Directory Entries: %04Xh(%d)\n", pVol->BPB_RootEntCnt, pVol->BPB_RootEntCnt));
    FAT_DEBUG(("Sectors Per FAT: %04Xh(%d)\n", pVol->BPB_FATSz, pVol->BPB_FATSz));
#endif    
    //
    pVol->FatEntrySecter = pVol->PartitionStartSecter + pVol->BPB_RsvdSecCnt;
    pVol->RootDirectoryEntrySecter = pVol->FatEntrySecter + pVol->BPB_NumFATs * pVol->BPB_FATSz;
20083574:	a5a9383a 	mul	r20,r20,r22
    FAT_DEBUG(("Number of Copyies of FAT: %02Xh(%d)\n", pVol->BPB_NumFATs, pVol->BPB_NumFATs));
    FAT_DEBUG(("Maxmun Root Directory Entries: %04Xh(%d)\n", pVol->BPB_RootEntCnt, pVol->BPB_RootEntCnt));
    FAT_DEBUG(("Sectors Per FAT: %04Xh(%d)\n", pVol->BPB_FATSz, pVol->BPB_FATSz));
#endif    
    //
    pVol->FatEntrySecter = pVol->PartitionStartSecter + pVol->BPB_RsvdSecCnt;
20083578:	9565883a 	add	r18,r18,r21
    pVol->RootDirectoryEntrySecter = pVol->FatEntrySecter + pVol->BPB_NumFATs * pVol->BPB_FATSz;
    pVol->DataEntrySecter = pVol->RootDirectoryEntrySecter + ((pVol->BPB_RootEntCnt*32)+(pVol->BPB_BytsPerSec-1))/pVol->BPB_BytsPerSec;
2008357c:	18c07fc4 	addi	r3,r3,511
20083580:	1806d27a 	srli	r3,r3,9
    
    // read FAT table into memory
    pVol->nBytesPerCluster = pVol->BPB_BytsPerSec * pVol->BPB_SecPerCluster;
20083584:	b82e927a 	slli	r23,r23,9
    FAT_DEBUG(("Maxmun Root Directory Entries: %04Xh(%d)\n", pVol->BPB_RootEntCnt, pVol->BPB_RootEntCnt));
    FAT_DEBUG(("Sectors Per FAT: %04Xh(%d)\n", pVol->BPB_FATSz, pVol->BPB_FATSz));
#endif    
    //
    pVol->FatEntrySecter = pVol->PartitionStartSecter + pVol->BPB_RsvdSecCnt;
    pVol->RootDirectoryEntrySecter = pVol->FatEntrySecter + pVol->BPB_NumFATs * pVol->BPB_FATSz;
20083588:	a4a9883a 	add	r20,r20,r18
    if (bSuccess){
        FAT_DEBUG(("Fat_Mount success\n"));
    }else{        
        FAT_DEBUG(("Fat_Mount fail\n"));
    }        
    pVol->bMount = bSuccess;
2008358c:	00800044 	movi	r2,1
    FAT_DEBUG(("Sectors Per FAT: %04Xh(%d)\n", pVol->BPB_FATSz, pVol->BPB_FATSz));
#endif    
    //
    pVol->FatEntrySecter = pVol->PartitionStartSecter + pVol->BPB_RsvdSecCnt;
    pVol->RootDirectoryEntrySecter = pVol->FatEntrySecter + pVol->BPB_NumFATs * pVol->BPB_FATSz;
    pVol->DataEntrySecter = pVol->RootDirectoryEntrySecter + ((pVol->BPB_RootEntCnt*32)+(pVol->BPB_BytsPerSec-1))/pVol->BPB_BytsPerSec;
20083590:	a0c7883a 	add	r3,r20,r3
    FAT_DEBUG(("Number of Copyies of FAT: %02Xh(%d)\n", pVol->BPB_NumFATs, pVol->BPB_NumFATs));
    FAT_DEBUG(("Maxmun Root Directory Entries: %04Xh(%d)\n", pVol->BPB_RootEntCnt, pVol->BPB_RootEntCnt));
    FAT_DEBUG(("Sectors Per FAT: %04Xh(%d)\n", pVol->BPB_FATSz, pVol->BPB_FATSz));
#endif    
    //
    pVol->FatEntrySecter = pVol->PartitionStartSecter + pVol->BPB_RsvdSecCnt;
20083594:	84800e15 	stw	r18,56(r16)
    pVol->RootDirectoryEntrySecter = pVol->FatEntrySecter + pVol->BPB_NumFATs * pVol->BPB_FATSz;
20083598:	85000f15 	stw	r20,60(r16)
    pVol->DataEntrySecter = pVol->RootDirectoryEntrySecter + ((pVol->BPB_RootEntCnt*32)+(pVol->BPB_BytsPerSec-1))/pVol->BPB_BytsPerSec;
2008359c:	80c01015 	stw	r3,64(r16)
    
    // read FAT table into memory
    pVol->nBytesPerCluster = pVol->BPB_BytsPerSec * pVol->BPB_SecPerCluster;
200835a0:	85c00d15 	stw	r23,52(r16)
    if (bSuccess){
        FAT_DEBUG(("Fat_Mount success\n"));
    }else{        
        FAT_DEBUG(("Fat_Mount fail\n"));
    }        
    pVol->bMount = bSuccess;
200835a4:	80800515 	stw	r2,20(r16)
    return bSuccess;   
200835a8:	003fae06 	br	20083464 <__flash_rwdata_start+0xfffe6e1c>
    alt_u8 *pMSB = (pValue + nNum - 1);
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
        nValue <<= 8;
        nValue |= *pMSB--;
200835ac:	8d0009c3 	ldbu	r20,39(r17)
200835b0:	89000983 	ldbu	r4,38(r17)
200835b4:	88800943 	ldbu	r2,37(r17)
unsigned int fatArray2Value(unsigned char *pValue, unsigned int nNum){
    alt_u8 *pMSB = (pValue + nNum - 1);
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
        nValue <<= 8;
200835b8:	a028923a 	slli	r20,r20,8
        nValue |= *pMSB--;
200835bc:	88c00903 	ldbu	r3,36(r17)
200835c0:	a128b03a 	or	r20,r20,r4
unsigned int fatArray2Value(unsigned char *pValue, unsigned int nNum){
    alt_u8 *pMSB = (pValue + nNum - 1);
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
        nValue <<= 8;
200835c4:	a028923a 	slli	r20,r20,8
        nValue |= *pMSB--;
200835c8:	a0a8b03a 	or	r20,r20,r2
unsigned int fatArray2Value(unsigned char *pValue, unsigned int nNum){
    alt_u8 *pMSB = (pValue + nNum - 1);
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
        nValue <<= 8;
200835cc:	a028923a 	slli	r20,r20,8
        nValue |= *pMSB--;
200835d0:	a0e8b03a 	or	r20,r20,r3
    // add for v2.0
    pVol->Secter_Index = -1;
    memset(pVol->Secter_Data, 0, MY_SECTER_SIZE); // 512 bytes
    
    if (pVol->Partition_Type == PARTITION_FAT32){
        pVol->BPB_FATSz = fatArray2Value(&szBlock[0x24], 4);  // BPB_FATSz32
200835d4:	85000c15 	stw	r20,48(r16)
200835d8:	003fe306 	br	20083568 <__flash_rwdata_start+0xfffe6f20>

200835dc <fatMountSdcard>:

bool SD_ReadBlocks(DISK_HANDLE DiskHandle, alt_u32 PysicalSelector, alt_u32 n, alt_u8* szBuf){
    return SDLIB_ReadBlocks(PysicalSelector, n, szBuf);
}

FAT_HANDLE fatMountSdcard(void){
200835dc:	defff504 	addi	sp,sp,-44
200835e0:	dc000115 	stw	r16,4(sp)
200835e4:	dfc00a15 	stw	ra,40(sp)
200835e8:	df000915 	stw	fp,36(sp)
200835ec:	ddc00815 	stw	r23,32(sp)
200835f0:	dd800715 	stw	r22,28(sp)
200835f4:	dd400615 	stw	r21,24(sp)
200835f8:	dd000515 	stw	r20,20(sp)
200835fc:	dcc00415 	stw	r19,16(sp)
20083600:	dc800315 	stw	r18,12(sp)
20083604:	dc400215 	stw	r17,8(sp)
20083608:	040002c4 	movi	r16,11
2008360c:	843fffc4 	addi	r16,r16,-1
    bool bFind = FALSE;
    int nTry=0;
    bool bSuccess = TRUE;
        
    //1. chek whether SD Card existed. Init SD card if it is present.
    while(!bFind && nTry++ < nMaxTry){
20083610:	80001526 	beq	r16,zero,20083668 <fatMountSdcard+0x8c>
        bFind = SDLIB_Init();
20083614:	00851440 	call	20085144 <SDLIB_Init>
        if (!bFind)
20083618:	10002026 	beq	r2,zero,2008369c <fatMountSdcard+0xc0>
    }    
    
    //hFat = malloc(sizeof(VOLUME_INFO));
    hFat = &vInfo;
    pVol = (VOLUME_INFO *)hFat;
    pVol->ReadBlock512 = SD_ReadBlock512;
2008361c:	04000034 	movhi	r16,0
20083620:	00880234 	movhi	r2,8200
20083624:	840b2504 	addi	r16,r16,11412
20083628:	108a9704 	addi	r2,r2,10844

//===================== SUPPORT_SD_CARD =================================================
#ifdef SUPPORT_SD_CARD

bool SD_ReadBlock512(DISK_HANDLE DiskHandle, alt_u32 PysicalSelector, alt_u8 szBuf[512]){
    return SDLIB_ReadBlock512(PysicalSelector, szBuf);
2008362c:	04400034 	movhi	r17,0
20083630:	8c4a8b04 	addi	r17,r17,10796
    }    
    
    //hFat = malloc(sizeof(VOLUME_INFO));
    hFat = &vInfo;
    pVol = (VOLUME_INFO *)hFat;
    pVol->ReadBlock512 = SD_ReadBlock512;
20083634:	80800115 	stw	r2,4(r16)
    pVol->ReadBlocks = SD_ReadBlocks;
20083638:	00880234 	movhi	r2,8200
2008363c:	108a9a04 	addi	r2,r2,10856

//===================== SUPPORT_SD_CARD =================================================
#ifdef SUPPORT_SD_CARD

bool SD_ReadBlock512(DISK_HANDLE DiskHandle, alt_u32 PysicalSelector, alt_u8 szBuf[512]){
    return SDLIB_ReadBlock512(PysicalSelector, szBuf);
20083640:	0009883a 	mov	r4,zero
20083644:	880b883a 	mov	r5,r17
    
    //hFat = malloc(sizeof(VOLUME_INFO));
    hFat = &vInfo;
    pVol = (VOLUME_INFO *)hFat;
    pVol->ReadBlock512 = SD_ReadBlock512;
    pVol->ReadBlocks = SD_ReadBlocks;
20083648:	80800315 	stw	r2,12(r16)

//===================== SUPPORT_SD_CARD =================================================
#ifdef SUPPORT_SD_CARD

bool SD_ReadBlock512(DISK_HANDLE DiskHandle, alt_u32 PysicalSelector, alt_u8 szBuf[512]){
    return SDLIB_ReadBlock512(PysicalSelector, szBuf);
2008364c:	00851b40 	call	200851b4 <SDLIB_ReadBlock512>
    // 1DEh( 16 bytes): 3nd Partition Entry
    // 1EEh( 16 bytes): 4nd Partition Entry
    // 1FEh(  2 bytes): Executable Maker (55h AAh)
    
    // read first block (secotor 0), BPB(BIOS Parameter Block) or called as boot sector or reserved sector
    if (!pVol->ReadBlock512(pVol->DiskHandle, 0, szBlock)){
20083650:	10000526 	beq	r2,zero,20083668 <fatMountSdcard+0x8c>
    */
        
    // check file system 
    FirstPartitionEntry = 0x1BE;
    //PartitionType = szBlock[FirstPartitionEntry + 4];
    PartitionType = szBlock[0x01C2];
20083654:	88807083 	ldbu	r2,450(r17)
    if (PartitionType == PARTITION_FAT16){
20083658:	00c00184 	movi	r3,6
2008365c:	10c01326 	beq	r2,r3,200836ac <fatMountSdcard+0xd0>
        FAT_DEBUG(("FAT16\n"));
    }else if (PartitionType == PARTITION_FAT32){
20083660:	00c002c4 	movi	r3,11
20083664:	10c01126 	beq	r2,r3,200836ac <fatMountSdcard+0xd0>
        FAT_DEBUG(("Fat_Mount success\n"));
        pVol->bMount = TRUE;
    }else{        
        FAT_DEBUG(("Fat_Mount fail\n"));
        //free((void *)hFat);
        hFat = 0;
20083668:	0005883a 	mov	r2,zero
    }        

    return hFat;   
}
2008366c:	dfc00a17 	ldw	ra,40(sp)
20083670:	df000917 	ldw	fp,36(sp)
20083674:	ddc00817 	ldw	r23,32(sp)
20083678:	dd800717 	ldw	r22,28(sp)
2008367c:	dd400617 	ldw	r21,24(sp)
20083680:	dd000517 	ldw	r20,20(sp)
20083684:	dcc00417 	ldw	r19,16(sp)
20083688:	dc800317 	ldw	r18,12(sp)
2008368c:	dc400217 	ldw	r17,8(sp)
20083690:	dc000117 	ldw	r16,4(sp)
20083694:	dec00b04 	addi	sp,sp,44
20083698:	f800283a 	ret
        
    //1. chek whether SD Card existed. Init SD card if it is present.
    while(!bFind && nTry++ < nMaxTry){
        bFind = SDLIB_Init();
        if (!bFind)
            usleep(100*1000);
2008369c:	010000b4 	movhi	r4,2
200836a0:	2121a804 	addi	r4,r4,-31072
200836a4:	0097e4c0 	call	20097e4c <usleep>
200836a8:	003fd806 	br	2008360c <__flash_rwdata_start+0xfffe6fc4>
    alt_u8 *pMSB = (pValue + nNum - 1);
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
        nValue <<= 8;
        nValue |= *pMSB--;
200836ac:	88c07243 	ldbu	r3,457(r17)
200836b0:	89007203 	ldbu	r4,456(r17)
200836b4:	894071c3 	ldbu	r5,455(r17)
unsigned int fatArray2Value(unsigned char *pValue, unsigned int nNum){
    alt_u8 *pMSB = (pValue + nNum - 1);
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
        nValue <<= 8;
200836b8:	1806923a 	slli	r3,r3,8
        nValue |= *pMSB--;
200836bc:	8cc07183 	ldbu	r19,454(r17)
                            //szBlock[FirstPartitionEntry + 8 + 1]*256 + 
                            //szBlock[FirstPartitionEntry + 8];        
    
    //3 Parsing the Volume Boot Record(BR)
    //3.1  Read the Volume Boot Record(BR)
    if (!pVol->ReadBlock512(pVol->DiskHandle, FirstSectionInVolume1, szBlock)){
200836c0:	81c00117 	ldw	r7,4(r16)
    alt_u8 *pMSB = (pValue + nNum - 1);
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
        nValue <<= 8;
        nValue |= *pMSB--;
200836c4:	1906b03a 	or	r3,r3,r4
unsigned int fatArray2Value(unsigned char *pValue, unsigned int nNum){
    alt_u8 *pMSB = (pValue + nNum - 1);
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
        nValue <<= 8;
200836c8:	1806923a 	slli	r3,r3,8
        nValue |= *pMSB--;
200836cc:	04400034 	movhi	r17,0
                            //szBlock[FirstPartitionEntry + 8 + 1]*256 + 
                            //szBlock[FirstPartitionEntry + 8];        
    
    //3 Parsing the Volume Boot Record(BR)
    //3.1  Read the Volume Boot Record(BR)
    if (!pVol->ReadBlock512(pVol->DiskHandle, FirstSectionInVolume1, szBlock)){
200836d0:	81000017 	ldw	r4,0(r16)
    alt_u8 *pMSB = (pValue + nNum - 1);
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
        nValue <<= 8;
        nValue |= *pMSB--;
200836d4:	1946b03a 	or	r3,r3,r5
unsigned int fatArray2Value(unsigned char *pValue, unsigned int nNum){
    alt_u8 *pMSB = (pValue + nNum - 1);
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
        nValue <<= 8;
200836d8:	1806923a 	slli	r3,r3,8
        nValue |= *pMSB--;
200836dc:	8c4a8b04 	addi	r17,r17,10796
        FAT_DEBUG(("FAT32\n"));
    }else{        
        FAT_DEBUG(("the partition type(%d) is not supported.\n", PartitionType));
        return FALSE; // only support FAT16 in this example
    }       
    pVol->Partition_Type = PartitionType; 
200836e0:	04800034 	movhi	r18,0
    alt_u8 *pMSB = (pValue + nNum - 1);
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
        nValue <<= 8;
        nValue |= *pMSB--;
200836e4:	1ce6b03a 	or	r19,r3,r19
        FAT_DEBUG(("FAT32\n"));
    }else{        
        FAT_DEBUG(("the partition type(%d) is not supported.\n", PartitionType));
        return FALSE; // only support FAT16 in this example
    }       
    pVol->Partition_Type = PartitionType; 
200836e8:	80800415 	stw	r2,16(r16)
                            //szBlock[FirstPartitionEntry + 8 + 1]*256 + 
                            //szBlock[FirstPartitionEntry + 8];        
    
    //3 Parsing the Volume Boot Record(BR)
    //3.1  Read the Volume Boot Record(BR)
    if (!pVol->ReadBlock512(pVol->DiskHandle, FirstSectionInVolume1, szBlock)){
200836ec:	880d883a 	mov	r6,r17
200836f0:	980b883a 	mov	r5,r19
        FAT_DEBUG(("FAT32\n"));
    }else{        
        FAT_DEBUG(("the partition type(%d) is not supported.\n", PartitionType));
        return FALSE; // only support FAT16 in this example
    }       
    pVol->Partition_Type = PartitionType; 
200836f4:	948b2504 	addi	r18,r18,11412
                            //szBlock[FirstPartitionEntry + 8 + 1]*256 + 
                            //szBlock[FirstPartitionEntry + 8];        
    
    //3 Parsing the Volume Boot Record(BR)
    //3.1  Read the Volume Boot Record(BR)
    if (!pVol->ReadBlock512(pVol->DiskHandle, FirstSectionInVolume1, szBlock)){
200836f8:	383ee83a 	callr	r7
200836fc:	103fda26 	beq	r2,zero,20083668 <__flash_rwdata_start+0xfffe7020>
        FAT_DEBUG(("Read first sector in volume one fail.\n"));
        return FALSE;
    }        
    pVol->PartitionStartSecter = FirstSectionInVolume1;     
    pVol->BPB_BytsPerSec = szBlock[0x0B+1]*256 + szBlock[0x0B];
20083700:	89c00303 	ldbu	r7,12(r17)
    pVol->BPB_SecPerCluster = szBlock[0x0D];
    pVol->BPB_RsvdSecCnt = szBlock[0x0E + 1]*256 + szBlock[0x0E]; 
20083704:	898003c3 	ldbu	r6,15(r17)
    pVol->BPB_NumFATs = szBlock[0x10];
    pVol->BPB_RootEntCnt = szBlock[0x11+1]*256 + szBlock[0x11]; 
20083708:	89400483 	ldbu	r5,18(r17)
    pVol->BPB_FATSz = szBlock[0x16+1]*256 + szBlock[0x16];
2008370c:	88c005c3 	ldbu	r3,23(r17)
20083710:	88800583 	ldbu	r2,22(r17)
    if (!pVol->ReadBlock512(pVol->DiskHandle, FirstSectionInVolume1, szBlock)){
        FAT_DEBUG(("Read first sector in volume one fail.\n"));
        return FALSE;
    }        
    pVol->PartitionStartSecter = FirstSectionInVolume1;     
    pVol->BPB_BytsPerSec = szBlock[0x0B+1]*256 + szBlock[0x0B];
20083714:	380e923a 	slli	r7,r7,8
    pVol->BPB_SecPerCluster = szBlock[0x0D];
    pVol->BPB_RsvdSecCnt = szBlock[0x0E + 1]*256 + szBlock[0x0E]; 
    pVol->BPB_NumFATs = szBlock[0x10];
    pVol->BPB_RootEntCnt = szBlock[0x11+1]*256 + szBlock[0x11]; 
    pVol->BPB_FATSz = szBlock[0x16+1]*256 + szBlock[0x16];
20083718:	1806923a 	slli	r3,r3,8
    if (!pVol->ReadBlock512(pVol->DiskHandle, FirstSectionInVolume1, szBlock)){
        FAT_DEBUG(("Read first sector in volume one fail.\n"));
        return FALSE;
    }        
    pVol->PartitionStartSecter = FirstSectionInVolume1;     
    pVol->BPB_BytsPerSec = szBlock[0x0B+1]*256 + szBlock[0x0B];
2008371c:	8dc002c3 	ldbu	r23,11(r17)
    pVol->BPB_SecPerCluster = szBlock[0x0D];
    pVol->BPB_RsvdSecCnt = szBlock[0x0E + 1]*256 + szBlock[0x0E]; 
20083720:	300c923a 	slli	r6,r6,8
20083724:	8d800383 	ldbu	r22,14(r17)
    pVol->BPB_NumFATs = szBlock[0x10];
    pVol->BPB_RootEntCnt = szBlock[0x11+1]*256 + szBlock[0x11]; 
20083728:	280a923a 	slli	r5,r5,8
2008372c:	8d000443 	ldbu	r20,17(r17)
    }        
    pVol->PartitionStartSecter = FirstSectionInVolume1;     
    pVol->BPB_BytsPerSec = szBlock[0x0B+1]*256 + szBlock[0x0B];
    pVol->BPB_SecPerCluster = szBlock[0x0D];
    pVol->BPB_RsvdSecCnt = szBlock[0x0E + 1]*256 + szBlock[0x0E]; 
    pVol->BPB_NumFATs = szBlock[0x10];
20083730:	8a000403 	ldbu	r8,16(r17)
        FAT_DEBUG(("Read first sector in volume one fail.\n"));
        return FALSE;
    }        
    pVol->PartitionStartSecter = FirstSectionInVolume1;     
    pVol->BPB_BytsPerSec = szBlock[0x0B+1]*256 + szBlock[0x0B];
    pVol->BPB_SecPerCluster = szBlock[0x0D];
20083734:	8f000343 	ldbu	fp,13(r17)
    pVol->BPB_RsvdSecCnt = szBlock[0x0E + 1]*256 + szBlock[0x0E]; 
    pVol->BPB_NumFATs = szBlock[0x10];
    pVol->BPB_RootEntCnt = szBlock[0x11+1]*256 + szBlock[0x11]; 
    pVol->BPB_FATSz = szBlock[0x16+1]*256 + szBlock[0x16];
20083738:	18ab883a 	add	r21,r3,r2
    if (!pVol->ReadBlock512(pVol->DiskHandle, FirstSectionInVolume1, szBlock)){
        FAT_DEBUG(("Read first sector in volume one fail.\n"));
        return FALSE;
    }        
    pVol->PartitionStartSecter = FirstSectionInVolume1;     
    pVol->BPB_BytsPerSec = szBlock[0x0B+1]*256 + szBlock[0x0B];
2008373c:	3def883a 	add	r23,r7,r23
    pVol->BPB_SecPerCluster = szBlock[0x0D];
    pVol->BPB_RsvdSecCnt = szBlock[0x0E + 1]*256 + szBlock[0x0E]; 
20083740:	35ad883a 	add	r22,r6,r22
    pVol->BPB_NumFATs = szBlock[0x10];
    pVol->BPB_RootEntCnt = szBlock[0x11+1]*256 + szBlock[0x11]; 
20083744:	2d29883a 	add	r20,r5,r20
    pVol->BPB_FATSz = szBlock[0x16+1]*256 + szBlock[0x16];
    
    // add for v2.0
    pVol->Secter_Index = -1;
20083748:	00bfffc4 	movi	r2,-1
    memset(pVol->Secter_Data, 0, MY_SECTER_SIZE); // 512 bytes
2008374c:	91001104 	addi	r4,r18,68
20083750:	000b883a 	mov	r5,zero
20083754:	01808004 	movi	r6,512
    }        
    pVol->PartitionStartSecter = FirstSectionInVolume1;     
    pVol->BPB_BytsPerSec = szBlock[0x0B+1]*256 + szBlock[0x0B];
    pVol->BPB_SecPerCluster = szBlock[0x0D];
    pVol->BPB_RsvdSecCnt = szBlock[0x0E + 1]*256 + szBlock[0x0E]; 
    pVol->BPB_NumFATs = szBlock[0x10];
20083758:	92000a15 	stw	r8,40(r18)
    pVol->BPB_RootEntCnt = szBlock[0x11+1]*256 + szBlock[0x11]; 
    pVol->BPB_FATSz = szBlock[0x16+1]*256 + szBlock[0x16];
    
    // add for v2.0
    pVol->Secter_Index = -1;
    memset(pVol->Secter_Data, 0, MY_SECTER_SIZE); // 512 bytes
2008375c:	da000015 	stw	r8,0(sp)
    //3.1  Read the Volume Boot Record(BR)
    if (!pVol->ReadBlock512(pVol->DiskHandle, FirstSectionInVolume1, szBlock)){
        FAT_DEBUG(("Read first sector in volume one fail.\n"));
        return FALSE;
    }        
    pVol->PartitionStartSecter = FirstSectionInVolume1;     
20083760:	94c00615 	stw	r19,24(r18)
    pVol->BPB_BytsPerSec = szBlock[0x0B+1]*256 + szBlock[0x0B];
20083764:	95c00715 	stw	r23,28(r18)
    pVol->BPB_SecPerCluster = szBlock[0x0D];
20083768:	97000815 	stw	fp,32(r18)
    pVol->BPB_RsvdSecCnt = szBlock[0x0E + 1]*256 + szBlock[0x0E]; 
2008376c:	95800915 	stw	r22,36(r18)
    pVol->BPB_NumFATs = szBlock[0x10];
    pVol->BPB_RootEntCnt = szBlock[0x11+1]*256 + szBlock[0x11]; 
20083770:	95000b15 	stw	r20,44(r18)
    pVol->BPB_FATSz = szBlock[0x16+1]*256 + szBlock[0x16];
20083774:	95400c15 	stw	r21,48(r18)
    
    // add for v2.0
    pVol->Secter_Index = -1;
20083778:	90809115 	stw	r2,580(r18)
    memset(pVol->Secter_Data, 0, MY_SECTER_SIZE); // 512 bytes
2008377c:	008a3180 	call	2008a318 <memset>
    
    if (pVol->Partition_Type == PARTITION_FAT32){
20083780:	90c00417 	ldw	r3,16(r18)
20083784:	008002c4 	movi	r2,11
20083788:	da000017 	ldw	r8,0(sp)
2008378c:	18801326 	beq	r3,r2,200837dc <fatMountSdcard+0x200>
        pVol->BPB_FATSz = fatArray2Value(&szBlock[0x24], 4);  // BPB_FATSz32
        //pVol->BPB_RootEntCnt = fatArray2Value(&szBlock[0x2C], 4);  // BPB_RootClus            
    }
    
    if (pVol->BPB_BytsPerSec != MY_SECTER_SIZE){
20083790:	00808004 	movi	r2,512
20083794:	b8bfb41e 	bne	r23,r2,20083668 <__flash_rwdata_start+0xfffe7020>
    FAT_DEBUG(("Sectors Per FAT: %04Xh(%d)\n", pVol->BPB_FATSz, pVol->BPB_FATSz));
#endif    
    //
    pVol->FatEntrySecter = pVol->PartitionStartSecter + pVol->BPB_RsvdSecCnt;
    pVol->RootDirectoryEntrySecter = pVol->FatEntrySecter + pVol->BPB_NumFATs * pVol->BPB_FATSz;
    pVol->DataEntrySecter = pVol->RootDirectoryEntrySecter + ((pVol->BPB_RootEntCnt*32)+(pVol->BPB_BytsPerSec-1))/pVol->BPB_BytsPerSec;
20083798:	a004917a 	slli	r2,r20,5
    FAT_DEBUG(("Maxmun Root Directory Entries: %04Xh(%d)\n", pVol->BPB_RootEntCnt, pVol->BPB_RootEntCnt));
    FAT_DEBUG(("Sectors Per FAT: %04Xh(%d)\n", pVol->BPB_FATSz, pVol->BPB_FATSz));
#endif    
    //
    pVol->FatEntrySecter = pVol->PartitionStartSecter + pVol->BPB_RsvdSecCnt;
    pVol->RootDirectoryEntrySecter = pVol->FatEntrySecter + pVol->BPB_NumFATs * pVol->BPB_FATSz;
2008379c:	aa09383a 	mul	r4,r21,r8
    FAT_DEBUG(("Number of Copyies of FAT: %02Xh(%d)\n", pVol->BPB_NumFATs, pVol->BPB_NumFATs));
    FAT_DEBUG(("Maxmun Root Directory Entries: %04Xh(%d)\n", pVol->BPB_RootEntCnt, pVol->BPB_RootEntCnt));
    FAT_DEBUG(("Sectors Per FAT: %04Xh(%d)\n", pVol->BPB_FATSz, pVol->BPB_FATSz));
#endif    
    //
    pVol->FatEntrySecter = pVol->PartitionStartSecter + pVol->BPB_RsvdSecCnt;
200837a0:	9d87883a 	add	r3,r19,r22
    pVol->RootDirectoryEntrySecter = pVol->FatEntrySecter + pVol->BPB_NumFATs * pVol->BPB_FATSz;
    pVol->DataEntrySecter = pVol->RootDirectoryEntrySecter + ((pVol->BPB_RootEntCnt*32)+(pVol->BPB_BytsPerSec-1))/pVol->BPB_BytsPerSec;
200837a4:	10807fc4 	addi	r2,r2,511
200837a8:	1004d27a 	srli	r2,r2,9
    FAT_DEBUG(("Maxmun Root Directory Entries: %04Xh(%d)\n", pVol->BPB_RootEntCnt, pVol->BPB_RootEntCnt));
    FAT_DEBUG(("Sectors Per FAT: %04Xh(%d)\n", pVol->BPB_FATSz, pVol->BPB_FATSz));
#endif    
    //
    pVol->FatEntrySecter = pVol->PartitionStartSecter + pVol->BPB_RsvdSecCnt;
    pVol->RootDirectoryEntrySecter = pVol->FatEntrySecter + pVol->BPB_NumFATs * pVol->BPB_FATSz;
200837ac:	20c9883a 	add	r4,r4,r3
    pVol->DataEntrySecter = pVol->RootDirectoryEntrySecter + ((pVol->BPB_RootEntCnt*32)+(pVol->BPB_BytsPerSec-1))/pVol->BPB_BytsPerSec;
    
    // read FAT table into memory
    pVol->nBytesPerCluster = pVol->BPB_BytsPerSec * pVol->BPB_SecPerCluster;
200837b0:	e038927a 	slli	fp,fp,9
    FAT_DEBUG(("Sectors Per FAT: %04Xh(%d)\n", pVol->BPB_FATSz, pVol->BPB_FATSz));
#endif    
    //
    pVol->FatEntrySecter = pVol->PartitionStartSecter + pVol->BPB_RsvdSecCnt;
    pVol->RootDirectoryEntrySecter = pVol->FatEntrySecter + pVol->BPB_NumFATs * pVol->BPB_FATSz;
    pVol->DataEntrySecter = pVol->RootDirectoryEntrySecter + ((pVol->BPB_RootEntCnt*32)+(pVol->BPB_BytsPerSec-1))/pVol->BPB_BytsPerSec;
200837b4:	2085883a 	add	r2,r4,r2
200837b8:	80801015 	stw	r2,64(r16)
    if (bSuccess){
        FAT_DEBUG(("Fat_Mount success\n"));
    }else{        
        FAT_DEBUG(("Fat_Mount fail\n"));
    }        
    pVol->bMount = bSuccess;
200837bc:	00800044 	movi	r2,1
200837c0:	80800515 	stw	r2,20(r16)
        FAT_DEBUG(("Cannot find SD card.\n"));
        return hFat;
    }    
    
    //hFat = malloc(sizeof(VOLUME_INFO));
    hFat = &vInfo;
200837c4:	00800034 	movhi	r2,0
    FAT_DEBUG(("Number of Copyies of FAT: %02Xh(%d)\n", pVol->BPB_NumFATs, pVol->BPB_NumFATs));
    FAT_DEBUG(("Maxmun Root Directory Entries: %04Xh(%d)\n", pVol->BPB_RootEntCnt, pVol->BPB_RootEntCnt));
    FAT_DEBUG(("Sectors Per FAT: %04Xh(%d)\n", pVol->BPB_FATSz, pVol->BPB_FATSz));
#endif    
    //
    pVol->FatEntrySecter = pVol->PartitionStartSecter + pVol->BPB_RsvdSecCnt;
200837c8:	80c00e15 	stw	r3,56(r16)
    pVol->RootDirectoryEntrySecter = pVol->FatEntrySecter + pVol->BPB_NumFATs * pVol->BPB_FATSz;
200837cc:	81000f15 	stw	r4,60(r16)
    pVol->DataEntrySecter = pVol->RootDirectoryEntrySecter + ((pVol->BPB_RootEntCnt*32)+(pVol->BPB_BytsPerSec-1))/pVol->BPB_BytsPerSec;
    
    // read FAT table into memory
    pVol->nBytesPerCluster = pVol->BPB_BytsPerSec * pVol->BPB_SecPerCluster;
200837d0:	87000d15 	stw	fp,52(r16)
        FAT_DEBUG(("Cannot find SD card.\n"));
        return hFat;
    }    
    
    //hFat = malloc(sizeof(VOLUME_INFO));
    hFat = &vInfo;
200837d4:	108b2504 	addi	r2,r2,11412
200837d8:	003fa406 	br	2008366c <__flash_rwdata_start+0xfffe7024>
    alt_u8 *pMSB = (pValue + nNum - 1);
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
        nValue <<= 8;
        nValue |= *pMSB--;
200837dc:	8d4009c3 	ldbu	r21,39(r17)
200837e0:	89000983 	ldbu	r4,38(r17)
200837e4:	88c00943 	ldbu	r3,37(r17)
unsigned int fatArray2Value(unsigned char *pValue, unsigned int nNum){
    alt_u8 *pMSB = (pValue + nNum - 1);
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
        nValue <<= 8;
200837e8:	a82a923a 	slli	r21,r21,8
        nValue |= *pMSB--;
200837ec:	88800903 	ldbu	r2,36(r17)
200837f0:	a92ab03a 	or	r21,r21,r4
unsigned int fatArray2Value(unsigned char *pValue, unsigned int nNum){
    alt_u8 *pMSB = (pValue + nNum - 1);
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
        nValue <<= 8;
200837f4:	a82a923a 	slli	r21,r21,8
        nValue |= *pMSB--;
200837f8:	a8eab03a 	or	r21,r21,r3
unsigned int fatArray2Value(unsigned char *pValue, unsigned int nNum){
    alt_u8 *pMSB = (pValue + nNum - 1);
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
        nValue <<= 8;
200837fc:	a82a923a 	slli	r21,r21,8
        nValue |= *pMSB--;
20083800:	a8aab03a 	or	r21,r21,r2
    // add for v2.0
    pVol->Secter_Index = -1;
    memset(pVol->Secter_Data, 0, MY_SECTER_SIZE); // 512 bytes
    
    if (pVol->Partition_Type == PARTITION_FAT32){
        pVol->BPB_FATSz = fatArray2Value(&szBlock[0x24], 4);  // BPB_FATSz32
20083804:	95400c15 	stw	r21,48(r18)
20083808:	003fe106 	br	20083790 <__flash_rwdata_start+0xfffe7148>

2008380c <debug_output>:
#include "debug.h"


void debug_output(char *pMessage){
    
    printf(pMessage);
2008380c:	008a4681 	jmpi	2008a468 <printf>

20083810 <myprintf>:
}

int myprintf(char *format, ...){
20083810:	deff7b04 	addi	sp,sp,-532
20083814:	dfc08115 	stw	ra,516(sp)
20083818:	dc008015 	stw	r16,512(sp)
2008381c:	d9408215 	stw	r5,520(sp)
20083820:	d9808315 	stw	r6,524(sp)
20083824:	d9c08415 	stw	r7,528(sp)
    int rc;
    char szText[512];
    
    va_list paramList;
    va_start(paramList, format);
    rc = vsnprintf(szText, 512, format, paramList);
20083828:	01408004 	movi	r5,512
2008382c:	200d883a 	mov	r6,r4
20083830:	d9c08204 	addi	r7,sp,520
20083834:	d809883a 	mov	r4,sp
20083838:	008e8ec0 	call	2008e8ec <vsnprintf>
#include "debug.h"


void debug_output(char *pMessage){
    
    printf(pMessage);
2008383c:	d809883a 	mov	r4,sp
    int rc;
    char szText[512];
    
    va_list paramList;
    va_start(paramList, format);
    rc = vsnprintf(szText, 512, format, paramList);
20083840:	1021883a 	mov	r16,r2
#include "debug.h"


void debug_output(char *pMessage){
    
    printf(pMessage);
20083844:	008a4680 	call	2008a468 <printf>
    va_end(paramList);
    
    debug_output(szText);

    return rc;    
}
20083848:	8005883a 	mov	r2,r16
2008384c:	dfc08117 	ldw	ra,516(sp)
20083850:	dc008017 	ldw	r16,512(sp)
20083854:	dec08504 	addi	sp,sp,532
20083858:	f800283a 	ret

2008385c <myprintf_hexarray>:


int myprintf_hexarray(unsigned char *pHex, int len){
2008385c:	defff804 	addi	sp,sp,-32
20083860:	dc800615 	stw	r18,24(sp)
20083864:	dfc00715 	stw	ra,28(sp)
20083868:	dc400515 	stw	r17,20(sp)
2008386c:	dc000415 	stw	r16,16(sp)
20083870:	2825883a 	mov	r18,r5
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
20083874:	01400b0e 	bge	zero,r5,200838a4 <myprintf_hexarray+0x48>
20083878:	2021883a 	mov	r16,r4
2008387c:	2163883a 	add	r17,r4,r5
        sprintf(szText, "[%02X]", *(pHex+i));
20083880:	81800003 	ldbu	r6,0(r16)
20083884:	01400034 	movhi	r5,0
20083888:	d809883a 	mov	r4,sp
2008388c:	29409504 	addi	r5,r5,596
20083890:	008a62c0 	call	2008a62c <sprintf>
20083894:	84000044 	addi	r16,r16,1
        DEBUG((szText));
20083898:	d809883a 	mov	r4,sp
2008389c:	00838100 	call	20083810 <myprintf>


int myprintf_hexarray(unsigned char *pHex, int len){
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
200838a0:	847ff71e 	bne	r16,r17,20083880 <__flash_rwdata_start+0xfffe7238>
        sprintf(szText, "[%02X]", *(pHex+i));
        DEBUG((szText));
    }
    return len;
}
200838a4:	9005883a 	mov	r2,r18
200838a8:	dfc00717 	ldw	ra,28(sp)
200838ac:	dc800617 	ldw	r18,24(sp)
200838b0:	dc400517 	ldw	r17,20(sp)
200838b4:	dc000417 	ldw	r16,16(sp)
200838b8:	dec00804 	addi	sp,sp,32
200838bc:	f800283a 	ret

200838c0 <myprintf_dwordarray>:

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
200838c0:	defff804 	addi	sp,sp,-32
200838c4:	dc800615 	stw	r18,24(sp)
200838c8:	dfc00715 	stw	ra,28(sp)
200838cc:	dc400515 	stw	r17,20(sp)
200838d0:	dc000415 	stw	r16,16(sp)
200838d4:	2825883a 	mov	r18,r5
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
200838d8:	01400c0e 	bge	zero,r5,2008390c <myprintf_dwordarray+0x4c>
200838dc:	2021883a 	mov	r16,r4
200838e0:	0023883a 	mov	r17,zero
        sprintf(szText, "[%08X]", *(pArray+i));
200838e4:	81800017 	ldw	r6,0(r16)
200838e8:	01400034 	movhi	r5,0
200838ec:	29409704 	addi	r5,r5,604
200838f0:	d809883a 	mov	r4,sp
200838f4:	008a62c0 	call	2008a62c <sprintf>
        DEBUG((szText));
200838f8:	d809883a 	mov	r4,sp
}

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
200838fc:	8c400044 	addi	r17,r17,1
        sprintf(szText, "[%08X]", *(pArray+i));
        DEBUG((szText));
20083900:	00838100 	call	20083810 <myprintf>
20083904:	84000104 	addi	r16,r16,4
}

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
20083908:	8cbff61e 	bne	r17,r18,200838e4 <__flash_rwdata_start+0xfffe729c>
        sprintf(szText, "[%08X]", *(pArray+i));
        DEBUG((szText));
    }
    return nElementCount;
}
2008390c:	9005883a 	mov	r2,r18
20083910:	dfc00717 	ldw	ra,28(sp)
20083914:	dc800617 	ldw	r18,24(sp)
20083918:	dc400517 	ldw	r17,20(sp)
2008391c:	dc000417 	ldw	r16,16(sp)
20083920:	dec00804 	addi	sp,sp,32
20083924:	f800283a 	ret

20083928 <mmc_send_status.constprop.4>:
	struct mmc_cmd cmd;
	int err, retries = 5;

	cmd.cmdidx = MMC_CMD_SEND_STATUS;
	cmd.resp_type = MMC_RSP_R1;
	cmd.cmdarg = mmc->rca << 16;
20083928:	20801e0b 	ldhu	r2,120(r4)
	mmc->rca = 0;

	return 0;
}

static int mmc_send_status(struct mmc *mmc, int timeout) {
2008392c:	defff004 	addi	sp,sp,-64
	struct mmc_cmd cmd;
	int err, retries = 5;

	cmd.cmdidx = MMC_CMD_SEND_STATUS;
20083930:	00c00344 	movi	r3,13
	cmd.resp_type = MMC_RSP_R1;
	cmd.cmdarg = mmc->rca << 16;
20083934:	1004943a 	slli	r2,r2,16
	mmc->rca = 0;

	return 0;
}

static int mmc_send_status(struct mmc *mmc, int timeout) {
20083938:	dd800e15 	stw	r22,56(sp)
	struct mmc_cmd cmd;
	int err, retries = 5;

	cmd.cmdidx = MMC_CMD_SEND_STATUS;
2008393c:	d8c0000d 	sth	r3,0(sp)
		if (!err) {
			if ((cmd.response[0] & MMC_STATUS_RDY_FOR_DATA)
					&& (cmd.response[0] & MMC_STATUS_CURR_STATE) !=
					MMC_STATE_PRG)
				break;
			else if (cmd.response[0] & MMC_STATUS_MASK) {
20083940:	05bf7e74 	movhi	r22,65017
static int mmc_send_status(struct mmc *mmc, int timeout) {
	struct mmc_cmd cmd;
	int err, retries = 5;

	cmd.cmdidx = MMC_CMD_SEND_STATUS;
	cmd.resp_type = MMC_RSP_R1;
20083944:	00c00544 	movi	r3,21
	mmc->rca = 0;

	return 0;
}

static int mmc_send_status(struct mmc *mmc, int timeout) {
20083948:	dd400d15 	stw	r21,52(sp)
2008394c:	dd000c15 	stw	r20,48(sp)
20083950:	dcc00b15 	stw	r19,44(sp)
20083954:	dc800a15 	stw	r18,40(sp)
20083958:	dc400915 	stw	r17,36(sp)
2008395c:	dc000815 	stw	r16,32(sp)
20083960:	dfc00f15 	stw	ra,60(sp)
20083964:	2027883a 	mov	r19,r4
		if (!err) {
			if ((cmd.response[0] & MMC_STATUS_RDY_FOR_DATA)
					&& (cmd.response[0] & MMC_STATUS_CURR_STATE) !=
					MMC_STATE_PRG)
				break;
			else if (cmd.response[0] & MMC_STATUS_MASK) {
20083968:	b5902004 	addi	r22,r22,16512
static int mmc_send_status(struct mmc *mmc, int timeout) {
	struct mmc_cmd cmd;
	int err, retries = 5;

	cmd.cmdidx = MMC_CMD_SEND_STATUS;
	cmd.resp_type = MMC_RSP_R1;
2008396c:	d8c00115 	stw	r3,4(sp)
	cmd.cmdarg = mmc->rca << 16;
20083970:	d8800215 	stw	r2,8(sp)
	return 0;
}

static int mmc_send_status(struct mmc *mmc, int timeout) {
	struct mmc_cmd cmd;
	int err, retries = 5;
20083974:	04800144 	movi	r18,5

	cmd.cmdidx = MMC_CMD_SEND_STATUS;
	cmd.resp_type = MMC_RSP_R1;
	cmd.cmdarg = mmc->rca << 16;
20083978:	0440fa04 	movi	r17,1000

	do {
		err = mmc_send_cmd(mmc, &cmd, NULL);
		if (!err) {
			if ((cmd.response[0] & MMC_STATUS_RDY_FOR_DATA)
					&& (cmd.response[0] & MMC_STATUS_CURR_STATE) !=
2008397c:	05438004 	movi	r21,3584
#define MMC_PRINT(x)
#endif

void udelay(int t) {
#define US_DELAY 100
	volatile int us = US_DELAY;
20083980:	04001904 	movi	r16,100
		} else if (--retries < 0)
			return err;

		udelay(1000);

	} while (timeout--);
20083984:	053fffc4 	movi	r20,-1

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20083988:	98802417 	ldw	r2,144(r19)
2008398c:	9809883a 	mov	r4,r19
20083990:	d80b883a 	mov	r5,sp
20083994:	000d883a 	mov	r6,zero
20083998:	103ee83a 	callr	r2
	cmd.resp_type = MMC_RSP_R1;
	cmd.cmdarg = mmc->rca << 16;

	do {
		err = mmc_send_cmd(mmc, &cmd, NULL);
		if (!err) {
2008399c:	1000171e 	bne	r2,zero,200839fc <mmc_send_status.constprop.4+0xd4>
			if ((cmd.response[0] & MMC_STATUS_RDY_FOR_DATA)
200839a0:	d9400317 	ldw	r5,12(sp)
200839a4:	2880400c 	andi	r2,r5,256
200839a8:	10000226 	beq	r2,zero,200839b4 <mmc_send_status.constprop.4+0x8c>
					&& (cmd.response[0] & MMC_STATUS_CURR_STATE) !=
200839ac:	2887800c 	andi	r2,r5,7680
200839b0:	1540231e 	bne	r2,r21,20083a40 <mmc_send_status.constprop.4+0x118>
					MMC_STATE_PRG)
				break;
			else if (cmd.response[0] & MMC_STATUS_MASK) {
200839b4:	2d84703a 	and	r2,r5,r22
200839b8:	1000131e 	bne	r2,zero,20083a08 <mmc_send_status.constprop.4+0xe0>
#define MMC_PRINT(x)
#endif

void udelay(int t) {
#define US_DELAY 100
	volatile int us = US_DELAY;
200839bc:	dc000715 	stw	r16,28(sp)
200839c0:	0140fa04 	movi	r5,1000
	while (t--) {
		us = US_DELAY;
200839c4:	dc000715 	stw	r16,28(sp)
		while (us--)
200839c8:	d8800717 	ldw	r2,28(sp)
200839cc:	10ffffc4 	addi	r3,r2,-1
200839d0:	d8c00715 	stw	r3,28(sp)
200839d4:	103ffc1e 	bne	r2,zero,200839c8 <__flash_rwdata_start+0xfffe7380>
200839d8:	297fffc4 	addi	r5,r5,-1
#endif

void udelay(int t) {
#define US_DELAY 100
	volatile int us = US_DELAY;
	while (t--) {
200839dc:	283ff91e 	bne	r5,zero,200839c4 <__flash_rwdata_start+0xfffe737c>
		} else if (--retries < 0)
			return err;

		udelay(1000);

	} while (timeout--);
200839e0:	8c7fffc4 	addi	r17,r17,-1
200839e4:	8d3fe81e 	bne	r17,r20,20083988 <__flash_rwdata_start+0xfffe7340>

	if (timeout <= 0) {
		printf("Timeout waiting card ready\n\r");
200839e8:	01000034 	movhi	r4,0
200839ec:	21009f04 	addi	r4,r4,636
200839f0:	008a4680 	call	2008a468 <printf>
		return TIMEOUT;
200839f4:	00bffb44 	movi	r2,-19
200839f8:	00000706 	br	20083a18 <mmc_send_status.constprop.4+0xf0>
				break;
			else if (cmd.response[0] & MMC_STATUS_MASK) {
				printf("Status Error: 0x%08X\n\r", cmd.response[0]);
				return COMM_ERR;
			}
		} else if (--retries < 0)
200839fc:	94bfffc4 	addi	r18,r18,-1
20083a00:	903fee0e 	bge	r18,zero,200839bc <__flash_rwdata_start+0xfffe7374>
20083a04:	00000406 	br	20083a18 <mmc_send_status.constprop.4+0xf0>
			if ((cmd.response[0] & MMC_STATUS_RDY_FOR_DATA)
					&& (cmd.response[0] & MMC_STATUS_CURR_STATE) !=
					MMC_STATE_PRG)
				break;
			else if (cmd.response[0] & MMC_STATUS_MASK) {
				printf("Status Error: 0x%08X\n\r", cmd.response[0]);
20083a08:	01000034 	movhi	r4,0
20083a0c:	21009904 	addi	r4,r4,612
20083a10:	008a4680 	call	2008a468 <printf>
				return COMM_ERR;
20083a14:	00bffb84 	movi	r2,-18
		printf("Timeout waiting card ready\n\r");
		return TIMEOUT;
	}

	return 0;
}
20083a18:	dfc00f17 	ldw	ra,60(sp)
20083a1c:	dd800e17 	ldw	r22,56(sp)
20083a20:	dd400d17 	ldw	r21,52(sp)
20083a24:	dd000c17 	ldw	r20,48(sp)
20083a28:	dcc00b17 	ldw	r19,44(sp)
20083a2c:	dc800a17 	ldw	r18,40(sp)
20083a30:	dc400917 	ldw	r17,36(sp)
20083a34:	dc000817 	ldw	r16,32(sp)
20083a38:	dec01004 	addi	sp,sp,64
20083a3c:	f800283a 	ret

		udelay(1000);

	} while (timeout--);

	if (timeout <= 0) {
20083a40:	883fe926 	beq	r17,zero,200839e8 <__flash_rwdata_start+0xfffe73a0>
		printf("Timeout waiting card ready\n\r");
		return TIMEOUT;
	}

	return 0;
20083a44:	0005883a 	mov	r2,zero
20083a48:	003ff306 	br	20083a18 <__flash_rwdata_start+0xfffe73d0>

20083a4c <mmc_startup>:
		mmc->card_caps |= MMC_MODE_HS;

	return 0;
}

static int mmc_startup(struct mmc *mmc) {
20083a4c:	defedf04 	addi	sp,sp,-1156
	char ext_csd[512];
	char test_csd[512];
	int timeout = 1000;

	/* Put the Card in Identify Mode */
	cmd.cmdidx = MMC_CMD_ALL_SEND_CID; /* cmd not supported in spi */
20083a50:	00c00084 	movi	r3,2

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20083a54:	20802417 	ldw	r2,144(r4)
	char ext_csd[512];
	char test_csd[512];
	int timeout = 1000;

	/* Put the Card in Identify Mode */
	cmd.cmdidx = MMC_CMD_ALL_SEND_CID; /* cmd not supported in spi */
20083a58:	d8c1070d 	sth	r3,1052(sp)
	cmd.resp_type = MMC_RSP_R2;
20083a5c:	00c001c4 	movi	r3,7
		mmc->card_caps |= MMC_MODE_HS;

	return 0;
}

static int mmc_startup(struct mmc *mmc) {
20083a60:	dc011715 	stw	r16,1116(sp)
20083a64:	dfc12015 	stw	ra,1152(sp)
20083a68:	df011f15 	stw	fp,1148(sp)
20083a6c:	ddc11e15 	stw	r23,1144(sp)
20083a70:	dd811d15 	stw	r22,1140(sp)
20083a74:	dd411c15 	stw	r21,1136(sp)
20083a78:	dd011b15 	stw	r20,1132(sp)
20083a7c:	dcc11a15 	stw	r19,1128(sp)
20083a80:	dc811915 	stw	r18,1124(sp)
20083a84:	dc411815 	stw	r17,1120(sp)
	char test_csd[512];
	int timeout = 1000;

	/* Put the Card in Identify Mode */
	cmd.cmdidx = MMC_CMD_ALL_SEND_CID; /* cmd not supported in spi */
	cmd.resp_type = MMC_RSP_R2;
20083a88:	d8c10815 	stw	r3,1056(sp)
	cmd.cmdarg = 0;
20083a8c:	d8010915 	stw	zero,1060(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20083a90:	d9410704 	addi	r5,sp,1052
20083a94:	000d883a 	mov	r6,zero
		mmc->card_caps |= MMC_MODE_HS;

	return 0;
}

static int mmc_startup(struct mmc *mmc) {
20083a98:	2021883a 	mov	r16,r4

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20083a9c:	103ee83a 	callr	r2
	cmd.resp_type = MMC_RSP_R2;
	cmd.cmdarg = 0;

	err = mmc_send_cmd(mmc, &cmd, NULL);

	if (err)
20083aa0:	10000c26 	beq	r2,zero,20083ad4 <mmc_startup+0x88>
	}

	mmc_set_clock(mmc, mmc->tran_speed);

	return 0;
}
20083aa4:	dfc12017 	ldw	ra,1152(sp)
20083aa8:	df011f17 	ldw	fp,1148(sp)
20083aac:	ddc11e17 	ldw	r23,1144(sp)
20083ab0:	dd811d17 	ldw	r22,1140(sp)
20083ab4:	dd411c17 	ldw	r21,1136(sp)
20083ab8:	dd011b17 	ldw	r20,1132(sp)
20083abc:	dcc11a17 	ldw	r19,1128(sp)
20083ac0:	dc811917 	ldw	r18,1124(sp)
20083ac4:	dc411817 	ldw	r17,1120(sp)
20083ac8:	dc011717 	ldw	r16,1116(sp)
20083acc:	dec12104 	addi	sp,sp,1156
20083ad0:	f800283a 	ret
	err = mmc_send_cmd(mmc, &cmd, NULL);

	if (err)
		return err;

	memcpy(mmc->cid, cmd.response, 16);
20083ad4:	81001a04 	addi	r4,r16,104
20083ad8:	d9410a04 	addi	r5,sp,1064
20083adc:	01800404 	movi	r6,16
20083ae0:	008a1e00 	call	2008a1e0 <memcpy>
	 * For MMC cards, set the Relative Address.
	 * For SD cards, get the Relatvie Address.
	 * This also puts the cards into Standby State
	 */
	cmd.cmdidx = SD_CMD_SEND_RELATIVE_ADDR;
	cmd.cmdarg = mmc->rca << 16;
20083ae4:	80801e0b 	ldhu	r2,120(r16)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20083ae8:	80c02417 	ldw	r3,144(r16)
	/*
	 * For MMC cards, set the Relative Address.
	 * For SD cards, get the Relatvie Address.
	 * This also puts the cards into Standby State
	 */
	cmd.cmdidx = SD_CMD_SEND_RELATIVE_ADDR;
20083aec:	010000c4 	movi	r4,3
	cmd.cmdarg = mmc->rca << 16;
20083af0:	1004943a 	slli	r2,r2,16
	/*
	 * For MMC cards, set the Relative Address.
	 * For SD cards, get the Relatvie Address.
	 * This also puts the cards into Standby State
	 */
	cmd.cmdidx = SD_CMD_SEND_RELATIVE_ADDR;
20083af4:	d901070d 	sth	r4,1052(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20083af8:	d9410704 	addi	r5,sp,1052
	 * For MMC cards, set the Relative Address.
	 * For SD cards, get the Relatvie Address.
	 * This also puts the cards into Standby State
	 */
	cmd.cmdidx = SD_CMD_SEND_RELATIVE_ADDR;
	cmd.cmdarg = mmc->rca << 16;
20083afc:	d8810915 	stw	r2,1060(sp)
	cmd.resp_type = MMC_RSP_R6;
20083b00:	00800544 	movi	r2,21
20083b04:	d8810815 	stw	r2,1056(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20083b08:	8009883a 	mov	r4,r16
20083b0c:	000d883a 	mov	r6,zero
20083b10:	183ee83a 	callr	r3
	cmd.cmdarg = mmc->rca << 16;
	cmd.resp_type = MMC_RSP_R6;

	err = mmc_send_cmd(mmc, &cmd, NULL);

	if (err)
20083b14:	103fe31e 	bne	r2,zero,20083aa4 <__flash_rwdata_start+0xfffe745c>
		return err;

	if (IS_SD(mmc))
20083b18:	80800a17 	ldw	r2,40(r16)
20083b1c:	108000ac 	andhi	r2,r2,2
20083b20:	1000751e 	bne	r2,zero,20083cf8 <mmc_startup+0x2ac>
20083b24:	80801e0b 	ldhu	r2,120(r16)
		mmc->rca = (cmd.response[0] >> 16) & 0xffff;

	/* Get the Card-Specific Data */
	cmd.cmdidx = MMC_CMD_SEND_CSD;
	cmd.resp_type = MMC_RSP_R2;
	cmd.cmdarg = mmc->rca << 16;
20083b28:	1004943a 	slli	r2,r2,16

	if (IS_SD(mmc))
		mmc->rca = (cmd.response[0] >> 16) & 0xffff;

	/* Get the Card-Specific Data */
	cmd.cmdidx = MMC_CMD_SEND_CSD;
20083b2c:	01000244 	movi	r4,9

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20083b30:	80c02417 	ldw	r3,144(r16)

	if (IS_SD(mmc))
		mmc->rca = (cmd.response[0] >> 16) & 0xffff;

	/* Get the Card-Specific Data */
	cmd.cmdidx = MMC_CMD_SEND_CSD;
20083b34:	d901070d 	sth	r4,1052(sp)
	cmd.resp_type = MMC_RSP_R2;
20083b38:	010001c4 	movi	r4,7
20083b3c:	d9010815 	stw	r4,1056(sp)
	cmd.cmdarg = mmc->rca << 16;
20083b40:	d8810915 	stw	r2,1060(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20083b44:	8009883a 	mov	r4,r16
20083b48:	d9410704 	addi	r5,sp,1052
20083b4c:	000d883a 	mov	r6,zero
20083b50:	183ee83a 	callr	r3
20083b54:	1023883a 	mov	r17,r2
	cmd.cmdarg = mmc->rca << 16;

	err = mmc_send_cmd(mmc, &cmd, NULL);

	/* Waiting for the ready status */
	mmc_send_status(mmc, timeout);
20083b58:	8009883a 	mov	r4,r16
20083b5c:	00839280 	call	20083928 <mmc_send_status.constprop.4>

	if (err)
20083b60:	8800691e 	bne	r17,zero,20083d08 <mmc_startup+0x2bc>
		return err;

	mmc->csd[0] = cmd.response[0];
20083b64:	d8810a17 	ldw	r2,1064(sp)
	mmc->csd[1] = cmd.response[1];
20083b68:	d9810b17 	ldw	r6,1068(sp)
	mmc->csd[2] = cmd.response[2];
20083b6c:	d8c10c17 	ldw	r3,1072(sp)
	mmc->csd[3] = cmd.response[3];
20083b70:	d9c10d17 	ldw	r7,1076(sp)

	if (mmc->version == MMC_VERSION_UNKNOWN) {
20083b74:	81000a17 	ldw	r4,40(r16)
	mmc_send_status(mmc, timeout);

	if (err)
		return err;

	mmc->csd[0] = cmd.response[0];
20083b78:	80801615 	stw	r2,88(r16)
	mmc->csd[1] = cmd.response[1];
20083b7c:	81801715 	stw	r6,92(r16)
	mmc->csd[2] = cmd.response[2];
20083b80:	80c01815 	stw	r3,96(r16)
	mmc->csd[3] = cmd.response[3];
20083b84:	81c01915 	stw	r7,100(r16)

	if (mmc->version == MMC_VERSION_UNKNOWN) {
20083b88:	01400074 	movhi	r5,1
20083b8c:	21409526 	beq	r4,r5,20083de4 <mmc_startup+0x398>
20083b90:	220000ac 	andhi	r8,r4,2
		}
	}

	/* divide frequency by 10, since the mults are 10x bigger */
	freq = fbase[(cmd.response[0] & 0x7)];
	mult = multipliers[((cmd.response[0] >> 3) & 0xf)];
20083b94:	1008d07a 	srli	r4,r2,1
20083b98:	01400034 	movhi	r5,0
20083b9c:	2940fb04 	addi	r5,r5,1004
			break;
		}
	}

	/* divide frequency by 10, since the mults are 10x bigger */
	freq = fbase[(cmd.response[0] & 0x7)];
20083ba0:	108001cc 	andi	r2,r2,7
	mult = multipliers[((cmd.response[0] >> 3) & 0xf)];
20083ba4:	21000f0c 	andi	r4,r4,60
20083ba8:	2909883a 	add	r4,r5,r4
			break;
		}
	}

	/* divide frequency by 10, since the mults are 10x bigger */
	freq = fbase[(cmd.response[0] & 0x7)];
20083bac:	1085883a 	add	r2,r2,r2
20083bb0:	01400034 	movhi	r5,0
20083bb4:	29410b04 	addi	r5,r5,1068
20083bb8:	1085883a 	add	r2,r2,r2
20083bbc:	2885883a 	add	r2,r5,r2
	mult = multipliers[((cmd.response[0] >> 3) & 0xf)];

	mmc->tran_speed = freq * mult;

	mmc->read_bl_len = 1 << ((cmd.response[1] >> 16) & 0xf);
20083bc0:	300ad43a 	srli	r5,r6,16

	/* divide frequency by 10, since the mults are 10x bigger */
	freq = fbase[(cmd.response[0] & 0x7)];
	mult = multipliers[((cmd.response[0] >> 3) & 0xf)];

	mmc->tran_speed = freq * mult;
20083bc4:	22400017 	ldw	r9,0(r4)
20083bc8:	11000017 	ldw	r4,0(r2)

	mmc->read_bl_len = 1 << ((cmd.response[1] >> 16) & 0xf);
20083bcc:	294003cc 	andi	r5,r5,15
20083bd0:	00800044 	movi	r2,1

	/* divide frequency by 10, since the mults are 10x bigger */
	freq = fbase[(cmd.response[0] & 0x7)];
	mult = multipliers[((cmd.response[0] >> 3) & 0xf)];

	mmc->tran_speed = freq * mult;
20083bd4:	4909383a 	mul	r4,r9,r4

	mmc->read_bl_len = 1 << ((cmd.response[1] >> 16) & 0xf);
20083bd8:	114a983a 	sll	r5,r2,r5

	/* divide frequency by 10, since the mults are 10x bigger */
	freq = fbase[(cmd.response[0] & 0x7)];
	mult = multipliers[((cmd.response[0] >> 3) & 0xf)];

	mmc->tran_speed = freq * mult;
20083bdc:	81001f15 	stw	r4,124(r16)

	mmc->read_bl_len = 1 << ((cmd.response[1] >> 16) & 0xf);
20083be0:	81402015 	stw	r5,128(r16)

	if (IS_SD(mmc))
20083be4:	40005326 	beq	r8,zero,20083d34 <mmc_startup+0x2e8>
		mmc->write_bl_len = mmc->read_bl_len;
20083be8:	81402115 	stw	r5,132(r16)
20083bec:	280f883a 	mov	r7,r5
	else
		mmc->write_bl_len = 1 << ((cmd.response[3] >> 22) & 0xf);

	if (mmc->high_capacity) {
20083bf0:	80800e17 	ldw	r2,56(r16)
20083bf4:	10004626 	beq	r2,zero,20083d10 <mmc_startup+0x2c4>
		csize = (mmc->csd[1] & 0x3f) << 16 | (mmc->csd[2] & 0xffff0000) >> 16;
20083bf8:	31800fcc 	andi	r6,r6,63
20083bfc:	300c943a 	slli	r6,r6,16
20083c00:	1806d43a 	srli	r3,r3,16
20083c04:	00800284 	movi	r2,10
20083c08:	30c6b03a 	or	r3,r6,r3
	} else {
		csize = (mmc->csd[1] & 0x3ff) << 2 | (mmc->csd[2] & 0xc0000000) >> 30;
		cmult = (mmc->csd[2] & 0x00038000) >> 15;
	}

	mmc->capacity = (csize + 1) << (cmult + 2);
20083c0c:	18c00044 	addi	r3,r3,1
20083c10:	1884983a 	sll	r2,r3,r2
	mmc->capacity *= mmc->read_bl_len;

	if (mmc->read_bl_len > 512)
20083c14:	00c08004 	movi	r3,512
		csize = (mmc->csd[1] & 0x3ff) << 2 | (mmc->csd[2] & 0xc0000000) >> 30;
		cmult = (mmc->csd[2] & 0x00038000) >> 15;
	}

	mmc->capacity = (csize + 1) << (cmult + 2);
	mmc->capacity *= mmc->read_bl_len;
20083c18:	1145383a 	mul	r2,r2,r5
20083c1c:	80802315 	stw	r2,140(r16)

	if (mmc->read_bl_len > 512)
20083c20:	1940010e 	bge	r3,r5,20083c28 <mmc_startup+0x1dc>
		mmc->read_bl_len = 512;
20083c24:	80c02015 	stw	r3,128(r16)

	if (mmc->write_bl_len > 512)
20083c28:	00808004 	movi	r2,512
20083c2c:	11c0012e 	bgeu	r2,r7,20083c34 <mmc_startup+0x1e8>
		mmc->write_bl_len = 512;
20083c30:	80802115 	stw	r2,132(r16)

	/* Select the card, and put it into Transfer Mode */
	cmd.cmdidx = MMC_CMD_SELECT_CARD;
	cmd.resp_type = MMC_RSP_R1;
	cmd.cmdarg = mmc->rca << 16;
20083c34:	80801e0b 	ldhu	r2,120(r16)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20083c38:	80c02417 	ldw	r3,144(r16)

	if (mmc->write_bl_len > 512)
		mmc->write_bl_len = 512;

	/* Select the card, and put it into Transfer Mode */
	cmd.cmdidx = MMC_CMD_SELECT_CARD;
20083c3c:	010001c4 	movi	r4,7
	cmd.resp_type = MMC_RSP_R1;
	cmd.cmdarg = mmc->rca << 16;
20083c40:	1004943a 	slli	r2,r2,16
	if (mmc->write_bl_len > 512)
		mmc->write_bl_len = 512;

	/* Select the card, and put it into Transfer Mode */
	cmd.cmdidx = MMC_CMD_SELECT_CARD;
	cmd.resp_type = MMC_RSP_R1;
20083c44:	04400544 	movi	r17,21

	if (mmc->write_bl_len > 512)
		mmc->write_bl_len = 512;

	/* Select the card, and put it into Transfer Mode */
	cmd.cmdidx = MMC_CMD_SELECT_CARD;
20083c48:	d901070d 	sth	r4,1052(sp)
	cmd.resp_type = MMC_RSP_R1;
20083c4c:	dc410815 	stw	r17,1056(sp)
	cmd.cmdarg = mmc->rca << 16;
20083c50:	d8810915 	stw	r2,1060(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20083c54:	8009883a 	mov	r4,r16
20083c58:	d9410704 	addi	r5,sp,1052
20083c5c:	000d883a 	mov	r6,zero
20083c60:	183ee83a 	callr	r3
	cmd.cmdidx = MMC_CMD_SELECT_CARD;
	cmd.resp_type = MMC_RSP_R1;
	cmd.cmdarg = mmc->rca << 16;
	err = mmc_send_cmd(mmc, &cmd, NULL);

	if (err)
20083c64:	103f8f1e 	bne	r2,zero,20083aa4 <__flash_rwdata_start+0xfffe745c>
	/*
	 * For SD, its erase group is always one sector
	 */
	mmc->erase_grp_size = 1;
	mmc->part_config = MMCPART_NOAVAILABLE;
	if (!IS_SD(mmc) && (mmc->version >= MMC_VERSION_4)) {
20083c68:	80800a17 	ldw	r2,40(r16)

	/*
	 * For SD, its erase group is always one sector
	 */
	mmc->erase_grp_size = 1;
	mmc->part_config = MMCPART_NOAVAILABLE;
20083c6c:	013fffc4 	movi	r4,-1
		return err;

	/*
	 * For SD, its erase group is always one sector
	 */
	mmc->erase_grp_size = 1;
20083c70:	00c00044 	movi	r3,1
	mmc->part_config = MMCPART_NOAVAILABLE;
20083c74:	81001e85 	stb	r4,122(r16)
		return err;

	/*
	 * For SD, its erase group is always one sector
	 */
	mmc->erase_grp_size = 1;
20083c78:	80c02215 	stw	r3,136(r16)
	mmc->part_config = MMCPART_NOAVAILABLE;
	if (!IS_SD(mmc) && (mmc->version >= MMC_VERSION_4)) {
20083c7c:	110000ac 	andhi	r4,r2,2
20083c80:	2000311e 	bne	r4,zero,20083d48 <mmc_startup+0x2fc>
20083c84:	01000074 	movhi	r4,1
20083c88:	21000fc4 	addi	r4,r4,63
20083c8c:	2080c936 	bltu	r4,r2,20083fb4 <mmc_startup+0x568>
static int mmc_change_freq(struct mmc *mmc) {
	char ext_csd[512];
	char cardtype;
	int err;

	mmc->card_caps = 0;
20083c90:	80001115 	stw	zero,68(r16)
20083c94:	0007883a 	mov	r3,zero

	if (err)
		return err;

	/* Restrict card's capabilities by what the host can do */
	mmc->card_caps &= mmc->host_caps;
20083c98:	85c01217 	ldw	r23,72(r16)

	if (IS_SD(mmc)) {
20083c9c:	108000ac 	andhi	r2,r2,2

	if (err)
		return err;

	/* Restrict card's capabilities by what the host can do */
	mmc->card_caps &= mmc->host_caps;
20083ca0:	b8c6703a 	and	r3,r23,r3
20083ca4:	80c01115 	stw	r3,68(r16)

	if (IS_SD(mmc)) {
20083ca8:	10007226 	beq	r2,zero,20083e74 <mmc_startup+0x428>
		if (mmc->card_caps & MMC_MODE_4BIT) {
20083cac:	1880400c 	andi	r2,r3,256
20083cb0:	1001351e 	bne	r2,zero,20084188 <mmc_startup+0x73c>
				return err;

			mmc_set_bus_width(mmc, 4);
		}

		if (mmc->card_caps & MMC_MODE_HS)
20083cb4:	18c0004c 	andi	r3,r3,1
20083cb8:	18012926 	beq	r3,zero,20084160 <mmc_startup+0x714>
			mmc->tran_speed = 50000000;
20083cbc:	0080bef4 	movhi	r2,763
20083cc0:	10bc2004 	addi	r2,r2,-3968
20083cc4:	80801f15 	stw	r2,124(r16)

	mmc_set_ios(mmc);
}

static void mmc_set_clock(struct mmc *mmc, uint clock) {
	if (clock > mmc->f_max)
20083cc8:	80c00d17 	ldw	r3,52(r16)
20083ccc:	1880012e 	bgeu	r3,r2,20083cd4 <mmc_startup+0x288>
20083cd0:	1805883a 	mov	r2,r3
		clock = mmc->f_max;

	if (clock < mmc->f_min)
20083cd4:	80c00c17 	ldw	r3,48(r16)
20083cd8:	10c0012e 	bgeu	r2,r3,20083ce0 <mmc_startup+0x294>
20083cdc:	1805883a 	mov	r2,r3
 */
static const int multipliers[] = { 0, /* reserved */
10, 12, 13, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 70, 80, };

static void mmc_set_ios(struct mmc *mmc) {
	mmc->set_ios(mmc);
20083ce0:	80c02517 	ldw	r3,148(r16)
		clock = mmc->f_max;

	if (clock < mmc->f_min)
		clock = mmc->f_min;

	mmc->clock = clock;
20083ce4:	80801015 	stw	r2,64(r16)
 */
static const int multipliers[] = { 0, /* reserved */
10, 12, 13, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 70, 80, };

static void mmc_set_ios(struct mmc *mmc) {
	mmc->set_ios(mmc);
20083ce8:	8009883a 	mov	r4,r16
20083cec:	183ee83a 	callr	r3
		}
	}

	mmc_set_clock(mmc, mmc->tran_speed);

	return 0;
20083cf0:	0005883a 	mov	r2,zero
20083cf4:	003f6b06 	br	20083aa4 <__flash_rwdata_start+0xfffe745c>

	if (err)
		return err;

	if (IS_SD(mmc))
		mmc->rca = (cmd.response[0] >> 16) & 0xffff;
20083cf8:	d8c10a8b 	ldhu	r3,1066(sp)
20083cfc:	1805883a 	mov	r2,r3
20083d00:	80c01e0d 	sth	r3,120(r16)
20083d04:	003f8806 	br	20083b28 <__flash_rwdata_start+0xfffe74e0>
20083d08:	8805883a 	mov	r2,r17
20083d0c:	003f6506 	br	20083aa4 <__flash_rwdata_start+0xfffe745c>
	if (mmc->high_capacity) {
		csize = (mmc->csd[1] & 0x3f) << 16 | (mmc->csd[2] & 0xffff0000) >> 16;
		cmult = 8;
	} else {
		csize = (mmc->csd[1] & 0x3ff) << 2 | (mmc->csd[2] & 0xc0000000) >> 30;
		cmult = (mmc->csd[2] & 0x00038000) >> 15;
20083d10:	1804d3fa 	srli	r2,r3,15

	if (mmc->high_capacity) {
		csize = (mmc->csd[1] & 0x3f) << 16 | (mmc->csd[2] & 0xffff0000) >> 16;
		cmult = 8;
	} else {
		csize = (mmc->csd[1] & 0x3ff) << 2 | (mmc->csd[2] & 0xc0000000) >> 30;
20083d14:	1808d7ba 	srli	r4,r3,30
20083d18:	3180ffcc 	andi	r6,r6,1023
20083d1c:	3187883a 	add	r3,r6,r6
20083d20:	18c7883a 	add	r3,r3,r3
		cmult = (mmc->csd[2] & 0x00038000) >> 15;
20083d24:	108001cc 	andi	r2,r2,7

	if (mmc->high_capacity) {
		csize = (mmc->csd[1] & 0x3f) << 16 | (mmc->csd[2] & 0xffff0000) >> 16;
		cmult = 8;
	} else {
		csize = (mmc->csd[1] & 0x3ff) << 2 | (mmc->csd[2] & 0xc0000000) >> 30;
20083d28:	1906b03a 	or	r3,r3,r4
20083d2c:	10800084 	addi	r2,r2,2
20083d30:	003fb606 	br	20083c0c <__flash_rwdata_start+0xfffe75c4>
	mmc->read_bl_len = 1 << ((cmd.response[1] >> 16) & 0xf);

	if (IS_SD(mmc))
		mmc->write_bl_len = mmc->read_bl_len;
	else
		mmc->write_bl_len = 1 << ((cmd.response[3] >> 22) & 0xf);
20083d34:	380ed5ba 	srli	r7,r7,22
20083d38:	39c003cc 	andi	r7,r7,15
20083d3c:	11ce983a 	sll	r7,r2,r7
20083d40:	81c02115 	stw	r7,132(r16)
20083d44:	003faa06 	br	20083bf0 <__flash_rwdata_start+0xfffe75a8>
20083d48:	dc810004 	addi	r18,sp,1024
	mmc->card_caps = 0;

	/* Read the SCR to find out if this card supports higher speeds */
	cmd.cmdidx = MMC_CMD_APP_CMD;
	cmd.resp_type = MMC_RSP_R1;
	cmd.cmdarg = mmc->rca << 16;
20083d4c:	80801e0b 	ldhu	r2,120(r16)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20083d50:	80c02417 	ldw	r3,144(r16)

	//uint* scr = alt_uncached_malloc(8);
	mmc->card_caps = 0;

	/* Read the SCR to find out if this card supports higher speeds */
	cmd.cmdidx = MMC_CMD_APP_CMD;
20083d54:	01000dc4 	movi	r4,55
	cmd.resp_type = MMC_RSP_R1;
	cmd.cmdarg = mmc->rca << 16;
20083d58:	1004943a 	slli	r2,r2,16
	//uint* scr = alt_uncached_malloc(8);
	mmc->card_caps = 0;

	/* Read the SCR to find out if this card supports higher speeds */
	cmd.cmdidx = MMC_CMD_APP_CMD;
	cmd.resp_type = MMC_RSP_R1;
20083d5c:	04400544 	movi	r17,21

	//uint* scr = alt_uncached_malloc(8);
	mmc->card_caps = 0;

	/* Read the SCR to find out if this card supports higher speeds */
	cmd.cmdidx = MMC_CMD_APP_CMD;
20083d60:	d901000d 	sth	r4,1024(sp)
	static uint switch_status[16];
	struct mmc_data data;
	int timeout;

	//uint* scr = alt_uncached_malloc(8);
	mmc->card_caps = 0;
20083d64:	80001115 	stw	zero,68(r16)

	/* Read the SCR to find out if this card supports higher speeds */
	cmd.cmdidx = MMC_CMD_APP_CMD;
	cmd.resp_type = MMC_RSP_R1;
20083d68:	dc410115 	stw	r17,1028(sp)
	cmd.cmdarg = mmc->rca << 16;
20083d6c:	d8810215 	stw	r2,1032(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20083d70:	8009883a 	mov	r4,r16
20083d74:	900b883a 	mov	r5,r18
20083d78:	000d883a 	mov	r6,zero
20083d7c:	183ee83a 	callr	r3
	cmd.resp_type = MMC_RSP_R1;
	cmd.cmdarg = mmc->rca << 16;

	err = mmc_send_cmd(mmc, &cmd, NULL);

	if (err)
20083d80:	103f481e 	bne	r2,zero,20083aa4 <__flash_rwdata_start+0xfffe745c>
		return err;

	cmd.cmdidx = SD_CMD_APP_SEND_SCR;
20083d84:	00800cc4 	movi	r2,51
	cmd.resp_type = MMC_RSP_R1;
20083d88:	dc410115 	stw	r17,1028(sp)
	err = mmc_send_cmd(mmc, &cmd, NULL);

	if (err)
		return err;

	cmd.cmdidx = SD_CMD_APP_SEND_SCR;
20083d8c:	d881000d 	sth	r2,1024(sp)
	cmd.resp_type = MMC_RSP_R1;
	cmd.cmdarg = 0;
20083d90:	d8010215 	stw	zero,1032(sp)
20083d94:	04400104 	movi	r17,4
20083d98:	d5601604 	addi	r21,gp,-32680

	timeout = 3;

	retry_scr: data.dest = (char *) scr;
	data.blocksize = 8;
20083d9c:	05000204 	movi	r20,8
	data.blocks = 1;
20083da0:	04c00044 	movi	r19,1

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20083da4:	80802417 	ldw	r2,144(r16)
	cmd.resp_type = MMC_RSP_R1;
	cmd.cmdarg = 0;

	timeout = 3;

	retry_scr: data.dest = (char *) scr;
20083da8:	dd411215 	stw	r21,1096(sp)
	data.blocksize = 8;
20083dac:	dd011515 	stw	r20,1108(sp)
	data.blocks = 1;
20083db0:	dcc11415 	stw	r19,1104(sp)
	data.flags = MMC_DATA_READ;
20083db4:	dcc11315 	stw	r19,1100(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20083db8:	8009883a 	mov	r4,r16
20083dbc:	900b883a 	mov	r5,r18
20083dc0:	d9811204 	addi	r6,sp,1096
20083dc4:	103ee83a 	callr	r2
	data.blocks = 1;
	data.flags = MMC_DATA_READ;

	err = mmc_send_cmd(mmc, &cmd, &data);

	if (err) {
20083dc8:	10012026 	beq	r2,zero,2008424c <mmc_startup+0x800>
20083dcc:	8c7fffc4 	addi	r17,r17,-1
		if (timeout--)
20083dd0:	883ff41e 	bne	r17,zero,20083da4 <__flash_rwdata_start+0xfffe775c>
	if (IS_SD(mmc))
		err = sd_change_freq(mmc);
	else
		err = mmc_change_freq(mmc);

	if (err)
20083dd4:	103f331e 	bne	r2,zero,20083aa4 <__flash_rwdata_start+0xfffe745c>
20083dd8:	80800a17 	ldw	r2,40(r16)
20083ddc:	80c01117 	ldw	r3,68(r16)
20083de0:	003fad06 	br	20083c98 <__flash_rwdata_start+0xfffe7650>
	mmc->csd[1] = cmd.response[1];
	mmc->csd[2] = cmd.response[2];
	mmc->csd[3] = cmd.response[3];

	if (mmc->version == MMC_VERSION_UNKNOWN) {
		int version = (cmd.response[0] >> 26) & 0xf;
20083de4:	100ad6ba 	srli	r5,r2,26

		switch (version) {
20083de8:	02000104 	movi	r8,4
	mmc->csd[1] = cmd.response[1];
	mmc->csd[2] = cmd.response[2];
	mmc->csd[3] = cmd.response[3];

	if (mmc->version == MMC_VERSION_UNKNOWN) {
		int version = (cmd.response[0] >> 26) & 0xf;
20083dec:	294003cc 	andi	r5,r5,15

		switch (version) {
20083df0:	41410436 	bltu	r8,r5,20084204 <mmc_startup+0x7b8>
20083df4:	280a90ba 	slli	r5,r5,2
20083df8:	01080234 	movhi	r4,8200
20083dfc:	210f8404 	addi	r4,r4,15888
20083e00:	290b883a 	add	r5,r5,r4
20083e04:	29000017 	ldw	r4,0(r5)
		case 3:
			mmc->version = MMC_VERSION_3;
			break;
		case 4:
			mmc->version = MMC_VERSION_4;
			break;
20083e08:	0011883a 	mov	r8,zero
	mmc->csd[3] = cmd.response[3];

	if (mmc->version == MMC_VERSION_UNKNOWN) {
		int version = (cmd.response[0] >> 26) & 0xf;

		switch (version) {
20083e0c:	2000683a 	jmp	r4
20083e10:	20083e54 	ori	zero,r4,8441
20083e14:	20083e44 	addi	zero,r4,8441
20083e18:	20083e34 	orhi	zero,r4,8440
20083e1c:	20083e24 	muli	zero,r4,8440
20083e20:	20083e64 	muli	zero,r4,8441
			break;
		case 2:
			mmc->version = MMC_VERSION_2_2;
			break;
		case 3:
			mmc->version = MMC_VERSION_3;
20083e24:	01000074 	movhi	r4,1
20083e28:	21000c04 	addi	r4,r4,48
20083e2c:	81000a15 	stw	r4,40(r16)
			break;
20083e30:	003f5806 	br	20083b94 <__flash_rwdata_start+0xfffe754c>
			break;
		case 1:
			mmc->version = MMC_VERSION_1_4;
			break;
		case 2:
			mmc->version = MMC_VERSION_2_2;
20083e34:	01000074 	movhi	r4,1
20083e38:	21000884 	addi	r4,r4,34
20083e3c:	81000a15 	stw	r4,40(r16)
			break;
20083e40:	003f5406 	br	20083b94 <__flash_rwdata_start+0xfffe754c>
		switch (version) {
		case 0:
			mmc->version = MMC_VERSION_1_2;
			break;
		case 1:
			mmc->version = MMC_VERSION_1_4;
20083e44:	01000074 	movhi	r4,1
20083e48:	21000504 	addi	r4,r4,20
20083e4c:	81000a15 	stw	r4,40(r16)
			break;
20083e50:	003f5006 	br	20083b94 <__flash_rwdata_start+0xfffe754c>
	if (mmc->version == MMC_VERSION_UNKNOWN) {
		int version = (cmd.response[0] >> 26) & 0xf;

		switch (version) {
		case 0:
			mmc->version = MMC_VERSION_1_2;
20083e54:	01000074 	movhi	r4,1
20083e58:	21000484 	addi	r4,r4,18
20083e5c:	81000a15 	stw	r4,40(r16)
			break;
20083e60:	003f4c06 	br	20083b94 <__flash_rwdata_start+0xfffe754c>
			break;
		case 3:
			mmc->version = MMC_VERSION_3;
			break;
		case 4:
			mmc->version = MMC_VERSION_4;
20083e64:	01000074 	movhi	r4,1
20083e68:	21001004 	addi	r4,r4,64
20083e6c:	81000a15 	stw	r4,40(r16)
			break;
20083e70:	003f4806 	br	20083b94 <__flash_rwdata_start+0xfffe754c>
		if (mmc->card_caps & MMC_MODE_HS)
			mmc->tran_speed = 50000000;
		else
			mmc->tran_speed = 25000000;
	} else {
		width = ((mmc->host_caps & MMC_MODE_MASK_WIDTH_BITS) >>
20083e74:	bdc0c00c 	andi	r23,r23,768
20083e78:	b82ed23a 	srli	r23,r23,8
20083e7c:	dc810004 	addi	r18,sp,1024
static int mmc_switch(struct mmc *mmc, char set, char index, char value) {
	struct mmc_cmd cmd;
	int timeout = 1000;
	int ret;

	cmd.cmdidx = MMC_CMD_SWITCH;
20083e80:	05000184 	movi	r20,6
20083e84:	bde3883a 	add	r17,r23,r23
20083e88:	8c63883a 	add	r17,r17,r17
	cmd.resp_type = MMC_RSP_R1b;
20083e8c:	04c00744 	movi	r19,29
	struct mmc_cmd cmd;
	struct mmc_data data;
	int err;

	/* Get the Card Status Register */
	cmd.cmdidx = MMC_CMD_SEND_EXT_CSD;
20083e90:	05800204 	movi	r22,8
	cmd.resp_type = MMC_RSP_R1;
20083e94:	05400544 	movi	r21,21
20083e98:	00000406 	br	20083eac <mmc_startup+0x460>
		else
			mmc->tran_speed = 25000000;
	} else {
		width = ((mmc->host_caps & MMC_MODE_MASK_WIDTH_BITS) >>
		MMC_MODE_WIDTH_BITS_SHIFT);
		for (; width >= 0; width--) {
20083e9c:	bdffffc4 	addi	r23,r23,-1
20083ea0:	00bfffc4 	movi	r2,-1
20083ea4:	8c7fff04 	addi	r17,r17,-4
20083ea8:	b8803a26 	beq	r23,r2,20083f94 <mmc_startup+0x548>
	int ret;

	cmd.cmdidx = MMC_CMD_SWITCH;
	cmd.resp_type = MMC_RSP_R1b;
	cmd.cmdarg = (MMC_SWITCH_MODE_WRITE_BYTE << 24) | (index << 16)
			| (value << 8);
20083eac:	b804923a 	slli	r2,r23,8

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20083eb0:	80c02417 	ldw	r3,144(r16)
static int mmc_switch(struct mmc *mmc, char set, char index, char value) {
	struct mmc_cmd cmd;
	int timeout = 1000;
	int ret;

	cmd.cmdidx = MMC_CMD_SWITCH;
20083eb4:	dd01000d 	sth	r20,1024(sp)
	cmd.resp_type = MMC_RSP_R1b;
	cmd.cmdarg = (MMC_SWITCH_MODE_WRITE_BYTE << 24) | (index << 16)
			| (value << 8);
20083eb8:	10bfedf4 	orhi	r2,r2,65463
	struct mmc_cmd cmd;
	int timeout = 1000;
	int ret;

	cmd.cmdidx = MMC_CMD_SWITCH;
	cmd.resp_type = MMC_RSP_R1b;
20083ebc:	dcc10115 	stw	r19,1028(sp)
	cmd.cmdarg = (MMC_SWITCH_MODE_WRITE_BYTE << 24) | (index << 16)
20083ec0:	d8810215 	stw	r2,1032(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20083ec4:	8009883a 	mov	r4,r16
20083ec8:	900b883a 	mov	r5,r18
20083ecc:	000d883a 	mov	r6,zero
20083ed0:	183ee83a 	callr	r3
			| (value << 8);

	ret = mmc_send_cmd(mmc, &cmd, NULL);

	/* Waiting for the ready status */
	if (!ret)
20083ed4:	103ff11e 	bne	r2,zero,20083e9c <__flash_rwdata_start+0xfffe7854>
		ret = mmc_send_status(mmc, timeout);
20083ed8:	8009883a 	mov	r4,r16
20083edc:	00839280 	call	20083928 <mmc_send_status.constprop.4>
		for (; width >= 0; width--) {
			/* Set the card to use 4 bit*/
			err = mmc_switch(mmc, EXT_CSD_CMD_SET_NORMAL,
			EXT_CSD_BUS_WIDTH, width);

			if (err)
20083ee0:	103fee1e 	bne	r2,zero,20083e9c <__flash_rwdata_start+0xfffe7854>
 */
static const int multipliers[] = { 0, /* reserved */
10, 12, 13, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 70, 80, };

static void mmc_set_ios(struct mmc *mmc) {
	mmc->set_ios(mmc);
20083ee4:	80802517 	ldw	r2,148(r16)
			EXT_CSD_BUS_WIDTH, width);

			if (err)
				continue;

			if (!width) {
20083ee8:	b800a126 	beq	r23,zero,20084170 <mmc_startup+0x724>
 */
static const int multipliers[] = { 0, /* reserved */
10, 12, 13, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 70, 80, };

static void mmc_set_ios(struct mmc *mmc) {
	mmc->set_ios(mmc);
20083eec:	8009883a 	mov	r4,r16
}

static void mmc_set_bus_width(struct mmc *mmc, uint width) {
	mmc->bus_width = width;
20083ef0:	84400f15 	stw	r17,60(r16)
 */
static const int multipliers[] = { 0, /* reserved */
10, 12, 13, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 70, 80, };

static void mmc_set_ios(struct mmc *mmc) {
	mmc->set_ios(mmc);
20083ef4:	103ee83a 	callr	r2

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20083ef8:	80c02417 	ldw	r3,144(r16)
	cmd.cmdidx = MMC_CMD_SEND_EXT_CSD;
	cmd.resp_type = MMC_RSP_R1;
	cmd.cmdarg = 0;

	data.dest = (char *) ext_csd;
	data.blocks = 1;
20083efc:	00800044 	movi	r2,1
	data.blocksize = 512;
20083f00:	01008004 	movi	r4,512
20083f04:	d9011115 	stw	r4,1092(sp)
	struct mmc_cmd cmd;
	struct mmc_data data;
	int err;

	/* Get the Card Status Register */
	cmd.cmdidx = MMC_CMD_SEND_EXT_CSD;
20083f08:	dd81000d 	sth	r22,1024(sp)
	cmd.resp_type = MMC_RSP_R1;
20083f0c:	dd410115 	stw	r21,1028(sp)
	cmd.cmdarg = 0;
20083f10:	d8010215 	stw	zero,1032(sp)

	data.dest = (char *) ext_csd;
20083f14:	dec10e15 	stw	sp,1080(sp)
	data.blocks = 1;
20083f18:	d8811015 	stw	r2,1088(sp)
	data.blocksize = 512;
	data.flags = MMC_DATA_READ;
20083f1c:	d8810f15 	stw	r2,1084(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20083f20:	8009883a 	mov	r4,r16
20083f24:	900b883a 	mov	r5,r18
20083f28:	d9810e04 	addi	r6,sp,1080
20083f2c:	183ee83a 	callr	r3
				break;
			} else
				mmc_set_bus_width(mmc, 4 * width);

			err = mmc_send_ext_csd(mmc, test_csd);
			if (!err
20083f30:	103fda1e 	bne	r2,zero,20083e9c <__flash_rwdata_start+0xfffe7854>
					&& ext_csd[EXT_CSD_PARTITIONING_SUPPORT]
20083f34:	d8c0a807 	ldb	r3,672(sp)
20083f38:	d8802807 	ldb	r2,160(sp)
20083f3c:	18bfd71e 	bne	r3,r2,20083e9c <__flash_rwdata_start+0xfffe7854>
							== test_csd[EXT_CSD_PARTITIONING_SUPPORT]
					&& ext_csd[EXT_CSD_ERASE_GROUP_DEF]
20083f40:	d8c0abc7 	ldb	r3,687(sp)
20083f44:	d8802bc7 	ldb	r2,175(sp)
20083f48:	18bfd41e 	bne	r3,r2,20083e9c <__flash_rwdata_start+0xfffe7854>
							== test_csd[EXT_CSD_ERASE_GROUP_DEF]
					&& ext_csd[EXT_CSD_REV] == test_csd[EXT_CSD_REV]
20083f4c:	d8c0b007 	ldb	r3,704(sp)
20083f50:	d8803007 	ldb	r2,192(sp)
20083f54:	18bfd11e 	bne	r3,r2,20083e9c <__flash_rwdata_start+0xfffe7854>
					&& ext_csd[EXT_CSD_HC_ERASE_GRP_SIZE]
20083f58:	d8c0b807 	ldb	r3,736(sp)
20083f5c:	d8803807 	ldb	r2,224(sp)
20083f60:	18bfce1e 	bne	r3,r2,20083e9c <__flash_rwdata_start+0xfffe7854>
							== test_csd[EXT_CSD_HC_ERASE_GRP_SIZE]
					&& memcmp(&ext_csd[EXT_CSD_SEC_CNT],
20083f64:	d900b504 	addi	r4,sp,724
20083f68:	d9403504 	addi	r5,sp,212
20083f6c:	01800104 	movi	r6,4
20083f70:	008a1640 	call	2008a164 <memcmp>
20083f74:	103fc91e 	bne	r2,zero,20083e9c <__flash_rwdata_start+0xfffe7854>
							&test_csd[EXT_CSD_SEC_CNT], 4) == 0) {

				mmc->card_caps |= width;
20083f78:	80c01117 	ldw	r3,68(r16)
20083f7c:	1dc6b03a 	or	r3,r3,r23
20083f80:	80c01115 	stw	r3,68(r16)
				break;
			}
		}

		if (mmc->card_caps & MMC_MODE_HS) {
20083f84:	1880004c 	andi	r2,r3,1
20083f88:	1000041e 	bne	r2,zero,20083f9c <mmc_startup+0x550>
20083f8c:	80801f17 	ldw	r2,124(r16)
20083f90:	003f4d06 	br	20083cc8 <__flash_rwdata_start+0xfffe7680>
20083f94:	80c01117 	ldw	r3,68(r16)
20083f98:	003ffa06 	br	20083f84 <__flash_rwdata_start+0xfffe793c>
			if (mmc->card_caps & MMC_MODE_HS_52MHz)
20083f9c:	18c0040c 	andi	r3,r3,16
20083fa0:	18009c26 	beq	r3,zero,20084214 <mmc_startup+0x7c8>
				mmc->tran_speed = 52000000;
20083fa4:	0080c674 	movhi	r2,793
20083fa8:	109d4004 	addi	r2,r2,29952
20083fac:	80801f15 	stw	r2,124(r16)
20083fb0:	003f4506 	br	20083cc8 <__flash_rwdata_start+0xfffe7680>
	struct mmc_cmd cmd;
	struct mmc_data data;
	int err;

	/* Get the Card Status Register */
	cmd.cmdidx = MMC_CMD_SEND_EXT_CSD;
20083fb4:	01000204 	movi	r4,8
20083fb8:	d900000d 	sth	r4,0(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20083fbc:	80802417 	ldw	r2,144(r16)
	/* Get the Card Status Register */
	cmd.cmdidx = MMC_CMD_SEND_EXT_CSD;
	cmd.resp_type = MMC_RSP_R1;
	cmd.cmdarg = 0;

	data.dest = (char *) ext_csd;
20083fc0:	d9008004 	addi	r4,sp,512

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20083fc4:	dc810004 	addi	r18,sp,1024
	/* Get the Card Status Register */
	cmd.cmdidx = MMC_CMD_SEND_EXT_CSD;
	cmd.resp_type = MMC_RSP_R1;
	cmd.cmdarg = 0;

	data.dest = (char *) ext_csd;
20083fc8:	d9010015 	stw	r4,1024(sp)
	data.blocks = 1;
	data.blocksize = 512;
20083fcc:	01008004 	movi	r4,512
20083fd0:	d9010315 	stw	r4,1036(sp)
	struct mmc_data data;
	int err;

	/* Get the Card Status Register */
	cmd.cmdidx = MMC_CMD_SEND_EXT_CSD;
	cmd.resp_type = MMC_RSP_R1;
20083fd4:	dc400115 	stw	r17,4(sp)
	cmd.cmdarg = 0;
20083fd8:	d8000215 	stw	zero,8(sp)

	data.dest = (char *) ext_csd;
	data.blocks = 1;
20083fdc:	d8c10215 	stw	r3,1032(sp)
	data.blocksize = 512;
	data.flags = MMC_DATA_READ;
20083fe0:	d8c10115 	stw	r3,1028(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20083fe4:	8009883a 	mov	r4,r16
20083fe8:	d80b883a 	mov	r5,sp
20083fec:	900d883a 	mov	r6,r18
20083ff0:	103ee83a 	callr	r2
	mmc->erase_grp_size = 1;
	mmc->part_config = MMCPART_NOAVAILABLE;
	if (!IS_SD(mmc) && (mmc->version >= MMC_VERSION_4)) {
		/* check  ext_csd version and capacity */
		err = mmc_send_ext_csd(mmc, ext_csd);
		if (!err & (ext_csd[EXT_CSD_REV] >= 2)) {
20083ff4:	10000f1e 	bne	r2,zero,20084034 <mmc_startup+0x5e8>
20083ff8:	d880b007 	ldb	r2,704(sp)
20083ffc:	10800088 	cmpgei	r2,r2,2
20084000:	10000c26 	beq	r2,zero,20084034 <mmc_startup+0x5e8>
			 * According to the JEDEC Standard, the value of
			 * ext_csd's capacity is valid if the value is more
			 * than 2GB
			 */
			capacity = ext_csd[EXT_CSD_SEC_CNT] << 0
					| ext_csd[EXT_CSD_SEC_CNT + 1] << 8
20084004:	d900b547 	ldb	r4,725(sp)
					| ext_csd[EXT_CSD_SEC_CNT + 2] << 16
20084008:	d8c0b587 	ldb	r3,726(sp)
			/*
			 * According to the JEDEC Standard, the value of
			 * ext_csd's capacity is valid if the value is more
			 * than 2GB
			 */
			capacity = ext_csd[EXT_CSD_SEC_CNT] << 0
2008400c:	d880b507 	ldb	r2,724(sp)
					| ext_csd[EXT_CSD_SEC_CNT + 1] << 8
20084010:	2008923a 	slli	r4,r4,8
					| ext_csd[EXT_CSD_SEC_CNT + 2] << 16
20084014:	1806943a 	slli	r3,r3,16
20084018:	20c6b03a 	or	r3,r4,r3
2008401c:	1884b03a 	or	r2,r3,r2
					| ext_csd[EXT_CSD_SEC_CNT + 3] << 24;
			capacity *= 512;
20084020:	1004927a 	slli	r2,r2,9
			if ((capacity >> 20) > 2 * 1024)
20084024:	01020004 	movi	r4,2048
20084028:	1006d53a 	srli	r3,r2,20
2008402c:	20c0012e 	bgeu	r4,r3,20084034 <mmc_startup+0x5e8>
				mmc->capacity = capacity;
20084030:	80802315 	stw	r2,140(r16)
		/*
		 * Check whether GROUP_DEF is set, if yes, read out
		 * group size from ext_csd directly, or calculate
		 * the group size from the csd value.
		 */
		if (ext_csd[EXT_CSD_ERASE_GROUP_DEF])
20084034:	d880abc7 	ldb	r2,687(sp)
20084038:	10007a26 	beq	r2,zero,20084224 <mmc_startup+0x7d8>
			mmc->erase_grp_size = ext_csd[EXT_CSD_HC_ERASE_GRP_SIZE] * 512
					* 1024;
2008403c:	d880b807 	ldb	r2,736(sp)
20084040:	100494fa 	slli	r2,r2,19
		 * Check whether GROUP_DEF is set, if yes, read out
		 * group size from ext_csd directly, or calculate
		 * the group size from the csd value.
		 */
		if (ext_csd[EXT_CSD_ERASE_GROUP_DEF])
			mmc->erase_grp_size = ext_csd[EXT_CSD_HC_ERASE_GRP_SIZE] * 512
20084044:	80802215 	stw	r2,136(r16)
			erase_gmul = (mmc->csd[2] & 0x000003e0) >> 5;
			mmc->erase_grp_size = (erase_gsz + 1) * (erase_gmul + 1);
		}

		/* store the partition info of emmc */
		if ((ext_csd[EXT_CSD_PARTITIONING_SUPPORT] & PART_SUPPORT)
20084048:	d880a803 	ldbu	r2,672(sp)
2008404c:	1080004c 	andi	r2,r2,1
20084050:	1000021e 	bne	r2,zero,2008405c <mmc_startup+0x610>
				|| ext_csd[EXT_CSD_BOOT_MULT])
20084054:	d880b887 	ldb	r2,738(sp)
20084058:	10000226 	beq	r2,zero,20084064 <mmc_startup+0x618>
			mmc->part_config = ext_csd[EXT_CSD_PART_CONF];
2008405c:	d880acc3 	ldbu	r2,691(sp)
20084060:	80801e85 	stb	r2,122(r16)
	}

	if (IS_SD(mmc))
20084064:	80800a17 	ldw	r2,40(r16)
20084068:	10c000ac 	andhi	r3,r2,2
2008406c:	183f371e 	bne	r3,zero,20083d4c <__flash_rwdata_start+0xfffe7704>
	int err;

	mmc->card_caps = 0;

	/* Only version 4 supports high-speed */
	if (mmc->version < MMC_VERSION_4)
20084070:	00c00074 	movhi	r3,1
static int mmc_change_freq(struct mmc *mmc) {
	char ext_csd[512];
	char cardtype;
	int err;

	mmc->card_caps = 0;
20084074:	80001115 	stw	zero,68(r16)

	/* Only version 4 supports high-speed */
	if (mmc->version < MMC_VERSION_4)
20084078:	18c00fc4 	addi	r3,r3,63
2008407c:	18bf052e 	bgeu	r3,r2,20083c94 <__flash_rwdata_start+0xfffe764c>

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20084080:	80802417 	ldw	r2,144(r16)
	cmd.cmdidx = MMC_CMD_SEND_EXT_CSD;
	cmd.resp_type = MMC_RSP_R1;
	cmd.cmdarg = 0;

	data.dest = (char *) ext_csd;
	data.blocks = 1;
20084084:	05800044 	movi	r22,1
	struct mmc_cmd cmd;
	struct mmc_data data;
	int err;

	/* Get the Card Status Register */
	cmd.cmdidx = MMC_CMD_SEND_EXT_CSD;
20084088:	05000204 	movi	r20,8
	cmd.resp_type = MMC_RSP_R1;
2008408c:	04c00544 	movi	r19,21
	cmd.cmdarg = 0;

	data.dest = (char *) ext_csd;
	data.blocks = 1;
	data.blocksize = 512;
20084090:	04408004 	movi	r17,512
	struct mmc_cmd cmd;
	struct mmc_data data;
	int err;

	/* Get the Card Status Register */
	cmd.cmdidx = MMC_CMD_SEND_EXT_CSD;
20084094:	dd01000d 	sth	r20,1024(sp)
	cmd.resp_type = MMC_RSP_R1;
20084098:	dcc10115 	stw	r19,1028(sp)
	cmd.cmdarg = 0;
2008409c:	d8010215 	stw	zero,1032(sp)

	data.dest = (char *) ext_csd;
200840a0:	dec10e15 	stw	sp,1080(sp)
	data.blocks = 1;
200840a4:	dd811015 	stw	r22,1088(sp)
	data.blocksize = 512;
200840a8:	dc411115 	stw	r17,1092(sp)
	data.flags = MMC_DATA_READ;
200840ac:	dd810f15 	stw	r22,1084(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
200840b0:	8009883a 	mov	r4,r16
200840b4:	900b883a 	mov	r5,r18
200840b8:	d9810e04 	addi	r6,sp,1080
200840bc:	103ee83a 	callr	r2
	if (mmc->version < MMC_VERSION_4)
		return 0;

	err = mmc_send_ext_csd(mmc, ext_csd);

	if (err)
200840c0:	103f441e 	bne	r2,zero,20083dd4 <__flash_rwdata_start+0xfffe778c>
static int mmc_switch(struct mmc *mmc, char set, char index, char value) {
	struct mmc_cmd cmd;
	int timeout = 1000;
	int ret;

	cmd.cmdidx = MMC_CMD_SWITCH;
200840c4:	00c00184 	movi	r3,6
200840c8:	d8c1000d 	sth	r3,1024(sp)
	cmd.resp_type = MMC_RSP_R1b;
200840cc:	00c00744 	movi	r3,29
200840d0:	d8c10115 	stw	r3,1028(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
200840d4:	80802417 	ldw	r2,144(r16)
	int timeout = 1000;
	int ret;

	cmd.cmdidx = MMC_CMD_SWITCH;
	cmd.resp_type = MMC_RSP_R1b;
	cmd.cmdarg = (MMC_SWITCH_MODE_WRITE_BYTE << 24) | (index << 16)
200840d8:	00ffee74 	movhi	r3,65465
200840dc:	18c04004 	addi	r3,r3,256
200840e0:	d8c10215 	stw	r3,1032(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
200840e4:	8009883a 	mov	r4,r16
200840e8:	900b883a 	mov	r5,r18
200840ec:	000d883a 	mov	r6,zero
	err = mmc_send_ext_csd(mmc, ext_csd);

	if (err)
		return err;

	cardtype = ext_csd[EXT_CSD_CARD_TYPE] & 0xf;
200840f0:	dd403103 	ldbu	r21,196(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
200840f4:	103ee83a 	callr	r2
			| (value << 8);

	ret = mmc_send_cmd(mmc, &cmd, NULL);

	/* Waiting for the ready status */
	if (!ret)
200840f8:	103f361e 	bne	r2,zero,20083dd4 <__flash_rwdata_start+0xfffe778c>
		ret = mmc_send_status(mmc, timeout);
200840fc:	8009883a 	mov	r4,r16
20084100:	00839280 	call	20083928 <mmc_send_status.constprop.4>

	cardtype = ext_csd[EXT_CSD_CARD_TYPE] & 0xf;

	err = mmc_switch(mmc, EXT_CSD_CMD_SET_NORMAL, EXT_CSD_HS_TIMING, 1);

	if (err)
20084104:	103f331e 	bne	r2,zero,20083dd4 <__flash_rwdata_start+0xfffe778c>

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20084108:	80802417 	ldw	r2,144(r16)
	struct mmc_cmd cmd;
	struct mmc_data data;
	int err;

	/* Get the Card Status Register */
	cmd.cmdidx = MMC_CMD_SEND_EXT_CSD;
2008410c:	dd01000d 	sth	r20,1024(sp)
	cmd.resp_type = MMC_RSP_R1;
20084110:	dcc10115 	stw	r19,1028(sp)
	cmd.cmdarg = 0;
20084114:	d8010215 	stw	zero,1032(sp)

	data.dest = (char *) ext_csd;
20084118:	dec10e15 	stw	sp,1080(sp)
	data.blocks = 1;
2008411c:	dd811015 	stw	r22,1088(sp)
	data.blocksize = 512;
20084120:	dc411115 	stw	r17,1092(sp)
	data.flags = MMC_DATA_READ;
20084124:	dd810f15 	stw	r22,1084(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20084128:	8009883a 	mov	r4,r16
2008412c:	900b883a 	mov	r5,r18
20084130:	d9810e04 	addi	r6,sp,1080
20084134:	103ee83a 	callr	r2
		return err;

	/* Now check to see that it worked */
	err = mmc_send_ext_csd(mmc, ext_csd);

	if (err)
20084138:	103f261e 	bne	r2,zero,20083dd4 <__flash_rwdata_start+0xfffe778c>
		return err;

	/* No high-speed support */
	if (!ext_csd[EXT_CSD_HS_TIMING])
2008413c:	d8802e47 	ldb	r2,185(sp)
20084140:	103f2526 	beq	r2,zero,20083dd8 <__flash_rwdata_start+0xfffe7790>
		return 0;

	/* High Speed is set, there are two types: 52MHz and 26MHz */
	if (cardtype & MMC_HS_52MHZ)
20084144:	ad40008c 	andi	r21,r21,2
		mmc->card_caps |= MMC_MODE_HS_52MHz | MMC_MODE_HS;
20084148:	80c01117 	ldw	r3,68(r16)
2008414c:	80800a17 	ldw	r2,40(r16)
	/* No high-speed support */
	if (!ext_csd[EXT_CSD_HS_TIMING])
		return 0;

	/* High Speed is set, there are two types: 52MHz and 26MHz */
	if (cardtype & MMC_HS_52MHZ)
20084150:	a800d41e 	bne	r21,zero,200844a4 <mmc_startup+0xa58>
		mmc->card_caps |= MMC_MODE_HS_52MHz | MMC_MODE_HS;
	else
		mmc->card_caps |= MMC_MODE_HS;
20084154:	18c00054 	ori	r3,r3,1
20084158:	80c01115 	stw	r3,68(r16)
2008415c:	003ece06 	br	20083c98 <__flash_rwdata_start+0xfffe7650>
		}

		if (mmc->card_caps & MMC_MODE_HS)
			mmc->tran_speed = 50000000;
		else
			mmc->tran_speed = 25000000;
20084160:	00805f74 	movhi	r2,381
20084164:	109e1004 	addi	r2,r2,30784
20084168:	80801f15 	stw	r2,124(r16)
2008416c:	003ed606 	br	20083cc8 <__flash_rwdata_start+0xfffe7680>
static void mmc_set_ios(struct mmc *mmc) {
	mmc->set_ios(mmc);
}

static void mmc_set_bus_width(struct mmc *mmc, uint width) {
	mmc->bus_width = width;
20084170:	00c00044 	movi	r3,1
20084174:	80c00f15 	stw	r3,60(r16)
 */
static const int multipliers[] = { 0, /* reserved */
10, 12, 13, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 70, 80, };

static void mmc_set_ios(struct mmc *mmc) {
	mmc->set_ios(mmc);
20084178:	8009883a 	mov	r4,r16
2008417c:	103ee83a 	callr	r2
20084180:	80c01117 	ldw	r3,68(r16)
20084184:	003f7f06 	br	20083f84 <__flash_rwdata_start+0xfffe793c>

	if (IS_SD(mmc)) {
		if (mmc->card_caps & MMC_MODE_4BIT) {
			cmd.cmdidx = MMC_CMD_APP_CMD;
			cmd.resp_type = MMC_RSP_R1;
			cmd.cmdarg = mmc->rca << 16;
20084188:	80801e0b 	ldhu	r2,120(r16)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
2008418c:	80c02417 	ldw	r3,144(r16)
	/* Restrict card's capabilities by what the host can do */
	mmc->card_caps &= mmc->host_caps;

	if (IS_SD(mmc)) {
		if (mmc->card_caps & MMC_MODE_4BIT) {
			cmd.cmdidx = MMC_CMD_APP_CMD;
20084190:	01000dc4 	movi	r4,55
			cmd.resp_type = MMC_RSP_R1;
			cmd.cmdarg = mmc->rca << 16;
20084194:	1004943a 	slli	r2,r2,16
	mmc->card_caps &= mmc->host_caps;

	if (IS_SD(mmc)) {
		if (mmc->card_caps & MMC_MODE_4BIT) {
			cmd.cmdidx = MMC_CMD_APP_CMD;
			cmd.resp_type = MMC_RSP_R1;
20084198:	04400544 	movi	r17,21
	/* Restrict card's capabilities by what the host can do */
	mmc->card_caps &= mmc->host_caps;

	if (IS_SD(mmc)) {
		if (mmc->card_caps & MMC_MODE_4BIT) {
			cmd.cmdidx = MMC_CMD_APP_CMD;
2008419c:	d901070d 	sth	r4,1052(sp)
			cmd.resp_type = MMC_RSP_R1;
200841a0:	dc410815 	stw	r17,1056(sp)
			cmd.cmdarg = mmc->rca << 16;
200841a4:	d8810915 	stw	r2,1060(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
200841a8:	8009883a 	mov	r4,r16
200841ac:	d9410704 	addi	r5,sp,1052
200841b0:	000d883a 	mov	r6,zero
200841b4:	183ee83a 	callr	r3
			cmd.cmdidx = MMC_CMD_APP_CMD;
			cmd.resp_type = MMC_RSP_R1;
			cmd.cmdarg = mmc->rca << 16;

			err = mmc_send_cmd(mmc, &cmd, NULL);
			if (err)
200841b8:	103e3a1e 	bne	r2,zero,20083aa4 <__flash_rwdata_start+0xfffe745c>
				return err;

			cmd.cmdidx = SD_CMD_APP_SET_BUS_WIDTH;
200841bc:	00c00184 	movi	r3,6

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
200841c0:	80802417 	ldw	r2,144(r16)

			err = mmc_send_cmd(mmc, &cmd, NULL);
			if (err)
				return err;

			cmd.cmdidx = SD_CMD_APP_SET_BUS_WIDTH;
200841c4:	d8c1070d 	sth	r3,1052(sp)
			cmd.resp_type = MMC_RSP_R1;
			cmd.cmdarg = 2;
200841c8:	00c00084 	movi	r3,2
			err = mmc_send_cmd(mmc, &cmd, NULL);
			if (err)
				return err;

			cmd.cmdidx = SD_CMD_APP_SET_BUS_WIDTH;
			cmd.resp_type = MMC_RSP_R1;
200841cc:	dc410815 	stw	r17,1056(sp)
			cmd.cmdarg = 2;
200841d0:	d8c10915 	stw	r3,1060(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
200841d4:	8009883a 	mov	r4,r16
200841d8:	d9410704 	addi	r5,sp,1052
200841dc:	000d883a 	mov	r6,zero
200841e0:	103ee83a 	callr	r2

			cmd.cmdidx = SD_CMD_APP_SET_BUS_WIDTH;
			cmd.resp_type = MMC_RSP_R1;
			cmd.cmdarg = 2;
			err = mmc_send_cmd(mmc, &cmd, NULL);
			if (err)
200841e4:	103e2f1e 	bne	r2,zero,20083aa4 <__flash_rwdata_start+0xfffe745c>
 */
static const int multipliers[] = { 0, /* reserved */
10, 12, 13, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 70, 80, };

static void mmc_set_ios(struct mmc *mmc) {
	mmc->set_ios(mmc);
200841e8:	80802517 	ldw	r2,148(r16)
}

static void mmc_set_bus_width(struct mmc *mmc, uint width) {
	mmc->bus_width = width;
200841ec:	00c00104 	movi	r3,4
200841f0:	80c00f15 	stw	r3,60(r16)
 */
static const int multipliers[] = { 0, /* reserved */
10, 12, 13, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 70, 80, };

static void mmc_set_ios(struct mmc *mmc) {
	mmc->set_ios(mmc);
200841f4:	8009883a 	mov	r4,r16
200841f8:	103ee83a 	callr	r2
200841fc:	80c01117 	ldw	r3,68(r16)
20084200:	003eac06 	br	20083cb4 <__flash_rwdata_start+0xfffe766c>
			break;
		case 4:
			mmc->version = MMC_VERSION_4;
			break;
		default:
			mmc->version = MMC_VERSION_1_2;
20084204:	21000484 	addi	r4,r4,18
20084208:	81000a15 	stw	r4,40(r16)
			break;
2008420c:	0011883a 	mov	r8,zero
20084210:	003e6006 	br	20083b94 <__flash_rwdata_start+0xfffe754c>

		if (mmc->card_caps & MMC_MODE_HS) {
			if (mmc->card_caps & MMC_MODE_HS_52MHz)
				mmc->tran_speed = 52000000;
			else
				mmc->tran_speed = 26000000;
20084214:	00806374 	movhi	r2,397
20084218:	10aea004 	addi	r2,r2,-17792
2008421c:	80801f15 	stw	r2,124(r16)
20084220:	003ea906 	br	20083cc8 <__flash_rwdata_start+0xfffe7680>
		if (ext_csd[EXT_CSD_ERASE_GROUP_DEF])
			mmc->erase_grp_size = ext_csd[EXT_CSD_HC_ERASE_GRP_SIZE] * 512
					* 1024;
		else {
			int erase_gsz, erase_gmul;
			erase_gsz = (mmc->csd[2] & 0x00007c00) >> 10;
20084224:	80801817 	ldw	r2,96(r16)
20084228:	10df000c 	andi	r3,r2,31744
			erase_gmul = (mmc->csd[2] & 0x000003e0) >> 5;
2008422c:	1080f80c 	andi	r2,r2,992
		if (ext_csd[EXT_CSD_ERASE_GROUP_DEF])
			mmc->erase_grp_size = ext_csd[EXT_CSD_HC_ERASE_GRP_SIZE] * 512
					* 1024;
		else {
			int erase_gsz, erase_gmul;
			erase_gsz = (mmc->csd[2] & 0x00007c00) >> 10;
20084230:	1806d2ba 	srli	r3,r3,10
			erase_gmul = (mmc->csd[2] & 0x000003e0) >> 5;
20084234:	1004d17a 	srli	r2,r2,5
			mmc->erase_grp_size = (erase_gsz + 1) * (erase_gmul + 1);
20084238:	18c00044 	addi	r3,r3,1
2008423c:	10800044 	addi	r2,r2,1
20084240:	1885383a 	mul	r2,r3,r2
20084244:	80802215 	stw	r2,136(r16)
20084248:	003f7f06 	br	20084048 <__flash_rwdata_start+0xfffe7a00>
		return err;
	}

	uint b0, b1, b2, b3;

	b0 = (scr[0] & 0x000000ff) << 24;
2008424c:	d0a01617 	ldw	r2,-32680(gp)
	b2 = (scr[0] & 0x00ff0000) >> 8;
	b3 = (scr[0] & 0xff000000) >> 24;

	mmc->scr[0] = b0 | b1 | b2 | b3;

	b0 = (scr[1] & 0x000000ff) << 24;
20084250:	d0e01604 	addi	r3,gp,-32680
20084254:	18c00117 	ldw	r3,4(r3)
		return err;
	}

	uint b0, b1, b2, b3;

	b0 = (scr[0] & 0x000000ff) << 24;
20084258:	1008963a 	slli	r4,r2,24
	b1 = (scr[0] & 0x0000ff00) << 8;
	b2 = (scr[0] & 0x00ff0000) >> 8;
	b3 = (scr[0] & 0xff000000) >> 24;
2008425c:	100ed63a 	srli	r7,r2,24
	}

	uint b0, b1, b2, b3;

	b0 = (scr[0] & 0x000000ff) << 24;
	b1 = (scr[0] & 0x0000ff00) << 8;
20084260:	117fc00c 	andi	r5,r2,65280
20084264:	280a923a 	slli	r5,r5,8
	b2 = (scr[0] & 0x00ff0000) >> 8;
20084268:	10803fec 	andhi	r2,r2,255
2008426c:	1004d23a 	srli	r2,r2,8
20084270:	390eb03a 	or	r7,r7,r4
	mmc->scr[0] = b0 | b1 | b2 | b3;

	b0 = (scr[1] & 0x000000ff) << 24;
	b1 = (scr[1] & 0x0000ff00) << 8;
	b2 = (scr[1] & 0x00ff0000) >> 8;
	b3 = (scr[1] & 0xff000000) >> 24;
20084274:	1810d63a 	srli	r8,r3,24
	b2 = (scr[0] & 0x00ff0000) >> 8;
	b3 = (scr[0] & 0xff000000) >> 24;

	mmc->scr[0] = b0 | b1 | b2 | b3;

	b0 = (scr[1] & 0x000000ff) << 24;
20084278:	180c963a 	slli	r6,r3,24
	b1 = (scr[1] & 0x0000ff00) << 8;
2008427c:	193fc00c 	andi	r4,r3,65280
20084280:	394ab03a 	or	r5,r7,r5
20084284:	2008923a 	slli	r4,r4,8
	b2 = (scr[1] & 0x00ff0000) >> 8;
20084288:	18c03fec 	andhi	r3,r3,255
	b0 = (scr[0] & 0x000000ff) << 24;
	b1 = (scr[0] & 0x0000ff00) << 8;
	b2 = (scr[0] & 0x00ff0000) >> 8;
	b3 = (scr[0] & 0xff000000) >> 24;

	mmc->scr[0] = b0 | b1 | b2 | b3;
2008428c:	2884b03a 	or	r2,r5,r2

	b0 = (scr[1] & 0x000000ff) << 24;
	b1 = (scr[1] & 0x0000ff00) << 8;
	b2 = (scr[1] & 0x00ff0000) >> 8;
20084290:	1806d23a 	srli	r3,r3,8
20084294:	418cb03a 	or	r6,r8,r6
	mmc->scr[1] = b0 | b1 | b2 | b3;

	MMC_PRINT(("SCR: %08x\n\r", mmc->scr[0]));
	MMC_PRINT(("     %08x\n\r", mmc->scr[1]));

	switch ((mmc->scr[0] >> 24) & 0xf) {
20084298:	100ad63a 	srli	r5,r2,24
2008429c:	3108b03a 	or	r4,r6,r4
	b0 = (scr[1] & 0x000000ff) << 24;
	b1 = (scr[1] & 0x0000ff00) << 8;
	b2 = (scr[1] & 0x00ff0000) >> 8;
	b3 = (scr[1] & 0xff000000) >> 24;

	mmc->scr[1] = b0 | b1 | b2 | b3;
200842a0:	20c6b03a 	or	r3,r4,r3
200842a4:	80c01515 	stw	r3,84(r16)
	b0 = (scr[0] & 0x000000ff) << 24;
	b1 = (scr[0] & 0x0000ff00) << 8;
	b2 = (scr[0] & 0x00ff0000) >> 8;
	b3 = (scr[0] & 0xff000000) >> 24;

	mmc->scr[0] = b0 | b1 | b2 | b3;
200842a8:	80801415 	stw	r2,80(r16)
	mmc->scr[1] = b0 | b1 | b2 | b3;

	MMC_PRINT(("SCR: %08x\n\r", mmc->scr[0]));
	MMC_PRINT(("     %08x\n\r", mmc->scr[1]));

	switch ((mmc->scr[0] >> 24) & 0xf) {
200842ac:	28c003cc 	andi	r3,r5,15
200842b0:	01000044 	movi	r4,1
200842b4:	19007726 	beq	r3,r4,20084494 <mmc_startup+0xa48>
200842b8:	18006c26 	beq	r3,zero,2008446c <mmc_startup+0xa20>
200842bc:	01000084 	movi	r4,2
200842c0:	19006a1e 	bne	r3,r4,2008446c <mmc_startup+0xa20>
		break;
	case 1:
		mmc->version = SD_VERSION_1_10;
		break;
	case 2:
		mmc->version = SD_VERSION_2;
200842c4:	00c000b4 	movhi	r3,2
200842c8:	18c00804 	addi	r3,r3,32
200842cc:	80c00a15 	stw	r3,40(r16)
	default:
		mmc->version = SD_VERSION_1_0;
		break;
	}

	if (mmc->scr[0] & SD_DATA_4BIT)
200842d0:	1080012c 	andhi	r2,r2,4
200842d4:	10000326 	beq	r2,zero,200842e4 <mmc_startup+0x898>
		mmc->card_caps |= MMC_MODE_4BIT;
200842d8:	80801117 	ldw	r2,68(r16)
200842dc:	10804014 	ori	r2,r2,256
200842e0:	80801115 	stw	r2,68(r16)
200842e4:	05c00034 	movhi	r23,0
200842e8:	bdcb0b04 	addi	r23,r23,11308
	/* Switch the frequency */
	cmd.cmdidx = SD_CMD_SWITCH_FUNC;
	cmd.resp_type = MMC_RSP_R1;
	cmd.cmdarg = (mode << 31) | 0xffffff;
	cmd.cmdarg &= ~(0xf << (group * 4));
	cmd.cmdarg |= value << (group * 4);
200842ec:	04804034 	movhi	r18,256
	if (err)
		return err;

	cmd.cmdidx = SD_CMD_APP_SEND_SCR;
	cmd.resp_type = MMC_RSP_R1;
	cmd.cmdarg = 0;
200842f0:	07000104 	movi	fp,4
		char *resp) {
	struct mmc_cmd cmd;
	struct mmc_data data;

	/* Switch the frequency */
	cmd.cmdidx = SD_CMD_SWITCH_FUNC;
200842f4:	05000184 	movi	r20,6
	cmd.resp_type = MMC_RSP_R1;
200842f8:	04c00544 	movi	r19,21
	cmd.cmdarg = (mode << 31) | 0xffffff;
	cmd.cmdarg &= ~(0xf << (group * 4));
	cmd.cmdarg |= value << (group * 4);
200842fc:	94bffc44 	addi	r18,r18,-15

	data.dest = (char *) resp;
	data.blocksize = 64;
	data.blocks = 1;
20084300:	04400044 	movi	r17,1
20084304:	bd401004 	addi	r21,r23,64

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20084308:	80802417 	ldw	r2,144(r16)
	cmd.cmdarg = (mode << 31) | 0xffffff;
	cmd.cmdarg &= ~(0xf << (group * 4));
	cmd.cmdarg |= value << (group * 4);

	data.dest = (char *) resp;
	data.blocksize = 64;
2008430c:	00c01004 	movi	r3,64
	cmd.resp_type = MMC_RSP_R1;
	cmd.cmdarg = (mode << 31) | 0xffffff;
	cmd.cmdarg &= ~(0xf << (group * 4));
	cmd.cmdarg |= value << (group * 4);

	data.dest = (char *) resp;
20084310:	ddc10e15 	stw	r23,1080(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20084314:	d9810e04 	addi	r6,sp,1080
20084318:	05800034 	movhi	r22,0
		char *resp) {
	struct mmc_cmd cmd;
	struct mmc_data data;

	/* Switch the frequency */
	cmd.cmdidx = SD_CMD_SWITCH_FUNC;
2008431c:	dd00000d 	sth	r20,0(sp)
	cmd.resp_type = MMC_RSP_R1;
20084320:	dcc00115 	stw	r19,4(sp)
	cmd.cmdarg = (mode << 31) | 0xffffff;
	cmd.cmdarg &= ~(0xf << (group * 4));
	cmd.cmdarg |= value << (group * 4);
20084324:	dc800215 	stw	r18,8(sp)

	data.dest = (char *) resp;
	data.blocksize = 64;
20084328:	d8c11115 	stw	r3,1092(sp)
	data.blocks = 1;
2008432c:	dc411015 	stw	r17,1088(sp)
	data.flags = MMC_DATA_READ;
20084330:	dc410f15 	stw	r17,1084(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20084334:	8009883a 	mov	r4,r16
20084338:	d80b883a 	mov	r5,sp
2008433c:	b58b0b04 	addi	r22,r22,11308
20084340:	103ee83a 	callr	r2
20084344:	b02f883a 	mov	r23,r22
20084348:	b1c01004 	addi	r7,r22,64
2008434c:	b00d883a 	mov	r6,r22

	int i;
	uint* s = resp;
	for(i = 0; (i < 16); i++){
		uint b0, b1, b2, b3;
		b0 = (s[i] & 0x000000ff) << 24;
20084350:	30c00017 	ldw	r3,0(r6)
20084354:	31800104 	addi	r6,r6,4
		b1 = (s[i] & 0x0000ff00) << 8;
		b2 = (s[i] & 0x00ff0000) >> 8;
		b3 = (s[i] & 0xff000000) >> 24;
20084358:	1814d63a 	srli	r10,r3,24

	int i;
	uint* s = resp;
	for(i = 0; (i < 16); i++){
		uint b0, b1, b2, b3;
		b0 = (s[i] & 0x000000ff) << 24;
2008435c:	1812963a 	slli	r9,r3,24
		b1 = (s[i] & 0x0000ff00) << 8;
20084360:	197fc00c 	andi	r5,r3,65280
20084364:	280a923a 	slli	r5,r5,8
		b2 = (s[i] & 0x00ff0000) >> 8;
20084368:	18c03fec 	andhi	r3,r3,255
2008436c:	1808d23a 	srli	r4,r3,8
20084370:	5246b03a 	or	r3,r10,r9
20084374:	1946b03a 	or	r3,r3,r5
		b3 = (s[i] & 0xff000000) >> 24;
		s[i] = b0 | b1 | b2 | b3;
20084378:	1906b03a 	or	r3,r3,r4
2008437c:	30ffff15 	stw	r3,-4(r6)

	bool ret = mmc_send_cmd(mmc, &cmd, &data);

	int i;
	uint* s = resp;
	for(i = 0; (i < 16); i++){
20084380:	357ff31e 	bne	r6,r21,20084350 <__flash_rwdata_start+0xfffe7d08>

	timeout = 4;
	while (timeout--) {
		err = sd_switch(mmc, SD_SWITCH_CHECK, 0, 1, (char *) switch_status);

		if (err)
20084384:	103e931e 	bne	r2,zero,20083dd4 <__flash_rwdata_start+0xfffe778c>

		MMC_PRINT(("switch status 7 %08x\n\r", switch_status[7]));
		MMC_PRINT(("switch status 3 %08x\n\r", switch_status[3]));
		MMC_PRINT(("switch status 4 %08x\n\r", switch_status[4]));
		/* The high-speed function is busy.  Try again */
		if (!(switch_status[7] & SD_HIGHSPEED_BUSY))
20084388:	b8800717 	ldw	r2,28(r23)
2008438c:	108000ac 	andhi	r2,r2,2
20084390:	10000226 	beq	r2,zero,2008439c <mmc_startup+0x950>
20084394:	e73fffc4 	addi	fp,fp,-1
	/* Version 1.0 doesn't support switching */
	if (mmc->version == SD_VERSION_1_0)
		return 0;

	timeout = 4;
	while (timeout--) {
20084398:	e03fdb1e 	bne	fp,zero,20084308 <__flash_rwdata_start+0xfffe7cc0>
		if (!(switch_status[7] & SD_HIGHSPEED_BUSY))
			break;
	}

	/* If high-speed isn't supported, we return */
	if (!(switch_status[3] & SD_HIGHSPEED_SUPPORTED)){
2008439c:	b8800317 	ldw	r2,12(r23)
200843a0:	108000ac 	andhi	r2,r2,2
200843a4:	103e8c26 	beq	r2,zero,20083dd8 <__flash_rwdata_start+0xfffe7790>
	 * If the host doesn't support SD_HIGHSPEED, do not switch card to
	 * HIGHSPEED mode even if the card support SD_HIGHSPPED.
	 * This can avoid furthur problem when the card runs in different
	 * mode between the host.
	 */
	if (!((mmc->host_caps & MMC_MODE_HS_52MHz) && (mmc->host_caps & MMC_MODE_HS)))
200843a8:	80801217 	ldw	r2,72(r16)
200843ac:	00c00444 	movi	r3,17
200843b0:	1080044c 	andi	r2,r2,17
200843b4:	10fe881e 	bne	r2,r3,20083dd8 <__flash_rwdata_start+0xfffe7790>
		char *resp) {
	struct mmc_cmd cmd;
	struct mmc_data data;

	/* Switch the frequency */
	cmd.cmdidx = SD_CMD_SWITCH_FUNC;
200843b8:	01000184 	movi	r4,6
200843bc:	d900000d 	sth	r4,0(sp)
	cmd.resp_type = MMC_RSP_R1;
200843c0:	01000544 	movi	r4,21
200843c4:	d9000115 	stw	r4,4(sp)
	cmd.cmdarg = (mode << 31) | 0xffffff;
	cmd.cmdarg &= ~(0xf << (group * 4));
	cmd.cmdarg |= value << (group * 4);
200843c8:	01204034 	movhi	r4,33024
200843cc:	213ffc44 	addi	r4,r4,-15
200843d0:	d9000215 	stw	r4,8(sp)

	data.dest = (char *) resp;
200843d4:	01000034 	movhi	r4,0

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
200843d8:	80c02417 	ldw	r3,144(r16)
	cmd.resp_type = MMC_RSP_R1;
	cmd.cmdarg = (mode << 31) | 0xffffff;
	cmd.cmdarg &= ~(0xf << (group * 4));
	cmd.cmdarg |= value << (group * 4);

	data.dest = (char *) resp;
200843dc:	210b0b04 	addi	r4,r4,11308
	data.blocksize = 64;
	data.blocks = 1;
200843e0:	00800044 	movi	r2,1
	cmd.resp_type = MMC_RSP_R1;
	cmd.cmdarg = (mode << 31) | 0xffffff;
	cmd.cmdarg &= ~(0xf << (group * 4));
	cmd.cmdarg |= value << (group * 4);

	data.dest = (char *) resp;
200843e4:	d9010e15 	stw	r4,1080(sp)
	data.blocksize = 64;
200843e8:	01001004 	movi	r4,64
200843ec:	d9011115 	stw	r4,1092(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
200843f0:	d9c11615 	stw	r7,1112(sp)
	cmd.cmdarg &= ~(0xf << (group * 4));
	cmd.cmdarg |= value << (group * 4);

	data.dest = (char *) resp;
	data.blocksize = 64;
	data.blocks = 1;
200843f4:	d8811015 	stw	r2,1088(sp)
	data.flags = MMC_DATA_READ;
200843f8:	d8810f15 	stw	r2,1084(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
200843fc:	8009883a 	mov	r4,r16
20084400:	d80b883a 	mov	r5,sp
20084404:	d9810e04 	addi	r6,sp,1080
20084408:	183ee83a 	callr	r3
2008440c:	d9c11617 	ldw	r7,1112(sp)

	int i;
	uint* s = resp;
	for(i = 0; (i < 16); i++){
		uint b0, b1, b2, b3;
		b0 = (s[i] & 0x000000ff) << 24;
20084410:	b0c00017 	ldw	r3,0(r22)
20084414:	b5800104 	addi	r22,r22,4
		b1 = (s[i] & 0x0000ff00) << 8;
		b2 = (s[i] & 0x00ff0000) >> 8;
		b3 = (s[i] & 0xff000000) >> 24;
20084418:	180cd63a 	srli	r6,r3,24

	int i;
	uint* s = resp;
	for(i = 0; (i < 16); i++){
		uint b0, b1, b2, b3;
		b0 = (s[i] & 0x000000ff) << 24;
2008441c:	180a963a 	slli	r5,r3,24
		b1 = (s[i] & 0x0000ff00) << 8;
20084420:	193fc00c 	andi	r4,r3,65280
20084424:	2008923a 	slli	r4,r4,8
		b2 = (s[i] & 0x00ff0000) >> 8;
20084428:	18c03fec 	andhi	r3,r3,255
2008442c:	1806d23a 	srli	r3,r3,8
20084430:	314ab03a 	or	r5,r6,r5
20084434:	2908b03a 	or	r4,r5,r4
		b3 = (s[i] & 0xff000000) >> 24;
		s[i] = b0 | b1 | b2 | b3;
20084438:	20c6b03a 	or	r3,r4,r3
2008443c:	b0ffff15 	stw	r3,-4(r22)

	bool ret = mmc_send_cmd(mmc, &cmd, &data);

	int i;
	uint* s = resp;
	for(i = 0; (i < 16); i++){
20084440:	b1fff31e 	bne	r22,r7,20084410 <__flash_rwdata_start+0xfffe7dc8>
	if (!((mmc->host_caps & MMC_MODE_HS_52MHz) && (mmc->host_caps & MMC_MODE_HS)))
		return 0;

	err = sd_switch(mmc, SD_SWITCH_SWITCH, 0, 1, (char *) switch_status);
	MMC_PRINT(("switch status 4 %08x\n\r", switch_status[4]));
	if (err)
20084444:	103e631e 	bne	r2,zero,20083dd4 <__flash_rwdata_start+0xfffe778c>
		return err;

	if ((switch_status[4] & 0x0f000000) == 0x01000000){
20084448:	b8800417 	ldw	r2,16(r23)
2008444c:	00c04034 	movhi	r3,256
20084450:	1083c02c 	andhi	r2,r2,3840
20084454:	10fe601e 	bne	r2,r3,20083dd8 <__flash_rwdata_start+0xfffe7790>
		MMC_PRINT(("High speed supported!\n"));
		mmc->card_caps |= MMC_MODE_HS;
20084458:	80c01117 	ldw	r3,68(r16)
2008445c:	80800a17 	ldw	r2,40(r16)
20084460:	18c00054 	ori	r3,r3,1
20084464:	80c01115 	stw	r3,68(r16)
20084468:	003e0b06 	br	20083c98 <__flash_rwdata_start+0xfffe7650>
		break;
	case 2:
		mmc->version = SD_VERSION_2;
		break;
	default:
		mmc->version = SD_VERSION_1_0;
2008446c:	00c000b4 	movhi	r3,2
20084470:	18c00404 	addi	r3,r3,16
20084474:	80c00a15 	stw	r3,40(r16)
		break;
	}

	if (mmc->scr[0] & SD_DATA_4BIT)
20084478:	1080012c 	andhi	r2,r2,4
2008447c:	103e5626 	beq	r2,zero,20083dd8 <__flash_rwdata_start+0xfffe7790>
		mmc->card_caps |= MMC_MODE_4BIT;
20084480:	80c01117 	ldw	r3,68(r16)
20084484:	80800a17 	ldw	r2,40(r16)
20084488:	18c04014 	ori	r3,r3,256
2008448c:	80c01115 	stw	r3,68(r16)
20084490:	003e0106 	br	20083c98 <__flash_rwdata_start+0xfffe7650>
	switch ((mmc->scr[0] >> 24) & 0xf) {
	case 0:
		mmc->version = SD_VERSION_1_0;
		break;
	case 1:
		mmc->version = SD_VERSION_1_10;
20084494:	00c000b4 	movhi	r3,2
20084498:	18c00684 	addi	r3,r3,26
2008449c:	80c00a15 	stw	r3,40(r16)
200844a0:	003f8b06 	br	200842d0 <__flash_rwdata_start+0xfffe7c88>
	if (!ext_csd[EXT_CSD_HS_TIMING])
		return 0;

	/* High Speed is set, there are two types: 52MHz and 26MHz */
	if (cardtype & MMC_HS_52MHZ)
		mmc->card_caps |= MMC_MODE_HS_52MHz | MMC_MODE_HS;
200844a4:	18c00454 	ori	r3,r3,17
200844a8:	80c01115 	stw	r3,68(r16)
200844ac:	003dfa06 	br	20083c98 <__flash_rwdata_start+0xfffe7650>

200844b0 <udelay>:
#define MMC_PRINT(x)	DEBUG(x)
#else
#define MMC_PRINT(x)
#endif

void udelay(int t) {
200844b0:	deffff04 	addi	sp,sp,-4
#define US_DELAY 100
	volatile int us = US_DELAY;
200844b4:	01401904 	movi	r5,100
200844b8:	d9400015 	stw	r5,0(sp)
	while (t--) {
200844bc:	01bfffc4 	movi	r6,-1
200844c0:	213fffc4 	addi	r4,r4,-1
200844c4:	21800726 	beq	r4,r6,200844e4 <udelay+0x34>
		us = US_DELAY;
200844c8:	d9400015 	stw	r5,0(sp)
		while (us--)
200844cc:	d8800017 	ldw	r2,0(sp)
200844d0:	10ffffc4 	addi	r3,r2,-1
200844d4:	d8c00015 	stw	r3,0(sp)
200844d8:	103ffc1e 	bne	r2,zero,200844cc <__flash_rwdata_start+0xfffe7e84>
#endif

void udelay(int t) {
#define US_DELAY 100
	volatile int us = US_DELAY;
	while (t--) {
200844dc:	213fffc4 	addi	r4,r4,-1
200844e0:	21bff91e 	bne	r4,r6,200844c8 <__flash_rwdata_start+0xfffe7e80>
		us = US_DELAY;
		while (us--)
			;
	}
}
200844e4:	dec00104 	addi	sp,sp,4
200844e8:	f800283a 	ret

200844ec <mmc_init>:
}

int mmc_init(struct mmc *mmc) {
	int err;

	if (mmc->has_init)
200844ec:	20800b17 	ldw	r2,44(r4)
	}

	return blkcnt;
}

int mmc_init(struct mmc *mmc) {
200844f0:	deffe804 	addi	sp,sp,-96
200844f4:	df001615 	stw	fp,88(sp)
200844f8:	dfc01715 	stw	ra,92(sp)
200844fc:	ddc01515 	stw	r23,84(sp)
20084500:	dd801415 	stw	r22,80(sp)
20084504:	dd401315 	stw	r21,76(sp)
20084508:	dd001215 	stw	r20,72(sp)
2008450c:	dcc01115 	stw	r19,68(sp)
20084510:	dc801015 	stw	r18,64(sp)
20084514:	dc400f15 	stw	r17,60(sp)
20084518:	dc000e15 	stw	r16,56(sp)
2008451c:	2039883a 	mov	fp,r4
	int err;

	if (mmc->has_init)
20084520:	10000e26 	beq	r2,zero,2008455c <mmc_init+0x70>
		return 0;
20084524:	0021883a 	mov	r16,zero
	if (err)
		mmc->has_init = 0;
	else
		mmc->has_init = 1;
	return err;
}
20084528:	8005883a 	mov	r2,r16
2008452c:	dfc01717 	ldw	ra,92(sp)
20084530:	df001617 	ldw	fp,88(sp)
20084534:	ddc01517 	ldw	r23,84(sp)
20084538:	dd801417 	ldw	r22,80(sp)
2008453c:	dd401317 	ldw	r21,76(sp)
20084540:	dd001217 	ldw	r20,72(sp)
20084544:	dcc01117 	ldw	r19,68(sp)
20084548:	dc801017 	ldw	r18,64(sp)
2008454c:	dc400f17 	ldw	r17,60(sp)
20084550:	dc000e17 	ldw	r16,56(sp)
20084554:	dec01804 	addi	sp,sp,96
20084558:	f800283a 	ret
	int err;

	if (mmc->has_init)
		return 0;

	err = mmc->init(mmc);
2008455c:	20802617 	ldw	r2,152(r4)
20084560:	103ee83a 	callr	r2

	if (err)
20084564:	10000226 	beq	r2,zero,20084570 <mmc_init+0x84>
20084568:	1021883a 	mov	r16,r2
2008456c:	003fee06 	br	20084528 <__flash_rwdata_start+0xfffe7ee0>
 */
static const int multipliers[] = { 0, /* reserved */
10, 12, 13, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 70, 80, };

static void mmc_set_ios(struct mmc *mmc) {
	mmc->set_ios(mmc);
20084570:	e0802517 	ldw	r2,148(fp)
}

static void mmc_set_bus_width(struct mmc *mmc, uint width) {
	mmc->bus_width = width;
20084574:	00c00044 	movi	r3,1
20084578:	e0c00f15 	stw	r3,60(fp)
 */
static const int multipliers[] = { 0, /* reserved */
10, 12, 13, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 70, 80, };

static void mmc_set_ios(struct mmc *mmc) {
	mmc->set_ios(mmc);
2008457c:	e009883a 	mov	r4,fp
20084580:	103ee83a 	callr	r2

	mmc_set_ios(mmc);
}

static void mmc_set_clock(struct mmc *mmc, uint clock) {
	if (clock > mmc->f_max)
20084584:	e0800d17 	ldw	r2,52(fp)
		clock = mmc->f_max;

	if (clock < mmc->f_min)
20084588:	e0c00c17 	ldw	r3,48(fp)
2008458c:	1004c03a 	cmpne	r2,r2,zero
20084590:	10c06a36 	bltu	r2,r3,2008473c <mmc_init+0x250>
 */
static const int multipliers[] = { 0, /* reserved */
10, 12, 13, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 70, 80, };

static void mmc_set_ios(struct mmc *mmc) {
	mmc->set_ios(mmc);
20084594:	e0c02517 	ldw	r3,148(fp)
20084598:	e009883a 	mov	r4,fp
		clock = mmc->f_max;

	if (clock < mmc->f_min)
		clock = mmc->f_min;

	mmc->clock = clock;
2008459c:	e0801015 	stw	r2,64(fp)
 */
static const int multipliers[] = { 0, /* reserved */
10, 12, 13, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 70, 80, };

static void mmc_set_ios(struct mmc *mmc) {
	mmc->set_ios(mmc);
200845a0:	183ee83a 	callr	r3
#define MMC_PRINT(x)
#endif

void udelay(int t) {
#define US_DELAY 100
	volatile int us = US_DELAY;
200845a4:	01001904 	movi	r4,100
200845a8:	d9000d15 	stw	r4,52(sp)
200845ac:	0140fa04 	movi	r5,1000
	while (t--) {
		us = US_DELAY;
200845b0:	d9000d15 	stw	r4,52(sp)
		while (us--)
200845b4:	d8800d17 	ldw	r2,52(sp)
200845b8:	10ffffc4 	addi	r3,r2,-1
200845bc:	d8c00d15 	stw	r3,52(sp)
200845c0:	103ffc1e 	bne	r2,zero,200845b4 <__flash_rwdata_start+0xfffe7f6c>
200845c4:	297fffc4 	addi	r5,r5,-1
#endif

void udelay(int t) {
#define US_DELAY 100
	volatile int us = US_DELAY;
	while (t--) {
200845c8:	283ff91e 	bne	r5,zero,200845b0 <__flash_rwdata_start+0xfffe7f68>

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
200845cc:	e0802417 	ldw	r2,144(fp)
	struct mmc_cmd cmd;
	int err;

	udelay(1000);

	cmd.cmdidx = MMC_CMD_GO_IDLE_STATE;
200845d0:	d800000d 	sth	zero,0(sp)
	cmd.cmdarg = 0;
200845d4:	d8000215 	stw	zero,8(sp)
	cmd.resp_type = MMC_RSP_NONE;
200845d8:	d8000115 	stw	zero,4(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
200845dc:	e009883a 	mov	r4,fp
200845e0:	d80b883a 	mov	r5,sp
200845e4:	000d883a 	mov	r6,zero
200845e8:	103ee83a 	callr	r2
	cmd.cmdarg = 0;
	cmd.resp_type = MMC_RSP_NONE;

	err = mmc_send_cmd(mmc, &cmd, NULL);

	if (err)
200845ec:	103fde1e 	bne	r2,zero,20084568 <__flash_rwdata_start+0xfffe7f20>
#define MMC_PRINT(x)
#endif

void udelay(int t) {
#define US_DELAY 100
	volatile int us = US_DELAY;
200845f0:	01001904 	movi	r4,100
200845f4:	d9000c15 	stw	r4,48(sp)
200845f8:	00c1f404 	movi	r3,2000
	while (t--) {
		us = US_DELAY;
200845fc:	d9000c15 	stw	r4,48(sp)
		while (us--)
20084600:	dc000c17 	ldw	r16,48(sp)
20084604:	80bfffc4 	addi	r2,r16,-1
20084608:	d8800c15 	stw	r2,48(sp)
2008460c:	803ffc1e 	bne	r16,zero,20084600 <__flash_rwdata_start+0xfffe7fb8>
20084610:	18ffffc4 	addi	r3,r3,-1
#endif

void udelay(int t) {
#define US_DELAY 100
	volatile int us = US_DELAY;
	while (t--) {
20084614:	183ff91e 	bne	r3,zero,200845fc <__flash_rwdata_start+0xfffe7fb4>

static int mmc_send_if_cond(struct mmc *mmc) {
	struct mmc_cmd cmd;
	int err;

	cmd.cmdidx = SD_CMD_SEND_IF_COND;
20084618:	00800204 	movi	r2,8
	/* We set the bit if the host supports voltages between 2.7 and 3.6 V */
	cmd.cmdarg = ((mmc->voltages & 0xff8000) != 0) << 8 | 0xaa;
2008461c:	e0c00917 	ldw	r3,36(fp)

static int mmc_send_if_cond(struct mmc *mmc) {
	struct mmc_cmd cmd;
	int err;

	cmd.cmdidx = SD_CMD_SEND_IF_COND;
20084620:	d880000d 	sth	r2,0(sp)
	/* We set the bit if the host supports voltages between 2.7 and 3.6 V */
	cmd.cmdarg = ((mmc->voltages & 0xff8000) != 0) << 8 | 0xaa;
20084624:	00804034 	movhi	r2,256
20084628:	10a00004 	addi	r2,r2,-32768

	if (err)
		return err;

	/* The internal partition reset to user partition(0) at every CMD0*/
	mmc->part_num = 0;
2008462c:	e0001ec5 	stb	zero,123(fp)
	struct mmc_cmd cmd;
	int err;

	cmd.cmdidx = SD_CMD_SEND_IF_COND;
	/* We set the bit if the host supports voltages between 2.7 and 3.6 V */
	cmd.cmdarg = ((mmc->voltages & 0xff8000) != 0) << 8 | 0xaa;
20084630:	1884703a 	and	r2,r3,r2
20084634:	10004b26 	beq	r2,zero,20084764 <mmc_init+0x278>
20084638:	00806a84 	movi	r2,426

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
2008463c:	e0c02417 	ldw	r3,144(fp)
	struct mmc_cmd cmd;
	int err;

	cmd.cmdidx = SD_CMD_SEND_IF_COND;
	/* We set the bit if the host supports voltages between 2.7 and 3.6 V */
	cmd.cmdarg = ((mmc->voltages & 0xff8000) != 0) << 8 | 0xaa;
20084640:	d8800215 	stw	r2,8(sp)
	cmd.resp_type = MMC_RSP_R7;
20084644:	00800544 	movi	r2,21
20084648:	d8800115 	stw	r2,4(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
2008464c:	e009883a 	mov	r4,fp
20084650:	d80b883a 	mov	r5,sp
20084654:	000d883a 	mov	r6,zero
20084658:	183ee83a 	callr	r3
	cmd.cmdarg = ((mmc->voltages & 0xff8000) != 0) << 8 | 0xaa;
	cmd.resp_type = MMC_RSP_R7;

	err = mmc_send_cmd(mmc, &cmd, NULL);

	if (err)
2008465c:	1000061e 	bne	r2,zero,20084678 <mmc_init+0x18c>
		return err;

	if ((cmd.response[0] & 0xff) != 0xaa)
20084660:	d8c00303 	ldbu	r3,12(sp)
20084664:	00802a84 	movi	r2,170
20084668:	1880031e 	bne	r3,r2,20084678 <mmc_init+0x18c>
		return UNUSABLE_ERR;
	else
		mmc->version = SD_VERSION_2;
2008466c:	008000b4 	movhi	r2,2
20084670:	10800804 	addi	r2,r2,32
20084674:	e0800a15 	stw	r2,40(fp)
		 * in the ocr are set. However, Some controller
		 * can set bit 7 (reserved for low voltages), but
		 * how to manage low voltages SD card is not yet
		 * specified.
		 */
		cmd.cmdarg = (mmc->voltages & 0xff8000);
20084678:	05804034 	movhi	r22,256

		if (mmc->version == SD_VERSION_2)
2008467c:	054000b4 	movhi	r21,2
		 * in the ocr are set. However, Some controller
		 * can set bit 7 (reserved for low voltages), but
		 * how to manage low voltages SD card is not yet
		 * specified.
		 */
		cmd.cmdarg = (mmc->voltages & 0xff8000);
20084680:	b5a00004 	addi	r22,r22,-32768

		if (mmc->version == SD_VERSION_2)
20084684:	ad400804 	addi	r21,r21,32

	return 0;
}

static int sd_send_op_cond(struct mmc *mmc) {
	int timeout = 1000;
20084688:	0440fa04 	movi	r17,1000
	int err;
	struct mmc_cmd cmd;

	do {
		cmd.cmdidx = MMC_CMD_APP_CMD;
2008468c:	05000dc4 	movi	r20,55
		cmd.resp_type = MMC_RSP_R1;
20084690:	04c00544 	movi	r19,21
		err = mmc_send_cmd(mmc, &cmd, NULL);

		if (err)
			return err;

		cmd.cmdidx = SD_CMD_APP_SEND_OP_COND;
20084694:	04800a44 	movi	r18,41
#define MMC_PRINT(x)
#endif

void udelay(int t) {
#define US_DELAY 100
	volatile int us = US_DELAY;
20084698:	05c01904 	movi	r23,100

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
2008469c:	e0802417 	ldw	r2,144(fp)
	int timeout = 1000;
	int err;
	struct mmc_cmd cmd;

	do {
		cmd.cmdidx = MMC_CMD_APP_CMD;
200846a0:	dd00000d 	sth	r20,0(sp)
		cmd.resp_type = MMC_RSP_R1;
200846a4:	dcc00115 	stw	r19,4(sp)
		cmd.cmdarg = 0;
200846a8:	d8000215 	stw	zero,8(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
200846ac:	e009883a 	mov	r4,fp
200846b0:	d80b883a 	mov	r5,sp
200846b4:	000d883a 	mov	r6,zero
200846b8:	103ee83a 	callr	r2
		cmd.resp_type = MMC_RSP_R1;
		cmd.cmdarg = 0;

		err = mmc_send_cmd(mmc, &cmd, NULL);

		if (err)
200846bc:	1000211e 	bne	r2,zero,20084744 <mmc_init+0x258>
		 * in the ocr are set. However, Some controller
		 * can set bit 7 (reserved for low voltages), but
		 * how to manage low voltages SD card is not yet
		 * specified.
		 */
		cmd.cmdarg = (mmc->voltages & 0xff8000);
200846c0:	e0800917 	ldw	r2,36(fp)

		if (mmc->version == SD_VERSION_2)
200846c4:	e0c00a17 	ldw	r3,40(fp)

		if (err)
			return err;

		cmd.cmdidx = SD_CMD_APP_SEND_OP_COND;
		cmd.resp_type = MMC_RSP_R3;
200846c8:	01000044 	movi	r4,1
		 * in the ocr are set. However, Some controller
		 * can set bit 7 (reserved for low voltages), but
		 * how to manage low voltages SD card is not yet
		 * specified.
		 */
		cmd.cmdarg = (mmc->voltages & 0xff8000);
200846cc:	1584703a 	and	r2,r2,r22
		err = mmc_send_cmd(mmc, &cmd, NULL);

		if (err)
			return err;

		cmd.cmdidx = SD_CMD_APP_SEND_OP_COND;
200846d0:	dc80000d 	sth	r18,0(sp)
		cmd.resp_type = MMC_RSP_R3;
200846d4:	d9000115 	stw	r4,4(sp)
		 * in the ocr are set. However, Some controller
		 * can set bit 7 (reserved for low voltages), but
		 * how to manage low voltages SD card is not yet
		 * specified.
		 */
		cmd.cmdarg = (mmc->voltages & 0xff8000);
200846d8:	d8800215 	stw	r2,8(sp)

		if (mmc->version == SD_VERSION_2)
200846dc:	1d40021e 	bne	r3,r21,200846e8 <mmc_init+0x1fc>
			cmd.cmdarg |= OCR_HCS;
200846e0:	10900034 	orhi	r2,r2,16384
200846e4:	d8800215 	stw	r2,8(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
200846e8:	e0802417 	ldw	r2,144(fp)
200846ec:	e009883a 	mov	r4,fp
200846f0:	d80b883a 	mov	r5,sp
200846f4:	000d883a 	mov	r6,zero
200846f8:	103ee83a 	callr	r2
		if (mmc->version == SD_VERSION_2)
			cmd.cmdarg |= OCR_HCS;

		err = mmc_send_cmd(mmc, &cmd, NULL);

		if (err)
200846fc:	1000111e 	bne	r2,zero,20084744 <mmc_init+0x258>
#define MMC_PRINT(x)
#endif

void udelay(int t) {
#define US_DELAY 100
	volatile int us = US_DELAY;
20084700:	ddc00b15 	stw	r23,44(sp)
20084704:	0080fa04 	movi	r2,1000
	while (t--) {
		us = US_DELAY;
20084708:	ddc00b15 	stw	r23,44(sp)
		while (us--)
2008470c:	d8c00b17 	ldw	r3,44(sp)
20084710:	197fffc4 	addi	r5,r3,-1
20084714:	d9400b15 	stw	r5,44(sp)
20084718:	183ffc1e 	bne	r3,zero,2008470c <__flash_rwdata_start+0xfffe80c4>
2008471c:	10bfffc4 	addi	r2,r2,-1
#endif

void udelay(int t) {
#define US_DELAY 100
	volatile int us = US_DELAY;
	while (t--) {
20084720:	103ff91e 	bne	r2,zero,20084708 <__flash_rwdata_start+0xfffe80c0>

		if (err)
			return err;

		udelay(1000);
	} while ((!(cmd.response[0] & OCR_BUSY)) && timeout--);
20084724:	d8c00317 	ldw	r3,12(sp)
20084728:	18001316 	blt	r3,zero,20084778 <mmc_init+0x28c>
2008472c:	8c7fffc4 	addi	r17,r17,-1
20084730:	00bfffc4 	movi	r2,-1
20084734:	88bfd91e 	bne	r17,r2,2008469c <__flash_rwdata_start+0xfffe8054>
20084738:	00000406 	br	2008474c <mmc_init+0x260>
2008473c:	1805883a 	mov	r2,r3
20084740:	003f9406 	br	20084594 <__flash_rwdata_start+0xfffe7f4c>

	/* Now try to get the SD card's operating condition */
	err = sd_send_op_cond(mmc);

	/* If the command timed out, we check for an MMC card */
	if (err == TIMEOUT) {
20084744:	00fffb44 	movi	r3,-19
20084748:	10c01926 	beq	r2,r3,200847b0 <mmc_init+0x2c4>
			printf("Card did not respond to voltage select!\n\r");
			return UNUSABLE_ERR;
		}
	}

	err = mmc_startup(mmc);
2008474c:	e009883a 	mov	r4,fp
20084750:	0083a4c0 	call	20083a4c <mmc_startup>
	if (err)
20084754:	10000526 	beq	r2,zero,2008476c <mmc_init+0x280>
		mmc->has_init = 0;
20084758:	e0000b15 	stw	zero,44(fp)
2008475c:	1021883a 	mov	r16,r2
20084760:	003f7106 	br	20084528 <__flash_rwdata_start+0xfffe7ee0>
	struct mmc_cmd cmd;
	int err;

	cmd.cmdidx = SD_CMD_SEND_IF_COND;
	/* We set the bit if the host supports voltages between 2.7 and 3.6 V */
	cmd.cmdarg = ((mmc->voltages & 0xff8000) != 0) << 8 | 0xaa;
20084764:	00802a84 	movi	r2,170
20084768:	003fb406 	br	2008463c <__flash_rwdata_start+0xfffe7ff4>

	err = mmc_startup(mmc);
	if (err)
		mmc->has_init = 0;
	else
		mmc->has_init = 1;
2008476c:	00800044 	movi	r2,1
20084770:	e0800b15 	stw	r2,44(fp)
20084774:	003f6c06 	br	20084528 <__flash_rwdata_start+0xfffe7ee0>
			return err;

		udelay(1000);
	} while ((!(cmd.response[0] & OCR_BUSY)) && timeout--);

	if (timeout <= 0)
20084778:	883ff426 	beq	r17,zero,2008474c <__flash_rwdata_start+0xfffe8104>
		return UNUSABLE_ERR;

	if (mmc->version != SD_VERSION_2)
2008477c:	e1000a17 	ldw	r4,40(fp)
20084780:	008000b4 	movhi	r2,2
20084784:	10800804 	addi	r2,r2,32
20084788:	20800326 	beq	r4,r2,20084798 <mmc_init+0x2ac>
		mmc->version = SD_VERSION_1_0;
2008478c:	008000b4 	movhi	r2,2
20084790:	10800404 	addi	r2,r2,16
20084794:	e0800a15 	stw	r2,40(fp)

	mmc->ocr = cmd.response[0];

	mmc->high_capacity = ((mmc->ocr & OCR_HCS) == OCR_HCS);
20084798:	1804d7ba 	srli	r2,r3,30
		return UNUSABLE_ERR;

	if (mmc->version != SD_VERSION_2)
		mmc->version = SD_VERSION_1_0;

	mmc->ocr = cmd.response[0];
2008479c:	e0c01315 	stw	r3,76(fp)

	mmc->high_capacity = ((mmc->ocr & OCR_HCS) == OCR_HCS);
	mmc->rca = 0;
200847a0:	e0001e0d 	sth	zero,120(fp)
	if (mmc->version != SD_VERSION_2)
		mmc->version = SD_VERSION_1_0;

	mmc->ocr = cmd.response[0];

	mmc->high_capacity = ((mmc->ocr & OCR_HCS) == OCR_HCS);
200847a4:	1080004c 	andi	r2,r2,1
200847a8:	e0800e15 	stw	r2,56(fp)
200847ac:	003fe706 	br	2008474c <__flash_rwdata_start+0xfffe8104>
#define MMC_PRINT(x)
#endif

void udelay(int t) {
#define US_DELAY 100
	volatile int us = US_DELAY;
200847b0:	01401904 	movi	r5,100
200847b4:	d9400815 	stw	r5,32(sp)
200847b8:	0100fa04 	movi	r4,1000
	while (t--) {
		us = US_DELAY;
200847bc:	d9400815 	stw	r5,32(sp)
		while (us--)
200847c0:	d8800817 	ldw	r2,32(sp)
200847c4:	10ffffc4 	addi	r3,r2,-1
200847c8:	d8c00815 	stw	r3,32(sp)
200847cc:	103ffc1e 	bne	r2,zero,200847c0 <__flash_rwdata_start+0xfffe8178>
200847d0:	213fffc4 	addi	r4,r4,-1
#endif

void udelay(int t) {
#define US_DELAY 100
	volatile int us = US_DELAY;
	while (t--) {
200847d4:	203ff91e 	bne	r4,zero,200847bc <__flash_rwdata_start+0xfffe8174>

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
200847d8:	e0802417 	ldw	r2,144(fp)
	struct mmc_cmd cmd;
	int err;

	udelay(1000);

	cmd.cmdidx = MMC_CMD_GO_IDLE_STATE;
200847dc:	d800000d 	sth	zero,0(sp)
	cmd.cmdarg = 0;
200847e0:	d8000215 	stw	zero,8(sp)
	cmd.resp_type = MMC_RSP_NONE;
200847e4:	d8000115 	stw	zero,4(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
200847e8:	e009883a 	mov	r4,fp
200847ec:	d80b883a 	mov	r5,sp
200847f0:	000d883a 	mov	r6,zero
200847f4:	103ee83a 	callr	r2
	cmd.cmdarg = 0;
	cmd.resp_type = MMC_RSP_NONE;

	err = mmc_send_cmd(mmc, &cmd, NULL);

	if (err)
200847f8:	10000b1e 	bne	r2,zero,20084828 <mmc_init+0x33c>
#define MMC_PRINT(x)
#endif

void udelay(int t) {
#define US_DELAY 100
	volatile int us = US_DELAY;
200847fc:	00801904 	movi	r2,100
20084800:	d8800715 	stw	r2,28(sp)
20084804:	0141f404 	movi	r5,2000
	while (t--) {
		us = US_DELAY;
20084808:	1009883a 	mov	r4,r2
2008480c:	d9000715 	stw	r4,28(sp)
		while (us--)
20084810:	d8800717 	ldw	r2,28(sp)
20084814:	10ffffc4 	addi	r3,r2,-1
20084818:	d8c00715 	stw	r3,28(sp)
2008481c:	103ffc1e 	bne	r2,zero,20084810 <__flash_rwdata_start+0xfffe81c8>
20084820:	297fffc4 	addi	r5,r5,-1
#endif

void udelay(int t) {
#define US_DELAY 100
	volatile int us = US_DELAY;
	while (t--) {
20084824:	283ff91e 	bne	r5,zero,2008480c <__flash_rwdata_start+0xfffe81c4>

	/* Some cards seem to need this */
	mmc_go_idle(mmc);

	/* Asking to the card its capabilities */
	cmd.cmdidx = MMC_CMD_SEND_OP_COND;
20084828:	00c00044 	movi	r3,1

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
2008482c:	e0802417 	ldw	r2,144(fp)

	/* Some cards seem to need this */
	mmc_go_idle(mmc);

	/* Asking to the card its capabilities */
	cmd.cmdidx = MMC_CMD_SEND_OP_COND;
20084830:	d8c0000d 	sth	r3,0(sp)
	cmd.resp_type = MMC_RSP_R3;
20084834:	00c00044 	movi	r3,1
20084838:	d8c00115 	stw	r3,4(sp)
	cmd.cmdarg = 0;
2008483c:	d8000215 	stw	zero,8(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20084840:	e009883a 	mov	r4,fp
20084844:	d80b883a 	mov	r5,sp
20084848:	000d883a 	mov	r6,zero
2008484c:	103ee83a 	callr	r2
	cmd.resp_type = MMC_RSP_R3;
	cmd.cmdarg = 0;

	err = mmc_send_cmd(mmc, &cmd, NULL);

	if (err)
20084850:	1000321e 	bne	r2,zero,2008491c <mmc_init+0x430>
#define MMC_PRINT(x)
#endif

void udelay(int t) {
#define US_DELAY 100
	volatile int us = US_DELAY;
20084854:	00801904 	movi	r2,100
20084858:	d8800915 	stw	r2,36(sp)
2008485c:	0140fa04 	movi	r5,1000
	while (t--) {
		us = US_DELAY;
20084860:	1009883a 	mov	r4,r2
20084864:	d9000915 	stw	r4,36(sp)
		while (us--)
20084868:	d8800917 	ldw	r2,36(sp)
2008486c:	10ffffc4 	addi	r3,r2,-1
20084870:	d8c00915 	stw	r3,36(sp)
20084874:	103ffc1e 	bne	r2,zero,20084868 <__flash_rwdata_start+0xfffe8220>
20084878:	297fffc4 	addi	r5,r5,-1
#endif

void udelay(int t) {
#define US_DELAY 100
	volatile int us = US_DELAY;
	while (t--) {
2008487c:	283ff91e 	bne	r5,zero,20084864 <__flash_rwdata_start+0xfffe821c>
20084880:	d8800317 	ldw	r2,12(sp)
20084884:	05802034 	movhi	r22,128
20084888:	b5bfe004 	addi	r22,r22,-128
2008488c:	0489c404 	movi	r18,10000
		return err;

	udelay(1000);

	do {
		cmd.cmdidx = MMC_CMD_SEND_OP_COND;
20084890:	05400044 	movi	r21,1
		cmd.resp_type = MMC_RSP_R3;
20084894:	05000044 	movi	r20,1
#define MMC_PRINT(x)
#endif

void udelay(int t) {
#define US_DELAY 100
	volatile int us = US_DELAY;
20084898:	04401904 	movi	r17,100

		if (err)
			return err;

		udelay(1000);
	} while (!(cmd.response[0] & OCR_BUSY) && timeout--);
2008489c:	04ffffc4 	movi	r19,-1
200848a0:	e0c00917 	ldw	r3,36(fp)
		cmd.cmdidx = MMC_CMD_SEND_OP_COND;
		cmd.resp_type = MMC_RSP_R3;
		cmd.cmdarg = (mmc->voltages & (cmd.response[0] & OCR_VOLTAGE_MASK))
				| (cmd.response[0] & OCR_ACCESS_MODE);

		if (mmc->host_caps & MMC_MODE_HC)
200848a4:	e1001217 	ldw	r4,72(fp)
		return err;

	udelay(1000);

	do {
		cmd.cmdidx = MMC_CMD_SEND_OP_COND;
200848a8:	dd40000d 	sth	r21,0(sp)
200848ac:	1d86703a 	and	r3,r3,r22
		cmd.resp_type = MMC_RSP_R3;
		cmd.cmdarg = (mmc->voltages & (cmd.response[0] & OCR_VOLTAGE_MASK))
				| (cmd.response[0] & OCR_ACCESS_MODE);
200848b0:	18d80034 	orhi	r3,r3,24576
200848b4:	1884703a 	and	r2,r3,r2

	udelay(1000);

	do {
		cmd.cmdidx = MMC_CMD_SEND_OP_COND;
		cmd.resp_type = MMC_RSP_R3;
200848b8:	dd000115 	stw	r20,4(sp)
		cmd.cmdarg = (mmc->voltages & (cmd.response[0] & OCR_VOLTAGE_MASK))
200848bc:	d8800215 	stw	r2,8(sp)
				| (cmd.response[0] & OCR_ACCESS_MODE);

		if (mmc->host_caps & MMC_MODE_HC)
200848c0:	20c2000c 	andi	r3,r4,2048
200848c4:	18000226 	beq	r3,zero,200848d0 <mmc_init+0x3e4>
			cmd.cmdarg |= OCR_HCS;
200848c8:	10900034 	orhi	r2,r2,16384
200848cc:	d8800215 	stw	r2,8(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
200848d0:	e0802417 	ldw	r2,144(fp)
200848d4:	e009883a 	mov	r4,fp
200848d8:	d80b883a 	mov	r5,sp
200848dc:	000d883a 	mov	r6,zero
200848e0:	103ee83a 	callr	r2
		if (mmc->host_caps & MMC_MODE_HC)
			cmd.cmdarg |= OCR_HCS;

		err = mmc_send_cmd(mmc, &cmd, NULL);

		if (err)
200848e4:	10000d1e 	bne	r2,zero,2008491c <mmc_init+0x430>
#define MMC_PRINT(x)
#endif

void udelay(int t) {
#define US_DELAY 100
	volatile int us = US_DELAY;
200848e8:	dc400a15 	stw	r17,40(sp)
200848ec:	0100fa04 	movi	r4,1000
	while (t--) {
		us = US_DELAY;
200848f0:	dc400a15 	stw	r17,40(sp)
		while (us--)
200848f4:	d8c00a17 	ldw	r3,40(sp)
200848f8:	18bfffc4 	addi	r2,r3,-1
200848fc:	d8800a15 	stw	r2,40(sp)
20084900:	183ffc1e 	bne	r3,zero,200848f4 <__flash_rwdata_start+0xfffe82ac>
20084904:	213fffc4 	addi	r4,r4,-1
#endif

void udelay(int t) {
#define US_DELAY 100
	volatile int us = US_DELAY;
	while (t--) {
20084908:	203ff91e 	bne	r4,zero,200848f0 <__flash_rwdata_start+0xfffe82a8>

		if (err)
			return err;

		udelay(1000);
	} while (!(cmd.response[0] & OCR_BUSY) && timeout--);
2008490c:	d8800317 	ldw	r2,12(sp)
20084910:	10000716 	blt	r2,zero,20084930 <mmc_init+0x444>
20084914:	94bfffc4 	addi	r18,r18,-1
20084918:	94ffe11e 	bne	r18,r19,200848a0 <__flash_rwdata_start+0xfffe8258>
	/* If the command timed out, we check for an MMC card */
	if (err == TIMEOUT) {
		err = mmc_send_op_cond(mmc);

		if (err) {
			printf("Card did not respond to voltage select!\n\r");
2008491c:	01000034 	movhi	r4,0
20084920:	2100a704 	addi	r4,r4,668
			return UNUSABLE_ERR;
20084924:	043ffbc4 	movi	r16,-17
	/* If the command timed out, we check for an MMC card */
	if (err == TIMEOUT) {
		err = mmc_send_op_cond(mmc);

		if (err) {
			printf("Card did not respond to voltage select!\n\r");
20084928:	008a4680 	call	2008a468 <printf>
			return UNUSABLE_ERR;
2008492c:	003efe06 	br	20084528 <__flash_rwdata_start+0xfffe7ee0>
			return err;

		udelay(1000);
	} while (!(cmd.response[0] & OCR_BUSY) && timeout--);

	if (timeout <= 0)
20084930:	903ffa26 	beq	r18,zero,2008491c <__flash_rwdata_start+0xfffe82d4>
		return UNUSABLE_ERR;

	mmc->version = MMC_VERSION_UNKNOWN;
	mmc->ocr = cmd.response[0];

	mmc->high_capacity = ((mmc->ocr & OCR_HCS) == OCR_HCS);
20084934:	1006d7ba 	srli	r3,r2,30
	} while (!(cmd.response[0] & OCR_BUSY) && timeout--);

	if (timeout <= 0)
		return UNUSABLE_ERR;

	mmc->version = MMC_VERSION_UNKNOWN;
20084938:	01000074 	movhi	r4,1
2008493c:	e1000a15 	stw	r4,40(fp)
	mmc->ocr = cmd.response[0];

	mmc->high_capacity = ((mmc->ocr & OCR_HCS) == OCR_HCS);
20084940:	18c0004c 	andi	r3,r3,1

	if (timeout <= 0)
		return UNUSABLE_ERR;

	mmc->version = MMC_VERSION_UNKNOWN;
	mmc->ocr = cmd.response[0];
20084944:	e0801315 	stw	r2,76(fp)

	mmc->high_capacity = ((mmc->ocr & OCR_HCS) == OCR_HCS);
20084948:	e0c00e15 	stw	r3,56(fp)
	mmc->rca = 0;
2008494c:	e0001e0d 	sth	zero,120(fp)
20084950:	003f7e06 	br	2008474c <__flash_rwdata_start+0xfffe8104>

20084954 <mmc_bread>:
	else
		mmc->has_init = 1;
	return err;
}

size_t mmc_bread(struct mmc *mmc, size_t start, size_t blkcnt, void *dst) {
20084954:	deffea04 	addi	sp,sp,-88
20084958:	dc800e15 	stw	r18,56(sp)
2008495c:	dfc01515 	stw	ra,84(sp)
20084960:	df001415 	stw	fp,80(sp)
20084964:	ddc01315 	stw	r23,76(sp)
20084968:	dd801215 	stw	r22,72(sp)
2008496c:	dd401115 	stw	r21,68(sp)
20084970:	dd001015 	stw	r20,64(sp)
20084974:	dcc00f15 	stw	r19,60(sp)
20084978:	dc400d15 	stw	r17,52(sp)
2008497c:	dc000c15 	stw	r16,48(sp)
20084980:	3025883a 	mov	r18,r6
	size_t cur, blocks_todo = blkcnt;

	if (blkcnt == 0)
20084984:	30004a26 	beq	r6,zero,20084ab0 <mmc_bread+0x15c>
		return 0;

	if ((start + blkcnt) > mmc->capacity / mmc->read_bl_len) {
20084988:	24002017 	ldw	r16,128(r4)
2008498c:	24c02317 	ldw	r19,140(r4)
20084990:	3169883a 	add	r20,r6,r5
20084994:	2023883a 	mov	r17,r4
20084998:	282d883a 	mov	r22,r5
2008499c:	9809883a 	mov	r4,r19
200849a0:	800b883a 	mov	r5,r16
200849a4:	3839883a 	mov	fp,r7
200849a8:	00867940 	call	20086794 <__udivsi3>
200849ac:	15003936 	bltu	r2,r20,20084a94 <mmc_bread+0x140>

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
200849b0:	88802417 	ldw	r2,144(r17)

static int mmc_set_blocklen(struct mmc *mmc, int len) {
	struct mmc_cmd cmd;

	cmd.cmdidx = MMC_CMD_SET_BLOCKLEN;
	cmd.resp_type = MMC_RSP_R1;
200849b4:	04c00544 	movi	r19,21
}

static int mmc_set_blocklen(struct mmc *mmc, int len) {
	struct mmc_cmd cmd;

	cmd.cmdidx = MMC_CMD_SET_BLOCKLEN;
200849b8:	00c00404 	movi	r3,16
200849bc:	d8c0010d 	sth	r3,4(sp)
	cmd.resp_type = MMC_RSP_R1;
200849c0:	dcc00215 	stw	r19,8(sp)
	cmd.cmdarg = len;
200849c4:	dc000315 	stw	r16,12(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
200849c8:	8809883a 	mov	r4,r17
200849cc:	d9400104 	addi	r5,sp,4
200849d0:	000d883a 	mov	r6,zero
200849d4:	103ee83a 	callr	r2
		printf("MMC: block number 0x%lx exceeds max(0x%lx) (%x, %x)\n", start + blkcnt,
				mmc->capacity / mmc->read_bl_len, mmc->capacity, mmc->read_bl_len);
		return 0;
	}

	if (mmc_set_blocklen(mmc, mmc->read_bl_len))
200849d8:	1000351e 	bne	r2,zero,20084ab0 <mmc_bread+0x15c>
200849dc:	88802017 	ldw	r2,128(r17)
200849e0:	902b883a 	mov	r21,r18
static int mmc_read_blocks(struct mmc *mmc, void *dst, size_t start,
		size_t blkcnt) {
	struct mmc_cmd cmd;
	struct mmc_data data;

	if (blkcnt > 1)
200849e4:	05c00044 	movi	r23,1
		cmd.cmdidx = MMC_CMD_READ_MULTIPLE_BLOCK;
200849e8:	05000484 	movi	r20,18

	if (mmc_set_blocklen(mmc, mmc->read_bl_len))
		return 0;

	do {
		cur = (blocks_todo > mmc->b_max) ? mmc->b_max : blocks_todo;
200849ec:	89002817 	ldw	r4,160(r17)
200849f0:	a821883a 	mov	r16,r21
200849f4:	2540012e 	bgeu	r4,r21,200849fc <mmc_bread+0xa8>
200849f8:	2021883a 	mov	r16,r4
static int mmc_read_blocks(struct mmc *mmc, void *dst, size_t start,
		size_t blkcnt) {
	struct mmc_cmd cmd;
	struct mmc_data data;

	if (blkcnt > 1)
200849fc:	bc003e2e 	bgeu	r23,r16,20084af8 <mmc_bread+0x1a4>
		cmd.cmdidx = MMC_CMD_READ_MULTIPLE_BLOCK;
20084a00:	dd00010d 	sth	r20,4(sp)
	else
		cmd.cmdidx = MMC_CMD_READ_SINGLE_BLOCK;

	if (mmc->high_capacity)
20084a04:	89000e17 	ldw	r4,56(r17)
20084a08:	20003626 	beq	r4,zero,20084ae4 <mmc_bread+0x190>
		cmd.cmdarg = start;
20084a0c:	dd800315 	stw	r22,12(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20084a10:	8a402417 	ldw	r9,144(r17)
	if (mmc->high_capacity)
		cmd.cmdarg = start;
	else
		cmd.cmdarg = start * mmc->read_bl_len;

	cmd.resp_type = MMC_RSP_R1;
20084a14:	dcc00215 	stw	r19,8(sp)

	data.dest = dst;
20084a18:	df000815 	stw	fp,32(sp)
	data.blocks = blkcnt;
20084a1c:	dc000a15 	stw	r16,40(sp)
	data.blocksize = mmc->read_bl_len;
20084a20:	d8800b15 	stw	r2,44(sp)
	data.flags = MMC_DATA_READ;
20084a24:	ddc00915 	stw	r23,36(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20084a28:	8809883a 	mov	r4,r17
20084a2c:	d9400104 	addi	r5,sp,4
20084a30:	d9800804 	addi	r6,sp,32
20084a34:	483ee83a 	callr	r9
	data.dest = dst;
	data.blocks = blkcnt;
	data.blocksize = mmc->read_bl_len;
	data.flags = MMC_DATA_READ;

	if (mmc_send_cmd(mmc, &cmd, &data))
20084a38:	10002d1e 	bne	r2,zero,20084af0 <mmc_bread+0x19c>
		return 0;

	if (blkcnt > 1) {
20084a3c:	bc000b2e 	bgeu	r23,r16,20084a6c <mmc_bread+0x118>
		cmd.cmdidx = MMC_CMD_STOP_TRANSMISSION;
20084a40:	00c00304 	movi	r3,12

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20084a44:	88802417 	ldw	r2,144(r17)

	if (mmc_send_cmd(mmc, &cmd, &data))
		return 0;

	if (blkcnt > 1) {
		cmd.cmdidx = MMC_CMD_STOP_TRANSMISSION;
20084a48:	d8c0010d 	sth	r3,4(sp)
		cmd.cmdarg = 0;
		cmd.resp_type = MMC_RSP_R1b;
20084a4c:	00c00744 	movi	r3,29
	if (mmc_send_cmd(mmc, &cmd, &data))
		return 0;

	if (blkcnt > 1) {
		cmd.cmdidx = MMC_CMD_STOP_TRANSMISSION;
		cmd.cmdarg = 0;
20084a50:	d8000315 	stw	zero,12(sp)
		cmd.resp_type = MMC_RSP_R1b;
20084a54:	d8c00215 	stw	r3,8(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20084a58:	8809883a 	mov	r4,r17
20084a5c:	d9400104 	addi	r5,sp,4
20084a60:	000d883a 	mov	r6,zero
20084a64:	103ee83a 	callr	r2

	if (blkcnt > 1) {
		cmd.cmdidx = MMC_CMD_STOP_TRANSMISSION;
		cmd.cmdarg = 0;
		cmd.resp_type = MMC_RSP_R1b;
		if (mmc_send_cmd(mmc, &cmd, NULL)) {
20084a68:	1000261e 	bne	r2,zero,20084b04 <mmc_bread+0x1b0>
	data.dest = dst;
	data.blocks = blkcnt;
	data.blocksize = mmc->read_bl_len;
	data.flags = MMC_DATA_READ;

	if (mmc_send_cmd(mmc, &cmd, &data))
20084a6c:	8005883a 	mov	r2,r16
		return 0;

	do {
		cur = (blocks_todo > mmc->b_max) ? mmc->b_max : blocks_todo;

		if (mmc_read_blocks(mmc, dst, start, cur) != cur)
20084a70:	80800f1e 	bne	r16,r2,20084ab0 <mmc_bread+0x15c>
			return 0;

		blocks_todo -= cur;
		start += cur;
		dst += cur * mmc->read_bl_len;
20084a74:	88802017 	ldw	r2,128(r17)
		cur = (blocks_todo > mmc->b_max) ? mmc->b_max : blocks_todo;

		if (mmc_read_blocks(mmc, dst, start, cur) != cur)
			return 0;

		blocks_todo -= cur;
20084a78:	ac2bc83a 	sub	r21,r21,r16
		start += cur;
20084a7c:	b42d883a 	add	r22,r22,r16
		dst += cur * mmc->read_bl_len;
20084a80:	80a1383a 	mul	r16,r16,r2
20084a84:	e439883a 	add	fp,fp,r16
	} while (blocks_todo > 0);
20084a88:	a83fd81e 	bne	r21,zero,200849ec <__flash_rwdata_start+0xfffe83a4>
20084a8c:	9005883a 	mov	r2,r18
20084a90:	00000806 	br	20084ab4 <mmc_bread+0x160>

	if (blkcnt == 0)
		return 0;

	if ((start + blkcnt) > mmc->capacity / mmc->read_bl_len) {
		printf("MMC: block number 0x%lx exceeds max(0x%lx) (%x, %x)\n", start + blkcnt,
20084a94:	01000034 	movhi	r4,0
20084a98:	2100b204 	addi	r4,r4,712
20084a9c:	dc000015 	stw	r16,0(sp)
20084aa0:	a00b883a 	mov	r5,r20
20084aa4:	100d883a 	mov	r6,r2
20084aa8:	980f883a 	mov	r7,r19
20084aac:	008a4680 	call	2008a468 <printf>
				mmc->capacity / mmc->read_bl_len, mmc->capacity, mmc->read_bl_len);
		return 0;
20084ab0:	0005883a 	mov	r2,zero
		start += cur;
		dst += cur * mmc->read_bl_len;
	} while (blocks_todo > 0);

	return blkcnt;
}
20084ab4:	dfc01517 	ldw	ra,84(sp)
20084ab8:	df001417 	ldw	fp,80(sp)
20084abc:	ddc01317 	ldw	r23,76(sp)
20084ac0:	dd801217 	ldw	r22,72(sp)
20084ac4:	dd401117 	ldw	r21,68(sp)
20084ac8:	dd001017 	ldw	r20,64(sp)
20084acc:	dcc00f17 	ldw	r19,60(sp)
20084ad0:	dc800e17 	ldw	r18,56(sp)
20084ad4:	dc400d17 	ldw	r17,52(sp)
20084ad8:	dc000c17 	ldw	r16,48(sp)
20084adc:	dec01604 	addi	sp,sp,88
20084ae0:	f800283a 	ret
		cmd.cmdidx = MMC_CMD_READ_SINGLE_BLOCK;

	if (mmc->high_capacity)
		cmd.cmdarg = start;
	else
		cmd.cmdarg = start * mmc->read_bl_len;
20084ae4:	1589383a 	mul	r4,r2,r22
20084ae8:	d9000315 	stw	r4,12(sp)
20084aec:	003fc806 	br	20084a10 <__flash_rwdata_start+0xfffe83c8>
	data.dest = dst;
	data.blocks = blkcnt;
	data.blocksize = mmc->read_bl_len;
	data.flags = MMC_DATA_READ;

	if (mmc_send_cmd(mmc, &cmd, &data))
20084af0:	0005883a 	mov	r2,zero
20084af4:	003fde06 	br	20084a70 <__flash_rwdata_start+0xfffe8428>
	struct mmc_data data;

	if (blkcnt > 1)
		cmd.cmdidx = MMC_CMD_READ_MULTIPLE_BLOCK;
	else
		cmd.cmdidx = MMC_CMD_READ_SINGLE_BLOCK;
20084af8:	00c00444 	movi	r3,17
20084afc:	d8c0010d 	sth	r3,4(sp)
20084b00:	003fc006 	br	20084a04 <__flash_rwdata_start+0xfffe83bc>
	if (blkcnt > 1) {
		cmd.cmdidx = MMC_CMD_STOP_TRANSMISSION;
		cmd.cmdarg = 0;
		cmd.resp_type = MMC_RSP_R1b;
		if (mmc_send_cmd(mmc, &cmd, NULL)) {
			printf("mmc fail to send stop cmd\n");
20084b04:	01000034 	movhi	r4,0
20084b08:	2100c004 	addi	r4,r4,768
20084b0c:	008a56c0 	call	2008a56c <puts>

	do {
		cur = (blocks_todo > mmc->b_max) ? mmc->b_max : blocks_todo;

		if (mmc_read_blocks(mmc, dst, start, cur) != cur)
			return 0;
20084b10:	0005883a 	mov	r2,zero
20084b14:	003fe706 	br	20084ab4 <__flash_rwdata_start+0xfffe846c>

20084b18 <print_mmcinfo>:
	} while (blocks_todo > 0);

	return blkcnt;
}

void print_mmcinfo(struct mmc *mmc) {
20084b18:	defffc04 	addi	sp,sp,-16
20084b1c:	dc000215 	stw	r16,8(sp)
20084b20:	2021883a 	mov	r16,r4
	printf("Device: %s\n\r", mmc->name);
20084b24:	01000034 	movhi	r4,0
20084b28:	2100cb04 	addi	r4,r4,812
20084b2c:	800b883a 	mov	r5,r16
	} while (blocks_todo > 0);

	return blkcnt;
}

void print_mmcinfo(struct mmc *mmc) {
20084b30:	dfc00315 	stw	ra,12(sp)
	printf("Device: %s\n\r", mmc->name);
20084b34:	008a4680 	call	2008a468 <printf>
	printf("Manufacturer ID: %x\n\r", mmc->cid[0] >> 24);
20084b38:	81401ac3 	ldbu	r5,107(r16)
20084b3c:	01000034 	movhi	r4,0
20084b40:	2100cf04 	addi	r4,r4,828
20084b44:	008a4680 	call	2008a468 <printf>
	printf("OEM: %x\n\r", (mmc->cid[0] >> 8) & 0xffff);
20084b48:	81401a17 	ldw	r5,104(r16)
20084b4c:	01000034 	movhi	r4,0
20084b50:	2100d504 	addi	r4,r4,852
20084b54:	280ad23a 	srli	r5,r5,8
20084b58:	297fffcc 	andi	r5,r5,65535
20084b5c:	008a4680 	call	2008a468 <printf>
	printf("Name: %c%c%c%c%c \n\r", mmc->cid[0] & 0xff, (mmc->cid[1] >> 24),
20084b60:	80801b17 	ldw	r2,108(r16)
20084b64:	81401a03 	ldbu	r5,104(r16)
20084b68:	01000034 	movhi	r4,0
			(mmc->cid[1] >> 16) & 0xff, (mmc->cid[1] >> 8) & 0xff,
20084b6c:	1006d23a 	srli	r3,r2,8
20084b70:	100ed43a 	srli	r7,r2,16

void print_mmcinfo(struct mmc *mmc) {
	printf("Device: %s\n\r", mmc->name);
	printf("Manufacturer ID: %x\n\r", mmc->cid[0] >> 24);
	printf("OEM: %x\n\r", (mmc->cid[0] >> 8) & 0xffff);
	printf("Name: %c%c%c%c%c \n\r", mmc->cid[0] & 0xff, (mmc->cid[1] >> 24),
20084b74:	100cd63a 	srli	r6,r2,24
20084b78:	18c03fcc 	andi	r3,r3,255
20084b7c:	10803fcc 	andi	r2,r2,255
20084b80:	39c03fcc 	andi	r7,r7,255
20084b84:	d8c00015 	stw	r3,0(sp)
20084b88:	2100d804 	addi	r4,r4,864
20084b8c:	d8800115 	stw	r2,4(sp)
20084b90:	008a4680 	call	2008a468 <printf>
			(mmc->cid[1] >> 16) & 0xff, (mmc->cid[1] >> 8) & 0xff,
			mmc->cid[1] & 0xff);

	printf("Tran Speed: %d\n\r", mmc->tran_speed);
20084b94:	81401f17 	ldw	r5,124(r16)
20084b98:	01000034 	movhi	r4,0
20084b9c:	2100dd04 	addi	r4,r4,884
20084ba0:	008a4680 	call	2008a468 <printf>
	printf("Rd Block Len: %d\n\r", mmc->read_bl_len);
20084ba4:	81402017 	ldw	r5,128(r16)
20084ba8:	01000034 	movhi	r4,0
20084bac:	2100e204 	addi	r4,r4,904
20084bb0:	008a4680 	call	2008a468 <printf>

	printf("%s version %d.%d\n\r", IS_SD(mmc) ? "SD" : "MMC",
20084bb4:	81c00a17 	ldw	r7,40(r16)
20084bb8:	388000ac 	andhi	r2,r7,2
20084bbc:	10001b1e 	bne	r2,zero,20084c2c <print_mmcinfo+0x114>
20084bc0:	01400034 	movhi	r5,0
20084bc4:	2940c804 	addi	r5,r5,800
			(mmc->version >> 4) & 0xf, mmc->version & 0xf);
20084bc8:	380cd13a 	srli	r6,r7,4
			mmc->cid[1] & 0xff);

	printf("Tran Speed: %d\n\r", mmc->tran_speed);
	printf("Rd Block Len: %d\n\r", mmc->read_bl_len);

	printf("%s version %d.%d\n\r", IS_SD(mmc) ? "SD" : "MMC",
20084bcc:	01000034 	movhi	r4,0
20084bd0:	2100e704 	addi	r4,r4,924
20084bd4:	318003cc 	andi	r6,r6,15
20084bd8:	39c003cc 	andi	r7,r7,15
20084bdc:	008a4680 	call	2008a468 <printf>
			(mmc->version >> 4) & 0xf, mmc->version & 0xf);

	printf("High Capacity: %s\n\r", mmc->high_capacity ? "Yes" : "No");
20084be0:	80800e17 	ldw	r2,56(r16)
20084be4:	1000141e 	bne	r2,zero,20084c38 <print_mmcinfo+0x120>
20084be8:	01400034 	movhi	r5,0
20084bec:	2940ca04 	addi	r5,r5,808
20084bf0:	01000034 	movhi	r4,0
20084bf4:	2100ec04 	addi	r4,r4,944
20084bf8:	008a4680 	call	2008a468 <printf>
	printf("Capacity: %lu MB\n\r", mmc->capacity / 1024 / 1024);
20084bfc:	81402317 	ldw	r5,140(r16)
20084c00:	01000034 	movhi	r4,0
20084c04:	2100f104 	addi	r4,r4,964
20084c08:	280ad53a 	srli	r5,r5,20
20084c0c:	008a4680 	call	2008a468 <printf>

	printf("Bus Width: %d-bit\n\r", mmc->bus_width);
20084c10:	81400f17 	ldw	r5,60(r16)
20084c14:	01000034 	movhi	r4,0
20084c18:	2100f604 	addi	r4,r4,984
}
20084c1c:	dfc00317 	ldw	ra,12(sp)
20084c20:	dc000217 	ldw	r16,8(sp)
20084c24:	dec00404 	addi	sp,sp,16
			(mmc->version >> 4) & 0xf, mmc->version & 0xf);

	printf("High Capacity: %s\n\r", mmc->high_capacity ? "Yes" : "No");
	printf("Capacity: %lu MB\n\r", mmc->capacity / 1024 / 1024);

	printf("Bus Width: %d-bit\n\r", mmc->bus_width);
20084c28:	008a4681 	jmpi	2008a468 <printf>
			mmc->cid[1] & 0xff);

	printf("Tran Speed: %d\n\r", mmc->tran_speed);
	printf("Rd Block Len: %d\n\r", mmc->read_bl_len);

	printf("%s version %d.%d\n\r", IS_SD(mmc) ? "SD" : "MMC",
20084c2c:	01400034 	movhi	r5,0
20084c30:	2940c704 	addi	r5,r5,796
20084c34:	003fe406 	br	20084bc8 <__flash_rwdata_start+0xfffe8580>
			(mmc->version >> 4) & 0xf, mmc->version & 0xf);

	printf("High Capacity: %s\n\r", mmc->high_capacity ? "Yes" : "No");
20084c38:	01400034 	movhi	r5,0
20084c3c:	2940c904 	addi	r5,r5,804
20084c40:	003feb06 	br	20084bf0 <__flash_rwdata_start+0xfffe85a8>

20084c44 <ocsdc_set_ios>:
}

static void ocsdc_set_ios(struct mmc *mmc)
{
	/* Support only 4 bit if */
	ocsdc_set_buswidth(mmc->priv, mmc->bus_width);
20084c44:	20800f17 	ldw	r2,60(r4)

	return 0;
}

static void ocsdc_set_ios(struct mmc *mmc)
{
20084c48:	defffb04 	addi	sp,sp,-20
20084c4c:	dfc00415 	stw	ra,16(sp)
20084c50:	dcc00315 	stw	r19,12(sp)
20084c54:	dc800215 	stw	r18,8(sp)
20084c58:	dc400115 	stw	r17,4(sp)
20084c5c:	dc000015 	stw	r16,0(sp)
{
	IOWR(dev->iobase, offset, data);
}

static void ocsdc_set_buswidth(struct ocsdc * dev, uint width) {
	if (width == 4)
20084c60:	00c00104 	movi	r3,4
}

static void ocsdc_set_ios(struct mmc *mmc)
{
	/* Support only 4 bit if */
	ocsdc_set_buswidth(mmc->priv, mmc->bus_width);
20084c64:	21400817 	ldw	r5,32(r4)
{
	IOWR(dev->iobase, offset, data);
}

static void ocsdc_set_buswidth(struct ocsdc * dev, uint width) {
	if (width == 4)
20084c68:	10c02d26 	beq	r2,r3,20084d20 <ocsdc_set_ios+0xdc>
		ocsdc_write(dev, OCSDC_CONTROL, 1);
	else if (width == 1)
20084c6c:	00c00044 	movi	r3,1
20084c70:	10c02f26 	beq	r2,r3,20084d30 <ocsdc_set_ios+0xec>
{
	/* Support only 4 bit if */
	ocsdc_set_buswidth(mmc->priv, mmc->bus_width);

	/* Set clock speed */
	if (mmc->clock)
20084c74:	24001017 	ldw	r16,64(r4)
20084c78:	8000071e 	bne	r16,zero,20084c98 <ocsdc_set_ios+0x54>
		ocsdc_set_clock(mmc->priv, mmc->clock);
}
20084c7c:	dfc00417 	ldw	ra,16(sp)
20084c80:	dcc00317 	ldw	r19,12(sp)
20084c84:	dc800217 	ldw	r18,8(sp)
20084c88:	dc400117 	ldw	r17,4(sp)
20084c8c:	dc000017 	ldw	r16,0(sp)
20084c90:	dec00504 	addi	sp,sp,20
20084c94:	f800283a 	ret
	/* Support only 4 bit if */
	ocsdc_set_buswidth(mmc->priv, mmc->bus_width);

	/* Set clock speed */
	if (mmc->clock)
		ocsdc_set_clock(mmc->priv, mmc->clock);
20084c98:	24400817 	ldw	r17,32(r4)
}

/* Set clock prescalar value based on the required clock in HZ */
static void ocsdc_set_clock(struct ocsdc * dev, uint clock)
{
	int clk_div = (clock == dev->clk_freq)? 0x00000080 : dev->clk_freq / (2.0 * clock) - 1;
20084c9c:	89000117 	ldw	r4,4(r17)
20084ca0:	81002626 	beq	r16,r4,20084d3c <ocsdc_set_ios+0xf8>
20084ca4:	008930c0 	call	2008930c <__floatsidf>
20084ca8:	8009883a 	mov	r4,r16
20084cac:	1027883a 	mov	r19,r2
20084cb0:	1825883a 	mov	r18,r3
20084cb4:	00893dc0 	call	200893dc <__floatunsidf>
20084cb8:	1009883a 	mov	r4,r2
20084cbc:	180b883a 	mov	r5,r3
20084cc0:	100d883a 	mov	r6,r2
20084cc4:	180f883a 	mov	r7,r3
20084cc8:	00871280 	call	20087128 <__adddf3>
20084ccc:	9809883a 	mov	r4,r19
20084cd0:	900b883a 	mov	r5,r18
20084cd4:	100d883a 	mov	r6,r2
20084cd8:	180f883a 	mov	r7,r3
20084cdc:	00879c40 	call	200879c4 <__divdf3>
20084ce0:	1009883a 	mov	r4,r2
20084ce4:	180b883a 	mov	r5,r3
20084ce8:	000d883a 	mov	r6,zero
20084cec:	01cffc34 	movhi	r7,16368
20084cf0:	00889b40 	call	200889b4 <__subdf3>
20084cf4:	1009883a 	mov	r4,r2
20084cf8:	180b883a 	mov	r5,r3
20084cfc:	00892840 	call	20089284 <__fixdfsi>
	return IORD(dev->iobase, offset);
}

static inline void ocsdc_write(struct ocsdc *dev, int offset, uint32_t data)
{
	IOWR(dev->iobase, offset, data);
20084d00:	88c00017 	ldw	r3,0(r17)
20084d04:	01000044 	movi	r4,1
20084d08:	19002835 	stwio	r4,160(r3)
20084d0c:	88c00017 	ldw	r3,0(r17)
20084d10:	18802435 	stwio	r2,144(r3)
20084d14:	88800017 	ldw	r2,0(r17)
20084d18:	10002835 	stwio	zero,160(r2)
20084d1c:	003fd706 	br	20084c7c <__flash_rwdata_start+0xfffe8634>
20084d20:	28800017 	ldw	r2,0(r5)
20084d24:	00c00044 	movi	r3,1
20084d28:	10c01c35 	stwio	r3,112(r2)
20084d2c:	003fd106 	br	20084c74 <__flash_rwdata_start+0xfffe862c>
20084d30:	28800017 	ldw	r2,0(r5)
20084d34:	10001c35 	stwio	zero,112(r2)
20084d38:	003fce06 	br	20084c74 <__flash_rwdata_start+0xfffe862c>
}

/* Set clock prescalar value based on the required clock in HZ */
static void ocsdc_set_clock(struct ocsdc * dev, uint clock)
{
	int clk_div = (clock == dev->clk_freq)? 0x00000080 : dev->clk_freq / (2.0 * clock) - 1;
20084d3c:	00802004 	movi	r2,128
20084d40:	003fef06 	br	20084d00 <__flash_rwdata_start+0xfffe86b8>

20084d44 <ocsdc_send_cmd>:
	//printf("ocsdc_setup_read: addr: %x\n", (uint32_t)data->dest);

}

static int ocsdc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd, struct mmc_data *data)
{
20084d44:	defffa04 	addi	sp,sp,-24
	struct ocsdc * dev = mmc->priv;

	int command = (cmd->cmdidx << 8);
	if (cmd->resp_type & MMC_RSP_PRESENT) {
20084d48:	28800117 	ldw	r2,4(r5)
	//printf("ocsdc_setup_read: addr: %x\n", (uint32_t)data->dest);

}

static int ocsdc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd, struct mmc_data *data)
{
20084d4c:	dc000115 	stw	r16,4(sp)
	struct ocsdc * dev = mmc->priv;

	int command = (cmd->cmdidx << 8);
20084d50:	2c00000b 	ldhu	r16,0(r5)
	//printf("ocsdc_setup_read: addr: %x\n", (uint32_t)data->dest);

}

static int ocsdc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd, struct mmc_data *data)
{
20084d54:	dc800315 	stw	r18,12(sp)
20084d58:	dc400215 	stw	r17,8(sp)
20084d5c:	dfc00515 	stw	ra,20(sp)
20084d60:	dcc00415 	stw	r19,16(sp)
	struct ocsdc * dev = mmc->priv;

	int command = (cmd->cmdidx << 8);
	if (cmd->resp_type & MMC_RSP_PRESENT) {
20084d64:	10c0004c 	andi	r3,r2,1
	//printf("ocsdc_setup_read: addr: %x\n", (uint32_t)data->dest);

}

static int ocsdc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd, struct mmc_data *data)
{
20084d68:	2825883a 	mov	r18,r5
	struct ocsdc * dev = mmc->priv;
20084d6c:	24400817 	ldw	r17,32(r4)

	int command = (cmd->cmdidx << 8);
20084d70:	8020923a 	slli	r16,r16,8
	if (cmd->resp_type & MMC_RSP_PRESENT) {
20084d74:	18000326 	beq	r3,zero,20084d84 <ocsdc_send_cmd+0x40>
		if (cmd->resp_type & MMC_RSP_136)
20084d78:	10c0008c 	andi	r3,r2,2
20084d7c:	18003c26 	beq	r3,zero,20084e70 <ocsdc_send_cmd+0x12c>
			command |= 2;
20084d80:	84000094 	ori	r16,r16,2
		else {
			command |= 1;
		}
	}
	if (cmd->resp_type & MMC_RSP_BUSY)
20084d84:	10c0020c 	andi	r3,r2,8
20084d88:	18000126 	beq	r3,zero,20084d90 <ocsdc_send_cmd+0x4c>
		command |= (1 << 2);
20084d8c:	84000114 	ori	r16,r16,4
	if (cmd->resp_type & MMC_RSP_CRC)
20084d90:	10c0010c 	andi	r3,r2,4
20084d94:	18000126 	beq	r3,zero,20084d9c <ocsdc_send_cmd+0x58>
		command |= (1 << 3);
20084d98:	84000214 	ori	r16,r16,8
	if (cmd->resp_type & MMC_RSP_OPCODE)
20084d9c:	1080040c 	andi	r2,r2,16
20084da0:	10000126 	beq	r2,zero,20084da8 <ocsdc_send_cmd+0x64>
		command |= (1 << 4);
20084da4:	84000414 	ori	r16,r16,16

	if (data && ((data->flags & MMC_DATA_READ) || ((data->flags & MMC_DATA_WRITE))) && data->blocks) {
20084da8:	30000326 	beq	r6,zero,20084db8 <ocsdc_send_cmd+0x74>
20084dac:	30800117 	ldw	r2,4(r6)
20084db0:	10c000cc 	andi	r3,r2,3
20084db4:	1800161e 	bne	r3,zero,20084e10 <ocsdc_send_cmd+0xcc>
	return IORD(dev->iobase, offset);
}

static inline void ocsdc_write(struct ocsdc *dev, int offset, uint32_t data)
{
	IOWR(dev->iobase, offset, data);
20084db8:	88800017 	ldw	r2,0(r17)
20084dbc:	14000435 	stwio	r16,16(r2)
20084dc0:	88800017 	ldw	r2,0(r17)
20084dc4:	90c00217 	ldw	r3,8(r18)
20084dc8:	10c00035 	stwio	r3,0(r2)
20084dcc:	89000017 	ldw	r4,0(r17)
	alt_dcache_flush(start, end-start);
}

static inline uint32_t ocsdc_read(struct ocsdc *dev, int offset)
{
	return IORD(dev->iobase, offset);
20084dd0:	21003404 	addi	r4,r4,208
20084dd4:	00000106 	br	20084ddc <ocsdc_send_cmd+0x98>
			ocsdc_write(dev, OCSDC_CMD_INT_STATUS, 0);
			OCSDC_PRINT(("ocsdc_finish: cmd %d, status %x\n\r", cmd->cmdidx, r2));
			retval = -1;
			break;
		}
		else if (r2 & OCSDC_CMD_INT_STATUS_CC) {
20084dd8:	1800271e 	bne	r3,zero,20084e78 <ocsdc_send_cmd+0x134>
	alt_dcache_flush(start, end-start);
}

static inline uint32_t ocsdc_read(struct ocsdc *dev, int offset)
{
	return IORD(dev->iobase, offset);
20084ddc:	20c00037 	ldwio	r3,0(r4)

	int retval = 0;
	while (1) {
		int r2 = ocsdc_read(dev, OCSDC_CMD_INT_STATUS);
		//printf("ocsdc_finish: cmd %d, status %x\n", cmd->cmdidx, r2);
		if (r2 & OCSDC_CMD_INT_STATUS_EI) {
20084de0:	1880008c 	andi	r2,r3,2
			ocsdc_write(dev, OCSDC_CMD_INT_STATUS, 0);
			OCSDC_PRINT(("ocsdc_finish: cmd %d, status %x\n\r", cmd->cmdidx, r2));
			retval = -1;
			break;
		}
		else if (r2 & OCSDC_CMD_INT_STATUS_CC) {
20084de4:	18c0004c 	andi	r3,r3,1

	int retval = 0;
	while (1) {
		int r2 = ocsdc_read(dev, OCSDC_CMD_INT_STATUS);
		//printf("ocsdc_finish: cmd %d, status %x\n", cmd->cmdidx, r2);
		if (r2 & OCSDC_CMD_INT_STATUS_EI) {
20084de8:	103ffb26 	beq	r2,zero,20084dd8 <__flash_rwdata_start+0xfffe8790>
	return IORD(dev->iobase, offset);
}

static inline void ocsdc_write(struct ocsdc *dev, int offset, uint32_t data)
{
	IOWR(dev->iobase, offset, data);
20084dec:	20000035 	stwio	zero,0(r4)
	OCSDC_PRINT(("ocsdc_send_cmd %04x\n\r", command));

	ocsdc_write(dev, OCSDC_COMMAND, command);
	ocsdc_write(dev, OCSDC_ARGUMENT, cmd->cmdarg);

	if (ocsdc_finish(dev, cmd) < 0) return -1;
20084df0:	00bfffc4 	movi	r2,-1
		bool ret = ocsdc_data_finish(dev);

		return ret;
	}
	else return 0;
}
20084df4:	dfc00517 	ldw	ra,20(sp)
20084df8:	dcc00417 	ldw	r19,16(sp)
20084dfc:	dc800317 	ldw	r18,12(sp)
20084e00:	dc400217 	ldw	r17,8(sp)
20084e04:	dc000117 	ldw	r16,4(sp)
20084e08:	dec00604 	addi	sp,sp,24
20084e0c:	f800283a 	ret
	if (cmd->resp_type & MMC_RSP_CRC)
		command |= (1 << 3);
	if (cmd->resp_type & MMC_RSP_OPCODE)
		command |= (1 << 4);

	if (data && ((data->flags & MMC_DATA_READ) || ((data->flags & MMC_DATA_WRITE))) && data->blocks) {
20084e10:	30c00217 	ldw	r3,8(r6)
20084e14:	183fe826 	beq	r3,zero,20084db8 <__flash_rwdata_start+0xfffe8770>
		if (data->flags & MMC_DATA_READ)
20084e18:	1100004c 	andi	r4,r2,1
			command |= (1 << 5);
		if (data->flags & MMC_DATA_WRITE)
20084e1c:	1080008c 	andi	r2,r2,2
		command |= (1 << 3);
	if (cmd->resp_type & MMC_RSP_OPCODE)
		command |= (1 << 4);

	if (data && ((data->flags & MMC_DATA_READ) || ((data->flags & MMC_DATA_WRITE))) && data->blocks) {
		if (data->flags & MMC_DATA_READ)
20084e20:	2000321e 	bne	r4,zero,20084eec <ocsdc_send_cmd+0x1a8>
			command |= (1 << 5);
		if (data->flags & MMC_DATA_WRITE)
20084e24:	10000126 	beq	r2,zero,20084e2c <ocsdc_send_cmd+0xe8>
			command |= (1 << 6);
20084e28:	84001014 	ori	r16,r16,64
	if (data->flags & MMC_DATA_READ) {
		flush_dcache_range(data->dest, data->dest+data->blocksize*data->blocks);
		ocsdc_write(dev, OCSDC_DST_SRC_ADDR, (uint32_t)data->dest);
	}
	else {
		flush_dcache_range((void *)data->src, (void *)data->src+data->blocksize*data->blocks);
20084e2c:	31400317 	ldw	r5,12(r6)
};

#define OCSDC_PRINT(x)	//DEBUG(x);

void flush_dcache_range(void * start, void * end) {
	alt_dcache_flush(start, end-start);
20084e30:	31000017 	ldw	r4,0(r6)
20084e34:	d9800015 	stw	r6,0(sp)
20084e38:	194b383a 	mul	r5,r3,r5
20084e3c:	00972a40 	call	200972a4 <alt_dcache_flush>
	return IORD(dev->iobase, offset);
}

static inline void ocsdc_write(struct ocsdc *dev, int offset, uint32_t data)
{
	IOWR(dev->iobase, offset, data);
20084e40:	d9800017 	ldw	r6,0(sp)
20084e44:	88800017 	ldw	r2,0(r17)
20084e48:	30c00017 	ldw	r3,0(r6)
20084e4c:	10c06035 	stwio	r3,384(r2)
20084e50:	88800017 	ldw	r2,0(r17)
20084e54:	30c00317 	ldw	r3,12(r6)
20084e58:	10c04435 	stwio	r3,272(r2)
	else {
		flush_dcache_range((void *)data->src, (void *)data->src+data->blocksize*data->blocks);
		ocsdc_write(dev, OCSDC_DST_SRC_ADDR, (uint32_t)data->src);
	}
	ocsdc_write(dev, OCSDC_BLOCK_SIZE, data->blocksize);
	ocsdc_write(dev, OCSDC_BLOCK_COUNT, data->blocks-1);
20084e5c:	30800217 	ldw	r2,8(r6)
	return IORD(dev->iobase, offset);
}

static inline void ocsdc_write(struct ocsdc *dev, int offset, uint32_t data)
{
	IOWR(dev->iobase, offset, data);
20084e60:	88c00017 	ldw	r3,0(r17)
	else {
		flush_dcache_range((void *)data->src, (void *)data->src+data->blocksize*data->blocks);
		ocsdc_write(dev, OCSDC_DST_SRC_ADDR, (uint32_t)data->src);
	}
	ocsdc_write(dev, OCSDC_BLOCK_SIZE, data->blocksize);
	ocsdc_write(dev, OCSDC_BLOCK_COUNT, data->blocks-1);
20084e64:	10bfffc4 	addi	r2,r2,-1
	return IORD(dev->iobase, offset);
}

static inline void ocsdc_write(struct ocsdc *dev, int offset, uint32_t data)
{
	IOWR(dev->iobase, offset, data);
20084e68:	18804835 	stwio	r2,288(r3)
20084e6c:	003fd206 	br	20084db8 <__flash_rwdata_start+0xfffe8770>
	int command = (cmd->cmdidx << 8);
	if (cmd->resp_type & MMC_RSP_PRESENT) {
		if (cmd->resp_type & MMC_RSP_136)
			command |= 2;
		else {
			command |= 1;
20084e70:	84000054 	ori	r16,r16,1
20084e74:	003fc306 	br	20084d84 <__flash_rwdata_start+0xfffe873c>
	return IORD(dev->iobase, offset);
}

static inline void ocsdc_write(struct ocsdc *dev, int offset, uint32_t data)
{
	IOWR(dev->iobase, offset, data);
20084e78:	20000035 	stwio	zero,0(r4)
	alt_dcache_flush(start, end-start);
}

static inline uint32_t ocsdc_read(struct ocsdc *dev, int offset)
{
	return IORD(dev->iobase, offset);
20084e7c:	88c00017 	ldw	r3,0(r17)
20084e80:	19000837 	ldwio	r4,32(r3)
		else if (r2 & OCSDC_CMD_INT_STATUS_CC) {
			//clear interrupts
			ocsdc_write(dev, OCSDC_CMD_INT_STATUS, 0);
			//get response
			cmd->response[0] = ocsdc_read(dev, OCSDC_RESPONSE_1);
			if (cmd->resp_type & MMC_RSP_136) {
20084e84:	90c00117 	ldw	r3,4(r18)
		}
		else if (r2 & OCSDC_CMD_INT_STATUS_CC) {
			//clear interrupts
			ocsdc_write(dev, OCSDC_CMD_INT_STATUS, 0);
			//get response
			cmd->response[0] = ocsdc_read(dev, OCSDC_RESPONSE_1);
20084e88:	91000315 	stw	r4,12(r18)
			if (cmd->resp_type & MMC_RSP_136) {
20084e8c:	18c0008c 	andi	r3,r3,2
20084e90:	18000c1e 	bne	r3,zero,20084ec4 <ocsdc_send_cmd+0x180>

	ocsdc_write(dev, OCSDC_COMMAND, command);
	ocsdc_write(dev, OCSDC_ARGUMENT, cmd->cmdarg);

	if (ocsdc_finish(dev, cmd) < 0) return -1;
	if (data && data->blocks) {
20084e94:	303fd726 	beq	r6,zero,20084df4 <__flash_rwdata_start+0xfffe87ac>
20084e98:	30c00217 	ldw	r3,8(r6)
20084e9c:	183fd526 	beq	r3,zero,20084df4 <__flash_rwdata_start+0xfffe87ac>
20084ea0:	89000017 	ldw	r4,0(r17)
	alt_dcache_flush(start, end-start);
}

static inline uint32_t ocsdc_read(struct ocsdc *dev, int offset)
{
	return IORD(dev->iobase, offset);
20084ea4:	21003c04 	addi	r4,r4,240
20084ea8:	20800037 	ldwio	r2,0(r4)
}

static int ocsdc_data_finish(struct ocsdc * dev) {
	int status;

    while ((status = ocsdc_read(dev, OCSDC_DAT_INT_STATUS)) == 0);
20084eac:	103ffe26 	beq	r2,zero,20084ea8 <__flash_rwdata_start+0xfffe8860>
	return IORD(dev->iobase, offset);
}

static inline void ocsdc_write(struct ocsdc *dev, int offset, uint32_t data)
{
	IOWR(dev->iobase, offset, data);
20084eb0:	20000035 	stwio	zero,0(r4)
	int status;

    while ((status = ocsdc_read(dev, OCSDC_DAT_INT_STATUS)) == 0);
    ocsdc_write(dev, OCSDC_DAT_INT_STATUS, 0);

    if (status & SDCMSC_DAT_INT_STATUS_TRS) {
20084eb4:	1080004c 	andi	r2,r2,1
20084eb8:	1080005c 	xori	r2,r2,1
20084ebc:	0085c83a 	sub	r2,zero,r2
20084ec0:	003fcc06 	br	20084df4 <__flash_rwdata_start+0xfffe87ac>
	alt_dcache_flush(start, end-start);
}

static inline uint32_t ocsdc_read(struct ocsdc *dev, int offset)
{
	return IORD(dev->iobase, offset);
20084ec4:	88c00017 	ldw	r3,0(r17)
20084ec8:	18c00c37 	ldwio	r3,48(r3)
			//clear interrupts
			ocsdc_write(dev, OCSDC_CMD_INT_STATUS, 0);
			//get response
			cmd->response[0] = ocsdc_read(dev, OCSDC_RESPONSE_1);
			if (cmd->resp_type & MMC_RSP_136) {
				cmd->response[1] = ocsdc_read(dev, OCSDC_RESPONSE_2);
20084ecc:	90c00415 	stw	r3,16(r18)
	alt_dcache_flush(start, end-start);
}

static inline uint32_t ocsdc_read(struct ocsdc *dev, int offset)
{
	return IORD(dev->iobase, offset);
20084ed0:	88c00017 	ldw	r3,0(r17)
20084ed4:	18c01037 	ldwio	r3,64(r3)
			ocsdc_write(dev, OCSDC_CMD_INT_STATUS, 0);
			//get response
			cmd->response[0] = ocsdc_read(dev, OCSDC_RESPONSE_1);
			if (cmd->resp_type & MMC_RSP_136) {
				cmd->response[1] = ocsdc_read(dev, OCSDC_RESPONSE_2);
				cmd->response[2] = ocsdc_read(dev, OCSDC_RESPONSE_3);
20084ed8:	90c00515 	stw	r3,20(r18)
	alt_dcache_flush(start, end-start);
}

static inline uint32_t ocsdc_read(struct ocsdc *dev, int offset)
{
	return IORD(dev->iobase, offset);
20084edc:	88c00017 	ldw	r3,0(r17)
20084ee0:	18c01437 	ldwio	r3,80(r3)
			//get response
			cmd->response[0] = ocsdc_read(dev, OCSDC_RESPONSE_1);
			if (cmd->resp_type & MMC_RSP_136) {
				cmd->response[1] = ocsdc_read(dev, OCSDC_RESPONSE_2);
				cmd->response[2] = ocsdc_read(dev, OCSDC_RESPONSE_3);
				cmd->response[3] = ocsdc_read(dev, OCSDC_RESPONSE_4);
20084ee4:	90c00615 	stw	r3,24(r18)
20084ee8:	003fea06 	br	20084e94 <__flash_rwdata_start+0xfffe884c>
	if (cmd->resp_type & MMC_RSP_OPCODE)
		command |= (1 << 4);

	if (data && ((data->flags & MMC_DATA_READ) || ((data->flags & MMC_DATA_WRITE))) && data->blocks) {
		if (data->flags & MMC_DATA_READ)
			command |= (1 << 5);
20084eec:	84c00814 	ori	r19,r16,32
		if (data->flags & MMC_DATA_WRITE)
20084ef0:	10000126 	beq	r2,zero,20084ef8 <ocsdc_send_cmd+0x1b4>
			command |= (1 << 6);
20084ef4:	84c01814 	ori	r19,r16,96

static void ocsdc_setup_data_xfer(struct ocsdc * dev, struct mmc_cmd *cmd, struct mmc_data *data) {

	//invalidate cache
	if (data->flags & MMC_DATA_READ) {
		flush_dcache_range(data->dest, data->dest+data->blocksize*data->blocks);
20084ef8:	31400317 	ldw	r5,12(r6)
};

#define OCSDC_PRINT(x)	//DEBUG(x);

void flush_dcache_range(void * start, void * end) {
	alt_dcache_flush(start, end-start);
20084efc:	31000017 	ldw	r4,0(r6)
20084f00:	d9800015 	stw	r6,0(sp)
20084f04:	194b383a 	mul	r5,r3,r5
20084f08:	00972a40 	call	200972a4 <alt_dcache_flush>
	return IORD(dev->iobase, offset);
}

static inline void ocsdc_write(struct ocsdc *dev, int offset, uint32_t data)
{
	IOWR(dev->iobase, offset, data);
20084f0c:	d9800017 	ldw	r6,0(sp)
20084f10:	88800017 	ldw	r2,0(r17)
20084f14:	30c00017 	ldw	r3,0(r6)
20084f18:	10c06035 	stwio	r3,384(r2)
20084f1c:	9821883a 	mov	r16,r19
20084f20:	003fcb06 	br	20084e50 <__flash_rwdata_start+0xfffe8808>

20084f24 <ocsdc_init>:
	else return 0;
}

/* Initialize ocsdc controller */
static int ocsdc_init(struct mmc *mmc)
{
20084f24:	defffb04 	addi	sp,sp,-20
20084f28:	dc000015 	stw	r16,0(sp)
	struct ocsdc * dev = mmc->priv;
20084f2c:	24000817 	ldw	r16,32(r4)
	else return 0;
}

/* Initialize ocsdc controller */
static int ocsdc_init(struct mmc *mmc)
{
20084f30:	dfc00415 	stw	ra,16(sp)
20084f34:	dcc00315 	stw	r19,12(sp)
	return IORD(dev->iobase, offset);
}

static inline void ocsdc_write(struct ocsdc *dev, int offset, uint32_t data)
{
	IOWR(dev->iobase, offset, data);
20084f38:	80800017 	ldw	r2,0(r16)
	else return 0;
}

/* Initialize ocsdc controller */
static int ocsdc_init(struct mmc *mmc)
{
20084f3c:	dc800215 	stw	r18,8(sp)
20084f40:	dc400115 	stw	r17,4(sp)
	return IORD(dev->iobase, offset);
}

static inline void ocsdc_write(struct ocsdc *dev, int offset, uint32_t data)
{
	IOWR(dev->iobase, offset, data);
20084f44:	00dfffc4 	movi	r3,32767
20084f48:	10c02035 	stwio	r3,128(r2)
20084f4c:	80800017 	ldw	r2,0(r16)
20084f50:	10003835 	stwio	zero,224(r2)
20084f54:	80800017 	ldw	r2,0(r16)
20084f58:	10004035 	stwio	zero,256(r2)
20084f5c:	80800017 	ldw	r2,0(r16)
20084f60:	10003435 	stwio	zero,208(r2)
20084f64:	80800017 	ldw	r2,0(r16)
20084f68:	10003c35 	stwio	zero,240(r2)
	ocsdc_write(dev, OCSDC_DAT_INT_ENABLE, 0);
	//clear all interrupts
	ocsdc_write(dev, OCSDC_CMD_INT_STATUS, 0);
	ocsdc_write(dev, OCSDC_DAT_INT_STATUS, 0);
	//set clock to maximum (devide by 2)
	ocsdc_set_clock(dev, dev->clk_freq/2);
20084f6c:	81000117 	ldw	r4,4(r16)
20084f70:	2022d7fa 	srli	r17,r4,31
20084f74:	8923883a 	add	r17,r17,r4
20084f78:	8823d07a 	srai	r17,r17,1
}

/* Set clock prescalar value based on the required clock in HZ */
static void ocsdc_set_clock(struct ocsdc * dev, uint clock)
{
	int clk_div = (clock == dev->clk_freq)? 0x00000080 : dev->clk_freq / (2.0 * clock) - 1;
20084f7c:	89002626 	beq	r17,r4,20085018 <ocsdc_init+0xf4>
20084f80:	008930c0 	call	2008930c <__floatsidf>
20084f84:	8809883a 	mov	r4,r17
20084f88:	1027883a 	mov	r19,r2
20084f8c:	1825883a 	mov	r18,r3
20084f90:	00893dc0 	call	200893dc <__floatunsidf>
20084f94:	1009883a 	mov	r4,r2
20084f98:	180b883a 	mov	r5,r3
20084f9c:	100d883a 	mov	r6,r2
20084fa0:	180f883a 	mov	r7,r3
20084fa4:	00871280 	call	20087128 <__adddf3>
20084fa8:	9809883a 	mov	r4,r19
20084fac:	900b883a 	mov	r5,r18
20084fb0:	100d883a 	mov	r6,r2
20084fb4:	180f883a 	mov	r7,r3
20084fb8:	00879c40 	call	200879c4 <__divdf3>
20084fbc:	1009883a 	mov	r4,r2
20084fc0:	180b883a 	mov	r5,r3
20084fc4:	000d883a 	mov	r6,zero
20084fc8:	01cffc34 	movhi	r7,16368
20084fcc:	00889b40 	call	200889b4 <__subdf3>
20084fd0:	1009883a 	mov	r4,r2
20084fd4:	180b883a 	mov	r5,r3
20084fd8:	00892840 	call	20089284 <__fixdfsi>
	return IORD(dev->iobase, offset);
}

static inline void ocsdc_write(struct ocsdc *dev, int offset, uint32_t data)
{
	IOWR(dev->iobase, offset, data);
20084fdc:	80c00017 	ldw	r3,0(r16)
20084fe0:	01000044 	movi	r4,1
20084fe4:	19002835 	stwio	r4,160(r3)
20084fe8:	80c00017 	ldw	r3,0(r16)
20084fec:	18802435 	stwio	r2,144(r3)
20084ff0:	80800017 	ldw	r2,0(r16)
20084ff4:	10002835 	stwio	zero,160(r2)
	ocsdc_write(dev, OCSDC_DAT_INT_STATUS, 0);
	//set clock to maximum (devide by 2)
	ocsdc_set_clock(dev, dev->clk_freq/2);

	return 0;
}
20084ff8:	0005883a 	mov	r2,zero
20084ffc:	dfc00417 	ldw	ra,16(sp)
20085000:	dcc00317 	ldw	r19,12(sp)
20085004:	dc800217 	ldw	r18,8(sp)
20085008:	dc400117 	ldw	r17,4(sp)
2008500c:	dc000017 	ldw	r16,0(sp)
20085010:	dec00504 	addi	sp,sp,20
20085014:	f800283a 	ret
}

/* Set clock prescalar value based on the required clock in HZ */
static void ocsdc_set_clock(struct ocsdc * dev, uint clock)
{
	int clk_div = (clock == dev->clk_freq)? 0x00000080 : dev->clk_freq / (2.0 * clock) - 1;
20085018:	00802004 	movi	r2,128
2008501c:	003fef06 	br	20084fdc <__flash_rwdata_start+0xfffe8994>

20085020 <flush_dcache_range>:
};

#define OCSDC_PRINT(x)	//DEBUG(x);

void flush_dcache_range(void * start, void * end) {
	alt_dcache_flush(start, end-start);
20085020:	290bc83a 	sub	r5,r5,r4
20085024:	00972a41 	jmpi	200972a4 <alt_dcache_flush>

20085028 <ocsdc_mmc_init>:
	if (mmc->clock)
		ocsdc_set_clock(mmc->priv, mmc->clock);
}

struct mmc * ocsdc_mmc_init(int base_addr, int clk_freq)
{
20085028:	defffb04 	addi	sp,sp,-20
2008502c:	dcc00315 	stw	r19,12(sp)
20085030:	2027883a 	mov	r19,r4
	struct mmc *mmc;
	struct ocsdc *priv;

	mmc = malloc(sizeof(struct mmc));
20085034:	01002904 	movi	r4,164
	if (mmc->clock)
		ocsdc_set_clock(mmc->priv, mmc->clock);
}

struct mmc * ocsdc_mmc_init(int base_addr, int clk_freq)
{
20085038:	dc400115 	stw	r17,4(sp)
2008503c:	dc000015 	stw	r16,0(sp)
20085040:	dfc00415 	stw	ra,16(sp)
20085044:	dc800215 	stw	r18,8(sp)
20085048:	2823883a 	mov	r17,r5
	struct mmc *mmc;
	struct ocsdc *priv;

	mmc = malloc(sizeof(struct mmc));
2008504c:	00899940 	call	20089994 <malloc>
20085050:	1021883a 	mov	r16,r2
	if (!mmc) goto MMC_ALLOC;
20085054:	10003626 	beq	r2,zero,20085130 <ocsdc_mmc_init+0x108>
	priv = malloc(sizeof(struct ocsdc));
20085058:	01000204 	movi	r4,8
2008505c:	00899940 	call	20089994 <malloc>
20085060:	1025883a 	mov	r18,r2
	mmc->b_max = 256;

	return mmc;

OCSDC_ALLOC:
	free(mmc);
20085064:	8009883a 	mov	r4,r16
	struct ocsdc *priv;

	mmc = malloc(sizeof(struct mmc));
	if (!mmc) goto MMC_ALLOC;
	priv = malloc(sizeof(struct ocsdc));
	if (!priv) goto OCSDC_ALLOC;
20085068:	10003326 	beq	r2,zero,20085138 <ocsdc_mmc_init+0x110>

	memset(mmc, 0, sizeof(struct mmc));
2008506c:	000b883a 	mov	r5,zero
20085070:	01802904 	movi	r6,164
20085074:	008a3180 	call	2008a318 <memset>
	memset(priv, 0, sizeof(struct ocsdc));

	priv->iobase = base_addr;
	priv->clk_freq = clk_freq;

	sprintf(mmc->name, "ocsdc");
20085078:	00991cf4 	movhi	r2,25715
2008507c:	1098dbc4 	addi	r2,r2,25455
20085080:	80800015 	stw	r2,0(r16)
20085084:	008018c4 	movi	r2,99
20085088:	8080010d 	sth	r2,4(r16)
	mmc->priv = priv;
	mmc->send_cmd = ocsdc_send_cmd;
2008508c:	00880234 	movhi	r2,8200
20085090:	10935104 	addi	r2,r2,19780
20085094:	80802415 	stw	r2,144(r16)
	mmc->set_ios = ocsdc_set_ios;
20085098:	00880234 	movhi	r2,8200
2008509c:	10931104 	addi	r2,r2,19524
200850a0:	80802515 	stw	r2,148(r16)
	mmc->init = ocsdc_init;
200850a4:	00880234 	movhi	r2,8200
200850a8:	1093c904 	addi	r2,r2,20260
200850ac:	80802615 	stw	r2,152(r16)
	if (!priv) goto OCSDC_ALLOC;

	memset(mmc, 0, sizeof(struct mmc));
	memset(priv, 0, sizeof(struct ocsdc));

	priv->iobase = base_addr;
200850b0:	94c00015 	stw	r19,0(r18)
	priv->clk_freq = clk_freq;
200850b4:	94400115 	stw	r17,4(r18)

	sprintf(mmc->name, "ocsdc");
	mmc->priv = priv;
200850b8:	84800815 	stw	r18,32(r16)
	mmc->send_cmd = ocsdc_send_cmd;
	mmc->set_ios = ocsdc_set_ios;
	mmc->init = ocsdc_init;
	mmc->getcd = NULL;

	mmc->f_min = priv->clk_freq/6; /*maximum clock division 64 */
200850bc:	88800194 	ori	r2,r17,6
200850c0:	00c003c4 	movi	r3,15
200850c4:	18801636 	bltu	r3,r2,20085120 <ocsdc_mmc_init+0xf8>
200850c8:	8804913a 	slli	r2,r17,4
200850cc:	10c00194 	ori	r3,r2,6
200850d0:	00800034 	movhi	r2,0
200850d4:	10830e04 	addi	r2,r2,3128
200850d8:	1885883a 	add	r2,r3,r2
200850dc:	10800003 	ldbu	r2,0(r2)
200850e0:	80800c15 	stw	r2,48(r16)
	mmc->f_max = priv->clk_freq;
	mmc->voltages = MMC_VDD_32_33 | MMC_VDD_33_34;
200850e4:	00800c34 	movhi	r2,48
200850e8:	80800915 	stw	r2,36(r16)
	mmc->host_caps = MMC_MODE_4BIT;
	mmc->host_caps = MMC_MODE_HS | MMC_MODE_HS_52MHz | MMC_MODE_4BIT;
200850ec:	00804444 	movi	r2,273
200850f0:	80801215 	stw	r2,72(r16)

	mmc->b_max = 256;
200850f4:	00804004 	movi	r2,256
200850f8:	80802815 	stw	r2,160(r16)
	mmc->set_ios = ocsdc_set_ios;
	mmc->init = ocsdc_init;
	mmc->getcd = NULL;

	mmc->f_min = priv->clk_freq/6; /*maximum clock division 64 */
	mmc->f_max = priv->clk_freq;
200850fc:	84400d15 	stw	r17,52(r16)
	mmc->host_caps = MMC_MODE_4BIT;
	mmc->host_caps = MMC_MODE_HS | MMC_MODE_HS_52MHz | MMC_MODE_4BIT;

	mmc->b_max = 256;

	return mmc;
20085100:	8005883a 	mov	r2,r16

OCSDC_ALLOC:
	free(mmc);
MMC_ALLOC:
	return NULL;
}
20085104:	dfc00417 	ldw	ra,16(sp)
20085108:	dcc00317 	ldw	r19,12(sp)
2008510c:	dc800217 	ldw	r18,8(sp)
20085110:	dc400117 	ldw	r17,4(sp)
20085114:	dc000017 	ldw	r16,0(sp)
20085118:	dec00504 	addi	sp,sp,20
2008511c:	f800283a 	ret
	mmc->send_cmd = ocsdc_send_cmd;
	mmc->set_ios = ocsdc_set_ios;
	mmc->init = ocsdc_init;
	mmc->getcd = NULL;

	mmc->f_min = priv->clk_freq/6; /*maximum clock division 64 */
20085120:	8809883a 	mov	r4,r17
20085124:	01400184 	movi	r5,6
20085128:	00866e40 	call	200866e4 <__divsi3>
2008512c:	003fec06 	br	200850e0 <__flash_rwdata_start+0xfffe8a98>
	return mmc;

OCSDC_ALLOC:
	free(mmc);
MMC_ALLOC:
	return NULL;
20085130:	0005883a 	mov	r2,zero
20085134:	003ff306 	br	20085104 <__flash_rwdata_start+0xfffe8abc>
	mmc->b_max = 256;

	return mmc;

OCSDC_ALLOC:
	free(mmc);
20085138:	00899a80 	call	200899a8 <free>
MMC_ALLOC:
	return NULL;
2008513c:	0005883a 	mov	r2,zero
20085140:	003ff006 	br	20085104 <__flash_rwdata_start+0xfffe8abc>

20085144 <SDLIB_Init>:
struct mmc * sd_drv;
//-------------------------------------------------------------------------
bool SDLIB_Init(int base_addr) {
	//---------------------------------
	//init ocsdc driver
	if (!sd_drv) {
20085144:	d0a01817 	ldw	r2,-32672(gp)

#define DEBUG_SDCARD_HEX //DEBUG_HEX_PRINTF

struct mmc * sd_drv;
//-------------------------------------------------------------------------
bool SDLIB_Init(int base_addr) {
20085148:	deffff04 	addi	sp,sp,-4
2008514c:	dfc00015 	stw	ra,0(sp)
	//---------------------------------
	//init ocsdc driver
	if (!sd_drv) {
20085150:	10000f26 	beq	r2,zero,20085190 <SDLIB_Init+0x4c>
			return FALSE;
		}
		SDCARD_DEBUG(("ocsdc_mmc_init success\n\r"));
	}

	if (sd_drv->has_init)
20085154:	10c00b17 	ldw	r3,44(r2)
20085158:	18000426 	beq	r3,zero,2008516c <SDLIB_Init+0x28>
		return TRUE;
2008515c:	00800044 	movi	r2,1
#ifdef DEBUG_SDCARD
	print_mmcinfo(sd_drv);
#endif

	return TRUE;
}
20085160:	dfc00017 	ldw	ra,0(sp)
20085164:	dec00104 	addi	sp,sp,4
20085168:	f800283a 	ret
		SDCARD_DEBUG(("ocsdc_mmc_init success\n\r"));
	}

	if (sd_drv->has_init)
		return TRUE;
	int err = mmc_init(sd_drv);
2008516c:	1009883a 	mov	r4,r2
20085170:	00844ec0 	call	200844ec <mmc_init>
	if (err != 0 || sd_drv->has_init == 0) {
20085174:	10000b1e 	bne	r2,zero,200851a4 <SDLIB_Init+0x60>
20085178:	d0a01817 	ldw	r2,-32672(gp)
2008517c:	10800b17 	ldw	r2,44(r2)
20085180:	1004c03a 	cmpne	r2,r2,zero
#ifdef DEBUG_SDCARD
	print_mmcinfo(sd_drv);
#endif

	return TRUE;
}
20085184:	dfc00017 	ldw	ra,0(sp)
20085188:	dec00104 	addi	sp,sp,4
2008518c:	f800283a 	ret
//-------------------------------------------------------------------------
bool SDLIB_Init(int base_addr) {
	//---------------------------------
	//init ocsdc driver
	if (!sd_drv) {
		sd_drv = ocsdc_mmc_init(base_addr, 50000000);
20085190:	0140bef4 	movhi	r5,763
20085194:	297c2004 	addi	r5,r5,-3968
20085198:	00850280 	call	20085028 <ocsdc_mmc_init>
2008519c:	d0a01815 	stw	r2,-32672(gp)
		if(!sd_drv){
200851a0:	103fec1e 	bne	r2,zero,20085154 <__flash_rwdata_start+0xfffe8b0c>
			SDCARD_DEBUG(("ocsdc_mmc_init failed\n\r"));
			return FALSE;
200851a4:	0005883a 	mov	r2,zero
#ifdef DEBUG_SDCARD
	print_mmcinfo(sd_drv);
#endif

	return TRUE;
}
200851a8:	dfc00017 	ldw	ra,0(sp)
200851ac:	dec00104 	addi	sp,sp,4
200851b0:	f800283a 	ret

200851b4 <SDLIB_ReadBlock512>:

bool SDLIB_ReadBlock512(alt_u32 block_number, alt_u8 *buff) {
200851b4:	2005883a 	mov	r2,r4
	//SDCARD_DEBUG(("%d\n", block_number));
	if (mmc_bread(sd_drv, block_number, 1, buff) == 0) {
200851b8:	d1201817 	ldw	r4,-32672(gp)
#endif

	return TRUE;
}

bool SDLIB_ReadBlock512(alt_u32 block_number, alt_u8 *buff) {
200851bc:	deffff04 	addi	sp,sp,-4
200851c0:	280f883a 	mov	r7,r5
	//SDCARD_DEBUG(("%d\n", block_number));
	if (mmc_bread(sd_drv, block_number, 1, buff) == 0) {
200851c4:	01800044 	movi	r6,1
200851c8:	100b883a 	mov	r5,r2
#endif

	return TRUE;
}

bool SDLIB_ReadBlock512(alt_u32 block_number, alt_u8 *buff) {
200851cc:	dfc00015 	stw	ra,0(sp)
	//SDCARD_DEBUG(("%d\n", block_number));
	if (mmc_bread(sd_drv, block_number, 1, buff) == 0) {
200851d0:	00849540 	call	20084954 <mmc_bread>
		SDCARD_DEBUG(("mmc_bread failed\n\r"));
		return FALSE;
	}

	return TRUE;
}
200851d4:	1004c03a 	cmpne	r2,r2,zero
200851d8:	dfc00017 	ldw	ra,0(sp)
200851dc:	dec00104 	addi	sp,sp,4
200851e0:	f800283a 	ret

200851e4 <SDLIB_ReadBlocks>:

bool SDLIB_ReadBlocks(alt_u32 block_number, alt_u32 n, alt_u8 *buff) {
200851e4:	2007883a 	mov	r3,r4
	//SDCARD_DEBUG(("%d\n", block_number));
	if (mmc_bread(sd_drv, block_number, n, buff) == 0) {
200851e8:	d1201817 	ldw	r4,-32672(gp)
	}

	return TRUE;
}

bool SDLIB_ReadBlocks(alt_u32 block_number, alt_u32 n, alt_u8 *buff) {
200851ec:	2805883a 	mov	r2,r5
200851f0:	deffff04 	addi	sp,sp,-4
200851f4:	300f883a 	mov	r7,r6
	//SDCARD_DEBUG(("%d\n", block_number));
	if (mmc_bread(sd_drv, block_number, n, buff) == 0) {
200851f8:	180b883a 	mov	r5,r3
200851fc:	100d883a 	mov	r6,r2
	}

	return TRUE;
}

bool SDLIB_ReadBlocks(alt_u32 block_number, alt_u32 n, alt_u8 *buff) {
20085200:	dfc00015 	stw	ra,0(sp)
	//SDCARD_DEBUG(("%d\n", block_number));
	if (mmc_bread(sd_drv, block_number, n, buff) == 0) {
20085204:	00849540 	call	20084954 <mmc_bread>
		SDCARD_DEBUG(("mmc_bread failed\n\r"));
		return FALSE;
	}

	return TRUE;
}
20085208:	1004c03a 	cmpne	r2,r2,zero
2008520c:	dfc00017 	ldw	ra,0(sp)
20085210:	dec00104 	addi	sp,sp,4
20085214:	f800283a 	ret

20085218 <ece423_video_display_register_written_buffer>:
 *                 -----------------------------------------
 *
 *  This Registers Buf pointed to by buffer_being_written
 *
 ******************************************************************/
void ece423_video_display_register_written_buffer(ece423_video_display* display) {
20085218:	defffc04 	addi	sp,sp,-16
2008521c:	dc000015 	stw	r16,0(sp)
	 * Note: The new buffer_being_written may NOT Yet be FREE
	 * So Call
	 * ece423_video_display_buffer_is_available
	 * to Check Before Drawing in it
	 */
	display->buffer_being_written = (display->buffer_being_written + 1)
20085220:	24001b17 	ldw	r16,108(r4)
 *                 -----------------------------------------
 *
 *  This Registers Buf pointed to by buffer_being_written
 *
 ******************************************************************/
void ece423_video_display_register_written_buffer(ece423_video_display* display) {
20085224:	dc400115 	stw	r17,4(sp)
	 * So Call
	 * ece423_video_display_buffer_is_available
	 * to Check Before Drawing in it
	 */
	display->buffer_being_written = (display->buffer_being_written + 1)
			% display->num_frame_buffers;
20085228:	24402017 	ldw	r17,128(r4)
	 * Note: The new buffer_being_written may NOT Yet be FREE
	 * So Call
	 * ece423_video_display_buffer_is_available
	 * to Check Before Drawing in it
	 */
	display->buffer_being_written = (display->buffer_being_written + 1)
2008522c:	84000044 	addi	r16,r16,1
 *                 -----------------------------------------
 *
 *  This Registers Buf pointed to by buffer_being_written
 *
 ******************************************************************/
void ece423_video_display_register_written_buffer(ece423_video_display* display) {
20085230:	dc800215 	stw	r18,8(sp)
20085234:	dfc00315 	stw	ra,12(sp)
	 * So Call
	 * ece423_video_display_buffer_is_available
	 * to Check Before Drawing in it
	 */
	display->buffer_being_written = (display->buffer_being_written + 1)
			% display->num_frame_buffers;
20085238:	8444b03a 	or	r2,r16,r17
2008523c:	00c003c4 	movi	r3,15
 *                 -----------------------------------------
 *
 *  This Registers Buf pointed to by buffer_being_written
 *
 ******************************************************************/
void ece423_video_display_register_written_buffer(ece423_video_display* display) {
20085240:	2025883a 	mov	r18,r4
	 * So Call
	 * ece423_video_display_buffer_is_available
	 * to Check Before Drawing in it
	 */
	display->buffer_being_written = (display->buffer_being_written + 1)
			% display->num_frame_buffers;
20085244:	18800f36 	bltu	r3,r2,20085284 <ece423_video_display_register_written_buffer+0x6c>
20085248:	8004913a 	slli	r2,r16,4
2008524c:	1446b03a 	or	r3,r2,r17
20085250:	00800034 	movhi	r2,0
20085254:	10830e04 	addi	r2,r2,3128
20085258:	1885883a 	add	r2,r3,r2
2008525c:	10800003 	ldbu	r2,0(r2)
20085260:	1463383a 	mul	r17,r2,r17
20085264:	8461c83a 	sub	r16,r16,r17
	 * Note: The new buffer_being_written may NOT Yet be FREE
	 * So Call
	 * ece423_video_display_buffer_is_available
	 * to Check Before Drawing in it
	 */
	display->buffer_being_written = (display->buffer_being_written + 1)
20085268:	94001b15 	stw	r16,108(r18)
			% display->num_frame_buffers;
}
2008526c:	dfc00317 	ldw	ra,12(sp)
20085270:	dc800217 	ldw	r18,8(sp)
20085274:	dc400117 	ldw	r17,4(sp)
20085278:	dc000017 	ldw	r16,0(sp)
2008527c:	dec00404 	addi	sp,sp,16
20085280:	f800283a 	ret
	 * So Call
	 * ece423_video_display_buffer_is_available
	 * to Check Before Drawing in it
	 */
	display->buffer_being_written = (display->buffer_being_written + 1)
			% display->num_frame_buffers;
20085284:	8009883a 	mov	r4,r16
20085288:	880b883a 	mov	r5,r17
2008528c:	00866e40 	call	200866e4 <__divsi3>
20085290:	003ff306 	br	20085260 <__flash_rwdata_start+0xfffe8c18>

20085294 <ece423_video_display_buffer_is_available>:
 ******************************************************************/

int ece423_video_display_buffer_is_available(ece423_video_display* display) {
	int ret_code = 0;

	if (display->num_frame_buffers > 1) {
20085294:	20802017 	ldw	r2,128(r4)
20085298:	00c00044 	movi	r3,1
2008529c:	1880050e 	bge	r3,r2,200852b4 <ece423_video_display_buffer_is_available+0x20>
		if (display->buffer_being_displayed == display->buffer_being_written) // If Frame Buf free to write to
200852a0:	20c01a17 	ldw	r3,104(r4)
200852a4:	20801b17 	ldw	r2,108(r4)
200852a8:	1885003a 	cmpeq	r2,r3,r2
200852ac:	0085c83a 	sub	r2,zero,r2
200852b0:	f800283a 	ret
			ret_code = -1; // Free Buf not yet available
		}
	} // END if(display->num_frame_buffers > 1)
	else  // Else Only one display Buf so HAVE TO Overwrite LIVE Buf
	{
		ret_code = 0;
200852b4:	0005883a 	mov	r2,zero
	}

	return (ret_code);
}
200852b8:	f800283a 	ret

200852bc <ece423_video_display_switch_frames>:

void ece423_video_display_switch_frames(ece423_video_display* display) {
200852bc:	defff904 	addi	sp,sp,-28
200852c0:	dc000015 	stw	r16,0(sp)
	int iNext_Rd_Buf;

	alt_u32 RD_Desc_Fifo_Level = (IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(
200852c4:	24000017 	ldw	r16,0(r4)
	}

	return (ret_code);
}

void ece423_video_display_switch_frames(ece423_video_display* display) {
200852c8:	dc400115 	stw	r17,4(sp)
200852cc:	2023883a 	mov	r17,r4
	int iNext_Rd_Buf;

	alt_u32 RD_Desc_Fifo_Level = (IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(
200852d0:	80800317 	ldw	r2,12(r16)
	}

	return (ret_code);
}

void ece423_video_display_switch_frames(ece423_video_display* display) {
200852d4:	dfc00615 	stw	ra,24(sp)
200852d8:	dd400515 	stw	r21,20(sp)
200852dc:	dd000415 	stw	r20,16(sp)
200852e0:	dcc00315 	stw	r19,12(sp)
200852e4:	dc800215 	stw	r18,8(sp)
	int iNext_Rd_Buf;

	alt_u32 RD_Desc_Fifo_Level = (IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(
200852e8:	10800237 	ldwio	r2,8(r2)
			display->mSGDMA->csr_base) & ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK)
			>> ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;

	iNext_Rd_Buf = ((display->buffer_being_displayed + 1)
200852ec:	00c003c4 	movi	r3,15
200852f0:	24801a17 	ldw	r18,104(r4)
			% display->num_frame_buffers);
200852f4:	25002017 	ldw	r20,128(r4)
}

void ece423_video_display_switch_frames(ece423_video_display* display) {
	int iNext_Rd_Buf;

	alt_u32 RD_Desc_Fifo_Level = (IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(
200852f8:	157fffcc 	andi	r21,r2,65535
			display->mSGDMA->csr_base) & ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK)
			>> ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;

	iNext_Rd_Buf = ((display->buffer_being_displayed + 1)
200852fc:	94c00044 	addi	r19,r18,1
20085300:	9d04b03a 	or	r2,r19,r20
20085304:	18802436 	bltu	r3,r2,20085398 <ece423_video_display_switch_frames+0xdc>
20085308:	9804913a 	slli	r2,r19,4
			% display->num_frame_buffers);

	// If there is only one buffer, display it!
	if (display->num_frame_buffers == 1) {
2008530c:	01000044 	movi	r4,1

	alt_u32 RD_Desc_Fifo_Level = (IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(
			display->mSGDMA->csr_base) & ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK)
			>> ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;

	iNext_Rd_Buf = ((display->buffer_being_displayed + 1)
20085310:	1506b03a 	or	r3,r2,r20
20085314:	00800034 	movhi	r2,0
20085318:	10830e04 	addi	r2,r2,3128
2008531c:	1885883a 	add	r2,r3,r2
20085320:	10800003 	ldbu	r2,0(r2)
20085324:	1525383a 	mul	r18,r2,r20
20085328:	9ca5c83a 	sub	r18,r19,r18
			% display->num_frame_buffers);

	// If there is only one buffer, display it!
	if (display->num_frame_buffers == 1) {
2008532c:	a1002126 	beq	r20,r4,200853b4 <ece423_video_display_switch_frames+0xf8>
				display->buffer_ptrs[iNext_Rd_Buf]->desc_base) != 0) {
		}  // Keep Trying until there is room to Transfer another Frame
	}

	// Check if there is a new buffer to display
	else if (iNext_Rd_Buf != display->buffer_being_written) {
20085330:	88801b17 	ldw	r2,108(r17)
20085334:	14800f26 	beq	r2,r18,20085374 <ece423_video_display_switch_frames+0xb8>

		// Wait until the last buffer is displayed
		while (RD_Desc_Fifo_Level > 1) {
20085338:	2540042e 	bgeu	r4,r21,2008534c <ece423_video_display_switch_frames+0x90>

			RD_Desc_Fifo_Level = (IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(
2008533c:	80800317 	ldw	r2,12(r16)
20085340:	10c00237 	ldwio	r3,8(r2)
20085344:	18ffffcc 	andi	r3,r3,65535

	// Check if there is a new buffer to display
	else if (iNext_Rd_Buf != display->buffer_being_written) {

		// Wait until the last buffer is displayed
		while (RD_Desc_Fifo_Level > 1) {
20085348:	20fffc36 	bltu	r4,r3,2008533c <__flash_rwdata_start+0xfffe8cf4>
2008534c:	94000044 	addi	r16,r18,1
					>> ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
		}

		// Transfer Descriptor for Frame to mSGDMA
		while (alt_msgdma_standard_descriptor_async_transfer(display->mSGDMA,
				display->buffer_ptrs[iNext_Rd_Buf]->desc_base) != 0) {
20085350:	8421883a 	add	r16,r16,r16
20085354:	8421883a 	add	r16,r16,r16
20085358:	8c21883a 	add	r16,r17,r16
					& ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK)
					>> ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
		}

		// Transfer Descriptor for Frame to mSGDMA
		while (alt_msgdma_standard_descriptor_async_transfer(display->mSGDMA,
2008535c:	80c00017 	ldw	r3,0(r16)
20085360:	89000017 	ldw	r4,0(r17)
20085364:	19400017 	ldw	r5,0(r3)
20085368:	009a8b80 	call	2009a8b8 <alt_msgdma_standard_descriptor_async_transfer>
2008536c:	103ffb1e 	bne	r2,zero,2008535c <__flash_rwdata_start+0xfffe8d14>
				display->buffer_ptrs[iNext_Rd_Buf]->desc_base) != 0) {
		}  // Keep Trying until there is room to Transfer another Frame

		display->buffer_being_displayed = iNext_Rd_Buf;
20085370:	8c801a15 	stw	r18,104(r17)
	}

	//printf("Displayed %d - Written %d\n", display->buffer_being_displayed, display->buffer_being_written);
}
20085374:	dfc00617 	ldw	ra,24(sp)
20085378:	dd400517 	ldw	r21,20(sp)
2008537c:	dd000417 	ldw	r20,16(sp)
20085380:	dcc00317 	ldw	r19,12(sp)
20085384:	dc800217 	ldw	r18,8(sp)
20085388:	dc400117 	ldw	r17,4(sp)
2008538c:	dc000017 	ldw	r16,0(sp)
20085390:	dec00704 	addi	sp,sp,28
20085394:	f800283a 	ret

	alt_u32 RD_Desc_Fifo_Level = (IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(
			display->mSGDMA->csr_base) & ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK)
			>> ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;

	iNext_Rd_Buf = ((display->buffer_being_displayed + 1)
20085398:	9809883a 	mov	r4,r19
2008539c:	a00b883a 	mov	r5,r20
200853a0:	00866e40 	call	200866e4 <__divsi3>
200853a4:	1525383a 	mul	r18,r2,r20
			% display->num_frame_buffers);

	// If there is only one buffer, display it!
	if (display->num_frame_buffers == 1) {
200853a8:	01000044 	movi	r4,1

	alt_u32 RD_Desc_Fifo_Level = (IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(
			display->mSGDMA->csr_base) & ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK)
			>> ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;

	iNext_Rd_Buf = ((display->buffer_being_displayed + 1)
200853ac:	9ca5c83a 	sub	r18,r19,r18
			% display->num_frame_buffers);

	// If there is only one buffer, display it!
	if (display->num_frame_buffers == 1) {
200853b0:	a13fdf1e 	bne	r20,r4,20085330 <__flash_rwdata_start+0xfffe8ce8>
		// Wait until the last buffer is displayed
		while (RD_Desc_Fifo_Level > 0) {
200853b4:	a8000426 	beq	r21,zero,200853c8 <ece423_video_display_switch_frames+0x10c>
			RD_Desc_Fifo_Level = (IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(
200853b8:	80800317 	ldw	r2,12(r16)
200853bc:	10800237 	ldwio	r2,8(r2)
200853c0:	10bfffcc 	andi	r2,r2,65535
			% display->num_frame_buffers);

	// If there is only one buffer, display it!
	if (display->num_frame_buffers == 1) {
		// Wait until the last buffer is displayed
		while (RD_Desc_Fifo_Level > 0) {
200853c4:	103ffc1e 	bne	r2,zero,200853b8 <__flash_rwdata_start+0xfffe8d70>
200853c8:	94000044 	addi	r16,r18,1
					>> ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
		}

		// Transfer Descriptor for Frame to mSGDMA
		while (alt_msgdma_standard_descriptor_async_transfer(display->mSGDMA,
				display->buffer_ptrs[iNext_Rd_Buf]->desc_base) != 0) {
200853cc:	8421883a 	add	r16,r16,r16
200853d0:	8421883a 	add	r16,r16,r16
200853d4:	8c21883a 	add	r16,r17,r16
					& ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK)
					>> ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
		}

		// Transfer Descriptor for Frame to mSGDMA
		while (alt_msgdma_standard_descriptor_async_transfer(display->mSGDMA,
200853d8:	80800017 	ldw	r2,0(r16)
200853dc:	89000017 	ldw	r4,0(r17)
200853e0:	11400017 	ldw	r5,0(r2)
200853e4:	009a8b80 	call	2009a8b8 <alt_msgdma_standard_descriptor_async_transfer>
200853e8:	103ffb1e 	bne	r2,zero,200853d8 <__flash_rwdata_start+0xfffe8d90>
200853ec:	003fe106 	br	20085374 <__flash_rwdata_start+0xfffe8d2c>

200853f0 <ece423_video_display_clear_screen>:
 *
 ******************************************************************/
void ece423_video_display_clear_screen(ece423_video_display* display,
		char color) {
	memset(
			(void*) (display->buffer_ptrs[display->buffer_being_written]->buffer),
200853f0:	20801b17 	ldw	r2,108(r4)
 *             User can specify black(0x00) or white(0xFF).
 *
 ******************************************************************/
void ece423_video_display_clear_screen(ece423_video_display* display,
		char color) {
	memset(
200853f4:	21801f17 	ldw	r6,124(r4)
200853f8:	29403fcc 	andi	r5,r5,255
			(void*) (display->buffer_ptrs[display->buffer_being_written]->buffer),
200853fc:	10800044 	addi	r2,r2,1
20085400:	1085883a 	add	r2,r2,r2
20085404:	1085883a 	add	r2,r2,r2
20085408:	2089883a 	add	r4,r4,r2
 *             User can specify black(0x00) or white(0xFF).
 *
 ******************************************************************/
void ece423_video_display_clear_screen(ece423_video_display* display,
		char color) {
	memset(
2008540c:	20800017 	ldw	r2,0(r4)
20085410:	2940201c 	xori	r5,r5,128
20085414:	297fe004 	addi	r5,r5,-128
20085418:	11000117 	ldw	r4,4(r2)
2008541c:	008a3181 	jmpi	2008a318 <memset>

20085420 <ece423_video_display_get_descriptor_span>:
 *  MUST be SetUp Before Calling this func
 * 
 * Returns: Size (in bytes) of descriptor memory required.
 ******************************************************************/
alt_u32 ece423_video_display_get_descriptor_span(ece423_video_display *display) {
	return ((display->descriptors_per_frame + 2)
20085420:	20802117 	ldw	r2,132(r4)
20085424:	10800084 	addi	r2,r2,2
			* sizeof(alt_msgdma_standard_descriptor));
}
20085428:	1004913a 	slli	r2,r2,4
2008542c:	f800283a 	ret

20085430 <ece423_video_display_allocate_buffers>:
 *  This Allocates memory for Frame Bufs & descriptors
 *  Returns:  0 - Success
 *           -1 - Error allocating memory
 ******************************************************************/
int ece423_video_display_allocate_buffers(ece423_video_display* display,
		int bytes_per_frame, int num_buffers) {
20085430:	defff704 	addi	sp,sp,-36
20085434:	dfc00815 	stw	ra,32(sp)
20085438:	ddc00715 	stw	r23,28(sp)
2008543c:	dd800615 	stw	r22,24(sp)
20085440:	dd400515 	stw	r21,20(sp)
20085444:	dd000415 	stw	r20,16(sp)
20085448:	dcc00315 	stw	r19,12(sp)
2008544c:	dc800215 	stw	r18,8(sp)
20085450:	dc400115 	stw	r17,4(sp)
20085454:	dc000015 	stw	r16,0(sp)
	int i, ret_code = 0;

	/* Allocate Frame Bufs and descriptor Bufs */

	for (i = 0; i < num_buffers; i++) {
20085458:	0180300e 	bge	zero,r6,2008551c <ece423_video_display_allocate_buffers+0xec>
2008545c:	282b883a 	mov	r21,r5
20085460:	2029883a 	mov	r20,r4
20085464:	3027883a 	mov	r19,r6
20085468:	24000104 	addi	r16,r4,4
2008546c:	002d883a 	mov	r22,zero
20085470:	0025883a 	mov	r18,zero
		display->buffer_ptrs[i] = (ece423_video_frame*) malloc(
20085474:	01000204 	movi	r4,8
20085478:	00899940 	call	20089994 <malloc>
2008547c:	80800015 	stw	r2,0(r16)
20085480:	1023883a 	mov	r17,r2

		if (display->buffer_ptrs[i] == NULL) {
			ret_code = -1;
		}

		display->buffer_ptrs[i]->buffer = (void*) alt_uncached_malloc(
20085484:	a809883a 	mov	r4,r21
		int bytes_per_frame, int num_buffers) {
	int i, ret_code = 0;

	/* Allocate Frame Bufs and descriptor Bufs */

	for (i = 0; i < num_buffers; i++) {
20085488:	94800044 	addi	r18,r18,1
		display->buffer_ptrs[i] = (ece423_video_frame*) malloc(
				sizeof(ece423_video_frame)); // malloc Struct with 2 Ptrs

		if (display->buffer_ptrs[i] == NULL) {
2008548c:	10002126 	beq	r2,zero,20085514 <ece423_video_display_allocate_buffers+0xe4>
			ret_code = -1;
		}

		display->buffer_ptrs[i]->buffer = (void*) alt_uncached_malloc(
20085490:	0097dd40 	call	20097dd4 <alt_uncached_malloc>
				(bytes_per_frame)); // malloc Frame Buf on Heap
//      display->buffer_ptrs[i]->buffer =
//        (void*) malloc(bytes_per_frame); // malloc Frame Buf on Heap
		if (display->buffer_ptrs[i]->buffer == NULL)
20085494:	85c00017 	ldw	r23,0(r16)

		if (display->buffer_ptrs[i] == NULL) {
			ret_code = -1;
		}

		display->buffer_ptrs[i]->buffer = (void*) alt_uncached_malloc(
20085498:	88800115 	stw	r2,4(r17)
//        (void*) malloc(bytes_per_frame); // malloc Frame Buf on Heap
		if (display->buffer_ptrs[i]->buffer == NULL)
			ret_code = -1;

		display->buffer_ptrs[i]->desc_base =
				(alt_msgdma_standard_descriptor*) memalign(32,
2008549c:	01000804 	movi	r4,32

		display->buffer_ptrs[i]->buffer = (void*) alt_uncached_malloc(
				(bytes_per_frame)); // malloc Frame Buf on Heap
//      display->buffer_ptrs[i]->buffer =
//        (void*) malloc(bytes_per_frame); // malloc Frame Buf on Heap
		if (display->buffer_ptrs[i]->buffer == NULL)
200854a0:	b8800117 	ldw	r2,4(r23)
200854a4:	10001926 	beq	r2,zero,2008550c <ece423_video_display_allocate_buffers+0xdc>
 *  MUST be SetUp Before Calling this func
 * 
 * Returns: Size (in bytes) of descriptor memory required.
 ******************************************************************/
alt_u32 ece423_video_display_get_descriptor_span(ece423_video_display *display) {
	return ((display->descriptors_per_frame + 2)
200854a8:	a1402117 	ldw	r5,132(r20)
200854ac:	84000104 	addi	r16,r16,4
200854b0:	29400084 	addi	r5,r5,2
//        (void*) malloc(bytes_per_frame); // malloc Frame Buf on Heap
		if (display->buffer_ptrs[i]->buffer == NULL)
			ret_code = -1;

		display->buffer_ptrs[i]->desc_base =
				(alt_msgdma_standard_descriptor*) memalign(32,
200854b4:	280a913a 	slli	r5,r5,4
200854b8:	00897c40 	call	200897c4 <memalign>
//      display->buffer_ptrs[i]->buffer =
//        (void*) malloc(bytes_per_frame); // malloc Frame Buf on Heap
		if (display->buffer_ptrs[i]->buffer == NULL)
			ret_code = -1;

		display->buffer_ptrs[i]->desc_base =
200854bc:	b8800015 	stw	r2,0(r23)
				(alt_msgdma_standard_descriptor*) memalign(32,
						ece423_video_display_get_descriptor_span(display)); // Desc on Heap

		if (display->buffer_ptrs[i]->desc_base == NULL) {
200854c0:	80bfff17 	ldw	r2,-4(r16)
200854c4:	10800017 	ldw	r2,0(r2)
200854c8:	10000d26 	beq	r2,zero,20085500 <ece423_video_display_allocate_buffers+0xd0>
		int bytes_per_frame, int num_buffers) {
	int i, ret_code = 0;

	/* Allocate Frame Bufs and descriptor Bufs */

	for (i = 0; i < num_buffers; i++) {
200854cc:	94ffe91e 	bne	r18,r19,20085474 <__flash_rwdata_start+0xfffe8e2c>
			ret_code = -1;
		}
	}

	return ret_code;
}
200854d0:	b005883a 	mov	r2,r22
200854d4:	dfc00817 	ldw	ra,32(sp)
200854d8:	ddc00717 	ldw	r23,28(sp)
200854dc:	dd800617 	ldw	r22,24(sp)
200854e0:	dd400517 	ldw	r21,20(sp)
200854e4:	dd000417 	ldw	r20,16(sp)
200854e8:	dcc00317 	ldw	r19,12(sp)
200854ec:	dc800217 	ldw	r18,8(sp)
200854f0:	dc400117 	ldw	r17,4(sp)
200854f4:	dc000017 	ldw	r16,0(sp)
200854f8:	dec00904 	addi	sp,sp,36
200854fc:	f800283a 	ret
		display->buffer_ptrs[i]->desc_base =
				(alt_msgdma_standard_descriptor*) memalign(32,
						ece423_video_display_get_descriptor_span(display)); // Desc on Heap

		if (display->buffer_ptrs[i]->desc_base == NULL) {
			ret_code = -1;
20085500:	05bfffc4 	movi	r22,-1
		int bytes_per_frame, int num_buffers) {
	int i, ret_code = 0;

	/* Allocate Frame Bufs and descriptor Bufs */

	for (i = 0; i < num_buffers; i++) {
20085504:	94ffdb1e 	bne	r18,r19,20085474 <__flash_rwdata_start+0xfffe8e2c>
20085508:	003ff106 	br	200854d0 <__flash_rwdata_start+0xfffe8e88>
		display->buffer_ptrs[i]->buffer = (void*) alt_uncached_malloc(
				(bytes_per_frame)); // malloc Frame Buf on Heap
//      display->buffer_ptrs[i]->buffer =
//        (void*) malloc(bytes_per_frame); // malloc Frame Buf on Heap
		if (display->buffer_ptrs[i]->buffer == NULL)
			ret_code = -1;
2008550c:	05bfffc4 	movi	r22,-1
20085510:	003fe506 	br	200854a8 <__flash_rwdata_start+0xfffe8e60>
	for (i = 0; i < num_buffers; i++) {
		display->buffer_ptrs[i] = (ece423_video_frame*) malloc(
				sizeof(ece423_video_frame)); // malloc Struct with 2 Ptrs

		if (display->buffer_ptrs[i] == NULL) {
			ret_code = -1;
20085514:	05bfffc4 	movi	r22,-1
20085518:	003fdd06 	br	20085490 <__flash_rwdata_start+0xfffe8e48>
 *  Returns:  0 - Success
 *           -1 - Error allocating memory
 ******************************************************************/
int ece423_video_display_allocate_buffers(ece423_video_display* display,
		int bytes_per_frame, int num_buffers) {
	int i, ret_code = 0;
2008551c:	002d883a 	mov	r22,zero
20085520:	003feb06 	br	200854d0 <__flash_rwdata_start+0xfffe8e88>

20085524 <ece423_video_display_get_buffer>:
// ************************************************************

// Return a pointer to the buffer being written
alt_u32* ece423_video_display_get_buffer(ece423_video_display* display) {

	return (display->buffer_ptrs[display->buffer_being_written]->buffer);
20085524:	20801b17 	ldw	r2,108(r4)
20085528:	10800044 	addi	r2,r2,1
2008552c:	1085883a 	add	r2,r2,r2
20085530:	1085883a 	add	r2,r2,r2
20085534:	2089883a 	add	r4,r4,r2
20085538:	20800017 	ldw	r2,0(r4)
}
2008553c:	10800117 	ldw	r2,4(r2)
20085540:	f800283a 	ret

20085544 <ece423_init_hdmi>:

// ************************************************************
int ece423_init_hdmi() {
20085544:	defff104 	addi	sp,sp,-60
	int slave_addr = 0x39 << 1;
	int chip_id[4];
	int chip_rev[4];

	// Identify adv7513 chip
	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x00, &chip_rev[0]);
20085548:	01080434 	movhi	r4,8208
2008554c:	01480434 	movhi	r5,8208
20085550:	d8800104 	addi	r2,sp,4
20085554:	21053804 	addi	r4,r4,5344
20085558:	29453404 	addi	r5,r5,5328
2008555c:	d8800015 	stw	r2,0(sp)
20085560:	01801c84 	movi	r6,114
20085564:	000f883a 	mov	r7,zero

	return (display->buffer_ptrs[display->buffer_being_written]->buffer);
}

// ************************************************************
int ece423_init_hdmi() {
20085568:	dfc00e15 	stw	ra,56(sp)
2008556c:	dd000d15 	stw	r20,52(sp)
20085570:	dcc00c15 	stw	r19,48(sp)
20085574:	dc800b15 	stw	r18,44(sp)
20085578:	dc400a15 	stw	r17,40(sp)
2008557c:	dc000915 	stw	r16,36(sp)
	int slave_addr = 0x39 << 1;
	int chip_id[4];
	int chip_rev[4];

	// Identify adv7513 chip
	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x00, &chip_rev[0]);
20085580:	0085df80 	call	20085df8 <I2C_Read>
	if (!r)
20085584:	1000ed26 	beq	r2,zero,2008593c <ece423_init_hdmi+0x3f8>
		return -1;

	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0xf6, &chip_id[0]);
20085588:	01080434 	movhi	r4,8208
2008558c:	01480434 	movhi	r5,8208
20085590:	d8800504 	addi	r2,sp,20
20085594:	21053804 	addi	r4,r4,5344
20085598:	29453404 	addi	r5,r5,5328
2008559c:	d8800015 	stw	r2,0(sp)
200855a0:	01801c84 	movi	r6,114
200855a4:	01c03d84 	movi	r7,246
200855a8:	0085df80 	call	20085df8 <I2C_Read>
	if (!r)
200855ac:	1000e526 	beq	r2,zero,20085944 <ece423_init_hdmi+0x400>
		return -2;

	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0xf5, &chip_id[1]);
200855b0:	01080434 	movhi	r4,8208
200855b4:	01480434 	movhi	r5,8208
200855b8:	d8800604 	addi	r2,sp,24
200855bc:	21053804 	addi	r4,r4,5344
200855c0:	29453404 	addi	r5,r5,5328
200855c4:	d8800015 	stw	r2,0(sp)
200855c8:	01801c84 	movi	r6,114
200855cc:	01c03d44 	movi	r7,245
200855d0:	0085df80 	call	20085df8 <I2C_Read>
	if (!r)
200855d4:	1000dd26 	beq	r2,zero,2008594c <ece423_init_hdmi+0x408>
		return -3;

	// Initiate Color Conversion Matrix
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x18, 0xAA);
200855d8:	00802a84 	movi	r2,170
200855dc:	01080434 	movhi	r4,8208
200855e0:	01480434 	movhi	r5,8208
200855e4:	21053804 	addi	r4,r4,5344
200855e8:	29453404 	addi	r5,r5,5328
200855ec:	01801c84 	movi	r6,114
200855f0:	01c00604 	movi	r7,24
200855f4:	d8800015 	stw	r2,0(sp)
200855f8:	0085ba40 	call	20085ba4 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x19, 0xF8);
200855fc:	04800644 	movi	r18,25
20085600:	00803e04 	movi	r2,248
20085604:	01080434 	movhi	r4,8208
20085608:	01480434 	movhi	r5,8208
2008560c:	21053804 	addi	r4,r4,5344
20085610:	29453404 	addi	r5,r5,5328
20085614:	01801c84 	movi	r6,114
20085618:	900f883a 	mov	r7,r18
2008561c:	d8800015 	stw	r2,0(sp)
20085620:	0085ba40 	call	20085ba4 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x1A, 0x08);
20085624:	04400684 	movi	r17,26
20085628:	04000204 	movi	r16,8
2008562c:	01080434 	movhi	r4,8208
20085630:	01480434 	movhi	r5,8208
20085634:	880f883a 	mov	r7,r17
20085638:	21053804 	addi	r4,r4,5344
2008563c:	29453404 	addi	r5,r5,5328
20085640:	01801c84 	movi	r6,114
20085644:	dc000015 	stw	r16,0(sp)
20085648:	0085ba40 	call	20085ba4 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x1B, 0x00);
2008564c:	01080434 	movhi	r4,8208
20085650:	01480434 	movhi	r5,8208
20085654:	21053804 	addi	r4,r4,5344
20085658:	29453404 	addi	r5,r5,5328
2008565c:	01801c84 	movi	r6,114
20085660:	01c006c4 	movi	r7,27
20085664:	d8000015 	stw	zero,0(sp)
20085668:	0085ba40 	call	20085ba4 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x1C, 0x00);
2008566c:	01080434 	movhi	r4,8208
20085670:	01480434 	movhi	r5,8208
20085674:	21053804 	addi	r4,r4,5344
20085678:	29453404 	addi	r5,r5,5328
2008567c:	01801c84 	movi	r6,114
20085680:	01c00704 	movi	r7,28
20085684:	d8000015 	stw	zero,0(sp)
20085688:	0085ba40 	call	20085ba4 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x1D, 0x00);
2008568c:	05000744 	movi	r20,29
20085690:	01080434 	movhi	r4,8208
20085694:	01480434 	movhi	r5,8208
20085698:	21053804 	addi	r4,r4,5344
2008569c:	29453404 	addi	r5,r5,5328
200856a0:	01801c84 	movi	r6,114
200856a4:	a00f883a 	mov	r7,r20
200856a8:	d8000015 	stw	zero,0(sp)
200856ac:	0085ba40 	call	20085ba4 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x1E, 0x1a);
200856b0:	01080434 	movhi	r4,8208
200856b4:	01480434 	movhi	r5,8208
200856b8:	21053804 	addi	r4,r4,5344
200856bc:	29453404 	addi	r5,r5,5328
200856c0:	01801c84 	movi	r6,114
200856c4:	01c00784 	movi	r7,30
200856c8:	dc400015 	stw	r17,0(sp)
200856cc:	0085ba40 	call	20085ba4 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x1F, 0x84);
200856d0:	04c007c4 	movi	r19,31
200856d4:	00802104 	movi	r2,132
200856d8:	01080434 	movhi	r4,8208
200856dc:	01480434 	movhi	r5,8208
200856e0:	21053804 	addi	r4,r4,5344
200856e4:	29453404 	addi	r5,r5,5328
200856e8:	01801c84 	movi	r6,114
200856ec:	980f883a 	mov	r7,r19
200856f0:	d8800015 	stw	r2,0(sp)
200856f4:	0085ba40 	call	20085ba4 <I2C_Write>

	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x20, 0x1A);
200856f8:	01080434 	movhi	r4,8208
200856fc:	01480434 	movhi	r5,8208
20085700:	21053804 	addi	r4,r4,5344
20085704:	29453404 	addi	r5,r5,5328
20085708:	01801c84 	movi	r6,114
2008570c:	01c00804 	movi	r7,32
20085710:	dc400015 	stw	r17,0(sp)
20085714:	0085ba40 	call	20085ba4 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x21, 0x6A);
20085718:	00801a84 	movi	r2,106
2008571c:	01080434 	movhi	r4,8208
20085720:	01480434 	movhi	r5,8208
20085724:	21053804 	addi	r4,r4,5344
20085728:	29453404 	addi	r5,r5,5328
2008572c:	01801c84 	movi	r6,114
20085730:	01c00844 	movi	r7,33
20085734:	d8800015 	stw	r2,0(sp)
20085738:	0085ba40 	call	20085ba4 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x22, 0x08);
2008573c:	01080434 	movhi	r4,8208
20085740:	01480434 	movhi	r5,8208
20085744:	21053804 	addi	r4,r4,5344
20085748:	29453404 	addi	r5,r5,5328
2008574c:	01801c84 	movi	r6,114
20085750:	01c00884 	movi	r7,34
20085754:	dc000015 	stw	r16,0(sp)
20085758:	0085ba40 	call	20085ba4 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x23, 0x00);
2008575c:	044008c4 	movi	r17,35
20085760:	01080434 	movhi	r4,8208
20085764:	01480434 	movhi	r5,8208
20085768:	21053804 	addi	r4,r4,5344
2008576c:	29453404 	addi	r5,r5,5328
20085770:	01801c84 	movi	r6,114
20085774:	880f883a 	mov	r7,r17
20085778:	d8000015 	stw	zero,0(sp)
2008577c:	0085ba40 	call	20085ba4 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x24, 0x1D);
20085780:	01080434 	movhi	r4,8208
20085784:	01480434 	movhi	r5,8208
20085788:	21053804 	addi	r4,r4,5344
2008578c:	29453404 	addi	r5,r5,5328
20085790:	01801c84 	movi	r6,114
20085794:	01c00904 	movi	r7,36
20085798:	dd000015 	stw	r20,0(sp)
2008579c:	0085ba40 	call	20085ba4 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x25, 0x50);
200857a0:	00801404 	movi	r2,80
200857a4:	01080434 	movhi	r4,8208
200857a8:	01480434 	movhi	r5,8208
200857ac:	21053804 	addi	r4,r4,5344
200857b0:	29453404 	addi	r5,r5,5328
200857b4:	01801c84 	movi	r6,114
200857b8:	01c00944 	movi	r7,37
200857bc:	d8800015 	stw	r2,0(sp)
200857c0:	0085ba40 	call	20085ba4 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x26, 0x04);
200857c4:	00800104 	movi	r2,4
200857c8:	01080434 	movhi	r4,8208
200857cc:	01480434 	movhi	r5,8208
200857d0:	21053804 	addi	r4,r4,5344
200857d4:	29453404 	addi	r5,r5,5328
200857d8:	01801c84 	movi	r6,114
200857dc:	01c00984 	movi	r7,38
200857e0:	d8800015 	stw	r2,0(sp)
200857e4:	0085ba40 	call	20085ba4 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x27, 0x23);
200857e8:	01080434 	movhi	r4,8208
200857ec:	01480434 	movhi	r5,8208
200857f0:	21053804 	addi	r4,r4,5344
200857f4:	29453404 	addi	r5,r5,5328
200857f8:	01801c84 	movi	r6,114
200857fc:	01c009c4 	movi	r7,39
20085800:	dc400015 	stw	r17,0(sp)
20085804:	0085ba40 	call	20085ba4 <I2C_Write>

	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x28, 0x1F);
20085808:	01080434 	movhi	r4,8208
2008580c:	01480434 	movhi	r5,8208
20085810:	21053804 	addi	r4,r4,5344
20085814:	29453404 	addi	r5,r5,5328
20085818:	01801c84 	movi	r6,114
2008581c:	01c00a04 	movi	r7,40
20085820:	dcc00015 	stw	r19,0(sp)
20085824:	0085ba40 	call	20085ba4 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x29, 0xFC);
20085828:	00803f04 	movi	r2,252
2008582c:	01080434 	movhi	r4,8208
20085830:	01480434 	movhi	r5,8208
20085834:	21053804 	addi	r4,r4,5344
20085838:	29453404 	addi	r5,r5,5328
2008583c:	01801c84 	movi	r6,114
20085840:	01c00a44 	movi	r7,41
20085844:	d8800015 	stw	r2,0(sp)
20085848:	0085ba40 	call	20085ba4 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x2A, 0x08);
2008584c:	01080434 	movhi	r4,8208
20085850:	01480434 	movhi	r5,8208
20085854:	21053804 	addi	r4,r4,5344
20085858:	29453404 	addi	r5,r5,5328
2008585c:	01801c84 	movi	r6,114
20085860:	01c00a84 	movi	r7,42
20085864:	dc000015 	stw	r16,0(sp)
20085868:	0085ba40 	call	20085ba4 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x2B, 0x00);
2008586c:	01080434 	movhi	r4,8208
20085870:	01480434 	movhi	r5,8208
20085874:	21053804 	addi	r4,r4,5344
20085878:	29453404 	addi	r5,r5,5328
2008587c:	01801c84 	movi	r6,114
20085880:	01c00ac4 	movi	r7,43
20085884:	d8000015 	stw	zero,0(sp)
20085888:	0085ba40 	call	20085ba4 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x2C, 0x0D);
2008588c:	00800344 	movi	r2,13
20085890:	01080434 	movhi	r4,8208
20085894:	01480434 	movhi	r5,8208
20085898:	21053804 	addi	r4,r4,5344
2008589c:	29453404 	addi	r5,r5,5328
200858a0:	01801c84 	movi	r6,114
200858a4:	01c00b04 	movi	r7,44
200858a8:	d8800015 	stw	r2,0(sp)
200858ac:	0085ba40 	call	20085ba4 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x2D, 0xDE);
200858b0:	00803784 	movi	r2,222
200858b4:	01080434 	movhi	r4,8208
200858b8:	01480434 	movhi	r5,8208
200858bc:	21053804 	addi	r4,r4,5344
200858c0:	29453404 	addi	r5,r5,5328
200858c4:	01801c84 	movi	r6,114
200858c8:	01c00b44 	movi	r7,45
200858cc:	d8800015 	stw	r2,0(sp)
200858d0:	0085ba40 	call	20085ba4 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x2E, 0x19);
200858d4:	01080434 	movhi	r4,8208
200858d8:	01480434 	movhi	r5,8208
200858dc:	21053804 	addi	r4,r4,5344
200858e0:	29453404 	addi	r5,r5,5328
200858e4:	01801c84 	movi	r6,114
200858e8:	01c00b84 	movi	r7,46
200858ec:	dc800015 	stw	r18,0(sp)
200858f0:	0085ba40 	call	20085ba4 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x2F, 0x13);
200858f4:	008004c4 	movi	r2,19
200858f8:	01080434 	movhi	r4,8208
200858fc:	01480434 	movhi	r5,8208
20085900:	21053804 	addi	r4,r4,5344
20085904:	29453404 	addi	r5,r5,5328
20085908:	d8800015 	stw	r2,0(sp)
2008590c:	01801c84 	movi	r6,114
20085910:	01c00bc4 	movi	r7,47
20085914:	0085ba40 	call	20085ba4 <I2C_Write>

	return 0;
20085918:	0005883a 	mov	r2,zero
}
2008591c:	dfc00e17 	ldw	ra,56(sp)
20085920:	dd000d17 	ldw	r20,52(sp)
20085924:	dcc00c17 	ldw	r19,48(sp)
20085928:	dc800b17 	ldw	r18,44(sp)
2008592c:	dc400a17 	ldw	r17,40(sp)
20085930:	dc000917 	ldw	r16,36(sp)
20085934:	dec00f04 	addi	sp,sp,60
20085938:	f800283a 	ret
	int chip_rev[4];

	// Identify adv7513 chip
	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x00, &chip_rev[0]);
	if (!r)
		return -1;
2008593c:	00bfffc4 	movi	r2,-1
20085940:	003ff606 	br	2008591c <__flash_rwdata_start+0xfffe92d4>

	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0xf6, &chip_id[0]);
	if (!r)
		return -2;
20085944:	00bfff84 	movi	r2,-2
20085948:	003ff406 	br	2008591c <__flash_rwdata_start+0xfffe92d4>

	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0xf5, &chip_id[1]);
	if (!r)
		return -3;
2008594c:	00bfff44 	movi	r2,-3
20085950:	003ff206 	br	2008591c <__flash_rwdata_start+0xfffe92d4>

20085954 <ece423_video_display_init>:
 *           the mSGDMA.
 *
 *  Returns: Ptr to  display controller structure, or NULL on failure.
 ******************************************************************/
ece423_video_display* ece423_video_display_init(char* sgdma_name, int width,
		int height, int num_buffers) {
20085954:	defff404 	addi	sp,sp,-48
20085958:	dd800815 	stw	r22,32(sp)
2008595c:	dd400715 	stw	r21,28(sp)
20085960:	dc000215 	stw	r16,8(sp)
20085964:	dfc00b15 	stw	ra,44(sp)
20085968:	df000a15 	stw	fp,40(sp)
2008596c:	ddc00915 	stw	r23,36(sp)
20085970:	dd000615 	stw	r20,24(sp)
20085974:	dcc00515 	stw	r19,20(sp)
20085978:	dc800415 	stw	r18,16(sp)
2008597c:	dc400315 	stw	r17,12(sp)
20085980:	d9000115 	stw	r4,4(sp)
20085984:	282d883a 	mov	r22,r5
20085988:	3021883a 	mov	r16,r6
2008598c:	382b883a 	mov	r21,r7

	if (ece423_init_hdmi()) {
20085990:	00855440 	call	20085544 <ece423_init_hdmi>
20085994:	10007e1e 	bne	r2,zero,20085b90 <ece423_video_display_init+0x23c>

	alt_msgdma_dev* pVid_DMA_CSR_Dev; // Ptr to mSGDMA Cont & Status Device

	// PreCalc Values
	bytes_per_pixel = 4;
	bytes_per_frame = ((width * height) * bytes_per_pixel);
20085998:	b427383a 	mul	r19,r22,r16

	descriptors_per_frame = 1;

	// DON'T EXCEED MAX Frame Bufs
	if (num_buffers > ECE423_VIDEO_DISPLAY_MAX_BUFFERS) {
2008599c:	00800644 	movi	r2,25

	alt_msgdma_dev* pVid_DMA_CSR_Dev; // Ptr to mSGDMA Cont & Status Device

	// PreCalc Values
	bytes_per_pixel = 4;
	bytes_per_frame = ((width * height) * bytes_per_pixel);
200859a0:	9ce7883a 	add	r19,r19,r19
200859a4:	9ce7883a 	add	r19,r19,r19

	descriptors_per_frame = 1;

	// DON'T EXCEED MAX Frame Bufs
	if (num_buffers > ECE423_VIDEO_DISPLAY_MAX_BUFFERS) {
200859a8:	15406a16 	blt	r2,r21,20085b54 <ece423_video_display_init+0x200>
		printf("The required number of buffers exceeds the max!\n");
		num_buffers = ECE423_VIDEO_DISPLAY_MAX_BUFFERS;
	} else if (num_buffers < 2){
200859ac:	00800044 	movi	r2,1
200859b0:	1540720e 	bge	r2,r21,20085b7c <ece423_video_display_init+0x228>
		printf("The number of buffers must be > 2!\n");
		num_buffers = 2;
	}

	// malloc display struct
	display = (ece423_video_display*) malloc(sizeof(ece423_video_display));
200859b4:	01002204 	movi	r4,136
200859b8:	00899940 	call	20089994 <malloc>
200859bc:	1025883a 	mov	r18,r2
	if (!display) {
200859c0:	10006c26 	beq	r2,zero,20085b74 <ece423_video_display_init+0x220>
200859c4:	ad000044 	addi	r20,r21,1
200859c8:	a529883a 	add	r20,r20,r20
	display->height = height;
	display->num_frame_buffers = num_buffers;
	display->bytes_per_frame = bytes_per_frame;
	display->bytes_per_pixel = bytes_per_pixel;
	display->buffer_being_displayed = 0;
	display->buffer_being_written = (num_buffers > 1) ? 1 : 0; // Init iPrev_Wr_Buf MUST MATCH
200859cc:	00800044 	movi	r2,1
200859d0:	94400104 	addi	r17,r18,4
200859d4:	a529883a 	add	r20,r20,r20
	// Init display struct
	display->width = width;
	display->height = height;
	display->num_frame_buffers = num_buffers;
	display->bytes_per_frame = bytes_per_frame;
	display->bytes_per_pixel = bytes_per_pixel;
200859d8:	00c00104 	movi	r3,4
	if (!display) {
		return NULL;
	}

	// Init display struct
	display->width = width;
200859dc:	95801c15 	stw	r22,112(r18)
	display->height = height;
200859e0:	94001d15 	stw	r16,116(r18)
	display->num_frame_buffers = num_buffers;
200859e4:	95402015 	stw	r21,128(r18)
	display->bytes_per_frame = bytes_per_frame;
200859e8:	94c01f15 	stw	r19,124(r18)
	display->bytes_per_pixel = bytes_per_pixel;
200859ec:	90c01e15 	stw	r3,120(r18)
	display->buffer_being_displayed = 0;
200859f0:	90001a15 	stw	zero,104(r18)
	display->buffer_being_written = (num_buffers > 1) ? 1 : 0; // Init iPrev_Wr_Buf MUST MATCH
200859f4:	90801b15 	stw	r2,108(r18)
	// See iPrev_Wr_Buf in ece423_video_display_buffer_is_available
	display->descriptors_per_frame = descriptors_per_frame;
200859f8:	90802115 	stw	r2,132(r18)
200859fc:	9529883a 	add	r20,r18,r20
20085a00:	8821883a 	mov	r16,r17
 *  Returns:  0 - Success
 *           -1 - Error allocating memory
 ******************************************************************/
int ece423_video_display_allocate_buffers(ece423_video_display* display,
		int bytes_per_frame, int num_buffers) {
	int i, ret_code = 0;
20085a04:	002d883a 	mov	r22,zero

	/* Allocate Frame Bufs and descriptor Bufs */

	for (i = 0; i < num_buffers; i++) {
		display->buffer_ptrs[i] = (ece423_video_frame*) malloc(
20085a08:	01000204 	movi	r4,8
20085a0c:	00899940 	call	20089994 <malloc>
20085a10:	80800015 	stw	r2,0(r16)
20085a14:	1039883a 	mov	fp,r2

		if (display->buffer_ptrs[i] == NULL) {
			ret_code = -1;
		}

		display->buffer_ptrs[i]->buffer = (void*) alt_uncached_malloc(
20085a18:	9809883a 	mov	r4,r19

	for (i = 0; i < num_buffers; i++) {
		display->buffer_ptrs[i] = (ece423_video_frame*) malloc(
				sizeof(ece423_video_frame)); // malloc Struct with 2 Ptrs

		if (display->buffer_ptrs[i] == NULL) {
20085a1c:	10004b26 	beq	r2,zero,20085b4c <ece423_video_display_init+0x1f8>
			ret_code = -1;
		}

		display->buffer_ptrs[i]->buffer = (void*) alt_uncached_malloc(
20085a20:	0097dd40 	call	20097dd4 <alt_uncached_malloc>
				(bytes_per_frame)); // malloc Frame Buf on Heap
//      display->buffer_ptrs[i]->buffer =
//        (void*) malloc(bytes_per_frame); // malloc Frame Buf on Heap
		if (display->buffer_ptrs[i]->buffer == NULL)
20085a24:	85c00017 	ldw	r23,0(r16)

		if (display->buffer_ptrs[i] == NULL) {
			ret_code = -1;
		}

		display->buffer_ptrs[i]->buffer = (void*) alt_uncached_malloc(
20085a28:	e0800115 	stw	r2,4(fp)
//        (void*) malloc(bytes_per_frame); // malloc Frame Buf on Heap
		if (display->buffer_ptrs[i]->buffer == NULL)
			ret_code = -1;

		display->buffer_ptrs[i]->desc_base =
				(alt_msgdma_standard_descriptor*) memalign(32,
20085a2c:	01000804 	movi	r4,32

		display->buffer_ptrs[i]->buffer = (void*) alt_uncached_malloc(
				(bytes_per_frame)); // malloc Frame Buf on Heap
//      display->buffer_ptrs[i]->buffer =
//        (void*) malloc(bytes_per_frame); // malloc Frame Buf on Heap
		if (display->buffer_ptrs[i]->buffer == NULL)
20085a30:	b8800117 	ldw	r2,4(r23)
20085a34:	10004326 	beq	r2,zero,20085b44 <ece423_video_display_init+0x1f0>
 *  MUST be SetUp Before Calling this func
 * 
 * Returns: Size (in bytes) of descriptor memory required.
 ******************************************************************/
alt_u32 ece423_video_display_get_descriptor_span(ece423_video_display *display) {
	return ((display->descriptors_per_frame + 2)
20085a38:	91402117 	ldw	r5,132(r18)
20085a3c:	84000104 	addi	r16,r16,4
20085a40:	29400084 	addi	r5,r5,2
//        (void*) malloc(bytes_per_frame); // malloc Frame Buf on Heap
		if (display->buffer_ptrs[i]->buffer == NULL)
			ret_code = -1;

		display->buffer_ptrs[i]->desc_base =
				(alt_msgdma_standard_descriptor*) memalign(32,
20085a44:	280a913a 	slli	r5,r5,4
20085a48:	00897c40 	call	200897c4 <memalign>
//      display->buffer_ptrs[i]->buffer =
//        (void*) malloc(bytes_per_frame); // malloc Frame Buf on Heap
		if (display->buffer_ptrs[i]->buffer == NULL)
			ret_code = -1;

		display->buffer_ptrs[i]->desc_base =
20085a4c:	b8800015 	stw	r2,0(r23)
				(alt_msgdma_standard_descriptor*) memalign(32,
						ece423_video_display_get_descriptor_span(display)); // Desc on Heap

		if (display->buffer_ptrs[i]->desc_base == NULL) {
20085a50:	80bfff17 	ldw	r2,-4(r16)
20085a54:	10800017 	ldw	r2,0(r2)
20085a58:	10003726 	beq	r2,zero,20085b38 <ece423_video_display_init+0x1e4>
		int bytes_per_frame, int num_buffers) {
	int i, ret_code = 0;

	/* Allocate Frame Bufs and descriptor Bufs */

	for (i = 0; i < num_buffers; i++) {
20085a5c:	853fea1e 	bne	r16,r20,20085a08 <__flash_rwdata_start+0xfffe93c0>
	display->buffer_being_written = (num_buffers > 1) ? 1 : 0; // Init iPrev_Wr_Buf MUST MATCH
	// See iPrev_Wr_Buf in ece423_video_display_buffer_is_available
	display->descriptors_per_frame = descriptors_per_frame;

	// malloc Frame and descriptor Bufs & SetUp Frame Buf Ptrs & Descriptor Ptrs
	if (ece423_video_display_allocate_buffers(display, bytes_per_frame,
20085a60:	b000441e 	bne	r22,zero,20085b74 <ece423_video_display_init+0x220>
			num_buffers)) {
		return NULL;
	}

	pVid_DMA_CSR_Dev = alt_msgdma_open(sgdma_name); // Pt to Cont & Status Dev
20085a64:	d9000117 	ldw	r4,4(sp)
20085a68:	009a6a00 	call	2009a6a0 <alt_msgdma_open>
	display->mSGDMA = pVid_DMA_CSR_Dev;
20085a6c:	90800015 	stw	r2,0(r18)
	if (ece423_video_display_allocate_buffers(display, bytes_per_frame,
			num_buffers)) {
		return NULL;
	}

	pVid_DMA_CSR_Dev = alt_msgdma_open(sgdma_name); // Pt to Cont & Status Dev
20085a70:	1021883a 	mov	r16,r2
	display->mSGDMA = pVid_DMA_CSR_Dev;
	if (pVid_DMA_CSR_Dev == NULL) {
20085a74:	10003c26 	beq	r2,zero,20085b68 <ece423_video_display_init+0x214>
		return NULL;
	}

// Construct mSGDMA descriptors for each Frame Buf
	for (i = 0; i < num_buffers; i++) {
		alt_msgdma_construct_standard_mm_to_st_descriptor(pVid_DMA_CSR_Dev,
20085a78:	05e00034 	movhi	r23,32768
20085a7c:	bdc1c004 	addi	r23,r23,1792
20085a80:	882d883a 	mov	r22,r17
20085a84:	0029883a 	mov	r20,zero
				display->buffer_ptrs[i]->desc_base,
20085a88:	b0800017 	ldw	r2,0(r22)
		return NULL;
	}

// Construct mSGDMA descriptors for each Frame Buf
	for (i = 0; i < num_buffers; i++) {
		alt_msgdma_construct_standard_mm_to_st_descriptor(pVid_DMA_CSR_Dev,
20085a8c:	8009883a 	mov	r4,r16
20085a90:	980f883a 	mov	r7,r19
20085a94:	11800117 	ldw	r6,4(r2)
20085a98:	ddc00015 	stw	r23,0(sp)
20085a9c:	11400017 	ldw	r5,0(r2)
		printf("ERROR ********* UNABLE to OPEN /dev/msgdma_csr\r\n");
		return NULL;
	}

// Construct mSGDMA descriptors for each Frame Buf
	for (i = 0; i < num_buffers; i++) {
20085aa0:	a5000044 	addi	r20,r20,1
20085aa4:	b5800104 	addi	r22,r22,4
		alt_msgdma_construct_standard_mm_to_st_descriptor(pVid_DMA_CSR_Dev,
20085aa8:	009972c0 	call	2009972c <alt_msgdma_construct_standard_mm_to_st_descriptor>
		printf("ERROR ********* UNABLE to OPEN /dev/msgdma_csr\r\n");
		return NULL;
	}

// Construct mSGDMA descriptors for each Frame Buf
	for (i = 0; i < num_buffers; i++) {
20085aac:	a57ff61e 	bne	r20,r21,20085a88 <__flash_rwdata_start+0xfffe9440>
20085ab0:	a4c00044 	addi	r19,r20,1
20085ab4:	9ce7883a 	add	r19,r19,r19
20085ab8:	9ce7883a 	add	r19,r19,r19
20085abc:	94e7883a 	add	r19,r18,r19
				DESC_CONTROL);
	}

	// Clear all Frame Bufs to Black
	for (i = 0; i < num_buffers; i++) {
		memset((void*) (display->buffer_ptrs[i]->buffer),
20085ac0:	88800017 	ldw	r2,0(r17)
20085ac4:	91801f17 	ldw	r6,124(r18)
20085ac8:	8c400104 	addi	r17,r17,4
20085acc:	11000117 	ldw	r4,4(r2)
20085ad0:	000b883a 	mov	r5,zero
20085ad4:	008a3180 	call	2008a318 <memset>
				(alt_u32 *) display->buffer_ptrs[i]->buffer, bytes_per_frame,
				DESC_CONTROL);
	}

	// Clear all Frame Bufs to Black
	for (i = 0; i < num_buffers; i++) {
20085ad8:	8cfff91e 	bne	r17,r19,20085ac0 <__flash_rwdata_start+0xfffe9478>
		ECE423_VIDEO_DISPLAY_BLACK_8, display->bytes_per_frame);
	}

	// start the mSGDMA by giving it a Descriptor
	while (alt_msgdma_standard_descriptor_async_transfer(pVid_DMA_CSR_Dev,
			display->buffer_ptrs[display->buffer_being_displayed]->desc_base)
20085adc:	90c01a17 	ldw	r3,104(r18)
		memset((void*) (display->buffer_ptrs[i]->buffer),
		ECE423_VIDEO_DISPLAY_BLACK_8, display->bytes_per_frame);
	}

	// start the mSGDMA by giving it a Descriptor
	while (alt_msgdma_standard_descriptor_async_transfer(pVid_DMA_CSR_Dev,
20085ae0:	8009883a 	mov	r4,r16
			display->buffer_ptrs[display->buffer_being_displayed]->desc_base)
20085ae4:	18c00044 	addi	r3,r3,1
20085ae8:	18c7883a 	add	r3,r3,r3
20085aec:	18c7883a 	add	r3,r3,r3
20085af0:	90c7883a 	add	r3,r18,r3
		memset((void*) (display->buffer_ptrs[i]->buffer),
		ECE423_VIDEO_DISPLAY_BLACK_8, display->bytes_per_frame);
	}

	// start the mSGDMA by giving it a Descriptor
	while (alt_msgdma_standard_descriptor_async_transfer(pVid_DMA_CSR_Dev,
20085af4:	18800017 	ldw	r2,0(r3)
20085af8:	11400017 	ldw	r5,0(r2)
20085afc:	009a8b80 	call	2009a8b8 <alt_msgdma_standard_descriptor_async_transfer>
20085b00:	103ff61e 	bne	r2,zero,20085adc <__flash_rwdata_start+0xfffe9494>
20085b04:	9005883a 	mov	r2,r18
			display->buffer_ptrs[display->buffer_being_displayed]->desc_base)
			!= 0) {
	}  // Keep Trying until there is room to Transfer another Frame

	return (display);
}
20085b08:	dfc00b17 	ldw	ra,44(sp)
20085b0c:	df000a17 	ldw	fp,40(sp)
20085b10:	ddc00917 	ldw	r23,36(sp)
20085b14:	dd800817 	ldw	r22,32(sp)
20085b18:	dd400717 	ldw	r21,28(sp)
20085b1c:	dd000617 	ldw	r20,24(sp)
20085b20:	dcc00517 	ldw	r19,20(sp)
20085b24:	dc800417 	ldw	r18,16(sp)
20085b28:	dc400317 	ldw	r17,12(sp)
20085b2c:	dc000217 	ldw	r16,8(sp)
20085b30:	dec00c04 	addi	sp,sp,48
20085b34:	f800283a 	ret
		display->buffer_ptrs[i]->desc_base =
				(alt_msgdma_standard_descriptor*) memalign(32,
						ece423_video_display_get_descriptor_span(display)); // Desc on Heap

		if (display->buffer_ptrs[i]->desc_base == NULL) {
			ret_code = -1;
20085b38:	05bfffc4 	movi	r22,-1
		int bytes_per_frame, int num_buffers) {
	int i, ret_code = 0;

	/* Allocate Frame Bufs and descriptor Bufs */

	for (i = 0; i < num_buffers; i++) {
20085b3c:	853fb21e 	bne	r16,r20,20085a08 <__flash_rwdata_start+0xfffe93c0>
20085b40:	003fc706 	br	20085a60 <__flash_rwdata_start+0xfffe9418>
		display->buffer_ptrs[i]->buffer = (void*) alt_uncached_malloc(
				(bytes_per_frame)); // malloc Frame Buf on Heap
//      display->buffer_ptrs[i]->buffer =
//        (void*) malloc(bytes_per_frame); // malloc Frame Buf on Heap
		if (display->buffer_ptrs[i]->buffer == NULL)
			ret_code = -1;
20085b44:	05bfffc4 	movi	r22,-1
20085b48:	003fbb06 	br	20085a38 <__flash_rwdata_start+0xfffe93f0>
	for (i = 0; i < num_buffers; i++) {
		display->buffer_ptrs[i] = (ece423_video_frame*) malloc(
				sizeof(ece423_video_frame)); // malloc Struct with 2 Ptrs

		if (display->buffer_ptrs[i] == NULL) {
			ret_code = -1;
20085b4c:	05bfffc4 	movi	r22,-1
20085b50:	003fb306 	br	20085a20 <__flash_rwdata_start+0xfffe93d8>

	descriptors_per_frame = 1;

	// DON'T EXCEED MAX Frame Bufs
	if (num_buffers > ECE423_VIDEO_DISPLAY_MAX_BUFFERS) {
		printf("The required number of buffers exceeds the max!\n");
20085b54:	01000034 	movhi	r4,0
20085b58:	21011804 	addi	r4,r4,1120
		num_buffers = ECE423_VIDEO_DISPLAY_MAX_BUFFERS;
20085b5c:	102b883a 	mov	r21,r2

	descriptors_per_frame = 1;

	// DON'T EXCEED MAX Frame Bufs
	if (num_buffers > ECE423_VIDEO_DISPLAY_MAX_BUFFERS) {
		printf("The required number of buffers exceeds the max!\n");
20085b60:	008a56c0 	call	2008a56c <puts>
20085b64:	003f9306 	br	200859b4 <__flash_rwdata_start+0xfffe936c>
	}

	pVid_DMA_CSR_Dev = alt_msgdma_open(sgdma_name); // Pt to Cont & Status Dev
	display->mSGDMA = pVid_DMA_CSR_Dev;
	if (pVid_DMA_CSR_Dev == NULL) {
		printf("ERROR ********* UNABLE to OPEN /dev/msgdma_csr\r\n");
20085b68:	01000034 	movhi	r4,0
20085b6c:	21012d04 	addi	r4,r4,1204
20085b70:	008a56c0 	call	2008a56c <puts>
		return NULL;
20085b74:	0005883a 	mov	r2,zero
20085b78:	003fe306 	br	20085b08 <__flash_rwdata_start+0xfffe94c0>
	// DON'T EXCEED MAX Frame Bufs
	if (num_buffers > ECE423_VIDEO_DISPLAY_MAX_BUFFERS) {
		printf("The required number of buffers exceeds the max!\n");
		num_buffers = ECE423_VIDEO_DISPLAY_MAX_BUFFERS;
	} else if (num_buffers < 2){
		printf("The number of buffers must be > 2!\n");
20085b7c:	01000034 	movhi	r4,0
20085b80:	21012404 	addi	r4,r4,1168
		num_buffers = 2;
20085b84:	05400084 	movi	r21,2
	// DON'T EXCEED MAX Frame Bufs
	if (num_buffers > ECE423_VIDEO_DISPLAY_MAX_BUFFERS) {
		printf("The required number of buffers exceeds the max!\n");
		num_buffers = ECE423_VIDEO_DISPLAY_MAX_BUFFERS;
	} else if (num_buffers < 2){
		printf("The number of buffers must be > 2!\n");
20085b88:	008a56c0 	call	2008a56c <puts>
20085b8c:	003f8906 	br	200859b4 <__flash_rwdata_start+0xfffe936c>
 ******************************************************************/
ece423_video_display* ece423_video_display_init(char* sgdma_name, int width,
		int height, int num_buffers) {

	if (ece423_init_hdmi()) {
		printf("Failed to initiate the HDMI chip!\n");
20085b90:	01000034 	movhi	r4,0
20085b94:	21010f04 	addi	r4,r4,1084
20085b98:	008a56c0 	call	2008a56c <puts>
		return 0;
20085b9c:	0005883a 	mov	r2,zero
20085ba0:	003fd906 	br	20085b08 <__flash_rwdata_start+0xfffe94c0>

20085ba4 <I2C_Write>:
void i2c_start(alt_u32 clk_base, alt_u32 data_base);
void i2c_stop(alt_u32 clk_base, alt_u32 data_base);
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);

bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
20085ba4:	defff504 	addi	sp,sp,-44
20085ba8:	ddc00815 	stw	r23,32(sp)
20085bac:	ddc00b03 	ldbu	r23,44(sp)
20085bb0:	dd800715 	stw	r22,28(sp)
20085bb4:	dd400615 	stw	r21,24(sp)
20085bb8:	dd000515 	stw	r20,20(sp)
20085bbc:	dcc00415 	stw	r19,16(sp)
20085bc0:	dc000115 	stw	r16,4(sp)
20085bc4:	dfc00a15 	stw	ra,40(sp)
20085bc8:	df000915 	stw	fp,36(sp)
20085bcc:	dc800315 	stw	r18,12(sp)
20085bd0:	dc400215 	stw	r17,8(sp)
20085bd4:	2829883a 	mov	r20,r5
20085bd8:	2021883a 	mov	r16,r4
20085bdc:	302b883a 	mov	r21,r6
20085be0:	d9c00005 	stb	r7,0(sp)

//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){

    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
20085be4:	2d800104 	addi	r22,r5,4
20085be8:	04c00044 	movi	r19,1
20085bec:	b4c00035 	stwio	r19,0(r22)

    // start condition
    SDA_HIGH(data_base); // data high
20085bf0:	2cc00035 	stwio	r19,0(r5)
    SCL_HIGH(clk_base);
20085bf4:	24c00035 	stwio	r19,0(r4)
    SCL_DELAY;
20085bf8:	9809883a 	mov	r4,r19
20085bfc:	0097e4c0 	call	20097e4c <usleep>

    SDA_LOW(data_base); // data low
20085c00:	a0000035 	stwio	zero,0(r20)
    SCL_DELAY;
20085c04:	9809883a 	mov	r4,r19
20085c08:	0097e4c0 	call	20097e4c <usleep>
    SCL_LOW(clk_base); // clock low
20085c0c:	80000035 	stwio	zero,0(r16)
    SCL_DELAY;
20085c10:	9809883a 	mov	r4,r19
20085c14:	0097e4c0 	call	20097e4c <usleep>
    bool bAck;
    int i;

    // assume, SCL = 0

    SDA_DIR_OUT(data_base);  // data write mode
20085c18:	b4c00035 	stwio	r19,0(r22)
20085c1c:	04800204 	movi	r18,8


}

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
    alt_u8 Mask = 0x80;
20085c20:	073fe004 	movi	fp,-128
20085c24:	00000c06 	br	20085c58 <I2C_Write+0xb4>

    for(i=0;i<8;i++){
        SCL_LOW(clk_base);  // new, make sure data change at clk low
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
            SDA_HIGH(data_base);
20085c28:	a4c00035 	stwio	r19,0(r20)
        }else{
            SDA_LOW(data_base);
        }
        Mask >>= 1; // there is a delay in this command
20085c2c:	e0c03fcc 	andi	r3,fp,255
20085c30:	1838d07a 	srli	fp,r3,1
        // clock high
        SCL_HIGH(clk_base);
20085c34:	04400044 	movi	r17,1
20085c38:	84c00035 	stwio	r19,0(r16)
        SCL_DELAY;
20085c3c:	8809883a 	mov	r4,r17
20085c40:	0097e4c0 	call	20097e4c <usleep>
        SCL_LOW(clk_base);
20085c44:	80000035 	stwio	zero,0(r16)
20085c48:	94bfffc4 	addi	r18,r18,-1
        SCL_DELAY;
20085c4c:	8809883a 	mov	r4,r17
20085c50:	0097e4c0 	call	20097e4c <usleep>

    // assume, SCL = 0

    SDA_DIR_OUT(data_base);  // data write mode

    for(i=0;i<8;i++){
20085c54:	90000626 	beq	r18,zero,20085c70 <I2C_Write+0xcc>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
20085c58:	80000035 	stwio	zero,0(r16)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
20085c5c:	e544703a 	and	r2,fp,r21
20085c60:	10803fcc 	andi	r2,r2,255
20085c64:	103ff01e 	bne	r2,zero,20085c28 <__flash_rwdata_start+0xfffe95e0>
            SDA_HIGH(data_base);
        }else{
            SDA_LOW(data_base);
20085c68:	a0000035 	stwio	zero,0(r20)
20085c6c:	003fef06 	br	20085c2c <__flash_rwdata_start+0xfffe95e4>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }

    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
20085c70:	b0000035 	stwio	zero,0(r22)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
20085c74:	84400035 	stwio	r17,0(r16)
    SCL_DELAY;  // clock high delay
20085c78:	8809883a 	mov	r4,r17
20085c7c:	0097e4c0 	call	20097e4c <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
20085c80:	a4800037 	ldwio	r18,0(r20)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low
20085c84:	80000035 	stwio	zero,0(r16)
    SCL_DELAY; // clock low delay
20085c88:	8809883a 	mov	r4,r17
20085c8c:	0097e4c0 	call	20097e4c <usleep>

bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
    bool bSuccess = TRUE;

    i2c_start(clk_base, data_base);
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
20085c90:	9000201e 	bne	r18,zero,20085d14 <I2C_Write+0x170>
    bool bAck;
    int i;

    // assume, SCL = 0

    SDA_DIR_OUT(data_base);  // data write mode
20085c94:	b4400035 	stwio	r17,0(r22)
20085c98:	05400204 	movi	r21,8


}

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
    alt_u8 Mask = 0x80;
20085c9c:	04ffe004 	movi	r19,-128
20085ca0:	00000c06 	br	20085cd4 <I2C_Write+0x130>

    for(i=0;i<8;i++){
        SCL_LOW(clk_base);  // new, make sure data change at clk low
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
            SDA_HIGH(data_base);
20085ca4:	a4400035 	stwio	r17,0(r20)
        }else{
            SDA_LOW(data_base);
        }
        Mask >>= 1; // there is a delay in this command
20085ca8:	9cc03fcc 	andi	r19,r19,255
20085cac:	9826d07a 	srli	r19,r19,1
        // clock high
        SCL_HIGH(clk_base);
20085cb0:	04800044 	movi	r18,1
20085cb4:	84400035 	stwio	r17,0(r16)
        SCL_DELAY;
20085cb8:	9009883a 	mov	r4,r18
20085cbc:	0097e4c0 	call	20097e4c <usleep>
        SCL_LOW(clk_base);
20085cc0:	80000035 	stwio	zero,0(r16)
20085cc4:	ad7fffc4 	addi	r21,r21,-1
        SCL_DELAY;
20085cc8:	9009883a 	mov	r4,r18
20085ccc:	0097e4c0 	call	20097e4c <usleep>

    // assume, SCL = 0

    SDA_DIR_OUT(data_base);  // data write mode

    for(i=0;i<8;i++){
20085cd0:	a8000726 	beq	r21,zero,20085cf0 <I2C_Write+0x14c>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
20085cd4:	80000035 	stwio	zero,0(r16)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
20085cd8:	d8c00003 	ldbu	r3,0(sp)
20085cdc:	98c4703a 	and	r2,r19,r3
20085ce0:	10803fcc 	andi	r2,r2,255
20085ce4:	103fef1e 	bne	r2,zero,20085ca4 <__flash_rwdata_start+0xfffe965c>
            SDA_HIGH(data_base);
        }else{
            SDA_LOW(data_base);
20085ce8:	a0000035 	stwio	zero,0(r20)
20085cec:	003fee06 	br	20085ca8 <__flash_rwdata_start+0xfffe9660>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }

    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
20085cf0:	b0000035 	stwio	zero,0(r22)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
20085cf4:	84800035 	stwio	r18,0(r16)
    SCL_DELAY;  // clock high delay
20085cf8:	9009883a 	mov	r4,r18
20085cfc:	0097e4c0 	call	20097e4c <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
20085d00:	a4400037 	ldwio	r17,0(r20)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low
20085d04:	80000035 	stwio	zero,0(r16)
    SCL_DELAY; // clock low delay
20085d08:	9009883a 	mov	r4,r18
20085d0c:	0097e4c0 	call	20097e4c <usleep>
    i2c_start(clk_base, data_base);
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
20085d10:	88001926 	beq	r17,zero,20085d78 <I2C_Write+0x1d4>


}

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
    alt_u8 Mask = 0x80;
20085d14:	0025883a 	mov	r18,zero

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
    // assume SCL = 0

    SDA_DIR_OUT(data_base);  // data output enabled
20085d18:	04400044 	movi	r17,1
20085d1c:	b4400035 	stwio	r17,0(r22)
    SDA_LOW(data_base); // Data Low
20085d20:	a0000035 	stwio	zero,0(r20)
    //SCL_DELAY;
    SCL_HIGH(clk_base);  // clock high
20085d24:	84400035 	stwio	r17,0(r16)
    SCL_DELAY; // clock high long delay
20085d28:	8809883a 	mov	r4,r17
20085d2c:	0097e4c0 	call	20097e4c <usleep>
    SDA_HIGH(data_base); // data high
20085d30:	a4400035 	stwio	r17,0(r20)
    SCL_DELAY; // data high delay
20085d34:	8809883a 	mov	r4,r17
20085d38:	0097e4c0 	call	20097e4c <usleep>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);

    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
20085d3c:	0106d604 	movi	r4,7000
20085d40:	0097e4c0 	call	20097e4c <usleep>

    return bSuccess;


}
20085d44:	9005883a 	mov	r2,r18
20085d48:	dfc00a17 	ldw	ra,40(sp)
20085d4c:	df000917 	ldw	fp,36(sp)
20085d50:	ddc00817 	ldw	r23,32(sp)
20085d54:	dd800717 	ldw	r22,28(sp)
20085d58:	dd400617 	ldw	r21,24(sp)
20085d5c:	dd000517 	ldw	r20,20(sp)
20085d60:	dcc00417 	ldw	r19,16(sp)
20085d64:	dc800317 	ldw	r18,12(sp)
20085d68:	dc400217 	ldw	r17,8(sp)
20085d6c:	dc000117 	ldw	r16,4(sp)
20085d70:	dec00b04 	addi	sp,sp,44
20085d74:	f800283a 	ret
    bool bAck;
    int i;

    // assume, SCL = 0

    SDA_DIR_OUT(data_base);  // data write mode
20085d78:	b4800035 	stwio	r18,0(r22)
20085d7c:	04c00204 	movi	r19,8


}

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
    alt_u8 Mask = 0x80;
20085d80:	047fe004 	movi	r17,-128
20085d84:	00000c06 	br	20085db8 <I2C_Write+0x214>

    for(i=0;i<8;i++){
        SCL_LOW(clk_base);  // new, make sure data change at clk low
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
            SDA_HIGH(data_base);
20085d88:	a4800035 	stwio	r18,0(r20)
        }else{
            SDA_LOW(data_base);
        }
        Mask >>= 1; // there is a delay in this command
20085d8c:	8c403fcc 	andi	r17,r17,255
20085d90:	8822d07a 	srli	r17,r17,1
        // clock high
        SCL_HIGH(clk_base);
20085d94:	05400044 	movi	r21,1
20085d98:	84800035 	stwio	r18,0(r16)
        SCL_DELAY;
20085d9c:	a809883a 	mov	r4,r21
20085da0:	0097e4c0 	call	20097e4c <usleep>
        SCL_LOW(clk_base);
20085da4:	80000035 	stwio	zero,0(r16)
20085da8:	9cffffc4 	addi	r19,r19,-1
        SCL_DELAY;
20085dac:	a809883a 	mov	r4,r21
20085db0:	0097e4c0 	call	20097e4c <usleep>

    // assume, SCL = 0

    SDA_DIR_OUT(data_base);  // data write mode

    for(i=0;i<8;i++){
20085db4:	98000626 	beq	r19,zero,20085dd0 <I2C_Write+0x22c>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
20085db8:	80000035 	stwio	zero,0(r16)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
20085dbc:	8dc4703a 	and	r2,r17,r23
20085dc0:	10803fcc 	andi	r2,r2,255
20085dc4:	103ff01e 	bne	r2,zero,20085d88 <__flash_rwdata_start+0xfffe9740>
            SDA_HIGH(data_base);
        }else{
            SDA_LOW(data_base);
20085dc8:	a0000035 	stwio	zero,0(r20)
20085dcc:	003fef06 	br	20085d8c <__flash_rwdata_start+0xfffe9744>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }

    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
20085dd0:	b0000035 	stwio	zero,0(r22)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
20085dd4:	85400035 	stwio	r21,0(r16)
    SCL_DELAY;  // clock high delay
20085dd8:	a809883a 	mov	r4,r21
20085ddc:	0097e4c0 	call	20097e4c <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
20085de0:	a4800037 	ldwio	r18,0(r20)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low
20085de4:	80000035 	stwio	zero,0(r16)
    SCL_DELAY; // clock low delay
20085de8:	a809883a 	mov	r4,r21
20085dec:	0097e4c0 	call	20097e4c <usleep>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){
20085df0:	9025003a 	cmpeq	r18,r18,zero
20085df4:	003fc806 	br	20085d18 <__flash_rwdata_start+0xfffe96d0>

20085df8 <I2C_Read>:
    return bSuccess;


}

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
20085df8:	defff504 	addi	sp,sp,-44
20085dfc:	df000915 	stw	fp,36(sp)
20085e00:	dd800715 	stw	r22,28(sp)
20085e04:	dd000515 	stw	r20,20(sp)
20085e08:	dc800315 	stw	r18,12(sp)
20085e0c:	dc000115 	stw	r16,4(sp)
20085e10:	dfc00a15 	stw	ra,40(sp)
20085e14:	ddc00815 	stw	r23,32(sp)
20085e18:	dd400615 	stw	r21,24(sp)
20085e1c:	dcc00415 	stw	r19,16(sp)
20085e20:	dc400215 	stw	r17,8(sp)
20085e24:	2825883a 	mov	r18,r5
20085e28:	2021883a 	mov	r16,r4
20085e2c:	d9800015 	stw	r6,0(sp)
20085e30:	3839883a 	mov	fp,r7

//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){

    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
20085e34:	2d800104 	addi	r22,r5,4
20085e38:	05000044 	movi	r20,1
20085e3c:	b5000035 	stwio	r20,0(r22)

    // start condition
    SDA_HIGH(data_base); // data high
20085e40:	2d000035 	stwio	r20,0(r5)
    SCL_HIGH(clk_base);
20085e44:	25000035 	stwio	r20,0(r4)
    SCL_DELAY;
20085e48:	a009883a 	mov	r4,r20
20085e4c:	0097e4c0 	call	20097e4c <usleep>

    SDA_LOW(data_base); // data low
20085e50:	90000035 	stwio	zero,0(r18)
    SCL_DELAY;
20085e54:	a009883a 	mov	r4,r20
20085e58:	0097e4c0 	call	20097e4c <usleep>
    SCL_LOW(clk_base); // clock low
20085e5c:	80000035 	stwio	zero,0(r16)
    SCL_DELAY;
20085e60:	a009883a 	mov	r4,r20
20085e64:	0097e4c0 	call	20097e4c <usleep>

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
    bool bSuccess = TRUE;

    i2c_start(clk_base, data_base);
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
20085e68:	d8800017 	ldw	r2,0(sp)
20085e6c:	102b883a 	mov	r21,r2
    bool bAck;
    int i;

    // assume, SCL = 0

    SDA_DIR_OUT(data_base);  // data write mode
20085e70:	b5000035 	stwio	r20,0(r22)
20085e74:	04c00204 	movi	r19,8


}

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
    alt_u8 Mask = 0x80;
20085e78:	05ffe004 	movi	r23,-128
20085e7c:	00000c06 	br	20085eb0 <I2C_Read+0xb8>

    for(i=0;i<8;i++){
        SCL_LOW(clk_base);  // new, make sure data change at clk low
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
            SDA_HIGH(data_base);
20085e80:	95000035 	stwio	r20,0(r18)
        }else{
            SDA_LOW(data_base);
        }
        Mask >>= 1; // there is a delay in this command
20085e84:	b8c03fcc 	andi	r3,r23,255
20085e88:	182ed07a 	srli	r23,r3,1
        // clock high
        SCL_HIGH(clk_base);
20085e8c:	04400044 	movi	r17,1
20085e90:	85000035 	stwio	r20,0(r16)
        SCL_DELAY;
20085e94:	8809883a 	mov	r4,r17
20085e98:	0097e4c0 	call	20097e4c <usleep>
        SCL_LOW(clk_base);
20085e9c:	80000035 	stwio	zero,0(r16)
20085ea0:	9cffffc4 	addi	r19,r19,-1
        SCL_DELAY;
20085ea4:	8809883a 	mov	r4,r17
20085ea8:	0097e4c0 	call	20097e4c <usleep>

    // assume, SCL = 0

    SDA_DIR_OUT(data_base);  // data write mode

    for(i=0;i<8;i++){
20085eac:	98000626 	beq	r19,zero,20085ec8 <I2C_Read+0xd0>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
20085eb0:	80000035 	stwio	zero,0(r16)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
20085eb4:	bd44703a 	and	r2,r23,r21
20085eb8:	10803fcc 	andi	r2,r2,255
20085ebc:	103ff01e 	bne	r2,zero,20085e80 <__flash_rwdata_start+0xfffe9838>
            SDA_HIGH(data_base);
        }else{
            SDA_LOW(data_base);
20085ec0:	90000035 	stwio	zero,0(r18)
20085ec4:	003fef06 	br	20085e84 <__flash_rwdata_start+0xfffe983c>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }

    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
20085ec8:	b0000035 	stwio	zero,0(r22)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
20085ecc:	84400035 	stwio	r17,0(r16)
    SCL_DELAY;  // clock high delay
20085ed0:	8809883a 	mov	r4,r17
20085ed4:	0097e4c0 	call	20097e4c <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
20085ed8:	94c00037 	ldwio	r19,0(r18)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low
20085edc:	80000035 	stwio	zero,0(r16)
    SCL_DELAY; // clock low delay
20085ee0:	8809883a 	mov	r4,r17
20085ee4:	0097e4c0 	call	20097e4c <usleep>

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
    bool bSuccess = TRUE;

    i2c_start(clk_base, data_base);
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
20085ee8:	98001f1e 	bne	r19,zero,20085f68 <I2C_Read+0x170>
    bool bAck;
    int i;

    // assume, SCL = 0

    SDA_DIR_OUT(data_base);  // data write mode
20085eec:	b4400035 	stwio	r17,0(r22)
20085ef0:	05400204 	movi	r21,8


}

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
    alt_u8 Mask = 0x80;
20085ef4:	053fe004 	movi	r20,-128
20085ef8:	00000c06 	br	20085f2c <I2C_Read+0x134>

    for(i=0;i<8;i++){
        SCL_LOW(clk_base);  // new, make sure data change at clk low
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
            SDA_HIGH(data_base);
20085efc:	94400035 	stwio	r17,0(r18)
        }else{
            SDA_LOW(data_base);
        }
        Mask >>= 1; // there is a delay in this command
20085f00:	a5003fcc 	andi	r20,r20,255
20085f04:	a028d07a 	srli	r20,r20,1
        // clock high
        SCL_HIGH(clk_base);
20085f08:	04c00044 	movi	r19,1
20085f0c:	84400035 	stwio	r17,0(r16)
        SCL_DELAY;
20085f10:	9809883a 	mov	r4,r19
20085f14:	0097e4c0 	call	20097e4c <usleep>
        SCL_LOW(clk_base);
20085f18:	80000035 	stwio	zero,0(r16)
20085f1c:	ad7fffc4 	addi	r21,r21,-1
        SCL_DELAY;
20085f20:	9809883a 	mov	r4,r19
20085f24:	0097e4c0 	call	20097e4c <usleep>

    // assume, SCL = 0

    SDA_DIR_OUT(data_base);  // data write mode

    for(i=0;i<8;i++){
20085f28:	a8000626 	beq	r21,zero,20085f44 <I2C_Read+0x14c>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
20085f2c:	80000035 	stwio	zero,0(r16)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
20085f30:	a704703a 	and	r2,r20,fp
20085f34:	10803fcc 	andi	r2,r2,255
20085f38:	103ff01e 	bne	r2,zero,20085efc <__flash_rwdata_start+0xfffe98b4>
            SDA_HIGH(data_base);
        }else{
            SDA_LOW(data_base);
20085f3c:	90000035 	stwio	zero,0(r18)
20085f40:	003fef06 	br	20085f00 <__flash_rwdata_start+0xfffe98b8>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }

    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
20085f44:	b0000035 	stwio	zero,0(r22)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
20085f48:	84c00035 	stwio	r19,0(r16)
    SCL_DELAY;  // clock high delay
20085f4c:	9809883a 	mov	r4,r19
20085f50:	0097e4c0 	call	20097e4c <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
20085f54:	94400037 	ldwio	r17,0(r18)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low
20085f58:	80000035 	stwio	zero,0(r16)
    SCL_DELAY; // clock low delay
20085f5c:	9809883a 	mov	r4,r19
20085f60:	0097e4c0 	call	20097e4c <usleep>
    i2c_start(clk_base, data_base);
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
20085f64:	88002326 	beq	r17,zero,20085ff4 <I2C_Read+0x1fc>

//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){

    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
20085f68:	04400044 	movi	r17,1
20085f6c:	b4400035 	stwio	r17,0(r22)

    // start condition
    SDA_HIGH(data_base); // data high
20085f70:	94400035 	stwio	r17,0(r18)
    SCL_HIGH(clk_base);
20085f74:	84400035 	stwio	r17,0(r16)
    SCL_DELAY;
20085f78:	8809883a 	mov	r4,r17
20085f7c:	0097e4c0 	call	20097e4c <usleep>

    SDA_LOW(data_base); // data low
20085f80:	90000035 	stwio	zero,0(r18)
    SCL_DELAY;
20085f84:	8809883a 	mov	r4,r17
20085f88:	0097e4c0 	call	20097e4c <usleep>
    SCL_LOW(clk_base); // clock low
20085f8c:	80000035 	stwio	zero,0(r16)
    SCL_DELAY;
20085f90:	8809883a 	mov	r4,r17
20085f94:	0097e4c0 	call	20097e4c <usleep>
    SCL_DELAY; // clock low delay
    return bAck;
}

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
    alt_u8 Data=0;
20085f98:	0027883a 	mov	r19,zero

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
    // assume SCL = 0

    SDA_DIR_OUT(data_base);  // data output enabled
20085f9c:	04400044 	movi	r17,1
20085fa0:	b4400035 	stwio	r17,0(r22)
    SDA_LOW(data_base); // Data Low
20085fa4:	90000035 	stwio	zero,0(r18)
    //SCL_DELAY;
    SCL_HIGH(clk_base);  // clock high
20085fa8:	84400035 	stwio	r17,0(r16)
    SCL_DELAY; // clock high long delay
20085fac:	8809883a 	mov	r4,r17
20085fb0:	0097e4c0 	call	20097e4c <usleep>
    SDA_HIGH(data_base); // data high
20085fb4:	94400035 	stwio	r17,0(r18)
    SCL_DELAY; // data high delay
20085fb8:	8809883a 	mov	r4,r17
20085fbc:	0097e4c0 	call	20097e4c <usleep>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
    }
    i2c_stop(clk_base, data_base);

    return bSuccess;
}
20085fc0:	9805883a 	mov	r2,r19
20085fc4:	dfc00a17 	ldw	ra,40(sp)
20085fc8:	df000917 	ldw	fp,36(sp)
20085fcc:	ddc00817 	ldw	r23,32(sp)
20085fd0:	dd800717 	ldw	r22,28(sp)
20085fd4:	dd400617 	ldw	r21,24(sp)
20085fd8:	dd000517 	ldw	r20,20(sp)
20085fdc:	dcc00417 	ldw	r19,16(sp)
20085fe0:	dc800317 	ldw	r18,12(sp)
20085fe4:	dc400217 	ldw	r17,8(sp)
20085fe8:	dc000117 	ldw	r16,4(sp)
20085fec:	dec00b04 	addi	sp,sp,44
20085ff0:	f800283a 	ret

//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){

    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
20085ff4:	b4c00035 	stwio	r19,0(r22)

    // start condition
    SDA_HIGH(data_base); // data high
20085ff8:	94c00035 	stwio	r19,0(r18)
    SCL_HIGH(clk_base);
20085ffc:	84c00035 	stwio	r19,0(r16)
    SCL_DELAY;
20086000:	9809883a 	mov	r4,r19
20086004:	0097e4c0 	call	20097e4c <usleep>

    SDA_LOW(data_base); // data low
20086008:	90000035 	stwio	zero,0(r18)
    SCL_DELAY;
2008600c:	9809883a 	mov	r4,r19
20086010:	0097e4c0 	call	20097e4c <usleep>
    SCL_LOW(clk_base); // clock low
20086014:	80000035 	stwio	zero,0(r16)
    SCL_DELAY;
20086018:	9809883a 	mov	r4,r19
2008601c:	0097e4c0 	call	20097e4c <usleep>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }
    i2c_start(clk_base, data_base);  // restart
    DeviceAddr |= 1; // Read
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
20086020:	d8800017 	ldw	r2,0(sp)
20086024:	15c00054 	ori	r23,r2,1
    bool bAck;
    int i;

    // assume, SCL = 0

    SDA_DIR_OUT(data_base);  // data write mode
20086028:	b4c00035 	stwio	r19,0(r22)
2008602c:	05400204 	movi	r21,8


}

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
    alt_u8 Mask = 0x80;
20086030:	047fe004 	movi	r17,-128
20086034:	00000c06 	br	20086068 <I2C_Read+0x270>

    for(i=0;i<8;i++){
        SCL_LOW(clk_base);  // new, make sure data change at clk low
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
            SDA_HIGH(data_base);
20086038:	94c00035 	stwio	r19,0(r18)
        }else{
            SDA_LOW(data_base);
        }
        Mask >>= 1; // there is a delay in this command
2008603c:	8c403fcc 	andi	r17,r17,255
20086040:	8822d07a 	srli	r17,r17,1
        // clock high
        SCL_HIGH(clk_base);
20086044:	05000044 	movi	r20,1
20086048:	84c00035 	stwio	r19,0(r16)
        SCL_DELAY;
2008604c:	a009883a 	mov	r4,r20
20086050:	0097e4c0 	call	20097e4c <usleep>
        SCL_LOW(clk_base);
20086054:	80000035 	stwio	zero,0(r16)
20086058:	ad7fffc4 	addi	r21,r21,-1
        SCL_DELAY;
2008605c:	a009883a 	mov	r4,r20
20086060:	0097e4c0 	call	20097e4c <usleep>

    // assume, SCL = 0

    SDA_DIR_OUT(data_base);  // data write mode

    for(i=0;i<8;i++){
20086064:	a8000626 	beq	r21,zero,20086080 <I2C_Read+0x288>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
20086068:	80000035 	stwio	zero,0(r16)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
2008606c:	8dc4703a 	and	r2,r17,r23
20086070:	10803fcc 	andi	r2,r2,255
20086074:	103ff01e 	bne	r2,zero,20086038 <__flash_rwdata_start+0xfffe99f0>
            SDA_HIGH(data_base);
        }else{
            SDA_LOW(data_base);
20086078:	90000035 	stwio	zero,0(r18)
2008607c:	003fef06 	br	2008603c <__flash_rwdata_start+0xfffe99f4>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }

    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
20086080:	b0000035 	stwio	zero,0(r22)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
20086084:	85000035 	stwio	r20,0(r16)
    SCL_DELAY;  // clock high delay
20086088:	a009883a 	mov	r4,r20
2008608c:	0097e4c0 	call	20097e4c <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
20086090:	94400037 	ldwio	r17,0(r18)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low
20086094:	80000035 	stwio	zero,0(r16)
    SCL_DELAY; // clock low delay
20086098:	a009883a 	mov	r4,r20
2008609c:	0097e4c0 	call	20097e4c <usleep>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }
    i2c_start(clk_base, data_base);  // restart
    DeviceAddr |= 1; // Read
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
200860a0:	883fbd1e 	bne	r17,zero,20085f98 <__flash_rwdata_start+0xfffe9950>
    alt_u8 Data=0;
    int i;

    // assume SCL = low

    SDA_DIR_IN(data_base);  // set data read mode
200860a4:	b0000035 	stwio	zero,0(r22)
    SCL_LOW(clk_base); // clock low
200860a8:	80000035 	stwio	zero,0(r16)
    SCL_DELAY; // clock low delay
200860ac:	a009883a 	mov	r4,r20
200860b0:	0097e4c0 	call	20097e4c <usleep>
200860b4:	05400204 	movi	r21,8
    SCL_DELAY; // clock low delay
    return bAck;
}

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
    alt_u8 Data=0;
200860b8:	0023883a 	mov	r17,zero
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
        Data <<= 1;
200860bc:	8c67883a 	add	r19,r17,r17
200860c0:	9823883a 	mov	r17,r19
        SCL_HIGH(clk_base);  // clock high
200860c4:	85000035 	stwio	r20,0(r16)
        SCL_DELAY;
200860c8:	01000044 	movi	r4,1
200860cc:	0097e4c0 	call	20097e4c <usleep>
        if (SDA_READ(data_base))  // read data
200860d0:	90800037 	ldwio	r2,0(r18)
200860d4:	10000126 	beq	r2,zero,200860dc <I2C_Read+0x2e4>
            Data |= 0x01;
200860d8:	9c400054 	ori	r17,r19,1
        SCL_LOW(clk_base);  // clock log
200860dc:	80000035 	stwio	zero,0(r16)
        SCL_DELAY;
200860e0:	04c00044 	movi	r19,1
200860e4:	ad7fffc4 	addi	r21,r21,-1
200860e8:	9809883a 	mov	r4,r19
200860ec:	0097e4c0 	call	20097e4c <usleep>

    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
200860f0:	a83ff21e 	bne	r21,zero,200860bc <__flash_rwdata_start+0xfffe9a74>
        SCL_LOW(clk_base);  // clock log
        SCL_DELAY;
    }

    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
200860f4:	80000035 	stwio	zero,0(r16)
    SDA_DIR_OUT(data_base);  // set data write mode
200860f8:	b4c00035 	stwio	r19,0(r22)
    if (bAck)
        SDA_LOW(data_base);
    else
        SDA_HIGH(data_base);
200860fc:	94c00035 	stwio	r19,0(r18)
    SCL_HIGH(clk_base); // clock high
20086100:	84c00035 	stwio	r19,0(r16)
    SCL_DELAY; // clock high  delay
20086104:	9809883a 	mov	r4,r19
20086108:	0097e4c0 	call	20097e4c <usleep>
    SCL_LOW(clk_base); // clock low
2008610c:	80000035 	stwio	zero,0(r16)
    SCL_DELAY; // clock low delay
20086110:	9809883a 	mov	r4,r19
20086114:	0097e4c0 	call	20097e4c <usleep>
    SDA_LOW(data_base);  // data low
20086118:	90000035 	stwio	zero,0(r18)
    SCL_DELAY; // data low delay
2008611c:	9809883a 	mov	r4,r19
20086120:	0097e4c0 	call	20097e4c <usleep>
//    SDA_DIR_IN;  // set data read mode

    *pData = Data;
20086124:	d8800b17 	ldw	r2,44(sp)
20086128:	14400005 	stb	r17,0(r2)
2008612c:	003f9b06 	br	20085f9c <__flash_rwdata_start+0xfffe9954>

20086130 <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
20086130:	defffb04 	addi	sp,sp,-20
20086134:	dc800215 	stw	r18,8(sp)
20086138:	dc400115 	stw	r17,4(sp)
2008613c:	dc000015 	stw	r16,0(sp)
20086140:	dfc00415 	stw	ra,16(sp)
20086144:	dcc00315 	stw	r19,12(sp)
20086148:	2025883a 	mov	r18,r4
2008614c:	2823883a 	mov	r17,r5

    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
20086150:	04000044 	movi	r16,1
20086154:	2c000135 	stwio	r16,4(r5)

    // start condition
    SDA_HIGH(data_base); // data high
20086158:	2c000035 	stwio	r16,0(r5)
    SCL_HIGH(clk_base);
2008615c:	24000035 	stwio	r16,0(r4)
    SCL_DELAY;
20086160:	8009883a 	mov	r4,r16
20086164:	0097e4c0 	call	20097e4c <usleep>

    SDA_LOW(data_base); // data low
20086168:	0027883a 	mov	r19,zero
2008616c:	8cc00035 	stwio	r19,0(r17)
    SCL_DELAY;
20086170:	8009883a 	mov	r4,r16
20086174:	0097e4c0 	call	20097e4c <usleep>
    SCL_LOW(clk_base); // clock low
20086178:	94c00035 	stwio	r19,0(r18)
    SCL_DELAY;
2008617c:	8009883a 	mov	r4,r16
}
20086180:	dfc00417 	ldw	ra,16(sp)
20086184:	dcc00317 	ldw	r19,12(sp)
20086188:	dc800217 	ldw	r18,8(sp)
2008618c:	dc400117 	ldw	r17,4(sp)
20086190:	dc000017 	ldw	r16,0(sp)
20086194:	dec00504 	addi	sp,sp,20
    SCL_DELAY;

    SDA_LOW(data_base); // data low
    SCL_DELAY;
    SCL_LOW(clk_base); // clock low
    SCL_DELAY;
20086198:	0097e4c1 	jmpi	20097e4c <usleep>

2008619c <i2c_stop>:
}

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
2008619c:	defffd04 	addi	sp,sp,-12
200861a0:	dc400115 	stw	r17,4(sp)
200861a4:	dc000015 	stw	r16,0(sp)
200861a8:	dfc00215 	stw	ra,8(sp)
200861ac:	2823883a 	mov	r17,r5
    // assume SCL = 0

    SDA_DIR_OUT(data_base);  // data output enabled
200861b0:	04000044 	movi	r16,1
200861b4:	2c000135 	stwio	r16,4(r5)
    SDA_LOW(data_base); // Data Low
200861b8:	28000035 	stwio	zero,0(r5)
    //SCL_DELAY;
    SCL_HIGH(clk_base);  // clock high
200861bc:	24000035 	stwio	r16,0(r4)
    SCL_DELAY; // clock high long delay
200861c0:	8009883a 	mov	r4,r16
200861c4:	0097e4c0 	call	20097e4c <usleep>
    SDA_HIGH(data_base); // data high
200861c8:	8c000035 	stwio	r16,0(r17)
    SCL_DELAY; // data high delay
200861cc:	8009883a 	mov	r4,r16



}
200861d0:	dfc00217 	ldw	ra,8(sp)
200861d4:	dc400117 	ldw	r17,4(sp)
200861d8:	dc000017 	ldw	r16,0(sp)
200861dc:	dec00304 	addi	sp,sp,12
    SDA_LOW(data_base); // Data Low
    //SCL_DELAY;
    SCL_HIGH(clk_base);  // clock high
    SCL_DELAY; // clock high long delay
    SDA_HIGH(data_base); // data high
    SCL_DELAY; // data high delay
200861e0:	0097e4c1 	jmpi	20097e4c <usleep>

200861e4 <i2c_write>:



}

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
200861e4:	defff704 	addi	sp,sp,-36
200861e8:	dd800615 	stw	r22,24(sp)
200861ec:	dd400515 	stw	r21,20(sp)
200861f0:	dd000415 	stw	r20,16(sp)
200861f4:	dcc00315 	stw	r19,12(sp)
200861f8:	dc400115 	stw	r17,4(sp)
200861fc:	dfc00815 	stw	ra,32(sp)
20086200:	ddc00715 	stw	r23,28(sp)
20086204:	dc800215 	stw	r18,8(sp)
20086208:	dc000015 	stw	r16,0(sp)
2008620c:	2829883a 	mov	r20,r5
20086210:	2023883a 	mov	r17,r4
20086214:	302b883a 	mov	r21,r6
    bool bAck;
    int i;

    // assume, SCL = 0

    SDA_DIR_OUT(data_base);  // data write mode
20086218:	2d800104 	addi	r22,r5,4
2008621c:	04c00044 	movi	r19,1
20086220:	b4c00035 	stwio	r19,0(r22)
20086224:	04800204 	movi	r18,8


}

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
    alt_u8 Mask = 0x80;
20086228:	043fe004 	movi	r16,-128
2008622c:	00000c06 	br	20086260 <i2c_write+0x7c>

    for(i=0;i<8;i++){
        SCL_LOW(clk_base);  // new, make sure data change at clk low
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
            SDA_HIGH(data_base);
20086230:	a4c00035 	stwio	r19,0(r20)
        }else{
            SDA_LOW(data_base);
        }
        Mask >>= 1; // there is a delay in this command
20086234:	84003fcc 	andi	r16,r16,255
20086238:	8020d07a 	srli	r16,r16,1
        // clock high
        SCL_HIGH(clk_base);
2008623c:	05c00044 	movi	r23,1
20086240:	8cc00035 	stwio	r19,0(r17)
        SCL_DELAY;
20086244:	b809883a 	mov	r4,r23
20086248:	0097e4c0 	call	20097e4c <usleep>
        SCL_LOW(clk_base);
2008624c:	88000035 	stwio	zero,0(r17)
20086250:	94bfffc4 	addi	r18,r18,-1
        SCL_DELAY;
20086254:	b809883a 	mov	r4,r23
20086258:	0097e4c0 	call	20097e4c <usleep>

    // assume, SCL = 0

    SDA_DIR_OUT(data_base);  // data write mode

    for(i=0;i<8;i++){
2008625c:	90000626 	beq	r18,zero,20086278 <i2c_write+0x94>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
20086260:	88000035 	stwio	zero,0(r17)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
20086264:	8544703a 	and	r2,r16,r21
20086268:	10803fcc 	andi	r2,r2,255
2008626c:	103ff01e 	bne	r2,zero,20086230 <__flash_rwdata_start+0xfffe9be8>
            SDA_HIGH(data_base);
        }else{
            SDA_LOW(data_base);
20086270:	a0000035 	stwio	zero,0(r20)
20086274:	003fef06 	br	20086234 <__flash_rwdata_start+0xfffe9bec>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }

    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
20086278:	b0000035 	stwio	zero,0(r22)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
2008627c:	8dc00035 	stwio	r23,0(r17)
    SCL_DELAY;  // clock high delay
20086280:	b809883a 	mov	r4,r23
20086284:	0097e4c0 	call	20097e4c <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
20086288:	a4000037 	ldwio	r16,0(r20)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low
2008628c:	88000035 	stwio	zero,0(r17)
    SCL_DELAY; // clock low delay
20086290:	b809883a 	mov	r4,r23
20086294:	0097e4c0 	call	20097e4c <usleep>
    return bAck;
}
20086298:	8005003a 	cmpeq	r2,r16,zero
2008629c:	dfc00817 	ldw	ra,32(sp)
200862a0:	ddc00717 	ldw	r23,28(sp)
200862a4:	dd800617 	ldw	r22,24(sp)
200862a8:	dd400517 	ldw	r21,20(sp)
200862ac:	dd000417 	ldw	r20,16(sp)
200862b0:	dcc00317 	ldw	r19,12(sp)
200862b4:	dc800217 	ldw	r18,8(sp)
200862b8:	dc400117 	ldw	r17,4(sp)
200862bc:	dc000017 	ldw	r16,0(sp)
200862c0:	dec00904 	addi	sp,sp,36
200862c4:	f800283a 	ret

200862c8 <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
200862c8:	defff604 	addi	sp,sp,-40
200862cc:	df000815 	stw	fp,32(sp)
200862d0:	ddc00715 	stw	r23,28(sp)
200862d4:	dd800615 	stw	r22,24(sp)
200862d8:	dd000415 	stw	r20,16(sp)
200862dc:	dc800215 	stw	r18,8(sp)
200862e0:	dfc00915 	stw	ra,36(sp)
200862e4:	dd400515 	stw	r21,20(sp)
200862e8:	dcc00315 	stw	r19,12(sp)
200862ec:	dc400115 	stw	r17,4(sp)
200862f0:	dc000015 	stw	r16,0(sp)
200862f4:	2829883a 	mov	r20,r5
200862f8:	2025883a 	mov	r18,r4
200862fc:	302f883a 	mov	r23,r6
20086300:	3839883a 	mov	fp,r7
    alt_u8 Data=0;
    int i;

    // assume SCL = low

    SDA_DIR_IN(data_base);  // set data read mode
20086304:	2d800104 	addi	r22,r5,4
20086308:	b0000035 	stwio	zero,0(r22)
    SCL_LOW(clk_base); // clock low
2008630c:	20000035 	stwio	zero,0(r4)
    SCL_DELAY; // clock low delay
20086310:	01000044 	movi	r4,1
20086314:	0097e4c0 	call	20097e4c <usleep>
20086318:	04400204 	movi	r17,8
    SCL_DELAY; // clock low delay
    return bAck;
}

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
    alt_u8 Data=0;
2008631c:	0021883a 	mov	r16,zero
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
        Data <<= 1;
        SCL_HIGH(clk_base);  // clock high
20086320:	05400044 	movi	r21,1
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
        Data <<= 1;
20086324:	8427883a 	add	r19,r16,r16
20086328:	9821883a 	mov	r16,r19
        SCL_HIGH(clk_base);  // clock high
2008632c:	95400035 	stwio	r21,0(r18)
        SCL_DELAY;
20086330:	01000044 	movi	r4,1
20086334:	0097e4c0 	call	20097e4c <usleep>
        if (SDA_READ(data_base))  // read data
20086338:	a0800037 	ldwio	r2,0(r20)
2008633c:	10000126 	beq	r2,zero,20086344 <i2c_read+0x7c>
            Data |= 0x01;
20086340:	9c000054 	ori	r16,r19,1
        SCL_LOW(clk_base);  // clock log
20086344:	90000035 	stwio	zero,0(r18)
        SCL_DELAY;
20086348:	04c00044 	movi	r19,1
2008634c:	8c7fffc4 	addi	r17,r17,-1
20086350:	9809883a 	mov	r4,r19
20086354:	0097e4c0 	call	20097e4c <usleep>

    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
20086358:	883ff21e 	bne	r17,zero,20086324 <__flash_rwdata_start+0xfffe9cdc>
        SCL_LOW(clk_base);  // clock log
        SCL_DELAY;
    }

    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
2008635c:	90000035 	stwio	zero,0(r18)
    SDA_DIR_OUT(data_base);  // set data write mode
20086360:	b4c00035 	stwio	r19,0(r22)
    if (bAck)
20086364:	e000181e 	bne	fp,zero,200863c8 <i2c_read+0x100>
        SDA_LOW(data_base);
    else
        SDA_HIGH(data_base);
20086368:	a4c00035 	stwio	r19,0(r20)
    SCL_HIGH(clk_base); // clock high
2008636c:	04400044 	movi	r17,1
20086370:	94400035 	stwio	r17,0(r18)
    SCL_DELAY; // clock high  delay
20086374:	8809883a 	mov	r4,r17
20086378:	0097e4c0 	call	20097e4c <usleep>
    SCL_LOW(clk_base); // clock low
2008637c:	90000035 	stwio	zero,0(r18)
    SCL_DELAY; // clock low delay
20086380:	8809883a 	mov	r4,r17
20086384:	0097e4c0 	call	20097e4c <usleep>
    SDA_LOW(data_base);  // data low
20086388:	a0000035 	stwio	zero,0(r20)
    SCL_DELAY; // data low delay
2008638c:	8809883a 	mov	r4,r17
20086390:	0097e4c0 	call	20097e4c <usleep>
//    SDA_DIR_IN;  // set data read mode

    *pData = Data;
20086394:	bc000005 	stb	r16,0(r23)
}
20086398:	dfc00917 	ldw	ra,36(sp)
2008639c:	df000817 	ldw	fp,32(sp)
200863a0:	ddc00717 	ldw	r23,28(sp)
200863a4:	dd800617 	ldw	r22,24(sp)
200863a8:	dd400517 	ldw	r21,20(sp)
200863ac:	dd000417 	ldw	r20,16(sp)
200863b0:	dcc00317 	ldw	r19,12(sp)
200863b4:	dc800217 	ldw	r18,8(sp)
200863b8:	dc400117 	ldw	r17,4(sp)
200863bc:	dc000017 	ldw	r16,0(sp)
200863c0:	dec00a04 	addi	sp,sp,40
200863c4:	f800283a 	ret

    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
    SDA_DIR_OUT(data_base);  // set data write mode
    if (bAck)
        SDA_LOW(data_base);
200863c8:	a0000035 	stwio	zero,0(r20)
200863cc:	003fe706 	br	2008636c <__flash_rwdata_start+0xfffe9d24>

200863d0 <timer1_isr>:
volatile BUTTON_COMMANDS command = NO_CMD;

static void timer1_isr(void *context)
{
	//ack interupt
	IOWR(TIMER_1_BASE, 0, 0);
200863d0:	00880434 	movhi	r2,8208
200863d4:	10850004 	addi	r2,r2,5120
200863d8:	10000035 	stwio	zero,0(r2)

#ifdef PERIODIC_VIDEO
    if(is_video_playing && (disp != (void *)0) && ready_frames)
200863dc:	d0a00117 	ldw	r2,-32764(gp)
200863e0:	10000626 	beq	r2,zero,200863fc <timer1_isr+0x2c>
200863e4:	00800034 	movhi	r2,0
200863e8:	108a2504 	addi	r2,r2,10388
200863ec:	11000017 	ldw	r4,0(r2)
200863f0:	20000226 	beq	r4,zero,200863fc <timer1_isr+0x2c>
200863f4:	d0a01917 	ldw	r2,-32668(gp)
200863f8:	1000011e 	bne	r2,zero,20086400 <timer1_isr+0x30>
200863fc:	f800283a 	ret
	{
    	ready_frames--;
20086400:	d0a01917 	ldw	r2,-32668(gp)
20086404:	10bfffc4 	addi	r2,r2,-1
20086408:	d0a01915 	stw	r2,-32668(gp)
	    ece423_video_display_switch_frames(disp);
2008640c:	00852bc1 	jmpi	200852bc <ece423_video_display_switch_frames>

20086410 <pio_isr>:

static void pio_isr(void *context)
{
	int buttons_pressed;
	//ack interupt
    IOWR(KEY_BASE, 3, 0);
20086410:	00880434 	movhi	r2,8208
20086414:	10853f04 	addi	r2,r2,5372
20086418:	10000035 	stwio	zero,0(r2)

    buttons_pressed = IORD(KEY_BASE, 0);
2008641c:	00880434 	movhi	r2,8208
20086420:	10853c04 	addi	r2,r2,5360
20086424:	11000037 	ldwio	r4,0(r2)

    if (command != NO_CMD)
20086428:	d0e00017 	ldw	r3,-32768(gp)
2008642c:	00800144 	movi	r2,5
20086430:	18800126 	beq	r3,r2,20086438 <pio_isr+0x28>
20086434:	f800283a 	ret
    {
   	    return;
    }

    if((buttons_pressed & (1 << 0)) == 0)
20086438:	2080004c 	andi	r2,r4,1
2008643c:	10000926 	beq	r2,zero,20086464 <pio_isr+0x54>
    	else
    	{
    		command = START;
    	}
    }
    else if((buttons_pressed & (1 << 1)) == 0)
20086440:	2080008c 	andi	r2,r4,2
20086444:	10000e26 	beq	r2,zero,20086480 <pio_isr+0x70>
    {
    	command = CYCLE;
    }
    else if((buttons_pressed & (1 << 2)) == 0)
20086448:	2080010c 	andi	r2,r4,4
2008644c:	10000f26 	beq	r2,zero,2008648c <pio_isr+0x7c>
    {
    	command = REWIND;
    }
    else if((buttons_pressed & (1 << 3)) == 0)
20086450:	2100020c 	andi	r4,r4,8
20086454:	203ff71e 	bne	r4,zero,20086434 <__flash_rwdata_start+0xfffe9dec>
    {
    	command = FORWARD;
20086458:	00800104 	movi	r2,4
2008645c:	d0a00015 	stw	r2,-32768(gp)
20086460:	003ff406 	br	20086434 <__flash_rwdata_start+0xfffe9dec>
   	    return;
    }

    if((buttons_pressed & (1 << 0)) == 0)
    {
    	if(is_video_playing)
20086464:	d0a00117 	ldw	r2,-32764(gp)
20086468:	10000326 	beq	r2,zero,20086478 <pio_isr+0x68>
    	{
    		command = PAUSE;
2008646c:	00800044 	movi	r2,1
20086470:	d0a00015 	stw	r2,-32768(gp)
20086474:	f800283a 	ret
    	}
    	else
    	{
    		command = START;
20086478:	d0200015 	stw	zero,-32768(gp)
2008647c:	f800283a 	ret
    	}
    }
    else if((buttons_pressed & (1 << 1)) == 0)
    {
    	command = CYCLE;
20086480:	00800084 	movi	r2,2
20086484:	d0a00015 	stw	r2,-32768(gp)
20086488:	f800283a 	ret
    }
    else if((buttons_pressed & (1 << 2)) == 0)
    {
    	command = REWIND;
2008648c:	008000c4 	movi	r2,3
20086490:	d0a00015 	stw	r2,-32768(gp)
20086494:	f800283a 	ret

20086498 <main>:
	  alt_irq_enable(TIMER_1_IRQ);
}

int main (int argc, const char * argv[])
{
	  SDLIB_Init(SD_CONT_0_BASE);
20086498:	01080434 	movhi	r4,8208
	  alt_irq_register(TIMER_1_IRQ, (void *)0, timer1_isr);
	  alt_irq_enable(TIMER_1_IRQ);
}

int main (int argc, const char * argv[])
{
2008649c:	deffaa04 	addi	sp,sp,-344
	  SDLIB_Init(SD_CONT_0_BASE);
200864a0:	21040004 	addi	r4,r4,4096
	  alt_irq_register(TIMER_1_IRQ, (void *)0, timer1_isr);
	  alt_irq_enable(TIMER_1_IRQ);
}

int main (int argc, const char * argv[])
{
200864a4:	dfc05515 	stw	ra,340(sp)
200864a8:	dc804e15 	stw	r18,312(sp)
200864ac:	dc404d15 	stw	r17,308(sp)
200864b0:	df005415 	stw	fp,336(sp)
200864b4:	ddc05315 	stw	r23,332(sp)
200864b8:	dd805215 	stw	r22,328(sp)
200864bc:	dd405115 	stw	r21,324(sp)
200864c0:	dd005015 	stw	r20,320(sp)
200864c4:	dcc04f15 	stw	r19,316(sp)
200864c8:	dc004c15 	stw	r16,304(sp)
	  SDLIB_Init(SD_CONT_0_BASE);
200864cc:	00851440 	call	20085144 <SDLIB_Init>

	  FAT_HANDLE sd_fat_handle = Fat_Mount();
200864d0:	0081a1c0 	call	20081a1c <Fat_Mount>

	  FAT_BROWSE_HANDLE browse_handle;

	  Fat_FileBrowseBegin(sd_fat_handle, &browse_handle);
200864d4:	1009883a 	mov	r4,r2
200864d8:	d9404a04 	addi	r5,sp,296

int main (int argc, const char * argv[])
{
	  SDLIB_Init(SD_CONT_0_BASE);

	  FAT_HANDLE sd_fat_handle = Fat_Mount();
200864dc:	1025883a 	mov	r18,r2

	  FAT_BROWSE_HANDLE browse_handle;

	  Fat_FileBrowseBegin(sd_fat_handle, &browse_handle);
200864e0:	0081a580 	call	20081a58 <Fat_FileBrowseBegin>
    }
}

static void interrupts_init(void)
{
	  IOWR(KEY_BASE, 2, 0xF); // interupt on all buttons
200864e4:	00880434 	movhi	r2,8208
200864e8:	044003c4 	movi	r17,15
200864ec:	10853e04 	addi	r2,r2,5368
200864f0:	14400035 	stwio	r17,0(r2)
	  alt_irq_register(KEY_IRQ, (void *)0, pio_isr);
200864f4:	01880234 	movhi	r6,8200
200864f8:	31990404 	addi	r6,r6,25616
200864fc:	01000084 	movi	r4,2
20086500:	000b883a 	mov	r5,zero
20086504:	00974780 	call	20097478 <alt_irq_register>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20086508:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2008650c:	04ffff84 	movi	r19,-2
20086510:	1cc4703a 	and	r2,r3,r19
20086514:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
20086518:	04000034 	movhi	r16,0
2008651c:	840a3204 	addi	r16,r16,10440
20086520:	80800017 	ldw	r2,0(r16)
20086524:	10800114 	ori	r2,r2,4
20086528:	80800015 	stw	r2,0(r16)
  NIOS2_WRITE_IENABLE (alt_irq_active);
2008652c:	80800017 	ldw	r2,0(r16)
20086530:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20086534:	1801703a 	wrctl	status,r3
	  //1 second
	  //IOWR(TIMER_1_BASE, 3, 0x0832);
	  //IOWR(TIMER_1_BASE, 2, 0x1560);

	  //0.7 seconds
	  IOWR(TIMER_1_BASE, 3, 0x0537);
20086538:	00880434 	movhi	r2,8208
2008653c:	10850304 	addi	r2,r2,5132
20086540:	00c14dc4 	movi	r3,1335
20086544:	10c00035 	stwio	r3,0(r2)
	  IOWR(TIMER_1_BASE, 2, 0x24E0);
20086548:	00880434 	movhi	r2,8208
2008654c:	10850204 	addi	r2,r2,5128
20086550:	00c93804 	movi	r3,9440
20086554:	10c00035 	stwio	r3,0(r2)

	 //                      START   CONT   ITO
	  IOWR(TIMER_1_BASE, 1, (1<<2) |(1<<1) | 1 );
20086558:	00880434 	movhi	r2,8208
2008655c:	10850104 	addi	r2,r2,5124
20086560:	00c001c4 	movi	r3,7
20086564:	10c00035 	stwio	r3,0(r2)

	  alt_irq_register(TIMER_1_IRQ, (void *)0, timer1_isr);
20086568:	01880234 	movhi	r6,8200
2008656c:	3198f404 	addi	r6,r6,25552
20086570:	01000104 	movi	r4,4
20086574:	000b883a 	mov	r5,zero
20086578:	00974780 	call	20097478 <alt_irq_register>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2008657c:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20086580:	1ce6703a 	and	r19,r3,r19
20086584:	9801703a 	wrctl	status,r19
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
20086588:	80800017 	ldw	r2,0(r16)
2008658c:	10800414 	ori	r2,r2,16
20086590:	80800015 	stw	r2,0(r16)
  NIOS2_WRITE_IENABLE (alt_irq_active);
20086594:	80800017 	ldw	r2,0(r16)
20086598:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2008659c:	1801703a 	wrctl	status,r3
200865a0:	05800034 	movhi	r22,0
200865a4:	05400034 	movhi	r21,0
200865a8:	b58a2504 	addi	r22,r22,10388
200865ac:	ad430e04 	addi	r21,r21,3128


		if(video_found_flag)
		{
			mjpeg423_decode(p_filename, sd_fat_handle);
			if(command != CYCLE)
200865b0:	05000084 	movi	r20,2
			else
			{
				disp->buffer_being_written = ((disp->buffer_being_displayed + 1)
						% disp->num_frame_buffers);
				ready_frames = 0;
			    command = NO_CMD;
200865b4:	04c00144 	movi	r19,5

	  interrupts_init();

	  while(1)
	  {
		  if(Fat_FileBrowseNext(&browse_handle, &file_context) == FALSE)
200865b8:	d9004a04 	addi	r4,sp,296
200865bc:	d80b883a 	mov	r5,sp
200865c0:	0081a800 	call	20081a80 <Fat_FileBrowseNext>
200865c4:	1000031e 	bne	r2,zero,200865d4 <main+0x13c>
			  Fat_FileBrowseBegin(sd_fat_handle, &browse_handle);
200865c8:	9009883a 	mov	r4,r18
200865cc:	d9404a04 	addi	r5,sp,296
200865d0:	0081a580 	call	20081a58 <Fat_FileBrowseBegin>

		if(Fat_CheckExtension(&file_context, ".MPG"))
200865d4:	01400034 	movhi	r5,0
200865d8:	29413904 	addi	r5,r5,1252
200865dc:	d809883a 	mov	r4,sp
200865e0:	008227c0 	call	2008227c <Fat_CheckExtension>
200865e4:	103ff426 	beq	r2,zero,200865b8 <__flash_rwdata_start+0xfffe9f70>
		{
		    p_filename = Fat_GetFileName(&file_context);
200865e8:	d809883a 	mov	r4,sp
200865ec:	00822d80 	call	200822d8 <Fat_GetFileName>
		}


		if(video_found_flag)
		{
			mjpeg423_decode(p_filename, sd_fat_handle);
200865f0:	1009883a 	mov	r4,r2
200865f4:	900b883a 	mov	r5,r18
200865f8:	0080e540 	call	20080e54 <mjpeg423_decode>
			if(command != CYCLE)
200865fc:	d0a00017 	ldw	r2,-32768(gp)
20086600:	15000926 	beq	r2,r20,20086628 <main+0x190>
20086604:	d0a00117 	ldw	r2,-32764(gp)
20086608:	10000426 	beq	r2,zero,2008661c <main+0x184>
			{
				while(ready_frames != 0)
2008660c:	d0a01917 	ldw	r2,-32668(gp)
20086610:	103ffe1e 	bne	r2,zero,2008660c <__flash_rwdata_start+0xfffe9fc4>
				    	while(1);
						ready_frames = 0;
						ece423_video_display_switch_frames(disp);
					}
				}
				is_video_playing = FALSE;
20086614:	d0200115 	stw	zero,-32764(gp)
20086618:	003fe706 	br	200865b8 <__flash_rwdata_start+0xfffe9f70>
		if(video_found_flag)
		{
			mjpeg423_decode(p_filename, sd_fat_handle);
			if(command != CYCLE)
			{
				while(ready_frames != 0)
2008661c:	d0a01917 	ldw	r2,-32668(gp)
20086620:	103ffc26 	beq	r2,zero,20086614 <__flash_rwdata_start+0xfffe9fcc>
				{
				    if(!is_video_playing)
					{
				    	while(1);
20086624:	003fff06 	br	20086624 <__flash_rwdata_start+0xfffe9fdc>
				}
				is_video_playing = FALSE;
			}
			else
			{
				disp->buffer_being_written = ((disp->buffer_being_displayed + 1)
20086628:	b7000017 	ldw	fp,0(r22)
2008662c:	e4001a17 	ldw	r16,104(fp)
						% disp->num_frame_buffers);
20086630:	e5c02017 	ldw	r23,128(fp)
				}
				is_video_playing = FALSE;
			}
			else
			{
				disp->buffer_being_written = ((disp->buffer_being_displayed + 1)
20086634:	84000044 	addi	r16,r16,1
						% disp->num_frame_buffers);
20086638:	85c4b03a 	or	r2,r16,r23
2008663c:	88800a36 	bltu	r17,r2,20086668 <main+0x1d0>
20086640:	8004913a 	slli	r2,r16,4
20086644:	15c4b03a 	or	r2,r2,r23
20086648:	1545883a 	add	r2,r2,r21
2008664c:	10800003 	ldbu	r2,0(r2)
20086650:	15ef383a 	mul	r23,r2,r23
				ready_frames = 0;
20086654:	d0201915 	stw	zero,-32668(gp)
			    command = NO_CMD;
20086658:	d4e00015 	stw	r19,-32768(gp)
				is_video_playing = FALSE;
			}
			else
			{
				disp->buffer_being_written = ((disp->buffer_being_displayed + 1)
						% disp->num_frame_buffers);
2008665c:	85e1c83a 	sub	r16,r16,r23
				}
				is_video_playing = FALSE;
			}
			else
			{
				disp->buffer_being_written = ((disp->buffer_being_displayed + 1)
20086660:	e4001b15 	stw	r16,108(fp)
20086664:	003fd406 	br	200865b8 <__flash_rwdata_start+0xfffe9f70>
						% disp->num_frame_buffers);
20086668:	8009883a 	mov	r4,r16
2008666c:	b80b883a 	mov	r5,r23
20086670:	00866e40 	call	200866e4 <__divsi3>
20086674:	003ff606 	br	20086650 <__flash_rwdata_start+0xfffea008>

20086678 <udivmodsi4>:
20086678:	2900182e 	bgeu	r5,r4,200866dc <udivmodsi4+0x64>
2008667c:	28001716 	blt	r5,zero,200866dc <udivmodsi4+0x64>
20086680:	00800804 	movi	r2,32
20086684:	00c00044 	movi	r3,1
20086688:	00000206 	br	20086694 <udivmodsi4+0x1c>
2008668c:	10001126 	beq	r2,zero,200866d4 <udivmodsi4+0x5c>
20086690:	28000516 	blt	r5,zero,200866a8 <udivmodsi4+0x30>
20086694:	294b883a 	add	r5,r5,r5
20086698:	10bfffc4 	addi	r2,r2,-1
2008669c:	18c7883a 	add	r3,r3,r3
200866a0:	293ffa36 	bltu	r5,r4,2008668c <__flash_rwdata_start+0xfffea044>
200866a4:	18000b26 	beq	r3,zero,200866d4 <udivmodsi4+0x5c>
200866a8:	0005883a 	mov	r2,zero
200866ac:	21400236 	bltu	r4,r5,200866b8 <udivmodsi4+0x40>
200866b0:	2149c83a 	sub	r4,r4,r5
200866b4:	10c4b03a 	or	r2,r2,r3
200866b8:	1806d07a 	srli	r3,r3,1
200866bc:	280ad07a 	srli	r5,r5,1
200866c0:	183ffa1e 	bne	r3,zero,200866ac <__flash_rwdata_start+0xfffea064>
200866c4:	3000011e 	bne	r6,zero,200866cc <udivmodsi4+0x54>
200866c8:	f800283a 	ret
200866cc:	2005883a 	mov	r2,r4
200866d0:	f800283a 	ret
200866d4:	0005883a 	mov	r2,zero
200866d8:	003ffa06 	br	200866c4 <__flash_rwdata_start+0xfffea07c>
200866dc:	00c00044 	movi	r3,1
200866e0:	003ff106 	br	200866a8 <__flash_rwdata_start+0xfffea060>

200866e4 <__divsi3>:
200866e4:	defffe04 	addi	sp,sp,-8
200866e8:	dfc00115 	stw	ra,4(sp)
200866ec:	dc000015 	stw	r16,0(sp)
200866f0:	20000b16 	blt	r4,zero,20086720 <__divsi3+0x3c>
200866f4:	0021883a 	mov	r16,zero
200866f8:	28000c16 	blt	r5,zero,2008672c <__divsi3+0x48>
200866fc:	000d883a 	mov	r6,zero
20086700:	00866780 	call	20086678 <udivmodsi4>
20086704:	0407c83a 	sub	r3,zero,r16
20086708:	1884f03a 	xor	r2,r3,r2
2008670c:	1405883a 	add	r2,r2,r16
20086710:	dfc00117 	ldw	ra,4(sp)
20086714:	dc000017 	ldw	r16,0(sp)
20086718:	dec00204 	addi	sp,sp,8
2008671c:	f800283a 	ret
20086720:	0109c83a 	sub	r4,zero,r4
20086724:	04000044 	movi	r16,1
20086728:	283ff40e 	bge	r5,zero,200866fc <__flash_rwdata_start+0xfffea0b4>
2008672c:	014bc83a 	sub	r5,zero,r5
20086730:	8400005c 	xori	r16,r16,1
20086734:	003ff106 	br	200866fc <__flash_rwdata_start+0xfffea0b4>

20086738 <__modsi3>:
20086738:	defffd04 	addi	sp,sp,-12
2008673c:	dfc00215 	stw	ra,8(sp)
20086740:	dc400115 	stw	r17,4(sp)
20086744:	dc000015 	stw	r16,0(sp)
20086748:	20000c16 	blt	r4,zero,2008677c <__modsi3+0x44>
2008674c:	0023883a 	mov	r17,zero
20086750:	0021883a 	mov	r16,zero
20086754:	28000d16 	blt	r5,zero,2008678c <__modsi3+0x54>
20086758:	01800044 	movi	r6,1
2008675c:	00866780 	call	20086678 <udivmodsi4>
20086760:	1404f03a 	xor	r2,r2,r16
20086764:	8885883a 	add	r2,r17,r2
20086768:	dfc00217 	ldw	ra,8(sp)
2008676c:	dc400117 	ldw	r17,4(sp)
20086770:	dc000017 	ldw	r16,0(sp)
20086774:	dec00304 	addi	sp,sp,12
20086778:	f800283a 	ret
2008677c:	0109c83a 	sub	r4,zero,r4
20086780:	04400044 	movi	r17,1
20086784:	043fffc4 	movi	r16,-1
20086788:	283ff30e 	bge	r5,zero,20086758 <__flash_rwdata_start+0xfffea110>
2008678c:	014bc83a 	sub	r5,zero,r5
20086790:	003ff106 	br	20086758 <__flash_rwdata_start+0xfffea110>

20086794 <__udivsi3>:
20086794:	000d883a 	mov	r6,zero
20086798:	00866781 	jmpi	20086678 <udivmodsi4>

2008679c <__umodsi3>:
2008679c:	01800044 	movi	r6,1
200867a0:	00866781 	jmpi	20086678 <udivmodsi4>

200867a4 <__divsf3>:
200867a4:	defff504 	addi	sp,sp,-44
200867a8:	dd000515 	stw	r20,20(sp)
200867ac:	2028d5fa 	srli	r20,r4,23
200867b0:	dd400615 	stw	r21,24(sp)
200867b4:	202ad7fa 	srli	r21,r4,31
200867b8:	00c02034 	movhi	r3,128
200867bc:	dcc00415 	stw	r19,16(sp)
200867c0:	dc800315 	stw	r18,12(sp)
200867c4:	18ffffc4 	addi	r3,r3,-1
200867c8:	dfc00a15 	stw	ra,40(sp)
200867cc:	df000915 	stw	fp,36(sp)
200867d0:	ddc00815 	stw	r23,32(sp)
200867d4:	dd800715 	stw	r22,28(sp)
200867d8:	dc400215 	stw	r17,8(sp)
200867dc:	dc000115 	stw	r16,4(sp)
200867e0:	a5003fcc 	andi	r20,r20,255
200867e4:	1924703a 	and	r18,r3,r4
200867e8:	acc03fcc 	andi	r19,r21,255
200867ec:	a0004d26 	beq	r20,zero,20086924 <__divsf3+0x180>
200867f0:	00803fc4 	movi	r2,255
200867f4:	a0802e26 	beq	r20,r2,200868b0 <__divsf3+0x10c>
200867f8:	91002034 	orhi	r4,r18,128
200867fc:	202490fa 	slli	r18,r4,3
20086800:	a53fe044 	addi	r20,r20,-127
20086804:	0021883a 	mov	r16,zero
20086808:	002f883a 	mov	r23,zero
2008680c:	2804d5fa 	srli	r2,r5,23
20086810:	282cd7fa 	srli	r22,r5,31
20086814:	00c02034 	movhi	r3,128
20086818:	18ffffc4 	addi	r3,r3,-1
2008681c:	10803fcc 	andi	r2,r2,255
20086820:	1962703a 	and	r17,r3,r5
20086824:	b7003fcc 	andi	fp,r22,255
20086828:	10004526 	beq	r2,zero,20086940 <__divsf3+0x19c>
2008682c:	00c03fc4 	movi	r3,255
20086830:	10c04026 	beq	r2,r3,20086934 <__divsf3+0x190>
20086834:	88c02034 	orhi	r3,r17,128
20086838:	182290fa 	slli	r17,r3,3
2008683c:	10bfe044 	addi	r2,r2,-127
20086840:	0009883a 	mov	r4,zero
20086844:	2420b03a 	or	r16,r4,r16
20086848:	802090ba 	slli	r16,r16,2
2008684c:	01c80234 	movhi	r7,8200
20086850:	39da1c04 	addi	r7,r7,26736
20086854:	81e1883a 	add	r16,r16,r7
20086858:	80c00017 	ldw	r3,0(r16)
2008685c:	ad8af03a 	xor	r5,r21,r22
20086860:	280d883a 	mov	r6,r5
20086864:	a085c83a 	sub	r2,r20,r2
20086868:	29403fcc 	andi	r5,r5,255
2008686c:	1800683a 	jmp	r3
20086870:	20086a7c 	xorhi	zero,r4,8617
20086874:	20086a24 	muli	zero,r4,8616
20086878:	20086a48 	cmpgei	zero,r4,8617
2008687c:	20086a10 	cmplti	zero,r4,8616
20086880:	20086a48 	cmpgei	zero,r4,8617
20086884:	200868c0 	call	2200868c <__flash_rwdata_start+0x1f6c044>
20086888:	20086a48 	cmpgei	zero,r4,8617
2008688c:	20086a10 	cmplti	zero,r4,8616
20086890:	20086a24 	muli	zero,r4,8616
20086894:	20086a24 	muli	zero,r4,8616
20086898:	200868c0 	call	2200868c <__flash_rwdata_start+0x1f6c044>
2008689c:	20086a10 	cmplti	zero,r4,8616
200868a0:	20086b14 	ori	zero,r4,8620
200868a4:	20086b14 	ori	zero,r4,8620
200868a8:	20086b14 	ori	zero,r4,8620
200868ac:	20086a54 	ori	zero,r4,8617
200868b0:	9000531e 	bne	r18,zero,20086a00 <__divsf3+0x25c>
200868b4:	04000204 	movi	r16,8
200868b8:	05c00084 	movi	r23,2
200868bc:	003fd306 	br	2008680c <__flash_rwdata_start+0xfffea1c4>
200868c0:	00c02034 	movhi	r3,128
200868c4:	000d883a 	mov	r6,zero
200868c8:	18ffffc4 	addi	r3,r3,-1
200868cc:	013fffc4 	movi	r4,-1
200868d0:	21003fcc 	andi	r4,r4,255
200868d4:	200895fa 	slli	r4,r4,23
200868d8:	30803fcc 	andi	r2,r6,255
200868dc:	01802034 	movhi	r6,128
200868e0:	31bfffc4 	addi	r6,r6,-1
200868e4:	100497fa 	slli	r2,r2,31
200868e8:	1986703a 	and	r3,r3,r6
200868ec:	1906b03a 	or	r3,r3,r4
200868f0:	1884b03a 	or	r2,r3,r2
200868f4:	dfc00a17 	ldw	ra,40(sp)
200868f8:	df000917 	ldw	fp,36(sp)
200868fc:	ddc00817 	ldw	r23,32(sp)
20086900:	dd800717 	ldw	r22,28(sp)
20086904:	dd400617 	ldw	r21,24(sp)
20086908:	dd000517 	ldw	r20,20(sp)
2008690c:	dcc00417 	ldw	r19,16(sp)
20086910:	dc800317 	ldw	r18,12(sp)
20086914:	dc400217 	ldw	r17,8(sp)
20086918:	dc000117 	ldw	r16,4(sp)
2008691c:	dec00b04 	addi	sp,sp,44
20086920:	f800283a 	ret
20086924:	90002b1e 	bne	r18,zero,200869d4 <__divsf3+0x230>
20086928:	04000104 	movi	r16,4
2008692c:	05c00044 	movi	r23,1
20086930:	003fb606 	br	2008680c <__flash_rwdata_start+0xfffea1c4>
20086934:	8800251e 	bne	r17,zero,200869cc <__divsf3+0x228>
20086938:	01000084 	movi	r4,2
2008693c:	00000206 	br	20086948 <__divsf3+0x1a4>
20086940:	88001a1e 	bne	r17,zero,200869ac <__divsf3+0x208>
20086944:	01000044 	movi	r4,1
20086948:	2420b03a 	or	r16,r4,r16
2008694c:	802090ba 	slli	r16,r16,2
20086950:	00c80234 	movhi	r3,8200
20086954:	18da5b04 	addi	r3,r3,26988
20086958:	80e1883a 	add	r16,r16,r3
2008695c:	80c00017 	ldw	r3,0(r16)
20086960:	ad8af03a 	xor	r5,r21,r22
20086964:	a085c83a 	sub	r2,r20,r2
20086968:	1800683a 	jmp	r3
2008696c:	20086a24 	muli	zero,r4,8616
20086970:	20086a24 	muli	zero,r4,8616
20086974:	20086b74 	orhi	zero,r4,8621
20086978:	20086a0c 	andi	zero,r4,8616
2008697c:	20086b74 	orhi	zero,r4,8621
20086980:	200868c0 	call	2200868c <__flash_rwdata_start+0x1f6c044>
20086984:	20086b74 	orhi	zero,r4,8621
20086988:	20086a0c 	andi	zero,r4,8616
2008698c:	20086a24 	muli	zero,r4,8616
20086990:	20086a24 	muli	zero,r4,8616
20086994:	200868c0 	call	2200868c <__flash_rwdata_start+0x1f6c044>
20086998:	20086a0c 	andi	zero,r4,8616
2008699c:	20086b14 	ori	zero,r4,8620
200869a0:	20086b14 	ori	zero,r4,8620
200869a4:	20086b14 	ori	zero,r4,8620
200869a8:	20086b40 	call	220086b4 <__flash_rwdata_start+0x1f6c06c>
200869ac:	8809883a 	mov	r4,r17
200869b0:	00897280 	call	20089728 <__clzsi2>
200869b4:	10fffec4 	addi	r3,r2,-5
200869b8:	88e2983a 	sll	r17,r17,r3
200869bc:	00ffe284 	movi	r3,-118
200869c0:	1885c83a 	sub	r2,r3,r2
200869c4:	0009883a 	mov	r4,zero
200869c8:	003f9e06 	br	20086844 <__flash_rwdata_start+0xfffea1fc>
200869cc:	010000c4 	movi	r4,3
200869d0:	003f9c06 	br	20086844 <__flash_rwdata_start+0xfffea1fc>
200869d4:	9009883a 	mov	r4,r18
200869d8:	d9400015 	stw	r5,0(sp)
200869dc:	00897280 	call	20089728 <__clzsi2>
200869e0:	10fffec4 	addi	r3,r2,-5
200869e4:	053fe284 	movi	r20,-118
200869e8:	90e4983a 	sll	r18,r18,r3
200869ec:	a0a9c83a 	sub	r20,r20,r2
200869f0:	0021883a 	mov	r16,zero
200869f4:	002f883a 	mov	r23,zero
200869f8:	d9400017 	ldw	r5,0(sp)
200869fc:	003f8306 	br	2008680c <__flash_rwdata_start+0xfffea1c4>
20086a00:	04000304 	movi	r16,12
20086a04:	05c000c4 	movi	r23,3
20086a08:	003f8006 	br	2008680c <__flash_rwdata_start+0xfffea1c4>
20086a0c:	0023883a 	mov	r17,zero
20086a10:	e027883a 	mov	r19,fp
20086a14:	202f883a 	mov	r23,r4
20086a18:	00c00084 	movi	r3,2
20086a1c:	980b883a 	mov	r5,r19
20086a20:	b8c0501e 	bne	r23,r3,20086b64 <__divsf3+0x3c0>
20086a24:	2980004c 	andi	r6,r5,1
20086a28:	013fffc4 	movi	r4,-1
20086a2c:	0007883a 	mov	r3,zero
20086a30:	003fa706 	br	200868d0 <__flash_rwdata_start+0xfffea288>
20086a34:	013fe084 	movi	r4,-126
20086a38:	2089c83a 	sub	r4,r4,r2
20086a3c:	00c006c4 	movi	r3,27
20086a40:	1900500e 	bge	r3,r4,20086b84 <__divsf3+0x3e0>
20086a44:	9980004c 	andi	r6,r19,1
20086a48:	0009883a 	mov	r4,zero
20086a4c:	0007883a 	mov	r3,zero
20086a50:	003f9f06 	br	200868d0 <__flash_rwdata_start+0xfffea288>
20086a54:	9080102c 	andhi	r2,r18,64
20086a58:	10000226 	beq	r2,zero,20086a64 <__divsf3+0x2c0>
20086a5c:	8880102c 	andhi	r2,r17,64
20086a60:	10003a26 	beq	r2,zero,20086b4c <__divsf3+0x3a8>
20086a64:	00802034 	movhi	r2,128
20086a68:	90c01034 	orhi	r3,r18,64
20086a6c:	10bfffc4 	addi	r2,r2,-1
20086a70:	a80d883a 	mov	r6,r21
20086a74:	1886703a 	and	r3,r3,r2
20086a78:	003f9406 	br	200868cc <__flash_rwdata_start+0xfffea284>
20086a7c:	9006917a 	slli	r3,r18,5
20086a80:	8822917a 	slli	r17,r17,5
20086a84:	1c402936 	bltu	r3,r17,20086b2c <__divsf3+0x388>
20086a88:	1c47c83a 	sub	r3,r3,r17
20086a8c:	2827883a 	mov	r19,r5
20086a90:	01800684 	movi	r6,26
20086a94:	01000044 	movi	r4,1
20086a98:	180f883a 	mov	r7,r3
20086a9c:	2109883a 	add	r4,r4,r4
20086aa0:	18c7883a 	add	r3,r3,r3
20086aa4:	38000116 	blt	r7,zero,20086aac <__divsf3+0x308>
20086aa8:	1c400236 	bltu	r3,r17,20086ab4 <__divsf3+0x310>
20086aac:	1c47c83a 	sub	r3,r3,r17
20086ab0:	21000054 	ori	r4,r4,1
20086ab4:	31bfffc4 	addi	r6,r6,-1
20086ab8:	303ff71e 	bne	r6,zero,20086a98 <__flash_rwdata_start+0xfffea450>
20086abc:	1806c03a 	cmpne	r3,r3,zero
20086ac0:	1922b03a 	or	r17,r3,r4
20086ac4:	11001fc4 	addi	r4,r2,127
20086ac8:	013fda0e 	bge	zero,r4,20086a34 <__flash_rwdata_start+0xfffea3ec>
20086acc:	88c001cc 	andi	r3,r17,7
20086ad0:	18000426 	beq	r3,zero,20086ae4 <__divsf3+0x340>
20086ad4:	894003cc 	andi	r5,r17,15
20086ad8:	00c00104 	movi	r3,4
20086adc:	28c00126 	beq	r5,r3,20086ae4 <__divsf3+0x340>
20086ae0:	88e3883a 	add	r17,r17,r3
20086ae4:	88c2002c 	andhi	r3,r17,2048
20086ae8:	18000426 	beq	r3,zero,20086afc <__divsf3+0x358>
20086aec:	11002004 	addi	r4,r2,128
20086af0:	00be0034 	movhi	r2,63488
20086af4:	10bfffc4 	addi	r2,r2,-1
20086af8:	88a2703a 	and	r17,r17,r2
20086afc:	00803f84 	movi	r2,254
20086b00:	1100060e 	bge	r2,r4,20086b1c <__divsf3+0x378>
20086b04:	9980004c 	andi	r6,r19,1
20086b08:	013fffc4 	movi	r4,-1
20086b0c:	0007883a 	mov	r3,zero
20086b10:	003f6f06 	br	200868d0 <__flash_rwdata_start+0xfffea288>
20086b14:	9023883a 	mov	r17,r18
20086b18:	003fbf06 	br	20086a18 <__flash_rwdata_start+0xfffea3d0>
20086b1c:	880691ba 	slli	r3,r17,6
20086b20:	9980004c 	andi	r6,r19,1
20086b24:	1806d27a 	srli	r3,r3,9
20086b28:	003f6906 	br	200868d0 <__flash_rwdata_start+0xfffea288>
20086b2c:	10bfffc4 	addi	r2,r2,-1
20086b30:	2827883a 	mov	r19,r5
20086b34:	018006c4 	movi	r6,27
20086b38:	0009883a 	mov	r4,zero
20086b3c:	003fd606 	br	20086a98 <__flash_rwdata_start+0xfffea450>
20086b40:	9080102c 	andhi	r2,r18,64
20086b44:	0023883a 	mov	r17,zero
20086b48:	103fc626 	beq	r2,zero,20086a64 <__flash_rwdata_start+0xfffea41c>
20086b4c:	00802034 	movhi	r2,128
20086b50:	88c01034 	orhi	r3,r17,64
20086b54:	10bfffc4 	addi	r2,r2,-1
20086b58:	b00d883a 	mov	r6,r22
20086b5c:	1886703a 	and	r3,r3,r2
20086b60:	003f5a06 	br	200868cc <__flash_rwdata_start+0xfffea284>
20086b64:	00c000c4 	movi	r3,3
20086b68:	b8c01c26 	beq	r23,r3,20086bdc <__divsf3+0x438>
20086b6c:	00c00044 	movi	r3,1
20086b70:	b8ffd41e 	bne	r23,r3,20086ac4 <__flash_rwdata_start+0xfffea47c>
20086b74:	2980004c 	andi	r6,r5,1
20086b78:	0009883a 	mov	r4,zero
20086b7c:	0007883a 	mov	r3,zero
20086b80:	003f5306 	br	200868d0 <__flash_rwdata_start+0xfffea288>
20086b84:	10802784 	addi	r2,r2,158
20086b88:	8884983a 	sll	r2,r17,r2
20086b8c:	8908d83a 	srl	r4,r17,r4
20086b90:	1022c03a 	cmpne	r17,r2,zero
20086b94:	8908b03a 	or	r4,r17,r4
20086b98:	208001cc 	andi	r2,r4,7
20086b9c:	10000426 	beq	r2,zero,20086bb0 <__divsf3+0x40c>
20086ba0:	20c003cc 	andi	r3,r4,15
20086ba4:	00800104 	movi	r2,4
20086ba8:	18800126 	beq	r3,r2,20086bb0 <__divsf3+0x40c>
20086bac:	2089883a 	add	r4,r4,r2
20086bb0:	2081002c 	andhi	r2,r4,1024
20086bb4:	10000426 	beq	r2,zero,20086bc8 <__divsf3+0x424>
20086bb8:	9980004c 	andi	r6,r19,1
20086bbc:	01000044 	movi	r4,1
20086bc0:	0007883a 	mov	r3,zero
20086bc4:	003f4206 	br	200868d0 <__flash_rwdata_start+0xfffea288>
20086bc8:	200691ba 	slli	r3,r4,6
20086bcc:	9980004c 	andi	r6,r19,1
20086bd0:	0009883a 	mov	r4,zero
20086bd4:	1806d27a 	srli	r3,r3,9
20086bd8:	003f3d06 	br	200868d0 <__flash_rwdata_start+0xfffea288>
20086bdc:	00802034 	movhi	r2,128
20086be0:	88c01034 	orhi	r3,r17,64
20086be4:	10bfffc4 	addi	r2,r2,-1
20086be8:	9980004c 	andi	r6,r19,1
20086bec:	1886703a 	and	r3,r3,r2
20086bf0:	003f3606 	br	200868cc <__flash_rwdata_start+0xfffea284>

20086bf4 <__mulsf3>:
20086bf4:	defff504 	addi	sp,sp,-44
20086bf8:	dc400215 	stw	r17,8(sp)
20086bfc:	2022d5fa 	srli	r17,r4,23
20086c00:	dd400615 	stw	r21,24(sp)
20086c04:	202ad7fa 	srli	r21,r4,31
20086c08:	dc000115 	stw	r16,4(sp)
20086c0c:	04002034 	movhi	r16,128
20086c10:	df000915 	stw	fp,36(sp)
20086c14:	dd000515 	stw	r20,20(sp)
20086c18:	843fffc4 	addi	r16,r16,-1
20086c1c:	dfc00a15 	stw	ra,40(sp)
20086c20:	ddc00815 	stw	r23,32(sp)
20086c24:	dd800715 	stw	r22,28(sp)
20086c28:	dcc00415 	stw	r19,16(sp)
20086c2c:	dc800315 	stw	r18,12(sp)
20086c30:	8c403fcc 	andi	r17,r17,255
20086c34:	8120703a 	and	r16,r16,r4
20086c38:	a829883a 	mov	r20,r21
20086c3c:	af003fcc 	andi	fp,r21,255
20086c40:	88005026 	beq	r17,zero,20086d84 <__mulsf3+0x190>
20086c44:	00803fc4 	movi	r2,255
20086c48:	88802f26 	beq	r17,r2,20086d08 <__mulsf3+0x114>
20086c4c:	84002034 	orhi	r16,r16,128
20086c50:	802090fa 	slli	r16,r16,3
20086c54:	8c7fe044 	addi	r17,r17,-127
20086c58:	0025883a 	mov	r18,zero
20086c5c:	002f883a 	mov	r23,zero
20086c60:	2804d5fa 	srli	r2,r5,23
20086c64:	282cd7fa 	srli	r22,r5,31
20086c68:	01002034 	movhi	r4,128
20086c6c:	213fffc4 	addi	r4,r4,-1
20086c70:	10803fcc 	andi	r2,r2,255
20086c74:	2166703a 	and	r19,r4,r5
20086c78:	b1803fcc 	andi	r6,r22,255
20086c7c:	10004926 	beq	r2,zero,20086da4 <__mulsf3+0x1b0>
20086c80:	00c03fc4 	movi	r3,255
20086c84:	10c04326 	beq	r2,r3,20086d94 <__mulsf3+0x1a0>
20086c88:	99402034 	orhi	r5,r19,128
20086c8c:	282690fa 	slli	r19,r5,3
20086c90:	10bfe044 	addi	r2,r2,-127
20086c94:	000b883a 	mov	r5,zero
20086c98:	8885883a 	add	r2,r17,r2
20086c9c:	2c86b03a 	or	r3,r5,r18
20086ca0:	010003c4 	movi	r4,15
20086ca4:	adaaf03a 	xor	r21,r21,r22
20086ca8:	12000044 	addi	r8,r2,1
20086cac:	20c06536 	bltu	r4,r3,20086e44 <__mulsf3+0x250>
20086cb0:	180690ba 	slli	r3,r3,2
20086cb4:	01080234 	movhi	r4,8200
20086cb8:	211b3204 	addi	r4,r4,27848
20086cbc:	1907883a 	add	r3,r3,r4
20086cc0:	18c00017 	ldw	r3,0(r3)
20086cc4:	1800683a 	jmp	r3
20086cc8:	20086e44 	addi	zero,r4,8633
20086ccc:	20086f10 	cmplti	zero,r4,8636
20086cd0:	20086f10 	cmplti	zero,r4,8636
20086cd4:	20086f20 	cmpeqi	zero,r4,8636
20086cd8:	20086d18 	cmpnei	zero,r4,8628
20086cdc:	20086d18 	cmpnei	zero,r4,8628
20086ce0:	20086e30 	cmpltui	zero,r4,8632
20086ce4:	20086f20 	cmpeqi	zero,r4,8636
20086ce8:	20086d18 	cmpnei	zero,r4,8628
20086cec:	20086e30 	cmpltui	zero,r4,8632
20086cf0:	20086d18 	cmpnei	zero,r4,8628
20086cf4:	20086f20 	cmpeqi	zero,r4,8636
20086cf8:	20086d1c 	xori	zero,r4,8628
20086cfc:	20086d1c 	xori	zero,r4,8628
20086d00:	20086d1c 	xori	zero,r4,8628
20086d04:	20086f30 	cmpltui	zero,r4,8636
20086d08:	8000311e 	bne	r16,zero,20086dd0 <__mulsf3+0x1dc>
20086d0c:	04800204 	movi	r18,8
20086d10:	05c00084 	movi	r23,2
20086d14:	003fd206 	br	20086c60 <__flash_rwdata_start+0xfffea618>
20086d18:	a839883a 	mov	fp,r21
20086d1c:	00800084 	movi	r2,2
20086d20:	b880231e 	bne	r23,r2,20086db0 <__mulsf3+0x1bc>
20086d24:	e500004c 	andi	r20,fp,1
20086d28:	00ffffc4 	movi	r3,-1
20086d2c:	0009883a 	mov	r4,zero
20086d30:	18c03fcc 	andi	r3,r3,255
20086d34:	180695fa 	slli	r3,r3,23
20086d38:	a0803fcc 	andi	r2,r20,255
20086d3c:	04002034 	movhi	r16,128
20086d40:	100497fa 	slli	r2,r2,31
20086d44:	843fffc4 	addi	r16,r16,-1
20086d48:	2420703a 	and	r16,r4,r16
20086d4c:	80e0b03a 	or	r16,r16,r3
20086d50:	8084b03a 	or	r2,r16,r2
20086d54:	dfc00a17 	ldw	ra,40(sp)
20086d58:	df000917 	ldw	fp,36(sp)
20086d5c:	ddc00817 	ldw	r23,32(sp)
20086d60:	dd800717 	ldw	r22,28(sp)
20086d64:	dd400617 	ldw	r21,24(sp)
20086d68:	dd000517 	ldw	r20,20(sp)
20086d6c:	dcc00417 	ldw	r19,16(sp)
20086d70:	dc800317 	ldw	r18,12(sp)
20086d74:	dc400217 	ldw	r17,8(sp)
20086d78:	dc000117 	ldw	r16,4(sp)
20086d7c:	dec00b04 	addi	sp,sp,44
20086d80:	f800283a 	ret
20086d84:	8000151e 	bne	r16,zero,20086ddc <__mulsf3+0x1e8>
20086d88:	04800104 	movi	r18,4
20086d8c:	05c00044 	movi	r23,1
20086d90:	003fb306 	br	20086c60 <__flash_rwdata_start+0xfffea618>
20086d94:	980b003a 	cmpeq	r5,r19,zero
20086d98:	00c000c4 	movi	r3,3
20086d9c:	194bc83a 	sub	r5,r3,r5
20086da0:	003fbd06 	br	20086c98 <__flash_rwdata_start+0xfffea650>
20086da4:	9800181e 	bne	r19,zero,20086e08 <__mulsf3+0x214>
20086da8:	01400044 	movi	r5,1
20086dac:	003fba06 	br	20086c98 <__flash_rwdata_start+0xfffea650>
20086db0:	008000c4 	movi	r2,3
20086db4:	b8809226 	beq	r23,r2,20087000 <__mulsf3+0x40c>
20086db8:	00800044 	movi	r2,1
20086dbc:	b880771e 	bne	r23,r2,20086f9c <__mulsf3+0x3a8>
20086dc0:	e0a8703a 	and	r20,fp,r2
20086dc4:	0007883a 	mov	r3,zero
20086dc8:	0009883a 	mov	r4,zero
20086dcc:	003fd806 	br	20086d30 <__flash_rwdata_start+0xfffea6e8>
20086dd0:	04800304 	movi	r18,12
20086dd4:	05c000c4 	movi	r23,3
20086dd8:	003fa106 	br	20086c60 <__flash_rwdata_start+0xfffea618>
20086ddc:	8009883a 	mov	r4,r16
20086de0:	d9400015 	stw	r5,0(sp)
20086de4:	00897280 	call	20089728 <__clzsi2>
20086de8:	10fffec4 	addi	r3,r2,-5
20086dec:	047fe284 	movi	r17,-118
20086df0:	80e0983a 	sll	r16,r16,r3
20086df4:	88a3c83a 	sub	r17,r17,r2
20086df8:	0025883a 	mov	r18,zero
20086dfc:	002f883a 	mov	r23,zero
20086e00:	d9400017 	ldw	r5,0(sp)
20086e04:	003f9606 	br	20086c60 <__flash_rwdata_start+0xfffea618>
20086e08:	9809883a 	mov	r4,r19
20086e0c:	d9800015 	stw	r6,0(sp)
20086e10:	00897280 	call	20089728 <__clzsi2>
20086e14:	10fffec4 	addi	r3,r2,-5
20086e18:	98e6983a 	sll	r19,r19,r3
20086e1c:	00ffe284 	movi	r3,-118
20086e20:	1885c83a 	sub	r2,r3,r2
20086e24:	000b883a 	mov	r5,zero
20086e28:	d9800017 	ldw	r6,0(sp)
20086e2c:	003f9a06 	br	20086c98 <__flash_rwdata_start+0xfffea650>
20086e30:	01002034 	movhi	r4,128
20086e34:	0029883a 	mov	r20,zero
20086e38:	213fffc4 	addi	r4,r4,-1
20086e3c:	00ffffc4 	movi	r3,-1
20086e40:	003fbb06 	br	20086d30 <__flash_rwdata_start+0xfffea6e8>
20086e44:	8006d43a 	srli	r3,r16,16
20086e48:	9812d43a 	srli	r9,r19,16
20086e4c:	843fffcc 	andi	r16,r16,65535
20086e50:	997fffcc 	andi	r5,r19,65535
20086e54:	2c0f383a 	mul	r7,r5,r16
20086e58:	28cb383a 	mul	r5,r5,r3
20086e5c:	4c21383a 	mul	r16,r9,r16
20086e60:	380cd43a 	srli	r6,r7,16
20086e64:	48d3383a 	mul	r9,r9,r3
20086e68:	2c21883a 	add	r16,r5,r16
20086e6c:	8187883a 	add	r3,r16,r6
20086e70:	1940022e 	bgeu	r3,r5,20086e7c <__mulsf3+0x288>
20086e74:	01000074 	movhi	r4,1
20086e78:	4913883a 	add	r9,r9,r4
20086e7c:	1808943a 	slli	r4,r3,16
20086e80:	39ffffcc 	andi	r7,r7,65535
20086e84:	1806d43a 	srli	r3,r3,16
20086e88:	21c9883a 	add	r4,r4,r7
20086e8c:	202091ba 	slli	r16,r4,6
20086e90:	48c7883a 	add	r3,r9,r3
20086e94:	2008d6ba 	srli	r4,r4,26
20086e98:	180691ba 	slli	r3,r3,6
20086e9c:	8020c03a 	cmpne	r16,r16,zero
20086ea0:	8120b03a 	or	r16,r16,r4
20086ea4:	80e0b03a 	or	r16,r16,r3
20086ea8:	80c2002c 	andhi	r3,r16,2048
20086eac:	18000426 	beq	r3,zero,20086ec0 <__mulsf3+0x2cc>
20086eb0:	8006d07a 	srli	r3,r16,1
20086eb4:	8400004c 	andi	r16,r16,1
20086eb8:	4005883a 	mov	r2,r8
20086ebc:	80e0b03a 	or	r16,r16,r3
20086ec0:	10c01fc4 	addi	r3,r2,127
20086ec4:	00c02d0e 	bge	zero,r3,20086f7c <__mulsf3+0x388>
20086ec8:	810001cc 	andi	r4,r16,7
20086ecc:	20000426 	beq	r4,zero,20086ee0 <__mulsf3+0x2ec>
20086ed0:	814003cc 	andi	r5,r16,15
20086ed4:	01000104 	movi	r4,4
20086ed8:	29000126 	beq	r5,r4,20086ee0 <__mulsf3+0x2ec>
20086edc:	8121883a 	add	r16,r16,r4
20086ee0:	8102002c 	andhi	r4,r16,2048
20086ee4:	20000426 	beq	r4,zero,20086ef8 <__mulsf3+0x304>
20086ee8:	10c02004 	addi	r3,r2,128
20086eec:	00be0034 	movhi	r2,63488
20086ef0:	10bfffc4 	addi	r2,r2,-1
20086ef4:	80a0703a 	and	r16,r16,r2
20086ef8:	00803f84 	movi	r2,254
20086efc:	10c01b0e 	bge	r2,r3,20086f6c <__mulsf3+0x378>
20086f00:	ad00004c 	andi	r20,r21,1
20086f04:	00ffffc4 	movi	r3,-1
20086f08:	0009883a 	mov	r4,zero
20086f0c:	003f8806 	br	20086d30 <__flash_rwdata_start+0xfffea6e8>
20086f10:	9821883a 	mov	r16,r19
20086f14:	a839883a 	mov	fp,r21
20086f18:	282f883a 	mov	r23,r5
20086f1c:	003f7f06 	br	20086d1c <__flash_rwdata_start+0xfffea6d4>
20086f20:	9821883a 	mov	r16,r19
20086f24:	3039883a 	mov	fp,r6
20086f28:	282f883a 	mov	r23,r5
20086f2c:	003f7b06 	br	20086d1c <__flash_rwdata_start+0xfffea6d4>
20086f30:	8080102c 	andhi	r2,r16,64
20086f34:	10000826 	beq	r2,zero,20086f58 <__mulsf3+0x364>
20086f38:	9880102c 	andhi	r2,r19,64
20086f3c:	1000061e 	bne	r2,zero,20086f58 <__mulsf3+0x364>
20086f40:	00802034 	movhi	r2,128
20086f44:	99001034 	orhi	r4,r19,64
20086f48:	10bfffc4 	addi	r2,r2,-1
20086f4c:	b029883a 	mov	r20,r22
20086f50:	2088703a 	and	r4,r4,r2
20086f54:	003fb906 	br	20086e3c <__flash_rwdata_start+0xfffea7f4>
20086f58:	00802034 	movhi	r2,128
20086f5c:	81001034 	orhi	r4,r16,64
20086f60:	10bfffc4 	addi	r2,r2,-1
20086f64:	2088703a 	and	r4,r4,r2
20086f68:	003fb406 	br	20086e3c <__flash_rwdata_start+0xfffea7f4>
20086f6c:	802091ba 	slli	r16,r16,6
20086f70:	ad00004c 	andi	r20,r21,1
20086f74:	8008d27a 	srli	r4,r16,9
20086f78:	003f6d06 	br	20086d30 <__flash_rwdata_start+0xfffea6e8>
20086f7c:	00ffe084 	movi	r3,-126
20086f80:	1887c83a 	sub	r3,r3,r2
20086f84:	010006c4 	movi	r4,27
20086f88:	20c0070e 	bge	r4,r3,20086fa8 <__mulsf3+0x3b4>
20086f8c:	ad00004c 	andi	r20,r21,1
20086f90:	0007883a 	mov	r3,zero
20086f94:	0009883a 	mov	r4,zero
20086f98:	003f6506 	br	20086d30 <__flash_rwdata_start+0xfffea6e8>
20086f9c:	4005883a 	mov	r2,r8
20086fa0:	e02b883a 	mov	r21,fp
20086fa4:	003fc606 	br	20086ec0 <__flash_rwdata_start+0xfffea878>
20086fa8:	10802784 	addi	r2,r2,158
20086fac:	8084983a 	sll	r2,r16,r2
20086fb0:	80e0d83a 	srl	r16,r16,r3
20086fb4:	1004c03a 	cmpne	r2,r2,zero
20086fb8:	1404b03a 	or	r2,r2,r16
20086fbc:	10c001cc 	andi	r3,r2,7
20086fc0:	18000426 	beq	r3,zero,20086fd4 <__mulsf3+0x3e0>
20086fc4:	110003cc 	andi	r4,r2,15
20086fc8:	00c00104 	movi	r3,4
20086fcc:	20c00126 	beq	r4,r3,20086fd4 <__mulsf3+0x3e0>
20086fd0:	10c5883a 	add	r2,r2,r3
20086fd4:	10c1002c 	andhi	r3,r2,1024
20086fd8:	18000426 	beq	r3,zero,20086fec <__mulsf3+0x3f8>
20086fdc:	ad00004c 	andi	r20,r21,1
20086fe0:	00c00044 	movi	r3,1
20086fe4:	0009883a 	mov	r4,zero
20086fe8:	003f5106 	br	20086d30 <__flash_rwdata_start+0xfffea6e8>
20086fec:	100491ba 	slli	r2,r2,6
20086ff0:	ad00004c 	andi	r20,r21,1
20086ff4:	0007883a 	mov	r3,zero
20086ff8:	1008d27a 	srli	r4,r2,9
20086ffc:	003f4c06 	br	20086d30 <__flash_rwdata_start+0xfffea6e8>
20087000:	00802034 	movhi	r2,128
20087004:	81001034 	orhi	r4,r16,64
20087008:	10bfffc4 	addi	r2,r2,-1
2008700c:	e500004c 	andi	r20,fp,1
20087010:	2088703a 	and	r4,r4,r2
20087014:	003f8906 	br	20086e3c <__flash_rwdata_start+0xfffea7f4>

20087018 <__floatunsisf>:
20087018:	defffe04 	addi	sp,sp,-8
2008701c:	dc000015 	stw	r16,0(sp)
20087020:	dfc00115 	stw	ra,4(sp)
20087024:	2021883a 	mov	r16,r4
20087028:	20002626 	beq	r4,zero,200870c4 <__floatunsisf+0xac>
2008702c:	00897280 	call	20089728 <__clzsi2>
20087030:	00c02784 	movi	r3,158
20087034:	1887c83a 	sub	r3,r3,r2
20087038:	01002584 	movi	r4,150
2008703c:	20c00816 	blt	r4,r3,20087060 <__floatunsisf+0x48>
20087040:	01000204 	movi	r4,8
20087044:	2080340e 	bge	r4,r2,20087118 <__floatunsisf+0x100>
20087048:	10bffe04 	addi	r2,r2,-8
2008704c:	8088983a 	sll	r4,r16,r2
20087050:	00802034 	movhi	r2,128
20087054:	10bfffc4 	addi	r2,r2,-1
20087058:	2088703a 	and	r4,r4,r2
2008705c:	00001b06 	br	200870cc <__floatunsisf+0xb4>
20087060:	01002644 	movi	r4,153
20087064:	20c02316 	blt	r4,r3,200870f4 <__floatunsisf+0xdc>
20087068:	01000144 	movi	r4,5
2008706c:	2080020e 	bge	r4,r2,20087078 <__floatunsisf+0x60>
20087070:	113ffec4 	addi	r4,r2,-5
20087074:	8120983a 	sll	r16,r16,r4
20087078:	017f0034 	movhi	r5,64512
2008707c:	297fffc4 	addi	r5,r5,-1
20087080:	810001cc 	andi	r4,r16,7
20087084:	814a703a 	and	r5,r16,r5
20087088:	20000426 	beq	r4,zero,2008709c <__floatunsisf+0x84>
2008708c:	840003cc 	andi	r16,r16,15
20087090:	01000104 	movi	r4,4
20087094:	81000126 	beq	r16,r4,2008709c <__floatunsisf+0x84>
20087098:	290b883a 	add	r5,r5,r4
2008709c:	2901002c 	andhi	r4,r5,1024
200870a0:	20000526 	beq	r4,zero,200870b8 <__floatunsisf+0xa0>
200870a4:	00c027c4 	movi	r3,159
200870a8:	1887c83a 	sub	r3,r3,r2
200870ac:	00bf0034 	movhi	r2,64512
200870b0:	10bfffc4 	addi	r2,r2,-1
200870b4:	288a703a 	and	r5,r5,r2
200870b8:	280891ba 	slli	r4,r5,6
200870bc:	2008d27a 	srli	r4,r4,9
200870c0:	00000206 	br	200870cc <__floatunsisf+0xb4>
200870c4:	0007883a 	mov	r3,zero
200870c8:	0009883a 	mov	r4,zero
200870cc:	18c03fcc 	andi	r3,r3,255
200870d0:	180695fa 	slli	r3,r3,23
200870d4:	00802034 	movhi	r2,128
200870d8:	10bfffc4 	addi	r2,r2,-1
200870dc:	2084703a 	and	r2,r4,r2
200870e0:	10c4b03a 	or	r2,r2,r3
200870e4:	dfc00117 	ldw	ra,4(sp)
200870e8:	dc000017 	ldw	r16,0(sp)
200870ec:	dec00204 	addi	sp,sp,8
200870f0:	f800283a 	ret
200870f4:	01400144 	movi	r5,5
200870f8:	110006c4 	addi	r4,r2,27
200870fc:	8108983a 	sll	r4,r16,r4
20087100:	288dc83a 	sub	r6,r5,r2
20087104:	81a0d83a 	srl	r16,r16,r6
20087108:	2008c03a 	cmpne	r4,r4,zero
2008710c:	2420b03a 	or	r16,r4,r16
20087110:	28bfd90e 	bge	r5,r2,20087078 <__flash_rwdata_start+0xfffeaa30>
20087114:	003fd606 	br	20087070 <__flash_rwdata_start+0xfffeaa28>
20087118:	01402034 	movhi	r5,128
2008711c:	297fffc4 	addi	r5,r5,-1
20087120:	8148703a 	and	r4,r16,r5
20087124:	003fe906 	br	200870cc <__flash_rwdata_start+0xfffeaa84>

20087128 <__adddf3>:
20087128:	02000434 	movhi	r8,16
2008712c:	423fffc4 	addi	r8,r8,-1
20087130:	defffb04 	addi	sp,sp,-20
20087134:	2a12703a 	and	r9,r5,r8
20087138:	2806d7fa 	srli	r3,r5,31
2008713c:	3a10703a 	and	r8,r7,r8
20087140:	3804d53a 	srli	r2,r7,20
20087144:	3014d77a 	srli	r10,r6,29
20087148:	dc000015 	stw	r16,0(sp)
2008714c:	481290fa 	slli	r9,r9,3
20087150:	2820d53a 	srli	r16,r5,20
20087154:	401090fa 	slli	r8,r8,3
20087158:	200ad77a 	srli	r5,r4,29
2008715c:	380ed7fa 	srli	r7,r7,31
20087160:	dc800215 	stw	r18,8(sp)
20087164:	dc400115 	stw	r17,4(sp)
20087168:	dfc00415 	stw	ra,16(sp)
2008716c:	dcc00315 	stw	r19,12(sp)
20087170:	1c803fcc 	andi	r18,r3,255
20087174:	8401ffcc 	andi	r16,r16,2047
20087178:	494ab03a 	or	r5,r9,r5
2008717c:	202290fa 	slli	r17,r4,3
20087180:	1081ffcc 	andi	r2,r2,2047
20087184:	4290b03a 	or	r8,r8,r10
20087188:	300c90fa 	slli	r6,r6,3
2008718c:	91c07026 	beq	r18,r7,20087350 <__adddf3+0x228>
20087190:	8087c83a 	sub	r3,r16,r2
20087194:	00c0b30e 	bge	zero,r3,20087464 <__adddf3+0x33c>
20087198:	10002a1e 	bne	r2,zero,20087244 <__adddf3+0x11c>
2008719c:	4184b03a 	or	r2,r8,r6
200871a0:	1000991e 	bne	r2,zero,20087408 <__adddf3+0x2e0>
200871a4:	888001cc 	andi	r2,r17,7
200871a8:	10005b26 	beq	r2,zero,20087318 <__adddf3+0x1f0>
200871ac:	88c003cc 	andi	r3,r17,15
200871b0:	00800104 	movi	r2,4
200871b4:	18805826 	beq	r3,r2,20087318 <__adddf3+0x1f0>
200871b8:	89800104 	addi	r6,r17,4
200871bc:	3463803a 	cmpltu	r17,r6,r17
200871c0:	2c4b883a 	add	r5,r5,r17
200871c4:	2880202c 	andhi	r2,r5,128
200871c8:	9007883a 	mov	r3,r18
200871cc:	3023883a 	mov	r17,r6
200871d0:	10005426 	beq	r2,zero,20087324 <__adddf3+0x1fc>
200871d4:	84000044 	addi	r16,r16,1
200871d8:	0081ffc4 	movi	r2,2047
200871dc:	8080c126 	beq	r16,r2,200874e4 <__adddf3+0x3bc>
200871e0:	013fe034 	movhi	r4,65408
200871e4:	213fffc4 	addi	r4,r4,-1
200871e8:	290a703a 	and	r5,r5,r4
200871ec:	2804977a 	slli	r2,r5,29
200871f0:	280a927a 	slli	r5,r5,9
200871f4:	8822d0fa 	srli	r17,r17,3
200871f8:	8401ffcc 	andi	r16,r16,2047
200871fc:	2808d33a 	srli	r4,r5,12
20087200:	1444b03a 	or	r2,r2,r17
20087204:	8401ffcc 	andi	r16,r16,2047
20087208:	800a953a 	slli	r5,r16,20
2008720c:	18c03fcc 	andi	r3,r3,255
20087210:	04000434 	movhi	r16,16
20087214:	180697fa 	slli	r3,r3,31
20087218:	843fffc4 	addi	r16,r16,-1
2008721c:	2420703a 	and	r16,r4,r16
20087220:	8160b03a 	or	r16,r16,r5
20087224:	80c6b03a 	or	r3,r16,r3
20087228:	dfc00417 	ldw	ra,16(sp)
2008722c:	dcc00317 	ldw	r19,12(sp)
20087230:	dc800217 	ldw	r18,8(sp)
20087234:	dc400117 	ldw	r17,4(sp)
20087238:	dc000017 	ldw	r16,0(sp)
2008723c:	dec00504 	addi	sp,sp,20
20087240:	f800283a 	ret
20087244:	0081ffc4 	movi	r2,2047
20087248:	80bfd626 	beq	r16,r2,200871a4 <__flash_rwdata_start+0xfffeab5c>
2008724c:	42002034 	orhi	r8,r8,128
20087250:	00800e04 	movi	r2,56
20087254:	10c0a616 	blt	r2,r3,200874f0 <__adddf3+0x3c8>
20087258:	008007c4 	movi	r2,31
2008725c:	10c0c916 	blt	r2,r3,20087584 <__adddf3+0x45c>
20087260:	00800804 	movi	r2,32
20087264:	10c5c83a 	sub	r2,r2,r3
20087268:	408e983a 	sll	r7,r8,r2
2008726c:	30c8d83a 	srl	r4,r6,r3
20087270:	3084983a 	sll	r2,r6,r2
20087274:	40c6d83a 	srl	r3,r8,r3
20087278:	390cb03a 	or	r6,r7,r4
2008727c:	1004c03a 	cmpne	r2,r2,zero
20087280:	308cb03a 	or	r6,r6,r2
20087284:	898dc83a 	sub	r6,r17,r6
20087288:	89a3803a 	cmpltu	r17,r17,r6
2008728c:	28cbc83a 	sub	r5,r5,r3
20087290:	2c4bc83a 	sub	r5,r5,r17
20087294:	3023883a 	mov	r17,r6
20087298:	2880202c 	andhi	r2,r5,128
2008729c:	10006d26 	beq	r2,zero,20087454 <__adddf3+0x32c>
200872a0:	04c02034 	movhi	r19,128
200872a4:	9cffffc4 	addi	r19,r19,-1
200872a8:	2ce6703a 	and	r19,r5,r19
200872ac:	98007e26 	beq	r19,zero,200874a8 <__adddf3+0x380>
200872b0:	9809883a 	mov	r4,r19
200872b4:	00897280 	call	20089728 <__clzsi2>
200872b8:	10fffe04 	addi	r3,r2,-8
200872bc:	010007c4 	movi	r4,31
200872c0:	20c07f16 	blt	r4,r3,200874c0 <__adddf3+0x398>
200872c4:	01400a04 	movi	r5,40
200872c8:	2885c83a 	sub	r2,r5,r2
200872cc:	888ad83a 	srl	r5,r17,r2
200872d0:	98e6983a 	sll	r19,r19,r3
200872d4:	88e2983a 	sll	r17,r17,r3
200872d8:	2ce6b03a 	or	r19,r5,r19
200872dc:	1c007c16 	blt	r3,r16,200874d0 <__adddf3+0x3a8>
200872e0:	1c21c83a 	sub	r16,r3,r16
200872e4:	81400044 	addi	r5,r16,1
200872e8:	00c007c4 	movi	r3,31
200872ec:	19409816 	blt	r3,r5,20087550 <__adddf3+0x428>
200872f0:	1c21c83a 	sub	r16,r3,r16
200872f4:	8c08983a 	sll	r4,r17,r16
200872f8:	8946d83a 	srl	r3,r17,r5
200872fc:	9c20983a 	sll	r16,r19,r16
20087300:	2008c03a 	cmpne	r4,r4,zero
20087304:	994ad83a 	srl	r5,r19,r5
20087308:	1c06b03a 	or	r3,r3,r16
2008730c:	1922b03a 	or	r17,r3,r4
20087310:	0021883a 	mov	r16,zero
20087314:	003fa306 	br	200871a4 <__flash_rwdata_start+0xfffeab5c>
20087318:	2880202c 	andhi	r2,r5,128
2008731c:	9007883a 	mov	r3,r18
20087320:	103fac1e 	bne	r2,zero,200871d4 <__flash_rwdata_start+0xfffeab8c>
20087324:	2804977a 	slli	r2,r5,29
20087328:	8822d0fa 	srli	r17,r17,3
2008732c:	0101ffc4 	movi	r4,2047
20087330:	280ad0fa 	srli	r5,r5,3
20087334:	1444b03a 	or	r2,r2,r17
20087338:	81002c26 	beq	r16,r4,200873ec <__adddf3+0x2c4>
2008733c:	8120703a 	and	r16,r16,r4
20087340:	01000434 	movhi	r4,16
20087344:	213fffc4 	addi	r4,r4,-1
20087348:	2908703a 	and	r4,r5,r4
2008734c:	003fad06 	br	20087204 <__flash_rwdata_start+0xfffeabbc>
20087350:	8089c83a 	sub	r4,r16,r2
20087354:	01006a0e 	bge	zero,r4,20087500 <__adddf3+0x3d8>
20087358:	10003326 	beq	r2,zero,20087428 <__adddf3+0x300>
2008735c:	0081ffc4 	movi	r2,2047
20087360:	80bf9026 	beq	r16,r2,200871a4 <__flash_rwdata_start+0xfffeab5c>
20087364:	42002034 	orhi	r8,r8,128
20087368:	00800e04 	movi	r2,56
2008736c:	1100b116 	blt	r2,r4,20087634 <__adddf3+0x50c>
20087370:	008007c4 	movi	r2,31
20087374:	1100e216 	blt	r2,r4,20087700 <__adddf3+0x5d8>
20087378:	00800804 	movi	r2,32
2008737c:	1105c83a 	sub	r2,r2,r4
20087380:	4092983a 	sll	r9,r8,r2
20087384:	310ed83a 	srl	r7,r6,r4
20087388:	3084983a 	sll	r2,r6,r2
2008738c:	4110d83a 	srl	r8,r8,r4
20087390:	49ccb03a 	or	r6,r9,r7
20087394:	1004c03a 	cmpne	r2,r2,zero
20087398:	308cb03a 	or	r6,r6,r2
2008739c:	344d883a 	add	r6,r6,r17
200873a0:	3463803a 	cmpltu	r17,r6,r17
200873a4:	414b883a 	add	r5,r8,r5
200873a8:	2c4b883a 	add	r5,r5,r17
200873ac:	3023883a 	mov	r17,r6
200873b0:	2880202c 	andhi	r2,r5,128
200873b4:	10002726 	beq	r2,zero,20087454 <__adddf3+0x32c>
200873b8:	84000044 	addi	r16,r16,1
200873bc:	0081ffc4 	movi	r2,2047
200873c0:	8080ae26 	beq	r16,r2,2008767c <__adddf3+0x554>
200873c4:	00bfe034 	movhi	r2,65408
200873c8:	10bfffc4 	addi	r2,r2,-1
200873cc:	288a703a 	and	r5,r5,r2
200873d0:	880cd07a 	srli	r6,r17,1
200873d4:	280897fa 	slli	r4,r5,31
200873d8:	88c0004c 	andi	r3,r17,1
200873dc:	30e2b03a 	or	r17,r6,r3
200873e0:	280ad07a 	srli	r5,r5,1
200873e4:	8922b03a 	or	r17,r17,r4
200873e8:	003f6e06 	br	200871a4 <__flash_rwdata_start+0xfffeab5c>
200873ec:	1148b03a 	or	r4,r2,r5
200873f0:	20003c26 	beq	r4,zero,200874e4 <__adddf3+0x3bc>
200873f4:	29000234 	orhi	r4,r5,8
200873f8:	01400434 	movhi	r5,16
200873fc:	297fffc4 	addi	r5,r5,-1
20087400:	2148703a 	and	r4,r4,r5
20087404:	003f7f06 	br	20087204 <__flash_rwdata_start+0xfffeabbc>
20087408:	18ffffc4 	addi	r3,r3,-1
2008740c:	18004d1e 	bne	r3,zero,20087544 <__adddf3+0x41c>
20087410:	898dc83a 	sub	r6,r17,r6
20087414:	89a3803a 	cmpltu	r17,r17,r6
20087418:	2a0bc83a 	sub	r5,r5,r8
2008741c:	2c4bc83a 	sub	r5,r5,r17
20087420:	3023883a 	mov	r17,r6
20087424:	003f9c06 	br	20087298 <__flash_rwdata_start+0xfffeac50>
20087428:	4184b03a 	or	r2,r8,r6
2008742c:	103f5d26 	beq	r2,zero,200871a4 <__flash_rwdata_start+0xfffeab5c>
20087430:	213fffc4 	addi	r4,r4,-1
20087434:	203fd926 	beq	r4,zero,2008739c <__flash_rwdata_start+0xfffead54>
20087438:	0081ffc4 	movi	r2,2047
2008743c:	80bfca1e 	bne	r16,r2,20087368 <__flash_rwdata_start+0xfffead20>
20087440:	003f5806 	br	200871a4 <__flash_rwdata_start+0xfffeab5c>
20087444:	10c8b03a 	or	r4,r2,r3
20087448:	20008b26 	beq	r4,zero,20087678 <__adddf3+0x550>
2008744c:	100b883a 	mov	r5,r2
20087450:	1823883a 	mov	r17,r3
20087454:	888001cc 	andi	r2,r17,7
20087458:	103f541e 	bne	r2,zero,200871ac <__flash_rwdata_start+0xfffeab64>
2008745c:	9007883a 	mov	r3,r18
20087460:	003fb006 	br	20087324 <__flash_rwdata_start+0xfffeacdc>
20087464:	1800531e 	bne	r3,zero,200875b4 <__adddf3+0x48c>
20087468:	80800044 	addi	r2,r16,1
2008746c:	1081ffcc 	andi	r2,r2,2047
20087470:	00c00044 	movi	r3,1
20087474:	1880990e 	bge	r3,r2,200876dc <__adddf3+0x5b4>
20087478:	8985c83a 	sub	r2,r17,r6
2008747c:	8887803a 	cmpltu	r3,r17,r2
20087480:	2a27c83a 	sub	r19,r5,r8
20087484:	98e7c83a 	sub	r19,r19,r3
20087488:	98c0202c 	andhi	r3,r19,128
2008748c:	18006226 	beq	r3,zero,20087618 <__adddf3+0x4f0>
20087490:	3463c83a 	sub	r17,r6,r17
20087494:	4151c83a 	sub	r8,r8,r5
20087498:	344d803a 	cmpltu	r6,r6,r17
2008749c:	41a7c83a 	sub	r19,r8,r6
200874a0:	3825883a 	mov	r18,r7
200874a4:	983f821e 	bne	r19,zero,200872b0 <__flash_rwdata_start+0xfffeac68>
200874a8:	8809883a 	mov	r4,r17
200874ac:	00897280 	call	20089728 <__clzsi2>
200874b0:	10800804 	addi	r2,r2,32
200874b4:	10fffe04 	addi	r3,r2,-8
200874b8:	010007c4 	movi	r4,31
200874bc:	20ff810e 	bge	r4,r3,200872c4 <__flash_rwdata_start+0xfffeac7c>
200874c0:	14fff604 	addi	r19,r2,-40
200874c4:	8ce6983a 	sll	r19,r17,r19
200874c8:	0023883a 	mov	r17,zero
200874cc:	1c3f840e 	bge	r3,r16,200872e0 <__flash_rwdata_start+0xfffeac98>
200874d0:	017fe034 	movhi	r5,65408
200874d4:	297fffc4 	addi	r5,r5,-1
200874d8:	80e1c83a 	sub	r16,r16,r3
200874dc:	994a703a 	and	r5,r19,r5
200874e0:	003f3006 	br	200871a4 <__flash_rwdata_start+0xfffeab5c>
200874e4:	0009883a 	mov	r4,zero
200874e8:	0005883a 	mov	r2,zero
200874ec:	003f4506 	br	20087204 <__flash_rwdata_start+0xfffeabbc>
200874f0:	418cb03a 	or	r6,r8,r6
200874f4:	300cc03a 	cmpne	r6,r6,zero
200874f8:	0007883a 	mov	r3,zero
200874fc:	003f6106 	br	20087284 <__flash_rwdata_start+0xfffeac3c>
20087500:	2000921e 	bne	r4,zero,2008774c <__adddf3+0x624>
20087504:	80800044 	addi	r2,r16,1
20087508:	11c1ffcc 	andi	r7,r2,2047
2008750c:	01000044 	movi	r4,1
20087510:	21c0610e 	bge	r4,r7,20087698 <__adddf3+0x570>
20087514:	0101ffc4 	movi	r4,2047
20087518:	1100a326 	beq	r2,r4,200877a8 <__adddf3+0x680>
2008751c:	344d883a 	add	r6,r6,r17
20087520:	3463803a 	cmpltu	r17,r6,r17
20087524:	414b883a 	add	r5,r8,r5
20087528:	2c4b883a 	add	r5,r5,r17
2008752c:	282297fa 	slli	r17,r5,31
20087530:	300cd07a 	srli	r6,r6,1
20087534:	280ad07a 	srli	r5,r5,1
20087538:	1021883a 	mov	r16,r2
2008753c:	89a2b03a 	or	r17,r17,r6
20087540:	003f1806 	br	200871a4 <__flash_rwdata_start+0xfffeab5c>
20087544:	0081ffc4 	movi	r2,2047
20087548:	80bf411e 	bne	r16,r2,20087250 <__flash_rwdata_start+0xfffeac08>
2008754c:	003f1506 	br	200871a4 <__flash_rwdata_start+0xfffeab5c>
20087550:	80bff844 	addi	r2,r16,-31
20087554:	00c00804 	movi	r3,32
20087558:	9884d83a 	srl	r2,r19,r2
2008755c:	28c04a26 	beq	r5,r3,20087688 <__adddf3+0x560>
20087560:	00c00fc4 	movi	r3,63
20087564:	1c21c83a 	sub	r16,r3,r16
20087568:	9c26983a 	sll	r19,r19,r16
2008756c:	9c62b03a 	or	r17,r19,r17
20087570:	8822c03a 	cmpne	r17,r17,zero
20087574:	88a2b03a 	or	r17,r17,r2
20087578:	000b883a 	mov	r5,zero
2008757c:	0021883a 	mov	r16,zero
20087580:	003fb406 	br	20087454 <__flash_rwdata_start+0xfffeae0c>
20087584:	18bff804 	addi	r2,r3,-32
20087588:	01000804 	movi	r4,32
2008758c:	4084d83a 	srl	r2,r8,r2
20087590:	19003f26 	beq	r3,r4,20087690 <__adddf3+0x568>
20087594:	01001004 	movi	r4,64
20087598:	20c7c83a 	sub	r3,r4,r3
2008759c:	40d0983a 	sll	r8,r8,r3
200875a0:	418cb03a 	or	r6,r8,r6
200875a4:	300cc03a 	cmpne	r6,r6,zero
200875a8:	308cb03a 	or	r6,r6,r2
200875ac:	0007883a 	mov	r3,zero
200875b0:	003f3406 	br	20087284 <__flash_rwdata_start+0xfffeac3c>
200875b4:	80002326 	beq	r16,zero,20087644 <__adddf3+0x51c>
200875b8:	0101ffc4 	movi	r4,2047
200875bc:	11005e26 	beq	r2,r4,20087738 <__adddf3+0x610>
200875c0:	00c7c83a 	sub	r3,zero,r3
200875c4:	29402034 	orhi	r5,r5,128
200875c8:	01000e04 	movi	r4,56
200875cc:	20c07216 	blt	r4,r3,20087798 <__adddf3+0x670>
200875d0:	010007c4 	movi	r4,31
200875d4:	20c0ce16 	blt	r4,r3,20087910 <__adddf3+0x7e8>
200875d8:	01000804 	movi	r4,32
200875dc:	20c9c83a 	sub	r4,r4,r3
200875e0:	2914983a 	sll	r10,r5,r4
200875e4:	88d2d83a 	srl	r9,r17,r3
200875e8:	8908983a 	sll	r4,r17,r4
200875ec:	28c6d83a 	srl	r3,r5,r3
200875f0:	5262b03a 	or	r17,r10,r9
200875f4:	2008c03a 	cmpne	r4,r4,zero
200875f8:	8922b03a 	or	r17,r17,r4
200875fc:	3463c83a 	sub	r17,r6,r17
20087600:	40c7c83a 	sub	r3,r8,r3
20087604:	344d803a 	cmpltu	r6,r6,r17
20087608:	198bc83a 	sub	r5,r3,r6
2008760c:	1021883a 	mov	r16,r2
20087610:	3825883a 	mov	r18,r7
20087614:	003f2006 	br	20087298 <__flash_rwdata_start+0xfffeac50>
20087618:	9886b03a 	or	r3,r19,r2
2008761c:	1800141e 	bne	r3,zero,20087670 <__adddf3+0x548>
20087620:	0007883a 	mov	r3,zero
20087624:	000b883a 	mov	r5,zero
20087628:	0023883a 	mov	r17,zero
2008762c:	0021883a 	mov	r16,zero
20087630:	003f3c06 	br	20087324 <__flash_rwdata_start+0xfffeacdc>
20087634:	418cb03a 	or	r6,r8,r6
20087638:	300cc03a 	cmpne	r6,r6,zero
2008763c:	0011883a 	mov	r8,zero
20087640:	003f5606 	br	2008739c <__flash_rwdata_start+0xfffead54>
20087644:	2c48b03a 	or	r4,r5,r17
20087648:	20003b26 	beq	r4,zero,20087738 <__adddf3+0x610>
2008764c:	00c6303a 	nor	r3,zero,r3
20087650:	1800371e 	bne	r3,zero,20087730 <__adddf3+0x608>
20087654:	3463c83a 	sub	r17,r6,r17
20087658:	414bc83a 	sub	r5,r8,r5
2008765c:	344d803a 	cmpltu	r6,r6,r17
20087660:	298bc83a 	sub	r5,r5,r6
20087664:	1021883a 	mov	r16,r2
20087668:	3825883a 	mov	r18,r7
2008766c:	003f0a06 	br	20087298 <__flash_rwdata_start+0xfffeac50>
20087670:	1023883a 	mov	r17,r2
20087674:	003f0d06 	br	200872ac <__flash_rwdata_start+0xfffeac64>
20087678:	0007883a 	mov	r3,zero
2008767c:	000b883a 	mov	r5,zero
20087680:	0023883a 	mov	r17,zero
20087684:	003f2706 	br	20087324 <__flash_rwdata_start+0xfffeacdc>
20087688:	0027883a 	mov	r19,zero
2008768c:	003fb706 	br	2008756c <__flash_rwdata_start+0xfffeaf24>
20087690:	0011883a 	mov	r8,zero
20087694:	003fc206 	br	200875a0 <__flash_rwdata_start+0xfffeaf58>
20087698:	2c44b03a 	or	r2,r5,r17
2008769c:	8000871e 	bne	r16,zero,200878bc <__adddf3+0x794>
200876a0:	1000b126 	beq	r2,zero,20087968 <__adddf3+0x840>
200876a4:	4184b03a 	or	r2,r8,r6
200876a8:	103ebe26 	beq	r2,zero,200871a4 <__flash_rwdata_start+0xfffeab5c>
200876ac:	3445883a 	add	r2,r6,r17
200876b0:	1463803a 	cmpltu	r17,r2,r17
200876b4:	414b883a 	add	r5,r8,r5
200876b8:	2c4b883a 	add	r5,r5,r17
200876bc:	28c0202c 	andhi	r3,r5,128
200876c0:	1023883a 	mov	r17,r2
200876c4:	183f6326 	beq	r3,zero,20087454 <__flash_rwdata_start+0xfffeae0c>
200876c8:	00bfe034 	movhi	r2,65408
200876cc:	10bfffc4 	addi	r2,r2,-1
200876d0:	2021883a 	mov	r16,r4
200876d4:	288a703a 	and	r5,r5,r2
200876d8:	003eb206 	br	200871a4 <__flash_rwdata_start+0xfffeab5c>
200876dc:	2c44b03a 	or	r2,r5,r17
200876e0:	8000251e 	bne	r16,zero,20087778 <__adddf3+0x650>
200876e4:	10004b1e 	bne	r2,zero,20087814 <__adddf3+0x6ec>
200876e8:	4184b03a 	or	r2,r8,r6
200876ec:	103fe226 	beq	r2,zero,20087678 <__flash_rwdata_start+0xfffeb030>
200876f0:	400b883a 	mov	r5,r8
200876f4:	3023883a 	mov	r17,r6
200876f8:	3825883a 	mov	r18,r7
200876fc:	003ea906 	br	200871a4 <__flash_rwdata_start+0xfffeab5c>
20087700:	20bff804 	addi	r2,r4,-32
20087704:	01c00804 	movi	r7,32
20087708:	4084d83a 	srl	r2,r8,r2
2008770c:	21c07e26 	beq	r4,r7,20087908 <__adddf3+0x7e0>
20087710:	01c01004 	movi	r7,64
20087714:	3909c83a 	sub	r4,r7,r4
20087718:	4110983a 	sll	r8,r8,r4
2008771c:	418cb03a 	or	r6,r8,r6
20087720:	300cc03a 	cmpne	r6,r6,zero
20087724:	308cb03a 	or	r6,r6,r2
20087728:	0011883a 	mov	r8,zero
2008772c:	003f1b06 	br	2008739c <__flash_rwdata_start+0xfffead54>
20087730:	0101ffc4 	movi	r4,2047
20087734:	113fa41e 	bne	r2,r4,200875c8 <__flash_rwdata_start+0xfffeaf80>
20087738:	400b883a 	mov	r5,r8
2008773c:	3023883a 	mov	r17,r6
20087740:	1021883a 	mov	r16,r2
20087744:	3825883a 	mov	r18,r7
20087748:	003e9606 	br	200871a4 <__flash_rwdata_start+0xfffeab5c>
2008774c:	80001a1e 	bne	r16,zero,200877b8 <__adddf3+0x690>
20087750:	2c4eb03a 	or	r7,r5,r17
20087754:	38005526 	beq	r7,zero,200878ac <__adddf3+0x784>
20087758:	0108303a 	nor	r4,zero,r4
2008775c:	2000511e 	bne	r4,zero,200878a4 <__adddf3+0x77c>
20087760:	89a3883a 	add	r17,r17,r6
20087764:	414b883a 	add	r5,r8,r5
20087768:	898d803a 	cmpltu	r6,r17,r6
2008776c:	298b883a 	add	r5,r5,r6
20087770:	1021883a 	mov	r16,r2
20087774:	003f0e06 	br	200873b0 <__flash_rwdata_start+0xfffead68>
20087778:	1000341e 	bne	r2,zero,2008784c <__adddf3+0x724>
2008777c:	4184b03a 	or	r2,r8,r6
20087780:	10006f26 	beq	r2,zero,20087940 <__adddf3+0x818>
20087784:	400b883a 	mov	r5,r8
20087788:	3023883a 	mov	r17,r6
2008778c:	3825883a 	mov	r18,r7
20087790:	0401ffc4 	movi	r16,2047
20087794:	003e8306 	br	200871a4 <__flash_rwdata_start+0xfffeab5c>
20087798:	2c62b03a 	or	r17,r5,r17
2008779c:	8822c03a 	cmpne	r17,r17,zero
200877a0:	0007883a 	mov	r3,zero
200877a4:	003f9506 	br	200875fc <__flash_rwdata_start+0xfffeafb4>
200877a8:	1021883a 	mov	r16,r2
200877ac:	000b883a 	mov	r5,zero
200877b0:	0023883a 	mov	r17,zero
200877b4:	003edb06 	br	20087324 <__flash_rwdata_start+0xfffeacdc>
200877b8:	01c1ffc4 	movi	r7,2047
200877bc:	11c03b26 	beq	r2,r7,200878ac <__adddf3+0x784>
200877c0:	0109c83a 	sub	r4,zero,r4
200877c4:	29402034 	orhi	r5,r5,128
200877c8:	01c00e04 	movi	r7,56
200877cc:	39006216 	blt	r7,r4,20087958 <__adddf3+0x830>
200877d0:	01c007c4 	movi	r7,31
200877d4:	39006b16 	blt	r7,r4,20087984 <__adddf3+0x85c>
200877d8:	01c00804 	movi	r7,32
200877dc:	390fc83a 	sub	r7,r7,r4
200877e0:	29d4983a 	sll	r10,r5,r7
200877e4:	8912d83a 	srl	r9,r17,r4
200877e8:	89ce983a 	sll	r7,r17,r7
200877ec:	2908d83a 	srl	r4,r5,r4
200877f0:	5262b03a 	or	r17,r10,r9
200877f4:	380ac03a 	cmpne	r5,r7,zero
200877f8:	8962b03a 	or	r17,r17,r5
200877fc:	89a3883a 	add	r17,r17,r6
20087800:	2211883a 	add	r8,r4,r8
20087804:	898d803a 	cmpltu	r6,r17,r6
20087808:	418b883a 	add	r5,r8,r6
2008780c:	1021883a 	mov	r16,r2
20087810:	003ee706 	br	200873b0 <__flash_rwdata_start+0xfffead68>
20087814:	4184b03a 	or	r2,r8,r6
20087818:	103e6226 	beq	r2,zero,200871a4 <__flash_rwdata_start+0xfffeab5c>
2008781c:	8987c83a 	sub	r3,r17,r6
20087820:	88c9803a 	cmpltu	r4,r17,r3
20087824:	2a05c83a 	sub	r2,r5,r8
20087828:	1105c83a 	sub	r2,r2,r4
2008782c:	1100202c 	andhi	r4,r2,128
20087830:	203f0426 	beq	r4,zero,20087444 <__flash_rwdata_start+0xfffeadfc>
20087834:	3463c83a 	sub	r17,r6,r17
20087838:	414bc83a 	sub	r5,r8,r5
2008783c:	344d803a 	cmpltu	r6,r6,r17
20087840:	298bc83a 	sub	r5,r5,r6
20087844:	3825883a 	mov	r18,r7
20087848:	003e5606 	br	200871a4 <__flash_rwdata_start+0xfffeab5c>
2008784c:	4184b03a 	or	r2,r8,r6
20087850:	10002b26 	beq	r2,zero,20087900 <__adddf3+0x7d8>
20087854:	2804d0fa 	srli	r2,r5,3
20087858:	8822d0fa 	srli	r17,r17,3
2008785c:	280a977a 	slli	r5,r5,29
20087860:	10c0022c 	andhi	r3,r2,8
20087864:	2c62b03a 	or	r17,r5,r17
20087868:	18000826 	beq	r3,zero,2008788c <__adddf3+0x764>
2008786c:	4008d0fa 	srli	r4,r8,3
20087870:	20c0022c 	andhi	r3,r4,8
20087874:	1800051e 	bne	r3,zero,2008788c <__adddf3+0x764>
20087878:	300cd0fa 	srli	r6,r6,3
2008787c:	4010977a 	slli	r8,r8,29
20087880:	2005883a 	mov	r2,r4
20087884:	3825883a 	mov	r18,r7
20087888:	41a2b03a 	or	r17,r8,r6
2008788c:	880ad77a 	srli	r5,r17,29
20087890:	100490fa 	slli	r2,r2,3
20087894:	882290fa 	slli	r17,r17,3
20087898:	0401ffc4 	movi	r16,2047
2008789c:	288ab03a 	or	r5,r5,r2
200878a0:	003e4006 	br	200871a4 <__flash_rwdata_start+0xfffeab5c>
200878a4:	01c1ffc4 	movi	r7,2047
200878a8:	11ffc71e 	bne	r2,r7,200877c8 <__flash_rwdata_start+0xfffeb180>
200878ac:	400b883a 	mov	r5,r8
200878b0:	3023883a 	mov	r17,r6
200878b4:	1021883a 	mov	r16,r2
200878b8:	003e3a06 	br	200871a4 <__flash_rwdata_start+0xfffeab5c>
200878bc:	10002d26 	beq	r2,zero,20087974 <__adddf3+0x84c>
200878c0:	4184b03a 	or	r2,r8,r6
200878c4:	10000e26 	beq	r2,zero,20087900 <__adddf3+0x7d8>
200878c8:	2804d0fa 	srli	r2,r5,3
200878cc:	8822d0fa 	srli	r17,r17,3
200878d0:	280a977a 	slli	r5,r5,29
200878d4:	10c0022c 	andhi	r3,r2,8
200878d8:	2c62b03a 	or	r17,r5,r17
200878dc:	183feb26 	beq	r3,zero,2008788c <__flash_rwdata_start+0xfffeb244>
200878e0:	4008d0fa 	srli	r4,r8,3
200878e4:	20c0022c 	andhi	r3,r4,8
200878e8:	183fe81e 	bne	r3,zero,2008788c <__flash_rwdata_start+0xfffeb244>
200878ec:	300cd0fa 	srli	r6,r6,3
200878f0:	4010977a 	slli	r8,r8,29
200878f4:	2005883a 	mov	r2,r4
200878f8:	41a2b03a 	or	r17,r8,r6
200878fc:	003fe306 	br	2008788c <__flash_rwdata_start+0xfffeb244>
20087900:	0401ffc4 	movi	r16,2047
20087904:	003e2706 	br	200871a4 <__flash_rwdata_start+0xfffeab5c>
20087908:	0011883a 	mov	r8,zero
2008790c:	003f8306 	br	2008771c <__flash_rwdata_start+0xfffeb0d4>
20087910:	193ff804 	addi	r4,r3,-32
20087914:	02400804 	movi	r9,32
20087918:	2908d83a 	srl	r4,r5,r4
2008791c:	1a402526 	beq	r3,r9,200879b4 <__adddf3+0x88c>
20087920:	02401004 	movi	r9,64
20087924:	48c7c83a 	sub	r3,r9,r3
20087928:	28ca983a 	sll	r5,r5,r3
2008792c:	2c62b03a 	or	r17,r5,r17
20087930:	8822c03a 	cmpne	r17,r17,zero
20087934:	8922b03a 	or	r17,r17,r4
20087938:	0007883a 	mov	r3,zero
2008793c:	003f2f06 	br	200875fc <__flash_rwdata_start+0xfffeafb4>
20087940:	01402034 	movhi	r5,128
20087944:	0007883a 	mov	r3,zero
20087948:	297fffc4 	addi	r5,r5,-1
2008794c:	047ffe04 	movi	r17,-8
20087950:	0401ffc4 	movi	r16,2047
20087954:	003e7306 	br	20087324 <__flash_rwdata_start+0xfffeacdc>
20087958:	2c62b03a 	or	r17,r5,r17
2008795c:	8822c03a 	cmpne	r17,r17,zero
20087960:	0009883a 	mov	r4,zero
20087964:	003fa506 	br	200877fc <__flash_rwdata_start+0xfffeb1b4>
20087968:	400b883a 	mov	r5,r8
2008796c:	3023883a 	mov	r17,r6
20087970:	003e0c06 	br	200871a4 <__flash_rwdata_start+0xfffeab5c>
20087974:	400b883a 	mov	r5,r8
20087978:	3023883a 	mov	r17,r6
2008797c:	0401ffc4 	movi	r16,2047
20087980:	003e0806 	br	200871a4 <__flash_rwdata_start+0xfffeab5c>
20087984:	21fff804 	addi	r7,r4,-32
20087988:	02400804 	movi	r9,32
2008798c:	29ced83a 	srl	r7,r5,r7
20087990:	22400a26 	beq	r4,r9,200879bc <__adddf3+0x894>
20087994:	02401004 	movi	r9,64
20087998:	4909c83a 	sub	r4,r9,r4
2008799c:	290a983a 	sll	r5,r5,r4
200879a0:	2c62b03a 	or	r17,r5,r17
200879a4:	8822c03a 	cmpne	r17,r17,zero
200879a8:	89e2b03a 	or	r17,r17,r7
200879ac:	0009883a 	mov	r4,zero
200879b0:	003f9206 	br	200877fc <__flash_rwdata_start+0xfffeb1b4>
200879b4:	000b883a 	mov	r5,zero
200879b8:	003fdc06 	br	2008792c <__flash_rwdata_start+0xfffeb2e4>
200879bc:	000b883a 	mov	r5,zero
200879c0:	003ff706 	br	200879a0 <__flash_rwdata_start+0xfffeb358>

200879c4 <__divdf3>:
200879c4:	defff204 	addi	sp,sp,-56
200879c8:	dd000815 	stw	r20,32(sp)
200879cc:	2828d53a 	srli	r20,r5,20
200879d0:	dd800a15 	stw	r22,40(sp)
200879d4:	282cd7fa 	srli	r22,r5,31
200879d8:	dc000415 	stw	r16,16(sp)
200879dc:	04000434 	movhi	r16,16
200879e0:	df000c15 	stw	fp,48(sp)
200879e4:	dcc00715 	stw	r19,28(sp)
200879e8:	dc800615 	stw	r18,24(sp)
200879ec:	dc400515 	stw	r17,20(sp)
200879f0:	843fffc4 	addi	r16,r16,-1
200879f4:	dfc00d15 	stw	ra,52(sp)
200879f8:	ddc00b15 	stw	r23,44(sp)
200879fc:	dd400915 	stw	r21,36(sp)
20087a00:	a501ffcc 	andi	r20,r20,2047
20087a04:	2025883a 	mov	r18,r4
20087a08:	2027883a 	mov	r19,r4
20087a0c:	2c22703a 	and	r17,r5,r16
20087a10:	b7003fcc 	andi	fp,r22,255
20087a14:	a0005e26 	beq	r20,zero,20087b90 <__divdf3+0x1cc>
20087a18:	0081ffc4 	movi	r2,2047
20087a1c:	a0803526 	beq	r20,r2,20087af4 <__divdf3+0x130>
20087a20:	8c000434 	orhi	r16,r17,16
20087a24:	2004d77a 	srli	r2,r4,29
20087a28:	802090fa 	slli	r16,r16,3
20087a2c:	202690fa 	slli	r19,r4,3
20087a30:	a53f0044 	addi	r20,r20,-1023
20087a34:	80a2b03a 	or	r17,r16,r2
20087a38:	0025883a 	mov	r18,zero
20087a3c:	0011883a 	mov	r8,zero
20087a40:	380ad53a 	srli	r5,r7,20
20087a44:	382ed7fa 	srli	r23,r7,31
20087a48:	04000434 	movhi	r16,16
20087a4c:	843fffc4 	addi	r16,r16,-1
20087a50:	2941ffcc 	andi	r5,r5,2047
20087a54:	302b883a 	mov	r21,r6
20087a58:	3c20703a 	and	r16,r7,r16
20087a5c:	ba403fcc 	andi	r9,r23,255
20087a60:	28006726 	beq	r5,zero,20087c00 <__divdf3+0x23c>
20087a64:	0081ffc4 	movi	r2,2047
20087a68:	28805f26 	beq	r5,r2,20087be8 <__divdf3+0x224>
20087a6c:	84000434 	orhi	r16,r16,16
20087a70:	3004d77a 	srli	r2,r6,29
20087a74:	802090fa 	slli	r16,r16,3
20087a78:	302a90fa 	slli	r21,r6,3
20087a7c:	297f0044 	addi	r5,r5,-1023
20087a80:	80a0b03a 	or	r16,r16,r2
20087a84:	000f883a 	mov	r7,zero
20087a88:	3c86b03a 	or	r3,r7,r18
20087a8c:	180690ba 	slli	r3,r3,2
20087a90:	00880234 	movhi	r2,8200
20087a94:	109ead04 	addi	r2,r2,31412
20087a98:	1887883a 	add	r3,r3,r2
20087a9c:	18c00017 	ldw	r3,0(r3)
20087aa0:	b5c8f03a 	xor	r4,r22,r23
20087aa4:	200d883a 	mov	r6,r4
20087aa8:	24803fcc 	andi	r18,r4,255
20087aac:	a169c83a 	sub	r20,r20,r5
20087ab0:	1800683a 	jmp	r3
20087ab4:	20087cfc 	xorhi	zero,r4,8691
20087ab8:	20087b2c 	andhi	zero,r4,8684
20087abc:	20087cc0 	call	220087cc <__flash_rwdata_start+0x1f6c184>
20087ac0:	20087b10 	cmplti	zero,r4,8684
20087ac4:	20087cc0 	call	220087cc <__flash_rwdata_start+0x1f6c184>
20087ac8:	20087c94 	ori	zero,r4,8690
20087acc:	20087cc0 	call	220087cc <__flash_rwdata_start+0x1f6c184>
20087ad0:	20087b10 	cmplti	zero,r4,8684
20087ad4:	20087b2c 	andhi	zero,r4,8684
20087ad8:	20087b2c 	andhi	zero,r4,8684
20087adc:	20087c94 	ori	zero,r4,8690
20087ae0:	20087b10 	cmplti	zero,r4,8684
20087ae4:	20087b20 	cmpeqi	zero,r4,8684
20087ae8:	20087b20 	cmpeqi	zero,r4,8684
20087aec:	20087b20 	cmpeqi	zero,r4,8684
20087af0:	20087cd0 	cmplti	zero,r4,8691
20087af4:	8904b03a 	or	r2,r17,r4
20087af8:	1000631e 	bne	r2,zero,20087c88 <__divdf3+0x2c4>
20087afc:	04800204 	movi	r18,8
20087b00:	0023883a 	mov	r17,zero
20087b04:	0027883a 	mov	r19,zero
20087b08:	02000084 	movi	r8,2
20087b0c:	003fcc06 	br	20087a40 <__flash_rwdata_start+0xfffeb3f8>
20087b10:	8023883a 	mov	r17,r16
20087b14:	a827883a 	mov	r19,r21
20087b18:	4839883a 	mov	fp,r9
20087b1c:	3811883a 	mov	r8,r7
20087b20:	00800084 	movi	r2,2
20087b24:	40812a1e 	bne	r8,r2,20087fd0 <__divdf3+0x60c>
20087b28:	e025883a 	mov	r18,fp
20087b2c:	9180004c 	andi	r6,r18,1
20087b30:	0101ffc4 	movi	r4,2047
20087b34:	000b883a 	mov	r5,zero
20087b38:	0027883a 	mov	r19,zero
20087b3c:	2008953a 	slli	r4,r4,20
20087b40:	30c03fcc 	andi	r3,r6,255
20087b44:	04000434 	movhi	r16,16
20087b48:	180697fa 	slli	r3,r3,31
20087b4c:	843fffc4 	addi	r16,r16,-1
20087b50:	2c20703a 	and	r16,r5,r16
20087b54:	8120b03a 	or	r16,r16,r4
20087b58:	80c6b03a 	or	r3,r16,r3
20087b5c:	9805883a 	mov	r2,r19
20087b60:	dfc00d17 	ldw	ra,52(sp)
20087b64:	df000c17 	ldw	fp,48(sp)
20087b68:	ddc00b17 	ldw	r23,44(sp)
20087b6c:	dd800a17 	ldw	r22,40(sp)
20087b70:	dd400917 	ldw	r21,36(sp)
20087b74:	dd000817 	ldw	r20,32(sp)
20087b78:	dcc00717 	ldw	r19,28(sp)
20087b7c:	dc800617 	ldw	r18,24(sp)
20087b80:	dc400517 	ldw	r17,20(sp)
20087b84:	dc000417 	ldw	r16,16(sp)
20087b88:	dec00e04 	addi	sp,sp,56
20087b8c:	f800283a 	ret
20087b90:	8904b03a 	or	r2,r17,r4
20087b94:	10003726 	beq	r2,zero,20087c74 <__divdf3+0x2b0>
20087b98:	88011c26 	beq	r17,zero,2008800c <__divdf3+0x648>
20087b9c:	8809883a 	mov	r4,r17
20087ba0:	d9800315 	stw	r6,12(sp)
20087ba4:	d9c00115 	stw	r7,4(sp)
20087ba8:	00897280 	call	20089728 <__clzsi2>
20087bac:	d9800317 	ldw	r6,12(sp)
20087bb0:	d9c00117 	ldw	r7,4(sp)
20087bb4:	1007883a 	mov	r3,r2
20087bb8:	01000a04 	movi	r4,40
20087bbc:	1cfffe04 	addi	r19,r3,-8
20087bc0:	20c9c83a 	sub	r4,r4,r3
20087bc4:	8cca983a 	sll	r5,r17,r19
20087bc8:	9108d83a 	srl	r4,r18,r4
20087bcc:	94e6983a 	sll	r19,r18,r19
20087bd0:	2162b03a 	or	r17,r4,r5
20087bd4:	053f0344 	movi	r20,-1011
20087bd8:	a0e9c83a 	sub	r20,r20,r3
20087bdc:	0025883a 	mov	r18,zero
20087be0:	0011883a 	mov	r8,zero
20087be4:	003f9606 	br	20087a40 <__flash_rwdata_start+0xfffeb3f8>
20087be8:	8184b03a 	or	r2,r16,r6
20087bec:	10001f1e 	bne	r2,zero,20087c6c <__divdf3+0x2a8>
20087bf0:	0021883a 	mov	r16,zero
20087bf4:	002b883a 	mov	r21,zero
20087bf8:	01c00084 	movi	r7,2
20087bfc:	003fa206 	br	20087a88 <__flash_rwdata_start+0xfffeb440>
20087c00:	8184b03a 	or	r2,r16,r6
20087c04:	10001526 	beq	r2,zero,20087c5c <__divdf3+0x298>
20087c08:	80010c26 	beq	r16,zero,2008803c <__divdf3+0x678>
20087c0c:	8009883a 	mov	r4,r16
20087c10:	d9800315 	stw	r6,12(sp)
20087c14:	da000215 	stw	r8,8(sp)
20087c18:	da400015 	stw	r9,0(sp)
20087c1c:	00897280 	call	20089728 <__clzsi2>
20087c20:	d9800317 	ldw	r6,12(sp)
20087c24:	da000217 	ldw	r8,8(sp)
20087c28:	da400017 	ldw	r9,0(sp)
20087c2c:	1007883a 	mov	r3,r2
20087c30:	01000a04 	movi	r4,40
20087c34:	1d7ffe04 	addi	r21,r3,-8
20087c38:	20c9c83a 	sub	r4,r4,r3
20087c3c:	8560983a 	sll	r16,r16,r21
20087c40:	3108d83a 	srl	r4,r6,r4
20087c44:	356a983a 	sll	r21,r6,r21
20087c48:	2420b03a 	or	r16,r4,r16
20087c4c:	017f0344 	movi	r5,-1011
20087c50:	28cbc83a 	sub	r5,r5,r3
20087c54:	000f883a 	mov	r7,zero
20087c58:	003f8b06 	br	20087a88 <__flash_rwdata_start+0xfffeb440>
20087c5c:	0021883a 	mov	r16,zero
20087c60:	002b883a 	mov	r21,zero
20087c64:	01c00044 	movi	r7,1
20087c68:	003f8706 	br	20087a88 <__flash_rwdata_start+0xfffeb440>
20087c6c:	01c000c4 	movi	r7,3
20087c70:	003f8506 	br	20087a88 <__flash_rwdata_start+0xfffeb440>
20087c74:	04800104 	movi	r18,4
20087c78:	0023883a 	mov	r17,zero
20087c7c:	0027883a 	mov	r19,zero
20087c80:	02000044 	movi	r8,1
20087c84:	003f6e06 	br	20087a40 <__flash_rwdata_start+0xfffeb3f8>
20087c88:	04800304 	movi	r18,12
20087c8c:	020000c4 	movi	r8,3
20087c90:	003f6b06 	br	20087a40 <__flash_rwdata_start+0xfffeb3f8>
20087c94:	01400434 	movhi	r5,16
20087c98:	000d883a 	mov	r6,zero
20087c9c:	297fffc4 	addi	r5,r5,-1
20087ca0:	04ffffc4 	movi	r19,-1
20087ca4:	0101ffc4 	movi	r4,2047
20087ca8:	003fa406 	br	20087b3c <__flash_rwdata_start+0xfffeb4f4>
20087cac:	043f0084 	movi	r16,-1022
20087cb0:	8521c83a 	sub	r16,r16,r20
20087cb4:	00800e04 	movi	r2,56
20087cb8:	1401200e 	bge	r2,r16,2008813c <__divdf3+0x778>
20087cbc:	9180004c 	andi	r6,r18,1
20087cc0:	0009883a 	mov	r4,zero
20087cc4:	000b883a 	mov	r5,zero
20087cc8:	0027883a 	mov	r19,zero
20087ccc:	003f9b06 	br	20087b3c <__flash_rwdata_start+0xfffeb4f4>
20087cd0:	8880022c 	andhi	r2,r17,8
20087cd4:	1000c726 	beq	r2,zero,20087ff4 <__divdf3+0x630>
20087cd8:	8080022c 	andhi	r2,r16,8
20087cdc:	1000c51e 	bne	r2,zero,20087ff4 <__divdf3+0x630>
20087ce0:	00800434 	movhi	r2,16
20087ce4:	81400234 	orhi	r5,r16,8
20087ce8:	10bfffc4 	addi	r2,r2,-1
20087cec:	b80d883a 	mov	r6,r23
20087cf0:	288a703a 	and	r5,r5,r2
20087cf4:	a827883a 	mov	r19,r21
20087cf8:	003fea06 	br	20087ca4 <__flash_rwdata_start+0xfffeb65c>
20087cfc:	8440ea36 	bltu	r16,r17,200880a8 <__divdf3+0x6e4>
20087d00:	8c00e826 	beq	r17,r16,200880a4 <__divdf3+0x6e0>
20087d04:	a53fffc4 	addi	r20,r20,-1
20087d08:	882d883a 	mov	r22,r17
20087d0c:	000d883a 	mov	r6,zero
20087d10:	a804d63a 	srli	r2,r21,24
20087d14:	8020923a 	slli	r16,r16,8
20087d18:	b009883a 	mov	r4,r22
20087d1c:	d9800315 	stw	r6,12(sp)
20087d20:	1420b03a 	or	r16,r2,r16
20087d24:	802ed43a 	srli	r23,r16,16
20087d28:	873fffcc 	andi	fp,r16,65535
20087d2c:	a82a923a 	slli	r21,r21,8
20087d30:	b80b883a 	mov	r5,r23
20087d34:	00867940 	call	20086794 <__udivsi3>
20087d38:	b009883a 	mov	r4,r22
20087d3c:	b80b883a 	mov	r5,r23
20087d40:	1023883a 	mov	r17,r2
20087d44:	008679c0 	call	2008679c <__umodsi3>
20087d48:	1004943a 	slli	r2,r2,16
20087d4c:	9808d43a 	srli	r4,r19,16
20087d50:	8f2d383a 	mul	r22,r17,fp
20087d54:	d9800317 	ldw	r6,12(sp)
20087d58:	1106b03a 	or	r3,r2,r4
20087d5c:	1d80062e 	bgeu	r3,r22,20087d78 <__divdf3+0x3b4>
20087d60:	1c07883a 	add	r3,r3,r16
20087d64:	88bfffc4 	addi	r2,r17,-1
20087d68:	1c00dc36 	bltu	r3,r16,200880dc <__divdf3+0x718>
20087d6c:	1d80db2e 	bgeu	r3,r22,200880dc <__divdf3+0x718>
20087d70:	8c7fff84 	addi	r17,r17,-2
20087d74:	1c07883a 	add	r3,r3,r16
20087d78:	1dadc83a 	sub	r22,r3,r22
20087d7c:	b009883a 	mov	r4,r22
20087d80:	b80b883a 	mov	r5,r23
20087d84:	d9800315 	stw	r6,12(sp)
20087d88:	00867940 	call	20086794 <__udivsi3>
20087d8c:	b009883a 	mov	r4,r22
20087d90:	b80b883a 	mov	r5,r23
20087d94:	d8800015 	stw	r2,0(sp)
20087d98:	008679c0 	call	2008679c <__umodsi3>
20087d9c:	da400017 	ldw	r9,0(sp)
20087da0:	1004943a 	slli	r2,r2,16
20087da4:	9cffffcc 	andi	r19,r19,65535
20087da8:	4f07383a 	mul	r3,r9,fp
20087dac:	14c8b03a 	or	r4,r2,r19
20087db0:	d9800317 	ldw	r6,12(sp)
20087db4:	20c0062e 	bgeu	r4,r3,20087dd0 <__divdf3+0x40c>
20087db8:	2409883a 	add	r4,r4,r16
20087dbc:	48bfffc4 	addi	r2,r9,-1
20087dc0:	2400c436 	bltu	r4,r16,200880d4 <__divdf3+0x710>
20087dc4:	20c0c32e 	bgeu	r4,r3,200880d4 <__divdf3+0x710>
20087dc8:	4a7fff84 	addi	r9,r9,-2
20087dcc:	2409883a 	add	r4,r4,r16
20087dd0:	8822943a 	slli	r17,r17,16
20087dd4:	a80ed43a 	srli	r7,r21,16
20087dd8:	aa3fffcc 	andi	r8,r21,65535
20087ddc:	4c62b03a 	or	r17,r9,r17
20087de0:	8816d43a 	srli	r11,r17,16
20087de4:	897fffcc 	andi	r5,r17,65535
20087de8:	2a15383a 	mul	r10,r5,r8
20087dec:	5a19383a 	mul	r12,r11,r8
20087df0:	29cb383a 	mul	r5,r5,r7
20087df4:	5012d43a 	srli	r9,r10,16
20087df8:	20c5c83a 	sub	r2,r4,r3
20087dfc:	614b883a 	add	r5,r12,r5
20087e00:	2a4b883a 	add	r5,r5,r9
20087e04:	59c7383a 	mul	r3,r11,r7
20087e08:	2b00022e 	bgeu	r5,r12,20087e14 <__divdf3+0x450>
20087e0c:	01000074 	movhi	r4,1
20087e10:	1907883a 	add	r3,r3,r4
20087e14:	2808d43a 	srli	r4,r5,16
20087e18:	280a943a 	slli	r5,r5,16
20087e1c:	54ffffcc 	andi	r19,r10,65535
20087e20:	1907883a 	add	r3,r3,r4
20087e24:	2ccb883a 	add	r5,r5,r19
20087e28:	10c09336 	bltu	r2,r3,20088078 <__divdf3+0x6b4>
20087e2c:	10c0ad26 	beq	r2,r3,200880e4 <__divdf3+0x720>
20087e30:	10c7c83a 	sub	r3,r2,r3
20087e34:	3167c83a 	sub	r19,r6,r5
20087e38:	34ed803a 	cmpltu	r22,r6,r19
20087e3c:	1dadc83a 	sub	r22,r3,r22
20087e40:	b400b226 	beq	r22,r16,2008810c <__divdf3+0x748>
20087e44:	b009883a 	mov	r4,r22
20087e48:	b80b883a 	mov	r5,r23
20087e4c:	d9c00115 	stw	r7,4(sp)
20087e50:	da000215 	stw	r8,8(sp)
20087e54:	00867940 	call	20086794 <__udivsi3>
20087e58:	b009883a 	mov	r4,r22
20087e5c:	b80b883a 	mov	r5,r23
20087e60:	d8800315 	stw	r2,12(sp)
20087e64:	008679c0 	call	2008679c <__umodsi3>
20087e68:	d9800317 	ldw	r6,12(sp)
20087e6c:	1004943a 	slli	r2,r2,16
20087e70:	9808d43a 	srli	r4,r19,16
20087e74:	372d383a 	mul	r22,r6,fp
20087e78:	d9c00117 	ldw	r7,4(sp)
20087e7c:	1106b03a 	or	r3,r2,r4
20087e80:	da000217 	ldw	r8,8(sp)
20087e84:	1d80062e 	bgeu	r3,r22,20087ea0 <__divdf3+0x4dc>
20087e88:	1c07883a 	add	r3,r3,r16
20087e8c:	30bfffc4 	addi	r2,r6,-1
20087e90:	1c00a036 	bltu	r3,r16,20088114 <__divdf3+0x750>
20087e94:	1d809f2e 	bgeu	r3,r22,20088114 <__divdf3+0x750>
20087e98:	31bfff84 	addi	r6,r6,-2
20087e9c:	1c07883a 	add	r3,r3,r16
20087ea0:	1dadc83a 	sub	r22,r3,r22
20087ea4:	b009883a 	mov	r4,r22
20087ea8:	b80b883a 	mov	r5,r23
20087eac:	d9800315 	stw	r6,12(sp)
20087eb0:	d9c00115 	stw	r7,4(sp)
20087eb4:	da000215 	stw	r8,8(sp)
20087eb8:	00867940 	call	20086794 <__udivsi3>
20087ebc:	b009883a 	mov	r4,r22
20087ec0:	b80b883a 	mov	r5,r23
20087ec4:	d8800015 	stw	r2,0(sp)
20087ec8:	008679c0 	call	2008679c <__umodsi3>
20087ecc:	da400017 	ldw	r9,0(sp)
20087ed0:	1004943a 	slli	r2,r2,16
20087ed4:	993fffcc 	andi	r4,r19,65535
20087ed8:	4f39383a 	mul	fp,r9,fp
20087edc:	1106b03a 	or	r3,r2,r4
20087ee0:	d9800317 	ldw	r6,12(sp)
20087ee4:	d9c00117 	ldw	r7,4(sp)
20087ee8:	da000217 	ldw	r8,8(sp)
20087eec:	1f00062e 	bgeu	r3,fp,20087f08 <__divdf3+0x544>
20087ef0:	1c07883a 	add	r3,r3,r16
20087ef4:	48bfffc4 	addi	r2,r9,-1
20087ef8:	1c008836 	bltu	r3,r16,2008811c <__divdf3+0x758>
20087efc:	1f00872e 	bgeu	r3,fp,2008811c <__divdf3+0x758>
20087f00:	4a7fff84 	addi	r9,r9,-2
20087f04:	1c07883a 	add	r3,r3,r16
20087f08:	3008943a 	slli	r4,r6,16
20087f0c:	1f07c83a 	sub	r3,r3,fp
20087f10:	4926b03a 	or	r19,r9,r4
20087f14:	993fffcc 	andi	r4,r19,65535
20087f18:	980cd43a 	srli	r6,r19,16
20087f1c:	220b383a 	mul	r5,r4,r8
20087f20:	21c5383a 	mul	r2,r4,r7
20087f24:	3211383a 	mul	r8,r6,r8
20087f28:	2808d43a 	srli	r4,r5,16
20087f2c:	31cf383a 	mul	r7,r6,r7
20087f30:	4085883a 	add	r2,r8,r2
20087f34:	1105883a 	add	r2,r2,r4
20087f38:	1200022e 	bgeu	r2,r8,20087f44 <__divdf3+0x580>
20087f3c:	01000074 	movhi	r4,1
20087f40:	390f883a 	add	r7,r7,r4
20087f44:	1008d43a 	srli	r4,r2,16
20087f48:	1004943a 	slli	r2,r2,16
20087f4c:	297fffcc 	andi	r5,r5,65535
20087f50:	390f883a 	add	r7,r7,r4
20087f54:	1145883a 	add	r2,r2,r5
20087f58:	19c06536 	bltu	r3,r7,200880f0 <__divdf3+0x72c>
20087f5c:	19c09f26 	beq	r3,r7,200881dc <__divdf3+0x818>
20087f60:	9cc00054 	ori	r19,r19,1
20087f64:	a100ffc4 	addi	r4,r20,1023
20087f68:	013f500e 	bge	zero,r4,20087cac <__flash_rwdata_start+0xfffeb664>
20087f6c:	988001cc 	andi	r2,r19,7
20087f70:	10000726 	beq	r2,zero,20087f90 <__divdf3+0x5cc>
20087f74:	98c003cc 	andi	r3,r19,15
20087f78:	00800104 	movi	r2,4
20087f7c:	18800426 	beq	r3,r2,20087f90 <__divdf3+0x5cc>
20087f80:	9885883a 	add	r2,r19,r2
20087f84:	14e1803a 	cmpltu	r16,r2,r19
20087f88:	8c23883a 	add	r17,r17,r16
20087f8c:	1027883a 	mov	r19,r2
20087f90:	8880402c 	andhi	r2,r17,256
20087f94:	10000426 	beq	r2,zero,20087fa8 <__divdf3+0x5e4>
20087f98:	00bfc034 	movhi	r2,65280
20087f9c:	10bfffc4 	addi	r2,r2,-1
20087fa0:	a1010004 	addi	r4,r20,1024
20087fa4:	88a2703a 	and	r17,r17,r2
20087fa8:	0081ff84 	movi	r2,2046
20087fac:	113edf16 	blt	r2,r4,20087b2c <__flash_rwdata_start+0xfffeb4e4>
20087fb0:	9826d0fa 	srli	r19,r19,3
20087fb4:	8804977a 	slli	r2,r17,29
20087fb8:	8820927a 	slli	r16,r17,9
20087fbc:	2101ffcc 	andi	r4,r4,2047
20087fc0:	14e6b03a 	or	r19,r2,r19
20087fc4:	800ad33a 	srli	r5,r16,12
20087fc8:	9180004c 	andi	r6,r18,1
20087fcc:	003edb06 	br	20087b3c <__flash_rwdata_start+0xfffeb4f4>
20087fd0:	008000c4 	movi	r2,3
20087fd4:	4080a826 	beq	r8,r2,20088278 <__divdf3+0x8b4>
20087fd8:	00800044 	movi	r2,1
20087fdc:	4080551e 	bne	r8,r2,20088134 <__divdf3+0x770>
20087fe0:	e00d883a 	mov	r6,fp
20087fe4:	0009883a 	mov	r4,zero
20087fe8:	000b883a 	mov	r5,zero
20087fec:	0027883a 	mov	r19,zero
20087ff0:	003ed206 	br	20087b3c <__flash_rwdata_start+0xfffeb4f4>
20087ff4:	00800434 	movhi	r2,16
20087ff8:	89400234 	orhi	r5,r17,8
20087ffc:	10bfffc4 	addi	r2,r2,-1
20088000:	b00d883a 	mov	r6,r22
20088004:	288a703a 	and	r5,r5,r2
20088008:	003f2606 	br	20087ca4 <__flash_rwdata_start+0xfffeb65c>
2008800c:	d9800315 	stw	r6,12(sp)
20088010:	d9c00115 	stw	r7,4(sp)
20088014:	00897280 	call	20089728 <__clzsi2>
20088018:	10c00804 	addi	r3,r2,32
2008801c:	010009c4 	movi	r4,39
20088020:	d9800317 	ldw	r6,12(sp)
20088024:	d9c00117 	ldw	r7,4(sp)
20088028:	20fee30e 	bge	r4,r3,20087bb8 <__flash_rwdata_start+0xfffeb570>
2008802c:	117ffe04 	addi	r5,r2,-8
20088030:	9162983a 	sll	r17,r18,r5
20088034:	0027883a 	mov	r19,zero
20088038:	003ee606 	br	20087bd4 <__flash_rwdata_start+0xfffeb58c>
2008803c:	3009883a 	mov	r4,r6
20088040:	d9800315 	stw	r6,12(sp)
20088044:	da000215 	stw	r8,8(sp)
20088048:	da400015 	stw	r9,0(sp)
2008804c:	00897280 	call	20089728 <__clzsi2>
20088050:	10c00804 	addi	r3,r2,32
20088054:	010009c4 	movi	r4,39
20088058:	d9800317 	ldw	r6,12(sp)
2008805c:	da000217 	ldw	r8,8(sp)
20088060:	da400017 	ldw	r9,0(sp)
20088064:	20fef20e 	bge	r4,r3,20087c30 <__flash_rwdata_start+0xfffeb5e8>
20088068:	10bffe04 	addi	r2,r2,-8
2008806c:	a8a0983a 	sll	r16,r21,r2
20088070:	002b883a 	mov	r21,zero
20088074:	003ef506 	br	20087c4c <__flash_rwdata_start+0xfffeb604>
20088078:	354d883a 	add	r6,r6,r21
2008807c:	3549803a 	cmpltu	r4,r6,r21
20088080:	2409883a 	add	r4,r4,r16
20088084:	2089883a 	add	r4,r4,r2
20088088:	88bfffc4 	addi	r2,r17,-1
2008808c:	81000c2e 	bgeu	r16,r4,200880c0 <__divdf3+0x6fc>
20088090:	20c04436 	bltu	r4,r3,200881a4 <__divdf3+0x7e0>
20088094:	19006f26 	beq	r3,r4,20088254 <__divdf3+0x890>
20088098:	20c7c83a 	sub	r3,r4,r3
2008809c:	1023883a 	mov	r17,r2
200880a0:	003f6406 	br	20087e34 <__flash_rwdata_start+0xfffeb7ec>
200880a4:	9d7f1736 	bltu	r19,r21,20087d04 <__flash_rwdata_start+0xfffeb6bc>
200880a8:	9806d07a 	srli	r3,r19,1
200880ac:	880497fa 	slli	r2,r17,31
200880b0:	980c97fa 	slli	r6,r19,31
200880b4:	882cd07a 	srli	r22,r17,1
200880b8:	18a6b03a 	or	r19,r3,r2
200880bc:	003f1406 	br	20087d10 <__flash_rwdata_start+0xfffeb6c8>
200880c0:	243ff51e 	bne	r4,r16,20088098 <__flash_rwdata_start+0xfffeba50>
200880c4:	357ff22e 	bgeu	r6,r21,20088090 <__flash_rwdata_start+0xfffeba48>
200880c8:	80c7c83a 	sub	r3,r16,r3
200880cc:	1023883a 	mov	r17,r2
200880d0:	003f5806 	br	20087e34 <__flash_rwdata_start+0xfffeb7ec>
200880d4:	1013883a 	mov	r9,r2
200880d8:	003f3d06 	br	20087dd0 <__flash_rwdata_start+0xfffeb788>
200880dc:	1023883a 	mov	r17,r2
200880e0:	003f2506 	br	20087d78 <__flash_rwdata_start+0xfffeb730>
200880e4:	317fe436 	bltu	r6,r5,20088078 <__flash_rwdata_start+0xfffeba30>
200880e8:	0007883a 	mov	r3,zero
200880ec:	003f5106 	br	20087e34 <__flash_rwdata_start+0xfffeb7ec>
200880f0:	1c07883a 	add	r3,r3,r16
200880f4:	993fffc4 	addi	r4,r19,-1
200880f8:	1c000a2e 	bgeu	r3,r16,20088124 <__divdf3+0x760>
200880fc:	2027883a 	mov	r19,r4
20088100:	19ff971e 	bne	r3,r7,20087f60 <__flash_rwdata_start+0xfffeb918>
20088104:	a8bf961e 	bne	r21,r2,20087f60 <__flash_rwdata_start+0xfffeb918>
20088108:	003f9606 	br	20087f64 <__flash_rwdata_start+0xfffeb91c>
2008810c:	04ffffc4 	movi	r19,-1
20088110:	003f9406 	br	20087f64 <__flash_rwdata_start+0xfffeb91c>
20088114:	100d883a 	mov	r6,r2
20088118:	003f6106 	br	20087ea0 <__flash_rwdata_start+0xfffeb858>
2008811c:	1013883a 	mov	r9,r2
20088120:	003f7906 	br	20087f08 <__flash_rwdata_start+0xfffeb8c0>
20088124:	19c02636 	bltu	r3,r7,200881c0 <__divdf3+0x7fc>
20088128:	38c04d26 	beq	r7,r3,20088260 <__divdf3+0x89c>
2008812c:	2027883a 	mov	r19,r4
20088130:	003f8b06 	br	20087f60 <__flash_rwdata_start+0xfffeb918>
20088134:	e025883a 	mov	r18,fp
20088138:	003f8a06 	br	20087f64 <__flash_rwdata_start+0xfffeb91c>
2008813c:	008007c4 	movi	r2,31
20088140:	14002a16 	blt	r2,r16,200881ec <__divdf3+0x828>
20088144:	a5010784 	addi	r20,r20,1054
20088148:	8d04983a 	sll	r2,r17,r20
2008814c:	9c06d83a 	srl	r3,r19,r16
20088150:	9d28983a 	sll	r20,r19,r20
20088154:	8c20d83a 	srl	r16,r17,r16
20088158:	1886b03a 	or	r3,r3,r2
2008815c:	a004c03a 	cmpne	r2,r20,zero
20088160:	1884b03a 	or	r2,r3,r2
20088164:	10c001cc 	andi	r3,r2,7
20088168:	18000726 	beq	r3,zero,20088188 <__divdf3+0x7c4>
2008816c:	110003cc 	andi	r4,r2,15
20088170:	00c00104 	movi	r3,4
20088174:	20c00426 	beq	r4,r3,20088188 <__divdf3+0x7c4>
20088178:	10c00104 	addi	r3,r2,4
2008817c:	1885803a 	cmpltu	r2,r3,r2
20088180:	80a1883a 	add	r16,r16,r2
20088184:	1805883a 	mov	r2,r3
20088188:	80c0202c 	andhi	r3,r16,128
2008818c:	18002d26 	beq	r3,zero,20088244 <__divdf3+0x880>
20088190:	9180004c 	andi	r6,r18,1
20088194:	01000044 	movi	r4,1
20088198:	000b883a 	mov	r5,zero
2008819c:	0027883a 	mov	r19,zero
200881a0:	003e6606 	br	20087b3c <__flash_rwdata_start+0xfffeb4f4>
200881a4:	354d883a 	add	r6,r6,r21
200881a8:	356d803a 	cmpltu	r22,r6,r21
200881ac:	b42d883a 	add	r22,r22,r16
200881b0:	b12d883a 	add	r22,r22,r4
200881b4:	8c7fff84 	addi	r17,r17,-2
200881b8:	b0c7c83a 	sub	r3,r22,r3
200881bc:	003f1d06 	br	20087e34 <__flash_rwdata_start+0xfffeb7ec>
200881c0:	ad4b883a 	add	r5,r21,r21
200881c4:	2d6b803a 	cmpltu	r21,r5,r21
200881c8:	ac2b883a 	add	r21,r21,r16
200881cc:	1d47883a 	add	r3,r3,r21
200881d0:	993fff84 	addi	r4,r19,-2
200881d4:	282b883a 	mov	r21,r5
200881d8:	003fc806 	br	200880fc <__flash_rwdata_start+0xfffebab4>
200881dc:	103fc41e 	bne	r2,zero,200880f0 <__flash_rwdata_start+0xfffebaa8>
200881e0:	002b883a 	mov	r21,zero
200881e4:	a8bf5e1e 	bne	r21,r2,20087f60 <__flash_rwdata_start+0xfffeb918>
200881e8:	003f5e06 	br	20087f64 <__flash_rwdata_start+0xfffeb91c>
200881ec:	00bef884 	movi	r2,-1054
200881f0:	1505c83a 	sub	r2,r2,r20
200881f4:	00c00804 	movi	r3,32
200881f8:	8884d83a 	srl	r2,r17,r2
200881fc:	80c01c26 	beq	r16,r3,20088270 <__divdf3+0x8ac>
20088200:	a0c10f84 	addi	r3,r20,1086
20088204:	88c6983a 	sll	r3,r17,r3
20088208:	1cc6b03a 	or	r3,r3,r19
2008820c:	1806c03a 	cmpne	r3,r3,zero
20088210:	1884b03a 	or	r2,r3,r2
20088214:	140001cc 	andi	r16,r2,7
20088218:	8000061e 	bne	r16,zero,20088234 <__divdf3+0x870>
2008821c:	000b883a 	mov	r5,zero
20088220:	1004d0fa 	srli	r2,r2,3
20088224:	9180004c 	andi	r6,r18,1
20088228:	0009883a 	mov	r4,zero
2008822c:	1426b03a 	or	r19,r2,r16
20088230:	003e4206 	br	20087b3c <__flash_rwdata_start+0xfffeb4f4>
20088234:	110003cc 	andi	r4,r2,15
20088238:	00c00104 	movi	r3,4
2008823c:	0021883a 	mov	r16,zero
20088240:	20ffcd1e 	bne	r4,r3,20088178 <__flash_rwdata_start+0xfffebb30>
20088244:	800a927a 	slli	r5,r16,9
20088248:	8020977a 	slli	r16,r16,29
2008824c:	280ad33a 	srli	r5,r5,12
20088250:	003ff306 	br	20088220 <__flash_rwdata_start+0xfffebbd8>
20088254:	317fd336 	bltu	r6,r5,200881a4 <__flash_rwdata_start+0xfffebb5c>
20088258:	1023883a 	mov	r17,r2
2008825c:	003fa206 	br	200880e8 <__flash_rwdata_start+0xfffebaa0>
20088260:	a8bfd736 	bltu	r21,r2,200881c0 <__flash_rwdata_start+0xfffebb78>
20088264:	2027883a 	mov	r19,r4
20088268:	a8bf3d1e 	bne	r21,r2,20087f60 <__flash_rwdata_start+0xfffeb918>
2008826c:	003f3d06 	br	20087f64 <__flash_rwdata_start+0xfffeb91c>
20088270:	0007883a 	mov	r3,zero
20088274:	003fe406 	br	20088208 <__flash_rwdata_start+0xfffebbc0>
20088278:	00800434 	movhi	r2,16
2008827c:	89400234 	orhi	r5,r17,8
20088280:	10bfffc4 	addi	r2,r2,-1
20088284:	e00d883a 	mov	r6,fp
20088288:	288a703a 	and	r5,r5,r2
2008828c:	003e8506 	br	20087ca4 <__flash_rwdata_start+0xfffeb65c>

20088290 <__muldf3>:
20088290:	defff204 	addi	sp,sp,-56
20088294:	2804d53a 	srli	r2,r5,20
20088298:	dd800a15 	stw	r22,40(sp)
2008829c:	282cd7fa 	srli	r22,r5,31
200882a0:	dc000415 	stw	r16,16(sp)
200882a4:	04000434 	movhi	r16,16
200882a8:	df000c15 	stw	fp,48(sp)
200882ac:	dd000815 	stw	r20,32(sp)
200882b0:	dcc00715 	stw	r19,28(sp)
200882b4:	dc800615 	stw	r18,24(sp)
200882b8:	dc400515 	stw	r17,20(sp)
200882bc:	843fffc4 	addi	r16,r16,-1
200882c0:	dfc00d15 	stw	ra,52(sp)
200882c4:	ddc00b15 	stw	r23,44(sp)
200882c8:	dd400915 	stw	r21,36(sp)
200882cc:	1501ffcc 	andi	r20,r2,2047
200882d0:	2023883a 	mov	r17,r4
200882d4:	2025883a 	mov	r18,r4
200882d8:	2c20703a 	and	r16,r5,r16
200882dc:	b027883a 	mov	r19,r22
200882e0:	b7003fcc 	andi	fp,r22,255
200882e4:	a0005926 	beq	r20,zero,2008844c <__muldf3+0x1bc>
200882e8:	0081ffc4 	movi	r2,2047
200882ec:	a0803426 	beq	r20,r2,200883c0 <__muldf3+0x130>
200882f0:	84000434 	orhi	r16,r16,16
200882f4:	2004d77a 	srli	r2,r4,29
200882f8:	802090fa 	slli	r16,r16,3
200882fc:	202490fa 	slli	r18,r4,3
20088300:	a53f0044 	addi	r20,r20,-1023
20088304:	80a0b03a 	or	r16,r16,r2
20088308:	002b883a 	mov	r21,zero
2008830c:	0015883a 	mov	r10,zero
20088310:	3812d53a 	srli	r9,r7,20
20088314:	3806d7fa 	srli	r3,r7,31
20088318:	02000434 	movhi	r8,16
2008831c:	423fffc4 	addi	r8,r8,-1
20088320:	4941ffcc 	andi	r5,r9,2047
20088324:	302f883a 	mov	r23,r6
20088328:	3a22703a 	and	r17,r7,r8
2008832c:	1ac03fcc 	andi	r11,r3,255
20088330:	28006226 	beq	r5,zero,200884bc <__muldf3+0x22c>
20088334:	0081ffc4 	movi	r2,2047
20088338:	28805a26 	beq	r5,r2,200884a4 <__muldf3+0x214>
2008833c:	8a000434 	orhi	r8,r17,16
20088340:	3004d77a 	srli	r2,r6,29
20088344:	401090fa 	slli	r8,r8,3
20088348:	302e90fa 	slli	r23,r6,3
2008834c:	297f0044 	addi	r5,r5,-1023
20088350:	40a2b03a 	or	r17,r8,r2
20088354:	0013883a 	mov	r9,zero
20088358:	4d4cb03a 	or	r6,r9,r21
2008835c:	300c90ba 	slli	r6,r6,2
20088360:	02080274 	movhi	r8,8201
20088364:	4220e004 	addi	r8,r8,-31872
20088368:	320d883a 	add	r6,r6,r8
2008836c:	31800017 	ldw	r6,0(r6)
20088370:	a14b883a 	add	r5,r20,r5
20088374:	1dacf03a 	xor	r22,r3,r22
20088378:	2b000044 	addi	r12,r5,1
2008837c:	3000683a 	jmp	r6
20088380:	200885bc 	xorhi	zero,r4,8726
20088384:	200885a8 	cmpgeui	zero,r4,8726
20088388:	200885a8 	cmpgeui	zero,r4,8726
2008838c:	20088594 	ori	zero,r4,8726
20088390:	200883dc 	xori	zero,r4,8719
20088394:	200883dc 	xori	zero,r4,8719
20088398:	2008857c 	xorhi	zero,r4,8725
2008839c:	20088594 	ori	zero,r4,8726
200883a0:	200883dc 	xori	zero,r4,8719
200883a4:	2008857c 	xorhi	zero,r4,8725
200883a8:	200883dc 	xori	zero,r4,8719
200883ac:	20088594 	ori	zero,r4,8726
200883b0:	200883e0 	cmpeqi	zero,r4,8719
200883b4:	200883e0 	cmpeqi	zero,r4,8719
200883b8:	200883e0 	cmpeqi	zero,r4,8719
200883bc:	200887b8 	rdprs	zero,r4,8734
200883c0:	8104b03a 	or	r2,r16,r4
200883c4:	10006a1e 	bne	r2,zero,20088570 <__muldf3+0x2e0>
200883c8:	05400204 	movi	r21,8
200883cc:	0021883a 	mov	r16,zero
200883d0:	0025883a 	mov	r18,zero
200883d4:	02800084 	movi	r10,2
200883d8:	003fcd06 	br	20088310 <__flash_rwdata_start+0xfffebcc8>
200883dc:	b039883a 	mov	fp,r22
200883e0:	00800084 	movi	r2,2
200883e4:	50804e1e 	bne	r10,r2,20088520 <__muldf3+0x290>
200883e8:	e4c0004c 	andi	r19,fp,1
200883ec:	0101ffc4 	movi	r4,2047
200883f0:	0021883a 	mov	r16,zero
200883f4:	0025883a 	mov	r18,zero
200883f8:	2008953a 	slli	r4,r4,20
200883fc:	98c03fcc 	andi	r3,r19,255
20088400:	01400434 	movhi	r5,16
20088404:	297fffc4 	addi	r5,r5,-1
20088408:	180697fa 	slli	r3,r3,31
2008840c:	8160703a 	and	r16,r16,r5
20088410:	8120b03a 	or	r16,r16,r4
20088414:	80c6b03a 	or	r3,r16,r3
20088418:	9005883a 	mov	r2,r18
2008841c:	dfc00d17 	ldw	ra,52(sp)
20088420:	df000c17 	ldw	fp,48(sp)
20088424:	ddc00b17 	ldw	r23,44(sp)
20088428:	dd800a17 	ldw	r22,40(sp)
2008842c:	dd400917 	ldw	r21,36(sp)
20088430:	dd000817 	ldw	r20,32(sp)
20088434:	dcc00717 	ldw	r19,28(sp)
20088438:	dc800617 	ldw	r18,24(sp)
2008843c:	dc400517 	ldw	r17,20(sp)
20088440:	dc000417 	ldw	r16,16(sp)
20088444:	dec00e04 	addi	sp,sp,56
20088448:	f800283a 	ret
2008844c:	8104b03a 	or	r2,r16,r4
20088450:	10004226 	beq	r2,zero,2008855c <__muldf3+0x2cc>
20088454:	8000f926 	beq	r16,zero,2008883c <__muldf3+0x5ac>
20088458:	8009883a 	mov	r4,r16
2008845c:	d9800315 	stw	r6,12(sp)
20088460:	d9c00015 	stw	r7,0(sp)
20088464:	00897280 	call	20089728 <__clzsi2>
20088468:	d9800317 	ldw	r6,12(sp)
2008846c:	d9c00017 	ldw	r7,0(sp)
20088470:	1007883a 	mov	r3,r2
20088474:	01000a04 	movi	r4,40
20088478:	18bffe04 	addi	r2,r3,-8
2008847c:	20c9c83a 	sub	r4,r4,r3
20088480:	80a0983a 	sll	r16,r16,r2
20088484:	8908d83a 	srl	r4,r17,r4
20088488:	88a4983a 	sll	r18,r17,r2
2008848c:	2420b03a 	or	r16,r4,r16
20088490:	017f0344 	movi	r5,-1011
20088494:	28e9c83a 	sub	r20,r5,r3
20088498:	002b883a 	mov	r21,zero
2008849c:	0015883a 	mov	r10,zero
200884a0:	003f9b06 	br	20088310 <__flash_rwdata_start+0xfffebcc8>
200884a4:	8984b03a 	or	r2,r17,r6
200884a8:	10002a1e 	bne	r2,zero,20088554 <__muldf3+0x2c4>
200884ac:	0023883a 	mov	r17,zero
200884b0:	002f883a 	mov	r23,zero
200884b4:	02400084 	movi	r9,2
200884b8:	003fa706 	br	20088358 <__flash_rwdata_start+0xfffebd10>
200884bc:	8984b03a 	or	r2,r17,r6
200884c0:	10002026 	beq	r2,zero,20088544 <__muldf3+0x2b4>
200884c4:	8800cc26 	beq	r17,zero,200887f8 <__muldf3+0x568>
200884c8:	8809883a 	mov	r4,r17
200884cc:	d8c00215 	stw	r3,8(sp)
200884d0:	d9800315 	stw	r6,12(sp)
200884d4:	da800015 	stw	r10,0(sp)
200884d8:	dac00115 	stw	r11,4(sp)
200884dc:	00897280 	call	20089728 <__clzsi2>
200884e0:	d8c00217 	ldw	r3,8(sp)
200884e4:	d9800317 	ldw	r6,12(sp)
200884e8:	da800017 	ldw	r10,0(sp)
200884ec:	dac00117 	ldw	r11,4(sp)
200884f0:	1009883a 	mov	r4,r2
200884f4:	01400a04 	movi	r5,40
200884f8:	25fffe04 	addi	r23,r4,-8
200884fc:	290bc83a 	sub	r5,r5,r4
20088500:	8dd0983a 	sll	r8,r17,r23
20088504:	314ad83a 	srl	r5,r6,r5
20088508:	35ee983a 	sll	r23,r6,r23
2008850c:	2a22b03a 	or	r17,r5,r8
20088510:	017f0344 	movi	r5,-1011
20088514:	290bc83a 	sub	r5,r5,r4
20088518:	0013883a 	mov	r9,zero
2008851c:	003f8e06 	br	20088358 <__flash_rwdata_start+0xfffebd10>
20088520:	008000c4 	movi	r2,3
20088524:	50811d26 	beq	r10,r2,2008899c <__muldf3+0x70c>
20088528:	00800044 	movi	r2,1
2008852c:	5080e01e 	bne	r10,r2,200888b0 <__muldf3+0x620>
20088530:	e0a6703a 	and	r19,fp,r2
20088534:	0009883a 	mov	r4,zero
20088538:	0021883a 	mov	r16,zero
2008853c:	0025883a 	mov	r18,zero
20088540:	003fad06 	br	200883f8 <__flash_rwdata_start+0xfffebdb0>
20088544:	0023883a 	mov	r17,zero
20088548:	002f883a 	mov	r23,zero
2008854c:	02400044 	movi	r9,1
20088550:	003f8106 	br	20088358 <__flash_rwdata_start+0xfffebd10>
20088554:	024000c4 	movi	r9,3
20088558:	003f7f06 	br	20088358 <__flash_rwdata_start+0xfffebd10>
2008855c:	05400104 	movi	r21,4
20088560:	0021883a 	mov	r16,zero
20088564:	0025883a 	mov	r18,zero
20088568:	02800044 	movi	r10,1
2008856c:	003f6806 	br	20088310 <__flash_rwdata_start+0xfffebcc8>
20088570:	05400304 	movi	r21,12
20088574:	028000c4 	movi	r10,3
20088578:	003f6506 	br	20088310 <__flash_rwdata_start+0xfffebcc8>
2008857c:	04000434 	movhi	r16,16
20088580:	0027883a 	mov	r19,zero
20088584:	843fffc4 	addi	r16,r16,-1
20088588:	04bfffc4 	movi	r18,-1
2008858c:	0101ffc4 	movi	r4,2047
20088590:	003f9906 	br	200883f8 <__flash_rwdata_start+0xfffebdb0>
20088594:	8821883a 	mov	r16,r17
20088598:	b825883a 	mov	r18,r23
2008859c:	5839883a 	mov	fp,r11
200885a0:	4815883a 	mov	r10,r9
200885a4:	003f8e06 	br	200883e0 <__flash_rwdata_start+0xfffebd98>
200885a8:	8821883a 	mov	r16,r17
200885ac:	b825883a 	mov	r18,r23
200885b0:	b039883a 	mov	fp,r22
200885b4:	4815883a 	mov	r10,r9
200885b8:	003f8906 	br	200883e0 <__flash_rwdata_start+0xfffebd98>
200885bc:	b80cd43a 	srli	r6,r23,16
200885c0:	9006d43a 	srli	r3,r18,16
200885c4:	90bfffcc 	andi	r2,r18,65535
200885c8:	bdffffcc 	andi	r23,r23,65535
200885cc:	b891383a 	mul	r8,r23,r2
200885d0:	b8c9383a 	mul	r4,r23,r3
200885d4:	309b383a 	mul	r13,r6,r2
200885d8:	400ed43a 	srli	r7,r8,16
200885dc:	30df383a 	mul	r15,r6,r3
200885e0:	235b883a 	add	r13,r4,r13
200885e4:	69db883a 	add	r13,r13,r7
200885e8:	6900022e 	bgeu	r13,r4,200885f4 <__muldf3+0x364>
200885ec:	01000074 	movhi	r4,1
200885f0:	791f883a 	add	r15,r15,r4
200885f4:	8828d43a 	srli	r20,r17,16
200885f8:	8c7fffcc 	andi	r17,r17,65535
200885fc:	888f383a 	mul	r7,r17,r2
20088600:	88d3383a 	mul	r9,r17,r3
20088604:	a0a5383a 	mul	r18,r20,r2
20088608:	3816d43a 	srli	r11,r7,16
2008860c:	6814943a 	slli	r10,r13,16
20088610:	4ca5883a 	add	r18,r9,r18
20088614:	423fffcc 	andi	r8,r8,65535
20088618:	92e5883a 	add	r18,r18,r11
2008861c:	6808d43a 	srli	r4,r13,16
20088620:	5215883a 	add	r10,r10,r8
20088624:	a0c7383a 	mul	r3,r20,r3
20088628:	9240022e 	bgeu	r18,r9,20088634 <__muldf3+0x3a4>
2008862c:	00800074 	movhi	r2,1
20088630:	1887883a 	add	r3,r3,r2
20088634:	802ad43a 	srli	r21,r16,16
20088638:	80bfffcc 	andi	r2,r16,65535
2008863c:	b893383a 	mul	r9,r23,r2
20088640:	3091383a 	mul	r8,r6,r2
20088644:	bd6f383a 	mul	r23,r23,r21
20088648:	9026943a 	slli	r19,r18,16
2008864c:	481ad43a 	srli	r13,r9,16
20088650:	9024d43a 	srli	r18,r18,16
20088654:	39ffffcc 	andi	r7,r7,65535
20088658:	ba11883a 	add	r8,r23,r8
2008865c:	99e7883a 	add	r19,r19,r7
20088660:	4351883a 	add	r8,r8,r13
20088664:	1c97883a 	add	r11,r3,r18
20088668:	354d383a 	mul	r6,r6,r21
2008866c:	9925883a 	add	r18,r19,r4
20088670:	45c0022e 	bgeu	r8,r23,2008867c <__muldf3+0x3ec>
20088674:	00c00074 	movhi	r3,1
20088678:	30cd883a 	add	r6,r6,r3
2008867c:	8889383a 	mul	r4,r17,r2
20088680:	8d63383a 	mul	r17,r17,r21
20088684:	a085383a 	mul	r2,r20,r2
20088688:	200ed43a 	srli	r7,r4,16
2008868c:	401cd43a 	srli	r14,r8,16
20088690:	401a943a 	slli	r13,r8,16
20088694:	8885883a 	add	r2,r17,r2
20088698:	4a3fffcc 	andi	r8,r9,65535
2008869c:	11c5883a 	add	r2,r2,r7
200886a0:	339d883a 	add	r14,r6,r14
200886a4:	6a11883a 	add	r8,r13,r8
200886a8:	a561383a 	mul	r16,r20,r21
200886ac:	1440022e 	bgeu	r2,r17,200886b8 <__muldf3+0x428>
200886b0:	00c00074 	movhi	r3,1
200886b4:	80e1883a 	add	r16,r16,r3
200886b8:	1006943a 	slli	r3,r2,16
200886bc:	213fffcc 	andi	r4,r4,65535
200886c0:	93db883a 	add	r13,r18,r15
200886c4:	1909883a 	add	r4,r3,r4
200886c8:	22c7883a 	add	r3,r4,r11
200886cc:	6cd3803a 	cmpltu	r9,r13,r19
200886d0:	6a09883a 	add	r4,r13,r8
200886d4:	1a5b883a 	add	r13,r3,r9
200886d8:	2211803a 	cmpltu	r8,r4,r8
200886dc:	734d883a 	add	r6,r14,r13
200886e0:	100ed43a 	srli	r7,r2,16
200886e4:	6a53803a 	cmpltu	r9,r13,r9
200886e8:	3205883a 	add	r2,r6,r8
200886ec:	1ac7803a 	cmpltu	r3,r3,r11
200886f0:	1211803a 	cmpltu	r8,r2,r8
200886f4:	48c6b03a 	or	r3,r9,r3
200886f8:	338d803a 	cmpltu	r6,r6,r14
200886fc:	19c7883a 	add	r3,r3,r7
20088700:	418cb03a 	or	r6,r8,r6
20088704:	1987883a 	add	r3,r3,r6
20088708:	2024927a 	slli	r18,r4,9
2008870c:	1c07883a 	add	r3,r3,r16
20088710:	1806927a 	slli	r3,r3,9
20088714:	1020d5fa 	srli	r16,r2,23
20088718:	2008d5fa 	srli	r4,r4,23
2008871c:	9294b03a 	or	r10,r18,r10
20088720:	1004927a 	slli	r2,r2,9
20088724:	5024c03a 	cmpne	r18,r10,zero
20088728:	1c20b03a 	or	r16,r3,r16
2008872c:	9108b03a 	or	r4,r18,r4
20088730:	80c0402c 	andhi	r3,r16,256
20088734:	20a4b03a 	or	r18,r4,r2
20088738:	18000726 	beq	r3,zero,20088758 <__muldf3+0x4c8>
2008873c:	9006d07a 	srli	r3,r18,1
20088740:	800897fa 	slli	r4,r16,31
20088744:	9080004c 	andi	r2,r18,1
20088748:	8020d07a 	srli	r16,r16,1
2008874c:	10c4b03a 	or	r2,r2,r3
20088750:	1124b03a 	or	r18,r2,r4
20088754:	600b883a 	mov	r5,r12
20088758:	2900ffc4 	addi	r4,r5,1023
2008875c:	01004b0e 	bge	zero,r4,2008888c <__muldf3+0x5fc>
20088760:	908001cc 	andi	r2,r18,7
20088764:	10000726 	beq	r2,zero,20088784 <__muldf3+0x4f4>
20088768:	90c003cc 	andi	r3,r18,15
2008876c:	00800104 	movi	r2,4
20088770:	18800426 	beq	r3,r2,20088784 <__muldf3+0x4f4>
20088774:	9087883a 	add	r3,r18,r2
20088778:	1c85803a 	cmpltu	r2,r3,r18
2008877c:	80a1883a 	add	r16,r16,r2
20088780:	1825883a 	mov	r18,r3
20088784:	8080402c 	andhi	r2,r16,256
20088788:	10000426 	beq	r2,zero,2008879c <__muldf3+0x50c>
2008878c:	00bfc034 	movhi	r2,65280
20088790:	10bfffc4 	addi	r2,r2,-1
20088794:	29010004 	addi	r4,r5,1024
20088798:	80a0703a 	and	r16,r16,r2
2008879c:	0081ff84 	movi	r2,2046
200887a0:	1100320e 	bge	r2,r4,2008886c <__muldf3+0x5dc>
200887a4:	b4c0004c 	andi	r19,r22,1
200887a8:	0101ffc4 	movi	r4,2047
200887ac:	0021883a 	mov	r16,zero
200887b0:	0025883a 	mov	r18,zero
200887b4:	003f1006 	br	200883f8 <__flash_rwdata_start+0xfffebdb0>
200887b8:	8080022c 	andhi	r2,r16,8
200887bc:	10000926 	beq	r2,zero,200887e4 <__muldf3+0x554>
200887c0:	8880022c 	andhi	r2,r17,8
200887c4:	1000071e 	bne	r2,zero,200887e4 <__muldf3+0x554>
200887c8:	00800434 	movhi	r2,16
200887cc:	8c000234 	orhi	r16,r17,8
200887d0:	10bfffc4 	addi	r2,r2,-1
200887d4:	1827883a 	mov	r19,r3
200887d8:	80a0703a 	and	r16,r16,r2
200887dc:	b825883a 	mov	r18,r23
200887e0:	003f6a06 	br	2008858c <__flash_rwdata_start+0xfffebf44>
200887e4:	00800434 	movhi	r2,16
200887e8:	84000234 	orhi	r16,r16,8
200887ec:	10bfffc4 	addi	r2,r2,-1
200887f0:	80a0703a 	and	r16,r16,r2
200887f4:	003f6506 	br	2008858c <__flash_rwdata_start+0xfffebf44>
200887f8:	3009883a 	mov	r4,r6
200887fc:	d8c00215 	stw	r3,8(sp)
20088800:	d9800315 	stw	r6,12(sp)
20088804:	da800015 	stw	r10,0(sp)
20088808:	dac00115 	stw	r11,4(sp)
2008880c:	00897280 	call	20089728 <__clzsi2>
20088810:	11000804 	addi	r4,r2,32
20088814:	014009c4 	movi	r5,39
20088818:	d8c00217 	ldw	r3,8(sp)
2008881c:	d9800317 	ldw	r6,12(sp)
20088820:	da800017 	ldw	r10,0(sp)
20088824:	dac00117 	ldw	r11,4(sp)
20088828:	293f320e 	bge	r5,r4,200884f4 <__flash_rwdata_start+0xfffebeac>
2008882c:	10bffe04 	addi	r2,r2,-8
20088830:	b8a2983a 	sll	r17,r23,r2
20088834:	002f883a 	mov	r23,zero
20088838:	003f3506 	br	20088510 <__flash_rwdata_start+0xfffebec8>
2008883c:	d9800315 	stw	r6,12(sp)
20088840:	d9c00015 	stw	r7,0(sp)
20088844:	00897280 	call	20089728 <__clzsi2>
20088848:	10c00804 	addi	r3,r2,32
2008884c:	010009c4 	movi	r4,39
20088850:	d9800317 	ldw	r6,12(sp)
20088854:	d9c00017 	ldw	r7,0(sp)
20088858:	20ff060e 	bge	r4,r3,20088474 <__flash_rwdata_start+0xfffebe2c>
2008885c:	10bffe04 	addi	r2,r2,-8
20088860:	88a0983a 	sll	r16,r17,r2
20088864:	0025883a 	mov	r18,zero
20088868:	003f0906 	br	20088490 <__flash_rwdata_start+0xfffebe48>
2008886c:	9004d0fa 	srli	r2,r18,3
20088870:	8024977a 	slli	r18,r16,29
20088874:	8020927a 	slli	r16,r16,9
20088878:	2101ffcc 	andi	r4,r4,2047
2008887c:	90a4b03a 	or	r18,r18,r2
20088880:	8020d33a 	srli	r16,r16,12
20088884:	b4c0004c 	andi	r19,r22,1
20088888:	003edb06 	br	200883f8 <__flash_rwdata_start+0xfffebdb0>
2008888c:	00ff0084 	movi	r3,-1022
20088890:	1947c83a 	sub	r3,r3,r5
20088894:	00800e04 	movi	r2,56
20088898:	10c0080e 	bge	r2,r3,200888bc <__muldf3+0x62c>
2008889c:	b4c0004c 	andi	r19,r22,1
200888a0:	0009883a 	mov	r4,zero
200888a4:	0021883a 	mov	r16,zero
200888a8:	0025883a 	mov	r18,zero
200888ac:	003ed206 	br	200883f8 <__flash_rwdata_start+0xfffebdb0>
200888b0:	600b883a 	mov	r5,r12
200888b4:	e02d883a 	mov	r22,fp
200888b8:	003fa706 	br	20088758 <__flash_rwdata_start+0xfffec110>
200888bc:	008007c4 	movi	r2,31
200888c0:	10c01816 	blt	r2,r3,20088924 <__muldf3+0x694>
200888c4:	29410784 	addi	r5,r5,1054
200888c8:	8144983a 	sll	r2,r16,r5
200888cc:	90c8d83a 	srl	r4,r18,r3
200888d0:	914a983a 	sll	r5,r18,r5
200888d4:	80c6d83a 	srl	r3,r16,r3
200888d8:	2088b03a 	or	r4,r4,r2
200888dc:	2804c03a 	cmpne	r2,r5,zero
200888e0:	2084b03a 	or	r2,r4,r2
200888e4:	110001cc 	andi	r4,r2,7
200888e8:	20000726 	beq	r4,zero,20088908 <__muldf3+0x678>
200888ec:	114003cc 	andi	r5,r2,15
200888f0:	01000104 	movi	r4,4
200888f4:	29000426 	beq	r5,r4,20088908 <__muldf3+0x678>
200888f8:	11000104 	addi	r4,r2,4
200888fc:	2085803a 	cmpltu	r2,r4,r2
20088900:	1887883a 	add	r3,r3,r2
20088904:	2005883a 	mov	r2,r4
20088908:	1900202c 	andhi	r4,r3,128
2008890c:	20001826 	beq	r4,zero,20088970 <__muldf3+0x6e0>
20088910:	b4c0004c 	andi	r19,r22,1
20088914:	01000044 	movi	r4,1
20088918:	0021883a 	mov	r16,zero
2008891c:	0025883a 	mov	r18,zero
20088920:	003eb506 	br	200883f8 <__flash_rwdata_start+0xfffebdb0>
20088924:	00bef884 	movi	r2,-1054
20088928:	1145c83a 	sub	r2,r2,r5
2008892c:	8088d83a 	srl	r4,r16,r2
20088930:	00800804 	movi	r2,32
20088934:	18801726 	beq	r3,r2,20088994 <__muldf3+0x704>
20088938:	28810f84 	addi	r2,r5,1086
2008893c:	8084983a 	sll	r2,r16,r2
20088940:	1484b03a 	or	r2,r2,r18
20088944:	1004c03a 	cmpne	r2,r2,zero
20088948:	1104b03a 	or	r2,r2,r4
2008894c:	10c001cc 	andi	r3,r2,7
20088950:	18000b1e 	bne	r3,zero,20088980 <__muldf3+0x6f0>
20088954:	0021883a 	mov	r16,zero
20088958:	1004d0fa 	srli	r2,r2,3
2008895c:	b4c0004c 	andi	r19,r22,1
20088960:	0009883a 	mov	r4,zero
20088964:	10e4b03a 	or	r18,r2,r3
20088968:	003ea306 	br	200883f8 <__flash_rwdata_start+0xfffebdb0>
2008896c:	0007883a 	mov	r3,zero
20088970:	1820927a 	slli	r16,r3,9
20088974:	1806977a 	slli	r3,r3,29
20088978:	8020d33a 	srli	r16,r16,12
2008897c:	003ff606 	br	20088958 <__flash_rwdata_start+0xfffec310>
20088980:	110003cc 	andi	r4,r2,15
20088984:	00c00104 	movi	r3,4
20088988:	20fff826 	beq	r4,r3,2008896c <__flash_rwdata_start+0xfffec324>
2008898c:	0007883a 	mov	r3,zero
20088990:	003fd906 	br	200888f8 <__flash_rwdata_start+0xfffec2b0>
20088994:	0005883a 	mov	r2,zero
20088998:	003fe906 	br	20088940 <__flash_rwdata_start+0xfffec2f8>
2008899c:	00800434 	movhi	r2,16
200889a0:	84000234 	orhi	r16,r16,8
200889a4:	10bfffc4 	addi	r2,r2,-1
200889a8:	e4c0004c 	andi	r19,fp,1
200889ac:	80a0703a 	and	r16,r16,r2
200889b0:	003ef606 	br	2008858c <__flash_rwdata_start+0xfffebf44>

200889b4 <__subdf3>:
200889b4:	00c00434 	movhi	r3,16
200889b8:	18ffffc4 	addi	r3,r3,-1
200889bc:	defffb04 	addi	sp,sp,-20
200889c0:	28d2703a 	and	r9,r5,r3
200889c4:	3814d53a 	srli	r10,r7,20
200889c8:	38c6703a 	and	r3,r7,r3
200889cc:	3004d77a 	srli	r2,r6,29
200889d0:	dc800215 	stw	r18,8(sp)
200889d4:	dc000015 	stw	r16,0(sp)
200889d8:	2824d7fa 	srli	r18,r5,31
200889dc:	2820d53a 	srli	r16,r5,20
200889e0:	481290fa 	slli	r9,r9,3
200889e4:	200ad77a 	srli	r5,r4,29
200889e8:	180690fa 	slli	r3,r3,3
200889ec:	dc400115 	stw	r17,4(sp)
200889f0:	dfc00415 	stw	ra,16(sp)
200889f4:	202290fa 	slli	r17,r4,3
200889f8:	dcc00315 	stw	r19,12(sp)
200889fc:	5281ffcc 	andi	r10,r10,2047
20088a00:	0101ffc4 	movi	r4,2047
20088a04:	9011883a 	mov	r8,r18
20088a08:	8401ffcc 	andi	r16,r16,2047
20088a0c:	94803fcc 	andi	r18,r18,255
20088a10:	494ab03a 	or	r5,r9,r5
20088a14:	380ed7fa 	srli	r7,r7,31
20088a18:	1886b03a 	or	r3,r3,r2
20088a1c:	300c90fa 	slli	r6,r6,3
20088a20:	51009026 	beq	r10,r4,20088c64 <__subdf3+0x2b0>
20088a24:	39c0005c 	xori	r7,r7,1
20088a28:	8285c83a 	sub	r2,r16,r10
20088a2c:	91c06f26 	beq	r18,r7,20088bec <__subdf3+0x238>
20088a30:	0080b10e 	bge	zero,r2,20088cf8 <__subdf3+0x344>
20088a34:	50002a1e 	bne	r10,zero,20088ae0 <__subdf3+0x12c>
20088a38:	1988b03a 	or	r4,r3,r6
20088a3c:	2000941e 	bne	r4,zero,20088c90 <__subdf3+0x2dc>
20088a40:	888001cc 	andi	r2,r17,7
20088a44:	10005b26 	beq	r2,zero,20088bb4 <__subdf3+0x200>
20088a48:	88c003cc 	andi	r3,r17,15
20088a4c:	00800104 	movi	r2,4
20088a50:	18805826 	beq	r3,r2,20088bb4 <__subdf3+0x200>
20088a54:	88c00104 	addi	r3,r17,4
20088a58:	1c63803a 	cmpltu	r17,r3,r17
20088a5c:	2c4b883a 	add	r5,r5,r17
20088a60:	2880202c 	andhi	r2,r5,128
20088a64:	9200004c 	andi	r8,r18,1
20088a68:	1823883a 	mov	r17,r3
20088a6c:	10005426 	beq	r2,zero,20088bc0 <__subdf3+0x20c>
20088a70:	84000044 	addi	r16,r16,1
20088a74:	0081ffc4 	movi	r2,2047
20088a78:	8080bf26 	beq	r16,r2,20088d78 <__subdf3+0x3c4>
20088a7c:	013fe034 	movhi	r4,65408
20088a80:	213fffc4 	addi	r4,r4,-1
20088a84:	290a703a 	and	r5,r5,r4
20088a88:	2804977a 	slli	r2,r5,29
20088a8c:	280a927a 	slli	r5,r5,9
20088a90:	8822d0fa 	srli	r17,r17,3
20088a94:	8401ffcc 	andi	r16,r16,2047
20088a98:	2808d33a 	srli	r4,r5,12
20088a9c:	1444b03a 	or	r2,r2,r17
20088aa0:	8401ffcc 	andi	r16,r16,2047
20088aa4:	800a953a 	slli	r5,r16,20
20088aa8:	40c03fcc 	andi	r3,r8,255
20088aac:	04000434 	movhi	r16,16
20088ab0:	180697fa 	slli	r3,r3,31
20088ab4:	843fffc4 	addi	r16,r16,-1
20088ab8:	2420703a 	and	r16,r4,r16
20088abc:	8160b03a 	or	r16,r16,r5
20088ac0:	80c6b03a 	or	r3,r16,r3
20088ac4:	dfc00417 	ldw	ra,16(sp)
20088ac8:	dcc00317 	ldw	r19,12(sp)
20088acc:	dc800217 	ldw	r18,8(sp)
20088ad0:	dc400117 	ldw	r17,4(sp)
20088ad4:	dc000017 	ldw	r16,0(sp)
20088ad8:	dec00504 	addi	sp,sp,20
20088adc:	f800283a 	ret
20088ae0:	0101ffc4 	movi	r4,2047
20088ae4:	813fd626 	beq	r16,r4,20088a40 <__flash_rwdata_start+0xfffec3f8>
20088ae8:	18c02034 	orhi	r3,r3,128
20088aec:	01000e04 	movi	r4,56
20088af0:	2080a416 	blt	r4,r2,20088d84 <__subdf3+0x3d0>
20088af4:	010007c4 	movi	r4,31
20088af8:	2080c716 	blt	r4,r2,20088e18 <__subdf3+0x464>
20088afc:	01000804 	movi	r4,32
20088b00:	2089c83a 	sub	r4,r4,r2
20088b04:	1910983a 	sll	r8,r3,r4
20088b08:	308ed83a 	srl	r7,r6,r2
20088b0c:	3108983a 	sll	r4,r6,r4
20088b10:	1884d83a 	srl	r2,r3,r2
20088b14:	41ccb03a 	or	r6,r8,r7
20088b18:	2008c03a 	cmpne	r4,r4,zero
20088b1c:	310cb03a 	or	r6,r6,r4
20088b20:	898dc83a 	sub	r6,r17,r6
20088b24:	89a3803a 	cmpltu	r17,r17,r6
20088b28:	288bc83a 	sub	r5,r5,r2
20088b2c:	2c4bc83a 	sub	r5,r5,r17
20088b30:	3023883a 	mov	r17,r6
20088b34:	2880202c 	andhi	r2,r5,128
20088b38:	10006b26 	beq	r2,zero,20088ce8 <__subdf3+0x334>
20088b3c:	04c02034 	movhi	r19,128
20088b40:	9cffffc4 	addi	r19,r19,-1
20088b44:	2ce6703a 	and	r19,r5,r19
20088b48:	98007c26 	beq	r19,zero,20088d3c <__subdf3+0x388>
20088b4c:	9809883a 	mov	r4,r19
20088b50:	00897280 	call	20089728 <__clzsi2>
20088b54:	10fffe04 	addi	r3,r2,-8
20088b58:	010007c4 	movi	r4,31
20088b5c:	20c07d16 	blt	r4,r3,20088d54 <__subdf3+0x3a0>
20088b60:	01400a04 	movi	r5,40
20088b64:	2885c83a 	sub	r2,r5,r2
20088b68:	888ad83a 	srl	r5,r17,r2
20088b6c:	98e6983a 	sll	r19,r19,r3
20088b70:	88e2983a 	sll	r17,r17,r3
20088b74:	2ce6b03a 	or	r19,r5,r19
20088b78:	1c007a16 	blt	r3,r16,20088d64 <__subdf3+0x3b0>
20088b7c:	1c21c83a 	sub	r16,r3,r16
20088b80:	81400044 	addi	r5,r16,1
20088b84:	00c007c4 	movi	r3,31
20088b88:	19409616 	blt	r3,r5,20088de4 <__subdf3+0x430>
20088b8c:	1c21c83a 	sub	r16,r3,r16
20088b90:	8c08983a 	sll	r4,r17,r16
20088b94:	8946d83a 	srl	r3,r17,r5
20088b98:	9c20983a 	sll	r16,r19,r16
20088b9c:	2008c03a 	cmpne	r4,r4,zero
20088ba0:	994ad83a 	srl	r5,r19,r5
20088ba4:	1c06b03a 	or	r3,r3,r16
20088ba8:	1922b03a 	or	r17,r3,r4
20088bac:	0021883a 	mov	r16,zero
20088bb0:	003fa306 	br	20088a40 <__flash_rwdata_start+0xfffec3f8>
20088bb4:	2880202c 	andhi	r2,r5,128
20088bb8:	9200004c 	andi	r8,r18,1
20088bbc:	103fac1e 	bne	r2,zero,20088a70 <__flash_rwdata_start+0xfffec428>
20088bc0:	2804977a 	slli	r2,r5,29
20088bc4:	8822d0fa 	srli	r17,r17,3
20088bc8:	00c1ffc4 	movi	r3,2047
20088bcc:	280ad0fa 	srli	r5,r5,3
20088bd0:	1444b03a 	or	r2,r2,r17
20088bd4:	80c02726 	beq	r16,r3,20088c74 <__subdf3+0x2c0>
20088bd8:	01000434 	movhi	r4,16
20088bdc:	213fffc4 	addi	r4,r4,-1
20088be0:	80e0703a 	and	r16,r16,r3
20088be4:	2908703a 	and	r4,r5,r4
20088be8:	003fad06 	br	20088aa0 <__flash_rwdata_start+0xfffec458>
20088bec:	0080690e 	bge	zero,r2,20088d94 <__subdf3+0x3e0>
20088bf0:	50002f26 	beq	r10,zero,20088cb0 <__subdf3+0x2fc>
20088bf4:	0101ffc4 	movi	r4,2047
20088bf8:	813f9126 	beq	r16,r4,20088a40 <__flash_rwdata_start+0xfffec3f8>
20088bfc:	18c02034 	orhi	r3,r3,128
20088c00:	01000e04 	movi	r4,56
20088c04:	2080b00e 	bge	r4,r2,20088ec8 <__subdf3+0x514>
20088c08:	198cb03a 	or	r6,r3,r6
20088c0c:	300ec03a 	cmpne	r7,r6,zero
20088c10:	0005883a 	mov	r2,zero
20088c14:	3c4f883a 	add	r7,r7,r17
20088c18:	3c63803a 	cmpltu	r17,r7,r17
20088c1c:	114b883a 	add	r5,r2,r5
20088c20:	2c4b883a 	add	r5,r5,r17
20088c24:	3823883a 	mov	r17,r7
20088c28:	2880202c 	andhi	r2,r5,128
20088c2c:	10002e26 	beq	r2,zero,20088ce8 <__subdf3+0x334>
20088c30:	84000044 	addi	r16,r16,1
20088c34:	0081ffc4 	movi	r2,2047
20088c38:	8080de26 	beq	r16,r2,20088fb4 <__subdf3+0x600>
20088c3c:	00bfe034 	movhi	r2,65408
20088c40:	10bfffc4 	addi	r2,r2,-1
20088c44:	288a703a 	and	r5,r5,r2
20088c48:	880cd07a 	srli	r6,r17,1
20088c4c:	280897fa 	slli	r4,r5,31
20088c50:	88c0004c 	andi	r3,r17,1
20088c54:	30e2b03a 	or	r17,r6,r3
20088c58:	280ad07a 	srli	r5,r5,1
20088c5c:	8922b03a 	or	r17,r17,r4
20088c60:	003f7706 	br	20088a40 <__flash_rwdata_start+0xfffec3f8>
20088c64:	1984b03a 	or	r2,r3,r6
20088c68:	103f6e26 	beq	r2,zero,20088a24 <__flash_rwdata_start+0xfffec3dc>
20088c6c:	39c03fcc 	andi	r7,r7,255
20088c70:	003f6d06 	br	20088a28 <__flash_rwdata_start+0xfffec3e0>
20088c74:	1146b03a 	or	r3,r2,r5
20088c78:	18003f26 	beq	r3,zero,20088d78 <__subdf3+0x3c4>
20088c7c:	00c00434 	movhi	r3,16
20088c80:	29000234 	orhi	r4,r5,8
20088c84:	18ffffc4 	addi	r3,r3,-1
20088c88:	20c8703a 	and	r4,r4,r3
20088c8c:	003f8406 	br	20088aa0 <__flash_rwdata_start+0xfffec458>
20088c90:	10bfffc4 	addi	r2,r2,-1
20088c94:	1000501e 	bne	r2,zero,20088dd8 <__subdf3+0x424>
20088c98:	898fc83a 	sub	r7,r17,r6
20088c9c:	89e3803a 	cmpltu	r17,r17,r7
20088ca0:	28cbc83a 	sub	r5,r5,r3
20088ca4:	2c4bc83a 	sub	r5,r5,r17
20088ca8:	3823883a 	mov	r17,r7
20088cac:	003fa106 	br	20088b34 <__flash_rwdata_start+0xfffec4ec>
20088cb0:	1988b03a 	or	r4,r3,r6
20088cb4:	203f6226 	beq	r4,zero,20088a40 <__flash_rwdata_start+0xfffec3f8>
20088cb8:	10bfffc4 	addi	r2,r2,-1
20088cbc:	10009b1e 	bne	r2,zero,20088f2c <__subdf3+0x578>
20088cc0:	344d883a 	add	r6,r6,r17
20088cc4:	3463803a 	cmpltu	r17,r6,r17
20088cc8:	194b883a 	add	r5,r3,r5
20088ccc:	2c4b883a 	add	r5,r5,r17
20088cd0:	3023883a 	mov	r17,r6
20088cd4:	003fd406 	br	20088c28 <__flash_rwdata_start+0xfffec5e0>
20088cd8:	1106b03a 	or	r3,r2,r4
20088cdc:	1800b426 	beq	r3,zero,20088fb0 <__subdf3+0x5fc>
20088ce0:	100b883a 	mov	r5,r2
20088ce4:	2023883a 	mov	r17,r4
20088ce8:	888001cc 	andi	r2,r17,7
20088cec:	103f561e 	bne	r2,zero,20088a48 <__flash_rwdata_start+0xfffec400>
20088cf0:	9200004c 	andi	r8,r18,1
20088cf4:	003fb206 	br	20088bc0 <__flash_rwdata_start+0xfffec578>
20088cf8:	1000531e 	bne	r2,zero,20088e48 <__subdf3+0x494>
20088cfc:	80800044 	addi	r2,r16,1
20088d00:	1081ffcc 	andi	r2,r2,2047
20088d04:	01000044 	movi	r4,1
20088d08:	2080a00e 	bge	r4,r2,20088f8c <__subdf3+0x5d8>
20088d0c:	8985c83a 	sub	r2,r17,r6
20088d10:	8889803a 	cmpltu	r4,r17,r2
20088d14:	28e7c83a 	sub	r19,r5,r3
20088d18:	9927c83a 	sub	r19,r19,r4
20088d1c:	9900202c 	andhi	r4,r19,128
20088d20:	20006226 	beq	r4,zero,20088eac <__subdf3+0x4f8>
20088d24:	3463c83a 	sub	r17,r6,r17
20088d28:	194bc83a 	sub	r5,r3,r5
20088d2c:	344d803a 	cmpltu	r6,r6,r17
20088d30:	29a7c83a 	sub	r19,r5,r6
20088d34:	3825883a 	mov	r18,r7
20088d38:	983f841e 	bne	r19,zero,20088b4c <__flash_rwdata_start+0xfffec504>
20088d3c:	8809883a 	mov	r4,r17
20088d40:	00897280 	call	20089728 <__clzsi2>
20088d44:	10800804 	addi	r2,r2,32
20088d48:	10fffe04 	addi	r3,r2,-8
20088d4c:	010007c4 	movi	r4,31
20088d50:	20ff830e 	bge	r4,r3,20088b60 <__flash_rwdata_start+0xfffec518>
20088d54:	14fff604 	addi	r19,r2,-40
20088d58:	8ce6983a 	sll	r19,r17,r19
20088d5c:	0023883a 	mov	r17,zero
20088d60:	1c3f860e 	bge	r3,r16,20088b7c <__flash_rwdata_start+0xfffec534>
20088d64:	017fe034 	movhi	r5,65408
20088d68:	297fffc4 	addi	r5,r5,-1
20088d6c:	80e1c83a 	sub	r16,r16,r3
20088d70:	994a703a 	and	r5,r19,r5
20088d74:	003f3206 	br	20088a40 <__flash_rwdata_start+0xfffec3f8>
20088d78:	0009883a 	mov	r4,zero
20088d7c:	0005883a 	mov	r2,zero
20088d80:	003f4706 	br	20088aa0 <__flash_rwdata_start+0xfffec458>
20088d84:	198cb03a 	or	r6,r3,r6
20088d88:	300cc03a 	cmpne	r6,r6,zero
20088d8c:	0005883a 	mov	r2,zero
20088d90:	003f6306 	br	20088b20 <__flash_rwdata_start+0xfffec4d8>
20088d94:	10009d1e 	bne	r2,zero,2008900c <__subdf3+0x658>
20088d98:	81c00044 	addi	r7,r16,1
20088d9c:	3881ffcc 	andi	r2,r7,2047
20088da0:	02400044 	movi	r9,1
20088da4:	4880680e 	bge	r9,r2,20088f48 <__subdf3+0x594>
20088da8:	0081ffc4 	movi	r2,2047
20088dac:	3880ae26 	beq	r7,r2,20089068 <__subdf3+0x6b4>
20088db0:	344d883a 	add	r6,r6,r17
20088db4:	3463803a 	cmpltu	r17,r6,r17
20088db8:	194b883a 	add	r5,r3,r5
20088dbc:	2c4b883a 	add	r5,r5,r17
20088dc0:	282297fa 	slli	r17,r5,31
20088dc4:	300cd07a 	srli	r6,r6,1
20088dc8:	280ad07a 	srli	r5,r5,1
20088dcc:	3821883a 	mov	r16,r7
20088dd0:	89a2b03a 	or	r17,r17,r6
20088dd4:	003f1a06 	br	20088a40 <__flash_rwdata_start+0xfffec3f8>
20088dd8:	0101ffc4 	movi	r4,2047
20088ddc:	813f431e 	bne	r16,r4,20088aec <__flash_rwdata_start+0xfffec4a4>
20088de0:	003f1706 	br	20088a40 <__flash_rwdata_start+0xfffec3f8>
20088de4:	80bff844 	addi	r2,r16,-31
20088de8:	00c00804 	movi	r3,32
20088dec:	9884d83a 	srl	r2,r19,r2
20088df0:	28c05126 	beq	r5,r3,20088f38 <__subdf3+0x584>
20088df4:	00c00fc4 	movi	r3,63
20088df8:	1c21c83a 	sub	r16,r3,r16
20088dfc:	9c26983a 	sll	r19,r19,r16
20088e00:	9c62b03a 	or	r17,r19,r17
20088e04:	8822c03a 	cmpne	r17,r17,zero
20088e08:	88a2b03a 	or	r17,r17,r2
20088e0c:	000b883a 	mov	r5,zero
20088e10:	0021883a 	mov	r16,zero
20088e14:	003fb406 	br	20088ce8 <__flash_rwdata_start+0xfffec6a0>
20088e18:	113ff804 	addi	r4,r2,-32
20088e1c:	01c00804 	movi	r7,32
20088e20:	1908d83a 	srl	r4,r3,r4
20088e24:	11c04626 	beq	r2,r7,20088f40 <__subdf3+0x58c>
20088e28:	01c01004 	movi	r7,64
20088e2c:	3885c83a 	sub	r2,r7,r2
20088e30:	1884983a 	sll	r2,r3,r2
20088e34:	118cb03a 	or	r6,r2,r6
20088e38:	300cc03a 	cmpne	r6,r6,zero
20088e3c:	310cb03a 	or	r6,r6,r4
20088e40:	0005883a 	mov	r2,zero
20088e44:	003f3606 	br	20088b20 <__flash_rwdata_start+0xfffec4d8>
20088e48:	80002b26 	beq	r16,zero,20088ef8 <__subdf3+0x544>
20088e4c:	0101ffc4 	movi	r4,2047
20088e50:	51006926 	beq	r10,r4,20088ff8 <__subdf3+0x644>
20088e54:	0085c83a 	sub	r2,zero,r2
20088e58:	29402034 	orhi	r5,r5,128
20088e5c:	01000e04 	movi	r4,56
20088e60:	20807d16 	blt	r4,r2,20089058 <__subdf3+0x6a4>
20088e64:	010007c4 	movi	r4,31
20088e68:	2080d916 	blt	r4,r2,200891d0 <__subdf3+0x81c>
20088e6c:	01000804 	movi	r4,32
20088e70:	2089c83a 	sub	r4,r4,r2
20088e74:	2912983a 	sll	r9,r5,r4
20088e78:	8890d83a 	srl	r8,r17,r2
20088e7c:	8908983a 	sll	r4,r17,r4
20088e80:	2884d83a 	srl	r2,r5,r2
20088e84:	4a22b03a 	or	r17,r9,r8
20088e88:	2008c03a 	cmpne	r4,r4,zero
20088e8c:	8922b03a 	or	r17,r17,r4
20088e90:	3463c83a 	sub	r17,r6,r17
20088e94:	1885c83a 	sub	r2,r3,r2
20088e98:	344d803a 	cmpltu	r6,r6,r17
20088e9c:	118bc83a 	sub	r5,r2,r6
20088ea0:	5021883a 	mov	r16,r10
20088ea4:	3825883a 	mov	r18,r7
20088ea8:	003f2206 	br	20088b34 <__flash_rwdata_start+0xfffec4ec>
20088eac:	9886b03a 	or	r3,r19,r2
20088eb0:	18001c1e 	bne	r3,zero,20088f24 <__subdf3+0x570>
20088eb4:	0011883a 	mov	r8,zero
20088eb8:	000b883a 	mov	r5,zero
20088ebc:	0023883a 	mov	r17,zero
20088ec0:	0021883a 	mov	r16,zero
20088ec4:	003f3e06 	br	20088bc0 <__flash_rwdata_start+0xfffec578>
20088ec8:	010007c4 	movi	r4,31
20088ecc:	20803c16 	blt	r4,r2,20088fc0 <__subdf3+0x60c>
20088ed0:	01000804 	movi	r4,32
20088ed4:	2089c83a 	sub	r4,r4,r2
20088ed8:	1912983a 	sll	r9,r3,r4
20088edc:	308ed83a 	srl	r7,r6,r2
20088ee0:	3108983a 	sll	r4,r6,r4
20088ee4:	1884d83a 	srl	r2,r3,r2
20088ee8:	49ceb03a 	or	r7,r9,r7
20088eec:	2008c03a 	cmpne	r4,r4,zero
20088ef0:	390eb03a 	or	r7,r7,r4
20088ef4:	003f4706 	br	20088c14 <__flash_rwdata_start+0xfffec5cc>
20088ef8:	2c48b03a 	or	r4,r5,r17
20088efc:	20003e26 	beq	r4,zero,20088ff8 <__subdf3+0x644>
20088f00:	0084303a 	nor	r2,zero,r2
20088f04:	10003a1e 	bne	r2,zero,20088ff0 <__subdf3+0x63c>
20088f08:	3463c83a 	sub	r17,r6,r17
20088f0c:	194bc83a 	sub	r5,r3,r5
20088f10:	344d803a 	cmpltu	r6,r6,r17
20088f14:	298bc83a 	sub	r5,r5,r6
20088f18:	5021883a 	mov	r16,r10
20088f1c:	3825883a 	mov	r18,r7
20088f20:	003f0406 	br	20088b34 <__flash_rwdata_start+0xfffec4ec>
20088f24:	1023883a 	mov	r17,r2
20088f28:	003f0706 	br	20088b48 <__flash_rwdata_start+0xfffec500>
20088f2c:	0101ffc4 	movi	r4,2047
20088f30:	813f331e 	bne	r16,r4,20088c00 <__flash_rwdata_start+0xfffec5b8>
20088f34:	003ec206 	br	20088a40 <__flash_rwdata_start+0xfffec3f8>
20088f38:	0027883a 	mov	r19,zero
20088f3c:	003fb006 	br	20088e00 <__flash_rwdata_start+0xfffec7b8>
20088f40:	0005883a 	mov	r2,zero
20088f44:	003fbb06 	br	20088e34 <__flash_rwdata_start+0xfffec7ec>
20088f48:	2c44b03a 	or	r2,r5,r17
20088f4c:	80008b1e 	bne	r16,zero,2008917c <__subdf3+0x7c8>
20088f50:	1000b526 	beq	r2,zero,20089228 <__subdf3+0x874>
20088f54:	1984b03a 	or	r2,r3,r6
20088f58:	103eb926 	beq	r2,zero,20088a40 <__flash_rwdata_start+0xfffec3f8>
20088f5c:	3449883a 	add	r4,r6,r17
20088f60:	2463803a 	cmpltu	r17,r4,r17
20088f64:	194b883a 	add	r5,r3,r5
20088f68:	2c4b883a 	add	r5,r5,r17
20088f6c:	2880202c 	andhi	r2,r5,128
20088f70:	2023883a 	mov	r17,r4
20088f74:	103f5c26 	beq	r2,zero,20088ce8 <__flash_rwdata_start+0xfffec6a0>
20088f78:	00bfe034 	movhi	r2,65408
20088f7c:	10bfffc4 	addi	r2,r2,-1
20088f80:	4821883a 	mov	r16,r9
20088f84:	288a703a 	and	r5,r5,r2
20088f88:	003ead06 	br	20088a40 <__flash_rwdata_start+0xfffec3f8>
20088f8c:	2c44b03a 	or	r2,r5,r17
20088f90:	8000291e 	bne	r16,zero,20089038 <__subdf3+0x684>
20088f94:	10004f1e 	bne	r2,zero,200890d4 <__subdf3+0x720>
20088f98:	1984b03a 	or	r2,r3,r6
20088f9c:	10000426 	beq	r2,zero,20088fb0 <__subdf3+0x5fc>
20088fa0:	180b883a 	mov	r5,r3
20088fa4:	3023883a 	mov	r17,r6
20088fa8:	3825883a 	mov	r18,r7
20088fac:	003ea406 	br	20088a40 <__flash_rwdata_start+0xfffec3f8>
20088fb0:	0011883a 	mov	r8,zero
20088fb4:	000b883a 	mov	r5,zero
20088fb8:	0023883a 	mov	r17,zero
20088fbc:	003f0006 	br	20088bc0 <__flash_rwdata_start+0xfffec578>
20088fc0:	11fff804 	addi	r7,r2,-32
20088fc4:	19c8d83a 	srl	r4,r3,r7
20088fc8:	01c00804 	movi	r7,32
20088fcc:	11c07e26 	beq	r2,r7,200891c8 <__subdf3+0x814>
20088fd0:	01c01004 	movi	r7,64
20088fd4:	3885c83a 	sub	r2,r7,r2
20088fd8:	1884983a 	sll	r2,r3,r2
20088fdc:	118cb03a 	or	r6,r2,r6
20088fe0:	300ec03a 	cmpne	r7,r6,zero
20088fe4:	390eb03a 	or	r7,r7,r4
20088fe8:	0005883a 	mov	r2,zero
20088fec:	003f0906 	br	20088c14 <__flash_rwdata_start+0xfffec5cc>
20088ff0:	0101ffc4 	movi	r4,2047
20088ff4:	513f991e 	bne	r10,r4,20088e5c <__flash_rwdata_start+0xfffec814>
20088ff8:	180b883a 	mov	r5,r3
20088ffc:	3023883a 	mov	r17,r6
20089000:	5021883a 	mov	r16,r10
20089004:	3825883a 	mov	r18,r7
20089008:	003e8d06 	br	20088a40 <__flash_rwdata_start+0xfffec3f8>
2008900c:	80001a1e 	bne	r16,zero,20089078 <__subdf3+0x6c4>
20089010:	2c48b03a 	or	r4,r5,r17
20089014:	20005526 	beq	r4,zero,2008916c <__subdf3+0x7b8>
20089018:	0084303a 	nor	r2,zero,r2
2008901c:	1000511e 	bne	r2,zero,20089164 <__subdf3+0x7b0>
20089020:	89a3883a 	add	r17,r17,r6
20089024:	194b883a 	add	r5,r3,r5
20089028:	898d803a 	cmpltu	r6,r17,r6
2008902c:	298b883a 	add	r5,r5,r6
20089030:	5021883a 	mov	r16,r10
20089034:	003efc06 	br	20088c28 <__flash_rwdata_start+0xfffec5e0>
20089038:	1000341e 	bne	r2,zero,2008910c <__subdf3+0x758>
2008903c:	1984b03a 	or	r2,r3,r6
20089040:	10006f26 	beq	r2,zero,20089200 <__subdf3+0x84c>
20089044:	180b883a 	mov	r5,r3
20089048:	3023883a 	mov	r17,r6
2008904c:	3825883a 	mov	r18,r7
20089050:	0401ffc4 	movi	r16,2047
20089054:	003e7a06 	br	20088a40 <__flash_rwdata_start+0xfffec3f8>
20089058:	2c62b03a 	or	r17,r5,r17
2008905c:	8822c03a 	cmpne	r17,r17,zero
20089060:	0005883a 	mov	r2,zero
20089064:	003f8a06 	br	20088e90 <__flash_rwdata_start+0xfffec848>
20089068:	3821883a 	mov	r16,r7
2008906c:	000b883a 	mov	r5,zero
20089070:	0023883a 	mov	r17,zero
20089074:	003ed206 	br	20088bc0 <__flash_rwdata_start+0xfffec578>
20089078:	0101ffc4 	movi	r4,2047
2008907c:	51003b26 	beq	r10,r4,2008916c <__subdf3+0x7b8>
20089080:	0085c83a 	sub	r2,zero,r2
20089084:	29402034 	orhi	r5,r5,128
20089088:	01000e04 	movi	r4,56
2008908c:	20806216 	blt	r4,r2,20089218 <__subdf3+0x864>
20089090:	010007c4 	movi	r4,31
20089094:	20806b16 	blt	r4,r2,20089244 <__subdf3+0x890>
20089098:	01000804 	movi	r4,32
2008909c:	2089c83a 	sub	r4,r4,r2
200890a0:	2912983a 	sll	r9,r5,r4
200890a4:	888ed83a 	srl	r7,r17,r2
200890a8:	8908983a 	sll	r4,r17,r4
200890ac:	2884d83a 	srl	r2,r5,r2
200890b0:	49e2b03a 	or	r17,r9,r7
200890b4:	2008c03a 	cmpne	r4,r4,zero
200890b8:	8922b03a 	or	r17,r17,r4
200890bc:	89a3883a 	add	r17,r17,r6
200890c0:	10c5883a 	add	r2,r2,r3
200890c4:	898d803a 	cmpltu	r6,r17,r6
200890c8:	118b883a 	add	r5,r2,r6
200890cc:	5021883a 	mov	r16,r10
200890d0:	003ed506 	br	20088c28 <__flash_rwdata_start+0xfffec5e0>
200890d4:	1984b03a 	or	r2,r3,r6
200890d8:	103e5926 	beq	r2,zero,20088a40 <__flash_rwdata_start+0xfffec3f8>
200890dc:	8989c83a 	sub	r4,r17,r6
200890e0:	8911803a 	cmpltu	r8,r17,r4
200890e4:	28c5c83a 	sub	r2,r5,r3
200890e8:	1205c83a 	sub	r2,r2,r8
200890ec:	1200202c 	andhi	r8,r2,128
200890f0:	403ef926 	beq	r8,zero,20088cd8 <__flash_rwdata_start+0xfffec690>
200890f4:	3463c83a 	sub	r17,r6,r17
200890f8:	194bc83a 	sub	r5,r3,r5
200890fc:	344d803a 	cmpltu	r6,r6,r17
20089100:	298bc83a 	sub	r5,r5,r6
20089104:	3825883a 	mov	r18,r7
20089108:	003e4d06 	br	20088a40 <__flash_rwdata_start+0xfffec3f8>
2008910c:	1984b03a 	or	r2,r3,r6
20089110:	10002b26 	beq	r2,zero,200891c0 <__subdf3+0x80c>
20089114:	2808d0fa 	srli	r4,r5,3
20089118:	8822d0fa 	srli	r17,r17,3
2008911c:	280a977a 	slli	r5,r5,29
20089120:	2080022c 	andhi	r2,r4,8
20089124:	2c62b03a 	or	r17,r5,r17
20089128:	10000826 	beq	r2,zero,2008914c <__subdf3+0x798>
2008912c:	1810d0fa 	srli	r8,r3,3
20089130:	4080022c 	andhi	r2,r8,8
20089134:	1000051e 	bne	r2,zero,2008914c <__subdf3+0x798>
20089138:	300cd0fa 	srli	r6,r6,3
2008913c:	1804977a 	slli	r2,r3,29
20089140:	4009883a 	mov	r4,r8
20089144:	3825883a 	mov	r18,r7
20089148:	11a2b03a 	or	r17,r2,r6
2008914c:	880ad77a 	srli	r5,r17,29
20089150:	200890fa 	slli	r4,r4,3
20089154:	882290fa 	slli	r17,r17,3
20089158:	0401ffc4 	movi	r16,2047
2008915c:	290ab03a 	or	r5,r5,r4
20089160:	003e3706 	br	20088a40 <__flash_rwdata_start+0xfffec3f8>
20089164:	0101ffc4 	movi	r4,2047
20089168:	513fc71e 	bne	r10,r4,20089088 <__flash_rwdata_start+0xfffeca40>
2008916c:	180b883a 	mov	r5,r3
20089170:	3023883a 	mov	r17,r6
20089174:	5021883a 	mov	r16,r10
20089178:	003e3106 	br	20088a40 <__flash_rwdata_start+0xfffec3f8>
2008917c:	10002d26 	beq	r2,zero,20089234 <__subdf3+0x880>
20089180:	1984b03a 	or	r2,r3,r6
20089184:	10000e26 	beq	r2,zero,200891c0 <__subdf3+0x80c>
20089188:	2808d0fa 	srli	r4,r5,3
2008918c:	8822d0fa 	srli	r17,r17,3
20089190:	280a977a 	slli	r5,r5,29
20089194:	2080022c 	andhi	r2,r4,8
20089198:	2c62b03a 	or	r17,r5,r17
2008919c:	103feb26 	beq	r2,zero,2008914c <__flash_rwdata_start+0xfffecb04>
200891a0:	180ed0fa 	srli	r7,r3,3
200891a4:	3880022c 	andhi	r2,r7,8
200891a8:	103fe81e 	bne	r2,zero,2008914c <__flash_rwdata_start+0xfffecb04>
200891ac:	300cd0fa 	srli	r6,r6,3
200891b0:	1804977a 	slli	r2,r3,29
200891b4:	3809883a 	mov	r4,r7
200891b8:	11a2b03a 	or	r17,r2,r6
200891bc:	003fe306 	br	2008914c <__flash_rwdata_start+0xfffecb04>
200891c0:	0401ffc4 	movi	r16,2047
200891c4:	003e1e06 	br	20088a40 <__flash_rwdata_start+0xfffec3f8>
200891c8:	0005883a 	mov	r2,zero
200891cc:	003f8306 	br	20088fdc <__flash_rwdata_start+0xfffec994>
200891d0:	113ff804 	addi	r4,r2,-32
200891d4:	02000804 	movi	r8,32
200891d8:	2908d83a 	srl	r4,r5,r4
200891dc:	12002526 	beq	r2,r8,20089274 <__subdf3+0x8c0>
200891e0:	02001004 	movi	r8,64
200891e4:	4085c83a 	sub	r2,r8,r2
200891e8:	288a983a 	sll	r5,r5,r2
200891ec:	2c62b03a 	or	r17,r5,r17
200891f0:	8822c03a 	cmpne	r17,r17,zero
200891f4:	8922b03a 	or	r17,r17,r4
200891f8:	0005883a 	mov	r2,zero
200891fc:	003f2406 	br	20088e90 <__flash_rwdata_start+0xfffec848>
20089200:	01402034 	movhi	r5,128
20089204:	0011883a 	mov	r8,zero
20089208:	297fffc4 	addi	r5,r5,-1
2008920c:	047ffe04 	movi	r17,-8
20089210:	0401ffc4 	movi	r16,2047
20089214:	003e6a06 	br	20088bc0 <__flash_rwdata_start+0xfffec578>
20089218:	2c62b03a 	or	r17,r5,r17
2008921c:	8822c03a 	cmpne	r17,r17,zero
20089220:	0005883a 	mov	r2,zero
20089224:	003fa506 	br	200890bc <__flash_rwdata_start+0xfffeca74>
20089228:	180b883a 	mov	r5,r3
2008922c:	3023883a 	mov	r17,r6
20089230:	003e0306 	br	20088a40 <__flash_rwdata_start+0xfffec3f8>
20089234:	180b883a 	mov	r5,r3
20089238:	3023883a 	mov	r17,r6
2008923c:	0401ffc4 	movi	r16,2047
20089240:	003dff06 	br	20088a40 <__flash_rwdata_start+0xfffec3f8>
20089244:	113ff804 	addi	r4,r2,-32
20089248:	01c00804 	movi	r7,32
2008924c:	2908d83a 	srl	r4,r5,r4
20089250:	11c00a26 	beq	r2,r7,2008927c <__subdf3+0x8c8>
20089254:	01c01004 	movi	r7,64
20089258:	3885c83a 	sub	r2,r7,r2
2008925c:	288a983a 	sll	r5,r5,r2
20089260:	2c62b03a 	or	r17,r5,r17
20089264:	8822c03a 	cmpne	r17,r17,zero
20089268:	8922b03a 	or	r17,r17,r4
2008926c:	0005883a 	mov	r2,zero
20089270:	003f9206 	br	200890bc <__flash_rwdata_start+0xfffeca74>
20089274:	000b883a 	mov	r5,zero
20089278:	003fdc06 	br	200891ec <__flash_rwdata_start+0xfffecba4>
2008927c:	000b883a 	mov	r5,zero
20089280:	003ff706 	br	20089260 <__flash_rwdata_start+0xfffecc18>

20089284 <__fixdfsi>:
20089284:	2806d53a 	srli	r3,r5,20
20089288:	00800434 	movhi	r2,16
2008928c:	10bfffc4 	addi	r2,r2,-1
20089290:	18c1ffcc 	andi	r3,r3,2047
20089294:	0180ff84 	movi	r6,1022
20089298:	2884703a 	and	r2,r5,r2
2008929c:	280ad7fa 	srli	r5,r5,31
200892a0:	30c0130e 	bge	r6,r3,200892f0 <__fixdfsi+0x6c>
200892a4:	01810744 	movi	r6,1053
200892a8:	30c00d16 	blt	r6,r3,200892e0 <__fixdfsi+0x5c>
200892ac:	01810cc4 	movi	r6,1075
200892b0:	30cdc83a 	sub	r6,r6,r3
200892b4:	01c007c4 	movi	r7,31
200892b8:	10800434 	orhi	r2,r2,16
200892bc:	39800e0e 	bge	r7,r6,200892f8 <__fixdfsi+0x74>
200892c0:	010104c4 	movi	r4,1043
200892c4:	20c7c83a 	sub	r3,r4,r3
200892c8:	10c6d83a 	srl	r3,r2,r3
200892cc:	29403fcc 	andi	r5,r5,255
200892d0:	0145c83a 	sub	r2,zero,r5
200892d4:	1884f03a 	xor	r2,r3,r2
200892d8:	1145883a 	add	r2,r2,r5
200892dc:	f800283a 	ret
200892e0:	00a00034 	movhi	r2,32768
200892e4:	10bfffc4 	addi	r2,r2,-1
200892e8:	2885883a 	add	r2,r5,r2
200892ec:	f800283a 	ret
200892f0:	0005883a 	mov	r2,zero
200892f4:	f800283a 	ret
200892f8:	18fefb44 	addi	r3,r3,-1043
200892fc:	2188d83a 	srl	r4,r4,r6
20089300:	10c6983a 	sll	r3,r2,r3
20089304:	20c6b03a 	or	r3,r4,r3
20089308:	003ff006 	br	200892cc <__flash_rwdata_start+0xfffecc84>

2008930c <__floatsidf>:
2008930c:	defffd04 	addi	sp,sp,-12
20089310:	dc400115 	stw	r17,4(sp)
20089314:	dfc00215 	stw	ra,8(sp)
20089318:	dc000015 	stw	r16,0(sp)
2008931c:	2023883a 	mov	r17,r4
20089320:	20001426 	beq	r4,zero,20089374 <__floatsidf+0x68>
20089324:	2020d7fa 	srli	r16,r4,31
20089328:	80000126 	beq	r16,zero,20089330 <__floatsidf+0x24>
2008932c:	0123c83a 	sub	r17,zero,r4
20089330:	8809883a 	mov	r4,r17
20089334:	00897280 	call	20089728 <__clzsi2>
20089338:	01410784 	movi	r5,1054
2008933c:	00c00284 	movi	r3,10
20089340:	288bc83a 	sub	r5,r5,r2
20089344:	18801c16 	blt	r3,r2,200893b8 <__floatsidf+0xac>
20089348:	00c002c4 	movi	r3,11
2008934c:	1887c83a 	sub	r3,r3,r2
20089350:	88c8d83a 	srl	r4,r17,r3
20089354:	00c00434 	movhi	r3,16
20089358:	18ffffc4 	addi	r3,r3,-1
2008935c:	10800544 	addi	r2,r2,21
20089360:	20c8703a 	and	r4,r4,r3
20089364:	8884983a 	sll	r2,r17,r2
20089368:	28c1ffcc 	andi	r3,r5,2047
2008936c:	800d883a 	mov	r6,r16
20089370:	00000406 	br	20089384 <__floatsidf+0x78>
20089374:	000d883a 	mov	r6,zero
20089378:	0007883a 	mov	r3,zero
2008937c:	0009883a 	mov	r4,zero
20089380:	0005883a 	mov	r2,zero
20089384:	180a953a 	slli	r5,r3,20
20089388:	31803fcc 	andi	r6,r6,255
2008938c:	00c00434 	movhi	r3,16
20089390:	300c97fa 	slli	r6,r6,31
20089394:	18ffffc4 	addi	r3,r3,-1
20089398:	20c6703a 	and	r3,r4,r3
2008939c:	1946b03a 	or	r3,r3,r5
200893a0:	1986b03a 	or	r3,r3,r6
200893a4:	dfc00217 	ldw	ra,8(sp)
200893a8:	dc400117 	ldw	r17,4(sp)
200893ac:	dc000017 	ldw	r16,0(sp)
200893b0:	dec00304 	addi	sp,sp,12
200893b4:	f800283a 	ret
200893b8:	10fffd44 	addi	r3,r2,-11
200893bc:	88c8983a 	sll	r4,r17,r3
200893c0:	00800434 	movhi	r2,16
200893c4:	10bfffc4 	addi	r2,r2,-1
200893c8:	2088703a 	and	r4,r4,r2
200893cc:	28c1ffcc 	andi	r3,r5,2047
200893d0:	800d883a 	mov	r6,r16
200893d4:	0005883a 	mov	r2,zero
200893d8:	003fea06 	br	20089384 <__flash_rwdata_start+0xfffecd3c>

200893dc <__floatunsidf>:
200893dc:	defffe04 	addi	sp,sp,-8
200893e0:	dc000015 	stw	r16,0(sp)
200893e4:	dfc00115 	stw	ra,4(sp)
200893e8:	2021883a 	mov	r16,r4
200893ec:	20001026 	beq	r4,zero,20089430 <__floatunsidf+0x54>
200893f0:	00897280 	call	20089728 <__clzsi2>
200893f4:	01410784 	movi	r5,1054
200893f8:	100d883a 	mov	r6,r2
200893fc:	288bc83a 	sub	r5,r5,r2
20089400:	00800284 	movi	r2,10
20089404:	11801616 	blt	r2,r6,20089460 <__floatunsidf+0x84>
20089408:	008002c4 	movi	r2,11
2008940c:	1185c83a 	sub	r2,r2,r6
20089410:	8084d83a 	srl	r2,r16,r2
20089414:	00c00434 	movhi	r3,16
20089418:	31c00544 	addi	r7,r6,21
2008941c:	18ffffc4 	addi	r3,r3,-1
20089420:	81e0983a 	sll	r16,r16,r7
20089424:	10cc703a 	and	r6,r2,r3
20089428:	2941ffcc 	andi	r5,r5,2047
2008942c:	00000206 	br	20089438 <__floatunsidf+0x5c>
20089430:	000b883a 	mov	r5,zero
20089434:	000d883a 	mov	r6,zero
20089438:	280a953a 	slli	r5,r5,20
2008943c:	00c00434 	movhi	r3,16
20089440:	18ffffc4 	addi	r3,r3,-1
20089444:	30c6703a 	and	r3,r6,r3
20089448:	8005883a 	mov	r2,r16
2008944c:	1946b03a 	or	r3,r3,r5
20089450:	dfc00117 	ldw	ra,4(sp)
20089454:	dc000017 	ldw	r16,0(sp)
20089458:	dec00204 	addi	sp,sp,8
2008945c:	f800283a 	ret
20089460:	31bffd44 	addi	r6,r6,-11
20089464:	818c983a 	sll	r6,r16,r6
20089468:	00800434 	movhi	r2,16
2008946c:	10bfffc4 	addi	r2,r2,-1
20089470:	2941ffcc 	andi	r5,r5,2047
20089474:	0021883a 	mov	r16,zero
20089478:	308c703a 	and	r6,r6,r2
2008947c:	003fee06 	br	20089438 <__flash_rwdata_start+0xfffecdf0>

20089480 <__extendsfdf2>:
20089480:	200ad5fa 	srli	r5,r4,23
20089484:	defffd04 	addi	sp,sp,-12
20089488:	dc400115 	stw	r17,4(sp)
2008948c:	29403fcc 	andi	r5,r5,255
20089490:	29800044 	addi	r6,r5,1
20089494:	04402034 	movhi	r17,128
20089498:	dc000015 	stw	r16,0(sp)
2008949c:	8c7fffc4 	addi	r17,r17,-1
200894a0:	dfc00215 	stw	ra,8(sp)
200894a4:	31803fcc 	andi	r6,r6,255
200894a8:	00800044 	movi	r2,1
200894ac:	8922703a 	and	r17,r17,r4
200894b0:	2020d7fa 	srli	r16,r4,31
200894b4:	1180110e 	bge	r2,r6,200894fc <__extendsfdf2+0x7c>
200894b8:	880ed0fa 	srli	r7,r17,3
200894bc:	8822977a 	slli	r17,r17,29
200894c0:	2940e004 	addi	r5,r5,896
200894c4:	2941ffcc 	andi	r5,r5,2047
200894c8:	280c953a 	slli	r6,r5,20
200894cc:	01400434 	movhi	r5,16
200894d0:	800697fa 	slli	r3,r16,31
200894d4:	297fffc4 	addi	r5,r5,-1
200894d8:	394a703a 	and	r5,r7,r5
200894dc:	298ab03a 	or	r5,r5,r6
200894e0:	8805883a 	mov	r2,r17
200894e4:	28c6b03a 	or	r3,r5,r3
200894e8:	dfc00217 	ldw	ra,8(sp)
200894ec:	dc400117 	ldw	r17,4(sp)
200894f0:	dc000017 	ldw	r16,0(sp)
200894f4:	dec00304 	addi	sp,sp,12
200894f8:	f800283a 	ret
200894fc:	2800111e 	bne	r5,zero,20089544 <__extendsfdf2+0xc4>
20089500:	88001c26 	beq	r17,zero,20089574 <__extendsfdf2+0xf4>
20089504:	8809883a 	mov	r4,r17
20089508:	00897280 	call	20089728 <__clzsi2>
2008950c:	00c00284 	movi	r3,10
20089510:	18801b16 	blt	r3,r2,20089580 <__extendsfdf2+0x100>
20089514:	01c002c4 	movi	r7,11
20089518:	388fc83a 	sub	r7,r7,r2
2008951c:	10c00544 	addi	r3,r2,21
20089520:	89ced83a 	srl	r7,r17,r7
20089524:	88e2983a 	sll	r17,r17,r3
20089528:	0180e244 	movi	r6,905
2008952c:	308bc83a 	sub	r5,r6,r2
20089530:	01800434 	movhi	r6,16
20089534:	31bfffc4 	addi	r6,r6,-1
20089538:	398e703a 	and	r7,r7,r6
2008953c:	2941ffcc 	andi	r5,r5,2047
20089540:	003fe006 	br	200894c4 <__flash_rwdata_start+0xfffece7c>
20089544:	88000826 	beq	r17,zero,20089568 <__extendsfdf2+0xe8>
20089548:	880ed0fa 	srli	r7,r17,3
2008954c:	00800434 	movhi	r2,16
20089550:	10bfffc4 	addi	r2,r2,-1
20089554:	39c00234 	orhi	r7,r7,8
20089558:	8822977a 	slli	r17,r17,29
2008955c:	388e703a 	and	r7,r7,r2
20089560:	0141ffc4 	movi	r5,2047
20089564:	003fd706 	br	200894c4 <__flash_rwdata_start+0xfffece7c>
20089568:	0141ffc4 	movi	r5,2047
2008956c:	000f883a 	mov	r7,zero
20089570:	003fd406 	br	200894c4 <__flash_rwdata_start+0xfffece7c>
20089574:	000b883a 	mov	r5,zero
20089578:	000f883a 	mov	r7,zero
2008957c:	003fd106 	br	200894c4 <__flash_rwdata_start+0xfffece7c>
20089580:	11fffd44 	addi	r7,r2,-11
20089584:	89ce983a 	sll	r7,r17,r7
20089588:	0023883a 	mov	r17,zero
2008958c:	003fe606 	br	20089528 <__flash_rwdata_start+0xfffecee0>

20089590 <__truncdfsf2>:
20089590:	2810d53a 	srli	r8,r5,20
20089594:	01c00434 	movhi	r7,16
20089598:	39ffffc4 	addi	r7,r7,-1
2008959c:	29ce703a 	and	r7,r5,r7
200895a0:	380e90fa 	slli	r7,r7,3
200895a4:	4201ffcc 	andi	r8,r8,2047
200895a8:	200cd77a 	srli	r6,r4,29
200895ac:	42400044 	addi	r9,r8,1
200895b0:	4a41ffcc 	andi	r9,r9,2047
200895b4:	00800044 	movi	r2,1
200895b8:	398cb03a 	or	r6,r7,r6
200895bc:	280ad7fa 	srli	r5,r5,31
200895c0:	200e90fa 	slli	r7,r4,3
200895c4:	1240230e 	bge	r2,r9,20089654 <__truncdfsf2+0xc4>
200895c8:	40ff2004 	addi	r3,r8,-896
200895cc:	00803f84 	movi	r2,254
200895d0:	10c01516 	blt	r2,r3,20089628 <__truncdfsf2+0x98>
200895d4:	00c02d0e 	bge	zero,r3,2008968c <__truncdfsf2+0xfc>
200895d8:	200891ba 	slli	r4,r4,6
200895dc:	300c90fa 	slli	r6,r6,3
200895e0:	380ed77a 	srli	r7,r7,29
200895e4:	2008c03a 	cmpne	r4,r4,zero
200895e8:	310cb03a 	or	r6,r6,r4
200895ec:	31ccb03a 	or	r6,r6,r7
200895f0:	308001cc 	andi	r2,r6,7
200895f4:	10000426 	beq	r2,zero,20089608 <__truncdfsf2+0x78>
200895f8:	310003cc 	andi	r4,r6,15
200895fc:	00800104 	movi	r2,4
20089600:	20800126 	beq	r4,r2,20089608 <__truncdfsf2+0x78>
20089604:	31800104 	addi	r6,r6,4
20089608:	3081002c 	andhi	r2,r6,1024
2008960c:	10002326 	beq	r2,zero,2008969c <__truncdfsf2+0x10c>
20089610:	18c00044 	addi	r3,r3,1
20089614:	00803fc4 	movi	r2,255
20089618:	18800326 	beq	r3,r2,20089628 <__truncdfsf2+0x98>
2008961c:	300c91ba 	slli	r6,r6,6
20089620:	300cd27a 	srli	r6,r6,9
20089624:	00000206 	br	20089630 <__truncdfsf2+0xa0>
20089628:	00ffffc4 	movi	r3,-1
2008962c:	000d883a 	mov	r6,zero
20089630:	18c03fcc 	andi	r3,r3,255
20089634:	180895fa 	slli	r4,r3,23
20089638:	00c02034 	movhi	r3,128
2008963c:	280a97fa 	slli	r5,r5,31
20089640:	18ffffc4 	addi	r3,r3,-1
20089644:	30c6703a 	and	r3,r6,r3
20089648:	1906b03a 	or	r3,r3,r4
2008964c:	1944b03a 	or	r2,r3,r5
20089650:	f800283a 	ret
20089654:	4000071e 	bne	r8,zero,20089674 <__truncdfsf2+0xe4>
20089658:	31ccb03a 	or	r6,r6,r7
2008965c:	30000d1e 	bne	r6,zero,20089694 <__truncdfsf2+0x104>
20089660:	0007883a 	mov	r3,zero
20089664:	00802034 	movhi	r2,128
20089668:	10bfffc4 	addi	r2,r2,-1
2008966c:	308c703a 	and	r6,r6,r2
20089670:	003fef06 	br	20089630 <__flash_rwdata_start+0xfffecfe8>
20089674:	31c8b03a 	or	r4,r6,r7
20089678:	203feb26 	beq	r4,zero,20089628 <__flash_rwdata_start+0xfffecfe0>
2008967c:	300c90fa 	slli	r6,r6,3
20089680:	00c03fc4 	movi	r3,255
20089684:	31808034 	orhi	r6,r6,512
20089688:	003fd906 	br	200895f0 <__flash_rwdata_start+0xfffecfa8>
2008968c:	00bffa44 	movi	r2,-23
20089690:	1880090e 	bge	r3,r2,200896b8 <__truncdfsf2+0x128>
20089694:	01800144 	movi	r6,5
20089698:	0007883a 	mov	r3,zero
2008969c:	00803fc4 	movi	r2,255
200896a0:	300cd0fa 	srli	r6,r6,3
200896a4:	18bfef1e 	bne	r3,r2,20089664 <__flash_rwdata_start+0xfffed01c>
200896a8:	303fdf26 	beq	r6,zero,20089628 <__flash_rwdata_start+0xfffecfe0>
200896ac:	31801034 	orhi	r6,r6,64
200896b0:	00ffffc4 	movi	r3,-1
200896b4:	003feb06 	br	20089664 <__flash_rwdata_start+0xfffed01c>
200896b8:	0080e784 	movi	r2,926
200896bc:	1205c83a 	sub	r2,r2,r8
200896c0:	00c007c4 	movi	r3,31
200896c4:	31802034 	orhi	r6,r6,128
200896c8:	18800916 	blt	r3,r2,200896f0 <__truncdfsf2+0x160>
200896cc:	423f2084 	addi	r8,r8,-894
200896d0:	3a06983a 	sll	r3,r7,r8
200896d4:	3210983a 	sll	r8,r6,r8
200896d8:	388ed83a 	srl	r7,r7,r2
200896dc:	180cc03a 	cmpne	r6,r3,zero
200896e0:	418cb03a 	or	r6,r8,r6
200896e4:	31ccb03a 	or	r6,r6,r7
200896e8:	0007883a 	mov	r3,zero
200896ec:	003fc006 	br	200895f0 <__flash_rwdata_start+0xfffecfa8>
200896f0:	00c0df84 	movi	r3,894
200896f4:	1a07c83a 	sub	r3,r3,r8
200896f8:	01000804 	movi	r4,32
200896fc:	30c6d83a 	srl	r3,r6,r3
20089700:	11000726 	beq	r2,r4,20089720 <__truncdfsf2+0x190>
20089704:	423f2884 	addi	r8,r8,-862
20089708:	3210983a 	sll	r8,r6,r8
2008970c:	41ceb03a 	or	r7,r8,r7
20089710:	380ec03a 	cmpne	r7,r7,zero
20089714:	38ccb03a 	or	r6,r7,r3
20089718:	0007883a 	mov	r3,zero
2008971c:	003fb406 	br	200895f0 <__flash_rwdata_start+0xfffecfa8>
20089720:	0011883a 	mov	r8,zero
20089724:	003ff906 	br	2008970c <__flash_rwdata_start+0xfffed0c4>

20089728 <__clzsi2>:
20089728:	00bfffd4 	movui	r2,65535
2008972c:	11000b36 	bltu	r2,r4,2008975c <__clzsi2+0x34>
20089730:	00803fc4 	movi	r2,255
20089734:	1100122e 	bgeu	r2,r4,20089780 <__clzsi2+0x58>
20089738:	00c00204 	movi	r3,8
2008973c:	01400604 	movi	r5,24
20089740:	20c8d83a 	srl	r4,r4,r3
20089744:	00800034 	movhi	r2,0
20089748:	10813a44 	addi	r2,r2,1257
2008974c:	1109883a 	add	r4,r2,r4
20089750:	20800003 	ldbu	r2,0(r4)
20089754:	2885c83a 	sub	r2,r5,r2
20089758:	f800283a 	ret
2008975c:	00804034 	movhi	r2,256
20089760:	10bfffc4 	addi	r2,r2,-1
20089764:	11000336 	bltu	r2,r4,20089774 <__clzsi2+0x4c>
20089768:	00c00404 	movi	r3,16
2008976c:	180b883a 	mov	r5,r3
20089770:	003ff306 	br	20089740 <__flash_rwdata_start+0xfffed0f8>
20089774:	00c00604 	movi	r3,24
20089778:	01400204 	movi	r5,8
2008977c:	003ff006 	br	20089740 <__flash_rwdata_start+0xfffed0f8>
20089780:	0007883a 	mov	r3,zero
20089784:	01400804 	movi	r5,32
20089788:	003fed06 	br	20089740 <__flash_rwdata_start+0xfffed0f8>

2008978c <exit>:
2008978c:	defffe04 	addi	sp,sp,-8
20089790:	000b883a 	mov	r5,zero
20089794:	dc000015 	stw	r16,0(sp)
20089798:	dfc00115 	stw	ra,4(sp)
2008979c:	2021883a 	mov	r16,r4
200897a0:	008ea800 	call	2008ea80 <__call_exitprocs>
200897a4:	00800034 	movhi	r2,0
200897a8:	108a1304 	addi	r2,r2,10316
200897ac:	11000017 	ldw	r4,0(r2)
200897b0:	20800f17 	ldw	r2,60(r4)
200897b4:	10000126 	beq	r2,zero,200897bc <exit+0x30>
200897b8:	103ee83a 	callr	r2
200897bc:	8009883a 	mov	r4,r16
200897c0:	00973440 	call	20097344 <_exit>

200897c4 <memalign>:
200897c4:	00c00034 	movhi	r3,0
200897c8:	18ca1404 	addi	r3,r3,10320
200897cc:	2005883a 	mov	r2,r4
200897d0:	19000017 	ldw	r4,0(r3)
200897d4:	280d883a 	mov	r6,r5
200897d8:	100b883a 	mov	r5,r2
200897dc:	00897e01 	jmpi	200897e0 <_memalign_r>

200897e0 <_memalign_r>:
200897e0:	defffa04 	addi	sp,sp,-24
200897e4:	dc400115 	stw	r17,4(sp)
200897e8:	dfc00515 	stw	ra,20(sp)
200897ec:	dd000415 	stw	r20,16(sp)
200897f0:	dcc00315 	stw	r19,12(sp)
200897f4:	dc800215 	stw	r18,8(sp)
200897f8:	dc000015 	stw	r16,0(sp)
200897fc:	00800204 	movi	r2,8
20089800:	2823883a 	mov	r17,r5
20089804:	11404b2e 	bgeu	r2,r5,20089934 <_memalign_r+0x154>
20089808:	008003c4 	movi	r2,15
2008980c:	2029883a 	mov	r20,r4
20089810:	11400136 	bltu	r2,r5,20089818 <_memalign_r+0x38>
20089814:	04400404 	movi	r17,16
20089818:	308002c4 	addi	r2,r6,11
2008981c:	00c00584 	movi	r3,22
20089820:	18803e2e 	bgeu	r3,r2,2008991c <_memalign_r+0x13c>
20089824:	04bffe04 	movi	r18,-8
20089828:	14a4703a 	and	r18,r2,r18
2008982c:	90003d16 	blt	r18,zero,20089924 <_memalign_r+0x144>
20089830:	91803c36 	bltu	r18,r6,20089924 <_memalign_r+0x144>
20089834:	89400404 	addi	r5,r17,16
20089838:	a009883a 	mov	r4,r20
2008983c:	2c8b883a 	add	r5,r5,r18
20089840:	00899bc0 	call	200899bc <_malloc_r>
20089844:	1027883a 	mov	r19,r2
20089848:	10005026 	beq	r2,zero,2008998c <_memalign_r+0x1ac>
2008984c:	a009883a 	mov	r4,r20
20089850:	009799c0 	call	2009799c <__malloc_lock>
20089854:	9809883a 	mov	r4,r19
20089858:	880b883a 	mov	r5,r17
2008985c:	9c3ffe04 	addi	r16,r19,-8
20089860:	008679c0 	call	2008679c <__umodsi3>
20089864:	10001c26 	beq	r2,zero,200898d8 <_memalign_r+0xf8>
20089868:	88bfffc4 	addi	r2,r17,-1
2008986c:	9887883a 	add	r3,r19,r2
20089870:	0445c83a 	sub	r2,zero,r17
20089874:	1884703a 	and	r2,r3,r2
20089878:	10bffe04 	addi	r2,r2,-8
2008987c:	1409c83a 	sub	r4,r2,r16
20089880:	014003c4 	movi	r5,15
20089884:	8007883a 	mov	r3,r16
20089888:	2900330e 	bge	r5,r4,20089958 <_memalign_r+0x178>
2008988c:	1021883a 	mov	r16,r2
20089890:	993fff17 	ldw	r4,-4(r19)
20089894:	00bfff04 	movi	r2,-4
20089898:	80c7c83a 	sub	r3,r16,r3
2008989c:	2084703a 	and	r2,r4,r2
200898a0:	10c5c83a 	sub	r2,r2,r3
200898a4:	11000054 	ori	r4,r2,1
200898a8:	81000115 	stw	r4,4(r16)
200898ac:	8085883a 	add	r2,r16,r2
200898b0:	11800117 	ldw	r6,4(r2)
200898b4:	a009883a 	mov	r4,r20
200898b8:	980b883a 	mov	r5,r19
200898bc:	31800054 	ori	r6,r6,1
200898c0:	11800115 	stw	r6,4(r2)
200898c4:	98bfff17 	ldw	r2,-4(r19)
200898c8:	1080004c 	andi	r2,r2,1
200898cc:	1884b03a 	or	r2,r3,r2
200898d0:	98bfff15 	stw	r2,-4(r19)
200898d4:	0090c940 	call	20090c94 <_free_r>
200898d8:	80c00117 	ldw	r3,4(r16)
200898dc:	00bfff04 	movi	r2,-4
200898e0:	1884703a 	and	r2,r3,r2
200898e4:	1485c83a 	sub	r2,r2,r18
200898e8:	00c003c4 	movi	r3,15
200898ec:	18801c16 	blt	r3,r2,20089960 <_memalign_r+0x180>
200898f0:	a009883a 	mov	r4,r20
200898f4:	00979bc0 	call	200979bc <__malloc_unlock>
200898f8:	80800204 	addi	r2,r16,8
200898fc:	dfc00517 	ldw	ra,20(sp)
20089900:	dd000417 	ldw	r20,16(sp)
20089904:	dcc00317 	ldw	r19,12(sp)
20089908:	dc800217 	ldw	r18,8(sp)
2008990c:	dc400117 	ldw	r17,4(sp)
20089910:	dc000017 	ldw	r16,0(sp)
20089914:	dec00604 	addi	sp,sp,24
20089918:	f800283a 	ret
2008991c:	04800404 	movi	r18,16
20089920:	91bfc42e 	bgeu	r18,r6,20089834 <__flash_rwdata_start+0xfffed1ec>
20089924:	00800304 	movi	r2,12
20089928:	a0800015 	stw	r2,0(r20)
2008992c:	0005883a 	mov	r2,zero
20089930:	003ff206 	br	200898fc <__flash_rwdata_start+0xfffed2b4>
20089934:	300b883a 	mov	r5,r6
20089938:	dfc00517 	ldw	ra,20(sp)
2008993c:	dd000417 	ldw	r20,16(sp)
20089940:	dcc00317 	ldw	r19,12(sp)
20089944:	dc800217 	ldw	r18,8(sp)
20089948:	dc400117 	ldw	r17,4(sp)
2008994c:	dc000017 	ldw	r16,0(sp)
20089950:	dec00604 	addi	sp,sp,24
20089954:	00899bc1 	jmpi	200899bc <_malloc_r>
20089958:	1461883a 	add	r16,r2,r17
2008995c:	003fcc06 	br	20089890 <__flash_rwdata_start+0xfffed248>
20089960:	848b883a 	add	r5,r16,r18
20089964:	10800054 	ori	r2,r2,1
20089968:	28800115 	stw	r2,4(r5)
2008996c:	80800117 	ldw	r2,4(r16)
20089970:	a009883a 	mov	r4,r20
20089974:	29400204 	addi	r5,r5,8
20089978:	1080004c 	andi	r2,r2,1
2008997c:	90a4b03a 	or	r18,r18,r2
20089980:	84800115 	stw	r18,4(r16)
20089984:	0090c940 	call	20090c94 <_free_r>
20089988:	003fd906 	br	200898f0 <__flash_rwdata_start+0xfffed2a8>
2008998c:	0005883a 	mov	r2,zero
20089990:	003fda06 	br	200898fc <__flash_rwdata_start+0xfffed2b4>

20089994 <malloc>:
20089994:	00800034 	movhi	r2,0
20089998:	108a1404 	addi	r2,r2,10320
2008999c:	200b883a 	mov	r5,r4
200899a0:	11000017 	ldw	r4,0(r2)
200899a4:	00899bc1 	jmpi	200899bc <_malloc_r>

200899a8 <free>:
200899a8:	00800034 	movhi	r2,0
200899ac:	108a1404 	addi	r2,r2,10320
200899b0:	200b883a 	mov	r5,r4
200899b4:	11000017 	ldw	r4,0(r2)
200899b8:	0090c941 	jmpi	20090c94 <_free_r>

200899bc <_malloc_r>:
200899bc:	defff504 	addi	sp,sp,-44
200899c0:	dc800315 	stw	r18,12(sp)
200899c4:	dfc00a15 	stw	ra,40(sp)
200899c8:	df000915 	stw	fp,36(sp)
200899cc:	ddc00815 	stw	r23,32(sp)
200899d0:	dd800715 	stw	r22,28(sp)
200899d4:	dd400615 	stw	r21,24(sp)
200899d8:	dd000515 	stw	r20,20(sp)
200899dc:	dcc00415 	stw	r19,16(sp)
200899e0:	dc400215 	stw	r17,8(sp)
200899e4:	dc000115 	stw	r16,4(sp)
200899e8:	288002c4 	addi	r2,r5,11
200899ec:	00c00584 	movi	r3,22
200899f0:	2025883a 	mov	r18,r4
200899f4:	18802a2e 	bgeu	r3,r2,20089aa0 <_malloc_r+0xe4>
200899f8:	047ffe04 	movi	r17,-8
200899fc:	1462703a 	and	r17,r2,r17
20089a00:	88009e16 	blt	r17,zero,20089c7c <_malloc_r+0x2c0>
20089a04:	89409d36 	bltu	r17,r5,20089c7c <_malloc_r+0x2c0>
20089a08:	009799c0 	call	2009799c <__malloc_lock>
20089a0c:	00807dc4 	movi	r2,503
20089a10:	14402736 	bltu	r2,r17,20089ab0 <_malloc_r+0xf4>
20089a14:	8806d0fa 	srli	r3,r17,3
20089a18:	04c00034 	movhi	r19,0
20089a1c:	9cc45704 	addi	r19,r19,4444
20089a20:	18c5883a 	add	r2,r3,r3
20089a24:	1085883a 	add	r2,r2,r2
20089a28:	1085883a 	add	r2,r2,r2
20089a2c:	9885883a 	add	r2,r19,r2
20089a30:	14000317 	ldw	r16,12(r2)
20089a34:	80814a26 	beq	r16,r2,20089f60 <_malloc_r+0x5a4>
20089a38:	80c00117 	ldw	r3,4(r16)
20089a3c:	81000317 	ldw	r4,12(r16)
20089a40:	00bfff04 	movi	r2,-4
20089a44:	1884703a 	and	r2,r3,r2
20089a48:	81400217 	ldw	r5,8(r16)
20089a4c:	8085883a 	add	r2,r16,r2
20089a50:	10c00117 	ldw	r3,4(r2)
20089a54:	29000315 	stw	r4,12(r5)
20089a58:	21400215 	stw	r5,8(r4)
20089a5c:	18c00054 	ori	r3,r3,1
20089a60:	10c00115 	stw	r3,4(r2)
20089a64:	9009883a 	mov	r4,r18
20089a68:	00979bc0 	call	200979bc <__malloc_unlock>
20089a6c:	80800204 	addi	r2,r16,8
20089a70:	dfc00a17 	ldw	ra,40(sp)
20089a74:	df000917 	ldw	fp,36(sp)
20089a78:	ddc00817 	ldw	r23,32(sp)
20089a7c:	dd800717 	ldw	r22,28(sp)
20089a80:	dd400617 	ldw	r21,24(sp)
20089a84:	dd000517 	ldw	r20,20(sp)
20089a88:	dcc00417 	ldw	r19,16(sp)
20089a8c:	dc800317 	ldw	r18,12(sp)
20089a90:	dc400217 	ldw	r17,8(sp)
20089a94:	dc000117 	ldw	r16,4(sp)
20089a98:	dec00b04 	addi	sp,sp,44
20089a9c:	f800283a 	ret
20089aa0:	04400404 	movi	r17,16
20089aa4:	89407536 	bltu	r17,r5,20089c7c <_malloc_r+0x2c0>
20089aa8:	009799c0 	call	2009799c <__malloc_lock>
20089aac:	003fd906 	br	20089a14 <__flash_rwdata_start+0xfffed3cc>
20089ab0:	8806d27a 	srli	r3,r17,9
20089ab4:	18007526 	beq	r3,zero,20089c8c <_malloc_r+0x2d0>
20089ab8:	00800104 	movi	r2,4
20089abc:	10c0ef36 	bltu	r2,r3,20089e7c <_malloc_r+0x4c0>
20089ac0:	8806d1ba 	srli	r3,r17,6
20089ac4:	19c00e04 	addi	r7,r3,56
20089ac8:	39cb883a 	add	r5,r7,r7
20089acc:	04c00034 	movhi	r19,0
20089ad0:	294b883a 	add	r5,r5,r5
20089ad4:	9cc45704 	addi	r19,r19,4444
20089ad8:	294b883a 	add	r5,r5,r5
20089adc:	994b883a 	add	r5,r19,r5
20089ae0:	2c000317 	ldw	r16,12(r5)
20089ae4:	2c000e26 	beq	r5,r16,20089b20 <_malloc_r+0x164>
20089ae8:	80800117 	ldw	r2,4(r16)
20089aec:	01bfff04 	movi	r6,-4
20089af0:	010003c4 	movi	r4,15
20089af4:	1184703a 	and	r2,r2,r6
20089af8:	1447c83a 	sub	r3,r2,r17
20089afc:	20c00716 	blt	r4,r3,20089b1c <_malloc_r+0x160>
20089b00:	1800650e 	bge	r3,zero,20089c98 <_malloc_r+0x2dc>
20089b04:	84000317 	ldw	r16,12(r16)
20089b08:	2c000526 	beq	r5,r16,20089b20 <_malloc_r+0x164>
20089b0c:	80800117 	ldw	r2,4(r16)
20089b10:	1184703a 	and	r2,r2,r6
20089b14:	1447c83a 	sub	r3,r2,r17
20089b18:	20fff90e 	bge	r4,r3,20089b00 <__flash_rwdata_start+0xfffed4b8>
20089b1c:	39ffffc4 	addi	r7,r7,-1
20089b20:	38c00044 	addi	r3,r7,1
20089b24:	01800034 	movhi	r6,0
20089b28:	9c000417 	ldw	r16,16(r19)
20089b2c:	31845704 	addi	r6,r6,4444
20089b30:	32400204 	addi	r9,r6,8
20089b34:	82410326 	beq	r16,r9,20089f44 <_malloc_r+0x588>
20089b38:	81000117 	ldw	r4,4(r16)
20089b3c:	00bfff04 	movi	r2,-4
20089b40:	208e703a 	and	r7,r4,r2
20089b44:	3c45c83a 	sub	r2,r7,r17
20089b48:	010003c4 	movi	r4,15
20089b4c:	2080ee16 	blt	r4,r2,20089f08 <_malloc_r+0x54c>
20089b50:	32400515 	stw	r9,20(r6)
20089b54:	32400415 	stw	r9,16(r6)
20089b58:	1000510e 	bge	r2,zero,20089ca0 <_malloc_r+0x2e4>
20089b5c:	00807fc4 	movi	r2,511
20089b60:	11c0ce36 	bltu	r2,r7,20089e9c <_malloc_r+0x4e0>
20089b64:	3808d0fa 	srli	r4,r7,3
20089b68:	01c00044 	movi	r7,1
20089b6c:	30800117 	ldw	r2,4(r6)
20089b70:	210b883a 	add	r5,r4,r4
20089b74:	294b883a 	add	r5,r5,r5
20089b78:	2009d0ba 	srai	r4,r4,2
20089b7c:	294b883a 	add	r5,r5,r5
20089b80:	298b883a 	add	r5,r5,r6
20089b84:	2a000217 	ldw	r8,8(r5)
20089b88:	3908983a 	sll	r4,r7,r4
20089b8c:	81400315 	stw	r5,12(r16)
20089b90:	82000215 	stw	r8,8(r16)
20089b94:	2088b03a 	or	r4,r4,r2
20089b98:	2c000215 	stw	r16,8(r5)
20089b9c:	31000115 	stw	r4,4(r6)
20089ba0:	44000315 	stw	r16,12(r8)
20089ba4:	1805d0ba 	srai	r2,r3,2
20089ba8:	01400044 	movi	r5,1
20089bac:	288a983a 	sll	r5,r5,r2
20089bb0:	21404336 	bltu	r4,r5,20089cc0 <_malloc_r+0x304>
20089bb4:	2144703a 	and	r2,r4,r5
20089bb8:	10000a1e 	bne	r2,zero,20089be4 <_malloc_r+0x228>
20089bbc:	00bfff04 	movi	r2,-4
20089bc0:	294b883a 	add	r5,r5,r5
20089bc4:	1886703a 	and	r3,r3,r2
20089bc8:	2144703a 	and	r2,r4,r5
20089bcc:	18c00104 	addi	r3,r3,4
20089bd0:	1000041e 	bne	r2,zero,20089be4 <_malloc_r+0x228>
20089bd4:	294b883a 	add	r5,r5,r5
20089bd8:	2144703a 	and	r2,r4,r5
20089bdc:	18c00104 	addi	r3,r3,4
20089be0:	103ffc26 	beq	r2,zero,20089bd4 <__flash_rwdata_start+0xfffed58c>
20089be4:	023fff04 	movi	r8,-4
20089be8:	01c003c4 	movi	r7,15
20089bec:	18c5883a 	add	r2,r3,r3
20089bf0:	1085883a 	add	r2,r2,r2
20089bf4:	1085883a 	add	r2,r2,r2
20089bf8:	9895883a 	add	r10,r19,r2
20089bfc:	52c00304 	addi	r11,r10,12
20089c00:	1819883a 	mov	r12,r3
20089c04:	5c000017 	ldw	r16,0(r11)
20089c08:	59bffd04 	addi	r6,r11,-12
20089c0c:	8180041e 	bne	r16,r6,20089c20 <_malloc_r+0x264>
20089c10:	0000ce06 	br	20089f4c <_malloc_r+0x590>
20089c14:	2000d70e 	bge	r4,zero,20089f74 <_malloc_r+0x5b8>
20089c18:	84000317 	ldw	r16,12(r16)
20089c1c:	8180cb26 	beq	r16,r6,20089f4c <_malloc_r+0x590>
20089c20:	80800117 	ldw	r2,4(r16)
20089c24:	1204703a 	and	r2,r2,r8
20089c28:	1449c83a 	sub	r4,r2,r17
20089c2c:	393ff90e 	bge	r7,r4,20089c14 <__flash_rwdata_start+0xfffed5cc>
20089c30:	80800317 	ldw	r2,12(r16)
20089c34:	80c00217 	ldw	r3,8(r16)
20089c38:	89400054 	ori	r5,r17,1
20089c3c:	81400115 	stw	r5,4(r16)
20089c40:	18800315 	stw	r2,12(r3)
20089c44:	10c00215 	stw	r3,8(r2)
20089c48:	8463883a 	add	r17,r16,r17
20089c4c:	9c400515 	stw	r17,20(r19)
20089c50:	9c400415 	stw	r17,16(r19)
20089c54:	20800054 	ori	r2,r4,1
20089c58:	88800115 	stw	r2,4(r17)
20089c5c:	8a400315 	stw	r9,12(r17)
20089c60:	8a400215 	stw	r9,8(r17)
20089c64:	8923883a 	add	r17,r17,r4
20089c68:	89000015 	stw	r4,0(r17)
20089c6c:	9009883a 	mov	r4,r18
20089c70:	00979bc0 	call	200979bc <__malloc_unlock>
20089c74:	80800204 	addi	r2,r16,8
20089c78:	003f7d06 	br	20089a70 <__flash_rwdata_start+0xfffed428>
20089c7c:	00800304 	movi	r2,12
20089c80:	90800015 	stw	r2,0(r18)
20089c84:	0005883a 	mov	r2,zero
20089c88:	003f7906 	br	20089a70 <__flash_rwdata_start+0xfffed428>
20089c8c:	01401f84 	movi	r5,126
20089c90:	01c00fc4 	movi	r7,63
20089c94:	003f8d06 	br	20089acc <__flash_rwdata_start+0xfffed484>
20089c98:	81000317 	ldw	r4,12(r16)
20089c9c:	003f6a06 	br	20089a48 <__flash_rwdata_start+0xfffed400>
20089ca0:	81c5883a 	add	r2,r16,r7
20089ca4:	10c00117 	ldw	r3,4(r2)
20089ca8:	9009883a 	mov	r4,r18
20089cac:	18c00054 	ori	r3,r3,1
20089cb0:	10c00115 	stw	r3,4(r2)
20089cb4:	00979bc0 	call	200979bc <__malloc_unlock>
20089cb8:	80800204 	addi	r2,r16,8
20089cbc:	003f6c06 	br	20089a70 <__flash_rwdata_start+0xfffed428>
20089cc0:	9c000217 	ldw	r16,8(r19)
20089cc4:	00bfff04 	movi	r2,-4
20089cc8:	85800117 	ldw	r22,4(r16)
20089ccc:	b0ac703a 	and	r22,r22,r2
20089cd0:	b4400336 	bltu	r22,r17,20089ce0 <_malloc_r+0x324>
20089cd4:	b445c83a 	sub	r2,r22,r17
20089cd8:	00c003c4 	movi	r3,15
20089cdc:	18805d16 	blt	r3,r2,20089e54 <_malloc_r+0x498>
20089ce0:	05c00034 	movhi	r23,0
20089ce4:	00800034 	movhi	r2,0
20089ce8:	bdca1504 	addi	r23,r23,10324
20089cec:	108a2d04 	addi	r2,r2,10420
20089cf0:	15400017 	ldw	r21,0(r2)
20089cf4:	b9000017 	ldw	r4,0(r23)
20089cf8:	00ffffc4 	movi	r3,-1
20089cfc:	858d883a 	add	r6,r16,r22
20089d00:	8d6b883a 	add	r21,r17,r21
20089d04:	20c0e426 	beq	r4,r3,2008a098 <_malloc_r+0x6dc>
20089d08:	ad4403c4 	addi	r21,r21,4111
20089d0c:	00fc0004 	movi	r3,-4096
20089d10:	a8ea703a 	and	r21,r21,r3
20089d14:	9009883a 	mov	r4,r18
20089d18:	a80b883a 	mov	r5,r21
20089d1c:	d9800015 	stw	r6,0(sp)
20089d20:	008a5800 	call	2008a580 <_sbrk_r>
20089d24:	00ffffc4 	movi	r3,-1
20089d28:	1029883a 	mov	r20,r2
20089d2c:	d9800017 	ldw	r6,0(sp)
20089d30:	10c0a426 	beq	r2,r3,20089fc4 <_malloc_r+0x608>
20089d34:	1180a236 	bltu	r2,r6,20089fc0 <_malloc_r+0x604>
20089d38:	07000034 	movhi	fp,0
20089d3c:	e70b1b04 	addi	fp,fp,11372
20089d40:	e0c00017 	ldw	r3,0(fp)
20089d44:	a8c7883a 	add	r3,r21,r3
20089d48:	e0c00015 	stw	r3,0(fp)
20089d4c:	3500da26 	beq	r6,r20,2008a0b8 <_malloc_r+0x6fc>
20089d50:	b9000017 	ldw	r4,0(r23)
20089d54:	00bfffc4 	movi	r2,-1
20089d58:	2080e426 	beq	r4,r2,2008a0ec <_malloc_r+0x730>
20089d5c:	a185c83a 	sub	r2,r20,r6
20089d60:	1885883a 	add	r2,r3,r2
20089d64:	e0800015 	stw	r2,0(fp)
20089d68:	a0c001cc 	andi	r3,r20,7
20089d6c:	1800b526 	beq	r3,zero,2008a044 <_malloc_r+0x688>
20089d70:	a0e9c83a 	sub	r20,r20,r3
20089d74:	00840204 	movi	r2,4104
20089d78:	a5000204 	addi	r20,r20,8
20089d7c:	10c7c83a 	sub	r3,r2,r3
20089d80:	a545883a 	add	r2,r20,r21
20089d84:	1083ffcc 	andi	r2,r2,4095
20089d88:	18abc83a 	sub	r21,r3,r2
20089d8c:	9009883a 	mov	r4,r18
20089d90:	a80b883a 	mov	r5,r21
20089d94:	008a5800 	call	2008a580 <_sbrk_r>
20089d98:	00ffffc4 	movi	r3,-1
20089d9c:	10c0d026 	beq	r2,r3,2008a0e0 <_malloc_r+0x724>
20089da0:	1507c83a 	sub	r3,r2,r20
20089da4:	a8c7883a 	add	r3,r21,r3
20089da8:	18c00054 	ori	r3,r3,1
20089dac:	e0800017 	ldw	r2,0(fp)
20089db0:	9d000215 	stw	r20,8(r19)
20089db4:	a0c00115 	stw	r3,4(r20)
20089db8:	a887883a 	add	r3,r21,r2
20089dbc:	e0c00015 	stw	r3,0(fp)
20089dc0:	84c00e26 	beq	r16,r19,20089dfc <_malloc_r+0x440>
20089dc4:	018003c4 	movi	r6,15
20089dc8:	3580a02e 	bgeu	r6,r22,2008a04c <_malloc_r+0x690>
20089dcc:	81400117 	ldw	r5,4(r16)
20089dd0:	013ffe04 	movi	r4,-8
20089dd4:	b0bffd04 	addi	r2,r22,-12
20089dd8:	1104703a 	and	r2,r2,r4
20089ddc:	2900004c 	andi	r4,r5,1
20089de0:	1108b03a 	or	r4,r2,r4
20089de4:	81000115 	stw	r4,4(r16)
20089de8:	01400144 	movi	r5,5
20089dec:	8089883a 	add	r4,r16,r2
20089df0:	21400115 	stw	r5,4(r4)
20089df4:	21400215 	stw	r5,8(r4)
20089df8:	3080c036 	bltu	r6,r2,2008a0fc <_malloc_r+0x740>
20089dfc:	00800034 	movhi	r2,0
20089e00:	108a2c04 	addi	r2,r2,10416
20089e04:	11000017 	ldw	r4,0(r2)
20089e08:	20c0012e 	bgeu	r4,r3,20089e10 <_malloc_r+0x454>
20089e0c:	10c00015 	stw	r3,0(r2)
20089e10:	00800034 	movhi	r2,0
20089e14:	108a2b04 	addi	r2,r2,10412
20089e18:	11000017 	ldw	r4,0(r2)
20089e1c:	9c000217 	ldw	r16,8(r19)
20089e20:	20c0012e 	bgeu	r4,r3,20089e28 <_malloc_r+0x46c>
20089e24:	10c00015 	stw	r3,0(r2)
20089e28:	80c00117 	ldw	r3,4(r16)
20089e2c:	00bfff04 	movi	r2,-4
20089e30:	1886703a 	and	r3,r3,r2
20089e34:	1c45c83a 	sub	r2,r3,r17
20089e38:	1c400236 	bltu	r3,r17,20089e44 <_malloc_r+0x488>
20089e3c:	00c003c4 	movi	r3,15
20089e40:	18800416 	blt	r3,r2,20089e54 <_malloc_r+0x498>
20089e44:	9009883a 	mov	r4,r18
20089e48:	00979bc0 	call	200979bc <__malloc_unlock>
20089e4c:	0005883a 	mov	r2,zero
20089e50:	003f0706 	br	20089a70 <__flash_rwdata_start+0xfffed428>
20089e54:	88c00054 	ori	r3,r17,1
20089e58:	80c00115 	stw	r3,4(r16)
20089e5c:	8463883a 	add	r17,r16,r17
20089e60:	10800054 	ori	r2,r2,1
20089e64:	9c400215 	stw	r17,8(r19)
20089e68:	88800115 	stw	r2,4(r17)
20089e6c:	9009883a 	mov	r4,r18
20089e70:	00979bc0 	call	200979bc <__malloc_unlock>
20089e74:	80800204 	addi	r2,r16,8
20089e78:	003efd06 	br	20089a70 <__flash_rwdata_start+0xfffed428>
20089e7c:	00800504 	movi	r2,20
20089e80:	10c0482e 	bgeu	r2,r3,20089fa4 <_malloc_r+0x5e8>
20089e84:	00801504 	movi	r2,84
20089e88:	10c06836 	bltu	r2,r3,2008a02c <_malloc_r+0x670>
20089e8c:	8806d33a 	srli	r3,r17,12
20089e90:	19c01b84 	addi	r7,r3,110
20089e94:	39cb883a 	add	r5,r7,r7
20089e98:	003f0c06 	br	20089acc <__flash_rwdata_start+0xfffed484>
20089e9c:	3804d27a 	srli	r2,r7,9
20089ea0:	01000104 	movi	r4,4
20089ea4:	2080422e 	bgeu	r4,r2,20089fb0 <_malloc_r+0x5f4>
20089ea8:	01000504 	movi	r4,20
20089eac:	20807c36 	bltu	r4,r2,2008a0a0 <_malloc_r+0x6e4>
20089eb0:	110016c4 	addi	r4,r2,91
20089eb4:	210b883a 	add	r5,r4,r4
20089eb8:	294b883a 	add	r5,r5,r5
20089ebc:	294b883a 	add	r5,r5,r5
20089ec0:	994b883a 	add	r5,r19,r5
20089ec4:	28800217 	ldw	r2,8(r5)
20089ec8:	02000034 	movhi	r8,0
20089ecc:	42045704 	addi	r8,r8,4444
20089ed0:	11406326 	beq	r2,r5,2008a060 <_malloc_r+0x6a4>
20089ed4:	01bfff04 	movi	r6,-4
20089ed8:	11000117 	ldw	r4,4(r2)
20089edc:	2188703a 	and	r4,r4,r6
20089ee0:	3900022e 	bgeu	r7,r4,20089eec <_malloc_r+0x530>
20089ee4:	10800217 	ldw	r2,8(r2)
20089ee8:	28bffb1e 	bne	r5,r2,20089ed8 <__flash_rwdata_start+0xfffed890>
20089eec:	11800317 	ldw	r6,12(r2)
20089ef0:	99000117 	ldw	r4,4(r19)
20089ef4:	81800315 	stw	r6,12(r16)
20089ef8:	80800215 	stw	r2,8(r16)
20089efc:	34000215 	stw	r16,8(r6)
20089f00:	14000315 	stw	r16,12(r2)
20089f04:	003f2706 	br	20089ba4 <__flash_rwdata_start+0xfffed55c>
20089f08:	88c00054 	ori	r3,r17,1
20089f0c:	80c00115 	stw	r3,4(r16)
20089f10:	8463883a 	add	r17,r16,r17
20089f14:	34400515 	stw	r17,20(r6)
20089f18:	34400415 	stw	r17,16(r6)
20089f1c:	10c00054 	ori	r3,r2,1
20089f20:	8a400315 	stw	r9,12(r17)
20089f24:	8a400215 	stw	r9,8(r17)
20089f28:	88c00115 	stw	r3,4(r17)
20089f2c:	88a3883a 	add	r17,r17,r2
20089f30:	88800015 	stw	r2,0(r17)
20089f34:	9009883a 	mov	r4,r18
20089f38:	00979bc0 	call	200979bc <__malloc_unlock>
20089f3c:	80800204 	addi	r2,r16,8
20089f40:	003ecb06 	br	20089a70 <__flash_rwdata_start+0xfffed428>
20089f44:	31000117 	ldw	r4,4(r6)
20089f48:	003f1606 	br	20089ba4 <__flash_rwdata_start+0xfffed55c>
20089f4c:	63000044 	addi	r12,r12,1
20089f50:	608000cc 	andi	r2,r12,3
20089f54:	5ac00204 	addi	r11,r11,8
20089f58:	103f2a1e 	bne	r2,zero,20089c04 <__flash_rwdata_start+0xfffed5bc>
20089f5c:	00002106 	br	20089fe4 <_malloc_r+0x628>
20089f60:	80800204 	addi	r2,r16,8
20089f64:	84000517 	ldw	r16,20(r16)
20089f68:	143eb31e 	bne	r2,r16,20089a38 <__flash_rwdata_start+0xfffed3f0>
20089f6c:	18c00084 	addi	r3,r3,2
20089f70:	003eec06 	br	20089b24 <__flash_rwdata_start+0xfffed4dc>
20089f74:	8085883a 	add	r2,r16,r2
20089f78:	10c00117 	ldw	r3,4(r2)
20089f7c:	81000317 	ldw	r4,12(r16)
20089f80:	81400217 	ldw	r5,8(r16)
20089f84:	18c00054 	ori	r3,r3,1
20089f88:	10c00115 	stw	r3,4(r2)
20089f8c:	29000315 	stw	r4,12(r5)
20089f90:	21400215 	stw	r5,8(r4)
20089f94:	9009883a 	mov	r4,r18
20089f98:	00979bc0 	call	200979bc <__malloc_unlock>
20089f9c:	80800204 	addi	r2,r16,8
20089fa0:	003eb306 	br	20089a70 <__flash_rwdata_start+0xfffed428>
20089fa4:	19c016c4 	addi	r7,r3,91
20089fa8:	39cb883a 	add	r5,r7,r7
20089fac:	003ec706 	br	20089acc <__flash_rwdata_start+0xfffed484>
20089fb0:	3804d1ba 	srli	r2,r7,6
20089fb4:	11000e04 	addi	r4,r2,56
20089fb8:	210b883a 	add	r5,r4,r4
20089fbc:	003fbe06 	br	20089eb8 <__flash_rwdata_start+0xfffed870>
20089fc0:	84ff5d26 	beq	r16,r19,20089d38 <__flash_rwdata_start+0xfffed6f0>
20089fc4:	9c000217 	ldw	r16,8(r19)
20089fc8:	00bfff04 	movi	r2,-4
20089fcc:	80c00117 	ldw	r3,4(r16)
20089fd0:	1886703a 	and	r3,r3,r2
20089fd4:	003f9706 	br	20089e34 <__flash_rwdata_start+0xfffed7ec>
20089fd8:	52800017 	ldw	r10,0(r10)
20089fdc:	18ffffc4 	addi	r3,r3,-1
20089fe0:	50805c1e 	bne	r10,r2,2008a154 <_malloc_r+0x798>
20089fe4:	190000cc 	andi	r4,r3,3
20089fe8:	50bffe04 	addi	r2,r10,-8
20089fec:	203ffa1e 	bne	r4,zero,20089fd8 <__flash_rwdata_start+0xfffed990>
20089ff0:	98800117 	ldw	r2,4(r19)
20089ff4:	0146303a 	nor	r3,zero,r5
20089ff8:	1884703a 	and	r2,r3,r2
20089ffc:	98800115 	stw	r2,4(r19)
2008a000:	294b883a 	add	r5,r5,r5
2008a004:	117f2e36 	bltu	r2,r5,20089cc0 <__flash_rwdata_start+0xfffed678>
2008a008:	283f2d26 	beq	r5,zero,20089cc0 <__flash_rwdata_start+0xfffed678>
2008a00c:	1146703a 	and	r3,r2,r5
2008a010:	1800521e 	bne	r3,zero,2008a15c <_malloc_r+0x7a0>
2008a014:	6007883a 	mov	r3,r12
2008a018:	294b883a 	add	r5,r5,r5
2008a01c:	1148703a 	and	r4,r2,r5
2008a020:	18c00104 	addi	r3,r3,4
2008a024:	203ffc26 	beq	r4,zero,2008a018 <__flash_rwdata_start+0xfffed9d0>
2008a028:	003ef006 	br	20089bec <__flash_rwdata_start+0xfffed5a4>
2008a02c:	00805504 	movi	r2,340
2008a030:	10c01336 	bltu	r2,r3,2008a080 <_malloc_r+0x6c4>
2008a034:	8806d3fa 	srli	r3,r17,15
2008a038:	19c01dc4 	addi	r7,r3,119
2008a03c:	39cb883a 	add	r5,r7,r7
2008a040:	003ea206 	br	20089acc <__flash_rwdata_start+0xfffed484>
2008a044:	00c40004 	movi	r3,4096
2008a048:	003f4d06 	br	20089d80 <__flash_rwdata_start+0xfffed738>
2008a04c:	00800044 	movi	r2,1
2008a050:	a0800115 	stw	r2,4(r20)
2008a054:	a021883a 	mov	r16,r20
2008a058:	0007883a 	mov	r3,zero
2008a05c:	003f7506 	br	20089e34 <__flash_rwdata_start+0xfffed7ec>
2008a060:	200bd0ba 	srai	r5,r4,2
2008a064:	01800044 	movi	r6,1
2008a068:	41000117 	ldw	r4,4(r8)
2008a06c:	314a983a 	sll	r5,r6,r5
2008a070:	100d883a 	mov	r6,r2
2008a074:	2908b03a 	or	r4,r5,r4
2008a078:	41000115 	stw	r4,4(r8)
2008a07c:	003f9d06 	br	20089ef4 <__flash_rwdata_start+0xfffed8ac>
2008a080:	00815504 	movi	r2,1364
2008a084:	10c01336 	bltu	r2,r3,2008a0d4 <_malloc_r+0x718>
2008a088:	8806d4ba 	srli	r3,r17,18
2008a08c:	19c01f04 	addi	r7,r3,124
2008a090:	39cb883a 	add	r5,r7,r7
2008a094:	003e8d06 	br	20089acc <__flash_rwdata_start+0xfffed484>
2008a098:	ad400404 	addi	r21,r21,16
2008a09c:	003f1d06 	br	20089d14 <__flash_rwdata_start+0xfffed6cc>
2008a0a0:	01001504 	movi	r4,84
2008a0a4:	20801c36 	bltu	r4,r2,2008a118 <_malloc_r+0x75c>
2008a0a8:	3804d33a 	srli	r2,r7,12
2008a0ac:	11001b84 	addi	r4,r2,110
2008a0b0:	210b883a 	add	r5,r4,r4
2008a0b4:	003f8006 	br	20089eb8 <__flash_rwdata_start+0xfffed870>
2008a0b8:	3083ffcc 	andi	r2,r6,4095
2008a0bc:	103f241e 	bne	r2,zero,20089d50 <__flash_rwdata_start+0xfffed708>
2008a0c0:	99000217 	ldw	r4,8(r19)
2008a0c4:	ad85883a 	add	r2,r21,r22
2008a0c8:	10800054 	ori	r2,r2,1
2008a0cc:	20800115 	stw	r2,4(r4)
2008a0d0:	003f4a06 	br	20089dfc <__flash_rwdata_start+0xfffed7b4>
2008a0d4:	01403f04 	movi	r5,252
2008a0d8:	01c01f84 	movi	r7,126
2008a0dc:	003e7b06 	br	20089acc <__flash_rwdata_start+0xfffed484>
2008a0e0:	00c00044 	movi	r3,1
2008a0e4:	002b883a 	mov	r21,zero
2008a0e8:	003f3006 	br	20089dac <__flash_rwdata_start+0xfffed764>
2008a0ec:	00800034 	movhi	r2,0
2008a0f0:	108a1504 	addi	r2,r2,10324
2008a0f4:	15000015 	stw	r20,0(r2)
2008a0f8:	003f1b06 	br	20089d68 <__flash_rwdata_start+0xfffed720>
2008a0fc:	9009883a 	mov	r4,r18
2008a100:	81400204 	addi	r5,r16,8
2008a104:	0090c940 	call	20090c94 <_free_r>
2008a108:	00800034 	movhi	r2,0
2008a10c:	108b1b04 	addi	r2,r2,11372
2008a110:	10c00017 	ldw	r3,0(r2)
2008a114:	003f3906 	br	20089dfc <__flash_rwdata_start+0xfffed7b4>
2008a118:	01005504 	movi	r4,340
2008a11c:	20800436 	bltu	r4,r2,2008a130 <_malloc_r+0x774>
2008a120:	3804d3fa 	srli	r2,r7,15
2008a124:	11001dc4 	addi	r4,r2,119
2008a128:	210b883a 	add	r5,r4,r4
2008a12c:	003f6206 	br	20089eb8 <__flash_rwdata_start+0xfffed870>
2008a130:	01015504 	movi	r4,1364
2008a134:	20800436 	bltu	r4,r2,2008a148 <_malloc_r+0x78c>
2008a138:	3804d4ba 	srli	r2,r7,18
2008a13c:	11001f04 	addi	r4,r2,124
2008a140:	210b883a 	add	r5,r4,r4
2008a144:	003f5c06 	br	20089eb8 <__flash_rwdata_start+0xfffed870>
2008a148:	01403f04 	movi	r5,252
2008a14c:	01001f84 	movi	r4,126
2008a150:	003f5906 	br	20089eb8 <__flash_rwdata_start+0xfffed870>
2008a154:	98800117 	ldw	r2,4(r19)
2008a158:	003fa906 	br	2008a000 <__flash_rwdata_start+0xfffed9b8>
2008a15c:	6007883a 	mov	r3,r12
2008a160:	003ea206 	br	20089bec <__flash_rwdata_start+0xfffed5a4>

2008a164 <memcmp>:
2008a164:	01c000c4 	movi	r7,3
2008a168:	3980192e 	bgeu	r7,r6,2008a1d0 <memcmp+0x6c>
2008a16c:	2144b03a 	or	r2,r4,r5
2008a170:	11c4703a 	and	r2,r2,r7
2008a174:	10000f26 	beq	r2,zero,2008a1b4 <memcmp+0x50>
2008a178:	20800003 	ldbu	r2,0(r4)
2008a17c:	28c00003 	ldbu	r3,0(r5)
2008a180:	10c0151e 	bne	r2,r3,2008a1d8 <memcmp+0x74>
2008a184:	31bfff84 	addi	r6,r6,-2
2008a188:	01ffffc4 	movi	r7,-1
2008a18c:	00000406 	br	2008a1a0 <memcmp+0x3c>
2008a190:	20800003 	ldbu	r2,0(r4)
2008a194:	28c00003 	ldbu	r3,0(r5)
2008a198:	31bfffc4 	addi	r6,r6,-1
2008a19c:	10c00e1e 	bne	r2,r3,2008a1d8 <memcmp+0x74>
2008a1a0:	21000044 	addi	r4,r4,1
2008a1a4:	29400044 	addi	r5,r5,1
2008a1a8:	31fff91e 	bne	r6,r7,2008a190 <__flash_rwdata_start+0xfffedb48>
2008a1ac:	0005883a 	mov	r2,zero
2008a1b0:	f800283a 	ret
2008a1b4:	20c00017 	ldw	r3,0(r4)
2008a1b8:	28800017 	ldw	r2,0(r5)
2008a1bc:	1880041e 	bne	r3,r2,2008a1d0 <memcmp+0x6c>
2008a1c0:	31bfff04 	addi	r6,r6,-4
2008a1c4:	21000104 	addi	r4,r4,4
2008a1c8:	29400104 	addi	r5,r5,4
2008a1cc:	39bff936 	bltu	r7,r6,2008a1b4 <__flash_rwdata_start+0xfffedb6c>
2008a1d0:	303fe91e 	bne	r6,zero,2008a178 <__flash_rwdata_start+0xfffedb30>
2008a1d4:	003ff506 	br	2008a1ac <__flash_rwdata_start+0xfffedb64>
2008a1d8:	10c5c83a 	sub	r2,r2,r3
2008a1dc:	f800283a 	ret

2008a1e0 <memcpy>:
2008a1e0:	deffff04 	addi	sp,sp,-4
2008a1e4:	dc000015 	stw	r16,0(sp)
2008a1e8:	00c003c4 	movi	r3,15
2008a1ec:	2005883a 	mov	r2,r4
2008a1f0:	1980432e 	bgeu	r3,r6,2008a300 <memcpy+0x120>
2008a1f4:	2146b03a 	or	r3,r4,r5
2008a1f8:	18c000cc 	andi	r3,r3,3
2008a1fc:	1800421e 	bne	r3,zero,2008a308 <memcpy+0x128>
2008a200:	343ffc04 	addi	r16,r6,-16
2008a204:	8020d13a 	srli	r16,r16,4
2008a208:	28c00104 	addi	r3,r5,4
2008a20c:	23400104 	addi	r13,r4,4
2008a210:	801e913a 	slli	r15,r16,4
2008a214:	2b000204 	addi	r12,r5,8
2008a218:	22c00204 	addi	r11,r4,8
2008a21c:	7bc00504 	addi	r15,r15,20
2008a220:	2a800304 	addi	r10,r5,12
2008a224:	22400304 	addi	r9,r4,12
2008a228:	2bdf883a 	add	r15,r5,r15
2008a22c:	2811883a 	mov	r8,r5
2008a230:	200f883a 	mov	r7,r4
2008a234:	41000017 	ldw	r4,0(r8)
2008a238:	39c00404 	addi	r7,r7,16
2008a23c:	18c00404 	addi	r3,r3,16
2008a240:	393ffc15 	stw	r4,-16(r7)
2008a244:	1bbffc17 	ldw	r14,-16(r3)
2008a248:	6b400404 	addi	r13,r13,16
2008a24c:	5ac00404 	addi	r11,r11,16
2008a250:	6bbffc15 	stw	r14,-16(r13)
2008a254:	63800017 	ldw	r14,0(r12)
2008a258:	4a400404 	addi	r9,r9,16
2008a25c:	42000404 	addi	r8,r8,16
2008a260:	5bbffc15 	stw	r14,-16(r11)
2008a264:	53800017 	ldw	r14,0(r10)
2008a268:	63000404 	addi	r12,r12,16
2008a26c:	52800404 	addi	r10,r10,16
2008a270:	4bbffc15 	stw	r14,-16(r9)
2008a274:	1bffef1e 	bne	r3,r15,2008a234 <__flash_rwdata_start+0xfffedbec>
2008a278:	81c00044 	addi	r7,r16,1
2008a27c:	380e913a 	slli	r7,r7,4
2008a280:	310003cc 	andi	r4,r6,15
2008a284:	02c000c4 	movi	r11,3
2008a288:	11c7883a 	add	r3,r2,r7
2008a28c:	29cb883a 	add	r5,r5,r7
2008a290:	59001f2e 	bgeu	r11,r4,2008a310 <memcpy+0x130>
2008a294:	1813883a 	mov	r9,r3
2008a298:	2811883a 	mov	r8,r5
2008a29c:	200f883a 	mov	r7,r4
2008a2a0:	42800017 	ldw	r10,0(r8)
2008a2a4:	4a400104 	addi	r9,r9,4
2008a2a8:	39ffff04 	addi	r7,r7,-4
2008a2ac:	4abfff15 	stw	r10,-4(r9)
2008a2b0:	42000104 	addi	r8,r8,4
2008a2b4:	59fffa36 	bltu	r11,r7,2008a2a0 <__flash_rwdata_start+0xfffedc58>
2008a2b8:	213fff04 	addi	r4,r4,-4
2008a2bc:	2008d0ba 	srli	r4,r4,2
2008a2c0:	318000cc 	andi	r6,r6,3
2008a2c4:	21000044 	addi	r4,r4,1
2008a2c8:	2109883a 	add	r4,r4,r4
2008a2cc:	2109883a 	add	r4,r4,r4
2008a2d0:	1907883a 	add	r3,r3,r4
2008a2d4:	290b883a 	add	r5,r5,r4
2008a2d8:	30000626 	beq	r6,zero,2008a2f4 <memcpy+0x114>
2008a2dc:	198d883a 	add	r6,r3,r6
2008a2e0:	29c00003 	ldbu	r7,0(r5)
2008a2e4:	18c00044 	addi	r3,r3,1
2008a2e8:	29400044 	addi	r5,r5,1
2008a2ec:	19ffffc5 	stb	r7,-1(r3)
2008a2f0:	19bffb1e 	bne	r3,r6,2008a2e0 <__flash_rwdata_start+0xfffedc98>
2008a2f4:	dc000017 	ldw	r16,0(sp)
2008a2f8:	dec00104 	addi	sp,sp,4
2008a2fc:	f800283a 	ret
2008a300:	2007883a 	mov	r3,r4
2008a304:	003ff406 	br	2008a2d8 <__flash_rwdata_start+0xfffedc90>
2008a308:	2007883a 	mov	r3,r4
2008a30c:	003ff306 	br	2008a2dc <__flash_rwdata_start+0xfffedc94>
2008a310:	200d883a 	mov	r6,r4
2008a314:	003ff006 	br	2008a2d8 <__flash_rwdata_start+0xfffedc90>

2008a318 <memset>:
2008a318:	20c000cc 	andi	r3,r4,3
2008a31c:	2005883a 	mov	r2,r4
2008a320:	18004326 	beq	r3,zero,2008a430 <memset+0x118>
2008a324:	31ffffc4 	addi	r7,r6,-1
2008a328:	30004026 	beq	r6,zero,2008a42c <memset+0x114>
2008a32c:	2813883a 	mov	r9,r5
2008a330:	200d883a 	mov	r6,r4
2008a334:	2007883a 	mov	r3,r4
2008a338:	00000406 	br	2008a34c <memset+0x34>
2008a33c:	3a3fffc4 	addi	r8,r7,-1
2008a340:	31800044 	addi	r6,r6,1
2008a344:	38003926 	beq	r7,zero,2008a42c <memset+0x114>
2008a348:	400f883a 	mov	r7,r8
2008a34c:	18c00044 	addi	r3,r3,1
2008a350:	32400005 	stb	r9,0(r6)
2008a354:	1a0000cc 	andi	r8,r3,3
2008a358:	403ff81e 	bne	r8,zero,2008a33c <__flash_rwdata_start+0xfffedcf4>
2008a35c:	010000c4 	movi	r4,3
2008a360:	21c02d2e 	bgeu	r4,r7,2008a418 <memset+0x100>
2008a364:	29803fcc 	andi	r6,r5,255
2008a368:	3008923a 	slli	r4,r6,8
2008a36c:	218cb03a 	or	r6,r4,r6
2008a370:	3008943a 	slli	r4,r6,16
2008a374:	218cb03a 	or	r6,r4,r6
2008a378:	010003c4 	movi	r4,15
2008a37c:	21c0182e 	bgeu	r4,r7,2008a3e0 <memset+0xc8>
2008a380:	3b3ffc04 	addi	r12,r7,-16
2008a384:	6018d13a 	srli	r12,r12,4
2008a388:	1a000104 	addi	r8,r3,4
2008a38c:	1ac00204 	addi	r11,r3,8
2008a390:	6008913a 	slli	r4,r12,4
2008a394:	1a800304 	addi	r10,r3,12
2008a398:	1813883a 	mov	r9,r3
2008a39c:	21000504 	addi	r4,r4,20
2008a3a0:	1909883a 	add	r4,r3,r4
2008a3a4:	49800015 	stw	r6,0(r9)
2008a3a8:	41800015 	stw	r6,0(r8)
2008a3ac:	59800015 	stw	r6,0(r11)
2008a3b0:	51800015 	stw	r6,0(r10)
2008a3b4:	42000404 	addi	r8,r8,16
2008a3b8:	4a400404 	addi	r9,r9,16
2008a3bc:	5ac00404 	addi	r11,r11,16
2008a3c0:	52800404 	addi	r10,r10,16
2008a3c4:	413ff71e 	bne	r8,r4,2008a3a4 <__flash_rwdata_start+0xfffedd5c>
2008a3c8:	63000044 	addi	r12,r12,1
2008a3cc:	6018913a 	slli	r12,r12,4
2008a3d0:	39c003cc 	andi	r7,r7,15
2008a3d4:	010000c4 	movi	r4,3
2008a3d8:	1b07883a 	add	r3,r3,r12
2008a3dc:	21c00e2e 	bgeu	r4,r7,2008a418 <memset+0x100>
2008a3e0:	1813883a 	mov	r9,r3
2008a3e4:	3811883a 	mov	r8,r7
2008a3e8:	010000c4 	movi	r4,3
2008a3ec:	49800015 	stw	r6,0(r9)
2008a3f0:	423fff04 	addi	r8,r8,-4
2008a3f4:	4a400104 	addi	r9,r9,4
2008a3f8:	223ffc36 	bltu	r4,r8,2008a3ec <__flash_rwdata_start+0xfffedda4>
2008a3fc:	393fff04 	addi	r4,r7,-4
2008a400:	2008d0ba 	srli	r4,r4,2
2008a404:	39c000cc 	andi	r7,r7,3
2008a408:	21000044 	addi	r4,r4,1
2008a40c:	2109883a 	add	r4,r4,r4
2008a410:	2109883a 	add	r4,r4,r4
2008a414:	1907883a 	add	r3,r3,r4
2008a418:	38000426 	beq	r7,zero,2008a42c <memset+0x114>
2008a41c:	19cf883a 	add	r7,r3,r7
2008a420:	19400005 	stb	r5,0(r3)
2008a424:	18c00044 	addi	r3,r3,1
2008a428:	19fffd1e 	bne	r3,r7,2008a420 <__flash_rwdata_start+0xfffeddd8>
2008a42c:	f800283a 	ret
2008a430:	2007883a 	mov	r3,r4
2008a434:	300f883a 	mov	r7,r6
2008a438:	003fc806 	br	2008a35c <__flash_rwdata_start+0xfffedd14>

2008a43c <_printf_r>:
2008a43c:	defffd04 	addi	sp,sp,-12
2008a440:	dfc00015 	stw	ra,0(sp)
2008a444:	d9800115 	stw	r6,4(sp)
2008a448:	d9c00215 	stw	r7,8(sp)
2008a44c:	280d883a 	mov	r6,r5
2008a450:	21400217 	ldw	r5,8(r4)
2008a454:	d9c00104 	addi	r7,sp,4
2008a458:	008c7cc0 	call	2008c7cc <___vfprintf_internal_r>
2008a45c:	dfc00017 	ldw	ra,0(sp)
2008a460:	dec00304 	addi	sp,sp,12
2008a464:	f800283a 	ret

2008a468 <printf>:
2008a468:	defffc04 	addi	sp,sp,-16
2008a46c:	dfc00015 	stw	ra,0(sp)
2008a470:	d9400115 	stw	r5,4(sp)
2008a474:	d9800215 	stw	r6,8(sp)
2008a478:	d9c00315 	stw	r7,12(sp)
2008a47c:	00800034 	movhi	r2,0
2008a480:	108a1404 	addi	r2,r2,10320
2008a484:	10800017 	ldw	r2,0(r2)
2008a488:	200b883a 	mov	r5,r4
2008a48c:	d9800104 	addi	r6,sp,4
2008a490:	11000217 	ldw	r4,8(r2)
2008a494:	008e71c0 	call	2008e71c <__vfprintf_internal>
2008a498:	dfc00017 	ldw	ra,0(sp)
2008a49c:	dec00404 	addi	sp,sp,16
2008a4a0:	f800283a 	ret

2008a4a4 <_putchar_r>:
2008a4a4:	21800217 	ldw	r6,8(r4)
2008a4a8:	0092a481 	jmpi	20092a48 <_putc_r>

2008a4ac <putchar>:
2008a4ac:	00800034 	movhi	r2,0
2008a4b0:	108a1404 	addi	r2,r2,10320
2008a4b4:	200b883a 	mov	r5,r4
2008a4b8:	11000017 	ldw	r4,0(r2)
2008a4bc:	21800217 	ldw	r6,8(r4)
2008a4c0:	0092a481 	jmpi	20092a48 <_putc_r>

2008a4c4 <_puts_r>:
2008a4c4:	defff604 	addi	sp,sp,-40
2008a4c8:	dc000715 	stw	r16,28(sp)
2008a4cc:	2021883a 	mov	r16,r4
2008a4d0:	2809883a 	mov	r4,r5
2008a4d4:	dc400815 	stw	r17,32(sp)
2008a4d8:	dfc00915 	stw	ra,36(sp)
2008a4dc:	2823883a 	mov	r17,r5
2008a4e0:	008a73c0 	call	2008a73c <strlen>
2008a4e4:	81400217 	ldw	r5,8(r16)
2008a4e8:	11000044 	addi	r4,r2,1
2008a4ec:	d8800115 	stw	r2,4(sp)
2008a4f0:	00800034 	movhi	r2,0
2008a4f4:	2980030b 	ldhu	r6,12(r5)
2008a4f8:	10801c04 	addi	r2,r2,112
2008a4fc:	d8800215 	stw	r2,8(sp)
2008a500:	00800044 	movi	r2,1
2008a504:	d8800315 	stw	r2,12(sp)
2008a508:	00800084 	movi	r2,2
2008a50c:	d8800515 	stw	r2,20(sp)
2008a510:	dc400015 	stw	r17,0(sp)
2008a514:	d9000615 	stw	r4,24(sp)
2008a518:	dec00415 	stw	sp,16(sp)
2008a51c:	3088000c 	andi	r2,r6,8192
2008a520:	1000061e 	bne	r2,zero,2008a53c <_puts_r+0x78>
2008a524:	29001917 	ldw	r4,100(r5)
2008a528:	00b7ffc4 	movi	r2,-8193
2008a52c:	31880014 	ori	r6,r6,8192
2008a530:	2084703a 	and	r2,r4,r2
2008a534:	2980030d 	sth	r6,12(r5)
2008a538:	28801915 	stw	r2,100(r5)
2008a53c:	8009883a 	mov	r4,r16
2008a540:	d9800404 	addi	r6,sp,16
2008a544:	0090f840 	call	20090f84 <__sfvwrite_r>
2008a548:	1000061e 	bne	r2,zero,2008a564 <_puts_r+0xa0>
2008a54c:	00800284 	movi	r2,10
2008a550:	dfc00917 	ldw	ra,36(sp)
2008a554:	dc400817 	ldw	r17,32(sp)
2008a558:	dc000717 	ldw	r16,28(sp)
2008a55c:	dec00a04 	addi	sp,sp,40
2008a560:	f800283a 	ret
2008a564:	00bfffc4 	movi	r2,-1
2008a568:	003ff906 	br	2008a550 <__flash_rwdata_start+0xfffedf08>

2008a56c <puts>:
2008a56c:	00800034 	movhi	r2,0
2008a570:	108a1404 	addi	r2,r2,10320
2008a574:	200b883a 	mov	r5,r4
2008a578:	11000017 	ldw	r4,0(r2)
2008a57c:	008a4c41 	jmpi	2008a4c4 <_puts_r>

2008a580 <_sbrk_r>:
2008a580:	defffd04 	addi	sp,sp,-12
2008a584:	dc000015 	stw	r16,0(sp)
2008a588:	04000034 	movhi	r16,0
2008a58c:	dc400115 	stw	r17,4(sp)
2008a590:	840a2e04 	addi	r16,r16,10424
2008a594:	2023883a 	mov	r17,r4
2008a598:	2809883a 	mov	r4,r5
2008a59c:	dfc00215 	stw	ra,8(sp)
2008a5a0:	80000015 	stw	zero,0(r16)
2008a5a4:	0097b880 	call	20097b88 <sbrk>
2008a5a8:	00ffffc4 	movi	r3,-1
2008a5ac:	10c00526 	beq	r2,r3,2008a5c4 <_sbrk_r+0x44>
2008a5b0:	dfc00217 	ldw	ra,8(sp)
2008a5b4:	dc400117 	ldw	r17,4(sp)
2008a5b8:	dc000017 	ldw	r16,0(sp)
2008a5bc:	dec00304 	addi	sp,sp,12
2008a5c0:	f800283a 	ret
2008a5c4:	80c00017 	ldw	r3,0(r16)
2008a5c8:	183ff926 	beq	r3,zero,2008a5b0 <__flash_rwdata_start+0xfffedf68>
2008a5cc:	88c00015 	stw	r3,0(r17)
2008a5d0:	003ff706 	br	2008a5b0 <__flash_rwdata_start+0xfffedf68>

2008a5d4 <_sprintf_r>:
2008a5d4:	deffe404 	addi	sp,sp,-112
2008a5d8:	2807883a 	mov	r3,r5
2008a5dc:	dfc01a15 	stw	ra,104(sp)
2008a5e0:	d9c01b15 	stw	r7,108(sp)
2008a5e4:	00a00034 	movhi	r2,32768
2008a5e8:	10bfffc4 	addi	r2,r2,-1
2008a5ec:	02008204 	movi	r8,520
2008a5f0:	d8800215 	stw	r2,8(sp)
2008a5f4:	d8800515 	stw	r2,20(sp)
2008a5f8:	d80b883a 	mov	r5,sp
2008a5fc:	d9c01b04 	addi	r7,sp,108
2008a600:	00bfffc4 	movi	r2,-1
2008a604:	d8c00015 	stw	r3,0(sp)
2008a608:	d8c00415 	stw	r3,16(sp)
2008a60c:	da00030d 	sth	r8,12(sp)
2008a610:	d880038d 	sth	r2,14(sp)
2008a614:	008a83c0 	call	2008a83c <___svfprintf_internal_r>
2008a618:	d8c00017 	ldw	r3,0(sp)
2008a61c:	18000005 	stb	zero,0(r3)
2008a620:	dfc01a17 	ldw	ra,104(sp)
2008a624:	dec01c04 	addi	sp,sp,112
2008a628:	f800283a 	ret

2008a62c <sprintf>:
2008a62c:	deffe304 	addi	sp,sp,-116
2008a630:	2007883a 	mov	r3,r4
2008a634:	dfc01a15 	stw	ra,104(sp)
2008a638:	d9801b15 	stw	r6,108(sp)
2008a63c:	d9c01c15 	stw	r7,112(sp)
2008a640:	01000034 	movhi	r4,0
2008a644:	210a1404 	addi	r4,r4,10320
2008a648:	21000017 	ldw	r4,0(r4)
2008a64c:	00a00034 	movhi	r2,32768
2008a650:	10bfffc4 	addi	r2,r2,-1
2008a654:	280d883a 	mov	r6,r5
2008a658:	02008204 	movi	r8,520
2008a65c:	d8800215 	stw	r2,8(sp)
2008a660:	d8800515 	stw	r2,20(sp)
2008a664:	d80b883a 	mov	r5,sp
2008a668:	d9c01b04 	addi	r7,sp,108
2008a66c:	00bfffc4 	movi	r2,-1
2008a670:	d8c00015 	stw	r3,0(sp)
2008a674:	d8c00415 	stw	r3,16(sp)
2008a678:	da00030d 	sth	r8,12(sp)
2008a67c:	d880038d 	sth	r2,14(sp)
2008a680:	008a83c0 	call	2008a83c <___svfprintf_internal_r>
2008a684:	d8c00017 	ldw	r3,0(sp)
2008a688:	18000005 	stb	zero,0(r3)
2008a68c:	dfc01a17 	ldw	ra,104(sp)
2008a690:	dec01d04 	addi	sp,sp,116
2008a694:	f800283a 	ret

2008a698 <strcmp>:
2008a698:	2144b03a 	or	r2,r4,r5
2008a69c:	108000cc 	andi	r2,r2,3
2008a6a0:	1000171e 	bne	r2,zero,2008a700 <strcmp+0x68>
2008a6a4:	20800017 	ldw	r2,0(r4)
2008a6a8:	28c00017 	ldw	r3,0(r5)
2008a6ac:	10c0141e 	bne	r2,r3,2008a700 <strcmp+0x68>
2008a6b0:	027fbff4 	movhi	r9,65279
2008a6b4:	4a7fbfc4 	addi	r9,r9,-257
2008a6b8:	0086303a 	nor	r3,zero,r2
2008a6bc:	02202074 	movhi	r8,32897
2008a6c0:	1245883a 	add	r2,r2,r9
2008a6c4:	42202004 	addi	r8,r8,-32640
2008a6c8:	10c4703a 	and	r2,r2,r3
2008a6cc:	1204703a 	and	r2,r2,r8
2008a6d0:	10000226 	beq	r2,zero,2008a6dc <strcmp+0x44>
2008a6d4:	00001706 	br	2008a734 <strcmp+0x9c>
2008a6d8:	1000161e 	bne	r2,zero,2008a734 <strcmp+0x9c>
2008a6dc:	21000104 	addi	r4,r4,4
2008a6e0:	20c00017 	ldw	r3,0(r4)
2008a6e4:	29400104 	addi	r5,r5,4
2008a6e8:	29800017 	ldw	r6,0(r5)
2008a6ec:	1a4f883a 	add	r7,r3,r9
2008a6f0:	00c4303a 	nor	r2,zero,r3
2008a6f4:	3884703a 	and	r2,r7,r2
2008a6f8:	1204703a 	and	r2,r2,r8
2008a6fc:	19bff626 	beq	r3,r6,2008a6d8 <__flash_rwdata_start+0xfffee090>
2008a700:	20800007 	ldb	r2,0(r4)
2008a704:	1000051e 	bne	r2,zero,2008a71c <strcmp+0x84>
2008a708:	00000606 	br	2008a724 <strcmp+0x8c>
2008a70c:	21000044 	addi	r4,r4,1
2008a710:	20800007 	ldb	r2,0(r4)
2008a714:	29400044 	addi	r5,r5,1
2008a718:	10000226 	beq	r2,zero,2008a724 <strcmp+0x8c>
2008a71c:	28c00007 	ldb	r3,0(r5)
2008a720:	10fffa26 	beq	r2,r3,2008a70c <__flash_rwdata_start+0xfffee0c4>
2008a724:	20800003 	ldbu	r2,0(r4)
2008a728:	28c00003 	ldbu	r3,0(r5)
2008a72c:	10c5c83a 	sub	r2,r2,r3
2008a730:	f800283a 	ret
2008a734:	0005883a 	mov	r2,zero
2008a738:	f800283a 	ret

2008a73c <strlen>:
2008a73c:	208000cc 	andi	r2,r4,3
2008a740:	10002026 	beq	r2,zero,2008a7c4 <strlen+0x88>
2008a744:	20800007 	ldb	r2,0(r4)
2008a748:	10002026 	beq	r2,zero,2008a7cc <strlen+0x90>
2008a74c:	2005883a 	mov	r2,r4
2008a750:	00000206 	br	2008a75c <strlen+0x20>
2008a754:	10c00007 	ldb	r3,0(r2)
2008a758:	18001826 	beq	r3,zero,2008a7bc <strlen+0x80>
2008a75c:	10800044 	addi	r2,r2,1
2008a760:	10c000cc 	andi	r3,r2,3
2008a764:	183ffb1e 	bne	r3,zero,2008a754 <__flash_rwdata_start+0xfffee10c>
2008a768:	10c00017 	ldw	r3,0(r2)
2008a76c:	01ffbff4 	movhi	r7,65279
2008a770:	39ffbfc4 	addi	r7,r7,-257
2008a774:	00ca303a 	nor	r5,zero,r3
2008a778:	01a02074 	movhi	r6,32897
2008a77c:	19c7883a 	add	r3,r3,r7
2008a780:	31a02004 	addi	r6,r6,-32640
2008a784:	1946703a 	and	r3,r3,r5
2008a788:	1986703a 	and	r3,r3,r6
2008a78c:	1800091e 	bne	r3,zero,2008a7b4 <strlen+0x78>
2008a790:	10800104 	addi	r2,r2,4
2008a794:	10c00017 	ldw	r3,0(r2)
2008a798:	19cb883a 	add	r5,r3,r7
2008a79c:	00c6303a 	nor	r3,zero,r3
2008a7a0:	28c6703a 	and	r3,r5,r3
2008a7a4:	1986703a 	and	r3,r3,r6
2008a7a8:	183ff926 	beq	r3,zero,2008a790 <__flash_rwdata_start+0xfffee148>
2008a7ac:	00000106 	br	2008a7b4 <strlen+0x78>
2008a7b0:	10800044 	addi	r2,r2,1
2008a7b4:	10c00007 	ldb	r3,0(r2)
2008a7b8:	183ffd1e 	bne	r3,zero,2008a7b0 <__flash_rwdata_start+0xfffee168>
2008a7bc:	1105c83a 	sub	r2,r2,r4
2008a7c0:	f800283a 	ret
2008a7c4:	2005883a 	mov	r2,r4
2008a7c8:	003fe706 	br	2008a768 <__flash_rwdata_start+0xfffee120>
2008a7cc:	0005883a 	mov	r2,zero
2008a7d0:	f800283a 	ret

2008a7d4 <strrchr>:
2008a7d4:	defffd04 	addi	sp,sp,-12
2008a7d8:	dc000015 	stw	r16,0(sp)
2008a7dc:	dfc00215 	stw	ra,8(sp)
2008a7e0:	dc400115 	stw	r17,4(sp)
2008a7e4:	2821883a 	mov	r16,r5
2008a7e8:	28000f26 	beq	r5,zero,2008a828 <strrchr+0x54>
2008a7ec:	2007883a 	mov	r3,r4
2008a7f0:	0023883a 	mov	r17,zero
2008a7f4:	00000206 	br	2008a800 <strrchr+0x2c>
2008a7f8:	10c00044 	addi	r3,r2,1
2008a7fc:	1023883a 	mov	r17,r2
2008a800:	1809883a 	mov	r4,r3
2008a804:	800b883a 	mov	r5,r16
2008a808:	00932cc0 	call	200932cc <strchr>
2008a80c:	103ffa1e 	bne	r2,zero,2008a7f8 <__flash_rwdata_start+0xfffee1b0>
2008a810:	8805883a 	mov	r2,r17
2008a814:	dfc00217 	ldw	ra,8(sp)
2008a818:	dc400117 	ldw	r17,4(sp)
2008a81c:	dc000017 	ldw	r16,0(sp)
2008a820:	dec00304 	addi	sp,sp,12
2008a824:	f800283a 	ret
2008a828:	dfc00217 	ldw	ra,8(sp)
2008a82c:	dc400117 	ldw	r17,4(sp)
2008a830:	dc000017 	ldw	r16,0(sp)
2008a834:	dec00304 	addi	sp,sp,12
2008a838:	00932cc1 	jmpi	200932cc <strchr>

2008a83c <___svfprintf_internal_r>:
2008a83c:	deffb504 	addi	sp,sp,-300
2008a840:	dfc04a15 	stw	ra,296(sp)
2008a844:	ddc04815 	stw	r23,288(sp)
2008a848:	d9002f15 	stw	r4,188(sp)
2008a84c:	282f883a 	mov	r23,r5
2008a850:	d9802915 	stw	r6,164(sp)
2008a854:	d9c02d15 	stw	r7,180(sp)
2008a858:	df004915 	stw	fp,292(sp)
2008a85c:	dd804715 	stw	r22,284(sp)
2008a860:	dd404615 	stw	r21,280(sp)
2008a864:	dd004515 	stw	r20,276(sp)
2008a868:	dcc04415 	stw	r19,272(sp)
2008a86c:	dc804315 	stw	r18,268(sp)
2008a870:	dc404215 	stw	r17,264(sp)
2008a874:	dc004115 	stw	r16,260(sp)
2008a878:	00916780 	call	20091678 <_localeconv_r>
2008a87c:	10800017 	ldw	r2,0(r2)
2008a880:	1009883a 	mov	r4,r2
2008a884:	d8803515 	stw	r2,212(sp)
2008a888:	008a73c0 	call	2008a73c <strlen>
2008a88c:	d8803915 	stw	r2,228(sp)
2008a890:	b880030b 	ldhu	r2,12(r23)
2008a894:	1080200c 	andi	r2,r2,128
2008a898:	10000226 	beq	r2,zero,2008a8a4 <___svfprintf_internal_r+0x68>
2008a89c:	b8800417 	ldw	r2,16(r23)
2008a8a0:	10065f26 	beq	r2,zero,2008c220 <___svfprintf_internal_r+0x19e4>
2008a8a4:	db001dc4 	addi	r12,sp,119
2008a8a8:	dd801e04 	addi	r22,sp,120
2008a8ac:	d8800404 	addi	r2,sp,16
2008a8b0:	05000034 	movhi	r20,0
2008a8b4:	b317c83a 	sub	r11,r22,r12
2008a8b8:	a5018b84 	addi	r20,r20,1582
2008a8bc:	db002815 	stw	r12,160(sp)
2008a8c0:	d8801e15 	stw	r2,120(sp)
2008a8c4:	d8002015 	stw	zero,128(sp)
2008a8c8:	d8001f15 	stw	zero,124(sp)
2008a8cc:	d8003315 	stw	zero,204(sp)
2008a8d0:	d8003715 	stw	zero,220(sp)
2008a8d4:	d8003815 	stw	zero,224(sp)
2008a8d8:	1011883a 	mov	r8,r2
2008a8dc:	d8003b15 	stw	zero,236(sp)
2008a8e0:	d8003a15 	stw	zero,232(sp)
2008a8e4:	d8003015 	stw	zero,192(sp)
2008a8e8:	dac03d15 	stw	r11,244(sp)
2008a8ec:	db002917 	ldw	r12,164(sp)
2008a8f0:	60800007 	ldb	r2,0(r12)
2008a8f4:	1000ab26 	beq	r2,zero,2008aba4 <___svfprintf_internal_r+0x368>
2008a8f8:	00c00944 	movi	r3,37
2008a8fc:	10c0a926 	beq	r2,r3,2008aba4 <___svfprintf_internal_r+0x368>
2008a900:	6021883a 	mov	r16,r12
2008a904:	00000106 	br	2008a90c <___svfprintf_internal_r+0xd0>
2008a908:	10c08426 	beq	r2,r3,2008ab1c <___svfprintf_internal_r+0x2e0>
2008a90c:	84000044 	addi	r16,r16,1
2008a910:	80800007 	ldb	r2,0(r16)
2008a914:	103ffc1e 	bne	r2,zero,2008a908 <__flash_rwdata_start+0xfffee2c0>
2008a918:	dac02917 	ldw	r11,164(sp)
2008a91c:	82e3c83a 	sub	r17,r16,r11
2008a920:	88000f26 	beq	r17,zero,2008a960 <___svfprintf_internal_r+0x124>
2008a924:	d8c02017 	ldw	r3,128(sp)
2008a928:	d8801f17 	ldw	r2,124(sp)
2008a92c:	dac02917 	ldw	r11,164(sp)
2008a930:	1c47883a 	add	r3,r3,r17
2008a934:	10800044 	addi	r2,r2,1
2008a938:	d8c02015 	stw	r3,128(sp)
2008a93c:	42c00015 	stw	r11,0(r8)
2008a940:	44400115 	stw	r17,4(r8)
2008a944:	d8801f15 	stw	r2,124(sp)
2008a948:	00c001c4 	movi	r3,7
2008a94c:	18807616 	blt	r3,r2,2008ab28 <___svfprintf_internal_r+0x2ec>
2008a950:	42000204 	addi	r8,r8,8
2008a954:	db003017 	ldw	r12,192(sp)
2008a958:	6459883a 	add	r12,r12,r17
2008a95c:	db003015 	stw	r12,192(sp)
2008a960:	80800007 	ldb	r2,0(r16)
2008a964:	10007726 	beq	r2,zero,2008ab44 <___svfprintf_internal_r+0x308>
2008a968:	80800044 	addi	r2,r16,1
2008a96c:	84000047 	ldb	r16,1(r16)
2008a970:	d8002785 	stb	zero,158(sp)
2008a974:	000d883a 	mov	r6,zero
2008a978:	027fffc4 	movi	r9,-1
2008a97c:	d8002e15 	stw	zero,184(sp)
2008a980:	0023883a 	mov	r17,zero
2008a984:	01001604 	movi	r4,88
2008a988:	01400244 	movi	r5,9
2008a98c:	02800a84 	movi	r10,42
2008a990:	01c01b04 	movi	r7,108
2008a994:	10c00044 	addi	r3,r2,1
2008a998:	80bff804 	addi	r2,r16,-32
2008a99c:	2082e636 	bltu	r4,r2,2008b538 <___svfprintf_internal_r+0xcfc>
2008a9a0:	100490ba 	slli	r2,r2,2
2008a9a4:	02c80274 	movhi	r11,8201
2008a9a8:	5aea6e04 	addi	r11,r11,-22088
2008a9ac:	12c5883a 	add	r2,r2,r11
2008a9b0:	10800017 	ldw	r2,0(r2)
2008a9b4:	1000683a 	jmp	r2
2008a9b8:	2008b318 	cmpnei	zero,r4,8908
2008a9bc:	2008b538 	rdprs	zero,r4,8916
2008a9c0:	2008b538 	rdprs	zero,r4,8916
2008a9c4:	2008b338 	rdprs	zero,r4,8908
2008a9c8:	2008b538 	rdprs	zero,r4,8916
2008a9cc:	2008b538 	rdprs	zero,r4,8916
2008a9d0:	2008b538 	rdprs	zero,r4,8916
2008a9d4:	2008b538 	rdprs	zero,r4,8916
2008a9d8:	2008b538 	rdprs	zero,r4,8916
2008a9dc:	2008b538 	rdprs	zero,r4,8916
2008a9e0:	2008b348 	cmpgei	zero,r4,8909
2008a9e4:	2008b374 	orhi	zero,r4,8909
2008a9e8:	2008b538 	rdprs	zero,r4,8916
2008a9ec:	2008abac 	andhi	zero,r4,8878
2008a9f0:	2008abbc 	xorhi	zero,r4,8878
2008a9f4:	2008b538 	rdprs	zero,r4,8916
2008a9f8:	2008abfc 	xorhi	zero,r4,8879
2008a9fc:	2008b1dc 	xori	zero,r4,8903
2008aa00:	2008b1dc 	xori	zero,r4,8903
2008aa04:	2008b1dc 	xori	zero,r4,8903
2008aa08:	2008b1dc 	xori	zero,r4,8903
2008aa0c:	2008b1dc 	xori	zero,r4,8903
2008aa10:	2008b1dc 	xori	zero,r4,8903
2008aa14:	2008b1dc 	xori	zero,r4,8903
2008aa18:	2008b1dc 	xori	zero,r4,8903
2008aa1c:	2008b1dc 	xori	zero,r4,8903
2008aa20:	2008b538 	rdprs	zero,r4,8916
2008aa24:	2008b538 	rdprs	zero,r4,8916
2008aa28:	2008b538 	rdprs	zero,r4,8916
2008aa2c:	2008b538 	rdprs	zero,r4,8916
2008aa30:	2008b538 	rdprs	zero,r4,8916
2008aa34:	2008b538 	rdprs	zero,r4,8916
2008aa38:	2008b538 	rdprs	zero,r4,8916
2008aa3c:	2008b538 	rdprs	zero,r4,8916
2008aa40:	2008b538 	rdprs	zero,r4,8916
2008aa44:	2008b538 	rdprs	zero,r4,8916
2008aa48:	2008ac0c 	andi	zero,r4,8880
2008aa4c:	2008b08c 	andi	zero,r4,8898
2008aa50:	2008b538 	rdprs	zero,r4,8916
2008aa54:	2008b08c 	andi	zero,r4,8898
2008aa58:	2008b538 	rdprs	zero,r4,8916
2008aa5c:	2008b538 	rdprs	zero,r4,8916
2008aa60:	2008b538 	rdprs	zero,r4,8916
2008aa64:	2008b538 	rdprs	zero,r4,8916
2008aa68:	2008b130 	cmpltui	zero,r4,8900
2008aa6c:	2008b538 	rdprs	zero,r4,8916
2008aa70:	2008b538 	rdprs	zero,r4,8916
2008aa74:	2008b4cc 	andi	zero,r4,8915
2008aa78:	2008b538 	rdprs	zero,r4,8916
2008aa7c:	2008b538 	rdprs	zero,r4,8916
2008aa80:	2008b538 	rdprs	zero,r4,8916
2008aa84:	2008b538 	rdprs	zero,r4,8916
2008aa88:	2008b538 	rdprs	zero,r4,8916
2008aa8c:	2008b140 	call	22008b14 <__flash_rwdata_start+0x1f6c4cc>
2008aa90:	2008b538 	rdprs	zero,r4,8916
2008aa94:	2008b538 	rdprs	zero,r4,8916
2008aa98:	2008b180 	call	22008b18 <__flash_rwdata_start+0x1f6c4d0>
2008aa9c:	2008b538 	rdprs	zero,r4,8916
2008aaa0:	2008b538 	rdprs	zero,r4,8916
2008aaa4:	2008b538 	rdprs	zero,r4,8916
2008aaa8:	2008b538 	rdprs	zero,r4,8916
2008aaac:	2008b538 	rdprs	zero,r4,8916
2008aab0:	2008b538 	rdprs	zero,r4,8916
2008aab4:	2008b538 	rdprs	zero,r4,8916
2008aab8:	2008b538 	rdprs	zero,r4,8916
2008aabc:	2008b538 	rdprs	zero,r4,8916
2008aac0:	2008b538 	rdprs	zero,r4,8916
2008aac4:	2008b424 	muli	zero,r4,8912
2008aac8:	2008b464 	muli	zero,r4,8913
2008aacc:	2008b08c 	andi	zero,r4,8898
2008aad0:	2008b08c 	andi	zero,r4,8898
2008aad4:	2008b08c 	andi	zero,r4,8898
2008aad8:	2008b384 	addi	zero,r4,8910
2008aadc:	2008b464 	muli	zero,r4,8913
2008aae0:	2008b538 	rdprs	zero,r4,8916
2008aae4:	2008b538 	rdprs	zero,r4,8916
2008aae8:	2008b394 	ori	zero,r4,8910
2008aaec:	2008b538 	rdprs	zero,r4,8916
2008aaf0:	2008b3a8 	cmpgeui	zero,r4,8910
2008aaf4:	2008b4fc 	xorhi	zero,r4,8915
2008aaf8:	2008b3dc 	xori	zero,r4,8911
2008aafc:	2008b210 	cmplti	zero,r4,8904
2008ab00:	2008b538 	rdprs	zero,r4,8916
2008ab04:	2008b220 	cmpeqi	zero,r4,8904
2008ab08:	2008b538 	rdprs	zero,r4,8916
2008ab0c:	2008b298 	cmpnei	zero,r4,8906
2008ab10:	2008b538 	rdprs	zero,r4,8916
2008ab14:	2008b538 	rdprs	zero,r4,8916
2008ab18:	2008b2d8 	cmpnei	zero,r4,8907
2008ab1c:	db002917 	ldw	r12,164(sp)
2008ab20:	8323c83a 	sub	r17,r16,r12
2008ab24:	003f7e06 	br	2008a920 <__flash_rwdata_start+0xfffee2d8>
2008ab28:	d9002f17 	ldw	r4,188(sp)
2008ab2c:	b80b883a 	mov	r5,r23
2008ab30:	b00d883a 	mov	r6,r22
2008ab34:	00934300 	call	20093430 <__ssprint_r>
2008ab38:	1000081e 	bne	r2,zero,2008ab5c <___svfprintf_internal_r+0x320>
2008ab3c:	da000404 	addi	r8,sp,16
2008ab40:	003f8406 	br	2008a954 <__flash_rwdata_start+0xfffee30c>
2008ab44:	d8802017 	ldw	r2,128(sp)
2008ab48:	10000426 	beq	r2,zero,2008ab5c <___svfprintf_internal_r+0x320>
2008ab4c:	d9002f17 	ldw	r4,188(sp)
2008ab50:	b80b883a 	mov	r5,r23
2008ab54:	d9801e04 	addi	r6,sp,120
2008ab58:	00934300 	call	20093430 <__ssprint_r>
2008ab5c:	b880030b 	ldhu	r2,12(r23)
2008ab60:	1080100c 	andi	r2,r2,64
2008ab64:	10000d1e 	bne	r2,zero,2008ab9c <___svfprintf_internal_r+0x360>
2008ab68:	d8803017 	ldw	r2,192(sp)
2008ab6c:	dfc04a17 	ldw	ra,296(sp)
2008ab70:	df004917 	ldw	fp,292(sp)
2008ab74:	ddc04817 	ldw	r23,288(sp)
2008ab78:	dd804717 	ldw	r22,284(sp)
2008ab7c:	dd404617 	ldw	r21,280(sp)
2008ab80:	dd004517 	ldw	r20,276(sp)
2008ab84:	dcc04417 	ldw	r19,272(sp)
2008ab88:	dc804317 	ldw	r18,268(sp)
2008ab8c:	dc404217 	ldw	r17,264(sp)
2008ab90:	dc004117 	ldw	r16,260(sp)
2008ab94:	dec04b04 	addi	sp,sp,300
2008ab98:	f800283a 	ret
2008ab9c:	00bfffc4 	movi	r2,-1
2008aba0:	003ff206 	br	2008ab6c <__flash_rwdata_start+0xfffee524>
2008aba4:	dc002917 	ldw	r16,164(sp)
2008aba8:	003f6d06 	br	2008a960 <__flash_rwdata_start+0xfffee318>
2008abac:	1805883a 	mov	r2,r3
2008abb0:	8c400114 	ori	r17,r17,4
2008abb4:	1c000007 	ldb	r16,0(r3)
2008abb8:	003f7606 	br	2008a994 <__flash_rwdata_start+0xfffee34c>
2008abbc:	1c000007 	ldb	r16,0(r3)
2008abc0:	18800044 	addi	r2,r3,1
2008abc4:	8286e726 	beq	r16,r10,2008c764 <___svfprintf_internal_r+0x1f28>
2008abc8:	82fff404 	addi	r11,r16,-48
2008abcc:	1007883a 	mov	r3,r2
2008abd0:	0013883a 	mov	r9,zero
2008abd4:	2aff7036 	bltu	r5,r11,2008a998 <__flash_rwdata_start+0xfffee350>
2008abd8:	1c000007 	ldb	r16,0(r3)
2008abdc:	4a4002a4 	muli	r9,r9,10
2008abe0:	18c00044 	addi	r3,r3,1
2008abe4:	5a53883a 	add	r9,r11,r9
2008abe8:	82fff404 	addi	r11,r16,-48
2008abec:	2afffa2e 	bgeu	r5,r11,2008abd8 <__flash_rwdata_start+0xfffee590>
2008abf0:	483f690e 	bge	r9,zero,2008a998 <__flash_rwdata_start+0xfffee350>
2008abf4:	027fffc4 	movi	r9,-1
2008abf8:	003f6706 	br	2008a998 <__flash_rwdata_start+0xfffee350>
2008abfc:	8c402014 	ori	r17,r17,128
2008ac00:	1805883a 	mov	r2,r3
2008ac04:	1c000007 	ldb	r16,0(r3)
2008ac08:	003f6206 	br	2008a994 <__flash_rwdata_start+0xfffee34c>
2008ac0c:	8c400414 	ori	r17,r17,16
2008ac10:	d8c02915 	stw	r3,164(sp)
2008ac14:	d9802785 	stb	r6,158(sp)
2008ac18:	8880080c 	andi	r2,r17,32
2008ac1c:	d8c02d17 	ldw	r3,180(sp)
2008ac20:	10021526 	beq	r2,zero,2008b478 <___svfprintf_internal_r+0xc3c>
2008ac24:	db002d17 	ldw	r12,180(sp)
2008ac28:	18800117 	ldw	r2,4(r3)
2008ac2c:	1cc00017 	ldw	r19,0(r3)
2008ac30:	63000204 	addi	r12,r12,8
2008ac34:	db002d15 	stw	r12,180(sp)
2008ac38:	1039883a 	mov	fp,r2
2008ac3c:	10021916 	blt	r2,zero,2008b4a4 <___svfprintf_internal_r+0xc68>
2008ac40:	dd402783 	ldbu	r21,158(sp)
2008ac44:	da403215 	stw	r9,200(sp)
2008ac48:	00800044 	movi	r2,1
2008ac4c:	9f06b03a 	or	r3,r19,fp
2008ac50:	48000216 	blt	r9,zero,2008ac5c <___svfprintf_internal_r+0x420>
2008ac54:	013fdfc4 	movi	r4,-129
2008ac58:	8922703a 	and	r17,r17,r4
2008ac5c:	1802461e 	bne	r3,zero,2008b578 <___svfprintf_internal_r+0xd3c>
2008ac60:	48035426 	beq	r9,zero,2008b9b4 <___svfprintf_internal_r+0x1178>
2008ac64:	10803fcc 	andi	r2,r2,255
2008ac68:	00c00044 	movi	r3,1
2008ac6c:	10c26726 	beq	r2,r3,2008b60c <___svfprintf_internal_r+0xdd0>
2008ac70:	00c00084 	movi	r3,2
2008ac74:	10c2ea26 	beq	r2,r3,2008b820 <___svfprintf_internal_r+0xfe4>
2008ac78:	b007883a 	mov	r3,r22
2008ac7c:	9808d0fa 	srli	r4,r19,3
2008ac80:	e00a977a 	slli	r5,fp,29
2008ac84:	e038d0fa 	srli	fp,fp,3
2008ac88:	9cc001cc 	andi	r19,r19,7
2008ac8c:	98800c04 	addi	r2,r19,48
2008ac90:	18ffffc4 	addi	r3,r3,-1
2008ac94:	2926b03a 	or	r19,r5,r4
2008ac98:	18800005 	stb	r2,0(r3)
2008ac9c:	9f08b03a 	or	r4,r19,fp
2008aca0:	203ff61e 	bne	r4,zero,2008ac7c <__flash_rwdata_start+0xfffee634>
2008aca4:	8900004c 	andi	r4,r17,1
2008aca8:	d8c03115 	stw	r3,196(sp)
2008acac:	2002ea26 	beq	r4,zero,2008b858 <___svfprintf_internal_r+0x101c>
2008acb0:	10803fcc 	andi	r2,r2,255
2008acb4:	1080201c 	xori	r2,r2,128
2008acb8:	10bfe004 	addi	r2,r2,-128
2008acbc:	01000c04 	movi	r4,48
2008acc0:	11057526 	beq	r2,r4,2008c298 <___svfprintf_internal_r+0x1a5c>
2008acc4:	dac03117 	ldw	r11,196(sp)
2008acc8:	193fffc5 	stb	r4,-1(r3)
2008accc:	5affffc4 	addi	r11,r11,-1
2008acd0:	dac03115 	stw	r11,196(sp)
2008acd4:	b2e5c83a 	sub	r18,r22,r11
2008acd8:	9005883a 	mov	r2,r18
2008acdc:	9240010e 	bge	r18,r9,2008ace4 <___svfprintf_internal_r+0x4a8>
2008ace0:	4805883a 	mov	r2,r9
2008ace4:	d8802a15 	stw	r2,168(sp)
2008ace8:	d8003415 	stw	zero,208(sp)
2008acec:	a8803fcc 	andi	r2,r21,255
2008acf0:	1080201c 	xori	r2,r2,128
2008acf4:	10bfe004 	addi	r2,r2,-128
2008acf8:	10000326 	beq	r2,zero,2008ad08 <___svfprintf_internal_r+0x4cc>
2008acfc:	d8c02a17 	ldw	r3,168(sp)
2008ad00:	18c00044 	addi	r3,r3,1
2008ad04:	d8c02a15 	stw	r3,168(sp)
2008ad08:	8ac0008c 	andi	r11,r17,2
2008ad0c:	dac02b15 	stw	r11,172(sp)
2008ad10:	58000326 	beq	r11,zero,2008ad20 <___svfprintf_internal_r+0x4e4>
2008ad14:	db002a17 	ldw	r12,168(sp)
2008ad18:	63000084 	addi	r12,r12,2
2008ad1c:	db002a15 	stw	r12,168(sp)
2008ad20:	88c0210c 	andi	r3,r17,132
2008ad24:	d8c02c15 	stw	r3,176(sp)
2008ad28:	1802111e 	bne	r3,zero,2008b570 <___svfprintf_internal_r+0xd34>
2008ad2c:	dac02e17 	ldw	r11,184(sp)
2008ad30:	db002a17 	ldw	r12,168(sp)
2008ad34:	5b39c83a 	sub	fp,r11,r12
2008ad38:	07020d0e 	bge	zero,fp,2008b570 <___svfprintf_internal_r+0xd34>
2008ad3c:	02400404 	movi	r9,16
2008ad40:	d8c02017 	ldw	r3,128(sp)
2008ad44:	d8801f17 	ldw	r2,124(sp)
2008ad48:	4f058c0e 	bge	r9,fp,2008c37c <___svfprintf_internal_r+0x1b40>
2008ad4c:	01400034 	movhi	r5,0
2008ad50:	e009883a 	mov	r4,fp
2008ad54:	29418f84 	addi	r5,r5,1598
2008ad58:	dc003c15 	stw	r16,240(sp)
2008ad5c:	9039883a 	mov	fp,r18
2008ad60:	d9403615 	stw	r5,216(sp)
2008ad64:	8825883a 	mov	r18,r17
2008ad68:	482b883a 	mov	r21,r9
2008ad6c:	04c001c4 	movi	r19,7
2008ad70:	dc002f17 	ldw	r16,188(sp)
2008ad74:	2023883a 	mov	r17,r4
2008ad78:	00000306 	br	2008ad88 <___svfprintf_internal_r+0x54c>
2008ad7c:	8c7ffc04 	addi	r17,r17,-16
2008ad80:	42000204 	addi	r8,r8,8
2008ad84:	ac40130e 	bge	r21,r17,2008add4 <___svfprintf_internal_r+0x598>
2008ad88:	02c00034 	movhi	r11,0
2008ad8c:	18c00404 	addi	r3,r3,16
2008ad90:	10800044 	addi	r2,r2,1
2008ad94:	5ac18f84 	addi	r11,r11,1598
2008ad98:	42c00015 	stw	r11,0(r8)
2008ad9c:	45400115 	stw	r21,4(r8)
2008ada0:	d8c02015 	stw	r3,128(sp)
2008ada4:	d8801f15 	stw	r2,124(sp)
2008ada8:	98bff40e 	bge	r19,r2,2008ad7c <__flash_rwdata_start+0xfffee734>
2008adac:	8009883a 	mov	r4,r16
2008adb0:	b80b883a 	mov	r5,r23
2008adb4:	b00d883a 	mov	r6,r22
2008adb8:	00934300 	call	20093430 <__ssprint_r>
2008adbc:	103f671e 	bne	r2,zero,2008ab5c <__flash_rwdata_start+0xfffee514>
2008adc0:	8c7ffc04 	addi	r17,r17,-16
2008adc4:	d8c02017 	ldw	r3,128(sp)
2008adc8:	d8801f17 	ldw	r2,124(sp)
2008adcc:	da000404 	addi	r8,sp,16
2008add0:	ac7fed16 	blt	r21,r17,2008ad88 <__flash_rwdata_start+0xfffee740>
2008add4:	dc003c17 	ldw	r16,240(sp)
2008add8:	8809883a 	mov	r4,r17
2008addc:	9023883a 	mov	r17,r18
2008ade0:	e025883a 	mov	r18,fp
2008ade4:	2039883a 	mov	fp,r4
2008ade8:	db003617 	ldw	r12,216(sp)
2008adec:	e0c7883a 	add	r3,fp,r3
2008adf0:	10800044 	addi	r2,r2,1
2008adf4:	43000015 	stw	r12,0(r8)
2008adf8:	47000115 	stw	fp,4(r8)
2008adfc:	d8c02015 	stw	r3,128(sp)
2008ae00:	d8801f15 	stw	r2,124(sp)
2008ae04:	010001c4 	movi	r4,7
2008ae08:	20834416 	blt	r4,r2,2008bb1c <___svfprintf_internal_r+0x12e0>
2008ae0c:	d8802787 	ldb	r2,158(sp)
2008ae10:	42000204 	addi	r8,r8,8
2008ae14:	10000c26 	beq	r2,zero,2008ae48 <___svfprintf_internal_r+0x60c>
2008ae18:	d8801f17 	ldw	r2,124(sp)
2008ae1c:	d9002784 	addi	r4,sp,158
2008ae20:	18c00044 	addi	r3,r3,1
2008ae24:	10800044 	addi	r2,r2,1
2008ae28:	41000015 	stw	r4,0(r8)
2008ae2c:	01000044 	movi	r4,1
2008ae30:	41000115 	stw	r4,4(r8)
2008ae34:	d8c02015 	stw	r3,128(sp)
2008ae38:	d8801f15 	stw	r2,124(sp)
2008ae3c:	010001c4 	movi	r4,7
2008ae40:	2082f616 	blt	r4,r2,2008ba1c <___svfprintf_internal_r+0x11e0>
2008ae44:	42000204 	addi	r8,r8,8
2008ae48:	dac02b17 	ldw	r11,172(sp)
2008ae4c:	58000c26 	beq	r11,zero,2008ae80 <___svfprintf_internal_r+0x644>
2008ae50:	d8801f17 	ldw	r2,124(sp)
2008ae54:	d9002704 	addi	r4,sp,156
2008ae58:	18c00084 	addi	r3,r3,2
2008ae5c:	10800044 	addi	r2,r2,1
2008ae60:	41000015 	stw	r4,0(r8)
2008ae64:	01000084 	movi	r4,2
2008ae68:	41000115 	stw	r4,4(r8)
2008ae6c:	d8c02015 	stw	r3,128(sp)
2008ae70:	d8801f15 	stw	r2,124(sp)
2008ae74:	010001c4 	movi	r4,7
2008ae78:	2082e016 	blt	r4,r2,2008b9fc <___svfprintf_internal_r+0x11c0>
2008ae7c:	42000204 	addi	r8,r8,8
2008ae80:	db002c17 	ldw	r12,176(sp)
2008ae84:	00802004 	movi	r2,128
2008ae88:	60822f26 	beq	r12,r2,2008b748 <___svfprintf_internal_r+0xf0c>
2008ae8c:	db003217 	ldw	r12,200(sp)
2008ae90:	64abc83a 	sub	r21,r12,r18
2008ae94:	0540310e 	bge	zero,r21,2008af5c <___svfprintf_internal_r+0x720>
2008ae98:	07000404 	movi	fp,16
2008ae9c:	d8801f17 	ldw	r2,124(sp)
2008aea0:	e544270e 	bge	fp,r21,2008bf40 <___svfprintf_internal_r+0x1704>
2008aea4:	01400034 	movhi	r5,0
2008aea8:	a809883a 	mov	r4,r21
2008aeac:	29418b84 	addi	r5,r5,1582
2008aeb0:	dc002c15 	stw	r16,176(sp)
2008aeb4:	902b883a 	mov	r21,r18
2008aeb8:	d9402b15 	stw	r5,172(sp)
2008aebc:	8825883a 	mov	r18,r17
2008aec0:	04c001c4 	movi	r19,7
2008aec4:	dc002f17 	ldw	r16,188(sp)
2008aec8:	2023883a 	mov	r17,r4
2008aecc:	00000306 	br	2008aedc <___svfprintf_internal_r+0x6a0>
2008aed0:	8c7ffc04 	addi	r17,r17,-16
2008aed4:	42000204 	addi	r8,r8,8
2008aed8:	e440110e 	bge	fp,r17,2008af20 <___svfprintf_internal_r+0x6e4>
2008aedc:	18c00404 	addi	r3,r3,16
2008aee0:	10800044 	addi	r2,r2,1
2008aee4:	45000015 	stw	r20,0(r8)
2008aee8:	47000115 	stw	fp,4(r8)
2008aeec:	d8c02015 	stw	r3,128(sp)
2008aef0:	d8801f15 	stw	r2,124(sp)
2008aef4:	98bff60e 	bge	r19,r2,2008aed0 <__flash_rwdata_start+0xfffee888>
2008aef8:	8009883a 	mov	r4,r16
2008aefc:	b80b883a 	mov	r5,r23
2008af00:	b00d883a 	mov	r6,r22
2008af04:	00934300 	call	20093430 <__ssprint_r>
2008af08:	103f141e 	bne	r2,zero,2008ab5c <__flash_rwdata_start+0xfffee514>
2008af0c:	8c7ffc04 	addi	r17,r17,-16
2008af10:	d8c02017 	ldw	r3,128(sp)
2008af14:	d8801f17 	ldw	r2,124(sp)
2008af18:	da000404 	addi	r8,sp,16
2008af1c:	e47fef16 	blt	fp,r17,2008aedc <__flash_rwdata_start+0xfffee894>
2008af20:	dc002c17 	ldw	r16,176(sp)
2008af24:	8809883a 	mov	r4,r17
2008af28:	9023883a 	mov	r17,r18
2008af2c:	a825883a 	mov	r18,r21
2008af30:	202b883a 	mov	r21,r4
2008af34:	dac02b17 	ldw	r11,172(sp)
2008af38:	1d47883a 	add	r3,r3,r21
2008af3c:	10800044 	addi	r2,r2,1
2008af40:	42c00015 	stw	r11,0(r8)
2008af44:	45400115 	stw	r21,4(r8)
2008af48:	d8c02015 	stw	r3,128(sp)
2008af4c:	d8801f15 	stw	r2,124(sp)
2008af50:	010001c4 	movi	r4,7
2008af54:	2082a116 	blt	r4,r2,2008b9dc <___svfprintf_internal_r+0x11a0>
2008af58:	42000204 	addi	r8,r8,8
2008af5c:	8880400c 	andi	r2,r17,256
2008af60:	1001b01e 	bne	r2,zero,2008b624 <___svfprintf_internal_r+0xde8>
2008af64:	d8801f17 	ldw	r2,124(sp)
2008af68:	db003117 	ldw	r12,196(sp)
2008af6c:	1c87883a 	add	r3,r3,r18
2008af70:	10800044 	addi	r2,r2,1
2008af74:	43000015 	stw	r12,0(r8)
2008af78:	44800115 	stw	r18,4(r8)
2008af7c:	d8c02015 	stw	r3,128(sp)
2008af80:	d8801f15 	stw	r2,124(sp)
2008af84:	010001c4 	movi	r4,7
2008af88:	20828216 	blt	r4,r2,2008b994 <___svfprintf_internal_r+0x1158>
2008af8c:	42000204 	addi	r8,r8,8
2008af90:	8c40010c 	andi	r17,r17,4
2008af94:	88003226 	beq	r17,zero,2008b060 <___svfprintf_internal_r+0x824>
2008af98:	db002e17 	ldw	r12,184(sp)
2008af9c:	dac02a17 	ldw	r11,168(sp)
2008afa0:	62e1c83a 	sub	r16,r12,r11
2008afa4:	04002e0e 	bge	zero,r16,2008b060 <___svfprintf_internal_r+0x824>
2008afa8:	04400404 	movi	r17,16
2008afac:	d8801f17 	ldw	r2,124(sp)
2008afb0:	8c05330e 	bge	r17,r16,2008c480 <___svfprintf_internal_r+0x1c44>
2008afb4:	01000034 	movhi	r4,0
2008afb8:	21018f84 	addi	r4,r4,1598
2008afbc:	d9003615 	stw	r4,216(sp)
2008afc0:	048001c4 	movi	r18,7
2008afc4:	dcc02f17 	ldw	r19,188(sp)
2008afc8:	00000306 	br	2008afd8 <___svfprintf_internal_r+0x79c>
2008afcc:	843ffc04 	addi	r16,r16,-16
2008afd0:	42000204 	addi	r8,r8,8
2008afd4:	8c00130e 	bge	r17,r16,2008b024 <___svfprintf_internal_r+0x7e8>
2008afd8:	01400034 	movhi	r5,0
2008afdc:	18c00404 	addi	r3,r3,16
2008afe0:	10800044 	addi	r2,r2,1
2008afe4:	29418f84 	addi	r5,r5,1598
2008afe8:	41400015 	stw	r5,0(r8)
2008afec:	44400115 	stw	r17,4(r8)
2008aff0:	d8c02015 	stw	r3,128(sp)
2008aff4:	d8801f15 	stw	r2,124(sp)
2008aff8:	90bff40e 	bge	r18,r2,2008afcc <__flash_rwdata_start+0xfffee984>
2008affc:	9809883a 	mov	r4,r19
2008b000:	b80b883a 	mov	r5,r23
2008b004:	b00d883a 	mov	r6,r22
2008b008:	00934300 	call	20093430 <__ssprint_r>
2008b00c:	103ed31e 	bne	r2,zero,2008ab5c <__flash_rwdata_start+0xfffee514>
2008b010:	843ffc04 	addi	r16,r16,-16
2008b014:	d8c02017 	ldw	r3,128(sp)
2008b018:	d8801f17 	ldw	r2,124(sp)
2008b01c:	da000404 	addi	r8,sp,16
2008b020:	8c3fed16 	blt	r17,r16,2008afd8 <__flash_rwdata_start+0xfffee990>
2008b024:	dac03617 	ldw	r11,216(sp)
2008b028:	1c07883a 	add	r3,r3,r16
2008b02c:	10800044 	addi	r2,r2,1
2008b030:	42c00015 	stw	r11,0(r8)
2008b034:	44000115 	stw	r16,4(r8)
2008b038:	d8c02015 	stw	r3,128(sp)
2008b03c:	d8801f15 	stw	r2,124(sp)
2008b040:	010001c4 	movi	r4,7
2008b044:	2080060e 	bge	r4,r2,2008b060 <___svfprintf_internal_r+0x824>
2008b048:	d9002f17 	ldw	r4,188(sp)
2008b04c:	b80b883a 	mov	r5,r23
2008b050:	b00d883a 	mov	r6,r22
2008b054:	00934300 	call	20093430 <__ssprint_r>
2008b058:	103ec01e 	bne	r2,zero,2008ab5c <__flash_rwdata_start+0xfffee514>
2008b05c:	d8c02017 	ldw	r3,128(sp)
2008b060:	d8802a17 	ldw	r2,168(sp)
2008b064:	db002e17 	ldw	r12,184(sp)
2008b068:	1300010e 	bge	r2,r12,2008b070 <___svfprintf_internal_r+0x834>
2008b06c:	6005883a 	mov	r2,r12
2008b070:	dac03017 	ldw	r11,192(sp)
2008b074:	5897883a 	add	r11,r11,r2
2008b078:	dac03015 	stw	r11,192(sp)
2008b07c:	1802331e 	bne	r3,zero,2008b94c <___svfprintf_internal_r+0x1110>
2008b080:	d8001f15 	stw	zero,124(sp)
2008b084:	da000404 	addi	r8,sp,16
2008b088:	003e1806 	br	2008a8ec <__flash_rwdata_start+0xfffee2a4>
2008b08c:	db002d17 	ldw	r12,180(sp)
2008b090:	dac02d17 	ldw	r11,180(sp)
2008b094:	d8c02915 	stw	r3,164(sp)
2008b098:	63000017 	ldw	r12,0(r12)
2008b09c:	5ac00117 	ldw	r11,4(r11)
2008b0a0:	d9802785 	stb	r6,158(sp)
2008b0a4:	6009883a 	mov	r4,r12
2008b0a8:	580b883a 	mov	r5,r11
2008b0ac:	db003715 	stw	r12,220(sp)
2008b0b0:	da004015 	stw	r8,256(sp)
2008b0b4:	da403f15 	stw	r9,252(sp)
2008b0b8:	dac03815 	stw	r11,224(sp)
2008b0bc:	009311c0 	call	2009311c <__fpclassifyd>
2008b0c0:	db002d17 	ldw	r12,180(sp)
2008b0c4:	04800044 	movi	r18,1
2008b0c8:	da004017 	ldw	r8,256(sp)
2008b0cc:	64c00204 	addi	r19,r12,8
2008b0d0:	da403f17 	ldw	r9,252(sp)
2008b0d4:	d9003717 	ldw	r4,220(sp)
2008b0d8:	d9403817 	ldw	r5,224(sp)
2008b0dc:	1483561e 	bne	r2,r18,2008be38 <___svfprintf_internal_r+0x15fc>
2008b0e0:	000d883a 	mov	r6,zero
2008b0e4:	000f883a 	mov	r7,zero
2008b0e8:	00970a40 	call	200970a4 <__ledf2>
2008b0ec:	da004017 	ldw	r8,256(sp)
2008b0f0:	1004ee16 	blt	r2,zero,2008c4ac <___svfprintf_internal_r+0x1c70>
2008b0f4:	dd402783 	ldbu	r21,158(sp)
2008b0f8:	008011c4 	movi	r2,71
2008b0fc:	1404440e 	bge	r2,r16,2008c210 <___svfprintf_internal_r+0x19d4>
2008b100:	00c00034 	movhi	r3,0
2008b104:	18c17c04 	addi	r3,r3,1520
2008b108:	d8c03115 	stw	r3,196(sp)
2008b10c:	02c000c4 	movi	r11,3
2008b110:	00bfdfc4 	movi	r2,-129
2008b114:	dac02a15 	stw	r11,168(sp)
2008b118:	88a2703a 	and	r17,r17,r2
2008b11c:	dcc02d15 	stw	r19,180(sp)
2008b120:	5825883a 	mov	r18,r11
2008b124:	d8003215 	stw	zero,200(sp)
2008b128:	d8003415 	stw	zero,208(sp)
2008b12c:	003eef06 	br	2008acec <__flash_rwdata_start+0xfffee6a4>
2008b130:	8c400214 	ori	r17,r17,8
2008b134:	1805883a 	mov	r2,r3
2008b138:	1c000007 	ldb	r16,0(r3)
2008b13c:	003e1506 	br	2008a994 <__flash_rwdata_start+0xfffee34c>
2008b140:	8c400414 	ori	r17,r17,16
2008b144:	d8c02915 	stw	r3,164(sp)
2008b148:	88c0080c 	andi	r3,r17,32
2008b14c:	d8802d17 	ldw	r2,180(sp)
2008b150:	18005526 	beq	r3,zero,2008b2a8 <___svfprintf_internal_r+0xa6c>
2008b154:	dac02d17 	ldw	r11,180(sp)
2008b158:	14c00017 	ldw	r19,0(r2)
2008b15c:	17000117 	ldw	fp,4(r2)
2008b160:	5ac00204 	addi	r11,r11,8
2008b164:	dac02d15 	stw	r11,180(sp)
2008b168:	00800044 	movi	r2,1
2008b16c:	9f06b03a 	or	r3,r19,fp
2008b170:	d8002785 	stb	zero,158(sp)
2008b174:	da403215 	stw	r9,200(sp)
2008b178:	002b883a 	mov	r21,zero
2008b17c:	003eb406 	br	2008ac50 <__flash_rwdata_start+0xfffee608>
2008b180:	03000034 	movhi	r12,0
2008b184:	63017f04 	addi	r12,r12,1532
2008b188:	d8c02915 	stw	r3,164(sp)
2008b18c:	d9802785 	stb	r6,158(sp)
2008b190:	db003b15 	stw	r12,236(sp)
2008b194:	88c0080c 	andi	r3,r17,32
2008b198:	d8802d17 	ldw	r2,180(sp)
2008b19c:	18005626 	beq	r3,zero,2008b2f8 <___svfprintf_internal_r+0xabc>
2008b1a0:	dac02d17 	ldw	r11,180(sp)
2008b1a4:	14c00017 	ldw	r19,0(r2)
2008b1a8:	17000117 	ldw	fp,4(r2)
2008b1ac:	5ac00204 	addi	r11,r11,8
2008b1b0:	dac02d15 	stw	r11,180(sp)
2008b1b4:	8880004c 	andi	r2,r17,1
2008b1b8:	10029326 	beq	r2,zero,2008bc08 <___svfprintf_internal_r+0x13cc>
2008b1bc:	9f06b03a 	or	r3,r19,fp
2008b1c0:	18033526 	beq	r3,zero,2008be98 <___svfprintf_internal_r+0x165c>
2008b1c4:	00800c04 	movi	r2,48
2008b1c8:	d8802705 	stb	r2,156(sp)
2008b1cc:	dc002745 	stb	r16,157(sp)
2008b1d0:	8c400094 	ori	r17,r17,2
2008b1d4:	00800084 	movi	r2,2
2008b1d8:	003fe506 	br	2008b170 <__flash_rwdata_start+0xfffeeb28>
2008b1dc:	1805883a 	mov	r2,r3
2008b1e0:	d8002e15 	stw	zero,184(sp)
2008b1e4:	82fff404 	addi	r11,r16,-48
2008b1e8:	0019883a 	mov	r12,zero
2008b1ec:	14000007 	ldb	r16,0(r2)
2008b1f0:	630002a4 	muli	r12,r12,10
2008b1f4:	18c00044 	addi	r3,r3,1
2008b1f8:	1805883a 	mov	r2,r3
2008b1fc:	62d9883a 	add	r12,r12,r11
2008b200:	82fff404 	addi	r11,r16,-48
2008b204:	2afff92e 	bgeu	r5,r11,2008b1ec <__flash_rwdata_start+0xfffeeba4>
2008b208:	db002e15 	stw	r12,184(sp)
2008b20c:	003de206 	br	2008a998 <__flash_rwdata_start+0xfffee350>
2008b210:	8c400814 	ori	r17,r17,32
2008b214:	1805883a 	mov	r2,r3
2008b218:	1c000007 	ldb	r16,0(r3)
2008b21c:	003ddd06 	br	2008a994 <__flash_rwdata_start+0xfffee34c>
2008b220:	dac02d17 	ldw	r11,180(sp)
2008b224:	db002d17 	ldw	r12,180(sp)
2008b228:	d8c02915 	stw	r3,164(sp)
2008b22c:	5ac00017 	ldw	r11,0(r11)
2008b230:	d8002785 	stb	zero,158(sp)
2008b234:	64c00104 	addi	r19,r12,4
2008b238:	dac03115 	stw	r11,196(sp)
2008b23c:	58048126 	beq	r11,zero,2008c444 <___svfprintf_internal_r+0x1c08>
2008b240:	d9003117 	ldw	r4,196(sp)
2008b244:	48041716 	blt	r9,zero,2008c2a4 <___svfprintf_internal_r+0x1a68>
2008b248:	480d883a 	mov	r6,r9
2008b24c:	000b883a 	mov	r5,zero
2008b250:	da004015 	stw	r8,256(sp)
2008b254:	da403f15 	stw	r9,252(sp)
2008b258:	00918640 	call	20091864 <memchr>
2008b25c:	da004017 	ldw	r8,256(sp)
2008b260:	da403f17 	ldw	r9,252(sp)
2008b264:	1004db26 	beq	r2,zero,2008c5d4 <___svfprintf_internal_r+0x1d98>
2008b268:	d8c03117 	ldw	r3,196(sp)
2008b26c:	10e5c83a 	sub	r18,r2,r3
2008b270:	4c80010e 	bge	r9,r18,2008b278 <___svfprintf_internal_r+0xa3c>
2008b274:	4825883a 	mov	r18,r9
2008b278:	9005883a 	mov	r2,r18
2008b27c:	90040e16 	blt	r18,zero,2008c2b8 <___svfprintf_internal_r+0x1a7c>
2008b280:	dd402783 	ldbu	r21,158(sp)
2008b284:	d8802a15 	stw	r2,168(sp)
2008b288:	dcc02d15 	stw	r19,180(sp)
2008b28c:	d8003215 	stw	zero,200(sp)
2008b290:	d8003415 	stw	zero,208(sp)
2008b294:	003e9506 	br	2008acec <__flash_rwdata_start+0xfffee6a4>
2008b298:	d8c02915 	stw	r3,164(sp)
2008b29c:	88c0080c 	andi	r3,r17,32
2008b2a0:	d8802d17 	ldw	r2,180(sp)
2008b2a4:	183fab1e 	bne	r3,zero,2008b154 <__flash_rwdata_start+0xfffeeb0c>
2008b2a8:	88c0040c 	andi	r3,r17,16
2008b2ac:	1802681e 	bne	r3,zero,2008bc50 <___svfprintf_internal_r+0x1414>
2008b2b0:	88c0100c 	andi	r3,r17,64
2008b2b4:	18026626 	beq	r3,zero,2008bc50 <___svfprintf_internal_r+0x1414>
2008b2b8:	dac02d17 	ldw	r11,180(sp)
2008b2bc:	14c0000b 	ldhu	r19,0(r2)
2008b2c0:	0039883a 	mov	fp,zero
2008b2c4:	5ac00104 	addi	r11,r11,4
2008b2c8:	dac02d15 	stw	r11,180(sp)
2008b2cc:	00800044 	movi	r2,1
2008b2d0:	9807883a 	mov	r3,r19
2008b2d4:	003fa606 	br	2008b170 <__flash_rwdata_start+0xfffeeb28>
2008b2d8:	00800034 	movhi	r2,0
2008b2dc:	10818404 	addi	r2,r2,1552
2008b2e0:	d8c02915 	stw	r3,164(sp)
2008b2e4:	d8803b15 	stw	r2,236(sp)
2008b2e8:	d9802785 	stb	r6,158(sp)
2008b2ec:	88c0080c 	andi	r3,r17,32
2008b2f0:	d8802d17 	ldw	r2,180(sp)
2008b2f4:	183faa1e 	bne	r3,zero,2008b1a0 <__flash_rwdata_start+0xfffeeb58>
2008b2f8:	88c0040c 	andi	r3,r17,16
2008b2fc:	1802e826 	beq	r3,zero,2008bea0 <___svfprintf_internal_r+0x1664>
2008b300:	db002d17 	ldw	r12,180(sp)
2008b304:	14c00017 	ldw	r19,0(r2)
2008b308:	0039883a 	mov	fp,zero
2008b30c:	63000104 	addi	r12,r12,4
2008b310:	db002d15 	stw	r12,180(sp)
2008b314:	003fa706 	br	2008b1b4 <__flash_rwdata_start+0xfffeeb6c>
2008b318:	30803fcc 	andi	r2,r6,255
2008b31c:	1080201c 	xori	r2,r2,128
2008b320:	10bfe004 	addi	r2,r2,-128
2008b324:	1002d91e 	bne	r2,zero,2008be8c <___svfprintf_internal_r+0x1650>
2008b328:	1805883a 	mov	r2,r3
2008b32c:	01800804 	movi	r6,32
2008b330:	1c000007 	ldb	r16,0(r3)
2008b334:	003d9706 	br	2008a994 <__flash_rwdata_start+0xfffee34c>
2008b338:	8c400054 	ori	r17,r17,1
2008b33c:	1805883a 	mov	r2,r3
2008b340:	1c000007 	ldb	r16,0(r3)
2008b344:	003d9306 	br	2008a994 <__flash_rwdata_start+0xfffee34c>
2008b348:	dac02d17 	ldw	r11,180(sp)
2008b34c:	db002d17 	ldw	r12,180(sp)
2008b350:	5ac00017 	ldw	r11,0(r11)
2008b354:	dac02e15 	stw	r11,184(sp)
2008b358:	62c00104 	addi	r11,r12,4
2008b35c:	db002e17 	ldw	r12,184(sp)
2008b360:	60033e16 	blt	r12,zero,2008c05c <___svfprintf_internal_r+0x1820>
2008b364:	dac02d15 	stw	r11,180(sp)
2008b368:	1805883a 	mov	r2,r3
2008b36c:	1c000007 	ldb	r16,0(r3)
2008b370:	003d8806 	br	2008a994 <__flash_rwdata_start+0xfffee34c>
2008b374:	1805883a 	mov	r2,r3
2008b378:	01800ac4 	movi	r6,43
2008b37c:	1c000007 	ldb	r16,0(r3)
2008b380:	003d8406 	br	2008a994 <__flash_rwdata_start+0xfffee34c>
2008b384:	8c401014 	ori	r17,r17,64
2008b388:	1805883a 	mov	r2,r3
2008b38c:	1c000007 	ldb	r16,0(r3)
2008b390:	003d8006 	br	2008a994 <__flash_rwdata_start+0xfffee34c>
2008b394:	1c000007 	ldb	r16,0(r3)
2008b398:	81c33626 	beq	r16,r7,2008c074 <___svfprintf_internal_r+0x1838>
2008b39c:	8c400414 	ori	r17,r17,16
2008b3a0:	1805883a 	mov	r2,r3
2008b3a4:	003d7b06 	br	2008a994 <__flash_rwdata_start+0xfffee34c>
2008b3a8:	d8c02915 	stw	r3,164(sp)
2008b3ac:	d9802785 	stb	r6,158(sp)
2008b3b0:	8880080c 	andi	r2,r17,32
2008b3b4:	1002c226 	beq	r2,zero,2008bec0 <___svfprintf_internal_r+0x1684>
2008b3b8:	db002d17 	ldw	r12,180(sp)
2008b3bc:	dac03017 	ldw	r11,192(sp)
2008b3c0:	60800017 	ldw	r2,0(r12)
2008b3c4:	5807d7fa 	srai	r3,r11,31
2008b3c8:	63000104 	addi	r12,r12,4
2008b3cc:	db002d15 	stw	r12,180(sp)
2008b3d0:	12c00015 	stw	r11,0(r2)
2008b3d4:	10c00115 	stw	r3,4(r2)
2008b3d8:	003d4406 	br	2008a8ec <__flash_rwdata_start+0xfffee2a4>
2008b3dc:	db002d17 	ldw	r12,180(sp)
2008b3e0:	00800c04 	movi	r2,48
2008b3e4:	d8802705 	stb	r2,156(sp)
2008b3e8:	64c00017 	ldw	r19,0(r12)
2008b3ec:	00801e04 	movi	r2,120
2008b3f0:	d8802745 	stb	r2,157(sp)
2008b3f4:	00800034 	movhi	r2,0
2008b3f8:	10818404 	addi	r2,r2,1552
2008b3fc:	63000104 	addi	r12,r12,4
2008b400:	d8c02915 	stw	r3,164(sp)
2008b404:	d8803b15 	stw	r2,236(sp)
2008b408:	0039883a 	mov	fp,zero
2008b40c:	8c400094 	ori	r17,r17,2
2008b410:	db002d15 	stw	r12,180(sp)
2008b414:	00800084 	movi	r2,2
2008b418:	04001e04 	movi	r16,120
2008b41c:	9807883a 	mov	r3,r19
2008b420:	003f5306 	br	2008b170 <__flash_rwdata_start+0xfffeeb28>
2008b424:	db002d17 	ldw	r12,180(sp)
2008b428:	d8c02915 	stw	r3,164(sp)
2008b42c:	dac01404 	addi	r11,sp,80
2008b430:	60800017 	ldw	r2,0(r12)
2008b434:	00c00044 	movi	r3,1
2008b438:	63000104 	addi	r12,r12,4
2008b43c:	d8801405 	stb	r2,80(sp)
2008b440:	d8c02a15 	stw	r3,168(sp)
2008b444:	d8002785 	stb	zero,158(sp)
2008b448:	db002d15 	stw	r12,180(sp)
2008b44c:	1825883a 	mov	r18,r3
2008b450:	d8003215 	stw	zero,200(sp)
2008b454:	d8003415 	stw	zero,208(sp)
2008b458:	dac03115 	stw	r11,196(sp)
2008b45c:	0005883a 	mov	r2,zero
2008b460:	003e2906 	br	2008ad08 <__flash_rwdata_start+0xfffee6c0>
2008b464:	d8c02915 	stw	r3,164(sp)
2008b468:	d9802785 	stb	r6,158(sp)
2008b46c:	8880080c 	andi	r2,r17,32
2008b470:	d8c02d17 	ldw	r3,180(sp)
2008b474:	103deb1e 	bne	r2,zero,2008ac24 <__flash_rwdata_start+0xfffee5dc>
2008b478:	8880040c 	andi	r2,r17,16
2008b47c:	1001e51e 	bne	r2,zero,2008bc14 <___svfprintf_internal_r+0x13d8>
2008b480:	8880100c 	andi	r2,r17,64
2008b484:	1001e326 	beq	r2,zero,2008bc14 <___svfprintf_internal_r+0x13d8>
2008b488:	1cc0000f 	ldh	r19,0(r3)
2008b48c:	db002d17 	ldw	r12,180(sp)
2008b490:	9839d7fa 	srai	fp,r19,31
2008b494:	63000104 	addi	r12,r12,4
2008b498:	db002d15 	stw	r12,180(sp)
2008b49c:	e005883a 	mov	r2,fp
2008b4a0:	103de70e 	bge	r2,zero,2008ac40 <__flash_rwdata_start+0xfffee5f8>
2008b4a4:	04e7c83a 	sub	r19,zero,r19
2008b4a8:	9804c03a 	cmpne	r2,r19,zero
2008b4ac:	0739c83a 	sub	fp,zero,fp
2008b4b0:	e0b9c83a 	sub	fp,fp,r2
2008b4b4:	05400b44 	movi	r21,45
2008b4b8:	dd402785 	stb	r21,158(sp)
2008b4bc:	da403215 	stw	r9,200(sp)
2008b4c0:	00800044 	movi	r2,1
2008b4c4:	9f06b03a 	or	r3,r19,fp
2008b4c8:	003de106 	br	2008ac50 <__flash_rwdata_start+0xfffee608>
2008b4cc:	8c400414 	ori	r17,r17,16
2008b4d0:	d8c02915 	stw	r3,164(sp)
2008b4d4:	8880080c 	andi	r2,r17,32
2008b4d8:	10000b26 	beq	r2,zero,2008b508 <___svfprintf_internal_r+0xccc>
2008b4dc:	db002d17 	ldw	r12,180(sp)
2008b4e0:	0005883a 	mov	r2,zero
2008b4e4:	64c00017 	ldw	r19,0(r12)
2008b4e8:	67000117 	ldw	fp,4(r12)
2008b4ec:	63000204 	addi	r12,r12,8
2008b4f0:	db002d15 	stw	r12,180(sp)
2008b4f4:	9f06b03a 	or	r3,r19,fp
2008b4f8:	003f1d06 	br	2008b170 <__flash_rwdata_start+0xfffeeb28>
2008b4fc:	d8c02915 	stw	r3,164(sp)
2008b500:	8880080c 	andi	r2,r17,32
2008b504:	103ff51e 	bne	r2,zero,2008b4dc <__flash_rwdata_start+0xfffeee94>
2008b508:	8880040c 	andi	r2,r17,16
2008b50c:	1001c81e 	bne	r2,zero,2008bc30 <___svfprintf_internal_r+0x13f4>
2008b510:	8880100c 	andi	r2,r17,64
2008b514:	1001c626 	beq	r2,zero,2008bc30 <___svfprintf_internal_r+0x13f4>
2008b518:	db002d17 	ldw	r12,180(sp)
2008b51c:	0039883a 	mov	fp,zero
2008b520:	0005883a 	mov	r2,zero
2008b524:	64c0000b 	ldhu	r19,0(r12)
2008b528:	63000104 	addi	r12,r12,4
2008b52c:	db002d15 	stw	r12,180(sp)
2008b530:	9807883a 	mov	r3,r19
2008b534:	003f0e06 	br	2008b170 <__flash_rwdata_start+0xfffeeb28>
2008b538:	d8c02915 	stw	r3,164(sp)
2008b53c:	d9802785 	stb	r6,158(sp)
2008b540:	803d8026 	beq	r16,zero,2008ab44 <__flash_rwdata_start+0xfffee4fc>
2008b544:	02c00044 	movi	r11,1
2008b548:	db001404 	addi	r12,sp,80
2008b54c:	dac02a15 	stw	r11,168(sp)
2008b550:	dc001405 	stb	r16,80(sp)
2008b554:	d8002785 	stb	zero,158(sp)
2008b558:	5825883a 	mov	r18,r11
2008b55c:	d8003215 	stw	zero,200(sp)
2008b560:	d8003415 	stw	zero,208(sp)
2008b564:	db003115 	stw	r12,196(sp)
2008b568:	0005883a 	mov	r2,zero
2008b56c:	003de606 	br	2008ad08 <__flash_rwdata_start+0xfffee6c0>
2008b570:	d8c02017 	ldw	r3,128(sp)
2008b574:	003e2706 	br	2008ae14 <__flash_rwdata_start+0xfffee7cc>
2008b578:	10803fcc 	andi	r2,r2,255
2008b57c:	00c00044 	movi	r3,1
2008b580:	10fdbb1e 	bne	r2,r3,2008ac70 <__flash_rwdata_start+0xfffee628>
2008b584:	e000021e 	bne	fp,zero,2008b590 <___svfprintf_internal_r+0xd54>
2008b588:	00800244 	movi	r2,9
2008b58c:	14c01f2e 	bgeu	r2,r19,2008b60c <___svfprintf_internal_r+0xdd0>
2008b590:	dc002a15 	stw	r16,168(sp)
2008b594:	dc402b15 	stw	r17,172(sp)
2008b598:	9821883a 	mov	r16,r19
2008b59c:	e023883a 	mov	r17,fp
2008b5a0:	b025883a 	mov	r18,r22
2008b5a4:	4827883a 	mov	r19,r9
2008b5a8:	4039883a 	mov	fp,r8
2008b5ac:	8009883a 	mov	r4,r16
2008b5b0:	880b883a 	mov	r5,r17
2008b5b4:	01800284 	movi	r6,10
2008b5b8:	000f883a 	mov	r7,zero
2008b5bc:	00969b00 	call	200969b0 <__umoddi3>
2008b5c0:	10800c04 	addi	r2,r2,48
2008b5c4:	94bfffc4 	addi	r18,r18,-1
2008b5c8:	8009883a 	mov	r4,r16
2008b5cc:	880b883a 	mov	r5,r17
2008b5d0:	01800284 	movi	r6,10
2008b5d4:	000f883a 	mov	r7,zero
2008b5d8:	90800005 	stb	r2,0(r18)
2008b5dc:	00963f00 	call	200963f0 <__udivdi3>
2008b5e0:	1021883a 	mov	r16,r2
2008b5e4:	10c4b03a 	or	r2,r2,r3
2008b5e8:	1823883a 	mov	r17,r3
2008b5ec:	103fef1e 	bne	r2,zero,2008b5ac <__flash_rwdata_start+0xfffeef64>
2008b5f0:	dc803115 	stw	r18,196(sp)
2008b5f4:	dc002a17 	ldw	r16,168(sp)
2008b5f8:	dc402b17 	ldw	r17,172(sp)
2008b5fc:	9813883a 	mov	r9,r19
2008b600:	e011883a 	mov	r8,fp
2008b604:	b4a5c83a 	sub	r18,r22,r18
2008b608:	003db306 	br	2008acd8 <__flash_rwdata_start+0xfffee690>
2008b60c:	9cc00c04 	addi	r19,r19,48
2008b610:	db001dc4 	addi	r12,sp,119
2008b614:	dcc01dc5 	stb	r19,119(sp)
2008b618:	dc803d17 	ldw	r18,244(sp)
2008b61c:	db003115 	stw	r12,196(sp)
2008b620:	003dad06 	br	2008acd8 <__flash_rwdata_start+0xfffee690>
2008b624:	00801944 	movi	r2,101
2008b628:	14008d0e 	bge	r2,r16,2008b860 <___svfprintf_internal_r+0x1024>
2008b62c:	d9003717 	ldw	r4,220(sp)
2008b630:	d9403817 	ldw	r5,224(sp)
2008b634:	000d883a 	mov	r6,zero
2008b638:	000f883a 	mov	r7,zero
2008b63c:	d8c03e15 	stw	r3,248(sp)
2008b640:	da004015 	stw	r8,256(sp)
2008b644:	0096f400 	call	20096f40 <__eqdf2>
2008b648:	d8c03e17 	ldw	r3,248(sp)
2008b64c:	da004017 	ldw	r8,256(sp)
2008b650:	1000fd1e 	bne	r2,zero,2008ba48 <___svfprintf_internal_r+0x120c>
2008b654:	d8801f17 	ldw	r2,124(sp)
2008b658:	01000034 	movhi	r4,0
2008b65c:	21018b04 	addi	r4,r4,1580
2008b660:	18c00044 	addi	r3,r3,1
2008b664:	10800044 	addi	r2,r2,1
2008b668:	41000015 	stw	r4,0(r8)
2008b66c:	01000044 	movi	r4,1
2008b670:	41000115 	stw	r4,4(r8)
2008b674:	d8c02015 	stw	r3,128(sp)
2008b678:	d8801f15 	stw	r2,124(sp)
2008b67c:	010001c4 	movi	r4,7
2008b680:	20823316 	blt	r4,r2,2008bf50 <___svfprintf_internal_r+0x1714>
2008b684:	42000204 	addi	r8,r8,8
2008b688:	d8802617 	ldw	r2,152(sp)
2008b68c:	dac03317 	ldw	r11,204(sp)
2008b690:	12c00216 	blt	r2,r11,2008b69c <___svfprintf_internal_r+0xe60>
2008b694:	8880004c 	andi	r2,r17,1
2008b698:	103e3d26 	beq	r2,zero,2008af90 <__flash_rwdata_start+0xfffee948>
2008b69c:	db003917 	ldw	r12,228(sp)
2008b6a0:	d8801f17 	ldw	r2,124(sp)
2008b6a4:	dac03517 	ldw	r11,212(sp)
2008b6a8:	1b07883a 	add	r3,r3,r12
2008b6ac:	10800044 	addi	r2,r2,1
2008b6b0:	42c00015 	stw	r11,0(r8)
2008b6b4:	43000115 	stw	r12,4(r8)
2008b6b8:	d8c02015 	stw	r3,128(sp)
2008b6bc:	d8801f15 	stw	r2,124(sp)
2008b6c0:	010001c4 	movi	r4,7
2008b6c4:	20826f16 	blt	r4,r2,2008c084 <___svfprintf_internal_r+0x1848>
2008b6c8:	42000204 	addi	r8,r8,8
2008b6cc:	db003317 	ldw	r12,204(sp)
2008b6d0:	643fffc4 	addi	r16,r12,-1
2008b6d4:	043e2e0e 	bge	zero,r16,2008af90 <__flash_rwdata_start+0xfffee948>
2008b6d8:	04800404 	movi	r18,16
2008b6dc:	d8801f17 	ldw	r2,124(sp)
2008b6e0:	9400a00e 	bge	r18,r16,2008b964 <___svfprintf_internal_r+0x1128>
2008b6e4:	01400034 	movhi	r5,0
2008b6e8:	29418b84 	addi	r5,r5,1582
2008b6ec:	d9402b15 	stw	r5,172(sp)
2008b6f0:	054001c4 	movi	r21,7
2008b6f4:	dcc02f17 	ldw	r19,188(sp)
2008b6f8:	00000306 	br	2008b708 <___svfprintf_internal_r+0xecc>
2008b6fc:	42000204 	addi	r8,r8,8
2008b700:	843ffc04 	addi	r16,r16,-16
2008b704:	94009a0e 	bge	r18,r16,2008b970 <___svfprintf_internal_r+0x1134>
2008b708:	18c00404 	addi	r3,r3,16
2008b70c:	10800044 	addi	r2,r2,1
2008b710:	45000015 	stw	r20,0(r8)
2008b714:	44800115 	stw	r18,4(r8)
2008b718:	d8c02015 	stw	r3,128(sp)
2008b71c:	d8801f15 	stw	r2,124(sp)
2008b720:	a8bff60e 	bge	r21,r2,2008b6fc <__flash_rwdata_start+0xfffef0b4>
2008b724:	9809883a 	mov	r4,r19
2008b728:	b80b883a 	mov	r5,r23
2008b72c:	b00d883a 	mov	r6,r22
2008b730:	00934300 	call	20093430 <__ssprint_r>
2008b734:	103d091e 	bne	r2,zero,2008ab5c <__flash_rwdata_start+0xfffee514>
2008b738:	d8c02017 	ldw	r3,128(sp)
2008b73c:	d8801f17 	ldw	r2,124(sp)
2008b740:	da000404 	addi	r8,sp,16
2008b744:	003fee06 	br	2008b700 <__flash_rwdata_start+0xfffef0b8>
2008b748:	dac02e17 	ldw	r11,184(sp)
2008b74c:	db002a17 	ldw	r12,168(sp)
2008b750:	5b2bc83a 	sub	r21,r11,r12
2008b754:	057dcd0e 	bge	zero,r21,2008ae8c <__flash_rwdata_start+0xfffee844>
2008b758:	07000404 	movi	fp,16
2008b75c:	d8801f17 	ldw	r2,124(sp)
2008b760:	e5435d0e 	bge	fp,r21,2008c4d8 <___svfprintf_internal_r+0x1c9c>
2008b764:	01400034 	movhi	r5,0
2008b768:	a809883a 	mov	r4,r21
2008b76c:	29418b84 	addi	r5,r5,1582
2008b770:	dc002c15 	stw	r16,176(sp)
2008b774:	902b883a 	mov	r21,r18
2008b778:	d9402b15 	stw	r5,172(sp)
2008b77c:	8825883a 	mov	r18,r17
2008b780:	04c001c4 	movi	r19,7
2008b784:	dc002f17 	ldw	r16,188(sp)
2008b788:	2023883a 	mov	r17,r4
2008b78c:	00000306 	br	2008b79c <___svfprintf_internal_r+0xf60>
2008b790:	8c7ffc04 	addi	r17,r17,-16
2008b794:	42000204 	addi	r8,r8,8
2008b798:	e440110e 	bge	fp,r17,2008b7e0 <___svfprintf_internal_r+0xfa4>
2008b79c:	18c00404 	addi	r3,r3,16
2008b7a0:	10800044 	addi	r2,r2,1
2008b7a4:	45000015 	stw	r20,0(r8)
2008b7a8:	47000115 	stw	fp,4(r8)
2008b7ac:	d8c02015 	stw	r3,128(sp)
2008b7b0:	d8801f15 	stw	r2,124(sp)
2008b7b4:	98bff60e 	bge	r19,r2,2008b790 <__flash_rwdata_start+0xfffef148>
2008b7b8:	8009883a 	mov	r4,r16
2008b7bc:	b80b883a 	mov	r5,r23
2008b7c0:	b00d883a 	mov	r6,r22
2008b7c4:	00934300 	call	20093430 <__ssprint_r>
2008b7c8:	103ce41e 	bne	r2,zero,2008ab5c <__flash_rwdata_start+0xfffee514>
2008b7cc:	8c7ffc04 	addi	r17,r17,-16
2008b7d0:	d8c02017 	ldw	r3,128(sp)
2008b7d4:	d8801f17 	ldw	r2,124(sp)
2008b7d8:	da000404 	addi	r8,sp,16
2008b7dc:	e47fef16 	blt	fp,r17,2008b79c <__flash_rwdata_start+0xfffef154>
2008b7e0:	dc002c17 	ldw	r16,176(sp)
2008b7e4:	8809883a 	mov	r4,r17
2008b7e8:	9023883a 	mov	r17,r18
2008b7ec:	a825883a 	mov	r18,r21
2008b7f0:	202b883a 	mov	r21,r4
2008b7f4:	dac02b17 	ldw	r11,172(sp)
2008b7f8:	1d47883a 	add	r3,r3,r21
2008b7fc:	10800044 	addi	r2,r2,1
2008b800:	42c00015 	stw	r11,0(r8)
2008b804:	45400115 	stw	r21,4(r8)
2008b808:	d8c02015 	stw	r3,128(sp)
2008b80c:	d8801f15 	stw	r2,124(sp)
2008b810:	010001c4 	movi	r4,7
2008b814:	20818016 	blt	r4,r2,2008be18 <___svfprintf_internal_r+0x15dc>
2008b818:	42000204 	addi	r8,r8,8
2008b81c:	003d9b06 	br	2008ae8c <__flash_rwdata_start+0xfffee844>
2008b820:	d9403b17 	ldw	r5,236(sp)
2008b824:	b007883a 	mov	r3,r22
2008b828:	988003cc 	andi	r2,r19,15
2008b82c:	e008973a 	slli	r4,fp,28
2008b830:	2885883a 	add	r2,r5,r2
2008b834:	9826d13a 	srli	r19,r19,4
2008b838:	10800003 	ldbu	r2,0(r2)
2008b83c:	e038d13a 	srli	fp,fp,4
2008b840:	18ffffc4 	addi	r3,r3,-1
2008b844:	24e6b03a 	or	r19,r4,r19
2008b848:	18800005 	stb	r2,0(r3)
2008b84c:	9f04b03a 	or	r2,r19,fp
2008b850:	103ff51e 	bne	r2,zero,2008b828 <__flash_rwdata_start+0xfffef1e0>
2008b854:	d8c03115 	stw	r3,196(sp)
2008b858:	b0e5c83a 	sub	r18,r22,r3
2008b85c:	003d1e06 	br	2008acd8 <__flash_rwdata_start+0xfffee690>
2008b860:	db003317 	ldw	r12,204(sp)
2008b864:	00800044 	movi	r2,1
2008b868:	18c00044 	addi	r3,r3,1
2008b86c:	13014b0e 	bge	r2,r12,2008bd9c <___svfprintf_internal_r+0x1560>
2008b870:	dc001f17 	ldw	r16,124(sp)
2008b874:	dac03117 	ldw	r11,196(sp)
2008b878:	00800044 	movi	r2,1
2008b87c:	84000044 	addi	r16,r16,1
2008b880:	40800115 	stw	r2,4(r8)
2008b884:	42c00015 	stw	r11,0(r8)
2008b888:	d8c02015 	stw	r3,128(sp)
2008b88c:	dc001f15 	stw	r16,124(sp)
2008b890:	008001c4 	movi	r2,7
2008b894:	14014e16 	blt	r2,r16,2008bdd0 <___svfprintf_internal_r+0x1594>
2008b898:	42000204 	addi	r8,r8,8
2008b89c:	db003917 	ldw	r12,228(sp)
2008b8a0:	dac03517 	ldw	r11,212(sp)
2008b8a4:	84000044 	addi	r16,r16,1
2008b8a8:	1b07883a 	add	r3,r3,r12
2008b8ac:	42c00015 	stw	r11,0(r8)
2008b8b0:	43000115 	stw	r12,4(r8)
2008b8b4:	d8c02015 	stw	r3,128(sp)
2008b8b8:	dc001f15 	stw	r16,124(sp)
2008b8bc:	008001c4 	movi	r2,7
2008b8c0:	14014c16 	blt	r2,r16,2008bdf4 <___svfprintf_internal_r+0x15b8>
2008b8c4:	44800204 	addi	r18,r8,8
2008b8c8:	d9003717 	ldw	r4,220(sp)
2008b8cc:	d9403817 	ldw	r5,224(sp)
2008b8d0:	000d883a 	mov	r6,zero
2008b8d4:	000f883a 	mov	r7,zero
2008b8d8:	d8c03e15 	stw	r3,248(sp)
2008b8dc:	0096f400 	call	20096f40 <__eqdf2>
2008b8e0:	d8c03e17 	ldw	r3,248(sp)
2008b8e4:	db003317 	ldw	r12,204(sp)
2008b8e8:	10009526 	beq	r2,zero,2008bb40 <___svfprintf_internal_r+0x1304>
2008b8ec:	dac03117 	ldw	r11,196(sp)
2008b8f0:	60bfffc4 	addi	r2,r12,-1
2008b8f4:	1887883a 	add	r3,r3,r2
2008b8f8:	59000044 	addi	r4,r11,1
2008b8fc:	84000044 	addi	r16,r16,1
2008b900:	90800115 	stw	r2,4(r18)
2008b904:	91000015 	stw	r4,0(r18)
2008b908:	d8c02015 	stw	r3,128(sp)
2008b90c:	dc001f15 	stw	r16,124(sp)
2008b910:	008001c4 	movi	r2,7
2008b914:	1400b316 	blt	r2,r16,2008bbe4 <___svfprintf_internal_r+0x13a8>
2008b918:	94800204 	addi	r18,r18,8
2008b91c:	dac03a17 	ldw	r11,232(sp)
2008b920:	dd4022c4 	addi	r21,sp,139
2008b924:	84000044 	addi	r16,r16,1
2008b928:	1ac7883a 	add	r3,r3,r11
2008b92c:	95400015 	stw	r21,0(r18)
2008b930:	92c00115 	stw	r11,4(r18)
2008b934:	d8c02015 	stw	r3,128(sp)
2008b938:	dc001f15 	stw	r16,124(sp)
2008b93c:	008001c4 	movi	r2,7
2008b940:	14001416 	blt	r2,r16,2008b994 <___svfprintf_internal_r+0x1158>
2008b944:	92000204 	addi	r8,r18,8
2008b948:	003d9106 	br	2008af90 <__flash_rwdata_start+0xfffee948>
2008b94c:	d9002f17 	ldw	r4,188(sp)
2008b950:	b80b883a 	mov	r5,r23
2008b954:	b00d883a 	mov	r6,r22
2008b958:	00934300 	call	20093430 <__ssprint_r>
2008b95c:	103dc826 	beq	r2,zero,2008b080 <__flash_rwdata_start+0xfffeea38>
2008b960:	003c7e06 	br	2008ab5c <__flash_rwdata_start+0xfffee514>
2008b964:	01000034 	movhi	r4,0
2008b968:	21018b84 	addi	r4,r4,1582
2008b96c:	d9002b15 	stw	r4,172(sp)
2008b970:	dac02b17 	ldw	r11,172(sp)
2008b974:	1c07883a 	add	r3,r3,r16
2008b978:	44000115 	stw	r16,4(r8)
2008b97c:	42c00015 	stw	r11,0(r8)
2008b980:	10800044 	addi	r2,r2,1
2008b984:	d8c02015 	stw	r3,128(sp)
2008b988:	d8801f15 	stw	r2,124(sp)
2008b98c:	010001c4 	movi	r4,7
2008b990:	20bd7e0e 	bge	r4,r2,2008af8c <__flash_rwdata_start+0xfffee944>
2008b994:	d9002f17 	ldw	r4,188(sp)
2008b998:	b80b883a 	mov	r5,r23
2008b99c:	b00d883a 	mov	r6,r22
2008b9a0:	00934300 	call	20093430 <__ssprint_r>
2008b9a4:	103c6d1e 	bne	r2,zero,2008ab5c <__flash_rwdata_start+0xfffee514>
2008b9a8:	d8c02017 	ldw	r3,128(sp)
2008b9ac:	da000404 	addi	r8,sp,16
2008b9b0:	003d7706 	br	2008af90 <__flash_rwdata_start+0xfffee948>
2008b9b4:	10803fcc 	andi	r2,r2,255
2008b9b8:	1000201e 	bne	r2,zero,2008ba3c <___svfprintf_internal_r+0x1200>
2008b9bc:	8880004c 	andi	r2,r17,1
2008b9c0:	10001e26 	beq	r2,zero,2008ba3c <___svfprintf_internal_r+0x1200>
2008b9c4:	00800c04 	movi	r2,48
2008b9c8:	d8c01dc4 	addi	r3,sp,119
2008b9cc:	d8801dc5 	stb	r2,119(sp)
2008b9d0:	dc803d17 	ldw	r18,244(sp)
2008b9d4:	d8c03115 	stw	r3,196(sp)
2008b9d8:	003cbf06 	br	2008acd8 <__flash_rwdata_start+0xfffee690>
2008b9dc:	d9002f17 	ldw	r4,188(sp)
2008b9e0:	b80b883a 	mov	r5,r23
2008b9e4:	b00d883a 	mov	r6,r22
2008b9e8:	00934300 	call	20093430 <__ssprint_r>
2008b9ec:	103c5b1e 	bne	r2,zero,2008ab5c <__flash_rwdata_start+0xfffee514>
2008b9f0:	d8c02017 	ldw	r3,128(sp)
2008b9f4:	da000404 	addi	r8,sp,16
2008b9f8:	003d5806 	br	2008af5c <__flash_rwdata_start+0xfffee914>
2008b9fc:	d9002f17 	ldw	r4,188(sp)
2008ba00:	b80b883a 	mov	r5,r23
2008ba04:	b00d883a 	mov	r6,r22
2008ba08:	00934300 	call	20093430 <__ssprint_r>
2008ba0c:	103c531e 	bne	r2,zero,2008ab5c <__flash_rwdata_start+0xfffee514>
2008ba10:	d8c02017 	ldw	r3,128(sp)
2008ba14:	da000404 	addi	r8,sp,16
2008ba18:	003d1906 	br	2008ae80 <__flash_rwdata_start+0xfffee838>
2008ba1c:	d9002f17 	ldw	r4,188(sp)
2008ba20:	b80b883a 	mov	r5,r23
2008ba24:	b00d883a 	mov	r6,r22
2008ba28:	00934300 	call	20093430 <__ssprint_r>
2008ba2c:	103c4b1e 	bne	r2,zero,2008ab5c <__flash_rwdata_start+0xfffee514>
2008ba30:	d8c02017 	ldw	r3,128(sp)
2008ba34:	da000404 	addi	r8,sp,16
2008ba38:	003d0306 	br	2008ae48 <__flash_rwdata_start+0xfffee800>
2008ba3c:	0025883a 	mov	r18,zero
2008ba40:	dd803115 	stw	r22,196(sp)
2008ba44:	003ca406 	br	2008acd8 <__flash_rwdata_start+0xfffee690>
2008ba48:	dc002617 	ldw	r16,152(sp)
2008ba4c:	0401480e 	bge	zero,r16,2008bf70 <___svfprintf_internal_r+0x1734>
2008ba50:	db003117 	ldw	r12,196(sp)
2008ba54:	dac03317 	ldw	r11,204(sp)
2008ba58:	62e1883a 	add	r16,r12,r11
2008ba5c:	db003417 	ldw	r12,208(sp)
2008ba60:	5825883a 	mov	r18,r11
2008ba64:	62c0010e 	bge	r12,r11,2008ba6c <___svfprintf_internal_r+0x1230>
2008ba68:	6025883a 	mov	r18,r12
2008ba6c:	04800b0e 	bge	zero,r18,2008ba9c <___svfprintf_internal_r+0x1260>
2008ba70:	d8801f17 	ldw	r2,124(sp)
2008ba74:	dac03117 	ldw	r11,196(sp)
2008ba78:	1c87883a 	add	r3,r3,r18
2008ba7c:	10800044 	addi	r2,r2,1
2008ba80:	42c00015 	stw	r11,0(r8)
2008ba84:	44800115 	stw	r18,4(r8)
2008ba88:	d8c02015 	stw	r3,128(sp)
2008ba8c:	d8801f15 	stw	r2,124(sp)
2008ba90:	010001c4 	movi	r4,7
2008ba94:	20823f16 	blt	r4,r2,2008c394 <___svfprintf_internal_r+0x1b58>
2008ba98:	42000204 	addi	r8,r8,8
2008ba9c:	90023b16 	blt	r18,zero,2008c38c <___svfprintf_internal_r+0x1b50>
2008baa0:	db003417 	ldw	r12,208(sp)
2008baa4:	64a5c83a 	sub	r18,r12,r18
2008baa8:	0480780e 	bge	zero,r18,2008bc8c <___svfprintf_internal_r+0x1450>
2008baac:	05400404 	movi	r21,16
2008bab0:	d8801f17 	ldw	r2,124(sp)
2008bab4:	ac81140e 	bge	r21,r18,2008bf08 <___svfprintf_internal_r+0x16cc>
2008bab8:	01400034 	movhi	r5,0
2008babc:	29418b84 	addi	r5,r5,1582
2008bac0:	d9402b15 	stw	r5,172(sp)
2008bac4:	070001c4 	movi	fp,7
2008bac8:	dcc02f17 	ldw	r19,188(sp)
2008bacc:	00000306 	br	2008badc <___svfprintf_internal_r+0x12a0>
2008bad0:	42000204 	addi	r8,r8,8
2008bad4:	94bffc04 	addi	r18,r18,-16
2008bad8:	ac810e0e 	bge	r21,r18,2008bf14 <___svfprintf_internal_r+0x16d8>
2008badc:	18c00404 	addi	r3,r3,16
2008bae0:	10800044 	addi	r2,r2,1
2008bae4:	45000015 	stw	r20,0(r8)
2008bae8:	45400115 	stw	r21,4(r8)
2008baec:	d8c02015 	stw	r3,128(sp)
2008baf0:	d8801f15 	stw	r2,124(sp)
2008baf4:	e0bff60e 	bge	fp,r2,2008bad0 <__flash_rwdata_start+0xfffef488>
2008baf8:	9809883a 	mov	r4,r19
2008bafc:	b80b883a 	mov	r5,r23
2008bb00:	b00d883a 	mov	r6,r22
2008bb04:	00934300 	call	20093430 <__ssprint_r>
2008bb08:	103c141e 	bne	r2,zero,2008ab5c <__flash_rwdata_start+0xfffee514>
2008bb0c:	d8c02017 	ldw	r3,128(sp)
2008bb10:	d8801f17 	ldw	r2,124(sp)
2008bb14:	da000404 	addi	r8,sp,16
2008bb18:	003fee06 	br	2008bad4 <__flash_rwdata_start+0xfffef48c>
2008bb1c:	d9002f17 	ldw	r4,188(sp)
2008bb20:	b80b883a 	mov	r5,r23
2008bb24:	b00d883a 	mov	r6,r22
2008bb28:	00934300 	call	20093430 <__ssprint_r>
2008bb2c:	103c0b1e 	bne	r2,zero,2008ab5c <__flash_rwdata_start+0xfffee514>
2008bb30:	d8c02017 	ldw	r3,128(sp)
2008bb34:	d8802787 	ldb	r2,158(sp)
2008bb38:	da000404 	addi	r8,sp,16
2008bb3c:	003cb506 	br	2008ae14 <__flash_rwdata_start+0xfffee7cc>
2008bb40:	657fffc4 	addi	r21,r12,-1
2008bb44:	057f750e 	bge	zero,r21,2008b91c <__flash_rwdata_start+0xfffef2d4>
2008bb48:	07000404 	movi	fp,16
2008bb4c:	e542ed0e 	bge	fp,r21,2008c704 <___svfprintf_internal_r+0x1ec8>
2008bb50:	01000034 	movhi	r4,0
2008bb54:	21018b84 	addi	r4,r4,1582
2008bb58:	d9002b15 	stw	r4,172(sp)
2008bb5c:	01c001c4 	movi	r7,7
2008bb60:	dcc02f17 	ldw	r19,188(sp)
2008bb64:	00000306 	br	2008bb74 <___svfprintf_internal_r+0x1338>
2008bb68:	ad7ffc04 	addi	r21,r21,-16
2008bb6c:	94800204 	addi	r18,r18,8
2008bb70:	e540130e 	bge	fp,r21,2008bbc0 <___svfprintf_internal_r+0x1384>
2008bb74:	18c00404 	addi	r3,r3,16
2008bb78:	84000044 	addi	r16,r16,1
2008bb7c:	95000015 	stw	r20,0(r18)
2008bb80:	97000115 	stw	fp,4(r18)
2008bb84:	d8c02015 	stw	r3,128(sp)
2008bb88:	dc001f15 	stw	r16,124(sp)
2008bb8c:	3c3ff60e 	bge	r7,r16,2008bb68 <__flash_rwdata_start+0xfffef520>
2008bb90:	9809883a 	mov	r4,r19
2008bb94:	b80b883a 	mov	r5,r23
2008bb98:	b00d883a 	mov	r6,r22
2008bb9c:	d9c03e15 	stw	r7,248(sp)
2008bba0:	00934300 	call	20093430 <__ssprint_r>
2008bba4:	d9c03e17 	ldw	r7,248(sp)
2008bba8:	103bec1e 	bne	r2,zero,2008ab5c <__flash_rwdata_start+0xfffee514>
2008bbac:	ad7ffc04 	addi	r21,r21,-16
2008bbb0:	d8c02017 	ldw	r3,128(sp)
2008bbb4:	dc001f17 	ldw	r16,124(sp)
2008bbb8:	dc800404 	addi	r18,sp,16
2008bbbc:	e57fed16 	blt	fp,r21,2008bb74 <__flash_rwdata_start+0xfffef52c>
2008bbc0:	dac02b17 	ldw	r11,172(sp)
2008bbc4:	1d47883a 	add	r3,r3,r21
2008bbc8:	84000044 	addi	r16,r16,1
2008bbcc:	92c00015 	stw	r11,0(r18)
2008bbd0:	95400115 	stw	r21,4(r18)
2008bbd4:	d8c02015 	stw	r3,128(sp)
2008bbd8:	dc001f15 	stw	r16,124(sp)
2008bbdc:	008001c4 	movi	r2,7
2008bbe0:	143f4d0e 	bge	r2,r16,2008b918 <__flash_rwdata_start+0xfffef2d0>
2008bbe4:	d9002f17 	ldw	r4,188(sp)
2008bbe8:	b80b883a 	mov	r5,r23
2008bbec:	b00d883a 	mov	r6,r22
2008bbf0:	00934300 	call	20093430 <__ssprint_r>
2008bbf4:	103bd91e 	bne	r2,zero,2008ab5c <__flash_rwdata_start+0xfffee514>
2008bbf8:	d8c02017 	ldw	r3,128(sp)
2008bbfc:	dc001f17 	ldw	r16,124(sp)
2008bc00:	dc800404 	addi	r18,sp,16
2008bc04:	003f4506 	br	2008b91c <__flash_rwdata_start+0xfffef2d4>
2008bc08:	00800084 	movi	r2,2
2008bc0c:	9f06b03a 	or	r3,r19,fp
2008bc10:	003d5706 	br	2008b170 <__flash_rwdata_start+0xfffeeb28>
2008bc14:	1cc00017 	ldw	r19,0(r3)
2008bc18:	dac02d17 	ldw	r11,180(sp)
2008bc1c:	9839d7fa 	srai	fp,r19,31
2008bc20:	5ac00104 	addi	r11,r11,4
2008bc24:	dac02d15 	stw	r11,180(sp)
2008bc28:	e005883a 	mov	r2,fp
2008bc2c:	003c0306 	br	2008ac3c <__flash_rwdata_start+0xfffee5f4>
2008bc30:	dac02d17 	ldw	r11,180(sp)
2008bc34:	0039883a 	mov	fp,zero
2008bc38:	0005883a 	mov	r2,zero
2008bc3c:	5cc00017 	ldw	r19,0(r11)
2008bc40:	5ac00104 	addi	r11,r11,4
2008bc44:	dac02d15 	stw	r11,180(sp)
2008bc48:	9807883a 	mov	r3,r19
2008bc4c:	003d4806 	br	2008b170 <__flash_rwdata_start+0xfffeeb28>
2008bc50:	db002d17 	ldw	r12,180(sp)
2008bc54:	14c00017 	ldw	r19,0(r2)
2008bc58:	0039883a 	mov	fp,zero
2008bc5c:	63000104 	addi	r12,r12,4
2008bc60:	db002d15 	stw	r12,180(sp)
2008bc64:	00800044 	movi	r2,1
2008bc68:	9807883a 	mov	r3,r19
2008bc6c:	003d4006 	br	2008b170 <__flash_rwdata_start+0xfffeeb28>
2008bc70:	d9002f17 	ldw	r4,188(sp)
2008bc74:	b80b883a 	mov	r5,r23
2008bc78:	b00d883a 	mov	r6,r22
2008bc7c:	00934300 	call	20093430 <__ssprint_r>
2008bc80:	103bb61e 	bne	r2,zero,2008ab5c <__flash_rwdata_start+0xfffee514>
2008bc84:	d8c02017 	ldw	r3,128(sp)
2008bc88:	da000404 	addi	r8,sp,16
2008bc8c:	db003117 	ldw	r12,196(sp)
2008bc90:	dac03417 	ldw	r11,208(sp)
2008bc94:	d8802617 	ldw	r2,152(sp)
2008bc98:	62e5883a 	add	r18,r12,r11
2008bc9c:	db003317 	ldw	r12,204(sp)
2008bca0:	13000216 	blt	r2,r12,2008bcac <___svfprintf_internal_r+0x1470>
2008bca4:	8900004c 	andi	r4,r17,1
2008bca8:	20000c26 	beq	r4,zero,2008bcdc <___svfprintf_internal_r+0x14a0>
2008bcac:	dac03917 	ldw	r11,228(sp)
2008bcb0:	d9001f17 	ldw	r4,124(sp)
2008bcb4:	db003517 	ldw	r12,212(sp)
2008bcb8:	1ac7883a 	add	r3,r3,r11
2008bcbc:	21000044 	addi	r4,r4,1
2008bcc0:	43000015 	stw	r12,0(r8)
2008bcc4:	42c00115 	stw	r11,4(r8)
2008bcc8:	d8c02015 	stw	r3,128(sp)
2008bccc:	d9001f15 	stw	r4,124(sp)
2008bcd0:	014001c4 	movi	r5,7
2008bcd4:	2901b716 	blt	r5,r4,2008c3b4 <___svfprintf_internal_r+0x1b78>
2008bcd8:	42000204 	addi	r8,r8,8
2008bcdc:	dac03317 	ldw	r11,204(sp)
2008bce0:	8489c83a 	sub	r4,r16,r18
2008bce4:	5885c83a 	sub	r2,r11,r2
2008bce8:	1021883a 	mov	r16,r2
2008bcec:	2080010e 	bge	r4,r2,2008bcf4 <___svfprintf_internal_r+0x14b8>
2008bcf0:	2021883a 	mov	r16,r4
2008bcf4:	04000a0e 	bge	zero,r16,2008bd20 <___svfprintf_internal_r+0x14e4>
2008bcf8:	d9001f17 	ldw	r4,124(sp)
2008bcfc:	1c07883a 	add	r3,r3,r16
2008bd00:	44800015 	stw	r18,0(r8)
2008bd04:	21000044 	addi	r4,r4,1
2008bd08:	44000115 	stw	r16,4(r8)
2008bd0c:	d8c02015 	stw	r3,128(sp)
2008bd10:	d9001f15 	stw	r4,124(sp)
2008bd14:	014001c4 	movi	r5,7
2008bd18:	2901bf16 	blt	r5,r4,2008c418 <___svfprintf_internal_r+0x1bdc>
2008bd1c:	42000204 	addi	r8,r8,8
2008bd20:	8001bb16 	blt	r16,zero,2008c410 <___svfprintf_internal_r+0x1bd4>
2008bd24:	1421c83a 	sub	r16,r2,r16
2008bd28:	043c990e 	bge	zero,r16,2008af90 <__flash_rwdata_start+0xfffee948>
2008bd2c:	04800404 	movi	r18,16
2008bd30:	d8801f17 	ldw	r2,124(sp)
2008bd34:	943f0b0e 	bge	r18,r16,2008b964 <__flash_rwdata_start+0xfffef31c>
2008bd38:	01400034 	movhi	r5,0
2008bd3c:	29418b84 	addi	r5,r5,1582
2008bd40:	d9402b15 	stw	r5,172(sp)
2008bd44:	054001c4 	movi	r21,7
2008bd48:	dcc02f17 	ldw	r19,188(sp)
2008bd4c:	00000306 	br	2008bd5c <___svfprintf_internal_r+0x1520>
2008bd50:	42000204 	addi	r8,r8,8
2008bd54:	843ffc04 	addi	r16,r16,-16
2008bd58:	943f050e 	bge	r18,r16,2008b970 <__flash_rwdata_start+0xfffef328>
2008bd5c:	18c00404 	addi	r3,r3,16
2008bd60:	10800044 	addi	r2,r2,1
2008bd64:	45000015 	stw	r20,0(r8)
2008bd68:	44800115 	stw	r18,4(r8)
2008bd6c:	d8c02015 	stw	r3,128(sp)
2008bd70:	d8801f15 	stw	r2,124(sp)
2008bd74:	a8bff60e 	bge	r21,r2,2008bd50 <__flash_rwdata_start+0xfffef708>
2008bd78:	9809883a 	mov	r4,r19
2008bd7c:	b80b883a 	mov	r5,r23
2008bd80:	b00d883a 	mov	r6,r22
2008bd84:	00934300 	call	20093430 <__ssprint_r>
2008bd88:	103b741e 	bne	r2,zero,2008ab5c <__flash_rwdata_start+0xfffee514>
2008bd8c:	d8c02017 	ldw	r3,128(sp)
2008bd90:	d8801f17 	ldw	r2,124(sp)
2008bd94:	da000404 	addi	r8,sp,16
2008bd98:	003fee06 	br	2008bd54 <__flash_rwdata_start+0xfffef70c>
2008bd9c:	8888703a 	and	r4,r17,r2
2008bda0:	203eb31e 	bne	r4,zero,2008b870 <__flash_rwdata_start+0xfffef228>
2008bda4:	dc001f17 	ldw	r16,124(sp)
2008bda8:	db003117 	ldw	r12,196(sp)
2008bdac:	40800115 	stw	r2,4(r8)
2008bdb0:	84000044 	addi	r16,r16,1
2008bdb4:	43000015 	stw	r12,0(r8)
2008bdb8:	d8c02015 	stw	r3,128(sp)
2008bdbc:	dc001f15 	stw	r16,124(sp)
2008bdc0:	008001c4 	movi	r2,7
2008bdc4:	143f8716 	blt	r2,r16,2008bbe4 <__flash_rwdata_start+0xfffef59c>
2008bdc8:	44800204 	addi	r18,r8,8
2008bdcc:	003ed306 	br	2008b91c <__flash_rwdata_start+0xfffef2d4>
2008bdd0:	d9002f17 	ldw	r4,188(sp)
2008bdd4:	b80b883a 	mov	r5,r23
2008bdd8:	b00d883a 	mov	r6,r22
2008bddc:	00934300 	call	20093430 <__ssprint_r>
2008bde0:	103b5e1e 	bne	r2,zero,2008ab5c <__flash_rwdata_start+0xfffee514>
2008bde4:	d8c02017 	ldw	r3,128(sp)
2008bde8:	dc001f17 	ldw	r16,124(sp)
2008bdec:	da000404 	addi	r8,sp,16
2008bdf0:	003eaa06 	br	2008b89c <__flash_rwdata_start+0xfffef254>
2008bdf4:	d9002f17 	ldw	r4,188(sp)
2008bdf8:	b80b883a 	mov	r5,r23
2008bdfc:	b00d883a 	mov	r6,r22
2008be00:	00934300 	call	20093430 <__ssprint_r>
2008be04:	103b551e 	bne	r2,zero,2008ab5c <__flash_rwdata_start+0xfffee514>
2008be08:	d8c02017 	ldw	r3,128(sp)
2008be0c:	dc001f17 	ldw	r16,124(sp)
2008be10:	dc800404 	addi	r18,sp,16
2008be14:	003eac06 	br	2008b8c8 <__flash_rwdata_start+0xfffef280>
2008be18:	d9002f17 	ldw	r4,188(sp)
2008be1c:	b80b883a 	mov	r5,r23
2008be20:	b00d883a 	mov	r6,r22
2008be24:	00934300 	call	20093430 <__ssprint_r>
2008be28:	103b4c1e 	bne	r2,zero,2008ab5c <__flash_rwdata_start+0xfffee514>
2008be2c:	d8c02017 	ldw	r3,128(sp)
2008be30:	da000404 	addi	r8,sp,16
2008be34:	003c1506 	br	2008ae8c <__flash_rwdata_start+0xfffee844>
2008be38:	da004015 	stw	r8,256(sp)
2008be3c:	da403f15 	stw	r9,252(sp)
2008be40:	009311c0 	call	2009311c <__fpclassifyd>
2008be44:	da004017 	ldw	r8,256(sp)
2008be48:	da403f17 	ldw	r9,252(sp)
2008be4c:	1000951e 	bne	r2,zero,2008c0a4 <___svfprintf_internal_r+0x1868>
2008be50:	008011c4 	movi	r2,71
2008be54:	1400fb16 	blt	r2,r16,2008c244 <___svfprintf_internal_r+0x1a08>
2008be58:	03000034 	movhi	r12,0
2008be5c:	63017d04 	addi	r12,r12,1524
2008be60:	db003115 	stw	r12,196(sp)
2008be64:	00c000c4 	movi	r3,3
2008be68:	00bfdfc4 	movi	r2,-129
2008be6c:	d8c02a15 	stw	r3,168(sp)
2008be70:	88a2703a 	and	r17,r17,r2
2008be74:	dd402783 	ldbu	r21,158(sp)
2008be78:	dcc02d15 	stw	r19,180(sp)
2008be7c:	1825883a 	mov	r18,r3
2008be80:	d8003215 	stw	zero,200(sp)
2008be84:	d8003415 	stw	zero,208(sp)
2008be88:	003b9806 	br	2008acec <__flash_rwdata_start+0xfffee6a4>
2008be8c:	1c000007 	ldb	r16,0(r3)
2008be90:	1805883a 	mov	r2,r3
2008be94:	003abf06 	br	2008a994 <__flash_rwdata_start+0xfffee34c>
2008be98:	00800084 	movi	r2,2
2008be9c:	003cb406 	br	2008b170 <__flash_rwdata_start+0xfffeeb28>
2008bea0:	88c0100c 	andi	r3,r17,64
2008bea4:	1800f626 	beq	r3,zero,2008c280 <___svfprintf_internal_r+0x1a44>
2008bea8:	dac02d17 	ldw	r11,180(sp)
2008beac:	14c0000b 	ldhu	r19,0(r2)
2008beb0:	0039883a 	mov	fp,zero
2008beb4:	5ac00104 	addi	r11,r11,4
2008beb8:	dac02d15 	stw	r11,180(sp)
2008bebc:	003cbd06 	br	2008b1b4 <__flash_rwdata_start+0xfffeeb6c>
2008bec0:	8880040c 	andi	r2,r17,16
2008bec4:	1000091e 	bne	r2,zero,2008beec <___svfprintf_internal_r+0x16b0>
2008bec8:	8c40100c 	andi	r17,r17,64
2008becc:	88000726 	beq	r17,zero,2008beec <___svfprintf_internal_r+0x16b0>
2008bed0:	db002d17 	ldw	r12,180(sp)
2008bed4:	dac03017 	ldw	r11,192(sp)
2008bed8:	60800017 	ldw	r2,0(r12)
2008bedc:	63000104 	addi	r12,r12,4
2008bee0:	db002d15 	stw	r12,180(sp)
2008bee4:	12c0000d 	sth	r11,0(r2)
2008bee8:	003a8006 	br	2008a8ec <__flash_rwdata_start+0xfffee2a4>
2008beec:	db002d17 	ldw	r12,180(sp)
2008bef0:	dac03017 	ldw	r11,192(sp)
2008bef4:	60800017 	ldw	r2,0(r12)
2008bef8:	63000104 	addi	r12,r12,4
2008befc:	db002d15 	stw	r12,180(sp)
2008bf00:	12c00015 	stw	r11,0(r2)
2008bf04:	003a7906 	br	2008a8ec <__flash_rwdata_start+0xfffee2a4>
2008bf08:	01000034 	movhi	r4,0
2008bf0c:	21018b84 	addi	r4,r4,1582
2008bf10:	d9002b15 	stw	r4,172(sp)
2008bf14:	dac02b17 	ldw	r11,172(sp)
2008bf18:	1c87883a 	add	r3,r3,r18
2008bf1c:	10800044 	addi	r2,r2,1
2008bf20:	42c00015 	stw	r11,0(r8)
2008bf24:	44800115 	stw	r18,4(r8)
2008bf28:	d8c02015 	stw	r3,128(sp)
2008bf2c:	d8801f15 	stw	r2,124(sp)
2008bf30:	010001c4 	movi	r4,7
2008bf34:	20bf4e16 	blt	r4,r2,2008bc70 <__flash_rwdata_start+0xfffef628>
2008bf38:	42000204 	addi	r8,r8,8
2008bf3c:	003f5306 	br	2008bc8c <__flash_rwdata_start+0xfffef644>
2008bf40:	01000034 	movhi	r4,0
2008bf44:	21018b84 	addi	r4,r4,1582
2008bf48:	d9002b15 	stw	r4,172(sp)
2008bf4c:	003bf906 	br	2008af34 <__flash_rwdata_start+0xfffee8ec>
2008bf50:	d9002f17 	ldw	r4,188(sp)
2008bf54:	b80b883a 	mov	r5,r23
2008bf58:	b00d883a 	mov	r6,r22
2008bf5c:	00934300 	call	20093430 <__ssprint_r>
2008bf60:	103afe1e 	bne	r2,zero,2008ab5c <__flash_rwdata_start+0xfffee514>
2008bf64:	d8c02017 	ldw	r3,128(sp)
2008bf68:	da000404 	addi	r8,sp,16
2008bf6c:	003dc606 	br	2008b688 <__flash_rwdata_start+0xfffef040>
2008bf70:	d8801f17 	ldw	r2,124(sp)
2008bf74:	03000034 	movhi	r12,0
2008bf78:	01000044 	movi	r4,1
2008bf7c:	18c00044 	addi	r3,r3,1
2008bf80:	10800044 	addi	r2,r2,1
2008bf84:	63018b04 	addi	r12,r12,1580
2008bf88:	41000115 	stw	r4,4(r8)
2008bf8c:	43000015 	stw	r12,0(r8)
2008bf90:	d8c02015 	stw	r3,128(sp)
2008bf94:	d8801f15 	stw	r2,124(sp)
2008bf98:	010001c4 	movi	r4,7
2008bf9c:	2080ad16 	blt	r4,r2,2008c254 <___svfprintf_internal_r+0x1a18>
2008bfa0:	42000204 	addi	r8,r8,8
2008bfa4:	8000041e 	bne	r16,zero,2008bfb8 <___svfprintf_internal_r+0x177c>
2008bfa8:	dac03317 	ldw	r11,204(sp)
2008bfac:	5800021e 	bne	r11,zero,2008bfb8 <___svfprintf_internal_r+0x177c>
2008bfb0:	8880004c 	andi	r2,r17,1
2008bfb4:	103bf626 	beq	r2,zero,2008af90 <__flash_rwdata_start+0xfffee948>
2008bfb8:	db003917 	ldw	r12,228(sp)
2008bfbc:	d8801f17 	ldw	r2,124(sp)
2008bfc0:	dac03517 	ldw	r11,212(sp)
2008bfc4:	1b07883a 	add	r3,r3,r12
2008bfc8:	10800044 	addi	r2,r2,1
2008bfcc:	42c00015 	stw	r11,0(r8)
2008bfd0:	43000115 	stw	r12,4(r8)
2008bfd4:	d8c02015 	stw	r3,128(sp)
2008bfd8:	d8801f15 	stw	r2,124(sp)
2008bfdc:	010001c4 	movi	r4,7
2008bfe0:	20818616 	blt	r4,r2,2008c5fc <___svfprintf_internal_r+0x1dc0>
2008bfe4:	42000204 	addi	r8,r8,8
2008bfe8:	0421c83a 	sub	r16,zero,r16
2008bfec:	0400bc0e 	bge	zero,r16,2008c2e0 <___svfprintf_internal_r+0x1aa4>
2008bff0:	04800404 	movi	r18,16
2008bff4:	9400f80e 	bge	r18,r16,2008c3d8 <___svfprintf_internal_r+0x1b9c>
2008bff8:	01000034 	movhi	r4,0
2008bffc:	21018b84 	addi	r4,r4,1582
2008c000:	d9002b15 	stw	r4,172(sp)
2008c004:	054001c4 	movi	r21,7
2008c008:	dcc02f17 	ldw	r19,188(sp)
2008c00c:	00000306 	br	2008c01c <___svfprintf_internal_r+0x17e0>
2008c010:	42000204 	addi	r8,r8,8
2008c014:	843ffc04 	addi	r16,r16,-16
2008c018:	9400f20e 	bge	r18,r16,2008c3e4 <___svfprintf_internal_r+0x1ba8>
2008c01c:	18c00404 	addi	r3,r3,16
2008c020:	10800044 	addi	r2,r2,1
2008c024:	45000015 	stw	r20,0(r8)
2008c028:	44800115 	stw	r18,4(r8)
2008c02c:	d8c02015 	stw	r3,128(sp)
2008c030:	d8801f15 	stw	r2,124(sp)
2008c034:	a8bff60e 	bge	r21,r2,2008c010 <__flash_rwdata_start+0xfffef9c8>
2008c038:	9809883a 	mov	r4,r19
2008c03c:	b80b883a 	mov	r5,r23
2008c040:	b00d883a 	mov	r6,r22
2008c044:	00934300 	call	20093430 <__ssprint_r>
2008c048:	103ac41e 	bne	r2,zero,2008ab5c <__flash_rwdata_start+0xfffee514>
2008c04c:	d8c02017 	ldw	r3,128(sp)
2008c050:	d8801f17 	ldw	r2,124(sp)
2008c054:	da000404 	addi	r8,sp,16
2008c058:	003fee06 	br	2008c014 <__flash_rwdata_start+0xfffef9cc>
2008c05c:	db002e17 	ldw	r12,184(sp)
2008c060:	1805883a 	mov	r2,r3
2008c064:	dac02d15 	stw	r11,180(sp)
2008c068:	0319c83a 	sub	r12,zero,r12
2008c06c:	db002e15 	stw	r12,184(sp)
2008c070:	003acf06 	br	2008abb0 <__flash_rwdata_start+0xfffee568>
2008c074:	18800044 	addi	r2,r3,1
2008c078:	8c400814 	ori	r17,r17,32
2008c07c:	1c000047 	ldb	r16,1(r3)
2008c080:	003a4406 	br	2008a994 <__flash_rwdata_start+0xfffee34c>
2008c084:	d9002f17 	ldw	r4,188(sp)
2008c088:	b80b883a 	mov	r5,r23
2008c08c:	b00d883a 	mov	r6,r22
2008c090:	00934300 	call	20093430 <__ssprint_r>
2008c094:	103ab11e 	bne	r2,zero,2008ab5c <__flash_rwdata_start+0xfffee514>
2008c098:	d8c02017 	ldw	r3,128(sp)
2008c09c:	da000404 	addi	r8,sp,16
2008c0a0:	003d8a06 	br	2008b6cc <__flash_rwdata_start+0xfffef084>
2008c0a4:	057ff7c4 	movi	r21,-33
2008c0a8:	00bfffc4 	movi	r2,-1
2008c0ac:	856a703a 	and	r21,r16,r21
2008c0b0:	48807126 	beq	r9,r2,2008c278 <___svfprintf_internal_r+0x1a3c>
2008c0b4:	008011c4 	movi	r2,71
2008c0b8:	a8814d26 	beq	r21,r2,2008c5f0 <___svfprintf_internal_r+0x1db4>
2008c0bc:	db003817 	ldw	r12,224(sp)
2008c0c0:	8ac04014 	ori	r11,r17,256
2008c0c4:	dac02d15 	stw	r11,180(sp)
2008c0c8:	60015616 	blt	r12,zero,2008c624 <___svfprintf_internal_r+0x1de8>
2008c0cc:	dc803817 	ldw	r18,224(sp)
2008c0d0:	d8002a05 	stb	zero,168(sp)
2008c0d4:	00801984 	movi	r2,102
2008c0d8:	80808c26 	beq	r16,r2,2008c30c <___svfprintf_internal_r+0x1ad0>
2008c0dc:	00801184 	movi	r2,70
2008c0e0:	80808a26 	beq	r16,r2,2008c30c <___svfprintf_internal_r+0x1ad0>
2008c0e4:	00801144 	movi	r2,69
2008c0e8:	a8815226 	beq	r21,r2,2008c634 <___svfprintf_internal_r+0x1df8>
2008c0ec:	4839883a 	mov	fp,r9
2008c0f0:	d8802604 	addi	r2,sp,152
2008c0f4:	d8800115 	stw	r2,4(sp)
2008c0f8:	d9002f17 	ldw	r4,188(sp)
2008c0fc:	d8802504 	addi	r2,sp,148
2008c100:	d9403717 	ldw	r5,220(sp)
2008c104:	d8800215 	stw	r2,8(sp)
2008c108:	d8802104 	addi	r2,sp,132
2008c10c:	df000015 	stw	fp,0(sp)
2008c110:	d8800315 	stw	r2,12(sp)
2008c114:	900d883a 	mov	r6,r18
2008c118:	01c00084 	movi	r7,2
2008c11c:	da004015 	stw	r8,256(sp)
2008c120:	da403f15 	stw	r9,252(sp)
2008c124:	008ee140 	call	2008ee14 <_dtoa_r>
2008c128:	d8803115 	stw	r2,196(sp)
2008c12c:	008019c4 	movi	r2,103
2008c130:	da004017 	ldw	r8,256(sp)
2008c134:	da403f17 	ldw	r9,252(sp)
2008c138:	80800226 	beq	r16,r2,2008c144 <___svfprintf_internal_r+0x1908>
2008c13c:	008011c4 	movi	r2,71
2008c140:	8080841e 	bne	r16,r2,2008c354 <___svfprintf_internal_r+0x1b18>
2008c144:	8880004c 	andi	r2,r17,1
2008c148:	10014f26 	beq	r2,zero,2008c688 <___svfprintf_internal_r+0x1e4c>
2008c14c:	db003117 	ldw	r12,196(sp)
2008c150:	6715883a 	add	r10,r12,fp
2008c154:	d9003717 	ldw	r4,220(sp)
2008c158:	900b883a 	mov	r5,r18
2008c15c:	000d883a 	mov	r6,zero
2008c160:	000f883a 	mov	r7,zero
2008c164:	da004015 	stw	r8,256(sp)
2008c168:	da403f15 	stw	r9,252(sp)
2008c16c:	da803e15 	stw	r10,248(sp)
2008c170:	0096f400 	call	20096f40 <__eqdf2>
2008c174:	da004017 	ldw	r8,256(sp)
2008c178:	da403f17 	ldw	r9,252(sp)
2008c17c:	da803e17 	ldw	r10,248(sp)
2008c180:	1000d926 	beq	r2,zero,2008c4e8 <___svfprintf_internal_r+0x1cac>
2008c184:	d8802117 	ldw	r2,132(sp)
2008c188:	1280062e 	bgeu	r2,r10,2008c1a4 <___svfprintf_internal_r+0x1968>
2008c18c:	01000c04 	movi	r4,48
2008c190:	10c00044 	addi	r3,r2,1
2008c194:	d8c02115 	stw	r3,132(sp)
2008c198:	11000005 	stb	r4,0(r2)
2008c19c:	d8802117 	ldw	r2,132(sp)
2008c1a0:	12bffb36 	bltu	r2,r10,2008c190 <__flash_rwdata_start+0xfffefb48>
2008c1a4:	db003117 	ldw	r12,196(sp)
2008c1a8:	1305c83a 	sub	r2,r2,r12
2008c1ac:	d8803315 	stw	r2,204(sp)
2008c1b0:	008011c4 	movi	r2,71
2008c1b4:	a880b626 	beq	r21,r2,2008c490 <___svfprintf_internal_r+0x1c54>
2008c1b8:	00801944 	movi	r2,101
2008c1bc:	14017c0e 	bge	r2,r16,2008c7b0 <___svfprintf_internal_r+0x1f74>
2008c1c0:	00801984 	movi	r2,102
2008c1c4:	80812626 	beq	r16,r2,2008c660 <___svfprintf_internal_r+0x1e24>
2008c1c8:	db002617 	ldw	r12,152(sp)
2008c1cc:	db003415 	stw	r12,208(sp)
2008c1d0:	db003417 	ldw	r12,208(sp)
2008c1d4:	dac03317 	ldw	r11,204(sp)
2008c1d8:	62c11816 	blt	r12,r11,2008c63c <___svfprintf_internal_r+0x1e00>
2008c1dc:	8c40004c 	andi	r17,r17,1
2008c1e0:	88013b1e 	bne	r17,zero,2008c6d0 <___svfprintf_internal_r+0x1e94>
2008c1e4:	6005883a 	mov	r2,r12
2008c1e8:	60012516 	blt	r12,zero,2008c680 <___svfprintf_internal_r+0x1e44>
2008c1ec:	dc803417 	ldw	r18,208(sp)
2008c1f0:	df002a07 	ldb	fp,168(sp)
2008c1f4:	e000b01e 	bne	fp,zero,2008c4b8 <___svfprintf_internal_r+0x1c7c>
2008c1f8:	dc402d17 	ldw	r17,180(sp)
2008c1fc:	dd402783 	ldbu	r21,158(sp)
2008c200:	d8802a15 	stw	r2,168(sp)
2008c204:	dcc02d15 	stw	r19,180(sp)
2008c208:	d8003215 	stw	zero,200(sp)
2008c20c:	003ab706 	br	2008acec <__flash_rwdata_start+0xfffee6a4>
2008c210:	00800034 	movhi	r2,0
2008c214:	10817b04 	addi	r2,r2,1516
2008c218:	d8803115 	stw	r2,196(sp)
2008c21c:	003bbb06 	br	2008b10c <__flash_rwdata_start+0xfffeeac4>
2008c220:	d9002f17 	ldw	r4,188(sp)
2008c224:	04001004 	movi	r16,64
2008c228:	800b883a 	mov	r5,r16
2008c22c:	00899bc0 	call	200899bc <_malloc_r>
2008c230:	b8800015 	stw	r2,0(r23)
2008c234:	b8800415 	stw	r2,16(r23)
2008c238:	10015f26 	beq	r2,zero,2008c7b8 <___svfprintf_internal_r+0x1f7c>
2008c23c:	bc000515 	stw	r16,20(r23)
2008c240:	00399806 	br	2008a8a4 <__flash_rwdata_start+0xfffee25c>
2008c244:	00800034 	movhi	r2,0
2008c248:	10817e04 	addi	r2,r2,1528
2008c24c:	d8803115 	stw	r2,196(sp)
2008c250:	003f0406 	br	2008be64 <__flash_rwdata_start+0xfffef81c>
2008c254:	d9002f17 	ldw	r4,188(sp)
2008c258:	b80b883a 	mov	r5,r23
2008c25c:	b00d883a 	mov	r6,r22
2008c260:	00934300 	call	20093430 <__ssprint_r>
2008c264:	103a3d1e 	bne	r2,zero,2008ab5c <__flash_rwdata_start+0xfffee514>
2008c268:	dc002617 	ldw	r16,152(sp)
2008c26c:	d8c02017 	ldw	r3,128(sp)
2008c270:	da000404 	addi	r8,sp,16
2008c274:	003f4b06 	br	2008bfa4 <__flash_rwdata_start+0xfffef95c>
2008c278:	02400184 	movi	r9,6
2008c27c:	003f8f06 	br	2008c0bc <__flash_rwdata_start+0xfffefa74>
2008c280:	db002d17 	ldw	r12,180(sp)
2008c284:	14c00017 	ldw	r19,0(r2)
2008c288:	0039883a 	mov	fp,zero
2008c28c:	63000104 	addi	r12,r12,4
2008c290:	db002d15 	stw	r12,180(sp)
2008c294:	003bc706 	br	2008b1b4 <__flash_rwdata_start+0xfffeeb6c>
2008c298:	d8c03117 	ldw	r3,196(sp)
2008c29c:	b0e5c83a 	sub	r18,r22,r3
2008c2a0:	003a8d06 	br	2008acd8 <__flash_rwdata_start+0xfffee690>
2008c2a4:	da004015 	stw	r8,256(sp)
2008c2a8:	008a73c0 	call	2008a73c <strlen>
2008c2ac:	1025883a 	mov	r18,r2
2008c2b0:	da004017 	ldw	r8,256(sp)
2008c2b4:	903bf20e 	bge	r18,zero,2008b280 <__flash_rwdata_start+0xfffeec38>
2008c2b8:	0005883a 	mov	r2,zero
2008c2bc:	003bf006 	br	2008b280 <__flash_rwdata_start+0xfffeec38>
2008c2c0:	d9002f17 	ldw	r4,188(sp)
2008c2c4:	b80b883a 	mov	r5,r23
2008c2c8:	b00d883a 	mov	r6,r22
2008c2cc:	00934300 	call	20093430 <__ssprint_r>
2008c2d0:	103a221e 	bne	r2,zero,2008ab5c <__flash_rwdata_start+0xfffee514>
2008c2d4:	d8c02017 	ldw	r3,128(sp)
2008c2d8:	d8801f17 	ldw	r2,124(sp)
2008c2dc:	da000404 	addi	r8,sp,16
2008c2e0:	db003317 	ldw	r12,204(sp)
2008c2e4:	dac03117 	ldw	r11,196(sp)
2008c2e8:	10800044 	addi	r2,r2,1
2008c2ec:	1b07883a 	add	r3,r3,r12
2008c2f0:	42c00015 	stw	r11,0(r8)
2008c2f4:	43000115 	stw	r12,4(r8)
2008c2f8:	d8c02015 	stw	r3,128(sp)
2008c2fc:	d8801f15 	stw	r2,124(sp)
2008c300:	010001c4 	movi	r4,7
2008c304:	20bb210e 	bge	r4,r2,2008af8c <__flash_rwdata_start+0xfffee944>
2008c308:	003da206 	br	2008b994 <__flash_rwdata_start+0xfffef34c>
2008c30c:	d8802604 	addi	r2,sp,152
2008c310:	d8800115 	stw	r2,4(sp)
2008c314:	d9002f17 	ldw	r4,188(sp)
2008c318:	d8802504 	addi	r2,sp,148
2008c31c:	d9403717 	ldw	r5,220(sp)
2008c320:	d8800215 	stw	r2,8(sp)
2008c324:	d8802104 	addi	r2,sp,132
2008c328:	da400015 	stw	r9,0(sp)
2008c32c:	d8800315 	stw	r2,12(sp)
2008c330:	900d883a 	mov	r6,r18
2008c334:	01c000c4 	movi	r7,3
2008c338:	da004015 	stw	r8,256(sp)
2008c33c:	da403f15 	stw	r9,252(sp)
2008c340:	008ee140 	call	2008ee14 <_dtoa_r>
2008c344:	da403f17 	ldw	r9,252(sp)
2008c348:	da004017 	ldw	r8,256(sp)
2008c34c:	d8803115 	stw	r2,196(sp)
2008c350:	4839883a 	mov	fp,r9
2008c354:	dac03117 	ldw	r11,196(sp)
2008c358:	00801184 	movi	r2,70
2008c35c:	5f15883a 	add	r10,r11,fp
2008c360:	a8bf7c1e 	bne	r21,r2,2008c154 <__flash_rwdata_start+0xfffefb0c>
2008c364:	59000007 	ldb	r4,0(r11)
2008c368:	00800c04 	movi	r2,48
2008c36c:	2080c826 	beq	r4,r2,2008c690 <___svfprintf_internal_r+0x1e54>
2008c370:	d8c02617 	ldw	r3,152(sp)
2008c374:	50d5883a 	add	r10,r10,r3
2008c378:	003f7606 	br	2008c154 <__flash_rwdata_start+0xfffefb0c>
2008c37c:	01000034 	movhi	r4,0
2008c380:	21018f84 	addi	r4,r4,1598
2008c384:	d9003615 	stw	r4,216(sp)
2008c388:	003a9706 	br	2008ade8 <__flash_rwdata_start+0xfffee7a0>
2008c38c:	0025883a 	mov	r18,zero
2008c390:	003dc306 	br	2008baa0 <__flash_rwdata_start+0xfffef458>
2008c394:	d9002f17 	ldw	r4,188(sp)
2008c398:	b80b883a 	mov	r5,r23
2008c39c:	b00d883a 	mov	r6,r22
2008c3a0:	00934300 	call	20093430 <__ssprint_r>
2008c3a4:	1039ed1e 	bne	r2,zero,2008ab5c <__flash_rwdata_start+0xfffee514>
2008c3a8:	d8c02017 	ldw	r3,128(sp)
2008c3ac:	da000404 	addi	r8,sp,16
2008c3b0:	003dba06 	br	2008ba9c <__flash_rwdata_start+0xfffef454>
2008c3b4:	d9002f17 	ldw	r4,188(sp)
2008c3b8:	b80b883a 	mov	r5,r23
2008c3bc:	b00d883a 	mov	r6,r22
2008c3c0:	00934300 	call	20093430 <__ssprint_r>
2008c3c4:	1039e51e 	bne	r2,zero,2008ab5c <__flash_rwdata_start+0xfffee514>
2008c3c8:	d8802617 	ldw	r2,152(sp)
2008c3cc:	d8c02017 	ldw	r3,128(sp)
2008c3d0:	da000404 	addi	r8,sp,16
2008c3d4:	003e4106 	br	2008bcdc <__flash_rwdata_start+0xfffef694>
2008c3d8:	03000034 	movhi	r12,0
2008c3dc:	63018b84 	addi	r12,r12,1582
2008c3e0:	db002b15 	stw	r12,172(sp)
2008c3e4:	dac02b17 	ldw	r11,172(sp)
2008c3e8:	1c07883a 	add	r3,r3,r16
2008c3ec:	10800044 	addi	r2,r2,1
2008c3f0:	42c00015 	stw	r11,0(r8)
2008c3f4:	44000115 	stw	r16,4(r8)
2008c3f8:	d8c02015 	stw	r3,128(sp)
2008c3fc:	d8801f15 	stw	r2,124(sp)
2008c400:	010001c4 	movi	r4,7
2008c404:	20bfae16 	blt	r4,r2,2008c2c0 <__flash_rwdata_start+0xfffefc78>
2008c408:	42000204 	addi	r8,r8,8
2008c40c:	003fb406 	br	2008c2e0 <__flash_rwdata_start+0xfffefc98>
2008c410:	0021883a 	mov	r16,zero
2008c414:	003e4306 	br	2008bd24 <__flash_rwdata_start+0xfffef6dc>
2008c418:	d9002f17 	ldw	r4,188(sp)
2008c41c:	b80b883a 	mov	r5,r23
2008c420:	b00d883a 	mov	r6,r22
2008c424:	00934300 	call	20093430 <__ssprint_r>
2008c428:	1039cc1e 	bne	r2,zero,2008ab5c <__flash_rwdata_start+0xfffee514>
2008c42c:	d8802617 	ldw	r2,152(sp)
2008c430:	db003317 	ldw	r12,204(sp)
2008c434:	d8c02017 	ldw	r3,128(sp)
2008c438:	da000404 	addi	r8,sp,16
2008c43c:	6085c83a 	sub	r2,r12,r2
2008c440:	003e3706 	br	2008bd20 <__flash_rwdata_start+0xfffef6d8>
2008c444:	00800184 	movi	r2,6
2008c448:	1240012e 	bgeu	r2,r9,2008c450 <___svfprintf_internal_r+0x1c14>
2008c44c:	1013883a 	mov	r9,r2
2008c450:	4825883a 	mov	r18,r9
2008c454:	4805883a 	mov	r2,r9
2008c458:	4800a216 	blt	r9,zero,2008c6e4 <___svfprintf_internal_r+0x1ea8>
2008c45c:	d8802a15 	stw	r2,168(sp)
2008c460:	00800034 	movhi	r2,0
2008c464:	10818904 	addi	r2,r2,1572
2008c468:	d8803115 	stw	r2,196(sp)
2008c46c:	dcc02d15 	stw	r19,180(sp)
2008c470:	d8003215 	stw	zero,200(sp)
2008c474:	d8003415 	stw	zero,208(sp)
2008c478:	0005883a 	mov	r2,zero
2008c47c:	003a2206 	br	2008ad08 <__flash_rwdata_start+0xfffee6c0>
2008c480:	03000034 	movhi	r12,0
2008c484:	63018f84 	addi	r12,r12,1598
2008c488:	db003615 	stw	r12,216(sp)
2008c48c:	003ae506 	br	2008b024 <__flash_rwdata_start+0xfffee9dc>
2008c490:	d8c02617 	ldw	r3,152(sp)
2008c494:	00bfff44 	movi	r2,-3
2008c498:	18801516 	blt	r3,r2,2008c4f0 <___svfprintf_internal_r+0x1cb4>
2008c49c:	48c01416 	blt	r9,r3,2008c4f0 <___svfprintf_internal_r+0x1cb4>
2008c4a0:	d8c03415 	stw	r3,208(sp)
2008c4a4:	040019c4 	movi	r16,103
2008c4a8:	003f4906 	br	2008c1d0 <__flash_rwdata_start+0xfffefb88>
2008c4ac:	05400b44 	movi	r21,45
2008c4b0:	dd402785 	stb	r21,158(sp)
2008c4b4:	003b1006 	br	2008b0f8 <__flash_rwdata_start+0xfffeeab0>
2008c4b8:	00c00b44 	movi	r3,45
2008c4bc:	d8802a15 	stw	r2,168(sp)
2008c4c0:	dc402d17 	ldw	r17,180(sp)
2008c4c4:	d8c02785 	stb	r3,158(sp)
2008c4c8:	dcc02d15 	stw	r19,180(sp)
2008c4cc:	d8003215 	stw	zero,200(sp)
2008c4d0:	00800b44 	movi	r2,45
2008c4d4:	003a0906 	br	2008acfc <__flash_rwdata_start+0xfffee6b4>
2008c4d8:	01000034 	movhi	r4,0
2008c4dc:	21018b84 	addi	r4,r4,1582
2008c4e0:	d9002b15 	stw	r4,172(sp)
2008c4e4:	003cc306 	br	2008b7f4 <__flash_rwdata_start+0xfffef1ac>
2008c4e8:	5005883a 	mov	r2,r10
2008c4ec:	003f2d06 	br	2008c1a4 <__flash_rwdata_start+0xfffefb5c>
2008c4f0:	843fff84 	addi	r16,r16,-2
2008c4f4:	1f3fffc4 	addi	fp,r3,-1
2008c4f8:	df002615 	stw	fp,152(sp)
2008c4fc:	dc0022c5 	stb	r16,139(sp)
2008c500:	e000a016 	blt	fp,zero,2008c784 <___svfprintf_internal_r+0x1f48>
2008c504:	00800ac4 	movi	r2,43
2008c508:	d8802305 	stb	r2,140(sp)
2008c50c:	00800244 	movi	r2,9
2008c510:	1700800e 	bge	r2,fp,2008c714 <___svfprintf_internal_r+0x1ed8>
2008c514:	dd4022c4 	addi	r21,sp,139
2008c518:	dc002b15 	stw	r16,172(sp)
2008c51c:	4025883a 	mov	r18,r8
2008c520:	a821883a 	mov	r16,r21
2008c524:	e009883a 	mov	r4,fp
2008c528:	01400284 	movi	r5,10
2008c52c:	00867380 	call	20086738 <__modsi3>
2008c530:	10800c04 	addi	r2,r2,48
2008c534:	843fffc4 	addi	r16,r16,-1
2008c538:	e009883a 	mov	r4,fp
2008c53c:	01400284 	movi	r5,10
2008c540:	80800005 	stb	r2,0(r16)
2008c544:	00866e40 	call	200866e4 <__divsi3>
2008c548:	1039883a 	mov	fp,r2
2008c54c:	00800244 	movi	r2,9
2008c550:	173ff416 	blt	r2,fp,2008c524 <__flash_rwdata_start+0xfffefedc>
2008c554:	9011883a 	mov	r8,r18
2008c558:	e0800c04 	addi	r2,fp,48
2008c55c:	8025883a 	mov	r18,r16
2008c560:	913fffc4 	addi	r4,r18,-1
2008c564:	90bfffc5 	stb	r2,-1(r18)
2008c568:	dc002b17 	ldw	r16,172(sp)
2008c56c:	25408e2e 	bgeu	r4,r21,2008c7a8 <___svfprintf_internal_r+0x1f6c>
2008c570:	d9402384 	addi	r5,sp,142
2008c574:	2c8bc83a 	sub	r5,r5,r18
2008c578:	d8c02344 	addi	r3,sp,141
2008c57c:	a94b883a 	add	r5,r21,r5
2008c580:	00000106 	br	2008c588 <___svfprintf_internal_r+0x1d4c>
2008c584:	20800003 	ldbu	r2,0(r4)
2008c588:	18800005 	stb	r2,0(r3)
2008c58c:	18c00044 	addi	r3,r3,1
2008c590:	21000044 	addi	r4,r4,1
2008c594:	197ffb1e 	bne	r3,r5,2008c584 <__flash_rwdata_start+0xfffeff3c>
2008c598:	d8802304 	addi	r2,sp,140
2008c59c:	1485c83a 	sub	r2,r2,r18
2008c5a0:	d8c02344 	addi	r3,sp,141
2008c5a4:	1885883a 	add	r2,r3,r2
2008c5a8:	dac03317 	ldw	r11,204(sp)
2008c5ac:	156bc83a 	sub	r21,r2,r21
2008c5b0:	dd403a15 	stw	r21,232(sp)
2008c5b4:	00800044 	movi	r2,1
2008c5b8:	5d65883a 	add	r18,r11,r21
2008c5bc:	12c0770e 	bge	r2,r11,2008c79c <___svfprintf_internal_r+0x1f60>
2008c5c0:	94800044 	addi	r18,r18,1
2008c5c4:	9005883a 	mov	r2,r18
2008c5c8:	90007216 	blt	r18,zero,2008c794 <___svfprintf_internal_r+0x1f58>
2008c5cc:	d8003415 	stw	zero,208(sp)
2008c5d0:	003f0706 	br	2008c1f0 <__flash_rwdata_start+0xfffefba8>
2008c5d4:	da402a15 	stw	r9,168(sp)
2008c5d8:	dd402783 	ldbu	r21,158(sp)
2008c5dc:	4825883a 	mov	r18,r9
2008c5e0:	dcc02d15 	stw	r19,180(sp)
2008c5e4:	d8003215 	stw	zero,200(sp)
2008c5e8:	d8003415 	stw	zero,208(sp)
2008c5ec:	0039bf06 	br	2008acec <__flash_rwdata_start+0xfffee6a4>
2008c5f0:	483eb21e 	bne	r9,zero,2008c0bc <__flash_rwdata_start+0xfffefa74>
2008c5f4:	9013883a 	mov	r9,r18
2008c5f8:	003eb006 	br	2008c0bc <__flash_rwdata_start+0xfffefa74>
2008c5fc:	d9002f17 	ldw	r4,188(sp)
2008c600:	b80b883a 	mov	r5,r23
2008c604:	b00d883a 	mov	r6,r22
2008c608:	00934300 	call	20093430 <__ssprint_r>
2008c60c:	1039531e 	bne	r2,zero,2008ab5c <__flash_rwdata_start+0xfffee514>
2008c610:	dc002617 	ldw	r16,152(sp)
2008c614:	d8c02017 	ldw	r3,128(sp)
2008c618:	d8801f17 	ldw	r2,124(sp)
2008c61c:	da000404 	addi	r8,sp,16
2008c620:	003e7106 	br	2008bfe8 <__flash_rwdata_start+0xfffef9a0>
2008c624:	00c00b44 	movi	r3,45
2008c628:	64a0003c 	xorhi	r18,r12,32768
2008c62c:	d8c02a05 	stb	r3,168(sp)
2008c630:	003ea806 	br	2008c0d4 <__flash_rwdata_start+0xfffefa8c>
2008c634:	4f000044 	addi	fp,r9,1
2008c638:	003ead06 	br	2008c0f0 <__flash_rwdata_start+0xfffefaa8>
2008c63c:	d8c03417 	ldw	r3,208(sp)
2008c640:	00c0410e 	bge	zero,r3,2008c748 <___svfprintf_internal_r+0x1f0c>
2008c644:	04800044 	movi	r18,1
2008c648:	dac03317 	ldw	r11,204(sp)
2008c64c:	92e5883a 	add	r18,r18,r11
2008c650:	9005883a 	mov	r2,r18
2008c654:	903ee60e 	bge	r18,zero,2008c1f0 <__flash_rwdata_start+0xfffefba8>
2008c658:	0005883a 	mov	r2,zero
2008c65c:	003ee406 	br	2008c1f0 <__flash_rwdata_start+0xfffefba8>
2008c660:	d8c02617 	ldw	r3,152(sp)
2008c664:	d8c03415 	stw	r3,208(sp)
2008c668:	00c0310e 	bge	zero,r3,2008c730 <___svfprintf_internal_r+0x1ef4>
2008c66c:	48001f1e 	bne	r9,zero,2008c6ec <___svfprintf_internal_r+0x1eb0>
2008c670:	8c40004c 	andi	r17,r17,1
2008c674:	88001d1e 	bne	r17,zero,2008c6ec <___svfprintf_internal_r+0x1eb0>
2008c678:	1805883a 	mov	r2,r3
2008c67c:	183edb0e 	bge	r3,zero,2008c1ec <__flash_rwdata_start+0xfffefba4>
2008c680:	0005883a 	mov	r2,zero
2008c684:	003ed906 	br	2008c1ec <__flash_rwdata_start+0xfffefba4>
2008c688:	d8802117 	ldw	r2,132(sp)
2008c68c:	003ec506 	br	2008c1a4 <__flash_rwdata_start+0xfffefb5c>
2008c690:	d9003717 	ldw	r4,220(sp)
2008c694:	900b883a 	mov	r5,r18
2008c698:	000d883a 	mov	r6,zero
2008c69c:	000f883a 	mov	r7,zero
2008c6a0:	da004015 	stw	r8,256(sp)
2008c6a4:	da403f15 	stw	r9,252(sp)
2008c6a8:	da803e15 	stw	r10,248(sp)
2008c6ac:	0096f400 	call	20096f40 <__eqdf2>
2008c6b0:	da004017 	ldw	r8,256(sp)
2008c6b4:	da403f17 	ldw	r9,252(sp)
2008c6b8:	da803e17 	ldw	r10,248(sp)
2008c6bc:	103f2c26 	beq	r2,zero,2008c370 <__flash_rwdata_start+0xfffefd28>
2008c6c0:	00800044 	movi	r2,1
2008c6c4:	1707c83a 	sub	r3,r2,fp
2008c6c8:	d8c02615 	stw	r3,152(sp)
2008c6cc:	003f2906 	br	2008c374 <__flash_rwdata_start+0xfffefd2c>
2008c6d0:	db003417 	ldw	r12,208(sp)
2008c6d4:	64800044 	addi	r18,r12,1
2008c6d8:	9005883a 	mov	r2,r18
2008c6dc:	903ec40e 	bge	r18,zero,2008c1f0 <__flash_rwdata_start+0xfffefba8>
2008c6e0:	003fdd06 	br	2008c658 <__flash_rwdata_start+0xffff0010>
2008c6e4:	0005883a 	mov	r2,zero
2008c6e8:	003f5c06 	br	2008c45c <__flash_rwdata_start+0xfffefe14>
2008c6ec:	dac03417 	ldw	r11,208(sp)
2008c6f0:	4a400044 	addi	r9,r9,1
2008c6f4:	5a65883a 	add	r18,r11,r9
2008c6f8:	9005883a 	mov	r2,r18
2008c6fc:	903ebc0e 	bge	r18,zero,2008c1f0 <__flash_rwdata_start+0xfffefba8>
2008c700:	003fd506 	br	2008c658 <__flash_rwdata_start+0xffff0010>
2008c704:	00800034 	movhi	r2,0
2008c708:	10818b84 	addi	r2,r2,1582
2008c70c:	d8802b15 	stw	r2,172(sp)
2008c710:	003d2b06 	br	2008bbc0 <__flash_rwdata_start+0xfffef578>
2008c714:	00800c04 	movi	r2,48
2008c718:	e0c00c04 	addi	r3,fp,48
2008c71c:	d8802345 	stb	r2,141(sp)
2008c720:	d8c02385 	stb	r3,142(sp)
2008c724:	d88023c4 	addi	r2,sp,143
2008c728:	dd4022c4 	addi	r21,sp,139
2008c72c:	003f9e06 	br	2008c5a8 <__flash_rwdata_start+0xfffeff60>
2008c730:	4800081e 	bne	r9,zero,2008c754 <___svfprintf_internal_r+0x1f18>
2008c734:	8c40004c 	andi	r17,r17,1
2008c738:	8800061e 	bne	r17,zero,2008c754 <___svfprintf_internal_r+0x1f18>
2008c73c:	00800044 	movi	r2,1
2008c740:	1025883a 	mov	r18,r2
2008c744:	003eaa06 	br	2008c1f0 <__flash_rwdata_start+0xfffefba8>
2008c748:	04800084 	movi	r18,2
2008c74c:	90e5c83a 	sub	r18,r18,r3
2008c750:	003fbd06 	br	2008c648 <__flash_rwdata_start+0xffff0000>
2008c754:	4c800084 	addi	r18,r9,2
2008c758:	9005883a 	mov	r2,r18
2008c75c:	903ea40e 	bge	r18,zero,2008c1f0 <__flash_rwdata_start+0xfffefba8>
2008c760:	003fbd06 	br	2008c658 <__flash_rwdata_start+0xffff0010>
2008c764:	dac02d17 	ldw	r11,180(sp)
2008c768:	5a400017 	ldw	r9,0(r11)
2008c76c:	5ac00104 	addi	r11,r11,4
2008c770:	dac02d15 	stw	r11,180(sp)
2008c774:	483e410e 	bge	r9,zero,2008c07c <__flash_rwdata_start+0xfffefa34>
2008c778:	027fffc4 	movi	r9,-1
2008c77c:	1c000047 	ldb	r16,1(r3)
2008c780:	00388406 	br	2008a994 <__flash_rwdata_start+0xfffee34c>
2008c784:	00800b44 	movi	r2,45
2008c788:	0739c83a 	sub	fp,zero,fp
2008c78c:	d8802305 	stb	r2,140(sp)
2008c790:	003f5e06 	br	2008c50c <__flash_rwdata_start+0xfffefec4>
2008c794:	0005883a 	mov	r2,zero
2008c798:	003f8c06 	br	2008c5cc <__flash_rwdata_start+0xfffeff84>
2008c79c:	88a2703a 	and	r17,r17,r2
2008c7a0:	883f8826 	beq	r17,zero,2008c5c4 <__flash_rwdata_start+0xfffeff7c>
2008c7a4:	003f8606 	br	2008c5c0 <__flash_rwdata_start+0xfffeff78>
2008c7a8:	d8802344 	addi	r2,sp,141
2008c7ac:	003f7e06 	br	2008c5a8 <__flash_rwdata_start+0xfffeff60>
2008c7b0:	d8c02617 	ldw	r3,152(sp)
2008c7b4:	003f4f06 	br	2008c4f4 <__flash_rwdata_start+0xfffefeac>
2008c7b8:	dac02f17 	ldw	r11,188(sp)
2008c7bc:	00800304 	movi	r2,12
2008c7c0:	58800015 	stw	r2,0(r11)
2008c7c4:	00bfffc4 	movi	r2,-1
2008c7c8:	0038e806 	br	2008ab6c <__flash_rwdata_start+0xfffee524>

2008c7cc <___vfprintf_internal_r>:
2008c7cc:	deffb604 	addi	sp,sp,-296
2008c7d0:	dfc04915 	stw	ra,292(sp)
2008c7d4:	ddc04715 	stw	r23,284(sp)
2008c7d8:	dd804615 	stw	r22,280(sp)
2008c7dc:	282f883a 	mov	r23,r5
2008c7e0:	202d883a 	mov	r22,r4
2008c7e4:	d9802a15 	stw	r6,168(sp)
2008c7e8:	d9c02d15 	stw	r7,180(sp)
2008c7ec:	df004815 	stw	fp,288(sp)
2008c7f0:	dd404515 	stw	r21,276(sp)
2008c7f4:	dd004415 	stw	r20,272(sp)
2008c7f8:	dcc04315 	stw	r19,268(sp)
2008c7fc:	dc804215 	stw	r18,264(sp)
2008c800:	dc404115 	stw	r17,260(sp)
2008c804:	dc004015 	stw	r16,256(sp)
2008c808:	00916780 	call	20091678 <_localeconv_r>
2008c80c:	10800017 	ldw	r2,0(r2)
2008c810:	1009883a 	mov	r4,r2
2008c814:	d8803515 	stw	r2,212(sp)
2008c818:	008a73c0 	call	2008a73c <strlen>
2008c81c:	d8803815 	stw	r2,224(sp)
2008c820:	b0000226 	beq	r22,zero,2008c82c <___vfprintf_internal_r+0x60>
2008c824:	b0800e17 	ldw	r2,56(r22)
2008c828:	1000e126 	beq	r2,zero,2008cbb0 <___vfprintf_internal_r+0x3e4>
2008c82c:	b880030b 	ldhu	r2,12(r23)
2008c830:	10c8000c 	andi	r3,r2,8192
2008c834:	1800061e 	bne	r3,zero,2008c850 <___vfprintf_internal_r+0x84>
2008c838:	b9001917 	ldw	r4,100(r23)
2008c83c:	00f7ffc4 	movi	r3,-8193
2008c840:	10880014 	ori	r2,r2,8192
2008c844:	20c6703a 	and	r3,r4,r3
2008c848:	b880030d 	sth	r2,12(r23)
2008c84c:	b8c01915 	stw	r3,100(r23)
2008c850:	10c0020c 	andi	r3,r2,8
2008c854:	1800a726 	beq	r3,zero,2008caf4 <___vfprintf_internal_r+0x328>
2008c858:	b8c00417 	ldw	r3,16(r23)
2008c85c:	1800a526 	beq	r3,zero,2008caf4 <___vfprintf_internal_r+0x328>
2008c860:	1080068c 	andi	r2,r2,26
2008c864:	00c00284 	movi	r3,10
2008c868:	10c0aa26 	beq	r2,r3,2008cb14 <___vfprintf_internal_r+0x348>
2008c86c:	dac01e04 	addi	r11,sp,120
2008c870:	db001dc4 	addi	r12,sp,119
2008c874:	d8800404 	addi	r2,sp,16
2008c878:	05000034 	movhi	r20,0
2008c87c:	dac02815 	stw	r11,160(sp)
2008c880:	5b17c83a 	sub	r11,r11,r12
2008c884:	a5019384 	addi	r20,r20,1614
2008c888:	db002915 	stw	r12,164(sp)
2008c88c:	d8801e15 	stw	r2,120(sp)
2008c890:	d8002015 	stw	zero,128(sp)
2008c894:	d8001f15 	stw	zero,124(sp)
2008c898:	d8003315 	stw	zero,204(sp)
2008c89c:	d8003715 	stw	zero,220(sp)
2008c8a0:	d8003915 	stw	zero,228(sp)
2008c8a4:	1011883a 	mov	r8,r2
2008c8a8:	d8003b15 	stw	zero,236(sp)
2008c8ac:	d8003a15 	stw	zero,232(sp)
2008c8b0:	d8002f15 	stw	zero,188(sp)
2008c8b4:	dac03c15 	stw	r11,240(sp)
2008c8b8:	db002a17 	ldw	r12,168(sp)
2008c8bc:	60800007 	ldb	r2,0(r12)
2008c8c0:	1000be26 	beq	r2,zero,2008cbbc <___vfprintf_internal_r+0x3f0>
2008c8c4:	00c00944 	movi	r3,37
2008c8c8:	10c0bc26 	beq	r2,r3,2008cbbc <___vfprintf_internal_r+0x3f0>
2008c8cc:	6021883a 	mov	r16,r12
2008c8d0:	00000106 	br	2008c8d8 <___vfprintf_internal_r+0x10c>
2008c8d4:	10c08426 	beq	r2,r3,2008cae8 <___vfprintf_internal_r+0x31c>
2008c8d8:	84000044 	addi	r16,r16,1
2008c8dc:	80800007 	ldb	r2,0(r16)
2008c8e0:	103ffc1e 	bne	r2,zero,2008c8d4 <__flash_rwdata_start+0xffff028c>
2008c8e4:	dac02a17 	ldw	r11,168(sp)
2008c8e8:	82e3c83a 	sub	r17,r16,r11
2008c8ec:	88000f26 	beq	r17,zero,2008c92c <___vfprintf_internal_r+0x160>
2008c8f0:	d8c02017 	ldw	r3,128(sp)
2008c8f4:	d8801f17 	ldw	r2,124(sp)
2008c8f8:	dac02a17 	ldw	r11,168(sp)
2008c8fc:	1c47883a 	add	r3,r3,r17
2008c900:	10800044 	addi	r2,r2,1
2008c904:	d8c02015 	stw	r3,128(sp)
2008c908:	42c00015 	stw	r11,0(r8)
2008c90c:	44400115 	stw	r17,4(r8)
2008c910:	d8801f15 	stw	r2,124(sp)
2008c914:	00c001c4 	movi	r3,7
2008c918:	18809316 	blt	r3,r2,2008cb68 <___vfprintf_internal_r+0x39c>
2008c91c:	42000204 	addi	r8,r8,8
2008c920:	db002f17 	ldw	r12,188(sp)
2008c924:	6459883a 	add	r12,r12,r17
2008c928:	db002f15 	stw	r12,188(sp)
2008c92c:	80800007 	ldb	r2,0(r16)
2008c930:	10009426 	beq	r2,zero,2008cb84 <___vfprintf_internal_r+0x3b8>
2008c934:	80800044 	addi	r2,r16,1
2008c938:	84000047 	ldb	r16,1(r16)
2008c93c:	d8002785 	stb	zero,158(sp)
2008c940:	000d883a 	mov	r6,zero
2008c944:	027fffc4 	movi	r9,-1
2008c948:	d8002e15 	stw	zero,184(sp)
2008c94c:	0023883a 	mov	r17,zero
2008c950:	01001604 	movi	r4,88
2008c954:	01400244 	movi	r5,9
2008c958:	02800a84 	movi	r10,42
2008c95c:	01c01b04 	movi	r7,108
2008c960:	10c00044 	addi	r3,r2,1
2008c964:	80bff804 	addi	r2,r16,-32
2008c968:	2082cd36 	bltu	r4,r2,2008d4a0 <___vfprintf_internal_r+0xcd4>
2008c96c:	100490ba 	slli	r2,r2,2
2008c970:	02c80274 	movhi	r11,8201
2008c974:	5af26104 	addi	r11,r11,-13948
2008c978:	12c5883a 	add	r2,r2,r11
2008c97c:	10800017 	ldw	r2,0(r2)
2008c980:	1000683a 	jmp	r2
2008c984:	2008d2b8 	rdprs	zero,r4,9034
2008c988:	2008d4a0 	cmpeqi	zero,r4,9042
2008c98c:	2008d4a0 	cmpeqi	zero,r4,9042
2008c990:	2008d408 	cmpgei	zero,r4,9040
2008c994:	2008d4a0 	cmpeqi	zero,r4,9042
2008c998:	2008d4a0 	cmpeqi	zero,r4,9042
2008c99c:	2008d4a0 	cmpeqi	zero,r4,9042
2008c9a0:	2008d4a0 	cmpeqi	zero,r4,9042
2008c9a4:	2008d4a0 	cmpeqi	zero,r4,9042
2008c9a8:	2008d4a0 	cmpeqi	zero,r4,9042
2008c9ac:	2008d2d8 	cmpnei	zero,r4,9035
2008c9b0:	2008d304 	addi	zero,r4,9036
2008c9b4:	2008d4a0 	cmpeqi	zero,r4,9042
2008c9b8:	2008cbc4 	addi	zero,r4,9007
2008c9bc:	2008cbd4 	ori	zero,r4,9007
2008c9c0:	2008d4a0 	cmpeqi	zero,r4,9042
2008c9c4:	2008cc14 	ori	zero,r4,9008
2008c9c8:	2008cc24 	muli	zero,r4,9008
2008c9cc:	2008cc24 	muli	zero,r4,9008
2008c9d0:	2008cc24 	muli	zero,r4,9008
2008c9d4:	2008cc24 	muli	zero,r4,9008
2008c9d8:	2008cc24 	muli	zero,r4,9008
2008c9dc:	2008cc24 	muli	zero,r4,9008
2008c9e0:	2008cc24 	muli	zero,r4,9008
2008c9e4:	2008cc24 	muli	zero,r4,9008
2008c9e8:	2008cc24 	muli	zero,r4,9008
2008c9ec:	2008d4a0 	cmpeqi	zero,r4,9042
2008c9f0:	2008d4a0 	cmpeqi	zero,r4,9042
2008c9f4:	2008d4a0 	cmpeqi	zero,r4,9042
2008c9f8:	2008d4a0 	cmpeqi	zero,r4,9042
2008c9fc:	2008d4a0 	cmpeqi	zero,r4,9042
2008ca00:	2008d4a0 	cmpeqi	zero,r4,9042
2008ca04:	2008d4a0 	cmpeqi	zero,r4,9042
2008ca08:	2008d4a0 	cmpeqi	zero,r4,9042
2008ca0c:	2008d4a0 	cmpeqi	zero,r4,9042
2008ca10:	2008d4a0 	cmpeqi	zero,r4,9042
2008ca14:	2008cc58 	cmpnei	zero,r4,9009
2008ca18:	2008d0c8 	cmpgei	zero,r4,9027
2008ca1c:	2008d4a0 	cmpeqi	zero,r4,9042
2008ca20:	2008d0c8 	cmpgei	zero,r4,9027
2008ca24:	2008d4a0 	cmpeqi	zero,r4,9042
2008ca28:	2008d4a0 	cmpeqi	zero,r4,9042
2008ca2c:	2008d4a0 	cmpeqi	zero,r4,9042
2008ca30:	2008d4a0 	cmpeqi	zero,r4,9042
2008ca34:	2008d1b4 	orhi	zero,r4,9030
2008ca38:	2008d4a0 	cmpeqi	zero,r4,9042
2008ca3c:	2008d4a0 	cmpeqi	zero,r4,9042
2008ca40:	2008d05c 	xori	zero,r4,9025
2008ca44:	2008d4a0 	cmpeqi	zero,r4,9042
2008ca48:	2008d4a0 	cmpeqi	zero,r4,9042
2008ca4c:	2008d4a0 	cmpeqi	zero,r4,9042
2008ca50:	2008d4a0 	cmpeqi	zero,r4,9042
2008ca54:	2008d4a0 	cmpeqi	zero,r4,9042
2008ca58:	2008d098 	cmpnei	zero,r4,9026
2008ca5c:	2008d4a0 	cmpeqi	zero,r4,9042
2008ca60:	2008d4a0 	cmpeqi	zero,r4,9042
2008ca64:	2008d25c 	xori	zero,r4,9033
2008ca68:	2008d4a0 	cmpeqi	zero,r4,9042
2008ca6c:	2008d4a0 	cmpeqi	zero,r4,9042
2008ca70:	2008d4a0 	cmpeqi	zero,r4,9042
2008ca74:	2008d4a0 	cmpeqi	zero,r4,9042
2008ca78:	2008d4a0 	cmpeqi	zero,r4,9042
2008ca7c:	2008d4a0 	cmpeqi	zero,r4,9042
2008ca80:	2008d4a0 	cmpeqi	zero,r4,9042
2008ca84:	2008d4a0 	cmpeqi	zero,r4,9042
2008ca88:	2008d4a0 	cmpeqi	zero,r4,9042
2008ca8c:	2008d4a0 	cmpeqi	zero,r4,9042
2008ca90:	2008d314 	ori	zero,r4,9036
2008ca94:	2008d1c4 	addi	zero,r4,9031
2008ca98:	2008d0c8 	cmpgei	zero,r4,9027
2008ca9c:	2008d0c8 	cmpgei	zero,r4,9027
2008caa0:	2008d0c8 	cmpgei	zero,r4,9027
2008caa4:	2008d204 	addi	zero,r4,9032
2008caa8:	2008d1c4 	addi	zero,r4,9031
2008caac:	2008d4a0 	cmpeqi	zero,r4,9042
2008cab0:	2008d4a0 	cmpeqi	zero,r4,9042
2008cab4:	2008d214 	ori	zero,r4,9032
2008cab8:	2008d4a0 	cmpeqi	zero,r4,9042
2008cabc:	2008d228 	cmpgeui	zero,r4,9032
2008cac0:	2008d464 	muli	zero,r4,9041
2008cac4:	2008d16c 	andhi	zero,r4,9029
2008cac8:	2008d418 	cmpnei	zero,r4,9040
2008cacc:	2008d4a0 	cmpeqi	zero,r4,9042
2008cad0:	2008d354 	ori	zero,r4,9037
2008cad4:	2008d4a0 	cmpeqi	zero,r4,9042
2008cad8:	2008d428 	cmpgeui	zero,r4,9040
2008cadc:	2008d4a0 	cmpeqi	zero,r4,9042
2008cae0:	2008d4a0 	cmpeqi	zero,r4,9042
2008cae4:	2008d3c8 	cmpgei	zero,r4,9039
2008cae8:	db002a17 	ldw	r12,168(sp)
2008caec:	8323c83a 	sub	r17,r16,r12
2008caf0:	003f7e06 	br	2008c8ec <__flash_rwdata_start+0xffff02a4>
2008caf4:	b009883a 	mov	r4,r22
2008caf8:	b80b883a 	mov	r5,r23
2008cafc:	008e92c0 	call	2008e92c <__swsetup_r>
2008cb00:	10000c1e 	bne	r2,zero,2008cb34 <___vfprintf_internal_r+0x368>
2008cb04:	b880030b 	ldhu	r2,12(r23)
2008cb08:	00c00284 	movi	r3,10
2008cb0c:	1080068c 	andi	r2,r2,26
2008cb10:	10ff561e 	bne	r2,r3,2008c86c <__flash_rwdata_start+0xffff0224>
2008cb14:	b880038f 	ldh	r2,14(r23)
2008cb18:	103f5416 	blt	r2,zero,2008c86c <__flash_rwdata_start+0xffff0224>
2008cb1c:	d9802a17 	ldw	r6,168(sp)
2008cb20:	d9c02d17 	ldw	r7,180(sp)
2008cb24:	b009883a 	mov	r4,r22
2008cb28:	b80b883a 	mov	r5,r23
2008cb2c:	008e7400 	call	2008e740 <__sbprintf>
2008cb30:	00000106 	br	2008cb38 <___vfprintf_internal_r+0x36c>
2008cb34:	00bfffc4 	movi	r2,-1
2008cb38:	dfc04917 	ldw	ra,292(sp)
2008cb3c:	df004817 	ldw	fp,288(sp)
2008cb40:	ddc04717 	ldw	r23,284(sp)
2008cb44:	dd804617 	ldw	r22,280(sp)
2008cb48:	dd404517 	ldw	r21,276(sp)
2008cb4c:	dd004417 	ldw	r20,272(sp)
2008cb50:	dcc04317 	ldw	r19,268(sp)
2008cb54:	dc804217 	ldw	r18,264(sp)
2008cb58:	dc404117 	ldw	r17,260(sp)
2008cb5c:	dc004017 	ldw	r16,256(sp)
2008cb60:	dec04a04 	addi	sp,sp,296
2008cb64:	f800283a 	ret
2008cb68:	b009883a 	mov	r4,r22
2008cb6c:	b80b883a 	mov	r5,r23
2008cb70:	d9801e04 	addi	r6,sp,120
2008cb74:	00947300 	call	20094730 <__sprint_r>
2008cb78:	1000081e 	bne	r2,zero,2008cb9c <___vfprintf_internal_r+0x3d0>
2008cb7c:	da000404 	addi	r8,sp,16
2008cb80:	003f6706 	br	2008c920 <__flash_rwdata_start+0xffff02d8>
2008cb84:	d8802017 	ldw	r2,128(sp)
2008cb88:	10000426 	beq	r2,zero,2008cb9c <___vfprintf_internal_r+0x3d0>
2008cb8c:	b009883a 	mov	r4,r22
2008cb90:	b80b883a 	mov	r5,r23
2008cb94:	d9801e04 	addi	r6,sp,120
2008cb98:	00947300 	call	20094730 <__sprint_r>
2008cb9c:	b880030b 	ldhu	r2,12(r23)
2008cba0:	1080100c 	andi	r2,r2,64
2008cba4:	103fe31e 	bne	r2,zero,2008cb34 <__flash_rwdata_start+0xffff04ec>
2008cba8:	d8802f17 	ldw	r2,188(sp)
2008cbac:	003fe206 	br	2008cb38 <__flash_rwdata_start+0xffff04f0>
2008cbb0:	b009883a 	mov	r4,r22
2008cbb4:	0090b200 	call	20090b20 <__sinit>
2008cbb8:	003f1c06 	br	2008c82c <__flash_rwdata_start+0xffff01e4>
2008cbbc:	dc002a17 	ldw	r16,168(sp)
2008cbc0:	003f5a06 	br	2008c92c <__flash_rwdata_start+0xffff02e4>
2008cbc4:	1805883a 	mov	r2,r3
2008cbc8:	8c400114 	ori	r17,r17,4
2008cbcc:	1c000007 	ldb	r16,0(r3)
2008cbd0:	003f6306 	br	2008c960 <__flash_rwdata_start+0xffff0318>
2008cbd4:	1c000007 	ldb	r16,0(r3)
2008cbd8:	18800044 	addi	r2,r3,1
2008cbdc:	8286ad26 	beq	r16,r10,2008e694 <___vfprintf_internal_r+0x1ec8>
2008cbe0:	82fff404 	addi	r11,r16,-48
2008cbe4:	1007883a 	mov	r3,r2
2008cbe8:	0013883a 	mov	r9,zero
2008cbec:	2aff5d36 	bltu	r5,r11,2008c964 <__flash_rwdata_start+0xffff031c>
2008cbf0:	1c000007 	ldb	r16,0(r3)
2008cbf4:	4a4002a4 	muli	r9,r9,10
2008cbf8:	18c00044 	addi	r3,r3,1
2008cbfc:	5a53883a 	add	r9,r11,r9
2008cc00:	82fff404 	addi	r11,r16,-48
2008cc04:	2afffa2e 	bgeu	r5,r11,2008cbf0 <__flash_rwdata_start+0xffff05a8>
2008cc08:	483f560e 	bge	r9,zero,2008c964 <__flash_rwdata_start+0xffff031c>
2008cc0c:	027fffc4 	movi	r9,-1
2008cc10:	003f5406 	br	2008c964 <__flash_rwdata_start+0xffff031c>
2008cc14:	8c402014 	ori	r17,r17,128
2008cc18:	1805883a 	mov	r2,r3
2008cc1c:	1c000007 	ldb	r16,0(r3)
2008cc20:	003f4f06 	br	2008c960 <__flash_rwdata_start+0xffff0318>
2008cc24:	1805883a 	mov	r2,r3
2008cc28:	d8002e15 	stw	zero,184(sp)
2008cc2c:	82fff404 	addi	r11,r16,-48
2008cc30:	0019883a 	mov	r12,zero
2008cc34:	14000007 	ldb	r16,0(r2)
2008cc38:	630002a4 	muli	r12,r12,10
2008cc3c:	18c00044 	addi	r3,r3,1
2008cc40:	1805883a 	mov	r2,r3
2008cc44:	62d9883a 	add	r12,r12,r11
2008cc48:	82fff404 	addi	r11,r16,-48
2008cc4c:	2afff92e 	bgeu	r5,r11,2008cc34 <__flash_rwdata_start+0xffff05ec>
2008cc50:	db002e15 	stw	r12,184(sp)
2008cc54:	003f4306 	br	2008c964 <__flash_rwdata_start+0xffff031c>
2008cc58:	8c400414 	ori	r17,r17,16
2008cc5c:	d8c02a15 	stw	r3,168(sp)
2008cc60:	d9802785 	stb	r6,158(sp)
2008cc64:	8880080c 	andi	r2,r17,32
2008cc68:	d8c02d17 	ldw	r3,180(sp)
2008cc6c:	10015a26 	beq	r2,zero,2008d1d8 <___vfprintf_internal_r+0xa0c>
2008cc70:	db002d17 	ldw	r12,180(sp)
2008cc74:	18800117 	ldw	r2,4(r3)
2008cc78:	1cc00017 	ldw	r19,0(r3)
2008cc7c:	63000204 	addi	r12,r12,8
2008cc80:	db002d15 	stw	r12,180(sp)
2008cc84:	1039883a 	mov	fp,r2
2008cc88:	10044516 	blt	r2,zero,2008dda0 <___vfprintf_internal_r+0x15d4>
2008cc8c:	dd402783 	ldbu	r21,158(sp)
2008cc90:	da403215 	stw	r9,200(sp)
2008cc94:	00800044 	movi	r2,1
2008cc98:	9f06b03a 	or	r3,r19,fp
2008cc9c:	48000216 	blt	r9,zero,2008cca8 <___vfprintf_internal_r+0x4dc>
2008cca0:	013fdfc4 	movi	r4,-129
2008cca4:	8922703a 	and	r17,r17,r4
2008cca8:	1802071e 	bne	r3,zero,2008d4c8 <___vfprintf_internal_r+0xcfc>
2008ccac:	4802fa26 	beq	r9,zero,2008d898 <___vfprintf_internal_r+0x10cc>
2008ccb0:	10803fcc 	andi	r2,r2,255
2008ccb4:	00c00044 	movi	r3,1
2008ccb8:	10c22926 	beq	r2,r3,2008d560 <___vfprintf_internal_r+0xd94>
2008ccbc:	00c00084 	movi	r3,2
2008ccc0:	10c31726 	beq	r2,r3,2008d920 <___vfprintf_internal_r+0x1154>
2008ccc4:	d8c01e04 	addi	r3,sp,120
2008ccc8:	9808d0fa 	srli	r4,r19,3
2008cccc:	e00a977a 	slli	r5,fp,29
2008ccd0:	e038d0fa 	srli	fp,fp,3
2008ccd4:	9cc001cc 	andi	r19,r19,7
2008ccd8:	98800c04 	addi	r2,r19,48
2008ccdc:	18ffffc4 	addi	r3,r3,-1
2008cce0:	2926b03a 	or	r19,r5,r4
2008cce4:	18800005 	stb	r2,0(r3)
2008cce8:	9f08b03a 	or	r4,r19,fp
2008ccec:	203ff61e 	bne	r4,zero,2008ccc8 <__flash_rwdata_start+0xffff0680>
2008ccf0:	8900004c 	andi	r4,r17,1
2008ccf4:	d8c03115 	stw	r3,196(sp)
2008ccf8:	2003931e 	bne	r4,zero,2008db48 <___vfprintf_internal_r+0x137c>
2008ccfc:	dac02817 	ldw	r11,160(sp)
2008cd00:	58e5c83a 	sub	r18,r11,r3
2008cd04:	9005883a 	mov	r2,r18
2008cd08:	9240010e 	bge	r18,r9,2008cd10 <___vfprintf_internal_r+0x544>
2008cd0c:	4805883a 	mov	r2,r9
2008cd10:	d8802b15 	stw	r2,172(sp)
2008cd14:	d8003415 	stw	zero,208(sp)
2008cd18:	a8803fcc 	andi	r2,r21,255
2008cd1c:	1080201c 	xori	r2,r2,128
2008cd20:	10bfe004 	addi	r2,r2,-128
2008cd24:	10000326 	beq	r2,zero,2008cd34 <___vfprintf_internal_r+0x568>
2008cd28:	db002b17 	ldw	r12,172(sp)
2008cd2c:	63000044 	addi	r12,r12,1
2008cd30:	db002b15 	stw	r12,172(sp)
2008cd34:	88c0008c 	andi	r3,r17,2
2008cd38:	d8c02c15 	stw	r3,176(sp)
2008cd3c:	18000326 	beq	r3,zero,2008cd4c <___vfprintf_internal_r+0x580>
2008cd40:	dac02b17 	ldw	r11,172(sp)
2008cd44:	5ac00084 	addi	r11,r11,2
2008cd48:	dac02b15 	stw	r11,172(sp)
2008cd4c:	8b00210c 	andi	r12,r17,132
2008cd50:	db003015 	stw	r12,192(sp)
2008cd54:	6001da1e 	bne	r12,zero,2008d4c0 <___vfprintf_internal_r+0xcf4>
2008cd58:	dac02e17 	ldw	r11,184(sp)
2008cd5c:	db002b17 	ldw	r12,172(sp)
2008cd60:	5b39c83a 	sub	fp,r11,r12
2008cd64:	0701d60e 	bge	zero,fp,2008d4c0 <___vfprintf_internal_r+0xcf4>
2008cd68:	02400404 	movi	r9,16
2008cd6c:	d8c02017 	ldw	r3,128(sp)
2008cd70:	d8801f17 	ldw	r2,124(sp)
2008cd74:	4f053c0e 	bge	r9,fp,2008e268 <___vfprintf_internal_r+0x1a9c>
2008cd78:	01400034 	movhi	r5,0
2008cd7c:	29419784 	addi	r5,r5,1630
2008cd80:	d9403615 	stw	r5,216(sp)
2008cd84:	482b883a 	mov	r21,r9
2008cd88:	04c001c4 	movi	r19,7
2008cd8c:	00000306 	br	2008cd9c <___vfprintf_internal_r+0x5d0>
2008cd90:	e73ffc04 	addi	fp,fp,-16
2008cd94:	42000204 	addi	r8,r8,8
2008cd98:	af00130e 	bge	r21,fp,2008cde8 <___vfprintf_internal_r+0x61c>
2008cd9c:	02c00034 	movhi	r11,0
2008cda0:	18c00404 	addi	r3,r3,16
2008cda4:	10800044 	addi	r2,r2,1
2008cda8:	5ac19784 	addi	r11,r11,1630
2008cdac:	42c00015 	stw	r11,0(r8)
2008cdb0:	45400115 	stw	r21,4(r8)
2008cdb4:	d8c02015 	stw	r3,128(sp)
2008cdb8:	d8801f15 	stw	r2,124(sp)
2008cdbc:	98bff40e 	bge	r19,r2,2008cd90 <__flash_rwdata_start+0xffff0748>
2008cdc0:	b009883a 	mov	r4,r22
2008cdc4:	b80b883a 	mov	r5,r23
2008cdc8:	d9801e04 	addi	r6,sp,120
2008cdcc:	00947300 	call	20094730 <__sprint_r>
2008cdd0:	103f721e 	bne	r2,zero,2008cb9c <__flash_rwdata_start+0xffff0554>
2008cdd4:	e73ffc04 	addi	fp,fp,-16
2008cdd8:	d8c02017 	ldw	r3,128(sp)
2008cddc:	d8801f17 	ldw	r2,124(sp)
2008cde0:	da000404 	addi	r8,sp,16
2008cde4:	af3fed16 	blt	r21,fp,2008cd9c <__flash_rwdata_start+0xffff0754>
2008cde8:	db003617 	ldw	r12,216(sp)
2008cdec:	e0c7883a 	add	r3,fp,r3
2008cdf0:	10800044 	addi	r2,r2,1
2008cdf4:	43000015 	stw	r12,0(r8)
2008cdf8:	47000115 	stw	fp,4(r8)
2008cdfc:	d8c02015 	stw	r3,128(sp)
2008ce00:	d8801f15 	stw	r2,124(sp)
2008ce04:	010001c4 	movi	r4,7
2008ce08:	20830e16 	blt	r4,r2,2008da44 <___vfprintf_internal_r+0x1278>
2008ce0c:	d8802787 	ldb	r2,158(sp)
2008ce10:	42000204 	addi	r8,r8,8
2008ce14:	10000c26 	beq	r2,zero,2008ce48 <___vfprintf_internal_r+0x67c>
2008ce18:	d8801f17 	ldw	r2,124(sp)
2008ce1c:	d9002784 	addi	r4,sp,158
2008ce20:	18c00044 	addi	r3,r3,1
2008ce24:	10800044 	addi	r2,r2,1
2008ce28:	41000015 	stw	r4,0(r8)
2008ce2c:	01000044 	movi	r4,1
2008ce30:	41000115 	stw	r4,4(r8)
2008ce34:	d8c02015 	stw	r3,128(sp)
2008ce38:	d8801f15 	stw	r2,124(sp)
2008ce3c:	010001c4 	movi	r4,7
2008ce40:	2082a716 	blt	r4,r2,2008d8e0 <___vfprintf_internal_r+0x1114>
2008ce44:	42000204 	addi	r8,r8,8
2008ce48:	dac02c17 	ldw	r11,176(sp)
2008ce4c:	58000c26 	beq	r11,zero,2008ce80 <___vfprintf_internal_r+0x6b4>
2008ce50:	d8801f17 	ldw	r2,124(sp)
2008ce54:	d9002704 	addi	r4,sp,156
2008ce58:	18c00084 	addi	r3,r3,2
2008ce5c:	10800044 	addi	r2,r2,1
2008ce60:	41000015 	stw	r4,0(r8)
2008ce64:	01000084 	movi	r4,2
2008ce68:	41000115 	stw	r4,4(r8)
2008ce6c:	d8c02015 	stw	r3,128(sp)
2008ce70:	d8801f15 	stw	r2,124(sp)
2008ce74:	010001c4 	movi	r4,7
2008ce78:	2082a116 	blt	r4,r2,2008d900 <___vfprintf_internal_r+0x1134>
2008ce7c:	42000204 	addi	r8,r8,8
2008ce80:	db003017 	ldw	r12,192(sp)
2008ce84:	00802004 	movi	r2,128
2008ce88:	60820326 	beq	r12,r2,2008d698 <___vfprintf_internal_r+0xecc>
2008ce8c:	db003217 	ldw	r12,200(sp)
2008ce90:	64abc83a 	sub	r21,r12,r18
2008ce94:	0540260e 	bge	zero,r21,2008cf30 <___vfprintf_internal_r+0x764>
2008ce98:	07000404 	movi	fp,16
2008ce9c:	d8801f17 	ldw	r2,124(sp)
2008cea0:	e544570e 	bge	fp,r21,2008e000 <___vfprintf_internal_r+0x1834>
2008cea4:	01400034 	movhi	r5,0
2008cea8:	29419384 	addi	r5,r5,1614
2008ceac:	d9402c15 	stw	r5,176(sp)
2008ceb0:	04c001c4 	movi	r19,7
2008ceb4:	00000306 	br	2008cec4 <___vfprintf_internal_r+0x6f8>
2008ceb8:	ad7ffc04 	addi	r21,r21,-16
2008cebc:	42000204 	addi	r8,r8,8
2008cec0:	e540110e 	bge	fp,r21,2008cf08 <___vfprintf_internal_r+0x73c>
2008cec4:	18c00404 	addi	r3,r3,16
2008cec8:	10800044 	addi	r2,r2,1
2008cecc:	45000015 	stw	r20,0(r8)
2008ced0:	47000115 	stw	fp,4(r8)
2008ced4:	d8c02015 	stw	r3,128(sp)
2008ced8:	d8801f15 	stw	r2,124(sp)
2008cedc:	98bff60e 	bge	r19,r2,2008ceb8 <__flash_rwdata_start+0xffff0870>
2008cee0:	b009883a 	mov	r4,r22
2008cee4:	b80b883a 	mov	r5,r23
2008cee8:	d9801e04 	addi	r6,sp,120
2008ceec:	00947300 	call	20094730 <__sprint_r>
2008cef0:	103f2a1e 	bne	r2,zero,2008cb9c <__flash_rwdata_start+0xffff0554>
2008cef4:	ad7ffc04 	addi	r21,r21,-16
2008cef8:	d8c02017 	ldw	r3,128(sp)
2008cefc:	d8801f17 	ldw	r2,124(sp)
2008cf00:	da000404 	addi	r8,sp,16
2008cf04:	e57fef16 	blt	fp,r21,2008cec4 <__flash_rwdata_start+0xffff087c>
2008cf08:	dac02c17 	ldw	r11,176(sp)
2008cf0c:	1d47883a 	add	r3,r3,r21
2008cf10:	10800044 	addi	r2,r2,1
2008cf14:	42c00015 	stw	r11,0(r8)
2008cf18:	45400115 	stw	r21,4(r8)
2008cf1c:	d8c02015 	stw	r3,128(sp)
2008cf20:	d8801f15 	stw	r2,124(sp)
2008cf24:	010001c4 	movi	r4,7
2008cf28:	20826516 	blt	r4,r2,2008d8c0 <___vfprintf_internal_r+0x10f4>
2008cf2c:	42000204 	addi	r8,r8,8
2008cf30:	8880400c 	andi	r2,r17,256
2008cf34:	1001901e 	bne	r2,zero,2008d578 <___vfprintf_internal_r+0xdac>
2008cf38:	d8801f17 	ldw	r2,124(sp)
2008cf3c:	db003117 	ldw	r12,196(sp)
2008cf40:	1c87883a 	add	r3,r3,r18
2008cf44:	10800044 	addi	r2,r2,1
2008cf48:	43000015 	stw	r12,0(r8)
2008cf4c:	44800115 	stw	r18,4(r8)
2008cf50:	d8c02015 	stw	r3,128(sp)
2008cf54:	d8801f15 	stw	r2,124(sp)
2008cf58:	010001c4 	movi	r4,7
2008cf5c:	20824016 	blt	r4,r2,2008d860 <___vfprintf_internal_r+0x1094>
2008cf60:	42000204 	addi	r8,r8,8
2008cf64:	8c40010c 	andi	r17,r17,4
2008cf68:	88003126 	beq	r17,zero,2008d030 <___vfprintf_internal_r+0x864>
2008cf6c:	db002e17 	ldw	r12,184(sp)
2008cf70:	dac02b17 	ldw	r11,172(sp)
2008cf74:	62e1c83a 	sub	r16,r12,r11
2008cf78:	04002d0e 	bge	zero,r16,2008d030 <___vfprintf_internal_r+0x864>
2008cf7c:	04400404 	movi	r17,16
2008cf80:	d8801f17 	ldw	r2,124(sp)
2008cf84:	8c05150e 	bge	r17,r16,2008e3dc <___vfprintf_internal_r+0x1c10>
2008cf88:	01000034 	movhi	r4,0
2008cf8c:	21019784 	addi	r4,r4,1630
2008cf90:	d9003615 	stw	r4,216(sp)
2008cf94:	048001c4 	movi	r18,7
2008cf98:	00000306 	br	2008cfa8 <___vfprintf_internal_r+0x7dc>
2008cf9c:	843ffc04 	addi	r16,r16,-16
2008cfa0:	42000204 	addi	r8,r8,8
2008cfa4:	8c00130e 	bge	r17,r16,2008cff4 <___vfprintf_internal_r+0x828>
2008cfa8:	01400034 	movhi	r5,0
2008cfac:	18c00404 	addi	r3,r3,16
2008cfb0:	10800044 	addi	r2,r2,1
2008cfb4:	29419784 	addi	r5,r5,1630
2008cfb8:	41400015 	stw	r5,0(r8)
2008cfbc:	44400115 	stw	r17,4(r8)
2008cfc0:	d8c02015 	stw	r3,128(sp)
2008cfc4:	d8801f15 	stw	r2,124(sp)
2008cfc8:	90bff40e 	bge	r18,r2,2008cf9c <__flash_rwdata_start+0xffff0954>
2008cfcc:	b009883a 	mov	r4,r22
2008cfd0:	b80b883a 	mov	r5,r23
2008cfd4:	d9801e04 	addi	r6,sp,120
2008cfd8:	00947300 	call	20094730 <__sprint_r>
2008cfdc:	103eef1e 	bne	r2,zero,2008cb9c <__flash_rwdata_start+0xffff0554>
2008cfe0:	843ffc04 	addi	r16,r16,-16
2008cfe4:	d8c02017 	ldw	r3,128(sp)
2008cfe8:	d8801f17 	ldw	r2,124(sp)
2008cfec:	da000404 	addi	r8,sp,16
2008cff0:	8c3fed16 	blt	r17,r16,2008cfa8 <__flash_rwdata_start+0xffff0960>
2008cff4:	dac03617 	ldw	r11,216(sp)
2008cff8:	1c07883a 	add	r3,r3,r16
2008cffc:	10800044 	addi	r2,r2,1
2008d000:	42c00015 	stw	r11,0(r8)
2008d004:	44000115 	stw	r16,4(r8)
2008d008:	d8c02015 	stw	r3,128(sp)
2008d00c:	d8801f15 	stw	r2,124(sp)
2008d010:	010001c4 	movi	r4,7
2008d014:	2080060e 	bge	r4,r2,2008d030 <___vfprintf_internal_r+0x864>
2008d018:	b009883a 	mov	r4,r22
2008d01c:	b80b883a 	mov	r5,r23
2008d020:	d9801e04 	addi	r6,sp,120
2008d024:	00947300 	call	20094730 <__sprint_r>
2008d028:	103edc1e 	bne	r2,zero,2008cb9c <__flash_rwdata_start+0xffff0554>
2008d02c:	d8c02017 	ldw	r3,128(sp)
2008d030:	d8802b17 	ldw	r2,172(sp)
2008d034:	db002e17 	ldw	r12,184(sp)
2008d038:	1300010e 	bge	r2,r12,2008d040 <___vfprintf_internal_r+0x874>
2008d03c:	6005883a 	mov	r2,r12
2008d040:	dac02f17 	ldw	r11,188(sp)
2008d044:	5897883a 	add	r11,r11,r2
2008d048:	dac02f15 	stw	r11,188(sp)
2008d04c:	18020c1e 	bne	r3,zero,2008d880 <___vfprintf_internal_r+0x10b4>
2008d050:	d8001f15 	stw	zero,124(sp)
2008d054:	da000404 	addi	r8,sp,16
2008d058:	003e1706 	br	2008c8b8 <__flash_rwdata_start+0xffff0270>
2008d05c:	8c400414 	ori	r17,r17,16
2008d060:	d8c02a15 	stw	r3,168(sp)
2008d064:	8880080c 	andi	r2,r17,32
2008d068:	10010126 	beq	r2,zero,2008d470 <___vfprintf_internal_r+0xca4>
2008d06c:	db002d17 	ldw	r12,180(sp)
2008d070:	0005883a 	mov	r2,zero
2008d074:	64c00017 	ldw	r19,0(r12)
2008d078:	67000117 	ldw	fp,4(r12)
2008d07c:	63000204 	addi	r12,r12,8
2008d080:	db002d15 	stw	r12,180(sp)
2008d084:	9f06b03a 	or	r3,r19,fp
2008d088:	d8002785 	stb	zero,158(sp)
2008d08c:	da403215 	stw	r9,200(sp)
2008d090:	002b883a 	mov	r21,zero
2008d094:	003f0106 	br	2008cc9c <__flash_rwdata_start+0xffff0654>
2008d098:	8c400414 	ori	r17,r17,16
2008d09c:	d8c02a15 	stw	r3,168(sp)
2008d0a0:	8880080c 	andi	r2,r17,32
2008d0a4:	1000e326 	beq	r2,zero,2008d434 <___vfprintf_internal_r+0xc68>
2008d0a8:	dac02d17 	ldw	r11,180(sp)
2008d0ac:	00800044 	movi	r2,1
2008d0b0:	5cc00017 	ldw	r19,0(r11)
2008d0b4:	5f000117 	ldw	fp,4(r11)
2008d0b8:	5ac00204 	addi	r11,r11,8
2008d0bc:	dac02d15 	stw	r11,180(sp)
2008d0c0:	9f06b03a 	or	r3,r19,fp
2008d0c4:	003ff006 	br	2008d088 <__flash_rwdata_start+0xffff0a40>
2008d0c8:	db002d17 	ldw	r12,180(sp)
2008d0cc:	dac02d17 	ldw	r11,180(sp)
2008d0d0:	d8c02a15 	stw	r3,168(sp)
2008d0d4:	63000017 	ldw	r12,0(r12)
2008d0d8:	5ac00117 	ldw	r11,4(r11)
2008d0dc:	d9802785 	stb	r6,158(sp)
2008d0e0:	6009883a 	mov	r4,r12
2008d0e4:	580b883a 	mov	r5,r11
2008d0e8:	db003715 	stw	r12,220(sp)
2008d0ec:	da003f15 	stw	r8,252(sp)
2008d0f0:	da403e15 	stw	r9,248(sp)
2008d0f4:	dac03915 	stw	r11,228(sp)
2008d0f8:	009311c0 	call	2009311c <__fpclassifyd>
2008d0fc:	db002d17 	ldw	r12,180(sp)
2008d100:	04800044 	movi	r18,1
2008d104:	da003f17 	ldw	r8,252(sp)
2008d108:	64c00204 	addi	r19,r12,8
2008d10c:	da403e17 	ldw	r9,248(sp)
2008d110:	d9003717 	ldw	r4,220(sp)
2008d114:	d9403917 	ldw	r5,228(sp)
2008d118:	14832b1e 	bne	r2,r18,2008ddc8 <___vfprintf_internal_r+0x15fc>
2008d11c:	000d883a 	mov	r6,zero
2008d120:	000f883a 	mov	r7,zero
2008d124:	00970a40 	call	200970a4 <__ledf2>
2008d128:	da003f17 	ldw	r8,252(sp)
2008d12c:	1004b716 	blt	r2,zero,2008e40c <___vfprintf_internal_r+0x1c40>
2008d130:	dd402783 	ldbu	r21,158(sp)
2008d134:	008011c4 	movi	r2,71
2008d138:	14040e0e 	bge	r2,r16,2008e174 <___vfprintf_internal_r+0x19a8>
2008d13c:	00c00034 	movhi	r3,0
2008d140:	18c17c04 	addi	r3,r3,1520
2008d144:	d8c03115 	stw	r3,196(sp)
2008d148:	02c000c4 	movi	r11,3
2008d14c:	00bfdfc4 	movi	r2,-129
2008d150:	dac02b15 	stw	r11,172(sp)
2008d154:	88a2703a 	and	r17,r17,r2
2008d158:	dcc02d15 	stw	r19,180(sp)
2008d15c:	5825883a 	mov	r18,r11
2008d160:	d8003215 	stw	zero,200(sp)
2008d164:	d8003415 	stw	zero,208(sp)
2008d168:	003eeb06 	br	2008cd18 <__flash_rwdata_start+0xffff06d0>
2008d16c:	db002d17 	ldw	r12,180(sp)
2008d170:	00800c04 	movi	r2,48
2008d174:	d8802705 	stb	r2,156(sp)
2008d178:	64c00017 	ldw	r19,0(r12)
2008d17c:	00801e04 	movi	r2,120
2008d180:	d8802745 	stb	r2,157(sp)
2008d184:	00800034 	movhi	r2,0
2008d188:	10818404 	addi	r2,r2,1552
2008d18c:	63000104 	addi	r12,r12,4
2008d190:	d8c02a15 	stw	r3,168(sp)
2008d194:	d8803b15 	stw	r2,236(sp)
2008d198:	0039883a 	mov	fp,zero
2008d19c:	8c400094 	ori	r17,r17,2
2008d1a0:	db002d15 	stw	r12,180(sp)
2008d1a4:	00800084 	movi	r2,2
2008d1a8:	04001e04 	movi	r16,120
2008d1ac:	9807883a 	mov	r3,r19
2008d1b0:	003fb506 	br	2008d088 <__flash_rwdata_start+0xffff0a40>
2008d1b4:	8c400214 	ori	r17,r17,8
2008d1b8:	1805883a 	mov	r2,r3
2008d1bc:	1c000007 	ldb	r16,0(r3)
2008d1c0:	003de706 	br	2008c960 <__flash_rwdata_start+0xffff0318>
2008d1c4:	d8c02a15 	stw	r3,168(sp)
2008d1c8:	d9802785 	stb	r6,158(sp)
2008d1cc:	8880080c 	andi	r2,r17,32
2008d1d0:	d8c02d17 	ldw	r3,180(sp)
2008d1d4:	103ea61e 	bne	r2,zero,2008cc70 <__flash_rwdata_start+0xffff0628>
2008d1d8:	8880040c 	andi	r2,r17,16
2008d1dc:	1002221e 	bne	r2,zero,2008da68 <___vfprintf_internal_r+0x129c>
2008d1e0:	8880100c 	andi	r2,r17,64
2008d1e4:	10022026 	beq	r2,zero,2008da68 <___vfprintf_internal_r+0x129c>
2008d1e8:	1cc0000f 	ldh	r19,0(r3)
2008d1ec:	db002d17 	ldw	r12,180(sp)
2008d1f0:	9839d7fa 	srai	fp,r19,31
2008d1f4:	63000104 	addi	r12,r12,4
2008d1f8:	db002d15 	stw	r12,180(sp)
2008d1fc:	e005883a 	mov	r2,fp
2008d200:	003ea106 	br	2008cc88 <__flash_rwdata_start+0xffff0640>
2008d204:	8c401014 	ori	r17,r17,64
2008d208:	1805883a 	mov	r2,r3
2008d20c:	1c000007 	ldb	r16,0(r3)
2008d210:	003dd306 	br	2008c960 <__flash_rwdata_start+0xffff0318>
2008d214:	1c000007 	ldb	r16,0(r3)
2008d218:	81c3e926 	beq	r16,r7,2008e1c0 <___vfprintf_internal_r+0x19f4>
2008d21c:	8c400414 	ori	r17,r17,16
2008d220:	1805883a 	mov	r2,r3
2008d224:	003dce06 	br	2008c960 <__flash_rwdata_start+0xffff0318>
2008d228:	d8c02a15 	stw	r3,168(sp)
2008d22c:	d9802785 	stb	r6,158(sp)
2008d230:	8880080c 	andi	r2,r17,32
2008d234:	10034726 	beq	r2,zero,2008df54 <___vfprintf_internal_r+0x1788>
2008d238:	db002d17 	ldw	r12,180(sp)
2008d23c:	dac02f17 	ldw	r11,188(sp)
2008d240:	60800017 	ldw	r2,0(r12)
2008d244:	5807d7fa 	srai	r3,r11,31
2008d248:	63000104 	addi	r12,r12,4
2008d24c:	db002d15 	stw	r12,180(sp)
2008d250:	12c00015 	stw	r11,0(r2)
2008d254:	10c00115 	stw	r3,4(r2)
2008d258:	003d9706 	br	2008c8b8 <__flash_rwdata_start+0xffff0270>
2008d25c:	03000034 	movhi	r12,0
2008d260:	63017f04 	addi	r12,r12,1532
2008d264:	d8c02a15 	stw	r3,168(sp)
2008d268:	d9802785 	stb	r6,158(sp)
2008d26c:	db003b15 	stw	r12,236(sp)
2008d270:	88c0080c 	andi	r3,r17,32
2008d274:	d8802d17 	ldw	r2,180(sp)
2008d278:	18005b26 	beq	r3,zero,2008d3e8 <___vfprintf_internal_r+0xc1c>
2008d27c:	dac02d17 	ldw	r11,180(sp)
2008d280:	14c00017 	ldw	r19,0(r2)
2008d284:	17000117 	ldw	fp,4(r2)
2008d288:	5ac00204 	addi	r11,r11,8
2008d28c:	dac02d15 	stw	r11,180(sp)
2008d290:	8880004c 	andi	r2,r17,1
2008d294:	10022926 	beq	r2,zero,2008db3c <___vfprintf_internal_r+0x1370>
2008d298:	9f06b03a 	or	r3,r19,fp
2008d29c:	18032b26 	beq	r3,zero,2008df4c <___vfprintf_internal_r+0x1780>
2008d2a0:	00800c04 	movi	r2,48
2008d2a4:	d8802705 	stb	r2,156(sp)
2008d2a8:	dc002745 	stb	r16,157(sp)
2008d2ac:	8c400094 	ori	r17,r17,2
2008d2b0:	00800084 	movi	r2,2
2008d2b4:	003f7406 	br	2008d088 <__flash_rwdata_start+0xffff0a40>
2008d2b8:	30803fcc 	andi	r2,r6,255
2008d2bc:	1080201c 	xori	r2,r2,128
2008d2c0:	10bfe004 	addi	r2,r2,-128
2008d2c4:	1003351e 	bne	r2,zero,2008df9c <___vfprintf_internal_r+0x17d0>
2008d2c8:	1805883a 	mov	r2,r3
2008d2cc:	01800804 	movi	r6,32
2008d2d0:	1c000007 	ldb	r16,0(r3)
2008d2d4:	003da206 	br	2008c960 <__flash_rwdata_start+0xffff0318>
2008d2d8:	dac02d17 	ldw	r11,180(sp)
2008d2dc:	db002d17 	ldw	r12,180(sp)
2008d2e0:	5ac00017 	ldw	r11,0(r11)
2008d2e4:	dac02e15 	stw	r11,184(sp)
2008d2e8:	62c00104 	addi	r11,r12,4
2008d2ec:	db002e17 	ldw	r12,184(sp)
2008d2f0:	6003ad16 	blt	r12,zero,2008e1a8 <___vfprintf_internal_r+0x19dc>
2008d2f4:	dac02d15 	stw	r11,180(sp)
2008d2f8:	1805883a 	mov	r2,r3
2008d2fc:	1c000007 	ldb	r16,0(r3)
2008d300:	003d9706 	br	2008c960 <__flash_rwdata_start+0xffff0318>
2008d304:	1805883a 	mov	r2,r3
2008d308:	01800ac4 	movi	r6,43
2008d30c:	1c000007 	ldb	r16,0(r3)
2008d310:	003d9306 	br	2008c960 <__flash_rwdata_start+0xffff0318>
2008d314:	db002d17 	ldw	r12,180(sp)
2008d318:	d8c02a15 	stw	r3,168(sp)
2008d31c:	00c00044 	movi	r3,1
2008d320:	60800017 	ldw	r2,0(r12)
2008d324:	63000104 	addi	r12,r12,4
2008d328:	d8c02b15 	stw	r3,172(sp)
2008d32c:	d8002785 	stb	zero,158(sp)
2008d330:	d8801405 	stb	r2,80(sp)
2008d334:	db002d15 	stw	r12,180(sp)
2008d338:	dac01404 	addi	r11,sp,80
2008d33c:	1825883a 	mov	r18,r3
2008d340:	d8003215 	stw	zero,200(sp)
2008d344:	d8003415 	stw	zero,208(sp)
2008d348:	dac03115 	stw	r11,196(sp)
2008d34c:	0005883a 	mov	r2,zero
2008d350:	003e7806 	br	2008cd34 <__flash_rwdata_start+0xffff06ec>
2008d354:	dac02d17 	ldw	r11,180(sp)
2008d358:	db002d17 	ldw	r12,180(sp)
2008d35c:	d8c02a15 	stw	r3,168(sp)
2008d360:	5ac00017 	ldw	r11,0(r11)
2008d364:	d8002785 	stb	zero,158(sp)
2008d368:	64c00104 	addi	r19,r12,4
2008d36c:	dac03115 	stw	r11,196(sp)
2008d370:	5803fe26 	beq	r11,zero,2008e36c <___vfprintf_internal_r+0x1ba0>
2008d374:	d9003117 	ldw	r4,196(sp)
2008d378:	4803b416 	blt	r9,zero,2008e24c <___vfprintf_internal_r+0x1a80>
2008d37c:	480d883a 	mov	r6,r9
2008d380:	000b883a 	mov	r5,zero
2008d384:	da003f15 	stw	r8,252(sp)
2008d388:	da403e15 	stw	r9,248(sp)
2008d38c:	00918640 	call	20091864 <memchr>
2008d390:	da003f17 	ldw	r8,252(sp)
2008d394:	da403e17 	ldw	r9,248(sp)
2008d398:	10043026 	beq	r2,zero,2008e45c <___vfprintf_internal_r+0x1c90>
2008d39c:	d8c03117 	ldw	r3,196(sp)
2008d3a0:	10e5c83a 	sub	r18,r2,r3
2008d3a4:	4c836b16 	blt	r9,r18,2008e154 <___vfprintf_internal_r+0x1988>
2008d3a8:	9005883a 	mov	r2,r18
2008d3ac:	9003ac16 	blt	r18,zero,2008e260 <___vfprintf_internal_r+0x1a94>
2008d3b0:	dd402783 	ldbu	r21,158(sp)
2008d3b4:	d8802b15 	stw	r2,172(sp)
2008d3b8:	dcc02d15 	stw	r19,180(sp)
2008d3bc:	d8003215 	stw	zero,200(sp)
2008d3c0:	d8003415 	stw	zero,208(sp)
2008d3c4:	003e5406 	br	2008cd18 <__flash_rwdata_start+0xffff06d0>
2008d3c8:	00800034 	movhi	r2,0
2008d3cc:	10818404 	addi	r2,r2,1552
2008d3d0:	d8c02a15 	stw	r3,168(sp)
2008d3d4:	d8803b15 	stw	r2,236(sp)
2008d3d8:	d9802785 	stb	r6,158(sp)
2008d3dc:	88c0080c 	andi	r3,r17,32
2008d3e0:	d8802d17 	ldw	r2,180(sp)
2008d3e4:	183fa51e 	bne	r3,zero,2008d27c <__flash_rwdata_start+0xffff0c34>
2008d3e8:	88c0040c 	andi	r3,r17,16
2008d3ec:	1802ee26 	beq	r3,zero,2008dfa8 <___vfprintf_internal_r+0x17dc>
2008d3f0:	db002d17 	ldw	r12,180(sp)
2008d3f4:	14c00017 	ldw	r19,0(r2)
2008d3f8:	0039883a 	mov	fp,zero
2008d3fc:	63000104 	addi	r12,r12,4
2008d400:	db002d15 	stw	r12,180(sp)
2008d404:	003fa206 	br	2008d290 <__flash_rwdata_start+0xffff0c48>
2008d408:	8c400054 	ori	r17,r17,1
2008d40c:	1805883a 	mov	r2,r3
2008d410:	1c000007 	ldb	r16,0(r3)
2008d414:	003d5206 	br	2008c960 <__flash_rwdata_start+0xffff0318>
2008d418:	8c400814 	ori	r17,r17,32
2008d41c:	1805883a 	mov	r2,r3
2008d420:	1c000007 	ldb	r16,0(r3)
2008d424:	003d4e06 	br	2008c960 <__flash_rwdata_start+0xffff0318>
2008d428:	d8c02a15 	stw	r3,168(sp)
2008d42c:	8880080c 	andi	r2,r17,32
2008d430:	103f1d1e 	bne	r2,zero,2008d0a8 <__flash_rwdata_start+0xffff0a60>
2008d434:	8880040c 	andi	r2,r17,16
2008d438:	1001b81e 	bne	r2,zero,2008db1c <___vfprintf_internal_r+0x1350>
2008d43c:	8880100c 	andi	r2,r17,64
2008d440:	1001b626 	beq	r2,zero,2008db1c <___vfprintf_internal_r+0x1350>
2008d444:	dac02d17 	ldw	r11,180(sp)
2008d448:	0039883a 	mov	fp,zero
2008d44c:	00800044 	movi	r2,1
2008d450:	5cc0000b 	ldhu	r19,0(r11)
2008d454:	5ac00104 	addi	r11,r11,4
2008d458:	dac02d15 	stw	r11,180(sp)
2008d45c:	9807883a 	mov	r3,r19
2008d460:	003f0906 	br	2008d088 <__flash_rwdata_start+0xffff0a40>
2008d464:	d8c02a15 	stw	r3,168(sp)
2008d468:	8880080c 	andi	r2,r17,32
2008d46c:	103eff1e 	bne	r2,zero,2008d06c <__flash_rwdata_start+0xffff0a24>
2008d470:	8880040c 	andi	r2,r17,16
2008d474:	1001a11e 	bne	r2,zero,2008dafc <___vfprintf_internal_r+0x1330>
2008d478:	8880100c 	andi	r2,r17,64
2008d47c:	10019f26 	beq	r2,zero,2008dafc <___vfprintf_internal_r+0x1330>
2008d480:	db002d17 	ldw	r12,180(sp)
2008d484:	0039883a 	mov	fp,zero
2008d488:	0005883a 	mov	r2,zero
2008d48c:	64c0000b 	ldhu	r19,0(r12)
2008d490:	63000104 	addi	r12,r12,4
2008d494:	db002d15 	stw	r12,180(sp)
2008d498:	9807883a 	mov	r3,r19
2008d49c:	003efa06 	br	2008d088 <__flash_rwdata_start+0xffff0a40>
2008d4a0:	d8c02a15 	stw	r3,168(sp)
2008d4a4:	d9802785 	stb	r6,158(sp)
2008d4a8:	803db626 	beq	r16,zero,2008cb84 <__flash_rwdata_start+0xffff053c>
2008d4ac:	00c00044 	movi	r3,1
2008d4b0:	d8c02b15 	stw	r3,172(sp)
2008d4b4:	dc001405 	stb	r16,80(sp)
2008d4b8:	d8002785 	stb	zero,158(sp)
2008d4bc:	003f9e06 	br	2008d338 <__flash_rwdata_start+0xffff0cf0>
2008d4c0:	d8c02017 	ldw	r3,128(sp)
2008d4c4:	003e5306 	br	2008ce14 <__flash_rwdata_start+0xffff07cc>
2008d4c8:	10803fcc 	andi	r2,r2,255
2008d4cc:	00c00044 	movi	r3,1
2008d4d0:	10fdfa1e 	bne	r2,r3,2008ccbc <__flash_rwdata_start+0xffff0674>
2008d4d4:	e000021e 	bne	fp,zero,2008d4e0 <___vfprintf_internal_r+0xd14>
2008d4d8:	00800244 	movi	r2,9
2008d4dc:	14c0202e 	bgeu	r2,r19,2008d560 <___vfprintf_internal_r+0xd94>
2008d4e0:	dc002b15 	stw	r16,172(sp)
2008d4e4:	dc402c15 	stw	r17,176(sp)
2008d4e8:	9821883a 	mov	r16,r19
2008d4ec:	e023883a 	mov	r17,fp
2008d4f0:	dc801e04 	addi	r18,sp,120
2008d4f4:	4827883a 	mov	r19,r9
2008d4f8:	4039883a 	mov	fp,r8
2008d4fc:	8009883a 	mov	r4,r16
2008d500:	880b883a 	mov	r5,r17
2008d504:	01800284 	movi	r6,10
2008d508:	000f883a 	mov	r7,zero
2008d50c:	00969b00 	call	200969b0 <__umoddi3>
2008d510:	10800c04 	addi	r2,r2,48
2008d514:	94bfffc4 	addi	r18,r18,-1
2008d518:	8009883a 	mov	r4,r16
2008d51c:	880b883a 	mov	r5,r17
2008d520:	01800284 	movi	r6,10
2008d524:	000f883a 	mov	r7,zero
2008d528:	90800005 	stb	r2,0(r18)
2008d52c:	00963f00 	call	200963f0 <__udivdi3>
2008d530:	1021883a 	mov	r16,r2
2008d534:	10c4b03a 	or	r2,r2,r3
2008d538:	1823883a 	mov	r17,r3
2008d53c:	103fef1e 	bne	r2,zero,2008d4fc <__flash_rwdata_start+0xffff0eb4>
2008d540:	dac02817 	ldw	r11,160(sp)
2008d544:	dc803115 	stw	r18,196(sp)
2008d548:	dc002b17 	ldw	r16,172(sp)
2008d54c:	dc402c17 	ldw	r17,176(sp)
2008d550:	9813883a 	mov	r9,r19
2008d554:	e011883a 	mov	r8,fp
2008d558:	5ca5c83a 	sub	r18,r11,r18
2008d55c:	003de906 	br	2008cd04 <__flash_rwdata_start+0xffff06bc>
2008d560:	9cc00c04 	addi	r19,r19,48
2008d564:	d8c01dc4 	addi	r3,sp,119
2008d568:	dcc01dc5 	stb	r19,119(sp)
2008d56c:	dc803c17 	ldw	r18,240(sp)
2008d570:	d8c03115 	stw	r3,196(sp)
2008d574:	003de306 	br	2008cd04 <__flash_rwdata_start+0xffff06bc>
2008d578:	00801944 	movi	r2,101
2008d57c:	1400710e 	bge	r2,r16,2008d744 <___vfprintf_internal_r+0xf78>
2008d580:	d9003717 	ldw	r4,220(sp)
2008d584:	d9403917 	ldw	r5,228(sp)
2008d588:	000d883a 	mov	r6,zero
2008d58c:	000f883a 	mov	r7,zero
2008d590:	d8c03d15 	stw	r3,244(sp)
2008d594:	da003f15 	stw	r8,252(sp)
2008d598:	0096f400 	call	20096f40 <__eqdf2>
2008d59c:	d8c03d17 	ldw	r3,244(sp)
2008d5a0:	da003f17 	ldw	r8,252(sp)
2008d5a4:	1000ef1e 	bne	r2,zero,2008d964 <___vfprintf_internal_r+0x1198>
2008d5a8:	d8801f17 	ldw	r2,124(sp)
2008d5ac:	01000034 	movhi	r4,0
2008d5b0:	21018b04 	addi	r4,r4,1580
2008d5b4:	18c00044 	addi	r3,r3,1
2008d5b8:	10800044 	addi	r2,r2,1
2008d5bc:	41000015 	stw	r4,0(r8)
2008d5c0:	01000044 	movi	r4,1
2008d5c4:	41000115 	stw	r4,4(r8)
2008d5c8:	d8c02015 	stw	r3,128(sp)
2008d5cc:	d8801f15 	stw	r2,124(sp)
2008d5d0:	010001c4 	movi	r4,7
2008d5d4:	20828e16 	blt	r4,r2,2008e010 <___vfprintf_internal_r+0x1844>
2008d5d8:	42000204 	addi	r8,r8,8
2008d5dc:	d8802617 	ldw	r2,152(sp)
2008d5e0:	dac03317 	ldw	r11,204(sp)
2008d5e4:	12c00216 	blt	r2,r11,2008d5f0 <___vfprintf_internal_r+0xe24>
2008d5e8:	8880004c 	andi	r2,r17,1
2008d5ec:	103e5d26 	beq	r2,zero,2008cf64 <__flash_rwdata_start+0xffff091c>
2008d5f0:	db003817 	ldw	r12,224(sp)
2008d5f4:	d8801f17 	ldw	r2,124(sp)
2008d5f8:	dac03517 	ldw	r11,212(sp)
2008d5fc:	1b07883a 	add	r3,r3,r12
2008d600:	10800044 	addi	r2,r2,1
2008d604:	42c00015 	stw	r11,0(r8)
2008d608:	43000115 	stw	r12,4(r8)
2008d60c:	d8c02015 	stw	r3,128(sp)
2008d610:	d8801f15 	stw	r2,124(sp)
2008d614:	010001c4 	movi	r4,7
2008d618:	2082ed16 	blt	r4,r2,2008e1d0 <___vfprintf_internal_r+0x1a04>
2008d61c:	42000204 	addi	r8,r8,8
2008d620:	db003317 	ldw	r12,204(sp)
2008d624:	643fffc4 	addi	r16,r12,-1
2008d628:	043e4e0e 	bge	zero,r16,2008cf64 <__flash_rwdata_start+0xffff091c>
2008d62c:	04800404 	movi	r18,16
2008d630:	d8801f17 	ldw	r2,124(sp)
2008d634:	94007e0e 	bge	r18,r16,2008d830 <___vfprintf_internal_r+0x1064>
2008d638:	01400034 	movhi	r5,0
2008d63c:	29419384 	addi	r5,r5,1614
2008d640:	d9402c15 	stw	r5,176(sp)
2008d644:	054001c4 	movi	r21,7
2008d648:	00000306 	br	2008d658 <___vfprintf_internal_r+0xe8c>
2008d64c:	42000204 	addi	r8,r8,8
2008d650:	843ffc04 	addi	r16,r16,-16
2008d654:	9400790e 	bge	r18,r16,2008d83c <___vfprintf_internal_r+0x1070>
2008d658:	18c00404 	addi	r3,r3,16
2008d65c:	10800044 	addi	r2,r2,1
2008d660:	45000015 	stw	r20,0(r8)
2008d664:	44800115 	stw	r18,4(r8)
2008d668:	d8c02015 	stw	r3,128(sp)
2008d66c:	d8801f15 	stw	r2,124(sp)
2008d670:	a8bff60e 	bge	r21,r2,2008d64c <__flash_rwdata_start+0xffff1004>
2008d674:	b009883a 	mov	r4,r22
2008d678:	b80b883a 	mov	r5,r23
2008d67c:	d9801e04 	addi	r6,sp,120
2008d680:	00947300 	call	20094730 <__sprint_r>
2008d684:	103d451e 	bne	r2,zero,2008cb9c <__flash_rwdata_start+0xffff0554>
2008d688:	d8c02017 	ldw	r3,128(sp)
2008d68c:	d8801f17 	ldw	r2,124(sp)
2008d690:	da000404 	addi	r8,sp,16
2008d694:	003fee06 	br	2008d650 <__flash_rwdata_start+0xffff1008>
2008d698:	dac02e17 	ldw	r11,184(sp)
2008d69c:	db002b17 	ldw	r12,172(sp)
2008d6a0:	5b2bc83a 	sub	r21,r11,r12
2008d6a4:	057df90e 	bge	zero,r21,2008ce8c <__flash_rwdata_start+0xffff0844>
2008d6a8:	07000404 	movi	fp,16
2008d6ac:	d8801f17 	ldw	r2,124(sp)
2008d6b0:	e543640e 	bge	fp,r21,2008e444 <___vfprintf_internal_r+0x1c78>
2008d6b4:	01400034 	movhi	r5,0
2008d6b8:	29419384 	addi	r5,r5,1614
2008d6bc:	d9402c15 	stw	r5,176(sp)
2008d6c0:	04c001c4 	movi	r19,7
2008d6c4:	00000306 	br	2008d6d4 <___vfprintf_internal_r+0xf08>
2008d6c8:	ad7ffc04 	addi	r21,r21,-16
2008d6cc:	42000204 	addi	r8,r8,8
2008d6d0:	e540110e 	bge	fp,r21,2008d718 <___vfprintf_internal_r+0xf4c>
2008d6d4:	18c00404 	addi	r3,r3,16
2008d6d8:	10800044 	addi	r2,r2,1
2008d6dc:	45000015 	stw	r20,0(r8)
2008d6e0:	47000115 	stw	fp,4(r8)
2008d6e4:	d8c02015 	stw	r3,128(sp)
2008d6e8:	d8801f15 	stw	r2,124(sp)
2008d6ec:	98bff60e 	bge	r19,r2,2008d6c8 <__flash_rwdata_start+0xffff1080>
2008d6f0:	b009883a 	mov	r4,r22
2008d6f4:	b80b883a 	mov	r5,r23
2008d6f8:	d9801e04 	addi	r6,sp,120
2008d6fc:	00947300 	call	20094730 <__sprint_r>
2008d700:	103d261e 	bne	r2,zero,2008cb9c <__flash_rwdata_start+0xffff0554>
2008d704:	ad7ffc04 	addi	r21,r21,-16
2008d708:	d8c02017 	ldw	r3,128(sp)
2008d70c:	d8801f17 	ldw	r2,124(sp)
2008d710:	da000404 	addi	r8,sp,16
2008d714:	e57fef16 	blt	fp,r21,2008d6d4 <__flash_rwdata_start+0xffff108c>
2008d718:	dac02c17 	ldw	r11,176(sp)
2008d71c:	1d47883a 	add	r3,r3,r21
2008d720:	10800044 	addi	r2,r2,1
2008d724:	42c00015 	stw	r11,0(r8)
2008d728:	45400115 	stw	r21,4(r8)
2008d72c:	d8c02015 	stw	r3,128(sp)
2008d730:	d8801f15 	stw	r2,124(sp)
2008d734:	010001c4 	movi	r4,7
2008d738:	20819116 	blt	r4,r2,2008dd80 <___vfprintf_internal_r+0x15b4>
2008d73c:	42000204 	addi	r8,r8,8
2008d740:	003dd206 	br	2008ce8c <__flash_rwdata_start+0xffff0844>
2008d744:	db003317 	ldw	r12,204(sp)
2008d748:	00800044 	movi	r2,1
2008d74c:	18c00044 	addi	r3,r3,1
2008d750:	1301530e 	bge	r2,r12,2008dca0 <___vfprintf_internal_r+0x14d4>
2008d754:	dc001f17 	ldw	r16,124(sp)
2008d758:	dac03117 	ldw	r11,196(sp)
2008d75c:	00800044 	movi	r2,1
2008d760:	84000044 	addi	r16,r16,1
2008d764:	40800115 	stw	r2,4(r8)
2008d768:	42c00015 	stw	r11,0(r8)
2008d76c:	d8c02015 	stw	r3,128(sp)
2008d770:	dc001f15 	stw	r16,124(sp)
2008d774:	008001c4 	movi	r2,7
2008d778:	14016b16 	blt	r2,r16,2008dd28 <___vfprintf_internal_r+0x155c>
2008d77c:	42000204 	addi	r8,r8,8
2008d780:	db003817 	ldw	r12,224(sp)
2008d784:	dac03517 	ldw	r11,212(sp)
2008d788:	84000044 	addi	r16,r16,1
2008d78c:	1b07883a 	add	r3,r3,r12
2008d790:	42c00015 	stw	r11,0(r8)
2008d794:	43000115 	stw	r12,4(r8)
2008d798:	d8c02015 	stw	r3,128(sp)
2008d79c:	dc001f15 	stw	r16,124(sp)
2008d7a0:	008001c4 	movi	r2,7
2008d7a4:	14016916 	blt	r2,r16,2008dd4c <___vfprintf_internal_r+0x1580>
2008d7a8:	44800204 	addi	r18,r8,8
2008d7ac:	d9003717 	ldw	r4,220(sp)
2008d7b0:	d9403917 	ldw	r5,228(sp)
2008d7b4:	000d883a 	mov	r6,zero
2008d7b8:	000f883a 	mov	r7,zero
2008d7bc:	d8c03d15 	stw	r3,244(sp)
2008d7c0:	0096f400 	call	20096f40 <__eqdf2>
2008d7c4:	d8c03d17 	ldw	r3,244(sp)
2008d7c8:	db003317 	ldw	r12,204(sp)
2008d7cc:	1000ad26 	beq	r2,zero,2008da84 <___vfprintf_internal_r+0x12b8>
2008d7d0:	dac03117 	ldw	r11,196(sp)
2008d7d4:	60bfffc4 	addi	r2,r12,-1
2008d7d8:	1887883a 	add	r3,r3,r2
2008d7dc:	59000044 	addi	r4,r11,1
2008d7e0:	84000044 	addi	r16,r16,1
2008d7e4:	90800115 	stw	r2,4(r18)
2008d7e8:	91000015 	stw	r4,0(r18)
2008d7ec:	d8c02015 	stw	r3,128(sp)
2008d7f0:	dc001f15 	stw	r16,124(sp)
2008d7f4:	008001c4 	movi	r2,7
2008d7f8:	14014216 	blt	r2,r16,2008dd04 <___vfprintf_internal_r+0x1538>
2008d7fc:	94800204 	addi	r18,r18,8
2008d800:	dac03a17 	ldw	r11,232(sp)
2008d804:	dd4022c4 	addi	r21,sp,139
2008d808:	84000044 	addi	r16,r16,1
2008d80c:	1ac7883a 	add	r3,r3,r11
2008d810:	95400015 	stw	r21,0(r18)
2008d814:	92c00115 	stw	r11,4(r18)
2008d818:	d8c02015 	stw	r3,128(sp)
2008d81c:	dc001f15 	stw	r16,124(sp)
2008d820:	008001c4 	movi	r2,7
2008d824:	14000e16 	blt	r2,r16,2008d860 <___vfprintf_internal_r+0x1094>
2008d828:	92000204 	addi	r8,r18,8
2008d82c:	003dcd06 	br	2008cf64 <__flash_rwdata_start+0xffff091c>
2008d830:	01000034 	movhi	r4,0
2008d834:	21019384 	addi	r4,r4,1614
2008d838:	d9002c15 	stw	r4,176(sp)
2008d83c:	dac02c17 	ldw	r11,176(sp)
2008d840:	1c07883a 	add	r3,r3,r16
2008d844:	44000115 	stw	r16,4(r8)
2008d848:	42c00015 	stw	r11,0(r8)
2008d84c:	10800044 	addi	r2,r2,1
2008d850:	d8c02015 	stw	r3,128(sp)
2008d854:	d8801f15 	stw	r2,124(sp)
2008d858:	010001c4 	movi	r4,7
2008d85c:	20bdc00e 	bge	r4,r2,2008cf60 <__flash_rwdata_start+0xffff0918>
2008d860:	b009883a 	mov	r4,r22
2008d864:	b80b883a 	mov	r5,r23
2008d868:	d9801e04 	addi	r6,sp,120
2008d86c:	00947300 	call	20094730 <__sprint_r>
2008d870:	103cca1e 	bne	r2,zero,2008cb9c <__flash_rwdata_start+0xffff0554>
2008d874:	d8c02017 	ldw	r3,128(sp)
2008d878:	da000404 	addi	r8,sp,16
2008d87c:	003db906 	br	2008cf64 <__flash_rwdata_start+0xffff091c>
2008d880:	b009883a 	mov	r4,r22
2008d884:	b80b883a 	mov	r5,r23
2008d888:	d9801e04 	addi	r6,sp,120
2008d88c:	00947300 	call	20094730 <__sprint_r>
2008d890:	103def26 	beq	r2,zero,2008d050 <__flash_rwdata_start+0xffff0a08>
2008d894:	003cc106 	br	2008cb9c <__flash_rwdata_start+0xffff0554>
2008d898:	10803fcc 	andi	r2,r2,255
2008d89c:	1000651e 	bne	r2,zero,2008da34 <___vfprintf_internal_r+0x1268>
2008d8a0:	8880004c 	andi	r2,r17,1
2008d8a4:	10013226 	beq	r2,zero,2008dd70 <___vfprintf_internal_r+0x15a4>
2008d8a8:	00800c04 	movi	r2,48
2008d8ac:	d8c01dc4 	addi	r3,sp,119
2008d8b0:	d8801dc5 	stb	r2,119(sp)
2008d8b4:	dc803c17 	ldw	r18,240(sp)
2008d8b8:	d8c03115 	stw	r3,196(sp)
2008d8bc:	003d1106 	br	2008cd04 <__flash_rwdata_start+0xffff06bc>
2008d8c0:	b009883a 	mov	r4,r22
2008d8c4:	b80b883a 	mov	r5,r23
2008d8c8:	d9801e04 	addi	r6,sp,120
2008d8cc:	00947300 	call	20094730 <__sprint_r>
2008d8d0:	103cb21e 	bne	r2,zero,2008cb9c <__flash_rwdata_start+0xffff0554>
2008d8d4:	d8c02017 	ldw	r3,128(sp)
2008d8d8:	da000404 	addi	r8,sp,16
2008d8dc:	003d9406 	br	2008cf30 <__flash_rwdata_start+0xffff08e8>
2008d8e0:	b009883a 	mov	r4,r22
2008d8e4:	b80b883a 	mov	r5,r23
2008d8e8:	d9801e04 	addi	r6,sp,120
2008d8ec:	00947300 	call	20094730 <__sprint_r>
2008d8f0:	103caa1e 	bne	r2,zero,2008cb9c <__flash_rwdata_start+0xffff0554>
2008d8f4:	d8c02017 	ldw	r3,128(sp)
2008d8f8:	da000404 	addi	r8,sp,16
2008d8fc:	003d5206 	br	2008ce48 <__flash_rwdata_start+0xffff0800>
2008d900:	b009883a 	mov	r4,r22
2008d904:	b80b883a 	mov	r5,r23
2008d908:	d9801e04 	addi	r6,sp,120
2008d90c:	00947300 	call	20094730 <__sprint_r>
2008d910:	103ca21e 	bne	r2,zero,2008cb9c <__flash_rwdata_start+0xffff0554>
2008d914:	d8c02017 	ldw	r3,128(sp)
2008d918:	da000404 	addi	r8,sp,16
2008d91c:	003d5806 	br	2008ce80 <__flash_rwdata_start+0xffff0838>
2008d920:	d9403b17 	ldw	r5,236(sp)
2008d924:	d8c01e04 	addi	r3,sp,120
2008d928:	988003cc 	andi	r2,r19,15
2008d92c:	e008973a 	slli	r4,fp,28
2008d930:	2885883a 	add	r2,r5,r2
2008d934:	9826d13a 	srli	r19,r19,4
2008d938:	10800003 	ldbu	r2,0(r2)
2008d93c:	e038d13a 	srli	fp,fp,4
2008d940:	18ffffc4 	addi	r3,r3,-1
2008d944:	24e6b03a 	or	r19,r4,r19
2008d948:	18800005 	stb	r2,0(r3)
2008d94c:	9f04b03a 	or	r2,r19,fp
2008d950:	103ff51e 	bne	r2,zero,2008d928 <__flash_rwdata_start+0xffff12e0>
2008d954:	db002817 	ldw	r12,160(sp)
2008d958:	d8c03115 	stw	r3,196(sp)
2008d95c:	60e5c83a 	sub	r18,r12,r3
2008d960:	003ce806 	br	2008cd04 <__flash_rwdata_start+0xffff06bc>
2008d964:	dc002617 	ldw	r16,152(sp)
2008d968:	0401b10e 	bge	zero,r16,2008e030 <___vfprintf_internal_r+0x1864>
2008d96c:	db003117 	ldw	r12,196(sp)
2008d970:	dac03317 	ldw	r11,204(sp)
2008d974:	62e1883a 	add	r16,r12,r11
2008d978:	db003417 	ldw	r12,208(sp)
2008d97c:	5825883a 	mov	r18,r11
2008d980:	62c0010e 	bge	r12,r11,2008d988 <___vfprintf_internal_r+0x11bc>
2008d984:	6025883a 	mov	r18,r12
2008d988:	04800b0e 	bge	zero,r18,2008d9b8 <___vfprintf_internal_r+0x11ec>
2008d98c:	d8801f17 	ldw	r2,124(sp)
2008d990:	dac03117 	ldw	r11,196(sp)
2008d994:	1c87883a 	add	r3,r3,r18
2008d998:	10800044 	addi	r2,r2,1
2008d99c:	42c00015 	stw	r11,0(r8)
2008d9a0:	44800115 	stw	r18,4(r8)
2008d9a4:	d8c02015 	stw	r3,128(sp)
2008d9a8:	d8801f15 	stw	r2,124(sp)
2008d9ac:	010001c4 	movi	r4,7
2008d9b0:	20824f16 	blt	r4,r2,2008e2f0 <___vfprintf_internal_r+0x1b24>
2008d9b4:	42000204 	addi	r8,r8,8
2008d9b8:	90024b16 	blt	r18,zero,2008e2e8 <___vfprintf_internal_r+0x1b1c>
2008d9bc:	db003417 	ldw	r12,208(sp)
2008d9c0:	64a5c83a 	sub	r18,r12,r18
2008d9c4:	0480730e 	bge	zero,r18,2008db94 <___vfprintf_internal_r+0x13c8>
2008d9c8:	05400404 	movi	r21,16
2008d9cc:	d8801f17 	ldw	r2,124(sp)
2008d9d0:	ac817d0e 	bge	r21,r18,2008dfc8 <___vfprintf_internal_r+0x17fc>
2008d9d4:	01400034 	movhi	r5,0
2008d9d8:	29419384 	addi	r5,r5,1614
2008d9dc:	d9402c15 	stw	r5,176(sp)
2008d9e0:	070001c4 	movi	fp,7
2008d9e4:	00000306 	br	2008d9f4 <___vfprintf_internal_r+0x1228>
2008d9e8:	42000204 	addi	r8,r8,8
2008d9ec:	94bffc04 	addi	r18,r18,-16
2008d9f0:	ac81780e 	bge	r21,r18,2008dfd4 <___vfprintf_internal_r+0x1808>
2008d9f4:	18c00404 	addi	r3,r3,16
2008d9f8:	10800044 	addi	r2,r2,1
2008d9fc:	45000015 	stw	r20,0(r8)
2008da00:	45400115 	stw	r21,4(r8)
2008da04:	d8c02015 	stw	r3,128(sp)
2008da08:	d8801f15 	stw	r2,124(sp)
2008da0c:	e0bff60e 	bge	fp,r2,2008d9e8 <__flash_rwdata_start+0xffff13a0>
2008da10:	b009883a 	mov	r4,r22
2008da14:	b80b883a 	mov	r5,r23
2008da18:	d9801e04 	addi	r6,sp,120
2008da1c:	00947300 	call	20094730 <__sprint_r>
2008da20:	103c5e1e 	bne	r2,zero,2008cb9c <__flash_rwdata_start+0xffff0554>
2008da24:	d8c02017 	ldw	r3,128(sp)
2008da28:	d8801f17 	ldw	r2,124(sp)
2008da2c:	da000404 	addi	r8,sp,16
2008da30:	003fee06 	br	2008d9ec <__flash_rwdata_start+0xffff13a4>
2008da34:	dac01e04 	addi	r11,sp,120
2008da38:	0025883a 	mov	r18,zero
2008da3c:	dac03115 	stw	r11,196(sp)
2008da40:	003cb006 	br	2008cd04 <__flash_rwdata_start+0xffff06bc>
2008da44:	b009883a 	mov	r4,r22
2008da48:	b80b883a 	mov	r5,r23
2008da4c:	d9801e04 	addi	r6,sp,120
2008da50:	00947300 	call	20094730 <__sprint_r>
2008da54:	103c511e 	bne	r2,zero,2008cb9c <__flash_rwdata_start+0xffff0554>
2008da58:	d8c02017 	ldw	r3,128(sp)
2008da5c:	d8802787 	ldb	r2,158(sp)
2008da60:	da000404 	addi	r8,sp,16
2008da64:	003ceb06 	br	2008ce14 <__flash_rwdata_start+0xffff07cc>
2008da68:	1cc00017 	ldw	r19,0(r3)
2008da6c:	dac02d17 	ldw	r11,180(sp)
2008da70:	9839d7fa 	srai	fp,r19,31
2008da74:	5ac00104 	addi	r11,r11,4
2008da78:	dac02d15 	stw	r11,180(sp)
2008da7c:	e005883a 	mov	r2,fp
2008da80:	003c8106 	br	2008cc88 <__flash_rwdata_start+0xffff0640>
2008da84:	657fffc4 	addi	r21,r12,-1
2008da88:	057f5d0e 	bge	zero,r21,2008d800 <__flash_rwdata_start+0xffff11b8>
2008da8c:	07000404 	movi	fp,16
2008da90:	e540900e 	bge	fp,r21,2008dcd4 <___vfprintf_internal_r+0x1508>
2008da94:	01000034 	movhi	r4,0
2008da98:	21019384 	addi	r4,r4,1614
2008da9c:	d9002c15 	stw	r4,176(sp)
2008daa0:	01c001c4 	movi	r7,7
2008daa4:	00000306 	br	2008dab4 <___vfprintf_internal_r+0x12e8>
2008daa8:	94800204 	addi	r18,r18,8
2008daac:	ad7ffc04 	addi	r21,r21,-16
2008dab0:	e5408b0e 	bge	fp,r21,2008dce0 <___vfprintf_internal_r+0x1514>
2008dab4:	18c00404 	addi	r3,r3,16
2008dab8:	84000044 	addi	r16,r16,1
2008dabc:	95000015 	stw	r20,0(r18)
2008dac0:	97000115 	stw	fp,4(r18)
2008dac4:	d8c02015 	stw	r3,128(sp)
2008dac8:	dc001f15 	stw	r16,124(sp)
2008dacc:	3c3ff60e 	bge	r7,r16,2008daa8 <__flash_rwdata_start+0xffff1460>
2008dad0:	b009883a 	mov	r4,r22
2008dad4:	b80b883a 	mov	r5,r23
2008dad8:	d9801e04 	addi	r6,sp,120
2008dadc:	d9c03d15 	stw	r7,244(sp)
2008dae0:	00947300 	call	20094730 <__sprint_r>
2008dae4:	d9c03d17 	ldw	r7,244(sp)
2008dae8:	103c2c1e 	bne	r2,zero,2008cb9c <__flash_rwdata_start+0xffff0554>
2008daec:	d8c02017 	ldw	r3,128(sp)
2008daf0:	dc001f17 	ldw	r16,124(sp)
2008daf4:	dc800404 	addi	r18,sp,16
2008daf8:	003fec06 	br	2008daac <__flash_rwdata_start+0xffff1464>
2008dafc:	dac02d17 	ldw	r11,180(sp)
2008db00:	0039883a 	mov	fp,zero
2008db04:	0005883a 	mov	r2,zero
2008db08:	5cc00017 	ldw	r19,0(r11)
2008db0c:	5ac00104 	addi	r11,r11,4
2008db10:	dac02d15 	stw	r11,180(sp)
2008db14:	9807883a 	mov	r3,r19
2008db18:	003d5b06 	br	2008d088 <__flash_rwdata_start+0xffff0a40>
2008db1c:	db002d17 	ldw	r12,180(sp)
2008db20:	0039883a 	mov	fp,zero
2008db24:	00800044 	movi	r2,1
2008db28:	64c00017 	ldw	r19,0(r12)
2008db2c:	63000104 	addi	r12,r12,4
2008db30:	db002d15 	stw	r12,180(sp)
2008db34:	9807883a 	mov	r3,r19
2008db38:	003d5306 	br	2008d088 <__flash_rwdata_start+0xffff0a40>
2008db3c:	00800084 	movi	r2,2
2008db40:	9f06b03a 	or	r3,r19,fp
2008db44:	003d5006 	br	2008d088 <__flash_rwdata_start+0xffff0a40>
2008db48:	10803fcc 	andi	r2,r2,255
2008db4c:	1080201c 	xori	r2,r2,128
2008db50:	10bfe004 	addi	r2,r2,-128
2008db54:	01000c04 	movi	r4,48
2008db58:	1101a526 	beq	r2,r4,2008e1f0 <___vfprintf_internal_r+0x1a24>
2008db5c:	dac03117 	ldw	r11,196(sp)
2008db60:	db002817 	ldw	r12,160(sp)
2008db64:	193fffc5 	stb	r4,-1(r3)
2008db68:	5affffc4 	addi	r11,r11,-1
2008db6c:	dac03115 	stw	r11,196(sp)
2008db70:	62e5c83a 	sub	r18,r12,r11
2008db74:	003c6306 	br	2008cd04 <__flash_rwdata_start+0xffff06bc>
2008db78:	b009883a 	mov	r4,r22
2008db7c:	b80b883a 	mov	r5,r23
2008db80:	d9801e04 	addi	r6,sp,120
2008db84:	00947300 	call	20094730 <__sprint_r>
2008db88:	103c041e 	bne	r2,zero,2008cb9c <__flash_rwdata_start+0xffff0554>
2008db8c:	d8c02017 	ldw	r3,128(sp)
2008db90:	da000404 	addi	r8,sp,16
2008db94:	db003117 	ldw	r12,196(sp)
2008db98:	dac03417 	ldw	r11,208(sp)
2008db9c:	d8802617 	ldw	r2,152(sp)
2008dba0:	62e5883a 	add	r18,r12,r11
2008dba4:	db003317 	ldw	r12,204(sp)
2008dba8:	13000216 	blt	r2,r12,2008dbb4 <___vfprintf_internal_r+0x13e8>
2008dbac:	8900004c 	andi	r4,r17,1
2008dbb0:	20000c26 	beq	r4,zero,2008dbe4 <___vfprintf_internal_r+0x1418>
2008dbb4:	dac03817 	ldw	r11,224(sp)
2008dbb8:	d9001f17 	ldw	r4,124(sp)
2008dbbc:	db003517 	ldw	r12,212(sp)
2008dbc0:	1ac7883a 	add	r3,r3,r11
2008dbc4:	21000044 	addi	r4,r4,1
2008dbc8:	43000015 	stw	r12,0(r8)
2008dbcc:	42c00115 	stw	r11,4(r8)
2008dbd0:	d8c02015 	stw	r3,128(sp)
2008dbd4:	d9001f15 	stw	r4,124(sp)
2008dbd8:	014001c4 	movi	r5,7
2008dbdc:	2901cc16 	blt	r5,r4,2008e310 <___vfprintf_internal_r+0x1b44>
2008dbe0:	42000204 	addi	r8,r8,8
2008dbe4:	dac03317 	ldw	r11,204(sp)
2008dbe8:	8489c83a 	sub	r4,r16,r18
2008dbec:	5885c83a 	sub	r2,r11,r2
2008dbf0:	1021883a 	mov	r16,r2
2008dbf4:	2080010e 	bge	r4,r2,2008dbfc <___vfprintf_internal_r+0x1430>
2008dbf8:	2021883a 	mov	r16,r4
2008dbfc:	04000a0e 	bge	zero,r16,2008dc28 <___vfprintf_internal_r+0x145c>
2008dc00:	d9001f17 	ldw	r4,124(sp)
2008dc04:	1c07883a 	add	r3,r3,r16
2008dc08:	44800015 	stw	r18,0(r8)
2008dc0c:	21000044 	addi	r4,r4,1
2008dc10:	44000115 	stw	r16,4(r8)
2008dc14:	d8c02015 	stw	r3,128(sp)
2008dc18:	d9001f15 	stw	r4,124(sp)
2008dc1c:	014001c4 	movi	r5,7
2008dc20:	2901e316 	blt	r5,r4,2008e3b0 <___vfprintf_internal_r+0x1be4>
2008dc24:	42000204 	addi	r8,r8,8
2008dc28:	8001df16 	blt	r16,zero,2008e3a8 <___vfprintf_internal_r+0x1bdc>
2008dc2c:	1421c83a 	sub	r16,r2,r16
2008dc30:	043ccc0e 	bge	zero,r16,2008cf64 <__flash_rwdata_start+0xffff091c>
2008dc34:	04800404 	movi	r18,16
2008dc38:	d8801f17 	ldw	r2,124(sp)
2008dc3c:	943efc0e 	bge	r18,r16,2008d830 <__flash_rwdata_start+0xffff11e8>
2008dc40:	01400034 	movhi	r5,0
2008dc44:	29419384 	addi	r5,r5,1614
2008dc48:	d9402c15 	stw	r5,176(sp)
2008dc4c:	054001c4 	movi	r21,7
2008dc50:	00000306 	br	2008dc60 <___vfprintf_internal_r+0x1494>
2008dc54:	42000204 	addi	r8,r8,8
2008dc58:	843ffc04 	addi	r16,r16,-16
2008dc5c:	943ef70e 	bge	r18,r16,2008d83c <__flash_rwdata_start+0xffff11f4>
2008dc60:	18c00404 	addi	r3,r3,16
2008dc64:	10800044 	addi	r2,r2,1
2008dc68:	45000015 	stw	r20,0(r8)
2008dc6c:	44800115 	stw	r18,4(r8)
2008dc70:	d8c02015 	stw	r3,128(sp)
2008dc74:	d8801f15 	stw	r2,124(sp)
2008dc78:	a8bff60e 	bge	r21,r2,2008dc54 <__flash_rwdata_start+0xffff160c>
2008dc7c:	b009883a 	mov	r4,r22
2008dc80:	b80b883a 	mov	r5,r23
2008dc84:	d9801e04 	addi	r6,sp,120
2008dc88:	00947300 	call	20094730 <__sprint_r>
2008dc8c:	103bc31e 	bne	r2,zero,2008cb9c <__flash_rwdata_start+0xffff0554>
2008dc90:	d8c02017 	ldw	r3,128(sp)
2008dc94:	d8801f17 	ldw	r2,124(sp)
2008dc98:	da000404 	addi	r8,sp,16
2008dc9c:	003fee06 	br	2008dc58 <__flash_rwdata_start+0xffff1610>
2008dca0:	8888703a 	and	r4,r17,r2
2008dca4:	203eab1e 	bne	r4,zero,2008d754 <__flash_rwdata_start+0xffff110c>
2008dca8:	dc001f17 	ldw	r16,124(sp)
2008dcac:	db003117 	ldw	r12,196(sp)
2008dcb0:	40800115 	stw	r2,4(r8)
2008dcb4:	84000044 	addi	r16,r16,1
2008dcb8:	43000015 	stw	r12,0(r8)
2008dcbc:	d8c02015 	stw	r3,128(sp)
2008dcc0:	dc001f15 	stw	r16,124(sp)
2008dcc4:	008001c4 	movi	r2,7
2008dcc8:	14000e16 	blt	r2,r16,2008dd04 <___vfprintf_internal_r+0x1538>
2008dccc:	44800204 	addi	r18,r8,8
2008dcd0:	003ecb06 	br	2008d800 <__flash_rwdata_start+0xffff11b8>
2008dcd4:	00800034 	movhi	r2,0
2008dcd8:	10819384 	addi	r2,r2,1614
2008dcdc:	d8802c15 	stw	r2,176(sp)
2008dce0:	dac02c17 	ldw	r11,176(sp)
2008dce4:	1d47883a 	add	r3,r3,r21
2008dce8:	84000044 	addi	r16,r16,1
2008dcec:	92c00015 	stw	r11,0(r18)
2008dcf0:	95400115 	stw	r21,4(r18)
2008dcf4:	d8c02015 	stw	r3,128(sp)
2008dcf8:	dc001f15 	stw	r16,124(sp)
2008dcfc:	008001c4 	movi	r2,7
2008dd00:	143ebe0e 	bge	r2,r16,2008d7fc <__flash_rwdata_start+0xffff11b4>
2008dd04:	b009883a 	mov	r4,r22
2008dd08:	b80b883a 	mov	r5,r23
2008dd0c:	d9801e04 	addi	r6,sp,120
2008dd10:	00947300 	call	20094730 <__sprint_r>
2008dd14:	103ba11e 	bne	r2,zero,2008cb9c <__flash_rwdata_start+0xffff0554>
2008dd18:	d8c02017 	ldw	r3,128(sp)
2008dd1c:	dc001f17 	ldw	r16,124(sp)
2008dd20:	dc800404 	addi	r18,sp,16
2008dd24:	003eb606 	br	2008d800 <__flash_rwdata_start+0xffff11b8>
2008dd28:	b009883a 	mov	r4,r22
2008dd2c:	b80b883a 	mov	r5,r23
2008dd30:	d9801e04 	addi	r6,sp,120
2008dd34:	00947300 	call	20094730 <__sprint_r>
2008dd38:	103b981e 	bne	r2,zero,2008cb9c <__flash_rwdata_start+0xffff0554>
2008dd3c:	d8c02017 	ldw	r3,128(sp)
2008dd40:	dc001f17 	ldw	r16,124(sp)
2008dd44:	da000404 	addi	r8,sp,16
2008dd48:	003e8d06 	br	2008d780 <__flash_rwdata_start+0xffff1138>
2008dd4c:	b009883a 	mov	r4,r22
2008dd50:	b80b883a 	mov	r5,r23
2008dd54:	d9801e04 	addi	r6,sp,120
2008dd58:	00947300 	call	20094730 <__sprint_r>
2008dd5c:	103b8f1e 	bne	r2,zero,2008cb9c <__flash_rwdata_start+0xffff0554>
2008dd60:	d8c02017 	ldw	r3,128(sp)
2008dd64:	dc001f17 	ldw	r16,124(sp)
2008dd68:	dc800404 	addi	r18,sp,16
2008dd6c:	003e8f06 	br	2008d7ac <__flash_rwdata_start+0xffff1164>
2008dd70:	db001e04 	addi	r12,sp,120
2008dd74:	0025883a 	mov	r18,zero
2008dd78:	db003115 	stw	r12,196(sp)
2008dd7c:	003be106 	br	2008cd04 <__flash_rwdata_start+0xffff06bc>
2008dd80:	b009883a 	mov	r4,r22
2008dd84:	b80b883a 	mov	r5,r23
2008dd88:	d9801e04 	addi	r6,sp,120
2008dd8c:	00947300 	call	20094730 <__sprint_r>
2008dd90:	103b821e 	bne	r2,zero,2008cb9c <__flash_rwdata_start+0xffff0554>
2008dd94:	d8c02017 	ldw	r3,128(sp)
2008dd98:	da000404 	addi	r8,sp,16
2008dd9c:	003c3b06 	br	2008ce8c <__flash_rwdata_start+0xffff0844>
2008dda0:	04e7c83a 	sub	r19,zero,r19
2008dda4:	9804c03a 	cmpne	r2,r19,zero
2008dda8:	0739c83a 	sub	fp,zero,fp
2008ddac:	e0b9c83a 	sub	fp,fp,r2
2008ddb0:	05400b44 	movi	r21,45
2008ddb4:	dd402785 	stb	r21,158(sp)
2008ddb8:	da403215 	stw	r9,200(sp)
2008ddbc:	00800044 	movi	r2,1
2008ddc0:	9f06b03a 	or	r3,r19,fp
2008ddc4:	003bb506 	br	2008cc9c <__flash_rwdata_start+0xffff0654>
2008ddc8:	da003f15 	stw	r8,252(sp)
2008ddcc:	da403e15 	stw	r9,248(sp)
2008ddd0:	009311c0 	call	2009311c <__fpclassifyd>
2008ddd4:	da003f17 	ldw	r8,252(sp)
2008ddd8:	da403e17 	ldw	r9,248(sp)
2008dddc:	1000ce26 	beq	r2,zero,2008e118 <___vfprintf_internal_r+0x194c>
2008dde0:	057ff7c4 	movi	r21,-33
2008dde4:	00bfffc4 	movi	r2,-1
2008dde8:	856a703a 	and	r21,r16,r21
2008ddec:	4881e826 	beq	r9,r2,2008e590 <___vfprintf_internal_r+0x1dc4>
2008ddf0:	008011c4 	movi	r2,71
2008ddf4:	a881e326 	beq	r21,r2,2008e584 <___vfprintf_internal_r+0x1db8>
2008ddf8:	db003917 	ldw	r12,228(sp)
2008ddfc:	8ac04014 	ori	r11,r17,256
2008de00:	dac02d15 	stw	r11,180(sp)
2008de04:	6001ed16 	blt	r12,zero,2008e5bc <___vfprintf_internal_r+0x1df0>
2008de08:	dc803917 	ldw	r18,228(sp)
2008de0c:	d8002b05 	stb	zero,172(sp)
2008de10:	00801984 	movi	r2,102
2008de14:	80811826 	beq	r16,r2,2008e278 <___vfprintf_internal_r+0x1aac>
2008de18:	00801184 	movi	r2,70
2008de1c:	80811626 	beq	r16,r2,2008e278 <___vfprintf_internal_r+0x1aac>
2008de20:	00801144 	movi	r2,69
2008de24:	a881e926 	beq	r21,r2,2008e5cc <___vfprintf_internal_r+0x1e00>
2008de28:	4839883a 	mov	fp,r9
2008de2c:	d8802604 	addi	r2,sp,152
2008de30:	d8800115 	stw	r2,4(sp)
2008de34:	d9403717 	ldw	r5,220(sp)
2008de38:	d8802504 	addi	r2,sp,148
2008de3c:	d8800215 	stw	r2,8(sp)
2008de40:	d8802104 	addi	r2,sp,132
2008de44:	df000015 	stw	fp,0(sp)
2008de48:	d8800315 	stw	r2,12(sp)
2008de4c:	b009883a 	mov	r4,r22
2008de50:	900d883a 	mov	r6,r18
2008de54:	01c00084 	movi	r7,2
2008de58:	da003f15 	stw	r8,252(sp)
2008de5c:	da403e15 	stw	r9,248(sp)
2008de60:	008ee140 	call	2008ee14 <_dtoa_r>
2008de64:	d8803115 	stw	r2,196(sp)
2008de68:	008019c4 	movi	r2,103
2008de6c:	da003f17 	ldw	r8,252(sp)
2008de70:	da403e17 	ldw	r9,248(sp)
2008de74:	80800226 	beq	r16,r2,2008de80 <___vfprintf_internal_r+0x16b4>
2008de78:	008011c4 	movi	r2,71
2008de7c:	8081101e 	bne	r16,r2,2008e2c0 <___vfprintf_internal_r+0x1af4>
2008de80:	8880004c 	andi	r2,r17,1
2008de84:	1001dd26 	beq	r2,zero,2008e5fc <___vfprintf_internal_r+0x1e30>
2008de88:	db003117 	ldw	r12,196(sp)
2008de8c:	6715883a 	add	r10,r12,fp
2008de90:	d9003717 	ldw	r4,220(sp)
2008de94:	900b883a 	mov	r5,r18
2008de98:	000d883a 	mov	r6,zero
2008de9c:	000f883a 	mov	r7,zero
2008dea0:	da003f15 	stw	r8,252(sp)
2008dea4:	da403e15 	stw	r9,248(sp)
2008dea8:	da803d15 	stw	r10,244(sp)
2008deac:	0096f400 	call	20096f40 <__eqdf2>
2008deb0:	da003f17 	ldw	r8,252(sp)
2008deb4:	da403e17 	ldw	r9,248(sp)
2008deb8:	da803d17 	ldw	r10,244(sp)
2008debc:	10016526 	beq	r2,zero,2008e454 <___vfprintf_internal_r+0x1c88>
2008dec0:	d8802117 	ldw	r2,132(sp)
2008dec4:	1280062e 	bgeu	r2,r10,2008dee0 <___vfprintf_internal_r+0x1714>
2008dec8:	01000c04 	movi	r4,48
2008decc:	10c00044 	addi	r3,r2,1
2008ded0:	d8c02115 	stw	r3,132(sp)
2008ded4:	11000005 	stb	r4,0(r2)
2008ded8:	d8802117 	ldw	r2,132(sp)
2008dedc:	12bffb36 	bltu	r2,r10,2008decc <__flash_rwdata_start+0xffff1884>
2008dee0:	db003117 	ldw	r12,196(sp)
2008dee4:	1305c83a 	sub	r2,r2,r12
2008dee8:	d8803315 	stw	r2,204(sp)
2008deec:	008011c4 	movi	r2,71
2008def0:	a8814d26 	beq	r21,r2,2008e428 <___vfprintf_internal_r+0x1c5c>
2008def4:	00801944 	movi	r2,101
2008def8:	1402060e 	bge	r2,r16,2008e714 <___vfprintf_internal_r+0x1f48>
2008defc:	00801984 	movi	r2,102
2008df00:	8081b426 	beq	r16,r2,2008e5d4 <___vfprintf_internal_r+0x1e08>
2008df04:	db002617 	ldw	r12,152(sp)
2008df08:	db003415 	stw	r12,208(sp)
2008df0c:	db003417 	ldw	r12,208(sp)
2008df10:	dac03317 	ldw	r11,204(sp)
2008df14:	62c1a016 	blt	r12,r11,2008e598 <___vfprintf_internal_r+0x1dcc>
2008df18:	8c40004c 	andi	r17,r17,1
2008df1c:	8801bf1e 	bne	r17,zero,2008e61c <___vfprintf_internal_r+0x1e50>
2008df20:	6005883a 	mov	r2,r12
2008df24:	6001b316 	blt	r12,zero,2008e5f4 <___vfprintf_internal_r+0x1e28>
2008df28:	dc803417 	ldw	r18,208(sp)
2008df2c:	df002b07 	ldb	fp,172(sp)
2008df30:	e0012e1e 	bne	fp,zero,2008e3ec <___vfprintf_internal_r+0x1c20>
2008df34:	dc402d17 	ldw	r17,180(sp)
2008df38:	dd402783 	ldbu	r21,158(sp)
2008df3c:	d8802b15 	stw	r2,172(sp)
2008df40:	dcc02d15 	stw	r19,180(sp)
2008df44:	d8003215 	stw	zero,200(sp)
2008df48:	003b7306 	br	2008cd18 <__flash_rwdata_start+0xffff06d0>
2008df4c:	00800084 	movi	r2,2
2008df50:	003c4d06 	br	2008d088 <__flash_rwdata_start+0xffff0a40>
2008df54:	8880040c 	andi	r2,r17,16
2008df58:	1000091e 	bne	r2,zero,2008df80 <___vfprintf_internal_r+0x17b4>
2008df5c:	8c40100c 	andi	r17,r17,64
2008df60:	88000726 	beq	r17,zero,2008df80 <___vfprintf_internal_r+0x17b4>
2008df64:	db002d17 	ldw	r12,180(sp)
2008df68:	dac02f17 	ldw	r11,188(sp)
2008df6c:	60800017 	ldw	r2,0(r12)
2008df70:	63000104 	addi	r12,r12,4
2008df74:	db002d15 	stw	r12,180(sp)
2008df78:	12c0000d 	sth	r11,0(r2)
2008df7c:	003a4e06 	br	2008c8b8 <__flash_rwdata_start+0xffff0270>
2008df80:	db002d17 	ldw	r12,180(sp)
2008df84:	dac02f17 	ldw	r11,188(sp)
2008df88:	60800017 	ldw	r2,0(r12)
2008df8c:	63000104 	addi	r12,r12,4
2008df90:	db002d15 	stw	r12,180(sp)
2008df94:	12c00015 	stw	r11,0(r2)
2008df98:	003a4706 	br	2008c8b8 <__flash_rwdata_start+0xffff0270>
2008df9c:	1c000007 	ldb	r16,0(r3)
2008dfa0:	1805883a 	mov	r2,r3
2008dfa4:	003a6e06 	br	2008c960 <__flash_rwdata_start+0xffff0318>
2008dfa8:	88c0100c 	andi	r3,r17,64
2008dfac:	18006b26 	beq	r3,zero,2008e15c <___vfprintf_internal_r+0x1990>
2008dfb0:	dac02d17 	ldw	r11,180(sp)
2008dfb4:	14c0000b 	ldhu	r19,0(r2)
2008dfb8:	0039883a 	mov	fp,zero
2008dfbc:	5ac00104 	addi	r11,r11,4
2008dfc0:	dac02d15 	stw	r11,180(sp)
2008dfc4:	003cb206 	br	2008d290 <__flash_rwdata_start+0xffff0c48>
2008dfc8:	01000034 	movhi	r4,0
2008dfcc:	21019384 	addi	r4,r4,1614
2008dfd0:	d9002c15 	stw	r4,176(sp)
2008dfd4:	dac02c17 	ldw	r11,176(sp)
2008dfd8:	1c87883a 	add	r3,r3,r18
2008dfdc:	10800044 	addi	r2,r2,1
2008dfe0:	42c00015 	stw	r11,0(r8)
2008dfe4:	44800115 	stw	r18,4(r8)
2008dfe8:	d8c02015 	stw	r3,128(sp)
2008dfec:	d8801f15 	stw	r2,124(sp)
2008dff0:	010001c4 	movi	r4,7
2008dff4:	20bee016 	blt	r4,r2,2008db78 <__flash_rwdata_start+0xffff1530>
2008dff8:	42000204 	addi	r8,r8,8
2008dffc:	003ee506 	br	2008db94 <__flash_rwdata_start+0xffff154c>
2008e000:	01000034 	movhi	r4,0
2008e004:	21019384 	addi	r4,r4,1614
2008e008:	d9002c15 	stw	r4,176(sp)
2008e00c:	003bbe06 	br	2008cf08 <__flash_rwdata_start+0xffff08c0>
2008e010:	b009883a 	mov	r4,r22
2008e014:	b80b883a 	mov	r5,r23
2008e018:	d9801e04 	addi	r6,sp,120
2008e01c:	00947300 	call	20094730 <__sprint_r>
2008e020:	103ade1e 	bne	r2,zero,2008cb9c <__flash_rwdata_start+0xffff0554>
2008e024:	d8c02017 	ldw	r3,128(sp)
2008e028:	da000404 	addi	r8,sp,16
2008e02c:	003d6b06 	br	2008d5dc <__flash_rwdata_start+0xffff0f94>
2008e030:	d8801f17 	ldw	r2,124(sp)
2008e034:	03000034 	movhi	r12,0
2008e038:	01000044 	movi	r4,1
2008e03c:	18c00044 	addi	r3,r3,1
2008e040:	10800044 	addi	r2,r2,1
2008e044:	63018b04 	addi	r12,r12,1580
2008e048:	41000115 	stw	r4,4(r8)
2008e04c:	43000015 	stw	r12,0(r8)
2008e050:	d8c02015 	stw	r3,128(sp)
2008e054:	d8801f15 	stw	r2,124(sp)
2008e058:	010001c4 	movi	r4,7
2008e05c:	20804916 	blt	r4,r2,2008e184 <___vfprintf_internal_r+0x19b8>
2008e060:	42000204 	addi	r8,r8,8
2008e064:	8000041e 	bne	r16,zero,2008e078 <___vfprintf_internal_r+0x18ac>
2008e068:	dac03317 	ldw	r11,204(sp)
2008e06c:	5800021e 	bne	r11,zero,2008e078 <___vfprintf_internal_r+0x18ac>
2008e070:	8880004c 	andi	r2,r17,1
2008e074:	103bbb26 	beq	r2,zero,2008cf64 <__flash_rwdata_start+0xffff091c>
2008e078:	db003817 	ldw	r12,224(sp)
2008e07c:	d8801f17 	ldw	r2,124(sp)
2008e080:	dac03517 	ldw	r11,212(sp)
2008e084:	1b07883a 	add	r3,r3,r12
2008e088:	10800044 	addi	r2,r2,1
2008e08c:	42c00015 	stw	r11,0(r8)
2008e090:	43000115 	stw	r12,4(r8)
2008e094:	d8c02015 	stw	r3,128(sp)
2008e098:	d8801f15 	stw	r2,124(sp)
2008e09c:	010001c4 	movi	r4,7
2008e0a0:	20812e16 	blt	r4,r2,2008e55c <___vfprintf_internal_r+0x1d90>
2008e0a4:	42000204 	addi	r8,r8,8
2008e0a8:	0421c83a 	sub	r16,zero,r16
2008e0ac:	04005c0e 	bge	zero,r16,2008e220 <___vfprintf_internal_r+0x1a54>
2008e0b0:	04800404 	movi	r18,16
2008e0b4:	94009f0e 	bge	r18,r16,2008e334 <___vfprintf_internal_r+0x1b68>
2008e0b8:	01000034 	movhi	r4,0
2008e0bc:	21019384 	addi	r4,r4,1614
2008e0c0:	d9002c15 	stw	r4,176(sp)
2008e0c4:	054001c4 	movi	r21,7
2008e0c8:	00000306 	br	2008e0d8 <___vfprintf_internal_r+0x190c>
2008e0cc:	42000204 	addi	r8,r8,8
2008e0d0:	843ffc04 	addi	r16,r16,-16
2008e0d4:	94009a0e 	bge	r18,r16,2008e340 <___vfprintf_internal_r+0x1b74>
2008e0d8:	18c00404 	addi	r3,r3,16
2008e0dc:	10800044 	addi	r2,r2,1
2008e0e0:	45000015 	stw	r20,0(r8)
2008e0e4:	44800115 	stw	r18,4(r8)
2008e0e8:	d8c02015 	stw	r3,128(sp)
2008e0ec:	d8801f15 	stw	r2,124(sp)
2008e0f0:	a8bff60e 	bge	r21,r2,2008e0cc <__flash_rwdata_start+0xffff1a84>
2008e0f4:	b009883a 	mov	r4,r22
2008e0f8:	b80b883a 	mov	r5,r23
2008e0fc:	d9801e04 	addi	r6,sp,120
2008e100:	00947300 	call	20094730 <__sprint_r>
2008e104:	103aa51e 	bne	r2,zero,2008cb9c <__flash_rwdata_start+0xffff0554>
2008e108:	d8c02017 	ldw	r3,128(sp)
2008e10c:	d8801f17 	ldw	r2,124(sp)
2008e110:	da000404 	addi	r8,sp,16
2008e114:	003fee06 	br	2008e0d0 <__flash_rwdata_start+0xffff1a88>
2008e118:	008011c4 	movi	r2,71
2008e11c:	1400be16 	blt	r2,r16,2008e418 <___vfprintf_internal_r+0x1c4c>
2008e120:	03000034 	movhi	r12,0
2008e124:	63017d04 	addi	r12,r12,1524
2008e128:	db003115 	stw	r12,196(sp)
2008e12c:	00c000c4 	movi	r3,3
2008e130:	00bfdfc4 	movi	r2,-129
2008e134:	d8c02b15 	stw	r3,172(sp)
2008e138:	88a2703a 	and	r17,r17,r2
2008e13c:	dd402783 	ldbu	r21,158(sp)
2008e140:	dcc02d15 	stw	r19,180(sp)
2008e144:	1825883a 	mov	r18,r3
2008e148:	d8003215 	stw	zero,200(sp)
2008e14c:	d8003415 	stw	zero,208(sp)
2008e150:	003af106 	br	2008cd18 <__flash_rwdata_start+0xffff06d0>
2008e154:	4825883a 	mov	r18,r9
2008e158:	003c9306 	br	2008d3a8 <__flash_rwdata_start+0xffff0d60>
2008e15c:	db002d17 	ldw	r12,180(sp)
2008e160:	14c00017 	ldw	r19,0(r2)
2008e164:	0039883a 	mov	fp,zero
2008e168:	63000104 	addi	r12,r12,4
2008e16c:	db002d15 	stw	r12,180(sp)
2008e170:	003c4706 	br	2008d290 <__flash_rwdata_start+0xffff0c48>
2008e174:	00800034 	movhi	r2,0
2008e178:	10817b04 	addi	r2,r2,1516
2008e17c:	d8803115 	stw	r2,196(sp)
2008e180:	003bf106 	br	2008d148 <__flash_rwdata_start+0xffff0b00>
2008e184:	b009883a 	mov	r4,r22
2008e188:	b80b883a 	mov	r5,r23
2008e18c:	d9801e04 	addi	r6,sp,120
2008e190:	00947300 	call	20094730 <__sprint_r>
2008e194:	103a811e 	bne	r2,zero,2008cb9c <__flash_rwdata_start+0xffff0554>
2008e198:	dc002617 	ldw	r16,152(sp)
2008e19c:	d8c02017 	ldw	r3,128(sp)
2008e1a0:	da000404 	addi	r8,sp,16
2008e1a4:	003faf06 	br	2008e064 <__flash_rwdata_start+0xffff1a1c>
2008e1a8:	db002e17 	ldw	r12,184(sp)
2008e1ac:	1805883a 	mov	r2,r3
2008e1b0:	dac02d15 	stw	r11,180(sp)
2008e1b4:	0319c83a 	sub	r12,zero,r12
2008e1b8:	db002e15 	stw	r12,184(sp)
2008e1bc:	003a8206 	br	2008cbc8 <__flash_rwdata_start+0xffff0580>
2008e1c0:	18800044 	addi	r2,r3,1
2008e1c4:	8c400814 	ori	r17,r17,32
2008e1c8:	1c000047 	ldb	r16,1(r3)
2008e1cc:	0039e406 	br	2008c960 <__flash_rwdata_start+0xffff0318>
2008e1d0:	b009883a 	mov	r4,r22
2008e1d4:	b80b883a 	mov	r5,r23
2008e1d8:	d9801e04 	addi	r6,sp,120
2008e1dc:	00947300 	call	20094730 <__sprint_r>
2008e1e0:	103a6e1e 	bne	r2,zero,2008cb9c <__flash_rwdata_start+0xffff0554>
2008e1e4:	d8c02017 	ldw	r3,128(sp)
2008e1e8:	da000404 	addi	r8,sp,16
2008e1ec:	003d0c06 	br	2008d620 <__flash_rwdata_start+0xffff0fd8>
2008e1f0:	db002817 	ldw	r12,160(sp)
2008e1f4:	d8c03117 	ldw	r3,196(sp)
2008e1f8:	60e5c83a 	sub	r18,r12,r3
2008e1fc:	003ac106 	br	2008cd04 <__flash_rwdata_start+0xffff06bc>
2008e200:	b009883a 	mov	r4,r22
2008e204:	b80b883a 	mov	r5,r23
2008e208:	d9801e04 	addi	r6,sp,120
2008e20c:	00947300 	call	20094730 <__sprint_r>
2008e210:	103a621e 	bne	r2,zero,2008cb9c <__flash_rwdata_start+0xffff0554>
2008e214:	d8c02017 	ldw	r3,128(sp)
2008e218:	d8801f17 	ldw	r2,124(sp)
2008e21c:	da000404 	addi	r8,sp,16
2008e220:	db003317 	ldw	r12,204(sp)
2008e224:	dac03117 	ldw	r11,196(sp)
2008e228:	10800044 	addi	r2,r2,1
2008e22c:	1b07883a 	add	r3,r3,r12
2008e230:	42c00015 	stw	r11,0(r8)
2008e234:	43000115 	stw	r12,4(r8)
2008e238:	d8c02015 	stw	r3,128(sp)
2008e23c:	d8801f15 	stw	r2,124(sp)
2008e240:	010001c4 	movi	r4,7
2008e244:	20bb460e 	bge	r4,r2,2008cf60 <__flash_rwdata_start+0xffff0918>
2008e248:	003d8506 	br	2008d860 <__flash_rwdata_start+0xffff1218>
2008e24c:	da003f15 	stw	r8,252(sp)
2008e250:	008a73c0 	call	2008a73c <strlen>
2008e254:	1025883a 	mov	r18,r2
2008e258:	da003f17 	ldw	r8,252(sp)
2008e25c:	903c540e 	bge	r18,zero,2008d3b0 <__flash_rwdata_start+0xffff0d68>
2008e260:	0005883a 	mov	r2,zero
2008e264:	003c5206 	br	2008d3b0 <__flash_rwdata_start+0xffff0d68>
2008e268:	01000034 	movhi	r4,0
2008e26c:	21019784 	addi	r4,r4,1630
2008e270:	d9003615 	stw	r4,216(sp)
2008e274:	003adc06 	br	2008cde8 <__flash_rwdata_start+0xffff07a0>
2008e278:	d8802604 	addi	r2,sp,152
2008e27c:	d8800115 	stw	r2,4(sp)
2008e280:	d9403717 	ldw	r5,220(sp)
2008e284:	d8802504 	addi	r2,sp,148
2008e288:	d8800215 	stw	r2,8(sp)
2008e28c:	d8802104 	addi	r2,sp,132
2008e290:	da400015 	stw	r9,0(sp)
2008e294:	d8800315 	stw	r2,12(sp)
2008e298:	b009883a 	mov	r4,r22
2008e29c:	900d883a 	mov	r6,r18
2008e2a0:	01c000c4 	movi	r7,3
2008e2a4:	da003f15 	stw	r8,252(sp)
2008e2a8:	da403e15 	stw	r9,248(sp)
2008e2ac:	008ee140 	call	2008ee14 <_dtoa_r>
2008e2b0:	da403e17 	ldw	r9,248(sp)
2008e2b4:	da003f17 	ldw	r8,252(sp)
2008e2b8:	d8803115 	stw	r2,196(sp)
2008e2bc:	4839883a 	mov	fp,r9
2008e2c0:	dac03117 	ldw	r11,196(sp)
2008e2c4:	00801184 	movi	r2,70
2008e2c8:	5f15883a 	add	r10,r11,fp
2008e2cc:	a8bef01e 	bne	r21,r2,2008de90 <__flash_rwdata_start+0xffff1848>
2008e2d0:	59000007 	ldb	r4,0(r11)
2008e2d4:	00800c04 	movi	r2,48
2008e2d8:	2080d526 	beq	r4,r2,2008e630 <___vfprintf_internal_r+0x1e64>
2008e2dc:	d8c02617 	ldw	r3,152(sp)
2008e2e0:	50d5883a 	add	r10,r10,r3
2008e2e4:	003eea06 	br	2008de90 <__flash_rwdata_start+0xffff1848>
2008e2e8:	0025883a 	mov	r18,zero
2008e2ec:	003db306 	br	2008d9bc <__flash_rwdata_start+0xffff1374>
2008e2f0:	b009883a 	mov	r4,r22
2008e2f4:	b80b883a 	mov	r5,r23
2008e2f8:	d9801e04 	addi	r6,sp,120
2008e2fc:	00947300 	call	20094730 <__sprint_r>
2008e300:	103a261e 	bne	r2,zero,2008cb9c <__flash_rwdata_start+0xffff0554>
2008e304:	d8c02017 	ldw	r3,128(sp)
2008e308:	da000404 	addi	r8,sp,16
2008e30c:	003daa06 	br	2008d9b8 <__flash_rwdata_start+0xffff1370>
2008e310:	b009883a 	mov	r4,r22
2008e314:	b80b883a 	mov	r5,r23
2008e318:	d9801e04 	addi	r6,sp,120
2008e31c:	00947300 	call	20094730 <__sprint_r>
2008e320:	103a1e1e 	bne	r2,zero,2008cb9c <__flash_rwdata_start+0xffff0554>
2008e324:	d8802617 	ldw	r2,152(sp)
2008e328:	d8c02017 	ldw	r3,128(sp)
2008e32c:	da000404 	addi	r8,sp,16
2008e330:	003e2c06 	br	2008dbe4 <__flash_rwdata_start+0xffff159c>
2008e334:	03000034 	movhi	r12,0
2008e338:	63019384 	addi	r12,r12,1614
2008e33c:	db002c15 	stw	r12,176(sp)
2008e340:	dac02c17 	ldw	r11,176(sp)
2008e344:	1c07883a 	add	r3,r3,r16
2008e348:	10800044 	addi	r2,r2,1
2008e34c:	42c00015 	stw	r11,0(r8)
2008e350:	44000115 	stw	r16,4(r8)
2008e354:	d8c02015 	stw	r3,128(sp)
2008e358:	d8801f15 	stw	r2,124(sp)
2008e35c:	010001c4 	movi	r4,7
2008e360:	20bfa716 	blt	r4,r2,2008e200 <__flash_rwdata_start+0xffff1bb8>
2008e364:	42000204 	addi	r8,r8,8
2008e368:	003fad06 	br	2008e220 <__flash_rwdata_start+0xffff1bd8>
2008e36c:	00800184 	movi	r2,6
2008e370:	1240012e 	bgeu	r2,r9,2008e378 <___vfprintf_internal_r+0x1bac>
2008e374:	1013883a 	mov	r9,r2
2008e378:	4825883a 	mov	r18,r9
2008e37c:	4805883a 	mov	r2,r9
2008e380:	4800c216 	blt	r9,zero,2008e68c <___vfprintf_internal_r+0x1ec0>
2008e384:	d8802b15 	stw	r2,172(sp)
2008e388:	00800034 	movhi	r2,0
2008e38c:	10818904 	addi	r2,r2,1572
2008e390:	d8803115 	stw	r2,196(sp)
2008e394:	dcc02d15 	stw	r19,180(sp)
2008e398:	d8003215 	stw	zero,200(sp)
2008e39c:	d8003415 	stw	zero,208(sp)
2008e3a0:	0005883a 	mov	r2,zero
2008e3a4:	003a6306 	br	2008cd34 <__flash_rwdata_start+0xffff06ec>
2008e3a8:	0021883a 	mov	r16,zero
2008e3ac:	003e1f06 	br	2008dc2c <__flash_rwdata_start+0xffff15e4>
2008e3b0:	b009883a 	mov	r4,r22
2008e3b4:	b80b883a 	mov	r5,r23
2008e3b8:	d9801e04 	addi	r6,sp,120
2008e3bc:	00947300 	call	20094730 <__sprint_r>
2008e3c0:	1039f61e 	bne	r2,zero,2008cb9c <__flash_rwdata_start+0xffff0554>
2008e3c4:	d8802617 	ldw	r2,152(sp)
2008e3c8:	db003317 	ldw	r12,204(sp)
2008e3cc:	d8c02017 	ldw	r3,128(sp)
2008e3d0:	da000404 	addi	r8,sp,16
2008e3d4:	6085c83a 	sub	r2,r12,r2
2008e3d8:	003e1306 	br	2008dc28 <__flash_rwdata_start+0xffff15e0>
2008e3dc:	03000034 	movhi	r12,0
2008e3e0:	63019784 	addi	r12,r12,1630
2008e3e4:	db003615 	stw	r12,216(sp)
2008e3e8:	003b0206 	br	2008cff4 <__flash_rwdata_start+0xffff09ac>
2008e3ec:	00c00b44 	movi	r3,45
2008e3f0:	d8802b15 	stw	r2,172(sp)
2008e3f4:	dc402d17 	ldw	r17,180(sp)
2008e3f8:	d8c02785 	stb	r3,158(sp)
2008e3fc:	dcc02d15 	stw	r19,180(sp)
2008e400:	d8003215 	stw	zero,200(sp)
2008e404:	00800b44 	movi	r2,45
2008e408:	003a4706 	br	2008cd28 <__flash_rwdata_start+0xffff06e0>
2008e40c:	05400b44 	movi	r21,45
2008e410:	dd402785 	stb	r21,158(sp)
2008e414:	003b4706 	br	2008d134 <__flash_rwdata_start+0xffff0aec>
2008e418:	00800034 	movhi	r2,0
2008e41c:	10817e04 	addi	r2,r2,1528
2008e420:	d8803115 	stw	r2,196(sp)
2008e424:	003f4106 	br	2008e12c <__flash_rwdata_start+0xffff1ae4>
2008e428:	d8c02617 	ldw	r3,152(sp)
2008e42c:	00bfff44 	movi	r2,-3
2008e430:	18801116 	blt	r3,r2,2008e478 <___vfprintf_internal_r+0x1cac>
2008e434:	48c01016 	blt	r9,r3,2008e478 <___vfprintf_internal_r+0x1cac>
2008e438:	d8c03415 	stw	r3,208(sp)
2008e43c:	040019c4 	movi	r16,103
2008e440:	003eb206 	br	2008df0c <__flash_rwdata_start+0xffff18c4>
2008e444:	01000034 	movhi	r4,0
2008e448:	21019384 	addi	r4,r4,1614
2008e44c:	d9002c15 	stw	r4,176(sp)
2008e450:	003cb106 	br	2008d718 <__flash_rwdata_start+0xffff10d0>
2008e454:	5005883a 	mov	r2,r10
2008e458:	003ea106 	br	2008dee0 <__flash_rwdata_start+0xffff1898>
2008e45c:	da402b15 	stw	r9,172(sp)
2008e460:	dd402783 	ldbu	r21,158(sp)
2008e464:	4825883a 	mov	r18,r9
2008e468:	dcc02d15 	stw	r19,180(sp)
2008e46c:	d8003215 	stw	zero,200(sp)
2008e470:	d8003415 	stw	zero,208(sp)
2008e474:	003a2806 	br	2008cd18 <__flash_rwdata_start+0xffff06d0>
2008e478:	843fff84 	addi	r16,r16,-2
2008e47c:	1f3fffc4 	addi	fp,r3,-1
2008e480:	df002615 	stw	fp,152(sp)
2008e484:	dc0022c5 	stb	r16,139(sp)
2008e488:	e0009816 	blt	fp,zero,2008e6ec <___vfprintf_internal_r+0x1f20>
2008e48c:	00800ac4 	movi	r2,43
2008e490:	d8802305 	stb	r2,140(sp)
2008e494:	00800244 	movi	r2,9
2008e498:	1700750e 	bge	r2,fp,2008e670 <___vfprintf_internal_r+0x1ea4>
2008e49c:	dd4022c4 	addi	r21,sp,139
2008e4a0:	dc002c15 	stw	r16,176(sp)
2008e4a4:	4025883a 	mov	r18,r8
2008e4a8:	a821883a 	mov	r16,r21
2008e4ac:	e009883a 	mov	r4,fp
2008e4b0:	01400284 	movi	r5,10
2008e4b4:	00867380 	call	20086738 <__modsi3>
2008e4b8:	10800c04 	addi	r2,r2,48
2008e4bc:	843fffc4 	addi	r16,r16,-1
2008e4c0:	e009883a 	mov	r4,fp
2008e4c4:	01400284 	movi	r5,10
2008e4c8:	80800005 	stb	r2,0(r16)
2008e4cc:	00866e40 	call	200866e4 <__divsi3>
2008e4d0:	1039883a 	mov	fp,r2
2008e4d4:	00800244 	movi	r2,9
2008e4d8:	173ff416 	blt	r2,fp,2008e4ac <__flash_rwdata_start+0xffff1e64>
2008e4dc:	9011883a 	mov	r8,r18
2008e4e0:	e0800c04 	addi	r2,fp,48
2008e4e4:	8025883a 	mov	r18,r16
2008e4e8:	913fffc4 	addi	r4,r18,-1
2008e4ec:	90bfffc5 	stb	r2,-1(r18)
2008e4f0:	dc002c17 	ldw	r16,176(sp)
2008e4f4:	2540852e 	bgeu	r4,r21,2008e70c <___vfprintf_internal_r+0x1f40>
2008e4f8:	d9402384 	addi	r5,sp,142
2008e4fc:	2c8bc83a 	sub	r5,r5,r18
2008e500:	d8c02344 	addi	r3,sp,141
2008e504:	a94b883a 	add	r5,r21,r5
2008e508:	00000106 	br	2008e510 <___vfprintf_internal_r+0x1d44>
2008e50c:	20800003 	ldbu	r2,0(r4)
2008e510:	18800005 	stb	r2,0(r3)
2008e514:	18c00044 	addi	r3,r3,1
2008e518:	21000044 	addi	r4,r4,1
2008e51c:	197ffb1e 	bne	r3,r5,2008e50c <__flash_rwdata_start+0xffff1ec4>
2008e520:	d8802304 	addi	r2,sp,140
2008e524:	1485c83a 	sub	r2,r2,r18
2008e528:	d8c02344 	addi	r3,sp,141
2008e52c:	1885883a 	add	r2,r3,r2
2008e530:	dac03317 	ldw	r11,204(sp)
2008e534:	156bc83a 	sub	r21,r2,r21
2008e538:	dd403a15 	stw	r21,232(sp)
2008e53c:	00800044 	movi	r2,1
2008e540:	5d65883a 	add	r18,r11,r21
2008e544:	12c0660e 	bge	r2,r11,2008e6e0 <___vfprintf_internal_r+0x1f14>
2008e548:	94800044 	addi	r18,r18,1
2008e54c:	9005883a 	mov	r2,r18
2008e550:	90006116 	blt	r18,zero,2008e6d8 <___vfprintf_internal_r+0x1f0c>
2008e554:	d8003415 	stw	zero,208(sp)
2008e558:	003e7406 	br	2008df2c <__flash_rwdata_start+0xffff18e4>
2008e55c:	b009883a 	mov	r4,r22
2008e560:	b80b883a 	mov	r5,r23
2008e564:	d9801e04 	addi	r6,sp,120
2008e568:	00947300 	call	20094730 <__sprint_r>
2008e56c:	10398b1e 	bne	r2,zero,2008cb9c <__flash_rwdata_start+0xffff0554>
2008e570:	dc002617 	ldw	r16,152(sp)
2008e574:	d8c02017 	ldw	r3,128(sp)
2008e578:	d8801f17 	ldw	r2,124(sp)
2008e57c:	da000404 	addi	r8,sp,16
2008e580:	003ec906 	br	2008e0a8 <__flash_rwdata_start+0xffff1a60>
2008e584:	483e1c1e 	bne	r9,zero,2008ddf8 <__flash_rwdata_start+0xffff17b0>
2008e588:	9013883a 	mov	r9,r18
2008e58c:	003e1a06 	br	2008ddf8 <__flash_rwdata_start+0xffff17b0>
2008e590:	02400184 	movi	r9,6
2008e594:	003e1806 	br	2008ddf8 <__flash_rwdata_start+0xffff17b0>
2008e598:	d8c03417 	ldw	r3,208(sp)
2008e59c:	00c04b0e 	bge	zero,r3,2008e6cc <___vfprintf_internal_r+0x1f00>
2008e5a0:	04800044 	movi	r18,1
2008e5a4:	dac03317 	ldw	r11,204(sp)
2008e5a8:	92e5883a 	add	r18,r18,r11
2008e5ac:	9005883a 	mov	r2,r18
2008e5b0:	903e5e0e 	bge	r18,zero,2008df2c <__flash_rwdata_start+0xffff18e4>
2008e5b4:	0005883a 	mov	r2,zero
2008e5b8:	003e5c06 	br	2008df2c <__flash_rwdata_start+0xffff18e4>
2008e5bc:	00c00b44 	movi	r3,45
2008e5c0:	64a0003c 	xorhi	r18,r12,32768
2008e5c4:	d8c02b05 	stb	r3,172(sp)
2008e5c8:	003e1106 	br	2008de10 <__flash_rwdata_start+0xffff17c8>
2008e5cc:	4f000044 	addi	fp,r9,1
2008e5d0:	003e1606 	br	2008de2c <__flash_rwdata_start+0xffff17e4>
2008e5d4:	d8c02617 	ldw	r3,152(sp)
2008e5d8:	d8c03415 	stw	r3,208(sp)
2008e5dc:	00c0350e 	bge	zero,r3,2008e6b4 <___vfprintf_internal_r+0x1ee8>
2008e5e0:	4800081e 	bne	r9,zero,2008e604 <___vfprintf_internal_r+0x1e38>
2008e5e4:	8c40004c 	andi	r17,r17,1
2008e5e8:	8800061e 	bne	r17,zero,2008e604 <___vfprintf_internal_r+0x1e38>
2008e5ec:	1805883a 	mov	r2,r3
2008e5f0:	183e4d0e 	bge	r3,zero,2008df28 <__flash_rwdata_start+0xffff18e0>
2008e5f4:	0005883a 	mov	r2,zero
2008e5f8:	003e4b06 	br	2008df28 <__flash_rwdata_start+0xffff18e0>
2008e5fc:	d8802117 	ldw	r2,132(sp)
2008e600:	003e3706 	br	2008dee0 <__flash_rwdata_start+0xffff1898>
2008e604:	dac03417 	ldw	r11,208(sp)
2008e608:	4a400044 	addi	r9,r9,1
2008e60c:	5a65883a 	add	r18,r11,r9
2008e610:	9005883a 	mov	r2,r18
2008e614:	903e450e 	bge	r18,zero,2008df2c <__flash_rwdata_start+0xffff18e4>
2008e618:	003fe606 	br	2008e5b4 <__flash_rwdata_start+0xffff1f6c>
2008e61c:	db003417 	ldw	r12,208(sp)
2008e620:	64800044 	addi	r18,r12,1
2008e624:	9005883a 	mov	r2,r18
2008e628:	903e400e 	bge	r18,zero,2008df2c <__flash_rwdata_start+0xffff18e4>
2008e62c:	003fe106 	br	2008e5b4 <__flash_rwdata_start+0xffff1f6c>
2008e630:	d9003717 	ldw	r4,220(sp)
2008e634:	900b883a 	mov	r5,r18
2008e638:	000d883a 	mov	r6,zero
2008e63c:	000f883a 	mov	r7,zero
2008e640:	da003f15 	stw	r8,252(sp)
2008e644:	da403e15 	stw	r9,248(sp)
2008e648:	da803d15 	stw	r10,244(sp)
2008e64c:	0096f400 	call	20096f40 <__eqdf2>
2008e650:	da003f17 	ldw	r8,252(sp)
2008e654:	da403e17 	ldw	r9,248(sp)
2008e658:	da803d17 	ldw	r10,244(sp)
2008e65c:	103f1f26 	beq	r2,zero,2008e2dc <__flash_rwdata_start+0xffff1c94>
2008e660:	00800044 	movi	r2,1
2008e664:	1707c83a 	sub	r3,r2,fp
2008e668:	d8c02615 	stw	r3,152(sp)
2008e66c:	003f1c06 	br	2008e2e0 <__flash_rwdata_start+0xffff1c98>
2008e670:	00800c04 	movi	r2,48
2008e674:	e0c00c04 	addi	r3,fp,48
2008e678:	d8802345 	stb	r2,141(sp)
2008e67c:	d8c02385 	stb	r3,142(sp)
2008e680:	d88023c4 	addi	r2,sp,143
2008e684:	dd4022c4 	addi	r21,sp,139
2008e688:	003fa906 	br	2008e530 <__flash_rwdata_start+0xffff1ee8>
2008e68c:	0005883a 	mov	r2,zero
2008e690:	003f3c06 	br	2008e384 <__flash_rwdata_start+0xffff1d3c>
2008e694:	dac02d17 	ldw	r11,180(sp)
2008e698:	5a400017 	ldw	r9,0(r11)
2008e69c:	5ac00104 	addi	r11,r11,4
2008e6a0:	dac02d15 	stw	r11,180(sp)
2008e6a4:	483ec80e 	bge	r9,zero,2008e1c8 <__flash_rwdata_start+0xffff1b80>
2008e6a8:	027fffc4 	movi	r9,-1
2008e6ac:	1c000047 	ldb	r16,1(r3)
2008e6b0:	0038ab06 	br	2008c960 <__flash_rwdata_start+0xffff0318>
2008e6b4:	4800111e 	bne	r9,zero,2008e6fc <___vfprintf_internal_r+0x1f30>
2008e6b8:	8c40004c 	andi	r17,r17,1
2008e6bc:	88000f1e 	bne	r17,zero,2008e6fc <___vfprintf_internal_r+0x1f30>
2008e6c0:	00800044 	movi	r2,1
2008e6c4:	1025883a 	mov	r18,r2
2008e6c8:	003e1806 	br	2008df2c <__flash_rwdata_start+0xffff18e4>
2008e6cc:	04800084 	movi	r18,2
2008e6d0:	90e5c83a 	sub	r18,r18,r3
2008e6d4:	003fb306 	br	2008e5a4 <__flash_rwdata_start+0xffff1f5c>
2008e6d8:	0005883a 	mov	r2,zero
2008e6dc:	003f9d06 	br	2008e554 <__flash_rwdata_start+0xffff1f0c>
2008e6e0:	88a2703a 	and	r17,r17,r2
2008e6e4:	883f9926 	beq	r17,zero,2008e54c <__flash_rwdata_start+0xffff1f04>
2008e6e8:	003f9706 	br	2008e548 <__flash_rwdata_start+0xffff1f00>
2008e6ec:	00800b44 	movi	r2,45
2008e6f0:	0739c83a 	sub	fp,zero,fp
2008e6f4:	d8802305 	stb	r2,140(sp)
2008e6f8:	003f6606 	br	2008e494 <__flash_rwdata_start+0xffff1e4c>
2008e6fc:	4c800084 	addi	r18,r9,2
2008e700:	9005883a 	mov	r2,r18
2008e704:	903e090e 	bge	r18,zero,2008df2c <__flash_rwdata_start+0xffff18e4>
2008e708:	003faa06 	br	2008e5b4 <__flash_rwdata_start+0xffff1f6c>
2008e70c:	d8802344 	addi	r2,sp,141
2008e710:	003f8706 	br	2008e530 <__flash_rwdata_start+0xffff1ee8>
2008e714:	d8c02617 	ldw	r3,152(sp)
2008e718:	003f5806 	br	2008e47c <__flash_rwdata_start+0xffff1e34>

2008e71c <__vfprintf_internal>:
2008e71c:	2007883a 	mov	r3,r4
2008e720:	01000034 	movhi	r4,0
2008e724:	210a1404 	addi	r4,r4,10320
2008e728:	21000017 	ldw	r4,0(r4)
2008e72c:	2805883a 	mov	r2,r5
2008e730:	300f883a 	mov	r7,r6
2008e734:	180b883a 	mov	r5,r3
2008e738:	100d883a 	mov	r6,r2
2008e73c:	008c7cc1 	jmpi	2008c7cc <___vfprintf_internal_r>

2008e740 <__sbprintf>:
2008e740:	2880030b 	ldhu	r2,12(r5)
2008e744:	2ac01917 	ldw	r11,100(r5)
2008e748:	2a80038b 	ldhu	r10,14(r5)
2008e74c:	2a400717 	ldw	r9,28(r5)
2008e750:	2a000917 	ldw	r8,36(r5)
2008e754:	defee204 	addi	sp,sp,-1144
2008e758:	00c10004 	movi	r3,1024
2008e75c:	dc011a15 	stw	r16,1128(sp)
2008e760:	10bfff4c 	andi	r2,r2,65533
2008e764:	2821883a 	mov	r16,r5
2008e768:	d8cb883a 	add	r5,sp,r3
2008e76c:	dc811c15 	stw	r18,1136(sp)
2008e770:	dc411b15 	stw	r17,1132(sp)
2008e774:	dfc11d15 	stw	ra,1140(sp)
2008e778:	2025883a 	mov	r18,r4
2008e77c:	d881030d 	sth	r2,1036(sp)
2008e780:	dac11915 	stw	r11,1124(sp)
2008e784:	da81038d 	sth	r10,1038(sp)
2008e788:	da410715 	stw	r9,1052(sp)
2008e78c:	da010915 	stw	r8,1060(sp)
2008e790:	dec10015 	stw	sp,1024(sp)
2008e794:	dec10415 	stw	sp,1040(sp)
2008e798:	d8c10215 	stw	r3,1032(sp)
2008e79c:	d8c10515 	stw	r3,1044(sp)
2008e7a0:	d8010615 	stw	zero,1048(sp)
2008e7a4:	008c7cc0 	call	2008c7cc <___vfprintf_internal_r>
2008e7a8:	1023883a 	mov	r17,r2
2008e7ac:	10000416 	blt	r2,zero,2008e7c0 <__sbprintf+0x80>
2008e7b0:	9009883a 	mov	r4,r18
2008e7b4:	d9410004 	addi	r5,sp,1024
2008e7b8:	00907440 	call	20090744 <_fflush_r>
2008e7bc:	10000d1e 	bne	r2,zero,2008e7f4 <__sbprintf+0xb4>
2008e7c0:	d8c1030b 	ldhu	r3,1036(sp)
2008e7c4:	18c0100c 	andi	r3,r3,64
2008e7c8:	18000326 	beq	r3,zero,2008e7d8 <__sbprintf+0x98>
2008e7cc:	8080030b 	ldhu	r2,12(r16)
2008e7d0:	10801014 	ori	r2,r2,64
2008e7d4:	8080030d 	sth	r2,12(r16)
2008e7d8:	8805883a 	mov	r2,r17
2008e7dc:	dfc11d17 	ldw	ra,1140(sp)
2008e7e0:	dc811c17 	ldw	r18,1136(sp)
2008e7e4:	dc411b17 	ldw	r17,1132(sp)
2008e7e8:	dc011a17 	ldw	r16,1128(sp)
2008e7ec:	dec11e04 	addi	sp,sp,1144
2008e7f0:	f800283a 	ret
2008e7f4:	047fffc4 	movi	r17,-1
2008e7f8:	003ff106 	br	2008e7c0 <__flash_rwdata_start+0xffff2178>

2008e7fc <_vsnprintf_r>:
2008e7fc:	3005883a 	mov	r2,r6
2008e800:	30003616 	blt	r6,zero,2008e8dc <_vsnprintf_r+0xe0>
2008e804:	deffe404 	addi	sp,sp,-112
2008e808:	00c08204 	movi	r3,520
2008e80c:	dc001a15 	stw	r16,104(sp)
2008e810:	dfc01b15 	stw	ra,108(sp)
2008e814:	d8c0030d 	sth	r3,12(sp)
2008e818:	d9400015 	stw	r5,0(sp)
2008e81c:	d9400415 	stw	r5,16(sp)
2008e820:	380d883a 	mov	r6,r7
2008e824:	2021883a 	mov	r16,r4
2008e828:	10001326 	beq	r2,zero,2008e878 <_vsnprintf_r+0x7c>
2008e82c:	00c00034 	movhi	r3,0
2008e830:	18ca1404 	addi	r3,r3,10320
2008e834:	19000017 	ldw	r4,0(r3)
2008e838:	d9c01c17 	ldw	r7,112(sp)
2008e83c:	10bfffc4 	addi	r2,r2,-1
2008e840:	d8800215 	stw	r2,8(sp)
2008e844:	d8800515 	stw	r2,20(sp)
2008e848:	d80b883a 	mov	r5,sp
2008e84c:	00bfffc4 	movi	r2,-1
2008e850:	d880038d 	sth	r2,14(sp)
2008e854:	008a83c0 	call	2008a83c <___svfprintf_internal_r>
2008e858:	00ffffc4 	movi	r3,-1
2008e85c:	10c01c16 	blt	r2,r3,2008e8d0 <_vsnprintf_r+0xd4>
2008e860:	d8c00017 	ldw	r3,0(sp)
2008e864:	18000005 	stb	zero,0(r3)
2008e868:	dfc01b17 	ldw	ra,108(sp)
2008e86c:	dc001a17 	ldw	r16,104(sp)
2008e870:	dec01c04 	addi	sp,sp,112
2008e874:	f800283a 	ret
2008e878:	00800034 	movhi	r2,0
2008e87c:	108a1404 	addi	r2,r2,10320
2008e880:	11000017 	ldw	r4,0(r2)
2008e884:	d9c01c17 	ldw	r7,112(sp)
2008e888:	00bfffc4 	movi	r2,-1
2008e88c:	d80b883a 	mov	r5,sp
2008e890:	d8000215 	stw	zero,8(sp)
2008e894:	d8000515 	stw	zero,20(sp)
2008e898:	d880038d 	sth	r2,14(sp)
2008e89c:	008a83c0 	call	2008a83c <___svfprintf_internal_r>
2008e8a0:	00ffffc4 	movi	r3,-1
2008e8a4:	10c00416 	blt	r2,r3,2008e8b8 <_vsnprintf_r+0xbc>
2008e8a8:	dfc01b17 	ldw	ra,108(sp)
2008e8ac:	dc001a17 	ldw	r16,104(sp)
2008e8b0:	dec01c04 	addi	sp,sp,112
2008e8b4:	f800283a 	ret
2008e8b8:	00c022c4 	movi	r3,139
2008e8bc:	80c00015 	stw	r3,0(r16)
2008e8c0:	dfc01b17 	ldw	ra,108(sp)
2008e8c4:	dc001a17 	ldw	r16,104(sp)
2008e8c8:	dec01c04 	addi	sp,sp,112
2008e8cc:	f800283a 	ret
2008e8d0:	00c022c4 	movi	r3,139
2008e8d4:	80c00015 	stw	r3,0(r16)
2008e8d8:	003fe106 	br	2008e860 <__flash_rwdata_start+0xffff2218>
2008e8dc:	008022c4 	movi	r2,139
2008e8e0:	20800015 	stw	r2,0(r4)
2008e8e4:	00bfffc4 	movi	r2,-1
2008e8e8:	f800283a 	ret

2008e8ec <vsnprintf>:
2008e8ec:	00800034 	movhi	r2,0
2008e8f0:	108a1404 	addi	r2,r2,10320
2008e8f4:	2011883a 	mov	r8,r4
2008e8f8:	11000017 	ldw	r4,0(r2)
2008e8fc:	defffe04 	addi	sp,sp,-8
2008e900:	2807883a 	mov	r3,r5
2008e904:	3005883a 	mov	r2,r6
2008e908:	d9c00015 	stw	r7,0(sp)
2008e90c:	400b883a 	mov	r5,r8
2008e910:	180d883a 	mov	r6,r3
2008e914:	100f883a 	mov	r7,r2
2008e918:	dfc00115 	stw	ra,4(sp)
2008e91c:	008e7fc0 	call	2008e7fc <_vsnprintf_r>
2008e920:	dfc00117 	ldw	ra,4(sp)
2008e924:	dec00204 	addi	sp,sp,8
2008e928:	f800283a 	ret

2008e92c <__swsetup_r>:
2008e92c:	00800034 	movhi	r2,0
2008e930:	defffd04 	addi	sp,sp,-12
2008e934:	108a1404 	addi	r2,r2,10320
2008e938:	dc400115 	stw	r17,4(sp)
2008e93c:	2023883a 	mov	r17,r4
2008e940:	11000017 	ldw	r4,0(r2)
2008e944:	dc000015 	stw	r16,0(sp)
2008e948:	dfc00215 	stw	ra,8(sp)
2008e94c:	2821883a 	mov	r16,r5
2008e950:	20000226 	beq	r4,zero,2008e95c <__swsetup_r+0x30>
2008e954:	20c00e17 	ldw	r3,56(r4)
2008e958:	18003126 	beq	r3,zero,2008ea20 <__swsetup_r+0xf4>
2008e95c:	8080030b 	ldhu	r2,12(r16)
2008e960:	10c0020c 	andi	r3,r2,8
2008e964:	100d883a 	mov	r6,r2
2008e968:	18000f26 	beq	r3,zero,2008e9a8 <__swsetup_r+0x7c>
2008e96c:	80c00417 	ldw	r3,16(r16)
2008e970:	18001526 	beq	r3,zero,2008e9c8 <__swsetup_r+0x9c>
2008e974:	1100004c 	andi	r4,r2,1
2008e978:	20001c1e 	bne	r4,zero,2008e9ec <__swsetup_r+0xc0>
2008e97c:	1080008c 	andi	r2,r2,2
2008e980:	1000291e 	bne	r2,zero,2008ea28 <__swsetup_r+0xfc>
2008e984:	80800517 	ldw	r2,20(r16)
2008e988:	80800215 	stw	r2,8(r16)
2008e98c:	18001c26 	beq	r3,zero,2008ea00 <__swsetup_r+0xd4>
2008e990:	0005883a 	mov	r2,zero
2008e994:	dfc00217 	ldw	ra,8(sp)
2008e998:	dc400117 	ldw	r17,4(sp)
2008e99c:	dc000017 	ldw	r16,0(sp)
2008e9a0:	dec00304 	addi	sp,sp,12
2008e9a4:	f800283a 	ret
2008e9a8:	3080040c 	andi	r2,r6,16
2008e9ac:	10002e26 	beq	r2,zero,2008ea68 <__swsetup_r+0x13c>
2008e9b0:	3080010c 	andi	r2,r6,4
2008e9b4:	10001e1e 	bne	r2,zero,2008ea30 <__swsetup_r+0x104>
2008e9b8:	80c00417 	ldw	r3,16(r16)
2008e9bc:	30800214 	ori	r2,r6,8
2008e9c0:	8080030d 	sth	r2,12(r16)
2008e9c4:	183feb1e 	bne	r3,zero,2008e974 <__flash_rwdata_start+0xffff232c>
2008e9c8:	1140a00c 	andi	r5,r2,640
2008e9cc:	01008004 	movi	r4,512
2008e9d0:	293fe826 	beq	r5,r4,2008e974 <__flash_rwdata_start+0xffff232c>
2008e9d4:	8809883a 	mov	r4,r17
2008e9d8:	800b883a 	mov	r5,r16
2008e9dc:	00916ac0 	call	200916ac <__smakebuf_r>
2008e9e0:	8080030b 	ldhu	r2,12(r16)
2008e9e4:	80c00417 	ldw	r3,16(r16)
2008e9e8:	003fe206 	br	2008e974 <__flash_rwdata_start+0xffff232c>
2008e9ec:	80800517 	ldw	r2,20(r16)
2008e9f0:	80000215 	stw	zero,8(r16)
2008e9f4:	0085c83a 	sub	r2,zero,r2
2008e9f8:	80800615 	stw	r2,24(r16)
2008e9fc:	183fe41e 	bne	r3,zero,2008e990 <__flash_rwdata_start+0xffff2348>
2008ea00:	80c0030b 	ldhu	r3,12(r16)
2008ea04:	0005883a 	mov	r2,zero
2008ea08:	1900200c 	andi	r4,r3,128
2008ea0c:	203fe126 	beq	r4,zero,2008e994 <__flash_rwdata_start+0xffff234c>
2008ea10:	18c01014 	ori	r3,r3,64
2008ea14:	80c0030d 	sth	r3,12(r16)
2008ea18:	00bfffc4 	movi	r2,-1
2008ea1c:	003fdd06 	br	2008e994 <__flash_rwdata_start+0xffff234c>
2008ea20:	0090b200 	call	20090b20 <__sinit>
2008ea24:	003fcd06 	br	2008e95c <__flash_rwdata_start+0xffff2314>
2008ea28:	0005883a 	mov	r2,zero
2008ea2c:	003fd606 	br	2008e988 <__flash_rwdata_start+0xffff2340>
2008ea30:	81400c17 	ldw	r5,48(r16)
2008ea34:	28000626 	beq	r5,zero,2008ea50 <__swsetup_r+0x124>
2008ea38:	80801004 	addi	r2,r16,64
2008ea3c:	28800326 	beq	r5,r2,2008ea4c <__swsetup_r+0x120>
2008ea40:	8809883a 	mov	r4,r17
2008ea44:	0090c940 	call	20090c94 <_free_r>
2008ea48:	8180030b 	ldhu	r6,12(r16)
2008ea4c:	80000c15 	stw	zero,48(r16)
2008ea50:	80c00417 	ldw	r3,16(r16)
2008ea54:	00bff6c4 	movi	r2,-37
2008ea58:	118c703a 	and	r6,r2,r6
2008ea5c:	80000115 	stw	zero,4(r16)
2008ea60:	80c00015 	stw	r3,0(r16)
2008ea64:	003fd506 	br	2008e9bc <__flash_rwdata_start+0xffff2374>
2008ea68:	00800244 	movi	r2,9
2008ea6c:	88800015 	stw	r2,0(r17)
2008ea70:	30801014 	ori	r2,r6,64
2008ea74:	8080030d 	sth	r2,12(r16)
2008ea78:	00bfffc4 	movi	r2,-1
2008ea7c:	003fc506 	br	2008e994 <__flash_rwdata_start+0xffff234c>

2008ea80 <__call_exitprocs>:
2008ea80:	00800034 	movhi	r2,0
2008ea84:	108a1304 	addi	r2,r2,10316
2008ea88:	10800017 	ldw	r2,0(r2)
2008ea8c:	defff404 	addi	sp,sp,-48
2008ea90:	dd800815 	stw	r22,32(sp)
2008ea94:	d8800015 	stw	r2,0(sp)
2008ea98:	10805204 	addi	r2,r2,328
2008ea9c:	dd000615 	stw	r20,24(sp)
2008eaa0:	dc800415 	stw	r18,16(sp)
2008eaa4:	dfc00b15 	stw	ra,44(sp)
2008eaa8:	df000a15 	stw	fp,40(sp)
2008eaac:	ddc00915 	stw	r23,36(sp)
2008eab0:	dd400715 	stw	r21,28(sp)
2008eab4:	dcc00515 	stw	r19,20(sp)
2008eab8:	dc400315 	stw	r17,12(sp)
2008eabc:	dc000215 	stw	r16,8(sp)
2008eac0:	2025883a 	mov	r18,r4
2008eac4:	2829883a 	mov	r20,r5
2008eac8:	d8800115 	stw	r2,4(sp)
2008eacc:	05bfffc4 	movi	r22,-1
2008ead0:	d8800017 	ldw	r2,0(sp)
2008ead4:	14c05217 	ldw	r19,328(r2)
2008ead8:	98001d26 	beq	r19,zero,2008eb50 <__call_exitprocs+0xd0>
2008eadc:	dd400117 	ldw	r21,4(sp)
2008eae0:	98800117 	ldw	r2,4(r19)
2008eae4:	173fffc4 	addi	fp,r2,-1
2008eae8:	e0000d16 	blt	fp,zero,2008eb20 <__call_exitprocs+0xa0>
2008eaec:	14000044 	addi	r16,r2,1
2008eaf0:	8421883a 	add	r16,r16,r16
2008eaf4:	8421883a 	add	r16,r16,r16
2008eaf8:	84402004 	addi	r17,r16,128
2008eafc:	9c63883a 	add	r17,r19,r17
2008eb00:	9c21883a 	add	r16,r19,r16
2008eb04:	a0001e26 	beq	r20,zero,2008eb80 <__call_exitprocs+0x100>
2008eb08:	80804017 	ldw	r2,256(r16)
2008eb0c:	15001c26 	beq	r2,r20,2008eb80 <__call_exitprocs+0x100>
2008eb10:	e73fffc4 	addi	fp,fp,-1
2008eb14:	843fff04 	addi	r16,r16,-4
2008eb18:	8c7fff04 	addi	r17,r17,-4
2008eb1c:	e5bff91e 	bne	fp,r22,2008eb04 <__flash_rwdata_start+0xffff24bc>
2008eb20:	00880274 	movhi	r2,8201
2008eb24:	10a66a04 	addi	r2,r2,-26200
2008eb28:	10000926 	beq	r2,zero,2008eb50 <__call_exitprocs+0xd0>
2008eb2c:	98800117 	ldw	r2,4(r19)
2008eb30:	1000311e 	bne	r2,zero,2008ebf8 <__call_exitprocs+0x178>
2008eb34:	98800017 	ldw	r2,0(r19)
2008eb38:	10003426 	beq	r2,zero,2008ec0c <__call_exitprocs+0x18c>
2008eb3c:	9809883a 	mov	r4,r19
2008eb40:	a8800015 	stw	r2,0(r21)
2008eb44:	00899a80 	call	200899a8 <free>
2008eb48:	acc00017 	ldw	r19,0(r21)
2008eb4c:	983fe41e 	bne	r19,zero,2008eae0 <__flash_rwdata_start+0xffff2498>
2008eb50:	dfc00b17 	ldw	ra,44(sp)
2008eb54:	df000a17 	ldw	fp,40(sp)
2008eb58:	ddc00917 	ldw	r23,36(sp)
2008eb5c:	dd800817 	ldw	r22,32(sp)
2008eb60:	dd400717 	ldw	r21,28(sp)
2008eb64:	dd000617 	ldw	r20,24(sp)
2008eb68:	dcc00517 	ldw	r19,20(sp)
2008eb6c:	dc800417 	ldw	r18,16(sp)
2008eb70:	dc400317 	ldw	r17,12(sp)
2008eb74:	dc000217 	ldw	r16,8(sp)
2008eb78:	dec00c04 	addi	sp,sp,48
2008eb7c:	f800283a 	ret
2008eb80:	98800117 	ldw	r2,4(r19)
2008eb84:	80c00017 	ldw	r3,0(r16)
2008eb88:	10bfffc4 	addi	r2,r2,-1
2008eb8c:	17001526 	beq	r2,fp,2008ebe4 <__call_exitprocs+0x164>
2008eb90:	80000015 	stw	zero,0(r16)
2008eb94:	183fde26 	beq	r3,zero,2008eb10 <__flash_rwdata_start+0xffff24c8>
2008eb98:	00800044 	movi	r2,1
2008eb9c:	1708983a 	sll	r4,r2,fp
2008eba0:	98806217 	ldw	r2,392(r19)
2008eba4:	9dc00117 	ldw	r23,4(r19)
2008eba8:	2084703a 	and	r2,r4,r2
2008ebac:	1000061e 	bne	r2,zero,2008ebc8 <__call_exitprocs+0x148>
2008ebb0:	183ee83a 	callr	r3
2008ebb4:	98800117 	ldw	r2,4(r19)
2008ebb8:	15ffc51e 	bne	r2,r23,2008ead0 <__flash_rwdata_start+0xffff2488>
2008ebbc:	a8800017 	ldw	r2,0(r21)
2008ebc0:	14ffd326 	beq	r2,r19,2008eb10 <__flash_rwdata_start+0xffff24c8>
2008ebc4:	003fc206 	br	2008ead0 <__flash_rwdata_start+0xffff2488>
2008ebc8:	98806317 	ldw	r2,396(r19)
2008ebcc:	2084703a 	and	r2,r4,r2
2008ebd0:	1000061e 	bne	r2,zero,2008ebec <__call_exitprocs+0x16c>
2008ebd4:	89400017 	ldw	r5,0(r17)
2008ebd8:	9009883a 	mov	r4,r18
2008ebdc:	183ee83a 	callr	r3
2008ebe0:	003ff406 	br	2008ebb4 <__flash_rwdata_start+0xffff256c>
2008ebe4:	9f000115 	stw	fp,4(r19)
2008ebe8:	003fea06 	br	2008eb94 <__flash_rwdata_start+0xffff254c>
2008ebec:	89000017 	ldw	r4,0(r17)
2008ebf0:	183ee83a 	callr	r3
2008ebf4:	003fef06 	br	2008ebb4 <__flash_rwdata_start+0xffff256c>
2008ebf8:	98800017 	ldw	r2,0(r19)
2008ebfc:	982b883a 	mov	r21,r19
2008ec00:	1027883a 	mov	r19,r2
2008ec04:	983fb61e 	bne	r19,zero,2008eae0 <__flash_rwdata_start+0xffff2498>
2008ec08:	003fd106 	br	2008eb50 <__flash_rwdata_start+0xffff2508>
2008ec0c:	0005883a 	mov	r2,zero
2008ec10:	003ffa06 	br	2008ebfc <__flash_rwdata_start+0xffff25b4>

2008ec14 <quorem>:
2008ec14:	defff704 	addi	sp,sp,-36
2008ec18:	dc800215 	stw	r18,8(sp)
2008ec1c:	20800417 	ldw	r2,16(r4)
2008ec20:	2c800417 	ldw	r18,16(r5)
2008ec24:	dfc00815 	stw	ra,32(sp)
2008ec28:	ddc00715 	stw	r23,28(sp)
2008ec2c:	dd800615 	stw	r22,24(sp)
2008ec30:	dd400515 	stw	r21,20(sp)
2008ec34:	dd000415 	stw	r20,16(sp)
2008ec38:	dcc00315 	stw	r19,12(sp)
2008ec3c:	dc400115 	stw	r17,4(sp)
2008ec40:	dc000015 	stw	r16,0(sp)
2008ec44:	14807116 	blt	r2,r18,2008ee0c <quorem+0x1f8>
2008ec48:	94bfffc4 	addi	r18,r18,-1
2008ec4c:	94ad883a 	add	r22,r18,r18
2008ec50:	b5ad883a 	add	r22,r22,r22
2008ec54:	2c400504 	addi	r17,r5,20
2008ec58:	8da9883a 	add	r20,r17,r22
2008ec5c:	25400504 	addi	r21,r4,20
2008ec60:	282f883a 	mov	r23,r5
2008ec64:	adad883a 	add	r22,r21,r22
2008ec68:	a1400017 	ldw	r5,0(r20)
2008ec6c:	2021883a 	mov	r16,r4
2008ec70:	b1000017 	ldw	r4,0(r22)
2008ec74:	29400044 	addi	r5,r5,1
2008ec78:	00867940 	call	20086794 <__udivsi3>
2008ec7c:	1027883a 	mov	r19,r2
2008ec80:	10002c26 	beq	r2,zero,2008ed34 <quorem+0x120>
2008ec84:	a813883a 	mov	r9,r21
2008ec88:	8811883a 	mov	r8,r17
2008ec8c:	0009883a 	mov	r4,zero
2008ec90:	000d883a 	mov	r6,zero
2008ec94:	41c00017 	ldw	r7,0(r8)
2008ec98:	49400017 	ldw	r5,0(r9)
2008ec9c:	42000104 	addi	r8,r8,4
2008eca0:	38bfffcc 	andi	r2,r7,65535
2008eca4:	14c5383a 	mul	r2,r2,r19
2008eca8:	380ed43a 	srli	r7,r7,16
2008ecac:	28ffffcc 	andi	r3,r5,65535
2008ecb0:	2085883a 	add	r2,r4,r2
2008ecb4:	1008d43a 	srli	r4,r2,16
2008ecb8:	3ccf383a 	mul	r7,r7,r19
2008ecbc:	198d883a 	add	r6,r3,r6
2008ecc0:	10ffffcc 	andi	r3,r2,65535
2008ecc4:	30c7c83a 	sub	r3,r6,r3
2008ecc8:	280ad43a 	srli	r5,r5,16
2008eccc:	21c9883a 	add	r4,r4,r7
2008ecd0:	180dd43a 	srai	r6,r3,16
2008ecd4:	20bfffcc 	andi	r2,r4,65535
2008ecd8:	288bc83a 	sub	r5,r5,r2
2008ecdc:	298b883a 	add	r5,r5,r6
2008ece0:	280e943a 	slli	r7,r5,16
2008ece4:	18ffffcc 	andi	r3,r3,65535
2008ece8:	2008d43a 	srli	r4,r4,16
2008ecec:	38ceb03a 	or	r7,r7,r3
2008ecf0:	49c00015 	stw	r7,0(r9)
2008ecf4:	280dd43a 	srai	r6,r5,16
2008ecf8:	4a400104 	addi	r9,r9,4
2008ecfc:	a23fe52e 	bgeu	r20,r8,2008ec94 <__flash_rwdata_start+0xffff264c>
2008ed00:	b0800017 	ldw	r2,0(r22)
2008ed04:	10000b1e 	bne	r2,zero,2008ed34 <quorem+0x120>
2008ed08:	b0bfff04 	addi	r2,r22,-4
2008ed0c:	a880082e 	bgeu	r21,r2,2008ed30 <quorem+0x11c>
2008ed10:	b0ffff17 	ldw	r3,-4(r22)
2008ed14:	18000326 	beq	r3,zero,2008ed24 <quorem+0x110>
2008ed18:	00000506 	br	2008ed30 <quorem+0x11c>
2008ed1c:	10c00017 	ldw	r3,0(r2)
2008ed20:	1800031e 	bne	r3,zero,2008ed30 <quorem+0x11c>
2008ed24:	10bfff04 	addi	r2,r2,-4
2008ed28:	94bfffc4 	addi	r18,r18,-1
2008ed2c:	a8bffb36 	bltu	r21,r2,2008ed1c <__flash_rwdata_start+0xffff26d4>
2008ed30:	84800415 	stw	r18,16(r16)
2008ed34:	8009883a 	mov	r4,r16
2008ed38:	b80b883a 	mov	r5,r23
2008ed3c:	009237c0 	call	2009237c <__mcmp>
2008ed40:	10002616 	blt	r2,zero,2008eddc <quorem+0x1c8>
2008ed44:	9cc00044 	addi	r19,r19,1
2008ed48:	a80d883a 	mov	r6,r21
2008ed4c:	000b883a 	mov	r5,zero
2008ed50:	31000017 	ldw	r4,0(r6)
2008ed54:	88800017 	ldw	r2,0(r17)
2008ed58:	31800104 	addi	r6,r6,4
2008ed5c:	20ffffcc 	andi	r3,r4,65535
2008ed60:	194b883a 	add	r5,r3,r5
2008ed64:	10ffffcc 	andi	r3,r2,65535
2008ed68:	28c7c83a 	sub	r3,r5,r3
2008ed6c:	1004d43a 	srli	r2,r2,16
2008ed70:	2008d43a 	srli	r4,r4,16
2008ed74:	180bd43a 	srai	r5,r3,16
2008ed78:	18ffffcc 	andi	r3,r3,65535
2008ed7c:	2089c83a 	sub	r4,r4,r2
2008ed80:	2149883a 	add	r4,r4,r5
2008ed84:	2004943a 	slli	r2,r4,16
2008ed88:	8c400104 	addi	r17,r17,4
2008ed8c:	200bd43a 	srai	r5,r4,16
2008ed90:	10c6b03a 	or	r3,r2,r3
2008ed94:	30ffff15 	stw	r3,-4(r6)
2008ed98:	a47fed2e 	bgeu	r20,r17,2008ed50 <__flash_rwdata_start+0xffff2708>
2008ed9c:	9485883a 	add	r2,r18,r18
2008eda0:	1085883a 	add	r2,r2,r2
2008eda4:	a887883a 	add	r3,r21,r2
2008eda8:	18800017 	ldw	r2,0(r3)
2008edac:	10000b1e 	bne	r2,zero,2008eddc <quorem+0x1c8>
2008edb0:	18bfff04 	addi	r2,r3,-4
2008edb4:	a880082e 	bgeu	r21,r2,2008edd8 <quorem+0x1c4>
2008edb8:	18ffff17 	ldw	r3,-4(r3)
2008edbc:	18000326 	beq	r3,zero,2008edcc <quorem+0x1b8>
2008edc0:	00000506 	br	2008edd8 <quorem+0x1c4>
2008edc4:	10c00017 	ldw	r3,0(r2)
2008edc8:	1800031e 	bne	r3,zero,2008edd8 <quorem+0x1c4>
2008edcc:	10bfff04 	addi	r2,r2,-4
2008edd0:	94bfffc4 	addi	r18,r18,-1
2008edd4:	a8bffb36 	bltu	r21,r2,2008edc4 <__flash_rwdata_start+0xffff277c>
2008edd8:	84800415 	stw	r18,16(r16)
2008eddc:	9805883a 	mov	r2,r19
2008ede0:	dfc00817 	ldw	ra,32(sp)
2008ede4:	ddc00717 	ldw	r23,28(sp)
2008ede8:	dd800617 	ldw	r22,24(sp)
2008edec:	dd400517 	ldw	r21,20(sp)
2008edf0:	dd000417 	ldw	r20,16(sp)
2008edf4:	dcc00317 	ldw	r19,12(sp)
2008edf8:	dc800217 	ldw	r18,8(sp)
2008edfc:	dc400117 	ldw	r17,4(sp)
2008ee00:	dc000017 	ldw	r16,0(sp)
2008ee04:	dec00904 	addi	sp,sp,36
2008ee08:	f800283a 	ret
2008ee0c:	0005883a 	mov	r2,zero
2008ee10:	003ff306 	br	2008ede0 <__flash_rwdata_start+0xffff2798>

2008ee14 <_dtoa_r>:
2008ee14:	20801017 	ldw	r2,64(r4)
2008ee18:	deffde04 	addi	sp,sp,-136
2008ee1c:	dd401d15 	stw	r21,116(sp)
2008ee20:	dcc01b15 	stw	r19,108(sp)
2008ee24:	dc801a15 	stw	r18,104(sp)
2008ee28:	dc401915 	stw	r17,100(sp)
2008ee2c:	dc001815 	stw	r16,96(sp)
2008ee30:	dfc02115 	stw	ra,132(sp)
2008ee34:	df002015 	stw	fp,128(sp)
2008ee38:	ddc01f15 	stw	r23,124(sp)
2008ee3c:	dd801e15 	stw	r22,120(sp)
2008ee40:	dd001c15 	stw	r20,112(sp)
2008ee44:	d9c00315 	stw	r7,12(sp)
2008ee48:	2021883a 	mov	r16,r4
2008ee4c:	302b883a 	mov	r21,r6
2008ee50:	2825883a 	mov	r18,r5
2008ee54:	dc402417 	ldw	r17,144(sp)
2008ee58:	3027883a 	mov	r19,r6
2008ee5c:	10000826 	beq	r2,zero,2008ee80 <_dtoa_r+0x6c>
2008ee60:	21801117 	ldw	r6,68(r4)
2008ee64:	00c00044 	movi	r3,1
2008ee68:	100b883a 	mov	r5,r2
2008ee6c:	1986983a 	sll	r3,r3,r6
2008ee70:	11800115 	stw	r6,4(r2)
2008ee74:	10c00215 	stw	r3,8(r2)
2008ee78:	0091b500 	call	20091b50 <_Bfree>
2008ee7c:	80001015 	stw	zero,64(r16)
2008ee80:	a8002d16 	blt	r21,zero,2008ef38 <_dtoa_r+0x124>
2008ee84:	88000015 	stw	zero,0(r17)
2008ee88:	a8dffc2c 	andhi	r3,r21,32752
2008ee8c:	009ffc34 	movhi	r2,32752
2008ee90:	18801b26 	beq	r3,r2,2008ef00 <_dtoa_r+0xec>
2008ee94:	9009883a 	mov	r4,r18
2008ee98:	980b883a 	mov	r5,r19
2008ee9c:	000d883a 	mov	r6,zero
2008eea0:	000f883a 	mov	r7,zero
2008eea4:	0096f400 	call	20096f40 <__eqdf2>
2008eea8:	10002a1e 	bne	r2,zero,2008ef54 <_dtoa_r+0x140>
2008eeac:	d8c02317 	ldw	r3,140(sp)
2008eeb0:	d9002517 	ldw	r4,148(sp)
2008eeb4:	00800044 	movi	r2,1
2008eeb8:	18800015 	stw	r2,0(r3)
2008eebc:	2001a226 	beq	r4,zero,2008f548 <_dtoa_r+0x734>
2008eec0:	00800034 	movhi	r2,0
2008eec4:	10818b44 	addi	r2,r2,1581
2008eec8:	20800015 	stw	r2,0(r4)
2008eecc:	10bfffc4 	addi	r2,r2,-1
2008eed0:	dfc02117 	ldw	ra,132(sp)
2008eed4:	df002017 	ldw	fp,128(sp)
2008eed8:	ddc01f17 	ldw	r23,124(sp)
2008eedc:	dd801e17 	ldw	r22,120(sp)
2008eee0:	dd401d17 	ldw	r21,116(sp)
2008eee4:	dd001c17 	ldw	r20,112(sp)
2008eee8:	dcc01b17 	ldw	r19,108(sp)
2008eeec:	dc801a17 	ldw	r18,104(sp)
2008eef0:	dc401917 	ldw	r17,100(sp)
2008eef4:	dc001817 	ldw	r16,96(sp)
2008eef8:	dec02204 	addi	sp,sp,136
2008eefc:	f800283a 	ret
2008ef00:	d8c02317 	ldw	r3,140(sp)
2008ef04:	0089c3c4 	movi	r2,9999
2008ef08:	18800015 	stw	r2,0(r3)
2008ef0c:	90017c26 	beq	r18,zero,2008f500 <_dtoa_r+0x6ec>
2008ef10:	00800034 	movhi	r2,0
2008ef14:	10819f04 	addi	r2,r2,1660
2008ef18:	d9002517 	ldw	r4,148(sp)
2008ef1c:	203fec26 	beq	r4,zero,2008eed0 <__flash_rwdata_start+0xffff2888>
2008ef20:	10c000c7 	ldb	r3,3(r2)
2008ef24:	18017d1e 	bne	r3,zero,2008f51c <_dtoa_r+0x708>
2008ef28:	10c000c4 	addi	r3,r2,3
2008ef2c:	d9802517 	ldw	r6,148(sp)
2008ef30:	30c00015 	stw	r3,0(r6)
2008ef34:	003fe606 	br	2008eed0 <__flash_rwdata_start+0xffff2888>
2008ef38:	04e00034 	movhi	r19,32768
2008ef3c:	9cffffc4 	addi	r19,r19,-1
2008ef40:	00800044 	movi	r2,1
2008ef44:	ace6703a 	and	r19,r21,r19
2008ef48:	88800015 	stw	r2,0(r17)
2008ef4c:	982b883a 	mov	r21,r19
2008ef50:	003fcd06 	br	2008ee88 <__flash_rwdata_start+0xffff2840>
2008ef54:	d8800204 	addi	r2,sp,8
2008ef58:	a822d53a 	srli	r17,r21,20
2008ef5c:	d8800015 	stw	r2,0(sp)
2008ef60:	8009883a 	mov	r4,r16
2008ef64:	900b883a 	mov	r5,r18
2008ef68:	980d883a 	mov	r6,r19
2008ef6c:	d9c00104 	addi	r7,sp,4
2008ef70:	00926f00 	call	200926f0 <__d2b>
2008ef74:	1039883a 	mov	fp,r2
2008ef78:	88016a1e 	bne	r17,zero,2008f524 <_dtoa_r+0x710>
2008ef7c:	dd000217 	ldw	r20,8(sp)
2008ef80:	dc400117 	ldw	r17,4(sp)
2008ef84:	00befbc4 	movi	r2,-1041
2008ef88:	a463883a 	add	r17,r20,r17
2008ef8c:	8882ea16 	blt	r17,r2,2008fb38 <_dtoa_r+0xd24>
2008ef90:	00bf0384 	movi	r2,-1010
2008ef94:	1445c83a 	sub	r2,r2,r17
2008ef98:	89010484 	addi	r4,r17,1042
2008ef9c:	a8aa983a 	sll	r21,r21,r2
2008efa0:	9108d83a 	srl	r4,r18,r4
2008efa4:	a908b03a 	or	r4,r21,r4
2008efa8:	00893dc0 	call	200893dc <__floatunsidf>
2008efac:	017f8434 	movhi	r5,65040
2008efb0:	01800044 	movi	r6,1
2008efb4:	1009883a 	mov	r4,r2
2008efb8:	194b883a 	add	r5,r3,r5
2008efbc:	8c7fffc4 	addi	r17,r17,-1
2008efc0:	d9800f15 	stw	r6,60(sp)
2008efc4:	000d883a 	mov	r6,zero
2008efc8:	01cffe34 	movhi	r7,16376
2008efcc:	00889b40 	call	200889b4 <__subdf3>
2008efd0:	0198dbf4 	movhi	r6,25455
2008efd4:	01cff4f4 	movhi	r7,16339
2008efd8:	1009883a 	mov	r4,r2
2008efdc:	180b883a 	mov	r5,r3
2008efe0:	3190d844 	addi	r6,r6,17249
2008efe4:	39e1e9c4 	addi	r7,r7,-30809
2008efe8:	00882900 	call	20088290 <__muldf3>
2008efec:	01a2d874 	movhi	r6,35681
2008eff0:	01cff1f4 	movhi	r7,16327
2008eff4:	180b883a 	mov	r5,r3
2008eff8:	31b22cc4 	addi	r6,r6,-14157
2008effc:	39e28a04 	addi	r7,r7,-30168
2008f000:	1009883a 	mov	r4,r2
2008f004:	00871280 	call	20087128 <__adddf3>
2008f008:	8809883a 	mov	r4,r17
2008f00c:	102d883a 	mov	r22,r2
2008f010:	182b883a 	mov	r21,r3
2008f014:	008930c0 	call	2008930c <__floatsidf>
2008f018:	019427f4 	movhi	r6,20639
2008f01c:	01cff4f4 	movhi	r7,16339
2008f020:	1009883a 	mov	r4,r2
2008f024:	180b883a 	mov	r5,r3
2008f028:	319e7ec4 	addi	r6,r6,31227
2008f02c:	39d104c4 	addi	r7,r7,17427
2008f030:	00882900 	call	20088290 <__muldf3>
2008f034:	b009883a 	mov	r4,r22
2008f038:	a80b883a 	mov	r5,r21
2008f03c:	100d883a 	mov	r6,r2
2008f040:	180f883a 	mov	r7,r3
2008f044:	00871280 	call	20087128 <__adddf3>
2008f048:	1009883a 	mov	r4,r2
2008f04c:	180b883a 	mov	r5,r3
2008f050:	102d883a 	mov	r22,r2
2008f054:	182b883a 	mov	r21,r3
2008f058:	00892840 	call	20089284 <__fixdfsi>
2008f05c:	b009883a 	mov	r4,r22
2008f060:	a80b883a 	mov	r5,r21
2008f064:	000d883a 	mov	r6,zero
2008f068:	000f883a 	mov	r7,zero
2008f06c:	d8800515 	stw	r2,20(sp)
2008f070:	00970a40 	call	200970a4 <__ledf2>
2008f074:	10023116 	blt	r2,zero,2008f93c <_dtoa_r+0xb28>
2008f078:	d8c00517 	ldw	r3,20(sp)
2008f07c:	00800584 	movi	r2,22
2008f080:	10c21f36 	bltu	r2,r3,2008f900 <_dtoa_r+0xaec>
2008f084:	180490fa 	slli	r2,r3,3
2008f088:	00c00034 	movhi	r3,0
2008f08c:	18c1ba04 	addi	r3,r3,1768
2008f090:	1885883a 	add	r2,r3,r2
2008f094:	11000017 	ldw	r4,0(r2)
2008f098:	11400117 	ldw	r5,4(r2)
2008f09c:	900d883a 	mov	r6,r18
2008f0a0:	980f883a 	mov	r7,r19
2008f0a4:	0096fc40 	call	20096fc4 <__gedf2>
2008f0a8:	0082a70e 	bge	zero,r2,2008fb48 <_dtoa_r+0xd34>
2008f0ac:	d9000517 	ldw	r4,20(sp)
2008f0b0:	d8000d15 	stw	zero,52(sp)
2008f0b4:	213fffc4 	addi	r4,r4,-1
2008f0b8:	d9000515 	stw	r4,20(sp)
2008f0bc:	a463c83a 	sub	r17,r20,r17
2008f0c0:	8dbfffc4 	addi	r22,r17,-1
2008f0c4:	b0021916 	blt	r22,zero,2008f92c <_dtoa_r+0xb18>
2008f0c8:	d8000815 	stw	zero,32(sp)
2008f0cc:	d8800517 	ldw	r2,20(sp)
2008f0d0:	10020e16 	blt	r2,zero,2008f90c <_dtoa_r+0xaf8>
2008f0d4:	b0ad883a 	add	r22,r22,r2
2008f0d8:	d8800a15 	stw	r2,40(sp)
2008f0dc:	d8000915 	stw	zero,36(sp)
2008f0e0:	d8c00317 	ldw	r3,12(sp)
2008f0e4:	00800244 	movi	r2,9
2008f0e8:	10c11a36 	bltu	r2,r3,2008f554 <_dtoa_r+0x740>
2008f0ec:	00800144 	movi	r2,5
2008f0f0:	10c4fc0e 	bge	r2,r3,200904e4 <_dtoa_r+0x16d0>
2008f0f4:	18ffff04 	addi	r3,r3,-4
2008f0f8:	d8c00315 	stw	r3,12(sp)
2008f0fc:	0029883a 	mov	r20,zero
2008f100:	d9800317 	ldw	r6,12(sp)
2008f104:	008000c4 	movi	r2,3
2008f108:	3083bd26 	beq	r6,r2,20090000 <_dtoa_r+0x11ec>
2008f10c:	1183670e 	bge	r2,r6,2008feac <_dtoa_r+0x1098>
2008f110:	d8c00317 	ldw	r3,12(sp)
2008f114:	00800104 	movi	r2,4
2008f118:	1882e726 	beq	r3,r2,2008fcb8 <_dtoa_r+0xea4>
2008f11c:	00800144 	movi	r2,5
2008f120:	1884f21e 	bne	r3,r2,200904ec <_dtoa_r+0x16d8>
2008f124:	00800044 	movi	r2,1
2008f128:	d8800b15 	stw	r2,44(sp)
2008f12c:	d8c02217 	ldw	r3,136(sp)
2008f130:	d9000517 	ldw	r4,20(sp)
2008f134:	1907883a 	add	r3,r3,r4
2008f138:	19800044 	addi	r6,r3,1
2008f13c:	d8c00c15 	stw	r3,48(sp)
2008f140:	d9800615 	stw	r6,24(sp)
2008f144:	0183c30e 	bge	zero,r6,20090054 <_dtoa_r+0x1240>
2008f148:	d9800617 	ldw	r6,24(sp)
2008f14c:	3023883a 	mov	r17,r6
2008f150:	80001115 	stw	zero,68(r16)
2008f154:	008005c4 	movi	r2,23
2008f158:	1184f62e 	bgeu	r2,r6,20090534 <_dtoa_r+0x1720>
2008f15c:	00c00044 	movi	r3,1
2008f160:	00800104 	movi	r2,4
2008f164:	1085883a 	add	r2,r2,r2
2008f168:	11000504 	addi	r4,r2,20
2008f16c:	180b883a 	mov	r5,r3
2008f170:	18c00044 	addi	r3,r3,1
2008f174:	313ffb2e 	bgeu	r6,r4,2008f164 <__flash_rwdata_start+0xffff2b1c>
2008f178:	81401115 	stw	r5,68(r16)
2008f17c:	8009883a 	mov	r4,r16
2008f180:	0091aa80 	call	20091aa8 <_Balloc>
2008f184:	d8800715 	stw	r2,28(sp)
2008f188:	80801015 	stw	r2,64(r16)
2008f18c:	00800384 	movi	r2,14
2008f190:	1440fd36 	bltu	r2,r17,2008f588 <_dtoa_r+0x774>
2008f194:	a000fc26 	beq	r20,zero,2008f588 <_dtoa_r+0x774>
2008f198:	d8800517 	ldw	r2,20(sp)
2008f19c:	0083b90e 	bge	zero,r2,20090084 <_dtoa_r+0x1270>
2008f1a0:	d8c00517 	ldw	r3,20(sp)
2008f1a4:	108003cc 	andi	r2,r2,15
2008f1a8:	100490fa 	slli	r2,r2,3
2008f1ac:	182fd13a 	srai	r23,r3,4
2008f1b0:	00c00034 	movhi	r3,0
2008f1b4:	18c1ba04 	addi	r3,r3,1768
2008f1b8:	1885883a 	add	r2,r3,r2
2008f1bc:	b8c0040c 	andi	r3,r23,16
2008f1c0:	12c00017 	ldw	r11,0(r2)
2008f1c4:	12800117 	ldw	r10,4(r2)
2008f1c8:	18039726 	beq	r3,zero,20090028 <_dtoa_r+0x1214>
2008f1cc:	00800034 	movhi	r2,0
2008f1d0:	1081b004 	addi	r2,r2,1728
2008f1d4:	11800817 	ldw	r6,32(r2)
2008f1d8:	11c00917 	ldw	r7,36(r2)
2008f1dc:	9009883a 	mov	r4,r18
2008f1e0:	980b883a 	mov	r5,r19
2008f1e4:	da801615 	stw	r10,88(sp)
2008f1e8:	dac01515 	stw	r11,84(sp)
2008f1ec:	00879c40 	call	200879c4 <__divdf3>
2008f1f0:	da801617 	ldw	r10,88(sp)
2008f1f4:	dac01517 	ldw	r11,84(sp)
2008f1f8:	bdc003cc 	andi	r23,r23,15
2008f1fc:	044000c4 	movi	r17,3
2008f200:	d8800e15 	stw	r2,56(sp)
2008f204:	182b883a 	mov	r21,r3
2008f208:	b8001126 	beq	r23,zero,2008f250 <_dtoa_r+0x43c>
2008f20c:	05000034 	movhi	r20,0
2008f210:	a501b004 	addi	r20,r20,1728
2008f214:	5805883a 	mov	r2,r11
2008f218:	5007883a 	mov	r3,r10
2008f21c:	b980004c 	andi	r6,r23,1
2008f220:	1009883a 	mov	r4,r2
2008f224:	b82fd07a 	srai	r23,r23,1
2008f228:	180b883a 	mov	r5,r3
2008f22c:	30000426 	beq	r6,zero,2008f240 <_dtoa_r+0x42c>
2008f230:	a1800017 	ldw	r6,0(r20)
2008f234:	a1c00117 	ldw	r7,4(r20)
2008f238:	8c400044 	addi	r17,r17,1
2008f23c:	00882900 	call	20088290 <__muldf3>
2008f240:	a5000204 	addi	r20,r20,8
2008f244:	b83ff51e 	bne	r23,zero,2008f21c <__flash_rwdata_start+0xffff2bd4>
2008f248:	1017883a 	mov	r11,r2
2008f24c:	1815883a 	mov	r10,r3
2008f250:	d9000e17 	ldw	r4,56(sp)
2008f254:	a80b883a 	mov	r5,r21
2008f258:	580d883a 	mov	r6,r11
2008f25c:	500f883a 	mov	r7,r10
2008f260:	00879c40 	call	200879c4 <__divdf3>
2008f264:	1029883a 	mov	r20,r2
2008f268:	182b883a 	mov	r21,r3
2008f26c:	d9800d17 	ldw	r6,52(sp)
2008f270:	30000626 	beq	r6,zero,2008f28c <_dtoa_r+0x478>
2008f274:	a009883a 	mov	r4,r20
2008f278:	a80b883a 	mov	r5,r21
2008f27c:	000d883a 	mov	r6,zero
2008f280:	01cffc34 	movhi	r7,16368
2008f284:	00970a40 	call	200970a4 <__ledf2>
2008f288:	10043216 	blt	r2,zero,20090354 <_dtoa_r+0x1540>
2008f28c:	8809883a 	mov	r4,r17
2008f290:	008930c0 	call	2008930c <__floatsidf>
2008f294:	1009883a 	mov	r4,r2
2008f298:	180b883a 	mov	r5,r3
2008f29c:	a00d883a 	mov	r6,r20
2008f2a0:	a80f883a 	mov	r7,r21
2008f2a4:	00882900 	call	20088290 <__muldf3>
2008f2a8:	000d883a 	mov	r6,zero
2008f2ac:	1009883a 	mov	r4,r2
2008f2b0:	180b883a 	mov	r5,r3
2008f2b4:	01d00734 	movhi	r7,16412
2008f2b8:	00871280 	call	20087128 <__adddf3>
2008f2bc:	1023883a 	mov	r17,r2
2008f2c0:	d9800617 	ldw	r6,24(sp)
2008f2c4:	00bf3034 	movhi	r2,64704
2008f2c8:	1885883a 	add	r2,r3,r2
2008f2cc:	d8800e15 	stw	r2,56(sp)
2008f2d0:	30032e26 	beq	r6,zero,2008ff8c <_dtoa_r+0x1178>
2008f2d4:	d8c00517 	ldw	r3,20(sp)
2008f2d8:	da800617 	ldw	r10,24(sp)
2008f2dc:	d8c01215 	stw	r3,72(sp)
2008f2e0:	d9000b17 	ldw	r4,44(sp)
2008f2e4:	2003b026 	beq	r4,zero,200901a8 <_dtoa_r+0x1394>
2008f2e8:	50bfffc4 	addi	r2,r10,-1
2008f2ec:	100490fa 	slli	r2,r2,3
2008f2f0:	00c00034 	movhi	r3,0
2008f2f4:	18c1ba04 	addi	r3,r3,1768
2008f2f8:	1885883a 	add	r2,r3,r2
2008f2fc:	11800017 	ldw	r6,0(r2)
2008f300:	11c00117 	ldw	r7,4(r2)
2008f304:	d8800717 	ldw	r2,28(sp)
2008f308:	0009883a 	mov	r4,zero
2008f30c:	014ff834 	movhi	r5,16352
2008f310:	da801615 	stw	r10,88(sp)
2008f314:	15c00044 	addi	r23,r2,1
2008f318:	00879c40 	call	200879c4 <__divdf3>
2008f31c:	d9c00e17 	ldw	r7,56(sp)
2008f320:	880d883a 	mov	r6,r17
2008f324:	1009883a 	mov	r4,r2
2008f328:	180b883a 	mov	r5,r3
2008f32c:	00889b40 	call	200889b4 <__subdf3>
2008f330:	a80b883a 	mov	r5,r21
2008f334:	a009883a 	mov	r4,r20
2008f338:	d8c01015 	stw	r3,64(sp)
2008f33c:	d8800e15 	stw	r2,56(sp)
2008f340:	00892840 	call	20089284 <__fixdfsi>
2008f344:	1009883a 	mov	r4,r2
2008f348:	d8801715 	stw	r2,92(sp)
2008f34c:	008930c0 	call	2008930c <__floatsidf>
2008f350:	a009883a 	mov	r4,r20
2008f354:	a80b883a 	mov	r5,r21
2008f358:	100d883a 	mov	r6,r2
2008f35c:	180f883a 	mov	r7,r3
2008f360:	00889b40 	call	200889b4 <__subdf3>
2008f364:	da001717 	ldw	r8,92(sp)
2008f368:	1829883a 	mov	r20,r3
2008f36c:	d8c00717 	ldw	r3,28(sp)
2008f370:	d9000e17 	ldw	r4,56(sp)
2008f374:	d9401017 	ldw	r5,64(sp)
2008f378:	42000c04 	addi	r8,r8,48
2008f37c:	1023883a 	mov	r17,r2
2008f380:	1a000005 	stb	r8,0(r3)
2008f384:	880d883a 	mov	r6,r17
2008f388:	a00f883a 	mov	r7,r20
2008f38c:	402b883a 	mov	r21,r8
2008f390:	0096fc40 	call	20096fc4 <__gedf2>
2008f394:	00844516 	blt	zero,r2,200904ac <_dtoa_r+0x1698>
2008f398:	0009883a 	mov	r4,zero
2008f39c:	014ffc34 	movhi	r5,16368
2008f3a0:	880d883a 	mov	r6,r17
2008f3a4:	a00f883a 	mov	r7,r20
2008f3a8:	00889b40 	call	200889b4 <__subdf3>
2008f3ac:	d9000e17 	ldw	r4,56(sp)
2008f3b0:	d9401017 	ldw	r5,64(sp)
2008f3b4:	100d883a 	mov	r6,r2
2008f3b8:	180f883a 	mov	r7,r3
2008f3bc:	0096fc40 	call	20096fc4 <__gedf2>
2008f3c0:	da801617 	ldw	r10,88(sp)
2008f3c4:	00843616 	blt	zero,r2,200904a0 <_dtoa_r+0x168c>
2008f3c8:	00800044 	movi	r2,1
2008f3cc:	12806e0e 	bge	r2,r10,2008f588 <_dtoa_r+0x774>
2008f3d0:	d9000717 	ldw	r4,28(sp)
2008f3d4:	dd801315 	stw	r22,76(sp)
2008f3d8:	dc001115 	stw	r16,68(sp)
2008f3dc:	2295883a 	add	r10,r4,r10
2008f3e0:	dcc01415 	stw	r19,80(sp)
2008f3e4:	502d883a 	mov	r22,r10
2008f3e8:	dcc01017 	ldw	r19,64(sp)
2008f3ec:	b821883a 	mov	r16,r23
2008f3f0:	dc801015 	stw	r18,64(sp)
2008f3f4:	dc800e17 	ldw	r18,56(sp)
2008f3f8:	00000906 	br	2008f420 <_dtoa_r+0x60c>
2008f3fc:	00889b40 	call	200889b4 <__subdf3>
2008f400:	1009883a 	mov	r4,r2
2008f404:	180b883a 	mov	r5,r3
2008f408:	900d883a 	mov	r6,r18
2008f40c:	980f883a 	mov	r7,r19
2008f410:	00970a40 	call	200970a4 <__ledf2>
2008f414:	10040e16 	blt	r2,zero,20090450 <_dtoa_r+0x163c>
2008f418:	b821883a 	mov	r16,r23
2008f41c:	bd841026 	beq	r23,r22,20090460 <_dtoa_r+0x164c>
2008f420:	9009883a 	mov	r4,r18
2008f424:	980b883a 	mov	r5,r19
2008f428:	000d883a 	mov	r6,zero
2008f42c:	01d00934 	movhi	r7,16420
2008f430:	00882900 	call	20088290 <__muldf3>
2008f434:	000d883a 	mov	r6,zero
2008f438:	01d00934 	movhi	r7,16420
2008f43c:	8809883a 	mov	r4,r17
2008f440:	a00b883a 	mov	r5,r20
2008f444:	1025883a 	mov	r18,r2
2008f448:	1827883a 	mov	r19,r3
2008f44c:	00882900 	call	20088290 <__muldf3>
2008f450:	180b883a 	mov	r5,r3
2008f454:	1009883a 	mov	r4,r2
2008f458:	1823883a 	mov	r17,r3
2008f45c:	1029883a 	mov	r20,r2
2008f460:	00892840 	call	20089284 <__fixdfsi>
2008f464:	1009883a 	mov	r4,r2
2008f468:	102b883a 	mov	r21,r2
2008f46c:	008930c0 	call	2008930c <__floatsidf>
2008f470:	a009883a 	mov	r4,r20
2008f474:	880b883a 	mov	r5,r17
2008f478:	100d883a 	mov	r6,r2
2008f47c:	180f883a 	mov	r7,r3
2008f480:	00889b40 	call	200889b4 <__subdf3>
2008f484:	ad400c04 	addi	r21,r21,48
2008f488:	1009883a 	mov	r4,r2
2008f48c:	180b883a 	mov	r5,r3
2008f490:	900d883a 	mov	r6,r18
2008f494:	980f883a 	mov	r7,r19
2008f498:	85400005 	stb	r21,0(r16)
2008f49c:	1023883a 	mov	r17,r2
2008f4a0:	1829883a 	mov	r20,r3
2008f4a4:	00970a40 	call	200970a4 <__ledf2>
2008f4a8:	bdc00044 	addi	r23,r23,1
2008f4ac:	0009883a 	mov	r4,zero
2008f4b0:	014ffc34 	movhi	r5,16368
2008f4b4:	880d883a 	mov	r6,r17
2008f4b8:	a00f883a 	mov	r7,r20
2008f4bc:	103fcf0e 	bge	r2,zero,2008f3fc <__flash_rwdata_start+0xffff2db4>
2008f4c0:	d9801217 	ldw	r6,72(sp)
2008f4c4:	dc001117 	ldw	r16,68(sp)
2008f4c8:	d9800515 	stw	r6,20(sp)
2008f4cc:	8009883a 	mov	r4,r16
2008f4d0:	e00b883a 	mov	r5,fp
2008f4d4:	0091b500 	call	20091b50 <_Bfree>
2008f4d8:	d8c00517 	ldw	r3,20(sp)
2008f4dc:	d9002317 	ldw	r4,140(sp)
2008f4e0:	d9802517 	ldw	r6,148(sp)
2008f4e4:	b8000005 	stb	zero,0(r23)
2008f4e8:	18800044 	addi	r2,r3,1
2008f4ec:	20800015 	stw	r2,0(r4)
2008f4f0:	30027226 	beq	r6,zero,2008febc <_dtoa_r+0x10a8>
2008f4f4:	35c00015 	stw	r23,0(r6)
2008f4f8:	d8800717 	ldw	r2,28(sp)
2008f4fc:	003e7406 	br	2008eed0 <__flash_rwdata_start+0xffff2888>
2008f500:	00800434 	movhi	r2,16
2008f504:	10bfffc4 	addi	r2,r2,-1
2008f508:	a8aa703a 	and	r21,r21,r2
2008f50c:	a83e801e 	bne	r21,zero,2008ef10 <__flash_rwdata_start+0xffff28c8>
2008f510:	00800034 	movhi	r2,0
2008f514:	10819c04 	addi	r2,r2,1648
2008f518:	003e7f06 	br	2008ef18 <__flash_rwdata_start+0xffff28d0>
2008f51c:	10c00204 	addi	r3,r2,8
2008f520:	003e8206 	br	2008ef2c <__flash_rwdata_start+0xffff28e4>
2008f524:	01400434 	movhi	r5,16
2008f528:	297fffc4 	addi	r5,r5,-1
2008f52c:	994a703a 	and	r5,r19,r5
2008f530:	9009883a 	mov	r4,r18
2008f534:	8c7f0044 	addi	r17,r17,-1023
2008f538:	294ffc34 	orhi	r5,r5,16368
2008f53c:	dd000217 	ldw	r20,8(sp)
2008f540:	d8000f15 	stw	zero,60(sp)
2008f544:	003e9f06 	br	2008efc4 <__flash_rwdata_start+0xffff297c>
2008f548:	00800034 	movhi	r2,0
2008f54c:	10818b04 	addi	r2,r2,1580
2008f550:	003e5f06 	br	2008eed0 <__flash_rwdata_start+0xffff2888>
2008f554:	80001115 	stw	zero,68(r16)
2008f558:	8009883a 	mov	r4,r16
2008f55c:	000b883a 	mov	r5,zero
2008f560:	0091aa80 	call	20091aa8 <_Balloc>
2008f564:	01bfffc4 	movi	r6,-1
2008f568:	d8800715 	stw	r2,28(sp)
2008f56c:	80801015 	stw	r2,64(r16)
2008f570:	00800044 	movi	r2,1
2008f574:	d9800c15 	stw	r6,48(sp)
2008f578:	d8800b15 	stw	r2,44(sp)
2008f57c:	d9800615 	stw	r6,24(sp)
2008f580:	d8002215 	stw	zero,136(sp)
2008f584:	d8000315 	stw	zero,12(sp)
2008f588:	d8800117 	ldw	r2,4(sp)
2008f58c:	10008e16 	blt	r2,zero,2008f7c8 <_dtoa_r+0x9b4>
2008f590:	d9000517 	ldw	r4,20(sp)
2008f594:	00c00384 	movi	r3,14
2008f598:	19008b16 	blt	r3,r4,2008f7c8 <_dtoa_r+0x9b4>
2008f59c:	200490fa 	slli	r2,r4,3
2008f5a0:	00c00034 	movhi	r3,0
2008f5a4:	d9802217 	ldw	r6,136(sp)
2008f5a8:	18c1ba04 	addi	r3,r3,1768
2008f5ac:	1885883a 	add	r2,r3,r2
2008f5b0:	14400017 	ldw	r17,0(r2)
2008f5b4:	15000117 	ldw	r20,4(r2)
2008f5b8:	3001c716 	blt	r6,zero,2008fcd8 <_dtoa_r+0xec4>
2008f5bc:	880d883a 	mov	r6,r17
2008f5c0:	a00f883a 	mov	r7,r20
2008f5c4:	9009883a 	mov	r4,r18
2008f5c8:	980b883a 	mov	r5,r19
2008f5cc:	00879c40 	call	200879c4 <__divdf3>
2008f5d0:	180b883a 	mov	r5,r3
2008f5d4:	1009883a 	mov	r4,r2
2008f5d8:	00892840 	call	20089284 <__fixdfsi>
2008f5dc:	1009883a 	mov	r4,r2
2008f5e0:	102d883a 	mov	r22,r2
2008f5e4:	008930c0 	call	2008930c <__floatsidf>
2008f5e8:	1009883a 	mov	r4,r2
2008f5ec:	180b883a 	mov	r5,r3
2008f5f0:	880d883a 	mov	r6,r17
2008f5f4:	a00f883a 	mov	r7,r20
2008f5f8:	00882900 	call	20088290 <__muldf3>
2008f5fc:	9009883a 	mov	r4,r18
2008f600:	980b883a 	mov	r5,r19
2008f604:	100d883a 	mov	r6,r2
2008f608:	180f883a 	mov	r7,r3
2008f60c:	00889b40 	call	200889b4 <__subdf3>
2008f610:	d9000717 	ldw	r4,28(sp)
2008f614:	d9800617 	ldw	r6,24(sp)
2008f618:	180b883a 	mov	r5,r3
2008f61c:	b0c00c04 	addi	r3,r22,48
2008f620:	20c00005 	stb	r3,0(r4)
2008f624:	25c00044 	addi	r23,r4,1
2008f628:	01000044 	movi	r4,1
2008f62c:	1011883a 	mov	r8,r2
2008f630:	2807883a 	mov	r3,r5
2008f634:	31003d26 	beq	r6,r4,2008f72c <_dtoa_r+0x918>
2008f638:	000d883a 	mov	r6,zero
2008f63c:	01d00934 	movhi	r7,16420
2008f640:	1009883a 	mov	r4,r2
2008f644:	00882900 	call	20088290 <__muldf3>
2008f648:	1009883a 	mov	r4,r2
2008f64c:	180b883a 	mov	r5,r3
2008f650:	000d883a 	mov	r6,zero
2008f654:	000f883a 	mov	r7,zero
2008f658:	1027883a 	mov	r19,r2
2008f65c:	182b883a 	mov	r21,r3
2008f660:	0096f400 	call	20096f40 <__eqdf2>
2008f664:	103f9926 	beq	r2,zero,2008f4cc <__flash_rwdata_start+0xffff2e84>
2008f668:	d8c00617 	ldw	r3,24(sp)
2008f66c:	d9000717 	ldw	r4,28(sp)
2008f670:	b825883a 	mov	r18,r23
2008f674:	18bfffc4 	addi	r2,r3,-1
2008f678:	20ad883a 	add	r22,r4,r2
2008f67c:	dc000315 	stw	r16,12(sp)
2008f680:	00000a06 	br	2008f6ac <_dtoa_r+0x898>
2008f684:	00882900 	call	20088290 <__muldf3>
2008f688:	1009883a 	mov	r4,r2
2008f68c:	180b883a 	mov	r5,r3
2008f690:	000d883a 	mov	r6,zero
2008f694:	000f883a 	mov	r7,zero
2008f698:	1027883a 	mov	r19,r2
2008f69c:	182b883a 	mov	r21,r3
2008f6a0:	b825883a 	mov	r18,r23
2008f6a4:	0096f400 	call	20096f40 <__eqdf2>
2008f6a8:	10022626 	beq	r2,zero,2008ff44 <_dtoa_r+0x1130>
2008f6ac:	880d883a 	mov	r6,r17
2008f6b0:	a00f883a 	mov	r7,r20
2008f6b4:	9809883a 	mov	r4,r19
2008f6b8:	a80b883a 	mov	r5,r21
2008f6bc:	00879c40 	call	200879c4 <__divdf3>
2008f6c0:	180b883a 	mov	r5,r3
2008f6c4:	1009883a 	mov	r4,r2
2008f6c8:	00892840 	call	20089284 <__fixdfsi>
2008f6cc:	1009883a 	mov	r4,r2
2008f6d0:	1021883a 	mov	r16,r2
2008f6d4:	008930c0 	call	2008930c <__floatsidf>
2008f6d8:	1009883a 	mov	r4,r2
2008f6dc:	180b883a 	mov	r5,r3
2008f6e0:	880d883a 	mov	r6,r17
2008f6e4:	a00f883a 	mov	r7,r20
2008f6e8:	00882900 	call	20088290 <__muldf3>
2008f6ec:	9809883a 	mov	r4,r19
2008f6f0:	a80b883a 	mov	r5,r21
2008f6f4:	100d883a 	mov	r6,r2
2008f6f8:	180f883a 	mov	r7,r3
2008f6fc:	00889b40 	call	200889b4 <__subdf3>
2008f700:	82000c04 	addi	r8,r16,48
2008f704:	92000005 	stb	r8,0(r18)
2008f708:	1009883a 	mov	r4,r2
2008f70c:	180b883a 	mov	r5,r3
2008f710:	000d883a 	mov	r6,zero
2008f714:	01d00934 	movhi	r7,16420
2008f718:	1011883a 	mov	r8,r2
2008f71c:	bdc00044 	addi	r23,r23,1
2008f720:	95bfd81e 	bne	r18,r22,2008f684 <__flash_rwdata_start+0xffff303c>
2008f724:	802d883a 	mov	r22,r16
2008f728:	dc000317 	ldw	r16,12(sp)
2008f72c:	4009883a 	mov	r4,r8
2008f730:	180b883a 	mov	r5,r3
2008f734:	400d883a 	mov	r6,r8
2008f738:	180f883a 	mov	r7,r3
2008f73c:	00871280 	call	20087128 <__adddf3>
2008f740:	8809883a 	mov	r4,r17
2008f744:	a00b883a 	mov	r5,r20
2008f748:	100d883a 	mov	r6,r2
2008f74c:	180f883a 	mov	r7,r3
2008f750:	1027883a 	mov	r19,r2
2008f754:	1825883a 	mov	r18,r3
2008f758:	00970a40 	call	200970a4 <__ledf2>
2008f75c:	10000816 	blt	r2,zero,2008f780 <_dtoa_r+0x96c>
2008f760:	8809883a 	mov	r4,r17
2008f764:	a00b883a 	mov	r5,r20
2008f768:	980d883a 	mov	r6,r19
2008f76c:	900f883a 	mov	r7,r18
2008f770:	0096f400 	call	20096f40 <__eqdf2>
2008f774:	103f551e 	bne	r2,zero,2008f4cc <__flash_rwdata_start+0xffff2e84>
2008f778:	b580004c 	andi	r22,r22,1
2008f77c:	b03f5326 	beq	r22,zero,2008f4cc <__flash_rwdata_start+0xffff2e84>
2008f780:	bd7fffc3 	ldbu	r21,-1(r23)
2008f784:	b8bfffc4 	addi	r2,r23,-1
2008f788:	1007883a 	mov	r3,r2
2008f78c:	01400e44 	movi	r5,57
2008f790:	d9800717 	ldw	r6,28(sp)
2008f794:	00000506 	br	2008f7ac <_dtoa_r+0x998>
2008f798:	18ffffc4 	addi	r3,r3,-1
2008f79c:	30825e26 	beq	r6,r2,20090118 <_dtoa_r+0x1304>
2008f7a0:	1d400003 	ldbu	r21,0(r3)
2008f7a4:	102f883a 	mov	r23,r2
2008f7a8:	10bfffc4 	addi	r2,r2,-1
2008f7ac:	a9003fcc 	andi	r4,r21,255
2008f7b0:	2100201c 	xori	r4,r4,128
2008f7b4:	213fe004 	addi	r4,r4,-128
2008f7b8:	217ff726 	beq	r4,r5,2008f798 <__flash_rwdata_start+0xffff3150>
2008f7bc:	aa000044 	addi	r8,r21,1
2008f7c0:	12000005 	stb	r8,0(r2)
2008f7c4:	003f4106 	br	2008f4cc <__flash_rwdata_start+0xffff2e84>
2008f7c8:	d8c00b17 	ldw	r3,44(sp)
2008f7cc:	18006726 	beq	r3,zero,2008f96c <_dtoa_r+0xb58>
2008f7d0:	d9000317 	ldw	r4,12(sp)
2008f7d4:	00c00044 	movi	r3,1
2008f7d8:	19016a0e 	bge	r3,r4,2008fd84 <_dtoa_r+0xf70>
2008f7dc:	d8800617 	ldw	r2,24(sp)
2008f7e0:	d8c00917 	ldw	r3,36(sp)
2008f7e4:	157fffc4 	addi	r21,r2,-1
2008f7e8:	1d420716 	blt	r3,r21,20090008 <_dtoa_r+0x11f4>
2008f7ec:	1d6bc83a 	sub	r21,r3,r21
2008f7f0:	d8800617 	ldw	r2,24(sp)
2008f7f4:	1002c716 	blt	r2,zero,20090314 <_dtoa_r+0x1500>
2008f7f8:	dd000817 	ldw	r20,32(sp)
2008f7fc:	d8800617 	ldw	r2,24(sp)
2008f800:	d9800817 	ldw	r6,32(sp)
2008f804:	8009883a 	mov	r4,r16
2008f808:	01400044 	movi	r5,1
2008f80c:	308d883a 	add	r6,r6,r2
2008f810:	d9800815 	stw	r6,32(sp)
2008f814:	b0ad883a 	add	r22,r22,r2
2008f818:	0091eb40 	call	20091eb4 <__i2b>
2008f81c:	1023883a 	mov	r17,r2
2008f820:	a0000826 	beq	r20,zero,2008f844 <_dtoa_r+0xa30>
2008f824:	0580070e 	bge	zero,r22,2008f844 <_dtoa_r+0xa30>
2008f828:	b005883a 	mov	r2,r22
2008f82c:	a5812016 	blt	r20,r22,2008fcb0 <_dtoa_r+0xe9c>
2008f830:	d8c00817 	ldw	r3,32(sp)
2008f834:	a0a9c83a 	sub	r20,r20,r2
2008f838:	b0adc83a 	sub	r22,r22,r2
2008f83c:	1887c83a 	sub	r3,r3,r2
2008f840:	d8c00815 	stw	r3,32(sp)
2008f844:	d9000917 	ldw	r4,36(sp)
2008f848:	0100140e 	bge	zero,r4,2008f89c <_dtoa_r+0xa88>
2008f84c:	d9800b17 	ldw	r6,44(sp)
2008f850:	3001e526 	beq	r6,zero,2008ffe8 <_dtoa_r+0x11d4>
2008f854:	05400e0e 	bge	zero,r21,2008f890 <_dtoa_r+0xa7c>
2008f858:	880b883a 	mov	r5,r17
2008f85c:	8009883a 	mov	r4,r16
2008f860:	a80d883a 	mov	r6,r21
2008f864:	00920ec0 	call	200920ec <__pow5mult>
2008f868:	e00d883a 	mov	r6,fp
2008f86c:	8009883a 	mov	r4,r16
2008f870:	100b883a 	mov	r5,r2
2008f874:	1023883a 	mov	r17,r2
2008f878:	0091ef00 	call	20091ef0 <__multiply>
2008f87c:	102f883a 	mov	r23,r2
2008f880:	e00b883a 	mov	r5,fp
2008f884:	8009883a 	mov	r4,r16
2008f888:	0091b500 	call	20091b50 <_Bfree>
2008f88c:	b839883a 	mov	fp,r23
2008f890:	d8800917 	ldw	r2,36(sp)
2008f894:	154dc83a 	sub	r6,r2,r21
2008f898:	3001281e 	bne	r6,zero,2008fd3c <_dtoa_r+0xf28>
2008f89c:	05c00044 	movi	r23,1
2008f8a0:	8009883a 	mov	r4,r16
2008f8a4:	b80b883a 	mov	r5,r23
2008f8a8:	0091eb40 	call	20091eb4 <__i2b>
2008f8ac:	d8c00a17 	ldw	r3,40(sp)
2008f8b0:	102b883a 	mov	r21,r2
2008f8b4:	00c0310e 	bge	zero,r3,2008f97c <_dtoa_r+0xb68>
2008f8b8:	8009883a 	mov	r4,r16
2008f8bc:	100b883a 	mov	r5,r2
2008f8c0:	180d883a 	mov	r6,r3
2008f8c4:	00920ec0 	call	200920ec <__pow5mult>
2008f8c8:	d9000317 	ldw	r4,12(sp)
2008f8cc:	102b883a 	mov	r21,r2
2008f8d0:	b9011f0e 	bge	r23,r4,2008fd50 <_dtoa_r+0xf3c>
2008f8d4:	0027883a 	mov	r19,zero
2008f8d8:	a8800417 	ldw	r2,16(r21)
2008f8dc:	10800104 	addi	r2,r2,4
2008f8e0:	1085883a 	add	r2,r2,r2
2008f8e4:	1085883a 	add	r2,r2,r2
2008f8e8:	a885883a 	add	r2,r21,r2
2008f8ec:	11000017 	ldw	r4,0(r2)
2008f8f0:	0091d9c0 	call	20091d9c <__hi0bits>
2008f8f4:	00c00804 	movi	r3,32
2008f8f8:	1885c83a 	sub	r2,r3,r2
2008f8fc:	00002506 	br	2008f994 <_dtoa_r+0xb80>
2008f900:	01800044 	movi	r6,1
2008f904:	d9800d15 	stw	r6,52(sp)
2008f908:	003dec06 	br	2008f0bc <__flash_rwdata_start+0xffff2a74>
2008f90c:	d8c00817 	ldw	r3,32(sp)
2008f910:	d9000517 	ldw	r4,20(sp)
2008f914:	d8000a15 	stw	zero,40(sp)
2008f918:	1907c83a 	sub	r3,r3,r4
2008f91c:	010dc83a 	sub	r6,zero,r4
2008f920:	d8c00815 	stw	r3,32(sp)
2008f924:	d9800915 	stw	r6,36(sp)
2008f928:	003ded06 	br	2008f0e0 <__flash_rwdata_start+0xffff2a98>
2008f92c:	05adc83a 	sub	r22,zero,r22
2008f930:	dd800815 	stw	r22,32(sp)
2008f934:	002d883a 	mov	r22,zero
2008f938:	003de406 	br	2008f0cc <__flash_rwdata_start+0xffff2a84>
2008f93c:	d9000517 	ldw	r4,20(sp)
2008f940:	008930c0 	call	2008930c <__floatsidf>
2008f944:	1009883a 	mov	r4,r2
2008f948:	180b883a 	mov	r5,r3
2008f94c:	b00d883a 	mov	r6,r22
2008f950:	a80f883a 	mov	r7,r21
2008f954:	0096f400 	call	20096f40 <__eqdf2>
2008f958:	103dc726 	beq	r2,zero,2008f078 <__flash_rwdata_start+0xffff2a30>
2008f95c:	d8800517 	ldw	r2,20(sp)
2008f960:	10bfffc4 	addi	r2,r2,-1
2008f964:	d8800515 	stw	r2,20(sp)
2008f968:	003dc306 	br	2008f078 <__flash_rwdata_start+0xffff2a30>
2008f96c:	dd400917 	ldw	r21,36(sp)
2008f970:	dd000817 	ldw	r20,32(sp)
2008f974:	0023883a 	mov	r17,zero
2008f978:	003fa906 	br	2008f820 <__flash_rwdata_start+0xffff31d8>
2008f97c:	d9800317 	ldw	r6,12(sp)
2008f980:	b981670e 	bge	r23,r6,2008ff20 <_dtoa_r+0x110c>
2008f984:	0027883a 	mov	r19,zero
2008f988:	d8c00a17 	ldw	r3,40(sp)
2008f98c:	183fd21e 	bne	r3,zero,2008f8d8 <__flash_rwdata_start+0xffff3290>
2008f990:	00800044 	movi	r2,1
2008f994:	1585883a 	add	r2,r2,r22
2008f998:	108007cc 	andi	r2,r2,31
2008f99c:	10005f26 	beq	r2,zero,2008fb1c <_dtoa_r+0xd08>
2008f9a0:	00c00804 	movi	r3,32
2008f9a4:	1887c83a 	sub	r3,r3,r2
2008f9a8:	01000104 	movi	r4,4
2008f9ac:	20c2dd0e 	bge	r4,r3,20090524 <_dtoa_r+0x1710>
2008f9b0:	d9000817 	ldw	r4,32(sp)
2008f9b4:	00c00704 	movi	r3,28
2008f9b8:	1885c83a 	sub	r2,r3,r2
2008f9bc:	2089883a 	add	r4,r4,r2
2008f9c0:	d9000815 	stw	r4,32(sp)
2008f9c4:	a0a9883a 	add	r20,r20,r2
2008f9c8:	b0ad883a 	add	r22,r22,r2
2008f9cc:	d8800817 	ldw	r2,32(sp)
2008f9d0:	0080050e 	bge	zero,r2,2008f9e8 <_dtoa_r+0xbd4>
2008f9d4:	e00b883a 	mov	r5,fp
2008f9d8:	8009883a 	mov	r4,r16
2008f9dc:	100d883a 	mov	r6,r2
2008f9e0:	009222c0 	call	2009222c <__lshift>
2008f9e4:	1039883a 	mov	fp,r2
2008f9e8:	0580050e 	bge	zero,r22,2008fa00 <_dtoa_r+0xbec>
2008f9ec:	a80b883a 	mov	r5,r21
2008f9f0:	8009883a 	mov	r4,r16
2008f9f4:	b00d883a 	mov	r6,r22
2008f9f8:	009222c0 	call	2009222c <__lshift>
2008f9fc:	102b883a 	mov	r21,r2
2008fa00:	d8c00d17 	ldw	r3,52(sp)
2008fa04:	1801161e 	bne	r3,zero,2008fe60 <_dtoa_r+0x104c>
2008fa08:	d8c00617 	ldw	r3,24(sp)
2008fa0c:	00c12d0e 	bge	zero,r3,2008fec4 <_dtoa_r+0x10b0>
2008fa10:	d8c00b17 	ldw	r3,44(sp)
2008fa14:	1800571e 	bne	r3,zero,2008fb74 <_dtoa_r+0xd60>
2008fa18:	dc800717 	ldw	r18,28(sp)
2008fa1c:	dcc00617 	ldw	r19,24(sp)
2008fa20:	9029883a 	mov	r20,r18
2008fa24:	00000206 	br	2008fa30 <_dtoa_r+0xc1c>
2008fa28:	0091b780 	call	20091b78 <__multadd>
2008fa2c:	1039883a 	mov	fp,r2
2008fa30:	e009883a 	mov	r4,fp
2008fa34:	a80b883a 	mov	r5,r21
2008fa38:	008ec140 	call	2008ec14 <quorem>
2008fa3c:	10800c04 	addi	r2,r2,48
2008fa40:	90800005 	stb	r2,0(r18)
2008fa44:	94800044 	addi	r18,r18,1
2008fa48:	9507c83a 	sub	r3,r18,r20
2008fa4c:	8009883a 	mov	r4,r16
2008fa50:	e00b883a 	mov	r5,fp
2008fa54:	01800284 	movi	r6,10
2008fa58:	000f883a 	mov	r7,zero
2008fa5c:	1cfff216 	blt	r3,r19,2008fa28 <__flash_rwdata_start+0xffff33e0>
2008fa60:	1011883a 	mov	r8,r2
2008fa64:	d8800617 	ldw	r2,24(sp)
2008fa68:	00822e0e 	bge	zero,r2,20090324 <_dtoa_r+0x1510>
2008fa6c:	d9000717 	ldw	r4,28(sp)
2008fa70:	0025883a 	mov	r18,zero
2008fa74:	20af883a 	add	r23,r4,r2
2008fa78:	e00b883a 	mov	r5,fp
2008fa7c:	01800044 	movi	r6,1
2008fa80:	8009883a 	mov	r4,r16
2008fa84:	da001715 	stw	r8,92(sp)
2008fa88:	009222c0 	call	2009222c <__lshift>
2008fa8c:	1009883a 	mov	r4,r2
2008fa90:	a80b883a 	mov	r5,r21
2008fa94:	1039883a 	mov	fp,r2
2008fa98:	009237c0 	call	2009237c <__mcmp>
2008fa9c:	da001717 	ldw	r8,92(sp)
2008faa0:	00816e0e 	bge	zero,r2,2009005c <_dtoa_r+0x1248>
2008faa4:	b93fffc3 	ldbu	r4,-1(r23)
2008faa8:	b8bfffc4 	addi	r2,r23,-1
2008faac:	1007883a 	mov	r3,r2
2008fab0:	01800e44 	movi	r6,57
2008fab4:	d9c00717 	ldw	r7,28(sp)
2008fab8:	00000506 	br	2008fad0 <_dtoa_r+0xcbc>
2008fabc:	18ffffc4 	addi	r3,r3,-1
2008fac0:	38811926 	beq	r7,r2,2008ff28 <_dtoa_r+0x1114>
2008fac4:	19000003 	ldbu	r4,0(r3)
2008fac8:	102f883a 	mov	r23,r2
2008facc:	10bfffc4 	addi	r2,r2,-1
2008fad0:	21403fcc 	andi	r5,r4,255
2008fad4:	2940201c 	xori	r5,r5,128
2008fad8:	297fe004 	addi	r5,r5,-128
2008fadc:	29bff726 	beq	r5,r6,2008fabc <__flash_rwdata_start+0xffff3474>
2008fae0:	21000044 	addi	r4,r4,1
2008fae4:	11000005 	stb	r4,0(r2)
2008fae8:	8009883a 	mov	r4,r16
2008faec:	a80b883a 	mov	r5,r21
2008faf0:	0091b500 	call	20091b50 <_Bfree>
2008faf4:	883e7526 	beq	r17,zero,2008f4cc <__flash_rwdata_start+0xffff2e84>
2008faf8:	90000426 	beq	r18,zero,2008fb0c <_dtoa_r+0xcf8>
2008fafc:	94400326 	beq	r18,r17,2008fb0c <_dtoa_r+0xcf8>
2008fb00:	8009883a 	mov	r4,r16
2008fb04:	900b883a 	mov	r5,r18
2008fb08:	0091b500 	call	20091b50 <_Bfree>
2008fb0c:	8009883a 	mov	r4,r16
2008fb10:	880b883a 	mov	r5,r17
2008fb14:	0091b500 	call	20091b50 <_Bfree>
2008fb18:	003e6c06 	br	2008f4cc <__flash_rwdata_start+0xffff2e84>
2008fb1c:	00800704 	movi	r2,28
2008fb20:	d9800817 	ldw	r6,32(sp)
2008fb24:	a0a9883a 	add	r20,r20,r2
2008fb28:	b0ad883a 	add	r22,r22,r2
2008fb2c:	308d883a 	add	r6,r6,r2
2008fb30:	d9800815 	stw	r6,32(sp)
2008fb34:	003fa506 	br	2008f9cc <__flash_rwdata_start+0xffff3384>
2008fb38:	013efb84 	movi	r4,-1042
2008fb3c:	246bc83a 	sub	r21,r4,r17
2008fb40:	9548983a 	sll	r4,r18,r21
2008fb44:	003d1806 	br	2008efa8 <__flash_rwdata_start+0xffff2960>
2008fb48:	d8000d15 	stw	zero,52(sp)
2008fb4c:	003d5b06 	br	2008f0bc <__flash_rwdata_start+0xffff2a74>
2008fb50:	880b883a 	mov	r5,r17
2008fb54:	8009883a 	mov	r4,r16
2008fb58:	01800284 	movi	r6,10
2008fb5c:	000f883a 	mov	r7,zero
2008fb60:	0091b780 	call	20091b78 <__multadd>
2008fb64:	1023883a 	mov	r17,r2
2008fb68:	d8800c17 	ldw	r2,48(sp)
2008fb6c:	0082550e 	bge	zero,r2,200904c4 <_dtoa_r+0x16b0>
2008fb70:	d8800615 	stw	r2,24(sp)
2008fb74:	0500050e 	bge	zero,r20,2008fb8c <_dtoa_r+0xd78>
2008fb78:	880b883a 	mov	r5,r17
2008fb7c:	8009883a 	mov	r4,r16
2008fb80:	a00d883a 	mov	r6,r20
2008fb84:	009222c0 	call	2009222c <__lshift>
2008fb88:	1023883a 	mov	r17,r2
2008fb8c:	98016a1e 	bne	r19,zero,20090138 <_dtoa_r+0x1324>
2008fb90:	8829883a 	mov	r20,r17
2008fb94:	d9000617 	ldw	r4,24(sp)
2008fb98:	dcc00717 	ldw	r19,28(sp)
2008fb9c:	9480004c 	andi	r18,r18,1
2008fba0:	20bfffc4 	addi	r2,r4,-1
2008fba4:	9885883a 	add	r2,r19,r2
2008fba8:	d8800415 	stw	r2,16(sp)
2008fbac:	dc800615 	stw	r18,24(sp)
2008fbb0:	e009883a 	mov	r4,fp
2008fbb4:	a80b883a 	mov	r5,r21
2008fbb8:	008ec140 	call	2008ec14 <quorem>
2008fbbc:	e009883a 	mov	r4,fp
2008fbc0:	880b883a 	mov	r5,r17
2008fbc4:	102f883a 	mov	r23,r2
2008fbc8:	009237c0 	call	2009237c <__mcmp>
2008fbcc:	8009883a 	mov	r4,r16
2008fbd0:	a80b883a 	mov	r5,r21
2008fbd4:	a00d883a 	mov	r6,r20
2008fbd8:	102d883a 	mov	r22,r2
2008fbdc:	00923dc0 	call	200923dc <__mdiff>
2008fbe0:	1007883a 	mov	r3,r2
2008fbe4:	10800317 	ldw	r2,12(r2)
2008fbe8:	bc800c04 	addi	r18,r23,48
2008fbec:	1000971e 	bne	r2,zero,2008fe4c <_dtoa_r+0x1038>
2008fbf0:	180b883a 	mov	r5,r3
2008fbf4:	e009883a 	mov	r4,fp
2008fbf8:	d8c01515 	stw	r3,84(sp)
2008fbfc:	009237c0 	call	2009237c <__mcmp>
2008fc00:	d8c01517 	ldw	r3,84(sp)
2008fc04:	8009883a 	mov	r4,r16
2008fc08:	d8801515 	stw	r2,84(sp)
2008fc0c:	180b883a 	mov	r5,r3
2008fc10:	0091b500 	call	20091b50 <_Bfree>
2008fc14:	d8801517 	ldw	r2,84(sp)
2008fc18:	1000041e 	bne	r2,zero,2008fc2c <_dtoa_r+0xe18>
2008fc1c:	d9800317 	ldw	r6,12(sp)
2008fc20:	3000021e 	bne	r6,zero,2008fc2c <_dtoa_r+0xe18>
2008fc24:	d8c00617 	ldw	r3,24(sp)
2008fc28:	18007626 	beq	r3,zero,2008fe04 <_dtoa_r+0xff0>
2008fc2c:	b0005b16 	blt	r22,zero,2008fd9c <_dtoa_r+0xf88>
2008fc30:	b000041e 	bne	r22,zero,2008fc44 <_dtoa_r+0xe30>
2008fc34:	d9000317 	ldw	r4,12(sp)
2008fc38:	2000021e 	bne	r4,zero,2008fc44 <_dtoa_r+0xe30>
2008fc3c:	d8c00617 	ldw	r3,24(sp)
2008fc40:	18005626 	beq	r3,zero,2008fd9c <_dtoa_r+0xf88>
2008fc44:	00814d16 	blt	zero,r2,2009017c <_dtoa_r+0x1368>
2008fc48:	d8c00417 	ldw	r3,16(sp)
2008fc4c:	9d800044 	addi	r22,r19,1
2008fc50:	9c800005 	stb	r18,0(r19)
2008fc54:	b02f883a 	mov	r23,r22
2008fc58:	98c14c26 	beq	r19,r3,2009018c <_dtoa_r+0x1378>
2008fc5c:	e00b883a 	mov	r5,fp
2008fc60:	8009883a 	mov	r4,r16
2008fc64:	01800284 	movi	r6,10
2008fc68:	000f883a 	mov	r7,zero
2008fc6c:	0091b780 	call	20091b78 <__multadd>
2008fc70:	1039883a 	mov	fp,r2
2008fc74:	8d006d26 	beq	r17,r20,2008fe2c <_dtoa_r+0x1018>
2008fc78:	880b883a 	mov	r5,r17
2008fc7c:	01800284 	movi	r6,10
2008fc80:	000f883a 	mov	r7,zero
2008fc84:	8009883a 	mov	r4,r16
2008fc88:	0091b780 	call	20091b78 <__multadd>
2008fc8c:	a00b883a 	mov	r5,r20
2008fc90:	8009883a 	mov	r4,r16
2008fc94:	01800284 	movi	r6,10
2008fc98:	000f883a 	mov	r7,zero
2008fc9c:	1023883a 	mov	r17,r2
2008fca0:	0091b780 	call	20091b78 <__multadd>
2008fca4:	1029883a 	mov	r20,r2
2008fca8:	b027883a 	mov	r19,r22
2008fcac:	003fc006 	br	2008fbb0 <__flash_rwdata_start+0xffff3568>
2008fcb0:	a005883a 	mov	r2,r20
2008fcb4:	003ede06 	br	2008f830 <__flash_rwdata_start+0xffff31e8>
2008fcb8:	01000044 	movi	r4,1
2008fcbc:	d9000b15 	stw	r4,44(sp)
2008fcc0:	d9802217 	ldw	r6,136(sp)
2008fcc4:	0180dc0e 	bge	zero,r6,20090038 <_dtoa_r+0x1224>
2008fcc8:	3023883a 	mov	r17,r6
2008fccc:	d9800c15 	stw	r6,48(sp)
2008fcd0:	d9800615 	stw	r6,24(sp)
2008fcd4:	003d1e06 	br	2008f150 <__flash_rwdata_start+0xffff2b08>
2008fcd8:	d8800617 	ldw	r2,24(sp)
2008fcdc:	00be3716 	blt	zero,r2,2008f5bc <__flash_rwdata_start+0xffff2f74>
2008fce0:	1000be1e 	bne	r2,zero,2008ffdc <_dtoa_r+0x11c8>
2008fce4:	8809883a 	mov	r4,r17
2008fce8:	a00b883a 	mov	r5,r20
2008fcec:	000d883a 	mov	r6,zero
2008fcf0:	01d00534 	movhi	r7,16404
2008fcf4:	00882900 	call	20088290 <__muldf3>
2008fcf8:	1009883a 	mov	r4,r2
2008fcfc:	180b883a 	mov	r5,r3
2008fd00:	900d883a 	mov	r6,r18
2008fd04:	980f883a 	mov	r7,r19
2008fd08:	0096fc40 	call	20096fc4 <__gedf2>
2008fd0c:	002b883a 	mov	r21,zero
2008fd10:	0023883a 	mov	r17,zero
2008fd14:	10007a16 	blt	r2,zero,2008ff00 <_dtoa_r+0x10ec>
2008fd18:	d9002217 	ldw	r4,136(sp)
2008fd1c:	ddc00717 	ldw	r23,28(sp)
2008fd20:	0108303a 	nor	r4,zero,r4
2008fd24:	d9000515 	stw	r4,20(sp)
2008fd28:	8009883a 	mov	r4,r16
2008fd2c:	a80b883a 	mov	r5,r21
2008fd30:	0091b500 	call	20091b50 <_Bfree>
2008fd34:	883f751e 	bne	r17,zero,2008fb0c <__flash_rwdata_start+0xffff34c4>
2008fd38:	003de406 	br	2008f4cc <__flash_rwdata_start+0xffff2e84>
2008fd3c:	e00b883a 	mov	r5,fp
2008fd40:	8009883a 	mov	r4,r16
2008fd44:	00920ec0 	call	200920ec <__pow5mult>
2008fd48:	1039883a 	mov	fp,r2
2008fd4c:	003ed306 	br	2008f89c <__flash_rwdata_start+0xffff3254>
2008fd50:	903ee01e 	bne	r18,zero,2008f8d4 <__flash_rwdata_start+0xffff328c>
2008fd54:	00800434 	movhi	r2,16
2008fd58:	10bfffc4 	addi	r2,r2,-1
2008fd5c:	9884703a 	and	r2,r19,r2
2008fd60:	103f081e 	bne	r2,zero,2008f984 <__flash_rwdata_start+0xffff333c>
2008fd64:	9cdffc2c 	andhi	r19,r19,32752
2008fd68:	983f0626 	beq	r19,zero,2008f984 <__flash_rwdata_start+0xffff333c>
2008fd6c:	d8800817 	ldw	r2,32(sp)
2008fd70:	b5800044 	addi	r22,r22,1
2008fd74:	04c00044 	movi	r19,1
2008fd78:	10800044 	addi	r2,r2,1
2008fd7c:	d8800815 	stw	r2,32(sp)
2008fd80:	003f0106 	br	2008f988 <__flash_rwdata_start+0xffff3340>
2008fd84:	d9800f17 	ldw	r6,60(sp)
2008fd88:	30016826 	beq	r6,zero,2009032c <_dtoa_r+0x1518>
2008fd8c:	10810cc4 	addi	r2,r2,1075
2008fd90:	dd400917 	ldw	r21,36(sp)
2008fd94:	dd000817 	ldw	r20,32(sp)
2008fd98:	003e9906 	br	2008f800 <__flash_rwdata_start+0xffff31b8>
2008fd9c:	9011883a 	mov	r8,r18
2008fda0:	4007883a 	mov	r3,r8
2008fda4:	e02d883a 	mov	r22,fp
2008fda8:	0080100e 	bge	zero,r2,2008fdec <_dtoa_r+0xfd8>
2008fdac:	01800044 	movi	r6,1
2008fdb0:	8009883a 	mov	r4,r16
2008fdb4:	e00b883a 	mov	r5,fp
2008fdb8:	da001515 	stw	r8,84(sp)
2008fdbc:	da001715 	stw	r8,92(sp)
2008fdc0:	009222c0 	call	2009222c <__lshift>
2008fdc4:	1009883a 	mov	r4,r2
2008fdc8:	a80b883a 	mov	r5,r21
2008fdcc:	102d883a 	mov	r22,r2
2008fdd0:	009237c0 	call	2009237c <__mcmp>
2008fdd4:	d8c01517 	ldw	r3,84(sp)
2008fdd8:	da001717 	ldw	r8,92(sp)
2008fddc:	0081a50e 	bge	zero,r2,20090474 <_dtoa_r+0x1660>
2008fde0:	00800e44 	movi	r2,57
2008fde4:	40817b26 	beq	r8,r2,200903d4 <_dtoa_r+0x15c0>
2008fde8:	40c00044 	addi	r3,r8,1
2008fdec:	8825883a 	mov	r18,r17
2008fdf0:	9dc00044 	addi	r23,r19,1
2008fdf4:	98c00005 	stb	r3,0(r19)
2008fdf8:	a023883a 	mov	r17,r20
2008fdfc:	b039883a 	mov	fp,r22
2008fe00:	003f3906 	br	2008fae8 <__flash_rwdata_start+0xffff34a0>
2008fe04:	00800e44 	movi	r2,57
2008fe08:	9011883a 	mov	r8,r18
2008fe0c:	90817226 	beq	r18,r2,200903d8 <_dtoa_r+0x15c4>
2008fe10:	0580010e 	bge	zero,r22,2008fe18 <_dtoa_r+0x1004>
2008fe14:	ba000c44 	addi	r8,r23,49
2008fe18:	8825883a 	mov	r18,r17
2008fe1c:	9dc00044 	addi	r23,r19,1
2008fe20:	9a000005 	stb	r8,0(r19)
2008fe24:	a023883a 	mov	r17,r20
2008fe28:	003f2f06 	br	2008fae8 <__flash_rwdata_start+0xffff34a0>
2008fe2c:	880b883a 	mov	r5,r17
2008fe30:	8009883a 	mov	r4,r16
2008fe34:	01800284 	movi	r6,10
2008fe38:	000f883a 	mov	r7,zero
2008fe3c:	0091b780 	call	20091b78 <__multadd>
2008fe40:	1023883a 	mov	r17,r2
2008fe44:	1029883a 	mov	r20,r2
2008fe48:	003f9706 	br	2008fca8 <__flash_rwdata_start+0xffff3660>
2008fe4c:	8009883a 	mov	r4,r16
2008fe50:	180b883a 	mov	r5,r3
2008fe54:	0091b500 	call	20091b50 <_Bfree>
2008fe58:	00800044 	movi	r2,1
2008fe5c:	003f7306 	br	2008fc2c <__flash_rwdata_start+0xffff35e4>
2008fe60:	e009883a 	mov	r4,fp
2008fe64:	a80b883a 	mov	r5,r21
2008fe68:	009237c0 	call	2009237c <__mcmp>
2008fe6c:	103ee60e 	bge	r2,zero,2008fa08 <__flash_rwdata_start+0xffff33c0>
2008fe70:	8009883a 	mov	r4,r16
2008fe74:	e00b883a 	mov	r5,fp
2008fe78:	01800284 	movi	r6,10
2008fe7c:	000f883a 	mov	r7,zero
2008fe80:	0091b780 	call	20091b78 <__multadd>
2008fe84:	d9000517 	ldw	r4,20(sp)
2008fe88:	d9800b17 	ldw	r6,44(sp)
2008fe8c:	1039883a 	mov	fp,r2
2008fe90:	213fffc4 	addi	r4,r4,-1
2008fe94:	d9000515 	stw	r4,20(sp)
2008fe98:	303f2d1e 	bne	r6,zero,2008fb50 <__flash_rwdata_start+0xffff3508>
2008fe9c:	d9000c17 	ldw	r4,48(sp)
2008fea0:	0101780e 	bge	zero,r4,20090484 <_dtoa_r+0x1670>
2008fea4:	d9000615 	stw	r4,24(sp)
2008fea8:	003edb06 	br	2008fa18 <__flash_rwdata_start+0xffff33d0>
2008feac:	00800084 	movi	r2,2
2008feb0:	30818e1e 	bne	r6,r2,200904ec <_dtoa_r+0x16d8>
2008feb4:	d8000b15 	stw	zero,44(sp)
2008feb8:	003f8106 	br	2008fcc0 <__flash_rwdata_start+0xffff3678>
2008febc:	d8800717 	ldw	r2,28(sp)
2008fec0:	003c0306 	br	2008eed0 <__flash_rwdata_start+0xffff2888>
2008fec4:	d9000317 	ldw	r4,12(sp)
2008fec8:	00800084 	movi	r2,2
2008fecc:	113ed00e 	bge	r2,r4,2008fa10 <__flash_rwdata_start+0xffff33c8>
2008fed0:	d8c00617 	ldw	r3,24(sp)
2008fed4:	183f901e 	bne	r3,zero,2008fd18 <__flash_rwdata_start+0xffff36d0>
2008fed8:	a80b883a 	mov	r5,r21
2008fedc:	8009883a 	mov	r4,r16
2008fee0:	01800144 	movi	r6,5
2008fee4:	000f883a 	mov	r7,zero
2008fee8:	0091b780 	call	20091b78 <__multadd>
2008feec:	e009883a 	mov	r4,fp
2008fef0:	100b883a 	mov	r5,r2
2008fef4:	102b883a 	mov	r21,r2
2008fef8:	009237c0 	call	2009237c <__mcmp>
2008fefc:	00bf860e 	bge	zero,r2,2008fd18 <__flash_rwdata_start+0xffff36d0>
2008ff00:	d9800717 	ldw	r6,28(sp)
2008ff04:	00800c44 	movi	r2,49
2008ff08:	30800005 	stb	r2,0(r6)
2008ff0c:	d8800517 	ldw	r2,20(sp)
2008ff10:	35c00044 	addi	r23,r6,1
2008ff14:	10800044 	addi	r2,r2,1
2008ff18:	d8800515 	stw	r2,20(sp)
2008ff1c:	003f8206 	br	2008fd28 <__flash_rwdata_start+0xffff36e0>
2008ff20:	903e981e 	bne	r18,zero,2008f984 <__flash_rwdata_start+0xffff333c>
2008ff24:	003f8b06 	br	2008fd54 <__flash_rwdata_start+0xffff370c>
2008ff28:	d9800517 	ldw	r6,20(sp)
2008ff2c:	d8c00717 	ldw	r3,28(sp)
2008ff30:	00800c44 	movi	r2,49
2008ff34:	31800044 	addi	r6,r6,1
2008ff38:	d9800515 	stw	r6,20(sp)
2008ff3c:	18800005 	stb	r2,0(r3)
2008ff40:	003ee906 	br	2008fae8 <__flash_rwdata_start+0xffff34a0>
2008ff44:	dc000317 	ldw	r16,12(sp)
2008ff48:	003d6006 	br	2008f4cc <__flash_rwdata_start+0xffff2e84>
2008ff4c:	8809883a 	mov	r4,r17
2008ff50:	008930c0 	call	2008930c <__floatsidf>
2008ff54:	a009883a 	mov	r4,r20
2008ff58:	a80b883a 	mov	r5,r21
2008ff5c:	100d883a 	mov	r6,r2
2008ff60:	180f883a 	mov	r7,r3
2008ff64:	00882900 	call	20088290 <__muldf3>
2008ff68:	1009883a 	mov	r4,r2
2008ff6c:	180b883a 	mov	r5,r3
2008ff70:	000d883a 	mov	r6,zero
2008ff74:	01d00734 	movhi	r7,16412
2008ff78:	00871280 	call	20087128 <__adddf3>
2008ff7c:	1023883a 	mov	r17,r2
2008ff80:	00bf3034 	movhi	r2,64704
2008ff84:	1885883a 	add	r2,r3,r2
2008ff88:	d8800e15 	stw	r2,56(sp)
2008ff8c:	a009883a 	mov	r4,r20
2008ff90:	a80b883a 	mov	r5,r21
2008ff94:	000d883a 	mov	r6,zero
2008ff98:	01d00534 	movhi	r7,16404
2008ff9c:	00889b40 	call	200889b4 <__subdf3>
2008ffa0:	d9c00e17 	ldw	r7,56(sp)
2008ffa4:	1009883a 	mov	r4,r2
2008ffa8:	180b883a 	mov	r5,r3
2008ffac:	880d883a 	mov	r6,r17
2008ffb0:	102b883a 	mov	r21,r2
2008ffb4:	1829883a 	mov	r20,r3
2008ffb8:	0096fc40 	call	20096fc4 <__gedf2>
2008ffbc:	00807716 	blt	zero,r2,2009019c <_dtoa_r+0x1388>
2008ffc0:	d8800e17 	ldw	r2,56(sp)
2008ffc4:	a809883a 	mov	r4,r21
2008ffc8:	a00b883a 	mov	r5,r20
2008ffcc:	11e0003c 	xorhi	r7,r2,32768
2008ffd0:	880d883a 	mov	r6,r17
2008ffd4:	00970a40 	call	200970a4 <__ledf2>
2008ffd8:	103d6b0e 	bge	r2,zero,2008f588 <__flash_rwdata_start+0xffff2f40>
2008ffdc:	002b883a 	mov	r21,zero
2008ffe0:	0023883a 	mov	r17,zero
2008ffe4:	003f4c06 	br	2008fd18 <__flash_rwdata_start+0xffff36d0>
2008ffe8:	d9800917 	ldw	r6,36(sp)
2008ffec:	e00b883a 	mov	r5,fp
2008fff0:	8009883a 	mov	r4,r16
2008fff4:	00920ec0 	call	200920ec <__pow5mult>
2008fff8:	1039883a 	mov	fp,r2
2008fffc:	003e2706 	br	2008f89c <__flash_rwdata_start+0xffff3254>
20090000:	d8000b15 	stw	zero,44(sp)
20090004:	003c4906 	br	2008f12c <__flash_rwdata_start+0xffff2ae4>
20090008:	d9000917 	ldw	r4,36(sp)
2009000c:	d9800a17 	ldw	r6,40(sp)
20090010:	dd400915 	stw	r21,36(sp)
20090014:	a905c83a 	sub	r2,r21,r4
20090018:	308d883a 	add	r6,r6,r2
2009001c:	d9800a15 	stw	r6,40(sp)
20090020:	002b883a 	mov	r21,zero
20090024:	003df206 	br	2008f7f0 <__flash_rwdata_start+0xffff31a8>
20090028:	dc800e15 	stw	r18,56(sp)
2009002c:	982b883a 	mov	r21,r19
20090030:	04400084 	movi	r17,2
20090034:	003c7406 	br	2008f208 <__flash_rwdata_start+0xffff2bc0>
20090038:	04400044 	movi	r17,1
2009003c:	dc400c15 	stw	r17,48(sp)
20090040:	dc400615 	stw	r17,24(sp)
20090044:	dc402215 	stw	r17,136(sp)
20090048:	80001115 	stw	zero,68(r16)
2009004c:	000b883a 	mov	r5,zero
20090050:	003c4a06 	br	2008f17c <__flash_rwdata_start+0xffff2b34>
20090054:	3023883a 	mov	r17,r6
20090058:	003ffb06 	br	20090048 <__flash_rwdata_start+0xffff3a00>
2009005c:	1000021e 	bne	r2,zero,20090068 <_dtoa_r+0x1254>
20090060:	4200004c 	andi	r8,r8,1
20090064:	403e8f1e 	bne	r8,zero,2008faa4 <__flash_rwdata_start+0xffff345c>
20090068:	01000c04 	movi	r4,48
2009006c:	00000106 	br	20090074 <_dtoa_r+0x1260>
20090070:	102f883a 	mov	r23,r2
20090074:	b8bfffc4 	addi	r2,r23,-1
20090078:	10c00007 	ldb	r3,0(r2)
2009007c:	193ffc26 	beq	r3,r4,20090070 <__flash_rwdata_start+0xffff3a28>
20090080:	003e9906 	br	2008fae8 <__flash_rwdata_start+0xffff34a0>
20090084:	d9000517 	ldw	r4,20(sp)
20090088:	012fc83a 	sub	r23,zero,r4
2009008c:	b800ad26 	beq	r23,zero,20090344 <_dtoa_r+0x1530>
20090090:	b88003cc 	andi	r2,r23,15
20090094:	100490fa 	slli	r2,r2,3
20090098:	00c00034 	movhi	r3,0
2009009c:	18c1ba04 	addi	r3,r3,1768
200900a0:	1885883a 	add	r2,r3,r2
200900a4:	11800017 	ldw	r6,0(r2)
200900a8:	11c00117 	ldw	r7,4(r2)
200900ac:	b82fd13a 	srai	r23,r23,4
200900b0:	9009883a 	mov	r4,r18
200900b4:	980b883a 	mov	r5,r19
200900b8:	00882900 	call	20088290 <__muldf3>
200900bc:	1029883a 	mov	r20,r2
200900c0:	182b883a 	mov	r21,r3
200900c4:	b800f426 	beq	r23,zero,20090498 <_dtoa_r+0x1684>
200900c8:	02000034 	movhi	r8,0
200900cc:	4201b004 	addi	r8,r8,1728
200900d0:	8029883a 	mov	r20,r16
200900d4:	04400084 	movi	r17,2
200900d8:	4021883a 	mov	r16,r8
200900dc:	b980004c 	andi	r6,r23,1
200900e0:	1009883a 	mov	r4,r2
200900e4:	b82fd07a 	srai	r23,r23,1
200900e8:	180b883a 	mov	r5,r3
200900ec:	30000426 	beq	r6,zero,20090100 <_dtoa_r+0x12ec>
200900f0:	81800017 	ldw	r6,0(r16)
200900f4:	81c00117 	ldw	r7,4(r16)
200900f8:	8c400044 	addi	r17,r17,1
200900fc:	00882900 	call	20088290 <__muldf3>
20090100:	84000204 	addi	r16,r16,8
20090104:	b83ff51e 	bne	r23,zero,200900dc <__flash_rwdata_start+0xffff3a94>
20090108:	a021883a 	mov	r16,r20
2009010c:	182b883a 	mov	r21,r3
20090110:	1029883a 	mov	r20,r2
20090114:	003c5506 	br	2008f26c <__flash_rwdata_start+0xffff2c24>
20090118:	d9800517 	ldw	r6,20(sp)
2009011c:	d9000717 	ldw	r4,28(sp)
20090120:	00c00c04 	movi	r3,48
20090124:	31800044 	addi	r6,r6,1
20090128:	d9800515 	stw	r6,20(sp)
2009012c:	20c00005 	stb	r3,0(r4)
20090130:	02000c44 	movi	r8,49
20090134:	003da206 	br	2008f7c0 <__flash_rwdata_start+0xffff3178>
20090138:	89400117 	ldw	r5,4(r17)
2009013c:	8009883a 	mov	r4,r16
20090140:	0091aa80 	call	20091aa8 <_Balloc>
20090144:	89800417 	ldw	r6,16(r17)
20090148:	11000304 	addi	r4,r2,12
2009014c:	89400304 	addi	r5,r17,12
20090150:	31800084 	addi	r6,r6,2
20090154:	318d883a 	add	r6,r6,r6
20090158:	318d883a 	add	r6,r6,r6
2009015c:	1027883a 	mov	r19,r2
20090160:	008a1e00 	call	2008a1e0 <memcpy>
20090164:	8009883a 	mov	r4,r16
20090168:	980b883a 	mov	r5,r19
2009016c:	01800044 	movi	r6,1
20090170:	009222c0 	call	2009222c <__lshift>
20090174:	1029883a 	mov	r20,r2
20090178:	003e8606 	br	2008fb94 <__flash_rwdata_start+0xffff354c>
2009017c:	00800e44 	movi	r2,57
20090180:	90809526 	beq	r18,r2,200903d8 <_dtoa_r+0x15c4>
20090184:	92000044 	addi	r8,r18,1
20090188:	003f2306 	br	2008fe18 <__flash_rwdata_start+0xffff37d0>
2009018c:	9011883a 	mov	r8,r18
20090190:	8825883a 	mov	r18,r17
20090194:	a023883a 	mov	r17,r20
20090198:	003e3706 	br	2008fa78 <__flash_rwdata_start+0xffff3430>
2009019c:	002b883a 	mov	r21,zero
200901a0:	0023883a 	mov	r17,zero
200901a4:	003f5606 	br	2008ff00 <__flash_rwdata_start+0xffff38b8>
200901a8:	51bfffc4 	addi	r6,r10,-1
200901ac:	300490fa 	slli	r2,r6,3
200901b0:	00c00034 	movhi	r3,0
200901b4:	18c1ba04 	addi	r3,r3,1768
200901b8:	1885883a 	add	r2,r3,r2
200901bc:	d9c00e17 	ldw	r7,56(sp)
200901c0:	11000017 	ldw	r4,0(r2)
200901c4:	11400117 	ldw	r5,4(r2)
200901c8:	d8800717 	ldw	r2,28(sp)
200901cc:	d9801015 	stw	r6,64(sp)
200901d0:	880d883a 	mov	r6,r17
200901d4:	da801615 	stw	r10,88(sp)
200901d8:	15c00044 	addi	r23,r2,1
200901dc:	00882900 	call	20088290 <__muldf3>
200901e0:	a80b883a 	mov	r5,r21
200901e4:	a009883a 	mov	r4,r20
200901e8:	d8c01115 	stw	r3,68(sp)
200901ec:	d8800e15 	stw	r2,56(sp)
200901f0:	00892840 	call	20089284 <__fixdfsi>
200901f4:	1009883a 	mov	r4,r2
200901f8:	1023883a 	mov	r17,r2
200901fc:	008930c0 	call	2008930c <__floatsidf>
20090200:	a009883a 	mov	r4,r20
20090204:	a80b883a 	mov	r5,r21
20090208:	100d883a 	mov	r6,r2
2009020c:	180f883a 	mov	r7,r3
20090210:	00889b40 	call	200889b4 <__subdf3>
20090214:	1813883a 	mov	r9,r3
20090218:	d8c00717 	ldw	r3,28(sp)
2009021c:	8c400c04 	addi	r17,r17,48
20090220:	1011883a 	mov	r8,r2
20090224:	1c400005 	stb	r17,0(r3)
20090228:	da801617 	ldw	r10,88(sp)
2009022c:	00800044 	movi	r2,1
20090230:	50802326 	beq	r10,r2,200902c0 <_dtoa_r+0x14ac>
20090234:	d8800717 	ldw	r2,28(sp)
20090238:	b82b883a 	mov	r21,r23
2009023c:	dc001315 	stw	r16,76(sp)
20090240:	12a9883a 	add	r20,r2,r10
20090244:	4807883a 	mov	r3,r9
20090248:	4005883a 	mov	r2,r8
2009024c:	dc801415 	stw	r18,80(sp)
20090250:	000d883a 	mov	r6,zero
20090254:	01d00934 	movhi	r7,16420
20090258:	1009883a 	mov	r4,r2
2009025c:	180b883a 	mov	r5,r3
20090260:	00882900 	call	20088290 <__muldf3>
20090264:	180b883a 	mov	r5,r3
20090268:	1009883a 	mov	r4,r2
2009026c:	1821883a 	mov	r16,r3
20090270:	1025883a 	mov	r18,r2
20090274:	00892840 	call	20089284 <__fixdfsi>
20090278:	1009883a 	mov	r4,r2
2009027c:	1023883a 	mov	r17,r2
20090280:	008930c0 	call	2008930c <__floatsidf>
20090284:	9009883a 	mov	r4,r18
20090288:	800b883a 	mov	r5,r16
2009028c:	100d883a 	mov	r6,r2
20090290:	180f883a 	mov	r7,r3
20090294:	8c400c04 	addi	r17,r17,48
20090298:	00889b40 	call	200889b4 <__subdf3>
2009029c:	ad400044 	addi	r21,r21,1
200902a0:	ac7fffc5 	stb	r17,-1(r21)
200902a4:	ad3fea1e 	bne	r21,r20,20090250 <__flash_rwdata_start+0xffff3c08>
200902a8:	1813883a 	mov	r9,r3
200902ac:	d8c01017 	ldw	r3,64(sp)
200902b0:	dc001317 	ldw	r16,76(sp)
200902b4:	dc801417 	ldw	r18,80(sp)
200902b8:	1011883a 	mov	r8,r2
200902bc:	b8ef883a 	add	r23,r23,r3
200902c0:	d9000e17 	ldw	r4,56(sp)
200902c4:	d9401117 	ldw	r5,68(sp)
200902c8:	000d883a 	mov	r6,zero
200902cc:	01cff834 	movhi	r7,16352
200902d0:	da001715 	stw	r8,92(sp)
200902d4:	da401515 	stw	r9,84(sp)
200902d8:	00871280 	call	20087128 <__adddf3>
200902dc:	da001717 	ldw	r8,92(sp)
200902e0:	da401517 	ldw	r9,84(sp)
200902e4:	1009883a 	mov	r4,r2
200902e8:	400d883a 	mov	r6,r8
200902ec:	480f883a 	mov	r7,r9
200902f0:	180b883a 	mov	r5,r3
200902f4:	00970a40 	call	200970a4 <__ledf2>
200902f8:	da001717 	ldw	r8,92(sp)
200902fc:	da401517 	ldw	r9,84(sp)
20090300:	10003b0e 	bge	r2,zero,200903f0 <_dtoa_r+0x15dc>
20090304:	d9001217 	ldw	r4,72(sp)
20090308:	bd7fffc3 	ldbu	r21,-1(r23)
2009030c:	d9000515 	stw	r4,20(sp)
20090310:	003d1c06 	br	2008f784 <__flash_rwdata_start+0xffff313c>
20090314:	d8c00817 	ldw	r3,32(sp)
20090318:	18a9c83a 	sub	r20,r3,r2
2009031c:	0005883a 	mov	r2,zero
20090320:	003d3706 	br	2008f800 <__flash_rwdata_start+0xffff31b8>
20090324:	00800044 	movi	r2,1
20090328:	003dd006 	br	2008fa6c <__flash_rwdata_start+0xffff3424>
2009032c:	d8c00217 	ldw	r3,8(sp)
20090330:	00800d84 	movi	r2,54
20090334:	dd400917 	ldw	r21,36(sp)
20090338:	10c5c83a 	sub	r2,r2,r3
2009033c:	dd000817 	ldw	r20,32(sp)
20090340:	003d2f06 	br	2008f800 <__flash_rwdata_start+0xffff31b8>
20090344:	9029883a 	mov	r20,r18
20090348:	982b883a 	mov	r21,r19
2009034c:	04400084 	movi	r17,2
20090350:	003bc606 	br	2008f26c <__flash_rwdata_start+0xffff2c24>
20090354:	d8800617 	ldw	r2,24(sp)
20090358:	103efc26 	beq	r2,zero,2008ff4c <__flash_rwdata_start+0xffff3904>
2009035c:	d8c00c17 	ldw	r3,48(sp)
20090360:	00fc890e 	bge	zero,r3,2008f588 <__flash_rwdata_start+0xffff2f40>
20090364:	a80b883a 	mov	r5,r21
20090368:	a009883a 	mov	r4,r20
2009036c:	000d883a 	mov	r6,zero
20090370:	01d00934 	movhi	r7,16420
20090374:	00882900 	call	20088290 <__muldf3>
20090378:	89000044 	addi	r4,r17,1
2009037c:	1029883a 	mov	r20,r2
20090380:	182b883a 	mov	r21,r3
20090384:	008930c0 	call	2008930c <__floatsidf>
20090388:	a009883a 	mov	r4,r20
2009038c:	a80b883a 	mov	r5,r21
20090390:	100d883a 	mov	r6,r2
20090394:	180f883a 	mov	r7,r3
20090398:	00882900 	call	20088290 <__muldf3>
2009039c:	1009883a 	mov	r4,r2
200903a0:	180b883a 	mov	r5,r3
200903a4:	000d883a 	mov	r6,zero
200903a8:	01d00734 	movhi	r7,16412
200903ac:	00871280 	call	20087128 <__adddf3>
200903b0:	d9000517 	ldw	r4,20(sp)
200903b4:	1023883a 	mov	r17,r2
200903b8:	00bf3034 	movhi	r2,64704
200903bc:	213fffc4 	addi	r4,r4,-1
200903c0:	1885883a 	add	r2,r3,r2
200903c4:	d9001215 	stw	r4,72(sp)
200903c8:	d8800e15 	stw	r2,56(sp)
200903cc:	da800c17 	ldw	r10,48(sp)
200903d0:	003bc306 	br	2008f2e0 <__flash_rwdata_start+0xffff2c98>
200903d4:	b039883a 	mov	fp,r22
200903d8:	01000e44 	movi	r4,57
200903dc:	8825883a 	mov	r18,r17
200903e0:	9dc00044 	addi	r23,r19,1
200903e4:	99000005 	stb	r4,0(r19)
200903e8:	a023883a 	mov	r17,r20
200903ec:	003dae06 	br	2008faa8 <__flash_rwdata_start+0xffff3460>
200903f0:	d9800e17 	ldw	r6,56(sp)
200903f4:	d9c01117 	ldw	r7,68(sp)
200903f8:	0009883a 	mov	r4,zero
200903fc:	014ff834 	movhi	r5,16352
20090400:	da001715 	stw	r8,92(sp)
20090404:	da401515 	stw	r9,84(sp)
20090408:	00889b40 	call	200889b4 <__subdf3>
2009040c:	da001717 	ldw	r8,92(sp)
20090410:	da401517 	ldw	r9,84(sp)
20090414:	1009883a 	mov	r4,r2
20090418:	180b883a 	mov	r5,r3
2009041c:	400d883a 	mov	r6,r8
20090420:	480f883a 	mov	r7,r9
20090424:	0096fc40 	call	20096fc4 <__gedf2>
20090428:	00bc570e 	bge	zero,r2,2008f588 <__flash_rwdata_start+0xffff2f40>
2009042c:	01000c04 	movi	r4,48
20090430:	00000106 	br	20090438 <_dtoa_r+0x1624>
20090434:	102f883a 	mov	r23,r2
20090438:	b8bfffc4 	addi	r2,r23,-1
2009043c:	10c00007 	ldb	r3,0(r2)
20090440:	193ffc26 	beq	r3,r4,20090434 <__flash_rwdata_start+0xffff3dec>
20090444:	d9801217 	ldw	r6,72(sp)
20090448:	d9800515 	stw	r6,20(sp)
2009044c:	003c1f06 	br	2008f4cc <__flash_rwdata_start+0xffff2e84>
20090450:	d8801217 	ldw	r2,72(sp)
20090454:	dc001117 	ldw	r16,68(sp)
20090458:	d8800515 	stw	r2,20(sp)
2009045c:	003cc906 	br	2008f784 <__flash_rwdata_start+0xffff313c>
20090460:	dd801317 	ldw	r22,76(sp)
20090464:	dc001117 	ldw	r16,68(sp)
20090468:	dcc01417 	ldw	r19,80(sp)
2009046c:	dc801017 	ldw	r18,64(sp)
20090470:	003c4506 	br	2008f588 <__flash_rwdata_start+0xffff2f40>
20090474:	103e5d1e 	bne	r2,zero,2008fdec <__flash_rwdata_start+0xffff37a4>
20090478:	4080004c 	andi	r2,r8,1
2009047c:	103e5b26 	beq	r2,zero,2008fdec <__flash_rwdata_start+0xffff37a4>
20090480:	003e5706 	br	2008fde0 <__flash_rwdata_start+0xffff3798>
20090484:	d8c00317 	ldw	r3,12(sp)
20090488:	00800084 	movi	r2,2
2009048c:	10c00a16 	blt	r2,r3,200904b8 <_dtoa_r+0x16a4>
20090490:	d9000c17 	ldw	r4,48(sp)
20090494:	003e8306 	br	2008fea4 <__flash_rwdata_start+0xffff385c>
20090498:	04400084 	movi	r17,2
2009049c:	003b7306 	br	2008f26c <__flash_rwdata_start+0xffff2c24>
200904a0:	d9801217 	ldw	r6,72(sp)
200904a4:	d9800515 	stw	r6,20(sp)
200904a8:	003cb606 	br	2008f784 <__flash_rwdata_start+0xffff313c>
200904ac:	d9001217 	ldw	r4,72(sp)
200904b0:	d9000515 	stw	r4,20(sp)
200904b4:	003c0506 	br	2008f4cc <__flash_rwdata_start+0xffff2e84>
200904b8:	d9800c17 	ldw	r6,48(sp)
200904bc:	d9800615 	stw	r6,24(sp)
200904c0:	003e8306 	br	2008fed0 <__flash_rwdata_start+0xffff3888>
200904c4:	d9800317 	ldw	r6,12(sp)
200904c8:	00800084 	movi	r2,2
200904cc:	11800216 	blt	r2,r6,200904d8 <_dtoa_r+0x16c4>
200904d0:	d8800c17 	ldw	r2,48(sp)
200904d4:	003da606 	br	2008fb70 <__flash_rwdata_start+0xffff3528>
200904d8:	d8800c17 	ldw	r2,48(sp)
200904dc:	d8800615 	stw	r2,24(sp)
200904e0:	003e7b06 	br	2008fed0 <__flash_rwdata_start+0xffff3888>
200904e4:	05000044 	movi	r20,1
200904e8:	003b0506 	br	2008f100 <__flash_rwdata_start+0xffff2ab8>
200904ec:	8009883a 	mov	r4,r16
200904f0:	80001115 	stw	zero,68(r16)
200904f4:	000b883a 	mov	r5,zero
200904f8:	0091aa80 	call	20091aa8 <_Balloc>
200904fc:	d8800715 	stw	r2,28(sp)
20090500:	d8c00717 	ldw	r3,28(sp)
20090504:	00bfffc4 	movi	r2,-1
20090508:	01000044 	movi	r4,1
2009050c:	d8800c15 	stw	r2,48(sp)
20090510:	80c01015 	stw	r3,64(r16)
20090514:	d9000b15 	stw	r4,44(sp)
20090518:	d8800615 	stw	r2,24(sp)
2009051c:	d8002215 	stw	zero,136(sp)
20090520:	003c1906 	br	2008f588 <__flash_rwdata_start+0xffff2f40>
20090524:	193d2926 	beq	r3,r4,2008f9cc <__flash_rwdata_start+0xffff3384>
20090528:	00c00f04 	movi	r3,60
2009052c:	1885c83a 	sub	r2,r3,r2
20090530:	003d7b06 	br	2008fb20 <__flash_rwdata_start+0xffff34d8>
20090534:	000b883a 	mov	r5,zero
20090538:	003b1006 	br	2008f17c <__flash_rwdata_start+0xffff2b34>

2009053c <__sflush_r>:
2009053c:	2880030b 	ldhu	r2,12(r5)
20090540:	defffb04 	addi	sp,sp,-20
20090544:	dcc00315 	stw	r19,12(sp)
20090548:	dc400115 	stw	r17,4(sp)
2009054c:	dfc00415 	stw	ra,16(sp)
20090550:	dc800215 	stw	r18,8(sp)
20090554:	dc000015 	stw	r16,0(sp)
20090558:	10c0020c 	andi	r3,r2,8
2009055c:	2823883a 	mov	r17,r5
20090560:	2027883a 	mov	r19,r4
20090564:	1800311e 	bne	r3,zero,2009062c <__sflush_r+0xf0>
20090568:	28c00117 	ldw	r3,4(r5)
2009056c:	10820014 	ori	r2,r2,2048
20090570:	2880030d 	sth	r2,12(r5)
20090574:	00c04b0e 	bge	zero,r3,200906a4 <__sflush_r+0x168>
20090578:	8a000a17 	ldw	r8,40(r17)
2009057c:	40002326 	beq	r8,zero,2009060c <__sflush_r+0xd0>
20090580:	9c000017 	ldw	r16,0(r19)
20090584:	10c4000c 	andi	r3,r2,4096
20090588:	98000015 	stw	zero,0(r19)
2009058c:	18004826 	beq	r3,zero,200906b0 <__sflush_r+0x174>
20090590:	89801417 	ldw	r6,80(r17)
20090594:	10c0010c 	andi	r3,r2,4
20090598:	18000626 	beq	r3,zero,200905b4 <__sflush_r+0x78>
2009059c:	88c00117 	ldw	r3,4(r17)
200905a0:	88800c17 	ldw	r2,48(r17)
200905a4:	30cdc83a 	sub	r6,r6,r3
200905a8:	10000226 	beq	r2,zero,200905b4 <__sflush_r+0x78>
200905ac:	88800f17 	ldw	r2,60(r17)
200905b0:	308dc83a 	sub	r6,r6,r2
200905b4:	89400717 	ldw	r5,28(r17)
200905b8:	9809883a 	mov	r4,r19
200905bc:	000f883a 	mov	r7,zero
200905c0:	403ee83a 	callr	r8
200905c4:	00ffffc4 	movi	r3,-1
200905c8:	10c04426 	beq	r2,r3,200906dc <__sflush_r+0x1a0>
200905cc:	88c0030b 	ldhu	r3,12(r17)
200905d0:	89000417 	ldw	r4,16(r17)
200905d4:	88000115 	stw	zero,4(r17)
200905d8:	197dffcc 	andi	r5,r3,63487
200905dc:	8940030d 	sth	r5,12(r17)
200905e0:	89000015 	stw	r4,0(r17)
200905e4:	18c4000c 	andi	r3,r3,4096
200905e8:	18002c1e 	bne	r3,zero,2009069c <__sflush_r+0x160>
200905ec:	89400c17 	ldw	r5,48(r17)
200905f0:	9c000015 	stw	r16,0(r19)
200905f4:	28000526 	beq	r5,zero,2009060c <__sflush_r+0xd0>
200905f8:	88801004 	addi	r2,r17,64
200905fc:	28800226 	beq	r5,r2,20090608 <__sflush_r+0xcc>
20090600:	9809883a 	mov	r4,r19
20090604:	0090c940 	call	20090c94 <_free_r>
20090608:	88000c15 	stw	zero,48(r17)
2009060c:	0005883a 	mov	r2,zero
20090610:	dfc00417 	ldw	ra,16(sp)
20090614:	dcc00317 	ldw	r19,12(sp)
20090618:	dc800217 	ldw	r18,8(sp)
2009061c:	dc400117 	ldw	r17,4(sp)
20090620:	dc000017 	ldw	r16,0(sp)
20090624:	dec00504 	addi	sp,sp,20
20090628:	f800283a 	ret
2009062c:	2c800417 	ldw	r18,16(r5)
20090630:	903ff626 	beq	r18,zero,2009060c <__flash_rwdata_start+0xffff3fc4>
20090634:	2c000017 	ldw	r16,0(r5)
20090638:	108000cc 	andi	r2,r2,3
2009063c:	2c800015 	stw	r18,0(r5)
20090640:	84a1c83a 	sub	r16,r16,r18
20090644:	1000131e 	bne	r2,zero,20090694 <__sflush_r+0x158>
20090648:	28800517 	ldw	r2,20(r5)
2009064c:	88800215 	stw	r2,8(r17)
20090650:	04000316 	blt	zero,r16,20090660 <__sflush_r+0x124>
20090654:	003fed06 	br	2009060c <__flash_rwdata_start+0xffff3fc4>
20090658:	90a5883a 	add	r18,r18,r2
2009065c:	043feb0e 	bge	zero,r16,2009060c <__flash_rwdata_start+0xffff3fc4>
20090660:	88800917 	ldw	r2,36(r17)
20090664:	89400717 	ldw	r5,28(r17)
20090668:	800f883a 	mov	r7,r16
2009066c:	900d883a 	mov	r6,r18
20090670:	9809883a 	mov	r4,r19
20090674:	103ee83a 	callr	r2
20090678:	80a1c83a 	sub	r16,r16,r2
2009067c:	00bff616 	blt	zero,r2,20090658 <__flash_rwdata_start+0xffff4010>
20090680:	88c0030b 	ldhu	r3,12(r17)
20090684:	00bfffc4 	movi	r2,-1
20090688:	18c01014 	ori	r3,r3,64
2009068c:	88c0030d 	sth	r3,12(r17)
20090690:	003fdf06 	br	20090610 <__flash_rwdata_start+0xffff3fc8>
20090694:	0005883a 	mov	r2,zero
20090698:	003fec06 	br	2009064c <__flash_rwdata_start+0xffff4004>
2009069c:	88801415 	stw	r2,80(r17)
200906a0:	003fd206 	br	200905ec <__flash_rwdata_start+0xffff3fa4>
200906a4:	28c00f17 	ldw	r3,60(r5)
200906a8:	00ffb316 	blt	zero,r3,20090578 <__flash_rwdata_start+0xffff3f30>
200906ac:	003fd706 	br	2009060c <__flash_rwdata_start+0xffff3fc4>
200906b0:	89400717 	ldw	r5,28(r17)
200906b4:	000d883a 	mov	r6,zero
200906b8:	9809883a 	mov	r4,r19
200906bc:	01c00044 	movi	r7,1
200906c0:	403ee83a 	callr	r8
200906c4:	100d883a 	mov	r6,r2
200906c8:	00bfffc4 	movi	r2,-1
200906cc:	30801426 	beq	r6,r2,20090720 <__sflush_r+0x1e4>
200906d0:	8880030b 	ldhu	r2,12(r17)
200906d4:	8a000a17 	ldw	r8,40(r17)
200906d8:	003fae06 	br	20090594 <__flash_rwdata_start+0xffff3f4c>
200906dc:	98c00017 	ldw	r3,0(r19)
200906e0:	183fba26 	beq	r3,zero,200905cc <__flash_rwdata_start+0xffff3f84>
200906e4:	01000744 	movi	r4,29
200906e8:	19000626 	beq	r3,r4,20090704 <__sflush_r+0x1c8>
200906ec:	01000584 	movi	r4,22
200906f0:	19000426 	beq	r3,r4,20090704 <__sflush_r+0x1c8>
200906f4:	88c0030b 	ldhu	r3,12(r17)
200906f8:	18c01014 	ori	r3,r3,64
200906fc:	88c0030d 	sth	r3,12(r17)
20090700:	003fc306 	br	20090610 <__flash_rwdata_start+0xffff3fc8>
20090704:	8880030b 	ldhu	r2,12(r17)
20090708:	88c00417 	ldw	r3,16(r17)
2009070c:	88000115 	stw	zero,4(r17)
20090710:	10bdffcc 	andi	r2,r2,63487
20090714:	8880030d 	sth	r2,12(r17)
20090718:	88c00015 	stw	r3,0(r17)
2009071c:	003fb306 	br	200905ec <__flash_rwdata_start+0xffff3fa4>
20090720:	98800017 	ldw	r2,0(r19)
20090724:	103fea26 	beq	r2,zero,200906d0 <__flash_rwdata_start+0xffff4088>
20090728:	00c00744 	movi	r3,29
2009072c:	10c00226 	beq	r2,r3,20090738 <__sflush_r+0x1fc>
20090730:	00c00584 	movi	r3,22
20090734:	10ffd21e 	bne	r2,r3,20090680 <__flash_rwdata_start+0xffff4038>
20090738:	9c000015 	stw	r16,0(r19)
2009073c:	0005883a 	mov	r2,zero
20090740:	003fb306 	br	20090610 <__flash_rwdata_start+0xffff3fc8>

20090744 <_fflush_r>:
20090744:	defffd04 	addi	sp,sp,-12
20090748:	dc000115 	stw	r16,4(sp)
2009074c:	dfc00215 	stw	ra,8(sp)
20090750:	2021883a 	mov	r16,r4
20090754:	20000226 	beq	r4,zero,20090760 <_fflush_r+0x1c>
20090758:	20800e17 	ldw	r2,56(r4)
2009075c:	10000c26 	beq	r2,zero,20090790 <_fflush_r+0x4c>
20090760:	2880030f 	ldh	r2,12(r5)
20090764:	1000051e 	bne	r2,zero,2009077c <_fflush_r+0x38>
20090768:	0005883a 	mov	r2,zero
2009076c:	dfc00217 	ldw	ra,8(sp)
20090770:	dc000117 	ldw	r16,4(sp)
20090774:	dec00304 	addi	sp,sp,12
20090778:	f800283a 	ret
2009077c:	8009883a 	mov	r4,r16
20090780:	dfc00217 	ldw	ra,8(sp)
20090784:	dc000117 	ldw	r16,4(sp)
20090788:	dec00304 	addi	sp,sp,12
2009078c:	009053c1 	jmpi	2009053c <__sflush_r>
20090790:	d9400015 	stw	r5,0(sp)
20090794:	0090b200 	call	20090b20 <__sinit>
20090798:	d9400017 	ldw	r5,0(sp)
2009079c:	003ff006 	br	20090760 <__flash_rwdata_start+0xffff4118>

200907a0 <fflush>:
200907a0:	20000526 	beq	r4,zero,200907b8 <fflush+0x18>
200907a4:	00800034 	movhi	r2,0
200907a8:	108a1404 	addi	r2,r2,10320
200907ac:	200b883a 	mov	r5,r4
200907b0:	11000017 	ldw	r4,0(r2)
200907b4:	00907441 	jmpi	20090744 <_fflush_r>
200907b8:	00800034 	movhi	r2,0
200907bc:	108a1304 	addi	r2,r2,10316
200907c0:	11000017 	ldw	r4,0(r2)
200907c4:	01480274 	movhi	r5,8201
200907c8:	2941d104 	addi	r5,r5,1860
200907cc:	00915081 	jmpi	20091508 <_fwalk_reent>

200907d0 <__fp_lock>:
200907d0:	0005883a 	mov	r2,zero
200907d4:	f800283a 	ret

200907d8 <__fp_unlock>:
200907d8:	0005883a 	mov	r2,zero
200907dc:	f800283a 	ret

200907e0 <_cleanup_r>:
200907e0:	01480274 	movhi	r5,8201
200907e4:	29577004 	addi	r5,r5,24000
200907e8:	00915081 	jmpi	20091508 <_fwalk_reent>

200907ec <__sinit.part.1>:
200907ec:	defff704 	addi	sp,sp,-36
200907f0:	00c80274 	movhi	r3,8201
200907f4:	dfc00815 	stw	ra,32(sp)
200907f8:	ddc00715 	stw	r23,28(sp)
200907fc:	dd800615 	stw	r22,24(sp)
20090800:	dd400515 	stw	r21,20(sp)
20090804:	dd000415 	stw	r20,16(sp)
20090808:	dcc00315 	stw	r19,12(sp)
2009080c:	dc800215 	stw	r18,8(sp)
20090810:	dc400115 	stw	r17,4(sp)
20090814:	dc000015 	stw	r16,0(sp)
20090818:	18c1f804 	addi	r3,r3,2016
2009081c:	24000117 	ldw	r16,4(r4)
20090820:	20c00f15 	stw	r3,60(r4)
20090824:	2080bb04 	addi	r2,r4,748
20090828:	00c000c4 	movi	r3,3
2009082c:	20c0b915 	stw	r3,740(r4)
20090830:	2080ba15 	stw	r2,744(r4)
20090834:	2000b815 	stw	zero,736(r4)
20090838:	05c00204 	movi	r23,8
2009083c:	00800104 	movi	r2,4
20090840:	2025883a 	mov	r18,r4
20090844:	b80d883a 	mov	r6,r23
20090848:	81001704 	addi	r4,r16,92
2009084c:	000b883a 	mov	r5,zero
20090850:	80000015 	stw	zero,0(r16)
20090854:	80000115 	stw	zero,4(r16)
20090858:	80000215 	stw	zero,8(r16)
2009085c:	8080030d 	sth	r2,12(r16)
20090860:	80001915 	stw	zero,100(r16)
20090864:	8000038d 	sth	zero,14(r16)
20090868:	80000415 	stw	zero,16(r16)
2009086c:	80000515 	stw	zero,20(r16)
20090870:	80000615 	stw	zero,24(r16)
20090874:	008a3180 	call	2008a318 <memset>
20090878:	05880274 	movhi	r22,8201
2009087c:	94400217 	ldw	r17,8(r18)
20090880:	05480274 	movhi	r21,8201
20090884:	05080274 	movhi	r20,8201
20090888:	04c80274 	movhi	r19,8201
2009088c:	b58c6404 	addi	r22,r22,12688
20090890:	ad4c7b04 	addi	r21,r21,12780
20090894:	a50c9a04 	addi	r20,r20,12904
20090898:	9cccb104 	addi	r19,r19,12996
2009089c:	85800815 	stw	r22,32(r16)
200908a0:	85400915 	stw	r21,36(r16)
200908a4:	85000a15 	stw	r20,40(r16)
200908a8:	84c00b15 	stw	r19,44(r16)
200908ac:	84000715 	stw	r16,28(r16)
200908b0:	00800284 	movi	r2,10
200908b4:	8880030d 	sth	r2,12(r17)
200908b8:	00800044 	movi	r2,1
200908bc:	89001704 	addi	r4,r17,92
200908c0:	b80d883a 	mov	r6,r23
200908c4:	000b883a 	mov	r5,zero
200908c8:	88000015 	stw	zero,0(r17)
200908cc:	88000115 	stw	zero,4(r17)
200908d0:	88000215 	stw	zero,8(r17)
200908d4:	88001915 	stw	zero,100(r17)
200908d8:	8880038d 	sth	r2,14(r17)
200908dc:	88000415 	stw	zero,16(r17)
200908e0:	88000515 	stw	zero,20(r17)
200908e4:	88000615 	stw	zero,24(r17)
200908e8:	008a3180 	call	2008a318 <memset>
200908ec:	94000317 	ldw	r16,12(r18)
200908f0:	00800484 	movi	r2,18
200908f4:	8c400715 	stw	r17,28(r17)
200908f8:	8d800815 	stw	r22,32(r17)
200908fc:	8d400915 	stw	r21,36(r17)
20090900:	8d000a15 	stw	r20,40(r17)
20090904:	8cc00b15 	stw	r19,44(r17)
20090908:	8080030d 	sth	r2,12(r16)
2009090c:	00800084 	movi	r2,2
20090910:	80000015 	stw	zero,0(r16)
20090914:	80000115 	stw	zero,4(r16)
20090918:	80000215 	stw	zero,8(r16)
2009091c:	80001915 	stw	zero,100(r16)
20090920:	8080038d 	sth	r2,14(r16)
20090924:	80000415 	stw	zero,16(r16)
20090928:	80000515 	stw	zero,20(r16)
2009092c:	80000615 	stw	zero,24(r16)
20090930:	81001704 	addi	r4,r16,92
20090934:	000b883a 	mov	r5,zero
20090938:	b80d883a 	mov	r6,r23
2009093c:	008a3180 	call	2008a318 <memset>
20090940:	00800044 	movi	r2,1
20090944:	84000715 	stw	r16,28(r16)
20090948:	85800815 	stw	r22,32(r16)
2009094c:	85400915 	stw	r21,36(r16)
20090950:	85000a15 	stw	r20,40(r16)
20090954:	84c00b15 	stw	r19,44(r16)
20090958:	90800e15 	stw	r2,56(r18)
2009095c:	dfc00817 	ldw	ra,32(sp)
20090960:	ddc00717 	ldw	r23,28(sp)
20090964:	dd800617 	ldw	r22,24(sp)
20090968:	dd400517 	ldw	r21,20(sp)
2009096c:	dd000417 	ldw	r20,16(sp)
20090970:	dcc00317 	ldw	r19,12(sp)
20090974:	dc800217 	ldw	r18,8(sp)
20090978:	dc400117 	ldw	r17,4(sp)
2009097c:	dc000017 	ldw	r16,0(sp)
20090980:	dec00904 	addi	sp,sp,36
20090984:	f800283a 	ret

20090988 <__sfmoreglue>:
20090988:	defffc04 	addi	sp,sp,-16
2009098c:	dc400115 	stw	r17,4(sp)
20090990:	2c7fffc4 	addi	r17,r5,-1
20090994:	8c401a24 	muli	r17,r17,104
20090998:	dc800215 	stw	r18,8(sp)
2009099c:	2825883a 	mov	r18,r5
200909a0:	89401d04 	addi	r5,r17,116
200909a4:	dc000015 	stw	r16,0(sp)
200909a8:	dfc00315 	stw	ra,12(sp)
200909ac:	00899bc0 	call	200899bc <_malloc_r>
200909b0:	1021883a 	mov	r16,r2
200909b4:	10000726 	beq	r2,zero,200909d4 <__sfmoreglue+0x4c>
200909b8:	11000304 	addi	r4,r2,12
200909bc:	10000015 	stw	zero,0(r2)
200909c0:	14800115 	stw	r18,4(r2)
200909c4:	11000215 	stw	r4,8(r2)
200909c8:	000b883a 	mov	r5,zero
200909cc:	89801a04 	addi	r6,r17,104
200909d0:	008a3180 	call	2008a318 <memset>
200909d4:	8005883a 	mov	r2,r16
200909d8:	dfc00317 	ldw	ra,12(sp)
200909dc:	dc800217 	ldw	r18,8(sp)
200909e0:	dc400117 	ldw	r17,4(sp)
200909e4:	dc000017 	ldw	r16,0(sp)
200909e8:	dec00404 	addi	sp,sp,16
200909ec:	f800283a 	ret

200909f0 <__sfp>:
200909f0:	00800034 	movhi	r2,0
200909f4:	defffb04 	addi	sp,sp,-20
200909f8:	108a1304 	addi	r2,r2,10316
200909fc:	dc800215 	stw	r18,8(sp)
20090a00:	14800017 	ldw	r18,0(r2)
20090a04:	dcc00315 	stw	r19,12(sp)
20090a08:	dfc00415 	stw	ra,16(sp)
20090a0c:	90800e17 	ldw	r2,56(r18)
20090a10:	dc400115 	stw	r17,4(sp)
20090a14:	dc000015 	stw	r16,0(sp)
20090a18:	2027883a 	mov	r19,r4
20090a1c:	1000021e 	bne	r2,zero,20090a28 <__sfp+0x38>
20090a20:	9009883a 	mov	r4,r18
20090a24:	00907ec0 	call	200907ec <__sinit.part.1>
20090a28:	9480b804 	addi	r18,r18,736
20090a2c:	047fffc4 	movi	r17,-1
20090a30:	91400117 	ldw	r5,4(r18)
20090a34:	94000217 	ldw	r16,8(r18)
20090a38:	297fffc4 	addi	r5,r5,-1
20090a3c:	28000a16 	blt	r5,zero,20090a68 <__sfp+0x78>
20090a40:	8080030f 	ldh	r2,12(r16)
20090a44:	10000c26 	beq	r2,zero,20090a78 <__sfp+0x88>
20090a48:	80c01d04 	addi	r3,r16,116
20090a4c:	00000206 	br	20090a58 <__sfp+0x68>
20090a50:	18bfe60f 	ldh	r2,-104(r3)
20090a54:	10000826 	beq	r2,zero,20090a78 <__sfp+0x88>
20090a58:	297fffc4 	addi	r5,r5,-1
20090a5c:	1c3ffd04 	addi	r16,r3,-12
20090a60:	18c01a04 	addi	r3,r3,104
20090a64:	2c7ffa1e 	bne	r5,r17,20090a50 <__flash_rwdata_start+0xffff4408>
20090a68:	90800017 	ldw	r2,0(r18)
20090a6c:	10001d26 	beq	r2,zero,20090ae4 <__sfp+0xf4>
20090a70:	1025883a 	mov	r18,r2
20090a74:	003fee06 	br	20090a30 <__flash_rwdata_start+0xffff43e8>
20090a78:	00bfffc4 	movi	r2,-1
20090a7c:	8080038d 	sth	r2,14(r16)
20090a80:	00800044 	movi	r2,1
20090a84:	8080030d 	sth	r2,12(r16)
20090a88:	80001915 	stw	zero,100(r16)
20090a8c:	80000015 	stw	zero,0(r16)
20090a90:	80000215 	stw	zero,8(r16)
20090a94:	80000115 	stw	zero,4(r16)
20090a98:	80000415 	stw	zero,16(r16)
20090a9c:	80000515 	stw	zero,20(r16)
20090aa0:	80000615 	stw	zero,24(r16)
20090aa4:	81001704 	addi	r4,r16,92
20090aa8:	000b883a 	mov	r5,zero
20090aac:	01800204 	movi	r6,8
20090ab0:	008a3180 	call	2008a318 <memset>
20090ab4:	8005883a 	mov	r2,r16
20090ab8:	80000c15 	stw	zero,48(r16)
20090abc:	80000d15 	stw	zero,52(r16)
20090ac0:	80001115 	stw	zero,68(r16)
20090ac4:	80001215 	stw	zero,72(r16)
20090ac8:	dfc00417 	ldw	ra,16(sp)
20090acc:	dcc00317 	ldw	r19,12(sp)
20090ad0:	dc800217 	ldw	r18,8(sp)
20090ad4:	dc400117 	ldw	r17,4(sp)
20090ad8:	dc000017 	ldw	r16,0(sp)
20090adc:	dec00504 	addi	sp,sp,20
20090ae0:	f800283a 	ret
20090ae4:	9809883a 	mov	r4,r19
20090ae8:	01400104 	movi	r5,4
20090aec:	00909880 	call	20090988 <__sfmoreglue>
20090af0:	90800015 	stw	r2,0(r18)
20090af4:	103fde1e 	bne	r2,zero,20090a70 <__flash_rwdata_start+0xffff4428>
20090af8:	00800304 	movi	r2,12
20090afc:	98800015 	stw	r2,0(r19)
20090b00:	0005883a 	mov	r2,zero
20090b04:	003ff006 	br	20090ac8 <__flash_rwdata_start+0xffff4480>

20090b08 <_cleanup>:
20090b08:	00800034 	movhi	r2,0
20090b0c:	108a1304 	addi	r2,r2,10316
20090b10:	11000017 	ldw	r4,0(r2)
20090b14:	01480274 	movhi	r5,8201
20090b18:	29577004 	addi	r5,r5,24000
20090b1c:	00915081 	jmpi	20091508 <_fwalk_reent>

20090b20 <__sinit>:
20090b20:	20800e17 	ldw	r2,56(r4)
20090b24:	10000126 	beq	r2,zero,20090b2c <__sinit+0xc>
20090b28:	f800283a 	ret
20090b2c:	00907ec1 	jmpi	200907ec <__sinit.part.1>

20090b30 <__sfp_lock_acquire>:
20090b30:	f800283a 	ret

20090b34 <__sfp_lock_release>:
20090b34:	f800283a 	ret

20090b38 <__sinit_lock_acquire>:
20090b38:	f800283a 	ret

20090b3c <__sinit_lock_release>:
20090b3c:	f800283a 	ret

20090b40 <__fp_lock_all>:
20090b40:	00800034 	movhi	r2,0
20090b44:	108a1404 	addi	r2,r2,10320
20090b48:	11000017 	ldw	r4,0(r2)
20090b4c:	01480274 	movhi	r5,8201
20090b50:	2941f404 	addi	r5,r5,2000
20090b54:	00914441 	jmpi	20091444 <_fwalk>

20090b58 <__fp_unlock_all>:
20090b58:	00800034 	movhi	r2,0
20090b5c:	108a1404 	addi	r2,r2,10320
20090b60:	11000017 	ldw	r4,0(r2)
20090b64:	01480274 	movhi	r5,8201
20090b68:	2941f604 	addi	r5,r5,2008
20090b6c:	00914441 	jmpi	20091444 <_fwalk>

20090b70 <_malloc_trim_r>:
20090b70:	defffb04 	addi	sp,sp,-20
20090b74:	dcc00315 	stw	r19,12(sp)
20090b78:	04c00034 	movhi	r19,0
20090b7c:	dc800215 	stw	r18,8(sp)
20090b80:	dc400115 	stw	r17,4(sp)
20090b84:	dc000015 	stw	r16,0(sp)
20090b88:	dfc00415 	stw	ra,16(sp)
20090b8c:	2821883a 	mov	r16,r5
20090b90:	9cc45704 	addi	r19,r19,4444
20090b94:	2025883a 	mov	r18,r4
20090b98:	009799c0 	call	2009799c <__malloc_lock>
20090b9c:	98800217 	ldw	r2,8(r19)
20090ba0:	14400117 	ldw	r17,4(r2)
20090ba4:	00bfff04 	movi	r2,-4
20090ba8:	88a2703a 	and	r17,r17,r2
20090bac:	8c21c83a 	sub	r16,r17,r16
20090bb0:	8403fbc4 	addi	r16,r16,4079
20090bb4:	8020d33a 	srli	r16,r16,12
20090bb8:	0083ffc4 	movi	r2,4095
20090bbc:	843fffc4 	addi	r16,r16,-1
20090bc0:	8020933a 	slli	r16,r16,12
20090bc4:	1400060e 	bge	r2,r16,20090be0 <_malloc_trim_r+0x70>
20090bc8:	9009883a 	mov	r4,r18
20090bcc:	000b883a 	mov	r5,zero
20090bd0:	008a5800 	call	2008a580 <_sbrk_r>
20090bd4:	98c00217 	ldw	r3,8(r19)
20090bd8:	1c47883a 	add	r3,r3,r17
20090bdc:	10c00a26 	beq	r2,r3,20090c08 <_malloc_trim_r+0x98>
20090be0:	9009883a 	mov	r4,r18
20090be4:	00979bc0 	call	200979bc <__malloc_unlock>
20090be8:	0005883a 	mov	r2,zero
20090bec:	dfc00417 	ldw	ra,16(sp)
20090bf0:	dcc00317 	ldw	r19,12(sp)
20090bf4:	dc800217 	ldw	r18,8(sp)
20090bf8:	dc400117 	ldw	r17,4(sp)
20090bfc:	dc000017 	ldw	r16,0(sp)
20090c00:	dec00504 	addi	sp,sp,20
20090c04:	f800283a 	ret
20090c08:	9009883a 	mov	r4,r18
20090c0c:	040bc83a 	sub	r5,zero,r16
20090c10:	008a5800 	call	2008a580 <_sbrk_r>
20090c14:	00ffffc4 	movi	r3,-1
20090c18:	10c00d26 	beq	r2,r3,20090c50 <_malloc_trim_r+0xe0>
20090c1c:	00c00034 	movhi	r3,0
20090c20:	18cb1b04 	addi	r3,r3,11372
20090c24:	18800017 	ldw	r2,0(r3)
20090c28:	99000217 	ldw	r4,8(r19)
20090c2c:	8c23c83a 	sub	r17,r17,r16
20090c30:	8c400054 	ori	r17,r17,1
20090c34:	1421c83a 	sub	r16,r2,r16
20090c38:	24400115 	stw	r17,4(r4)
20090c3c:	9009883a 	mov	r4,r18
20090c40:	1c000015 	stw	r16,0(r3)
20090c44:	00979bc0 	call	200979bc <__malloc_unlock>
20090c48:	00800044 	movi	r2,1
20090c4c:	003fe706 	br	20090bec <__flash_rwdata_start+0xffff45a4>
20090c50:	9009883a 	mov	r4,r18
20090c54:	000b883a 	mov	r5,zero
20090c58:	008a5800 	call	2008a580 <_sbrk_r>
20090c5c:	99000217 	ldw	r4,8(r19)
20090c60:	014003c4 	movi	r5,15
20090c64:	1107c83a 	sub	r3,r2,r4
20090c68:	28ffdd0e 	bge	r5,r3,20090be0 <__flash_rwdata_start+0xffff4598>
20090c6c:	01400034 	movhi	r5,0
20090c70:	294a1504 	addi	r5,r5,10324
20090c74:	29400017 	ldw	r5,0(r5)
20090c78:	18c00054 	ori	r3,r3,1
20090c7c:	20c00115 	stw	r3,4(r4)
20090c80:	00c00034 	movhi	r3,0
20090c84:	1145c83a 	sub	r2,r2,r5
20090c88:	18cb1b04 	addi	r3,r3,11372
20090c8c:	18800015 	stw	r2,0(r3)
20090c90:	003fd306 	br	20090be0 <__flash_rwdata_start+0xffff4598>

20090c94 <_free_r>:
20090c94:	28004c26 	beq	r5,zero,20090dc8 <_free_r+0x134>
20090c98:	defffd04 	addi	sp,sp,-12
20090c9c:	dc400115 	stw	r17,4(sp)
20090ca0:	dc000015 	stw	r16,0(sp)
20090ca4:	2023883a 	mov	r17,r4
20090ca8:	2821883a 	mov	r16,r5
20090cac:	dfc00215 	stw	ra,8(sp)
20090cb0:	009799c0 	call	2009799c <__malloc_lock>
20090cb4:	813fff17 	ldw	r4,-4(r16)
20090cb8:	00bfff84 	movi	r2,-2
20090cbc:	02400034 	movhi	r9,0
20090cc0:	81bffe04 	addi	r6,r16,-8
20090cc4:	2084703a 	and	r2,r4,r2
20090cc8:	4a445704 	addi	r9,r9,4444
20090ccc:	308b883a 	add	r5,r6,r2
20090cd0:	2a000117 	ldw	r8,4(r5)
20090cd4:	49c00217 	ldw	r7,8(r9)
20090cd8:	00ffff04 	movi	r3,-4
20090cdc:	40c6703a 	and	r3,r8,r3
20090ce0:	39405326 	beq	r7,r5,20090e30 <_free_r+0x19c>
20090ce4:	28c00115 	stw	r3,4(r5)
20090ce8:	2100004c 	andi	r4,r4,1
20090cec:	2000091e 	bne	r4,zero,20090d14 <_free_r+0x80>
20090cf0:	81fffe17 	ldw	r7,-8(r16)
20090cf4:	4a000204 	addi	r8,r9,8
20090cf8:	31cdc83a 	sub	r6,r6,r7
20090cfc:	31000217 	ldw	r4,8(r6)
20090d00:	11c5883a 	add	r2,r2,r7
20090d04:	22006126 	beq	r4,r8,20090e8c <_free_r+0x1f8>
20090d08:	31c00317 	ldw	r7,12(r6)
20090d0c:	21c00315 	stw	r7,12(r4)
20090d10:	39000215 	stw	r4,8(r7)
20090d14:	28c9883a 	add	r4,r5,r3
20090d18:	21c00117 	ldw	r7,4(r4)
20090d1c:	39c0004c 	andi	r7,r7,1
20090d20:	38000d1e 	bne	r7,zero,20090d58 <_free_r+0xc4>
20090d24:	29000217 	ldw	r4,8(r5)
20090d28:	10c5883a 	add	r2,r2,r3
20090d2c:	00c00034 	movhi	r3,0
20090d30:	18c45904 	addi	r3,r3,4452
20090d34:	20c07526 	beq	r4,r3,20090f0c <_free_r+0x278>
20090d38:	29c00317 	ldw	r7,12(r5)
20090d3c:	11400054 	ori	r5,r2,1
20090d40:	3087883a 	add	r3,r6,r2
20090d44:	21c00315 	stw	r7,12(r4)
20090d48:	39000215 	stw	r4,8(r7)
20090d4c:	31400115 	stw	r5,4(r6)
20090d50:	18800015 	stw	r2,0(r3)
20090d54:	00000406 	br	20090d68 <_free_r+0xd4>
20090d58:	10c00054 	ori	r3,r2,1
20090d5c:	30c00115 	stw	r3,4(r6)
20090d60:	3087883a 	add	r3,r6,r2
20090d64:	18800015 	stw	r2,0(r3)
20090d68:	00c07fc4 	movi	r3,511
20090d6c:	18801736 	bltu	r3,r2,20090dcc <_free_r+0x138>
20090d70:	1004d0fa 	srli	r2,r2,3
20090d74:	01400044 	movi	r5,1
20090d78:	49000117 	ldw	r4,4(r9)
20090d7c:	1087883a 	add	r3,r2,r2
20090d80:	18c7883a 	add	r3,r3,r3
20090d84:	1005d0ba 	srai	r2,r2,2
20090d88:	18c7883a 	add	r3,r3,r3
20090d8c:	1a47883a 	add	r3,r3,r9
20090d90:	19c00217 	ldw	r7,8(r3)
20090d94:	2884983a 	sll	r2,r5,r2
20090d98:	30c00315 	stw	r3,12(r6)
20090d9c:	31c00215 	stw	r7,8(r6)
20090da0:	1104b03a 	or	r2,r2,r4
20090da4:	19800215 	stw	r6,8(r3)
20090da8:	48800115 	stw	r2,4(r9)
20090dac:	39800315 	stw	r6,12(r7)
20090db0:	8809883a 	mov	r4,r17
20090db4:	dfc00217 	ldw	ra,8(sp)
20090db8:	dc400117 	ldw	r17,4(sp)
20090dbc:	dc000017 	ldw	r16,0(sp)
20090dc0:	dec00304 	addi	sp,sp,12
20090dc4:	00979bc1 	jmpi	200979bc <__malloc_unlock>
20090dc8:	f800283a 	ret
20090dcc:	1006d27a 	srli	r3,r2,9
20090dd0:	01000104 	movi	r4,4
20090dd4:	20c04036 	bltu	r4,r3,20090ed8 <_free_r+0x244>
20090dd8:	1006d1ba 	srli	r3,r2,6
20090ddc:	19400e04 	addi	r5,r3,56
20090de0:	2947883a 	add	r3,r5,r5
20090de4:	18c7883a 	add	r3,r3,r3
20090de8:	18c7883a 	add	r3,r3,r3
20090dec:	1a49883a 	add	r4,r3,r9
20090df0:	20c00217 	ldw	r3,8(r4)
20090df4:	01c00034 	movhi	r7,0
20090df8:	39c45704 	addi	r7,r7,4444
20090dfc:	19003b26 	beq	r3,r4,20090eec <_free_r+0x258>
20090e00:	01ffff04 	movi	r7,-4
20090e04:	19400117 	ldw	r5,4(r3)
20090e08:	29ca703a 	and	r5,r5,r7
20090e0c:	1140022e 	bgeu	r2,r5,20090e18 <_free_r+0x184>
20090e10:	18c00217 	ldw	r3,8(r3)
20090e14:	20fffb1e 	bne	r4,r3,20090e04 <__flash_rwdata_start+0xffff47bc>
20090e18:	18800317 	ldw	r2,12(r3)
20090e1c:	30800315 	stw	r2,12(r6)
20090e20:	30c00215 	stw	r3,8(r6)
20090e24:	11800215 	stw	r6,8(r2)
20090e28:	19800315 	stw	r6,12(r3)
20090e2c:	003fe006 	br	20090db0 <__flash_rwdata_start+0xffff4768>
20090e30:	2100004c 	andi	r4,r4,1
20090e34:	1885883a 	add	r2,r3,r2
20090e38:	2000071e 	bne	r4,zero,20090e58 <_free_r+0x1c4>
20090e3c:	817ffe17 	ldw	r5,-8(r16)
20090e40:	314dc83a 	sub	r6,r6,r5
20090e44:	30c00317 	ldw	r3,12(r6)
20090e48:	31000217 	ldw	r4,8(r6)
20090e4c:	1145883a 	add	r2,r2,r5
20090e50:	20c00315 	stw	r3,12(r4)
20090e54:	19000215 	stw	r4,8(r3)
20090e58:	10c00054 	ori	r3,r2,1
20090e5c:	30c00115 	stw	r3,4(r6)
20090e60:	00c00034 	movhi	r3,0
20090e64:	18ca1604 	addi	r3,r3,10328
20090e68:	18c00017 	ldw	r3,0(r3)
20090e6c:	49800215 	stw	r6,8(r9)
20090e70:	10ffcf36 	bltu	r2,r3,20090db0 <__flash_rwdata_start+0xffff4768>
20090e74:	00800034 	movhi	r2,0
20090e78:	108a2d04 	addi	r2,r2,10420
20090e7c:	11400017 	ldw	r5,0(r2)
20090e80:	8809883a 	mov	r4,r17
20090e84:	0090b700 	call	20090b70 <_malloc_trim_r>
20090e88:	003fc906 	br	20090db0 <__flash_rwdata_start+0xffff4768>
20090e8c:	28c9883a 	add	r4,r5,r3
20090e90:	21000117 	ldw	r4,4(r4)
20090e94:	2100004c 	andi	r4,r4,1
20090e98:	20000a1e 	bne	r4,zero,20090ec4 <_free_r+0x230>
20090e9c:	29000317 	ldw	r4,12(r5)
20090ea0:	29400217 	ldw	r5,8(r5)
20090ea4:	10c5883a 	add	r2,r2,r3
20090ea8:	10c00054 	ori	r3,r2,1
20090eac:	29000315 	stw	r4,12(r5)
20090eb0:	21400215 	stw	r5,8(r4)
20090eb4:	30c00115 	stw	r3,4(r6)
20090eb8:	308d883a 	add	r6,r6,r2
20090ebc:	30800015 	stw	r2,0(r6)
20090ec0:	003fbb06 	br	20090db0 <__flash_rwdata_start+0xffff4768>
20090ec4:	10c00054 	ori	r3,r2,1
20090ec8:	30c00115 	stw	r3,4(r6)
20090ecc:	308d883a 	add	r6,r6,r2
20090ed0:	30800015 	stw	r2,0(r6)
20090ed4:	003fb606 	br	20090db0 <__flash_rwdata_start+0xffff4768>
20090ed8:	01000504 	movi	r4,20
20090edc:	20c01436 	bltu	r4,r3,20090f30 <_free_r+0x29c>
20090ee0:	194016c4 	addi	r5,r3,91
20090ee4:	2947883a 	add	r3,r5,r5
20090ee8:	003fbe06 	br	20090de4 <__flash_rwdata_start+0xffff479c>
20090eec:	280bd0ba 	srai	r5,r5,2
20090ef0:	00800044 	movi	r2,1
20090ef4:	39000117 	ldw	r4,4(r7)
20090ef8:	114a983a 	sll	r5,r2,r5
20090efc:	1805883a 	mov	r2,r3
20090f00:	2908b03a 	or	r4,r5,r4
20090f04:	39000115 	stw	r4,4(r7)
20090f08:	003fc406 	br	20090e1c <__flash_rwdata_start+0xffff47d4>
20090f0c:	49800515 	stw	r6,20(r9)
20090f10:	49800415 	stw	r6,16(r9)
20090f14:	10c00054 	ori	r3,r2,1
20090f18:	31000315 	stw	r4,12(r6)
20090f1c:	31000215 	stw	r4,8(r6)
20090f20:	30c00115 	stw	r3,4(r6)
20090f24:	308d883a 	add	r6,r6,r2
20090f28:	30800015 	stw	r2,0(r6)
20090f2c:	003fa006 	br	20090db0 <__flash_rwdata_start+0xffff4768>
20090f30:	01001504 	movi	r4,84
20090f34:	20c00436 	bltu	r4,r3,20090f48 <_free_r+0x2b4>
20090f38:	1006d33a 	srli	r3,r2,12
20090f3c:	19401b84 	addi	r5,r3,110
20090f40:	2947883a 	add	r3,r5,r5
20090f44:	003fa706 	br	20090de4 <__flash_rwdata_start+0xffff479c>
20090f48:	01005504 	movi	r4,340
20090f4c:	20c00436 	bltu	r4,r3,20090f60 <_free_r+0x2cc>
20090f50:	1006d3fa 	srli	r3,r2,15
20090f54:	19401dc4 	addi	r5,r3,119
20090f58:	2947883a 	add	r3,r5,r5
20090f5c:	003fa106 	br	20090de4 <__flash_rwdata_start+0xffff479c>
20090f60:	01015504 	movi	r4,1364
20090f64:	20c00436 	bltu	r4,r3,20090f78 <_free_r+0x2e4>
20090f68:	1006d4ba 	srli	r3,r2,18
20090f6c:	19401f04 	addi	r5,r3,124
20090f70:	2947883a 	add	r3,r5,r5
20090f74:	003f9b06 	br	20090de4 <__flash_rwdata_start+0xffff479c>
20090f78:	00c03f04 	movi	r3,252
20090f7c:	01401f84 	movi	r5,126
20090f80:	003f9806 	br	20090de4 <__flash_rwdata_start+0xffff479c>

20090f84 <__sfvwrite_r>:
20090f84:	30800217 	ldw	r2,8(r6)
20090f88:	10006726 	beq	r2,zero,20091128 <__sfvwrite_r+0x1a4>
20090f8c:	defff404 	addi	sp,sp,-48
20090f90:	dd000615 	stw	r20,24(sp)
20090f94:	2029883a 	mov	r20,r4
20090f98:	2900030b 	ldhu	r4,12(r5)
20090f9c:	ddc00915 	stw	r23,36(sp)
20090fa0:	dc000215 	stw	r16,8(sp)
20090fa4:	dfc00b15 	stw	ra,44(sp)
20090fa8:	df000a15 	stw	fp,40(sp)
20090fac:	dd800815 	stw	r22,32(sp)
20090fb0:	dd400715 	stw	r21,28(sp)
20090fb4:	dcc00515 	stw	r19,20(sp)
20090fb8:	dc800415 	stw	r18,16(sp)
20090fbc:	dc400315 	stw	r17,12(sp)
20090fc0:	2080020c 	andi	r2,r4,8
20090fc4:	2821883a 	mov	r16,r5
20090fc8:	302f883a 	mov	r23,r6
20090fcc:	10002726 	beq	r2,zero,2009106c <__sfvwrite_r+0xe8>
20090fd0:	28800417 	ldw	r2,16(r5)
20090fd4:	10002526 	beq	r2,zero,2009106c <__sfvwrite_r+0xe8>
20090fd8:	2080008c 	andi	r2,r4,2
20090fdc:	bc400017 	ldw	r17,0(r23)
20090fe0:	10002a26 	beq	r2,zero,2009108c <__sfvwrite_r+0x108>
20090fe4:	05600034 	movhi	r21,32768
20090fe8:	0027883a 	mov	r19,zero
20090fec:	0025883a 	mov	r18,zero
20090ff0:	ad7f0004 	addi	r21,r21,-1024
20090ff4:	980d883a 	mov	r6,r19
20090ff8:	a009883a 	mov	r4,r20
20090ffc:	90004626 	beq	r18,zero,20091118 <__sfvwrite_r+0x194>
20091000:	900f883a 	mov	r7,r18
20091004:	81400717 	ldw	r5,28(r16)
20091008:	ac80022e 	bgeu	r21,r18,20091014 <__sfvwrite_r+0x90>
2009100c:	01e00034 	movhi	r7,32768
20091010:	39ff0004 	addi	r7,r7,-1024
20091014:	80800917 	ldw	r2,36(r16)
20091018:	103ee83a 	callr	r2
2009101c:	0080520e 	bge	zero,r2,20091168 <__sfvwrite_r+0x1e4>
20091020:	b8c00217 	ldw	r3,8(r23)
20091024:	98a7883a 	add	r19,r19,r2
20091028:	90a5c83a 	sub	r18,r18,r2
2009102c:	1885c83a 	sub	r2,r3,r2
20091030:	b8800215 	stw	r2,8(r23)
20091034:	103fef1e 	bne	r2,zero,20090ff4 <__flash_rwdata_start+0xffff49ac>
20091038:	0005883a 	mov	r2,zero
2009103c:	dfc00b17 	ldw	ra,44(sp)
20091040:	df000a17 	ldw	fp,40(sp)
20091044:	ddc00917 	ldw	r23,36(sp)
20091048:	dd800817 	ldw	r22,32(sp)
2009104c:	dd400717 	ldw	r21,28(sp)
20091050:	dd000617 	ldw	r20,24(sp)
20091054:	dcc00517 	ldw	r19,20(sp)
20091058:	dc800417 	ldw	r18,16(sp)
2009105c:	dc400317 	ldw	r17,12(sp)
20091060:	dc000217 	ldw	r16,8(sp)
20091064:	dec00c04 	addi	sp,sp,48
20091068:	f800283a 	ret
2009106c:	a009883a 	mov	r4,r20
20091070:	800b883a 	mov	r5,r16
20091074:	008e92c0 	call	2008e92c <__swsetup_r>
20091078:	1000ec1e 	bne	r2,zero,2009142c <__sfvwrite_r+0x4a8>
2009107c:	8100030b 	ldhu	r4,12(r16)
20091080:	bc400017 	ldw	r17,0(r23)
20091084:	2080008c 	andi	r2,r4,2
20091088:	103fd61e 	bne	r2,zero,20090fe4 <__flash_rwdata_start+0xffff499c>
2009108c:	2080004c 	andi	r2,r4,1
20091090:	10003a1e 	bne	r2,zero,2009117c <__sfvwrite_r+0x1f8>
20091094:	0039883a 	mov	fp,zero
20091098:	0025883a 	mov	r18,zero
2009109c:	90001a26 	beq	r18,zero,20091108 <__sfvwrite_r+0x184>
200910a0:	2080800c 	andi	r2,r4,512
200910a4:	85800217 	ldw	r22,8(r16)
200910a8:	10007626 	beq	r2,zero,20091284 <__sfvwrite_r+0x300>
200910ac:	b027883a 	mov	r19,r22
200910b0:	95809436 	bltu	r18,r22,20091304 <__sfvwrite_r+0x380>
200910b4:	2081200c 	andi	r2,r4,1152
200910b8:	10009f1e 	bne	r2,zero,20091338 <__sfvwrite_r+0x3b4>
200910bc:	81000017 	ldw	r4,0(r16)
200910c0:	e00b883a 	mov	r5,fp
200910c4:	980d883a 	mov	r6,r19
200910c8:	009194c0 	call	2009194c <memmove>
200910cc:	81000217 	ldw	r4,8(r16)
200910d0:	81400017 	ldw	r5,0(r16)
200910d4:	9005883a 	mov	r2,r18
200910d8:	2587c83a 	sub	r3,r4,r22
200910dc:	2ce7883a 	add	r19,r5,r19
200910e0:	80c00215 	stw	r3,8(r16)
200910e4:	84c00015 	stw	r19,0(r16)
200910e8:	b8c00217 	ldw	r3,8(r23)
200910ec:	e0b9883a 	add	fp,fp,r2
200910f0:	90a5c83a 	sub	r18,r18,r2
200910f4:	1885c83a 	sub	r2,r3,r2
200910f8:	b8800215 	stw	r2,8(r23)
200910fc:	103fce26 	beq	r2,zero,20091038 <__flash_rwdata_start+0xffff49f0>
20091100:	8100030b 	ldhu	r4,12(r16)
20091104:	903fe61e 	bne	r18,zero,200910a0 <__flash_rwdata_start+0xffff4a58>
20091108:	8f000017 	ldw	fp,0(r17)
2009110c:	8c800117 	ldw	r18,4(r17)
20091110:	8c400204 	addi	r17,r17,8
20091114:	003fe106 	br	2009109c <__flash_rwdata_start+0xffff4a54>
20091118:	8cc00017 	ldw	r19,0(r17)
2009111c:	8c800117 	ldw	r18,4(r17)
20091120:	8c400204 	addi	r17,r17,8
20091124:	003fb306 	br	20090ff4 <__flash_rwdata_start+0xffff49ac>
20091128:	0005883a 	mov	r2,zero
2009112c:	f800283a 	ret
20091130:	00a00034 	movhi	r2,32768
20091134:	10bfffc4 	addi	r2,r2,-1
20091138:	9009883a 	mov	r4,r18
2009113c:	1480012e 	bgeu	r2,r18,20091144 <__sfvwrite_r+0x1c0>
20091140:	1009883a 	mov	r4,r2
20091144:	980b883a 	mov	r5,r19
20091148:	00866e40 	call	200866e4 <__divsi3>
2009114c:	81400717 	ldw	r5,28(r16)
20091150:	80c00917 	ldw	r3,36(r16)
20091154:	988f383a 	mul	r7,r19,r2
20091158:	a009883a 	mov	r4,r20
2009115c:	e00d883a 	mov	r6,fp
20091160:	183ee83a 	callr	r3
20091164:	00bfe016 	blt	zero,r2,200910e8 <__flash_rwdata_start+0xffff4aa0>
20091168:	8080030b 	ldhu	r2,12(r16)
2009116c:	10801014 	ori	r2,r2,64
20091170:	8080030d 	sth	r2,12(r16)
20091174:	00bfffc4 	movi	r2,-1
20091178:	003fb006 	br	2009103c <__flash_rwdata_start+0xffff49f4>
2009117c:	0027883a 	mov	r19,zero
20091180:	0011883a 	mov	r8,zero
20091184:	0039883a 	mov	fp,zero
20091188:	0025883a 	mov	r18,zero
2009118c:	90001f26 	beq	r18,zero,2009120c <__sfvwrite_r+0x288>
20091190:	40006026 	beq	r8,zero,20091314 <__sfvwrite_r+0x390>
20091194:	982b883a 	mov	r21,r19
20091198:	94c0012e 	bgeu	r18,r19,200911a0 <__sfvwrite_r+0x21c>
2009119c:	902b883a 	mov	r21,r18
200911a0:	81000017 	ldw	r4,0(r16)
200911a4:	80800417 	ldw	r2,16(r16)
200911a8:	a82d883a 	mov	r22,r21
200911ac:	81800217 	ldw	r6,8(r16)
200911b0:	81c00517 	ldw	r7,20(r16)
200911b4:	1100022e 	bgeu	r2,r4,200911c0 <__sfvwrite_r+0x23c>
200911b8:	31c7883a 	add	r3,r6,r7
200911bc:	1d401816 	blt	r3,r21,20091220 <__sfvwrite_r+0x29c>
200911c0:	a9c04416 	blt	r21,r7,200912d4 <__sfvwrite_r+0x350>
200911c4:	80800917 	ldw	r2,36(r16)
200911c8:	81400717 	ldw	r5,28(r16)
200911cc:	a009883a 	mov	r4,r20
200911d0:	da000115 	stw	r8,4(sp)
200911d4:	e00d883a 	mov	r6,fp
200911d8:	103ee83a 	callr	r2
200911dc:	102d883a 	mov	r22,r2
200911e0:	da000117 	ldw	r8,4(sp)
200911e4:	00bfe00e 	bge	zero,r2,20091168 <__flash_rwdata_start+0xffff4b20>
200911e8:	9da7c83a 	sub	r19,r19,r22
200911ec:	98001f26 	beq	r19,zero,2009126c <__sfvwrite_r+0x2e8>
200911f0:	b8800217 	ldw	r2,8(r23)
200911f4:	e5b9883a 	add	fp,fp,r22
200911f8:	95a5c83a 	sub	r18,r18,r22
200911fc:	15adc83a 	sub	r22,r2,r22
20091200:	bd800215 	stw	r22,8(r23)
20091204:	b03f8c26 	beq	r22,zero,20091038 <__flash_rwdata_start+0xffff49f0>
20091208:	903fe11e 	bne	r18,zero,20091190 <__flash_rwdata_start+0xffff4b48>
2009120c:	8f000017 	ldw	fp,0(r17)
20091210:	8c800117 	ldw	r18,4(r17)
20091214:	0011883a 	mov	r8,zero
20091218:	8c400204 	addi	r17,r17,8
2009121c:	003fdb06 	br	2009118c <__flash_rwdata_start+0xffff4b44>
20091220:	180d883a 	mov	r6,r3
20091224:	e00b883a 	mov	r5,fp
20091228:	da000115 	stw	r8,4(sp)
2009122c:	d8c00015 	stw	r3,0(sp)
20091230:	009194c0 	call	2009194c <memmove>
20091234:	d8c00017 	ldw	r3,0(sp)
20091238:	80800017 	ldw	r2,0(r16)
2009123c:	a009883a 	mov	r4,r20
20091240:	800b883a 	mov	r5,r16
20091244:	10c5883a 	add	r2,r2,r3
20091248:	80800015 	stw	r2,0(r16)
2009124c:	d8c00015 	stw	r3,0(sp)
20091250:	00907440 	call	20090744 <_fflush_r>
20091254:	d8c00017 	ldw	r3,0(sp)
20091258:	da000117 	ldw	r8,4(sp)
2009125c:	103fc21e 	bne	r2,zero,20091168 <__flash_rwdata_start+0xffff4b20>
20091260:	182d883a 	mov	r22,r3
20091264:	9da7c83a 	sub	r19,r19,r22
20091268:	983fe11e 	bne	r19,zero,200911f0 <__flash_rwdata_start+0xffff4ba8>
2009126c:	a009883a 	mov	r4,r20
20091270:	800b883a 	mov	r5,r16
20091274:	00907440 	call	20090744 <_fflush_r>
20091278:	103fbb1e 	bne	r2,zero,20091168 <__flash_rwdata_start+0xffff4b20>
2009127c:	0011883a 	mov	r8,zero
20091280:	003fdb06 	br	200911f0 <__flash_rwdata_start+0xffff4ba8>
20091284:	81000017 	ldw	r4,0(r16)
20091288:	80800417 	ldw	r2,16(r16)
2009128c:	11000236 	bltu	r2,r4,20091298 <__sfvwrite_r+0x314>
20091290:	84c00517 	ldw	r19,20(r16)
20091294:	94ffa62e 	bgeu	r18,r19,20091130 <__flash_rwdata_start+0xffff4ae8>
20091298:	9027883a 	mov	r19,r18
2009129c:	b480012e 	bgeu	r22,r18,200912a4 <__sfvwrite_r+0x320>
200912a0:	b027883a 	mov	r19,r22
200912a4:	e00b883a 	mov	r5,fp
200912a8:	980d883a 	mov	r6,r19
200912ac:	009194c0 	call	2009194c <memmove>
200912b0:	80800217 	ldw	r2,8(r16)
200912b4:	80c00017 	ldw	r3,0(r16)
200912b8:	14c5c83a 	sub	r2,r2,r19
200912bc:	1cc7883a 	add	r3,r3,r19
200912c0:	80800215 	stw	r2,8(r16)
200912c4:	80c00015 	stw	r3,0(r16)
200912c8:	10004326 	beq	r2,zero,200913d8 <__sfvwrite_r+0x454>
200912cc:	9805883a 	mov	r2,r19
200912d0:	003f8506 	br	200910e8 <__flash_rwdata_start+0xffff4aa0>
200912d4:	a80d883a 	mov	r6,r21
200912d8:	e00b883a 	mov	r5,fp
200912dc:	da000115 	stw	r8,4(sp)
200912e0:	009194c0 	call	2009194c <memmove>
200912e4:	80800217 	ldw	r2,8(r16)
200912e8:	80c00017 	ldw	r3,0(r16)
200912ec:	da000117 	ldw	r8,4(sp)
200912f0:	1545c83a 	sub	r2,r2,r21
200912f4:	1d6b883a 	add	r21,r3,r21
200912f8:	80800215 	stw	r2,8(r16)
200912fc:	85400015 	stw	r21,0(r16)
20091300:	003fb906 	br	200911e8 <__flash_rwdata_start+0xffff4ba0>
20091304:	81000017 	ldw	r4,0(r16)
20091308:	902d883a 	mov	r22,r18
2009130c:	9027883a 	mov	r19,r18
20091310:	003f6b06 	br	200910c0 <__flash_rwdata_start+0xffff4a78>
20091314:	e009883a 	mov	r4,fp
20091318:	01400284 	movi	r5,10
2009131c:	900d883a 	mov	r6,r18
20091320:	00918640 	call	20091864 <memchr>
20091324:	10003e26 	beq	r2,zero,20091420 <__sfvwrite_r+0x49c>
20091328:	10800044 	addi	r2,r2,1
2009132c:	1727c83a 	sub	r19,r2,fp
20091330:	02000044 	movi	r8,1
20091334:	003f9706 	br	20091194 <__flash_rwdata_start+0xffff4b4c>
20091338:	80800517 	ldw	r2,20(r16)
2009133c:	81400417 	ldw	r5,16(r16)
20091340:	80c00017 	ldw	r3,0(r16)
20091344:	10a7883a 	add	r19,r2,r2
20091348:	9885883a 	add	r2,r19,r2
2009134c:	1026d7fa 	srli	r19,r2,31
20091350:	196bc83a 	sub	r21,r3,r5
20091354:	a9800044 	addi	r6,r21,1
20091358:	9885883a 	add	r2,r19,r2
2009135c:	1027d07a 	srai	r19,r2,1
20091360:	3485883a 	add	r2,r6,r18
20091364:	980d883a 	mov	r6,r19
20091368:	9880022e 	bgeu	r19,r2,20091374 <__sfvwrite_r+0x3f0>
2009136c:	1027883a 	mov	r19,r2
20091370:	100d883a 	mov	r6,r2
20091374:	2101000c 	andi	r4,r4,1024
20091378:	20001c26 	beq	r4,zero,200913ec <__sfvwrite_r+0x468>
2009137c:	a009883a 	mov	r4,r20
20091380:	300b883a 	mov	r5,r6
20091384:	00899bc0 	call	200899bc <_malloc_r>
20091388:	102d883a 	mov	r22,r2
2009138c:	10002926 	beq	r2,zero,20091434 <__sfvwrite_r+0x4b0>
20091390:	81400417 	ldw	r5,16(r16)
20091394:	1009883a 	mov	r4,r2
20091398:	a80d883a 	mov	r6,r21
2009139c:	008a1e00 	call	2008a1e0 <memcpy>
200913a0:	8080030b 	ldhu	r2,12(r16)
200913a4:	00fedfc4 	movi	r3,-1153
200913a8:	10c4703a 	and	r2,r2,r3
200913ac:	10802014 	ori	r2,r2,128
200913b0:	8080030d 	sth	r2,12(r16)
200913b4:	b549883a 	add	r4,r22,r21
200913b8:	9d4bc83a 	sub	r5,r19,r21
200913bc:	85800415 	stw	r22,16(r16)
200913c0:	84c00515 	stw	r19,20(r16)
200913c4:	81000015 	stw	r4,0(r16)
200913c8:	902d883a 	mov	r22,r18
200913cc:	81400215 	stw	r5,8(r16)
200913d0:	9027883a 	mov	r19,r18
200913d4:	003f3a06 	br	200910c0 <__flash_rwdata_start+0xffff4a78>
200913d8:	a009883a 	mov	r4,r20
200913dc:	800b883a 	mov	r5,r16
200913e0:	00907440 	call	20090744 <_fflush_r>
200913e4:	103fb926 	beq	r2,zero,200912cc <__flash_rwdata_start+0xffff4c84>
200913e8:	003f5f06 	br	20091168 <__flash_rwdata_start+0xffff4b20>
200913ec:	a009883a 	mov	r4,r20
200913f0:	0092bb40 	call	20092bb4 <_realloc_r>
200913f4:	102d883a 	mov	r22,r2
200913f8:	103fee1e 	bne	r2,zero,200913b4 <__flash_rwdata_start+0xffff4d6c>
200913fc:	81400417 	ldw	r5,16(r16)
20091400:	a009883a 	mov	r4,r20
20091404:	0090c940 	call	20090c94 <_free_r>
20091408:	8080030b 	ldhu	r2,12(r16)
2009140c:	00ffdfc4 	movi	r3,-129
20091410:	1884703a 	and	r2,r3,r2
20091414:	00c00304 	movi	r3,12
20091418:	a0c00015 	stw	r3,0(r20)
2009141c:	003f5306 	br	2009116c <__flash_rwdata_start+0xffff4b24>
20091420:	94c00044 	addi	r19,r18,1
20091424:	02000044 	movi	r8,1
20091428:	003f5a06 	br	20091194 <__flash_rwdata_start+0xffff4b4c>
2009142c:	00bfffc4 	movi	r2,-1
20091430:	003f0206 	br	2009103c <__flash_rwdata_start+0xffff49f4>
20091434:	00800304 	movi	r2,12
20091438:	a0800015 	stw	r2,0(r20)
2009143c:	8080030b 	ldhu	r2,12(r16)
20091440:	003f4a06 	br	2009116c <__flash_rwdata_start+0xffff4b24>

20091444 <_fwalk>:
20091444:	defff704 	addi	sp,sp,-36
20091448:	dd000415 	stw	r20,16(sp)
2009144c:	dfc00815 	stw	ra,32(sp)
20091450:	ddc00715 	stw	r23,28(sp)
20091454:	dd800615 	stw	r22,24(sp)
20091458:	dd400515 	stw	r21,20(sp)
2009145c:	dcc00315 	stw	r19,12(sp)
20091460:	dc800215 	stw	r18,8(sp)
20091464:	dc400115 	stw	r17,4(sp)
20091468:	dc000015 	stw	r16,0(sp)
2009146c:	2500b804 	addi	r20,r4,736
20091470:	a0002326 	beq	r20,zero,20091500 <_fwalk+0xbc>
20091474:	282b883a 	mov	r21,r5
20091478:	002f883a 	mov	r23,zero
2009147c:	05800044 	movi	r22,1
20091480:	04ffffc4 	movi	r19,-1
20091484:	a4400117 	ldw	r17,4(r20)
20091488:	a4800217 	ldw	r18,8(r20)
2009148c:	8c7fffc4 	addi	r17,r17,-1
20091490:	88000d16 	blt	r17,zero,200914c8 <_fwalk+0x84>
20091494:	94000304 	addi	r16,r18,12
20091498:	94800384 	addi	r18,r18,14
2009149c:	80c0000b 	ldhu	r3,0(r16)
200914a0:	8c7fffc4 	addi	r17,r17,-1
200914a4:	813ffd04 	addi	r4,r16,-12
200914a8:	b0c0042e 	bgeu	r22,r3,200914bc <_fwalk+0x78>
200914ac:	90c0000f 	ldh	r3,0(r18)
200914b0:	1cc00226 	beq	r3,r19,200914bc <_fwalk+0x78>
200914b4:	a83ee83a 	callr	r21
200914b8:	b8aeb03a 	or	r23,r23,r2
200914bc:	84001a04 	addi	r16,r16,104
200914c0:	94801a04 	addi	r18,r18,104
200914c4:	8cfff51e 	bne	r17,r19,2009149c <__flash_rwdata_start+0xffff4e54>
200914c8:	a5000017 	ldw	r20,0(r20)
200914cc:	a03fed1e 	bne	r20,zero,20091484 <__flash_rwdata_start+0xffff4e3c>
200914d0:	b805883a 	mov	r2,r23
200914d4:	dfc00817 	ldw	ra,32(sp)
200914d8:	ddc00717 	ldw	r23,28(sp)
200914dc:	dd800617 	ldw	r22,24(sp)
200914e0:	dd400517 	ldw	r21,20(sp)
200914e4:	dd000417 	ldw	r20,16(sp)
200914e8:	dcc00317 	ldw	r19,12(sp)
200914ec:	dc800217 	ldw	r18,8(sp)
200914f0:	dc400117 	ldw	r17,4(sp)
200914f4:	dc000017 	ldw	r16,0(sp)
200914f8:	dec00904 	addi	sp,sp,36
200914fc:	f800283a 	ret
20091500:	002f883a 	mov	r23,zero
20091504:	003ff206 	br	200914d0 <__flash_rwdata_start+0xffff4e88>

20091508 <_fwalk_reent>:
20091508:	defff704 	addi	sp,sp,-36
2009150c:	dd400515 	stw	r21,20(sp)
20091510:	dfc00815 	stw	ra,32(sp)
20091514:	ddc00715 	stw	r23,28(sp)
20091518:	dd800615 	stw	r22,24(sp)
2009151c:	dd000415 	stw	r20,16(sp)
20091520:	dcc00315 	stw	r19,12(sp)
20091524:	dc800215 	stw	r18,8(sp)
20091528:	dc400115 	stw	r17,4(sp)
2009152c:	dc000015 	stw	r16,0(sp)
20091530:	2540b804 	addi	r21,r4,736
20091534:	a8002326 	beq	r21,zero,200915c4 <_fwalk_reent+0xbc>
20091538:	2829883a 	mov	r20,r5
2009153c:	202d883a 	mov	r22,r4
20091540:	002f883a 	mov	r23,zero
20091544:	04c00044 	movi	r19,1
20091548:	04bfffc4 	movi	r18,-1
2009154c:	ac400117 	ldw	r17,4(r21)
20091550:	ac000217 	ldw	r16,8(r21)
20091554:	8c7fffc4 	addi	r17,r17,-1
20091558:	88000c16 	blt	r17,zero,2009158c <_fwalk_reent+0x84>
2009155c:	84000304 	addi	r16,r16,12
20091560:	80c0000b 	ldhu	r3,0(r16)
20091564:	8c7fffc4 	addi	r17,r17,-1
20091568:	817ffd04 	addi	r5,r16,-12
2009156c:	98c0052e 	bgeu	r19,r3,20091584 <_fwalk_reent+0x7c>
20091570:	80c0008f 	ldh	r3,2(r16)
20091574:	b009883a 	mov	r4,r22
20091578:	1c800226 	beq	r3,r18,20091584 <_fwalk_reent+0x7c>
2009157c:	a03ee83a 	callr	r20
20091580:	b8aeb03a 	or	r23,r23,r2
20091584:	84001a04 	addi	r16,r16,104
20091588:	8cbff51e 	bne	r17,r18,20091560 <__flash_rwdata_start+0xffff4f18>
2009158c:	ad400017 	ldw	r21,0(r21)
20091590:	a83fee1e 	bne	r21,zero,2009154c <__flash_rwdata_start+0xffff4f04>
20091594:	b805883a 	mov	r2,r23
20091598:	dfc00817 	ldw	ra,32(sp)
2009159c:	ddc00717 	ldw	r23,28(sp)
200915a0:	dd800617 	ldw	r22,24(sp)
200915a4:	dd400517 	ldw	r21,20(sp)
200915a8:	dd000417 	ldw	r20,16(sp)
200915ac:	dcc00317 	ldw	r19,12(sp)
200915b0:	dc800217 	ldw	r18,8(sp)
200915b4:	dc400117 	ldw	r17,4(sp)
200915b8:	dc000017 	ldw	r16,0(sp)
200915bc:	dec00904 	addi	sp,sp,36
200915c0:	f800283a 	ret
200915c4:	002f883a 	mov	r23,zero
200915c8:	003ff206 	br	20091594 <__flash_rwdata_start+0xffff4f4c>

200915cc <_setlocale_r>:
200915cc:	30001b26 	beq	r6,zero,2009163c <_setlocale_r+0x70>
200915d0:	01400034 	movhi	r5,0
200915d4:	defffe04 	addi	sp,sp,-8
200915d8:	2941a004 	addi	r5,r5,1664
200915dc:	3009883a 	mov	r4,r6
200915e0:	dc000015 	stw	r16,0(sp)
200915e4:	dfc00115 	stw	ra,4(sp)
200915e8:	3021883a 	mov	r16,r6
200915ec:	008a6980 	call	2008a698 <strcmp>
200915f0:	1000061e 	bne	r2,zero,2009160c <_setlocale_r+0x40>
200915f4:	00800034 	movhi	r2,0
200915f8:	10804304 	addi	r2,r2,268
200915fc:	dfc00117 	ldw	ra,4(sp)
20091600:	dc000017 	ldw	r16,0(sp)
20091604:	dec00204 	addi	sp,sp,8
20091608:	f800283a 	ret
2009160c:	01400034 	movhi	r5,0
20091610:	29404304 	addi	r5,r5,268
20091614:	8009883a 	mov	r4,r16
20091618:	008a6980 	call	2008a698 <strcmp>
2009161c:	103ff526 	beq	r2,zero,200915f4 <__flash_rwdata_start+0xffff4fac>
20091620:	01400034 	movhi	r5,0
20091624:	29406a04 	addi	r5,r5,424
20091628:	8009883a 	mov	r4,r16
2009162c:	008a6980 	call	2008a698 <strcmp>
20091630:	103ff026 	beq	r2,zero,200915f4 <__flash_rwdata_start+0xffff4fac>
20091634:	0005883a 	mov	r2,zero
20091638:	003ff006 	br	200915fc <__flash_rwdata_start+0xffff4fb4>
2009163c:	00800034 	movhi	r2,0
20091640:	10804304 	addi	r2,r2,268
20091644:	f800283a 	ret

20091648 <__locale_charset>:
20091648:	00800034 	movhi	r2,0
2009164c:	10856104 	addi	r2,r2,5508
20091650:	f800283a 	ret

20091654 <__locale_mb_cur_max>:
20091654:	00800034 	movhi	r2,0
20091658:	108a1704 	addi	r2,r2,10332
2009165c:	10800017 	ldw	r2,0(r2)
20091660:	f800283a 	ret

20091664 <__locale_msgcharset>:
20091664:	00800034 	movhi	r2,0
20091668:	10855904 	addi	r2,r2,5476
2009166c:	f800283a 	ret

20091670 <__locale_cjk_lang>:
20091670:	0005883a 	mov	r2,zero
20091674:	f800283a 	ret

20091678 <_localeconv_r>:
20091678:	00800034 	movhi	r2,0
2009167c:	10856904 	addi	r2,r2,5540
20091680:	f800283a 	ret

20091684 <setlocale>:
20091684:	00c00034 	movhi	r3,0
20091688:	18ca1404 	addi	r3,r3,10320
2009168c:	2005883a 	mov	r2,r4
20091690:	19000017 	ldw	r4,0(r3)
20091694:	280d883a 	mov	r6,r5
20091698:	100b883a 	mov	r5,r2
2009169c:	00915cc1 	jmpi	200915cc <_setlocale_r>

200916a0 <localeconv>:
200916a0:	00800034 	movhi	r2,0
200916a4:	10856904 	addi	r2,r2,5540
200916a8:	f800283a 	ret

200916ac <__smakebuf_r>:
200916ac:	2880030b 	ldhu	r2,12(r5)
200916b0:	10c0008c 	andi	r3,r2,2
200916b4:	1800401e 	bne	r3,zero,200917b8 <__smakebuf_r+0x10c>
200916b8:	deffec04 	addi	sp,sp,-80
200916bc:	dc000f15 	stw	r16,60(sp)
200916c0:	2821883a 	mov	r16,r5
200916c4:	2940038f 	ldh	r5,14(r5)
200916c8:	dc401015 	stw	r17,64(sp)
200916cc:	dfc01315 	stw	ra,76(sp)
200916d0:	dcc01215 	stw	r19,72(sp)
200916d4:	dc801115 	stw	r18,68(sp)
200916d8:	2023883a 	mov	r17,r4
200916dc:	28001b16 	blt	r5,zero,2009174c <__smakebuf_r+0xa0>
200916e0:	d80d883a 	mov	r6,sp
200916e4:	00960a40 	call	200960a4 <_fstat_r>
200916e8:	10001716 	blt	r2,zero,20091748 <__smakebuf_r+0x9c>
200916ec:	d8800117 	ldw	r2,4(sp)
200916f0:	00e00014 	movui	r3,32768
200916f4:	10bc000c 	andi	r2,r2,61440
200916f8:	10c03726 	beq	r2,r3,200917d8 <__smakebuf_r+0x12c>
200916fc:	80c0030b 	ldhu	r3,12(r16)
20091700:	18c20014 	ori	r3,r3,2048
20091704:	80c0030d 	sth	r3,12(r16)
20091708:	00c80004 	movi	r3,8192
2009170c:	10c03c1e 	bne	r2,r3,20091800 <__smakebuf_r+0x154>
20091710:	8140038f 	ldh	r5,14(r16)
20091714:	8809883a 	mov	r4,r17
20091718:	00960fc0 	call	200960fc <_isatty_r>
2009171c:	10004e26 	beq	r2,zero,20091858 <__smakebuf_r+0x1ac>
20091720:	8080030b 	ldhu	r2,12(r16)
20091724:	04c00044 	movi	r19,1
20091728:	80c010c4 	addi	r3,r16,67
2009172c:	14c4b03a 	or	r2,r2,r19
20091730:	8080030d 	sth	r2,12(r16)
20091734:	80c00015 	stw	r3,0(r16)
20091738:	80c00415 	stw	r3,16(r16)
2009173c:	84c00515 	stw	r19,20(r16)
20091740:	04810004 	movi	r18,1024
20091744:	00000706 	br	20091764 <__smakebuf_r+0xb8>
20091748:	8080030b 	ldhu	r2,12(r16)
2009174c:	10c0200c 	andi	r3,r2,128
20091750:	18001f1e 	bne	r3,zero,200917d0 <__smakebuf_r+0x124>
20091754:	04810004 	movi	r18,1024
20091758:	10820014 	ori	r2,r2,2048
2009175c:	8080030d 	sth	r2,12(r16)
20091760:	0027883a 	mov	r19,zero
20091764:	8809883a 	mov	r4,r17
20091768:	900b883a 	mov	r5,r18
2009176c:	00899bc0 	call	200899bc <_malloc_r>
20091770:	10002e26 	beq	r2,zero,2009182c <__smakebuf_r+0x180>
20091774:	80c0030b 	ldhu	r3,12(r16)
20091778:	01080274 	movhi	r4,8201
2009177c:	2101f804 	addi	r4,r4,2016
20091780:	89000f15 	stw	r4,60(r17)
20091784:	18c02014 	ori	r3,r3,128
20091788:	80c0030d 	sth	r3,12(r16)
2009178c:	80800015 	stw	r2,0(r16)
20091790:	80800415 	stw	r2,16(r16)
20091794:	84800515 	stw	r18,20(r16)
20091798:	98001c1e 	bne	r19,zero,2009180c <__smakebuf_r+0x160>
2009179c:	dfc01317 	ldw	ra,76(sp)
200917a0:	dcc01217 	ldw	r19,72(sp)
200917a4:	dc801117 	ldw	r18,68(sp)
200917a8:	dc401017 	ldw	r17,64(sp)
200917ac:	dc000f17 	ldw	r16,60(sp)
200917b0:	dec01404 	addi	sp,sp,80
200917b4:	f800283a 	ret
200917b8:	288010c4 	addi	r2,r5,67
200917bc:	28800015 	stw	r2,0(r5)
200917c0:	28800415 	stw	r2,16(r5)
200917c4:	00800044 	movi	r2,1
200917c8:	28800515 	stw	r2,20(r5)
200917cc:	f800283a 	ret
200917d0:	04801004 	movi	r18,64
200917d4:	003fe006 	br	20091758 <__flash_rwdata_start+0xffff5110>
200917d8:	81000a17 	ldw	r4,40(r16)
200917dc:	00c80274 	movhi	r3,8201
200917e0:	18cc9a04 	addi	r3,r3,12904
200917e4:	20ffc51e 	bne	r4,r3,200916fc <__flash_rwdata_start+0xffff50b4>
200917e8:	80c0030b 	ldhu	r3,12(r16)
200917ec:	01010004 	movi	r4,1024
200917f0:	81001315 	stw	r4,76(r16)
200917f4:	1906b03a 	or	r3,r3,r4
200917f8:	80c0030d 	sth	r3,12(r16)
200917fc:	003fc206 	br	20091708 <__flash_rwdata_start+0xffff50c0>
20091800:	0027883a 	mov	r19,zero
20091804:	04810004 	movi	r18,1024
20091808:	003fd606 	br	20091764 <__flash_rwdata_start+0xffff511c>
2009180c:	8140038f 	ldh	r5,14(r16)
20091810:	8809883a 	mov	r4,r17
20091814:	00960fc0 	call	200960fc <_isatty_r>
20091818:	103fe026 	beq	r2,zero,2009179c <__flash_rwdata_start+0xffff5154>
2009181c:	8080030b 	ldhu	r2,12(r16)
20091820:	10800054 	ori	r2,r2,1
20091824:	8080030d 	sth	r2,12(r16)
20091828:	003fdc06 	br	2009179c <__flash_rwdata_start+0xffff5154>
2009182c:	8080030b 	ldhu	r2,12(r16)
20091830:	10c0800c 	andi	r3,r2,512
20091834:	183fd91e 	bne	r3,zero,2009179c <__flash_rwdata_start+0xffff5154>
20091838:	10800094 	ori	r2,r2,2
2009183c:	80c010c4 	addi	r3,r16,67
20091840:	8080030d 	sth	r2,12(r16)
20091844:	00800044 	movi	r2,1
20091848:	80c00015 	stw	r3,0(r16)
2009184c:	80c00415 	stw	r3,16(r16)
20091850:	80800515 	stw	r2,20(r16)
20091854:	003fd106 	br	2009179c <__flash_rwdata_start+0xffff5154>
20091858:	04c00044 	movi	r19,1
2009185c:	04810004 	movi	r18,1024
20091860:	003fc006 	br	20091764 <__flash_rwdata_start+0xffff511c>

20091864 <memchr>:
20091864:	208000cc 	andi	r2,r4,3
20091868:	280f883a 	mov	r7,r5
2009186c:	10003526 	beq	r2,zero,20091944 <memchr+0xe0>
20091870:	30bfffc4 	addi	r2,r6,-1
20091874:	30001b26 	beq	r6,zero,200918e4 <memchr+0x80>
20091878:	21800003 	ldbu	r6,0(r4)
2009187c:	28c03fcc 	andi	r3,r5,255
20091880:	30c01a26 	beq	r6,r3,200918ec <memchr+0x88>
20091884:	180d883a 	mov	r6,r3
20091888:	00000406 	br	2009189c <memchr+0x38>
2009188c:	10001526 	beq	r2,zero,200918e4 <memchr+0x80>
20091890:	20c00003 	ldbu	r3,0(r4)
20091894:	10bfffc4 	addi	r2,r2,-1
20091898:	19801426 	beq	r3,r6,200918ec <memchr+0x88>
2009189c:	21000044 	addi	r4,r4,1
200918a0:	20c000cc 	andi	r3,r4,3
200918a4:	183ff91e 	bne	r3,zero,2009188c <__flash_rwdata_start+0xffff5244>
200918a8:	024000c4 	movi	r9,3
200918ac:	48801136 	bltu	r9,r2,200918f4 <memchr+0x90>
200918b0:	10000c26 	beq	r2,zero,200918e4 <memchr+0x80>
200918b4:	20c00003 	ldbu	r3,0(r4)
200918b8:	29403fcc 	andi	r5,r5,255
200918bc:	19400b26 	beq	r3,r5,200918ec <memchr+0x88>
200918c0:	20c00044 	addi	r3,r4,1
200918c4:	2085883a 	add	r2,r4,r2
200918c8:	39803fcc 	andi	r6,r7,255
200918cc:	00000306 	br	200918dc <memchr+0x78>
200918d0:	18c00044 	addi	r3,r3,1
200918d4:	197fffc3 	ldbu	r5,-1(r3)
200918d8:	29800426 	beq	r5,r6,200918ec <memchr+0x88>
200918dc:	1809883a 	mov	r4,r3
200918e0:	18bffb1e 	bne	r3,r2,200918d0 <__flash_rwdata_start+0xffff5288>
200918e4:	0005883a 	mov	r2,zero
200918e8:	f800283a 	ret
200918ec:	2005883a 	mov	r2,r4
200918f0:	f800283a 	ret
200918f4:	28c03fcc 	andi	r3,r5,255
200918f8:	1810923a 	slli	r8,r3,8
200918fc:	02ffbff4 	movhi	r11,65279
20091900:	02a02074 	movhi	r10,32897
20091904:	40c6b03a 	or	r3,r8,r3
20091908:	1810943a 	slli	r8,r3,16
2009190c:	5affbfc4 	addi	r11,r11,-257
20091910:	52a02004 	addi	r10,r10,-32640
20091914:	40d0b03a 	or	r8,r8,r3
20091918:	20c00017 	ldw	r3,0(r4)
2009191c:	40c6f03a 	xor	r3,r8,r3
20091920:	1acd883a 	add	r6,r3,r11
20091924:	00c6303a 	nor	r3,zero,r3
20091928:	30c6703a 	and	r3,r6,r3
2009192c:	1a86703a 	and	r3,r3,r10
20091930:	183fdf1e 	bne	r3,zero,200918b0 <__flash_rwdata_start+0xffff5268>
20091934:	10bfff04 	addi	r2,r2,-4
20091938:	21000104 	addi	r4,r4,4
2009193c:	48bff636 	bltu	r9,r2,20091918 <__flash_rwdata_start+0xffff52d0>
20091940:	003fdb06 	br	200918b0 <__flash_rwdata_start+0xffff5268>
20091944:	3005883a 	mov	r2,r6
20091948:	003fd706 	br	200918a8 <__flash_rwdata_start+0xffff5260>

2009194c <memmove>:
2009194c:	2005883a 	mov	r2,r4
20091950:	29000b2e 	bgeu	r5,r4,20091980 <memmove+0x34>
20091954:	298f883a 	add	r7,r5,r6
20091958:	21c0092e 	bgeu	r4,r7,20091980 <memmove+0x34>
2009195c:	2187883a 	add	r3,r4,r6
20091960:	198bc83a 	sub	r5,r3,r6
20091964:	30004b26 	beq	r6,zero,20091a94 <memmove+0x148>
20091968:	39ffffc4 	addi	r7,r7,-1
2009196c:	39000003 	ldbu	r4,0(r7)
20091970:	18ffffc4 	addi	r3,r3,-1
20091974:	19000005 	stb	r4,0(r3)
20091978:	197ffb1e 	bne	r3,r5,20091968 <__flash_rwdata_start+0xffff5320>
2009197c:	f800283a 	ret
20091980:	00c003c4 	movi	r3,15
20091984:	1980412e 	bgeu	r3,r6,20091a8c <memmove+0x140>
20091988:	1146b03a 	or	r3,r2,r5
2009198c:	18c000cc 	andi	r3,r3,3
20091990:	1800411e 	bne	r3,zero,20091a98 <memmove+0x14c>
20091994:	33fffc04 	addi	r15,r6,-16
20091998:	781ed13a 	srli	r15,r15,4
2009199c:	28c00104 	addi	r3,r5,4
200919a0:	13400104 	addi	r13,r2,4
200919a4:	781c913a 	slli	r14,r15,4
200919a8:	2b000204 	addi	r12,r5,8
200919ac:	12c00204 	addi	r11,r2,8
200919b0:	73800504 	addi	r14,r14,20
200919b4:	2a800304 	addi	r10,r5,12
200919b8:	12400304 	addi	r9,r2,12
200919bc:	2b9d883a 	add	r14,r5,r14
200919c0:	2811883a 	mov	r8,r5
200919c4:	100f883a 	mov	r7,r2
200919c8:	41000017 	ldw	r4,0(r8)
200919cc:	39c00404 	addi	r7,r7,16
200919d0:	18c00404 	addi	r3,r3,16
200919d4:	393ffc15 	stw	r4,-16(r7)
200919d8:	193ffc17 	ldw	r4,-16(r3)
200919dc:	6b400404 	addi	r13,r13,16
200919e0:	5ac00404 	addi	r11,r11,16
200919e4:	693ffc15 	stw	r4,-16(r13)
200919e8:	61000017 	ldw	r4,0(r12)
200919ec:	4a400404 	addi	r9,r9,16
200919f0:	42000404 	addi	r8,r8,16
200919f4:	593ffc15 	stw	r4,-16(r11)
200919f8:	51000017 	ldw	r4,0(r10)
200919fc:	63000404 	addi	r12,r12,16
20091a00:	52800404 	addi	r10,r10,16
20091a04:	493ffc15 	stw	r4,-16(r9)
20091a08:	1bbfef1e 	bne	r3,r14,200919c8 <__flash_rwdata_start+0xffff5380>
20091a0c:	79000044 	addi	r4,r15,1
20091a10:	2008913a 	slli	r4,r4,4
20091a14:	328003cc 	andi	r10,r6,15
20091a18:	02c000c4 	movi	r11,3
20091a1c:	1107883a 	add	r3,r2,r4
20091a20:	290b883a 	add	r5,r5,r4
20091a24:	5a801e2e 	bgeu	r11,r10,20091aa0 <memmove+0x154>
20091a28:	1813883a 	mov	r9,r3
20091a2c:	2811883a 	mov	r8,r5
20091a30:	500f883a 	mov	r7,r10
20091a34:	41000017 	ldw	r4,0(r8)
20091a38:	4a400104 	addi	r9,r9,4
20091a3c:	39ffff04 	addi	r7,r7,-4
20091a40:	493fff15 	stw	r4,-4(r9)
20091a44:	42000104 	addi	r8,r8,4
20091a48:	59fffa36 	bltu	r11,r7,20091a34 <__flash_rwdata_start+0xffff53ec>
20091a4c:	513fff04 	addi	r4,r10,-4
20091a50:	2008d0ba 	srli	r4,r4,2
20091a54:	318000cc 	andi	r6,r6,3
20091a58:	21000044 	addi	r4,r4,1
20091a5c:	2109883a 	add	r4,r4,r4
20091a60:	2109883a 	add	r4,r4,r4
20091a64:	1907883a 	add	r3,r3,r4
20091a68:	290b883a 	add	r5,r5,r4
20091a6c:	30000926 	beq	r6,zero,20091a94 <memmove+0x148>
20091a70:	198d883a 	add	r6,r3,r6
20091a74:	29c00003 	ldbu	r7,0(r5)
20091a78:	18c00044 	addi	r3,r3,1
20091a7c:	29400044 	addi	r5,r5,1
20091a80:	19ffffc5 	stb	r7,-1(r3)
20091a84:	19bffb1e 	bne	r3,r6,20091a74 <__flash_rwdata_start+0xffff542c>
20091a88:	f800283a 	ret
20091a8c:	1007883a 	mov	r3,r2
20091a90:	003ff606 	br	20091a6c <__flash_rwdata_start+0xffff5424>
20091a94:	f800283a 	ret
20091a98:	1007883a 	mov	r3,r2
20091a9c:	003ff406 	br	20091a70 <__flash_rwdata_start+0xffff5428>
20091aa0:	500d883a 	mov	r6,r10
20091aa4:	003ff106 	br	20091a6c <__flash_rwdata_start+0xffff5424>

20091aa8 <_Balloc>:
20091aa8:	20801317 	ldw	r2,76(r4)
20091aac:	defffc04 	addi	sp,sp,-16
20091ab0:	dc400115 	stw	r17,4(sp)
20091ab4:	dc000015 	stw	r16,0(sp)
20091ab8:	dfc00315 	stw	ra,12(sp)
20091abc:	dc800215 	stw	r18,8(sp)
20091ac0:	2023883a 	mov	r17,r4
20091ac4:	2821883a 	mov	r16,r5
20091ac8:	10000f26 	beq	r2,zero,20091b08 <_Balloc+0x60>
20091acc:	8407883a 	add	r3,r16,r16
20091ad0:	18c7883a 	add	r3,r3,r3
20091ad4:	10c7883a 	add	r3,r2,r3
20091ad8:	18800017 	ldw	r2,0(r3)
20091adc:	10001126 	beq	r2,zero,20091b24 <_Balloc+0x7c>
20091ae0:	11000017 	ldw	r4,0(r2)
20091ae4:	19000015 	stw	r4,0(r3)
20091ae8:	10000415 	stw	zero,16(r2)
20091aec:	10000315 	stw	zero,12(r2)
20091af0:	dfc00317 	ldw	ra,12(sp)
20091af4:	dc800217 	ldw	r18,8(sp)
20091af8:	dc400117 	ldw	r17,4(sp)
20091afc:	dc000017 	ldw	r16,0(sp)
20091b00:	dec00404 	addi	sp,sp,16
20091b04:	f800283a 	ret
20091b08:	01400104 	movi	r5,4
20091b0c:	01800844 	movi	r6,33
20091b10:	0095cfc0 	call	20095cfc <_calloc_r>
20091b14:	88801315 	stw	r2,76(r17)
20091b18:	103fec1e 	bne	r2,zero,20091acc <__flash_rwdata_start+0xffff5484>
20091b1c:	0005883a 	mov	r2,zero
20091b20:	003ff306 	br	20091af0 <__flash_rwdata_start+0xffff54a8>
20091b24:	01400044 	movi	r5,1
20091b28:	2c24983a 	sll	r18,r5,r16
20091b2c:	8809883a 	mov	r4,r17
20091b30:	91800144 	addi	r6,r18,5
20091b34:	318d883a 	add	r6,r6,r6
20091b38:	318d883a 	add	r6,r6,r6
20091b3c:	0095cfc0 	call	20095cfc <_calloc_r>
20091b40:	103ff626 	beq	r2,zero,20091b1c <__flash_rwdata_start+0xffff54d4>
20091b44:	14000115 	stw	r16,4(r2)
20091b48:	14800215 	stw	r18,8(r2)
20091b4c:	003fe606 	br	20091ae8 <__flash_rwdata_start+0xffff54a0>

20091b50 <_Bfree>:
20091b50:	28000826 	beq	r5,zero,20091b74 <_Bfree+0x24>
20091b54:	28c00117 	ldw	r3,4(r5)
20091b58:	20801317 	ldw	r2,76(r4)
20091b5c:	18c7883a 	add	r3,r3,r3
20091b60:	18c7883a 	add	r3,r3,r3
20091b64:	10c5883a 	add	r2,r2,r3
20091b68:	10c00017 	ldw	r3,0(r2)
20091b6c:	28c00015 	stw	r3,0(r5)
20091b70:	11400015 	stw	r5,0(r2)
20091b74:	f800283a 	ret

20091b78 <__multadd>:
20091b78:	defffa04 	addi	sp,sp,-24
20091b7c:	dc000115 	stw	r16,4(sp)
20091b80:	2c000417 	ldw	r16,16(r5)
20091b84:	dc800315 	stw	r18,12(sp)
20091b88:	dc400215 	stw	r17,8(sp)
20091b8c:	dfc00515 	stw	ra,20(sp)
20091b90:	dcc00415 	stw	r19,16(sp)
20091b94:	2823883a 	mov	r17,r5
20091b98:	2025883a 	mov	r18,r4
20091b9c:	2a400504 	addi	r9,r5,20
20091ba0:	0015883a 	mov	r10,zero
20091ba4:	4a000017 	ldw	r8,0(r9)
20091ba8:	4a400104 	addi	r9,r9,4
20091bac:	52800044 	addi	r10,r10,1
20091bb0:	40ffffcc 	andi	r3,r8,65535
20091bb4:	1987383a 	mul	r3,r3,r6
20091bb8:	4010d43a 	srli	r8,r8,16
20091bbc:	19cf883a 	add	r7,r3,r7
20091bc0:	4191383a 	mul	r8,r8,r6
20091bc4:	3816d43a 	srli	r11,r7,16
20091bc8:	38ffffcc 	andi	r3,r7,65535
20091bcc:	5a0f883a 	add	r7,r11,r8
20091bd0:	3810943a 	slli	r8,r7,16
20091bd4:	380ed43a 	srli	r7,r7,16
20091bd8:	40c7883a 	add	r3,r8,r3
20091bdc:	48ffff15 	stw	r3,-4(r9)
20091be0:	543ff016 	blt	r10,r16,20091ba4 <__flash_rwdata_start+0xffff555c>
20091be4:	38000926 	beq	r7,zero,20091c0c <__multadd+0x94>
20091be8:	88800217 	ldw	r2,8(r17)
20091bec:	80800f0e 	bge	r16,r2,20091c2c <__multadd+0xb4>
20091bf0:	80800144 	addi	r2,r16,5
20091bf4:	1085883a 	add	r2,r2,r2
20091bf8:	1085883a 	add	r2,r2,r2
20091bfc:	8885883a 	add	r2,r17,r2
20091c00:	11c00015 	stw	r7,0(r2)
20091c04:	84000044 	addi	r16,r16,1
20091c08:	8c000415 	stw	r16,16(r17)
20091c0c:	8805883a 	mov	r2,r17
20091c10:	dfc00517 	ldw	ra,20(sp)
20091c14:	dcc00417 	ldw	r19,16(sp)
20091c18:	dc800317 	ldw	r18,12(sp)
20091c1c:	dc400217 	ldw	r17,8(sp)
20091c20:	dc000117 	ldw	r16,4(sp)
20091c24:	dec00604 	addi	sp,sp,24
20091c28:	f800283a 	ret
20091c2c:	89400117 	ldw	r5,4(r17)
20091c30:	9009883a 	mov	r4,r18
20091c34:	d9c00015 	stw	r7,0(sp)
20091c38:	29400044 	addi	r5,r5,1
20091c3c:	0091aa80 	call	20091aa8 <_Balloc>
20091c40:	89800417 	ldw	r6,16(r17)
20091c44:	11000304 	addi	r4,r2,12
20091c48:	89400304 	addi	r5,r17,12
20091c4c:	31800084 	addi	r6,r6,2
20091c50:	318d883a 	add	r6,r6,r6
20091c54:	318d883a 	add	r6,r6,r6
20091c58:	1027883a 	mov	r19,r2
20091c5c:	008a1e00 	call	2008a1e0 <memcpy>
20091c60:	d9c00017 	ldw	r7,0(sp)
20091c64:	88000a26 	beq	r17,zero,20091c90 <__multadd+0x118>
20091c68:	89000117 	ldw	r4,4(r17)
20091c6c:	90c01317 	ldw	r3,76(r18)
20091c70:	2109883a 	add	r4,r4,r4
20091c74:	2109883a 	add	r4,r4,r4
20091c78:	1907883a 	add	r3,r3,r4
20091c7c:	18800017 	ldw	r2,0(r3)
20091c80:	88800015 	stw	r2,0(r17)
20091c84:	1c400015 	stw	r17,0(r3)
20091c88:	9823883a 	mov	r17,r19
20091c8c:	003fd806 	br	20091bf0 <__flash_rwdata_start+0xffff55a8>
20091c90:	9823883a 	mov	r17,r19
20091c94:	003fd606 	br	20091bf0 <__flash_rwdata_start+0xffff55a8>

20091c98 <__s2b>:
20091c98:	defff904 	addi	sp,sp,-28
20091c9c:	dc400115 	stw	r17,4(sp)
20091ca0:	dc000015 	stw	r16,0(sp)
20091ca4:	2023883a 	mov	r17,r4
20091ca8:	2821883a 	mov	r16,r5
20091cac:	39000204 	addi	r4,r7,8
20091cb0:	01400244 	movi	r5,9
20091cb4:	dcc00315 	stw	r19,12(sp)
20091cb8:	dc800215 	stw	r18,8(sp)
20091cbc:	dfc00615 	stw	ra,24(sp)
20091cc0:	dd400515 	stw	r21,20(sp)
20091cc4:	dd000415 	stw	r20,16(sp)
20091cc8:	3825883a 	mov	r18,r7
20091ccc:	3027883a 	mov	r19,r6
20091cd0:	00866e40 	call	200866e4 <__divsi3>
20091cd4:	00c00044 	movi	r3,1
20091cd8:	000b883a 	mov	r5,zero
20091cdc:	1880030e 	bge	r3,r2,20091cec <__s2b+0x54>
20091ce0:	18c7883a 	add	r3,r3,r3
20091ce4:	29400044 	addi	r5,r5,1
20091ce8:	18bffd16 	blt	r3,r2,20091ce0 <__flash_rwdata_start+0xffff5698>
20091cec:	8809883a 	mov	r4,r17
20091cf0:	0091aa80 	call	20091aa8 <_Balloc>
20091cf4:	d8c00717 	ldw	r3,28(sp)
20091cf8:	10c00515 	stw	r3,20(r2)
20091cfc:	00c00044 	movi	r3,1
20091d00:	10c00415 	stw	r3,16(r2)
20091d04:	00c00244 	movi	r3,9
20091d08:	1cc0210e 	bge	r3,r19,20091d90 <__s2b+0xf8>
20091d0c:	80eb883a 	add	r21,r16,r3
20091d10:	a829883a 	mov	r20,r21
20091d14:	84e1883a 	add	r16,r16,r19
20091d18:	a1c00007 	ldb	r7,0(r20)
20091d1c:	8809883a 	mov	r4,r17
20091d20:	a5000044 	addi	r20,r20,1
20091d24:	100b883a 	mov	r5,r2
20091d28:	01800284 	movi	r6,10
20091d2c:	39fff404 	addi	r7,r7,-48
20091d30:	0091b780 	call	20091b78 <__multadd>
20091d34:	a43ff81e 	bne	r20,r16,20091d18 <__flash_rwdata_start+0xffff56d0>
20091d38:	ace1883a 	add	r16,r21,r19
20091d3c:	843ffe04 	addi	r16,r16,-8
20091d40:	9c800a0e 	bge	r19,r18,20091d6c <__s2b+0xd4>
20091d44:	94e5c83a 	sub	r18,r18,r19
20091d48:	84a5883a 	add	r18,r16,r18
20091d4c:	81c00007 	ldb	r7,0(r16)
20091d50:	8809883a 	mov	r4,r17
20091d54:	84000044 	addi	r16,r16,1
20091d58:	100b883a 	mov	r5,r2
20091d5c:	01800284 	movi	r6,10
20091d60:	39fff404 	addi	r7,r7,-48
20091d64:	0091b780 	call	20091b78 <__multadd>
20091d68:	84bff81e 	bne	r16,r18,20091d4c <__flash_rwdata_start+0xffff5704>
20091d6c:	dfc00617 	ldw	ra,24(sp)
20091d70:	dd400517 	ldw	r21,20(sp)
20091d74:	dd000417 	ldw	r20,16(sp)
20091d78:	dcc00317 	ldw	r19,12(sp)
20091d7c:	dc800217 	ldw	r18,8(sp)
20091d80:	dc400117 	ldw	r17,4(sp)
20091d84:	dc000017 	ldw	r16,0(sp)
20091d88:	dec00704 	addi	sp,sp,28
20091d8c:	f800283a 	ret
20091d90:	84000284 	addi	r16,r16,10
20091d94:	1827883a 	mov	r19,r3
20091d98:	003fe906 	br	20091d40 <__flash_rwdata_start+0xffff56f8>

20091d9c <__hi0bits>:
20091d9c:	20bfffec 	andhi	r2,r4,65535
20091da0:	1000141e 	bne	r2,zero,20091df4 <__hi0bits+0x58>
20091da4:	2008943a 	slli	r4,r4,16
20091da8:	00800404 	movi	r2,16
20091dac:	20ffc02c 	andhi	r3,r4,65280
20091db0:	1800021e 	bne	r3,zero,20091dbc <__hi0bits+0x20>
20091db4:	2008923a 	slli	r4,r4,8
20091db8:	10800204 	addi	r2,r2,8
20091dbc:	20fc002c 	andhi	r3,r4,61440
20091dc0:	1800021e 	bne	r3,zero,20091dcc <__hi0bits+0x30>
20091dc4:	2008913a 	slli	r4,r4,4
20091dc8:	10800104 	addi	r2,r2,4
20091dcc:	20f0002c 	andhi	r3,r4,49152
20091dd0:	1800031e 	bne	r3,zero,20091de0 <__hi0bits+0x44>
20091dd4:	2109883a 	add	r4,r4,r4
20091dd8:	10800084 	addi	r2,r2,2
20091ddc:	2109883a 	add	r4,r4,r4
20091de0:	20000316 	blt	r4,zero,20091df0 <__hi0bits+0x54>
20091de4:	2110002c 	andhi	r4,r4,16384
20091de8:	2000041e 	bne	r4,zero,20091dfc <__hi0bits+0x60>
20091dec:	00800804 	movi	r2,32
20091df0:	f800283a 	ret
20091df4:	0005883a 	mov	r2,zero
20091df8:	003fec06 	br	20091dac <__flash_rwdata_start+0xffff5764>
20091dfc:	10800044 	addi	r2,r2,1
20091e00:	f800283a 	ret

20091e04 <__lo0bits>:
20091e04:	20c00017 	ldw	r3,0(r4)
20091e08:	188001cc 	andi	r2,r3,7
20091e0c:	10000826 	beq	r2,zero,20091e30 <__lo0bits+0x2c>
20091e10:	1880004c 	andi	r2,r3,1
20091e14:	1000211e 	bne	r2,zero,20091e9c <__lo0bits+0x98>
20091e18:	1880008c 	andi	r2,r3,2
20091e1c:	1000211e 	bne	r2,zero,20091ea4 <__lo0bits+0xa0>
20091e20:	1806d0ba 	srli	r3,r3,2
20091e24:	00800084 	movi	r2,2
20091e28:	20c00015 	stw	r3,0(r4)
20091e2c:	f800283a 	ret
20091e30:	18bfffcc 	andi	r2,r3,65535
20091e34:	10001326 	beq	r2,zero,20091e84 <__lo0bits+0x80>
20091e38:	0005883a 	mov	r2,zero
20091e3c:	19403fcc 	andi	r5,r3,255
20091e40:	2800021e 	bne	r5,zero,20091e4c <__lo0bits+0x48>
20091e44:	1806d23a 	srli	r3,r3,8
20091e48:	10800204 	addi	r2,r2,8
20091e4c:	194003cc 	andi	r5,r3,15
20091e50:	2800021e 	bne	r5,zero,20091e5c <__lo0bits+0x58>
20091e54:	1806d13a 	srli	r3,r3,4
20091e58:	10800104 	addi	r2,r2,4
20091e5c:	194000cc 	andi	r5,r3,3
20091e60:	2800021e 	bne	r5,zero,20091e6c <__lo0bits+0x68>
20091e64:	1806d0ba 	srli	r3,r3,2
20091e68:	10800084 	addi	r2,r2,2
20091e6c:	1940004c 	andi	r5,r3,1
20091e70:	2800081e 	bne	r5,zero,20091e94 <__lo0bits+0x90>
20091e74:	1806d07a 	srli	r3,r3,1
20091e78:	1800051e 	bne	r3,zero,20091e90 <__lo0bits+0x8c>
20091e7c:	00800804 	movi	r2,32
20091e80:	f800283a 	ret
20091e84:	1806d43a 	srli	r3,r3,16
20091e88:	00800404 	movi	r2,16
20091e8c:	003feb06 	br	20091e3c <__flash_rwdata_start+0xffff57f4>
20091e90:	10800044 	addi	r2,r2,1
20091e94:	20c00015 	stw	r3,0(r4)
20091e98:	f800283a 	ret
20091e9c:	0005883a 	mov	r2,zero
20091ea0:	f800283a 	ret
20091ea4:	1806d07a 	srli	r3,r3,1
20091ea8:	00800044 	movi	r2,1
20091eac:	20c00015 	stw	r3,0(r4)
20091eb0:	f800283a 	ret

20091eb4 <__i2b>:
20091eb4:	defffd04 	addi	sp,sp,-12
20091eb8:	dc000015 	stw	r16,0(sp)
20091ebc:	04000044 	movi	r16,1
20091ec0:	dc400115 	stw	r17,4(sp)
20091ec4:	2823883a 	mov	r17,r5
20091ec8:	800b883a 	mov	r5,r16
20091ecc:	dfc00215 	stw	ra,8(sp)
20091ed0:	0091aa80 	call	20091aa8 <_Balloc>
20091ed4:	14400515 	stw	r17,20(r2)
20091ed8:	14000415 	stw	r16,16(r2)
20091edc:	dfc00217 	ldw	ra,8(sp)
20091ee0:	dc400117 	ldw	r17,4(sp)
20091ee4:	dc000017 	ldw	r16,0(sp)
20091ee8:	dec00304 	addi	sp,sp,12
20091eec:	f800283a 	ret

20091ef0 <__multiply>:
20091ef0:	defffa04 	addi	sp,sp,-24
20091ef4:	dcc00315 	stw	r19,12(sp)
20091ef8:	dc800215 	stw	r18,8(sp)
20091efc:	2cc00417 	ldw	r19,16(r5)
20091f00:	34800417 	ldw	r18,16(r6)
20091f04:	dd000415 	stw	r20,16(sp)
20091f08:	dc400115 	stw	r17,4(sp)
20091f0c:	dfc00515 	stw	ra,20(sp)
20091f10:	dc000015 	stw	r16,0(sp)
20091f14:	2829883a 	mov	r20,r5
20091f18:	3023883a 	mov	r17,r6
20091f1c:	9c807016 	blt	r19,r18,200920e0 <__multiply+0x1f0>
20091f20:	9005883a 	mov	r2,r18
20091f24:	9825883a 	mov	r18,r19
20091f28:	1027883a 	mov	r19,r2
20091f2c:	a0800217 	ldw	r2,8(r20)
20091f30:	94e1883a 	add	r16,r18,r19
20091f34:	a1400117 	ldw	r5,4(r20)
20091f38:	1400010e 	bge	r2,r16,20091f40 <__multiply+0x50>
20091f3c:	29400044 	addi	r5,r5,1
20091f40:	0091aa80 	call	20091aa8 <_Balloc>
20091f44:	8417883a 	add	r11,r16,r16
20091f48:	13000504 	addi	r12,r2,20
20091f4c:	5ad7883a 	add	r11,r11,r11
20091f50:	62d7883a 	add	r11,r12,r11
20091f54:	6007883a 	mov	r3,r12
20091f58:	62c0032e 	bgeu	r12,r11,20091f68 <__multiply+0x78>
20091f5c:	18000015 	stw	zero,0(r3)
20091f60:	18c00104 	addi	r3,r3,4
20091f64:	1afffd36 	bltu	r3,r11,20091f5c <__flash_rwdata_start+0xffff5914>
20091f68:	9ce7883a 	add	r19,r19,r19
20091f6c:	94a5883a 	add	r18,r18,r18
20091f70:	89800504 	addi	r6,r17,20
20091f74:	9ce7883a 	add	r19,r19,r19
20091f78:	a3800504 	addi	r14,r20,20
20091f7c:	94a5883a 	add	r18,r18,r18
20091f80:	34db883a 	add	r13,r6,r19
20091f84:	7495883a 	add	r10,r14,r18
20091f88:	3340422e 	bgeu	r6,r13,20092094 <__multiply+0x1a4>
20091f8c:	34400017 	ldw	r17,0(r6)
20091f90:	8cbfffcc 	andi	r18,r17,65535
20091f94:	90001b26 	beq	r18,zero,20092004 <__multiply+0x114>
20091f98:	6013883a 	mov	r9,r12
20091f9c:	7023883a 	mov	r17,r14
20091fa0:	0011883a 	mov	r8,zero
20091fa4:	88c00017 	ldw	r3,0(r17)
20091fa8:	4bc00017 	ldw	r15,0(r9)
20091fac:	8c400104 	addi	r17,r17,4
20091fb0:	19ffffcc 	andi	r7,r3,65535
20091fb4:	3c8f383a 	mul	r7,r7,r18
20091fb8:	1808d43a 	srli	r4,r3,16
20091fbc:	797fffcc 	andi	r5,r15,65535
20091fc0:	29cb883a 	add	r5,r5,r7
20091fc4:	2a0b883a 	add	r5,r5,r8
20091fc8:	2489383a 	mul	r4,r4,r18
20091fcc:	7806d43a 	srli	r3,r15,16
20091fd0:	2810d43a 	srli	r8,r5,16
20091fd4:	297fffcc 	andi	r5,r5,65535
20091fd8:	1907883a 	add	r3,r3,r4
20091fdc:	1a07883a 	add	r3,r3,r8
20091fe0:	1808943a 	slli	r4,r3,16
20091fe4:	480f883a 	mov	r7,r9
20091fe8:	1810d43a 	srli	r8,r3,16
20091fec:	214ab03a 	or	r5,r4,r5
20091ff0:	49400015 	stw	r5,0(r9)
20091ff4:	4a400104 	addi	r9,r9,4
20091ff8:	8abfea36 	bltu	r17,r10,20091fa4 <__flash_rwdata_start+0xffff595c>
20091ffc:	3a000115 	stw	r8,4(r7)
20092000:	34400017 	ldw	r17,0(r6)
20092004:	8822d43a 	srli	r17,r17,16
20092008:	88001f26 	beq	r17,zero,20092088 <__multiply+0x198>
2009200c:	60c00017 	ldw	r3,0(r12)
20092010:	7013883a 	mov	r9,r14
20092014:	601f883a 	mov	r15,r12
20092018:	1811883a 	mov	r8,r3
2009201c:	6027883a 	mov	r19,r12
20092020:	000f883a 	mov	r7,zero
20092024:	00000106 	br	2009202c <__multiply+0x13c>
20092028:	9027883a 	mov	r19,r18
2009202c:	4940000b 	ldhu	r5,0(r9)
20092030:	4010d43a 	srli	r8,r8,16
20092034:	193fffcc 	andi	r4,r3,65535
20092038:	2c4b383a 	mul	r5,r5,r17
2009203c:	7bc00104 	addi	r15,r15,4
20092040:	4a400104 	addi	r9,r9,4
20092044:	2a0b883a 	add	r5,r5,r8
20092048:	29cb883a 	add	r5,r5,r7
2009204c:	2806943a 	slli	r3,r5,16
20092050:	9c800104 	addi	r18,r19,4
20092054:	280ad43a 	srli	r5,r5,16
20092058:	1908b03a 	or	r4,r3,r4
2009205c:	793fff15 	stw	r4,-4(r15)
20092060:	48ffff17 	ldw	r3,-4(r9)
20092064:	92000017 	ldw	r8,0(r18)
20092068:	1806d43a 	srli	r3,r3,16
2009206c:	413fffcc 	andi	r4,r8,65535
20092070:	1c47383a 	mul	r3,r3,r17
20092074:	1907883a 	add	r3,r3,r4
20092078:	1947883a 	add	r3,r3,r5
2009207c:	180ed43a 	srli	r7,r3,16
20092080:	4abfe936 	bltu	r9,r10,20092028 <__flash_rwdata_start+0xffff59e0>
20092084:	98c00115 	stw	r3,4(r19)
20092088:	31800104 	addi	r6,r6,4
2009208c:	63000104 	addi	r12,r12,4
20092090:	337fbe36 	bltu	r6,r13,20091f8c <__flash_rwdata_start+0xffff5944>
20092094:	0400090e 	bge	zero,r16,200920bc <__multiply+0x1cc>
20092098:	58ffff17 	ldw	r3,-4(r11)
2009209c:	5affff04 	addi	r11,r11,-4
200920a0:	18000326 	beq	r3,zero,200920b0 <__multiply+0x1c0>
200920a4:	00000506 	br	200920bc <__multiply+0x1cc>
200920a8:	58c00017 	ldw	r3,0(r11)
200920ac:	1800031e 	bne	r3,zero,200920bc <__multiply+0x1cc>
200920b0:	843fffc4 	addi	r16,r16,-1
200920b4:	5affff04 	addi	r11,r11,-4
200920b8:	803ffb1e 	bne	r16,zero,200920a8 <__flash_rwdata_start+0xffff5a60>
200920bc:	14000415 	stw	r16,16(r2)
200920c0:	dfc00517 	ldw	ra,20(sp)
200920c4:	dd000417 	ldw	r20,16(sp)
200920c8:	dcc00317 	ldw	r19,12(sp)
200920cc:	dc800217 	ldw	r18,8(sp)
200920d0:	dc400117 	ldw	r17,4(sp)
200920d4:	dc000017 	ldw	r16,0(sp)
200920d8:	dec00604 	addi	sp,sp,24
200920dc:	f800283a 	ret
200920e0:	3029883a 	mov	r20,r6
200920e4:	2823883a 	mov	r17,r5
200920e8:	003f9006 	br	20091f2c <__flash_rwdata_start+0xffff58e4>

200920ec <__pow5mult>:
200920ec:	defffa04 	addi	sp,sp,-24
200920f0:	dcc00315 	stw	r19,12(sp)
200920f4:	dc800215 	stw	r18,8(sp)
200920f8:	dc000015 	stw	r16,0(sp)
200920fc:	dfc00515 	stw	ra,20(sp)
20092100:	dd000415 	stw	r20,16(sp)
20092104:	dc400115 	stw	r17,4(sp)
20092108:	308000cc 	andi	r2,r6,3
2009210c:	3021883a 	mov	r16,r6
20092110:	2027883a 	mov	r19,r4
20092114:	2825883a 	mov	r18,r5
20092118:	10002e1e 	bne	r2,zero,200921d4 <__pow5mult+0xe8>
2009211c:	8021d0ba 	srai	r16,r16,2
20092120:	80001a26 	beq	r16,zero,2009218c <__pow5mult+0xa0>
20092124:	9c401217 	ldw	r17,72(r19)
20092128:	8800061e 	bne	r17,zero,20092144 <__pow5mult+0x58>
2009212c:	00003406 	br	20092200 <__pow5mult+0x114>
20092130:	8021d07a 	srai	r16,r16,1
20092134:	80001526 	beq	r16,zero,2009218c <__pow5mult+0xa0>
20092138:	88800017 	ldw	r2,0(r17)
2009213c:	10001c26 	beq	r2,zero,200921b0 <__pow5mult+0xc4>
20092140:	1023883a 	mov	r17,r2
20092144:	80c0004c 	andi	r3,r16,1
20092148:	183ff926 	beq	r3,zero,20092130 <__flash_rwdata_start+0xffff5ae8>
2009214c:	900b883a 	mov	r5,r18
20092150:	880d883a 	mov	r6,r17
20092154:	9809883a 	mov	r4,r19
20092158:	0091ef00 	call	20091ef0 <__multiply>
2009215c:	90001b26 	beq	r18,zero,200921cc <__pow5mult+0xe0>
20092160:	91c00117 	ldw	r7,4(r18)
20092164:	98c01317 	ldw	r3,76(r19)
20092168:	8021d07a 	srai	r16,r16,1
2009216c:	39cf883a 	add	r7,r7,r7
20092170:	39cf883a 	add	r7,r7,r7
20092174:	19c7883a 	add	r3,r3,r7
20092178:	19000017 	ldw	r4,0(r3)
2009217c:	91000015 	stw	r4,0(r18)
20092180:	1c800015 	stw	r18,0(r3)
20092184:	1025883a 	mov	r18,r2
20092188:	803feb1e 	bne	r16,zero,20092138 <__flash_rwdata_start+0xffff5af0>
2009218c:	9005883a 	mov	r2,r18
20092190:	dfc00517 	ldw	ra,20(sp)
20092194:	dd000417 	ldw	r20,16(sp)
20092198:	dcc00317 	ldw	r19,12(sp)
2009219c:	dc800217 	ldw	r18,8(sp)
200921a0:	dc400117 	ldw	r17,4(sp)
200921a4:	dc000017 	ldw	r16,0(sp)
200921a8:	dec00604 	addi	sp,sp,24
200921ac:	f800283a 	ret
200921b0:	9809883a 	mov	r4,r19
200921b4:	880b883a 	mov	r5,r17
200921b8:	880d883a 	mov	r6,r17
200921bc:	0091ef00 	call	20091ef0 <__multiply>
200921c0:	88800015 	stw	r2,0(r17)
200921c4:	10000015 	stw	zero,0(r2)
200921c8:	003fdd06 	br	20092140 <__flash_rwdata_start+0xffff5af8>
200921cc:	1025883a 	mov	r18,r2
200921d0:	003fd706 	br	20092130 <__flash_rwdata_start+0xffff5ae8>
200921d4:	10bfffc4 	addi	r2,r2,-1
200921d8:	1085883a 	add	r2,r2,r2
200921dc:	00c00034 	movhi	r3,0
200921e0:	18c1a304 	addi	r3,r3,1676
200921e4:	1085883a 	add	r2,r2,r2
200921e8:	1885883a 	add	r2,r3,r2
200921ec:	11800017 	ldw	r6,0(r2)
200921f0:	000f883a 	mov	r7,zero
200921f4:	0091b780 	call	20091b78 <__multadd>
200921f8:	1025883a 	mov	r18,r2
200921fc:	003fc706 	br	2009211c <__flash_rwdata_start+0xffff5ad4>
20092200:	05000044 	movi	r20,1
20092204:	9809883a 	mov	r4,r19
20092208:	a00b883a 	mov	r5,r20
2009220c:	0091aa80 	call	20091aa8 <_Balloc>
20092210:	1023883a 	mov	r17,r2
20092214:	00809c44 	movi	r2,625
20092218:	88800515 	stw	r2,20(r17)
2009221c:	8d000415 	stw	r20,16(r17)
20092220:	9c401215 	stw	r17,72(r19)
20092224:	88000015 	stw	zero,0(r17)
20092228:	003fc606 	br	20092144 <__flash_rwdata_start+0xffff5afc>

2009222c <__lshift>:
2009222c:	defff904 	addi	sp,sp,-28
20092230:	dd000415 	stw	r20,16(sp)
20092234:	dcc00315 	stw	r19,12(sp)
20092238:	3029d17a 	srai	r20,r6,5
2009223c:	2cc00417 	ldw	r19,16(r5)
20092240:	28800217 	ldw	r2,8(r5)
20092244:	dd400515 	stw	r21,20(sp)
20092248:	a4e7883a 	add	r19,r20,r19
2009224c:	dc800215 	stw	r18,8(sp)
20092250:	dc400115 	stw	r17,4(sp)
20092254:	dc000015 	stw	r16,0(sp)
20092258:	dfc00615 	stw	ra,24(sp)
2009225c:	9c000044 	addi	r16,r19,1
20092260:	2823883a 	mov	r17,r5
20092264:	302b883a 	mov	r21,r6
20092268:	2025883a 	mov	r18,r4
2009226c:	29400117 	ldw	r5,4(r5)
20092270:	1400030e 	bge	r2,r16,20092280 <__lshift+0x54>
20092274:	1085883a 	add	r2,r2,r2
20092278:	29400044 	addi	r5,r5,1
2009227c:	143ffd16 	blt	r2,r16,20092274 <__flash_rwdata_start+0xffff5c2c>
20092280:	9009883a 	mov	r4,r18
20092284:	0091aa80 	call	20091aa8 <_Balloc>
20092288:	11c00504 	addi	r7,r2,20
2009228c:	0500090e 	bge	zero,r20,200922b4 <__lshift+0x88>
20092290:	3811883a 	mov	r8,r7
20092294:	0007883a 	mov	r3,zero
20092298:	40000015 	stw	zero,0(r8)
2009229c:	18c00044 	addi	r3,r3,1
200922a0:	42000104 	addi	r8,r8,4
200922a4:	1d3ffc1e 	bne	r3,r20,20092298 <__flash_rwdata_start+0xffff5c50>
200922a8:	18c7883a 	add	r3,r3,r3
200922ac:	18c7883a 	add	r3,r3,r3
200922b0:	38cf883a 	add	r7,r7,r3
200922b4:	89000417 	ldw	r4,16(r17)
200922b8:	88c00504 	addi	r3,r17,20
200922bc:	a98007cc 	andi	r6,r21,31
200922c0:	2109883a 	add	r4,r4,r4
200922c4:	2109883a 	add	r4,r4,r4
200922c8:	1909883a 	add	r4,r3,r4
200922cc:	30002326 	beq	r6,zero,2009235c <__lshift+0x130>
200922d0:	01400804 	movi	r5,32
200922d4:	298bc83a 	sub	r5,r5,r6
200922d8:	0013883a 	mov	r9,zero
200922dc:	1a000017 	ldw	r8,0(r3)
200922e0:	3815883a 	mov	r10,r7
200922e4:	39c00104 	addi	r7,r7,4
200922e8:	4190983a 	sll	r8,r8,r6
200922ec:	18c00104 	addi	r3,r3,4
200922f0:	4a10b03a 	or	r8,r9,r8
200922f4:	3a3fff15 	stw	r8,-4(r7)
200922f8:	1a3fff17 	ldw	r8,-4(r3)
200922fc:	4152d83a 	srl	r9,r8,r5
20092300:	193ff636 	bltu	r3,r4,200922dc <__flash_rwdata_start+0xffff5c94>
20092304:	52400115 	stw	r9,4(r10)
20092308:	48001a1e 	bne	r9,zero,20092374 <__lshift+0x148>
2009230c:	843fffc4 	addi	r16,r16,-1
20092310:	14000415 	stw	r16,16(r2)
20092314:	88000826 	beq	r17,zero,20092338 <__lshift+0x10c>
20092318:	89000117 	ldw	r4,4(r17)
2009231c:	90c01317 	ldw	r3,76(r18)
20092320:	2109883a 	add	r4,r4,r4
20092324:	2109883a 	add	r4,r4,r4
20092328:	1907883a 	add	r3,r3,r4
2009232c:	19000017 	ldw	r4,0(r3)
20092330:	89000015 	stw	r4,0(r17)
20092334:	1c400015 	stw	r17,0(r3)
20092338:	dfc00617 	ldw	ra,24(sp)
2009233c:	dd400517 	ldw	r21,20(sp)
20092340:	dd000417 	ldw	r20,16(sp)
20092344:	dcc00317 	ldw	r19,12(sp)
20092348:	dc800217 	ldw	r18,8(sp)
2009234c:	dc400117 	ldw	r17,4(sp)
20092350:	dc000017 	ldw	r16,0(sp)
20092354:	dec00704 	addi	sp,sp,28
20092358:	f800283a 	ret
2009235c:	19400017 	ldw	r5,0(r3)
20092360:	39c00104 	addi	r7,r7,4
20092364:	18c00104 	addi	r3,r3,4
20092368:	397fff15 	stw	r5,-4(r7)
2009236c:	193ffb36 	bltu	r3,r4,2009235c <__flash_rwdata_start+0xffff5d14>
20092370:	003fe606 	br	2009230c <__flash_rwdata_start+0xffff5cc4>
20092374:	9c000084 	addi	r16,r19,2
20092378:	003fe406 	br	2009230c <__flash_rwdata_start+0xffff5cc4>

2009237c <__mcmp>:
2009237c:	20800417 	ldw	r2,16(r4)
20092380:	28c00417 	ldw	r3,16(r5)
20092384:	10c5c83a 	sub	r2,r2,r3
20092388:	1000111e 	bne	r2,zero,200923d0 <__mcmp+0x54>
2009238c:	18c7883a 	add	r3,r3,r3
20092390:	18c7883a 	add	r3,r3,r3
20092394:	21000504 	addi	r4,r4,20
20092398:	29400504 	addi	r5,r5,20
2009239c:	20c5883a 	add	r2,r4,r3
200923a0:	28cb883a 	add	r5,r5,r3
200923a4:	00000106 	br	200923ac <__mcmp+0x30>
200923a8:	20800a2e 	bgeu	r4,r2,200923d4 <__mcmp+0x58>
200923ac:	10bfff04 	addi	r2,r2,-4
200923b0:	297fff04 	addi	r5,r5,-4
200923b4:	11800017 	ldw	r6,0(r2)
200923b8:	28c00017 	ldw	r3,0(r5)
200923bc:	30fffa26 	beq	r6,r3,200923a8 <__flash_rwdata_start+0xffff5d60>
200923c0:	30c00236 	bltu	r6,r3,200923cc <__mcmp+0x50>
200923c4:	00800044 	movi	r2,1
200923c8:	f800283a 	ret
200923cc:	00bfffc4 	movi	r2,-1
200923d0:	f800283a 	ret
200923d4:	0005883a 	mov	r2,zero
200923d8:	f800283a 	ret

200923dc <__mdiff>:
200923dc:	defffb04 	addi	sp,sp,-20
200923e0:	dc000015 	stw	r16,0(sp)
200923e4:	2821883a 	mov	r16,r5
200923e8:	dcc00315 	stw	r19,12(sp)
200923ec:	300b883a 	mov	r5,r6
200923f0:	2027883a 	mov	r19,r4
200923f4:	8009883a 	mov	r4,r16
200923f8:	dc800215 	stw	r18,8(sp)
200923fc:	dfc00415 	stw	ra,16(sp)
20092400:	dc400115 	stw	r17,4(sp)
20092404:	3025883a 	mov	r18,r6
20092408:	009237c0 	call	2009237c <__mcmp>
2009240c:	10005226 	beq	r2,zero,20092558 <__mdiff+0x17c>
20092410:	10004c16 	blt	r2,zero,20092544 <__mdiff+0x168>
20092414:	0023883a 	mov	r17,zero
20092418:	81400117 	ldw	r5,4(r16)
2009241c:	9809883a 	mov	r4,r19
20092420:	0091aa80 	call	20091aa8 <_Balloc>
20092424:	83400417 	ldw	r13,16(r16)
20092428:	93800417 	ldw	r14,16(r18)
2009242c:	81000504 	addi	r4,r16,20
20092430:	6b59883a 	add	r12,r13,r13
20092434:	739d883a 	add	r14,r14,r14
20092438:	6319883a 	add	r12,r12,r12
2009243c:	91800504 	addi	r6,r18,20
20092440:	739d883a 	add	r14,r14,r14
20092444:	14400315 	stw	r17,12(r2)
20092448:	2319883a 	add	r12,r4,r12
2009244c:	339d883a 	add	r14,r6,r14
20092450:	12400504 	addi	r9,r2,20
20092454:	0007883a 	mov	r3,zero
20092458:	22000017 	ldw	r8,0(r4)
2009245c:	32800017 	ldw	r10,0(r6)
20092460:	4ac00104 	addi	r11,r9,4
20092464:	41ffffcc 	andi	r7,r8,65535
20092468:	38c7883a 	add	r3,r7,r3
2009246c:	51ffffcc 	andi	r7,r10,65535
20092470:	19cfc83a 	sub	r7,r3,r7
20092474:	4010d43a 	srli	r8,r8,16
20092478:	5014d43a 	srli	r10,r10,16
2009247c:	3807d43a 	srai	r3,r7,16
20092480:	39ffffcc 	andi	r7,r7,65535
20092484:	4291c83a 	sub	r8,r8,r10
20092488:	40c7883a 	add	r3,r8,r3
2009248c:	1810943a 	slli	r8,r3,16
20092490:	31800104 	addi	r6,r6,4
20092494:	21000104 	addi	r4,r4,4
20092498:	41ceb03a 	or	r7,r8,r7
2009249c:	49c00015 	stw	r7,0(r9)
200924a0:	1807d43a 	srai	r3,r3,16
200924a4:	580b883a 	mov	r5,r11
200924a8:	5813883a 	mov	r9,r11
200924ac:	33bfea36 	bltu	r6,r14,20092458 <__flash_rwdata_start+0xffff5e10>
200924b0:	2011883a 	mov	r8,r4
200924b4:	2300152e 	bgeu	r4,r12,2009250c <__mdiff+0x130>
200924b8:	21400017 	ldw	r5,0(r4)
200924bc:	4a400104 	addi	r9,r9,4
200924c0:	21000104 	addi	r4,r4,4
200924c4:	29ffffcc 	andi	r7,r5,65535
200924c8:	38c7883a 	add	r3,r7,r3
200924cc:	280ad43a 	srli	r5,r5,16
200924d0:	180dd43a 	srai	r6,r3,16
200924d4:	19ffffcc 	andi	r7,r3,65535
200924d8:	3147883a 	add	r3,r6,r5
200924dc:	180a943a 	slli	r5,r3,16
200924e0:	1807d43a 	srai	r3,r3,16
200924e4:	29ceb03a 	or	r7,r5,r7
200924e8:	49ffff15 	stw	r7,-4(r9)
200924ec:	233ff236 	bltu	r4,r12,200924b8 <__flash_rwdata_start+0xffff5e70>
200924f0:	0206303a 	nor	r3,zero,r8
200924f4:	1b07883a 	add	r3,r3,r12
200924f8:	1806d0ba 	srli	r3,r3,2
200924fc:	18c00044 	addi	r3,r3,1
20092500:	18c7883a 	add	r3,r3,r3
20092504:	18c7883a 	add	r3,r3,r3
20092508:	58cb883a 	add	r5,r11,r3
2009250c:	28ffff04 	addi	r3,r5,-4
20092510:	3800041e 	bne	r7,zero,20092524 <__mdiff+0x148>
20092514:	18ffff04 	addi	r3,r3,-4
20092518:	19000017 	ldw	r4,0(r3)
2009251c:	6b7fffc4 	addi	r13,r13,-1
20092520:	203ffc26 	beq	r4,zero,20092514 <__flash_rwdata_start+0xffff5ecc>
20092524:	13400415 	stw	r13,16(r2)
20092528:	dfc00417 	ldw	ra,16(sp)
2009252c:	dcc00317 	ldw	r19,12(sp)
20092530:	dc800217 	ldw	r18,8(sp)
20092534:	dc400117 	ldw	r17,4(sp)
20092538:	dc000017 	ldw	r16,0(sp)
2009253c:	dec00504 	addi	sp,sp,20
20092540:	f800283a 	ret
20092544:	8005883a 	mov	r2,r16
20092548:	04400044 	movi	r17,1
2009254c:	9021883a 	mov	r16,r18
20092550:	1025883a 	mov	r18,r2
20092554:	003fb006 	br	20092418 <__flash_rwdata_start+0xffff5dd0>
20092558:	9809883a 	mov	r4,r19
2009255c:	000b883a 	mov	r5,zero
20092560:	0091aa80 	call	20091aa8 <_Balloc>
20092564:	00c00044 	movi	r3,1
20092568:	10c00415 	stw	r3,16(r2)
2009256c:	10000515 	stw	zero,20(r2)
20092570:	003fed06 	br	20092528 <__flash_rwdata_start+0xffff5ee0>

20092574 <__ulp>:
20092574:	295ffc2c 	andhi	r5,r5,32752
20092578:	00bf3034 	movhi	r2,64704
2009257c:	2887883a 	add	r3,r5,r2
20092580:	00c0020e 	bge	zero,r3,2009258c <__ulp+0x18>
20092584:	0005883a 	mov	r2,zero
20092588:	f800283a 	ret
2009258c:	00c7c83a 	sub	r3,zero,r3
20092590:	180bd53a 	srai	r5,r3,20
20092594:	008004c4 	movi	r2,19
20092598:	11400a0e 	bge	r2,r5,200925c4 <__ulp+0x50>
2009259c:	00800c84 	movi	r2,50
200925a0:	0007883a 	mov	r3,zero
200925a4:	11400516 	blt	r2,r5,200925bc <__ulp+0x48>
200925a8:	00800cc4 	movi	r2,51
200925ac:	114bc83a 	sub	r5,r2,r5
200925b0:	00800044 	movi	r2,1
200925b4:	1144983a 	sll	r2,r2,r5
200925b8:	f800283a 	ret
200925bc:	00800044 	movi	r2,1
200925c0:	f800283a 	ret
200925c4:	00800234 	movhi	r2,8
200925c8:	1147d83a 	sra	r3,r2,r5
200925cc:	0005883a 	mov	r2,zero
200925d0:	f800283a 	ret

200925d4 <__b2d>:
200925d4:	defffa04 	addi	sp,sp,-24
200925d8:	dc000015 	stw	r16,0(sp)
200925dc:	24000417 	ldw	r16,16(r4)
200925e0:	dc400115 	stw	r17,4(sp)
200925e4:	24400504 	addi	r17,r4,20
200925e8:	8421883a 	add	r16,r16,r16
200925ec:	8421883a 	add	r16,r16,r16
200925f0:	8c21883a 	add	r16,r17,r16
200925f4:	dc800215 	stw	r18,8(sp)
200925f8:	84bfff17 	ldw	r18,-4(r16)
200925fc:	dd000415 	stw	r20,16(sp)
20092600:	dcc00315 	stw	r19,12(sp)
20092604:	9009883a 	mov	r4,r18
20092608:	2829883a 	mov	r20,r5
2009260c:	dfc00515 	stw	ra,20(sp)
20092610:	0091d9c0 	call	20091d9c <__hi0bits>
20092614:	00c00804 	movi	r3,32
20092618:	1887c83a 	sub	r3,r3,r2
2009261c:	a0c00015 	stw	r3,0(r20)
20092620:	00c00284 	movi	r3,10
20092624:	84ffff04 	addi	r19,r16,-4
20092628:	18801216 	blt	r3,r2,20092674 <__b2d+0xa0>
2009262c:	014002c4 	movi	r5,11
20092630:	2889c83a 	sub	r4,r5,r2
20092634:	9106d83a 	srl	r3,r18,r4
20092638:	18cffc34 	orhi	r3,r3,16368
2009263c:	8cc0282e 	bgeu	r17,r19,200926e0 <__b2d+0x10c>
20092640:	817ffe17 	ldw	r5,-8(r16)
20092644:	290ad83a 	srl	r5,r5,r4
20092648:	10800544 	addi	r2,r2,21
2009264c:	9084983a 	sll	r2,r18,r2
20092650:	2884b03a 	or	r2,r5,r2
20092654:	dfc00517 	ldw	ra,20(sp)
20092658:	dd000417 	ldw	r20,16(sp)
2009265c:	dcc00317 	ldw	r19,12(sp)
20092660:	dc800217 	ldw	r18,8(sp)
20092664:	dc400117 	ldw	r17,4(sp)
20092668:	dc000017 	ldw	r16,0(sp)
2009266c:	dec00604 	addi	sp,sp,24
20092670:	f800283a 	ret
20092674:	113ffd44 	addi	r4,r2,-11
20092678:	8cc00f2e 	bgeu	r17,r19,200926b8 <__b2d+0xe4>
2009267c:	81bffe04 	addi	r6,r16,-8
20092680:	817ffe17 	ldw	r5,-8(r16)
20092684:	20001326 	beq	r4,zero,200926d4 <__b2d+0x100>
20092688:	00c00ac4 	movi	r3,43
2009268c:	1885c83a 	sub	r2,r3,r2
20092690:	2886d83a 	srl	r3,r5,r2
20092694:	9124983a 	sll	r18,r18,r4
20092698:	90e4b03a 	or	r18,r18,r3
2009269c:	90cffc34 	orhi	r3,r18,16368
200926a0:	8980112e 	bgeu	r17,r6,200926e8 <__b2d+0x114>
200926a4:	81bffd17 	ldw	r6,-12(r16)
200926a8:	308cd83a 	srl	r6,r6,r2
200926ac:	2904983a 	sll	r2,r5,r4
200926b0:	1184b03a 	or	r2,r2,r6
200926b4:	003fe706 	br	20092654 <__flash_rwdata_start+0xffff600c>
200926b8:	20000526 	beq	r4,zero,200926d0 <__b2d+0xfc>
200926bc:	9124983a 	sll	r18,r18,r4
200926c0:	000d883a 	mov	r6,zero
200926c4:	000b883a 	mov	r5,zero
200926c8:	90cffc34 	orhi	r3,r18,16368
200926cc:	003ff706 	br	200926ac <__flash_rwdata_start+0xffff6064>
200926d0:	000b883a 	mov	r5,zero
200926d4:	90cffc34 	orhi	r3,r18,16368
200926d8:	2805883a 	mov	r2,r5
200926dc:	003fdd06 	br	20092654 <__flash_rwdata_start+0xffff600c>
200926e0:	000b883a 	mov	r5,zero
200926e4:	003fd806 	br	20092648 <__flash_rwdata_start+0xffff6000>
200926e8:	000d883a 	mov	r6,zero
200926ec:	003fef06 	br	200926ac <__flash_rwdata_start+0xffff6064>

200926f0 <__d2b>:
200926f0:	defff704 	addi	sp,sp,-36
200926f4:	dc000215 	stw	r16,8(sp)
200926f8:	3021883a 	mov	r16,r6
200926fc:	dc400315 	stw	r17,12(sp)
20092700:	8022907a 	slli	r17,r16,1
20092704:	dd400715 	stw	r21,28(sp)
20092708:	282b883a 	mov	r21,r5
2009270c:	01400044 	movi	r5,1
20092710:	dd000615 	stw	r20,24(sp)
20092714:	dcc00515 	stw	r19,20(sp)
20092718:	dc800415 	stw	r18,16(sp)
2009271c:	dfc00815 	stw	ra,32(sp)
20092720:	3829883a 	mov	r20,r7
20092724:	dc800917 	ldw	r18,36(sp)
20092728:	8822d57a 	srli	r17,r17,21
2009272c:	0091aa80 	call	20091aa8 <_Balloc>
20092730:	1027883a 	mov	r19,r2
20092734:	00800434 	movhi	r2,16
20092738:	10bfffc4 	addi	r2,r2,-1
2009273c:	808c703a 	and	r6,r16,r2
20092740:	88000126 	beq	r17,zero,20092748 <__d2b+0x58>
20092744:	31800434 	orhi	r6,r6,16
20092748:	d9800015 	stw	r6,0(sp)
2009274c:	a8001f26 	beq	r21,zero,200927cc <__d2b+0xdc>
20092750:	d9000104 	addi	r4,sp,4
20092754:	dd400115 	stw	r21,4(sp)
20092758:	0091e040 	call	20091e04 <__lo0bits>
2009275c:	d8c00017 	ldw	r3,0(sp)
20092760:	1000291e 	bne	r2,zero,20092808 <__d2b+0x118>
20092764:	d9000117 	ldw	r4,4(sp)
20092768:	99000515 	stw	r4,20(r19)
2009276c:	1820c03a 	cmpne	r16,r3,zero
20092770:	84000044 	addi	r16,r16,1
20092774:	98c00615 	stw	r3,24(r19)
20092778:	9c000415 	stw	r16,16(r19)
2009277c:	88001b1e 	bne	r17,zero,200927ec <__d2b+0xfc>
20092780:	800690ba 	slli	r3,r16,2
20092784:	10bef384 	addi	r2,r2,-1074
20092788:	a0800015 	stw	r2,0(r20)
2009278c:	98c5883a 	add	r2,r19,r3
20092790:	11000417 	ldw	r4,16(r2)
20092794:	8020917a 	slli	r16,r16,5
20092798:	0091d9c0 	call	20091d9c <__hi0bits>
2009279c:	8085c83a 	sub	r2,r16,r2
200927a0:	90800015 	stw	r2,0(r18)
200927a4:	9805883a 	mov	r2,r19
200927a8:	dfc00817 	ldw	ra,32(sp)
200927ac:	dd400717 	ldw	r21,28(sp)
200927b0:	dd000617 	ldw	r20,24(sp)
200927b4:	dcc00517 	ldw	r19,20(sp)
200927b8:	dc800417 	ldw	r18,16(sp)
200927bc:	dc400317 	ldw	r17,12(sp)
200927c0:	dc000217 	ldw	r16,8(sp)
200927c4:	dec00904 	addi	sp,sp,36
200927c8:	f800283a 	ret
200927cc:	d809883a 	mov	r4,sp
200927d0:	0091e040 	call	20091e04 <__lo0bits>
200927d4:	d8c00017 	ldw	r3,0(sp)
200927d8:	04000044 	movi	r16,1
200927dc:	9c000415 	stw	r16,16(r19)
200927e0:	98c00515 	stw	r3,20(r19)
200927e4:	10800804 	addi	r2,r2,32
200927e8:	883fe526 	beq	r17,zero,20092780 <__flash_rwdata_start+0xffff6138>
200927ec:	8c7ef344 	addi	r17,r17,-1075
200927f0:	88a3883a 	add	r17,r17,r2
200927f4:	00c00d44 	movi	r3,53
200927f8:	a4400015 	stw	r17,0(r20)
200927fc:	1885c83a 	sub	r2,r3,r2
20092800:	90800015 	stw	r2,0(r18)
20092804:	003fe706 	br	200927a4 <__flash_rwdata_start+0xffff615c>
20092808:	01000804 	movi	r4,32
2009280c:	2089c83a 	sub	r4,r4,r2
20092810:	1908983a 	sll	r4,r3,r4
20092814:	d9400117 	ldw	r5,4(sp)
20092818:	1886d83a 	srl	r3,r3,r2
2009281c:	2148b03a 	or	r4,r4,r5
20092820:	99000515 	stw	r4,20(r19)
20092824:	d8c00015 	stw	r3,0(sp)
20092828:	003fd006 	br	2009276c <__flash_rwdata_start+0xffff6124>

2009282c <__ratio>:
2009282c:	defff904 	addi	sp,sp,-28
20092830:	dc400315 	stw	r17,12(sp)
20092834:	2823883a 	mov	r17,r5
20092838:	d9400104 	addi	r5,sp,4
2009283c:	dfc00615 	stw	ra,24(sp)
20092840:	dcc00515 	stw	r19,20(sp)
20092844:	dc800415 	stw	r18,16(sp)
20092848:	2027883a 	mov	r19,r4
2009284c:	dc000215 	stw	r16,8(sp)
20092850:	00925d40 	call	200925d4 <__b2d>
20092854:	8809883a 	mov	r4,r17
20092858:	d80b883a 	mov	r5,sp
2009285c:	1025883a 	mov	r18,r2
20092860:	1821883a 	mov	r16,r3
20092864:	00925d40 	call	200925d4 <__b2d>
20092868:	8a400417 	ldw	r9,16(r17)
2009286c:	9a000417 	ldw	r8,16(r19)
20092870:	100d883a 	mov	r6,r2
20092874:	d8800017 	ldw	r2,0(sp)
20092878:	4251c83a 	sub	r8,r8,r9
2009287c:	4012917a 	slli	r9,r8,5
20092880:	da000117 	ldw	r8,4(sp)
20092884:	4091c83a 	sub	r8,r8,r2
20092888:	4251883a 	add	r8,r8,r9
2009288c:	02000d0e 	bge	zero,r8,200928c4 <__ratio+0x98>
20092890:	4010953a 	slli	r8,r8,20
20092894:	4421883a 	add	r16,r8,r16
20092898:	9009883a 	mov	r4,r18
2009289c:	800b883a 	mov	r5,r16
200928a0:	180f883a 	mov	r7,r3
200928a4:	00879c40 	call	200879c4 <__divdf3>
200928a8:	dfc00617 	ldw	ra,24(sp)
200928ac:	dcc00517 	ldw	r19,20(sp)
200928b0:	dc800417 	ldw	r18,16(sp)
200928b4:	dc400317 	ldw	r17,12(sp)
200928b8:	dc000217 	ldw	r16,8(sp)
200928bc:	dec00704 	addi	sp,sp,28
200928c0:	f800283a 	ret
200928c4:	4010953a 	slli	r8,r8,20
200928c8:	1a07c83a 	sub	r3,r3,r8
200928cc:	003ff206 	br	20092898 <__flash_rwdata_start+0xffff6250>

200928d0 <_mprec_log10>:
200928d0:	defffe04 	addi	sp,sp,-8
200928d4:	dc000015 	stw	r16,0(sp)
200928d8:	dfc00115 	stw	ra,4(sp)
200928dc:	008005c4 	movi	r2,23
200928e0:	2021883a 	mov	r16,r4
200928e4:	11000d0e 	bge	r2,r4,2009291c <_mprec_log10+0x4c>
200928e8:	0005883a 	mov	r2,zero
200928ec:	00cffc34 	movhi	r3,16368
200928f0:	843fffc4 	addi	r16,r16,-1
200928f4:	1009883a 	mov	r4,r2
200928f8:	180b883a 	mov	r5,r3
200928fc:	000d883a 	mov	r6,zero
20092900:	01d00934 	movhi	r7,16420
20092904:	00882900 	call	20088290 <__muldf3>
20092908:	803ff91e 	bne	r16,zero,200928f0 <__flash_rwdata_start+0xffff62a8>
2009290c:	dfc00117 	ldw	ra,4(sp)
20092910:	dc000017 	ldw	r16,0(sp)
20092914:	dec00204 	addi	sp,sp,8
20092918:	f800283a 	ret
2009291c:	202090fa 	slli	r16,r4,3
20092920:	00800034 	movhi	r2,0
20092924:	1081ba04 	addi	r2,r2,1768
20092928:	1421883a 	add	r16,r2,r16
2009292c:	80800017 	ldw	r2,0(r16)
20092930:	80c00117 	ldw	r3,4(r16)
20092934:	dfc00117 	ldw	ra,4(sp)
20092938:	dc000017 	ldw	r16,0(sp)
2009293c:	dec00204 	addi	sp,sp,8
20092940:	f800283a 	ret

20092944 <__copybits>:
20092944:	297fffc4 	addi	r5,r5,-1
20092948:	280fd17a 	srai	r7,r5,5
2009294c:	30c00417 	ldw	r3,16(r6)
20092950:	30800504 	addi	r2,r6,20
20092954:	39c00044 	addi	r7,r7,1
20092958:	18c7883a 	add	r3,r3,r3
2009295c:	39cf883a 	add	r7,r7,r7
20092960:	18c7883a 	add	r3,r3,r3
20092964:	39cf883a 	add	r7,r7,r7
20092968:	10c7883a 	add	r3,r2,r3
2009296c:	21cf883a 	add	r7,r4,r7
20092970:	10c00d2e 	bgeu	r2,r3,200929a8 <__copybits+0x64>
20092974:	200b883a 	mov	r5,r4
20092978:	12000017 	ldw	r8,0(r2)
2009297c:	29400104 	addi	r5,r5,4
20092980:	10800104 	addi	r2,r2,4
20092984:	2a3fff15 	stw	r8,-4(r5)
20092988:	10fffb36 	bltu	r2,r3,20092978 <__flash_rwdata_start+0xffff6330>
2009298c:	1985c83a 	sub	r2,r3,r6
20092990:	10bffac4 	addi	r2,r2,-21
20092994:	1004d0ba 	srli	r2,r2,2
20092998:	10800044 	addi	r2,r2,1
2009299c:	1085883a 	add	r2,r2,r2
200929a0:	1085883a 	add	r2,r2,r2
200929a4:	2089883a 	add	r4,r4,r2
200929a8:	21c0032e 	bgeu	r4,r7,200929b8 <__copybits+0x74>
200929ac:	20000015 	stw	zero,0(r4)
200929b0:	21000104 	addi	r4,r4,4
200929b4:	21fffd36 	bltu	r4,r7,200929ac <__flash_rwdata_start+0xffff6364>
200929b8:	f800283a 	ret

200929bc <__any_on>:
200929bc:	20c00417 	ldw	r3,16(r4)
200929c0:	2805d17a 	srai	r2,r5,5
200929c4:	21000504 	addi	r4,r4,20
200929c8:	18800d0e 	bge	r3,r2,20092a00 <__any_on+0x44>
200929cc:	18c7883a 	add	r3,r3,r3
200929d0:	18c7883a 	add	r3,r3,r3
200929d4:	20c7883a 	add	r3,r4,r3
200929d8:	20c0192e 	bgeu	r4,r3,20092a40 <__any_on+0x84>
200929dc:	18bfff17 	ldw	r2,-4(r3)
200929e0:	18ffff04 	addi	r3,r3,-4
200929e4:	1000041e 	bne	r2,zero,200929f8 <__any_on+0x3c>
200929e8:	20c0142e 	bgeu	r4,r3,20092a3c <__any_on+0x80>
200929ec:	18ffff04 	addi	r3,r3,-4
200929f0:	19400017 	ldw	r5,0(r3)
200929f4:	283ffc26 	beq	r5,zero,200929e8 <__flash_rwdata_start+0xffff63a0>
200929f8:	00800044 	movi	r2,1
200929fc:	f800283a 	ret
20092a00:	10c00a0e 	bge	r2,r3,20092a2c <__any_on+0x70>
20092a04:	1085883a 	add	r2,r2,r2
20092a08:	1085883a 	add	r2,r2,r2
20092a0c:	294007cc 	andi	r5,r5,31
20092a10:	2087883a 	add	r3,r4,r2
20092a14:	283ff026 	beq	r5,zero,200929d8 <__flash_rwdata_start+0xffff6390>
20092a18:	19800017 	ldw	r6,0(r3)
20092a1c:	3144d83a 	srl	r2,r6,r5
20092a20:	114a983a 	sll	r5,r2,r5
20092a24:	29bff41e 	bne	r5,r6,200929f8 <__flash_rwdata_start+0xffff63b0>
20092a28:	003feb06 	br	200929d8 <__flash_rwdata_start+0xffff6390>
20092a2c:	1085883a 	add	r2,r2,r2
20092a30:	1085883a 	add	r2,r2,r2
20092a34:	2087883a 	add	r3,r4,r2
20092a38:	003fe706 	br	200929d8 <__flash_rwdata_start+0xffff6390>
20092a3c:	f800283a 	ret
20092a40:	0005883a 	mov	r2,zero
20092a44:	f800283a 	ret

20092a48 <_putc_r>:
20092a48:	defffc04 	addi	sp,sp,-16
20092a4c:	dc000215 	stw	r16,8(sp)
20092a50:	dfc00315 	stw	ra,12(sp)
20092a54:	2021883a 	mov	r16,r4
20092a58:	20000226 	beq	r4,zero,20092a64 <_putc_r+0x1c>
20092a5c:	20800e17 	ldw	r2,56(r4)
20092a60:	10001b26 	beq	r2,zero,20092ad0 <_putc_r+0x88>
20092a64:	30800217 	ldw	r2,8(r6)
20092a68:	10bfffc4 	addi	r2,r2,-1
20092a6c:	30800215 	stw	r2,8(r6)
20092a70:	10000a16 	blt	r2,zero,20092a9c <_putc_r+0x54>
20092a74:	30800017 	ldw	r2,0(r6)
20092a78:	11400005 	stb	r5,0(r2)
20092a7c:	30800017 	ldw	r2,0(r6)
20092a80:	10c00044 	addi	r3,r2,1
20092a84:	30c00015 	stw	r3,0(r6)
20092a88:	10800003 	ldbu	r2,0(r2)
20092a8c:	dfc00317 	ldw	ra,12(sp)
20092a90:	dc000217 	ldw	r16,8(sp)
20092a94:	dec00404 	addi	sp,sp,16
20092a98:	f800283a 	ret
20092a9c:	30c00617 	ldw	r3,24(r6)
20092aa0:	10c00616 	blt	r2,r3,20092abc <_putc_r+0x74>
20092aa4:	30800017 	ldw	r2,0(r6)
20092aa8:	00c00284 	movi	r3,10
20092aac:	11400005 	stb	r5,0(r2)
20092ab0:	30800017 	ldw	r2,0(r6)
20092ab4:	11400003 	ldbu	r5,0(r2)
20092ab8:	28fff11e 	bne	r5,r3,20092a80 <__flash_rwdata_start+0xffff6438>
20092abc:	8009883a 	mov	r4,r16
20092ac0:	dfc00317 	ldw	ra,12(sp)
20092ac4:	dc000217 	ldw	r16,8(sp)
20092ac8:	dec00404 	addi	sp,sp,16
20092acc:	0095af81 	jmpi	20095af8 <__swbuf_r>
20092ad0:	d9400015 	stw	r5,0(sp)
20092ad4:	d9800115 	stw	r6,4(sp)
20092ad8:	0090b200 	call	20090b20 <__sinit>
20092adc:	d9800117 	ldw	r6,4(sp)
20092ae0:	d9400017 	ldw	r5,0(sp)
20092ae4:	003fdf06 	br	20092a64 <__flash_rwdata_start+0xffff641c>

20092ae8 <putc>:
20092ae8:	00800034 	movhi	r2,0
20092aec:	defffc04 	addi	sp,sp,-16
20092af0:	108a1404 	addi	r2,r2,10320
20092af4:	dc400115 	stw	r17,4(sp)
20092af8:	14400017 	ldw	r17,0(r2)
20092afc:	dc800215 	stw	r18,8(sp)
20092b00:	dc000015 	stw	r16,0(sp)
20092b04:	dfc00315 	stw	ra,12(sp)
20092b08:	2025883a 	mov	r18,r4
20092b0c:	2821883a 	mov	r16,r5
20092b10:	88000226 	beq	r17,zero,20092b1c <putc+0x34>
20092b14:	88800e17 	ldw	r2,56(r17)
20092b18:	10001a26 	beq	r2,zero,20092b84 <putc+0x9c>
20092b1c:	80800217 	ldw	r2,8(r16)
20092b20:	10bfffc4 	addi	r2,r2,-1
20092b24:	80800215 	stw	r2,8(r16)
20092b28:	10000c16 	blt	r2,zero,20092b5c <putc+0x74>
20092b2c:	80800017 	ldw	r2,0(r16)
20092b30:	14800005 	stb	r18,0(r2)
20092b34:	80800017 	ldw	r2,0(r16)
20092b38:	10c00044 	addi	r3,r2,1
20092b3c:	80c00015 	stw	r3,0(r16)
20092b40:	10800003 	ldbu	r2,0(r2)
20092b44:	dfc00317 	ldw	ra,12(sp)
20092b48:	dc800217 	ldw	r18,8(sp)
20092b4c:	dc400117 	ldw	r17,4(sp)
20092b50:	dc000017 	ldw	r16,0(sp)
20092b54:	dec00404 	addi	sp,sp,16
20092b58:	f800283a 	ret
20092b5c:	80c00617 	ldw	r3,24(r16)
20092b60:	10c00b16 	blt	r2,r3,20092b90 <putc+0xa8>
20092b64:	80800017 	ldw	r2,0(r16)
20092b68:	00c00284 	movi	r3,10
20092b6c:	14800005 	stb	r18,0(r2)
20092b70:	80800017 	ldw	r2,0(r16)
20092b74:	11400003 	ldbu	r5,0(r2)
20092b78:	28ffef1e 	bne	r5,r3,20092b38 <__flash_rwdata_start+0xffff64f0>
20092b7c:	8809883a 	mov	r4,r17
20092b80:	00000506 	br	20092b98 <putc+0xb0>
20092b84:	8809883a 	mov	r4,r17
20092b88:	0090b200 	call	20090b20 <__sinit>
20092b8c:	003fe306 	br	20092b1c <__flash_rwdata_start+0xffff64d4>
20092b90:	8809883a 	mov	r4,r17
20092b94:	900b883a 	mov	r5,r18
20092b98:	800d883a 	mov	r6,r16
20092b9c:	dfc00317 	ldw	ra,12(sp)
20092ba0:	dc800217 	ldw	r18,8(sp)
20092ba4:	dc400117 	ldw	r17,4(sp)
20092ba8:	dc000017 	ldw	r16,0(sp)
20092bac:	dec00404 	addi	sp,sp,16
20092bb0:	0095af81 	jmpi	20095af8 <__swbuf_r>

20092bb4 <_realloc_r>:
20092bb4:	defff604 	addi	sp,sp,-40
20092bb8:	dd000415 	stw	r20,16(sp)
20092bbc:	dc400115 	stw	r17,4(sp)
20092bc0:	dfc00915 	stw	ra,36(sp)
20092bc4:	df000815 	stw	fp,32(sp)
20092bc8:	ddc00715 	stw	r23,28(sp)
20092bcc:	dd800615 	stw	r22,24(sp)
20092bd0:	dd400515 	stw	r21,20(sp)
20092bd4:	dcc00315 	stw	r19,12(sp)
20092bd8:	dc800215 	stw	r18,8(sp)
20092bdc:	dc000015 	stw	r16,0(sp)
20092be0:	2829883a 	mov	r20,r5
20092be4:	3023883a 	mov	r17,r6
20092be8:	2800ad26 	beq	r5,zero,20092ea0 <_realloc_r+0x2ec>
20092bec:	2025883a 	mov	r18,r4
20092bf0:	009799c0 	call	2009799c <__malloc_lock>
20092bf4:	a0ffff17 	ldw	r3,-4(r20)
20092bf8:	043fff04 	movi	r16,-4
20092bfc:	890002c4 	addi	r4,r17,11
20092c00:	01c00584 	movi	r7,22
20092c04:	a57ffe04 	addi	r21,r20,-8
20092c08:	1c20703a 	and	r16,r3,r16
20092c0c:	39001d2e 	bgeu	r7,r4,20092c84 <_realloc_r+0xd0>
20092c10:	05bffe04 	movi	r22,-8
20092c14:	25ac703a 	and	r22,r4,r22
20092c18:	b00f883a 	mov	r7,r22
20092c1c:	b0006516 	blt	r22,zero,20092db4 <_realloc_r+0x200>
20092c20:	b4406436 	bltu	r22,r17,20092db4 <_realloc_r+0x200>
20092c24:	81c01a0e 	bge	r16,r7,20092c90 <_realloc_r+0xdc>
20092c28:	07000034 	movhi	fp,0
20092c2c:	e7045704 	addi	fp,fp,4444
20092c30:	e1400217 	ldw	r5,8(fp)
20092c34:	ac11883a 	add	r8,r21,r16
20092c38:	2a006226 	beq	r5,r8,20092dc4 <_realloc_r+0x210>
20092c3c:	41800117 	ldw	r6,4(r8)
20092c40:	027fff84 	movi	r9,-2
20092c44:	3252703a 	and	r9,r6,r9
20092c48:	4253883a 	add	r9,r8,r9
20092c4c:	49000117 	ldw	r4,4(r9)
20092c50:	2100004c 	andi	r4,r4,1
20092c54:	2000281e 	bne	r4,zero,20092cf8 <_realloc_r+0x144>
20092c58:	00bfff04 	movi	r2,-4
20092c5c:	3084703a 	and	r2,r6,r2
20092c60:	1409883a 	add	r4,r2,r16
20092c64:	21c05e16 	blt	r4,r7,20092de0 <_realloc_r+0x22c>
20092c68:	40800317 	ldw	r2,12(r8)
20092c6c:	41400217 	ldw	r5,8(r8)
20092c70:	a023883a 	mov	r17,r20
20092c74:	2021883a 	mov	r16,r4
20092c78:	28800315 	stw	r2,12(r5)
20092c7c:	11400215 	stw	r5,8(r2)
20092c80:	00000406 	br	20092c94 <_realloc_r+0xe0>
20092c84:	01c00404 	movi	r7,16
20092c88:	382d883a 	mov	r22,r7
20092c8c:	003fe406 	br	20092c20 <__flash_rwdata_start+0xffff65d8>
20092c90:	a023883a 	mov	r17,r20
20092c94:	858fc83a 	sub	r7,r16,r22
20092c98:	008003c4 	movi	r2,15
20092c9c:	18c0004c 	andi	r3,r3,1
20092ca0:	11c07236 	bltu	r2,r7,20092e6c <_realloc_r+0x2b8>
20092ca4:	1c06b03a 	or	r3,r3,r16
20092ca8:	a8c00115 	stw	r3,4(r21)
20092cac:	ac21883a 	add	r16,r21,r16
20092cb0:	80800117 	ldw	r2,4(r16)
20092cb4:	10800054 	ori	r2,r2,1
20092cb8:	80800115 	stw	r2,4(r16)
20092cbc:	9009883a 	mov	r4,r18
20092cc0:	00979bc0 	call	200979bc <__malloc_unlock>
20092cc4:	8805883a 	mov	r2,r17
20092cc8:	dfc00917 	ldw	ra,36(sp)
20092ccc:	df000817 	ldw	fp,32(sp)
20092cd0:	ddc00717 	ldw	r23,28(sp)
20092cd4:	dd800617 	ldw	r22,24(sp)
20092cd8:	dd400517 	ldw	r21,20(sp)
20092cdc:	dd000417 	ldw	r20,16(sp)
20092ce0:	dcc00317 	ldw	r19,12(sp)
20092ce4:	dc800217 	ldw	r18,8(sp)
20092ce8:	dc400117 	ldw	r17,4(sp)
20092cec:	dc000017 	ldw	r16,0(sp)
20092cf0:	dec00a04 	addi	sp,sp,40
20092cf4:	f800283a 	ret
20092cf8:	18c0004c 	andi	r3,r3,1
20092cfc:	1800081e 	bne	r3,zero,20092d20 <_realloc_r+0x16c>
20092d00:	a4fffe17 	ldw	r19,-8(r20)
20092d04:	00bfff04 	movi	r2,-4
20092d08:	ace7c83a 	sub	r19,r21,r19
20092d0c:	98c00117 	ldw	r3,4(r19)
20092d10:	1886703a 	and	r3,r3,r2
20092d14:	98000226 	beq	r19,zero,20092d20 <_realloc_r+0x16c>
20092d18:	1c2f883a 	add	r23,r3,r16
20092d1c:	b9c06d0e 	bge	r23,r7,20092ed4 <_realloc_r+0x320>
20092d20:	880b883a 	mov	r5,r17
20092d24:	9009883a 	mov	r4,r18
20092d28:	00899bc0 	call	200899bc <_malloc_r>
20092d2c:	1023883a 	mov	r17,r2
20092d30:	1000ef26 	beq	r2,zero,200930f0 <_realloc_r+0x53c>
20092d34:	a0ffff17 	ldw	r3,-4(r20)
20092d38:	113ffe04 	addi	r4,r2,-8
20092d3c:	00bfff84 	movi	r2,-2
20092d40:	1884703a 	and	r2,r3,r2
20092d44:	a885883a 	add	r2,r21,r2
20092d48:	2080bf26 	beq	r4,r2,20093048 <_realloc_r+0x494>
20092d4c:	81bfff04 	addi	r6,r16,-4
20092d50:	00800904 	movi	r2,36
20092d54:	11808936 	bltu	r2,r6,20092f7c <_realloc_r+0x3c8>
20092d58:	00c004c4 	movi	r3,19
20092d5c:	19806c2e 	bgeu	r3,r6,20092f10 <_realloc_r+0x35c>
20092d60:	a0c00017 	ldw	r3,0(r20)
20092d64:	88c00015 	stw	r3,0(r17)
20092d68:	a0c00117 	ldw	r3,4(r20)
20092d6c:	88c00115 	stw	r3,4(r17)
20092d70:	00c006c4 	movi	r3,27
20092d74:	1980ac36 	bltu	r3,r6,20093028 <_realloc_r+0x474>
20092d78:	88800204 	addi	r2,r17,8
20092d7c:	a0c00204 	addi	r3,r20,8
20092d80:	19000017 	ldw	r4,0(r3)
20092d84:	11000015 	stw	r4,0(r2)
20092d88:	19000117 	ldw	r4,4(r3)
20092d8c:	11000115 	stw	r4,4(r2)
20092d90:	18c00217 	ldw	r3,8(r3)
20092d94:	10c00215 	stw	r3,8(r2)
20092d98:	a00b883a 	mov	r5,r20
20092d9c:	9009883a 	mov	r4,r18
20092da0:	0090c940 	call	20090c94 <_free_r>
20092da4:	9009883a 	mov	r4,r18
20092da8:	00979bc0 	call	200979bc <__malloc_unlock>
20092dac:	8805883a 	mov	r2,r17
20092db0:	003fc506 	br	20092cc8 <__flash_rwdata_start+0xffff6680>
20092db4:	00800304 	movi	r2,12
20092db8:	90800015 	stw	r2,0(r18)
20092dbc:	0005883a 	mov	r2,zero
20092dc0:	003fc106 	br	20092cc8 <__flash_rwdata_start+0xffff6680>
20092dc4:	29800117 	ldw	r6,4(r5)
20092dc8:	00bfff04 	movi	r2,-4
20092dcc:	b1000404 	addi	r4,r22,16
20092dd0:	3084703a 	and	r2,r6,r2
20092dd4:	140d883a 	add	r6,r2,r16
20092dd8:	31005b0e 	bge	r6,r4,20092f48 <_realloc_r+0x394>
20092ddc:	2811883a 	mov	r8,r5
20092de0:	18c0004c 	andi	r3,r3,1
20092de4:	183fce1e 	bne	r3,zero,20092d20 <__flash_rwdata_start+0xffff66d8>
20092de8:	a4fffe17 	ldw	r19,-8(r20)
20092dec:	00ffff04 	movi	r3,-4
20092df0:	ace7c83a 	sub	r19,r21,r19
20092df4:	99000117 	ldw	r4,4(r19)
20092df8:	20c6703a 	and	r3,r4,r3
20092dfc:	403fc526 	beq	r8,zero,20092d14 <__flash_rwdata_start+0xffff66cc>
20092e00:	1c2f883a 	add	r23,r3,r16
20092e04:	b8af883a 	add	r23,r23,r2
20092e08:	41406026 	beq	r8,r5,20092f8c <_realloc_r+0x3d8>
20092e0c:	b9ffc116 	blt	r23,r7,20092d14 <__flash_rwdata_start+0xffff66cc>
20092e10:	40c00217 	ldw	r3,8(r8)
20092e14:	40800317 	ldw	r2,12(r8)
20092e18:	81bfff04 	addi	r6,r16,-4
20092e1c:	01000904 	movi	r4,36
20092e20:	18800315 	stw	r2,12(r3)
20092e24:	10c00215 	stw	r3,8(r2)
20092e28:	99400217 	ldw	r5,8(r19)
20092e2c:	98c00317 	ldw	r3,12(r19)
20092e30:	9c400204 	addi	r17,r19,8
20092e34:	28c00315 	stw	r3,12(r5)
20092e38:	19400215 	stw	r5,8(r3)
20092e3c:	21802d36 	bltu	r4,r6,20092ef4 <_realloc_r+0x340>
20092e40:	008004c4 	movi	r2,19
20092e44:	1180352e 	bgeu	r2,r6,20092f1c <_realloc_r+0x368>
20092e48:	a0800017 	ldw	r2,0(r20)
20092e4c:	98800215 	stw	r2,8(r19)
20092e50:	a0800117 	ldw	r2,4(r20)
20092e54:	98800315 	stw	r2,12(r19)
20092e58:	008006c4 	movi	r2,27
20092e5c:	11808036 	bltu	r2,r6,20093060 <_realloc_r+0x4ac>
20092e60:	98c00404 	addi	r3,r19,16
20092e64:	a5000204 	addi	r20,r20,8
20092e68:	00002d06 	br	20092f20 <_realloc_r+0x36c>
20092e6c:	1d86b03a 	or	r3,r3,r22
20092e70:	ad8b883a 	add	r5,r21,r22
20092e74:	a8c00115 	stw	r3,4(r21)
20092e78:	38800054 	ori	r2,r7,1
20092e7c:	28800115 	stw	r2,4(r5)
20092e80:	29cf883a 	add	r7,r5,r7
20092e84:	38800117 	ldw	r2,4(r7)
20092e88:	9009883a 	mov	r4,r18
20092e8c:	29400204 	addi	r5,r5,8
20092e90:	10800054 	ori	r2,r2,1
20092e94:	38800115 	stw	r2,4(r7)
20092e98:	0090c940 	call	20090c94 <_free_r>
20092e9c:	003f8706 	br	20092cbc <__flash_rwdata_start+0xffff6674>
20092ea0:	300b883a 	mov	r5,r6
20092ea4:	dfc00917 	ldw	ra,36(sp)
20092ea8:	df000817 	ldw	fp,32(sp)
20092eac:	ddc00717 	ldw	r23,28(sp)
20092eb0:	dd800617 	ldw	r22,24(sp)
20092eb4:	dd400517 	ldw	r21,20(sp)
20092eb8:	dd000417 	ldw	r20,16(sp)
20092ebc:	dcc00317 	ldw	r19,12(sp)
20092ec0:	dc800217 	ldw	r18,8(sp)
20092ec4:	dc400117 	ldw	r17,4(sp)
20092ec8:	dc000017 	ldw	r16,0(sp)
20092ecc:	dec00a04 	addi	sp,sp,40
20092ed0:	00899bc1 	jmpi	200899bc <_malloc_r>
20092ed4:	98800317 	ldw	r2,12(r19)
20092ed8:	98c00217 	ldw	r3,8(r19)
20092edc:	81bfff04 	addi	r6,r16,-4
20092ee0:	01000904 	movi	r4,36
20092ee4:	18800315 	stw	r2,12(r3)
20092ee8:	10c00215 	stw	r3,8(r2)
20092eec:	9c400204 	addi	r17,r19,8
20092ef0:	21bfd32e 	bgeu	r4,r6,20092e40 <__flash_rwdata_start+0xffff67f8>
20092ef4:	8809883a 	mov	r4,r17
20092ef8:	a00b883a 	mov	r5,r20
20092efc:	009194c0 	call	2009194c <memmove>
20092f00:	98c00117 	ldw	r3,4(r19)
20092f04:	b821883a 	mov	r16,r23
20092f08:	982b883a 	mov	r21,r19
20092f0c:	003f6106 	br	20092c94 <__flash_rwdata_start+0xffff664c>
20092f10:	8805883a 	mov	r2,r17
20092f14:	a007883a 	mov	r3,r20
20092f18:	003f9906 	br	20092d80 <__flash_rwdata_start+0xffff6738>
20092f1c:	8807883a 	mov	r3,r17
20092f20:	a0800017 	ldw	r2,0(r20)
20092f24:	b821883a 	mov	r16,r23
20092f28:	982b883a 	mov	r21,r19
20092f2c:	18800015 	stw	r2,0(r3)
20092f30:	a0800117 	ldw	r2,4(r20)
20092f34:	18800115 	stw	r2,4(r3)
20092f38:	a0800217 	ldw	r2,8(r20)
20092f3c:	18800215 	stw	r2,8(r3)
20092f40:	98c00117 	ldw	r3,4(r19)
20092f44:	003f5306 	br	20092c94 <__flash_rwdata_start+0xffff664c>
20092f48:	adab883a 	add	r21,r21,r22
20092f4c:	3585c83a 	sub	r2,r6,r22
20092f50:	e5400215 	stw	r21,8(fp)
20092f54:	10800054 	ori	r2,r2,1
20092f58:	a8800115 	stw	r2,4(r21)
20092f5c:	a0bfff17 	ldw	r2,-4(r20)
20092f60:	9009883a 	mov	r4,r18
20092f64:	1080004c 	andi	r2,r2,1
20092f68:	b0acb03a 	or	r22,r22,r2
20092f6c:	a5bfff15 	stw	r22,-4(r20)
20092f70:	00979bc0 	call	200979bc <__malloc_unlock>
20092f74:	a005883a 	mov	r2,r20
20092f78:	003f5306 	br	20092cc8 <__flash_rwdata_start+0xffff6680>
20092f7c:	8809883a 	mov	r4,r17
20092f80:	a00b883a 	mov	r5,r20
20092f84:	009194c0 	call	2009194c <memmove>
20092f88:	003f8306 	br	20092d98 <__flash_rwdata_start+0xffff6750>
20092f8c:	b0800404 	addi	r2,r22,16
20092f90:	b8bf6016 	blt	r23,r2,20092d14 <__flash_rwdata_start+0xffff66cc>
20092f94:	98800317 	ldw	r2,12(r19)
20092f98:	98c00217 	ldw	r3,8(r19)
20092f9c:	81bfff04 	addi	r6,r16,-4
20092fa0:	01000904 	movi	r4,36
20092fa4:	18800315 	stw	r2,12(r3)
20092fa8:	10c00215 	stw	r3,8(r2)
20092fac:	9c400204 	addi	r17,r19,8
20092fb0:	21804336 	bltu	r4,r6,200930c0 <_realloc_r+0x50c>
20092fb4:	008004c4 	movi	r2,19
20092fb8:	11803f2e 	bgeu	r2,r6,200930b8 <_realloc_r+0x504>
20092fbc:	a0800017 	ldw	r2,0(r20)
20092fc0:	98800215 	stw	r2,8(r19)
20092fc4:	a0800117 	ldw	r2,4(r20)
20092fc8:	98800315 	stw	r2,12(r19)
20092fcc:	008006c4 	movi	r2,27
20092fd0:	11803f36 	bltu	r2,r6,200930d0 <_realloc_r+0x51c>
20092fd4:	98800404 	addi	r2,r19,16
20092fd8:	a5000204 	addi	r20,r20,8
20092fdc:	a0c00017 	ldw	r3,0(r20)
20092fe0:	10c00015 	stw	r3,0(r2)
20092fe4:	a0c00117 	ldw	r3,4(r20)
20092fe8:	10c00115 	stw	r3,4(r2)
20092fec:	a0c00217 	ldw	r3,8(r20)
20092ff0:	10c00215 	stw	r3,8(r2)
20092ff4:	9d87883a 	add	r3,r19,r22
20092ff8:	bd85c83a 	sub	r2,r23,r22
20092ffc:	e0c00215 	stw	r3,8(fp)
20093000:	10800054 	ori	r2,r2,1
20093004:	18800115 	stw	r2,4(r3)
20093008:	98800117 	ldw	r2,4(r19)
2009300c:	9009883a 	mov	r4,r18
20093010:	1080004c 	andi	r2,r2,1
20093014:	b0acb03a 	or	r22,r22,r2
20093018:	9d800115 	stw	r22,4(r19)
2009301c:	00979bc0 	call	200979bc <__malloc_unlock>
20093020:	8805883a 	mov	r2,r17
20093024:	003f2806 	br	20092cc8 <__flash_rwdata_start+0xffff6680>
20093028:	a0c00217 	ldw	r3,8(r20)
2009302c:	88c00215 	stw	r3,8(r17)
20093030:	a0c00317 	ldw	r3,12(r20)
20093034:	88c00315 	stw	r3,12(r17)
20093038:	30801126 	beq	r6,r2,20093080 <_realloc_r+0x4cc>
2009303c:	88800404 	addi	r2,r17,16
20093040:	a0c00404 	addi	r3,r20,16
20093044:	003f4e06 	br	20092d80 <__flash_rwdata_start+0xffff6738>
20093048:	893fff17 	ldw	r4,-4(r17)
2009304c:	00bfff04 	movi	r2,-4
20093050:	a023883a 	mov	r17,r20
20093054:	2084703a 	and	r2,r4,r2
20093058:	80a1883a 	add	r16,r16,r2
2009305c:	003f0d06 	br	20092c94 <__flash_rwdata_start+0xffff664c>
20093060:	a0800217 	ldw	r2,8(r20)
20093064:	98800415 	stw	r2,16(r19)
20093068:	a0800317 	ldw	r2,12(r20)
2009306c:	98800515 	stw	r2,20(r19)
20093070:	31000a26 	beq	r6,r4,2009309c <_realloc_r+0x4e8>
20093074:	98c00604 	addi	r3,r19,24
20093078:	a5000404 	addi	r20,r20,16
2009307c:	003fa806 	br	20092f20 <__flash_rwdata_start+0xffff68d8>
20093080:	a1000417 	ldw	r4,16(r20)
20093084:	88800604 	addi	r2,r17,24
20093088:	a0c00604 	addi	r3,r20,24
2009308c:	89000415 	stw	r4,16(r17)
20093090:	a1000517 	ldw	r4,20(r20)
20093094:	89000515 	stw	r4,20(r17)
20093098:	003f3906 	br	20092d80 <__flash_rwdata_start+0xffff6738>
2009309c:	a0800417 	ldw	r2,16(r20)
200930a0:	a5000604 	addi	r20,r20,24
200930a4:	98c00804 	addi	r3,r19,32
200930a8:	98800615 	stw	r2,24(r19)
200930ac:	a0bfff17 	ldw	r2,-4(r20)
200930b0:	98800715 	stw	r2,28(r19)
200930b4:	003f9a06 	br	20092f20 <__flash_rwdata_start+0xffff68d8>
200930b8:	8805883a 	mov	r2,r17
200930bc:	003fc706 	br	20092fdc <__flash_rwdata_start+0xffff6994>
200930c0:	8809883a 	mov	r4,r17
200930c4:	a00b883a 	mov	r5,r20
200930c8:	009194c0 	call	2009194c <memmove>
200930cc:	003fc906 	br	20092ff4 <__flash_rwdata_start+0xffff69ac>
200930d0:	a0800217 	ldw	r2,8(r20)
200930d4:	98800415 	stw	r2,16(r19)
200930d8:	a0800317 	ldw	r2,12(r20)
200930dc:	98800515 	stw	r2,20(r19)
200930e0:	31000726 	beq	r6,r4,20093100 <_realloc_r+0x54c>
200930e4:	98800604 	addi	r2,r19,24
200930e8:	a5000404 	addi	r20,r20,16
200930ec:	003fbb06 	br	20092fdc <__flash_rwdata_start+0xffff6994>
200930f0:	9009883a 	mov	r4,r18
200930f4:	00979bc0 	call	200979bc <__malloc_unlock>
200930f8:	0005883a 	mov	r2,zero
200930fc:	003ef206 	br	20092cc8 <__flash_rwdata_start+0xffff6680>
20093100:	a0c00417 	ldw	r3,16(r20)
20093104:	a5000604 	addi	r20,r20,24
20093108:	98800804 	addi	r2,r19,32
2009310c:	98c00615 	stw	r3,24(r19)
20093110:	a0ffff17 	ldw	r3,-4(r20)
20093114:	98c00715 	stw	r3,28(r19)
20093118:	003fb006 	br	20092fdc <__flash_rwdata_start+0xffff6994>

2009311c <__fpclassifyd>:
2009311c:	00a00034 	movhi	r2,32768
20093120:	10bfffc4 	addi	r2,r2,-1
20093124:	2884703a 	and	r2,r5,r2
20093128:	10000726 	beq	r2,zero,20093148 <__fpclassifyd+0x2c>
2009312c:	00fffc34 	movhi	r3,65520
20093130:	019ff834 	movhi	r6,32736
20093134:	28c7883a 	add	r3,r5,r3
20093138:	31bfffc4 	addi	r6,r6,-1
2009313c:	30c00536 	bltu	r6,r3,20093154 <__fpclassifyd+0x38>
20093140:	00800104 	movi	r2,4
20093144:	f800283a 	ret
20093148:	2000021e 	bne	r4,zero,20093154 <__fpclassifyd+0x38>
2009314c:	00800084 	movi	r2,2
20093150:	f800283a 	ret
20093154:	00dffc34 	movhi	r3,32752
20093158:	019ff834 	movhi	r6,32736
2009315c:	28cb883a 	add	r5,r5,r3
20093160:	31bfffc4 	addi	r6,r6,-1
20093164:	317ff62e 	bgeu	r6,r5,20093140 <__flash_rwdata_start+0xffff6af8>
20093168:	01400434 	movhi	r5,16
2009316c:	297fffc4 	addi	r5,r5,-1
20093170:	28800236 	bltu	r5,r2,2009317c <__fpclassifyd+0x60>
20093174:	008000c4 	movi	r2,3
20093178:	f800283a 	ret
2009317c:	10c00226 	beq	r2,r3,20093188 <__fpclassifyd+0x6c>
20093180:	0005883a 	mov	r2,zero
20093184:	f800283a 	ret
20093188:	2005003a 	cmpeq	r2,r4,zero
2009318c:	f800283a 	ret

20093190 <__sread>:
20093190:	defffe04 	addi	sp,sp,-8
20093194:	dc000015 	stw	r16,0(sp)
20093198:	2821883a 	mov	r16,r5
2009319c:	2940038f 	ldh	r5,14(r5)
200931a0:	dfc00115 	stw	ra,4(sp)
200931a4:	00961ac0 	call	200961ac <_read_r>
200931a8:	10000716 	blt	r2,zero,200931c8 <__sread+0x38>
200931ac:	80c01417 	ldw	r3,80(r16)
200931b0:	1887883a 	add	r3,r3,r2
200931b4:	80c01415 	stw	r3,80(r16)
200931b8:	dfc00117 	ldw	ra,4(sp)
200931bc:	dc000017 	ldw	r16,0(sp)
200931c0:	dec00204 	addi	sp,sp,8
200931c4:	f800283a 	ret
200931c8:	80c0030b 	ldhu	r3,12(r16)
200931cc:	18fbffcc 	andi	r3,r3,61439
200931d0:	80c0030d 	sth	r3,12(r16)
200931d4:	dfc00117 	ldw	ra,4(sp)
200931d8:	dc000017 	ldw	r16,0(sp)
200931dc:	dec00204 	addi	sp,sp,8
200931e0:	f800283a 	ret

200931e4 <__seofread>:
200931e4:	0005883a 	mov	r2,zero
200931e8:	f800283a 	ret

200931ec <__swrite>:
200931ec:	2880030b 	ldhu	r2,12(r5)
200931f0:	defffb04 	addi	sp,sp,-20
200931f4:	dcc00315 	stw	r19,12(sp)
200931f8:	dc800215 	stw	r18,8(sp)
200931fc:	dc400115 	stw	r17,4(sp)
20093200:	dc000015 	stw	r16,0(sp)
20093204:	dfc00415 	stw	ra,16(sp)
20093208:	10c0400c 	andi	r3,r2,256
2009320c:	2821883a 	mov	r16,r5
20093210:	2027883a 	mov	r19,r4
20093214:	3025883a 	mov	r18,r6
20093218:	3823883a 	mov	r17,r7
2009321c:	18000526 	beq	r3,zero,20093234 <__swrite+0x48>
20093220:	2940038f 	ldh	r5,14(r5)
20093224:	000d883a 	mov	r6,zero
20093228:	01c00084 	movi	r7,2
2009322c:	00961500 	call	20096150 <_lseek_r>
20093230:	8080030b 	ldhu	r2,12(r16)
20093234:	8140038f 	ldh	r5,14(r16)
20093238:	10bbffcc 	andi	r2,r2,61439
2009323c:	9809883a 	mov	r4,r19
20093240:	900d883a 	mov	r6,r18
20093244:	880f883a 	mov	r7,r17
20093248:	8080030d 	sth	r2,12(r16)
2009324c:	dfc00417 	ldw	ra,16(sp)
20093250:	dcc00317 	ldw	r19,12(sp)
20093254:	dc800217 	ldw	r18,8(sp)
20093258:	dc400117 	ldw	r17,4(sp)
2009325c:	dc000017 	ldw	r16,0(sp)
20093260:	dec00504 	addi	sp,sp,20
20093264:	0095c4c1 	jmpi	20095c4c <_write_r>

20093268 <__sseek>:
20093268:	defffe04 	addi	sp,sp,-8
2009326c:	dc000015 	stw	r16,0(sp)
20093270:	2821883a 	mov	r16,r5
20093274:	2940038f 	ldh	r5,14(r5)
20093278:	dfc00115 	stw	ra,4(sp)
2009327c:	00961500 	call	20096150 <_lseek_r>
20093280:	00ffffc4 	movi	r3,-1
20093284:	10c00826 	beq	r2,r3,200932a8 <__sseek+0x40>
20093288:	80c0030b 	ldhu	r3,12(r16)
2009328c:	80801415 	stw	r2,80(r16)
20093290:	18c40014 	ori	r3,r3,4096
20093294:	80c0030d 	sth	r3,12(r16)
20093298:	dfc00117 	ldw	ra,4(sp)
2009329c:	dc000017 	ldw	r16,0(sp)
200932a0:	dec00204 	addi	sp,sp,8
200932a4:	f800283a 	ret
200932a8:	80c0030b 	ldhu	r3,12(r16)
200932ac:	18fbffcc 	andi	r3,r3,61439
200932b0:	80c0030d 	sth	r3,12(r16)
200932b4:	dfc00117 	ldw	ra,4(sp)
200932b8:	dc000017 	ldw	r16,0(sp)
200932bc:	dec00204 	addi	sp,sp,8
200932c0:	f800283a 	ret

200932c4 <__sclose>:
200932c4:	2940038f 	ldh	r5,14(r5)
200932c8:	0095ca81 	jmpi	20095ca8 <_close_r>

200932cc <strchr>:
200932cc:	2ac03fcc 	andi	r11,r5,255
200932d0:	2815883a 	mov	r10,r5
200932d4:	208000cc 	andi	r2,r4,3
200932d8:	58003726 	beq	r11,zero,200933b8 <strchr+0xec>
200932dc:	10000b26 	beq	r2,zero,2009330c <strchr+0x40>
200932e0:	20800003 	ldbu	r2,0(r4)
200932e4:	10003226 	beq	r2,zero,200933b0 <strchr+0xe4>
200932e8:	28c03fcc 	andi	r3,r5,255
200932ec:	5880041e 	bne	r11,r2,20093300 <strchr+0x34>
200932f0:	00004d06 	br	20093428 <strchr+0x15c>
200932f4:	20800003 	ldbu	r2,0(r4)
200932f8:	10002d26 	beq	r2,zero,200933b0 <strchr+0xe4>
200932fc:	18804a26 	beq	r3,r2,20093428 <strchr+0x15c>
20093300:	21000044 	addi	r4,r4,1
20093304:	208000cc 	andi	r2,r4,3
20093308:	103ffa1e 	bne	r2,zero,200932f4 <__flash_rwdata_start+0xffff6cac>
2009330c:	29403fcc 	andi	r5,r5,255
20093310:	280e923a 	slli	r7,r5,8
20093314:	20800017 	ldw	r2,0(r4)
20093318:	01bfbff4 	movhi	r6,65279
2009331c:	394ab03a 	or	r5,r7,r5
20093320:	280e943a 	slli	r7,r5,16
20093324:	31bfbfc4 	addi	r6,r6,-257
20093328:	0090303a 	nor	r8,zero,r2
2009332c:	394eb03a 	or	r7,r7,r5
20093330:	1187883a 	add	r3,r2,r6
20093334:	11c4f03a 	xor	r2,r2,r7
20093338:	008a303a 	nor	r5,zero,r2
2009333c:	1185883a 	add	r2,r2,r6
20093340:	03202074 	movhi	r12,32897
20093344:	2884703a 	and	r2,r5,r2
20093348:	40c6703a 	and	r3,r8,r3
2009334c:	63202004 	addi	r12,r12,-32640
20093350:	10c4b03a 	or	r2,r2,r3
20093354:	1304703a 	and	r2,r2,r12
20093358:	10000c1e 	bne	r2,zero,2009338c <strchr+0xc0>
2009335c:	21000104 	addi	r4,r4,4
20093360:	20800017 	ldw	r2,0(r4)
20093364:	3886f03a 	xor	r3,r7,r2
20093368:	00d2303a 	nor	r9,zero,r3
2009336c:	198b883a 	add	r5,r3,r6
20093370:	0090303a 	nor	r8,zero,r2
20093374:	1187883a 	add	r3,r2,r6
20093378:	494a703a 	and	r5,r9,r5
2009337c:	40c4703a 	and	r2,r8,r3
20093380:	2884b03a 	or	r2,r5,r2
20093384:	1304703a 	and	r2,r2,r12
20093388:	103ff426 	beq	r2,zero,2009335c <__flash_rwdata_start+0xffff6d14>
2009338c:	20800003 	ldbu	r2,0(r4)
20093390:	10000726 	beq	r2,zero,200933b0 <strchr+0xe4>
20093394:	58802426 	beq	r11,r2,20093428 <strchr+0x15c>
20093398:	50c03fcc 	andi	r3,r10,255
2009339c:	00000106 	br	200933a4 <strchr+0xd8>
200933a0:	18802126 	beq	r3,r2,20093428 <strchr+0x15c>
200933a4:	21000044 	addi	r4,r4,1
200933a8:	20800003 	ldbu	r2,0(r4)
200933ac:	103ffc1e 	bne	r2,zero,200933a0 <__flash_rwdata_start+0xffff6d58>
200933b0:	0005883a 	mov	r2,zero
200933b4:	f800283a 	ret
200933b8:	10000526 	beq	r2,zero,200933d0 <strchr+0x104>
200933bc:	20800003 	ldbu	r2,0(r4)
200933c0:	10001926 	beq	r2,zero,20093428 <strchr+0x15c>
200933c4:	21000044 	addi	r4,r4,1
200933c8:	208000cc 	andi	r2,r4,3
200933cc:	103ffb1e 	bne	r2,zero,200933bc <__flash_rwdata_start+0xffff6d74>
200933d0:	20800017 	ldw	r2,0(r4)
200933d4:	01bfbff4 	movhi	r6,65279
200933d8:	31bfbfc4 	addi	r6,r6,-257
200933dc:	0086303a 	nor	r3,zero,r2
200933e0:	01602074 	movhi	r5,32897
200933e4:	1185883a 	add	r2,r2,r6
200933e8:	29602004 	addi	r5,r5,-32640
200933ec:	10c4703a 	and	r2,r2,r3
200933f0:	1144703a 	and	r2,r2,r5
200933f4:	10000a1e 	bne	r2,zero,20093420 <strchr+0x154>
200933f8:	21000104 	addi	r4,r4,4
200933fc:	20800017 	ldw	r2,0(r4)
20093400:	1187883a 	add	r3,r2,r6
20093404:	0084303a 	nor	r2,zero,r2
20093408:	1884703a 	and	r2,r3,r2
2009340c:	1144703a 	and	r2,r2,r5
20093410:	103ff926 	beq	r2,zero,200933f8 <__flash_rwdata_start+0xffff6db0>
20093414:	20800003 	ldbu	r2,0(r4)
20093418:	10000326 	beq	r2,zero,20093428 <strchr+0x15c>
2009341c:	21000044 	addi	r4,r4,1
20093420:	20800003 	ldbu	r2,0(r4)
20093424:	103ffd1e 	bne	r2,zero,2009341c <__flash_rwdata_start+0xffff6dd4>
20093428:	2005883a 	mov	r2,r4
2009342c:	f800283a 	ret

20093430 <__ssprint_r>:
20093430:	30800217 	ldw	r2,8(r6)
20093434:	defff604 	addi	sp,sp,-40
20093438:	ddc00715 	stw	r23,28(sp)
2009343c:	dc800215 	stw	r18,8(sp)
20093440:	dfc00915 	stw	ra,36(sp)
20093444:	df000815 	stw	fp,32(sp)
20093448:	dd800615 	stw	r22,24(sp)
2009344c:	dd400515 	stw	r21,20(sp)
20093450:	dd000415 	stw	r20,16(sp)
20093454:	dcc00315 	stw	r19,12(sp)
20093458:	dc400115 	stw	r17,4(sp)
2009345c:	dc000015 	stw	r16,0(sp)
20093460:	3025883a 	mov	r18,r6
20093464:	35c00017 	ldw	r23,0(r6)
20093468:	10005626 	beq	r2,zero,200935c4 <__ssprint_r+0x194>
2009346c:	2027883a 	mov	r19,r4
20093470:	28800217 	ldw	r2,8(r5)
20093474:	29000017 	ldw	r4,0(r5)
20093478:	2823883a 	mov	r17,r5
2009347c:	0039883a 	mov	fp,zero
20093480:	0021883a 	mov	r16,zero
20093484:	80003926 	beq	r16,zero,2009356c <__ssprint_r+0x13c>
20093488:	102b883a 	mov	r21,r2
2009348c:	102d883a 	mov	r22,r2
20093490:	80803a36 	bltu	r16,r2,2009357c <__ssprint_r+0x14c>
20093494:	88c0030b 	ldhu	r3,12(r17)
20093498:	1881200c 	andi	r2,r3,1152
2009349c:	10002626 	beq	r2,zero,20093538 <__ssprint_r+0x108>
200934a0:	88800517 	ldw	r2,20(r17)
200934a4:	89400417 	ldw	r5,16(r17)
200934a8:	81c00044 	addi	r7,r16,1
200934ac:	108d883a 	add	r6,r2,r2
200934b0:	3085883a 	add	r2,r6,r2
200934b4:	100cd7fa 	srli	r6,r2,31
200934b8:	216dc83a 	sub	r22,r4,r5
200934bc:	3d89883a 	add	r4,r7,r22
200934c0:	3085883a 	add	r2,r6,r2
200934c4:	102bd07a 	srai	r21,r2,1
200934c8:	a80d883a 	mov	r6,r21
200934cc:	a900022e 	bgeu	r21,r4,200934d8 <__ssprint_r+0xa8>
200934d0:	202b883a 	mov	r21,r4
200934d4:	200d883a 	mov	r6,r4
200934d8:	18c1000c 	andi	r3,r3,1024
200934dc:	9809883a 	mov	r4,r19
200934e0:	18002926 	beq	r3,zero,20093588 <__ssprint_r+0x158>
200934e4:	300b883a 	mov	r5,r6
200934e8:	00899bc0 	call	200899bc <_malloc_r>
200934ec:	1029883a 	mov	r20,r2
200934f0:	10002b26 	beq	r2,zero,200935a0 <__ssprint_r+0x170>
200934f4:	89400417 	ldw	r5,16(r17)
200934f8:	1009883a 	mov	r4,r2
200934fc:	b00d883a 	mov	r6,r22
20093500:	008a1e00 	call	2008a1e0 <memcpy>
20093504:	8880030b 	ldhu	r2,12(r17)
20093508:	00fedfc4 	movi	r3,-1153
2009350c:	10c4703a 	and	r2,r2,r3
20093510:	10802014 	ori	r2,r2,128
20093514:	8880030d 	sth	r2,12(r17)
20093518:	a589883a 	add	r4,r20,r22
2009351c:	adadc83a 	sub	r22,r21,r22
20093520:	8d400515 	stw	r21,20(r17)
20093524:	8d800215 	stw	r22,8(r17)
20093528:	8d000415 	stw	r20,16(r17)
2009352c:	89000015 	stw	r4,0(r17)
20093530:	802b883a 	mov	r21,r16
20093534:	802d883a 	mov	r22,r16
20093538:	e00b883a 	mov	r5,fp
2009353c:	b00d883a 	mov	r6,r22
20093540:	009194c0 	call	2009194c <memmove>
20093544:	88800217 	ldw	r2,8(r17)
20093548:	89000017 	ldw	r4,0(r17)
2009354c:	90c00217 	ldw	r3,8(r18)
20093550:	1545c83a 	sub	r2,r2,r21
20093554:	2589883a 	add	r4,r4,r22
20093558:	88800215 	stw	r2,8(r17)
2009355c:	89000015 	stw	r4,0(r17)
20093560:	1c21c83a 	sub	r16,r3,r16
20093564:	94000215 	stw	r16,8(r18)
20093568:	80001626 	beq	r16,zero,200935c4 <__ssprint_r+0x194>
2009356c:	bf000017 	ldw	fp,0(r23)
20093570:	bc000117 	ldw	r16,4(r23)
20093574:	bdc00204 	addi	r23,r23,8
20093578:	003fc206 	br	20093484 <__flash_rwdata_start+0xffff6e3c>
2009357c:	802b883a 	mov	r21,r16
20093580:	802d883a 	mov	r22,r16
20093584:	003fec06 	br	20093538 <__flash_rwdata_start+0xffff6ef0>
20093588:	0092bb40 	call	20092bb4 <_realloc_r>
2009358c:	1029883a 	mov	r20,r2
20093590:	103fe11e 	bne	r2,zero,20093518 <__flash_rwdata_start+0xffff6ed0>
20093594:	89400417 	ldw	r5,16(r17)
20093598:	9809883a 	mov	r4,r19
2009359c:	0090c940 	call	20090c94 <_free_r>
200935a0:	88c0030b 	ldhu	r3,12(r17)
200935a4:	00800304 	movi	r2,12
200935a8:	98800015 	stw	r2,0(r19)
200935ac:	18c01014 	ori	r3,r3,64
200935b0:	88c0030d 	sth	r3,12(r17)
200935b4:	00bfffc4 	movi	r2,-1
200935b8:	90000215 	stw	zero,8(r18)
200935bc:	90000115 	stw	zero,4(r18)
200935c0:	00000206 	br	200935cc <__ssprint_r+0x19c>
200935c4:	90000115 	stw	zero,4(r18)
200935c8:	0005883a 	mov	r2,zero
200935cc:	dfc00917 	ldw	ra,36(sp)
200935d0:	df000817 	ldw	fp,32(sp)
200935d4:	ddc00717 	ldw	r23,28(sp)
200935d8:	dd800617 	ldw	r22,24(sp)
200935dc:	dd400517 	ldw	r21,20(sp)
200935e0:	dd000417 	ldw	r20,16(sp)
200935e4:	dcc00317 	ldw	r19,12(sp)
200935e8:	dc800217 	ldw	r18,8(sp)
200935ec:	dc400117 	ldw	r17,4(sp)
200935f0:	dc000017 	ldw	r16,0(sp)
200935f4:	dec00a04 	addi	sp,sp,40
200935f8:	f800283a 	ret

200935fc <___svfiprintf_internal_r>:
200935fc:	2880030b 	ldhu	r2,12(r5)
20093600:	deffc904 	addi	sp,sp,-220
20093604:	dd403215 	stw	r21,200(sp)
20093608:	dfc03615 	stw	ra,216(sp)
2009360c:	df003515 	stw	fp,212(sp)
20093610:	ddc03415 	stw	r23,208(sp)
20093614:	dd803315 	stw	r22,204(sp)
20093618:	dd003115 	stw	r20,196(sp)
2009361c:	dcc03015 	stw	r19,192(sp)
20093620:	dc802f15 	stw	r18,188(sp)
20093624:	dc402e15 	stw	r17,184(sp)
20093628:	dc002d15 	stw	r16,180(sp)
2009362c:	d9402715 	stw	r5,156(sp)
20093630:	d9002915 	stw	r4,164(sp)
20093634:	1080200c 	andi	r2,r2,128
20093638:	d9c02315 	stw	r7,140(sp)
2009363c:	302b883a 	mov	r21,r6
20093640:	10000226 	beq	r2,zero,2009364c <___svfiprintf_internal_r+0x50>
20093644:	28800417 	ldw	r2,16(r5)
20093648:	1003ce26 	beq	r2,zero,20094584 <___svfiprintf_internal_r+0xf88>
2009364c:	dac01a04 	addi	r11,sp,104
20093650:	da8019c4 	addi	r10,sp,103
20093654:	dc802917 	ldw	r18,164(sp)
20093658:	dd002717 	ldw	r20,156(sp)
2009365c:	04c00034 	movhi	r19,0
20093660:	dac01e15 	stw	r11,120(sp)
20093664:	5a97c83a 	sub	r11,r11,r10
20093668:	9cc1ec04 	addi	r19,r19,1968
2009366c:	da801f15 	stw	r10,124(sp)
20093670:	dec01a15 	stw	sp,104(sp)
20093674:	d8001c15 	stw	zero,112(sp)
20093678:	d8001b15 	stw	zero,108(sp)
2009367c:	d811883a 	mov	r8,sp
20093680:	d8002a15 	stw	zero,168(sp)
20093684:	d8002415 	stw	zero,144(sp)
20093688:	dac02b15 	stw	r11,172(sp)
2009368c:	a8800007 	ldb	r2,0(r21)
20093690:	10026a26 	beq	r2,zero,2009403c <___svfiprintf_internal_r+0xa40>
20093694:	01000944 	movi	r4,37
20093698:	11026826 	beq	r2,r4,2009403c <___svfiprintf_internal_r+0xa40>
2009369c:	a805883a 	mov	r2,r21
200936a0:	00000106 	br	200936a8 <___svfiprintf_internal_r+0xac>
200936a4:	19000326 	beq	r3,r4,200936b4 <___svfiprintf_internal_r+0xb8>
200936a8:	10800044 	addi	r2,r2,1
200936ac:	10c00007 	ldb	r3,0(r2)
200936b0:	183ffc1e 	bne	r3,zero,200936a4 <__flash_rwdata_start+0xffff705c>
200936b4:	1561c83a 	sub	r16,r2,r21
200936b8:	102d883a 	mov	r22,r2
200936bc:	80000e26 	beq	r16,zero,200936f8 <___svfiprintf_internal_r+0xfc>
200936c0:	d8c01c17 	ldw	r3,112(sp)
200936c4:	d8801b17 	ldw	r2,108(sp)
200936c8:	45400015 	stw	r21,0(r8)
200936cc:	1c07883a 	add	r3,r3,r16
200936d0:	10800044 	addi	r2,r2,1
200936d4:	d8c01c15 	stw	r3,112(sp)
200936d8:	44000115 	stw	r16,4(r8)
200936dc:	d8801b15 	stw	r2,108(sp)
200936e0:	00c001c4 	movi	r3,7
200936e4:	1882d816 	blt	r3,r2,20094248 <___svfiprintf_internal_r+0xc4c>
200936e8:	42000204 	addi	r8,r8,8
200936ec:	da802417 	ldw	r10,144(sp)
200936f0:	5415883a 	add	r10,r10,r16
200936f4:	da802415 	stw	r10,144(sp)
200936f8:	b0800007 	ldb	r2,0(r22)
200936fc:	10027526 	beq	r2,zero,200940d4 <___svfiprintf_internal_r+0xad8>
20093700:	b1000047 	ldb	r4,1(r22)
20093704:	b5400044 	addi	r21,r22,1
20093708:	d8001d85 	stb	zero,118(sp)
2009370c:	000d883a 	mov	r6,zero
20093710:	043fffc4 	movi	r16,-1
20093714:	d8002115 	stw	zero,132(sp)
20093718:	0023883a 	mov	r17,zero
2009371c:	00c01604 	movi	r3,88
20093720:	01400244 	movi	r5,9
20093724:	02400a84 	movi	r9,42
20093728:	01c01b04 	movi	r7,108
2009372c:	ad400044 	addi	r21,r21,1
20093730:	20bff804 	addi	r2,r4,-32
20093734:	18819736 	bltu	r3,r2,20093d94 <___svfiprintf_internal_r+0x798>
20093738:	100490ba 	slli	r2,r2,2
2009373c:	02c80274 	movhi	r11,8201
20093740:	5acdd404 	addi	r11,r11,14160
20093744:	12c5883a 	add	r2,r2,r11
20093748:	10800017 	ldw	r2,0(r2)
2009374c:	1000683a 	jmp	r2
20093750:	20093c8c 	andi	zero,r4,9458
20093754:	20093d94 	ori	zero,r4,9462
20093758:	20093d94 	ori	zero,r4,9462
2009375c:	20093c80 	call	220093c8 <__flash_rwdata_start+0x1f6cd80>
20093760:	20093d94 	ori	zero,r4,9462
20093764:	20093d94 	ori	zero,r4,9462
20093768:	20093d94 	ori	zero,r4,9462
2009376c:	20093d94 	ori	zero,r4,9462
20093770:	20093d94 	ori	zero,r4,9462
20093774:	20093d94 	ori	zero,r4,9462
20093778:	200939ac 	andhi	zero,r4,9446
2009377c:	20093dc8 	cmpgei	zero,r4,9463
20093780:	20093d94 	ori	zero,r4,9462
20093784:	200939d4 	ori	zero,r4,9447
20093788:	20093dd4 	ori	zero,r4,9463
2009378c:	20093d94 	ori	zero,r4,9462
20093790:	20093dbc 	xorhi	zero,r4,9462
20093794:	20093d5c 	xori	zero,r4,9461
20093798:	20093d5c 	xori	zero,r4,9461
2009379c:	20093d5c 	xori	zero,r4,9461
200937a0:	20093d5c 	xori	zero,r4,9461
200937a4:	20093d5c 	xori	zero,r4,9461
200937a8:	20093d5c 	xori	zero,r4,9461
200937ac:	20093d5c 	xori	zero,r4,9461
200937b0:	20093d5c 	xori	zero,r4,9461
200937b4:	20093d5c 	xori	zero,r4,9461
200937b8:	20093d94 	ori	zero,r4,9462
200937bc:	20093d94 	ori	zero,r4,9462
200937c0:	20093d94 	ori	zero,r4,9462
200937c4:	20093d94 	ori	zero,r4,9462
200937c8:	20093d94 	ori	zero,r4,9462
200937cc:	20093d94 	ori	zero,r4,9462
200937d0:	20093d94 	ori	zero,r4,9462
200937d4:	20093d94 	ori	zero,r4,9462
200937d8:	20093d94 	ori	zero,r4,9462
200937dc:	20093d94 	ori	zero,r4,9462
200937e0:	20093cf4 	orhi	zero,r4,9459
200937e4:	20093d94 	ori	zero,r4,9462
200937e8:	20093d94 	ori	zero,r4,9462
200937ec:	20093d94 	ori	zero,r4,9462
200937f0:	20093d94 	ori	zero,r4,9462
200937f4:	20093d94 	ori	zero,r4,9462
200937f8:	20093d94 	ori	zero,r4,9462
200937fc:	20093d94 	ori	zero,r4,9462
20093800:	20093d94 	ori	zero,r4,9462
20093804:	20093d94 	ori	zero,r4,9462
20093808:	20093d94 	ori	zero,r4,9462
2009380c:	20093980 	call	22009398 <__flash_rwdata_start+0x1f6cd50>
20093810:	20093d94 	ori	zero,r4,9462
20093814:	20093d94 	ori	zero,r4,9462
20093818:	20093d94 	ori	zero,r4,9462
2009381c:	20093d94 	ori	zero,r4,9462
20093820:	20093d94 	ori	zero,r4,9462
20093824:	200938b4 	orhi	zero,r4,9442
20093828:	20093d94 	ori	zero,r4,9462
2009382c:	20093d94 	ori	zero,r4,9462
20093830:	20093be0 	cmpeqi	zero,r4,9455
20093834:	20093d94 	ori	zero,r4,9462
20093838:	20093d94 	ori	zero,r4,9462
2009383c:	20093d94 	ori	zero,r4,9462
20093840:	20093d94 	ori	zero,r4,9462
20093844:	20093d94 	ori	zero,r4,9462
20093848:	20093d94 	ori	zero,r4,9462
2009384c:	20093d94 	ori	zero,r4,9462
20093850:	20093d94 	ori	zero,r4,9462
20093854:	20093d94 	ori	zero,r4,9462
20093858:	20093d94 	ori	zero,r4,9462
2009385c:	20093acc 	andi	zero,r4,9451
20093860:	20093a8c 	andi	zero,r4,9450
20093864:	20093d94 	ori	zero,r4,9462
20093868:	20093d94 	ori	zero,r4,9462
2009386c:	20093d94 	ori	zero,r4,9462
20093870:	20093c3c 	xorhi	zero,r4,9456
20093874:	20093a8c 	andi	zero,r4,9450
20093878:	20093d94 	ori	zero,r4,9462
2009387c:	20093d94 	ori	zero,r4,9462
20093880:	20093c28 	cmpgeui	zero,r4,9456
20093884:	20093d94 	ori	zero,r4,9462
20093888:	20093c48 	cmpgei	zero,r4,9457
2009388c:	20093984 	addi	zero,r4,9446
20093890:	20093a48 	cmpgei	zero,r4,9449
20093894:	20093a3c 	xorhi	zero,r4,9448
20093898:	20093d94 	ori	zero,r4,9462
2009389c:	200939e0 	cmpeqi	zero,r4,9447
200938a0:	20093d94 	ori	zero,r4,9462
200938a4:	200938b8 	rdprs	zero,r4,9442
200938a8:	20093d94 	ori	zero,r4,9462
200938ac:	20093d94 	ori	zero,r4,9462
200938b0:	20093ca8 	cmpgeui	zero,r4,9458
200938b4:	8c400414 	ori	r17,r17,16
200938b8:	8880080c 	andi	r2,r17,32
200938bc:	10029626 	beq	r2,zero,20094318 <___svfiprintf_internal_r+0xd1c>
200938c0:	da802317 	ldw	r10,140(sp)
200938c4:	dac02317 	ldw	r11,140(sp)
200938c8:	00800044 	movi	r2,1
200938cc:	52400017 	ldw	r9,0(r10)
200938d0:	52800117 	ldw	r10,4(r10)
200938d4:	5ac00204 	addi	r11,r11,8
200938d8:	dac02315 	stw	r11,140(sp)
200938dc:	4a86b03a 	or	r3,r9,r10
200938e0:	d8001d85 	stb	zero,118(sp)
200938e4:	8039883a 	mov	fp,r16
200938e8:	0017883a 	mov	r11,zero
200938ec:	80000216 	blt	r16,zero,200938f8 <___svfiprintf_internal_r+0x2fc>
200938f0:	013fdfc4 	movi	r4,-129
200938f4:	8922703a 	and	r17,r17,r4
200938f8:	1801d21e 	bne	r3,zero,20094044 <___svfiprintf_internal_r+0xa48>
200938fc:	80024626 	beq	r16,zero,20094218 <___svfiprintf_internal_r+0xc1c>
20093900:	10803fcc 	andi	r2,r2,255
20093904:	00c00044 	movi	r3,1
20093908:	10c2b426 	beq	r2,r3,200943dc <___svfiprintf_internal_r+0xde0>
2009390c:	00c00084 	movi	r3,2
20093910:	10c25d26 	beq	r2,r3,20094288 <___svfiprintf_internal_r+0xc8c>
20093914:	d8c01a04 	addi	r3,sp,104
20093918:	4808d0fa 	srli	r4,r9,3
2009391c:	500a977a 	slli	r5,r10,29
20093920:	5014d0fa 	srli	r10,r10,3
20093924:	4a4001cc 	andi	r9,r9,7
20093928:	48800c04 	addi	r2,r9,48
2009392c:	18ffffc4 	addi	r3,r3,-1
20093930:	2912b03a 	or	r9,r5,r4
20093934:	18800005 	stb	r2,0(r3)
20093938:	4a88b03a 	or	r4,r9,r10
2009393c:	203ff61e 	bne	r4,zero,20093918 <__flash_rwdata_start+0xffff72d0>
20093940:	8900004c 	andi	r4,r17,1
20093944:	d8c02615 	stw	r3,152(sp)
20093948:	2002961e 	bne	r4,zero,200943a4 <___svfiprintf_internal_r+0xda8>
2009394c:	da801e17 	ldw	r10,120(sp)
20093950:	50f9c83a 	sub	fp,r10,r3
20093954:	df002015 	stw	fp,128(sp)
20093958:	e400010e 	bge	fp,r16,20093960 <___svfiprintf_internal_r+0x364>
2009395c:	dc002015 	stw	r16,128(sp)
20093960:	5ac03fcc 	andi	r11,r11,255
20093964:	5ac0201c 	xori	r11,r11,128
20093968:	5affe004 	addi	r11,r11,-128
2009396c:	58006326 	beq	r11,zero,20093afc <___svfiprintf_internal_r+0x500>
20093970:	d8c02017 	ldw	r3,128(sp)
20093974:	18c00044 	addi	r3,r3,1
20093978:	d8c02015 	stw	r3,128(sp)
2009397c:	00005f06 	br	20093afc <___svfiprintf_internal_r+0x500>
20093980:	8c400414 	ori	r17,r17,16
20093984:	8880080c 	andi	r2,r17,32
20093988:	10027926 	beq	r2,zero,20094370 <___svfiprintf_internal_r+0xd74>
2009398c:	dac02317 	ldw	r11,140(sp)
20093990:	0005883a 	mov	r2,zero
20093994:	5a400017 	ldw	r9,0(r11)
20093998:	5a800117 	ldw	r10,4(r11)
2009399c:	5ac00204 	addi	r11,r11,8
200939a0:	dac02315 	stw	r11,140(sp)
200939a4:	4a86b03a 	or	r3,r9,r10
200939a8:	003fcd06 	br	200938e0 <__flash_rwdata_start+0xffff7298>
200939ac:	da802317 	ldw	r10,140(sp)
200939b0:	dac02317 	ldw	r11,140(sp)
200939b4:	52800017 	ldw	r10,0(r10)
200939b8:	58800104 	addi	r2,r11,4
200939bc:	da802115 	stw	r10,132(sp)
200939c0:	50028c0e 	bge	r10,zero,200943f4 <___svfiprintf_internal_r+0xdf8>
200939c4:	da802117 	ldw	r10,132(sp)
200939c8:	d8802315 	stw	r2,140(sp)
200939cc:	0295c83a 	sub	r10,zero,r10
200939d0:	da802115 	stw	r10,132(sp)
200939d4:	8c400114 	ori	r17,r17,4
200939d8:	a9000007 	ldb	r4,0(r21)
200939dc:	003f5306 	br	2009372c <__flash_rwdata_start+0xffff70e4>
200939e0:	da802317 	ldw	r10,140(sp)
200939e4:	dac02317 	ldw	r11,140(sp)
200939e8:	d8001d85 	stb	zero,118(sp)
200939ec:	52800017 	ldw	r10,0(r10)
200939f0:	5dc00104 	addi	r23,r11,4
200939f4:	da802615 	stw	r10,152(sp)
200939f8:	5002d626 	beq	r10,zero,20094554 <___svfiprintf_internal_r+0xf58>
200939fc:	d9002617 	ldw	r4,152(sp)
20093a00:	8002cc16 	blt	r16,zero,20094534 <___svfiprintf_internal_r+0xf38>
20093a04:	000b883a 	mov	r5,zero
20093a08:	800d883a 	mov	r6,r16
20093a0c:	da002c15 	stw	r8,176(sp)
20093a10:	00918640 	call	20091864 <memchr>
20093a14:	da002c17 	ldw	r8,176(sp)
20093a18:	1002f026 	beq	r2,zero,200945dc <___svfiprintf_internal_r+0xfe0>
20093a1c:	d8c02617 	ldw	r3,152(sp)
20093a20:	10f9c83a 	sub	fp,r2,r3
20093a24:	8700010e 	bge	r16,fp,20093a2c <___svfiprintf_internal_r+0x430>
20093a28:	8039883a 	mov	fp,r16
20093a2c:	dac01d83 	ldbu	r11,118(sp)
20093a30:	ddc02315 	stw	r23,140(sp)
20093a34:	0021883a 	mov	r16,zero
20093a38:	003fc606 	br	20093954 <__flash_rwdata_start+0xffff730c>
20093a3c:	8c400814 	ori	r17,r17,32
20093a40:	a9000007 	ldb	r4,0(r21)
20093a44:	003f3906 	br	2009372c <__flash_rwdata_start+0xffff70e4>
20093a48:	da802317 	ldw	r10,140(sp)
20093a4c:	00800c04 	movi	r2,48
20093a50:	dac02317 	ldw	r11,140(sp)
20093a54:	52400017 	ldw	r9,0(r10)
20093a58:	d8801d05 	stb	r2,116(sp)
20093a5c:	00801e04 	movi	r2,120
20093a60:	d8801d45 	stb	r2,117(sp)
20093a64:	00800034 	movhi	r2,0
20093a68:	10818404 	addi	r2,r2,1552
20093a6c:	5ac00104 	addi	r11,r11,4
20093a70:	d8802a15 	stw	r2,168(sp)
20093a74:	0015883a 	mov	r10,zero
20093a78:	8c400094 	ori	r17,r17,2
20093a7c:	dac02315 	stw	r11,140(sp)
20093a80:	00800084 	movi	r2,2
20093a84:	4807883a 	mov	r3,r9
20093a88:	003f9506 	br	200938e0 <__flash_rwdata_start+0xffff7298>
20093a8c:	d9801d85 	stb	r6,118(sp)
20093a90:	8880080c 	andi	r2,r17,32
20093a94:	d8c02317 	ldw	r3,140(sp)
20093a98:	10009b26 	beq	r2,zero,20093d08 <___svfiprintf_internal_r+0x70c>
20093a9c:	dac02317 	ldw	r11,140(sp)
20093aa0:	18800117 	ldw	r2,4(r3)
20093aa4:	1a400017 	ldw	r9,0(r3)
20093aa8:	5ac00204 	addi	r11,r11,8
20093aac:	dac02315 	stw	r11,140(sp)
20093ab0:	1015883a 	mov	r10,r2
20093ab4:	10009f16 	blt	r2,zero,20093d34 <___svfiprintf_internal_r+0x738>
20093ab8:	dac01d83 	ldbu	r11,118(sp)
20093abc:	8039883a 	mov	fp,r16
20093ac0:	00800044 	movi	r2,1
20093ac4:	4a86b03a 	or	r3,r9,r10
20093ac8:	003f8806 	br	200938ec <__flash_rwdata_start+0xffff72a4>
20093acc:	dac02317 	ldw	r11,140(sp)
20093ad0:	00c00044 	movi	r3,1
20093ad4:	da801004 	addi	r10,sp,64
20093ad8:	58800017 	ldw	r2,0(r11)
20093adc:	5ac00104 	addi	r11,r11,4
20093ae0:	d8c02015 	stw	r3,128(sp)
20093ae4:	d8001d85 	stb	zero,118(sp)
20093ae8:	d8801005 	stb	r2,64(sp)
20093aec:	dac02315 	stw	r11,140(sp)
20093af0:	1839883a 	mov	fp,r3
20093af4:	da802615 	stw	r10,152(sp)
20093af8:	0021883a 	mov	r16,zero
20093afc:	8a80008c 	andi	r10,r17,2
20093b00:	da802215 	stw	r10,136(sp)
20093b04:	50000326 	beq	r10,zero,20093b14 <___svfiprintf_internal_r+0x518>
20093b08:	dac02017 	ldw	r11,128(sp)
20093b0c:	5ac00084 	addi	r11,r11,2
20093b10:	dac02015 	stw	r11,128(sp)
20093b14:	88c0210c 	andi	r3,r17,132
20093b18:	d8c02515 	stw	r3,148(sp)
20093b1c:	1800bd1e 	bne	r3,zero,20093e14 <___svfiprintf_internal_r+0x818>
20093b20:	da802117 	ldw	r10,132(sp)
20093b24:	dac02017 	ldw	r11,128(sp)
20093b28:	52edc83a 	sub	r22,r10,r11
20093b2c:	0580b90e 	bge	zero,r22,20093e14 <___svfiprintf_internal_r+0x818>
20093b30:	02400404 	movi	r9,16
20093b34:	d8c01c17 	ldw	r3,112(sp)
20093b38:	d8801b17 	ldw	r2,108(sp)
20093b3c:	4d829b0e 	bge	r9,r22,200945ac <___svfiprintf_internal_r+0xfb0>
20093b40:	01400034 	movhi	r5,0
20093b44:	2941f004 	addi	r5,r5,1984
20093b48:	d9402815 	stw	r5,160(sp)
20093b4c:	05c001c4 	movi	r23,7
20093b50:	00000306 	br	20093b60 <___svfiprintf_internal_r+0x564>
20093b54:	b5bffc04 	addi	r22,r22,-16
20093b58:	42000204 	addi	r8,r8,8
20093b5c:	4d80150e 	bge	r9,r22,20093bb4 <___svfiprintf_internal_r+0x5b8>
20093b60:	02800034 	movhi	r10,0
20093b64:	18c00404 	addi	r3,r3,16
20093b68:	10800044 	addi	r2,r2,1
20093b6c:	5281f004 	addi	r10,r10,1984
20093b70:	42800015 	stw	r10,0(r8)
20093b74:	42400115 	stw	r9,4(r8)
20093b78:	d8c01c15 	stw	r3,112(sp)
20093b7c:	d8801b15 	stw	r2,108(sp)
20093b80:	b8bff40e 	bge	r23,r2,20093b54 <__flash_rwdata_start+0xffff750c>
20093b84:	9009883a 	mov	r4,r18
20093b88:	a00b883a 	mov	r5,r20
20093b8c:	d9801a04 	addi	r6,sp,104
20093b90:	da402c15 	stw	r9,176(sp)
20093b94:	00934300 	call	20093430 <__ssprint_r>
20093b98:	da402c17 	ldw	r9,176(sp)
20093b9c:	1001531e 	bne	r2,zero,200940ec <___svfiprintf_internal_r+0xaf0>
20093ba0:	b5bffc04 	addi	r22,r22,-16
20093ba4:	d8c01c17 	ldw	r3,112(sp)
20093ba8:	d8801b17 	ldw	r2,108(sp)
20093bac:	d811883a 	mov	r8,sp
20093bb0:	4dbfeb16 	blt	r9,r22,20093b60 <__flash_rwdata_start+0xffff7518>
20093bb4:	dac02817 	ldw	r11,160(sp)
20093bb8:	b0c7883a 	add	r3,r22,r3
20093bbc:	10800044 	addi	r2,r2,1
20093bc0:	42c00015 	stw	r11,0(r8)
20093bc4:	45800115 	stw	r22,4(r8)
20093bc8:	d8c01c15 	stw	r3,112(sp)
20093bcc:	d8801b15 	stw	r2,108(sp)
20093bd0:	010001c4 	movi	r4,7
20093bd4:	2081dd16 	blt	r4,r2,2009434c <___svfiprintf_internal_r+0xd50>
20093bd8:	42000204 	addi	r8,r8,8
20093bdc:	00008f06 	br	20093e1c <___svfiprintf_internal_r+0x820>
20093be0:	00800034 	movhi	r2,0
20093be4:	10817f04 	addi	r2,r2,1532
20093be8:	d8802a15 	stw	r2,168(sp)
20093bec:	d9801d85 	stb	r6,118(sp)
20093bf0:	8880080c 	andi	r2,r17,32
20093bf4:	10003226 	beq	r2,zero,20093cc0 <___svfiprintf_internal_r+0x6c4>
20093bf8:	da802317 	ldw	r10,140(sp)
20093bfc:	dac02317 	ldw	r11,140(sp)
20093c00:	52400017 	ldw	r9,0(r10)
20093c04:	52800117 	ldw	r10,4(r10)
20093c08:	5ac00204 	addi	r11,r11,8
20093c0c:	dac02315 	stw	r11,140(sp)
20093c10:	8880004c 	andi	r2,r17,1
20093c14:	10003426 	beq	r2,zero,20093ce8 <___svfiprintf_internal_r+0x6ec>
20093c18:	4a86b03a 	or	r3,r9,r10
20093c1c:	1802231e 	bne	r3,zero,200944ac <___svfiprintf_internal_r+0xeb0>
20093c20:	00800084 	movi	r2,2
20093c24:	003f2e06 	br	200938e0 <__flash_rwdata_start+0xffff7298>
20093c28:	a9000007 	ldb	r4,0(r21)
20093c2c:	a805883a 	mov	r2,r21
20093c30:	21c22426 	beq	r4,r7,200944c4 <___svfiprintf_internal_r+0xec8>
20093c34:	8c400414 	ori	r17,r17,16
20093c38:	003ebc06 	br	2009372c <__flash_rwdata_start+0xffff70e4>
20093c3c:	8c401014 	ori	r17,r17,64
20093c40:	a9000007 	ldb	r4,0(r21)
20093c44:	003eb906 	br	2009372c <__flash_rwdata_start+0xffff70e4>
20093c48:	d9801d85 	stb	r6,118(sp)
20093c4c:	8880080c 	andi	r2,r17,32
20093c50:	10020d1e 	bne	r2,zero,20094488 <___svfiprintf_internal_r+0xe8c>
20093c54:	8880040c 	andi	r2,r17,16
20093c58:	10021e1e 	bne	r2,zero,200944d4 <___svfiprintf_internal_r+0xed8>
20093c5c:	8c40100c 	andi	r17,r17,64
20093c60:	88021c26 	beq	r17,zero,200944d4 <___svfiprintf_internal_r+0xed8>
20093c64:	dac02317 	ldw	r11,140(sp)
20093c68:	da802417 	ldw	r10,144(sp)
20093c6c:	58800017 	ldw	r2,0(r11)
20093c70:	5ac00104 	addi	r11,r11,4
20093c74:	dac02315 	stw	r11,140(sp)
20093c78:	1280000d 	sth	r10,0(r2)
20093c7c:	003e8306 	br	2009368c <__flash_rwdata_start+0xffff7044>
20093c80:	8c400054 	ori	r17,r17,1
20093c84:	a9000007 	ldb	r4,0(r21)
20093c88:	003ea806 	br	2009372c <__flash_rwdata_start+0xffff70e4>
20093c8c:	30803fcc 	andi	r2,r6,255
20093c90:	1080201c 	xori	r2,r2,128
20093c94:	10bfe004 	addi	r2,r2,-128
20093c98:	1001f91e 	bne	r2,zero,20094480 <___svfiprintf_internal_r+0xe84>
20093c9c:	01800804 	movi	r6,32
20093ca0:	a9000007 	ldb	r4,0(r21)
20093ca4:	003ea106 	br	2009372c <__flash_rwdata_start+0xffff70e4>
20093ca8:	00800034 	movhi	r2,0
20093cac:	10818404 	addi	r2,r2,1552
20093cb0:	d8802a15 	stw	r2,168(sp)
20093cb4:	d9801d85 	stb	r6,118(sp)
20093cb8:	8880080c 	andi	r2,r17,32
20093cbc:	103fce1e 	bne	r2,zero,20093bf8 <__flash_rwdata_start+0xffff75b0>
20093cc0:	8880040c 	andi	r2,r17,16
20093cc4:	1001e526 	beq	r2,zero,2009445c <___svfiprintf_internal_r+0xe60>
20093cc8:	da802317 	ldw	r10,140(sp)
20093ccc:	dac02317 	ldw	r11,140(sp)
20093cd0:	52400017 	ldw	r9,0(r10)
20093cd4:	8880004c 	andi	r2,r17,1
20093cd8:	5ac00104 	addi	r11,r11,4
20093cdc:	dac02315 	stw	r11,140(sp)
20093ce0:	0015883a 	mov	r10,zero
20093ce4:	103fcc1e 	bne	r2,zero,20093c18 <__flash_rwdata_start+0xffff75d0>
20093ce8:	00800084 	movi	r2,2
20093cec:	4a86b03a 	or	r3,r9,r10
20093cf0:	003efb06 	br	200938e0 <__flash_rwdata_start+0xffff7298>
20093cf4:	8c400414 	ori	r17,r17,16
20093cf8:	d9801d85 	stb	r6,118(sp)
20093cfc:	8880080c 	andi	r2,r17,32
20093d00:	d8c02317 	ldw	r3,140(sp)
20093d04:	103f651e 	bne	r2,zero,20093a9c <__flash_rwdata_start+0xffff7454>
20093d08:	8880040c 	andi	r2,r17,16
20093d0c:	1001c61e 	bne	r2,zero,20094428 <___svfiprintf_internal_r+0xe2c>
20093d10:	8880100c 	andi	r2,r17,64
20093d14:	1001c426 	beq	r2,zero,20094428 <___svfiprintf_internal_r+0xe2c>
20093d18:	1a40000f 	ldh	r9,0(r3)
20093d1c:	dac02317 	ldw	r11,140(sp)
20093d20:	4815d7fa 	srai	r10,r9,31
20093d24:	5ac00104 	addi	r11,r11,4
20093d28:	dac02315 	stw	r11,140(sp)
20093d2c:	5005883a 	mov	r2,r10
20093d30:	103f610e 	bge	r2,zero,20093ab8 <__flash_rwdata_start+0xffff7470>
20093d34:	0253c83a 	sub	r9,zero,r9
20093d38:	4804c03a 	cmpne	r2,r9,zero
20093d3c:	0295c83a 	sub	r10,zero,r10
20093d40:	5095c83a 	sub	r10,r10,r2
20093d44:	02c00b44 	movi	r11,45
20093d48:	dac01d85 	stb	r11,118(sp)
20093d4c:	8039883a 	mov	fp,r16
20093d50:	00800044 	movi	r2,1
20093d54:	4a86b03a 	or	r3,r9,r10
20093d58:	003ee406 	br	200938ec <__flash_rwdata_start+0xffff72a4>
20093d5c:	a815883a 	mov	r10,r21
20093d60:	d8002115 	stw	zero,132(sp)
20093d64:	20bff404 	addi	r2,r4,-48
20093d68:	51000007 	ldb	r4,0(r10)
20093d6c:	da802117 	ldw	r10,132(sp)
20093d70:	ad400044 	addi	r21,r21,1
20093d74:	52c002a4 	muli	r11,r10,10
20093d78:	a815883a 	mov	r10,r21
20093d7c:	5885883a 	add	r2,r11,r2
20093d80:	d8802115 	stw	r2,132(sp)
20093d84:	20bff404 	addi	r2,r4,-48
20093d88:	28bff72e 	bgeu	r5,r2,20093d68 <__flash_rwdata_start+0xffff7720>
20093d8c:	20bff804 	addi	r2,r4,-32
20093d90:	18be692e 	bgeu	r3,r2,20093738 <__flash_rwdata_start+0xffff70f0>
20093d94:	d9801d85 	stb	r6,118(sp)
20093d98:	2000ce26 	beq	r4,zero,200940d4 <___svfiprintf_internal_r+0xad8>
20093d9c:	02800044 	movi	r10,1
20093da0:	dac01004 	addi	r11,sp,64
20093da4:	da802015 	stw	r10,128(sp)
20093da8:	d9001005 	stb	r4,64(sp)
20093dac:	d8001d85 	stb	zero,118(sp)
20093db0:	5039883a 	mov	fp,r10
20093db4:	dac02615 	stw	r11,152(sp)
20093db8:	003f4f06 	br	20093af8 <__flash_rwdata_start+0xffff74b0>
20093dbc:	8c402014 	ori	r17,r17,128
20093dc0:	a9000007 	ldb	r4,0(r21)
20093dc4:	003e5906 	br	2009372c <__flash_rwdata_start+0xffff70e4>
20093dc8:	01800ac4 	movi	r6,43
20093dcc:	a9000007 	ldb	r4,0(r21)
20093dd0:	003e5606 	br	2009372c <__flash_rwdata_start+0xffff70e4>
20093dd4:	a9000007 	ldb	r4,0(r21)
20093dd8:	aa800044 	addi	r10,r21,1
20093ddc:	22420626 	beq	r4,r9,200945f8 <___svfiprintf_internal_r+0xffc>
20093de0:	20bff404 	addi	r2,r4,-48
20093de4:	502b883a 	mov	r21,r10
20093de8:	0021883a 	mov	r16,zero
20093dec:	28be5036 	bltu	r5,r2,20093730 <__flash_rwdata_start+0xffff70e8>
20093df0:	a9000007 	ldb	r4,0(r21)
20093df4:	840002a4 	muli	r16,r16,10
20093df8:	ad400044 	addi	r21,r21,1
20093dfc:	1421883a 	add	r16,r2,r16
20093e00:	20bff404 	addi	r2,r4,-48
20093e04:	28bffa2e 	bgeu	r5,r2,20093df0 <__flash_rwdata_start+0xffff77a8>
20093e08:	803e490e 	bge	r16,zero,20093730 <__flash_rwdata_start+0xffff70e8>
20093e0c:	043fffc4 	movi	r16,-1
20093e10:	003e4706 	br	20093730 <__flash_rwdata_start+0xffff70e8>
20093e14:	d8c01c17 	ldw	r3,112(sp)
20093e18:	d8801b17 	ldw	r2,108(sp)
20093e1c:	d9001d87 	ldb	r4,118(sp)
20093e20:	20000b26 	beq	r4,zero,20093e50 <___svfiprintf_internal_r+0x854>
20093e24:	d9001d84 	addi	r4,sp,118
20093e28:	18c00044 	addi	r3,r3,1
20093e2c:	10800044 	addi	r2,r2,1
20093e30:	41000015 	stw	r4,0(r8)
20093e34:	01000044 	movi	r4,1
20093e38:	41000115 	stw	r4,4(r8)
20093e3c:	d8c01c15 	stw	r3,112(sp)
20093e40:	d8801b15 	stw	r2,108(sp)
20093e44:	010001c4 	movi	r4,7
20093e48:	20811e16 	blt	r4,r2,200942c4 <___svfiprintf_internal_r+0xcc8>
20093e4c:	42000204 	addi	r8,r8,8
20093e50:	da802217 	ldw	r10,136(sp)
20093e54:	50000b26 	beq	r10,zero,20093e84 <___svfiprintf_internal_r+0x888>
20093e58:	d9001d04 	addi	r4,sp,116
20093e5c:	18c00084 	addi	r3,r3,2
20093e60:	10800044 	addi	r2,r2,1
20093e64:	41000015 	stw	r4,0(r8)
20093e68:	01000084 	movi	r4,2
20093e6c:	41000115 	stw	r4,4(r8)
20093e70:	d8c01c15 	stw	r3,112(sp)
20093e74:	d8801b15 	stw	r2,108(sp)
20093e78:	010001c4 	movi	r4,7
20093e7c:	20811a16 	blt	r4,r2,200942e8 <___svfiprintf_internal_r+0xcec>
20093e80:	42000204 	addi	r8,r8,8
20093e84:	dac02517 	ldw	r11,148(sp)
20093e88:	01002004 	movi	r4,128
20093e8c:	5900a826 	beq	r11,r4,20094130 <___svfiprintf_internal_r+0xb34>
20093e90:	8721c83a 	sub	r16,r16,fp
20093e94:	0400260e 	bge	zero,r16,20093f30 <___svfiprintf_internal_r+0x934>
20093e98:	01c00404 	movi	r7,16
20093e9c:	3c019d0e 	bge	r7,r16,20094514 <___svfiprintf_internal_r+0xf18>
20093ea0:	01000034 	movhi	r4,0
20093ea4:	2101ec04 	addi	r4,r4,1968
20093ea8:	d9002215 	stw	r4,136(sp)
20093eac:	382f883a 	mov	r23,r7
20093eb0:	058001c4 	movi	r22,7
20093eb4:	00000306 	br	20093ec4 <___svfiprintf_internal_r+0x8c8>
20093eb8:	843ffc04 	addi	r16,r16,-16
20093ebc:	42000204 	addi	r8,r8,8
20093ec0:	bc00110e 	bge	r23,r16,20093f08 <___svfiprintf_internal_r+0x90c>
20093ec4:	18c00404 	addi	r3,r3,16
20093ec8:	10800044 	addi	r2,r2,1
20093ecc:	44c00015 	stw	r19,0(r8)
20093ed0:	45c00115 	stw	r23,4(r8)
20093ed4:	d8c01c15 	stw	r3,112(sp)
20093ed8:	d8801b15 	stw	r2,108(sp)
20093edc:	b0bff60e 	bge	r22,r2,20093eb8 <__flash_rwdata_start+0xffff7870>
20093ee0:	9009883a 	mov	r4,r18
20093ee4:	a00b883a 	mov	r5,r20
20093ee8:	d9801a04 	addi	r6,sp,104
20093eec:	00934300 	call	20093430 <__ssprint_r>
20093ef0:	10007e1e 	bne	r2,zero,200940ec <___svfiprintf_internal_r+0xaf0>
20093ef4:	843ffc04 	addi	r16,r16,-16
20093ef8:	d8c01c17 	ldw	r3,112(sp)
20093efc:	d8801b17 	ldw	r2,108(sp)
20093f00:	d811883a 	mov	r8,sp
20093f04:	bc3fef16 	blt	r23,r16,20093ec4 <__flash_rwdata_start+0xffff787c>
20093f08:	da802217 	ldw	r10,136(sp)
20093f0c:	1c07883a 	add	r3,r3,r16
20093f10:	10800044 	addi	r2,r2,1
20093f14:	42800015 	stw	r10,0(r8)
20093f18:	44000115 	stw	r16,4(r8)
20093f1c:	d8c01c15 	stw	r3,112(sp)
20093f20:	d8801b15 	stw	r2,108(sp)
20093f24:	010001c4 	movi	r4,7
20093f28:	2080ce16 	blt	r4,r2,20094264 <___svfiprintf_internal_r+0xc68>
20093f2c:	42000204 	addi	r8,r8,8
20093f30:	dac02617 	ldw	r11,152(sp)
20093f34:	1f07883a 	add	r3,r3,fp
20093f38:	10800044 	addi	r2,r2,1
20093f3c:	42c00015 	stw	r11,0(r8)
20093f40:	47000115 	stw	fp,4(r8)
20093f44:	d8c01c15 	stw	r3,112(sp)
20093f48:	d8801b15 	stw	r2,108(sp)
20093f4c:	010001c4 	movi	r4,7
20093f50:	2080a316 	blt	r4,r2,200941e0 <___svfiprintf_internal_r+0xbe4>
20093f54:	42000204 	addi	r8,r8,8
20093f58:	8c40010c 	andi	r17,r17,4
20093f5c:	88002b26 	beq	r17,zero,2009400c <___svfiprintf_internal_r+0xa10>
20093f60:	da802117 	ldw	r10,132(sp)
20093f64:	dac02017 	ldw	r11,128(sp)
20093f68:	52e1c83a 	sub	r16,r10,r11
20093f6c:	0400270e 	bge	zero,r16,2009400c <___svfiprintf_internal_r+0xa10>
20093f70:	04400404 	movi	r17,16
20093f74:	d8801b17 	ldw	r2,108(sp)
20093f78:	8c01900e 	bge	r17,r16,200945bc <___svfiprintf_internal_r+0xfc0>
20093f7c:	01400034 	movhi	r5,0
20093f80:	2941f004 	addi	r5,r5,1984
20093f84:	d9402815 	stw	r5,160(sp)
20093f88:	070001c4 	movi	fp,7
20093f8c:	00000306 	br	20093f9c <___svfiprintf_internal_r+0x9a0>
20093f90:	843ffc04 	addi	r16,r16,-16
20093f94:	42000204 	addi	r8,r8,8
20093f98:	8c00130e 	bge	r17,r16,20093fe8 <___svfiprintf_internal_r+0x9ec>
20093f9c:	02800034 	movhi	r10,0
20093fa0:	18c00404 	addi	r3,r3,16
20093fa4:	10800044 	addi	r2,r2,1
20093fa8:	5281f004 	addi	r10,r10,1984
20093fac:	42800015 	stw	r10,0(r8)
20093fb0:	44400115 	stw	r17,4(r8)
20093fb4:	d8c01c15 	stw	r3,112(sp)
20093fb8:	d8801b15 	stw	r2,108(sp)
20093fbc:	e0bff40e 	bge	fp,r2,20093f90 <__flash_rwdata_start+0xffff7948>
20093fc0:	9009883a 	mov	r4,r18
20093fc4:	a00b883a 	mov	r5,r20
20093fc8:	d9801a04 	addi	r6,sp,104
20093fcc:	00934300 	call	20093430 <__ssprint_r>
20093fd0:	1000461e 	bne	r2,zero,200940ec <___svfiprintf_internal_r+0xaf0>
20093fd4:	843ffc04 	addi	r16,r16,-16
20093fd8:	d8c01c17 	ldw	r3,112(sp)
20093fdc:	d8801b17 	ldw	r2,108(sp)
20093fe0:	d811883a 	mov	r8,sp
20093fe4:	8c3fed16 	blt	r17,r16,20093f9c <__flash_rwdata_start+0xffff7954>
20093fe8:	dac02817 	ldw	r11,160(sp)
20093fec:	1c07883a 	add	r3,r3,r16
20093ff0:	10800044 	addi	r2,r2,1
20093ff4:	42c00015 	stw	r11,0(r8)
20093ff8:	44000115 	stw	r16,4(r8)
20093ffc:	d8c01c15 	stw	r3,112(sp)
20094000:	d8801b15 	stw	r2,108(sp)
20094004:	010001c4 	movi	r4,7
20094008:	2080fd16 	blt	r4,r2,20094400 <___svfiprintf_internal_r+0xe04>
2009400c:	dd802017 	ldw	r22,128(sp)
20094010:	da802117 	ldw	r10,132(sp)
20094014:	b280010e 	bge	r22,r10,2009401c <___svfiprintf_internal_r+0xa20>
20094018:	502d883a 	mov	r22,r10
2009401c:	dac02417 	ldw	r11,144(sp)
20094020:	5d97883a 	add	r11,r11,r22
20094024:	dac02415 	stw	r11,144(sp)
20094028:	1800751e 	bne	r3,zero,20094200 <___svfiprintf_internal_r+0xc04>
2009402c:	a8800007 	ldb	r2,0(r21)
20094030:	d8001b15 	stw	zero,108(sp)
20094034:	d811883a 	mov	r8,sp
20094038:	103d961e 	bne	r2,zero,20093694 <__flash_rwdata_start+0xffff704c>
2009403c:	a82d883a 	mov	r22,r21
20094040:	003dad06 	br	200936f8 <__flash_rwdata_start+0xffff70b0>
20094044:	10803fcc 	andi	r2,r2,255
20094048:	00c00044 	movi	r3,1
2009404c:	10fe2f1e 	bne	r2,r3,2009390c <__flash_rwdata_start+0xffff72c4>
20094050:	5000e026 	beq	r10,zero,200943d4 <___svfiprintf_internal_r+0xdd8>
20094054:	dc002015 	stw	r16,128(sp)
20094058:	dc402215 	stw	r17,136(sp)
2009405c:	dd801a04 	addi	r22,sp,104
20094060:	402f883a 	mov	r23,r8
20094064:	5839883a 	mov	fp,r11
20094068:	4821883a 	mov	r16,r9
2009406c:	5023883a 	mov	r17,r10
20094070:	8009883a 	mov	r4,r16
20094074:	880b883a 	mov	r5,r17
20094078:	01800284 	movi	r6,10
2009407c:	000f883a 	mov	r7,zero
20094080:	00969b00 	call	200969b0 <__umoddi3>
20094084:	10800c04 	addi	r2,r2,48
20094088:	b5bfffc4 	addi	r22,r22,-1
2009408c:	8009883a 	mov	r4,r16
20094090:	880b883a 	mov	r5,r17
20094094:	01800284 	movi	r6,10
20094098:	000f883a 	mov	r7,zero
2009409c:	b0800005 	stb	r2,0(r22)
200940a0:	00963f00 	call	200963f0 <__udivdi3>
200940a4:	1021883a 	mov	r16,r2
200940a8:	10c4b03a 	or	r2,r2,r3
200940ac:	1823883a 	mov	r17,r3
200940b0:	103fef1e 	bne	r2,zero,20094070 <__flash_rwdata_start+0xffff7a28>
200940b4:	da801e17 	ldw	r10,120(sp)
200940b8:	e017883a 	mov	r11,fp
200940bc:	dc002017 	ldw	r16,128(sp)
200940c0:	dc402217 	ldw	r17,136(sp)
200940c4:	b811883a 	mov	r8,r23
200940c8:	dd802615 	stw	r22,152(sp)
200940cc:	55b9c83a 	sub	fp,r10,r22
200940d0:	003e2006 	br	20093954 <__flash_rwdata_start+0xffff730c>
200940d4:	d8801c17 	ldw	r2,112(sp)
200940d8:	10000426 	beq	r2,zero,200940ec <___svfiprintf_internal_r+0xaf0>
200940dc:	d9002917 	ldw	r4,164(sp)
200940e0:	d9402717 	ldw	r5,156(sp)
200940e4:	d9801a04 	addi	r6,sp,104
200940e8:	00934300 	call	20093430 <__ssprint_r>
200940ec:	da802717 	ldw	r10,156(sp)
200940f0:	5080030b 	ldhu	r2,12(r10)
200940f4:	1080100c 	andi	r2,r2,64
200940f8:	1000511e 	bne	r2,zero,20094240 <___svfiprintf_internal_r+0xc44>
200940fc:	d8802417 	ldw	r2,144(sp)
20094100:	dfc03617 	ldw	ra,216(sp)
20094104:	df003517 	ldw	fp,212(sp)
20094108:	ddc03417 	ldw	r23,208(sp)
2009410c:	dd803317 	ldw	r22,204(sp)
20094110:	dd403217 	ldw	r21,200(sp)
20094114:	dd003117 	ldw	r20,196(sp)
20094118:	dcc03017 	ldw	r19,192(sp)
2009411c:	dc802f17 	ldw	r18,188(sp)
20094120:	dc402e17 	ldw	r17,184(sp)
20094124:	dc002d17 	ldw	r16,180(sp)
20094128:	dec03704 	addi	sp,sp,220
2009412c:	f800283a 	ret
20094130:	da802117 	ldw	r10,132(sp)
20094134:	dac02017 	ldw	r11,128(sp)
20094138:	52edc83a 	sub	r22,r10,r11
2009413c:	05bf540e 	bge	zero,r22,20093e90 <__flash_rwdata_start+0xffff7848>
20094140:	02400404 	movi	r9,16
20094144:	4d81210e 	bge	r9,r22,200945cc <___svfiprintf_internal_r+0xfd0>
20094148:	01400034 	movhi	r5,0
2009414c:	2941ec04 	addi	r5,r5,1968
20094150:	d9402215 	stw	r5,136(sp)
20094154:	05c001c4 	movi	r23,7
20094158:	00000306 	br	20094168 <___svfiprintf_internal_r+0xb6c>
2009415c:	b5bffc04 	addi	r22,r22,-16
20094160:	42000204 	addi	r8,r8,8
20094164:	4d80130e 	bge	r9,r22,200941b4 <___svfiprintf_internal_r+0xbb8>
20094168:	18c00404 	addi	r3,r3,16
2009416c:	10800044 	addi	r2,r2,1
20094170:	44c00015 	stw	r19,0(r8)
20094174:	42400115 	stw	r9,4(r8)
20094178:	d8c01c15 	stw	r3,112(sp)
2009417c:	d8801b15 	stw	r2,108(sp)
20094180:	b8bff60e 	bge	r23,r2,2009415c <__flash_rwdata_start+0xffff7b14>
20094184:	9009883a 	mov	r4,r18
20094188:	a00b883a 	mov	r5,r20
2009418c:	d9801a04 	addi	r6,sp,104
20094190:	da402c15 	stw	r9,176(sp)
20094194:	00934300 	call	20093430 <__ssprint_r>
20094198:	da402c17 	ldw	r9,176(sp)
2009419c:	103fd31e 	bne	r2,zero,200940ec <__flash_rwdata_start+0xffff7aa4>
200941a0:	b5bffc04 	addi	r22,r22,-16
200941a4:	d8c01c17 	ldw	r3,112(sp)
200941a8:	d8801b17 	ldw	r2,108(sp)
200941ac:	d811883a 	mov	r8,sp
200941b0:	4dbfed16 	blt	r9,r22,20094168 <__flash_rwdata_start+0xffff7b20>
200941b4:	da802217 	ldw	r10,136(sp)
200941b8:	1d87883a 	add	r3,r3,r22
200941bc:	10800044 	addi	r2,r2,1
200941c0:	42800015 	stw	r10,0(r8)
200941c4:	45800115 	stw	r22,4(r8)
200941c8:	d8c01c15 	stw	r3,112(sp)
200941cc:	d8801b15 	stw	r2,108(sp)
200941d0:	010001c4 	movi	r4,7
200941d4:	2080c616 	blt	r4,r2,200944f0 <___svfiprintf_internal_r+0xef4>
200941d8:	42000204 	addi	r8,r8,8
200941dc:	003f2c06 	br	20093e90 <__flash_rwdata_start+0xffff7848>
200941e0:	9009883a 	mov	r4,r18
200941e4:	a00b883a 	mov	r5,r20
200941e8:	d9801a04 	addi	r6,sp,104
200941ec:	00934300 	call	20093430 <__ssprint_r>
200941f0:	103fbe1e 	bne	r2,zero,200940ec <__flash_rwdata_start+0xffff7aa4>
200941f4:	d8c01c17 	ldw	r3,112(sp)
200941f8:	d811883a 	mov	r8,sp
200941fc:	003f5606 	br	20093f58 <__flash_rwdata_start+0xffff7910>
20094200:	9009883a 	mov	r4,r18
20094204:	a00b883a 	mov	r5,r20
20094208:	d9801a04 	addi	r6,sp,104
2009420c:	00934300 	call	20093430 <__ssprint_r>
20094210:	103f8626 	beq	r2,zero,2009402c <__flash_rwdata_start+0xffff79e4>
20094214:	003fb506 	br	200940ec <__flash_rwdata_start+0xffff7aa4>
20094218:	10803fcc 	andi	r2,r2,255
2009421c:	10003b1e 	bne	r2,zero,2009430c <___svfiprintf_internal_r+0xd10>
20094220:	8880004c 	andi	r2,r17,1
20094224:	10007d26 	beq	r2,zero,2009441c <___svfiprintf_internal_r+0xe20>
20094228:	00800c04 	movi	r2,48
2009422c:	d8c019c4 	addi	r3,sp,103
20094230:	d88019c5 	stb	r2,103(sp)
20094234:	df002b17 	ldw	fp,172(sp)
20094238:	d8c02615 	stw	r3,152(sp)
2009423c:	003dc506 	br	20093954 <__flash_rwdata_start+0xffff730c>
20094240:	00bfffc4 	movi	r2,-1
20094244:	003fae06 	br	20094100 <__flash_rwdata_start+0xffff7ab8>
20094248:	9009883a 	mov	r4,r18
2009424c:	a00b883a 	mov	r5,r20
20094250:	d9801a04 	addi	r6,sp,104
20094254:	00934300 	call	20093430 <__ssprint_r>
20094258:	103fa41e 	bne	r2,zero,200940ec <__flash_rwdata_start+0xffff7aa4>
2009425c:	d811883a 	mov	r8,sp
20094260:	003d2206 	br	200936ec <__flash_rwdata_start+0xffff70a4>
20094264:	9009883a 	mov	r4,r18
20094268:	a00b883a 	mov	r5,r20
2009426c:	d9801a04 	addi	r6,sp,104
20094270:	00934300 	call	20093430 <__ssprint_r>
20094274:	103f9d1e 	bne	r2,zero,200940ec <__flash_rwdata_start+0xffff7aa4>
20094278:	d8c01c17 	ldw	r3,112(sp)
2009427c:	d8801b17 	ldw	r2,108(sp)
20094280:	d811883a 	mov	r8,sp
20094284:	003f2a06 	br	20093f30 <__flash_rwdata_start+0xffff78e8>
20094288:	d9402a17 	ldw	r5,168(sp)
2009428c:	d8c01a04 	addi	r3,sp,104
20094290:	488003cc 	andi	r2,r9,15
20094294:	5008973a 	slli	r4,r10,28
20094298:	2885883a 	add	r2,r5,r2
2009429c:	4812d13a 	srli	r9,r9,4
200942a0:	10800003 	ldbu	r2,0(r2)
200942a4:	5014d13a 	srli	r10,r10,4
200942a8:	18ffffc4 	addi	r3,r3,-1
200942ac:	2252b03a 	or	r9,r4,r9
200942b0:	18800005 	stb	r2,0(r3)
200942b4:	4a84b03a 	or	r2,r9,r10
200942b8:	103ff51e 	bne	r2,zero,20094290 <__flash_rwdata_start+0xffff7c48>
200942bc:	d8c02615 	stw	r3,152(sp)
200942c0:	003da206 	br	2009394c <__flash_rwdata_start+0xffff7304>
200942c4:	9009883a 	mov	r4,r18
200942c8:	a00b883a 	mov	r5,r20
200942cc:	d9801a04 	addi	r6,sp,104
200942d0:	00934300 	call	20093430 <__ssprint_r>
200942d4:	103f851e 	bne	r2,zero,200940ec <__flash_rwdata_start+0xffff7aa4>
200942d8:	d8c01c17 	ldw	r3,112(sp)
200942dc:	d8801b17 	ldw	r2,108(sp)
200942e0:	d811883a 	mov	r8,sp
200942e4:	003eda06 	br	20093e50 <__flash_rwdata_start+0xffff7808>
200942e8:	9009883a 	mov	r4,r18
200942ec:	a00b883a 	mov	r5,r20
200942f0:	d9801a04 	addi	r6,sp,104
200942f4:	00934300 	call	20093430 <__ssprint_r>
200942f8:	103f7c1e 	bne	r2,zero,200940ec <__flash_rwdata_start+0xffff7aa4>
200942fc:	d8c01c17 	ldw	r3,112(sp)
20094300:	d8801b17 	ldw	r2,108(sp)
20094304:	d811883a 	mov	r8,sp
20094308:	003ede06 	br	20093e84 <__flash_rwdata_start+0xffff783c>
2009430c:	da801a04 	addi	r10,sp,104
20094310:	da802615 	stw	r10,152(sp)
20094314:	003d8f06 	br	20093954 <__flash_rwdata_start+0xffff730c>
20094318:	8880040c 	andi	r2,r17,16
2009431c:	10004c1e 	bne	r2,zero,20094450 <___svfiprintf_internal_r+0xe54>
20094320:	8880100c 	andi	r2,r17,64
20094324:	da802317 	ldw	r10,140(sp)
20094328:	10004a26 	beq	r2,zero,20094454 <___svfiprintf_internal_r+0xe58>
2009432c:	5240000b 	ldhu	r9,0(r10)
20094330:	dac02317 	ldw	r11,140(sp)
20094334:	0015883a 	mov	r10,zero
20094338:	00800044 	movi	r2,1
2009433c:	5ac00104 	addi	r11,r11,4
20094340:	dac02315 	stw	r11,140(sp)
20094344:	4807883a 	mov	r3,r9
20094348:	003d6506 	br	200938e0 <__flash_rwdata_start+0xffff7298>
2009434c:	9009883a 	mov	r4,r18
20094350:	a00b883a 	mov	r5,r20
20094354:	d9801a04 	addi	r6,sp,104
20094358:	00934300 	call	20093430 <__ssprint_r>
2009435c:	103f631e 	bne	r2,zero,200940ec <__flash_rwdata_start+0xffff7aa4>
20094360:	d8c01c17 	ldw	r3,112(sp)
20094364:	d8801b17 	ldw	r2,108(sp)
20094368:	d811883a 	mov	r8,sp
2009436c:	003eab06 	br	20093e1c <__flash_rwdata_start+0xffff77d4>
20094370:	8880040c 	andi	r2,r17,16
20094374:	1000331e 	bne	r2,zero,20094444 <___svfiprintf_internal_r+0xe48>
20094378:	8880100c 	andi	r2,r17,64
2009437c:	da802317 	ldw	r10,140(sp)
20094380:	10003126 	beq	r2,zero,20094448 <___svfiprintf_internal_r+0xe4c>
20094384:	5240000b 	ldhu	r9,0(r10)
20094388:	dac02317 	ldw	r11,140(sp)
2009438c:	0015883a 	mov	r10,zero
20094390:	0005883a 	mov	r2,zero
20094394:	5ac00104 	addi	r11,r11,4
20094398:	dac02315 	stw	r11,140(sp)
2009439c:	4807883a 	mov	r3,r9
200943a0:	003d4f06 	br	200938e0 <__flash_rwdata_start+0xffff7298>
200943a4:	10803fcc 	andi	r2,r2,255
200943a8:	1080201c 	xori	r2,r2,128
200943ac:	10bfe004 	addi	r2,r2,-128
200943b0:	01000c04 	movi	r4,48
200943b4:	11005b26 	beq	r2,r4,20094524 <___svfiprintf_internal_r+0xf28>
200943b8:	da802617 	ldw	r10,152(sp)
200943bc:	d8801e17 	ldw	r2,120(sp)
200943c0:	193fffc5 	stb	r4,-1(r3)
200943c4:	52bfffc4 	addi	r10,r10,-1
200943c8:	da802615 	stw	r10,152(sp)
200943cc:	12b9c83a 	sub	fp,r2,r10
200943d0:	003d6006 	br	20093954 <__flash_rwdata_start+0xffff730c>
200943d4:	00800244 	movi	r2,9
200943d8:	127f1e36 	bltu	r2,r9,20094054 <__flash_rwdata_start+0xffff7a0c>
200943dc:	4a400c04 	addi	r9,r9,48
200943e0:	d8c019c4 	addi	r3,sp,103
200943e4:	da4019c5 	stb	r9,103(sp)
200943e8:	df002b17 	ldw	fp,172(sp)
200943ec:	d8c02615 	stw	r3,152(sp)
200943f0:	003d5806 	br	20093954 <__flash_rwdata_start+0xffff730c>
200943f4:	d8802315 	stw	r2,140(sp)
200943f8:	a9000007 	ldb	r4,0(r21)
200943fc:	003ccb06 	br	2009372c <__flash_rwdata_start+0xffff70e4>
20094400:	9009883a 	mov	r4,r18
20094404:	a00b883a 	mov	r5,r20
20094408:	d9801a04 	addi	r6,sp,104
2009440c:	00934300 	call	20093430 <__ssprint_r>
20094410:	103f361e 	bne	r2,zero,200940ec <__flash_rwdata_start+0xffff7aa4>
20094414:	d8c01c17 	ldw	r3,112(sp)
20094418:	003efc06 	br	2009400c <__flash_rwdata_start+0xffff79c4>
2009441c:	d8c01a04 	addi	r3,sp,104
20094420:	d8c02615 	stw	r3,152(sp)
20094424:	003d4b06 	br	20093954 <__flash_rwdata_start+0xffff730c>
20094428:	da802317 	ldw	r10,140(sp)
2009442c:	1a400017 	ldw	r9,0(r3)
20094430:	52800104 	addi	r10,r10,4
20094434:	da802315 	stw	r10,140(sp)
20094438:	4815d7fa 	srai	r10,r9,31
2009443c:	5005883a 	mov	r2,r10
20094440:	003d9c06 	br	20093ab4 <__flash_rwdata_start+0xffff746c>
20094444:	da802317 	ldw	r10,140(sp)
20094448:	52400017 	ldw	r9,0(r10)
2009444c:	003fce06 	br	20094388 <__flash_rwdata_start+0xffff7d40>
20094450:	da802317 	ldw	r10,140(sp)
20094454:	52400017 	ldw	r9,0(r10)
20094458:	003fb506 	br	20094330 <__flash_rwdata_start+0xffff7ce8>
2009445c:	8880100c 	andi	r2,r17,64
20094460:	da802317 	ldw	r10,140(sp)
20094464:	103e1926 	beq	r2,zero,20093ccc <__flash_rwdata_start+0xffff7684>
20094468:	dac02317 	ldw	r11,140(sp)
2009446c:	5240000b 	ldhu	r9,0(r10)
20094470:	0015883a 	mov	r10,zero
20094474:	5ac00104 	addi	r11,r11,4
20094478:	dac02315 	stw	r11,140(sp)
2009447c:	003de406 	br	20093c10 <__flash_rwdata_start+0xffff75c8>
20094480:	a9000007 	ldb	r4,0(r21)
20094484:	003ca906 	br	2009372c <__flash_rwdata_start+0xffff70e4>
20094488:	dac02317 	ldw	r11,140(sp)
2009448c:	da802417 	ldw	r10,144(sp)
20094490:	58800017 	ldw	r2,0(r11)
20094494:	5007d7fa 	srai	r3,r10,31
20094498:	5ac00104 	addi	r11,r11,4
2009449c:	dac02315 	stw	r11,140(sp)
200944a0:	12800015 	stw	r10,0(r2)
200944a4:	10c00115 	stw	r3,4(r2)
200944a8:	003c7806 	br	2009368c <__flash_rwdata_start+0xffff7044>
200944ac:	00800c04 	movi	r2,48
200944b0:	d8801d05 	stb	r2,116(sp)
200944b4:	d9001d45 	stb	r4,117(sp)
200944b8:	8c400094 	ori	r17,r17,2
200944bc:	00800084 	movi	r2,2
200944c0:	003d0706 	br	200938e0 <__flash_rwdata_start+0xffff7298>
200944c4:	ad400044 	addi	r21,r21,1
200944c8:	8c400814 	ori	r17,r17,32
200944cc:	11000047 	ldb	r4,1(r2)
200944d0:	003c9606 	br	2009372c <__flash_rwdata_start+0xffff70e4>
200944d4:	dac02317 	ldw	r11,140(sp)
200944d8:	da802417 	ldw	r10,144(sp)
200944dc:	58800017 	ldw	r2,0(r11)
200944e0:	5ac00104 	addi	r11,r11,4
200944e4:	dac02315 	stw	r11,140(sp)
200944e8:	12800015 	stw	r10,0(r2)
200944ec:	003c6706 	br	2009368c <__flash_rwdata_start+0xffff7044>
200944f0:	9009883a 	mov	r4,r18
200944f4:	a00b883a 	mov	r5,r20
200944f8:	d9801a04 	addi	r6,sp,104
200944fc:	00934300 	call	20093430 <__ssprint_r>
20094500:	103efa1e 	bne	r2,zero,200940ec <__flash_rwdata_start+0xffff7aa4>
20094504:	d8c01c17 	ldw	r3,112(sp)
20094508:	d8801b17 	ldw	r2,108(sp)
2009450c:	d811883a 	mov	r8,sp
20094510:	003e5f06 	br	20093e90 <__flash_rwdata_start+0xffff7848>
20094514:	02c00034 	movhi	r11,0
20094518:	5ac1ec04 	addi	r11,r11,1968
2009451c:	dac02215 	stw	r11,136(sp)
20094520:	003e7906 	br	20093f08 <__flash_rwdata_start+0xffff78c0>
20094524:	da801e17 	ldw	r10,120(sp)
20094528:	d8c02617 	ldw	r3,152(sp)
2009452c:	50f9c83a 	sub	fp,r10,r3
20094530:	003d0806 	br	20093954 <__flash_rwdata_start+0xffff730c>
20094534:	da002c15 	stw	r8,176(sp)
20094538:	008a73c0 	call	2008a73c <strlen>
2009453c:	1039883a 	mov	fp,r2
20094540:	dac01d83 	ldbu	r11,118(sp)
20094544:	ddc02315 	stw	r23,140(sp)
20094548:	0021883a 	mov	r16,zero
2009454c:	da002c17 	ldw	r8,176(sp)
20094550:	003d0006 	br	20093954 <__flash_rwdata_start+0xffff730c>
20094554:	00800184 	movi	r2,6
20094558:	1400012e 	bgeu	r2,r16,20094560 <___svfiprintf_internal_r+0xf64>
2009455c:	1021883a 	mov	r16,r2
20094560:	8039883a 	mov	fp,r16
20094564:	802d883a 	mov	r22,r16
20094568:	80002116 	blt	r16,zero,200945f0 <___svfiprintf_internal_r+0xff4>
2009456c:	00800034 	movhi	r2,0
20094570:	10818904 	addi	r2,r2,1572
20094574:	dd802015 	stw	r22,128(sp)
20094578:	ddc02315 	stw	r23,140(sp)
2009457c:	d8802615 	stw	r2,152(sp)
20094580:	003d5d06 	br	20093af8 <__flash_rwdata_start+0xffff74b0>
20094584:	04001004 	movi	r16,64
20094588:	800b883a 	mov	r5,r16
2009458c:	00899bc0 	call	200899bc <_malloc_r>
20094590:	da802717 	ldw	r10,156(sp)
20094594:	50800015 	stw	r2,0(r10)
20094598:	50800415 	stw	r2,16(r10)
2009459c:	10002026 	beq	r2,zero,20094620 <___svfiprintf_internal_r+0x1024>
200945a0:	da802717 	ldw	r10,156(sp)
200945a4:	54000515 	stw	r16,20(r10)
200945a8:	003c2806 	br	2009364c <__flash_rwdata_start+0xffff7004>
200945ac:	01000034 	movhi	r4,0
200945b0:	2101f004 	addi	r4,r4,1984
200945b4:	d9002815 	stw	r4,160(sp)
200945b8:	003d7e06 	br	20093bb4 <__flash_rwdata_start+0xffff756c>
200945bc:	01000034 	movhi	r4,0
200945c0:	2101f004 	addi	r4,r4,1984
200945c4:	d9002815 	stw	r4,160(sp)
200945c8:	003e8706 	br	20093fe8 <__flash_rwdata_start+0xffff79a0>
200945cc:	01000034 	movhi	r4,0
200945d0:	2101ec04 	addi	r4,r4,1968
200945d4:	d9002215 	stw	r4,136(sp)
200945d8:	003ef606 	br	200941b4 <__flash_rwdata_start+0xffff7b6c>
200945dc:	8039883a 	mov	fp,r16
200945e0:	dac01d83 	ldbu	r11,118(sp)
200945e4:	ddc02315 	stw	r23,140(sp)
200945e8:	0021883a 	mov	r16,zero
200945ec:	003cd906 	br	20093954 <__flash_rwdata_start+0xffff730c>
200945f0:	002d883a 	mov	r22,zero
200945f4:	003fdd06 	br	2009456c <__flash_rwdata_start+0xffff7f24>
200945f8:	dac02317 	ldw	r11,140(sp)
200945fc:	a805883a 	mov	r2,r21
20094600:	502b883a 	mov	r21,r10
20094604:	5c000017 	ldw	r16,0(r11)
20094608:	59000104 	addi	r4,r11,4
2009460c:	d9002315 	stw	r4,140(sp)
20094610:	803fae0e 	bge	r16,zero,200944cc <__flash_rwdata_start+0xffff7e84>
20094614:	043fffc4 	movi	r16,-1
20094618:	11000047 	ldb	r4,1(r2)
2009461c:	003c4306 	br	2009372c <__flash_rwdata_start+0xffff70e4>
20094620:	dac02917 	ldw	r11,164(sp)
20094624:	00800304 	movi	r2,12
20094628:	58800015 	stw	r2,0(r11)
2009462c:	00bfffc4 	movi	r2,-1
20094630:	003eb306 	br	20094100 <__flash_rwdata_start+0xffff7ab8>

20094634 <__sprint_r.part.0>:
20094634:	28801917 	ldw	r2,100(r5)
20094638:	defff604 	addi	sp,sp,-40
2009463c:	dd400515 	stw	r21,20(sp)
20094640:	dcc00315 	stw	r19,12(sp)
20094644:	dfc00915 	stw	ra,36(sp)
20094648:	df000815 	stw	fp,32(sp)
2009464c:	ddc00715 	stw	r23,28(sp)
20094650:	dd800615 	stw	r22,24(sp)
20094654:	dd000415 	stw	r20,16(sp)
20094658:	dc800215 	stw	r18,8(sp)
2009465c:	dc400115 	stw	r17,4(sp)
20094660:	dc000015 	stw	r16,0(sp)
20094664:	1088000c 	andi	r2,r2,8192
20094668:	2827883a 	mov	r19,r5
2009466c:	302b883a 	mov	r21,r6
20094670:	10002d26 	beq	r2,zero,20094728 <__sprint_r.part.0+0xf4>
20094674:	30800217 	ldw	r2,8(r6)
20094678:	35800017 	ldw	r22,0(r6)
2009467c:	10002826 	beq	r2,zero,20094720 <__sprint_r.part.0+0xec>
20094680:	2029883a 	mov	r20,r4
20094684:	b5c00104 	addi	r23,r22,4
20094688:	04bfffc4 	movi	r18,-1
2009468c:	bc400017 	ldw	r17,0(r23)
20094690:	b4000017 	ldw	r16,0(r22)
20094694:	0039883a 	mov	fp,zero
20094698:	8822d0ba 	srli	r17,r17,2
2009469c:	04400316 	blt	zero,r17,200946ac <__sprint_r.part.0+0x78>
200946a0:	00001806 	br	20094704 <__sprint_r.part.0+0xd0>
200946a4:	84000104 	addi	r16,r16,4
200946a8:	8f001526 	beq	r17,fp,20094700 <__sprint_r.part.0+0xcc>
200946ac:	81400017 	ldw	r5,0(r16)
200946b0:	a009883a 	mov	r4,r20
200946b4:	980d883a 	mov	r6,r19
200946b8:	0095ec40 	call	20095ec4 <_fputwc_r>
200946bc:	e7000044 	addi	fp,fp,1
200946c0:	14bff81e 	bne	r2,r18,200946a4 <__flash_rwdata_start+0xffff805c>
200946c4:	9005883a 	mov	r2,r18
200946c8:	a8000215 	stw	zero,8(r21)
200946cc:	a8000115 	stw	zero,4(r21)
200946d0:	dfc00917 	ldw	ra,36(sp)
200946d4:	df000817 	ldw	fp,32(sp)
200946d8:	ddc00717 	ldw	r23,28(sp)
200946dc:	dd800617 	ldw	r22,24(sp)
200946e0:	dd400517 	ldw	r21,20(sp)
200946e4:	dd000417 	ldw	r20,16(sp)
200946e8:	dcc00317 	ldw	r19,12(sp)
200946ec:	dc800217 	ldw	r18,8(sp)
200946f0:	dc400117 	ldw	r17,4(sp)
200946f4:	dc000017 	ldw	r16,0(sp)
200946f8:	dec00a04 	addi	sp,sp,40
200946fc:	f800283a 	ret
20094700:	a8800217 	ldw	r2,8(r21)
20094704:	8c63883a 	add	r17,r17,r17
20094708:	8c63883a 	add	r17,r17,r17
2009470c:	1445c83a 	sub	r2,r2,r17
20094710:	a8800215 	stw	r2,8(r21)
20094714:	b5800204 	addi	r22,r22,8
20094718:	bdc00204 	addi	r23,r23,8
2009471c:	103fdb1e 	bne	r2,zero,2009468c <__flash_rwdata_start+0xffff8044>
20094720:	0005883a 	mov	r2,zero
20094724:	003fe806 	br	200946c8 <__flash_rwdata_start+0xffff8080>
20094728:	0090f840 	call	20090f84 <__sfvwrite_r>
2009472c:	003fe606 	br	200946c8 <__flash_rwdata_start+0xffff8080>

20094730 <__sprint_r>:
20094730:	30c00217 	ldw	r3,8(r6)
20094734:	18000126 	beq	r3,zero,2009473c <__sprint_r+0xc>
20094738:	00946341 	jmpi	20094634 <__sprint_r.part.0>
2009473c:	30000115 	stw	zero,4(r6)
20094740:	0005883a 	mov	r2,zero
20094744:	f800283a 	ret

20094748 <___vfiprintf_internal_r>:
20094748:	deffca04 	addi	sp,sp,-216
2009474c:	dd803215 	stw	r22,200(sp)
20094750:	dd403115 	stw	r21,196(sp)
20094754:	dfc03515 	stw	ra,212(sp)
20094758:	df003415 	stw	fp,208(sp)
2009475c:	ddc03315 	stw	r23,204(sp)
20094760:	dd003015 	stw	r20,192(sp)
20094764:	dcc02f15 	stw	r19,188(sp)
20094768:	dc802e15 	stw	r18,184(sp)
2009476c:	dc402d15 	stw	r17,180(sp)
20094770:	dc002c15 	stw	r16,176(sp)
20094774:	d9002015 	stw	r4,128(sp)
20094778:	d9c02215 	stw	r7,136(sp)
2009477c:	282b883a 	mov	r21,r5
20094780:	302d883a 	mov	r22,r6
20094784:	20000226 	beq	r4,zero,20094790 <___vfiprintf_internal_r+0x48>
20094788:	20800e17 	ldw	r2,56(r4)
2009478c:	1001b126 	beq	r2,zero,20094e54 <___vfiprintf_internal_r+0x70c>
20094790:	a880030b 	ldhu	r2,12(r21)
20094794:	10c8000c 	andi	r3,r2,8192
20094798:	1800061e 	bne	r3,zero,200947b4 <___vfiprintf_internal_r+0x6c>
2009479c:	a9001917 	ldw	r4,100(r21)
200947a0:	00f7ffc4 	movi	r3,-8193
200947a4:	10880014 	ori	r2,r2,8192
200947a8:	20c6703a 	and	r3,r4,r3
200947ac:	a880030d 	sth	r2,12(r21)
200947b0:	a8c01915 	stw	r3,100(r21)
200947b4:	10c0020c 	andi	r3,r2,8
200947b8:	18018926 	beq	r3,zero,20094de0 <___vfiprintf_internal_r+0x698>
200947bc:	a8c00417 	ldw	r3,16(r21)
200947c0:	18018726 	beq	r3,zero,20094de0 <___vfiprintf_internal_r+0x698>
200947c4:	1080068c 	andi	r2,r2,26
200947c8:	00c00284 	movi	r3,10
200947cc:	10c18c26 	beq	r2,r3,20094e00 <___vfiprintf_internal_r+0x6b8>
200947d0:	d8801a04 	addi	r2,sp,104
200947d4:	d8c019c4 	addi	r3,sp,103
200947d8:	07000034 	movhi	fp,0
200947dc:	05c00034 	movhi	r23,0
200947e0:	10c9c83a 	sub	r4,r2,r3
200947e4:	e701f804 	addi	fp,fp,2016
200947e8:	bdc1f404 	addi	r23,r23,2000
200947ec:	d8801e15 	stw	r2,120(sp)
200947f0:	d8c01f15 	stw	r3,124(sp)
200947f4:	dec01a15 	stw	sp,104(sp)
200947f8:	d8001c15 	stw	zero,112(sp)
200947fc:	d8001b15 	stw	zero,108(sp)
20094800:	d8002615 	stw	zero,152(sp)
20094804:	d8002315 	stw	zero,140(sp)
20094808:	d9002715 	stw	r4,156(sp)
2009480c:	d811883a 	mov	r8,sp
20094810:	dd402115 	stw	r21,132(sp)
20094814:	b021883a 	mov	r16,r22
20094818:	80800007 	ldb	r2,0(r16)
2009481c:	10037226 	beq	r2,zero,200955e8 <___vfiprintf_internal_r+0xea0>
20094820:	01000944 	movi	r4,37
20094824:	11037026 	beq	r2,r4,200955e8 <___vfiprintf_internal_r+0xea0>
20094828:	8005883a 	mov	r2,r16
2009482c:	00000106 	br	20094834 <___vfiprintf_internal_r+0xec>
20094830:	19000326 	beq	r3,r4,20094840 <___vfiprintf_internal_r+0xf8>
20094834:	10800044 	addi	r2,r2,1
20094838:	10c00007 	ldb	r3,0(r2)
2009483c:	183ffc1e 	bne	r3,zero,20094830 <__flash_rwdata_start+0xffff81e8>
20094840:	1425c83a 	sub	r18,r2,r16
20094844:	1023883a 	mov	r17,r2
20094848:	90001026 	beq	r18,zero,2009488c <___vfiprintf_internal_r+0x144>
2009484c:	d8c01c17 	ldw	r3,112(sp)
20094850:	d8801b17 	ldw	r2,108(sp)
20094854:	44000015 	stw	r16,0(r8)
20094858:	90c7883a 	add	r3,r18,r3
2009485c:	10800044 	addi	r2,r2,1
20094860:	44800115 	stw	r18,4(r8)
20094864:	d8c01c15 	stw	r3,112(sp)
20094868:	d8801b15 	stw	r2,108(sp)
2009486c:	010001c4 	movi	r4,7
20094870:	2080750e 	bge	r4,r2,20094a48 <___vfiprintf_internal_r+0x300>
20094874:	18036f1e 	bne	r3,zero,20095634 <___vfiprintf_internal_r+0xeec>
20094878:	d8802317 	ldw	r2,140(sp)
2009487c:	d8001b15 	stw	zero,108(sp)
20094880:	d811883a 	mov	r8,sp
20094884:	1485883a 	add	r2,r2,r18
20094888:	d8802315 	stw	r2,140(sp)
2009488c:	88800007 	ldb	r2,0(r17)
20094890:	10041026 	beq	r2,zero,200958d4 <___vfiprintf_internal_r+0x118c>
20094894:	88c00047 	ldb	r3,1(r17)
20094898:	88800044 	addi	r2,r17,1
2009489c:	d8001d85 	stb	zero,118(sp)
200948a0:	000f883a 	mov	r7,zero
200948a4:	027fffc4 	movi	r9,-1
200948a8:	0025883a 	mov	r18,zero
200948ac:	002b883a 	mov	r21,zero
200948b0:	01401604 	movi	r5,88
200948b4:	01800244 	movi	r6,9
200948b8:	03400a84 	movi	r13,42
200948bc:	03001b04 	movi	r12,108
200948c0:	14000044 	addi	r16,r2,1
200948c4:	18bff804 	addi	r2,r3,-32
200948c8:	28825536 	bltu	r5,r2,20095220 <___vfiprintf_internal_r+0xad8>
200948cc:	100490ba 	slli	r2,r2,2
200948d0:	01080274 	movhi	r4,8201
200948d4:	21123904 	addi	r4,r4,18660
200948d8:	1105883a 	add	r2,r2,r4
200948dc:	10800017 	ldw	r2,0(r2)
200948e0:	1000683a 	jmp	r2
200948e4:	20094fe4 	muli	zero,r4,9535
200948e8:	20095220 	cmpeqi	zero,r4,9544
200948ec:	20095220 	cmpeqi	zero,r4,9544
200948f0:	20095004 	addi	zero,r4,9536
200948f4:	20095220 	cmpeqi	zero,r4,9544
200948f8:	20095220 	cmpeqi	zero,r4,9544
200948fc:	20095220 	cmpeqi	zero,r4,9544
20094900:	20095220 	cmpeqi	zero,r4,9544
20094904:	20095220 	cmpeqi	zero,r4,9544
20094908:	20095220 	cmpeqi	zero,r4,9544
2009490c:	20095014 	ori	zero,r4,9536
20094910:	20095034 	orhi	zero,r4,9536
20094914:	20095220 	cmpeqi	zero,r4,9544
20094918:	20094e5c 	xori	zero,r4,9529
2009491c:	20094f48 	cmpgei	zero,r4,9533
20094920:	20095220 	cmpeqi	zero,r4,9544
20094924:	20094ec8 	cmpgei	zero,r4,9531
20094928:	20094ed8 	cmpnei	zero,r4,9531
2009492c:	20094ed8 	cmpnei	zero,r4,9531
20094930:	20094ed8 	cmpnei	zero,r4,9531
20094934:	20094ed8 	cmpnei	zero,r4,9531
20094938:	20094ed8 	cmpnei	zero,r4,9531
2009493c:	20094ed8 	cmpnei	zero,r4,9531
20094940:	20094ed8 	cmpnei	zero,r4,9531
20094944:	20094ed8 	cmpnei	zero,r4,9531
20094948:	20094ed8 	cmpnei	zero,r4,9531
2009494c:	20095220 	cmpeqi	zero,r4,9544
20094950:	20095220 	cmpeqi	zero,r4,9544
20094954:	20095220 	cmpeqi	zero,r4,9544
20094958:	20095220 	cmpeqi	zero,r4,9544
2009495c:	20095220 	cmpeqi	zero,r4,9544
20094960:	20095220 	cmpeqi	zero,r4,9544
20094964:	20095220 	cmpeqi	zero,r4,9544
20094968:	20095220 	cmpeqi	zero,r4,9544
2009496c:	20095220 	cmpeqi	zero,r4,9544
20094970:	20095220 	cmpeqi	zero,r4,9544
20094974:	20094f04 	addi	zero,r4,9532
20094978:	20095220 	cmpeqi	zero,r4,9544
2009497c:	20095220 	cmpeqi	zero,r4,9544
20094980:	20095220 	cmpeqi	zero,r4,9544
20094984:	20095220 	cmpeqi	zero,r4,9544
20094988:	20095220 	cmpeqi	zero,r4,9544
2009498c:	20095220 	cmpeqi	zero,r4,9544
20094990:	20095220 	cmpeqi	zero,r4,9544
20094994:	20095220 	cmpeqi	zero,r4,9544
20094998:	20095220 	cmpeqi	zero,r4,9544
2009499c:	20095220 	cmpeqi	zero,r4,9544
200949a0:	20094a90 	cmplti	zero,r4,9514
200949a4:	20095220 	cmpeqi	zero,r4,9544
200949a8:	20095220 	cmpeqi	zero,r4,9544
200949ac:	20095220 	cmpeqi	zero,r4,9544
200949b0:	20095220 	cmpeqi	zero,r4,9544
200949b4:	20095220 	cmpeqi	zero,r4,9544
200949b8:	20094a5c 	xori	zero,r4,9513
200949bc:	20095220 	cmpeqi	zero,r4,9544
200949c0:	20095220 	cmpeqi	zero,r4,9544
200949c4:	200950a4 	muli	zero,r4,9538
200949c8:	20095220 	cmpeqi	zero,r4,9544
200949cc:	20095220 	cmpeqi	zero,r4,9544
200949d0:	20095220 	cmpeqi	zero,r4,9544
200949d4:	20095220 	cmpeqi	zero,r4,9544
200949d8:	20095220 	cmpeqi	zero,r4,9544
200949dc:	20095220 	cmpeqi	zero,r4,9544
200949e0:	20095220 	cmpeqi	zero,r4,9544
200949e4:	20095220 	cmpeqi	zero,r4,9544
200949e8:	20095220 	cmpeqi	zero,r4,9544
200949ec:	20095220 	cmpeqi	zero,r4,9544
200949f0:	20095044 	addi	zero,r4,9537
200949f4:	20095070 	cmpltui	zero,r4,9537
200949f8:	20095220 	cmpeqi	zero,r4,9544
200949fc:	20095220 	cmpeqi	zero,r4,9544
20094a00:	20095220 	cmpeqi	zero,r4,9544
20094a04:	2009514c 	andi	zero,r4,9541
20094a08:	20095070 	cmpltui	zero,r4,9537
20094a0c:	20095220 	cmpeqi	zero,r4,9544
20094a10:	20095220 	cmpeqi	zero,r4,9544
20094a14:	2009515c 	xori	zero,r4,9541
20094a18:	20095220 	cmpeqi	zero,r4,9544
20094a1c:	20094f88 	cmpgei	zero,r4,9534
20094a20:	20094a94 	ori	zero,r4,9514
20094a24:	20095170 	cmpltui	zero,r4,9541
20094a28:	200951b0 	cmpltui	zero,r4,9542
20094a2c:	20095220 	cmpeqi	zero,r4,9544
20094a30:	200950f8 	rdprs	zero,r4,9539
20094a34:	20095220 	cmpeqi	zero,r4,9544
20094a38:	20094a60 	cmpeqi	zero,r4,9513
20094a3c:	20095220 	cmpeqi	zero,r4,9544
20094a40:	20095220 	cmpeqi	zero,r4,9544
20094a44:	200951c0 	call	2200951c <__flash_rwdata_start+0x1f6ced4>
20094a48:	42000204 	addi	r8,r8,8
20094a4c:	d8802317 	ldw	r2,140(sp)
20094a50:	1485883a 	add	r2,r2,r18
20094a54:	d8802315 	stw	r2,140(sp)
20094a58:	003f8c06 	br	2009488c <__flash_rwdata_start+0xffff8244>
20094a5c:	ad400414 	ori	r21,r21,16
20094a60:	a880080c 	andi	r2,r21,32
20094a64:	1001e61e 	bne	r2,zero,20095200 <___vfiprintf_internal_r+0xab8>
20094a68:	a880040c 	andi	r2,r21,16
20094a6c:	10034726 	beq	r2,zero,2009578c <___vfiprintf_internal_r+0x1044>
20094a70:	d8802217 	ldw	r2,136(sp)
20094a74:	001b883a 	mov	r13,zero
20094a78:	15800017 	ldw	r22,0(r2)
20094a7c:	10800104 	addi	r2,r2,4
20094a80:	d8802215 	stw	r2,136(sp)
20094a84:	b009883a 	mov	r4,r22
20094a88:	00800044 	movi	r2,1
20094a8c:	00000c06 	br	20094ac0 <___vfiprintf_internal_r+0x378>
20094a90:	ad400414 	ori	r21,r21,16
20094a94:	a880080c 	andi	r2,r21,32
20094a98:	1001491e 	bne	r2,zero,20094fc0 <___vfiprintf_internal_r+0x878>
20094a9c:	a880040c 	andi	r2,r21,16
20094aa0:	10032d26 	beq	r2,zero,20095758 <___vfiprintf_internal_r+0x1010>
20094aa4:	d9002217 	ldw	r4,136(sp)
20094aa8:	001b883a 	mov	r13,zero
20094aac:	0005883a 	mov	r2,zero
20094ab0:	25800017 	ldw	r22,0(r4)
20094ab4:	21000104 	addi	r4,r4,4
20094ab8:	d9002215 	stw	r4,136(sp)
20094abc:	b009883a 	mov	r4,r22
20094ac0:	d8001d85 	stb	zero,118(sp)
20094ac4:	4827883a 	mov	r19,r9
20094ac8:	001d883a 	mov	r14,zero
20094acc:	48000216 	blt	r9,zero,20094ad8 <___vfiprintf_internal_r+0x390>
20094ad0:	00ffdfc4 	movi	r3,-129
20094ad4:	a8ea703a 	and	r21,r21,r3
20094ad8:	2002071e 	bne	r4,zero,200952f8 <___vfiprintf_internal_r+0xbb0>
20094adc:	4802ad26 	beq	r9,zero,20095594 <___vfiprintf_internal_r+0xe4c>
20094ae0:	10803fcc 	andi	r2,r2,255
20094ae4:	00c00044 	movi	r3,1
20094ae8:	10c22b26 	beq	r2,r3,20095398 <___vfiprintf_internal_r+0xc50>
20094aec:	00c00084 	movi	r3,2
20094af0:	dd001a04 	addi	r20,sp,104
20094af4:	10c0dd1e 	bne	r2,r3,20094e6c <___vfiprintf_internal_r+0x724>
20094af8:	d9002617 	ldw	r4,152(sp)
20094afc:	b08003cc 	andi	r2,r22,15
20094b00:	6806973a 	slli	r3,r13,28
20094b04:	2085883a 	add	r2,r4,r2
20094b08:	b02cd13a 	srli	r22,r22,4
20094b0c:	10800003 	ldbu	r2,0(r2)
20094b10:	681ad13a 	srli	r13,r13,4
20094b14:	a53fffc4 	addi	r20,r20,-1
20094b18:	1dacb03a 	or	r22,r3,r22
20094b1c:	a0800005 	stb	r2,0(r20)
20094b20:	b344b03a 	or	r2,r22,r13
20094b24:	103ff51e 	bne	r2,zero,20094afc <__flash_rwdata_start+0xffff84b4>
20094b28:	d9001e17 	ldw	r4,120(sp)
20094b2c:	2527c83a 	sub	r19,r4,r20
20094b30:	9823883a 	mov	r17,r19
20094b34:	9a40010e 	bge	r19,r9,20094b3c <___vfiprintf_internal_r+0x3f4>
20094b38:	4823883a 	mov	r17,r9
20094b3c:	73803fcc 	andi	r14,r14,255
20094b40:	7380201c 	xori	r14,r14,128
20094b44:	73bfe004 	addi	r14,r14,-128
20094b48:	70000126 	beq	r14,zero,20094b50 <___vfiprintf_internal_r+0x408>
20094b4c:	8c400044 	addi	r17,r17,1
20094b50:	ab40008c 	andi	r13,r21,2
20094b54:	68000126 	beq	r13,zero,20094b5c <___vfiprintf_internal_r+0x414>
20094b58:	8c400084 	addi	r17,r17,2
20094b5c:	ad80210c 	andi	r22,r21,132
20094b60:	b001c51e 	bne	r22,zero,20095278 <___vfiprintf_internal_r+0xb30>
20094b64:	9447c83a 	sub	r3,r18,r17
20094b68:	00c1c30e 	bge	zero,r3,20095278 <___vfiprintf_internal_r+0xb30>
20094b6c:	01c00404 	movi	r7,16
20094b70:	d8801c17 	ldw	r2,112(sp)
20094b74:	38c37b0e 	bge	r7,r3,20095964 <___vfiprintf_internal_r+0x121c>
20094b78:	01000034 	movhi	r4,0
20094b7c:	2101f804 	addi	r4,r4,2016
20094b80:	dc002915 	stw	r16,164(sp)
20094b84:	d9801b17 	ldw	r6,108(sp)
20094b88:	d9002415 	stw	r4,144(sp)
20094b8c:	03c001c4 	movi	r15,7
20094b90:	da402515 	stw	r9,148(sp)
20094b94:	db402815 	stw	r13,160(sp)
20094b98:	1821883a 	mov	r16,r3
20094b9c:	00000506 	br	20094bb4 <___vfiprintf_internal_r+0x46c>
20094ba0:	31400084 	addi	r5,r6,2
20094ba4:	42000204 	addi	r8,r8,8
20094ba8:	200d883a 	mov	r6,r4
20094bac:	843ffc04 	addi	r16,r16,-16
20094bb0:	3c000d0e 	bge	r7,r16,20094be8 <___vfiprintf_internal_r+0x4a0>
20094bb4:	10800404 	addi	r2,r2,16
20094bb8:	31000044 	addi	r4,r6,1
20094bbc:	47000015 	stw	fp,0(r8)
20094bc0:	41c00115 	stw	r7,4(r8)
20094bc4:	d8801c15 	stw	r2,112(sp)
20094bc8:	d9001b15 	stw	r4,108(sp)
20094bcc:	793ff40e 	bge	r15,r4,20094ba0 <__flash_rwdata_start+0xffff8558>
20094bd0:	10019b1e 	bne	r2,zero,20095240 <___vfiprintf_internal_r+0xaf8>
20094bd4:	843ffc04 	addi	r16,r16,-16
20094bd8:	000d883a 	mov	r6,zero
20094bdc:	01400044 	movi	r5,1
20094be0:	d811883a 	mov	r8,sp
20094be4:	3c3ff316 	blt	r7,r16,20094bb4 <__flash_rwdata_start+0xffff856c>
20094be8:	8007883a 	mov	r3,r16
20094bec:	da402517 	ldw	r9,148(sp)
20094bf0:	db402817 	ldw	r13,160(sp)
20094bf4:	dc002917 	ldw	r16,164(sp)
20094bf8:	d9002417 	ldw	r4,144(sp)
20094bfc:	1885883a 	add	r2,r3,r2
20094c00:	40c00115 	stw	r3,4(r8)
20094c04:	41000015 	stw	r4,0(r8)
20094c08:	d8801c15 	stw	r2,112(sp)
20094c0c:	d9401b15 	stw	r5,108(sp)
20094c10:	00c001c4 	movi	r3,7
20094c14:	19426a16 	blt	r3,r5,200955c0 <___vfiprintf_internal_r+0xe78>
20094c18:	d8c01d87 	ldb	r3,118(sp)
20094c1c:	42000204 	addi	r8,r8,8
20094c20:	29000044 	addi	r4,r5,1
20094c24:	1801991e 	bne	r3,zero,2009528c <___vfiprintf_internal_r+0xb44>
20094c28:	68000c26 	beq	r13,zero,20094c5c <___vfiprintf_internal_r+0x514>
20094c2c:	d8c01d04 	addi	r3,sp,116
20094c30:	10800084 	addi	r2,r2,2
20094c34:	40c00015 	stw	r3,0(r8)
20094c38:	00c00084 	movi	r3,2
20094c3c:	40c00115 	stw	r3,4(r8)
20094c40:	d8801c15 	stw	r2,112(sp)
20094c44:	d9001b15 	stw	r4,108(sp)
20094c48:	00c001c4 	movi	r3,7
20094c4c:	19024c16 	blt	r3,r4,20095580 <___vfiprintf_internal_r+0xe38>
20094c50:	200b883a 	mov	r5,r4
20094c54:	42000204 	addi	r8,r8,8
20094c58:	21000044 	addi	r4,r4,1
20094c5c:	00c02004 	movi	r3,128
20094c60:	b0c20126 	beq	r22,r3,20095468 <___vfiprintf_internal_r+0xd20>
20094c64:	4cedc83a 	sub	r22,r9,r19
20094c68:	0580230e 	bge	zero,r22,20094cf8 <___vfiprintf_internal_r+0x5b0>
20094c6c:	01c00404 	movi	r7,16
20094c70:	3d83140e 	bge	r7,r22,200958c4 <___vfiprintf_internal_r+0x117c>
20094c74:	01000034 	movhi	r4,0
20094c78:	2101f404 	addi	r4,r4,2000
20094c7c:	d9002415 	stw	r4,144(sp)
20094c80:	034001c4 	movi	r13,7
20094c84:	00000506 	br	20094c9c <___vfiprintf_internal_r+0x554>
20094c88:	29000084 	addi	r4,r5,2
20094c8c:	42000204 	addi	r8,r8,8
20094c90:	180b883a 	mov	r5,r3
20094c94:	b5bffc04 	addi	r22,r22,-16
20094c98:	3d800d0e 	bge	r7,r22,20094cd0 <___vfiprintf_internal_r+0x588>
20094c9c:	10800404 	addi	r2,r2,16
20094ca0:	28c00044 	addi	r3,r5,1
20094ca4:	45c00015 	stw	r23,0(r8)
20094ca8:	41c00115 	stw	r7,4(r8)
20094cac:	d8801c15 	stw	r2,112(sp)
20094cb0:	d8c01b15 	stw	r3,108(sp)
20094cb4:	68fff40e 	bge	r13,r3,20094c88 <__flash_rwdata_start+0xffff8640>
20094cb8:	1001811e 	bne	r2,zero,200952c0 <___vfiprintf_internal_r+0xb78>
20094cbc:	b5bffc04 	addi	r22,r22,-16
20094cc0:	01000044 	movi	r4,1
20094cc4:	000b883a 	mov	r5,zero
20094cc8:	d811883a 	mov	r8,sp
20094ccc:	3dbff316 	blt	r7,r22,20094c9c <__flash_rwdata_start+0xffff8654>
20094cd0:	d8c02417 	ldw	r3,144(sp)
20094cd4:	1585883a 	add	r2,r2,r22
20094cd8:	45800115 	stw	r22,4(r8)
20094cdc:	40c00015 	stw	r3,0(r8)
20094ce0:	d8801c15 	stw	r2,112(sp)
20094ce4:	d9001b15 	stw	r4,108(sp)
20094ce8:	00c001c4 	movi	r3,7
20094cec:	1901d016 	blt	r3,r4,20095430 <___vfiprintf_internal_r+0xce8>
20094cf0:	42000204 	addi	r8,r8,8
20094cf4:	21000044 	addi	r4,r4,1
20094cf8:	14c5883a 	add	r2,r2,r19
20094cfc:	45000015 	stw	r20,0(r8)
20094d00:	44c00115 	stw	r19,4(r8)
20094d04:	d8801c15 	stw	r2,112(sp)
20094d08:	d9001b15 	stw	r4,108(sp)
20094d0c:	00c001c4 	movi	r3,7
20094d10:	1901cf0e 	bge	r3,r4,20095450 <___vfiprintf_internal_r+0xd08>
20094d14:	1002361e 	bne	r2,zero,200955f0 <___vfiprintf_internal_r+0xea8>
20094d18:	d8001b15 	stw	zero,108(sp)
20094d1c:	aac0010c 	andi	r11,r21,4
20094d20:	58002826 	beq	r11,zero,20094dc4 <___vfiprintf_internal_r+0x67c>
20094d24:	9467c83a 	sub	r19,r18,r17
20094d28:	d811883a 	mov	r8,sp
20094d2c:	04c3340e 	bge	zero,r19,20095a00 <___vfiprintf_internal_r+0x12b8>
20094d30:	01c00404 	movi	r7,16
20094d34:	3cc31b0e 	bge	r7,r19,200959a4 <___vfiprintf_internal_r+0x125c>
20094d38:	00c00034 	movhi	r3,0
20094d3c:	18c1f804 	addi	r3,r3,2016
20094d40:	d9001b17 	ldw	r4,108(sp)
20094d44:	d8c02415 	stw	r3,144(sp)
20094d48:	382b883a 	mov	r21,r7
20094d4c:	050001c4 	movi	r20,7
20094d50:	dd802017 	ldw	r22,128(sp)
20094d54:	00000506 	br	20094d6c <___vfiprintf_internal_r+0x624>
20094d58:	21400084 	addi	r5,r4,2
20094d5c:	42000204 	addi	r8,r8,8
20094d60:	1809883a 	mov	r4,r3
20094d64:	9cfffc04 	addi	r19,r19,-16
20094d68:	acc00d0e 	bge	r21,r19,20094da0 <___vfiprintf_internal_r+0x658>
20094d6c:	10800404 	addi	r2,r2,16
20094d70:	20c00044 	addi	r3,r4,1
20094d74:	47000015 	stw	fp,0(r8)
20094d78:	45400115 	stw	r21,4(r8)
20094d7c:	d8801c15 	stw	r2,112(sp)
20094d80:	d8c01b15 	stw	r3,108(sp)
20094d84:	a0fff40e 	bge	r20,r3,20094d58 <__flash_rwdata_start+0xffff8710>
20094d88:	10019f1e 	bne	r2,zero,20095408 <___vfiprintf_internal_r+0xcc0>
20094d8c:	9cfffc04 	addi	r19,r19,-16
20094d90:	01400044 	movi	r5,1
20094d94:	0009883a 	mov	r4,zero
20094d98:	d811883a 	mov	r8,sp
20094d9c:	acfff316 	blt	r21,r19,20094d6c <__flash_rwdata_start+0xffff8724>
20094da0:	d8c02417 	ldw	r3,144(sp)
20094da4:	14c5883a 	add	r2,r2,r19
20094da8:	44c00115 	stw	r19,4(r8)
20094dac:	40c00015 	stw	r3,0(r8)
20094db0:	d8801c15 	stw	r2,112(sp)
20094db4:	d9401b15 	stw	r5,108(sp)
20094db8:	00c001c4 	movi	r3,7
20094dbc:	1941810e 	bge	r3,r5,200953c4 <___vfiprintf_internal_r+0xc7c>
20094dc0:	10017a1e 	bne	r2,zero,200953ac <___vfiprintf_internal_r+0xc64>
20094dc4:	8c82a416 	blt	r17,r18,20095858 <___vfiprintf_internal_r+0x1110>
20094dc8:	d9002317 	ldw	r4,140(sp)
20094dcc:	2449883a 	add	r4,r4,r17
20094dd0:	d9002315 	stw	r4,140(sp)
20094dd4:	d8001b15 	stw	zero,108(sp)
20094dd8:	d811883a 	mov	r8,sp
20094ddc:	003e8e06 	br	20094818 <__flash_rwdata_start+0xffff81d0>
20094de0:	d9002017 	ldw	r4,128(sp)
20094de4:	a80b883a 	mov	r5,r21
20094de8:	008e92c0 	call	2008e92c <__swsetup_r>
20094dec:	10000c1e 	bne	r2,zero,20094e20 <___vfiprintf_internal_r+0x6d8>
20094df0:	a880030b 	ldhu	r2,12(r21)
20094df4:	00c00284 	movi	r3,10
20094df8:	1080068c 	andi	r2,r2,26
20094dfc:	10fe741e 	bne	r2,r3,200947d0 <__flash_rwdata_start+0xffff8188>
20094e00:	a880038f 	ldh	r2,14(r21)
20094e04:	103e7216 	blt	r2,zero,200947d0 <__flash_rwdata_start+0xffff8188>
20094e08:	d9002017 	ldw	r4,128(sp)
20094e0c:	d9c02217 	ldw	r7,136(sp)
20094e10:	a80b883a 	mov	r5,r21
20094e14:	b00d883a 	mov	r6,r22
20094e18:	0095a3c0 	call	20095a3c <__sbprintf>
20094e1c:	00000106 	br	20094e24 <___vfiprintf_internal_r+0x6dc>
20094e20:	00bfffc4 	movi	r2,-1
20094e24:	dfc03517 	ldw	ra,212(sp)
20094e28:	df003417 	ldw	fp,208(sp)
20094e2c:	ddc03317 	ldw	r23,204(sp)
20094e30:	dd803217 	ldw	r22,200(sp)
20094e34:	dd403117 	ldw	r21,196(sp)
20094e38:	dd003017 	ldw	r20,192(sp)
20094e3c:	dcc02f17 	ldw	r19,188(sp)
20094e40:	dc802e17 	ldw	r18,184(sp)
20094e44:	dc402d17 	ldw	r17,180(sp)
20094e48:	dc002c17 	ldw	r16,176(sp)
20094e4c:	dec03604 	addi	sp,sp,216
20094e50:	f800283a 	ret
20094e54:	0090b200 	call	20090b20 <__sinit>
20094e58:	003e4d06 	br	20094790 <__flash_rwdata_start+0xffff8148>
20094e5c:	8005883a 	mov	r2,r16
20094e60:	ad400114 	ori	r21,r21,4
20094e64:	80c00007 	ldb	r3,0(r16)
20094e68:	003e9506 	br	200948c0 <__flash_rwdata_start+0xffff8278>
20094e6c:	b006d0fa 	srli	r3,r22,3
20094e70:	6808977a 	slli	r4,r13,29
20094e74:	681ad0fa 	srli	r13,r13,3
20094e78:	b58001cc 	andi	r22,r22,7
20094e7c:	b0800c04 	addi	r2,r22,48
20094e80:	a53fffc4 	addi	r20,r20,-1
20094e84:	20ecb03a 	or	r22,r4,r3
20094e88:	a0800005 	stb	r2,0(r20)
20094e8c:	b346b03a 	or	r3,r22,r13
20094e90:	183ff61e 	bne	r3,zero,20094e6c <__flash_rwdata_start+0xffff8824>
20094e94:	a8c0004c 	andi	r3,r21,1
20094e98:	a009883a 	mov	r4,r20
20094e9c:	18013b26 	beq	r3,zero,2009538c <___vfiprintf_internal_r+0xc44>
20094ea0:	10803fcc 	andi	r2,r2,255
20094ea4:	1080201c 	xori	r2,r2,128
20094ea8:	10bfe004 	addi	r2,r2,-128
20094eac:	00c00c04 	movi	r3,48
20094eb0:	10ff1d26 	beq	r2,r3,20094b28 <__flash_rwdata_start+0xffff84e0>
20094eb4:	d8801e17 	ldw	r2,120(sp)
20094eb8:	a53fffc4 	addi	r20,r20,-1
20094ebc:	20ffffc5 	stb	r3,-1(r4)
20094ec0:	1527c83a 	sub	r19,r2,r20
20094ec4:	003f1a06 	br	20094b30 <__flash_rwdata_start+0xffff84e8>
20094ec8:	ad402014 	ori	r21,r21,128
20094ecc:	8005883a 	mov	r2,r16
20094ed0:	80c00007 	ldb	r3,0(r16)
20094ed4:	003e7a06 	br	200948c0 <__flash_rwdata_start+0xffff8278>
20094ed8:	8005883a 	mov	r2,r16
20094edc:	0025883a 	mov	r18,zero
20094ee0:	193ff404 	addi	r4,r3,-48
20094ee4:	10c00007 	ldb	r3,0(r2)
20094ee8:	948002a4 	muli	r18,r18,10
20094eec:	84000044 	addi	r16,r16,1
20094ef0:	8005883a 	mov	r2,r16
20094ef4:	9125883a 	add	r18,r18,r4
20094ef8:	193ff404 	addi	r4,r3,-48
20094efc:	313ff92e 	bgeu	r6,r4,20094ee4 <__flash_rwdata_start+0xffff889c>
20094f00:	003e7006 	br	200948c4 <__flash_rwdata_start+0xffff827c>
20094f04:	ad400414 	ori	r21,r21,16
20094f08:	d9c01d85 	stb	r7,118(sp)
20094f0c:	a880080c 	andi	r2,r21,32
20094f10:	d8c02217 	ldw	r3,136(sp)
20094f14:	10005a26 	beq	r2,zero,20095080 <___vfiprintf_internal_r+0x938>
20094f18:	d9002217 	ldw	r4,136(sp)
20094f1c:	18800117 	ldw	r2,4(r3)
20094f20:	1d800017 	ldw	r22,0(r3)
20094f24:	21000204 	addi	r4,r4,8
20094f28:	d9002215 	stw	r4,136(sp)
20094f2c:	101b883a 	mov	r13,r2
20094f30:	1001f416 	blt	r2,zero,20095704 <___vfiprintf_internal_r+0xfbc>
20094f34:	db801d83 	ldbu	r14,118(sp)
20094f38:	4827883a 	mov	r19,r9
20094f3c:	00800044 	movi	r2,1
20094f40:	b348b03a 	or	r4,r22,r13
20094f44:	003ee106 	br	20094acc <__flash_rwdata_start+0xffff8484>
20094f48:	80c00007 	ldb	r3,0(r16)
20094f4c:	80800044 	addi	r2,r16,1
20094f50:	1b42a326 	beq	r3,r13,200959e0 <___vfiprintf_internal_r+0x1298>
20094f54:	193ff404 	addi	r4,r3,-48
20094f58:	1021883a 	mov	r16,r2
20094f5c:	0013883a 	mov	r9,zero
20094f60:	313e5836 	bltu	r6,r4,200948c4 <__flash_rwdata_start+0xffff827c>
20094f64:	80c00007 	ldb	r3,0(r16)
20094f68:	4a4002a4 	muli	r9,r9,10
20094f6c:	84000044 	addi	r16,r16,1
20094f70:	2253883a 	add	r9,r4,r9
20094f74:	193ff404 	addi	r4,r3,-48
20094f78:	313ffa2e 	bgeu	r6,r4,20094f64 <__flash_rwdata_start+0xffff891c>
20094f7c:	483e510e 	bge	r9,zero,200948c4 <__flash_rwdata_start+0xffff827c>
20094f80:	027fffc4 	movi	r9,-1
20094f84:	003e4f06 	br	200948c4 <__flash_rwdata_start+0xffff827c>
20094f88:	d9c01d85 	stb	r7,118(sp)
20094f8c:	a880080c 	andi	r2,r21,32
20094f90:	10020826 	beq	r2,zero,200957b4 <___vfiprintf_internal_r+0x106c>
20094f94:	d8c02217 	ldw	r3,136(sp)
20094f98:	d9002317 	ldw	r4,140(sp)
20094f9c:	18800017 	ldw	r2,0(r3)
20094fa0:	2007d7fa 	srai	r3,r4,31
20094fa4:	d9002217 	ldw	r4,136(sp)
20094fa8:	10c00115 	stw	r3,4(r2)
20094fac:	21000104 	addi	r4,r4,4
20094fb0:	d9002215 	stw	r4,136(sp)
20094fb4:	d9002317 	ldw	r4,140(sp)
20094fb8:	11000015 	stw	r4,0(r2)
20094fbc:	003e1606 	br	20094818 <__flash_rwdata_start+0xffff81d0>
20094fc0:	d8802217 	ldw	r2,136(sp)
20094fc4:	d8c02217 	ldw	r3,136(sp)
20094fc8:	15800017 	ldw	r22,0(r2)
20094fcc:	13400117 	ldw	r13,4(r2)
20094fd0:	18c00204 	addi	r3,r3,8
20094fd4:	0005883a 	mov	r2,zero
20094fd8:	d8c02215 	stw	r3,136(sp)
20094fdc:	b348b03a 	or	r4,r22,r13
20094fe0:	003eb706 	br	20094ac0 <__flash_rwdata_start+0xffff8478>
20094fe4:	38803fcc 	andi	r2,r7,255
20094fe8:	1080201c 	xori	r2,r2,128
20094fec:	10bfe004 	addi	r2,r2,-128
20094ff0:	1001e31e 	bne	r2,zero,20095780 <___vfiprintf_internal_r+0x1038>
20094ff4:	8005883a 	mov	r2,r16
20094ff8:	01c00804 	movi	r7,32
20094ffc:	80c00007 	ldb	r3,0(r16)
20095000:	003e2f06 	br	200948c0 <__flash_rwdata_start+0xffff8278>
20095004:	ad400054 	ori	r21,r21,1
20095008:	8005883a 	mov	r2,r16
2009500c:	80c00007 	ldb	r3,0(r16)
20095010:	003e2b06 	br	200948c0 <__flash_rwdata_start+0xffff8278>
20095014:	d8c02217 	ldw	r3,136(sp)
20095018:	1c800017 	ldw	r18,0(r3)
2009501c:	18c00104 	addi	r3,r3,4
20095020:	90023816 	blt	r18,zero,20095904 <___vfiprintf_internal_r+0x11bc>
20095024:	d8c02215 	stw	r3,136(sp)
20095028:	8005883a 	mov	r2,r16
2009502c:	80c00007 	ldb	r3,0(r16)
20095030:	003e2306 	br	200948c0 <__flash_rwdata_start+0xffff8278>
20095034:	8005883a 	mov	r2,r16
20095038:	01c00ac4 	movi	r7,43
2009503c:	80c00007 	ldb	r3,0(r16)
20095040:	003e1f06 	br	200948c0 <__flash_rwdata_start+0xffff8278>
20095044:	d8c02217 	ldw	r3,136(sp)
20095048:	04400044 	movi	r17,1
2009504c:	d8001d85 	stb	zero,118(sp)
20095050:	18800017 	ldw	r2,0(r3)
20095054:	18c00104 	addi	r3,r3,4
20095058:	d8c02215 	stw	r3,136(sp)
2009505c:	d8801005 	stb	r2,64(sp)
20095060:	8827883a 	mov	r19,r17
20095064:	dd001004 	addi	r20,sp,64
20095068:	0013883a 	mov	r9,zero
2009506c:	003eb806 	br	20094b50 <__flash_rwdata_start+0xffff8508>
20095070:	d9c01d85 	stb	r7,118(sp)
20095074:	a880080c 	andi	r2,r21,32
20095078:	d8c02217 	ldw	r3,136(sp)
2009507c:	103fa61e 	bne	r2,zero,20094f18 <__flash_rwdata_start+0xffff88d0>
20095080:	a880040c 	andi	r2,r21,16
20095084:	1001dd26 	beq	r2,zero,200957fc <___vfiprintf_internal_r+0x10b4>
20095088:	1d800017 	ldw	r22,0(r3)
2009508c:	d8802217 	ldw	r2,136(sp)
20095090:	b01bd7fa 	srai	r13,r22,31
20095094:	10800104 	addi	r2,r2,4
20095098:	d8802215 	stw	r2,136(sp)
2009509c:	6805883a 	mov	r2,r13
200950a0:	003fa306 	br	20094f30 <__flash_rwdata_start+0xffff88e8>
200950a4:	00800034 	movhi	r2,0
200950a8:	10817f04 	addi	r2,r2,1532
200950ac:	d8802615 	stw	r2,152(sp)
200950b0:	d9c01d85 	stb	r7,118(sp)
200950b4:	a880080c 	andi	r2,r21,32
200950b8:	10004726 	beq	r2,zero,200951d8 <___vfiprintf_internal_r+0xa90>
200950bc:	d9002217 	ldw	r4,136(sp)
200950c0:	25800017 	ldw	r22,0(r4)
200950c4:	23400117 	ldw	r13,4(r4)
200950c8:	21000204 	addi	r4,r4,8
200950cc:	d9002215 	stw	r4,136(sp)
200950d0:	a880004c 	andi	r2,r21,1
200950d4:	10014e26 	beq	r2,zero,20095610 <___vfiprintf_internal_r+0xec8>
200950d8:	b348b03a 	or	r4,r22,r13
200950dc:	20019c26 	beq	r4,zero,20095750 <___vfiprintf_internal_r+0x1008>
200950e0:	00800c04 	movi	r2,48
200950e4:	d8801d05 	stb	r2,116(sp)
200950e8:	d8c01d45 	stb	r3,117(sp)
200950ec:	ad400094 	ori	r21,r21,2
200950f0:	00800084 	movi	r2,2
200950f4:	003e7206 	br	20094ac0 <__flash_rwdata_start+0xffff8478>
200950f8:	d8c02217 	ldw	r3,136(sp)
200950fc:	d8001d85 	stb	zero,118(sp)
20095100:	1d000017 	ldw	r20,0(r3)
20095104:	1d800104 	addi	r22,r3,4
20095108:	a0021c26 	beq	r20,zero,2009597c <___vfiprintf_internal_r+0x1234>
2009510c:	a009883a 	mov	r4,r20
20095110:	48020016 	blt	r9,zero,20095914 <___vfiprintf_internal_r+0x11cc>
20095114:	480d883a 	mov	r6,r9
20095118:	000b883a 	mov	r5,zero
2009511c:	da002a15 	stw	r8,168(sp)
20095120:	da402b15 	stw	r9,172(sp)
20095124:	00918640 	call	20091864 <memchr>
20095128:	da002a17 	ldw	r8,168(sp)
2009512c:	da402b17 	ldw	r9,172(sp)
20095130:	10022226 	beq	r2,zero,200959bc <___vfiprintf_internal_r+0x1274>
20095134:	1527c83a 	sub	r19,r2,r20
20095138:	4cc1c916 	blt	r9,r19,20095860 <___vfiprintf_internal_r+0x1118>
2009513c:	db801d83 	ldbu	r14,118(sp)
20095140:	dd802215 	stw	r22,136(sp)
20095144:	0013883a 	mov	r9,zero
20095148:	003e7906 	br	20094b30 <__flash_rwdata_start+0xffff84e8>
2009514c:	ad401014 	ori	r21,r21,64
20095150:	8005883a 	mov	r2,r16
20095154:	80c00007 	ldb	r3,0(r16)
20095158:	003dd906 	br	200948c0 <__flash_rwdata_start+0xffff8278>
2009515c:	80c00007 	ldb	r3,0(r16)
20095160:	8005883a 	mov	r2,r16
20095164:	1b01e326 	beq	r3,r12,200958f4 <___vfiprintf_internal_r+0x11ac>
20095168:	ad400414 	ori	r21,r21,16
2009516c:	003dd406 	br	200948c0 <__flash_rwdata_start+0xffff8278>
20095170:	d9002217 	ldw	r4,136(sp)
20095174:	00800c04 	movi	r2,48
20095178:	d8801d05 	stb	r2,116(sp)
2009517c:	25800017 	ldw	r22,0(r4)
20095180:	00801e04 	movi	r2,120
20095184:	d8801d45 	stb	r2,117(sp)
20095188:	00800034 	movhi	r2,0
2009518c:	21000104 	addi	r4,r4,4
20095190:	10818404 	addi	r2,r2,1552
20095194:	d9002215 	stw	r4,136(sp)
20095198:	d8802615 	stw	r2,152(sp)
2009519c:	001b883a 	mov	r13,zero
200951a0:	ad400094 	ori	r21,r21,2
200951a4:	00800084 	movi	r2,2
200951a8:	b009883a 	mov	r4,r22
200951ac:	003e4406 	br	20094ac0 <__flash_rwdata_start+0xffff8478>
200951b0:	ad400814 	ori	r21,r21,32
200951b4:	8005883a 	mov	r2,r16
200951b8:	80c00007 	ldb	r3,0(r16)
200951bc:	003dc006 	br	200948c0 <__flash_rwdata_start+0xffff8278>
200951c0:	00800034 	movhi	r2,0
200951c4:	10818404 	addi	r2,r2,1552
200951c8:	d8802615 	stw	r2,152(sp)
200951cc:	d9c01d85 	stb	r7,118(sp)
200951d0:	a880080c 	andi	r2,r21,32
200951d4:	103fb91e 	bne	r2,zero,200950bc <__flash_rwdata_start+0xffff8a74>
200951d8:	a880040c 	andi	r2,r21,16
200951dc:	10010f1e 	bne	r2,zero,2009561c <___vfiprintf_internal_r+0xed4>
200951e0:	a880100c 	andi	r2,r21,64
200951e4:	10010d26 	beq	r2,zero,2009561c <___vfiprintf_internal_r+0xed4>
200951e8:	d9002217 	ldw	r4,136(sp)
200951ec:	001b883a 	mov	r13,zero
200951f0:	2580000b 	ldhu	r22,0(r4)
200951f4:	21000104 	addi	r4,r4,4
200951f8:	d9002215 	stw	r4,136(sp)
200951fc:	003fb406 	br	200950d0 <__flash_rwdata_start+0xffff8a88>
20095200:	d9002217 	ldw	r4,136(sp)
20095204:	00800044 	movi	r2,1
20095208:	25800017 	ldw	r22,0(r4)
2009520c:	23400117 	ldw	r13,4(r4)
20095210:	21000204 	addi	r4,r4,8
20095214:	d9002215 	stw	r4,136(sp)
20095218:	b348b03a 	or	r4,r22,r13
2009521c:	003e2806 	br	20094ac0 <__flash_rwdata_start+0xffff8478>
20095220:	d9c01d85 	stb	r7,118(sp)
20095224:	1801ab26 	beq	r3,zero,200958d4 <___vfiprintf_internal_r+0x118c>
20095228:	04400044 	movi	r17,1
2009522c:	d8c01005 	stb	r3,64(sp)
20095230:	d8001d85 	stb	zero,118(sp)
20095234:	8827883a 	mov	r19,r17
20095238:	dd001004 	addi	r20,sp,64
2009523c:	003f8a06 	br	20095068 <__flash_rwdata_start+0xffff8a20>
20095240:	d9002017 	ldw	r4,128(sp)
20095244:	d9402117 	ldw	r5,132(sp)
20095248:	d9801a04 	addi	r6,sp,104
2009524c:	d9c02b15 	stw	r7,172(sp)
20095250:	dbc02a15 	stw	r15,168(sp)
20095254:	00946340 	call	20094634 <__sprint_r.part.0>
20095258:	d9c02b17 	ldw	r7,172(sp)
2009525c:	dbc02a17 	ldw	r15,168(sp)
20095260:	1000631e 	bne	r2,zero,200953f0 <___vfiprintf_internal_r+0xca8>
20095264:	d9801b17 	ldw	r6,108(sp)
20095268:	d8801c17 	ldw	r2,112(sp)
2009526c:	d811883a 	mov	r8,sp
20095270:	31400044 	addi	r5,r6,1
20095274:	003e4d06 	br	20094bac <__flash_rwdata_start+0xffff8564>
20095278:	d9401b17 	ldw	r5,108(sp)
2009527c:	d8801c17 	ldw	r2,112(sp)
20095280:	29000044 	addi	r4,r5,1
20095284:	d8c01d87 	ldb	r3,118(sp)
20095288:	183e6726 	beq	r3,zero,20094c28 <__flash_rwdata_start+0xffff85e0>
2009528c:	00c00044 	movi	r3,1
20095290:	d9401d84 	addi	r5,sp,118
20095294:	10c5883a 	add	r2,r2,r3
20095298:	41400015 	stw	r5,0(r8)
2009529c:	40c00115 	stw	r3,4(r8)
200952a0:	d8801c15 	stw	r2,112(sp)
200952a4:	d9001b15 	stw	r4,108(sp)
200952a8:	014001c4 	movi	r5,7
200952ac:	2900ab16 	blt	r5,r4,2009555c <___vfiprintf_internal_r+0xe14>
200952b0:	200b883a 	mov	r5,r4
200952b4:	42000204 	addi	r8,r8,8
200952b8:	21000044 	addi	r4,r4,1
200952bc:	003e5a06 	br	20094c28 <__flash_rwdata_start+0xffff85e0>
200952c0:	d9002017 	ldw	r4,128(sp)
200952c4:	d9402117 	ldw	r5,132(sp)
200952c8:	d9801a04 	addi	r6,sp,104
200952cc:	d9c02b15 	stw	r7,172(sp)
200952d0:	db402a15 	stw	r13,168(sp)
200952d4:	00946340 	call	20094634 <__sprint_r.part.0>
200952d8:	d9c02b17 	ldw	r7,172(sp)
200952dc:	db402a17 	ldw	r13,168(sp)
200952e0:	1000431e 	bne	r2,zero,200953f0 <___vfiprintf_internal_r+0xca8>
200952e4:	d9401b17 	ldw	r5,108(sp)
200952e8:	d8801c17 	ldw	r2,112(sp)
200952ec:	d811883a 	mov	r8,sp
200952f0:	29000044 	addi	r4,r5,1
200952f4:	003e6706 	br	20094c94 <__flash_rwdata_start+0xffff864c>
200952f8:	10803fcc 	andi	r2,r2,255
200952fc:	00c00044 	movi	r3,1
20095300:	10fdfa1e 	bne	r2,r3,20094aec <__flash_rwdata_start+0xffff84a4>
20095304:	6800021e 	bne	r13,zero,20095310 <___vfiprintf_internal_r+0xbc8>
20095308:	00800244 	movi	r2,9
2009530c:	1580222e 	bgeu	r2,r22,20095398 <___vfiprintf_internal_r+0xc50>
20095310:	dc802415 	stw	r18,144(sp)
20095314:	dc002515 	stw	r16,148(sp)
20095318:	dc401a04 	addi	r17,sp,104
2009531c:	b021883a 	mov	r16,r22
20095320:	4827883a 	mov	r19,r9
20095324:	4029883a 	mov	r20,r8
20095328:	702d883a 	mov	r22,r14
2009532c:	6825883a 	mov	r18,r13
20095330:	8009883a 	mov	r4,r16
20095334:	900b883a 	mov	r5,r18
20095338:	01800284 	movi	r6,10
2009533c:	000f883a 	mov	r7,zero
20095340:	00969b00 	call	200969b0 <__umoddi3>
20095344:	10800c04 	addi	r2,r2,48
20095348:	8c7fffc4 	addi	r17,r17,-1
2009534c:	8009883a 	mov	r4,r16
20095350:	900b883a 	mov	r5,r18
20095354:	01800284 	movi	r6,10
20095358:	000f883a 	mov	r7,zero
2009535c:	88800005 	stb	r2,0(r17)
20095360:	00963f00 	call	200963f0 <__udivdi3>
20095364:	1021883a 	mov	r16,r2
20095368:	10c4b03a 	or	r2,r2,r3
2009536c:	1825883a 	mov	r18,r3
20095370:	103fef1e 	bne	r2,zero,20095330 <__flash_rwdata_start+0xffff8ce8>
20095374:	dc802417 	ldw	r18,144(sp)
20095378:	dc002517 	ldw	r16,148(sp)
2009537c:	a011883a 	mov	r8,r20
20095380:	9813883a 	mov	r9,r19
20095384:	b01d883a 	mov	r14,r22
20095388:	8829883a 	mov	r20,r17
2009538c:	d8c01e17 	ldw	r3,120(sp)
20095390:	1d27c83a 	sub	r19,r3,r20
20095394:	003de606 	br	20094b30 <__flash_rwdata_start+0xffff84e8>
20095398:	b5800c04 	addi	r22,r22,48
2009539c:	dd8019c5 	stb	r22,103(sp)
200953a0:	dcc02717 	ldw	r19,156(sp)
200953a4:	dd0019c4 	addi	r20,sp,103
200953a8:	003de106 	br	20094b30 <__flash_rwdata_start+0xffff84e8>
200953ac:	d9002017 	ldw	r4,128(sp)
200953b0:	d9402117 	ldw	r5,132(sp)
200953b4:	d9801a04 	addi	r6,sp,104
200953b8:	00946340 	call	20094634 <__sprint_r.part.0>
200953bc:	10000c1e 	bne	r2,zero,200953f0 <___vfiprintf_internal_r+0xca8>
200953c0:	d8801c17 	ldw	r2,112(sp)
200953c4:	8c80010e 	bge	r17,r18,200953cc <___vfiprintf_internal_r+0xc84>
200953c8:	9023883a 	mov	r17,r18
200953cc:	d8c02317 	ldw	r3,140(sp)
200953d0:	1c47883a 	add	r3,r3,r17
200953d4:	d8c02315 	stw	r3,140(sp)
200953d8:	103e7e26 	beq	r2,zero,20094dd4 <__flash_rwdata_start+0xffff878c>
200953dc:	d9002017 	ldw	r4,128(sp)
200953e0:	d9402117 	ldw	r5,132(sp)
200953e4:	d9801a04 	addi	r6,sp,104
200953e8:	00946340 	call	20094634 <__sprint_r.part.0>
200953ec:	103e7926 	beq	r2,zero,20094dd4 <__flash_rwdata_start+0xffff878c>
200953f0:	dd402117 	ldw	r21,132(sp)
200953f4:	a880030b 	ldhu	r2,12(r21)
200953f8:	1080100c 	andi	r2,r2,64
200953fc:	103e881e 	bne	r2,zero,20094e20 <__flash_rwdata_start+0xffff87d8>
20095400:	d8802317 	ldw	r2,140(sp)
20095404:	003e8706 	br	20094e24 <__flash_rwdata_start+0xffff87dc>
20095408:	d9402117 	ldw	r5,132(sp)
2009540c:	b009883a 	mov	r4,r22
20095410:	d9801a04 	addi	r6,sp,104
20095414:	00946340 	call	20094634 <__sprint_r.part.0>
20095418:	103ff51e 	bne	r2,zero,200953f0 <__flash_rwdata_start+0xffff8da8>
2009541c:	d9001b17 	ldw	r4,108(sp)
20095420:	d8801c17 	ldw	r2,112(sp)
20095424:	d811883a 	mov	r8,sp
20095428:	21400044 	addi	r5,r4,1
2009542c:	003e4d06 	br	20094d64 <__flash_rwdata_start+0xffff871c>
20095430:	1000aa1e 	bne	r2,zero,200956dc <___vfiprintf_internal_r+0xf94>
20095434:	00c00044 	movi	r3,1
20095438:	9805883a 	mov	r2,r19
2009543c:	dd000015 	stw	r20,0(sp)
20095440:	dcc00115 	stw	r19,4(sp)
20095444:	dcc01c15 	stw	r19,112(sp)
20095448:	d8c01b15 	stw	r3,108(sp)
2009544c:	d811883a 	mov	r8,sp
20095450:	42000204 	addi	r8,r8,8
20095454:	aac0010c 	andi	r11,r21,4
20095458:	583fda26 	beq	r11,zero,200953c4 <__flash_rwdata_start+0xffff8d7c>
2009545c:	9467c83a 	sub	r19,r18,r17
20095460:	04fe3316 	blt	zero,r19,20094d30 <__flash_rwdata_start+0xffff86e8>
20095464:	003fd706 	br	200953c4 <__flash_rwdata_start+0xffff8d7c>
20095468:	946dc83a 	sub	r22,r18,r17
2009546c:	05bdfd0e 	bge	zero,r22,20094c64 <__flash_rwdata_start+0xffff861c>
20095470:	00c00034 	movhi	r3,0
20095474:	18c1f404 	addi	r3,r3,2000
20095478:	01c00404 	movi	r7,16
2009547c:	d8c02415 	stw	r3,144(sp)
20095480:	3d81530e 	bge	r7,r22,200959d0 <___vfiprintf_internal_r+0x1288>
20095484:	8007883a 	mov	r3,r16
20095488:	034001c4 	movi	r13,7
2009548c:	b021883a 	mov	r16,r22
20095490:	da402515 	stw	r9,148(sp)
20095494:	182d883a 	mov	r22,r3
20095498:	00000506 	br	200954b0 <___vfiprintf_internal_r+0xd68>
2009549c:	29800084 	addi	r6,r5,2
200954a0:	42000204 	addi	r8,r8,8
200954a4:	180b883a 	mov	r5,r3
200954a8:	843ffc04 	addi	r16,r16,-16
200954ac:	3c000d0e 	bge	r7,r16,200954e4 <___vfiprintf_internal_r+0xd9c>
200954b0:	10800404 	addi	r2,r2,16
200954b4:	28c00044 	addi	r3,r5,1
200954b8:	45c00015 	stw	r23,0(r8)
200954bc:	41c00115 	stw	r7,4(r8)
200954c0:	d8801c15 	stw	r2,112(sp)
200954c4:	d8c01b15 	stw	r3,108(sp)
200954c8:	68fff40e 	bge	r13,r3,2009549c <__flash_rwdata_start+0xffff8e54>
200954cc:	1000151e 	bne	r2,zero,20095524 <___vfiprintf_internal_r+0xddc>
200954d0:	843ffc04 	addi	r16,r16,-16
200954d4:	01800044 	movi	r6,1
200954d8:	000b883a 	mov	r5,zero
200954dc:	d811883a 	mov	r8,sp
200954e0:	3c3ff316 	blt	r7,r16,200954b0 <__flash_rwdata_start+0xffff8e68>
200954e4:	da402517 	ldw	r9,148(sp)
200954e8:	b007883a 	mov	r3,r22
200954ec:	802d883a 	mov	r22,r16
200954f0:	1821883a 	mov	r16,r3
200954f4:	d8c02417 	ldw	r3,144(sp)
200954f8:	1585883a 	add	r2,r2,r22
200954fc:	45800115 	stw	r22,4(r8)
20095500:	40c00015 	stw	r3,0(r8)
20095504:	d8801c15 	stw	r2,112(sp)
20095508:	d9801b15 	stw	r6,108(sp)
2009550c:	00c001c4 	movi	r3,7
20095510:	19806d16 	blt	r3,r6,200956c8 <___vfiprintf_internal_r+0xf80>
20095514:	42000204 	addi	r8,r8,8
20095518:	31000044 	addi	r4,r6,1
2009551c:	300b883a 	mov	r5,r6
20095520:	003dd006 	br	20094c64 <__flash_rwdata_start+0xffff861c>
20095524:	d9002017 	ldw	r4,128(sp)
20095528:	d9402117 	ldw	r5,132(sp)
2009552c:	d9801a04 	addi	r6,sp,104
20095530:	d9c02b15 	stw	r7,172(sp)
20095534:	db402a15 	stw	r13,168(sp)
20095538:	00946340 	call	20094634 <__sprint_r.part.0>
2009553c:	d9c02b17 	ldw	r7,172(sp)
20095540:	db402a17 	ldw	r13,168(sp)
20095544:	103faa1e 	bne	r2,zero,200953f0 <__flash_rwdata_start+0xffff8da8>
20095548:	d9401b17 	ldw	r5,108(sp)
2009554c:	d8801c17 	ldw	r2,112(sp)
20095550:	d811883a 	mov	r8,sp
20095554:	29800044 	addi	r6,r5,1
20095558:	003fd306 	br	200954a8 <__flash_rwdata_start+0xffff8e60>
2009555c:	1000401e 	bne	r2,zero,20095660 <___vfiprintf_internal_r+0xf18>
20095560:	68003b26 	beq	r13,zero,20095650 <___vfiprintf_internal_r+0xf08>
20095564:	d9001d04 	addi	r4,sp,116
20095568:	00800084 	movi	r2,2
2009556c:	d9000015 	stw	r4,0(sp)
20095570:	d8800115 	stw	r2,4(sp)
20095574:	1809883a 	mov	r4,r3
20095578:	d811883a 	mov	r8,sp
2009557c:	003db406 	br	20094c50 <__flash_rwdata_start+0xffff8608>
20095580:	1000451e 	bne	r2,zero,20095698 <___vfiprintf_internal_r+0xf50>
20095584:	01000044 	movi	r4,1
20095588:	000b883a 	mov	r5,zero
2009558c:	d811883a 	mov	r8,sp
20095590:	003db206 	br	20094c5c <__flash_rwdata_start+0xffff8614>
20095594:	10803fcc 	andi	r2,r2,255
20095598:	1000071e 	bne	r2,zero,200955b8 <___vfiprintf_internal_r+0xe70>
2009559c:	a880004c 	andi	r2,r21,1
200955a0:	10000526 	beq	r2,zero,200955b8 <___vfiprintf_internal_r+0xe70>
200955a4:	00800c04 	movi	r2,48
200955a8:	d88019c5 	stb	r2,103(sp)
200955ac:	dcc02717 	ldw	r19,156(sp)
200955b0:	dd0019c4 	addi	r20,sp,103
200955b4:	003d5e06 	br	20094b30 <__flash_rwdata_start+0xffff84e8>
200955b8:	dd001a04 	addi	r20,sp,104
200955bc:	003d5c06 	br	20094b30 <__flash_rwdata_start+0xffff84e8>
200955c0:	1000971e 	bne	r2,zero,20095820 <___vfiprintf_internal_r+0x10d8>
200955c4:	d8c01d87 	ldb	r3,118(sp)
200955c8:	18005826 	beq	r3,zero,2009572c <___vfiprintf_internal_r+0xfe4>
200955cc:	00800044 	movi	r2,1
200955d0:	d8c01d84 	addi	r3,sp,118
200955d4:	1009883a 	mov	r4,r2
200955d8:	d8c00015 	stw	r3,0(sp)
200955dc:	d8800115 	stw	r2,4(sp)
200955e0:	d811883a 	mov	r8,sp
200955e4:	003f3206 	br	200952b0 <__flash_rwdata_start+0xffff8c68>
200955e8:	8023883a 	mov	r17,r16
200955ec:	003ca706 	br	2009488c <__flash_rwdata_start+0xffff8244>
200955f0:	d9002017 	ldw	r4,128(sp)
200955f4:	d9402117 	ldw	r5,132(sp)
200955f8:	d9801a04 	addi	r6,sp,104
200955fc:	00946340 	call	20094634 <__sprint_r.part.0>
20095600:	103f7b1e 	bne	r2,zero,200953f0 <__flash_rwdata_start+0xffff8da8>
20095604:	d8801c17 	ldw	r2,112(sp)
20095608:	d811883a 	mov	r8,sp
2009560c:	003f9106 	br	20095454 <__flash_rwdata_start+0xffff8e0c>
20095610:	00800084 	movi	r2,2
20095614:	b348b03a 	or	r4,r22,r13
20095618:	003d2906 	br	20094ac0 <__flash_rwdata_start+0xffff8478>
2009561c:	d8802217 	ldw	r2,136(sp)
20095620:	001b883a 	mov	r13,zero
20095624:	15800017 	ldw	r22,0(r2)
20095628:	10800104 	addi	r2,r2,4
2009562c:	d8802215 	stw	r2,136(sp)
20095630:	003ea706 	br	200950d0 <__flash_rwdata_start+0xffff8a88>
20095634:	d9002017 	ldw	r4,128(sp)
20095638:	d9402117 	ldw	r5,132(sp)
2009563c:	d9801a04 	addi	r6,sp,104
20095640:	00946340 	call	20094634 <__sprint_r.part.0>
20095644:	103f6a1e 	bne	r2,zero,200953f0 <__flash_rwdata_start+0xffff8da8>
20095648:	d811883a 	mov	r8,sp
2009564c:	003cff06 	br	20094a4c <__flash_rwdata_start+0xffff8404>
20095650:	000b883a 	mov	r5,zero
20095654:	1809883a 	mov	r4,r3
20095658:	d811883a 	mov	r8,sp
2009565c:	003d7f06 	br	20094c5c <__flash_rwdata_start+0xffff8614>
20095660:	d9002017 	ldw	r4,128(sp)
20095664:	d9402117 	ldw	r5,132(sp)
20095668:	d9801a04 	addi	r6,sp,104
2009566c:	da402b15 	stw	r9,172(sp)
20095670:	db402a15 	stw	r13,168(sp)
20095674:	00946340 	call	20094634 <__sprint_r.part.0>
20095678:	da402b17 	ldw	r9,172(sp)
2009567c:	db402a17 	ldw	r13,168(sp)
20095680:	103f5b1e 	bne	r2,zero,200953f0 <__flash_rwdata_start+0xffff8da8>
20095684:	d9401b17 	ldw	r5,108(sp)
20095688:	d8801c17 	ldw	r2,112(sp)
2009568c:	d811883a 	mov	r8,sp
20095690:	29000044 	addi	r4,r5,1
20095694:	003d6406 	br	20094c28 <__flash_rwdata_start+0xffff85e0>
20095698:	d9002017 	ldw	r4,128(sp)
2009569c:	d9402117 	ldw	r5,132(sp)
200956a0:	d9801a04 	addi	r6,sp,104
200956a4:	da402b15 	stw	r9,172(sp)
200956a8:	00946340 	call	20094634 <__sprint_r.part.0>
200956ac:	da402b17 	ldw	r9,172(sp)
200956b0:	103f4f1e 	bne	r2,zero,200953f0 <__flash_rwdata_start+0xffff8da8>
200956b4:	d9401b17 	ldw	r5,108(sp)
200956b8:	d8801c17 	ldw	r2,112(sp)
200956bc:	d811883a 	mov	r8,sp
200956c0:	29000044 	addi	r4,r5,1
200956c4:	003d6506 	br	20094c5c <__flash_rwdata_start+0xffff8614>
200956c8:	10009a1e 	bne	r2,zero,20095934 <___vfiprintf_internal_r+0x11ec>
200956cc:	01000044 	movi	r4,1
200956d0:	000b883a 	mov	r5,zero
200956d4:	d811883a 	mov	r8,sp
200956d8:	003d6206 	br	20094c64 <__flash_rwdata_start+0xffff861c>
200956dc:	d9002017 	ldw	r4,128(sp)
200956e0:	d9402117 	ldw	r5,132(sp)
200956e4:	d9801a04 	addi	r6,sp,104
200956e8:	00946340 	call	20094634 <__sprint_r.part.0>
200956ec:	103f401e 	bne	r2,zero,200953f0 <__flash_rwdata_start+0xffff8da8>
200956f0:	d9001b17 	ldw	r4,108(sp)
200956f4:	d8801c17 	ldw	r2,112(sp)
200956f8:	d811883a 	mov	r8,sp
200956fc:	21000044 	addi	r4,r4,1
20095700:	003d7d06 	br	20094cf8 <__flash_rwdata_start+0xffff86b0>
20095704:	05adc83a 	sub	r22,zero,r22
20095708:	b004c03a 	cmpne	r2,r22,zero
2009570c:	035bc83a 	sub	r13,zero,r13
20095710:	689bc83a 	sub	r13,r13,r2
20095714:	03800b44 	movi	r14,45
20095718:	db801d85 	stb	r14,118(sp)
2009571c:	4827883a 	mov	r19,r9
20095720:	00800044 	movi	r2,1
20095724:	b348b03a 	or	r4,r22,r13
20095728:	003ce806 	br	20094acc <__flash_rwdata_start+0xffff8484>
2009572c:	000b883a 	mov	r5,zero
20095730:	01000044 	movi	r4,1
20095734:	d811883a 	mov	r8,sp
20095738:	683d4826 	beq	r13,zero,20094c5c <__flash_rwdata_start+0xffff8614>
2009573c:	00800084 	movi	r2,2
20095740:	d8c01d04 	addi	r3,sp,116
20095744:	d8c00015 	stw	r3,0(sp)
20095748:	d8800115 	stw	r2,4(sp)
2009574c:	003d4006 	br	20094c50 <__flash_rwdata_start+0xffff8608>
20095750:	00800084 	movi	r2,2
20095754:	003cda06 	br	20094ac0 <__flash_rwdata_start+0xffff8478>
20095758:	a880100c 	andi	r2,r21,64
2009575c:	10004226 	beq	r2,zero,20095868 <___vfiprintf_internal_r+0x1120>
20095760:	d8802217 	ldw	r2,136(sp)
20095764:	001b883a 	mov	r13,zero
20095768:	1580000b 	ldhu	r22,0(r2)
2009576c:	10800104 	addi	r2,r2,4
20095770:	d8802215 	stw	r2,136(sp)
20095774:	b009883a 	mov	r4,r22
20095778:	0005883a 	mov	r2,zero
2009577c:	003cd006 	br	20094ac0 <__flash_rwdata_start+0xffff8478>
20095780:	80c00007 	ldb	r3,0(r16)
20095784:	8005883a 	mov	r2,r16
20095788:	003c4d06 	br	200948c0 <__flash_rwdata_start+0xffff8278>
2009578c:	a880100c 	andi	r2,r21,64
20095790:	10004426 	beq	r2,zero,200958a4 <___vfiprintf_internal_r+0x115c>
20095794:	d8c02217 	ldw	r3,136(sp)
20095798:	001b883a 	mov	r13,zero
2009579c:	00800044 	movi	r2,1
200957a0:	1d80000b 	ldhu	r22,0(r3)
200957a4:	18c00104 	addi	r3,r3,4
200957a8:	d8c02215 	stw	r3,136(sp)
200957ac:	b009883a 	mov	r4,r22
200957b0:	003cc306 	br	20094ac0 <__flash_rwdata_start+0xffff8478>
200957b4:	a880040c 	andi	r2,r21,16
200957b8:	1000091e 	bne	r2,zero,200957e0 <___vfiprintf_internal_r+0x1098>
200957bc:	aac0100c 	andi	r11,r21,64
200957c0:	58000726 	beq	r11,zero,200957e0 <___vfiprintf_internal_r+0x1098>
200957c4:	d8c02217 	ldw	r3,136(sp)
200957c8:	d9002317 	ldw	r4,140(sp)
200957cc:	18800017 	ldw	r2,0(r3)
200957d0:	18c00104 	addi	r3,r3,4
200957d4:	d8c02215 	stw	r3,136(sp)
200957d8:	1100000d 	sth	r4,0(r2)
200957dc:	003c0e06 	br	20094818 <__flash_rwdata_start+0xffff81d0>
200957e0:	d8c02217 	ldw	r3,136(sp)
200957e4:	d9002317 	ldw	r4,140(sp)
200957e8:	18800017 	ldw	r2,0(r3)
200957ec:	18c00104 	addi	r3,r3,4
200957f0:	d8c02215 	stw	r3,136(sp)
200957f4:	11000015 	stw	r4,0(r2)
200957f8:	003c0706 	br	20094818 <__flash_rwdata_start+0xffff81d0>
200957fc:	a880100c 	andi	r2,r21,64
20095800:	10002126 	beq	r2,zero,20095888 <___vfiprintf_internal_r+0x1140>
20095804:	1d80000f 	ldh	r22,0(r3)
20095808:	d8c02217 	ldw	r3,136(sp)
2009580c:	b01bd7fa 	srai	r13,r22,31
20095810:	18c00104 	addi	r3,r3,4
20095814:	d8c02215 	stw	r3,136(sp)
20095818:	6805883a 	mov	r2,r13
2009581c:	003dc406 	br	20094f30 <__flash_rwdata_start+0xffff88e8>
20095820:	d9002017 	ldw	r4,128(sp)
20095824:	d9402117 	ldw	r5,132(sp)
20095828:	d9801a04 	addi	r6,sp,104
2009582c:	da402b15 	stw	r9,172(sp)
20095830:	db402a15 	stw	r13,168(sp)
20095834:	00946340 	call	20094634 <__sprint_r.part.0>
20095838:	da402b17 	ldw	r9,172(sp)
2009583c:	db402a17 	ldw	r13,168(sp)
20095840:	103eeb1e 	bne	r2,zero,200953f0 <__flash_rwdata_start+0xffff8da8>
20095844:	d9401b17 	ldw	r5,108(sp)
20095848:	d8801c17 	ldw	r2,112(sp)
2009584c:	d811883a 	mov	r8,sp
20095850:	29000044 	addi	r4,r5,1
20095854:	003e8b06 	br	20095284 <__flash_rwdata_start+0xffff8c3c>
20095858:	9023883a 	mov	r17,r18
2009585c:	003d5a06 	br	20094dc8 <__flash_rwdata_start+0xffff8780>
20095860:	4827883a 	mov	r19,r9
20095864:	003e3506 	br	2009513c <__flash_rwdata_start+0xffff8af4>
20095868:	d8c02217 	ldw	r3,136(sp)
2009586c:	001b883a 	mov	r13,zero
20095870:	0005883a 	mov	r2,zero
20095874:	1d800017 	ldw	r22,0(r3)
20095878:	18c00104 	addi	r3,r3,4
2009587c:	d8c02215 	stw	r3,136(sp)
20095880:	b009883a 	mov	r4,r22
20095884:	003c8e06 	br	20094ac0 <__flash_rwdata_start+0xffff8478>
20095888:	1d800017 	ldw	r22,0(r3)
2009588c:	d9002217 	ldw	r4,136(sp)
20095890:	b01bd7fa 	srai	r13,r22,31
20095894:	21000104 	addi	r4,r4,4
20095898:	d9002215 	stw	r4,136(sp)
2009589c:	6805883a 	mov	r2,r13
200958a0:	003da306 	br	20094f30 <__flash_rwdata_start+0xffff88e8>
200958a4:	d9002217 	ldw	r4,136(sp)
200958a8:	001b883a 	mov	r13,zero
200958ac:	00800044 	movi	r2,1
200958b0:	25800017 	ldw	r22,0(r4)
200958b4:	21000104 	addi	r4,r4,4
200958b8:	d9002215 	stw	r4,136(sp)
200958bc:	b009883a 	mov	r4,r22
200958c0:	003c7f06 	br	20094ac0 <__flash_rwdata_start+0xffff8478>
200958c4:	00c00034 	movhi	r3,0
200958c8:	18c1f404 	addi	r3,r3,2000
200958cc:	d8c02415 	stw	r3,144(sp)
200958d0:	003cff06 	br	20094cd0 <__flash_rwdata_start+0xffff8688>
200958d4:	d8801c17 	ldw	r2,112(sp)
200958d8:	dd402117 	ldw	r21,132(sp)
200958dc:	103ec526 	beq	r2,zero,200953f4 <__flash_rwdata_start+0xffff8dac>
200958e0:	d9002017 	ldw	r4,128(sp)
200958e4:	a80b883a 	mov	r5,r21
200958e8:	d9801a04 	addi	r6,sp,104
200958ec:	00946340 	call	20094634 <__sprint_r.part.0>
200958f0:	003ec006 	br	200953f4 <__flash_rwdata_start+0xffff8dac>
200958f4:	80800044 	addi	r2,r16,1
200958f8:	ad400814 	ori	r21,r21,32
200958fc:	80c00047 	ldb	r3,1(r16)
20095900:	003bef06 	br	200948c0 <__flash_rwdata_start+0xffff8278>
20095904:	04a5c83a 	sub	r18,zero,r18
20095908:	8005883a 	mov	r2,r16
2009590c:	d8c02215 	stw	r3,136(sp)
20095910:	003d5306 	br	20094e60 <__flash_rwdata_start+0xffff8818>
20095914:	da002a15 	stw	r8,168(sp)
20095918:	008a73c0 	call	2008a73c <strlen>
2009591c:	1027883a 	mov	r19,r2
20095920:	db801d83 	ldbu	r14,118(sp)
20095924:	dd802215 	stw	r22,136(sp)
20095928:	0013883a 	mov	r9,zero
2009592c:	da002a17 	ldw	r8,168(sp)
20095930:	003c7f06 	br	20094b30 <__flash_rwdata_start+0xffff84e8>
20095934:	d9002017 	ldw	r4,128(sp)
20095938:	d9402117 	ldw	r5,132(sp)
2009593c:	d9801a04 	addi	r6,sp,104
20095940:	da402b15 	stw	r9,172(sp)
20095944:	00946340 	call	20094634 <__sprint_r.part.0>
20095948:	da402b17 	ldw	r9,172(sp)
2009594c:	103ea81e 	bne	r2,zero,200953f0 <__flash_rwdata_start+0xffff8da8>
20095950:	d9401b17 	ldw	r5,108(sp)
20095954:	d8801c17 	ldw	r2,112(sp)
20095958:	d811883a 	mov	r8,sp
2009595c:	29000044 	addi	r4,r5,1
20095960:	003cc006 	br	20094c64 <__flash_rwdata_start+0xffff861c>
20095964:	d9401b17 	ldw	r5,108(sp)
20095968:	01000034 	movhi	r4,0
2009596c:	2101f804 	addi	r4,r4,2016
20095970:	d9002415 	stw	r4,144(sp)
20095974:	29400044 	addi	r5,r5,1
20095978:	003c9f06 	br	20094bf8 <__flash_rwdata_start+0xffff85b0>
2009597c:	00800184 	movi	r2,6
20095980:	1240012e 	bgeu	r2,r9,20095988 <___vfiprintf_internal_r+0x1240>
20095984:	1013883a 	mov	r9,r2
20095988:	4827883a 	mov	r19,r9
2009598c:	4823883a 	mov	r17,r9
20095990:	48001116 	blt	r9,zero,200959d8 <___vfiprintf_internal_r+0x1290>
20095994:	05000034 	movhi	r20,0
20095998:	dd802215 	stw	r22,136(sp)
2009599c:	a5018904 	addi	r20,r20,1572
200959a0:	003db106 	br	20095068 <__flash_rwdata_start+0xffff8a20>
200959a4:	d9401b17 	ldw	r5,108(sp)
200959a8:	01000034 	movhi	r4,0
200959ac:	2101f804 	addi	r4,r4,2016
200959b0:	d9002415 	stw	r4,144(sp)
200959b4:	29400044 	addi	r5,r5,1
200959b8:	003cf906 	br	20094da0 <__flash_rwdata_start+0xffff8758>
200959bc:	4827883a 	mov	r19,r9
200959c0:	db801d83 	ldbu	r14,118(sp)
200959c4:	dd802215 	stw	r22,136(sp)
200959c8:	0013883a 	mov	r9,zero
200959cc:	003c5806 	br	20094b30 <__flash_rwdata_start+0xffff84e8>
200959d0:	200d883a 	mov	r6,r4
200959d4:	003ec706 	br	200954f4 <__flash_rwdata_start+0xffff8eac>
200959d8:	0023883a 	mov	r17,zero
200959dc:	003fed06 	br	20095994 <__flash_rwdata_start+0xffff934c>
200959e0:	d9002217 	ldw	r4,136(sp)
200959e4:	22400017 	ldw	r9,0(r4)
200959e8:	20c00104 	addi	r3,r4,4
200959ec:	d8c02215 	stw	r3,136(sp)
200959f0:	483fc20e 	bge	r9,zero,200958fc <__flash_rwdata_start+0xffff92b4>
200959f4:	027fffc4 	movi	r9,-1
200959f8:	80c00047 	ldb	r3,1(r16)
200959fc:	003bb006 	br	200948c0 <__flash_rwdata_start+0xffff8278>
20095a00:	8c80010e 	bge	r17,r18,20095a08 <___vfiprintf_internal_r+0x12c0>
20095a04:	9023883a 	mov	r17,r18
20095a08:	d8802317 	ldw	r2,140(sp)
20095a0c:	1445883a 	add	r2,r2,r17
20095a10:	d8802315 	stw	r2,140(sp)
20095a14:	003cef06 	br	20094dd4 <__flash_rwdata_start+0xffff878c>

20095a18 <__vfiprintf_internal>:
20095a18:	2007883a 	mov	r3,r4
20095a1c:	01000034 	movhi	r4,0
20095a20:	210a1404 	addi	r4,r4,10320
20095a24:	21000017 	ldw	r4,0(r4)
20095a28:	2805883a 	mov	r2,r5
20095a2c:	300f883a 	mov	r7,r6
20095a30:	180b883a 	mov	r5,r3
20095a34:	100d883a 	mov	r6,r2
20095a38:	00947481 	jmpi	20094748 <___vfiprintf_internal_r>

20095a3c <__sbprintf>:
20095a3c:	2880030b 	ldhu	r2,12(r5)
20095a40:	2ac01917 	ldw	r11,100(r5)
20095a44:	2a80038b 	ldhu	r10,14(r5)
20095a48:	2a400717 	ldw	r9,28(r5)
20095a4c:	2a000917 	ldw	r8,36(r5)
20095a50:	defee204 	addi	sp,sp,-1144
20095a54:	00c10004 	movi	r3,1024
20095a58:	dc011a15 	stw	r16,1128(sp)
20095a5c:	10bfff4c 	andi	r2,r2,65533
20095a60:	2821883a 	mov	r16,r5
20095a64:	d8cb883a 	add	r5,sp,r3
20095a68:	dc811c15 	stw	r18,1136(sp)
20095a6c:	dc411b15 	stw	r17,1132(sp)
20095a70:	dfc11d15 	stw	ra,1140(sp)
20095a74:	2025883a 	mov	r18,r4
20095a78:	d881030d 	sth	r2,1036(sp)
20095a7c:	dac11915 	stw	r11,1124(sp)
20095a80:	da81038d 	sth	r10,1038(sp)
20095a84:	da410715 	stw	r9,1052(sp)
20095a88:	da010915 	stw	r8,1060(sp)
20095a8c:	dec10015 	stw	sp,1024(sp)
20095a90:	dec10415 	stw	sp,1040(sp)
20095a94:	d8c10215 	stw	r3,1032(sp)
20095a98:	d8c10515 	stw	r3,1044(sp)
20095a9c:	d8010615 	stw	zero,1048(sp)
20095aa0:	00947480 	call	20094748 <___vfiprintf_internal_r>
20095aa4:	1023883a 	mov	r17,r2
20095aa8:	10000416 	blt	r2,zero,20095abc <__sbprintf+0x80>
20095aac:	9009883a 	mov	r4,r18
20095ab0:	d9410004 	addi	r5,sp,1024
20095ab4:	00907440 	call	20090744 <_fflush_r>
20095ab8:	10000d1e 	bne	r2,zero,20095af0 <__sbprintf+0xb4>
20095abc:	d8c1030b 	ldhu	r3,1036(sp)
20095ac0:	18c0100c 	andi	r3,r3,64
20095ac4:	18000326 	beq	r3,zero,20095ad4 <__sbprintf+0x98>
20095ac8:	8080030b 	ldhu	r2,12(r16)
20095acc:	10801014 	ori	r2,r2,64
20095ad0:	8080030d 	sth	r2,12(r16)
20095ad4:	8805883a 	mov	r2,r17
20095ad8:	dfc11d17 	ldw	ra,1140(sp)
20095adc:	dc811c17 	ldw	r18,1136(sp)
20095ae0:	dc411b17 	ldw	r17,1132(sp)
20095ae4:	dc011a17 	ldw	r16,1128(sp)
20095ae8:	dec11e04 	addi	sp,sp,1144
20095aec:	f800283a 	ret
20095af0:	047fffc4 	movi	r17,-1
20095af4:	003ff106 	br	20095abc <__flash_rwdata_start+0xffff9474>

20095af8 <__swbuf_r>:
20095af8:	defffc04 	addi	sp,sp,-16
20095afc:	dc800215 	stw	r18,8(sp)
20095b00:	dc400115 	stw	r17,4(sp)
20095b04:	dc000015 	stw	r16,0(sp)
20095b08:	dfc00315 	stw	ra,12(sp)
20095b0c:	2025883a 	mov	r18,r4
20095b10:	2823883a 	mov	r17,r5
20095b14:	3021883a 	mov	r16,r6
20095b18:	20000226 	beq	r4,zero,20095b24 <__swbuf_r+0x2c>
20095b1c:	20800e17 	ldw	r2,56(r4)
20095b20:	10004126 	beq	r2,zero,20095c28 <__swbuf_r+0x130>
20095b24:	80c00617 	ldw	r3,24(r16)
20095b28:	8180030b 	ldhu	r6,12(r16)
20095b2c:	80c00215 	stw	r3,8(r16)
20095b30:	30c0020c 	andi	r3,r6,8
20095b34:	18003526 	beq	r3,zero,20095c0c <__swbuf_r+0x114>
20095b38:	80c00417 	ldw	r3,16(r16)
20095b3c:	18003326 	beq	r3,zero,20095c0c <__swbuf_r+0x114>
20095b40:	3088000c 	andi	r2,r6,8192
20095b44:	8c403fcc 	andi	r17,r17,255
20095b48:	10001726 	beq	r2,zero,20095ba8 <__swbuf_r+0xb0>
20095b4c:	80800017 	ldw	r2,0(r16)
20095b50:	81000517 	ldw	r4,20(r16)
20095b54:	10c7c83a 	sub	r3,r2,r3
20095b58:	19001d0e 	bge	r3,r4,20095bd0 <__swbuf_r+0xd8>
20095b5c:	18c00044 	addi	r3,r3,1
20095b60:	81400217 	ldw	r5,8(r16)
20095b64:	11000044 	addi	r4,r2,1
20095b68:	81000015 	stw	r4,0(r16)
20095b6c:	297fffc4 	addi	r5,r5,-1
20095b70:	81400215 	stw	r5,8(r16)
20095b74:	14400005 	stb	r17,0(r2)
20095b78:	80800517 	ldw	r2,20(r16)
20095b7c:	10c01d26 	beq	r2,r3,20095bf4 <__swbuf_r+0xfc>
20095b80:	8080030b 	ldhu	r2,12(r16)
20095b84:	1080004c 	andi	r2,r2,1
20095b88:	1000181e 	bne	r2,zero,20095bec <__swbuf_r+0xf4>
20095b8c:	8805883a 	mov	r2,r17
20095b90:	dfc00317 	ldw	ra,12(sp)
20095b94:	dc800217 	ldw	r18,8(sp)
20095b98:	dc400117 	ldw	r17,4(sp)
20095b9c:	dc000017 	ldw	r16,0(sp)
20095ba0:	dec00404 	addi	sp,sp,16
20095ba4:	f800283a 	ret
20095ba8:	81001917 	ldw	r4,100(r16)
20095bac:	00b7ffc4 	movi	r2,-8193
20095bb0:	31880014 	ori	r6,r6,8192
20095bb4:	2084703a 	and	r2,r4,r2
20095bb8:	80801915 	stw	r2,100(r16)
20095bbc:	80800017 	ldw	r2,0(r16)
20095bc0:	81000517 	ldw	r4,20(r16)
20095bc4:	8180030d 	sth	r6,12(r16)
20095bc8:	10c7c83a 	sub	r3,r2,r3
20095bcc:	193fe316 	blt	r3,r4,20095b5c <__flash_rwdata_start+0xffff9514>
20095bd0:	9009883a 	mov	r4,r18
20095bd4:	800b883a 	mov	r5,r16
20095bd8:	00907440 	call	20090744 <_fflush_r>
20095bdc:	1000091e 	bne	r2,zero,20095c04 <__swbuf_r+0x10c>
20095be0:	80800017 	ldw	r2,0(r16)
20095be4:	00c00044 	movi	r3,1
20095be8:	003fdd06 	br	20095b60 <__flash_rwdata_start+0xffff9518>
20095bec:	00800284 	movi	r2,10
20095bf0:	88bfe61e 	bne	r17,r2,20095b8c <__flash_rwdata_start+0xffff9544>
20095bf4:	9009883a 	mov	r4,r18
20095bf8:	800b883a 	mov	r5,r16
20095bfc:	00907440 	call	20090744 <_fflush_r>
20095c00:	103fe226 	beq	r2,zero,20095b8c <__flash_rwdata_start+0xffff9544>
20095c04:	00bfffc4 	movi	r2,-1
20095c08:	003fe106 	br	20095b90 <__flash_rwdata_start+0xffff9548>
20095c0c:	9009883a 	mov	r4,r18
20095c10:	800b883a 	mov	r5,r16
20095c14:	008e92c0 	call	2008e92c <__swsetup_r>
20095c18:	103ffa1e 	bne	r2,zero,20095c04 <__flash_rwdata_start+0xffff95bc>
20095c1c:	8180030b 	ldhu	r6,12(r16)
20095c20:	80c00417 	ldw	r3,16(r16)
20095c24:	003fc606 	br	20095b40 <__flash_rwdata_start+0xffff94f8>
20095c28:	0090b200 	call	20090b20 <__sinit>
20095c2c:	003fbd06 	br	20095b24 <__flash_rwdata_start+0xffff94dc>

20095c30 <__swbuf>:
20095c30:	00c00034 	movhi	r3,0
20095c34:	18ca1404 	addi	r3,r3,10320
20095c38:	2005883a 	mov	r2,r4
20095c3c:	19000017 	ldw	r4,0(r3)
20095c40:	280d883a 	mov	r6,r5
20095c44:	100b883a 	mov	r5,r2
20095c48:	0095af81 	jmpi	20095af8 <__swbuf_r>

20095c4c <_write_r>:
20095c4c:	defffd04 	addi	sp,sp,-12
20095c50:	dc000015 	stw	r16,0(sp)
20095c54:	04000034 	movhi	r16,0
20095c58:	dc400115 	stw	r17,4(sp)
20095c5c:	840a2e04 	addi	r16,r16,10424
20095c60:	2023883a 	mov	r17,r4
20095c64:	2809883a 	mov	r4,r5
20095c68:	300b883a 	mov	r5,r6
20095c6c:	380d883a 	mov	r6,r7
20095c70:	dfc00215 	stw	ra,8(sp)
20095c74:	80000015 	stw	zero,0(r16)
20095c78:	0097ecc0 	call	20097ecc <write>
20095c7c:	00ffffc4 	movi	r3,-1
20095c80:	10c00526 	beq	r2,r3,20095c98 <_write_r+0x4c>
20095c84:	dfc00217 	ldw	ra,8(sp)
20095c88:	dc400117 	ldw	r17,4(sp)
20095c8c:	dc000017 	ldw	r16,0(sp)
20095c90:	dec00304 	addi	sp,sp,12
20095c94:	f800283a 	ret
20095c98:	80c00017 	ldw	r3,0(r16)
20095c9c:	183ff926 	beq	r3,zero,20095c84 <__flash_rwdata_start+0xffff963c>
20095ca0:	88c00015 	stw	r3,0(r17)
20095ca4:	003ff706 	br	20095c84 <__flash_rwdata_start+0xffff963c>

20095ca8 <_close_r>:
20095ca8:	defffd04 	addi	sp,sp,-12
20095cac:	dc000015 	stw	r16,0(sp)
20095cb0:	04000034 	movhi	r16,0
20095cb4:	dc400115 	stw	r17,4(sp)
20095cb8:	840a2e04 	addi	r16,r16,10424
20095cbc:	2023883a 	mov	r17,r4
20095cc0:	2809883a 	mov	r4,r5
20095cc4:	dfc00215 	stw	ra,8(sp)
20095cc8:	80000015 	stw	zero,0(r16)
20095ccc:	00971d40 	call	200971d4 <close>
20095cd0:	00ffffc4 	movi	r3,-1
20095cd4:	10c00526 	beq	r2,r3,20095cec <_close_r+0x44>
20095cd8:	dfc00217 	ldw	ra,8(sp)
20095cdc:	dc400117 	ldw	r17,4(sp)
20095ce0:	dc000017 	ldw	r16,0(sp)
20095ce4:	dec00304 	addi	sp,sp,12
20095ce8:	f800283a 	ret
20095cec:	80c00017 	ldw	r3,0(r16)
20095cf0:	183ff926 	beq	r3,zero,20095cd8 <__flash_rwdata_start+0xffff9690>
20095cf4:	88c00015 	stw	r3,0(r17)
20095cf8:	003ff706 	br	20095cd8 <__flash_rwdata_start+0xffff9690>

20095cfc <_calloc_r>:
20095cfc:	298b383a 	mul	r5,r5,r6
20095d00:	defffe04 	addi	sp,sp,-8
20095d04:	dc000015 	stw	r16,0(sp)
20095d08:	dfc00115 	stw	ra,4(sp)
20095d0c:	00899bc0 	call	200899bc <_malloc_r>
20095d10:	1021883a 	mov	r16,r2
20095d14:	10002826 	beq	r2,zero,20095db8 <_calloc_r+0xbc>
20095d18:	11bfff17 	ldw	r6,-4(r2)
20095d1c:	00bfff04 	movi	r2,-4
20095d20:	00c00904 	movi	r3,36
20095d24:	308c703a 	and	r6,r6,r2
20095d28:	308d883a 	add	r6,r6,r2
20095d2c:	19801436 	bltu	r3,r6,20095d80 <_calloc_r+0x84>
20095d30:	008004c4 	movi	r2,19
20095d34:	11800936 	bltu	r2,r6,20095d5c <_calloc_r+0x60>
20095d38:	8005883a 	mov	r2,r16
20095d3c:	10000015 	stw	zero,0(r2)
20095d40:	10000115 	stw	zero,4(r2)
20095d44:	10000215 	stw	zero,8(r2)
20095d48:	8005883a 	mov	r2,r16
20095d4c:	dfc00117 	ldw	ra,4(sp)
20095d50:	dc000017 	ldw	r16,0(sp)
20095d54:	dec00204 	addi	sp,sp,8
20095d58:	f800283a 	ret
20095d5c:	80000015 	stw	zero,0(r16)
20095d60:	80000115 	stw	zero,4(r16)
20095d64:	008006c4 	movi	r2,27
20095d68:	11800d2e 	bgeu	r2,r6,20095da0 <_calloc_r+0xa4>
20095d6c:	80000215 	stw	zero,8(r16)
20095d70:	80000315 	stw	zero,12(r16)
20095d74:	30c00c26 	beq	r6,r3,20095da8 <_calloc_r+0xac>
20095d78:	80800404 	addi	r2,r16,16
20095d7c:	003fef06 	br	20095d3c <__flash_rwdata_start+0xffff96f4>
20095d80:	8009883a 	mov	r4,r16
20095d84:	000b883a 	mov	r5,zero
20095d88:	008a3180 	call	2008a318 <memset>
20095d8c:	8005883a 	mov	r2,r16
20095d90:	dfc00117 	ldw	ra,4(sp)
20095d94:	dc000017 	ldw	r16,0(sp)
20095d98:	dec00204 	addi	sp,sp,8
20095d9c:	f800283a 	ret
20095da0:	80800204 	addi	r2,r16,8
20095da4:	003fe506 	br	20095d3c <__flash_rwdata_start+0xffff96f4>
20095da8:	80000415 	stw	zero,16(r16)
20095dac:	80800604 	addi	r2,r16,24
20095db0:	80000515 	stw	zero,20(r16)
20095db4:	003fe106 	br	20095d3c <__flash_rwdata_start+0xffff96f4>
20095db8:	0005883a 	mov	r2,zero
20095dbc:	003fe306 	br	20095d4c <__flash_rwdata_start+0xffff9704>

20095dc0 <_fclose_r>:
20095dc0:	28003926 	beq	r5,zero,20095ea8 <_fclose_r+0xe8>
20095dc4:	defffc04 	addi	sp,sp,-16
20095dc8:	dc400115 	stw	r17,4(sp)
20095dcc:	dc000015 	stw	r16,0(sp)
20095dd0:	dfc00315 	stw	ra,12(sp)
20095dd4:	dc800215 	stw	r18,8(sp)
20095dd8:	2023883a 	mov	r17,r4
20095ddc:	2821883a 	mov	r16,r5
20095de0:	20000226 	beq	r4,zero,20095dec <_fclose_r+0x2c>
20095de4:	20800e17 	ldw	r2,56(r4)
20095de8:	10002726 	beq	r2,zero,20095e88 <_fclose_r+0xc8>
20095dec:	8080030f 	ldh	r2,12(r16)
20095df0:	1000071e 	bne	r2,zero,20095e10 <_fclose_r+0x50>
20095df4:	0005883a 	mov	r2,zero
20095df8:	dfc00317 	ldw	ra,12(sp)
20095dfc:	dc800217 	ldw	r18,8(sp)
20095e00:	dc400117 	ldw	r17,4(sp)
20095e04:	dc000017 	ldw	r16,0(sp)
20095e08:	dec00404 	addi	sp,sp,16
20095e0c:	f800283a 	ret
20095e10:	8809883a 	mov	r4,r17
20095e14:	800b883a 	mov	r5,r16
20095e18:	009053c0 	call	2009053c <__sflush_r>
20095e1c:	1025883a 	mov	r18,r2
20095e20:	80800b17 	ldw	r2,44(r16)
20095e24:	10000426 	beq	r2,zero,20095e38 <_fclose_r+0x78>
20095e28:	81400717 	ldw	r5,28(r16)
20095e2c:	8809883a 	mov	r4,r17
20095e30:	103ee83a 	callr	r2
20095e34:	10001616 	blt	r2,zero,20095e90 <_fclose_r+0xd0>
20095e38:	8080030b 	ldhu	r2,12(r16)
20095e3c:	1080200c 	andi	r2,r2,128
20095e40:	1000151e 	bne	r2,zero,20095e98 <_fclose_r+0xd8>
20095e44:	81400c17 	ldw	r5,48(r16)
20095e48:	28000526 	beq	r5,zero,20095e60 <_fclose_r+0xa0>
20095e4c:	80801004 	addi	r2,r16,64
20095e50:	28800226 	beq	r5,r2,20095e5c <_fclose_r+0x9c>
20095e54:	8809883a 	mov	r4,r17
20095e58:	0090c940 	call	20090c94 <_free_r>
20095e5c:	80000c15 	stw	zero,48(r16)
20095e60:	81401117 	ldw	r5,68(r16)
20095e64:	28000326 	beq	r5,zero,20095e74 <_fclose_r+0xb4>
20095e68:	8809883a 	mov	r4,r17
20095e6c:	0090c940 	call	20090c94 <_free_r>
20095e70:	80001115 	stw	zero,68(r16)
20095e74:	0090b300 	call	20090b30 <__sfp_lock_acquire>
20095e78:	8000030d 	sth	zero,12(r16)
20095e7c:	0090b340 	call	20090b34 <__sfp_lock_release>
20095e80:	9005883a 	mov	r2,r18
20095e84:	003fdc06 	br	20095df8 <__flash_rwdata_start+0xffff97b0>
20095e88:	0090b200 	call	20090b20 <__sinit>
20095e8c:	003fd706 	br	20095dec <__flash_rwdata_start+0xffff97a4>
20095e90:	04bfffc4 	movi	r18,-1
20095e94:	003fe806 	br	20095e38 <__flash_rwdata_start+0xffff97f0>
20095e98:	81400417 	ldw	r5,16(r16)
20095e9c:	8809883a 	mov	r4,r17
20095ea0:	0090c940 	call	20090c94 <_free_r>
20095ea4:	003fe706 	br	20095e44 <__flash_rwdata_start+0xffff97fc>
20095ea8:	0005883a 	mov	r2,zero
20095eac:	f800283a 	ret

20095eb0 <fclose>:
20095eb0:	00800034 	movhi	r2,0
20095eb4:	108a1404 	addi	r2,r2,10320
20095eb8:	200b883a 	mov	r5,r4
20095ebc:	11000017 	ldw	r4,0(r2)
20095ec0:	0095dc01 	jmpi	20095dc0 <_fclose_r>

20095ec4 <_fputwc_r>:
20095ec4:	3080030b 	ldhu	r2,12(r6)
20095ec8:	defff804 	addi	sp,sp,-32
20095ecc:	dcc00415 	stw	r19,16(sp)
20095ed0:	dc800315 	stw	r18,12(sp)
20095ed4:	dc000115 	stw	r16,4(sp)
20095ed8:	dfc00715 	stw	ra,28(sp)
20095edc:	dd400615 	stw	r21,24(sp)
20095ee0:	dd000515 	stw	r20,20(sp)
20095ee4:	dc400215 	stw	r17,8(sp)
20095ee8:	10c8000c 	andi	r3,r2,8192
20095eec:	3021883a 	mov	r16,r6
20095ef0:	2027883a 	mov	r19,r4
20095ef4:	2825883a 	mov	r18,r5
20095ef8:	1800051e 	bne	r3,zero,20095f10 <_fputwc_r+0x4c>
20095efc:	30c01917 	ldw	r3,100(r6)
20095f00:	10880014 	ori	r2,r2,8192
20095f04:	3080030d 	sth	r2,12(r6)
20095f08:	18880014 	ori	r2,r3,8192
20095f0c:	30801915 	stw	r2,100(r6)
20095f10:	00916540 	call	20091654 <__locale_mb_cur_max>
20095f14:	00c00044 	movi	r3,1
20095f18:	10c03e26 	beq	r2,r3,20096014 <_fputwc_r+0x150>
20095f1c:	9809883a 	mov	r4,r19
20095f20:	d80b883a 	mov	r5,sp
20095f24:	900d883a 	mov	r6,r18
20095f28:	81c01704 	addi	r7,r16,92
20095f2c:	00962080 	call	20096208 <_wcrtomb_r>
20095f30:	1029883a 	mov	r20,r2
20095f34:	00bfffc4 	movi	r2,-1
20095f38:	a0802026 	beq	r20,r2,20095fbc <_fputwc_r+0xf8>
20095f3c:	d9400003 	ldbu	r5,0(sp)
20095f40:	a0001c26 	beq	r20,zero,20095fb4 <_fputwc_r+0xf0>
20095f44:	0023883a 	mov	r17,zero
20095f48:	05400284 	movi	r21,10
20095f4c:	00000906 	br	20095f74 <_fputwc_r+0xb0>
20095f50:	80800017 	ldw	r2,0(r16)
20095f54:	11400005 	stb	r5,0(r2)
20095f58:	80c00017 	ldw	r3,0(r16)
20095f5c:	18c00044 	addi	r3,r3,1
20095f60:	80c00015 	stw	r3,0(r16)
20095f64:	8c400044 	addi	r17,r17,1
20095f68:	dc45883a 	add	r2,sp,r17
20095f6c:	8d00112e 	bgeu	r17,r20,20095fb4 <_fputwc_r+0xf0>
20095f70:	11400003 	ldbu	r5,0(r2)
20095f74:	80c00217 	ldw	r3,8(r16)
20095f78:	18ffffc4 	addi	r3,r3,-1
20095f7c:	80c00215 	stw	r3,8(r16)
20095f80:	183ff30e 	bge	r3,zero,20095f50 <__flash_rwdata_start+0xffff9908>
20095f84:	80800617 	ldw	r2,24(r16)
20095f88:	18801916 	blt	r3,r2,20095ff0 <_fputwc_r+0x12c>
20095f8c:	80800017 	ldw	r2,0(r16)
20095f90:	11400005 	stb	r5,0(r2)
20095f94:	80800017 	ldw	r2,0(r16)
20095f98:	10c00003 	ldbu	r3,0(r2)
20095f9c:	10800044 	addi	r2,r2,1
20095fa0:	1d402326 	beq	r3,r21,20096030 <_fputwc_r+0x16c>
20095fa4:	80800015 	stw	r2,0(r16)
20095fa8:	8c400044 	addi	r17,r17,1
20095fac:	dc45883a 	add	r2,sp,r17
20095fb0:	8d3fef36 	bltu	r17,r20,20095f70 <__flash_rwdata_start+0xffff9928>
20095fb4:	9005883a 	mov	r2,r18
20095fb8:	00000406 	br	20095fcc <_fputwc_r+0x108>
20095fbc:	80c0030b 	ldhu	r3,12(r16)
20095fc0:	a005883a 	mov	r2,r20
20095fc4:	18c01014 	ori	r3,r3,64
20095fc8:	80c0030d 	sth	r3,12(r16)
20095fcc:	dfc00717 	ldw	ra,28(sp)
20095fd0:	dd400617 	ldw	r21,24(sp)
20095fd4:	dd000517 	ldw	r20,20(sp)
20095fd8:	dcc00417 	ldw	r19,16(sp)
20095fdc:	dc800317 	ldw	r18,12(sp)
20095fe0:	dc400217 	ldw	r17,8(sp)
20095fe4:	dc000117 	ldw	r16,4(sp)
20095fe8:	dec00804 	addi	sp,sp,32
20095fec:	f800283a 	ret
20095ff0:	9809883a 	mov	r4,r19
20095ff4:	29403fcc 	andi	r5,r5,255
20095ff8:	800d883a 	mov	r6,r16
20095ffc:	0095af80 	call	20095af8 <__swbuf_r>
20096000:	10bfffe0 	cmpeqi	r2,r2,-1
20096004:	10803fcc 	andi	r2,r2,255
20096008:	103fd626 	beq	r2,zero,20095f64 <__flash_rwdata_start+0xffff991c>
2009600c:	00bfffc4 	movi	r2,-1
20096010:	003fee06 	br	20095fcc <__flash_rwdata_start+0xffff9984>
20096014:	90ffffc4 	addi	r3,r18,-1
20096018:	01003f84 	movi	r4,254
2009601c:	20ffbf36 	bltu	r4,r3,20095f1c <__flash_rwdata_start+0xffff98d4>
20096020:	900b883a 	mov	r5,r18
20096024:	dc800005 	stb	r18,0(sp)
20096028:	1029883a 	mov	r20,r2
2009602c:	003fc506 	br	20095f44 <__flash_rwdata_start+0xffff98fc>
20096030:	9809883a 	mov	r4,r19
20096034:	a80b883a 	mov	r5,r21
20096038:	800d883a 	mov	r6,r16
2009603c:	0095af80 	call	20095af8 <__swbuf_r>
20096040:	10bfffe0 	cmpeqi	r2,r2,-1
20096044:	003fef06 	br	20096004 <__flash_rwdata_start+0xffff99bc>

20096048 <fputwc>:
20096048:	00800034 	movhi	r2,0
2009604c:	defffc04 	addi	sp,sp,-16
20096050:	108a1404 	addi	r2,r2,10320
20096054:	dc000115 	stw	r16,4(sp)
20096058:	14000017 	ldw	r16,0(r2)
2009605c:	dc400215 	stw	r17,8(sp)
20096060:	dfc00315 	stw	ra,12(sp)
20096064:	2023883a 	mov	r17,r4
20096068:	280d883a 	mov	r6,r5
2009606c:	80000626 	beq	r16,zero,20096088 <fputwc+0x40>
20096070:	80800e17 	ldw	r2,56(r16)
20096074:	1000041e 	bne	r2,zero,20096088 <fputwc+0x40>
20096078:	8009883a 	mov	r4,r16
2009607c:	d9400015 	stw	r5,0(sp)
20096080:	0090b200 	call	20090b20 <__sinit>
20096084:	d9800017 	ldw	r6,0(sp)
20096088:	8009883a 	mov	r4,r16
2009608c:	880b883a 	mov	r5,r17
20096090:	dfc00317 	ldw	ra,12(sp)
20096094:	dc400217 	ldw	r17,8(sp)
20096098:	dc000117 	ldw	r16,4(sp)
2009609c:	dec00404 	addi	sp,sp,16
200960a0:	0095ec41 	jmpi	20095ec4 <_fputwc_r>

200960a4 <_fstat_r>:
200960a4:	defffd04 	addi	sp,sp,-12
200960a8:	dc000015 	stw	r16,0(sp)
200960ac:	04000034 	movhi	r16,0
200960b0:	dc400115 	stw	r17,4(sp)
200960b4:	840a2e04 	addi	r16,r16,10424
200960b8:	2023883a 	mov	r17,r4
200960bc:	2809883a 	mov	r4,r5
200960c0:	300b883a 	mov	r5,r6
200960c4:	dfc00215 	stw	ra,8(sp)
200960c8:	80000015 	stw	zero,0(r16)
200960cc:	00973c80 	call	200973c8 <fstat>
200960d0:	00ffffc4 	movi	r3,-1
200960d4:	10c00526 	beq	r2,r3,200960ec <_fstat_r+0x48>
200960d8:	dfc00217 	ldw	ra,8(sp)
200960dc:	dc400117 	ldw	r17,4(sp)
200960e0:	dc000017 	ldw	r16,0(sp)
200960e4:	dec00304 	addi	sp,sp,12
200960e8:	f800283a 	ret
200960ec:	80c00017 	ldw	r3,0(r16)
200960f0:	183ff926 	beq	r3,zero,200960d8 <__flash_rwdata_start+0xffff9a90>
200960f4:	88c00015 	stw	r3,0(r17)
200960f8:	003ff706 	br	200960d8 <__flash_rwdata_start+0xffff9a90>

200960fc <_isatty_r>:
200960fc:	defffd04 	addi	sp,sp,-12
20096100:	dc000015 	stw	r16,0(sp)
20096104:	04000034 	movhi	r16,0
20096108:	dc400115 	stw	r17,4(sp)
2009610c:	840a2e04 	addi	r16,r16,10424
20096110:	2023883a 	mov	r17,r4
20096114:	2809883a 	mov	r4,r5
20096118:	dfc00215 	stw	ra,8(sp)
2009611c:	80000015 	stw	zero,0(r16)
20096120:	00976780 	call	20097678 <isatty>
20096124:	00ffffc4 	movi	r3,-1
20096128:	10c00526 	beq	r2,r3,20096140 <_isatty_r+0x44>
2009612c:	dfc00217 	ldw	ra,8(sp)
20096130:	dc400117 	ldw	r17,4(sp)
20096134:	dc000017 	ldw	r16,0(sp)
20096138:	dec00304 	addi	sp,sp,12
2009613c:	f800283a 	ret
20096140:	80c00017 	ldw	r3,0(r16)
20096144:	183ff926 	beq	r3,zero,2009612c <__flash_rwdata_start+0xffff9ae4>
20096148:	88c00015 	stw	r3,0(r17)
2009614c:	003ff706 	br	2009612c <__flash_rwdata_start+0xffff9ae4>

20096150 <_lseek_r>:
20096150:	defffd04 	addi	sp,sp,-12
20096154:	dc000015 	stw	r16,0(sp)
20096158:	04000034 	movhi	r16,0
2009615c:	dc400115 	stw	r17,4(sp)
20096160:	840a2e04 	addi	r16,r16,10424
20096164:	2023883a 	mov	r17,r4
20096168:	2809883a 	mov	r4,r5
2009616c:	300b883a 	mov	r5,r6
20096170:	380d883a 	mov	r6,r7
20096174:	dfc00215 	stw	ra,8(sp)
20096178:	80000015 	stw	zero,0(r16)
2009617c:	00978500 	call	20097850 <lseek>
20096180:	00ffffc4 	movi	r3,-1
20096184:	10c00526 	beq	r2,r3,2009619c <_lseek_r+0x4c>
20096188:	dfc00217 	ldw	ra,8(sp)
2009618c:	dc400117 	ldw	r17,4(sp)
20096190:	dc000017 	ldw	r16,0(sp)
20096194:	dec00304 	addi	sp,sp,12
20096198:	f800283a 	ret
2009619c:	80c00017 	ldw	r3,0(r16)
200961a0:	183ff926 	beq	r3,zero,20096188 <__flash_rwdata_start+0xffff9b40>
200961a4:	88c00015 	stw	r3,0(r17)
200961a8:	003ff706 	br	20096188 <__flash_rwdata_start+0xffff9b40>

200961ac <_read_r>:
200961ac:	defffd04 	addi	sp,sp,-12
200961b0:	dc000015 	stw	r16,0(sp)
200961b4:	04000034 	movhi	r16,0
200961b8:	dc400115 	stw	r17,4(sp)
200961bc:	840a2e04 	addi	r16,r16,10424
200961c0:	2023883a 	mov	r17,r4
200961c4:	2809883a 	mov	r4,r5
200961c8:	300b883a 	mov	r5,r6
200961cc:	380d883a 	mov	r6,r7
200961d0:	dfc00215 	stw	ra,8(sp)
200961d4:	80000015 	stw	zero,0(r16)
200961d8:	0097a2c0 	call	20097a2c <read>
200961dc:	00ffffc4 	movi	r3,-1
200961e0:	10c00526 	beq	r2,r3,200961f8 <_read_r+0x4c>
200961e4:	dfc00217 	ldw	ra,8(sp)
200961e8:	dc400117 	ldw	r17,4(sp)
200961ec:	dc000017 	ldw	r16,0(sp)
200961f0:	dec00304 	addi	sp,sp,12
200961f4:	f800283a 	ret
200961f8:	80c00017 	ldw	r3,0(r16)
200961fc:	183ff926 	beq	r3,zero,200961e4 <__flash_rwdata_start+0xffff9b9c>
20096200:	88c00015 	stw	r3,0(r17)
20096204:	003ff706 	br	200961e4 <__flash_rwdata_start+0xffff9b9c>

20096208 <_wcrtomb_r>:
20096208:	defff604 	addi	sp,sp,-40
2009620c:	00800034 	movhi	r2,0
20096210:	dc800815 	stw	r18,32(sp)
20096214:	dc400715 	stw	r17,28(sp)
20096218:	dc000615 	stw	r16,24(sp)
2009621c:	108a1804 	addi	r2,r2,10336
20096220:	dfc00915 	stw	ra,36(sp)
20096224:	2021883a 	mov	r16,r4
20096228:	3823883a 	mov	r17,r7
2009622c:	14800017 	ldw	r18,0(r2)
20096230:	28001426 	beq	r5,zero,20096284 <_wcrtomb_r+0x7c>
20096234:	d9400415 	stw	r5,16(sp)
20096238:	d9800515 	stw	r6,20(sp)
2009623c:	00916480 	call	20091648 <__locale_charset>
20096240:	d9400417 	ldw	r5,16(sp)
20096244:	d9800517 	ldw	r6,20(sp)
20096248:	8009883a 	mov	r4,r16
2009624c:	dc400015 	stw	r17,0(sp)
20096250:	100f883a 	mov	r7,r2
20096254:	903ee83a 	callr	r18
20096258:	00ffffc4 	movi	r3,-1
2009625c:	10c0031e 	bne	r2,r3,2009626c <_wcrtomb_r+0x64>
20096260:	88000015 	stw	zero,0(r17)
20096264:	00c02284 	movi	r3,138
20096268:	80c00015 	stw	r3,0(r16)
2009626c:	dfc00917 	ldw	ra,36(sp)
20096270:	dc800817 	ldw	r18,32(sp)
20096274:	dc400717 	ldw	r17,28(sp)
20096278:	dc000617 	ldw	r16,24(sp)
2009627c:	dec00a04 	addi	sp,sp,40
20096280:	f800283a 	ret
20096284:	00916480 	call	20091648 <__locale_charset>
20096288:	8009883a 	mov	r4,r16
2009628c:	dc400015 	stw	r17,0(sp)
20096290:	d9400104 	addi	r5,sp,4
20096294:	000d883a 	mov	r6,zero
20096298:	100f883a 	mov	r7,r2
2009629c:	903ee83a 	callr	r18
200962a0:	003fed06 	br	20096258 <__flash_rwdata_start+0xffff9c10>

200962a4 <wcrtomb>:
200962a4:	defff604 	addi	sp,sp,-40
200962a8:	00800034 	movhi	r2,0
200962ac:	dc800615 	stw	r18,24(sp)
200962b0:	dc400515 	stw	r17,20(sp)
200962b4:	dc000415 	stw	r16,16(sp)
200962b8:	108a1404 	addi	r2,r2,10320
200962bc:	dfc00915 	stw	ra,36(sp)
200962c0:	dd000815 	stw	r20,32(sp)
200962c4:	dcc00715 	stw	r19,28(sp)
200962c8:	2021883a 	mov	r16,r4
200962cc:	3025883a 	mov	r18,r6
200962d0:	14400017 	ldw	r17,0(r2)
200962d4:	20001826 	beq	r4,zero,20096338 <wcrtomb+0x94>
200962d8:	00800034 	movhi	r2,0
200962dc:	108a1804 	addi	r2,r2,10336
200962e0:	15000017 	ldw	r20,0(r2)
200962e4:	2827883a 	mov	r19,r5
200962e8:	00916480 	call	20091648 <__locale_charset>
200962ec:	8809883a 	mov	r4,r17
200962f0:	dc800015 	stw	r18,0(sp)
200962f4:	800b883a 	mov	r5,r16
200962f8:	980d883a 	mov	r6,r19
200962fc:	100f883a 	mov	r7,r2
20096300:	a03ee83a 	callr	r20
20096304:	00ffffc4 	movi	r3,-1
20096308:	10c0031e 	bne	r2,r3,20096318 <wcrtomb+0x74>
2009630c:	90000015 	stw	zero,0(r18)
20096310:	00c02284 	movi	r3,138
20096314:	88c00015 	stw	r3,0(r17)
20096318:	dfc00917 	ldw	ra,36(sp)
2009631c:	dd000817 	ldw	r20,32(sp)
20096320:	dcc00717 	ldw	r19,28(sp)
20096324:	dc800617 	ldw	r18,24(sp)
20096328:	dc400517 	ldw	r17,20(sp)
2009632c:	dc000417 	ldw	r16,16(sp)
20096330:	dec00a04 	addi	sp,sp,40
20096334:	f800283a 	ret
20096338:	00800034 	movhi	r2,0
2009633c:	108a1804 	addi	r2,r2,10336
20096340:	14000017 	ldw	r16,0(r2)
20096344:	00916480 	call	20091648 <__locale_charset>
20096348:	8809883a 	mov	r4,r17
2009634c:	dc800015 	stw	r18,0(sp)
20096350:	d9400104 	addi	r5,sp,4
20096354:	000d883a 	mov	r6,zero
20096358:	100f883a 	mov	r7,r2
2009635c:	803ee83a 	callr	r16
20096360:	003fe806 	br	20096304 <__flash_rwdata_start+0xffff9cbc>

20096364 <__ascii_wctomb>:
20096364:	28000526 	beq	r5,zero,2009637c <__ascii_wctomb+0x18>
20096368:	00803fc4 	movi	r2,255
2009636c:	11800536 	bltu	r2,r6,20096384 <__ascii_wctomb+0x20>
20096370:	29800005 	stb	r6,0(r5)
20096374:	00800044 	movi	r2,1
20096378:	f800283a 	ret
2009637c:	0005883a 	mov	r2,zero
20096380:	f800283a 	ret
20096384:	00802284 	movi	r2,138
20096388:	20800015 	stw	r2,0(r4)
2009638c:	00bfffc4 	movi	r2,-1
20096390:	f800283a 	ret

20096394 <_wctomb_r>:
20096394:	00800034 	movhi	r2,0
20096398:	defff904 	addi	sp,sp,-28
2009639c:	108a1804 	addi	r2,r2,10336
200963a0:	dfc00615 	stw	ra,24(sp)
200963a4:	dc400515 	stw	r17,20(sp)
200963a8:	dc000415 	stw	r16,16(sp)
200963ac:	3823883a 	mov	r17,r7
200963b0:	14000017 	ldw	r16,0(r2)
200963b4:	d9000115 	stw	r4,4(sp)
200963b8:	d9400215 	stw	r5,8(sp)
200963bc:	d9800315 	stw	r6,12(sp)
200963c0:	00916480 	call	20091648 <__locale_charset>
200963c4:	d9000117 	ldw	r4,4(sp)
200963c8:	d9400217 	ldw	r5,8(sp)
200963cc:	d9800317 	ldw	r6,12(sp)
200963d0:	dc400015 	stw	r17,0(sp)
200963d4:	100f883a 	mov	r7,r2
200963d8:	803ee83a 	callr	r16
200963dc:	dfc00617 	ldw	ra,24(sp)
200963e0:	dc400517 	ldw	r17,20(sp)
200963e4:	dc000417 	ldw	r16,16(sp)
200963e8:	dec00704 	addi	sp,sp,28
200963ec:	f800283a 	ret

200963f0 <__udivdi3>:
200963f0:	defff504 	addi	sp,sp,-44
200963f4:	dcc00415 	stw	r19,16(sp)
200963f8:	dc000115 	stw	r16,4(sp)
200963fc:	dfc00a15 	stw	ra,40(sp)
20096400:	df000915 	stw	fp,36(sp)
20096404:	ddc00815 	stw	r23,32(sp)
20096408:	dd800715 	stw	r22,28(sp)
2009640c:	dd400615 	stw	r21,24(sp)
20096410:	dd000515 	stw	r20,20(sp)
20096414:	dc800315 	stw	r18,12(sp)
20096418:	dc400215 	stw	r17,8(sp)
2009641c:	2027883a 	mov	r19,r4
20096420:	2821883a 	mov	r16,r5
20096424:	3800421e 	bne	r7,zero,20096530 <__udivdi3+0x140>
20096428:	3025883a 	mov	r18,r6
2009642c:	2023883a 	mov	r17,r4
20096430:	2980542e 	bgeu	r5,r6,20096584 <__udivdi3+0x194>
20096434:	00bfffd4 	movui	r2,65535
20096438:	282d883a 	mov	r22,r5
2009643c:	1180a836 	bltu	r2,r6,200966e0 <__udivdi3+0x2f0>
20096440:	00803fc4 	movi	r2,255
20096444:	1181422e 	bgeu	r2,r6,20096950 <__udivdi3+0x560>
20096448:	00800204 	movi	r2,8
2009644c:	1007883a 	mov	r3,r2
20096450:	3084d83a 	srl	r2,r6,r2
20096454:	01000034 	movhi	r4,0
20096458:	21013a44 	addi	r4,r4,1257
2009645c:	2085883a 	add	r2,r4,r2
20096460:	10800003 	ldbu	r2,0(r2)
20096464:	10c7883a 	add	r3,r2,r3
20096468:	00800804 	movi	r2,32
2009646c:	10c5c83a 	sub	r2,r2,r3
20096470:	10000526 	beq	r2,zero,20096488 <__udivdi3+0x98>
20096474:	80a0983a 	sll	r16,r16,r2
20096478:	98c6d83a 	srl	r3,r19,r3
2009647c:	30a4983a 	sll	r18,r6,r2
20096480:	98a2983a 	sll	r17,r19,r2
20096484:	80ecb03a 	or	r22,r16,r3
20096488:	902ad43a 	srli	r21,r18,16
2009648c:	b009883a 	mov	r4,r22
20096490:	953fffcc 	andi	r20,r18,65535
20096494:	a80b883a 	mov	r5,r21
20096498:	008679c0 	call	2008679c <__umodsi3>
2009649c:	b009883a 	mov	r4,r22
200964a0:	a80b883a 	mov	r5,r21
200964a4:	1027883a 	mov	r19,r2
200964a8:	00867940 	call	20086794 <__udivsi3>
200964ac:	1021883a 	mov	r16,r2
200964b0:	8806d43a 	srli	r3,r17,16
200964b4:	9804943a 	slli	r2,r19,16
200964b8:	8527383a 	mul	r19,r16,r20
200964bc:	10c4b03a 	or	r2,r2,r3
200964c0:	14c0052e 	bgeu	r2,r19,200964d8 <__udivdi3+0xe8>
200964c4:	1485883a 	add	r2,r2,r18
200964c8:	80ffffc4 	addi	r3,r16,-1
200964cc:	14800136 	bltu	r2,r18,200964d4 <__udivdi3+0xe4>
200964d0:	14c13436 	bltu	r2,r19,200969a4 <__udivdi3+0x5b4>
200964d4:	1821883a 	mov	r16,r3
200964d8:	14e7c83a 	sub	r19,r2,r19
200964dc:	9809883a 	mov	r4,r19
200964e0:	a80b883a 	mov	r5,r21
200964e4:	008679c0 	call	2008679c <__umodsi3>
200964e8:	102d883a 	mov	r22,r2
200964ec:	9809883a 	mov	r4,r19
200964f0:	a80b883a 	mov	r5,r21
200964f4:	00867940 	call	20086794 <__udivsi3>
200964f8:	b02c943a 	slli	r22,r22,16
200964fc:	1529383a 	mul	r20,r2,r20
20096500:	8c7fffcc 	andi	r17,r17,65535
20096504:	b462b03a 	or	r17,r22,r17
20096508:	8d00052e 	bgeu	r17,r20,20096520 <__udivdi3+0x130>
2009650c:	8ca3883a 	add	r17,r17,r18
20096510:	10ffffc4 	addi	r3,r2,-1
20096514:	8c80f636 	bltu	r17,r18,200968f0 <__udivdi3+0x500>
20096518:	8d00f52e 	bgeu	r17,r20,200968f0 <__udivdi3+0x500>
2009651c:	10bfff84 	addi	r2,r2,-2
20096520:	8020943a 	slli	r16,r16,16
20096524:	0007883a 	mov	r3,zero
20096528:	1404b03a 	or	r2,r2,r16
2009652c:	00005b06 	br	2009669c <__udivdi3+0x2ac>
20096530:	29c05836 	bltu	r5,r7,20096694 <__udivdi3+0x2a4>
20096534:	00bfffd4 	movui	r2,65535
20096538:	11c0642e 	bgeu	r2,r7,200966cc <__udivdi3+0x2dc>
2009653c:	00804034 	movhi	r2,256
20096540:	10bfffc4 	addi	r2,r2,-1
20096544:	11c0f32e 	bgeu	r2,r7,20096914 <__udivdi3+0x524>
20096548:	00c00604 	movi	r3,24
2009654c:	180b883a 	mov	r5,r3
20096550:	38c6d83a 	srl	r3,r7,r3
20096554:	00800034 	movhi	r2,0
20096558:	10813a44 	addi	r2,r2,1257
2009655c:	10c7883a 	add	r3,r2,r3
20096560:	18c00003 	ldbu	r3,0(r3)
20096564:	01000804 	movi	r4,32
20096568:	1947883a 	add	r3,r3,r5
2009656c:	20e5c83a 	sub	r18,r4,r3
20096570:	9000661e 	bne	r18,zero,2009670c <__udivdi3+0x31c>
20096574:	3c00f936 	bltu	r7,r16,2009695c <__udivdi3+0x56c>
20096578:	9985403a 	cmpgeu	r2,r19,r6
2009657c:	0007883a 	mov	r3,zero
20096580:	00004606 	br	2009669c <__udivdi3+0x2ac>
20096584:	3000041e 	bne	r6,zero,20096598 <__udivdi3+0x1a8>
20096588:	01000044 	movi	r4,1
2009658c:	000b883a 	mov	r5,zero
20096590:	00867940 	call	20086794 <__udivsi3>
20096594:	1025883a 	mov	r18,r2
20096598:	00bfffd4 	movui	r2,65535
2009659c:	1480562e 	bgeu	r2,r18,200966f8 <__udivdi3+0x308>
200965a0:	00804034 	movhi	r2,256
200965a4:	10bfffc4 	addi	r2,r2,-1
200965a8:	1480e32e 	bgeu	r2,r18,20096938 <__udivdi3+0x548>
200965ac:	00800604 	movi	r2,24
200965b0:	1007883a 	mov	r3,r2
200965b4:	9084d83a 	srl	r2,r18,r2
200965b8:	01000034 	movhi	r4,0
200965bc:	21013a44 	addi	r4,r4,1257
200965c0:	2085883a 	add	r2,r4,r2
200965c4:	10800003 	ldbu	r2,0(r2)
200965c8:	10c5883a 	add	r2,r2,r3
200965cc:	00c00804 	movi	r3,32
200965d0:	1887c83a 	sub	r3,r3,r2
200965d4:	1800911e 	bne	r3,zero,2009681c <__udivdi3+0x42c>
200965d8:	9028d43a 	srli	r20,r18,16
200965dc:	84a1c83a 	sub	r16,r16,r18
200965e0:	957fffcc 	andi	r21,r18,65535
200965e4:	00c00044 	movi	r3,1
200965e8:	8009883a 	mov	r4,r16
200965ec:	a00b883a 	mov	r5,r20
200965f0:	d8c00015 	stw	r3,0(sp)
200965f4:	008679c0 	call	2008679c <__umodsi3>
200965f8:	8009883a 	mov	r4,r16
200965fc:	a00b883a 	mov	r5,r20
20096600:	1027883a 	mov	r19,r2
20096604:	00867940 	call	20086794 <__udivsi3>
20096608:	1021883a 	mov	r16,r2
2009660c:	880cd43a 	srli	r6,r17,16
20096610:	9804943a 	slli	r2,r19,16
20096614:	8567383a 	mul	r19,r16,r21
20096618:	d8c00017 	ldw	r3,0(sp)
2009661c:	1188b03a 	or	r4,r2,r6
20096620:	24c0052e 	bgeu	r4,r19,20096638 <__udivdi3+0x248>
20096624:	2489883a 	add	r4,r4,r18
20096628:	80bfffc4 	addi	r2,r16,-1
2009662c:	24800136 	bltu	r4,r18,20096634 <__udivdi3+0x244>
20096630:	24c0d936 	bltu	r4,r19,20096998 <__udivdi3+0x5a8>
20096634:	1021883a 	mov	r16,r2
20096638:	24e7c83a 	sub	r19,r4,r19
2009663c:	9809883a 	mov	r4,r19
20096640:	a00b883a 	mov	r5,r20
20096644:	d8c00015 	stw	r3,0(sp)
20096648:	008679c0 	call	2008679c <__umodsi3>
2009664c:	102d883a 	mov	r22,r2
20096650:	9809883a 	mov	r4,r19
20096654:	a00b883a 	mov	r5,r20
20096658:	00867940 	call	20086794 <__udivsi3>
2009665c:	b02c943a 	slli	r22,r22,16
20096660:	156b383a 	mul	r21,r2,r21
20096664:	8c7fffcc 	andi	r17,r17,65535
20096668:	b462b03a 	or	r17,r22,r17
2009666c:	d8c00017 	ldw	r3,0(sp)
20096670:	8d40052e 	bgeu	r17,r21,20096688 <__udivdi3+0x298>
20096674:	8ca3883a 	add	r17,r17,r18
20096678:	113fffc4 	addi	r4,r2,-1
2009667c:	8c809a36 	bltu	r17,r18,200968e8 <__udivdi3+0x4f8>
20096680:	8d40992e 	bgeu	r17,r21,200968e8 <__udivdi3+0x4f8>
20096684:	10bfff84 	addi	r2,r2,-2
20096688:	8020943a 	slli	r16,r16,16
2009668c:	1404b03a 	or	r2,r2,r16
20096690:	00000206 	br	2009669c <__udivdi3+0x2ac>
20096694:	0007883a 	mov	r3,zero
20096698:	0005883a 	mov	r2,zero
2009669c:	dfc00a17 	ldw	ra,40(sp)
200966a0:	df000917 	ldw	fp,36(sp)
200966a4:	ddc00817 	ldw	r23,32(sp)
200966a8:	dd800717 	ldw	r22,28(sp)
200966ac:	dd400617 	ldw	r21,24(sp)
200966b0:	dd000517 	ldw	r20,20(sp)
200966b4:	dcc00417 	ldw	r19,16(sp)
200966b8:	dc800317 	ldw	r18,12(sp)
200966bc:	dc400217 	ldw	r17,8(sp)
200966c0:	dc000117 	ldw	r16,4(sp)
200966c4:	dec00b04 	addi	sp,sp,44
200966c8:	f800283a 	ret
200966cc:	00803fc4 	movi	r2,255
200966d0:	11c0932e 	bgeu	r2,r7,20096920 <__udivdi3+0x530>
200966d4:	00c00204 	movi	r3,8
200966d8:	180b883a 	mov	r5,r3
200966dc:	003f9c06 	br	20096550 <__flash_rwdata_start+0xffff9f08>
200966e0:	00804034 	movhi	r2,256
200966e4:	10bfffc4 	addi	r2,r2,-1
200966e8:	1180902e 	bgeu	r2,r6,2009692c <__udivdi3+0x53c>
200966ec:	00800604 	movi	r2,24
200966f0:	1007883a 	mov	r3,r2
200966f4:	003f5606 	br	20096450 <__flash_rwdata_start+0xffff9e08>
200966f8:	00803fc4 	movi	r2,255
200966fc:	1480912e 	bgeu	r2,r18,20096944 <__udivdi3+0x554>
20096700:	00800204 	movi	r2,8
20096704:	1007883a 	mov	r3,r2
20096708:	003faa06 	br	200965b4 <__flash_rwdata_start+0xffff9f6c>
2009670c:	30eed83a 	srl	r23,r6,r3
20096710:	3c8e983a 	sll	r7,r7,r18
20096714:	80f8d83a 	srl	fp,r16,r3
20096718:	98c6d83a 	srl	r3,r19,r3
2009671c:	3deeb03a 	or	r23,r7,r23
20096720:	b828d43a 	srli	r20,r23,16
20096724:	84a0983a 	sll	r16,r16,r18
20096728:	e009883a 	mov	r4,fp
2009672c:	a00b883a 	mov	r5,r20
20096730:	80e2b03a 	or	r17,r16,r3
20096734:	34aa983a 	sll	r21,r6,r18
20096738:	008679c0 	call	2008679c <__umodsi3>
2009673c:	e009883a 	mov	r4,fp
20096740:	a00b883a 	mov	r5,r20
20096744:	102d883a 	mov	r22,r2
20096748:	00867940 	call	20086794 <__udivsi3>
2009674c:	1021883a 	mov	r16,r2
20096750:	bf3fffcc 	andi	fp,r23,65535
20096754:	b004943a 	slli	r2,r22,16
20096758:	8808d43a 	srli	r4,r17,16
2009675c:	872d383a 	mul	r22,r16,fp
20096760:	1104b03a 	or	r2,r2,r4
20096764:	1580042e 	bgeu	r2,r22,20096778 <__udivdi3+0x388>
20096768:	15c5883a 	add	r2,r2,r23
2009676c:	80ffffc4 	addi	r3,r16,-1
20096770:	15c0812e 	bgeu	r2,r23,20096978 <__udivdi3+0x588>
20096774:	1821883a 	mov	r16,r3
20096778:	15adc83a 	sub	r22,r2,r22
2009677c:	b009883a 	mov	r4,r22
20096780:	a00b883a 	mov	r5,r20
20096784:	008679c0 	call	2008679c <__umodsi3>
20096788:	a00b883a 	mov	r5,r20
2009678c:	b009883a 	mov	r4,r22
20096790:	d8800015 	stw	r2,0(sp)
20096794:	00867940 	call	20086794 <__udivsi3>
20096798:	d8c00017 	ldw	r3,0(sp)
2009679c:	170b383a 	mul	r5,r2,fp
200967a0:	8c7fffcc 	andi	r17,r17,65535
200967a4:	1806943a 	slli	r3,r3,16
200967a8:	1c46b03a 	or	r3,r3,r17
200967ac:	1940042e 	bgeu	r3,r5,200967c0 <__udivdi3+0x3d0>
200967b0:	1dc7883a 	add	r3,r3,r23
200967b4:	113fffc4 	addi	r4,r2,-1
200967b8:	1dc06b2e 	bgeu	r3,r23,20096968 <__udivdi3+0x578>
200967bc:	2005883a 	mov	r2,r4
200967c0:	8020943a 	slli	r16,r16,16
200967c4:	a9ffffcc 	andi	r7,r21,65535
200967c8:	a82ad43a 	srli	r21,r21,16
200967cc:	1404b03a 	or	r2,r2,r16
200967d0:	113fffcc 	andi	r4,r2,65535
200967d4:	100cd43a 	srli	r6,r2,16
200967d8:	21d3383a 	mul	r9,r4,r7
200967dc:	2549383a 	mul	r4,r4,r21
200967e0:	31cf383a 	mul	r7,r6,r7
200967e4:	4810d43a 	srli	r8,r9,16
200967e8:	1947c83a 	sub	r3,r3,r5
200967ec:	3909883a 	add	r4,r7,r4
200967f0:	2209883a 	add	r4,r4,r8
200967f4:	354d383a 	mul	r6,r6,r21
200967f8:	21c0022e 	bgeu	r4,r7,20096804 <__udivdi3+0x414>
200967fc:	01400074 	movhi	r5,1
20096800:	314d883a 	add	r6,r6,r5
20096804:	202ad43a 	srli	r21,r4,16
20096808:	354d883a 	add	r6,r6,r21
2009680c:	19803f36 	bltu	r3,r6,2009690c <__udivdi3+0x51c>
20096810:	19803926 	beq	r3,r6,200968f8 <__udivdi3+0x508>
20096814:	0007883a 	mov	r3,zero
20096818:	003fa006 	br	2009669c <__flash_rwdata_start+0xffffa054>
2009681c:	90e4983a 	sll	r18,r18,r3
20096820:	80aad83a 	srl	r21,r16,r2
20096824:	80e0983a 	sll	r16,r16,r3
20096828:	9028d43a 	srli	r20,r18,16
2009682c:	9884d83a 	srl	r2,r19,r2
20096830:	a809883a 	mov	r4,r21
20096834:	a00b883a 	mov	r5,r20
20096838:	80acb03a 	or	r22,r16,r2
2009683c:	98e2983a 	sll	r17,r19,r3
20096840:	008679c0 	call	2008679c <__umodsi3>
20096844:	a809883a 	mov	r4,r21
20096848:	a00b883a 	mov	r5,r20
2009684c:	1021883a 	mov	r16,r2
20096850:	00867940 	call	20086794 <__udivsi3>
20096854:	957fffcc 	andi	r21,r18,65535
20096858:	8020943a 	slli	r16,r16,16
2009685c:	b00ad43a 	srli	r5,r22,16
20096860:	1567383a 	mul	r19,r2,r21
20096864:	102f883a 	mov	r23,r2
20096868:	8148b03a 	or	r4,r16,r5
2009686c:	24c0062e 	bgeu	r4,r19,20096888 <__udivdi3+0x498>
20096870:	2489883a 	add	r4,r4,r18
20096874:	10bfffc4 	addi	r2,r2,-1
20096878:	24804536 	bltu	r4,r18,20096990 <__udivdi3+0x5a0>
2009687c:	24c0442e 	bgeu	r4,r19,20096990 <__udivdi3+0x5a0>
20096880:	bdffff84 	addi	r23,r23,-2
20096884:	2489883a 	add	r4,r4,r18
20096888:	24e7c83a 	sub	r19,r4,r19
2009688c:	9809883a 	mov	r4,r19
20096890:	a00b883a 	mov	r5,r20
20096894:	008679c0 	call	2008679c <__umodsi3>
20096898:	1021883a 	mov	r16,r2
2009689c:	9809883a 	mov	r4,r19
200968a0:	a00b883a 	mov	r5,r20
200968a4:	00867940 	call	20086794 <__udivsi3>
200968a8:	8020943a 	slli	r16,r16,16
200968ac:	1007883a 	mov	r3,r2
200968b0:	1545383a 	mul	r2,r2,r21
200968b4:	b13fffcc 	andi	r4,r22,65535
200968b8:	8108b03a 	or	r4,r16,r4
200968bc:	2080062e 	bgeu	r4,r2,200968d8 <__udivdi3+0x4e8>
200968c0:	2489883a 	add	r4,r4,r18
200968c4:	197fffc4 	addi	r5,r3,-1
200968c8:	24802f36 	bltu	r4,r18,20096988 <__udivdi3+0x598>
200968cc:	20802e2e 	bgeu	r4,r2,20096988 <__udivdi3+0x598>
200968d0:	18ffff84 	addi	r3,r3,-2
200968d4:	2489883a 	add	r4,r4,r18
200968d8:	b82e943a 	slli	r23,r23,16
200968dc:	20a1c83a 	sub	r16,r4,r2
200968e0:	1dc6b03a 	or	r3,r3,r23
200968e4:	003f4006 	br	200965e8 <__flash_rwdata_start+0xffff9fa0>
200968e8:	2005883a 	mov	r2,r4
200968ec:	003f6606 	br	20096688 <__flash_rwdata_start+0xffffa040>
200968f0:	1805883a 	mov	r2,r3
200968f4:	003f0a06 	br	20096520 <__flash_rwdata_start+0xffff9ed8>
200968f8:	2006943a 	slli	r3,r4,16
200968fc:	9c88983a 	sll	r4,r19,r18
20096900:	4a7fffcc 	andi	r9,r9,65535
20096904:	1a47883a 	add	r3,r3,r9
20096908:	20ffc22e 	bgeu	r4,r3,20096814 <__flash_rwdata_start+0xffffa1cc>
2009690c:	10bfffc4 	addi	r2,r2,-1
20096910:	003fc006 	br	20096814 <__flash_rwdata_start+0xffffa1cc>
20096914:	00c00404 	movi	r3,16
20096918:	180b883a 	mov	r5,r3
2009691c:	003f0c06 	br	20096550 <__flash_rwdata_start+0xffff9f08>
20096920:	0007883a 	mov	r3,zero
20096924:	000b883a 	mov	r5,zero
20096928:	003f0906 	br	20096550 <__flash_rwdata_start+0xffff9f08>
2009692c:	00800404 	movi	r2,16
20096930:	1007883a 	mov	r3,r2
20096934:	003ec606 	br	20096450 <__flash_rwdata_start+0xffff9e08>
20096938:	00800404 	movi	r2,16
2009693c:	1007883a 	mov	r3,r2
20096940:	003f1c06 	br	200965b4 <__flash_rwdata_start+0xffff9f6c>
20096944:	0005883a 	mov	r2,zero
20096948:	0007883a 	mov	r3,zero
2009694c:	003f1906 	br	200965b4 <__flash_rwdata_start+0xffff9f6c>
20096950:	0005883a 	mov	r2,zero
20096954:	0007883a 	mov	r3,zero
20096958:	003ebd06 	br	20096450 <__flash_rwdata_start+0xffff9e08>
2009695c:	0007883a 	mov	r3,zero
20096960:	00800044 	movi	r2,1
20096964:	003f4d06 	br	2009669c <__flash_rwdata_start+0xffffa054>
20096968:	197f942e 	bgeu	r3,r5,200967bc <__flash_rwdata_start+0xffffa174>
2009696c:	10bfff84 	addi	r2,r2,-2
20096970:	1dc7883a 	add	r3,r3,r23
20096974:	003f9206 	br	200967c0 <__flash_rwdata_start+0xffffa178>
20096978:	15bf7e2e 	bgeu	r2,r22,20096774 <__flash_rwdata_start+0xffffa12c>
2009697c:	843fff84 	addi	r16,r16,-2
20096980:	15c5883a 	add	r2,r2,r23
20096984:	003f7c06 	br	20096778 <__flash_rwdata_start+0xffffa130>
20096988:	2807883a 	mov	r3,r5
2009698c:	003fd206 	br	200968d8 <__flash_rwdata_start+0xffffa290>
20096990:	102f883a 	mov	r23,r2
20096994:	003fbc06 	br	20096888 <__flash_rwdata_start+0xffffa240>
20096998:	843fff84 	addi	r16,r16,-2
2009699c:	2489883a 	add	r4,r4,r18
200969a0:	003f2506 	br	20096638 <__flash_rwdata_start+0xffff9ff0>
200969a4:	843fff84 	addi	r16,r16,-2
200969a8:	1485883a 	add	r2,r2,r18
200969ac:	003eca06 	br	200964d8 <__flash_rwdata_start+0xffff9e90>

200969b0 <__umoddi3>:
200969b0:	defff404 	addi	sp,sp,-48
200969b4:	ddc00915 	stw	r23,36(sp)
200969b8:	dc400315 	stw	r17,12(sp)
200969bc:	dc000215 	stw	r16,8(sp)
200969c0:	dfc00b15 	stw	ra,44(sp)
200969c4:	df000a15 	stw	fp,40(sp)
200969c8:	dd800815 	stw	r22,32(sp)
200969cc:	dd400715 	stw	r21,28(sp)
200969d0:	dd000615 	stw	r20,24(sp)
200969d4:	dcc00515 	stw	r19,20(sp)
200969d8:	dc800415 	stw	r18,16(sp)
200969dc:	2021883a 	mov	r16,r4
200969e0:	2823883a 	mov	r17,r5
200969e4:	282f883a 	mov	r23,r5
200969e8:	3800381e 	bne	r7,zero,20096acc <__umoddi3+0x11c>
200969ec:	3027883a 	mov	r19,r6
200969f0:	2029883a 	mov	r20,r4
200969f4:	29804e2e 	bgeu	r5,r6,20096b30 <__umoddi3+0x180>
200969f8:	00bfffd4 	movui	r2,65535
200969fc:	11809c36 	bltu	r2,r6,20096c70 <__umoddi3+0x2c0>
20096a00:	00803fc4 	movi	r2,255
20096a04:	11813b2e 	bgeu	r2,r6,20096ef4 <__umoddi3+0x544>
20096a08:	01400204 	movi	r5,8
20096a0c:	2805883a 	mov	r2,r5
20096a10:	314ad83a 	srl	r5,r6,r5
20096a14:	00c00034 	movhi	r3,0
20096a18:	18c13a44 	addi	r3,r3,1257
20096a1c:	194b883a 	add	r5,r3,r5
20096a20:	29000003 	ldbu	r4,0(r5)
20096a24:	2089883a 	add	r4,r4,r2
20096a28:	00800804 	movi	r2,32
20096a2c:	1105c83a 	sub	r2,r2,r4
20096a30:	1000ec26 	beq	r2,zero,20096de4 <__umoddi3+0x434>
20096a34:	88a2983a 	sll	r17,r17,r2
20096a38:	8108d83a 	srl	r4,r16,r4
20096a3c:	30a6983a 	sll	r19,r6,r2
20096a40:	80a8983a 	sll	r20,r16,r2
20096a44:	1025883a 	mov	r18,r2
20096a48:	892eb03a 	or	r23,r17,r4
20096a4c:	982cd43a 	srli	r22,r19,16
20096a50:	b809883a 	mov	r4,r23
20096a54:	9d7fffcc 	andi	r21,r19,65535
20096a58:	b00b883a 	mov	r5,r22
20096a5c:	008679c0 	call	2008679c <__umodsi3>
20096a60:	b809883a 	mov	r4,r23
20096a64:	b00b883a 	mov	r5,r22
20096a68:	1021883a 	mov	r16,r2
20096a6c:	00867940 	call	20086794 <__udivsi3>
20096a70:	8020943a 	slli	r16,r16,16
20096a74:	a00cd43a 	srli	r6,r20,16
20096a78:	1545383a 	mul	r2,r2,r21
20096a7c:	8188b03a 	or	r4,r16,r6
20096a80:	2080042e 	bgeu	r4,r2,20096a94 <__umoddi3+0xe4>
20096a84:	24c9883a 	add	r4,r4,r19
20096a88:	24c00236 	bltu	r4,r19,20096a94 <__umoddi3+0xe4>
20096a8c:	2080012e 	bgeu	r4,r2,20096a94 <__umoddi3+0xe4>
20096a90:	24c9883a 	add	r4,r4,r19
20096a94:	20a3c83a 	sub	r17,r4,r2
20096a98:	8809883a 	mov	r4,r17
20096a9c:	b00b883a 	mov	r5,r22
20096aa0:	008679c0 	call	2008679c <__umodsi3>
20096aa4:	8809883a 	mov	r4,r17
20096aa8:	b00b883a 	mov	r5,r22
20096aac:	1021883a 	mov	r16,r2
20096ab0:	00867940 	call	20086794 <__udivsi3>
20096ab4:	8006943a 	slli	r3,r16,16
20096ab8:	1545383a 	mul	r2,r2,r21
20096abc:	a13fffcc 	andi	r4,r20,65535
20096ac0:	1906b03a 	or	r3,r3,r4
20096ac4:	1880532e 	bgeu	r3,r2,20096c14 <__umoddi3+0x264>
20096ac8:	00004e06 	br	20096c04 <__umoddi3+0x254>
20096acc:	29c05536 	bltu	r5,r7,20096c24 <__umoddi3+0x274>
20096ad0:	00bfffd4 	movui	r2,65535
20096ad4:	11c0612e 	bgeu	r2,r7,20096c5c <__umoddi3+0x2ac>
20096ad8:	00804034 	movhi	r2,256
20096adc:	10bfffc4 	addi	r2,r2,-1
20096ae0:	11c0f82e 	bgeu	r2,r7,20096ec4 <__umoddi3+0x514>
20096ae4:	01400604 	movi	r5,24
20096ae8:	282b883a 	mov	r21,r5
20096aec:	394ad83a 	srl	r5,r7,r5
20096af0:	00c00034 	movhi	r3,0
20096af4:	18c13a44 	addi	r3,r3,1257
20096af8:	194b883a 	add	r5,r3,r5
20096afc:	28800003 	ldbu	r2,0(r5)
20096b00:	00c00804 	movi	r3,32
20096b04:	156b883a 	add	r21,r2,r21
20096b08:	1d69c83a 	sub	r20,r3,r21
20096b0c:	a000631e 	bne	r20,zero,20096c9c <__umoddi3+0x2ec>
20096b10:	3c400136 	bltu	r7,r17,20096b18 <__umoddi3+0x168>
20096b14:	81810436 	bltu	r16,r6,20096f28 <__umoddi3+0x578>
20096b18:	8185c83a 	sub	r2,r16,r6
20096b1c:	89e3c83a 	sub	r17,r17,r7
20096b20:	8087803a 	cmpltu	r3,r16,r2
20096b24:	88efc83a 	sub	r23,r17,r3
20096b28:	b807883a 	mov	r3,r23
20096b2c:	00003f06 	br	20096c2c <__umoddi3+0x27c>
20096b30:	3000041e 	bne	r6,zero,20096b44 <__umoddi3+0x194>
20096b34:	01000044 	movi	r4,1
20096b38:	000b883a 	mov	r5,zero
20096b3c:	00867940 	call	20086794 <__udivsi3>
20096b40:	1027883a 	mov	r19,r2
20096b44:	00bfffd4 	movui	r2,65535
20096b48:	14c04f2e 	bgeu	r2,r19,20096c88 <__umoddi3+0x2d8>
20096b4c:	00804034 	movhi	r2,256
20096b50:	10bfffc4 	addi	r2,r2,-1
20096b54:	14c0e42e 	bgeu	r2,r19,20096ee8 <__umoddi3+0x538>
20096b58:	00800604 	movi	r2,24
20096b5c:	1007883a 	mov	r3,r2
20096b60:	9884d83a 	srl	r2,r19,r2
20096b64:	01000034 	movhi	r4,0
20096b68:	21013a44 	addi	r4,r4,1257
20096b6c:	2085883a 	add	r2,r4,r2
20096b70:	11000003 	ldbu	r4,0(r2)
20096b74:	00800804 	movi	r2,32
20096b78:	20c7883a 	add	r3,r4,r3
20096b7c:	10c5c83a 	sub	r2,r2,r3
20096b80:	10009a1e 	bne	r2,zero,20096dec <__umoddi3+0x43c>
20096b84:	982cd43a 	srli	r22,r19,16
20096b88:	8ce3c83a 	sub	r17,r17,r19
20096b8c:	9c3fffcc 	andi	r16,r19,65535
20096b90:	0025883a 	mov	r18,zero
20096b94:	8809883a 	mov	r4,r17
20096b98:	b00b883a 	mov	r5,r22
20096b9c:	008679c0 	call	2008679c <__umodsi3>
20096ba0:	8809883a 	mov	r4,r17
20096ba4:	b00b883a 	mov	r5,r22
20096ba8:	102b883a 	mov	r21,r2
20096bac:	00867940 	call	20086794 <__udivsi3>
20096bb0:	a806943a 	slli	r3,r21,16
20096bb4:	a008d43a 	srli	r4,r20,16
20096bb8:	1405383a 	mul	r2,r2,r16
20096bbc:	190cb03a 	or	r6,r3,r4
20096bc0:	3080032e 	bgeu	r6,r2,20096bd0 <__umoddi3+0x220>
20096bc4:	34cd883a 	add	r6,r6,r19
20096bc8:	34c00136 	bltu	r6,r19,20096bd0 <__umoddi3+0x220>
20096bcc:	3080d436 	bltu	r6,r2,20096f20 <__umoddi3+0x570>
20096bd0:	30abc83a 	sub	r21,r6,r2
20096bd4:	a809883a 	mov	r4,r21
20096bd8:	b00b883a 	mov	r5,r22
20096bdc:	008679c0 	call	2008679c <__umodsi3>
20096be0:	1023883a 	mov	r17,r2
20096be4:	a809883a 	mov	r4,r21
20096be8:	b00b883a 	mov	r5,r22
20096bec:	00867940 	call	20086794 <__udivsi3>
20096bf0:	8822943a 	slli	r17,r17,16
20096bf4:	1405383a 	mul	r2,r2,r16
20096bf8:	a13fffcc 	andi	r4,r20,65535
20096bfc:	8906b03a 	or	r3,r17,r4
20096c00:	1880042e 	bgeu	r3,r2,20096c14 <__umoddi3+0x264>
20096c04:	1cc7883a 	add	r3,r3,r19
20096c08:	1cc00236 	bltu	r3,r19,20096c14 <__umoddi3+0x264>
20096c0c:	1880012e 	bgeu	r3,r2,20096c14 <__umoddi3+0x264>
20096c10:	1cc7883a 	add	r3,r3,r19
20096c14:	1887c83a 	sub	r3,r3,r2
20096c18:	1c84d83a 	srl	r2,r3,r18
20096c1c:	0007883a 	mov	r3,zero
20096c20:	00000206 	br	20096c2c <__umoddi3+0x27c>
20096c24:	2005883a 	mov	r2,r4
20096c28:	2807883a 	mov	r3,r5
20096c2c:	dfc00b17 	ldw	ra,44(sp)
20096c30:	df000a17 	ldw	fp,40(sp)
20096c34:	ddc00917 	ldw	r23,36(sp)
20096c38:	dd800817 	ldw	r22,32(sp)
20096c3c:	dd400717 	ldw	r21,28(sp)
20096c40:	dd000617 	ldw	r20,24(sp)
20096c44:	dcc00517 	ldw	r19,20(sp)
20096c48:	dc800417 	ldw	r18,16(sp)
20096c4c:	dc400317 	ldw	r17,12(sp)
20096c50:	dc000217 	ldw	r16,8(sp)
20096c54:	dec00c04 	addi	sp,sp,48
20096c58:	f800283a 	ret
20096c5c:	00803fc4 	movi	r2,255
20096c60:	11c0952e 	bgeu	r2,r7,20096eb8 <__umoddi3+0x508>
20096c64:	01400204 	movi	r5,8
20096c68:	282b883a 	mov	r21,r5
20096c6c:	003f9f06 	br	20096aec <__flash_rwdata_start+0xffffa4a4>
20096c70:	00804034 	movhi	r2,256
20096c74:	10bfffc4 	addi	r2,r2,-1
20096c78:	1180952e 	bgeu	r2,r6,20096ed0 <__umoddi3+0x520>
20096c7c:	01400604 	movi	r5,24
20096c80:	2805883a 	mov	r2,r5
20096c84:	003f6206 	br	20096a10 <__flash_rwdata_start+0xffffa3c8>
20096c88:	00803fc4 	movi	r2,255
20096c8c:	14c0932e 	bgeu	r2,r19,20096edc <__umoddi3+0x52c>
20096c90:	00800204 	movi	r2,8
20096c94:	1007883a 	mov	r3,r2
20096c98:	003fb106 	br	20096b60 <__flash_rwdata_start+0xffffa518>
20096c9c:	3548d83a 	srl	r4,r6,r21
20096ca0:	3d0e983a 	sll	r7,r7,r20
20096ca4:	8d10983a 	sll	r8,r17,r20
20096ca8:	8d6cd83a 	srl	r22,r17,r21
20096cac:	3922b03a 	or	r17,r7,r4
20096cb0:	882ed43a 	srli	r23,r17,16
20096cb4:	8564d83a 	srl	r18,r16,r21
20096cb8:	b009883a 	mov	r4,r22
20096cbc:	b80b883a 	mov	r5,r23
20096cc0:	44a4b03a 	or	r18,r8,r18
20096cc4:	3526983a 	sll	r19,r6,r20
20096cc8:	008679c0 	call	2008679c <__umodsi3>
20096ccc:	b009883a 	mov	r4,r22
20096cd0:	b80b883a 	mov	r5,r23
20096cd4:	1039883a 	mov	fp,r2
20096cd8:	00867940 	call	20086794 <__udivsi3>
20096cdc:	102d883a 	mov	r22,r2
20096ce0:	8a3fffcc 	andi	r8,r17,65535
20096ce4:	e004943a 	slli	r2,fp,16
20096ce8:	900cd43a 	srli	r6,r18,16
20096cec:	b239383a 	mul	fp,r22,r8
20096cf0:	8520983a 	sll	r16,r16,r20
20096cf4:	118ab03a 	or	r5,r2,r6
20096cf8:	2f00042e 	bgeu	r5,fp,20096d0c <__umoddi3+0x35c>
20096cfc:	2c4b883a 	add	r5,r5,r17
20096d00:	b0bfffc4 	addi	r2,r22,-1
20096d04:	2c40822e 	bgeu	r5,r17,20096f10 <__umoddi3+0x560>
20096d08:	102d883a 	mov	r22,r2
20096d0c:	2f39c83a 	sub	fp,r5,fp
20096d10:	e009883a 	mov	r4,fp
20096d14:	b80b883a 	mov	r5,r23
20096d18:	da000115 	stw	r8,4(sp)
20096d1c:	008679c0 	call	2008679c <__umodsi3>
20096d20:	e009883a 	mov	r4,fp
20096d24:	b80b883a 	mov	r5,r23
20096d28:	d8800015 	stw	r2,0(sp)
20096d2c:	00867940 	call	20086794 <__udivsi3>
20096d30:	d9800017 	ldw	r6,0(sp)
20096d34:	da000117 	ldw	r8,4(sp)
20096d38:	94bfffcc 	andi	r18,r18,65535
20096d3c:	300c943a 	slli	r6,r6,16
20096d40:	1209383a 	mul	r4,r2,r8
20096d44:	3490b03a 	or	r8,r6,r18
20096d48:	4100042e 	bgeu	r8,r4,20096d5c <__umoddi3+0x3ac>
20096d4c:	4451883a 	add	r8,r8,r17
20096d50:	10ffffc4 	addi	r3,r2,-1
20096d54:	44406a2e 	bgeu	r8,r17,20096f00 <__umoddi3+0x550>
20096d58:	1805883a 	mov	r2,r3
20096d5c:	b012943a 	slli	r9,r22,16
20096d60:	9abfffcc 	andi	r10,r19,65535
20096d64:	980ed43a 	srli	r7,r19,16
20096d68:	124ab03a 	or	r5,r2,r9
20096d6c:	2a7fffcc 	andi	r9,r5,65535
20096d70:	280ad43a 	srli	r5,r5,16
20096d74:	4a8d383a 	mul	r6,r9,r10
20096d78:	49d3383a 	mul	r9,r9,r7
20096d7c:	2a95383a 	mul	r10,r5,r10
20096d80:	3004d43a 	srli	r2,r6,16
20096d84:	4111c83a 	sub	r8,r8,r4
20096d88:	5253883a 	add	r9,r10,r9
20096d8c:	4893883a 	add	r9,r9,r2
20096d90:	29cb383a 	mul	r5,r5,r7
20096d94:	4a80022e 	bgeu	r9,r10,20096da0 <__umoddi3+0x3f0>
20096d98:	00800074 	movhi	r2,1
20096d9c:	288b883a 	add	r5,r5,r2
20096da0:	4808d43a 	srli	r4,r9,16
20096da4:	4812943a 	slli	r9,r9,16
20096da8:	31bfffcc 	andi	r6,r6,65535
20096dac:	290b883a 	add	r5,r5,r4
20096db0:	498d883a 	add	r6,r9,r6
20096db4:	41403a36 	bltu	r8,r5,20096ea0 <__umoddi3+0x4f0>
20096db8:	41405d26 	beq	r8,r5,20096f30 <__umoddi3+0x580>
20096dbc:	4149c83a 	sub	r4,r8,r5
20096dc0:	300f883a 	mov	r7,r6
20096dc4:	81cfc83a 	sub	r7,r16,r7
20096dc8:	81c7803a 	cmpltu	r3,r16,r7
20096dcc:	20c7c83a 	sub	r3,r4,r3
20096dd0:	1d44983a 	sll	r2,r3,r21
20096dd4:	3d0ed83a 	srl	r7,r7,r20
20096dd8:	1d06d83a 	srl	r3,r3,r20
20096ddc:	11c4b03a 	or	r2,r2,r7
20096de0:	003f9206 	br	20096c2c <__flash_rwdata_start+0xffffa5e4>
20096de4:	0025883a 	mov	r18,zero
20096de8:	003f1806 	br	20096a4c <__flash_rwdata_start+0xffffa404>
20096dec:	98a6983a 	sll	r19,r19,r2
20096df0:	88e8d83a 	srl	r20,r17,r3
20096df4:	80c6d83a 	srl	r3,r16,r3
20096df8:	982cd43a 	srli	r22,r19,16
20096dfc:	88a2983a 	sll	r17,r17,r2
20096e00:	a009883a 	mov	r4,r20
20096e04:	b00b883a 	mov	r5,r22
20096e08:	88eab03a 	or	r21,r17,r3
20096e0c:	1025883a 	mov	r18,r2
20096e10:	008679c0 	call	2008679c <__umodsi3>
20096e14:	a009883a 	mov	r4,r20
20096e18:	b00b883a 	mov	r5,r22
20096e1c:	1023883a 	mov	r17,r2
20096e20:	00867940 	call	20086794 <__udivsi3>
20096e24:	9f3fffcc 	andi	fp,r19,65535
20096e28:	8822943a 	slli	r17,r17,16
20096e2c:	a80ad43a 	srli	r5,r21,16
20096e30:	1705383a 	mul	r2,r2,fp
20096e34:	84a8983a 	sll	r20,r16,r18
20096e38:	8948b03a 	or	r4,r17,r5
20096e3c:	2080042e 	bgeu	r4,r2,20096e50 <__umoddi3+0x4a0>
20096e40:	24c9883a 	add	r4,r4,r19
20096e44:	24c00236 	bltu	r4,r19,20096e50 <__umoddi3+0x4a0>
20096e48:	2080012e 	bgeu	r4,r2,20096e50 <__umoddi3+0x4a0>
20096e4c:	24c9883a 	add	r4,r4,r19
20096e50:	20afc83a 	sub	r23,r4,r2
20096e54:	b809883a 	mov	r4,r23
20096e58:	b00b883a 	mov	r5,r22
20096e5c:	008679c0 	call	2008679c <__umodsi3>
20096e60:	1023883a 	mov	r17,r2
20096e64:	b809883a 	mov	r4,r23
20096e68:	b00b883a 	mov	r5,r22
20096e6c:	00867940 	call	20086794 <__udivsi3>
20096e70:	8822943a 	slli	r17,r17,16
20096e74:	1705383a 	mul	r2,r2,fp
20096e78:	a93fffcc 	andi	r4,r21,65535
20096e7c:	8908b03a 	or	r4,r17,r4
20096e80:	2080042e 	bgeu	r4,r2,20096e94 <__umoddi3+0x4e4>
20096e84:	24c9883a 	add	r4,r4,r19
20096e88:	24c00236 	bltu	r4,r19,20096e94 <__umoddi3+0x4e4>
20096e8c:	2080012e 	bgeu	r4,r2,20096e94 <__umoddi3+0x4e4>
20096e90:	24c9883a 	add	r4,r4,r19
20096e94:	20a3c83a 	sub	r17,r4,r2
20096e98:	e021883a 	mov	r16,fp
20096e9c:	003f3d06 	br	20096b94 <__flash_rwdata_start+0xffffa54c>
20096ea0:	34cfc83a 	sub	r7,r6,r19
20096ea4:	2c4bc83a 	sub	r5,r5,r17
20096ea8:	31cd803a 	cmpltu	r6,r6,r7
20096eac:	298dc83a 	sub	r6,r5,r6
20096eb0:	4189c83a 	sub	r4,r8,r6
20096eb4:	003fc306 	br	20096dc4 <__flash_rwdata_start+0xffffa77c>
20096eb8:	000b883a 	mov	r5,zero
20096ebc:	002b883a 	mov	r21,zero
20096ec0:	003f0a06 	br	20096aec <__flash_rwdata_start+0xffffa4a4>
20096ec4:	01400404 	movi	r5,16
20096ec8:	282b883a 	mov	r21,r5
20096ecc:	003f0706 	br	20096aec <__flash_rwdata_start+0xffffa4a4>
20096ed0:	01400404 	movi	r5,16
20096ed4:	2805883a 	mov	r2,r5
20096ed8:	003ecd06 	br	20096a10 <__flash_rwdata_start+0xffffa3c8>
20096edc:	0005883a 	mov	r2,zero
20096ee0:	0007883a 	mov	r3,zero
20096ee4:	003f1e06 	br	20096b60 <__flash_rwdata_start+0xffffa518>
20096ee8:	00800404 	movi	r2,16
20096eec:	1007883a 	mov	r3,r2
20096ef0:	003f1b06 	br	20096b60 <__flash_rwdata_start+0xffffa518>
20096ef4:	000b883a 	mov	r5,zero
20096ef8:	0005883a 	mov	r2,zero
20096efc:	003ec406 	br	20096a10 <__flash_rwdata_start+0xffffa3c8>
20096f00:	413f952e 	bgeu	r8,r4,20096d58 <__flash_rwdata_start+0xffffa710>
20096f04:	10bfff84 	addi	r2,r2,-2
20096f08:	4451883a 	add	r8,r8,r17
20096f0c:	003f9306 	br	20096d5c <__flash_rwdata_start+0xffffa714>
20096f10:	2f3f7d2e 	bgeu	r5,fp,20096d08 <__flash_rwdata_start+0xffffa6c0>
20096f14:	b5bfff84 	addi	r22,r22,-2
20096f18:	2c4b883a 	add	r5,r5,r17
20096f1c:	003f7b06 	br	20096d0c <__flash_rwdata_start+0xffffa6c4>
20096f20:	34cd883a 	add	r6,r6,r19
20096f24:	003f2a06 	br	20096bd0 <__flash_rwdata_start+0xffffa588>
20096f28:	8005883a 	mov	r2,r16
20096f2c:	003efe06 	br	20096b28 <__flash_rwdata_start+0xffffa4e0>
20096f30:	81bfdb36 	bltu	r16,r6,20096ea0 <__flash_rwdata_start+0xffffa858>
20096f34:	300f883a 	mov	r7,r6
20096f38:	0009883a 	mov	r4,zero
20096f3c:	003fa106 	br	20096dc4 <__flash_rwdata_start+0xffffa77c>

20096f40 <__eqdf2>:
20096f40:	2804d53a 	srli	r2,r5,20
20096f44:	3806d53a 	srli	r3,r7,20
20096f48:	02000434 	movhi	r8,16
20096f4c:	423fffc4 	addi	r8,r8,-1
20096f50:	1081ffcc 	andi	r2,r2,2047
20096f54:	0241ffc4 	movi	r9,2047
20096f58:	2a14703a 	and	r10,r5,r8
20096f5c:	18c1ffcc 	andi	r3,r3,2047
20096f60:	3a10703a 	and	r8,r7,r8
20096f64:	280ad7fa 	srli	r5,r5,31
20096f68:	380ed7fa 	srli	r7,r7,31
20096f6c:	12400f26 	beq	r2,r9,20096fac <__eqdf2+0x6c>
20096f70:	0241ffc4 	movi	r9,2047
20096f74:	1a400326 	beq	r3,r9,20096f84 <__eqdf2+0x44>
20096f78:	10c00526 	beq	r2,r3,20096f90 <__eqdf2+0x50>
20096f7c:	00800044 	movi	r2,1
20096f80:	f800283a 	ret
20096f84:	4192b03a 	or	r9,r8,r6
20096f88:	483ffc1e 	bne	r9,zero,20096f7c <__flash_rwdata_start+0xffffa934>
20096f8c:	10fffb1e 	bne	r2,r3,20096f7c <__flash_rwdata_start+0xffffa934>
20096f90:	523ffa1e 	bne	r10,r8,20096f7c <__flash_rwdata_start+0xffffa934>
20096f94:	21bff91e 	bne	r4,r6,20096f7c <__flash_rwdata_start+0xffffa934>
20096f98:	29c00826 	beq	r5,r7,20096fbc <__eqdf2+0x7c>
20096f9c:	103ff71e 	bne	r2,zero,20096f7c <__flash_rwdata_start+0xffffa934>
20096fa0:	5104b03a 	or	r2,r10,r4
20096fa4:	1004c03a 	cmpne	r2,r2,zero
20096fa8:	f800283a 	ret
20096fac:	5112b03a 	or	r9,r10,r4
20096fb0:	483fef26 	beq	r9,zero,20096f70 <__flash_rwdata_start+0xffffa928>
20096fb4:	00800044 	movi	r2,1
20096fb8:	f800283a 	ret
20096fbc:	0005883a 	mov	r2,zero
20096fc0:	f800283a 	ret

20096fc4 <__gedf2>:
20096fc4:	2804d53a 	srli	r2,r5,20
20096fc8:	3806d53a 	srli	r3,r7,20
20096fcc:	02000434 	movhi	r8,16
20096fd0:	423fffc4 	addi	r8,r8,-1
20096fd4:	0241ffc4 	movi	r9,2047
20096fd8:	1081ffcc 	andi	r2,r2,2047
20096fdc:	2a14703a 	and	r10,r5,r8
20096fe0:	1a46703a 	and	r3,r3,r9
20096fe4:	3a10703a 	and	r8,r7,r8
20096fe8:	280ad7fa 	srli	r5,r5,31
20096fec:	380ed7fa 	srli	r7,r7,31
20096ff0:	12400b26 	beq	r2,r9,20097020 <__gedf2+0x5c>
20096ff4:	1a401626 	beq	r3,r9,20097050 <__gedf2+0x8c>
20096ff8:	10000c1e 	bne	r2,zero,2009702c <__gedf2+0x68>
20096ffc:	5112b03a 	or	r9,r10,r4
20097000:	4813003a 	cmpeq	r9,r9,zero
20097004:	4817883a 	mov	r11,r9
20097008:	18000c1e 	bne	r3,zero,2009703c <__gedf2+0x78>
2009700c:	4198b03a 	or	r12,r8,r6
20097010:	60000a1e 	bne	r12,zero,2009703c <__gedf2+0x78>
20097014:	48001326 	beq	r9,zero,20097064 <__gedf2+0xa0>
20097018:	0005883a 	mov	r2,zero
2009701c:	f800283a 	ret
20097020:	5112b03a 	or	r9,r10,r4
20097024:	4800191e 	bne	r9,zero,2009708c <__gedf2+0xc8>
20097028:	18800926 	beq	r3,r2,20097050 <__gedf2+0x8c>
2009702c:	18000b1e 	bne	r3,zero,2009705c <__gedf2+0x98>
20097030:	4192b03a 	or	r9,r8,r6
20097034:	0017883a 	mov	r11,zero
20097038:	48000a26 	beq	r9,zero,20097064 <__gedf2+0xa0>
2009703c:	39c03fcc 	andi	r7,r7,255
20097040:	58000726 	beq	r11,zero,20097060 <__gedf2+0x9c>
20097044:	3800081e 	bne	r7,zero,20097068 <__gedf2+0xa4>
20097048:	00bfffc4 	movi	r2,-1
2009704c:	f800283a 	ret
20097050:	4192b03a 	or	r9,r8,r6
20097054:	48000d1e 	bne	r9,zero,2009708c <__gedf2+0xc8>
20097058:	103fe826 	beq	r2,zero,20096ffc <__flash_rwdata_start+0xffffa9b4>
2009705c:	39c03fcc 	andi	r7,r7,255
20097060:	29c00326 	beq	r5,r7,20097070 <__gedf2+0xac>
20097064:	283ff81e 	bne	r5,zero,20097048 <__flash_rwdata_start+0xffffaa00>
20097068:	00800044 	movi	r2,1
2009706c:	f800283a 	ret
20097070:	18bffc16 	blt	r3,r2,20097064 <__flash_rwdata_start+0xffffaa1c>
20097074:	10c00316 	blt	r2,r3,20097084 <__gedf2+0xc0>
20097078:	42bffa36 	bltu	r8,r10,20097064 <__flash_rwdata_start+0xffffaa1c>
2009707c:	52000526 	beq	r10,r8,20097094 <__gedf2+0xd0>
20097080:	523fe52e 	bgeu	r10,r8,20097018 <__flash_rwdata_start+0xffffa9d0>
20097084:	283ff026 	beq	r5,zero,20097048 <__flash_rwdata_start+0xffffaa00>
20097088:	003ff706 	br	20097068 <__flash_rwdata_start+0xffffaa20>
2009708c:	00bfff84 	movi	r2,-2
20097090:	f800283a 	ret
20097094:	313ff336 	bltu	r6,r4,20097064 <__flash_rwdata_start+0xffffaa1c>
20097098:	21bfdf2e 	bgeu	r4,r6,20097018 <__flash_rwdata_start+0xffffa9d0>
2009709c:	283fea26 	beq	r5,zero,20097048 <__flash_rwdata_start+0xffffaa00>
200970a0:	003ff106 	br	20097068 <__flash_rwdata_start+0xffffaa20>

200970a4 <__ledf2>:
200970a4:	2804d53a 	srli	r2,r5,20
200970a8:	3810d53a 	srli	r8,r7,20
200970ac:	00c00434 	movhi	r3,16
200970b0:	18ffffc4 	addi	r3,r3,-1
200970b4:	0241ffc4 	movi	r9,2047
200970b8:	1081ffcc 	andi	r2,r2,2047
200970bc:	28d4703a 	and	r10,r5,r3
200970c0:	4250703a 	and	r8,r8,r9
200970c4:	38c6703a 	and	r3,r7,r3
200970c8:	280ad7fa 	srli	r5,r5,31
200970cc:	380ed7fa 	srli	r7,r7,31
200970d0:	12400b26 	beq	r2,r9,20097100 <__ledf2+0x5c>
200970d4:	42401926 	beq	r8,r9,2009713c <__ledf2+0x98>
200970d8:	10000c1e 	bne	r2,zero,2009710c <__ledf2+0x68>
200970dc:	5112b03a 	or	r9,r10,r4
200970e0:	4813003a 	cmpeq	r9,r9,zero
200970e4:	4817883a 	mov	r11,r9
200970e8:	40000f26 	beq	r8,zero,20097128 <__ledf2+0x84>
200970ec:	39c03fcc 	andi	r7,r7,255
200970f0:	58001826 	beq	r11,zero,20097154 <__ledf2+0xb0>
200970f4:	38000a1e 	bne	r7,zero,20097120 <__ledf2+0x7c>
200970f8:	00bfffc4 	movi	r2,-1
200970fc:	f800283a 	ret
20097100:	5112b03a 	or	r9,r10,r4
20097104:	48000f1e 	bne	r9,zero,20097144 <__ledf2+0xa0>
20097108:	40800c26 	beq	r8,r2,2009713c <__ledf2+0x98>
2009710c:	4000101e 	bne	r8,zero,20097150 <__ledf2+0xac>
20097110:	1992b03a 	or	r9,r3,r6
20097114:	0017883a 	mov	r11,zero
20097118:	483ff41e 	bne	r9,zero,200970ec <__flash_rwdata_start+0xffffaaa4>
2009711c:	283ff61e 	bne	r5,zero,200970f8 <__flash_rwdata_start+0xffffaab0>
20097120:	00800044 	movi	r2,1
20097124:	f800283a 	ret
20097128:	1998b03a 	or	r12,r3,r6
2009712c:	603fef1e 	bne	r12,zero,200970ec <__flash_rwdata_start+0xffffaaa4>
20097130:	483ffa26 	beq	r9,zero,2009711c <__flash_rwdata_start+0xffffaad4>
20097134:	0005883a 	mov	r2,zero
20097138:	f800283a 	ret
2009713c:	1992b03a 	or	r9,r3,r6
20097140:	48000226 	beq	r9,zero,2009714c <__ledf2+0xa8>
20097144:	00800084 	movi	r2,2
20097148:	f800283a 	ret
2009714c:	103fe326 	beq	r2,zero,200970dc <__flash_rwdata_start+0xffffaa94>
20097150:	39c03fcc 	andi	r7,r7,255
20097154:	29fff11e 	bne	r5,r7,2009711c <__flash_rwdata_start+0xffffaad4>
20097158:	40bff016 	blt	r8,r2,2009711c <__flash_rwdata_start+0xffffaad4>
2009715c:	12000316 	blt	r2,r8,2009716c <__ledf2+0xc8>
20097160:	1abfee36 	bltu	r3,r10,2009711c <__flash_rwdata_start+0xffffaad4>
20097164:	50c00326 	beq	r10,r3,20097174 <__ledf2+0xd0>
20097168:	50fff22e 	bgeu	r10,r3,20097134 <__flash_rwdata_start+0xffffaaec>
2009716c:	283fe226 	beq	r5,zero,200970f8 <__flash_rwdata_start+0xffffaab0>
20097170:	003feb06 	br	20097120 <__flash_rwdata_start+0xffffaad8>
20097174:	313fe936 	bltu	r6,r4,2009711c <__flash_rwdata_start+0xffffaad4>
20097178:	21bfee2e 	bgeu	r4,r6,20097134 <__flash_rwdata_start+0xffffaaec>
2009717c:	283fde26 	beq	r5,zero,200970f8 <__flash_rwdata_start+0xffffaab0>
20097180:	003fe706 	br	20097120 <__flash_rwdata_start+0xffffaad8>

20097184 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
20097184:	defffe04 	addi	sp,sp,-8
20097188:	dfc00115 	stw	ra,4(sp)
2009718c:	df000015 	stw	fp,0(sp)
20097190:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
20097194:	00800034 	movhi	r2,0
20097198:	108a1e04 	addi	r2,r2,10360
2009719c:	10800017 	ldw	r2,0(r2)
200971a0:	10000526 	beq	r2,zero,200971b8 <alt_get_errno+0x34>
200971a4:	00800034 	movhi	r2,0
200971a8:	108a1e04 	addi	r2,r2,10360
200971ac:	10800017 	ldw	r2,0(r2)
200971b0:	103ee83a 	callr	r2
200971b4:	00000206 	br	200971c0 <alt_get_errno+0x3c>
200971b8:	00800034 	movhi	r2,0
200971bc:	108a2e04 	addi	r2,r2,10424
}
200971c0:	e037883a 	mov	sp,fp
200971c4:	dfc00117 	ldw	ra,4(sp)
200971c8:	df000017 	ldw	fp,0(sp)
200971cc:	dec00204 	addi	sp,sp,8
200971d0:	f800283a 	ret

200971d4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
200971d4:	defffb04 	addi	sp,sp,-20
200971d8:	dfc00415 	stw	ra,16(sp)
200971dc:	df000315 	stw	fp,12(sp)
200971e0:	df000304 	addi	fp,sp,12
200971e4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
200971e8:	e0bfff17 	ldw	r2,-4(fp)
200971ec:	10000616 	blt	r2,zero,20097208 <close+0x34>
200971f0:	e0bfff17 	ldw	r2,-4(fp)
200971f4:	10c00324 	muli	r3,r2,12
200971f8:	00800034 	movhi	r2,0
200971fc:	10858104 	addi	r2,r2,5636
20097200:	1885883a 	add	r2,r3,r2
20097204:	00000106 	br	2009720c <close+0x38>
20097208:	0005883a 	mov	r2,zero
2009720c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
20097210:	e0bffd17 	ldw	r2,-12(fp)
20097214:	10001926 	beq	r2,zero,2009727c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
20097218:	e0bffd17 	ldw	r2,-12(fp)
2009721c:	10800017 	ldw	r2,0(r2)
20097220:	10800417 	ldw	r2,16(r2)
20097224:	10000626 	beq	r2,zero,20097240 <close+0x6c>
20097228:	e0bffd17 	ldw	r2,-12(fp)
2009722c:	10800017 	ldw	r2,0(r2)
20097230:	10800417 	ldw	r2,16(r2)
20097234:	e13ffd17 	ldw	r4,-12(fp)
20097238:	103ee83a 	callr	r2
2009723c:	00000106 	br	20097244 <close+0x70>
20097240:	0005883a 	mov	r2,zero
20097244:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
20097248:	e13fff17 	ldw	r4,-4(fp)
2009724c:	0097b280 	call	20097b28 <alt_release_fd>
    if (rval < 0)
20097250:	e0bffe17 	ldw	r2,-8(fp)
20097254:	1000070e 	bge	r2,zero,20097274 <close+0xa0>
    {
      ALT_ERRNO = -rval;
20097258:	00971840 	call	20097184 <alt_get_errno>
2009725c:	1007883a 	mov	r3,r2
20097260:	e0bffe17 	ldw	r2,-8(fp)
20097264:	0085c83a 	sub	r2,zero,r2
20097268:	18800015 	stw	r2,0(r3)
      return -1;
2009726c:	00bfffc4 	movi	r2,-1
20097270:	00000706 	br	20097290 <close+0xbc>
    }
    return 0;
20097274:	0005883a 	mov	r2,zero
20097278:	00000506 	br	20097290 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
2009727c:	00971840 	call	20097184 <alt_get_errno>
20097280:	1007883a 	mov	r3,r2
20097284:	00801444 	movi	r2,81
20097288:	18800015 	stw	r2,0(r3)
    return -1;
2009728c:	00bfffc4 	movi	r2,-1
  }
}
20097290:	e037883a 	mov	sp,fp
20097294:	dfc00117 	ldw	ra,4(sp)
20097298:	df000017 	ldw	fp,0(sp)
2009729c:	dec00204 	addi	sp,sp,8
200972a0:	f800283a 	ret

200972a4 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
200972a4:	defffb04 	addi	sp,sp,-20
200972a8:	df000415 	stw	fp,16(sp)
200972ac:	df000404 	addi	fp,sp,16
200972b0:	e13ffe15 	stw	r4,-8(fp)
200972b4:	e17fff15 	stw	r5,-4(fp)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 
200972b8:	e0fffe17 	ldw	r3,-8(fp)
200972bc:	e0bfff17 	ldw	r2,-4(fp)
200972c0:	1885883a 	add	r2,r3,r2
200972c4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
200972c8:	e0bffe17 	ldw	r2,-8(fp)
200972cc:	e0bffc15 	stw	r2,-16(fp)
200972d0:	00000506 	br	200972e8 <alt_dcache_flush+0x44>
  { 
    ALT_FLUSH_DATA(i); 
200972d4:	e0bffc17 	ldw	r2,-16(fp)
200972d8:	1000001b 	flushda	0(r2)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
200972dc:	e0bffc17 	ldw	r2,-16(fp)
200972e0:	10800804 	addi	r2,r2,32
200972e4:	e0bffc15 	stw	r2,-16(fp)
200972e8:	e0fffc17 	ldw	r3,-16(fp)
200972ec:	e0bffd17 	ldw	r2,-12(fp)
200972f0:	18bff836 	bltu	r3,r2,200972d4 <__flash_rwdata_start+0xffffac8c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_DCACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_DCACHE_LINE_SIZE - 1))
200972f4:	e0bffe17 	ldw	r2,-8(fp)
200972f8:	108007cc 	andi	r2,r2,31
200972fc:	10000226 	beq	r2,zero,20097308 <alt_dcache_flush+0x64>
  {
    ALT_FLUSH_DATA(i);
20097300:	e0bffc17 	ldw	r2,-16(fp)
20097304:	1000001b 	flushda	0(r2)
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
20097308:	e037883a 	mov	sp,fp
2009730c:	df000017 	ldw	fp,0(sp)
20097310:	dec00104 	addi	sp,sp,4
20097314:	f800283a 	ret

20097318 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
20097318:	defffc04 	addi	sp,sp,-16
2009731c:	df000315 	stw	fp,12(sp)
20097320:	df000304 	addi	fp,sp,12
20097324:	e13ffd15 	stw	r4,-12(fp)
20097328:	e17ffe15 	stw	r5,-8(fp)
2009732c:	e1bfff15 	stw	r6,-4(fp)
  return len;
20097330:	e0bfff17 	ldw	r2,-4(fp)
}
20097334:	e037883a 	mov	sp,fp
20097338:	df000017 	ldw	fp,0(sp)
2009733c:	dec00104 	addi	sp,sp,4
20097340:	f800283a 	ret

20097344 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
20097344:	defffd04 	addi	sp,sp,-12
20097348:	df000215 	stw	fp,8(sp)
2009734c:	df000204 	addi	fp,sp,8
20097350:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
20097354:	0001883a 	nop
20097358:	e0bfff17 	ldw	r2,-4(fp)
2009735c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
20097360:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
20097364:	10000226 	beq	r2,zero,20097370 <_exit+0x2c>
    ALT_SIM_FAIL();
20097368:	002af070 	cmpltui	zero,zero,43969
2009736c:	00000106 	br	20097374 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
20097370:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
20097374:	003fff06 	br	20097374 <__flash_rwdata_start+0xffffad2c>

20097378 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
20097378:	defffe04 	addi	sp,sp,-8
2009737c:	dfc00115 	stw	ra,4(sp)
20097380:	df000015 	stw	fp,0(sp)
20097384:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
20097388:	00800034 	movhi	r2,0
2009738c:	108a1e04 	addi	r2,r2,10360
20097390:	10800017 	ldw	r2,0(r2)
20097394:	10000526 	beq	r2,zero,200973ac <alt_get_errno+0x34>
20097398:	00800034 	movhi	r2,0
2009739c:	108a1e04 	addi	r2,r2,10360
200973a0:	10800017 	ldw	r2,0(r2)
200973a4:	103ee83a 	callr	r2
200973a8:	00000206 	br	200973b4 <alt_get_errno+0x3c>
200973ac:	00800034 	movhi	r2,0
200973b0:	108a2e04 	addi	r2,r2,10424
}
200973b4:	e037883a 	mov	sp,fp
200973b8:	dfc00117 	ldw	ra,4(sp)
200973bc:	df000017 	ldw	fp,0(sp)
200973c0:	dec00204 	addi	sp,sp,8
200973c4:	f800283a 	ret

200973c8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
200973c8:	defffb04 	addi	sp,sp,-20
200973cc:	dfc00415 	stw	ra,16(sp)
200973d0:	df000315 	stw	fp,12(sp)
200973d4:	df000304 	addi	fp,sp,12
200973d8:	e13ffe15 	stw	r4,-8(fp)
200973dc:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
200973e0:	e0bffe17 	ldw	r2,-8(fp)
200973e4:	10000616 	blt	r2,zero,20097400 <fstat+0x38>
200973e8:	e0bffe17 	ldw	r2,-8(fp)
200973ec:	10c00324 	muli	r3,r2,12
200973f0:	00800034 	movhi	r2,0
200973f4:	10858104 	addi	r2,r2,5636
200973f8:	1885883a 	add	r2,r3,r2
200973fc:	00000106 	br	20097404 <fstat+0x3c>
20097400:	0005883a 	mov	r2,zero
20097404:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
20097408:	e0bffd17 	ldw	r2,-12(fp)
2009740c:	10001026 	beq	r2,zero,20097450 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
20097410:	e0bffd17 	ldw	r2,-12(fp)
20097414:	10800017 	ldw	r2,0(r2)
20097418:	10800817 	ldw	r2,32(r2)
2009741c:	10000726 	beq	r2,zero,2009743c <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
20097420:	e0bffd17 	ldw	r2,-12(fp)
20097424:	10800017 	ldw	r2,0(r2)
20097428:	10800817 	ldw	r2,32(r2)
2009742c:	e13ffd17 	ldw	r4,-12(fp)
20097430:	e17fff17 	ldw	r5,-4(fp)
20097434:	103ee83a 	callr	r2
20097438:	00000a06 	br	20097464 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
2009743c:	e0bfff17 	ldw	r2,-4(fp)
20097440:	00c80004 	movi	r3,8192
20097444:	10c00115 	stw	r3,4(r2)
      return 0;
20097448:	0005883a 	mov	r2,zero
2009744c:	00000506 	br	20097464 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
20097450:	00973780 	call	20097378 <alt_get_errno>
20097454:	1007883a 	mov	r3,r2
20097458:	00801444 	movi	r2,81
2009745c:	18800015 	stw	r2,0(r3)
    return -1;
20097460:	00bfffc4 	movi	r2,-1
  }
}
20097464:	e037883a 	mov	sp,fp
20097468:	dfc00117 	ldw	ra,4(sp)
2009746c:	df000017 	ldw	fp,0(sp)
20097470:	dec00204 	addi	sp,sp,8
20097474:	f800283a 	ret

20097478 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
20097478:	defff004 	addi	sp,sp,-64
2009747c:	df000f15 	stw	fp,60(sp)
20097480:	df000f04 	addi	fp,sp,60
20097484:	e13ffd15 	stw	r4,-12(fp)
20097488:	e17ffe15 	stw	r5,-8(fp)
2009748c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
20097490:	00bffa84 	movi	r2,-22
20097494:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
20097498:	e0bffd17 	ldw	r2,-12(fp)
2009749c:	10800828 	cmpgeui	r2,r2,32
200974a0:	10005c1e 	bne	r2,zero,20097614 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200974a4:	0005303a 	rdctl	r2,status
200974a8:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200974ac:	e0fff317 	ldw	r3,-52(fp)
200974b0:	00bfff84 	movi	r2,-2
200974b4:	1884703a 	and	r2,r3,r2
200974b8:	1001703a 	wrctl	status,r2
  
  return context;
200974bc:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
200974c0:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
200974c4:	00800034 	movhi	r2,0
200974c8:	108bb704 	addi	r2,r2,11996
200974cc:	e0fffd17 	ldw	r3,-12(fp)
200974d0:	180690fa 	slli	r3,r3,3
200974d4:	10c5883a 	add	r2,r2,r3
200974d8:	e0ffff17 	ldw	r3,-4(fp)
200974dc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
200974e0:	00800034 	movhi	r2,0
200974e4:	108bb704 	addi	r2,r2,11996
200974e8:	e0fffd17 	ldw	r3,-12(fp)
200974ec:	180690fa 	slli	r3,r3,3
200974f0:	18c00104 	addi	r3,r3,4
200974f4:	10c5883a 	add	r2,r2,r3
200974f8:	e0fffe17 	ldw	r3,-8(fp)
200974fc:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
20097500:	e0bfff17 	ldw	r2,-4(fp)
20097504:	10001f26 	beq	r2,zero,20097584 <alt_irq_register+0x10c>
20097508:	e0bffd17 	ldw	r2,-12(fp)
2009750c:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20097510:	0005303a 	rdctl	r2,status
20097514:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20097518:	e0fff517 	ldw	r3,-44(fp)
2009751c:	00bfff84 	movi	r2,-2
20097520:	1884703a 	and	r2,r3,r2
20097524:	1001703a 	wrctl	status,r2
  
  return context;
20097528:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
2009752c:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
20097530:	e0bff417 	ldw	r2,-48(fp)
20097534:	00c00044 	movi	r3,1
20097538:	1884983a 	sll	r2,r3,r2
2009753c:	1007883a 	mov	r3,r2
20097540:	00800034 	movhi	r2,0
20097544:	108a3204 	addi	r2,r2,10440
20097548:	10800017 	ldw	r2,0(r2)
2009754c:	1886b03a 	or	r3,r3,r2
20097550:	00800034 	movhi	r2,0
20097554:	108a3204 	addi	r2,r2,10440
20097558:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
2009755c:	00800034 	movhi	r2,0
20097560:	108a3204 	addi	r2,r2,10440
20097564:	10800017 	ldw	r2,0(r2)
20097568:	100170fa 	wrctl	ienable,r2
2009756c:	e0bff617 	ldw	r2,-40(fp)
20097570:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20097574:	e0bff717 	ldw	r2,-36(fp)
20097578:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
2009757c:	0005883a 	mov	r2,zero
20097580:	00001f06 	br	20097600 <alt_irq_register+0x188>
20097584:	e0bffd17 	ldw	r2,-12(fp)
20097588:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2009758c:	0005303a 	rdctl	r2,status
20097590:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20097594:	e0fff917 	ldw	r3,-28(fp)
20097598:	00bfff84 	movi	r2,-2
2009759c:	1884703a 	and	r2,r3,r2
200975a0:	1001703a 	wrctl	status,r2
  
  return context;
200975a4:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
200975a8:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
200975ac:	e0bff817 	ldw	r2,-32(fp)
200975b0:	00c00044 	movi	r3,1
200975b4:	1884983a 	sll	r2,r3,r2
200975b8:	0084303a 	nor	r2,zero,r2
200975bc:	1007883a 	mov	r3,r2
200975c0:	00800034 	movhi	r2,0
200975c4:	108a3204 	addi	r2,r2,10440
200975c8:	10800017 	ldw	r2,0(r2)
200975cc:	1886703a 	and	r3,r3,r2
200975d0:	00800034 	movhi	r2,0
200975d4:	108a3204 	addi	r2,r2,10440
200975d8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
200975dc:	00800034 	movhi	r2,0
200975e0:	108a3204 	addi	r2,r2,10440
200975e4:	10800017 	ldw	r2,0(r2)
200975e8:	100170fa 	wrctl	ienable,r2
200975ec:	e0bffa17 	ldw	r2,-24(fp)
200975f0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200975f4:	e0bffb17 	ldw	r2,-20(fp)
200975f8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
200975fc:	0005883a 	mov	r2,zero
20097600:	e0bff115 	stw	r2,-60(fp)
20097604:	e0bff217 	ldw	r2,-56(fp)
20097608:	e0bffc15 	stw	r2,-16(fp)
2009760c:	e0bffc17 	ldw	r2,-16(fp)
20097610:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
20097614:	e0bff117 	ldw	r2,-60(fp)
}
20097618:	e037883a 	mov	sp,fp
2009761c:	df000017 	ldw	fp,0(sp)
20097620:	dec00104 	addi	sp,sp,4
20097624:	f800283a 	ret

20097628 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
20097628:	defffe04 	addi	sp,sp,-8
2009762c:	dfc00115 	stw	ra,4(sp)
20097630:	df000015 	stw	fp,0(sp)
20097634:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
20097638:	00800034 	movhi	r2,0
2009763c:	108a1e04 	addi	r2,r2,10360
20097640:	10800017 	ldw	r2,0(r2)
20097644:	10000526 	beq	r2,zero,2009765c <alt_get_errno+0x34>
20097648:	00800034 	movhi	r2,0
2009764c:	108a1e04 	addi	r2,r2,10360
20097650:	10800017 	ldw	r2,0(r2)
20097654:	103ee83a 	callr	r2
20097658:	00000206 	br	20097664 <alt_get_errno+0x3c>
2009765c:	00800034 	movhi	r2,0
20097660:	108a2e04 	addi	r2,r2,10424
}
20097664:	e037883a 	mov	sp,fp
20097668:	dfc00117 	ldw	ra,4(sp)
2009766c:	df000017 	ldw	fp,0(sp)
20097670:	dec00204 	addi	sp,sp,8
20097674:	f800283a 	ret

20097678 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
20097678:	deffed04 	addi	sp,sp,-76
2009767c:	dfc01215 	stw	ra,72(sp)
20097680:	df001115 	stw	fp,68(sp)
20097684:	df001104 	addi	fp,sp,68
20097688:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
2009768c:	e0bfff17 	ldw	r2,-4(fp)
20097690:	10000616 	blt	r2,zero,200976ac <isatty+0x34>
20097694:	e0bfff17 	ldw	r2,-4(fp)
20097698:	10c00324 	muli	r3,r2,12
2009769c:	00800034 	movhi	r2,0
200976a0:	10858104 	addi	r2,r2,5636
200976a4:	1885883a 	add	r2,r3,r2
200976a8:	00000106 	br	200976b0 <isatty+0x38>
200976ac:	0005883a 	mov	r2,zero
200976b0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
200976b4:	e0bfef17 	ldw	r2,-68(fp)
200976b8:	10000e26 	beq	r2,zero,200976f4 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
200976bc:	e0bfef17 	ldw	r2,-68(fp)
200976c0:	10800017 	ldw	r2,0(r2)
200976c4:	10800817 	ldw	r2,32(r2)
200976c8:	1000021e 	bne	r2,zero,200976d4 <isatty+0x5c>
    {
      return 1;
200976cc:	00800044 	movi	r2,1
200976d0:	00000d06 	br	20097708 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
200976d4:	e0bff004 	addi	r2,fp,-64
200976d8:	e13fff17 	ldw	r4,-4(fp)
200976dc:	100b883a 	mov	r5,r2
200976e0:	00973c80 	call	200973c8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
200976e4:	e0bff117 	ldw	r2,-60(fp)
200976e8:	10880020 	cmpeqi	r2,r2,8192
200976ec:	10803fcc 	andi	r2,r2,255
200976f0:	00000506 	br	20097708 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
200976f4:	00976280 	call	20097628 <alt_get_errno>
200976f8:	1007883a 	mov	r3,r2
200976fc:	00801444 	movi	r2,81
20097700:	18800015 	stw	r2,0(r3)
    return 0;
20097704:	0005883a 	mov	r2,zero
  }
}
20097708:	e037883a 	mov	sp,fp
2009770c:	dfc00117 	ldw	ra,4(sp)
20097710:	df000017 	ldw	fp,0(sp)
20097714:	dec00204 	addi	sp,sp,8
20097718:	f800283a 	ret

2009771c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
2009771c:	defffc04 	addi	sp,sp,-16
20097720:	df000315 	stw	fp,12(sp)
20097724:	df000304 	addi	fp,sp,12
20097728:	e13ffd15 	stw	r4,-12(fp)
2009772c:	e17ffe15 	stw	r5,-8(fp)
20097730:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
20097734:	e0fffe17 	ldw	r3,-8(fp)
20097738:	e0bffd17 	ldw	r2,-12(fp)
2009773c:	18800c26 	beq	r3,r2,20097770 <alt_load_section+0x54>
  {
    while( to != end )
20097740:	00000806 	br	20097764 <alt_load_section+0x48>
    {
      *to++ = *from++;
20097744:	e0bffe17 	ldw	r2,-8(fp)
20097748:	10c00104 	addi	r3,r2,4
2009774c:	e0fffe15 	stw	r3,-8(fp)
20097750:	e0fffd17 	ldw	r3,-12(fp)
20097754:	19000104 	addi	r4,r3,4
20097758:	e13ffd15 	stw	r4,-12(fp)
2009775c:	18c00017 	ldw	r3,0(r3)
20097760:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
20097764:	e0fffe17 	ldw	r3,-8(fp)
20097768:	e0bfff17 	ldw	r2,-4(fp)
2009776c:	18bff51e 	bne	r3,r2,20097744 <__flash_rwdata_start+0xffffb0fc>
    {
      *to++ = *from++;
    }
  }
}
20097770:	e037883a 	mov	sp,fp
20097774:	df000017 	ldw	fp,0(sp)
20097778:	dec00104 	addi	sp,sp,4
2009777c:	f800283a 	ret

20097780 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
20097780:	defffe04 	addi	sp,sp,-8
20097784:	dfc00115 	stw	ra,4(sp)
20097788:	df000015 	stw	fp,0(sp)
2009778c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
20097790:	010802b4 	movhi	r4,8202
20097794:	21319204 	addi	r4,r4,-14776
20097798:	01400034 	movhi	r5,0
2009779c:	29428e04 	addi	r5,r5,2616
200977a0:	01800034 	movhi	r6,0
200977a4:	318a2504 	addi	r6,r6,10388
200977a8:	009771c0 	call	2009771c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
200977ac:	01080234 	movhi	r4,8200
200977b0:	21000804 	addi	r4,r4,32
200977b4:	01480234 	movhi	r5,8200
200977b8:	29400804 	addi	r5,r5,32
200977bc:	01880234 	movhi	r6,8200
200977c0:	31809004 	addi	r6,r6,576
200977c4:	009771c0 	call	2009771c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
200977c8:	010802b4 	movhi	r4,8202
200977cc:	212f0404 	addi	r4,r4,-17392
200977d0:	01400034 	movhi	r5,0
200977d4:	29400004 	addi	r5,r5,0
200977d8:	01800034 	movhi	r6,0
200977dc:	31828e04 	addi	r6,r6,2616
200977e0:	009771c0 	call	2009771c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
200977e4:	009ac400 	call	2009ac40 <alt_dcache_flush_all>
  alt_icache_flush_all();
200977e8:	009aec00 	call	2009aec0 <alt_icache_flush_all>
}
200977ec:	e037883a 	mov	sp,fp
200977f0:	dfc00117 	ldw	ra,4(sp)
200977f4:	df000017 	ldw	fp,0(sp)
200977f8:	dec00204 	addi	sp,sp,8
200977fc:	f800283a 	ret

20097800 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
20097800:	defffe04 	addi	sp,sp,-8
20097804:	dfc00115 	stw	ra,4(sp)
20097808:	df000015 	stw	fp,0(sp)
2009780c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
20097810:	00800034 	movhi	r2,0
20097814:	108a1e04 	addi	r2,r2,10360
20097818:	10800017 	ldw	r2,0(r2)
2009781c:	10000526 	beq	r2,zero,20097834 <alt_get_errno+0x34>
20097820:	00800034 	movhi	r2,0
20097824:	108a1e04 	addi	r2,r2,10360
20097828:	10800017 	ldw	r2,0(r2)
2009782c:	103ee83a 	callr	r2
20097830:	00000206 	br	2009783c <alt_get_errno+0x3c>
20097834:	00800034 	movhi	r2,0
20097838:	108a2e04 	addi	r2,r2,10424
}
2009783c:	e037883a 	mov	sp,fp
20097840:	dfc00117 	ldw	ra,4(sp)
20097844:	df000017 	ldw	fp,0(sp)
20097848:	dec00204 	addi	sp,sp,8
2009784c:	f800283a 	ret

20097850 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
20097850:	defff904 	addi	sp,sp,-28
20097854:	dfc00615 	stw	ra,24(sp)
20097858:	df000515 	stw	fp,20(sp)
2009785c:	df000504 	addi	fp,sp,20
20097860:	e13ffd15 	stw	r4,-12(fp)
20097864:	e17ffe15 	stw	r5,-8(fp)
20097868:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
2009786c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
20097870:	e0bffd17 	ldw	r2,-12(fp)
20097874:	10000616 	blt	r2,zero,20097890 <lseek+0x40>
20097878:	e0bffd17 	ldw	r2,-12(fp)
2009787c:	10c00324 	muli	r3,r2,12
20097880:	00800034 	movhi	r2,0
20097884:	10858104 	addi	r2,r2,5636
20097888:	1885883a 	add	r2,r3,r2
2009788c:	00000106 	br	20097894 <lseek+0x44>
20097890:	0005883a 	mov	r2,zero
20097894:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
20097898:	e0bffc17 	ldw	r2,-16(fp)
2009789c:	10001026 	beq	r2,zero,200978e0 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
200978a0:	e0bffc17 	ldw	r2,-16(fp)
200978a4:	10800017 	ldw	r2,0(r2)
200978a8:	10800717 	ldw	r2,28(r2)
200978ac:	10000926 	beq	r2,zero,200978d4 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
200978b0:	e0bffc17 	ldw	r2,-16(fp)
200978b4:	10800017 	ldw	r2,0(r2)
200978b8:	10800717 	ldw	r2,28(r2)
200978bc:	e13ffc17 	ldw	r4,-16(fp)
200978c0:	e17ffe17 	ldw	r5,-8(fp)
200978c4:	e1bfff17 	ldw	r6,-4(fp)
200978c8:	103ee83a 	callr	r2
200978cc:	e0bffb15 	stw	r2,-20(fp)
200978d0:	00000506 	br	200978e8 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
200978d4:	00bfde84 	movi	r2,-134
200978d8:	e0bffb15 	stw	r2,-20(fp)
200978dc:	00000206 	br	200978e8 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
200978e0:	00bfebc4 	movi	r2,-81
200978e4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
200978e8:	e0bffb17 	ldw	r2,-20(fp)
200978ec:	1000070e 	bge	r2,zero,2009790c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
200978f0:	00978000 	call	20097800 <alt_get_errno>
200978f4:	1007883a 	mov	r3,r2
200978f8:	e0bffb17 	ldw	r2,-20(fp)
200978fc:	0085c83a 	sub	r2,zero,r2
20097900:	18800015 	stw	r2,0(r3)
    rc = -1;
20097904:	00bfffc4 	movi	r2,-1
20097908:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
2009790c:	e0bffb17 	ldw	r2,-20(fp)
}
20097910:	e037883a 	mov	sp,fp
20097914:	dfc00117 	ldw	ra,4(sp)
20097918:	df000017 	ldw	fp,0(sp)
2009791c:	dec00204 	addi	sp,sp,8
20097920:	f800283a 	ret

20097924 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
20097924:	defffd04 	addi	sp,sp,-12
20097928:	dfc00215 	stw	ra,8(sp)
2009792c:	df000115 	stw	fp,4(sp)
20097930:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
20097934:	0009883a 	mov	r4,zero
20097938:	0097ffc0 	call	20097ffc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
2009793c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
20097940:	00980300 	call	20098030 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
20097944:	01000034 	movhi	r4,0
20097948:	2101ff04 	addi	r4,r4,2044
2009794c:	01400034 	movhi	r5,0
20097950:	2941ff04 	addi	r5,r5,2044
20097954:	01800034 	movhi	r6,0
20097958:	3181ff04 	addi	r6,r6,2044
2009795c:	009b2800 	call	2009b280 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
20097960:	009ad780 	call	2009ad78 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
20097964:	010802b4 	movhi	r4,8202
20097968:	212b7504 	addi	r4,r4,-21036
2009796c:	009bae80 	call	2009bae8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
20097970:	d1202217 	ldw	r4,-32632(gp)
20097974:	d0e02317 	ldw	r3,-32628(gp)
20097978:	d0a02417 	ldw	r2,-32624(gp)
2009797c:	180b883a 	mov	r5,r3
20097980:	100d883a 	mov	r6,r2
20097984:	00864980 	call	20086498 <main>
20097988:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
2009798c:	01000044 	movi	r4,1
20097990:	00971d40 	call	200971d4 <close>
  exit (result);
20097994:	e13fff17 	ldw	r4,-4(fp)
20097998:	008978c0 	call	2008978c <exit>

2009799c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
2009799c:	defffe04 	addi	sp,sp,-8
200979a0:	df000115 	stw	fp,4(sp)
200979a4:	df000104 	addi	fp,sp,4
200979a8:	e13fff15 	stw	r4,-4(fp)
}
200979ac:	e037883a 	mov	sp,fp
200979b0:	df000017 	ldw	fp,0(sp)
200979b4:	dec00104 	addi	sp,sp,4
200979b8:	f800283a 	ret

200979bc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
200979bc:	defffe04 	addi	sp,sp,-8
200979c0:	df000115 	stw	fp,4(sp)
200979c4:	df000104 	addi	fp,sp,4
200979c8:	e13fff15 	stw	r4,-4(fp)
}
200979cc:	e037883a 	mov	sp,fp
200979d0:	df000017 	ldw	fp,0(sp)
200979d4:	dec00104 	addi	sp,sp,4
200979d8:	f800283a 	ret

200979dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
200979dc:	defffe04 	addi	sp,sp,-8
200979e0:	dfc00115 	stw	ra,4(sp)
200979e4:	df000015 	stw	fp,0(sp)
200979e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
200979ec:	00800034 	movhi	r2,0
200979f0:	108a1e04 	addi	r2,r2,10360
200979f4:	10800017 	ldw	r2,0(r2)
200979f8:	10000526 	beq	r2,zero,20097a10 <alt_get_errno+0x34>
200979fc:	00800034 	movhi	r2,0
20097a00:	108a1e04 	addi	r2,r2,10360
20097a04:	10800017 	ldw	r2,0(r2)
20097a08:	103ee83a 	callr	r2
20097a0c:	00000206 	br	20097a18 <alt_get_errno+0x3c>
20097a10:	00800034 	movhi	r2,0
20097a14:	108a2e04 	addi	r2,r2,10424
}
20097a18:	e037883a 	mov	sp,fp
20097a1c:	dfc00117 	ldw	ra,4(sp)
20097a20:	df000017 	ldw	fp,0(sp)
20097a24:	dec00204 	addi	sp,sp,8
20097a28:	f800283a 	ret

20097a2c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
20097a2c:	defff904 	addi	sp,sp,-28
20097a30:	dfc00615 	stw	ra,24(sp)
20097a34:	df000515 	stw	fp,20(sp)
20097a38:	df000504 	addi	fp,sp,20
20097a3c:	e13ffd15 	stw	r4,-12(fp)
20097a40:	e17ffe15 	stw	r5,-8(fp)
20097a44:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
20097a48:	e0bffd17 	ldw	r2,-12(fp)
20097a4c:	10000616 	blt	r2,zero,20097a68 <read+0x3c>
20097a50:	e0bffd17 	ldw	r2,-12(fp)
20097a54:	10c00324 	muli	r3,r2,12
20097a58:	00800034 	movhi	r2,0
20097a5c:	10858104 	addi	r2,r2,5636
20097a60:	1885883a 	add	r2,r3,r2
20097a64:	00000106 	br	20097a6c <read+0x40>
20097a68:	0005883a 	mov	r2,zero
20097a6c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
20097a70:	e0bffb17 	ldw	r2,-20(fp)
20097a74:	10002226 	beq	r2,zero,20097b00 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
20097a78:	e0bffb17 	ldw	r2,-20(fp)
20097a7c:	10800217 	ldw	r2,8(r2)
20097a80:	108000cc 	andi	r2,r2,3
20097a84:	10800060 	cmpeqi	r2,r2,1
20097a88:	1000181e 	bne	r2,zero,20097aec <read+0xc0>
        (fd->dev->read))
20097a8c:	e0bffb17 	ldw	r2,-20(fp)
20097a90:	10800017 	ldw	r2,0(r2)
20097a94:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
20097a98:	10001426 	beq	r2,zero,20097aec <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
20097a9c:	e0bffb17 	ldw	r2,-20(fp)
20097aa0:	10800017 	ldw	r2,0(r2)
20097aa4:	10800517 	ldw	r2,20(r2)
20097aa8:	e0ffff17 	ldw	r3,-4(fp)
20097aac:	e13ffb17 	ldw	r4,-20(fp)
20097ab0:	e17ffe17 	ldw	r5,-8(fp)
20097ab4:	180d883a 	mov	r6,r3
20097ab8:	103ee83a 	callr	r2
20097abc:	e0bffc15 	stw	r2,-16(fp)
20097ac0:	e0bffc17 	ldw	r2,-16(fp)
20097ac4:	1000070e 	bge	r2,zero,20097ae4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
20097ac8:	00979dc0 	call	200979dc <alt_get_errno>
20097acc:	1007883a 	mov	r3,r2
20097ad0:	e0bffc17 	ldw	r2,-16(fp)
20097ad4:	0085c83a 	sub	r2,zero,r2
20097ad8:	18800015 	stw	r2,0(r3)
          return -1;
20097adc:	00bfffc4 	movi	r2,-1
20097ae0:	00000c06 	br	20097b14 <read+0xe8>
        }
        return rval;
20097ae4:	e0bffc17 	ldw	r2,-16(fp)
20097ae8:	00000a06 	br	20097b14 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
20097aec:	00979dc0 	call	200979dc <alt_get_errno>
20097af0:	1007883a 	mov	r3,r2
20097af4:	00800344 	movi	r2,13
20097af8:	18800015 	stw	r2,0(r3)
20097afc:	00000406 	br	20097b10 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
20097b00:	00979dc0 	call	200979dc <alt_get_errno>
20097b04:	1007883a 	mov	r3,r2
20097b08:	00801444 	movi	r2,81
20097b0c:	18800015 	stw	r2,0(r3)
  }
  return -1;
20097b10:	00bfffc4 	movi	r2,-1
}
20097b14:	e037883a 	mov	sp,fp
20097b18:	dfc00117 	ldw	ra,4(sp)
20097b1c:	df000017 	ldw	fp,0(sp)
20097b20:	dec00204 	addi	sp,sp,8
20097b24:	f800283a 	ret

20097b28 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
20097b28:	defffe04 	addi	sp,sp,-8
20097b2c:	df000115 	stw	fp,4(sp)
20097b30:	df000104 	addi	fp,sp,4
20097b34:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
20097b38:	e0bfff17 	ldw	r2,-4(fp)
20097b3c:	108000d0 	cmplti	r2,r2,3
20097b40:	10000d1e 	bne	r2,zero,20097b78 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
20097b44:	00800034 	movhi	r2,0
20097b48:	10858104 	addi	r2,r2,5636
20097b4c:	e0ffff17 	ldw	r3,-4(fp)
20097b50:	18c00324 	muli	r3,r3,12
20097b54:	18c00204 	addi	r3,r3,8
20097b58:	10c5883a 	add	r2,r2,r3
20097b5c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
20097b60:	00800034 	movhi	r2,0
20097b64:	10858104 	addi	r2,r2,5636
20097b68:	e0ffff17 	ldw	r3,-4(fp)
20097b6c:	18c00324 	muli	r3,r3,12
20097b70:	10c5883a 	add	r2,r2,r3
20097b74:	10000015 	stw	zero,0(r2)
  }
}
20097b78:	e037883a 	mov	sp,fp
20097b7c:	df000017 	ldw	fp,0(sp)
20097b80:	dec00104 	addi	sp,sp,4
20097b84:	f800283a 	ret

20097b88 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
20097b88:	defff904 	addi	sp,sp,-28
20097b8c:	df000615 	stw	fp,24(sp)
20097b90:	df000604 	addi	fp,sp,24
20097b94:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20097b98:	0005303a 	rdctl	r2,status
20097b9c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20097ba0:	e0fffc17 	ldw	r3,-16(fp)
20097ba4:	00bfff84 	movi	r2,-2
20097ba8:	1884703a 	and	r2,r3,r2
20097bac:	1001703a 	wrctl	status,r2
  
  return context;
20097bb0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
20097bb4:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
20097bb8:	d0a00f17 	ldw	r2,-32708(gp)
20097bbc:	10c000c4 	addi	r3,r2,3
20097bc0:	00bfff04 	movi	r2,-4
20097bc4:	1884703a 	and	r2,r3,r2
20097bc8:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
20097bcc:	d0e00f17 	ldw	r3,-32708(gp)
20097bd0:	e0bfff17 	ldw	r2,-4(fp)
20097bd4:	1887883a 	add	r3,r3,r2
20097bd8:	00880034 	movhi	r2,8192
20097bdc:	10800004 	addi	r2,r2,0
20097be0:	10c0062e 	bgeu	r2,r3,20097bfc <sbrk+0x74>
20097be4:	e0bffa17 	ldw	r2,-24(fp)
20097be8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20097bec:	e0bffd17 	ldw	r2,-12(fp)
20097bf0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
20097bf4:	00bfffc4 	movi	r2,-1
20097bf8:	00000b06 	br	20097c28 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
20097bfc:	d0a00f17 	ldw	r2,-32708(gp)
20097c00:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
20097c04:	d0e00f17 	ldw	r3,-32708(gp)
20097c08:	e0bfff17 	ldw	r2,-4(fp)
20097c0c:	1885883a 	add	r2,r3,r2
20097c10:	d0a00f15 	stw	r2,-32708(gp)
20097c14:	e0bffa17 	ldw	r2,-24(fp)
20097c18:	e0bffe15 	stw	r2,-8(fp)
20097c1c:	e0bffe17 	ldw	r2,-8(fp)
20097c20:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
20097c24:	e0bffb17 	ldw	r2,-20(fp)
} 
20097c28:	e037883a 	mov	sp,fp
20097c2c:	df000017 	ldw	fp,0(sp)
20097c30:	dec00104 	addi	sp,sp,4
20097c34:	f800283a 	ret

20097c38 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
20097c38:	defffa04 	addi	sp,sp,-24
20097c3c:	df000515 	stw	fp,20(sp)
20097c40:	df000504 	addi	fp,sp,20
20097c44:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20097c48:	0005303a 	rdctl	r2,status
20097c4c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20097c50:	e0fffc17 	ldw	r3,-16(fp)
20097c54:	00bfff84 	movi	r2,-2
20097c58:	1884703a 	and	r2,r3,r2
20097c5c:	1001703a 	wrctl	status,r2
  
  return context;
20097c60:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
20097c64:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
20097c68:	e0bfff17 	ldw	r2,-4(fp)
20097c6c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
20097c70:	e0bffd17 	ldw	r2,-12(fp)
20097c74:	10800017 	ldw	r2,0(r2)
20097c78:	e0fffd17 	ldw	r3,-12(fp)
20097c7c:	18c00117 	ldw	r3,4(r3)
20097c80:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
20097c84:	e0bffd17 	ldw	r2,-12(fp)
20097c88:	10800117 	ldw	r2,4(r2)
20097c8c:	e0fffd17 	ldw	r3,-12(fp)
20097c90:	18c00017 	ldw	r3,0(r3)
20097c94:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
20097c98:	e0bffd17 	ldw	r2,-12(fp)
20097c9c:	e0fffd17 	ldw	r3,-12(fp)
20097ca0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
20097ca4:	e0bffd17 	ldw	r2,-12(fp)
20097ca8:	e0fffd17 	ldw	r3,-12(fp)
20097cac:	10c00015 	stw	r3,0(r2)
20097cb0:	e0bffb17 	ldw	r2,-20(fp)
20097cb4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20097cb8:	e0bffe17 	ldw	r2,-8(fp)
20097cbc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
20097cc0:	e037883a 	mov	sp,fp
20097cc4:	df000017 	ldw	fp,0(sp)
20097cc8:	dec00104 	addi	sp,sp,4
20097ccc:	f800283a 	ret

20097cd0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
20097cd0:	defffb04 	addi	sp,sp,-20
20097cd4:	dfc00415 	stw	ra,16(sp)
20097cd8:	df000315 	stw	fp,12(sp)
20097cdc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
20097ce0:	d0a01017 	ldw	r2,-32704(gp)
20097ce4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
20097ce8:	d0a02617 	ldw	r2,-32616(gp)
20097cec:	10800044 	addi	r2,r2,1
20097cf0:	d0a02615 	stw	r2,-32616(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
20097cf4:	00002e06 	br	20097db0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
20097cf8:	e0bffd17 	ldw	r2,-12(fp)
20097cfc:	10800017 	ldw	r2,0(r2)
20097d00:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
20097d04:	e0bffd17 	ldw	r2,-12(fp)
20097d08:	10800403 	ldbu	r2,16(r2)
20097d0c:	10803fcc 	andi	r2,r2,255
20097d10:	10000426 	beq	r2,zero,20097d24 <alt_tick+0x54>
20097d14:	d0a02617 	ldw	r2,-32616(gp)
20097d18:	1000021e 	bne	r2,zero,20097d24 <alt_tick+0x54>
    {
      alarm->rollover = 0;
20097d1c:	e0bffd17 	ldw	r2,-12(fp)
20097d20:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
20097d24:	e0bffd17 	ldw	r2,-12(fp)
20097d28:	10800217 	ldw	r2,8(r2)
20097d2c:	d0e02617 	ldw	r3,-32616(gp)
20097d30:	18801d36 	bltu	r3,r2,20097da8 <alt_tick+0xd8>
20097d34:	e0bffd17 	ldw	r2,-12(fp)
20097d38:	10800403 	ldbu	r2,16(r2)
20097d3c:	10803fcc 	andi	r2,r2,255
20097d40:	1000191e 	bne	r2,zero,20097da8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
20097d44:	e0bffd17 	ldw	r2,-12(fp)
20097d48:	10800317 	ldw	r2,12(r2)
20097d4c:	e0fffd17 	ldw	r3,-12(fp)
20097d50:	18c00517 	ldw	r3,20(r3)
20097d54:	1809883a 	mov	r4,r3
20097d58:	103ee83a 	callr	r2
20097d5c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
20097d60:	e0bfff17 	ldw	r2,-4(fp)
20097d64:	1000031e 	bne	r2,zero,20097d74 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
20097d68:	e13ffd17 	ldw	r4,-12(fp)
20097d6c:	0097c380 	call	20097c38 <alt_alarm_stop>
20097d70:	00000d06 	br	20097da8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
20097d74:	e0bffd17 	ldw	r2,-12(fp)
20097d78:	10c00217 	ldw	r3,8(r2)
20097d7c:	e0bfff17 	ldw	r2,-4(fp)
20097d80:	1887883a 	add	r3,r3,r2
20097d84:	e0bffd17 	ldw	r2,-12(fp)
20097d88:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
20097d8c:	e0bffd17 	ldw	r2,-12(fp)
20097d90:	10c00217 	ldw	r3,8(r2)
20097d94:	d0a02617 	ldw	r2,-32616(gp)
20097d98:	1880032e 	bgeu	r3,r2,20097da8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
20097d9c:	e0bffd17 	ldw	r2,-12(fp)
20097da0:	00c00044 	movi	r3,1
20097da4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
20097da8:	e0bffe17 	ldw	r2,-8(fp)
20097dac:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
20097db0:	e0fffd17 	ldw	r3,-12(fp)
20097db4:	d0a01004 	addi	r2,gp,-32704
20097db8:	18bfcf1e 	bne	r3,r2,20097cf8 <__flash_rwdata_start+0xffffb6b0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
20097dbc:	0001883a 	nop
}
20097dc0:	e037883a 	mov	sp,fp
20097dc4:	dfc00117 	ldw	ra,4(sp)
20097dc8:	df000017 	ldw	fp,0(sp)
20097dcc:	dec00204 	addi	sp,sp,8
20097dd0:	f800283a 	ret

20097dd4 <alt_uncached_malloc>:
 * Return pointer to the block of memory or NULL if can't allocate it.
 */

volatile void* 
alt_uncached_malloc(size_t size)
{
20097dd4:	defffa04 	addi	sp,sp,-24
20097dd8:	dfc00515 	stw	ra,20(sp)
20097ddc:	df000415 	stw	fp,16(sp)
20097de0:	df000404 	addi	fp,sp,16
20097de4:	e13fff15 	stw	r4,-4(fp)

  void* ptr;

  /* Round up size to an integer number of data cache lines. Required to guarantee that
   * cacheable and non-cacheable data won't be mixed on the same cache line. */ 
  const size_t num_lines = (size + ALT_CPU_DCACHE_LINE_SIZE - 1) / ALT_CPU_DCACHE_LINE_SIZE;
20097de8:	e0bfff17 	ldw	r2,-4(fp)
20097dec:	108007c4 	addi	r2,r2,31
20097df0:	1004d17a 	srli	r2,r2,5
20097df4:	e0bffc15 	stw	r2,-16(fp)
  const size_t aligned_size = num_lines * ALT_CPU_DCACHE_LINE_SIZE;
20097df8:	e0bffc17 	ldw	r2,-16(fp)
20097dfc:	1004917a 	slli	r2,r2,5
20097e00:	e0bffd15 	stw	r2,-12(fp)

  /* Use memalign() Newlib routine to allocate starting on a data cache aligned address.
   * Required to guarantee that cacheable and non-cacheable data won't be mixed on the
   * same cache line. */ 
  ptr = memalign(ALT_CPU_DCACHE_LINE_SIZE, aligned_size);
20097e04:	01000804 	movi	r4,32
20097e08:	e17ffd17 	ldw	r5,-12(fp)
20097e0c:	00897c40 	call	200897c4 <memalign>
20097e10:	e0bffe15 	stw	r2,-8(fp)

  if (ptr == NULL) {
20097e14:	e0bffe17 	ldw	r2,-8(fp)
20097e18:	1000021e 	bne	r2,zero,20097e24 <alt_uncached_malloc+0x50>
    return NULL; /* Out of memory */
20097e1c:	0005883a 	mov	r2,zero
20097e20:	00000506 	br	20097e38 <alt_uncached_malloc+0x64>
  }

  /* Ensure that the memory region isn't in the data cache. */
  alt_dcache_flush(ptr, aligned_size);
20097e24:	e13ffe17 	ldw	r4,-8(fp)
20097e28:	e17ffd17 	ldw	r5,-12(fp)
20097e2c:	00972a40 	call	200972a4 <alt_dcache_flush>

  return (volatile void*) (((alt_u32)ptr) | ALT_CPU_DCACHE_BYPASS_MASK);
20097e30:	e0bffe17 	ldw	r2,-8(fp)
20097e34:	10a00034 	orhi	r2,r2,32768
#endif /* No address mask option enabled. */
#else /* No data cache */
  /* Just use regular malloc. */
  return malloc(size);
#endif /* No data cache */
}
20097e38:	e037883a 	mov	sp,fp
20097e3c:	dfc00117 	ldw	ra,4(sp)
20097e40:	df000017 	ldw	fp,0(sp)
20097e44:	dec00204 	addi	sp,sp,8
20097e48:	f800283a 	ret

20097e4c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
20097e4c:	defffd04 	addi	sp,sp,-12
20097e50:	dfc00215 	stw	ra,8(sp)
20097e54:	df000115 	stw	fp,4(sp)
20097e58:	df000104 	addi	fp,sp,4
20097e5c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
20097e60:	e13fff17 	ldw	r4,-4(fp)
20097e64:	009aae80 	call	2009aae8 <alt_busy_sleep>
}
20097e68:	e037883a 	mov	sp,fp
20097e6c:	dfc00117 	ldw	ra,4(sp)
20097e70:	df000017 	ldw	fp,0(sp)
20097e74:	dec00204 	addi	sp,sp,8
20097e78:	f800283a 	ret

20097e7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
20097e7c:	defffe04 	addi	sp,sp,-8
20097e80:	dfc00115 	stw	ra,4(sp)
20097e84:	df000015 	stw	fp,0(sp)
20097e88:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
20097e8c:	00800034 	movhi	r2,0
20097e90:	108a1e04 	addi	r2,r2,10360
20097e94:	10800017 	ldw	r2,0(r2)
20097e98:	10000526 	beq	r2,zero,20097eb0 <alt_get_errno+0x34>
20097e9c:	00800034 	movhi	r2,0
20097ea0:	108a1e04 	addi	r2,r2,10360
20097ea4:	10800017 	ldw	r2,0(r2)
20097ea8:	103ee83a 	callr	r2
20097eac:	00000206 	br	20097eb8 <alt_get_errno+0x3c>
20097eb0:	00800034 	movhi	r2,0
20097eb4:	108a2e04 	addi	r2,r2,10424
}
20097eb8:	e037883a 	mov	sp,fp
20097ebc:	dfc00117 	ldw	ra,4(sp)
20097ec0:	df000017 	ldw	fp,0(sp)
20097ec4:	dec00204 	addi	sp,sp,8
20097ec8:	f800283a 	ret

20097ecc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
20097ecc:	defff904 	addi	sp,sp,-28
20097ed0:	dfc00615 	stw	ra,24(sp)
20097ed4:	df000515 	stw	fp,20(sp)
20097ed8:	df000504 	addi	fp,sp,20
20097edc:	e13ffd15 	stw	r4,-12(fp)
20097ee0:	e17ffe15 	stw	r5,-8(fp)
20097ee4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
20097ee8:	e0bffd17 	ldw	r2,-12(fp)
20097eec:	10000616 	blt	r2,zero,20097f08 <write+0x3c>
20097ef0:	e0bffd17 	ldw	r2,-12(fp)
20097ef4:	10c00324 	muli	r3,r2,12
20097ef8:	00800034 	movhi	r2,0
20097efc:	10858104 	addi	r2,r2,5636
20097f00:	1885883a 	add	r2,r3,r2
20097f04:	00000106 	br	20097f0c <write+0x40>
20097f08:	0005883a 	mov	r2,zero
20097f0c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
20097f10:	e0bffb17 	ldw	r2,-20(fp)
20097f14:	10002126 	beq	r2,zero,20097f9c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
20097f18:	e0bffb17 	ldw	r2,-20(fp)
20097f1c:	10800217 	ldw	r2,8(r2)
20097f20:	108000cc 	andi	r2,r2,3
20097f24:	10001826 	beq	r2,zero,20097f88 <write+0xbc>
20097f28:	e0bffb17 	ldw	r2,-20(fp)
20097f2c:	10800017 	ldw	r2,0(r2)
20097f30:	10800617 	ldw	r2,24(r2)
20097f34:	10001426 	beq	r2,zero,20097f88 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
20097f38:	e0bffb17 	ldw	r2,-20(fp)
20097f3c:	10800017 	ldw	r2,0(r2)
20097f40:	10800617 	ldw	r2,24(r2)
20097f44:	e0ffff17 	ldw	r3,-4(fp)
20097f48:	e13ffb17 	ldw	r4,-20(fp)
20097f4c:	e17ffe17 	ldw	r5,-8(fp)
20097f50:	180d883a 	mov	r6,r3
20097f54:	103ee83a 	callr	r2
20097f58:	e0bffc15 	stw	r2,-16(fp)
20097f5c:	e0bffc17 	ldw	r2,-16(fp)
20097f60:	1000070e 	bge	r2,zero,20097f80 <write+0xb4>
      {
        ALT_ERRNO = -rval;
20097f64:	0097e7c0 	call	20097e7c <alt_get_errno>
20097f68:	1007883a 	mov	r3,r2
20097f6c:	e0bffc17 	ldw	r2,-16(fp)
20097f70:	0085c83a 	sub	r2,zero,r2
20097f74:	18800015 	stw	r2,0(r3)
        return -1;
20097f78:	00bfffc4 	movi	r2,-1
20097f7c:	00000c06 	br	20097fb0 <write+0xe4>
      }
      return rval;
20097f80:	e0bffc17 	ldw	r2,-16(fp)
20097f84:	00000a06 	br	20097fb0 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
20097f88:	0097e7c0 	call	20097e7c <alt_get_errno>
20097f8c:	1007883a 	mov	r3,r2
20097f90:	00800344 	movi	r2,13
20097f94:	18800015 	stw	r2,0(r3)
20097f98:	00000406 	br	20097fac <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
20097f9c:	0097e7c0 	call	20097e7c <alt_get_errno>
20097fa0:	1007883a 	mov	r3,r2
20097fa4:	00801444 	movi	r2,81
20097fa8:	18800015 	stw	r2,0(r3)
  }
  return -1;
20097fac:	00bfffc4 	movi	r2,-1
}
20097fb0:	e037883a 	mov	sp,fp
20097fb4:	dfc00117 	ldw	ra,4(sp)
20097fb8:	df000017 	ldw	fp,0(sp)
20097fbc:	dec00204 	addi	sp,sp,8
20097fc0:	f800283a 	ret

20097fc4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
20097fc4:	defffd04 	addi	sp,sp,-12
20097fc8:	dfc00215 	stw	ra,8(sp)
20097fcc:	df000115 	stw	fp,4(sp)
20097fd0:	df000104 	addi	fp,sp,4
20097fd4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
20097fd8:	e13fff17 	ldw	r4,-4(fp)
20097fdc:	01400034 	movhi	r5,0
20097fe0:	294a1b04 	addi	r5,r5,10348
20097fe4:	009acd40 	call	2009acd4 <alt_dev_llist_insert>
}
20097fe8:	e037883a 	mov	sp,fp
20097fec:	dfc00117 	ldw	ra,4(sp)
20097ff0:	df000017 	ldw	fp,0(sp)
20097ff4:	dec00204 	addi	sp,sp,8
20097ff8:	f800283a 	ret

20097ffc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
20097ffc:	defffd04 	addi	sp,sp,-12
20098000:	dfc00215 	stw	ra,8(sp)
20098004:	df000115 	stw	fp,4(sp)
20098008:	df000104 	addi	fp,sp,4
2009800c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
20098010:	009b7d80 	call	2009b7d8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
20098014:	00800044 	movi	r2,1
20098018:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
2009801c:	e037883a 	mov	sp,fp
20098020:	dfc00117 	ldw	ra,4(sp)
20098024:	df000017 	ldw	fp,0(sp)
20098028:	dec00204 	addi	sp,sp,8
2009802c:	f800283a 	ret

20098030 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
20098030:	defffe04 	addi	sp,sp,-8
20098034:	dfc00115 	stw	ra,4(sp)
20098038:	df000015 	stw	fp,0(sp)
2009803c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
20098040:	00800034 	movhi	r2,0
20098044:	108a3804 	addi	r2,r2,10464
20098048:	00c80434 	movhi	r3,8208
2009804c:	18c52804 	addi	r3,r3,5280
20098050:	10c00015 	stw	r3,0(r2)
20098054:	00800034 	movhi	r2,0
20098058:	108a3904 	addi	r2,r2,10468
2009805c:	00c1dcf4 	movhi	r3,1907
20098060:	18d65004 	addi	r3,r3,22848
20098064:	10c00015 	stw	r3,0(r2)
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
20098068:	01000034 	movhi	r4,0
2009806c:	2105eb04 	addi	r4,r4,6060
20098070:	000b883a 	mov	r5,zero
20098074:	01800044 	movi	r6,1
20098078:	00982300 	call	20098230 <altera_avalon_jtag_uart_init>
2009807c:	01000034 	movhi	r4,0
20098080:	2105e104 	addi	r4,r4,6020
20098084:	0097fc40 	call	20097fc4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
20098088:	0001883a 	nop
    ALTERA_MSGDMA_INIT ( VIDEO_DMA, video_dma);
2009808c:	00800034 	movhi	r2,0
20098090:	1089f904 	addi	r2,r2,10212
20098094:	10c00717 	ldw	r3,28(r2)
20098098:	00800034 	movhi	r2,0
2009809c:	1089f904 	addi	r2,r2,10212
200980a0:	10800817 	ldw	r2,32(r2)
200980a4:	01000034 	movhi	r4,0
200980a8:	2109f904 	addi	r4,r4,10212
200980ac:	180b883a 	mov	r5,r3
200980b0:	100d883a 	mov	r6,r2
200980b4:	009a6f80 	call	2009a6f8 <alt_msgdma_init>
}
200980b8:	e037883a 	mov	sp,fp
200980bc:	dfc00117 	ldw	ra,4(sp)
200980c0:	df000017 	ldw	fp,0(sp)
200980c4:	dec00204 	addi	sp,sp,8
200980c8:	f800283a 	ret

200980cc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
200980cc:	defffa04 	addi	sp,sp,-24
200980d0:	dfc00515 	stw	ra,20(sp)
200980d4:	df000415 	stw	fp,16(sp)
200980d8:	df000404 	addi	fp,sp,16
200980dc:	e13ffd15 	stw	r4,-12(fp)
200980e0:	e17ffe15 	stw	r5,-8(fp)
200980e4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
200980e8:	e0bffd17 	ldw	r2,-12(fp)
200980ec:	10800017 	ldw	r2,0(r2)
200980f0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
200980f4:	e0bffc17 	ldw	r2,-16(fp)
200980f8:	10c00a04 	addi	r3,r2,40
200980fc:	e0bffd17 	ldw	r2,-12(fp)
20098100:	10800217 	ldw	r2,8(r2)
20098104:	1809883a 	mov	r4,r3
20098108:	e17ffe17 	ldw	r5,-8(fp)
2009810c:	e1bfff17 	ldw	r6,-4(fp)
20098110:	100f883a 	mov	r7,r2
20098114:	00986f40 	call	200986f4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
20098118:	e037883a 	mov	sp,fp
2009811c:	dfc00117 	ldw	ra,4(sp)
20098120:	df000017 	ldw	fp,0(sp)
20098124:	dec00204 	addi	sp,sp,8
20098128:	f800283a 	ret

2009812c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
2009812c:	defffa04 	addi	sp,sp,-24
20098130:	dfc00515 	stw	ra,20(sp)
20098134:	df000415 	stw	fp,16(sp)
20098138:	df000404 	addi	fp,sp,16
2009813c:	e13ffd15 	stw	r4,-12(fp)
20098140:	e17ffe15 	stw	r5,-8(fp)
20098144:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
20098148:	e0bffd17 	ldw	r2,-12(fp)
2009814c:	10800017 	ldw	r2,0(r2)
20098150:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
20098154:	e0bffc17 	ldw	r2,-16(fp)
20098158:	10c00a04 	addi	r3,r2,40
2009815c:	e0bffd17 	ldw	r2,-12(fp)
20098160:	10800217 	ldw	r2,8(r2)
20098164:	1809883a 	mov	r4,r3
20098168:	e17ffe17 	ldw	r5,-8(fp)
2009816c:	e1bfff17 	ldw	r6,-4(fp)
20098170:	100f883a 	mov	r7,r2
20098174:	00989000 	call	20098900 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
20098178:	e037883a 	mov	sp,fp
2009817c:	dfc00117 	ldw	ra,4(sp)
20098180:	df000017 	ldw	fp,0(sp)
20098184:	dec00204 	addi	sp,sp,8
20098188:	f800283a 	ret

2009818c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
2009818c:	defffc04 	addi	sp,sp,-16
20098190:	dfc00315 	stw	ra,12(sp)
20098194:	df000215 	stw	fp,8(sp)
20098198:	df000204 	addi	fp,sp,8
2009819c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
200981a0:	e0bfff17 	ldw	r2,-4(fp)
200981a4:	10800017 	ldw	r2,0(r2)
200981a8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
200981ac:	e0bffe17 	ldw	r2,-8(fp)
200981b0:	10c00a04 	addi	r3,r2,40
200981b4:	e0bfff17 	ldw	r2,-4(fp)
200981b8:	10800217 	ldw	r2,8(r2)
200981bc:	1809883a 	mov	r4,r3
200981c0:	100b883a 	mov	r5,r2
200981c4:	00985a00 	call	200985a0 <altera_avalon_jtag_uart_close>
}
200981c8:	e037883a 	mov	sp,fp
200981cc:	dfc00117 	ldw	ra,4(sp)
200981d0:	df000017 	ldw	fp,0(sp)
200981d4:	dec00204 	addi	sp,sp,8
200981d8:	f800283a 	ret

200981dc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
200981dc:	defffa04 	addi	sp,sp,-24
200981e0:	dfc00515 	stw	ra,20(sp)
200981e4:	df000415 	stw	fp,16(sp)
200981e8:	df000404 	addi	fp,sp,16
200981ec:	e13ffd15 	stw	r4,-12(fp)
200981f0:	e17ffe15 	stw	r5,-8(fp)
200981f4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
200981f8:	e0bffd17 	ldw	r2,-12(fp)
200981fc:	10800017 	ldw	r2,0(r2)
20098200:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
20098204:	e0bffc17 	ldw	r2,-16(fp)
20098208:	10800a04 	addi	r2,r2,40
2009820c:	1009883a 	mov	r4,r2
20098210:	e17ffe17 	ldw	r5,-8(fp)
20098214:	e1bfff17 	ldw	r6,-4(fp)
20098218:	00986080 	call	20098608 <altera_avalon_jtag_uart_ioctl>
}
2009821c:	e037883a 	mov	sp,fp
20098220:	dfc00117 	ldw	ra,4(sp)
20098224:	df000017 	ldw	fp,0(sp)
20098228:	dec00204 	addi	sp,sp,8
2009822c:	f800283a 	ret

20098230 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
20098230:	defffa04 	addi	sp,sp,-24
20098234:	dfc00515 	stw	ra,20(sp)
20098238:	df000415 	stw	fp,16(sp)
2009823c:	df000404 	addi	fp,sp,16
20098240:	e13ffd15 	stw	r4,-12(fp)
20098244:	e17ffe15 	stw	r5,-8(fp)
20098248:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
2009824c:	e0bffd17 	ldw	r2,-12(fp)
20098250:	00c00044 	movi	r3,1
20098254:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
20098258:	e0bffd17 	ldw	r2,-12(fp)
2009825c:	10800017 	ldw	r2,0(r2)
20098260:	10800104 	addi	r2,r2,4
20098264:	1007883a 	mov	r3,r2
20098268:	e0bffd17 	ldw	r2,-12(fp)
2009826c:	10800817 	ldw	r2,32(r2)
20098270:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
20098274:	e0fffe17 	ldw	r3,-8(fp)
20098278:	e0bfff17 	ldw	r2,-4(fp)
2009827c:	d8000015 	stw	zero,0(sp)
20098280:	1809883a 	mov	r4,r3
20098284:	100b883a 	mov	r5,r2
20098288:	018802b4 	movhi	r6,8202
2009828c:	31a0bd04 	addi	r6,r6,-32012
20098290:	e1fffd17 	ldw	r7,-12(fp)
20098294:	009aef00 	call	2009aef0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
20098298:	e0bffd17 	ldw	r2,-12(fp)
2009829c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
200982a0:	e0bffd17 	ldw	r2,-12(fp)
200982a4:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
200982a8:	00800034 	movhi	r2,0
200982ac:	108a3604 	addi	r2,r2,10456
200982b0:	10800017 	ldw	r2,0(r2)
200982b4:	1809883a 	mov	r4,r3
200982b8:	100b883a 	mov	r5,r2
200982bc:	018802b4 	movhi	r6,8202
200982c0:	31a13e04 	addi	r6,r6,-31496
200982c4:	e1fffd17 	ldw	r7,-12(fp)
200982c8:	009a9a80 	call	2009a9a8 <alt_alarm_start>
200982cc:	1000040e 	bge	r2,zero,200982e0 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
200982d0:	e0fffd17 	ldw	r3,-12(fp)
200982d4:	00a00034 	movhi	r2,32768
200982d8:	10bfffc4 	addi	r2,r2,-1
200982dc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
200982e0:	e037883a 	mov	sp,fp
200982e4:	dfc00117 	ldw	ra,4(sp)
200982e8:	df000017 	ldw	fp,0(sp)
200982ec:	dec00204 	addi	sp,sp,8
200982f0:	f800283a 	ret

200982f4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
200982f4:	defff804 	addi	sp,sp,-32
200982f8:	df000715 	stw	fp,28(sp)
200982fc:	df000704 	addi	fp,sp,28
20098300:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
20098304:	e0bfff17 	ldw	r2,-4(fp)
20098308:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
2009830c:	e0bffb17 	ldw	r2,-20(fp)
20098310:	10800017 	ldw	r2,0(r2)
20098314:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
20098318:	e0bffc17 	ldw	r2,-16(fp)
2009831c:	10800104 	addi	r2,r2,4
20098320:	10800037 	ldwio	r2,0(r2)
20098324:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
20098328:	e0bffd17 	ldw	r2,-12(fp)
2009832c:	1080c00c 	andi	r2,r2,768
20098330:	1000011e 	bne	r2,zero,20098338 <altera_avalon_jtag_uart_irq+0x44>
      break;
20098334:	00006c06 	br	200984e8 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
20098338:	e0bffd17 	ldw	r2,-12(fp)
2009833c:	1080400c 	andi	r2,r2,256
20098340:	10003426 	beq	r2,zero,20098414 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
20098344:	00800074 	movhi	r2,1
20098348:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
2009834c:	e0bffb17 	ldw	r2,-20(fp)
20098350:	10800a17 	ldw	r2,40(r2)
20098354:	10800044 	addi	r2,r2,1
20098358:	1081ffcc 	andi	r2,r2,2047
2009835c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
20098360:	e0bffb17 	ldw	r2,-20(fp)
20098364:	10c00b17 	ldw	r3,44(r2)
20098368:	e0bffe17 	ldw	r2,-8(fp)
2009836c:	1880011e 	bne	r3,r2,20098374 <altera_avalon_jtag_uart_irq+0x80>
          break;
20098370:	00001606 	br	200983cc <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
20098374:	e0bffc17 	ldw	r2,-16(fp)
20098378:	10800037 	ldwio	r2,0(r2)
2009837c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
20098380:	e0bff917 	ldw	r2,-28(fp)
20098384:	10a0000c 	andi	r2,r2,32768
20098388:	1000011e 	bne	r2,zero,20098390 <altera_avalon_jtag_uart_irq+0x9c>
          break;
2009838c:	00000f06 	br	200983cc <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
20098390:	e0bffb17 	ldw	r2,-20(fp)
20098394:	10800a17 	ldw	r2,40(r2)
20098398:	e0fff917 	ldw	r3,-28(fp)
2009839c:	1809883a 	mov	r4,r3
200983a0:	e0fffb17 	ldw	r3,-20(fp)
200983a4:	1885883a 	add	r2,r3,r2
200983a8:	10800e04 	addi	r2,r2,56
200983ac:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
200983b0:	e0bffb17 	ldw	r2,-20(fp)
200983b4:	10800a17 	ldw	r2,40(r2)
200983b8:	10800044 	addi	r2,r2,1
200983bc:	10c1ffcc 	andi	r3,r2,2047
200983c0:	e0bffb17 	ldw	r2,-20(fp)
200983c4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
200983c8:	003fe006 	br	2009834c <__flash_rwdata_start+0xffffbd04>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
200983cc:	e0bff917 	ldw	r2,-28(fp)
200983d0:	10bfffec 	andhi	r2,r2,65535
200983d4:	10000f26 	beq	r2,zero,20098414 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
200983d8:	e0bffb17 	ldw	r2,-20(fp)
200983dc:	10c00817 	ldw	r3,32(r2)
200983e0:	00bfff84 	movi	r2,-2
200983e4:	1886703a 	and	r3,r3,r2
200983e8:	e0bffb17 	ldw	r2,-20(fp)
200983ec:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
200983f0:	e0bffc17 	ldw	r2,-16(fp)
200983f4:	10800104 	addi	r2,r2,4
200983f8:	1007883a 	mov	r3,r2
200983fc:	e0bffb17 	ldw	r2,-20(fp)
20098400:	10800817 	ldw	r2,32(r2)
20098404:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
20098408:	e0bffc17 	ldw	r2,-16(fp)
2009840c:	10800104 	addi	r2,r2,4
20098410:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
20098414:	e0bffd17 	ldw	r2,-12(fp)
20098418:	1080800c 	andi	r2,r2,512
2009841c:	10003126 	beq	r2,zero,200984e4 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
20098420:	e0bffd17 	ldw	r2,-12(fp)
20098424:	1004d43a 	srli	r2,r2,16
20098428:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
2009842c:	00001406 	br	20098480 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
20098430:	e0bffc17 	ldw	r2,-16(fp)
20098434:	e0fffb17 	ldw	r3,-20(fp)
20098438:	18c00d17 	ldw	r3,52(r3)
2009843c:	e13ffb17 	ldw	r4,-20(fp)
20098440:	20c7883a 	add	r3,r4,r3
20098444:	18c20e04 	addi	r3,r3,2104
20098448:	18c00003 	ldbu	r3,0(r3)
2009844c:	18c03fcc 	andi	r3,r3,255
20098450:	18c0201c 	xori	r3,r3,128
20098454:	18ffe004 	addi	r3,r3,-128
20098458:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
2009845c:	e0bffb17 	ldw	r2,-20(fp)
20098460:	10800d17 	ldw	r2,52(r2)
20098464:	10800044 	addi	r2,r2,1
20098468:	10c1ffcc 	andi	r3,r2,2047
2009846c:	e0bffb17 	ldw	r2,-20(fp)
20098470:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
20098474:	e0bffa17 	ldw	r2,-24(fp)
20098478:	10bfffc4 	addi	r2,r2,-1
2009847c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
20098480:	e0bffa17 	ldw	r2,-24(fp)
20098484:	10000526 	beq	r2,zero,2009849c <altera_avalon_jtag_uart_irq+0x1a8>
20098488:	e0bffb17 	ldw	r2,-20(fp)
2009848c:	10c00d17 	ldw	r3,52(r2)
20098490:	e0bffb17 	ldw	r2,-20(fp)
20098494:	10800c17 	ldw	r2,48(r2)
20098498:	18bfe51e 	bne	r3,r2,20098430 <__flash_rwdata_start+0xffffbde8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
2009849c:	e0bffa17 	ldw	r2,-24(fp)
200984a0:	10001026 	beq	r2,zero,200984e4 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
200984a4:	e0bffb17 	ldw	r2,-20(fp)
200984a8:	10c00817 	ldw	r3,32(r2)
200984ac:	00bfff44 	movi	r2,-3
200984b0:	1886703a 	and	r3,r3,r2
200984b4:	e0bffb17 	ldw	r2,-20(fp)
200984b8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
200984bc:	e0bffb17 	ldw	r2,-20(fp)
200984c0:	10800017 	ldw	r2,0(r2)
200984c4:	10800104 	addi	r2,r2,4
200984c8:	1007883a 	mov	r3,r2
200984cc:	e0bffb17 	ldw	r2,-20(fp)
200984d0:	10800817 	ldw	r2,32(r2)
200984d4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
200984d8:	e0bffc17 	ldw	r2,-16(fp)
200984dc:	10800104 	addi	r2,r2,4
200984e0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
200984e4:	003f8c06 	br	20098318 <__flash_rwdata_start+0xffffbcd0>
}
200984e8:	e037883a 	mov	sp,fp
200984ec:	df000017 	ldw	fp,0(sp)
200984f0:	dec00104 	addi	sp,sp,4
200984f4:	f800283a 	ret

200984f8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
200984f8:	defff804 	addi	sp,sp,-32
200984fc:	df000715 	stw	fp,28(sp)
20098500:	df000704 	addi	fp,sp,28
20098504:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
20098508:	e0bffb17 	ldw	r2,-20(fp)
2009850c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
20098510:	e0bff917 	ldw	r2,-28(fp)
20098514:	10800017 	ldw	r2,0(r2)
20098518:	10800104 	addi	r2,r2,4
2009851c:	10800037 	ldwio	r2,0(r2)
20098520:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
20098524:	e0bffa17 	ldw	r2,-24(fp)
20098528:	1081000c 	andi	r2,r2,1024
2009852c:	10000b26 	beq	r2,zero,2009855c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
20098530:	e0bff917 	ldw	r2,-28(fp)
20098534:	10800017 	ldw	r2,0(r2)
20098538:	10800104 	addi	r2,r2,4
2009853c:	1007883a 	mov	r3,r2
20098540:	e0bff917 	ldw	r2,-28(fp)
20098544:	10800817 	ldw	r2,32(r2)
20098548:	10810014 	ori	r2,r2,1024
2009854c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
20098550:	e0bff917 	ldw	r2,-28(fp)
20098554:	10000915 	stw	zero,36(r2)
20098558:	00000a06 	br	20098584 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
2009855c:	e0bff917 	ldw	r2,-28(fp)
20098560:	10c00917 	ldw	r3,36(r2)
20098564:	00a00034 	movhi	r2,32768
20098568:	10bfff04 	addi	r2,r2,-4
2009856c:	10c00536 	bltu	r2,r3,20098584 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
20098570:	e0bff917 	ldw	r2,-28(fp)
20098574:	10800917 	ldw	r2,36(r2)
20098578:	10c00044 	addi	r3,r2,1
2009857c:	e0bff917 	ldw	r2,-28(fp)
20098580:	10c00915 	stw	r3,36(r2)
20098584:	00800034 	movhi	r2,0
20098588:	108a3604 	addi	r2,r2,10456
2009858c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
20098590:	e037883a 	mov	sp,fp
20098594:	df000017 	ldw	fp,0(sp)
20098598:	dec00104 	addi	sp,sp,4
2009859c:	f800283a 	ret

200985a0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
200985a0:	defffd04 	addi	sp,sp,-12
200985a4:	df000215 	stw	fp,8(sp)
200985a8:	df000204 	addi	fp,sp,8
200985ac:	e13ffe15 	stw	r4,-8(fp)
200985b0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
200985b4:	00000506 	br	200985cc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
200985b8:	e0bfff17 	ldw	r2,-4(fp)
200985bc:	1090000c 	andi	r2,r2,16384
200985c0:	10000226 	beq	r2,zero,200985cc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
200985c4:	00bffd44 	movi	r2,-11
200985c8:	00000b06 	br	200985f8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
200985cc:	e0bffe17 	ldw	r2,-8(fp)
200985d0:	10c00d17 	ldw	r3,52(r2)
200985d4:	e0bffe17 	ldw	r2,-8(fp)
200985d8:	10800c17 	ldw	r2,48(r2)
200985dc:	18800526 	beq	r3,r2,200985f4 <altera_avalon_jtag_uart_close+0x54>
200985e0:	e0bffe17 	ldw	r2,-8(fp)
200985e4:	10c00917 	ldw	r3,36(r2)
200985e8:	e0bffe17 	ldw	r2,-8(fp)
200985ec:	10800117 	ldw	r2,4(r2)
200985f0:	18bff136 	bltu	r3,r2,200985b8 <__flash_rwdata_start+0xffffbf70>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
200985f4:	0005883a 	mov	r2,zero
}
200985f8:	e037883a 	mov	sp,fp
200985fc:	df000017 	ldw	fp,0(sp)
20098600:	dec00104 	addi	sp,sp,4
20098604:	f800283a 	ret

20098608 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
20098608:	defffa04 	addi	sp,sp,-24
2009860c:	df000515 	stw	fp,20(sp)
20098610:	df000504 	addi	fp,sp,20
20098614:	e13ffd15 	stw	r4,-12(fp)
20098618:	e17ffe15 	stw	r5,-8(fp)
2009861c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
20098620:	00bff9c4 	movi	r2,-25
20098624:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
20098628:	e0bffe17 	ldw	r2,-8(fp)
2009862c:	10da8060 	cmpeqi	r3,r2,27137
20098630:	1800031e 	bne	r3,zero,20098640 <altera_avalon_jtag_uart_ioctl+0x38>
20098634:	109a80a0 	cmpeqi	r2,r2,27138
20098638:	1000191e 	bne	r2,zero,200986a0 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
2009863c:	00002806 	br	200986e0 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
20098640:	e0bffd17 	ldw	r2,-12(fp)
20098644:	10c00117 	ldw	r3,4(r2)
20098648:	00a00034 	movhi	r2,32768
2009864c:	10bfffc4 	addi	r2,r2,-1
20098650:	18801226 	beq	r3,r2,2009869c <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
20098654:	e0bfff17 	ldw	r2,-4(fp)
20098658:	10800017 	ldw	r2,0(r2)
2009865c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
20098660:	e0bffc17 	ldw	r2,-16(fp)
20098664:	10800090 	cmplti	r2,r2,2
20098668:	1000061e 	bne	r2,zero,20098684 <altera_avalon_jtag_uart_ioctl+0x7c>
2009866c:	e0fffc17 	ldw	r3,-16(fp)
20098670:	00a00034 	movhi	r2,32768
20098674:	10bfffc4 	addi	r2,r2,-1
20098678:	18800226 	beq	r3,r2,20098684 <altera_avalon_jtag_uart_ioctl+0x7c>
2009867c:	e0bffc17 	ldw	r2,-16(fp)
20098680:	00000206 	br	2009868c <altera_avalon_jtag_uart_ioctl+0x84>
20098684:	00a00034 	movhi	r2,32768
20098688:	10bfff84 	addi	r2,r2,-2
2009868c:	e0fffd17 	ldw	r3,-12(fp)
20098690:	18800115 	stw	r2,4(r3)
      rc = 0;
20098694:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
20098698:	00001106 	br	200986e0 <altera_avalon_jtag_uart_ioctl+0xd8>
2009869c:	00001006 	br	200986e0 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
200986a0:	e0bffd17 	ldw	r2,-12(fp)
200986a4:	10c00117 	ldw	r3,4(r2)
200986a8:	00a00034 	movhi	r2,32768
200986ac:	10bfffc4 	addi	r2,r2,-1
200986b0:	18800a26 	beq	r3,r2,200986dc <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
200986b4:	e0bffd17 	ldw	r2,-12(fp)
200986b8:	10c00917 	ldw	r3,36(r2)
200986bc:	e0bffd17 	ldw	r2,-12(fp)
200986c0:	10800117 	ldw	r2,4(r2)
200986c4:	1885803a 	cmpltu	r2,r3,r2
200986c8:	10c03fcc 	andi	r3,r2,255
200986cc:	e0bfff17 	ldw	r2,-4(fp)
200986d0:	10c00015 	stw	r3,0(r2)
      rc = 0;
200986d4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
200986d8:	00000006 	br	200986dc <altera_avalon_jtag_uart_ioctl+0xd4>
200986dc:	0001883a 	nop

  default:
    break;
  }

  return rc;
200986e0:	e0bffb17 	ldw	r2,-20(fp)
}
200986e4:	e037883a 	mov	sp,fp
200986e8:	df000017 	ldw	fp,0(sp)
200986ec:	dec00104 	addi	sp,sp,4
200986f0:	f800283a 	ret

200986f4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
200986f4:	defff304 	addi	sp,sp,-52
200986f8:	dfc00c15 	stw	ra,48(sp)
200986fc:	df000b15 	stw	fp,44(sp)
20098700:	df000b04 	addi	fp,sp,44
20098704:	e13ffc15 	stw	r4,-16(fp)
20098708:	e17ffd15 	stw	r5,-12(fp)
2009870c:	e1bffe15 	stw	r6,-8(fp)
20098710:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
20098714:	e0bffd17 	ldw	r2,-12(fp)
20098718:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
2009871c:	00004906 	br	20098844 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
20098720:	e0bffc17 	ldw	r2,-16(fp)
20098724:	10800a17 	ldw	r2,40(r2)
20098728:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
2009872c:	e0bffc17 	ldw	r2,-16(fp)
20098730:	10800b17 	ldw	r2,44(r2)
20098734:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
20098738:	e0fff717 	ldw	r3,-36(fp)
2009873c:	e0bff817 	ldw	r2,-32(fp)
20098740:	18800536 	bltu	r3,r2,20098758 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
20098744:	e0fff717 	ldw	r3,-36(fp)
20098748:	e0bff817 	ldw	r2,-32(fp)
2009874c:	1885c83a 	sub	r2,r3,r2
20098750:	e0bff615 	stw	r2,-40(fp)
20098754:	00000406 	br	20098768 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
20098758:	00c20004 	movi	r3,2048
2009875c:	e0bff817 	ldw	r2,-32(fp)
20098760:	1885c83a 	sub	r2,r3,r2
20098764:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
20098768:	e0bff617 	ldw	r2,-40(fp)
2009876c:	1000011e 	bne	r2,zero,20098774 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
20098770:	00001d06 	br	200987e8 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
20098774:	e0fffe17 	ldw	r3,-8(fp)
20098778:	e0bff617 	ldw	r2,-40(fp)
2009877c:	1880022e 	bgeu	r3,r2,20098788 <altera_avalon_jtag_uart_read+0x94>
        n = space;
20098780:	e0bffe17 	ldw	r2,-8(fp)
20098784:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
20098788:	e0bff817 	ldw	r2,-32(fp)
2009878c:	10800e04 	addi	r2,r2,56
20098790:	e0fffc17 	ldw	r3,-16(fp)
20098794:	1885883a 	add	r2,r3,r2
20098798:	e13ff517 	ldw	r4,-44(fp)
2009879c:	100b883a 	mov	r5,r2
200987a0:	e1bff617 	ldw	r6,-40(fp)
200987a4:	008a1e00 	call	2008a1e0 <memcpy>
      ptr   += n;
200987a8:	e0fff517 	ldw	r3,-44(fp)
200987ac:	e0bff617 	ldw	r2,-40(fp)
200987b0:	1885883a 	add	r2,r3,r2
200987b4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
200987b8:	e0fffe17 	ldw	r3,-8(fp)
200987bc:	e0bff617 	ldw	r2,-40(fp)
200987c0:	1885c83a 	sub	r2,r3,r2
200987c4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
200987c8:	e0fff817 	ldw	r3,-32(fp)
200987cc:	e0bff617 	ldw	r2,-40(fp)
200987d0:	1885883a 	add	r2,r3,r2
200987d4:	10c1ffcc 	andi	r3,r2,2047
200987d8:	e0bffc17 	ldw	r2,-16(fp)
200987dc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
200987e0:	e0bffe17 	ldw	r2,-8(fp)
200987e4:	00bfce16 	blt	zero,r2,20098720 <__flash_rwdata_start+0xffffc0d8>

    /* If we read any data then return it */
    if (ptr != buffer)
200987e8:	e0fff517 	ldw	r3,-44(fp)
200987ec:	e0bffd17 	ldw	r2,-12(fp)
200987f0:	18800126 	beq	r3,r2,200987f8 <altera_avalon_jtag_uart_read+0x104>
      break;
200987f4:	00001506 	br	2009884c <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
200987f8:	e0bfff17 	ldw	r2,-4(fp)
200987fc:	1090000c 	andi	r2,r2,16384
20098800:	10000126 	beq	r2,zero,20098808 <altera_avalon_jtag_uart_read+0x114>
      break;
20098804:	00001106 	br	2009884c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
20098808:	0001883a 	nop
2009880c:	e0bffc17 	ldw	r2,-16(fp)
20098810:	10c00a17 	ldw	r3,40(r2)
20098814:	e0bff717 	ldw	r2,-36(fp)
20098818:	1880051e 	bne	r3,r2,20098830 <altera_avalon_jtag_uart_read+0x13c>
2009881c:	e0bffc17 	ldw	r2,-16(fp)
20098820:	10c00917 	ldw	r3,36(r2)
20098824:	e0bffc17 	ldw	r2,-16(fp)
20098828:	10800117 	ldw	r2,4(r2)
2009882c:	18bff736 	bltu	r3,r2,2009880c <__flash_rwdata_start+0xffffc1c4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
20098830:	e0bffc17 	ldw	r2,-16(fp)
20098834:	10c00a17 	ldw	r3,40(r2)
20098838:	e0bff717 	ldw	r2,-36(fp)
2009883c:	1880011e 	bne	r3,r2,20098844 <altera_avalon_jtag_uart_read+0x150>
      break;
20098840:	00000206 	br	2009884c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
20098844:	e0bffe17 	ldw	r2,-8(fp)
20098848:	00bfb516 	blt	zero,r2,20098720 <__flash_rwdata_start+0xffffc0d8>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
2009884c:	e0fff517 	ldw	r3,-44(fp)
20098850:	e0bffd17 	ldw	r2,-12(fp)
20098854:	18801826 	beq	r3,r2,200988b8 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20098858:	0005303a 	rdctl	r2,status
2009885c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20098860:	e0fffa17 	ldw	r3,-24(fp)
20098864:	00bfff84 	movi	r2,-2
20098868:	1884703a 	and	r2,r3,r2
2009886c:	1001703a 	wrctl	status,r2
  
  return context;
20098870:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
20098874:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
20098878:	e0bffc17 	ldw	r2,-16(fp)
2009887c:	10800817 	ldw	r2,32(r2)
20098880:	10c00054 	ori	r3,r2,1
20098884:	e0bffc17 	ldw	r2,-16(fp)
20098888:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
2009888c:	e0bffc17 	ldw	r2,-16(fp)
20098890:	10800017 	ldw	r2,0(r2)
20098894:	10800104 	addi	r2,r2,4
20098898:	1007883a 	mov	r3,r2
2009889c:	e0bffc17 	ldw	r2,-16(fp)
200988a0:	10800817 	ldw	r2,32(r2)
200988a4:	18800035 	stwio	r2,0(r3)
200988a8:	e0bff917 	ldw	r2,-28(fp)
200988ac:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200988b0:	e0bffb17 	ldw	r2,-20(fp)
200988b4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
200988b8:	e0fff517 	ldw	r3,-44(fp)
200988bc:	e0bffd17 	ldw	r2,-12(fp)
200988c0:	18800426 	beq	r3,r2,200988d4 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
200988c4:	e0fff517 	ldw	r3,-44(fp)
200988c8:	e0bffd17 	ldw	r2,-12(fp)
200988cc:	1885c83a 	sub	r2,r3,r2
200988d0:	00000606 	br	200988ec <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
200988d4:	e0bfff17 	ldw	r2,-4(fp)
200988d8:	1090000c 	andi	r2,r2,16384
200988dc:	10000226 	beq	r2,zero,200988e8 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
200988e0:	00bffd44 	movi	r2,-11
200988e4:	00000106 	br	200988ec <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
200988e8:	00bffec4 	movi	r2,-5
}
200988ec:	e037883a 	mov	sp,fp
200988f0:	dfc00117 	ldw	ra,4(sp)
200988f4:	df000017 	ldw	fp,0(sp)
200988f8:	dec00204 	addi	sp,sp,8
200988fc:	f800283a 	ret

20098900 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
20098900:	defff304 	addi	sp,sp,-52
20098904:	dfc00c15 	stw	ra,48(sp)
20098908:	df000b15 	stw	fp,44(sp)
2009890c:	df000b04 	addi	fp,sp,44
20098910:	e13ffc15 	stw	r4,-16(fp)
20098914:	e17ffd15 	stw	r5,-12(fp)
20098918:	e1bffe15 	stw	r6,-8(fp)
2009891c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
20098920:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
20098924:	e0bffd17 	ldw	r2,-12(fp)
20098928:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
2009892c:	00003806 	br	20098a10 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
20098930:	e0bffc17 	ldw	r2,-16(fp)
20098934:	10800c17 	ldw	r2,48(r2)
20098938:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
2009893c:	e0bffc17 	ldw	r2,-16(fp)
20098940:	10800d17 	ldw	r2,52(r2)
20098944:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
20098948:	e0fff817 	ldw	r3,-32(fp)
2009894c:	e0bff517 	ldw	r2,-44(fp)
20098950:	1880062e 	bgeu	r3,r2,2009896c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
20098954:	e0fff517 	ldw	r3,-44(fp)
20098958:	e0bff817 	ldw	r2,-32(fp)
2009895c:	1885c83a 	sub	r2,r3,r2
20098960:	10bfffc4 	addi	r2,r2,-1
20098964:	e0bff615 	stw	r2,-40(fp)
20098968:	00000b06 	br	20098998 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
2009896c:	e0bff517 	ldw	r2,-44(fp)
20098970:	10000526 	beq	r2,zero,20098988 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
20098974:	00c20004 	movi	r3,2048
20098978:	e0bff817 	ldw	r2,-32(fp)
2009897c:	1885c83a 	sub	r2,r3,r2
20098980:	e0bff615 	stw	r2,-40(fp)
20098984:	00000406 	br	20098998 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
20098988:	00c1ffc4 	movi	r3,2047
2009898c:	e0bff817 	ldw	r2,-32(fp)
20098990:	1885c83a 	sub	r2,r3,r2
20098994:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
20098998:	e0bff617 	ldw	r2,-40(fp)
2009899c:	1000011e 	bne	r2,zero,200989a4 <altera_avalon_jtag_uart_write+0xa4>
        break;
200989a0:	00001d06 	br	20098a18 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
200989a4:	e0fffe17 	ldw	r3,-8(fp)
200989a8:	e0bff617 	ldw	r2,-40(fp)
200989ac:	1880022e 	bgeu	r3,r2,200989b8 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
200989b0:	e0bffe17 	ldw	r2,-8(fp)
200989b4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
200989b8:	e0bff817 	ldw	r2,-32(fp)
200989bc:	10820e04 	addi	r2,r2,2104
200989c0:	e0fffc17 	ldw	r3,-16(fp)
200989c4:	1885883a 	add	r2,r3,r2
200989c8:	1009883a 	mov	r4,r2
200989cc:	e17ffd17 	ldw	r5,-12(fp)
200989d0:	e1bff617 	ldw	r6,-40(fp)
200989d4:	008a1e00 	call	2008a1e0 <memcpy>
      ptr   += n;
200989d8:	e0fffd17 	ldw	r3,-12(fp)
200989dc:	e0bff617 	ldw	r2,-40(fp)
200989e0:	1885883a 	add	r2,r3,r2
200989e4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
200989e8:	e0fffe17 	ldw	r3,-8(fp)
200989ec:	e0bff617 	ldw	r2,-40(fp)
200989f0:	1885c83a 	sub	r2,r3,r2
200989f4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
200989f8:	e0fff817 	ldw	r3,-32(fp)
200989fc:	e0bff617 	ldw	r2,-40(fp)
20098a00:	1885883a 	add	r2,r3,r2
20098a04:	10c1ffcc 	andi	r3,r2,2047
20098a08:	e0bffc17 	ldw	r2,-16(fp)
20098a0c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
20098a10:	e0bffe17 	ldw	r2,-8(fp)
20098a14:	00bfc616 	blt	zero,r2,20098930 <__flash_rwdata_start+0xffffc2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20098a18:	0005303a 	rdctl	r2,status
20098a1c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20098a20:	e0fffa17 	ldw	r3,-24(fp)
20098a24:	00bfff84 	movi	r2,-2
20098a28:	1884703a 	and	r2,r3,r2
20098a2c:	1001703a 	wrctl	status,r2
  
  return context;
20098a30:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
20098a34:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
20098a38:	e0bffc17 	ldw	r2,-16(fp)
20098a3c:	10800817 	ldw	r2,32(r2)
20098a40:	10c00094 	ori	r3,r2,2
20098a44:	e0bffc17 	ldw	r2,-16(fp)
20098a48:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
20098a4c:	e0bffc17 	ldw	r2,-16(fp)
20098a50:	10800017 	ldw	r2,0(r2)
20098a54:	10800104 	addi	r2,r2,4
20098a58:	1007883a 	mov	r3,r2
20098a5c:	e0bffc17 	ldw	r2,-16(fp)
20098a60:	10800817 	ldw	r2,32(r2)
20098a64:	18800035 	stwio	r2,0(r3)
20098a68:	e0bff917 	ldw	r2,-28(fp)
20098a6c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20098a70:	e0bffb17 	ldw	r2,-20(fp)
20098a74:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
20098a78:	e0bffe17 	ldw	r2,-8(fp)
20098a7c:	0080120e 	bge	zero,r2,20098ac8 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
20098a80:	e0bfff17 	ldw	r2,-4(fp)
20098a84:	1090000c 	andi	r2,r2,16384
20098a88:	10000126 	beq	r2,zero,20098a90 <altera_avalon_jtag_uart_write+0x190>
        break;
20098a8c:	00001006 	br	20098ad0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
20098a90:	0001883a 	nop
20098a94:	e0bffc17 	ldw	r2,-16(fp)
20098a98:	10c00d17 	ldw	r3,52(r2)
20098a9c:	e0bff517 	ldw	r2,-44(fp)
20098aa0:	1880051e 	bne	r3,r2,20098ab8 <altera_avalon_jtag_uart_write+0x1b8>
20098aa4:	e0bffc17 	ldw	r2,-16(fp)
20098aa8:	10c00917 	ldw	r3,36(r2)
20098aac:	e0bffc17 	ldw	r2,-16(fp)
20098ab0:	10800117 	ldw	r2,4(r2)
20098ab4:	18bff736 	bltu	r3,r2,20098a94 <__flash_rwdata_start+0xffffc44c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
20098ab8:	e0bffc17 	ldw	r2,-16(fp)
20098abc:	10800917 	ldw	r2,36(r2)
20098ac0:	10000126 	beq	r2,zero,20098ac8 <altera_avalon_jtag_uart_write+0x1c8>
         break;
20098ac4:	00000206 	br	20098ad0 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
20098ac8:	e0bffe17 	ldw	r2,-8(fp)
20098acc:	00bf9716 	blt	zero,r2,2009892c <__flash_rwdata_start+0xffffc2e4>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
20098ad0:	e0fffd17 	ldw	r3,-12(fp)
20098ad4:	e0bff717 	ldw	r2,-36(fp)
20098ad8:	18800426 	beq	r3,r2,20098aec <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
20098adc:	e0fffd17 	ldw	r3,-12(fp)
20098ae0:	e0bff717 	ldw	r2,-36(fp)
20098ae4:	1885c83a 	sub	r2,r3,r2
20098ae8:	00000606 	br	20098b04 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
20098aec:	e0bfff17 	ldw	r2,-4(fp)
20098af0:	1090000c 	andi	r2,r2,16384
20098af4:	10000226 	beq	r2,zero,20098b00 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
20098af8:	00bffd44 	movi	r2,-11
20098afc:	00000106 	br	20098b04 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
20098b00:	00bffec4 	movi	r2,-5
}
20098b04:	e037883a 	mov	sp,fp
20098b08:	dfc00117 	ldw	ra,4(sp)
20098b0c:	df000017 	ldw	fp,0(sp)
20098b10:	dec00204 	addi	sp,sp,8
20098b14:	f800283a 	ret

20098b18 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
20098b18:	defffe04 	addi	sp,sp,-8
20098b1c:	dfc00115 	stw	ra,4(sp)
20098b20:	df000015 	stw	fp,0(sp)
20098b24:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
20098b28:	00800034 	movhi	r2,0
20098b2c:	108a1e04 	addi	r2,r2,10360
20098b30:	10800017 	ldw	r2,0(r2)
20098b34:	10000526 	beq	r2,zero,20098b4c <alt_get_errno+0x34>
20098b38:	00800034 	movhi	r2,0
20098b3c:	108a1e04 	addi	r2,r2,10360
20098b40:	10800017 	ldw	r2,0(r2)
20098b44:	103ee83a 	callr	r2
20098b48:	00000206 	br	20098b54 <alt_get_errno+0x3c>
20098b4c:	00800034 	movhi	r2,0
20098b50:	108a2e04 	addi	r2,r2,10424
}
20098b54:	e037883a 	mov	sp,fp
20098b58:	dfc00117 	ldw	ra,4(sp)
20098b5c:	df000017 	ldw	fp,0(sp)
20098b60:	dec00204 	addi	sp,sp,8
20098b64:	f800283a 	ret

20098b68 <alt_msgdma_write_standard_descriptor>:
 */
static int alt_msgdma_write_standard_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_standard_descriptor *descriptor)
{
20098b68:	defffc04 	addi	sp,sp,-16
20098b6c:	df000315 	stw	fp,12(sp)
20098b70:	df000304 	addi	fp,sp,12
20098b74:	e13ffd15 	stw	r4,-12(fp)
20098b78:	e17ffe15 	stw	r5,-8(fp)
20098b7c:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
20098b80:	e0bffd17 	ldw	r2,-12(fp)
20098b84:	10800037 	ldwio	r2,0(r2)
20098b88:	1080010c 	andi	r2,r2,4
20098b8c:	10000226 	beq	r2,zero,20098b98 <alt_msgdma_write_standard_descriptor+0x30>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
		is non-blocking*/
        return -ENOSPC;
20098b90:	00bff904 	movi	r2,-28
20098b94:	00001506 	br	20098bec <alt_msgdma_write_standard_descriptor+0x84>
    }

	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base, 
20098b98:	e0bfff17 	ldw	r2,-4(fp)
20098b9c:	10800017 	ldw	r2,0(r2)
20098ba0:	1007883a 	mov	r3,r2
20098ba4:	e0bffe17 	ldw	r2,-8(fp)
20098ba8:	10c00035 	stwio	r3,0(r2)
		(alt_u32)descriptor->read_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base, 
20098bac:	e0bffe17 	ldw	r2,-8(fp)
20098bb0:	10800104 	addi	r2,r2,4
20098bb4:	e0ffff17 	ldw	r3,-4(fp)
20098bb8:	18c00117 	ldw	r3,4(r3)
20098bbc:	10c00035 	stwio	r3,0(r2)
	(	alt_u32)descriptor->write_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base, 
20098bc0:	e0bffe17 	ldw	r2,-8(fp)
20098bc4:	10800204 	addi	r2,r2,8
20098bc8:	e0ffff17 	ldw	r3,-4(fp)
20098bcc:	18c00217 	ldw	r3,8(r3)
20098bd0:	10c00035 	stwio	r3,0(r2)
		descriptor->transfer_length);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_STANDARD(descriptor_base, 
20098bd4:	e0bffe17 	ldw	r2,-8(fp)
20098bd8:	10800304 	addi	r2,r2,12
20098bdc:	e0ffff17 	ldw	r3,-4(fp)
20098be0:	18c00317 	ldw	r3,12(r3)
20098be4:	10c00035 	stwio	r3,0(r2)
		descriptor->control);
        return 0;
20098be8:	0005883a 	mov	r2,zero
}
20098bec:	e037883a 	mov	sp,fp
20098bf0:	df000017 	ldw	fp,0(sp)
20098bf4:	dec00104 	addi	sp,sp,4
20098bf8:	f800283a 	ret

20098bfc <alt_msgdma_write_extended_descriptor>:
 */
static int alt_msgdma_write_extended_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_extended_descriptor *descriptor)
{
20098bfc:	defffc04 	addi	sp,sp,-16
20098c00:	df000315 	stw	fp,12(sp)
20098c04:	df000304 	addi	fp,sp,12
20098c08:	e13ffd15 	stw	r4,-12(fp)
20098c0c:	e17ffe15 	stw	r5,-8(fp)
20098c10:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
20098c14:	e0bffd17 	ldw	r2,-12(fp)
20098c18:	10800037 	ldwio	r2,0(r2)
20098c1c:	1080010c 	andi	r2,r2,4
20098c20:	10000226 	beq	r2,zero,20098c2c <alt_msgdma_write_extended_descriptor+0x30>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
	is non-blocking*/
        return -ENOSPC;
20098c24:	00bff904 	movi	r2,-28
20098c28:	00003b06 	br	20098d18 <alt_msgdma_write_extended_descriptor+0x11c>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(
20098c2c:	e0bfff17 	ldw	r2,-4(fp)
20098c30:	10800017 	ldw	r2,0(r2)
20098c34:	1007883a 	mov	r3,r2
20098c38:	e0bffe17 	ldw	r2,-8(fp)
20098c3c:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	(alt_u32)descriptor->read_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(
20098c40:	e0bffe17 	ldw	r2,-8(fp)
20098c44:	10800104 	addi	r2,r2,4
20098c48:	e0ffff17 	ldw	r3,-4(fp)
20098c4c:	18c00117 	ldw	r3,4(r3)
20098c50:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
		(alt_u32)descriptor->write_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(
20098c54:	e0bffe17 	ldw	r2,-8(fp)
20098c58:	10800204 	addi	r2,r2,8
20098c5c:	e0ffff17 	ldw	r3,-4(fp)
20098c60:	18c00217 	ldw	r3,8(r3)
20098c64:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(
20098c68:	e0bffe17 	ldw	r2,-8(fp)
20098c6c:	10800304 	addi	r2,r2,12
20098c70:	e0ffff17 	ldw	r3,-4(fp)
20098c74:	18c0030b 	ldhu	r3,12(r3)
20098c78:	18ffffcc 	andi	r3,r3,65535
20098c7c:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->sequence_number);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(
20098c80:	e0bffe17 	ldw	r2,-8(fp)
20098c84:	10800384 	addi	r2,r2,14
20098c88:	e0ffff17 	ldw	r3,-4(fp)
20098c8c:	18c00383 	ldbu	r3,14(r3)
20098c90:	18c03fcc 	andi	r3,r3,255
20098c94:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(
20098c98:	e0bffe17 	ldw	r2,-8(fp)
20098c9c:	108003c4 	addi	r2,r2,15
20098ca0:	e0ffff17 	ldw	r3,-4(fp)
20098ca4:	18c003c3 	ldbu	r3,15(r3)
20098ca8:	18c03fcc 	andi	r3,r3,255
20098cac:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(
20098cb0:	e0bffe17 	ldw	r2,-8(fp)
20098cb4:	10800404 	addi	r2,r2,16
20098cb8:	e0ffff17 	ldw	r3,-4(fp)
20098cbc:	18c0040b 	ldhu	r3,16(r3)
20098cc0:	18ffffcc 	andi	r3,r3,65535
20098cc4:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(
20098cc8:	e0bffe17 	ldw	r2,-8(fp)
20098ccc:	10800484 	addi	r2,r2,18
20098cd0:	e0ffff17 	ldw	r3,-4(fp)
20098cd4:	18c0048b 	ldhu	r3,18(r3)
20098cd8:	18ffffcc 	andi	r3,r3,65535
20098cdc:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base, 0);
20098ce0:	e0bffe17 	ldw	r2,-8(fp)
20098ce4:	10800504 	addi	r2,r2,20
20098ce8:	0007883a 	mov	r3,zero
20098cec:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base, 0);
20098cf0:	e0bffe17 	ldw	r2,-8(fp)
20098cf4:	10800604 	addi	r2,r2,24
20098cf8:	0007883a 	mov	r3,zero
20098cfc:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(
20098d00:	e0bffe17 	ldw	r2,-8(fp)
20098d04:	10800704 	addi	r2,r2,28
20098d08:	e0ffff17 	ldw	r3,-4(fp)
20098d0c:	18c00717 	ldw	r3,28(r3)
20098d10:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->control);
    return 0;
20098d14:	0005883a 	mov	r2,zero
}
20098d18:	e037883a 	mov	sp,fp
20098d1c:	df000017 	ldw	fp,0(sp)
20098d20:	dec00104 	addi	sp,sp,4
20098d24:	f800283a 	ret

20098d28 <alt_msgdma_irq>:
 * alt_msgdma_irq()
 *
 * Interrupt handler for the Modular Scatter-Gather DMA controller.
 */
static void alt_msgdma_irq(void *context)
{
20098d28:	defff804 	addi	sp,sp,-32
20098d2c:	dfc00715 	stw	ra,28(sp)
20098d30:	df000615 	stw	fp,24(sp)
20098d34:	df000604 	addi	fp,sp,24
20098d38:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev *dev = (alt_msgdma_dev *) context;
20098d3c:	e0bfff17 	ldw	r2,-4(fp)
20098d40:	e0bffa15 	stw	r2,-24(fp)
    alt_irq_context cpu_sr;
    alt_u32 temporary_control;

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
20098d44:	e0bffa17 	ldw	r2,-24(fp)
20098d48:	10801783 	ldbu	r2,94(r2)
20098d4c:	10803fcc 	andi	r2,r2,255
20098d50:	10001126 	beq	r2,zero,20098d98 <alt_msgdma_irq+0x70>
    {
        temporary_control = 
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
20098d54:	e0bffa17 	ldw	r2,-24(fp)
20098d58:	10800617 	ldw	r2,24(r2)
20098d5c:	10800037 	ldwio	r2,0(r2)

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
    {
        temporary_control = 
20098d60:	1007883a 	mov	r3,r2
20098d64:	00bffdc4 	movi	r2,-9
20098d68:	1884703a 	and	r2,r3,r2
20098d6c:	e0bffb15 	stw	r2,-20(fp)
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				& ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
20098d70:	e0bffa17 	ldw	r2,-24(fp)
20098d74:	10800617 	ldw	r2,24(r2)
20098d78:	e0fffb17 	ldw	r3,-20(fp)
20098d7c:	10c00035 	stwio	r3,0(r2)
        		temporary_control);
        
        /* clear the IRQ status- W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base,
20098d80:	e0bffa17 	ldw	r2,-24(fp)
20098d84:	10800617 	ldw	r2,24(r2)
20098d88:	10800404 	addi	r2,r2,16
20098d8c:	00c00044 	movi	r3,1
20098d90:	10c00035 	stwio	r3,0(r2)
20098d94:	00001106 	br	20098ddc <alt_msgdma_irq+0xb4>
        		ALT_MSGDMA_PREFETCHER_STATUS_IRQ_SET_MASK);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
20098d98:	e0bffa17 	ldw	r2,-24(fp)
20098d9c:	10800317 	ldw	r2,12(r2)
20098da0:	10800104 	addi	r2,r2,4
20098da4:	10800037 	ldwio	r2,0(r2)
20098da8:	1007883a 	mov	r3,r2
20098dac:	00bffbc4 	movi	r2,-17
20098db0:	1884703a 	and	r2,r3,r2
20098db4:	e0bffb15 	stw	r2,-20(fp)
    			& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
20098db8:	e0bffa17 	ldw	r2,-24(fp)
20098dbc:	10800317 	ldw	r2,12(r2)
20098dc0:	10800104 	addi	r2,r2,4
20098dc4:	e0fffb17 	ldw	r3,-20(fp)
20098dc8:	10c00035 	stwio	r3,0(r2)
    	/* clear the IRQ status */
    	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
20098dcc:	e0bffa17 	ldw	r2,-24(fp)
20098dd0:	10800317 	ldw	r2,12(r2)
20098dd4:	00c08004 	movi	r3,512
20098dd8:	10c00035 	stwio	r3,0(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
20098ddc:	e0bffa17 	ldw	r2,-24(fp)
20098de0:	10800b17 	ldw	r2,44(r2)
20098de4:	10001226 	beq	r2,zero,20098e30 <alt_msgdma_irq+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20098de8:	0005303a 	rdctl	r2,status
20098dec:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20098df0:	e0fffd17 	ldw	r3,-12(fp)
20098df4:	00bfff84 	movi	r2,-2
20098df8:	1884703a 	and	r2,r3,r2
20098dfc:	1001703a 	wrctl	status,r2
  
  return context;
20098e00:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
20098e04:	e0bffc15 	stw	r2,-16(fp)
        dev->callback (dev->callback_context);
20098e08:	e0bffa17 	ldw	r2,-24(fp)
20098e0c:	10800b17 	ldw	r2,44(r2)
20098e10:	e0fffa17 	ldw	r3,-24(fp)
20098e14:	18c00c17 	ldw	r3,48(r3)
20098e18:	1809883a 	mov	r4,r3
20098e1c:	103ee83a 	callr	r2
20098e20:	e0bffc17 	ldw	r2,-16(fp)
20098e24:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20098e28:	e0bffe17 	ldw	r2,-8(fp)
20098e2c:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
20098e30:	e0bffa17 	ldw	r2,-24(fp)
20098e34:	10801783 	ldbu	r2,94(r2)
20098e38:	10803fcc 	andi	r2,r2,255
20098e3c:	10000a26 	beq	r2,zero,20098e68 <alt_msgdma_irq+0x140>
    {
    	temporary_control = 
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
20098e40:	e0bffa17 	ldw	r2,-24(fp)
20098e44:	10800617 	ldw	r2,24(r2)
20098e48:	10800037 	ldwio	r2,0(r2)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
20098e4c:	10800214 	ori	r2,r2,8
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
    {
    	temporary_control = 
20098e50:	e0bffb15 	stw	r2,-20(fp)
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
    	
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
20098e54:	e0bffa17 	ldw	r2,-24(fp)
20098e58:	10800617 	ldw	r2,24(r2)
20098e5c:	e0fffb17 	ldw	r3,-20(fp)
20098e60:	10c00035 	stwio	r3,0(r2)
20098e64:	00000b06 	br	20098e94 <alt_msgdma_irq+0x16c>
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
20098e68:	e0bffa17 	ldw	r2,-24(fp)
20098e6c:	10800317 	ldw	r2,12(r2)
20098e70:	10800104 	addi	r2,r2,4
20098e74:	10800037 	ldwio	r2,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
20098e78:	10800414 	ori	r2,r2,16
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
20098e7c:	e0bffb15 	stw	r2,-20(fp)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
20098e80:	e0bffa17 	ldw	r2,-24(fp)
20098e84:	10800317 	ldw	r2,12(r2)
20098e88:	10800104 	addi	r2,r2,4
20098e8c:	e0fffb17 	ldw	r3,-20(fp)
20098e90:	10c00035 	stwio	r3,0(r2)
    }

    return;
20098e94:	0001883a 	nop
}
20098e98:	e037883a 	mov	sp,fp
20098e9c:	dfc00117 	ldw	ra,4(sp)
20098ea0:	df000017 	ldw	fp,0(sp)
20098ea4:	dec00204 	addi	sp,sp,8
20098ea8:	f800283a 	ret

20098eac <alt_msgdma_construct_standard_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
20098eac:	defffb04 	addi	sp,sp,-20
20098eb0:	df000415 	stw	fp,16(sp)
20098eb4:	df000404 	addi	fp,sp,16
20098eb8:	e13ffc15 	stw	r4,-16(fp)
20098ebc:	e17ffd15 	stw	r5,-12(fp)
20098ec0:	e1bffe15 	stw	r6,-8(fp)
20098ec4:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
20098ec8:	e0bffc17 	ldw	r2,-16(fp)
20098ecc:	10c01217 	ldw	r3,72(r2)
20098ed0:	e0800117 	ldw	r2,4(fp)
20098ed4:	18800436 	bltu	r3,r2,20098ee8 <alt_msgdma_construct_standard_descriptor+0x3c>
       dev->enhanced_features != 0
20098ed8:	e0bffc17 	ldw	r2,-16(fp)
20098edc:	10801703 	ldbu	r2,92(r2)
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
20098ee0:	10803fcc 	andi	r2,r2,255
20098ee4:	10000226 	beq	r2,zero,20098ef0 <alt_msgdma_construct_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
20098ee8:	00bffa84 	movi	r2,-22
20098eec:	00000e06 	br	20098f28 <alt_msgdma_construct_standard_descriptor+0x7c>
    }
    descriptor->read_address = read_address;
20098ef0:	e0bffd17 	ldw	r2,-12(fp)
20098ef4:	e0fffe17 	ldw	r3,-8(fp)
20098ef8:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
20098efc:	e0bffd17 	ldw	r2,-12(fp)
20098f00:	e0ffff17 	ldw	r3,-4(fp)
20098f04:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
20098f08:	e0bffd17 	ldw	r2,-12(fp)
20098f0c:	e0c00117 	ldw	r3,4(fp)
20098f10:	10c00215 	stw	r3,8(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
20098f14:	e0800217 	ldw	r2,8(fp)
20098f18:	10e00034 	orhi	r3,r2,32768
20098f1c:	e0bffd17 	ldw	r2,-12(fp)
20098f20:	10c00315 	stw	r3,12(r2)
    
    return 0;
20098f24:	0005883a 	mov	r2,zero
}
20098f28:	e037883a 	mov	sp,fp
20098f2c:	df000017 	ldw	fp,0(sp)
20098f30:	dec00104 	addi	sp,sp,4
20098f34:	f800283a 	ret

20098f38 <alt_msgdma_construct_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
20098f38:	defff604 	addi	sp,sp,-40
20098f3c:	df000915 	stw	fp,36(sp)
20098f40:	df000904 	addi	fp,sp,36
20098f44:	e13ff715 	stw	r4,-36(fp)
20098f48:	e17ff815 	stw	r5,-32(fp)
20098f4c:	e1bff915 	stw	r6,-28(fp)
20098f50:	e1fffa15 	stw	r7,-24(fp)
20098f54:	e1800317 	ldw	r6,12(fp)
20098f58:	e1400417 	ldw	r5,16(fp)
20098f5c:	e1000517 	ldw	r4,20(fp)
20098f60:	e0c00617 	ldw	r3,24(fp)
20098f64:	e0800717 	ldw	r2,28(fp)
20098f68:	e1bffb0d 	sth	r6,-20(fp)
20098f6c:	e17ffc05 	stb	r5,-16(fp)
20098f70:	e13ffd05 	stb	r4,-12(fp)
20098f74:	e0fffe0d 	sth	r3,-8(fp)
20098f78:	e0bfff0d 	sth	r2,-4(fp)
    if(dev->max_byte < length ||
20098f7c:	e0bff717 	ldw	r2,-36(fp)
20098f80:	10c01217 	ldw	r3,72(r2)
20098f84:	e0800117 	ldw	r2,4(fp)
20098f88:	18801936 	bltu	r3,r2,20098ff0 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
20098f8c:	e13ff717 	ldw	r4,-36(fp)
20098f90:	20801317 	ldw	r2,76(r4)
20098f94:	20c01417 	ldw	r3,80(r4)
20098f98:	e13ffe0b 	ldhu	r4,-8(fp)
20098f9c:	213fffcc 	andi	r4,r4,65535
20098fa0:	2015883a 	mov	r10,r4
20098fa4:	0017883a 	mov	r11,zero
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
20098fa8:	1ac01136 	bltu	r3,r11,20098ff0 <alt_msgdma_construct_extended_descriptor+0xb8>
20098fac:	58c0011e 	bne	r11,r3,20098fb4 <alt_msgdma_construct_extended_descriptor+0x7c>
20098fb0:	12800f36 	bltu	r2,r10,20098ff0 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
20098fb4:	e13ff717 	ldw	r4,-36(fp)
20098fb8:	20801317 	ldw	r2,76(r4)
20098fbc:	20c01417 	ldw	r3,80(r4)
20098fc0:	e13fff0b 	ldhu	r4,-4(fp)
20098fc4:	213fffcc 	andi	r4,r4,65535
20098fc8:	2011883a 	mov	r8,r4
20098fcc:	0013883a 	mov	r9,zero
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
20098fd0:	1a400736 	bltu	r3,r9,20098ff0 <alt_msgdma_construct_extended_descriptor+0xb8>
20098fd4:	48c0011e 	bne	r9,r3,20098fdc <alt_msgdma_construct_extended_descriptor+0xa4>
20098fd8:	12000536 	bltu	r2,r8,20098ff0 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
20098fdc:	e0bff717 	ldw	r2,-36(fp)
20098fe0:	10801703 	ldbu	r2,92(r2)
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
20098fe4:	10803fcc 	andi	r2,r2,255
20098fe8:	10800060 	cmpeqi	r2,r2,1
20098fec:	1000021e 	bne	r2,zero,20098ff8 <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
20098ff0:	00bffa84 	movi	r2,-22
20098ff4:	00002106 	br	2009907c <alt_msgdma_construct_extended_descriptor+0x144>
    }
    
    descriptor->read_address_low = read_address;
20098ff8:	e0bff817 	ldw	r2,-32(fp)
20098ffc:	e0fff917 	ldw	r3,-28(fp)
20099000:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_low = write_address;
20099004:	e0bff817 	ldw	r2,-32(fp)
20099008:	e0fffa17 	ldw	r3,-24(fp)
2009900c:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
20099010:	e0bff817 	ldw	r2,-32(fp)
20099014:	e0c00117 	ldw	r3,4(fp)
20099018:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
2009901c:	e0bff817 	ldw	r2,-32(fp)
20099020:	e0fffb0b 	ldhu	r3,-20(fp)
20099024:	10c0030d 	sth	r3,12(r2)
    descriptor->read_burst_count = read_burst_count;
20099028:	e0bff817 	ldw	r2,-32(fp)
2009902c:	e0fffc03 	ldbu	r3,-16(fp)
20099030:	10c00385 	stb	r3,14(r2)
    descriptor->write_burst_count = write_burst_count;
20099034:	e0bff817 	ldw	r2,-32(fp)
20099038:	e0fffd03 	ldbu	r3,-12(fp)
2009903c:	10c003c5 	stb	r3,15(r2)
    descriptor->read_stride = read_stride;
20099040:	e0bff817 	ldw	r2,-32(fp)
20099044:	e0fffe0b 	ldhu	r3,-8(fp)
20099048:	10c0040d 	sth	r3,16(r2)
    descriptor->write_stride = write_stride;
2009904c:	e0bff817 	ldw	r2,-32(fp)
20099050:	e0ffff0b 	ldhu	r3,-4(fp)
20099054:	10c0048d 	sth	r3,18(r2)
    descriptor->read_address_high = NULL;
20099058:	e0bff817 	ldw	r2,-32(fp)
2009905c:	10000515 	stw	zero,20(r2)
    descriptor->write_address_high = NULL;
20099060:	e0bff817 	ldw	r2,-32(fp)
20099064:	10000615 	stw	zero,24(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
20099068:	e0800217 	ldw	r2,8(fp)
2009906c:	10e00034 	orhi	r3,r2,32768
20099070:	e0bff817 	ldw	r2,-32(fp)
20099074:	10c00715 	stw	r3,28(r2)

  return 0 ;
20099078:	0005883a 	mov	r2,zero

}
2009907c:	e037883a 	mov	sp,fp
20099080:	df000017 	ldw	fp,0(sp)
20099084:	dec00104 	addi	sp,sp,4
20099088:	f800283a 	ret

2009908c <alt_msgdma_descriptor_async_transfer>:
 */
static int alt_msgdma_descriptor_async_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
2009908c:	defff004 	addi	sp,sp,-64
20099090:	dfc00f15 	stw	ra,60(sp)
20099094:	df000e15 	stw	fp,56(sp)
20099098:	df000e04 	addi	fp,sp,56
2009909c:	e13ffd15 	stw	r4,-12(fp)
200990a0:	e17ffe15 	stw	r5,-8(fp)
200990a4:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control = 0;
200990a8:	e03ff315 	stw	zero,-52(fp)
    alt_irq_context context = 0;
200990ac:	e03ff415 	stw	zero,-48(fp)
    alt_u16 counter = 0;
200990b0:	e03ff20d 	sth	zero,-56(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
200990b4:	e0bffd17 	ldw	r2,-12(fp)
200990b8:	10800317 	ldw	r2,12(r2)
200990bc:	10800204 	addi	r2,r2,8
200990c0:	10800037 	ldwio	r2,0(r2)
	alt_msgdma_extended_descriptor *extended_desc)
{
    alt_u32 control = 0;
    alt_irq_context context = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
200990c4:	10bfffcc 	andi	r2,r2,65535
200990c8:	e0bff515 	stw	r2,-44(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
200990cc:	e0bffd17 	ldw	r2,-12(fp)
200990d0:	10800317 	ldw	r2,12(r2)
200990d4:	10800204 	addi	r2,r2,8
200990d8:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
200990dc:	1004d43a 	srli	r2,r2,16
200990e0:	e0bff615 	stw	r2,-40(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
200990e4:	e0bffd17 	ldw	r2,-12(fp)
200990e8:	10800917 	ldw	r2,36(r2)
200990ec:	e0fff617 	ldw	r3,-40(fp)
200990f0:	1880042e 	bgeu	r3,r2,20099104 <alt_msgdma_descriptor_async_transfer+0x78>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
200990f4:	e0bffd17 	ldw	r2,-12(fp)
200990f8:	10800917 	ldw	r2,36(r2)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
200990fc:	e0fff517 	ldw	r3,-44(fp)
20099100:	18800236 	bltu	r3,r2,2009910c <alt_msgdma_descriptor_async_transfer+0x80>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
	{
		/*at least one write or read FIFO descriptor buffer is full,
		returning so that this function is non-blocking*/
		return -ENOSPC;
20099104:	00bff904 	movi	r2,-28
20099108:	00008f06 	br	20099348 <alt_msgdma_descriptor_async_transfer+0x2bc>
	ALT_SEM_PEND (dev->regs_lock, 0);
	
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	read or write masters  */
	/* stop issuing more descriptors */
	control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
2009910c:	00800804 	movi	r2,32
20099110:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20099114:	0005303a 	rdctl	r2,status
20099118:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2009911c:	e0fff717 	ldw	r3,-36(fp)
20099120:	00bfff84 	movi	r2,-2
20099124:	1884703a 	and	r2,r3,r2
20099128:	1001703a 	wrctl	status,r2
  
  return context;
2009912c:	e0bff717 	ldw	r2,-36(fp)
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
20099130:	e0bff415 	stw	r2,-48(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
20099134:	e0bffd17 	ldw	r2,-12(fp)
20099138:	10800317 	ldw	r2,12(r2)
2009913c:	10800104 	addi	r2,r2,4
20099140:	e0fff317 	ldw	r3,-52(fp)
20099144:	10c00035 	stwio	r3,0(r2)
	/*
	* Clear any (previous) status register information
	* that might occlude our error checking later.
	*/
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
20099148:	e0bffd17 	ldw	r2,-12(fp)
2009914c:	10800317 	ldw	r2,12(r2)
20099150:	e0fffd17 	ldw	r3,-12(fp)
20099154:	18c00317 	ldw	r3,12(r3)
20099158:	18c00037 	ldwio	r3,0(r3)
2009915c:	10c00035 	stwio	r3,0(r2)
20099160:	e0bff417 	ldw	r2,-48(fp)
20099164:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20099168:	e0bff817 	ldw	r2,-32(fp)
2009916c:	1001703a 	wrctl	status,r2
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
20099170:	e0bffe17 	ldw	r2,-8(fp)
20099174:	10001a26 	beq	r2,zero,200991e0 <alt_msgdma_descriptor_async_transfer+0x154>
20099178:	e0bfff17 	ldw	r2,-4(fp)
2009917c:	1000181e 	bne	r2,zero,200991e0 <alt_msgdma_descriptor_async_transfer+0x154>
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
20099180:	00000d06 	br	200991b8 <alt_msgdma_descriptor_async_transfer+0x12c>
		dev->csr_base, dev->descriptor_base, standard_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
20099184:	01000044 	movi	r4,1
20099188:	009aae80 	call	2009aae8 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
2009918c:	e0bff20b 	ldhu	r2,-56(fp)
20099190:	1084e230 	cmpltui	r2,r2,5000
20099194:	1000051e 	bne	r2,zero,200991ac <alt_msgdma_descriptor_async_transfer+0x120>
            {
                alt_printf("time out after 5 msec while waiting" 
20099198:	01000034 	movhi	r4,0
2009919c:	21021204 	addi	r4,r4,2120
200991a0:	009b56c0 	call	2009b56c <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
200991a4:	00bff084 	movi	r2,-62
200991a8:	00006706 	br	20099348 <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
200991ac:	e0bff20b 	ldhu	r2,-56(fp)
200991b0:	10800044 	addi	r2,r2,1
200991b4:	e0bff20d 	sth	r2,-56(fp)

    if (NULL != standard_desc && NULL == extended_desc)
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
200991b8:	e0bffd17 	ldw	r2,-12(fp)
200991bc:	10c00317 	ldw	r3,12(r2)
200991c0:	e0bffd17 	ldw	r2,-12(fp)
200991c4:	10800417 	ldw	r2,16(r2)
200991c8:	1809883a 	mov	r4,r3
200991cc:	100b883a 	mov	r5,r2
200991d0:	e1bffe17 	ldw	r6,-8(fp)
200991d4:	0098b680 	call	20098b68 <alt_msgdma_write_standard_descriptor>
200991d8:	103fea1e 	bne	r2,zero,20099184 <__flash_rwdata_start+0xffffcb3c>
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
200991dc:	00001f06 	br	2009925c <alt_msgdma_descriptor_async_transfer+0x1d0>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
200991e0:	e0bffe17 	ldw	r2,-8(fp)
200991e4:	10001b1e 	bne	r2,zero,20099254 <alt_msgdma_descriptor_async_transfer+0x1c8>
200991e8:	e0bfff17 	ldw	r2,-4(fp)
200991ec:	10001926 	beq	r2,zero,20099254 <alt_msgdma_descriptor_async_transfer+0x1c8>
    {
        counter = 0; /* reset counter */
200991f0:	e03ff20d 	sth	zero,-56(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
200991f4:	00000d06 	br	2009922c <alt_msgdma_descriptor_async_transfer+0x1a0>
		dev->csr_base, 
		dev->descriptor_base, 
		extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
200991f8:	01000044 	movi	r4,1
200991fc:	009aae80 	call	2009aae8 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
20099200:	e0bff20b 	ldhu	r2,-56(fp)
20099204:	1084e230 	cmpltui	r2,r2,5000
20099208:	1000051e 	bne	r2,zero,20099220 <alt_msgdma_descriptor_async_transfer+0x194>
            {
                alt_printf("time out after 5 msec while waiting free FIFO buffer" 
2009920c:	01000034 	movhi	r4,0
20099210:	21022804 	addi	r4,r4,2208
20099214:	009b56c0 	call	2009b56c <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
20099218:	00bff084 	movi	r2,-62
2009921c:	00004a06 	br	20099348 <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
20099220:	e0bff20b 	ldhu	r2,-56(fp)
20099224:	10800044 	addi	r2,r2,1
20099228:	e0bff20d 	sth	r2,-56(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
2009922c:	e0bffd17 	ldw	r2,-12(fp)
20099230:	10c00317 	ldw	r3,12(r2)
20099234:	e0bffd17 	ldw	r2,-12(fp)
20099238:	10800417 	ldw	r2,16(r2)
2009923c:	1809883a 	mov	r4,r3
20099240:	100b883a 	mov	r5,r2
20099244:	e1bfff17 	ldw	r6,-4(fp)
20099248:	0098bfc0 	call	20098bfc <alt_msgdma_write_extended_descriptor>
2009924c:	103fea1e 	bne	r2,zero,200991f8 <__flash_rwdata_start+0xffffcbb0>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
20099250:	00000206 	br	2009925c <alt_msgdma_descriptor_async_transfer+0x1d0>
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
20099254:	00bfffc4 	movi	r2,-1
20099258:	00003b06 	br	20099348 <alt_msgdma_descriptor_async_transfer+0x2bc>
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
2009925c:	e0bffd17 	ldw	r2,-12(fp)
20099260:	10800b17 	ldw	r2,44(r2)
20099264:	10001c26 	beq	r2,zero,200992d8 <alt_msgdma_descriptor_async_transfer+0x24c>
    {

        control |= (dev->control |
20099268:	e0bffd17 	ldw	r2,-12(fp)
2009926c:	10c00d17 	ldw	r3,52(r2)
20099270:	e0bff317 	ldw	r2,-52(fp)
20099274:	1884b03a 	or	r2,r3,r2
20099278:	10800514 	ori	r2,r2,20
2009927c:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
20099280:	e0fff317 	ldw	r3,-52(fp)
20099284:	00bff7c4 	movi	r2,-33
20099288:	1884703a 	and	r2,r3,r2
2009928c:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20099290:	0005303a 	rdctl	r2,status
20099294:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20099298:	e0fff917 	ldw	r3,-28(fp)
2009929c:	00bfff84 	movi	r2,-2
200992a0:	1884703a 	and	r2,r3,r2
200992a4:	1001703a 	wrctl	status,r2
  
  return context;
200992a8:	e0bff917 	ldw	r2,-28(fp)
    /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
200992ac:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
200992b0:	e0bffd17 	ldw	r2,-12(fp)
200992b4:	10800317 	ldw	r2,12(r2)
200992b8:	10800104 	addi	r2,r2,4
200992bc:	e0fff317 	ldw	r3,-52(fp)
200992c0:	10c00035 	stwio	r3,0(r2)
200992c4:	e0bff417 	ldw	r2,-48(fp)
200992c8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200992cc:	e0bffa17 	ldw	r2,-24(fp)
200992d0:	1001703a 	wrctl	status,r2
200992d4:	00001b06 	br	20099344 <alt_msgdma_descriptor_async_transfer+0x2b8>
    *   - Stop on an error with any particular descriptor
    *   - Disable interrupt generation
    */
    else
    {
        control |= (dev->control |
200992d8:	e0bffd17 	ldw	r2,-12(fp)
200992dc:	10c00d17 	ldw	r3,52(r2)
200992e0:	e0bff317 	ldw	r2,-52(fp)
200992e4:	1884b03a 	or	r2,r3,r2
200992e8:	10800114 	ori	r2,r2,4
200992ec:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
200992f0:	e0fff317 	ldw	r3,-52(fp)
200992f4:	00bff3c4 	movi	r2,-49
200992f8:	1884703a 	and	r2,r3,r2
200992fc:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20099300:	0005303a 	rdctl	r2,status
20099304:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20099308:	e0fffb17 	ldw	r3,-20(fp)
2009930c:	00bfff84 	movi	r2,-2
20099310:	1884703a 	and	r2,r3,r2
20099314:	1001703a 	wrctl	status,r2
  
  return context;
20099318:	e0bffb17 	ldw	r2,-20(fp)
                   (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all();
2009931c:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
20099320:	e0bffd17 	ldw	r2,-12(fp)
20099324:	10800317 	ldw	r2,12(r2)
20099328:	10800104 	addi	r2,r2,4
2009932c:	e0fff317 	ldw	r3,-52(fp)
20099330:	10c00035 	stwio	r3,0(r2)
20099334:	e0bff417 	ldw	r2,-48(fp)
20099338:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2009933c:	e0bffc17 	ldw	r2,-16(fp)
20099340:	1001703a 	wrctl	status,r2
	 * Now that access to the registers is complete, release the registers
     * semaphore so that other threads can access the registers.
     */
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
20099344:	0005883a 	mov	r2,zero
}
20099348:	e037883a 	mov	sp,fp
2009934c:	dfc00117 	ldw	ra,4(sp)
20099350:	df000017 	ldw	fp,0(sp)
20099354:	dec00204 	addi	sp,sp,8
20099358:	f800283a 	ret

2009935c <alt_msgdma_descriptor_sync_transfer>:
 */
static int alt_msgdma_descriptor_sync_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
2009935c:	defff004 	addi	sp,sp,-64
20099360:	dfc00f15 	stw	ra,60(sp)
20099364:	df000e15 	stw	fp,56(sp)
20099368:	df000e04 	addi	fp,sp,56
2009936c:	e13ffd15 	stw	r4,-12(fp)
20099370:	e17ffe15 	stw	r5,-8(fp)
20099374:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control=0;
20099378:	e03ff615 	stw	zero,-40(fp)
    alt_irq_context context=0;
2009937c:	e03ff715 	stw	zero,-36(fp)
    alt_u32 csr_status = 0;
20099380:	e03ff215 	stw	zero,-56(fp)
    alt_u16 counter = 0;
20099384:	e03ff30d 	sth	zero,-52(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
20099388:	e0bffd17 	ldw	r2,-12(fp)
2009938c:	10800317 	ldw	r2,12(r2)
20099390:	10800204 	addi	r2,r2,8
20099394:	10800037 	ldwio	r2,0(r2)
{
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
20099398:	10bfffcc 	andi	r2,r2,65535
2009939c:	e0bff415 	stw	r2,-48(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
200993a0:	e0bffd17 	ldw	r2,-12(fp)
200993a4:	10800317 	ldw	r2,12(r2)
200993a8:	10800204 	addi	r2,r2,8
200993ac:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
200993b0:	1004d43a 	srli	r2,r2,16
200993b4:	e0bff515 	stw	r2,-44(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
    alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK | 
200993b8:	00807804 	movi	r2,480
200993bc:	e0bff815 	stw	r2,-32(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
200993c0:	00001906 	br	20099428 <alt_msgdma_descriptor_sync_transfer+0xcc>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
200993c4:	01000044 	movi	r4,1
200993c8:	009aae80 	call	2009aae8 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
200993cc:	e0bff30b 	ldhu	r2,-52(fp)
200993d0:	1084e230 	cmpltui	r2,r2,5000
200993d4:	1000051e 	bne	r2,zero,200993ec <alt_msgdma_descriptor_sync_transfer+0x90>
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
200993d8:	01000034 	movhi	r4,0
200993dc:	21023e04 	addi	r4,r4,2296
200993e0:	009b56c0 	call	2009b56c <alt_printf>
				" for storing descriptor\n");
            return -ETIME;
200993e4:	00bff084 	movi	r2,-62
200993e8:	0000b506 	br	200996c0 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;  
200993ec:	e0bff30b 	ldhu	r2,-52(fp)
200993f0:	10800044 	addi	r2,r2,1
200993f4:	e0bff30d 	sth	r2,-52(fp)
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
200993f8:	e0bffd17 	ldw	r2,-12(fp)
200993fc:	10800317 	ldw	r2,12(r2)
20099400:	10800204 	addi	r2,r2,8
20099404:	10800037 	ldwio	r2,0(r2)
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
				" for storing descriptor\n");
            return -ETIME;
        }
        counter++;  
        fifo_read_fill_level = (
20099408:	10bfffcc 	andi	r2,r2,65535
2009940c:	e0bff415 	stw	r2,-48(fp)
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
20099410:	e0bffd17 	ldw	r2,-12(fp)
20099414:	10800317 	ldw	r2,12(r2)
20099418:	10800204 	addi	r2,r2,8
2009941c:	10800037 	ldwio	r2,0(r2)
        counter++;  
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
20099420:	1004d43a 	srli	r2,r2,16
20099424:	e0bff515 	stw	r2,-44(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
20099428:	e0bffd17 	ldw	r2,-12(fp)
2009942c:	10800917 	ldw	r2,36(r2)
20099430:	e0fff517 	ldw	r3,-44(fp)
20099434:	18bfe32e 	bgeu	r3,r2,200993c4 <__flash_rwdata_start+0xffffcd7c>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
20099438:	e0bffd17 	ldw	r2,-12(fp)
2009943c:	10800917 	ldw	r2,36(r2)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
20099440:	e0fff417 	ldw	r3,-48(fp)
20099444:	18bfdf2e 	bgeu	r3,r2,200993c4 <__flash_rwdata_start+0xffffcd7c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20099448:	0005303a 	rdctl	r2,status
2009944c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20099450:	e0fff917 	ldw	r3,-28(fp)
20099454:	00bfff84 	movi	r2,-2
20099458:	1884703a 	and	r2,r3,r2
2009945c:	1001703a 	wrctl	status,r2
  
  return context;
20099460:	e0bff917 	ldw	r2,-28(fp)
	ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
20099464:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
20099468:	e0bffd17 	ldw	r2,-12(fp)
2009946c:	10800317 	ldw	r2,12(r2)
20099470:	10800104 	addi	r2,r2,4
20099474:	00c00804 	movi	r3,32
20099478:	10c00035 	stwio	r3,0(r2)
        ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
2009947c:	e0bffd17 	ldw	r2,-12(fp)
20099480:	10800317 	ldw	r2,12(r2)
20099484:	e0fffd17 	ldw	r3,-12(fp)
20099488:	18c00317 	ldw	r3,12(r3)
2009948c:	18c00037 	ldwio	r3,0(r3)
20099490:	10c00035 	stwio	r3,0(r2)
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
20099494:	e0bffe17 	ldw	r2,-8(fp)
20099498:	10001b26 	beq	r2,zero,20099508 <alt_msgdma_descriptor_sync_transfer+0x1ac>
2009949c:	e0bfff17 	ldw	r2,-4(fp)
200994a0:	1000191e 	bne	r2,zero,20099508 <alt_msgdma_descriptor_sync_transfer+0x1ac>
    {
        counter = 0; /* reset counter */
200994a4:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
200994a8:	00000d06 	br	200994e0 <alt_msgdma_descriptor_sync_transfer+0x184>
			dev->csr_base, dev->descriptor_base, standard_desc))
        {     
            alt_busy_sleep(1); /* delay 1us */
200994ac:	01000044 	movi	r4,1
200994b0:	009aae80 	call	2009aae8 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
200994b4:	e0bff30b 	ldhu	r2,-52(fp)
200994b8:	1084e230 	cmpltui	r2,r2,5000
200994bc:	1000051e 	bne	r2,zero,200994d4 <alt_msgdma_descriptor_sync_transfer+0x178>
            {
                alt_printf("time out after 5 msec while writing standard" 
200994c0:	01000034 	movhi	r4,0
200994c4:	21025204 	addi	r4,r4,2376
200994c8:	009b56c0 	call	2009b56c <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
200994cc:	00bff084 	movi	r2,-62
200994d0:	00007b06 	br	200996c0 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;    
200994d4:	e0bff30b 	ldhu	r2,-52(fp)
200994d8:	10800044 	addi	r2,r2,1
200994dc:	e0bff30d 	sth	r2,-52(fp)
    if (NULL != standard_desc && NULL == extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
200994e0:	e0bffd17 	ldw	r2,-12(fp)
200994e4:	10c00317 	ldw	r3,12(r2)
200994e8:	e0bffd17 	ldw	r2,-12(fp)
200994ec:	10800417 	ldw	r2,16(r2)
200994f0:	1809883a 	mov	r4,r3
200994f4:	100b883a 	mov	r5,r2
200994f8:	e1bffe17 	ldw	r6,-8(fp)
200994fc:	0098b680 	call	20098b68 <alt_msgdma_write_standard_descriptor>
20099500:	103fea1e 	bne	r2,zero,200994ac <__flash_rwdata_start+0xffffce64>
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
20099504:	00001f06 	br	20099584 <alt_msgdma_descriptor_sync_transfer+0x228>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
20099508:	e0bffe17 	ldw	r2,-8(fp)
2009950c:	10001b1e 	bne	r2,zero,2009957c <alt_msgdma_descriptor_sync_transfer+0x220>
20099510:	e0bfff17 	ldw	r2,-4(fp)
20099514:	10001926 	beq	r2,zero,2009957c <alt_msgdma_descriptor_sync_transfer+0x220>
    {
        counter = 0; /* reset counter */
20099518:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
2009951c:	00000d06 	br	20099554 <alt_msgdma_descriptor_sync_transfer+0x1f8>
			dev->csr_base, dev->descriptor_base, extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
20099520:	01000044 	movi	r4,1
20099524:	009aae80 	call	2009aae8 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
20099528:	e0bff30b 	ldhu	r2,-52(fp)
2009952c:	1084e230 	cmpltui	r2,r2,5000
20099530:	1000051e 	bne	r2,zero,20099548 <alt_msgdma_descriptor_sync_transfer+0x1ec>
            {
                alt_printf("time out after 5 msec while writing extended" 
20099534:	01000034 	movhi	r4,0
20099538:	21026304 	addi	r4,r4,2444
2009953c:	009b56c0 	call	2009b56c <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
20099540:	00bff084 	movi	r2,-62
20099544:	00005e06 	br	200996c0 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;
20099548:	e0bff30b 	ldhu	r2,-52(fp)
2009954c:	10800044 	addi	r2,r2,1
20099550:	e0bff30d 	sth	r2,-52(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
20099554:	e0bffd17 	ldw	r2,-12(fp)
20099558:	10c00317 	ldw	r3,12(r2)
2009955c:	e0bffd17 	ldw	r2,-12(fp)
20099560:	10800417 	ldw	r2,16(r2)
20099564:	1809883a 	mov	r4,r3
20099568:	100b883a 	mov	r5,r2
2009956c:	e1bfff17 	ldw	r6,-4(fp)
20099570:	0098bfc0 	call	20098bfc <alt_msgdma_write_extended_descriptor>
20099574:	103fea1e 	bne	r2,zero,20099520 <__flash_rwdata_start+0xffffced8>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
20099578:	00000206 	br	20099584 <alt_msgdma_descriptor_sync_transfer+0x228>
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
2009957c:	00bfffc4 	movi	r2,-1
20099580:	00004f06 	br	200996c0 <alt_msgdma_descriptor_sync_transfer+0x364>
    * Set up msgdma controller to:
    * - Disable interrupt generation
    * - Run once a valid descriptor is written to controller
    * - Stop on an error with any particular descriptor
    */
     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
20099584:	e0bffd17 	ldw	r2,-12(fp)
20099588:	10800317 	ldw	r2,12(r2)
2009958c:	10800104 	addi	r2,r2,4
20099590:	e0fffd17 	ldw	r3,-12(fp)
20099594:	19000d17 	ldw	r4,52(r3)
20099598:	00fff2c4 	movi	r3,-53
2009959c:	20c6703a 	and	r3,r4,r3
200995a0:	18c00114 	ori	r3,r3,4
200995a4:	10c00035 	stwio	r3,0(r2)
200995a8:	e0bff717 	ldw	r2,-36(fp)
200995ac:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200995b0:	e0bffa17 	ldw	r2,-24(fp)
200995b4:	1001703a 	wrctl	status,r2
		(~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
		(~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK)) ;
	 
	alt_irq_enable_all(context);
     
    counter = 0; /* reset counter */ 
200995b8:	e03ff30d 	sth	zero,-52(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
200995bc:	e0bffd17 	ldw	r2,-12(fp)
200995c0:	10800317 	ldw	r2,12(r2)
200995c4:	10800037 	ldwio	r2,0(r2)
200995c8:	e0bff215 	stw	r2,-56(fp)
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
200995cc:	00001106 	br	20099614 <alt_msgdma_descriptor_sync_transfer+0x2b8>
    {
        alt_busy_sleep(1); /* delay 1us */
200995d0:	01000044 	movi	r4,1
200995d4:	009aae80 	call	2009aae8 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
200995d8:	e0bff30b 	ldhu	r2,-52(fp)
200995dc:	1084e230 	cmpltui	r2,r2,5000
200995e0:	1000051e 	bne	r2,zero,200995f8 <alt_msgdma_descriptor_sync_transfer+0x29c>
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
200995e4:	01000034 	movhi	r4,0
200995e8:	21027404 	addi	r4,r4,2512
200995ec:	009b56c0 	call	2009b56c <alt_printf>
			* Now that access to the registers is complete, release the registers
			* semaphore so that other threads can access the registers.
			*/
			ALT_SEM_POST (dev->regs_lock);
			
            return -ETIME;
200995f0:	00bff084 	movi	r2,-62
200995f4:	00003206 	br	200996c0 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;
200995f8:	e0bff30b 	ldhu	r2,-52(fp)
200995fc:	10800044 	addi	r2,r2,1
20099600:	e0bff30d 	sth	r2,-52(fp)
        csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
20099604:	e0bffd17 	ldw	r2,-12(fp)
20099608:	10800317 	ldw	r2,12(r2)
2009960c:	10800037 	ldwio	r2,0(r2)
20099610:	e0bff215 	stw	r2,-56(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
20099614:	e0fff217 	ldw	r3,-56(fp)
20099618:	e0bff817 	ldw	r2,-32(fp)
2009961c:	1884703a 	and	r2,r3,r2
20099620:	1000031e 	bne	r2,zero,20099630 <alt_msgdma_descriptor_sync_transfer+0x2d4>
20099624:	e0bff217 	ldw	r2,-56(fp)
20099628:	1080004c 	andi	r2,r2,1
2009962c:	103fe81e 	bne	r2,zero,200995d0 <__flash_rwdata_start+0xffffcf88>
    }
    

    /*Errors or conditions causing the dispatcher stopping issuing read/write 
      commands to masters*/
    if(0 != (csr_status & error))
20099630:	e0fff217 	ldw	r3,-56(fp)
20099634:	e0bff817 	ldw	r2,-32(fp)
20099638:	1884703a 	and	r2,r3,r2
2009963c:	10000226 	beq	r2,zero,20099648 <alt_msgdma_descriptor_sync_transfer+0x2ec>
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        return error;
20099640:	e0bff817 	ldw	r2,-32(fp)
20099644:	00001e06 	br	200996c0 <alt_msgdma_descriptor_sync_transfer+0x364>
    }

    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) | 
20099648:	e0bffd17 	ldw	r2,-12(fp)
2009964c:	10800317 	ldw	r2,12(r2)
20099650:	10800104 	addi	r2,r2,4
20099654:	10800037 	ldwio	r2,0(r2)
20099658:	10800814 	ori	r2,r2,32
2009965c:	e0bff615 	stw	r2,-40(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20099660:	0005303a 	rdctl	r2,status
20099664:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20099668:	e0fffb17 	ldw	r3,-20(fp)
2009966c:	00bfff84 	movi	r2,-2
20099670:	1884703a 	and	r2,r3,r2
20099674:	1001703a 	wrctl	status,r2
  
  return context;
20099678:	e0bffb17 	ldw	r2,-20(fp)
	ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();  
2009967c:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
20099680:	e0bffd17 	ldw	r2,-12(fp)
20099684:	10800317 	ldw	r2,12(r2)
20099688:	10800104 	addi	r2,r2,4
2009968c:	e0fff617 	ldw	r3,-40(fp)
20099690:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
20099694:	e0bffd17 	ldw	r2,-12(fp)
20099698:	10800317 	ldw	r2,12(r2)
2009969c:	e0fffd17 	ldw	r3,-12(fp)
200996a0:	18c00317 	ldw	r3,12(r3)
200996a4:	18c00037 	ldwio	r3,0(r3)
200996a8:	10c00035 	stwio	r3,0(r2)
200996ac:	e0bff717 	ldw	r2,-36(fp)
200996b0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200996b4:	e0bffc17 	ldw	r2,-16(fp)
200996b8:	1001703a 	wrctl	status,r2
	* Now that access to the registers is complete, release the registers
	* semaphore so that other threads can access the registers.
	*/
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
200996bc:	0005883a 	mov	r2,zero

}
200996c0:	e037883a 	mov	sp,fp
200996c4:	dfc00117 	ldw	ra,4(sp)
200996c8:	df000017 	ldw	fp,0(sp)
200996cc:	dec00204 	addi	sp,sp,8
200996d0:	f800283a 	ret

200996d4 <alt_msgdma_construct_standard_st_to_mm_descriptor>:
 */
int alt_msgdma_construct_standard_st_to_mm_descriptor (
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *write_address, alt_u32 length, alt_u32 control)
{
200996d4:	defff804 	addi	sp,sp,-32
200996d8:	dfc00715 	stw	ra,28(sp)
200996dc:	df000615 	stw	fp,24(sp)
200996e0:	df000604 	addi	fp,sp,24
200996e4:	e13ffc15 	stw	r4,-16(fp)
200996e8:	e17ffd15 	stw	r5,-12(fp)
200996ec:	e1bffe15 	stw	r6,-8(fp)
200996f0:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, NULL, 
200996f4:	e0bfff17 	ldw	r2,-4(fp)
200996f8:	d8800015 	stw	r2,0(sp)
200996fc:	e0800217 	ldw	r2,8(fp)
20099700:	d8800115 	stw	r2,4(sp)
20099704:	e13ffc17 	ldw	r4,-16(fp)
20099708:	e17ffd17 	ldw	r5,-12(fp)
2009970c:	000d883a 	mov	r6,zero
20099710:	e1fffe17 	ldw	r7,-8(fp)
20099714:	0098eac0 	call	20098eac <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
20099718:	e037883a 	mov	sp,fp
2009971c:	dfc00117 	ldw	ra,4(sp)
20099720:	df000017 	ldw	fp,0(sp)
20099724:	dec00204 	addi	sp,sp,8
20099728:	f800283a 	ret

2009972c <alt_msgdma_construct_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address,
	alt_u32 length,
	alt_u32 control)
{
2009972c:	defff804 	addi	sp,sp,-32
20099730:	dfc00715 	stw	ra,28(sp)
20099734:	df000615 	stw	fp,24(sp)
20099738:	df000604 	addi	fp,sp,24
2009973c:	e13ffc15 	stw	r4,-16(fp)
20099740:	e17ffd15 	stw	r5,-12(fp)
20099744:	e1bffe15 	stw	r6,-8(fp)
20099748:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
2009974c:	e0bfff17 	ldw	r2,-4(fp)
20099750:	d8800015 	stw	r2,0(sp)
20099754:	e0800217 	ldw	r2,8(fp)
20099758:	d8800115 	stw	r2,4(sp)
2009975c:	e13ffc17 	ldw	r4,-16(fp)
20099760:	e17ffd17 	ldw	r5,-12(fp)
20099764:	e1bffe17 	ldw	r6,-8(fp)
20099768:	000f883a 	mov	r7,zero
2009976c:	0098eac0 	call	20098eac <alt_msgdma_construct_standard_descriptor>
            NULL, length, control);

}
20099770:	e037883a 	mov	sp,fp
20099774:	dfc00117 	ldw	ra,4(sp)
20099778:	df000017 	ldw	fp,0(sp)
2009977c:	dec00204 	addi	sp,sp,8
20099780:	f800283a 	ret

20099784 <alt_msgdma_construct_standard_mm_to_mm_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
20099784:	defff804 	addi	sp,sp,-32
20099788:	dfc00715 	stw	ra,28(sp)
2009978c:	df000615 	stw	fp,24(sp)
20099790:	df000604 	addi	fp,sp,24
20099794:	e13ffc15 	stw	r4,-16(fp)
20099798:	e17ffd15 	stw	r5,-12(fp)
2009979c:	e1bffe15 	stw	r6,-8(fp)
200997a0:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
200997a4:	e0800217 	ldw	r2,8(fp)
200997a8:	d8800015 	stw	r2,0(sp)
200997ac:	e0800317 	ldw	r2,12(fp)
200997b0:	d8800115 	stw	r2,4(sp)
200997b4:	e13ffc17 	ldw	r4,-16(fp)
200997b8:	e17ffd17 	ldw	r5,-12(fp)
200997bc:	e1bffe17 	ldw	r6,-8(fp)
200997c0:	e1ffff17 	ldw	r7,-4(fp)
200997c4:	0098eac0 	call	20098eac <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
200997c8:	e037883a 	mov	sp,fp
200997cc:	dfc00117 	ldw	ra,4(sp)
200997d0:	df000017 	ldw	fp,0(sp)
200997d4:	dec00204 	addi	sp,sp,8
200997d8:	f800283a 	ret

200997dc <alt_msgdma_construct_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 write_burst_count, 
	alt_u16 write_stride)
{
200997dc:	defff004 	addi	sp,sp,-64
200997e0:	dfc00f15 	stw	ra,60(sp)
200997e4:	df000e15 	stw	fp,56(sp)
200997e8:	df000e04 	addi	fp,sp,56
200997ec:	e13ff915 	stw	r4,-28(fp)
200997f0:	e17ffa15 	stw	r5,-24(fp)
200997f4:	e1bffb15 	stw	r6,-20(fp)
200997f8:	e1fffc15 	stw	r7,-16(fp)
200997fc:	e1000317 	ldw	r4,12(fp)
20099800:	e0c00417 	ldw	r3,16(fp)
20099804:	e0800517 	ldw	r2,20(fp)
20099808:	e13ffd0d 	sth	r4,-12(fp)
2009980c:	e0fffe05 	stb	r3,-8(fp)
20099810:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
20099814:	e13ffd0b 	ldhu	r4,-12(fp)
20099818:	e0fffe03 	ldbu	r3,-8(fp)
2009981c:	e0bfff0b 	ldhu	r2,-4(fp)
20099820:	e17ffc17 	ldw	r5,-16(fp)
20099824:	d9400015 	stw	r5,0(sp)
20099828:	e1400217 	ldw	r5,8(fp)
2009982c:	d9400115 	stw	r5,4(sp)
20099830:	d9000215 	stw	r4,8(sp)
20099834:	d8000315 	stw	zero,12(sp)
20099838:	d8c00415 	stw	r3,16(sp)
2009983c:	d8000515 	stw	zero,20(sp)
20099840:	d8800615 	stw	r2,24(sp)
20099844:	e13ff917 	ldw	r4,-28(fp)
20099848:	e17ffa17 	ldw	r5,-24(fp)
2009984c:	000d883a 	mov	r6,zero
20099850:	e1fffb17 	ldw	r7,-20(fp)
20099854:	0098f380 	call	20098f38 <alt_msgdma_construct_extended_descriptor>
            NULL, write_address, length, control, sequence_number, 0, 
            write_burst_count, 0, write_stride);
}
20099858:	e037883a 	mov	sp,fp
2009985c:	dfc00117 	ldw	ra,4(sp)
20099860:	df000017 	ldw	fp,0(sp)
20099864:	dec00204 	addi	sp,sp,8
20099868:	f800283a 	ret

2009986c <alt_msgdma_construct_extended_mm_to_st_descriptor>:
	alt_u32 length,
	alt_u32 control,
	alt_u16 sequence_number,
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
2009986c:	defff004 	addi	sp,sp,-64
20099870:	dfc00f15 	stw	ra,60(sp)
20099874:	df000e15 	stw	fp,56(sp)
20099878:	df000e04 	addi	fp,sp,56
2009987c:	e13ff915 	stw	r4,-28(fp)
20099880:	e17ffa15 	stw	r5,-24(fp)
20099884:	e1bffb15 	stw	r6,-20(fp)
20099888:	e1fffc15 	stw	r7,-16(fp)
2009988c:	e1000317 	ldw	r4,12(fp)
20099890:	e0c00417 	ldw	r3,16(fp)
20099894:	e0800517 	ldw	r2,20(fp)
20099898:	e13ffd0d 	sth	r4,-12(fp)
2009989c:	e0fffe05 	stb	r3,-8(fp)
200998a0:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, read_address, 
200998a4:	e13ffd0b 	ldhu	r4,-12(fp)
200998a8:	e0fffe03 	ldbu	r3,-8(fp)
200998ac:	e0bfff0b 	ldhu	r2,-4(fp)
200998b0:	e17ffc17 	ldw	r5,-16(fp)
200998b4:	d9400015 	stw	r5,0(sp)
200998b8:	e1400217 	ldw	r5,8(fp)
200998bc:	d9400115 	stw	r5,4(sp)
200998c0:	d9000215 	stw	r4,8(sp)
200998c4:	d8c00315 	stw	r3,12(sp)
200998c8:	d8000415 	stw	zero,16(sp)
200998cc:	d8800515 	stw	r2,20(sp)
200998d0:	d8000615 	stw	zero,24(sp)
200998d4:	e13ff917 	ldw	r4,-28(fp)
200998d8:	e17ffa17 	ldw	r5,-24(fp)
200998dc:	e1bffb17 	ldw	r6,-20(fp)
200998e0:	000f883a 	mov	r7,zero
200998e4:	0098f380 	call	20098f38 <alt_msgdma_construct_extended_descriptor>
            NULL, length, control, sequence_number, read_burst_count, 0, 
            read_stride, 0);

}
200998e8:	e037883a 	mov	sp,fp
200998ec:	dfc00117 	ldw	ra,4(sp)
200998f0:	df000017 	ldw	fp,0(sp)
200998f4:	dec00204 	addi	sp,sp,8
200998f8:	f800283a 	ret

200998fc <alt_msgdma_construct_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
200998fc:	deffee04 	addi	sp,sp,-72
20099900:	dfc01115 	stw	ra,68(sp)
20099904:	df001015 	stw	fp,64(sp)
20099908:	df001004 	addi	fp,sp,64
2009990c:	e13ff715 	stw	r4,-36(fp)
20099910:	e17ff815 	stw	r5,-32(fp)
20099914:	e1bff915 	stw	r6,-28(fp)
20099918:	e1fffa15 	stw	r7,-24(fp)
2009991c:	e1800417 	ldw	r6,16(fp)
20099920:	e1400517 	ldw	r5,20(fp)
20099924:	e1000617 	ldw	r4,24(fp)
20099928:	e0c00717 	ldw	r3,28(fp)
2009992c:	e0800817 	ldw	r2,32(fp)
20099930:	e1bffb0d 	sth	r6,-20(fp)
20099934:	e17ffc05 	stb	r5,-16(fp)
20099938:	e13ffd05 	stb	r4,-12(fp)
2009993c:	e0fffe0d 	sth	r3,-8(fp)
20099940:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
20099944:	e1bffb0b 	ldhu	r6,-20(fp)
20099948:	e17ffc03 	ldbu	r5,-16(fp)
2009994c:	e13ffd03 	ldbu	r4,-12(fp)
20099950:	e0fffe0b 	ldhu	r3,-8(fp)
20099954:	e0bfff0b 	ldhu	r2,-4(fp)
20099958:	e1c00217 	ldw	r7,8(fp)
2009995c:	d9c00015 	stw	r7,0(sp)
20099960:	e1c00317 	ldw	r7,12(fp)
20099964:	d9c00115 	stw	r7,4(sp)
20099968:	d9800215 	stw	r6,8(sp)
2009996c:	d9400315 	stw	r5,12(sp)
20099970:	d9000415 	stw	r4,16(sp)
20099974:	d8c00515 	stw	r3,20(sp)
20099978:	d8800615 	stw	r2,24(sp)
2009997c:	e13ff717 	ldw	r4,-36(fp)
20099980:	e17ff817 	ldw	r5,-32(fp)
20099984:	e1bff917 	ldw	r6,-28(fp)
20099988:	e1fffa17 	ldw	r7,-24(fp)
2009998c:	0098f380 	call	20098f38 <alt_msgdma_construct_extended_descriptor>
            read_address, write_address, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
20099990:	e037883a 	mov	sp,fp
20099994:	dfc00117 	ldw	ra,4(sp)
20099998:	df000017 	ldw	fp,0(sp)
2009999c:	dec00204 	addi	sp,sp,8
200999a0:	f800283a 	ret

200999a4 <alt_msgdma_construct_prefetcher_standard_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
200999a4:	defffb04 	addi	sp,sp,-20
200999a8:	df000415 	stw	fp,16(sp)
200999ac:	df000404 	addi	fp,sp,16
200999b0:	e13ffc15 	stw	r4,-16(fp)
200999b4:	e17ffd15 	stw	r5,-12(fp)
200999b8:	e1bffe15 	stw	r6,-8(fp)
200999bc:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
200999c0:	e0bffc17 	ldw	r2,-16(fp)
200999c4:	10c01217 	ldw	r3,72(r2)
200999c8:	e0800117 	ldw	r2,4(fp)
200999cc:	18800436 	bltu	r3,r2,200999e0 <alt_msgdma_construct_prefetcher_standard_descriptor+0x3c>
       dev->enhanced_features != 0
200999d0:	e0bffc17 	ldw	r2,-16(fp)
200999d4:	10801703 	ldbu	r2,92(r2)
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
200999d8:	10803fcc 	andi	r2,r2,255
200999dc:	10000226 	beq	r2,zero,200999e8 <alt_msgdma_construct_prefetcher_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
200999e0:	00bffa84 	movi	r2,-22
200999e4:	00001406 	br	20099a38 <alt_msgdma_construct_prefetcher_standard_descriptor+0x94>
    }
    descriptor->read_address = read_address;
200999e8:	e0bffd17 	ldw	r2,-12(fp)
200999ec:	e0fffe17 	ldw	r3,-8(fp)
200999f0:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
200999f4:	e0bffd17 	ldw	r2,-12(fp)
200999f8:	e0ffff17 	ldw	r3,-4(fp)
200999fc:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
20099a00:	e0bffd17 	ldw	r2,-12(fp)
20099a04:	e0c00117 	ldw	r3,4(fp)
20099a08:	10c00215 	stw	r3,8(r2)
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
20099a0c:	e0fffd17 	ldw	r3,-12(fp)
20099a10:	e0bffd17 	ldw	r2,-12(fp)
20099a14:	10c00315 	stw	r3,12(r2)
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
20099a18:	e0c00217 	ldw	r3,8(fp)
20099a1c:	00900034 	movhi	r2,16384
20099a20:	10bfffc4 	addi	r2,r2,-1
20099a24:	1884703a 	and	r2,r3,r2
20099a28:	10e00034 	orhi	r3,r2,32768
    descriptor->transfer_length = length;
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
20099a2c:	e0bffd17 	ldw	r2,-12(fp)
20099a30:	10c00715 	stw	r3,28(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
20099a34:	0005883a 	mov	r2,zero
}
20099a38:	e037883a 	mov	sp,fp
20099a3c:	df000017 	ldw	fp,0(sp)
20099a40:	dec00104 	addi	sp,sp,4
20099a44:	f800283a 	ret

20099a48 <alt_msgdma_construct_prefetcher_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
20099a48:	defff404 	addi	sp,sp,-48
20099a4c:	df000b15 	stw	fp,44(sp)
20099a50:	df000b04 	addi	fp,sp,44
20099a54:	e13ff715 	stw	r4,-36(fp)
20099a58:	e17ff815 	stw	r5,-32(fp)
20099a5c:	e1bff915 	stw	r6,-28(fp)
20099a60:	e1fffa15 	stw	r7,-24(fp)
20099a64:	e1800517 	ldw	r6,20(fp)
20099a68:	e1400617 	ldw	r5,24(fp)
20099a6c:	e1000717 	ldw	r4,28(fp)
20099a70:	e0c00817 	ldw	r3,32(fp)
20099a74:	e0800917 	ldw	r2,36(fp)
20099a78:	e1bffb0d 	sth	r6,-20(fp)
20099a7c:	e17ffc05 	stb	r5,-16(fp)
20099a80:	e13ffd05 	stb	r4,-12(fp)
20099a84:	e0fffe0d 	sth	r3,-8(fp)
20099a88:	e0bfff0d 	sth	r2,-4(fp)
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
20099a8c:	e0bff717 	ldw	r2,-36(fp)
20099a90:	10c01217 	ldw	r3,72(r2)
20099a94:	e0800317 	ldw	r2,12(fp)
20099a98:	18801936 	bltu	r3,r2,20099b00 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
20099a9c:	e13ff717 	ldw	r4,-36(fp)
20099aa0:	20801317 	ldw	r2,76(r4)
20099aa4:	20c01417 	ldw	r3,80(r4)
20099aa8:	e13ffe0b 	ldhu	r4,-8(fp)
20099aac:	213fffcc 	andi	r4,r4,65535
20099ab0:	2015883a 	mov	r10,r4
20099ab4:	0017883a 	mov	r11,zero
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
20099ab8:	1ac01136 	bltu	r3,r11,20099b00 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
20099abc:	58c0011e 	bne	r11,r3,20099ac4 <alt_msgdma_construct_prefetcher_extended_descriptor+0x7c>
20099ac0:	12800f36 	bltu	r2,r10,20099b00 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
20099ac4:	e13ff717 	ldw	r4,-36(fp)
20099ac8:	20801317 	ldw	r2,76(r4)
20099acc:	20c01417 	ldw	r3,80(r4)
20099ad0:	e13fff0b 	ldhu	r4,-4(fp)
20099ad4:	213fffcc 	andi	r4,r4,65535
20099ad8:	2011883a 	mov	r8,r4
20099adc:	0013883a 	mov	r9,zero
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
20099ae0:	1a400736 	bltu	r3,r9,20099b00 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
20099ae4:	48c0011e 	bne	r9,r3,20099aec <alt_msgdma_construct_prefetcher_extended_descriptor+0xa4>
20099ae8:	12000536 	bltu	r2,r8,20099b00 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
20099aec:	e0bff717 	ldw	r2,-36(fp)
20099af0:	10801703 	ldbu	r2,92(r2)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
20099af4:	10803fcc 	andi	r2,r2,255
20099af8:	10800060 	cmpeqi	r2,r2,1
20099afc:	1000021e 	bne	r2,zero,20099b08 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
20099b00:	00bffa84 	movi	r2,-22
20099b04:	00003106 	br	20099bcc <alt_msgdma_construct_prefetcher_extended_descriptor+0x184>
    }
    
    descriptor->read_address_high = read_address_high;
20099b08:	e0bff817 	ldw	r2,-32(fp)
20099b0c:	e0fff917 	ldw	r3,-28(fp)
20099b10:	10c00915 	stw	r3,36(r2)
    descriptor->read_address_low = read_address_low;
20099b14:	e0bff817 	ldw	r2,-32(fp)
20099b18:	e0fffa17 	ldw	r3,-24(fp)
20099b1c:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_high = write_address_high;
20099b20:	e0bff817 	ldw	r2,-32(fp)
20099b24:	e0c00117 	ldw	r3,4(fp)
20099b28:	10c00a15 	stw	r3,40(r2)
    descriptor->write_address_low = write_address_low;
20099b2c:	e0bff817 	ldw	r2,-32(fp)
20099b30:	e0c00217 	ldw	r3,8(fp)
20099b34:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
20099b38:	e0bff817 	ldw	r2,-32(fp)
20099b3c:	e0c00317 	ldw	r3,12(fp)
20099b40:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
20099b44:	e0bff817 	ldw	r2,-32(fp)
20099b48:	e0fffb0b 	ldhu	r3,-20(fp)
20099b4c:	10c0070d 	sth	r3,28(r2)
    descriptor->read_burst_count = read_burst_count;
20099b50:	e0bff817 	ldw	r2,-32(fp)
20099b54:	e0fffc03 	ldbu	r3,-16(fp)
20099b58:	10c00785 	stb	r3,30(r2)
    descriptor->write_burst_count = write_burst_count;
20099b5c:	e0bff817 	ldw	r2,-32(fp)
20099b60:	e0fffd03 	ldbu	r3,-12(fp)
20099b64:	10c007c5 	stb	r3,31(r2)
    descriptor->read_stride = read_stride;
20099b68:	e0bff817 	ldw	r2,-32(fp)
20099b6c:	e0fffe0b 	ldhu	r3,-8(fp)
20099b70:	10c0080d 	sth	r3,32(r2)
    descriptor->write_stride = write_stride;
20099b74:	e0bff817 	ldw	r2,-32(fp)
20099b78:	e0ffff0b 	ldhu	r3,-4(fp)
20099b7c:	10c0088d 	sth	r3,34(r2)
    /* have descriptor point to itself */
	node_addr.u64 = (uintptr_t)descriptor;
20099b80:	e0bff817 	ldw	r2,-32(fp)
20099b84:	1019883a 	mov	r12,r2
20099b88:	001b883a 	mov	r13,zero
20099b8c:	e33ff515 	stw	r12,-44(fp)
20099b90:	e37ff615 	stw	r13,-40(fp)
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
20099b94:	e0fff517 	ldw	r3,-44(fp)
20099b98:	e0bff817 	ldw	r2,-32(fp)
20099b9c:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
20099ba0:	e0fff617 	ldw	r3,-40(fp)
20099ba4:	e0bff817 	ldw	r2,-32(fp)
20099ba8:	10c00b15 	stw	r3,44(r2)
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
20099bac:	e0c00417 	ldw	r3,16(fp)
20099bb0:	00900034 	movhi	r2,16384
20099bb4:	10bfffc4 	addi	r2,r2,-1
20099bb8:	1884703a 	and	r2,r3,r2
20099bbc:	10e00034 	orhi	r3,r2,32768
	node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
20099bc0:	e0bff817 	ldw	r2,-32(fp)
20099bc4:	10c00f15 	stw	r3,60(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
20099bc8:	0005883a 	mov	r2,zero
}
20099bcc:	e037883a 	mov	sp,fp
20099bd0:	df000017 	ldw	fp,0(sp)
20099bd4:	dec00104 	addi	sp,sp,4
20099bd8:	f800283a 	ret

20099bdc <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address,
	alt_u32 write_address,
	alt_u32 length,
	alt_u32 control)
{
20099bdc:	defff804 	addi	sp,sp,-32
20099be0:	dfc00715 	stw	ra,28(sp)
20099be4:	df000615 	stw	fp,24(sp)
20099be8:	df000604 	addi	fp,sp,24
20099bec:	e13ffc15 	stw	r4,-16(fp)
20099bf0:	e17ffd15 	stw	r5,-12(fp)
20099bf4:	e1bffe15 	stw	r6,-8(fp)
20099bf8:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
20099bfc:	e0800217 	ldw	r2,8(fp)
20099c00:	d8800015 	stw	r2,0(sp)
20099c04:	e0800317 	ldw	r2,12(fp)
20099c08:	d8800115 	stw	r2,4(sp)
20099c0c:	e13ffc17 	ldw	r4,-16(fp)
20099c10:	e17ffd17 	ldw	r5,-12(fp)
20099c14:	e1bffe17 	ldw	r6,-8(fp)
20099c18:	e1ffff17 	ldw	r7,-4(fp)
20099c1c:	00999a40 	call	200999a4 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, write_address, length, control);
}
20099c20:	e037883a 	mov	sp,fp
20099c24:	dfc00117 	ldw	ra,4(sp)
20099c28:	df000017 	ldw	fp,0(sp)
20099c2c:	dec00204 	addi	sp,sp,8
20099c30:	f800283a 	ret

20099c34 <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
20099c34:	defff804 	addi	sp,sp,-32
20099c38:	dfc00715 	stw	ra,28(sp)
20099c3c:	df000615 	stw	fp,24(sp)
20099c40:	df000604 	addi	fp,sp,24
20099c44:	e13ffc15 	stw	r4,-16(fp)
20099c48:	e17ffd15 	stw	r5,-12(fp)
20099c4c:	e1bffe15 	stw	r6,-8(fp)
20099c50:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
20099c54:	e0bfff17 	ldw	r2,-4(fp)
20099c58:	d8800015 	stw	r2,0(sp)
20099c5c:	e0800217 	ldw	r2,8(fp)
20099c60:	d8800115 	stw	r2,4(sp)
20099c64:	e13ffc17 	ldw	r4,-16(fp)
20099c68:	e17ffd17 	ldw	r5,-12(fp)
20099c6c:	000d883a 	mov	r6,zero
20099c70:	e1fffe17 	ldw	r7,-8(fp)
20099c74:	00999a40 	call	200999a4 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		0, write_address, length, control);
}
20099c78:	e037883a 	mov	sp,fp
20099c7c:	dfc00117 	ldw	ra,4(sp)
20099c80:	df000017 	ldw	fp,0(sp)
20099c84:	dec00204 	addi	sp,sp,8
20099c88:	f800283a 	ret

20099c8c <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 read_address, 
	alt_u32 length, 
	alt_u32 control)
{
20099c8c:	defff804 	addi	sp,sp,-32
20099c90:	dfc00715 	stw	ra,28(sp)
20099c94:	df000615 	stw	fp,24(sp)
20099c98:	df000604 	addi	fp,sp,24
20099c9c:	e13ffc15 	stw	r4,-16(fp)
20099ca0:	e17ffd15 	stw	r5,-12(fp)
20099ca4:	e1bffe15 	stw	r6,-8(fp)
20099ca8:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
20099cac:	e0bfff17 	ldw	r2,-4(fp)
20099cb0:	d8800015 	stw	r2,0(sp)
20099cb4:	e0800217 	ldw	r2,8(fp)
20099cb8:	d8800115 	stw	r2,4(sp)
20099cbc:	e13ffc17 	ldw	r4,-16(fp)
20099cc0:	e17ffd17 	ldw	r5,-12(fp)
20099cc4:	e1bffe17 	ldw	r6,-8(fp)
20099cc8:	000f883a 	mov	r7,zero
20099ccc:	00999a40 	call	200999a4 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, 0, length, control);
}
20099cd0:	e037883a 	mov	sp,fp
20099cd4:	dfc00117 	ldw	ra,4(sp)
20099cd8:	df000017 	ldw	fp,0(sp)
20099cdc:	dec00204 	addi	sp,sp,8
20099ce0:	f800283a 	ret

20099ce4 <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number,
	alt_u8 write_burst_count,
	alt_u16 write_stride)
{
20099ce4:	deffee04 	addi	sp,sp,-72
20099ce8:	dfc01115 	stw	ra,68(sp)
20099cec:	df001015 	stw	fp,64(sp)
20099cf0:	df001004 	addi	fp,sp,64
20099cf4:	e13ff915 	stw	r4,-28(fp)
20099cf8:	e17ffa15 	stw	r5,-24(fp)
20099cfc:	e1bffb15 	stw	r6,-20(fp)
20099d00:	e1fffc15 	stw	r7,-16(fp)
20099d04:	e1000417 	ldw	r4,16(fp)
20099d08:	e0c00517 	ldw	r3,20(fp)
20099d0c:	e0800617 	ldw	r2,24(fp)
20099d10:	e13ffd0d 	sth	r4,-12(fp)
20099d14:	e0fffe05 	stb	r3,-8(fp)
20099d18:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor, 
20099d1c:	e13ffd0b 	ldhu	r4,-12(fp)
20099d20:	e0fffe03 	ldbu	r3,-8(fp)
20099d24:	e0bfff0b 	ldhu	r2,-4(fp)
20099d28:	e17ffb17 	ldw	r5,-20(fp)
20099d2c:	d9400015 	stw	r5,0(sp)
20099d30:	e17ffc17 	ldw	r5,-16(fp)
20099d34:	d9400115 	stw	r5,4(sp)
20099d38:	e1400217 	ldw	r5,8(fp)
20099d3c:	d9400215 	stw	r5,8(sp)
20099d40:	e1400317 	ldw	r5,12(fp)
20099d44:	d9400315 	stw	r5,12(sp)
20099d48:	d9000415 	stw	r4,16(sp)
20099d4c:	d8000515 	stw	zero,20(sp)
20099d50:	d8c00615 	stw	r3,24(sp)
20099d54:	d8000715 	stw	zero,28(sp)
20099d58:	d8800815 	stw	r2,32(sp)
20099d5c:	e13ff917 	ldw	r4,-28(fp)
20099d60:	e17ffa17 	ldw	r5,-24(fp)
20099d64:	000d883a 	mov	r6,zero
20099d68:	000f883a 	mov	r7,zero
20099d6c:	0099a480 	call	20099a48 <alt_msgdma_construct_prefetcher_extended_descriptor>
            0, 0, write_address_high, write_address_low, length, control, 
			sequence_number, 0, write_burst_count, 0, write_stride);
}
20099d70:	e037883a 	mov	sp,fp
20099d74:	dfc00117 	ldw	ra,4(sp)
20099d78:	df000017 	ldw	fp,0(sp)
20099d7c:	dec00204 	addi	sp,sp,8
20099d80:	f800283a 	ret

20099d84 <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
20099d84:	deffee04 	addi	sp,sp,-72
20099d88:	dfc01115 	stw	ra,68(sp)
20099d8c:	df001015 	stw	fp,64(sp)
20099d90:	df001004 	addi	fp,sp,64
20099d94:	e13ff915 	stw	r4,-28(fp)
20099d98:	e17ffa15 	stw	r5,-24(fp)
20099d9c:	e1bffb15 	stw	r6,-20(fp)
20099da0:	e1fffc15 	stw	r7,-16(fp)
20099da4:	e1000417 	ldw	r4,16(fp)
20099da8:	e0c00517 	ldw	r3,20(fp)
20099dac:	e0800617 	ldw	r2,24(fp)
20099db0:	e13ffd0d 	sth	r4,-12(fp)
20099db4:	e0fffe05 	stb	r3,-8(fp)
20099db8:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
20099dbc:	e13ffd0b 	ldhu	r4,-12(fp)
20099dc0:	e0fffe03 	ldbu	r3,-8(fp)
20099dc4:	e0bfff0b 	ldhu	r2,-4(fp)
20099dc8:	d8000015 	stw	zero,0(sp)
20099dcc:	d8000115 	stw	zero,4(sp)
20099dd0:	e1400217 	ldw	r5,8(fp)
20099dd4:	d9400215 	stw	r5,8(sp)
20099dd8:	e1400317 	ldw	r5,12(fp)
20099ddc:	d9400315 	stw	r5,12(sp)
20099de0:	d9000415 	stw	r4,16(sp)
20099de4:	d8c00515 	stw	r3,20(sp)
20099de8:	d8000615 	stw	zero,24(sp)
20099dec:	d8800715 	stw	r2,28(sp)
20099df0:	d8000815 	stw	zero,32(sp)
20099df4:	e13ff917 	ldw	r4,-28(fp)
20099df8:	e17ffa17 	ldw	r5,-24(fp)
20099dfc:	e1bffb17 	ldw	r6,-20(fp)
20099e00:	e1fffc17 	ldw	r7,-16(fp)
20099e04:	0099a480 	call	20099a48 <alt_msgdma_construct_prefetcher_extended_descriptor>
    		read_address_high, read_address_low, 0, 0, length, control, 
			sequence_number, read_burst_count, 0, read_stride, 0);
}
20099e08:	e037883a 	mov	sp,fp
20099e0c:	dfc00117 	ldw	ra,4(sp)
20099e10:	df000017 	ldw	fp,0(sp)
20099e14:	dec00204 	addi	sp,sp,8
20099e18:	f800283a 	ret

20099e1c <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor>:
	alt_u16 sequence_number,
	alt_u8 read_burst_count,
	alt_u8 write_burst_count, 
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
20099e1c:	deffec04 	addi	sp,sp,-80
20099e20:	dfc01315 	stw	ra,76(sp)
20099e24:	df001215 	stw	fp,72(sp)
20099e28:	df001204 	addi	fp,sp,72
20099e2c:	e13ff715 	stw	r4,-36(fp)
20099e30:	e17ff815 	stw	r5,-32(fp)
20099e34:	e1bff915 	stw	r6,-28(fp)
20099e38:	e1fffa15 	stw	r7,-24(fp)
20099e3c:	e1800617 	ldw	r6,24(fp)
20099e40:	e1400717 	ldw	r5,28(fp)
20099e44:	e1000817 	ldw	r4,32(fp)
20099e48:	e0c00917 	ldw	r3,36(fp)
20099e4c:	e0800a17 	ldw	r2,40(fp)
20099e50:	e1bffb0d 	sth	r6,-20(fp)
20099e54:	e17ffc05 	stb	r5,-16(fp)
20099e58:	e13ffd05 	stb	r4,-12(fp)
20099e5c:	e0fffe0d 	sth	r3,-8(fp)
20099e60:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
20099e64:	e1bffb0b 	ldhu	r6,-20(fp)
20099e68:	e17ffc03 	ldbu	r5,-16(fp)
20099e6c:	e13ffd03 	ldbu	r4,-12(fp)
20099e70:	e0fffe0b 	ldhu	r3,-8(fp)
20099e74:	e0bfff0b 	ldhu	r2,-4(fp)
20099e78:	e1c00217 	ldw	r7,8(fp)
20099e7c:	d9c00015 	stw	r7,0(sp)
20099e80:	e1c00317 	ldw	r7,12(fp)
20099e84:	d9c00115 	stw	r7,4(sp)
20099e88:	e1c00417 	ldw	r7,16(fp)
20099e8c:	d9c00215 	stw	r7,8(sp)
20099e90:	e1c00517 	ldw	r7,20(fp)
20099e94:	d9c00315 	stw	r7,12(sp)
20099e98:	d9800415 	stw	r6,16(sp)
20099e9c:	d9400515 	stw	r5,20(sp)
20099ea0:	d9000615 	stw	r4,24(sp)
20099ea4:	d8c00715 	stw	r3,28(sp)
20099ea8:	d8800815 	stw	r2,32(sp)
20099eac:	e13ff717 	ldw	r4,-36(fp)
20099eb0:	e17ff817 	ldw	r5,-32(fp)
20099eb4:	e1bff917 	ldw	r6,-28(fp)
20099eb8:	e1fffa17 	ldw	r7,-24(fp)
20099ebc:	0099a480 	call	20099a48 <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, write_address_high, 
			write_address_low, length, control, sequence_number, 
			read_burst_count, write_burst_count, read_stride, write_stride);

}
20099ec0:	e037883a 	mov	sp,fp
20099ec4:	dfc00117 	ldw	ra,4(sp)
20099ec8:	df000017 	ldw	fp,0(sp)
20099ecc:	dec00204 	addi	sp,sp,8
20099ed0:	f800283a 	ret

20099ed4 <alt_msgdma_prefetcher_add_standard_desc_to_list>:
 *           descriptor.next_ptr not pointing back to itslef)
 */
int alt_msgdma_prefetcher_add_standard_desc_to_list (
	alt_msgdma_prefetcher_standard_descriptor** list,
	alt_msgdma_prefetcher_standard_descriptor* descriptor)
{
20099ed4:	defffc04 	addi	sp,sp,-16
20099ed8:	df000315 	stw	fp,12(sp)
20099edc:	df000304 	addi	fp,sp,12
20099ee0:	e13ffe15 	stw	r4,-8(fp)
20099ee4:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	
	if (descriptor == NULL)
20099ee8:	e0bfff17 	ldw	r2,-4(fp)
20099eec:	1000021e 	bne	r2,zero,20099ef8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x24>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
20099ef0:	00bffa84 	movi	r2,-22
20099ef4:	00002f06 	br	20099fb4 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (descriptor->next_desc_ptr != (alt_u32)descriptor)
20099ef8:	e0bfff17 	ldw	r2,-4(fp)
20099efc:	10c00317 	ldw	r3,12(r2)
20099f00:	e0bfff17 	ldw	r2,-4(fp)
20099f04:	18800226 	beq	r3,r2,20099f10 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x3c>
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
20099f08:	00bffa84 	movi	r2,-22
20099f0c:	00002906 	br	20099fb4 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (*list == NULL)
20099f10:	e0bffe17 	ldw	r2,-8(fp)
20099f14:	10800017 	ldw	r2,0(r2)
20099f18:	1000051e 	bne	r2,zero,20099f30 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x5c>
	{
		*list = descriptor;  /* make this root-node if list is empty */
20099f1c:	e0bffe17 	ldw	r2,-8(fp)
20099f20:	e0ffff17 	ldw	r3,-4(fp)
20099f24:	10c00015 	stw	r3,0(r2)
		return 0;  /* successfully added */
20099f28:	0005883a 	mov	r2,zero
20099f2c:	00002106 	br	20099fb4 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (*list == descriptor)
20099f30:	e0bffe17 	ldw	r2,-8(fp)
20099f34:	10c00017 	ldw	r3,0(r2)
20099f38:	e0bfff17 	ldw	r2,-4(fp)
20099f3c:	1880021e 	bne	r3,r2,20099f48 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x74>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
20099f40:	00bffa84 	movi	r2,-22
20099f44:	00001b06 	br	20099fb4 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
20099f48:	e0bffe17 	ldw	r2,-8(fp)
20099f4c:	10800017 	ldw	r2,0(r2)
20099f50:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
20099f54:	00000906 	br	20099f7c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xa8>
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
20099f58:	e0bffd17 	ldw	r2,-12(fp)
20099f5c:	10c00317 	ldw	r3,12(r2)
20099f60:	e0bfff17 	ldw	r2,-4(fp)
20099f64:	1880021e 	bne	r3,r2,20099f70 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x9c>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
20099f68:	00bffa84 	movi	r2,-22
20099f6c:	00001106 	br	20099fb4 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
20099f70:	e0bffd17 	ldw	r2,-12(fp)
20099f74:	10800317 	ldw	r2,12(r2)
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		last_descr_ptr = 
20099f78:	e0bffd15 	stw	r2,-12(fp)
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
20099f7c:	e0bffd17 	ldw	r2,-12(fp)
20099f80:	10800317 	ldw	r2,12(r2)
20099f84:	e0fffe17 	ldw	r3,-8(fp)
20099f88:	18c00017 	ldw	r3,0(r3)
20099f8c:	10fff21e 	bne	r2,r3,20099f58 <__flash_rwdata_start+0xffffd910>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* add this descriptor to end of list */
	last_descr_ptr->next_desc_ptr = (alt_u32)((uintptr_t)descriptor);
20099f90:	e0ffff17 	ldw	r3,-4(fp)
20099f94:	e0bffd17 	ldw	r2,-12(fp)
20099f98:	10c00315 	stw	r3,12(r2)
	/* ensure new last pointer points the start of the list */
	descriptor->next_desc_ptr = (alt_u32)((uintptr_t)*list);  
20099f9c:	e0bffe17 	ldw	r2,-8(fp)
20099fa0:	10800017 	ldw	r2,0(r2)
20099fa4:	1007883a 	mov	r3,r2
20099fa8:	e0bfff17 	ldw	r2,-4(fp)
20099fac:	10c00315 	stw	r3,12(r2)
	return 0; /* successfully added */
20099fb0:	0005883a 	mov	r2,zero
}
20099fb4:	e037883a 	mov	sp,fp
20099fb8:	df000017 	ldw	fp,0(sp)
20099fbc:	dec00104 	addi	sp,sp,4
20099fc0:	f800283a 	ret

20099fc4 <alt_msgdma_prefetcher_add_extended_desc_to_list>:

int alt_msgdma_prefetcher_add_extended_desc_to_list (
	alt_msgdma_prefetcher_extended_descriptor** list,
	alt_msgdma_prefetcher_extended_descriptor* descriptor)
{
20099fc4:	defff804 	addi	sp,sp,-32
20099fc8:	df000715 	stw	fp,28(sp)
20099fcc:	df000704 	addi	fp,sp,28
20099fd0:	e13ffe15 	stw	r4,-8(fp)
20099fd4:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	msgdma_addr64 root_node_addr, next_node_addr;
	
	if (descriptor == NULL)
20099fd8:	e13fff17 	ldw	r4,-4(fp)
20099fdc:	2000021e 	bne	r4,zero,20099fe8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x24>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
20099fe0:	00bffa84 	movi	r2,-22
20099fe4:	00005906 	br	2009a14c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
20099fe8:	e13fff17 	ldw	r4,-4(fp)
20099fec:	2015883a 	mov	r10,r4
20099ff0:	0017883a 	mov	r11,zero
20099ff4:	e2bffc15 	stw	r10,-16(fp)
20099ff8:	e2fffd15 	stw	r11,-12(fp)
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
20099ffc:	e13fff17 	ldw	r4,-4(fp)
2009a000:	21400317 	ldw	r5,12(r4)
2009a004:	e13ffc17 	ldw	r4,-16(fp)
2009a008:	29000626 	beq	r5,r4,2009a024 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
2009a00c:	e13fff17 	ldw	r4,-4(fp)
2009a010:	21400b17 	ldw	r5,44(r4)
2009a014:	e13ffd17 	ldw	r4,-12(fp)
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
2009a018:	29000226 	beq	r5,r4,2009a024 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
2009a01c:	00bffa84 	movi	r2,-22
2009a020:	00004a06 	br	2009a14c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	if (*list == NULL)
2009a024:	e13ffe17 	ldw	r4,-8(fp)
2009a028:	21000017 	ldw	r4,0(r4)
2009a02c:	2000051e 	bne	r4,zero,2009a044 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x80>
	{
		*list = descriptor;  /* make this the root-node if list is empty */
2009a030:	e0bffe17 	ldw	r2,-8(fp)
2009a034:	e0ffff17 	ldw	r3,-4(fp)
2009a038:	10c00015 	stw	r3,0(r2)
		return 0;
2009a03c:	0005883a 	mov	r2,zero
2009a040:	00004206 	br	2009a14c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	if (*list == descriptor)
2009a044:	e13ffe17 	ldw	r4,-8(fp)
2009a048:	21400017 	ldw	r5,0(r4)
2009a04c:	e13fff17 	ldw	r4,-4(fp)
2009a050:	2900021e 	bne	r5,r4,2009a05c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x98>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
2009a054:	00bffa84 	movi	r2,-22
2009a058:	00003c06 	br	2009a14c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
2009a05c:	e13ffe17 	ldw	r4,-8(fp)
2009a060:	21000017 	ldw	r4,0(r4)
2009a064:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
2009a068:	e13ffe17 	ldw	r4,-8(fp)
2009a06c:	21000017 	ldw	r4,0(r4)
2009a070:	2011883a 	mov	r8,r4
2009a074:	0013883a 	mov	r9,zero
2009a078:	e23ffa15 	stw	r8,-24(fp)
2009a07c:	e27ffb15 	stw	r9,-20(fp)
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
2009a080:	00001806 	br	2009a0e4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x120>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* first check if descriptor already in the list */
		next_node_addr.u64 = (uintptr_t)descriptor;
2009a084:	e13fff17 	ldw	r4,-4(fp)
2009a088:	200d883a 	mov	r6,r4
2009a08c:	000f883a 	mov	r7,zero
2009a090:	e1bffc15 	stw	r6,-16(fp)
2009a094:	e1fffd15 	stw	r7,-12(fp)
		if ((last_descr_ptr->next_desc_ptr_low == next_node_addr.u32[0])
2009a098:	e13ff917 	ldw	r4,-28(fp)
2009a09c:	21400317 	ldw	r5,12(r4)
2009a0a0:	e13ffc17 	ldw	r4,-16(fp)
2009a0a4:	2900061e 	bne	r5,r4,2009a0c0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
			&& (last_descr_ptr->next_desc_ptr_high == next_node_addr.u32[1]))
2009a0a8:	e13ff917 	ldw	r4,-28(fp)
2009a0ac:	21400b17 	ldw	r5,44(r4)
2009a0b0:	e13ffd17 	ldw	r4,-12(fp)
2009a0b4:	2900021e 	bne	r5,r4,2009a0c0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
2009a0b8:	00bffa84 	movi	r2,-22
2009a0bc:	00002306 	br	2009a14c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
2009a0c0:	e13ff917 	ldw	r4,-28(fp)
2009a0c4:	21000317 	ldw	r4,12(r4)
2009a0c8:	e13ffc15 	stw	r4,-16(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
2009a0cc:	e13ff917 	ldw	r4,-28(fp)
2009a0d0:	21000b17 	ldw	r4,44(r4)
2009a0d4:	e13ffd15 	stw	r4,-12(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
2009a0d8:	e13ffc17 	ldw	r4,-16(fp)
2009a0dc:	e17ffd17 	ldw	r5,-12(fp)
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
2009a0e0:	e13ff915 	stw	r4,-28(fp)
	last_descr_ptr = *list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
2009a0e4:	e13ff917 	ldw	r4,-28(fp)
2009a0e8:	21400317 	ldw	r5,12(r4)
2009a0ec:	e13ffa17 	ldw	r4,-24(fp)
2009a0f0:	29000426 	beq	r5,r4,2009a104 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x140>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
2009a0f4:	e13ff917 	ldw	r4,-28(fp)
2009a0f8:	21400b17 	ldw	r5,44(r4)
2009a0fc:	e13ffb17 	ldw	r4,-20(fp)
2009a100:	293fe01e 	bne	r5,r4,2009a084 <__flash_rwdata_start+0xffffda3c>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* add this descriptor to end of list */
	next_node_addr.u64 = (uintptr_t)descriptor;
2009a104:	e13fff17 	ldw	r4,-4(fp)
2009a108:	2005883a 	mov	r2,r4
2009a10c:	0007883a 	mov	r3,zero
2009a110:	e0bffc15 	stw	r2,-16(fp)
2009a114:	e0fffd15 	stw	r3,-12(fp)
	last_descr_ptr->next_desc_ptr_low = next_node_addr.u32[0];
2009a118:	e0fffc17 	ldw	r3,-16(fp)
2009a11c:	e0bff917 	ldw	r2,-28(fp)
2009a120:	10c00315 	stw	r3,12(r2)
	last_descr_ptr->next_desc_ptr_high = next_node_addr.u32[1];
2009a124:	e0fffd17 	ldw	r3,-12(fp)
2009a128:	e0bff917 	ldw	r2,-28(fp)
2009a12c:	10c00b15 	stw	r3,44(r2)
	/* ensure new last pointer points the beginning of the list */
	descriptor->next_desc_ptr_low = root_node_addr.u32[0];
2009a130:	e0fffa17 	ldw	r3,-24(fp)
2009a134:	e0bfff17 	ldw	r2,-4(fp)
2009a138:	10c00315 	stw	r3,12(r2)
	descriptor->next_desc_ptr_high = root_node_addr.u32[1];
2009a13c:	e0fffb17 	ldw	r3,-20(fp)
2009a140:	e0bfff17 	ldw	r2,-4(fp)
2009a144:	10c00b15 	stw	r3,44(r2)
	return 0;
2009a148:	0005883a 	mov	r2,zero
}
2009a14c:	e037883a 	mov	sp,fp
2009a150:	df000017 	ldw	fp,0(sp)
2009a154:	dec00104 	addi	sp,sp,4
2009a158:	f800283a 	ret

2009a15c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_std_list_own_by_hw_bits (
	alt_msgdma_prefetcher_standard_descriptor *list)
{
2009a15c:	defffc04 	addi	sp,sp,-16
2009a160:	df000315 	stw	fp,12(sp)
2009a164:	df000304 	addi	fp,sp,12
2009a168:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
2009a16c:	e03ffe15 	stw	zero,-8(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	if (list == NULL)
2009a170:	e0bfff17 	ldw	r2,-4(fp)
2009a174:	1000021e 	bne	r2,zero,2009a180 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x24>
	{
		return -EINVAL;  /* this list cannot be empty */
2009a178:	00bffa84 	movi	r2,-22
2009a17c:	00001906 	br	2009a1e4 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x88>
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
2009a180:	e0bfff17 	ldw	r2,-4(fp)
2009a184:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
2009a188:	00000a06 	br	2009a1b4 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x58>
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
2009a18c:	e0bffd17 	ldw	r2,-12(fp)
2009a190:	10800717 	ldw	r2,28(r2)
2009a194:	e0bffe15 	stw	r2,-8(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
2009a198:	e0bffe17 	ldw	r2,-8(fp)
2009a19c:	10d00034 	orhi	r3,r2,16384
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
2009a1a0:	e0bffd17 	ldw	r2,-12(fp)
2009a1a4:	10c00715 	stw	r3,28(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
2009a1a8:	e0bffd17 	ldw	r2,-12(fp)
2009a1ac:	10800317 	ldw	r2,12(r2)
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
2009a1b0:	e0bffd15 	stw	r2,-12(fp)
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
2009a1b4:	e0bffd17 	ldw	r2,-12(fp)
2009a1b8:	10c00317 	ldw	r3,12(r2)
2009a1bc:	e0bfff17 	ldw	r2,-4(fp)
2009a1c0:	18bff21e 	bne	r3,r2,2009a18c <__flash_rwdata_start+0xffffdb44>
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
2009a1c4:	e0bffd17 	ldw	r2,-12(fp)
2009a1c8:	10800717 	ldw	r2,28(r2)
2009a1cc:	e0bffe15 	stw	r2,-8(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
2009a1d0:	e0bffe17 	ldw	r2,-8(fp)
2009a1d4:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
2009a1d8:	e0bffd17 	ldw	r2,-12(fp)
2009a1dc:	10c00715 	stw	r3,28(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	
	return 0;
2009a1e0:	0005883a 	mov	r2,zero
}
2009a1e4:	e037883a 	mov	sp,fp
2009a1e8:	df000017 	ldw	fp,0(sp)
2009a1ec:	dec00104 	addi	sp,sp,4
2009a1f0:	f800283a 	ret

2009a1f4 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits (
	alt_msgdma_prefetcher_extended_descriptor *list)
{
2009a1f4:	defff804 	addi	sp,sp,-32
2009a1f8:	df000715 	stw	fp,28(sp)
2009a1fc:	df000704 	addi	fp,sp,28
2009a200:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
2009a204:	e03ffa15 	stw	zero,-24(fp)
	msgdma_addr64 root_node_addr, next_node_addr;
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	
	if (list == NULL)
2009a208:	e13fff17 	ldw	r4,-4(fp)
2009a20c:	2000021e 	bne	r4,zero,2009a218 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x24>
	{
		return -EINVAL;  /* this list cannot be empty */
2009a210:	00bffa84 	movi	r2,-22
2009a214:	00002806 	br	2009a2b8 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xc4>
	}
	
	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
2009a218:	e13fff17 	ldw	r4,-4(fp)
2009a21c:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;
2009a220:	e13fff17 	ldw	r4,-4(fp)
2009a224:	2005883a 	mov	r2,r4
2009a228:	0007883a 	mov	r3,zero
2009a22c:	e0bffb15 	stw	r2,-20(fp)
2009a230:	e0fffc15 	stw	r3,-16(fp)

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
2009a234:	00001006 	br	2009a278 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x84>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
2009a238:	e0bff917 	ldw	r2,-28(fp)
2009a23c:	10800f17 	ldw	r2,60(r2)
2009a240:	e0bffa15 	stw	r2,-24(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
2009a244:	e0bffa17 	ldw	r2,-24(fp)
2009a248:	10d00034 	orhi	r3,r2,16384
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
2009a24c:	e0bff917 	ldw	r2,-28(fp)
2009a250:	10c00f15 	stw	r3,60(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
2009a254:	e0bff917 	ldw	r2,-28(fp)
2009a258:	10800317 	ldw	r2,12(r2)
2009a25c:	e0bffd15 	stw	r2,-12(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
2009a260:	e0bff917 	ldw	r2,-28(fp)
2009a264:	10800b17 	ldw	r2,44(r2)
2009a268:	e0bffe15 	stw	r2,-8(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
2009a26c:	e0bffd17 	ldw	r2,-12(fp)
2009a270:	e0fffe17 	ldw	r3,-8(fp)
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
2009a274:	e0bff915 	stw	r2,-28(fp)
	last_descr_ptr = list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
2009a278:	e0bff917 	ldw	r2,-28(fp)
2009a27c:	10c00317 	ldw	r3,12(r2)
2009a280:	e0bffb17 	ldw	r2,-20(fp)
2009a284:	18800426 	beq	r3,r2,2009a298 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xa4>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
2009a288:	e0bff917 	ldw	r2,-28(fp)
2009a28c:	10c00b17 	ldw	r3,44(r2)
2009a290:	e0bffc17 	ldw	r2,-16(fp)
2009a294:	18bfe81e 	bne	r3,r2,2009a238 <__flash_rwdata_start+0xffffdbf0>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
2009a298:	e0bff917 	ldw	r2,-28(fp)
2009a29c:	10800f17 	ldw	r2,60(r2)
2009a2a0:	e0bffa15 	stw	r2,-24(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
2009a2a4:	e0bffa17 	ldw	r2,-24(fp)
2009a2a8:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
2009a2ac:	e0bff917 	ldw	r2,-28(fp)
2009a2b0:	10c00f15 	stw	r3,60(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	return 0;
2009a2b4:	0005883a 	mov	r2,zero
}
2009a2b8:	e037883a 	mov	sp,fp
2009a2bc:	df000017 	ldw	fp,0(sp)
2009a2c0:	dec00104 	addi	sp,sp,4
2009a2c4:	f800283a 	ret

2009a2c8 <alt_msgdma_start_prefetcher_with_list_addr>:
int alt_msgdma_start_prefetcher_with_list_addr (
	alt_msgdma_dev *dev,
	alt_u64  list_addr,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
2009a2c8:	deffef04 	addi	sp,sp,-68
2009a2cc:	df001015 	stw	fp,64(sp)
2009a2d0:	df001004 	addi	fp,sp,64
2009a2d4:	e13ffb15 	stw	r4,-20(fp)
2009a2d8:	e17ffc15 	stw	r5,-16(fp)
2009a2dc:	e1bffd15 	stw	r6,-12(fp)
2009a2e0:	3807883a 	mov	r3,r7
2009a2e4:	e0800117 	ldw	r2,4(fp)
2009a2e8:	e0fffe05 	stb	r3,-8(fp)
2009a2ec:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 prefetcher_ctl = 0;
2009a2f0:	e03ff015 	stw	zero,-64(fp)
	alt_u32 dispatcher_ctl = 0;
2009a2f4:	e03ff115 	stw	zero,-60(fp)
	alt_irq_context context = 0;
2009a2f8:	e03ff215 	stw	zero,-56(fp)
	
	/* use helper struct to get easy access to hi/low address */
	msgdma_addr64 root_node_addr;
	root_node_addr.u64 = list_addr;  
2009a2fc:	e0bffc17 	ldw	r2,-16(fp)
2009a300:	e0bff915 	stw	r2,-28(fp)
2009a304:	e0bffd17 	ldw	r2,-12(fp)
2009a308:	e0bffa15 	stw	r2,-24(fp)
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND (dev->regs_lock, 0);
	
	/* case where prefetcher already started, return busy error */ 
	prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
2009a30c:	e0bffb17 	ldw	r2,-20(fp)
2009a310:	10800617 	ldw	r2,24(r2)
2009a314:	10800037 	ldwio	r2,0(r2)
2009a318:	e0bff015 	stw	r2,-64(fp)
	if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
2009a31c:	e0bff017 	ldw	r2,-64(fp)
2009a320:	1080004c 	andi	r2,r2,1
2009a324:	10000226 	beq	r2,zero,2009a330 <alt_msgdma_start_prefetcher_with_list_addr+0x68>
		/* release the registers semaphore */
		ALT_SEM_POST (dev->regs_lock);
		return -EBUSY;
2009a328:	00bffc04 	movi	r2,-16
2009a32c:	00009206 	br	2009a578 <alt_msgdma_start_prefetcher_with_list_addr+0x2b0>
	}
		
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	   read or write masters  */
	/* stop issuing more descriptors */
	dispatcher_ctl = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
2009a330:	00800804 	movi	r2,32
2009a334:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2009a338:	0005303a 	rdctl	r2,status
2009a33c:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2009a340:	e0fff317 	ldw	r3,-52(fp)
2009a344:	00bfff84 	movi	r2,-2
2009a348:	1884703a 	and	r2,r3,r2
2009a34c:	1001703a 	wrctl	status,r2
  
  return context;
2009a350:	e0bff317 	ldw	r2,-52(fp)
	
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
2009a354:	e0bff215 	stw	r2,-56(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
2009a358:	e0bffb17 	ldw	r2,-20(fp)
2009a35c:	10800317 	ldw	r2,12(r2)
2009a360:	10800104 	addi	r2,r2,4
2009a364:	e0fff117 	ldw	r3,-60(fp)
2009a368:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS( dev->csr_base, 
2009a36c:	e0bffb17 	ldw	r2,-20(fp)
2009a370:	10800317 	ldw	r2,12(r2)
2009a374:	e0fffb17 	ldw	r3,-20(fp)
2009a378:	18c00317 	ldw	r3,12(r3)
2009a37c:	18c00037 	ldwio	r3,0(r3)
2009a380:	10c00035 	stwio	r3,0(r2)
2009a384:	e0bff217 	ldw	r2,-56(fp)
2009a388:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2009a38c:	e0bff417 	ldw	r2,-48(fp)
2009a390:	1001703a 	wrctl	status,r2
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up dispatcher to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if(dev->callback)
2009a394:	e0bffb17 	ldw	r2,-20(fp)
2009a398:	10800b17 	ldw	r2,44(r2)
2009a39c:	10002326 	beq	r2,zero,2009a42c <alt_msgdma_start_prefetcher_with_list_addr+0x164>
	{
		dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
2009a3a0:	e0bffb17 	ldw	r2,-20(fp)
2009a3a4:	10c00d17 	ldw	r3,52(r2)
2009a3a8:	e0bff117 	ldw	r2,-60(fp)
2009a3ac:	1884b03a 	or	r2,r3,r2
2009a3b0:	10800514 	ori	r2,r2,20
2009a3b4:	e0bff115 	stw	r2,-60(fp)
				| ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
		dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
2009a3b8:	e0fff117 	ldw	r3,-60(fp)
2009a3bc:	00bff7c4 	movi	r2,-33
2009a3c0:	1884703a 	and	r2,r3,r2
2009a3c4:	e0bff115 	stw	r2,-60(fp)
		
		prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
2009a3c8:	e0bff017 	ldw	r2,-64(fp)
2009a3cc:	10800214 	ori	r2,r2,8
2009a3d0:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2009a3d4:	0005303a 	rdctl	r2,status
2009a3d8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2009a3dc:	e0fff517 	ldw	r3,-44(fp)
2009a3e0:	00bfff84 	movi	r2,-2
2009a3e4:	1884703a 	and	r2,r3,r2
2009a3e8:	1001703a 	wrctl	status,r2
  
  return context;
2009a3ec:	e0bff517 	ldw	r2,-44(fp)
	    /* making sure the read-modify-write below can't be pre-empted */
	    context = alt_irq_disable_all(); 
2009a3f0:	e0bff215 	stw	r2,-56(fp)
	    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
2009a3f4:	e0bffb17 	ldw	r2,-20(fp)
2009a3f8:	10800317 	ldw	r2,12(r2)
2009a3fc:	10800104 	addi	r2,r2,4
2009a400:	e0fff117 	ldw	r3,-60(fp)
2009a404:	10c00035 	stwio	r3,0(r2)
		IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
2009a408:	e0bffb17 	ldw	r2,-20(fp)
2009a40c:	10800617 	ldw	r2,24(r2)
2009a410:	e0fff017 	ldw	r3,-64(fp)
2009a414:	10c00035 	stwio	r3,0(r2)
2009a418:	e0bff217 	ldw	r2,-56(fp)
2009a41c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2009a420:	e0bff617 	ldw	r2,-40(fp)
2009a424:	1001703a 	wrctl	status,r2
2009a428:	00002306 	br	2009a4b8 <alt_msgdma_start_prefetcher_with_list_addr+0x1f0>
	  *   - Stop on an error with any particular descriptor
	  *   - Disable interrupt generation
	  */
	 else
	 {
		 dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
2009a42c:	e0bffb17 	ldw	r2,-20(fp)
2009a430:	10c00d17 	ldw	r3,52(r2)
2009a434:	e0bff117 	ldw	r2,-60(fp)
2009a438:	1884b03a 	or	r2,r3,r2
2009a43c:	10800114 	ori	r2,r2,4
2009a440:	e0bff115 	stw	r2,-60(fp)
		 dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
2009a444:	e0fff117 	ldw	r3,-60(fp)
2009a448:	00bff3c4 	movi	r2,-49
2009a44c:	1884703a 	and	r2,r3,r2
2009a450:	e0bff115 	stw	r2,-60(fp)
				 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
2009a454:	e0fff017 	ldw	r3,-64(fp)
2009a458:	00bffdc4 	movi	r2,-9
2009a45c:	1884703a 	and	r2,r3,r2
2009a460:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2009a464:	0005303a 	rdctl	r2,status
2009a468:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2009a46c:	e0fff717 	ldw	r3,-36(fp)
2009a470:	00bfff84 	movi	r2,-2
2009a474:	1884703a 	and	r2,r3,r2
2009a478:	1001703a 	wrctl	status,r2
  
  return context;
2009a47c:	e0bff717 	ldw	r2,-36(fp)
	     /* making sure the read-modify-write below can't be pre-empted */
	     context = alt_irq_disable_all();
2009a480:	e0bff215 	stw	r2,-56(fp)
	     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
2009a484:	e0bffb17 	ldw	r2,-20(fp)
2009a488:	10800317 	ldw	r2,12(r2)
2009a48c:	10800104 	addi	r2,r2,4
2009a490:	e0fff117 	ldw	r3,-60(fp)
2009a494:	10c00035 	stwio	r3,0(r2)
	     IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
2009a498:	e0bffb17 	ldw	r2,-20(fp)
2009a49c:	10800617 	ldw	r2,24(r2)
2009a4a0:	e0fff017 	ldw	r3,-64(fp)
2009a4a4:	10c00035 	stwio	r3,0(r2)
2009a4a8:	e0bff217 	ldw	r2,-56(fp)
2009a4ac:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2009a4b0:	e0bff817 	ldw	r2,-32(fp)
2009a4b4:	1001703a 	wrctl	status,r2
	     alt_irq_enable_all(context);
	 }   
	
	 /* set next descriptor registers to point to the list root-node */
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_LOW(dev->prefetcher_base,
2009a4b8:	e0bffb17 	ldw	r2,-20(fp)
2009a4bc:	10800617 	ldw	r2,24(r2)
2009a4c0:	10800104 	addi	r2,r2,4
2009a4c4:	e0fff917 	ldw	r3,-28(fp)
2009a4c8:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[0]);
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
2009a4cc:	e0bffb17 	ldw	r2,-20(fp)
2009a4d0:	10800617 	ldw	r2,24(r2)
2009a4d4:	10800204 	addi	r2,r2,8
2009a4d8:	e0fffa17 	ldw	r3,-24(fp)
2009a4dc:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[1]);
		
	 /* set park-mode */
	 if (park_mode_en){
2009a4e0:	e0bffe03 	ldbu	r2,-8(fp)
2009a4e4:	10000426 	beq	r2,zero,2009a4f8 <alt_msgdma_start_prefetcher_with_list_addr+0x230>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
2009a4e8:	e0bff017 	ldw	r2,-64(fp)
2009a4ec:	10800414 	ori	r2,r2,16
2009a4f0:	e0bff015 	stw	r2,-64(fp)
2009a4f4:	00000406 	br	2009a508 <alt_msgdma_start_prefetcher_with_list_addr+0x240>
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
2009a4f8:	e0fff017 	ldw	r3,-64(fp)
2009a4fc:	00bffbc4 	movi	r2,-17
2009a500:	1884703a 	and	r2,r3,r2
2009a504:	e0bff015 	stw	r2,-64(fp)
	 }
	 
	 /* set poll-en */
	 if (poll_en){
2009a508:	e0bfff03 	ldbu	r2,-4(fp)
2009a50c:	10000e26 	beq	r2,zero,2009a548 <alt_msgdma_start_prefetcher_with_list_addr+0x280>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
2009a510:	e0bff017 	ldw	r2,-64(fp)
2009a514:	10800094 	ori	r2,r2,2
2009a518:	e0bff015 	stw	r2,-64(fp)
		 if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
2009a51c:	e0bffb17 	ldw	r2,-20(fp)
2009a520:	10800617 	ldw	r2,24(r2)
2009a524:	10800304 	addi	r2,r2,12
2009a528:	10800037 	ldwio	r2,0(r2)
2009a52c:	10000a1e 	bne	r2,zero,2009a558 <alt_msgdma_start_prefetcher_with_list_addr+0x290>
				 dev->prefetcher_base) == 0){
			 /* set poll frequency to some non-zero default value */
			 IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
2009a530:	e0bffb17 	ldw	r2,-20(fp)
2009a534:	10800617 	ldw	r2,24(r2)
2009a538:	10800304 	addi	r2,r2,12
2009a53c:	00c03fc4 	movi	r3,255
2009a540:	10c00035 	stwio	r3,0(r2)
2009a544:	00000406 	br	2009a558 <alt_msgdma_start_prefetcher_with_list_addr+0x290>
					 dev->prefetcher_base, 0xFF);
		 }
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_CLR_MASK; 
2009a548:	e0fff017 	ldw	r3,-64(fp)
2009a54c:	00bfff44 	movi	r2,-3
2009a550:	1884703a 	and	r2,r3,r2
2009a554:	e0bff015 	stw	r2,-64(fp)
	 }
	 
	 /* set the prefetcher run bit */
	 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_RUN_SET_MASK;
2009a558:	e0bff017 	ldw	r2,-64(fp)
2009a55c:	10800054 	ori	r2,r2,1
2009a560:	e0bff015 	stw	r2,-64(fp)
	 /* start the dma since run bit is set */
	 IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
2009a564:	e0bffb17 	ldw	r2,-20(fp)
2009a568:	10800617 	ldw	r2,24(r2)
2009a56c:	e0fff017 	ldw	r3,-64(fp)
2009a570:	10c00035 	stwio	r3,0(r2)
	  * Now that access to the registers is complete, release the registers
	  * semaphore so that other threads can access the registers.
	  */
	 ALT_SEM_POST (dev->regs_lock);
	 
	 return 0;
2009a574:	0005883a 	mov	r2,zero
}
2009a578:	e037883a 	mov	sp,fp
2009a57c:	df000017 	ldw	fp,0(sp)
2009a580:	dec00104 	addi	sp,sp,4
2009a584:	f800283a 	ret

2009a588 <alt_msgdma_start_prefetcher_with_std_desc_list>:
int alt_msgdma_start_prefetcher_with_std_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{	
2009a588:	defff704 	addi	sp,sp,-36
2009a58c:	dfc00815 	stw	ra,32(sp)
2009a590:	df000715 	stw	fp,28(sp)
2009a594:	dc400615 	stw	r17,24(sp)
2009a598:	dc000515 	stw	r16,20(sp)
2009a59c:	df000704 	addi	fp,sp,28
2009a5a0:	e13ffa15 	stw	r4,-24(fp)
2009a5a4:	e17ffb15 	stw	r5,-20(fp)
2009a5a8:	3007883a 	mov	r3,r6
2009a5ac:	3805883a 	mov	r2,r7
2009a5b0:	e0fffc05 	stb	r3,-16(fp)
2009a5b4:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_std_list_own_by_hw_bits(list) != 0){
2009a5b8:	e13ffb17 	ldw	r4,-20(fp)
2009a5bc:	009a15c0 	call	2009a15c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>
2009a5c0:	10000226 	beq	r2,zero,2009a5cc <alt_msgdma_start_prefetcher_with_std_desc_list+0x44>
		return -EINVAL;
2009a5c4:	00bffa84 	movi	r2,-22
2009a5c8:	00000b06 	br	2009a5f8 <alt_msgdma_start_prefetcher_with_std_desc_list+0x70>
	}
	
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list,
2009a5cc:	e0bffb17 	ldw	r2,-20(fp)
2009a5d0:	1021883a 	mov	r16,r2
2009a5d4:	0023883a 	mov	r17,zero
2009a5d8:	e0fffc03 	ldbu	r3,-16(fp)
2009a5dc:	e0bffd03 	ldbu	r2,-12(fp)
2009a5e0:	d8800015 	stw	r2,0(sp)
2009a5e4:	e13ffa17 	ldw	r4,-24(fp)
2009a5e8:	800b883a 	mov	r5,r16
2009a5ec:	880d883a 	mov	r6,r17
2009a5f0:	180f883a 	mov	r7,r3
2009a5f4:	009a2c80 	call	2009a2c8 <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
2009a5f8:	e6fffe04 	addi	sp,fp,-8
2009a5fc:	dfc00317 	ldw	ra,12(sp)
2009a600:	df000217 	ldw	fp,8(sp)
2009a604:	dc400117 	ldw	r17,4(sp)
2009a608:	dc000017 	ldw	r16,0(sp)
2009a60c:	dec00404 	addi	sp,sp,16
2009a610:	f800283a 	ret

2009a614 <alt_msgdma_start_prefetcher_with_extd_desc_list>:
int alt_msgdma_start_prefetcher_with_extd_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_extended_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
2009a614:	defff704 	addi	sp,sp,-36
2009a618:	dfc00815 	stw	ra,32(sp)
2009a61c:	df000715 	stw	fp,28(sp)
2009a620:	dc400615 	stw	r17,24(sp)
2009a624:	dc000515 	stw	r16,20(sp)
2009a628:	df000704 	addi	fp,sp,28
2009a62c:	e13ffa15 	stw	r4,-24(fp)
2009a630:	e17ffb15 	stw	r5,-20(fp)
2009a634:	3007883a 	mov	r3,r6
2009a638:	3805883a 	mov	r2,r7
2009a63c:	e0fffc05 	stb	r3,-16(fp)
2009a640:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list) != 0){
2009a644:	e13ffb17 	ldw	r4,-20(fp)
2009a648:	009a1f40 	call	2009a1f4 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>
2009a64c:	10000226 	beq	r2,zero,2009a658 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x44>
		return -EINVAL;
2009a650:	00bffa84 	movi	r2,-22
2009a654:	00000b06 	br	2009a684 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x70>
	}
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list, 
2009a658:	e0bffb17 	ldw	r2,-20(fp)
2009a65c:	1021883a 	mov	r16,r2
2009a660:	0023883a 	mov	r17,zero
2009a664:	e0fffc03 	ldbu	r3,-16(fp)
2009a668:	e0bffd03 	ldbu	r2,-12(fp)
2009a66c:	d8800015 	stw	r2,0(sp)
2009a670:	e13ffa17 	ldw	r4,-24(fp)
2009a674:	800b883a 	mov	r5,r16
2009a678:	880d883a 	mov	r6,r17
2009a67c:	180f883a 	mov	r7,r3
2009a680:	009a2c80 	call	2009a2c8 <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
2009a684:	e6fffe04 	addi	sp,fp,-8
2009a688:	dfc00317 	ldw	ra,12(sp)
2009a68c:	df000217 	ldw	fp,8(sp)
2009a690:	dc400117 	ldw	r17,4(sp)
2009a694:	dc000017 	ldw	r16,0(sp)
2009a698:	dec00404 	addi	sp,sp,16
2009a69c:	f800283a 	ret

2009a6a0 <alt_msgdma_open>:
 * Returns:
 * - Pointer to msgdma device instance structure, or null if the device
 *   could not be opened.
 */
alt_msgdma_dev* alt_msgdma_open (const char* name)
{
2009a6a0:	defffc04 	addi	sp,sp,-16
2009a6a4:	dfc00315 	stw	ra,12(sp)
2009a6a8:	df000215 	stw	fp,8(sp)
2009a6ac:	df000204 	addi	fp,sp,8
2009a6b0:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev* dev = NULL;
2009a6b4:	e03ffe15 	stw	zero,-8(fp)

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
2009a6b8:	e13fff17 	ldw	r4,-4(fp)
2009a6bc:	d1601204 	addi	r5,gp,-32696
2009a6c0:	009ae300 	call	2009ae30 <alt_find_dev>
2009a6c4:	e0bffe15 	stw	r2,-8(fp)

    if (NULL == dev)
2009a6c8:	e0bffe17 	ldw	r2,-8(fp)
2009a6cc:	1000041e 	bne	r2,zero,2009a6e0 <alt_msgdma_open+0x40>
    {
        ALT_ERRNO = ENODEV;
2009a6d0:	0098b180 	call	20098b18 <alt_get_errno>
2009a6d4:	1007883a 	mov	r3,r2
2009a6d8:	008004c4 	movi	r2,19
2009a6dc:	18800015 	stw	r2,0(r3)
    }

    return dev;
2009a6e0:	e0bffe17 	ldw	r2,-8(fp)
}
2009a6e4:	e037883a 	mov	sp,fp
2009a6e8:	dfc00117 	ldw	ra,4(sp)
2009a6ec:	df000017 	ldw	fp,0(sp)
2009a6f0:	dec00204 	addi	sp,sp,8
2009a6f4:	f800283a 	ret

2009a6f8 <alt_msgdma_init>:
 * This routine disables interrupts, descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_msgdma_init (alt_msgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
2009a6f8:	defff804 	addi	sp,sp,-32
2009a6fc:	dfc00715 	stw	ra,28(sp)
2009a700:	df000615 	stw	fp,24(sp)
2009a704:	df000604 	addi	fp,sp,24
2009a708:	e13ffd15 	stw	r4,-12(fp)
2009a70c:	e17ffe15 	stw	r5,-8(fp)
2009a710:	e1bfff15 	stw	r6,-4(fp)
    extern alt_llist alt_msgdma_list;
    alt_u32 temporary_control;
    int error;

    if (dev->prefetcher_enable)
2009a714:	e0bffd17 	ldw	r2,-12(fp)
2009a718:	10801783 	ldbu	r2,94(r2)
2009a71c:	10803fcc 	andi	r2,r2,255
2009a720:	10000b26 	beq	r2,zero,2009a750 <alt_msgdma_init+0x58>
    {
    	/* start prefetcher reset sequence */
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, 
2009a724:	e0bffd17 	ldw	r2,-12(fp)
2009a728:	10800617 	ldw	r2,24(r2)
2009a72c:	00c00104 	movi	r3,4
2009a730:	10c00035 	stwio	r3,0(r2)
    			ALT_MSGDMA_PREFETCHER_CTRL_RESET_SET_MASK);
    	/* wait until hw clears the bit */
    	while(ALT_MSGDMA_PREFETCHER_CTRL_RESET_GET(
2009a734:	0001883a 	nop
2009a738:	e0bffd17 	ldw	r2,-12(fp)
2009a73c:	10800617 	ldw	r2,24(r2)
2009a740:	10800037 	ldwio	r2,0(r2)
2009a744:	1080010c 	andi	r2,r2,4
2009a748:	1005d0ba 	srai	r2,r2,2
2009a74c:	103ffa1e 	bne	r2,zero,2009a738 <__flash_rwdata_start+0xffffe0f0>
    }    
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
2009a750:	e0bffd17 	ldw	r2,-12(fp)
2009a754:	10800317 	ldw	r2,12(r2)
2009a758:	10800104 	addi	r2,r2,4
2009a75c:	00c00084 	movi	r3,2
2009a760:	10c00035 	stwio	r3,0(r2)
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
2009a764:	0001883a 	nop
2009a768:	e0bffd17 	ldw	r2,-12(fp)
2009a76c:	10800317 	ldw	r2,12(r2)
2009a770:	10800037 	ldwio	r2,0(r2)
    		& ALTERA_MSGDMA_CSR_RESET_STATE_MASK));
2009a774:	1080100c 	andi	r2,r2,64
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
2009a778:	103ffb1e 	bne	r2,zero,2009a768 <__flash_rwdata_start+0xffffe120>
    * Disable interrupts, halt descriptor processing,
    * and clear status register content
    */

    /* disable global interrupt */
    temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
2009a77c:	e0bffd17 	ldw	r2,-12(fp)
2009a780:	10800317 	ldw	r2,12(r2)
2009a784:	10800104 	addi	r2,r2,4
2009a788:	10800037 	ldwio	r2,0(r2)
2009a78c:	1007883a 	mov	r3,r2
2009a790:	00bffbc4 	movi	r2,-17
2009a794:	1884703a 	and	r2,r3,r2
2009a798:	e0bffb15 	stw	r2,-20(fp)
    		& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    /* stopping descriptor */
    temporary_control |= ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
2009a79c:	e0bffb17 	ldw	r2,-20(fp)
2009a7a0:	10800814 	ori	r2,r2,32
2009a7a4:	e0bffb15 	stw	r2,-20(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
2009a7a8:	e0bffd17 	ldw	r2,-12(fp)
2009a7ac:	10800317 	ldw	r2,12(r2)
2009a7b0:	10800104 	addi	r2,r2,4
2009a7b4:	e0fffb17 	ldw	r3,-20(fp)
2009a7b8:	10c00035 	stwio	r3,0(r2)

    /* clear the CSR status register */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base, 
2009a7bc:	e0bffd17 	ldw	r2,-12(fp)
2009a7c0:	10800317 	ldw	r2,12(r2)
2009a7c4:	e0fffd17 	ldw	r3,-12(fp)
2009a7c8:	18c00317 	ldw	r3,12(r3)
2009a7cc:	18c00037 	ldwio	r3,0(r3)
2009a7d0:	10c00035 	stwio	r3,0(r2)
    		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    
    if (dev->prefetcher_enable)
2009a7d4:	e0bffd17 	ldw	r2,-12(fp)
2009a7d8:	10801783 	ldbu	r2,94(r2)
2009a7dc:	10803fcc 	andi	r2,r2,255
2009a7e0:	10000826 	beq	r2,zero,2009a804 <alt_msgdma_init+0x10c>
    {
    	/* clear all status bits that are set, since theyre W1C */
    	IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base, 
2009a7e4:	e0bffd17 	ldw	r2,-12(fp)
2009a7e8:	10800617 	ldw	r2,24(r2)
2009a7ec:	10800404 	addi	r2,r2,16
2009a7f0:	e0fffd17 	ldw	r3,-12(fp)
2009a7f4:	18c00617 	ldw	r3,24(r3)
2009a7f8:	18c00404 	addi	r3,r3,16
2009a7fc:	18c00037 	ldwio	r3,0(r3)
2009a800:	10c00035 	stwio	r3,0(r2)
    			IORD_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base));
    }

    /* Register this instance of the msgdma controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_msgdma_list);
2009a804:	e13ffd17 	ldw	r4,-12(fp)
2009a808:	d1601204 	addi	r5,gp,-32696
2009a80c:	009acd40 	call	2009acd4 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
2009a810:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
2009a814:	e0bffc15 	stw	r2,-16(fp)
            
    if (!error)
2009a818:	e0bffc17 	ldw	r2,-16(fp)
2009a81c:	1000081e 	bne	r2,zero,2009a840 <alt_msgdma_init+0x148>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
2009a820:	d8000015 	stw	zero,0(sp)
2009a824:	e13ffe17 	ldw	r4,-8(fp)
2009a828:	e17fff17 	ldw	r5,-4(fp)
2009a82c:	018802b4 	movhi	r6,8202
2009a830:	31a34a04 	addi	r6,r6,-29400
2009a834:	e1fffd17 	ldw	r7,-12(fp)
2009a838:	009aef00 	call	2009aef0 <alt_ic_isr_register>
2009a83c:	00000306 	br	2009a84c <alt_msgdma_init+0x154>
    }
    else
    {
        alt_printf("failed to create semaphores\n");
2009a840:	01000034 	movhi	r4,0
2009a844:	21028604 	addi	r4,r4,2584
2009a848:	009b56c0 	call	2009b56c <alt_printf>
    }
    
    return;
2009a84c:	0001883a 	nop

}
2009a850:	e037883a 	mov	sp,fp
2009a854:	dfc00117 	ldw	ra,4(sp)
2009a858:	df000017 	ldw	fp,0(sp)
2009a85c:	dec00204 	addi	sp,sp,8
2009a860:	f800283a 	ret

2009a864 <alt_msgdma_register_callback>:
void alt_msgdma_register_callback(
	alt_msgdma_dev *dev,
	alt_msgdma_callback callback,
	alt_u32 control,
	void *context)
{
2009a864:	defffb04 	addi	sp,sp,-20
2009a868:	df000415 	stw	fp,16(sp)
2009a86c:	df000404 	addi	fp,sp,16
2009a870:	e13ffc15 	stw	r4,-16(fp)
2009a874:	e17ffd15 	stw	r5,-12(fp)
2009a878:	e1bffe15 	stw	r6,-8(fp)
2009a87c:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
2009a880:	e0bffc17 	ldw	r2,-16(fp)
2009a884:	e0fffd17 	ldw	r3,-12(fp)
2009a888:	10c00b15 	stw	r3,44(r2)
    dev->callback_context = context;
2009a88c:	e0bffc17 	ldw	r2,-16(fp)
2009a890:	e0ffff17 	ldw	r3,-4(fp)
2009a894:	10c00c15 	stw	r3,48(r2)
    dev->control          = control;
2009a898:	e0bffc17 	ldw	r2,-16(fp)
2009a89c:	e0fffe17 	ldw	r3,-8(fp)
2009a8a0:	10c00d15 	stw	r3,52(r2)

    return ;
2009a8a4:	0001883a 	nop
}
2009a8a8:	e037883a 	mov	sp,fp
2009a8ac:	df000017 	ldw	fp,0(sp)
2009a8b0:	dec00104 	addi	sp,sp,4
2009a8b4:	f800283a 	ret

2009a8b8 <alt_msgdma_standard_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_standard_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
2009a8b8:	defffc04 	addi	sp,sp,-16
2009a8bc:	dfc00315 	stw	ra,12(sp)
2009a8c0:	df000215 	stw	fp,8(sp)
2009a8c4:	df000204 	addi	fp,sp,8
2009a8c8:	e13ffe15 	stw	r4,-8(fp)
2009a8cc:	e17fff15 	stw	r5,-4(fp)
   /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
    return alt_msgdma_descriptor_async_transfer(dev, desc, NULL);
2009a8d0:	e13ffe17 	ldw	r4,-8(fp)
2009a8d4:	e17fff17 	ldw	r5,-4(fp)
2009a8d8:	000d883a 	mov	r6,zero
2009a8dc:	009908c0 	call	2009908c <alt_msgdma_descriptor_async_transfer>

}
2009a8e0:	e037883a 	mov	sp,fp
2009a8e4:	dfc00117 	ldw	ra,4(sp)
2009a8e8:	df000017 	ldw	fp,0(sp)
2009a8ec:	dec00204 	addi	sp,sp,8
2009a8f0:	f800283a 	ret

2009a8f4 <alt_msgdma_extended_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_extended_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
2009a8f4:	defffc04 	addi	sp,sp,-16
2009a8f8:	dfc00315 	stw	ra,12(sp)
2009a8fc:	df000215 	stw	fp,8(sp)
2009a900:	df000204 	addi	fp,sp,8
2009a904:	e13ffe15 	stw	r4,-8(fp)
2009a908:	e17fff15 	stw	r5,-4(fp)
    /*
    * Error detection/handling should be performed at the application
    * or callback level as appropriate.
    */
    return alt_msgdma_descriptor_async_transfer(dev, NULL, desc);
2009a90c:	e13ffe17 	ldw	r4,-8(fp)
2009a910:	000b883a 	mov	r5,zero
2009a914:	e1bfff17 	ldw	r6,-4(fp)
2009a918:	009908c0 	call	2009908c <alt_msgdma_descriptor_async_transfer>
}
2009a91c:	e037883a 	mov	sp,fp
2009a920:	dfc00117 	ldw	ra,4(sp)
2009a924:	df000017 	ldw	fp,0(sp)
2009a928:	dec00204 	addi	sp,sp,8
2009a92c:	f800283a 	ret

2009a930 <alt_msgdma_standard_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_standard_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
2009a930:	defffc04 	addi	sp,sp,-16
2009a934:	dfc00315 	stw	ra,12(sp)
2009a938:	df000215 	stw	fp,8(sp)
2009a93c:	df000204 	addi	fp,sp,8
2009a940:	e13ffe15 	stw	r4,-8(fp)
2009a944:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, desc, NULL);
2009a948:	e13ffe17 	ldw	r4,-8(fp)
2009a94c:	e17fff17 	ldw	r5,-4(fp)
2009a950:	000d883a 	mov	r6,zero
2009a954:	009935c0 	call	2009935c <alt_msgdma_descriptor_sync_transfer>
}
2009a958:	e037883a 	mov	sp,fp
2009a95c:	dfc00117 	ldw	ra,4(sp)
2009a960:	df000017 	ldw	fp,0(sp)
2009a964:	dec00204 	addi	sp,sp,8
2009a968:	f800283a 	ret

2009a96c <alt_msgdma_extended_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_extended_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
2009a96c:	defffc04 	addi	sp,sp,-16
2009a970:	dfc00315 	stw	ra,12(sp)
2009a974:	df000215 	stw	fp,8(sp)
2009a978:	df000204 	addi	fp,sp,8
2009a97c:	e13ffe15 	stw	r4,-8(fp)
2009a980:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, NULL, desc);
2009a984:	e13ffe17 	ldw	r4,-8(fp)
2009a988:	000b883a 	mov	r5,zero
2009a98c:	e1bfff17 	ldw	r6,-4(fp)
2009a990:	009935c0 	call	2009935c <alt_msgdma_descriptor_sync_transfer>
}
2009a994:	e037883a 	mov	sp,fp
2009a998:	dfc00117 	ldw	ra,4(sp)
2009a99c:	df000017 	ldw	fp,0(sp)
2009a9a0:	dec00204 	addi	sp,sp,8
2009a9a4:	f800283a 	ret

2009a9a8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
2009a9a8:	defff504 	addi	sp,sp,-44
2009a9ac:	df000a15 	stw	fp,40(sp)
2009a9b0:	df000a04 	addi	fp,sp,40
2009a9b4:	e13ffc15 	stw	r4,-16(fp)
2009a9b8:	e17ffd15 	stw	r5,-12(fp)
2009a9bc:	e1bffe15 	stw	r6,-8(fp)
2009a9c0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
2009a9c4:	e03ff615 	stw	zero,-40(fp)
2009a9c8:	00800034 	movhi	r2,0
2009a9cc:	108a3604 	addi	r2,r2,10456
2009a9d0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
2009a9d4:	10003f26 	beq	r2,zero,2009aad4 <alt_alarm_start+0x12c>
  {
    if (alarm)
2009a9d8:	e0bffc17 	ldw	r2,-16(fp)
2009a9dc:	10003b26 	beq	r2,zero,2009aacc <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
2009a9e0:	e0bffc17 	ldw	r2,-16(fp)
2009a9e4:	e0fffe17 	ldw	r3,-8(fp)
2009a9e8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
2009a9ec:	e0bffc17 	ldw	r2,-16(fp)
2009a9f0:	e0ffff17 	ldw	r3,-4(fp)
2009a9f4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2009a9f8:	0005303a 	rdctl	r2,status
2009a9fc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2009aa00:	e0fff817 	ldw	r3,-32(fp)
2009aa04:	00bfff84 	movi	r2,-2
2009aa08:	1884703a 	and	r2,r3,r2
2009aa0c:	1001703a 	wrctl	status,r2
  
  return context;
2009aa10:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
2009aa14:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
2009aa18:	00800034 	movhi	r2,0
2009aa1c:	108a3704 	addi	r2,r2,10460
2009aa20:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
2009aa24:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
2009aa28:	e0fffd17 	ldw	r3,-12(fp)
2009aa2c:	e0bff617 	ldw	r2,-40(fp)
2009aa30:	1885883a 	add	r2,r3,r2
2009aa34:	10c00044 	addi	r3,r2,1
2009aa38:	e0bffc17 	ldw	r2,-16(fp)
2009aa3c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
2009aa40:	e0bffc17 	ldw	r2,-16(fp)
2009aa44:	10c00217 	ldw	r3,8(r2)
2009aa48:	e0bff617 	ldw	r2,-40(fp)
2009aa4c:	1880042e 	bgeu	r3,r2,2009aa60 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
2009aa50:	e0bffc17 	ldw	r2,-16(fp)
2009aa54:	00c00044 	movi	r3,1
2009aa58:	10c00405 	stb	r3,16(r2)
2009aa5c:	00000206 	br	2009aa68 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
2009aa60:	e0bffc17 	ldw	r2,-16(fp)
2009aa64:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
2009aa68:	e0fffc17 	ldw	r3,-16(fp)
2009aa6c:	00800034 	movhi	r2,0
2009aa70:	108a2104 	addi	r2,r2,10372
2009aa74:	e0bff915 	stw	r2,-28(fp)
2009aa78:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
2009aa7c:	e0bffa17 	ldw	r2,-24(fp)
2009aa80:	e0fff917 	ldw	r3,-28(fp)
2009aa84:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
2009aa88:	e0bff917 	ldw	r2,-28(fp)
2009aa8c:	10c00017 	ldw	r3,0(r2)
2009aa90:	e0bffa17 	ldw	r2,-24(fp)
2009aa94:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
2009aa98:	e0bff917 	ldw	r2,-28(fp)
2009aa9c:	10800017 	ldw	r2,0(r2)
2009aaa0:	e0fffa17 	ldw	r3,-24(fp)
2009aaa4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
2009aaa8:	e0bff917 	ldw	r2,-28(fp)
2009aaac:	e0fffa17 	ldw	r3,-24(fp)
2009aab0:	10c00015 	stw	r3,0(r2)
2009aab4:	e0bff717 	ldw	r2,-36(fp)
2009aab8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2009aabc:	e0bffb17 	ldw	r2,-20(fp)
2009aac0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
2009aac4:	0005883a 	mov	r2,zero
2009aac8:	00000306 	br	2009aad8 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
2009aacc:	00bffa84 	movi	r2,-22
2009aad0:	00000106 	br	2009aad8 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
2009aad4:	00bfde84 	movi	r2,-134
  }
}
2009aad8:	e037883a 	mov	sp,fp
2009aadc:	df000017 	ldw	fp,0(sp)
2009aae0:	dec00104 	addi	sp,sp,4
2009aae4:	f800283a 	ret

2009aae8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
2009aae8:	defffa04 	addi	sp,sp,-24
2009aaec:	dfc00515 	stw	ra,20(sp)
2009aaf0:	df000415 	stw	fp,16(sp)
2009aaf4:	df000404 	addi	fp,sp,16
2009aaf8:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
2009aafc:	008000c4 	movi	r2,3
2009ab00:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
2009ab04:	e0fffd17 	ldw	r3,-12(fp)
2009ab08:	008003f4 	movhi	r2,15
2009ab0c:	10909004 	addi	r2,r2,16960
2009ab10:	1885383a 	mul	r2,r3,r2
2009ab14:	0101dcf4 	movhi	r4,1907
2009ab18:	21165004 	addi	r4,r4,22848
2009ab1c:	100b883a 	mov	r5,r2
2009ab20:	00867940 	call	20086794 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
2009ab24:	01200034 	movhi	r4,32768
2009ab28:	213fffc4 	addi	r4,r4,-1
2009ab2c:	100b883a 	mov	r5,r2
2009ab30:	00867940 	call	20086794 <__udivsi3>
2009ab34:	e13fff17 	ldw	r4,-4(fp)
2009ab38:	100b883a 	mov	r5,r2
2009ab3c:	00867940 	call	20086794 <__udivsi3>
2009ab40:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
2009ab44:	e0bffe17 	ldw	r2,-8(fp)
2009ab48:	10002a26 	beq	r2,zero,2009abf4 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
2009ab4c:	e03ffc15 	stw	zero,-16(fp)
2009ab50:	00001706 	br	2009abb0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
2009ab54:	00a00034 	movhi	r2,32768
2009ab58:	10bfffc4 	addi	r2,r2,-1
2009ab5c:	10bfffc4 	addi	r2,r2,-1
2009ab60:	103ffe1e 	bne	r2,zero,2009ab5c <__flash_rwdata_start+0xffffe514>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
2009ab64:	e0fffd17 	ldw	r3,-12(fp)
2009ab68:	008003f4 	movhi	r2,15
2009ab6c:	10909004 	addi	r2,r2,16960
2009ab70:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
2009ab74:	0101dcf4 	movhi	r4,1907
2009ab78:	21165004 	addi	r4,r4,22848
2009ab7c:	100b883a 	mov	r5,r2
2009ab80:	00867940 	call	20086794 <__udivsi3>
2009ab84:	01200034 	movhi	r4,32768
2009ab88:	213fffc4 	addi	r4,r4,-1
2009ab8c:	100b883a 	mov	r5,r2
2009ab90:	00867940 	call	20086794 <__udivsi3>
2009ab94:	1007883a 	mov	r3,r2
2009ab98:	e0bfff17 	ldw	r2,-4(fp)
2009ab9c:	10c5c83a 	sub	r2,r2,r3
2009aba0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
2009aba4:	e0bffc17 	ldw	r2,-16(fp)
2009aba8:	10800044 	addi	r2,r2,1
2009abac:	e0bffc15 	stw	r2,-16(fp)
2009abb0:	e0fffc17 	ldw	r3,-16(fp)
2009abb4:	e0bffe17 	ldw	r2,-8(fp)
2009abb8:	18bfe616 	blt	r3,r2,2009ab54 <__flash_rwdata_start+0xffffe50c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
2009abbc:	e0fffd17 	ldw	r3,-12(fp)
2009abc0:	008003f4 	movhi	r2,15
2009abc4:	10909004 	addi	r2,r2,16960
2009abc8:	1885383a 	mul	r2,r3,r2
2009abcc:	0101dcf4 	movhi	r4,1907
2009abd0:	21165004 	addi	r4,r4,22848
2009abd4:	100b883a 	mov	r5,r2
2009abd8:	00867940 	call	20086794 <__udivsi3>
2009abdc:	1007883a 	mov	r3,r2
2009abe0:	e0bfff17 	ldw	r2,-4(fp)
2009abe4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
2009abe8:	10bfffc4 	addi	r2,r2,-1
2009abec:	103ffe1e 	bne	r2,zero,2009abe8 <__flash_rwdata_start+0xffffe5a0>
2009abf0:	00000d06 	br	2009ac28 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
2009abf4:	e0fffd17 	ldw	r3,-12(fp)
2009abf8:	008003f4 	movhi	r2,15
2009abfc:	10909004 	addi	r2,r2,16960
2009ac00:	1885383a 	mul	r2,r3,r2
2009ac04:	0101dcf4 	movhi	r4,1907
2009ac08:	21165004 	addi	r4,r4,22848
2009ac0c:	100b883a 	mov	r5,r2
2009ac10:	00867940 	call	20086794 <__udivsi3>
2009ac14:	1007883a 	mov	r3,r2
2009ac18:	e0bfff17 	ldw	r2,-4(fp)
2009ac1c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
2009ac20:	10bfffc4 	addi	r2,r2,-1
2009ac24:	00bffe16 	blt	zero,r2,2009ac20 <__flash_rwdata_start+0xffffe5d8>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
2009ac28:	0005883a 	mov	r2,zero
}
2009ac2c:	e037883a 	mov	sp,fp
2009ac30:	dfc00117 	ldw	ra,4(sp)
2009ac34:	df000017 	ldw	fp,0(sp)
2009ac38:	dec00204 	addi	sp,sp,8
2009ac3c:	f800283a 	ret

2009ac40 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
2009ac40:	defffe04 	addi	sp,sp,-8
2009ac44:	df000115 	stw	fp,4(sp)
2009ac48:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
2009ac4c:	e03fff15 	stw	zero,-4(fp)
2009ac50:	00000506 	br	2009ac68 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
2009ac54:	e0bfff17 	ldw	r2,-4(fp)
2009ac58:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
2009ac5c:	e0bfff17 	ldw	r2,-4(fp)
2009ac60:	10800804 	addi	r2,r2,32
2009ac64:	e0bfff15 	stw	r2,-4(fp)
2009ac68:	e0bfff17 	ldw	r2,-4(fp)
2009ac6c:	10900030 	cmpltui	r2,r2,16384
2009ac70:	103ff81e 	bne	r2,zero,2009ac54 <__flash_rwdata_start+0xffffe60c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
2009ac74:	e037883a 	mov	sp,fp
2009ac78:	df000017 	ldw	fp,0(sp)
2009ac7c:	dec00104 	addi	sp,sp,4
2009ac80:	f800283a 	ret

2009ac84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2009ac84:	defffe04 	addi	sp,sp,-8
2009ac88:	dfc00115 	stw	ra,4(sp)
2009ac8c:	df000015 	stw	fp,0(sp)
2009ac90:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2009ac94:	00800034 	movhi	r2,0
2009ac98:	108a1e04 	addi	r2,r2,10360
2009ac9c:	10800017 	ldw	r2,0(r2)
2009aca0:	10000526 	beq	r2,zero,2009acb8 <alt_get_errno+0x34>
2009aca4:	00800034 	movhi	r2,0
2009aca8:	108a1e04 	addi	r2,r2,10360
2009acac:	10800017 	ldw	r2,0(r2)
2009acb0:	103ee83a 	callr	r2
2009acb4:	00000206 	br	2009acc0 <alt_get_errno+0x3c>
2009acb8:	00800034 	movhi	r2,0
2009acbc:	108a2e04 	addi	r2,r2,10424
}
2009acc0:	e037883a 	mov	sp,fp
2009acc4:	dfc00117 	ldw	ra,4(sp)
2009acc8:	df000017 	ldw	fp,0(sp)
2009accc:	dec00204 	addi	sp,sp,8
2009acd0:	f800283a 	ret

2009acd4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
2009acd4:	defffa04 	addi	sp,sp,-24
2009acd8:	dfc00515 	stw	ra,20(sp)
2009acdc:	df000415 	stw	fp,16(sp)
2009ace0:	df000404 	addi	fp,sp,16
2009ace4:	e13ffe15 	stw	r4,-8(fp)
2009ace8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
2009acec:	e0bffe17 	ldw	r2,-8(fp)
2009acf0:	10000326 	beq	r2,zero,2009ad00 <alt_dev_llist_insert+0x2c>
2009acf4:	e0bffe17 	ldw	r2,-8(fp)
2009acf8:	10800217 	ldw	r2,8(r2)
2009acfc:	1000061e 	bne	r2,zero,2009ad18 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
2009ad00:	009ac840 	call	2009ac84 <alt_get_errno>
2009ad04:	1007883a 	mov	r3,r2
2009ad08:	00800584 	movi	r2,22
2009ad0c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
2009ad10:	00bffa84 	movi	r2,-22
2009ad14:	00001306 	br	2009ad64 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
2009ad18:	e0bffe17 	ldw	r2,-8(fp)
2009ad1c:	e0ffff17 	ldw	r3,-4(fp)
2009ad20:	e0fffc15 	stw	r3,-16(fp)
2009ad24:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
2009ad28:	e0bffd17 	ldw	r2,-12(fp)
2009ad2c:	e0fffc17 	ldw	r3,-16(fp)
2009ad30:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
2009ad34:	e0bffc17 	ldw	r2,-16(fp)
2009ad38:	10c00017 	ldw	r3,0(r2)
2009ad3c:	e0bffd17 	ldw	r2,-12(fp)
2009ad40:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
2009ad44:	e0bffc17 	ldw	r2,-16(fp)
2009ad48:	10800017 	ldw	r2,0(r2)
2009ad4c:	e0fffd17 	ldw	r3,-12(fp)
2009ad50:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
2009ad54:	e0bffc17 	ldw	r2,-16(fp)
2009ad58:	e0fffd17 	ldw	r3,-12(fp)
2009ad5c:	10c00015 	stw	r3,0(r2)

  return 0;  
2009ad60:	0005883a 	mov	r2,zero
}
2009ad64:	e037883a 	mov	sp,fp
2009ad68:	dfc00117 	ldw	ra,4(sp)
2009ad6c:	df000017 	ldw	fp,0(sp)
2009ad70:	dec00204 	addi	sp,sp,8
2009ad74:	f800283a 	ret

2009ad78 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
2009ad78:	defffd04 	addi	sp,sp,-12
2009ad7c:	dfc00215 	stw	ra,8(sp)
2009ad80:	df000115 	stw	fp,4(sp)
2009ad84:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
2009ad88:	008802b4 	movhi	r2,8202
2009ad8c:	10af0304 	addi	r2,r2,-17396
2009ad90:	e0bfff15 	stw	r2,-4(fp)
2009ad94:	00000606 	br	2009adb0 <_do_ctors+0x38>
        (*ctor) (); 
2009ad98:	e0bfff17 	ldw	r2,-4(fp)
2009ad9c:	10800017 	ldw	r2,0(r2)
2009ada0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
2009ada4:	e0bfff17 	ldw	r2,-4(fp)
2009ada8:	10bfff04 	addi	r2,r2,-4
2009adac:	e0bfff15 	stw	r2,-4(fp)
2009adb0:	e0ffff17 	ldw	r3,-4(fp)
2009adb4:	008802b4 	movhi	r2,8202
2009adb8:	10af0404 	addi	r2,r2,-17392
2009adbc:	18bff62e 	bgeu	r3,r2,2009ad98 <__flash_rwdata_start+0xffffe750>
        (*ctor) (); 
}
2009adc0:	e037883a 	mov	sp,fp
2009adc4:	dfc00117 	ldw	ra,4(sp)
2009adc8:	df000017 	ldw	fp,0(sp)
2009adcc:	dec00204 	addi	sp,sp,8
2009add0:	f800283a 	ret

2009add4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
2009add4:	defffd04 	addi	sp,sp,-12
2009add8:	dfc00215 	stw	ra,8(sp)
2009addc:	df000115 	stw	fp,4(sp)
2009ade0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
2009ade4:	008802b4 	movhi	r2,8202
2009ade8:	10af0304 	addi	r2,r2,-17396
2009adec:	e0bfff15 	stw	r2,-4(fp)
2009adf0:	00000606 	br	2009ae0c <_do_dtors+0x38>
        (*dtor) (); 
2009adf4:	e0bfff17 	ldw	r2,-4(fp)
2009adf8:	10800017 	ldw	r2,0(r2)
2009adfc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
2009ae00:	e0bfff17 	ldw	r2,-4(fp)
2009ae04:	10bfff04 	addi	r2,r2,-4
2009ae08:	e0bfff15 	stw	r2,-4(fp)
2009ae0c:	e0ffff17 	ldw	r3,-4(fp)
2009ae10:	008802b4 	movhi	r2,8202
2009ae14:	10af0404 	addi	r2,r2,-17392
2009ae18:	18bff62e 	bgeu	r3,r2,2009adf4 <__flash_rwdata_start+0xffffe7ac>
        (*dtor) (); 
}
2009ae1c:	e037883a 	mov	sp,fp
2009ae20:	dfc00117 	ldw	ra,4(sp)
2009ae24:	df000017 	ldw	fp,0(sp)
2009ae28:	dec00204 	addi	sp,sp,8
2009ae2c:	f800283a 	ret

2009ae30 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
2009ae30:	defffa04 	addi	sp,sp,-24
2009ae34:	dfc00515 	stw	ra,20(sp)
2009ae38:	df000415 	stw	fp,16(sp)
2009ae3c:	df000404 	addi	fp,sp,16
2009ae40:	e13ffe15 	stw	r4,-8(fp)
2009ae44:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
2009ae48:	e0bfff17 	ldw	r2,-4(fp)
2009ae4c:	10800017 	ldw	r2,0(r2)
2009ae50:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
2009ae54:	e13ffe17 	ldw	r4,-8(fp)
2009ae58:	008a73c0 	call	2008a73c <strlen>
2009ae5c:	10800044 	addi	r2,r2,1
2009ae60:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
2009ae64:	00000d06 	br	2009ae9c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
2009ae68:	e0bffc17 	ldw	r2,-16(fp)
2009ae6c:	10c00217 	ldw	r3,8(r2)
2009ae70:	e0bffd17 	ldw	r2,-12(fp)
2009ae74:	1809883a 	mov	r4,r3
2009ae78:	e17ffe17 	ldw	r5,-8(fp)
2009ae7c:	100d883a 	mov	r6,r2
2009ae80:	008a1640 	call	2008a164 <memcmp>
2009ae84:	1000021e 	bne	r2,zero,2009ae90 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
2009ae88:	e0bffc17 	ldw	r2,-16(fp)
2009ae8c:	00000706 	br	2009aeac <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
2009ae90:	e0bffc17 	ldw	r2,-16(fp)
2009ae94:	10800017 	ldw	r2,0(r2)
2009ae98:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
2009ae9c:	e0fffc17 	ldw	r3,-16(fp)
2009aea0:	e0bfff17 	ldw	r2,-4(fp)
2009aea4:	18bff01e 	bne	r3,r2,2009ae68 <__flash_rwdata_start+0xffffe820>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
2009aea8:	0005883a 	mov	r2,zero
}
2009aeac:	e037883a 	mov	sp,fp
2009aeb0:	dfc00117 	ldw	ra,4(sp)
2009aeb4:	df000017 	ldw	fp,0(sp)
2009aeb8:	dec00204 	addi	sp,sp,8
2009aebc:	f800283a 	ret

2009aec0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
2009aec0:	defffe04 	addi	sp,sp,-8
2009aec4:	dfc00115 	stw	ra,4(sp)
2009aec8:	df000015 	stw	fp,0(sp)
2009aecc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
2009aed0:	0009883a 	mov	r4,zero
2009aed4:	01440004 	movi	r5,4096
2009aed8:	009b9c00 	call	2009b9c0 <alt_icache_flush>
#endif
}
2009aedc:	e037883a 	mov	sp,fp
2009aee0:	dfc00117 	ldw	ra,4(sp)
2009aee4:	df000017 	ldw	fp,0(sp)
2009aee8:	dec00204 	addi	sp,sp,8
2009aeec:	f800283a 	ret

2009aef0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
2009aef0:	defff904 	addi	sp,sp,-28
2009aef4:	dfc00615 	stw	ra,24(sp)
2009aef8:	df000515 	stw	fp,20(sp)
2009aefc:	df000504 	addi	fp,sp,20
2009af00:	e13ffc15 	stw	r4,-16(fp)
2009af04:	e17ffd15 	stw	r5,-12(fp)
2009af08:	e1bffe15 	stw	r6,-8(fp)
2009af0c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
2009af10:	e0800217 	ldw	r2,8(fp)
2009af14:	d8800015 	stw	r2,0(sp)
2009af18:	e13ffc17 	ldw	r4,-16(fp)
2009af1c:	e17ffd17 	ldw	r5,-12(fp)
2009af20:	e1bffe17 	ldw	r6,-8(fp)
2009af24:	e1ffff17 	ldw	r7,-4(fp)
2009af28:	009b0d00 	call	2009b0d0 <alt_iic_isr_register>
}  
2009af2c:	e037883a 	mov	sp,fp
2009af30:	dfc00117 	ldw	ra,4(sp)
2009af34:	df000017 	ldw	fp,0(sp)
2009af38:	dec00204 	addi	sp,sp,8
2009af3c:	f800283a 	ret

2009af40 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
2009af40:	defff904 	addi	sp,sp,-28
2009af44:	df000615 	stw	fp,24(sp)
2009af48:	df000604 	addi	fp,sp,24
2009af4c:	e13ffe15 	stw	r4,-8(fp)
2009af50:	e17fff15 	stw	r5,-4(fp)
2009af54:	e0bfff17 	ldw	r2,-4(fp)
2009af58:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2009af5c:	0005303a 	rdctl	r2,status
2009af60:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2009af64:	e0fffb17 	ldw	r3,-20(fp)
2009af68:	00bfff84 	movi	r2,-2
2009af6c:	1884703a 	and	r2,r3,r2
2009af70:	1001703a 	wrctl	status,r2
  
  return context;
2009af74:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
2009af78:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
2009af7c:	e0bffa17 	ldw	r2,-24(fp)
2009af80:	00c00044 	movi	r3,1
2009af84:	1884983a 	sll	r2,r3,r2
2009af88:	1007883a 	mov	r3,r2
2009af8c:	00800034 	movhi	r2,0
2009af90:	108a3204 	addi	r2,r2,10440
2009af94:	10800017 	ldw	r2,0(r2)
2009af98:	1886b03a 	or	r3,r3,r2
2009af9c:	00800034 	movhi	r2,0
2009afa0:	108a3204 	addi	r2,r2,10440
2009afa4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
2009afa8:	00800034 	movhi	r2,0
2009afac:	108a3204 	addi	r2,r2,10440
2009afb0:	10800017 	ldw	r2,0(r2)
2009afb4:	100170fa 	wrctl	ienable,r2
2009afb8:	e0bffc17 	ldw	r2,-16(fp)
2009afbc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2009afc0:	e0bffd17 	ldw	r2,-12(fp)
2009afc4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
2009afc8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
2009afcc:	0001883a 	nop
}
2009afd0:	e037883a 	mov	sp,fp
2009afd4:	df000017 	ldw	fp,0(sp)
2009afd8:	dec00104 	addi	sp,sp,4
2009afdc:	f800283a 	ret

2009afe0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
2009afe0:	defff904 	addi	sp,sp,-28
2009afe4:	df000615 	stw	fp,24(sp)
2009afe8:	df000604 	addi	fp,sp,24
2009afec:	e13ffe15 	stw	r4,-8(fp)
2009aff0:	e17fff15 	stw	r5,-4(fp)
2009aff4:	e0bfff17 	ldw	r2,-4(fp)
2009aff8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2009affc:	0005303a 	rdctl	r2,status
2009b000:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2009b004:	e0fffb17 	ldw	r3,-20(fp)
2009b008:	00bfff84 	movi	r2,-2
2009b00c:	1884703a 	and	r2,r3,r2
2009b010:	1001703a 	wrctl	status,r2
  
  return context;
2009b014:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
2009b018:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
2009b01c:	e0bffa17 	ldw	r2,-24(fp)
2009b020:	00c00044 	movi	r3,1
2009b024:	1884983a 	sll	r2,r3,r2
2009b028:	0084303a 	nor	r2,zero,r2
2009b02c:	1007883a 	mov	r3,r2
2009b030:	00800034 	movhi	r2,0
2009b034:	108a3204 	addi	r2,r2,10440
2009b038:	10800017 	ldw	r2,0(r2)
2009b03c:	1886703a 	and	r3,r3,r2
2009b040:	00800034 	movhi	r2,0
2009b044:	108a3204 	addi	r2,r2,10440
2009b048:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
2009b04c:	00800034 	movhi	r2,0
2009b050:	108a3204 	addi	r2,r2,10440
2009b054:	10800017 	ldw	r2,0(r2)
2009b058:	100170fa 	wrctl	ienable,r2
2009b05c:	e0bffc17 	ldw	r2,-16(fp)
2009b060:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2009b064:	e0bffd17 	ldw	r2,-12(fp)
2009b068:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
2009b06c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
2009b070:	0001883a 	nop
}
2009b074:	e037883a 	mov	sp,fp
2009b078:	df000017 	ldw	fp,0(sp)
2009b07c:	dec00104 	addi	sp,sp,4
2009b080:	f800283a 	ret

2009b084 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
2009b084:	defffc04 	addi	sp,sp,-16
2009b088:	df000315 	stw	fp,12(sp)
2009b08c:	df000304 	addi	fp,sp,12
2009b090:	e13ffe15 	stw	r4,-8(fp)
2009b094:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
2009b098:	000530fa 	rdctl	r2,ienable
2009b09c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
2009b0a0:	e0bfff17 	ldw	r2,-4(fp)
2009b0a4:	00c00044 	movi	r3,1
2009b0a8:	1884983a 	sll	r2,r3,r2
2009b0ac:	1007883a 	mov	r3,r2
2009b0b0:	e0bffd17 	ldw	r2,-12(fp)
2009b0b4:	1884703a 	and	r2,r3,r2
2009b0b8:	1004c03a 	cmpne	r2,r2,zero
2009b0bc:	10803fcc 	andi	r2,r2,255
}
2009b0c0:	e037883a 	mov	sp,fp
2009b0c4:	df000017 	ldw	fp,0(sp)
2009b0c8:	dec00104 	addi	sp,sp,4
2009b0cc:	f800283a 	ret

2009b0d0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
2009b0d0:	defff504 	addi	sp,sp,-44
2009b0d4:	dfc00a15 	stw	ra,40(sp)
2009b0d8:	df000915 	stw	fp,36(sp)
2009b0dc:	df000904 	addi	fp,sp,36
2009b0e0:	e13ffc15 	stw	r4,-16(fp)
2009b0e4:	e17ffd15 	stw	r5,-12(fp)
2009b0e8:	e1bffe15 	stw	r6,-8(fp)
2009b0ec:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
2009b0f0:	00bffa84 	movi	r2,-22
2009b0f4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
2009b0f8:	e0bffd17 	ldw	r2,-12(fp)
2009b0fc:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
2009b100:	e0bff817 	ldw	r2,-32(fp)
2009b104:	10800808 	cmpgei	r2,r2,32
2009b108:	1000271e 	bne	r2,zero,2009b1a8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2009b10c:	0005303a 	rdctl	r2,status
2009b110:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2009b114:	e0fffa17 	ldw	r3,-24(fp)
2009b118:	00bfff84 	movi	r2,-2
2009b11c:	1884703a 	and	r2,r3,r2
2009b120:	1001703a 	wrctl	status,r2
  
  return context;
2009b124:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
2009b128:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
2009b12c:	00800034 	movhi	r2,0
2009b130:	108bb704 	addi	r2,r2,11996
2009b134:	e0fff817 	ldw	r3,-32(fp)
2009b138:	180690fa 	slli	r3,r3,3
2009b13c:	10c5883a 	add	r2,r2,r3
2009b140:	e0fffe17 	ldw	r3,-8(fp)
2009b144:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
2009b148:	00800034 	movhi	r2,0
2009b14c:	108bb704 	addi	r2,r2,11996
2009b150:	e0fff817 	ldw	r3,-32(fp)
2009b154:	180690fa 	slli	r3,r3,3
2009b158:	18c00104 	addi	r3,r3,4
2009b15c:	10c5883a 	add	r2,r2,r3
2009b160:	e0ffff17 	ldw	r3,-4(fp)
2009b164:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
2009b168:	e0bffe17 	ldw	r2,-8(fp)
2009b16c:	10000526 	beq	r2,zero,2009b184 <alt_iic_isr_register+0xb4>
2009b170:	e0bff817 	ldw	r2,-32(fp)
2009b174:	e13ffc17 	ldw	r4,-16(fp)
2009b178:	100b883a 	mov	r5,r2
2009b17c:	009af400 	call	2009af40 <alt_ic_irq_enable>
2009b180:	00000406 	br	2009b194 <alt_iic_isr_register+0xc4>
2009b184:	e0bff817 	ldw	r2,-32(fp)
2009b188:	e13ffc17 	ldw	r4,-16(fp)
2009b18c:	100b883a 	mov	r5,r2
2009b190:	009afe00 	call	2009afe0 <alt_ic_irq_disable>
2009b194:	e0bff715 	stw	r2,-36(fp)
2009b198:	e0bff917 	ldw	r2,-28(fp)
2009b19c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2009b1a0:	e0bffb17 	ldw	r2,-20(fp)
2009b1a4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
2009b1a8:	e0bff717 	ldw	r2,-36(fp)
}
2009b1ac:	e037883a 	mov	sp,fp
2009b1b0:	dfc00117 	ldw	ra,4(sp)
2009b1b4:	df000017 	ldw	fp,0(sp)
2009b1b8:	dec00204 	addi	sp,sp,8
2009b1bc:	f800283a 	ret

2009b1c0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
2009b1c0:	defff904 	addi	sp,sp,-28
2009b1c4:	dfc00615 	stw	ra,24(sp)
2009b1c8:	df000515 	stw	fp,20(sp)
2009b1cc:	df000504 	addi	fp,sp,20
2009b1d0:	e13ffc15 	stw	r4,-16(fp)
2009b1d4:	e17ffd15 	stw	r5,-12(fp)
2009b1d8:	e1bffe15 	stw	r6,-8(fp)
2009b1dc:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
2009b1e0:	e13ffd17 	ldw	r4,-12(fp)
2009b1e4:	e17ffe17 	ldw	r5,-8(fp)
2009b1e8:	e1bfff17 	ldw	r6,-4(fp)
2009b1ec:	009b4140 	call	2009b414 <open>
2009b1f0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
2009b1f4:	e0bffb17 	ldw	r2,-20(fp)
2009b1f8:	10001c16 	blt	r2,zero,2009b26c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
2009b1fc:	00800034 	movhi	r2,0
2009b200:	10858104 	addi	r2,r2,5636
2009b204:	e0fffb17 	ldw	r3,-20(fp)
2009b208:	18c00324 	muli	r3,r3,12
2009b20c:	10c5883a 	add	r2,r2,r3
2009b210:	10c00017 	ldw	r3,0(r2)
2009b214:	e0bffc17 	ldw	r2,-16(fp)
2009b218:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
2009b21c:	00800034 	movhi	r2,0
2009b220:	10858104 	addi	r2,r2,5636
2009b224:	e0fffb17 	ldw	r3,-20(fp)
2009b228:	18c00324 	muli	r3,r3,12
2009b22c:	18c00104 	addi	r3,r3,4
2009b230:	10c5883a 	add	r2,r2,r3
2009b234:	10c00017 	ldw	r3,0(r2)
2009b238:	e0bffc17 	ldw	r2,-16(fp)
2009b23c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
2009b240:	00800034 	movhi	r2,0
2009b244:	10858104 	addi	r2,r2,5636
2009b248:	e0fffb17 	ldw	r3,-20(fp)
2009b24c:	18c00324 	muli	r3,r3,12
2009b250:	18c00204 	addi	r3,r3,8
2009b254:	10c5883a 	add	r2,r2,r3
2009b258:	10c00017 	ldw	r3,0(r2)
2009b25c:	e0bffc17 	ldw	r2,-16(fp)
2009b260:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
2009b264:	e13ffb17 	ldw	r4,-20(fp)
2009b268:	0097b280 	call	20097b28 <alt_release_fd>
  }
} 
2009b26c:	e037883a 	mov	sp,fp
2009b270:	dfc00117 	ldw	ra,4(sp)
2009b274:	df000017 	ldw	fp,0(sp)
2009b278:	dec00204 	addi	sp,sp,8
2009b27c:	f800283a 	ret

2009b280 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
2009b280:	defffb04 	addi	sp,sp,-20
2009b284:	dfc00415 	stw	ra,16(sp)
2009b288:	df000315 	stw	fp,12(sp)
2009b28c:	df000304 	addi	fp,sp,12
2009b290:	e13ffd15 	stw	r4,-12(fp)
2009b294:	e17ffe15 	stw	r5,-8(fp)
2009b298:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
2009b29c:	01000034 	movhi	r4,0
2009b2a0:	21058404 	addi	r4,r4,5648
2009b2a4:	e17ffd17 	ldw	r5,-12(fp)
2009b2a8:	01800044 	movi	r6,1
2009b2ac:	01c07fc4 	movi	r7,511
2009b2b0:	009b1c00 	call	2009b1c0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
2009b2b4:	01000034 	movhi	r4,0
2009b2b8:	21058104 	addi	r4,r4,5636
2009b2bc:	e17ffe17 	ldw	r5,-8(fp)
2009b2c0:	000d883a 	mov	r6,zero
2009b2c4:	01c07fc4 	movi	r7,511
2009b2c8:	009b1c00 	call	2009b1c0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
2009b2cc:	01000034 	movhi	r4,0
2009b2d0:	21058704 	addi	r4,r4,5660
2009b2d4:	e17fff17 	ldw	r5,-4(fp)
2009b2d8:	01800044 	movi	r6,1
2009b2dc:	01c07fc4 	movi	r7,511
2009b2e0:	009b1c00 	call	2009b1c0 <alt_open_fd>
}  
2009b2e4:	e037883a 	mov	sp,fp
2009b2e8:	dfc00117 	ldw	ra,4(sp)
2009b2ec:	df000017 	ldw	fp,0(sp)
2009b2f0:	dec00204 	addi	sp,sp,8
2009b2f4:	f800283a 	ret

2009b2f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2009b2f8:	defffe04 	addi	sp,sp,-8
2009b2fc:	dfc00115 	stw	ra,4(sp)
2009b300:	df000015 	stw	fp,0(sp)
2009b304:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2009b308:	00800034 	movhi	r2,0
2009b30c:	108a1e04 	addi	r2,r2,10360
2009b310:	10800017 	ldw	r2,0(r2)
2009b314:	10000526 	beq	r2,zero,2009b32c <alt_get_errno+0x34>
2009b318:	00800034 	movhi	r2,0
2009b31c:	108a1e04 	addi	r2,r2,10360
2009b320:	10800017 	ldw	r2,0(r2)
2009b324:	103ee83a 	callr	r2
2009b328:	00000206 	br	2009b334 <alt_get_errno+0x3c>
2009b32c:	00800034 	movhi	r2,0
2009b330:	108a2e04 	addi	r2,r2,10424
}
2009b334:	e037883a 	mov	sp,fp
2009b338:	dfc00117 	ldw	ra,4(sp)
2009b33c:	df000017 	ldw	fp,0(sp)
2009b340:	dec00204 	addi	sp,sp,8
2009b344:	f800283a 	ret

2009b348 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
2009b348:	defffd04 	addi	sp,sp,-12
2009b34c:	df000215 	stw	fp,8(sp)
2009b350:	df000204 	addi	fp,sp,8
2009b354:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
2009b358:	e0bfff17 	ldw	r2,-4(fp)
2009b35c:	10800217 	ldw	r2,8(r2)
2009b360:	10d00034 	orhi	r3,r2,16384
2009b364:	e0bfff17 	ldw	r2,-4(fp)
2009b368:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
2009b36c:	e03ffe15 	stw	zero,-8(fp)
2009b370:	00001d06 	br	2009b3e8 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
2009b374:	00800034 	movhi	r2,0
2009b378:	10858104 	addi	r2,r2,5636
2009b37c:	e0fffe17 	ldw	r3,-8(fp)
2009b380:	18c00324 	muli	r3,r3,12
2009b384:	10c5883a 	add	r2,r2,r3
2009b388:	10c00017 	ldw	r3,0(r2)
2009b38c:	e0bfff17 	ldw	r2,-4(fp)
2009b390:	10800017 	ldw	r2,0(r2)
2009b394:	1880111e 	bne	r3,r2,2009b3dc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
2009b398:	00800034 	movhi	r2,0
2009b39c:	10858104 	addi	r2,r2,5636
2009b3a0:	e0fffe17 	ldw	r3,-8(fp)
2009b3a4:	18c00324 	muli	r3,r3,12
2009b3a8:	18c00204 	addi	r3,r3,8
2009b3ac:	10c5883a 	add	r2,r2,r3
2009b3b0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
2009b3b4:	1000090e 	bge	r2,zero,2009b3dc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
2009b3b8:	e0bffe17 	ldw	r2,-8(fp)
2009b3bc:	10c00324 	muli	r3,r2,12
2009b3c0:	00800034 	movhi	r2,0
2009b3c4:	10858104 	addi	r2,r2,5636
2009b3c8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
2009b3cc:	e0bfff17 	ldw	r2,-4(fp)
2009b3d0:	18800226 	beq	r3,r2,2009b3dc <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
2009b3d4:	00bffcc4 	movi	r2,-13
2009b3d8:	00000a06 	br	2009b404 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
2009b3dc:	e0bffe17 	ldw	r2,-8(fp)
2009b3e0:	10800044 	addi	r2,r2,1
2009b3e4:	e0bffe15 	stw	r2,-8(fp)
2009b3e8:	00800034 	movhi	r2,0
2009b3ec:	108a1d04 	addi	r2,r2,10356
2009b3f0:	10800017 	ldw	r2,0(r2)
2009b3f4:	1007883a 	mov	r3,r2
2009b3f8:	e0bffe17 	ldw	r2,-8(fp)
2009b3fc:	18bfdd2e 	bgeu	r3,r2,2009b374 <__flash_rwdata_start+0xffffed2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
2009b400:	0005883a 	mov	r2,zero
}
2009b404:	e037883a 	mov	sp,fp
2009b408:	df000017 	ldw	fp,0(sp)
2009b40c:	dec00104 	addi	sp,sp,4
2009b410:	f800283a 	ret

2009b414 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
2009b414:	defff604 	addi	sp,sp,-40
2009b418:	dfc00915 	stw	ra,36(sp)
2009b41c:	df000815 	stw	fp,32(sp)
2009b420:	df000804 	addi	fp,sp,32
2009b424:	e13ffd15 	stw	r4,-12(fp)
2009b428:	e17ffe15 	stw	r5,-8(fp)
2009b42c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
2009b430:	00bfffc4 	movi	r2,-1
2009b434:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
2009b438:	00bffb44 	movi	r2,-19
2009b43c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
2009b440:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
2009b444:	e13ffd17 	ldw	r4,-12(fp)
2009b448:	01400034 	movhi	r5,0
2009b44c:	294a1b04 	addi	r5,r5,10348
2009b450:	009ae300 	call	2009ae30 <alt_find_dev>
2009b454:	e0bff815 	stw	r2,-32(fp)
2009b458:	e0bff817 	ldw	r2,-32(fp)
2009b45c:	1000051e 	bne	r2,zero,2009b474 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
2009b460:	e13ffd17 	ldw	r4,-12(fp)
2009b464:	009b7f80 	call	2009b7f8 <alt_find_file>
2009b468:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
2009b46c:	00800044 	movi	r2,1
2009b470:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
2009b474:	e0bff817 	ldw	r2,-32(fp)
2009b478:	10002926 	beq	r2,zero,2009b520 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
2009b47c:	e13ff817 	ldw	r4,-32(fp)
2009b480:	009b90c0 	call	2009b90c <alt_get_fd>
2009b484:	e0bff915 	stw	r2,-28(fp)
2009b488:	e0bff917 	ldw	r2,-28(fp)
2009b48c:	1000030e 	bge	r2,zero,2009b49c <open+0x88>
    {
      status = index;
2009b490:	e0bff917 	ldw	r2,-28(fp)
2009b494:	e0bffa15 	stw	r2,-24(fp)
2009b498:	00002306 	br	2009b528 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
2009b49c:	e0bff917 	ldw	r2,-28(fp)
2009b4a0:	10c00324 	muli	r3,r2,12
2009b4a4:	00800034 	movhi	r2,0
2009b4a8:	10858104 	addi	r2,r2,5636
2009b4ac:	1885883a 	add	r2,r3,r2
2009b4b0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
2009b4b4:	e0fffe17 	ldw	r3,-8(fp)
2009b4b8:	00900034 	movhi	r2,16384
2009b4bc:	10bfffc4 	addi	r2,r2,-1
2009b4c0:	1886703a 	and	r3,r3,r2
2009b4c4:	e0bffc17 	ldw	r2,-16(fp)
2009b4c8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
2009b4cc:	e0bffb17 	ldw	r2,-20(fp)
2009b4d0:	1000051e 	bne	r2,zero,2009b4e8 <open+0xd4>
2009b4d4:	e13ffc17 	ldw	r4,-16(fp)
2009b4d8:	009b3480 	call	2009b348 <alt_file_locked>
2009b4dc:	e0bffa15 	stw	r2,-24(fp)
2009b4e0:	e0bffa17 	ldw	r2,-24(fp)
2009b4e4:	10001016 	blt	r2,zero,2009b528 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
2009b4e8:	e0bff817 	ldw	r2,-32(fp)
2009b4ec:	10800317 	ldw	r2,12(r2)
2009b4f0:	10000826 	beq	r2,zero,2009b514 <open+0x100>
2009b4f4:	e0bff817 	ldw	r2,-32(fp)
2009b4f8:	10800317 	ldw	r2,12(r2)
2009b4fc:	e13ffc17 	ldw	r4,-16(fp)
2009b500:	e17ffd17 	ldw	r5,-12(fp)
2009b504:	e1bffe17 	ldw	r6,-8(fp)
2009b508:	e1ffff17 	ldw	r7,-4(fp)
2009b50c:	103ee83a 	callr	r2
2009b510:	00000106 	br	2009b518 <open+0x104>
2009b514:	0005883a 	mov	r2,zero
2009b518:	e0bffa15 	stw	r2,-24(fp)
2009b51c:	00000206 	br	2009b528 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
2009b520:	00bffb44 	movi	r2,-19
2009b524:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
2009b528:	e0bffa17 	ldw	r2,-24(fp)
2009b52c:	1000090e 	bge	r2,zero,2009b554 <open+0x140>
  {
    alt_release_fd (index);  
2009b530:	e13ff917 	ldw	r4,-28(fp)
2009b534:	0097b280 	call	20097b28 <alt_release_fd>
    ALT_ERRNO = -status;
2009b538:	009b2f80 	call	2009b2f8 <alt_get_errno>
2009b53c:	1007883a 	mov	r3,r2
2009b540:	e0bffa17 	ldw	r2,-24(fp)
2009b544:	0085c83a 	sub	r2,zero,r2
2009b548:	18800015 	stw	r2,0(r3)
    return -1;
2009b54c:	00bfffc4 	movi	r2,-1
2009b550:	00000106 	br	2009b558 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
2009b554:	e0bff917 	ldw	r2,-28(fp)
}
2009b558:	e037883a 	mov	sp,fp
2009b55c:	dfc00117 	ldw	ra,4(sp)
2009b560:	df000017 	ldw	fp,0(sp)
2009b564:	dec00204 	addi	sp,sp,8
2009b568:	f800283a 	ret

2009b56c <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
2009b56c:	defff204 	addi	sp,sp,-56
2009b570:	dfc00a15 	stw	ra,40(sp)
2009b574:	df000915 	stw	fp,36(sp)
2009b578:	df000904 	addi	fp,sp,36
2009b57c:	e1400215 	stw	r5,8(fp)
2009b580:	e1800315 	stw	r6,12(fp)
2009b584:	e1c00415 	stw	r7,16(fp)
2009b588:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
2009b58c:	e0800204 	addi	r2,fp,8
2009b590:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
2009b594:	e0bfff17 	ldw	r2,-4(fp)
2009b598:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
2009b59c:	00007106 	br	2009b764 <alt_printf+0x1f8>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
2009b5a0:	e0bff807 	ldb	r2,-32(fp)
2009b5a4:	10800960 	cmpeqi	r2,r2,37
2009b5a8:	1000041e 	bne	r2,zero,2009b5bc <alt_printf+0x50>
        {
            alt_putchar(c);
2009b5ac:	e0bff807 	ldb	r2,-32(fp)
2009b5b0:	1009883a 	mov	r4,r2
2009b5b4:	009b7940 	call	2009b794 <alt_putchar>
2009b5b8:	00006a06 	br	2009b764 <alt_printf+0x1f8>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
2009b5bc:	e0bff717 	ldw	r2,-36(fp)
2009b5c0:	10c00044 	addi	r3,r2,1
2009b5c4:	e0fff715 	stw	r3,-36(fp)
2009b5c8:	10800003 	ldbu	r2,0(r2)
2009b5cc:	e0bff805 	stb	r2,-32(fp)
2009b5d0:	e0bff807 	ldb	r2,-32(fp)
2009b5d4:	10006226 	beq	r2,zero,2009b760 <alt_printf+0x1f4>
            {
                if (c == '%')
2009b5d8:	e0bff807 	ldb	r2,-32(fp)
2009b5dc:	10800958 	cmpnei	r2,r2,37
2009b5e0:	1000041e 	bne	r2,zero,2009b5f4 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
2009b5e4:	e0bff807 	ldb	r2,-32(fp)
2009b5e8:	1009883a 	mov	r4,r2
2009b5ec:	009b7940 	call	2009b794 <alt_putchar>
2009b5f0:	00005c06 	br	2009b764 <alt_printf+0x1f8>
                } 
                else if (c == 'c')
2009b5f4:	e0bff807 	ldb	r2,-32(fp)
2009b5f8:	108018d8 	cmpnei	r2,r2,99
2009b5fc:	1000081e 	bne	r2,zero,2009b620 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
2009b600:	e0bffe17 	ldw	r2,-8(fp)
2009b604:	10c00104 	addi	r3,r2,4
2009b608:	e0fffe15 	stw	r3,-8(fp)
2009b60c:	10800017 	ldw	r2,0(r2)
2009b610:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
2009b614:	e13ffd17 	ldw	r4,-12(fp)
2009b618:	009b7940 	call	2009b794 <alt_putchar>
2009b61c:	00005106 	br	2009b764 <alt_printf+0x1f8>
                }
                else if (c == 'x')
2009b620:	e0bff807 	ldb	r2,-32(fp)
2009b624:	10801e18 	cmpnei	r2,r2,120
2009b628:	1000341e 	bne	r2,zero,2009b6fc <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
2009b62c:	e0bffe17 	ldw	r2,-8(fp)
2009b630:	10c00104 	addi	r3,r2,4
2009b634:	e0fffe15 	stw	r3,-8(fp)
2009b638:	10800017 	ldw	r2,0(r2)
2009b63c:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
2009b640:	e0bffb17 	ldw	r2,-20(fp)
2009b644:	1000031e 	bne	r2,zero,2009b654 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
2009b648:	01000c04 	movi	r4,48
2009b64c:	009b7940 	call	2009b794 <alt_putchar>
                        continue;
2009b650:	00004406 	br	2009b764 <alt_printf+0x1f8>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
2009b654:	00800704 	movi	r2,28
2009b658:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
2009b65c:	00000306 	br	2009b66c <alt_printf+0x100>
                        digit_shift -= 4;
2009b660:	e0bff917 	ldw	r2,-28(fp)
2009b664:	10bfff04 	addi	r2,r2,-4
2009b668:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
2009b66c:	00c003c4 	movi	r3,15
2009b670:	e0bff917 	ldw	r2,-28(fp)
2009b674:	1884983a 	sll	r2,r3,r2
2009b678:	1007883a 	mov	r3,r2
2009b67c:	e0bffb17 	ldw	r2,-20(fp)
2009b680:	1884703a 	and	r2,r3,r2
2009b684:	103ff626 	beq	r2,zero,2009b660 <__flash_rwdata_start+0xfffff018>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
2009b688:	00001906 	br	2009b6f0 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
2009b68c:	00c003c4 	movi	r3,15
2009b690:	e0bff917 	ldw	r2,-28(fp)
2009b694:	1884983a 	sll	r2,r3,r2
2009b698:	1007883a 	mov	r3,r2
2009b69c:	e0bffb17 	ldw	r2,-20(fp)
2009b6a0:	1886703a 	and	r3,r3,r2
2009b6a4:	e0bff917 	ldw	r2,-28(fp)
2009b6a8:	1884d83a 	srl	r2,r3,r2
2009b6ac:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
2009b6b0:	e0bffc17 	ldw	r2,-16(fp)
2009b6b4:	108002a8 	cmpgeui	r2,r2,10
2009b6b8:	1000041e 	bne	r2,zero,2009b6cc <alt_printf+0x160>
                            c = '0' + digit;
2009b6bc:	e0bffc17 	ldw	r2,-16(fp)
2009b6c0:	10800c04 	addi	r2,r2,48
2009b6c4:	e0bff805 	stb	r2,-32(fp)
2009b6c8:	00000306 	br	2009b6d8 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
2009b6cc:	e0bffc17 	ldw	r2,-16(fp)
2009b6d0:	108015c4 	addi	r2,r2,87
2009b6d4:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
2009b6d8:	e0bff807 	ldb	r2,-32(fp)
2009b6dc:	1009883a 	mov	r4,r2
2009b6e0:	009b7940 	call	2009b794 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
2009b6e4:	e0bff917 	ldw	r2,-28(fp)
2009b6e8:	10bfff04 	addi	r2,r2,-4
2009b6ec:	e0bff915 	stw	r2,-28(fp)
2009b6f0:	e0bff917 	ldw	r2,-28(fp)
2009b6f4:	103fe50e 	bge	r2,zero,2009b68c <__flash_rwdata_start+0xfffff044>
2009b6f8:	00001a06 	br	2009b764 <alt_printf+0x1f8>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
2009b6fc:	e0bff807 	ldb	r2,-32(fp)
2009b700:	10801cd8 	cmpnei	r2,r2,115
2009b704:	1000151e 	bne	r2,zero,2009b75c <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
2009b708:	e0bffe17 	ldw	r2,-8(fp)
2009b70c:	10c00104 	addi	r3,r2,4
2009b710:	e0fffe15 	stw	r3,-8(fp)
2009b714:	10800017 	ldw	r2,0(r2)
2009b718:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
2009b71c:	00000906 	br	2009b744 <alt_printf+0x1d8>
                      alt_putchar(*s++);
2009b720:	e0bffa17 	ldw	r2,-24(fp)
2009b724:	10c00044 	addi	r3,r2,1
2009b728:	e0fffa15 	stw	r3,-24(fp)
2009b72c:	10800003 	ldbu	r2,0(r2)
2009b730:	10803fcc 	andi	r2,r2,255
2009b734:	1080201c 	xori	r2,r2,128
2009b738:	10bfe004 	addi	r2,r2,-128
2009b73c:	1009883a 	mov	r4,r2
2009b740:	009b7940 	call	2009b794 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
2009b744:	e0bffa17 	ldw	r2,-24(fp)
2009b748:	10800003 	ldbu	r2,0(r2)
2009b74c:	10803fcc 	andi	r2,r2,255
2009b750:	1080201c 	xori	r2,r2,128
2009b754:	10bfe004 	addi	r2,r2,-128
2009b758:	103ff11e 	bne	r2,zero,2009b720 <__flash_rwdata_start+0xfffff0d8>
2009b75c:	00000106 	br	2009b764 <alt_printf+0x1f8>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
2009b760:	00000706 	br	2009b780 <alt_printf+0x214>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
2009b764:	e0bff717 	ldw	r2,-36(fp)
2009b768:	10c00044 	addi	r3,r2,1
2009b76c:	e0fff715 	stw	r3,-36(fp)
2009b770:	10800003 	ldbu	r2,0(r2)
2009b774:	e0bff805 	stb	r2,-32(fp)
2009b778:	e0bff807 	ldb	r2,-32(fp)
2009b77c:	103f881e 	bne	r2,zero,2009b5a0 <__flash_rwdata_start+0xffffef58>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
2009b780:	e037883a 	mov	sp,fp
2009b784:	dfc00117 	ldw	ra,4(sp)
2009b788:	df000017 	ldw	fp,0(sp)
2009b78c:	dec00504 	addi	sp,sp,20
2009b790:	f800283a 	ret

2009b794 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
2009b794:	defffd04 	addi	sp,sp,-12
2009b798:	dfc00215 	stw	ra,8(sp)
2009b79c:	df000115 	stw	fp,4(sp)
2009b7a0:	df000104 	addi	fp,sp,4
2009b7a4:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
2009b7a8:	00800034 	movhi	r2,0
2009b7ac:	108a1404 	addi	r2,r2,10320
2009b7b0:	10800017 	ldw	r2,0(r2)
2009b7b4:	10800217 	ldw	r2,8(r2)
2009b7b8:	e13fff17 	ldw	r4,-4(fp)
2009b7bc:	100b883a 	mov	r5,r2
2009b7c0:	0092ae80 	call	20092ae8 <putc>
#endif
#endif
}
2009b7c4:	e037883a 	mov	sp,fp
2009b7c8:	dfc00117 	ldw	ra,4(sp)
2009b7cc:	df000017 	ldw	fp,0(sp)
2009b7d0:	dec00204 	addi	sp,sp,8
2009b7d4:	f800283a 	ret

2009b7d8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
2009b7d8:	deffff04 	addi	sp,sp,-4
2009b7dc:	df000015 	stw	fp,0(sp)
2009b7e0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
2009b7e4:	000170fa 	wrctl	ienable,zero
}
2009b7e8:	e037883a 	mov	sp,fp
2009b7ec:	df000017 	ldw	fp,0(sp)
2009b7f0:	dec00104 	addi	sp,sp,4
2009b7f4:	f800283a 	ret

2009b7f8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
2009b7f8:	defffb04 	addi	sp,sp,-20
2009b7fc:	dfc00415 	stw	ra,16(sp)
2009b800:	df000315 	stw	fp,12(sp)
2009b804:	df000304 	addi	fp,sp,12
2009b808:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
2009b80c:	00800034 	movhi	r2,0
2009b810:	108a1904 	addi	r2,r2,10340
2009b814:	10800017 	ldw	r2,0(r2)
2009b818:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
2009b81c:	00003106 	br	2009b8e4 <alt_find_file+0xec>
  {
    len = strlen(next->name);
2009b820:	e0bffd17 	ldw	r2,-12(fp)
2009b824:	10800217 	ldw	r2,8(r2)
2009b828:	1009883a 	mov	r4,r2
2009b82c:	008a73c0 	call	2008a73c <strlen>
2009b830:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
2009b834:	e0bffd17 	ldw	r2,-12(fp)
2009b838:	10c00217 	ldw	r3,8(r2)
2009b83c:	e0bffe17 	ldw	r2,-8(fp)
2009b840:	10bfffc4 	addi	r2,r2,-1
2009b844:	1885883a 	add	r2,r3,r2
2009b848:	10800003 	ldbu	r2,0(r2)
2009b84c:	10803fcc 	andi	r2,r2,255
2009b850:	1080201c 	xori	r2,r2,128
2009b854:	10bfe004 	addi	r2,r2,-128
2009b858:	10800bd8 	cmpnei	r2,r2,47
2009b85c:	1000031e 	bne	r2,zero,2009b86c <alt_find_file+0x74>
    {
      len -= 1;
2009b860:	e0bffe17 	ldw	r2,-8(fp)
2009b864:	10bfffc4 	addi	r2,r2,-1
2009b868:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
2009b86c:	e0bffe17 	ldw	r2,-8(fp)
2009b870:	e0ffff17 	ldw	r3,-4(fp)
2009b874:	1885883a 	add	r2,r3,r2
2009b878:	10800003 	ldbu	r2,0(r2)
2009b87c:	10803fcc 	andi	r2,r2,255
2009b880:	1080201c 	xori	r2,r2,128
2009b884:	10bfe004 	addi	r2,r2,-128
2009b888:	10800be0 	cmpeqi	r2,r2,47
2009b88c:	1000081e 	bne	r2,zero,2009b8b0 <alt_find_file+0xb8>
2009b890:	e0bffe17 	ldw	r2,-8(fp)
2009b894:	e0ffff17 	ldw	r3,-4(fp)
2009b898:	1885883a 	add	r2,r3,r2
2009b89c:	10800003 	ldbu	r2,0(r2)
2009b8a0:	10803fcc 	andi	r2,r2,255
2009b8a4:	1080201c 	xori	r2,r2,128
2009b8a8:	10bfe004 	addi	r2,r2,-128
2009b8ac:	10000a1e 	bne	r2,zero,2009b8d8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
2009b8b0:	e0bffd17 	ldw	r2,-12(fp)
2009b8b4:	10c00217 	ldw	r3,8(r2)
2009b8b8:	e0bffe17 	ldw	r2,-8(fp)
2009b8bc:	1809883a 	mov	r4,r3
2009b8c0:	e17fff17 	ldw	r5,-4(fp)
2009b8c4:	100d883a 	mov	r6,r2
2009b8c8:	008a1640 	call	2008a164 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
2009b8cc:	1000021e 	bne	r2,zero,2009b8d8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
2009b8d0:	e0bffd17 	ldw	r2,-12(fp)
2009b8d4:	00000806 	br	2009b8f8 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
2009b8d8:	e0bffd17 	ldw	r2,-12(fp)
2009b8dc:	10800017 	ldw	r2,0(r2)
2009b8e0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
2009b8e4:	e0fffd17 	ldw	r3,-12(fp)
2009b8e8:	00800034 	movhi	r2,0
2009b8ec:	108a1904 	addi	r2,r2,10340
2009b8f0:	18bfcb1e 	bne	r3,r2,2009b820 <__flash_rwdata_start+0xfffff1d8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
2009b8f4:	0005883a 	mov	r2,zero
}
2009b8f8:	e037883a 	mov	sp,fp
2009b8fc:	dfc00117 	ldw	ra,4(sp)
2009b900:	df000017 	ldw	fp,0(sp)
2009b904:	dec00204 	addi	sp,sp,8
2009b908:	f800283a 	ret

2009b90c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
2009b90c:	defffc04 	addi	sp,sp,-16
2009b910:	df000315 	stw	fp,12(sp)
2009b914:	df000304 	addi	fp,sp,12
2009b918:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
2009b91c:	00bffa04 	movi	r2,-24
2009b920:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
2009b924:	e03ffd15 	stw	zero,-12(fp)
2009b928:	00001d06 	br	2009b9a0 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
2009b92c:	00800034 	movhi	r2,0
2009b930:	10858104 	addi	r2,r2,5636
2009b934:	e0fffd17 	ldw	r3,-12(fp)
2009b938:	18c00324 	muli	r3,r3,12
2009b93c:	10c5883a 	add	r2,r2,r3
2009b940:	10800017 	ldw	r2,0(r2)
2009b944:	1000131e 	bne	r2,zero,2009b994 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
2009b948:	00800034 	movhi	r2,0
2009b94c:	10858104 	addi	r2,r2,5636
2009b950:	e0fffd17 	ldw	r3,-12(fp)
2009b954:	18c00324 	muli	r3,r3,12
2009b958:	10c5883a 	add	r2,r2,r3
2009b95c:	e0ffff17 	ldw	r3,-4(fp)
2009b960:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
2009b964:	00800034 	movhi	r2,0
2009b968:	108a1d04 	addi	r2,r2,10356
2009b96c:	10c00017 	ldw	r3,0(r2)
2009b970:	e0bffd17 	ldw	r2,-12(fp)
2009b974:	1880040e 	bge	r3,r2,2009b988 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
2009b978:	00800034 	movhi	r2,0
2009b97c:	108a1d04 	addi	r2,r2,10356
2009b980:	e0fffd17 	ldw	r3,-12(fp)
2009b984:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
2009b988:	e0bffd17 	ldw	r2,-12(fp)
2009b98c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
2009b990:	00000606 	br	2009b9ac <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
2009b994:	e0bffd17 	ldw	r2,-12(fp)
2009b998:	10800044 	addi	r2,r2,1
2009b99c:	e0bffd15 	stw	r2,-12(fp)
2009b9a0:	e0bffd17 	ldw	r2,-12(fp)
2009b9a4:	10800810 	cmplti	r2,r2,32
2009b9a8:	103fe01e 	bne	r2,zero,2009b92c <__flash_rwdata_start+0xfffff2e4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
2009b9ac:	e0bffe17 	ldw	r2,-8(fp)
}
2009b9b0:	e037883a 	mov	sp,fp
2009b9b4:	df000017 	ldw	fp,0(sp)
2009b9b8:	dec00104 	addi	sp,sp,4
2009b9bc:	f800283a 	ret

2009b9c0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
2009b9c0:	defffb04 	addi	sp,sp,-20
2009b9c4:	df000415 	stw	fp,16(sp)
2009b9c8:	df000404 	addi	fp,sp,16
2009b9cc:	e13ffe15 	stw	r4,-8(fp)
2009b9d0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
2009b9d4:	e0bfff17 	ldw	r2,-4(fp)
2009b9d8:	10840070 	cmpltui	r2,r2,4097
2009b9dc:	1000021e 	bne	r2,zero,2009b9e8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
2009b9e0:	00840004 	movi	r2,4096
2009b9e4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
2009b9e8:	e0fffe17 	ldw	r3,-8(fp)
2009b9ec:	e0bfff17 	ldw	r2,-4(fp)
2009b9f0:	1885883a 	add	r2,r3,r2
2009b9f4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
2009b9f8:	e0bffe17 	ldw	r2,-8(fp)
2009b9fc:	e0bffc15 	stw	r2,-16(fp)
2009ba00:	00000506 	br	2009ba18 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
2009ba04:	e0bffc17 	ldw	r2,-16(fp)
2009ba08:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
2009ba0c:	e0bffc17 	ldw	r2,-16(fp)
2009ba10:	10800804 	addi	r2,r2,32
2009ba14:	e0bffc15 	stw	r2,-16(fp)
2009ba18:	e0fffc17 	ldw	r3,-16(fp)
2009ba1c:	e0bffd17 	ldw	r2,-12(fp)
2009ba20:	18bff836 	bltu	r3,r2,2009ba04 <__flash_rwdata_start+0xfffff3bc>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
2009ba24:	e0bffe17 	ldw	r2,-8(fp)
2009ba28:	108007cc 	andi	r2,r2,31
2009ba2c:	10000226 	beq	r2,zero,2009ba38 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
2009ba30:	e0bffc17 	ldw	r2,-16(fp)
2009ba34:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
2009ba38:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
2009ba3c:	e037883a 	mov	sp,fp
2009ba40:	df000017 	ldw	fp,0(sp)
2009ba44:	dec00104 	addi	sp,sp,4
2009ba48:	f800283a 	ret

2009ba4c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
2009ba4c:	defffe04 	addi	sp,sp,-8
2009ba50:	df000115 	stw	fp,4(sp)
2009ba54:	df000104 	addi	fp,sp,4
2009ba58:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
2009ba5c:	e0bfff17 	ldw	r2,-4(fp)
2009ba60:	10bffe84 	addi	r2,r2,-6
2009ba64:	10c00428 	cmpgeui	r3,r2,16
2009ba68:	18001a1e 	bne	r3,zero,2009bad4 <alt_exception_cause_generated_bad_addr+0x88>
2009ba6c:	100690ba 	slli	r3,r2,2
2009ba70:	008802b4 	movhi	r2,8202
2009ba74:	10aea104 	addi	r2,r2,-17788
2009ba78:	1885883a 	add	r2,r3,r2
2009ba7c:	10800017 	ldw	r2,0(r2)
2009ba80:	1000683a 	jmp	r2
2009ba84:	2009bac4 	addi	zero,r4,9963
2009ba88:	2009bac4 	addi	zero,r4,9963
2009ba8c:	2009bad4 	ori	zero,r4,9963
2009ba90:	2009bad4 	ori	zero,r4,9963
2009ba94:	2009bad4 	ori	zero,r4,9963
2009ba98:	2009bac4 	addi	zero,r4,9963
2009ba9c:	2009bacc 	andi	zero,r4,9963
2009baa0:	2009bad4 	ori	zero,r4,9963
2009baa4:	2009bac4 	addi	zero,r4,9963
2009baa8:	2009bac4 	addi	zero,r4,9963
2009baac:	2009bad4 	ori	zero,r4,9963
2009bab0:	2009bac4 	addi	zero,r4,9963
2009bab4:	2009bacc 	andi	zero,r4,9963
2009bab8:	2009bad4 	ori	zero,r4,9963
2009babc:	2009bad4 	ori	zero,r4,9963
2009bac0:	2009bac4 	addi	zero,r4,9963
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
2009bac4:	00800044 	movi	r2,1
2009bac8:	00000306 	br	2009bad8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
2009bacc:	0005883a 	mov	r2,zero
2009bad0:	00000106 	br	2009bad8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
2009bad4:	0005883a 	mov	r2,zero
  }
}
2009bad8:	e037883a 	mov	sp,fp
2009badc:	df000017 	ldw	fp,0(sp)
2009bae0:	dec00104 	addi	sp,sp,4
2009bae4:	f800283a 	ret

2009bae8 <atexit>:
2009bae8:	200b883a 	mov	r5,r4
2009baec:	000d883a 	mov	r6,zero
2009baf0:	0009883a 	mov	r4,zero
2009baf4:	000f883a 	mov	r7,zero
2009baf8:	009bafc1 	jmpi	2009bafc <__register_exitproc>

2009bafc <__register_exitproc>:
2009bafc:	00800034 	movhi	r2,0
2009bb00:	defffa04 	addi	sp,sp,-24
2009bb04:	108a1304 	addi	r2,r2,10316
2009bb08:	dc000315 	stw	r16,12(sp)
2009bb0c:	14000017 	ldw	r16,0(r2)
2009bb10:	dc400415 	stw	r17,16(sp)
2009bb14:	dfc00515 	stw	ra,20(sp)
2009bb18:	80805217 	ldw	r2,328(r16)
2009bb1c:	2023883a 	mov	r17,r4
2009bb20:	10003626 	beq	r2,zero,2009bbfc <__register_exitproc+0x100>
2009bb24:	10c00117 	ldw	r3,4(r2)
2009bb28:	010007c4 	movi	r4,31
2009bb2c:	20c00e16 	blt	r4,r3,2009bb68 <__register_exitproc+0x6c>
2009bb30:	1a400044 	addi	r9,r3,1
2009bb34:	8800211e 	bne	r17,zero,2009bbbc <__register_exitproc+0xc0>
2009bb38:	18c00084 	addi	r3,r3,2
2009bb3c:	18c7883a 	add	r3,r3,r3
2009bb40:	18c7883a 	add	r3,r3,r3
2009bb44:	12400115 	stw	r9,4(r2)
2009bb48:	10c7883a 	add	r3,r2,r3
2009bb4c:	19400015 	stw	r5,0(r3)
2009bb50:	0005883a 	mov	r2,zero
2009bb54:	dfc00517 	ldw	ra,20(sp)
2009bb58:	dc400417 	ldw	r17,16(sp)
2009bb5c:	dc000317 	ldw	r16,12(sp)
2009bb60:	dec00604 	addi	sp,sp,24
2009bb64:	f800283a 	ret
2009bb68:	00880274 	movhi	r2,8201
2009bb6c:	10a66504 	addi	r2,r2,-26220
2009bb70:	10002526 	beq	r2,zero,2009bc08 <__register_exitproc+0x10c>
2009bb74:	01006404 	movi	r4,400
2009bb78:	d9400015 	stw	r5,0(sp)
2009bb7c:	d9800115 	stw	r6,4(sp)
2009bb80:	d9c00215 	stw	r7,8(sp)
2009bb84:	00899940 	call	20089994 <malloc>
2009bb88:	d9400017 	ldw	r5,0(sp)
2009bb8c:	d9800117 	ldw	r6,4(sp)
2009bb90:	d9c00217 	ldw	r7,8(sp)
2009bb94:	10001c26 	beq	r2,zero,2009bc08 <__register_exitproc+0x10c>
2009bb98:	80c05217 	ldw	r3,328(r16)
2009bb9c:	10000115 	stw	zero,4(r2)
2009bba0:	02400044 	movi	r9,1
2009bba4:	10c00015 	stw	r3,0(r2)
2009bba8:	80805215 	stw	r2,328(r16)
2009bbac:	10006215 	stw	zero,392(r2)
2009bbb0:	10006315 	stw	zero,396(r2)
2009bbb4:	0007883a 	mov	r3,zero
2009bbb8:	883fdf26 	beq	r17,zero,2009bb38 <__flash_rwdata_start+0xfffff4f0>
2009bbbc:	18d1883a 	add	r8,r3,r3
2009bbc0:	4211883a 	add	r8,r8,r8
2009bbc4:	1211883a 	add	r8,r2,r8
2009bbc8:	41802215 	stw	r6,136(r8)
2009bbcc:	01000044 	movi	r4,1
2009bbd0:	11806217 	ldw	r6,392(r2)
2009bbd4:	20c8983a 	sll	r4,r4,r3
2009bbd8:	310cb03a 	or	r6,r6,r4
2009bbdc:	11806215 	stw	r6,392(r2)
2009bbe0:	41c04215 	stw	r7,264(r8)
2009bbe4:	01800084 	movi	r6,2
2009bbe8:	89bfd31e 	bne	r17,r6,2009bb38 <__flash_rwdata_start+0xfffff4f0>
2009bbec:	11806317 	ldw	r6,396(r2)
2009bbf0:	3108b03a 	or	r4,r6,r4
2009bbf4:	11006315 	stw	r4,396(r2)
2009bbf8:	003fcf06 	br	2009bb38 <__flash_rwdata_start+0xfffff4f0>
2009bbfc:	80805304 	addi	r2,r16,332
2009bc00:	80805215 	stw	r2,328(r16)
2009bc04:	003fc706 	br	2009bb24 <__flash_rwdata_start+0xfffff4dc>
2009bc08:	00bfffc4 	movi	r2,-1
2009bc0c:	003fd106 	br	2009bb54 <__flash_rwdata_start+0xfffff50c>
