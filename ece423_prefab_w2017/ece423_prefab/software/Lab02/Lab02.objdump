
Lab02.elf:     file format elf32-littlenios2
Lab02.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x20080240

Program Header:
    LOAD off    0x00001000 vaddr 0x20080000 paddr 0x20080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x20080020 paddr 0x20080020 align 2**12
         filesz 0x0001e0c4 memsz 0x0001e0c4 flags r-x
    LOAD off    0x00020000 vaddr 0x00000000 paddr 0x2009e0e4 align 2**12
         filesz 0x00002a8c memsz 0x000033e4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  20080000  20080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000220  20080020  20080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001dea4  20080240  20080240  00001240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000af0  00000000  2009e0e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001f9c  00000af0  2009ebd4  00020af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000958  00002a8c  200a0b70  00022a8c  2**2
                  ALLOC, SMALL_DATA
  6 .lpddr2       00000000  000033e4  000033e4  00022a8c  2**0
                  CONTENTS
  7 .sram         00000000  200a0b70  200a0b70  00022a8c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00022a8c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000013b8  00000000  00000000  00022ab0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00033357  00000000  00000000  00023e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000ca68  00000000  00000000  000571bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00010ef1  00000000  00000000  00063c27  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003db4  00000000  00000000  00074b18  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00005b7e  00000000  00000000  000788cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001d414  00000000  00000000  0007e44a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  0009b860  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001c30  00000000  00000000  0009b8c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000a2769  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  000a276c  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000a276f  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000a2770  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000a2771  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000a2775  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000a2779  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  000a277d  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  000a2786  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  000a278f  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  000a2798  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000032  00000000  00000000  000a27a3  2**0
                  CONTENTS, READONLY
 30 .jdi          000039ed  00000000  00000000  000a27d5  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0016c061  00000000  00000000  000a61c2  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
20080000 l    d  .entry	00000000 .entry
20080020 l    d  .exceptions	00000000 .exceptions
20080240 l    d  .text	00000000 .text
00000000 l    d  .rodata	00000000 .rodata
00000af0 l    d  .rwdata	00000000 .rwdata
00002a8c l    d  .bss	00000000 .bss
000033e4 l    d  .lpddr2	00000000 .lpddr2
200a0b70 l    d  .sram	00000000 .sram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Lab02_bsp//obj/HAL/src/crt0.o
20080288 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 tables.c
00000000 l    df *ABS*	00000000 util.c
00000000 l    df *ABS*	00000000 idct.c
00000000 l    df *ABS*	00000000 lossless_decode.c
00000000 l    df *ABS*	00000000 mjpeg423_decoder.c
200814e8 l     F .text	00000028 mm_to_st_done
20081510 l     F .text	00000028 st_to_mm_done
00000000 l    df *ABS*	00000000 ycbcr_to_rgb.c
00000000 l    df *ABS*	00000000 FatFileSystem.c
00002af4 l     O .bss	00000140 fInfo.3428
00000000 l    df *ABS*	00000000 FatInternal.c
00002e34 l     O .bss	00000200 szBlock.3473
00002c34 l     O .bss	00000200 temp.3435
00000000 l    df *ABS*	00000000 debug.c
00000000 l    df *ABS*	00000000 mmc.c
0000029c l     O .rodata	00000010 fbase
000002ac l     O .rodata	00000040 multipliers
20084bcc l     F .text	00000038 mmc_set_ios
20084c04 l     F .text	00000040 mmc_set_bus_width
20084c44 l     F .text	00000078 mmc_set_clock
20084cbc l     F .text	00000050 mmc_send_cmd
20084d0c l     F .text	00000070 mmc_go_idle
20084d7c l     F .text	000000b4 mmc_send_if_cond
20084e30 l     F .text	00000164 sd_send_op_cond
20084f94 l     F .text	0000016c mmc_send_op_cond
20085100 l     F .text	00000118 mmc_send_status
20085218 l     F .text	00000080 mmc_send_ext_csd
20085298 l     F .text	000000a8 mmc_switch
20085340 l     F .text	000001e0 sd_switch
20085520 l     F .text	00000388 sd_change_freq
00002aac l     O .bss	00000008 scr.3318
00003034 l     O .bss	00000040 switch_status.3319
200858a8 l     F .text	00000124 mmc_change_freq
200859cc l     F .text	0000092c mmc_startup
200862f8 l     F .text	00000054 mmc_set_blocklen
2008634c l     F .text	00000118 mmc_read_blocks
00000000 l    df *ABS*	00000000 ocsdc.c
200868fc l     F .text	00000044 ocsdc_read
20086940 l     F .text	00000050 ocsdc_write
20086990 l     F .text	00000068 ocsdc_set_buswidth
200869f8 l     F .text	00000130 ocsdc_set_clock
20086b28 l     F .text	00000104 ocsdc_finish
20086c2c l     F .text	0000006c ocsdc_data_finish
20086c98 l     F .text	00000110 ocsdc_setup_data_xfer
20086da8 l     F .text	000001cc ocsdc_send_cmd
20086f74 l     F .text	000000a8 ocsdc_init
2008701c l     F .text	0000006c ocsdc_set_ios
00000000 l    df *ABS*	00000000 sd_lib.c
00000000 l    df *ABS*	00000000 ece423_vid_ctl.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 main.c
2008857c l     F .text	00000078 timer1_isr
200885f4 l     F .text	000000bc pio_isr
200886b0 l     F .text	00000174 interrupts_init
00000000 l    df *ABS*	00000000 lib2-divmod.c
20088958 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00000cf0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malign.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strrchr.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000066e l     O .rodata	00000010 zeroes.4240
0000067e l     O .rodata	00000010 blanks.4239
00000000 l    df *ABS*	00000000 vfprintf.c
0000068e l     O .rodata	00000010 zeroes.4255
200902fc l     F .text	000000bc __sbprintf
0000069e l     O .rodata	00000010 blanks.4254
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
200907d0 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
2009238c l     F .text	00000008 __fp_lock
20092394 l     F .text	00000008 __fp_unlock
200923a8 l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0000153c l     O .rwdata	00000020 lc_ctype_charset
0000151c l     O .rwdata	00000020 lc_message_charset
0000155c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
000006cc l     O .rodata	0000000c p05.2710
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 vfprintf.c
000007f0 l     O .rodata	00000010 zeroes.4184
00000800 l     O .rodata	00000010 blanks.4183
00000000 l    df *ABS*	00000000 vfprintf.c
200961f0 l     F .text	000000fc __sprint_r.part.0
00000820 l     O .rodata	00000010 blanks.4199
00000810 l     O .rodata	00000010 zeroes.4200
200975f8 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 alt_close.c
20099464 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
2009963c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
2009969c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
2009994c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
20099a40 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
20099b24 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
20099d00 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00002a78 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_uncached_malloc.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
2009a1a0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
2009a2e8 l     F .text	00000038 alt_dev_reg
0000173c l     O .rwdata	00001060 jtag_uart
0000279c l     O .rwdata	00000060 Cb_out
000027fc l     O .rwdata	00000060 Cr_out
0000285c l     O .rwdata	00000060 from_idct_hwacel
000028bc l     O .rwdata	00000060 msgdma_0
0000291c l     O .rwdata	00000060 to_idct_hwacel
0000297c l     O .rwdata	00000060 video_dma
000029dc l     O .rwdata	00000060 Y_out
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
2009a710 l     F .text	00000204 altera_avalon_jtag_uart_irq
2009a914 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
2009af34 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_msgdma.c
2009b030 l     F .text	00000050 alt_get_errno
2009b080 l     F .text	00000094 alt_msgdma_write_standard_descriptor
2009b114 l     F .text	0000012c alt_msgdma_write_extended_descriptor
2009b240 l     F .text	00000184 alt_msgdma_irq
2009b3c4 l     F .text	0000008c alt_msgdma_construct_standard_descriptor
2009b450 l     F .text	00000154 alt_msgdma_construct_extended_descriptor
2009b5a4 l     F .text	000002d0 alt_msgdma_descriptor_async_transfer
2009b874 l     F .text	00000378 alt_msgdma_descriptor_sync_transfer
2009bebc l     F .text	000000a4 alt_msgdma_construct_prefetcher_standard_descriptor
2009bf60 l     F .text	00000194 alt_msgdma_construct_prefetcher_extended_descriptor
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
2009d158 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
2009d694 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
2009d7cc l     F .text	00000050 alt_get_errno
2009d81c l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 __atexit.c
00002af0 g     O .bss	00000004 alt_instruction_exception_handler
2009cdd0 g     F .text	0000003c alt_msgdma_standard_descriptor_async_transfer
2008c068 g     F .text	00000018 putchar
2009448c g     F .text	00000074 _mprec_log10
200880fc g     F .text	00000100 I2C_Read
20094578 g     F .text	0000008c __any_on
20097cb8 g     F .text	00000054 _isatty_r
000006d8 g     O .rodata	00000028 __mprec_tinytens
20099c48 g     F .text	00000078 alt_main
2008c080 g     F .text	000000a8 _puts_r
20082414 g     F .text	0000006c Fat_FileBrowseBegin
000032e4 g     O .bss	00000100 alt_irq
20097d0c g     F .text	0000005c _lseek_r
20082200 g     F .text	00000138 ycbcr_to_rgb
2009ebd4 g       *ABS*	00000000 __flash_rwdata_start
20098afc g     F .text	00000084 .hidden __eqdf2
2009bc9c g     F .text	00000058 alt_msgdma_construct_standard_mm_to_mm_descriptor
000033e4 g       *ABS*	00000000 __alt_heap_start
2008c024 g     F .text	0000003c printf
20097dc4 g     F .text	0000009c _wcrtomb_r
00000af0 g     O .rwdata	00000080 Yquant
20080000 g       *ABS*	00000000 __alt_mem_sram
20094e24 g     F .text	0000005c __sseek
200926dc g     F .text	00000010 __sinit
200976b4 g     F .text	00000138 __swbuf_r
20093188 g     F .text	0000007c _setlocale_r
20092544 g     F .text	00000068 __sfmoreglue
20099ce0 g     F .text	00000020 __malloc_unlock
20082480 g     F .text	0000042c Fat_FileBrowseNext
20088a84 g     F .text	00000450 .hidden __divsf3
20083f34 g     F .text	000000a8 fatIsValidDir
20093508 g     F .text	0000015c memmove
200926c4 g     F .text	00000018 _cleanup
20093664 g     F .text	000000a8 _Balloc
2009bbec g     F .text	00000058 alt_msgdma_construct_standard_st_to_mm_descriptor
20098b80 g     F .text	000000e0 .hidden __gtdf2
2009dcac g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
200882f8 g     F .text	00000130 i2c_write
20080000 g     F .entry	0000001c __reset
20080020 g       *ABS*	00000000 __flash_exceptions_start
20097c60 g     F .text	00000058 _fstat_r
00002ac8 g     O .bss	00000004 errno
00002ab8 g     O .bss	00000004 ready_frames
20094da0 g     F .text	00000008 __seofread
200951b8 g     F .text	00001038 ___svfiprintf_internal_r
20083958 g     F .text	00000180 fatNextCluster
00002ae0 g     O .bss	00000004 alt_argv
0000aa3c g       *ABS*	00000000 _gp
2009a170 g     F .text	00000030 usleep
2009a0f8 g     F .text	00000078 alt_uncached_malloc
2009c70c g     F .text	000000d4 alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits
000015bc g     O .rwdata	00000180 alt_fd_list
2008c060 g     F .text	00000008 _putchar_r
2009d304 g     F .text	00000090 alt_find_dev
2008bd9c g     F .text	00000138 memcpy
2009239c g     F .text	0000000c _cleanup_r
2008aec8 g     F .text	000000d0 .hidden __floatsidf
2009d754 g     F .text	00000078 alt_io_redirect
20098c60 g     F .text	000000e0 .hidden __ltdf2
2009e0e4 g       *ABS*	00000000 __DTOR_END__
2009cb2c g     F .text	0000008c alt_msgdma_start_prefetcher_with_extd_desc_list
2009ce0c g     F .text	0000003c alt_msgdma_extended_descriptor_async_transfer
2009cd7c g     F .text	00000054 alt_msgdma_register_callback
20082c04 g     F .text	000000b0 Fat_FileExist
2008c128 g     F .text	00000014 puts
2009df20 g     F .text	0000009c alt_exception_cause_generated_bad_addr
20094cd8 g     F .text	00000074 __fpclassifyd
200943e8 g     F .text	000000a4 __ratio
200975d4 g     F .text	00000024 __vfiprintf_internal
2009ab10 g     F .text	0000020c altera_avalon_jtag_uart_read
2008b550 g     F .text	00000014 malloc
2009c3ec g     F .text	000000f0 alt_msgdma_prefetcher_add_standard_desc_to_list
2008bff8 g     F .text	0000002c _printf_r
20080e08 g     F .text	0000030c lossless_decode
20088a74 g     F .text	00000008 .hidden __udivsi3
2009999c g     F .text	000000a4 isatty
00000728 g     O .rodata	000000c8 __mprec_tens
20093204 g     F .text	0000000c __locale_charset
200904a8 g     F .text	00000040 vsnprintf
2009de94 g     F .text	0000008c alt_icache_flush
00002ac4 g     O .bss	00000004 __malloc_top_pad
00002a54 g     O .rwdata	00000004 __mb_cur_max
20093234 g     F .text	0000000c _localeconv_r
20093a70 g     F .text	0000003c __i2b
20092b40 g     F .text	000004c0 __sfvwrite_r
2008c13c g     F .text	00000054 _sbrk_r
20097d68 g     F .text	0000005c _read_r
00002a40 g     O .rwdata	00000004 command
20099584 g     F .text	00000074 alt_dcache_flush
00002a6c g     O .rwdata	00000004 alt_max_fd
20087a48 g     F .text	000005dc ece423_init_hdmi
200844fc g     F .text	00000358 fatMount
2009797c g     F .text	000000f0 _fclose_r
2009235c g     F .text	00000030 fflush
00002ac0 g     O .bss	00000004 __malloc_max_sbrked_mem
2009979c g     F .text	000001b0 alt_irq_register
2008b03c g     F .text	00000110 .hidden __extendsfdf2
20089408 g     F .text	0000089c .hidden __adddf3
20083fdc g     F .text	00000048 fatIsUnusedDir
20094190 g     F .text	0000011c __b2d
2009c14c g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor
2009856c g     F .text	00000590 .hidden __umoddi3
20087350 g     F .text	000002a4 ece423_video_display_init
20099b74 g     F .text	000000d4 lseek
20080390 g     F .text	000000f0 print_dct
00002a44 g     O .rwdata	00000004 _global_impure_ptr
20094770 g     F .text	00000568 _realloc_r
000033e4 g       *ABS*	00000000 __bss_end
2009d5a4 g     F .text	000000f0 alt_iic_isr_register
20099ff4 g     F .text	00000104 alt_tick
2009cc10 g     F .text	0000016c alt_msgdma_init
20097fac g     F .text	000005c0 .hidden __udivdi3
20097a80 g     F .text	00000184 _fputwc_r
00000700 g     O .rodata	00000028 __mprec_bigtens
20093854 g     F .text	00000104 __s2b
2008af98 g     F .text	000000a4 .hidden __floatunsidf
20084890 g     F .text	00000044 SD_ReadBlocks
20093f38 g     F .text	00000060 __mcmp
2009ce84 g     F .text	0000003c alt_msgdma_extended_descriptor_sync_transfer
20084854 g     F .text	0000003c SD_ReadBlock512
200926fc g     F .text	00000018 __fp_lock_all
2009d558 g     F .text	0000004c alt_ic_irq_enabled
20088024 g     F .text	000000d8 I2C_Write
20082cb4 g     F .text	00000220 Fat_FileOpen
20099f5c g     F .text	00000098 alt_alarm_stop
200813d4 g     F .text	00000114 input_AC
00002ad8 g     O .bss	00000004 alt_irq_active
20083c50 g     F .text	000001e8 fatDelClusterList
20081538 g     F .text	00000cc8 mjpeg423_decode
200800fc g     F .exceptions	000000d0 alt_irq_handler
00001594 g     O .rwdata	00000028 alt_dev_null
2009bd84 g     F .text	00000090 alt_msgdma_construct_extended_mm_to_st_descriptor
00002a9c g     O .bss	00000004 mm_to_st_desc
200881fc g     F .text	00000088 i2c_start
2009caa0 g     F .text	0000008c alt_msgdma_start_prefetcher_with_std_desc_list
2008c390 g     F .text	00000068 strrchr
200995f8 g     F .text	00000044 alt_dcache_flush_all
20093958 g     F .text	00000068 __hi0bits
2008ae40 g     F .text	00000088 .hidden __fixdfsi
00002aa0 g     O .bss	00000004 mm_to_st_dma_dev
200868b8 g     F .text	00000044 flush_dcache_range
00002a8c g       *ABS*	00000000 __ram_rwdata_end
00002a64 g     O .rwdata	00000008 alt_dev_list
20082338 g     F .text	00000034 Fat_Mount
2009a1f0 g     F .text	000000f8 write
20094604 g     F .text	000000a0 _putc_r
00000af0 g       *ABS*	00000000 __ram_rodata_end
200996ec g     F .text	000000b0 fstat
20098c60 g     F .text	000000e0 .hidden __ledf2
200849f0 g     F .text	0000006c myprintf
20093ca8 g     F .text	00000140 __pow5mult
20096304 g     F .text	000012d0 ___vfiprintf_internal_r
00002ad4 g     O .bss	00000004 __nlocale_changed
20088a7c g     F .text	00000008 .hidden __umodsi3
2009c1a4 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor
000033e4 g       *ABS*	00000000 end
20086464 g     F .text	00000118 mmc_init
2009a64c g     F .text	000000c4 altera_avalon_jtag_uart_init
200801cc g     F .exceptions	00000074 alt_instruction_exception_entry
2009e0e4 g       *ABS*	00000000 __CTOR_LIST__
20000000 g       *ABS*	00000000 __alt_stack_pointer
2009afa8 g     F .text	00000088 alt_avalon_timer_sc_init
2008b2e4 g     F .text	00000064 .hidden __clzsi2
2009ad1c g     F .text	00000218 altera_avalon_jtag_uart_write
20083594 g     F .text	00000034 Fat_FileClose
200926ec g     F .text	00000004 __sfp_lock_acquire
200828ac g     F .text	0000006c Fat_FileCount
20093420 g     F .text	000000e8 memchr
2008e388 g     F .text	00001f50 ___vfprintf_internal_r
2008c190 g     F .text	00000058 _sprintf_r
20092850 g     F .text	000002f0 _free_r
2009da40 g     F .text	00000228 alt_printf
20093210 g     F .text	00000010 __locale_mb_cur_max
2009063c g     F .text	00000194 __call_exitprocs
00002ad0 g     O .bss	00000004 __mlocale_changed
00002a4c g     O .rwdata	00000004 __malloc_sbrk_base
20080240 g     F .text	0000004c _start
00002ae8 g     O .bss	00000004 _alt_tick_rate
200802b8 g     F .text	000000d8 print_block
20080480 g     F .text	000000ac print_bitstream
20093de8 g     F .text	00000150 __lshift
00002aec g     O .bss	00000004 _alt_nticks
2009bc44 g     F .text	00000058 alt_msgdma_construct_standard_mm_to_st_descriptor
20099d50 g     F .text	000000fc read
2009a354 g     F .text	00000194 alt_sys_init
20094fec g     F .text	000001cc __ssprint_r
200875f4 g     F .text	00000054 ece423_video_display_register_written_buffer
2009dfd0 g     F .text	00000114 __register_exitproc
20082ed4 g     F .text	00000044 Fat_FileSize
20093aac g     F .text	000001fc __multiply
2009a9bc g     F .text	00000068 altera_avalon_jtag_uart_close
00000af0 g       *ABS*	00000000 __ram_rwdata_start
00000000 g       *ABS*	00000000 __ram_rodata_start
20084b74 g     F .text	00000058 udelay
00003074 g     O .bss	00000028 __malloc_current_mallinfo
200942ac g     F .text	0000013c __d2b
2009a4e8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
2009dde0 g     F .text	000000b4 alt_get_fd
2009d000 g     F .text	00000158 alt_busy_sleep
20087088 g     F .text	00000184 ocsdc_mmc_init
20097864 g     F .text	00000054 _close_r
00002a3c g     O .rwdata	00000004 is_video_playing
2009c0f4 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor
20082f18 g     F .text	0000057c Fat_FileRead
2008bd20 g     F .text	0000007c memcmp
2009a5a8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000033e4 g       *ABS*	00000000 __alt_stack_base
2009a5f8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
2008052c g     F .text	000008dc idct
200843ec g     F .text	00000110 fatFindUnusedDirectory
2009c1fc g     F .text	000000a0 alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor
200904e8 g     F .text	00000154 __swsetup_r
00002a94 g     O .bss	00000004 init
20089ca4 g     F .text	000008cc .hidden __divdf3
200925ac g     F .text	00000118 __sfp
20094500 g     F .text	00000078 __copybits
00001114 g     O .rwdata	00000408 __malloc_av_
200926f8 g     F .text	00000004 __sinit_lock_release
20087800 g     F .text	0000006c ece423_video_display_clear_screen
200903b8 g     F .text	000000f0 _vsnprintf_r
20088284 g     F .text	00000074 i2c_stop
20098d40 g     F .text	00000724 .hidden __muldf3
20094d4c g     F .text	00000054 __sread
200835c8 g     F .text	00000214 Fat_SpeedTest
2009dccc g     F .text	00000114 alt_find_file
2009d1a8 g     F .text	000000a4 alt_dev_llist_insert
20099cc0 g     F .text	00000020 __malloc_lock
20099eac g     F .text	000000b0 sbrk
2008c3f8 g     F .text	00001f90 ___svfprintf_internal_r
20092300 g     F .text	0000005c _fflush_r
00002a8c g     O .bss	00000004 mm_to_st_complete
200978b8 g     F .text	000000c4 _calloc_r
20082b5c g     F .text	00000074 Fat_CheckExtension
20084340 g     F .text	000000ac fatFindDirectory
200812d8 g     F .text	000000fc input_DC
00002a8c g       *ABS*	00000000 __bss_start
2008bed4 g     F .text	00000124 memset
2009cbb8 g     F .text	00000058 alt_msgdma_open
20088824 g     F .text	00000134 main
20084244 g     F .text	00000090 fatReadSecter
00002ae4 g     O .bss	00000004 alt_envp
00002abc g     O .bss	00000004 __malloc_max_total_mem
2009c4dc g     F .text	00000198 alt_msgdma_prefetcher_add_extended_desc_to_list
20084a5c g     F .text	00000088 myprintf_hexarray
2009a548 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
20088428 g     F .text	00000154 i2c_read
200977ec g     F .text	0000001c __swbuf
20094e80 g     F .text	00000008 __sclose
20084024 g     F .text	00000198 fatDump
20000000 g       *ABS*	00000000 __alt_heap_limit
20097a6c g     F .text	00000014 fclose
2008b14c g     F .text	00000198 .hidden __truncdfsf2
200909d0 g     F .text	00001728 _dtoa_r
2009c7e0 g     F .text	000002c0 alt_msgdma_start_prefetcher_with_list_addr
2008b578 g     F .text	000007a8 _malloc_r
20097f20 g     F .text	00000030 __ascii_wctomb
00002a70 g     O .rwdata	00000004 alt_errno
2009c334 g     F .text	000000b8 alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor
20093000 g     F .text	000000c4 _fwalk
20083e38 g     F .text	0000005c fatDumpDate
200946a4 g     F .text	000000cc putc
20083494 g     F .text	00000100 Fat_FileSeek
200889c4 g     F .text	00000054 .hidden __divsi3
2009272c g     F .text	00000124 _malloc_trim_r
2009e0e4 g       *ABS*	00000000 __CTOR_END__
20088ed4 g     F .text	00000424 .hidden __mulsf3
2008c254 g     F .text	000000a4 strcmp
2009e0e4 g       *ABS*	00000000 __flash_rodata_start
2009e0e4 g       *ABS*	00000000 __DTOR_LIST__
200841bc g     F .text	00000088 fatArray2Value
20086700 g     F .text	000001b8 print_mmcinfo
20098afc g     F .text	00000084 .hidden __nedf2
2008388c g     F .text	000000cc fat32ClusterType
00002aa4 g     O .bss	00000004 st_to_mm_dma_dev
2009a320 g     F .text	00000034 alt_irq_init
20099e4c g     F .text	00000060 alt_release_fd
2009ce48 g     F .text	0000003c alt_msgdma_standard_descriptor_sync_transfer
2008b380 g     F .text	0000001c memalign
2008c1e8 g     F .text	0000006c sprintf
00000524 g     O .rodata	00000100 .hidden __clz_tab
200849c0 g     F .text	00000030 debug_output
00002acc g     O .bss	00000004 _PathLocale
2009dfbc g     F .text	00000014 atexit
20097808 g     F .text	0000005c _write_r
200829ac g     F .text	000001b0 fatComposeShortFilename
20093240 g     F .text	0000001c setlocale
2009c29c g     F .text	00000098 alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor
00002a48 g     O .rwdata	00000004 _impure_ptr
00002adc g     O .bss	00000004 alt_argc
200920f8 g     F .text	00000208 __sflush_r
2009d2a8 g     F .text	0000005c _do_dtors
2009322c g     F .text	00000008 __locale_cjk_lang
200823a8 g     F .text	0000006c Fat_Type
20084ae4 g     F .text	00000090 myprintf_dwordarray
2008657c g     F .text	00000184 mmc_bread
00000bf0 g     O .rwdata	00000100 zigzag_table
20080020 g       .exceptions	00000000 alt_irq_entry
2008028c g     F .text	0000002c error_and_exit
20094130 g     F .text	00000060 __ulp
20092714 g     F .text	00000018 __fp_unlock_all
200837dc g     F .text	000000b0 fat16ClusterType
00000000 g       *ABS*	00000000 __alt_mem_lpddr2
00002a5c g     O .rwdata	00000008 alt_fs_list
20087a04 g     F .text	00000044 ece423_video_display_get_buffer
2008786c g     F .text	00000030 ece423_video_display_get_descriptor_span
200842d4 g     F .text	0000006c fatReadMultiSecter
20080020 g       *ABS*	00000000 __ram_exceptions_start
2009325c g     F .text	0000000c localeconv
20082918 g     F .text	00000094 fatSameLongFilename
2009d3c4 g     F .text	00000050 alt_ic_isr_register
00002a8c g       *ABS*	00000000 _edata
20083e94 g     F .text	0000005c fatDumpTime
20081114 g     F .text	000001c4 update_buffer
000033e4 g       *ABS*	00000000 _end
20080240 g       *ABS*	00000000 __ram_exceptions_end
2009aa24 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
20087648 g     F .text	0000005c ece423_video_display_buffer_is_available
2009d4b4 g     F .text	000000a4 alt_ic_irq_disable
20094da8 g     F .text	0000007c __swrite
00002a50 g     O .rwdata	00000004 __malloc_trim_threshold
20093220 g     F .text	0000000c __locale_msgcharset
2008b348 g     F .text	00000038 exit
200848d4 g     F .text	000000ec fatMountSdcard
200930c4 g     F .text	000000c4 _fwalk_reent
2009c674 g     F .text	00000098 alt_msgdma_prefetcher_set_std_list_own_by_hw_bits
200892f8 g     F .text	00000110 .hidden __floatunsisf
20093f98 g     F .text	00000198 __mdiff
20088a18 g     F .text	0000005c .hidden __modsi3
2008b39c g     F .text	000001b4 _memalign_r
20000000 g       *ABS*	00000000 __alt_data_end
20080020 g     F .exceptions	00000000 alt_exception
200926f0 g     F .text	00000004 __sfp_lock_release
2009be14 g     F .text	000000a8 alt_msgdma_construct_extended_mm_to_mm_descriptor
200872f8 g     F .text	00000058 SDLIB_ReadBlocks
2008720c g     F .text	00000098 SDLIB_Init
2009bcf4 g     F .text	00000090 alt_msgdma_construct_extended_st_to_mm_descriptor
20099668 g     F .text	00000034 _exit
2009cec0 g     F .text	00000140 alt_alarm_start
20093268 g     F .text	000001b8 __smakebuf_r
00002a84 g     O .rwdata	00000008 alt_msgdma_list
2008c2f8 g     F .text	00000098 strlen
200876a4 g     F .text	0000015c ece423_video_display_switch_frames
2008789c g     F .text	00000168 ece423_video_display_allocate_buffers
2009d8e8 g     F .text	00000158 open
20098b80 g     F .text	000000e0 .hidden __gedf2
2009dc68 g     F .text	00000044 alt_putchar
00002a58 g     O .rwdata	00000004 __wctomb
20082bd0 g     F .text	00000034 Fat_GetFileName
200962ec g     F .text	00000018 __sprint_r
2009d394 g     F .text	00000030 alt_icache_flush_all
20094e88 g     F .text	00000164 strchr
00002a74 g     O .rwdata	00000004 alt_priority_mask
00000b70 g     O .rwdata	00000080 Cquant
2009d414 g     F .text	000000a0 alt_ic_irq_enable
200902d8 g     F .text	00000024 __vfprintf_internal
20083ad8 g     F .text	00000178 fatFindUnusedCluster
20097f50 g     F .text	0000005c _wctomb_r
00002aa8 g     O .bss	00000004 st_to_mm_desc
2008a570 g     F .text	000008d0 .hidden __subdf3
00002ab4 g     O .bss	00000004 sd_drv
200939c0 g     F .text	000000b0 __lo0bits
00002a90 g     O .bss	00000004 st_to_mm_complete
00002a7c g     O .rwdata	00000008 alt_alarm_list
2009d24c g     F .text	0000005c _do_ctors
20097e60 g     F .text	000000c0 wcrtomb
200994b4 g     F .text	000000d0 close
00002a98 g     O .bss	00000004 disp
2008236c g     F .text	0000003c Fat_Unmount
20099aa4 g     F .text	00000080 alt_load
0000309c g     O .bss	00000248 vInfo
20097c04 g     F .text	0000005c fputwc
2008b564 g     F .text	00000014 free
200926f4 g     F .text	00000004 __sinit_lock_acquire
20093734 g     F .text	00000120 __multadd
20083ef0 g     F .text	00000044 fatIsLastDir
2009370c g     F .text	00000028 _Bfree
200872a4 g     F .text	00000054 SDLIB_ReadBlock512



Disassembly of section .entry:

20080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
20080000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
20080004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
20080008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
2008000c:	00bffd16 	blt	zero,r2,20080004 <__flash_rwdata_start+0xfffe1430>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
20080010:	00480234 	movhi	at,8200
    ori r1, r1, %lo(_start)
20080014:	08409014 	ori	at,at,576
    jmp r1
20080018:	0800683a 	jmp	at
2008001c:	00000000 	call	20000000 <__alt_data_end>

Disassembly of section .exceptions:

20080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
20080020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
20080024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
20080028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
2008002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
20080030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
20080034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
20080038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
2008003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
20080040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
20080044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
20080048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
2008004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
20080050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
20080054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
20080058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
2008005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
20080060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
20080064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
20080068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
2008006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
20080070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
20080074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
20080078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
2008007c:	10000326 	beq	r2,zero,2008008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
20080080:	20000226 	beq	r4,zero,2008008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
20080084:	00800fc0 	call	200800fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
20080088:	00000706 	br	200800a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
2008008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
20080090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
20080094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
20080098:	00801cc0 	call	200801cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
2008009c:	1000021e 	bne	r2,zero,200800a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
200800a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
200800a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
200800a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
200800ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
200800b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
200800b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
200800b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
200800bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
200800c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
200800c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
200800c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
200800cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
200800d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
200800d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
200800d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
200800dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
200800e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
200800e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
200800e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
200800ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
200800f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
200800f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
200800f8:	ef80083a 	eret

200800fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
200800fc:	defff904 	addi	sp,sp,-28
20080100:	dfc00615 	stw	ra,24(sp)
20080104:	df000515 	stw	fp,20(sp)
20080108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
2008010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
20080110:	0005313a 	rdctl	r2,ipending
20080114:	e0bffe15 	stw	r2,-8(fp)

  return active;
20080118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
2008011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
20080120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
20080124:	00800044 	movi	r2,1
20080128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
2008012c:	e0fffb17 	ldw	r3,-20(fp)
20080130:	e0bffc17 	ldw	r2,-16(fp)
20080134:	1884703a 	and	r2,r3,r2
20080138:	10001426 	beq	r2,zero,2008018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
2008013c:	00800034 	movhi	r2,0
20080140:	108cb904 	addi	r2,r2,13028
20080144:	e0fffd17 	ldw	r3,-12(fp)
20080148:	180690fa 	slli	r3,r3,3
2008014c:	10c5883a 	add	r2,r2,r3
20080150:	10c00017 	ldw	r3,0(r2)
20080154:	00800034 	movhi	r2,0
20080158:	108cb904 	addi	r2,r2,13028
2008015c:	e13ffd17 	ldw	r4,-12(fp)
20080160:	200890fa 	slli	r4,r4,3
20080164:	21000104 	addi	r4,r4,4
20080168:	1105883a 	add	r2,r2,r4
2008016c:	10800017 	ldw	r2,0(r2)
20080170:	1009883a 	mov	r4,r2
20080174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
20080178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
2008017c:	0005313a 	rdctl	r2,ipending
20080180:	e0bfff15 	stw	r2,-4(fp)

  return active;
20080184:	e0bfff17 	ldw	r2,-4(fp)
20080188:	00000706 	br	200801a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
2008018c:	e0bffc17 	ldw	r2,-16(fp)
20080190:	1085883a 	add	r2,r2,r2
20080194:	e0bffc15 	stw	r2,-16(fp)
      i++;
20080198:	e0bffd17 	ldw	r2,-12(fp)
2008019c:	10800044 	addi	r2,r2,1
200801a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
200801a4:	003fe106 	br	2008012c <__flash_rwdata_start+0xfffe1558>

    active = alt_irq_pending ();
200801a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
200801ac:	e0bffb17 	ldw	r2,-20(fp)
200801b0:	103fdb1e 	bne	r2,zero,20080120 <__flash_rwdata_start+0xfffe154c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
200801b4:	0001883a 	nop
}
200801b8:	e037883a 	mov	sp,fp
200801bc:	dfc00117 	ldw	ra,4(sp)
200801c0:	df000017 	ldw	fp,0(sp)
200801c4:	dec00204 	addi	sp,sp,8
200801c8:	f800283a 	ret

200801cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
200801cc:	defffb04 	addi	sp,sp,-20
200801d0:	dfc00415 	stw	ra,16(sp)
200801d4:	df000315 	stw	fp,12(sp)
200801d8:	df000304 	addi	fp,sp,12
200801dc:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
200801e0:	000531fa 	rdctl	r2,exception
200801e4:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
200801e8:	e0bffd17 	ldw	r2,-12(fp)
200801ec:	10801f0c 	andi	r2,r2,124
200801f0:	1004d0ba 	srli	r2,r2,2
200801f4:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
200801f8:	0005333a 	rdctl	r2,badaddr
200801fc:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
20080200:	d0a02d17 	ldw	r2,-32588(gp)
20080204:	10000726 	beq	r2,zero,20080224 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
20080208:	d0a02d17 	ldw	r2,-32588(gp)
2008020c:	e0fffd17 	ldw	r3,-12(fp)
20080210:	1809883a 	mov	r4,r3
20080214:	e17fff17 	ldw	r5,-4(fp)
20080218:	e1bffe17 	ldw	r6,-8(fp)
2008021c:	103ee83a 	callr	r2
20080220:	00000206 	br	2008022c <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
20080224:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
20080228:	0005883a 	mov	r2,zero
}
2008022c:	e037883a 	mov	sp,fp
20080230:	dfc00117 	ldw	ra,4(sp)
20080234:	df000017 	ldw	fp,0(sp)
20080238:	dec00204 	addi	sp,sp,8
2008023c:	f800283a 	ret

Disassembly of section .text:

20080240 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
20080240:	00900014 	movui	r2,16384
#endif

0:
    initd 0(r2)
20080244:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
20080248:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
2008024c:	00bffd16 	blt	zero,r2,20080244 <__flash_rwdata_start+0xfffe1670>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
20080250:	06c80034 	movhi	sp,8192
    ori sp, sp, %lo(__alt_stack_pointer)
20080254:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
20080258:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
2008025c:	d6aa8f14 	ori	gp,gp,43580
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
20080260:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
20080264:	108aa314 	ori	r2,r2,10892

    movhi r3, %hi(__bss_end)
20080268:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
2008026c:	18ccf914 	ori	r3,r3,13284

    beq r2, r3, 1f
20080270:	10c00326 	beq	r2,r3,20080280 <_start+0x40>

0:
    stw zero, (r2)
20080274:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
20080278:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
2008027c:	10fffd36 	bltu	r2,r3,20080274 <__flash_rwdata_start+0xfffe16a0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
20080280:	0099aa40 	call	20099aa4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
20080284:	0099c480 	call	20099c48 <alt_main>

20080288 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
20080288:	003fff06 	br	20080288 <__flash_rwdata_start+0xfffe16b4>

2008028c <error_and_exit>:

#include <stdio.h>
#include <stdlib.h>
#include "util.h"

void error_and_exit(const char* str){
2008028c:	defffd04 	addi	sp,sp,-12
20080290:	dfc00215 	stw	ra,8(sp)
20080294:	df000115 	stw	fp,4(sp)
20080298:	df000104 	addi	fp,sp,4
2008029c:	e13fff15 	stw	r4,-4(fp)
    printf("Error: %s\n", str);
200802a0:	01000034 	movhi	r4,0
200802a4:	21000004 	addi	r4,r4,0
200802a8:	e17fff17 	ldw	r5,-4(fp)
200802ac:	008c0240 	call	2008c024 <printf>
    exit(-1);
200802b0:	013fffc4 	movi	r4,-1
200802b4:	008b3480 	call	2008b348 <exit>

200802b8 <print_block>:
}

void print_block(pcolor_block_t b)
{
200802b8:	defffb04 	addi	sp,sp,-20
200802bc:	dfc00415 	stw	ra,16(sp)
200802c0:	df000315 	stw	fp,12(sp)
200802c4:	df000304 	addi	fp,sp,12
200802c8:	e13fff15 	stw	r4,-4(fp)
    for (int row = 0; row < 8; row++)
200802cc:	e03ffd15 	stw	zero,-12(fp)
200802d0:	00002706 	br	20080370 <print_block+0xb8>
        for(int column = 0; column < 8; column++){
200802d4:	e03ffe15 	stw	zero,-8(fp)
200802d8:	00001f06 	br	20080358 <print_block+0xa0>
            if(column != 7) printf("%d,", b[row][column]);
200802dc:	e0bffe17 	ldw	r2,-8(fp)
200802e0:	108001e0 	cmpeqi	r2,r2,7
200802e4:	10000d1e 	bne	r2,zero,2008031c <print_block+0x64>
200802e8:	e0bffd17 	ldw	r2,-12(fp)
200802ec:	100490fa 	slli	r2,r2,3
200802f0:	e0ffff17 	ldw	r3,-4(fp)
200802f4:	1887883a 	add	r3,r3,r2
200802f8:	e0bffe17 	ldw	r2,-8(fp)
200802fc:	1885883a 	add	r2,r3,r2
20080300:	10800003 	ldbu	r2,0(r2)
20080304:	10803fcc 	andi	r2,r2,255
20080308:	01000034 	movhi	r4,0
2008030c:	21000304 	addi	r4,r4,12
20080310:	100b883a 	mov	r5,r2
20080314:	008c0240 	call	2008c024 <printf>
20080318:	00000c06 	br	2008034c <print_block+0x94>
            else printf("%u\n", b[row][column]);
2008031c:	e0bffd17 	ldw	r2,-12(fp)
20080320:	100490fa 	slli	r2,r2,3
20080324:	e0ffff17 	ldw	r3,-4(fp)
20080328:	1887883a 	add	r3,r3,r2
2008032c:	e0bffe17 	ldw	r2,-8(fp)
20080330:	1885883a 	add	r2,r3,r2
20080334:	10800003 	ldbu	r2,0(r2)
20080338:	10803fcc 	andi	r2,r2,255
2008033c:	01000034 	movhi	r4,0
20080340:	21000404 	addi	r4,r4,16
20080344:	100b883a 	mov	r5,r2
20080348:	008c0240 	call	2008c024 <printf>
}

void print_block(pcolor_block_t b)
{
    for (int row = 0; row < 8; row++)
        for(int column = 0; column < 8; column++){
2008034c:	e0bffe17 	ldw	r2,-8(fp)
20080350:	10800044 	addi	r2,r2,1
20080354:	e0bffe15 	stw	r2,-8(fp)
20080358:	e0bffe17 	ldw	r2,-8(fp)
2008035c:	10800210 	cmplti	r2,r2,8
20080360:	103fde1e 	bne	r2,zero,200802dc <__flash_rwdata_start+0xfffe1708>
    exit(-1);
}

void print_block(pcolor_block_t b)
{
    for (int row = 0; row < 8; row++)
20080364:	e0bffd17 	ldw	r2,-12(fp)
20080368:	10800044 	addi	r2,r2,1
2008036c:	e0bffd15 	stw	r2,-12(fp)
20080370:	e0bffd17 	ldw	r2,-12(fp)
20080374:	10800210 	cmplti	r2,r2,8
20080378:	103fd61e 	bne	r2,zero,200802d4 <__flash_rwdata_start+0xfffe1700>
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
            else printf("%u\n", b[row][column]);
        } 
}
2008037c:	e037883a 	mov	sp,fp
20080380:	dfc00117 	ldw	ra,4(sp)
20080384:	df000017 	ldw	fp,0(sp)
20080388:	dec00204 	addi	sp,sp,8
2008038c:	f800283a 	ret

20080390 <print_dct>:

void print_dct(pdct_block_t b)
{
20080390:	defffb04 	addi	sp,sp,-20
20080394:	dfc00415 	stw	ra,16(sp)
20080398:	df000315 	stw	fp,12(sp)
2008039c:	df000304 	addi	fp,sp,12
200803a0:	e13fff15 	stw	r4,-4(fp)
    for (int row = 0; row < 8; row++)
200803a4:	e03ffd15 	stw	zero,-12(fp)
200803a8:	00002d06 	br	20080460 <print_dct+0xd0>
        for(int column = 0; column < 8; column++){
200803ac:	e03ffe15 	stw	zero,-8(fp)
200803b0:	00002506 	br	20080448 <print_dct+0xb8>
            if(column != 7) printf("%d,", b[row][column]);
200803b4:	e0bffe17 	ldw	r2,-8(fp)
200803b8:	108001e0 	cmpeqi	r2,r2,7
200803bc:	1000101e 	bne	r2,zero,20080400 <print_dct+0x70>
200803c0:	e0bffd17 	ldw	r2,-12(fp)
200803c4:	1004913a 	slli	r2,r2,4
200803c8:	e0ffff17 	ldw	r3,-4(fp)
200803cc:	1887883a 	add	r3,r3,r2
200803d0:	e0bffe17 	ldw	r2,-8(fp)
200803d4:	1085883a 	add	r2,r2,r2
200803d8:	1885883a 	add	r2,r3,r2
200803dc:	1080000b 	ldhu	r2,0(r2)
200803e0:	10bfffcc 	andi	r2,r2,65535
200803e4:	10a0001c 	xori	r2,r2,32768
200803e8:	10a00004 	addi	r2,r2,-32768
200803ec:	01000034 	movhi	r4,0
200803f0:	21000304 	addi	r4,r4,12
200803f4:	100b883a 	mov	r5,r2
200803f8:	008c0240 	call	2008c024 <printf>
200803fc:	00000f06 	br	2008043c <print_dct+0xac>
            else printf("%d\n", b[row][column]);
20080400:	e0bffd17 	ldw	r2,-12(fp)
20080404:	1004913a 	slli	r2,r2,4
20080408:	e0ffff17 	ldw	r3,-4(fp)
2008040c:	1887883a 	add	r3,r3,r2
20080410:	e0bffe17 	ldw	r2,-8(fp)
20080414:	1085883a 	add	r2,r2,r2
20080418:	1885883a 	add	r2,r3,r2
2008041c:	1080000b 	ldhu	r2,0(r2)
20080420:	10bfffcc 	andi	r2,r2,65535
20080424:	10a0001c 	xori	r2,r2,32768
20080428:	10a00004 	addi	r2,r2,-32768
2008042c:	01000034 	movhi	r4,0
20080430:	21000504 	addi	r4,r4,20
20080434:	100b883a 	mov	r5,r2
20080438:	008c0240 	call	2008c024 <printf>
}

void print_dct(pdct_block_t b)
{
    for (int row = 0; row < 8; row++)
        for(int column = 0; column < 8; column++){
2008043c:	e0bffe17 	ldw	r2,-8(fp)
20080440:	10800044 	addi	r2,r2,1
20080444:	e0bffe15 	stw	r2,-8(fp)
20080448:	e0bffe17 	ldw	r2,-8(fp)
2008044c:	10800210 	cmplti	r2,r2,8
20080450:	103fd81e 	bne	r2,zero,200803b4 <__flash_rwdata_start+0xfffe17e0>
        } 
}

void print_dct(pdct_block_t b)
{
    for (int row = 0; row < 8; row++)
20080454:	e0bffd17 	ldw	r2,-12(fp)
20080458:	10800044 	addi	r2,r2,1
2008045c:	e0bffd15 	stw	r2,-12(fp)
20080460:	e0bffd17 	ldw	r2,-12(fp)
20080464:	10800210 	cmplti	r2,r2,8
20080468:	103fd01e 	bne	r2,zero,200803ac <__flash_rwdata_start+0xfffe17d8>
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
            else printf("%d\n", b[row][column]);
        } 
}
2008046c:	e037883a 	mov	sp,fp
20080470:	dfc00117 	ldw	ra,4(sp)
20080474:	df000017 	ldw	fp,0(sp)
20080478:	dec00204 	addi	sp,sp,8
2008047c:	f800283a 	ret

20080480 <print_bitstream>:

void print_bitstream(int num_bytes, void* bitstream)
{
20080480:	defffa04 	addi	sp,sp,-24
20080484:	dfc00515 	stw	ra,20(sp)
20080488:	df000415 	stw	fp,16(sp)
2008048c:	df000404 	addi	fp,sp,16
20080490:	e13ffe15 	stw	r4,-8(fp)
20080494:	e17fff15 	stw	r5,-4(fp)
    for (int index = 0; index < num_bytes; index++)
20080498:	e03ffc15 	stw	zero,-16(fp)
2008049c:	00001906 	br	20080504 <print_bitstream+0x84>
        for(int x = 0; x < 8 ; x++)
200804a0:	e03ffd15 	stw	zero,-12(fp)
200804a4:	00001106 	br	200804ec <print_bitstream+0x6c>
            printf("%u", (uint8_t)((((uint8_t*)bitstream)[index]) << x) >> 7);
200804a8:	e0bffc17 	ldw	r2,-16(fp)
200804ac:	e0ffff17 	ldw	r3,-4(fp)
200804b0:	1885883a 	add	r2,r3,r2
200804b4:	10800003 	ldbu	r2,0(r2)
200804b8:	10c03fcc 	andi	r3,r2,255
200804bc:	e0bffd17 	ldw	r2,-12(fp)
200804c0:	1884983a 	sll	r2,r3,r2
200804c4:	10803fcc 	andi	r2,r2,255
200804c8:	1004d1fa 	srli	r2,r2,7
200804cc:	10803fcc 	andi	r2,r2,255
200804d0:	01000034 	movhi	r4,0
200804d4:	21000604 	addi	r4,r4,24
200804d8:	100b883a 	mov	r5,r2
200804dc:	008c0240 	call	2008c024 <printf>
}

void print_bitstream(int num_bytes, void* bitstream)
{
    for (int index = 0; index < num_bytes; index++)
        for(int x = 0; x < 8 ; x++)
200804e0:	e0bffd17 	ldw	r2,-12(fp)
200804e4:	10800044 	addi	r2,r2,1
200804e8:	e0bffd15 	stw	r2,-12(fp)
200804ec:	e0bffd17 	ldw	r2,-12(fp)
200804f0:	10800210 	cmplti	r2,r2,8
200804f4:	103fec1e 	bne	r2,zero,200804a8 <__flash_rwdata_start+0xfffe18d4>
        } 
}

void print_bitstream(int num_bytes, void* bitstream)
{
    for (int index = 0; index < num_bytes; index++)
200804f8:	e0bffc17 	ldw	r2,-16(fp)
200804fc:	10800044 	addi	r2,r2,1
20080500:	e0bffc15 	stw	r2,-16(fp)
20080504:	e0fffc17 	ldw	r3,-16(fp)
20080508:	e0bffe17 	ldw	r2,-8(fp)
2008050c:	18bfe416 	blt	r3,r2,200804a0 <__flash_rwdata_start+0xfffe18cc>
        for(int x = 0; x < 8 ; x++)
            printf("%u", (uint8_t)((((uint8_t*)bitstream)[index]) << x) >> 7);
    printf("\n");
20080510:	01000284 	movi	r4,10
20080514:	008c0680 	call	2008c068 <putchar>
}
20080518:	e037883a 	mov	sp,fp
2008051c:	dfc00117 	ldw	ra,4(sp)
20080520:	df000017 	ldw	fp,0(sp)
20080524:	dec00204 	addi	sp,sp,8
20080528:	f800283a 	ret

2008052c <idct>:
/* normalize the result between 0 and 255 */
/* this is required to handle precision errors that might cause the decoded result to fall out of range */
#define NORMALIZE(x) (temp = (x), ( (temp < 0) ? 0 : ( (temp > 255) ? 255 : temp  ) ) )

void idct(pdct_block_t DCAC, pcolor_block_t block)
{
2008052c:	deffab04 	addi	sp,sp,-340
20080530:	df005415 	stw	fp,336(sp)
20080534:	df005404 	addi	fp,sp,336
20080538:	e13ffe15 	stw	r4,-8(fp)
2008053c:	e17fff15 	stw	r5,-4(fp)
    
    /* Pass 1: process columns from input, store into work array. */
    /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
    /* furthermore, we scale the results by 2**PASS1_BITS. */
    
    inptr = DCAC[0];
20080540:	e0bffe17 	ldw	r2,-8(fp)
20080544:	e0bfac15 	stw	r2,-336(fp)
    wsptr = workspace;
20080548:	e0bfbe04 	addi	r2,fp,-264
2008054c:	e0bfad15 	stw	r2,-332(fp)
    for (ctr = DCTSIZE; ctr > 0; ctr--) {
20080550:	00800204 	movi	r2,8
20080554:	e0bfae15 	stw	r2,-328(fp)
20080558:	0000f506 	br	20080930 <idct+0x404>
        
        /* Even part: reverse the even part of the forward DCT. */
        /* The rotator is sqrt(2)*c(-6). */
        
        z2 = inptr[DCTSIZE*2];
2008055c:	e0bfac17 	ldw	r2,-336(fp)
20080560:	10800804 	addi	r2,r2,32
20080564:	1080000b 	ldhu	r2,0(r2)
20080568:	10bfffcc 	andi	r2,r2,65535
2008056c:	10a0001c 	xori	r2,r2,32768
20080570:	10a00004 	addi	r2,r2,-32768
20080574:	e0bfaf15 	stw	r2,-324(fp)
        z3 = inptr[DCTSIZE*6];
20080578:	e0bfac17 	ldw	r2,-336(fp)
2008057c:	10801804 	addi	r2,r2,96
20080580:	1080000b 	ldhu	r2,0(r2)
20080584:	10bfffcc 	andi	r2,r2,65535
20080588:	10a0001c 	xori	r2,r2,32768
2008058c:	10a00004 	addi	r2,r2,-32768
20080590:	e0bfb015 	stw	r2,-320(fp)
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
20080594:	e0ffaf17 	ldw	r3,-324(fp)
20080598:	e0bfb017 	ldw	r2,-320(fp)
2008059c:	1885883a 	add	r2,r3,r2
200805a0:	10845464 	muli	r2,r2,4433
200805a4:	e0bfb115 	stw	r2,-316(fp)
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
200805a8:	e0bfb017 	ldw	r2,-320(fp)
200805ac:	10f137e4 	muli	r3,r2,-15137
200805b0:	e0bfb117 	ldw	r2,-316(fp)
200805b4:	1885883a 	add	r2,r3,r2
200805b8:	e0bfb215 	stw	r2,-312(fp)
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
200805bc:	e0bfaf17 	ldw	r2,-324(fp)
200805c0:	10c61fa4 	muli	r3,r2,6270
200805c4:	e0bfb117 	ldw	r2,-316(fp)
200805c8:	1885883a 	add	r2,r3,r2
200805cc:	e0bfb315 	stw	r2,-308(fp)
        
        z2 = inptr[DCTSIZE*0];
200805d0:	e0bfac17 	ldw	r2,-336(fp)
200805d4:	1080000b 	ldhu	r2,0(r2)
200805d8:	10bfffcc 	andi	r2,r2,65535
200805dc:	10a0001c 	xori	r2,r2,32768
200805e0:	10a00004 	addi	r2,r2,-32768
200805e4:	e0bfaf15 	stw	r2,-324(fp)
        z3 = inptr[DCTSIZE*4];
200805e8:	e0bfac17 	ldw	r2,-336(fp)
200805ec:	10801004 	addi	r2,r2,64
200805f0:	1080000b 	ldhu	r2,0(r2)
200805f4:	10bfffcc 	andi	r2,r2,65535
200805f8:	10a0001c 	xori	r2,r2,32768
200805fc:	10a00004 	addi	r2,r2,-32768
20080600:	e0bfb015 	stw	r2,-320(fp)
        
        tmp0 = (z2 + z3) << CONST_BITS;
20080604:	e0ffaf17 	ldw	r3,-324(fp)
20080608:	e0bfb017 	ldw	r2,-320(fp)
2008060c:	1885883a 	add	r2,r3,r2
20080610:	1004937a 	slli	r2,r2,13
20080614:	e0bfb415 	stw	r2,-304(fp)
        tmp1 = (z2 - z3) << CONST_BITS;
20080618:	e0ffaf17 	ldw	r3,-324(fp)
2008061c:	e0bfb017 	ldw	r2,-320(fp)
20080620:	1885c83a 	sub	r2,r3,r2
20080624:	1004937a 	slli	r2,r2,13
20080628:	e0bfb515 	stw	r2,-300(fp)
        
        tmp10 = tmp0 + tmp3;
2008062c:	e0ffb417 	ldw	r3,-304(fp)
20080630:	e0bfb317 	ldw	r2,-308(fp)
20080634:	1885883a 	add	r2,r3,r2
20080638:	e0bfb615 	stw	r2,-296(fp)
        tmp13 = tmp0 - tmp3;
2008063c:	e0ffb417 	ldw	r3,-304(fp)
20080640:	e0bfb317 	ldw	r2,-308(fp)
20080644:	1885c83a 	sub	r2,r3,r2
20080648:	e0bfb715 	stw	r2,-292(fp)
        tmp11 = tmp1 + tmp2;
2008064c:	e0ffb517 	ldw	r3,-300(fp)
20080650:	e0bfb217 	ldw	r2,-312(fp)
20080654:	1885883a 	add	r2,r3,r2
20080658:	e0bfb815 	stw	r2,-288(fp)
        tmp12 = tmp1 - tmp2;
2008065c:	e0ffb517 	ldw	r3,-300(fp)
20080660:	e0bfb217 	ldw	r2,-312(fp)
20080664:	1885c83a 	sub	r2,r3,r2
20080668:	e0bfb915 	stw	r2,-284(fp)
        
        /* Odd part per figure 8; the matrix is unitary and hence its
         * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
         */
        
        tmp0 = inptr[DCTSIZE*7];
2008066c:	e0bfac17 	ldw	r2,-336(fp)
20080670:	10801c04 	addi	r2,r2,112
20080674:	1080000b 	ldhu	r2,0(r2)
20080678:	10bfffcc 	andi	r2,r2,65535
2008067c:	10a0001c 	xori	r2,r2,32768
20080680:	10a00004 	addi	r2,r2,-32768
20080684:	e0bfb415 	stw	r2,-304(fp)
        tmp1 =inptr[DCTSIZE*5];
20080688:	e0bfac17 	ldw	r2,-336(fp)
2008068c:	10801404 	addi	r2,r2,80
20080690:	1080000b 	ldhu	r2,0(r2)
20080694:	10bfffcc 	andi	r2,r2,65535
20080698:	10a0001c 	xori	r2,r2,32768
2008069c:	10a00004 	addi	r2,r2,-32768
200806a0:	e0bfb515 	stw	r2,-300(fp)
        tmp2 = inptr[DCTSIZE*3];
200806a4:	e0bfac17 	ldw	r2,-336(fp)
200806a8:	10800c04 	addi	r2,r2,48
200806ac:	1080000b 	ldhu	r2,0(r2)
200806b0:	10bfffcc 	andi	r2,r2,65535
200806b4:	10a0001c 	xori	r2,r2,32768
200806b8:	10a00004 	addi	r2,r2,-32768
200806bc:	e0bfb215 	stw	r2,-312(fp)
        tmp3 = inptr[DCTSIZE*1];
200806c0:	e0bfac17 	ldw	r2,-336(fp)
200806c4:	10800404 	addi	r2,r2,16
200806c8:	1080000b 	ldhu	r2,0(r2)
200806cc:	10bfffcc 	andi	r2,r2,65535
200806d0:	10a0001c 	xori	r2,r2,32768
200806d4:	10a00004 	addi	r2,r2,-32768
200806d8:	e0bfb315 	stw	r2,-308(fp)
        
        z1 = tmp0 + tmp3;
200806dc:	e0ffb417 	ldw	r3,-304(fp)
200806e0:	e0bfb317 	ldw	r2,-308(fp)
200806e4:	1885883a 	add	r2,r3,r2
200806e8:	e0bfb115 	stw	r2,-316(fp)
        z2 = tmp1 + tmp2;
200806ec:	e0ffb517 	ldw	r3,-300(fp)
200806f0:	e0bfb217 	ldw	r2,-312(fp)
200806f4:	1885883a 	add	r2,r3,r2
200806f8:	e0bfaf15 	stw	r2,-324(fp)
        z3 = tmp0 + tmp2;
200806fc:	e0ffb417 	ldw	r3,-304(fp)
20080700:	e0bfb217 	ldw	r2,-312(fp)
20080704:	1885883a 	add	r2,r3,r2
20080708:	e0bfb015 	stw	r2,-320(fp)
        z4 = tmp1 + tmp3;
2008070c:	e0ffb517 	ldw	r3,-300(fp)
20080710:	e0bfb317 	ldw	r2,-308(fp)
20080714:	1885883a 	add	r2,r3,r2
20080718:	e0bfba15 	stw	r2,-280(fp)
        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
2008071c:	e0ffb017 	ldw	r3,-320(fp)
20080720:	e0bfba17 	ldw	r2,-280(fp)
20080724:	1885883a 	add	r2,r3,r2
20080728:	10896864 	muli	r2,r2,9633
2008072c:	e0bfbb15 	stw	r2,-276(fp)
        
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
20080730:	e0bfb417 	ldw	r2,-304(fp)
20080734:	108263a4 	muli	r2,r2,2446
20080738:	e0bfb415 	stw	r2,-304(fp)
        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
2008073c:	e0bfb517 	ldw	r2,-300(fp)
20080740:	10906ce4 	muli	r2,r2,16819
20080744:	e0bfb515 	stw	r2,-300(fp)
        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
20080748:	e0bfb217 	ldw	r2,-312(fp)
2008074c:	10989524 	muli	r2,r2,25172
20080750:	e0bfb215 	stw	r2,-312(fp)
        tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
20080754:	e0bfb317 	ldw	r2,-308(fp)
20080758:	108c02e4 	muli	r2,r2,12299
2008075c:	e0bfb315 	stw	r2,-308(fp)
        z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
20080760:	e0bfb117 	ldw	r2,-316(fp)
20080764:	10b8cce4 	muli	r2,r2,-7373
20080768:	e0bfb115 	stw	r2,-316(fp)
        z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
2008076c:	e0bfaf17 	ldw	r2,-324(fp)
20080770:	10ab7f64 	muli	r2,r2,-20995
20080774:	e0bfaf15 	stw	r2,-324(fp)
        z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
20080778:	e0bfb017 	ldw	r2,-320(fp)
2008077c:	10b04ee4 	muli	r2,r2,-16069
20080780:	e0bfb015 	stw	r2,-320(fp)
        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
20080784:	e0bfba17 	ldw	r2,-280(fp)
20080788:	10bce124 	muli	r2,r2,-3196
2008078c:	e0bfba15 	stw	r2,-280(fp)
        
        z3 += z5;
20080790:	e0ffb017 	ldw	r3,-320(fp)
20080794:	e0bfbb17 	ldw	r2,-276(fp)
20080798:	1885883a 	add	r2,r3,r2
2008079c:	e0bfb015 	stw	r2,-320(fp)
        z4 += z5;
200807a0:	e0ffba17 	ldw	r3,-280(fp)
200807a4:	e0bfbb17 	ldw	r2,-276(fp)
200807a8:	1885883a 	add	r2,r3,r2
200807ac:	e0bfba15 	stw	r2,-280(fp)
        
        tmp0 += z1 + z3;
200807b0:	e0ffb117 	ldw	r3,-316(fp)
200807b4:	e0bfb017 	ldw	r2,-320(fp)
200807b8:	1885883a 	add	r2,r3,r2
200807bc:	e0ffb417 	ldw	r3,-304(fp)
200807c0:	1885883a 	add	r2,r3,r2
200807c4:	e0bfb415 	stw	r2,-304(fp)
        tmp1 += z2 + z4;
200807c8:	e0ffaf17 	ldw	r3,-324(fp)
200807cc:	e0bfba17 	ldw	r2,-280(fp)
200807d0:	1885883a 	add	r2,r3,r2
200807d4:	e0ffb517 	ldw	r3,-300(fp)
200807d8:	1885883a 	add	r2,r3,r2
200807dc:	e0bfb515 	stw	r2,-300(fp)
        tmp2 += z2 + z3;
200807e0:	e0ffaf17 	ldw	r3,-324(fp)
200807e4:	e0bfb017 	ldw	r2,-320(fp)
200807e8:	1885883a 	add	r2,r3,r2
200807ec:	e0ffb217 	ldw	r3,-312(fp)
200807f0:	1885883a 	add	r2,r3,r2
200807f4:	e0bfb215 	stw	r2,-312(fp)
        tmp3 += z1 + z4;
200807f8:	e0ffb117 	ldw	r3,-316(fp)
200807fc:	e0bfba17 	ldw	r2,-280(fp)
20080800:	1885883a 	add	r2,r3,r2
20080804:	e0ffb317 	ldw	r3,-308(fp)
20080808:	1885883a 	add	r2,r3,r2
2008080c:	e0bfb315 	stw	r2,-308(fp)
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
20080810:	e0ffb617 	ldw	r3,-296(fp)
20080814:	e0bfb317 	ldw	r2,-308(fp)
20080818:	1885883a 	add	r2,r3,r2
2008081c:	10810004 	addi	r2,r2,1024
20080820:	1007d2fa 	srai	r3,r2,11
20080824:	e0bfad17 	ldw	r2,-332(fp)
20080828:	10c00015 	stw	r3,0(r2)
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
2008082c:	e0bfad17 	ldw	r2,-332(fp)
20080830:	10803804 	addi	r2,r2,224
20080834:	e13fb617 	ldw	r4,-296(fp)
20080838:	e0ffb317 	ldw	r3,-308(fp)
2008083c:	20c7c83a 	sub	r3,r4,r3
20080840:	18c10004 	addi	r3,r3,1024
20080844:	1807d2fa 	srai	r3,r3,11
20080848:	10c00015 	stw	r3,0(r2)
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
2008084c:	e0bfad17 	ldw	r2,-332(fp)
20080850:	10800804 	addi	r2,r2,32
20080854:	e13fb817 	ldw	r4,-288(fp)
20080858:	e0ffb217 	ldw	r3,-312(fp)
2008085c:	20c7883a 	add	r3,r4,r3
20080860:	18c10004 	addi	r3,r3,1024
20080864:	1807d2fa 	srai	r3,r3,11
20080868:	10c00015 	stw	r3,0(r2)
        wsptr[DCTSIZE*6] = (int32_t) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
2008086c:	e0bfad17 	ldw	r2,-332(fp)
20080870:	10803004 	addi	r2,r2,192
20080874:	e13fb817 	ldw	r4,-288(fp)
20080878:	e0ffb217 	ldw	r3,-312(fp)
2008087c:	20c7c83a 	sub	r3,r4,r3
20080880:	18c10004 	addi	r3,r3,1024
20080884:	1807d2fa 	srai	r3,r3,11
20080888:	10c00015 	stw	r3,0(r2)
        wsptr[DCTSIZE*2] = (int32_t) DESCALE(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
2008088c:	e0bfad17 	ldw	r2,-332(fp)
20080890:	10801004 	addi	r2,r2,64
20080894:	e13fb917 	ldw	r4,-284(fp)
20080898:	e0ffb517 	ldw	r3,-300(fp)
2008089c:	20c7883a 	add	r3,r4,r3
200808a0:	18c10004 	addi	r3,r3,1024
200808a4:	1807d2fa 	srai	r3,r3,11
200808a8:	10c00015 	stw	r3,0(r2)
        wsptr[DCTSIZE*5] = (int32_t) DESCALE(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
200808ac:	e0bfad17 	ldw	r2,-332(fp)
200808b0:	10802804 	addi	r2,r2,160
200808b4:	e13fb917 	ldw	r4,-284(fp)
200808b8:	e0ffb517 	ldw	r3,-300(fp)
200808bc:	20c7c83a 	sub	r3,r4,r3
200808c0:	18c10004 	addi	r3,r3,1024
200808c4:	1807d2fa 	srai	r3,r3,11
200808c8:	10c00015 	stw	r3,0(r2)
        wsptr[DCTSIZE*3] = (int32_t) DESCALE(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
200808cc:	e0bfad17 	ldw	r2,-332(fp)
200808d0:	10801804 	addi	r2,r2,96
200808d4:	e13fb717 	ldw	r4,-292(fp)
200808d8:	e0ffb417 	ldw	r3,-304(fp)
200808dc:	20c7883a 	add	r3,r4,r3
200808e0:	18c10004 	addi	r3,r3,1024
200808e4:	1807d2fa 	srai	r3,r3,11
200808e8:	10c00015 	stw	r3,0(r2)
        wsptr[DCTSIZE*4] = (int32_t) DESCALE(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
200808ec:	e0bfad17 	ldw	r2,-332(fp)
200808f0:	10802004 	addi	r2,r2,128
200808f4:	e13fb717 	ldw	r4,-292(fp)
200808f8:	e0ffb417 	ldw	r3,-304(fp)
200808fc:	20c7c83a 	sub	r3,r4,r3
20080900:	18c10004 	addi	r3,r3,1024
20080904:	1807d2fa 	srai	r3,r3,11
20080908:	10c00015 	stw	r3,0(r2)
        
        inptr++;			/* advance pointers to next column */
2008090c:	e0bfac17 	ldw	r2,-336(fp)
20080910:	10800084 	addi	r2,r2,2
20080914:	e0bfac15 	stw	r2,-336(fp)
        wsptr++;
20080918:	e0bfad17 	ldw	r2,-332(fp)
2008091c:	10800104 	addi	r2,r2,4
20080920:	e0bfad15 	stw	r2,-332(fp)
    /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
    /* furthermore, we scale the results by 2**PASS1_BITS. */
    
    inptr = DCAC[0];
    wsptr = workspace;
    for (ctr = DCTSIZE; ctr > 0; ctr--) {
20080924:	e0bfae17 	ldw	r2,-328(fp)
20080928:	10bfffc4 	addi	r2,r2,-1
2008092c:	e0bfae15 	stw	r2,-328(fp)
20080930:	e0bfae17 	ldw	r2,-328(fp)
20080934:	00bf0916 	blt	zero,r2,2008055c <__flash_rwdata_start+0xfffe1988>
    
    /* Pass 2: process rows from work array, store into output array. */
    /* Note that we must descale the results by a factor of 8 == 2**3, */
    /* and also undo the PASS1_BITS scaling. */
    
    wsptr = workspace;
20080938:	e0bfbe04 	addi	r2,fp,-264
2008093c:	e0bfad15 	stw	r2,-332(fp)
    for (ctr = 0; ctr < DCTSIZE; ctr++) {
20080940:	e03fae15 	stw	zero,-328(fp)
20080944:	00012906 	br	20080dec <idct+0x8c0>
        outptr = block[ctr];
20080948:	e0bfae17 	ldw	r2,-328(fp)
2008094c:	100490fa 	slli	r2,r2,3
20080950:	e0ffff17 	ldw	r3,-4(fp)
20080954:	1885883a 	add	r2,r3,r2
20080958:	e0bfbc15 	stw	r2,-272(fp)
        
        /* Even part: reverse the even part of the forward DCT. */
        /* The rotator is sqrt(2)*c(-6). */
        
        z2 = (int32_t) wsptr[2];
2008095c:	e0bfad17 	ldw	r2,-332(fp)
20080960:	10800217 	ldw	r2,8(r2)
20080964:	e0bfaf15 	stw	r2,-324(fp)
        z3 = (int32_t) wsptr[6];
20080968:	e0bfad17 	ldw	r2,-332(fp)
2008096c:	10800617 	ldw	r2,24(r2)
20080970:	e0bfb015 	stw	r2,-320(fp)
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
20080974:	e0ffaf17 	ldw	r3,-324(fp)
20080978:	e0bfb017 	ldw	r2,-320(fp)
2008097c:	1885883a 	add	r2,r3,r2
20080980:	10845464 	muli	r2,r2,4433
20080984:	e0bfb115 	stw	r2,-316(fp)
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
20080988:	e0bfb017 	ldw	r2,-320(fp)
2008098c:	10f137e4 	muli	r3,r2,-15137
20080990:	e0bfb117 	ldw	r2,-316(fp)
20080994:	1885883a 	add	r2,r3,r2
20080998:	e0bfb215 	stw	r2,-312(fp)
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
2008099c:	e0bfaf17 	ldw	r2,-324(fp)
200809a0:	10c61fa4 	muli	r3,r2,6270
200809a4:	e0bfb117 	ldw	r2,-316(fp)
200809a8:	1885883a 	add	r2,r3,r2
200809ac:	e0bfb315 	stw	r2,-308(fp)
        
        tmp0 = ((int32_t) wsptr[0] + (int32_t) wsptr[4]) << CONST_BITS;
200809b0:	e0bfad17 	ldw	r2,-332(fp)
200809b4:	10c00017 	ldw	r3,0(r2)
200809b8:	e0bfad17 	ldw	r2,-332(fp)
200809bc:	10800404 	addi	r2,r2,16
200809c0:	10800017 	ldw	r2,0(r2)
200809c4:	1885883a 	add	r2,r3,r2
200809c8:	1004937a 	slli	r2,r2,13
200809cc:	e0bfb415 	stw	r2,-304(fp)
        tmp1 = ((int32_t) wsptr[0] - (int32_t) wsptr[4]) << CONST_BITS;
200809d0:	e0bfad17 	ldw	r2,-332(fp)
200809d4:	10c00017 	ldw	r3,0(r2)
200809d8:	e0bfad17 	ldw	r2,-332(fp)
200809dc:	10800404 	addi	r2,r2,16
200809e0:	10800017 	ldw	r2,0(r2)
200809e4:	1885c83a 	sub	r2,r3,r2
200809e8:	1004937a 	slli	r2,r2,13
200809ec:	e0bfb515 	stw	r2,-300(fp)
        
        tmp10 = tmp0 + tmp3;
200809f0:	e0ffb417 	ldw	r3,-304(fp)
200809f4:	e0bfb317 	ldw	r2,-308(fp)
200809f8:	1885883a 	add	r2,r3,r2
200809fc:	e0bfb615 	stw	r2,-296(fp)
        tmp13 = tmp0 - tmp3;
20080a00:	e0ffb417 	ldw	r3,-304(fp)
20080a04:	e0bfb317 	ldw	r2,-308(fp)
20080a08:	1885c83a 	sub	r2,r3,r2
20080a0c:	e0bfb715 	stw	r2,-292(fp)
        tmp11 = tmp1 + tmp2;
20080a10:	e0ffb517 	ldw	r3,-300(fp)
20080a14:	e0bfb217 	ldw	r2,-312(fp)
20080a18:	1885883a 	add	r2,r3,r2
20080a1c:	e0bfb815 	stw	r2,-288(fp)
        tmp12 = tmp1 - tmp2;
20080a20:	e0ffb517 	ldw	r3,-300(fp)
20080a24:	e0bfb217 	ldw	r2,-312(fp)
20080a28:	1885c83a 	sub	r2,r3,r2
20080a2c:	e0bfb915 	stw	r2,-284(fp)
        
        /* Odd part per figure 8; the matrix is unitary and hence its
         * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
         */
        
        tmp0 = (int32_t) wsptr[7];
20080a30:	e0bfad17 	ldw	r2,-332(fp)
20080a34:	10800717 	ldw	r2,28(r2)
20080a38:	e0bfb415 	stw	r2,-304(fp)
        tmp1 = (int32_t) wsptr[5];
20080a3c:	e0bfad17 	ldw	r2,-332(fp)
20080a40:	10800517 	ldw	r2,20(r2)
20080a44:	e0bfb515 	stw	r2,-300(fp)
        tmp2 = (int32_t) wsptr[3];
20080a48:	e0bfad17 	ldw	r2,-332(fp)
20080a4c:	10800317 	ldw	r2,12(r2)
20080a50:	e0bfb215 	stw	r2,-312(fp)
        tmp3 = (int32_t) wsptr[1];
20080a54:	e0bfad17 	ldw	r2,-332(fp)
20080a58:	10800117 	ldw	r2,4(r2)
20080a5c:	e0bfb315 	stw	r2,-308(fp)
        
        z1 = tmp0 + tmp3;
20080a60:	e0ffb417 	ldw	r3,-304(fp)
20080a64:	e0bfb317 	ldw	r2,-308(fp)
20080a68:	1885883a 	add	r2,r3,r2
20080a6c:	e0bfb115 	stw	r2,-316(fp)
        z2 = tmp1 + tmp2;
20080a70:	e0ffb517 	ldw	r3,-300(fp)
20080a74:	e0bfb217 	ldw	r2,-312(fp)
20080a78:	1885883a 	add	r2,r3,r2
20080a7c:	e0bfaf15 	stw	r2,-324(fp)
        z3 = tmp0 + tmp2;
20080a80:	e0ffb417 	ldw	r3,-304(fp)
20080a84:	e0bfb217 	ldw	r2,-312(fp)
20080a88:	1885883a 	add	r2,r3,r2
20080a8c:	e0bfb015 	stw	r2,-320(fp)
        z4 = tmp1 + tmp3;
20080a90:	e0ffb517 	ldw	r3,-300(fp)
20080a94:	e0bfb317 	ldw	r2,-308(fp)
20080a98:	1885883a 	add	r2,r3,r2
20080a9c:	e0bfba15 	stw	r2,-280(fp)
        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
20080aa0:	e0ffb017 	ldw	r3,-320(fp)
20080aa4:	e0bfba17 	ldw	r2,-280(fp)
20080aa8:	1885883a 	add	r2,r3,r2
20080aac:	10896864 	muli	r2,r2,9633
20080ab0:	e0bfbb15 	stw	r2,-276(fp)
        
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
20080ab4:	e0bfb417 	ldw	r2,-304(fp)
20080ab8:	108263a4 	muli	r2,r2,2446
20080abc:	e0bfb415 	stw	r2,-304(fp)
        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
20080ac0:	e0bfb517 	ldw	r2,-300(fp)
20080ac4:	10906ce4 	muli	r2,r2,16819
20080ac8:	e0bfb515 	stw	r2,-300(fp)
        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
20080acc:	e0bfb217 	ldw	r2,-312(fp)
20080ad0:	10989524 	muli	r2,r2,25172
20080ad4:	e0bfb215 	stw	r2,-312(fp)
        tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
20080ad8:	e0bfb317 	ldw	r2,-308(fp)
20080adc:	108c02e4 	muli	r2,r2,12299
20080ae0:	e0bfb315 	stw	r2,-308(fp)
        z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
20080ae4:	e0bfb117 	ldw	r2,-316(fp)
20080ae8:	10b8cce4 	muli	r2,r2,-7373
20080aec:	e0bfb115 	stw	r2,-316(fp)
        z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
20080af0:	e0bfaf17 	ldw	r2,-324(fp)
20080af4:	10ab7f64 	muli	r2,r2,-20995
20080af8:	e0bfaf15 	stw	r2,-324(fp)
        z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
20080afc:	e0bfb017 	ldw	r2,-320(fp)
20080b00:	10b04ee4 	muli	r2,r2,-16069
20080b04:	e0bfb015 	stw	r2,-320(fp)
        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
20080b08:	e0bfba17 	ldw	r2,-280(fp)
20080b0c:	10bce124 	muli	r2,r2,-3196
20080b10:	e0bfba15 	stw	r2,-280(fp)
        
        z3 += z5;
20080b14:	e0ffb017 	ldw	r3,-320(fp)
20080b18:	e0bfbb17 	ldw	r2,-276(fp)
20080b1c:	1885883a 	add	r2,r3,r2
20080b20:	e0bfb015 	stw	r2,-320(fp)
        z4 += z5;
20080b24:	e0ffba17 	ldw	r3,-280(fp)
20080b28:	e0bfbb17 	ldw	r2,-276(fp)
20080b2c:	1885883a 	add	r2,r3,r2
20080b30:	e0bfba15 	stw	r2,-280(fp)
        
        tmp0 += z1 + z3;
20080b34:	e0ffb117 	ldw	r3,-316(fp)
20080b38:	e0bfb017 	ldw	r2,-320(fp)
20080b3c:	1885883a 	add	r2,r3,r2
20080b40:	e0ffb417 	ldw	r3,-304(fp)
20080b44:	1885883a 	add	r2,r3,r2
20080b48:	e0bfb415 	stw	r2,-304(fp)
        tmp1 += z2 + z4;
20080b4c:	e0ffaf17 	ldw	r3,-324(fp)
20080b50:	e0bfba17 	ldw	r2,-280(fp)
20080b54:	1885883a 	add	r2,r3,r2
20080b58:	e0ffb517 	ldw	r3,-300(fp)
20080b5c:	1885883a 	add	r2,r3,r2
20080b60:	e0bfb515 	stw	r2,-300(fp)
        tmp2 += z2 + z3;
20080b64:	e0ffaf17 	ldw	r3,-324(fp)
20080b68:	e0bfb017 	ldw	r2,-320(fp)
20080b6c:	1885883a 	add	r2,r3,r2
20080b70:	e0ffb217 	ldw	r3,-312(fp)
20080b74:	1885883a 	add	r2,r3,r2
20080b78:	e0bfb215 	stw	r2,-312(fp)
        tmp3 += z1 + z4;
20080b7c:	e0ffb117 	ldw	r3,-316(fp)
20080b80:	e0bfba17 	ldw	r2,-280(fp)
20080b84:	1885883a 	add	r2,r3,r2
20080b88:	e0ffb317 	ldw	r3,-308(fp)
20080b8c:	1885883a 	add	r2,r3,r2
20080b90:	e0bfb315 	stw	r2,-308(fp)
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
20080b94:	e0ffb617 	ldw	r3,-296(fp)
20080b98:	e0bfb317 	ldw	r2,-308(fp)
20080b9c:	1887883a 	add	r3,r3,r2
20080ba0:	008000b4 	movhi	r2,2
20080ba4:	1885883a 	add	r2,r3,r2
20080ba8:	1005d4ba 	srai	r2,r2,18
20080bac:	e0bfbd15 	stw	r2,-268(fp)
20080bb0:	e0bfbd17 	ldw	r2,-268(fp)
20080bb4:	10000616 	blt	r2,zero,20080bd0 <idct+0x6a4>
20080bb8:	e0bfbd17 	ldw	r2,-268(fp)
20080bbc:	10c04010 	cmplti	r3,r2,256
20080bc0:	1800011e 	bne	r3,zero,20080bc8 <idct+0x69c>
20080bc4:	00803fc4 	movi	r2,255
20080bc8:	1007883a 	mov	r3,r2
20080bcc:	00000106 	br	20080bd4 <idct+0x6a8>
20080bd0:	0007883a 	mov	r3,zero
20080bd4:	e0bfbc17 	ldw	r2,-272(fp)
20080bd8:	10c00005 	stb	r3,0(r2)
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
20080bdc:	e0ffb617 	ldw	r3,-296(fp)
20080be0:	e0bfb317 	ldw	r2,-308(fp)
20080be4:	1887c83a 	sub	r3,r3,r2
20080be8:	008000b4 	movhi	r2,2
20080bec:	1885883a 	add	r2,r3,r2
20080bf0:	1005d4ba 	srai	r2,r2,18
20080bf4:	e0bfbd15 	stw	r2,-268(fp)
20080bf8:	e0bfbc17 	ldw	r2,-272(fp)
20080bfc:	10c001c4 	addi	r3,r2,7
20080c00:	e0bfbd17 	ldw	r2,-268(fp)
20080c04:	10000516 	blt	r2,zero,20080c1c <idct+0x6f0>
20080c08:	e0bfbd17 	ldw	r2,-268(fp)
20080c0c:	11004010 	cmplti	r4,r2,256
20080c10:	2000011e 	bne	r4,zero,20080c18 <idct+0x6ec>
20080c14:	00803fc4 	movi	r2,255
20080c18:	00000106 	br	20080c20 <idct+0x6f4>
20080c1c:	0005883a 	mov	r2,zero
20080c20:	18800005 	stb	r2,0(r3)
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
20080c24:	e0ffb817 	ldw	r3,-288(fp)
20080c28:	e0bfb217 	ldw	r2,-312(fp)
20080c2c:	1887883a 	add	r3,r3,r2
20080c30:	008000b4 	movhi	r2,2
20080c34:	1885883a 	add	r2,r3,r2
20080c38:	1005d4ba 	srai	r2,r2,18
20080c3c:	e0bfbd15 	stw	r2,-268(fp)
20080c40:	e0bfbc17 	ldw	r2,-272(fp)
20080c44:	10c00044 	addi	r3,r2,1
20080c48:	e0bfbd17 	ldw	r2,-268(fp)
20080c4c:	10000516 	blt	r2,zero,20080c64 <idct+0x738>
20080c50:	e0bfbd17 	ldw	r2,-268(fp)
20080c54:	11004010 	cmplti	r4,r2,256
20080c58:	2000011e 	bne	r4,zero,20080c60 <idct+0x734>
20080c5c:	00803fc4 	movi	r2,255
20080c60:	00000106 	br	20080c68 <idct+0x73c>
20080c64:	0005883a 	mov	r2,zero
20080c68:	18800005 	stb	r2,0(r3)
        outptr[6] = NORMALIZE(DESCALE(tmp11 - tmp2,CONST_BITS+PASS1_BITS+3));
20080c6c:	e0ffb817 	ldw	r3,-288(fp)
20080c70:	e0bfb217 	ldw	r2,-312(fp)
20080c74:	1887c83a 	sub	r3,r3,r2
20080c78:	008000b4 	movhi	r2,2
20080c7c:	1885883a 	add	r2,r3,r2
20080c80:	1005d4ba 	srai	r2,r2,18
20080c84:	e0bfbd15 	stw	r2,-268(fp)
20080c88:	e0bfbc17 	ldw	r2,-272(fp)
20080c8c:	10c00184 	addi	r3,r2,6
20080c90:	e0bfbd17 	ldw	r2,-268(fp)
20080c94:	10000516 	blt	r2,zero,20080cac <idct+0x780>
20080c98:	e0bfbd17 	ldw	r2,-268(fp)
20080c9c:	11004010 	cmplti	r4,r2,256
20080ca0:	2000011e 	bne	r4,zero,20080ca8 <idct+0x77c>
20080ca4:	00803fc4 	movi	r2,255
20080ca8:	00000106 	br	20080cb0 <idct+0x784>
20080cac:	0005883a 	mov	r2,zero
20080cb0:	18800005 	stb	r2,0(r3)
        outptr[2] = NORMALIZE(DESCALE(tmp12 + tmp1,CONST_BITS+PASS1_BITS+3));
20080cb4:	e0ffb917 	ldw	r3,-284(fp)
20080cb8:	e0bfb517 	ldw	r2,-300(fp)
20080cbc:	1887883a 	add	r3,r3,r2
20080cc0:	008000b4 	movhi	r2,2
20080cc4:	1885883a 	add	r2,r3,r2
20080cc8:	1005d4ba 	srai	r2,r2,18
20080ccc:	e0bfbd15 	stw	r2,-268(fp)
20080cd0:	e0bfbc17 	ldw	r2,-272(fp)
20080cd4:	10c00084 	addi	r3,r2,2
20080cd8:	e0bfbd17 	ldw	r2,-268(fp)
20080cdc:	10000516 	blt	r2,zero,20080cf4 <idct+0x7c8>
20080ce0:	e0bfbd17 	ldw	r2,-268(fp)
20080ce4:	11004010 	cmplti	r4,r2,256
20080ce8:	2000011e 	bne	r4,zero,20080cf0 <idct+0x7c4>
20080cec:	00803fc4 	movi	r2,255
20080cf0:	00000106 	br	20080cf8 <idct+0x7cc>
20080cf4:	0005883a 	mov	r2,zero
20080cf8:	18800005 	stb	r2,0(r3)
        outptr[5] = NORMALIZE(DESCALE(tmp12 - tmp1,CONST_BITS+PASS1_BITS+3));
20080cfc:	e0ffb917 	ldw	r3,-284(fp)
20080d00:	e0bfb517 	ldw	r2,-300(fp)
20080d04:	1887c83a 	sub	r3,r3,r2
20080d08:	008000b4 	movhi	r2,2
20080d0c:	1885883a 	add	r2,r3,r2
20080d10:	1005d4ba 	srai	r2,r2,18
20080d14:	e0bfbd15 	stw	r2,-268(fp)
20080d18:	e0bfbc17 	ldw	r2,-272(fp)
20080d1c:	10c00144 	addi	r3,r2,5
20080d20:	e0bfbd17 	ldw	r2,-268(fp)
20080d24:	10000516 	blt	r2,zero,20080d3c <idct+0x810>
20080d28:	e0bfbd17 	ldw	r2,-268(fp)
20080d2c:	11004010 	cmplti	r4,r2,256
20080d30:	2000011e 	bne	r4,zero,20080d38 <idct+0x80c>
20080d34:	00803fc4 	movi	r2,255
20080d38:	00000106 	br	20080d40 <idct+0x814>
20080d3c:	0005883a 	mov	r2,zero
20080d40:	18800005 	stb	r2,0(r3)
        outptr[3] = NORMALIZE(DESCALE(tmp13 + tmp0,CONST_BITS+PASS1_BITS+3));
20080d44:	e0ffb717 	ldw	r3,-292(fp)
20080d48:	e0bfb417 	ldw	r2,-304(fp)
20080d4c:	1887883a 	add	r3,r3,r2
20080d50:	008000b4 	movhi	r2,2
20080d54:	1885883a 	add	r2,r3,r2
20080d58:	1005d4ba 	srai	r2,r2,18
20080d5c:	e0bfbd15 	stw	r2,-268(fp)
20080d60:	e0bfbc17 	ldw	r2,-272(fp)
20080d64:	10c000c4 	addi	r3,r2,3
20080d68:	e0bfbd17 	ldw	r2,-268(fp)
20080d6c:	10000516 	blt	r2,zero,20080d84 <idct+0x858>
20080d70:	e0bfbd17 	ldw	r2,-268(fp)
20080d74:	11004010 	cmplti	r4,r2,256
20080d78:	2000011e 	bne	r4,zero,20080d80 <idct+0x854>
20080d7c:	00803fc4 	movi	r2,255
20080d80:	00000106 	br	20080d88 <idct+0x85c>
20080d84:	0005883a 	mov	r2,zero
20080d88:	18800005 	stb	r2,0(r3)
        outptr[4] = NORMALIZE(DESCALE(tmp13 - tmp0,CONST_BITS+PASS1_BITS+3));
20080d8c:	e0ffb717 	ldw	r3,-292(fp)
20080d90:	e0bfb417 	ldw	r2,-304(fp)
20080d94:	1887c83a 	sub	r3,r3,r2
20080d98:	008000b4 	movhi	r2,2
20080d9c:	1885883a 	add	r2,r3,r2
20080da0:	1005d4ba 	srai	r2,r2,18
20080da4:	e0bfbd15 	stw	r2,-268(fp)
20080da8:	e0bfbc17 	ldw	r2,-272(fp)
20080dac:	10c00104 	addi	r3,r2,4
20080db0:	e0bfbd17 	ldw	r2,-268(fp)
20080db4:	10000516 	blt	r2,zero,20080dcc <idct+0x8a0>
20080db8:	e0bfbd17 	ldw	r2,-268(fp)
20080dbc:	11004010 	cmplti	r4,r2,256
20080dc0:	2000011e 	bne	r4,zero,20080dc8 <idct+0x89c>
20080dc4:	00803fc4 	movi	r2,255
20080dc8:	00000106 	br	20080dd0 <idct+0x8a4>
20080dcc:	0005883a 	mov	r2,zero
20080dd0:	18800005 	stb	r2,0(r3)
        
        wsptr += DCTSIZE;		/* advance pointer to next row */
20080dd4:	e0bfad17 	ldw	r2,-332(fp)
20080dd8:	10800804 	addi	r2,r2,32
20080ddc:	e0bfad15 	stw	r2,-332(fp)
    /* Pass 2: process rows from work array, store into output array. */
    /* Note that we must descale the results by a factor of 8 == 2**3, */
    /* and also undo the PASS1_BITS scaling. */
    
    wsptr = workspace;
    for (ctr = 0; ctr < DCTSIZE; ctr++) {
20080de0:	e0bfae17 	ldw	r2,-328(fp)
20080de4:	10800044 	addi	r2,r2,1
20080de8:	e0bfae15 	stw	r2,-328(fp)
20080dec:	e0bfae17 	ldw	r2,-328(fp)
20080df0:	10800210 	cmplti	r2,r2,8
20080df4:	103ed41e 	bne	r2,zero,20080948 <__flash_rwdata_start+0xfffe1d74>
        outptr[3] = NORMALIZE(DESCALE(tmp13 + tmp0,CONST_BITS+PASS1_BITS+3));
        outptr[4] = NORMALIZE(DESCALE(tmp13 - tmp0,CONST_BITS+PASS1_BITS+3));
        
        wsptr += DCTSIZE;		/* advance pointer to next row */
    }
}
20080df8:	e037883a 	mov	sp,fp
20080dfc:	df000017 	ldw	fp,0(sp)
20080e00:	dec00104 	addi	sp,sp,4
20080e04:	f800283a 	ret

20080e08 <lossless_decode>:
 To perform the update, the bitstream pointer is incremented every
 time bits from a new byte in the bistream are shifted in.

******************************** */
void lossless_decode(int num_blocks, void* bitstream, dct_block_t* DCACq, dct_block_t quant, bool P)
{
20080e08:	defff304 	addi	sp,sp,-52
20080e0c:	dfc00c15 	stw	ra,48(sp)
20080e10:	df000b15 	stw	fp,44(sp)
20080e14:	df000b04 	addi	fp,sp,44
20080e18:	e13ffc15 	stw	r4,-16(fp)
20080e1c:	e17ffd15 	stw	r5,-12(fp)
20080e20:	e1bffe15 	stw	r6,-8(fp)
20080e24:	e1ffff15 	stw	r7,-4(fp)
    //bitbuffer
    uint32_t bitbuffer = 0;
20080e28:	e03ff915 	stw	zero,-28(fp)
    //bit position in the bitstream pointed to by bitstream.
    //I.e., if bitcount = 3, then 3 bits from the byte
    //pointed to by bitstream have already been shifted in bitbuffer
    int bitcount = 0;
20080e2c:	e03ffa15 	stw	zero,-24(fp)

    //shift in the first 32 bits
    update_buffer(&bitbuffer, &bitstream, &bitcount, 32);
20080e30:	e13ff904 	addi	r4,fp,-28
20080e34:	e0fffd04 	addi	r3,fp,-12
20080e38:	e0bffa04 	addi	r2,fp,-24
20080e3c:	180b883a 	mov	r5,r3
20080e40:	100d883a 	mov	r6,r2
20080e44:	01c00804 	movi	r7,32
20080e48:	00811140 	call	20081114 <update_buffer>

    huff_input_t ib;
    //Used for I frame DC differential encoding
    DCTELEM cur = 0;
20080e4c:	e03ff50d 	sth	zero,-44(fp)

    if(P == 0)
20080e50:	e0800217 	ldw	r2,8(fp)
20080e54:	1000061e 	bne	r2,zero,20080e70 <lossless_decode+0x68>
        memset(DCACq, 0, num_blocks*64*sizeof(DCTELEM));
20080e58:	e0bffc17 	ldw	r2,-16(fp)
20080e5c:	100491fa 	slli	r2,r2,7
20080e60:	e13ffe17 	ldw	r4,-8(fp)
20080e64:	000b883a 	mov	r5,zero
20080e68:	100d883a 	mov	r6,r2
20080e6c:	008bed40 	call	2008bed4 <memset>

    for(int count = 0; count < num_blocks; count ++){
20080e70:	e03ff615 	stw	zero,-40(fp)
20080e74:	00009f06 	br	200810f4 <lossless_decode+0x2ec>
        //pe is used to write the DCT coefficients in zig-zag order
        DCTELEM* pe = (DCTELEM*)(DCACq[count]);
20080e78:	e0bff617 	ldw	r2,-40(fp)
20080e7c:	100491fa 	slli	r2,r2,7
20080e80:	e0fffe17 	ldw	r3,-8(fp)
20080e84:	1885883a 	add	r2,r3,r2
20080e88:	e0bff815 	stw	r2,-32(fp)

        //decode DC coefficients
        ib = input_DC(bitbuffer);
20080e8c:	e0bff917 	ldw	r2,-28(fp)
20080e90:	1009883a 	mov	r4,r2
20080e94:	00812d80 	call	200812d8 <input_DC>
20080e98:	e0bffb15 	stw	r2,-20(fp)
        update_buffer(&bitbuffer, &bitstream, &bitcount, ib.bits);
20080e9c:	e0bffb03 	ldbu	r2,-20(fp)
20080ea0:	10803fcc 	andi	r2,r2,255
20080ea4:	e13ff904 	addi	r4,fp,-28
20080ea8:	e17ffd04 	addi	r5,fp,-12
20080eac:	e0fffa04 	addi	r3,fp,-24
20080eb0:	180d883a 	mov	r6,r3
20080eb4:	100f883a 	mov	r7,r2
20080eb8:	00811140 	call	20081114 <update_buffer>
#ifndef NULL_QUANT
        if(P){ //differential decoding based on previous frame
20080ebc:	e0800217 	ldw	r2,8(fp)
20080ec0:	10000d26 	beq	r2,zero,20080ef8 <lossless_decode+0xf0>
            pe[0] += (ib.e * (((DCTELEM*)quant)[0]) );
20080ec4:	e0bff817 	ldw	r2,-32(fp)
20080ec8:	1080000b 	ldhu	r2,0(r2)
20080ecc:	1007883a 	mov	r3,r2
20080ed0:	e0bffb8b 	ldhu	r2,-18(fp)
20080ed4:	1009883a 	mov	r4,r2
20080ed8:	e0bfff17 	ldw	r2,-4(fp)
20080edc:	1080000b 	ldhu	r2,0(r2)
20080ee0:	2085383a 	mul	r2,r4,r2
20080ee4:	1885883a 	add	r2,r3,r2
20080ee8:	1007883a 	mov	r3,r2
20080eec:	e0bff817 	ldw	r2,-32(fp)
20080ef0:	10c0000d 	sth	r3,0(r2)
20080ef4:	00000d06 	br	20080f2c <lossless_decode+0x124>
        }
        else{ //differential decoding based on previous block
            cur += ib.e;
20080ef8:	e0bffb8b 	ldhu	r2,-18(fp)
20080efc:	1007883a 	mov	r3,r2
20080f00:	e0bff50b 	ldhu	r2,-44(fp)
20080f04:	1885883a 	add	r2,r3,r2
20080f08:	e0bff50d 	sth	r2,-44(fp)
            pe[0] = cur * (((DCTELEM*)quant)[0]);
20080f0c:	e0bfff17 	ldw	r2,-4(fp)
20080f10:	1080000b 	ldhu	r2,0(r2)
20080f14:	1007883a 	mov	r3,r2
20080f18:	e0bff50b 	ldhu	r2,-44(fp)
20080f1c:	1885383a 	mul	r2,r3,r2
20080f20:	1007883a 	mov	r3,r2
20080f24:	e0bff817 	ldw	r2,-32(fp)
20080f28:	10c0000d 	sth	r3,0(r2)
        }
#else   //null dequantization, no differential
        pe[0] = ib.e;
#endif

        uint8_t index = 1; //zig-zag order index for AC values in the 8x8 matrix, [0, 63]
20080f2c:	00800044 	movi	r2,1
20080f30:	e0bff705 	stb	r2,-36(fp)
        while(1){
            //decode AC coefficient
            ib = input_AC(bitbuffer);
20080f34:	e0bff917 	ldw	r2,-28(fp)
20080f38:	1009883a 	mov	r4,r2
20080f3c:	00813d40 	call	200813d4 <input_AC>
20080f40:	e0bffb15 	stw	r2,-20(fp)
            update_buffer(&bitbuffer, &bitstream, &bitcount, ib.bits);
20080f44:	e0bffb03 	ldbu	r2,-20(fp)
20080f48:	10803fcc 	andi	r2,r2,255
20080f4c:	e13ff904 	addi	r4,fp,-28
20080f50:	e17ffd04 	addi	r5,fp,-12
20080f54:	e0fffa04 	addi	r3,fp,-24
20080f58:	180d883a 	mov	r6,r3
20080f5c:	100f883a 	mov	r7,r2
20080f60:	00811140 	call	20081114 <update_buffer>
            if(ib.e == 0){
20080f64:	e0bffb8b 	ldhu	r2,-18(fp)
20080f68:	10bfffcc 	andi	r2,r2,65535
20080f6c:	10a0001c 	xori	r2,r2,32768
20080f70:	10a00004 	addi	r2,r2,-32768
20080f74:	1000091e 	bne	r2,zero,20080f9c <lossless_decode+0x194>
                if(ib.runlength == 15){
20080f78:	e0bffb43 	ldbu	r2,-19(fp)
20080f7c:	10803fcc 	andi	r2,r2,255
20080f80:	108003d8 	cmpnei	r2,r2,15
20080f84:	1000041e 	bne	r2,zero,20080f98 <lossless_decode+0x190>
                    //EZL
                    index += 16;
20080f88:	e0bff703 	ldbu	r2,-36(fp)
20080f8c:	10800404 	addi	r2,r2,16
20080f90:	e0bff705 	stb	r2,-36(fp)
20080f94:	00005306 	br	200810e4 <lossless_decode+0x2dc>
                }
                else {
                    //END
                    break; //break from while and go to next block
20080f98:	00005306 	br	200810e8 <lossless_decode+0x2e0>
                }
            }
            else{ //ib.e != 0

                index += ib.runlength;
20080f9c:	e0fffb43 	ldbu	r3,-19(fp)
20080fa0:	e0bff703 	ldbu	r2,-36(fp)
20080fa4:	1885883a 	add	r2,r3,r2
20080fa8:	e0bff705 	stb	r2,-36(fp)
                //now add the actual value
#ifndef NULL_QUANT
                if(P){ //differential decoding based on previous frame
20080fac:	e0800217 	ldw	r2,8(fp)
20080fb0:	10002a26 	beq	r2,zero,2008105c <lossless_decode+0x254>
                    pe[zigzag_table[index]] += ib.e * (((DCTELEM*)quant)[zigzag_table[index]]);
20080fb4:	e0fff703 	ldbu	r3,-36(fp)
20080fb8:	00800034 	movhi	r2,0
20080fbc:	1082fc04 	addi	r2,r2,3056
20080fc0:	18c7883a 	add	r3,r3,r3
20080fc4:	18c7883a 	add	r3,r3,r3
20080fc8:	10c5883a 	add	r2,r2,r3
20080fcc:	10800017 	ldw	r2,0(r2)
20080fd0:	1085883a 	add	r2,r2,r2
20080fd4:	1007883a 	mov	r3,r2
20080fd8:	e0bff817 	ldw	r2,-32(fp)
20080fdc:	10c9883a 	add	r4,r2,r3
20080fe0:	e0fff703 	ldbu	r3,-36(fp)
20080fe4:	00800034 	movhi	r2,0
20080fe8:	1082fc04 	addi	r2,r2,3056
20080fec:	18c7883a 	add	r3,r3,r3
20080ff0:	18c7883a 	add	r3,r3,r3
20080ff4:	10c5883a 	add	r2,r2,r3
20080ff8:	10800017 	ldw	r2,0(r2)
20080ffc:	1085883a 	add	r2,r2,r2
20081000:	1007883a 	mov	r3,r2
20081004:	e0bff817 	ldw	r2,-32(fp)
20081008:	10c5883a 	add	r2,r2,r3
2008100c:	1080000b 	ldhu	r2,0(r2)
20081010:	100b883a 	mov	r5,r2
20081014:	e0bffb8b 	ldhu	r2,-18(fp)
20081018:	100d883a 	mov	r6,r2
2008101c:	e0fff703 	ldbu	r3,-36(fp)
20081020:	00800034 	movhi	r2,0
20081024:	1082fc04 	addi	r2,r2,3056
20081028:	18c7883a 	add	r3,r3,r3
2008102c:	18c7883a 	add	r3,r3,r3
20081030:	10c5883a 	add	r2,r2,r3
20081034:	10800017 	ldw	r2,0(r2)
20081038:	1085883a 	add	r2,r2,r2
2008103c:	1007883a 	mov	r3,r2
20081040:	e0bfff17 	ldw	r2,-4(fp)
20081044:	10c5883a 	add	r2,r2,r3
20081048:	1080000b 	ldhu	r2,0(r2)
2008104c:	3085383a 	mul	r2,r6,r2
20081050:	2885883a 	add	r2,r5,r2
20081054:	2080000d 	sth	r2,0(r4)
20081058:	00001b06 	br	200810c8 <lossless_decode+0x2c0>
                }
                else{ //no differential decoding
                    pe[zigzag_table[index]] = ib.e * (((DCTELEM*)quant)[zigzag_table[index]]);
2008105c:	e0fff703 	ldbu	r3,-36(fp)
20081060:	00800034 	movhi	r2,0
20081064:	1082fc04 	addi	r2,r2,3056
20081068:	18c7883a 	add	r3,r3,r3
2008106c:	18c7883a 	add	r3,r3,r3
20081070:	10c5883a 	add	r2,r2,r3
20081074:	10800017 	ldw	r2,0(r2)
20081078:	1085883a 	add	r2,r2,r2
2008107c:	1007883a 	mov	r3,r2
20081080:	e0bff817 	ldw	r2,-32(fp)
20081084:	10c9883a 	add	r4,r2,r3
20081088:	e0bffb8b 	ldhu	r2,-18(fp)
2008108c:	100b883a 	mov	r5,r2
20081090:	e0fff703 	ldbu	r3,-36(fp)
20081094:	00800034 	movhi	r2,0
20081098:	1082fc04 	addi	r2,r2,3056
2008109c:	18c7883a 	add	r3,r3,r3
200810a0:	18c7883a 	add	r3,r3,r3
200810a4:	10c5883a 	add	r2,r2,r3
200810a8:	10800017 	ldw	r2,0(r2)
200810ac:	1085883a 	add	r2,r2,r2
200810b0:	1007883a 	mov	r3,r2
200810b4:	e0bfff17 	ldw	r2,-4(fp)
200810b8:	10c5883a 	add	r2,r2,r3
200810bc:	1080000b 	ldhu	r2,0(r2)
200810c0:	2885383a 	mul	r2,r5,r2
200810c4:	2080000d 	sth	r2,0(r4)
                }
#else
                pe[zigzag_table[index]] = ib.e;
#endif
                if(index >= 63) break;
200810c8:	e0bff703 	ldbu	r2,-36(fp)
200810cc:	10800ff0 	cmpltui	r2,r2,63
200810d0:	1000011e 	bne	r2,zero,200810d8 <lossless_decode+0x2d0>
200810d4:	00000406 	br	200810e8 <lossless_decode+0x2e0>
                index++;
200810d8:	e0bff703 	ldbu	r2,-36(fp)
200810dc:	10800044 	addi	r2,r2,1
200810e0:	e0bff705 	stb	r2,-36(fp)
            }
        }
200810e4:	003f9306 	br	20080f34 <__flash_rwdata_start+0xfffe2360>
    DCTELEM cur = 0;

    if(P == 0)
        memset(DCACq, 0, num_blocks*64*sizeof(DCTELEM));

    for(int count = 0; count < num_blocks; count ++){
200810e8:	e0bff617 	ldw	r2,-40(fp)
200810ec:	10800044 	addi	r2,r2,1
200810f0:	e0bff615 	stw	r2,-40(fp)
200810f4:	e0fff617 	ldw	r3,-40(fp)
200810f8:	e0bffc17 	ldw	r2,-16(fp)
200810fc:	18bf5e16 	blt	r3,r2,20080e78 <__flash_rwdata_start+0xfffe22a4>
                if(index >= 63) break;
                index++;
            }
        }
    }
}
20081100:	e037883a 	mov	sp,fp
20081104:	dfc00117 	ldw	ra,4(sp)
20081108:	df000017 	ldw	fp,0(sp)
2008110c:	dec00204 	addi	sp,sp,8
20081110:	f800283a 	ret

20081114 <update_buffer>:


//update buffer
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount,
        uint8_t size) {
20081114:	defffb04 	addi	sp,sp,-20
20081118:	df000415 	stw	fp,16(sp)
2008111c:	df000404 	addi	fp,sp,16
20081120:	e13ffc15 	stw	r4,-16(fp)
20081124:	e17ffd15 	stw	r5,-12(fp)
20081128:	e1bffe15 	stw	r6,-8(fp)
2008112c:	3805883a 	mov	r2,r7
20081130:	e0bfff05 	stb	r2,-4(fp)
    //remove decoded bits
    (*pbitbuffer) <<= size;
20081134:	e0bffc17 	ldw	r2,-16(fp)
20081138:	10c00017 	ldw	r3,0(r2)
2008113c:	e0bfff03 	ldbu	r2,-4(fp)
20081140:	1886983a 	sll	r3,r3,r2
20081144:	e0bffc17 	ldw	r2,-16(fp)
20081148:	10c00015 	stw	r3,0(r2)
    //total number of bits to be shifted in
    *pbitcount += size;
2008114c:	e0bffe17 	ldw	r2,-8(fp)
20081150:	10c00017 	ldw	r3,0(r2)
20081154:	e0bfff03 	ldbu	r2,-4(fp)
20081158:	1887883a 	add	r3,r3,r2
2008115c:	e0bffe17 	ldw	r2,-8(fp)
20081160:	10c00015 	stw	r3,0(r2)
    if (*pbitcount >= 8) { //we need to shift in at least 1 byte
20081164:	e0bffe17 	ldw	r2,-8(fp)
20081168:	10800017 	ldw	r2,0(r2)
2008116c:	10800210 	cmplti	r2,r2,8
20081170:	1000501e 	bne	r2,zero,200812b4 <update_buffer+0x1a0>
        *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 8);
20081174:	e0bffc17 	ldw	r2,-16(fp)
20081178:	10800017 	ldw	r2,0(r2)
2008117c:	e0fffd17 	ldw	r3,-12(fp)
20081180:	18c00017 	ldw	r3,0(r3)
20081184:	18c00003 	ldbu	r3,0(r3)
20081188:	19003fcc 	andi	r4,r3,255
2008118c:	e0fffe17 	ldw	r3,-8(fp)
20081190:	18c00017 	ldw	r3,0(r3)
20081194:	18fffe04 	addi	r3,r3,-8
20081198:	20c6983a 	sll	r3,r4,r3
2008119c:	10c6b03a 	or	r3,r2,r3
200811a0:	e0bffc17 	ldw	r2,-16(fp)
200811a4:	10c00015 	stw	r3,0(r2)
        *pbitstream = ((uint8_t*) *pbitstream) + 1;
200811a8:	e0bffd17 	ldw	r2,-12(fp)
200811ac:	10800017 	ldw	r2,0(r2)
200811b0:	10c00044 	addi	r3,r2,1
200811b4:	e0bffd17 	ldw	r2,-12(fp)
200811b8:	10c00015 	stw	r3,0(r2)
        if (*pbitcount >= 16) { //at least 2 bytes
200811bc:	e0bffe17 	ldw	r2,-8(fp)
200811c0:	10800017 	ldw	r2,0(r2)
200811c4:	10800410 	cmplti	r2,r2,16
200811c8:	10003a1e 	bne	r2,zero,200812b4 <update_buffer+0x1a0>
            *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 16);
200811cc:	e0bffc17 	ldw	r2,-16(fp)
200811d0:	10800017 	ldw	r2,0(r2)
200811d4:	e0fffd17 	ldw	r3,-12(fp)
200811d8:	18c00017 	ldw	r3,0(r3)
200811dc:	18c00003 	ldbu	r3,0(r3)
200811e0:	19003fcc 	andi	r4,r3,255
200811e4:	e0fffe17 	ldw	r3,-8(fp)
200811e8:	18c00017 	ldw	r3,0(r3)
200811ec:	18fffc04 	addi	r3,r3,-16
200811f0:	20c6983a 	sll	r3,r4,r3
200811f4:	10c6b03a 	or	r3,r2,r3
200811f8:	e0bffc17 	ldw	r2,-16(fp)
200811fc:	10c00015 	stw	r3,0(r2)
            *pbitstream = ((uint8_t*) *pbitstream) + 1;
20081200:	e0bffd17 	ldw	r2,-12(fp)
20081204:	10800017 	ldw	r2,0(r2)
20081208:	10c00044 	addi	r3,r2,1
2008120c:	e0bffd17 	ldw	r2,-12(fp)
20081210:	10c00015 	stw	r3,0(r2)
            if (*pbitcount >= 24) { //at least 3 bytes
20081214:	e0bffe17 	ldw	r2,-8(fp)
20081218:	10800017 	ldw	r2,0(r2)
2008121c:	10800610 	cmplti	r2,r2,24
20081220:	1000241e 	bne	r2,zero,200812b4 <update_buffer+0x1a0>
                *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 24);
20081224:	e0bffc17 	ldw	r2,-16(fp)
20081228:	10800017 	ldw	r2,0(r2)
2008122c:	e0fffd17 	ldw	r3,-12(fp)
20081230:	18c00017 	ldw	r3,0(r3)
20081234:	18c00003 	ldbu	r3,0(r3)
20081238:	19003fcc 	andi	r4,r3,255
2008123c:	e0fffe17 	ldw	r3,-8(fp)
20081240:	18c00017 	ldw	r3,0(r3)
20081244:	18fffa04 	addi	r3,r3,-24
20081248:	20c6983a 	sll	r3,r4,r3
2008124c:	10c6b03a 	or	r3,r2,r3
20081250:	e0bffc17 	ldw	r2,-16(fp)
20081254:	10c00015 	stw	r3,0(r2)
                *pbitstream = ((uint8_t*) *pbitstream) + 1;
20081258:	e0bffd17 	ldw	r2,-12(fp)
2008125c:	10800017 	ldw	r2,0(r2)
20081260:	10c00044 	addi	r3,r2,1
20081264:	e0bffd17 	ldw	r2,-12(fp)
20081268:	10c00015 	stw	r3,0(r2)
                if (*pbitcount == 32) { //all 4 bytes shifted in
2008126c:	e0bffe17 	ldw	r2,-8(fp)
20081270:	10800017 	ldw	r2,0(r2)
20081274:	10800818 	cmpnei	r2,r2,32
20081278:	10000e1e 	bne	r2,zero,200812b4 <update_buffer+0x1a0>
                    *pbitbuffer |= *((uint8_t*) (*pbitstream));
2008127c:	e0bffc17 	ldw	r2,-16(fp)
20081280:	10c00017 	ldw	r3,0(r2)
20081284:	e0bffd17 	ldw	r2,-12(fp)
20081288:	10800017 	ldw	r2,0(r2)
2008128c:	10800003 	ldbu	r2,0(r2)
20081290:	10803fcc 	andi	r2,r2,255
20081294:	1886b03a 	or	r3,r3,r2
20081298:	e0bffc17 	ldw	r2,-16(fp)
2008129c:	10c00015 	stw	r3,0(r2)
                    *pbitstream = ((uint8_t*) *pbitstream) + 1;
200812a0:	e0bffd17 	ldw	r2,-12(fp)
200812a4:	10800017 	ldw	r2,0(r2)
200812a8:	10c00044 	addi	r3,r2,1
200812ac:	e0bffd17 	ldw	r2,-12(fp)
200812b0:	10c00015 	stw	r3,0(r2)
                }
            }
        }
    }
    *pbitcount &= 7; //the resulting *pbitcount should be between 0 and 7
200812b4:	e0bffe17 	ldw	r2,-8(fp)
200812b8:	10800017 	ldw	r2,0(r2)
200812bc:	10c001cc 	andi	r3,r2,7
200812c0:	e0bffe17 	ldw	r2,-8(fp)
200812c4:	10c00015 	stw	r3,0(r2)
}
200812c8:	e037883a 	mov	sp,fp
200812cc:	df000017 	ldw	fp,0(sp)
200812d0:	dec00104 	addi	sp,sp,4
200812d4:	f800283a 	ret

200812d8 <input_DC>:
//extract num bits from the buffer and returns them
#define INPUT_BITS(buffer, num) (buffer) >> (32 - (num))

//DC decode function
huff_input_t input_DC(uint32_t bitbuffer)
{
200812d8:	defffb04 	addi	sp,sp,-20
200812dc:	df000415 	stw	fp,16(sp)
200812e0:	df000404 	addi	fp,sp,16
200812e4:	e13fff15 	stw	r4,-4(fp)
    huff_input_t ib;
    uint8_t size = INPUT_BITS(bitbuffer, 4);
200812e8:	e0bfff17 	ldw	r2,-4(fp)
200812ec:	1004d73a 	srli	r2,r2,28
200812f0:	e0bffc05 	stb	r2,-16(fp)
    if(size == 0){
200812f4:	e0bffc03 	ldbu	r2,-16(fp)
200812f8:	1000041e 	bne	r2,zero,2008130c <input_DC+0x34>
        ib.e = 0;
200812fc:	e03ffe0d 	sth	zero,-8(fp)
        ib.bits = 4;
20081300:	00800104 	movi	r2,4
20081304:	e0bffd85 	stb	r2,-10(fp)
20081308:	00002106 	br	20081390 <input_DC+0xb8>
    }
    else{
        bitbuffer <<= 4;
2008130c:	e0bfff17 	ldw	r2,-4(fp)
20081310:	1004913a 	slli	r2,r2,4
20081314:	e0bfff15 	stw	r2,-4(fp)
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
20081318:	e0bffc03 	ldbu	r2,-16(fp)
2008131c:	00c00804 	movi	r3,32
20081320:	1885c83a 	sub	r2,r3,r2
20081324:	e0ffff17 	ldw	r3,-4(fp)
20081328:	1886d83a 	srl	r3,r3,r2
2008132c:	e0bffc03 	ldbu	r2,-16(fp)
20081330:	10bfffc4 	addi	r2,r2,-1
20081334:	1884d83a 	srl	r2,r3,r2
20081338:	10000c1e 	bne	r2,zero,2008136c <input_DC+0x94>
2008133c:	e0bffc03 	ldbu	r2,-16(fp)
20081340:	00c00804 	movi	r3,32
20081344:	1885c83a 	sub	r2,r3,r2
20081348:	e0ffff17 	ldw	r3,-4(fp)
2008134c:	1884d83a 	srl	r2,r3,r2
20081350:	1009883a 	mov	r4,r2
20081354:	e0bffc03 	ldbu	r2,-16(fp)
20081358:	00ffffc4 	movi	r3,-1
2008135c:	1884983a 	sll	r2,r3,r2
20081360:	2085883a 	add	r2,r4,r2
20081364:	10800044 	addi	r2,r2,1
20081368:	00000506 	br	20081380 <input_DC+0xa8>
2008136c:	e0bffc03 	ldbu	r2,-16(fp)
20081370:	00c00804 	movi	r3,32
20081374:	1885c83a 	sub	r2,r3,r2
20081378:	e0ffff17 	ldw	r3,-4(fp)
2008137c:	1884d83a 	srl	r2,r3,r2
20081380:	e0bffe0d 	sth	r2,-8(fp)
        ib.bits = size + 4;
20081384:	e0bffc03 	ldbu	r2,-16(fp)
20081388:	10800104 	addi	r2,r2,4
2008138c:	e0bffd85 	stb	r2,-10(fp)
    }
    return ib;
20081390:	e0bffd8b 	ldhu	r2,-10(fp)
20081394:	e0bffc8d 	sth	r2,-14(fp)
20081398:	e0bffe0b 	ldhu	r2,-8(fp)
2008139c:	e0bffd0d 	sth	r2,-12(fp)
200813a0:	0005883a 	mov	r2,zero
200813a4:	e0fffc8b 	ldhu	r3,-14(fp)
200813a8:	18ffffcc 	andi	r3,r3,65535
200813ac:	10bfffec 	andhi	r2,r2,65535
200813b0:	10c4b03a 	or	r2,r2,r3
200813b4:	e0fffd0b 	ldhu	r3,-12(fp)
200813b8:	1806943a 	slli	r3,r3,16
200813bc:	10bfffcc 	andi	r2,r2,65535
200813c0:	10c4b03a 	or	r2,r2,r3
}
200813c4:	e037883a 	mov	sp,fp
200813c8:	df000017 	ldw	fp,0(sp)
200813cc:	dec00104 	addi	sp,sp,4
200813d0:	f800283a 	ret

200813d4 <input_AC>:

//AC decode function
huff_input_t input_AC(uint32_t bitbuffer)
{
200813d4:	defffb04 	addi	sp,sp,-20
200813d8:	df000415 	stw	fp,16(sp)
200813dc:	df000404 	addi	fp,sp,16
200813e0:	e13fff15 	stw	r4,-4(fp)
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
200813e4:	e0bfff17 	ldw	r2,-4(fp)
200813e8:	1004d73a 	srli	r2,r2,28
200813ec:	e0bffdc5 	stb	r2,-9(fp)
    bitbuffer <<= 4;
200813f0:	e0bfff17 	ldw	r2,-4(fp)
200813f4:	1004913a 	slli	r2,r2,4
200813f8:	e0bfff15 	stw	r2,-4(fp)
    size  = INPUT_BITS(bitbuffer, 4);
200813fc:	e0bfff17 	ldw	r2,-4(fp)
20081400:	1004d73a 	srli	r2,r2,28
20081404:	e0bffc05 	stb	r2,-16(fp)
    if(size == 0) {
20081408:	e0bffc03 	ldbu	r2,-16(fp)
2008140c:	1000041e 	bne	r2,zero,20081420 <input_AC+0x4c>
        //return a value of 0. Notice this is ok size if size == 0, then it's either a END or ZRL,
        //and if size > 0, the amplitude cannot be 0.
        ib.e = 0;
20081410:	e03ffe0d 	sth	zero,-8(fp)
        ib.bits = 8;
20081414:	00800204 	movi	r2,8
20081418:	e0bffd85 	stb	r2,-10(fp)
2008141c:	00002106 	br	200814a4 <input_AC+0xd0>
    }
    else{
        bitbuffer <<= 4;
20081420:	e0bfff17 	ldw	r2,-4(fp)
20081424:	1004913a 	slli	r2,r2,4
20081428:	e0bfff15 	stw	r2,-4(fp)
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
2008142c:	e0bffc03 	ldbu	r2,-16(fp)
20081430:	00c00804 	movi	r3,32
20081434:	1885c83a 	sub	r2,r3,r2
20081438:	e0ffff17 	ldw	r3,-4(fp)
2008143c:	1886d83a 	srl	r3,r3,r2
20081440:	e0bffc03 	ldbu	r2,-16(fp)
20081444:	10bfffc4 	addi	r2,r2,-1
20081448:	1884d83a 	srl	r2,r3,r2
2008144c:	10000c1e 	bne	r2,zero,20081480 <input_AC+0xac>
20081450:	e0bffc03 	ldbu	r2,-16(fp)
20081454:	00c00804 	movi	r3,32
20081458:	1885c83a 	sub	r2,r3,r2
2008145c:	e0ffff17 	ldw	r3,-4(fp)
20081460:	1884d83a 	srl	r2,r3,r2
20081464:	1009883a 	mov	r4,r2
20081468:	e0bffc03 	ldbu	r2,-16(fp)
2008146c:	00ffffc4 	movi	r3,-1
20081470:	1884983a 	sll	r2,r3,r2
20081474:	2085883a 	add	r2,r4,r2
20081478:	10800044 	addi	r2,r2,1
2008147c:	00000506 	br	20081494 <input_AC+0xc0>
20081480:	e0bffc03 	ldbu	r2,-16(fp)
20081484:	00c00804 	movi	r3,32
20081488:	1885c83a 	sub	r2,r3,r2
2008148c:	e0ffff17 	ldw	r3,-4(fp)
20081490:	1884d83a 	srl	r2,r3,r2
20081494:	e0bffe0d 	sth	r2,-8(fp)
        ib.bits = size + 8;
20081498:	e0bffc03 	ldbu	r2,-16(fp)
2008149c:	10800204 	addi	r2,r2,8
200814a0:	e0bffd85 	stb	r2,-10(fp)
    }
    return ib;
200814a4:	e0bffd8b 	ldhu	r2,-10(fp)
200814a8:	e0bffc8d 	sth	r2,-14(fp)
200814ac:	e0bffe0b 	ldhu	r2,-8(fp)
200814b0:	e0bffd0d 	sth	r2,-12(fp)
200814b4:	0005883a 	mov	r2,zero
200814b8:	e0fffc8b 	ldhu	r3,-14(fp)
200814bc:	18ffffcc 	andi	r3,r3,65535
200814c0:	10bfffec 	andhi	r2,r2,65535
200814c4:	10c4b03a 	or	r2,r2,r3
200814c8:	e0fffd0b 	ldhu	r3,-12(fp)
200814cc:	1806943a 	slli	r3,r3,16
200814d0:	10bfffcc 	andi	r2,r2,65535
200814d4:	10c4b03a 	or	r2,r2,r3
}
200814d8:	e037883a 	mov	sp,fp
200814dc:	df000017 	ldw	fp,0(sp)
200814e0:	dec00104 	addi	sp,sp,4
200814e4:	f800283a 	ret

200814e8 <mm_to_st_done>:

bool init = FALSE;
ece423_video_display *disp = (void *)0;

static void mm_to_st_done (void *context)
{
200814e8:	defffe04 	addi	sp,sp,-8
200814ec:	df000115 	stw	fp,4(sp)
200814f0:	df000104 	addi	fp,sp,4
200814f4:	e13fff15 	stw	r4,-4(fp)
	mm_to_st_complete = 1;
200814f8:	00800044 	movi	r2,1
200814fc:	d0a01415 	stw	r2,-32688(gp)
}
20081500:	e037883a 	mov	sp,fp
20081504:	df000017 	ldw	fp,0(sp)
20081508:	dec00104 	addi	sp,sp,4
2008150c:	f800283a 	ret

20081510 <st_to_mm_done>:

static void st_to_mm_done (void *context)
{
20081510:	defffe04 	addi	sp,sp,-8
20081514:	df000115 	stw	fp,4(sp)
20081518:	df000104 	addi	fp,sp,4
2008151c:	e13fff15 	stw	r4,-4(fp)
	st_to_mm_complete = 1;
20081520:	00800044 	movi	r2,1
20081524:	d0a01515 	stw	r2,-32684(gp)
}
20081528:	e037883a 	mov	sp,fp
2008152c:	df000017 	ldw	fp,0(sp)
20081530:	dec00104 	addi	sp,sp,4
20081534:	f800283a 	ret

20081538 <mjpeg423_decode>:

//main decoder function
void mjpeg423_decode(const char* filename_in, FAT_HANDLE sd_fat_handle)
{
20081538:	deffc804 	addi	sp,sp,-224
2008153c:	dfc03715 	stw	ra,220(sp)
20081540:	df003615 	stw	fp,216(sp)
20081544:	dc003515 	stw	r16,212(sp)
20081548:	df003604 	addi	fp,sp,216
2008154c:	e13ffd15 	stw	r4,-12(fp)
20081550:	e17ffe15 	stw	r5,-8(fp)
    uint32_t file_header[5], frame_header[4];

    //file streams(changed to fat handle)
    FAT_FILE_HANDLE file_in;

    mm_to_st_desc = malloc(sizeof(alt_msgdma_standard_descriptor));//(alt_msgdma_standard_descriptor*) memalign(32,
20081554:	01000404 	movi	r4,16
20081558:	008b5500 	call	2008b550 <malloc>
2008155c:	d0a01815 	stw	r2,-32672(gp)
        //3 * sizeof(alt_msgdma_standard_descriptor));
    st_to_mm_desc = malloc(sizeof(alt_msgdma_standard_descriptor));//(alt_msgdma_standard_descriptor*) memalign(32,
20081560:	01000404 	movi	r4,16
20081564:	008b5500 	call	2008b550 <malloc>
20081568:	d0a01b15 	stw	r2,-32660(gp)
        //3 * sizeof(alt_msgdma_standard_descriptor));

    mm_to_st_dma_dev = alt_msgdma_open(TO_IDCT_HWACEL_CSR_NAME);
2008156c:	01000034 	movhi	r4,0
20081570:	21000704 	addi	r4,r4,28
20081574:	009cbb80 	call	2009cbb8 <alt_msgdma_open>
20081578:	d0a01915 	stw	r2,-32668(gp)
    st_to_mm_dma_dev = alt_msgdma_open(FROM_IDCT_HWACEL_CSR_NAME);
2008157c:	01000034 	movhi	r4,0
20081580:	21000d04 	addi	r4,r4,52
20081584:	009cbb80 	call	2009cbb8 <alt_msgdma_open>
20081588:	d0a01a15 	stw	r2,-32664(gp)

    if((file_in = Fat_FileOpen(sd_fat_handle, filename_in)) == NULL) error_and_exit("cannot open input file");
2008158c:	e13ffe17 	ldw	r4,-8(fp)
20081590:	e17ffd17 	ldw	r5,-12(fp)
20081594:	0082cb40 	call	20082cb4 <Fat_FileOpen>
20081598:	e0bfd715 	stw	r2,-164(fp)
2008159c:	e0bfd717 	ldw	r2,-164(fp)
200815a0:	1000031e 	bne	r2,zero,200815b0 <mjpeg423_decode+0x78>
200815a4:	01000034 	movhi	r4,0
200815a8:	21001404 	addi	r4,r4,80
200815ac:	008028c0 	call	2008028c <error_and_exit>
    // char* filename_out = malloc(strlen(filenamebase_out)+1);
    // strcpy(filename_out, filenamebase_out);

    //read header
    if(!Fat_FileRead(file_in, file_header, 5*sizeof(uint32_t))) error_and_exit("cannot read input file");
200815b0:	e0bff404 	addi	r2,fp,-48
200815b4:	e13fd717 	ldw	r4,-164(fp)
200815b8:	100b883a 	mov	r5,r2
200815bc:	01800504 	movi	r6,20
200815c0:	0082f180 	call	20082f18 <Fat_FileRead>
200815c4:	1000031e 	bne	r2,zero,200815d4 <mjpeg423_decode+0x9c>
200815c8:	01000034 	movhi	r4,0
200815cc:	21001a04 	addi	r4,r4,104
200815d0:	008028c0 	call	2008028c <error_and_exit>
    num_frames      = file_header[0];
200815d4:	e0bff417 	ldw	r2,-48(fp)
200815d8:	e0bfd815 	stw	r2,-160(fp)
    w_size          = file_header[1];
200815dc:	e0bff517 	ldw	r2,-44(fp)
200815e0:	e0bfd915 	stw	r2,-156(fp)
    h_size          = file_header[2];
200815e4:	e0bff617 	ldw	r2,-40(fp)
200815e8:	e0bfda15 	stw	r2,-152(fp)
    num_iframes     = file_header[3];
200815ec:	e0bff717 	ldw	r2,-36(fp)
200815f0:	e0bfdb15 	stw	r2,-148(fp)
    payload_size    = file_header[4];
200815f4:	e0bff817 	ldw	r2,-32(fp)
200815f8:	e0bfdc15 	stw	r2,-144(fp)

    DEBUG_PRINT_ARG("Decoder start. Num frames #%u\n", num_frames)
200815fc:	01000034 	movhi	r4,0
20081600:	21002004 	addi	r4,r4,128
20081604:	e17fd817 	ldw	r5,-160(fp)
20081608:	008c0240 	call	2008c024 <printf>
    DEBUG_PRINT_ARG("Width %u\n", w_size)
2008160c:	01000034 	movhi	r4,0
20081610:	21002804 	addi	r4,r4,160
20081614:	e17fd917 	ldw	r5,-156(fp)
20081618:	008c0240 	call	2008c024 <printf>
    DEBUG_PRINT_ARG("Height %u\n", h_size)
2008161c:	01000034 	movhi	r4,0
20081620:	21002b04 	addi	r4,r4,172
20081624:	e17fda17 	ldw	r5,-152(fp)
20081628:	008c0240 	call	2008c024 <printf>
    DEBUG_PRINT_ARG("Num i frames %u\n", num_iframes)
2008162c:	01000034 	movhi	r4,0
20081630:	21002e04 	addi	r4,r4,184
20081634:	e17fdb17 	ldw	r5,-148(fp)
20081638:	008c0240 	call	2008c024 <printf>

    int hCb_size = h_size/8;           //number of chrominance blocks
2008163c:	e0bfda17 	ldw	r2,-152(fp)
20081640:	1004d0fa 	srli	r2,r2,3
20081644:	e0bfdd15 	stw	r2,-140(fp)
    int wCb_size = w_size/8;
20081648:	e0bfd917 	ldw	r2,-156(fp)
2008164c:	1004d0fa 	srli	r2,r2,3
20081650:	e0bfde15 	stw	r2,-136(fp)
    int hYb_size = h_size/8;           //number of luminance blocks. Same as chrominance in the sample app
20081654:	e0bfda17 	ldw	r2,-152(fp)
20081658:	1004d0fa 	srli	r2,r2,3
2008165c:	e0bfdf15 	stw	r2,-132(fp)
    int wYb_size = w_size/8;
20081660:	e0bfd917 	ldw	r2,-156(fp)
20081664:	1004d0fa 	srli	r2,r2,3
20081668:	e0bfe015 	stw	r2,-128(fp)

    //trailer structure
    iframe_trailer_t* trailer = malloc(sizeof(iframe_trailer_t)*num_frames);
2008166c:	e0bfd817 	ldw	r2,-160(fp)
20081670:	100490fa 	slli	r2,r2,3
20081674:	1009883a 	mov	r4,r2
20081678:	008b5500 	call	2008b550 <malloc>
2008167c:	e0bfe115 	stw	r2,-124(fp)

    //main data structures. See lab manual for explanation
    rgb_pixel_t* rgbblock;
    if((rgbblock = malloc(w_size*h_size*sizeof(rgb_pixel_t)))==NULL) error_and_exit("cannot allocate rgbblock");
20081680:	e0ffd917 	ldw	r3,-156(fp)
20081684:	e0bfda17 	ldw	r2,-152(fp)
20081688:	1885383a 	mul	r2,r3,r2
2008168c:	1085883a 	add	r2,r2,r2
20081690:	1085883a 	add	r2,r2,r2
20081694:	1009883a 	mov	r4,r2
20081698:	008b5500 	call	2008b550 <malloc>
2008169c:	e0bfe215 	stw	r2,-120(fp)
200816a0:	e0bfe217 	ldw	r2,-120(fp)
200816a4:	1000031e 	bne	r2,zero,200816b4 <mjpeg423_decode+0x17c>
200816a8:	01000034 	movhi	r4,0
200816ac:	21003304 	addi	r4,r4,204
200816b0:	008028c0 	call	2008028c <error_and_exit>
    color_block_t* Yblock;
    if((Yblock = malloc(hYb_size * wYb_size * 64))==NULL) error_and_exit("cannot allocate Yblock");
200816b4:	e0ffdf17 	ldw	r3,-132(fp)
200816b8:	e0bfe017 	ldw	r2,-128(fp)
200816bc:	1885383a 	mul	r2,r3,r2
200816c0:	100491ba 	slli	r2,r2,6
200816c4:	1009883a 	mov	r4,r2
200816c8:	008b5500 	call	2008b550 <malloc>
200816cc:	e0bfe315 	stw	r2,-116(fp)
200816d0:	e0bfe317 	ldw	r2,-116(fp)
200816d4:	1000031e 	bne	r2,zero,200816e4 <mjpeg423_decode+0x1ac>
200816d8:	01000034 	movhi	r4,0
200816dc:	21003a04 	addi	r4,r4,232
200816e0:	008028c0 	call	2008028c <error_and_exit>
    color_block_t* Cbblock;
    if((Cbblock = malloc(hCb_size * wCb_size * 64))==NULL) error_and_exit("cannot allocate Cbblock");
200816e4:	e0ffdd17 	ldw	r3,-140(fp)
200816e8:	e0bfde17 	ldw	r2,-136(fp)
200816ec:	1885383a 	mul	r2,r3,r2
200816f0:	100491ba 	slli	r2,r2,6
200816f4:	1009883a 	mov	r4,r2
200816f8:	008b5500 	call	2008b550 <malloc>
200816fc:	e0bfe415 	stw	r2,-112(fp)
20081700:	e0bfe417 	ldw	r2,-112(fp)
20081704:	1000031e 	bne	r2,zero,20081714 <mjpeg423_decode+0x1dc>
20081708:	01000034 	movhi	r4,0
2008170c:	21004004 	addi	r4,r4,256
20081710:	008028c0 	call	2008028c <error_and_exit>
    color_block_t* Crblock;
    if((Crblock = malloc(hCb_size * wCb_size * 64))==NULL) error_and_exit("cannot allocate Crblock");;
20081714:	e0ffdd17 	ldw	r3,-140(fp)
20081718:	e0bfde17 	ldw	r2,-136(fp)
2008171c:	1885383a 	mul	r2,r3,r2
20081720:	100491ba 	slli	r2,r2,6
20081724:	1009883a 	mov	r4,r2
20081728:	008b5500 	call	2008b550 <malloc>
2008172c:	e0bfe515 	stw	r2,-108(fp)
20081730:	e0bfe517 	ldw	r2,-108(fp)
20081734:	1000031e 	bne	r2,zero,20081744 <mjpeg423_decode+0x20c>
20081738:	01000034 	movhi	r4,0
2008173c:	21004604 	addi	r4,r4,280
20081740:	008028c0 	call	2008028c <error_and_exit>
    dct_block_t* YDCAC;
    if((YDCAC = malloc(hYb_size * wYb_size * 64 * sizeof(DCTELEM)))==NULL) error_and_exit("cannot allocate YDCAC");
20081744:	e0ffdf17 	ldw	r3,-132(fp)
20081748:	e0bfe017 	ldw	r2,-128(fp)
2008174c:	1885383a 	mul	r2,r3,r2
20081750:	100491fa 	slli	r2,r2,7
20081754:	1009883a 	mov	r4,r2
20081758:	008b5500 	call	2008b550 <malloc>
2008175c:	e0bfe615 	stw	r2,-104(fp)
20081760:	e0bfe617 	ldw	r2,-104(fp)
20081764:	1000031e 	bne	r2,zero,20081774 <mjpeg423_decode+0x23c>
20081768:	01000034 	movhi	r4,0
2008176c:	21004c04 	addi	r4,r4,304
20081770:	008028c0 	call	2008028c <error_and_exit>
    dct_block_t* CbDCAC;
    if((CbDCAC = malloc(hCb_size * wCb_size * 64 * sizeof(DCTELEM)))==NULL) error_and_exit("cannot allocate CbDCAC");
20081774:	e0ffdd17 	ldw	r3,-140(fp)
20081778:	e0bfde17 	ldw	r2,-136(fp)
2008177c:	1885383a 	mul	r2,r3,r2
20081780:	100491fa 	slli	r2,r2,7
20081784:	1009883a 	mov	r4,r2
20081788:	008b5500 	call	2008b550 <malloc>
2008178c:	e0bfe715 	stw	r2,-100(fp)
20081790:	e0bfe717 	ldw	r2,-100(fp)
20081794:	1000031e 	bne	r2,zero,200817a4 <mjpeg423_decode+0x26c>
20081798:	01000034 	movhi	r4,0
2008179c:	21005204 	addi	r4,r4,328
200817a0:	008028c0 	call	2008028c <error_and_exit>
    dct_block_t* CrDCAC;
    if((CrDCAC = malloc(hCb_size * wCb_size * 64 * sizeof(DCTELEM)))==NULL) error_and_exit("cannot allocate CrDCAC");
200817a4:	e0ffdd17 	ldw	r3,-140(fp)
200817a8:	e0bfde17 	ldw	r2,-136(fp)
200817ac:	1885383a 	mul	r2,r3,r2
200817b0:	100491fa 	slli	r2,r2,7
200817b4:	1009883a 	mov	r4,r2
200817b8:	008b5500 	call	2008b550 <malloc>
200817bc:	e0bfe815 	stw	r2,-96(fp)
200817c0:	e0bfe817 	ldw	r2,-96(fp)
200817c4:	1000031e 	bne	r2,zero,200817d4 <mjpeg423_decode+0x29c>
200817c8:	01000034 	movhi	r4,0
200817cc:	21005804 	addi	r4,r4,352
200817d0:	008028c0 	call	2008028c <error_and_exit>
    //Ybitstream is assigned a size sufficient to hold all bistreams
    //the bitstream is then read from the file into Ybitstream
    //the remaining pointers simply point to the beginning of the Cb and Cr streams within Ybitstream
    uint8_t* Ybitstream;
    if((Ybitstream = malloc(hYb_size * wYb_size * 64 * sizeof(DCTELEM) + 2 * hCb_size * wCb_size * 64 * sizeof(DCTELEM)))==NULL) error_and_exit("cannot allocate bitstream");
200817d4:	e0ffdf17 	ldw	r3,-132(fp)
200817d8:	e0bfe017 	ldw	r2,-128(fp)
200817dc:	1885383a 	mul	r2,r3,r2
200817e0:	100491fa 	slli	r2,r2,7
200817e4:	1009883a 	mov	r4,r2
200817e8:	e0bfdd17 	ldw	r2,-140(fp)
200817ec:	1006923a 	slli	r3,r2,8
200817f0:	e0bfde17 	ldw	r2,-136(fp)
200817f4:	1885383a 	mul	r2,r3,r2
200817f8:	2085883a 	add	r2,r4,r2
200817fc:	1009883a 	mov	r4,r2
20081800:	008b5500 	call	2008b550 <malloc>
20081804:	e0bfe915 	stw	r2,-92(fp)
20081808:	e0bfe917 	ldw	r2,-92(fp)
2008180c:	1000031e 	bne	r2,zero,2008181c <mjpeg423_decode+0x2e4>
20081810:	01000034 	movhi	r4,0
20081814:	21005e04 	addi	r4,r4,376
20081818:	008028c0 	call	2008028c <error_and_exit>
    uint8_t* Cbbitstream;
    uint8_t* Crbitstream;

    //read trailer. Note: the trailer information is not used in the sample decoder app
    //set file to beginning of trailer
    if(!Fat_FileSeek(file_in,  SEEK_SET, 5 * sizeof(uint32_t) + payload_size)) error_and_exit("cannot seek into file");
2008181c:	e0bfdc17 	ldw	r2,-144(fp)
20081820:	10800504 	addi	r2,r2,20
20081824:	e13fd717 	ldw	r4,-164(fp)
20081828:	000b883a 	mov	r5,zero
2008182c:	100d883a 	mov	r6,r2
20081830:	00834940 	call	20083494 <Fat_FileSeek>
20081834:	1000031e 	bne	r2,zero,20081844 <mjpeg423_decode+0x30c>
20081838:	01000034 	movhi	r4,0
2008183c:	21006504 	addi	r4,r4,404
20081840:	008028c0 	call	2008028c <error_and_exit>
    for(int count = 0; count < num_iframes; count++){
20081844:	e03fcd15 	stw	zero,-204(fp)
20081848:	00002e06 	br	20081904 <mjpeg423_decode+0x3cc>
        if(!Fat_FileRead(file_in,&(trailer[count].frame_index), sizeof(uint32_t))) error_and_exit("cannot read input file");
2008184c:	e0bfcd17 	ldw	r2,-204(fp)
20081850:	100490fa 	slli	r2,r2,3
20081854:	e0ffe117 	ldw	r3,-124(fp)
20081858:	1885883a 	add	r2,r3,r2
2008185c:	e13fd717 	ldw	r4,-164(fp)
20081860:	100b883a 	mov	r5,r2
20081864:	01800104 	movi	r6,4
20081868:	0082f180 	call	20082f18 <Fat_FileRead>
2008186c:	1000031e 	bne	r2,zero,2008187c <mjpeg423_decode+0x344>
20081870:	01000034 	movhi	r4,0
20081874:	21001a04 	addi	r4,r4,104
20081878:	008028c0 	call	2008028c <error_and_exit>
        if(!Fat_FileRead(file_in,&(trailer[count].frame_position), sizeof(uint32_t))) error_and_exit("cannot read input file");
2008187c:	e0bfcd17 	ldw	r2,-204(fp)
20081880:	100490fa 	slli	r2,r2,3
20081884:	e0ffe117 	ldw	r3,-124(fp)
20081888:	1885883a 	add	r2,r3,r2
2008188c:	10800104 	addi	r2,r2,4
20081890:	e13fd717 	ldw	r4,-164(fp)
20081894:	100b883a 	mov	r5,r2
20081898:	01800104 	movi	r6,4
2008189c:	0082f180 	call	20082f18 <Fat_FileRead>
200818a0:	1000031e 	bne	r2,zero,200818b0 <mjpeg423_decode+0x378>
200818a4:	01000034 	movhi	r4,0
200818a8:	21001a04 	addi	r4,r4,104
200818ac:	008028c0 	call	2008028c <error_and_exit>
        DEBUG_PRINT_ARG("I frame index %u, ", trailer[count].frame_index)
200818b0:	e0bfcd17 	ldw	r2,-204(fp)
200818b4:	100490fa 	slli	r2,r2,3
200818b8:	e0ffe117 	ldw	r3,-124(fp)
200818bc:	1885883a 	add	r2,r3,r2
200818c0:	10800017 	ldw	r2,0(r2)
200818c4:	01000034 	movhi	r4,0
200818c8:	21006b04 	addi	r4,r4,428
200818cc:	100b883a 	mov	r5,r2
200818d0:	008c0240 	call	2008c024 <printf>
        DEBUG_PRINT_ARG("position %u\n", trailer[count].frame_position)
200818d4:	e0bfcd17 	ldw	r2,-204(fp)
200818d8:	100490fa 	slli	r2,r2,3
200818dc:	e0ffe117 	ldw	r3,-124(fp)
200818e0:	1885883a 	add	r2,r3,r2
200818e4:	10800117 	ldw	r2,4(r2)
200818e8:	01000034 	movhi	r4,0
200818ec:	21007004 	addi	r4,r4,448
200818f0:	100b883a 	mov	r5,r2
200818f4:	008c0240 	call	2008c024 <printf>
    uint8_t* Crbitstream;

    //read trailer. Note: the trailer information is not used in the sample decoder app
    //set file to beginning of trailer
    if(!Fat_FileSeek(file_in,  SEEK_SET, 5 * sizeof(uint32_t) + payload_size)) error_and_exit("cannot seek into file");
    for(int count = 0; count < num_iframes; count++){
200818f8:	e0bfcd17 	ldw	r2,-204(fp)
200818fc:	10800044 	addi	r2,r2,1
20081900:	e0bfcd15 	stw	r2,-204(fp)
20081904:	e0ffcd17 	ldw	r3,-204(fp)
20081908:	e0bfdb17 	ldw	r2,-148(fp)
2008190c:	18bfcf36 	bltu	r3,r2,2008184c <__flash_rwdata_start+0xfffe2c78>
        if(!Fat_FileRead(file_in,&(trailer[count].frame_position), sizeof(uint32_t))) error_and_exit("cannot read input file");
        DEBUG_PRINT_ARG("I frame index %u, ", trailer[count].frame_index)
        DEBUG_PRINT_ARG("position %u\n", trailer[count].frame_position)
    }
    //set it back to beginning of payload
    if(!Fat_FileSeek(file_in, SEEK_SET, 5 * sizeof(uint32_t))) error_and_exit("cannot seek into file");
20081910:	e13fd717 	ldw	r4,-164(fp)
20081914:	000b883a 	mov	r5,zero
20081918:	01800504 	movi	r6,20
2008191c:	00834940 	call	20083494 <Fat_FileSeek>
20081920:	1000031e 	bne	r2,zero,20081930 <mjpeg423_decode+0x3f8>
20081924:	01000034 	movhi	r4,0
20081928:	21006504 	addi	r4,r4,404
2008192c:	008028c0 	call	2008028c <error_and_exit>
    // 	mm_to_st_dma_dev,
    // 	mm_to_st_done,
    // 	ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK,
    // 	0);

    alt_msgdma_register_callback(
20081930:	d0a01a17 	ldw	r2,-32664(gp)
20081934:	1009883a 	mov	r4,r2
20081938:	01480234 	movhi	r5,8200
2008193c:	29454404 	addi	r5,r5,5392
20081940:	01800404 	movi	r6,16
20081944:	000f883a 	mov	r7,zero
20081948:	009cd7c0 	call	2009cd7c <alt_msgdma_register_callback>
    	st_to_mm_done,
    	ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK,
    	0);

    //encode and write frames
    for(int frame_index = 0; frame_index < num_frames; frame_index ++){
2008194c:	e03fce15 	stw	zero,-200(fp)
20081950:	00020906 	br	20082178 <mjpeg423_decode+0xc40>
        DEBUG_PRINT_ARG("\nFrame #%u\n",frame_index)
20081954:	01000034 	movhi	r4,0
20081958:	21007404 	addi	r4,r4,464
2008195c:	e17fce17 	ldw	r5,-200(fp)
20081960:	008c0240 	call	2008c024 <printf>

        //read frame payload
        if(!Fat_FileRead(file_in, frame_header, 4*sizeof(uint32_t))) error_and_exit("cannot read input file");
20081964:	e0bff904 	addi	r2,fp,-28
20081968:	e13fd717 	ldw	r4,-164(fp)
2008196c:	100b883a 	mov	r5,r2
20081970:	01800404 	movi	r6,16
20081974:	0082f180 	call	20082f18 <Fat_FileRead>
20081978:	1000031e 	bne	r2,zero,20081988 <mjpeg423_decode+0x450>
2008197c:	01000034 	movhi	r4,0
20081980:	21001a04 	addi	r4,r4,104
20081984:	008028c0 	call	2008028c <error_and_exit>
        frame_size  = frame_header[0];
20081988:	e0bff917 	ldw	r2,-28(fp)
2008198c:	e0bfea15 	stw	r2,-88(fp)
        frame_type  = frame_header[1];
20081990:	e0bffa17 	ldw	r2,-24(fp)
20081994:	e0bfeb15 	stw	r2,-84(fp)
        Ysize       = frame_header[2];
20081998:	e0bffb17 	ldw	r2,-20(fp)
2008199c:	e0bfec15 	stw	r2,-80(fp)
        Cbsize      = frame_header[3];
200819a0:	e0bffc17 	ldw	r2,-16(fp)
200819a4:	e0bfed15 	stw	r2,-76(fp)

        DEBUG_PRINT_ARG("Frame_size %u\n",frame_size)
200819a8:	01000034 	movhi	r4,0
200819ac:	21007704 	addi	r4,r4,476
200819b0:	e17fea17 	ldw	r5,-88(fp)
200819b4:	008c0240 	call	2008c024 <printf>
        DEBUG_PRINT_ARG("Frame_type %u\n",frame_type)
200819b8:	01000034 	movhi	r4,0
200819bc:	21007b04 	addi	r4,r4,492
200819c0:	e17feb17 	ldw	r5,-84(fp)
200819c4:	008c0240 	call	2008c024 <printf>

        if(!Fat_FileRead(file_in, Ybitstream, frame_size - 4 * sizeof(uint32_t)))
200819c8:	e0bfea17 	ldw	r2,-88(fp)
200819cc:	10bffc04 	addi	r2,r2,-16
200819d0:	e13fd717 	ldw	r4,-164(fp)
200819d4:	e17fe917 	ldw	r5,-92(fp)
200819d8:	100d883a 	mov	r6,r2
200819dc:	0082f180 	call	20082f18 <Fat_FileRead>
200819e0:	1000031e 	bne	r2,zero,200819f0 <mjpeg423_decode+0x4b8>
            error_and_exit("cannot read input file");
200819e4:	01000034 	movhi	r4,0
200819e8:	21001a04 	addi	r4,r4,104
200819ec:	008028c0 	call	2008028c <error_and_exit>
        //set the Cb and Cr bitstreams to point to the right location
        Cbbitstream = Ybitstream + Ysize;
200819f0:	e0ffe917 	ldw	r3,-92(fp)
200819f4:	e0bfec17 	ldw	r2,-80(fp)
200819f8:	1885883a 	add	r2,r3,r2
200819fc:	e0bfee15 	stw	r2,-72(fp)
        Crbitstream = Cbbitstream + Cbsize;
20081a00:	e0ffee17 	ldw	r3,-72(fp)
20081a04:	e0bfed17 	ldw	r2,-76(fp)
20081a08:	1885883a 	add	r2,r3,r2
20081a0c:	e0bfef15 	stw	r2,-68(fp)

#ifdef PROFILEING
        if(alt_timestamp_start() != 0) error_and_exit("Can't start timestamp");
#endif
        //lossless decoding
        lossless_decode(hYb_size*wYb_size, Ybitstream, YDCAC, Yquant, frame_type);
20081a10:	e0ffdf17 	ldw	r3,-132(fp)
20081a14:	e0bfe017 	ldw	r2,-128(fp)
20081a18:	1887383a 	mul	r3,r3,r2
20081a1c:	e0bfeb17 	ldw	r2,-84(fp)
20081a20:	d8800015 	stw	r2,0(sp)
20081a24:	1809883a 	mov	r4,r3
20081a28:	e17fe917 	ldw	r5,-92(fp)
20081a2c:	e1bfe617 	ldw	r6,-104(fp)
20081a30:	01c00034 	movhi	r7,0
20081a34:	39c2bc04 	addi	r7,r7,2800
20081a38:	0080e080 	call	20080e08 <lossless_decode>
        lossless_decode(hCb_size*wCb_size, Cbbitstream, CbDCAC, Cquant, frame_type);
20081a3c:	e0ffdd17 	ldw	r3,-140(fp)
20081a40:	e0bfde17 	ldw	r2,-136(fp)
20081a44:	1887383a 	mul	r3,r3,r2
20081a48:	e0bfeb17 	ldw	r2,-84(fp)
20081a4c:	d8800015 	stw	r2,0(sp)
20081a50:	1809883a 	mov	r4,r3
20081a54:	e17fee17 	ldw	r5,-72(fp)
20081a58:	e1bfe717 	ldw	r6,-100(fp)
20081a5c:	01c00034 	movhi	r7,0
20081a60:	39c2dc04 	addi	r7,r7,2928
20081a64:	0080e080 	call	20080e08 <lossless_decode>
        lossless_decode(hCb_size*wCb_size, Crbitstream, CrDCAC, Cquant, frame_type);
20081a68:	e0ffdd17 	ldw	r3,-140(fp)
20081a6c:	e0bfde17 	ldw	r2,-136(fp)
20081a70:	1887383a 	mul	r3,r3,r2
20081a74:	e0bfeb17 	ldw	r2,-84(fp)
20081a78:	d8800015 	stw	r2,0(sp)
20081a7c:	1809883a 	mov	r4,r3
20081a80:	e17fef17 	ldw	r5,-68(fp)
20081a84:	e1bfe817 	ldw	r6,-96(fp)
20081a88:	01c00034 	movhi	r7,0
20081a8c:	39c2dc04 	addi	r7,r7,2928
20081a90:	0080e080 	call	20080e08 <lossless_decode>

        //idct
        for(int b = 0; b < hYb_size*wYb_size; b++)
20081a94:	e03fcf15 	stw	zero,-196(fp)
20081a98:	00003006 	br	20081b5c <mjpeg423_decode+0x624>
        {
          alt_dcache_flush_all();
20081a9c:	00995f80 	call	200995f8 <alt_dcache_flush_all>
          //idct(YDCAC[b], Yblock[b]);
          while(0 != alt_msgdma_construct_standard_mm_to_st_descriptor(mm_to_st_dma_dev,
20081aa0:	0001883a 	nop
20081aa4:	d1201917 	ldw	r4,-32668(gp)
20081aa8:	d1601817 	ldw	r5,-32672(gp)
20081aac:	e0bfcf17 	ldw	r2,-196(fp)
          mm_to_st_desc,
          (alt_u32 *) YDCAC[b] , sizeof(uint32_t) * DCT_BLOCK_SIZE,
20081ab0:	100491fa 	slli	r2,r2,7
        //idct
        for(int b = 0; b < hYb_size*wYb_size; b++)
        {
          alt_dcache_flush_all();
          //idct(YDCAC[b], Yblock[b]);
          while(0 != alt_msgdma_construct_standard_mm_to_st_descriptor(mm_to_st_dma_dev,
20081ab4:	e0ffe617 	ldw	r3,-104(fp)
20081ab8:	1887883a 	add	r3,r3,r2
20081abc:	00900004 	movi	r2,16384
20081ac0:	d8800015 	stw	r2,0(sp)
20081ac4:	180d883a 	mov	r6,r3
20081ac8:	01c02004 	movi	r7,128
20081acc:	009bc440 	call	2009bc44 <alt_msgdma_construct_standard_mm_to_st_descriptor>
20081ad0:	103ff41e 	bne	r2,zero,20081aa4 <__flash_rwdata_start+0xfffe2ed0>
          mm_to_st_desc,
          (alt_u32 *) YDCAC[b] , sizeof(uint32_t) * DCT_BLOCK_SIZE,
          DESC_CONTROL));

          while (alt_msgdma_standard_descriptor_sync_transfer(mm_to_st_dma_dev,
20081ad4:	0001883a 	nop
20081ad8:	d0e01917 	ldw	r3,-32668(gp)
20081adc:	d0a01817 	ldw	r2,-32672(gp)
20081ae0:	1809883a 	mov	r4,r3
20081ae4:	100b883a 	mov	r5,r2
20081ae8:	009ce480 	call	2009ce48 <alt_msgdma_standard_descriptor_sync_transfer>
20081aec:	103ffa1e 	bne	r2,zero,20081ad8 <__flash_rwdata_start+0xfffe2f04>
                 != 0);

          // while(!mm_to_st_complete);
          // mm_to_st_complete = 0;

          while(0 != alt_msgdma_construct_standard_st_to_mm_descriptor(st_to_mm_dma_dev,
20081af0:	0001883a 	nop
20081af4:	d1201a17 	ldw	r4,-32664(gp)
20081af8:	d1601b17 	ldw	r5,-32660(gp)
20081afc:	e0bfcf17 	ldw	r2,-196(fp)
          st_to_mm_desc,
          (alt_u32 *) Yblock[b], sizeof(uint32_t) * COLOUR_BLOCK_SIZE,
20081b00:	100491ba 	slli	r2,r2,6
                 != 0);

          // while(!mm_to_st_complete);
          // mm_to_st_complete = 0;

          while(0 != alt_msgdma_construct_standard_st_to_mm_descriptor(st_to_mm_dma_dev,
20081b04:	e0ffe317 	ldw	r3,-116(fp)
20081b08:	1887883a 	add	r3,r3,r2
20081b0c:	00900004 	movi	r2,16384
20081b10:	d8800015 	stw	r2,0(sp)
20081b14:	180d883a 	mov	r6,r3
20081b18:	01c01004 	movi	r7,64
20081b1c:	009bbec0 	call	2009bbec <alt_msgdma_construct_standard_st_to_mm_descriptor>
20081b20:	103ff41e 	bne	r2,zero,20081af4 <__flash_rwdata_start+0xfffe2f20>
          st_to_mm_desc,
          (alt_u32 *) Yblock[b], sizeof(uint32_t) * COLOUR_BLOCK_SIZE,
          DESC_CONTROL));

          while (alt_msgdma_standard_descriptor_async_transfer(st_to_mm_dma_dev,
20081b24:	0001883a 	nop
20081b28:	d0e01a17 	ldw	r3,-32664(gp)
20081b2c:	d0a01b17 	ldw	r2,-32660(gp)
20081b30:	1809883a 	mov	r4,r3
20081b34:	100b883a 	mov	r5,r2
20081b38:	009cdd00 	call	2009cdd0 <alt_msgdma_standard_descriptor_async_transfer>
20081b3c:	103ffa1e 	bne	r2,zero,20081b28 <__flash_rwdata_start+0xfffe2f54>
                 st_to_mm_desc)
                 != 0);

          while(!st_to_mm_complete);
20081b40:	0001883a 	nop
20081b44:	d0a01517 	ldw	r2,-32684(gp)
20081b48:	103ffe26 	beq	r2,zero,20081b44 <__flash_rwdata_start+0xfffe2f70>
          st_to_mm_complete = 0;
20081b4c:	d0201515 	stw	zero,-32684(gp)
        lossless_decode(hYb_size*wYb_size, Ybitstream, YDCAC, Yquant, frame_type);
        lossless_decode(hCb_size*wCb_size, Cbbitstream, CbDCAC, Cquant, frame_type);
        lossless_decode(hCb_size*wCb_size, Crbitstream, CrDCAC, Cquant, frame_type);

        //idct
        for(int b = 0; b < hYb_size*wYb_size; b++)
20081b50:	e0bfcf17 	ldw	r2,-196(fp)
20081b54:	10800044 	addi	r2,r2,1
20081b58:	e0bfcf15 	stw	r2,-196(fp)
20081b5c:	e0ffdf17 	ldw	r3,-132(fp)
20081b60:	e0bfe017 	ldw	r2,-128(fp)
20081b64:	1885383a 	mul	r2,r3,r2
20081b68:	e0ffcf17 	ldw	r3,-196(fp)
20081b6c:	18bfcb16 	blt	r3,r2,20081a9c <__flash_rwdata_start+0xfffe2ec8>

          while(!st_to_mm_complete);
          st_to_mm_complete = 0;
        }

        for(int b = 0; b < hCb_size*wCb_size; b++)
20081b70:	e03fd015 	stw	zero,-192(fp)
20081b74:	00003006 	br	20081c38 <mjpeg423_decode+0x700>
        {
          alt_dcache_flush_all();
20081b78:	00995f80 	call	200995f8 <alt_dcache_flush_all>
          // idct(CbDCAC[b], Cbblock[b]);
          while(0 != alt_msgdma_construct_standard_mm_to_st_descriptor(mm_to_st_dma_dev,
20081b7c:	0001883a 	nop
20081b80:	d1201917 	ldw	r4,-32668(gp)
20081b84:	d1601817 	ldw	r5,-32672(gp)
20081b88:	e0bfd017 	ldw	r2,-192(fp)
          mm_to_st_desc,
          (alt_u32 *) CbDCAC[b] , sizeof(uint32_t) * DCT_BLOCK_SIZE,
20081b8c:	100491fa 	slli	r2,r2,7

        for(int b = 0; b < hCb_size*wCb_size; b++)
        {
          alt_dcache_flush_all();
          // idct(CbDCAC[b], Cbblock[b]);
          while(0 != alt_msgdma_construct_standard_mm_to_st_descriptor(mm_to_st_dma_dev,
20081b90:	e0ffe717 	ldw	r3,-100(fp)
20081b94:	1887883a 	add	r3,r3,r2
20081b98:	00900004 	movi	r2,16384
20081b9c:	d8800015 	stw	r2,0(sp)
20081ba0:	180d883a 	mov	r6,r3
20081ba4:	01c02004 	movi	r7,128
20081ba8:	009bc440 	call	2009bc44 <alt_msgdma_construct_standard_mm_to_st_descriptor>
20081bac:	103ff41e 	bne	r2,zero,20081b80 <__flash_rwdata_start+0xfffe2fac>
          mm_to_st_desc,
          (alt_u32 *) CbDCAC[b] , sizeof(uint32_t) * DCT_BLOCK_SIZE,
          DESC_CONTROL));

          while(0 != alt_msgdma_construct_standard_st_to_mm_descriptor(st_to_mm_dma_dev,
20081bb0:	0001883a 	nop
20081bb4:	d1201a17 	ldw	r4,-32664(gp)
20081bb8:	d1601b17 	ldw	r5,-32660(gp)
20081bbc:	e0bfd017 	ldw	r2,-192(fp)
          st_to_mm_desc,
          (alt_u32 *) Cbblock[b], sizeof(uint32_t) * COLOUR_BLOCK_SIZE,
20081bc0:	100491ba 	slli	r2,r2,6
          while(0 != alt_msgdma_construct_standard_mm_to_st_descriptor(mm_to_st_dma_dev,
          mm_to_st_desc,
          (alt_u32 *) CbDCAC[b] , sizeof(uint32_t) * DCT_BLOCK_SIZE,
          DESC_CONTROL));

          while(0 != alt_msgdma_construct_standard_st_to_mm_descriptor(st_to_mm_dma_dev,
20081bc4:	e0ffe417 	ldw	r3,-112(fp)
20081bc8:	1887883a 	add	r3,r3,r2
20081bcc:	00900004 	movi	r2,16384
20081bd0:	d8800015 	stw	r2,0(sp)
20081bd4:	180d883a 	mov	r6,r3
20081bd8:	01c01004 	movi	r7,64
20081bdc:	009bbec0 	call	2009bbec <alt_msgdma_construct_standard_st_to_mm_descriptor>
20081be0:	103ff41e 	bne	r2,zero,20081bb4 <__flash_rwdata_start+0xfffe2fe0>
          st_to_mm_desc,
          (alt_u32 *) Cbblock[b], sizeof(uint32_t) * COLOUR_BLOCK_SIZE,
          DESC_CONTROL));

					while (alt_msgdma_standard_descriptor_async_transfer(mm_to_st_dma_dev,
20081be4:	0001883a 	nop
20081be8:	d0e01917 	ldw	r3,-32668(gp)
20081bec:	d0a01817 	ldw	r2,-32672(gp)
20081bf0:	1809883a 	mov	r4,r3
20081bf4:	100b883a 	mov	r5,r2
20081bf8:	009cdd00 	call	2009cdd0 <alt_msgdma_standard_descriptor_async_transfer>
20081bfc:	103ffa1e 	bne	r2,zero,20081be8 <__flash_rwdata_start+0xfffe3014>
                 != 0);

          // while(!mm_to_st_complete);
          // mm_to_st_complete = 0;

          while (alt_msgdma_standard_descriptor_async_transfer(st_to_mm_dma_dev,
20081c00:	0001883a 	nop
20081c04:	d0e01a17 	ldw	r3,-32664(gp)
20081c08:	d0a01b17 	ldw	r2,-32660(gp)
20081c0c:	1809883a 	mov	r4,r3
20081c10:	100b883a 	mov	r5,r2
20081c14:	009cdd00 	call	2009cdd0 <alt_msgdma_standard_descriptor_async_transfer>
20081c18:	103ffa1e 	bne	r2,zero,20081c04 <__flash_rwdata_start+0xfffe3030>
                 st_to_mm_desc)
                 != 0);

          while(!st_to_mm_complete);
20081c1c:	0001883a 	nop
20081c20:	d0a01517 	ldw	r2,-32684(gp)
20081c24:	103ffe26 	beq	r2,zero,20081c20 <__flash_rwdata_start+0xfffe304c>
          st_to_mm_complete = 0;
20081c28:	d0201515 	stw	zero,-32684(gp)

          while(!st_to_mm_complete);
          st_to_mm_complete = 0;
        }

        for(int b = 0; b < hCb_size*wCb_size; b++)
20081c2c:	e0bfd017 	ldw	r2,-192(fp)
20081c30:	10800044 	addi	r2,r2,1
20081c34:	e0bfd015 	stw	r2,-192(fp)
20081c38:	e0ffdd17 	ldw	r3,-140(fp)
20081c3c:	e0bfde17 	ldw	r2,-136(fp)
20081c40:	1885383a 	mul	r2,r3,r2
20081c44:	e0ffd017 	ldw	r3,-192(fp)
20081c48:	18bfcb16 	blt	r3,r2,20081b78 <__flash_rwdata_start+0xfffe2fa4>

          while(!st_to_mm_complete);
          st_to_mm_complete = 0;
        }

        for(int b = 0; b < hCb_size*wCb_size; b++)
20081c4c:	e03fd115 	stw	zero,-188(fp)
20081c50:	00003006 	br	20081d14 <mjpeg423_decode+0x7dc>
        {
          alt_dcache_flush_all();
20081c54:	00995f80 	call	200995f8 <alt_dcache_flush_all>
          // idct(CrDCAC[b], Crblock[b]);
          while(0 != alt_msgdma_construct_standard_mm_to_st_descriptor(mm_to_st_dma_dev,
20081c58:	0001883a 	nop
20081c5c:	d1201917 	ldw	r4,-32668(gp)
20081c60:	d1601817 	ldw	r5,-32672(gp)
20081c64:	e0bfd117 	ldw	r2,-188(fp)
          mm_to_st_desc,
          (alt_u32 *) CrDCAC[b] , sizeof(uint32_t) * DCT_BLOCK_SIZE,
20081c68:	100491fa 	slli	r2,r2,7

        for(int b = 0; b < hCb_size*wCb_size; b++)
        {
          alt_dcache_flush_all();
          // idct(CrDCAC[b], Crblock[b]);
          while(0 != alt_msgdma_construct_standard_mm_to_st_descriptor(mm_to_st_dma_dev,
20081c6c:	e0ffe817 	ldw	r3,-96(fp)
20081c70:	1887883a 	add	r3,r3,r2
20081c74:	00900004 	movi	r2,16384
20081c78:	d8800015 	stw	r2,0(sp)
20081c7c:	180d883a 	mov	r6,r3
20081c80:	01c02004 	movi	r7,128
20081c84:	009bc440 	call	2009bc44 <alt_msgdma_construct_standard_mm_to_st_descriptor>
20081c88:	103ff41e 	bne	r2,zero,20081c5c <__flash_rwdata_start+0xfffe3088>
          mm_to_st_desc,
          (alt_u32 *) CrDCAC[b] , sizeof(uint32_t) * DCT_BLOCK_SIZE,
          DESC_CONTROL));

          while(0 != alt_msgdma_construct_standard_st_to_mm_descriptor(st_to_mm_dma_dev,
20081c8c:	0001883a 	nop
20081c90:	d1201a17 	ldw	r4,-32664(gp)
20081c94:	d1601b17 	ldw	r5,-32660(gp)
20081c98:	e0bfd117 	ldw	r2,-188(fp)
          st_to_mm_desc,
          (alt_u32 *) Crblock[b], sizeof(uint32_t) * COLOUR_BLOCK_SIZE,
20081c9c:	100491ba 	slli	r2,r2,6
          while(0 != alt_msgdma_construct_standard_mm_to_st_descriptor(mm_to_st_dma_dev,
          mm_to_st_desc,
          (alt_u32 *) CrDCAC[b] , sizeof(uint32_t) * DCT_BLOCK_SIZE,
          DESC_CONTROL));

          while(0 != alt_msgdma_construct_standard_st_to_mm_descriptor(st_to_mm_dma_dev,
20081ca0:	e0ffe517 	ldw	r3,-108(fp)
20081ca4:	1887883a 	add	r3,r3,r2
20081ca8:	00900004 	movi	r2,16384
20081cac:	d8800015 	stw	r2,0(sp)
20081cb0:	180d883a 	mov	r6,r3
20081cb4:	01c01004 	movi	r7,64
20081cb8:	009bbec0 	call	2009bbec <alt_msgdma_construct_standard_st_to_mm_descriptor>
20081cbc:	103ff41e 	bne	r2,zero,20081c90 <__flash_rwdata_start+0xfffe30bc>
          st_to_mm_desc,
          (alt_u32 *) Crblock[b], sizeof(uint32_t) * COLOUR_BLOCK_SIZE,
          DESC_CONTROL));

					while (alt_msgdma_standard_descriptor_async_transfer(mm_to_st_dma_dev,
20081cc0:	0001883a 	nop
20081cc4:	d0e01917 	ldw	r3,-32668(gp)
20081cc8:	d0a01817 	ldw	r2,-32672(gp)
20081ccc:	1809883a 	mov	r4,r3
20081cd0:	100b883a 	mov	r5,r2
20081cd4:	009cdd00 	call	2009cdd0 <alt_msgdma_standard_descriptor_async_transfer>
20081cd8:	103ffa1e 	bne	r2,zero,20081cc4 <__flash_rwdata_start+0xfffe30f0>
                 != 0);

          // while(!mm_to_st_complete);
          // mm_to_st_complete = 0;

          while (alt_msgdma_standard_descriptor_async_transfer(st_to_mm_dma_dev,
20081cdc:	0001883a 	nop
20081ce0:	d0e01a17 	ldw	r3,-32664(gp)
20081ce4:	d0a01b17 	ldw	r2,-32660(gp)
20081ce8:	1809883a 	mov	r4,r3
20081cec:	100b883a 	mov	r5,r2
20081cf0:	009cdd00 	call	2009cdd0 <alt_msgdma_standard_descriptor_async_transfer>
20081cf4:	103ffa1e 	bne	r2,zero,20081ce0 <__flash_rwdata_start+0xfffe310c>
                 st_to_mm_desc)
                 != 0);

          while(!st_to_mm_complete);
20081cf8:	0001883a 	nop
20081cfc:	d0a01517 	ldw	r2,-32684(gp)
20081d00:	103ffe26 	beq	r2,zero,20081cfc <__flash_rwdata_start+0xfffe3128>
          st_to_mm_complete = 0;
20081d04:	d0201515 	stw	zero,-32684(gp)

          while(!st_to_mm_complete);
          st_to_mm_complete = 0;
        }

        for(int b = 0; b < hCb_size*wCb_size; b++)
20081d08:	e0bfd117 	ldw	r2,-188(fp)
20081d0c:	10800044 	addi	r2,r2,1
20081d10:	e0bfd115 	stw	r2,-188(fp)
20081d14:	e0ffdd17 	ldw	r3,-140(fp)
20081d18:	e0bfde17 	ldw	r2,-136(fp)
20081d1c:	1885383a 	mul	r2,r3,r2
20081d20:	e0ffd117 	ldw	r3,-188(fp)
20081d24:	18bfcb16 	blt	r3,r2,20081c54 <__flash_rwdata_start+0xfffe3080>

#ifdef PROFILEING
        printf("it took %u cycles at a frequency of %uHz to decode this frame\n", alt_timestamp(), alt_timestamp_freq());
#endif

        if(!init)
20081d28:	d0a01617 	ldw	r2,-32680(gp)
20081d2c:	1000091e 	bne	r2,zero,20081d54 <mjpeg423_decode+0x81c>
        {
            disp = ece423_video_display_init(VIDEO_DMA_CSR_NAME,640,480,NUM_BUFFERS);
20081d30:	01000034 	movhi	r4,0
20081d34:	21007f04 	addi	r4,r4,508
20081d38:	0140a004 	movi	r5,640
20081d3c:	01807804 	movi	r6,480
20081d40:	01c00284 	movi	r7,10
20081d44:	00873500 	call	20087350 <ece423_video_display_init>
20081d48:	d0a01715 	stw	r2,-32676(gp)
            init = TRUE;
20081d4c:	00800044 	movi	r2,1
20081d50:	d0a01615 	stw	r2,-32680(gp)
        }

        alt_u32 *frame1 = ece423_video_display_get_buffer(disp);
20081d54:	d0a01717 	ldw	r2,-32676(gp)
20081d58:	1009883a 	mov	r4,r2
20081d5c:	0087a040 	call	20087a04 <ece423_video_display_get_buffer>
20081d60:	e0bff015 	stw	r2,-64(fp)

        //ybcbr to rgb conversion
        while(ece423_video_display_buffer_is_available(disp) || (ready_frames > NUM_BUFFERS-5));
20081d64:	0001883a 	nop
20081d68:	d0a01717 	ldw	r2,-32676(gp)
20081d6c:	1009883a 	mov	r4,r2
20081d70:	00876480 	call	20087648 <ece423_video_display_buffer_is_available>
20081d74:	103ffc1e 	bne	r2,zero,20081d68 <__flash_rwdata_start+0xfffe3194>
20081d78:	00800034 	movhi	r2,0
20081d7c:	108aae04 	addi	r2,r2,10936
20081d80:	10800017 	ldw	r2,0(r2)
20081d84:	108001a8 	cmpgeui	r2,r2,6
20081d88:	103ff71e 	bne	r2,zero,20081d68 <__flash_rwdata_start+0xfffe3194>

        for (int h = 0; h < hCb_size; h++)
20081d8c:	e03fd215 	stw	zero,-184(fp)
20081d90:	00002806 	br	20081e34 <mjpeg423_decode+0x8fc>
            for (int w = 0; w < wCb_size; w++) {
20081d94:	e03fd315 	stw	zero,-180(fp)
20081d98:	00002006 	br	20081e1c <mjpeg423_decode+0x8e4>
                int b = h * wCb_size + w;
20081d9c:	e0ffd217 	ldw	r3,-184(fp)
20081da0:	e0bfde17 	ldw	r2,-136(fp)
20081da4:	1887383a 	mul	r3,r3,r2
20081da8:	e0bfd317 	ldw	r2,-180(fp)
20081dac:	1885883a 	add	r2,r3,r2
20081db0:	e0bff115 	stw	r2,-60(fp)

                ycbcr_to_rgb(h << 3, w << 3, w_size, Yblock[b], Cbblock[b], Crblock[b], (void *)frame1);
20081db4:	e0bfd217 	ldw	r2,-184(fp)
20081db8:	100c90fa 	slli	r6,r2,3
20081dbc:	e0bfd317 	ldw	r2,-180(fp)
20081dc0:	100a90fa 	slli	r5,r2,3
20081dc4:	e0bff117 	ldw	r2,-60(fp)
20081dc8:	100491ba 	slli	r2,r2,6
20081dcc:	e0ffe317 	ldw	r3,-116(fp)
20081dd0:	188f883a 	add	r7,r3,r2
20081dd4:	e0bff117 	ldw	r2,-60(fp)
20081dd8:	100491ba 	slli	r2,r2,6
20081ddc:	e0ffe417 	ldw	r3,-112(fp)
20081de0:	1887883a 	add	r3,r3,r2
20081de4:	e0bff117 	ldw	r2,-60(fp)
20081de8:	100491ba 	slli	r2,r2,6
20081dec:	e13fe517 	ldw	r4,-108(fp)
20081df0:	2085883a 	add	r2,r4,r2
20081df4:	d8c00015 	stw	r3,0(sp)
20081df8:	d8800115 	stw	r2,4(sp)
20081dfc:	e0bff017 	ldw	r2,-64(fp)
20081e00:	d8800215 	stw	r2,8(sp)
20081e04:	3009883a 	mov	r4,r6
20081e08:	e1bfd917 	ldw	r6,-156(fp)
20081e0c:	00822000 	call	20082200 <ycbcr_to_rgb>

        //ybcbr to rgb conversion
        while(ece423_video_display_buffer_is_available(disp) || (ready_frames > NUM_BUFFERS-5));

        for (int h = 0; h < hCb_size; h++)
            for (int w = 0; w < wCb_size; w++) {
20081e10:	e0bfd317 	ldw	r2,-180(fp)
20081e14:	10800044 	addi	r2,r2,1
20081e18:	e0bfd315 	stw	r2,-180(fp)
20081e1c:	e0ffd317 	ldw	r3,-180(fp)
20081e20:	e0bfde17 	ldw	r2,-136(fp)
20081e24:	18bfdd16 	blt	r3,r2,20081d9c <__flash_rwdata_start+0xfffe31c8>
        alt_u32 *frame1 = ece423_video_display_get_buffer(disp);

        //ybcbr to rgb conversion
        while(ece423_video_display_buffer_is_available(disp) || (ready_frames > NUM_BUFFERS-5));

        for (int h = 0; h < hCb_size; h++)
20081e28:	e0bfd217 	ldw	r2,-184(fp)
20081e2c:	10800044 	addi	r2,r2,1
20081e30:	e0bfd215 	stw	r2,-184(fp)
20081e34:	e0ffd217 	ldw	r3,-184(fp)
20081e38:	e0bfdd17 	ldw	r2,-140(fp)
20081e3c:	18bfd516 	blt	r3,r2,20081d94 <__flash_rwdata_start+0xfffe31c0>
                int b = h * wCb_size + w;

                ycbcr_to_rgb(h << 3, w << 3, w_size, Yblock[b], Cbblock[b], Crblock[b], (void *)frame1);
            }

        ece423_video_display_register_written_buffer(disp);
20081e40:	d0a01717 	ldw	r2,-32676(gp)
20081e44:	1009883a 	mov	r4,r2
20081e48:	00875f40 	call	200875f4 <ece423_video_display_register_written_buffer>
        ready_frames++;
20081e4c:	00800034 	movhi	r2,0
20081e50:	108aae04 	addi	r2,r2,10936
20081e54:	10800017 	ldw	r2,0(r2)
20081e58:	10c00044 	addi	r3,r2,1
20081e5c:	00800034 	movhi	r2,0
20081e60:	108aae04 	addi	r2,r2,10936
20081e64:	10c00015 	stw	r3,0(r2)
// Displays the first frame of a new section when the video is paused
#ifdef PERIODIC_VIDEO
        if(!is_video_playing)
20081e68:	00800034 	movhi	r2,0
20081e6c:	108a8f04 	addi	r2,r2,10812
20081e70:	10800017 	ldw	r2,0(r2)
20081e74:	10000a1e 	bne	r2,zero,20081ea0 <mjpeg423_decode+0x968>
#endif
        {
        	ready_frames--;
20081e78:	00800034 	movhi	r2,0
20081e7c:	108aae04 	addi	r2,r2,10936
20081e80:	10800017 	ldw	r2,0(r2)
20081e84:	10ffffc4 	addi	r3,r2,-1
20081e88:	00800034 	movhi	r2,0
20081e8c:	108aae04 	addi	r2,r2,10936
20081e90:	10c00015 	stw	r3,0(r2)
            ece423_video_display_switch_frames(disp);
20081e94:	d0a01717 	ldw	r2,-32676(gp)
20081e98:	1009883a 	mov	r4,r2
20081e9c:	00876a40 	call	200876a4 <ece423_video_display_switch_frames>
        }
        do
        {
			if(command != NO_CMD)
20081ea0:	00800034 	movhi	r2,0
20081ea4:	108a9004 	addi	r2,r2,10816
20081ea8:	10800017 	ldw	r2,0(r2)
20081eac:	10800160 	cmpeqi	r2,r2,5
20081eb0:	1000aa1e 	bne	r2,zero,2008215c <mjpeg423_decode+0xc24>
			{
				int32_t desired_skip_frame;
					switch(command)
20081eb4:	00800034 	movhi	r2,0
20081eb8:	108a9004 	addi	r2,r2,10816
20081ebc:	10800017 	ldw	r2,0(r2)
20081ec0:	10c00168 	cmpgeui	r3,r2,5
20081ec4:	18009d1e 	bne	r3,zero,2008213c <mjpeg423_decode+0xc04>
20081ec8:	100690ba 	slli	r3,r2,2
20081ecc:	00880234 	movhi	r2,8200
20081ed0:	1087b804 	addi	r2,r2,7904
20081ed4:	1885883a 	add	r2,r3,r2
20081ed8:	10800017 	ldw	r2,0(r2)
20081edc:	1000683a 	jmp	r2
20081ee0:	20081ef4 	orhi	zero,r4,8315
20081ee4:	20081f08 	cmpgei	zero,r4,8316
20081ee8:	20082194 	ori	zero,r4,8326
20081eec:	20081f18 	cmpnei	zero,r4,8316
20081ef0:	20081f28 	cmpgeui	zero,r4,8316
					{
						case START:
							is_video_playing = TRUE;
20081ef4:	00800034 	movhi	r2,0
20081ef8:	108a8f04 	addi	r2,r2,10812
20081efc:	00c00044 	movi	r3,1
20081f00:	10c00015 	stw	r3,0(r2)
							break;
20081f04:	00009106 	br	2008214c <mjpeg423_decode+0xc14>
						case PAUSE:
							is_video_playing = FALSE;
20081f08:	00800034 	movhi	r2,0
20081f0c:	108a8f04 	addi	r2,r2,10812
20081f10:	10000015 	stw	zero,0(r2)
							break;
20081f14:	00008d06 	br	2008214c <mjpeg423_decode+0xc14>
						case CYCLE:
							goto Exit;
							break;
						case REWIND:
							desired_skip_frame = frame_index - 120;
20081f18:	e0bfce17 	ldw	r2,-200(fp)
20081f1c:	10bfe204 	addi	r2,r2,-120
20081f20:	e0bfd415 	stw	r2,-176(fp)
							goto SkipIt;
20081f24:	00000306 	br	20081f34 <mjpeg423_decode+0x9fc>
							}
							command = NO_CMD;
							goto EndSkip;*/
							break;
						case FORWARD:
							desired_skip_frame = frame_index + 120;
20081f28:	e0bfce17 	ldw	r2,-200(fp)
20081f2c:	10801e04 	addi	r2,r2,120
20081f30:	e0bfd415 	stw	r2,-176(fp)
							        if(!Fat_FileSeek(file_in, SEEK_SET, trailer[count].frame_position)) error_and_exit("cannot seek into file");
							        break;
							    }
							}*/
							SkipIt:
							if(desired_skip_frame <= 0)
20081f34:	e0bfd417 	ldw	r2,-176(fp)
20081f38:	00801f16 	blt	zero,r2,20081fb8 <mjpeg423_decode+0xa80>
							{
								frame_index = trailer[0].frame_index;
20081f3c:	e0bfe117 	ldw	r2,-124(fp)
20081f40:	10800017 	ldw	r2,0(r2)
20081f44:	e0bfce15 	stw	r2,-200(fp)
								if(!Fat_FileSeek(file_in, SEEK_SET, trailer[0].frame_position)) error_and_exit("cannot seek into file");
20081f48:	e0bfe117 	ldw	r2,-124(fp)
20081f4c:	10800117 	ldw	r2,4(r2)
20081f50:	e13fd717 	ldw	r4,-164(fp)
20081f54:	000b883a 	mov	r5,zero
20081f58:	100d883a 	mov	r6,r2
20081f5c:	00834940 	call	20083494 <Fat_FileSeek>
20081f60:	1000031e 	bne	r2,zero,20081f70 <mjpeg423_decode+0xa38>
20081f64:	01000034 	movhi	r4,0
20081f68:	21006504 	addi	r4,r4,404
20081f6c:	008028c0 	call	2008028c <error_and_exit>
								ready_frames = 0;
20081f70:	00800034 	movhi	r2,0
20081f74:	108aae04 	addi	r2,r2,10936
20081f78:	10000015 	stw	zero,0(r2)
								disp->buffer_being_written = ((disp->buffer_being_displayed + 1)
20081f7c:	d4201717 	ldw	r16,-32676(gp)
20081f80:	d0a01717 	ldw	r2,-32676(gp)
20081f84:	10801a17 	ldw	r2,104(r2)
20081f88:	10c00044 	addi	r3,r2,1
										% disp->num_frame_buffers);
20081f8c:	d0a01717 	ldw	r2,-32676(gp)
20081f90:	10802017 	ldw	r2,128(r2)
20081f94:	1809883a 	mov	r4,r3
20081f98:	100b883a 	mov	r5,r2
20081f9c:	0088a180 	call	20088a18 <__modsi3>
							if(desired_skip_frame <= 0)
							{
								frame_index = trailer[0].frame_index;
								if(!Fat_FileSeek(file_in, SEEK_SET, trailer[0].frame_position)) error_and_exit("cannot seek into file");
								ready_frames = 0;
								disp->buffer_being_written = ((disp->buffer_being_displayed + 1)
20081fa0:	80801b15 	stw	r2,108(r16)
										% disp->num_frame_buffers);

								command = NO_CMD;
20081fa4:	00800034 	movhi	r2,0
20081fa8:	108a9004 	addi	r2,r2,10816
20081fac:	00c00144 	movi	r3,5
20081fb0:	10c00015 	stw	r3,0(r2)
								goto EndSkip;
20081fb4:	00006d06 	br	2008216c <mjpeg423_decode+0xc34>
							}
							else if(desired_skip_frame >= num_frames - 1)
20081fb8:	e0ffd417 	ldw	r3,-176(fp)
20081fbc:	e0bfd817 	ldw	r2,-160(fp)
20081fc0:	10bfffc4 	addi	r2,r2,-1
20081fc4:	18801236 	bltu	r3,r2,20082010 <mjpeg423_decode+0xad8>
							{
								//desired_skip_frame = num_frames - 1;
								disp->buffer_being_written = ((disp->buffer_being_displayed + 1)
20081fc8:	d4201717 	ldw	r16,-32676(gp)
20081fcc:	d0a01717 	ldw	r2,-32676(gp)
20081fd0:	10801a17 	ldw	r2,104(r2)
20081fd4:	10c00044 	addi	r3,r2,1
										% disp->num_frame_buffers);
20081fd8:	d0a01717 	ldw	r2,-32676(gp)
20081fdc:	10802017 	ldw	r2,128(r2)
20081fe0:	1809883a 	mov	r4,r3
20081fe4:	100b883a 	mov	r5,r2
20081fe8:	0088a180 	call	20088a18 <__modsi3>
								goto EndSkip;
							}
							else if(desired_skip_frame >= num_frames - 1)
							{
								//desired_skip_frame = num_frames - 1;
								disp->buffer_being_written = ((disp->buffer_being_displayed + 1)
20081fec:	80801b15 	stw	r2,108(r16)
										% disp->num_frame_buffers);
								ready_frames = 0;
20081ff0:	00800034 	movhi	r2,0
20081ff4:	108aae04 	addi	r2,r2,10936
20081ff8:	10000015 	stw	zero,0(r2)
								command = NO_CMD;
20081ffc:	00800034 	movhi	r2,0
20082000:	108a9004 	addi	r2,r2,10816
20082004:	00c00144 	movi	r3,5
20082008:	10c00015 	stw	r3,0(r2)
								goto Exit;
2008200c:	00006206 	br	20082198 <mjpeg423_decode+0xc60>
							}

							int japan_high = num_iframes - 1;
20082010:	e0bfdb17 	ldw	r2,-148(fp)
20082014:	10bfffc4 	addi	r2,r2,-1
20082018:	e0bfd515 	stw	r2,-172(fp)
							int japan_low = 0;
2008201c:	e03fd615 	stw	zero,-168(fp)
							int middle = 0;
20082020:	e03ff215 	stw	zero,-56(fp)
							while(japan_low <= japan_high)
20082024:	00001d06 	br	2008209c <mjpeg423_decode+0xb64>
							{
                                int middle = (japan_high + japan_low)/2;
20082028:	e0ffd517 	ldw	r3,-172(fp)
2008202c:	e0bfd617 	ldw	r2,-168(fp)
20082030:	1885883a 	add	r2,r3,r2
20082034:	1006d7fa 	srli	r3,r2,31
20082038:	1885883a 	add	r2,r3,r2
2008203c:	1005d07a 	srai	r2,r2,1
20082040:	e0bff315 	stw	r2,-52(fp)
                                if(trailer[middle].frame_index == desired_skip_frame)
20082044:	e0bff317 	ldw	r2,-52(fp)
20082048:	100490fa 	slli	r2,r2,3
2008204c:	e0ffe117 	ldw	r3,-124(fp)
20082050:	1885883a 	add	r2,r3,r2
20082054:	10c00017 	ldw	r3,0(r2)
20082058:	e0bfd417 	ldw	r2,-176(fp)
2008205c:	1880011e 	bne	r3,r2,20082064 <mjpeg423_decode+0xb2c>
                                {
                                	break;
20082060:	00001106 	br	200820a8 <mjpeg423_decode+0xb70>
                                }
                                else if(trailer[middle].frame_index < desired_skip_frame)
20082064:	e0bff317 	ldw	r2,-52(fp)
20082068:	100490fa 	slli	r2,r2,3
2008206c:	e0ffe117 	ldw	r3,-124(fp)
20082070:	1885883a 	add	r2,r3,r2
20082074:	10c00017 	ldw	r3,0(r2)
20082078:	e0bfd417 	ldw	r2,-176(fp)
2008207c:	1880042e 	bgeu	r3,r2,20082090 <mjpeg423_decode+0xb58>
                                {
                                    japan_low = middle + 1;
20082080:	e0bff317 	ldw	r2,-52(fp)
20082084:	10800044 	addi	r2,r2,1
20082088:	e0bfd615 	stw	r2,-168(fp)
2008208c:	00000306 	br	2008209c <mjpeg423_decode+0xb64>
                                }
                                else
                                {
                                	japan_high = middle - 1;
20082090:	e0bff317 	ldw	r2,-52(fp)
20082094:	10bfffc4 	addi	r2,r2,-1
20082098:	e0bfd515 	stw	r2,-172(fp)
							}

							int japan_high = num_iframes - 1;
							int japan_low = 0;
							int middle = 0;
							while(japan_low <= japan_high)
2008209c:	e0bfd617 	ldw	r2,-168(fp)
200820a0:	e0ffd517 	ldw	r3,-172(fp)
200820a4:	18bfe00e 	bge	r3,r2,20082028 <__flash_rwdata_start+0xfffe3454>
                                else
                                {
                                	japan_high = middle - 1;
                                }
							}
							frame_index = trailer[japan_high].frame_index;
200820a8:	e0bfd517 	ldw	r2,-172(fp)
200820ac:	100490fa 	slli	r2,r2,3
200820b0:	e0ffe117 	ldw	r3,-124(fp)
200820b4:	1885883a 	add	r2,r3,r2
200820b8:	10800017 	ldw	r2,0(r2)
200820bc:	e0bfce15 	stw	r2,-200(fp)
							if(!Fat_FileSeek(file_in, SEEK_SET, trailer[japan_high].frame_position)) error_and_exit("cannot seek into file");
200820c0:	e0bfd517 	ldw	r2,-172(fp)
200820c4:	100490fa 	slli	r2,r2,3
200820c8:	e0ffe117 	ldw	r3,-124(fp)
200820cc:	1885883a 	add	r2,r3,r2
200820d0:	10800117 	ldw	r2,4(r2)
200820d4:	e13fd717 	ldw	r4,-164(fp)
200820d8:	000b883a 	mov	r5,zero
200820dc:	100d883a 	mov	r6,r2
200820e0:	00834940 	call	20083494 <Fat_FileSeek>
200820e4:	1000031e 	bne	r2,zero,200820f4 <mjpeg423_decode+0xbbc>
200820e8:	01000034 	movhi	r4,0
200820ec:	21006504 	addi	r4,r4,404
200820f0:	008028c0 	call	2008028c <error_and_exit>
							ready_frames = 0;
200820f4:	00800034 	movhi	r2,0
200820f8:	108aae04 	addi	r2,r2,10936
200820fc:	10000015 	stw	zero,0(r2)
							disp->buffer_being_written = ((disp->buffer_being_displayed + 1)
20082100:	d4201717 	ldw	r16,-32676(gp)
20082104:	d0a01717 	ldw	r2,-32676(gp)
20082108:	10801a17 	ldw	r2,104(r2)
2008210c:	10c00044 	addi	r3,r2,1
									% disp->num_frame_buffers);
20082110:	d0a01717 	ldw	r2,-32676(gp)
20082114:	10802017 	ldw	r2,128(r2)
20082118:	1809883a 	mov	r4,r3
2008211c:	100b883a 	mov	r5,r2
20082120:	0088a180 	call	20088a18 <__modsi3>
                                }
							}
							frame_index = trailer[japan_high].frame_index;
							if(!Fat_FileSeek(file_in, SEEK_SET, trailer[japan_high].frame_position)) error_and_exit("cannot seek into file");
							ready_frames = 0;
							disp->buffer_being_written = ((disp->buffer_being_displayed + 1)
20082124:	80801b15 	stw	r2,108(r16)
									% disp->num_frame_buffers);

							command = NO_CMD;
20082128:	00800034 	movhi	r2,0
2008212c:	108a9004 	addi	r2,r2,10816
20082130:	00c00144 	movi	r3,5
20082134:	10c00015 	stw	r3,0(r2)
							goto EndSkip;
20082138:	00000c06 	br	2008216c <mjpeg423_decode+0xc34>
							break;
						default:
							error_and_exit("Invalid State");
2008213c:	01000034 	movhi	r4,0
20082140:	21008404 	addi	r4,r4,528
20082144:	008028c0 	call	2008028c <error_and_exit>
							break;
20082148:	0001883a 	nop
					}
					command = NO_CMD;
2008214c:	00800034 	movhi	r2,0
20082150:	108a9004 	addi	r2,r2,10816
20082154:	00c00144 	movi	r3,5
20082158:	10c00015 	stw	r3,0(r2)

			}
		} while(!is_video_playing);
2008215c:	00800034 	movhi	r2,0
20082160:	108a8f04 	addi	r2,r2,10812
20082164:	10800017 	ldw	r2,0(r2)
20082168:	103f4d26 	beq	r2,zero,20081ea0 <__flash_rwdata_start+0xfffe32cc>
    	st_to_mm_done,
    	ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK,
    	0);

    //encode and write frames
    for(int frame_index = 0; frame_index < num_frames; frame_index ++){
2008216c:	e0bfce17 	ldw	r2,-200(fp)
20082170:	10800044 	addi	r2,r2,1
20082174:	e0bfce15 	stw	r2,-200(fp)
20082178:	e0ffce17 	ldw	r3,-200(fp)
2008217c:	e0bfd817 	ldw	r2,-160(fp)
20082180:	18bdf436 	bltu	r3,r2,20081954 <__flash_rwdata_start+0xfffe2d80>
		} while(!is_video_playing);

        EndSkip: ;

    } //end frame iteration
    DEBUG_PRINT("\nDecoder done.\n\n\n")
20082184:	01000034 	movhi	r4,0
20082188:	21008804 	addi	r4,r4,544
2008218c:	008c1280 	call	2008c128 <puts>
20082190:	00000106 	br	20082198 <mjpeg423_decode+0xc60>
							break;
						case PAUSE:
							is_video_playing = FALSE;
							break;
						case CYCLE:
							goto Exit;
20082194:	0001883a 	nop
    } //end frame iteration
    DEBUG_PRINT("\nDecoder done.\n\n\n")

Exit:
    //close down
    Fat_FileClose(file_in);
20082198:	e13fd717 	ldw	r4,-164(fp)
2008219c:	00835940 	call	20083594 <Fat_FileClose>
    free(rgbblock);
200821a0:	e13fe217 	ldw	r4,-120(fp)
200821a4:	008b5640 	call	2008b564 <free>
    free(Yblock);
200821a8:	e13fe317 	ldw	r4,-116(fp)
200821ac:	008b5640 	call	2008b564 <free>
    free(Cbblock);
200821b0:	e13fe417 	ldw	r4,-112(fp)
200821b4:	008b5640 	call	2008b564 <free>
    free(Crblock);
200821b8:	e13fe517 	ldw	r4,-108(fp)
200821bc:	008b5640 	call	2008b564 <free>
    free(YDCAC);
200821c0:	e13fe617 	ldw	r4,-104(fp)
200821c4:	008b5640 	call	2008b564 <free>
    free(CbDCAC);
200821c8:	e13fe717 	ldw	r4,-100(fp)
200821cc:	008b5640 	call	2008b564 <free>
    free(CrDCAC);
200821d0:	e13fe817 	ldw	r4,-96(fp)
200821d4:	008b5640 	call	2008b564 <free>
    free(Ybitstream);
200821d8:	e13fe917 	ldw	r4,-92(fp)
200821dc:	008b5640 	call	2008b564 <free>
    free(trailer);
200821e0:	e13fe117 	ldw	r4,-124(fp)
200821e4:	008b5640 	call	2008b564 <free>
}
200821e8:	e6ffff04 	addi	sp,fp,-4
200821ec:	dfc00217 	ldw	ra,8(sp)
200821f0:	df000117 	ldw	fp,4(sp)
200821f4:	dc000017 	ldw	r16,0(sp)
200821f8:	dec00304 	addi	sp,sp,12
200821fc:	f800283a 	ret

20082200 <ycbcr_to_rgb>:

#else

//null implementation
void ycbcr_to_rgb(int h, int w, uint32_t w_size, pcolor_block_t Y, pcolor_block_t Cb, pcolor_block_t Cr, rgb_pixel_t* rgbblock)
{
20082200:	defff704 	addi	sp,sp,-36
20082204:	df000815 	stw	fp,32(sp)
20082208:	df000804 	addi	fp,sp,32
2008220c:	e13ffc15 	stw	r4,-16(fp)
20082210:	e17ffd15 	stw	r5,-12(fp)
20082214:	e1bffe15 	stw	r6,-8(fp)
20082218:	e1ffff15 	stw	r7,-4(fp)
    int index;
    for (int y = 0; y < 8; y++){
2008221c:	e03ff915 	stw	zero,-28(fp)
20082220:	00003e06 	br	2008231c <ycbcr_to_rgb+0x11c>
        index = (h+y) * w_size + w;
20082224:	e0fffc17 	ldw	r3,-16(fp)
20082228:	e0bff917 	ldw	r2,-28(fp)
2008222c:	1885883a 	add	r2,r3,r2
20082230:	1007883a 	mov	r3,r2
20082234:	e0bffe17 	ldw	r2,-8(fp)
20082238:	1887383a 	mul	r3,r3,r2
2008223c:	e0bffd17 	ldw	r2,-12(fp)
20082240:	1885883a 	add	r2,r3,r2
20082244:	e0bff815 	stw	r2,-32(fp)
        for(int x = 0; x < 8; x++){
20082248:	e03ffa15 	stw	zero,-24(fp)
2008224c:	00002d06 	br	20082304 <ycbcr_to_rgb+0x104>
            rgb_pixel_t pixel;
            pixel.alpha = 0;
20082250:	e03ffbc5 	stb	zero,-17(fp)
            pixel.red = Cr[y][x];
20082254:	e0bff917 	ldw	r2,-28(fp)
20082258:	100490fa 	slli	r2,r2,3
2008225c:	e0c00217 	ldw	r3,8(fp)
20082260:	1887883a 	add	r3,r3,r2
20082264:	e0bffa17 	ldw	r2,-24(fp)
20082268:	1885883a 	add	r2,r3,r2
2008226c:	10800003 	ldbu	r2,0(r2)
20082270:	e0bffb85 	stb	r2,-18(fp)
            pixel.green = Y[y][x];
20082274:	e0bff917 	ldw	r2,-28(fp)
20082278:	100490fa 	slli	r2,r2,3
2008227c:	e0ffff17 	ldw	r3,-4(fp)
20082280:	1887883a 	add	r3,r3,r2
20082284:	e0bffa17 	ldw	r2,-24(fp)
20082288:	1885883a 	add	r2,r3,r2
2008228c:	10800003 	ldbu	r2,0(r2)
20082290:	e0bffb45 	stb	r2,-19(fp)
            pixel.blue = Cb[y][x];
20082294:	e0bff917 	ldw	r2,-28(fp)
20082298:	100490fa 	slli	r2,r2,3
2008229c:	e0c00117 	ldw	r3,4(fp)
200822a0:	1887883a 	add	r3,r3,r2
200822a4:	e0bffa17 	ldw	r2,-24(fp)
200822a8:	1885883a 	add	r2,r3,r2
200822ac:	10800003 	ldbu	r2,0(r2)
200822b0:	e0bffb05 	stb	r2,-20(fp)
            rgbblock[index] = pixel;
200822b4:	e0bff817 	ldw	r2,-32(fp)
200822b8:	1085883a 	add	r2,r2,r2
200822bc:	1085883a 	add	r2,r2,r2
200822c0:	1007883a 	mov	r3,r2
200822c4:	e0800317 	ldw	r2,12(fp)
200822c8:	10c5883a 	add	r2,r2,r3
200822cc:	e0fffb03 	ldbu	r3,-20(fp)
200822d0:	10c00005 	stb	r3,0(r2)
200822d4:	e0fffb43 	ldbu	r3,-19(fp)
200822d8:	10c00045 	stb	r3,1(r2)
200822dc:	e0fffb83 	ldbu	r3,-18(fp)
200822e0:	10c00085 	stb	r3,2(r2)
200822e4:	e0fffbc3 	ldbu	r3,-17(fp)
200822e8:	10c000c5 	stb	r3,3(r2)
            index++;
200822ec:	e0bff817 	ldw	r2,-32(fp)
200822f0:	10800044 	addi	r2,r2,1
200822f4:	e0bff815 	stw	r2,-32(fp)
void ycbcr_to_rgb(int h, int w, uint32_t w_size, pcolor_block_t Y, pcolor_block_t Cb, pcolor_block_t Cr, rgb_pixel_t* rgbblock)
{
    int index;
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
200822f8:	e0bffa17 	ldw	r2,-24(fp)
200822fc:	10800044 	addi	r2,r2,1
20082300:	e0bffa15 	stw	r2,-24(fp)
20082304:	e0bffa17 	ldw	r2,-24(fp)
20082308:	10800210 	cmplti	r2,r2,8
2008230c:	103fd01e 	bne	r2,zero,20082250 <__flash_rwdata_start+0xfffe367c>

//null implementation
void ycbcr_to_rgb(int h, int w, uint32_t w_size, pcolor_block_t Y, pcolor_block_t Cb, pcolor_block_t Cr, rgb_pixel_t* rgbblock)
{
    int index;
    for (int y = 0; y < 8; y++){
20082310:	e0bff917 	ldw	r2,-28(fp)
20082314:	10800044 	addi	r2,r2,1
20082318:	e0bff915 	stw	r2,-28(fp)
2008231c:	e0bff917 	ldw	r2,-28(fp)
20082320:	10800210 	cmplti	r2,r2,8
20082324:	103fbf1e 	bne	r2,zero,20082224 <__flash_rwdata_start+0xfffe3650>
            pixel.blue = Cb[y][x];
            rgbblock[index] = pixel;
            index++;
        }
    }
}
20082328:	e037883a 	mov	sp,fp
2008232c:	df000017 	ldw	fp,0(sp)
20082330:	dec00104 	addi	sp,sp,4
20082334:	f800283a 	ret

20082338 <Fat_Mount>:
bool fatSameLongFilename(alt_u16 *p1, alt_u16 *p2);




FAT_HANDLE Fat_Mount(){
20082338:	defffd04 	addi	sp,sp,-12
2008233c:	dfc00215 	stw	ra,8(sp)
20082340:	df000115 	stw	fp,4(sp)
20082344:	df000104 	addi	fp,sp,4
    
    FAT_HANDLE hFat = 0;
20082348:	e03fff15 	stw	zero,-4(fp)
    hFat = fatMountSdcard();
2008234c:	00848d40 	call	200848d4 <fatMountSdcard>
20082350:	e0bfff15 	stw	r2,-4(fp)
    return hFat;      
20082354:	e0bfff17 	ldw	r2,-4(fp)
}
20082358:	e037883a 	mov	sp,fp
2008235c:	dfc00117 	ldw	ra,4(sp)
20082360:	df000017 	ldw	fp,0(sp)
20082364:	dec00204 	addi	sp,sp,8
20082368:	f800283a 	ret

2008236c <Fat_Unmount>:

void Fat_Unmount(FAT_HANDLE Fat){
2008236c:	defffd04 	addi	sp,sp,-12
20082370:	df000215 	stw	fp,8(sp)
20082374:	df000204 	addi	fp,sp,8
20082378:	e13fff15 	stw	r4,-4(fp)
    VOLUME_INFO *pVol = (VOLUME_INFO *)Fat;
2008237c:	e0bfff17 	ldw	r2,-4(fp)
20082380:	e0bffe15 	stw	r2,-8(fp)
    if (!pVol)
20082384:	e0bffe17 	ldw	r2,-8(fp)
20082388:	1000011e 	bne	r2,zero,20082390 <Fat_Unmount+0x24>
        return;
2008238c:	00000206 	br	20082398 <Fat_Unmount+0x2c>
    if (pVol->szFatTable){
        free(pVol->szFatTable);
        pVol->szFatTable = 0;
    }        
#endif //#ifdef FAT_READONLY
    pVol->bMount = FALSE;
20082390:	e0bffe17 	ldw	r2,-8(fp)
20082394:	10000515 	stw	zero,20(r2)
    
    //free(pVol);
}   
20082398:	e037883a 	mov	sp,fp
2008239c:	df000017 	ldw	fp,0(sp)
200823a0:	dec00104 	addi	sp,sp,4
200823a4:	f800283a 	ret

200823a8 <Fat_Type>:

FAT_TYPE Fat_Type(FAT_HANDLE Fat){
200823a8:	defffc04 	addi	sp,sp,-16
200823ac:	df000315 	stw	fp,12(sp)
200823b0:	df000304 	addi	fp,sp,12
200823b4:	e13fff15 	stw	r4,-4(fp)
    VOLUME_INFO *pVol = (VOLUME_INFO *)Fat;
200823b8:	e0bfff17 	ldw	r2,-4(fp)
200823bc:	e0bffe15 	stw	r2,-8(fp)
    FAT_TYPE Type = FAT_UNKNOWN;
200823c0:	e03ffd15 	stw	zero,-12(fp)
    if (pVol){
200823c4:	e0bffe17 	ldw	r2,-8(fp)
200823c8:	10000d26 	beq	r2,zero,20082400 <Fat_Type+0x58>
        if (pVol->Partition_Type == PARTITION_FAT16)
200823cc:	e0bffe17 	ldw	r2,-8(fp)
200823d0:	10800417 	ldw	r2,16(r2)
200823d4:	10800198 	cmpnei	r2,r2,6
200823d8:	1000031e 	bne	r2,zero,200823e8 <Fat_Type+0x40>
            Type = FAT_FAT16;
200823dc:	00800044 	movi	r2,1
200823e0:	e0bffd15 	stw	r2,-12(fp)
200823e4:	00000606 	br	20082400 <Fat_Type+0x58>
        else if (pVol->Partition_Type == PARTITION_FAT32)
200823e8:	e0bffe17 	ldw	r2,-8(fp)
200823ec:	10800417 	ldw	r2,16(r2)
200823f0:	108002d8 	cmpnei	r2,r2,11
200823f4:	1000021e 	bne	r2,zero,20082400 <Fat_Type+0x58>
            Type = FAT_FAT32;
200823f8:	00800084 	movi	r2,2
200823fc:	e0bffd15 	stw	r2,-12(fp)
    }
    return Type;        
20082400:	e0bffd17 	ldw	r2,-12(fp)
}
20082404:	e037883a 	mov	sp,fp
20082408:	df000017 	ldw	fp,0(sp)
2008240c:	dec00104 	addi	sp,sp,4
20082410:	f800283a 	ret

20082414 <Fat_FileBrowseBegin>:

bool Fat_FileBrowseBegin(FAT_HANDLE hFat, FAT_BROWSE_HANDLE *pFatBrowseHandle){
20082414:	defffc04 	addi	sp,sp,-16
20082418:	df000315 	stw	fp,12(sp)
2008241c:	df000304 	addi	fp,sp,12
20082420:	e13ffe15 	stw	r4,-8(fp)
20082424:	e17fff15 	stw	r5,-4(fp)
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
20082428:	e0bffe17 	ldw	r2,-8(fp)
2008242c:	e0bffd15 	stw	r2,-12(fp)
    if (!pVol)
20082430:	e0bffd17 	ldw	r2,-12(fp)
20082434:	1000021e 	bne	r2,zero,20082440 <Fat_FileBrowseBegin+0x2c>
        return FALSE;
20082438:	0005883a 	mov	r2,zero
2008243c:	00000c06 	br	20082470 <Fat_FileBrowseBegin+0x5c>
    if (!pVol->bMount)
20082440:	e0bffd17 	ldw	r2,-12(fp)
20082444:	10800517 	ldw	r2,20(r2)
20082448:	1000021e 	bne	r2,zero,20082454 <Fat_FileBrowseBegin+0x40>
        return FALSE;
2008244c:	0005883a 	mov	r2,zero
20082450:	00000706 	br	20082470 <Fat_FileBrowseBegin+0x5c>
    pFatBrowseHandle->DirectoryIndex = -1;
20082454:	e0bfff17 	ldw	r2,-4(fp)
20082458:	00ffffc4 	movi	r3,-1
2008245c:	10c00015 	stw	r3,0(r2)
    pFatBrowseHandle->hFat = hFat;
20082460:	e0bfff17 	ldw	r2,-4(fp)
20082464:	e0fffe17 	ldw	r3,-8(fp)
20082468:	10c00115 	stw	r3,4(r2)
    return TRUE;
2008246c:	00800044 	movi	r2,1
}
20082470:	e037883a 	mov	sp,fp
20082474:	df000017 	ldw	fp,0(sp)
20082478:	dec00104 	addi	sp,sp,4
2008247c:	f800283a 	ret

20082480 <Fat_FileBrowseNext>:

bool Fat_FileBrowseNext(FAT_BROWSE_HANDLE *pFatBrowseHandle, FILE_CONTEXT *pFileContext){
20082480:	defff404 	addi	sp,sp,-48
20082484:	dfc00b15 	stw	ra,44(sp)
20082488:	df000a15 	stw	fp,40(sp)
2008248c:	df000a04 	addi	fp,sp,40
20082490:	e13ffe15 	stw	r4,-8(fp)
20082494:	e17fff15 	stw	r5,-4(fp)
    bool bFind = FALSE, bError=FALSE, bLongFilename = FALSE;
20082498:	e03ff615 	stw	zero,-40(fp)
2008249c:	e03ff715 	stw	zero,-36(fp)
200824a0:	e03ff815 	stw	zero,-32(fp)
    int OrderValue = 0;
200824a4:	e03ff915 	stw	zero,-28(fp)
    FAT_DIRECTORY *pDir;
    //unsigned int nSecter, nSecterOffset,nByteOffset;
    VOLUME_INFO *pVol = (VOLUME_INFO *)pFatBrowseHandle->hFat;
200824a8:	e0bffe17 	ldw	r2,-8(fp)
200824ac:	10800117 	ldw	r2,4(r2)
200824b0:	e0bffa15 	stw	r2,-24(fp)
    
    if (!pVol)
200824b4:	e0bffa17 	ldw	r2,-24(fp)
200824b8:	1000021e 	bne	r2,zero,200824c4 <Fat_FileBrowseNext+0x44>
        return FALSE;    
200824bc:	0005883a 	mov	r2,zero
200824c0:	0000f506 	br	20082898 <Fat_FileBrowseNext+0x418>
    
    if (!pVol->bMount)
200824c4:	e0bffa17 	ldw	r2,-24(fp)
200824c8:	10800517 	ldw	r2,20(r2)
200824cc:	1000021e 	bne	r2,zero,200824d8 <Fat_FileBrowseNext+0x58>
        return FALSE;
200824d0:	0005883a 	mov	r2,zero
200824d4:	0000f006 	br	20082898 <Fat_FileBrowseNext+0x418>
    
    
    do{  // search Directory Table
        pFatBrowseHandle->DirectoryIndex++;        
200824d8:	e0bffe17 	ldw	r2,-8(fp)
200824dc:	10800017 	ldw	r2,0(r2)
200824e0:	10c00044 	addi	r3,r2,1
200824e4:	e0bffe17 	ldw	r2,-8(fp)
200824e8:	10c00015 	stw	r3,0(r2)
        pDir = fatFindDirectory(pVol,pFatBrowseHandle->DirectoryIndex);
200824ec:	e0bffe17 	ldw	r2,-8(fp)
200824f0:	10800017 	ldw	r2,0(r2)
200824f4:	e13ffa17 	ldw	r4,-24(fp)
200824f8:	100b883a 	mov	r5,r2
200824fc:	00843400 	call	20084340 <fatFindDirectory>
20082500:	e0bffb15 	stw	r2,-20(fp)
        if (!pDir)
20082504:	e0bffb17 	ldw	r2,-20(fp)
20082508:	1000021e 	bne	r2,zero,20082514 <Fat_FileBrowseNext+0x94>
            bError = TRUE;
2008250c:	00800044 	movi	r2,1
20082510:	e0bff715 	stw	r2,-36(fp)
            
        if (!bError){                        
20082514:	e0bff717 	ldw	r2,-36(fp)
20082518:	1000d71e 	bne	r2,zero,20082878 <Fat_FileBrowseNext+0x3f8>
            if (fatIsValidDir(pDir) && !fatIsUnusedDir(pDir)){
2008251c:	e13ffb17 	ldw	r4,-20(fp)
20082520:	0083f340 	call	20083f34 <fatIsValidDir>
20082524:	1000d426 	beq	r2,zero,20082878 <Fat_FileBrowseNext+0x3f8>
20082528:	e13ffb17 	ldw	r4,-20(fp)
2008252c:	0083fdc0 	call	20083fdc <fatIsUnusedDir>
20082530:	1000d11e 	bne	r2,zero,20082878 <Fat_FileBrowseNext+0x3f8>
                if ((pDir->Attribute & ATTR_LONG_NAME) == ATTR_LONG_NAME){
20082534:	e0bffb17 	ldw	r2,-20(fp)
20082538:	108002c3 	ldbu	r2,11(r2)
2008253c:	10803fcc 	andi	r2,r2,255
20082540:	108003cc 	andi	r2,r2,15
20082544:	108003d8 	cmpnei	r2,r2,15
20082548:	1000521e 	bne	r2,zero,20082694 <Fat_FileBrowseNext+0x214>
                    FAT_LONG_DIRECTORY *pLDIR = (FAT_LONG_DIRECTORY *)pDir;
2008254c:	e0bffb17 	ldw	r2,-20(fp)
20082550:	e0bffc15 	stw	r2,-16(fp)
                    // check attribute
                    if ((pLDIR->LDIR_Attr & ATTR_LONG_NAME) != ATTR_LONG_NAME){
20082554:	e0bffc17 	ldw	r2,-16(fp)
20082558:	108002c3 	ldbu	r2,11(r2)
2008255c:	10803fcc 	andi	r2,r2,255
20082560:	108003cc 	andi	r2,r2,15
20082564:	108003e0 	cmpeqi	r2,r2,15
20082568:	1000031e 	bne	r2,zero,20082578 <Fat_FileBrowseNext+0xf8>
                        bError = TRUE;
2008256c:	00800044 	movi	r2,1
20082570:	e0bff715 	stw	r2,-36(fp)
20082574:	00001e06 	br	200825f0 <Fat_FileBrowseNext+0x170>
                    }else{                        
                        // check order
                        if (OrderValue == 0){
20082578:	e0bff917 	ldw	r2,-28(fp)
2008257c:	1000141e 	bne	r2,zero,200825d0 <Fat_FileBrowseNext+0x150>
                            // last entry
                            if (bLongFilename || ((OrderValue & LAST_LONG_ENTRY) != OrderValue))
20082580:	e0bff817 	ldw	r2,-32(fp)
20082584:	1000041e 	bne	r2,zero,20082598 <Fat_FileBrowseNext+0x118>
20082588:	e0bff917 	ldw	r2,-28(fp)
2008258c:	10c0100c 	andi	r3,r2,64
20082590:	e0bff917 	ldw	r2,-28(fp)
20082594:	18800326 	beq	r3,r2,200825a4 <Fat_FileBrowseNext+0x124>
                                bError = TRUE;
20082598:	00800044 	movi	r2,1
2008259c:	e0bff715 	stw	r2,-36(fp)
200825a0:	00000506 	br	200825b8 <Fat_FileBrowseNext+0x138>
                            else
                                OrderValue = pLDIR->LDIR_Ord & 0x3F;
200825a4:	e0bffc17 	ldw	r2,-16(fp)
200825a8:	10800003 	ldbu	r2,0(r2)
200825ac:	10803fcc 	andi	r2,r2,255
200825b0:	10800fcc 	andi	r2,r2,63
200825b4:	e0bff915 	stw	r2,-28(fp)
                            memset(pFileContext->szName, 0, sizeof(pFileContext->szName));        
200825b8:	e0bfff17 	ldw	r2,-4(fp)
200825bc:	1009883a 	mov	r4,r2
200825c0:	000b883a 	mov	r5,zero
200825c4:	01804004 	movi	r6,256
200825c8:	008bed40 	call	2008bed4 <memset>
200825cc:	00000806 	br	200825f0 <Fat_FileBrowseNext+0x170>
                        }else{
                            if ((pLDIR->LDIR_Ord & 0x3F) != OrderValue)
200825d0:	e0bffc17 	ldw	r2,-16(fp)
200825d4:	10800003 	ldbu	r2,0(r2)
200825d8:	10803fcc 	andi	r2,r2,255
200825dc:	10c00fcc 	andi	r3,r2,63
200825e0:	e0bff917 	ldw	r2,-28(fp)
200825e4:	18800226 	beq	r3,r2,200825f0 <Fat_FileBrowseNext+0x170>
                                bError = TRUE;
200825e8:	00800044 	movi	r2,1
200825ec:	e0bff715 	stw	r2,-36(fp)
                        }
                    }
                    
                    //                        
                    if (!bError){
200825f0:	e0bff717 	ldw	r2,-36(fp)
200825f4:	1000261e 	bne	r2,zero,20082690 <Fat_FileBrowseNext+0x210>
                        int BaseOffset;
                        bLongFilename = TRUE;
200825f8:	00800044 	movi	r2,1
200825fc:	e0bff815 	stw	r2,-32(fp)
                        OrderValue--;
20082600:	e0bff917 	ldw	r2,-28(fp)
20082604:	10bfffc4 	addi	r2,r2,-1
20082608:	e0bff915 	stw	r2,-28(fp)
                        BaseOffset = OrderValue * 26;
2008260c:	e0bff917 	ldw	r2,-28(fp)
20082610:	108006a4 	muli	r2,r2,26
20082614:	e0bffd15 	stw	r2,-12(fp)
                        // cast filename
                        memcpy(pFileContext->szName+BaseOffset, pLDIR->LDIR_Name1, 10);
20082618:	e0bffd17 	ldw	r2,-12(fp)
2008261c:	e0ffff17 	ldw	r3,-4(fp)
20082620:	1887883a 	add	r3,r3,r2
20082624:	e0bffc17 	ldw	r2,-16(fp)
20082628:	10800044 	addi	r2,r2,1
2008262c:	1809883a 	mov	r4,r3
20082630:	100b883a 	mov	r5,r2
20082634:	01800284 	movi	r6,10
20082638:	008bd9c0 	call	2008bd9c <memcpy>
                        memcpy(pFileContext->szName+BaseOffset+10, pLDIR->LDIR_Name2, 12);
2008263c:	e0bffd17 	ldw	r2,-12(fp)
20082640:	10800284 	addi	r2,r2,10
20082644:	e0ffff17 	ldw	r3,-4(fp)
20082648:	1887883a 	add	r3,r3,r2
2008264c:	e0bffc17 	ldw	r2,-16(fp)
20082650:	10800384 	addi	r2,r2,14
20082654:	1809883a 	mov	r4,r3
20082658:	100b883a 	mov	r5,r2
2008265c:	01800304 	movi	r6,12
20082660:	008bd9c0 	call	2008bd9c <memcpy>
                        memcpy(pFileContext->szName+BaseOffset+22, pLDIR->LDIR_Name3, 4);
20082664:	e0bffd17 	ldw	r2,-12(fp)
20082668:	10800584 	addi	r2,r2,22
2008266c:	e0ffff17 	ldw	r3,-4(fp)
20082670:	1887883a 	add	r3,r3,r2
20082674:	e0bffc17 	ldw	r2,-16(fp)
20082678:	10800704 	addi	r2,r2,28
2008267c:	1809883a 	mov	r4,r3
20082680:	100b883a 	mov	r5,r2
20082684:	01800104 	movi	r6,4
20082688:	008bd9c0 	call	2008bd9c <memcpy>
2008268c:	00007a06 	br	20082878 <Fat_FileBrowseNext+0x3f8>
20082690:	00007906 	br	20082878 <Fat_FileBrowseNext+0x3f8>
                    }                        
                }else{
                    if (bLongFilename){
20082694:	e0bff817 	ldw	r2,-32(fp)
20082698:	10000e26 	beq	r2,zero,200826d4 <Fat_FileBrowseNext+0x254>
                        pFileContext->Attribute = ATTR_LONG_NAME;
2008269c:	e0bfff17 	ldw	r2,-4(fp)
200826a0:	00c003c4 	movi	r3,15
200826a4:	10c04505 	stb	r3,276(r2)
                        if ((pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY)) == 0)
200826a8:	e0bffb17 	ldw	r2,-20(fp)
200826ac:	108002c3 	ldbu	r2,11(r2)
200826b0:	10803fcc 	andi	r2,r2,255
200826b4:	10800c0c 	andi	r2,r2,48
200826b8:	1000031e 	bne	r2,zero,200826c8 <Fat_FileBrowseNext+0x248>
                            bError = TRUE;
200826bc:	00800044 	movi	r2,1
200826c0:	e0bff715 	stw	r2,-36(fp)
200826c4:	00000906 	br	200826ec <Fat_FileBrowseNext+0x26c>
                        else    
                            bFind = TRUE;
200826c8:	00800044 	movi	r2,1
200826cc:	e0bff615 	stw	r2,-40(fp)
200826d0:	00000606 	br	200826ec <Fat_FileBrowseNext+0x26c>
                    }else{
                        fatComposeShortFilename(pDir, pFileContext->szName);
200826d4:	e0bfff17 	ldw	r2,-4(fp)
200826d8:	e13ffb17 	ldw	r4,-20(fp)
200826dc:	100b883a 	mov	r5,r2
200826e0:	00829ac0 	call	200829ac <fatComposeShortFilename>
                        bFind = TRUE;
200826e4:	00800044 	movi	r2,1
200826e8:	e0bff615 	stw	r2,-40(fp)
                    }
                    
                    if (bFind){
200826ec:	e0bff617 	ldw	r2,-40(fp)
200826f0:	10006126 	beq	r2,zero,20082878 <Fat_FileBrowseNext+0x3f8>
                        // my ext
                        pFileContext->bLongFilename = bLongFilename;
200826f4:	e0bfff17 	ldw	r2,-4(fp)
200826f8:	e0fff817 	ldw	r3,-32(fp)
200826fc:	10c04015 	stw	r3,256(r2)
                        pFileContext->bFile = (pDir->Attribute & ATTR_ARCHIVE)?TRUE:FALSE;
20082700:	e0bffb17 	ldw	r2,-20(fp)
20082704:	108002c3 	ldbu	r2,11(r2)
20082708:	10803fcc 	andi	r2,r2,255
2008270c:	1080080c 	andi	r2,r2,32
20082710:	1004c03a 	cmpne	r2,r2,zero
20082714:	10c03fcc 	andi	r3,r2,255
20082718:	e0bfff17 	ldw	r2,-4(fp)
2008271c:	10c04115 	stw	r3,260(r2)
                        pFileContext->bDirectory = (pDir->Attribute & ATTR_DIRECTORY)?TRUE:FALSE;
20082720:	e0bffb17 	ldw	r2,-20(fp)
20082724:	108002c3 	ldbu	r2,11(r2)
20082728:	10803fcc 	andi	r2,r2,255
2008272c:	1080040c 	andi	r2,r2,16
20082730:	1004c03a 	cmpne	r2,r2,zero
20082734:	10c03fcc 	andi	r3,r2,255
20082738:	e0bfff17 	ldw	r2,-4(fp)
2008273c:	10c04215 	stw	r3,264(r2)
                        pFileContext->bVolume = (pDir->Attribute & ATTR_VOLUME_ID)?TRUE:FALSE;
20082740:	e0bffb17 	ldw	r2,-20(fp)
20082744:	108002c3 	ldbu	r2,11(r2)
20082748:	10803fcc 	andi	r2,r2,255
2008274c:	1080020c 	andi	r2,r2,8
20082750:	1004c03a 	cmpne	r2,r2,zero
20082754:	10c03fcc 	andi	r3,r2,255
20082758:	e0bfff17 	ldw	r2,-4(fp)
2008275c:	10c04315 	stw	r3,268(r2)
                        pFileContext->DirEntryIndex = pFatBrowseHandle->DirectoryIndex; // add in v2.0.0
20082760:	e0bffe17 	ldw	r2,-8(fp)
20082764:	10c00017 	ldw	r3,0(r2)
20082768:	e0bfff17 	ldw	r2,-4(fp)
2008276c:	10c04415 	stw	r3,272(r2)
                        
                        //
                        pFileContext->Attribute = pDir->Attribute;
20082770:	e0bffb17 	ldw	r2,-20(fp)
20082774:	10c002c3 	ldbu	r3,11(r2)
20082778:	e0bfff17 	ldw	r2,-4(fp)
2008277c:	10c04505 	stb	r3,276(r2)
                        pFileContext->CreateTime = pDir->CreateTime;
20082780:	e0bffb17 	ldw	r2,-20(fp)
20082784:	10c00383 	ldbu	r3,14(r2)
20082788:	108003c3 	ldbu	r2,15(r2)
2008278c:	1004923a 	slli	r2,r2,8
20082790:	10c4b03a 	or	r2,r2,r3
20082794:	1007883a 	mov	r3,r2
20082798:	e0bfff17 	ldw	r2,-4(fp)
2008279c:	10c0458d 	sth	r3,278(r2)
                        pFileContext->LastAccessDate = pDir->LastAccessDate;
200827a0:	e0bffb17 	ldw	r2,-20(fp)
200827a4:	10c00483 	ldbu	r3,18(r2)
200827a8:	108004c3 	ldbu	r2,19(r2)
200827ac:	1004923a 	slli	r2,r2,8
200827b0:	10c4b03a 	or	r2,r2,r3
200827b4:	1007883a 	mov	r3,r2
200827b8:	e0bfff17 	ldw	r2,-4(fp)
200827bc:	10c0468d 	sth	r3,282(r2)
                        pFileContext->FirstLogicalClusterHi = pDir->FirstLogicalClusterHi;
200827c0:	e0bffb17 	ldw	r2,-20(fp)
200827c4:	10c00503 	ldbu	r3,20(r2)
200827c8:	10800543 	ldbu	r2,21(r2)
200827cc:	1004923a 	slli	r2,r2,8
200827d0:	10c4b03a 	or	r2,r2,r3
200827d4:	1007883a 	mov	r3,r2
200827d8:	e0bfff17 	ldw	r2,-4(fp)
200827dc:	10c0470d 	sth	r3,284(r2)
                        pFileContext->LastWriteTime = pDir->LastWriteTime;
200827e0:	e0bffb17 	ldw	r2,-20(fp)
200827e4:	10c00583 	ldbu	r3,22(r2)
200827e8:	108005c3 	ldbu	r2,23(r2)
200827ec:	1004923a 	slli	r2,r2,8
200827f0:	10c4b03a 	or	r2,r2,r3
200827f4:	1007883a 	mov	r3,r2
200827f8:	e0bfff17 	ldw	r2,-4(fp)
200827fc:	10c0478d 	sth	r3,286(r2)
                        pFileContext->LastWriteDate = pDir->LastWriteDate;
20082800:	e0bffb17 	ldw	r2,-20(fp)
20082804:	10c00603 	ldbu	r3,24(r2)
20082808:	10800643 	ldbu	r2,25(r2)
2008280c:	1004923a 	slli	r2,r2,8
20082810:	10c4b03a 	or	r2,r2,r3
20082814:	1007883a 	mov	r3,r2
20082818:	e0bfff17 	ldw	r2,-4(fp)
2008281c:	10c0480d 	sth	r3,288(r2)
                        pFileContext->FirstLogicalCluster = pDir->FirstLogicalCluster;
20082820:	e0bffb17 	ldw	r2,-20(fp)
20082824:	10c00683 	ldbu	r3,26(r2)
20082828:	108006c3 	ldbu	r2,27(r2)
2008282c:	1004923a 	slli	r2,r2,8
20082830:	10c4b03a 	or	r2,r2,r3
20082834:	1007883a 	mov	r3,r2
20082838:	e0bfff17 	ldw	r2,-4(fp)
2008283c:	10c0488d 	sth	r3,290(r2)
                        pFileContext->FileSize = pDir->FileSize;
20082840:	e0bffb17 	ldw	r2,-20(fp)
20082844:	10c00703 	ldbu	r3,28(r2)
20082848:	11000743 	ldbu	r4,29(r2)
2008284c:	2008923a 	slli	r4,r4,8
20082850:	20c6b03a 	or	r3,r4,r3
20082854:	11000783 	ldbu	r4,30(r2)
20082858:	2008943a 	slli	r4,r4,16
2008285c:	20c6b03a 	or	r3,r4,r3
20082860:	108007c3 	ldbu	r2,31(r2)
20082864:	1004963a 	slli	r2,r2,24
20082868:	10c4b03a 	or	r2,r2,r3
2008286c:	1007883a 	mov	r3,r2
20082870:	e0bfff17 	ldw	r2,-4(fp)
20082874:	10c04915 	stw	r3,292(r2)
                    }                        
                }                    
            }                
        }            
    }while (!bFind && !fatIsLastDir(pDir) && !bError);
20082878:	e0bff617 	ldw	r2,-40(fp)
2008287c:	1000051e 	bne	r2,zero,20082894 <Fat_FileBrowseNext+0x414>
20082880:	e13ffb17 	ldw	r4,-20(fp)
20082884:	0083ef00 	call	20083ef0 <fatIsLastDir>
20082888:	1000021e 	bne	r2,zero,20082894 <Fat_FileBrowseNext+0x414>
2008288c:	e0bff717 	ldw	r2,-36(fp)
20082890:	103f1126 	beq	r2,zero,200824d8 <__flash_rwdata_start+0xfffe3904>
    
    return bFind;
20082894:	e0bff617 	ldw	r2,-40(fp)
    
}
20082898:	e037883a 	mov	sp,fp
2008289c:	dfc00117 	ldw	ra,4(sp)
200828a0:	df000017 	ldw	fp,0(sp)
200828a4:	dec00204 	addi	sp,sp,8
200828a8:	f800283a 	ret

200828ac <Fat_FileCount>:


unsigned int Fat_FileCount(FAT_HANDLE Fat){
200828ac:	deffb004 	addi	sp,sp,-320
200828b0:	dfc04f15 	stw	ra,316(sp)
200828b4:	df004e15 	stw	fp,312(sp)
200828b8:	df004e04 	addi	fp,sp,312
200828bc:	e13fff15 	stw	r4,-4(fp)
    unsigned int nCount = 0;
200828c0:	e03fb215 	stw	zero,-312(fp)
    FAT_BROWSE_HANDLE hBrowse;
    FILE_CONTEXT FileContext;
    
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
200828c4:	e0bfb304 	addi	r2,fp,-308
200828c8:	e13fff17 	ldw	r4,-4(fp)
200828cc:	100b883a 	mov	r5,r2
200828d0:	00824140 	call	20082414 <Fat_FileBrowseBegin>
200828d4:	10000a26 	beq	r2,zero,20082900 <Fat_FileCount+0x54>
        while(Fat_FileBrowseNext(&hBrowse, &FileContext))
200828d8:	00000306 	br	200828e8 <Fat_FileCount+0x3c>
            nCount++;
200828dc:	e0bfb217 	ldw	r2,-312(fp)
200828e0:	10800044 	addi	r2,r2,1
200828e4:	e0bfb215 	stw	r2,-312(fp)
    unsigned int nCount = 0;
    FAT_BROWSE_HANDLE hBrowse;
    FILE_CONTEXT FileContext;
    
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
        while(Fat_FileBrowseNext(&hBrowse, &FileContext))
200828e8:	e0ffb304 	addi	r3,fp,-308
200828ec:	e0bfb504 	addi	r2,fp,-300
200828f0:	1809883a 	mov	r4,r3
200828f4:	100b883a 	mov	r5,r2
200828f8:	00824800 	call	20082480 <Fat_FileBrowseNext>
200828fc:	103ff71e 	bne	r2,zero,200828dc <__flash_rwdata_start+0xfffe3d08>
            nCount++;
    }
    
    return nCount;
20082900:	e0bfb217 	ldw	r2,-312(fp)
}
20082904:	e037883a 	mov	sp,fp
20082908:	dfc00117 	ldw	ra,4(sp)
2008290c:	df000017 	ldw	fp,0(sp)
20082910:	dec00204 	addi	sp,sp,8
20082914:	f800283a 	ret

20082918 <fatSameLongFilename>:

bool fatSameLongFilename(alt_u16 *p1, alt_u16 *p2){
20082918:	defffc04 	addi	sp,sp,-16
2008291c:	df000315 	stw	fp,12(sp)
20082920:	df000304 	addi	fp,sp,12
20082924:	e13ffe15 	stw	r4,-8(fp)
20082928:	e17fff15 	stw	r5,-4(fp)
    bool bSame = TRUE;
2008292c:	00800044 	movi	r2,1
20082930:	e0bffd15 	stw	r2,-12(fp)
    
    while(bSame && ((*p1 != 0) || (*p2 != 0))){
20082934:	00000e06 	br	20082970 <fatSameLongFilename+0x58>
        if (*p1 != *p2){
20082938:	e0bffe17 	ldw	r2,-8(fp)
2008293c:	10c0000b 	ldhu	r3,0(r2)
20082940:	e0bfff17 	ldw	r2,-4(fp)
20082944:	1080000b 	ldhu	r2,0(r2)
20082948:	18ffffcc 	andi	r3,r3,65535
2008294c:	10bfffcc 	andi	r2,r2,65535
20082950:	18800126 	beq	r3,r2,20082958 <fatSameLongFilename+0x40>
            bSame = FALSE;
20082954:	e03ffd15 	stw	zero,-12(fp)
        }
        p1++;
20082958:	e0bffe17 	ldw	r2,-8(fp)
2008295c:	10800084 	addi	r2,r2,2
20082960:	e0bffe15 	stw	r2,-8(fp)
        p2++;
20082964:	e0bfff17 	ldw	r2,-4(fp)
20082968:	10800084 	addi	r2,r2,2
2008296c:	e0bfff15 	stw	r2,-4(fp)
}

bool fatSameLongFilename(alt_u16 *p1, alt_u16 *p2){
    bool bSame = TRUE;
    
    while(bSame && ((*p1 != 0) || (*p2 != 0))){
20082970:	e0bffd17 	ldw	r2,-12(fp)
20082974:	10000826 	beq	r2,zero,20082998 <fatSameLongFilename+0x80>
20082978:	e0bffe17 	ldw	r2,-8(fp)
2008297c:	1080000b 	ldhu	r2,0(r2)
20082980:	10bfffcc 	andi	r2,r2,65535
20082984:	103fec1e 	bne	r2,zero,20082938 <__flash_rwdata_start+0xfffe3d64>
20082988:	e0bfff17 	ldw	r2,-4(fp)
2008298c:	1080000b 	ldhu	r2,0(r2)
20082990:	10bfffcc 	andi	r2,r2,65535
20082994:	103fe81e 	bne	r2,zero,20082938 <__flash_rwdata_start+0xfffe3d64>
        p1++;
        p2++;
        
    }
    
    return bSame;
20082998:	e0bffd17 	ldw	r2,-12(fp)
}
2008299c:	e037883a 	mov	sp,fp
200829a0:	df000017 	ldw	fp,0(sp)
200829a4:	dec00104 	addi	sp,sp,4
200829a8:	f800283a 	ret

200829ac <fatComposeShortFilename>:


void fatComposeShortFilename(FAT_DIRECTORY *pDir, char *szFilename){
200829ac:	defffb04 	addi	sp,sp,-20
200829b0:	df000415 	stw	fp,16(sp)
200829b4:	df000404 	addi	fp,sp,16
200829b8:	e13ffe15 	stw	r4,-8(fp)
200829bc:	e17fff15 	stw	r5,-4(fp)
    int i,nPos=0;
200829c0:	e03ffd15 	stw	zero,-12(fp)
    
    i=0;
200829c4:	e03ffc15 	stw	zero,-16(fp)
    while(i < 8 && pDir->Name[i] != 0 && pDir->Name[i] != ' ')
200829c8:	00000d06 	br	20082a00 <fatComposeShortFilename+0x54>
        szFilename[nPos++] = pDir->Name[i++];
200829cc:	e0bffd17 	ldw	r2,-12(fp)
200829d0:	10c00044 	addi	r3,r2,1
200829d4:	e0fffd15 	stw	r3,-12(fp)
200829d8:	1007883a 	mov	r3,r2
200829dc:	e0bfff17 	ldw	r2,-4(fp)
200829e0:	10c7883a 	add	r3,r2,r3
200829e4:	e0bffc17 	ldw	r2,-16(fp)
200829e8:	11000044 	addi	r4,r2,1
200829ec:	e13ffc15 	stw	r4,-16(fp)
200829f0:	e13ffe17 	ldw	r4,-8(fp)
200829f4:	2085883a 	add	r2,r4,r2
200829f8:	10800003 	ldbu	r2,0(r2)
200829fc:	18800005 	stb	r2,0(r3)

void fatComposeShortFilename(FAT_DIRECTORY *pDir, char *szFilename){
    int i,nPos=0;
    
    i=0;
    while(i < 8 && pDir->Name[i] != 0 && pDir->Name[i] != ' ')
20082a00:	e0bffc17 	ldw	r2,-16(fp)
20082a04:	10800208 	cmpgei	r2,r2,8
20082a08:	1000111e 	bne	r2,zero,20082a50 <fatComposeShortFilename+0xa4>
20082a0c:	e0fffe17 	ldw	r3,-8(fp)
20082a10:	e0bffc17 	ldw	r2,-16(fp)
20082a14:	1885883a 	add	r2,r3,r2
20082a18:	10800003 	ldbu	r2,0(r2)
20082a1c:	10803fcc 	andi	r2,r2,255
20082a20:	1080201c 	xori	r2,r2,128
20082a24:	10bfe004 	addi	r2,r2,-128
20082a28:	10000926 	beq	r2,zero,20082a50 <fatComposeShortFilename+0xa4>
20082a2c:	e0fffe17 	ldw	r3,-8(fp)
20082a30:	e0bffc17 	ldw	r2,-16(fp)
20082a34:	1885883a 	add	r2,r3,r2
20082a38:	10800003 	ldbu	r2,0(r2)
20082a3c:	10803fcc 	andi	r2,r2,255
20082a40:	1080201c 	xori	r2,r2,128
20082a44:	10bfe004 	addi	r2,r2,-128
20082a48:	10800818 	cmpnei	r2,r2,32
20082a4c:	103fdf1e 	bne	r2,zero,200829cc <__flash_rwdata_start+0xfffe3df8>
        szFilename[nPos++] = pDir->Name[i++];
    
    if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY)){
20082a50:	e0bffe17 	ldw	r2,-8(fp)
20082a54:	108002c3 	ldbu	r2,11(r2)
20082a58:	10803fcc 	andi	r2,r2,255
20082a5c:	10800c0c 	andi	r2,r2,48
20082a60:	10003326 	beq	r2,zero,20082b30 <fatComposeShortFilename+0x184>
        if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY))     
20082a64:	e0bffe17 	ldw	r2,-8(fp)
20082a68:	108002c3 	ldbu	r2,11(r2)
20082a6c:	10803fcc 	andi	r2,r2,255
20082a70:	10800c0c 	andi	r2,r2,48
20082a74:	10000826 	beq	r2,zero,20082a98 <fatComposeShortFilename+0xec>
            szFilename[nPos++] = '.';   
20082a78:	e0bffd17 	ldw	r2,-12(fp)
20082a7c:	10c00044 	addi	r3,r2,1
20082a80:	e0fffd15 	stw	r3,-12(fp)
20082a84:	1007883a 	mov	r3,r2
20082a88:	e0bfff17 	ldw	r2,-4(fp)
20082a8c:	10c5883a 	add	r2,r2,r3
20082a90:	00c00b84 	movi	r3,46
20082a94:	10c00005 	stb	r3,0(r2)
        i=0;
20082a98:	e03ffc15 	stw	zero,-16(fp)
        while(i < 3 && pDir->Extension[i] != 0 && pDir->Extension[i] != ' ')
20082a9c:	00000e06 	br	20082ad8 <fatComposeShortFilename+0x12c>
            szFilename[nPos++] = pDir->Extension[i++];
20082aa0:	e0bffd17 	ldw	r2,-12(fp)
20082aa4:	10c00044 	addi	r3,r2,1
20082aa8:	e0fffd15 	stw	r3,-12(fp)
20082aac:	1007883a 	mov	r3,r2
20082ab0:	e0bfff17 	ldw	r2,-4(fp)
20082ab4:	10c7883a 	add	r3,r2,r3
20082ab8:	e0bffc17 	ldw	r2,-16(fp)
20082abc:	11000044 	addi	r4,r2,1
20082ac0:	e13ffc15 	stw	r4,-16(fp)
20082ac4:	e13ffe17 	ldw	r4,-8(fp)
20082ac8:	2085883a 	add	r2,r4,r2
20082acc:	10800204 	addi	r2,r2,8
20082ad0:	10800003 	ldbu	r2,0(r2)
20082ad4:	18800005 	stb	r2,0(r3)
    
    if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY)){
        if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY))     
            szFilename[nPos++] = '.';   
        i=0;
        while(i < 3 && pDir->Extension[i] != 0 && pDir->Extension[i] != ' ')
20082ad8:	e0bffc17 	ldw	r2,-16(fp)
20082adc:	108000c8 	cmpgei	r2,r2,3
20082ae0:	1000131e 	bne	r2,zero,20082b30 <fatComposeShortFilename+0x184>
20082ae4:	e0fffe17 	ldw	r3,-8(fp)
20082ae8:	e0bffc17 	ldw	r2,-16(fp)
20082aec:	1885883a 	add	r2,r3,r2
20082af0:	10800204 	addi	r2,r2,8
20082af4:	10800003 	ldbu	r2,0(r2)
20082af8:	10803fcc 	andi	r2,r2,255
20082afc:	1080201c 	xori	r2,r2,128
20082b00:	10bfe004 	addi	r2,r2,-128
20082b04:	10000a26 	beq	r2,zero,20082b30 <fatComposeShortFilename+0x184>
20082b08:	e0fffe17 	ldw	r3,-8(fp)
20082b0c:	e0bffc17 	ldw	r2,-16(fp)
20082b10:	1885883a 	add	r2,r3,r2
20082b14:	10800204 	addi	r2,r2,8
20082b18:	10800003 	ldbu	r2,0(r2)
20082b1c:	10803fcc 	andi	r2,r2,255
20082b20:	1080201c 	xori	r2,r2,128
20082b24:	10bfe004 	addi	r2,r2,-128
20082b28:	10800818 	cmpnei	r2,r2,32
20082b2c:	103fdc1e 	bne	r2,zero,20082aa0 <__flash_rwdata_start+0xfffe3ecc>
            szFilename[nPos++] = pDir->Extension[i++];
    }            
    szFilename[nPos++] = 0;
20082b30:	e0bffd17 	ldw	r2,-12(fp)
20082b34:	10c00044 	addi	r3,r2,1
20082b38:	e0fffd15 	stw	r3,-12(fp)
20082b3c:	1007883a 	mov	r3,r2
20082b40:	e0bfff17 	ldw	r2,-4(fp)
20082b44:	10c5883a 	add	r2,r2,r3
20082b48:	10000005 	stb	zero,0(r2)
}
20082b4c:	e037883a 	mov	sp,fp
20082b50:	df000017 	ldw	fp,0(sp)
20082b54:	dec00104 	addi	sp,sp,4
20082b58:	f800283a 	ret

20082b5c <Fat_CheckExtension>:


bool Fat_CheckExtension(FILE_CONTEXT *pFileContext, char* ext){
20082b5c:	defffb04 	addi	sp,sp,-20
20082b60:	dfc00415 	stw	ra,16(sp)
20082b64:	df000315 	stw	fp,12(sp)
20082b68:	df000304 	addi	fp,sp,12
20082b6c:	e13ffe15 	stw	r4,-8(fp)
20082b70:	e17fff15 	stw	r5,-4(fp)
	if(pFileContext == NULL)
20082b74:	e0bffe17 	ldw	r2,-8(fp)
20082b78:	1000021e 	bne	r2,zero,20082b84 <Fat_CheckExtension+0x28>
		return 0;
20082b7c:	0005883a 	mov	r2,zero
20082b80:	00000e06 	br	20082bbc <Fat_CheckExtension+0x60>

	char * point;
	if ((point = strrchr(pFileContext->szName, '.')) != NULL) {
20082b84:	e0bffe17 	ldw	r2,-8(fp)
20082b88:	1009883a 	mov	r4,r2
20082b8c:	01400b84 	movi	r5,46
20082b90:	008c3900 	call	2008c390 <strrchr>
20082b94:	e0bffd15 	stw	r2,-12(fp)
20082b98:	e0bffd17 	ldw	r2,-12(fp)
20082b9c:	10000626 	beq	r2,zero,20082bb8 <Fat_CheckExtension+0x5c>
		if (strcmp(point, ext) == 0) {
20082ba0:	e13ffd17 	ldw	r4,-12(fp)
20082ba4:	e17fff17 	ldw	r5,-4(fp)
20082ba8:	008c2540 	call	2008c254 <strcmp>
20082bac:	1000021e 	bne	r2,zero,20082bb8 <Fat_CheckExtension+0x5c>
			return 1;
20082bb0:	00800044 	movi	r2,1
20082bb4:	00000106 	br	20082bbc <Fat_CheckExtension+0x60>
		}
	}

	return 0;
20082bb8:	0005883a 	mov	r2,zero
}
20082bbc:	e037883a 	mov	sp,fp
20082bc0:	dfc00117 	ldw	ra,4(sp)
20082bc4:	df000017 	ldw	fp,0(sp)
20082bc8:	dec00204 	addi	sp,sp,8
20082bcc:	f800283a 	ret

20082bd0 <Fat_GetFileName>:


char* Fat_GetFileName(FILE_CONTEXT *pFileContext){
20082bd0:	defffe04 	addi	sp,sp,-8
20082bd4:	df000115 	stw	fp,4(sp)
20082bd8:	df000104 	addi	fp,sp,4
20082bdc:	e13fff15 	stw	r4,-4(fp)
	if(pFileContext == NULL)
20082be0:	e0bfff17 	ldw	r2,-4(fp)
20082be4:	1000021e 	bne	r2,zero,20082bf0 <Fat_GetFileName+0x20>
		return 0;
20082be8:	0005883a 	mov	r2,zero
20082bec:	00000106 	br	20082bf4 <Fat_GetFileName+0x24>
	else
		return pFileContext->szName;
20082bf0:	e0bfff17 	ldw	r2,-4(fp)
}
20082bf4:	e037883a 	mov	sp,fp
20082bf8:	df000017 	ldw	fp,0(sp)
20082bfc:	dec00104 	addi	sp,sp,4
20082c00:	f800283a 	ret

20082c04 <Fat_FileExist>:

bool Fat_FileExist(FAT_HANDLE Fat, const char *pFilename){
20082c04:	deffaf04 	addi	sp,sp,-324
20082c08:	dfc05015 	stw	ra,320(sp)
20082c0c:	df004f15 	stw	fp,316(sp)
20082c10:	df004f04 	addi	fp,sp,316
20082c14:	e13ffe15 	stw	r4,-8(fp)
20082c18:	e17fff15 	stw	r5,-4(fp)
    bool bFind = FALSE;
20082c1c:	e03fb115 	stw	zero,-316(fp)
    FAT_BROWSE_HANDLE hBrowse;     
    FILE_CONTEXT FileContext;
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
20082c20:	e0bfb204 	addi	r2,fp,-312
20082c24:	e13ffe17 	ldw	r4,-8(fp)
20082c28:	100b883a 	mov	r5,r2
20082c2c:	00824140 	call	20082414 <Fat_FileBrowseBegin>
20082c30:	10001a26 	beq	r2,zero,20082c9c <Fat_FileExist+0x98>
        while (!bFind && Fat_FileBrowseNext(&hBrowse, &FileContext)){
20082c34:	00000f06 	br	20082c74 <Fat_FileExist+0x70>
            if (FileContext.bLongFilename){
20082c38:	e0bff417 	ldw	r2,-48(fp)
20082c3c:	10000626 	beq	r2,zero,20082c58 <Fat_FileExist+0x54>
                bFind = fatSameLongFilename((alt_u16 *)FileContext.szName, (alt_u16 *)pFilename);
20082c40:	e0bfb404 	addi	r2,fp,-304
20082c44:	1009883a 	mov	r4,r2
20082c48:	e17fff17 	ldw	r5,-4(fp)
20082c4c:	00829180 	call	20082918 <fatSameLongFilename>
20082c50:	e0bfb115 	stw	r2,-316(fp)
20082c54:	00000706 	br	20082c74 <Fat_FileExist+0x70>
            }else{
                if (strcmp(FileContext.szName, pFilename) == 0)
20082c58:	e0bfb404 	addi	r2,fp,-304
20082c5c:	1009883a 	mov	r4,r2
20082c60:	e17fff17 	ldw	r5,-4(fp)
20082c64:	008c2540 	call	2008c254 <strcmp>
20082c68:	1000021e 	bne	r2,zero,20082c74 <Fat_FileExist+0x70>
                    bFind = TRUE;
20082c6c:	00800044 	movi	r2,1
20082c70:	e0bfb115 	stw	r2,-316(fp)
bool Fat_FileExist(FAT_HANDLE Fat, const char *pFilename){
    bool bFind = FALSE;
    FAT_BROWSE_HANDLE hBrowse;     
    FILE_CONTEXT FileContext;
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
        while (!bFind && Fat_FileBrowseNext(&hBrowse, &FileContext)){
20082c74:	e0bfb117 	ldw	r2,-316(fp)
20082c78:	1000061e 	bne	r2,zero,20082c94 <Fat_FileExist+0x90>
20082c7c:	e0ffb204 	addi	r3,fp,-312
20082c80:	e0bfb404 	addi	r2,fp,-304
20082c84:	1809883a 	mov	r4,r3
20082c88:	100b883a 	mov	r5,r2
20082c8c:	00824800 	call	20082480 <Fat_FileBrowseNext>
20082c90:	103fe91e 	bne	r2,zero,20082c38 <__flash_rwdata_start+0xfffe4064>
            }else{
                if (strcmp(FileContext.szName, pFilename) == 0)
                    bFind = TRUE;
            }    
        } // while 
        Fat_FileClose(Fat); 
20082c94:	e13ffe17 	ldw	r4,-8(fp)
20082c98:	00835940 	call	20083594 <Fat_FileClose>
    }
    return bFind;            
20082c9c:	e0bfb117 	ldw	r2,-316(fp)
}    
20082ca0:	e037883a 	mov	sp,fp
20082ca4:	dfc00117 	ldw	ra,4(sp)
20082ca8:	df000017 	ldw	fp,0(sp)
20082cac:	dec00204 	addi	sp,sp,8
20082cb0:	f800283a 	ret

20082cb4 <Fat_FileOpen>:
 
// File Access
FAT_FILE_HANDLE Fat_FileOpen(FAT_HANDLE Fat, const char *pFilename){
20082cb4:	deff6b04 	addi	sp,sp,-596
20082cb8:	dfc09415 	stw	ra,592(sp)
20082cbc:	df009315 	stw	fp,588(sp)
20082cc0:	df009304 	addi	fp,sp,588
20082cc4:	e13ffe15 	stw	r4,-8(fp)
20082cc8:	e17fff15 	stw	r5,-4(fp)
    bool bFind = FALSE;
20082ccc:	e03f6d15 	stw	zero,-588(fp)
    FAT_BROWSE_HANDLE hBrowse;     
    FILE_CONTEXT FileContext;
    static FAT_FILE_INFO fInfo;
    FAT_FILE_INFO *pFile = 0;
20082cd0:	e03f6e15 	stw	zero,-584(fp)
    int nPos = 0;
20082cd4:	e03f6f15 	stw	zero,-580(fp)
    char szWaveFilename[MAX_FILENAME_LENGTH];
    
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
20082cd8:	e0bf7204 	addi	r2,fp,-568
20082cdc:	e13ffe17 	ldw	r4,-8(fp)
20082ce0:	100b883a 	mov	r5,r2
20082ce4:	00824140 	call	20082414 <Fat_FileBrowseBegin>
20082ce8:	10007426 	beq	r2,zero,20082ebc <Fat_FileOpen+0x208>
        while (!bFind && Fat_FileBrowseNext(&hBrowse, &FileContext)){
20082cec:	00004c06 	br	20082e20 <Fat_FileOpen+0x16c>
            if (FileContext.bLongFilename){
20082cf0:	e0bfb417 	ldw	r2,-304(fp)
20082cf4:	10004326 	beq	r2,zero,20082e04 <Fat_FileOpen+0x150>
                //bFind = fatSameLongFilename((alt_u16 *)FileContext.szName, (alt_u16 *)pFilename);
                nPos = 0;
20082cf8:	e03f6f15 	stw	zero,-580(fp)
                alt_u16 *pData16;
                alt_u8 *pData8;
                pData16 = (alt_u16 *)FileContext.szName;
20082cfc:	e0bf7404 	addi	r2,fp,-560
20082d00:	e0bf7015 	stw	r2,-576(fp)
                pData8 = FileContext.szName;
20082d04:	e0bf7404 	addi	r2,fp,-560
20082d08:	e0bf7115 	stw	r2,-572(fp)
                while(*pData16){
20082d0c:	00002d06 	br	20082dc4 <Fat_FileOpen+0x110>
                    if (*pData8 && *pData8 != ' ')
20082d10:	e0bf7117 	ldw	r2,-572(fp)
20082d14:	10800003 	ldbu	r2,0(r2)
20082d18:	10803fcc 	andi	r2,r2,255
20082d1c:	10000e26 	beq	r2,zero,20082d58 <Fat_FileOpen+0xa4>
20082d20:	e0bf7117 	ldw	r2,-572(fp)
20082d24:	10800003 	ldbu	r2,0(r2)
20082d28:	10803fcc 	andi	r2,r2,255
20082d2c:	10800820 	cmpeqi	r2,r2,32
20082d30:	1000091e 	bne	r2,zero,20082d58 <Fat_FileOpen+0xa4>
                        szWaveFilename[nPos++] = *pData8;
20082d34:	e0bf6f17 	ldw	r2,-580(fp)
20082d38:	10c00044 	addi	r3,r2,1
20082d3c:	e0ff6f15 	stw	r3,-580(fp)
20082d40:	e0ff7117 	ldw	r3,-572(fp)
20082d44:	18c00003 	ldbu	r3,0(r3)
20082d48:	1809883a 	mov	r4,r3
20082d4c:	e0ffbe04 	addi	r3,fp,-264
20082d50:	1885883a 	add	r2,r3,r2
20082d54:	11000005 	stb	r4,0(r2)
                    pData8++;
20082d58:	e0bf7117 	ldw	r2,-572(fp)
20082d5c:	10800044 	addi	r2,r2,1
20082d60:	e0bf7115 	stw	r2,-572(fp)
                    if (*pData8 && *pData8 != ' ')
20082d64:	e0bf7117 	ldw	r2,-572(fp)
20082d68:	10800003 	ldbu	r2,0(r2)
20082d6c:	10803fcc 	andi	r2,r2,255
20082d70:	10000e26 	beq	r2,zero,20082dac <Fat_FileOpen+0xf8>
20082d74:	e0bf7117 	ldw	r2,-572(fp)
20082d78:	10800003 	ldbu	r2,0(r2)
20082d7c:	10803fcc 	andi	r2,r2,255
20082d80:	10800820 	cmpeqi	r2,r2,32
20082d84:	1000091e 	bne	r2,zero,20082dac <Fat_FileOpen+0xf8>
                        szWaveFilename[nPos++] = *pData8;
20082d88:	e0bf6f17 	ldw	r2,-580(fp)
20082d8c:	10c00044 	addi	r3,r2,1
20082d90:	e0ff6f15 	stw	r3,-580(fp)
20082d94:	e0ff7117 	ldw	r3,-572(fp)
20082d98:	18c00003 	ldbu	r3,0(r3)
20082d9c:	1809883a 	mov	r4,r3
20082da0:	e0ffbe04 	addi	r3,fp,-264
20082da4:	1885883a 	add	r2,r3,r2
20082da8:	11000005 	stb	r4,0(r2)
                    pData8++;                    
20082dac:	e0bf7117 	ldw	r2,-572(fp)
20082db0:	10800044 	addi	r2,r2,1
20082db4:	e0bf7115 	stw	r2,-572(fp)
                    //    
                    pData16++;
20082db8:	e0bf7017 	ldw	r2,-576(fp)
20082dbc:	10800084 	addi	r2,r2,2
20082dc0:	e0bf7015 	stw	r2,-576(fp)
                nPos = 0;
                alt_u16 *pData16;
                alt_u8 *pData8;
                pData16 = (alt_u16 *)FileContext.szName;
                pData8 = FileContext.szName;
                while(*pData16){
20082dc4:	e0bf7017 	ldw	r2,-576(fp)
20082dc8:	1080000b 	ldhu	r2,0(r2)
20082dcc:	10bfffcc 	andi	r2,r2,65535
20082dd0:	103fcf1e 	bne	r2,zero,20082d10 <__flash_rwdata_start+0xfffe413c>
                        szWaveFilename[nPos++] = *pData8;
                    pData8++;                    
                    //    
                    pData16++;
                }
                szWaveFilename[nPos] = 0;
20082dd4:	e0ffbe04 	addi	r3,fp,-264
20082dd8:	e0bf6f17 	ldw	r2,-580(fp)
20082ddc:	1885883a 	add	r2,r3,r2
20082de0:	10000005 	stb	zero,0(r2)
                
                if(strcmp(pFilename,szWaveFilename) == 0)
20082de4:	e0bfbe04 	addi	r2,fp,-264
20082de8:	e13fff17 	ldw	r4,-4(fp)
20082dec:	100b883a 	mov	r5,r2
20082df0:	008c2540 	call	2008c254 <strcmp>
20082df4:	1000021e 	bne	r2,zero,20082e00 <Fat_FileOpen+0x14c>
                    bFind = TRUE;
20082df8:	00800044 	movi	r2,1
20082dfc:	e0bf6d15 	stw	r2,-588(fp)
20082e00:	00000706 	br	20082e20 <Fat_FileOpen+0x16c>
            }else{
                if (strcmp(FileContext.szName, pFilename) == 0)
20082e04:	e0bf7404 	addi	r2,fp,-560
20082e08:	1009883a 	mov	r4,r2
20082e0c:	e17fff17 	ldw	r5,-4(fp)
20082e10:	008c2540 	call	2008c254 <strcmp>
20082e14:	1000021e 	bne	r2,zero,20082e20 <Fat_FileOpen+0x16c>
                    bFind = TRUE;
20082e18:	00800044 	movi	r2,1
20082e1c:	e0bf6d15 	stw	r2,-588(fp)
    FAT_FILE_INFO *pFile = 0;
    int nPos = 0;
    char szWaveFilename[MAX_FILENAME_LENGTH];
    
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
        while (!bFind && Fat_FileBrowseNext(&hBrowse, &FileContext)){
20082e20:	e0bf6d17 	ldw	r2,-588(fp)
20082e24:	1000061e 	bne	r2,zero,20082e40 <Fat_FileOpen+0x18c>
20082e28:	e0ff7204 	addi	r3,fp,-568
20082e2c:	e0bf7404 	addi	r2,fp,-560
20082e30:	1809883a 	mov	r4,r3
20082e34:	100b883a 	mov	r5,r2
20082e38:	00824800 	call	20082480 <Fat_FileBrowseNext>
20082e3c:	103fac1e 	bne	r2,zero,20082cf0 <__flash_rwdata_start+0xfffe411c>
                if (strcmp(FileContext.szName, pFilename) == 0)
                    bFind = TRUE;
            }    
        } // while 
        
        if (bFind){
20082e40:	e0bf6d17 	ldw	r2,-588(fp)
20082e44:	10001d26 	beq	r2,zero,20082ebc <Fat_FileOpen+0x208>
            //pFile = malloc(sizeof(FAT_FILE_INFO));
        	pFile = &fInfo;
20082e48:	00800034 	movhi	r2,0
20082e4c:	108abd04 	addi	r2,r2,10996
20082e50:	e0bf6e15 	stw	r2,-584(fp)
            if (pFile){
20082e54:	e0bf6e17 	ldw	r2,-584(fp)
20082e58:	10001826 	beq	r2,zero,20082ebc <Fat_FileOpen+0x208>
                pFile->OpenAttribute = FILE_OPEN_READ; 
20082e5c:	e0bf6e17 	ldw	r2,-584(fp)
20082e60:	00c00044 	movi	r3,1
20082e64:	10c00115 	stw	r3,4(r2)
                pFile->SeekPos = 0;
20082e68:	e0bf6e17 	ldw	r2,-584(fp)
20082e6c:	10000215 	stw	zero,8(r2)
                pFile->Directory = FileContext;
20082e70:	e0bf6e17 	ldw	r2,-584(fp)
20082e74:	11000504 	addi	r4,r2,20
20082e78:	e0ff7404 	addi	r3,fp,-560
20082e7c:	00804a04 	movi	r2,296
20082e80:	180b883a 	mov	r5,r3
20082e84:	100d883a 	mov	r6,r2
20082e88:	008bd9c0 	call	2008bd9c <memcpy>
                pFile->IsOpened = TRUE;
20082e8c:	e0bf6e17 	ldw	r2,-584(fp)
20082e90:	00c00044 	movi	r3,1
20082e94:	10c00015 	stw	r3,0(r2)
                pFile->Cluster = FileContext.FirstLogicalCluster;
20082e98:	e0bfbc8b 	ldhu	r2,-270(fp)
20082e9c:	10ffffcc 	andi	r3,r2,65535
20082ea0:	e0bf6e17 	ldw	r2,-584(fp)
20082ea4:	10c00315 	stw	r3,12(r2)
                pFile->ClusterSeq = 0;
20082ea8:	e0bf6e17 	ldw	r2,-584(fp)
20082eac:	10000415 	stw	zero,16(r2)
                pFile->Fat = Fat;
20082eb0:	e0bf6e17 	ldw	r2,-584(fp)
20082eb4:	e0fffe17 	ldw	r3,-8(fp)
20082eb8:	10c04f15 	stw	r3,316(r2)
            }    
        }    
    }  

    
    return (FAT_FILE_HANDLE)pFile;  
20082ebc:	e0bf6e17 	ldw	r2,-584(fp)
}
20082ec0:	e037883a 	mov	sp,fp
20082ec4:	dfc00117 	ldw	ra,4(sp)
20082ec8:	df000017 	ldw	fp,0(sp)
20082ecc:	dec00204 	addi	sp,sp,8
20082ed0:	f800283a 	ret

20082ed4 <Fat_FileSize>:


unsigned int Fat_FileSize(FAT_FILE_HANDLE hFileHandle){
20082ed4:	defffd04 	addi	sp,sp,-12
20082ed8:	df000215 	stw	fp,8(sp)
20082edc:	df000204 	addi	fp,sp,8
20082ee0:	e13fff15 	stw	r4,-4(fp)
    FAT_FILE_INFO *f = (FAT_FILE_INFO *)hFileHandle;
20082ee4:	e0bfff17 	ldw	r2,-4(fp)
20082ee8:	e0bffe15 	stw	r2,-8(fp)
    if (f->IsOpened)
20082eec:	e0bffe17 	ldw	r2,-8(fp)
20082ef0:	10800017 	ldw	r2,0(r2)
20082ef4:	10000326 	beq	r2,zero,20082f04 <Fat_FileSize+0x30>
        return f->Directory.FileSize;
20082ef8:	e0bffe17 	ldw	r2,-8(fp)
20082efc:	10804e17 	ldw	r2,312(r2)
20082f00:	00000106 	br	20082f08 <Fat_FileSize+0x34>
    return 0;        
20082f04:	0005883a 	mov	r2,zero
}
20082f08:	e037883a 	mov	sp,fp
20082f0c:	df000017 	ldw	fp,0(sp)
20082f10:	dec00104 	addi	sp,sp,4
20082f14:	f800283a 	ret

20082f18 <Fat_FileRead>:


bool Fat_FileRead(FAT_FILE_HANDLE hFileHandle, void *pBuffer, const int nBufferSize){
20082f18:	deffec04 	addi	sp,sp,-80
20082f1c:	dfc01315 	stw	ra,76(sp)
20082f20:	df001215 	stw	fp,72(sp)
20082f24:	df001204 	addi	fp,sp,72
20082f28:	e13ffd15 	stw	r4,-12(fp)
20082f2c:	e17ffe15 	stw	r5,-8(fp)
20082f30:	e1bfff15 	stw	r6,-4(fp)
    FAT_FILE_INFO *f = (FAT_FILE_INFO *)hFileHandle;
20082f34:	e0bffd17 	ldw	r2,-12(fp)
20082f38:	e0bff715 	stw	r2,-36(fp)
    VOLUME_INFO *pVol;
    alt_u32 Pos, PhysicalSecter, NextCluster, Cluster;
    alt_u32 BytesPerCluster, nReadCount=0, nClusterSeq;
20082f3c:	e03ff115 	stw	zero,-60(fp)
    int s;
    bool bSuccess= TRUE;
20082f40:	00800044 	movi	r2,1
20082f44:	e0bff315 	stw	r2,-52(fp)
    
    if (!f || !f->Fat)
20082f48:	e0bff717 	ldw	r2,-36(fp)
20082f4c:	10000326 	beq	r2,zero,20082f5c <Fat_FileRead+0x44>
20082f50:	e0bff717 	ldw	r2,-36(fp)
20082f54:	10804f17 	ldw	r2,316(r2)
20082f58:	1000021e 	bne	r2,zero,20082f64 <Fat_FileRead+0x4c>
        return FALSE;
20082f5c:	0005883a 	mov	r2,zero
20082f60:	00014706 	br	20083480 <Fat_FileRead+0x568>
    pVol = (VOLUME_INFO *)f->Fat;        
20082f64:	e0bff717 	ldw	r2,-36(fp)
20082f68:	10804f17 	ldw	r2,316(r2)
20082f6c:	e0bff815 	stw	r2,-32(fp)
    
    if (!f->IsOpened){
20082f70:	e0bff717 	ldw	r2,-36(fp)
20082f74:	10800017 	ldw	r2,0(r2)
20082f78:	1000021e 	bne	r2,zero,20082f84 <Fat_FileRead+0x6c>
        FAT_DEBUG(("[FAT] Fat_FileRead, file not opened\r\n"));
        return bSuccess;
20082f7c:	e0bff317 	ldw	r2,-52(fp)
20082f80:	00013f06 	br	20083480 <Fat_FileRead+0x568>
    }        
        
    BytesPerCluster = pVol->nBytesPerCluster; //gVolumeInfo.BPB_BytsPerSec * gVolumeInfo.BPB_SecPerCluster;  
20082f84:	e0bff817 	ldw	r2,-32(fp)
20082f88:	10800d17 	ldw	r2,52(r2)
20082f8c:	e0bff915 	stw	r2,-28(fp)
    Pos = f->SeekPos;
20082f90:	e0bff717 	ldw	r2,-36(fp)
20082f94:	10800217 	ldw	r2,8(r2)
20082f98:	e0bfee15 	stw	r2,-72(fp)
    if (BytesPerCluster == 65536){
20082f9c:	e0fff917 	ldw	r3,-28(fp)
20082fa0:	00800074 	movhi	r2,1
20082fa4:	18800a1e 	bne	r3,r2,20082fd0 <Fat_FileRead+0xb8>
    	nClusterSeq = Pos >> 16;
20082fa8:	e0bfee17 	ldw	r2,-72(fp)
20082fac:	1004d43a 	srli	r2,r2,16
20082fb0:	e0bff215 	stw	r2,-56(fp)
    	Pos -= (f->ClusterSeq << 16);
20082fb4:	e0bff717 	ldw	r2,-36(fp)
20082fb8:	10800417 	ldw	r2,16(r2)
20082fbc:	1004943a 	slli	r2,r2,16
20082fc0:	e0ffee17 	ldw	r3,-72(fp)
20082fc4:	1885c83a 	sub	r2,r3,r2
20082fc8:	e0bfee15 	stw	r2,-72(fp)
20082fcc:	00003206 	br	20083098 <Fat_FileRead+0x180>
    }else if (BytesPerCluster == 32768){
20082fd0:	e0fff917 	ldw	r3,-28(fp)
20082fd4:	00a00014 	movui	r2,32768
20082fd8:	18800a1e 	bne	r3,r2,20083004 <Fat_FileRead+0xec>
        nClusterSeq = Pos >> 15;
20082fdc:	e0bfee17 	ldw	r2,-72(fp)
20082fe0:	1004d3fa 	srli	r2,r2,15
20082fe4:	e0bff215 	stw	r2,-56(fp)
        Pos -= (f->ClusterSeq << 15);
20082fe8:	e0bff717 	ldw	r2,-36(fp)
20082fec:	10800417 	ldw	r2,16(r2)
20082ff0:	100493fa 	slli	r2,r2,15
20082ff4:	e0ffee17 	ldw	r3,-72(fp)
20082ff8:	1885c83a 	sub	r2,r3,r2
20082ffc:	e0bfee15 	stw	r2,-72(fp)
20083000:	00002506 	br	20083098 <Fat_FileRead+0x180>
    }else if (BytesPerCluster == 16384){
20083004:	e0bff917 	ldw	r2,-28(fp)
20083008:	10900018 	cmpnei	r2,r2,16384
2008300c:	10000a1e 	bne	r2,zero,20083038 <Fat_FileRead+0x120>
        nClusterSeq = Pos >> 14;
20083010:	e0bfee17 	ldw	r2,-72(fp)
20083014:	1004d3ba 	srli	r2,r2,14
20083018:	e0bff215 	stw	r2,-56(fp)
        Pos -= (f->ClusterSeq << 14);
2008301c:	e0bff717 	ldw	r2,-36(fp)
20083020:	10800417 	ldw	r2,16(r2)
20083024:	100493ba 	slli	r2,r2,14
20083028:	e0ffee17 	ldw	r3,-72(fp)
2008302c:	1885c83a 	sub	r2,r3,r2
20083030:	e0bfee15 	stw	r2,-72(fp)
20083034:	00001806 	br	20083098 <Fat_FileRead+0x180>
    }else if (BytesPerCluster == 2048){
20083038:	e0bff917 	ldw	r2,-28(fp)
2008303c:	10820018 	cmpnei	r2,r2,2048
20083040:	10000a1e 	bne	r2,zero,2008306c <Fat_FileRead+0x154>
        nClusterSeq = Pos >> 11;
20083044:	e0bfee17 	ldw	r2,-72(fp)
20083048:	1004d2fa 	srli	r2,r2,11
2008304c:	e0bff215 	stw	r2,-56(fp)
        Pos -= (f->ClusterSeq << 11);
20083050:	e0bff717 	ldw	r2,-36(fp)
20083054:	10800417 	ldw	r2,16(r2)
20083058:	100492fa 	slli	r2,r2,11
2008305c:	e0ffee17 	ldw	r3,-72(fp)
20083060:	1885c83a 	sub	r2,r3,r2
20083064:	e0bfee15 	stw	r2,-72(fp)
20083068:	00000b06 	br	20083098 <Fat_FileRead+0x180>
    }else{        
        nClusterSeq = Pos/BytesPerCluster;
2008306c:	e13fee17 	ldw	r4,-72(fp)
20083070:	e17ff917 	ldw	r5,-28(fp)
20083074:	0088a740 	call	20088a74 <__udivsi3>
20083078:	e0bff215 	stw	r2,-56(fp)
        Pos -= f->ClusterSeq*BytesPerCluster;
2008307c:	e0bff717 	ldw	r2,-36(fp)
20083080:	10c00417 	ldw	r3,16(r2)
20083084:	e0bff917 	ldw	r2,-28(fp)
20083088:	1885383a 	mul	r2,r3,r2
2008308c:	e0ffee17 	ldw	r3,-72(fp)
20083090:	1885c83a 	sub	r2,r3,r2
20083094:	e0bfee15 	stw	r2,-72(fp)
    }    
        
       
    Cluster = f->Cluster;
20083098:	e0bff717 	ldw	r2,-36(fp)
2008309c:	10800317 	ldw	r2,12(r2)
200830a0:	e0bff015 	stw	r2,-64(fp)
    if (nClusterSeq != f->ClusterSeq){
200830a4:	e0bff717 	ldw	r2,-36(fp)
200830a8:	10c00417 	ldw	r3,16(r2)
200830ac:	e0bff217 	ldw	r2,-56(fp)
200830b0:	18801f26 	beq	r3,r2,20083130 <Fat_FileRead+0x218>
        Cluster = f->Cluster;  //11/20/2007, richard
200830b4:	e0bff717 	ldw	r2,-36(fp)
200830b8:	10800317 	ldw	r2,12(r2)
200830bc:	e0bff015 	stw	r2,-64(fp)
        // move to first clustor for reading
        while (Pos >= BytesPerCluster && bSuccess){
200830c0:	00001606 	br	2008311c <Fat_FileRead+0x204>
            // go to next cluster
            NextCluster = fatNextCluster(pVol, Cluster); 
200830c4:	e13ff817 	ldw	r4,-32(fp)
200830c8:	e17ff017 	ldw	r5,-64(fp)
200830cc:	00839580 	call	20083958 <fatNextCluster>
200830d0:	e0bffa15 	stw	r2,-24(fp)
            if (NextCluster == 0){
200830d4:	e0bffa17 	ldw	r2,-24(fp)
200830d8:	1000021e 	bne	r2,zero,200830e4 <Fat_FileRead+0x1cc>
                bSuccess = FALSE;
200830dc:	e03ff315 	stw	zero,-52(fp)
200830e0:	00000206 	br	200830ec <Fat_FileRead+0x1d4>
                FAT_DEBUG(("[FAT] Fat_FileRead, no next Cluster, current Cluster=%d\r\n", Cluster));
            }else{
                Cluster = NextCluster;
200830e4:	e0bffa17 	ldw	r2,-24(fp)
200830e8:	e0bff015 	stw	r2,-64(fp)
            }        
            Pos -= BytesPerCluster;
200830ec:	e0ffee17 	ldw	r3,-72(fp)
200830f0:	e0bff917 	ldw	r2,-28(fp)
200830f4:	1885c83a 	sub	r2,r3,r2
200830f8:	e0bfee15 	stw	r2,-72(fp)
            f->Cluster = Cluster;
200830fc:	e0bff717 	ldw	r2,-36(fp)
20083100:	e0fff017 	ldw	r3,-64(fp)
20083104:	10c00315 	stw	r3,12(r2)
            f->ClusterSeq++; 
20083108:	e0bff717 	ldw	r2,-36(fp)
2008310c:	10800417 	ldw	r2,16(r2)
20083110:	10c00044 	addi	r3,r2,1
20083114:	e0bff717 	ldw	r2,-36(fp)
20083118:	10c00415 	stw	r3,16(r2)
       
    Cluster = f->Cluster;
    if (nClusterSeq != f->ClusterSeq){
        Cluster = f->Cluster;  //11/20/2007, richard
        // move to first clustor for reading
        while (Pos >= BytesPerCluster && bSuccess){
2008311c:	e0ffee17 	ldw	r3,-72(fp)
20083120:	e0bff917 	ldw	r2,-28(fp)
20083124:	18800236 	bltu	r3,r2,20083130 <Fat_FileRead+0x218>
20083128:	e0bff317 	ldw	r2,-52(fp)
2008312c:	103fe51e 	bne	r2,zero,200830c4 <__flash_rwdata_start+0xfffe44f0>
    alt_u32 SectorOffset, ByteOffset, SectorsToRead;
    int nCopyCount, nCopySectors;

//    SectorOffset = Pos/pVol->BPB_BytsPerSec;
//    ByteOffset = Pos - SectorOffset*pVol->BPB_BytsPerSec;
    SectorOffset = Pos >> 9;
20083130:	e0bfee17 	ldw	r2,-72(fp)
20083134:	1004d27a 	srli	r2,r2,9
20083138:	e0bff415 	stw	r2,-48(fp)
    ByteOffset = Pos - SectorOffset*pVol->BPB_BytsPerSec;
2008313c:	e0bff817 	ldw	r2,-32(fp)
20083140:	10c00717 	ldw	r3,28(r2)
20083144:	e0bff417 	ldw	r2,-48(fp)
20083148:	1885383a 	mul	r2,r3,r2
2008314c:	e0ffee17 	ldw	r3,-72(fp)
20083150:	1885c83a 	sub	r2,r3,r2
20083154:	e0bffb15 	stw	r2,-20(fp)

    PhysicalSecter = (Cluster-2)*pVol->BPB_SecPerCluster + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
20083158:	e0bff017 	ldw	r2,-64(fp)
2008315c:	10ffff84 	addi	r3,r2,-2
20083160:	e0bff817 	ldw	r2,-32(fp)
20083164:	10800817 	ldw	r2,32(r2)
20083168:	1887383a 	mul	r3,r3,r2
2008316c:	e0bff817 	ldw	r2,-32(fp)
20083170:	10801017 	ldw	r2,64(r2)
20083174:	1885883a 	add	r2,r3,r2
20083178:	e0bfef15 	stw	r2,-68(fp)
    PhysicalSecter += SectorOffset;
2008317c:	e0ffef17 	ldw	r3,-68(fp)
20083180:	e0bff417 	ldw	r2,-48(fp)
20083184:	1885883a 	add	r2,r3,r2
20083188:	e0bfef15 	stw	r2,-68(fp)
    nReadCount = 0;
2008318c:	e03ff115 	stw	zero,-60(fp)

    // case: partial read of the first sector
    if((ByteOffset > 0) || (nBufferSize < 512)){
20083190:	e0bffb17 	ldw	r2,-20(fp)
20083194:	1000031e 	bne	r2,zero,200831a4 <Fat_FileRead+0x28c>
20083198:	e0bfff17 	ldw	r2,-4(fp)
2008319c:	10808008 	cmpgei	r2,r2,512
200831a0:	1000441e 	bne	r2,zero,200832b4 <Fat_FileRead+0x39c>
    	if(!fatReadSecter(pVol, PhysicalSecter)){
200831a4:	e13ff817 	ldw	r4,-32(fp)
200831a8:	e17fef17 	ldw	r5,-68(fp)
200831ac:	00842440 	call	20084244 <fatReadSecter>
200831b0:	1000021e 	bne	r2,zero,200831bc <Fat_FileRead+0x2a4>
			FAT_DEBUG(("[FAT] Fat_FileRead, couldn't read sector %d\r\n", PhysicalSecter));
			return FALSE;
200831b4:	0005883a 	mov	r2,zero
200831b8:	0000b106 	br	20083480 <Fat_FileRead+0x568>
        }

    	nCopyCount = nBufferSize > (512 - ByteOffset)? 512 - ByteOffset : nBufferSize;
200831bc:	e13fff17 	ldw	r4,-4(fp)
200831c0:	00c08004 	movi	r3,512
200831c4:	e0bffb17 	ldw	r2,-20(fp)
200831c8:	1887c83a 	sub	r3,r3,r2
200831cc:	2005883a 	mov	r2,r4
200831d0:	1880012e 	bgeu	r3,r2,200831d8 <Fat_FileRead+0x2c0>
200831d4:	1805883a 	mov	r2,r3
200831d8:	e0bffc15 	stw	r2,-16(fp)
    	memcpy(pBuffer, pVol->Secter_Data+ByteOffset, nCopyCount);
200831dc:	e0bffb17 	ldw	r2,-20(fp)
200831e0:	10801104 	addi	r2,r2,68
200831e4:	e0fff817 	ldw	r3,-32(fp)
200831e8:	1887883a 	add	r3,r3,r2
200831ec:	e0bffc17 	ldw	r2,-16(fp)
200831f0:	e13ffe17 	ldw	r4,-8(fp)
200831f4:	180b883a 	mov	r5,r3
200831f8:	100d883a 	mov	r6,r2
200831fc:	008bd9c0 	call	2008bd9c <memcpy>
    	nReadCount = nCopyCount;
20083200:	e0bffc17 	ldw	r2,-16(fp)
20083204:	e0bff115 	stw	r2,-60(fp)

		if(nReadCount < nBufferSize && SectorOffset == pVol->BPB_SecPerCluster - 1){
20083208:	e0bfff17 	ldw	r2,-4(fp)
2008320c:	e0fff117 	ldw	r3,-60(fp)
20083210:	1880222e 	bgeu	r3,r2,2008329c <Fat_FileRead+0x384>
20083214:	e0bff817 	ldw	r2,-32(fp)
20083218:	10800817 	ldw	r2,32(r2)
2008321c:	10ffffc4 	addi	r3,r2,-1
20083220:	e0bff417 	ldw	r2,-48(fp)
20083224:	18801d1e 	bne	r3,r2,2008329c <Fat_FileRead+0x384>
			// case: last sector of the cluster
			NextCluster = fatNextCluster(pVol, Cluster);
20083228:	e13ff817 	ldw	r4,-32(fp)
2008322c:	e17ff017 	ldw	r5,-64(fp)
20083230:	00839580 	call	20083958 <fatNextCluster>
20083234:	e0bffa15 	stw	r2,-24(fp)
			if (NextCluster == 0){
20083238:	e0bffa17 	ldw	r2,-24(fp)
2008323c:	1000021e 	bne	r2,zero,20083248 <Fat_FileRead+0x330>
				FAT_DEBUG(("[FAT] Fat_FileRead, no next cluster\r\n"));
				return FALSE;
20083240:	0005883a 	mov	r2,zero
20083244:	00008e06 	br	20083480 <Fat_FileRead+0x568>
			}

			Cluster = NextCluster;
20083248:	e0bffa17 	ldw	r2,-24(fp)
2008324c:	e0bff015 	stw	r2,-64(fp)
			f->ClusterSeq++;
20083250:	e0bff717 	ldw	r2,-36(fp)
20083254:	10800417 	ldw	r2,16(r2)
20083258:	10c00044 	addi	r3,r2,1
2008325c:	e0bff717 	ldw	r2,-36(fp)
20083260:	10c00415 	stw	r3,16(r2)
			f->Cluster = Cluster;
20083264:	e0bff717 	ldw	r2,-36(fp)
20083268:	e0fff017 	ldw	r3,-64(fp)
2008326c:	10c00315 	stw	r3,12(r2)
			PhysicalSecter = (Cluster-2)*pVol->BPB_SecPerCluster + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
20083270:	e0bff017 	ldw	r2,-64(fp)
20083274:	10ffff84 	addi	r3,r2,-2
20083278:	e0bff817 	ldw	r2,-32(fp)
2008327c:	10800817 	ldw	r2,32(r2)
20083280:	1887383a 	mul	r3,r3,r2
20083284:	e0bff817 	ldw	r2,-32(fp)
20083288:	10801017 	ldw	r2,64(r2)
2008328c:	1885883a 	add	r2,r3,r2
20083290:	e0bfef15 	stw	r2,-68(fp)
			SectorOffset = 0;
20083294:	e03ff415 	stw	zero,-48(fp)
20083298:	00000606 	br	200832b4 <Fat_FileRead+0x39c>
    	} else {
    		SectorOffset++;
2008329c:	e0bff417 	ldw	r2,-48(fp)
200832a0:	10800044 	addi	r2,r2,1
200832a4:	e0bff415 	stw	r2,-48(fp)
    		PhysicalSecter++;
200832a8:	e0bfef17 	ldw	r2,-68(fp)
200832ac:	10800044 	addi	r2,r2,1
200832b0:	e0bfef15 	stw	r2,-68(fp)
    	}
    }

    //SectorsToRead = (nBufferSize - nReadCount)/pVol->BPB_BytsPerSec;
    SectorsToRead = (nBufferSize - nReadCount) >> 9;
200832b4:	e0ffff17 	ldw	r3,-4(fp)
200832b8:	e0bff117 	ldw	r2,-60(fp)
200832bc:	1885c83a 	sub	r2,r3,r2
200832c0:	1004d27a 	srli	r2,r2,9
200832c4:	e0bff515 	stw	r2,-44(fp)

    while(SectorsToRead > 0){
200832c8:	00004c06 	br	200833fc <Fat_FileRead+0x4e4>
    	if(SectorsToRead < (pVol->BPB_SecPerCluster - SectorOffset)){
200832cc:	e0bff817 	ldw	r2,-32(fp)
200832d0:	10c00817 	ldw	r3,32(r2)
200832d4:	e0bff417 	ldw	r2,-48(fp)
200832d8:	1885c83a 	sub	r2,r3,r2
200832dc:	e0fff517 	ldw	r3,-44(fp)
200832e0:	1880032e 	bgeu	r3,r2,200832f0 <Fat_FileRead+0x3d8>
    		nCopySectors = SectorsToRead;
200832e4:	e0bff517 	ldw	r2,-44(fp)
200832e8:	e0bff615 	stw	r2,-40(fp)
200832ec:	00000506 	br	20083304 <Fat_FileRead+0x3ec>
    	} else {
    		nCopySectors = pVol->BPB_SecPerCluster - SectorOffset;
200832f0:	e0bff817 	ldw	r2,-32(fp)
200832f4:	10c00817 	ldw	r3,32(r2)
200832f8:	e0bff417 	ldw	r2,-48(fp)
200832fc:	1885c83a 	sub	r2,r3,r2
20083300:	e0bff615 	stw	r2,-40(fp)
    	}

        if(!fatReadMultiSecter(pVol, PhysicalSecter, nCopySectors, pBuffer+nReadCount)){
20083304:	e1bff617 	ldw	r6,-40(fp)
20083308:	e0fffe17 	ldw	r3,-8(fp)
2008330c:	e0bff117 	ldw	r2,-60(fp)
20083310:	1885883a 	add	r2,r3,r2
20083314:	e13ff817 	ldw	r4,-32(fp)
20083318:	e17fef17 	ldw	r5,-68(fp)
2008331c:	100f883a 	mov	r7,r2
20083320:	00842d40 	call	200842d4 <fatReadMultiSecter>
20083324:	1000021e 	bne	r2,zero,20083330 <Fat_FileRead+0x418>
			FAT_DEBUG(("[FAT] Fat_FileRead, couldn't read sectors: %d - %d\r\n", PhysicalSecter, nCopySectors));
			return FALSE;
20083328:	0005883a 	mov	r2,zero
2008332c:	00005406 	br	20083480 <Fat_FileRead+0x568>
        }
        SectorsToRead -= nCopySectors;
20083330:	e0bff617 	ldw	r2,-40(fp)
20083334:	e0fff517 	ldw	r3,-44(fp)
20083338:	1885c83a 	sub	r2,r3,r2
2008333c:	e0bff515 	stw	r2,-44(fp)
        //nReadCount += nCopySectors*pVol->BPB_BytsPerSec;
        nReadCount += nCopySectors << 9;
20083340:	e0bff617 	ldw	r2,-40(fp)
20083344:	1004927a 	slli	r2,r2,9
20083348:	1007883a 	mov	r3,r2
2008334c:	e0bff117 	ldw	r2,-60(fp)
20083350:	10c5883a 	add	r2,r2,r3
20083354:	e0bff115 	stw	r2,-60(fp)
        PhysicalSecter += nCopySectors;
20083358:	e0bff617 	ldw	r2,-40(fp)
2008335c:	e0ffef17 	ldw	r3,-68(fp)
20083360:	1885883a 	add	r2,r3,r2
20083364:	e0bfef15 	stw	r2,-68(fp)

        // find next sector if all the sectors in current clusters are read and there is still data to read
        if(nCopySectors == (pVol->BPB_SecPerCluster - SectorOffset) && nReadCount < nBufferSize){
20083368:	e0fff617 	ldw	r3,-40(fp)
2008336c:	e0bff817 	ldw	r2,-32(fp)
20083370:	11000817 	ldw	r4,32(r2)
20083374:	e0bff417 	ldw	r2,-48(fp)
20083378:	2085c83a 	sub	r2,r4,r2
2008337c:	18801f1e 	bne	r3,r2,200833fc <Fat_FileRead+0x4e4>
20083380:	e0bfff17 	ldw	r2,-4(fp)
20083384:	e0fff117 	ldw	r3,-60(fp)
20083388:	18801c2e 	bgeu	r3,r2,200833fc <Fat_FileRead+0x4e4>
			NextCluster = fatNextCluster(pVol, Cluster);
2008338c:	e13ff817 	ldw	r4,-32(fp)
20083390:	e17ff017 	ldw	r5,-64(fp)
20083394:	00839580 	call	20083958 <fatNextCluster>
20083398:	e0bffa15 	stw	r2,-24(fp)
			if (NextCluster == 0){
2008339c:	e0bffa17 	ldw	r2,-24(fp)
200833a0:	1000021e 	bne	r2,zero,200833ac <Fat_FileRead+0x494>
				FAT_DEBUG(("[FAT] Fat_FileRead, no next cluster\r\n"));
				return FALSE;
200833a4:	0005883a 	mov	r2,zero
200833a8:	00003506 	br	20083480 <Fat_FileRead+0x568>
			}else{
				Cluster = NextCluster;
200833ac:	e0bffa17 	ldw	r2,-24(fp)
200833b0:	e0bff015 	stw	r2,-64(fp)
			}
			f->ClusterSeq++;
200833b4:	e0bff717 	ldw	r2,-36(fp)
200833b8:	10800417 	ldw	r2,16(r2)
200833bc:	10c00044 	addi	r3,r2,1
200833c0:	e0bff717 	ldw	r2,-36(fp)
200833c4:	10c00415 	stw	r3,16(r2)
			f->Cluster = Cluster;
200833c8:	e0bff717 	ldw	r2,-36(fp)
200833cc:	e0fff017 	ldw	r3,-64(fp)
200833d0:	10c00315 	stw	r3,12(r2)
			PhysicalSecter = (Cluster-2)*pVol->BPB_SecPerCluster + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
200833d4:	e0bff017 	ldw	r2,-64(fp)
200833d8:	10ffff84 	addi	r3,r2,-2
200833dc:	e0bff817 	ldw	r2,-32(fp)
200833e0:	10800817 	ldw	r2,32(r2)
200833e4:	1887383a 	mul	r3,r3,r2
200833e8:	e0bff817 	ldw	r2,-32(fp)
200833ec:	10801017 	ldw	r2,64(r2)
200833f0:	1885883a 	add	r2,r3,r2
200833f4:	e0bfef15 	stw	r2,-68(fp)
			SectorOffset = 0;
200833f8:	e03ff415 	stw	zero,-48(fp)
    }

    //SectorsToRead = (nBufferSize - nReadCount)/pVol->BPB_BytsPerSec;
    SectorsToRead = (nBufferSize - nReadCount) >> 9;

    while(SectorsToRead > 0){
200833fc:	e0bff517 	ldw	r2,-44(fp)
20083400:	103fb21e 	bne	r2,zero,200832cc <__flash_rwdata_start+0xfffe46f8>
			PhysicalSecter = (Cluster-2)*pVol->BPB_SecPerCluster + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
			SectorOffset = 0;
        }
    }

    if(nReadCount < nBufferSize){
20083404:	e0bfff17 	ldw	r2,-4(fp)
20083408:	e0fff117 	ldw	r3,-60(fp)
2008340c:	1880132e 	bgeu	r3,r2,2008345c <Fat_FileRead+0x544>
    	if(!fatReadSecter(pVol, PhysicalSecter)){
20083410:	e13ff817 	ldw	r4,-32(fp)
20083414:	e17fef17 	ldw	r5,-68(fp)
20083418:	00842440 	call	20084244 <fatReadSecter>
2008341c:	1000021e 	bne	r2,zero,20083428 <Fat_FileRead+0x510>
			FAT_DEBUG(("[FAT] Fat_FileRead, couldn't read sector\r\n"));
			return FALSE;
20083420:	0005883a 	mov	r2,zero
20083424:	00001606 	br	20083480 <Fat_FileRead+0x568>
        }

    	nCopyCount = nBufferSize - nReadCount;
20083428:	e0ffff17 	ldw	r3,-4(fp)
2008342c:	e0bff117 	ldw	r2,-60(fp)
20083430:	1885c83a 	sub	r2,r3,r2
20083434:	e0bffc15 	stw	r2,-16(fp)
    	memcpy(pBuffer+nReadCount, pVol->Secter_Data, nCopyCount);
20083438:	e0fffe17 	ldw	r3,-8(fp)
2008343c:	e0bff117 	ldw	r2,-60(fp)
20083440:	1889883a 	add	r4,r3,r2
20083444:	e0bff817 	ldw	r2,-32(fp)
20083448:	10c01104 	addi	r3,r2,68
2008344c:	e0bffc17 	ldw	r2,-16(fp)
20083450:	180b883a 	mov	r5,r3
20083454:	100d883a 	mov	r6,r2
20083458:	008bd9c0 	call	2008bd9c <memcpy>
            f->Cluster = Cluster;
        }                    
    }
#endif
    
    if (bSuccess){
2008345c:	e0bff317 	ldw	r2,-52(fp)
20083460:	10000626 	beq	r2,zero,2008347c <Fat_FileRead+0x564>
        f->SeekPos += nBufferSize;
20083464:	e0bff717 	ldw	r2,-36(fp)
20083468:	10c00217 	ldw	r3,8(r2)
2008346c:	e0bfff17 	ldw	r2,-4(fp)
20083470:	1887883a 	add	r3,r3,r2
20083474:	e0bff717 	ldw	r2,-36(fp)
20083478:	10c00215 	stw	r3,8(r2)
    }        
        
    
    return bSuccess;
2008347c:	e0bff317 	ldw	r2,-52(fp)
}
20083480:	e037883a 	mov	sp,fp
20083484:	dfc00117 	ldw	ra,4(sp)
20083488:	df000017 	ldw	fp,0(sp)
2008348c:	dec00204 	addi	sp,sp,8
20083490:	f800283a 	ret

20083494 <Fat_FileSeek>:


bool Fat_FileSeek(FAT_FILE_HANDLE hFileHandle, const FAT_SEEK_POS SeekPos, const int nOffset){
20083494:	defff904 	addi	sp,sp,-28
20083498:	df000615 	stw	fp,24(sp)
2008349c:	df000604 	addi	fp,sp,24
200834a0:	e13ffd15 	stw	r4,-12(fp)
200834a4:	e17ffe15 	stw	r5,-8(fp)
200834a8:	e1bfff15 	stw	r6,-4(fp)
    FAT_FILE_INFO *f = (FAT_FILE_INFO *)hFileHandle;
200834ac:	e0bffd17 	ldw	r2,-12(fp)
200834b0:	e0bffb15 	stw	r2,-20(fp)
    VOLUME_INFO *pVol;
    bool bSuccess= TRUE;
200834b4:	00800044 	movi	r2,1
200834b8:	e0bffa15 	stw	r2,-24(fp)

    if (!f || !f->Fat)
200834bc:	e0bffb17 	ldw	r2,-20(fp)
200834c0:	10000326 	beq	r2,zero,200834d0 <Fat_FileSeek+0x3c>
200834c4:	e0bffb17 	ldw	r2,-20(fp)
200834c8:	10804f17 	ldw	r2,316(r2)
200834cc:	1000021e 	bne	r2,zero,200834d8 <Fat_FileSeek+0x44>
        return FALSE;
200834d0:	0005883a 	mov	r2,zero
200834d4:	00002b06 	br	20083584 <Fat_FileSeek+0xf0>
    pVol = (VOLUME_INFO *)f->Fat;        
200834d8:	e0bffb17 	ldw	r2,-20(fp)
200834dc:	10804f17 	ldw	r2,316(r2)
200834e0:	e0bffc15 	stw	r2,-16(fp)
    
    if (!f->IsOpened)
200834e4:	e0bffb17 	ldw	r2,-20(fp)
200834e8:	10800017 	ldw	r2,0(r2)
200834ec:	1000021e 	bne	r2,zero,200834f8 <Fat_FileSeek+0x64>
        return FALSE;
200834f0:	0005883a 	mov	r2,zero
200834f4:	00002306 	br	20083584 <Fat_FileSeek+0xf0>
        
    switch(SeekPos){
200834f8:	e0bffe17 	ldw	r2,-8(fp)
200834fc:	10c00060 	cmpeqi	r3,r2,1
20083500:	1800081e 	bne	r3,zero,20083524 <Fat_FileSeek+0x90>
20083504:	0080032e 	bgeu	zero,r2,20083514 <Fat_FileSeek+0x80>
20083508:	108000a0 	cmpeqi	r2,r2,2
2008350c:	10000c1e 	bne	r2,zero,20083540 <Fat_FileSeek+0xac>
20083510:	00001206 	br	2008355c <Fat_FileSeek+0xc8>
        case FILE_SEEK_BEGIN: 
            f->SeekPos = nOffset; 
20083514:	e0ffff17 	ldw	r3,-4(fp)
20083518:	e0bffb17 	ldw	r2,-20(fp)
2008351c:	10c00215 	stw	r3,8(r2)
            break;
20083520:	00001006 	br	20083564 <Fat_FileSeek+0xd0>
        case FILE_SEEK_CURRENT: 
            f->SeekPos += nOffset; 
20083524:	e0bffb17 	ldw	r2,-20(fp)
20083528:	10c00217 	ldw	r3,8(r2)
2008352c:	e0bfff17 	ldw	r2,-4(fp)
20083530:	1887883a 	add	r3,r3,r2
20083534:	e0bffb17 	ldw	r2,-20(fp)
20083538:	10c00215 	stw	r3,8(r2)
            break;
2008353c:	00000906 	br	20083564 <Fat_FileSeek+0xd0>
        case FILE_SEEK_END: 
            f->SeekPos = f->Directory.FileSize+nOffset; 
20083540:	e0bffb17 	ldw	r2,-20(fp)
20083544:	10c04e17 	ldw	r3,312(r2)
20083548:	e0bfff17 	ldw	r2,-4(fp)
2008354c:	1887883a 	add	r3,r3,r2
20083550:	e0bffb17 	ldw	r2,-20(fp)
20083554:	10c00215 	stw	r3,8(r2)
            break;
20083558:	00000206 	br	20083564 <Fat_FileSeek+0xd0>
        default:
            bSuccess = FALSE;
2008355c:	e03ffa15 	stw	zero,-24(fp)
            break;    
20083560:	0001883a 	nop
              
    }
    f->Cluster = f->Directory.FirstLogicalCluster;
20083564:	e0bffb17 	ldw	r2,-20(fp)
20083568:	10804d8b 	ldhu	r2,310(r2)
2008356c:	10ffffcc 	andi	r3,r2,65535
20083570:	e0bffb17 	ldw	r2,-20(fp)
20083574:	10c00315 	stw	r3,12(r2)
    f->ClusterSeq = 0;
20083578:	e0bffb17 	ldw	r2,-20(fp)
2008357c:	10000415 	stw	zero,16(r2)
    
    return bSuccess;
20083580:	e0bffa17 	ldw	r2,-24(fp)
    
}
20083584:	e037883a 	mov	sp,fp
20083588:	df000017 	ldw	fp,0(sp)
2008358c:	dec00104 	addi	sp,sp,4
20083590:	f800283a 	ret

20083594 <Fat_FileClose>:

void Fat_FileClose(FAT_FILE_HANDLE hFileHandle){
20083594:	defffd04 	addi	sp,sp,-12
20083598:	df000215 	stw	fp,8(sp)
2008359c:	df000204 	addi	fp,sp,8
200835a0:	e13fff15 	stw	r4,-4(fp)
    FAT_FILE_INFO *f = (FAT_FILE_INFO *)hFileHandle;
200835a4:	e0bfff17 	ldw	r2,-4(fp)
200835a8:	e0bffe15 	stw	r2,-8(fp)
    if (!f)
200835ac:	e0bffe17 	ldw	r2,-8(fp)
200835b0:	1000011e 	bne	r2,zero,200835b8 <Fat_FileClose+0x24>
        return;
200835b4:	0001883a 	nop
        
    //free(f);
}
200835b8:	e037883a 	mov	sp,fp
200835bc:	df000017 	ldw	fp,0(sp)
200835c0:	dec00104 	addi	sp,sp,4
200835c4:	f800283a 	ret

200835c8 <Fat_SpeedTest>:



float Fat_SpeedTest(FAT_HANDLE hFat, alt_u32 TestDurInMs){
200835c8:	deff7304 	addi	sp,sp,-564
200835cc:	dfc08c15 	stw	ra,560(sp)
200835d0:	df008b15 	stw	fp,556(sp)
200835d4:	dc008a15 	stw	r16,552(sp)
200835d8:	df008b04 	addi	fp,sp,556
200835dc:	e13ffd15 	stw	r4,-12(fp)
200835e0:	e17ffe15 	stw	r5,-8(fp)
    bool bSuccess = TRUE;
200835e4:	00800044 	movi	r2,1
200835e8:	e0bf7515 	stw	r2,-556(fp)
    alt_u32 time_start, time_finish, time_elapsed, TotalReadBytes=0;
200835ec:	e03f7615 	stw	zero,-552(fp)
    int nSecter = 0;
200835f0:	e03f7715 	stw	zero,-548(fp)
    float fMegaBytePerSec = 0;
200835f4:	e03f7815 	stw	zero,-544(fp)
    char szBlock[512];
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
200835f8:	e0bffd17 	ldw	r2,-12(fp)
200835fc:	e0bf7915 	stw	r2,-540(fp)
    if (!pVol)
20083600:	e0bf7917 	ldw	r2,-540(fp)
20083604:	1000021e 	bne	r2,zero,20083610 <Fat_SpeedTest+0x48>
        return 0;
20083608:	0005883a 	mov	r2,zero
2008360c:	00006b06 	br	200837bc <Fat_SpeedTest+0x1f4>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
20083610:	00800034 	movhi	r2,0
20083614:	108abb04 	addi	r2,r2,10988
20083618:	10800017 	ldw	r2,0(r2)
    time_start = alt_nticks();
2008361c:	e0bf7a15 	stw	r2,-536(fp)
20083620:	00800034 	movhi	r2,0
20083624:	108abb04 	addi	r2,r2,10988
20083628:	14000017 	ldw	r16,0(r2)
    time_finish = alt_nticks() + TestDurInMs * 1000 / alt_ticks_per_second();
2008362c:	e0bffe17 	ldw	r2,-8(fp)
20083630:	10c0fa24 	muli	r3,r2,1000
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
20083634:	00800034 	movhi	r2,0
20083638:	108aba04 	addi	r2,r2,10984
2008363c:	10800017 	ldw	r2,0(r2)
20083640:	1809883a 	mov	r4,r3
20083644:	100b883a 	mov	r5,r2
20083648:	0088a740 	call	20088a74 <__udivsi3>
2008364c:	8085883a 	add	r2,r16,r2
20083650:	e0bf7b15 	stw	r2,-532(fp)
    while(alt_nticks() < time_finish && bSuccess){
20083654:	00000f06 	br	20083694 <Fat_SpeedTest+0xcc>
        bSuccess = pVol->ReadBlock512(pVol->DiskHandle, nSecter, szBlock);
20083658:	e0bf7917 	ldw	r2,-540(fp)
2008365c:	10800117 	ldw	r2,4(r2)
20083660:	e0ff7917 	ldw	r3,-540(fp)
20083664:	19000017 	ldw	r4,0(r3)
20083668:	e17f7717 	ldw	r5,-548(fp)
2008366c:	e0ff7d04 	addi	r3,fp,-524
20083670:	180d883a 	mov	r6,r3
20083674:	103ee83a 	callr	r2
20083678:	e0bf7515 	stw	r2,-556(fp)
        nSecter++;
2008367c:	e0bf7717 	ldw	r2,-548(fp)
20083680:	10800044 	addi	r2,r2,1
20083684:	e0bf7715 	stw	r2,-548(fp)
        TotalReadBytes += sizeof(szBlock);
20083688:	e0bf7617 	ldw	r2,-552(fp)
2008368c:	10808004 	addi	r2,r2,512
20083690:	e0bf7615 	stw	r2,-552(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
20083694:	00800034 	movhi	r2,0
20083698:	108abb04 	addi	r2,r2,10988
2008369c:	10c00017 	ldw	r3,0(r2)
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
    if (!pVol)
        return 0;
    time_start = alt_nticks();
    time_finish = alt_nticks() + TestDurInMs * 1000 / alt_ticks_per_second();
    while(alt_nticks() < time_finish && bSuccess){
200836a0:	e0bf7b17 	ldw	r2,-532(fp)
200836a4:	1880022e 	bgeu	r3,r2,200836b0 <Fat_SpeedTest+0xe8>
200836a8:	e0bf7517 	ldw	r2,-556(fp)
200836ac:	103fea1e 	bne	r2,zero,20083658 <__flash_rwdata_start+0xfffe4a84>
        bSuccess = pVol->ReadBlock512(pVol->DiskHandle, nSecter, szBlock);
        nSecter++;
        TotalReadBytes += sizeof(szBlock);
        
    }        
    if (bSuccess){
200836b0:	e0bf7517 	ldw	r2,-556(fp)
200836b4:	10003726 	beq	r2,zero,20083794 <Fat_SpeedTest+0x1cc>
200836b8:	00800034 	movhi	r2,0
200836bc:	108abb04 	addi	r2,r2,10988
200836c0:	10c00017 	ldw	r3,0(r2)
        time_elapsed = alt_nticks() - time_start;
200836c4:	e0bf7a17 	ldw	r2,-536(fp)
200836c8:	1885c83a 	sub	r2,r3,r2
200836cc:	e0bf7c15 	stw	r2,-528(fp)
        fMegaBytePerSec = (float)TotalReadBytes * (float)alt_ticks_per_second() / (float)time_elapsed / 1024.0 / 1024.0;
200836d0:	e13f7617 	ldw	r4,-552(fp)
200836d4:	00892f80 	call	200892f8 <__floatunsisf>
200836d8:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
200836dc:	00800034 	movhi	r2,0
200836e0:	108aba04 	addi	r2,r2,10984
200836e4:	10800017 	ldw	r2,0(r2)
200836e8:	1009883a 	mov	r4,r2
200836ec:	00892f80 	call	200892f8 <__floatunsisf>
200836f0:	1007883a 	mov	r3,r2
200836f4:	8009883a 	mov	r4,r16
200836f8:	180b883a 	mov	r5,r3
200836fc:	0088ed40 	call	20088ed4 <__mulsf3>
20083700:	1007883a 	mov	r3,r2
20083704:	1821883a 	mov	r16,r3
20083708:	e13f7c17 	ldw	r4,-528(fp)
2008370c:	00892f80 	call	200892f8 <__floatunsisf>
20083710:	1007883a 	mov	r3,r2
20083714:	8009883a 	mov	r4,r16
20083718:	180b883a 	mov	r5,r3
2008371c:	0088a840 	call	20088a84 <__divsf3>
20083720:	1007883a 	mov	r3,r2
20083724:	1805883a 	mov	r2,r3
20083728:	1009883a 	mov	r4,r2
2008372c:	008b03c0 	call	2008b03c <__extendsfdf2>
20083730:	100b883a 	mov	r5,r2
20083734:	180d883a 	mov	r6,r3
20083738:	2809883a 	mov	r4,r5
2008373c:	300b883a 	mov	r5,r6
20083740:	000d883a 	mov	r6,zero
20083744:	01d02434 	movhi	r7,16528
20083748:	0089ca40 	call	20089ca4 <__divdf3>
2008374c:	1009883a 	mov	r4,r2
20083750:	180b883a 	mov	r5,r3
20083754:	2005883a 	mov	r2,r4
20083758:	2807883a 	mov	r3,r5
2008375c:	1009883a 	mov	r4,r2
20083760:	180b883a 	mov	r5,r3
20083764:	000d883a 	mov	r6,zero
20083768:	01d02434 	movhi	r7,16528
2008376c:	0089ca40 	call	20089ca4 <__divdf3>
20083770:	1009883a 	mov	r4,r2
20083774:	180b883a 	mov	r5,r3
20083778:	2005883a 	mov	r2,r4
2008377c:	2807883a 	mov	r3,r5
20083780:	1009883a 	mov	r4,r2
20083784:	180b883a 	mov	r5,r3
20083788:	008b14c0 	call	2008b14c <__truncdfsf2>
2008378c:	1007883a 	mov	r3,r2
20083790:	e0ff7815 	stw	r3,-544(fp)
    } 
    
    printf("\n--------speed:%f---------\n",fMegaBytePerSec);       
20083794:	e13f7817 	ldw	r4,-544(fp)
20083798:	008b03c0 	call	2008b03c <__extendsfdf2>
2008379c:	100d883a 	mov	r6,r2
200837a0:	180f883a 	mov	r7,r3
200837a4:	01000034 	movhi	r4,0
200837a8:	21008d04 	addi	r4,r4,564
200837ac:	300b883a 	mov	r5,r6
200837b0:	380d883a 	mov	r6,r7
200837b4:	008c0240 	call	2008c024 <printf>
    return fMegaBytePerSec;
200837b8:	e0bf7817 	ldw	r2,-544(fp)
200837bc:	1007883a 	mov	r3,r2
    
   
}
200837c0:	1805883a 	mov	r2,r3
200837c4:	e6ffff04 	addi	sp,fp,-4
200837c8:	dfc00217 	ldw	ra,8(sp)
200837cc:	df000117 	ldw	fp,4(sp)
200837d0:	dc000017 	ldw	r16,0(sp)
200837d4:	dec00304 	addi	sp,sp,12
200837d8:	f800283a 	ret

200837dc <fat16ClusterType>:

//extern VOLUME_INFO gVolumeInfo;

VOLUME_INFO vInfo;

CLUSTER_TYPE fat16ClusterType(alt_u32 Fat){
200837dc:	defffd04 	addi	sp,sp,-12
200837e0:	df000215 	stw	fp,8(sp)
200837e4:	df000204 	addi	fp,sp,8
200837e8:	e13fff15 	stw	r4,-4(fp)
    CLUSTER_TYPE Type;
    Fat = Fat & 0xFFFF; // 16 bits
200837ec:	e0bfff17 	ldw	r2,-4(fp)
200837f0:	10bfffcc 	andi	r2,r2,65535
200837f4:	e0bfff15 	stw	r2,-4(fp)
    
    if (Fat > 0 && Fat < 0xFFF0)
200837f8:	e0bfff17 	ldw	r2,-4(fp)
200837fc:	10000626 	beq	r2,zero,20083818 <fat16ClusterType+0x3c>
20083800:	e0bfff17 	ldw	r2,-4(fp)
20083804:	10bffc28 	cmpgeui	r2,r2,65520
20083808:	1000031e 	bne	r2,zero,20083818 <fat16ClusterType+0x3c>
        Type = CLUSTER_NEXT_INFILE;
2008380c:	00800104 	movi	r2,4
20083810:	e0bffe15 	stw	r2,-8(fp)
20083814:	00001806 	br	20083878 <fat16ClusterType+0x9c>
    else if (Fat >= 0xFFF8) // && Fat <= (unsigned short)0xFFFF)
20083818:	e0bfff17 	ldw	r2,-4(fp)
2008381c:	10bffe30 	cmpltui	r2,r2,65528
20083820:	1000031e 	bne	r2,zero,20083830 <fat16ClusterType+0x54>
        Type = CLUSTER_LAST_INFILE;
20083824:	008000c4 	movi	r2,3
20083828:	e0bffe15 	stw	r2,-8(fp)
2008382c:	00001206 	br	20083878 <fat16ClusterType+0x9c>
    else if (Fat == (alt_u16)0x00)
20083830:	e0bfff17 	ldw	r2,-4(fp)
20083834:	1000021e 	bne	r2,zero,20083840 <fat16ClusterType+0x64>
        Type = CLUSTER_UNUSED;
20083838:	e03ffe15 	stw	zero,-8(fp)
2008383c:	00000e06 	br	20083878 <fat16ClusterType+0x9c>
    else if (Fat >= 0xFFF0 && Fat <= 0xFFF6)
20083840:	e0bfff17 	ldw	r2,-4(fp)
20083844:	10bffc30 	cmpltui	r2,r2,65520
20083848:	1000061e 	bne	r2,zero,20083864 <fat16ClusterType+0x88>
2008384c:	e0bfff17 	ldw	r2,-4(fp)
20083850:	10bffde8 	cmpgeui	r2,r2,65527
20083854:	1000031e 	bne	r2,zero,20083864 <fat16ClusterType+0x88>
        Type = CLUSTER_RESERVED;
20083858:	00800044 	movi	r2,1
2008385c:	e0bffe15 	stw	r2,-8(fp)
20083860:	00000506 	br	20083878 <fat16ClusterType+0x9c>
    else if (Fat == 0xFFF7)
20083864:	e0ffff17 	ldw	r3,-4(fp)
20083868:	00bffdd4 	movui	r2,65527
2008386c:	1880021e 	bne	r3,r2,20083878 <fat16ClusterType+0x9c>
        Type = CLUSTER_BAD;
20083870:	00800084 	movi	r2,2
20083874:	e0bffe15 	stw	r2,-8(fp)
        
    return Type;        
20083878:	e0bffe17 	ldw	r2,-8(fp)
         
}
2008387c:	e037883a 	mov	sp,fp
20083880:	df000017 	ldw	fp,0(sp)
20083884:	dec00104 	addi	sp,sp,4
20083888:	f800283a 	ret

2008388c <fat32ClusterType>:

CLUSTER_TYPE fat32ClusterType(alt_u32 Fat){
2008388c:	defffd04 	addi	sp,sp,-12
20083890:	df000215 	stw	fp,8(sp)
20083894:	df000204 	addi	fp,sp,8
20083898:	e13fff15 	stw	r4,-4(fp)
    CLUSTER_TYPE Type;
    Fat = Fat & 0xFFFFFFF; // 28 bits
2008389c:	e0ffff17 	ldw	r3,-4(fp)
200838a0:	00840034 	movhi	r2,4096
200838a4:	10bfffc4 	addi	r2,r2,-1
200838a8:	1884703a 	and	r2,r3,r2
200838ac:	e0bfff15 	stw	r2,-4(fp)
    
    if (Fat > 0 && Fat < 0xFFFFFF0)
200838b0:	e0bfff17 	ldw	r2,-4(fp)
200838b4:	10000726 	beq	r2,zero,200838d4 <fat32ClusterType+0x48>
200838b8:	e0ffff17 	ldw	r3,-4(fp)
200838bc:	00840034 	movhi	r2,4096
200838c0:	10bffbc4 	addi	r2,r2,-17
200838c4:	10c00336 	bltu	r2,r3,200838d4 <fat32ClusterType+0x48>
        Type = CLUSTER_NEXT_INFILE;
200838c8:	00800104 	movi	r2,4
200838cc:	e0bffe15 	stw	r2,-8(fp)
200838d0:	00001c06 	br	20083944 <fat32ClusterType+0xb8>
    else if (Fat >= 0xFFFFFF8) // && Fat <= (unsigned short)0xFFFF)
200838d4:	e0ffff17 	ldw	r3,-4(fp)
200838d8:	00840034 	movhi	r2,4096
200838dc:	10bffdc4 	addi	r2,r2,-9
200838e0:	10c0032e 	bgeu	r2,r3,200838f0 <fat32ClusterType+0x64>
        Type = CLUSTER_LAST_INFILE;
200838e4:	008000c4 	movi	r2,3
200838e8:	e0bffe15 	stw	r2,-8(fp)
200838ec:	00001506 	br	20083944 <fat32ClusterType+0xb8>
    else if (Fat == (alt_u32)0x00)
200838f0:	e0bfff17 	ldw	r2,-4(fp)
200838f4:	1000021e 	bne	r2,zero,20083900 <fat32ClusterType+0x74>
        Type = CLUSTER_UNUSED;
200838f8:	e03ffe15 	stw	zero,-8(fp)
200838fc:	00001106 	br	20083944 <fat32ClusterType+0xb8>
    else if (Fat >= 0xFFFFFF0 && Fat <= 0xFFFFFF6)
20083900:	e0ffff17 	ldw	r3,-4(fp)
20083904:	00840034 	movhi	r2,4096
20083908:	10bffbc4 	addi	r2,r2,-17
2008390c:	10c0072e 	bgeu	r2,r3,2008392c <fat32ClusterType+0xa0>
20083910:	e0ffff17 	ldw	r3,-4(fp)
20083914:	00840034 	movhi	r2,4096
20083918:	10bffd84 	addi	r2,r2,-10
2008391c:	10c00336 	bltu	r2,r3,2008392c <fat32ClusterType+0xa0>
        Type = CLUSTER_RESERVED;
20083920:	00800044 	movi	r2,1
20083924:	e0bffe15 	stw	r2,-8(fp)
20083928:	00000606 	br	20083944 <fat32ClusterType+0xb8>
    else if (Fat == 0xFFFFFF7)
2008392c:	e0ffff17 	ldw	r3,-4(fp)
20083930:	00840034 	movhi	r2,4096
20083934:	10bffdc4 	addi	r2,r2,-9
20083938:	1880021e 	bne	r3,r2,20083944 <fat32ClusterType+0xb8>
        Type = CLUSTER_BAD;
2008393c:	00800084 	movi	r2,2
20083940:	e0bffe15 	stw	r2,-8(fp)
        
    return Type;        
20083944:	e0bffe17 	ldw	r2,-8(fp)
         
}
20083948:	e037883a 	mov	sp,fp
2008394c:	df000017 	ldw	fp,0(sp)
20083950:	dec00104 	addi	sp,sp,4
20083954:	f800283a 	ret

20083958 <fatNextCluster>:

alt_u32 fatNextCluster(VOLUME_INFO *pVol, alt_u32 ThisCluster){
20083958:	defff604 	addi	sp,sp,-40
2008395c:	dfc00915 	stw	ra,36(sp)
20083960:	df000815 	stw	fp,32(sp)
20083964:	dc000715 	stw	r16,28(sp)
20083968:	df000804 	addi	fp,sp,32
2008396c:	e13ffd15 	stw	r4,-12(fp)
20083970:	e17ffe15 	stw	r5,-8(fp)
    CLUSTER_TYPE ClusterType;
    alt_u32 NextCluster;

    alt_32 nFatEntryPerSecter;
    const alt_32 nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
20083974:	e0bffd17 	ldw	r2,-12(fp)
20083978:	10800417 	ldw	r2,16(r2)
2008397c:	108002d8 	cmpnei	r2,r2,11
20083980:	1000021e 	bne	r2,zero,2008398c <fatNextCluster+0x34>
20083984:	00800104 	movi	r2,4
20083988:	00000106 	br	20083990 <fatNextCluster+0x38>
2008398c:	00800084 	movi	r2,2
20083990:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 Secter;
   // char szBlock[512];
    nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize; 
20083994:	e0bffd17 	ldw	r2,-12(fp)
20083998:	10c00717 	ldw	r3,28(r2)
2008399c:	e0bffa17 	ldw	r2,-24(fp)
200839a0:	1809883a 	mov	r4,r3
200839a4:	100b883a 	mov	r5,r2
200839a8:	0088a740 	call	20088a74 <__udivsi3>
200839ac:	e0bffb15 	stw	r2,-20(fp)
    Secter = pVol->FatEntrySecter + (ThisCluster*nFatEntrySize)/pVol->BPB_BytsPerSec;
200839b0:	e0bffd17 	ldw	r2,-12(fp)
200839b4:	14000e17 	ldw	r16,56(r2)
200839b8:	e0fffa17 	ldw	r3,-24(fp)
200839bc:	e0bffe17 	ldw	r2,-8(fp)
200839c0:	1887383a 	mul	r3,r3,r2
200839c4:	e0bffd17 	ldw	r2,-12(fp)
200839c8:	10800717 	ldw	r2,28(r2)
200839cc:	1809883a 	mov	r4,r3
200839d0:	100b883a 	mov	r5,r2
200839d4:	0088a740 	call	20088a74 <__udivsi3>
200839d8:	8085883a 	add	r2,r16,r2
200839dc:	e0bffc15 	stw	r2,-16(fp)
    //if (pVol->ReadBlock512(pVol->DiskHandle, Secter,szBlock)){
    if (fatReadSecter(pVol, Secter)){
200839e0:	e13ffd17 	ldw	r4,-12(fp)
200839e4:	e17ffc17 	ldw	r5,-16(fp)
200839e8:	00842440 	call	20084244 <fatReadSecter>
200839ec:	10002d26 	beq	r2,zero,20083aa4 <fatNextCluster+0x14c>
        if (pVol->Partition_Type == PARTITION_FAT32){
200839f0:	e0bffd17 	ldw	r2,-12(fp)
200839f4:	10800417 	ldw	r2,16(r2)
200839f8:	108002d8 	cmpnei	r2,r2,11
200839fc:	1000111e 	bne	r2,zero,20083a44 <fatNextCluster+0xec>
            NextCluster = *(alt_u32*)(pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize); 
20083a00:	e0bffb17 	ldw	r2,-20(fp)
20083a04:	e0fffe17 	ldw	r3,-8(fp)
20083a08:	1809883a 	mov	r4,r3
20083a0c:	100b883a 	mov	r5,r2
20083a10:	0088a7c0 	call	20088a7c <__umodsi3>
20083a14:	1007883a 	mov	r3,r2
20083a18:	e0bffa17 	ldw	r2,-24(fp)
20083a1c:	1885383a 	mul	r2,r3,r2
20083a20:	10801104 	addi	r2,r2,68
20083a24:	e0fffd17 	ldw	r3,-12(fp)
20083a28:	1885883a 	add	r2,r3,r2
20083a2c:	10800017 	ldw	r2,0(r2)
20083a30:	e0bff915 	stw	r2,-28(fp)
            ClusterType = fat32ClusterType(NextCluster);
20083a34:	e13ff917 	ldw	r4,-28(fp)
20083a38:	008388c0 	call	2008388c <fat32ClusterType>
20083a3c:	e0bff815 	stw	r2,-32(fp)
20083a40:	00001106 	br	20083a88 <fatNextCluster+0x130>
        }else{
            NextCluster = *(alt_u16 *)(pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize); 
20083a44:	e0bffb17 	ldw	r2,-20(fp)
20083a48:	e0fffe17 	ldw	r3,-8(fp)
20083a4c:	1809883a 	mov	r4,r3
20083a50:	100b883a 	mov	r5,r2
20083a54:	0088a7c0 	call	20088a7c <__umodsi3>
20083a58:	1007883a 	mov	r3,r2
20083a5c:	e0bffa17 	ldw	r2,-24(fp)
20083a60:	1885383a 	mul	r2,r3,r2
20083a64:	10801104 	addi	r2,r2,68
20083a68:	e0fffd17 	ldw	r3,-12(fp)
20083a6c:	1885883a 	add	r2,r3,r2
20083a70:	1080000b 	ldhu	r2,0(r2)
20083a74:	10bfffcc 	andi	r2,r2,65535
20083a78:	e0bff915 	stw	r2,-28(fp)
            ClusterType = fat16ClusterType(NextCluster);
20083a7c:	e13ff917 	ldw	r4,-28(fp)
20083a80:	00837dc0 	call	200837dc <fat16ClusterType>
20083a84:	e0bff815 	stw	r2,-32(fp)
        }    
        if (ClusterType != CLUSTER_NEXT_INFILE && ClusterType != CLUSTER_LAST_INFILE)
20083a88:	e0bff817 	ldw	r2,-32(fp)
20083a8c:	10800120 	cmpeqi	r2,r2,4
20083a90:	1000041e 	bne	r2,zero,20083aa4 <fatNextCluster+0x14c>
20083a94:	e0bff817 	ldw	r2,-32(fp)
20083a98:	108000e0 	cmpeqi	r2,r2,3
20083a9c:	1000011e 	bne	r2,zero,20083aa4 <fatNextCluster+0x14c>
            NextCluster = 0;  // invalid cluster
20083aa0:	e03ff915 	stw	zero,-28(fp)
    }
    if(NextCluster > 60607)
20083aa4:	e0bff917 	ldw	r2,-28(fp)
20083aa8:	10bb3030 	cmpltui	r2,r2,60608
20083aac:	1000031e 	bne	r2,zero,20083abc <fatNextCluster+0x164>
    	printf("Error getting next cluster");
20083ab0:	01000034 	movhi	r4,0
20083ab4:	21009404 	addi	r4,r4,592
20083ab8:	008c0240 	call	2008c024 <printf>
    return NextCluster;
20083abc:	e0bff917 	ldw	r2,-28(fp)
}
20083ac0:	e6ffff04 	addi	sp,fp,-4
20083ac4:	dfc00217 	ldw	ra,8(sp)
20083ac8:	df000117 	ldw	fp,4(sp)
20083acc:	dc000017 	ldw	r16,0(sp)
20083ad0:	dec00304 	addi	sp,sp,12
20083ad4:	f800283a 	ret

20083ad8 <fatFindUnusedCluster>:

alt_u32 fatFindUnusedCluster(VOLUME_INFO *pVol){
20083ad8:	defff304 	addi	sp,sp,-52
20083adc:	dfc00c15 	stw	ra,48(sp)
20083ae0:	df000b15 	stw	fp,44(sp)
20083ae4:	dc000a15 	stw	r16,40(sp)
20083ae8:	df000b04 	addi	fp,sp,44
20083aec:	e13ffe15 	stw	r4,-8(fp)
    CLUSTER_TYPE ClusterType;
    alt_u32 UnusedCluster=-1, ThisCluster = 2, ClusterEntryValue;
20083af0:	00bfffc4 	movi	r2,-1
20083af4:	e0bff615 	stw	r2,-40(fp)
20083af8:	00800084 	movi	r2,2
20083afc:	e0bff715 	stw	r2,-36(fp)
    void *pFatEntry;

    const alt_32 nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
20083b00:	e0bffe17 	ldw	r2,-8(fp)
20083b04:	10800417 	ldw	r2,16(r2)
20083b08:	108002d8 	cmpnei	r2,r2,11
20083b0c:	1000021e 	bne	r2,zero,20083b18 <fatFindUnusedCluster+0x40>
20083b10:	00800104 	movi	r2,4
20083b14:	00000106 	br	20083b1c <fatFindUnusedCluster+0x44>
20083b18:	00800084 	movi	r2,2
20083b1c:	e0bff915 	stw	r2,-28(fp)
    const alt_32 nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize;
20083b20:	e0bffe17 	ldw	r2,-8(fp)
20083b24:	10c00717 	ldw	r3,28(r2)
20083b28:	e0bff917 	ldw	r2,-28(fp)
20083b2c:	1809883a 	mov	r4,r3
20083b30:	100b883a 	mov	r5,r2
20083b34:	0088a740 	call	20088a74 <__udivsi3>
20083b38:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 Secter;
    bool bDone = FALSE;
20083b3c:	e03ff815 	stw	zero,-32(fp)

    while(!bDone){     
20083b40:	00003a06 	br	20083c2c <fatFindUnusedCluster+0x154>
        Secter = pVol->FatEntrySecter + (ThisCluster*nFatEntrySize)/pVol->BPB_BytsPerSec;
20083b44:	e0bffe17 	ldw	r2,-8(fp)
20083b48:	14000e17 	ldw	r16,56(r2)
20083b4c:	e0fff917 	ldw	r3,-28(fp)
20083b50:	e0bff717 	ldw	r2,-36(fp)
20083b54:	1887383a 	mul	r3,r3,r2
20083b58:	e0bffe17 	ldw	r2,-8(fp)
20083b5c:	10800717 	ldw	r2,28(r2)
20083b60:	1809883a 	mov	r4,r3
20083b64:	100b883a 	mov	r5,r2
20083b68:	0088a740 	call	20088a74 <__udivsi3>
20083b6c:	8085883a 	add	r2,r16,r2
20083b70:	e0bffb15 	stw	r2,-20(fp)
        if (fatReadSecter(pVol, Secter)){
20083b74:	e13ffe17 	ldw	r4,-8(fp)
20083b78:	e17ffb17 	ldw	r5,-20(fp)
20083b7c:	00842440 	call	20084244 <fatReadSecter>
20083b80:	10002526 	beq	r2,zero,20083c18 <fatFindUnusedCluster+0x140>
            pFatEntry = (pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize);
20083b84:	e0bffa17 	ldw	r2,-24(fp)
20083b88:	e0fff717 	ldw	r3,-36(fp)
20083b8c:	1809883a 	mov	r4,r3
20083b90:	100b883a 	mov	r5,r2
20083b94:	0088a7c0 	call	20088a7c <__umodsi3>
20083b98:	1007883a 	mov	r3,r2
20083b9c:	e0bff917 	ldw	r2,-28(fp)
20083ba0:	1885383a 	mul	r2,r3,r2
20083ba4:	10801104 	addi	r2,r2,68
20083ba8:	e0fffe17 	ldw	r3,-8(fp)
20083bac:	1885883a 	add	r2,r3,r2
20083bb0:	e0bffc15 	stw	r2,-16(fp)
            if (pVol->Partition_Type == PARTITION_FAT32){
20083bb4:	e0bffe17 	ldw	r2,-8(fp)
20083bb8:	10800417 	ldw	r2,16(r2)
20083bbc:	108002d8 	cmpnei	r2,r2,11
20083bc0:	1000071e 	bne	r2,zero,20083be0 <fatFindUnusedCluster+0x108>
                ClusterEntryValue = *(alt_u32*)pFatEntry; 
20083bc4:	e0bffc17 	ldw	r2,-16(fp)
20083bc8:	10800017 	ldw	r2,0(r2)
20083bcc:	e0bffd15 	stw	r2,-12(fp)
                ClusterType = fat32ClusterType(ClusterEntryValue);
20083bd0:	e13ffd17 	ldw	r4,-12(fp)
20083bd4:	008388c0 	call	2008388c <fat32ClusterType>
20083bd8:	e0bff515 	stw	r2,-44(fp)
20083bdc:	00000706 	br	20083bfc <fatFindUnusedCluster+0x124>
            }else{
                ClusterEntryValue = *(alt_u16 *)pFatEntry; 
20083be0:	e0bffc17 	ldw	r2,-16(fp)
20083be4:	1080000b 	ldhu	r2,0(r2)
20083be8:	10bfffcc 	andi	r2,r2,65535
20083bec:	e0bffd15 	stw	r2,-12(fp)
                ClusterType = fat16ClusterType(ClusterEntryValue);
20083bf0:	e13ffd17 	ldw	r4,-12(fp)
20083bf4:	00837dc0 	call	200837dc <fat16ClusterType>
20083bf8:	e0bff515 	stw	r2,-44(fp)
            }    
            if (ClusterType == CLUSTER_UNUSED){
20083bfc:	e0bff517 	ldw	r2,-44(fp)
20083c00:	1000071e 	bne	r2,zero,20083c20 <fatFindUnusedCluster+0x148>
                UnusedCluster = ThisCluster;  // invalid cluster
20083c04:	e0bff717 	ldw	r2,-36(fp)
20083c08:	e0bff615 	stw	r2,-40(fp)
                bDone = TRUE;
20083c0c:	00800044 	movi	r2,1
20083c10:	e0bff815 	stw	r2,-32(fp)
20083c14:	00000206 	br	20083c20 <fatFindUnusedCluster+0x148>
            }    
        }else{
            bDone = TRUE;
20083c18:	00800044 	movi	r2,1
20083c1c:	e0bff815 	stw	r2,-32(fp)
        }     
        ThisCluster++;           
20083c20:	e0bff717 	ldw	r2,-36(fp)
20083c24:	10800044 	addi	r2,r2,1
20083c28:	e0bff715 	stw	r2,-36(fp)
    const alt_32 nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
    const alt_32 nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize;
    alt_u32 Secter;
    bool bDone = FALSE;

    while(!bDone){     
20083c2c:	e0bff817 	ldw	r2,-32(fp)
20083c30:	103fc426 	beq	r2,zero,20083b44 <__flash_rwdata_start+0xfffe4f70>
            bDone = TRUE;
        }     
        ThisCluster++;           
    }                
    
    return UnusedCluster;
20083c34:	e0bff617 	ldw	r2,-40(fp)

}
20083c38:	e6ffff04 	addi	sp,fp,-4
20083c3c:	dfc00217 	ldw	ra,8(sp)
20083c40:	df000117 	ldw	fp,4(sp)
20083c44:	dc000017 	ldw	r16,0(sp)
20083c48:	dec00304 	addi	sp,sp,12
20083c4c:	f800283a 	ret

20083c50 <fatDelClusterList>:


bool fatDelClusterList(VOLUME_INFO *pVol, alt_u32 StartCluster){
20083c50:	defff204 	addi	sp,sp,-56
20083c54:	dfc00d15 	stw	ra,52(sp)
20083c58:	df000c15 	stw	fp,48(sp)
20083c5c:	dc000b15 	stw	r16,44(sp)
20083c60:	df000c04 	addi	fp,sp,48
20083c64:	e13ffd15 	stw	r4,-12(fp)
20083c68:	e17ffe15 	stw	r5,-8(fp)
    CLUSTER_TYPE ClusterType;
    bool bSuccess = TRUE;
20083c6c:	00800044 	movi	r2,1
20083c70:	e0bff515 	stw	r2,-44(fp)
    bool bDone = FALSE;
20083c74:	e03ff615 	stw	zero,-40(fp)
    alt_u32 ClusterIndex, Secter, ClusterEntryValue;
    void *pFatEntryValue;
    
    
    const int nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
20083c78:	e0bffd17 	ldw	r2,-12(fp)
20083c7c:	10800417 	ldw	r2,16(r2)
20083c80:	108002d8 	cmpnei	r2,r2,11
20083c84:	1000021e 	bne	r2,zero,20083c90 <fatDelClusterList+0x40>
20083c88:	00800104 	movi	r2,4
20083c8c:	00000106 	br	20083c94 <fatDelClusterList+0x44>
20083c90:	00800084 	movi	r2,2
20083c94:	e0bff715 	stw	r2,-36(fp)
    const int nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize;
20083c98:	e0bffd17 	ldw	r2,-12(fp)
20083c9c:	10c00717 	ldw	r3,28(r2)
20083ca0:	e0bff717 	ldw	r2,-36(fp)
20083ca4:	1809883a 	mov	r4,r3
20083ca8:	100b883a 	mov	r5,r2
20083cac:	0088a740 	call	20088a74 <__udivsi3>
20083cb0:	e0bff815 	stw	r2,-32(fp)
     
    ClusterIndex = StartCluster;
20083cb4:	e0bffe17 	ldw	r2,-8(fp)
20083cb8:	e0bff915 	stw	r2,-28(fp)
    while(bSuccess && !bDone){
20083cbc:	00005306 	br	20083e0c <fatDelClusterList+0x1bc>
        // read FAT Table
        Secter = pVol->FatEntrySecter + (ClusterIndex*nFatEntrySize)/pVol->BPB_BytsPerSec;
20083cc0:	e0bffd17 	ldw	r2,-12(fp)
20083cc4:	14000e17 	ldw	r16,56(r2)
20083cc8:	e0fff717 	ldw	r3,-36(fp)
20083ccc:	e0bff917 	ldw	r2,-28(fp)
20083cd0:	1887383a 	mul	r3,r3,r2
20083cd4:	e0bffd17 	ldw	r2,-12(fp)
20083cd8:	10800717 	ldw	r2,28(r2)
20083cdc:	1809883a 	mov	r4,r3
20083ce0:	100b883a 	mov	r5,r2
20083ce4:	0088a740 	call	20088a74 <__udivsi3>
20083ce8:	8085883a 	add	r2,r16,r2
20083cec:	e0bffa15 	stw	r2,-24(fp)
        bSuccess = fatReadSecter(pVol, Secter);
20083cf0:	e13ffd17 	ldw	r4,-12(fp)
20083cf4:	e17ffa17 	ldw	r5,-24(fp)
20083cf8:	00842440 	call	20084244 <fatReadSecter>
20083cfc:	e0bff515 	stw	r2,-44(fp)
        if (bSuccess){
20083d00:	e0bff517 	ldw	r2,-44(fp)
20083d04:	10004126 	beq	r2,zero,20083e0c <fatDelClusterList+0x1bc>
            // get the value of FAT entry
            pFatEntryValue = (pVol->Secter_Data + (ClusterIndex%nFatEntryPerSecter)*nFatEntrySize);
20083d08:	e0bff817 	ldw	r2,-32(fp)
20083d0c:	e0fff917 	ldw	r3,-28(fp)
20083d10:	1809883a 	mov	r4,r3
20083d14:	100b883a 	mov	r5,r2
20083d18:	0088a7c0 	call	20088a7c <__umodsi3>
20083d1c:	1007883a 	mov	r3,r2
20083d20:	e0bff717 	ldw	r2,-36(fp)
20083d24:	1885383a 	mul	r2,r3,r2
20083d28:	10801104 	addi	r2,r2,68
20083d2c:	e0fffd17 	ldw	r3,-12(fp)
20083d30:	1885883a 	add	r2,r3,r2
20083d34:	e0bffb15 	stw	r2,-20(fp)
            if (pVol->Partition_Type == PARTITION_FAT32){
20083d38:	e0bffd17 	ldw	r2,-12(fp)
20083d3c:	10800417 	ldw	r2,16(r2)
20083d40:	108002d8 	cmpnei	r2,r2,11
20083d44:	1000071e 	bne	r2,zero,20083d64 <fatDelClusterList+0x114>
                ClusterEntryValue = *(alt_u32 *)pFatEntryValue; 
20083d48:	e0bffb17 	ldw	r2,-20(fp)
20083d4c:	10800017 	ldw	r2,0(r2)
20083d50:	e0bffc15 	stw	r2,-16(fp)
                ClusterType = fat32ClusterType(ClusterEntryValue);
20083d54:	e13ffc17 	ldw	r4,-16(fp)
20083d58:	008388c0 	call	2008388c <fat32ClusterType>
20083d5c:	e0bff415 	stw	r2,-48(fp)
20083d60:	00000706 	br	20083d80 <fatDelClusterList+0x130>
            }else{
                ClusterEntryValue = *(alt_u16 *)pFatEntryValue; //(pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize); 
20083d64:	e0bffb17 	ldw	r2,-20(fp)
20083d68:	1080000b 	ldhu	r2,0(r2)
20083d6c:	10bfffcc 	andi	r2,r2,65535
20083d70:	e0bffc15 	stw	r2,-16(fp)
                ClusterType = fat16ClusterType(ClusterEntryValue);
20083d74:	e13ffc17 	ldw	r4,-16(fp)
20083d78:	00837dc0 	call	200837dc <fat16ClusterType>
20083d7c:	e0bff415 	stw	r2,-48(fp)
            }
                
            if (ClusterType != CLUSTER_NEXT_INFILE && ClusterType != CLUSTER_LAST_INFILE){
20083d80:	e0bff417 	ldw	r2,-48(fp)
20083d84:	10800120 	cmpeqi	r2,r2,4
20083d88:	1000071e 	bne	r2,zero,20083da8 <fatDelClusterList+0x158>
20083d8c:	e0bff417 	ldw	r2,-48(fp)
20083d90:	108000e0 	cmpeqi	r2,r2,3
20083d94:	1000041e 	bne	r2,zero,20083da8 <fatDelClusterList+0x158>
                bDone = TRUE;
20083d98:	00800044 	movi	r2,1
20083d9c:	e0bff615 	stw	r2,-40(fp)
                bSuccess = FALSE;
20083da0:	e03ff515 	stw	zero,-44(fp)
20083da4:	00001906 	br	20083e0c <fatDelClusterList+0x1bc>
            }else{
                if (ClusterType == CLUSTER_LAST_INFILE)
20083da8:	e0bff417 	ldw	r2,-48(fp)
20083dac:	108000d8 	cmpnei	r2,r2,3
20083db0:	1000021e 	bne	r2,zero,20083dbc <fatDelClusterList+0x16c>
                    bDone = TRUE; // the last cluster
20083db4:	00800044 	movi	r2,1
20083db8:	e0bff615 	stw	r2,-40(fp)
                // update
                if (pVol->Partition_Type == PARTITION_FAT32)
20083dbc:	e0bffd17 	ldw	r2,-12(fp)
20083dc0:	10800417 	ldw	r2,16(r2)
20083dc4:	108002d8 	cmpnei	r2,r2,11
20083dc8:	1000031e 	bne	r2,zero,20083dd8 <fatDelClusterList+0x188>
                    *(alt_u32 *)pFatEntryValue = CLUSTER_UNUSED;
20083dcc:	e0bffb17 	ldw	r2,-20(fp)
20083dd0:	10000015 	stw	zero,0(r2)
20083dd4:	00000206 	br	20083de0 <fatDelClusterList+0x190>
                else 
                    *(alt_u16 *)pFatEntryValue = CLUSTER_UNUSED;
20083dd8:	e0bffb17 	ldw	r2,-20(fp)
20083ddc:	1000000d 	sth	zero,0(r2)
                //write back FAT Table
                bSuccess = pVol->WriteBlock512(pVol->DiskHandle, pVol->Secter_Index, pVol->Secter_Data);
20083de0:	e0bffd17 	ldw	r2,-12(fp)
20083de4:	10800217 	ldw	r2,8(r2)
20083de8:	e0fffd17 	ldw	r3,-12(fp)
20083dec:	19000017 	ldw	r4,0(r3)
20083df0:	e0fffd17 	ldw	r3,-12(fp)
20083df4:	19409117 	ldw	r5,580(r3)
20083df8:	e0fffd17 	ldw	r3,-12(fp)
20083dfc:	18c01104 	addi	r3,r3,68
20083e00:	180d883a 	mov	r6,r3
20083e04:	103ee83a 	callr	r2
20083e08:	e0bff515 	stw	r2,-44(fp)
    
    const int nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
    const int nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize;
     
    ClusterIndex = StartCluster;
    while(bSuccess && !bDone){
20083e0c:	e0bff517 	ldw	r2,-44(fp)
20083e10:	10000226 	beq	r2,zero,20083e1c <fatDelClusterList+0x1cc>
20083e14:	e0bff617 	ldw	r2,-40(fp)
20083e18:	103fa926 	beq	r2,zero,20083cc0 <__flash_rwdata_start+0xfffe50ec>
            }    
        }                
    }  // while                
    
    
    return bSuccess;
20083e1c:	e0bff517 	ldw	r2,-44(fp)

}
20083e20:	e6ffff04 	addi	sp,fp,-4
20083e24:	dfc00217 	ldw	ra,8(sp)
20083e28:	df000117 	ldw	fp,4(sp)
20083e2c:	dc000017 	ldw	r16,0(sp)
20083e30:	dec00304 	addi	sp,sp,12
20083e34:	f800283a 	ret

20083e38 <fatDumpDate>:


void fatDumpDate(unsigned short Date){
20083e38:	defffb04 	addi	sp,sp,-20
20083e3c:	df000415 	stw	fp,16(sp)
20083e40:	df000404 	addi	fp,sp,16
20083e44:	2005883a 	mov	r2,r4
20083e48:	e0bfff0d 	sth	r2,-4(fp)
    int Year, Month, Day;
    Year = ((Date >> 9) & 0x1F) + 1980;
20083e4c:	e0bfff0b 	ldhu	r2,-4(fp)
20083e50:	1004d27a 	srli	r2,r2,9
20083e54:	10bfffcc 	andi	r2,r2,65535
20083e58:	108007cc 	andi	r2,r2,31
20083e5c:	1081ef04 	addi	r2,r2,1980
20083e60:	e0bffc15 	stw	r2,-16(fp)
    Month = ((Date >> 5) & 0xF);
20083e64:	e0bfff0b 	ldhu	r2,-4(fp)
20083e68:	1004d17a 	srli	r2,r2,5
20083e6c:	10bfffcc 	andi	r2,r2,65535
20083e70:	108003cc 	andi	r2,r2,15
20083e74:	e0bffd15 	stw	r2,-12(fp)
    Day = ((Date >> 0) & 0x1F);
20083e78:	e0bfff0b 	ldhu	r2,-4(fp)
20083e7c:	108007cc 	andi	r2,r2,31
20083e80:	e0bffe15 	stw	r2,-8(fp)
    FAT_DEBUG(("%d,%d,%d", Year, Month, Day)); 
}
20083e84:	e037883a 	mov	sp,fp
20083e88:	df000017 	ldw	fp,0(sp)
20083e8c:	dec00104 	addi	sp,sp,4
20083e90:	f800283a 	ret

20083e94 <fatDumpTime>:

void fatDumpTime(unsigned short Date){
20083e94:	defffb04 	addi	sp,sp,-20
20083e98:	df000415 	stw	fp,16(sp)
20083e9c:	df000404 	addi	fp,sp,16
20083ea0:	2005883a 	mov	r2,r4
20083ea4:	e0bfff0d 	sth	r2,-4(fp)
    int H,M,S;
    H = ((Date >> 9) & 0x1F);
20083ea8:	e0bfff0b 	ldhu	r2,-4(fp)
20083eac:	1004d27a 	srli	r2,r2,9
20083eb0:	10bfffcc 	andi	r2,r2,65535
20083eb4:	108007cc 	andi	r2,r2,31
20083eb8:	e0bffc15 	stw	r2,-16(fp)
    M = ((Date >> 5) & 0x3F);
20083ebc:	e0bfff0b 	ldhu	r2,-4(fp)
20083ec0:	1004d17a 	srli	r2,r2,5
20083ec4:	10bfffcc 	andi	r2,r2,65535
20083ec8:	10800fcc 	andi	r2,r2,63
20083ecc:	e0bffd15 	stw	r2,-12(fp)
    S = ((Date >> 0) & 0x1F)*2;
20083ed0:	e0bfff0b 	ldhu	r2,-4(fp)
20083ed4:	108007cc 	andi	r2,r2,31
20083ed8:	1085883a 	add	r2,r2,r2
20083edc:	e0bffe15 	stw	r2,-8(fp)
    FAT_DEBUG(("%d:%d:%d", H, M, S));     
}
20083ee0:	e037883a 	mov	sp,fp
20083ee4:	df000017 	ldw	fp,0(sp)
20083ee8:	dec00104 	addi	sp,sp,4
20083eec:	f800283a 	ret

20083ef0 <fatIsLastDir>:

bool fatIsLastDir(FAT_DIRECTORY *pDir){
20083ef0:	defffe04 	addi	sp,sp,-8
20083ef4:	df000115 	stw	fp,4(sp)
20083ef8:	df000104 	addi	fp,sp,4
20083efc:	e13fff15 	stw	r4,-4(fp)
    if (pDir->Name[0] == REMAINED_UNUSED_DIR_ENTRY)  // 0x00
20083f00:	e0bfff17 	ldw	r2,-4(fp)
20083f04:	10800003 	ldbu	r2,0(r2)
20083f08:	10803fcc 	andi	r2,r2,255
20083f0c:	1080201c 	xori	r2,r2,128
20083f10:	10bfe004 	addi	r2,r2,-128
20083f14:	1000021e 	bne	r2,zero,20083f20 <fatIsLastDir+0x30>
        return TRUE;
20083f18:	00800044 	movi	r2,1
20083f1c:	00000106 	br	20083f24 <fatIsLastDir+0x34>
    return FALSE;        
20083f20:	0005883a 	mov	r2,zero
}
20083f24:	e037883a 	mov	sp,fp
20083f28:	df000017 	ldw	fp,0(sp)
20083f2c:	dec00104 	addi	sp,sp,4
20083f30:	f800283a 	ret

20083f34 <fatIsValidDir>:


bool fatIsValidDir(FAT_DIRECTORY *pDir){
20083f34:	defff704 	addi	sp,sp,-36
20083f38:	dfc00815 	stw	ra,32(sp)
20083f3c:	df000715 	stw	fp,28(sp)
20083f40:	df000704 	addi	fp,sp,28
20083f44:	e13fff15 	stw	r4,-4(fp)
    char szTest[] = {0x00, 0xE5, 0x22, 0x2A, 0x2B, 0x2C, 0x2E, 0x2F, 0x3A, 0x3B, 0x3C, 0x3E, 0x3F, 0x5B, 0x5C, 0x5D, 0x7C};
20083f48:	00800034 	movhi	r2,0
20083f4c:	10809ac4 	addi	r2,r2,619
20083f50:	e0fffa04 	addi	r3,fp,-24
20083f54:	100b883a 	mov	r5,r2
20083f58:	00800444 	movi	r2,17
20083f5c:	1809883a 	mov	r4,r3
20083f60:	100d883a 	mov	r6,r2
20083f64:	008bd9c0 	call	2008bd9c <memcpy>
    int i;
    
    for(i=0;i<sizeof(szTest)/sizeof(szTest[0]);i++){
20083f68:	e03ff915 	stw	zero,-28(fp)
20083f6c:	00001206 	br	20083fb8 <fatIsValidDir+0x84>
        if (pDir->Name[0] == szTest[i]){
20083f70:	e0bfff17 	ldw	r2,-4(fp)
20083f74:	11000003 	ldbu	r4,0(r2)
20083f78:	e0fffa04 	addi	r3,fp,-24
20083f7c:	e0bff917 	ldw	r2,-28(fp)
20083f80:	1885883a 	add	r2,r3,r2
20083f84:	10800003 	ldbu	r2,0(r2)
20083f88:	20c03fcc 	andi	r3,r4,255
20083f8c:	18c0201c 	xori	r3,r3,128
20083f90:	18ffe004 	addi	r3,r3,-128
20083f94:	10803fcc 	andi	r2,r2,255
20083f98:	1080201c 	xori	r2,r2,128
20083f9c:	10bfe004 	addi	r2,r2,-128
20083fa0:	1880021e 	bne	r3,r2,20083fac <fatIsValidDir+0x78>
            return FALSE;
20083fa4:	0005883a 	mov	r2,zero
20083fa8:	00000706 	br	20083fc8 <fatIsValidDir+0x94>

bool fatIsValidDir(FAT_DIRECTORY *pDir){
    char szTest[] = {0x00, 0xE5, 0x22, 0x2A, 0x2B, 0x2C, 0x2E, 0x2F, 0x3A, 0x3B, 0x3C, 0x3E, 0x3F, 0x5B, 0x5C, 0x5D, 0x7C};
    int i;
    
    for(i=0;i<sizeof(szTest)/sizeof(szTest[0]);i++){
20083fac:	e0bff917 	ldw	r2,-28(fp)
20083fb0:	10800044 	addi	r2,r2,1
20083fb4:	e0bff915 	stw	r2,-28(fp)
20083fb8:	e0bff917 	ldw	r2,-28(fp)
20083fbc:	10800470 	cmpltui	r2,r2,17
20083fc0:	103feb1e 	bne	r2,zero,20083f70 <__flash_rwdata_start+0xfffe539c>
        if (pDir->Name[0] == szTest[i]){
            return FALSE;
        }
    }    
    return TRUE;
20083fc4:	00800044 	movi	r2,1
    
}
20083fc8:	e037883a 	mov	sp,fp
20083fcc:	dfc00117 	ldw	ra,4(sp)
20083fd0:	df000017 	ldw	fp,0(sp)
20083fd4:	dec00204 	addi	sp,sp,8
20083fd8:	f800283a 	ret

20083fdc <fatIsUnusedDir>:

bool fatIsUnusedDir(FAT_DIRECTORY *pDir){
20083fdc:	defffe04 	addi	sp,sp,-8
20083fe0:	df000115 	stw	fp,4(sp)
20083fe4:	df000104 	addi	fp,sp,4
20083fe8:	e13fff15 	stw	r4,-4(fp)
    if (pDir->Name[0] == (alt_8)UNUSED_DIR_ENTRY)
20083fec:	e0bfff17 	ldw	r2,-4(fp)
20083ff0:	10800003 	ldbu	r2,0(r2)
20083ff4:	10803fcc 	andi	r2,r2,255
20083ff8:	1080201c 	xori	r2,r2,128
20083ffc:	10bfe004 	addi	r2,r2,-128
20084000:	10bff958 	cmpnei	r2,r2,-27
20084004:	1000021e 	bne	r2,zero,20084010 <fatIsUnusedDir+0x34>
        return TRUE;
20084008:	00800044 	movi	r2,1
2008400c:	00000106 	br	20084014 <fatIsUnusedDir+0x38>
    return FALSE; 
20084010:	0005883a 	mov	r2,zero
}
20084014:	e037883a 	mov	sp,fp
20084018:	df000017 	ldw	fp,0(sp)
2008401c:	dec00104 	addi	sp,sp,4
20084020:	f800283a 	ret

20084024 <fatDump>:

// debug
void fatDump(FAT_DIRECTORY *pDir){
20084024:	defff804 	addi	sp,sp,-32
20084028:	dfc00715 	stw	ra,28(sp)
2008402c:	df000615 	stw	fp,24(sp)
20084030:	df000604 	addi	fp,sp,24
20084034:	e13fff15 	stw	r4,-4(fp)
    char szInvalidName[] = {0x22, 0x2A, 0x2B, 0x2C, 0x2E, 0x2F, 0x3A, 0x3B, 0x3C, 0x3E, 0x3F, 0x5B, 0x5C, 0x5D, 0x7C};
20084038:	00800034 	movhi	r2,0
2008403c:	10809f04 	addi	r2,r2,636
20084040:	e0fffb04 	addi	r3,fp,-20
20084044:	100b883a 	mov	r5,r2
20084048:	008003c4 	movi	r2,15
2008404c:	1809883a 	mov	r4,r3
20084050:	100d883a 	mov	r6,r2
20084054:	008bd9c0 	call	2008bd9c <memcpy>
    int i;
    if (pDir->Name[0] == (char)0xE5){
20084058:	e0bfff17 	ldw	r2,-4(fp)
2008405c:	10800003 	ldbu	r2,0(r2)
20084060:	10803fcc 	andi	r2,r2,255
20084064:	1080201c 	xori	r2,r2,128
20084068:	10bfe004 	addi	r2,r2,-128
2008406c:	10bff958 	cmpnei	r2,r2,-27
20084070:	1000011e 	bne	r2,zero,20084078 <fatDump+0x54>
        FAT_DEBUG(("the directory entry is free.\n"));
        return;
20084074:	00004c06 	br	200841a8 <fatDump+0x184>
    }
    if (pDir->Name[0] == 0x00){
20084078:	e0bfff17 	ldw	r2,-4(fp)
2008407c:	10800003 	ldbu	r2,0(r2)
20084080:	10803fcc 	andi	r2,r2,255
20084084:	1080201c 	xori	r2,r2,128
20084088:	10bfe004 	addi	r2,r2,-128
2008408c:	1000011e 	bne	r2,zero,20084094 <fatDump+0x70>
        FAT_DEBUG(("the directory entry is free, and there are no allocated directory entries after tis one.\n"));
        return;
20084090:	00004506 	br	200841a8 <fatDump+0x184>
    }
    
    if (pDir->Name[0] <= 0x20 && pDir->Name[0] != 0x05){
20084094:	e0bfff17 	ldw	r2,-4(fp)
20084098:	10800003 	ldbu	r2,0(r2)
2008409c:	10803fcc 	andi	r2,r2,255
200840a0:	1080201c 	xori	r2,r2,128
200840a4:	10bfe004 	addi	r2,r2,-128
200840a8:	10800848 	cmpgei	r2,r2,33
200840ac:	1000081e 	bne	r2,zero,200840d0 <fatDump+0xac>
200840b0:	e0bfff17 	ldw	r2,-4(fp)
200840b4:	10800003 	ldbu	r2,0(r2)
200840b8:	10803fcc 	andi	r2,r2,255
200840bc:	1080201c 	xori	r2,r2,128
200840c0:	10bfe004 	addi	r2,r2,-128
200840c4:	10800160 	cmpeqi	r2,r2,5
200840c8:	1000011e 	bne	r2,zero,200840d0 <fatDump+0xac>
        FAT_DEBUG(("Invalid file name.\n"));
        return;
200840cc:	00003606 	br	200841a8 <fatDump+0x184>
    }
    
    for(i=0;i<sizeof(szInvalidName)/sizeof(szInvalidName[0]);i++){
200840d0:	e03ffa15 	stw	zero,-24(fp)
200840d4:	00001106 	br	2008411c <fatDump+0xf8>
        if (pDir->Name[0] == szInvalidName[i]){
200840d8:	e0bfff17 	ldw	r2,-4(fp)
200840dc:	11000003 	ldbu	r4,0(r2)
200840e0:	e0fffb04 	addi	r3,fp,-20
200840e4:	e0bffa17 	ldw	r2,-24(fp)
200840e8:	1885883a 	add	r2,r3,r2
200840ec:	10800003 	ldbu	r2,0(r2)
200840f0:	20c03fcc 	andi	r3,r4,255
200840f4:	18c0201c 	xori	r3,r3,128
200840f8:	18ffe004 	addi	r3,r3,-128
200840fc:	10803fcc 	andi	r2,r2,255
20084100:	1080201c 	xori	r2,r2,128
20084104:	10bfe004 	addi	r2,r2,-128
20084108:	1880011e 	bne	r3,r2,20084110 <fatDump+0xec>
            FAT_DEBUG(("Invalid file name.\n"));
            return;
2008410c:	00002606 	br	200841a8 <fatDump+0x184>
    if (pDir->Name[0] <= 0x20 && pDir->Name[0] != 0x05){
        FAT_DEBUG(("Invalid file name.\n"));
        return;
    }
    
    for(i=0;i<sizeof(szInvalidName)/sizeof(szInvalidName[0]);i++){
20084110:	e0bffa17 	ldw	r2,-24(fp)
20084114:	10800044 	addi	r2,r2,1
20084118:	e0bffa15 	stw	r2,-24(fp)
2008411c:	e0bffa17 	ldw	r2,-24(fp)
20084120:	108003f0 	cmpltui	r2,r2,15
20084124:	103fec1e 	bne	r2,zero,200840d8 <__flash_rwdata_start+0xfffe5504>
        FAT_DEBUG(("  Directory\n"));
    if (pDir->Attribute & ATTR_ARCHIVE)
        FAT_DEBUG(("  Archive\n"));
    if (pDir->Attribute & ATTR_LONG_NAME)
        FAT_DEBUG(("  Long Name\n"));
    FAT_DEBUG(("CreateTime:")); fatDumpTime(pDir->CreateTime);FAT_DEBUG(("\n"));
20084128:	e0bfff17 	ldw	r2,-4(fp)
2008412c:	10c00383 	ldbu	r3,14(r2)
20084130:	108003c3 	ldbu	r2,15(r2)
20084134:	1004923a 	slli	r2,r2,8
20084138:	10c4b03a 	or	r2,r2,r3
2008413c:	10bfffcc 	andi	r2,r2,65535
20084140:	1009883a 	mov	r4,r2
20084144:	0083e940 	call	20083e94 <fatDumpTime>
    FAT_DEBUG(("CreateDate:")); fatDumpDate(pDir->LastAccessDate);FAT_DEBUG(("\n"));
20084148:	e0bfff17 	ldw	r2,-4(fp)
2008414c:	10c00483 	ldbu	r3,18(r2)
20084150:	108004c3 	ldbu	r2,19(r2)
20084154:	1004923a 	slli	r2,r2,8
20084158:	10c4b03a 	or	r2,r2,r3
2008415c:	10bfffcc 	andi	r2,r2,65535
20084160:	1009883a 	mov	r4,r2
20084164:	0083e380 	call	20083e38 <fatDumpDate>
    FAT_DEBUG(("ClusterHi:%04Xh\n", pDir->FirstLogicalClusterHi));
    FAT_DEBUG(("LastWriteTime:")); fatDumpTime(pDir->LastWriteTime);FAT_DEBUG(("\n"));
20084168:	e0bfff17 	ldw	r2,-4(fp)
2008416c:	10c00583 	ldbu	r3,22(r2)
20084170:	108005c3 	ldbu	r2,23(r2)
20084174:	1004923a 	slli	r2,r2,8
20084178:	10c4b03a 	or	r2,r2,r3
2008417c:	10bfffcc 	andi	r2,r2,65535
20084180:	1009883a 	mov	r4,r2
20084184:	0083e940 	call	20083e94 <fatDumpTime>
    FAT_DEBUG(("LastWriteDate:")); fatDumpDate(pDir->LastWriteDate);FAT_DEBUG(("\n"));
20084188:	e0bfff17 	ldw	r2,-4(fp)
2008418c:	10c00603 	ldbu	r3,24(r2)
20084190:	10800643 	ldbu	r2,25(r2)
20084194:	1004923a 	slli	r2,r2,8
20084198:	10c4b03a 	or	r2,r2,r3
2008419c:	10bfffcc 	andi	r2,r2,65535
200841a0:	1009883a 	mov	r4,r2
200841a4:	0083e380 	call	20083e38 <fatDumpDate>
    FAT_DEBUG(("Cluster:%04Xh(%d)\n", pDir->FirstLogicalCluster,pDir->FirstLogicalCluster));
    FAT_DEBUG(("File Size:%08Xh(%ld)\n", pDir->FileSize, (long)pDir->FileSize));
}
200841a8:	e037883a 	mov	sp,fp
200841ac:	dfc00117 	ldw	ra,4(sp)
200841b0:	df000017 	ldw	fp,0(sp)
200841b4:	dec00204 	addi	sp,sp,8
200841b8:	f800283a 	ret

200841bc <fatArray2Value>:


unsigned int fatArray2Value(unsigned char *pValue, unsigned int nNum){
200841bc:	defffa04 	addi	sp,sp,-24
200841c0:	df000515 	stw	fp,20(sp)
200841c4:	df000504 	addi	fp,sp,20
200841c8:	e13ffe15 	stw	r4,-8(fp)
200841cc:	e17fff15 	stw	r5,-4(fp)
    alt_u8 *pMSB = (pValue + nNum - 1);
200841d0:	e0bfff17 	ldw	r2,-4(fp)
200841d4:	10bfffc4 	addi	r2,r2,-1
200841d8:	e0fffe17 	ldw	r3,-8(fp)
200841dc:	1885883a 	add	r2,r3,r2
200841e0:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
200841e4:	e03ffd15 	stw	zero,-12(fp)
200841e8:	00000e06 	br	20084224 <fatArray2Value+0x68>
        nValue <<= 8;
200841ec:	e0bffc17 	ldw	r2,-16(fp)
200841f0:	1004923a 	slli	r2,r2,8
200841f4:	e0bffc15 	stw	r2,-16(fp)
        nValue |= *pMSB--;
200841f8:	e0bffb17 	ldw	r2,-20(fp)
200841fc:	10ffffc4 	addi	r3,r2,-1
20084200:	e0fffb15 	stw	r3,-20(fp)
20084204:	10800003 	ldbu	r2,0(r2)
20084208:	10803fcc 	andi	r2,r2,255
2008420c:	e0fffc17 	ldw	r3,-16(fp)
20084210:	1884b03a 	or	r2,r3,r2
20084214:	e0bffc15 	stw	r2,-16(fp)

unsigned int fatArray2Value(unsigned char *pValue, unsigned int nNum){
    alt_u8 *pMSB = (pValue + nNum - 1);
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
20084218:	e0bffd17 	ldw	r2,-12(fp)
2008421c:	10800044 	addi	r2,r2,1
20084220:	e0bffd15 	stw	r2,-12(fp)
20084224:	e0fffd17 	ldw	r3,-12(fp)
20084228:	e0bfff17 	ldw	r2,-4(fp)
2008422c:	18bfef36 	bltu	r3,r2,200841ec <__flash_rwdata_start+0xfffe5618>
        nValue <<= 8;
        nValue |= *pMSB--;
        
    }
    
    return nValue;
20084230:	e0bffc17 	ldw	r2,-16(fp)
}
20084234:	e037883a 	mov	sp,fp
20084238:	df000017 	ldw	fp,0(sp)
2008423c:	dec00104 	addi	sp,sp,4
20084240:	f800283a 	ret

20084244 <fatReadSecter>:

//=================================================================================
//// add in v2.0
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
20084244:	defffb04 	addi	sp,sp,-20
20084248:	dfc00415 	stw	ra,16(sp)
2008424c:	df000315 	stw	fp,12(sp)
20084250:	df000304 	addi	fp,sp,12
20084254:	e13ffe15 	stw	r4,-8(fp)
20084258:	e17fff15 	stw	r5,-4(fp)
    bool bSuccess = TRUE;
2008425c:	00800044 	movi	r2,1
20084260:	e0bffd15 	stw	r2,-12(fp)
    static char temp[512];
    if (nSecter != pVol->Secter_Index){
20084264:	e0bffe17 	ldw	r2,-8(fp)
20084268:	10c09117 	ldw	r3,580(r2)
2008426c:	e0bfff17 	ldw	r2,-4(fp)
20084270:	18801226 	beq	r3,r2,200842bc <fatReadSecter+0x78>
        if (!pVol->ReadBlock512(pVol->DiskHandle, nSecter, pVol->Secter_Data)){
20084274:	e0bffe17 	ldw	r2,-8(fp)
20084278:	10800117 	ldw	r2,4(r2)
2008427c:	e0fffe17 	ldw	r3,-8(fp)
20084280:	19000017 	ldw	r4,0(r3)
20084284:	e0fffe17 	ldw	r3,-8(fp)
20084288:	18c01104 	addi	r3,r3,68
2008428c:	e17fff17 	ldw	r5,-4(fp)
20084290:	180d883a 	mov	r6,r3
20084294:	103ee83a 	callr	r2
20084298:	1000051e 	bne	r2,zero,200842b0 <fatReadSecter+0x6c>
            pVol->Secter_Index = -1;
2008429c:	e0bffe17 	ldw	r2,-8(fp)
200842a0:	00ffffc4 	movi	r3,-1
200842a4:	10c09115 	stw	r3,580(r2)
            bSuccess = FALSE;
200842a8:	e03ffd15 	stw	zero,-12(fp)
200842ac:	00000306 	br	200842bc <fatReadSecter+0x78>
        }else{
            pVol->Secter_Index = nSecter;
200842b0:	e0bffe17 	ldw	r2,-8(fp)
200842b4:	e0ffff17 	ldw	r3,-4(fp)
200842b8:	10c09115 	stw	r3,580(r2)
//            pVol->ReadBlock512(pVol->DiskHandle, nSecter, temp);
//            if(memcmp(temp, pVol->Secter_Data, 512))
//            	printf("Data check failed!\n");
        }
    }
    return bSuccess;          
200842bc:	e0bffd17 	ldw	r2,-12(fp)
}     
200842c0:	e037883a 	mov	sp,fp
200842c4:	dfc00117 	ldw	ra,4(sp)
200842c8:	df000017 	ldw	fp,0(sp)
200842cc:	dec00204 	addi	sp,sp,8
200842d0:	f800283a 	ret

200842d4 <fatReadMultiSecter>:
//=================================================================================
//// [ADDED]
bool fatReadMultiSecter(VOLUME_INFO *pVol, alt_u32 nSecter, alt_u32 n, char* buf){
200842d4:	defff904 	addi	sp,sp,-28
200842d8:	dfc00615 	stw	ra,24(sp)
200842dc:	df000515 	stw	fp,20(sp)
200842e0:	df000504 	addi	fp,sp,20
200842e4:	e13ffc15 	stw	r4,-16(fp)
200842e8:	e17ffd15 	stw	r5,-12(fp)
200842ec:	e1bffe15 	stw	r6,-8(fp)
200842f0:	e1ffff15 	stw	r7,-4(fp)
    bool bSuccess = TRUE;
200842f4:	00800044 	movi	r2,1
200842f8:	e0bffb15 	stw	r2,-20(fp)

	if (!pVol->ReadBlocks(pVol->DiskHandle, nSecter, n, buf)){
200842fc:	e0bffc17 	ldw	r2,-16(fp)
20084300:	10800317 	ldw	r2,12(r2)
20084304:	e0fffc17 	ldw	r3,-16(fp)
20084308:	18c00017 	ldw	r3,0(r3)
2008430c:	1809883a 	mov	r4,r3
20084310:	e17ffd17 	ldw	r5,-12(fp)
20084314:	e1bffe17 	ldw	r6,-8(fp)
20084318:	e1ffff17 	ldw	r7,-4(fp)
2008431c:	103ee83a 	callr	r2
20084320:	1000011e 	bne	r2,zero,20084328 <fatReadMultiSecter+0x54>
		bSuccess = FALSE;
20084324:	e03ffb15 	stw	zero,-20(fp)
	}
    return bSuccess;
20084328:	e0bffb17 	ldw	r2,-20(fp)
}
2008432c:	e037883a 	mov	sp,fp
20084330:	dfc00117 	ldw	ra,4(sp)
20084334:	df000017 	ldw	fp,0(sp)
20084338:	dec00204 	addi	sp,sp,8
2008433c:	f800283a 	ret

20084340 <fatFindDirectory>:
//=================================================================================
//// add in v2.0
FAT_DIRECTORY* fatFindDirectory(VOLUME_INFO *pVol, alt_u32 nDirectoryIndex){
20084340:	defff804 	addi	sp,sp,-32
20084344:	dfc00715 	stw	ra,28(sp)
20084348:	df000615 	stw	fp,24(sp)
2008434c:	df000604 	addi	fp,sp,24
20084350:	e13ffe15 	stw	r4,-8(fp)
20084354:	e17fff15 	stw	r5,-4(fp)
    FAT_DIRECTORY *pDir=NULL;
20084358:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 nSecterOffset, nSecter, nByteOffset;
             
    nSecterOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)/pVol->BPB_BytsPerSec;
2008435c:	e0bfff17 	ldw	r2,-4(fp)
20084360:	1006917a 	slli	r3,r2,5
20084364:	e0bffe17 	ldw	r2,-8(fp)
20084368:	10800717 	ldw	r2,28(r2)
2008436c:	1809883a 	mov	r4,r3
20084370:	100b883a 	mov	r5,r2
20084374:	0088a740 	call	20088a74 <__udivsi3>
20084378:	e0bffb15 	stw	r2,-20(fp)
    nSecter = pVol->RootDirectoryEntrySecter + nSecterOffset;
2008437c:	e0bffe17 	ldw	r2,-8(fp)
20084380:	10c00f17 	ldw	r3,60(r2)
20084384:	e0bffb17 	ldw	r2,-20(fp)
20084388:	1885883a 	add	r2,r3,r2
2008438c:	e0bffc15 	stw	r2,-16(fp)
        // read sector
    if (fatReadSecter(pVol, nSecter)){
20084390:	e13ffe17 	ldw	r4,-8(fp)
20084394:	e17ffc17 	ldw	r5,-16(fp)
20084398:	00842440 	call	20084244 <fatReadSecter>
2008439c:	10000d26 	beq	r2,zero,200843d4 <fatFindDirectory+0x94>
        nByteOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)%pVol->BPB_BytsPerSec; 
200843a0:	e0bfff17 	ldw	r2,-4(fp)
200843a4:	1006917a 	slli	r3,r2,5
200843a8:	e0bffe17 	ldw	r2,-8(fp)
200843ac:	10800717 	ldw	r2,28(r2)
200843b0:	1809883a 	mov	r4,r3
200843b4:	100b883a 	mov	r5,r2
200843b8:	0088a7c0 	call	20088a7c <__umodsi3>
200843bc:	e0bffd15 	stw	r2,-12(fp)
        pDir = (FAT_DIRECTORY *)(pVol->Secter_Data + nByteOffset);
200843c0:	e0bffd17 	ldw	r2,-12(fp)
200843c4:	10801104 	addi	r2,r2,68
200843c8:	e0fffe17 	ldw	r3,-8(fp)
200843cc:	1885883a 	add	r2,r3,r2
200843d0:	e0bffa15 	stw	r2,-24(fp)
    }        
        
    return pDir;        
200843d4:	e0bffa17 	ldw	r2,-24(fp)
}
200843d8:	e037883a 	mov	sp,fp
200843dc:	dfc00117 	ldw	ra,4(sp)
200843e0:	df000017 	ldw	fp,0(sp)
200843e4:	dec00204 	addi	sp,sp,8
200843e8:	f800283a 	ret

200843ec <fatFindUnusedDirectory>:

//=================================================================================
//// add in v2.0
alt_u32 fatFindUnusedDirectory(VOLUME_INFO *pVol){
200843ec:	defff604 	addi	sp,sp,-40
200843f0:	dfc00915 	stw	ra,36(sp)
200843f4:	df000815 	stw	fp,32(sp)
200843f8:	df000804 	addi	fp,sp,32
200843fc:	e13fff15 	stw	r4,-4(fp)
    alt_u32 Dir = -1;
20084400:	00bfffc4 	movi	r2,-1
20084404:	e0bff815 	stw	r2,-32(fp)
    FAT_DIRECTORY *pDir=NULL;
20084408:	e03ffb15 	stw	zero,-20(fp)
    alt_u32 nSecterOffset, nSecter, nByteOffset;
    alt_u32 nDirectoryIndex = 2; //??? start from ?
2008440c:	00800084 	movi	r2,2
20084410:	e0bff915 	stw	r2,-28(fp)
    bool bDone = FALSE;
20084414:	e03ffa15 	stw	zero,-24(fp)
             
    while(!bDone){             
20084418:	00003006 	br	200844dc <fatFindUnusedDirectory+0xf0>
        nSecterOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)/pVol->BPB_BytsPerSec;
2008441c:	e0bff917 	ldw	r2,-28(fp)
20084420:	1006917a 	slli	r3,r2,5
20084424:	e0bfff17 	ldw	r2,-4(fp)
20084428:	10800717 	ldw	r2,28(r2)
2008442c:	1809883a 	mov	r4,r3
20084430:	100b883a 	mov	r5,r2
20084434:	0088a740 	call	20088a74 <__udivsi3>
20084438:	e0bffc15 	stw	r2,-16(fp)
        nSecter = pVol->RootDirectoryEntrySecter + nSecterOffset;
2008443c:	e0bfff17 	ldw	r2,-4(fp)
20084440:	10c00f17 	ldw	r3,60(r2)
20084444:	e0bffc17 	ldw	r2,-16(fp)
20084448:	1885883a 	add	r2,r3,r2
2008444c:	e0bffd15 	stw	r2,-12(fp)
            // read sector
        if (fatReadSecter(pVol, nSecter)){
20084450:	e13fff17 	ldw	r4,-4(fp)
20084454:	e17ffd17 	ldw	r5,-12(fp)
20084458:	00842440 	call	20084244 <fatReadSecter>
2008445c:	10001e26 	beq	r2,zero,200844d8 <fatFindUnusedDirectory+0xec>
            nByteOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)%pVol->BPB_BytsPerSec; 
20084460:	e0bff917 	ldw	r2,-28(fp)
20084464:	1006917a 	slli	r3,r2,5
20084468:	e0bfff17 	ldw	r2,-4(fp)
2008446c:	10800717 	ldw	r2,28(r2)
20084470:	1809883a 	mov	r4,r3
20084474:	100b883a 	mov	r5,r2
20084478:	0088a7c0 	call	20088a7c <__umodsi3>
2008447c:	e0bffe15 	stw	r2,-8(fp)
            pDir = (FAT_DIRECTORY *)(pVol->Secter_Data + nByteOffset);
20084480:	e0bffe17 	ldw	r2,-8(fp)
20084484:	10801104 	addi	r2,r2,68
20084488:	e0ffff17 	ldw	r3,-4(fp)
2008448c:	1885883a 	add	r2,r3,r2
20084490:	e0bffb15 	stw	r2,-20(fp)
            if (fatIsLastDir(pDir) || fatIsUnusedDir(pDir)){
20084494:	e13ffb17 	ldw	r4,-20(fp)
20084498:	0083ef00 	call	20083ef0 <fatIsLastDir>
2008449c:	1000031e 	bne	r2,zero,200844ac <fatFindUnusedDirectory+0xc0>
200844a0:	e13ffb17 	ldw	r4,-20(fp)
200844a4:	0083fdc0 	call	20083fdc <fatIsUnusedDir>
200844a8:	10000726 	beq	r2,zero,200844c8 <fatFindUnusedDirectory+0xdc>
                bDone = TRUE;
200844ac:	00800044 	movi	r2,1
200844b0:	e0bffa15 	stw	r2,-24(fp)
                if (fatIsUnusedDir(pDir))
200844b4:	e13ffb17 	ldw	r4,-20(fp)
200844b8:	0083fdc0 	call	20083fdc <fatIsUnusedDir>
200844bc:	10000226 	beq	r2,zero,200844c8 <fatFindUnusedDirectory+0xdc>
                    Dir = nDirectoryIndex;
200844c0:	e0bff917 	ldw	r2,-28(fp)
200844c4:	e0bff815 	stw	r2,-32(fp)
            }
            nDirectoryIndex++;        
200844c8:	e0bff917 	ldw	r2,-28(fp)
200844cc:	10800044 	addi	r2,r2,1
200844d0:	e0bff915 	stw	r2,-28(fp)
200844d4:	00000106 	br	200844dc <fatFindUnusedDirectory+0xf0>
        }else{
                bDone = FALSE;
200844d8:	e03ffa15 	stw	zero,-24(fp)
    FAT_DIRECTORY *pDir=NULL;
    alt_u32 nSecterOffset, nSecter, nByteOffset;
    alt_u32 nDirectoryIndex = 2; //??? start from ?
    bool bDone = FALSE;
             
    while(!bDone){             
200844dc:	e0bffa17 	ldw	r2,-24(fp)
200844e0:	103fce26 	beq	r2,zero,2008441c <__flash_rwdata_start+0xfffe5848>
        }else{
                bDone = FALSE;
        }
    }             
    
    return Dir;      
200844e4:	e0bff817 	ldw	r2,-32(fp)
}
200844e8:	e037883a 	mov	sp,fp
200844ec:	dfc00117 	ldw	ra,4(sp)
200844f0:	df000017 	ldw	fp,0(sp)
200844f4:	dec00204 	addi	sp,sp,8
200844f8:	f800283a 	ret

200844fc <fatMount>:

//=================================================================================
bool fatMount(VOLUME_INFO *pVol){
200844fc:	defff604 	addi	sp,sp,-40
20084500:	dfc00915 	stw	ra,36(sp)
20084504:	df000815 	stw	fp,32(sp)
20084508:	dc000715 	stw	r16,28(sp)
2008450c:	df000804 	addi	fp,sp,32
20084510:	e13ffe15 	stw	r4,-8(fp)
    bool bSuccess = TRUE;
20084514:	00800044 	movi	r2,1
20084518:	e0bff815 	stw	r2,-32(fp)
    // 1DEh( 16 bytes): 3nd Partition Entry
    // 1EEh( 16 bytes): 4nd Partition Entry
    // 1FEh(  2 bytes): Executable Maker (55h AAh)
    
    // read first block (secotor 0), BPB(BIOS Parameter Block) or called as boot sector or reserved sector
    if (!pVol->ReadBlock512(pVol->DiskHandle, 0, szBlock)){
2008451c:	e0bffe17 	ldw	r2,-8(fp)
20084520:	10800117 	ldw	r2,4(r2)
20084524:	e0fffe17 	ldw	r3,-8(fp)
20084528:	18c00017 	ldw	r3,0(r3)
2008452c:	1809883a 	mov	r4,r3
20084530:	000b883a 	mov	r5,zero
20084534:	01800034 	movhi	r6,0
20084538:	318b8d04 	addi	r6,r6,11828
2008453c:	103ee83a 	callr	r2
20084540:	1000021e 	bne	r2,zero,2008454c <fatMount+0x50>
        FAT_DEBUG(("Read section 0 error.\n"));
        return FALSE;
20084544:	0005883a 	mov	r2,zero
20084548:	0000bc06 	br	2008483c <fatMount+0x340>
        return FALSE;
    }
    */
        
    // check file system 
    FirstPartitionEntry = 0x1BE;
2008454c:	00806f84 	movi	r2,446
20084550:	e0bff915 	stw	r2,-28(fp)
    //PartitionType = szBlock[FirstPartitionEntry + 4];
    PartitionType = szBlock[0x01C2];
20084554:	00800034 	movhi	r2,0
20084558:	108b8d04 	addi	r2,r2,11828
2008455c:	10807083 	ldbu	r2,450(r2)
20084560:	10803fcc 	andi	r2,r2,255
20084564:	e0bffa15 	stw	r2,-24(fp)
    if (PartitionType == PARTITION_FAT16){
20084568:	e0bffa17 	ldw	r2,-24(fp)
2008456c:	108001a0 	cmpeqi	r2,r2,6
20084570:	1000051e 	bne	r2,zero,20084588 <fatMount+0x8c>
        FAT_DEBUG(("FAT16\n"));
    }else if (PartitionType == PARTITION_FAT32){
20084574:	e0bffa17 	ldw	r2,-24(fp)
20084578:	108002e0 	cmpeqi	r2,r2,11
2008457c:	1000021e 	bne	r2,zero,20084588 <fatMount+0x8c>
        FAT_DEBUG(("FAT32\n"));
    }else{        
        FAT_DEBUG(("the partition type(%d) is not supported.\n", PartitionType));
        return FALSE; // only support FAT16 in this example
20084580:	0005883a 	mov	r2,zero
20084584:	0000ad06 	br	2008483c <fatMount+0x340>
    }       
    pVol->Partition_Type = PartitionType; 
20084588:	e0fffa17 	ldw	r3,-24(fp)
2008458c:	e0bffe17 	ldw	r2,-8(fp)
20084590:	10c00415 	stw	r3,16(r2)
    // 2.2 Find the first section of partition 1                    
    FirstSectionInVolume1 = fatArray2Value(&szBlock[FirstPartitionEntry + 8],4);
20084594:	e0bff917 	ldw	r2,-28(fp)
20084598:	10c00204 	addi	r3,r2,8
2008459c:	00800034 	movhi	r2,0
200845a0:	108b8d04 	addi	r2,r2,11828
200845a4:	1885883a 	add	r2,r3,r2
200845a8:	1009883a 	mov	r4,r2
200845ac:	01400104 	movi	r5,4
200845b0:	00841bc0 	call	200841bc <fatArray2Value>
200845b4:	e0bffb15 	stw	r2,-20(fp)
                            //szBlock[FirstPartitionEntry + 8 + 1]*256 + 
                            //szBlock[FirstPartitionEntry + 8];        
    
    //3 Parsing the Volume Boot Record(BR)
    //3.1  Read the Volume Boot Record(BR)
    if (!pVol->ReadBlock512(pVol->DiskHandle, FirstSectionInVolume1, szBlock)){
200845b8:	e0bffe17 	ldw	r2,-8(fp)
200845bc:	10800117 	ldw	r2,4(r2)
200845c0:	e0fffe17 	ldw	r3,-8(fp)
200845c4:	19000017 	ldw	r4,0(r3)
200845c8:	e0fffb17 	ldw	r3,-20(fp)
200845cc:	180b883a 	mov	r5,r3
200845d0:	01800034 	movhi	r6,0
200845d4:	318b8d04 	addi	r6,r6,11828
200845d8:	103ee83a 	callr	r2
200845dc:	1000021e 	bne	r2,zero,200845e8 <fatMount+0xec>
        FAT_DEBUG(("Read first sector in volume one fail.\n"));
        return FALSE;
200845e0:	0005883a 	mov	r2,zero
200845e4:	00009506 	br	2008483c <fatMount+0x340>
    }        
    pVol->PartitionStartSecter = FirstSectionInVolume1;     
200845e8:	e0fffb17 	ldw	r3,-20(fp)
200845ec:	e0bffe17 	ldw	r2,-8(fp)
200845f0:	10c00615 	stw	r3,24(r2)
    pVol->BPB_BytsPerSec = szBlock[0x0B+1]*256 + szBlock[0x0B];
200845f4:	00800034 	movhi	r2,0
200845f8:	108b8d04 	addi	r2,r2,11828
200845fc:	10800303 	ldbu	r2,12(r2)
20084600:	10803fcc 	andi	r2,r2,255
20084604:	1006923a 	slli	r3,r2,8
20084608:	00800034 	movhi	r2,0
2008460c:	108b8d04 	addi	r2,r2,11828
20084610:	108002c3 	ldbu	r2,11(r2)
20084614:	10803fcc 	andi	r2,r2,255
20084618:	1885883a 	add	r2,r3,r2
2008461c:	1007883a 	mov	r3,r2
20084620:	e0bffe17 	ldw	r2,-8(fp)
20084624:	10c00715 	stw	r3,28(r2)
    pVol->BPB_SecPerCluster = szBlock[0x0D];
20084628:	00800034 	movhi	r2,0
2008462c:	108b8d04 	addi	r2,r2,11828
20084630:	10800343 	ldbu	r2,13(r2)
20084634:	10c03fcc 	andi	r3,r2,255
20084638:	e0bffe17 	ldw	r2,-8(fp)
2008463c:	10c00815 	stw	r3,32(r2)
    pVol->BPB_RsvdSecCnt = szBlock[0x0E + 1]*256 + szBlock[0x0E]; 
20084640:	00800034 	movhi	r2,0
20084644:	108b8d04 	addi	r2,r2,11828
20084648:	108003c3 	ldbu	r2,15(r2)
2008464c:	10803fcc 	andi	r2,r2,255
20084650:	1006923a 	slli	r3,r2,8
20084654:	00800034 	movhi	r2,0
20084658:	108b8d04 	addi	r2,r2,11828
2008465c:	10800383 	ldbu	r2,14(r2)
20084660:	10803fcc 	andi	r2,r2,255
20084664:	1885883a 	add	r2,r3,r2
20084668:	1007883a 	mov	r3,r2
2008466c:	e0bffe17 	ldw	r2,-8(fp)
20084670:	10c00915 	stw	r3,36(r2)
    pVol->BPB_NumFATs = szBlock[0x10];
20084674:	00800034 	movhi	r2,0
20084678:	108b8d04 	addi	r2,r2,11828
2008467c:	10800403 	ldbu	r2,16(r2)
20084680:	10c03fcc 	andi	r3,r2,255
20084684:	e0bffe17 	ldw	r2,-8(fp)
20084688:	10c00a15 	stw	r3,40(r2)
    pVol->BPB_RootEntCnt = szBlock[0x11+1]*256 + szBlock[0x11]; 
2008468c:	00800034 	movhi	r2,0
20084690:	108b8d04 	addi	r2,r2,11828
20084694:	10800483 	ldbu	r2,18(r2)
20084698:	10803fcc 	andi	r2,r2,255
2008469c:	1006923a 	slli	r3,r2,8
200846a0:	00800034 	movhi	r2,0
200846a4:	108b8d04 	addi	r2,r2,11828
200846a8:	10800443 	ldbu	r2,17(r2)
200846ac:	10803fcc 	andi	r2,r2,255
200846b0:	1885883a 	add	r2,r3,r2
200846b4:	1007883a 	mov	r3,r2
200846b8:	e0bffe17 	ldw	r2,-8(fp)
200846bc:	10c00b15 	stw	r3,44(r2)
    pVol->BPB_FATSz = szBlock[0x16+1]*256 + szBlock[0x16];
200846c0:	00800034 	movhi	r2,0
200846c4:	108b8d04 	addi	r2,r2,11828
200846c8:	108005c3 	ldbu	r2,23(r2)
200846cc:	10803fcc 	andi	r2,r2,255
200846d0:	1006923a 	slli	r3,r2,8
200846d4:	00800034 	movhi	r2,0
200846d8:	108b8d04 	addi	r2,r2,11828
200846dc:	10800583 	ldbu	r2,22(r2)
200846e0:	10803fcc 	andi	r2,r2,255
200846e4:	1885883a 	add	r2,r3,r2
200846e8:	1007883a 	mov	r3,r2
200846ec:	e0bffe17 	ldw	r2,-8(fp)
200846f0:	10c00c15 	stw	r3,48(r2)
    
    // add for v2.0
    pVol->Secter_Index = -1;
200846f4:	e0bffe17 	ldw	r2,-8(fp)
200846f8:	00ffffc4 	movi	r3,-1
200846fc:	10c09115 	stw	r3,580(r2)
    memset(pVol->Secter_Data, 0, MY_SECTER_SIZE); // 512 bytes
20084700:	e0bffe17 	ldw	r2,-8(fp)
20084704:	10801104 	addi	r2,r2,68
20084708:	1009883a 	mov	r4,r2
2008470c:	000b883a 	mov	r5,zero
20084710:	01808004 	movi	r6,512
20084714:	008bed40 	call	2008bed4 <memset>
    
    if (pVol->Partition_Type == PARTITION_FAT32){
20084718:	e0bffe17 	ldw	r2,-8(fp)
2008471c:	10800417 	ldw	r2,16(r2)
20084720:	108002d8 	cmpnei	r2,r2,11
20084724:	1000071e 	bne	r2,zero,20084744 <fatMount+0x248>
        pVol->BPB_FATSz = fatArray2Value(&szBlock[0x24], 4);  // BPB_FATSz32
20084728:	01000034 	movhi	r4,0
2008472c:	210b9604 	addi	r4,r4,11864
20084730:	01400104 	movi	r5,4
20084734:	00841bc0 	call	200841bc <fatArray2Value>
20084738:	1007883a 	mov	r3,r2
2008473c:	e0bffe17 	ldw	r2,-8(fp)
20084740:	10c00c15 	stw	r3,48(r2)
        //pVol->BPB_RootEntCnt = fatArray2Value(&szBlock[0x2C], 4);  // BPB_RootClus            
    }
    
    if (pVol->BPB_BytsPerSec != MY_SECTER_SIZE){
20084744:	e0bffe17 	ldw	r2,-8(fp)
20084748:	10800717 	ldw	r2,28(r2)
2008474c:	10808020 	cmpeqi	r2,r2,512
20084750:	1000021e 	bne	r2,zero,2008475c <fatMount+0x260>
        FAT_DEBUG(("This program only supports FAT BPB_BytsPerSec == %d\n", MY_SECTER_SIZE));
        return FALSE; // only support FAT16 in this example
20084754:	0005883a 	mov	r2,zero
20084758:	00003806 	br	2008483c <fatMount+0x340>
    FAT_DEBUG(("Number of Copyies of FAT: %02Xh(%d)\n", pVol->BPB_NumFATs, pVol->BPB_NumFATs));
    FAT_DEBUG(("Maxmun Root Directory Entries: %04Xh(%d)\n", pVol->BPB_RootEntCnt, pVol->BPB_RootEntCnt));
    FAT_DEBUG(("Sectors Per FAT: %04Xh(%d)\n", pVol->BPB_FATSz, pVol->BPB_FATSz));
#endif    
    //
    pVol->FatEntrySecter = pVol->PartitionStartSecter + pVol->BPB_RsvdSecCnt;
2008475c:	e0bffe17 	ldw	r2,-8(fp)
20084760:	10c00617 	ldw	r3,24(r2)
20084764:	e0bffe17 	ldw	r2,-8(fp)
20084768:	10800917 	ldw	r2,36(r2)
2008476c:	1887883a 	add	r3,r3,r2
20084770:	e0bffe17 	ldw	r2,-8(fp)
20084774:	10c00e15 	stw	r3,56(r2)
    pVol->RootDirectoryEntrySecter = pVol->FatEntrySecter + pVol->BPB_NumFATs * pVol->BPB_FATSz;
20084778:	e0bffe17 	ldw	r2,-8(fp)
2008477c:	10c00e17 	ldw	r3,56(r2)
20084780:	e0bffe17 	ldw	r2,-8(fp)
20084784:	11000a17 	ldw	r4,40(r2)
20084788:	e0bffe17 	ldw	r2,-8(fp)
2008478c:	10800c17 	ldw	r2,48(r2)
20084790:	2085383a 	mul	r2,r4,r2
20084794:	1887883a 	add	r3,r3,r2
20084798:	e0bffe17 	ldw	r2,-8(fp)
2008479c:	10c00f15 	stw	r3,60(r2)
    pVol->DataEntrySecter = pVol->RootDirectoryEntrySecter + ((pVol->BPB_RootEntCnt*32)+(pVol->BPB_BytsPerSec-1))/pVol->BPB_BytsPerSec;
200847a0:	e0bffe17 	ldw	r2,-8(fp)
200847a4:	14000f17 	ldw	r16,60(r2)
200847a8:	e0bffe17 	ldw	r2,-8(fp)
200847ac:	10800b17 	ldw	r2,44(r2)
200847b0:	1006917a 	slli	r3,r2,5
200847b4:	e0bffe17 	ldw	r2,-8(fp)
200847b8:	10800717 	ldw	r2,28(r2)
200847bc:	1885883a 	add	r2,r3,r2
200847c0:	10ffffc4 	addi	r3,r2,-1
200847c4:	e0bffe17 	ldw	r2,-8(fp)
200847c8:	10800717 	ldw	r2,28(r2)
200847cc:	1809883a 	mov	r4,r3
200847d0:	100b883a 	mov	r5,r2
200847d4:	0088a740 	call	20088a74 <__udivsi3>
200847d8:	8087883a 	add	r3,r16,r2
200847dc:	e0bffe17 	ldw	r2,-8(fp)
200847e0:	10c01015 	stw	r3,64(r2)
    
    // read FAT table into memory
    pVol->nBytesPerCluster = pVol->BPB_BytsPerSec * pVol->BPB_SecPerCluster;
200847e4:	e0bffe17 	ldw	r2,-8(fp)
200847e8:	10c00717 	ldw	r3,28(r2)
200847ec:	e0bffe17 	ldw	r2,-8(fp)
200847f0:	10800817 	ldw	r2,32(r2)
200847f4:	1887383a 	mul	r3,r3,r2
200847f8:	e0bffe17 	ldw	r2,-8(fp)
200847fc:	10c00d15 	stw	r3,52(r2)
    nFatTableSecterNum = pVol->BPB_NumFATs * pVol->BPB_FATSz;
20084800:	e0bffe17 	ldw	r2,-8(fp)
20084804:	10c00a17 	ldw	r3,40(r2)
20084808:	e0bffe17 	ldw	r2,-8(fp)
2008480c:	10800c17 	ldw	r2,48(r2)
20084810:	1885383a 	mul	r2,r3,r2
20084814:	e0bffc15 	stw	r2,-16(fp)
    nFatTableSize = nFatTableSecterNum * pVol->BPB_BytsPerSec;
20084818:	e0bffe17 	ldw	r2,-8(fp)
2008481c:	10c00717 	ldw	r3,28(r2)
20084820:	e0bffc17 	ldw	r2,-16(fp)
20084824:	1885383a 	mul	r2,r3,r2
20084828:	e0bffd15 	stw	r2,-12(fp)
    if (bSuccess){
        FAT_DEBUG(("Fat_Mount success\n"));
    }else{        
        FAT_DEBUG(("Fat_Mount fail\n"));
    }        
    pVol->bMount = bSuccess;
2008482c:	e0bffe17 	ldw	r2,-8(fp)
20084830:	e0fff817 	ldw	r3,-32(fp)
20084834:	10c00515 	stw	r3,20(r2)
    return bSuccess;   
20084838:	e0bff817 	ldw	r2,-32(fp)
    

}
2008483c:	e6ffff04 	addi	sp,fp,-4
20084840:	dfc00217 	ldw	ra,8(sp)
20084844:	df000117 	ldw	fp,4(sp)
20084848:	dc000017 	ldw	r16,0(sp)
2008484c:	dec00304 	addi	sp,sp,12
20084850:	f800283a 	ret

20084854 <SD_ReadBlock512>:

//===================== SUPPORT_SD_CARD =================================================
#ifdef SUPPORT_SD_CARD

bool SD_ReadBlock512(DISK_HANDLE DiskHandle, alt_u32 PysicalSelector, alt_u8 szBuf[512]){
20084854:	defffb04 	addi	sp,sp,-20
20084858:	dfc00415 	stw	ra,16(sp)
2008485c:	df000315 	stw	fp,12(sp)
20084860:	df000304 	addi	fp,sp,12
20084864:	e13ffd15 	stw	r4,-12(fp)
20084868:	e17ffe15 	stw	r5,-8(fp)
2008486c:	e1bfff15 	stw	r6,-4(fp)
    return SDLIB_ReadBlock512(PysicalSelector, szBuf);
20084870:	e13ffe17 	ldw	r4,-8(fp)
20084874:	e17fff17 	ldw	r5,-4(fp)
20084878:	00872a40 	call	200872a4 <SDLIB_ReadBlock512>
}
2008487c:	e037883a 	mov	sp,fp
20084880:	dfc00117 	ldw	ra,4(sp)
20084884:	df000017 	ldw	fp,0(sp)
20084888:	dec00204 	addi	sp,sp,8
2008488c:	f800283a 	ret

20084890 <SD_ReadBlocks>:

bool SD_ReadBlocks(DISK_HANDLE DiskHandle, alt_u32 PysicalSelector, alt_u32 n, alt_u8* szBuf){
20084890:	defffa04 	addi	sp,sp,-24
20084894:	dfc00515 	stw	ra,20(sp)
20084898:	df000415 	stw	fp,16(sp)
2008489c:	df000404 	addi	fp,sp,16
200848a0:	e13ffc15 	stw	r4,-16(fp)
200848a4:	e17ffd15 	stw	r5,-12(fp)
200848a8:	e1bffe15 	stw	r6,-8(fp)
200848ac:	e1ffff15 	stw	r7,-4(fp)
    return SDLIB_ReadBlocks(PysicalSelector, n, szBuf);
200848b0:	e13ffd17 	ldw	r4,-12(fp)
200848b4:	e17ffe17 	ldw	r5,-8(fp)
200848b8:	e1bfff17 	ldw	r6,-4(fp)
200848bc:	00872f80 	call	200872f8 <SDLIB_ReadBlocks>
}
200848c0:	e037883a 	mov	sp,fp
200848c4:	dfc00117 	ldw	ra,4(sp)
200848c8:	df000017 	ldw	fp,0(sp)
200848cc:	dec00204 	addi	sp,sp,8
200848d0:	f800283a 	ret

200848d4 <fatMountSdcard>:

FAT_HANDLE fatMountSdcard(void){
200848d4:	defff804 	addi	sp,sp,-32
200848d8:	dfc00715 	stw	ra,28(sp)
200848dc:	df000615 	stw	fp,24(sp)
200848e0:	df000604 	addi	fp,sp,24
    FAT_HANDLE hFat = 0;
200848e4:	e03ffa15 	stw	zero,-24(fp)
    VOLUME_INFO *pVol;
    const int nMaxTry=10;
200848e8:	00800284 	movi	r2,10
200848ec:	e0bffd15 	stw	r2,-12(fp)
    bool bFind = FALSE;
200848f0:	e03ffb15 	stw	zero,-20(fp)
    int nTry=0;
200848f4:	e03ffc15 	stw	zero,-16(fp)
    bool bSuccess = TRUE;
200848f8:	00800044 	movi	r2,1
200848fc:	e0bffe15 	stw	r2,-8(fp)
        
    //1. chek whether SD Card existed. Init SD card if it is present.
    while(!bFind && nTry++ < nMaxTry){
20084900:	00000706 	br	20084920 <fatMountSdcard+0x4c>
        bFind = SDLIB_Init();
20084904:	008720c0 	call	2008720c <SDLIB_Init>
20084908:	e0bffb15 	stw	r2,-20(fp)
        if (!bFind)
2008490c:	e0bffb17 	ldw	r2,-20(fp)
20084910:	1000031e 	bne	r2,zero,20084920 <fatMountSdcard+0x4c>
            usleep(100*1000);
20084914:	010000b4 	movhi	r4,2
20084918:	2121a804 	addi	r4,r4,-31072
2008491c:	009a1700 	call	2009a170 <usleep>
    bool bFind = FALSE;
    int nTry=0;
    bool bSuccess = TRUE;
        
    //1. chek whether SD Card existed. Init SD card if it is present.
    while(!bFind && nTry++ < nMaxTry){
20084920:	e0bffb17 	ldw	r2,-20(fp)
20084924:	1000051e 	bne	r2,zero,2008493c <fatMountSdcard+0x68>
20084928:	e0bffc17 	ldw	r2,-16(fp)
2008492c:	10c00044 	addi	r3,r2,1
20084930:	e0fffc15 	stw	r3,-16(fp)
20084934:	e0fffd17 	ldw	r3,-12(fp)
20084938:	10fff216 	blt	r2,r3,20084904 <__flash_rwdata_start+0xfffe5d30>
        bFind = SDLIB_Init();
        if (!bFind)
            usleep(100*1000);
    }
    if (!bFind){
2008493c:	e0bffb17 	ldw	r2,-20(fp)
20084940:	1000021e 	bne	r2,zero,2008494c <fatMountSdcard+0x78>
        FAT_DEBUG(("Cannot find SD card.\n"));
        return hFat;
20084944:	e0bffa17 	ldw	r2,-24(fp)
20084948:	00001806 	br	200849ac <fatMountSdcard+0xd8>
    }    
    
    //hFat = malloc(sizeof(VOLUME_INFO));
    hFat = &vInfo;
2008494c:	00800034 	movhi	r2,0
20084950:	108c2704 	addi	r2,r2,12444
20084954:	e0bffa15 	stw	r2,-24(fp)
    pVol = (VOLUME_INFO *)hFat;
20084958:	e0bffa17 	ldw	r2,-24(fp)
2008495c:	e0bfff15 	stw	r2,-4(fp)
    pVol->ReadBlock512 = SD_ReadBlock512;
20084960:	e0ffff17 	ldw	r3,-4(fp)
20084964:	00880234 	movhi	r2,8200
20084968:	10921504 	addi	r2,r2,18516
2008496c:	18800115 	stw	r2,4(r3)
    pVol->ReadBlocks = SD_ReadBlocks;
20084970:	e0ffff17 	ldw	r3,-4(fp)
20084974:	00880234 	movhi	r2,8200
20084978:	10922404 	addi	r2,r2,18576
2008497c:	18800315 	stw	r2,12(r3)
    bSuccess = fatMount(pVol);
20084980:	e13fff17 	ldw	r4,-4(fp)
20084984:	00844fc0 	call	200844fc <fatMount>
20084988:	e0bffe15 	stw	r2,-8(fp)
  
    if (bSuccess){
2008498c:	e0bffe17 	ldw	r2,-8(fp)
20084990:	10000426 	beq	r2,zero,200849a4 <fatMountSdcard+0xd0>
        FAT_DEBUG(("Fat_Mount success\n"));
        pVol->bMount = TRUE;
20084994:	e0bfff17 	ldw	r2,-4(fp)
20084998:	00c00044 	movi	r3,1
2008499c:	10c00515 	stw	r3,20(r2)
200849a0:	00000106 	br	200849a8 <fatMountSdcard+0xd4>
    }else{        
        FAT_DEBUG(("Fat_Mount fail\n"));
        //free((void *)hFat);
        hFat = 0;
200849a4:	e03ffa15 	stw	zero,-24(fp)
    }        

    return hFat;   
200849a8:	e0bffa17 	ldw	r2,-24(fp)
}
200849ac:	e037883a 	mov	sp,fp
200849b0:	dfc00117 	ldw	ra,4(sp)
200849b4:	df000017 	ldw	fp,0(sp)
200849b8:	dec00204 	addi	sp,sp,8
200849bc:	f800283a 	ret

200849c0 <debug_output>:
#include <stdarg.h> 
#include "ece423_sd.h"
#include "debug.h"


void debug_output(char *pMessage){
200849c0:	defffd04 	addi	sp,sp,-12
200849c4:	dfc00215 	stw	ra,8(sp)
200849c8:	df000115 	stw	fp,4(sp)
200849cc:	df000104 	addi	fp,sp,4
200849d0:	e13fff15 	stw	r4,-4(fp)
    
    printf(pMessage);
200849d4:	e13fff17 	ldw	r4,-4(fp)
200849d8:	008c0240 	call	2008c024 <printf>
}
200849dc:	e037883a 	mov	sp,fp
200849e0:	dfc00117 	ldw	ra,4(sp)
200849e4:	df000017 	ldw	fp,0(sp)
200849e8:	dec00204 	addi	sp,sp,8
200849ec:	f800283a 	ret

200849f0 <myprintf>:

int myprintf(char *format, ...){
200849f0:	deff7804 	addi	sp,sp,-544
200849f4:	dfc08415 	stw	ra,528(sp)
200849f8:	df008315 	stw	fp,524(sp)
200849fc:	df008304 	addi	fp,sp,524
20084a00:	e1400215 	stw	r5,8(fp)
20084a04:	e1800315 	stw	r6,12(fp)
20084a08:	e1c00415 	stw	r7,16(fp)
20084a0c:	e13fff15 	stw	r4,-4(fp)
    int rc;
    char szText[512];
    
    va_list paramList;
    va_start(paramList, format);
20084a10:	e0800204 	addi	r2,fp,8
20084a14:	e0bffe15 	stw	r2,-8(fp)
    rc = vsnprintf(szText, 512, format, paramList);
20084a18:	e0bffe17 	ldw	r2,-8(fp)
20084a1c:	e0ff7e04 	addi	r3,fp,-520
20084a20:	1809883a 	mov	r4,r3
20084a24:	01408004 	movi	r5,512
20084a28:	e1bfff17 	ldw	r6,-4(fp)
20084a2c:	100f883a 	mov	r7,r2
20084a30:	00904a80 	call	200904a8 <vsnprintf>
20084a34:	e0bf7d15 	stw	r2,-524(fp)
    va_end(paramList);
    
    debug_output(szText);
20084a38:	e0bf7e04 	addi	r2,fp,-520
20084a3c:	1009883a 	mov	r4,r2
20084a40:	00849c00 	call	200849c0 <debug_output>

    return rc;    
20084a44:	e0bf7d17 	ldw	r2,-524(fp)
}
20084a48:	e037883a 	mov	sp,fp
20084a4c:	dfc00117 	ldw	ra,4(sp)
20084a50:	df000017 	ldw	fp,0(sp)
20084a54:	dec00504 	addi	sp,sp,20
20084a58:	f800283a 	ret

20084a5c <myprintf_hexarray>:


int myprintf_hexarray(unsigned char *pHex, int len){
20084a5c:	defff704 	addi	sp,sp,-36
20084a60:	dfc00815 	stw	ra,32(sp)
20084a64:	df000715 	stw	fp,28(sp)
20084a68:	df000704 	addi	fp,sp,28
20084a6c:	e13ffe15 	stw	r4,-8(fp)
20084a70:	e17fff15 	stw	r5,-4(fp)
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
20084a74:	e03ff915 	stw	zero,-28(fp)
20084a78:	00001106 	br	20084ac0 <myprintf_hexarray+0x64>
        sprintf(szText, "[%02X]", *(pHex+i));
20084a7c:	e0bff917 	ldw	r2,-28(fp)
20084a80:	e0fffe17 	ldw	r3,-8(fp)
20084a84:	1885883a 	add	r2,r3,r2
20084a88:	10800003 	ldbu	r2,0(r2)
20084a8c:	10803fcc 	andi	r2,r2,255
20084a90:	e0fffa04 	addi	r3,fp,-24
20084a94:	1809883a 	mov	r4,r3
20084a98:	01400034 	movhi	r5,0
20084a9c:	2940a304 	addi	r5,r5,652
20084aa0:	100d883a 	mov	r6,r2
20084aa4:	008c1e80 	call	2008c1e8 <sprintf>
        DEBUG((szText));
20084aa8:	e0bffa04 	addi	r2,fp,-24
20084aac:	1009883a 	mov	r4,r2
20084ab0:	00849f00 	call	200849f0 <myprintf>


int myprintf_hexarray(unsigned char *pHex, int len){
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
20084ab4:	e0bff917 	ldw	r2,-28(fp)
20084ab8:	10800044 	addi	r2,r2,1
20084abc:	e0bff915 	stw	r2,-28(fp)
20084ac0:	e0fff917 	ldw	r3,-28(fp)
20084ac4:	e0bfff17 	ldw	r2,-4(fp)
20084ac8:	18bfec16 	blt	r3,r2,20084a7c <__flash_rwdata_start+0xfffe5ea8>
        sprintf(szText, "[%02X]", *(pHex+i));
        DEBUG((szText));
    }
    return len;
20084acc:	e0bfff17 	ldw	r2,-4(fp)
}
20084ad0:	e037883a 	mov	sp,fp
20084ad4:	dfc00117 	ldw	ra,4(sp)
20084ad8:	df000017 	ldw	fp,0(sp)
20084adc:	dec00204 	addi	sp,sp,8
20084ae0:	f800283a 	ret

20084ae4 <myprintf_dwordarray>:

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
20084ae4:	defff704 	addi	sp,sp,-36
20084ae8:	dfc00815 	stw	ra,32(sp)
20084aec:	df000715 	stw	fp,28(sp)
20084af0:	df000704 	addi	fp,sp,28
20084af4:	e13ffe15 	stw	r4,-8(fp)
20084af8:	e17fff15 	stw	r5,-4(fp)
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
20084afc:	e03ff915 	stw	zero,-28(fp)
20084b00:	00001306 	br	20084b50 <myprintf_dwordarray+0x6c>
        sprintf(szText, "[%08X]", *(pArray+i));
20084b04:	e0bff917 	ldw	r2,-28(fp)
20084b08:	1085883a 	add	r2,r2,r2
20084b0c:	1085883a 	add	r2,r2,r2
20084b10:	1007883a 	mov	r3,r2
20084b14:	e0bffe17 	ldw	r2,-8(fp)
20084b18:	10c5883a 	add	r2,r2,r3
20084b1c:	10800017 	ldw	r2,0(r2)
20084b20:	e0fffa04 	addi	r3,fp,-24
20084b24:	1809883a 	mov	r4,r3
20084b28:	01400034 	movhi	r5,0
20084b2c:	2940a504 	addi	r5,r5,660
20084b30:	100d883a 	mov	r6,r2
20084b34:	008c1e80 	call	2008c1e8 <sprintf>
        DEBUG((szText));
20084b38:	e0bffa04 	addi	r2,fp,-24
20084b3c:	1009883a 	mov	r4,r2
20084b40:	00849f00 	call	200849f0 <myprintf>
}

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
20084b44:	e0bff917 	ldw	r2,-28(fp)
20084b48:	10800044 	addi	r2,r2,1
20084b4c:	e0bff915 	stw	r2,-28(fp)
20084b50:	e0fff917 	ldw	r3,-28(fp)
20084b54:	e0bfff17 	ldw	r2,-4(fp)
20084b58:	18bfea16 	blt	r3,r2,20084b04 <__flash_rwdata_start+0xfffe5f30>
        sprintf(szText, "[%08X]", *(pArray+i));
        DEBUG((szText));
    }
    return nElementCount;
20084b5c:	e0bfff17 	ldw	r2,-4(fp)
}
20084b60:	e037883a 	mov	sp,fp
20084b64:	dfc00117 	ldw	ra,4(sp)
20084b68:	df000017 	ldw	fp,0(sp)
20084b6c:	dec00204 	addi	sp,sp,8
20084b70:	f800283a 	ret

20084b74 <udelay>:
#define MMC_PRINT(x)	DEBUG(x)
#else
#define MMC_PRINT(x)
#endif

void udelay(int t) {
20084b74:	defffd04 	addi	sp,sp,-12
20084b78:	df000215 	stw	fp,8(sp)
20084b7c:	df000204 	addi	fp,sp,8
20084b80:	e13fff15 	stw	r4,-4(fp)
#define US_DELAY 100
	volatile int us = US_DELAY;
20084b84:	00801904 	movi	r2,100
20084b88:	e0bffe15 	stw	r2,-8(fp)
	while (t--) {
20084b8c:	00000706 	br	20084bac <udelay+0x38>
		us = US_DELAY;
20084b90:	00801904 	movi	r2,100
20084b94:	e0bffe15 	stw	r2,-8(fp)
		while (us--)
20084b98:	0001883a 	nop
20084b9c:	e0bffe17 	ldw	r2,-8(fp)
20084ba0:	10ffffc4 	addi	r3,r2,-1
20084ba4:	e0fffe15 	stw	r3,-8(fp)
20084ba8:	103ffc1e 	bne	r2,zero,20084b9c <__flash_rwdata_start+0xfffe5fc8>
#endif

void udelay(int t) {
#define US_DELAY 100
	volatile int us = US_DELAY;
	while (t--) {
20084bac:	e0bfff17 	ldw	r2,-4(fp)
20084bb0:	10ffffc4 	addi	r3,r2,-1
20084bb4:	e0ffff15 	stw	r3,-4(fp)
20084bb8:	103ff51e 	bne	r2,zero,20084b90 <__flash_rwdata_start+0xfffe5fbc>
		us = US_DELAY;
		while (us--)
			;
	}
}
20084bbc:	e037883a 	mov	sp,fp
20084bc0:	df000017 	ldw	fp,0(sp)
20084bc4:	dec00104 	addi	sp,sp,4
20084bc8:	f800283a 	ret

20084bcc <mmc_set_ios>:
 * to platforms without floating point.
 */
static const int multipliers[] = { 0, /* reserved */
10, 12, 13, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 70, 80, };

static void mmc_set_ios(struct mmc *mmc) {
20084bcc:	defffd04 	addi	sp,sp,-12
20084bd0:	dfc00215 	stw	ra,8(sp)
20084bd4:	df000115 	stw	fp,4(sp)
20084bd8:	df000104 	addi	fp,sp,4
20084bdc:	e13fff15 	stw	r4,-4(fp)
	mmc->set_ios(mmc);
20084be0:	e0bfff17 	ldw	r2,-4(fp)
20084be4:	10802517 	ldw	r2,148(r2)
20084be8:	e13fff17 	ldw	r4,-4(fp)
20084bec:	103ee83a 	callr	r2
}
20084bf0:	e037883a 	mov	sp,fp
20084bf4:	dfc00117 	ldw	ra,4(sp)
20084bf8:	df000017 	ldw	fp,0(sp)
20084bfc:	dec00204 	addi	sp,sp,8
20084c00:	f800283a 	ret

20084c04 <mmc_set_bus_width>:

static void mmc_set_bus_width(struct mmc *mmc, uint width) {
20084c04:	defffc04 	addi	sp,sp,-16
20084c08:	dfc00315 	stw	ra,12(sp)
20084c0c:	df000215 	stw	fp,8(sp)
20084c10:	df000204 	addi	fp,sp,8
20084c14:	e13ffe15 	stw	r4,-8(fp)
20084c18:	e17fff15 	stw	r5,-4(fp)
	mmc->bus_width = width;
20084c1c:	e0bffe17 	ldw	r2,-8(fp)
20084c20:	e0ffff17 	ldw	r3,-4(fp)
20084c24:	10c00f15 	stw	r3,60(r2)

	mmc_set_ios(mmc);
20084c28:	e13ffe17 	ldw	r4,-8(fp)
20084c2c:	0084bcc0 	call	20084bcc <mmc_set_ios>
}
20084c30:	e037883a 	mov	sp,fp
20084c34:	dfc00117 	ldw	ra,4(sp)
20084c38:	df000017 	ldw	fp,0(sp)
20084c3c:	dec00204 	addi	sp,sp,8
20084c40:	f800283a 	ret

20084c44 <mmc_set_clock>:

static void mmc_set_clock(struct mmc *mmc, uint clock) {
20084c44:	defffc04 	addi	sp,sp,-16
20084c48:	dfc00315 	stw	ra,12(sp)
20084c4c:	df000215 	stw	fp,8(sp)
20084c50:	df000204 	addi	fp,sp,8
20084c54:	e13ffe15 	stw	r4,-8(fp)
20084c58:	e17fff15 	stw	r5,-4(fp)
	if (clock > mmc->f_max)
20084c5c:	e0bffe17 	ldw	r2,-8(fp)
20084c60:	10c00d17 	ldw	r3,52(r2)
20084c64:	e0bfff17 	ldw	r2,-4(fp)
20084c68:	1880032e 	bgeu	r3,r2,20084c78 <mmc_set_clock+0x34>
		clock = mmc->f_max;
20084c6c:	e0bffe17 	ldw	r2,-8(fp)
20084c70:	10800d17 	ldw	r2,52(r2)
20084c74:	e0bfff15 	stw	r2,-4(fp)

	if (clock < mmc->f_min)
20084c78:	e0bffe17 	ldw	r2,-8(fp)
20084c7c:	10800c17 	ldw	r2,48(r2)
20084c80:	e0ffff17 	ldw	r3,-4(fp)
20084c84:	1880032e 	bgeu	r3,r2,20084c94 <mmc_set_clock+0x50>
		clock = mmc->f_min;
20084c88:	e0bffe17 	ldw	r2,-8(fp)
20084c8c:	10800c17 	ldw	r2,48(r2)
20084c90:	e0bfff15 	stw	r2,-4(fp)

	mmc->clock = clock;
20084c94:	e0bffe17 	ldw	r2,-8(fp)
20084c98:	e0ffff17 	ldw	r3,-4(fp)
20084c9c:	10c01015 	stw	r3,64(r2)

	mmc_set_ios(mmc);
20084ca0:	e13ffe17 	ldw	r4,-8(fp)
20084ca4:	0084bcc0 	call	20084bcc <mmc_set_ios>
}
20084ca8:	e037883a 	mov	sp,fp
20084cac:	dfc00117 	ldw	ra,4(sp)
20084cb0:	df000017 	ldw	fp,0(sp)
20084cb4:	dec00204 	addi	sp,sp,8
20084cb8:	f800283a 	ret

20084cbc <mmc_send_cmd>:

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
20084cbc:	defffa04 	addi	sp,sp,-24
20084cc0:	dfc00515 	stw	ra,20(sp)
20084cc4:	df000415 	stw	fp,16(sp)
20084cc8:	df000404 	addi	fp,sp,16
20084ccc:	e13ffd15 	stw	r4,-12(fp)
20084cd0:	e17ffe15 	stw	r5,-8(fp)
20084cd4:	e1bfff15 	stw	r6,-4(fp)
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20084cd8:	e0bffd17 	ldw	r2,-12(fp)
20084cdc:	10802417 	ldw	r2,144(r2)
20084ce0:	e13ffd17 	ldw	r4,-12(fp)
20084ce4:	e17ffe17 	ldw	r5,-8(fp)
20084ce8:	e1bfff17 	ldw	r6,-4(fp)
20084cec:	103ee83a 	callr	r2
20084cf0:	e0bffc15 	stw	r2,-16(fp)

	return ret;
20084cf4:	e0bffc17 	ldw	r2,-16(fp)
}
20084cf8:	e037883a 	mov	sp,fp
20084cfc:	dfc00117 	ldw	ra,4(sp)
20084d00:	df000017 	ldw	fp,0(sp)
20084d04:	dec00204 	addi	sp,sp,8
20084d08:	f800283a 	ret

20084d0c <mmc_go_idle>:

static int mmc_go_idle(struct mmc* mmc) {
20084d0c:	defff504 	addi	sp,sp,-44
20084d10:	dfc00a15 	stw	ra,40(sp)
20084d14:	df000915 	stw	fp,36(sp)
20084d18:	df000904 	addi	fp,sp,36
20084d1c:	e13fff15 	stw	r4,-4(fp)
	struct mmc_cmd cmd;
	int err;

	udelay(1000);
20084d20:	0100fa04 	movi	r4,1000
20084d24:	0084b740 	call	20084b74 <udelay>

	cmd.cmdidx = MMC_CMD_GO_IDLE_STATE;
20084d28:	e03ff80d 	sth	zero,-32(fp)
	cmd.cmdarg = 0;
20084d2c:	e03ffa15 	stw	zero,-24(fp)
	cmd.resp_type = MMC_RSP_NONE;
20084d30:	e03ff915 	stw	zero,-28(fp)

	err = mmc_send_cmd(mmc, &cmd, NULL);
20084d34:	e0bff804 	addi	r2,fp,-32
20084d38:	e13fff17 	ldw	r4,-4(fp)
20084d3c:	100b883a 	mov	r5,r2
20084d40:	000d883a 	mov	r6,zero
20084d44:	0084cbc0 	call	20084cbc <mmc_send_cmd>
20084d48:	e0bff715 	stw	r2,-36(fp)

	if (err)
20084d4c:	e0bff717 	ldw	r2,-36(fp)
20084d50:	10000226 	beq	r2,zero,20084d5c <mmc_go_idle+0x50>
		return err;
20084d54:	e0bff717 	ldw	r2,-36(fp)
20084d58:	00000306 	br	20084d68 <mmc_go_idle+0x5c>

	udelay(2000);
20084d5c:	0101f404 	movi	r4,2000
20084d60:	0084b740 	call	20084b74 <udelay>

	return 0;
20084d64:	0005883a 	mov	r2,zero
}
20084d68:	e037883a 	mov	sp,fp
20084d6c:	dfc00117 	ldw	ra,4(sp)
20084d70:	df000017 	ldw	fp,0(sp)
20084d74:	dec00204 	addi	sp,sp,8
20084d78:	f800283a 	ret

20084d7c <mmc_send_if_cond>:

static int mmc_send_if_cond(struct mmc *mmc) {
20084d7c:	defff504 	addi	sp,sp,-44
20084d80:	dfc00a15 	stw	ra,40(sp)
20084d84:	df000915 	stw	fp,36(sp)
20084d88:	df000904 	addi	fp,sp,36
20084d8c:	e13fff15 	stw	r4,-4(fp)
	struct mmc_cmd cmd;
	int err;

	cmd.cmdidx = SD_CMD_SEND_IF_COND;
20084d90:	00800204 	movi	r2,8
20084d94:	e0bff80d 	sth	r2,-32(fp)
	/* We set the bit if the host supports voltages between 2.7 and 3.6 V */
	cmd.cmdarg = ((mmc->voltages & 0xff8000) != 0) << 8 | 0xaa;
20084d98:	e0bfff17 	ldw	r2,-4(fp)
20084d9c:	10c00917 	ldw	r3,36(r2)
20084da0:	00804034 	movhi	r2,256
20084da4:	10a00004 	addi	r2,r2,-32768
20084da8:	1884703a 	and	r2,r3,r2
20084dac:	10000226 	beq	r2,zero,20084db8 <mmc_send_if_cond+0x3c>
20084db0:	00806a84 	movi	r2,426
20084db4:	00000106 	br	20084dbc <mmc_send_if_cond+0x40>
20084db8:	00802a84 	movi	r2,170
20084dbc:	e0bffa15 	stw	r2,-24(fp)
	cmd.resp_type = MMC_RSP_R7;
20084dc0:	00800544 	movi	r2,21
20084dc4:	e0bff915 	stw	r2,-28(fp)

	err = mmc_send_cmd(mmc, &cmd, NULL);
20084dc8:	e0bff804 	addi	r2,fp,-32
20084dcc:	e13fff17 	ldw	r4,-4(fp)
20084dd0:	100b883a 	mov	r5,r2
20084dd4:	000d883a 	mov	r6,zero
20084dd8:	0084cbc0 	call	20084cbc <mmc_send_cmd>
20084ddc:	e0bff715 	stw	r2,-36(fp)

	if (err)
20084de0:	e0bff717 	ldw	r2,-36(fp)
20084de4:	10000226 	beq	r2,zero,20084df0 <mmc_send_if_cond+0x74>
		return err;
20084de8:	e0bff717 	ldw	r2,-36(fp)
20084dec:	00000b06 	br	20084e1c <mmc_send_if_cond+0xa0>

	if ((cmd.response[0] & 0xff) != 0xaa)
20084df0:	e0bffb17 	ldw	r2,-20(fp)
20084df4:	10803fcc 	andi	r2,r2,255
20084df8:	10802aa0 	cmpeqi	r2,r2,170
20084dfc:	1000021e 	bne	r2,zero,20084e08 <mmc_send_if_cond+0x8c>
		return UNUSABLE_ERR;
20084e00:	00bffbc4 	movi	r2,-17
20084e04:	00000506 	br	20084e1c <mmc_send_if_cond+0xa0>
	else
		mmc->version = SD_VERSION_2;
20084e08:	e0ffff17 	ldw	r3,-4(fp)
20084e0c:	008000b4 	movhi	r2,2
20084e10:	10800804 	addi	r2,r2,32
20084e14:	18800a15 	stw	r2,40(r3)

	return 0;
20084e18:	0005883a 	mov	r2,zero
}
20084e1c:	e037883a 	mov	sp,fp
20084e20:	dfc00117 	ldw	ra,4(sp)
20084e24:	df000017 	ldw	fp,0(sp)
20084e28:	dec00204 	addi	sp,sp,8
20084e2c:	f800283a 	ret

20084e30 <sd_send_op_cond>:

static int sd_send_op_cond(struct mmc *mmc) {
20084e30:	defff404 	addi	sp,sp,-48
20084e34:	dfc00b15 	stw	ra,44(sp)
20084e38:	df000a15 	stw	fp,40(sp)
20084e3c:	df000a04 	addi	fp,sp,40
20084e40:	e13fff15 	stw	r4,-4(fp)
	int timeout = 1000;
20084e44:	0080fa04 	movi	r2,1000
20084e48:	e0bff615 	stw	r2,-40(fp)
	int err;
	struct mmc_cmd cmd;

	do {
		cmd.cmdidx = MMC_CMD_APP_CMD;
20084e4c:	00800dc4 	movi	r2,55
20084e50:	e0bff80d 	sth	r2,-32(fp)
		cmd.resp_type = MMC_RSP_R1;
20084e54:	00800544 	movi	r2,21
20084e58:	e0bff915 	stw	r2,-28(fp)
		cmd.cmdarg = 0;
20084e5c:	e03ffa15 	stw	zero,-24(fp)

		err = mmc_send_cmd(mmc, &cmd, NULL);
20084e60:	e0bff804 	addi	r2,fp,-32
20084e64:	e13fff17 	ldw	r4,-4(fp)
20084e68:	100b883a 	mov	r5,r2
20084e6c:	000d883a 	mov	r6,zero
20084e70:	0084cbc0 	call	20084cbc <mmc_send_cmd>
20084e74:	e0bff715 	stw	r2,-36(fp)

		if (err)
20084e78:	e0bff717 	ldw	r2,-36(fp)
20084e7c:	10000226 	beq	r2,zero,20084e88 <sd_send_op_cond+0x58>
			return err;
20084e80:	e0bff717 	ldw	r2,-36(fp)
20084e84:	00003e06 	br	20084f80 <sd_send_op_cond+0x150>

		cmd.cmdidx = SD_CMD_APP_SEND_OP_COND;
20084e88:	00800a44 	movi	r2,41
20084e8c:	e0bff80d 	sth	r2,-32(fp)
		cmd.resp_type = MMC_RSP_R3;
20084e90:	00800044 	movi	r2,1
20084e94:	e0bff915 	stw	r2,-28(fp)
		 * in the ocr are set. However, Some controller
		 * can set bit 7 (reserved for low voltages), but
		 * how to manage low voltages SD card is not yet
		 * specified.
		 */
		cmd.cmdarg = (mmc->voltages & 0xff8000);
20084e98:	e0bfff17 	ldw	r2,-4(fp)
20084e9c:	10c00917 	ldw	r3,36(r2)
20084ea0:	00804034 	movhi	r2,256
20084ea4:	10a00004 	addi	r2,r2,-32768
20084ea8:	1884703a 	and	r2,r3,r2
20084eac:	e0bffa15 	stw	r2,-24(fp)

		if (mmc->version == SD_VERSION_2)
20084eb0:	e0bfff17 	ldw	r2,-4(fp)
20084eb4:	10c00a17 	ldw	r3,40(r2)
20084eb8:	008000b4 	movhi	r2,2
20084ebc:	10800804 	addi	r2,r2,32
20084ec0:	1880031e 	bne	r3,r2,20084ed0 <sd_send_op_cond+0xa0>
			cmd.cmdarg |= OCR_HCS;
20084ec4:	e0bffa17 	ldw	r2,-24(fp)
20084ec8:	10900034 	orhi	r2,r2,16384
20084ecc:	e0bffa15 	stw	r2,-24(fp)

		err = mmc_send_cmd(mmc, &cmd, NULL);
20084ed0:	e0bff804 	addi	r2,fp,-32
20084ed4:	e13fff17 	ldw	r4,-4(fp)
20084ed8:	100b883a 	mov	r5,r2
20084edc:	000d883a 	mov	r6,zero
20084ee0:	0084cbc0 	call	20084cbc <mmc_send_cmd>
20084ee4:	e0bff715 	stw	r2,-36(fp)

		if (err)
20084ee8:	e0bff717 	ldw	r2,-36(fp)
20084eec:	10000226 	beq	r2,zero,20084ef8 <sd_send_op_cond+0xc8>
			return err;
20084ef0:	e0bff717 	ldw	r2,-36(fp)
20084ef4:	00002206 	br	20084f80 <sd_send_op_cond+0x150>

		udelay(1000);
20084ef8:	0100fa04 	movi	r4,1000
20084efc:	0084b740 	call	20084b74 <udelay>
	} while ((!(cmd.response[0] & OCR_BUSY)) && timeout--);
20084f00:	e0bffb17 	ldw	r2,-20(fp)
20084f04:	10000416 	blt	r2,zero,20084f18 <sd_send_op_cond+0xe8>
20084f08:	e0bff617 	ldw	r2,-40(fp)
20084f0c:	10ffffc4 	addi	r3,r2,-1
20084f10:	e0fff615 	stw	r3,-40(fp)
20084f14:	103fcd1e 	bne	r2,zero,20084e4c <__flash_rwdata_start+0xfffe6278>

	if (timeout <= 0)
20084f18:	e0bff617 	ldw	r2,-40(fp)
20084f1c:	00800216 	blt	zero,r2,20084f28 <sd_send_op_cond+0xf8>
		return UNUSABLE_ERR;
20084f20:	00bffbc4 	movi	r2,-17
20084f24:	00001606 	br	20084f80 <sd_send_op_cond+0x150>

	if (mmc->version != SD_VERSION_2)
20084f28:	e0bfff17 	ldw	r2,-4(fp)
20084f2c:	10c00a17 	ldw	r3,40(r2)
20084f30:	008000b4 	movhi	r2,2
20084f34:	10800804 	addi	r2,r2,32
20084f38:	18800426 	beq	r3,r2,20084f4c <sd_send_op_cond+0x11c>
		mmc->version = SD_VERSION_1_0;
20084f3c:	e0ffff17 	ldw	r3,-4(fp)
20084f40:	008000b4 	movhi	r2,2
20084f44:	10800404 	addi	r2,r2,16
20084f48:	18800a15 	stw	r2,40(r3)

	mmc->ocr = cmd.response[0];
20084f4c:	e0fffb17 	ldw	r3,-20(fp)
20084f50:	e0bfff17 	ldw	r2,-4(fp)
20084f54:	10c01315 	stw	r3,76(r2)

	mmc->high_capacity = ((mmc->ocr & OCR_HCS) == OCR_HCS);
20084f58:	e0bfff17 	ldw	r2,-4(fp)
20084f5c:	10801317 	ldw	r2,76(r2)
20084f60:	1090002c 	andhi	r2,r2,16384
20084f64:	1004c03a 	cmpne	r2,r2,zero
20084f68:	10c03fcc 	andi	r3,r2,255
20084f6c:	e0bfff17 	ldw	r2,-4(fp)
20084f70:	10c00e15 	stw	r3,56(r2)
	mmc->rca = 0;
20084f74:	e0bfff17 	ldw	r2,-4(fp)
20084f78:	10001e0d 	sth	zero,120(r2)

	return 0;
20084f7c:	0005883a 	mov	r2,zero
}
20084f80:	e037883a 	mov	sp,fp
20084f84:	dfc00117 	ldw	ra,4(sp)
20084f88:	df000017 	ldw	fp,0(sp)
20084f8c:	dec00204 	addi	sp,sp,8
20084f90:	f800283a 	ret

20084f94 <mmc_send_op_cond>:

static int mmc_send_op_cond(struct mmc *mmc) {
20084f94:	defff404 	addi	sp,sp,-48
20084f98:	dfc00b15 	stw	ra,44(sp)
20084f9c:	df000a15 	stw	fp,40(sp)
20084fa0:	df000a04 	addi	fp,sp,40
20084fa4:	e13fff15 	stw	r4,-4(fp)
	int timeout = 10000;
20084fa8:	0089c404 	movi	r2,10000
20084fac:	e0bff615 	stw	r2,-40(fp)
	struct mmc_cmd cmd;
	int err;

	/* Some cards seem to need this */
	mmc_go_idle(mmc);
20084fb0:	e13fff17 	ldw	r4,-4(fp)
20084fb4:	0084d0c0 	call	20084d0c <mmc_go_idle>

	/* Asking to the card its capabilities */
	cmd.cmdidx = MMC_CMD_SEND_OP_COND;
20084fb8:	00800044 	movi	r2,1
20084fbc:	e0bff80d 	sth	r2,-32(fp)
	cmd.resp_type = MMC_RSP_R3;
20084fc0:	00800044 	movi	r2,1
20084fc4:	e0bff915 	stw	r2,-28(fp)
	cmd.cmdarg = 0;
20084fc8:	e03ffa15 	stw	zero,-24(fp)

	err = mmc_send_cmd(mmc, &cmd, NULL);
20084fcc:	e0bff804 	addi	r2,fp,-32
20084fd0:	e13fff17 	ldw	r4,-4(fp)
20084fd4:	100b883a 	mov	r5,r2
20084fd8:	000d883a 	mov	r6,zero
20084fdc:	0084cbc0 	call	20084cbc <mmc_send_cmd>
20084fe0:	e0bff715 	stw	r2,-36(fp)

	if (err)
20084fe4:	e0bff717 	ldw	r2,-36(fp)
20084fe8:	10000226 	beq	r2,zero,20084ff4 <mmc_send_op_cond+0x60>
		return err;
20084fec:	e0bff717 	ldw	r2,-36(fp)
20084ff0:	00003e06 	br	200850ec <mmc_send_op_cond+0x158>

	udelay(1000);
20084ff4:	0100fa04 	movi	r4,1000
20084ff8:	0084b740 	call	20084b74 <udelay>

	do {
		cmd.cmdidx = MMC_CMD_SEND_OP_COND;
20084ffc:	00800044 	movi	r2,1
20085000:	e0bff80d 	sth	r2,-32(fp)
		cmd.resp_type = MMC_RSP_R3;
20085004:	00800044 	movi	r2,1
20085008:	e0bff915 	stw	r2,-28(fp)
		cmd.cmdarg = (mmc->voltages & (cmd.response[0] & OCR_VOLTAGE_MASK))
2008500c:	e0bfff17 	ldw	r2,-4(fp)
20085010:	10c00917 	ldw	r3,36(r2)
20085014:	e0bffb17 	ldw	r2,-20(fp)
20085018:	1886703a 	and	r3,r3,r2
2008501c:	00802034 	movhi	r2,128
20085020:	10bfe004 	addi	r2,r2,-128
20085024:	1886703a 	and	r3,r3,r2
				| (cmd.response[0] & OCR_ACCESS_MODE);
20085028:	e0bffb17 	ldw	r2,-20(fp)
2008502c:	1098002c 	andhi	r2,r2,24576
20085030:	1884b03a 	or	r2,r3,r2
	udelay(1000);

	do {
		cmd.cmdidx = MMC_CMD_SEND_OP_COND;
		cmd.resp_type = MMC_RSP_R3;
		cmd.cmdarg = (mmc->voltages & (cmd.response[0] & OCR_VOLTAGE_MASK))
20085034:	e0bffa15 	stw	r2,-24(fp)
				| (cmd.response[0] & OCR_ACCESS_MODE);

		if (mmc->host_caps & MMC_MODE_HC)
20085038:	e0bfff17 	ldw	r2,-4(fp)
2008503c:	10801217 	ldw	r2,72(r2)
20085040:	1082000c 	andi	r2,r2,2048
20085044:	10000326 	beq	r2,zero,20085054 <mmc_send_op_cond+0xc0>
			cmd.cmdarg |= OCR_HCS;
20085048:	e0bffa17 	ldw	r2,-24(fp)
2008504c:	10900034 	orhi	r2,r2,16384
20085050:	e0bffa15 	stw	r2,-24(fp)

		err = mmc_send_cmd(mmc, &cmd, NULL);
20085054:	e0bff804 	addi	r2,fp,-32
20085058:	e13fff17 	ldw	r4,-4(fp)
2008505c:	100b883a 	mov	r5,r2
20085060:	000d883a 	mov	r6,zero
20085064:	0084cbc0 	call	20084cbc <mmc_send_cmd>
20085068:	e0bff715 	stw	r2,-36(fp)

		if (err)
2008506c:	e0bff717 	ldw	r2,-36(fp)
20085070:	10000226 	beq	r2,zero,2008507c <mmc_send_op_cond+0xe8>
			return err;
20085074:	e0bff717 	ldw	r2,-36(fp)
20085078:	00001c06 	br	200850ec <mmc_send_op_cond+0x158>

		udelay(1000);
2008507c:	0100fa04 	movi	r4,1000
20085080:	0084b740 	call	20084b74 <udelay>
	} while (!(cmd.response[0] & OCR_BUSY) && timeout--);
20085084:	e0bffb17 	ldw	r2,-20(fp)
20085088:	10000416 	blt	r2,zero,2008509c <mmc_send_op_cond+0x108>
2008508c:	e0bff617 	ldw	r2,-40(fp)
20085090:	10ffffc4 	addi	r3,r2,-1
20085094:	e0fff615 	stw	r3,-40(fp)
20085098:	103fd81e 	bne	r2,zero,20084ffc <__flash_rwdata_start+0xfffe6428>

	if (timeout <= 0)
2008509c:	e0bff617 	ldw	r2,-40(fp)
200850a0:	00800216 	blt	zero,r2,200850ac <mmc_send_op_cond+0x118>
		return UNUSABLE_ERR;
200850a4:	00bffbc4 	movi	r2,-17
200850a8:	00001006 	br	200850ec <mmc_send_op_cond+0x158>

	mmc->version = MMC_VERSION_UNKNOWN;
200850ac:	e0bfff17 	ldw	r2,-4(fp)
200850b0:	00c00074 	movhi	r3,1
200850b4:	10c00a15 	stw	r3,40(r2)
	mmc->ocr = cmd.response[0];
200850b8:	e0fffb17 	ldw	r3,-20(fp)
200850bc:	e0bfff17 	ldw	r2,-4(fp)
200850c0:	10c01315 	stw	r3,76(r2)

	mmc->high_capacity = ((mmc->ocr & OCR_HCS) == OCR_HCS);
200850c4:	e0bfff17 	ldw	r2,-4(fp)
200850c8:	10801317 	ldw	r2,76(r2)
200850cc:	1090002c 	andhi	r2,r2,16384
200850d0:	1004c03a 	cmpne	r2,r2,zero
200850d4:	10c03fcc 	andi	r3,r2,255
200850d8:	e0bfff17 	ldw	r2,-4(fp)
200850dc:	10c00e15 	stw	r3,56(r2)
	mmc->rca = 0;
200850e0:	e0bfff17 	ldw	r2,-4(fp)
200850e4:	10001e0d 	sth	zero,120(r2)

	return 0;
200850e8:	0005883a 	mov	r2,zero
}
200850ec:	e037883a 	mov	sp,fp
200850f0:	dfc00117 	ldw	ra,4(sp)
200850f4:	df000017 	ldw	fp,0(sp)
200850f8:	dec00204 	addi	sp,sp,8
200850fc:	f800283a 	ret

20085100 <mmc_send_status>:

static int mmc_send_status(struct mmc *mmc, int timeout) {
20085100:	defff304 	addi	sp,sp,-52
20085104:	dfc00c15 	stw	ra,48(sp)
20085108:	df000b15 	stw	fp,44(sp)
2008510c:	df000b04 	addi	fp,sp,44
20085110:	e13ffe15 	stw	r4,-8(fp)
20085114:	e17fff15 	stw	r5,-4(fp)
	struct mmc_cmd cmd;
	int err, retries = 5;
20085118:	00800144 	movi	r2,5
2008511c:	e0bff515 	stw	r2,-44(fp)

	cmd.cmdidx = MMC_CMD_SEND_STATUS;
20085120:	00800344 	movi	r2,13
20085124:	e0bff70d 	sth	r2,-36(fp)
	cmd.resp_type = MMC_RSP_R1;
20085128:	00800544 	movi	r2,21
2008512c:	e0bff815 	stw	r2,-32(fp)
	cmd.cmdarg = mmc->rca << 16;
20085130:	e0bffe17 	ldw	r2,-8(fp)
20085134:	10801e0b 	ldhu	r2,120(r2)
20085138:	10bfffcc 	andi	r2,r2,65535
2008513c:	1004943a 	slli	r2,r2,16
20085140:	e0bff915 	stw	r2,-28(fp)

	do {
		err = mmc_send_cmd(mmc, &cmd, NULL);
20085144:	e0bff704 	addi	r2,fp,-36
20085148:	e13ffe17 	ldw	r4,-8(fp)
2008514c:	100b883a 	mov	r5,r2
20085150:	000d883a 	mov	r6,zero
20085154:	0084cbc0 	call	20084cbc <mmc_send_cmd>
20085158:	e0bff615 	stw	r2,-40(fp)
		if (!err) {
2008515c:	e0bff617 	ldw	r2,-40(fp)
20085160:	1000131e 	bne	r2,zero,200851b0 <mmc_send_status+0xb0>
			if ((cmd.response[0] & MMC_STATUS_RDY_FOR_DATA)
20085164:	e0bffa17 	ldw	r2,-24(fp)
20085168:	1080400c 	andi	r2,r2,256
2008516c:	10000426 	beq	r2,zero,20085180 <mmc_send_status+0x80>
					&& (cmd.response[0] & MMC_STATUS_CURR_STATE) !=
20085170:	e0bffa17 	ldw	r2,-24(fp)
20085174:	1087800c 	andi	r2,r2,7680
20085178:	10838018 	cmpnei	r2,r2,3584
2008517c:	1000191e 	bne	r2,zero,200851e4 <mmc_send_status+0xe4>
					MMC_STATE_PRG)
				break;
			else if (cmd.response[0] & MMC_STATUS_MASK) {
20085180:	e0fffa17 	ldw	r3,-24(fp)
20085184:	00bf7e74 	movhi	r2,65017
20085188:	10902004 	addi	r2,r2,16512
2008518c:	1884703a 	and	r2,r3,r2
20085190:	10000e26 	beq	r2,zero,200851cc <mmc_send_status+0xcc>
				printf("Status Error: 0x%08X\n\r", cmd.response[0]);
20085194:	e0bffa17 	ldw	r2,-24(fp)
20085198:	01000034 	movhi	r4,0
2008519c:	2100bb04 	addi	r4,r4,748
200851a0:	100b883a 	mov	r5,r2
200851a4:	008c0240 	call	2008c024 <printf>
				return COMM_ERR;
200851a8:	00bffb84 	movi	r2,-18
200851ac:	00001506 	br	20085204 <mmc_send_status+0x104>
			}
		} else if (--retries < 0)
200851b0:	e0bff517 	ldw	r2,-44(fp)
200851b4:	10bfffc4 	addi	r2,r2,-1
200851b8:	e0bff515 	stw	r2,-44(fp)
200851bc:	e0bff517 	ldw	r2,-44(fp)
200851c0:	1000020e 	bge	r2,zero,200851cc <mmc_send_status+0xcc>
			return err;
200851c4:	e0bff617 	ldw	r2,-40(fp)
200851c8:	00000e06 	br	20085204 <mmc_send_status+0x104>

		udelay(1000);
200851cc:	0100fa04 	movi	r4,1000
200851d0:	0084b740 	call	20084b74 <udelay>

	} while (timeout--);
200851d4:	e0bfff17 	ldw	r2,-4(fp)
200851d8:	10ffffc4 	addi	r3,r2,-1
200851dc:	e0ffff15 	stw	r3,-4(fp)
200851e0:	103fd81e 	bne	r2,zero,20085144 <__flash_rwdata_start+0xfffe6570>

	if (timeout <= 0) {
200851e4:	e0bfff17 	ldw	r2,-4(fp)
200851e8:	00800516 	blt	zero,r2,20085200 <mmc_send_status+0x100>
		printf("Timeout waiting card ready\n\r");
200851ec:	01000034 	movhi	r4,0
200851f0:	2100c104 	addi	r4,r4,772
200851f4:	008c0240 	call	2008c024 <printf>
		return TIMEOUT;
200851f8:	00bffb44 	movi	r2,-19
200851fc:	00000106 	br	20085204 <mmc_send_status+0x104>
	}

	return 0;
20085200:	0005883a 	mov	r2,zero
}
20085204:	e037883a 	mov	sp,fp
20085208:	dfc00117 	ldw	ra,4(sp)
2008520c:	df000017 	ldw	fp,0(sp)
20085210:	dec00204 	addi	sp,sp,8
20085214:	f800283a 	ret

20085218 <mmc_send_ext_csd>:

static int mmc_send_ext_csd(struct mmc *mmc, char *ext_csd) {
20085218:	defff004 	addi	sp,sp,-64
2008521c:	dfc00f15 	stw	ra,60(sp)
20085220:	df000e15 	stw	fp,56(sp)
20085224:	df000e04 	addi	fp,sp,56
20085228:	e13ffe15 	stw	r4,-8(fp)
2008522c:	e17fff15 	stw	r5,-4(fp)
	struct mmc_cmd cmd;
	struct mmc_data data;
	int err;

	/* Get the Card Status Register */
	cmd.cmdidx = MMC_CMD_SEND_EXT_CSD;
20085230:	00800204 	movi	r2,8
20085234:	e0bff30d 	sth	r2,-52(fp)
	cmd.resp_type = MMC_RSP_R1;
20085238:	00800544 	movi	r2,21
2008523c:	e0bff415 	stw	r2,-48(fp)
	cmd.cmdarg = 0;
20085240:	e03ff515 	stw	zero,-44(fp)

	data.dest = (char *) ext_csd;
20085244:	e0bfff17 	ldw	r2,-4(fp)
20085248:	e0bffa15 	stw	r2,-24(fp)
	data.blocks = 1;
2008524c:	00800044 	movi	r2,1
20085250:	e0bffc15 	stw	r2,-16(fp)
	data.blocksize = 512;
20085254:	00808004 	movi	r2,512
20085258:	e0bffd15 	stw	r2,-12(fp)
	data.flags = MMC_DATA_READ;
2008525c:	00800044 	movi	r2,1
20085260:	e0bffb15 	stw	r2,-20(fp)

	err = mmc_send_cmd(mmc, &cmd, &data);
20085264:	e0fff304 	addi	r3,fp,-52
20085268:	e0bffa04 	addi	r2,fp,-24
2008526c:	e13ffe17 	ldw	r4,-8(fp)
20085270:	180b883a 	mov	r5,r3
20085274:	100d883a 	mov	r6,r2
20085278:	0084cbc0 	call	20084cbc <mmc_send_cmd>
2008527c:	e0bff215 	stw	r2,-56(fp)

	return err;
20085280:	e0bff217 	ldw	r2,-56(fp)
}
20085284:	e037883a 	mov	sp,fp
20085288:	dfc00117 	ldw	ra,4(sp)
2008528c:	df000017 	ldw	fp,0(sp)
20085290:	dec00204 	addi	sp,sp,8
20085294:	f800283a 	ret

20085298 <mmc_switch>:

static int mmc_switch(struct mmc *mmc, char set, char index, char value) {
20085298:	defff104 	addi	sp,sp,-60
2008529c:	dfc00e15 	stw	ra,56(sp)
200852a0:	df000d15 	stw	fp,52(sp)
200852a4:	df000d04 	addi	fp,sp,52
200852a8:	e13ffc15 	stw	r4,-16(fp)
200852ac:	2809883a 	mov	r4,r5
200852b0:	3007883a 	mov	r3,r6
200852b4:	3805883a 	mov	r2,r7
200852b8:	e13ffd05 	stb	r4,-12(fp)
200852bc:	e0fffe05 	stb	r3,-8(fp)
200852c0:	e0bfff05 	stb	r2,-4(fp)
	struct mmc_cmd cmd;
	int timeout = 1000;
200852c4:	0080fa04 	movi	r2,1000
200852c8:	e0bff415 	stw	r2,-48(fp)
	int ret;

	cmd.cmdidx = MMC_CMD_SWITCH;
200852cc:	00800184 	movi	r2,6
200852d0:	e0bff50d 	sth	r2,-44(fp)
	cmd.resp_type = MMC_RSP_R1b;
200852d4:	00800744 	movi	r2,29
200852d8:	e0bff615 	stw	r2,-40(fp)
	cmd.cmdarg = (MMC_SWITCH_MODE_WRITE_BYTE << 24) | (index << 16)
200852dc:	e0bffe07 	ldb	r2,-8(fp)
200852e0:	1004943a 	slli	r2,r2,16
200852e4:	10c0c034 	orhi	r3,r2,768
			| (value << 8);
200852e8:	e0bfff07 	ldb	r2,-4(fp)
200852ec:	1004923a 	slli	r2,r2,8
200852f0:	1884b03a 	or	r2,r3,r2
	int timeout = 1000;
	int ret;

	cmd.cmdidx = MMC_CMD_SWITCH;
	cmd.resp_type = MMC_RSP_R1b;
	cmd.cmdarg = (MMC_SWITCH_MODE_WRITE_BYTE << 24) | (index << 16)
200852f4:	e0bff715 	stw	r2,-36(fp)
			| (value << 8);

	ret = mmc_send_cmd(mmc, &cmd, NULL);
200852f8:	e0bff504 	addi	r2,fp,-44
200852fc:	e13ffc17 	ldw	r4,-16(fp)
20085300:	100b883a 	mov	r5,r2
20085304:	000d883a 	mov	r6,zero
20085308:	0084cbc0 	call	20084cbc <mmc_send_cmd>
2008530c:	e0bff315 	stw	r2,-52(fp)

	/* Waiting for the ready status */
	if (!ret)
20085310:	e0bff317 	ldw	r2,-52(fp)
20085314:	1000041e 	bne	r2,zero,20085328 <mmc_switch+0x90>
		ret = mmc_send_status(mmc, timeout);
20085318:	e13ffc17 	ldw	r4,-16(fp)
2008531c:	e17ff417 	ldw	r5,-48(fp)
20085320:	00851000 	call	20085100 <mmc_send_status>
20085324:	e0bff315 	stw	r2,-52(fp)

	return ret;
20085328:	e0bff317 	ldw	r2,-52(fp)

}
2008532c:	e037883a 	mov	sp,fp
20085330:	dfc00117 	ldw	ra,4(sp)
20085334:	df000017 	ldw	fp,0(sp)
20085338:	dec00204 	addi	sp,sp,8
2008533c:	f800283a 	ret

20085340 <sd_switch>:

static int sd_switch(struct mmc *mmc, int mode, int group, char value,
		char *resp) {
20085340:	deffe804 	addi	sp,sp,-96
20085344:	dfc01715 	stw	ra,92(sp)
20085348:	df001615 	stw	fp,88(sp)
2008534c:	df001604 	addi	fp,sp,88
20085350:	e13ffc15 	stw	r4,-16(fp)
20085354:	e17ffd15 	stw	r5,-12(fp)
20085358:	e1bffe15 	stw	r6,-8(fp)
2008535c:	3805883a 	mov	r2,r7
20085360:	e0bfff05 	stb	r2,-4(fp)
	struct mmc_cmd cmd;
	struct mmc_data data;

	/* Switch the frequency */
	cmd.cmdidx = SD_CMD_SWITCH_FUNC;
20085364:	00800184 	movi	r2,6
20085368:	e0bff10d 	sth	r2,-60(fp)
	cmd.resp_type = MMC_RSP_R1;
2008536c:	00800544 	movi	r2,21
20085370:	e0bff215 	stw	r2,-56(fp)
	cmd.cmdarg = (mode << 31) | 0xffffff;
20085374:	e0bffd17 	ldw	r2,-12(fp)
20085378:	100697fa 	slli	r3,r2,31
2008537c:	00804034 	movhi	r2,256
20085380:	10bfffc4 	addi	r2,r2,-1
20085384:	1884b03a 	or	r2,r3,r2
20085388:	e0bff315 	stw	r2,-52(fp)
	cmd.cmdarg &= ~(0xf << (group * 4));
2008538c:	e0fff317 	ldw	r3,-52(fp)
20085390:	e0bffe17 	ldw	r2,-8(fp)
20085394:	1085883a 	add	r2,r2,r2
20085398:	1085883a 	add	r2,r2,r2
2008539c:	1009883a 	mov	r4,r2
200853a0:	008003c4 	movi	r2,15
200853a4:	1104983a 	sll	r2,r2,r4
200853a8:	0084303a 	nor	r2,zero,r2
200853ac:	1884703a 	and	r2,r3,r2
200853b0:	e0bff315 	stw	r2,-52(fp)
	cmd.cmdarg |= value << (group * 4);
200853b4:	e0fff317 	ldw	r3,-52(fp)
200853b8:	e13fff07 	ldb	r4,-4(fp)
200853bc:	e0bffe17 	ldw	r2,-8(fp)
200853c0:	1085883a 	add	r2,r2,r2
200853c4:	1085883a 	add	r2,r2,r2
200853c8:	2084983a 	sll	r2,r4,r2
200853cc:	1884b03a 	or	r2,r3,r2
200853d0:	e0bff315 	stw	r2,-52(fp)

	data.dest = (char *) resp;
200853d4:	e0800217 	ldw	r2,8(fp)
200853d8:	e0bff815 	stw	r2,-32(fp)
	data.blocksize = 64;
200853dc:	00801004 	movi	r2,64
200853e0:	e0bffb15 	stw	r2,-20(fp)
	data.blocks = 1;
200853e4:	00800044 	movi	r2,1
200853e8:	e0bffa15 	stw	r2,-24(fp)
	data.flags = MMC_DATA_READ;
200853ec:	00800044 	movi	r2,1
200853f0:	e0bff915 	stw	r2,-28(fp)

	bool ret = mmc_send_cmd(mmc, &cmd, &data);
200853f4:	e0fff104 	addi	r3,fp,-60
200853f8:	e0bff804 	addi	r2,fp,-32
200853fc:	e13ffc17 	ldw	r4,-16(fp)
20085400:	180b883a 	mov	r5,r3
20085404:	100d883a 	mov	r6,r2
20085408:	0084cbc0 	call	20084cbc <mmc_send_cmd>
2008540c:	e0bfeb15 	stw	r2,-84(fp)

	int i;
	uint* s = resp;
20085410:	e0800217 	ldw	r2,8(fp)
20085414:	e0bfec15 	stw	r2,-80(fp)
	for(i = 0; (i < 16); i++){
20085418:	e03fea15 	stw	zero,-88(fp)
2008541c:	00003706 	br	200854fc <sd_switch+0x1bc>
		uint b0, b1, b2, b3;
		b0 = (s[i] & 0x000000ff) << 24;
20085420:	e0bfea17 	ldw	r2,-88(fp)
20085424:	1085883a 	add	r2,r2,r2
20085428:	1085883a 	add	r2,r2,r2
2008542c:	1007883a 	mov	r3,r2
20085430:	e0bfec17 	ldw	r2,-80(fp)
20085434:	10c5883a 	add	r2,r2,r3
20085438:	10800017 	ldw	r2,0(r2)
2008543c:	1004963a 	slli	r2,r2,24
20085440:	e0bfed15 	stw	r2,-76(fp)
		b1 = (s[i] & 0x0000ff00) << 8;
20085444:	e0bfea17 	ldw	r2,-88(fp)
20085448:	1085883a 	add	r2,r2,r2
2008544c:	1085883a 	add	r2,r2,r2
20085450:	1007883a 	mov	r3,r2
20085454:	e0bfec17 	ldw	r2,-80(fp)
20085458:	10c5883a 	add	r2,r2,r3
2008545c:	10800017 	ldw	r2,0(r2)
20085460:	10bfc00c 	andi	r2,r2,65280
20085464:	1004923a 	slli	r2,r2,8
20085468:	e0bfee15 	stw	r2,-72(fp)
		b2 = (s[i] & 0x00ff0000) >> 8;
2008546c:	e0bfea17 	ldw	r2,-88(fp)
20085470:	1085883a 	add	r2,r2,r2
20085474:	1085883a 	add	r2,r2,r2
20085478:	1007883a 	mov	r3,r2
2008547c:	e0bfec17 	ldw	r2,-80(fp)
20085480:	10c5883a 	add	r2,r2,r3
20085484:	10800017 	ldw	r2,0(r2)
20085488:	10803fec 	andhi	r2,r2,255
2008548c:	1004d23a 	srli	r2,r2,8
20085490:	e0bfef15 	stw	r2,-68(fp)
		b3 = (s[i] & 0xff000000) >> 24;
20085494:	e0bfea17 	ldw	r2,-88(fp)
20085498:	1085883a 	add	r2,r2,r2
2008549c:	1085883a 	add	r2,r2,r2
200854a0:	1007883a 	mov	r3,r2
200854a4:	e0bfec17 	ldw	r2,-80(fp)
200854a8:	10c5883a 	add	r2,r2,r3
200854ac:	10800017 	ldw	r2,0(r2)
200854b0:	1004d63a 	srli	r2,r2,24
200854b4:	e0bff015 	stw	r2,-64(fp)
		s[i] = b0 | b1 | b2 | b3;
200854b8:	e0bfea17 	ldw	r2,-88(fp)
200854bc:	1085883a 	add	r2,r2,r2
200854c0:	1085883a 	add	r2,r2,r2
200854c4:	1007883a 	mov	r3,r2
200854c8:	e0bfec17 	ldw	r2,-80(fp)
200854cc:	10c5883a 	add	r2,r2,r3
200854d0:	e13fed17 	ldw	r4,-76(fp)
200854d4:	e0ffee17 	ldw	r3,-72(fp)
200854d8:	20c8b03a 	or	r4,r4,r3
200854dc:	e0ffef17 	ldw	r3,-68(fp)
200854e0:	20c8b03a 	or	r4,r4,r3
200854e4:	e0fff017 	ldw	r3,-64(fp)
200854e8:	20c6b03a 	or	r3,r4,r3
200854ec:	10c00015 	stw	r3,0(r2)

	bool ret = mmc_send_cmd(mmc, &cmd, &data);

	int i;
	uint* s = resp;
	for(i = 0; (i < 16); i++){
200854f0:	e0bfea17 	ldw	r2,-88(fp)
200854f4:	10800044 	addi	r2,r2,1
200854f8:	e0bfea15 	stw	r2,-88(fp)
200854fc:	e0bfea17 	ldw	r2,-88(fp)
20085500:	10800410 	cmplti	r2,r2,16
20085504:	103fc61e 	bne	r2,zero,20085420 <__flash_rwdata_start+0xfffe684c>
		b1 = (s[i] & 0x0000ff00) << 8;
		b2 = (s[i] & 0x00ff0000) >> 8;
		b3 = (s[i] & 0xff000000) >> 24;
		s[i] = b0 | b1 | b2 | b3;
	}
	return ret;
20085508:	e0bfeb17 	ldw	r2,-84(fp)
}
2008550c:	e037883a 	mov	sp,fp
20085510:	dfc00117 	ldw	ra,4(sp)
20085514:	df000017 	ldw	fp,0(sp)
20085518:	dec00204 	addi	sp,sp,8
2008551c:	f800283a 	ret

20085520 <sd_change_freq>:

static int sd_change_freq(struct mmc *mmc) {
20085520:	deffeb04 	addi	sp,sp,-84
20085524:	dfc01415 	stw	ra,80(sp)
20085528:	df001315 	stw	fp,76(sp)
2008552c:	df001304 	addi	fp,sp,76
20085530:	e13fff15 	stw	r4,-4(fp)
	static uint switch_status[16];
	struct mmc_data data;
	int timeout;

	//uint* scr = alt_uncached_malloc(8);
	mmc->card_caps = 0;
20085534:	e0bfff17 	ldw	r2,-4(fp)
20085538:	10001115 	stw	zero,68(r2)

	/* Read the SCR to find out if this card supports higher speeds */
	cmd.cmdidx = MMC_CMD_APP_CMD;
2008553c:	00800dc4 	movi	r2,55
20085540:	e0bff40d 	sth	r2,-48(fp)
	cmd.resp_type = MMC_RSP_R1;
20085544:	00800544 	movi	r2,21
20085548:	e0bff515 	stw	r2,-44(fp)
	cmd.cmdarg = mmc->rca << 16;
2008554c:	e0bfff17 	ldw	r2,-4(fp)
20085550:	10801e0b 	ldhu	r2,120(r2)
20085554:	10bfffcc 	andi	r2,r2,65535
20085558:	1004943a 	slli	r2,r2,16
2008555c:	e0bff615 	stw	r2,-40(fp)

	err = mmc_send_cmd(mmc, &cmd, NULL);
20085560:	e0bff404 	addi	r2,fp,-48
20085564:	e13fff17 	ldw	r4,-4(fp)
20085568:	100b883a 	mov	r5,r2
2008556c:	000d883a 	mov	r6,zero
20085570:	0084cbc0 	call	20084cbc <mmc_send_cmd>
20085574:	e0bfef15 	stw	r2,-68(fp)

	if (err)
20085578:	e0bfef17 	ldw	r2,-68(fp)
2008557c:	10000226 	beq	r2,zero,20085588 <sd_change_freq+0x68>
		return err;
20085580:	e0bfef17 	ldw	r2,-68(fp)
20085584:	0000c306 	br	20085894 <sd_change_freq+0x374>

	cmd.cmdidx = SD_CMD_APP_SEND_SCR;
20085588:	00800cc4 	movi	r2,51
2008558c:	e0bff40d 	sth	r2,-48(fp)
	cmd.resp_type = MMC_RSP_R1;
20085590:	00800544 	movi	r2,21
20085594:	e0bff515 	stw	r2,-44(fp)
	cmd.cmdarg = 0;
20085598:	e03ff615 	stw	zero,-40(fp)

	timeout = 3;
2008559c:	008000c4 	movi	r2,3
200855a0:	e0bfee15 	stw	r2,-72(fp)

	retry_scr: data.dest = (char *) scr;
200855a4:	d0a01c04 	addi	r2,gp,-32656
200855a8:	e0bffb15 	stw	r2,-20(fp)
	data.blocksize = 8;
200855ac:	00800204 	movi	r2,8
200855b0:	e0bffe15 	stw	r2,-8(fp)
	data.blocks = 1;
200855b4:	00800044 	movi	r2,1
200855b8:	e0bffd15 	stw	r2,-12(fp)
	data.flags = MMC_DATA_READ;
200855bc:	00800044 	movi	r2,1
200855c0:	e0bffc15 	stw	r2,-16(fp)

	err = mmc_send_cmd(mmc, &cmd, &data);
200855c4:	e0fff404 	addi	r3,fp,-48
200855c8:	e0bffb04 	addi	r2,fp,-20
200855cc:	e13fff17 	ldw	r4,-4(fp)
200855d0:	180b883a 	mov	r5,r3
200855d4:	100d883a 	mov	r6,r2
200855d8:	0084cbc0 	call	20084cbc <mmc_send_cmd>
200855dc:	e0bfef15 	stw	r2,-68(fp)

	if (err) {
200855e0:	e0bfef17 	ldw	r2,-68(fp)
200855e4:	10000726 	beq	r2,zero,20085604 <sd_change_freq+0xe4>
		if (timeout--)
200855e8:	e0bfee17 	ldw	r2,-72(fp)
200855ec:	10ffffc4 	addi	r3,r2,-1
200855f0:	e0ffee15 	stw	r3,-72(fp)
200855f4:	10000126 	beq	r2,zero,200855fc <sd_change_freq+0xdc>
			goto retry_scr;
200855f8:	003fea06 	br	200855a4 <__flash_rwdata_start+0xfffe69d0>

		return err;
200855fc:	e0bfef17 	ldw	r2,-68(fp)
20085600:	0000a406 	br	20085894 <sd_change_freq+0x374>
	}

	uint b0, b1, b2, b3;

	b0 = (scr[0] & 0x000000ff) << 24;
20085604:	d0a01c17 	ldw	r2,-32656(gp)
20085608:	1004963a 	slli	r2,r2,24
2008560c:	e0bff015 	stw	r2,-64(fp)
	b1 = (scr[0] & 0x0000ff00) << 8;
20085610:	d0a01c17 	ldw	r2,-32656(gp)
20085614:	10bfc00c 	andi	r2,r2,65280
20085618:	1004923a 	slli	r2,r2,8
2008561c:	e0bff115 	stw	r2,-60(fp)
	b2 = (scr[0] & 0x00ff0000) >> 8;
20085620:	d0a01c17 	ldw	r2,-32656(gp)
20085624:	10803fec 	andhi	r2,r2,255
20085628:	1004d23a 	srli	r2,r2,8
2008562c:	e0bff215 	stw	r2,-56(fp)
	b3 = (scr[0] & 0xff000000) >> 24;
20085630:	d0a01c17 	ldw	r2,-32656(gp)
20085634:	1004d63a 	srli	r2,r2,24
20085638:	e0bff315 	stw	r2,-52(fp)

	mmc->scr[0] = b0 | b1 | b2 | b3;
2008563c:	e0fff017 	ldw	r3,-64(fp)
20085640:	e0bff117 	ldw	r2,-60(fp)
20085644:	1886b03a 	or	r3,r3,r2
20085648:	e0bff217 	ldw	r2,-56(fp)
2008564c:	1886b03a 	or	r3,r3,r2
20085650:	e0bff317 	ldw	r2,-52(fp)
20085654:	1886b03a 	or	r3,r3,r2
20085658:	e0bfff17 	ldw	r2,-4(fp)
2008565c:	10c01415 	stw	r3,80(r2)

	b0 = (scr[1] & 0x000000ff) << 24;
20085660:	d0a01d04 	addi	r2,gp,-32652
20085664:	10800017 	ldw	r2,0(r2)
20085668:	1004963a 	slli	r2,r2,24
2008566c:	e0bff015 	stw	r2,-64(fp)
	b1 = (scr[1] & 0x0000ff00) << 8;
20085670:	d0a01d04 	addi	r2,gp,-32652
20085674:	10800017 	ldw	r2,0(r2)
20085678:	10bfc00c 	andi	r2,r2,65280
2008567c:	1004923a 	slli	r2,r2,8
20085680:	e0bff115 	stw	r2,-60(fp)
	b2 = (scr[1] & 0x00ff0000) >> 8;
20085684:	d0a01d04 	addi	r2,gp,-32652
20085688:	10800017 	ldw	r2,0(r2)
2008568c:	10803fec 	andhi	r2,r2,255
20085690:	1004d23a 	srli	r2,r2,8
20085694:	e0bff215 	stw	r2,-56(fp)
	b3 = (scr[1] & 0xff000000) >> 24;
20085698:	d0a01d04 	addi	r2,gp,-32652
2008569c:	10800017 	ldw	r2,0(r2)
200856a0:	1004d63a 	srli	r2,r2,24
200856a4:	e0bff315 	stw	r2,-52(fp)

	mmc->scr[1] = b0 | b1 | b2 | b3;
200856a8:	e0fff017 	ldw	r3,-64(fp)
200856ac:	e0bff117 	ldw	r2,-60(fp)
200856b0:	1886b03a 	or	r3,r3,r2
200856b4:	e0bff217 	ldw	r2,-56(fp)
200856b8:	1886b03a 	or	r3,r3,r2
200856bc:	e0bff317 	ldw	r2,-52(fp)
200856c0:	1886b03a 	or	r3,r3,r2
200856c4:	e0bfff17 	ldw	r2,-4(fp)
200856c8:	10c01515 	stw	r3,84(r2)

	MMC_PRINT(("SCR: %08x\n\r", mmc->scr[0]));
	MMC_PRINT(("     %08x\n\r", mmc->scr[1]));

	switch ((mmc->scr[0] >> 24) & 0xf) {
200856cc:	e0bfff17 	ldw	r2,-4(fp)
200856d0:	10801417 	ldw	r2,80(r2)
200856d4:	1004d63a 	srli	r2,r2,24
200856d8:	108003cc 	andi	r2,r2,15
200856dc:	10c00060 	cmpeqi	r3,r2,1
200856e0:	1800091e 	bne	r3,zero,20085708 <sd_change_freq+0x1e8>
200856e4:	0080032e 	bgeu	zero,r2,200856f4 <sd_change_freq+0x1d4>
200856e8:	108000a0 	cmpeqi	r2,r2,2
200856ec:	10000b1e 	bne	r2,zero,2008571c <sd_change_freq+0x1fc>
200856f0:	00000f06 	br	20085730 <sd_change_freq+0x210>
	case 0:
		mmc->version = SD_VERSION_1_0;
200856f4:	e0ffff17 	ldw	r3,-4(fp)
200856f8:	008000b4 	movhi	r2,2
200856fc:	10800404 	addi	r2,r2,16
20085700:	18800a15 	stw	r2,40(r3)
		break;
20085704:	00000f06 	br	20085744 <sd_change_freq+0x224>
	case 1:
		mmc->version = SD_VERSION_1_10;
20085708:	e0ffff17 	ldw	r3,-4(fp)
2008570c:	008000b4 	movhi	r2,2
20085710:	10800684 	addi	r2,r2,26
20085714:	18800a15 	stw	r2,40(r3)
		break;
20085718:	00000a06 	br	20085744 <sd_change_freq+0x224>
	case 2:
		mmc->version = SD_VERSION_2;
2008571c:	e0ffff17 	ldw	r3,-4(fp)
20085720:	008000b4 	movhi	r2,2
20085724:	10800804 	addi	r2,r2,32
20085728:	18800a15 	stw	r2,40(r3)
		break;
2008572c:	00000506 	br	20085744 <sd_change_freq+0x224>
	default:
		mmc->version = SD_VERSION_1_0;
20085730:	e0ffff17 	ldw	r3,-4(fp)
20085734:	008000b4 	movhi	r2,2
20085738:	10800404 	addi	r2,r2,16
2008573c:	18800a15 	stw	r2,40(r3)
		break;
20085740:	0001883a 	nop
	}

	if (mmc->scr[0] & SD_DATA_4BIT)
20085744:	e0bfff17 	ldw	r2,-4(fp)
20085748:	10801417 	ldw	r2,80(r2)
2008574c:	1080012c 	andhi	r2,r2,4
20085750:	10000526 	beq	r2,zero,20085768 <sd_change_freq+0x248>
		mmc->card_caps |= MMC_MODE_4BIT;
20085754:	e0bfff17 	ldw	r2,-4(fp)
20085758:	10801117 	ldw	r2,68(r2)
2008575c:	10c04014 	ori	r3,r2,256
20085760:	e0bfff17 	ldw	r2,-4(fp)
20085764:	10c01115 	stw	r3,68(r2)

	/* Version 1.0 doesn't support switching */
	if (mmc->version == SD_VERSION_1_0)
20085768:	e0bfff17 	ldw	r2,-4(fp)
2008576c:	10c00a17 	ldw	r3,40(r2)
20085770:	008000b4 	movhi	r2,2
20085774:	10800404 	addi	r2,r2,16
20085778:	1880021e 	bne	r3,r2,20085784 <sd_change_freq+0x264>
		return 0;
2008577c:	0005883a 	mov	r2,zero
20085780:	00004406 	br	20085894 <sd_change_freq+0x374>

	timeout = 4;
20085784:	00800104 	movi	r2,4
20085788:	e0bfee15 	stw	r2,-72(fp)
	while (timeout--) {
2008578c:	00001306 	br	200857dc <sd_change_freq+0x2bc>
		err = sd_switch(mmc, SD_SWITCH_CHECK, 0, 1, (char *) switch_status);
20085790:	00800034 	movhi	r2,0
20085794:	108c0d04 	addi	r2,r2,12340
20085798:	d8800015 	stw	r2,0(sp)
2008579c:	e13fff17 	ldw	r4,-4(fp)
200857a0:	000b883a 	mov	r5,zero
200857a4:	000d883a 	mov	r6,zero
200857a8:	01c00044 	movi	r7,1
200857ac:	00853400 	call	20085340 <sd_switch>
200857b0:	e0bfef15 	stw	r2,-68(fp)

		if (err)
200857b4:	e0bfef17 	ldw	r2,-68(fp)
200857b8:	10000226 	beq	r2,zero,200857c4 <sd_change_freq+0x2a4>
			return err;
200857bc:	e0bfef17 	ldw	r2,-68(fp)
200857c0:	00003406 	br	20085894 <sd_change_freq+0x374>

		MMC_PRINT(("switch status 7 %08x\n\r", switch_status[7]));
		MMC_PRINT(("switch status 3 %08x\n\r", switch_status[3]));
		MMC_PRINT(("switch status 4 %08x\n\r", switch_status[4]));
		/* The high-speed function is busy.  Try again */
		if (!(switch_status[7] & SD_HIGHSPEED_BUSY))
200857c4:	00800034 	movhi	r2,0
200857c8:	108c0d04 	addi	r2,r2,12340
200857cc:	10800717 	ldw	r2,28(r2)
200857d0:	108000ac 	andhi	r2,r2,2
200857d4:	1000011e 	bne	r2,zero,200857dc <sd_change_freq+0x2bc>
			break;
200857d8:	00000406 	br	200857ec <sd_change_freq+0x2cc>
	/* Version 1.0 doesn't support switching */
	if (mmc->version == SD_VERSION_1_0)
		return 0;

	timeout = 4;
	while (timeout--) {
200857dc:	e0bfee17 	ldw	r2,-72(fp)
200857e0:	10ffffc4 	addi	r3,r2,-1
200857e4:	e0ffee15 	stw	r3,-72(fp)
200857e8:	103fe91e 	bne	r2,zero,20085790 <__flash_rwdata_start+0xfffe6bbc>
		if (!(switch_status[7] & SD_HIGHSPEED_BUSY))
			break;
	}

	/* If high-speed isn't supported, we return */
	if (!(switch_status[3] & SD_HIGHSPEED_SUPPORTED)){
200857ec:	00800034 	movhi	r2,0
200857f0:	108c0d04 	addi	r2,r2,12340
200857f4:	10800317 	ldw	r2,12(r2)
200857f8:	108000ac 	andhi	r2,r2,2
200857fc:	1000021e 	bne	r2,zero,20085808 <sd_change_freq+0x2e8>
		MMC_PRINT(("SD high speed not supported!\n"));
		return 0;
20085800:	0005883a 	mov	r2,zero
20085804:	00002306 	br	20085894 <sd_change_freq+0x374>
	 * If the host doesn't support SD_HIGHSPEED, do not switch card to
	 * HIGHSPEED mode even if the card support SD_HIGHSPPED.
	 * This can avoid furthur problem when the card runs in different
	 * mode between the host.
	 */
	if (!((mmc->host_caps & MMC_MODE_HS_52MHz) && (mmc->host_caps & MMC_MODE_HS)))
20085808:	e0bfff17 	ldw	r2,-4(fp)
2008580c:	10801217 	ldw	r2,72(r2)
20085810:	1080040c 	andi	r2,r2,16
20085814:	10000426 	beq	r2,zero,20085828 <sd_change_freq+0x308>
20085818:	e0bfff17 	ldw	r2,-4(fp)
2008581c:	10801217 	ldw	r2,72(r2)
20085820:	1080004c 	andi	r2,r2,1
20085824:	1000021e 	bne	r2,zero,20085830 <sd_change_freq+0x310>
		return 0;
20085828:	0005883a 	mov	r2,zero
2008582c:	00001906 	br	20085894 <sd_change_freq+0x374>

	err = sd_switch(mmc, SD_SWITCH_SWITCH, 0, 1, (char *) switch_status);
20085830:	00800034 	movhi	r2,0
20085834:	108c0d04 	addi	r2,r2,12340
20085838:	d8800015 	stw	r2,0(sp)
2008583c:	e13fff17 	ldw	r4,-4(fp)
20085840:	01400044 	movi	r5,1
20085844:	000d883a 	mov	r6,zero
20085848:	01c00044 	movi	r7,1
2008584c:	00853400 	call	20085340 <sd_switch>
20085850:	e0bfef15 	stw	r2,-68(fp)
	MMC_PRINT(("switch status 4 %08x\n\r", switch_status[4]));
	if (err)
20085854:	e0bfef17 	ldw	r2,-68(fp)
20085858:	10000226 	beq	r2,zero,20085864 <sd_change_freq+0x344>
		return err;
2008585c:	e0bfef17 	ldw	r2,-68(fp)
20085860:	00000c06 	br	20085894 <sd_change_freq+0x374>

	if ((switch_status[4] & 0x0f000000) == 0x01000000){
20085864:	00800034 	movhi	r2,0
20085868:	108c0d04 	addi	r2,r2,12340
2008586c:	10800417 	ldw	r2,16(r2)
20085870:	10c3c02c 	andhi	r3,r2,3840
20085874:	00804034 	movhi	r2,256
20085878:	1880051e 	bne	r3,r2,20085890 <sd_change_freq+0x370>
		MMC_PRINT(("High speed supported!\n"));
		mmc->card_caps |= MMC_MODE_HS;
2008587c:	e0bfff17 	ldw	r2,-4(fp)
20085880:	10801117 	ldw	r2,68(r2)
20085884:	10c00054 	ori	r3,r2,1
20085888:	e0bfff17 	ldw	r2,-4(fp)
2008588c:	10c01115 	stw	r3,68(r2)
	}

	return 0;
20085890:	0005883a 	mov	r2,zero
}
20085894:	e037883a 	mov	sp,fp
20085898:	dfc00117 	ldw	ra,4(sp)
2008589c:	df000017 	ldw	fp,0(sp)
200858a0:	dec00204 	addi	sp,sp,8
200858a4:	f800283a 	ret

200858a8 <mmc_change_freq>:

static int mmc_change_freq(struct mmc *mmc) {
200858a8:	deff7b04 	addi	sp,sp,-532
200858ac:	dfc08415 	stw	ra,528(sp)
200858b0:	df008315 	stw	fp,524(sp)
200858b4:	df008304 	addi	fp,sp,524
200858b8:	e13fff15 	stw	r4,-4(fp)
	char ext_csd[512];
	char cardtype;
	int err;

	mmc->card_caps = 0;
200858bc:	e0bfff17 	ldw	r2,-4(fp)
200858c0:	10001115 	stw	zero,68(r2)

	/* Only version 4 supports high-speed */
	if (mmc->version < MMC_VERSION_4)
200858c4:	e0bfff17 	ldw	r2,-4(fp)
200858c8:	10c00a17 	ldw	r3,40(r2)
200858cc:	00800074 	movhi	r2,1
200858d0:	10800fc4 	addi	r2,r2,63
200858d4:	10c00236 	bltu	r2,r3,200858e0 <mmc_change_freq+0x38>
		return 0;
200858d8:	0005883a 	mov	r2,zero
200858dc:	00003606 	br	200859b8 <mmc_change_freq+0x110>

	err = mmc_send_ext_csd(mmc, ext_csd);
200858e0:	e0bf7e44 	addi	r2,fp,-519
200858e4:	e13fff17 	ldw	r4,-4(fp)
200858e8:	100b883a 	mov	r5,r2
200858ec:	00852180 	call	20085218 <mmc_send_ext_csd>
200858f0:	e0bf7d15 	stw	r2,-524(fp)

	if (err)
200858f4:	e0bf7d17 	ldw	r2,-524(fp)
200858f8:	10000226 	beq	r2,zero,20085904 <mmc_change_freq+0x5c>
		return err;
200858fc:	e0bf7d17 	ldw	r2,-524(fp)
20085900:	00002d06 	br	200859b8 <mmc_change_freq+0x110>

	cardtype = ext_csd[EXT_CSD_CARD_TYPE] & 0xf;
20085904:	e0bfaf43 	ldbu	r2,-323(fp)
20085908:	108003cc 	andi	r2,r2,15
2008590c:	e0bf7e05 	stb	r2,-520(fp)

	err = mmc_switch(mmc, EXT_CSD_CMD_SET_NORMAL, EXT_CSD_HS_TIMING, 1);
20085910:	e13fff17 	ldw	r4,-4(fp)
20085914:	01400044 	movi	r5,1
20085918:	01bfee44 	movi	r6,-71
2008591c:	01c00044 	movi	r7,1
20085920:	00852980 	call	20085298 <mmc_switch>
20085924:	e0bf7d15 	stw	r2,-524(fp)

	if (err)
20085928:	e0bf7d17 	ldw	r2,-524(fp)
2008592c:	10000226 	beq	r2,zero,20085938 <mmc_change_freq+0x90>
		return err;
20085930:	e0bf7d17 	ldw	r2,-524(fp)
20085934:	00002006 	br	200859b8 <mmc_change_freq+0x110>

	/* Now check to see that it worked */
	err = mmc_send_ext_csd(mmc, ext_csd);
20085938:	e0bf7e44 	addi	r2,fp,-519
2008593c:	e13fff17 	ldw	r4,-4(fp)
20085940:	100b883a 	mov	r5,r2
20085944:	00852180 	call	20085218 <mmc_send_ext_csd>
20085948:	e0bf7d15 	stw	r2,-524(fp)

	if (err)
2008594c:	e0bf7d17 	ldw	r2,-524(fp)
20085950:	10000226 	beq	r2,zero,2008595c <mmc_change_freq+0xb4>
		return err;
20085954:	e0bf7d17 	ldw	r2,-524(fp)
20085958:	00001706 	br	200859b8 <mmc_change_freq+0x110>

	/* No high-speed support */
	if (!ext_csd[EXT_CSD_HS_TIMING])
2008595c:	e0bfac83 	ldbu	r2,-334(fp)
20085960:	10803fcc 	andi	r2,r2,255
20085964:	1080201c 	xori	r2,r2,128
20085968:	10bfe004 	addi	r2,r2,-128
2008596c:	1000021e 	bne	r2,zero,20085978 <mmc_change_freq+0xd0>
		return 0;
20085970:	0005883a 	mov	r2,zero
20085974:	00001006 	br	200859b8 <mmc_change_freq+0x110>

	/* High Speed is set, there are two types: 52MHz and 26MHz */
	if (cardtype & MMC_HS_52MHZ)
20085978:	e0bf7e03 	ldbu	r2,-520(fp)
2008597c:	10803fcc 	andi	r2,r2,255
20085980:	1080008c 	andi	r2,r2,2
20085984:	10000626 	beq	r2,zero,200859a0 <mmc_change_freq+0xf8>
		mmc->card_caps |= MMC_MODE_HS_52MHz | MMC_MODE_HS;
20085988:	e0bfff17 	ldw	r2,-4(fp)
2008598c:	10801117 	ldw	r2,68(r2)
20085990:	10c00454 	ori	r3,r2,17
20085994:	e0bfff17 	ldw	r2,-4(fp)
20085998:	10c01115 	stw	r3,68(r2)
2008599c:	00000506 	br	200859b4 <mmc_change_freq+0x10c>
	else
		mmc->card_caps |= MMC_MODE_HS;
200859a0:	e0bfff17 	ldw	r2,-4(fp)
200859a4:	10801117 	ldw	r2,68(r2)
200859a8:	10c00054 	ori	r3,r2,1
200859ac:	e0bfff17 	ldw	r2,-4(fp)
200859b0:	10c01115 	stw	r3,68(r2)

	return 0;
200859b4:	0005883a 	mov	r2,zero
}
200859b8:	e037883a 	mov	sp,fp
200859bc:	dfc00117 	ldw	ra,4(sp)
200859c0:	df000017 	ldw	fp,0(sp)
200859c4:	dec00204 	addi	sp,sp,8
200859c8:	f800283a 	ret

200859cc <mmc_startup>:

static int mmc_startup(struct mmc *mmc) {
200859cc:	defeeb04 	addi	sp,sp,-1108
200859d0:	dfc11415 	stw	ra,1104(sp)
200859d4:	df011315 	stw	fp,1100(sp)
200859d8:	df011304 	addi	fp,sp,1100
200859dc:	e13fff15 	stw	r4,-4(fp)
	uint mult, freq;
	uint cmult, csize, capacity;
	struct mmc_cmd cmd;
	char ext_csd[512];
	char test_csd[512];
	int timeout = 1000;
200859e0:	0080fa04 	movi	r2,1000
200859e4:	e0bef115 	stw	r2,-1084(fp)

	/* Put the Card in Identify Mode */
	cmd.cmdidx = MMC_CMD_ALL_SEND_CID; /* cmd not supported in spi */
200859e8:	00800084 	movi	r2,2
200859ec:	e0bef80d 	sth	r2,-1056(fp)
	cmd.resp_type = MMC_RSP_R2;
200859f0:	008001c4 	movi	r2,7
200859f4:	e0bef915 	stw	r2,-1052(fp)
	cmd.cmdarg = 0;
200859f8:	e03efa15 	stw	zero,-1048(fp)

	err = mmc_send_cmd(mmc, &cmd, NULL);
200859fc:	e0bef804 	addi	r2,fp,-1056
20085a00:	e13fff17 	ldw	r4,-4(fp)
20085a04:	100b883a 	mov	r5,r2
20085a08:	000d883a 	mov	r6,zero
20085a0c:	0084cbc0 	call	20084cbc <mmc_send_cmd>
20085a10:	e0beed15 	stw	r2,-1100(fp)

	if (err)
20085a14:	e0beed17 	ldw	r2,-1100(fp)
20085a18:	10000226 	beq	r2,zero,20085a24 <mmc_startup+0x58>
		return err;
20085a1c:	e0beed17 	ldw	r2,-1100(fp)
20085a20:	00023006 	br	200862e4 <mmc_startup+0x918>

	memcpy(mmc->cid, cmd.response, 16);
20085a24:	e0bfff17 	ldw	r2,-4(fp)
20085a28:	10c01a04 	addi	r3,r2,104
20085a2c:	e0bef804 	addi	r2,fp,-1056
20085a30:	10800304 	addi	r2,r2,12
20085a34:	1809883a 	mov	r4,r3
20085a38:	100b883a 	mov	r5,r2
20085a3c:	01800404 	movi	r6,16
20085a40:	008bd9c0 	call	2008bd9c <memcpy>
	/*
	 * For MMC cards, set the Relative Address.
	 * For SD cards, get the Relatvie Address.
	 * This also puts the cards into Standby State
	 */
	cmd.cmdidx = SD_CMD_SEND_RELATIVE_ADDR;
20085a44:	008000c4 	movi	r2,3
20085a48:	e0bef80d 	sth	r2,-1056(fp)
	cmd.cmdarg = mmc->rca << 16;
20085a4c:	e0bfff17 	ldw	r2,-4(fp)
20085a50:	10801e0b 	ldhu	r2,120(r2)
20085a54:	10bfffcc 	andi	r2,r2,65535
20085a58:	1004943a 	slli	r2,r2,16
20085a5c:	e0befa15 	stw	r2,-1048(fp)
	cmd.resp_type = MMC_RSP_R6;
20085a60:	00800544 	movi	r2,21
20085a64:	e0bef915 	stw	r2,-1052(fp)

	err = mmc_send_cmd(mmc, &cmd, NULL);
20085a68:	e0bef804 	addi	r2,fp,-1056
20085a6c:	e13fff17 	ldw	r4,-4(fp)
20085a70:	100b883a 	mov	r5,r2
20085a74:	000d883a 	mov	r6,zero
20085a78:	0084cbc0 	call	20084cbc <mmc_send_cmd>
20085a7c:	e0beed15 	stw	r2,-1100(fp)

	if (err)
20085a80:	e0beed17 	ldw	r2,-1100(fp)
20085a84:	10000226 	beq	r2,zero,20085a90 <mmc_startup+0xc4>
		return err;
20085a88:	e0beed17 	ldw	r2,-1100(fp)
20085a8c:	00021506 	br	200862e4 <mmc_startup+0x918>

	if (IS_SD(mmc))
20085a90:	e0bfff17 	ldw	r2,-4(fp)
20085a94:	10800a17 	ldw	r2,40(r2)
20085a98:	108000ac 	andhi	r2,r2,2
20085a9c:	10000526 	beq	r2,zero,20085ab4 <mmc_startup+0xe8>
		mmc->rca = (cmd.response[0] >> 16) & 0xffff;
20085aa0:	e0befb17 	ldw	r2,-1044(fp)
20085aa4:	1004d43a 	srli	r2,r2,16
20085aa8:	1007883a 	mov	r3,r2
20085aac:	e0bfff17 	ldw	r2,-4(fp)
20085ab0:	10c01e0d 	sth	r3,120(r2)

	/* Get the Card-Specific Data */
	cmd.cmdidx = MMC_CMD_SEND_CSD;
20085ab4:	00800244 	movi	r2,9
20085ab8:	e0bef80d 	sth	r2,-1056(fp)
	cmd.resp_type = MMC_RSP_R2;
20085abc:	008001c4 	movi	r2,7
20085ac0:	e0bef915 	stw	r2,-1052(fp)
	cmd.cmdarg = mmc->rca << 16;
20085ac4:	e0bfff17 	ldw	r2,-4(fp)
20085ac8:	10801e0b 	ldhu	r2,120(r2)
20085acc:	10bfffcc 	andi	r2,r2,65535
20085ad0:	1004943a 	slli	r2,r2,16
20085ad4:	e0befa15 	stw	r2,-1048(fp)

	err = mmc_send_cmd(mmc, &cmd, NULL);
20085ad8:	e0bef804 	addi	r2,fp,-1056
20085adc:	e13fff17 	ldw	r4,-4(fp)
20085ae0:	100b883a 	mov	r5,r2
20085ae4:	000d883a 	mov	r6,zero
20085ae8:	0084cbc0 	call	20084cbc <mmc_send_cmd>
20085aec:	e0beed15 	stw	r2,-1100(fp)

	/* Waiting for the ready status */
	mmc_send_status(mmc, timeout);
20085af0:	e13fff17 	ldw	r4,-4(fp)
20085af4:	e17ef117 	ldw	r5,-1084(fp)
20085af8:	00851000 	call	20085100 <mmc_send_status>

	if (err)
20085afc:	e0beed17 	ldw	r2,-1100(fp)
20085b00:	10000226 	beq	r2,zero,20085b0c <mmc_startup+0x140>
		return err;
20085b04:	e0beed17 	ldw	r2,-1100(fp)
20085b08:	0001f606 	br	200862e4 <mmc_startup+0x918>

	mmc->csd[0] = cmd.response[0];
20085b0c:	e0fefb17 	ldw	r3,-1044(fp)
20085b10:	e0bfff17 	ldw	r2,-4(fp)
20085b14:	10c01615 	stw	r3,88(r2)
	mmc->csd[1] = cmd.response[1];
20085b18:	e0fefc17 	ldw	r3,-1040(fp)
20085b1c:	e0bfff17 	ldw	r2,-4(fp)
20085b20:	10c01715 	stw	r3,92(r2)
	mmc->csd[2] = cmd.response[2];
20085b24:	e0fefd17 	ldw	r3,-1036(fp)
20085b28:	e0bfff17 	ldw	r2,-4(fp)
20085b2c:	10c01815 	stw	r3,96(r2)
	mmc->csd[3] = cmd.response[3];
20085b30:	e0fefe17 	ldw	r3,-1032(fp)
20085b34:	e0bfff17 	ldw	r2,-4(fp)
20085b38:	10c01915 	stw	r3,100(r2)

	if (mmc->version == MMC_VERSION_UNKNOWN) {
20085b3c:	e0bfff17 	ldw	r2,-4(fp)
20085b40:	10c00a17 	ldw	r3,40(r2)
20085b44:	00800074 	movhi	r2,1
20085b48:	1880311e 	bne	r3,r2,20085c10 <mmc_startup+0x244>
		int version = (cmd.response[0] >> 26) & 0xf;
20085b4c:	e0befb17 	ldw	r2,-1044(fp)
20085b50:	1004d6ba 	srli	r2,r2,26
20085b54:	108003cc 	andi	r2,r2,15
20085b58:	e0bef215 	stw	r2,-1080(fp)

		switch (version) {
20085b5c:	e0bef217 	ldw	r2,-1080(fp)
20085b60:	10800168 	cmpgeui	r2,r2,5
20085b64:	1000251e 	bne	r2,zero,20085bfc <mmc_startup+0x230>
20085b68:	e0bef217 	ldw	r2,-1080(fp)
20085b6c:	100690ba 	slli	r3,r2,2
20085b70:	00880234 	movhi	r2,8200
20085b74:	1096e104 	addi	r2,r2,23428
20085b78:	1885883a 	add	r2,r3,r2
20085b7c:	10800017 	ldw	r2,0(r2)
20085b80:	1000683a 	jmp	r2
20085b84:	20085b98 	cmpnei	zero,r4,8558
20085b88:	20085bac 	andhi	zero,r4,8558
20085b8c:	20085bc0 	call	220085bc <__flash_rwdata_start+0x1f699e8>
20085b90:	20085bd4 	ori	zero,r4,8559
20085b94:	20085be8 	cmpgeui	zero,r4,8559
		case 0:
			mmc->version = MMC_VERSION_1_2;
20085b98:	e0ffff17 	ldw	r3,-4(fp)
20085b9c:	00800074 	movhi	r2,1
20085ba0:	10800484 	addi	r2,r2,18
20085ba4:	18800a15 	stw	r2,40(r3)
			break;
20085ba8:	00001906 	br	20085c10 <mmc_startup+0x244>
		case 1:
			mmc->version = MMC_VERSION_1_4;
20085bac:	e0ffff17 	ldw	r3,-4(fp)
20085bb0:	00800074 	movhi	r2,1
20085bb4:	10800504 	addi	r2,r2,20
20085bb8:	18800a15 	stw	r2,40(r3)
			break;
20085bbc:	00001406 	br	20085c10 <mmc_startup+0x244>
		case 2:
			mmc->version = MMC_VERSION_2_2;
20085bc0:	e0ffff17 	ldw	r3,-4(fp)
20085bc4:	00800074 	movhi	r2,1
20085bc8:	10800884 	addi	r2,r2,34
20085bcc:	18800a15 	stw	r2,40(r3)
			break;
20085bd0:	00000f06 	br	20085c10 <mmc_startup+0x244>
		case 3:
			mmc->version = MMC_VERSION_3;
20085bd4:	e0ffff17 	ldw	r3,-4(fp)
20085bd8:	00800074 	movhi	r2,1
20085bdc:	10800c04 	addi	r2,r2,48
20085be0:	18800a15 	stw	r2,40(r3)
			break;
20085be4:	00000a06 	br	20085c10 <mmc_startup+0x244>
		case 4:
			mmc->version = MMC_VERSION_4;
20085be8:	e0ffff17 	ldw	r3,-4(fp)
20085bec:	00800074 	movhi	r2,1
20085bf0:	10801004 	addi	r2,r2,64
20085bf4:	18800a15 	stw	r2,40(r3)
			break;
20085bf8:	00000506 	br	20085c10 <mmc_startup+0x244>
		default:
			mmc->version = MMC_VERSION_1_2;
20085bfc:	e0ffff17 	ldw	r3,-4(fp)
20085c00:	00800074 	movhi	r2,1
20085c04:	10800484 	addi	r2,r2,18
20085c08:	18800a15 	stw	r2,40(r3)
			break;
20085c0c:	0001883a 	nop
		}
	}

	/* divide frequency by 10, since the mults are 10x bigger */
	freq = fbase[(cmd.response[0] & 0x7)];
20085c10:	e0befb17 	ldw	r2,-1044(fp)
20085c14:	10c001cc 	andi	r3,r2,7
20085c18:	00800034 	movhi	r2,0
20085c1c:	1080a704 	addi	r2,r2,668
20085c20:	18c7883a 	add	r3,r3,r3
20085c24:	18c7883a 	add	r3,r3,r3
20085c28:	10c5883a 	add	r2,r2,r3
20085c2c:	10800017 	ldw	r2,0(r2)
20085c30:	e0bef315 	stw	r2,-1076(fp)
	mult = multipliers[((cmd.response[0] >> 3) & 0xf)];
20085c34:	e0befb17 	ldw	r2,-1044(fp)
20085c38:	1004d0fa 	srli	r2,r2,3
20085c3c:	10c003cc 	andi	r3,r2,15
20085c40:	00800034 	movhi	r2,0
20085c44:	1080ab04 	addi	r2,r2,684
20085c48:	18c7883a 	add	r3,r3,r3
20085c4c:	18c7883a 	add	r3,r3,r3
20085c50:	10c5883a 	add	r2,r2,r3
20085c54:	10800017 	ldw	r2,0(r2)
20085c58:	e0bef415 	stw	r2,-1072(fp)

	mmc->tran_speed = freq * mult;
20085c5c:	e0fef317 	ldw	r3,-1076(fp)
20085c60:	e0bef417 	ldw	r2,-1072(fp)
20085c64:	1887383a 	mul	r3,r3,r2
20085c68:	e0bfff17 	ldw	r2,-4(fp)
20085c6c:	10c01f15 	stw	r3,124(r2)

	mmc->read_bl_len = 1 << ((cmd.response[1] >> 16) & 0xf);
20085c70:	e0befc17 	ldw	r2,-1040(fp)
20085c74:	1004d43a 	srli	r2,r2,16
20085c78:	108003cc 	andi	r2,r2,15
20085c7c:	00c00044 	movi	r3,1
20085c80:	1884983a 	sll	r2,r3,r2
20085c84:	1007883a 	mov	r3,r2
20085c88:	e0bfff17 	ldw	r2,-4(fp)
20085c8c:	10c02015 	stw	r3,128(r2)

	if (IS_SD(mmc))
20085c90:	e0bfff17 	ldw	r2,-4(fp)
20085c94:	10800a17 	ldw	r2,40(r2)
20085c98:	108000ac 	andhi	r2,r2,2
20085c9c:	10000526 	beq	r2,zero,20085cb4 <mmc_startup+0x2e8>
		mmc->write_bl_len = mmc->read_bl_len;
20085ca0:	e0bfff17 	ldw	r2,-4(fp)
20085ca4:	10c02017 	ldw	r3,128(r2)
20085ca8:	e0bfff17 	ldw	r2,-4(fp)
20085cac:	10c02115 	stw	r3,132(r2)
20085cb0:	00000806 	br	20085cd4 <mmc_startup+0x308>
	else
		mmc->write_bl_len = 1 << ((cmd.response[3] >> 22) & 0xf);
20085cb4:	e0befe17 	ldw	r2,-1032(fp)
20085cb8:	1004d5ba 	srli	r2,r2,22
20085cbc:	108003cc 	andi	r2,r2,15
20085cc0:	00c00044 	movi	r3,1
20085cc4:	1884983a 	sll	r2,r3,r2
20085cc8:	1007883a 	mov	r3,r2
20085ccc:	e0bfff17 	ldw	r2,-4(fp)
20085cd0:	10c02115 	stw	r3,132(r2)

	if (mmc->high_capacity) {
20085cd4:	e0bfff17 	ldw	r2,-4(fp)
20085cd8:	10800e17 	ldw	r2,56(r2)
20085cdc:	10000c26 	beq	r2,zero,20085d10 <mmc_startup+0x344>
		csize = (mmc->csd[1] & 0x3f) << 16 | (mmc->csd[2] & 0xffff0000) >> 16;
20085ce0:	e0bfff17 	ldw	r2,-4(fp)
20085ce4:	10801717 	ldw	r2,92(r2)
20085ce8:	10800fcc 	andi	r2,r2,63
20085cec:	1006943a 	slli	r3,r2,16
20085cf0:	e0bfff17 	ldw	r2,-4(fp)
20085cf4:	10801817 	ldw	r2,96(r2)
20085cf8:	1004d43a 	srli	r2,r2,16
20085cfc:	1884b03a 	or	r2,r3,r2
20085d00:	e0bef015 	stw	r2,-1088(fp)
		cmult = 8;
20085d04:	00800204 	movi	r2,8
20085d08:	e0beef15 	stw	r2,-1092(fp)
20085d0c:	00001206 	br	20085d58 <mmc_startup+0x38c>
	} else {
		csize = (mmc->csd[1] & 0x3ff) << 2 | (mmc->csd[2] & 0xc0000000) >> 30;
20085d10:	e0bfff17 	ldw	r2,-4(fp)
20085d14:	10801717 	ldw	r2,92(r2)
20085d18:	1080ffcc 	andi	r2,r2,1023
20085d1c:	1085883a 	add	r2,r2,r2
20085d20:	1085883a 	add	r2,r2,r2
20085d24:	1007883a 	mov	r3,r2
20085d28:	e0bfff17 	ldw	r2,-4(fp)
20085d2c:	10801817 	ldw	r2,96(r2)
20085d30:	1004d7ba 	srli	r2,r2,30
20085d34:	1884b03a 	or	r2,r3,r2
20085d38:	e0bef015 	stw	r2,-1088(fp)
		cmult = (mmc->csd[2] & 0x00038000) >> 15;
20085d3c:	e0bfff17 	ldw	r2,-4(fp)
20085d40:	10c01817 	ldw	r3,96(r2)
20085d44:	00800134 	movhi	r2,4
20085d48:	10a00004 	addi	r2,r2,-32768
20085d4c:	1884703a 	and	r2,r3,r2
20085d50:	1004d3fa 	srli	r2,r2,15
20085d54:	e0beef15 	stw	r2,-1092(fp)
	}

	mmc->capacity = (csize + 1) << (cmult + 2);
20085d58:	e0bef017 	ldw	r2,-1088(fp)
20085d5c:	10800044 	addi	r2,r2,1
20085d60:	e0feef17 	ldw	r3,-1092(fp)
20085d64:	18c00084 	addi	r3,r3,2
20085d68:	10c6983a 	sll	r3,r2,r3
20085d6c:	e0bfff17 	ldw	r2,-4(fp)
20085d70:	10c02315 	stw	r3,140(r2)
	mmc->capacity *= mmc->read_bl_len;
20085d74:	e0bfff17 	ldw	r2,-4(fp)
20085d78:	10c02317 	ldw	r3,140(r2)
20085d7c:	e0bfff17 	ldw	r2,-4(fp)
20085d80:	10802017 	ldw	r2,128(r2)
20085d84:	1887383a 	mul	r3,r3,r2
20085d88:	e0bfff17 	ldw	r2,-4(fp)
20085d8c:	10c02315 	stw	r3,140(r2)

	if (mmc->read_bl_len > 512)
20085d90:	e0bfff17 	ldw	r2,-4(fp)
20085d94:	10802017 	ldw	r2,128(r2)
20085d98:	10808070 	cmpltui	r2,r2,513
20085d9c:	1000031e 	bne	r2,zero,20085dac <mmc_startup+0x3e0>
		mmc->read_bl_len = 512;
20085da0:	e0bfff17 	ldw	r2,-4(fp)
20085da4:	00c08004 	movi	r3,512
20085da8:	10c02015 	stw	r3,128(r2)

	if (mmc->write_bl_len > 512)
20085dac:	e0bfff17 	ldw	r2,-4(fp)
20085db0:	10802117 	ldw	r2,132(r2)
20085db4:	10808070 	cmpltui	r2,r2,513
20085db8:	1000031e 	bne	r2,zero,20085dc8 <mmc_startup+0x3fc>
		mmc->write_bl_len = 512;
20085dbc:	e0bfff17 	ldw	r2,-4(fp)
20085dc0:	00c08004 	movi	r3,512
20085dc4:	10c02115 	stw	r3,132(r2)

	/* Select the card, and put it into Transfer Mode */
	cmd.cmdidx = MMC_CMD_SELECT_CARD;
20085dc8:	008001c4 	movi	r2,7
20085dcc:	e0bef80d 	sth	r2,-1056(fp)
	cmd.resp_type = MMC_RSP_R1;
20085dd0:	00800544 	movi	r2,21
20085dd4:	e0bef915 	stw	r2,-1052(fp)
	cmd.cmdarg = mmc->rca << 16;
20085dd8:	e0bfff17 	ldw	r2,-4(fp)
20085ddc:	10801e0b 	ldhu	r2,120(r2)
20085de0:	10bfffcc 	andi	r2,r2,65535
20085de4:	1004943a 	slli	r2,r2,16
20085de8:	e0befa15 	stw	r2,-1048(fp)
	err = mmc_send_cmd(mmc, &cmd, NULL);
20085dec:	e0bef804 	addi	r2,fp,-1056
20085df0:	e13fff17 	ldw	r4,-4(fp)
20085df4:	100b883a 	mov	r5,r2
20085df8:	000d883a 	mov	r6,zero
20085dfc:	0084cbc0 	call	20084cbc <mmc_send_cmd>
20085e00:	e0beed15 	stw	r2,-1100(fp)

	if (err)
20085e04:	e0beed17 	ldw	r2,-1100(fp)
20085e08:	10000226 	beq	r2,zero,20085e14 <mmc_startup+0x448>
		return err;
20085e0c:	e0beed17 	ldw	r2,-1100(fp)
20085e10:	00013406 	br	200862e4 <mmc_startup+0x918>

	/*
	 * For SD, its erase group is always one sector
	 */
	mmc->erase_grp_size = 1;
20085e14:	e0bfff17 	ldw	r2,-4(fp)
20085e18:	00c00044 	movi	r3,1
20085e1c:	10c02215 	stw	r3,136(r2)
	mmc->part_config = MMCPART_NOAVAILABLE;
20085e20:	e0bfff17 	ldw	r2,-4(fp)
20085e24:	00ffffc4 	movi	r3,-1
20085e28:	10c01e85 	stb	r3,122(r2)
	if (!IS_SD(mmc) && (mmc->version >= MMC_VERSION_4)) {
20085e2c:	e0bfff17 	ldw	r2,-4(fp)
20085e30:	10800a17 	ldw	r2,40(r2)
20085e34:	108000ac 	andhi	r2,r2,2
20085e38:	1000621e 	bne	r2,zero,20085fc4 <mmc_startup+0x5f8>
20085e3c:	e0bfff17 	ldw	r2,-4(fp)
20085e40:	10c00a17 	ldw	r3,40(r2)
20085e44:	00800074 	movhi	r2,1
20085e48:	10800fc4 	addi	r2,r2,63
20085e4c:	10c05d2e 	bgeu	r2,r3,20085fc4 <mmc_startup+0x5f8>
		/* check  ext_csd version and capacity */
		err = mmc_send_ext_csd(mmc, ext_csd);
20085e50:	e0beff04 	addi	r2,fp,-1028
20085e54:	e13fff17 	ldw	r4,-4(fp)
20085e58:	100b883a 	mov	r5,r2
20085e5c:	00852180 	call	20085218 <mmc_send_ext_csd>
20085e60:	e0beed15 	stw	r2,-1100(fp)
		if (!err & (ext_csd[EXT_CSD_REV] >= 2)) {
20085e64:	e0beed17 	ldw	r2,-1100(fp)
20085e68:	1005003a 	cmpeq	r2,r2,zero
20085e6c:	1007883a 	mov	r3,r2
20085e70:	e0bf2f03 	ldbu	r2,-836(fp)
20085e74:	10803fcc 	andi	r2,r2,255
20085e78:	1080201c 	xori	r2,r2,128
20085e7c:	10bfe004 	addi	r2,r2,-128
20085e80:	10800088 	cmpgei	r2,r2,2
20085e84:	1884703a 	and	r2,r3,r2
20085e88:	10803fcc 	andi	r2,r2,255
20085e8c:	10002126 	beq	r2,zero,20085f14 <mmc_startup+0x548>
			/*
			 * According to the JEDEC Standard, the value of
			 * ext_csd's capacity is valid if the value is more
			 * than 2GB
			 */
			capacity = ext_csd[EXT_CSD_SEC_CNT] << 0
20085e90:	e0bf3403 	ldbu	r2,-816(fp)
20085e94:	10c03fcc 	andi	r3,r2,255
20085e98:	18c0201c 	xori	r3,r3,128
20085e9c:	18ffe004 	addi	r3,r3,-128
					| ext_csd[EXT_CSD_SEC_CNT + 1] << 8
20085ea0:	e0bf3443 	ldbu	r2,-815(fp)
20085ea4:	10803fcc 	andi	r2,r2,255
20085ea8:	1080201c 	xori	r2,r2,128
20085eac:	10bfe004 	addi	r2,r2,-128
20085eb0:	1004923a 	slli	r2,r2,8
20085eb4:	1886b03a 	or	r3,r3,r2
					| ext_csd[EXT_CSD_SEC_CNT + 2] << 16
20085eb8:	e0bf3483 	ldbu	r2,-814(fp)
20085ebc:	10803fcc 	andi	r2,r2,255
20085ec0:	1080201c 	xori	r2,r2,128
20085ec4:	10bfe004 	addi	r2,r2,-128
20085ec8:	1004943a 	slli	r2,r2,16
20085ecc:	1886b03a 	or	r3,r3,r2
					| ext_csd[EXT_CSD_SEC_CNT + 3] << 24;
20085ed0:	e0bf34c3 	ldbu	r2,-813(fp)
20085ed4:	10803fcc 	andi	r2,r2,255
20085ed8:	1080201c 	xori	r2,r2,128
20085edc:	10bfe004 	addi	r2,r2,-128
20085ee0:	1004963a 	slli	r2,r2,24
20085ee4:	1884b03a 	or	r2,r3,r2
			/*
			 * According to the JEDEC Standard, the value of
			 * ext_csd's capacity is valid if the value is more
			 * than 2GB
			 */
			capacity = ext_csd[EXT_CSD_SEC_CNT] << 0
20085ee8:	e0bef515 	stw	r2,-1068(fp)
					| ext_csd[EXT_CSD_SEC_CNT + 1] << 8
					| ext_csd[EXT_CSD_SEC_CNT + 2] << 16
					| ext_csd[EXT_CSD_SEC_CNT + 3] << 24;
			capacity *= 512;
20085eec:	e0bef517 	ldw	r2,-1068(fp)
20085ef0:	1004927a 	slli	r2,r2,9
20085ef4:	e0bef515 	stw	r2,-1068(fp)
			if ((capacity >> 20) > 2 * 1024)
20085ef8:	e0bef517 	ldw	r2,-1068(fp)
20085efc:	1004d53a 	srli	r2,r2,20
20085f00:	10820070 	cmpltui	r2,r2,2049
20085f04:	1000031e 	bne	r2,zero,20085f14 <mmc_startup+0x548>
				mmc->capacity = capacity;
20085f08:	e0bfff17 	ldw	r2,-4(fp)
20085f0c:	e0fef517 	ldw	r3,-1068(fp)
20085f10:	10c02315 	stw	r3,140(r2)
		/*
		 * Check whether GROUP_DEF is set, if yes, read out
		 * group size from ext_csd directly, or calculate
		 * the group size from the csd value.
		 */
		if (ext_csd[EXT_CSD_ERASE_GROUP_DEF])
20085f14:	e0bf2ac3 	ldbu	r2,-853(fp)
20085f18:	10803fcc 	andi	r2,r2,255
20085f1c:	1080201c 	xori	r2,r2,128
20085f20:	10bfe004 	addi	r2,r2,-128
20085f24:	10000926 	beq	r2,zero,20085f4c <mmc_startup+0x580>
			mmc->erase_grp_size = ext_csd[EXT_CSD_HC_ERASE_GRP_SIZE] * 512
20085f28:	e0bf3703 	ldbu	r2,-804(fp)
					* 1024;
20085f2c:	10803fcc 	andi	r2,r2,255
20085f30:	1080201c 	xori	r2,r2,128
20085f34:	10bfe004 	addi	r2,r2,-128
20085f38:	100494fa 	slli	r2,r2,19
		 * Check whether GROUP_DEF is set, if yes, read out
		 * group size from ext_csd directly, or calculate
		 * the group size from the csd value.
		 */
		if (ext_csd[EXT_CSD_ERASE_GROUP_DEF])
			mmc->erase_grp_size = ext_csd[EXT_CSD_HC_ERASE_GRP_SIZE] * 512
20085f3c:	1007883a 	mov	r3,r2
20085f40:	e0bfff17 	ldw	r2,-4(fp)
20085f44:	10c02215 	stw	r3,136(r2)
20085f48:	00001206 	br	20085f94 <mmc_startup+0x5c8>
					* 1024;
		else {
			int erase_gsz, erase_gmul;
			erase_gsz = (mmc->csd[2] & 0x00007c00) >> 10;
20085f4c:	e0bfff17 	ldw	r2,-4(fp)
20085f50:	10801817 	ldw	r2,96(r2)
20085f54:	109f000c 	andi	r2,r2,31744
20085f58:	1004d2ba 	srli	r2,r2,10
20085f5c:	e0bef615 	stw	r2,-1064(fp)
			erase_gmul = (mmc->csd[2] & 0x000003e0) >> 5;
20085f60:	e0bfff17 	ldw	r2,-4(fp)
20085f64:	10801817 	ldw	r2,96(r2)
20085f68:	1080f80c 	andi	r2,r2,992
20085f6c:	1004d17a 	srli	r2,r2,5
20085f70:	e0bef715 	stw	r2,-1060(fp)
			mmc->erase_grp_size = (erase_gsz + 1) * (erase_gmul + 1);
20085f74:	e0bef617 	ldw	r2,-1064(fp)
20085f78:	10c00044 	addi	r3,r2,1
20085f7c:	e0bef717 	ldw	r2,-1060(fp)
20085f80:	10800044 	addi	r2,r2,1
20085f84:	1885383a 	mul	r2,r3,r2
20085f88:	1007883a 	mov	r3,r2
20085f8c:	e0bfff17 	ldw	r2,-4(fp)
20085f90:	10c02215 	stw	r3,136(r2)
		}

		/* store the partition info of emmc */
		if ((ext_csd[EXT_CSD_PARTITIONING_SUPPORT] & PART_SUPPORT)
20085f94:	e0bf2703 	ldbu	r2,-868(fp)
20085f98:	10803fcc 	andi	r2,r2,255
20085f9c:	1080004c 	andi	r2,r2,1
20085fa0:	1000051e 	bne	r2,zero,20085fb8 <mmc_startup+0x5ec>
				|| ext_csd[EXT_CSD_BOOT_MULT])
20085fa4:	e0bf3783 	ldbu	r2,-802(fp)
20085fa8:	10803fcc 	andi	r2,r2,255
20085fac:	1080201c 	xori	r2,r2,128
20085fb0:	10bfe004 	addi	r2,r2,-128
20085fb4:	10000326 	beq	r2,zero,20085fc4 <mmc_startup+0x5f8>
			mmc->part_config = ext_csd[EXT_CSD_PART_CONF];
20085fb8:	e0ff2bc3 	ldbu	r3,-849(fp)
20085fbc:	e0bfff17 	ldw	r2,-4(fp)
20085fc0:	10c01e85 	stb	r3,122(r2)
	}

	if (IS_SD(mmc))
20085fc4:	e0bfff17 	ldw	r2,-4(fp)
20085fc8:	10800a17 	ldw	r2,40(r2)
20085fcc:	108000ac 	andhi	r2,r2,2
20085fd0:	10000426 	beq	r2,zero,20085fe4 <mmc_startup+0x618>
		err = sd_change_freq(mmc);
20085fd4:	e13fff17 	ldw	r4,-4(fp)
20085fd8:	00855200 	call	20085520 <sd_change_freq>
20085fdc:	e0beed15 	stw	r2,-1100(fp)
20085fe0:	00000306 	br	20085ff0 <mmc_startup+0x624>
	else
		err = mmc_change_freq(mmc);
20085fe4:	e13fff17 	ldw	r4,-4(fp)
20085fe8:	00858a80 	call	200858a8 <mmc_change_freq>
20085fec:	e0beed15 	stw	r2,-1100(fp)

	if (err)
20085ff0:	e0beed17 	ldw	r2,-1100(fp)
20085ff4:	10000226 	beq	r2,zero,20086000 <mmc_startup+0x634>
		return err;
20085ff8:	e0beed17 	ldw	r2,-1100(fp)
20085ffc:	0000b906 	br	200862e4 <mmc_startup+0x918>

	/* Restrict card's capabilities by what the host can do */
	mmc->card_caps &= mmc->host_caps;
20086000:	e0bfff17 	ldw	r2,-4(fp)
20086004:	10c01117 	ldw	r3,68(r2)
20086008:	e0bfff17 	ldw	r2,-4(fp)
2008600c:	10801217 	ldw	r2,72(r2)
20086010:	1886703a 	and	r3,r3,r2
20086014:	e0bfff17 	ldw	r2,-4(fp)
20086018:	10c01115 	stw	r3,68(r2)

	if (IS_SD(mmc)) {
2008601c:	e0bfff17 	ldw	r2,-4(fp)
20086020:	10800a17 	ldw	r2,40(r2)
20086024:	108000ac 	andhi	r2,r2,2
20086028:	10003826 	beq	r2,zero,2008610c <mmc_startup+0x740>
		if (mmc->card_caps & MMC_MODE_4BIT) {
2008602c:	e0bfff17 	ldw	r2,-4(fp)
20086030:	10801117 	ldw	r2,68(r2)
20086034:	1080400c 	andi	r2,r2,256
20086038:	10002626 	beq	r2,zero,200860d4 <mmc_startup+0x708>
			cmd.cmdidx = MMC_CMD_APP_CMD;
2008603c:	00800dc4 	movi	r2,55
20086040:	e0bef80d 	sth	r2,-1056(fp)
			cmd.resp_type = MMC_RSP_R1;
20086044:	00800544 	movi	r2,21
20086048:	e0bef915 	stw	r2,-1052(fp)
			cmd.cmdarg = mmc->rca << 16;
2008604c:	e0bfff17 	ldw	r2,-4(fp)
20086050:	10801e0b 	ldhu	r2,120(r2)
20086054:	10bfffcc 	andi	r2,r2,65535
20086058:	1004943a 	slli	r2,r2,16
2008605c:	e0befa15 	stw	r2,-1048(fp)

			err = mmc_send_cmd(mmc, &cmd, NULL);
20086060:	e0bef804 	addi	r2,fp,-1056
20086064:	e13fff17 	ldw	r4,-4(fp)
20086068:	100b883a 	mov	r5,r2
2008606c:	000d883a 	mov	r6,zero
20086070:	0084cbc0 	call	20084cbc <mmc_send_cmd>
20086074:	e0beed15 	stw	r2,-1100(fp)
			if (err)
20086078:	e0beed17 	ldw	r2,-1100(fp)
2008607c:	10000226 	beq	r2,zero,20086088 <mmc_startup+0x6bc>
				return err;
20086080:	e0beed17 	ldw	r2,-1100(fp)
20086084:	00009706 	br	200862e4 <mmc_startup+0x918>

			cmd.cmdidx = SD_CMD_APP_SET_BUS_WIDTH;
20086088:	00800184 	movi	r2,6
2008608c:	e0bef80d 	sth	r2,-1056(fp)
			cmd.resp_type = MMC_RSP_R1;
20086090:	00800544 	movi	r2,21
20086094:	e0bef915 	stw	r2,-1052(fp)
			cmd.cmdarg = 2;
20086098:	00800084 	movi	r2,2
2008609c:	e0befa15 	stw	r2,-1048(fp)
			err = mmc_send_cmd(mmc, &cmd, NULL);
200860a0:	e0bef804 	addi	r2,fp,-1056
200860a4:	e13fff17 	ldw	r4,-4(fp)
200860a8:	100b883a 	mov	r5,r2
200860ac:	000d883a 	mov	r6,zero
200860b0:	0084cbc0 	call	20084cbc <mmc_send_cmd>
200860b4:	e0beed15 	stw	r2,-1100(fp)
			if (err)
200860b8:	e0beed17 	ldw	r2,-1100(fp)
200860bc:	10000226 	beq	r2,zero,200860c8 <mmc_startup+0x6fc>
				return err;
200860c0:	e0beed17 	ldw	r2,-1100(fp)
200860c4:	00008706 	br	200862e4 <mmc_startup+0x918>

			mmc_set_bus_width(mmc, 4);
200860c8:	e13fff17 	ldw	r4,-4(fp)
200860cc:	01400104 	movi	r5,4
200860d0:	0084c040 	call	20084c04 <mmc_set_bus_width>
		}

		if (mmc->card_caps & MMC_MODE_HS)
200860d4:	e0bfff17 	ldw	r2,-4(fp)
200860d8:	10801117 	ldw	r2,68(r2)
200860dc:	1080004c 	andi	r2,r2,1
200860e0:	10000526 	beq	r2,zero,200860f8 <mmc_startup+0x72c>
			mmc->tran_speed = 50000000;
200860e4:	e0ffff17 	ldw	r3,-4(fp)
200860e8:	0080bef4 	movhi	r2,763
200860ec:	10bc2004 	addi	r2,r2,-3968
200860f0:	18801f15 	stw	r2,124(r3)
200860f4:	00007506 	br	200862cc <mmc_startup+0x900>
		else
			mmc->tran_speed = 25000000;
200860f8:	e0ffff17 	ldw	r3,-4(fp)
200860fc:	00805f74 	movhi	r2,381
20086100:	109e1004 	addi	r2,r2,30784
20086104:	18801f15 	stw	r2,124(r3)
20086108:	00007006 	br	200862cc <mmc_startup+0x900>
	} else {
		width = ((mmc->host_caps & MMC_MODE_MASK_WIDTH_BITS) >>
2008610c:	e0bfff17 	ldw	r2,-4(fp)
20086110:	10801217 	ldw	r2,72(r2)
20086114:	1080c00c 	andi	r2,r2,768
20086118:	1004d23a 	srli	r2,r2,8
2008611c:	e0beee15 	stw	r2,-1096(fp)
		MMC_MODE_WIDTH_BITS_SHIFT);
		for (; width >= 0; width--) {
20086120:	00005706 	br	20086280 <mmc_startup+0x8b4>
			/* Set the card to use 4 bit*/
			err = mmc_switch(mmc, EXT_CSD_CMD_SET_NORMAL,
20086124:	e0beee17 	ldw	r2,-1096(fp)
20086128:	10803fcc 	andi	r2,r2,255
2008612c:	1080201c 	xori	r2,r2,128
20086130:	10bfe004 	addi	r2,r2,-128
20086134:	e13fff17 	ldw	r4,-4(fp)
20086138:	01400044 	movi	r5,1
2008613c:	01bfedc4 	movi	r6,-73
20086140:	100f883a 	mov	r7,r2
20086144:	00852980 	call	20085298 <mmc_switch>
20086148:	e0beed15 	stw	r2,-1100(fp)
			EXT_CSD_BUS_WIDTH, width);

			if (err)
2008614c:	e0beed17 	ldw	r2,-1100(fp)
20086150:	10000126 	beq	r2,zero,20086158 <mmc_startup+0x78c>
				continue;
20086154:	00004706 	br	20086274 <mmc_startup+0x8a8>

			if (!width) {
20086158:	e0beee17 	ldw	r2,-1096(fp)
2008615c:	1000041e 	bne	r2,zero,20086170 <mmc_startup+0x7a4>
				mmc_set_bus_width(mmc, 1);
20086160:	e13fff17 	ldw	r4,-4(fp)
20086164:	01400044 	movi	r5,1
20086168:	0084c040 	call	20084c04 <mmc_set_bus_width>
				break;
2008616c:	00004606 	br	20086288 <mmc_startup+0x8bc>
			} else
				mmc_set_bus_width(mmc, 4 * width);
20086170:	e0beee17 	ldw	r2,-1096(fp)
20086174:	1085883a 	add	r2,r2,r2
20086178:	1085883a 	add	r2,r2,r2
2008617c:	e13fff17 	ldw	r4,-4(fp)
20086180:	100b883a 	mov	r5,r2
20086184:	0084c040 	call	20084c04 <mmc_set_bus_width>

			err = mmc_send_ext_csd(mmc, test_csd);
20086188:	e0bf7f04 	addi	r2,fp,-516
2008618c:	e13fff17 	ldw	r4,-4(fp)
20086190:	100b883a 	mov	r5,r2
20086194:	00852180 	call	20085218 <mmc_send_ext_csd>
20086198:	e0beed15 	stw	r2,-1100(fp)
			if (!err
2008619c:	e0beed17 	ldw	r2,-1100(fp)
200861a0:	1000341e 	bne	r2,zero,20086274 <mmc_startup+0x8a8>
					&& ext_csd[EXT_CSD_PARTITIONING_SUPPORT]
200861a4:	e0ff2703 	ldbu	r3,-868(fp)
							== test_csd[EXT_CSD_PARTITIONING_SUPPORT]
200861a8:	e0bfa703 	ldbu	r2,-356(fp)
			} else
				mmc_set_bus_width(mmc, 4 * width);

			err = mmc_send_ext_csd(mmc, test_csd);
			if (!err
					&& ext_csd[EXT_CSD_PARTITIONING_SUPPORT]
200861ac:	18c03fcc 	andi	r3,r3,255
200861b0:	18c0201c 	xori	r3,r3,128
200861b4:	18ffe004 	addi	r3,r3,-128
200861b8:	10803fcc 	andi	r2,r2,255
200861bc:	1080201c 	xori	r2,r2,128
200861c0:	10bfe004 	addi	r2,r2,-128
200861c4:	18802b1e 	bne	r3,r2,20086274 <mmc_startup+0x8a8>
							== test_csd[EXT_CSD_PARTITIONING_SUPPORT]
					&& ext_csd[EXT_CSD_ERASE_GROUP_DEF]
200861c8:	e0ff2ac3 	ldbu	r3,-853(fp)
							== test_csd[EXT_CSD_ERASE_GROUP_DEF]
200861cc:	e0bfaac3 	ldbu	r2,-341(fp)

			err = mmc_send_ext_csd(mmc, test_csd);
			if (!err
					&& ext_csd[EXT_CSD_PARTITIONING_SUPPORT]
							== test_csd[EXT_CSD_PARTITIONING_SUPPORT]
					&& ext_csd[EXT_CSD_ERASE_GROUP_DEF]
200861d0:	18c03fcc 	andi	r3,r3,255
200861d4:	18c0201c 	xori	r3,r3,128
200861d8:	18ffe004 	addi	r3,r3,-128
200861dc:	10803fcc 	andi	r2,r2,255
200861e0:	1080201c 	xori	r2,r2,128
200861e4:	10bfe004 	addi	r2,r2,-128
200861e8:	1880221e 	bne	r3,r2,20086274 <mmc_startup+0x8a8>
							== test_csd[EXT_CSD_ERASE_GROUP_DEF]
					&& ext_csd[EXT_CSD_REV] == test_csd[EXT_CSD_REV]
200861ec:	e0ff2f03 	ldbu	r3,-836(fp)
200861f0:	e0bfaf03 	ldbu	r2,-324(fp)
200861f4:	18c03fcc 	andi	r3,r3,255
200861f8:	18c0201c 	xori	r3,r3,128
200861fc:	18ffe004 	addi	r3,r3,-128
20086200:	10803fcc 	andi	r2,r2,255
20086204:	1080201c 	xori	r2,r2,128
20086208:	10bfe004 	addi	r2,r2,-128
2008620c:	1880191e 	bne	r3,r2,20086274 <mmc_startup+0x8a8>
					&& ext_csd[EXT_CSD_HC_ERASE_GRP_SIZE]
20086210:	e0ff3703 	ldbu	r3,-804(fp)
							== test_csd[EXT_CSD_HC_ERASE_GRP_SIZE]
20086214:	e0bfb703 	ldbu	r2,-292(fp)
					&& ext_csd[EXT_CSD_PARTITIONING_SUPPORT]
							== test_csd[EXT_CSD_PARTITIONING_SUPPORT]
					&& ext_csd[EXT_CSD_ERASE_GROUP_DEF]
							== test_csd[EXT_CSD_ERASE_GROUP_DEF]
					&& ext_csd[EXT_CSD_REV] == test_csd[EXT_CSD_REV]
					&& ext_csd[EXT_CSD_HC_ERASE_GRP_SIZE]
20086218:	18c03fcc 	andi	r3,r3,255
2008621c:	18c0201c 	xori	r3,r3,128
20086220:	18ffe004 	addi	r3,r3,-128
20086224:	10803fcc 	andi	r2,r2,255
20086228:	1080201c 	xori	r2,r2,128
2008622c:	10bfe004 	addi	r2,r2,-128
20086230:	1880101e 	bne	r3,r2,20086274 <mmc_startup+0x8a8>
							== test_csd[EXT_CSD_HC_ERASE_GRP_SIZE]
					&& memcmp(&ext_csd[EXT_CSD_SEC_CNT],
20086234:	e0beff04 	addi	r2,fp,-1028
20086238:	10c03504 	addi	r3,r2,212
2008623c:	e0bf7f04 	addi	r2,fp,-516
20086240:	10803504 	addi	r2,r2,212
20086244:	1809883a 	mov	r4,r3
20086248:	100b883a 	mov	r5,r2
2008624c:	01800104 	movi	r6,4
20086250:	008bd200 	call	2008bd20 <memcmp>
20086254:	1000071e 	bne	r2,zero,20086274 <mmc_startup+0x8a8>
							&test_csd[EXT_CSD_SEC_CNT], 4) == 0) {

				mmc->card_caps |= width;
20086258:	e0bfff17 	ldw	r2,-4(fp)
2008625c:	10c01117 	ldw	r3,68(r2)
20086260:	e0beee17 	ldw	r2,-1096(fp)
20086264:	1886b03a 	or	r3,r3,r2
20086268:	e0bfff17 	ldw	r2,-4(fp)
2008626c:	10c01115 	stw	r3,68(r2)
				break;
20086270:	00000506 	br	20086288 <mmc_startup+0x8bc>
		else
			mmc->tran_speed = 25000000;
	} else {
		width = ((mmc->host_caps & MMC_MODE_MASK_WIDTH_BITS) >>
		MMC_MODE_WIDTH_BITS_SHIFT);
		for (; width >= 0; width--) {
20086274:	e0beee17 	ldw	r2,-1096(fp)
20086278:	10bfffc4 	addi	r2,r2,-1
2008627c:	e0beee15 	stw	r2,-1096(fp)
20086280:	e0beee17 	ldw	r2,-1096(fp)
20086284:	103fa70e 	bge	r2,zero,20086124 <__flash_rwdata_start+0xfffe7550>
				mmc->card_caps |= width;
				break;
			}
		}

		if (mmc->card_caps & MMC_MODE_HS) {
20086288:	e0bfff17 	ldw	r2,-4(fp)
2008628c:	10801117 	ldw	r2,68(r2)
20086290:	1080004c 	andi	r2,r2,1
20086294:	10000d26 	beq	r2,zero,200862cc <mmc_startup+0x900>
			if (mmc->card_caps & MMC_MODE_HS_52MHz)
20086298:	e0bfff17 	ldw	r2,-4(fp)
2008629c:	10801117 	ldw	r2,68(r2)
200862a0:	1080040c 	andi	r2,r2,16
200862a4:	10000526 	beq	r2,zero,200862bc <mmc_startup+0x8f0>
				mmc->tran_speed = 52000000;
200862a8:	e0ffff17 	ldw	r3,-4(fp)
200862ac:	0080c674 	movhi	r2,793
200862b0:	109d4004 	addi	r2,r2,29952
200862b4:	18801f15 	stw	r2,124(r3)
200862b8:	00000406 	br	200862cc <mmc_startup+0x900>
			else
				mmc->tran_speed = 26000000;
200862bc:	e0ffff17 	ldw	r3,-4(fp)
200862c0:	00806374 	movhi	r2,397
200862c4:	10aea004 	addi	r2,r2,-17792
200862c8:	18801f15 	stw	r2,124(r3)
		}
	}

	mmc_set_clock(mmc, mmc->tran_speed);
200862cc:	e0bfff17 	ldw	r2,-4(fp)
200862d0:	10801f17 	ldw	r2,124(r2)
200862d4:	e13fff17 	ldw	r4,-4(fp)
200862d8:	100b883a 	mov	r5,r2
200862dc:	0084c440 	call	20084c44 <mmc_set_clock>

	return 0;
200862e0:	0005883a 	mov	r2,zero
}
200862e4:	e037883a 	mov	sp,fp
200862e8:	dfc00117 	ldw	ra,4(sp)
200862ec:	df000017 	ldw	fp,0(sp)
200862f0:	dec00204 	addi	sp,sp,8
200862f4:	f800283a 	ret

200862f8 <mmc_set_blocklen>:

static int mmc_set_blocklen(struct mmc *mmc, int len) {
200862f8:	defff504 	addi	sp,sp,-44
200862fc:	dfc00a15 	stw	ra,40(sp)
20086300:	df000915 	stw	fp,36(sp)
20086304:	df000904 	addi	fp,sp,36
20086308:	e13ffe15 	stw	r4,-8(fp)
2008630c:	e17fff15 	stw	r5,-4(fp)
	struct mmc_cmd cmd;

	cmd.cmdidx = MMC_CMD_SET_BLOCKLEN;
20086310:	00800404 	movi	r2,16
20086314:	e0bff70d 	sth	r2,-36(fp)
	cmd.resp_type = MMC_RSP_R1;
20086318:	00800544 	movi	r2,21
2008631c:	e0bff815 	stw	r2,-32(fp)
	cmd.cmdarg = len;
20086320:	e0bfff17 	ldw	r2,-4(fp)
20086324:	e0bff915 	stw	r2,-28(fp)

	return mmc_send_cmd(mmc, &cmd, NULL);
20086328:	e13ffe17 	ldw	r4,-8(fp)
2008632c:	e17ff704 	addi	r5,fp,-36
20086330:	000d883a 	mov	r6,zero
20086334:	0084cbc0 	call	20084cbc <mmc_send_cmd>
}
20086338:	e037883a 	mov	sp,fp
2008633c:	dfc00117 	ldw	ra,4(sp)
20086340:	df000017 	ldw	fp,0(sp)
20086344:	dec00204 	addi	sp,sp,8
20086348:	f800283a 	ret

2008634c <mmc_read_blocks>:

static int mmc_read_blocks(struct mmc *mmc, void *dst, size_t start,
		size_t blkcnt) {
2008634c:	deffef04 	addi	sp,sp,-68
20086350:	dfc01015 	stw	ra,64(sp)
20086354:	df000f15 	stw	fp,60(sp)
20086358:	df000f04 	addi	fp,sp,60
2008635c:	e13ffc15 	stw	r4,-16(fp)
20086360:	e17ffd15 	stw	r5,-12(fp)
20086364:	e1bffe15 	stw	r6,-8(fp)
20086368:	e1ffff15 	stw	r7,-4(fp)
	struct mmc_cmd cmd;
	struct mmc_data data;

	if (blkcnt > 1)
2008636c:	e0bfff17 	ldw	r2,-4(fp)
20086370:	108000b0 	cmpltui	r2,r2,2
20086374:	1000031e 	bne	r2,zero,20086384 <mmc_read_blocks+0x38>
		cmd.cmdidx = MMC_CMD_READ_MULTIPLE_BLOCK;
20086378:	00800484 	movi	r2,18
2008637c:	e0bff10d 	sth	r2,-60(fp)
20086380:	00000206 	br	2008638c <mmc_read_blocks+0x40>
	else
		cmd.cmdidx = MMC_CMD_READ_SINGLE_BLOCK;
20086384:	00800444 	movi	r2,17
20086388:	e0bff10d 	sth	r2,-60(fp)

	if (mmc->high_capacity)
2008638c:	e0bffc17 	ldw	r2,-16(fp)
20086390:	10800e17 	ldw	r2,56(r2)
20086394:	10000326 	beq	r2,zero,200863a4 <mmc_read_blocks+0x58>
		cmd.cmdarg = start;
20086398:	e0bffe17 	ldw	r2,-8(fp)
2008639c:	e0bff315 	stw	r2,-52(fp)
200863a0:	00000506 	br	200863b8 <mmc_read_blocks+0x6c>
	else
		cmd.cmdarg = start * mmc->read_bl_len;
200863a4:	e0bffc17 	ldw	r2,-16(fp)
200863a8:	10c02017 	ldw	r3,128(r2)
200863ac:	e0bffe17 	ldw	r2,-8(fp)
200863b0:	1885383a 	mul	r2,r3,r2
200863b4:	e0bff315 	stw	r2,-52(fp)

	cmd.resp_type = MMC_RSP_R1;
200863b8:	00800544 	movi	r2,21
200863bc:	e0bff215 	stw	r2,-56(fp)

	data.dest = dst;
200863c0:	e0bffd17 	ldw	r2,-12(fp)
200863c4:	e0bff815 	stw	r2,-32(fp)
	data.blocks = blkcnt;
200863c8:	e0bfff17 	ldw	r2,-4(fp)
200863cc:	e0bffa15 	stw	r2,-24(fp)
	data.blocksize = mmc->read_bl_len;
200863d0:	e0bffc17 	ldw	r2,-16(fp)
200863d4:	10802017 	ldw	r2,128(r2)
200863d8:	e0bffb15 	stw	r2,-20(fp)
	data.flags = MMC_DATA_READ;
200863dc:	00800044 	movi	r2,1
200863e0:	e0bff915 	stw	r2,-28(fp)

	if (mmc_send_cmd(mmc, &cmd, &data))
200863e4:	e0bff804 	addi	r2,fp,-32
200863e8:	e13ffc17 	ldw	r4,-16(fp)
200863ec:	e17ff104 	addi	r5,fp,-60
200863f0:	100d883a 	mov	r6,r2
200863f4:	0084cbc0 	call	20084cbc <mmc_send_cmd>
200863f8:	10000226 	beq	r2,zero,20086404 <mmc_read_blocks+0xb8>
		return 0;
200863fc:	0005883a 	mov	r2,zero
20086400:	00001306 	br	20086450 <mmc_read_blocks+0x104>

	if (blkcnt > 1) {
20086404:	e0bfff17 	ldw	r2,-4(fp)
20086408:	108000b0 	cmpltui	r2,r2,2
2008640c:	10000f1e 	bne	r2,zero,2008644c <mmc_read_blocks+0x100>
		cmd.cmdidx = MMC_CMD_STOP_TRANSMISSION;
20086410:	00800304 	movi	r2,12
20086414:	e0bff10d 	sth	r2,-60(fp)
		cmd.cmdarg = 0;
20086418:	e03ff315 	stw	zero,-52(fp)
		cmd.resp_type = MMC_RSP_R1b;
2008641c:	00800744 	movi	r2,29
20086420:	e0bff215 	stw	r2,-56(fp)
		if (mmc_send_cmd(mmc, &cmd, NULL)) {
20086424:	e13ffc17 	ldw	r4,-16(fp)
20086428:	e17ff104 	addi	r5,fp,-60
2008642c:	000d883a 	mov	r6,zero
20086430:	0084cbc0 	call	20084cbc <mmc_send_cmd>
20086434:	10000526 	beq	r2,zero,2008644c <mmc_read_blocks+0x100>
			printf("mmc fail to send stop cmd\n");
20086438:	01000034 	movhi	r4,0
2008643c:	2100c904 	addi	r4,r4,804
20086440:	008c1280 	call	2008c128 <puts>
			return 0;
20086444:	0005883a 	mov	r2,zero
20086448:	00000106 	br	20086450 <mmc_read_blocks+0x104>
		}
	}

	return blkcnt;
2008644c:	e0bfff17 	ldw	r2,-4(fp)
}
20086450:	e037883a 	mov	sp,fp
20086454:	dfc00117 	ldw	ra,4(sp)
20086458:	df000017 	ldw	fp,0(sp)
2008645c:	dec00204 	addi	sp,sp,8
20086460:	f800283a 	ret

20086464 <mmc_init>:

int mmc_init(struct mmc *mmc) {
20086464:	defffc04 	addi	sp,sp,-16
20086468:	dfc00315 	stw	ra,12(sp)
2008646c:	df000215 	stw	fp,8(sp)
20086470:	df000204 	addi	fp,sp,8
20086474:	e13fff15 	stw	r4,-4(fp)
	int err;

	if (mmc->has_init)
20086478:	e0bfff17 	ldw	r2,-4(fp)
2008647c:	10800b17 	ldw	r2,44(r2)
20086480:	10000226 	beq	r2,zero,2008648c <mmc_init+0x28>
		return 0;
20086484:	0005883a 	mov	r2,zero
20086488:	00003706 	br	20086568 <mmc_init+0x104>

	err = mmc->init(mmc);
2008648c:	e0bfff17 	ldw	r2,-4(fp)
20086490:	10802617 	ldw	r2,152(r2)
20086494:	e13fff17 	ldw	r4,-4(fp)
20086498:	103ee83a 	callr	r2
2008649c:	e0bffe15 	stw	r2,-8(fp)

	if (err)
200864a0:	e0bffe17 	ldw	r2,-8(fp)
200864a4:	10000226 	beq	r2,zero,200864b0 <mmc_init+0x4c>
		return err;
200864a8:	e0bffe17 	ldw	r2,-8(fp)
200864ac:	00002e06 	br	20086568 <mmc_init+0x104>

	mmc_set_bus_width(mmc, 1);
200864b0:	e13fff17 	ldw	r4,-4(fp)
200864b4:	01400044 	movi	r5,1
200864b8:	0084c040 	call	20084c04 <mmc_set_bus_width>
	mmc_set_clock(mmc, 1);
200864bc:	e13fff17 	ldw	r4,-4(fp)
200864c0:	01400044 	movi	r5,1
200864c4:	0084c440 	call	20084c44 <mmc_set_clock>

	/* Reset the Card */
	err = mmc_go_idle(mmc);
200864c8:	e13fff17 	ldw	r4,-4(fp)
200864cc:	0084d0c0 	call	20084d0c <mmc_go_idle>
200864d0:	e0bffe15 	stw	r2,-8(fp)

	if (err)
200864d4:	e0bffe17 	ldw	r2,-8(fp)
200864d8:	10000226 	beq	r2,zero,200864e4 <mmc_init+0x80>
		return err;
200864dc:	e0bffe17 	ldw	r2,-8(fp)
200864e0:	00002106 	br	20086568 <mmc_init+0x104>

	/* The internal partition reset to user partition(0) at every CMD0*/
	mmc->part_num = 0;
200864e4:	e0bfff17 	ldw	r2,-4(fp)
200864e8:	10001ec5 	stb	zero,123(r2)

	/* Test for SD version 2 */
	err = mmc_send_if_cond(mmc);
200864ec:	e13fff17 	ldw	r4,-4(fp)
200864f0:	0084d7c0 	call	20084d7c <mmc_send_if_cond>
200864f4:	e0bffe15 	stw	r2,-8(fp)

	/* Now try to get the SD card's operating condition */
	err = sd_send_op_cond(mmc);
200864f8:	e13fff17 	ldw	r4,-4(fp)
200864fc:	0084e300 	call	20084e30 <sd_send_op_cond>
20086500:	e0bffe15 	stw	r2,-8(fp)

	/* If the command timed out, we check for an MMC card */
	if (err == TIMEOUT) {
20086504:	e0bffe17 	ldw	r2,-8(fp)
20086508:	10bffb58 	cmpnei	r2,r2,-19
2008650c:	10000a1e 	bne	r2,zero,20086538 <mmc_init+0xd4>
		err = mmc_send_op_cond(mmc);
20086510:	e13fff17 	ldw	r4,-4(fp)
20086514:	0084f940 	call	20084f94 <mmc_send_op_cond>
20086518:	e0bffe15 	stw	r2,-8(fp)

		if (err) {
2008651c:	e0bffe17 	ldw	r2,-8(fp)
20086520:	10000526 	beq	r2,zero,20086538 <mmc_init+0xd4>
			printf("Card did not respond to voltage select!\n\r");
20086524:	01000034 	movhi	r4,0
20086528:	2100d004 	addi	r4,r4,832
2008652c:	008c0240 	call	2008c024 <printf>
			return UNUSABLE_ERR;
20086530:	00bffbc4 	movi	r2,-17
20086534:	00000c06 	br	20086568 <mmc_init+0x104>
		}
	}

	err = mmc_startup(mmc);
20086538:	e13fff17 	ldw	r4,-4(fp)
2008653c:	00859cc0 	call	200859cc <mmc_startup>
20086540:	e0bffe15 	stw	r2,-8(fp)
	if (err)
20086544:	e0bffe17 	ldw	r2,-8(fp)
20086548:	10000326 	beq	r2,zero,20086558 <mmc_init+0xf4>
		mmc->has_init = 0;
2008654c:	e0bfff17 	ldw	r2,-4(fp)
20086550:	10000b15 	stw	zero,44(r2)
20086554:	00000306 	br	20086564 <mmc_init+0x100>
	else
		mmc->has_init = 1;
20086558:	e0bfff17 	ldw	r2,-4(fp)
2008655c:	00c00044 	movi	r3,1
20086560:	10c00b15 	stw	r3,44(r2)
	return err;
20086564:	e0bffe17 	ldw	r2,-8(fp)
}
20086568:	e037883a 	mov	sp,fp
2008656c:	dfc00117 	ldw	ra,4(sp)
20086570:	df000017 	ldw	fp,0(sp)
20086574:	dec00204 	addi	sp,sp,8
20086578:	f800283a 	ret

2008657c <mmc_bread>:

size_t mmc_bread(struct mmc *mmc, size_t start, size_t blkcnt, void *dst) {
2008657c:	defff604 	addi	sp,sp,-40
20086580:	dfc00915 	stw	ra,36(sp)
20086584:	df000815 	stw	fp,32(sp)
20086588:	dc000715 	stw	r16,28(sp)
2008658c:	df000804 	addi	fp,sp,32
20086590:	e13ffb15 	stw	r4,-20(fp)
20086594:	e17ffc15 	stw	r5,-16(fp)
20086598:	e1bffd15 	stw	r6,-12(fp)
2008659c:	e1fffe15 	stw	r7,-8(fp)
	size_t cur, blocks_todo = blkcnt;
200865a0:	e0bffd17 	ldw	r2,-12(fp)
200865a4:	e0bff915 	stw	r2,-28(fp)

	if (blkcnt == 0)
200865a8:	e0bffd17 	ldw	r2,-12(fp)
200865ac:	1000021e 	bne	r2,zero,200865b8 <mmc_bread+0x3c>
		return 0;
200865b0:	0005883a 	mov	r2,zero
200865b4:	00004c06 	br	200866e8 <mmc_bread+0x16c>

	if ((start + blkcnt) > mmc->capacity / mmc->read_bl_len) {
200865b8:	e0fffc17 	ldw	r3,-16(fp)
200865bc:	e0bffd17 	ldw	r2,-12(fp)
200865c0:	18a1883a 	add	r16,r3,r2
200865c4:	e0bffb17 	ldw	r2,-20(fp)
200865c8:	10c02317 	ldw	r3,140(r2)
200865cc:	e0bffb17 	ldw	r2,-20(fp)
200865d0:	10802017 	ldw	r2,128(r2)
200865d4:	1809883a 	mov	r4,r3
200865d8:	100b883a 	mov	r5,r2
200865dc:	0088a740 	call	20088a74 <__udivsi3>
200865e0:	1400172e 	bgeu	r2,r16,20086640 <mmc_bread+0xc4>
		printf("MMC: block number 0x%lx exceeds max(0x%lx) (%x, %x)\n", start + blkcnt,
200865e4:	e0fffc17 	ldw	r3,-16(fp)
200865e8:	e0bffd17 	ldw	r2,-12(fp)
200865ec:	18a1883a 	add	r16,r3,r2
				mmc->capacity / mmc->read_bl_len, mmc->capacity, mmc->read_bl_len);
200865f0:	e0bffb17 	ldw	r2,-20(fp)
200865f4:	10c02317 	ldw	r3,140(r2)
200865f8:	e0bffb17 	ldw	r2,-20(fp)
200865fc:	10802017 	ldw	r2,128(r2)

	if (blkcnt == 0)
		return 0;

	if ((start + blkcnt) > mmc->capacity / mmc->read_bl_len) {
		printf("MMC: block number 0x%lx exceeds max(0x%lx) (%x, %x)\n", start + blkcnt,
20086600:	1809883a 	mov	r4,r3
20086604:	100b883a 	mov	r5,r2
20086608:	0088a740 	call	20088a74 <__udivsi3>
2008660c:	100d883a 	mov	r6,r2
20086610:	e0bffb17 	ldw	r2,-20(fp)
20086614:	10c02317 	ldw	r3,140(r2)
20086618:	e0bffb17 	ldw	r2,-20(fp)
2008661c:	10802017 	ldw	r2,128(r2)
20086620:	d8800015 	stw	r2,0(sp)
20086624:	01000034 	movhi	r4,0
20086628:	2100db04 	addi	r4,r4,876
2008662c:	800b883a 	mov	r5,r16
20086630:	180f883a 	mov	r7,r3
20086634:	008c0240 	call	2008c024 <printf>
				mmc->capacity / mmc->read_bl_len, mmc->capacity, mmc->read_bl_len);
		return 0;
20086638:	0005883a 	mov	r2,zero
2008663c:	00002a06 	br	200866e8 <mmc_bread+0x16c>
	}

	if (mmc_set_blocklen(mmc, mmc->read_bl_len))
20086640:	e0bffb17 	ldw	r2,-20(fp)
20086644:	10802017 	ldw	r2,128(r2)
20086648:	e13ffb17 	ldw	r4,-20(fp)
2008664c:	100b883a 	mov	r5,r2
20086650:	00862f80 	call	200862f8 <mmc_set_blocklen>
20086654:	10000226 	beq	r2,zero,20086660 <mmc_bread+0xe4>
		return 0;
20086658:	0005883a 	mov	r2,zero
2008665c:	00002206 	br	200866e8 <mmc_bread+0x16c>

	do {
		cur = (blocks_todo > mmc->b_max) ? mmc->b_max : blocks_todo;
20086660:	e0bffb17 	ldw	r2,-20(fp)
20086664:	10802817 	ldw	r2,160(r2)
20086668:	e0fff917 	ldw	r3,-28(fp)
2008666c:	1880012e 	bgeu	r3,r2,20086674 <mmc_bread+0xf8>
20086670:	1805883a 	mov	r2,r3
20086674:	e0bffa15 	stw	r2,-24(fp)

		if (mmc_read_blocks(mmc, dst, start, cur) != cur)
20086678:	e13ffb17 	ldw	r4,-20(fp)
2008667c:	e17ffe17 	ldw	r5,-8(fp)
20086680:	e1bffc17 	ldw	r6,-16(fp)
20086684:	e1fffa17 	ldw	r7,-24(fp)
20086688:	008634c0 	call	2008634c <mmc_read_blocks>
2008668c:	1007883a 	mov	r3,r2
20086690:	e0bffa17 	ldw	r2,-24(fp)
20086694:	18800226 	beq	r3,r2,200866a0 <mmc_bread+0x124>
			return 0;
20086698:	0005883a 	mov	r2,zero
2008669c:	00001206 	br	200866e8 <mmc_bread+0x16c>

		blocks_todo -= cur;
200866a0:	e0fff917 	ldw	r3,-28(fp)
200866a4:	e0bffa17 	ldw	r2,-24(fp)
200866a8:	1885c83a 	sub	r2,r3,r2
200866ac:	e0bff915 	stw	r2,-28(fp)
		start += cur;
200866b0:	e0fffc17 	ldw	r3,-16(fp)
200866b4:	e0bffa17 	ldw	r2,-24(fp)
200866b8:	1885883a 	add	r2,r3,r2
200866bc:	e0bffc15 	stw	r2,-16(fp)
		dst += cur * mmc->read_bl_len;
200866c0:	e0bffb17 	ldw	r2,-20(fp)
200866c4:	10c02017 	ldw	r3,128(r2)
200866c8:	e0bffa17 	ldw	r2,-24(fp)
200866cc:	1885383a 	mul	r2,r3,r2
200866d0:	e0fffe17 	ldw	r3,-8(fp)
200866d4:	1885883a 	add	r2,r3,r2
200866d8:	e0bffe15 	stw	r2,-8(fp)
	} while (blocks_todo > 0);
200866dc:	e0bff917 	ldw	r2,-28(fp)
200866e0:	103fdf1e 	bne	r2,zero,20086660 <__flash_rwdata_start+0xfffe7a8c>

	return blkcnt;
200866e4:	e0bffd17 	ldw	r2,-12(fp)
}
200866e8:	e6ffff04 	addi	sp,fp,-4
200866ec:	dfc00217 	ldw	ra,8(sp)
200866f0:	df000117 	ldw	fp,4(sp)
200866f4:	dc000017 	ldw	r16,0(sp)
200866f8:	dec00304 	addi	sp,sp,12
200866fc:	f800283a 	ret

20086700 <print_mmcinfo>:

void print_mmcinfo(struct mmc *mmc) {
20086700:	defffb04 	addi	sp,sp,-20
20086704:	dfc00415 	stw	ra,16(sp)
20086708:	df000315 	stw	fp,12(sp)
2008670c:	df000304 	addi	fp,sp,12
20086710:	e13fff15 	stw	r4,-4(fp)
	printf("Device: %s\n\r", mmc->name);
20086714:	e0bfff17 	ldw	r2,-4(fp)
20086718:	01000034 	movhi	r4,0
2008671c:	2100e904 	addi	r4,r4,932
20086720:	100b883a 	mov	r5,r2
20086724:	008c0240 	call	2008c024 <printf>
	printf("Manufacturer ID: %x\n\r", mmc->cid[0] >> 24);
20086728:	e0bfff17 	ldw	r2,-4(fp)
2008672c:	10801a17 	ldw	r2,104(r2)
20086730:	1004d63a 	srli	r2,r2,24
20086734:	01000034 	movhi	r4,0
20086738:	2100ed04 	addi	r4,r4,948
2008673c:	100b883a 	mov	r5,r2
20086740:	008c0240 	call	2008c024 <printf>
	printf("OEM: %x\n\r", (mmc->cid[0] >> 8) & 0xffff);
20086744:	e0bfff17 	ldw	r2,-4(fp)
20086748:	10801a17 	ldw	r2,104(r2)
2008674c:	1004d23a 	srli	r2,r2,8
20086750:	10bfffcc 	andi	r2,r2,65535
20086754:	01000034 	movhi	r4,0
20086758:	2100f304 	addi	r4,r4,972
2008675c:	100b883a 	mov	r5,r2
20086760:	008c0240 	call	2008c024 <printf>
	printf("Name: %c%c%c%c%c \n\r", mmc->cid[0] & 0xff, (mmc->cid[1] >> 24),
20086764:	e0bfff17 	ldw	r2,-4(fp)
20086768:	10801a17 	ldw	r2,104(r2)
2008676c:	11403fcc 	andi	r5,r2,255
20086770:	e0bfff17 	ldw	r2,-4(fp)
20086774:	10801b17 	ldw	r2,108(r2)
20086778:	100cd63a 	srli	r6,r2,24
			(mmc->cid[1] >> 16) & 0xff, (mmc->cid[1] >> 8) & 0xff,
2008677c:	e0bfff17 	ldw	r2,-4(fp)
20086780:	10801b17 	ldw	r2,108(r2)
20086784:	1004d43a 	srli	r2,r2,16

void print_mmcinfo(struct mmc *mmc) {
	printf("Device: %s\n\r", mmc->name);
	printf("Manufacturer ID: %x\n\r", mmc->cid[0] >> 24);
	printf("OEM: %x\n\r", (mmc->cid[0] >> 8) & 0xffff);
	printf("Name: %c%c%c%c%c \n\r", mmc->cid[0] & 0xff, (mmc->cid[1] >> 24),
20086788:	11c03fcc 	andi	r7,r2,255
			(mmc->cid[1] >> 16) & 0xff, (mmc->cid[1] >> 8) & 0xff,
2008678c:	e0bfff17 	ldw	r2,-4(fp)
20086790:	10801b17 	ldw	r2,108(r2)
20086794:	1004d23a 	srli	r2,r2,8

void print_mmcinfo(struct mmc *mmc) {
	printf("Device: %s\n\r", mmc->name);
	printf("Manufacturer ID: %x\n\r", mmc->cid[0] >> 24);
	printf("OEM: %x\n\r", (mmc->cid[0] >> 8) & 0xffff);
	printf("Name: %c%c%c%c%c \n\r", mmc->cid[0] & 0xff, (mmc->cid[1] >> 24),
20086798:	10c03fcc 	andi	r3,r2,255
			(mmc->cid[1] >> 16) & 0xff, (mmc->cid[1] >> 8) & 0xff,
			mmc->cid[1] & 0xff);
2008679c:	e0bfff17 	ldw	r2,-4(fp)
200867a0:	10801b17 	ldw	r2,108(r2)

void print_mmcinfo(struct mmc *mmc) {
	printf("Device: %s\n\r", mmc->name);
	printf("Manufacturer ID: %x\n\r", mmc->cid[0] >> 24);
	printf("OEM: %x\n\r", (mmc->cid[0] >> 8) & 0xffff);
	printf("Name: %c%c%c%c%c \n\r", mmc->cid[0] & 0xff, (mmc->cid[1] >> 24),
200867a4:	10803fcc 	andi	r2,r2,255
200867a8:	d8c00015 	stw	r3,0(sp)
200867ac:	d8800115 	stw	r2,4(sp)
200867b0:	01000034 	movhi	r4,0
200867b4:	2100f604 	addi	r4,r4,984
200867b8:	008c0240 	call	2008c024 <printf>
			(mmc->cid[1] >> 16) & 0xff, (mmc->cid[1] >> 8) & 0xff,
			mmc->cid[1] & 0xff);

	printf("Tran Speed: %d\n\r", mmc->tran_speed);
200867bc:	e0bfff17 	ldw	r2,-4(fp)
200867c0:	10801f17 	ldw	r2,124(r2)
200867c4:	01000034 	movhi	r4,0
200867c8:	2100fb04 	addi	r4,r4,1004
200867cc:	100b883a 	mov	r5,r2
200867d0:	008c0240 	call	2008c024 <printf>
	printf("Rd Block Len: %d\n\r", mmc->read_bl_len);
200867d4:	e0bfff17 	ldw	r2,-4(fp)
200867d8:	10802017 	ldw	r2,128(r2)
200867dc:	01000034 	movhi	r4,0
200867e0:	21010004 	addi	r4,r4,1024
200867e4:	100b883a 	mov	r5,r2
200867e8:	008c0240 	call	2008c024 <printf>

	printf("%s version %d.%d\n\r", IS_SD(mmc) ? "SD" : "MMC",
200867ec:	e0bfff17 	ldw	r2,-4(fp)
200867f0:	10800a17 	ldw	r2,40(r2)
200867f4:	108000ac 	andhi	r2,r2,2
200867f8:	10000326 	beq	r2,zero,20086808 <print_mmcinfo+0x108>
200867fc:	00800034 	movhi	r2,0
20086800:	10810504 	addi	r2,r2,1044
20086804:	00000206 	br	20086810 <print_mmcinfo+0x110>
20086808:	00800034 	movhi	r2,0
2008680c:	10810604 	addi	r2,r2,1048
			(mmc->version >> 4) & 0xf, mmc->version & 0xf);
20086810:	e0ffff17 	ldw	r3,-4(fp)
20086814:	18c00a17 	ldw	r3,40(r3)
20086818:	1806d13a 	srli	r3,r3,4
			mmc->cid[1] & 0xff);

	printf("Tran Speed: %d\n\r", mmc->tran_speed);
	printf("Rd Block Len: %d\n\r", mmc->read_bl_len);

	printf("%s version %d.%d\n\r", IS_SD(mmc) ? "SD" : "MMC",
2008681c:	198003cc 	andi	r6,r3,15
			(mmc->version >> 4) & 0xf, mmc->version & 0xf);
20086820:	e0ffff17 	ldw	r3,-4(fp)
20086824:	18c00a17 	ldw	r3,40(r3)
			mmc->cid[1] & 0xff);

	printf("Tran Speed: %d\n\r", mmc->tran_speed);
	printf("Rd Block Len: %d\n\r", mmc->read_bl_len);

	printf("%s version %d.%d\n\r", IS_SD(mmc) ? "SD" : "MMC",
20086828:	18c003cc 	andi	r3,r3,15
2008682c:	01000034 	movhi	r4,0
20086830:	21010704 	addi	r4,r4,1052
20086834:	100b883a 	mov	r5,r2
20086838:	180f883a 	mov	r7,r3
2008683c:	008c0240 	call	2008c024 <printf>
			(mmc->version >> 4) & 0xf, mmc->version & 0xf);

	printf("High Capacity: %s\n\r", mmc->high_capacity ? "Yes" : "No");
20086840:	e0bfff17 	ldw	r2,-4(fp)
20086844:	10800e17 	ldw	r2,56(r2)
20086848:	10000326 	beq	r2,zero,20086858 <print_mmcinfo+0x158>
2008684c:	00800034 	movhi	r2,0
20086850:	10810c04 	addi	r2,r2,1072
20086854:	00000206 	br	20086860 <print_mmcinfo+0x160>
20086858:	00800034 	movhi	r2,0
2008685c:	10810d04 	addi	r2,r2,1076
20086860:	01000034 	movhi	r4,0
20086864:	21010e04 	addi	r4,r4,1080
20086868:	100b883a 	mov	r5,r2
2008686c:	008c0240 	call	2008c024 <printf>
	printf("Capacity: %lu MB\n\r", mmc->capacity / 1024 / 1024);
20086870:	e0bfff17 	ldw	r2,-4(fp)
20086874:	10802317 	ldw	r2,140(r2)
20086878:	1004d53a 	srli	r2,r2,20
2008687c:	01000034 	movhi	r4,0
20086880:	21011304 	addi	r4,r4,1100
20086884:	100b883a 	mov	r5,r2
20086888:	008c0240 	call	2008c024 <printf>

	printf("Bus Width: %d-bit\n\r", mmc->bus_width);
2008688c:	e0bfff17 	ldw	r2,-4(fp)
20086890:	10800f17 	ldw	r2,60(r2)
20086894:	01000034 	movhi	r4,0
20086898:	21011804 	addi	r4,r4,1120
2008689c:	100b883a 	mov	r5,r2
200868a0:	008c0240 	call	2008c024 <printf>
}
200868a4:	e037883a 	mov	sp,fp
200868a8:	dfc00117 	ldw	ra,4(sp)
200868ac:	df000017 	ldw	fp,0(sp)
200868b0:	dec00204 	addi	sp,sp,8
200868b4:	f800283a 	ret

200868b8 <flush_dcache_range>:
	int clk_freq;
};

#define OCSDC_PRINT(x)	//DEBUG(x);

void flush_dcache_range(void * start, void * end) {
200868b8:	defffc04 	addi	sp,sp,-16
200868bc:	dfc00315 	stw	ra,12(sp)
200868c0:	df000215 	stw	fp,8(sp)
200868c4:	df000204 	addi	fp,sp,8
200868c8:	e13ffe15 	stw	r4,-8(fp)
200868cc:	e17fff15 	stw	r5,-4(fp)
	alt_dcache_flush(start, end-start);
200868d0:	e0ffff17 	ldw	r3,-4(fp)
200868d4:	e0bffe17 	ldw	r2,-8(fp)
200868d8:	1885c83a 	sub	r2,r3,r2
200868dc:	e13ffe17 	ldw	r4,-8(fp)
200868e0:	100b883a 	mov	r5,r2
200868e4:	00995840 	call	20099584 <alt_dcache_flush>
}
200868e8:	e037883a 	mov	sp,fp
200868ec:	dfc00117 	ldw	ra,4(sp)
200868f0:	df000017 	ldw	fp,0(sp)
200868f4:	dec00204 	addi	sp,sp,8
200868f8:	f800283a 	ret

200868fc <ocsdc_read>:

static inline uint32_t ocsdc_read(struct ocsdc *dev, int offset)
{
200868fc:	defffd04 	addi	sp,sp,-12
20086900:	df000215 	stw	fp,8(sp)
20086904:	df000204 	addi	fp,sp,8
20086908:	e13ffe15 	stw	r4,-8(fp)
2008690c:	e17fff15 	stw	r5,-4(fp)
	return IORD(dev->iobase, offset);
20086910:	e0bfff17 	ldw	r2,-4(fp)
20086914:	1085883a 	add	r2,r2,r2
20086918:	1085883a 	add	r2,r2,r2
2008691c:	1007883a 	mov	r3,r2
20086920:	e0bffe17 	ldw	r2,-8(fp)
20086924:	10800017 	ldw	r2,0(r2)
20086928:	1885883a 	add	r2,r3,r2
2008692c:	10800037 	ldwio	r2,0(r2)
}
20086930:	e037883a 	mov	sp,fp
20086934:	df000017 	ldw	fp,0(sp)
20086938:	dec00104 	addi	sp,sp,4
2008693c:	f800283a 	ret

20086940 <ocsdc_write>:

static inline void ocsdc_write(struct ocsdc *dev, int offset, uint32_t data)
{
20086940:	defffc04 	addi	sp,sp,-16
20086944:	df000315 	stw	fp,12(sp)
20086948:	df000304 	addi	fp,sp,12
2008694c:	e13ffd15 	stw	r4,-12(fp)
20086950:	e17ffe15 	stw	r5,-8(fp)
20086954:	e1bfff15 	stw	r6,-4(fp)
	IOWR(dev->iobase, offset, data);
20086958:	e0bffe17 	ldw	r2,-8(fp)
2008695c:	1085883a 	add	r2,r2,r2
20086960:	1085883a 	add	r2,r2,r2
20086964:	1007883a 	mov	r3,r2
20086968:	e0bffd17 	ldw	r2,-12(fp)
2008696c:	10800017 	ldw	r2,0(r2)
20086970:	1885883a 	add	r2,r3,r2
20086974:	1007883a 	mov	r3,r2
20086978:	e0bfff17 	ldw	r2,-4(fp)
2008697c:	18800035 	stwio	r2,0(r3)
}
20086980:	e037883a 	mov	sp,fp
20086984:	df000017 	ldw	fp,0(sp)
20086988:	dec00104 	addi	sp,sp,4
2008698c:	f800283a 	ret

20086990 <ocsdc_set_buswidth>:

static void ocsdc_set_buswidth(struct ocsdc * dev, uint width) {
20086990:	defffc04 	addi	sp,sp,-16
20086994:	dfc00315 	stw	ra,12(sp)
20086998:	df000215 	stw	fp,8(sp)
2008699c:	df000204 	addi	fp,sp,8
200869a0:	e13ffe15 	stw	r4,-8(fp)
200869a4:	e17fff15 	stw	r5,-4(fp)
	if (width == 4)
200869a8:	e0bfff17 	ldw	r2,-4(fp)
200869ac:	10800118 	cmpnei	r2,r2,4
200869b0:	1000051e 	bne	r2,zero,200869c8 <ocsdc_set_buswidth+0x38>
		ocsdc_write(dev, OCSDC_CONTROL, 1);
200869b4:	e13ffe17 	ldw	r4,-8(fp)
200869b8:	01400704 	movi	r5,28
200869bc:	01800044 	movi	r6,1
200869c0:	00869400 	call	20086940 <ocsdc_write>
200869c4:	00000706 	br	200869e4 <ocsdc_set_buswidth+0x54>
	else if (width == 1)
200869c8:	e0bfff17 	ldw	r2,-4(fp)
200869cc:	10800058 	cmpnei	r2,r2,1
200869d0:	1000041e 	bne	r2,zero,200869e4 <ocsdc_set_buswidth+0x54>
		ocsdc_write(dev, OCSDC_CONTROL, 0);
200869d4:	e13ffe17 	ldw	r4,-8(fp)
200869d8:	01400704 	movi	r5,28
200869dc:	000d883a 	mov	r6,zero
200869e0:	00869400 	call	20086940 <ocsdc_write>
}
200869e4:	e037883a 	mov	sp,fp
200869e8:	dfc00117 	ldw	ra,4(sp)
200869ec:	df000017 	ldw	fp,0(sp)
200869f0:	dec00204 	addi	sp,sp,8
200869f4:	f800283a 	ret

200869f8 <ocsdc_set_clock>:

/* Set clock prescalar value based on the required clock in HZ */
static void ocsdc_set_clock(struct ocsdc * dev, uint clock)
{
200869f8:	defff904 	addi	sp,sp,-28
200869fc:	dfc00615 	stw	ra,24(sp)
20086a00:	df000515 	stw	fp,20(sp)
20086a04:	dc400415 	stw	r17,16(sp)
20086a08:	dc000315 	stw	r16,12(sp)
20086a0c:	df000504 	addi	fp,sp,20
20086a10:	e13ffc15 	stw	r4,-16(fp)
20086a14:	e17ffd15 	stw	r5,-12(fp)
	int clk_div = (clock == dev->clk_freq)? 0x00000080 : dev->clk_freq / (2.0 * clock) - 1;
20086a18:	e0bffc17 	ldw	r2,-16(fp)
20086a1c:	10800117 	ldw	r2,4(r2)
20086a20:	1007883a 	mov	r3,r2
20086a24:	e0bffd17 	ldw	r2,-12(fp)
20086a28:	18802926 	beq	r3,r2,20086ad0 <ocsdc_set_clock+0xd8>
20086a2c:	e0bffc17 	ldw	r2,-16(fp)
20086a30:	10800117 	ldw	r2,4(r2)
20086a34:	1009883a 	mov	r4,r2
20086a38:	008aec80 	call	2008aec8 <__floatsidf>
20086a3c:	1021883a 	mov	r16,r2
20086a40:	1823883a 	mov	r17,r3
20086a44:	e13ffd17 	ldw	r4,-12(fp)
20086a48:	008af980 	call	2008af98 <__floatunsidf>
20086a4c:	100f883a 	mov	r7,r2
20086a50:	1811883a 	mov	r8,r3
20086a54:	3809883a 	mov	r4,r7
20086a58:	400b883a 	mov	r5,r8
20086a5c:	380d883a 	mov	r6,r7
20086a60:	400f883a 	mov	r7,r8
20086a64:	00894080 	call	20089408 <__adddf3>
20086a68:	1009883a 	mov	r4,r2
20086a6c:	180b883a 	mov	r5,r3
20086a70:	2005883a 	mov	r2,r4
20086a74:	2807883a 	mov	r3,r5
20086a78:	8009883a 	mov	r4,r16
20086a7c:	880b883a 	mov	r5,r17
20086a80:	100d883a 	mov	r6,r2
20086a84:	180f883a 	mov	r7,r3
20086a88:	0089ca40 	call	20089ca4 <__divdf3>
20086a8c:	1009883a 	mov	r4,r2
20086a90:	180b883a 	mov	r5,r3
20086a94:	2005883a 	mov	r2,r4
20086a98:	2807883a 	mov	r3,r5
20086a9c:	1009883a 	mov	r4,r2
20086aa0:	180b883a 	mov	r5,r3
20086aa4:	000d883a 	mov	r6,zero
20086aa8:	01cffc34 	movhi	r7,16368
20086aac:	008a5700 	call	2008a570 <__subdf3>
20086ab0:	1009883a 	mov	r4,r2
20086ab4:	180b883a 	mov	r5,r3
20086ab8:	2005883a 	mov	r2,r4
20086abc:	2807883a 	mov	r3,r5
20086ac0:	1009883a 	mov	r4,r2
20086ac4:	180b883a 	mov	r5,r3
20086ac8:	008ae400 	call	2008ae40 <__fixdfsi>
20086acc:	00000106 	br	20086ad4 <ocsdc_set_clock+0xdc>
20086ad0:	00802004 	movi	r2,128
20086ad4:	e0bffb15 	stw	r2,-20(fp)

	OCSDC_PRINT(("ocsdc_set_clock %d, div %d\n\r", clock, clk_div));
	//software reset
	ocsdc_write(dev, OCSDC_SOFTWARE_RESET, 1);
20086ad8:	e13ffc17 	ldw	r4,-16(fp)
20086adc:	01400a04 	movi	r5,40
20086ae0:	01800044 	movi	r6,1
20086ae4:	00869400 	call	20086940 <ocsdc_write>
	//set clock devider
	ocsdc_write(dev, OCSDC_CLOCK_DIVIDER, clk_div);
20086ae8:	e0bffb17 	ldw	r2,-20(fp)
20086aec:	e13ffc17 	ldw	r4,-16(fp)
20086af0:	01400904 	movi	r5,36
20086af4:	100d883a 	mov	r6,r2
20086af8:	00869400 	call	20086940 <ocsdc_write>
	//clear software reset
	ocsdc_write(dev, OCSDC_SOFTWARE_RESET, 0);
20086afc:	e13ffc17 	ldw	r4,-16(fp)
20086b00:	01400a04 	movi	r5,40
20086b04:	000d883a 	mov	r6,zero
20086b08:	00869400 	call	20086940 <ocsdc_write>
}
20086b0c:	e6fffe04 	addi	sp,fp,-8
20086b10:	dfc00317 	ldw	ra,12(sp)
20086b14:	df000217 	ldw	fp,8(sp)
20086b18:	dc400117 	ldw	r17,4(sp)
20086b1c:	dc000017 	ldw	r16,0(sp)
20086b20:	dec00404 	addi	sp,sp,16
20086b24:	f800283a 	ret

20086b28 <ocsdc_finish>:

static int ocsdc_finish(struct ocsdc * dev, struct mmc_cmd *cmd) {
20086b28:	defffa04 	addi	sp,sp,-24
20086b2c:	dfc00515 	stw	ra,20(sp)
20086b30:	df000415 	stw	fp,16(sp)
20086b34:	df000404 	addi	fp,sp,16
20086b38:	e13ffe15 	stw	r4,-8(fp)
20086b3c:	e17fff15 	stw	r5,-4(fp)

	int retval = 0;
20086b40:	e03ffc15 	stw	zero,-16(fp)
	while (1) {
		int r2 = ocsdc_read(dev, OCSDC_CMD_INT_STATUS);
20086b44:	e13ffe17 	ldw	r4,-8(fp)
20086b48:	01400d04 	movi	r5,52
20086b4c:	00868fc0 	call	200868fc <ocsdc_read>
20086b50:	e0bffd15 	stw	r2,-12(fp)
		//printf("ocsdc_finish: cmd %d, status %x\n", cmd->cmdidx, r2);
		if (r2 & OCSDC_CMD_INT_STATUS_EI) {
20086b54:	e0bffd17 	ldw	r2,-12(fp)
20086b58:	1080008c 	andi	r2,r2,2
20086b5c:	10000726 	beq	r2,zero,20086b7c <ocsdc_finish+0x54>
			//clear interrupts
			ocsdc_write(dev, OCSDC_CMD_INT_STATUS, 0);
20086b60:	e13ffe17 	ldw	r4,-8(fp)
20086b64:	01400d04 	movi	r5,52
20086b68:	000d883a 	mov	r6,zero
20086b6c:	00869400 	call	20086940 <ocsdc_write>
			OCSDC_PRINT(("ocsdc_finish: cmd %d, status %x\n\r", cmd->cmdidx, r2));
			retval = -1;
20086b70:	00bfffc4 	movi	r2,-1
20086b74:	e0bffc15 	stw	r2,-16(fp)
			break;
20086b78:	00002606 	br	20086c14 <ocsdc_finish+0xec>
		}
		else if (r2 & OCSDC_CMD_INT_STATUS_CC) {
20086b7c:	e0bffd17 	ldw	r2,-12(fp)
20086b80:	1080004c 	andi	r2,r2,1
20086b84:	10002226 	beq	r2,zero,20086c10 <ocsdc_finish+0xe8>
			//clear interrupts
			ocsdc_write(dev, OCSDC_CMD_INT_STATUS, 0);
20086b88:	e13ffe17 	ldw	r4,-8(fp)
20086b8c:	01400d04 	movi	r5,52
20086b90:	000d883a 	mov	r6,zero
20086b94:	00869400 	call	20086940 <ocsdc_write>
			//get response
			cmd->response[0] = ocsdc_read(dev, OCSDC_RESPONSE_1);
20086b98:	e13ffe17 	ldw	r4,-8(fp)
20086b9c:	01400204 	movi	r5,8
20086ba0:	00868fc0 	call	200868fc <ocsdc_read>
20086ba4:	1007883a 	mov	r3,r2
20086ba8:	e0bfff17 	ldw	r2,-4(fp)
20086bac:	10c00315 	stw	r3,12(r2)
			if (cmd->resp_type & MMC_RSP_136) {
20086bb0:	e0bfff17 	ldw	r2,-4(fp)
20086bb4:	10800117 	ldw	r2,4(r2)
20086bb8:	1080008c 	andi	r2,r2,2
20086bbc:	10001226 	beq	r2,zero,20086c08 <ocsdc_finish+0xe0>
				cmd->response[1] = ocsdc_read(dev, OCSDC_RESPONSE_2);
20086bc0:	e13ffe17 	ldw	r4,-8(fp)
20086bc4:	01400304 	movi	r5,12
20086bc8:	00868fc0 	call	200868fc <ocsdc_read>
20086bcc:	1007883a 	mov	r3,r2
20086bd0:	e0bfff17 	ldw	r2,-4(fp)
20086bd4:	10c00415 	stw	r3,16(r2)
				cmd->response[2] = ocsdc_read(dev, OCSDC_RESPONSE_3);
20086bd8:	e13ffe17 	ldw	r4,-8(fp)
20086bdc:	01400404 	movi	r5,16
20086be0:	00868fc0 	call	200868fc <ocsdc_read>
20086be4:	1007883a 	mov	r3,r2
20086be8:	e0bfff17 	ldw	r2,-4(fp)
20086bec:	10c00515 	stw	r3,20(r2)
				cmd->response[3] = ocsdc_read(dev, OCSDC_RESPONSE_4);
20086bf0:	e13ffe17 	ldw	r4,-8(fp)
20086bf4:	01400504 	movi	r5,20
20086bf8:	00868fc0 	call	200868fc <ocsdc_read>
20086bfc:	1007883a 	mov	r3,r2
20086c00:	e0bfff17 	ldw	r2,-4(fp)
20086c04:	10c00615 	stw	r3,24(r2)
			}
			OCSDC_PRINT(("ocsdc_finish:  %d ok\n\r", cmd->cmdidx));
			retval = 0;
20086c08:	e03ffc15 	stw	zero,-16(fp)

			break;
20086c0c:	00000106 	br	20086c14 <ocsdc_finish+0xec>
		}
		//else if (!(r2 & OCSDC_CMD_INT_STATUS_CIE)) {
		//	printf("ocsdc_finish: cmd %d no exec %x\n", cmd->cmdidx, r2);
		//}
	}
20086c10:	003fcc06 	br	20086b44 <__flash_rwdata_start+0xfffe7f70>
	return retval;
20086c14:	e0bffc17 	ldw	r2,-16(fp)
}
20086c18:	e037883a 	mov	sp,fp
20086c1c:	dfc00117 	ldw	ra,4(sp)
20086c20:	df000017 	ldw	fp,0(sp)
20086c24:	dec00204 	addi	sp,sp,8
20086c28:	f800283a 	ret

20086c2c <ocsdc_data_finish>:

static int ocsdc_data_finish(struct ocsdc * dev) {
20086c2c:	defffc04 	addi	sp,sp,-16
20086c30:	dfc00315 	stw	ra,12(sp)
20086c34:	df000215 	stw	fp,8(sp)
20086c38:	df000204 	addi	fp,sp,8
20086c3c:	e13fff15 	stw	r4,-4(fp)
	int status;

    while ((status = ocsdc_read(dev, OCSDC_DAT_INT_STATUS)) == 0);
20086c40:	0001883a 	nop
20086c44:	e13fff17 	ldw	r4,-4(fp)
20086c48:	01400f04 	movi	r5,60
20086c4c:	00868fc0 	call	200868fc <ocsdc_read>
20086c50:	e0bffe15 	stw	r2,-8(fp)
20086c54:	e0bffe17 	ldw	r2,-8(fp)
20086c58:	103ffa26 	beq	r2,zero,20086c44 <__flash_rwdata_start+0xfffe8070>
    ocsdc_write(dev, OCSDC_DAT_INT_STATUS, 0);
20086c5c:	e13fff17 	ldw	r4,-4(fp)
20086c60:	01400f04 	movi	r5,60
20086c64:	000d883a 	mov	r6,zero
20086c68:	00869400 	call	20086940 <ocsdc_write>

    if (status & SDCMSC_DAT_INT_STATUS_TRS) {
20086c6c:	e0bffe17 	ldw	r2,-8(fp)
20086c70:	1080004c 	andi	r2,r2,1
20086c74:	10000226 	beq	r2,zero,20086c80 <ocsdc_data_finish+0x54>
    	OCSDC_PRINT(("ocsdc_data_finish: ok\n\r"));
    	return 0;
20086c78:	0005883a 	mov	r2,zero
20086c7c:	00000106 	br	20086c84 <ocsdc_data_finish+0x58>
    }
    else {
    	OCSDC_PRINT(("ocsdc_data_finish: status %x\n\r", status));
    	return -1;
20086c80:	00bfffc4 	movi	r2,-1
    }
}
20086c84:	e037883a 	mov	sp,fp
20086c88:	dfc00117 	ldw	ra,4(sp)
20086c8c:	df000017 	ldw	fp,0(sp)
20086c90:	dec00204 	addi	sp,sp,8
20086c94:	f800283a 	ret

20086c98 <ocsdc_setup_data_xfer>:

static void ocsdc_setup_data_xfer(struct ocsdc * dev, struct mmc_cmd *cmd, struct mmc_data *data) {
20086c98:	defffb04 	addi	sp,sp,-20
20086c9c:	dfc00415 	stw	ra,16(sp)
20086ca0:	df000315 	stw	fp,12(sp)
20086ca4:	df000304 	addi	fp,sp,12
20086ca8:	e13ffd15 	stw	r4,-12(fp)
20086cac:	e17ffe15 	stw	r5,-8(fp)
20086cb0:	e1bfff15 	stw	r6,-4(fp)

	//invalidate cache
	if (data->flags & MMC_DATA_READ) {
20086cb4:	e0bfff17 	ldw	r2,-4(fp)
20086cb8:	10800117 	ldw	r2,4(r2)
20086cbc:	1080004c 	andi	r2,r2,1
20086cc0:	10001426 	beq	r2,zero,20086d14 <ocsdc_setup_data_xfer+0x7c>
		flush_dcache_range(data->dest, data->dest+data->blocksize*data->blocks);
20086cc4:	e0bfff17 	ldw	r2,-4(fp)
20086cc8:	11400017 	ldw	r5,0(r2)
20086ccc:	e0bfff17 	ldw	r2,-4(fp)
20086cd0:	10c00017 	ldw	r3,0(r2)
20086cd4:	e0bfff17 	ldw	r2,-4(fp)
20086cd8:	11000317 	ldw	r4,12(r2)
20086cdc:	e0bfff17 	ldw	r2,-4(fp)
20086ce0:	10800217 	ldw	r2,8(r2)
20086ce4:	2085383a 	mul	r2,r4,r2
20086ce8:	1885883a 	add	r2,r3,r2
20086cec:	2809883a 	mov	r4,r5
20086cf0:	100b883a 	mov	r5,r2
20086cf4:	00868b80 	call	200868b8 <flush_dcache_range>
		ocsdc_write(dev, OCSDC_DST_SRC_ADDR, (uint32_t)data->dest);
20086cf8:	e0bfff17 	ldw	r2,-4(fp)
20086cfc:	10800017 	ldw	r2,0(r2)
20086d00:	e13ffd17 	ldw	r4,-12(fp)
20086d04:	01401804 	movi	r5,96
20086d08:	100d883a 	mov	r6,r2
20086d0c:	00869400 	call	20086940 <ocsdc_write>
20086d10:	00001306 	br	20086d60 <ocsdc_setup_data_xfer+0xc8>
	}
	else {
		flush_dcache_range((void *)data->src, (void *)data->src+data->blocksize*data->blocks);
20086d14:	e0bfff17 	ldw	r2,-4(fp)
20086d18:	11400017 	ldw	r5,0(r2)
20086d1c:	e0bfff17 	ldw	r2,-4(fp)
20086d20:	10c00017 	ldw	r3,0(r2)
20086d24:	e0bfff17 	ldw	r2,-4(fp)
20086d28:	11000317 	ldw	r4,12(r2)
20086d2c:	e0bfff17 	ldw	r2,-4(fp)
20086d30:	10800217 	ldw	r2,8(r2)
20086d34:	2085383a 	mul	r2,r4,r2
20086d38:	1885883a 	add	r2,r3,r2
20086d3c:	2809883a 	mov	r4,r5
20086d40:	100b883a 	mov	r5,r2
20086d44:	00868b80 	call	200868b8 <flush_dcache_range>
		ocsdc_write(dev, OCSDC_DST_SRC_ADDR, (uint32_t)data->src);
20086d48:	e0bfff17 	ldw	r2,-4(fp)
20086d4c:	10800017 	ldw	r2,0(r2)
20086d50:	e13ffd17 	ldw	r4,-12(fp)
20086d54:	01401804 	movi	r5,96
20086d58:	100d883a 	mov	r6,r2
20086d5c:	00869400 	call	20086940 <ocsdc_write>
	}
	ocsdc_write(dev, OCSDC_BLOCK_SIZE, data->blocksize);
20086d60:	e0bfff17 	ldw	r2,-4(fp)
20086d64:	10800317 	ldw	r2,12(r2)
20086d68:	e13ffd17 	ldw	r4,-12(fp)
20086d6c:	01401104 	movi	r5,68
20086d70:	100d883a 	mov	r6,r2
20086d74:	00869400 	call	20086940 <ocsdc_write>
	ocsdc_write(dev, OCSDC_BLOCK_COUNT, data->blocks-1);
20086d78:	e0bfff17 	ldw	r2,-4(fp)
20086d7c:	10800217 	ldw	r2,8(r2)
20086d80:	10bfffc4 	addi	r2,r2,-1
20086d84:	e13ffd17 	ldw	r4,-12(fp)
20086d88:	01401204 	movi	r5,72
20086d8c:	100d883a 	mov	r6,r2
20086d90:	00869400 	call	20086940 <ocsdc_write>

	//printf("ocsdc_setup_read: addr: %x\n", (uint32_t)data->dest);

}
20086d94:	e037883a 	mov	sp,fp
20086d98:	dfc00117 	ldw	ra,4(sp)
20086d9c:	df000017 	ldw	fp,0(sp)
20086da0:	dec00204 	addi	sp,sp,8
20086da4:	f800283a 	ret

20086da8 <ocsdc_send_cmd>:

static int ocsdc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd, struct mmc_data *data)
{
20086da8:	defff804 	addi	sp,sp,-32
20086dac:	dfc00715 	stw	ra,28(sp)
20086db0:	df000615 	stw	fp,24(sp)
20086db4:	df000604 	addi	fp,sp,24
20086db8:	e13ffd15 	stw	r4,-12(fp)
20086dbc:	e17ffe15 	stw	r5,-8(fp)
20086dc0:	e1bfff15 	stw	r6,-4(fp)
	struct ocsdc * dev = mmc->priv;
20086dc4:	e0bffd17 	ldw	r2,-12(fp)
20086dc8:	10800817 	ldw	r2,32(r2)
20086dcc:	e0bffb15 	stw	r2,-20(fp)

	int command = (cmd->cmdidx << 8);
20086dd0:	e0bffe17 	ldw	r2,-8(fp)
20086dd4:	1080000b 	ldhu	r2,0(r2)
20086dd8:	10bfffcc 	andi	r2,r2,65535
20086ddc:	1004923a 	slli	r2,r2,8
20086de0:	e0bffa15 	stw	r2,-24(fp)
	if (cmd->resp_type & MMC_RSP_PRESENT) {
20086de4:	e0bffe17 	ldw	r2,-8(fp)
20086de8:	10800117 	ldw	r2,4(r2)
20086dec:	1080004c 	andi	r2,r2,1
20086df0:	10000b26 	beq	r2,zero,20086e20 <ocsdc_send_cmd+0x78>
		if (cmd->resp_type & MMC_RSP_136)
20086df4:	e0bffe17 	ldw	r2,-8(fp)
20086df8:	10800117 	ldw	r2,4(r2)
20086dfc:	1080008c 	andi	r2,r2,2
20086e00:	10000426 	beq	r2,zero,20086e14 <ocsdc_send_cmd+0x6c>
			command |= 2;
20086e04:	e0bffa17 	ldw	r2,-24(fp)
20086e08:	10800094 	ori	r2,r2,2
20086e0c:	e0bffa15 	stw	r2,-24(fp)
20086e10:	00000306 	br	20086e20 <ocsdc_send_cmd+0x78>
		else {
			command |= 1;
20086e14:	e0bffa17 	ldw	r2,-24(fp)
20086e18:	10800054 	ori	r2,r2,1
20086e1c:	e0bffa15 	stw	r2,-24(fp)
		}
	}
	if (cmd->resp_type & MMC_RSP_BUSY)
20086e20:	e0bffe17 	ldw	r2,-8(fp)
20086e24:	10800117 	ldw	r2,4(r2)
20086e28:	1080020c 	andi	r2,r2,8
20086e2c:	10000326 	beq	r2,zero,20086e3c <ocsdc_send_cmd+0x94>
		command |= (1 << 2);
20086e30:	e0bffa17 	ldw	r2,-24(fp)
20086e34:	10800114 	ori	r2,r2,4
20086e38:	e0bffa15 	stw	r2,-24(fp)
	if (cmd->resp_type & MMC_RSP_CRC)
20086e3c:	e0bffe17 	ldw	r2,-8(fp)
20086e40:	10800117 	ldw	r2,4(r2)
20086e44:	1080010c 	andi	r2,r2,4
20086e48:	10000326 	beq	r2,zero,20086e58 <ocsdc_send_cmd+0xb0>
		command |= (1 << 3);
20086e4c:	e0bffa17 	ldw	r2,-24(fp)
20086e50:	10800214 	ori	r2,r2,8
20086e54:	e0bffa15 	stw	r2,-24(fp)
	if (cmd->resp_type & MMC_RSP_OPCODE)
20086e58:	e0bffe17 	ldw	r2,-8(fp)
20086e5c:	10800117 	ldw	r2,4(r2)
20086e60:	1080040c 	andi	r2,r2,16
20086e64:	10000326 	beq	r2,zero,20086e74 <ocsdc_send_cmd+0xcc>
		command |= (1 << 4);
20086e68:	e0bffa17 	ldw	r2,-24(fp)
20086e6c:	10800414 	ori	r2,r2,16
20086e70:	e0bffa15 	stw	r2,-24(fp)

	if (data && ((data->flags & MMC_DATA_READ) || ((data->flags & MMC_DATA_WRITE))) && data->blocks) {
20086e74:	e0bfff17 	ldw	r2,-4(fp)
20086e78:	10001d26 	beq	r2,zero,20086ef0 <ocsdc_send_cmd+0x148>
20086e7c:	e0bfff17 	ldw	r2,-4(fp)
20086e80:	10800117 	ldw	r2,4(r2)
20086e84:	1080004c 	andi	r2,r2,1
20086e88:	1000041e 	bne	r2,zero,20086e9c <ocsdc_send_cmd+0xf4>
20086e8c:	e0bfff17 	ldw	r2,-4(fp)
20086e90:	10800117 	ldw	r2,4(r2)
20086e94:	1080008c 	andi	r2,r2,2
20086e98:	10001526 	beq	r2,zero,20086ef0 <ocsdc_send_cmd+0x148>
20086e9c:	e0bfff17 	ldw	r2,-4(fp)
20086ea0:	10800217 	ldw	r2,8(r2)
20086ea4:	10001226 	beq	r2,zero,20086ef0 <ocsdc_send_cmd+0x148>
		if (data->flags & MMC_DATA_READ)
20086ea8:	e0bfff17 	ldw	r2,-4(fp)
20086eac:	10800117 	ldw	r2,4(r2)
20086eb0:	1080004c 	andi	r2,r2,1
20086eb4:	10000326 	beq	r2,zero,20086ec4 <ocsdc_send_cmd+0x11c>
			command |= (1 << 5);
20086eb8:	e0bffa17 	ldw	r2,-24(fp)
20086ebc:	10800814 	ori	r2,r2,32
20086ec0:	e0bffa15 	stw	r2,-24(fp)
		if (data->flags & MMC_DATA_WRITE)
20086ec4:	e0bfff17 	ldw	r2,-4(fp)
20086ec8:	10800117 	ldw	r2,4(r2)
20086ecc:	1080008c 	andi	r2,r2,2
20086ed0:	10000326 	beq	r2,zero,20086ee0 <ocsdc_send_cmd+0x138>
			command |= (1 << 6);
20086ed4:	e0bffa17 	ldw	r2,-24(fp)
20086ed8:	10801014 	ori	r2,r2,64
20086edc:	e0bffa15 	stw	r2,-24(fp)
		ocsdc_setup_data_xfer(dev, cmd, data);
20086ee0:	e13ffb17 	ldw	r4,-20(fp)
20086ee4:	e17ffe17 	ldw	r5,-8(fp)
20086ee8:	e1bfff17 	ldw	r6,-4(fp)
20086eec:	0086c980 	call	20086c98 <ocsdc_setup_data_xfer>
	}

	OCSDC_PRINT(("ocsdc_send_cmd %04x\n\r", command));

	ocsdc_write(dev, OCSDC_COMMAND, command);
20086ef0:	e0bffa17 	ldw	r2,-24(fp)
20086ef4:	e13ffb17 	ldw	r4,-20(fp)
20086ef8:	01400104 	movi	r5,4
20086efc:	100d883a 	mov	r6,r2
20086f00:	00869400 	call	20086940 <ocsdc_write>
	ocsdc_write(dev, OCSDC_ARGUMENT, cmd->cmdarg);
20086f04:	e0bffe17 	ldw	r2,-8(fp)
20086f08:	10800217 	ldw	r2,8(r2)
20086f0c:	e13ffb17 	ldw	r4,-20(fp)
20086f10:	000b883a 	mov	r5,zero
20086f14:	100d883a 	mov	r6,r2
20086f18:	00869400 	call	20086940 <ocsdc_write>

	if (ocsdc_finish(dev, cmd) < 0) return -1;
20086f1c:	e13ffb17 	ldw	r4,-20(fp)
20086f20:	e17ffe17 	ldw	r5,-8(fp)
20086f24:	0086b280 	call	20086b28 <ocsdc_finish>
20086f28:	1000020e 	bge	r2,zero,20086f34 <ocsdc_send_cmd+0x18c>
20086f2c:	00bfffc4 	movi	r2,-1
20086f30:	00000b06 	br	20086f60 <ocsdc_send_cmd+0x1b8>
	if (data && data->blocks) {
20086f34:	e0bfff17 	ldw	r2,-4(fp)
20086f38:	10000826 	beq	r2,zero,20086f5c <ocsdc_send_cmd+0x1b4>
20086f3c:	e0bfff17 	ldw	r2,-4(fp)
20086f40:	10800217 	ldw	r2,8(r2)
20086f44:	10000526 	beq	r2,zero,20086f5c <ocsdc_send_cmd+0x1b4>
		bool ret = ocsdc_data_finish(dev);
20086f48:	e13ffb17 	ldw	r4,-20(fp)
20086f4c:	0086c2c0 	call	20086c2c <ocsdc_data_finish>
20086f50:	e0bffc15 	stw	r2,-16(fp)

		return ret;
20086f54:	e0bffc17 	ldw	r2,-16(fp)
20086f58:	00000106 	br	20086f60 <ocsdc_send_cmd+0x1b8>
	}
	else return 0;
20086f5c:	0005883a 	mov	r2,zero
}
20086f60:	e037883a 	mov	sp,fp
20086f64:	dfc00117 	ldw	ra,4(sp)
20086f68:	df000017 	ldw	fp,0(sp)
20086f6c:	dec00204 	addi	sp,sp,8
20086f70:	f800283a 	ret

20086f74 <ocsdc_init>:

/* Initialize ocsdc controller */
static int ocsdc_init(struct mmc *mmc)
{
20086f74:	defffc04 	addi	sp,sp,-16
20086f78:	dfc00315 	stw	ra,12(sp)
20086f7c:	df000215 	stw	fp,8(sp)
20086f80:	df000204 	addi	fp,sp,8
20086f84:	e13fff15 	stw	r4,-4(fp)
	struct ocsdc * dev = mmc->priv;
20086f88:	e0bfff17 	ldw	r2,-4(fp)
20086f8c:	10800817 	ldw	r2,32(r2)
20086f90:	e0bffe15 	stw	r2,-8(fp)

	//set timeout
	ocsdc_write(dev, OCSDC_TIMEOUT, 0x7FFF);
20086f94:	e13ffe17 	ldw	r4,-8(fp)
20086f98:	01400804 	movi	r5,32
20086f9c:	019fffc4 	movi	r6,32767
20086fa0:	00869400 	call	20086940 <ocsdc_write>
	//disable all interrupts
	ocsdc_write(dev, OCSDC_CMD_INT_ENABLE, 0);
20086fa4:	e13ffe17 	ldw	r4,-8(fp)
20086fa8:	01400e04 	movi	r5,56
20086fac:	000d883a 	mov	r6,zero
20086fb0:	00869400 	call	20086940 <ocsdc_write>
	ocsdc_write(dev, OCSDC_DAT_INT_ENABLE, 0);
20086fb4:	e13ffe17 	ldw	r4,-8(fp)
20086fb8:	01401004 	movi	r5,64
20086fbc:	000d883a 	mov	r6,zero
20086fc0:	00869400 	call	20086940 <ocsdc_write>
	//clear all interrupts
	ocsdc_write(dev, OCSDC_CMD_INT_STATUS, 0);
20086fc4:	e13ffe17 	ldw	r4,-8(fp)
20086fc8:	01400d04 	movi	r5,52
20086fcc:	000d883a 	mov	r6,zero
20086fd0:	00869400 	call	20086940 <ocsdc_write>
	ocsdc_write(dev, OCSDC_DAT_INT_STATUS, 0);
20086fd4:	e13ffe17 	ldw	r4,-8(fp)
20086fd8:	01400f04 	movi	r5,60
20086fdc:	000d883a 	mov	r6,zero
20086fe0:	00869400 	call	20086940 <ocsdc_write>
	//set clock to maximum (devide by 2)
	ocsdc_set_clock(dev, dev->clk_freq/2);
20086fe4:	e0bffe17 	ldw	r2,-8(fp)
20086fe8:	10800117 	ldw	r2,4(r2)
20086fec:	1006d7fa 	srli	r3,r2,31
20086ff0:	1885883a 	add	r2,r3,r2
20086ff4:	1005d07a 	srai	r2,r2,1
20086ff8:	e13ffe17 	ldw	r4,-8(fp)
20086ffc:	100b883a 	mov	r5,r2
20087000:	00869f80 	call	200869f8 <ocsdc_set_clock>

	return 0;
20087004:	0005883a 	mov	r2,zero
}
20087008:	e037883a 	mov	sp,fp
2008700c:	dfc00117 	ldw	ra,4(sp)
20087010:	df000017 	ldw	fp,0(sp)
20087014:	dec00204 	addi	sp,sp,8
20087018:	f800283a 	ret

2008701c <ocsdc_set_ios>:

static void ocsdc_set_ios(struct mmc *mmc)
{
2008701c:	defffd04 	addi	sp,sp,-12
20087020:	dfc00215 	stw	ra,8(sp)
20087024:	df000115 	stw	fp,4(sp)
20087028:	df000104 	addi	fp,sp,4
2008702c:	e13fff15 	stw	r4,-4(fp)
	/* Support only 4 bit if */
	ocsdc_set_buswidth(mmc->priv, mmc->bus_width);
20087030:	e0bfff17 	ldw	r2,-4(fp)
20087034:	10c00817 	ldw	r3,32(r2)
20087038:	e0bfff17 	ldw	r2,-4(fp)
2008703c:	10800f17 	ldw	r2,60(r2)
20087040:	1809883a 	mov	r4,r3
20087044:	100b883a 	mov	r5,r2
20087048:	00869900 	call	20086990 <ocsdc_set_buswidth>

	/* Set clock speed */
	if (mmc->clock)
2008704c:	e0bfff17 	ldw	r2,-4(fp)
20087050:	10801017 	ldw	r2,64(r2)
20087054:	10000726 	beq	r2,zero,20087074 <ocsdc_set_ios+0x58>
		ocsdc_set_clock(mmc->priv, mmc->clock);
20087058:	e0bfff17 	ldw	r2,-4(fp)
2008705c:	10c00817 	ldw	r3,32(r2)
20087060:	e0bfff17 	ldw	r2,-4(fp)
20087064:	10801017 	ldw	r2,64(r2)
20087068:	1809883a 	mov	r4,r3
2008706c:	100b883a 	mov	r5,r2
20087070:	00869f80 	call	200869f8 <ocsdc_set_clock>
}
20087074:	e037883a 	mov	sp,fp
20087078:	dfc00117 	ldw	ra,4(sp)
2008707c:	df000017 	ldw	fp,0(sp)
20087080:	dec00204 	addi	sp,sp,8
20087084:	f800283a 	ret

20087088 <ocsdc_mmc_init>:

struct mmc * ocsdc_mmc_init(int base_addr, int clk_freq)
{
20087088:	defffa04 	addi	sp,sp,-24
2008708c:	dfc00515 	stw	ra,20(sp)
20087090:	df000415 	stw	fp,16(sp)
20087094:	df000404 	addi	fp,sp,16
20087098:	e13ffe15 	stw	r4,-8(fp)
2008709c:	e17fff15 	stw	r5,-4(fp)
	struct mmc *mmc;
	struct ocsdc *priv;

	mmc = malloc(sizeof(struct mmc));
200870a0:	01002904 	movi	r4,164
200870a4:	008b5500 	call	2008b550 <malloc>
200870a8:	e0bffc15 	stw	r2,-16(fp)
	if (!mmc) goto MMC_ALLOC;
200870ac:	e0bffc17 	ldw	r2,-16(fp)
200870b0:	1000011e 	bne	r2,zero,200870b8 <ocsdc_mmc_init+0x30>
200870b4:	00004f06 	br	200871f4 <ocsdc_mmc_init+0x16c>
	priv = malloc(sizeof(struct ocsdc));
200870b8:	01000204 	movi	r4,8
200870bc:	008b5500 	call	2008b550 <malloc>
200870c0:	e0bffd15 	stw	r2,-12(fp)
	if (!priv) goto OCSDC_ALLOC;
200870c4:	e0bffd17 	ldw	r2,-12(fp)
200870c8:	1000041e 	bne	r2,zero,200870dc <ocsdc_mmc_init+0x54>
200870cc:	0001883a 	nop
	mmc->b_max = 256;

	return mmc;

OCSDC_ALLOC:
	free(mmc);
200870d0:	e13ffc17 	ldw	r4,-16(fp)
200870d4:	008b5640 	call	2008b564 <free>
200870d8:	00004606 	br	200871f4 <ocsdc_mmc_init+0x16c>
	mmc = malloc(sizeof(struct mmc));
	if (!mmc) goto MMC_ALLOC;
	priv = malloc(sizeof(struct ocsdc));
	if (!priv) goto OCSDC_ALLOC;

	memset(mmc, 0, sizeof(struct mmc));
200870dc:	e13ffc17 	ldw	r4,-16(fp)
200870e0:	000b883a 	mov	r5,zero
200870e4:	01802904 	movi	r6,164
200870e8:	008bed40 	call	2008bed4 <memset>
	memset(priv, 0, sizeof(struct ocsdc));
200870ec:	e13ffd17 	ldw	r4,-12(fp)
200870f0:	000b883a 	mov	r5,zero
200870f4:	01800204 	movi	r6,8
200870f8:	008bed40 	call	2008bed4 <memset>

	priv->iobase = base_addr;
200870fc:	e0bffd17 	ldw	r2,-12(fp)
20087100:	e0fffe17 	ldw	r3,-8(fp)
20087104:	10c00015 	stw	r3,0(r2)
	priv->clk_freq = clk_freq;
20087108:	e0bffd17 	ldw	r2,-12(fp)
2008710c:	e0ffff17 	ldw	r3,-4(fp)
20087110:	10c00115 	stw	r3,4(r2)

	sprintf(mmc->name, "ocsdc");
20087114:	e0bffc17 	ldw	r2,-16(fp)
20087118:	00c01bc4 	movi	r3,111
2008711c:	10c00005 	stb	r3,0(r2)
20087120:	00c018c4 	movi	r3,99
20087124:	10c00045 	stb	r3,1(r2)
20087128:	00c01cc4 	movi	r3,115
2008712c:	10c00085 	stb	r3,2(r2)
20087130:	00c01904 	movi	r3,100
20087134:	10c000c5 	stb	r3,3(r2)
20087138:	00c018c4 	movi	r3,99
2008713c:	10c00105 	stb	r3,4(r2)
20087140:	10000145 	stb	zero,5(r2)
	mmc->priv = priv;
20087144:	e0bffc17 	ldw	r2,-16(fp)
20087148:	e0fffd17 	ldw	r3,-12(fp)
2008714c:	10c00815 	stw	r3,32(r2)
	mmc->send_cmd = ocsdc_send_cmd;
20087150:	e0fffc17 	ldw	r3,-16(fp)
20087154:	00880234 	movhi	r2,8200
20087158:	109b6a04 	addi	r2,r2,28072
2008715c:	18802415 	stw	r2,144(r3)
	mmc->set_ios = ocsdc_set_ios;
20087160:	e0fffc17 	ldw	r3,-16(fp)
20087164:	00880234 	movhi	r2,8200
20087168:	109c0704 	addi	r2,r2,28700
2008716c:	18802515 	stw	r2,148(r3)
	mmc->init = ocsdc_init;
20087170:	e0fffc17 	ldw	r3,-16(fp)
20087174:	00880234 	movhi	r2,8200
20087178:	109bdd04 	addi	r2,r2,28532
2008717c:	18802615 	stw	r2,152(r3)
	mmc->getcd = NULL;
20087180:	e0bffc17 	ldw	r2,-16(fp)
20087184:	10002715 	stw	zero,156(r2)

	mmc->f_min = priv->clk_freq/6; /*maximum clock division 64 */
20087188:	e0bffd17 	ldw	r2,-12(fp)
2008718c:	10800117 	ldw	r2,4(r2)
20087190:	1009883a 	mov	r4,r2
20087194:	01400184 	movi	r5,6
20087198:	00889c40 	call	200889c4 <__divsi3>
2008719c:	1007883a 	mov	r3,r2
200871a0:	e0bffc17 	ldw	r2,-16(fp)
200871a4:	10c00c15 	stw	r3,48(r2)
	mmc->f_max = priv->clk_freq;
200871a8:	e0bffd17 	ldw	r2,-12(fp)
200871ac:	10800117 	ldw	r2,4(r2)
200871b0:	1007883a 	mov	r3,r2
200871b4:	e0bffc17 	ldw	r2,-16(fp)
200871b8:	10c00d15 	stw	r3,52(r2)
	mmc->voltages = MMC_VDD_32_33 | MMC_VDD_33_34;
200871bc:	e0bffc17 	ldw	r2,-16(fp)
200871c0:	00c00c34 	movhi	r3,48
200871c4:	10c00915 	stw	r3,36(r2)
	mmc->host_caps = MMC_MODE_4BIT;
200871c8:	e0bffc17 	ldw	r2,-16(fp)
200871cc:	00c04004 	movi	r3,256
200871d0:	10c01215 	stw	r3,72(r2)
	mmc->host_caps = MMC_MODE_HS | MMC_MODE_HS_52MHz | MMC_MODE_4BIT;
200871d4:	e0bffc17 	ldw	r2,-16(fp)
200871d8:	00c04444 	movi	r3,273
200871dc:	10c01215 	stw	r3,72(r2)

	mmc->b_max = 256;
200871e0:	e0bffc17 	ldw	r2,-16(fp)
200871e4:	00c04004 	movi	r3,256
200871e8:	10c02815 	stw	r3,160(r2)

	return mmc;
200871ec:	e0bffc17 	ldw	r2,-16(fp)
200871f0:	00000106 	br	200871f8 <ocsdc_mmc_init+0x170>

OCSDC_ALLOC:
	free(mmc);
MMC_ALLOC:
	return NULL;
200871f4:	0005883a 	mov	r2,zero
}
200871f8:	e037883a 	mov	sp,fp
200871fc:	dfc00117 	ldw	ra,4(sp)
20087200:	df000017 	ldw	fp,0(sp)
20087204:	dec00204 	addi	sp,sp,8
20087208:	f800283a 	ret

2008720c <SDLIB_Init>:

#define DEBUG_SDCARD_HEX //DEBUG_HEX_PRINTF

struct mmc * sd_drv;
//-------------------------------------------------------------------------
bool SDLIB_Init(int base_addr) {
2008720c:	defffc04 	addi	sp,sp,-16
20087210:	dfc00315 	stw	ra,12(sp)
20087214:	df000215 	stw	fp,8(sp)
20087218:	df000204 	addi	fp,sp,8
2008721c:	e13fff15 	stw	r4,-4(fp)
	//---------------------------------
	//init ocsdc driver
	if (!sd_drv) {
20087220:	d0a01e17 	ldw	r2,-32648(gp)
20087224:	1000091e 	bne	r2,zero,2008724c <SDLIB_Init+0x40>
		sd_drv = ocsdc_mmc_init(base_addr, 50000000);
20087228:	e13fff17 	ldw	r4,-4(fp)
2008722c:	0140bef4 	movhi	r5,763
20087230:	297c2004 	addi	r5,r5,-3968
20087234:	00870880 	call	20087088 <ocsdc_mmc_init>
20087238:	d0a01e15 	stw	r2,-32648(gp)
		if(!sd_drv){
2008723c:	d0a01e17 	ldw	r2,-32648(gp)
20087240:	1000021e 	bne	r2,zero,2008724c <SDLIB_Init+0x40>
			SDCARD_DEBUG(("ocsdc_mmc_init failed\n\r"));
			return FALSE;
20087244:	0005883a 	mov	r2,zero
20087248:	00001106 	br	20087290 <SDLIB_Init+0x84>
		}
		SDCARD_DEBUG(("ocsdc_mmc_init success\n\r"));
	}

	if (sd_drv->has_init)
2008724c:	d0a01e17 	ldw	r2,-32648(gp)
20087250:	10800b17 	ldw	r2,44(r2)
20087254:	10000226 	beq	r2,zero,20087260 <SDLIB_Init+0x54>
		return TRUE;
20087258:	00800044 	movi	r2,1
2008725c:	00000c06 	br	20087290 <SDLIB_Init+0x84>
	int err = mmc_init(sd_drv);
20087260:	d0a01e17 	ldw	r2,-32648(gp)
20087264:	1009883a 	mov	r4,r2
20087268:	00864640 	call	20086464 <mmc_init>
2008726c:	e0bffe15 	stw	r2,-8(fp)
	if (err != 0 || sd_drv->has_init == 0) {
20087270:	e0bffe17 	ldw	r2,-8(fp)
20087274:	1000031e 	bne	r2,zero,20087284 <SDLIB_Init+0x78>
20087278:	d0a01e17 	ldw	r2,-32648(gp)
2008727c:	10800b17 	ldw	r2,44(r2)
20087280:	1000021e 	bne	r2,zero,2008728c <SDLIB_Init+0x80>
		SDCARD_DEBUG(("SDLIB_Init failure\r\n"));
		return FALSE;
20087284:	0005883a 	mov	r2,zero
20087288:	00000106 	br	20087290 <SDLIB_Init+0x84>

#ifdef DEBUG_SDCARD
	print_mmcinfo(sd_drv);
#endif

	return TRUE;
2008728c:	00800044 	movi	r2,1
}
20087290:	e037883a 	mov	sp,fp
20087294:	dfc00117 	ldw	ra,4(sp)
20087298:	df000017 	ldw	fp,0(sp)
2008729c:	dec00204 	addi	sp,sp,8
200872a0:	f800283a 	ret

200872a4 <SDLIB_ReadBlock512>:

bool SDLIB_ReadBlock512(alt_u32 block_number, alt_u8 *buff) {
200872a4:	defffc04 	addi	sp,sp,-16
200872a8:	dfc00315 	stw	ra,12(sp)
200872ac:	df000215 	stw	fp,8(sp)
200872b0:	df000204 	addi	fp,sp,8
200872b4:	e13ffe15 	stw	r4,-8(fp)
200872b8:	e17fff15 	stw	r5,-4(fp)
	//SDCARD_DEBUG(("%d\n", block_number));
	if (mmc_bread(sd_drv, block_number, 1, buff) == 0) {
200872bc:	d0a01e17 	ldw	r2,-32648(gp)
200872c0:	1009883a 	mov	r4,r2
200872c4:	e17ffe17 	ldw	r5,-8(fp)
200872c8:	01800044 	movi	r6,1
200872cc:	e1ffff17 	ldw	r7,-4(fp)
200872d0:	008657c0 	call	2008657c <mmc_bread>
200872d4:	1000021e 	bne	r2,zero,200872e0 <SDLIB_ReadBlock512+0x3c>
		SDCARD_DEBUG(("mmc_bread failed\n\r"));
		return FALSE;
200872d8:	0005883a 	mov	r2,zero
200872dc:	00000106 	br	200872e4 <SDLIB_ReadBlock512+0x40>
	}

	return TRUE;
200872e0:	00800044 	movi	r2,1
}
200872e4:	e037883a 	mov	sp,fp
200872e8:	dfc00117 	ldw	ra,4(sp)
200872ec:	df000017 	ldw	fp,0(sp)
200872f0:	dec00204 	addi	sp,sp,8
200872f4:	f800283a 	ret

200872f8 <SDLIB_ReadBlocks>:

bool SDLIB_ReadBlocks(alt_u32 block_number, alt_u32 n, alt_u8 *buff) {
200872f8:	defffb04 	addi	sp,sp,-20
200872fc:	dfc00415 	stw	ra,16(sp)
20087300:	df000315 	stw	fp,12(sp)
20087304:	df000304 	addi	fp,sp,12
20087308:	e13ffd15 	stw	r4,-12(fp)
2008730c:	e17ffe15 	stw	r5,-8(fp)
20087310:	e1bfff15 	stw	r6,-4(fp)
	//SDCARD_DEBUG(("%d\n", block_number));
	if (mmc_bread(sd_drv, block_number, n, buff) == 0) {
20087314:	d0a01e17 	ldw	r2,-32648(gp)
20087318:	1009883a 	mov	r4,r2
2008731c:	e17ffd17 	ldw	r5,-12(fp)
20087320:	e1bffe17 	ldw	r6,-8(fp)
20087324:	e1ffff17 	ldw	r7,-4(fp)
20087328:	008657c0 	call	2008657c <mmc_bread>
2008732c:	1000021e 	bne	r2,zero,20087338 <SDLIB_ReadBlocks+0x40>
		SDCARD_DEBUG(("mmc_bread failed\n\r"));
		return FALSE;
20087330:	0005883a 	mov	r2,zero
20087334:	00000106 	br	2008733c <SDLIB_ReadBlocks+0x44>
	}

	return TRUE;
20087338:	00800044 	movi	r2,1
}
2008733c:	e037883a 	mov	sp,fp
20087340:	dfc00117 	ldw	ra,4(sp)
20087344:	df000017 	ldw	fp,0(sp)
20087348:	dec00204 	addi	sp,sp,8
2008734c:	f800283a 	ret

20087350 <ece423_video_display_init>:
 *           the mSGDMA.
 *
 *  Returns: Ptr to  display controller structure, or NULL on failure.
 ******************************************************************/
ece423_video_display* ece423_video_display_init(char* sgdma_name, int width,
		int height, int num_buffers) {
20087350:	defff304 	addi	sp,sp,-52
20087354:	dfc00c15 	stw	ra,48(sp)
20087358:	df000b15 	stw	fp,44(sp)
2008735c:	df000b04 	addi	fp,sp,44
20087360:	e13ffc15 	stw	r4,-16(fp)
20087364:	e17ffd15 	stw	r5,-12(fp)
20087368:	e1bffe15 	stw	r6,-8(fp)
2008736c:	e1ffff15 	stw	r7,-4(fp)

	if (ece423_init_hdmi()) {
20087370:	0087a480 	call	20087a48 <ece423_init_hdmi>
20087374:	10000526 	beq	r2,zero,2008738c <ece423_video_display_init+0x3c>
		printf("Failed to initiate the HDMI chip!\n");
20087378:	01000034 	movhi	r4,0
2008737c:	21011d04 	addi	r4,r4,1140
20087380:	008c1280 	call	2008c128 <puts>
		return 0;
20087384:	0005883a 	mov	r2,zero
20087388:	00009506 	br	200875e0 <ece423_video_display_init+0x290>
	unsigned int bytes_per_pixel, bytes_per_frame, descriptors_per_frame, i;

	alt_msgdma_dev* pVid_DMA_CSR_Dev; // Ptr to mSGDMA Cont & Status Device

	// PreCalc Values
	bytes_per_pixel = 4;
2008738c:	00800104 	movi	r2,4
20087390:	e0bff715 	stw	r2,-36(fp)
	bytes_per_frame = ((width * height) * bytes_per_pixel);
20087394:	e0fffd17 	ldw	r3,-12(fp)
20087398:	e0bffe17 	ldw	r2,-8(fp)
2008739c:	1885383a 	mul	r2,r3,r2
200873a0:	1007883a 	mov	r3,r2
200873a4:	e0bff717 	ldw	r2,-36(fp)
200873a8:	1885383a 	mul	r2,r3,r2
200873ac:	e0bff815 	stw	r2,-32(fp)

	descriptors_per_frame = 1;
200873b0:	00800044 	movi	r2,1
200873b4:	e0bff915 	stw	r2,-28(fp)

	// DON'T EXCEED MAX Frame Bufs
	if (num_buffers > ECE423_VIDEO_DISPLAY_MAX_BUFFERS) {
200873b8:	e0bfff17 	ldw	r2,-4(fp)
200873bc:	10800690 	cmplti	r2,r2,26
200873c0:	1000061e 	bne	r2,zero,200873dc <ece423_video_display_init+0x8c>
		printf("The required number of buffers exceeds the max!\n");
200873c4:	01000034 	movhi	r4,0
200873c8:	21012604 	addi	r4,r4,1176
200873cc:	008c1280 	call	2008c128 <puts>
		num_buffers = ECE423_VIDEO_DISPLAY_MAX_BUFFERS;
200873d0:	00800644 	movi	r2,25
200873d4:	e0bfff15 	stw	r2,-4(fp)
200873d8:	00000806 	br	200873fc <ece423_video_display_init+0xac>
	} else if (num_buffers < 2){
200873dc:	e0bfff17 	ldw	r2,-4(fp)
200873e0:	10800088 	cmpgei	r2,r2,2
200873e4:	1000051e 	bne	r2,zero,200873fc <ece423_video_display_init+0xac>
		printf("The number of buffers must be > 2!\n");
200873e8:	01000034 	movhi	r4,0
200873ec:	21013204 	addi	r4,r4,1224
200873f0:	008c1280 	call	2008c128 <puts>
		num_buffers = 2;
200873f4:	00800084 	movi	r2,2
200873f8:	e0bfff15 	stw	r2,-4(fp)
	}

	// malloc display struct
	display = (ece423_video_display*) malloc(sizeof(ece423_video_display));
200873fc:	01002204 	movi	r4,136
20087400:	008b5500 	call	2008b550 <malloc>
20087404:	e0bffa15 	stw	r2,-24(fp)
	if (!display) {
20087408:	e0bffa17 	ldw	r2,-24(fp)
2008740c:	1000021e 	bne	r2,zero,20087418 <ece423_video_display_init+0xc8>
		return NULL;
20087410:	0005883a 	mov	r2,zero
20087414:	00007206 	br	200875e0 <ece423_video_display_init+0x290>
	}

	// Init display struct
	display->width = width;
20087418:	e0bffa17 	ldw	r2,-24(fp)
2008741c:	e0fffd17 	ldw	r3,-12(fp)
20087420:	10c01c15 	stw	r3,112(r2)
	display->height = height;
20087424:	e0bffa17 	ldw	r2,-24(fp)
20087428:	e0fffe17 	ldw	r3,-8(fp)
2008742c:	10c01d15 	stw	r3,116(r2)
	display->num_frame_buffers = num_buffers;
20087430:	e0bffa17 	ldw	r2,-24(fp)
20087434:	e0ffff17 	ldw	r3,-4(fp)
20087438:	10c02015 	stw	r3,128(r2)
	display->bytes_per_frame = bytes_per_frame;
2008743c:	e0fff817 	ldw	r3,-32(fp)
20087440:	e0bffa17 	ldw	r2,-24(fp)
20087444:	10c01f15 	stw	r3,124(r2)
	display->bytes_per_pixel = bytes_per_pixel;
20087448:	e0fff717 	ldw	r3,-36(fp)
2008744c:	e0bffa17 	ldw	r2,-24(fp)
20087450:	10c01e15 	stw	r3,120(r2)
	display->buffer_being_displayed = 0;
20087454:	e0bffa17 	ldw	r2,-24(fp)
20087458:	10001a15 	stw	zero,104(r2)
	display->buffer_being_written = (num_buffers > 1) ? 1 : 0; // Init iPrev_Wr_Buf MUST MATCH
2008745c:	e0bfff17 	ldw	r2,-4(fp)
20087460:	10800088 	cmpgei	r2,r2,2
20087464:	10c03fcc 	andi	r3,r2,255
20087468:	e0bffa17 	ldw	r2,-24(fp)
2008746c:	10c01b15 	stw	r3,108(r2)
	// See iPrev_Wr_Buf in ece423_video_display_buffer_is_available
	display->descriptors_per_frame = descriptors_per_frame;
20087470:	e0fff917 	ldw	r3,-28(fp)
20087474:	e0bffa17 	ldw	r2,-24(fp)
20087478:	10c02115 	stw	r3,132(r2)

	// malloc Frame and descriptor Bufs & SetUp Frame Buf Ptrs & Descriptor Ptrs
	if (ece423_video_display_allocate_buffers(display, bytes_per_frame,
2008747c:	e0bff817 	ldw	r2,-32(fp)
20087480:	e13ffa17 	ldw	r4,-24(fp)
20087484:	100b883a 	mov	r5,r2
20087488:	e1bfff17 	ldw	r6,-4(fp)
2008748c:	008789c0 	call	2008789c <ece423_video_display_allocate_buffers>
20087490:	10000226 	beq	r2,zero,2008749c <ece423_video_display_init+0x14c>
			num_buffers)) {
		return NULL;
20087494:	0005883a 	mov	r2,zero
20087498:	00005106 	br	200875e0 <ece423_video_display_init+0x290>
	}

	pVid_DMA_CSR_Dev = alt_msgdma_open(sgdma_name); // Pt to Cont & Status Dev
2008749c:	e13ffc17 	ldw	r4,-16(fp)
200874a0:	009cbb80 	call	2009cbb8 <alt_msgdma_open>
200874a4:	e0bffb15 	stw	r2,-20(fp)
	display->mSGDMA = pVid_DMA_CSR_Dev;
200874a8:	e0bffa17 	ldw	r2,-24(fp)
200874ac:	e0fffb17 	ldw	r3,-20(fp)
200874b0:	10c00015 	stw	r3,0(r2)
	if (pVid_DMA_CSR_Dev == NULL) {
200874b4:	e0bffb17 	ldw	r2,-20(fp)
200874b8:	1000051e 	bne	r2,zero,200874d0 <ece423_video_display_init+0x180>
		printf("ERROR ********* UNABLE to OPEN /dev/msgdma_csr\r\n");
200874bc:	01000034 	movhi	r4,0
200874c0:	21013b04 	addi	r4,r4,1260
200874c4:	008c1280 	call	2008c128 <puts>
		return NULL;
200874c8:	0005883a 	mov	r2,zero
200874cc:	00004406 	br	200875e0 <ece423_video_display_init+0x290>
	}

// Construct mSGDMA descriptors for each Frame Buf
	for (i = 0; i < num_buffers; i++) {
200874d0:	e03ff615 	stw	zero,-40(fp)
200874d4:	00001a06 	br	20087540 <ece423_video_display_init+0x1f0>
		alt_msgdma_construct_standard_mm_to_st_descriptor(pVid_DMA_CSR_Dev,
				display->buffer_ptrs[i]->desc_base,
200874d8:	e0fffa17 	ldw	r3,-24(fp)
200874dc:	e0bff617 	ldw	r2,-40(fp)
200874e0:	10800044 	addi	r2,r2,1
200874e4:	1085883a 	add	r2,r2,r2
200874e8:	1085883a 	add	r2,r2,r2
200874ec:	1885883a 	add	r2,r3,r2
200874f0:	10800017 	ldw	r2,0(r2)
		return NULL;
	}

// Construct mSGDMA descriptors for each Frame Buf
	for (i = 0; i < num_buffers; i++) {
		alt_msgdma_construct_standard_mm_to_st_descriptor(pVid_DMA_CSR_Dev,
200874f4:	11400017 	ldw	r5,0(r2)
				display->buffer_ptrs[i]->desc_base,
				(alt_u32 *) display->buffer_ptrs[i]->buffer, bytes_per_frame,
200874f8:	e0fffa17 	ldw	r3,-24(fp)
200874fc:	e0bff617 	ldw	r2,-40(fp)
20087500:	10800044 	addi	r2,r2,1
20087504:	1085883a 	add	r2,r2,r2
20087508:	1085883a 	add	r2,r2,r2
2008750c:	1885883a 	add	r2,r3,r2
20087510:	10800017 	ldw	r2,0(r2)
20087514:	10c00117 	ldw	r3,4(r2)
		return NULL;
	}

// Construct mSGDMA descriptors for each Frame Buf
	for (i = 0; i < num_buffers; i++) {
		alt_msgdma_construct_standard_mm_to_st_descriptor(pVid_DMA_CSR_Dev,
20087518:	00a00034 	movhi	r2,32768
2008751c:	1081c004 	addi	r2,r2,1792
20087520:	d8800015 	stw	r2,0(sp)
20087524:	e13ffb17 	ldw	r4,-20(fp)
20087528:	180d883a 	mov	r6,r3
2008752c:	e1fff817 	ldw	r7,-32(fp)
20087530:	009bc440 	call	2009bc44 <alt_msgdma_construct_standard_mm_to_st_descriptor>
		printf("ERROR ********* UNABLE to OPEN /dev/msgdma_csr\r\n");
		return NULL;
	}

// Construct mSGDMA descriptors for each Frame Buf
	for (i = 0; i < num_buffers; i++) {
20087534:	e0bff617 	ldw	r2,-40(fp)
20087538:	10800044 	addi	r2,r2,1
2008753c:	e0bff615 	stw	r2,-40(fp)
20087540:	e0bfff17 	ldw	r2,-4(fp)
20087544:	e0fff617 	ldw	r3,-40(fp)
20087548:	18bfe336 	bltu	r3,r2,200874d8 <__flash_rwdata_start+0xfffe8904>
				(alt_u32 *) display->buffer_ptrs[i]->buffer, bytes_per_frame,
				DESC_CONTROL);
	}

	// Clear all Frame Bufs to Black
	for (i = 0; i < num_buffers; i++) {
2008754c:	e03ff615 	stw	zero,-40(fp)
20087550:	00001106 	br	20087598 <ece423_video_display_init+0x248>
		memset((void*) (display->buffer_ptrs[i]->buffer),
20087554:	e0fffa17 	ldw	r3,-24(fp)
20087558:	e0bff617 	ldw	r2,-40(fp)
2008755c:	10800044 	addi	r2,r2,1
20087560:	1085883a 	add	r2,r2,r2
20087564:	1085883a 	add	r2,r2,r2
20087568:	1885883a 	add	r2,r3,r2
2008756c:	10800017 	ldw	r2,0(r2)
20087570:	10c00117 	ldw	r3,4(r2)
		ECE423_VIDEO_DISPLAY_BLACK_8, display->bytes_per_frame);
20087574:	e0bffa17 	ldw	r2,-24(fp)
20087578:	10801f17 	ldw	r2,124(r2)
				DESC_CONTROL);
	}

	// Clear all Frame Bufs to Black
	for (i = 0; i < num_buffers; i++) {
		memset((void*) (display->buffer_ptrs[i]->buffer),
2008757c:	1809883a 	mov	r4,r3
20087580:	000b883a 	mov	r5,zero
20087584:	100d883a 	mov	r6,r2
20087588:	008bed40 	call	2008bed4 <memset>
				(alt_u32 *) display->buffer_ptrs[i]->buffer, bytes_per_frame,
				DESC_CONTROL);
	}

	// Clear all Frame Bufs to Black
	for (i = 0; i < num_buffers; i++) {
2008758c:	e0bff617 	ldw	r2,-40(fp)
20087590:	10800044 	addi	r2,r2,1
20087594:	e0bff615 	stw	r2,-40(fp)
20087598:	e0bfff17 	ldw	r2,-4(fp)
2008759c:	e0fff617 	ldw	r3,-40(fp)
200875a0:	18bfec36 	bltu	r3,r2,20087554 <__flash_rwdata_start+0xfffe8980>
		memset((void*) (display->buffer_ptrs[i]->buffer),
		ECE423_VIDEO_DISPLAY_BLACK_8, display->bytes_per_frame);
	}

	// start the mSGDMA by giving it a Descriptor
	while (alt_msgdma_standard_descriptor_async_transfer(pVid_DMA_CSR_Dev,
200875a4:	0001883a 	nop
			display->buffer_ptrs[display->buffer_being_displayed]->desc_base)
200875a8:	e0bffa17 	ldw	r2,-24(fp)
200875ac:	10801a17 	ldw	r2,104(r2)
200875b0:	e0fffa17 	ldw	r3,-24(fp)
200875b4:	10800044 	addi	r2,r2,1
200875b8:	1085883a 	add	r2,r2,r2
200875bc:	1085883a 	add	r2,r2,r2
200875c0:	1885883a 	add	r2,r3,r2
200875c4:	10800017 	ldw	r2,0(r2)
		memset((void*) (display->buffer_ptrs[i]->buffer),
		ECE423_VIDEO_DISPLAY_BLACK_8, display->bytes_per_frame);
	}

	// start the mSGDMA by giving it a Descriptor
	while (alt_msgdma_standard_descriptor_async_transfer(pVid_DMA_CSR_Dev,
200875c8:	10800017 	ldw	r2,0(r2)
200875cc:	e13ffb17 	ldw	r4,-20(fp)
200875d0:	100b883a 	mov	r5,r2
200875d4:	009cdd00 	call	2009cdd0 <alt_msgdma_standard_descriptor_async_transfer>
200875d8:	103ff31e 	bne	r2,zero,200875a8 <__flash_rwdata_start+0xfffe89d4>
			display->buffer_ptrs[display->buffer_being_displayed]->desc_base)
			!= 0) {
	}  // Keep Trying until there is room to Transfer another Frame

	return (display);
200875dc:	e0bffa17 	ldw	r2,-24(fp)
}
200875e0:	e037883a 	mov	sp,fp
200875e4:	dfc00117 	ldw	ra,4(sp)
200875e8:	df000017 	ldw	fp,0(sp)
200875ec:	dec00204 	addi	sp,sp,8
200875f0:	f800283a 	ret

200875f4 <ece423_video_display_register_written_buffer>:
 *                 -----------------------------------------
 *
 *  This Registers Buf pointed to by buffer_being_written
 *
 ******************************************************************/
void ece423_video_display_register_written_buffer(ece423_video_display* display) {
200875f4:	defffd04 	addi	sp,sp,-12
200875f8:	dfc00215 	stw	ra,8(sp)
200875fc:	df000115 	stw	fp,4(sp)
20087600:	df000104 	addi	fp,sp,4
20087604:	e13fff15 	stw	r4,-4(fp)
	 * Note: The new buffer_being_written may NOT Yet be FREE
	 * So Call
	 * ece423_video_display_buffer_is_available
	 * to Check Before Drawing in it
	 */
	display->buffer_being_written = (display->buffer_being_written + 1)
20087608:	e0bfff17 	ldw	r2,-4(fp)
2008760c:	10801b17 	ldw	r2,108(r2)
20087610:	10c00044 	addi	r3,r2,1
			% display->num_frame_buffers;
20087614:	e0bfff17 	ldw	r2,-4(fp)
20087618:	10802017 	ldw	r2,128(r2)
2008761c:	1809883a 	mov	r4,r3
20087620:	100b883a 	mov	r5,r2
20087624:	0088a180 	call	20088a18 <__modsi3>
20087628:	1007883a 	mov	r3,r2
	 * Note: The new buffer_being_written may NOT Yet be FREE
	 * So Call
	 * ece423_video_display_buffer_is_available
	 * to Check Before Drawing in it
	 */
	display->buffer_being_written = (display->buffer_being_written + 1)
2008762c:	e0bfff17 	ldw	r2,-4(fp)
20087630:	10c01b15 	stw	r3,108(r2)
			% display->num_frame_buffers;
}
20087634:	e037883a 	mov	sp,fp
20087638:	dfc00117 	ldw	ra,4(sp)
2008763c:	df000017 	ldw	fp,0(sp)
20087640:	dec00204 	addi	sp,sp,8
20087644:	f800283a 	ret

20087648 <ece423_video_display_buffer_is_available>:
 *
 *           -1 - Free Buf not yet available
 *
 ******************************************************************/

int ece423_video_display_buffer_is_available(ece423_video_display* display) {
20087648:	defffd04 	addi	sp,sp,-12
2008764c:	df000215 	stw	fp,8(sp)
20087650:	df000204 	addi	fp,sp,8
20087654:	e13fff15 	stw	r4,-4(fp)
	int ret_code = 0;
20087658:	e03ffe15 	stw	zero,-8(fp)

	if (display->num_frame_buffers > 1) {
2008765c:	e0bfff17 	ldw	r2,-4(fp)
20087660:	10802017 	ldw	r2,128(r2)
20087664:	10800090 	cmplti	r2,r2,2
20087668:	1000081e 	bne	r2,zero,2008768c <ece423_video_display_buffer_is_available+0x44>
		if (display->buffer_being_displayed == display->buffer_being_written) // If Frame Buf free to write to
2008766c:	e0bfff17 	ldw	r2,-4(fp)
20087670:	10c01a17 	ldw	r3,104(r2)
20087674:	e0bfff17 	ldw	r2,-4(fp)
20087678:	10801b17 	ldw	r2,108(r2)
2008767c:	1880041e 	bne	r3,r2,20087690 <ece423_video_display_buffer_is_available+0x48>
				{
			ret_code = -1; // Free Buf not yet available
20087680:	00bfffc4 	movi	r2,-1
20087684:	e0bffe15 	stw	r2,-8(fp)
20087688:	00000106 	br	20087690 <ece423_video_display_buffer_is_available+0x48>
		}
	} // END if(display->num_frame_buffers > 1)
	else  // Else Only one display Buf so HAVE TO Overwrite LIVE Buf
	{
		ret_code = 0;
2008768c:	e03ffe15 	stw	zero,-8(fp)
	}

	return (ret_code);
20087690:	e0bffe17 	ldw	r2,-8(fp)
}
20087694:	e037883a 	mov	sp,fp
20087698:	df000017 	ldw	fp,0(sp)
2008769c:	dec00104 	addi	sp,sp,4
200876a0:	f800283a 	ret

200876a4 <ece423_video_display_switch_frames>:

void ece423_video_display_switch_frames(ece423_video_display* display) {
200876a4:	defffb04 	addi	sp,sp,-20
200876a8:	dfc00415 	stw	ra,16(sp)
200876ac:	df000315 	stw	fp,12(sp)
200876b0:	df000304 	addi	fp,sp,12
200876b4:	e13fff15 	stw	r4,-4(fp)
	int iNext_Rd_Buf;

	alt_u32 RD_Desc_Fifo_Level = (IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(
200876b8:	e0bfff17 	ldw	r2,-4(fp)
200876bc:	10800017 	ldw	r2,0(r2)
200876c0:	10800317 	ldw	r2,12(r2)
200876c4:	10800204 	addi	r2,r2,8
200876c8:	10800037 	ldwio	r2,0(r2)
200876cc:	10bfffcc 	andi	r2,r2,65535
200876d0:	e0bffd15 	stw	r2,-12(fp)
			display->mSGDMA->csr_base) & ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK)
			>> ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;

	iNext_Rd_Buf = ((display->buffer_being_displayed + 1)
200876d4:	e0bfff17 	ldw	r2,-4(fp)
200876d8:	10801a17 	ldw	r2,104(r2)
200876dc:	10c00044 	addi	r3,r2,1
			% display->num_frame_buffers);
200876e0:	e0bfff17 	ldw	r2,-4(fp)
200876e4:	10802017 	ldw	r2,128(r2)

	alt_u32 RD_Desc_Fifo_Level = (IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(
			display->mSGDMA->csr_base) & ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK)
			>> ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;

	iNext_Rd_Buf = ((display->buffer_being_displayed + 1)
200876e8:	1809883a 	mov	r4,r3
200876ec:	100b883a 	mov	r5,r2
200876f0:	0088a180 	call	20088a18 <__modsi3>
200876f4:	e0bffe15 	stw	r2,-8(fp)
			% display->num_frame_buffers);

	// If there is only one buffer, display it!
	if (display->num_frame_buffers == 1) {
200876f8:	e0bfff17 	ldw	r2,-4(fp)
200876fc:	10802017 	ldw	r2,128(r2)
20087700:	10800058 	cmpnei	r2,r2,1
20087704:	1000191e 	bne	r2,zero,2008776c <ece423_video_display_switch_frames+0xc8>
		// Wait until the last buffer is displayed
		while (RD_Desc_Fifo_Level > 0) {
20087708:	00000706 	br	20087728 <ece423_video_display_switch_frames+0x84>
			RD_Desc_Fifo_Level = (IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(
2008770c:	e0bfff17 	ldw	r2,-4(fp)
20087710:	10800017 	ldw	r2,0(r2)
20087714:	10800317 	ldw	r2,12(r2)
20087718:	10800204 	addi	r2,r2,8
2008771c:	10800037 	ldwio	r2,0(r2)
20087720:	10bfffcc 	andi	r2,r2,65535
20087724:	e0bffd15 	stw	r2,-12(fp)
			% display->num_frame_buffers);

	// If there is only one buffer, display it!
	if (display->num_frame_buffers == 1) {
		// Wait until the last buffer is displayed
		while (RD_Desc_Fifo_Level > 0) {
20087728:	e0bffd17 	ldw	r2,-12(fp)
2008772c:	103ff71e 	bne	r2,zero,2008770c <__flash_rwdata_start+0xfffe8b38>
					& ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK)
					>> ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
		}

		// Transfer Descriptor for Frame to mSGDMA
		while (alt_msgdma_standard_descriptor_async_transfer(display->mSGDMA,
20087730:	0001883a 	nop
20087734:	e0bfff17 	ldw	r2,-4(fp)
20087738:	11000017 	ldw	r4,0(r2)
				display->buffer_ptrs[iNext_Rd_Buf]->desc_base) != 0) {
2008773c:	e0ffff17 	ldw	r3,-4(fp)
20087740:	e0bffe17 	ldw	r2,-8(fp)
20087744:	10800044 	addi	r2,r2,1
20087748:	1085883a 	add	r2,r2,r2
2008774c:	1085883a 	add	r2,r2,r2
20087750:	1885883a 	add	r2,r3,r2
20087754:	10800017 	ldw	r2,0(r2)
					& ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK)
					>> ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
		}

		// Transfer Descriptor for Frame to mSGDMA
		while (alt_msgdma_standard_descriptor_async_transfer(display->mSGDMA,
20087758:	10800017 	ldw	r2,0(r2)
2008775c:	100b883a 	mov	r5,r2
20087760:	009cdd00 	call	2009cdd0 <alt_msgdma_standard_descriptor_async_transfer>
20087764:	103ff31e 	bne	r2,zero,20087734 <__flash_rwdata_start+0xfffe8b60>
20087768:	00002006 	br	200877ec <ece423_video_display_switch_frames+0x148>
				display->buffer_ptrs[iNext_Rd_Buf]->desc_base) != 0) {
		}  // Keep Trying until there is room to Transfer another Frame
	}

	// Check if there is a new buffer to display
	else if (iNext_Rd_Buf != display->buffer_being_written) {
2008776c:	e0bfff17 	ldw	r2,-4(fp)
20087770:	10c01b17 	ldw	r3,108(r2)
20087774:	e0bffe17 	ldw	r2,-8(fp)
20087778:	18801c26 	beq	r3,r2,200877ec <ece423_video_display_switch_frames+0x148>

		// Wait until the last buffer is displayed
		while (RD_Desc_Fifo_Level > 1) {
2008777c:	00000706 	br	2008779c <ece423_video_display_switch_frames+0xf8>

			RD_Desc_Fifo_Level = (IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(
20087780:	e0bfff17 	ldw	r2,-4(fp)
20087784:	10800017 	ldw	r2,0(r2)
20087788:	10800317 	ldw	r2,12(r2)
2008778c:	10800204 	addi	r2,r2,8
20087790:	10800037 	ldwio	r2,0(r2)
20087794:	10bfffcc 	andi	r2,r2,65535
20087798:	e0bffd15 	stw	r2,-12(fp)

	// Check if there is a new buffer to display
	else if (iNext_Rd_Buf != display->buffer_being_written) {

		// Wait until the last buffer is displayed
		while (RD_Desc_Fifo_Level > 1) {
2008779c:	e0bffd17 	ldw	r2,-12(fp)
200877a0:	108000a8 	cmpgeui	r2,r2,2
200877a4:	103ff61e 	bne	r2,zero,20087780 <__flash_rwdata_start+0xfffe8bac>
					& ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK)
					>> ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
		}

		// Transfer Descriptor for Frame to mSGDMA
		while (alt_msgdma_standard_descriptor_async_transfer(display->mSGDMA,
200877a8:	0001883a 	nop
200877ac:	e0bfff17 	ldw	r2,-4(fp)
200877b0:	11000017 	ldw	r4,0(r2)
				display->buffer_ptrs[iNext_Rd_Buf]->desc_base) != 0) {
200877b4:	e0ffff17 	ldw	r3,-4(fp)
200877b8:	e0bffe17 	ldw	r2,-8(fp)
200877bc:	10800044 	addi	r2,r2,1
200877c0:	1085883a 	add	r2,r2,r2
200877c4:	1085883a 	add	r2,r2,r2
200877c8:	1885883a 	add	r2,r3,r2
200877cc:	10800017 	ldw	r2,0(r2)
					& ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK)
					>> ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
		}

		// Transfer Descriptor for Frame to mSGDMA
		while (alt_msgdma_standard_descriptor_async_transfer(display->mSGDMA,
200877d0:	10800017 	ldw	r2,0(r2)
200877d4:	100b883a 	mov	r5,r2
200877d8:	009cdd00 	call	2009cdd0 <alt_msgdma_standard_descriptor_async_transfer>
200877dc:	103ff31e 	bne	r2,zero,200877ac <__flash_rwdata_start+0xfffe8bd8>
				display->buffer_ptrs[iNext_Rd_Buf]->desc_base) != 0) {
		}  // Keep Trying until there is room to Transfer another Frame

		display->buffer_being_displayed = iNext_Rd_Buf;
200877e0:	e0bfff17 	ldw	r2,-4(fp)
200877e4:	e0fffe17 	ldw	r3,-8(fp)
200877e8:	10c01a15 	stw	r3,104(r2)
	}

	//printf("Displayed %d - Written %d\n", display->buffer_being_displayed, display->buffer_being_written);
}
200877ec:	e037883a 	mov	sp,fp
200877f0:	dfc00117 	ldw	ra,4(sp)
200877f4:	df000017 	ldw	fp,0(sp)
200877f8:	dec00204 	addi	sp,sp,8
200877fc:	f800283a 	ret

20087800 <ece423_video_display_clear_screen>:
 *  Purpose: Uses the fast memset routine to clear entire Frame Buf
 *             User can specify black(0x00) or white(0xFF).
 *
 ******************************************************************/
void ece423_video_display_clear_screen(ece423_video_display* display,
		char color) {
20087800:	defffc04 	addi	sp,sp,-16
20087804:	dfc00315 	stw	ra,12(sp)
20087808:	df000215 	stw	fp,8(sp)
2008780c:	df000204 	addi	fp,sp,8
20087810:	e13ffe15 	stw	r4,-8(fp)
20087814:	2805883a 	mov	r2,r5
20087818:	e0bfff05 	stb	r2,-4(fp)
	memset(
			(void*) (display->buffer_ptrs[display->buffer_being_written]->buffer),
2008781c:	e0bffe17 	ldw	r2,-8(fp)
20087820:	10801b17 	ldw	r2,108(r2)
20087824:	e0fffe17 	ldw	r3,-8(fp)
20087828:	10800044 	addi	r2,r2,1
2008782c:	1085883a 	add	r2,r2,r2
20087830:	1085883a 	add	r2,r2,r2
20087834:	1885883a 	add	r2,r3,r2
20087838:	10800017 	ldw	r2,0(r2)
 *             User can specify black(0x00) or white(0xFF).
 *
 ******************************************************************/
void ece423_video_display_clear_screen(ece423_video_display* display,
		char color) {
	memset(
2008783c:	11000117 	ldw	r4,4(r2)
20087840:	e0ffff07 	ldb	r3,-4(fp)
			(void*) (display->buffer_ptrs[display->buffer_being_written]->buffer),
			color, display->bytes_per_frame);
20087844:	e0bffe17 	ldw	r2,-8(fp)
20087848:	10801f17 	ldw	r2,124(r2)
 *             User can specify black(0x00) or white(0xFF).
 *
 ******************************************************************/
void ece423_video_display_clear_screen(ece423_video_display* display,
		char color) {
	memset(
2008784c:	180b883a 	mov	r5,r3
20087850:	100d883a 	mov	r6,r2
20087854:	008bed40 	call	2008bed4 <memset>
			(void*) (display->buffer_ptrs[display->buffer_being_written]->buffer),
			color, display->bytes_per_frame);
}
20087858:	e037883a 	mov	sp,fp
2008785c:	dfc00117 	ldw	ra,4(sp)
20087860:	df000017 	ldw	fp,0(sp)
20087864:	dec00204 	addi	sp,sp,8
20087868:	f800283a 	ret

2008786c <ece423_video_display_get_descriptor_span>:
 * display->descriptors_per_frame
 *  MUST be SetUp Before Calling this func
 * 
 * Returns: Size (in bytes) of descriptor memory required.
 ******************************************************************/
alt_u32 ece423_video_display_get_descriptor_span(ece423_video_display *display) {
2008786c:	defffe04 	addi	sp,sp,-8
20087870:	df000115 	stw	fp,4(sp)
20087874:	df000104 	addi	fp,sp,4
20087878:	e13fff15 	stw	r4,-4(fp)
	return ((display->descriptors_per_frame + 2)
2008787c:	e0bfff17 	ldw	r2,-4(fp)
20087880:	10802117 	ldw	r2,132(r2)
20087884:	10800084 	addi	r2,r2,2
20087888:	1004913a 	slli	r2,r2,4
			* sizeof(alt_msgdma_standard_descriptor));
}
2008788c:	e037883a 	mov	sp,fp
20087890:	df000017 	ldw	fp,0(sp)
20087894:	dec00104 	addi	sp,sp,4
20087898:	f800283a 	ret

2008789c <ece423_video_display_allocate_buffers>:
 *  This Allocates memory for Frame Bufs & descriptors
 *  Returns:  0 - Success
 *           -1 - Error allocating memory
 ******************************************************************/
int ece423_video_display_allocate_buffers(ece423_video_display* display,
		int bytes_per_frame, int num_buffers) {
2008789c:	defff804 	addi	sp,sp,-32
200878a0:	dfc00715 	stw	ra,28(sp)
200878a4:	df000615 	stw	fp,24(sp)
200878a8:	dc000515 	stw	r16,20(sp)
200878ac:	df000604 	addi	fp,sp,24
200878b0:	e13ffc15 	stw	r4,-16(fp)
200878b4:	e17ffd15 	stw	r5,-12(fp)
200878b8:	e1bffe15 	stw	r6,-8(fp)
	int i, ret_code = 0;
200878bc:	e03ffb15 	stw	zero,-20(fp)

	/* Allocate Frame Bufs and descriptor Bufs */

	for (i = 0; i < num_buffers; i++) {
200878c0:	e03ffa15 	stw	zero,-24(fp)
200878c4:	00004506 	br	200879dc <ece423_video_display_allocate_buffers+0x140>
		display->buffer_ptrs[i] = (ece423_video_frame*) malloc(
200878c8:	01000204 	movi	r4,8
200878cc:	008b5500 	call	2008b550 <malloc>
200878d0:	1009883a 	mov	r4,r2
200878d4:	e0fffc17 	ldw	r3,-16(fp)
200878d8:	e0bffa17 	ldw	r2,-24(fp)
200878dc:	10800044 	addi	r2,r2,1
200878e0:	1085883a 	add	r2,r2,r2
200878e4:	1085883a 	add	r2,r2,r2
200878e8:	1885883a 	add	r2,r3,r2
200878ec:	11000015 	stw	r4,0(r2)
				sizeof(ece423_video_frame)); // malloc Struct with 2 Ptrs

		if (display->buffer_ptrs[i] == NULL) {
200878f0:	e0fffc17 	ldw	r3,-16(fp)
200878f4:	e0bffa17 	ldw	r2,-24(fp)
200878f8:	10800044 	addi	r2,r2,1
200878fc:	1085883a 	add	r2,r2,r2
20087900:	1085883a 	add	r2,r2,r2
20087904:	1885883a 	add	r2,r3,r2
20087908:	10800017 	ldw	r2,0(r2)
2008790c:	1000021e 	bne	r2,zero,20087918 <ece423_video_display_allocate_buffers+0x7c>
			ret_code = -1;
20087910:	00bfffc4 	movi	r2,-1
20087914:	e0bffb15 	stw	r2,-20(fp)
		}

		display->buffer_ptrs[i]->buffer = (void*) alt_uncached_malloc(
20087918:	e0fffc17 	ldw	r3,-16(fp)
2008791c:	e0bffa17 	ldw	r2,-24(fp)
20087920:	10800044 	addi	r2,r2,1
20087924:	1085883a 	add	r2,r2,r2
20087928:	1085883a 	add	r2,r2,r2
2008792c:	1885883a 	add	r2,r3,r2
20087930:	14000017 	ldw	r16,0(r2)
20087934:	e0bffd17 	ldw	r2,-12(fp)
20087938:	1009883a 	mov	r4,r2
2008793c:	009a0f80 	call	2009a0f8 <alt_uncached_malloc>
20087940:	80800115 	stw	r2,4(r16)
				(bytes_per_frame)); // malloc Frame Buf on Heap
//      display->buffer_ptrs[i]->buffer =
//        (void*) malloc(bytes_per_frame); // malloc Frame Buf on Heap
		if (display->buffer_ptrs[i]->buffer == NULL)
20087944:	e0fffc17 	ldw	r3,-16(fp)
20087948:	e0bffa17 	ldw	r2,-24(fp)
2008794c:	10800044 	addi	r2,r2,1
20087950:	1085883a 	add	r2,r2,r2
20087954:	1085883a 	add	r2,r2,r2
20087958:	1885883a 	add	r2,r3,r2
2008795c:	10800017 	ldw	r2,0(r2)
20087960:	10800117 	ldw	r2,4(r2)
20087964:	1000021e 	bne	r2,zero,20087970 <ece423_video_display_allocate_buffers+0xd4>
			ret_code = -1;
20087968:	00bfffc4 	movi	r2,-1
2008796c:	e0bffb15 	stw	r2,-20(fp)

		display->buffer_ptrs[i]->desc_base =
20087970:	e0fffc17 	ldw	r3,-16(fp)
20087974:	e0bffa17 	ldw	r2,-24(fp)
20087978:	10800044 	addi	r2,r2,1
2008797c:	1085883a 	add	r2,r2,r2
20087980:	1085883a 	add	r2,r2,r2
20087984:	1885883a 	add	r2,r3,r2
20087988:	14000017 	ldw	r16,0(r2)
				(alt_msgdma_standard_descriptor*) memalign(32,
						ece423_video_display_get_descriptor_span(display)); // Desc on Heap
2008798c:	e13ffc17 	ldw	r4,-16(fp)
20087990:	008786c0 	call	2008786c <ece423_video_display_get_descriptor_span>
//        (void*) malloc(bytes_per_frame); // malloc Frame Buf on Heap
		if (display->buffer_ptrs[i]->buffer == NULL)
			ret_code = -1;

		display->buffer_ptrs[i]->desc_base =
				(alt_msgdma_standard_descriptor*) memalign(32,
20087994:	01000804 	movi	r4,32
20087998:	100b883a 	mov	r5,r2
2008799c:	008b3800 	call	2008b380 <memalign>
//      display->buffer_ptrs[i]->buffer =
//        (void*) malloc(bytes_per_frame); // malloc Frame Buf on Heap
		if (display->buffer_ptrs[i]->buffer == NULL)
			ret_code = -1;

		display->buffer_ptrs[i]->desc_base =
200879a0:	80800015 	stw	r2,0(r16)
				(alt_msgdma_standard_descriptor*) memalign(32,
						ece423_video_display_get_descriptor_span(display)); // Desc on Heap

		if (display->buffer_ptrs[i]->desc_base == NULL) {
200879a4:	e0fffc17 	ldw	r3,-16(fp)
200879a8:	e0bffa17 	ldw	r2,-24(fp)
200879ac:	10800044 	addi	r2,r2,1
200879b0:	1085883a 	add	r2,r2,r2
200879b4:	1085883a 	add	r2,r2,r2
200879b8:	1885883a 	add	r2,r3,r2
200879bc:	10800017 	ldw	r2,0(r2)
200879c0:	10800017 	ldw	r2,0(r2)
200879c4:	1000021e 	bne	r2,zero,200879d0 <ece423_video_display_allocate_buffers+0x134>
			ret_code = -1;
200879c8:	00bfffc4 	movi	r2,-1
200879cc:	e0bffb15 	stw	r2,-20(fp)
		int bytes_per_frame, int num_buffers) {
	int i, ret_code = 0;

	/* Allocate Frame Bufs and descriptor Bufs */

	for (i = 0; i < num_buffers; i++) {
200879d0:	e0bffa17 	ldw	r2,-24(fp)
200879d4:	10800044 	addi	r2,r2,1
200879d8:	e0bffa15 	stw	r2,-24(fp)
200879dc:	e0fffa17 	ldw	r3,-24(fp)
200879e0:	e0bffe17 	ldw	r2,-8(fp)
200879e4:	18bfb816 	blt	r3,r2,200878c8 <__flash_rwdata_start+0xfffe8cf4>
		if (display->buffer_ptrs[i]->desc_base == NULL) {
			ret_code = -1;
		}
	}

	return ret_code;
200879e8:	e0bffb17 	ldw	r2,-20(fp)
}
200879ec:	e6ffff04 	addi	sp,fp,-4
200879f0:	dfc00217 	ldw	ra,8(sp)
200879f4:	df000117 	ldw	fp,4(sp)
200879f8:	dc000017 	ldw	r16,0(sp)
200879fc:	dec00304 	addi	sp,sp,12
20087a00:	f800283a 	ret

20087a04 <ece423_video_display_get_buffer>:

// ************************************************************

// Return a pointer to the buffer being written
alt_u32* ece423_video_display_get_buffer(ece423_video_display* display) {
20087a04:	defffe04 	addi	sp,sp,-8
20087a08:	df000115 	stw	fp,4(sp)
20087a0c:	df000104 	addi	fp,sp,4
20087a10:	e13fff15 	stw	r4,-4(fp)

	return (display->buffer_ptrs[display->buffer_being_written]->buffer);
20087a14:	e0bfff17 	ldw	r2,-4(fp)
20087a18:	10801b17 	ldw	r2,108(r2)
20087a1c:	e0ffff17 	ldw	r3,-4(fp)
20087a20:	10800044 	addi	r2,r2,1
20087a24:	1085883a 	add	r2,r2,r2
20087a28:	1085883a 	add	r2,r2,r2
20087a2c:	1885883a 	add	r2,r3,r2
20087a30:	10800017 	ldw	r2,0(r2)
20087a34:	10800117 	ldw	r2,4(r2)
}
20087a38:	e037883a 	mov	sp,fp
20087a3c:	df000017 	ldw	fp,0(sp)
20087a40:	dec00104 	addi	sp,sp,4
20087a44:	f800283a 	ret

20087a48 <ece423_init_hdmi>:

// ************************************************************
int ece423_init_hdmi() {
20087a48:	defff304 	addi	sp,sp,-52
20087a4c:	dfc00c15 	stw	ra,48(sp)
20087a50:	df000b15 	stw	fp,44(sp)
20087a54:	df000b04 	addi	fp,sp,44
	bool r = 0;
20087a58:	e03ff615 	stw	zero,-40(fp)
	int slave_addr = 0x39 << 1;
20087a5c:	00801c84 	movi	r2,114
20087a60:	e0bff715 	stw	r2,-36(fp)
	int chip_id[4];
	int chip_rev[4];

	// Identify adv7513 chip
	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x00, &chip_rev[0]);
20087a64:	e0bff717 	ldw	r2,-36(fp)
20087a68:	10c03fcc 	andi	r3,r2,255
20087a6c:	18c0201c 	xori	r3,r3,128
20087a70:	18ffe004 	addi	r3,r3,-128
20087a74:	e0bffc04 	addi	r2,fp,-16
20087a78:	d8800015 	stw	r2,0(sp)
20087a7c:	01080434 	movhi	r4,8208
20087a80:	21056804 	addi	r4,r4,5536
20087a84:	01480434 	movhi	r5,8208
20087a88:	29456404 	addi	r5,r5,5520
20087a8c:	180d883a 	mov	r6,r3
20087a90:	000f883a 	mov	r7,zero
20087a94:	00880fc0 	call	200880fc <I2C_Read>
20087a98:	e0bff615 	stw	r2,-40(fp)
	if (!r)
20087a9c:	e0bff617 	ldw	r2,-40(fp)
20087aa0:	1000021e 	bne	r2,zero,20087aac <ece423_init_hdmi+0x64>
		return -1;
20087aa4:	00bfffc4 	movi	r2,-1
20087aa8:	00015906 	br	20088010 <ece423_init_hdmi+0x5c8>

	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0xf6, &chip_id[0]);
20087aac:	e0bff717 	ldw	r2,-36(fp)
20087ab0:	10c03fcc 	andi	r3,r2,255
20087ab4:	18c0201c 	xori	r3,r3,128
20087ab8:	18ffe004 	addi	r3,r3,-128
20087abc:	e0bff804 	addi	r2,fp,-32
20087ac0:	d8800015 	stw	r2,0(sp)
20087ac4:	01080434 	movhi	r4,8208
20087ac8:	21056804 	addi	r4,r4,5536
20087acc:	01480434 	movhi	r5,8208
20087ad0:	29456404 	addi	r5,r5,5520
20087ad4:	180d883a 	mov	r6,r3
20087ad8:	01c03d84 	movi	r7,246
20087adc:	00880fc0 	call	200880fc <I2C_Read>
20087ae0:	e0bff615 	stw	r2,-40(fp)
	if (!r)
20087ae4:	e0bff617 	ldw	r2,-40(fp)
20087ae8:	1000021e 	bne	r2,zero,20087af4 <ece423_init_hdmi+0xac>
		return -2;
20087aec:	00bfff84 	movi	r2,-2
20087af0:	00014706 	br	20088010 <ece423_init_hdmi+0x5c8>

	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0xf5, &chip_id[1]);
20087af4:	e0bff717 	ldw	r2,-36(fp)
20087af8:	10c03fcc 	andi	r3,r2,255
20087afc:	18c0201c 	xori	r3,r3,128
20087b00:	18ffe004 	addi	r3,r3,-128
20087b04:	e0bff804 	addi	r2,fp,-32
20087b08:	10800104 	addi	r2,r2,4
20087b0c:	d8800015 	stw	r2,0(sp)
20087b10:	01080434 	movhi	r4,8208
20087b14:	21056804 	addi	r4,r4,5536
20087b18:	01480434 	movhi	r5,8208
20087b1c:	29456404 	addi	r5,r5,5520
20087b20:	180d883a 	mov	r6,r3
20087b24:	01c03d44 	movi	r7,245
20087b28:	00880fc0 	call	200880fc <I2C_Read>
20087b2c:	e0bff615 	stw	r2,-40(fp)
	if (!r)
20087b30:	e0bff617 	ldw	r2,-40(fp)
20087b34:	1000021e 	bne	r2,zero,20087b40 <ece423_init_hdmi+0xf8>
		return -3;
20087b38:	00bfff44 	movi	r2,-3
20087b3c:	00013406 	br	20088010 <ece423_init_hdmi+0x5c8>

	// Initiate Color Conversion Matrix
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x18, 0xAA);
20087b40:	e0bff717 	ldw	r2,-36(fp)
20087b44:	10c03fcc 	andi	r3,r2,255
20087b48:	18c0201c 	xori	r3,r3,128
20087b4c:	18ffe004 	addi	r3,r3,-128
20087b50:	00802a84 	movi	r2,170
20087b54:	d8800015 	stw	r2,0(sp)
20087b58:	01080434 	movhi	r4,8208
20087b5c:	21056804 	addi	r4,r4,5536
20087b60:	01480434 	movhi	r5,8208
20087b64:	29456404 	addi	r5,r5,5520
20087b68:	180d883a 	mov	r6,r3
20087b6c:	01c00604 	movi	r7,24
20087b70:	00880240 	call	20088024 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x19, 0xF8);
20087b74:	e0bff717 	ldw	r2,-36(fp)
20087b78:	10c03fcc 	andi	r3,r2,255
20087b7c:	18c0201c 	xori	r3,r3,128
20087b80:	18ffe004 	addi	r3,r3,-128
20087b84:	00803e04 	movi	r2,248
20087b88:	d8800015 	stw	r2,0(sp)
20087b8c:	01080434 	movhi	r4,8208
20087b90:	21056804 	addi	r4,r4,5536
20087b94:	01480434 	movhi	r5,8208
20087b98:	29456404 	addi	r5,r5,5520
20087b9c:	180d883a 	mov	r6,r3
20087ba0:	01c00644 	movi	r7,25
20087ba4:	00880240 	call	20088024 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x1A, 0x08);
20087ba8:	e0bff717 	ldw	r2,-36(fp)
20087bac:	10c03fcc 	andi	r3,r2,255
20087bb0:	18c0201c 	xori	r3,r3,128
20087bb4:	18ffe004 	addi	r3,r3,-128
20087bb8:	00800204 	movi	r2,8
20087bbc:	d8800015 	stw	r2,0(sp)
20087bc0:	01080434 	movhi	r4,8208
20087bc4:	21056804 	addi	r4,r4,5536
20087bc8:	01480434 	movhi	r5,8208
20087bcc:	29456404 	addi	r5,r5,5520
20087bd0:	180d883a 	mov	r6,r3
20087bd4:	01c00684 	movi	r7,26
20087bd8:	00880240 	call	20088024 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x1B, 0x00);
20087bdc:	e0bff717 	ldw	r2,-36(fp)
20087be0:	10803fcc 	andi	r2,r2,255
20087be4:	1080201c 	xori	r2,r2,128
20087be8:	10bfe004 	addi	r2,r2,-128
20087bec:	d8000015 	stw	zero,0(sp)
20087bf0:	01080434 	movhi	r4,8208
20087bf4:	21056804 	addi	r4,r4,5536
20087bf8:	01480434 	movhi	r5,8208
20087bfc:	29456404 	addi	r5,r5,5520
20087c00:	100d883a 	mov	r6,r2
20087c04:	01c006c4 	movi	r7,27
20087c08:	00880240 	call	20088024 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x1C, 0x00);
20087c0c:	e0bff717 	ldw	r2,-36(fp)
20087c10:	10803fcc 	andi	r2,r2,255
20087c14:	1080201c 	xori	r2,r2,128
20087c18:	10bfe004 	addi	r2,r2,-128
20087c1c:	d8000015 	stw	zero,0(sp)
20087c20:	01080434 	movhi	r4,8208
20087c24:	21056804 	addi	r4,r4,5536
20087c28:	01480434 	movhi	r5,8208
20087c2c:	29456404 	addi	r5,r5,5520
20087c30:	100d883a 	mov	r6,r2
20087c34:	01c00704 	movi	r7,28
20087c38:	00880240 	call	20088024 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x1D, 0x00);
20087c3c:	e0bff717 	ldw	r2,-36(fp)
20087c40:	10803fcc 	andi	r2,r2,255
20087c44:	1080201c 	xori	r2,r2,128
20087c48:	10bfe004 	addi	r2,r2,-128
20087c4c:	d8000015 	stw	zero,0(sp)
20087c50:	01080434 	movhi	r4,8208
20087c54:	21056804 	addi	r4,r4,5536
20087c58:	01480434 	movhi	r5,8208
20087c5c:	29456404 	addi	r5,r5,5520
20087c60:	100d883a 	mov	r6,r2
20087c64:	01c00744 	movi	r7,29
20087c68:	00880240 	call	20088024 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x1E, 0x1a);
20087c6c:	e0bff717 	ldw	r2,-36(fp)
20087c70:	10c03fcc 	andi	r3,r2,255
20087c74:	18c0201c 	xori	r3,r3,128
20087c78:	18ffe004 	addi	r3,r3,-128
20087c7c:	00800684 	movi	r2,26
20087c80:	d8800015 	stw	r2,0(sp)
20087c84:	01080434 	movhi	r4,8208
20087c88:	21056804 	addi	r4,r4,5536
20087c8c:	01480434 	movhi	r5,8208
20087c90:	29456404 	addi	r5,r5,5520
20087c94:	180d883a 	mov	r6,r3
20087c98:	01c00784 	movi	r7,30
20087c9c:	00880240 	call	20088024 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x1F, 0x84);
20087ca0:	e0bff717 	ldw	r2,-36(fp)
20087ca4:	10c03fcc 	andi	r3,r2,255
20087ca8:	18c0201c 	xori	r3,r3,128
20087cac:	18ffe004 	addi	r3,r3,-128
20087cb0:	00802104 	movi	r2,132
20087cb4:	d8800015 	stw	r2,0(sp)
20087cb8:	01080434 	movhi	r4,8208
20087cbc:	21056804 	addi	r4,r4,5536
20087cc0:	01480434 	movhi	r5,8208
20087cc4:	29456404 	addi	r5,r5,5520
20087cc8:	180d883a 	mov	r6,r3
20087ccc:	01c007c4 	movi	r7,31
20087cd0:	00880240 	call	20088024 <I2C_Write>

	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x20, 0x1A);
20087cd4:	e0bff717 	ldw	r2,-36(fp)
20087cd8:	10c03fcc 	andi	r3,r2,255
20087cdc:	18c0201c 	xori	r3,r3,128
20087ce0:	18ffe004 	addi	r3,r3,-128
20087ce4:	00800684 	movi	r2,26
20087ce8:	d8800015 	stw	r2,0(sp)
20087cec:	01080434 	movhi	r4,8208
20087cf0:	21056804 	addi	r4,r4,5536
20087cf4:	01480434 	movhi	r5,8208
20087cf8:	29456404 	addi	r5,r5,5520
20087cfc:	180d883a 	mov	r6,r3
20087d00:	01c00804 	movi	r7,32
20087d04:	00880240 	call	20088024 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x21, 0x6A);
20087d08:	e0bff717 	ldw	r2,-36(fp)
20087d0c:	10c03fcc 	andi	r3,r2,255
20087d10:	18c0201c 	xori	r3,r3,128
20087d14:	18ffe004 	addi	r3,r3,-128
20087d18:	00801a84 	movi	r2,106
20087d1c:	d8800015 	stw	r2,0(sp)
20087d20:	01080434 	movhi	r4,8208
20087d24:	21056804 	addi	r4,r4,5536
20087d28:	01480434 	movhi	r5,8208
20087d2c:	29456404 	addi	r5,r5,5520
20087d30:	180d883a 	mov	r6,r3
20087d34:	01c00844 	movi	r7,33
20087d38:	00880240 	call	20088024 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x22, 0x08);
20087d3c:	e0bff717 	ldw	r2,-36(fp)
20087d40:	10c03fcc 	andi	r3,r2,255
20087d44:	18c0201c 	xori	r3,r3,128
20087d48:	18ffe004 	addi	r3,r3,-128
20087d4c:	00800204 	movi	r2,8
20087d50:	d8800015 	stw	r2,0(sp)
20087d54:	01080434 	movhi	r4,8208
20087d58:	21056804 	addi	r4,r4,5536
20087d5c:	01480434 	movhi	r5,8208
20087d60:	29456404 	addi	r5,r5,5520
20087d64:	180d883a 	mov	r6,r3
20087d68:	01c00884 	movi	r7,34
20087d6c:	00880240 	call	20088024 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x23, 0x00);
20087d70:	e0bff717 	ldw	r2,-36(fp)
20087d74:	10803fcc 	andi	r2,r2,255
20087d78:	1080201c 	xori	r2,r2,128
20087d7c:	10bfe004 	addi	r2,r2,-128
20087d80:	d8000015 	stw	zero,0(sp)
20087d84:	01080434 	movhi	r4,8208
20087d88:	21056804 	addi	r4,r4,5536
20087d8c:	01480434 	movhi	r5,8208
20087d90:	29456404 	addi	r5,r5,5520
20087d94:	100d883a 	mov	r6,r2
20087d98:	01c008c4 	movi	r7,35
20087d9c:	00880240 	call	20088024 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x24, 0x1D);
20087da0:	e0bff717 	ldw	r2,-36(fp)
20087da4:	10c03fcc 	andi	r3,r2,255
20087da8:	18c0201c 	xori	r3,r3,128
20087dac:	18ffe004 	addi	r3,r3,-128
20087db0:	00800744 	movi	r2,29
20087db4:	d8800015 	stw	r2,0(sp)
20087db8:	01080434 	movhi	r4,8208
20087dbc:	21056804 	addi	r4,r4,5536
20087dc0:	01480434 	movhi	r5,8208
20087dc4:	29456404 	addi	r5,r5,5520
20087dc8:	180d883a 	mov	r6,r3
20087dcc:	01c00904 	movi	r7,36
20087dd0:	00880240 	call	20088024 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x25, 0x50);
20087dd4:	e0bff717 	ldw	r2,-36(fp)
20087dd8:	10c03fcc 	andi	r3,r2,255
20087ddc:	18c0201c 	xori	r3,r3,128
20087de0:	18ffe004 	addi	r3,r3,-128
20087de4:	00801404 	movi	r2,80
20087de8:	d8800015 	stw	r2,0(sp)
20087dec:	01080434 	movhi	r4,8208
20087df0:	21056804 	addi	r4,r4,5536
20087df4:	01480434 	movhi	r5,8208
20087df8:	29456404 	addi	r5,r5,5520
20087dfc:	180d883a 	mov	r6,r3
20087e00:	01c00944 	movi	r7,37
20087e04:	00880240 	call	20088024 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x26, 0x04);
20087e08:	e0bff717 	ldw	r2,-36(fp)
20087e0c:	10c03fcc 	andi	r3,r2,255
20087e10:	18c0201c 	xori	r3,r3,128
20087e14:	18ffe004 	addi	r3,r3,-128
20087e18:	00800104 	movi	r2,4
20087e1c:	d8800015 	stw	r2,0(sp)
20087e20:	01080434 	movhi	r4,8208
20087e24:	21056804 	addi	r4,r4,5536
20087e28:	01480434 	movhi	r5,8208
20087e2c:	29456404 	addi	r5,r5,5520
20087e30:	180d883a 	mov	r6,r3
20087e34:	01c00984 	movi	r7,38
20087e38:	00880240 	call	20088024 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x27, 0x23);
20087e3c:	e0bff717 	ldw	r2,-36(fp)
20087e40:	10c03fcc 	andi	r3,r2,255
20087e44:	18c0201c 	xori	r3,r3,128
20087e48:	18ffe004 	addi	r3,r3,-128
20087e4c:	008008c4 	movi	r2,35
20087e50:	d8800015 	stw	r2,0(sp)
20087e54:	01080434 	movhi	r4,8208
20087e58:	21056804 	addi	r4,r4,5536
20087e5c:	01480434 	movhi	r5,8208
20087e60:	29456404 	addi	r5,r5,5520
20087e64:	180d883a 	mov	r6,r3
20087e68:	01c009c4 	movi	r7,39
20087e6c:	00880240 	call	20088024 <I2C_Write>

	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x28, 0x1F);
20087e70:	e0bff717 	ldw	r2,-36(fp)
20087e74:	10c03fcc 	andi	r3,r2,255
20087e78:	18c0201c 	xori	r3,r3,128
20087e7c:	18ffe004 	addi	r3,r3,-128
20087e80:	008007c4 	movi	r2,31
20087e84:	d8800015 	stw	r2,0(sp)
20087e88:	01080434 	movhi	r4,8208
20087e8c:	21056804 	addi	r4,r4,5536
20087e90:	01480434 	movhi	r5,8208
20087e94:	29456404 	addi	r5,r5,5520
20087e98:	180d883a 	mov	r6,r3
20087e9c:	01c00a04 	movi	r7,40
20087ea0:	00880240 	call	20088024 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x29, 0xFC);
20087ea4:	e0bff717 	ldw	r2,-36(fp)
20087ea8:	10c03fcc 	andi	r3,r2,255
20087eac:	18c0201c 	xori	r3,r3,128
20087eb0:	18ffe004 	addi	r3,r3,-128
20087eb4:	00803f04 	movi	r2,252
20087eb8:	d8800015 	stw	r2,0(sp)
20087ebc:	01080434 	movhi	r4,8208
20087ec0:	21056804 	addi	r4,r4,5536
20087ec4:	01480434 	movhi	r5,8208
20087ec8:	29456404 	addi	r5,r5,5520
20087ecc:	180d883a 	mov	r6,r3
20087ed0:	01c00a44 	movi	r7,41
20087ed4:	00880240 	call	20088024 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x2A, 0x08);
20087ed8:	e0bff717 	ldw	r2,-36(fp)
20087edc:	10c03fcc 	andi	r3,r2,255
20087ee0:	18c0201c 	xori	r3,r3,128
20087ee4:	18ffe004 	addi	r3,r3,-128
20087ee8:	00800204 	movi	r2,8
20087eec:	d8800015 	stw	r2,0(sp)
20087ef0:	01080434 	movhi	r4,8208
20087ef4:	21056804 	addi	r4,r4,5536
20087ef8:	01480434 	movhi	r5,8208
20087efc:	29456404 	addi	r5,r5,5520
20087f00:	180d883a 	mov	r6,r3
20087f04:	01c00a84 	movi	r7,42
20087f08:	00880240 	call	20088024 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x2B, 0x00);
20087f0c:	e0bff717 	ldw	r2,-36(fp)
20087f10:	10803fcc 	andi	r2,r2,255
20087f14:	1080201c 	xori	r2,r2,128
20087f18:	10bfe004 	addi	r2,r2,-128
20087f1c:	d8000015 	stw	zero,0(sp)
20087f20:	01080434 	movhi	r4,8208
20087f24:	21056804 	addi	r4,r4,5536
20087f28:	01480434 	movhi	r5,8208
20087f2c:	29456404 	addi	r5,r5,5520
20087f30:	100d883a 	mov	r6,r2
20087f34:	01c00ac4 	movi	r7,43
20087f38:	00880240 	call	20088024 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x2C, 0x0D);
20087f3c:	e0bff717 	ldw	r2,-36(fp)
20087f40:	10c03fcc 	andi	r3,r2,255
20087f44:	18c0201c 	xori	r3,r3,128
20087f48:	18ffe004 	addi	r3,r3,-128
20087f4c:	00800344 	movi	r2,13
20087f50:	d8800015 	stw	r2,0(sp)
20087f54:	01080434 	movhi	r4,8208
20087f58:	21056804 	addi	r4,r4,5536
20087f5c:	01480434 	movhi	r5,8208
20087f60:	29456404 	addi	r5,r5,5520
20087f64:	180d883a 	mov	r6,r3
20087f68:	01c00b04 	movi	r7,44
20087f6c:	00880240 	call	20088024 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x2D, 0xDE);
20087f70:	e0bff717 	ldw	r2,-36(fp)
20087f74:	10c03fcc 	andi	r3,r2,255
20087f78:	18c0201c 	xori	r3,r3,128
20087f7c:	18ffe004 	addi	r3,r3,-128
20087f80:	00803784 	movi	r2,222
20087f84:	d8800015 	stw	r2,0(sp)
20087f88:	01080434 	movhi	r4,8208
20087f8c:	21056804 	addi	r4,r4,5536
20087f90:	01480434 	movhi	r5,8208
20087f94:	29456404 	addi	r5,r5,5520
20087f98:	180d883a 	mov	r6,r3
20087f9c:	01c00b44 	movi	r7,45
20087fa0:	00880240 	call	20088024 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x2E, 0x19);
20087fa4:	e0bff717 	ldw	r2,-36(fp)
20087fa8:	10c03fcc 	andi	r3,r2,255
20087fac:	18c0201c 	xori	r3,r3,128
20087fb0:	18ffe004 	addi	r3,r3,-128
20087fb4:	00800644 	movi	r2,25
20087fb8:	d8800015 	stw	r2,0(sp)
20087fbc:	01080434 	movhi	r4,8208
20087fc0:	21056804 	addi	r4,r4,5536
20087fc4:	01480434 	movhi	r5,8208
20087fc8:	29456404 	addi	r5,r5,5520
20087fcc:	180d883a 	mov	r6,r3
20087fd0:	01c00b84 	movi	r7,46
20087fd4:	00880240 	call	20088024 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x2F, 0x13);
20087fd8:	e0bff717 	ldw	r2,-36(fp)
20087fdc:	10c03fcc 	andi	r3,r2,255
20087fe0:	18c0201c 	xori	r3,r3,128
20087fe4:	18ffe004 	addi	r3,r3,-128
20087fe8:	008004c4 	movi	r2,19
20087fec:	d8800015 	stw	r2,0(sp)
20087ff0:	01080434 	movhi	r4,8208
20087ff4:	21056804 	addi	r4,r4,5536
20087ff8:	01480434 	movhi	r5,8208
20087ffc:	29456404 	addi	r5,r5,5520
20088000:	180d883a 	mov	r6,r3
20088004:	01c00bc4 	movi	r7,47
20088008:	00880240 	call	20088024 <I2C_Write>

	return 0;
2008800c:	0005883a 	mov	r2,zero
}
20088010:	e037883a 	mov	sp,fp
20088014:	dfc00117 	ldw	ra,4(sp)
20088018:	df000017 	ldw	fp,0(sp)
2008801c:	dec00204 	addi	sp,sp,8
20088020:	f800283a 	ret

20088024 <I2C_Write>:
void i2c_start(alt_u32 clk_base, alt_u32 data_base);
void i2c_stop(alt_u32 clk_base, alt_u32 data_base);
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);

bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
20088024:	defff804 	addi	sp,sp,-32
20088028:	dfc00715 	stw	ra,28(sp)
2008802c:	df000615 	stw	fp,24(sp)
20088030:	df000604 	addi	fp,sp,24
20088034:	e13ffb15 	stw	r4,-20(fp)
20088038:	e17ffc15 	stw	r5,-16(fp)
2008803c:	3009883a 	mov	r4,r6
20088040:	3807883a 	mov	r3,r7
20088044:	e0800217 	ldw	r2,8(fp)
20088048:	e13ffd05 	stb	r4,-12(fp)
2008804c:	e0fffe05 	stb	r3,-8(fp)
20088050:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
20088054:	00800044 	movi	r2,1
20088058:	e0bffa15 	stw	r2,-24(fp)

    i2c_start(clk_base, data_base);
2008805c:	e13ffb17 	ldw	r4,-20(fp)
20088060:	e17ffc17 	ldw	r5,-16(fp)
20088064:	00881fc0 	call	200881fc <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
20088068:	e0bffd03 	ldbu	r2,-12(fp)
2008806c:	10803fcc 	andi	r2,r2,255
20088070:	e13ffb17 	ldw	r4,-20(fp)
20088074:	e17ffc17 	ldw	r5,-16(fp)
20088078:	100d883a 	mov	r6,r2
2008807c:	00882f80 	call	200882f8 <i2c_write>
20088080:	1000011e 	bne	r2,zero,20088088 <I2C_Write+0x64>
        bSuccess = FALSE;
20088084:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
20088088:	e0bffa17 	ldw	r2,-24(fp)
2008808c:	10000726 	beq	r2,zero,200880ac <I2C_Write+0x88>
20088090:	e0bffe03 	ldbu	r2,-8(fp)
20088094:	e13ffb17 	ldw	r4,-20(fp)
20088098:	e17ffc17 	ldw	r5,-16(fp)
2008809c:	100d883a 	mov	r6,r2
200880a0:	00882f80 	call	200882f8 <i2c_write>
200880a4:	1000011e 	bne	r2,zero,200880ac <I2C_Write+0x88>
        bSuccess = FALSE;
200880a8:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){
200880ac:	e0bffa17 	ldw	r2,-24(fp)
200880b0:	10000726 	beq	r2,zero,200880d0 <I2C_Write+0xac>
200880b4:	e0bfff03 	ldbu	r2,-4(fp)
200880b8:	e13ffb17 	ldw	r4,-20(fp)
200880bc:	e17ffc17 	ldw	r5,-16(fp)
200880c0:	100d883a 	mov	r6,r2
200880c4:	00882f80 	call	200882f8 <i2c_write>
200880c8:	1000011e 	bne	r2,zero,200880d0 <I2C_Write+0xac>
        bSuccess = FALSE;
200880cc:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
200880d0:	e13ffb17 	ldw	r4,-20(fp)
200880d4:	e17ffc17 	ldw	r5,-16(fp)
200880d8:	00882840 	call	20088284 <i2c_stop>

    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
200880dc:	0106d604 	movi	r4,7000
200880e0:	009a1700 	call	2009a170 <usleep>

    return bSuccess;
200880e4:	e0bffa17 	ldw	r2,-24(fp)


}
200880e8:	e037883a 	mov	sp,fp
200880ec:	dfc00117 	ldw	ra,4(sp)
200880f0:	df000017 	ldw	fp,0(sp)
200880f4:	dec00204 	addi	sp,sp,8
200880f8:	f800283a 	ret

200880fc <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
200880fc:	defff904 	addi	sp,sp,-28
20088100:	dfc00615 	stw	ra,24(sp)
20088104:	df000515 	stw	fp,20(sp)
20088108:	df000504 	addi	fp,sp,20
2008810c:	e13ffc15 	stw	r4,-16(fp)
20088110:	e17ffd15 	stw	r5,-12(fp)
20088114:	3007883a 	mov	r3,r6
20088118:	3805883a 	mov	r2,r7
2008811c:	e0fffe05 	stb	r3,-8(fp)
20088120:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
20088124:	00800044 	movi	r2,1
20088128:	e0bffb15 	stw	r2,-20(fp)

    i2c_start(clk_base, data_base);
2008812c:	e13ffc17 	ldw	r4,-16(fp)
20088130:	e17ffd17 	ldw	r5,-12(fp)
20088134:	00881fc0 	call	200881fc <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
20088138:	e0bffe03 	ldbu	r2,-8(fp)
2008813c:	10803fcc 	andi	r2,r2,255
20088140:	e13ffc17 	ldw	r4,-16(fp)
20088144:	e17ffd17 	ldw	r5,-12(fp)
20088148:	100d883a 	mov	r6,r2
2008814c:	00882f80 	call	200882f8 <i2c_write>
20088150:	1000011e 	bne	r2,zero,20088158 <I2C_Read+0x5c>
        bSuccess = FALSE;
20088154:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
20088158:	e0bffb17 	ldw	r2,-20(fp)
2008815c:	10000726 	beq	r2,zero,2008817c <I2C_Read+0x80>
20088160:	e0bfff03 	ldbu	r2,-4(fp)
20088164:	e13ffc17 	ldw	r4,-16(fp)
20088168:	e17ffd17 	ldw	r5,-12(fp)
2008816c:	100d883a 	mov	r6,r2
20088170:	00882f80 	call	200882f8 <i2c_write>
20088174:	1000011e 	bne	r2,zero,2008817c <I2C_Read+0x80>
        bSuccess = FALSE;
20088178:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }
    i2c_start(clk_base, data_base);  // restart
2008817c:	e13ffc17 	ldw	r4,-16(fp)
20088180:	e17ffd17 	ldw	r5,-12(fp)
20088184:	00881fc0 	call	200881fc <i2c_start>
    DeviceAddr |= 1; // Read
20088188:	e0bffe03 	ldbu	r2,-8(fp)
2008818c:	10800054 	ori	r2,r2,1
20088190:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
20088194:	e0bffb17 	ldw	r2,-20(fp)
20088198:	10000826 	beq	r2,zero,200881bc <I2C_Read+0xc0>
2008819c:	e0bffe03 	ldbu	r2,-8(fp)
200881a0:	10803fcc 	andi	r2,r2,255
200881a4:	e13ffc17 	ldw	r4,-16(fp)
200881a8:	e17ffd17 	ldw	r5,-12(fp)
200881ac:	100d883a 	mov	r6,r2
200881b0:	00882f80 	call	200882f8 <i2c_write>
200881b4:	1000011e 	bne	r2,zero,200881bc <I2C_Read+0xc0>
        bSuccess = FALSE;
200881b8:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }

    if (bSuccess){
200881bc:	e0bffb17 	ldw	r2,-20(fp)
200881c0:	10000526 	beq	r2,zero,200881d8 <I2C_Read+0xdc>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
200881c4:	e13ffc17 	ldw	r4,-16(fp)
200881c8:	e17ffd17 	ldw	r5,-12(fp)
200881cc:	e1800217 	ldw	r6,8(fp)
200881d0:	000f883a 	mov	r7,zero
200881d4:	00884280 	call	20088428 <i2c_read>
    }
    i2c_stop(clk_base, data_base);
200881d8:	e13ffc17 	ldw	r4,-16(fp)
200881dc:	e17ffd17 	ldw	r5,-12(fp)
200881e0:	00882840 	call	20088284 <i2c_stop>

    return bSuccess;
200881e4:	e0bffb17 	ldw	r2,-20(fp)
}
200881e8:	e037883a 	mov	sp,fp
200881ec:	dfc00117 	ldw	ra,4(sp)
200881f0:	df000017 	ldw	fp,0(sp)
200881f4:	dec00204 	addi	sp,sp,8
200881f8:	f800283a 	ret

200881fc <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
200881fc:	defffc04 	addi	sp,sp,-16
20088200:	dfc00315 	stw	ra,12(sp)
20088204:	df000215 	stw	fp,8(sp)
20088208:	df000204 	addi	fp,sp,8
2008820c:	e13ffe15 	stw	r4,-8(fp)
20088210:	e17fff15 	stw	r5,-4(fp)

    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
20088214:	e0bfff17 	ldw	r2,-4(fp)
20088218:	10800104 	addi	r2,r2,4
2008821c:	1007883a 	mov	r3,r2
20088220:	00800044 	movi	r2,1
20088224:	18800035 	stwio	r2,0(r3)

    // start condition
    SDA_HIGH(data_base); // data high
20088228:	e0bfff17 	ldw	r2,-4(fp)
2008822c:	00c00044 	movi	r3,1
20088230:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base);
20088234:	e0bffe17 	ldw	r2,-8(fp)
20088238:	00c00044 	movi	r3,1
2008823c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
20088240:	01000044 	movi	r4,1
20088244:	009a1700 	call	2009a170 <usleep>

    SDA_LOW(data_base); // data low
20088248:	e0bfff17 	ldw	r2,-4(fp)
2008824c:	0007883a 	mov	r3,zero
20088250:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
20088254:	01000044 	movi	r4,1
20088258:	009a1700 	call	2009a170 <usleep>
    SCL_LOW(clk_base); // clock low
2008825c:	e0bffe17 	ldw	r2,-8(fp)
20088260:	0007883a 	mov	r3,zero
20088264:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
20088268:	01000044 	movi	r4,1
2008826c:	009a1700 	call	2009a170 <usleep>
}
20088270:	e037883a 	mov	sp,fp
20088274:	dfc00117 	ldw	ra,4(sp)
20088278:	df000017 	ldw	fp,0(sp)
2008827c:	dec00204 	addi	sp,sp,8
20088280:	f800283a 	ret

20088284 <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
20088284:	defffc04 	addi	sp,sp,-16
20088288:	dfc00315 	stw	ra,12(sp)
2008828c:	df000215 	stw	fp,8(sp)
20088290:	df000204 	addi	fp,sp,8
20088294:	e13ffe15 	stw	r4,-8(fp)
20088298:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0

    SDA_DIR_OUT(data_base);  // data output enabled
2008829c:	e0bfff17 	ldw	r2,-4(fp)
200882a0:	10800104 	addi	r2,r2,4
200882a4:	1007883a 	mov	r3,r2
200882a8:	00800044 	movi	r2,1
200882ac:	18800035 	stwio	r2,0(r3)
    SDA_LOW(data_base); // Data Low
200882b0:	e0bfff17 	ldw	r2,-4(fp)
200882b4:	0007883a 	mov	r3,zero
200882b8:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY;
    SCL_HIGH(clk_base);  // clock high
200882bc:	e0bffe17 	ldw	r2,-8(fp)
200882c0:	00c00044 	movi	r3,1
200882c4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high long delay
200882c8:	01000044 	movi	r4,1
200882cc:	009a1700 	call	2009a170 <usleep>
    SDA_HIGH(data_base); // data high
200882d0:	e0bfff17 	ldw	r2,-4(fp)
200882d4:	00c00044 	movi	r3,1
200882d8:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data high delay
200882dc:	01000044 	movi	r4,1
200882e0:	009a1700 	call	2009a170 <usleep>



}
200882e4:	e037883a 	mov	sp,fp
200882e8:	dfc00117 	ldw	ra,4(sp)
200882ec:	df000017 	ldw	fp,0(sp)
200882f0:	dec00204 	addi	sp,sp,8
200882f4:	f800283a 	ret

200882f8 <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
200882f8:	defff804 	addi	sp,sp,-32
200882fc:	dfc00715 	stw	ra,28(sp)
20088300:	df000615 	stw	fp,24(sp)
20088304:	df000604 	addi	fp,sp,24
20088308:	e13ffd15 	stw	r4,-12(fp)
2008830c:	e17ffe15 	stw	r5,-8(fp)
20088310:	3005883a 	mov	r2,r6
20088314:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 Mask = 0x80;
20088318:	00bfe004 	movi	r2,-128
2008831c:	e0bffa05 	stb	r2,-24(fp)
    bool bAck;
    int i;

    // assume, SCL = 0

    SDA_DIR_OUT(data_base);  // data write mode
20088320:	e0bffe17 	ldw	r2,-8(fp)
20088324:	10800104 	addi	r2,r2,4
20088328:	1007883a 	mov	r3,r2
2008832c:	00800044 	movi	r2,1
20088330:	18800035 	stwio	r2,0(r3)

    for(i=0;i<8;i++){
20088334:	e03ffb15 	stw	zero,-20(fp)
20088338:	00001f06 	br	200883b8 <i2c_write+0xc0>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
2008833c:	e0bffd17 	ldw	r2,-12(fp)
20088340:	0007883a 	mov	r3,zero
20088344:	10c00035 	stwio	r3,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
20088348:	e0ffff03 	ldbu	r3,-4(fp)
2008834c:	e0bffa03 	ldbu	r2,-24(fp)
20088350:	1884703a 	and	r2,r3,r2
20088354:	10803fcc 	andi	r2,r2,255
20088358:	10000426 	beq	r2,zero,2008836c <i2c_write+0x74>
            SDA_HIGH(data_base);
2008835c:	e0bffe17 	ldw	r2,-8(fp)
20088360:	00c00044 	movi	r3,1
20088364:	10c00035 	stwio	r3,0(r2)
20088368:	00000306 	br	20088378 <i2c_write+0x80>
        }else{
            SDA_LOW(data_base);
2008836c:	e0bffe17 	ldw	r2,-8(fp)
20088370:	0007883a 	mov	r3,zero
20088374:	10c00035 	stwio	r3,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
20088378:	e0bffa03 	ldbu	r2,-24(fp)
2008837c:	1004d07a 	srli	r2,r2,1
20088380:	e0bffa05 	stb	r2,-24(fp)
        // clock high
        SCL_HIGH(clk_base);
20088384:	e0bffd17 	ldw	r2,-12(fp)
20088388:	00c00044 	movi	r3,1
2008838c:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
20088390:	01000044 	movi	r4,1
20088394:	009a1700 	call	2009a170 <usleep>
        SCL_LOW(clk_base);
20088398:	e0bffd17 	ldw	r2,-12(fp)
2008839c:	0007883a 	mov	r3,zero
200883a0:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
200883a4:	01000044 	movi	r4,1
200883a8:	009a1700 	call	2009a170 <usleep>

    // assume, SCL = 0

    SDA_DIR_OUT(data_base);  // data write mode

    for(i=0;i<8;i++){
200883ac:	e0bffb17 	ldw	r2,-20(fp)
200883b0:	10800044 	addi	r2,r2,1
200883b4:	e0bffb15 	stw	r2,-20(fp)
200883b8:	e0bffb17 	ldw	r2,-20(fp)
200883bc:	10800210 	cmplti	r2,r2,8
200883c0:	103fde1e 	bne	r2,zero,2008833c <__flash_rwdata_start+0xfffe9768>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }

    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
200883c4:	e0bffe17 	ldw	r2,-8(fp)
200883c8:	10800104 	addi	r2,r2,4
200883cc:	0007883a 	mov	r3,zero
200883d0:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
200883d4:	e0bffd17 	ldw	r2,-12(fp)
200883d8:	00c00044 	movi	r3,1
200883dc:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;  // clock high delay
200883e0:	01000044 	movi	r4,1
200883e4:	009a1700 	call	2009a170 <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
200883e8:	e0bffe17 	ldw	r2,-8(fp)
200883ec:	10800037 	ldwio	r2,0(r2)
200883f0:	1005003a 	cmpeq	r2,r2,zero
200883f4:	10803fcc 	andi	r2,r2,255
200883f8:	e0bffc15 	stw	r2,-16(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low
200883fc:	e0bffd17 	ldw	r2,-12(fp)
20088400:	0007883a 	mov	r3,zero
20088404:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
20088408:	01000044 	movi	r4,1
2008840c:	009a1700 	call	2009a170 <usleep>
    return bAck;
20088410:	e0bffc17 	ldw	r2,-16(fp)
}
20088414:	e037883a 	mov	sp,fp
20088418:	dfc00117 	ldw	ra,4(sp)
2008841c:	df000017 	ldw	fp,0(sp)
20088420:	dec00204 	addi	sp,sp,8
20088424:	f800283a 	ret

20088428 <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
20088428:	defff804 	addi	sp,sp,-32
2008842c:	dfc00715 	stw	ra,28(sp)
20088430:	df000615 	stw	fp,24(sp)
20088434:	df000604 	addi	fp,sp,24
20088438:	e13ffc15 	stw	r4,-16(fp)
2008843c:	e17ffd15 	stw	r5,-12(fp)
20088440:	e1bffe15 	stw	r6,-8(fp)
20088444:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
20088448:	e03ffa05 	stb	zero,-24(fp)
    int i;

    // assume SCL = low

    SDA_DIR_IN(data_base);  // set data read mode
2008844c:	e0bffd17 	ldw	r2,-12(fp)
20088450:	10800104 	addi	r2,r2,4
20088454:	0007883a 	mov	r3,zero
20088458:	10c00035 	stwio	r3,0(r2)
    SCL_LOW(clk_base); // clock low
2008845c:	e0bffc17 	ldw	r2,-16(fp)
20088460:	0007883a 	mov	r3,zero
20088464:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
20088468:	01000044 	movi	r4,1
2008846c:	009a1700 	call	2009a170 <usleep>

    for(i=0;i<8;i++){
20088470:	e03ffb15 	stw	zero,-20(fp)
20088474:	00001606 	br	200884d0 <i2c_read+0xa8>
        Data <<= 1;
20088478:	e0bffa03 	ldbu	r2,-24(fp)
2008847c:	1085883a 	add	r2,r2,r2
20088480:	e0bffa05 	stb	r2,-24(fp)
        SCL_HIGH(clk_base);  // clock high
20088484:	e0bffc17 	ldw	r2,-16(fp)
20088488:	00c00044 	movi	r3,1
2008848c:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
20088490:	01000044 	movi	r4,1
20088494:	009a1700 	call	2009a170 <usleep>
        if (SDA_READ(data_base))  // read data
20088498:	e0bffd17 	ldw	r2,-12(fp)
2008849c:	10800037 	ldwio	r2,0(r2)
200884a0:	10000326 	beq	r2,zero,200884b0 <i2c_read+0x88>
            Data |= 0x01;
200884a4:	e0bffa03 	ldbu	r2,-24(fp)
200884a8:	10800054 	ori	r2,r2,1
200884ac:	e0bffa05 	stb	r2,-24(fp)
        SCL_LOW(clk_base);  // clock log
200884b0:	e0bffc17 	ldw	r2,-16(fp)
200884b4:	0007883a 	mov	r3,zero
200884b8:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
200884bc:	01000044 	movi	r4,1
200884c0:	009a1700 	call	2009a170 <usleep>

    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
200884c4:	e0bffb17 	ldw	r2,-20(fp)
200884c8:	10800044 	addi	r2,r2,1
200884cc:	e0bffb15 	stw	r2,-20(fp)
200884d0:	e0bffb17 	ldw	r2,-20(fp)
200884d4:	10800210 	cmplti	r2,r2,8
200884d8:	103fe71e 	bne	r2,zero,20088478 <__flash_rwdata_start+0xfffe98a4>
        SCL_LOW(clk_base);  // clock log
        SCL_DELAY;
    }

    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
200884dc:	e0bffc17 	ldw	r2,-16(fp)
200884e0:	0007883a 	mov	r3,zero
200884e4:	10c00035 	stwio	r3,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
200884e8:	e0bffd17 	ldw	r2,-12(fp)
200884ec:	10800104 	addi	r2,r2,4
200884f0:	1007883a 	mov	r3,r2
200884f4:	00800044 	movi	r2,1
200884f8:	18800035 	stwio	r2,0(r3)
    if (bAck)
200884fc:	e0bfff17 	ldw	r2,-4(fp)
20088500:	10000426 	beq	r2,zero,20088514 <i2c_read+0xec>
        SDA_LOW(data_base);
20088504:	e0bffd17 	ldw	r2,-12(fp)
20088508:	0007883a 	mov	r3,zero
2008850c:	10c00035 	stwio	r3,0(r2)
20088510:	00000306 	br	20088520 <i2c_read+0xf8>
    else
        SDA_HIGH(data_base);
20088514:	e0bffd17 	ldw	r2,-12(fp)
20088518:	00c00044 	movi	r3,1
2008851c:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base); // clock high
20088520:	e0bffc17 	ldw	r2,-16(fp)
20088524:	00c00044 	movi	r3,1
20088528:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high  delay
2008852c:	01000044 	movi	r4,1
20088530:	009a1700 	call	2009a170 <usleep>
    SCL_LOW(clk_base); // clock low
20088534:	e0bffc17 	ldw	r2,-16(fp)
20088538:	0007883a 	mov	r3,zero
2008853c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
20088540:	01000044 	movi	r4,1
20088544:	009a1700 	call	2009a170 <usleep>
    SDA_LOW(data_base);  // data low
20088548:	e0bffd17 	ldw	r2,-12(fp)
2008854c:	0007883a 	mov	r3,zero
20088550:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data low delay
20088554:	01000044 	movi	r4,1
20088558:	009a1700 	call	2009a170 <usleep>
//    SDA_DIR_IN;  // set data read mode

    *pData = Data;
2008855c:	e0bffe17 	ldw	r2,-8(fp)
20088560:	e0fffa03 	ldbu	r3,-24(fp)
20088564:	10c00005 	stb	r3,0(r2)
}
20088568:	e037883a 	mov	sp,fp
2008856c:	dfc00117 	ldw	ra,4(sp)
20088570:	df000017 	ldw	fp,0(sp)
20088574:	dec00204 	addi	sp,sp,8
20088578:	f800283a 	ret

2008857c <timer1_isr>:
volatile uint32_t ready_frames = 0;

volatile BUTTON_COMMANDS command = NO_CMD;

static void timer1_isr(void *context)
{
2008857c:	defffd04 	addi	sp,sp,-12
20088580:	dfc00215 	stw	ra,8(sp)
20088584:	df000115 	stw	fp,4(sp)
20088588:	df000104 	addi	fp,sp,4
2008858c:	e13fff15 	stw	r4,-4(fp)
	//ack interupt
	IOWR(TIMER_1_BASE, 0, 0);
20088590:	0007883a 	mov	r3,zero
20088594:	00880434 	movhi	r2,8208
20088598:	10850004 	addi	r2,r2,5120
2008859c:	10c00035 	stwio	r3,0(r2)

#ifdef PERIODIC_VIDEO
    if(is_video_playing && (disp != (void *)0) && ready_frames)
200885a0:	d0a00017 	ldw	r2,-32768(gp)
200885a4:	10000e26 	beq	r2,zero,200885e0 <timer1_isr+0x64>
200885a8:	00800034 	movhi	r2,0
200885ac:	108aa604 	addi	r2,r2,10904
200885b0:	10800017 	ldw	r2,0(r2)
200885b4:	10000a26 	beq	r2,zero,200885e0 <timer1_isr+0x64>
200885b8:	d0a01f17 	ldw	r2,-32644(gp)
200885bc:	10000826 	beq	r2,zero,200885e0 <timer1_isr+0x64>
	{
    	ready_frames--;
200885c0:	d0a01f17 	ldw	r2,-32644(gp)
200885c4:	10bfffc4 	addi	r2,r2,-1
200885c8:	d0a01f15 	stw	r2,-32644(gp)
	    ece423_video_display_switch_frames(disp);
200885cc:	00800034 	movhi	r2,0
200885d0:	108aa604 	addi	r2,r2,10904
200885d4:	10800017 	ldw	r2,0(r2)
200885d8:	1009883a 	mov	r4,r2
200885dc:	00876a40 	call	200876a4 <ece423_video_display_switch_frames>
	}
#endif
}
200885e0:	e037883a 	mov	sp,fp
200885e4:	dfc00117 	ldw	ra,4(sp)
200885e8:	df000017 	ldw	fp,0(sp)
200885ec:	dec00204 	addi	sp,sp,8
200885f0:	f800283a 	ret

200885f4 <pio_isr>:

static void pio_isr(void *context)
{
200885f4:	defffd04 	addi	sp,sp,-12
200885f8:	df000215 	stw	fp,8(sp)
200885fc:	df000204 	addi	fp,sp,8
20088600:	e13fff15 	stw	r4,-4(fp)
	int buttons_pressed;
	//ack interupt
    IOWR(KEY_BASE, 3, 0);
20088604:	0007883a 	mov	r3,zero
20088608:	00880434 	movhi	r2,8208
2008860c:	10856f04 	addi	r2,r2,5564
20088610:	10c00035 	stwio	r3,0(r2)

    buttons_pressed = IORD(KEY_BASE, 0);
20088614:	00880434 	movhi	r2,8208
20088618:	10856c04 	addi	r2,r2,5552
2008861c:	10800037 	ldwio	r2,0(r2)
20088620:	e0bffe15 	stw	r2,-8(fp)

    if (command != NO_CMD)
20088624:	d0a00117 	ldw	r2,-32764(gp)
20088628:	10800160 	cmpeqi	r2,r2,5
2008862c:	1000011e 	bne	r2,zero,20088634 <pio_isr+0x40>
    {
   	    return;
20088630:	00001b06 	br	200886a0 <pio_isr+0xac>
    }

    if((buttons_pressed & (1 << 0)) == 0)
20088634:	e0bffe17 	ldw	r2,-8(fp)
20088638:	1080004c 	andi	r2,r2,1
2008863c:	1000071e 	bne	r2,zero,2008865c <pio_isr+0x68>
    {
    	if(is_video_playing)
20088640:	d0a00017 	ldw	r2,-32768(gp)
20088644:	10000326 	beq	r2,zero,20088654 <pio_isr+0x60>
    	{
    		command = PAUSE;
20088648:	00800044 	movi	r2,1
2008864c:	d0a00115 	stw	r2,-32764(gp)
20088650:	00001306 	br	200886a0 <pio_isr+0xac>
    	}
    	else
    	{
    		command = START;
20088654:	d0200115 	stw	zero,-32764(gp)
20088658:	00001106 	br	200886a0 <pio_isr+0xac>
    	}
    }
    else if((buttons_pressed & (1 << 1)) == 0)
2008865c:	e0bffe17 	ldw	r2,-8(fp)
20088660:	1080008c 	andi	r2,r2,2
20088664:	1000031e 	bne	r2,zero,20088674 <pio_isr+0x80>
    {
    	command = CYCLE;
20088668:	00800084 	movi	r2,2
2008866c:	d0a00115 	stw	r2,-32764(gp)
20088670:	00000b06 	br	200886a0 <pio_isr+0xac>
    }
    else if((buttons_pressed & (1 << 2)) == 0)
20088674:	e0bffe17 	ldw	r2,-8(fp)
20088678:	1080010c 	andi	r2,r2,4
2008867c:	1000031e 	bne	r2,zero,2008868c <pio_isr+0x98>
    {
    	command = REWIND;
20088680:	008000c4 	movi	r2,3
20088684:	d0a00115 	stw	r2,-32764(gp)
20088688:	00000506 	br	200886a0 <pio_isr+0xac>
    }
    else if((buttons_pressed & (1 << 3)) == 0)
2008868c:	e0bffe17 	ldw	r2,-8(fp)
20088690:	1080020c 	andi	r2,r2,8
20088694:	1000021e 	bne	r2,zero,200886a0 <pio_isr+0xac>
    {
    	command = FORWARD;
20088698:	00800104 	movi	r2,4
2008869c:	d0a00115 	stw	r2,-32764(gp)
    }
}
200886a0:	e037883a 	mov	sp,fp
200886a4:	df000017 	ldw	fp,0(sp)
200886a8:	dec00104 	addi	sp,sp,4
200886ac:	f800283a 	ret

200886b0 <interrupts_init>:

static void interrupts_init(void)
{
200886b0:	defff604 	addi	sp,sp,-40
200886b4:	dfc00915 	stw	ra,36(sp)
200886b8:	df000815 	stw	fp,32(sp)
200886bc:	df000804 	addi	fp,sp,32
	  IOWR(KEY_BASE, 2, 0xF); // interupt on all buttons
200886c0:	00c003c4 	movi	r3,15
200886c4:	00880434 	movhi	r2,8208
200886c8:	10856e04 	addi	r2,r2,5560
200886cc:	10c00035 	stwio	r3,0(r2)
	  alt_irq_register(KEY_IRQ, (void *)0, pio_isr);
200886d0:	01000084 	movi	r4,2
200886d4:	000b883a 	mov	r5,zero
200886d8:	01880274 	movhi	r6,8201
200886dc:	31a17d04 	addi	r6,r6,-31244
200886e0:	009979c0 	call	2009979c <alt_irq_register>
200886e4:	00800084 	movi	r2,2
200886e8:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200886ec:	0005303a 	rdctl	r2,status
200886f0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200886f4:	e0fff917 	ldw	r3,-28(fp)
200886f8:	00bfff84 	movi	r2,-2
200886fc:	1884703a 	and	r2,r3,r2
20088700:	1001703a 	wrctl	status,r2
  
  return context;
20088704:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
20088708:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active |= (1 << id);
2008870c:	e0bff817 	ldw	r2,-32(fp)
20088710:	00c00044 	movi	r3,1
20088714:	1884983a 	sll	r2,r3,r2
20088718:	1007883a 	mov	r3,r2
2008871c:	00800034 	movhi	r2,0
20088720:	108ab604 	addi	r2,r2,10968
20088724:	10800017 	ldw	r2,0(r2)
20088728:	1886b03a 	or	r3,r3,r2
2008872c:	00800034 	movhi	r2,0
20088730:	108ab604 	addi	r2,r2,10968
20088734:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
20088738:	00800034 	movhi	r2,0
2008873c:	108ab604 	addi	r2,r2,10968
20088740:	10800017 	ldw	r2,0(r2)
20088744:	100170fa 	wrctl	ienable,r2
20088748:	e0bffa17 	ldw	r2,-24(fp)
2008874c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20088750:	e0bffb17 	ldw	r2,-20(fp)
20088754:	1001703a 	wrctl	status,r2
	  //1 second
	  //IOWR(TIMER_1_BASE, 3, 0x0832);
	  //IOWR(TIMER_1_BASE, 2, 0x1560);

	  //0.7 seconds
	  IOWR(TIMER_1_BASE, 3, 0x0537);
20088758:	00c14dc4 	movi	r3,1335
2008875c:	00880434 	movhi	r2,8208
20088760:	10850304 	addi	r2,r2,5132
20088764:	10c00035 	stwio	r3,0(r2)
	  IOWR(TIMER_1_BASE, 2, 0x24E0);
20088768:	00c93804 	movi	r3,9440
2008876c:	00880434 	movhi	r2,8208
20088770:	10850204 	addi	r2,r2,5128
20088774:	10c00035 	stwio	r3,0(r2)

	 //                      START   CONT   ITO
	  IOWR(TIMER_1_BASE, 1, (1<<2) |(1<<1) | 1 );
20088778:	00c001c4 	movi	r3,7
2008877c:	00880434 	movhi	r2,8208
20088780:	10850104 	addi	r2,r2,5124
20088784:	10c00035 	stwio	r3,0(r2)

	  alt_irq_register(TIMER_1_IRQ, (void *)0, timer1_isr);
20088788:	01000104 	movi	r4,4
2008878c:	000b883a 	mov	r5,zero
20088790:	01880274 	movhi	r6,8201
20088794:	31a15f04 	addi	r6,r6,-31364
20088798:	009979c0 	call	2009979c <alt_irq_register>
2008879c:	00800104 	movi	r2,4
200887a0:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200887a4:	0005303a 	rdctl	r2,status
200887a8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200887ac:	e0fffd17 	ldw	r3,-12(fp)
200887b0:	00bfff84 	movi	r2,-2
200887b4:	1884703a 	and	r2,r3,r2
200887b8:	1001703a 	wrctl	status,r2
  
  return context;
200887bc:	e0bffd17 	ldw	r2,-12(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
200887c0:	e0bffe15 	stw	r2,-8(fp)

  alt_irq_active |= (1 << id);
200887c4:	e0bffc17 	ldw	r2,-16(fp)
200887c8:	00c00044 	movi	r3,1
200887cc:	1884983a 	sll	r2,r3,r2
200887d0:	1007883a 	mov	r3,r2
200887d4:	00800034 	movhi	r2,0
200887d8:	108ab604 	addi	r2,r2,10968
200887dc:	10800017 	ldw	r2,0(r2)
200887e0:	1886b03a 	or	r3,r3,r2
200887e4:	00800034 	movhi	r2,0
200887e8:	108ab604 	addi	r2,r2,10968
200887ec:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
200887f0:	00800034 	movhi	r2,0
200887f4:	108ab604 	addi	r2,r2,10968
200887f8:	10800017 	ldw	r2,0(r2)
200887fc:	100170fa 	wrctl	ienable,r2
20088800:	e0bffe17 	ldw	r2,-8(fp)
20088804:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20088808:	e0bfff17 	ldw	r2,-4(fp)
2008880c:	1001703a 	wrctl	status,r2
	  alt_irq_enable(TIMER_1_IRQ);
}
20088810:	e037883a 	mov	sp,fp
20088814:	dfc00117 	ldw	ra,4(sp)
20088818:	df000017 	ldw	fp,0(sp)
2008881c:	dec00204 	addi	sp,sp,8
20088820:	f800283a 	ret

20088824 <main>:

int main (int argc, const char * argv[])
{
20088824:	deffac04 	addi	sp,sp,-336
20088828:	dfc05315 	stw	ra,332(sp)
2008882c:	df005215 	stw	fp,328(sp)
20088830:	dc005115 	stw	r16,324(sp)
20088834:	df005204 	addi	fp,sp,328
20088838:	e13ffd15 	stw	r4,-12(fp)
2008883c:	e17ffe15 	stw	r5,-8(fp)
	  SDLIB_Init(SD_CONT_0_BASE);
20088840:	01080434 	movhi	r4,8208
20088844:	21040004 	addi	r4,r4,4096
20088848:	008720c0 	call	2008720c <SDLIB_Init>

	  FAT_HANDLE sd_fat_handle = Fat_Mount();
2008884c:	00823380 	call	20082338 <Fat_Mount>
20088850:	e0bfb015 	stw	r2,-320(fp)

	  FAT_BROWSE_HANDLE browse_handle;

	  Fat_FileBrowseBegin(sd_fat_handle, &browse_handle);
20088854:	e0bfb104 	addi	r2,fp,-316
20088858:	e13fb017 	ldw	r4,-320(fp)
2008885c:	100b883a 	mov	r5,r2
20088860:	00824140 	call	20082414 <Fat_FileBrowseBegin>

	  int video_found_flag = FALSE;
20088864:	e03fae15 	stw	zero,-328(fp)
	  FILE_CONTEXT file_context;

	  char *p_filename;

	  interrupts_init();
20088868:	00886b00 	call	200886b0 <interrupts_init>

	  while(1)
	  {
		  if(Fat_FileBrowseNext(&browse_handle, &file_context) == FALSE)
2008886c:	e0ffb104 	addi	r3,fp,-316
20088870:	e0bfb304 	addi	r2,fp,-308
20088874:	1809883a 	mov	r4,r3
20088878:	100b883a 	mov	r5,r2
2008887c:	00824800 	call	20082480 <Fat_FileBrowseNext>
20088880:	1000041e 	bne	r2,zero,20088894 <main+0x70>
			  Fat_FileBrowseBegin(sd_fat_handle, &browse_handle);
20088884:	e0bfb104 	addi	r2,fp,-316
20088888:	e13fb017 	ldw	r4,-320(fp)
2008888c:	100b883a 	mov	r5,r2
20088890:	00824140 	call	20082414 <Fat_FileBrowseBegin>

		if(Fat_CheckExtension(&file_context, ".MPG"))
20088894:	e0bfb304 	addi	r2,fp,-308
20088898:	1009883a 	mov	r4,r2
2008889c:	01400034 	movhi	r5,0
200888a0:	29414704 	addi	r5,r5,1308
200888a4:	0082b5c0 	call	20082b5c <Fat_CheckExtension>
200888a8:	10000626 	beq	r2,zero,200888c4 <main+0xa0>
		{
		    p_filename = Fat_GetFileName(&file_context);
200888ac:	e0bfb304 	addi	r2,fp,-308
200888b0:	1009883a 	mov	r4,r2
200888b4:	0082bd00 	call	20082bd0 <Fat_GetFileName>
200888b8:	e0bfaf15 	stw	r2,-324(fp)
			video_found_flag = TRUE;
200888bc:	00800044 	movi	r2,1
200888c0:	e0bfae15 	stw	r2,-328(fp)
		}


		if(video_found_flag)
200888c4:	e0bfae17 	ldw	r2,-328(fp)
200888c8:	10002226 	beq	r2,zero,20088954 <main+0x130>
		{
			mjpeg423_decode(p_filename, sd_fat_handle);
200888cc:	e13faf17 	ldw	r4,-324(fp)
200888d0:	e17fb017 	ldw	r5,-320(fp)
200888d4:	00815380 	call	20081538 <mjpeg423_decode>
			if(command != CYCLE)
200888d8:	d0a00117 	ldw	r2,-32764(gp)
200888dc:	108000a0 	cmpeqi	r2,r2,2
200888e0:	1000081e 	bne	r2,zero,20088904 <main+0xe0>
			{
				while(ready_frames != 0)
200888e4:	00000306 	br	200888f4 <main+0xd0>
				{
				    if(!is_video_playing)
200888e8:	d0a00017 	ldw	r2,-32768(gp)
200888ec:	1000011e 	bne	r2,zero,200888f4 <main+0xd0>
					{
				    	while(1);
200888f0:	003fff06 	br	200888f0 <__flash_rwdata_start+0xfffe9d1c>
		if(video_found_flag)
		{
			mjpeg423_decode(p_filename, sd_fat_handle);
			if(command != CYCLE)
			{
				while(ready_frames != 0)
200888f4:	d0a01f17 	ldw	r2,-32644(gp)
200888f8:	103ffb1e 	bne	r2,zero,200888e8 <__flash_rwdata_start+0xfffe9d14>
				    	while(1);
						ready_frames = 0;
						ece423_video_display_switch_frames(disp);
					}
				}
				is_video_playing = FALSE;
200888fc:	d0200015 	stw	zero,-32768(gp)
20088900:	00001306 	br	20088950 <main+0x12c>
			}
			else
			{
				disp->buffer_being_written = ((disp->buffer_being_displayed + 1)
20088904:	00800034 	movhi	r2,0
20088908:	108aa604 	addi	r2,r2,10904
2008890c:	14000017 	ldw	r16,0(r2)
20088910:	00800034 	movhi	r2,0
20088914:	108aa604 	addi	r2,r2,10904
20088918:	10800017 	ldw	r2,0(r2)
2008891c:	10801a17 	ldw	r2,104(r2)
20088920:	10c00044 	addi	r3,r2,1
						% disp->num_frame_buffers);
20088924:	00800034 	movhi	r2,0
20088928:	108aa604 	addi	r2,r2,10904
2008892c:	10800017 	ldw	r2,0(r2)
20088930:	10802017 	ldw	r2,128(r2)
20088934:	1809883a 	mov	r4,r3
20088938:	100b883a 	mov	r5,r2
2008893c:	0088a180 	call	20088a18 <__modsi3>
				}
				is_video_playing = FALSE;
			}
			else
			{
				disp->buffer_being_written = ((disp->buffer_being_displayed + 1)
20088940:	80801b15 	stw	r2,108(r16)
						% disp->num_frame_buffers);
				ready_frames = 0;
20088944:	d0201f15 	stw	zero,-32644(gp)
			    command = NO_CMD;
20088948:	00800144 	movi	r2,5
2008894c:	d0a00115 	stw	r2,-32764(gp)
			}
			video_found_flag = FALSE;
20088950:	e03fae15 	stw	zero,-328(fp)

			//When cycling, if the video was paused, then cycle to the next video paused. And vice versa.

		}
	  }
20088954:	003fc506 	br	2008886c <__flash_rwdata_start+0xfffe9c98>

20088958 <udivmodsi4>:
20088958:	2900182e 	bgeu	r5,r4,200889bc <udivmodsi4+0x64>
2008895c:	28001716 	blt	r5,zero,200889bc <udivmodsi4+0x64>
20088960:	00800804 	movi	r2,32
20088964:	00c00044 	movi	r3,1
20088968:	00000206 	br	20088974 <udivmodsi4+0x1c>
2008896c:	10001126 	beq	r2,zero,200889b4 <udivmodsi4+0x5c>
20088970:	28000516 	blt	r5,zero,20088988 <udivmodsi4+0x30>
20088974:	294b883a 	add	r5,r5,r5
20088978:	10bfffc4 	addi	r2,r2,-1
2008897c:	18c7883a 	add	r3,r3,r3
20088980:	293ffa36 	bltu	r5,r4,2008896c <__flash_rwdata_start+0xfffe9d98>
20088984:	18000b26 	beq	r3,zero,200889b4 <udivmodsi4+0x5c>
20088988:	0005883a 	mov	r2,zero
2008898c:	21400236 	bltu	r4,r5,20088998 <udivmodsi4+0x40>
20088990:	2149c83a 	sub	r4,r4,r5
20088994:	10c4b03a 	or	r2,r2,r3
20088998:	1806d07a 	srli	r3,r3,1
2008899c:	280ad07a 	srli	r5,r5,1
200889a0:	183ffa1e 	bne	r3,zero,2008898c <__flash_rwdata_start+0xfffe9db8>
200889a4:	3000011e 	bne	r6,zero,200889ac <udivmodsi4+0x54>
200889a8:	f800283a 	ret
200889ac:	2005883a 	mov	r2,r4
200889b0:	f800283a 	ret
200889b4:	0005883a 	mov	r2,zero
200889b8:	003ffa06 	br	200889a4 <__flash_rwdata_start+0xfffe9dd0>
200889bc:	00c00044 	movi	r3,1
200889c0:	003ff106 	br	20088988 <__flash_rwdata_start+0xfffe9db4>

200889c4 <__divsi3>:
200889c4:	defffe04 	addi	sp,sp,-8
200889c8:	dfc00115 	stw	ra,4(sp)
200889cc:	dc000015 	stw	r16,0(sp)
200889d0:	20000b16 	blt	r4,zero,20088a00 <__divsi3+0x3c>
200889d4:	0021883a 	mov	r16,zero
200889d8:	28000c16 	blt	r5,zero,20088a0c <__divsi3+0x48>
200889dc:	000d883a 	mov	r6,zero
200889e0:	00889580 	call	20088958 <udivmodsi4>
200889e4:	0407c83a 	sub	r3,zero,r16
200889e8:	1884f03a 	xor	r2,r3,r2
200889ec:	1405883a 	add	r2,r2,r16
200889f0:	dfc00117 	ldw	ra,4(sp)
200889f4:	dc000017 	ldw	r16,0(sp)
200889f8:	dec00204 	addi	sp,sp,8
200889fc:	f800283a 	ret
20088a00:	0109c83a 	sub	r4,zero,r4
20088a04:	04000044 	movi	r16,1
20088a08:	283ff40e 	bge	r5,zero,200889dc <__flash_rwdata_start+0xfffe9e08>
20088a0c:	014bc83a 	sub	r5,zero,r5
20088a10:	8400005c 	xori	r16,r16,1
20088a14:	003ff106 	br	200889dc <__flash_rwdata_start+0xfffe9e08>

20088a18 <__modsi3>:
20088a18:	defffd04 	addi	sp,sp,-12
20088a1c:	dfc00215 	stw	ra,8(sp)
20088a20:	dc400115 	stw	r17,4(sp)
20088a24:	dc000015 	stw	r16,0(sp)
20088a28:	20000c16 	blt	r4,zero,20088a5c <__modsi3+0x44>
20088a2c:	0023883a 	mov	r17,zero
20088a30:	0021883a 	mov	r16,zero
20088a34:	28000d16 	blt	r5,zero,20088a6c <__modsi3+0x54>
20088a38:	01800044 	movi	r6,1
20088a3c:	00889580 	call	20088958 <udivmodsi4>
20088a40:	1404f03a 	xor	r2,r2,r16
20088a44:	8885883a 	add	r2,r17,r2
20088a48:	dfc00217 	ldw	ra,8(sp)
20088a4c:	dc400117 	ldw	r17,4(sp)
20088a50:	dc000017 	ldw	r16,0(sp)
20088a54:	dec00304 	addi	sp,sp,12
20088a58:	f800283a 	ret
20088a5c:	0109c83a 	sub	r4,zero,r4
20088a60:	04400044 	movi	r17,1
20088a64:	043fffc4 	movi	r16,-1
20088a68:	283ff30e 	bge	r5,zero,20088a38 <__flash_rwdata_start+0xfffe9e64>
20088a6c:	014bc83a 	sub	r5,zero,r5
20088a70:	003ff106 	br	20088a38 <__flash_rwdata_start+0xfffe9e64>

20088a74 <__udivsi3>:
20088a74:	000d883a 	mov	r6,zero
20088a78:	00889581 	jmpi	20088958 <udivmodsi4>

20088a7c <__umodsi3>:
20088a7c:	01800044 	movi	r6,1
20088a80:	00889581 	jmpi	20088958 <udivmodsi4>

20088a84 <__divsf3>:
20088a84:	defff504 	addi	sp,sp,-44
20088a88:	dd000515 	stw	r20,20(sp)
20088a8c:	2028d5fa 	srli	r20,r4,23
20088a90:	dd400615 	stw	r21,24(sp)
20088a94:	202ad7fa 	srli	r21,r4,31
20088a98:	00c02034 	movhi	r3,128
20088a9c:	dcc00415 	stw	r19,16(sp)
20088aa0:	dc800315 	stw	r18,12(sp)
20088aa4:	18ffffc4 	addi	r3,r3,-1
20088aa8:	dfc00a15 	stw	ra,40(sp)
20088aac:	df000915 	stw	fp,36(sp)
20088ab0:	ddc00815 	stw	r23,32(sp)
20088ab4:	dd800715 	stw	r22,28(sp)
20088ab8:	dc400215 	stw	r17,8(sp)
20088abc:	dc000115 	stw	r16,4(sp)
20088ac0:	a5003fcc 	andi	r20,r20,255
20088ac4:	1924703a 	and	r18,r3,r4
20088ac8:	acc03fcc 	andi	r19,r21,255
20088acc:	a0004d26 	beq	r20,zero,20088c04 <__divsf3+0x180>
20088ad0:	00803fc4 	movi	r2,255
20088ad4:	a0802e26 	beq	r20,r2,20088b90 <__divsf3+0x10c>
20088ad8:	91002034 	orhi	r4,r18,128
20088adc:	202490fa 	slli	r18,r4,3
20088ae0:	a53fe044 	addi	r20,r20,-127
20088ae4:	0021883a 	mov	r16,zero
20088ae8:	002f883a 	mov	r23,zero
20088aec:	2804d5fa 	srli	r2,r5,23
20088af0:	282cd7fa 	srli	r22,r5,31
20088af4:	00c02034 	movhi	r3,128
20088af8:	18ffffc4 	addi	r3,r3,-1
20088afc:	10803fcc 	andi	r2,r2,255
20088b00:	1962703a 	and	r17,r3,r5
20088b04:	b7003fcc 	andi	fp,r22,255
20088b08:	10004526 	beq	r2,zero,20088c20 <__divsf3+0x19c>
20088b0c:	00c03fc4 	movi	r3,255
20088b10:	10c04026 	beq	r2,r3,20088c14 <__divsf3+0x190>
20088b14:	88c02034 	orhi	r3,r17,128
20088b18:	182290fa 	slli	r17,r3,3
20088b1c:	10bfe044 	addi	r2,r2,-127
20088b20:	0009883a 	mov	r4,zero
20088b24:	2420b03a 	or	r16,r4,r16
20088b28:	802090ba 	slli	r16,r16,2
20088b2c:	01c80274 	movhi	r7,8201
20088b30:	39e2d404 	addi	r7,r7,-29872
20088b34:	81e1883a 	add	r16,r16,r7
20088b38:	80c00017 	ldw	r3,0(r16)
20088b3c:	ad8af03a 	xor	r5,r21,r22
20088b40:	280d883a 	mov	r6,r5
20088b44:	a085c83a 	sub	r2,r20,r2
20088b48:	29403fcc 	andi	r5,r5,255
20088b4c:	1800683a 	jmp	r3
20088b50:	20088d5c 	xori	zero,r4,8757
20088b54:	20088d04 	addi	zero,r4,8756
20088b58:	20088d28 	cmpgeui	zero,r4,8756
20088b5c:	20088cf0 	cmpltui	zero,r4,8755
20088b60:	20088d28 	cmpgeui	zero,r4,8756
20088b64:	20088ba0 	cmpeqi	zero,r4,8750
20088b68:	20088d28 	cmpgeui	zero,r4,8756
20088b6c:	20088cf0 	cmpltui	zero,r4,8755
20088b70:	20088d04 	addi	zero,r4,8756
20088b74:	20088d04 	addi	zero,r4,8756
20088b78:	20088ba0 	cmpeqi	zero,r4,8750
20088b7c:	20088cf0 	cmpltui	zero,r4,8755
20088b80:	20088df4 	orhi	zero,r4,8759
20088b84:	20088df4 	orhi	zero,r4,8759
20088b88:	20088df4 	orhi	zero,r4,8759
20088b8c:	20088d34 	orhi	zero,r4,8756
20088b90:	9000531e 	bne	r18,zero,20088ce0 <__divsf3+0x25c>
20088b94:	04000204 	movi	r16,8
20088b98:	05c00084 	movi	r23,2
20088b9c:	003fd306 	br	20088aec <__flash_rwdata_start+0xfffe9f18>
20088ba0:	00c02034 	movhi	r3,128
20088ba4:	000d883a 	mov	r6,zero
20088ba8:	18ffffc4 	addi	r3,r3,-1
20088bac:	013fffc4 	movi	r4,-1
20088bb0:	21003fcc 	andi	r4,r4,255
20088bb4:	200895fa 	slli	r4,r4,23
20088bb8:	30803fcc 	andi	r2,r6,255
20088bbc:	01802034 	movhi	r6,128
20088bc0:	31bfffc4 	addi	r6,r6,-1
20088bc4:	100497fa 	slli	r2,r2,31
20088bc8:	1986703a 	and	r3,r3,r6
20088bcc:	1906b03a 	or	r3,r3,r4
20088bd0:	1884b03a 	or	r2,r3,r2
20088bd4:	dfc00a17 	ldw	ra,40(sp)
20088bd8:	df000917 	ldw	fp,36(sp)
20088bdc:	ddc00817 	ldw	r23,32(sp)
20088be0:	dd800717 	ldw	r22,28(sp)
20088be4:	dd400617 	ldw	r21,24(sp)
20088be8:	dd000517 	ldw	r20,20(sp)
20088bec:	dcc00417 	ldw	r19,16(sp)
20088bf0:	dc800317 	ldw	r18,12(sp)
20088bf4:	dc400217 	ldw	r17,8(sp)
20088bf8:	dc000117 	ldw	r16,4(sp)
20088bfc:	dec00b04 	addi	sp,sp,44
20088c00:	f800283a 	ret
20088c04:	90002b1e 	bne	r18,zero,20088cb4 <__divsf3+0x230>
20088c08:	04000104 	movi	r16,4
20088c0c:	05c00044 	movi	r23,1
20088c10:	003fb606 	br	20088aec <__flash_rwdata_start+0xfffe9f18>
20088c14:	8800251e 	bne	r17,zero,20088cac <__divsf3+0x228>
20088c18:	01000084 	movi	r4,2
20088c1c:	00000206 	br	20088c28 <__divsf3+0x1a4>
20088c20:	88001a1e 	bne	r17,zero,20088c8c <__divsf3+0x208>
20088c24:	01000044 	movi	r4,1
20088c28:	2420b03a 	or	r16,r4,r16
20088c2c:	802090ba 	slli	r16,r16,2
20088c30:	00c80274 	movhi	r3,8201
20088c34:	18e31304 	addi	r3,r3,-29620
20088c38:	80e1883a 	add	r16,r16,r3
20088c3c:	80c00017 	ldw	r3,0(r16)
20088c40:	ad8af03a 	xor	r5,r21,r22
20088c44:	a085c83a 	sub	r2,r20,r2
20088c48:	1800683a 	jmp	r3
20088c4c:	20088d04 	addi	zero,r4,8756
20088c50:	20088d04 	addi	zero,r4,8756
20088c54:	20088e54 	ori	zero,r4,8761
20088c58:	20088cec 	andhi	zero,r4,8755
20088c5c:	20088e54 	ori	zero,r4,8761
20088c60:	20088ba0 	cmpeqi	zero,r4,8750
20088c64:	20088e54 	ori	zero,r4,8761
20088c68:	20088cec 	andhi	zero,r4,8755
20088c6c:	20088d04 	addi	zero,r4,8756
20088c70:	20088d04 	addi	zero,r4,8756
20088c74:	20088ba0 	cmpeqi	zero,r4,8750
20088c78:	20088cec 	andhi	zero,r4,8755
20088c7c:	20088df4 	orhi	zero,r4,8759
20088c80:	20088df4 	orhi	zero,r4,8759
20088c84:	20088df4 	orhi	zero,r4,8759
20088c88:	20088e20 	cmpeqi	zero,r4,8760
20088c8c:	8809883a 	mov	r4,r17
20088c90:	008b2e40 	call	2008b2e4 <__clzsi2>
20088c94:	10fffec4 	addi	r3,r2,-5
20088c98:	88e2983a 	sll	r17,r17,r3
20088c9c:	00ffe284 	movi	r3,-118
20088ca0:	1885c83a 	sub	r2,r3,r2
20088ca4:	0009883a 	mov	r4,zero
20088ca8:	003f9e06 	br	20088b24 <__flash_rwdata_start+0xfffe9f50>
20088cac:	010000c4 	movi	r4,3
20088cb0:	003f9c06 	br	20088b24 <__flash_rwdata_start+0xfffe9f50>
20088cb4:	9009883a 	mov	r4,r18
20088cb8:	d9400015 	stw	r5,0(sp)
20088cbc:	008b2e40 	call	2008b2e4 <__clzsi2>
20088cc0:	10fffec4 	addi	r3,r2,-5
20088cc4:	053fe284 	movi	r20,-118
20088cc8:	90e4983a 	sll	r18,r18,r3
20088ccc:	a0a9c83a 	sub	r20,r20,r2
20088cd0:	0021883a 	mov	r16,zero
20088cd4:	002f883a 	mov	r23,zero
20088cd8:	d9400017 	ldw	r5,0(sp)
20088cdc:	003f8306 	br	20088aec <__flash_rwdata_start+0xfffe9f18>
20088ce0:	04000304 	movi	r16,12
20088ce4:	05c000c4 	movi	r23,3
20088ce8:	003f8006 	br	20088aec <__flash_rwdata_start+0xfffe9f18>
20088cec:	0023883a 	mov	r17,zero
20088cf0:	e027883a 	mov	r19,fp
20088cf4:	202f883a 	mov	r23,r4
20088cf8:	00c00084 	movi	r3,2
20088cfc:	980b883a 	mov	r5,r19
20088d00:	b8c0501e 	bne	r23,r3,20088e44 <__divsf3+0x3c0>
20088d04:	2980004c 	andi	r6,r5,1
20088d08:	013fffc4 	movi	r4,-1
20088d0c:	0007883a 	mov	r3,zero
20088d10:	003fa706 	br	20088bb0 <__flash_rwdata_start+0xfffe9fdc>
20088d14:	013fe084 	movi	r4,-126
20088d18:	2089c83a 	sub	r4,r4,r2
20088d1c:	00c006c4 	movi	r3,27
20088d20:	1900500e 	bge	r3,r4,20088e64 <__divsf3+0x3e0>
20088d24:	9980004c 	andi	r6,r19,1
20088d28:	0009883a 	mov	r4,zero
20088d2c:	0007883a 	mov	r3,zero
20088d30:	003f9f06 	br	20088bb0 <__flash_rwdata_start+0xfffe9fdc>
20088d34:	9080102c 	andhi	r2,r18,64
20088d38:	10000226 	beq	r2,zero,20088d44 <__divsf3+0x2c0>
20088d3c:	8880102c 	andhi	r2,r17,64
20088d40:	10003a26 	beq	r2,zero,20088e2c <__divsf3+0x3a8>
20088d44:	00802034 	movhi	r2,128
20088d48:	90c01034 	orhi	r3,r18,64
20088d4c:	10bfffc4 	addi	r2,r2,-1
20088d50:	a80d883a 	mov	r6,r21
20088d54:	1886703a 	and	r3,r3,r2
20088d58:	003f9406 	br	20088bac <__flash_rwdata_start+0xfffe9fd8>
20088d5c:	9006917a 	slli	r3,r18,5
20088d60:	8822917a 	slli	r17,r17,5
20088d64:	1c402936 	bltu	r3,r17,20088e0c <__divsf3+0x388>
20088d68:	1c47c83a 	sub	r3,r3,r17
20088d6c:	2827883a 	mov	r19,r5
20088d70:	01800684 	movi	r6,26
20088d74:	01000044 	movi	r4,1
20088d78:	180f883a 	mov	r7,r3
20088d7c:	2109883a 	add	r4,r4,r4
20088d80:	18c7883a 	add	r3,r3,r3
20088d84:	38000116 	blt	r7,zero,20088d8c <__divsf3+0x308>
20088d88:	1c400236 	bltu	r3,r17,20088d94 <__divsf3+0x310>
20088d8c:	1c47c83a 	sub	r3,r3,r17
20088d90:	21000054 	ori	r4,r4,1
20088d94:	31bfffc4 	addi	r6,r6,-1
20088d98:	303ff71e 	bne	r6,zero,20088d78 <__flash_rwdata_start+0xfffea1a4>
20088d9c:	1806c03a 	cmpne	r3,r3,zero
20088da0:	1922b03a 	or	r17,r3,r4
20088da4:	11001fc4 	addi	r4,r2,127
20088da8:	013fda0e 	bge	zero,r4,20088d14 <__flash_rwdata_start+0xfffea140>
20088dac:	88c001cc 	andi	r3,r17,7
20088db0:	18000426 	beq	r3,zero,20088dc4 <__divsf3+0x340>
20088db4:	894003cc 	andi	r5,r17,15
20088db8:	00c00104 	movi	r3,4
20088dbc:	28c00126 	beq	r5,r3,20088dc4 <__divsf3+0x340>
20088dc0:	88e3883a 	add	r17,r17,r3
20088dc4:	88c2002c 	andhi	r3,r17,2048
20088dc8:	18000426 	beq	r3,zero,20088ddc <__divsf3+0x358>
20088dcc:	11002004 	addi	r4,r2,128
20088dd0:	00be0034 	movhi	r2,63488
20088dd4:	10bfffc4 	addi	r2,r2,-1
20088dd8:	88a2703a 	and	r17,r17,r2
20088ddc:	00803f84 	movi	r2,254
20088de0:	1100060e 	bge	r2,r4,20088dfc <__divsf3+0x378>
20088de4:	9980004c 	andi	r6,r19,1
20088de8:	013fffc4 	movi	r4,-1
20088dec:	0007883a 	mov	r3,zero
20088df0:	003f6f06 	br	20088bb0 <__flash_rwdata_start+0xfffe9fdc>
20088df4:	9023883a 	mov	r17,r18
20088df8:	003fbf06 	br	20088cf8 <__flash_rwdata_start+0xfffea124>
20088dfc:	880691ba 	slli	r3,r17,6
20088e00:	9980004c 	andi	r6,r19,1
20088e04:	1806d27a 	srli	r3,r3,9
20088e08:	003f6906 	br	20088bb0 <__flash_rwdata_start+0xfffe9fdc>
20088e0c:	10bfffc4 	addi	r2,r2,-1
20088e10:	2827883a 	mov	r19,r5
20088e14:	018006c4 	movi	r6,27
20088e18:	0009883a 	mov	r4,zero
20088e1c:	003fd606 	br	20088d78 <__flash_rwdata_start+0xfffea1a4>
20088e20:	9080102c 	andhi	r2,r18,64
20088e24:	0023883a 	mov	r17,zero
20088e28:	103fc626 	beq	r2,zero,20088d44 <__flash_rwdata_start+0xfffea170>
20088e2c:	00802034 	movhi	r2,128
20088e30:	88c01034 	orhi	r3,r17,64
20088e34:	10bfffc4 	addi	r2,r2,-1
20088e38:	b00d883a 	mov	r6,r22
20088e3c:	1886703a 	and	r3,r3,r2
20088e40:	003f5a06 	br	20088bac <__flash_rwdata_start+0xfffe9fd8>
20088e44:	00c000c4 	movi	r3,3
20088e48:	b8c01c26 	beq	r23,r3,20088ebc <__divsf3+0x438>
20088e4c:	00c00044 	movi	r3,1
20088e50:	b8ffd41e 	bne	r23,r3,20088da4 <__flash_rwdata_start+0xfffea1d0>
20088e54:	2980004c 	andi	r6,r5,1
20088e58:	0009883a 	mov	r4,zero
20088e5c:	0007883a 	mov	r3,zero
20088e60:	003f5306 	br	20088bb0 <__flash_rwdata_start+0xfffe9fdc>
20088e64:	10802784 	addi	r2,r2,158
20088e68:	8884983a 	sll	r2,r17,r2
20088e6c:	8908d83a 	srl	r4,r17,r4
20088e70:	1022c03a 	cmpne	r17,r2,zero
20088e74:	8908b03a 	or	r4,r17,r4
20088e78:	208001cc 	andi	r2,r4,7
20088e7c:	10000426 	beq	r2,zero,20088e90 <__divsf3+0x40c>
20088e80:	20c003cc 	andi	r3,r4,15
20088e84:	00800104 	movi	r2,4
20088e88:	18800126 	beq	r3,r2,20088e90 <__divsf3+0x40c>
20088e8c:	2089883a 	add	r4,r4,r2
20088e90:	2081002c 	andhi	r2,r4,1024
20088e94:	10000426 	beq	r2,zero,20088ea8 <__divsf3+0x424>
20088e98:	9980004c 	andi	r6,r19,1
20088e9c:	01000044 	movi	r4,1
20088ea0:	0007883a 	mov	r3,zero
20088ea4:	003f4206 	br	20088bb0 <__flash_rwdata_start+0xfffe9fdc>
20088ea8:	200691ba 	slli	r3,r4,6
20088eac:	9980004c 	andi	r6,r19,1
20088eb0:	0009883a 	mov	r4,zero
20088eb4:	1806d27a 	srli	r3,r3,9
20088eb8:	003f3d06 	br	20088bb0 <__flash_rwdata_start+0xfffe9fdc>
20088ebc:	00802034 	movhi	r2,128
20088ec0:	88c01034 	orhi	r3,r17,64
20088ec4:	10bfffc4 	addi	r2,r2,-1
20088ec8:	9980004c 	andi	r6,r19,1
20088ecc:	1886703a 	and	r3,r3,r2
20088ed0:	003f3606 	br	20088bac <__flash_rwdata_start+0xfffe9fd8>

20088ed4 <__mulsf3>:
20088ed4:	defff504 	addi	sp,sp,-44
20088ed8:	dc400215 	stw	r17,8(sp)
20088edc:	2022d5fa 	srli	r17,r4,23
20088ee0:	dd400615 	stw	r21,24(sp)
20088ee4:	202ad7fa 	srli	r21,r4,31
20088ee8:	dc000115 	stw	r16,4(sp)
20088eec:	04002034 	movhi	r16,128
20088ef0:	df000915 	stw	fp,36(sp)
20088ef4:	dd000515 	stw	r20,20(sp)
20088ef8:	843fffc4 	addi	r16,r16,-1
20088efc:	dfc00a15 	stw	ra,40(sp)
20088f00:	ddc00815 	stw	r23,32(sp)
20088f04:	dd800715 	stw	r22,28(sp)
20088f08:	dcc00415 	stw	r19,16(sp)
20088f0c:	dc800315 	stw	r18,12(sp)
20088f10:	8c403fcc 	andi	r17,r17,255
20088f14:	8120703a 	and	r16,r16,r4
20088f18:	a829883a 	mov	r20,r21
20088f1c:	af003fcc 	andi	fp,r21,255
20088f20:	88005026 	beq	r17,zero,20089064 <__mulsf3+0x190>
20088f24:	00803fc4 	movi	r2,255
20088f28:	88802f26 	beq	r17,r2,20088fe8 <__mulsf3+0x114>
20088f2c:	84002034 	orhi	r16,r16,128
20088f30:	802090fa 	slli	r16,r16,3
20088f34:	8c7fe044 	addi	r17,r17,-127
20088f38:	0025883a 	mov	r18,zero
20088f3c:	002f883a 	mov	r23,zero
20088f40:	2804d5fa 	srli	r2,r5,23
20088f44:	282cd7fa 	srli	r22,r5,31
20088f48:	01002034 	movhi	r4,128
20088f4c:	213fffc4 	addi	r4,r4,-1
20088f50:	10803fcc 	andi	r2,r2,255
20088f54:	2166703a 	and	r19,r4,r5
20088f58:	b1803fcc 	andi	r6,r22,255
20088f5c:	10004926 	beq	r2,zero,20089084 <__mulsf3+0x1b0>
20088f60:	00c03fc4 	movi	r3,255
20088f64:	10c04326 	beq	r2,r3,20089074 <__mulsf3+0x1a0>
20088f68:	99402034 	orhi	r5,r19,128
20088f6c:	282690fa 	slli	r19,r5,3
20088f70:	10bfe044 	addi	r2,r2,-127
20088f74:	000b883a 	mov	r5,zero
20088f78:	8885883a 	add	r2,r17,r2
20088f7c:	2c86b03a 	or	r3,r5,r18
20088f80:	010003c4 	movi	r4,15
20088f84:	adaaf03a 	xor	r21,r21,r22
20088f88:	12000044 	addi	r8,r2,1
20088f8c:	20c06536 	bltu	r4,r3,20089124 <__mulsf3+0x250>
20088f90:	180690ba 	slli	r3,r3,2
20088f94:	01080274 	movhi	r4,8201
20088f98:	2123ea04 	addi	r4,r4,-28760
20088f9c:	1907883a 	add	r3,r3,r4
20088fa0:	18c00017 	ldw	r3,0(r3)
20088fa4:	1800683a 	jmp	r3
20088fa8:	20089124 	muli	zero,r4,8772
20088fac:	200891f0 	cmpltui	zero,r4,8775
20088fb0:	200891f0 	cmpltui	zero,r4,8775
20088fb4:	20089200 	call	22008920 <__flash_rwdata_start+0x1f69d4c>
20088fb8:	20088ff8 	rdprs	zero,r4,8767
20088fbc:	20088ff8 	rdprs	zero,r4,8767
20088fc0:	20089110 	cmplti	zero,r4,8772
20088fc4:	20089200 	call	22008920 <__flash_rwdata_start+0x1f69d4c>
20088fc8:	20088ff8 	rdprs	zero,r4,8767
20088fcc:	20089110 	cmplti	zero,r4,8772
20088fd0:	20088ff8 	rdprs	zero,r4,8767
20088fd4:	20089200 	call	22008920 <__flash_rwdata_start+0x1f69d4c>
20088fd8:	20088ffc 	xorhi	zero,r4,8767
20088fdc:	20088ffc 	xorhi	zero,r4,8767
20088fe0:	20088ffc 	xorhi	zero,r4,8767
20088fe4:	20089210 	cmplti	zero,r4,8776
20088fe8:	8000311e 	bne	r16,zero,200890b0 <__mulsf3+0x1dc>
20088fec:	04800204 	movi	r18,8
20088ff0:	05c00084 	movi	r23,2
20088ff4:	003fd206 	br	20088f40 <__flash_rwdata_start+0xfffea36c>
20088ff8:	a839883a 	mov	fp,r21
20088ffc:	00800084 	movi	r2,2
20089000:	b880231e 	bne	r23,r2,20089090 <__mulsf3+0x1bc>
20089004:	e500004c 	andi	r20,fp,1
20089008:	00ffffc4 	movi	r3,-1
2008900c:	0009883a 	mov	r4,zero
20089010:	18c03fcc 	andi	r3,r3,255
20089014:	180695fa 	slli	r3,r3,23
20089018:	a0803fcc 	andi	r2,r20,255
2008901c:	04002034 	movhi	r16,128
20089020:	100497fa 	slli	r2,r2,31
20089024:	843fffc4 	addi	r16,r16,-1
20089028:	2420703a 	and	r16,r4,r16
2008902c:	80e0b03a 	or	r16,r16,r3
20089030:	8084b03a 	or	r2,r16,r2
20089034:	dfc00a17 	ldw	ra,40(sp)
20089038:	df000917 	ldw	fp,36(sp)
2008903c:	ddc00817 	ldw	r23,32(sp)
20089040:	dd800717 	ldw	r22,28(sp)
20089044:	dd400617 	ldw	r21,24(sp)
20089048:	dd000517 	ldw	r20,20(sp)
2008904c:	dcc00417 	ldw	r19,16(sp)
20089050:	dc800317 	ldw	r18,12(sp)
20089054:	dc400217 	ldw	r17,8(sp)
20089058:	dc000117 	ldw	r16,4(sp)
2008905c:	dec00b04 	addi	sp,sp,44
20089060:	f800283a 	ret
20089064:	8000151e 	bne	r16,zero,200890bc <__mulsf3+0x1e8>
20089068:	04800104 	movi	r18,4
2008906c:	05c00044 	movi	r23,1
20089070:	003fb306 	br	20088f40 <__flash_rwdata_start+0xfffea36c>
20089074:	980b003a 	cmpeq	r5,r19,zero
20089078:	00c000c4 	movi	r3,3
2008907c:	194bc83a 	sub	r5,r3,r5
20089080:	003fbd06 	br	20088f78 <__flash_rwdata_start+0xfffea3a4>
20089084:	9800181e 	bne	r19,zero,200890e8 <__mulsf3+0x214>
20089088:	01400044 	movi	r5,1
2008908c:	003fba06 	br	20088f78 <__flash_rwdata_start+0xfffea3a4>
20089090:	008000c4 	movi	r2,3
20089094:	b8809226 	beq	r23,r2,200892e0 <__mulsf3+0x40c>
20089098:	00800044 	movi	r2,1
2008909c:	b880771e 	bne	r23,r2,2008927c <__mulsf3+0x3a8>
200890a0:	e0a8703a 	and	r20,fp,r2
200890a4:	0007883a 	mov	r3,zero
200890a8:	0009883a 	mov	r4,zero
200890ac:	003fd806 	br	20089010 <__flash_rwdata_start+0xfffea43c>
200890b0:	04800304 	movi	r18,12
200890b4:	05c000c4 	movi	r23,3
200890b8:	003fa106 	br	20088f40 <__flash_rwdata_start+0xfffea36c>
200890bc:	8009883a 	mov	r4,r16
200890c0:	d9400015 	stw	r5,0(sp)
200890c4:	008b2e40 	call	2008b2e4 <__clzsi2>
200890c8:	10fffec4 	addi	r3,r2,-5
200890cc:	047fe284 	movi	r17,-118
200890d0:	80e0983a 	sll	r16,r16,r3
200890d4:	88a3c83a 	sub	r17,r17,r2
200890d8:	0025883a 	mov	r18,zero
200890dc:	002f883a 	mov	r23,zero
200890e0:	d9400017 	ldw	r5,0(sp)
200890e4:	003f9606 	br	20088f40 <__flash_rwdata_start+0xfffea36c>
200890e8:	9809883a 	mov	r4,r19
200890ec:	d9800015 	stw	r6,0(sp)
200890f0:	008b2e40 	call	2008b2e4 <__clzsi2>
200890f4:	10fffec4 	addi	r3,r2,-5
200890f8:	98e6983a 	sll	r19,r19,r3
200890fc:	00ffe284 	movi	r3,-118
20089100:	1885c83a 	sub	r2,r3,r2
20089104:	000b883a 	mov	r5,zero
20089108:	d9800017 	ldw	r6,0(sp)
2008910c:	003f9a06 	br	20088f78 <__flash_rwdata_start+0xfffea3a4>
20089110:	01002034 	movhi	r4,128
20089114:	0029883a 	mov	r20,zero
20089118:	213fffc4 	addi	r4,r4,-1
2008911c:	00ffffc4 	movi	r3,-1
20089120:	003fbb06 	br	20089010 <__flash_rwdata_start+0xfffea43c>
20089124:	8006d43a 	srli	r3,r16,16
20089128:	9812d43a 	srli	r9,r19,16
2008912c:	843fffcc 	andi	r16,r16,65535
20089130:	997fffcc 	andi	r5,r19,65535
20089134:	2c0f383a 	mul	r7,r5,r16
20089138:	28cb383a 	mul	r5,r5,r3
2008913c:	4c21383a 	mul	r16,r9,r16
20089140:	380cd43a 	srli	r6,r7,16
20089144:	48d3383a 	mul	r9,r9,r3
20089148:	2c21883a 	add	r16,r5,r16
2008914c:	8187883a 	add	r3,r16,r6
20089150:	1940022e 	bgeu	r3,r5,2008915c <__mulsf3+0x288>
20089154:	01000074 	movhi	r4,1
20089158:	4913883a 	add	r9,r9,r4
2008915c:	1808943a 	slli	r4,r3,16
20089160:	39ffffcc 	andi	r7,r7,65535
20089164:	1806d43a 	srli	r3,r3,16
20089168:	21c9883a 	add	r4,r4,r7
2008916c:	202091ba 	slli	r16,r4,6
20089170:	48c7883a 	add	r3,r9,r3
20089174:	2008d6ba 	srli	r4,r4,26
20089178:	180691ba 	slli	r3,r3,6
2008917c:	8020c03a 	cmpne	r16,r16,zero
20089180:	8120b03a 	or	r16,r16,r4
20089184:	80e0b03a 	or	r16,r16,r3
20089188:	80c2002c 	andhi	r3,r16,2048
2008918c:	18000426 	beq	r3,zero,200891a0 <__mulsf3+0x2cc>
20089190:	8006d07a 	srli	r3,r16,1
20089194:	8400004c 	andi	r16,r16,1
20089198:	4005883a 	mov	r2,r8
2008919c:	80e0b03a 	or	r16,r16,r3
200891a0:	10c01fc4 	addi	r3,r2,127
200891a4:	00c02d0e 	bge	zero,r3,2008925c <__mulsf3+0x388>
200891a8:	810001cc 	andi	r4,r16,7
200891ac:	20000426 	beq	r4,zero,200891c0 <__mulsf3+0x2ec>
200891b0:	814003cc 	andi	r5,r16,15
200891b4:	01000104 	movi	r4,4
200891b8:	29000126 	beq	r5,r4,200891c0 <__mulsf3+0x2ec>
200891bc:	8121883a 	add	r16,r16,r4
200891c0:	8102002c 	andhi	r4,r16,2048
200891c4:	20000426 	beq	r4,zero,200891d8 <__mulsf3+0x304>
200891c8:	10c02004 	addi	r3,r2,128
200891cc:	00be0034 	movhi	r2,63488
200891d0:	10bfffc4 	addi	r2,r2,-1
200891d4:	80a0703a 	and	r16,r16,r2
200891d8:	00803f84 	movi	r2,254
200891dc:	10c01b0e 	bge	r2,r3,2008924c <__mulsf3+0x378>
200891e0:	ad00004c 	andi	r20,r21,1
200891e4:	00ffffc4 	movi	r3,-1
200891e8:	0009883a 	mov	r4,zero
200891ec:	003f8806 	br	20089010 <__flash_rwdata_start+0xfffea43c>
200891f0:	9821883a 	mov	r16,r19
200891f4:	a839883a 	mov	fp,r21
200891f8:	282f883a 	mov	r23,r5
200891fc:	003f7f06 	br	20088ffc <__flash_rwdata_start+0xfffea428>
20089200:	9821883a 	mov	r16,r19
20089204:	3039883a 	mov	fp,r6
20089208:	282f883a 	mov	r23,r5
2008920c:	003f7b06 	br	20088ffc <__flash_rwdata_start+0xfffea428>
20089210:	8080102c 	andhi	r2,r16,64
20089214:	10000826 	beq	r2,zero,20089238 <__mulsf3+0x364>
20089218:	9880102c 	andhi	r2,r19,64
2008921c:	1000061e 	bne	r2,zero,20089238 <__mulsf3+0x364>
20089220:	00802034 	movhi	r2,128
20089224:	99001034 	orhi	r4,r19,64
20089228:	10bfffc4 	addi	r2,r2,-1
2008922c:	b029883a 	mov	r20,r22
20089230:	2088703a 	and	r4,r4,r2
20089234:	003fb906 	br	2008911c <__flash_rwdata_start+0xfffea548>
20089238:	00802034 	movhi	r2,128
2008923c:	81001034 	orhi	r4,r16,64
20089240:	10bfffc4 	addi	r2,r2,-1
20089244:	2088703a 	and	r4,r4,r2
20089248:	003fb406 	br	2008911c <__flash_rwdata_start+0xfffea548>
2008924c:	802091ba 	slli	r16,r16,6
20089250:	ad00004c 	andi	r20,r21,1
20089254:	8008d27a 	srli	r4,r16,9
20089258:	003f6d06 	br	20089010 <__flash_rwdata_start+0xfffea43c>
2008925c:	00ffe084 	movi	r3,-126
20089260:	1887c83a 	sub	r3,r3,r2
20089264:	010006c4 	movi	r4,27
20089268:	20c0070e 	bge	r4,r3,20089288 <__mulsf3+0x3b4>
2008926c:	ad00004c 	andi	r20,r21,1
20089270:	0007883a 	mov	r3,zero
20089274:	0009883a 	mov	r4,zero
20089278:	003f6506 	br	20089010 <__flash_rwdata_start+0xfffea43c>
2008927c:	4005883a 	mov	r2,r8
20089280:	e02b883a 	mov	r21,fp
20089284:	003fc606 	br	200891a0 <__flash_rwdata_start+0xfffea5cc>
20089288:	10802784 	addi	r2,r2,158
2008928c:	8084983a 	sll	r2,r16,r2
20089290:	80e0d83a 	srl	r16,r16,r3
20089294:	1004c03a 	cmpne	r2,r2,zero
20089298:	1404b03a 	or	r2,r2,r16
2008929c:	10c001cc 	andi	r3,r2,7
200892a0:	18000426 	beq	r3,zero,200892b4 <__mulsf3+0x3e0>
200892a4:	110003cc 	andi	r4,r2,15
200892a8:	00c00104 	movi	r3,4
200892ac:	20c00126 	beq	r4,r3,200892b4 <__mulsf3+0x3e0>
200892b0:	10c5883a 	add	r2,r2,r3
200892b4:	10c1002c 	andhi	r3,r2,1024
200892b8:	18000426 	beq	r3,zero,200892cc <__mulsf3+0x3f8>
200892bc:	ad00004c 	andi	r20,r21,1
200892c0:	00c00044 	movi	r3,1
200892c4:	0009883a 	mov	r4,zero
200892c8:	003f5106 	br	20089010 <__flash_rwdata_start+0xfffea43c>
200892cc:	100491ba 	slli	r2,r2,6
200892d0:	ad00004c 	andi	r20,r21,1
200892d4:	0007883a 	mov	r3,zero
200892d8:	1008d27a 	srli	r4,r2,9
200892dc:	003f4c06 	br	20089010 <__flash_rwdata_start+0xfffea43c>
200892e0:	00802034 	movhi	r2,128
200892e4:	81001034 	orhi	r4,r16,64
200892e8:	10bfffc4 	addi	r2,r2,-1
200892ec:	e500004c 	andi	r20,fp,1
200892f0:	2088703a 	and	r4,r4,r2
200892f4:	003f8906 	br	2008911c <__flash_rwdata_start+0xfffea548>

200892f8 <__floatunsisf>:
200892f8:	defffe04 	addi	sp,sp,-8
200892fc:	dc000015 	stw	r16,0(sp)
20089300:	dfc00115 	stw	ra,4(sp)
20089304:	2021883a 	mov	r16,r4
20089308:	20002626 	beq	r4,zero,200893a4 <__floatunsisf+0xac>
2008930c:	008b2e40 	call	2008b2e4 <__clzsi2>
20089310:	00c02784 	movi	r3,158
20089314:	1887c83a 	sub	r3,r3,r2
20089318:	01002584 	movi	r4,150
2008931c:	20c00816 	blt	r4,r3,20089340 <__floatunsisf+0x48>
20089320:	01000204 	movi	r4,8
20089324:	2080340e 	bge	r4,r2,200893f8 <__floatunsisf+0x100>
20089328:	10bffe04 	addi	r2,r2,-8
2008932c:	8088983a 	sll	r4,r16,r2
20089330:	00802034 	movhi	r2,128
20089334:	10bfffc4 	addi	r2,r2,-1
20089338:	2088703a 	and	r4,r4,r2
2008933c:	00001b06 	br	200893ac <__floatunsisf+0xb4>
20089340:	01002644 	movi	r4,153
20089344:	20c02316 	blt	r4,r3,200893d4 <__floatunsisf+0xdc>
20089348:	01000144 	movi	r4,5
2008934c:	2080020e 	bge	r4,r2,20089358 <__floatunsisf+0x60>
20089350:	113ffec4 	addi	r4,r2,-5
20089354:	8120983a 	sll	r16,r16,r4
20089358:	017f0034 	movhi	r5,64512
2008935c:	297fffc4 	addi	r5,r5,-1
20089360:	810001cc 	andi	r4,r16,7
20089364:	814a703a 	and	r5,r16,r5
20089368:	20000426 	beq	r4,zero,2008937c <__floatunsisf+0x84>
2008936c:	840003cc 	andi	r16,r16,15
20089370:	01000104 	movi	r4,4
20089374:	81000126 	beq	r16,r4,2008937c <__floatunsisf+0x84>
20089378:	290b883a 	add	r5,r5,r4
2008937c:	2901002c 	andhi	r4,r5,1024
20089380:	20000526 	beq	r4,zero,20089398 <__floatunsisf+0xa0>
20089384:	00c027c4 	movi	r3,159
20089388:	1887c83a 	sub	r3,r3,r2
2008938c:	00bf0034 	movhi	r2,64512
20089390:	10bfffc4 	addi	r2,r2,-1
20089394:	288a703a 	and	r5,r5,r2
20089398:	280891ba 	slli	r4,r5,6
2008939c:	2008d27a 	srli	r4,r4,9
200893a0:	00000206 	br	200893ac <__floatunsisf+0xb4>
200893a4:	0007883a 	mov	r3,zero
200893a8:	0009883a 	mov	r4,zero
200893ac:	18c03fcc 	andi	r3,r3,255
200893b0:	180695fa 	slli	r3,r3,23
200893b4:	00802034 	movhi	r2,128
200893b8:	10bfffc4 	addi	r2,r2,-1
200893bc:	2084703a 	and	r2,r4,r2
200893c0:	10c4b03a 	or	r2,r2,r3
200893c4:	dfc00117 	ldw	ra,4(sp)
200893c8:	dc000017 	ldw	r16,0(sp)
200893cc:	dec00204 	addi	sp,sp,8
200893d0:	f800283a 	ret
200893d4:	01400144 	movi	r5,5
200893d8:	110006c4 	addi	r4,r2,27
200893dc:	8108983a 	sll	r4,r16,r4
200893e0:	288dc83a 	sub	r6,r5,r2
200893e4:	81a0d83a 	srl	r16,r16,r6
200893e8:	2008c03a 	cmpne	r4,r4,zero
200893ec:	2420b03a 	or	r16,r4,r16
200893f0:	28bfd90e 	bge	r5,r2,20089358 <__flash_rwdata_start+0xfffea784>
200893f4:	003fd606 	br	20089350 <__flash_rwdata_start+0xfffea77c>
200893f8:	01402034 	movhi	r5,128
200893fc:	297fffc4 	addi	r5,r5,-1
20089400:	8148703a 	and	r4,r16,r5
20089404:	003fe906 	br	200893ac <__flash_rwdata_start+0xfffea7d8>

20089408 <__adddf3>:
20089408:	02000434 	movhi	r8,16
2008940c:	423fffc4 	addi	r8,r8,-1
20089410:	defffb04 	addi	sp,sp,-20
20089414:	2a12703a 	and	r9,r5,r8
20089418:	2806d7fa 	srli	r3,r5,31
2008941c:	3a10703a 	and	r8,r7,r8
20089420:	3804d53a 	srli	r2,r7,20
20089424:	3014d77a 	srli	r10,r6,29
20089428:	dc000015 	stw	r16,0(sp)
2008942c:	481290fa 	slli	r9,r9,3
20089430:	2820d53a 	srli	r16,r5,20
20089434:	401090fa 	slli	r8,r8,3
20089438:	200ad77a 	srli	r5,r4,29
2008943c:	380ed7fa 	srli	r7,r7,31
20089440:	dc800215 	stw	r18,8(sp)
20089444:	dc400115 	stw	r17,4(sp)
20089448:	dfc00415 	stw	ra,16(sp)
2008944c:	dcc00315 	stw	r19,12(sp)
20089450:	1c803fcc 	andi	r18,r3,255
20089454:	8401ffcc 	andi	r16,r16,2047
20089458:	494ab03a 	or	r5,r9,r5
2008945c:	202290fa 	slli	r17,r4,3
20089460:	1081ffcc 	andi	r2,r2,2047
20089464:	4290b03a 	or	r8,r8,r10
20089468:	300c90fa 	slli	r6,r6,3
2008946c:	91c07026 	beq	r18,r7,20089630 <__adddf3+0x228>
20089470:	8087c83a 	sub	r3,r16,r2
20089474:	00c0b30e 	bge	zero,r3,20089744 <__adddf3+0x33c>
20089478:	10002a1e 	bne	r2,zero,20089524 <__adddf3+0x11c>
2008947c:	4184b03a 	or	r2,r8,r6
20089480:	1000991e 	bne	r2,zero,200896e8 <__adddf3+0x2e0>
20089484:	888001cc 	andi	r2,r17,7
20089488:	10005b26 	beq	r2,zero,200895f8 <__adddf3+0x1f0>
2008948c:	88c003cc 	andi	r3,r17,15
20089490:	00800104 	movi	r2,4
20089494:	18805826 	beq	r3,r2,200895f8 <__adddf3+0x1f0>
20089498:	89800104 	addi	r6,r17,4
2008949c:	3463803a 	cmpltu	r17,r6,r17
200894a0:	2c4b883a 	add	r5,r5,r17
200894a4:	2880202c 	andhi	r2,r5,128
200894a8:	9007883a 	mov	r3,r18
200894ac:	3023883a 	mov	r17,r6
200894b0:	10005426 	beq	r2,zero,20089604 <__adddf3+0x1fc>
200894b4:	84000044 	addi	r16,r16,1
200894b8:	0081ffc4 	movi	r2,2047
200894bc:	8080c126 	beq	r16,r2,200897c4 <__adddf3+0x3bc>
200894c0:	013fe034 	movhi	r4,65408
200894c4:	213fffc4 	addi	r4,r4,-1
200894c8:	290a703a 	and	r5,r5,r4
200894cc:	2804977a 	slli	r2,r5,29
200894d0:	280a927a 	slli	r5,r5,9
200894d4:	8822d0fa 	srli	r17,r17,3
200894d8:	8401ffcc 	andi	r16,r16,2047
200894dc:	2808d33a 	srli	r4,r5,12
200894e0:	1444b03a 	or	r2,r2,r17
200894e4:	8401ffcc 	andi	r16,r16,2047
200894e8:	800a953a 	slli	r5,r16,20
200894ec:	18c03fcc 	andi	r3,r3,255
200894f0:	04000434 	movhi	r16,16
200894f4:	180697fa 	slli	r3,r3,31
200894f8:	843fffc4 	addi	r16,r16,-1
200894fc:	2420703a 	and	r16,r4,r16
20089500:	8160b03a 	or	r16,r16,r5
20089504:	80c6b03a 	or	r3,r16,r3
20089508:	dfc00417 	ldw	ra,16(sp)
2008950c:	dcc00317 	ldw	r19,12(sp)
20089510:	dc800217 	ldw	r18,8(sp)
20089514:	dc400117 	ldw	r17,4(sp)
20089518:	dc000017 	ldw	r16,0(sp)
2008951c:	dec00504 	addi	sp,sp,20
20089520:	f800283a 	ret
20089524:	0081ffc4 	movi	r2,2047
20089528:	80bfd626 	beq	r16,r2,20089484 <__flash_rwdata_start+0xfffea8b0>
2008952c:	42002034 	orhi	r8,r8,128
20089530:	00800e04 	movi	r2,56
20089534:	10c0a616 	blt	r2,r3,200897d0 <__adddf3+0x3c8>
20089538:	008007c4 	movi	r2,31
2008953c:	10c0c916 	blt	r2,r3,20089864 <__adddf3+0x45c>
20089540:	00800804 	movi	r2,32
20089544:	10c5c83a 	sub	r2,r2,r3
20089548:	408e983a 	sll	r7,r8,r2
2008954c:	30c8d83a 	srl	r4,r6,r3
20089550:	3084983a 	sll	r2,r6,r2
20089554:	40c6d83a 	srl	r3,r8,r3
20089558:	390cb03a 	or	r6,r7,r4
2008955c:	1004c03a 	cmpne	r2,r2,zero
20089560:	308cb03a 	or	r6,r6,r2
20089564:	898dc83a 	sub	r6,r17,r6
20089568:	89a3803a 	cmpltu	r17,r17,r6
2008956c:	28cbc83a 	sub	r5,r5,r3
20089570:	2c4bc83a 	sub	r5,r5,r17
20089574:	3023883a 	mov	r17,r6
20089578:	2880202c 	andhi	r2,r5,128
2008957c:	10006d26 	beq	r2,zero,20089734 <__adddf3+0x32c>
20089580:	04c02034 	movhi	r19,128
20089584:	9cffffc4 	addi	r19,r19,-1
20089588:	2ce6703a 	and	r19,r5,r19
2008958c:	98007e26 	beq	r19,zero,20089788 <__adddf3+0x380>
20089590:	9809883a 	mov	r4,r19
20089594:	008b2e40 	call	2008b2e4 <__clzsi2>
20089598:	10fffe04 	addi	r3,r2,-8
2008959c:	010007c4 	movi	r4,31
200895a0:	20c07f16 	blt	r4,r3,200897a0 <__adddf3+0x398>
200895a4:	01400a04 	movi	r5,40
200895a8:	2885c83a 	sub	r2,r5,r2
200895ac:	888ad83a 	srl	r5,r17,r2
200895b0:	98e6983a 	sll	r19,r19,r3
200895b4:	88e2983a 	sll	r17,r17,r3
200895b8:	2ce6b03a 	or	r19,r5,r19
200895bc:	1c007c16 	blt	r3,r16,200897b0 <__adddf3+0x3a8>
200895c0:	1c21c83a 	sub	r16,r3,r16
200895c4:	81400044 	addi	r5,r16,1
200895c8:	00c007c4 	movi	r3,31
200895cc:	19409816 	blt	r3,r5,20089830 <__adddf3+0x428>
200895d0:	1c21c83a 	sub	r16,r3,r16
200895d4:	8c08983a 	sll	r4,r17,r16
200895d8:	8946d83a 	srl	r3,r17,r5
200895dc:	9c20983a 	sll	r16,r19,r16
200895e0:	2008c03a 	cmpne	r4,r4,zero
200895e4:	994ad83a 	srl	r5,r19,r5
200895e8:	1c06b03a 	or	r3,r3,r16
200895ec:	1922b03a 	or	r17,r3,r4
200895f0:	0021883a 	mov	r16,zero
200895f4:	003fa306 	br	20089484 <__flash_rwdata_start+0xfffea8b0>
200895f8:	2880202c 	andhi	r2,r5,128
200895fc:	9007883a 	mov	r3,r18
20089600:	103fac1e 	bne	r2,zero,200894b4 <__flash_rwdata_start+0xfffea8e0>
20089604:	2804977a 	slli	r2,r5,29
20089608:	8822d0fa 	srli	r17,r17,3
2008960c:	0101ffc4 	movi	r4,2047
20089610:	280ad0fa 	srli	r5,r5,3
20089614:	1444b03a 	or	r2,r2,r17
20089618:	81002c26 	beq	r16,r4,200896cc <__adddf3+0x2c4>
2008961c:	8120703a 	and	r16,r16,r4
20089620:	01000434 	movhi	r4,16
20089624:	213fffc4 	addi	r4,r4,-1
20089628:	2908703a 	and	r4,r5,r4
2008962c:	003fad06 	br	200894e4 <__flash_rwdata_start+0xfffea910>
20089630:	8089c83a 	sub	r4,r16,r2
20089634:	01006a0e 	bge	zero,r4,200897e0 <__adddf3+0x3d8>
20089638:	10003326 	beq	r2,zero,20089708 <__adddf3+0x300>
2008963c:	0081ffc4 	movi	r2,2047
20089640:	80bf9026 	beq	r16,r2,20089484 <__flash_rwdata_start+0xfffea8b0>
20089644:	42002034 	orhi	r8,r8,128
20089648:	00800e04 	movi	r2,56
2008964c:	1100b116 	blt	r2,r4,20089914 <__adddf3+0x50c>
20089650:	008007c4 	movi	r2,31
20089654:	1100e216 	blt	r2,r4,200899e0 <__adddf3+0x5d8>
20089658:	00800804 	movi	r2,32
2008965c:	1105c83a 	sub	r2,r2,r4
20089660:	4092983a 	sll	r9,r8,r2
20089664:	310ed83a 	srl	r7,r6,r4
20089668:	3084983a 	sll	r2,r6,r2
2008966c:	4110d83a 	srl	r8,r8,r4
20089670:	49ccb03a 	or	r6,r9,r7
20089674:	1004c03a 	cmpne	r2,r2,zero
20089678:	308cb03a 	or	r6,r6,r2
2008967c:	344d883a 	add	r6,r6,r17
20089680:	3463803a 	cmpltu	r17,r6,r17
20089684:	414b883a 	add	r5,r8,r5
20089688:	2c4b883a 	add	r5,r5,r17
2008968c:	3023883a 	mov	r17,r6
20089690:	2880202c 	andhi	r2,r5,128
20089694:	10002726 	beq	r2,zero,20089734 <__adddf3+0x32c>
20089698:	84000044 	addi	r16,r16,1
2008969c:	0081ffc4 	movi	r2,2047
200896a0:	8080ae26 	beq	r16,r2,2008995c <__adddf3+0x554>
200896a4:	00bfe034 	movhi	r2,65408
200896a8:	10bfffc4 	addi	r2,r2,-1
200896ac:	288a703a 	and	r5,r5,r2
200896b0:	880cd07a 	srli	r6,r17,1
200896b4:	280897fa 	slli	r4,r5,31
200896b8:	88c0004c 	andi	r3,r17,1
200896bc:	30e2b03a 	or	r17,r6,r3
200896c0:	280ad07a 	srli	r5,r5,1
200896c4:	8922b03a 	or	r17,r17,r4
200896c8:	003f6e06 	br	20089484 <__flash_rwdata_start+0xfffea8b0>
200896cc:	1148b03a 	or	r4,r2,r5
200896d0:	20003c26 	beq	r4,zero,200897c4 <__adddf3+0x3bc>
200896d4:	29000234 	orhi	r4,r5,8
200896d8:	01400434 	movhi	r5,16
200896dc:	297fffc4 	addi	r5,r5,-1
200896e0:	2148703a 	and	r4,r4,r5
200896e4:	003f7f06 	br	200894e4 <__flash_rwdata_start+0xfffea910>
200896e8:	18ffffc4 	addi	r3,r3,-1
200896ec:	18004d1e 	bne	r3,zero,20089824 <__adddf3+0x41c>
200896f0:	898dc83a 	sub	r6,r17,r6
200896f4:	89a3803a 	cmpltu	r17,r17,r6
200896f8:	2a0bc83a 	sub	r5,r5,r8
200896fc:	2c4bc83a 	sub	r5,r5,r17
20089700:	3023883a 	mov	r17,r6
20089704:	003f9c06 	br	20089578 <__flash_rwdata_start+0xfffea9a4>
20089708:	4184b03a 	or	r2,r8,r6
2008970c:	103f5d26 	beq	r2,zero,20089484 <__flash_rwdata_start+0xfffea8b0>
20089710:	213fffc4 	addi	r4,r4,-1
20089714:	203fd926 	beq	r4,zero,2008967c <__flash_rwdata_start+0xfffeaaa8>
20089718:	0081ffc4 	movi	r2,2047
2008971c:	80bfca1e 	bne	r16,r2,20089648 <__flash_rwdata_start+0xfffeaa74>
20089720:	003f5806 	br	20089484 <__flash_rwdata_start+0xfffea8b0>
20089724:	10c8b03a 	or	r4,r2,r3
20089728:	20008b26 	beq	r4,zero,20089958 <__adddf3+0x550>
2008972c:	100b883a 	mov	r5,r2
20089730:	1823883a 	mov	r17,r3
20089734:	888001cc 	andi	r2,r17,7
20089738:	103f541e 	bne	r2,zero,2008948c <__flash_rwdata_start+0xfffea8b8>
2008973c:	9007883a 	mov	r3,r18
20089740:	003fb006 	br	20089604 <__flash_rwdata_start+0xfffeaa30>
20089744:	1800531e 	bne	r3,zero,20089894 <__adddf3+0x48c>
20089748:	80800044 	addi	r2,r16,1
2008974c:	1081ffcc 	andi	r2,r2,2047
20089750:	00c00044 	movi	r3,1
20089754:	1880990e 	bge	r3,r2,200899bc <__adddf3+0x5b4>
20089758:	8985c83a 	sub	r2,r17,r6
2008975c:	8887803a 	cmpltu	r3,r17,r2
20089760:	2a27c83a 	sub	r19,r5,r8
20089764:	98e7c83a 	sub	r19,r19,r3
20089768:	98c0202c 	andhi	r3,r19,128
2008976c:	18006226 	beq	r3,zero,200898f8 <__adddf3+0x4f0>
20089770:	3463c83a 	sub	r17,r6,r17
20089774:	4151c83a 	sub	r8,r8,r5
20089778:	344d803a 	cmpltu	r6,r6,r17
2008977c:	41a7c83a 	sub	r19,r8,r6
20089780:	3825883a 	mov	r18,r7
20089784:	983f821e 	bne	r19,zero,20089590 <__flash_rwdata_start+0xfffea9bc>
20089788:	8809883a 	mov	r4,r17
2008978c:	008b2e40 	call	2008b2e4 <__clzsi2>
20089790:	10800804 	addi	r2,r2,32
20089794:	10fffe04 	addi	r3,r2,-8
20089798:	010007c4 	movi	r4,31
2008979c:	20ff810e 	bge	r4,r3,200895a4 <__flash_rwdata_start+0xfffea9d0>
200897a0:	14fff604 	addi	r19,r2,-40
200897a4:	8ce6983a 	sll	r19,r17,r19
200897a8:	0023883a 	mov	r17,zero
200897ac:	1c3f840e 	bge	r3,r16,200895c0 <__flash_rwdata_start+0xfffea9ec>
200897b0:	017fe034 	movhi	r5,65408
200897b4:	297fffc4 	addi	r5,r5,-1
200897b8:	80e1c83a 	sub	r16,r16,r3
200897bc:	994a703a 	and	r5,r19,r5
200897c0:	003f3006 	br	20089484 <__flash_rwdata_start+0xfffea8b0>
200897c4:	0009883a 	mov	r4,zero
200897c8:	0005883a 	mov	r2,zero
200897cc:	003f4506 	br	200894e4 <__flash_rwdata_start+0xfffea910>
200897d0:	418cb03a 	or	r6,r8,r6
200897d4:	300cc03a 	cmpne	r6,r6,zero
200897d8:	0007883a 	mov	r3,zero
200897dc:	003f6106 	br	20089564 <__flash_rwdata_start+0xfffea990>
200897e0:	2000921e 	bne	r4,zero,20089a2c <__adddf3+0x624>
200897e4:	80800044 	addi	r2,r16,1
200897e8:	11c1ffcc 	andi	r7,r2,2047
200897ec:	01000044 	movi	r4,1
200897f0:	21c0610e 	bge	r4,r7,20089978 <__adddf3+0x570>
200897f4:	0101ffc4 	movi	r4,2047
200897f8:	1100a326 	beq	r2,r4,20089a88 <__adddf3+0x680>
200897fc:	344d883a 	add	r6,r6,r17
20089800:	3463803a 	cmpltu	r17,r6,r17
20089804:	414b883a 	add	r5,r8,r5
20089808:	2c4b883a 	add	r5,r5,r17
2008980c:	282297fa 	slli	r17,r5,31
20089810:	300cd07a 	srli	r6,r6,1
20089814:	280ad07a 	srli	r5,r5,1
20089818:	1021883a 	mov	r16,r2
2008981c:	89a2b03a 	or	r17,r17,r6
20089820:	003f1806 	br	20089484 <__flash_rwdata_start+0xfffea8b0>
20089824:	0081ffc4 	movi	r2,2047
20089828:	80bf411e 	bne	r16,r2,20089530 <__flash_rwdata_start+0xfffea95c>
2008982c:	003f1506 	br	20089484 <__flash_rwdata_start+0xfffea8b0>
20089830:	80bff844 	addi	r2,r16,-31
20089834:	00c00804 	movi	r3,32
20089838:	9884d83a 	srl	r2,r19,r2
2008983c:	28c04a26 	beq	r5,r3,20089968 <__adddf3+0x560>
20089840:	00c00fc4 	movi	r3,63
20089844:	1c21c83a 	sub	r16,r3,r16
20089848:	9c26983a 	sll	r19,r19,r16
2008984c:	9c62b03a 	or	r17,r19,r17
20089850:	8822c03a 	cmpne	r17,r17,zero
20089854:	88a2b03a 	or	r17,r17,r2
20089858:	000b883a 	mov	r5,zero
2008985c:	0021883a 	mov	r16,zero
20089860:	003fb406 	br	20089734 <__flash_rwdata_start+0xfffeab60>
20089864:	18bff804 	addi	r2,r3,-32
20089868:	01000804 	movi	r4,32
2008986c:	4084d83a 	srl	r2,r8,r2
20089870:	19003f26 	beq	r3,r4,20089970 <__adddf3+0x568>
20089874:	01001004 	movi	r4,64
20089878:	20c7c83a 	sub	r3,r4,r3
2008987c:	40d0983a 	sll	r8,r8,r3
20089880:	418cb03a 	or	r6,r8,r6
20089884:	300cc03a 	cmpne	r6,r6,zero
20089888:	308cb03a 	or	r6,r6,r2
2008988c:	0007883a 	mov	r3,zero
20089890:	003f3406 	br	20089564 <__flash_rwdata_start+0xfffea990>
20089894:	80002326 	beq	r16,zero,20089924 <__adddf3+0x51c>
20089898:	0101ffc4 	movi	r4,2047
2008989c:	11005e26 	beq	r2,r4,20089a18 <__adddf3+0x610>
200898a0:	00c7c83a 	sub	r3,zero,r3
200898a4:	29402034 	orhi	r5,r5,128
200898a8:	01000e04 	movi	r4,56
200898ac:	20c07216 	blt	r4,r3,20089a78 <__adddf3+0x670>
200898b0:	010007c4 	movi	r4,31
200898b4:	20c0ce16 	blt	r4,r3,20089bf0 <__adddf3+0x7e8>
200898b8:	01000804 	movi	r4,32
200898bc:	20c9c83a 	sub	r4,r4,r3
200898c0:	2914983a 	sll	r10,r5,r4
200898c4:	88d2d83a 	srl	r9,r17,r3
200898c8:	8908983a 	sll	r4,r17,r4
200898cc:	28c6d83a 	srl	r3,r5,r3
200898d0:	5262b03a 	or	r17,r10,r9
200898d4:	2008c03a 	cmpne	r4,r4,zero
200898d8:	8922b03a 	or	r17,r17,r4
200898dc:	3463c83a 	sub	r17,r6,r17
200898e0:	40c7c83a 	sub	r3,r8,r3
200898e4:	344d803a 	cmpltu	r6,r6,r17
200898e8:	198bc83a 	sub	r5,r3,r6
200898ec:	1021883a 	mov	r16,r2
200898f0:	3825883a 	mov	r18,r7
200898f4:	003f2006 	br	20089578 <__flash_rwdata_start+0xfffea9a4>
200898f8:	9886b03a 	or	r3,r19,r2
200898fc:	1800141e 	bne	r3,zero,20089950 <__adddf3+0x548>
20089900:	0007883a 	mov	r3,zero
20089904:	000b883a 	mov	r5,zero
20089908:	0023883a 	mov	r17,zero
2008990c:	0021883a 	mov	r16,zero
20089910:	003f3c06 	br	20089604 <__flash_rwdata_start+0xfffeaa30>
20089914:	418cb03a 	or	r6,r8,r6
20089918:	300cc03a 	cmpne	r6,r6,zero
2008991c:	0011883a 	mov	r8,zero
20089920:	003f5606 	br	2008967c <__flash_rwdata_start+0xfffeaaa8>
20089924:	2c48b03a 	or	r4,r5,r17
20089928:	20003b26 	beq	r4,zero,20089a18 <__adddf3+0x610>
2008992c:	00c6303a 	nor	r3,zero,r3
20089930:	1800371e 	bne	r3,zero,20089a10 <__adddf3+0x608>
20089934:	3463c83a 	sub	r17,r6,r17
20089938:	414bc83a 	sub	r5,r8,r5
2008993c:	344d803a 	cmpltu	r6,r6,r17
20089940:	298bc83a 	sub	r5,r5,r6
20089944:	1021883a 	mov	r16,r2
20089948:	3825883a 	mov	r18,r7
2008994c:	003f0a06 	br	20089578 <__flash_rwdata_start+0xfffea9a4>
20089950:	1023883a 	mov	r17,r2
20089954:	003f0d06 	br	2008958c <__flash_rwdata_start+0xfffea9b8>
20089958:	0007883a 	mov	r3,zero
2008995c:	000b883a 	mov	r5,zero
20089960:	0023883a 	mov	r17,zero
20089964:	003f2706 	br	20089604 <__flash_rwdata_start+0xfffeaa30>
20089968:	0027883a 	mov	r19,zero
2008996c:	003fb706 	br	2008984c <__flash_rwdata_start+0xfffeac78>
20089970:	0011883a 	mov	r8,zero
20089974:	003fc206 	br	20089880 <__flash_rwdata_start+0xfffeacac>
20089978:	2c44b03a 	or	r2,r5,r17
2008997c:	8000871e 	bne	r16,zero,20089b9c <__adddf3+0x794>
20089980:	1000b126 	beq	r2,zero,20089c48 <__adddf3+0x840>
20089984:	4184b03a 	or	r2,r8,r6
20089988:	103ebe26 	beq	r2,zero,20089484 <__flash_rwdata_start+0xfffea8b0>
2008998c:	3445883a 	add	r2,r6,r17
20089990:	1463803a 	cmpltu	r17,r2,r17
20089994:	414b883a 	add	r5,r8,r5
20089998:	2c4b883a 	add	r5,r5,r17
2008999c:	28c0202c 	andhi	r3,r5,128
200899a0:	1023883a 	mov	r17,r2
200899a4:	183f6326 	beq	r3,zero,20089734 <__flash_rwdata_start+0xfffeab60>
200899a8:	00bfe034 	movhi	r2,65408
200899ac:	10bfffc4 	addi	r2,r2,-1
200899b0:	2021883a 	mov	r16,r4
200899b4:	288a703a 	and	r5,r5,r2
200899b8:	003eb206 	br	20089484 <__flash_rwdata_start+0xfffea8b0>
200899bc:	2c44b03a 	or	r2,r5,r17
200899c0:	8000251e 	bne	r16,zero,20089a58 <__adddf3+0x650>
200899c4:	10004b1e 	bne	r2,zero,20089af4 <__adddf3+0x6ec>
200899c8:	4184b03a 	or	r2,r8,r6
200899cc:	103fe226 	beq	r2,zero,20089958 <__flash_rwdata_start+0xfffead84>
200899d0:	400b883a 	mov	r5,r8
200899d4:	3023883a 	mov	r17,r6
200899d8:	3825883a 	mov	r18,r7
200899dc:	003ea906 	br	20089484 <__flash_rwdata_start+0xfffea8b0>
200899e0:	20bff804 	addi	r2,r4,-32
200899e4:	01c00804 	movi	r7,32
200899e8:	4084d83a 	srl	r2,r8,r2
200899ec:	21c07e26 	beq	r4,r7,20089be8 <__adddf3+0x7e0>
200899f0:	01c01004 	movi	r7,64
200899f4:	3909c83a 	sub	r4,r7,r4
200899f8:	4110983a 	sll	r8,r8,r4
200899fc:	418cb03a 	or	r6,r8,r6
20089a00:	300cc03a 	cmpne	r6,r6,zero
20089a04:	308cb03a 	or	r6,r6,r2
20089a08:	0011883a 	mov	r8,zero
20089a0c:	003f1b06 	br	2008967c <__flash_rwdata_start+0xfffeaaa8>
20089a10:	0101ffc4 	movi	r4,2047
20089a14:	113fa41e 	bne	r2,r4,200898a8 <__flash_rwdata_start+0xfffeacd4>
20089a18:	400b883a 	mov	r5,r8
20089a1c:	3023883a 	mov	r17,r6
20089a20:	1021883a 	mov	r16,r2
20089a24:	3825883a 	mov	r18,r7
20089a28:	003e9606 	br	20089484 <__flash_rwdata_start+0xfffea8b0>
20089a2c:	80001a1e 	bne	r16,zero,20089a98 <__adddf3+0x690>
20089a30:	2c4eb03a 	or	r7,r5,r17
20089a34:	38005526 	beq	r7,zero,20089b8c <__adddf3+0x784>
20089a38:	0108303a 	nor	r4,zero,r4
20089a3c:	2000511e 	bne	r4,zero,20089b84 <__adddf3+0x77c>
20089a40:	89a3883a 	add	r17,r17,r6
20089a44:	414b883a 	add	r5,r8,r5
20089a48:	898d803a 	cmpltu	r6,r17,r6
20089a4c:	298b883a 	add	r5,r5,r6
20089a50:	1021883a 	mov	r16,r2
20089a54:	003f0e06 	br	20089690 <__flash_rwdata_start+0xfffeaabc>
20089a58:	1000341e 	bne	r2,zero,20089b2c <__adddf3+0x724>
20089a5c:	4184b03a 	or	r2,r8,r6
20089a60:	10006f26 	beq	r2,zero,20089c20 <__adddf3+0x818>
20089a64:	400b883a 	mov	r5,r8
20089a68:	3023883a 	mov	r17,r6
20089a6c:	3825883a 	mov	r18,r7
20089a70:	0401ffc4 	movi	r16,2047
20089a74:	003e8306 	br	20089484 <__flash_rwdata_start+0xfffea8b0>
20089a78:	2c62b03a 	or	r17,r5,r17
20089a7c:	8822c03a 	cmpne	r17,r17,zero
20089a80:	0007883a 	mov	r3,zero
20089a84:	003f9506 	br	200898dc <__flash_rwdata_start+0xfffead08>
20089a88:	1021883a 	mov	r16,r2
20089a8c:	000b883a 	mov	r5,zero
20089a90:	0023883a 	mov	r17,zero
20089a94:	003edb06 	br	20089604 <__flash_rwdata_start+0xfffeaa30>
20089a98:	01c1ffc4 	movi	r7,2047
20089a9c:	11c03b26 	beq	r2,r7,20089b8c <__adddf3+0x784>
20089aa0:	0109c83a 	sub	r4,zero,r4
20089aa4:	29402034 	orhi	r5,r5,128
20089aa8:	01c00e04 	movi	r7,56
20089aac:	39006216 	blt	r7,r4,20089c38 <__adddf3+0x830>
20089ab0:	01c007c4 	movi	r7,31
20089ab4:	39006b16 	blt	r7,r4,20089c64 <__adddf3+0x85c>
20089ab8:	01c00804 	movi	r7,32
20089abc:	390fc83a 	sub	r7,r7,r4
20089ac0:	29d4983a 	sll	r10,r5,r7
20089ac4:	8912d83a 	srl	r9,r17,r4
20089ac8:	89ce983a 	sll	r7,r17,r7
20089acc:	2908d83a 	srl	r4,r5,r4
20089ad0:	5262b03a 	or	r17,r10,r9
20089ad4:	380ac03a 	cmpne	r5,r7,zero
20089ad8:	8962b03a 	or	r17,r17,r5
20089adc:	89a3883a 	add	r17,r17,r6
20089ae0:	2211883a 	add	r8,r4,r8
20089ae4:	898d803a 	cmpltu	r6,r17,r6
20089ae8:	418b883a 	add	r5,r8,r6
20089aec:	1021883a 	mov	r16,r2
20089af0:	003ee706 	br	20089690 <__flash_rwdata_start+0xfffeaabc>
20089af4:	4184b03a 	or	r2,r8,r6
20089af8:	103e6226 	beq	r2,zero,20089484 <__flash_rwdata_start+0xfffea8b0>
20089afc:	8987c83a 	sub	r3,r17,r6
20089b00:	88c9803a 	cmpltu	r4,r17,r3
20089b04:	2a05c83a 	sub	r2,r5,r8
20089b08:	1105c83a 	sub	r2,r2,r4
20089b0c:	1100202c 	andhi	r4,r2,128
20089b10:	203f0426 	beq	r4,zero,20089724 <__flash_rwdata_start+0xfffeab50>
20089b14:	3463c83a 	sub	r17,r6,r17
20089b18:	414bc83a 	sub	r5,r8,r5
20089b1c:	344d803a 	cmpltu	r6,r6,r17
20089b20:	298bc83a 	sub	r5,r5,r6
20089b24:	3825883a 	mov	r18,r7
20089b28:	003e5606 	br	20089484 <__flash_rwdata_start+0xfffea8b0>
20089b2c:	4184b03a 	or	r2,r8,r6
20089b30:	10002b26 	beq	r2,zero,20089be0 <__adddf3+0x7d8>
20089b34:	2804d0fa 	srli	r2,r5,3
20089b38:	8822d0fa 	srli	r17,r17,3
20089b3c:	280a977a 	slli	r5,r5,29
20089b40:	10c0022c 	andhi	r3,r2,8
20089b44:	2c62b03a 	or	r17,r5,r17
20089b48:	18000826 	beq	r3,zero,20089b6c <__adddf3+0x764>
20089b4c:	4008d0fa 	srli	r4,r8,3
20089b50:	20c0022c 	andhi	r3,r4,8
20089b54:	1800051e 	bne	r3,zero,20089b6c <__adddf3+0x764>
20089b58:	300cd0fa 	srli	r6,r6,3
20089b5c:	4010977a 	slli	r8,r8,29
20089b60:	2005883a 	mov	r2,r4
20089b64:	3825883a 	mov	r18,r7
20089b68:	41a2b03a 	or	r17,r8,r6
20089b6c:	880ad77a 	srli	r5,r17,29
20089b70:	100490fa 	slli	r2,r2,3
20089b74:	882290fa 	slli	r17,r17,3
20089b78:	0401ffc4 	movi	r16,2047
20089b7c:	288ab03a 	or	r5,r5,r2
20089b80:	003e4006 	br	20089484 <__flash_rwdata_start+0xfffea8b0>
20089b84:	01c1ffc4 	movi	r7,2047
20089b88:	11ffc71e 	bne	r2,r7,20089aa8 <__flash_rwdata_start+0xfffeaed4>
20089b8c:	400b883a 	mov	r5,r8
20089b90:	3023883a 	mov	r17,r6
20089b94:	1021883a 	mov	r16,r2
20089b98:	003e3a06 	br	20089484 <__flash_rwdata_start+0xfffea8b0>
20089b9c:	10002d26 	beq	r2,zero,20089c54 <__adddf3+0x84c>
20089ba0:	4184b03a 	or	r2,r8,r6
20089ba4:	10000e26 	beq	r2,zero,20089be0 <__adddf3+0x7d8>
20089ba8:	2804d0fa 	srli	r2,r5,3
20089bac:	8822d0fa 	srli	r17,r17,3
20089bb0:	280a977a 	slli	r5,r5,29
20089bb4:	10c0022c 	andhi	r3,r2,8
20089bb8:	2c62b03a 	or	r17,r5,r17
20089bbc:	183feb26 	beq	r3,zero,20089b6c <__flash_rwdata_start+0xfffeaf98>
20089bc0:	4008d0fa 	srli	r4,r8,3
20089bc4:	20c0022c 	andhi	r3,r4,8
20089bc8:	183fe81e 	bne	r3,zero,20089b6c <__flash_rwdata_start+0xfffeaf98>
20089bcc:	300cd0fa 	srli	r6,r6,3
20089bd0:	4010977a 	slli	r8,r8,29
20089bd4:	2005883a 	mov	r2,r4
20089bd8:	41a2b03a 	or	r17,r8,r6
20089bdc:	003fe306 	br	20089b6c <__flash_rwdata_start+0xfffeaf98>
20089be0:	0401ffc4 	movi	r16,2047
20089be4:	003e2706 	br	20089484 <__flash_rwdata_start+0xfffea8b0>
20089be8:	0011883a 	mov	r8,zero
20089bec:	003f8306 	br	200899fc <__flash_rwdata_start+0xfffeae28>
20089bf0:	193ff804 	addi	r4,r3,-32
20089bf4:	02400804 	movi	r9,32
20089bf8:	2908d83a 	srl	r4,r5,r4
20089bfc:	1a402526 	beq	r3,r9,20089c94 <__adddf3+0x88c>
20089c00:	02401004 	movi	r9,64
20089c04:	48c7c83a 	sub	r3,r9,r3
20089c08:	28ca983a 	sll	r5,r5,r3
20089c0c:	2c62b03a 	or	r17,r5,r17
20089c10:	8822c03a 	cmpne	r17,r17,zero
20089c14:	8922b03a 	or	r17,r17,r4
20089c18:	0007883a 	mov	r3,zero
20089c1c:	003f2f06 	br	200898dc <__flash_rwdata_start+0xfffead08>
20089c20:	01402034 	movhi	r5,128
20089c24:	0007883a 	mov	r3,zero
20089c28:	297fffc4 	addi	r5,r5,-1
20089c2c:	047ffe04 	movi	r17,-8
20089c30:	0401ffc4 	movi	r16,2047
20089c34:	003e7306 	br	20089604 <__flash_rwdata_start+0xfffeaa30>
20089c38:	2c62b03a 	or	r17,r5,r17
20089c3c:	8822c03a 	cmpne	r17,r17,zero
20089c40:	0009883a 	mov	r4,zero
20089c44:	003fa506 	br	20089adc <__flash_rwdata_start+0xfffeaf08>
20089c48:	400b883a 	mov	r5,r8
20089c4c:	3023883a 	mov	r17,r6
20089c50:	003e0c06 	br	20089484 <__flash_rwdata_start+0xfffea8b0>
20089c54:	400b883a 	mov	r5,r8
20089c58:	3023883a 	mov	r17,r6
20089c5c:	0401ffc4 	movi	r16,2047
20089c60:	003e0806 	br	20089484 <__flash_rwdata_start+0xfffea8b0>
20089c64:	21fff804 	addi	r7,r4,-32
20089c68:	02400804 	movi	r9,32
20089c6c:	29ced83a 	srl	r7,r5,r7
20089c70:	22400a26 	beq	r4,r9,20089c9c <__adddf3+0x894>
20089c74:	02401004 	movi	r9,64
20089c78:	4909c83a 	sub	r4,r9,r4
20089c7c:	290a983a 	sll	r5,r5,r4
20089c80:	2c62b03a 	or	r17,r5,r17
20089c84:	8822c03a 	cmpne	r17,r17,zero
20089c88:	89e2b03a 	or	r17,r17,r7
20089c8c:	0009883a 	mov	r4,zero
20089c90:	003f9206 	br	20089adc <__flash_rwdata_start+0xfffeaf08>
20089c94:	000b883a 	mov	r5,zero
20089c98:	003fdc06 	br	20089c0c <__flash_rwdata_start+0xfffeb038>
20089c9c:	000b883a 	mov	r5,zero
20089ca0:	003ff706 	br	20089c80 <__flash_rwdata_start+0xfffeb0ac>

20089ca4 <__divdf3>:
20089ca4:	defff204 	addi	sp,sp,-56
20089ca8:	dd000815 	stw	r20,32(sp)
20089cac:	2828d53a 	srli	r20,r5,20
20089cb0:	dd800a15 	stw	r22,40(sp)
20089cb4:	282cd7fa 	srli	r22,r5,31
20089cb8:	dc000415 	stw	r16,16(sp)
20089cbc:	04000434 	movhi	r16,16
20089cc0:	df000c15 	stw	fp,48(sp)
20089cc4:	dcc00715 	stw	r19,28(sp)
20089cc8:	dc800615 	stw	r18,24(sp)
20089ccc:	dc400515 	stw	r17,20(sp)
20089cd0:	843fffc4 	addi	r16,r16,-1
20089cd4:	dfc00d15 	stw	ra,52(sp)
20089cd8:	ddc00b15 	stw	r23,44(sp)
20089cdc:	dd400915 	stw	r21,36(sp)
20089ce0:	a501ffcc 	andi	r20,r20,2047
20089ce4:	2025883a 	mov	r18,r4
20089ce8:	2027883a 	mov	r19,r4
20089cec:	2c22703a 	and	r17,r5,r16
20089cf0:	b7003fcc 	andi	fp,r22,255
20089cf4:	a0005e26 	beq	r20,zero,20089e70 <__divdf3+0x1cc>
20089cf8:	0081ffc4 	movi	r2,2047
20089cfc:	a0803526 	beq	r20,r2,20089dd4 <__divdf3+0x130>
20089d00:	8c000434 	orhi	r16,r17,16
20089d04:	2004d77a 	srli	r2,r4,29
20089d08:	802090fa 	slli	r16,r16,3
20089d0c:	202690fa 	slli	r19,r4,3
20089d10:	a53f0044 	addi	r20,r20,-1023
20089d14:	80a2b03a 	or	r17,r16,r2
20089d18:	0025883a 	mov	r18,zero
20089d1c:	0011883a 	mov	r8,zero
20089d20:	380ad53a 	srli	r5,r7,20
20089d24:	382ed7fa 	srli	r23,r7,31
20089d28:	04000434 	movhi	r16,16
20089d2c:	843fffc4 	addi	r16,r16,-1
20089d30:	2941ffcc 	andi	r5,r5,2047
20089d34:	302b883a 	mov	r21,r6
20089d38:	3c20703a 	and	r16,r7,r16
20089d3c:	ba403fcc 	andi	r9,r23,255
20089d40:	28006726 	beq	r5,zero,20089ee0 <__divdf3+0x23c>
20089d44:	0081ffc4 	movi	r2,2047
20089d48:	28805f26 	beq	r5,r2,20089ec8 <__divdf3+0x224>
20089d4c:	84000434 	orhi	r16,r16,16
20089d50:	3004d77a 	srli	r2,r6,29
20089d54:	802090fa 	slli	r16,r16,3
20089d58:	302a90fa 	slli	r21,r6,3
20089d5c:	297f0044 	addi	r5,r5,-1023
20089d60:	80a0b03a 	or	r16,r16,r2
20089d64:	000f883a 	mov	r7,zero
20089d68:	3c86b03a 	or	r3,r7,r18
20089d6c:	180690ba 	slli	r3,r3,2
20089d70:	00880274 	movhi	r2,8201
20089d74:	10a76504 	addi	r2,r2,-25196
20089d78:	1887883a 	add	r3,r3,r2
20089d7c:	18c00017 	ldw	r3,0(r3)
20089d80:	b5c8f03a 	xor	r4,r22,r23
20089d84:	200d883a 	mov	r6,r4
20089d88:	24803fcc 	andi	r18,r4,255
20089d8c:	a169c83a 	sub	r20,r20,r5
20089d90:	1800683a 	jmp	r3
20089d94:	20089fdc 	xori	zero,r4,8831
20089d98:	20089e0c 	andi	zero,r4,8824
20089d9c:	20089fa0 	cmpeqi	zero,r4,8830
20089da0:	20089df0 	cmpltui	zero,r4,8823
20089da4:	20089fa0 	cmpeqi	zero,r4,8830
20089da8:	20089f74 	orhi	zero,r4,8829
20089dac:	20089fa0 	cmpeqi	zero,r4,8830
20089db0:	20089df0 	cmpltui	zero,r4,8823
20089db4:	20089e0c 	andi	zero,r4,8824
20089db8:	20089e0c 	andi	zero,r4,8824
20089dbc:	20089f74 	orhi	zero,r4,8829
20089dc0:	20089df0 	cmpltui	zero,r4,8823
20089dc4:	20089e00 	call	220089e0 <__flash_rwdata_start+0x1f69e0c>
20089dc8:	20089e00 	call	220089e0 <__flash_rwdata_start+0x1f69e0c>
20089dcc:	20089e00 	call	220089e0 <__flash_rwdata_start+0x1f69e0c>
20089dd0:	20089fb0 	cmpltui	zero,r4,8830
20089dd4:	8904b03a 	or	r2,r17,r4
20089dd8:	1000631e 	bne	r2,zero,20089f68 <__divdf3+0x2c4>
20089ddc:	04800204 	movi	r18,8
20089de0:	0023883a 	mov	r17,zero
20089de4:	0027883a 	mov	r19,zero
20089de8:	02000084 	movi	r8,2
20089dec:	003fcc06 	br	20089d20 <__flash_rwdata_start+0xfffeb14c>
20089df0:	8023883a 	mov	r17,r16
20089df4:	a827883a 	mov	r19,r21
20089df8:	4839883a 	mov	fp,r9
20089dfc:	3811883a 	mov	r8,r7
20089e00:	00800084 	movi	r2,2
20089e04:	40812a1e 	bne	r8,r2,2008a2b0 <__divdf3+0x60c>
20089e08:	e025883a 	mov	r18,fp
20089e0c:	9180004c 	andi	r6,r18,1
20089e10:	0101ffc4 	movi	r4,2047
20089e14:	000b883a 	mov	r5,zero
20089e18:	0027883a 	mov	r19,zero
20089e1c:	2008953a 	slli	r4,r4,20
20089e20:	30c03fcc 	andi	r3,r6,255
20089e24:	04000434 	movhi	r16,16
20089e28:	180697fa 	slli	r3,r3,31
20089e2c:	843fffc4 	addi	r16,r16,-1
20089e30:	2c20703a 	and	r16,r5,r16
20089e34:	8120b03a 	or	r16,r16,r4
20089e38:	80c6b03a 	or	r3,r16,r3
20089e3c:	9805883a 	mov	r2,r19
20089e40:	dfc00d17 	ldw	ra,52(sp)
20089e44:	df000c17 	ldw	fp,48(sp)
20089e48:	ddc00b17 	ldw	r23,44(sp)
20089e4c:	dd800a17 	ldw	r22,40(sp)
20089e50:	dd400917 	ldw	r21,36(sp)
20089e54:	dd000817 	ldw	r20,32(sp)
20089e58:	dcc00717 	ldw	r19,28(sp)
20089e5c:	dc800617 	ldw	r18,24(sp)
20089e60:	dc400517 	ldw	r17,20(sp)
20089e64:	dc000417 	ldw	r16,16(sp)
20089e68:	dec00e04 	addi	sp,sp,56
20089e6c:	f800283a 	ret
20089e70:	8904b03a 	or	r2,r17,r4
20089e74:	10003726 	beq	r2,zero,20089f54 <__divdf3+0x2b0>
20089e78:	88011c26 	beq	r17,zero,2008a2ec <__divdf3+0x648>
20089e7c:	8809883a 	mov	r4,r17
20089e80:	d9800315 	stw	r6,12(sp)
20089e84:	d9c00115 	stw	r7,4(sp)
20089e88:	008b2e40 	call	2008b2e4 <__clzsi2>
20089e8c:	d9800317 	ldw	r6,12(sp)
20089e90:	d9c00117 	ldw	r7,4(sp)
20089e94:	1007883a 	mov	r3,r2
20089e98:	01000a04 	movi	r4,40
20089e9c:	1cfffe04 	addi	r19,r3,-8
20089ea0:	20c9c83a 	sub	r4,r4,r3
20089ea4:	8cca983a 	sll	r5,r17,r19
20089ea8:	9108d83a 	srl	r4,r18,r4
20089eac:	94e6983a 	sll	r19,r18,r19
20089eb0:	2162b03a 	or	r17,r4,r5
20089eb4:	053f0344 	movi	r20,-1011
20089eb8:	a0e9c83a 	sub	r20,r20,r3
20089ebc:	0025883a 	mov	r18,zero
20089ec0:	0011883a 	mov	r8,zero
20089ec4:	003f9606 	br	20089d20 <__flash_rwdata_start+0xfffeb14c>
20089ec8:	8184b03a 	or	r2,r16,r6
20089ecc:	10001f1e 	bne	r2,zero,20089f4c <__divdf3+0x2a8>
20089ed0:	0021883a 	mov	r16,zero
20089ed4:	002b883a 	mov	r21,zero
20089ed8:	01c00084 	movi	r7,2
20089edc:	003fa206 	br	20089d68 <__flash_rwdata_start+0xfffeb194>
20089ee0:	8184b03a 	or	r2,r16,r6
20089ee4:	10001526 	beq	r2,zero,20089f3c <__divdf3+0x298>
20089ee8:	80010c26 	beq	r16,zero,2008a31c <__divdf3+0x678>
20089eec:	8009883a 	mov	r4,r16
20089ef0:	d9800315 	stw	r6,12(sp)
20089ef4:	da000215 	stw	r8,8(sp)
20089ef8:	da400015 	stw	r9,0(sp)
20089efc:	008b2e40 	call	2008b2e4 <__clzsi2>
20089f00:	d9800317 	ldw	r6,12(sp)
20089f04:	da000217 	ldw	r8,8(sp)
20089f08:	da400017 	ldw	r9,0(sp)
20089f0c:	1007883a 	mov	r3,r2
20089f10:	01000a04 	movi	r4,40
20089f14:	1d7ffe04 	addi	r21,r3,-8
20089f18:	20c9c83a 	sub	r4,r4,r3
20089f1c:	8560983a 	sll	r16,r16,r21
20089f20:	3108d83a 	srl	r4,r6,r4
20089f24:	356a983a 	sll	r21,r6,r21
20089f28:	2420b03a 	or	r16,r4,r16
20089f2c:	017f0344 	movi	r5,-1011
20089f30:	28cbc83a 	sub	r5,r5,r3
20089f34:	000f883a 	mov	r7,zero
20089f38:	003f8b06 	br	20089d68 <__flash_rwdata_start+0xfffeb194>
20089f3c:	0021883a 	mov	r16,zero
20089f40:	002b883a 	mov	r21,zero
20089f44:	01c00044 	movi	r7,1
20089f48:	003f8706 	br	20089d68 <__flash_rwdata_start+0xfffeb194>
20089f4c:	01c000c4 	movi	r7,3
20089f50:	003f8506 	br	20089d68 <__flash_rwdata_start+0xfffeb194>
20089f54:	04800104 	movi	r18,4
20089f58:	0023883a 	mov	r17,zero
20089f5c:	0027883a 	mov	r19,zero
20089f60:	02000044 	movi	r8,1
20089f64:	003f6e06 	br	20089d20 <__flash_rwdata_start+0xfffeb14c>
20089f68:	04800304 	movi	r18,12
20089f6c:	020000c4 	movi	r8,3
20089f70:	003f6b06 	br	20089d20 <__flash_rwdata_start+0xfffeb14c>
20089f74:	01400434 	movhi	r5,16
20089f78:	000d883a 	mov	r6,zero
20089f7c:	297fffc4 	addi	r5,r5,-1
20089f80:	04ffffc4 	movi	r19,-1
20089f84:	0101ffc4 	movi	r4,2047
20089f88:	003fa406 	br	20089e1c <__flash_rwdata_start+0xfffeb248>
20089f8c:	043f0084 	movi	r16,-1022
20089f90:	8521c83a 	sub	r16,r16,r20
20089f94:	00800e04 	movi	r2,56
20089f98:	1401200e 	bge	r2,r16,2008a41c <__divdf3+0x778>
20089f9c:	9180004c 	andi	r6,r18,1
20089fa0:	0009883a 	mov	r4,zero
20089fa4:	000b883a 	mov	r5,zero
20089fa8:	0027883a 	mov	r19,zero
20089fac:	003f9b06 	br	20089e1c <__flash_rwdata_start+0xfffeb248>
20089fb0:	8880022c 	andhi	r2,r17,8
20089fb4:	1000c726 	beq	r2,zero,2008a2d4 <__divdf3+0x630>
20089fb8:	8080022c 	andhi	r2,r16,8
20089fbc:	1000c51e 	bne	r2,zero,2008a2d4 <__divdf3+0x630>
20089fc0:	00800434 	movhi	r2,16
20089fc4:	81400234 	orhi	r5,r16,8
20089fc8:	10bfffc4 	addi	r2,r2,-1
20089fcc:	b80d883a 	mov	r6,r23
20089fd0:	288a703a 	and	r5,r5,r2
20089fd4:	a827883a 	mov	r19,r21
20089fd8:	003fea06 	br	20089f84 <__flash_rwdata_start+0xfffeb3b0>
20089fdc:	8440ea36 	bltu	r16,r17,2008a388 <__divdf3+0x6e4>
20089fe0:	8c00e826 	beq	r17,r16,2008a384 <__divdf3+0x6e0>
20089fe4:	a53fffc4 	addi	r20,r20,-1
20089fe8:	882d883a 	mov	r22,r17
20089fec:	000d883a 	mov	r6,zero
20089ff0:	a804d63a 	srli	r2,r21,24
20089ff4:	8020923a 	slli	r16,r16,8
20089ff8:	b009883a 	mov	r4,r22
20089ffc:	d9800315 	stw	r6,12(sp)
2008a000:	1420b03a 	or	r16,r2,r16
2008a004:	802ed43a 	srli	r23,r16,16
2008a008:	873fffcc 	andi	fp,r16,65535
2008a00c:	a82a923a 	slli	r21,r21,8
2008a010:	b80b883a 	mov	r5,r23
2008a014:	0088a740 	call	20088a74 <__udivsi3>
2008a018:	b009883a 	mov	r4,r22
2008a01c:	b80b883a 	mov	r5,r23
2008a020:	1023883a 	mov	r17,r2
2008a024:	0088a7c0 	call	20088a7c <__umodsi3>
2008a028:	1004943a 	slli	r2,r2,16
2008a02c:	9808d43a 	srli	r4,r19,16
2008a030:	8f2d383a 	mul	r22,r17,fp
2008a034:	d9800317 	ldw	r6,12(sp)
2008a038:	1106b03a 	or	r3,r2,r4
2008a03c:	1d80062e 	bgeu	r3,r22,2008a058 <__divdf3+0x3b4>
2008a040:	1c07883a 	add	r3,r3,r16
2008a044:	88bfffc4 	addi	r2,r17,-1
2008a048:	1c00dc36 	bltu	r3,r16,2008a3bc <__divdf3+0x718>
2008a04c:	1d80db2e 	bgeu	r3,r22,2008a3bc <__divdf3+0x718>
2008a050:	8c7fff84 	addi	r17,r17,-2
2008a054:	1c07883a 	add	r3,r3,r16
2008a058:	1dadc83a 	sub	r22,r3,r22
2008a05c:	b009883a 	mov	r4,r22
2008a060:	b80b883a 	mov	r5,r23
2008a064:	d9800315 	stw	r6,12(sp)
2008a068:	0088a740 	call	20088a74 <__udivsi3>
2008a06c:	b009883a 	mov	r4,r22
2008a070:	b80b883a 	mov	r5,r23
2008a074:	d8800015 	stw	r2,0(sp)
2008a078:	0088a7c0 	call	20088a7c <__umodsi3>
2008a07c:	da400017 	ldw	r9,0(sp)
2008a080:	1004943a 	slli	r2,r2,16
2008a084:	9cffffcc 	andi	r19,r19,65535
2008a088:	4f07383a 	mul	r3,r9,fp
2008a08c:	14c8b03a 	or	r4,r2,r19
2008a090:	d9800317 	ldw	r6,12(sp)
2008a094:	20c0062e 	bgeu	r4,r3,2008a0b0 <__divdf3+0x40c>
2008a098:	2409883a 	add	r4,r4,r16
2008a09c:	48bfffc4 	addi	r2,r9,-1
2008a0a0:	2400c436 	bltu	r4,r16,2008a3b4 <__divdf3+0x710>
2008a0a4:	20c0c32e 	bgeu	r4,r3,2008a3b4 <__divdf3+0x710>
2008a0a8:	4a7fff84 	addi	r9,r9,-2
2008a0ac:	2409883a 	add	r4,r4,r16
2008a0b0:	8822943a 	slli	r17,r17,16
2008a0b4:	a80ed43a 	srli	r7,r21,16
2008a0b8:	aa3fffcc 	andi	r8,r21,65535
2008a0bc:	4c62b03a 	or	r17,r9,r17
2008a0c0:	8816d43a 	srli	r11,r17,16
2008a0c4:	897fffcc 	andi	r5,r17,65535
2008a0c8:	2a15383a 	mul	r10,r5,r8
2008a0cc:	5a19383a 	mul	r12,r11,r8
2008a0d0:	29cb383a 	mul	r5,r5,r7
2008a0d4:	5012d43a 	srli	r9,r10,16
2008a0d8:	20c5c83a 	sub	r2,r4,r3
2008a0dc:	614b883a 	add	r5,r12,r5
2008a0e0:	2a4b883a 	add	r5,r5,r9
2008a0e4:	59c7383a 	mul	r3,r11,r7
2008a0e8:	2b00022e 	bgeu	r5,r12,2008a0f4 <__divdf3+0x450>
2008a0ec:	01000074 	movhi	r4,1
2008a0f0:	1907883a 	add	r3,r3,r4
2008a0f4:	2808d43a 	srli	r4,r5,16
2008a0f8:	280a943a 	slli	r5,r5,16
2008a0fc:	54ffffcc 	andi	r19,r10,65535
2008a100:	1907883a 	add	r3,r3,r4
2008a104:	2ccb883a 	add	r5,r5,r19
2008a108:	10c09336 	bltu	r2,r3,2008a358 <__divdf3+0x6b4>
2008a10c:	10c0ad26 	beq	r2,r3,2008a3c4 <__divdf3+0x720>
2008a110:	10c7c83a 	sub	r3,r2,r3
2008a114:	3167c83a 	sub	r19,r6,r5
2008a118:	34ed803a 	cmpltu	r22,r6,r19
2008a11c:	1dadc83a 	sub	r22,r3,r22
2008a120:	b400b226 	beq	r22,r16,2008a3ec <__divdf3+0x748>
2008a124:	b009883a 	mov	r4,r22
2008a128:	b80b883a 	mov	r5,r23
2008a12c:	d9c00115 	stw	r7,4(sp)
2008a130:	da000215 	stw	r8,8(sp)
2008a134:	0088a740 	call	20088a74 <__udivsi3>
2008a138:	b009883a 	mov	r4,r22
2008a13c:	b80b883a 	mov	r5,r23
2008a140:	d8800315 	stw	r2,12(sp)
2008a144:	0088a7c0 	call	20088a7c <__umodsi3>
2008a148:	d9800317 	ldw	r6,12(sp)
2008a14c:	1004943a 	slli	r2,r2,16
2008a150:	9808d43a 	srli	r4,r19,16
2008a154:	372d383a 	mul	r22,r6,fp
2008a158:	d9c00117 	ldw	r7,4(sp)
2008a15c:	1106b03a 	or	r3,r2,r4
2008a160:	da000217 	ldw	r8,8(sp)
2008a164:	1d80062e 	bgeu	r3,r22,2008a180 <__divdf3+0x4dc>
2008a168:	1c07883a 	add	r3,r3,r16
2008a16c:	30bfffc4 	addi	r2,r6,-1
2008a170:	1c00a036 	bltu	r3,r16,2008a3f4 <__divdf3+0x750>
2008a174:	1d809f2e 	bgeu	r3,r22,2008a3f4 <__divdf3+0x750>
2008a178:	31bfff84 	addi	r6,r6,-2
2008a17c:	1c07883a 	add	r3,r3,r16
2008a180:	1dadc83a 	sub	r22,r3,r22
2008a184:	b009883a 	mov	r4,r22
2008a188:	b80b883a 	mov	r5,r23
2008a18c:	d9800315 	stw	r6,12(sp)
2008a190:	d9c00115 	stw	r7,4(sp)
2008a194:	da000215 	stw	r8,8(sp)
2008a198:	0088a740 	call	20088a74 <__udivsi3>
2008a19c:	b009883a 	mov	r4,r22
2008a1a0:	b80b883a 	mov	r5,r23
2008a1a4:	d8800015 	stw	r2,0(sp)
2008a1a8:	0088a7c0 	call	20088a7c <__umodsi3>
2008a1ac:	da400017 	ldw	r9,0(sp)
2008a1b0:	1004943a 	slli	r2,r2,16
2008a1b4:	993fffcc 	andi	r4,r19,65535
2008a1b8:	4f39383a 	mul	fp,r9,fp
2008a1bc:	1106b03a 	or	r3,r2,r4
2008a1c0:	d9800317 	ldw	r6,12(sp)
2008a1c4:	d9c00117 	ldw	r7,4(sp)
2008a1c8:	da000217 	ldw	r8,8(sp)
2008a1cc:	1f00062e 	bgeu	r3,fp,2008a1e8 <__divdf3+0x544>
2008a1d0:	1c07883a 	add	r3,r3,r16
2008a1d4:	48bfffc4 	addi	r2,r9,-1
2008a1d8:	1c008836 	bltu	r3,r16,2008a3fc <__divdf3+0x758>
2008a1dc:	1f00872e 	bgeu	r3,fp,2008a3fc <__divdf3+0x758>
2008a1e0:	4a7fff84 	addi	r9,r9,-2
2008a1e4:	1c07883a 	add	r3,r3,r16
2008a1e8:	3008943a 	slli	r4,r6,16
2008a1ec:	1f07c83a 	sub	r3,r3,fp
2008a1f0:	4926b03a 	or	r19,r9,r4
2008a1f4:	993fffcc 	andi	r4,r19,65535
2008a1f8:	980cd43a 	srli	r6,r19,16
2008a1fc:	220b383a 	mul	r5,r4,r8
2008a200:	21c5383a 	mul	r2,r4,r7
2008a204:	3211383a 	mul	r8,r6,r8
2008a208:	2808d43a 	srli	r4,r5,16
2008a20c:	31cf383a 	mul	r7,r6,r7
2008a210:	4085883a 	add	r2,r8,r2
2008a214:	1105883a 	add	r2,r2,r4
2008a218:	1200022e 	bgeu	r2,r8,2008a224 <__divdf3+0x580>
2008a21c:	01000074 	movhi	r4,1
2008a220:	390f883a 	add	r7,r7,r4
2008a224:	1008d43a 	srli	r4,r2,16
2008a228:	1004943a 	slli	r2,r2,16
2008a22c:	297fffcc 	andi	r5,r5,65535
2008a230:	390f883a 	add	r7,r7,r4
2008a234:	1145883a 	add	r2,r2,r5
2008a238:	19c06536 	bltu	r3,r7,2008a3d0 <__divdf3+0x72c>
2008a23c:	19c09f26 	beq	r3,r7,2008a4bc <__divdf3+0x818>
2008a240:	9cc00054 	ori	r19,r19,1
2008a244:	a100ffc4 	addi	r4,r20,1023
2008a248:	013f500e 	bge	zero,r4,20089f8c <__flash_rwdata_start+0xfffeb3b8>
2008a24c:	988001cc 	andi	r2,r19,7
2008a250:	10000726 	beq	r2,zero,2008a270 <__divdf3+0x5cc>
2008a254:	98c003cc 	andi	r3,r19,15
2008a258:	00800104 	movi	r2,4
2008a25c:	18800426 	beq	r3,r2,2008a270 <__divdf3+0x5cc>
2008a260:	9885883a 	add	r2,r19,r2
2008a264:	14e1803a 	cmpltu	r16,r2,r19
2008a268:	8c23883a 	add	r17,r17,r16
2008a26c:	1027883a 	mov	r19,r2
2008a270:	8880402c 	andhi	r2,r17,256
2008a274:	10000426 	beq	r2,zero,2008a288 <__divdf3+0x5e4>
2008a278:	00bfc034 	movhi	r2,65280
2008a27c:	10bfffc4 	addi	r2,r2,-1
2008a280:	a1010004 	addi	r4,r20,1024
2008a284:	88a2703a 	and	r17,r17,r2
2008a288:	0081ff84 	movi	r2,2046
2008a28c:	113edf16 	blt	r2,r4,20089e0c <__flash_rwdata_start+0xfffeb238>
2008a290:	9826d0fa 	srli	r19,r19,3
2008a294:	8804977a 	slli	r2,r17,29
2008a298:	8820927a 	slli	r16,r17,9
2008a29c:	2101ffcc 	andi	r4,r4,2047
2008a2a0:	14e6b03a 	or	r19,r2,r19
2008a2a4:	800ad33a 	srli	r5,r16,12
2008a2a8:	9180004c 	andi	r6,r18,1
2008a2ac:	003edb06 	br	20089e1c <__flash_rwdata_start+0xfffeb248>
2008a2b0:	008000c4 	movi	r2,3
2008a2b4:	4080a826 	beq	r8,r2,2008a558 <__divdf3+0x8b4>
2008a2b8:	00800044 	movi	r2,1
2008a2bc:	4080551e 	bne	r8,r2,2008a414 <__divdf3+0x770>
2008a2c0:	e00d883a 	mov	r6,fp
2008a2c4:	0009883a 	mov	r4,zero
2008a2c8:	000b883a 	mov	r5,zero
2008a2cc:	0027883a 	mov	r19,zero
2008a2d0:	003ed206 	br	20089e1c <__flash_rwdata_start+0xfffeb248>
2008a2d4:	00800434 	movhi	r2,16
2008a2d8:	89400234 	orhi	r5,r17,8
2008a2dc:	10bfffc4 	addi	r2,r2,-1
2008a2e0:	b00d883a 	mov	r6,r22
2008a2e4:	288a703a 	and	r5,r5,r2
2008a2e8:	003f2606 	br	20089f84 <__flash_rwdata_start+0xfffeb3b0>
2008a2ec:	d9800315 	stw	r6,12(sp)
2008a2f0:	d9c00115 	stw	r7,4(sp)
2008a2f4:	008b2e40 	call	2008b2e4 <__clzsi2>
2008a2f8:	10c00804 	addi	r3,r2,32
2008a2fc:	010009c4 	movi	r4,39
2008a300:	d9800317 	ldw	r6,12(sp)
2008a304:	d9c00117 	ldw	r7,4(sp)
2008a308:	20fee30e 	bge	r4,r3,20089e98 <__flash_rwdata_start+0xfffeb2c4>
2008a30c:	117ffe04 	addi	r5,r2,-8
2008a310:	9162983a 	sll	r17,r18,r5
2008a314:	0027883a 	mov	r19,zero
2008a318:	003ee606 	br	20089eb4 <__flash_rwdata_start+0xfffeb2e0>
2008a31c:	3009883a 	mov	r4,r6
2008a320:	d9800315 	stw	r6,12(sp)
2008a324:	da000215 	stw	r8,8(sp)
2008a328:	da400015 	stw	r9,0(sp)
2008a32c:	008b2e40 	call	2008b2e4 <__clzsi2>
2008a330:	10c00804 	addi	r3,r2,32
2008a334:	010009c4 	movi	r4,39
2008a338:	d9800317 	ldw	r6,12(sp)
2008a33c:	da000217 	ldw	r8,8(sp)
2008a340:	da400017 	ldw	r9,0(sp)
2008a344:	20fef20e 	bge	r4,r3,20089f10 <__flash_rwdata_start+0xfffeb33c>
2008a348:	10bffe04 	addi	r2,r2,-8
2008a34c:	a8a0983a 	sll	r16,r21,r2
2008a350:	002b883a 	mov	r21,zero
2008a354:	003ef506 	br	20089f2c <__flash_rwdata_start+0xfffeb358>
2008a358:	354d883a 	add	r6,r6,r21
2008a35c:	3549803a 	cmpltu	r4,r6,r21
2008a360:	2409883a 	add	r4,r4,r16
2008a364:	2089883a 	add	r4,r4,r2
2008a368:	88bfffc4 	addi	r2,r17,-1
2008a36c:	81000c2e 	bgeu	r16,r4,2008a3a0 <__divdf3+0x6fc>
2008a370:	20c04436 	bltu	r4,r3,2008a484 <__divdf3+0x7e0>
2008a374:	19006f26 	beq	r3,r4,2008a534 <__divdf3+0x890>
2008a378:	20c7c83a 	sub	r3,r4,r3
2008a37c:	1023883a 	mov	r17,r2
2008a380:	003f6406 	br	2008a114 <__flash_rwdata_start+0xfffeb540>
2008a384:	9d7f1736 	bltu	r19,r21,20089fe4 <__flash_rwdata_start+0xfffeb410>
2008a388:	9806d07a 	srli	r3,r19,1
2008a38c:	880497fa 	slli	r2,r17,31
2008a390:	980c97fa 	slli	r6,r19,31
2008a394:	882cd07a 	srli	r22,r17,1
2008a398:	18a6b03a 	or	r19,r3,r2
2008a39c:	003f1406 	br	20089ff0 <__flash_rwdata_start+0xfffeb41c>
2008a3a0:	243ff51e 	bne	r4,r16,2008a378 <__flash_rwdata_start+0xfffeb7a4>
2008a3a4:	357ff22e 	bgeu	r6,r21,2008a370 <__flash_rwdata_start+0xfffeb79c>
2008a3a8:	80c7c83a 	sub	r3,r16,r3
2008a3ac:	1023883a 	mov	r17,r2
2008a3b0:	003f5806 	br	2008a114 <__flash_rwdata_start+0xfffeb540>
2008a3b4:	1013883a 	mov	r9,r2
2008a3b8:	003f3d06 	br	2008a0b0 <__flash_rwdata_start+0xfffeb4dc>
2008a3bc:	1023883a 	mov	r17,r2
2008a3c0:	003f2506 	br	2008a058 <__flash_rwdata_start+0xfffeb484>
2008a3c4:	317fe436 	bltu	r6,r5,2008a358 <__flash_rwdata_start+0xfffeb784>
2008a3c8:	0007883a 	mov	r3,zero
2008a3cc:	003f5106 	br	2008a114 <__flash_rwdata_start+0xfffeb540>
2008a3d0:	1c07883a 	add	r3,r3,r16
2008a3d4:	993fffc4 	addi	r4,r19,-1
2008a3d8:	1c000a2e 	bgeu	r3,r16,2008a404 <__divdf3+0x760>
2008a3dc:	2027883a 	mov	r19,r4
2008a3e0:	19ff971e 	bne	r3,r7,2008a240 <__flash_rwdata_start+0xfffeb66c>
2008a3e4:	a8bf961e 	bne	r21,r2,2008a240 <__flash_rwdata_start+0xfffeb66c>
2008a3e8:	003f9606 	br	2008a244 <__flash_rwdata_start+0xfffeb670>
2008a3ec:	04ffffc4 	movi	r19,-1
2008a3f0:	003f9406 	br	2008a244 <__flash_rwdata_start+0xfffeb670>
2008a3f4:	100d883a 	mov	r6,r2
2008a3f8:	003f6106 	br	2008a180 <__flash_rwdata_start+0xfffeb5ac>
2008a3fc:	1013883a 	mov	r9,r2
2008a400:	003f7906 	br	2008a1e8 <__flash_rwdata_start+0xfffeb614>
2008a404:	19c02636 	bltu	r3,r7,2008a4a0 <__divdf3+0x7fc>
2008a408:	38c04d26 	beq	r7,r3,2008a540 <__divdf3+0x89c>
2008a40c:	2027883a 	mov	r19,r4
2008a410:	003f8b06 	br	2008a240 <__flash_rwdata_start+0xfffeb66c>
2008a414:	e025883a 	mov	r18,fp
2008a418:	003f8a06 	br	2008a244 <__flash_rwdata_start+0xfffeb670>
2008a41c:	008007c4 	movi	r2,31
2008a420:	14002a16 	blt	r2,r16,2008a4cc <__divdf3+0x828>
2008a424:	a5010784 	addi	r20,r20,1054
2008a428:	8d04983a 	sll	r2,r17,r20
2008a42c:	9c06d83a 	srl	r3,r19,r16
2008a430:	9d28983a 	sll	r20,r19,r20
2008a434:	8c20d83a 	srl	r16,r17,r16
2008a438:	1886b03a 	or	r3,r3,r2
2008a43c:	a004c03a 	cmpne	r2,r20,zero
2008a440:	1884b03a 	or	r2,r3,r2
2008a444:	10c001cc 	andi	r3,r2,7
2008a448:	18000726 	beq	r3,zero,2008a468 <__divdf3+0x7c4>
2008a44c:	110003cc 	andi	r4,r2,15
2008a450:	00c00104 	movi	r3,4
2008a454:	20c00426 	beq	r4,r3,2008a468 <__divdf3+0x7c4>
2008a458:	10c00104 	addi	r3,r2,4
2008a45c:	1885803a 	cmpltu	r2,r3,r2
2008a460:	80a1883a 	add	r16,r16,r2
2008a464:	1805883a 	mov	r2,r3
2008a468:	80c0202c 	andhi	r3,r16,128
2008a46c:	18002d26 	beq	r3,zero,2008a524 <__divdf3+0x880>
2008a470:	9180004c 	andi	r6,r18,1
2008a474:	01000044 	movi	r4,1
2008a478:	000b883a 	mov	r5,zero
2008a47c:	0027883a 	mov	r19,zero
2008a480:	003e6606 	br	20089e1c <__flash_rwdata_start+0xfffeb248>
2008a484:	354d883a 	add	r6,r6,r21
2008a488:	356d803a 	cmpltu	r22,r6,r21
2008a48c:	b42d883a 	add	r22,r22,r16
2008a490:	b12d883a 	add	r22,r22,r4
2008a494:	8c7fff84 	addi	r17,r17,-2
2008a498:	b0c7c83a 	sub	r3,r22,r3
2008a49c:	003f1d06 	br	2008a114 <__flash_rwdata_start+0xfffeb540>
2008a4a0:	ad4b883a 	add	r5,r21,r21
2008a4a4:	2d6b803a 	cmpltu	r21,r5,r21
2008a4a8:	ac2b883a 	add	r21,r21,r16
2008a4ac:	1d47883a 	add	r3,r3,r21
2008a4b0:	993fff84 	addi	r4,r19,-2
2008a4b4:	282b883a 	mov	r21,r5
2008a4b8:	003fc806 	br	2008a3dc <__flash_rwdata_start+0xfffeb808>
2008a4bc:	103fc41e 	bne	r2,zero,2008a3d0 <__flash_rwdata_start+0xfffeb7fc>
2008a4c0:	002b883a 	mov	r21,zero
2008a4c4:	a8bf5e1e 	bne	r21,r2,2008a240 <__flash_rwdata_start+0xfffeb66c>
2008a4c8:	003f5e06 	br	2008a244 <__flash_rwdata_start+0xfffeb670>
2008a4cc:	00bef884 	movi	r2,-1054
2008a4d0:	1505c83a 	sub	r2,r2,r20
2008a4d4:	00c00804 	movi	r3,32
2008a4d8:	8884d83a 	srl	r2,r17,r2
2008a4dc:	80c01c26 	beq	r16,r3,2008a550 <__divdf3+0x8ac>
2008a4e0:	a0c10f84 	addi	r3,r20,1086
2008a4e4:	88c6983a 	sll	r3,r17,r3
2008a4e8:	1cc6b03a 	or	r3,r3,r19
2008a4ec:	1806c03a 	cmpne	r3,r3,zero
2008a4f0:	1884b03a 	or	r2,r3,r2
2008a4f4:	140001cc 	andi	r16,r2,7
2008a4f8:	8000061e 	bne	r16,zero,2008a514 <__divdf3+0x870>
2008a4fc:	000b883a 	mov	r5,zero
2008a500:	1004d0fa 	srli	r2,r2,3
2008a504:	9180004c 	andi	r6,r18,1
2008a508:	0009883a 	mov	r4,zero
2008a50c:	1426b03a 	or	r19,r2,r16
2008a510:	003e4206 	br	20089e1c <__flash_rwdata_start+0xfffeb248>
2008a514:	110003cc 	andi	r4,r2,15
2008a518:	00c00104 	movi	r3,4
2008a51c:	0021883a 	mov	r16,zero
2008a520:	20ffcd1e 	bne	r4,r3,2008a458 <__flash_rwdata_start+0xfffeb884>
2008a524:	800a927a 	slli	r5,r16,9
2008a528:	8020977a 	slli	r16,r16,29
2008a52c:	280ad33a 	srli	r5,r5,12
2008a530:	003ff306 	br	2008a500 <__flash_rwdata_start+0xfffeb92c>
2008a534:	317fd336 	bltu	r6,r5,2008a484 <__flash_rwdata_start+0xfffeb8b0>
2008a538:	1023883a 	mov	r17,r2
2008a53c:	003fa206 	br	2008a3c8 <__flash_rwdata_start+0xfffeb7f4>
2008a540:	a8bfd736 	bltu	r21,r2,2008a4a0 <__flash_rwdata_start+0xfffeb8cc>
2008a544:	2027883a 	mov	r19,r4
2008a548:	a8bf3d1e 	bne	r21,r2,2008a240 <__flash_rwdata_start+0xfffeb66c>
2008a54c:	003f3d06 	br	2008a244 <__flash_rwdata_start+0xfffeb670>
2008a550:	0007883a 	mov	r3,zero
2008a554:	003fe406 	br	2008a4e8 <__flash_rwdata_start+0xfffeb914>
2008a558:	00800434 	movhi	r2,16
2008a55c:	89400234 	orhi	r5,r17,8
2008a560:	10bfffc4 	addi	r2,r2,-1
2008a564:	e00d883a 	mov	r6,fp
2008a568:	288a703a 	and	r5,r5,r2
2008a56c:	003e8506 	br	20089f84 <__flash_rwdata_start+0xfffeb3b0>

2008a570 <__subdf3>:
2008a570:	00c00434 	movhi	r3,16
2008a574:	18ffffc4 	addi	r3,r3,-1
2008a578:	defffb04 	addi	sp,sp,-20
2008a57c:	28d2703a 	and	r9,r5,r3
2008a580:	3814d53a 	srli	r10,r7,20
2008a584:	38c6703a 	and	r3,r7,r3
2008a588:	3004d77a 	srli	r2,r6,29
2008a58c:	dc800215 	stw	r18,8(sp)
2008a590:	dc000015 	stw	r16,0(sp)
2008a594:	2824d7fa 	srli	r18,r5,31
2008a598:	2820d53a 	srli	r16,r5,20
2008a59c:	481290fa 	slli	r9,r9,3
2008a5a0:	200ad77a 	srli	r5,r4,29
2008a5a4:	180690fa 	slli	r3,r3,3
2008a5a8:	dc400115 	stw	r17,4(sp)
2008a5ac:	dfc00415 	stw	ra,16(sp)
2008a5b0:	202290fa 	slli	r17,r4,3
2008a5b4:	dcc00315 	stw	r19,12(sp)
2008a5b8:	5281ffcc 	andi	r10,r10,2047
2008a5bc:	0101ffc4 	movi	r4,2047
2008a5c0:	9011883a 	mov	r8,r18
2008a5c4:	8401ffcc 	andi	r16,r16,2047
2008a5c8:	94803fcc 	andi	r18,r18,255
2008a5cc:	494ab03a 	or	r5,r9,r5
2008a5d0:	380ed7fa 	srli	r7,r7,31
2008a5d4:	1886b03a 	or	r3,r3,r2
2008a5d8:	300c90fa 	slli	r6,r6,3
2008a5dc:	51009026 	beq	r10,r4,2008a820 <__subdf3+0x2b0>
2008a5e0:	39c0005c 	xori	r7,r7,1
2008a5e4:	8285c83a 	sub	r2,r16,r10
2008a5e8:	91c06f26 	beq	r18,r7,2008a7a8 <__subdf3+0x238>
2008a5ec:	0080b10e 	bge	zero,r2,2008a8b4 <__subdf3+0x344>
2008a5f0:	50002a1e 	bne	r10,zero,2008a69c <__subdf3+0x12c>
2008a5f4:	1988b03a 	or	r4,r3,r6
2008a5f8:	2000941e 	bne	r4,zero,2008a84c <__subdf3+0x2dc>
2008a5fc:	888001cc 	andi	r2,r17,7
2008a600:	10005b26 	beq	r2,zero,2008a770 <__subdf3+0x200>
2008a604:	88c003cc 	andi	r3,r17,15
2008a608:	00800104 	movi	r2,4
2008a60c:	18805826 	beq	r3,r2,2008a770 <__subdf3+0x200>
2008a610:	88c00104 	addi	r3,r17,4
2008a614:	1c63803a 	cmpltu	r17,r3,r17
2008a618:	2c4b883a 	add	r5,r5,r17
2008a61c:	2880202c 	andhi	r2,r5,128
2008a620:	9200004c 	andi	r8,r18,1
2008a624:	1823883a 	mov	r17,r3
2008a628:	10005426 	beq	r2,zero,2008a77c <__subdf3+0x20c>
2008a62c:	84000044 	addi	r16,r16,1
2008a630:	0081ffc4 	movi	r2,2047
2008a634:	8080bf26 	beq	r16,r2,2008a934 <__subdf3+0x3c4>
2008a638:	013fe034 	movhi	r4,65408
2008a63c:	213fffc4 	addi	r4,r4,-1
2008a640:	290a703a 	and	r5,r5,r4
2008a644:	2804977a 	slli	r2,r5,29
2008a648:	280a927a 	slli	r5,r5,9
2008a64c:	8822d0fa 	srli	r17,r17,3
2008a650:	8401ffcc 	andi	r16,r16,2047
2008a654:	2808d33a 	srli	r4,r5,12
2008a658:	1444b03a 	or	r2,r2,r17
2008a65c:	8401ffcc 	andi	r16,r16,2047
2008a660:	800a953a 	slli	r5,r16,20
2008a664:	40c03fcc 	andi	r3,r8,255
2008a668:	04000434 	movhi	r16,16
2008a66c:	180697fa 	slli	r3,r3,31
2008a670:	843fffc4 	addi	r16,r16,-1
2008a674:	2420703a 	and	r16,r4,r16
2008a678:	8160b03a 	or	r16,r16,r5
2008a67c:	80c6b03a 	or	r3,r16,r3
2008a680:	dfc00417 	ldw	ra,16(sp)
2008a684:	dcc00317 	ldw	r19,12(sp)
2008a688:	dc800217 	ldw	r18,8(sp)
2008a68c:	dc400117 	ldw	r17,4(sp)
2008a690:	dc000017 	ldw	r16,0(sp)
2008a694:	dec00504 	addi	sp,sp,20
2008a698:	f800283a 	ret
2008a69c:	0101ffc4 	movi	r4,2047
2008a6a0:	813fd626 	beq	r16,r4,2008a5fc <__flash_rwdata_start+0xfffeba28>
2008a6a4:	18c02034 	orhi	r3,r3,128
2008a6a8:	01000e04 	movi	r4,56
2008a6ac:	2080a416 	blt	r4,r2,2008a940 <__subdf3+0x3d0>
2008a6b0:	010007c4 	movi	r4,31
2008a6b4:	2080c716 	blt	r4,r2,2008a9d4 <__subdf3+0x464>
2008a6b8:	01000804 	movi	r4,32
2008a6bc:	2089c83a 	sub	r4,r4,r2
2008a6c0:	1910983a 	sll	r8,r3,r4
2008a6c4:	308ed83a 	srl	r7,r6,r2
2008a6c8:	3108983a 	sll	r4,r6,r4
2008a6cc:	1884d83a 	srl	r2,r3,r2
2008a6d0:	41ccb03a 	or	r6,r8,r7
2008a6d4:	2008c03a 	cmpne	r4,r4,zero
2008a6d8:	310cb03a 	or	r6,r6,r4
2008a6dc:	898dc83a 	sub	r6,r17,r6
2008a6e0:	89a3803a 	cmpltu	r17,r17,r6
2008a6e4:	288bc83a 	sub	r5,r5,r2
2008a6e8:	2c4bc83a 	sub	r5,r5,r17
2008a6ec:	3023883a 	mov	r17,r6
2008a6f0:	2880202c 	andhi	r2,r5,128
2008a6f4:	10006b26 	beq	r2,zero,2008a8a4 <__subdf3+0x334>
2008a6f8:	04c02034 	movhi	r19,128
2008a6fc:	9cffffc4 	addi	r19,r19,-1
2008a700:	2ce6703a 	and	r19,r5,r19
2008a704:	98007c26 	beq	r19,zero,2008a8f8 <__subdf3+0x388>
2008a708:	9809883a 	mov	r4,r19
2008a70c:	008b2e40 	call	2008b2e4 <__clzsi2>
2008a710:	10fffe04 	addi	r3,r2,-8
2008a714:	010007c4 	movi	r4,31
2008a718:	20c07d16 	blt	r4,r3,2008a910 <__subdf3+0x3a0>
2008a71c:	01400a04 	movi	r5,40
2008a720:	2885c83a 	sub	r2,r5,r2
2008a724:	888ad83a 	srl	r5,r17,r2
2008a728:	98e6983a 	sll	r19,r19,r3
2008a72c:	88e2983a 	sll	r17,r17,r3
2008a730:	2ce6b03a 	or	r19,r5,r19
2008a734:	1c007a16 	blt	r3,r16,2008a920 <__subdf3+0x3b0>
2008a738:	1c21c83a 	sub	r16,r3,r16
2008a73c:	81400044 	addi	r5,r16,1
2008a740:	00c007c4 	movi	r3,31
2008a744:	19409616 	blt	r3,r5,2008a9a0 <__subdf3+0x430>
2008a748:	1c21c83a 	sub	r16,r3,r16
2008a74c:	8c08983a 	sll	r4,r17,r16
2008a750:	8946d83a 	srl	r3,r17,r5
2008a754:	9c20983a 	sll	r16,r19,r16
2008a758:	2008c03a 	cmpne	r4,r4,zero
2008a75c:	994ad83a 	srl	r5,r19,r5
2008a760:	1c06b03a 	or	r3,r3,r16
2008a764:	1922b03a 	or	r17,r3,r4
2008a768:	0021883a 	mov	r16,zero
2008a76c:	003fa306 	br	2008a5fc <__flash_rwdata_start+0xfffeba28>
2008a770:	2880202c 	andhi	r2,r5,128
2008a774:	9200004c 	andi	r8,r18,1
2008a778:	103fac1e 	bne	r2,zero,2008a62c <__flash_rwdata_start+0xfffeba58>
2008a77c:	2804977a 	slli	r2,r5,29
2008a780:	8822d0fa 	srli	r17,r17,3
2008a784:	00c1ffc4 	movi	r3,2047
2008a788:	280ad0fa 	srli	r5,r5,3
2008a78c:	1444b03a 	or	r2,r2,r17
2008a790:	80c02726 	beq	r16,r3,2008a830 <__subdf3+0x2c0>
2008a794:	01000434 	movhi	r4,16
2008a798:	213fffc4 	addi	r4,r4,-1
2008a79c:	80e0703a 	and	r16,r16,r3
2008a7a0:	2908703a 	and	r4,r5,r4
2008a7a4:	003fad06 	br	2008a65c <__flash_rwdata_start+0xfffeba88>
2008a7a8:	0080690e 	bge	zero,r2,2008a950 <__subdf3+0x3e0>
2008a7ac:	50002f26 	beq	r10,zero,2008a86c <__subdf3+0x2fc>
2008a7b0:	0101ffc4 	movi	r4,2047
2008a7b4:	813f9126 	beq	r16,r4,2008a5fc <__flash_rwdata_start+0xfffeba28>
2008a7b8:	18c02034 	orhi	r3,r3,128
2008a7bc:	01000e04 	movi	r4,56
2008a7c0:	2080b00e 	bge	r4,r2,2008aa84 <__subdf3+0x514>
2008a7c4:	198cb03a 	or	r6,r3,r6
2008a7c8:	300ec03a 	cmpne	r7,r6,zero
2008a7cc:	0005883a 	mov	r2,zero
2008a7d0:	3c4f883a 	add	r7,r7,r17
2008a7d4:	3c63803a 	cmpltu	r17,r7,r17
2008a7d8:	114b883a 	add	r5,r2,r5
2008a7dc:	2c4b883a 	add	r5,r5,r17
2008a7e0:	3823883a 	mov	r17,r7
2008a7e4:	2880202c 	andhi	r2,r5,128
2008a7e8:	10002e26 	beq	r2,zero,2008a8a4 <__subdf3+0x334>
2008a7ec:	84000044 	addi	r16,r16,1
2008a7f0:	0081ffc4 	movi	r2,2047
2008a7f4:	8080de26 	beq	r16,r2,2008ab70 <__subdf3+0x600>
2008a7f8:	00bfe034 	movhi	r2,65408
2008a7fc:	10bfffc4 	addi	r2,r2,-1
2008a800:	288a703a 	and	r5,r5,r2
2008a804:	880cd07a 	srli	r6,r17,1
2008a808:	280897fa 	slli	r4,r5,31
2008a80c:	88c0004c 	andi	r3,r17,1
2008a810:	30e2b03a 	or	r17,r6,r3
2008a814:	280ad07a 	srli	r5,r5,1
2008a818:	8922b03a 	or	r17,r17,r4
2008a81c:	003f7706 	br	2008a5fc <__flash_rwdata_start+0xfffeba28>
2008a820:	1984b03a 	or	r2,r3,r6
2008a824:	103f6e26 	beq	r2,zero,2008a5e0 <__flash_rwdata_start+0xfffeba0c>
2008a828:	39c03fcc 	andi	r7,r7,255
2008a82c:	003f6d06 	br	2008a5e4 <__flash_rwdata_start+0xfffeba10>
2008a830:	1146b03a 	or	r3,r2,r5
2008a834:	18003f26 	beq	r3,zero,2008a934 <__subdf3+0x3c4>
2008a838:	00c00434 	movhi	r3,16
2008a83c:	29000234 	orhi	r4,r5,8
2008a840:	18ffffc4 	addi	r3,r3,-1
2008a844:	20c8703a 	and	r4,r4,r3
2008a848:	003f8406 	br	2008a65c <__flash_rwdata_start+0xfffeba88>
2008a84c:	10bfffc4 	addi	r2,r2,-1
2008a850:	1000501e 	bne	r2,zero,2008a994 <__subdf3+0x424>
2008a854:	898fc83a 	sub	r7,r17,r6
2008a858:	89e3803a 	cmpltu	r17,r17,r7
2008a85c:	28cbc83a 	sub	r5,r5,r3
2008a860:	2c4bc83a 	sub	r5,r5,r17
2008a864:	3823883a 	mov	r17,r7
2008a868:	003fa106 	br	2008a6f0 <__flash_rwdata_start+0xfffebb1c>
2008a86c:	1988b03a 	or	r4,r3,r6
2008a870:	203f6226 	beq	r4,zero,2008a5fc <__flash_rwdata_start+0xfffeba28>
2008a874:	10bfffc4 	addi	r2,r2,-1
2008a878:	10009b1e 	bne	r2,zero,2008aae8 <__subdf3+0x578>
2008a87c:	344d883a 	add	r6,r6,r17
2008a880:	3463803a 	cmpltu	r17,r6,r17
2008a884:	194b883a 	add	r5,r3,r5
2008a888:	2c4b883a 	add	r5,r5,r17
2008a88c:	3023883a 	mov	r17,r6
2008a890:	003fd406 	br	2008a7e4 <__flash_rwdata_start+0xfffebc10>
2008a894:	1106b03a 	or	r3,r2,r4
2008a898:	1800b426 	beq	r3,zero,2008ab6c <__subdf3+0x5fc>
2008a89c:	100b883a 	mov	r5,r2
2008a8a0:	2023883a 	mov	r17,r4
2008a8a4:	888001cc 	andi	r2,r17,7
2008a8a8:	103f561e 	bne	r2,zero,2008a604 <__flash_rwdata_start+0xfffeba30>
2008a8ac:	9200004c 	andi	r8,r18,1
2008a8b0:	003fb206 	br	2008a77c <__flash_rwdata_start+0xfffebba8>
2008a8b4:	1000531e 	bne	r2,zero,2008aa04 <__subdf3+0x494>
2008a8b8:	80800044 	addi	r2,r16,1
2008a8bc:	1081ffcc 	andi	r2,r2,2047
2008a8c0:	01000044 	movi	r4,1
2008a8c4:	2080a00e 	bge	r4,r2,2008ab48 <__subdf3+0x5d8>
2008a8c8:	8985c83a 	sub	r2,r17,r6
2008a8cc:	8889803a 	cmpltu	r4,r17,r2
2008a8d0:	28e7c83a 	sub	r19,r5,r3
2008a8d4:	9927c83a 	sub	r19,r19,r4
2008a8d8:	9900202c 	andhi	r4,r19,128
2008a8dc:	20006226 	beq	r4,zero,2008aa68 <__subdf3+0x4f8>
2008a8e0:	3463c83a 	sub	r17,r6,r17
2008a8e4:	194bc83a 	sub	r5,r3,r5
2008a8e8:	344d803a 	cmpltu	r6,r6,r17
2008a8ec:	29a7c83a 	sub	r19,r5,r6
2008a8f0:	3825883a 	mov	r18,r7
2008a8f4:	983f841e 	bne	r19,zero,2008a708 <__flash_rwdata_start+0xfffebb34>
2008a8f8:	8809883a 	mov	r4,r17
2008a8fc:	008b2e40 	call	2008b2e4 <__clzsi2>
2008a900:	10800804 	addi	r2,r2,32
2008a904:	10fffe04 	addi	r3,r2,-8
2008a908:	010007c4 	movi	r4,31
2008a90c:	20ff830e 	bge	r4,r3,2008a71c <__flash_rwdata_start+0xfffebb48>
2008a910:	14fff604 	addi	r19,r2,-40
2008a914:	8ce6983a 	sll	r19,r17,r19
2008a918:	0023883a 	mov	r17,zero
2008a91c:	1c3f860e 	bge	r3,r16,2008a738 <__flash_rwdata_start+0xfffebb64>
2008a920:	017fe034 	movhi	r5,65408
2008a924:	297fffc4 	addi	r5,r5,-1
2008a928:	80e1c83a 	sub	r16,r16,r3
2008a92c:	994a703a 	and	r5,r19,r5
2008a930:	003f3206 	br	2008a5fc <__flash_rwdata_start+0xfffeba28>
2008a934:	0009883a 	mov	r4,zero
2008a938:	0005883a 	mov	r2,zero
2008a93c:	003f4706 	br	2008a65c <__flash_rwdata_start+0xfffeba88>
2008a940:	198cb03a 	or	r6,r3,r6
2008a944:	300cc03a 	cmpne	r6,r6,zero
2008a948:	0005883a 	mov	r2,zero
2008a94c:	003f6306 	br	2008a6dc <__flash_rwdata_start+0xfffebb08>
2008a950:	10009d1e 	bne	r2,zero,2008abc8 <__subdf3+0x658>
2008a954:	81c00044 	addi	r7,r16,1
2008a958:	3881ffcc 	andi	r2,r7,2047
2008a95c:	02400044 	movi	r9,1
2008a960:	4880680e 	bge	r9,r2,2008ab04 <__subdf3+0x594>
2008a964:	0081ffc4 	movi	r2,2047
2008a968:	3880ae26 	beq	r7,r2,2008ac24 <__subdf3+0x6b4>
2008a96c:	344d883a 	add	r6,r6,r17
2008a970:	3463803a 	cmpltu	r17,r6,r17
2008a974:	194b883a 	add	r5,r3,r5
2008a978:	2c4b883a 	add	r5,r5,r17
2008a97c:	282297fa 	slli	r17,r5,31
2008a980:	300cd07a 	srli	r6,r6,1
2008a984:	280ad07a 	srli	r5,r5,1
2008a988:	3821883a 	mov	r16,r7
2008a98c:	89a2b03a 	or	r17,r17,r6
2008a990:	003f1a06 	br	2008a5fc <__flash_rwdata_start+0xfffeba28>
2008a994:	0101ffc4 	movi	r4,2047
2008a998:	813f431e 	bne	r16,r4,2008a6a8 <__flash_rwdata_start+0xfffebad4>
2008a99c:	003f1706 	br	2008a5fc <__flash_rwdata_start+0xfffeba28>
2008a9a0:	80bff844 	addi	r2,r16,-31
2008a9a4:	00c00804 	movi	r3,32
2008a9a8:	9884d83a 	srl	r2,r19,r2
2008a9ac:	28c05126 	beq	r5,r3,2008aaf4 <__subdf3+0x584>
2008a9b0:	00c00fc4 	movi	r3,63
2008a9b4:	1c21c83a 	sub	r16,r3,r16
2008a9b8:	9c26983a 	sll	r19,r19,r16
2008a9bc:	9c62b03a 	or	r17,r19,r17
2008a9c0:	8822c03a 	cmpne	r17,r17,zero
2008a9c4:	88a2b03a 	or	r17,r17,r2
2008a9c8:	000b883a 	mov	r5,zero
2008a9cc:	0021883a 	mov	r16,zero
2008a9d0:	003fb406 	br	2008a8a4 <__flash_rwdata_start+0xfffebcd0>
2008a9d4:	113ff804 	addi	r4,r2,-32
2008a9d8:	01c00804 	movi	r7,32
2008a9dc:	1908d83a 	srl	r4,r3,r4
2008a9e0:	11c04626 	beq	r2,r7,2008aafc <__subdf3+0x58c>
2008a9e4:	01c01004 	movi	r7,64
2008a9e8:	3885c83a 	sub	r2,r7,r2
2008a9ec:	1884983a 	sll	r2,r3,r2
2008a9f0:	118cb03a 	or	r6,r2,r6
2008a9f4:	300cc03a 	cmpne	r6,r6,zero
2008a9f8:	310cb03a 	or	r6,r6,r4
2008a9fc:	0005883a 	mov	r2,zero
2008aa00:	003f3606 	br	2008a6dc <__flash_rwdata_start+0xfffebb08>
2008aa04:	80002b26 	beq	r16,zero,2008aab4 <__subdf3+0x544>
2008aa08:	0101ffc4 	movi	r4,2047
2008aa0c:	51006926 	beq	r10,r4,2008abb4 <__subdf3+0x644>
2008aa10:	0085c83a 	sub	r2,zero,r2
2008aa14:	29402034 	orhi	r5,r5,128
2008aa18:	01000e04 	movi	r4,56
2008aa1c:	20807d16 	blt	r4,r2,2008ac14 <__subdf3+0x6a4>
2008aa20:	010007c4 	movi	r4,31
2008aa24:	2080d916 	blt	r4,r2,2008ad8c <__subdf3+0x81c>
2008aa28:	01000804 	movi	r4,32
2008aa2c:	2089c83a 	sub	r4,r4,r2
2008aa30:	2912983a 	sll	r9,r5,r4
2008aa34:	8890d83a 	srl	r8,r17,r2
2008aa38:	8908983a 	sll	r4,r17,r4
2008aa3c:	2884d83a 	srl	r2,r5,r2
2008aa40:	4a22b03a 	or	r17,r9,r8
2008aa44:	2008c03a 	cmpne	r4,r4,zero
2008aa48:	8922b03a 	or	r17,r17,r4
2008aa4c:	3463c83a 	sub	r17,r6,r17
2008aa50:	1885c83a 	sub	r2,r3,r2
2008aa54:	344d803a 	cmpltu	r6,r6,r17
2008aa58:	118bc83a 	sub	r5,r2,r6
2008aa5c:	5021883a 	mov	r16,r10
2008aa60:	3825883a 	mov	r18,r7
2008aa64:	003f2206 	br	2008a6f0 <__flash_rwdata_start+0xfffebb1c>
2008aa68:	9886b03a 	or	r3,r19,r2
2008aa6c:	18001c1e 	bne	r3,zero,2008aae0 <__subdf3+0x570>
2008aa70:	0011883a 	mov	r8,zero
2008aa74:	000b883a 	mov	r5,zero
2008aa78:	0023883a 	mov	r17,zero
2008aa7c:	0021883a 	mov	r16,zero
2008aa80:	003f3e06 	br	2008a77c <__flash_rwdata_start+0xfffebba8>
2008aa84:	010007c4 	movi	r4,31
2008aa88:	20803c16 	blt	r4,r2,2008ab7c <__subdf3+0x60c>
2008aa8c:	01000804 	movi	r4,32
2008aa90:	2089c83a 	sub	r4,r4,r2
2008aa94:	1912983a 	sll	r9,r3,r4
2008aa98:	308ed83a 	srl	r7,r6,r2
2008aa9c:	3108983a 	sll	r4,r6,r4
2008aaa0:	1884d83a 	srl	r2,r3,r2
2008aaa4:	49ceb03a 	or	r7,r9,r7
2008aaa8:	2008c03a 	cmpne	r4,r4,zero
2008aaac:	390eb03a 	or	r7,r7,r4
2008aab0:	003f4706 	br	2008a7d0 <__flash_rwdata_start+0xfffebbfc>
2008aab4:	2c48b03a 	or	r4,r5,r17
2008aab8:	20003e26 	beq	r4,zero,2008abb4 <__subdf3+0x644>
2008aabc:	0084303a 	nor	r2,zero,r2
2008aac0:	10003a1e 	bne	r2,zero,2008abac <__subdf3+0x63c>
2008aac4:	3463c83a 	sub	r17,r6,r17
2008aac8:	194bc83a 	sub	r5,r3,r5
2008aacc:	344d803a 	cmpltu	r6,r6,r17
2008aad0:	298bc83a 	sub	r5,r5,r6
2008aad4:	5021883a 	mov	r16,r10
2008aad8:	3825883a 	mov	r18,r7
2008aadc:	003f0406 	br	2008a6f0 <__flash_rwdata_start+0xfffebb1c>
2008aae0:	1023883a 	mov	r17,r2
2008aae4:	003f0706 	br	2008a704 <__flash_rwdata_start+0xfffebb30>
2008aae8:	0101ffc4 	movi	r4,2047
2008aaec:	813f331e 	bne	r16,r4,2008a7bc <__flash_rwdata_start+0xfffebbe8>
2008aaf0:	003ec206 	br	2008a5fc <__flash_rwdata_start+0xfffeba28>
2008aaf4:	0027883a 	mov	r19,zero
2008aaf8:	003fb006 	br	2008a9bc <__flash_rwdata_start+0xfffebde8>
2008aafc:	0005883a 	mov	r2,zero
2008ab00:	003fbb06 	br	2008a9f0 <__flash_rwdata_start+0xfffebe1c>
2008ab04:	2c44b03a 	or	r2,r5,r17
2008ab08:	80008b1e 	bne	r16,zero,2008ad38 <__subdf3+0x7c8>
2008ab0c:	1000b526 	beq	r2,zero,2008ade4 <__subdf3+0x874>
2008ab10:	1984b03a 	or	r2,r3,r6
2008ab14:	103eb926 	beq	r2,zero,2008a5fc <__flash_rwdata_start+0xfffeba28>
2008ab18:	3449883a 	add	r4,r6,r17
2008ab1c:	2463803a 	cmpltu	r17,r4,r17
2008ab20:	194b883a 	add	r5,r3,r5
2008ab24:	2c4b883a 	add	r5,r5,r17
2008ab28:	2880202c 	andhi	r2,r5,128
2008ab2c:	2023883a 	mov	r17,r4
2008ab30:	103f5c26 	beq	r2,zero,2008a8a4 <__flash_rwdata_start+0xfffebcd0>
2008ab34:	00bfe034 	movhi	r2,65408
2008ab38:	10bfffc4 	addi	r2,r2,-1
2008ab3c:	4821883a 	mov	r16,r9
2008ab40:	288a703a 	and	r5,r5,r2
2008ab44:	003ead06 	br	2008a5fc <__flash_rwdata_start+0xfffeba28>
2008ab48:	2c44b03a 	or	r2,r5,r17
2008ab4c:	8000291e 	bne	r16,zero,2008abf4 <__subdf3+0x684>
2008ab50:	10004f1e 	bne	r2,zero,2008ac90 <__subdf3+0x720>
2008ab54:	1984b03a 	or	r2,r3,r6
2008ab58:	10000426 	beq	r2,zero,2008ab6c <__subdf3+0x5fc>
2008ab5c:	180b883a 	mov	r5,r3
2008ab60:	3023883a 	mov	r17,r6
2008ab64:	3825883a 	mov	r18,r7
2008ab68:	003ea406 	br	2008a5fc <__flash_rwdata_start+0xfffeba28>
2008ab6c:	0011883a 	mov	r8,zero
2008ab70:	000b883a 	mov	r5,zero
2008ab74:	0023883a 	mov	r17,zero
2008ab78:	003f0006 	br	2008a77c <__flash_rwdata_start+0xfffebba8>
2008ab7c:	11fff804 	addi	r7,r2,-32
2008ab80:	19c8d83a 	srl	r4,r3,r7
2008ab84:	01c00804 	movi	r7,32
2008ab88:	11c07e26 	beq	r2,r7,2008ad84 <__subdf3+0x814>
2008ab8c:	01c01004 	movi	r7,64
2008ab90:	3885c83a 	sub	r2,r7,r2
2008ab94:	1884983a 	sll	r2,r3,r2
2008ab98:	118cb03a 	or	r6,r2,r6
2008ab9c:	300ec03a 	cmpne	r7,r6,zero
2008aba0:	390eb03a 	or	r7,r7,r4
2008aba4:	0005883a 	mov	r2,zero
2008aba8:	003f0906 	br	2008a7d0 <__flash_rwdata_start+0xfffebbfc>
2008abac:	0101ffc4 	movi	r4,2047
2008abb0:	513f991e 	bne	r10,r4,2008aa18 <__flash_rwdata_start+0xfffebe44>
2008abb4:	180b883a 	mov	r5,r3
2008abb8:	3023883a 	mov	r17,r6
2008abbc:	5021883a 	mov	r16,r10
2008abc0:	3825883a 	mov	r18,r7
2008abc4:	003e8d06 	br	2008a5fc <__flash_rwdata_start+0xfffeba28>
2008abc8:	80001a1e 	bne	r16,zero,2008ac34 <__subdf3+0x6c4>
2008abcc:	2c48b03a 	or	r4,r5,r17
2008abd0:	20005526 	beq	r4,zero,2008ad28 <__subdf3+0x7b8>
2008abd4:	0084303a 	nor	r2,zero,r2
2008abd8:	1000511e 	bne	r2,zero,2008ad20 <__subdf3+0x7b0>
2008abdc:	89a3883a 	add	r17,r17,r6
2008abe0:	194b883a 	add	r5,r3,r5
2008abe4:	898d803a 	cmpltu	r6,r17,r6
2008abe8:	298b883a 	add	r5,r5,r6
2008abec:	5021883a 	mov	r16,r10
2008abf0:	003efc06 	br	2008a7e4 <__flash_rwdata_start+0xfffebc10>
2008abf4:	1000341e 	bne	r2,zero,2008acc8 <__subdf3+0x758>
2008abf8:	1984b03a 	or	r2,r3,r6
2008abfc:	10006f26 	beq	r2,zero,2008adbc <__subdf3+0x84c>
2008ac00:	180b883a 	mov	r5,r3
2008ac04:	3023883a 	mov	r17,r6
2008ac08:	3825883a 	mov	r18,r7
2008ac0c:	0401ffc4 	movi	r16,2047
2008ac10:	003e7a06 	br	2008a5fc <__flash_rwdata_start+0xfffeba28>
2008ac14:	2c62b03a 	or	r17,r5,r17
2008ac18:	8822c03a 	cmpne	r17,r17,zero
2008ac1c:	0005883a 	mov	r2,zero
2008ac20:	003f8a06 	br	2008aa4c <__flash_rwdata_start+0xfffebe78>
2008ac24:	3821883a 	mov	r16,r7
2008ac28:	000b883a 	mov	r5,zero
2008ac2c:	0023883a 	mov	r17,zero
2008ac30:	003ed206 	br	2008a77c <__flash_rwdata_start+0xfffebba8>
2008ac34:	0101ffc4 	movi	r4,2047
2008ac38:	51003b26 	beq	r10,r4,2008ad28 <__subdf3+0x7b8>
2008ac3c:	0085c83a 	sub	r2,zero,r2
2008ac40:	29402034 	orhi	r5,r5,128
2008ac44:	01000e04 	movi	r4,56
2008ac48:	20806216 	blt	r4,r2,2008add4 <__subdf3+0x864>
2008ac4c:	010007c4 	movi	r4,31
2008ac50:	20806b16 	blt	r4,r2,2008ae00 <__subdf3+0x890>
2008ac54:	01000804 	movi	r4,32
2008ac58:	2089c83a 	sub	r4,r4,r2
2008ac5c:	2912983a 	sll	r9,r5,r4
2008ac60:	888ed83a 	srl	r7,r17,r2
2008ac64:	8908983a 	sll	r4,r17,r4
2008ac68:	2884d83a 	srl	r2,r5,r2
2008ac6c:	49e2b03a 	or	r17,r9,r7
2008ac70:	2008c03a 	cmpne	r4,r4,zero
2008ac74:	8922b03a 	or	r17,r17,r4
2008ac78:	89a3883a 	add	r17,r17,r6
2008ac7c:	10c5883a 	add	r2,r2,r3
2008ac80:	898d803a 	cmpltu	r6,r17,r6
2008ac84:	118b883a 	add	r5,r2,r6
2008ac88:	5021883a 	mov	r16,r10
2008ac8c:	003ed506 	br	2008a7e4 <__flash_rwdata_start+0xfffebc10>
2008ac90:	1984b03a 	or	r2,r3,r6
2008ac94:	103e5926 	beq	r2,zero,2008a5fc <__flash_rwdata_start+0xfffeba28>
2008ac98:	8989c83a 	sub	r4,r17,r6
2008ac9c:	8911803a 	cmpltu	r8,r17,r4
2008aca0:	28c5c83a 	sub	r2,r5,r3
2008aca4:	1205c83a 	sub	r2,r2,r8
2008aca8:	1200202c 	andhi	r8,r2,128
2008acac:	403ef926 	beq	r8,zero,2008a894 <__flash_rwdata_start+0xfffebcc0>
2008acb0:	3463c83a 	sub	r17,r6,r17
2008acb4:	194bc83a 	sub	r5,r3,r5
2008acb8:	344d803a 	cmpltu	r6,r6,r17
2008acbc:	298bc83a 	sub	r5,r5,r6
2008acc0:	3825883a 	mov	r18,r7
2008acc4:	003e4d06 	br	2008a5fc <__flash_rwdata_start+0xfffeba28>
2008acc8:	1984b03a 	or	r2,r3,r6
2008accc:	10002b26 	beq	r2,zero,2008ad7c <__subdf3+0x80c>
2008acd0:	2808d0fa 	srli	r4,r5,3
2008acd4:	8822d0fa 	srli	r17,r17,3
2008acd8:	280a977a 	slli	r5,r5,29
2008acdc:	2080022c 	andhi	r2,r4,8
2008ace0:	2c62b03a 	or	r17,r5,r17
2008ace4:	10000826 	beq	r2,zero,2008ad08 <__subdf3+0x798>
2008ace8:	1810d0fa 	srli	r8,r3,3
2008acec:	4080022c 	andhi	r2,r8,8
2008acf0:	1000051e 	bne	r2,zero,2008ad08 <__subdf3+0x798>
2008acf4:	300cd0fa 	srli	r6,r6,3
2008acf8:	1804977a 	slli	r2,r3,29
2008acfc:	4009883a 	mov	r4,r8
2008ad00:	3825883a 	mov	r18,r7
2008ad04:	11a2b03a 	or	r17,r2,r6
2008ad08:	880ad77a 	srli	r5,r17,29
2008ad0c:	200890fa 	slli	r4,r4,3
2008ad10:	882290fa 	slli	r17,r17,3
2008ad14:	0401ffc4 	movi	r16,2047
2008ad18:	290ab03a 	or	r5,r5,r4
2008ad1c:	003e3706 	br	2008a5fc <__flash_rwdata_start+0xfffeba28>
2008ad20:	0101ffc4 	movi	r4,2047
2008ad24:	513fc71e 	bne	r10,r4,2008ac44 <__flash_rwdata_start+0xfffec070>
2008ad28:	180b883a 	mov	r5,r3
2008ad2c:	3023883a 	mov	r17,r6
2008ad30:	5021883a 	mov	r16,r10
2008ad34:	003e3106 	br	2008a5fc <__flash_rwdata_start+0xfffeba28>
2008ad38:	10002d26 	beq	r2,zero,2008adf0 <__subdf3+0x880>
2008ad3c:	1984b03a 	or	r2,r3,r6
2008ad40:	10000e26 	beq	r2,zero,2008ad7c <__subdf3+0x80c>
2008ad44:	2808d0fa 	srli	r4,r5,3
2008ad48:	8822d0fa 	srli	r17,r17,3
2008ad4c:	280a977a 	slli	r5,r5,29
2008ad50:	2080022c 	andhi	r2,r4,8
2008ad54:	2c62b03a 	or	r17,r5,r17
2008ad58:	103feb26 	beq	r2,zero,2008ad08 <__flash_rwdata_start+0xfffec134>
2008ad5c:	180ed0fa 	srli	r7,r3,3
2008ad60:	3880022c 	andhi	r2,r7,8
2008ad64:	103fe81e 	bne	r2,zero,2008ad08 <__flash_rwdata_start+0xfffec134>
2008ad68:	300cd0fa 	srli	r6,r6,3
2008ad6c:	1804977a 	slli	r2,r3,29
2008ad70:	3809883a 	mov	r4,r7
2008ad74:	11a2b03a 	or	r17,r2,r6
2008ad78:	003fe306 	br	2008ad08 <__flash_rwdata_start+0xfffec134>
2008ad7c:	0401ffc4 	movi	r16,2047
2008ad80:	003e1e06 	br	2008a5fc <__flash_rwdata_start+0xfffeba28>
2008ad84:	0005883a 	mov	r2,zero
2008ad88:	003f8306 	br	2008ab98 <__flash_rwdata_start+0xfffebfc4>
2008ad8c:	113ff804 	addi	r4,r2,-32
2008ad90:	02000804 	movi	r8,32
2008ad94:	2908d83a 	srl	r4,r5,r4
2008ad98:	12002526 	beq	r2,r8,2008ae30 <__subdf3+0x8c0>
2008ad9c:	02001004 	movi	r8,64
2008ada0:	4085c83a 	sub	r2,r8,r2
2008ada4:	288a983a 	sll	r5,r5,r2
2008ada8:	2c62b03a 	or	r17,r5,r17
2008adac:	8822c03a 	cmpne	r17,r17,zero
2008adb0:	8922b03a 	or	r17,r17,r4
2008adb4:	0005883a 	mov	r2,zero
2008adb8:	003f2406 	br	2008aa4c <__flash_rwdata_start+0xfffebe78>
2008adbc:	01402034 	movhi	r5,128
2008adc0:	0011883a 	mov	r8,zero
2008adc4:	297fffc4 	addi	r5,r5,-1
2008adc8:	047ffe04 	movi	r17,-8
2008adcc:	0401ffc4 	movi	r16,2047
2008add0:	003e6a06 	br	2008a77c <__flash_rwdata_start+0xfffebba8>
2008add4:	2c62b03a 	or	r17,r5,r17
2008add8:	8822c03a 	cmpne	r17,r17,zero
2008addc:	0005883a 	mov	r2,zero
2008ade0:	003fa506 	br	2008ac78 <__flash_rwdata_start+0xfffec0a4>
2008ade4:	180b883a 	mov	r5,r3
2008ade8:	3023883a 	mov	r17,r6
2008adec:	003e0306 	br	2008a5fc <__flash_rwdata_start+0xfffeba28>
2008adf0:	180b883a 	mov	r5,r3
2008adf4:	3023883a 	mov	r17,r6
2008adf8:	0401ffc4 	movi	r16,2047
2008adfc:	003dff06 	br	2008a5fc <__flash_rwdata_start+0xfffeba28>
2008ae00:	113ff804 	addi	r4,r2,-32
2008ae04:	01c00804 	movi	r7,32
2008ae08:	2908d83a 	srl	r4,r5,r4
2008ae0c:	11c00a26 	beq	r2,r7,2008ae38 <__subdf3+0x8c8>
2008ae10:	01c01004 	movi	r7,64
2008ae14:	3885c83a 	sub	r2,r7,r2
2008ae18:	288a983a 	sll	r5,r5,r2
2008ae1c:	2c62b03a 	or	r17,r5,r17
2008ae20:	8822c03a 	cmpne	r17,r17,zero
2008ae24:	8922b03a 	or	r17,r17,r4
2008ae28:	0005883a 	mov	r2,zero
2008ae2c:	003f9206 	br	2008ac78 <__flash_rwdata_start+0xfffec0a4>
2008ae30:	000b883a 	mov	r5,zero
2008ae34:	003fdc06 	br	2008ada8 <__flash_rwdata_start+0xfffec1d4>
2008ae38:	000b883a 	mov	r5,zero
2008ae3c:	003ff706 	br	2008ae1c <__flash_rwdata_start+0xfffec248>

2008ae40 <__fixdfsi>:
2008ae40:	2806d53a 	srli	r3,r5,20
2008ae44:	00800434 	movhi	r2,16
2008ae48:	10bfffc4 	addi	r2,r2,-1
2008ae4c:	18c1ffcc 	andi	r3,r3,2047
2008ae50:	0180ff84 	movi	r6,1022
2008ae54:	2884703a 	and	r2,r5,r2
2008ae58:	280ad7fa 	srli	r5,r5,31
2008ae5c:	30c0130e 	bge	r6,r3,2008aeac <__fixdfsi+0x6c>
2008ae60:	01810744 	movi	r6,1053
2008ae64:	30c00d16 	blt	r6,r3,2008ae9c <__fixdfsi+0x5c>
2008ae68:	01810cc4 	movi	r6,1075
2008ae6c:	30cdc83a 	sub	r6,r6,r3
2008ae70:	01c007c4 	movi	r7,31
2008ae74:	10800434 	orhi	r2,r2,16
2008ae78:	39800e0e 	bge	r7,r6,2008aeb4 <__fixdfsi+0x74>
2008ae7c:	010104c4 	movi	r4,1043
2008ae80:	20c7c83a 	sub	r3,r4,r3
2008ae84:	10c6d83a 	srl	r3,r2,r3
2008ae88:	29403fcc 	andi	r5,r5,255
2008ae8c:	0145c83a 	sub	r2,zero,r5
2008ae90:	1884f03a 	xor	r2,r3,r2
2008ae94:	1145883a 	add	r2,r2,r5
2008ae98:	f800283a 	ret
2008ae9c:	00a00034 	movhi	r2,32768
2008aea0:	10bfffc4 	addi	r2,r2,-1
2008aea4:	2885883a 	add	r2,r5,r2
2008aea8:	f800283a 	ret
2008aeac:	0005883a 	mov	r2,zero
2008aeb0:	f800283a 	ret
2008aeb4:	18fefb44 	addi	r3,r3,-1043
2008aeb8:	2188d83a 	srl	r4,r4,r6
2008aebc:	10c6983a 	sll	r3,r2,r3
2008aec0:	20c6b03a 	or	r3,r4,r3
2008aec4:	003ff006 	br	2008ae88 <__flash_rwdata_start+0xfffec2b4>

2008aec8 <__floatsidf>:
2008aec8:	defffd04 	addi	sp,sp,-12
2008aecc:	dc400115 	stw	r17,4(sp)
2008aed0:	dfc00215 	stw	ra,8(sp)
2008aed4:	dc000015 	stw	r16,0(sp)
2008aed8:	2023883a 	mov	r17,r4
2008aedc:	20001426 	beq	r4,zero,2008af30 <__floatsidf+0x68>
2008aee0:	2020d7fa 	srli	r16,r4,31
2008aee4:	80000126 	beq	r16,zero,2008aeec <__floatsidf+0x24>
2008aee8:	0123c83a 	sub	r17,zero,r4
2008aeec:	8809883a 	mov	r4,r17
2008aef0:	008b2e40 	call	2008b2e4 <__clzsi2>
2008aef4:	01410784 	movi	r5,1054
2008aef8:	00c00284 	movi	r3,10
2008aefc:	288bc83a 	sub	r5,r5,r2
2008af00:	18801c16 	blt	r3,r2,2008af74 <__floatsidf+0xac>
2008af04:	00c002c4 	movi	r3,11
2008af08:	1887c83a 	sub	r3,r3,r2
2008af0c:	88c8d83a 	srl	r4,r17,r3
2008af10:	00c00434 	movhi	r3,16
2008af14:	18ffffc4 	addi	r3,r3,-1
2008af18:	10800544 	addi	r2,r2,21
2008af1c:	20c8703a 	and	r4,r4,r3
2008af20:	8884983a 	sll	r2,r17,r2
2008af24:	28c1ffcc 	andi	r3,r5,2047
2008af28:	800d883a 	mov	r6,r16
2008af2c:	00000406 	br	2008af40 <__floatsidf+0x78>
2008af30:	000d883a 	mov	r6,zero
2008af34:	0007883a 	mov	r3,zero
2008af38:	0009883a 	mov	r4,zero
2008af3c:	0005883a 	mov	r2,zero
2008af40:	180a953a 	slli	r5,r3,20
2008af44:	31803fcc 	andi	r6,r6,255
2008af48:	00c00434 	movhi	r3,16
2008af4c:	300c97fa 	slli	r6,r6,31
2008af50:	18ffffc4 	addi	r3,r3,-1
2008af54:	20c6703a 	and	r3,r4,r3
2008af58:	1946b03a 	or	r3,r3,r5
2008af5c:	1986b03a 	or	r3,r3,r6
2008af60:	dfc00217 	ldw	ra,8(sp)
2008af64:	dc400117 	ldw	r17,4(sp)
2008af68:	dc000017 	ldw	r16,0(sp)
2008af6c:	dec00304 	addi	sp,sp,12
2008af70:	f800283a 	ret
2008af74:	10fffd44 	addi	r3,r2,-11
2008af78:	88c8983a 	sll	r4,r17,r3
2008af7c:	00800434 	movhi	r2,16
2008af80:	10bfffc4 	addi	r2,r2,-1
2008af84:	2088703a 	and	r4,r4,r2
2008af88:	28c1ffcc 	andi	r3,r5,2047
2008af8c:	800d883a 	mov	r6,r16
2008af90:	0005883a 	mov	r2,zero
2008af94:	003fea06 	br	2008af40 <__flash_rwdata_start+0xfffec36c>

2008af98 <__floatunsidf>:
2008af98:	defffe04 	addi	sp,sp,-8
2008af9c:	dc000015 	stw	r16,0(sp)
2008afa0:	dfc00115 	stw	ra,4(sp)
2008afa4:	2021883a 	mov	r16,r4
2008afa8:	20001026 	beq	r4,zero,2008afec <__floatunsidf+0x54>
2008afac:	008b2e40 	call	2008b2e4 <__clzsi2>
2008afb0:	01410784 	movi	r5,1054
2008afb4:	100d883a 	mov	r6,r2
2008afb8:	288bc83a 	sub	r5,r5,r2
2008afbc:	00800284 	movi	r2,10
2008afc0:	11801616 	blt	r2,r6,2008b01c <__floatunsidf+0x84>
2008afc4:	008002c4 	movi	r2,11
2008afc8:	1185c83a 	sub	r2,r2,r6
2008afcc:	8084d83a 	srl	r2,r16,r2
2008afd0:	00c00434 	movhi	r3,16
2008afd4:	31c00544 	addi	r7,r6,21
2008afd8:	18ffffc4 	addi	r3,r3,-1
2008afdc:	81e0983a 	sll	r16,r16,r7
2008afe0:	10cc703a 	and	r6,r2,r3
2008afe4:	2941ffcc 	andi	r5,r5,2047
2008afe8:	00000206 	br	2008aff4 <__floatunsidf+0x5c>
2008afec:	000b883a 	mov	r5,zero
2008aff0:	000d883a 	mov	r6,zero
2008aff4:	280a953a 	slli	r5,r5,20
2008aff8:	00c00434 	movhi	r3,16
2008affc:	18ffffc4 	addi	r3,r3,-1
2008b000:	30c6703a 	and	r3,r6,r3
2008b004:	8005883a 	mov	r2,r16
2008b008:	1946b03a 	or	r3,r3,r5
2008b00c:	dfc00117 	ldw	ra,4(sp)
2008b010:	dc000017 	ldw	r16,0(sp)
2008b014:	dec00204 	addi	sp,sp,8
2008b018:	f800283a 	ret
2008b01c:	31bffd44 	addi	r6,r6,-11
2008b020:	818c983a 	sll	r6,r16,r6
2008b024:	00800434 	movhi	r2,16
2008b028:	10bfffc4 	addi	r2,r2,-1
2008b02c:	2941ffcc 	andi	r5,r5,2047
2008b030:	0021883a 	mov	r16,zero
2008b034:	308c703a 	and	r6,r6,r2
2008b038:	003fee06 	br	2008aff4 <__flash_rwdata_start+0xfffec420>

2008b03c <__extendsfdf2>:
2008b03c:	200ad5fa 	srli	r5,r4,23
2008b040:	defffd04 	addi	sp,sp,-12
2008b044:	dc400115 	stw	r17,4(sp)
2008b048:	29403fcc 	andi	r5,r5,255
2008b04c:	29800044 	addi	r6,r5,1
2008b050:	04402034 	movhi	r17,128
2008b054:	dc000015 	stw	r16,0(sp)
2008b058:	8c7fffc4 	addi	r17,r17,-1
2008b05c:	dfc00215 	stw	ra,8(sp)
2008b060:	31803fcc 	andi	r6,r6,255
2008b064:	00800044 	movi	r2,1
2008b068:	8922703a 	and	r17,r17,r4
2008b06c:	2020d7fa 	srli	r16,r4,31
2008b070:	1180110e 	bge	r2,r6,2008b0b8 <__extendsfdf2+0x7c>
2008b074:	880ed0fa 	srli	r7,r17,3
2008b078:	8822977a 	slli	r17,r17,29
2008b07c:	2940e004 	addi	r5,r5,896
2008b080:	2941ffcc 	andi	r5,r5,2047
2008b084:	280c953a 	slli	r6,r5,20
2008b088:	01400434 	movhi	r5,16
2008b08c:	800697fa 	slli	r3,r16,31
2008b090:	297fffc4 	addi	r5,r5,-1
2008b094:	394a703a 	and	r5,r7,r5
2008b098:	298ab03a 	or	r5,r5,r6
2008b09c:	8805883a 	mov	r2,r17
2008b0a0:	28c6b03a 	or	r3,r5,r3
2008b0a4:	dfc00217 	ldw	ra,8(sp)
2008b0a8:	dc400117 	ldw	r17,4(sp)
2008b0ac:	dc000017 	ldw	r16,0(sp)
2008b0b0:	dec00304 	addi	sp,sp,12
2008b0b4:	f800283a 	ret
2008b0b8:	2800111e 	bne	r5,zero,2008b100 <__extendsfdf2+0xc4>
2008b0bc:	88001c26 	beq	r17,zero,2008b130 <__extendsfdf2+0xf4>
2008b0c0:	8809883a 	mov	r4,r17
2008b0c4:	008b2e40 	call	2008b2e4 <__clzsi2>
2008b0c8:	00c00284 	movi	r3,10
2008b0cc:	18801b16 	blt	r3,r2,2008b13c <__extendsfdf2+0x100>
2008b0d0:	01c002c4 	movi	r7,11
2008b0d4:	388fc83a 	sub	r7,r7,r2
2008b0d8:	10c00544 	addi	r3,r2,21
2008b0dc:	89ced83a 	srl	r7,r17,r7
2008b0e0:	88e2983a 	sll	r17,r17,r3
2008b0e4:	0180e244 	movi	r6,905
2008b0e8:	308bc83a 	sub	r5,r6,r2
2008b0ec:	01800434 	movhi	r6,16
2008b0f0:	31bfffc4 	addi	r6,r6,-1
2008b0f4:	398e703a 	and	r7,r7,r6
2008b0f8:	2941ffcc 	andi	r5,r5,2047
2008b0fc:	003fe006 	br	2008b080 <__flash_rwdata_start+0xfffec4ac>
2008b100:	88000826 	beq	r17,zero,2008b124 <__extendsfdf2+0xe8>
2008b104:	880ed0fa 	srli	r7,r17,3
2008b108:	00800434 	movhi	r2,16
2008b10c:	10bfffc4 	addi	r2,r2,-1
2008b110:	39c00234 	orhi	r7,r7,8
2008b114:	8822977a 	slli	r17,r17,29
2008b118:	388e703a 	and	r7,r7,r2
2008b11c:	0141ffc4 	movi	r5,2047
2008b120:	003fd706 	br	2008b080 <__flash_rwdata_start+0xfffec4ac>
2008b124:	0141ffc4 	movi	r5,2047
2008b128:	000f883a 	mov	r7,zero
2008b12c:	003fd406 	br	2008b080 <__flash_rwdata_start+0xfffec4ac>
2008b130:	000b883a 	mov	r5,zero
2008b134:	000f883a 	mov	r7,zero
2008b138:	003fd106 	br	2008b080 <__flash_rwdata_start+0xfffec4ac>
2008b13c:	11fffd44 	addi	r7,r2,-11
2008b140:	89ce983a 	sll	r7,r17,r7
2008b144:	0023883a 	mov	r17,zero
2008b148:	003fe606 	br	2008b0e4 <__flash_rwdata_start+0xfffec510>

2008b14c <__truncdfsf2>:
2008b14c:	2810d53a 	srli	r8,r5,20
2008b150:	01c00434 	movhi	r7,16
2008b154:	39ffffc4 	addi	r7,r7,-1
2008b158:	29ce703a 	and	r7,r5,r7
2008b15c:	380e90fa 	slli	r7,r7,3
2008b160:	4201ffcc 	andi	r8,r8,2047
2008b164:	200cd77a 	srli	r6,r4,29
2008b168:	42400044 	addi	r9,r8,1
2008b16c:	4a41ffcc 	andi	r9,r9,2047
2008b170:	00800044 	movi	r2,1
2008b174:	398cb03a 	or	r6,r7,r6
2008b178:	280ad7fa 	srli	r5,r5,31
2008b17c:	200e90fa 	slli	r7,r4,3
2008b180:	1240230e 	bge	r2,r9,2008b210 <__truncdfsf2+0xc4>
2008b184:	40ff2004 	addi	r3,r8,-896
2008b188:	00803f84 	movi	r2,254
2008b18c:	10c01516 	blt	r2,r3,2008b1e4 <__truncdfsf2+0x98>
2008b190:	00c02d0e 	bge	zero,r3,2008b248 <__truncdfsf2+0xfc>
2008b194:	200891ba 	slli	r4,r4,6
2008b198:	300c90fa 	slli	r6,r6,3
2008b19c:	380ed77a 	srli	r7,r7,29
2008b1a0:	2008c03a 	cmpne	r4,r4,zero
2008b1a4:	310cb03a 	or	r6,r6,r4
2008b1a8:	31ccb03a 	or	r6,r6,r7
2008b1ac:	308001cc 	andi	r2,r6,7
2008b1b0:	10000426 	beq	r2,zero,2008b1c4 <__truncdfsf2+0x78>
2008b1b4:	310003cc 	andi	r4,r6,15
2008b1b8:	00800104 	movi	r2,4
2008b1bc:	20800126 	beq	r4,r2,2008b1c4 <__truncdfsf2+0x78>
2008b1c0:	31800104 	addi	r6,r6,4
2008b1c4:	3081002c 	andhi	r2,r6,1024
2008b1c8:	10002326 	beq	r2,zero,2008b258 <__truncdfsf2+0x10c>
2008b1cc:	18c00044 	addi	r3,r3,1
2008b1d0:	00803fc4 	movi	r2,255
2008b1d4:	18800326 	beq	r3,r2,2008b1e4 <__truncdfsf2+0x98>
2008b1d8:	300c91ba 	slli	r6,r6,6
2008b1dc:	300cd27a 	srli	r6,r6,9
2008b1e0:	00000206 	br	2008b1ec <__truncdfsf2+0xa0>
2008b1e4:	00ffffc4 	movi	r3,-1
2008b1e8:	000d883a 	mov	r6,zero
2008b1ec:	18c03fcc 	andi	r3,r3,255
2008b1f0:	180895fa 	slli	r4,r3,23
2008b1f4:	00c02034 	movhi	r3,128
2008b1f8:	280a97fa 	slli	r5,r5,31
2008b1fc:	18ffffc4 	addi	r3,r3,-1
2008b200:	30c6703a 	and	r3,r6,r3
2008b204:	1906b03a 	or	r3,r3,r4
2008b208:	1944b03a 	or	r2,r3,r5
2008b20c:	f800283a 	ret
2008b210:	4000071e 	bne	r8,zero,2008b230 <__truncdfsf2+0xe4>
2008b214:	31ccb03a 	or	r6,r6,r7
2008b218:	30000d1e 	bne	r6,zero,2008b250 <__truncdfsf2+0x104>
2008b21c:	0007883a 	mov	r3,zero
2008b220:	00802034 	movhi	r2,128
2008b224:	10bfffc4 	addi	r2,r2,-1
2008b228:	308c703a 	and	r6,r6,r2
2008b22c:	003fef06 	br	2008b1ec <__flash_rwdata_start+0xfffec618>
2008b230:	31c8b03a 	or	r4,r6,r7
2008b234:	203feb26 	beq	r4,zero,2008b1e4 <__flash_rwdata_start+0xfffec610>
2008b238:	300c90fa 	slli	r6,r6,3
2008b23c:	00c03fc4 	movi	r3,255
2008b240:	31808034 	orhi	r6,r6,512
2008b244:	003fd906 	br	2008b1ac <__flash_rwdata_start+0xfffec5d8>
2008b248:	00bffa44 	movi	r2,-23
2008b24c:	1880090e 	bge	r3,r2,2008b274 <__truncdfsf2+0x128>
2008b250:	01800144 	movi	r6,5
2008b254:	0007883a 	mov	r3,zero
2008b258:	00803fc4 	movi	r2,255
2008b25c:	300cd0fa 	srli	r6,r6,3
2008b260:	18bfef1e 	bne	r3,r2,2008b220 <__flash_rwdata_start+0xfffec64c>
2008b264:	303fdf26 	beq	r6,zero,2008b1e4 <__flash_rwdata_start+0xfffec610>
2008b268:	31801034 	orhi	r6,r6,64
2008b26c:	00ffffc4 	movi	r3,-1
2008b270:	003feb06 	br	2008b220 <__flash_rwdata_start+0xfffec64c>
2008b274:	0080e784 	movi	r2,926
2008b278:	1205c83a 	sub	r2,r2,r8
2008b27c:	00c007c4 	movi	r3,31
2008b280:	31802034 	orhi	r6,r6,128
2008b284:	18800916 	blt	r3,r2,2008b2ac <__truncdfsf2+0x160>
2008b288:	423f2084 	addi	r8,r8,-894
2008b28c:	3a06983a 	sll	r3,r7,r8
2008b290:	3210983a 	sll	r8,r6,r8
2008b294:	388ed83a 	srl	r7,r7,r2
2008b298:	180cc03a 	cmpne	r6,r3,zero
2008b29c:	418cb03a 	or	r6,r8,r6
2008b2a0:	31ccb03a 	or	r6,r6,r7
2008b2a4:	0007883a 	mov	r3,zero
2008b2a8:	003fc006 	br	2008b1ac <__flash_rwdata_start+0xfffec5d8>
2008b2ac:	00c0df84 	movi	r3,894
2008b2b0:	1a07c83a 	sub	r3,r3,r8
2008b2b4:	01000804 	movi	r4,32
2008b2b8:	30c6d83a 	srl	r3,r6,r3
2008b2bc:	11000726 	beq	r2,r4,2008b2dc <__truncdfsf2+0x190>
2008b2c0:	423f2884 	addi	r8,r8,-862
2008b2c4:	3210983a 	sll	r8,r6,r8
2008b2c8:	41ceb03a 	or	r7,r8,r7
2008b2cc:	380ec03a 	cmpne	r7,r7,zero
2008b2d0:	38ccb03a 	or	r6,r7,r3
2008b2d4:	0007883a 	mov	r3,zero
2008b2d8:	003fb406 	br	2008b1ac <__flash_rwdata_start+0xfffec5d8>
2008b2dc:	0011883a 	mov	r8,zero
2008b2e0:	003ff906 	br	2008b2c8 <__flash_rwdata_start+0xfffec6f4>

2008b2e4 <__clzsi2>:
2008b2e4:	00bfffd4 	movui	r2,65535
2008b2e8:	11000b36 	bltu	r2,r4,2008b318 <__clzsi2+0x34>
2008b2ec:	00803fc4 	movi	r2,255
2008b2f0:	1100122e 	bgeu	r2,r4,2008b33c <__clzsi2+0x58>
2008b2f4:	00c00204 	movi	r3,8
2008b2f8:	01400604 	movi	r5,24
2008b2fc:	20c8d83a 	srl	r4,r4,r3
2008b300:	00800034 	movhi	r2,0
2008b304:	10814904 	addi	r2,r2,1316
2008b308:	1109883a 	add	r4,r2,r4
2008b30c:	20800003 	ldbu	r2,0(r4)
2008b310:	2885c83a 	sub	r2,r5,r2
2008b314:	f800283a 	ret
2008b318:	00804034 	movhi	r2,256
2008b31c:	10bfffc4 	addi	r2,r2,-1
2008b320:	11000336 	bltu	r2,r4,2008b330 <__clzsi2+0x4c>
2008b324:	00c00404 	movi	r3,16
2008b328:	180b883a 	mov	r5,r3
2008b32c:	003ff306 	br	2008b2fc <__flash_rwdata_start+0xfffec728>
2008b330:	00c00604 	movi	r3,24
2008b334:	01400204 	movi	r5,8
2008b338:	003ff006 	br	2008b2fc <__flash_rwdata_start+0xfffec728>
2008b33c:	0007883a 	mov	r3,zero
2008b340:	01400804 	movi	r5,32
2008b344:	003fed06 	br	2008b2fc <__flash_rwdata_start+0xfffec728>

2008b348 <exit>:
2008b348:	defffe04 	addi	sp,sp,-8
2008b34c:	000b883a 	mov	r5,zero
2008b350:	dc000015 	stw	r16,0(sp)
2008b354:	dfc00115 	stw	ra,4(sp)
2008b358:	2021883a 	mov	r16,r4
2008b35c:	009063c0 	call	2009063c <__call_exitprocs>
2008b360:	00800034 	movhi	r2,0
2008b364:	108a9104 	addi	r2,r2,10820
2008b368:	11000017 	ldw	r4,0(r2)
2008b36c:	20800f17 	ldw	r2,60(r4)
2008b370:	10000126 	beq	r2,zero,2008b378 <exit+0x30>
2008b374:	103ee83a 	callr	r2
2008b378:	8009883a 	mov	r4,r16
2008b37c:	00996680 	call	20099668 <_exit>

2008b380 <memalign>:
2008b380:	00c00034 	movhi	r3,0
2008b384:	18ca9204 	addi	r3,r3,10824
2008b388:	2005883a 	mov	r2,r4
2008b38c:	19000017 	ldw	r4,0(r3)
2008b390:	280d883a 	mov	r6,r5
2008b394:	100b883a 	mov	r5,r2
2008b398:	008b39c1 	jmpi	2008b39c <_memalign_r>

2008b39c <_memalign_r>:
2008b39c:	defffa04 	addi	sp,sp,-24
2008b3a0:	dc400115 	stw	r17,4(sp)
2008b3a4:	dfc00515 	stw	ra,20(sp)
2008b3a8:	dd000415 	stw	r20,16(sp)
2008b3ac:	dcc00315 	stw	r19,12(sp)
2008b3b0:	dc800215 	stw	r18,8(sp)
2008b3b4:	dc000015 	stw	r16,0(sp)
2008b3b8:	00800204 	movi	r2,8
2008b3bc:	2823883a 	mov	r17,r5
2008b3c0:	11404b2e 	bgeu	r2,r5,2008b4f0 <_memalign_r+0x154>
2008b3c4:	008003c4 	movi	r2,15
2008b3c8:	2029883a 	mov	r20,r4
2008b3cc:	11400136 	bltu	r2,r5,2008b3d4 <_memalign_r+0x38>
2008b3d0:	04400404 	movi	r17,16
2008b3d4:	308002c4 	addi	r2,r6,11
2008b3d8:	00c00584 	movi	r3,22
2008b3dc:	18803e2e 	bgeu	r3,r2,2008b4d8 <_memalign_r+0x13c>
2008b3e0:	04bffe04 	movi	r18,-8
2008b3e4:	14a4703a 	and	r18,r2,r18
2008b3e8:	90003d16 	blt	r18,zero,2008b4e0 <_memalign_r+0x144>
2008b3ec:	91803c36 	bltu	r18,r6,2008b4e0 <_memalign_r+0x144>
2008b3f0:	89400404 	addi	r5,r17,16
2008b3f4:	a009883a 	mov	r4,r20
2008b3f8:	2c8b883a 	add	r5,r5,r18
2008b3fc:	008b5780 	call	2008b578 <_malloc_r>
2008b400:	1027883a 	mov	r19,r2
2008b404:	10005026 	beq	r2,zero,2008b548 <_memalign_r+0x1ac>
2008b408:	a009883a 	mov	r4,r20
2008b40c:	0099cc00 	call	20099cc0 <__malloc_lock>
2008b410:	9809883a 	mov	r4,r19
2008b414:	880b883a 	mov	r5,r17
2008b418:	9c3ffe04 	addi	r16,r19,-8
2008b41c:	0088a7c0 	call	20088a7c <__umodsi3>
2008b420:	10001c26 	beq	r2,zero,2008b494 <_memalign_r+0xf8>
2008b424:	88bfffc4 	addi	r2,r17,-1
2008b428:	9887883a 	add	r3,r19,r2
2008b42c:	0445c83a 	sub	r2,zero,r17
2008b430:	1884703a 	and	r2,r3,r2
2008b434:	10bffe04 	addi	r2,r2,-8
2008b438:	1409c83a 	sub	r4,r2,r16
2008b43c:	014003c4 	movi	r5,15
2008b440:	8007883a 	mov	r3,r16
2008b444:	2900330e 	bge	r5,r4,2008b514 <_memalign_r+0x178>
2008b448:	1021883a 	mov	r16,r2
2008b44c:	993fff17 	ldw	r4,-4(r19)
2008b450:	00bfff04 	movi	r2,-4
2008b454:	80c7c83a 	sub	r3,r16,r3
2008b458:	2084703a 	and	r2,r4,r2
2008b45c:	10c5c83a 	sub	r2,r2,r3
2008b460:	11000054 	ori	r4,r2,1
2008b464:	81000115 	stw	r4,4(r16)
2008b468:	8085883a 	add	r2,r16,r2
2008b46c:	11800117 	ldw	r6,4(r2)
2008b470:	a009883a 	mov	r4,r20
2008b474:	980b883a 	mov	r5,r19
2008b478:	31800054 	ori	r6,r6,1
2008b47c:	11800115 	stw	r6,4(r2)
2008b480:	98bfff17 	ldw	r2,-4(r19)
2008b484:	1080004c 	andi	r2,r2,1
2008b488:	1884b03a 	or	r2,r3,r2
2008b48c:	98bfff15 	stw	r2,-4(r19)
2008b490:	00928500 	call	20092850 <_free_r>
2008b494:	80c00117 	ldw	r3,4(r16)
2008b498:	00bfff04 	movi	r2,-4
2008b49c:	1884703a 	and	r2,r3,r2
2008b4a0:	1485c83a 	sub	r2,r2,r18
2008b4a4:	00c003c4 	movi	r3,15
2008b4a8:	18801c16 	blt	r3,r2,2008b51c <_memalign_r+0x180>
2008b4ac:	a009883a 	mov	r4,r20
2008b4b0:	0099ce00 	call	20099ce0 <__malloc_unlock>
2008b4b4:	80800204 	addi	r2,r16,8
2008b4b8:	dfc00517 	ldw	ra,20(sp)
2008b4bc:	dd000417 	ldw	r20,16(sp)
2008b4c0:	dcc00317 	ldw	r19,12(sp)
2008b4c4:	dc800217 	ldw	r18,8(sp)
2008b4c8:	dc400117 	ldw	r17,4(sp)
2008b4cc:	dc000017 	ldw	r16,0(sp)
2008b4d0:	dec00604 	addi	sp,sp,24
2008b4d4:	f800283a 	ret
2008b4d8:	04800404 	movi	r18,16
2008b4dc:	91bfc42e 	bgeu	r18,r6,2008b3f0 <__flash_rwdata_start+0xfffec81c>
2008b4e0:	00800304 	movi	r2,12
2008b4e4:	a0800015 	stw	r2,0(r20)
2008b4e8:	0005883a 	mov	r2,zero
2008b4ec:	003ff206 	br	2008b4b8 <__flash_rwdata_start+0xfffec8e4>
2008b4f0:	300b883a 	mov	r5,r6
2008b4f4:	dfc00517 	ldw	ra,20(sp)
2008b4f8:	dd000417 	ldw	r20,16(sp)
2008b4fc:	dcc00317 	ldw	r19,12(sp)
2008b500:	dc800217 	ldw	r18,8(sp)
2008b504:	dc400117 	ldw	r17,4(sp)
2008b508:	dc000017 	ldw	r16,0(sp)
2008b50c:	dec00604 	addi	sp,sp,24
2008b510:	008b5781 	jmpi	2008b578 <_malloc_r>
2008b514:	1461883a 	add	r16,r2,r17
2008b518:	003fcc06 	br	2008b44c <__flash_rwdata_start+0xfffec878>
2008b51c:	848b883a 	add	r5,r16,r18
2008b520:	10800054 	ori	r2,r2,1
2008b524:	28800115 	stw	r2,4(r5)
2008b528:	80800117 	ldw	r2,4(r16)
2008b52c:	a009883a 	mov	r4,r20
2008b530:	29400204 	addi	r5,r5,8
2008b534:	1080004c 	andi	r2,r2,1
2008b538:	90a4b03a 	or	r18,r18,r2
2008b53c:	84800115 	stw	r18,4(r16)
2008b540:	00928500 	call	20092850 <_free_r>
2008b544:	003fd906 	br	2008b4ac <__flash_rwdata_start+0xfffec8d8>
2008b548:	0005883a 	mov	r2,zero
2008b54c:	003fda06 	br	2008b4b8 <__flash_rwdata_start+0xfffec8e4>

2008b550 <malloc>:
2008b550:	00800034 	movhi	r2,0
2008b554:	108a9204 	addi	r2,r2,10824
2008b558:	200b883a 	mov	r5,r4
2008b55c:	11000017 	ldw	r4,0(r2)
2008b560:	008b5781 	jmpi	2008b578 <_malloc_r>

2008b564 <free>:
2008b564:	00800034 	movhi	r2,0
2008b568:	108a9204 	addi	r2,r2,10824
2008b56c:	200b883a 	mov	r5,r4
2008b570:	11000017 	ldw	r4,0(r2)
2008b574:	00928501 	jmpi	20092850 <_free_r>

2008b578 <_malloc_r>:
2008b578:	defff504 	addi	sp,sp,-44
2008b57c:	dc800315 	stw	r18,12(sp)
2008b580:	dfc00a15 	stw	ra,40(sp)
2008b584:	df000915 	stw	fp,36(sp)
2008b588:	ddc00815 	stw	r23,32(sp)
2008b58c:	dd800715 	stw	r22,28(sp)
2008b590:	dd400615 	stw	r21,24(sp)
2008b594:	dd000515 	stw	r20,20(sp)
2008b598:	dcc00415 	stw	r19,16(sp)
2008b59c:	dc400215 	stw	r17,8(sp)
2008b5a0:	dc000115 	stw	r16,4(sp)
2008b5a4:	288002c4 	addi	r2,r5,11
2008b5a8:	00c00584 	movi	r3,22
2008b5ac:	2025883a 	mov	r18,r4
2008b5b0:	18802a2e 	bgeu	r3,r2,2008b65c <_malloc_r+0xe4>
2008b5b4:	047ffe04 	movi	r17,-8
2008b5b8:	1462703a 	and	r17,r2,r17
2008b5bc:	88009e16 	blt	r17,zero,2008b838 <_malloc_r+0x2c0>
2008b5c0:	89409d36 	bltu	r17,r5,2008b838 <_malloc_r+0x2c0>
2008b5c4:	0099cc00 	call	20099cc0 <__malloc_lock>
2008b5c8:	00807dc4 	movi	r2,503
2008b5cc:	14402736 	bltu	r2,r17,2008b66c <_malloc_r+0xf4>
2008b5d0:	8806d0fa 	srli	r3,r17,3
2008b5d4:	04c00034 	movhi	r19,0
2008b5d8:	9cc44504 	addi	r19,r19,4372
2008b5dc:	18c5883a 	add	r2,r3,r3
2008b5e0:	1085883a 	add	r2,r2,r2
2008b5e4:	1085883a 	add	r2,r2,r2
2008b5e8:	9885883a 	add	r2,r19,r2
2008b5ec:	14000317 	ldw	r16,12(r2)
2008b5f0:	80814a26 	beq	r16,r2,2008bb1c <_malloc_r+0x5a4>
2008b5f4:	80c00117 	ldw	r3,4(r16)
2008b5f8:	81000317 	ldw	r4,12(r16)
2008b5fc:	00bfff04 	movi	r2,-4
2008b600:	1884703a 	and	r2,r3,r2
2008b604:	81400217 	ldw	r5,8(r16)
2008b608:	8085883a 	add	r2,r16,r2
2008b60c:	10c00117 	ldw	r3,4(r2)
2008b610:	29000315 	stw	r4,12(r5)
2008b614:	21400215 	stw	r5,8(r4)
2008b618:	18c00054 	ori	r3,r3,1
2008b61c:	10c00115 	stw	r3,4(r2)
2008b620:	9009883a 	mov	r4,r18
2008b624:	0099ce00 	call	20099ce0 <__malloc_unlock>
2008b628:	80800204 	addi	r2,r16,8
2008b62c:	dfc00a17 	ldw	ra,40(sp)
2008b630:	df000917 	ldw	fp,36(sp)
2008b634:	ddc00817 	ldw	r23,32(sp)
2008b638:	dd800717 	ldw	r22,28(sp)
2008b63c:	dd400617 	ldw	r21,24(sp)
2008b640:	dd000517 	ldw	r20,20(sp)
2008b644:	dcc00417 	ldw	r19,16(sp)
2008b648:	dc800317 	ldw	r18,12(sp)
2008b64c:	dc400217 	ldw	r17,8(sp)
2008b650:	dc000117 	ldw	r16,4(sp)
2008b654:	dec00b04 	addi	sp,sp,44
2008b658:	f800283a 	ret
2008b65c:	04400404 	movi	r17,16
2008b660:	89407536 	bltu	r17,r5,2008b838 <_malloc_r+0x2c0>
2008b664:	0099cc00 	call	20099cc0 <__malloc_lock>
2008b668:	003fd906 	br	2008b5d0 <__flash_rwdata_start+0xfffec9fc>
2008b66c:	8806d27a 	srli	r3,r17,9
2008b670:	18007526 	beq	r3,zero,2008b848 <_malloc_r+0x2d0>
2008b674:	00800104 	movi	r2,4
2008b678:	10c0ef36 	bltu	r2,r3,2008ba38 <_malloc_r+0x4c0>
2008b67c:	8806d1ba 	srli	r3,r17,6
2008b680:	19c00e04 	addi	r7,r3,56
2008b684:	39cb883a 	add	r5,r7,r7
2008b688:	04c00034 	movhi	r19,0
2008b68c:	294b883a 	add	r5,r5,r5
2008b690:	9cc44504 	addi	r19,r19,4372
2008b694:	294b883a 	add	r5,r5,r5
2008b698:	994b883a 	add	r5,r19,r5
2008b69c:	2c000317 	ldw	r16,12(r5)
2008b6a0:	2c000e26 	beq	r5,r16,2008b6dc <_malloc_r+0x164>
2008b6a4:	80800117 	ldw	r2,4(r16)
2008b6a8:	01bfff04 	movi	r6,-4
2008b6ac:	010003c4 	movi	r4,15
2008b6b0:	1184703a 	and	r2,r2,r6
2008b6b4:	1447c83a 	sub	r3,r2,r17
2008b6b8:	20c00716 	blt	r4,r3,2008b6d8 <_malloc_r+0x160>
2008b6bc:	1800650e 	bge	r3,zero,2008b854 <_malloc_r+0x2dc>
2008b6c0:	84000317 	ldw	r16,12(r16)
2008b6c4:	2c000526 	beq	r5,r16,2008b6dc <_malloc_r+0x164>
2008b6c8:	80800117 	ldw	r2,4(r16)
2008b6cc:	1184703a 	and	r2,r2,r6
2008b6d0:	1447c83a 	sub	r3,r2,r17
2008b6d4:	20fff90e 	bge	r4,r3,2008b6bc <__flash_rwdata_start+0xfffecae8>
2008b6d8:	39ffffc4 	addi	r7,r7,-1
2008b6dc:	38c00044 	addi	r3,r7,1
2008b6e0:	01800034 	movhi	r6,0
2008b6e4:	9c000417 	ldw	r16,16(r19)
2008b6e8:	31844504 	addi	r6,r6,4372
2008b6ec:	32400204 	addi	r9,r6,8
2008b6f0:	82410326 	beq	r16,r9,2008bb00 <_malloc_r+0x588>
2008b6f4:	81000117 	ldw	r4,4(r16)
2008b6f8:	00bfff04 	movi	r2,-4
2008b6fc:	208e703a 	and	r7,r4,r2
2008b700:	3c45c83a 	sub	r2,r7,r17
2008b704:	010003c4 	movi	r4,15
2008b708:	2080ee16 	blt	r4,r2,2008bac4 <_malloc_r+0x54c>
2008b70c:	32400515 	stw	r9,20(r6)
2008b710:	32400415 	stw	r9,16(r6)
2008b714:	1000510e 	bge	r2,zero,2008b85c <_malloc_r+0x2e4>
2008b718:	00807fc4 	movi	r2,511
2008b71c:	11c0ce36 	bltu	r2,r7,2008ba58 <_malloc_r+0x4e0>
2008b720:	3808d0fa 	srli	r4,r7,3
2008b724:	01c00044 	movi	r7,1
2008b728:	30800117 	ldw	r2,4(r6)
2008b72c:	210b883a 	add	r5,r4,r4
2008b730:	294b883a 	add	r5,r5,r5
2008b734:	2009d0ba 	srai	r4,r4,2
2008b738:	294b883a 	add	r5,r5,r5
2008b73c:	298b883a 	add	r5,r5,r6
2008b740:	2a000217 	ldw	r8,8(r5)
2008b744:	3908983a 	sll	r4,r7,r4
2008b748:	81400315 	stw	r5,12(r16)
2008b74c:	82000215 	stw	r8,8(r16)
2008b750:	2088b03a 	or	r4,r4,r2
2008b754:	2c000215 	stw	r16,8(r5)
2008b758:	31000115 	stw	r4,4(r6)
2008b75c:	44000315 	stw	r16,12(r8)
2008b760:	1805d0ba 	srai	r2,r3,2
2008b764:	01400044 	movi	r5,1
2008b768:	288a983a 	sll	r5,r5,r2
2008b76c:	21404336 	bltu	r4,r5,2008b87c <_malloc_r+0x304>
2008b770:	2144703a 	and	r2,r4,r5
2008b774:	10000a1e 	bne	r2,zero,2008b7a0 <_malloc_r+0x228>
2008b778:	00bfff04 	movi	r2,-4
2008b77c:	294b883a 	add	r5,r5,r5
2008b780:	1886703a 	and	r3,r3,r2
2008b784:	2144703a 	and	r2,r4,r5
2008b788:	18c00104 	addi	r3,r3,4
2008b78c:	1000041e 	bne	r2,zero,2008b7a0 <_malloc_r+0x228>
2008b790:	294b883a 	add	r5,r5,r5
2008b794:	2144703a 	and	r2,r4,r5
2008b798:	18c00104 	addi	r3,r3,4
2008b79c:	103ffc26 	beq	r2,zero,2008b790 <__flash_rwdata_start+0xfffecbbc>
2008b7a0:	023fff04 	movi	r8,-4
2008b7a4:	01c003c4 	movi	r7,15
2008b7a8:	18c5883a 	add	r2,r3,r3
2008b7ac:	1085883a 	add	r2,r2,r2
2008b7b0:	1085883a 	add	r2,r2,r2
2008b7b4:	9895883a 	add	r10,r19,r2
2008b7b8:	52c00304 	addi	r11,r10,12
2008b7bc:	1819883a 	mov	r12,r3
2008b7c0:	5c000017 	ldw	r16,0(r11)
2008b7c4:	59bffd04 	addi	r6,r11,-12
2008b7c8:	8180041e 	bne	r16,r6,2008b7dc <_malloc_r+0x264>
2008b7cc:	0000ce06 	br	2008bb08 <_malloc_r+0x590>
2008b7d0:	2000d70e 	bge	r4,zero,2008bb30 <_malloc_r+0x5b8>
2008b7d4:	84000317 	ldw	r16,12(r16)
2008b7d8:	8180cb26 	beq	r16,r6,2008bb08 <_malloc_r+0x590>
2008b7dc:	80800117 	ldw	r2,4(r16)
2008b7e0:	1204703a 	and	r2,r2,r8
2008b7e4:	1449c83a 	sub	r4,r2,r17
2008b7e8:	393ff90e 	bge	r7,r4,2008b7d0 <__flash_rwdata_start+0xfffecbfc>
2008b7ec:	80800317 	ldw	r2,12(r16)
2008b7f0:	80c00217 	ldw	r3,8(r16)
2008b7f4:	89400054 	ori	r5,r17,1
2008b7f8:	81400115 	stw	r5,4(r16)
2008b7fc:	18800315 	stw	r2,12(r3)
2008b800:	10c00215 	stw	r3,8(r2)
2008b804:	8463883a 	add	r17,r16,r17
2008b808:	9c400515 	stw	r17,20(r19)
2008b80c:	9c400415 	stw	r17,16(r19)
2008b810:	20800054 	ori	r2,r4,1
2008b814:	88800115 	stw	r2,4(r17)
2008b818:	8a400315 	stw	r9,12(r17)
2008b81c:	8a400215 	stw	r9,8(r17)
2008b820:	8923883a 	add	r17,r17,r4
2008b824:	89000015 	stw	r4,0(r17)
2008b828:	9009883a 	mov	r4,r18
2008b82c:	0099ce00 	call	20099ce0 <__malloc_unlock>
2008b830:	80800204 	addi	r2,r16,8
2008b834:	003f7d06 	br	2008b62c <__flash_rwdata_start+0xfffeca58>
2008b838:	00800304 	movi	r2,12
2008b83c:	90800015 	stw	r2,0(r18)
2008b840:	0005883a 	mov	r2,zero
2008b844:	003f7906 	br	2008b62c <__flash_rwdata_start+0xfffeca58>
2008b848:	01401f84 	movi	r5,126
2008b84c:	01c00fc4 	movi	r7,63
2008b850:	003f8d06 	br	2008b688 <__flash_rwdata_start+0xfffecab4>
2008b854:	81000317 	ldw	r4,12(r16)
2008b858:	003f6a06 	br	2008b604 <__flash_rwdata_start+0xfffeca30>
2008b85c:	81c5883a 	add	r2,r16,r7
2008b860:	10c00117 	ldw	r3,4(r2)
2008b864:	9009883a 	mov	r4,r18
2008b868:	18c00054 	ori	r3,r3,1
2008b86c:	10c00115 	stw	r3,4(r2)
2008b870:	0099ce00 	call	20099ce0 <__malloc_unlock>
2008b874:	80800204 	addi	r2,r16,8
2008b878:	003f6c06 	br	2008b62c <__flash_rwdata_start+0xfffeca58>
2008b87c:	9c000217 	ldw	r16,8(r19)
2008b880:	00bfff04 	movi	r2,-4
2008b884:	85800117 	ldw	r22,4(r16)
2008b888:	b0ac703a 	and	r22,r22,r2
2008b88c:	b4400336 	bltu	r22,r17,2008b89c <_malloc_r+0x324>
2008b890:	b445c83a 	sub	r2,r22,r17
2008b894:	00c003c4 	movi	r3,15
2008b898:	18805d16 	blt	r3,r2,2008ba10 <_malloc_r+0x498>
2008b89c:	05c00034 	movhi	r23,0
2008b8a0:	00800034 	movhi	r2,0
2008b8a4:	bdca9304 	addi	r23,r23,10828
2008b8a8:	108ab104 	addi	r2,r2,10948
2008b8ac:	15400017 	ldw	r21,0(r2)
2008b8b0:	b9000017 	ldw	r4,0(r23)
2008b8b4:	00ffffc4 	movi	r3,-1
2008b8b8:	858d883a 	add	r6,r16,r22
2008b8bc:	8d6b883a 	add	r21,r17,r21
2008b8c0:	20c0e426 	beq	r4,r3,2008bc54 <_malloc_r+0x6dc>
2008b8c4:	ad4403c4 	addi	r21,r21,4111
2008b8c8:	00fc0004 	movi	r3,-4096
2008b8cc:	a8ea703a 	and	r21,r21,r3
2008b8d0:	9009883a 	mov	r4,r18
2008b8d4:	a80b883a 	mov	r5,r21
2008b8d8:	d9800015 	stw	r6,0(sp)
2008b8dc:	008c13c0 	call	2008c13c <_sbrk_r>
2008b8e0:	00ffffc4 	movi	r3,-1
2008b8e4:	1029883a 	mov	r20,r2
2008b8e8:	d9800017 	ldw	r6,0(sp)
2008b8ec:	10c0a426 	beq	r2,r3,2008bb80 <_malloc_r+0x608>
2008b8f0:	1180a236 	bltu	r2,r6,2008bb7c <_malloc_r+0x604>
2008b8f4:	07000034 	movhi	fp,0
2008b8f8:	e70c1d04 	addi	fp,fp,12404
2008b8fc:	e0c00017 	ldw	r3,0(fp)
2008b900:	a8c7883a 	add	r3,r21,r3
2008b904:	e0c00015 	stw	r3,0(fp)
2008b908:	3500da26 	beq	r6,r20,2008bc74 <_malloc_r+0x6fc>
2008b90c:	b9000017 	ldw	r4,0(r23)
2008b910:	00bfffc4 	movi	r2,-1
2008b914:	2080e426 	beq	r4,r2,2008bca8 <_malloc_r+0x730>
2008b918:	a185c83a 	sub	r2,r20,r6
2008b91c:	1885883a 	add	r2,r3,r2
2008b920:	e0800015 	stw	r2,0(fp)
2008b924:	a0c001cc 	andi	r3,r20,7
2008b928:	1800b526 	beq	r3,zero,2008bc00 <_malloc_r+0x688>
2008b92c:	a0e9c83a 	sub	r20,r20,r3
2008b930:	00840204 	movi	r2,4104
2008b934:	a5000204 	addi	r20,r20,8
2008b938:	10c7c83a 	sub	r3,r2,r3
2008b93c:	a545883a 	add	r2,r20,r21
2008b940:	1083ffcc 	andi	r2,r2,4095
2008b944:	18abc83a 	sub	r21,r3,r2
2008b948:	9009883a 	mov	r4,r18
2008b94c:	a80b883a 	mov	r5,r21
2008b950:	008c13c0 	call	2008c13c <_sbrk_r>
2008b954:	00ffffc4 	movi	r3,-1
2008b958:	10c0d026 	beq	r2,r3,2008bc9c <_malloc_r+0x724>
2008b95c:	1507c83a 	sub	r3,r2,r20
2008b960:	a8c7883a 	add	r3,r21,r3
2008b964:	18c00054 	ori	r3,r3,1
2008b968:	e0800017 	ldw	r2,0(fp)
2008b96c:	9d000215 	stw	r20,8(r19)
2008b970:	a0c00115 	stw	r3,4(r20)
2008b974:	a887883a 	add	r3,r21,r2
2008b978:	e0c00015 	stw	r3,0(fp)
2008b97c:	84c00e26 	beq	r16,r19,2008b9b8 <_malloc_r+0x440>
2008b980:	018003c4 	movi	r6,15
2008b984:	3580a02e 	bgeu	r6,r22,2008bc08 <_malloc_r+0x690>
2008b988:	81400117 	ldw	r5,4(r16)
2008b98c:	013ffe04 	movi	r4,-8
2008b990:	b0bffd04 	addi	r2,r22,-12
2008b994:	1104703a 	and	r2,r2,r4
2008b998:	2900004c 	andi	r4,r5,1
2008b99c:	1108b03a 	or	r4,r2,r4
2008b9a0:	81000115 	stw	r4,4(r16)
2008b9a4:	01400144 	movi	r5,5
2008b9a8:	8089883a 	add	r4,r16,r2
2008b9ac:	21400115 	stw	r5,4(r4)
2008b9b0:	21400215 	stw	r5,8(r4)
2008b9b4:	3080c036 	bltu	r6,r2,2008bcb8 <_malloc_r+0x740>
2008b9b8:	00800034 	movhi	r2,0
2008b9bc:	108ab004 	addi	r2,r2,10944
2008b9c0:	11000017 	ldw	r4,0(r2)
2008b9c4:	20c0012e 	bgeu	r4,r3,2008b9cc <_malloc_r+0x454>
2008b9c8:	10c00015 	stw	r3,0(r2)
2008b9cc:	00800034 	movhi	r2,0
2008b9d0:	108aaf04 	addi	r2,r2,10940
2008b9d4:	11000017 	ldw	r4,0(r2)
2008b9d8:	9c000217 	ldw	r16,8(r19)
2008b9dc:	20c0012e 	bgeu	r4,r3,2008b9e4 <_malloc_r+0x46c>
2008b9e0:	10c00015 	stw	r3,0(r2)
2008b9e4:	80c00117 	ldw	r3,4(r16)
2008b9e8:	00bfff04 	movi	r2,-4
2008b9ec:	1886703a 	and	r3,r3,r2
2008b9f0:	1c45c83a 	sub	r2,r3,r17
2008b9f4:	1c400236 	bltu	r3,r17,2008ba00 <_malloc_r+0x488>
2008b9f8:	00c003c4 	movi	r3,15
2008b9fc:	18800416 	blt	r3,r2,2008ba10 <_malloc_r+0x498>
2008ba00:	9009883a 	mov	r4,r18
2008ba04:	0099ce00 	call	20099ce0 <__malloc_unlock>
2008ba08:	0005883a 	mov	r2,zero
2008ba0c:	003f0706 	br	2008b62c <__flash_rwdata_start+0xfffeca58>
2008ba10:	88c00054 	ori	r3,r17,1
2008ba14:	80c00115 	stw	r3,4(r16)
2008ba18:	8463883a 	add	r17,r16,r17
2008ba1c:	10800054 	ori	r2,r2,1
2008ba20:	9c400215 	stw	r17,8(r19)
2008ba24:	88800115 	stw	r2,4(r17)
2008ba28:	9009883a 	mov	r4,r18
2008ba2c:	0099ce00 	call	20099ce0 <__malloc_unlock>
2008ba30:	80800204 	addi	r2,r16,8
2008ba34:	003efd06 	br	2008b62c <__flash_rwdata_start+0xfffeca58>
2008ba38:	00800504 	movi	r2,20
2008ba3c:	10c0482e 	bgeu	r2,r3,2008bb60 <_malloc_r+0x5e8>
2008ba40:	00801504 	movi	r2,84
2008ba44:	10c06836 	bltu	r2,r3,2008bbe8 <_malloc_r+0x670>
2008ba48:	8806d33a 	srli	r3,r17,12
2008ba4c:	19c01b84 	addi	r7,r3,110
2008ba50:	39cb883a 	add	r5,r7,r7
2008ba54:	003f0c06 	br	2008b688 <__flash_rwdata_start+0xfffecab4>
2008ba58:	3804d27a 	srli	r2,r7,9
2008ba5c:	01000104 	movi	r4,4
2008ba60:	2080422e 	bgeu	r4,r2,2008bb6c <_malloc_r+0x5f4>
2008ba64:	01000504 	movi	r4,20
2008ba68:	20807c36 	bltu	r4,r2,2008bc5c <_malloc_r+0x6e4>
2008ba6c:	110016c4 	addi	r4,r2,91
2008ba70:	210b883a 	add	r5,r4,r4
2008ba74:	294b883a 	add	r5,r5,r5
2008ba78:	294b883a 	add	r5,r5,r5
2008ba7c:	994b883a 	add	r5,r19,r5
2008ba80:	28800217 	ldw	r2,8(r5)
2008ba84:	02000034 	movhi	r8,0
2008ba88:	42044504 	addi	r8,r8,4372
2008ba8c:	11406326 	beq	r2,r5,2008bc1c <_malloc_r+0x6a4>
2008ba90:	01bfff04 	movi	r6,-4
2008ba94:	11000117 	ldw	r4,4(r2)
2008ba98:	2188703a 	and	r4,r4,r6
2008ba9c:	3900022e 	bgeu	r7,r4,2008baa8 <_malloc_r+0x530>
2008baa0:	10800217 	ldw	r2,8(r2)
2008baa4:	28bffb1e 	bne	r5,r2,2008ba94 <__flash_rwdata_start+0xfffecec0>
2008baa8:	11800317 	ldw	r6,12(r2)
2008baac:	99000117 	ldw	r4,4(r19)
2008bab0:	81800315 	stw	r6,12(r16)
2008bab4:	80800215 	stw	r2,8(r16)
2008bab8:	34000215 	stw	r16,8(r6)
2008babc:	14000315 	stw	r16,12(r2)
2008bac0:	003f2706 	br	2008b760 <__flash_rwdata_start+0xfffecb8c>
2008bac4:	88c00054 	ori	r3,r17,1
2008bac8:	80c00115 	stw	r3,4(r16)
2008bacc:	8463883a 	add	r17,r16,r17
2008bad0:	34400515 	stw	r17,20(r6)
2008bad4:	34400415 	stw	r17,16(r6)
2008bad8:	10c00054 	ori	r3,r2,1
2008badc:	8a400315 	stw	r9,12(r17)
2008bae0:	8a400215 	stw	r9,8(r17)
2008bae4:	88c00115 	stw	r3,4(r17)
2008bae8:	88a3883a 	add	r17,r17,r2
2008baec:	88800015 	stw	r2,0(r17)
2008baf0:	9009883a 	mov	r4,r18
2008baf4:	0099ce00 	call	20099ce0 <__malloc_unlock>
2008baf8:	80800204 	addi	r2,r16,8
2008bafc:	003ecb06 	br	2008b62c <__flash_rwdata_start+0xfffeca58>
2008bb00:	31000117 	ldw	r4,4(r6)
2008bb04:	003f1606 	br	2008b760 <__flash_rwdata_start+0xfffecb8c>
2008bb08:	63000044 	addi	r12,r12,1
2008bb0c:	608000cc 	andi	r2,r12,3
2008bb10:	5ac00204 	addi	r11,r11,8
2008bb14:	103f2a1e 	bne	r2,zero,2008b7c0 <__flash_rwdata_start+0xfffecbec>
2008bb18:	00002106 	br	2008bba0 <_malloc_r+0x628>
2008bb1c:	80800204 	addi	r2,r16,8
2008bb20:	84000517 	ldw	r16,20(r16)
2008bb24:	143eb31e 	bne	r2,r16,2008b5f4 <__flash_rwdata_start+0xfffeca20>
2008bb28:	18c00084 	addi	r3,r3,2
2008bb2c:	003eec06 	br	2008b6e0 <__flash_rwdata_start+0xfffecb0c>
2008bb30:	8085883a 	add	r2,r16,r2
2008bb34:	10c00117 	ldw	r3,4(r2)
2008bb38:	81000317 	ldw	r4,12(r16)
2008bb3c:	81400217 	ldw	r5,8(r16)
2008bb40:	18c00054 	ori	r3,r3,1
2008bb44:	10c00115 	stw	r3,4(r2)
2008bb48:	29000315 	stw	r4,12(r5)
2008bb4c:	21400215 	stw	r5,8(r4)
2008bb50:	9009883a 	mov	r4,r18
2008bb54:	0099ce00 	call	20099ce0 <__malloc_unlock>
2008bb58:	80800204 	addi	r2,r16,8
2008bb5c:	003eb306 	br	2008b62c <__flash_rwdata_start+0xfffeca58>
2008bb60:	19c016c4 	addi	r7,r3,91
2008bb64:	39cb883a 	add	r5,r7,r7
2008bb68:	003ec706 	br	2008b688 <__flash_rwdata_start+0xfffecab4>
2008bb6c:	3804d1ba 	srli	r2,r7,6
2008bb70:	11000e04 	addi	r4,r2,56
2008bb74:	210b883a 	add	r5,r4,r4
2008bb78:	003fbe06 	br	2008ba74 <__flash_rwdata_start+0xfffecea0>
2008bb7c:	84ff5d26 	beq	r16,r19,2008b8f4 <__flash_rwdata_start+0xfffecd20>
2008bb80:	9c000217 	ldw	r16,8(r19)
2008bb84:	00bfff04 	movi	r2,-4
2008bb88:	80c00117 	ldw	r3,4(r16)
2008bb8c:	1886703a 	and	r3,r3,r2
2008bb90:	003f9706 	br	2008b9f0 <__flash_rwdata_start+0xfffece1c>
2008bb94:	52800017 	ldw	r10,0(r10)
2008bb98:	18ffffc4 	addi	r3,r3,-1
2008bb9c:	50805c1e 	bne	r10,r2,2008bd10 <_malloc_r+0x798>
2008bba0:	190000cc 	andi	r4,r3,3
2008bba4:	50bffe04 	addi	r2,r10,-8
2008bba8:	203ffa1e 	bne	r4,zero,2008bb94 <__flash_rwdata_start+0xfffecfc0>
2008bbac:	98800117 	ldw	r2,4(r19)
2008bbb0:	0146303a 	nor	r3,zero,r5
2008bbb4:	1884703a 	and	r2,r3,r2
2008bbb8:	98800115 	stw	r2,4(r19)
2008bbbc:	294b883a 	add	r5,r5,r5
2008bbc0:	117f2e36 	bltu	r2,r5,2008b87c <__flash_rwdata_start+0xfffecca8>
2008bbc4:	283f2d26 	beq	r5,zero,2008b87c <__flash_rwdata_start+0xfffecca8>
2008bbc8:	1146703a 	and	r3,r2,r5
2008bbcc:	1800521e 	bne	r3,zero,2008bd18 <_malloc_r+0x7a0>
2008bbd0:	6007883a 	mov	r3,r12
2008bbd4:	294b883a 	add	r5,r5,r5
2008bbd8:	1148703a 	and	r4,r2,r5
2008bbdc:	18c00104 	addi	r3,r3,4
2008bbe0:	203ffc26 	beq	r4,zero,2008bbd4 <__flash_rwdata_start+0xfffed000>
2008bbe4:	003ef006 	br	2008b7a8 <__flash_rwdata_start+0xfffecbd4>
2008bbe8:	00805504 	movi	r2,340
2008bbec:	10c01336 	bltu	r2,r3,2008bc3c <_malloc_r+0x6c4>
2008bbf0:	8806d3fa 	srli	r3,r17,15
2008bbf4:	19c01dc4 	addi	r7,r3,119
2008bbf8:	39cb883a 	add	r5,r7,r7
2008bbfc:	003ea206 	br	2008b688 <__flash_rwdata_start+0xfffecab4>
2008bc00:	00c40004 	movi	r3,4096
2008bc04:	003f4d06 	br	2008b93c <__flash_rwdata_start+0xfffecd68>
2008bc08:	00800044 	movi	r2,1
2008bc0c:	a0800115 	stw	r2,4(r20)
2008bc10:	a021883a 	mov	r16,r20
2008bc14:	0007883a 	mov	r3,zero
2008bc18:	003f7506 	br	2008b9f0 <__flash_rwdata_start+0xfffece1c>
2008bc1c:	200bd0ba 	srai	r5,r4,2
2008bc20:	01800044 	movi	r6,1
2008bc24:	41000117 	ldw	r4,4(r8)
2008bc28:	314a983a 	sll	r5,r6,r5
2008bc2c:	100d883a 	mov	r6,r2
2008bc30:	2908b03a 	or	r4,r5,r4
2008bc34:	41000115 	stw	r4,4(r8)
2008bc38:	003f9d06 	br	2008bab0 <__flash_rwdata_start+0xfffecedc>
2008bc3c:	00815504 	movi	r2,1364
2008bc40:	10c01336 	bltu	r2,r3,2008bc90 <_malloc_r+0x718>
2008bc44:	8806d4ba 	srli	r3,r17,18
2008bc48:	19c01f04 	addi	r7,r3,124
2008bc4c:	39cb883a 	add	r5,r7,r7
2008bc50:	003e8d06 	br	2008b688 <__flash_rwdata_start+0xfffecab4>
2008bc54:	ad400404 	addi	r21,r21,16
2008bc58:	003f1d06 	br	2008b8d0 <__flash_rwdata_start+0xfffeccfc>
2008bc5c:	01001504 	movi	r4,84
2008bc60:	20801c36 	bltu	r4,r2,2008bcd4 <_malloc_r+0x75c>
2008bc64:	3804d33a 	srli	r2,r7,12
2008bc68:	11001b84 	addi	r4,r2,110
2008bc6c:	210b883a 	add	r5,r4,r4
2008bc70:	003f8006 	br	2008ba74 <__flash_rwdata_start+0xfffecea0>
2008bc74:	3083ffcc 	andi	r2,r6,4095
2008bc78:	103f241e 	bne	r2,zero,2008b90c <__flash_rwdata_start+0xfffecd38>
2008bc7c:	99000217 	ldw	r4,8(r19)
2008bc80:	ad85883a 	add	r2,r21,r22
2008bc84:	10800054 	ori	r2,r2,1
2008bc88:	20800115 	stw	r2,4(r4)
2008bc8c:	003f4a06 	br	2008b9b8 <__flash_rwdata_start+0xfffecde4>
2008bc90:	01403f04 	movi	r5,252
2008bc94:	01c01f84 	movi	r7,126
2008bc98:	003e7b06 	br	2008b688 <__flash_rwdata_start+0xfffecab4>
2008bc9c:	00c00044 	movi	r3,1
2008bca0:	002b883a 	mov	r21,zero
2008bca4:	003f3006 	br	2008b968 <__flash_rwdata_start+0xfffecd94>
2008bca8:	00800034 	movhi	r2,0
2008bcac:	108a9304 	addi	r2,r2,10828
2008bcb0:	15000015 	stw	r20,0(r2)
2008bcb4:	003f1b06 	br	2008b924 <__flash_rwdata_start+0xfffecd50>
2008bcb8:	9009883a 	mov	r4,r18
2008bcbc:	81400204 	addi	r5,r16,8
2008bcc0:	00928500 	call	20092850 <_free_r>
2008bcc4:	00800034 	movhi	r2,0
2008bcc8:	108c1d04 	addi	r2,r2,12404
2008bccc:	10c00017 	ldw	r3,0(r2)
2008bcd0:	003f3906 	br	2008b9b8 <__flash_rwdata_start+0xfffecde4>
2008bcd4:	01005504 	movi	r4,340
2008bcd8:	20800436 	bltu	r4,r2,2008bcec <_malloc_r+0x774>
2008bcdc:	3804d3fa 	srli	r2,r7,15
2008bce0:	11001dc4 	addi	r4,r2,119
2008bce4:	210b883a 	add	r5,r4,r4
2008bce8:	003f6206 	br	2008ba74 <__flash_rwdata_start+0xfffecea0>
2008bcec:	01015504 	movi	r4,1364
2008bcf0:	20800436 	bltu	r4,r2,2008bd04 <_malloc_r+0x78c>
2008bcf4:	3804d4ba 	srli	r2,r7,18
2008bcf8:	11001f04 	addi	r4,r2,124
2008bcfc:	210b883a 	add	r5,r4,r4
2008bd00:	003f5c06 	br	2008ba74 <__flash_rwdata_start+0xfffecea0>
2008bd04:	01403f04 	movi	r5,252
2008bd08:	01001f84 	movi	r4,126
2008bd0c:	003f5906 	br	2008ba74 <__flash_rwdata_start+0xfffecea0>
2008bd10:	98800117 	ldw	r2,4(r19)
2008bd14:	003fa906 	br	2008bbbc <__flash_rwdata_start+0xfffecfe8>
2008bd18:	6007883a 	mov	r3,r12
2008bd1c:	003ea206 	br	2008b7a8 <__flash_rwdata_start+0xfffecbd4>

2008bd20 <memcmp>:
2008bd20:	01c000c4 	movi	r7,3
2008bd24:	3980192e 	bgeu	r7,r6,2008bd8c <memcmp+0x6c>
2008bd28:	2144b03a 	or	r2,r4,r5
2008bd2c:	11c4703a 	and	r2,r2,r7
2008bd30:	10000f26 	beq	r2,zero,2008bd70 <memcmp+0x50>
2008bd34:	20800003 	ldbu	r2,0(r4)
2008bd38:	28c00003 	ldbu	r3,0(r5)
2008bd3c:	10c0151e 	bne	r2,r3,2008bd94 <memcmp+0x74>
2008bd40:	31bfff84 	addi	r6,r6,-2
2008bd44:	01ffffc4 	movi	r7,-1
2008bd48:	00000406 	br	2008bd5c <memcmp+0x3c>
2008bd4c:	20800003 	ldbu	r2,0(r4)
2008bd50:	28c00003 	ldbu	r3,0(r5)
2008bd54:	31bfffc4 	addi	r6,r6,-1
2008bd58:	10c00e1e 	bne	r2,r3,2008bd94 <memcmp+0x74>
2008bd5c:	21000044 	addi	r4,r4,1
2008bd60:	29400044 	addi	r5,r5,1
2008bd64:	31fff91e 	bne	r6,r7,2008bd4c <__flash_rwdata_start+0xfffed178>
2008bd68:	0005883a 	mov	r2,zero
2008bd6c:	f800283a 	ret
2008bd70:	20c00017 	ldw	r3,0(r4)
2008bd74:	28800017 	ldw	r2,0(r5)
2008bd78:	1880041e 	bne	r3,r2,2008bd8c <memcmp+0x6c>
2008bd7c:	31bfff04 	addi	r6,r6,-4
2008bd80:	21000104 	addi	r4,r4,4
2008bd84:	29400104 	addi	r5,r5,4
2008bd88:	39bff936 	bltu	r7,r6,2008bd70 <__flash_rwdata_start+0xfffed19c>
2008bd8c:	303fe91e 	bne	r6,zero,2008bd34 <__flash_rwdata_start+0xfffed160>
2008bd90:	003ff506 	br	2008bd68 <__flash_rwdata_start+0xfffed194>
2008bd94:	10c5c83a 	sub	r2,r2,r3
2008bd98:	f800283a 	ret

2008bd9c <memcpy>:
2008bd9c:	deffff04 	addi	sp,sp,-4
2008bda0:	dc000015 	stw	r16,0(sp)
2008bda4:	00c003c4 	movi	r3,15
2008bda8:	2005883a 	mov	r2,r4
2008bdac:	1980432e 	bgeu	r3,r6,2008bebc <memcpy+0x120>
2008bdb0:	2146b03a 	or	r3,r4,r5
2008bdb4:	18c000cc 	andi	r3,r3,3
2008bdb8:	1800421e 	bne	r3,zero,2008bec4 <memcpy+0x128>
2008bdbc:	343ffc04 	addi	r16,r6,-16
2008bdc0:	8020d13a 	srli	r16,r16,4
2008bdc4:	28c00104 	addi	r3,r5,4
2008bdc8:	23400104 	addi	r13,r4,4
2008bdcc:	801e913a 	slli	r15,r16,4
2008bdd0:	2b000204 	addi	r12,r5,8
2008bdd4:	22c00204 	addi	r11,r4,8
2008bdd8:	7bc00504 	addi	r15,r15,20
2008bddc:	2a800304 	addi	r10,r5,12
2008bde0:	22400304 	addi	r9,r4,12
2008bde4:	2bdf883a 	add	r15,r5,r15
2008bde8:	2811883a 	mov	r8,r5
2008bdec:	200f883a 	mov	r7,r4
2008bdf0:	41000017 	ldw	r4,0(r8)
2008bdf4:	39c00404 	addi	r7,r7,16
2008bdf8:	18c00404 	addi	r3,r3,16
2008bdfc:	393ffc15 	stw	r4,-16(r7)
2008be00:	1bbffc17 	ldw	r14,-16(r3)
2008be04:	6b400404 	addi	r13,r13,16
2008be08:	5ac00404 	addi	r11,r11,16
2008be0c:	6bbffc15 	stw	r14,-16(r13)
2008be10:	63800017 	ldw	r14,0(r12)
2008be14:	4a400404 	addi	r9,r9,16
2008be18:	42000404 	addi	r8,r8,16
2008be1c:	5bbffc15 	stw	r14,-16(r11)
2008be20:	53800017 	ldw	r14,0(r10)
2008be24:	63000404 	addi	r12,r12,16
2008be28:	52800404 	addi	r10,r10,16
2008be2c:	4bbffc15 	stw	r14,-16(r9)
2008be30:	1bffef1e 	bne	r3,r15,2008bdf0 <__flash_rwdata_start+0xfffed21c>
2008be34:	81c00044 	addi	r7,r16,1
2008be38:	380e913a 	slli	r7,r7,4
2008be3c:	310003cc 	andi	r4,r6,15
2008be40:	02c000c4 	movi	r11,3
2008be44:	11c7883a 	add	r3,r2,r7
2008be48:	29cb883a 	add	r5,r5,r7
2008be4c:	59001f2e 	bgeu	r11,r4,2008becc <memcpy+0x130>
2008be50:	1813883a 	mov	r9,r3
2008be54:	2811883a 	mov	r8,r5
2008be58:	200f883a 	mov	r7,r4
2008be5c:	42800017 	ldw	r10,0(r8)
2008be60:	4a400104 	addi	r9,r9,4
2008be64:	39ffff04 	addi	r7,r7,-4
2008be68:	4abfff15 	stw	r10,-4(r9)
2008be6c:	42000104 	addi	r8,r8,4
2008be70:	59fffa36 	bltu	r11,r7,2008be5c <__flash_rwdata_start+0xfffed288>
2008be74:	213fff04 	addi	r4,r4,-4
2008be78:	2008d0ba 	srli	r4,r4,2
2008be7c:	318000cc 	andi	r6,r6,3
2008be80:	21000044 	addi	r4,r4,1
2008be84:	2109883a 	add	r4,r4,r4
2008be88:	2109883a 	add	r4,r4,r4
2008be8c:	1907883a 	add	r3,r3,r4
2008be90:	290b883a 	add	r5,r5,r4
2008be94:	30000626 	beq	r6,zero,2008beb0 <memcpy+0x114>
2008be98:	198d883a 	add	r6,r3,r6
2008be9c:	29c00003 	ldbu	r7,0(r5)
2008bea0:	18c00044 	addi	r3,r3,1
2008bea4:	29400044 	addi	r5,r5,1
2008bea8:	19ffffc5 	stb	r7,-1(r3)
2008beac:	19bffb1e 	bne	r3,r6,2008be9c <__flash_rwdata_start+0xfffed2c8>
2008beb0:	dc000017 	ldw	r16,0(sp)
2008beb4:	dec00104 	addi	sp,sp,4
2008beb8:	f800283a 	ret
2008bebc:	2007883a 	mov	r3,r4
2008bec0:	003ff406 	br	2008be94 <__flash_rwdata_start+0xfffed2c0>
2008bec4:	2007883a 	mov	r3,r4
2008bec8:	003ff306 	br	2008be98 <__flash_rwdata_start+0xfffed2c4>
2008becc:	200d883a 	mov	r6,r4
2008bed0:	003ff006 	br	2008be94 <__flash_rwdata_start+0xfffed2c0>

2008bed4 <memset>:
2008bed4:	20c000cc 	andi	r3,r4,3
2008bed8:	2005883a 	mov	r2,r4
2008bedc:	18004326 	beq	r3,zero,2008bfec <memset+0x118>
2008bee0:	31ffffc4 	addi	r7,r6,-1
2008bee4:	30004026 	beq	r6,zero,2008bfe8 <memset+0x114>
2008bee8:	2813883a 	mov	r9,r5
2008beec:	200d883a 	mov	r6,r4
2008bef0:	2007883a 	mov	r3,r4
2008bef4:	00000406 	br	2008bf08 <memset+0x34>
2008bef8:	3a3fffc4 	addi	r8,r7,-1
2008befc:	31800044 	addi	r6,r6,1
2008bf00:	38003926 	beq	r7,zero,2008bfe8 <memset+0x114>
2008bf04:	400f883a 	mov	r7,r8
2008bf08:	18c00044 	addi	r3,r3,1
2008bf0c:	32400005 	stb	r9,0(r6)
2008bf10:	1a0000cc 	andi	r8,r3,3
2008bf14:	403ff81e 	bne	r8,zero,2008bef8 <__flash_rwdata_start+0xfffed324>
2008bf18:	010000c4 	movi	r4,3
2008bf1c:	21c02d2e 	bgeu	r4,r7,2008bfd4 <memset+0x100>
2008bf20:	29803fcc 	andi	r6,r5,255
2008bf24:	3008923a 	slli	r4,r6,8
2008bf28:	218cb03a 	or	r6,r4,r6
2008bf2c:	3008943a 	slli	r4,r6,16
2008bf30:	218cb03a 	or	r6,r4,r6
2008bf34:	010003c4 	movi	r4,15
2008bf38:	21c0182e 	bgeu	r4,r7,2008bf9c <memset+0xc8>
2008bf3c:	3b3ffc04 	addi	r12,r7,-16
2008bf40:	6018d13a 	srli	r12,r12,4
2008bf44:	1a000104 	addi	r8,r3,4
2008bf48:	1ac00204 	addi	r11,r3,8
2008bf4c:	6008913a 	slli	r4,r12,4
2008bf50:	1a800304 	addi	r10,r3,12
2008bf54:	1813883a 	mov	r9,r3
2008bf58:	21000504 	addi	r4,r4,20
2008bf5c:	1909883a 	add	r4,r3,r4
2008bf60:	49800015 	stw	r6,0(r9)
2008bf64:	41800015 	stw	r6,0(r8)
2008bf68:	59800015 	stw	r6,0(r11)
2008bf6c:	51800015 	stw	r6,0(r10)
2008bf70:	42000404 	addi	r8,r8,16
2008bf74:	4a400404 	addi	r9,r9,16
2008bf78:	5ac00404 	addi	r11,r11,16
2008bf7c:	52800404 	addi	r10,r10,16
2008bf80:	413ff71e 	bne	r8,r4,2008bf60 <__flash_rwdata_start+0xfffed38c>
2008bf84:	63000044 	addi	r12,r12,1
2008bf88:	6018913a 	slli	r12,r12,4
2008bf8c:	39c003cc 	andi	r7,r7,15
2008bf90:	010000c4 	movi	r4,3
2008bf94:	1b07883a 	add	r3,r3,r12
2008bf98:	21c00e2e 	bgeu	r4,r7,2008bfd4 <memset+0x100>
2008bf9c:	1813883a 	mov	r9,r3
2008bfa0:	3811883a 	mov	r8,r7
2008bfa4:	010000c4 	movi	r4,3
2008bfa8:	49800015 	stw	r6,0(r9)
2008bfac:	423fff04 	addi	r8,r8,-4
2008bfb0:	4a400104 	addi	r9,r9,4
2008bfb4:	223ffc36 	bltu	r4,r8,2008bfa8 <__flash_rwdata_start+0xfffed3d4>
2008bfb8:	393fff04 	addi	r4,r7,-4
2008bfbc:	2008d0ba 	srli	r4,r4,2
2008bfc0:	39c000cc 	andi	r7,r7,3
2008bfc4:	21000044 	addi	r4,r4,1
2008bfc8:	2109883a 	add	r4,r4,r4
2008bfcc:	2109883a 	add	r4,r4,r4
2008bfd0:	1907883a 	add	r3,r3,r4
2008bfd4:	38000426 	beq	r7,zero,2008bfe8 <memset+0x114>
2008bfd8:	19cf883a 	add	r7,r3,r7
2008bfdc:	19400005 	stb	r5,0(r3)
2008bfe0:	18c00044 	addi	r3,r3,1
2008bfe4:	19fffd1e 	bne	r3,r7,2008bfdc <__flash_rwdata_start+0xfffed408>
2008bfe8:	f800283a 	ret
2008bfec:	2007883a 	mov	r3,r4
2008bff0:	300f883a 	mov	r7,r6
2008bff4:	003fc806 	br	2008bf18 <__flash_rwdata_start+0xfffed344>

2008bff8 <_printf_r>:
2008bff8:	defffd04 	addi	sp,sp,-12
2008bffc:	dfc00015 	stw	ra,0(sp)
2008c000:	d9800115 	stw	r6,4(sp)
2008c004:	d9c00215 	stw	r7,8(sp)
2008c008:	280d883a 	mov	r6,r5
2008c00c:	21400217 	ldw	r5,8(r4)
2008c010:	d9c00104 	addi	r7,sp,4
2008c014:	008e3880 	call	2008e388 <___vfprintf_internal_r>
2008c018:	dfc00017 	ldw	ra,0(sp)
2008c01c:	dec00304 	addi	sp,sp,12
2008c020:	f800283a 	ret

2008c024 <printf>:
2008c024:	defffc04 	addi	sp,sp,-16
2008c028:	dfc00015 	stw	ra,0(sp)
2008c02c:	d9400115 	stw	r5,4(sp)
2008c030:	d9800215 	stw	r6,8(sp)
2008c034:	d9c00315 	stw	r7,12(sp)
2008c038:	00800034 	movhi	r2,0
2008c03c:	108a9204 	addi	r2,r2,10824
2008c040:	10800017 	ldw	r2,0(r2)
2008c044:	200b883a 	mov	r5,r4
2008c048:	d9800104 	addi	r6,sp,4
2008c04c:	11000217 	ldw	r4,8(r2)
2008c050:	00902d80 	call	200902d8 <__vfprintf_internal>
2008c054:	dfc00017 	ldw	ra,0(sp)
2008c058:	dec00404 	addi	sp,sp,16
2008c05c:	f800283a 	ret

2008c060 <_putchar_r>:
2008c060:	21800217 	ldw	r6,8(r4)
2008c064:	00946041 	jmpi	20094604 <_putc_r>

2008c068 <putchar>:
2008c068:	00800034 	movhi	r2,0
2008c06c:	108a9204 	addi	r2,r2,10824
2008c070:	200b883a 	mov	r5,r4
2008c074:	11000017 	ldw	r4,0(r2)
2008c078:	21800217 	ldw	r6,8(r4)
2008c07c:	00946041 	jmpi	20094604 <_putc_r>

2008c080 <_puts_r>:
2008c080:	defff604 	addi	sp,sp,-40
2008c084:	dc000715 	stw	r16,28(sp)
2008c088:	2021883a 	mov	r16,r4
2008c08c:	2809883a 	mov	r4,r5
2008c090:	dc400815 	stw	r17,32(sp)
2008c094:	dfc00915 	stw	ra,36(sp)
2008c098:	2823883a 	mov	r17,r5
2008c09c:	008c2f80 	call	2008c2f8 <strlen>
2008c0a0:	81400217 	ldw	r5,8(r16)
2008c0a4:	11000044 	addi	r4,r2,1
2008c0a8:	d8800115 	stw	r2,4(sp)
2008c0ac:	00800034 	movhi	r2,0
2008c0b0:	2980030b 	ldhu	r6,12(r5)
2008c0b4:	10818a04 	addi	r2,r2,1576
2008c0b8:	d8800215 	stw	r2,8(sp)
2008c0bc:	00800044 	movi	r2,1
2008c0c0:	d8800315 	stw	r2,12(sp)
2008c0c4:	00800084 	movi	r2,2
2008c0c8:	d8800515 	stw	r2,20(sp)
2008c0cc:	dc400015 	stw	r17,0(sp)
2008c0d0:	d9000615 	stw	r4,24(sp)
2008c0d4:	dec00415 	stw	sp,16(sp)
2008c0d8:	3088000c 	andi	r2,r6,8192
2008c0dc:	1000061e 	bne	r2,zero,2008c0f8 <_puts_r+0x78>
2008c0e0:	29001917 	ldw	r4,100(r5)
2008c0e4:	00b7ffc4 	movi	r2,-8193
2008c0e8:	31880014 	ori	r6,r6,8192
2008c0ec:	2084703a 	and	r2,r4,r2
2008c0f0:	2980030d 	sth	r6,12(r5)
2008c0f4:	28801915 	stw	r2,100(r5)
2008c0f8:	8009883a 	mov	r4,r16
2008c0fc:	d9800404 	addi	r6,sp,16
2008c100:	0092b400 	call	20092b40 <__sfvwrite_r>
2008c104:	1000061e 	bne	r2,zero,2008c120 <_puts_r+0xa0>
2008c108:	00800284 	movi	r2,10
2008c10c:	dfc00917 	ldw	ra,36(sp)
2008c110:	dc400817 	ldw	r17,32(sp)
2008c114:	dc000717 	ldw	r16,28(sp)
2008c118:	dec00a04 	addi	sp,sp,40
2008c11c:	f800283a 	ret
2008c120:	00bfffc4 	movi	r2,-1
2008c124:	003ff906 	br	2008c10c <__flash_rwdata_start+0xfffed538>

2008c128 <puts>:
2008c128:	00800034 	movhi	r2,0
2008c12c:	108a9204 	addi	r2,r2,10824
2008c130:	200b883a 	mov	r5,r4
2008c134:	11000017 	ldw	r4,0(r2)
2008c138:	008c0801 	jmpi	2008c080 <_puts_r>

2008c13c <_sbrk_r>:
2008c13c:	defffd04 	addi	sp,sp,-12
2008c140:	dc000015 	stw	r16,0(sp)
2008c144:	04000034 	movhi	r16,0
2008c148:	dc400115 	stw	r17,4(sp)
2008c14c:	840ab204 	addi	r16,r16,10952
2008c150:	2023883a 	mov	r17,r4
2008c154:	2809883a 	mov	r4,r5
2008c158:	dfc00215 	stw	ra,8(sp)
2008c15c:	80000015 	stw	zero,0(r16)
2008c160:	0099eac0 	call	20099eac <sbrk>
2008c164:	00ffffc4 	movi	r3,-1
2008c168:	10c00526 	beq	r2,r3,2008c180 <_sbrk_r+0x44>
2008c16c:	dfc00217 	ldw	ra,8(sp)
2008c170:	dc400117 	ldw	r17,4(sp)
2008c174:	dc000017 	ldw	r16,0(sp)
2008c178:	dec00304 	addi	sp,sp,12
2008c17c:	f800283a 	ret
2008c180:	80c00017 	ldw	r3,0(r16)
2008c184:	183ff926 	beq	r3,zero,2008c16c <__flash_rwdata_start+0xfffed598>
2008c188:	88c00015 	stw	r3,0(r17)
2008c18c:	003ff706 	br	2008c16c <__flash_rwdata_start+0xfffed598>

2008c190 <_sprintf_r>:
2008c190:	deffe404 	addi	sp,sp,-112
2008c194:	2807883a 	mov	r3,r5
2008c198:	dfc01a15 	stw	ra,104(sp)
2008c19c:	d9c01b15 	stw	r7,108(sp)
2008c1a0:	00a00034 	movhi	r2,32768
2008c1a4:	10bfffc4 	addi	r2,r2,-1
2008c1a8:	02008204 	movi	r8,520
2008c1ac:	d8800215 	stw	r2,8(sp)
2008c1b0:	d8800515 	stw	r2,20(sp)
2008c1b4:	d80b883a 	mov	r5,sp
2008c1b8:	d9c01b04 	addi	r7,sp,108
2008c1bc:	00bfffc4 	movi	r2,-1
2008c1c0:	d8c00015 	stw	r3,0(sp)
2008c1c4:	d8c00415 	stw	r3,16(sp)
2008c1c8:	da00030d 	sth	r8,12(sp)
2008c1cc:	d880038d 	sth	r2,14(sp)
2008c1d0:	008c3f80 	call	2008c3f8 <___svfprintf_internal_r>
2008c1d4:	d8c00017 	ldw	r3,0(sp)
2008c1d8:	18000005 	stb	zero,0(r3)
2008c1dc:	dfc01a17 	ldw	ra,104(sp)
2008c1e0:	dec01c04 	addi	sp,sp,112
2008c1e4:	f800283a 	ret

2008c1e8 <sprintf>:
2008c1e8:	deffe304 	addi	sp,sp,-116
2008c1ec:	2007883a 	mov	r3,r4
2008c1f0:	dfc01a15 	stw	ra,104(sp)
2008c1f4:	d9801b15 	stw	r6,108(sp)
2008c1f8:	d9c01c15 	stw	r7,112(sp)
2008c1fc:	01000034 	movhi	r4,0
2008c200:	210a9204 	addi	r4,r4,10824
2008c204:	21000017 	ldw	r4,0(r4)
2008c208:	00a00034 	movhi	r2,32768
2008c20c:	10bfffc4 	addi	r2,r2,-1
2008c210:	280d883a 	mov	r6,r5
2008c214:	02008204 	movi	r8,520
2008c218:	d8800215 	stw	r2,8(sp)
2008c21c:	d8800515 	stw	r2,20(sp)
2008c220:	d80b883a 	mov	r5,sp
2008c224:	d9c01b04 	addi	r7,sp,108
2008c228:	00bfffc4 	movi	r2,-1
2008c22c:	d8c00015 	stw	r3,0(sp)
2008c230:	d8c00415 	stw	r3,16(sp)
2008c234:	da00030d 	sth	r8,12(sp)
2008c238:	d880038d 	sth	r2,14(sp)
2008c23c:	008c3f80 	call	2008c3f8 <___svfprintf_internal_r>
2008c240:	d8c00017 	ldw	r3,0(sp)
2008c244:	18000005 	stb	zero,0(r3)
2008c248:	dfc01a17 	ldw	ra,104(sp)
2008c24c:	dec01d04 	addi	sp,sp,116
2008c250:	f800283a 	ret

2008c254 <strcmp>:
2008c254:	2144b03a 	or	r2,r4,r5
2008c258:	108000cc 	andi	r2,r2,3
2008c25c:	1000171e 	bne	r2,zero,2008c2bc <strcmp+0x68>
2008c260:	20800017 	ldw	r2,0(r4)
2008c264:	28c00017 	ldw	r3,0(r5)
2008c268:	10c0141e 	bne	r2,r3,2008c2bc <strcmp+0x68>
2008c26c:	027fbff4 	movhi	r9,65279
2008c270:	4a7fbfc4 	addi	r9,r9,-257
2008c274:	0086303a 	nor	r3,zero,r2
2008c278:	02202074 	movhi	r8,32897
2008c27c:	1245883a 	add	r2,r2,r9
2008c280:	42202004 	addi	r8,r8,-32640
2008c284:	10c4703a 	and	r2,r2,r3
2008c288:	1204703a 	and	r2,r2,r8
2008c28c:	10000226 	beq	r2,zero,2008c298 <strcmp+0x44>
2008c290:	00001706 	br	2008c2f0 <strcmp+0x9c>
2008c294:	1000161e 	bne	r2,zero,2008c2f0 <strcmp+0x9c>
2008c298:	21000104 	addi	r4,r4,4
2008c29c:	20c00017 	ldw	r3,0(r4)
2008c2a0:	29400104 	addi	r5,r5,4
2008c2a4:	29800017 	ldw	r6,0(r5)
2008c2a8:	1a4f883a 	add	r7,r3,r9
2008c2ac:	00c4303a 	nor	r2,zero,r3
2008c2b0:	3884703a 	and	r2,r7,r2
2008c2b4:	1204703a 	and	r2,r2,r8
2008c2b8:	19bff626 	beq	r3,r6,2008c294 <__flash_rwdata_start+0xfffed6c0>
2008c2bc:	20800007 	ldb	r2,0(r4)
2008c2c0:	1000051e 	bne	r2,zero,2008c2d8 <strcmp+0x84>
2008c2c4:	00000606 	br	2008c2e0 <strcmp+0x8c>
2008c2c8:	21000044 	addi	r4,r4,1
2008c2cc:	20800007 	ldb	r2,0(r4)
2008c2d0:	29400044 	addi	r5,r5,1
2008c2d4:	10000226 	beq	r2,zero,2008c2e0 <strcmp+0x8c>
2008c2d8:	28c00007 	ldb	r3,0(r5)
2008c2dc:	10fffa26 	beq	r2,r3,2008c2c8 <__flash_rwdata_start+0xfffed6f4>
2008c2e0:	20800003 	ldbu	r2,0(r4)
2008c2e4:	28c00003 	ldbu	r3,0(r5)
2008c2e8:	10c5c83a 	sub	r2,r2,r3
2008c2ec:	f800283a 	ret
2008c2f0:	0005883a 	mov	r2,zero
2008c2f4:	f800283a 	ret

2008c2f8 <strlen>:
2008c2f8:	208000cc 	andi	r2,r4,3
2008c2fc:	10002026 	beq	r2,zero,2008c380 <strlen+0x88>
2008c300:	20800007 	ldb	r2,0(r4)
2008c304:	10002026 	beq	r2,zero,2008c388 <strlen+0x90>
2008c308:	2005883a 	mov	r2,r4
2008c30c:	00000206 	br	2008c318 <strlen+0x20>
2008c310:	10c00007 	ldb	r3,0(r2)
2008c314:	18001826 	beq	r3,zero,2008c378 <strlen+0x80>
2008c318:	10800044 	addi	r2,r2,1
2008c31c:	10c000cc 	andi	r3,r2,3
2008c320:	183ffb1e 	bne	r3,zero,2008c310 <__flash_rwdata_start+0xfffed73c>
2008c324:	10c00017 	ldw	r3,0(r2)
2008c328:	01ffbff4 	movhi	r7,65279
2008c32c:	39ffbfc4 	addi	r7,r7,-257
2008c330:	00ca303a 	nor	r5,zero,r3
2008c334:	01a02074 	movhi	r6,32897
2008c338:	19c7883a 	add	r3,r3,r7
2008c33c:	31a02004 	addi	r6,r6,-32640
2008c340:	1946703a 	and	r3,r3,r5
2008c344:	1986703a 	and	r3,r3,r6
2008c348:	1800091e 	bne	r3,zero,2008c370 <strlen+0x78>
2008c34c:	10800104 	addi	r2,r2,4
2008c350:	10c00017 	ldw	r3,0(r2)
2008c354:	19cb883a 	add	r5,r3,r7
2008c358:	00c6303a 	nor	r3,zero,r3
2008c35c:	28c6703a 	and	r3,r5,r3
2008c360:	1986703a 	and	r3,r3,r6
2008c364:	183ff926 	beq	r3,zero,2008c34c <__flash_rwdata_start+0xfffed778>
2008c368:	00000106 	br	2008c370 <strlen+0x78>
2008c36c:	10800044 	addi	r2,r2,1
2008c370:	10c00007 	ldb	r3,0(r2)
2008c374:	183ffd1e 	bne	r3,zero,2008c36c <__flash_rwdata_start+0xfffed798>
2008c378:	1105c83a 	sub	r2,r2,r4
2008c37c:	f800283a 	ret
2008c380:	2005883a 	mov	r2,r4
2008c384:	003fe706 	br	2008c324 <__flash_rwdata_start+0xfffed750>
2008c388:	0005883a 	mov	r2,zero
2008c38c:	f800283a 	ret

2008c390 <strrchr>:
2008c390:	defffd04 	addi	sp,sp,-12
2008c394:	dc000015 	stw	r16,0(sp)
2008c398:	dfc00215 	stw	ra,8(sp)
2008c39c:	dc400115 	stw	r17,4(sp)
2008c3a0:	2821883a 	mov	r16,r5
2008c3a4:	28000f26 	beq	r5,zero,2008c3e4 <strrchr+0x54>
2008c3a8:	2007883a 	mov	r3,r4
2008c3ac:	0023883a 	mov	r17,zero
2008c3b0:	00000206 	br	2008c3bc <strrchr+0x2c>
2008c3b4:	10c00044 	addi	r3,r2,1
2008c3b8:	1023883a 	mov	r17,r2
2008c3bc:	1809883a 	mov	r4,r3
2008c3c0:	800b883a 	mov	r5,r16
2008c3c4:	0094e880 	call	20094e88 <strchr>
2008c3c8:	103ffa1e 	bne	r2,zero,2008c3b4 <__flash_rwdata_start+0xfffed7e0>
2008c3cc:	8805883a 	mov	r2,r17
2008c3d0:	dfc00217 	ldw	ra,8(sp)
2008c3d4:	dc400117 	ldw	r17,4(sp)
2008c3d8:	dc000017 	ldw	r16,0(sp)
2008c3dc:	dec00304 	addi	sp,sp,12
2008c3e0:	f800283a 	ret
2008c3e4:	dfc00217 	ldw	ra,8(sp)
2008c3e8:	dc400117 	ldw	r17,4(sp)
2008c3ec:	dc000017 	ldw	r16,0(sp)
2008c3f0:	dec00304 	addi	sp,sp,12
2008c3f4:	0094e881 	jmpi	20094e88 <strchr>

2008c3f8 <___svfprintf_internal_r>:
2008c3f8:	deffb504 	addi	sp,sp,-300
2008c3fc:	dfc04a15 	stw	ra,296(sp)
2008c400:	ddc04815 	stw	r23,288(sp)
2008c404:	d9002f15 	stw	r4,188(sp)
2008c408:	282f883a 	mov	r23,r5
2008c40c:	d9802915 	stw	r6,164(sp)
2008c410:	d9c02d15 	stw	r7,180(sp)
2008c414:	df004915 	stw	fp,292(sp)
2008c418:	dd804715 	stw	r22,284(sp)
2008c41c:	dd404615 	stw	r21,280(sp)
2008c420:	dd004515 	stw	r20,276(sp)
2008c424:	dcc04415 	stw	r19,272(sp)
2008c428:	dc804315 	stw	r18,268(sp)
2008c42c:	dc404215 	stw	r17,264(sp)
2008c430:	dc004115 	stw	r16,260(sp)
2008c434:	00932340 	call	20093234 <_localeconv_r>
2008c438:	10800017 	ldw	r2,0(r2)
2008c43c:	1009883a 	mov	r4,r2
2008c440:	d8803515 	stw	r2,212(sp)
2008c444:	008c2f80 	call	2008c2f8 <strlen>
2008c448:	d8803915 	stw	r2,228(sp)
2008c44c:	b880030b 	ldhu	r2,12(r23)
2008c450:	1080200c 	andi	r2,r2,128
2008c454:	10000226 	beq	r2,zero,2008c460 <___svfprintf_internal_r+0x68>
2008c458:	b8800417 	ldw	r2,16(r23)
2008c45c:	10065f26 	beq	r2,zero,2008dddc <___svfprintf_internal_r+0x19e4>
2008c460:	db001dc4 	addi	r12,sp,119
2008c464:	dd801e04 	addi	r22,sp,120
2008c468:	d8800404 	addi	r2,sp,16
2008c46c:	05000034 	movhi	r20,0
2008c470:	b317c83a 	sub	r11,r22,r12
2008c474:	a5019b84 	addi	r20,r20,1646
2008c478:	db002815 	stw	r12,160(sp)
2008c47c:	d8801e15 	stw	r2,120(sp)
2008c480:	d8002015 	stw	zero,128(sp)
2008c484:	d8001f15 	stw	zero,124(sp)
2008c488:	d8003315 	stw	zero,204(sp)
2008c48c:	d8003715 	stw	zero,220(sp)
2008c490:	d8003815 	stw	zero,224(sp)
2008c494:	1011883a 	mov	r8,r2
2008c498:	d8003b15 	stw	zero,236(sp)
2008c49c:	d8003a15 	stw	zero,232(sp)
2008c4a0:	d8003015 	stw	zero,192(sp)
2008c4a4:	dac03d15 	stw	r11,244(sp)
2008c4a8:	db002917 	ldw	r12,164(sp)
2008c4ac:	60800007 	ldb	r2,0(r12)
2008c4b0:	1000ab26 	beq	r2,zero,2008c760 <___svfprintf_internal_r+0x368>
2008c4b4:	00c00944 	movi	r3,37
2008c4b8:	10c0a926 	beq	r2,r3,2008c760 <___svfprintf_internal_r+0x368>
2008c4bc:	6021883a 	mov	r16,r12
2008c4c0:	00000106 	br	2008c4c8 <___svfprintf_internal_r+0xd0>
2008c4c4:	10c08426 	beq	r2,r3,2008c6d8 <___svfprintf_internal_r+0x2e0>
2008c4c8:	84000044 	addi	r16,r16,1
2008c4cc:	80800007 	ldb	r2,0(r16)
2008c4d0:	103ffc1e 	bne	r2,zero,2008c4c4 <__flash_rwdata_start+0xfffed8f0>
2008c4d4:	dac02917 	ldw	r11,164(sp)
2008c4d8:	82e3c83a 	sub	r17,r16,r11
2008c4dc:	88000f26 	beq	r17,zero,2008c51c <___svfprintf_internal_r+0x124>
2008c4e0:	d8c02017 	ldw	r3,128(sp)
2008c4e4:	d8801f17 	ldw	r2,124(sp)
2008c4e8:	dac02917 	ldw	r11,164(sp)
2008c4ec:	1c47883a 	add	r3,r3,r17
2008c4f0:	10800044 	addi	r2,r2,1
2008c4f4:	d8c02015 	stw	r3,128(sp)
2008c4f8:	42c00015 	stw	r11,0(r8)
2008c4fc:	44400115 	stw	r17,4(r8)
2008c500:	d8801f15 	stw	r2,124(sp)
2008c504:	00c001c4 	movi	r3,7
2008c508:	18807616 	blt	r3,r2,2008c6e4 <___svfprintf_internal_r+0x2ec>
2008c50c:	42000204 	addi	r8,r8,8
2008c510:	db003017 	ldw	r12,192(sp)
2008c514:	6459883a 	add	r12,r12,r17
2008c518:	db003015 	stw	r12,192(sp)
2008c51c:	80800007 	ldb	r2,0(r16)
2008c520:	10007726 	beq	r2,zero,2008c700 <___svfprintf_internal_r+0x308>
2008c524:	80800044 	addi	r2,r16,1
2008c528:	84000047 	ldb	r16,1(r16)
2008c52c:	d8002785 	stb	zero,158(sp)
2008c530:	000d883a 	mov	r6,zero
2008c534:	027fffc4 	movi	r9,-1
2008c538:	d8002e15 	stw	zero,184(sp)
2008c53c:	0023883a 	mov	r17,zero
2008c540:	01001604 	movi	r4,88
2008c544:	01400244 	movi	r5,9
2008c548:	02800a84 	movi	r10,42
2008c54c:	01c01b04 	movi	r7,108
2008c550:	10c00044 	addi	r3,r2,1
2008c554:	80bff804 	addi	r2,r16,-32
2008c558:	2082e636 	bltu	r4,r2,2008d0f4 <___svfprintf_internal_r+0xcfc>
2008c55c:	100490ba 	slli	r2,r2,2
2008c560:	02c80274 	movhi	r11,8201
2008c564:	5af15d04 	addi	r11,r11,-14988
2008c568:	12c5883a 	add	r2,r2,r11
2008c56c:	10800017 	ldw	r2,0(r2)
2008c570:	1000683a 	jmp	r2
2008c574:	2008ced4 	ori	zero,r4,9019
2008c578:	2008d0f4 	orhi	zero,r4,9027
2008c57c:	2008d0f4 	orhi	zero,r4,9027
2008c580:	2008cef4 	orhi	zero,r4,9019
2008c584:	2008d0f4 	orhi	zero,r4,9027
2008c588:	2008d0f4 	orhi	zero,r4,9027
2008c58c:	2008d0f4 	orhi	zero,r4,9027
2008c590:	2008d0f4 	orhi	zero,r4,9027
2008c594:	2008d0f4 	orhi	zero,r4,9027
2008c598:	2008d0f4 	orhi	zero,r4,9027
2008c59c:	2008cf04 	addi	zero,r4,9020
2008c5a0:	2008cf30 	cmpltui	zero,r4,9020
2008c5a4:	2008d0f4 	orhi	zero,r4,9027
2008c5a8:	2008c768 	cmpgeui	zero,r4,8989
2008c5ac:	2008c778 	rdprs	zero,r4,8989
2008c5b0:	2008d0f4 	orhi	zero,r4,9027
2008c5b4:	2008c7b8 	rdprs	zero,r4,8990
2008c5b8:	2008cd98 	cmpnei	zero,r4,9014
2008c5bc:	2008cd98 	cmpnei	zero,r4,9014
2008c5c0:	2008cd98 	cmpnei	zero,r4,9014
2008c5c4:	2008cd98 	cmpnei	zero,r4,9014
2008c5c8:	2008cd98 	cmpnei	zero,r4,9014
2008c5cc:	2008cd98 	cmpnei	zero,r4,9014
2008c5d0:	2008cd98 	cmpnei	zero,r4,9014
2008c5d4:	2008cd98 	cmpnei	zero,r4,9014
2008c5d8:	2008cd98 	cmpnei	zero,r4,9014
2008c5dc:	2008d0f4 	orhi	zero,r4,9027
2008c5e0:	2008d0f4 	orhi	zero,r4,9027
2008c5e4:	2008d0f4 	orhi	zero,r4,9027
2008c5e8:	2008d0f4 	orhi	zero,r4,9027
2008c5ec:	2008d0f4 	orhi	zero,r4,9027
2008c5f0:	2008d0f4 	orhi	zero,r4,9027
2008c5f4:	2008d0f4 	orhi	zero,r4,9027
2008c5f8:	2008d0f4 	orhi	zero,r4,9027
2008c5fc:	2008d0f4 	orhi	zero,r4,9027
2008c600:	2008d0f4 	orhi	zero,r4,9027
2008c604:	2008c7c8 	cmpgei	zero,r4,8991
2008c608:	2008cc48 	cmpgei	zero,r4,9009
2008c60c:	2008d0f4 	orhi	zero,r4,9027
2008c610:	2008cc48 	cmpgei	zero,r4,9009
2008c614:	2008d0f4 	orhi	zero,r4,9027
2008c618:	2008d0f4 	orhi	zero,r4,9027
2008c61c:	2008d0f4 	orhi	zero,r4,9027
2008c620:	2008d0f4 	orhi	zero,r4,9027
2008c624:	2008ccec 	andhi	zero,r4,9011
2008c628:	2008d0f4 	orhi	zero,r4,9027
2008c62c:	2008d0f4 	orhi	zero,r4,9027
2008c630:	2008d088 	cmpgei	zero,r4,9026
2008c634:	2008d0f4 	orhi	zero,r4,9027
2008c638:	2008d0f4 	orhi	zero,r4,9027
2008c63c:	2008d0f4 	orhi	zero,r4,9027
2008c640:	2008d0f4 	orhi	zero,r4,9027
2008c644:	2008d0f4 	orhi	zero,r4,9027
2008c648:	2008ccfc 	xorhi	zero,r4,9011
2008c64c:	2008d0f4 	orhi	zero,r4,9027
2008c650:	2008d0f4 	orhi	zero,r4,9027
2008c654:	2008cd3c 	xorhi	zero,r4,9012
2008c658:	2008d0f4 	orhi	zero,r4,9027
2008c65c:	2008d0f4 	orhi	zero,r4,9027
2008c660:	2008d0f4 	orhi	zero,r4,9027
2008c664:	2008d0f4 	orhi	zero,r4,9027
2008c668:	2008d0f4 	orhi	zero,r4,9027
2008c66c:	2008d0f4 	orhi	zero,r4,9027
2008c670:	2008d0f4 	orhi	zero,r4,9027
2008c674:	2008d0f4 	orhi	zero,r4,9027
2008c678:	2008d0f4 	orhi	zero,r4,9027
2008c67c:	2008d0f4 	orhi	zero,r4,9027
2008c680:	2008cfe0 	cmpeqi	zero,r4,9023
2008c684:	2008d020 	cmpeqi	zero,r4,9024
2008c688:	2008cc48 	cmpgei	zero,r4,9009
2008c68c:	2008cc48 	cmpgei	zero,r4,9009
2008c690:	2008cc48 	cmpgei	zero,r4,9009
2008c694:	2008cf40 	call	22008cf4 <__flash_rwdata_start+0x1f6a120>
2008c698:	2008d020 	cmpeqi	zero,r4,9024
2008c69c:	2008d0f4 	orhi	zero,r4,9027
2008c6a0:	2008d0f4 	orhi	zero,r4,9027
2008c6a4:	2008cf50 	cmplti	zero,r4,9021
2008c6a8:	2008d0f4 	orhi	zero,r4,9027
2008c6ac:	2008cf64 	muli	zero,r4,9021
2008c6b0:	2008d0b8 	rdprs	zero,r4,9026
2008c6b4:	2008cf98 	cmpnei	zero,r4,9022
2008c6b8:	2008cdcc 	andi	zero,r4,9015
2008c6bc:	2008d0f4 	orhi	zero,r4,9027
2008c6c0:	2008cddc 	xori	zero,r4,9015
2008c6c4:	2008d0f4 	orhi	zero,r4,9027
2008c6c8:	2008ce54 	ori	zero,r4,9017
2008c6cc:	2008d0f4 	orhi	zero,r4,9027
2008c6d0:	2008d0f4 	orhi	zero,r4,9027
2008c6d4:	2008ce94 	ori	zero,r4,9018
2008c6d8:	db002917 	ldw	r12,164(sp)
2008c6dc:	8323c83a 	sub	r17,r16,r12
2008c6e0:	003f7e06 	br	2008c4dc <__flash_rwdata_start+0xfffed908>
2008c6e4:	d9002f17 	ldw	r4,188(sp)
2008c6e8:	b80b883a 	mov	r5,r23
2008c6ec:	b00d883a 	mov	r6,r22
2008c6f0:	0094fec0 	call	20094fec <__ssprint_r>
2008c6f4:	1000081e 	bne	r2,zero,2008c718 <___svfprintf_internal_r+0x320>
2008c6f8:	da000404 	addi	r8,sp,16
2008c6fc:	003f8406 	br	2008c510 <__flash_rwdata_start+0xfffed93c>
2008c700:	d8802017 	ldw	r2,128(sp)
2008c704:	10000426 	beq	r2,zero,2008c718 <___svfprintf_internal_r+0x320>
2008c708:	d9002f17 	ldw	r4,188(sp)
2008c70c:	b80b883a 	mov	r5,r23
2008c710:	d9801e04 	addi	r6,sp,120
2008c714:	0094fec0 	call	20094fec <__ssprint_r>
2008c718:	b880030b 	ldhu	r2,12(r23)
2008c71c:	1080100c 	andi	r2,r2,64
2008c720:	10000d1e 	bne	r2,zero,2008c758 <___svfprintf_internal_r+0x360>
2008c724:	d8803017 	ldw	r2,192(sp)
2008c728:	dfc04a17 	ldw	ra,296(sp)
2008c72c:	df004917 	ldw	fp,292(sp)
2008c730:	ddc04817 	ldw	r23,288(sp)
2008c734:	dd804717 	ldw	r22,284(sp)
2008c738:	dd404617 	ldw	r21,280(sp)
2008c73c:	dd004517 	ldw	r20,276(sp)
2008c740:	dcc04417 	ldw	r19,272(sp)
2008c744:	dc804317 	ldw	r18,268(sp)
2008c748:	dc404217 	ldw	r17,264(sp)
2008c74c:	dc004117 	ldw	r16,260(sp)
2008c750:	dec04b04 	addi	sp,sp,300
2008c754:	f800283a 	ret
2008c758:	00bfffc4 	movi	r2,-1
2008c75c:	003ff206 	br	2008c728 <__flash_rwdata_start+0xfffedb54>
2008c760:	dc002917 	ldw	r16,164(sp)
2008c764:	003f6d06 	br	2008c51c <__flash_rwdata_start+0xfffed948>
2008c768:	1805883a 	mov	r2,r3
2008c76c:	8c400114 	ori	r17,r17,4
2008c770:	1c000007 	ldb	r16,0(r3)
2008c774:	003f7606 	br	2008c550 <__flash_rwdata_start+0xfffed97c>
2008c778:	1c000007 	ldb	r16,0(r3)
2008c77c:	18800044 	addi	r2,r3,1
2008c780:	8286e726 	beq	r16,r10,2008e320 <___svfprintf_internal_r+0x1f28>
2008c784:	82fff404 	addi	r11,r16,-48
2008c788:	1007883a 	mov	r3,r2
2008c78c:	0013883a 	mov	r9,zero
2008c790:	2aff7036 	bltu	r5,r11,2008c554 <__flash_rwdata_start+0xfffed980>
2008c794:	1c000007 	ldb	r16,0(r3)
2008c798:	4a4002a4 	muli	r9,r9,10
2008c79c:	18c00044 	addi	r3,r3,1
2008c7a0:	5a53883a 	add	r9,r11,r9
2008c7a4:	82fff404 	addi	r11,r16,-48
2008c7a8:	2afffa2e 	bgeu	r5,r11,2008c794 <__flash_rwdata_start+0xfffedbc0>
2008c7ac:	483f690e 	bge	r9,zero,2008c554 <__flash_rwdata_start+0xfffed980>
2008c7b0:	027fffc4 	movi	r9,-1
2008c7b4:	003f6706 	br	2008c554 <__flash_rwdata_start+0xfffed980>
2008c7b8:	8c402014 	ori	r17,r17,128
2008c7bc:	1805883a 	mov	r2,r3
2008c7c0:	1c000007 	ldb	r16,0(r3)
2008c7c4:	003f6206 	br	2008c550 <__flash_rwdata_start+0xfffed97c>
2008c7c8:	8c400414 	ori	r17,r17,16
2008c7cc:	d8c02915 	stw	r3,164(sp)
2008c7d0:	d9802785 	stb	r6,158(sp)
2008c7d4:	8880080c 	andi	r2,r17,32
2008c7d8:	d8c02d17 	ldw	r3,180(sp)
2008c7dc:	10021526 	beq	r2,zero,2008d034 <___svfprintf_internal_r+0xc3c>
2008c7e0:	db002d17 	ldw	r12,180(sp)
2008c7e4:	18800117 	ldw	r2,4(r3)
2008c7e8:	1cc00017 	ldw	r19,0(r3)
2008c7ec:	63000204 	addi	r12,r12,8
2008c7f0:	db002d15 	stw	r12,180(sp)
2008c7f4:	1039883a 	mov	fp,r2
2008c7f8:	10021916 	blt	r2,zero,2008d060 <___svfprintf_internal_r+0xc68>
2008c7fc:	dd402783 	ldbu	r21,158(sp)
2008c800:	da403215 	stw	r9,200(sp)
2008c804:	00800044 	movi	r2,1
2008c808:	9f06b03a 	or	r3,r19,fp
2008c80c:	48000216 	blt	r9,zero,2008c818 <___svfprintf_internal_r+0x420>
2008c810:	013fdfc4 	movi	r4,-129
2008c814:	8922703a 	and	r17,r17,r4
2008c818:	1802461e 	bne	r3,zero,2008d134 <___svfprintf_internal_r+0xd3c>
2008c81c:	48035426 	beq	r9,zero,2008d570 <___svfprintf_internal_r+0x1178>
2008c820:	10803fcc 	andi	r2,r2,255
2008c824:	00c00044 	movi	r3,1
2008c828:	10c26726 	beq	r2,r3,2008d1c8 <___svfprintf_internal_r+0xdd0>
2008c82c:	00c00084 	movi	r3,2
2008c830:	10c2ea26 	beq	r2,r3,2008d3dc <___svfprintf_internal_r+0xfe4>
2008c834:	b007883a 	mov	r3,r22
2008c838:	9808d0fa 	srli	r4,r19,3
2008c83c:	e00a977a 	slli	r5,fp,29
2008c840:	e038d0fa 	srli	fp,fp,3
2008c844:	9cc001cc 	andi	r19,r19,7
2008c848:	98800c04 	addi	r2,r19,48
2008c84c:	18ffffc4 	addi	r3,r3,-1
2008c850:	2926b03a 	or	r19,r5,r4
2008c854:	18800005 	stb	r2,0(r3)
2008c858:	9f08b03a 	or	r4,r19,fp
2008c85c:	203ff61e 	bne	r4,zero,2008c838 <__flash_rwdata_start+0xfffedc64>
2008c860:	8900004c 	andi	r4,r17,1
2008c864:	d8c03115 	stw	r3,196(sp)
2008c868:	2002ea26 	beq	r4,zero,2008d414 <___svfprintf_internal_r+0x101c>
2008c86c:	10803fcc 	andi	r2,r2,255
2008c870:	1080201c 	xori	r2,r2,128
2008c874:	10bfe004 	addi	r2,r2,-128
2008c878:	01000c04 	movi	r4,48
2008c87c:	11057526 	beq	r2,r4,2008de54 <___svfprintf_internal_r+0x1a5c>
2008c880:	dac03117 	ldw	r11,196(sp)
2008c884:	193fffc5 	stb	r4,-1(r3)
2008c888:	5affffc4 	addi	r11,r11,-1
2008c88c:	dac03115 	stw	r11,196(sp)
2008c890:	b2e5c83a 	sub	r18,r22,r11
2008c894:	9005883a 	mov	r2,r18
2008c898:	9240010e 	bge	r18,r9,2008c8a0 <___svfprintf_internal_r+0x4a8>
2008c89c:	4805883a 	mov	r2,r9
2008c8a0:	d8802a15 	stw	r2,168(sp)
2008c8a4:	d8003415 	stw	zero,208(sp)
2008c8a8:	a8803fcc 	andi	r2,r21,255
2008c8ac:	1080201c 	xori	r2,r2,128
2008c8b0:	10bfe004 	addi	r2,r2,-128
2008c8b4:	10000326 	beq	r2,zero,2008c8c4 <___svfprintf_internal_r+0x4cc>
2008c8b8:	d8c02a17 	ldw	r3,168(sp)
2008c8bc:	18c00044 	addi	r3,r3,1
2008c8c0:	d8c02a15 	stw	r3,168(sp)
2008c8c4:	8ac0008c 	andi	r11,r17,2
2008c8c8:	dac02b15 	stw	r11,172(sp)
2008c8cc:	58000326 	beq	r11,zero,2008c8dc <___svfprintf_internal_r+0x4e4>
2008c8d0:	db002a17 	ldw	r12,168(sp)
2008c8d4:	63000084 	addi	r12,r12,2
2008c8d8:	db002a15 	stw	r12,168(sp)
2008c8dc:	88c0210c 	andi	r3,r17,132
2008c8e0:	d8c02c15 	stw	r3,176(sp)
2008c8e4:	1802111e 	bne	r3,zero,2008d12c <___svfprintf_internal_r+0xd34>
2008c8e8:	dac02e17 	ldw	r11,184(sp)
2008c8ec:	db002a17 	ldw	r12,168(sp)
2008c8f0:	5b39c83a 	sub	fp,r11,r12
2008c8f4:	07020d0e 	bge	zero,fp,2008d12c <___svfprintf_internal_r+0xd34>
2008c8f8:	02400404 	movi	r9,16
2008c8fc:	d8c02017 	ldw	r3,128(sp)
2008c900:	d8801f17 	ldw	r2,124(sp)
2008c904:	4f058c0e 	bge	r9,fp,2008df38 <___svfprintf_internal_r+0x1b40>
2008c908:	01400034 	movhi	r5,0
2008c90c:	e009883a 	mov	r4,fp
2008c910:	29419f84 	addi	r5,r5,1662
2008c914:	dc003c15 	stw	r16,240(sp)
2008c918:	9039883a 	mov	fp,r18
2008c91c:	d9403615 	stw	r5,216(sp)
2008c920:	8825883a 	mov	r18,r17
2008c924:	482b883a 	mov	r21,r9
2008c928:	04c001c4 	movi	r19,7
2008c92c:	dc002f17 	ldw	r16,188(sp)
2008c930:	2023883a 	mov	r17,r4
2008c934:	00000306 	br	2008c944 <___svfprintf_internal_r+0x54c>
2008c938:	8c7ffc04 	addi	r17,r17,-16
2008c93c:	42000204 	addi	r8,r8,8
2008c940:	ac40130e 	bge	r21,r17,2008c990 <___svfprintf_internal_r+0x598>
2008c944:	02c00034 	movhi	r11,0
2008c948:	18c00404 	addi	r3,r3,16
2008c94c:	10800044 	addi	r2,r2,1
2008c950:	5ac19f84 	addi	r11,r11,1662
2008c954:	42c00015 	stw	r11,0(r8)
2008c958:	45400115 	stw	r21,4(r8)
2008c95c:	d8c02015 	stw	r3,128(sp)
2008c960:	d8801f15 	stw	r2,124(sp)
2008c964:	98bff40e 	bge	r19,r2,2008c938 <__flash_rwdata_start+0xfffedd64>
2008c968:	8009883a 	mov	r4,r16
2008c96c:	b80b883a 	mov	r5,r23
2008c970:	b00d883a 	mov	r6,r22
2008c974:	0094fec0 	call	20094fec <__ssprint_r>
2008c978:	103f671e 	bne	r2,zero,2008c718 <__flash_rwdata_start+0xfffedb44>
2008c97c:	8c7ffc04 	addi	r17,r17,-16
2008c980:	d8c02017 	ldw	r3,128(sp)
2008c984:	d8801f17 	ldw	r2,124(sp)
2008c988:	da000404 	addi	r8,sp,16
2008c98c:	ac7fed16 	blt	r21,r17,2008c944 <__flash_rwdata_start+0xfffedd70>
2008c990:	dc003c17 	ldw	r16,240(sp)
2008c994:	8809883a 	mov	r4,r17
2008c998:	9023883a 	mov	r17,r18
2008c99c:	e025883a 	mov	r18,fp
2008c9a0:	2039883a 	mov	fp,r4
2008c9a4:	db003617 	ldw	r12,216(sp)
2008c9a8:	e0c7883a 	add	r3,fp,r3
2008c9ac:	10800044 	addi	r2,r2,1
2008c9b0:	43000015 	stw	r12,0(r8)
2008c9b4:	47000115 	stw	fp,4(r8)
2008c9b8:	d8c02015 	stw	r3,128(sp)
2008c9bc:	d8801f15 	stw	r2,124(sp)
2008c9c0:	010001c4 	movi	r4,7
2008c9c4:	20834416 	blt	r4,r2,2008d6d8 <___svfprintf_internal_r+0x12e0>
2008c9c8:	d8802787 	ldb	r2,158(sp)
2008c9cc:	42000204 	addi	r8,r8,8
2008c9d0:	10000c26 	beq	r2,zero,2008ca04 <___svfprintf_internal_r+0x60c>
2008c9d4:	d8801f17 	ldw	r2,124(sp)
2008c9d8:	d9002784 	addi	r4,sp,158
2008c9dc:	18c00044 	addi	r3,r3,1
2008c9e0:	10800044 	addi	r2,r2,1
2008c9e4:	41000015 	stw	r4,0(r8)
2008c9e8:	01000044 	movi	r4,1
2008c9ec:	41000115 	stw	r4,4(r8)
2008c9f0:	d8c02015 	stw	r3,128(sp)
2008c9f4:	d8801f15 	stw	r2,124(sp)
2008c9f8:	010001c4 	movi	r4,7
2008c9fc:	2082f616 	blt	r4,r2,2008d5d8 <___svfprintf_internal_r+0x11e0>
2008ca00:	42000204 	addi	r8,r8,8
2008ca04:	dac02b17 	ldw	r11,172(sp)
2008ca08:	58000c26 	beq	r11,zero,2008ca3c <___svfprintf_internal_r+0x644>
2008ca0c:	d8801f17 	ldw	r2,124(sp)
2008ca10:	d9002704 	addi	r4,sp,156
2008ca14:	18c00084 	addi	r3,r3,2
2008ca18:	10800044 	addi	r2,r2,1
2008ca1c:	41000015 	stw	r4,0(r8)
2008ca20:	01000084 	movi	r4,2
2008ca24:	41000115 	stw	r4,4(r8)
2008ca28:	d8c02015 	stw	r3,128(sp)
2008ca2c:	d8801f15 	stw	r2,124(sp)
2008ca30:	010001c4 	movi	r4,7
2008ca34:	2082e016 	blt	r4,r2,2008d5b8 <___svfprintf_internal_r+0x11c0>
2008ca38:	42000204 	addi	r8,r8,8
2008ca3c:	db002c17 	ldw	r12,176(sp)
2008ca40:	00802004 	movi	r2,128
2008ca44:	60822f26 	beq	r12,r2,2008d304 <___svfprintf_internal_r+0xf0c>
2008ca48:	db003217 	ldw	r12,200(sp)
2008ca4c:	64abc83a 	sub	r21,r12,r18
2008ca50:	0540310e 	bge	zero,r21,2008cb18 <___svfprintf_internal_r+0x720>
2008ca54:	07000404 	movi	fp,16
2008ca58:	d8801f17 	ldw	r2,124(sp)
2008ca5c:	e544270e 	bge	fp,r21,2008dafc <___svfprintf_internal_r+0x1704>
2008ca60:	01400034 	movhi	r5,0
2008ca64:	a809883a 	mov	r4,r21
2008ca68:	29419b84 	addi	r5,r5,1646
2008ca6c:	dc002c15 	stw	r16,176(sp)
2008ca70:	902b883a 	mov	r21,r18
2008ca74:	d9402b15 	stw	r5,172(sp)
2008ca78:	8825883a 	mov	r18,r17
2008ca7c:	04c001c4 	movi	r19,7
2008ca80:	dc002f17 	ldw	r16,188(sp)
2008ca84:	2023883a 	mov	r17,r4
2008ca88:	00000306 	br	2008ca98 <___svfprintf_internal_r+0x6a0>
2008ca8c:	8c7ffc04 	addi	r17,r17,-16
2008ca90:	42000204 	addi	r8,r8,8
2008ca94:	e440110e 	bge	fp,r17,2008cadc <___svfprintf_internal_r+0x6e4>
2008ca98:	18c00404 	addi	r3,r3,16
2008ca9c:	10800044 	addi	r2,r2,1
2008caa0:	45000015 	stw	r20,0(r8)
2008caa4:	47000115 	stw	fp,4(r8)
2008caa8:	d8c02015 	stw	r3,128(sp)
2008caac:	d8801f15 	stw	r2,124(sp)
2008cab0:	98bff60e 	bge	r19,r2,2008ca8c <__flash_rwdata_start+0xfffedeb8>
2008cab4:	8009883a 	mov	r4,r16
2008cab8:	b80b883a 	mov	r5,r23
2008cabc:	b00d883a 	mov	r6,r22
2008cac0:	0094fec0 	call	20094fec <__ssprint_r>
2008cac4:	103f141e 	bne	r2,zero,2008c718 <__flash_rwdata_start+0xfffedb44>
2008cac8:	8c7ffc04 	addi	r17,r17,-16
2008cacc:	d8c02017 	ldw	r3,128(sp)
2008cad0:	d8801f17 	ldw	r2,124(sp)
2008cad4:	da000404 	addi	r8,sp,16
2008cad8:	e47fef16 	blt	fp,r17,2008ca98 <__flash_rwdata_start+0xfffedec4>
2008cadc:	dc002c17 	ldw	r16,176(sp)
2008cae0:	8809883a 	mov	r4,r17
2008cae4:	9023883a 	mov	r17,r18
2008cae8:	a825883a 	mov	r18,r21
2008caec:	202b883a 	mov	r21,r4
2008caf0:	dac02b17 	ldw	r11,172(sp)
2008caf4:	1d47883a 	add	r3,r3,r21
2008caf8:	10800044 	addi	r2,r2,1
2008cafc:	42c00015 	stw	r11,0(r8)
2008cb00:	45400115 	stw	r21,4(r8)
2008cb04:	d8c02015 	stw	r3,128(sp)
2008cb08:	d8801f15 	stw	r2,124(sp)
2008cb0c:	010001c4 	movi	r4,7
2008cb10:	2082a116 	blt	r4,r2,2008d598 <___svfprintf_internal_r+0x11a0>
2008cb14:	42000204 	addi	r8,r8,8
2008cb18:	8880400c 	andi	r2,r17,256
2008cb1c:	1001b01e 	bne	r2,zero,2008d1e0 <___svfprintf_internal_r+0xde8>
2008cb20:	d8801f17 	ldw	r2,124(sp)
2008cb24:	db003117 	ldw	r12,196(sp)
2008cb28:	1c87883a 	add	r3,r3,r18
2008cb2c:	10800044 	addi	r2,r2,1
2008cb30:	43000015 	stw	r12,0(r8)
2008cb34:	44800115 	stw	r18,4(r8)
2008cb38:	d8c02015 	stw	r3,128(sp)
2008cb3c:	d8801f15 	stw	r2,124(sp)
2008cb40:	010001c4 	movi	r4,7
2008cb44:	20828216 	blt	r4,r2,2008d550 <___svfprintf_internal_r+0x1158>
2008cb48:	42000204 	addi	r8,r8,8
2008cb4c:	8c40010c 	andi	r17,r17,4
2008cb50:	88003226 	beq	r17,zero,2008cc1c <___svfprintf_internal_r+0x824>
2008cb54:	db002e17 	ldw	r12,184(sp)
2008cb58:	dac02a17 	ldw	r11,168(sp)
2008cb5c:	62e1c83a 	sub	r16,r12,r11
2008cb60:	04002e0e 	bge	zero,r16,2008cc1c <___svfprintf_internal_r+0x824>
2008cb64:	04400404 	movi	r17,16
2008cb68:	d8801f17 	ldw	r2,124(sp)
2008cb6c:	8c05330e 	bge	r17,r16,2008e03c <___svfprintf_internal_r+0x1c44>
2008cb70:	01000034 	movhi	r4,0
2008cb74:	21019f84 	addi	r4,r4,1662
2008cb78:	d9003615 	stw	r4,216(sp)
2008cb7c:	048001c4 	movi	r18,7
2008cb80:	dcc02f17 	ldw	r19,188(sp)
2008cb84:	00000306 	br	2008cb94 <___svfprintf_internal_r+0x79c>
2008cb88:	843ffc04 	addi	r16,r16,-16
2008cb8c:	42000204 	addi	r8,r8,8
2008cb90:	8c00130e 	bge	r17,r16,2008cbe0 <___svfprintf_internal_r+0x7e8>
2008cb94:	01400034 	movhi	r5,0
2008cb98:	18c00404 	addi	r3,r3,16
2008cb9c:	10800044 	addi	r2,r2,1
2008cba0:	29419f84 	addi	r5,r5,1662
2008cba4:	41400015 	stw	r5,0(r8)
2008cba8:	44400115 	stw	r17,4(r8)
2008cbac:	d8c02015 	stw	r3,128(sp)
2008cbb0:	d8801f15 	stw	r2,124(sp)
2008cbb4:	90bff40e 	bge	r18,r2,2008cb88 <__flash_rwdata_start+0xfffedfb4>
2008cbb8:	9809883a 	mov	r4,r19
2008cbbc:	b80b883a 	mov	r5,r23
2008cbc0:	b00d883a 	mov	r6,r22
2008cbc4:	0094fec0 	call	20094fec <__ssprint_r>
2008cbc8:	103ed31e 	bne	r2,zero,2008c718 <__flash_rwdata_start+0xfffedb44>
2008cbcc:	843ffc04 	addi	r16,r16,-16
2008cbd0:	d8c02017 	ldw	r3,128(sp)
2008cbd4:	d8801f17 	ldw	r2,124(sp)
2008cbd8:	da000404 	addi	r8,sp,16
2008cbdc:	8c3fed16 	blt	r17,r16,2008cb94 <__flash_rwdata_start+0xfffedfc0>
2008cbe0:	dac03617 	ldw	r11,216(sp)
2008cbe4:	1c07883a 	add	r3,r3,r16
2008cbe8:	10800044 	addi	r2,r2,1
2008cbec:	42c00015 	stw	r11,0(r8)
2008cbf0:	44000115 	stw	r16,4(r8)
2008cbf4:	d8c02015 	stw	r3,128(sp)
2008cbf8:	d8801f15 	stw	r2,124(sp)
2008cbfc:	010001c4 	movi	r4,7
2008cc00:	2080060e 	bge	r4,r2,2008cc1c <___svfprintf_internal_r+0x824>
2008cc04:	d9002f17 	ldw	r4,188(sp)
2008cc08:	b80b883a 	mov	r5,r23
2008cc0c:	b00d883a 	mov	r6,r22
2008cc10:	0094fec0 	call	20094fec <__ssprint_r>
2008cc14:	103ec01e 	bne	r2,zero,2008c718 <__flash_rwdata_start+0xfffedb44>
2008cc18:	d8c02017 	ldw	r3,128(sp)
2008cc1c:	d8802a17 	ldw	r2,168(sp)
2008cc20:	db002e17 	ldw	r12,184(sp)
2008cc24:	1300010e 	bge	r2,r12,2008cc2c <___svfprintf_internal_r+0x834>
2008cc28:	6005883a 	mov	r2,r12
2008cc2c:	dac03017 	ldw	r11,192(sp)
2008cc30:	5897883a 	add	r11,r11,r2
2008cc34:	dac03015 	stw	r11,192(sp)
2008cc38:	1802331e 	bne	r3,zero,2008d508 <___svfprintf_internal_r+0x1110>
2008cc3c:	d8001f15 	stw	zero,124(sp)
2008cc40:	da000404 	addi	r8,sp,16
2008cc44:	003e1806 	br	2008c4a8 <__flash_rwdata_start+0xfffed8d4>
2008cc48:	db002d17 	ldw	r12,180(sp)
2008cc4c:	dac02d17 	ldw	r11,180(sp)
2008cc50:	d8c02915 	stw	r3,164(sp)
2008cc54:	63000017 	ldw	r12,0(r12)
2008cc58:	5ac00117 	ldw	r11,4(r11)
2008cc5c:	d9802785 	stb	r6,158(sp)
2008cc60:	6009883a 	mov	r4,r12
2008cc64:	580b883a 	mov	r5,r11
2008cc68:	db003715 	stw	r12,220(sp)
2008cc6c:	da004015 	stw	r8,256(sp)
2008cc70:	da403f15 	stw	r9,252(sp)
2008cc74:	dac03815 	stw	r11,224(sp)
2008cc78:	0094cd80 	call	20094cd8 <__fpclassifyd>
2008cc7c:	db002d17 	ldw	r12,180(sp)
2008cc80:	04800044 	movi	r18,1
2008cc84:	da004017 	ldw	r8,256(sp)
2008cc88:	64c00204 	addi	r19,r12,8
2008cc8c:	da403f17 	ldw	r9,252(sp)
2008cc90:	d9003717 	ldw	r4,220(sp)
2008cc94:	d9403817 	ldw	r5,224(sp)
2008cc98:	1483561e 	bne	r2,r18,2008d9f4 <___svfprintf_internal_r+0x15fc>
2008cc9c:	000d883a 	mov	r6,zero
2008cca0:	000f883a 	mov	r7,zero
2008cca4:	0098c600 	call	20098c60 <__ledf2>
2008cca8:	da004017 	ldw	r8,256(sp)
2008ccac:	1004ee16 	blt	r2,zero,2008e068 <___svfprintf_internal_r+0x1c70>
2008ccb0:	dd402783 	ldbu	r21,158(sp)
2008ccb4:	008011c4 	movi	r2,71
2008ccb8:	1404440e 	bge	r2,r16,2008ddcc <___svfprintf_internal_r+0x19d4>
2008ccbc:	00c00034 	movhi	r3,0
2008ccc0:	18c18c04 	addi	r3,r3,1584
2008ccc4:	d8c03115 	stw	r3,196(sp)
2008ccc8:	02c000c4 	movi	r11,3
2008cccc:	00bfdfc4 	movi	r2,-129
2008ccd0:	dac02a15 	stw	r11,168(sp)
2008ccd4:	88a2703a 	and	r17,r17,r2
2008ccd8:	dcc02d15 	stw	r19,180(sp)
2008ccdc:	5825883a 	mov	r18,r11
2008cce0:	d8003215 	stw	zero,200(sp)
2008cce4:	d8003415 	stw	zero,208(sp)
2008cce8:	003eef06 	br	2008c8a8 <__flash_rwdata_start+0xfffedcd4>
2008ccec:	8c400214 	ori	r17,r17,8
2008ccf0:	1805883a 	mov	r2,r3
2008ccf4:	1c000007 	ldb	r16,0(r3)
2008ccf8:	003e1506 	br	2008c550 <__flash_rwdata_start+0xfffed97c>
2008ccfc:	8c400414 	ori	r17,r17,16
2008cd00:	d8c02915 	stw	r3,164(sp)
2008cd04:	88c0080c 	andi	r3,r17,32
2008cd08:	d8802d17 	ldw	r2,180(sp)
2008cd0c:	18005526 	beq	r3,zero,2008ce64 <___svfprintf_internal_r+0xa6c>
2008cd10:	dac02d17 	ldw	r11,180(sp)
2008cd14:	14c00017 	ldw	r19,0(r2)
2008cd18:	17000117 	ldw	fp,4(r2)
2008cd1c:	5ac00204 	addi	r11,r11,8
2008cd20:	dac02d15 	stw	r11,180(sp)
2008cd24:	00800044 	movi	r2,1
2008cd28:	9f06b03a 	or	r3,r19,fp
2008cd2c:	d8002785 	stb	zero,158(sp)
2008cd30:	da403215 	stw	r9,200(sp)
2008cd34:	002b883a 	mov	r21,zero
2008cd38:	003eb406 	br	2008c80c <__flash_rwdata_start+0xfffedc38>
2008cd3c:	03000034 	movhi	r12,0
2008cd40:	63018f04 	addi	r12,r12,1596
2008cd44:	d8c02915 	stw	r3,164(sp)
2008cd48:	d9802785 	stb	r6,158(sp)
2008cd4c:	db003b15 	stw	r12,236(sp)
2008cd50:	88c0080c 	andi	r3,r17,32
2008cd54:	d8802d17 	ldw	r2,180(sp)
2008cd58:	18005626 	beq	r3,zero,2008ceb4 <___svfprintf_internal_r+0xabc>
2008cd5c:	dac02d17 	ldw	r11,180(sp)
2008cd60:	14c00017 	ldw	r19,0(r2)
2008cd64:	17000117 	ldw	fp,4(r2)
2008cd68:	5ac00204 	addi	r11,r11,8
2008cd6c:	dac02d15 	stw	r11,180(sp)
2008cd70:	8880004c 	andi	r2,r17,1
2008cd74:	10029326 	beq	r2,zero,2008d7c4 <___svfprintf_internal_r+0x13cc>
2008cd78:	9f06b03a 	or	r3,r19,fp
2008cd7c:	18033526 	beq	r3,zero,2008da54 <___svfprintf_internal_r+0x165c>
2008cd80:	00800c04 	movi	r2,48
2008cd84:	d8802705 	stb	r2,156(sp)
2008cd88:	dc002745 	stb	r16,157(sp)
2008cd8c:	8c400094 	ori	r17,r17,2
2008cd90:	00800084 	movi	r2,2
2008cd94:	003fe506 	br	2008cd2c <__flash_rwdata_start+0xfffee158>
2008cd98:	1805883a 	mov	r2,r3
2008cd9c:	d8002e15 	stw	zero,184(sp)
2008cda0:	82fff404 	addi	r11,r16,-48
2008cda4:	0019883a 	mov	r12,zero
2008cda8:	14000007 	ldb	r16,0(r2)
2008cdac:	630002a4 	muli	r12,r12,10
2008cdb0:	18c00044 	addi	r3,r3,1
2008cdb4:	1805883a 	mov	r2,r3
2008cdb8:	62d9883a 	add	r12,r12,r11
2008cdbc:	82fff404 	addi	r11,r16,-48
2008cdc0:	2afff92e 	bgeu	r5,r11,2008cda8 <__flash_rwdata_start+0xfffee1d4>
2008cdc4:	db002e15 	stw	r12,184(sp)
2008cdc8:	003de206 	br	2008c554 <__flash_rwdata_start+0xfffed980>
2008cdcc:	8c400814 	ori	r17,r17,32
2008cdd0:	1805883a 	mov	r2,r3
2008cdd4:	1c000007 	ldb	r16,0(r3)
2008cdd8:	003ddd06 	br	2008c550 <__flash_rwdata_start+0xfffed97c>
2008cddc:	dac02d17 	ldw	r11,180(sp)
2008cde0:	db002d17 	ldw	r12,180(sp)
2008cde4:	d8c02915 	stw	r3,164(sp)
2008cde8:	5ac00017 	ldw	r11,0(r11)
2008cdec:	d8002785 	stb	zero,158(sp)
2008cdf0:	64c00104 	addi	r19,r12,4
2008cdf4:	dac03115 	stw	r11,196(sp)
2008cdf8:	58048126 	beq	r11,zero,2008e000 <___svfprintf_internal_r+0x1c08>
2008cdfc:	d9003117 	ldw	r4,196(sp)
2008ce00:	48041716 	blt	r9,zero,2008de60 <___svfprintf_internal_r+0x1a68>
2008ce04:	480d883a 	mov	r6,r9
2008ce08:	000b883a 	mov	r5,zero
2008ce0c:	da004015 	stw	r8,256(sp)
2008ce10:	da403f15 	stw	r9,252(sp)
2008ce14:	00934200 	call	20093420 <memchr>
2008ce18:	da004017 	ldw	r8,256(sp)
2008ce1c:	da403f17 	ldw	r9,252(sp)
2008ce20:	1004db26 	beq	r2,zero,2008e190 <___svfprintf_internal_r+0x1d98>
2008ce24:	d8c03117 	ldw	r3,196(sp)
2008ce28:	10e5c83a 	sub	r18,r2,r3
2008ce2c:	4c80010e 	bge	r9,r18,2008ce34 <___svfprintf_internal_r+0xa3c>
2008ce30:	4825883a 	mov	r18,r9
2008ce34:	9005883a 	mov	r2,r18
2008ce38:	90040e16 	blt	r18,zero,2008de74 <___svfprintf_internal_r+0x1a7c>
2008ce3c:	dd402783 	ldbu	r21,158(sp)
2008ce40:	d8802a15 	stw	r2,168(sp)
2008ce44:	dcc02d15 	stw	r19,180(sp)
2008ce48:	d8003215 	stw	zero,200(sp)
2008ce4c:	d8003415 	stw	zero,208(sp)
2008ce50:	003e9506 	br	2008c8a8 <__flash_rwdata_start+0xfffedcd4>
2008ce54:	d8c02915 	stw	r3,164(sp)
2008ce58:	88c0080c 	andi	r3,r17,32
2008ce5c:	d8802d17 	ldw	r2,180(sp)
2008ce60:	183fab1e 	bne	r3,zero,2008cd10 <__flash_rwdata_start+0xfffee13c>
2008ce64:	88c0040c 	andi	r3,r17,16
2008ce68:	1802681e 	bne	r3,zero,2008d80c <___svfprintf_internal_r+0x1414>
2008ce6c:	88c0100c 	andi	r3,r17,64
2008ce70:	18026626 	beq	r3,zero,2008d80c <___svfprintf_internal_r+0x1414>
2008ce74:	dac02d17 	ldw	r11,180(sp)
2008ce78:	14c0000b 	ldhu	r19,0(r2)
2008ce7c:	0039883a 	mov	fp,zero
2008ce80:	5ac00104 	addi	r11,r11,4
2008ce84:	dac02d15 	stw	r11,180(sp)
2008ce88:	00800044 	movi	r2,1
2008ce8c:	9807883a 	mov	r3,r19
2008ce90:	003fa606 	br	2008cd2c <__flash_rwdata_start+0xfffee158>
2008ce94:	00800034 	movhi	r2,0
2008ce98:	10819404 	addi	r2,r2,1616
2008ce9c:	d8c02915 	stw	r3,164(sp)
2008cea0:	d8803b15 	stw	r2,236(sp)
2008cea4:	d9802785 	stb	r6,158(sp)
2008cea8:	88c0080c 	andi	r3,r17,32
2008ceac:	d8802d17 	ldw	r2,180(sp)
2008ceb0:	183faa1e 	bne	r3,zero,2008cd5c <__flash_rwdata_start+0xfffee188>
2008ceb4:	88c0040c 	andi	r3,r17,16
2008ceb8:	1802e826 	beq	r3,zero,2008da5c <___svfprintf_internal_r+0x1664>
2008cebc:	db002d17 	ldw	r12,180(sp)
2008cec0:	14c00017 	ldw	r19,0(r2)
2008cec4:	0039883a 	mov	fp,zero
2008cec8:	63000104 	addi	r12,r12,4
2008cecc:	db002d15 	stw	r12,180(sp)
2008ced0:	003fa706 	br	2008cd70 <__flash_rwdata_start+0xfffee19c>
2008ced4:	30803fcc 	andi	r2,r6,255
2008ced8:	1080201c 	xori	r2,r2,128
2008cedc:	10bfe004 	addi	r2,r2,-128
2008cee0:	1002d91e 	bne	r2,zero,2008da48 <___svfprintf_internal_r+0x1650>
2008cee4:	1805883a 	mov	r2,r3
2008cee8:	01800804 	movi	r6,32
2008ceec:	1c000007 	ldb	r16,0(r3)
2008cef0:	003d9706 	br	2008c550 <__flash_rwdata_start+0xfffed97c>
2008cef4:	8c400054 	ori	r17,r17,1
2008cef8:	1805883a 	mov	r2,r3
2008cefc:	1c000007 	ldb	r16,0(r3)
2008cf00:	003d9306 	br	2008c550 <__flash_rwdata_start+0xfffed97c>
2008cf04:	dac02d17 	ldw	r11,180(sp)
2008cf08:	db002d17 	ldw	r12,180(sp)
2008cf0c:	5ac00017 	ldw	r11,0(r11)
2008cf10:	dac02e15 	stw	r11,184(sp)
2008cf14:	62c00104 	addi	r11,r12,4
2008cf18:	db002e17 	ldw	r12,184(sp)
2008cf1c:	60033e16 	blt	r12,zero,2008dc18 <___svfprintf_internal_r+0x1820>
2008cf20:	dac02d15 	stw	r11,180(sp)
2008cf24:	1805883a 	mov	r2,r3
2008cf28:	1c000007 	ldb	r16,0(r3)
2008cf2c:	003d8806 	br	2008c550 <__flash_rwdata_start+0xfffed97c>
2008cf30:	1805883a 	mov	r2,r3
2008cf34:	01800ac4 	movi	r6,43
2008cf38:	1c000007 	ldb	r16,0(r3)
2008cf3c:	003d8406 	br	2008c550 <__flash_rwdata_start+0xfffed97c>
2008cf40:	8c401014 	ori	r17,r17,64
2008cf44:	1805883a 	mov	r2,r3
2008cf48:	1c000007 	ldb	r16,0(r3)
2008cf4c:	003d8006 	br	2008c550 <__flash_rwdata_start+0xfffed97c>
2008cf50:	1c000007 	ldb	r16,0(r3)
2008cf54:	81c33626 	beq	r16,r7,2008dc30 <___svfprintf_internal_r+0x1838>
2008cf58:	8c400414 	ori	r17,r17,16
2008cf5c:	1805883a 	mov	r2,r3
2008cf60:	003d7b06 	br	2008c550 <__flash_rwdata_start+0xfffed97c>
2008cf64:	d8c02915 	stw	r3,164(sp)
2008cf68:	d9802785 	stb	r6,158(sp)
2008cf6c:	8880080c 	andi	r2,r17,32
2008cf70:	1002c226 	beq	r2,zero,2008da7c <___svfprintf_internal_r+0x1684>
2008cf74:	db002d17 	ldw	r12,180(sp)
2008cf78:	dac03017 	ldw	r11,192(sp)
2008cf7c:	60800017 	ldw	r2,0(r12)
2008cf80:	5807d7fa 	srai	r3,r11,31
2008cf84:	63000104 	addi	r12,r12,4
2008cf88:	db002d15 	stw	r12,180(sp)
2008cf8c:	12c00015 	stw	r11,0(r2)
2008cf90:	10c00115 	stw	r3,4(r2)
2008cf94:	003d4406 	br	2008c4a8 <__flash_rwdata_start+0xfffed8d4>
2008cf98:	db002d17 	ldw	r12,180(sp)
2008cf9c:	00800c04 	movi	r2,48
2008cfa0:	d8802705 	stb	r2,156(sp)
2008cfa4:	64c00017 	ldw	r19,0(r12)
2008cfa8:	00801e04 	movi	r2,120
2008cfac:	d8802745 	stb	r2,157(sp)
2008cfb0:	00800034 	movhi	r2,0
2008cfb4:	10819404 	addi	r2,r2,1616
2008cfb8:	63000104 	addi	r12,r12,4
2008cfbc:	d8c02915 	stw	r3,164(sp)
2008cfc0:	d8803b15 	stw	r2,236(sp)
2008cfc4:	0039883a 	mov	fp,zero
2008cfc8:	8c400094 	ori	r17,r17,2
2008cfcc:	db002d15 	stw	r12,180(sp)
2008cfd0:	00800084 	movi	r2,2
2008cfd4:	04001e04 	movi	r16,120
2008cfd8:	9807883a 	mov	r3,r19
2008cfdc:	003f5306 	br	2008cd2c <__flash_rwdata_start+0xfffee158>
2008cfe0:	db002d17 	ldw	r12,180(sp)
2008cfe4:	d8c02915 	stw	r3,164(sp)
2008cfe8:	dac01404 	addi	r11,sp,80
2008cfec:	60800017 	ldw	r2,0(r12)
2008cff0:	00c00044 	movi	r3,1
2008cff4:	63000104 	addi	r12,r12,4
2008cff8:	d8801405 	stb	r2,80(sp)
2008cffc:	d8c02a15 	stw	r3,168(sp)
2008d000:	d8002785 	stb	zero,158(sp)
2008d004:	db002d15 	stw	r12,180(sp)
2008d008:	1825883a 	mov	r18,r3
2008d00c:	d8003215 	stw	zero,200(sp)
2008d010:	d8003415 	stw	zero,208(sp)
2008d014:	dac03115 	stw	r11,196(sp)
2008d018:	0005883a 	mov	r2,zero
2008d01c:	003e2906 	br	2008c8c4 <__flash_rwdata_start+0xfffedcf0>
2008d020:	d8c02915 	stw	r3,164(sp)
2008d024:	d9802785 	stb	r6,158(sp)
2008d028:	8880080c 	andi	r2,r17,32
2008d02c:	d8c02d17 	ldw	r3,180(sp)
2008d030:	103deb1e 	bne	r2,zero,2008c7e0 <__flash_rwdata_start+0xfffedc0c>
2008d034:	8880040c 	andi	r2,r17,16
2008d038:	1001e51e 	bne	r2,zero,2008d7d0 <___svfprintf_internal_r+0x13d8>
2008d03c:	8880100c 	andi	r2,r17,64
2008d040:	1001e326 	beq	r2,zero,2008d7d0 <___svfprintf_internal_r+0x13d8>
2008d044:	1cc0000f 	ldh	r19,0(r3)
2008d048:	db002d17 	ldw	r12,180(sp)
2008d04c:	9839d7fa 	srai	fp,r19,31
2008d050:	63000104 	addi	r12,r12,4
2008d054:	db002d15 	stw	r12,180(sp)
2008d058:	e005883a 	mov	r2,fp
2008d05c:	103de70e 	bge	r2,zero,2008c7fc <__flash_rwdata_start+0xfffedc28>
2008d060:	04e7c83a 	sub	r19,zero,r19
2008d064:	9804c03a 	cmpne	r2,r19,zero
2008d068:	0739c83a 	sub	fp,zero,fp
2008d06c:	e0b9c83a 	sub	fp,fp,r2
2008d070:	05400b44 	movi	r21,45
2008d074:	dd402785 	stb	r21,158(sp)
2008d078:	da403215 	stw	r9,200(sp)
2008d07c:	00800044 	movi	r2,1
2008d080:	9f06b03a 	or	r3,r19,fp
2008d084:	003de106 	br	2008c80c <__flash_rwdata_start+0xfffedc38>
2008d088:	8c400414 	ori	r17,r17,16
2008d08c:	d8c02915 	stw	r3,164(sp)
2008d090:	8880080c 	andi	r2,r17,32
2008d094:	10000b26 	beq	r2,zero,2008d0c4 <___svfprintf_internal_r+0xccc>
2008d098:	db002d17 	ldw	r12,180(sp)
2008d09c:	0005883a 	mov	r2,zero
2008d0a0:	64c00017 	ldw	r19,0(r12)
2008d0a4:	67000117 	ldw	fp,4(r12)
2008d0a8:	63000204 	addi	r12,r12,8
2008d0ac:	db002d15 	stw	r12,180(sp)
2008d0b0:	9f06b03a 	or	r3,r19,fp
2008d0b4:	003f1d06 	br	2008cd2c <__flash_rwdata_start+0xfffee158>
2008d0b8:	d8c02915 	stw	r3,164(sp)
2008d0bc:	8880080c 	andi	r2,r17,32
2008d0c0:	103ff51e 	bne	r2,zero,2008d098 <__flash_rwdata_start+0xfffee4c4>
2008d0c4:	8880040c 	andi	r2,r17,16
2008d0c8:	1001c81e 	bne	r2,zero,2008d7ec <___svfprintf_internal_r+0x13f4>
2008d0cc:	8880100c 	andi	r2,r17,64
2008d0d0:	1001c626 	beq	r2,zero,2008d7ec <___svfprintf_internal_r+0x13f4>
2008d0d4:	db002d17 	ldw	r12,180(sp)
2008d0d8:	0039883a 	mov	fp,zero
2008d0dc:	0005883a 	mov	r2,zero
2008d0e0:	64c0000b 	ldhu	r19,0(r12)
2008d0e4:	63000104 	addi	r12,r12,4
2008d0e8:	db002d15 	stw	r12,180(sp)
2008d0ec:	9807883a 	mov	r3,r19
2008d0f0:	003f0e06 	br	2008cd2c <__flash_rwdata_start+0xfffee158>
2008d0f4:	d8c02915 	stw	r3,164(sp)
2008d0f8:	d9802785 	stb	r6,158(sp)
2008d0fc:	803d8026 	beq	r16,zero,2008c700 <__flash_rwdata_start+0xfffedb2c>
2008d100:	02c00044 	movi	r11,1
2008d104:	db001404 	addi	r12,sp,80
2008d108:	dac02a15 	stw	r11,168(sp)
2008d10c:	dc001405 	stb	r16,80(sp)
2008d110:	d8002785 	stb	zero,158(sp)
2008d114:	5825883a 	mov	r18,r11
2008d118:	d8003215 	stw	zero,200(sp)
2008d11c:	d8003415 	stw	zero,208(sp)
2008d120:	db003115 	stw	r12,196(sp)
2008d124:	0005883a 	mov	r2,zero
2008d128:	003de606 	br	2008c8c4 <__flash_rwdata_start+0xfffedcf0>
2008d12c:	d8c02017 	ldw	r3,128(sp)
2008d130:	003e2706 	br	2008c9d0 <__flash_rwdata_start+0xfffeddfc>
2008d134:	10803fcc 	andi	r2,r2,255
2008d138:	00c00044 	movi	r3,1
2008d13c:	10fdbb1e 	bne	r2,r3,2008c82c <__flash_rwdata_start+0xfffedc58>
2008d140:	e000021e 	bne	fp,zero,2008d14c <___svfprintf_internal_r+0xd54>
2008d144:	00800244 	movi	r2,9
2008d148:	14c01f2e 	bgeu	r2,r19,2008d1c8 <___svfprintf_internal_r+0xdd0>
2008d14c:	dc002a15 	stw	r16,168(sp)
2008d150:	dc402b15 	stw	r17,172(sp)
2008d154:	9821883a 	mov	r16,r19
2008d158:	e023883a 	mov	r17,fp
2008d15c:	b025883a 	mov	r18,r22
2008d160:	4827883a 	mov	r19,r9
2008d164:	4039883a 	mov	fp,r8
2008d168:	8009883a 	mov	r4,r16
2008d16c:	880b883a 	mov	r5,r17
2008d170:	01800284 	movi	r6,10
2008d174:	000f883a 	mov	r7,zero
2008d178:	009856c0 	call	2009856c <__umoddi3>
2008d17c:	10800c04 	addi	r2,r2,48
2008d180:	94bfffc4 	addi	r18,r18,-1
2008d184:	8009883a 	mov	r4,r16
2008d188:	880b883a 	mov	r5,r17
2008d18c:	01800284 	movi	r6,10
2008d190:	000f883a 	mov	r7,zero
2008d194:	90800005 	stb	r2,0(r18)
2008d198:	0097fac0 	call	20097fac <__udivdi3>
2008d19c:	1021883a 	mov	r16,r2
2008d1a0:	10c4b03a 	or	r2,r2,r3
2008d1a4:	1823883a 	mov	r17,r3
2008d1a8:	103fef1e 	bne	r2,zero,2008d168 <__flash_rwdata_start+0xfffee594>
2008d1ac:	dc803115 	stw	r18,196(sp)
2008d1b0:	dc002a17 	ldw	r16,168(sp)
2008d1b4:	dc402b17 	ldw	r17,172(sp)
2008d1b8:	9813883a 	mov	r9,r19
2008d1bc:	e011883a 	mov	r8,fp
2008d1c0:	b4a5c83a 	sub	r18,r22,r18
2008d1c4:	003db306 	br	2008c894 <__flash_rwdata_start+0xfffedcc0>
2008d1c8:	9cc00c04 	addi	r19,r19,48
2008d1cc:	db001dc4 	addi	r12,sp,119
2008d1d0:	dcc01dc5 	stb	r19,119(sp)
2008d1d4:	dc803d17 	ldw	r18,244(sp)
2008d1d8:	db003115 	stw	r12,196(sp)
2008d1dc:	003dad06 	br	2008c894 <__flash_rwdata_start+0xfffedcc0>
2008d1e0:	00801944 	movi	r2,101
2008d1e4:	14008d0e 	bge	r2,r16,2008d41c <___svfprintf_internal_r+0x1024>
2008d1e8:	d9003717 	ldw	r4,220(sp)
2008d1ec:	d9403817 	ldw	r5,224(sp)
2008d1f0:	000d883a 	mov	r6,zero
2008d1f4:	000f883a 	mov	r7,zero
2008d1f8:	d8c03e15 	stw	r3,248(sp)
2008d1fc:	da004015 	stw	r8,256(sp)
2008d200:	0098afc0 	call	20098afc <__eqdf2>
2008d204:	d8c03e17 	ldw	r3,248(sp)
2008d208:	da004017 	ldw	r8,256(sp)
2008d20c:	1000fd1e 	bne	r2,zero,2008d604 <___svfprintf_internal_r+0x120c>
2008d210:	d8801f17 	ldw	r2,124(sp)
2008d214:	01000034 	movhi	r4,0
2008d218:	21019b04 	addi	r4,r4,1644
2008d21c:	18c00044 	addi	r3,r3,1
2008d220:	10800044 	addi	r2,r2,1
2008d224:	41000015 	stw	r4,0(r8)
2008d228:	01000044 	movi	r4,1
2008d22c:	41000115 	stw	r4,4(r8)
2008d230:	d8c02015 	stw	r3,128(sp)
2008d234:	d8801f15 	stw	r2,124(sp)
2008d238:	010001c4 	movi	r4,7
2008d23c:	20823316 	blt	r4,r2,2008db0c <___svfprintf_internal_r+0x1714>
2008d240:	42000204 	addi	r8,r8,8
2008d244:	d8802617 	ldw	r2,152(sp)
2008d248:	dac03317 	ldw	r11,204(sp)
2008d24c:	12c00216 	blt	r2,r11,2008d258 <___svfprintf_internal_r+0xe60>
2008d250:	8880004c 	andi	r2,r17,1
2008d254:	103e3d26 	beq	r2,zero,2008cb4c <__flash_rwdata_start+0xfffedf78>
2008d258:	db003917 	ldw	r12,228(sp)
2008d25c:	d8801f17 	ldw	r2,124(sp)
2008d260:	dac03517 	ldw	r11,212(sp)
2008d264:	1b07883a 	add	r3,r3,r12
2008d268:	10800044 	addi	r2,r2,1
2008d26c:	42c00015 	stw	r11,0(r8)
2008d270:	43000115 	stw	r12,4(r8)
2008d274:	d8c02015 	stw	r3,128(sp)
2008d278:	d8801f15 	stw	r2,124(sp)
2008d27c:	010001c4 	movi	r4,7
2008d280:	20826f16 	blt	r4,r2,2008dc40 <___svfprintf_internal_r+0x1848>
2008d284:	42000204 	addi	r8,r8,8
2008d288:	db003317 	ldw	r12,204(sp)
2008d28c:	643fffc4 	addi	r16,r12,-1
2008d290:	043e2e0e 	bge	zero,r16,2008cb4c <__flash_rwdata_start+0xfffedf78>
2008d294:	04800404 	movi	r18,16
2008d298:	d8801f17 	ldw	r2,124(sp)
2008d29c:	9400a00e 	bge	r18,r16,2008d520 <___svfprintf_internal_r+0x1128>
2008d2a0:	01400034 	movhi	r5,0
2008d2a4:	29419b84 	addi	r5,r5,1646
2008d2a8:	d9402b15 	stw	r5,172(sp)
2008d2ac:	054001c4 	movi	r21,7
2008d2b0:	dcc02f17 	ldw	r19,188(sp)
2008d2b4:	00000306 	br	2008d2c4 <___svfprintf_internal_r+0xecc>
2008d2b8:	42000204 	addi	r8,r8,8
2008d2bc:	843ffc04 	addi	r16,r16,-16
2008d2c0:	94009a0e 	bge	r18,r16,2008d52c <___svfprintf_internal_r+0x1134>
2008d2c4:	18c00404 	addi	r3,r3,16
2008d2c8:	10800044 	addi	r2,r2,1
2008d2cc:	45000015 	stw	r20,0(r8)
2008d2d0:	44800115 	stw	r18,4(r8)
2008d2d4:	d8c02015 	stw	r3,128(sp)
2008d2d8:	d8801f15 	stw	r2,124(sp)
2008d2dc:	a8bff60e 	bge	r21,r2,2008d2b8 <__flash_rwdata_start+0xfffee6e4>
2008d2e0:	9809883a 	mov	r4,r19
2008d2e4:	b80b883a 	mov	r5,r23
2008d2e8:	b00d883a 	mov	r6,r22
2008d2ec:	0094fec0 	call	20094fec <__ssprint_r>
2008d2f0:	103d091e 	bne	r2,zero,2008c718 <__flash_rwdata_start+0xfffedb44>
2008d2f4:	d8c02017 	ldw	r3,128(sp)
2008d2f8:	d8801f17 	ldw	r2,124(sp)
2008d2fc:	da000404 	addi	r8,sp,16
2008d300:	003fee06 	br	2008d2bc <__flash_rwdata_start+0xfffee6e8>
2008d304:	dac02e17 	ldw	r11,184(sp)
2008d308:	db002a17 	ldw	r12,168(sp)
2008d30c:	5b2bc83a 	sub	r21,r11,r12
2008d310:	057dcd0e 	bge	zero,r21,2008ca48 <__flash_rwdata_start+0xfffede74>
2008d314:	07000404 	movi	fp,16
2008d318:	d8801f17 	ldw	r2,124(sp)
2008d31c:	e5435d0e 	bge	fp,r21,2008e094 <___svfprintf_internal_r+0x1c9c>
2008d320:	01400034 	movhi	r5,0
2008d324:	a809883a 	mov	r4,r21
2008d328:	29419b84 	addi	r5,r5,1646
2008d32c:	dc002c15 	stw	r16,176(sp)
2008d330:	902b883a 	mov	r21,r18
2008d334:	d9402b15 	stw	r5,172(sp)
2008d338:	8825883a 	mov	r18,r17
2008d33c:	04c001c4 	movi	r19,7
2008d340:	dc002f17 	ldw	r16,188(sp)
2008d344:	2023883a 	mov	r17,r4
2008d348:	00000306 	br	2008d358 <___svfprintf_internal_r+0xf60>
2008d34c:	8c7ffc04 	addi	r17,r17,-16
2008d350:	42000204 	addi	r8,r8,8
2008d354:	e440110e 	bge	fp,r17,2008d39c <___svfprintf_internal_r+0xfa4>
2008d358:	18c00404 	addi	r3,r3,16
2008d35c:	10800044 	addi	r2,r2,1
2008d360:	45000015 	stw	r20,0(r8)
2008d364:	47000115 	stw	fp,4(r8)
2008d368:	d8c02015 	stw	r3,128(sp)
2008d36c:	d8801f15 	stw	r2,124(sp)
2008d370:	98bff60e 	bge	r19,r2,2008d34c <__flash_rwdata_start+0xfffee778>
2008d374:	8009883a 	mov	r4,r16
2008d378:	b80b883a 	mov	r5,r23
2008d37c:	b00d883a 	mov	r6,r22
2008d380:	0094fec0 	call	20094fec <__ssprint_r>
2008d384:	103ce41e 	bne	r2,zero,2008c718 <__flash_rwdata_start+0xfffedb44>
2008d388:	8c7ffc04 	addi	r17,r17,-16
2008d38c:	d8c02017 	ldw	r3,128(sp)
2008d390:	d8801f17 	ldw	r2,124(sp)
2008d394:	da000404 	addi	r8,sp,16
2008d398:	e47fef16 	blt	fp,r17,2008d358 <__flash_rwdata_start+0xfffee784>
2008d39c:	dc002c17 	ldw	r16,176(sp)
2008d3a0:	8809883a 	mov	r4,r17
2008d3a4:	9023883a 	mov	r17,r18
2008d3a8:	a825883a 	mov	r18,r21
2008d3ac:	202b883a 	mov	r21,r4
2008d3b0:	dac02b17 	ldw	r11,172(sp)
2008d3b4:	1d47883a 	add	r3,r3,r21
2008d3b8:	10800044 	addi	r2,r2,1
2008d3bc:	42c00015 	stw	r11,0(r8)
2008d3c0:	45400115 	stw	r21,4(r8)
2008d3c4:	d8c02015 	stw	r3,128(sp)
2008d3c8:	d8801f15 	stw	r2,124(sp)
2008d3cc:	010001c4 	movi	r4,7
2008d3d0:	20818016 	blt	r4,r2,2008d9d4 <___svfprintf_internal_r+0x15dc>
2008d3d4:	42000204 	addi	r8,r8,8
2008d3d8:	003d9b06 	br	2008ca48 <__flash_rwdata_start+0xfffede74>
2008d3dc:	d9403b17 	ldw	r5,236(sp)
2008d3e0:	b007883a 	mov	r3,r22
2008d3e4:	988003cc 	andi	r2,r19,15
2008d3e8:	e008973a 	slli	r4,fp,28
2008d3ec:	2885883a 	add	r2,r5,r2
2008d3f0:	9826d13a 	srli	r19,r19,4
2008d3f4:	10800003 	ldbu	r2,0(r2)
2008d3f8:	e038d13a 	srli	fp,fp,4
2008d3fc:	18ffffc4 	addi	r3,r3,-1
2008d400:	24e6b03a 	or	r19,r4,r19
2008d404:	18800005 	stb	r2,0(r3)
2008d408:	9f04b03a 	or	r2,r19,fp
2008d40c:	103ff51e 	bne	r2,zero,2008d3e4 <__flash_rwdata_start+0xfffee810>
2008d410:	d8c03115 	stw	r3,196(sp)
2008d414:	b0e5c83a 	sub	r18,r22,r3
2008d418:	003d1e06 	br	2008c894 <__flash_rwdata_start+0xfffedcc0>
2008d41c:	db003317 	ldw	r12,204(sp)
2008d420:	00800044 	movi	r2,1
2008d424:	18c00044 	addi	r3,r3,1
2008d428:	13014b0e 	bge	r2,r12,2008d958 <___svfprintf_internal_r+0x1560>
2008d42c:	dc001f17 	ldw	r16,124(sp)
2008d430:	dac03117 	ldw	r11,196(sp)
2008d434:	00800044 	movi	r2,1
2008d438:	84000044 	addi	r16,r16,1
2008d43c:	40800115 	stw	r2,4(r8)
2008d440:	42c00015 	stw	r11,0(r8)
2008d444:	d8c02015 	stw	r3,128(sp)
2008d448:	dc001f15 	stw	r16,124(sp)
2008d44c:	008001c4 	movi	r2,7
2008d450:	14014e16 	blt	r2,r16,2008d98c <___svfprintf_internal_r+0x1594>
2008d454:	42000204 	addi	r8,r8,8
2008d458:	db003917 	ldw	r12,228(sp)
2008d45c:	dac03517 	ldw	r11,212(sp)
2008d460:	84000044 	addi	r16,r16,1
2008d464:	1b07883a 	add	r3,r3,r12
2008d468:	42c00015 	stw	r11,0(r8)
2008d46c:	43000115 	stw	r12,4(r8)
2008d470:	d8c02015 	stw	r3,128(sp)
2008d474:	dc001f15 	stw	r16,124(sp)
2008d478:	008001c4 	movi	r2,7
2008d47c:	14014c16 	blt	r2,r16,2008d9b0 <___svfprintf_internal_r+0x15b8>
2008d480:	44800204 	addi	r18,r8,8
2008d484:	d9003717 	ldw	r4,220(sp)
2008d488:	d9403817 	ldw	r5,224(sp)
2008d48c:	000d883a 	mov	r6,zero
2008d490:	000f883a 	mov	r7,zero
2008d494:	d8c03e15 	stw	r3,248(sp)
2008d498:	0098afc0 	call	20098afc <__eqdf2>
2008d49c:	d8c03e17 	ldw	r3,248(sp)
2008d4a0:	db003317 	ldw	r12,204(sp)
2008d4a4:	10009526 	beq	r2,zero,2008d6fc <___svfprintf_internal_r+0x1304>
2008d4a8:	dac03117 	ldw	r11,196(sp)
2008d4ac:	60bfffc4 	addi	r2,r12,-1
2008d4b0:	1887883a 	add	r3,r3,r2
2008d4b4:	59000044 	addi	r4,r11,1
2008d4b8:	84000044 	addi	r16,r16,1
2008d4bc:	90800115 	stw	r2,4(r18)
2008d4c0:	91000015 	stw	r4,0(r18)
2008d4c4:	d8c02015 	stw	r3,128(sp)
2008d4c8:	dc001f15 	stw	r16,124(sp)
2008d4cc:	008001c4 	movi	r2,7
2008d4d0:	1400b316 	blt	r2,r16,2008d7a0 <___svfprintf_internal_r+0x13a8>
2008d4d4:	94800204 	addi	r18,r18,8
2008d4d8:	dac03a17 	ldw	r11,232(sp)
2008d4dc:	dd4022c4 	addi	r21,sp,139
2008d4e0:	84000044 	addi	r16,r16,1
2008d4e4:	1ac7883a 	add	r3,r3,r11
2008d4e8:	95400015 	stw	r21,0(r18)
2008d4ec:	92c00115 	stw	r11,4(r18)
2008d4f0:	d8c02015 	stw	r3,128(sp)
2008d4f4:	dc001f15 	stw	r16,124(sp)
2008d4f8:	008001c4 	movi	r2,7
2008d4fc:	14001416 	blt	r2,r16,2008d550 <___svfprintf_internal_r+0x1158>
2008d500:	92000204 	addi	r8,r18,8
2008d504:	003d9106 	br	2008cb4c <__flash_rwdata_start+0xfffedf78>
2008d508:	d9002f17 	ldw	r4,188(sp)
2008d50c:	b80b883a 	mov	r5,r23
2008d510:	b00d883a 	mov	r6,r22
2008d514:	0094fec0 	call	20094fec <__ssprint_r>
2008d518:	103dc826 	beq	r2,zero,2008cc3c <__flash_rwdata_start+0xfffee068>
2008d51c:	003c7e06 	br	2008c718 <__flash_rwdata_start+0xfffedb44>
2008d520:	01000034 	movhi	r4,0
2008d524:	21019b84 	addi	r4,r4,1646
2008d528:	d9002b15 	stw	r4,172(sp)
2008d52c:	dac02b17 	ldw	r11,172(sp)
2008d530:	1c07883a 	add	r3,r3,r16
2008d534:	44000115 	stw	r16,4(r8)
2008d538:	42c00015 	stw	r11,0(r8)
2008d53c:	10800044 	addi	r2,r2,1
2008d540:	d8c02015 	stw	r3,128(sp)
2008d544:	d8801f15 	stw	r2,124(sp)
2008d548:	010001c4 	movi	r4,7
2008d54c:	20bd7e0e 	bge	r4,r2,2008cb48 <__flash_rwdata_start+0xfffedf74>
2008d550:	d9002f17 	ldw	r4,188(sp)
2008d554:	b80b883a 	mov	r5,r23
2008d558:	b00d883a 	mov	r6,r22
2008d55c:	0094fec0 	call	20094fec <__ssprint_r>
2008d560:	103c6d1e 	bne	r2,zero,2008c718 <__flash_rwdata_start+0xfffedb44>
2008d564:	d8c02017 	ldw	r3,128(sp)
2008d568:	da000404 	addi	r8,sp,16
2008d56c:	003d7706 	br	2008cb4c <__flash_rwdata_start+0xfffedf78>
2008d570:	10803fcc 	andi	r2,r2,255
2008d574:	1000201e 	bne	r2,zero,2008d5f8 <___svfprintf_internal_r+0x1200>
2008d578:	8880004c 	andi	r2,r17,1
2008d57c:	10001e26 	beq	r2,zero,2008d5f8 <___svfprintf_internal_r+0x1200>
2008d580:	00800c04 	movi	r2,48
2008d584:	d8c01dc4 	addi	r3,sp,119
2008d588:	d8801dc5 	stb	r2,119(sp)
2008d58c:	dc803d17 	ldw	r18,244(sp)
2008d590:	d8c03115 	stw	r3,196(sp)
2008d594:	003cbf06 	br	2008c894 <__flash_rwdata_start+0xfffedcc0>
2008d598:	d9002f17 	ldw	r4,188(sp)
2008d59c:	b80b883a 	mov	r5,r23
2008d5a0:	b00d883a 	mov	r6,r22
2008d5a4:	0094fec0 	call	20094fec <__ssprint_r>
2008d5a8:	103c5b1e 	bne	r2,zero,2008c718 <__flash_rwdata_start+0xfffedb44>
2008d5ac:	d8c02017 	ldw	r3,128(sp)
2008d5b0:	da000404 	addi	r8,sp,16
2008d5b4:	003d5806 	br	2008cb18 <__flash_rwdata_start+0xfffedf44>
2008d5b8:	d9002f17 	ldw	r4,188(sp)
2008d5bc:	b80b883a 	mov	r5,r23
2008d5c0:	b00d883a 	mov	r6,r22
2008d5c4:	0094fec0 	call	20094fec <__ssprint_r>
2008d5c8:	103c531e 	bne	r2,zero,2008c718 <__flash_rwdata_start+0xfffedb44>
2008d5cc:	d8c02017 	ldw	r3,128(sp)
2008d5d0:	da000404 	addi	r8,sp,16
2008d5d4:	003d1906 	br	2008ca3c <__flash_rwdata_start+0xfffede68>
2008d5d8:	d9002f17 	ldw	r4,188(sp)
2008d5dc:	b80b883a 	mov	r5,r23
2008d5e0:	b00d883a 	mov	r6,r22
2008d5e4:	0094fec0 	call	20094fec <__ssprint_r>
2008d5e8:	103c4b1e 	bne	r2,zero,2008c718 <__flash_rwdata_start+0xfffedb44>
2008d5ec:	d8c02017 	ldw	r3,128(sp)
2008d5f0:	da000404 	addi	r8,sp,16
2008d5f4:	003d0306 	br	2008ca04 <__flash_rwdata_start+0xfffede30>
2008d5f8:	0025883a 	mov	r18,zero
2008d5fc:	dd803115 	stw	r22,196(sp)
2008d600:	003ca406 	br	2008c894 <__flash_rwdata_start+0xfffedcc0>
2008d604:	dc002617 	ldw	r16,152(sp)
2008d608:	0401480e 	bge	zero,r16,2008db2c <___svfprintf_internal_r+0x1734>
2008d60c:	db003117 	ldw	r12,196(sp)
2008d610:	dac03317 	ldw	r11,204(sp)
2008d614:	62e1883a 	add	r16,r12,r11
2008d618:	db003417 	ldw	r12,208(sp)
2008d61c:	5825883a 	mov	r18,r11
2008d620:	62c0010e 	bge	r12,r11,2008d628 <___svfprintf_internal_r+0x1230>
2008d624:	6025883a 	mov	r18,r12
2008d628:	04800b0e 	bge	zero,r18,2008d658 <___svfprintf_internal_r+0x1260>
2008d62c:	d8801f17 	ldw	r2,124(sp)
2008d630:	dac03117 	ldw	r11,196(sp)
2008d634:	1c87883a 	add	r3,r3,r18
2008d638:	10800044 	addi	r2,r2,1
2008d63c:	42c00015 	stw	r11,0(r8)
2008d640:	44800115 	stw	r18,4(r8)
2008d644:	d8c02015 	stw	r3,128(sp)
2008d648:	d8801f15 	stw	r2,124(sp)
2008d64c:	010001c4 	movi	r4,7
2008d650:	20823f16 	blt	r4,r2,2008df50 <___svfprintf_internal_r+0x1b58>
2008d654:	42000204 	addi	r8,r8,8
2008d658:	90023b16 	blt	r18,zero,2008df48 <___svfprintf_internal_r+0x1b50>
2008d65c:	db003417 	ldw	r12,208(sp)
2008d660:	64a5c83a 	sub	r18,r12,r18
2008d664:	0480780e 	bge	zero,r18,2008d848 <___svfprintf_internal_r+0x1450>
2008d668:	05400404 	movi	r21,16
2008d66c:	d8801f17 	ldw	r2,124(sp)
2008d670:	ac81140e 	bge	r21,r18,2008dac4 <___svfprintf_internal_r+0x16cc>
2008d674:	01400034 	movhi	r5,0
2008d678:	29419b84 	addi	r5,r5,1646
2008d67c:	d9402b15 	stw	r5,172(sp)
2008d680:	070001c4 	movi	fp,7
2008d684:	dcc02f17 	ldw	r19,188(sp)
2008d688:	00000306 	br	2008d698 <___svfprintf_internal_r+0x12a0>
2008d68c:	42000204 	addi	r8,r8,8
2008d690:	94bffc04 	addi	r18,r18,-16
2008d694:	ac810e0e 	bge	r21,r18,2008dad0 <___svfprintf_internal_r+0x16d8>
2008d698:	18c00404 	addi	r3,r3,16
2008d69c:	10800044 	addi	r2,r2,1
2008d6a0:	45000015 	stw	r20,0(r8)
2008d6a4:	45400115 	stw	r21,4(r8)
2008d6a8:	d8c02015 	stw	r3,128(sp)
2008d6ac:	d8801f15 	stw	r2,124(sp)
2008d6b0:	e0bff60e 	bge	fp,r2,2008d68c <__flash_rwdata_start+0xfffeeab8>
2008d6b4:	9809883a 	mov	r4,r19
2008d6b8:	b80b883a 	mov	r5,r23
2008d6bc:	b00d883a 	mov	r6,r22
2008d6c0:	0094fec0 	call	20094fec <__ssprint_r>
2008d6c4:	103c141e 	bne	r2,zero,2008c718 <__flash_rwdata_start+0xfffedb44>
2008d6c8:	d8c02017 	ldw	r3,128(sp)
2008d6cc:	d8801f17 	ldw	r2,124(sp)
2008d6d0:	da000404 	addi	r8,sp,16
2008d6d4:	003fee06 	br	2008d690 <__flash_rwdata_start+0xfffeeabc>
2008d6d8:	d9002f17 	ldw	r4,188(sp)
2008d6dc:	b80b883a 	mov	r5,r23
2008d6e0:	b00d883a 	mov	r6,r22
2008d6e4:	0094fec0 	call	20094fec <__ssprint_r>
2008d6e8:	103c0b1e 	bne	r2,zero,2008c718 <__flash_rwdata_start+0xfffedb44>
2008d6ec:	d8c02017 	ldw	r3,128(sp)
2008d6f0:	d8802787 	ldb	r2,158(sp)
2008d6f4:	da000404 	addi	r8,sp,16
2008d6f8:	003cb506 	br	2008c9d0 <__flash_rwdata_start+0xfffeddfc>
2008d6fc:	657fffc4 	addi	r21,r12,-1
2008d700:	057f750e 	bge	zero,r21,2008d4d8 <__flash_rwdata_start+0xfffee904>
2008d704:	07000404 	movi	fp,16
2008d708:	e542ed0e 	bge	fp,r21,2008e2c0 <___svfprintf_internal_r+0x1ec8>
2008d70c:	01000034 	movhi	r4,0
2008d710:	21019b84 	addi	r4,r4,1646
2008d714:	d9002b15 	stw	r4,172(sp)
2008d718:	01c001c4 	movi	r7,7
2008d71c:	dcc02f17 	ldw	r19,188(sp)
2008d720:	00000306 	br	2008d730 <___svfprintf_internal_r+0x1338>
2008d724:	ad7ffc04 	addi	r21,r21,-16
2008d728:	94800204 	addi	r18,r18,8
2008d72c:	e540130e 	bge	fp,r21,2008d77c <___svfprintf_internal_r+0x1384>
2008d730:	18c00404 	addi	r3,r3,16
2008d734:	84000044 	addi	r16,r16,1
2008d738:	95000015 	stw	r20,0(r18)
2008d73c:	97000115 	stw	fp,4(r18)
2008d740:	d8c02015 	stw	r3,128(sp)
2008d744:	dc001f15 	stw	r16,124(sp)
2008d748:	3c3ff60e 	bge	r7,r16,2008d724 <__flash_rwdata_start+0xfffeeb50>
2008d74c:	9809883a 	mov	r4,r19
2008d750:	b80b883a 	mov	r5,r23
2008d754:	b00d883a 	mov	r6,r22
2008d758:	d9c03e15 	stw	r7,248(sp)
2008d75c:	0094fec0 	call	20094fec <__ssprint_r>
2008d760:	d9c03e17 	ldw	r7,248(sp)
2008d764:	103bec1e 	bne	r2,zero,2008c718 <__flash_rwdata_start+0xfffedb44>
2008d768:	ad7ffc04 	addi	r21,r21,-16
2008d76c:	d8c02017 	ldw	r3,128(sp)
2008d770:	dc001f17 	ldw	r16,124(sp)
2008d774:	dc800404 	addi	r18,sp,16
2008d778:	e57fed16 	blt	fp,r21,2008d730 <__flash_rwdata_start+0xfffeeb5c>
2008d77c:	dac02b17 	ldw	r11,172(sp)
2008d780:	1d47883a 	add	r3,r3,r21
2008d784:	84000044 	addi	r16,r16,1
2008d788:	92c00015 	stw	r11,0(r18)
2008d78c:	95400115 	stw	r21,4(r18)
2008d790:	d8c02015 	stw	r3,128(sp)
2008d794:	dc001f15 	stw	r16,124(sp)
2008d798:	008001c4 	movi	r2,7
2008d79c:	143f4d0e 	bge	r2,r16,2008d4d4 <__flash_rwdata_start+0xfffee900>
2008d7a0:	d9002f17 	ldw	r4,188(sp)
2008d7a4:	b80b883a 	mov	r5,r23
2008d7a8:	b00d883a 	mov	r6,r22
2008d7ac:	0094fec0 	call	20094fec <__ssprint_r>
2008d7b0:	103bd91e 	bne	r2,zero,2008c718 <__flash_rwdata_start+0xfffedb44>
2008d7b4:	d8c02017 	ldw	r3,128(sp)
2008d7b8:	dc001f17 	ldw	r16,124(sp)
2008d7bc:	dc800404 	addi	r18,sp,16
2008d7c0:	003f4506 	br	2008d4d8 <__flash_rwdata_start+0xfffee904>
2008d7c4:	00800084 	movi	r2,2
2008d7c8:	9f06b03a 	or	r3,r19,fp
2008d7cc:	003d5706 	br	2008cd2c <__flash_rwdata_start+0xfffee158>
2008d7d0:	1cc00017 	ldw	r19,0(r3)
2008d7d4:	dac02d17 	ldw	r11,180(sp)
2008d7d8:	9839d7fa 	srai	fp,r19,31
2008d7dc:	5ac00104 	addi	r11,r11,4
2008d7e0:	dac02d15 	stw	r11,180(sp)
2008d7e4:	e005883a 	mov	r2,fp
2008d7e8:	003c0306 	br	2008c7f8 <__flash_rwdata_start+0xfffedc24>
2008d7ec:	dac02d17 	ldw	r11,180(sp)
2008d7f0:	0039883a 	mov	fp,zero
2008d7f4:	0005883a 	mov	r2,zero
2008d7f8:	5cc00017 	ldw	r19,0(r11)
2008d7fc:	5ac00104 	addi	r11,r11,4
2008d800:	dac02d15 	stw	r11,180(sp)
2008d804:	9807883a 	mov	r3,r19
2008d808:	003d4806 	br	2008cd2c <__flash_rwdata_start+0xfffee158>
2008d80c:	db002d17 	ldw	r12,180(sp)
2008d810:	14c00017 	ldw	r19,0(r2)
2008d814:	0039883a 	mov	fp,zero
2008d818:	63000104 	addi	r12,r12,4
2008d81c:	db002d15 	stw	r12,180(sp)
2008d820:	00800044 	movi	r2,1
2008d824:	9807883a 	mov	r3,r19
2008d828:	003d4006 	br	2008cd2c <__flash_rwdata_start+0xfffee158>
2008d82c:	d9002f17 	ldw	r4,188(sp)
2008d830:	b80b883a 	mov	r5,r23
2008d834:	b00d883a 	mov	r6,r22
2008d838:	0094fec0 	call	20094fec <__ssprint_r>
2008d83c:	103bb61e 	bne	r2,zero,2008c718 <__flash_rwdata_start+0xfffedb44>
2008d840:	d8c02017 	ldw	r3,128(sp)
2008d844:	da000404 	addi	r8,sp,16
2008d848:	db003117 	ldw	r12,196(sp)
2008d84c:	dac03417 	ldw	r11,208(sp)
2008d850:	d8802617 	ldw	r2,152(sp)
2008d854:	62e5883a 	add	r18,r12,r11
2008d858:	db003317 	ldw	r12,204(sp)
2008d85c:	13000216 	blt	r2,r12,2008d868 <___svfprintf_internal_r+0x1470>
2008d860:	8900004c 	andi	r4,r17,1
2008d864:	20000c26 	beq	r4,zero,2008d898 <___svfprintf_internal_r+0x14a0>
2008d868:	dac03917 	ldw	r11,228(sp)
2008d86c:	d9001f17 	ldw	r4,124(sp)
2008d870:	db003517 	ldw	r12,212(sp)
2008d874:	1ac7883a 	add	r3,r3,r11
2008d878:	21000044 	addi	r4,r4,1
2008d87c:	43000015 	stw	r12,0(r8)
2008d880:	42c00115 	stw	r11,4(r8)
2008d884:	d8c02015 	stw	r3,128(sp)
2008d888:	d9001f15 	stw	r4,124(sp)
2008d88c:	014001c4 	movi	r5,7
2008d890:	2901b716 	blt	r5,r4,2008df70 <___svfprintf_internal_r+0x1b78>
2008d894:	42000204 	addi	r8,r8,8
2008d898:	dac03317 	ldw	r11,204(sp)
2008d89c:	8489c83a 	sub	r4,r16,r18
2008d8a0:	5885c83a 	sub	r2,r11,r2
2008d8a4:	1021883a 	mov	r16,r2
2008d8a8:	2080010e 	bge	r4,r2,2008d8b0 <___svfprintf_internal_r+0x14b8>
2008d8ac:	2021883a 	mov	r16,r4
2008d8b0:	04000a0e 	bge	zero,r16,2008d8dc <___svfprintf_internal_r+0x14e4>
2008d8b4:	d9001f17 	ldw	r4,124(sp)
2008d8b8:	1c07883a 	add	r3,r3,r16
2008d8bc:	44800015 	stw	r18,0(r8)
2008d8c0:	21000044 	addi	r4,r4,1
2008d8c4:	44000115 	stw	r16,4(r8)
2008d8c8:	d8c02015 	stw	r3,128(sp)
2008d8cc:	d9001f15 	stw	r4,124(sp)
2008d8d0:	014001c4 	movi	r5,7
2008d8d4:	2901bf16 	blt	r5,r4,2008dfd4 <___svfprintf_internal_r+0x1bdc>
2008d8d8:	42000204 	addi	r8,r8,8
2008d8dc:	8001bb16 	blt	r16,zero,2008dfcc <___svfprintf_internal_r+0x1bd4>
2008d8e0:	1421c83a 	sub	r16,r2,r16
2008d8e4:	043c990e 	bge	zero,r16,2008cb4c <__flash_rwdata_start+0xfffedf78>
2008d8e8:	04800404 	movi	r18,16
2008d8ec:	d8801f17 	ldw	r2,124(sp)
2008d8f0:	943f0b0e 	bge	r18,r16,2008d520 <__flash_rwdata_start+0xfffee94c>
2008d8f4:	01400034 	movhi	r5,0
2008d8f8:	29419b84 	addi	r5,r5,1646
2008d8fc:	d9402b15 	stw	r5,172(sp)
2008d900:	054001c4 	movi	r21,7
2008d904:	dcc02f17 	ldw	r19,188(sp)
2008d908:	00000306 	br	2008d918 <___svfprintf_internal_r+0x1520>
2008d90c:	42000204 	addi	r8,r8,8
2008d910:	843ffc04 	addi	r16,r16,-16
2008d914:	943f050e 	bge	r18,r16,2008d52c <__flash_rwdata_start+0xfffee958>
2008d918:	18c00404 	addi	r3,r3,16
2008d91c:	10800044 	addi	r2,r2,1
2008d920:	45000015 	stw	r20,0(r8)
2008d924:	44800115 	stw	r18,4(r8)
2008d928:	d8c02015 	stw	r3,128(sp)
2008d92c:	d8801f15 	stw	r2,124(sp)
2008d930:	a8bff60e 	bge	r21,r2,2008d90c <__flash_rwdata_start+0xfffeed38>
2008d934:	9809883a 	mov	r4,r19
2008d938:	b80b883a 	mov	r5,r23
2008d93c:	b00d883a 	mov	r6,r22
2008d940:	0094fec0 	call	20094fec <__ssprint_r>
2008d944:	103b741e 	bne	r2,zero,2008c718 <__flash_rwdata_start+0xfffedb44>
2008d948:	d8c02017 	ldw	r3,128(sp)
2008d94c:	d8801f17 	ldw	r2,124(sp)
2008d950:	da000404 	addi	r8,sp,16
2008d954:	003fee06 	br	2008d910 <__flash_rwdata_start+0xfffeed3c>
2008d958:	8888703a 	and	r4,r17,r2
2008d95c:	203eb31e 	bne	r4,zero,2008d42c <__flash_rwdata_start+0xfffee858>
2008d960:	dc001f17 	ldw	r16,124(sp)
2008d964:	db003117 	ldw	r12,196(sp)
2008d968:	40800115 	stw	r2,4(r8)
2008d96c:	84000044 	addi	r16,r16,1
2008d970:	43000015 	stw	r12,0(r8)
2008d974:	d8c02015 	stw	r3,128(sp)
2008d978:	dc001f15 	stw	r16,124(sp)
2008d97c:	008001c4 	movi	r2,7
2008d980:	143f8716 	blt	r2,r16,2008d7a0 <__flash_rwdata_start+0xfffeebcc>
2008d984:	44800204 	addi	r18,r8,8
2008d988:	003ed306 	br	2008d4d8 <__flash_rwdata_start+0xfffee904>
2008d98c:	d9002f17 	ldw	r4,188(sp)
2008d990:	b80b883a 	mov	r5,r23
2008d994:	b00d883a 	mov	r6,r22
2008d998:	0094fec0 	call	20094fec <__ssprint_r>
2008d99c:	103b5e1e 	bne	r2,zero,2008c718 <__flash_rwdata_start+0xfffedb44>
2008d9a0:	d8c02017 	ldw	r3,128(sp)
2008d9a4:	dc001f17 	ldw	r16,124(sp)
2008d9a8:	da000404 	addi	r8,sp,16
2008d9ac:	003eaa06 	br	2008d458 <__flash_rwdata_start+0xfffee884>
2008d9b0:	d9002f17 	ldw	r4,188(sp)
2008d9b4:	b80b883a 	mov	r5,r23
2008d9b8:	b00d883a 	mov	r6,r22
2008d9bc:	0094fec0 	call	20094fec <__ssprint_r>
2008d9c0:	103b551e 	bne	r2,zero,2008c718 <__flash_rwdata_start+0xfffedb44>
2008d9c4:	d8c02017 	ldw	r3,128(sp)
2008d9c8:	dc001f17 	ldw	r16,124(sp)
2008d9cc:	dc800404 	addi	r18,sp,16
2008d9d0:	003eac06 	br	2008d484 <__flash_rwdata_start+0xfffee8b0>
2008d9d4:	d9002f17 	ldw	r4,188(sp)
2008d9d8:	b80b883a 	mov	r5,r23
2008d9dc:	b00d883a 	mov	r6,r22
2008d9e0:	0094fec0 	call	20094fec <__ssprint_r>
2008d9e4:	103b4c1e 	bne	r2,zero,2008c718 <__flash_rwdata_start+0xfffedb44>
2008d9e8:	d8c02017 	ldw	r3,128(sp)
2008d9ec:	da000404 	addi	r8,sp,16
2008d9f0:	003c1506 	br	2008ca48 <__flash_rwdata_start+0xfffede74>
2008d9f4:	da004015 	stw	r8,256(sp)
2008d9f8:	da403f15 	stw	r9,252(sp)
2008d9fc:	0094cd80 	call	20094cd8 <__fpclassifyd>
2008da00:	da004017 	ldw	r8,256(sp)
2008da04:	da403f17 	ldw	r9,252(sp)
2008da08:	1000951e 	bne	r2,zero,2008dc60 <___svfprintf_internal_r+0x1868>
2008da0c:	008011c4 	movi	r2,71
2008da10:	1400fb16 	blt	r2,r16,2008de00 <___svfprintf_internal_r+0x1a08>
2008da14:	03000034 	movhi	r12,0
2008da18:	63018d04 	addi	r12,r12,1588
2008da1c:	db003115 	stw	r12,196(sp)
2008da20:	00c000c4 	movi	r3,3
2008da24:	00bfdfc4 	movi	r2,-129
2008da28:	d8c02a15 	stw	r3,168(sp)
2008da2c:	88a2703a 	and	r17,r17,r2
2008da30:	dd402783 	ldbu	r21,158(sp)
2008da34:	dcc02d15 	stw	r19,180(sp)
2008da38:	1825883a 	mov	r18,r3
2008da3c:	d8003215 	stw	zero,200(sp)
2008da40:	d8003415 	stw	zero,208(sp)
2008da44:	003b9806 	br	2008c8a8 <__flash_rwdata_start+0xfffedcd4>
2008da48:	1c000007 	ldb	r16,0(r3)
2008da4c:	1805883a 	mov	r2,r3
2008da50:	003abf06 	br	2008c550 <__flash_rwdata_start+0xfffed97c>
2008da54:	00800084 	movi	r2,2
2008da58:	003cb406 	br	2008cd2c <__flash_rwdata_start+0xfffee158>
2008da5c:	88c0100c 	andi	r3,r17,64
2008da60:	1800f626 	beq	r3,zero,2008de3c <___svfprintf_internal_r+0x1a44>
2008da64:	dac02d17 	ldw	r11,180(sp)
2008da68:	14c0000b 	ldhu	r19,0(r2)
2008da6c:	0039883a 	mov	fp,zero
2008da70:	5ac00104 	addi	r11,r11,4
2008da74:	dac02d15 	stw	r11,180(sp)
2008da78:	003cbd06 	br	2008cd70 <__flash_rwdata_start+0xfffee19c>
2008da7c:	8880040c 	andi	r2,r17,16
2008da80:	1000091e 	bne	r2,zero,2008daa8 <___svfprintf_internal_r+0x16b0>
2008da84:	8c40100c 	andi	r17,r17,64
2008da88:	88000726 	beq	r17,zero,2008daa8 <___svfprintf_internal_r+0x16b0>
2008da8c:	db002d17 	ldw	r12,180(sp)
2008da90:	dac03017 	ldw	r11,192(sp)
2008da94:	60800017 	ldw	r2,0(r12)
2008da98:	63000104 	addi	r12,r12,4
2008da9c:	db002d15 	stw	r12,180(sp)
2008daa0:	12c0000d 	sth	r11,0(r2)
2008daa4:	003a8006 	br	2008c4a8 <__flash_rwdata_start+0xfffed8d4>
2008daa8:	db002d17 	ldw	r12,180(sp)
2008daac:	dac03017 	ldw	r11,192(sp)
2008dab0:	60800017 	ldw	r2,0(r12)
2008dab4:	63000104 	addi	r12,r12,4
2008dab8:	db002d15 	stw	r12,180(sp)
2008dabc:	12c00015 	stw	r11,0(r2)
2008dac0:	003a7906 	br	2008c4a8 <__flash_rwdata_start+0xfffed8d4>
2008dac4:	01000034 	movhi	r4,0
2008dac8:	21019b84 	addi	r4,r4,1646
2008dacc:	d9002b15 	stw	r4,172(sp)
2008dad0:	dac02b17 	ldw	r11,172(sp)
2008dad4:	1c87883a 	add	r3,r3,r18
2008dad8:	10800044 	addi	r2,r2,1
2008dadc:	42c00015 	stw	r11,0(r8)
2008dae0:	44800115 	stw	r18,4(r8)
2008dae4:	d8c02015 	stw	r3,128(sp)
2008dae8:	d8801f15 	stw	r2,124(sp)
2008daec:	010001c4 	movi	r4,7
2008daf0:	20bf4e16 	blt	r4,r2,2008d82c <__flash_rwdata_start+0xfffeec58>
2008daf4:	42000204 	addi	r8,r8,8
2008daf8:	003f5306 	br	2008d848 <__flash_rwdata_start+0xfffeec74>
2008dafc:	01000034 	movhi	r4,0
2008db00:	21019b84 	addi	r4,r4,1646
2008db04:	d9002b15 	stw	r4,172(sp)
2008db08:	003bf906 	br	2008caf0 <__flash_rwdata_start+0xfffedf1c>
2008db0c:	d9002f17 	ldw	r4,188(sp)
2008db10:	b80b883a 	mov	r5,r23
2008db14:	b00d883a 	mov	r6,r22
2008db18:	0094fec0 	call	20094fec <__ssprint_r>
2008db1c:	103afe1e 	bne	r2,zero,2008c718 <__flash_rwdata_start+0xfffedb44>
2008db20:	d8c02017 	ldw	r3,128(sp)
2008db24:	da000404 	addi	r8,sp,16
2008db28:	003dc606 	br	2008d244 <__flash_rwdata_start+0xfffee670>
2008db2c:	d8801f17 	ldw	r2,124(sp)
2008db30:	03000034 	movhi	r12,0
2008db34:	01000044 	movi	r4,1
2008db38:	18c00044 	addi	r3,r3,1
2008db3c:	10800044 	addi	r2,r2,1
2008db40:	63019b04 	addi	r12,r12,1644
2008db44:	41000115 	stw	r4,4(r8)
2008db48:	43000015 	stw	r12,0(r8)
2008db4c:	d8c02015 	stw	r3,128(sp)
2008db50:	d8801f15 	stw	r2,124(sp)
2008db54:	010001c4 	movi	r4,7
2008db58:	2080ad16 	blt	r4,r2,2008de10 <___svfprintf_internal_r+0x1a18>
2008db5c:	42000204 	addi	r8,r8,8
2008db60:	8000041e 	bne	r16,zero,2008db74 <___svfprintf_internal_r+0x177c>
2008db64:	dac03317 	ldw	r11,204(sp)
2008db68:	5800021e 	bne	r11,zero,2008db74 <___svfprintf_internal_r+0x177c>
2008db6c:	8880004c 	andi	r2,r17,1
2008db70:	103bf626 	beq	r2,zero,2008cb4c <__flash_rwdata_start+0xfffedf78>
2008db74:	db003917 	ldw	r12,228(sp)
2008db78:	d8801f17 	ldw	r2,124(sp)
2008db7c:	dac03517 	ldw	r11,212(sp)
2008db80:	1b07883a 	add	r3,r3,r12
2008db84:	10800044 	addi	r2,r2,1
2008db88:	42c00015 	stw	r11,0(r8)
2008db8c:	43000115 	stw	r12,4(r8)
2008db90:	d8c02015 	stw	r3,128(sp)
2008db94:	d8801f15 	stw	r2,124(sp)
2008db98:	010001c4 	movi	r4,7
2008db9c:	20818616 	blt	r4,r2,2008e1b8 <___svfprintf_internal_r+0x1dc0>
2008dba0:	42000204 	addi	r8,r8,8
2008dba4:	0421c83a 	sub	r16,zero,r16
2008dba8:	0400bc0e 	bge	zero,r16,2008de9c <___svfprintf_internal_r+0x1aa4>
2008dbac:	04800404 	movi	r18,16
2008dbb0:	9400f80e 	bge	r18,r16,2008df94 <___svfprintf_internal_r+0x1b9c>
2008dbb4:	01000034 	movhi	r4,0
2008dbb8:	21019b84 	addi	r4,r4,1646
2008dbbc:	d9002b15 	stw	r4,172(sp)
2008dbc0:	054001c4 	movi	r21,7
2008dbc4:	dcc02f17 	ldw	r19,188(sp)
2008dbc8:	00000306 	br	2008dbd8 <___svfprintf_internal_r+0x17e0>
2008dbcc:	42000204 	addi	r8,r8,8
2008dbd0:	843ffc04 	addi	r16,r16,-16
2008dbd4:	9400f20e 	bge	r18,r16,2008dfa0 <___svfprintf_internal_r+0x1ba8>
2008dbd8:	18c00404 	addi	r3,r3,16
2008dbdc:	10800044 	addi	r2,r2,1
2008dbe0:	45000015 	stw	r20,0(r8)
2008dbe4:	44800115 	stw	r18,4(r8)
2008dbe8:	d8c02015 	stw	r3,128(sp)
2008dbec:	d8801f15 	stw	r2,124(sp)
2008dbf0:	a8bff60e 	bge	r21,r2,2008dbcc <__flash_rwdata_start+0xfffeeff8>
2008dbf4:	9809883a 	mov	r4,r19
2008dbf8:	b80b883a 	mov	r5,r23
2008dbfc:	b00d883a 	mov	r6,r22
2008dc00:	0094fec0 	call	20094fec <__ssprint_r>
2008dc04:	103ac41e 	bne	r2,zero,2008c718 <__flash_rwdata_start+0xfffedb44>
2008dc08:	d8c02017 	ldw	r3,128(sp)
2008dc0c:	d8801f17 	ldw	r2,124(sp)
2008dc10:	da000404 	addi	r8,sp,16
2008dc14:	003fee06 	br	2008dbd0 <__flash_rwdata_start+0xfffeeffc>
2008dc18:	db002e17 	ldw	r12,184(sp)
2008dc1c:	1805883a 	mov	r2,r3
2008dc20:	dac02d15 	stw	r11,180(sp)
2008dc24:	0319c83a 	sub	r12,zero,r12
2008dc28:	db002e15 	stw	r12,184(sp)
2008dc2c:	003acf06 	br	2008c76c <__flash_rwdata_start+0xfffedb98>
2008dc30:	18800044 	addi	r2,r3,1
2008dc34:	8c400814 	ori	r17,r17,32
2008dc38:	1c000047 	ldb	r16,1(r3)
2008dc3c:	003a4406 	br	2008c550 <__flash_rwdata_start+0xfffed97c>
2008dc40:	d9002f17 	ldw	r4,188(sp)
2008dc44:	b80b883a 	mov	r5,r23
2008dc48:	b00d883a 	mov	r6,r22
2008dc4c:	0094fec0 	call	20094fec <__ssprint_r>
2008dc50:	103ab11e 	bne	r2,zero,2008c718 <__flash_rwdata_start+0xfffedb44>
2008dc54:	d8c02017 	ldw	r3,128(sp)
2008dc58:	da000404 	addi	r8,sp,16
2008dc5c:	003d8a06 	br	2008d288 <__flash_rwdata_start+0xfffee6b4>
2008dc60:	057ff7c4 	movi	r21,-33
2008dc64:	00bfffc4 	movi	r2,-1
2008dc68:	856a703a 	and	r21,r16,r21
2008dc6c:	48807126 	beq	r9,r2,2008de34 <___svfprintf_internal_r+0x1a3c>
2008dc70:	008011c4 	movi	r2,71
2008dc74:	a8814d26 	beq	r21,r2,2008e1ac <___svfprintf_internal_r+0x1db4>
2008dc78:	db003817 	ldw	r12,224(sp)
2008dc7c:	8ac04014 	ori	r11,r17,256
2008dc80:	dac02d15 	stw	r11,180(sp)
2008dc84:	60015616 	blt	r12,zero,2008e1e0 <___svfprintf_internal_r+0x1de8>
2008dc88:	dc803817 	ldw	r18,224(sp)
2008dc8c:	d8002a05 	stb	zero,168(sp)
2008dc90:	00801984 	movi	r2,102
2008dc94:	80808c26 	beq	r16,r2,2008dec8 <___svfprintf_internal_r+0x1ad0>
2008dc98:	00801184 	movi	r2,70
2008dc9c:	80808a26 	beq	r16,r2,2008dec8 <___svfprintf_internal_r+0x1ad0>
2008dca0:	00801144 	movi	r2,69
2008dca4:	a8815226 	beq	r21,r2,2008e1f0 <___svfprintf_internal_r+0x1df8>
2008dca8:	4839883a 	mov	fp,r9
2008dcac:	d8802604 	addi	r2,sp,152
2008dcb0:	d8800115 	stw	r2,4(sp)
2008dcb4:	d9002f17 	ldw	r4,188(sp)
2008dcb8:	d8802504 	addi	r2,sp,148
2008dcbc:	d9403717 	ldw	r5,220(sp)
2008dcc0:	d8800215 	stw	r2,8(sp)
2008dcc4:	d8802104 	addi	r2,sp,132
2008dcc8:	df000015 	stw	fp,0(sp)
2008dccc:	d8800315 	stw	r2,12(sp)
2008dcd0:	900d883a 	mov	r6,r18
2008dcd4:	01c00084 	movi	r7,2
2008dcd8:	da004015 	stw	r8,256(sp)
2008dcdc:	da403f15 	stw	r9,252(sp)
2008dce0:	00909d00 	call	200909d0 <_dtoa_r>
2008dce4:	d8803115 	stw	r2,196(sp)
2008dce8:	008019c4 	movi	r2,103
2008dcec:	da004017 	ldw	r8,256(sp)
2008dcf0:	da403f17 	ldw	r9,252(sp)
2008dcf4:	80800226 	beq	r16,r2,2008dd00 <___svfprintf_internal_r+0x1908>
2008dcf8:	008011c4 	movi	r2,71
2008dcfc:	8080841e 	bne	r16,r2,2008df10 <___svfprintf_internal_r+0x1b18>
2008dd00:	8880004c 	andi	r2,r17,1
2008dd04:	10014f26 	beq	r2,zero,2008e244 <___svfprintf_internal_r+0x1e4c>
2008dd08:	db003117 	ldw	r12,196(sp)
2008dd0c:	6715883a 	add	r10,r12,fp
2008dd10:	d9003717 	ldw	r4,220(sp)
2008dd14:	900b883a 	mov	r5,r18
2008dd18:	000d883a 	mov	r6,zero
2008dd1c:	000f883a 	mov	r7,zero
2008dd20:	da004015 	stw	r8,256(sp)
2008dd24:	da403f15 	stw	r9,252(sp)
2008dd28:	da803e15 	stw	r10,248(sp)
2008dd2c:	0098afc0 	call	20098afc <__eqdf2>
2008dd30:	da004017 	ldw	r8,256(sp)
2008dd34:	da403f17 	ldw	r9,252(sp)
2008dd38:	da803e17 	ldw	r10,248(sp)
2008dd3c:	1000d926 	beq	r2,zero,2008e0a4 <___svfprintf_internal_r+0x1cac>
2008dd40:	d8802117 	ldw	r2,132(sp)
2008dd44:	1280062e 	bgeu	r2,r10,2008dd60 <___svfprintf_internal_r+0x1968>
2008dd48:	01000c04 	movi	r4,48
2008dd4c:	10c00044 	addi	r3,r2,1
2008dd50:	d8c02115 	stw	r3,132(sp)
2008dd54:	11000005 	stb	r4,0(r2)
2008dd58:	d8802117 	ldw	r2,132(sp)
2008dd5c:	12bffb36 	bltu	r2,r10,2008dd4c <__flash_rwdata_start+0xfffef178>
2008dd60:	db003117 	ldw	r12,196(sp)
2008dd64:	1305c83a 	sub	r2,r2,r12
2008dd68:	d8803315 	stw	r2,204(sp)
2008dd6c:	008011c4 	movi	r2,71
2008dd70:	a880b626 	beq	r21,r2,2008e04c <___svfprintf_internal_r+0x1c54>
2008dd74:	00801944 	movi	r2,101
2008dd78:	14017c0e 	bge	r2,r16,2008e36c <___svfprintf_internal_r+0x1f74>
2008dd7c:	00801984 	movi	r2,102
2008dd80:	80812626 	beq	r16,r2,2008e21c <___svfprintf_internal_r+0x1e24>
2008dd84:	db002617 	ldw	r12,152(sp)
2008dd88:	db003415 	stw	r12,208(sp)
2008dd8c:	db003417 	ldw	r12,208(sp)
2008dd90:	dac03317 	ldw	r11,204(sp)
2008dd94:	62c11816 	blt	r12,r11,2008e1f8 <___svfprintf_internal_r+0x1e00>
2008dd98:	8c40004c 	andi	r17,r17,1
2008dd9c:	88013b1e 	bne	r17,zero,2008e28c <___svfprintf_internal_r+0x1e94>
2008dda0:	6005883a 	mov	r2,r12
2008dda4:	60012516 	blt	r12,zero,2008e23c <___svfprintf_internal_r+0x1e44>
2008dda8:	dc803417 	ldw	r18,208(sp)
2008ddac:	df002a07 	ldb	fp,168(sp)
2008ddb0:	e000b01e 	bne	fp,zero,2008e074 <___svfprintf_internal_r+0x1c7c>
2008ddb4:	dc402d17 	ldw	r17,180(sp)
2008ddb8:	dd402783 	ldbu	r21,158(sp)
2008ddbc:	d8802a15 	stw	r2,168(sp)
2008ddc0:	dcc02d15 	stw	r19,180(sp)
2008ddc4:	d8003215 	stw	zero,200(sp)
2008ddc8:	003ab706 	br	2008c8a8 <__flash_rwdata_start+0xfffedcd4>
2008ddcc:	00800034 	movhi	r2,0
2008ddd0:	10818b04 	addi	r2,r2,1580
2008ddd4:	d8803115 	stw	r2,196(sp)
2008ddd8:	003bbb06 	br	2008ccc8 <__flash_rwdata_start+0xfffee0f4>
2008dddc:	d9002f17 	ldw	r4,188(sp)
2008dde0:	04001004 	movi	r16,64
2008dde4:	800b883a 	mov	r5,r16
2008dde8:	008b5780 	call	2008b578 <_malloc_r>
2008ddec:	b8800015 	stw	r2,0(r23)
2008ddf0:	b8800415 	stw	r2,16(r23)
2008ddf4:	10015f26 	beq	r2,zero,2008e374 <___svfprintf_internal_r+0x1f7c>
2008ddf8:	bc000515 	stw	r16,20(r23)
2008ddfc:	00399806 	br	2008c460 <__flash_rwdata_start+0xfffed88c>
2008de00:	00800034 	movhi	r2,0
2008de04:	10818e04 	addi	r2,r2,1592
2008de08:	d8803115 	stw	r2,196(sp)
2008de0c:	003f0406 	br	2008da20 <__flash_rwdata_start+0xfffeee4c>
2008de10:	d9002f17 	ldw	r4,188(sp)
2008de14:	b80b883a 	mov	r5,r23
2008de18:	b00d883a 	mov	r6,r22
2008de1c:	0094fec0 	call	20094fec <__ssprint_r>
2008de20:	103a3d1e 	bne	r2,zero,2008c718 <__flash_rwdata_start+0xfffedb44>
2008de24:	dc002617 	ldw	r16,152(sp)
2008de28:	d8c02017 	ldw	r3,128(sp)
2008de2c:	da000404 	addi	r8,sp,16
2008de30:	003f4b06 	br	2008db60 <__flash_rwdata_start+0xfffeef8c>
2008de34:	02400184 	movi	r9,6
2008de38:	003f8f06 	br	2008dc78 <__flash_rwdata_start+0xfffef0a4>
2008de3c:	db002d17 	ldw	r12,180(sp)
2008de40:	14c00017 	ldw	r19,0(r2)
2008de44:	0039883a 	mov	fp,zero
2008de48:	63000104 	addi	r12,r12,4
2008de4c:	db002d15 	stw	r12,180(sp)
2008de50:	003bc706 	br	2008cd70 <__flash_rwdata_start+0xfffee19c>
2008de54:	d8c03117 	ldw	r3,196(sp)
2008de58:	b0e5c83a 	sub	r18,r22,r3
2008de5c:	003a8d06 	br	2008c894 <__flash_rwdata_start+0xfffedcc0>
2008de60:	da004015 	stw	r8,256(sp)
2008de64:	008c2f80 	call	2008c2f8 <strlen>
2008de68:	1025883a 	mov	r18,r2
2008de6c:	da004017 	ldw	r8,256(sp)
2008de70:	903bf20e 	bge	r18,zero,2008ce3c <__flash_rwdata_start+0xfffee268>
2008de74:	0005883a 	mov	r2,zero
2008de78:	003bf006 	br	2008ce3c <__flash_rwdata_start+0xfffee268>
2008de7c:	d9002f17 	ldw	r4,188(sp)
2008de80:	b80b883a 	mov	r5,r23
2008de84:	b00d883a 	mov	r6,r22
2008de88:	0094fec0 	call	20094fec <__ssprint_r>
2008de8c:	103a221e 	bne	r2,zero,2008c718 <__flash_rwdata_start+0xfffedb44>
2008de90:	d8c02017 	ldw	r3,128(sp)
2008de94:	d8801f17 	ldw	r2,124(sp)
2008de98:	da000404 	addi	r8,sp,16
2008de9c:	db003317 	ldw	r12,204(sp)
2008dea0:	dac03117 	ldw	r11,196(sp)
2008dea4:	10800044 	addi	r2,r2,1
2008dea8:	1b07883a 	add	r3,r3,r12
2008deac:	42c00015 	stw	r11,0(r8)
2008deb0:	43000115 	stw	r12,4(r8)
2008deb4:	d8c02015 	stw	r3,128(sp)
2008deb8:	d8801f15 	stw	r2,124(sp)
2008debc:	010001c4 	movi	r4,7
2008dec0:	20bb210e 	bge	r4,r2,2008cb48 <__flash_rwdata_start+0xfffedf74>
2008dec4:	003da206 	br	2008d550 <__flash_rwdata_start+0xfffee97c>
2008dec8:	d8802604 	addi	r2,sp,152
2008decc:	d8800115 	stw	r2,4(sp)
2008ded0:	d9002f17 	ldw	r4,188(sp)
2008ded4:	d8802504 	addi	r2,sp,148
2008ded8:	d9403717 	ldw	r5,220(sp)
2008dedc:	d8800215 	stw	r2,8(sp)
2008dee0:	d8802104 	addi	r2,sp,132
2008dee4:	da400015 	stw	r9,0(sp)
2008dee8:	d8800315 	stw	r2,12(sp)
2008deec:	900d883a 	mov	r6,r18
2008def0:	01c000c4 	movi	r7,3
2008def4:	da004015 	stw	r8,256(sp)
2008def8:	da403f15 	stw	r9,252(sp)
2008defc:	00909d00 	call	200909d0 <_dtoa_r>
2008df00:	da403f17 	ldw	r9,252(sp)
2008df04:	da004017 	ldw	r8,256(sp)
2008df08:	d8803115 	stw	r2,196(sp)
2008df0c:	4839883a 	mov	fp,r9
2008df10:	dac03117 	ldw	r11,196(sp)
2008df14:	00801184 	movi	r2,70
2008df18:	5f15883a 	add	r10,r11,fp
2008df1c:	a8bf7c1e 	bne	r21,r2,2008dd10 <__flash_rwdata_start+0xfffef13c>
2008df20:	59000007 	ldb	r4,0(r11)
2008df24:	00800c04 	movi	r2,48
2008df28:	2080c826 	beq	r4,r2,2008e24c <___svfprintf_internal_r+0x1e54>
2008df2c:	d8c02617 	ldw	r3,152(sp)
2008df30:	50d5883a 	add	r10,r10,r3
2008df34:	003f7606 	br	2008dd10 <__flash_rwdata_start+0xfffef13c>
2008df38:	01000034 	movhi	r4,0
2008df3c:	21019f84 	addi	r4,r4,1662
2008df40:	d9003615 	stw	r4,216(sp)
2008df44:	003a9706 	br	2008c9a4 <__flash_rwdata_start+0xfffeddd0>
2008df48:	0025883a 	mov	r18,zero
2008df4c:	003dc306 	br	2008d65c <__flash_rwdata_start+0xfffeea88>
2008df50:	d9002f17 	ldw	r4,188(sp)
2008df54:	b80b883a 	mov	r5,r23
2008df58:	b00d883a 	mov	r6,r22
2008df5c:	0094fec0 	call	20094fec <__ssprint_r>
2008df60:	1039ed1e 	bne	r2,zero,2008c718 <__flash_rwdata_start+0xfffedb44>
2008df64:	d8c02017 	ldw	r3,128(sp)
2008df68:	da000404 	addi	r8,sp,16
2008df6c:	003dba06 	br	2008d658 <__flash_rwdata_start+0xfffeea84>
2008df70:	d9002f17 	ldw	r4,188(sp)
2008df74:	b80b883a 	mov	r5,r23
2008df78:	b00d883a 	mov	r6,r22
2008df7c:	0094fec0 	call	20094fec <__ssprint_r>
2008df80:	1039e51e 	bne	r2,zero,2008c718 <__flash_rwdata_start+0xfffedb44>
2008df84:	d8802617 	ldw	r2,152(sp)
2008df88:	d8c02017 	ldw	r3,128(sp)
2008df8c:	da000404 	addi	r8,sp,16
2008df90:	003e4106 	br	2008d898 <__flash_rwdata_start+0xfffeecc4>
2008df94:	03000034 	movhi	r12,0
2008df98:	63019b84 	addi	r12,r12,1646
2008df9c:	db002b15 	stw	r12,172(sp)
2008dfa0:	dac02b17 	ldw	r11,172(sp)
2008dfa4:	1c07883a 	add	r3,r3,r16
2008dfa8:	10800044 	addi	r2,r2,1
2008dfac:	42c00015 	stw	r11,0(r8)
2008dfb0:	44000115 	stw	r16,4(r8)
2008dfb4:	d8c02015 	stw	r3,128(sp)
2008dfb8:	d8801f15 	stw	r2,124(sp)
2008dfbc:	010001c4 	movi	r4,7
2008dfc0:	20bfae16 	blt	r4,r2,2008de7c <__flash_rwdata_start+0xfffef2a8>
2008dfc4:	42000204 	addi	r8,r8,8
2008dfc8:	003fb406 	br	2008de9c <__flash_rwdata_start+0xfffef2c8>
2008dfcc:	0021883a 	mov	r16,zero
2008dfd0:	003e4306 	br	2008d8e0 <__flash_rwdata_start+0xfffeed0c>
2008dfd4:	d9002f17 	ldw	r4,188(sp)
2008dfd8:	b80b883a 	mov	r5,r23
2008dfdc:	b00d883a 	mov	r6,r22
2008dfe0:	0094fec0 	call	20094fec <__ssprint_r>
2008dfe4:	1039cc1e 	bne	r2,zero,2008c718 <__flash_rwdata_start+0xfffedb44>
2008dfe8:	d8802617 	ldw	r2,152(sp)
2008dfec:	db003317 	ldw	r12,204(sp)
2008dff0:	d8c02017 	ldw	r3,128(sp)
2008dff4:	da000404 	addi	r8,sp,16
2008dff8:	6085c83a 	sub	r2,r12,r2
2008dffc:	003e3706 	br	2008d8dc <__flash_rwdata_start+0xfffeed08>
2008e000:	00800184 	movi	r2,6
2008e004:	1240012e 	bgeu	r2,r9,2008e00c <___svfprintf_internal_r+0x1c14>
2008e008:	1013883a 	mov	r9,r2
2008e00c:	4825883a 	mov	r18,r9
2008e010:	4805883a 	mov	r2,r9
2008e014:	4800a216 	blt	r9,zero,2008e2a0 <___svfprintf_internal_r+0x1ea8>
2008e018:	d8802a15 	stw	r2,168(sp)
2008e01c:	00800034 	movhi	r2,0
2008e020:	10819904 	addi	r2,r2,1636
2008e024:	d8803115 	stw	r2,196(sp)
2008e028:	dcc02d15 	stw	r19,180(sp)
2008e02c:	d8003215 	stw	zero,200(sp)
2008e030:	d8003415 	stw	zero,208(sp)
2008e034:	0005883a 	mov	r2,zero
2008e038:	003a2206 	br	2008c8c4 <__flash_rwdata_start+0xfffedcf0>
2008e03c:	03000034 	movhi	r12,0
2008e040:	63019f84 	addi	r12,r12,1662
2008e044:	db003615 	stw	r12,216(sp)
2008e048:	003ae506 	br	2008cbe0 <__flash_rwdata_start+0xfffee00c>
2008e04c:	d8c02617 	ldw	r3,152(sp)
2008e050:	00bfff44 	movi	r2,-3
2008e054:	18801516 	blt	r3,r2,2008e0ac <___svfprintf_internal_r+0x1cb4>
2008e058:	48c01416 	blt	r9,r3,2008e0ac <___svfprintf_internal_r+0x1cb4>
2008e05c:	d8c03415 	stw	r3,208(sp)
2008e060:	040019c4 	movi	r16,103
2008e064:	003f4906 	br	2008dd8c <__flash_rwdata_start+0xfffef1b8>
2008e068:	05400b44 	movi	r21,45
2008e06c:	dd402785 	stb	r21,158(sp)
2008e070:	003b1006 	br	2008ccb4 <__flash_rwdata_start+0xfffee0e0>
2008e074:	00c00b44 	movi	r3,45
2008e078:	d8802a15 	stw	r2,168(sp)
2008e07c:	dc402d17 	ldw	r17,180(sp)
2008e080:	d8c02785 	stb	r3,158(sp)
2008e084:	dcc02d15 	stw	r19,180(sp)
2008e088:	d8003215 	stw	zero,200(sp)
2008e08c:	00800b44 	movi	r2,45
2008e090:	003a0906 	br	2008c8b8 <__flash_rwdata_start+0xfffedce4>
2008e094:	01000034 	movhi	r4,0
2008e098:	21019b84 	addi	r4,r4,1646
2008e09c:	d9002b15 	stw	r4,172(sp)
2008e0a0:	003cc306 	br	2008d3b0 <__flash_rwdata_start+0xfffee7dc>
2008e0a4:	5005883a 	mov	r2,r10
2008e0a8:	003f2d06 	br	2008dd60 <__flash_rwdata_start+0xfffef18c>
2008e0ac:	843fff84 	addi	r16,r16,-2
2008e0b0:	1f3fffc4 	addi	fp,r3,-1
2008e0b4:	df002615 	stw	fp,152(sp)
2008e0b8:	dc0022c5 	stb	r16,139(sp)
2008e0bc:	e000a016 	blt	fp,zero,2008e340 <___svfprintf_internal_r+0x1f48>
2008e0c0:	00800ac4 	movi	r2,43
2008e0c4:	d8802305 	stb	r2,140(sp)
2008e0c8:	00800244 	movi	r2,9
2008e0cc:	1700800e 	bge	r2,fp,2008e2d0 <___svfprintf_internal_r+0x1ed8>
2008e0d0:	dd4022c4 	addi	r21,sp,139
2008e0d4:	dc002b15 	stw	r16,172(sp)
2008e0d8:	4025883a 	mov	r18,r8
2008e0dc:	a821883a 	mov	r16,r21
2008e0e0:	e009883a 	mov	r4,fp
2008e0e4:	01400284 	movi	r5,10
2008e0e8:	0088a180 	call	20088a18 <__modsi3>
2008e0ec:	10800c04 	addi	r2,r2,48
2008e0f0:	843fffc4 	addi	r16,r16,-1
2008e0f4:	e009883a 	mov	r4,fp
2008e0f8:	01400284 	movi	r5,10
2008e0fc:	80800005 	stb	r2,0(r16)
2008e100:	00889c40 	call	200889c4 <__divsi3>
2008e104:	1039883a 	mov	fp,r2
2008e108:	00800244 	movi	r2,9
2008e10c:	173ff416 	blt	r2,fp,2008e0e0 <__flash_rwdata_start+0xfffef50c>
2008e110:	9011883a 	mov	r8,r18
2008e114:	e0800c04 	addi	r2,fp,48
2008e118:	8025883a 	mov	r18,r16
2008e11c:	913fffc4 	addi	r4,r18,-1
2008e120:	90bfffc5 	stb	r2,-1(r18)
2008e124:	dc002b17 	ldw	r16,172(sp)
2008e128:	25408e2e 	bgeu	r4,r21,2008e364 <___svfprintf_internal_r+0x1f6c>
2008e12c:	d9402384 	addi	r5,sp,142
2008e130:	2c8bc83a 	sub	r5,r5,r18
2008e134:	d8c02344 	addi	r3,sp,141
2008e138:	a94b883a 	add	r5,r21,r5
2008e13c:	00000106 	br	2008e144 <___svfprintf_internal_r+0x1d4c>
2008e140:	20800003 	ldbu	r2,0(r4)
2008e144:	18800005 	stb	r2,0(r3)
2008e148:	18c00044 	addi	r3,r3,1
2008e14c:	21000044 	addi	r4,r4,1
2008e150:	197ffb1e 	bne	r3,r5,2008e140 <__flash_rwdata_start+0xfffef56c>
2008e154:	d8802304 	addi	r2,sp,140
2008e158:	1485c83a 	sub	r2,r2,r18
2008e15c:	d8c02344 	addi	r3,sp,141
2008e160:	1885883a 	add	r2,r3,r2
2008e164:	dac03317 	ldw	r11,204(sp)
2008e168:	156bc83a 	sub	r21,r2,r21
2008e16c:	dd403a15 	stw	r21,232(sp)
2008e170:	00800044 	movi	r2,1
2008e174:	5d65883a 	add	r18,r11,r21
2008e178:	12c0770e 	bge	r2,r11,2008e358 <___svfprintf_internal_r+0x1f60>
2008e17c:	94800044 	addi	r18,r18,1
2008e180:	9005883a 	mov	r2,r18
2008e184:	90007216 	blt	r18,zero,2008e350 <___svfprintf_internal_r+0x1f58>
2008e188:	d8003415 	stw	zero,208(sp)
2008e18c:	003f0706 	br	2008ddac <__flash_rwdata_start+0xfffef1d8>
2008e190:	da402a15 	stw	r9,168(sp)
2008e194:	dd402783 	ldbu	r21,158(sp)
2008e198:	4825883a 	mov	r18,r9
2008e19c:	dcc02d15 	stw	r19,180(sp)
2008e1a0:	d8003215 	stw	zero,200(sp)
2008e1a4:	d8003415 	stw	zero,208(sp)
2008e1a8:	0039bf06 	br	2008c8a8 <__flash_rwdata_start+0xfffedcd4>
2008e1ac:	483eb21e 	bne	r9,zero,2008dc78 <__flash_rwdata_start+0xfffef0a4>
2008e1b0:	9013883a 	mov	r9,r18
2008e1b4:	003eb006 	br	2008dc78 <__flash_rwdata_start+0xfffef0a4>
2008e1b8:	d9002f17 	ldw	r4,188(sp)
2008e1bc:	b80b883a 	mov	r5,r23
2008e1c0:	b00d883a 	mov	r6,r22
2008e1c4:	0094fec0 	call	20094fec <__ssprint_r>
2008e1c8:	1039531e 	bne	r2,zero,2008c718 <__flash_rwdata_start+0xfffedb44>
2008e1cc:	dc002617 	ldw	r16,152(sp)
2008e1d0:	d8c02017 	ldw	r3,128(sp)
2008e1d4:	d8801f17 	ldw	r2,124(sp)
2008e1d8:	da000404 	addi	r8,sp,16
2008e1dc:	003e7106 	br	2008dba4 <__flash_rwdata_start+0xfffeefd0>
2008e1e0:	00c00b44 	movi	r3,45
2008e1e4:	64a0003c 	xorhi	r18,r12,32768
2008e1e8:	d8c02a05 	stb	r3,168(sp)
2008e1ec:	003ea806 	br	2008dc90 <__flash_rwdata_start+0xfffef0bc>
2008e1f0:	4f000044 	addi	fp,r9,1
2008e1f4:	003ead06 	br	2008dcac <__flash_rwdata_start+0xfffef0d8>
2008e1f8:	d8c03417 	ldw	r3,208(sp)
2008e1fc:	00c0410e 	bge	zero,r3,2008e304 <___svfprintf_internal_r+0x1f0c>
2008e200:	04800044 	movi	r18,1
2008e204:	dac03317 	ldw	r11,204(sp)
2008e208:	92e5883a 	add	r18,r18,r11
2008e20c:	9005883a 	mov	r2,r18
2008e210:	903ee60e 	bge	r18,zero,2008ddac <__flash_rwdata_start+0xfffef1d8>
2008e214:	0005883a 	mov	r2,zero
2008e218:	003ee406 	br	2008ddac <__flash_rwdata_start+0xfffef1d8>
2008e21c:	d8c02617 	ldw	r3,152(sp)
2008e220:	d8c03415 	stw	r3,208(sp)
2008e224:	00c0310e 	bge	zero,r3,2008e2ec <___svfprintf_internal_r+0x1ef4>
2008e228:	48001f1e 	bne	r9,zero,2008e2a8 <___svfprintf_internal_r+0x1eb0>
2008e22c:	8c40004c 	andi	r17,r17,1
2008e230:	88001d1e 	bne	r17,zero,2008e2a8 <___svfprintf_internal_r+0x1eb0>
2008e234:	1805883a 	mov	r2,r3
2008e238:	183edb0e 	bge	r3,zero,2008dda8 <__flash_rwdata_start+0xfffef1d4>
2008e23c:	0005883a 	mov	r2,zero
2008e240:	003ed906 	br	2008dda8 <__flash_rwdata_start+0xfffef1d4>
2008e244:	d8802117 	ldw	r2,132(sp)
2008e248:	003ec506 	br	2008dd60 <__flash_rwdata_start+0xfffef18c>
2008e24c:	d9003717 	ldw	r4,220(sp)
2008e250:	900b883a 	mov	r5,r18
2008e254:	000d883a 	mov	r6,zero
2008e258:	000f883a 	mov	r7,zero
2008e25c:	da004015 	stw	r8,256(sp)
2008e260:	da403f15 	stw	r9,252(sp)
2008e264:	da803e15 	stw	r10,248(sp)
2008e268:	0098afc0 	call	20098afc <__eqdf2>
2008e26c:	da004017 	ldw	r8,256(sp)
2008e270:	da403f17 	ldw	r9,252(sp)
2008e274:	da803e17 	ldw	r10,248(sp)
2008e278:	103f2c26 	beq	r2,zero,2008df2c <__flash_rwdata_start+0xfffef358>
2008e27c:	00800044 	movi	r2,1
2008e280:	1707c83a 	sub	r3,r2,fp
2008e284:	d8c02615 	stw	r3,152(sp)
2008e288:	003f2906 	br	2008df30 <__flash_rwdata_start+0xfffef35c>
2008e28c:	db003417 	ldw	r12,208(sp)
2008e290:	64800044 	addi	r18,r12,1
2008e294:	9005883a 	mov	r2,r18
2008e298:	903ec40e 	bge	r18,zero,2008ddac <__flash_rwdata_start+0xfffef1d8>
2008e29c:	003fdd06 	br	2008e214 <__flash_rwdata_start+0xfffef640>
2008e2a0:	0005883a 	mov	r2,zero
2008e2a4:	003f5c06 	br	2008e018 <__flash_rwdata_start+0xfffef444>
2008e2a8:	dac03417 	ldw	r11,208(sp)
2008e2ac:	4a400044 	addi	r9,r9,1
2008e2b0:	5a65883a 	add	r18,r11,r9
2008e2b4:	9005883a 	mov	r2,r18
2008e2b8:	903ebc0e 	bge	r18,zero,2008ddac <__flash_rwdata_start+0xfffef1d8>
2008e2bc:	003fd506 	br	2008e214 <__flash_rwdata_start+0xfffef640>
2008e2c0:	00800034 	movhi	r2,0
2008e2c4:	10819b84 	addi	r2,r2,1646
2008e2c8:	d8802b15 	stw	r2,172(sp)
2008e2cc:	003d2b06 	br	2008d77c <__flash_rwdata_start+0xfffeeba8>
2008e2d0:	00800c04 	movi	r2,48
2008e2d4:	e0c00c04 	addi	r3,fp,48
2008e2d8:	d8802345 	stb	r2,141(sp)
2008e2dc:	d8c02385 	stb	r3,142(sp)
2008e2e0:	d88023c4 	addi	r2,sp,143
2008e2e4:	dd4022c4 	addi	r21,sp,139
2008e2e8:	003f9e06 	br	2008e164 <__flash_rwdata_start+0xfffef590>
2008e2ec:	4800081e 	bne	r9,zero,2008e310 <___svfprintf_internal_r+0x1f18>
2008e2f0:	8c40004c 	andi	r17,r17,1
2008e2f4:	8800061e 	bne	r17,zero,2008e310 <___svfprintf_internal_r+0x1f18>
2008e2f8:	00800044 	movi	r2,1
2008e2fc:	1025883a 	mov	r18,r2
2008e300:	003eaa06 	br	2008ddac <__flash_rwdata_start+0xfffef1d8>
2008e304:	04800084 	movi	r18,2
2008e308:	90e5c83a 	sub	r18,r18,r3
2008e30c:	003fbd06 	br	2008e204 <__flash_rwdata_start+0xfffef630>
2008e310:	4c800084 	addi	r18,r9,2
2008e314:	9005883a 	mov	r2,r18
2008e318:	903ea40e 	bge	r18,zero,2008ddac <__flash_rwdata_start+0xfffef1d8>
2008e31c:	003fbd06 	br	2008e214 <__flash_rwdata_start+0xfffef640>
2008e320:	dac02d17 	ldw	r11,180(sp)
2008e324:	5a400017 	ldw	r9,0(r11)
2008e328:	5ac00104 	addi	r11,r11,4
2008e32c:	dac02d15 	stw	r11,180(sp)
2008e330:	483e410e 	bge	r9,zero,2008dc38 <__flash_rwdata_start+0xfffef064>
2008e334:	027fffc4 	movi	r9,-1
2008e338:	1c000047 	ldb	r16,1(r3)
2008e33c:	00388406 	br	2008c550 <__flash_rwdata_start+0xfffed97c>
2008e340:	00800b44 	movi	r2,45
2008e344:	0739c83a 	sub	fp,zero,fp
2008e348:	d8802305 	stb	r2,140(sp)
2008e34c:	003f5e06 	br	2008e0c8 <__flash_rwdata_start+0xfffef4f4>
2008e350:	0005883a 	mov	r2,zero
2008e354:	003f8c06 	br	2008e188 <__flash_rwdata_start+0xfffef5b4>
2008e358:	88a2703a 	and	r17,r17,r2
2008e35c:	883f8826 	beq	r17,zero,2008e180 <__flash_rwdata_start+0xfffef5ac>
2008e360:	003f8606 	br	2008e17c <__flash_rwdata_start+0xfffef5a8>
2008e364:	d8802344 	addi	r2,sp,141
2008e368:	003f7e06 	br	2008e164 <__flash_rwdata_start+0xfffef590>
2008e36c:	d8c02617 	ldw	r3,152(sp)
2008e370:	003f4f06 	br	2008e0b0 <__flash_rwdata_start+0xfffef4dc>
2008e374:	dac02f17 	ldw	r11,188(sp)
2008e378:	00800304 	movi	r2,12
2008e37c:	58800015 	stw	r2,0(r11)
2008e380:	00bfffc4 	movi	r2,-1
2008e384:	0038e806 	br	2008c728 <__flash_rwdata_start+0xfffedb54>

2008e388 <___vfprintf_internal_r>:
2008e388:	deffb604 	addi	sp,sp,-296
2008e38c:	dfc04915 	stw	ra,292(sp)
2008e390:	ddc04715 	stw	r23,284(sp)
2008e394:	dd804615 	stw	r22,280(sp)
2008e398:	282f883a 	mov	r23,r5
2008e39c:	202d883a 	mov	r22,r4
2008e3a0:	d9802a15 	stw	r6,168(sp)
2008e3a4:	d9c02d15 	stw	r7,180(sp)
2008e3a8:	df004815 	stw	fp,288(sp)
2008e3ac:	dd404515 	stw	r21,276(sp)
2008e3b0:	dd004415 	stw	r20,272(sp)
2008e3b4:	dcc04315 	stw	r19,268(sp)
2008e3b8:	dc804215 	stw	r18,264(sp)
2008e3bc:	dc404115 	stw	r17,260(sp)
2008e3c0:	dc004015 	stw	r16,256(sp)
2008e3c4:	00932340 	call	20093234 <_localeconv_r>
2008e3c8:	10800017 	ldw	r2,0(r2)
2008e3cc:	1009883a 	mov	r4,r2
2008e3d0:	d8803515 	stw	r2,212(sp)
2008e3d4:	008c2f80 	call	2008c2f8 <strlen>
2008e3d8:	d8803815 	stw	r2,224(sp)
2008e3dc:	b0000226 	beq	r22,zero,2008e3e8 <___vfprintf_internal_r+0x60>
2008e3e0:	b0800e17 	ldw	r2,56(r22)
2008e3e4:	1000e126 	beq	r2,zero,2008e76c <___vfprintf_internal_r+0x3e4>
2008e3e8:	b880030b 	ldhu	r2,12(r23)
2008e3ec:	10c8000c 	andi	r3,r2,8192
2008e3f0:	1800061e 	bne	r3,zero,2008e40c <___vfprintf_internal_r+0x84>
2008e3f4:	b9001917 	ldw	r4,100(r23)
2008e3f8:	00f7ffc4 	movi	r3,-8193
2008e3fc:	10880014 	ori	r2,r2,8192
2008e400:	20c6703a 	and	r3,r4,r3
2008e404:	b880030d 	sth	r2,12(r23)
2008e408:	b8c01915 	stw	r3,100(r23)
2008e40c:	10c0020c 	andi	r3,r2,8
2008e410:	1800a726 	beq	r3,zero,2008e6b0 <___vfprintf_internal_r+0x328>
2008e414:	b8c00417 	ldw	r3,16(r23)
2008e418:	1800a526 	beq	r3,zero,2008e6b0 <___vfprintf_internal_r+0x328>
2008e41c:	1080068c 	andi	r2,r2,26
2008e420:	00c00284 	movi	r3,10
2008e424:	10c0aa26 	beq	r2,r3,2008e6d0 <___vfprintf_internal_r+0x348>
2008e428:	dac01e04 	addi	r11,sp,120
2008e42c:	db001dc4 	addi	r12,sp,119
2008e430:	d8800404 	addi	r2,sp,16
2008e434:	05000034 	movhi	r20,0
2008e438:	dac02815 	stw	r11,160(sp)
2008e43c:	5b17c83a 	sub	r11,r11,r12
2008e440:	a501a384 	addi	r20,r20,1678
2008e444:	db002915 	stw	r12,164(sp)
2008e448:	d8801e15 	stw	r2,120(sp)
2008e44c:	d8002015 	stw	zero,128(sp)
2008e450:	d8001f15 	stw	zero,124(sp)
2008e454:	d8003315 	stw	zero,204(sp)
2008e458:	d8003715 	stw	zero,220(sp)
2008e45c:	d8003915 	stw	zero,228(sp)
2008e460:	1011883a 	mov	r8,r2
2008e464:	d8003b15 	stw	zero,236(sp)
2008e468:	d8003a15 	stw	zero,232(sp)
2008e46c:	d8002f15 	stw	zero,188(sp)
2008e470:	dac03c15 	stw	r11,240(sp)
2008e474:	db002a17 	ldw	r12,168(sp)
2008e478:	60800007 	ldb	r2,0(r12)
2008e47c:	1000be26 	beq	r2,zero,2008e778 <___vfprintf_internal_r+0x3f0>
2008e480:	00c00944 	movi	r3,37
2008e484:	10c0bc26 	beq	r2,r3,2008e778 <___vfprintf_internal_r+0x3f0>
2008e488:	6021883a 	mov	r16,r12
2008e48c:	00000106 	br	2008e494 <___vfprintf_internal_r+0x10c>
2008e490:	10c08426 	beq	r2,r3,2008e6a4 <___vfprintf_internal_r+0x31c>
2008e494:	84000044 	addi	r16,r16,1
2008e498:	80800007 	ldb	r2,0(r16)
2008e49c:	103ffc1e 	bne	r2,zero,2008e490 <__flash_rwdata_start+0xfffef8bc>
2008e4a0:	dac02a17 	ldw	r11,168(sp)
2008e4a4:	82e3c83a 	sub	r17,r16,r11
2008e4a8:	88000f26 	beq	r17,zero,2008e4e8 <___vfprintf_internal_r+0x160>
2008e4ac:	d8c02017 	ldw	r3,128(sp)
2008e4b0:	d8801f17 	ldw	r2,124(sp)
2008e4b4:	dac02a17 	ldw	r11,168(sp)
2008e4b8:	1c47883a 	add	r3,r3,r17
2008e4bc:	10800044 	addi	r2,r2,1
2008e4c0:	d8c02015 	stw	r3,128(sp)
2008e4c4:	42c00015 	stw	r11,0(r8)
2008e4c8:	44400115 	stw	r17,4(r8)
2008e4cc:	d8801f15 	stw	r2,124(sp)
2008e4d0:	00c001c4 	movi	r3,7
2008e4d4:	18809316 	blt	r3,r2,2008e724 <___vfprintf_internal_r+0x39c>
2008e4d8:	42000204 	addi	r8,r8,8
2008e4dc:	db002f17 	ldw	r12,188(sp)
2008e4e0:	6459883a 	add	r12,r12,r17
2008e4e4:	db002f15 	stw	r12,188(sp)
2008e4e8:	80800007 	ldb	r2,0(r16)
2008e4ec:	10009426 	beq	r2,zero,2008e740 <___vfprintf_internal_r+0x3b8>
2008e4f0:	80800044 	addi	r2,r16,1
2008e4f4:	84000047 	ldb	r16,1(r16)
2008e4f8:	d8002785 	stb	zero,158(sp)
2008e4fc:	000d883a 	mov	r6,zero
2008e500:	027fffc4 	movi	r9,-1
2008e504:	d8002e15 	stw	zero,184(sp)
2008e508:	0023883a 	mov	r17,zero
2008e50c:	01001604 	movi	r4,88
2008e510:	01400244 	movi	r5,9
2008e514:	02800a84 	movi	r10,42
2008e518:	01c01b04 	movi	r7,108
2008e51c:	10c00044 	addi	r3,r2,1
2008e520:	80bff804 	addi	r2,r16,-32
2008e524:	2082cd36 	bltu	r4,r2,2008f05c <___vfprintf_internal_r+0xcd4>
2008e528:	100490ba 	slli	r2,r2,2
2008e52c:	02c80274 	movhi	r11,8201
2008e530:	5af95004 	addi	r11,r11,-6848
2008e534:	12c5883a 	add	r2,r2,r11
2008e538:	10800017 	ldw	r2,0(r2)
2008e53c:	1000683a 	jmp	r2
2008e540:	2008ee74 	orhi	zero,r4,9145
2008e544:	2008f05c 	xori	zero,r4,9153
2008e548:	2008f05c 	xori	zero,r4,9153
2008e54c:	2008efc4 	addi	zero,r4,9151
2008e550:	2008f05c 	xori	zero,r4,9153
2008e554:	2008f05c 	xori	zero,r4,9153
2008e558:	2008f05c 	xori	zero,r4,9153
2008e55c:	2008f05c 	xori	zero,r4,9153
2008e560:	2008f05c 	xori	zero,r4,9153
2008e564:	2008f05c 	xori	zero,r4,9153
2008e568:	2008ee94 	ori	zero,r4,9146
2008e56c:	2008eec0 	call	22008eec <__flash_rwdata_start+0x1f6a318>
2008e570:	2008f05c 	xori	zero,r4,9153
2008e574:	2008e780 	call	22008e78 <__flash_rwdata_start+0x1f6a2a4>
2008e578:	2008e790 	cmplti	zero,r4,9118
2008e57c:	2008f05c 	xori	zero,r4,9153
2008e580:	2008e7d0 	cmplti	zero,r4,9119
2008e584:	2008e7e0 	cmpeqi	zero,r4,9119
2008e588:	2008e7e0 	cmpeqi	zero,r4,9119
2008e58c:	2008e7e0 	cmpeqi	zero,r4,9119
2008e590:	2008e7e0 	cmpeqi	zero,r4,9119
2008e594:	2008e7e0 	cmpeqi	zero,r4,9119
2008e598:	2008e7e0 	cmpeqi	zero,r4,9119
2008e59c:	2008e7e0 	cmpeqi	zero,r4,9119
2008e5a0:	2008e7e0 	cmpeqi	zero,r4,9119
2008e5a4:	2008e7e0 	cmpeqi	zero,r4,9119
2008e5a8:	2008f05c 	xori	zero,r4,9153
2008e5ac:	2008f05c 	xori	zero,r4,9153
2008e5b0:	2008f05c 	xori	zero,r4,9153
2008e5b4:	2008f05c 	xori	zero,r4,9153
2008e5b8:	2008f05c 	xori	zero,r4,9153
2008e5bc:	2008f05c 	xori	zero,r4,9153
2008e5c0:	2008f05c 	xori	zero,r4,9153
2008e5c4:	2008f05c 	xori	zero,r4,9153
2008e5c8:	2008f05c 	xori	zero,r4,9153
2008e5cc:	2008f05c 	xori	zero,r4,9153
2008e5d0:	2008e814 	ori	zero,r4,9120
2008e5d4:	2008ec84 	addi	zero,r4,9138
2008e5d8:	2008f05c 	xori	zero,r4,9153
2008e5dc:	2008ec84 	addi	zero,r4,9138
2008e5e0:	2008f05c 	xori	zero,r4,9153
2008e5e4:	2008f05c 	xori	zero,r4,9153
2008e5e8:	2008f05c 	xori	zero,r4,9153
2008e5ec:	2008f05c 	xori	zero,r4,9153
2008e5f0:	2008ed70 	cmpltui	zero,r4,9141
2008e5f4:	2008f05c 	xori	zero,r4,9153
2008e5f8:	2008f05c 	xori	zero,r4,9153
2008e5fc:	2008ec18 	cmpnei	zero,r4,9136
2008e600:	2008f05c 	xori	zero,r4,9153
2008e604:	2008f05c 	xori	zero,r4,9153
2008e608:	2008f05c 	xori	zero,r4,9153
2008e60c:	2008f05c 	xori	zero,r4,9153
2008e610:	2008f05c 	xori	zero,r4,9153
2008e614:	2008ec54 	ori	zero,r4,9137
2008e618:	2008f05c 	xori	zero,r4,9153
2008e61c:	2008f05c 	xori	zero,r4,9153
2008e620:	2008ee18 	cmpnei	zero,r4,9144
2008e624:	2008f05c 	xori	zero,r4,9153
2008e628:	2008f05c 	xori	zero,r4,9153
2008e62c:	2008f05c 	xori	zero,r4,9153
2008e630:	2008f05c 	xori	zero,r4,9153
2008e634:	2008f05c 	xori	zero,r4,9153
2008e638:	2008f05c 	xori	zero,r4,9153
2008e63c:	2008f05c 	xori	zero,r4,9153
2008e640:	2008f05c 	xori	zero,r4,9153
2008e644:	2008f05c 	xori	zero,r4,9153
2008e648:	2008f05c 	xori	zero,r4,9153
2008e64c:	2008eed0 	cmplti	zero,r4,9147
2008e650:	2008ed80 	call	22008ed8 <__flash_rwdata_start+0x1f6a304>
2008e654:	2008ec84 	addi	zero,r4,9138
2008e658:	2008ec84 	addi	zero,r4,9138
2008e65c:	2008ec84 	addi	zero,r4,9138
2008e660:	2008edc0 	call	22008edc <__flash_rwdata_start+0x1f6a308>
2008e664:	2008ed80 	call	22008ed8 <__flash_rwdata_start+0x1f6a304>
2008e668:	2008f05c 	xori	zero,r4,9153
2008e66c:	2008f05c 	xori	zero,r4,9153
2008e670:	2008edd0 	cmplti	zero,r4,9143
2008e674:	2008f05c 	xori	zero,r4,9153
2008e678:	2008ede4 	muli	zero,r4,9143
2008e67c:	2008f020 	cmpeqi	zero,r4,9152
2008e680:	2008ed28 	cmpgeui	zero,r4,9140
2008e684:	2008efd4 	ori	zero,r4,9151
2008e688:	2008f05c 	xori	zero,r4,9153
2008e68c:	2008ef10 	cmplti	zero,r4,9148
2008e690:	2008f05c 	xori	zero,r4,9153
2008e694:	2008efe4 	muli	zero,r4,9151
2008e698:	2008f05c 	xori	zero,r4,9153
2008e69c:	2008f05c 	xori	zero,r4,9153
2008e6a0:	2008ef84 	addi	zero,r4,9150
2008e6a4:	db002a17 	ldw	r12,168(sp)
2008e6a8:	8323c83a 	sub	r17,r16,r12
2008e6ac:	003f7e06 	br	2008e4a8 <__flash_rwdata_start+0xfffef8d4>
2008e6b0:	b009883a 	mov	r4,r22
2008e6b4:	b80b883a 	mov	r5,r23
2008e6b8:	00904e80 	call	200904e8 <__swsetup_r>
2008e6bc:	10000c1e 	bne	r2,zero,2008e6f0 <___vfprintf_internal_r+0x368>
2008e6c0:	b880030b 	ldhu	r2,12(r23)
2008e6c4:	00c00284 	movi	r3,10
2008e6c8:	1080068c 	andi	r2,r2,26
2008e6cc:	10ff561e 	bne	r2,r3,2008e428 <__flash_rwdata_start+0xfffef854>
2008e6d0:	b880038f 	ldh	r2,14(r23)
2008e6d4:	103f5416 	blt	r2,zero,2008e428 <__flash_rwdata_start+0xfffef854>
2008e6d8:	d9802a17 	ldw	r6,168(sp)
2008e6dc:	d9c02d17 	ldw	r7,180(sp)
2008e6e0:	b009883a 	mov	r4,r22
2008e6e4:	b80b883a 	mov	r5,r23
2008e6e8:	00902fc0 	call	200902fc <__sbprintf>
2008e6ec:	00000106 	br	2008e6f4 <___vfprintf_internal_r+0x36c>
2008e6f0:	00bfffc4 	movi	r2,-1
2008e6f4:	dfc04917 	ldw	ra,292(sp)
2008e6f8:	df004817 	ldw	fp,288(sp)
2008e6fc:	ddc04717 	ldw	r23,284(sp)
2008e700:	dd804617 	ldw	r22,280(sp)
2008e704:	dd404517 	ldw	r21,276(sp)
2008e708:	dd004417 	ldw	r20,272(sp)
2008e70c:	dcc04317 	ldw	r19,268(sp)
2008e710:	dc804217 	ldw	r18,264(sp)
2008e714:	dc404117 	ldw	r17,260(sp)
2008e718:	dc004017 	ldw	r16,256(sp)
2008e71c:	dec04a04 	addi	sp,sp,296
2008e720:	f800283a 	ret
2008e724:	b009883a 	mov	r4,r22
2008e728:	b80b883a 	mov	r5,r23
2008e72c:	d9801e04 	addi	r6,sp,120
2008e730:	00962ec0 	call	200962ec <__sprint_r>
2008e734:	1000081e 	bne	r2,zero,2008e758 <___vfprintf_internal_r+0x3d0>
2008e738:	da000404 	addi	r8,sp,16
2008e73c:	003f6706 	br	2008e4dc <__flash_rwdata_start+0xfffef908>
2008e740:	d8802017 	ldw	r2,128(sp)
2008e744:	10000426 	beq	r2,zero,2008e758 <___vfprintf_internal_r+0x3d0>
2008e748:	b009883a 	mov	r4,r22
2008e74c:	b80b883a 	mov	r5,r23
2008e750:	d9801e04 	addi	r6,sp,120
2008e754:	00962ec0 	call	200962ec <__sprint_r>
2008e758:	b880030b 	ldhu	r2,12(r23)
2008e75c:	1080100c 	andi	r2,r2,64
2008e760:	103fe31e 	bne	r2,zero,2008e6f0 <__flash_rwdata_start+0xfffefb1c>
2008e764:	d8802f17 	ldw	r2,188(sp)
2008e768:	003fe206 	br	2008e6f4 <__flash_rwdata_start+0xfffefb20>
2008e76c:	b009883a 	mov	r4,r22
2008e770:	00926dc0 	call	200926dc <__sinit>
2008e774:	003f1c06 	br	2008e3e8 <__flash_rwdata_start+0xfffef814>
2008e778:	dc002a17 	ldw	r16,168(sp)
2008e77c:	003f5a06 	br	2008e4e8 <__flash_rwdata_start+0xfffef914>
2008e780:	1805883a 	mov	r2,r3
2008e784:	8c400114 	ori	r17,r17,4
2008e788:	1c000007 	ldb	r16,0(r3)
2008e78c:	003f6306 	br	2008e51c <__flash_rwdata_start+0xfffef948>
2008e790:	1c000007 	ldb	r16,0(r3)
2008e794:	18800044 	addi	r2,r3,1
2008e798:	8286ad26 	beq	r16,r10,20090250 <___vfprintf_internal_r+0x1ec8>
2008e79c:	82fff404 	addi	r11,r16,-48
2008e7a0:	1007883a 	mov	r3,r2
2008e7a4:	0013883a 	mov	r9,zero
2008e7a8:	2aff5d36 	bltu	r5,r11,2008e520 <__flash_rwdata_start+0xfffef94c>
2008e7ac:	1c000007 	ldb	r16,0(r3)
2008e7b0:	4a4002a4 	muli	r9,r9,10
2008e7b4:	18c00044 	addi	r3,r3,1
2008e7b8:	5a53883a 	add	r9,r11,r9
2008e7bc:	82fff404 	addi	r11,r16,-48
2008e7c0:	2afffa2e 	bgeu	r5,r11,2008e7ac <__flash_rwdata_start+0xfffefbd8>
2008e7c4:	483f560e 	bge	r9,zero,2008e520 <__flash_rwdata_start+0xfffef94c>
2008e7c8:	027fffc4 	movi	r9,-1
2008e7cc:	003f5406 	br	2008e520 <__flash_rwdata_start+0xfffef94c>
2008e7d0:	8c402014 	ori	r17,r17,128
2008e7d4:	1805883a 	mov	r2,r3
2008e7d8:	1c000007 	ldb	r16,0(r3)
2008e7dc:	003f4f06 	br	2008e51c <__flash_rwdata_start+0xfffef948>
2008e7e0:	1805883a 	mov	r2,r3
2008e7e4:	d8002e15 	stw	zero,184(sp)
2008e7e8:	82fff404 	addi	r11,r16,-48
2008e7ec:	0019883a 	mov	r12,zero
2008e7f0:	14000007 	ldb	r16,0(r2)
2008e7f4:	630002a4 	muli	r12,r12,10
2008e7f8:	18c00044 	addi	r3,r3,1
2008e7fc:	1805883a 	mov	r2,r3
2008e800:	62d9883a 	add	r12,r12,r11
2008e804:	82fff404 	addi	r11,r16,-48
2008e808:	2afff92e 	bgeu	r5,r11,2008e7f0 <__flash_rwdata_start+0xfffefc1c>
2008e80c:	db002e15 	stw	r12,184(sp)
2008e810:	003f4306 	br	2008e520 <__flash_rwdata_start+0xfffef94c>
2008e814:	8c400414 	ori	r17,r17,16
2008e818:	d8c02a15 	stw	r3,168(sp)
2008e81c:	d9802785 	stb	r6,158(sp)
2008e820:	8880080c 	andi	r2,r17,32
2008e824:	d8c02d17 	ldw	r3,180(sp)
2008e828:	10015a26 	beq	r2,zero,2008ed94 <___vfprintf_internal_r+0xa0c>
2008e82c:	db002d17 	ldw	r12,180(sp)
2008e830:	18800117 	ldw	r2,4(r3)
2008e834:	1cc00017 	ldw	r19,0(r3)
2008e838:	63000204 	addi	r12,r12,8
2008e83c:	db002d15 	stw	r12,180(sp)
2008e840:	1039883a 	mov	fp,r2
2008e844:	10044516 	blt	r2,zero,2008f95c <___vfprintf_internal_r+0x15d4>
2008e848:	dd402783 	ldbu	r21,158(sp)
2008e84c:	da403215 	stw	r9,200(sp)
2008e850:	00800044 	movi	r2,1
2008e854:	9f06b03a 	or	r3,r19,fp
2008e858:	48000216 	blt	r9,zero,2008e864 <___vfprintf_internal_r+0x4dc>
2008e85c:	013fdfc4 	movi	r4,-129
2008e860:	8922703a 	and	r17,r17,r4
2008e864:	1802071e 	bne	r3,zero,2008f084 <___vfprintf_internal_r+0xcfc>
2008e868:	4802fa26 	beq	r9,zero,2008f454 <___vfprintf_internal_r+0x10cc>
2008e86c:	10803fcc 	andi	r2,r2,255
2008e870:	00c00044 	movi	r3,1
2008e874:	10c22926 	beq	r2,r3,2008f11c <___vfprintf_internal_r+0xd94>
2008e878:	00c00084 	movi	r3,2
2008e87c:	10c31726 	beq	r2,r3,2008f4dc <___vfprintf_internal_r+0x1154>
2008e880:	d8c01e04 	addi	r3,sp,120
2008e884:	9808d0fa 	srli	r4,r19,3
2008e888:	e00a977a 	slli	r5,fp,29
2008e88c:	e038d0fa 	srli	fp,fp,3
2008e890:	9cc001cc 	andi	r19,r19,7
2008e894:	98800c04 	addi	r2,r19,48
2008e898:	18ffffc4 	addi	r3,r3,-1
2008e89c:	2926b03a 	or	r19,r5,r4
2008e8a0:	18800005 	stb	r2,0(r3)
2008e8a4:	9f08b03a 	or	r4,r19,fp
2008e8a8:	203ff61e 	bne	r4,zero,2008e884 <__flash_rwdata_start+0xfffefcb0>
2008e8ac:	8900004c 	andi	r4,r17,1
2008e8b0:	d8c03115 	stw	r3,196(sp)
2008e8b4:	2003931e 	bne	r4,zero,2008f704 <___vfprintf_internal_r+0x137c>
2008e8b8:	dac02817 	ldw	r11,160(sp)
2008e8bc:	58e5c83a 	sub	r18,r11,r3
2008e8c0:	9005883a 	mov	r2,r18
2008e8c4:	9240010e 	bge	r18,r9,2008e8cc <___vfprintf_internal_r+0x544>
2008e8c8:	4805883a 	mov	r2,r9
2008e8cc:	d8802b15 	stw	r2,172(sp)
2008e8d0:	d8003415 	stw	zero,208(sp)
2008e8d4:	a8803fcc 	andi	r2,r21,255
2008e8d8:	1080201c 	xori	r2,r2,128
2008e8dc:	10bfe004 	addi	r2,r2,-128
2008e8e0:	10000326 	beq	r2,zero,2008e8f0 <___vfprintf_internal_r+0x568>
2008e8e4:	db002b17 	ldw	r12,172(sp)
2008e8e8:	63000044 	addi	r12,r12,1
2008e8ec:	db002b15 	stw	r12,172(sp)
2008e8f0:	88c0008c 	andi	r3,r17,2
2008e8f4:	d8c02c15 	stw	r3,176(sp)
2008e8f8:	18000326 	beq	r3,zero,2008e908 <___vfprintf_internal_r+0x580>
2008e8fc:	dac02b17 	ldw	r11,172(sp)
2008e900:	5ac00084 	addi	r11,r11,2
2008e904:	dac02b15 	stw	r11,172(sp)
2008e908:	8b00210c 	andi	r12,r17,132
2008e90c:	db003015 	stw	r12,192(sp)
2008e910:	6001da1e 	bne	r12,zero,2008f07c <___vfprintf_internal_r+0xcf4>
2008e914:	dac02e17 	ldw	r11,184(sp)
2008e918:	db002b17 	ldw	r12,172(sp)
2008e91c:	5b39c83a 	sub	fp,r11,r12
2008e920:	0701d60e 	bge	zero,fp,2008f07c <___vfprintf_internal_r+0xcf4>
2008e924:	02400404 	movi	r9,16
2008e928:	d8c02017 	ldw	r3,128(sp)
2008e92c:	d8801f17 	ldw	r2,124(sp)
2008e930:	4f053c0e 	bge	r9,fp,2008fe24 <___vfprintf_internal_r+0x1a9c>
2008e934:	01400034 	movhi	r5,0
2008e938:	2941a784 	addi	r5,r5,1694
2008e93c:	d9403615 	stw	r5,216(sp)
2008e940:	482b883a 	mov	r21,r9
2008e944:	04c001c4 	movi	r19,7
2008e948:	00000306 	br	2008e958 <___vfprintf_internal_r+0x5d0>
2008e94c:	e73ffc04 	addi	fp,fp,-16
2008e950:	42000204 	addi	r8,r8,8
2008e954:	af00130e 	bge	r21,fp,2008e9a4 <___vfprintf_internal_r+0x61c>
2008e958:	02c00034 	movhi	r11,0
2008e95c:	18c00404 	addi	r3,r3,16
2008e960:	10800044 	addi	r2,r2,1
2008e964:	5ac1a784 	addi	r11,r11,1694
2008e968:	42c00015 	stw	r11,0(r8)
2008e96c:	45400115 	stw	r21,4(r8)
2008e970:	d8c02015 	stw	r3,128(sp)
2008e974:	d8801f15 	stw	r2,124(sp)
2008e978:	98bff40e 	bge	r19,r2,2008e94c <__flash_rwdata_start+0xfffefd78>
2008e97c:	b009883a 	mov	r4,r22
2008e980:	b80b883a 	mov	r5,r23
2008e984:	d9801e04 	addi	r6,sp,120
2008e988:	00962ec0 	call	200962ec <__sprint_r>
2008e98c:	103f721e 	bne	r2,zero,2008e758 <__flash_rwdata_start+0xfffefb84>
2008e990:	e73ffc04 	addi	fp,fp,-16
2008e994:	d8c02017 	ldw	r3,128(sp)
2008e998:	d8801f17 	ldw	r2,124(sp)
2008e99c:	da000404 	addi	r8,sp,16
2008e9a0:	af3fed16 	blt	r21,fp,2008e958 <__flash_rwdata_start+0xfffefd84>
2008e9a4:	db003617 	ldw	r12,216(sp)
2008e9a8:	e0c7883a 	add	r3,fp,r3
2008e9ac:	10800044 	addi	r2,r2,1
2008e9b0:	43000015 	stw	r12,0(r8)
2008e9b4:	47000115 	stw	fp,4(r8)
2008e9b8:	d8c02015 	stw	r3,128(sp)
2008e9bc:	d8801f15 	stw	r2,124(sp)
2008e9c0:	010001c4 	movi	r4,7
2008e9c4:	20830e16 	blt	r4,r2,2008f600 <___vfprintf_internal_r+0x1278>
2008e9c8:	d8802787 	ldb	r2,158(sp)
2008e9cc:	42000204 	addi	r8,r8,8
2008e9d0:	10000c26 	beq	r2,zero,2008ea04 <___vfprintf_internal_r+0x67c>
2008e9d4:	d8801f17 	ldw	r2,124(sp)
2008e9d8:	d9002784 	addi	r4,sp,158
2008e9dc:	18c00044 	addi	r3,r3,1
2008e9e0:	10800044 	addi	r2,r2,1
2008e9e4:	41000015 	stw	r4,0(r8)
2008e9e8:	01000044 	movi	r4,1
2008e9ec:	41000115 	stw	r4,4(r8)
2008e9f0:	d8c02015 	stw	r3,128(sp)
2008e9f4:	d8801f15 	stw	r2,124(sp)
2008e9f8:	010001c4 	movi	r4,7
2008e9fc:	2082a716 	blt	r4,r2,2008f49c <___vfprintf_internal_r+0x1114>
2008ea00:	42000204 	addi	r8,r8,8
2008ea04:	dac02c17 	ldw	r11,176(sp)
2008ea08:	58000c26 	beq	r11,zero,2008ea3c <___vfprintf_internal_r+0x6b4>
2008ea0c:	d8801f17 	ldw	r2,124(sp)
2008ea10:	d9002704 	addi	r4,sp,156
2008ea14:	18c00084 	addi	r3,r3,2
2008ea18:	10800044 	addi	r2,r2,1
2008ea1c:	41000015 	stw	r4,0(r8)
2008ea20:	01000084 	movi	r4,2
2008ea24:	41000115 	stw	r4,4(r8)
2008ea28:	d8c02015 	stw	r3,128(sp)
2008ea2c:	d8801f15 	stw	r2,124(sp)
2008ea30:	010001c4 	movi	r4,7
2008ea34:	2082a116 	blt	r4,r2,2008f4bc <___vfprintf_internal_r+0x1134>
2008ea38:	42000204 	addi	r8,r8,8
2008ea3c:	db003017 	ldw	r12,192(sp)
2008ea40:	00802004 	movi	r2,128
2008ea44:	60820326 	beq	r12,r2,2008f254 <___vfprintf_internal_r+0xecc>
2008ea48:	db003217 	ldw	r12,200(sp)
2008ea4c:	64abc83a 	sub	r21,r12,r18
2008ea50:	0540260e 	bge	zero,r21,2008eaec <___vfprintf_internal_r+0x764>
2008ea54:	07000404 	movi	fp,16
2008ea58:	d8801f17 	ldw	r2,124(sp)
2008ea5c:	e544570e 	bge	fp,r21,2008fbbc <___vfprintf_internal_r+0x1834>
2008ea60:	01400034 	movhi	r5,0
2008ea64:	2941a384 	addi	r5,r5,1678
2008ea68:	d9402c15 	stw	r5,176(sp)
2008ea6c:	04c001c4 	movi	r19,7
2008ea70:	00000306 	br	2008ea80 <___vfprintf_internal_r+0x6f8>
2008ea74:	ad7ffc04 	addi	r21,r21,-16
2008ea78:	42000204 	addi	r8,r8,8
2008ea7c:	e540110e 	bge	fp,r21,2008eac4 <___vfprintf_internal_r+0x73c>
2008ea80:	18c00404 	addi	r3,r3,16
2008ea84:	10800044 	addi	r2,r2,1
2008ea88:	45000015 	stw	r20,0(r8)
2008ea8c:	47000115 	stw	fp,4(r8)
2008ea90:	d8c02015 	stw	r3,128(sp)
2008ea94:	d8801f15 	stw	r2,124(sp)
2008ea98:	98bff60e 	bge	r19,r2,2008ea74 <__flash_rwdata_start+0xfffefea0>
2008ea9c:	b009883a 	mov	r4,r22
2008eaa0:	b80b883a 	mov	r5,r23
2008eaa4:	d9801e04 	addi	r6,sp,120
2008eaa8:	00962ec0 	call	200962ec <__sprint_r>
2008eaac:	103f2a1e 	bne	r2,zero,2008e758 <__flash_rwdata_start+0xfffefb84>
2008eab0:	ad7ffc04 	addi	r21,r21,-16
2008eab4:	d8c02017 	ldw	r3,128(sp)
2008eab8:	d8801f17 	ldw	r2,124(sp)
2008eabc:	da000404 	addi	r8,sp,16
2008eac0:	e57fef16 	blt	fp,r21,2008ea80 <__flash_rwdata_start+0xfffefeac>
2008eac4:	dac02c17 	ldw	r11,176(sp)
2008eac8:	1d47883a 	add	r3,r3,r21
2008eacc:	10800044 	addi	r2,r2,1
2008ead0:	42c00015 	stw	r11,0(r8)
2008ead4:	45400115 	stw	r21,4(r8)
2008ead8:	d8c02015 	stw	r3,128(sp)
2008eadc:	d8801f15 	stw	r2,124(sp)
2008eae0:	010001c4 	movi	r4,7
2008eae4:	20826516 	blt	r4,r2,2008f47c <___vfprintf_internal_r+0x10f4>
2008eae8:	42000204 	addi	r8,r8,8
2008eaec:	8880400c 	andi	r2,r17,256
2008eaf0:	1001901e 	bne	r2,zero,2008f134 <___vfprintf_internal_r+0xdac>
2008eaf4:	d8801f17 	ldw	r2,124(sp)
2008eaf8:	db003117 	ldw	r12,196(sp)
2008eafc:	1c87883a 	add	r3,r3,r18
2008eb00:	10800044 	addi	r2,r2,1
2008eb04:	43000015 	stw	r12,0(r8)
2008eb08:	44800115 	stw	r18,4(r8)
2008eb0c:	d8c02015 	stw	r3,128(sp)
2008eb10:	d8801f15 	stw	r2,124(sp)
2008eb14:	010001c4 	movi	r4,7
2008eb18:	20824016 	blt	r4,r2,2008f41c <___vfprintf_internal_r+0x1094>
2008eb1c:	42000204 	addi	r8,r8,8
2008eb20:	8c40010c 	andi	r17,r17,4
2008eb24:	88003126 	beq	r17,zero,2008ebec <___vfprintf_internal_r+0x864>
2008eb28:	db002e17 	ldw	r12,184(sp)
2008eb2c:	dac02b17 	ldw	r11,172(sp)
2008eb30:	62e1c83a 	sub	r16,r12,r11
2008eb34:	04002d0e 	bge	zero,r16,2008ebec <___vfprintf_internal_r+0x864>
2008eb38:	04400404 	movi	r17,16
2008eb3c:	d8801f17 	ldw	r2,124(sp)
2008eb40:	8c05150e 	bge	r17,r16,2008ff98 <___vfprintf_internal_r+0x1c10>
2008eb44:	01000034 	movhi	r4,0
2008eb48:	2101a784 	addi	r4,r4,1694
2008eb4c:	d9003615 	stw	r4,216(sp)
2008eb50:	048001c4 	movi	r18,7
2008eb54:	00000306 	br	2008eb64 <___vfprintf_internal_r+0x7dc>
2008eb58:	843ffc04 	addi	r16,r16,-16
2008eb5c:	42000204 	addi	r8,r8,8
2008eb60:	8c00130e 	bge	r17,r16,2008ebb0 <___vfprintf_internal_r+0x828>
2008eb64:	01400034 	movhi	r5,0
2008eb68:	18c00404 	addi	r3,r3,16
2008eb6c:	10800044 	addi	r2,r2,1
2008eb70:	2941a784 	addi	r5,r5,1694
2008eb74:	41400015 	stw	r5,0(r8)
2008eb78:	44400115 	stw	r17,4(r8)
2008eb7c:	d8c02015 	stw	r3,128(sp)
2008eb80:	d8801f15 	stw	r2,124(sp)
2008eb84:	90bff40e 	bge	r18,r2,2008eb58 <__flash_rwdata_start+0xfffeff84>
2008eb88:	b009883a 	mov	r4,r22
2008eb8c:	b80b883a 	mov	r5,r23
2008eb90:	d9801e04 	addi	r6,sp,120
2008eb94:	00962ec0 	call	200962ec <__sprint_r>
2008eb98:	103eef1e 	bne	r2,zero,2008e758 <__flash_rwdata_start+0xfffefb84>
2008eb9c:	843ffc04 	addi	r16,r16,-16
2008eba0:	d8c02017 	ldw	r3,128(sp)
2008eba4:	d8801f17 	ldw	r2,124(sp)
2008eba8:	da000404 	addi	r8,sp,16
2008ebac:	8c3fed16 	blt	r17,r16,2008eb64 <__flash_rwdata_start+0xfffeff90>
2008ebb0:	dac03617 	ldw	r11,216(sp)
2008ebb4:	1c07883a 	add	r3,r3,r16
2008ebb8:	10800044 	addi	r2,r2,1
2008ebbc:	42c00015 	stw	r11,0(r8)
2008ebc0:	44000115 	stw	r16,4(r8)
2008ebc4:	d8c02015 	stw	r3,128(sp)
2008ebc8:	d8801f15 	stw	r2,124(sp)
2008ebcc:	010001c4 	movi	r4,7
2008ebd0:	2080060e 	bge	r4,r2,2008ebec <___vfprintf_internal_r+0x864>
2008ebd4:	b009883a 	mov	r4,r22
2008ebd8:	b80b883a 	mov	r5,r23
2008ebdc:	d9801e04 	addi	r6,sp,120
2008ebe0:	00962ec0 	call	200962ec <__sprint_r>
2008ebe4:	103edc1e 	bne	r2,zero,2008e758 <__flash_rwdata_start+0xfffefb84>
2008ebe8:	d8c02017 	ldw	r3,128(sp)
2008ebec:	d8802b17 	ldw	r2,172(sp)
2008ebf0:	db002e17 	ldw	r12,184(sp)
2008ebf4:	1300010e 	bge	r2,r12,2008ebfc <___vfprintf_internal_r+0x874>
2008ebf8:	6005883a 	mov	r2,r12
2008ebfc:	dac02f17 	ldw	r11,188(sp)
2008ec00:	5897883a 	add	r11,r11,r2
2008ec04:	dac02f15 	stw	r11,188(sp)
2008ec08:	18020c1e 	bne	r3,zero,2008f43c <___vfprintf_internal_r+0x10b4>
2008ec0c:	d8001f15 	stw	zero,124(sp)
2008ec10:	da000404 	addi	r8,sp,16
2008ec14:	003e1706 	br	2008e474 <__flash_rwdata_start+0xfffef8a0>
2008ec18:	8c400414 	ori	r17,r17,16
2008ec1c:	d8c02a15 	stw	r3,168(sp)
2008ec20:	8880080c 	andi	r2,r17,32
2008ec24:	10010126 	beq	r2,zero,2008f02c <___vfprintf_internal_r+0xca4>
2008ec28:	db002d17 	ldw	r12,180(sp)
2008ec2c:	0005883a 	mov	r2,zero
2008ec30:	64c00017 	ldw	r19,0(r12)
2008ec34:	67000117 	ldw	fp,4(r12)
2008ec38:	63000204 	addi	r12,r12,8
2008ec3c:	db002d15 	stw	r12,180(sp)
2008ec40:	9f06b03a 	or	r3,r19,fp
2008ec44:	d8002785 	stb	zero,158(sp)
2008ec48:	da403215 	stw	r9,200(sp)
2008ec4c:	002b883a 	mov	r21,zero
2008ec50:	003f0106 	br	2008e858 <__flash_rwdata_start+0xfffefc84>
2008ec54:	8c400414 	ori	r17,r17,16
2008ec58:	d8c02a15 	stw	r3,168(sp)
2008ec5c:	8880080c 	andi	r2,r17,32
2008ec60:	1000e326 	beq	r2,zero,2008eff0 <___vfprintf_internal_r+0xc68>
2008ec64:	dac02d17 	ldw	r11,180(sp)
2008ec68:	00800044 	movi	r2,1
2008ec6c:	5cc00017 	ldw	r19,0(r11)
2008ec70:	5f000117 	ldw	fp,4(r11)
2008ec74:	5ac00204 	addi	r11,r11,8
2008ec78:	dac02d15 	stw	r11,180(sp)
2008ec7c:	9f06b03a 	or	r3,r19,fp
2008ec80:	003ff006 	br	2008ec44 <__flash_rwdata_start+0xffff0070>
2008ec84:	db002d17 	ldw	r12,180(sp)
2008ec88:	dac02d17 	ldw	r11,180(sp)
2008ec8c:	d8c02a15 	stw	r3,168(sp)
2008ec90:	63000017 	ldw	r12,0(r12)
2008ec94:	5ac00117 	ldw	r11,4(r11)
2008ec98:	d9802785 	stb	r6,158(sp)
2008ec9c:	6009883a 	mov	r4,r12
2008eca0:	580b883a 	mov	r5,r11
2008eca4:	db003715 	stw	r12,220(sp)
2008eca8:	da003f15 	stw	r8,252(sp)
2008ecac:	da403e15 	stw	r9,248(sp)
2008ecb0:	dac03915 	stw	r11,228(sp)
2008ecb4:	0094cd80 	call	20094cd8 <__fpclassifyd>
2008ecb8:	db002d17 	ldw	r12,180(sp)
2008ecbc:	04800044 	movi	r18,1
2008ecc0:	da003f17 	ldw	r8,252(sp)
2008ecc4:	64c00204 	addi	r19,r12,8
2008ecc8:	da403e17 	ldw	r9,248(sp)
2008eccc:	d9003717 	ldw	r4,220(sp)
2008ecd0:	d9403917 	ldw	r5,228(sp)
2008ecd4:	14832b1e 	bne	r2,r18,2008f984 <___vfprintf_internal_r+0x15fc>
2008ecd8:	000d883a 	mov	r6,zero
2008ecdc:	000f883a 	mov	r7,zero
2008ece0:	0098c600 	call	20098c60 <__ledf2>
2008ece4:	da003f17 	ldw	r8,252(sp)
2008ece8:	1004b716 	blt	r2,zero,2008ffc8 <___vfprintf_internal_r+0x1c40>
2008ecec:	dd402783 	ldbu	r21,158(sp)
2008ecf0:	008011c4 	movi	r2,71
2008ecf4:	14040e0e 	bge	r2,r16,2008fd30 <___vfprintf_internal_r+0x19a8>
2008ecf8:	00c00034 	movhi	r3,0
2008ecfc:	18c18c04 	addi	r3,r3,1584
2008ed00:	d8c03115 	stw	r3,196(sp)
2008ed04:	02c000c4 	movi	r11,3
2008ed08:	00bfdfc4 	movi	r2,-129
2008ed0c:	dac02b15 	stw	r11,172(sp)
2008ed10:	88a2703a 	and	r17,r17,r2
2008ed14:	dcc02d15 	stw	r19,180(sp)
2008ed18:	5825883a 	mov	r18,r11
2008ed1c:	d8003215 	stw	zero,200(sp)
2008ed20:	d8003415 	stw	zero,208(sp)
2008ed24:	003eeb06 	br	2008e8d4 <__flash_rwdata_start+0xfffefd00>
2008ed28:	db002d17 	ldw	r12,180(sp)
2008ed2c:	00800c04 	movi	r2,48
2008ed30:	d8802705 	stb	r2,156(sp)
2008ed34:	64c00017 	ldw	r19,0(r12)
2008ed38:	00801e04 	movi	r2,120
2008ed3c:	d8802745 	stb	r2,157(sp)
2008ed40:	00800034 	movhi	r2,0
2008ed44:	10819404 	addi	r2,r2,1616
2008ed48:	63000104 	addi	r12,r12,4
2008ed4c:	d8c02a15 	stw	r3,168(sp)
2008ed50:	d8803b15 	stw	r2,236(sp)
2008ed54:	0039883a 	mov	fp,zero
2008ed58:	8c400094 	ori	r17,r17,2
2008ed5c:	db002d15 	stw	r12,180(sp)
2008ed60:	00800084 	movi	r2,2
2008ed64:	04001e04 	movi	r16,120
2008ed68:	9807883a 	mov	r3,r19
2008ed6c:	003fb506 	br	2008ec44 <__flash_rwdata_start+0xffff0070>
2008ed70:	8c400214 	ori	r17,r17,8
2008ed74:	1805883a 	mov	r2,r3
2008ed78:	1c000007 	ldb	r16,0(r3)
2008ed7c:	003de706 	br	2008e51c <__flash_rwdata_start+0xfffef948>
2008ed80:	d8c02a15 	stw	r3,168(sp)
2008ed84:	d9802785 	stb	r6,158(sp)
2008ed88:	8880080c 	andi	r2,r17,32
2008ed8c:	d8c02d17 	ldw	r3,180(sp)
2008ed90:	103ea61e 	bne	r2,zero,2008e82c <__flash_rwdata_start+0xfffefc58>
2008ed94:	8880040c 	andi	r2,r17,16
2008ed98:	1002221e 	bne	r2,zero,2008f624 <___vfprintf_internal_r+0x129c>
2008ed9c:	8880100c 	andi	r2,r17,64
2008eda0:	10022026 	beq	r2,zero,2008f624 <___vfprintf_internal_r+0x129c>
2008eda4:	1cc0000f 	ldh	r19,0(r3)
2008eda8:	db002d17 	ldw	r12,180(sp)
2008edac:	9839d7fa 	srai	fp,r19,31
2008edb0:	63000104 	addi	r12,r12,4
2008edb4:	db002d15 	stw	r12,180(sp)
2008edb8:	e005883a 	mov	r2,fp
2008edbc:	003ea106 	br	2008e844 <__flash_rwdata_start+0xfffefc70>
2008edc0:	8c401014 	ori	r17,r17,64
2008edc4:	1805883a 	mov	r2,r3
2008edc8:	1c000007 	ldb	r16,0(r3)
2008edcc:	003dd306 	br	2008e51c <__flash_rwdata_start+0xfffef948>
2008edd0:	1c000007 	ldb	r16,0(r3)
2008edd4:	81c3e926 	beq	r16,r7,2008fd7c <___vfprintf_internal_r+0x19f4>
2008edd8:	8c400414 	ori	r17,r17,16
2008eddc:	1805883a 	mov	r2,r3
2008ede0:	003dce06 	br	2008e51c <__flash_rwdata_start+0xfffef948>
2008ede4:	d8c02a15 	stw	r3,168(sp)
2008ede8:	d9802785 	stb	r6,158(sp)
2008edec:	8880080c 	andi	r2,r17,32
2008edf0:	10034726 	beq	r2,zero,2008fb10 <___vfprintf_internal_r+0x1788>
2008edf4:	db002d17 	ldw	r12,180(sp)
2008edf8:	dac02f17 	ldw	r11,188(sp)
2008edfc:	60800017 	ldw	r2,0(r12)
2008ee00:	5807d7fa 	srai	r3,r11,31
2008ee04:	63000104 	addi	r12,r12,4
2008ee08:	db002d15 	stw	r12,180(sp)
2008ee0c:	12c00015 	stw	r11,0(r2)
2008ee10:	10c00115 	stw	r3,4(r2)
2008ee14:	003d9706 	br	2008e474 <__flash_rwdata_start+0xfffef8a0>
2008ee18:	03000034 	movhi	r12,0
2008ee1c:	63018f04 	addi	r12,r12,1596
2008ee20:	d8c02a15 	stw	r3,168(sp)
2008ee24:	d9802785 	stb	r6,158(sp)
2008ee28:	db003b15 	stw	r12,236(sp)
2008ee2c:	88c0080c 	andi	r3,r17,32
2008ee30:	d8802d17 	ldw	r2,180(sp)
2008ee34:	18005b26 	beq	r3,zero,2008efa4 <___vfprintf_internal_r+0xc1c>
2008ee38:	dac02d17 	ldw	r11,180(sp)
2008ee3c:	14c00017 	ldw	r19,0(r2)
2008ee40:	17000117 	ldw	fp,4(r2)
2008ee44:	5ac00204 	addi	r11,r11,8
2008ee48:	dac02d15 	stw	r11,180(sp)
2008ee4c:	8880004c 	andi	r2,r17,1
2008ee50:	10022926 	beq	r2,zero,2008f6f8 <___vfprintf_internal_r+0x1370>
2008ee54:	9f06b03a 	or	r3,r19,fp
2008ee58:	18032b26 	beq	r3,zero,2008fb08 <___vfprintf_internal_r+0x1780>
2008ee5c:	00800c04 	movi	r2,48
2008ee60:	d8802705 	stb	r2,156(sp)
2008ee64:	dc002745 	stb	r16,157(sp)
2008ee68:	8c400094 	ori	r17,r17,2
2008ee6c:	00800084 	movi	r2,2
2008ee70:	003f7406 	br	2008ec44 <__flash_rwdata_start+0xffff0070>
2008ee74:	30803fcc 	andi	r2,r6,255
2008ee78:	1080201c 	xori	r2,r2,128
2008ee7c:	10bfe004 	addi	r2,r2,-128
2008ee80:	1003351e 	bne	r2,zero,2008fb58 <___vfprintf_internal_r+0x17d0>
2008ee84:	1805883a 	mov	r2,r3
2008ee88:	01800804 	movi	r6,32
2008ee8c:	1c000007 	ldb	r16,0(r3)
2008ee90:	003da206 	br	2008e51c <__flash_rwdata_start+0xfffef948>
2008ee94:	dac02d17 	ldw	r11,180(sp)
2008ee98:	db002d17 	ldw	r12,180(sp)
2008ee9c:	5ac00017 	ldw	r11,0(r11)
2008eea0:	dac02e15 	stw	r11,184(sp)
2008eea4:	62c00104 	addi	r11,r12,4
2008eea8:	db002e17 	ldw	r12,184(sp)
2008eeac:	6003ad16 	blt	r12,zero,2008fd64 <___vfprintf_internal_r+0x19dc>
2008eeb0:	dac02d15 	stw	r11,180(sp)
2008eeb4:	1805883a 	mov	r2,r3
2008eeb8:	1c000007 	ldb	r16,0(r3)
2008eebc:	003d9706 	br	2008e51c <__flash_rwdata_start+0xfffef948>
2008eec0:	1805883a 	mov	r2,r3
2008eec4:	01800ac4 	movi	r6,43
2008eec8:	1c000007 	ldb	r16,0(r3)
2008eecc:	003d9306 	br	2008e51c <__flash_rwdata_start+0xfffef948>
2008eed0:	db002d17 	ldw	r12,180(sp)
2008eed4:	d8c02a15 	stw	r3,168(sp)
2008eed8:	00c00044 	movi	r3,1
2008eedc:	60800017 	ldw	r2,0(r12)
2008eee0:	63000104 	addi	r12,r12,4
2008eee4:	d8c02b15 	stw	r3,172(sp)
2008eee8:	d8002785 	stb	zero,158(sp)
2008eeec:	d8801405 	stb	r2,80(sp)
2008eef0:	db002d15 	stw	r12,180(sp)
2008eef4:	dac01404 	addi	r11,sp,80
2008eef8:	1825883a 	mov	r18,r3
2008eefc:	d8003215 	stw	zero,200(sp)
2008ef00:	d8003415 	stw	zero,208(sp)
2008ef04:	dac03115 	stw	r11,196(sp)
2008ef08:	0005883a 	mov	r2,zero
2008ef0c:	003e7806 	br	2008e8f0 <__flash_rwdata_start+0xfffefd1c>
2008ef10:	dac02d17 	ldw	r11,180(sp)
2008ef14:	db002d17 	ldw	r12,180(sp)
2008ef18:	d8c02a15 	stw	r3,168(sp)
2008ef1c:	5ac00017 	ldw	r11,0(r11)
2008ef20:	d8002785 	stb	zero,158(sp)
2008ef24:	64c00104 	addi	r19,r12,4
2008ef28:	dac03115 	stw	r11,196(sp)
2008ef2c:	5803fe26 	beq	r11,zero,2008ff28 <___vfprintf_internal_r+0x1ba0>
2008ef30:	d9003117 	ldw	r4,196(sp)
2008ef34:	4803b416 	blt	r9,zero,2008fe08 <___vfprintf_internal_r+0x1a80>
2008ef38:	480d883a 	mov	r6,r9
2008ef3c:	000b883a 	mov	r5,zero
2008ef40:	da003f15 	stw	r8,252(sp)
2008ef44:	da403e15 	stw	r9,248(sp)
2008ef48:	00934200 	call	20093420 <memchr>
2008ef4c:	da003f17 	ldw	r8,252(sp)
2008ef50:	da403e17 	ldw	r9,248(sp)
2008ef54:	10043026 	beq	r2,zero,20090018 <___vfprintf_internal_r+0x1c90>
2008ef58:	d8c03117 	ldw	r3,196(sp)
2008ef5c:	10e5c83a 	sub	r18,r2,r3
2008ef60:	4c836b16 	blt	r9,r18,2008fd10 <___vfprintf_internal_r+0x1988>
2008ef64:	9005883a 	mov	r2,r18
2008ef68:	9003ac16 	blt	r18,zero,2008fe1c <___vfprintf_internal_r+0x1a94>
2008ef6c:	dd402783 	ldbu	r21,158(sp)
2008ef70:	d8802b15 	stw	r2,172(sp)
2008ef74:	dcc02d15 	stw	r19,180(sp)
2008ef78:	d8003215 	stw	zero,200(sp)
2008ef7c:	d8003415 	stw	zero,208(sp)
2008ef80:	003e5406 	br	2008e8d4 <__flash_rwdata_start+0xfffefd00>
2008ef84:	00800034 	movhi	r2,0
2008ef88:	10819404 	addi	r2,r2,1616
2008ef8c:	d8c02a15 	stw	r3,168(sp)
2008ef90:	d8803b15 	stw	r2,236(sp)
2008ef94:	d9802785 	stb	r6,158(sp)
2008ef98:	88c0080c 	andi	r3,r17,32
2008ef9c:	d8802d17 	ldw	r2,180(sp)
2008efa0:	183fa51e 	bne	r3,zero,2008ee38 <__flash_rwdata_start+0xffff0264>
2008efa4:	88c0040c 	andi	r3,r17,16
2008efa8:	1802ee26 	beq	r3,zero,2008fb64 <___vfprintf_internal_r+0x17dc>
2008efac:	db002d17 	ldw	r12,180(sp)
2008efb0:	14c00017 	ldw	r19,0(r2)
2008efb4:	0039883a 	mov	fp,zero
2008efb8:	63000104 	addi	r12,r12,4
2008efbc:	db002d15 	stw	r12,180(sp)
2008efc0:	003fa206 	br	2008ee4c <__flash_rwdata_start+0xffff0278>
2008efc4:	8c400054 	ori	r17,r17,1
2008efc8:	1805883a 	mov	r2,r3
2008efcc:	1c000007 	ldb	r16,0(r3)
2008efd0:	003d5206 	br	2008e51c <__flash_rwdata_start+0xfffef948>
2008efd4:	8c400814 	ori	r17,r17,32
2008efd8:	1805883a 	mov	r2,r3
2008efdc:	1c000007 	ldb	r16,0(r3)
2008efe0:	003d4e06 	br	2008e51c <__flash_rwdata_start+0xfffef948>
2008efe4:	d8c02a15 	stw	r3,168(sp)
2008efe8:	8880080c 	andi	r2,r17,32
2008efec:	103f1d1e 	bne	r2,zero,2008ec64 <__flash_rwdata_start+0xffff0090>
2008eff0:	8880040c 	andi	r2,r17,16
2008eff4:	1001b81e 	bne	r2,zero,2008f6d8 <___vfprintf_internal_r+0x1350>
2008eff8:	8880100c 	andi	r2,r17,64
2008effc:	1001b626 	beq	r2,zero,2008f6d8 <___vfprintf_internal_r+0x1350>
2008f000:	dac02d17 	ldw	r11,180(sp)
2008f004:	0039883a 	mov	fp,zero
2008f008:	00800044 	movi	r2,1
2008f00c:	5cc0000b 	ldhu	r19,0(r11)
2008f010:	5ac00104 	addi	r11,r11,4
2008f014:	dac02d15 	stw	r11,180(sp)
2008f018:	9807883a 	mov	r3,r19
2008f01c:	003f0906 	br	2008ec44 <__flash_rwdata_start+0xffff0070>
2008f020:	d8c02a15 	stw	r3,168(sp)
2008f024:	8880080c 	andi	r2,r17,32
2008f028:	103eff1e 	bne	r2,zero,2008ec28 <__flash_rwdata_start+0xffff0054>
2008f02c:	8880040c 	andi	r2,r17,16
2008f030:	1001a11e 	bne	r2,zero,2008f6b8 <___vfprintf_internal_r+0x1330>
2008f034:	8880100c 	andi	r2,r17,64
2008f038:	10019f26 	beq	r2,zero,2008f6b8 <___vfprintf_internal_r+0x1330>
2008f03c:	db002d17 	ldw	r12,180(sp)
2008f040:	0039883a 	mov	fp,zero
2008f044:	0005883a 	mov	r2,zero
2008f048:	64c0000b 	ldhu	r19,0(r12)
2008f04c:	63000104 	addi	r12,r12,4
2008f050:	db002d15 	stw	r12,180(sp)
2008f054:	9807883a 	mov	r3,r19
2008f058:	003efa06 	br	2008ec44 <__flash_rwdata_start+0xffff0070>
2008f05c:	d8c02a15 	stw	r3,168(sp)
2008f060:	d9802785 	stb	r6,158(sp)
2008f064:	803db626 	beq	r16,zero,2008e740 <__flash_rwdata_start+0xfffefb6c>
2008f068:	00c00044 	movi	r3,1
2008f06c:	d8c02b15 	stw	r3,172(sp)
2008f070:	dc001405 	stb	r16,80(sp)
2008f074:	d8002785 	stb	zero,158(sp)
2008f078:	003f9e06 	br	2008eef4 <__flash_rwdata_start+0xffff0320>
2008f07c:	d8c02017 	ldw	r3,128(sp)
2008f080:	003e5306 	br	2008e9d0 <__flash_rwdata_start+0xfffefdfc>
2008f084:	10803fcc 	andi	r2,r2,255
2008f088:	00c00044 	movi	r3,1
2008f08c:	10fdfa1e 	bne	r2,r3,2008e878 <__flash_rwdata_start+0xfffefca4>
2008f090:	e000021e 	bne	fp,zero,2008f09c <___vfprintf_internal_r+0xd14>
2008f094:	00800244 	movi	r2,9
2008f098:	14c0202e 	bgeu	r2,r19,2008f11c <___vfprintf_internal_r+0xd94>
2008f09c:	dc002b15 	stw	r16,172(sp)
2008f0a0:	dc402c15 	stw	r17,176(sp)
2008f0a4:	9821883a 	mov	r16,r19
2008f0a8:	e023883a 	mov	r17,fp
2008f0ac:	dc801e04 	addi	r18,sp,120
2008f0b0:	4827883a 	mov	r19,r9
2008f0b4:	4039883a 	mov	fp,r8
2008f0b8:	8009883a 	mov	r4,r16
2008f0bc:	880b883a 	mov	r5,r17
2008f0c0:	01800284 	movi	r6,10
2008f0c4:	000f883a 	mov	r7,zero
2008f0c8:	009856c0 	call	2009856c <__umoddi3>
2008f0cc:	10800c04 	addi	r2,r2,48
2008f0d0:	94bfffc4 	addi	r18,r18,-1
2008f0d4:	8009883a 	mov	r4,r16
2008f0d8:	880b883a 	mov	r5,r17
2008f0dc:	01800284 	movi	r6,10
2008f0e0:	000f883a 	mov	r7,zero
2008f0e4:	90800005 	stb	r2,0(r18)
2008f0e8:	0097fac0 	call	20097fac <__udivdi3>
2008f0ec:	1021883a 	mov	r16,r2
2008f0f0:	10c4b03a 	or	r2,r2,r3
2008f0f4:	1823883a 	mov	r17,r3
2008f0f8:	103fef1e 	bne	r2,zero,2008f0b8 <__flash_rwdata_start+0xffff04e4>
2008f0fc:	dac02817 	ldw	r11,160(sp)
2008f100:	dc803115 	stw	r18,196(sp)
2008f104:	dc002b17 	ldw	r16,172(sp)
2008f108:	dc402c17 	ldw	r17,176(sp)
2008f10c:	9813883a 	mov	r9,r19
2008f110:	e011883a 	mov	r8,fp
2008f114:	5ca5c83a 	sub	r18,r11,r18
2008f118:	003de906 	br	2008e8c0 <__flash_rwdata_start+0xfffefcec>
2008f11c:	9cc00c04 	addi	r19,r19,48
2008f120:	d8c01dc4 	addi	r3,sp,119
2008f124:	dcc01dc5 	stb	r19,119(sp)
2008f128:	dc803c17 	ldw	r18,240(sp)
2008f12c:	d8c03115 	stw	r3,196(sp)
2008f130:	003de306 	br	2008e8c0 <__flash_rwdata_start+0xfffefcec>
2008f134:	00801944 	movi	r2,101
2008f138:	1400710e 	bge	r2,r16,2008f300 <___vfprintf_internal_r+0xf78>
2008f13c:	d9003717 	ldw	r4,220(sp)
2008f140:	d9403917 	ldw	r5,228(sp)
2008f144:	000d883a 	mov	r6,zero
2008f148:	000f883a 	mov	r7,zero
2008f14c:	d8c03d15 	stw	r3,244(sp)
2008f150:	da003f15 	stw	r8,252(sp)
2008f154:	0098afc0 	call	20098afc <__eqdf2>
2008f158:	d8c03d17 	ldw	r3,244(sp)
2008f15c:	da003f17 	ldw	r8,252(sp)
2008f160:	1000ef1e 	bne	r2,zero,2008f520 <___vfprintf_internal_r+0x1198>
2008f164:	d8801f17 	ldw	r2,124(sp)
2008f168:	01000034 	movhi	r4,0
2008f16c:	21019b04 	addi	r4,r4,1644
2008f170:	18c00044 	addi	r3,r3,1
2008f174:	10800044 	addi	r2,r2,1
2008f178:	41000015 	stw	r4,0(r8)
2008f17c:	01000044 	movi	r4,1
2008f180:	41000115 	stw	r4,4(r8)
2008f184:	d8c02015 	stw	r3,128(sp)
2008f188:	d8801f15 	stw	r2,124(sp)
2008f18c:	010001c4 	movi	r4,7
2008f190:	20828e16 	blt	r4,r2,2008fbcc <___vfprintf_internal_r+0x1844>
2008f194:	42000204 	addi	r8,r8,8
2008f198:	d8802617 	ldw	r2,152(sp)
2008f19c:	dac03317 	ldw	r11,204(sp)
2008f1a0:	12c00216 	blt	r2,r11,2008f1ac <___vfprintf_internal_r+0xe24>
2008f1a4:	8880004c 	andi	r2,r17,1
2008f1a8:	103e5d26 	beq	r2,zero,2008eb20 <__flash_rwdata_start+0xfffeff4c>
2008f1ac:	db003817 	ldw	r12,224(sp)
2008f1b0:	d8801f17 	ldw	r2,124(sp)
2008f1b4:	dac03517 	ldw	r11,212(sp)
2008f1b8:	1b07883a 	add	r3,r3,r12
2008f1bc:	10800044 	addi	r2,r2,1
2008f1c0:	42c00015 	stw	r11,0(r8)
2008f1c4:	43000115 	stw	r12,4(r8)
2008f1c8:	d8c02015 	stw	r3,128(sp)
2008f1cc:	d8801f15 	stw	r2,124(sp)
2008f1d0:	010001c4 	movi	r4,7
2008f1d4:	2082ed16 	blt	r4,r2,2008fd8c <___vfprintf_internal_r+0x1a04>
2008f1d8:	42000204 	addi	r8,r8,8
2008f1dc:	db003317 	ldw	r12,204(sp)
2008f1e0:	643fffc4 	addi	r16,r12,-1
2008f1e4:	043e4e0e 	bge	zero,r16,2008eb20 <__flash_rwdata_start+0xfffeff4c>
2008f1e8:	04800404 	movi	r18,16
2008f1ec:	d8801f17 	ldw	r2,124(sp)
2008f1f0:	94007e0e 	bge	r18,r16,2008f3ec <___vfprintf_internal_r+0x1064>
2008f1f4:	01400034 	movhi	r5,0
2008f1f8:	2941a384 	addi	r5,r5,1678
2008f1fc:	d9402c15 	stw	r5,176(sp)
2008f200:	054001c4 	movi	r21,7
2008f204:	00000306 	br	2008f214 <___vfprintf_internal_r+0xe8c>
2008f208:	42000204 	addi	r8,r8,8
2008f20c:	843ffc04 	addi	r16,r16,-16
2008f210:	9400790e 	bge	r18,r16,2008f3f8 <___vfprintf_internal_r+0x1070>
2008f214:	18c00404 	addi	r3,r3,16
2008f218:	10800044 	addi	r2,r2,1
2008f21c:	45000015 	stw	r20,0(r8)
2008f220:	44800115 	stw	r18,4(r8)
2008f224:	d8c02015 	stw	r3,128(sp)
2008f228:	d8801f15 	stw	r2,124(sp)
2008f22c:	a8bff60e 	bge	r21,r2,2008f208 <__flash_rwdata_start+0xffff0634>
2008f230:	b009883a 	mov	r4,r22
2008f234:	b80b883a 	mov	r5,r23
2008f238:	d9801e04 	addi	r6,sp,120
2008f23c:	00962ec0 	call	200962ec <__sprint_r>
2008f240:	103d451e 	bne	r2,zero,2008e758 <__flash_rwdata_start+0xfffefb84>
2008f244:	d8c02017 	ldw	r3,128(sp)
2008f248:	d8801f17 	ldw	r2,124(sp)
2008f24c:	da000404 	addi	r8,sp,16
2008f250:	003fee06 	br	2008f20c <__flash_rwdata_start+0xffff0638>
2008f254:	dac02e17 	ldw	r11,184(sp)
2008f258:	db002b17 	ldw	r12,172(sp)
2008f25c:	5b2bc83a 	sub	r21,r11,r12
2008f260:	057df90e 	bge	zero,r21,2008ea48 <__flash_rwdata_start+0xfffefe74>
2008f264:	07000404 	movi	fp,16
2008f268:	d8801f17 	ldw	r2,124(sp)
2008f26c:	e543640e 	bge	fp,r21,20090000 <___vfprintf_internal_r+0x1c78>
2008f270:	01400034 	movhi	r5,0
2008f274:	2941a384 	addi	r5,r5,1678
2008f278:	d9402c15 	stw	r5,176(sp)
2008f27c:	04c001c4 	movi	r19,7
2008f280:	00000306 	br	2008f290 <___vfprintf_internal_r+0xf08>
2008f284:	ad7ffc04 	addi	r21,r21,-16
2008f288:	42000204 	addi	r8,r8,8
2008f28c:	e540110e 	bge	fp,r21,2008f2d4 <___vfprintf_internal_r+0xf4c>
2008f290:	18c00404 	addi	r3,r3,16
2008f294:	10800044 	addi	r2,r2,1
2008f298:	45000015 	stw	r20,0(r8)
2008f29c:	47000115 	stw	fp,4(r8)
2008f2a0:	d8c02015 	stw	r3,128(sp)
2008f2a4:	d8801f15 	stw	r2,124(sp)
2008f2a8:	98bff60e 	bge	r19,r2,2008f284 <__flash_rwdata_start+0xffff06b0>
2008f2ac:	b009883a 	mov	r4,r22
2008f2b0:	b80b883a 	mov	r5,r23
2008f2b4:	d9801e04 	addi	r6,sp,120
2008f2b8:	00962ec0 	call	200962ec <__sprint_r>
2008f2bc:	103d261e 	bne	r2,zero,2008e758 <__flash_rwdata_start+0xfffefb84>
2008f2c0:	ad7ffc04 	addi	r21,r21,-16
2008f2c4:	d8c02017 	ldw	r3,128(sp)
2008f2c8:	d8801f17 	ldw	r2,124(sp)
2008f2cc:	da000404 	addi	r8,sp,16
2008f2d0:	e57fef16 	blt	fp,r21,2008f290 <__flash_rwdata_start+0xffff06bc>
2008f2d4:	dac02c17 	ldw	r11,176(sp)
2008f2d8:	1d47883a 	add	r3,r3,r21
2008f2dc:	10800044 	addi	r2,r2,1
2008f2e0:	42c00015 	stw	r11,0(r8)
2008f2e4:	45400115 	stw	r21,4(r8)
2008f2e8:	d8c02015 	stw	r3,128(sp)
2008f2ec:	d8801f15 	stw	r2,124(sp)
2008f2f0:	010001c4 	movi	r4,7
2008f2f4:	20819116 	blt	r4,r2,2008f93c <___vfprintf_internal_r+0x15b4>
2008f2f8:	42000204 	addi	r8,r8,8
2008f2fc:	003dd206 	br	2008ea48 <__flash_rwdata_start+0xfffefe74>
2008f300:	db003317 	ldw	r12,204(sp)
2008f304:	00800044 	movi	r2,1
2008f308:	18c00044 	addi	r3,r3,1
2008f30c:	1301530e 	bge	r2,r12,2008f85c <___vfprintf_internal_r+0x14d4>
2008f310:	dc001f17 	ldw	r16,124(sp)
2008f314:	dac03117 	ldw	r11,196(sp)
2008f318:	00800044 	movi	r2,1
2008f31c:	84000044 	addi	r16,r16,1
2008f320:	40800115 	stw	r2,4(r8)
2008f324:	42c00015 	stw	r11,0(r8)
2008f328:	d8c02015 	stw	r3,128(sp)
2008f32c:	dc001f15 	stw	r16,124(sp)
2008f330:	008001c4 	movi	r2,7
2008f334:	14016b16 	blt	r2,r16,2008f8e4 <___vfprintf_internal_r+0x155c>
2008f338:	42000204 	addi	r8,r8,8
2008f33c:	db003817 	ldw	r12,224(sp)
2008f340:	dac03517 	ldw	r11,212(sp)
2008f344:	84000044 	addi	r16,r16,1
2008f348:	1b07883a 	add	r3,r3,r12
2008f34c:	42c00015 	stw	r11,0(r8)
2008f350:	43000115 	stw	r12,4(r8)
2008f354:	d8c02015 	stw	r3,128(sp)
2008f358:	dc001f15 	stw	r16,124(sp)
2008f35c:	008001c4 	movi	r2,7
2008f360:	14016916 	blt	r2,r16,2008f908 <___vfprintf_internal_r+0x1580>
2008f364:	44800204 	addi	r18,r8,8
2008f368:	d9003717 	ldw	r4,220(sp)
2008f36c:	d9403917 	ldw	r5,228(sp)
2008f370:	000d883a 	mov	r6,zero
2008f374:	000f883a 	mov	r7,zero
2008f378:	d8c03d15 	stw	r3,244(sp)
2008f37c:	0098afc0 	call	20098afc <__eqdf2>
2008f380:	d8c03d17 	ldw	r3,244(sp)
2008f384:	db003317 	ldw	r12,204(sp)
2008f388:	1000ad26 	beq	r2,zero,2008f640 <___vfprintf_internal_r+0x12b8>
2008f38c:	dac03117 	ldw	r11,196(sp)
2008f390:	60bfffc4 	addi	r2,r12,-1
2008f394:	1887883a 	add	r3,r3,r2
2008f398:	59000044 	addi	r4,r11,1
2008f39c:	84000044 	addi	r16,r16,1
2008f3a0:	90800115 	stw	r2,4(r18)
2008f3a4:	91000015 	stw	r4,0(r18)
2008f3a8:	d8c02015 	stw	r3,128(sp)
2008f3ac:	dc001f15 	stw	r16,124(sp)
2008f3b0:	008001c4 	movi	r2,7
2008f3b4:	14014216 	blt	r2,r16,2008f8c0 <___vfprintf_internal_r+0x1538>
2008f3b8:	94800204 	addi	r18,r18,8
2008f3bc:	dac03a17 	ldw	r11,232(sp)
2008f3c0:	dd4022c4 	addi	r21,sp,139
2008f3c4:	84000044 	addi	r16,r16,1
2008f3c8:	1ac7883a 	add	r3,r3,r11
2008f3cc:	95400015 	stw	r21,0(r18)
2008f3d0:	92c00115 	stw	r11,4(r18)
2008f3d4:	d8c02015 	stw	r3,128(sp)
2008f3d8:	dc001f15 	stw	r16,124(sp)
2008f3dc:	008001c4 	movi	r2,7
2008f3e0:	14000e16 	blt	r2,r16,2008f41c <___vfprintf_internal_r+0x1094>
2008f3e4:	92000204 	addi	r8,r18,8
2008f3e8:	003dcd06 	br	2008eb20 <__flash_rwdata_start+0xfffeff4c>
2008f3ec:	01000034 	movhi	r4,0
2008f3f0:	2101a384 	addi	r4,r4,1678
2008f3f4:	d9002c15 	stw	r4,176(sp)
2008f3f8:	dac02c17 	ldw	r11,176(sp)
2008f3fc:	1c07883a 	add	r3,r3,r16
2008f400:	44000115 	stw	r16,4(r8)
2008f404:	42c00015 	stw	r11,0(r8)
2008f408:	10800044 	addi	r2,r2,1
2008f40c:	d8c02015 	stw	r3,128(sp)
2008f410:	d8801f15 	stw	r2,124(sp)
2008f414:	010001c4 	movi	r4,7
2008f418:	20bdc00e 	bge	r4,r2,2008eb1c <__flash_rwdata_start+0xfffeff48>
2008f41c:	b009883a 	mov	r4,r22
2008f420:	b80b883a 	mov	r5,r23
2008f424:	d9801e04 	addi	r6,sp,120
2008f428:	00962ec0 	call	200962ec <__sprint_r>
2008f42c:	103cca1e 	bne	r2,zero,2008e758 <__flash_rwdata_start+0xfffefb84>
2008f430:	d8c02017 	ldw	r3,128(sp)
2008f434:	da000404 	addi	r8,sp,16
2008f438:	003db906 	br	2008eb20 <__flash_rwdata_start+0xfffeff4c>
2008f43c:	b009883a 	mov	r4,r22
2008f440:	b80b883a 	mov	r5,r23
2008f444:	d9801e04 	addi	r6,sp,120
2008f448:	00962ec0 	call	200962ec <__sprint_r>
2008f44c:	103def26 	beq	r2,zero,2008ec0c <__flash_rwdata_start+0xffff0038>
2008f450:	003cc106 	br	2008e758 <__flash_rwdata_start+0xfffefb84>
2008f454:	10803fcc 	andi	r2,r2,255
2008f458:	1000651e 	bne	r2,zero,2008f5f0 <___vfprintf_internal_r+0x1268>
2008f45c:	8880004c 	andi	r2,r17,1
2008f460:	10013226 	beq	r2,zero,2008f92c <___vfprintf_internal_r+0x15a4>
2008f464:	00800c04 	movi	r2,48
2008f468:	d8c01dc4 	addi	r3,sp,119
2008f46c:	d8801dc5 	stb	r2,119(sp)
2008f470:	dc803c17 	ldw	r18,240(sp)
2008f474:	d8c03115 	stw	r3,196(sp)
2008f478:	003d1106 	br	2008e8c0 <__flash_rwdata_start+0xfffefcec>
2008f47c:	b009883a 	mov	r4,r22
2008f480:	b80b883a 	mov	r5,r23
2008f484:	d9801e04 	addi	r6,sp,120
2008f488:	00962ec0 	call	200962ec <__sprint_r>
2008f48c:	103cb21e 	bne	r2,zero,2008e758 <__flash_rwdata_start+0xfffefb84>
2008f490:	d8c02017 	ldw	r3,128(sp)
2008f494:	da000404 	addi	r8,sp,16
2008f498:	003d9406 	br	2008eaec <__flash_rwdata_start+0xfffeff18>
2008f49c:	b009883a 	mov	r4,r22
2008f4a0:	b80b883a 	mov	r5,r23
2008f4a4:	d9801e04 	addi	r6,sp,120
2008f4a8:	00962ec0 	call	200962ec <__sprint_r>
2008f4ac:	103caa1e 	bne	r2,zero,2008e758 <__flash_rwdata_start+0xfffefb84>
2008f4b0:	d8c02017 	ldw	r3,128(sp)
2008f4b4:	da000404 	addi	r8,sp,16
2008f4b8:	003d5206 	br	2008ea04 <__flash_rwdata_start+0xfffefe30>
2008f4bc:	b009883a 	mov	r4,r22
2008f4c0:	b80b883a 	mov	r5,r23
2008f4c4:	d9801e04 	addi	r6,sp,120
2008f4c8:	00962ec0 	call	200962ec <__sprint_r>
2008f4cc:	103ca21e 	bne	r2,zero,2008e758 <__flash_rwdata_start+0xfffefb84>
2008f4d0:	d8c02017 	ldw	r3,128(sp)
2008f4d4:	da000404 	addi	r8,sp,16
2008f4d8:	003d5806 	br	2008ea3c <__flash_rwdata_start+0xfffefe68>
2008f4dc:	d9403b17 	ldw	r5,236(sp)
2008f4e0:	d8c01e04 	addi	r3,sp,120
2008f4e4:	988003cc 	andi	r2,r19,15
2008f4e8:	e008973a 	slli	r4,fp,28
2008f4ec:	2885883a 	add	r2,r5,r2
2008f4f0:	9826d13a 	srli	r19,r19,4
2008f4f4:	10800003 	ldbu	r2,0(r2)
2008f4f8:	e038d13a 	srli	fp,fp,4
2008f4fc:	18ffffc4 	addi	r3,r3,-1
2008f500:	24e6b03a 	or	r19,r4,r19
2008f504:	18800005 	stb	r2,0(r3)
2008f508:	9f04b03a 	or	r2,r19,fp
2008f50c:	103ff51e 	bne	r2,zero,2008f4e4 <__flash_rwdata_start+0xffff0910>
2008f510:	db002817 	ldw	r12,160(sp)
2008f514:	d8c03115 	stw	r3,196(sp)
2008f518:	60e5c83a 	sub	r18,r12,r3
2008f51c:	003ce806 	br	2008e8c0 <__flash_rwdata_start+0xfffefcec>
2008f520:	dc002617 	ldw	r16,152(sp)
2008f524:	0401b10e 	bge	zero,r16,2008fbec <___vfprintf_internal_r+0x1864>
2008f528:	db003117 	ldw	r12,196(sp)
2008f52c:	dac03317 	ldw	r11,204(sp)
2008f530:	62e1883a 	add	r16,r12,r11
2008f534:	db003417 	ldw	r12,208(sp)
2008f538:	5825883a 	mov	r18,r11
2008f53c:	62c0010e 	bge	r12,r11,2008f544 <___vfprintf_internal_r+0x11bc>
2008f540:	6025883a 	mov	r18,r12
2008f544:	04800b0e 	bge	zero,r18,2008f574 <___vfprintf_internal_r+0x11ec>
2008f548:	d8801f17 	ldw	r2,124(sp)
2008f54c:	dac03117 	ldw	r11,196(sp)
2008f550:	1c87883a 	add	r3,r3,r18
2008f554:	10800044 	addi	r2,r2,1
2008f558:	42c00015 	stw	r11,0(r8)
2008f55c:	44800115 	stw	r18,4(r8)
2008f560:	d8c02015 	stw	r3,128(sp)
2008f564:	d8801f15 	stw	r2,124(sp)
2008f568:	010001c4 	movi	r4,7
2008f56c:	20824f16 	blt	r4,r2,2008feac <___vfprintf_internal_r+0x1b24>
2008f570:	42000204 	addi	r8,r8,8
2008f574:	90024b16 	blt	r18,zero,2008fea4 <___vfprintf_internal_r+0x1b1c>
2008f578:	db003417 	ldw	r12,208(sp)
2008f57c:	64a5c83a 	sub	r18,r12,r18
2008f580:	0480730e 	bge	zero,r18,2008f750 <___vfprintf_internal_r+0x13c8>
2008f584:	05400404 	movi	r21,16
2008f588:	d8801f17 	ldw	r2,124(sp)
2008f58c:	ac817d0e 	bge	r21,r18,2008fb84 <___vfprintf_internal_r+0x17fc>
2008f590:	01400034 	movhi	r5,0
2008f594:	2941a384 	addi	r5,r5,1678
2008f598:	d9402c15 	stw	r5,176(sp)
2008f59c:	070001c4 	movi	fp,7
2008f5a0:	00000306 	br	2008f5b0 <___vfprintf_internal_r+0x1228>
2008f5a4:	42000204 	addi	r8,r8,8
2008f5a8:	94bffc04 	addi	r18,r18,-16
2008f5ac:	ac81780e 	bge	r21,r18,2008fb90 <___vfprintf_internal_r+0x1808>
2008f5b0:	18c00404 	addi	r3,r3,16
2008f5b4:	10800044 	addi	r2,r2,1
2008f5b8:	45000015 	stw	r20,0(r8)
2008f5bc:	45400115 	stw	r21,4(r8)
2008f5c0:	d8c02015 	stw	r3,128(sp)
2008f5c4:	d8801f15 	stw	r2,124(sp)
2008f5c8:	e0bff60e 	bge	fp,r2,2008f5a4 <__flash_rwdata_start+0xffff09d0>
2008f5cc:	b009883a 	mov	r4,r22
2008f5d0:	b80b883a 	mov	r5,r23
2008f5d4:	d9801e04 	addi	r6,sp,120
2008f5d8:	00962ec0 	call	200962ec <__sprint_r>
2008f5dc:	103c5e1e 	bne	r2,zero,2008e758 <__flash_rwdata_start+0xfffefb84>
2008f5e0:	d8c02017 	ldw	r3,128(sp)
2008f5e4:	d8801f17 	ldw	r2,124(sp)
2008f5e8:	da000404 	addi	r8,sp,16
2008f5ec:	003fee06 	br	2008f5a8 <__flash_rwdata_start+0xffff09d4>
2008f5f0:	dac01e04 	addi	r11,sp,120
2008f5f4:	0025883a 	mov	r18,zero
2008f5f8:	dac03115 	stw	r11,196(sp)
2008f5fc:	003cb006 	br	2008e8c0 <__flash_rwdata_start+0xfffefcec>
2008f600:	b009883a 	mov	r4,r22
2008f604:	b80b883a 	mov	r5,r23
2008f608:	d9801e04 	addi	r6,sp,120
2008f60c:	00962ec0 	call	200962ec <__sprint_r>
2008f610:	103c511e 	bne	r2,zero,2008e758 <__flash_rwdata_start+0xfffefb84>
2008f614:	d8c02017 	ldw	r3,128(sp)
2008f618:	d8802787 	ldb	r2,158(sp)
2008f61c:	da000404 	addi	r8,sp,16
2008f620:	003ceb06 	br	2008e9d0 <__flash_rwdata_start+0xfffefdfc>
2008f624:	1cc00017 	ldw	r19,0(r3)
2008f628:	dac02d17 	ldw	r11,180(sp)
2008f62c:	9839d7fa 	srai	fp,r19,31
2008f630:	5ac00104 	addi	r11,r11,4
2008f634:	dac02d15 	stw	r11,180(sp)
2008f638:	e005883a 	mov	r2,fp
2008f63c:	003c8106 	br	2008e844 <__flash_rwdata_start+0xfffefc70>
2008f640:	657fffc4 	addi	r21,r12,-1
2008f644:	057f5d0e 	bge	zero,r21,2008f3bc <__flash_rwdata_start+0xffff07e8>
2008f648:	07000404 	movi	fp,16
2008f64c:	e540900e 	bge	fp,r21,2008f890 <___vfprintf_internal_r+0x1508>
2008f650:	01000034 	movhi	r4,0
2008f654:	2101a384 	addi	r4,r4,1678
2008f658:	d9002c15 	stw	r4,176(sp)
2008f65c:	01c001c4 	movi	r7,7
2008f660:	00000306 	br	2008f670 <___vfprintf_internal_r+0x12e8>
2008f664:	94800204 	addi	r18,r18,8
2008f668:	ad7ffc04 	addi	r21,r21,-16
2008f66c:	e5408b0e 	bge	fp,r21,2008f89c <___vfprintf_internal_r+0x1514>
2008f670:	18c00404 	addi	r3,r3,16
2008f674:	84000044 	addi	r16,r16,1
2008f678:	95000015 	stw	r20,0(r18)
2008f67c:	97000115 	stw	fp,4(r18)
2008f680:	d8c02015 	stw	r3,128(sp)
2008f684:	dc001f15 	stw	r16,124(sp)
2008f688:	3c3ff60e 	bge	r7,r16,2008f664 <__flash_rwdata_start+0xffff0a90>
2008f68c:	b009883a 	mov	r4,r22
2008f690:	b80b883a 	mov	r5,r23
2008f694:	d9801e04 	addi	r6,sp,120
2008f698:	d9c03d15 	stw	r7,244(sp)
2008f69c:	00962ec0 	call	200962ec <__sprint_r>
2008f6a0:	d9c03d17 	ldw	r7,244(sp)
2008f6a4:	103c2c1e 	bne	r2,zero,2008e758 <__flash_rwdata_start+0xfffefb84>
2008f6a8:	d8c02017 	ldw	r3,128(sp)
2008f6ac:	dc001f17 	ldw	r16,124(sp)
2008f6b0:	dc800404 	addi	r18,sp,16
2008f6b4:	003fec06 	br	2008f668 <__flash_rwdata_start+0xffff0a94>
2008f6b8:	dac02d17 	ldw	r11,180(sp)
2008f6bc:	0039883a 	mov	fp,zero
2008f6c0:	0005883a 	mov	r2,zero
2008f6c4:	5cc00017 	ldw	r19,0(r11)
2008f6c8:	5ac00104 	addi	r11,r11,4
2008f6cc:	dac02d15 	stw	r11,180(sp)
2008f6d0:	9807883a 	mov	r3,r19
2008f6d4:	003d5b06 	br	2008ec44 <__flash_rwdata_start+0xffff0070>
2008f6d8:	db002d17 	ldw	r12,180(sp)
2008f6dc:	0039883a 	mov	fp,zero
2008f6e0:	00800044 	movi	r2,1
2008f6e4:	64c00017 	ldw	r19,0(r12)
2008f6e8:	63000104 	addi	r12,r12,4
2008f6ec:	db002d15 	stw	r12,180(sp)
2008f6f0:	9807883a 	mov	r3,r19
2008f6f4:	003d5306 	br	2008ec44 <__flash_rwdata_start+0xffff0070>
2008f6f8:	00800084 	movi	r2,2
2008f6fc:	9f06b03a 	or	r3,r19,fp
2008f700:	003d5006 	br	2008ec44 <__flash_rwdata_start+0xffff0070>
2008f704:	10803fcc 	andi	r2,r2,255
2008f708:	1080201c 	xori	r2,r2,128
2008f70c:	10bfe004 	addi	r2,r2,-128
2008f710:	01000c04 	movi	r4,48
2008f714:	1101a526 	beq	r2,r4,2008fdac <___vfprintf_internal_r+0x1a24>
2008f718:	dac03117 	ldw	r11,196(sp)
2008f71c:	db002817 	ldw	r12,160(sp)
2008f720:	193fffc5 	stb	r4,-1(r3)
2008f724:	5affffc4 	addi	r11,r11,-1
2008f728:	dac03115 	stw	r11,196(sp)
2008f72c:	62e5c83a 	sub	r18,r12,r11
2008f730:	003c6306 	br	2008e8c0 <__flash_rwdata_start+0xfffefcec>
2008f734:	b009883a 	mov	r4,r22
2008f738:	b80b883a 	mov	r5,r23
2008f73c:	d9801e04 	addi	r6,sp,120
2008f740:	00962ec0 	call	200962ec <__sprint_r>
2008f744:	103c041e 	bne	r2,zero,2008e758 <__flash_rwdata_start+0xfffefb84>
2008f748:	d8c02017 	ldw	r3,128(sp)
2008f74c:	da000404 	addi	r8,sp,16
2008f750:	db003117 	ldw	r12,196(sp)
2008f754:	dac03417 	ldw	r11,208(sp)
2008f758:	d8802617 	ldw	r2,152(sp)
2008f75c:	62e5883a 	add	r18,r12,r11
2008f760:	db003317 	ldw	r12,204(sp)
2008f764:	13000216 	blt	r2,r12,2008f770 <___vfprintf_internal_r+0x13e8>
2008f768:	8900004c 	andi	r4,r17,1
2008f76c:	20000c26 	beq	r4,zero,2008f7a0 <___vfprintf_internal_r+0x1418>
2008f770:	dac03817 	ldw	r11,224(sp)
2008f774:	d9001f17 	ldw	r4,124(sp)
2008f778:	db003517 	ldw	r12,212(sp)
2008f77c:	1ac7883a 	add	r3,r3,r11
2008f780:	21000044 	addi	r4,r4,1
2008f784:	43000015 	stw	r12,0(r8)
2008f788:	42c00115 	stw	r11,4(r8)
2008f78c:	d8c02015 	stw	r3,128(sp)
2008f790:	d9001f15 	stw	r4,124(sp)
2008f794:	014001c4 	movi	r5,7
2008f798:	2901cc16 	blt	r5,r4,2008fecc <___vfprintf_internal_r+0x1b44>
2008f79c:	42000204 	addi	r8,r8,8
2008f7a0:	dac03317 	ldw	r11,204(sp)
2008f7a4:	8489c83a 	sub	r4,r16,r18
2008f7a8:	5885c83a 	sub	r2,r11,r2
2008f7ac:	1021883a 	mov	r16,r2
2008f7b0:	2080010e 	bge	r4,r2,2008f7b8 <___vfprintf_internal_r+0x1430>
2008f7b4:	2021883a 	mov	r16,r4
2008f7b8:	04000a0e 	bge	zero,r16,2008f7e4 <___vfprintf_internal_r+0x145c>
2008f7bc:	d9001f17 	ldw	r4,124(sp)
2008f7c0:	1c07883a 	add	r3,r3,r16
2008f7c4:	44800015 	stw	r18,0(r8)
2008f7c8:	21000044 	addi	r4,r4,1
2008f7cc:	44000115 	stw	r16,4(r8)
2008f7d0:	d8c02015 	stw	r3,128(sp)
2008f7d4:	d9001f15 	stw	r4,124(sp)
2008f7d8:	014001c4 	movi	r5,7
2008f7dc:	2901e316 	blt	r5,r4,2008ff6c <___vfprintf_internal_r+0x1be4>
2008f7e0:	42000204 	addi	r8,r8,8
2008f7e4:	8001df16 	blt	r16,zero,2008ff64 <___vfprintf_internal_r+0x1bdc>
2008f7e8:	1421c83a 	sub	r16,r2,r16
2008f7ec:	043ccc0e 	bge	zero,r16,2008eb20 <__flash_rwdata_start+0xfffeff4c>
2008f7f0:	04800404 	movi	r18,16
2008f7f4:	d8801f17 	ldw	r2,124(sp)
2008f7f8:	943efc0e 	bge	r18,r16,2008f3ec <__flash_rwdata_start+0xffff0818>
2008f7fc:	01400034 	movhi	r5,0
2008f800:	2941a384 	addi	r5,r5,1678
2008f804:	d9402c15 	stw	r5,176(sp)
2008f808:	054001c4 	movi	r21,7
2008f80c:	00000306 	br	2008f81c <___vfprintf_internal_r+0x1494>
2008f810:	42000204 	addi	r8,r8,8
2008f814:	843ffc04 	addi	r16,r16,-16
2008f818:	943ef70e 	bge	r18,r16,2008f3f8 <__flash_rwdata_start+0xffff0824>
2008f81c:	18c00404 	addi	r3,r3,16
2008f820:	10800044 	addi	r2,r2,1
2008f824:	45000015 	stw	r20,0(r8)
2008f828:	44800115 	stw	r18,4(r8)
2008f82c:	d8c02015 	stw	r3,128(sp)
2008f830:	d8801f15 	stw	r2,124(sp)
2008f834:	a8bff60e 	bge	r21,r2,2008f810 <__flash_rwdata_start+0xffff0c3c>
2008f838:	b009883a 	mov	r4,r22
2008f83c:	b80b883a 	mov	r5,r23
2008f840:	d9801e04 	addi	r6,sp,120
2008f844:	00962ec0 	call	200962ec <__sprint_r>
2008f848:	103bc31e 	bne	r2,zero,2008e758 <__flash_rwdata_start+0xfffefb84>
2008f84c:	d8c02017 	ldw	r3,128(sp)
2008f850:	d8801f17 	ldw	r2,124(sp)
2008f854:	da000404 	addi	r8,sp,16
2008f858:	003fee06 	br	2008f814 <__flash_rwdata_start+0xffff0c40>
2008f85c:	8888703a 	and	r4,r17,r2
2008f860:	203eab1e 	bne	r4,zero,2008f310 <__flash_rwdata_start+0xffff073c>
2008f864:	dc001f17 	ldw	r16,124(sp)
2008f868:	db003117 	ldw	r12,196(sp)
2008f86c:	40800115 	stw	r2,4(r8)
2008f870:	84000044 	addi	r16,r16,1
2008f874:	43000015 	stw	r12,0(r8)
2008f878:	d8c02015 	stw	r3,128(sp)
2008f87c:	dc001f15 	stw	r16,124(sp)
2008f880:	008001c4 	movi	r2,7
2008f884:	14000e16 	blt	r2,r16,2008f8c0 <___vfprintf_internal_r+0x1538>
2008f888:	44800204 	addi	r18,r8,8
2008f88c:	003ecb06 	br	2008f3bc <__flash_rwdata_start+0xffff07e8>
2008f890:	00800034 	movhi	r2,0
2008f894:	1081a384 	addi	r2,r2,1678
2008f898:	d8802c15 	stw	r2,176(sp)
2008f89c:	dac02c17 	ldw	r11,176(sp)
2008f8a0:	1d47883a 	add	r3,r3,r21
2008f8a4:	84000044 	addi	r16,r16,1
2008f8a8:	92c00015 	stw	r11,0(r18)
2008f8ac:	95400115 	stw	r21,4(r18)
2008f8b0:	d8c02015 	stw	r3,128(sp)
2008f8b4:	dc001f15 	stw	r16,124(sp)
2008f8b8:	008001c4 	movi	r2,7
2008f8bc:	143ebe0e 	bge	r2,r16,2008f3b8 <__flash_rwdata_start+0xffff07e4>
2008f8c0:	b009883a 	mov	r4,r22
2008f8c4:	b80b883a 	mov	r5,r23
2008f8c8:	d9801e04 	addi	r6,sp,120
2008f8cc:	00962ec0 	call	200962ec <__sprint_r>
2008f8d0:	103ba11e 	bne	r2,zero,2008e758 <__flash_rwdata_start+0xfffefb84>
2008f8d4:	d8c02017 	ldw	r3,128(sp)
2008f8d8:	dc001f17 	ldw	r16,124(sp)
2008f8dc:	dc800404 	addi	r18,sp,16
2008f8e0:	003eb606 	br	2008f3bc <__flash_rwdata_start+0xffff07e8>
2008f8e4:	b009883a 	mov	r4,r22
2008f8e8:	b80b883a 	mov	r5,r23
2008f8ec:	d9801e04 	addi	r6,sp,120
2008f8f0:	00962ec0 	call	200962ec <__sprint_r>
2008f8f4:	103b981e 	bne	r2,zero,2008e758 <__flash_rwdata_start+0xfffefb84>
2008f8f8:	d8c02017 	ldw	r3,128(sp)
2008f8fc:	dc001f17 	ldw	r16,124(sp)
2008f900:	da000404 	addi	r8,sp,16
2008f904:	003e8d06 	br	2008f33c <__flash_rwdata_start+0xffff0768>
2008f908:	b009883a 	mov	r4,r22
2008f90c:	b80b883a 	mov	r5,r23
2008f910:	d9801e04 	addi	r6,sp,120
2008f914:	00962ec0 	call	200962ec <__sprint_r>
2008f918:	103b8f1e 	bne	r2,zero,2008e758 <__flash_rwdata_start+0xfffefb84>
2008f91c:	d8c02017 	ldw	r3,128(sp)
2008f920:	dc001f17 	ldw	r16,124(sp)
2008f924:	dc800404 	addi	r18,sp,16
2008f928:	003e8f06 	br	2008f368 <__flash_rwdata_start+0xffff0794>
2008f92c:	db001e04 	addi	r12,sp,120
2008f930:	0025883a 	mov	r18,zero
2008f934:	db003115 	stw	r12,196(sp)
2008f938:	003be106 	br	2008e8c0 <__flash_rwdata_start+0xfffefcec>
2008f93c:	b009883a 	mov	r4,r22
2008f940:	b80b883a 	mov	r5,r23
2008f944:	d9801e04 	addi	r6,sp,120
2008f948:	00962ec0 	call	200962ec <__sprint_r>
2008f94c:	103b821e 	bne	r2,zero,2008e758 <__flash_rwdata_start+0xfffefb84>
2008f950:	d8c02017 	ldw	r3,128(sp)
2008f954:	da000404 	addi	r8,sp,16
2008f958:	003c3b06 	br	2008ea48 <__flash_rwdata_start+0xfffefe74>
2008f95c:	04e7c83a 	sub	r19,zero,r19
2008f960:	9804c03a 	cmpne	r2,r19,zero
2008f964:	0739c83a 	sub	fp,zero,fp
2008f968:	e0b9c83a 	sub	fp,fp,r2
2008f96c:	05400b44 	movi	r21,45
2008f970:	dd402785 	stb	r21,158(sp)
2008f974:	da403215 	stw	r9,200(sp)
2008f978:	00800044 	movi	r2,1
2008f97c:	9f06b03a 	or	r3,r19,fp
2008f980:	003bb506 	br	2008e858 <__flash_rwdata_start+0xfffefc84>
2008f984:	da003f15 	stw	r8,252(sp)
2008f988:	da403e15 	stw	r9,248(sp)
2008f98c:	0094cd80 	call	20094cd8 <__fpclassifyd>
2008f990:	da003f17 	ldw	r8,252(sp)
2008f994:	da403e17 	ldw	r9,248(sp)
2008f998:	1000ce26 	beq	r2,zero,2008fcd4 <___vfprintf_internal_r+0x194c>
2008f99c:	057ff7c4 	movi	r21,-33
2008f9a0:	00bfffc4 	movi	r2,-1
2008f9a4:	856a703a 	and	r21,r16,r21
2008f9a8:	4881e826 	beq	r9,r2,2009014c <___vfprintf_internal_r+0x1dc4>
2008f9ac:	008011c4 	movi	r2,71
2008f9b0:	a881e326 	beq	r21,r2,20090140 <___vfprintf_internal_r+0x1db8>
2008f9b4:	db003917 	ldw	r12,228(sp)
2008f9b8:	8ac04014 	ori	r11,r17,256
2008f9bc:	dac02d15 	stw	r11,180(sp)
2008f9c0:	6001ed16 	blt	r12,zero,20090178 <___vfprintf_internal_r+0x1df0>
2008f9c4:	dc803917 	ldw	r18,228(sp)
2008f9c8:	d8002b05 	stb	zero,172(sp)
2008f9cc:	00801984 	movi	r2,102
2008f9d0:	80811826 	beq	r16,r2,2008fe34 <___vfprintf_internal_r+0x1aac>
2008f9d4:	00801184 	movi	r2,70
2008f9d8:	80811626 	beq	r16,r2,2008fe34 <___vfprintf_internal_r+0x1aac>
2008f9dc:	00801144 	movi	r2,69
2008f9e0:	a881e926 	beq	r21,r2,20090188 <___vfprintf_internal_r+0x1e00>
2008f9e4:	4839883a 	mov	fp,r9
2008f9e8:	d8802604 	addi	r2,sp,152
2008f9ec:	d8800115 	stw	r2,4(sp)
2008f9f0:	d9403717 	ldw	r5,220(sp)
2008f9f4:	d8802504 	addi	r2,sp,148
2008f9f8:	d8800215 	stw	r2,8(sp)
2008f9fc:	d8802104 	addi	r2,sp,132
2008fa00:	df000015 	stw	fp,0(sp)
2008fa04:	d8800315 	stw	r2,12(sp)
2008fa08:	b009883a 	mov	r4,r22
2008fa0c:	900d883a 	mov	r6,r18
2008fa10:	01c00084 	movi	r7,2
2008fa14:	da003f15 	stw	r8,252(sp)
2008fa18:	da403e15 	stw	r9,248(sp)
2008fa1c:	00909d00 	call	200909d0 <_dtoa_r>
2008fa20:	d8803115 	stw	r2,196(sp)
2008fa24:	008019c4 	movi	r2,103
2008fa28:	da003f17 	ldw	r8,252(sp)
2008fa2c:	da403e17 	ldw	r9,248(sp)
2008fa30:	80800226 	beq	r16,r2,2008fa3c <___vfprintf_internal_r+0x16b4>
2008fa34:	008011c4 	movi	r2,71
2008fa38:	8081101e 	bne	r16,r2,2008fe7c <___vfprintf_internal_r+0x1af4>
2008fa3c:	8880004c 	andi	r2,r17,1
2008fa40:	1001dd26 	beq	r2,zero,200901b8 <___vfprintf_internal_r+0x1e30>
2008fa44:	db003117 	ldw	r12,196(sp)
2008fa48:	6715883a 	add	r10,r12,fp
2008fa4c:	d9003717 	ldw	r4,220(sp)
2008fa50:	900b883a 	mov	r5,r18
2008fa54:	000d883a 	mov	r6,zero
2008fa58:	000f883a 	mov	r7,zero
2008fa5c:	da003f15 	stw	r8,252(sp)
2008fa60:	da403e15 	stw	r9,248(sp)
2008fa64:	da803d15 	stw	r10,244(sp)
2008fa68:	0098afc0 	call	20098afc <__eqdf2>
2008fa6c:	da003f17 	ldw	r8,252(sp)
2008fa70:	da403e17 	ldw	r9,248(sp)
2008fa74:	da803d17 	ldw	r10,244(sp)
2008fa78:	10016526 	beq	r2,zero,20090010 <___vfprintf_internal_r+0x1c88>
2008fa7c:	d8802117 	ldw	r2,132(sp)
2008fa80:	1280062e 	bgeu	r2,r10,2008fa9c <___vfprintf_internal_r+0x1714>
2008fa84:	01000c04 	movi	r4,48
2008fa88:	10c00044 	addi	r3,r2,1
2008fa8c:	d8c02115 	stw	r3,132(sp)
2008fa90:	11000005 	stb	r4,0(r2)
2008fa94:	d8802117 	ldw	r2,132(sp)
2008fa98:	12bffb36 	bltu	r2,r10,2008fa88 <__flash_rwdata_start+0xffff0eb4>
2008fa9c:	db003117 	ldw	r12,196(sp)
2008faa0:	1305c83a 	sub	r2,r2,r12
2008faa4:	d8803315 	stw	r2,204(sp)
2008faa8:	008011c4 	movi	r2,71
2008faac:	a8814d26 	beq	r21,r2,2008ffe4 <___vfprintf_internal_r+0x1c5c>
2008fab0:	00801944 	movi	r2,101
2008fab4:	1402060e 	bge	r2,r16,200902d0 <___vfprintf_internal_r+0x1f48>
2008fab8:	00801984 	movi	r2,102
2008fabc:	8081b426 	beq	r16,r2,20090190 <___vfprintf_internal_r+0x1e08>
2008fac0:	db002617 	ldw	r12,152(sp)
2008fac4:	db003415 	stw	r12,208(sp)
2008fac8:	db003417 	ldw	r12,208(sp)
2008facc:	dac03317 	ldw	r11,204(sp)
2008fad0:	62c1a016 	blt	r12,r11,20090154 <___vfprintf_internal_r+0x1dcc>
2008fad4:	8c40004c 	andi	r17,r17,1
2008fad8:	8801bf1e 	bne	r17,zero,200901d8 <___vfprintf_internal_r+0x1e50>
2008fadc:	6005883a 	mov	r2,r12
2008fae0:	6001b316 	blt	r12,zero,200901b0 <___vfprintf_internal_r+0x1e28>
2008fae4:	dc803417 	ldw	r18,208(sp)
2008fae8:	df002b07 	ldb	fp,172(sp)
2008faec:	e0012e1e 	bne	fp,zero,2008ffa8 <___vfprintf_internal_r+0x1c20>
2008faf0:	dc402d17 	ldw	r17,180(sp)
2008faf4:	dd402783 	ldbu	r21,158(sp)
2008faf8:	d8802b15 	stw	r2,172(sp)
2008fafc:	dcc02d15 	stw	r19,180(sp)
2008fb00:	d8003215 	stw	zero,200(sp)
2008fb04:	003b7306 	br	2008e8d4 <__flash_rwdata_start+0xfffefd00>
2008fb08:	00800084 	movi	r2,2
2008fb0c:	003c4d06 	br	2008ec44 <__flash_rwdata_start+0xffff0070>
2008fb10:	8880040c 	andi	r2,r17,16
2008fb14:	1000091e 	bne	r2,zero,2008fb3c <___vfprintf_internal_r+0x17b4>
2008fb18:	8c40100c 	andi	r17,r17,64
2008fb1c:	88000726 	beq	r17,zero,2008fb3c <___vfprintf_internal_r+0x17b4>
2008fb20:	db002d17 	ldw	r12,180(sp)
2008fb24:	dac02f17 	ldw	r11,188(sp)
2008fb28:	60800017 	ldw	r2,0(r12)
2008fb2c:	63000104 	addi	r12,r12,4
2008fb30:	db002d15 	stw	r12,180(sp)
2008fb34:	12c0000d 	sth	r11,0(r2)
2008fb38:	003a4e06 	br	2008e474 <__flash_rwdata_start+0xfffef8a0>
2008fb3c:	db002d17 	ldw	r12,180(sp)
2008fb40:	dac02f17 	ldw	r11,188(sp)
2008fb44:	60800017 	ldw	r2,0(r12)
2008fb48:	63000104 	addi	r12,r12,4
2008fb4c:	db002d15 	stw	r12,180(sp)
2008fb50:	12c00015 	stw	r11,0(r2)
2008fb54:	003a4706 	br	2008e474 <__flash_rwdata_start+0xfffef8a0>
2008fb58:	1c000007 	ldb	r16,0(r3)
2008fb5c:	1805883a 	mov	r2,r3
2008fb60:	003a6e06 	br	2008e51c <__flash_rwdata_start+0xfffef948>
2008fb64:	88c0100c 	andi	r3,r17,64
2008fb68:	18006b26 	beq	r3,zero,2008fd18 <___vfprintf_internal_r+0x1990>
2008fb6c:	dac02d17 	ldw	r11,180(sp)
2008fb70:	14c0000b 	ldhu	r19,0(r2)
2008fb74:	0039883a 	mov	fp,zero
2008fb78:	5ac00104 	addi	r11,r11,4
2008fb7c:	dac02d15 	stw	r11,180(sp)
2008fb80:	003cb206 	br	2008ee4c <__flash_rwdata_start+0xffff0278>
2008fb84:	01000034 	movhi	r4,0
2008fb88:	2101a384 	addi	r4,r4,1678
2008fb8c:	d9002c15 	stw	r4,176(sp)
2008fb90:	dac02c17 	ldw	r11,176(sp)
2008fb94:	1c87883a 	add	r3,r3,r18
2008fb98:	10800044 	addi	r2,r2,1
2008fb9c:	42c00015 	stw	r11,0(r8)
2008fba0:	44800115 	stw	r18,4(r8)
2008fba4:	d8c02015 	stw	r3,128(sp)
2008fba8:	d8801f15 	stw	r2,124(sp)
2008fbac:	010001c4 	movi	r4,7
2008fbb0:	20bee016 	blt	r4,r2,2008f734 <__flash_rwdata_start+0xffff0b60>
2008fbb4:	42000204 	addi	r8,r8,8
2008fbb8:	003ee506 	br	2008f750 <__flash_rwdata_start+0xffff0b7c>
2008fbbc:	01000034 	movhi	r4,0
2008fbc0:	2101a384 	addi	r4,r4,1678
2008fbc4:	d9002c15 	stw	r4,176(sp)
2008fbc8:	003bbe06 	br	2008eac4 <__flash_rwdata_start+0xfffefef0>
2008fbcc:	b009883a 	mov	r4,r22
2008fbd0:	b80b883a 	mov	r5,r23
2008fbd4:	d9801e04 	addi	r6,sp,120
2008fbd8:	00962ec0 	call	200962ec <__sprint_r>
2008fbdc:	103ade1e 	bne	r2,zero,2008e758 <__flash_rwdata_start+0xfffefb84>
2008fbe0:	d8c02017 	ldw	r3,128(sp)
2008fbe4:	da000404 	addi	r8,sp,16
2008fbe8:	003d6b06 	br	2008f198 <__flash_rwdata_start+0xffff05c4>
2008fbec:	d8801f17 	ldw	r2,124(sp)
2008fbf0:	03000034 	movhi	r12,0
2008fbf4:	01000044 	movi	r4,1
2008fbf8:	18c00044 	addi	r3,r3,1
2008fbfc:	10800044 	addi	r2,r2,1
2008fc00:	63019b04 	addi	r12,r12,1644
2008fc04:	41000115 	stw	r4,4(r8)
2008fc08:	43000015 	stw	r12,0(r8)
2008fc0c:	d8c02015 	stw	r3,128(sp)
2008fc10:	d8801f15 	stw	r2,124(sp)
2008fc14:	010001c4 	movi	r4,7
2008fc18:	20804916 	blt	r4,r2,2008fd40 <___vfprintf_internal_r+0x19b8>
2008fc1c:	42000204 	addi	r8,r8,8
2008fc20:	8000041e 	bne	r16,zero,2008fc34 <___vfprintf_internal_r+0x18ac>
2008fc24:	dac03317 	ldw	r11,204(sp)
2008fc28:	5800021e 	bne	r11,zero,2008fc34 <___vfprintf_internal_r+0x18ac>
2008fc2c:	8880004c 	andi	r2,r17,1
2008fc30:	103bbb26 	beq	r2,zero,2008eb20 <__flash_rwdata_start+0xfffeff4c>
2008fc34:	db003817 	ldw	r12,224(sp)
2008fc38:	d8801f17 	ldw	r2,124(sp)
2008fc3c:	dac03517 	ldw	r11,212(sp)
2008fc40:	1b07883a 	add	r3,r3,r12
2008fc44:	10800044 	addi	r2,r2,1
2008fc48:	42c00015 	stw	r11,0(r8)
2008fc4c:	43000115 	stw	r12,4(r8)
2008fc50:	d8c02015 	stw	r3,128(sp)
2008fc54:	d8801f15 	stw	r2,124(sp)
2008fc58:	010001c4 	movi	r4,7
2008fc5c:	20812e16 	blt	r4,r2,20090118 <___vfprintf_internal_r+0x1d90>
2008fc60:	42000204 	addi	r8,r8,8
2008fc64:	0421c83a 	sub	r16,zero,r16
2008fc68:	04005c0e 	bge	zero,r16,2008fddc <___vfprintf_internal_r+0x1a54>
2008fc6c:	04800404 	movi	r18,16
2008fc70:	94009f0e 	bge	r18,r16,2008fef0 <___vfprintf_internal_r+0x1b68>
2008fc74:	01000034 	movhi	r4,0
2008fc78:	2101a384 	addi	r4,r4,1678
2008fc7c:	d9002c15 	stw	r4,176(sp)
2008fc80:	054001c4 	movi	r21,7
2008fc84:	00000306 	br	2008fc94 <___vfprintf_internal_r+0x190c>
2008fc88:	42000204 	addi	r8,r8,8
2008fc8c:	843ffc04 	addi	r16,r16,-16
2008fc90:	94009a0e 	bge	r18,r16,2008fefc <___vfprintf_internal_r+0x1b74>
2008fc94:	18c00404 	addi	r3,r3,16
2008fc98:	10800044 	addi	r2,r2,1
2008fc9c:	45000015 	stw	r20,0(r8)
2008fca0:	44800115 	stw	r18,4(r8)
2008fca4:	d8c02015 	stw	r3,128(sp)
2008fca8:	d8801f15 	stw	r2,124(sp)
2008fcac:	a8bff60e 	bge	r21,r2,2008fc88 <__flash_rwdata_start+0xffff10b4>
2008fcb0:	b009883a 	mov	r4,r22
2008fcb4:	b80b883a 	mov	r5,r23
2008fcb8:	d9801e04 	addi	r6,sp,120
2008fcbc:	00962ec0 	call	200962ec <__sprint_r>
2008fcc0:	103aa51e 	bne	r2,zero,2008e758 <__flash_rwdata_start+0xfffefb84>
2008fcc4:	d8c02017 	ldw	r3,128(sp)
2008fcc8:	d8801f17 	ldw	r2,124(sp)
2008fccc:	da000404 	addi	r8,sp,16
2008fcd0:	003fee06 	br	2008fc8c <__flash_rwdata_start+0xffff10b8>
2008fcd4:	008011c4 	movi	r2,71
2008fcd8:	1400be16 	blt	r2,r16,2008ffd4 <___vfprintf_internal_r+0x1c4c>
2008fcdc:	03000034 	movhi	r12,0
2008fce0:	63018d04 	addi	r12,r12,1588
2008fce4:	db003115 	stw	r12,196(sp)
2008fce8:	00c000c4 	movi	r3,3
2008fcec:	00bfdfc4 	movi	r2,-129
2008fcf0:	d8c02b15 	stw	r3,172(sp)
2008fcf4:	88a2703a 	and	r17,r17,r2
2008fcf8:	dd402783 	ldbu	r21,158(sp)
2008fcfc:	dcc02d15 	stw	r19,180(sp)
2008fd00:	1825883a 	mov	r18,r3
2008fd04:	d8003215 	stw	zero,200(sp)
2008fd08:	d8003415 	stw	zero,208(sp)
2008fd0c:	003af106 	br	2008e8d4 <__flash_rwdata_start+0xfffefd00>
2008fd10:	4825883a 	mov	r18,r9
2008fd14:	003c9306 	br	2008ef64 <__flash_rwdata_start+0xffff0390>
2008fd18:	db002d17 	ldw	r12,180(sp)
2008fd1c:	14c00017 	ldw	r19,0(r2)
2008fd20:	0039883a 	mov	fp,zero
2008fd24:	63000104 	addi	r12,r12,4
2008fd28:	db002d15 	stw	r12,180(sp)
2008fd2c:	003c4706 	br	2008ee4c <__flash_rwdata_start+0xffff0278>
2008fd30:	00800034 	movhi	r2,0
2008fd34:	10818b04 	addi	r2,r2,1580
2008fd38:	d8803115 	stw	r2,196(sp)
2008fd3c:	003bf106 	br	2008ed04 <__flash_rwdata_start+0xffff0130>
2008fd40:	b009883a 	mov	r4,r22
2008fd44:	b80b883a 	mov	r5,r23
2008fd48:	d9801e04 	addi	r6,sp,120
2008fd4c:	00962ec0 	call	200962ec <__sprint_r>
2008fd50:	103a811e 	bne	r2,zero,2008e758 <__flash_rwdata_start+0xfffefb84>
2008fd54:	dc002617 	ldw	r16,152(sp)
2008fd58:	d8c02017 	ldw	r3,128(sp)
2008fd5c:	da000404 	addi	r8,sp,16
2008fd60:	003faf06 	br	2008fc20 <__flash_rwdata_start+0xffff104c>
2008fd64:	db002e17 	ldw	r12,184(sp)
2008fd68:	1805883a 	mov	r2,r3
2008fd6c:	dac02d15 	stw	r11,180(sp)
2008fd70:	0319c83a 	sub	r12,zero,r12
2008fd74:	db002e15 	stw	r12,184(sp)
2008fd78:	003a8206 	br	2008e784 <__flash_rwdata_start+0xfffefbb0>
2008fd7c:	18800044 	addi	r2,r3,1
2008fd80:	8c400814 	ori	r17,r17,32
2008fd84:	1c000047 	ldb	r16,1(r3)
2008fd88:	0039e406 	br	2008e51c <__flash_rwdata_start+0xfffef948>
2008fd8c:	b009883a 	mov	r4,r22
2008fd90:	b80b883a 	mov	r5,r23
2008fd94:	d9801e04 	addi	r6,sp,120
2008fd98:	00962ec0 	call	200962ec <__sprint_r>
2008fd9c:	103a6e1e 	bne	r2,zero,2008e758 <__flash_rwdata_start+0xfffefb84>
2008fda0:	d8c02017 	ldw	r3,128(sp)
2008fda4:	da000404 	addi	r8,sp,16
2008fda8:	003d0c06 	br	2008f1dc <__flash_rwdata_start+0xffff0608>
2008fdac:	db002817 	ldw	r12,160(sp)
2008fdb0:	d8c03117 	ldw	r3,196(sp)
2008fdb4:	60e5c83a 	sub	r18,r12,r3
2008fdb8:	003ac106 	br	2008e8c0 <__flash_rwdata_start+0xfffefcec>
2008fdbc:	b009883a 	mov	r4,r22
2008fdc0:	b80b883a 	mov	r5,r23
2008fdc4:	d9801e04 	addi	r6,sp,120
2008fdc8:	00962ec0 	call	200962ec <__sprint_r>
2008fdcc:	103a621e 	bne	r2,zero,2008e758 <__flash_rwdata_start+0xfffefb84>
2008fdd0:	d8c02017 	ldw	r3,128(sp)
2008fdd4:	d8801f17 	ldw	r2,124(sp)
2008fdd8:	da000404 	addi	r8,sp,16
2008fddc:	db003317 	ldw	r12,204(sp)
2008fde0:	dac03117 	ldw	r11,196(sp)
2008fde4:	10800044 	addi	r2,r2,1
2008fde8:	1b07883a 	add	r3,r3,r12
2008fdec:	42c00015 	stw	r11,0(r8)
2008fdf0:	43000115 	stw	r12,4(r8)
2008fdf4:	d8c02015 	stw	r3,128(sp)
2008fdf8:	d8801f15 	stw	r2,124(sp)
2008fdfc:	010001c4 	movi	r4,7
2008fe00:	20bb460e 	bge	r4,r2,2008eb1c <__flash_rwdata_start+0xfffeff48>
2008fe04:	003d8506 	br	2008f41c <__flash_rwdata_start+0xffff0848>
2008fe08:	da003f15 	stw	r8,252(sp)
2008fe0c:	008c2f80 	call	2008c2f8 <strlen>
2008fe10:	1025883a 	mov	r18,r2
2008fe14:	da003f17 	ldw	r8,252(sp)
2008fe18:	903c540e 	bge	r18,zero,2008ef6c <__flash_rwdata_start+0xffff0398>
2008fe1c:	0005883a 	mov	r2,zero
2008fe20:	003c5206 	br	2008ef6c <__flash_rwdata_start+0xffff0398>
2008fe24:	01000034 	movhi	r4,0
2008fe28:	2101a784 	addi	r4,r4,1694
2008fe2c:	d9003615 	stw	r4,216(sp)
2008fe30:	003adc06 	br	2008e9a4 <__flash_rwdata_start+0xfffefdd0>
2008fe34:	d8802604 	addi	r2,sp,152
2008fe38:	d8800115 	stw	r2,4(sp)
2008fe3c:	d9403717 	ldw	r5,220(sp)
2008fe40:	d8802504 	addi	r2,sp,148
2008fe44:	d8800215 	stw	r2,8(sp)
2008fe48:	d8802104 	addi	r2,sp,132
2008fe4c:	da400015 	stw	r9,0(sp)
2008fe50:	d8800315 	stw	r2,12(sp)
2008fe54:	b009883a 	mov	r4,r22
2008fe58:	900d883a 	mov	r6,r18
2008fe5c:	01c000c4 	movi	r7,3
2008fe60:	da003f15 	stw	r8,252(sp)
2008fe64:	da403e15 	stw	r9,248(sp)
2008fe68:	00909d00 	call	200909d0 <_dtoa_r>
2008fe6c:	da403e17 	ldw	r9,248(sp)
2008fe70:	da003f17 	ldw	r8,252(sp)
2008fe74:	d8803115 	stw	r2,196(sp)
2008fe78:	4839883a 	mov	fp,r9
2008fe7c:	dac03117 	ldw	r11,196(sp)
2008fe80:	00801184 	movi	r2,70
2008fe84:	5f15883a 	add	r10,r11,fp
2008fe88:	a8bef01e 	bne	r21,r2,2008fa4c <__flash_rwdata_start+0xffff0e78>
2008fe8c:	59000007 	ldb	r4,0(r11)
2008fe90:	00800c04 	movi	r2,48
2008fe94:	2080d526 	beq	r4,r2,200901ec <___vfprintf_internal_r+0x1e64>
2008fe98:	d8c02617 	ldw	r3,152(sp)
2008fe9c:	50d5883a 	add	r10,r10,r3
2008fea0:	003eea06 	br	2008fa4c <__flash_rwdata_start+0xffff0e78>
2008fea4:	0025883a 	mov	r18,zero
2008fea8:	003db306 	br	2008f578 <__flash_rwdata_start+0xffff09a4>
2008feac:	b009883a 	mov	r4,r22
2008feb0:	b80b883a 	mov	r5,r23
2008feb4:	d9801e04 	addi	r6,sp,120
2008feb8:	00962ec0 	call	200962ec <__sprint_r>
2008febc:	103a261e 	bne	r2,zero,2008e758 <__flash_rwdata_start+0xfffefb84>
2008fec0:	d8c02017 	ldw	r3,128(sp)
2008fec4:	da000404 	addi	r8,sp,16
2008fec8:	003daa06 	br	2008f574 <__flash_rwdata_start+0xffff09a0>
2008fecc:	b009883a 	mov	r4,r22
2008fed0:	b80b883a 	mov	r5,r23
2008fed4:	d9801e04 	addi	r6,sp,120
2008fed8:	00962ec0 	call	200962ec <__sprint_r>
2008fedc:	103a1e1e 	bne	r2,zero,2008e758 <__flash_rwdata_start+0xfffefb84>
2008fee0:	d8802617 	ldw	r2,152(sp)
2008fee4:	d8c02017 	ldw	r3,128(sp)
2008fee8:	da000404 	addi	r8,sp,16
2008feec:	003e2c06 	br	2008f7a0 <__flash_rwdata_start+0xffff0bcc>
2008fef0:	03000034 	movhi	r12,0
2008fef4:	6301a384 	addi	r12,r12,1678
2008fef8:	db002c15 	stw	r12,176(sp)
2008fefc:	dac02c17 	ldw	r11,176(sp)
2008ff00:	1c07883a 	add	r3,r3,r16
2008ff04:	10800044 	addi	r2,r2,1
2008ff08:	42c00015 	stw	r11,0(r8)
2008ff0c:	44000115 	stw	r16,4(r8)
2008ff10:	d8c02015 	stw	r3,128(sp)
2008ff14:	d8801f15 	stw	r2,124(sp)
2008ff18:	010001c4 	movi	r4,7
2008ff1c:	20bfa716 	blt	r4,r2,2008fdbc <__flash_rwdata_start+0xffff11e8>
2008ff20:	42000204 	addi	r8,r8,8
2008ff24:	003fad06 	br	2008fddc <__flash_rwdata_start+0xffff1208>
2008ff28:	00800184 	movi	r2,6
2008ff2c:	1240012e 	bgeu	r2,r9,2008ff34 <___vfprintf_internal_r+0x1bac>
2008ff30:	1013883a 	mov	r9,r2
2008ff34:	4825883a 	mov	r18,r9
2008ff38:	4805883a 	mov	r2,r9
2008ff3c:	4800c216 	blt	r9,zero,20090248 <___vfprintf_internal_r+0x1ec0>
2008ff40:	d8802b15 	stw	r2,172(sp)
2008ff44:	00800034 	movhi	r2,0
2008ff48:	10819904 	addi	r2,r2,1636
2008ff4c:	d8803115 	stw	r2,196(sp)
2008ff50:	dcc02d15 	stw	r19,180(sp)
2008ff54:	d8003215 	stw	zero,200(sp)
2008ff58:	d8003415 	stw	zero,208(sp)
2008ff5c:	0005883a 	mov	r2,zero
2008ff60:	003a6306 	br	2008e8f0 <__flash_rwdata_start+0xfffefd1c>
2008ff64:	0021883a 	mov	r16,zero
2008ff68:	003e1f06 	br	2008f7e8 <__flash_rwdata_start+0xffff0c14>
2008ff6c:	b009883a 	mov	r4,r22
2008ff70:	b80b883a 	mov	r5,r23
2008ff74:	d9801e04 	addi	r6,sp,120
2008ff78:	00962ec0 	call	200962ec <__sprint_r>
2008ff7c:	1039f61e 	bne	r2,zero,2008e758 <__flash_rwdata_start+0xfffefb84>
2008ff80:	d8802617 	ldw	r2,152(sp)
2008ff84:	db003317 	ldw	r12,204(sp)
2008ff88:	d8c02017 	ldw	r3,128(sp)
2008ff8c:	da000404 	addi	r8,sp,16
2008ff90:	6085c83a 	sub	r2,r12,r2
2008ff94:	003e1306 	br	2008f7e4 <__flash_rwdata_start+0xffff0c10>
2008ff98:	03000034 	movhi	r12,0
2008ff9c:	6301a784 	addi	r12,r12,1694
2008ffa0:	db003615 	stw	r12,216(sp)
2008ffa4:	003b0206 	br	2008ebb0 <__flash_rwdata_start+0xfffeffdc>
2008ffa8:	00c00b44 	movi	r3,45
2008ffac:	d8802b15 	stw	r2,172(sp)
2008ffb0:	dc402d17 	ldw	r17,180(sp)
2008ffb4:	d8c02785 	stb	r3,158(sp)
2008ffb8:	dcc02d15 	stw	r19,180(sp)
2008ffbc:	d8003215 	stw	zero,200(sp)
2008ffc0:	00800b44 	movi	r2,45
2008ffc4:	003a4706 	br	2008e8e4 <__flash_rwdata_start+0xfffefd10>
2008ffc8:	05400b44 	movi	r21,45
2008ffcc:	dd402785 	stb	r21,158(sp)
2008ffd0:	003b4706 	br	2008ecf0 <__flash_rwdata_start+0xffff011c>
2008ffd4:	00800034 	movhi	r2,0
2008ffd8:	10818e04 	addi	r2,r2,1592
2008ffdc:	d8803115 	stw	r2,196(sp)
2008ffe0:	003f4106 	br	2008fce8 <__flash_rwdata_start+0xffff1114>
2008ffe4:	d8c02617 	ldw	r3,152(sp)
2008ffe8:	00bfff44 	movi	r2,-3
2008ffec:	18801116 	blt	r3,r2,20090034 <___vfprintf_internal_r+0x1cac>
2008fff0:	48c01016 	blt	r9,r3,20090034 <___vfprintf_internal_r+0x1cac>
2008fff4:	d8c03415 	stw	r3,208(sp)
2008fff8:	040019c4 	movi	r16,103
2008fffc:	003eb206 	br	2008fac8 <__flash_rwdata_start+0xffff0ef4>
20090000:	01000034 	movhi	r4,0
20090004:	2101a384 	addi	r4,r4,1678
20090008:	d9002c15 	stw	r4,176(sp)
2009000c:	003cb106 	br	2008f2d4 <__flash_rwdata_start+0xffff0700>
20090010:	5005883a 	mov	r2,r10
20090014:	003ea106 	br	2008fa9c <__flash_rwdata_start+0xffff0ec8>
20090018:	da402b15 	stw	r9,172(sp)
2009001c:	dd402783 	ldbu	r21,158(sp)
20090020:	4825883a 	mov	r18,r9
20090024:	dcc02d15 	stw	r19,180(sp)
20090028:	d8003215 	stw	zero,200(sp)
2009002c:	d8003415 	stw	zero,208(sp)
20090030:	003a2806 	br	2008e8d4 <__flash_rwdata_start+0xfffefd00>
20090034:	843fff84 	addi	r16,r16,-2
20090038:	1f3fffc4 	addi	fp,r3,-1
2009003c:	df002615 	stw	fp,152(sp)
20090040:	dc0022c5 	stb	r16,139(sp)
20090044:	e0009816 	blt	fp,zero,200902a8 <___vfprintf_internal_r+0x1f20>
20090048:	00800ac4 	movi	r2,43
2009004c:	d8802305 	stb	r2,140(sp)
20090050:	00800244 	movi	r2,9
20090054:	1700750e 	bge	r2,fp,2009022c <___vfprintf_internal_r+0x1ea4>
20090058:	dd4022c4 	addi	r21,sp,139
2009005c:	dc002c15 	stw	r16,176(sp)
20090060:	4025883a 	mov	r18,r8
20090064:	a821883a 	mov	r16,r21
20090068:	e009883a 	mov	r4,fp
2009006c:	01400284 	movi	r5,10
20090070:	0088a180 	call	20088a18 <__modsi3>
20090074:	10800c04 	addi	r2,r2,48
20090078:	843fffc4 	addi	r16,r16,-1
2009007c:	e009883a 	mov	r4,fp
20090080:	01400284 	movi	r5,10
20090084:	80800005 	stb	r2,0(r16)
20090088:	00889c40 	call	200889c4 <__divsi3>
2009008c:	1039883a 	mov	fp,r2
20090090:	00800244 	movi	r2,9
20090094:	173ff416 	blt	r2,fp,20090068 <__flash_rwdata_start+0xffff1494>
20090098:	9011883a 	mov	r8,r18
2009009c:	e0800c04 	addi	r2,fp,48
200900a0:	8025883a 	mov	r18,r16
200900a4:	913fffc4 	addi	r4,r18,-1
200900a8:	90bfffc5 	stb	r2,-1(r18)
200900ac:	dc002c17 	ldw	r16,176(sp)
200900b0:	2540852e 	bgeu	r4,r21,200902c8 <___vfprintf_internal_r+0x1f40>
200900b4:	d9402384 	addi	r5,sp,142
200900b8:	2c8bc83a 	sub	r5,r5,r18
200900bc:	d8c02344 	addi	r3,sp,141
200900c0:	a94b883a 	add	r5,r21,r5
200900c4:	00000106 	br	200900cc <___vfprintf_internal_r+0x1d44>
200900c8:	20800003 	ldbu	r2,0(r4)
200900cc:	18800005 	stb	r2,0(r3)
200900d0:	18c00044 	addi	r3,r3,1
200900d4:	21000044 	addi	r4,r4,1
200900d8:	197ffb1e 	bne	r3,r5,200900c8 <__flash_rwdata_start+0xffff14f4>
200900dc:	d8802304 	addi	r2,sp,140
200900e0:	1485c83a 	sub	r2,r2,r18
200900e4:	d8c02344 	addi	r3,sp,141
200900e8:	1885883a 	add	r2,r3,r2
200900ec:	dac03317 	ldw	r11,204(sp)
200900f0:	156bc83a 	sub	r21,r2,r21
200900f4:	dd403a15 	stw	r21,232(sp)
200900f8:	00800044 	movi	r2,1
200900fc:	5d65883a 	add	r18,r11,r21
20090100:	12c0660e 	bge	r2,r11,2009029c <___vfprintf_internal_r+0x1f14>
20090104:	94800044 	addi	r18,r18,1
20090108:	9005883a 	mov	r2,r18
2009010c:	90006116 	blt	r18,zero,20090294 <___vfprintf_internal_r+0x1f0c>
20090110:	d8003415 	stw	zero,208(sp)
20090114:	003e7406 	br	2008fae8 <__flash_rwdata_start+0xffff0f14>
20090118:	b009883a 	mov	r4,r22
2009011c:	b80b883a 	mov	r5,r23
20090120:	d9801e04 	addi	r6,sp,120
20090124:	00962ec0 	call	200962ec <__sprint_r>
20090128:	10398b1e 	bne	r2,zero,2008e758 <__flash_rwdata_start+0xfffefb84>
2009012c:	dc002617 	ldw	r16,152(sp)
20090130:	d8c02017 	ldw	r3,128(sp)
20090134:	d8801f17 	ldw	r2,124(sp)
20090138:	da000404 	addi	r8,sp,16
2009013c:	003ec906 	br	2008fc64 <__flash_rwdata_start+0xffff1090>
20090140:	483e1c1e 	bne	r9,zero,2008f9b4 <__flash_rwdata_start+0xffff0de0>
20090144:	9013883a 	mov	r9,r18
20090148:	003e1a06 	br	2008f9b4 <__flash_rwdata_start+0xffff0de0>
2009014c:	02400184 	movi	r9,6
20090150:	003e1806 	br	2008f9b4 <__flash_rwdata_start+0xffff0de0>
20090154:	d8c03417 	ldw	r3,208(sp)
20090158:	00c04b0e 	bge	zero,r3,20090288 <___vfprintf_internal_r+0x1f00>
2009015c:	04800044 	movi	r18,1
20090160:	dac03317 	ldw	r11,204(sp)
20090164:	92e5883a 	add	r18,r18,r11
20090168:	9005883a 	mov	r2,r18
2009016c:	903e5e0e 	bge	r18,zero,2008fae8 <__flash_rwdata_start+0xffff0f14>
20090170:	0005883a 	mov	r2,zero
20090174:	003e5c06 	br	2008fae8 <__flash_rwdata_start+0xffff0f14>
20090178:	00c00b44 	movi	r3,45
2009017c:	64a0003c 	xorhi	r18,r12,32768
20090180:	d8c02b05 	stb	r3,172(sp)
20090184:	003e1106 	br	2008f9cc <__flash_rwdata_start+0xffff0df8>
20090188:	4f000044 	addi	fp,r9,1
2009018c:	003e1606 	br	2008f9e8 <__flash_rwdata_start+0xffff0e14>
20090190:	d8c02617 	ldw	r3,152(sp)
20090194:	d8c03415 	stw	r3,208(sp)
20090198:	00c0350e 	bge	zero,r3,20090270 <___vfprintf_internal_r+0x1ee8>
2009019c:	4800081e 	bne	r9,zero,200901c0 <___vfprintf_internal_r+0x1e38>
200901a0:	8c40004c 	andi	r17,r17,1
200901a4:	8800061e 	bne	r17,zero,200901c0 <___vfprintf_internal_r+0x1e38>
200901a8:	1805883a 	mov	r2,r3
200901ac:	183e4d0e 	bge	r3,zero,2008fae4 <__flash_rwdata_start+0xffff0f10>
200901b0:	0005883a 	mov	r2,zero
200901b4:	003e4b06 	br	2008fae4 <__flash_rwdata_start+0xffff0f10>
200901b8:	d8802117 	ldw	r2,132(sp)
200901bc:	003e3706 	br	2008fa9c <__flash_rwdata_start+0xffff0ec8>
200901c0:	dac03417 	ldw	r11,208(sp)
200901c4:	4a400044 	addi	r9,r9,1
200901c8:	5a65883a 	add	r18,r11,r9
200901cc:	9005883a 	mov	r2,r18
200901d0:	903e450e 	bge	r18,zero,2008fae8 <__flash_rwdata_start+0xffff0f14>
200901d4:	003fe606 	br	20090170 <__flash_rwdata_start+0xffff159c>
200901d8:	db003417 	ldw	r12,208(sp)
200901dc:	64800044 	addi	r18,r12,1
200901e0:	9005883a 	mov	r2,r18
200901e4:	903e400e 	bge	r18,zero,2008fae8 <__flash_rwdata_start+0xffff0f14>
200901e8:	003fe106 	br	20090170 <__flash_rwdata_start+0xffff159c>
200901ec:	d9003717 	ldw	r4,220(sp)
200901f0:	900b883a 	mov	r5,r18
200901f4:	000d883a 	mov	r6,zero
200901f8:	000f883a 	mov	r7,zero
200901fc:	da003f15 	stw	r8,252(sp)
20090200:	da403e15 	stw	r9,248(sp)
20090204:	da803d15 	stw	r10,244(sp)
20090208:	0098afc0 	call	20098afc <__eqdf2>
2009020c:	da003f17 	ldw	r8,252(sp)
20090210:	da403e17 	ldw	r9,248(sp)
20090214:	da803d17 	ldw	r10,244(sp)
20090218:	103f1f26 	beq	r2,zero,2008fe98 <__flash_rwdata_start+0xffff12c4>
2009021c:	00800044 	movi	r2,1
20090220:	1707c83a 	sub	r3,r2,fp
20090224:	d8c02615 	stw	r3,152(sp)
20090228:	003f1c06 	br	2008fe9c <__flash_rwdata_start+0xffff12c8>
2009022c:	00800c04 	movi	r2,48
20090230:	e0c00c04 	addi	r3,fp,48
20090234:	d8802345 	stb	r2,141(sp)
20090238:	d8c02385 	stb	r3,142(sp)
2009023c:	d88023c4 	addi	r2,sp,143
20090240:	dd4022c4 	addi	r21,sp,139
20090244:	003fa906 	br	200900ec <__flash_rwdata_start+0xffff1518>
20090248:	0005883a 	mov	r2,zero
2009024c:	003f3c06 	br	2008ff40 <__flash_rwdata_start+0xffff136c>
20090250:	dac02d17 	ldw	r11,180(sp)
20090254:	5a400017 	ldw	r9,0(r11)
20090258:	5ac00104 	addi	r11,r11,4
2009025c:	dac02d15 	stw	r11,180(sp)
20090260:	483ec80e 	bge	r9,zero,2008fd84 <__flash_rwdata_start+0xffff11b0>
20090264:	027fffc4 	movi	r9,-1
20090268:	1c000047 	ldb	r16,1(r3)
2009026c:	0038ab06 	br	2008e51c <__flash_rwdata_start+0xfffef948>
20090270:	4800111e 	bne	r9,zero,200902b8 <___vfprintf_internal_r+0x1f30>
20090274:	8c40004c 	andi	r17,r17,1
20090278:	88000f1e 	bne	r17,zero,200902b8 <___vfprintf_internal_r+0x1f30>
2009027c:	00800044 	movi	r2,1
20090280:	1025883a 	mov	r18,r2
20090284:	003e1806 	br	2008fae8 <__flash_rwdata_start+0xffff0f14>
20090288:	04800084 	movi	r18,2
2009028c:	90e5c83a 	sub	r18,r18,r3
20090290:	003fb306 	br	20090160 <__flash_rwdata_start+0xffff158c>
20090294:	0005883a 	mov	r2,zero
20090298:	003f9d06 	br	20090110 <__flash_rwdata_start+0xffff153c>
2009029c:	88a2703a 	and	r17,r17,r2
200902a0:	883f9926 	beq	r17,zero,20090108 <__flash_rwdata_start+0xffff1534>
200902a4:	003f9706 	br	20090104 <__flash_rwdata_start+0xffff1530>
200902a8:	00800b44 	movi	r2,45
200902ac:	0739c83a 	sub	fp,zero,fp
200902b0:	d8802305 	stb	r2,140(sp)
200902b4:	003f6606 	br	20090050 <__flash_rwdata_start+0xffff147c>
200902b8:	4c800084 	addi	r18,r9,2
200902bc:	9005883a 	mov	r2,r18
200902c0:	903e090e 	bge	r18,zero,2008fae8 <__flash_rwdata_start+0xffff0f14>
200902c4:	003faa06 	br	20090170 <__flash_rwdata_start+0xffff159c>
200902c8:	d8802344 	addi	r2,sp,141
200902cc:	003f8706 	br	200900ec <__flash_rwdata_start+0xffff1518>
200902d0:	d8c02617 	ldw	r3,152(sp)
200902d4:	003f5806 	br	20090038 <__flash_rwdata_start+0xffff1464>

200902d8 <__vfprintf_internal>:
200902d8:	2007883a 	mov	r3,r4
200902dc:	01000034 	movhi	r4,0
200902e0:	210a9204 	addi	r4,r4,10824
200902e4:	21000017 	ldw	r4,0(r4)
200902e8:	2805883a 	mov	r2,r5
200902ec:	300f883a 	mov	r7,r6
200902f0:	180b883a 	mov	r5,r3
200902f4:	100d883a 	mov	r6,r2
200902f8:	008e3881 	jmpi	2008e388 <___vfprintf_internal_r>

200902fc <__sbprintf>:
200902fc:	2880030b 	ldhu	r2,12(r5)
20090300:	2ac01917 	ldw	r11,100(r5)
20090304:	2a80038b 	ldhu	r10,14(r5)
20090308:	2a400717 	ldw	r9,28(r5)
2009030c:	2a000917 	ldw	r8,36(r5)
20090310:	defee204 	addi	sp,sp,-1144
20090314:	00c10004 	movi	r3,1024
20090318:	dc011a15 	stw	r16,1128(sp)
2009031c:	10bfff4c 	andi	r2,r2,65533
20090320:	2821883a 	mov	r16,r5
20090324:	d8cb883a 	add	r5,sp,r3
20090328:	dc811c15 	stw	r18,1136(sp)
2009032c:	dc411b15 	stw	r17,1132(sp)
20090330:	dfc11d15 	stw	ra,1140(sp)
20090334:	2025883a 	mov	r18,r4
20090338:	d881030d 	sth	r2,1036(sp)
2009033c:	dac11915 	stw	r11,1124(sp)
20090340:	da81038d 	sth	r10,1038(sp)
20090344:	da410715 	stw	r9,1052(sp)
20090348:	da010915 	stw	r8,1060(sp)
2009034c:	dec10015 	stw	sp,1024(sp)
20090350:	dec10415 	stw	sp,1040(sp)
20090354:	d8c10215 	stw	r3,1032(sp)
20090358:	d8c10515 	stw	r3,1044(sp)
2009035c:	d8010615 	stw	zero,1048(sp)
20090360:	008e3880 	call	2008e388 <___vfprintf_internal_r>
20090364:	1023883a 	mov	r17,r2
20090368:	10000416 	blt	r2,zero,2009037c <__sbprintf+0x80>
2009036c:	9009883a 	mov	r4,r18
20090370:	d9410004 	addi	r5,sp,1024
20090374:	00923000 	call	20092300 <_fflush_r>
20090378:	10000d1e 	bne	r2,zero,200903b0 <__sbprintf+0xb4>
2009037c:	d8c1030b 	ldhu	r3,1036(sp)
20090380:	18c0100c 	andi	r3,r3,64
20090384:	18000326 	beq	r3,zero,20090394 <__sbprintf+0x98>
20090388:	8080030b 	ldhu	r2,12(r16)
2009038c:	10801014 	ori	r2,r2,64
20090390:	8080030d 	sth	r2,12(r16)
20090394:	8805883a 	mov	r2,r17
20090398:	dfc11d17 	ldw	ra,1140(sp)
2009039c:	dc811c17 	ldw	r18,1136(sp)
200903a0:	dc411b17 	ldw	r17,1132(sp)
200903a4:	dc011a17 	ldw	r16,1128(sp)
200903a8:	dec11e04 	addi	sp,sp,1144
200903ac:	f800283a 	ret
200903b0:	047fffc4 	movi	r17,-1
200903b4:	003ff106 	br	2009037c <__flash_rwdata_start+0xffff17a8>

200903b8 <_vsnprintf_r>:
200903b8:	3005883a 	mov	r2,r6
200903bc:	30003616 	blt	r6,zero,20090498 <_vsnprintf_r+0xe0>
200903c0:	deffe404 	addi	sp,sp,-112
200903c4:	00c08204 	movi	r3,520
200903c8:	dc001a15 	stw	r16,104(sp)
200903cc:	dfc01b15 	stw	ra,108(sp)
200903d0:	d8c0030d 	sth	r3,12(sp)
200903d4:	d9400015 	stw	r5,0(sp)
200903d8:	d9400415 	stw	r5,16(sp)
200903dc:	380d883a 	mov	r6,r7
200903e0:	2021883a 	mov	r16,r4
200903e4:	10001326 	beq	r2,zero,20090434 <_vsnprintf_r+0x7c>
200903e8:	00c00034 	movhi	r3,0
200903ec:	18ca9204 	addi	r3,r3,10824
200903f0:	19000017 	ldw	r4,0(r3)
200903f4:	d9c01c17 	ldw	r7,112(sp)
200903f8:	10bfffc4 	addi	r2,r2,-1
200903fc:	d8800215 	stw	r2,8(sp)
20090400:	d8800515 	stw	r2,20(sp)
20090404:	d80b883a 	mov	r5,sp
20090408:	00bfffc4 	movi	r2,-1
2009040c:	d880038d 	sth	r2,14(sp)
20090410:	008c3f80 	call	2008c3f8 <___svfprintf_internal_r>
20090414:	00ffffc4 	movi	r3,-1
20090418:	10c01c16 	blt	r2,r3,2009048c <_vsnprintf_r+0xd4>
2009041c:	d8c00017 	ldw	r3,0(sp)
20090420:	18000005 	stb	zero,0(r3)
20090424:	dfc01b17 	ldw	ra,108(sp)
20090428:	dc001a17 	ldw	r16,104(sp)
2009042c:	dec01c04 	addi	sp,sp,112
20090430:	f800283a 	ret
20090434:	00800034 	movhi	r2,0
20090438:	108a9204 	addi	r2,r2,10824
2009043c:	11000017 	ldw	r4,0(r2)
20090440:	d9c01c17 	ldw	r7,112(sp)
20090444:	00bfffc4 	movi	r2,-1
20090448:	d80b883a 	mov	r5,sp
2009044c:	d8000215 	stw	zero,8(sp)
20090450:	d8000515 	stw	zero,20(sp)
20090454:	d880038d 	sth	r2,14(sp)
20090458:	008c3f80 	call	2008c3f8 <___svfprintf_internal_r>
2009045c:	00ffffc4 	movi	r3,-1
20090460:	10c00416 	blt	r2,r3,20090474 <_vsnprintf_r+0xbc>
20090464:	dfc01b17 	ldw	ra,108(sp)
20090468:	dc001a17 	ldw	r16,104(sp)
2009046c:	dec01c04 	addi	sp,sp,112
20090470:	f800283a 	ret
20090474:	00c022c4 	movi	r3,139
20090478:	80c00015 	stw	r3,0(r16)
2009047c:	dfc01b17 	ldw	ra,108(sp)
20090480:	dc001a17 	ldw	r16,104(sp)
20090484:	dec01c04 	addi	sp,sp,112
20090488:	f800283a 	ret
2009048c:	00c022c4 	movi	r3,139
20090490:	80c00015 	stw	r3,0(r16)
20090494:	003fe106 	br	2009041c <__flash_rwdata_start+0xffff1848>
20090498:	008022c4 	movi	r2,139
2009049c:	20800015 	stw	r2,0(r4)
200904a0:	00bfffc4 	movi	r2,-1
200904a4:	f800283a 	ret

200904a8 <vsnprintf>:
200904a8:	00800034 	movhi	r2,0
200904ac:	108a9204 	addi	r2,r2,10824
200904b0:	2011883a 	mov	r8,r4
200904b4:	11000017 	ldw	r4,0(r2)
200904b8:	defffe04 	addi	sp,sp,-8
200904bc:	2807883a 	mov	r3,r5
200904c0:	3005883a 	mov	r2,r6
200904c4:	d9c00015 	stw	r7,0(sp)
200904c8:	400b883a 	mov	r5,r8
200904cc:	180d883a 	mov	r6,r3
200904d0:	100f883a 	mov	r7,r2
200904d4:	dfc00115 	stw	ra,4(sp)
200904d8:	00903b80 	call	200903b8 <_vsnprintf_r>
200904dc:	dfc00117 	ldw	ra,4(sp)
200904e0:	dec00204 	addi	sp,sp,8
200904e4:	f800283a 	ret

200904e8 <__swsetup_r>:
200904e8:	00800034 	movhi	r2,0
200904ec:	defffd04 	addi	sp,sp,-12
200904f0:	108a9204 	addi	r2,r2,10824
200904f4:	dc400115 	stw	r17,4(sp)
200904f8:	2023883a 	mov	r17,r4
200904fc:	11000017 	ldw	r4,0(r2)
20090500:	dc000015 	stw	r16,0(sp)
20090504:	dfc00215 	stw	ra,8(sp)
20090508:	2821883a 	mov	r16,r5
2009050c:	20000226 	beq	r4,zero,20090518 <__swsetup_r+0x30>
20090510:	20c00e17 	ldw	r3,56(r4)
20090514:	18003126 	beq	r3,zero,200905dc <__swsetup_r+0xf4>
20090518:	8080030b 	ldhu	r2,12(r16)
2009051c:	10c0020c 	andi	r3,r2,8
20090520:	100d883a 	mov	r6,r2
20090524:	18000f26 	beq	r3,zero,20090564 <__swsetup_r+0x7c>
20090528:	80c00417 	ldw	r3,16(r16)
2009052c:	18001526 	beq	r3,zero,20090584 <__swsetup_r+0x9c>
20090530:	1100004c 	andi	r4,r2,1
20090534:	20001c1e 	bne	r4,zero,200905a8 <__swsetup_r+0xc0>
20090538:	1080008c 	andi	r2,r2,2
2009053c:	1000291e 	bne	r2,zero,200905e4 <__swsetup_r+0xfc>
20090540:	80800517 	ldw	r2,20(r16)
20090544:	80800215 	stw	r2,8(r16)
20090548:	18001c26 	beq	r3,zero,200905bc <__swsetup_r+0xd4>
2009054c:	0005883a 	mov	r2,zero
20090550:	dfc00217 	ldw	ra,8(sp)
20090554:	dc400117 	ldw	r17,4(sp)
20090558:	dc000017 	ldw	r16,0(sp)
2009055c:	dec00304 	addi	sp,sp,12
20090560:	f800283a 	ret
20090564:	3080040c 	andi	r2,r6,16
20090568:	10002e26 	beq	r2,zero,20090624 <__swsetup_r+0x13c>
2009056c:	3080010c 	andi	r2,r6,4
20090570:	10001e1e 	bne	r2,zero,200905ec <__swsetup_r+0x104>
20090574:	80c00417 	ldw	r3,16(r16)
20090578:	30800214 	ori	r2,r6,8
2009057c:	8080030d 	sth	r2,12(r16)
20090580:	183feb1e 	bne	r3,zero,20090530 <__flash_rwdata_start+0xffff195c>
20090584:	1140a00c 	andi	r5,r2,640
20090588:	01008004 	movi	r4,512
2009058c:	293fe826 	beq	r5,r4,20090530 <__flash_rwdata_start+0xffff195c>
20090590:	8809883a 	mov	r4,r17
20090594:	800b883a 	mov	r5,r16
20090598:	00932680 	call	20093268 <__smakebuf_r>
2009059c:	8080030b 	ldhu	r2,12(r16)
200905a0:	80c00417 	ldw	r3,16(r16)
200905a4:	003fe206 	br	20090530 <__flash_rwdata_start+0xffff195c>
200905a8:	80800517 	ldw	r2,20(r16)
200905ac:	80000215 	stw	zero,8(r16)
200905b0:	0085c83a 	sub	r2,zero,r2
200905b4:	80800615 	stw	r2,24(r16)
200905b8:	183fe41e 	bne	r3,zero,2009054c <__flash_rwdata_start+0xffff1978>
200905bc:	80c0030b 	ldhu	r3,12(r16)
200905c0:	0005883a 	mov	r2,zero
200905c4:	1900200c 	andi	r4,r3,128
200905c8:	203fe126 	beq	r4,zero,20090550 <__flash_rwdata_start+0xffff197c>
200905cc:	18c01014 	ori	r3,r3,64
200905d0:	80c0030d 	sth	r3,12(r16)
200905d4:	00bfffc4 	movi	r2,-1
200905d8:	003fdd06 	br	20090550 <__flash_rwdata_start+0xffff197c>
200905dc:	00926dc0 	call	200926dc <__sinit>
200905e0:	003fcd06 	br	20090518 <__flash_rwdata_start+0xffff1944>
200905e4:	0005883a 	mov	r2,zero
200905e8:	003fd606 	br	20090544 <__flash_rwdata_start+0xffff1970>
200905ec:	81400c17 	ldw	r5,48(r16)
200905f0:	28000626 	beq	r5,zero,2009060c <__swsetup_r+0x124>
200905f4:	80801004 	addi	r2,r16,64
200905f8:	28800326 	beq	r5,r2,20090608 <__swsetup_r+0x120>
200905fc:	8809883a 	mov	r4,r17
20090600:	00928500 	call	20092850 <_free_r>
20090604:	8180030b 	ldhu	r6,12(r16)
20090608:	80000c15 	stw	zero,48(r16)
2009060c:	80c00417 	ldw	r3,16(r16)
20090610:	00bff6c4 	movi	r2,-37
20090614:	118c703a 	and	r6,r2,r6
20090618:	80000115 	stw	zero,4(r16)
2009061c:	80c00015 	stw	r3,0(r16)
20090620:	003fd506 	br	20090578 <__flash_rwdata_start+0xffff19a4>
20090624:	00800244 	movi	r2,9
20090628:	88800015 	stw	r2,0(r17)
2009062c:	30801014 	ori	r2,r6,64
20090630:	8080030d 	sth	r2,12(r16)
20090634:	00bfffc4 	movi	r2,-1
20090638:	003fc506 	br	20090550 <__flash_rwdata_start+0xffff197c>

2009063c <__call_exitprocs>:
2009063c:	00800034 	movhi	r2,0
20090640:	108a9104 	addi	r2,r2,10820
20090644:	10800017 	ldw	r2,0(r2)
20090648:	defff404 	addi	sp,sp,-48
2009064c:	dd800815 	stw	r22,32(sp)
20090650:	d8800015 	stw	r2,0(sp)
20090654:	10805204 	addi	r2,r2,328
20090658:	dd000615 	stw	r20,24(sp)
2009065c:	dc800415 	stw	r18,16(sp)
20090660:	dfc00b15 	stw	ra,44(sp)
20090664:	df000a15 	stw	fp,40(sp)
20090668:	ddc00915 	stw	r23,36(sp)
2009066c:	dd400715 	stw	r21,28(sp)
20090670:	dcc00515 	stw	r19,20(sp)
20090674:	dc400315 	stw	r17,12(sp)
20090678:	dc000215 	stw	r16,8(sp)
2009067c:	2025883a 	mov	r18,r4
20090680:	2829883a 	mov	r20,r5
20090684:	d8800115 	stw	r2,4(sp)
20090688:	05bfffc4 	movi	r22,-1
2009068c:	d8800017 	ldw	r2,0(sp)
20090690:	14c05217 	ldw	r19,328(r2)
20090694:	98001d26 	beq	r19,zero,2009070c <__call_exitprocs+0xd0>
20090698:	dd400117 	ldw	r21,4(sp)
2009069c:	98800117 	ldw	r2,4(r19)
200906a0:	173fffc4 	addi	fp,r2,-1
200906a4:	e0000d16 	blt	fp,zero,200906dc <__call_exitprocs+0xa0>
200906a8:	14000044 	addi	r16,r2,1
200906ac:	8421883a 	add	r16,r16,r16
200906b0:	8421883a 	add	r16,r16,r16
200906b4:	84402004 	addi	r17,r16,128
200906b8:	9c63883a 	add	r17,r19,r17
200906bc:	9c21883a 	add	r16,r19,r16
200906c0:	a0001e26 	beq	r20,zero,2009073c <__call_exitprocs+0x100>
200906c4:	80804017 	ldw	r2,256(r16)
200906c8:	15001c26 	beq	r2,r20,2009073c <__call_exitprocs+0x100>
200906cc:	e73fffc4 	addi	fp,fp,-1
200906d0:	843fff04 	addi	r16,r16,-4
200906d4:	8c7fff04 	addi	r17,r17,-4
200906d8:	e5bff91e 	bne	fp,r22,200906c0 <__flash_rwdata_start+0xffff1aec>
200906dc:	00880274 	movhi	r2,8201
200906e0:	10ad5904 	addi	r2,r2,-19100
200906e4:	10000926 	beq	r2,zero,2009070c <__call_exitprocs+0xd0>
200906e8:	98800117 	ldw	r2,4(r19)
200906ec:	1000311e 	bne	r2,zero,200907b4 <__call_exitprocs+0x178>
200906f0:	98800017 	ldw	r2,0(r19)
200906f4:	10003426 	beq	r2,zero,200907c8 <__call_exitprocs+0x18c>
200906f8:	9809883a 	mov	r4,r19
200906fc:	a8800015 	stw	r2,0(r21)
20090700:	008b5640 	call	2008b564 <free>
20090704:	acc00017 	ldw	r19,0(r21)
20090708:	983fe41e 	bne	r19,zero,2009069c <__flash_rwdata_start+0xffff1ac8>
2009070c:	dfc00b17 	ldw	ra,44(sp)
20090710:	df000a17 	ldw	fp,40(sp)
20090714:	ddc00917 	ldw	r23,36(sp)
20090718:	dd800817 	ldw	r22,32(sp)
2009071c:	dd400717 	ldw	r21,28(sp)
20090720:	dd000617 	ldw	r20,24(sp)
20090724:	dcc00517 	ldw	r19,20(sp)
20090728:	dc800417 	ldw	r18,16(sp)
2009072c:	dc400317 	ldw	r17,12(sp)
20090730:	dc000217 	ldw	r16,8(sp)
20090734:	dec00c04 	addi	sp,sp,48
20090738:	f800283a 	ret
2009073c:	98800117 	ldw	r2,4(r19)
20090740:	80c00017 	ldw	r3,0(r16)
20090744:	10bfffc4 	addi	r2,r2,-1
20090748:	17001526 	beq	r2,fp,200907a0 <__call_exitprocs+0x164>
2009074c:	80000015 	stw	zero,0(r16)
20090750:	183fde26 	beq	r3,zero,200906cc <__flash_rwdata_start+0xffff1af8>
20090754:	00800044 	movi	r2,1
20090758:	1708983a 	sll	r4,r2,fp
2009075c:	98806217 	ldw	r2,392(r19)
20090760:	9dc00117 	ldw	r23,4(r19)
20090764:	2084703a 	and	r2,r4,r2
20090768:	1000061e 	bne	r2,zero,20090784 <__call_exitprocs+0x148>
2009076c:	183ee83a 	callr	r3
20090770:	98800117 	ldw	r2,4(r19)
20090774:	15ffc51e 	bne	r2,r23,2009068c <__flash_rwdata_start+0xffff1ab8>
20090778:	a8800017 	ldw	r2,0(r21)
2009077c:	14ffd326 	beq	r2,r19,200906cc <__flash_rwdata_start+0xffff1af8>
20090780:	003fc206 	br	2009068c <__flash_rwdata_start+0xffff1ab8>
20090784:	98806317 	ldw	r2,396(r19)
20090788:	2084703a 	and	r2,r4,r2
2009078c:	1000061e 	bne	r2,zero,200907a8 <__call_exitprocs+0x16c>
20090790:	89400017 	ldw	r5,0(r17)
20090794:	9009883a 	mov	r4,r18
20090798:	183ee83a 	callr	r3
2009079c:	003ff406 	br	20090770 <__flash_rwdata_start+0xffff1b9c>
200907a0:	9f000115 	stw	fp,4(r19)
200907a4:	003fea06 	br	20090750 <__flash_rwdata_start+0xffff1b7c>
200907a8:	89000017 	ldw	r4,0(r17)
200907ac:	183ee83a 	callr	r3
200907b0:	003fef06 	br	20090770 <__flash_rwdata_start+0xffff1b9c>
200907b4:	98800017 	ldw	r2,0(r19)
200907b8:	982b883a 	mov	r21,r19
200907bc:	1027883a 	mov	r19,r2
200907c0:	983fb61e 	bne	r19,zero,2009069c <__flash_rwdata_start+0xffff1ac8>
200907c4:	003fd106 	br	2009070c <__flash_rwdata_start+0xffff1b38>
200907c8:	0005883a 	mov	r2,zero
200907cc:	003ffa06 	br	200907b8 <__flash_rwdata_start+0xffff1be4>

200907d0 <quorem>:
200907d0:	defff704 	addi	sp,sp,-36
200907d4:	dc800215 	stw	r18,8(sp)
200907d8:	20800417 	ldw	r2,16(r4)
200907dc:	2c800417 	ldw	r18,16(r5)
200907e0:	dfc00815 	stw	ra,32(sp)
200907e4:	ddc00715 	stw	r23,28(sp)
200907e8:	dd800615 	stw	r22,24(sp)
200907ec:	dd400515 	stw	r21,20(sp)
200907f0:	dd000415 	stw	r20,16(sp)
200907f4:	dcc00315 	stw	r19,12(sp)
200907f8:	dc400115 	stw	r17,4(sp)
200907fc:	dc000015 	stw	r16,0(sp)
20090800:	14807116 	blt	r2,r18,200909c8 <quorem+0x1f8>
20090804:	94bfffc4 	addi	r18,r18,-1
20090808:	94ad883a 	add	r22,r18,r18
2009080c:	b5ad883a 	add	r22,r22,r22
20090810:	2c400504 	addi	r17,r5,20
20090814:	8da9883a 	add	r20,r17,r22
20090818:	25400504 	addi	r21,r4,20
2009081c:	282f883a 	mov	r23,r5
20090820:	adad883a 	add	r22,r21,r22
20090824:	a1400017 	ldw	r5,0(r20)
20090828:	2021883a 	mov	r16,r4
2009082c:	b1000017 	ldw	r4,0(r22)
20090830:	29400044 	addi	r5,r5,1
20090834:	0088a740 	call	20088a74 <__udivsi3>
20090838:	1027883a 	mov	r19,r2
2009083c:	10002c26 	beq	r2,zero,200908f0 <quorem+0x120>
20090840:	a813883a 	mov	r9,r21
20090844:	8811883a 	mov	r8,r17
20090848:	0009883a 	mov	r4,zero
2009084c:	000d883a 	mov	r6,zero
20090850:	41c00017 	ldw	r7,0(r8)
20090854:	49400017 	ldw	r5,0(r9)
20090858:	42000104 	addi	r8,r8,4
2009085c:	38bfffcc 	andi	r2,r7,65535
20090860:	14c5383a 	mul	r2,r2,r19
20090864:	380ed43a 	srli	r7,r7,16
20090868:	28ffffcc 	andi	r3,r5,65535
2009086c:	2085883a 	add	r2,r4,r2
20090870:	1008d43a 	srli	r4,r2,16
20090874:	3ccf383a 	mul	r7,r7,r19
20090878:	198d883a 	add	r6,r3,r6
2009087c:	10ffffcc 	andi	r3,r2,65535
20090880:	30c7c83a 	sub	r3,r6,r3
20090884:	280ad43a 	srli	r5,r5,16
20090888:	21c9883a 	add	r4,r4,r7
2009088c:	180dd43a 	srai	r6,r3,16
20090890:	20bfffcc 	andi	r2,r4,65535
20090894:	288bc83a 	sub	r5,r5,r2
20090898:	298b883a 	add	r5,r5,r6
2009089c:	280e943a 	slli	r7,r5,16
200908a0:	18ffffcc 	andi	r3,r3,65535
200908a4:	2008d43a 	srli	r4,r4,16
200908a8:	38ceb03a 	or	r7,r7,r3
200908ac:	49c00015 	stw	r7,0(r9)
200908b0:	280dd43a 	srai	r6,r5,16
200908b4:	4a400104 	addi	r9,r9,4
200908b8:	a23fe52e 	bgeu	r20,r8,20090850 <__flash_rwdata_start+0xffff1c7c>
200908bc:	b0800017 	ldw	r2,0(r22)
200908c0:	10000b1e 	bne	r2,zero,200908f0 <quorem+0x120>
200908c4:	b0bfff04 	addi	r2,r22,-4
200908c8:	a880082e 	bgeu	r21,r2,200908ec <quorem+0x11c>
200908cc:	b0ffff17 	ldw	r3,-4(r22)
200908d0:	18000326 	beq	r3,zero,200908e0 <quorem+0x110>
200908d4:	00000506 	br	200908ec <quorem+0x11c>
200908d8:	10c00017 	ldw	r3,0(r2)
200908dc:	1800031e 	bne	r3,zero,200908ec <quorem+0x11c>
200908e0:	10bfff04 	addi	r2,r2,-4
200908e4:	94bfffc4 	addi	r18,r18,-1
200908e8:	a8bffb36 	bltu	r21,r2,200908d8 <__flash_rwdata_start+0xffff1d04>
200908ec:	84800415 	stw	r18,16(r16)
200908f0:	8009883a 	mov	r4,r16
200908f4:	b80b883a 	mov	r5,r23
200908f8:	0093f380 	call	20093f38 <__mcmp>
200908fc:	10002616 	blt	r2,zero,20090998 <quorem+0x1c8>
20090900:	9cc00044 	addi	r19,r19,1
20090904:	a80d883a 	mov	r6,r21
20090908:	000b883a 	mov	r5,zero
2009090c:	31000017 	ldw	r4,0(r6)
20090910:	88800017 	ldw	r2,0(r17)
20090914:	31800104 	addi	r6,r6,4
20090918:	20ffffcc 	andi	r3,r4,65535
2009091c:	194b883a 	add	r5,r3,r5
20090920:	10ffffcc 	andi	r3,r2,65535
20090924:	28c7c83a 	sub	r3,r5,r3
20090928:	1004d43a 	srli	r2,r2,16
2009092c:	2008d43a 	srli	r4,r4,16
20090930:	180bd43a 	srai	r5,r3,16
20090934:	18ffffcc 	andi	r3,r3,65535
20090938:	2089c83a 	sub	r4,r4,r2
2009093c:	2149883a 	add	r4,r4,r5
20090940:	2004943a 	slli	r2,r4,16
20090944:	8c400104 	addi	r17,r17,4
20090948:	200bd43a 	srai	r5,r4,16
2009094c:	10c6b03a 	or	r3,r2,r3
20090950:	30ffff15 	stw	r3,-4(r6)
20090954:	a47fed2e 	bgeu	r20,r17,2009090c <__flash_rwdata_start+0xffff1d38>
20090958:	9485883a 	add	r2,r18,r18
2009095c:	1085883a 	add	r2,r2,r2
20090960:	a887883a 	add	r3,r21,r2
20090964:	18800017 	ldw	r2,0(r3)
20090968:	10000b1e 	bne	r2,zero,20090998 <quorem+0x1c8>
2009096c:	18bfff04 	addi	r2,r3,-4
20090970:	a880082e 	bgeu	r21,r2,20090994 <quorem+0x1c4>
20090974:	18ffff17 	ldw	r3,-4(r3)
20090978:	18000326 	beq	r3,zero,20090988 <quorem+0x1b8>
2009097c:	00000506 	br	20090994 <quorem+0x1c4>
20090980:	10c00017 	ldw	r3,0(r2)
20090984:	1800031e 	bne	r3,zero,20090994 <quorem+0x1c4>
20090988:	10bfff04 	addi	r2,r2,-4
2009098c:	94bfffc4 	addi	r18,r18,-1
20090990:	a8bffb36 	bltu	r21,r2,20090980 <__flash_rwdata_start+0xffff1dac>
20090994:	84800415 	stw	r18,16(r16)
20090998:	9805883a 	mov	r2,r19
2009099c:	dfc00817 	ldw	ra,32(sp)
200909a0:	ddc00717 	ldw	r23,28(sp)
200909a4:	dd800617 	ldw	r22,24(sp)
200909a8:	dd400517 	ldw	r21,20(sp)
200909ac:	dd000417 	ldw	r20,16(sp)
200909b0:	dcc00317 	ldw	r19,12(sp)
200909b4:	dc800217 	ldw	r18,8(sp)
200909b8:	dc400117 	ldw	r17,4(sp)
200909bc:	dc000017 	ldw	r16,0(sp)
200909c0:	dec00904 	addi	sp,sp,36
200909c4:	f800283a 	ret
200909c8:	0005883a 	mov	r2,zero
200909cc:	003ff306 	br	2009099c <__flash_rwdata_start+0xffff1dc8>

200909d0 <_dtoa_r>:
200909d0:	20801017 	ldw	r2,64(r4)
200909d4:	deffde04 	addi	sp,sp,-136
200909d8:	dd401d15 	stw	r21,116(sp)
200909dc:	dcc01b15 	stw	r19,108(sp)
200909e0:	dc801a15 	stw	r18,104(sp)
200909e4:	dc401915 	stw	r17,100(sp)
200909e8:	dc001815 	stw	r16,96(sp)
200909ec:	dfc02115 	stw	ra,132(sp)
200909f0:	df002015 	stw	fp,128(sp)
200909f4:	ddc01f15 	stw	r23,124(sp)
200909f8:	dd801e15 	stw	r22,120(sp)
200909fc:	dd001c15 	stw	r20,112(sp)
20090a00:	d9c00315 	stw	r7,12(sp)
20090a04:	2021883a 	mov	r16,r4
20090a08:	302b883a 	mov	r21,r6
20090a0c:	2825883a 	mov	r18,r5
20090a10:	dc402417 	ldw	r17,144(sp)
20090a14:	3027883a 	mov	r19,r6
20090a18:	10000826 	beq	r2,zero,20090a3c <_dtoa_r+0x6c>
20090a1c:	21801117 	ldw	r6,68(r4)
20090a20:	00c00044 	movi	r3,1
20090a24:	100b883a 	mov	r5,r2
20090a28:	1986983a 	sll	r3,r3,r6
20090a2c:	11800115 	stw	r6,4(r2)
20090a30:	10c00215 	stw	r3,8(r2)
20090a34:	009370c0 	call	2009370c <_Bfree>
20090a38:	80001015 	stw	zero,64(r16)
20090a3c:	a8002d16 	blt	r21,zero,20090af4 <_dtoa_r+0x124>
20090a40:	88000015 	stw	zero,0(r17)
20090a44:	a8dffc2c 	andhi	r3,r21,32752
20090a48:	009ffc34 	movhi	r2,32752
20090a4c:	18801b26 	beq	r3,r2,20090abc <_dtoa_r+0xec>
20090a50:	9009883a 	mov	r4,r18
20090a54:	980b883a 	mov	r5,r19
20090a58:	000d883a 	mov	r6,zero
20090a5c:	000f883a 	mov	r7,zero
20090a60:	0098afc0 	call	20098afc <__eqdf2>
20090a64:	10002a1e 	bne	r2,zero,20090b10 <_dtoa_r+0x140>
20090a68:	d8c02317 	ldw	r3,140(sp)
20090a6c:	d9002517 	ldw	r4,148(sp)
20090a70:	00800044 	movi	r2,1
20090a74:	18800015 	stw	r2,0(r3)
20090a78:	2001a226 	beq	r4,zero,20091104 <_dtoa_r+0x734>
20090a7c:	00800034 	movhi	r2,0
20090a80:	10819b44 	addi	r2,r2,1645
20090a84:	20800015 	stw	r2,0(r4)
20090a88:	10bfffc4 	addi	r2,r2,-1
20090a8c:	dfc02117 	ldw	ra,132(sp)
20090a90:	df002017 	ldw	fp,128(sp)
20090a94:	ddc01f17 	ldw	r23,124(sp)
20090a98:	dd801e17 	ldw	r22,120(sp)
20090a9c:	dd401d17 	ldw	r21,116(sp)
20090aa0:	dd001c17 	ldw	r20,112(sp)
20090aa4:	dcc01b17 	ldw	r19,108(sp)
20090aa8:	dc801a17 	ldw	r18,104(sp)
20090aac:	dc401917 	ldw	r17,100(sp)
20090ab0:	dc001817 	ldw	r16,96(sp)
20090ab4:	dec02204 	addi	sp,sp,136
20090ab8:	f800283a 	ret
20090abc:	d8c02317 	ldw	r3,140(sp)
20090ac0:	0089c3c4 	movi	r2,9999
20090ac4:	18800015 	stw	r2,0(r3)
20090ac8:	90017c26 	beq	r18,zero,200910bc <_dtoa_r+0x6ec>
20090acc:	00800034 	movhi	r2,0
20090ad0:	1081af04 	addi	r2,r2,1724
20090ad4:	d9002517 	ldw	r4,148(sp)
20090ad8:	203fec26 	beq	r4,zero,20090a8c <__flash_rwdata_start+0xffff1eb8>
20090adc:	10c000c7 	ldb	r3,3(r2)
20090ae0:	18017d1e 	bne	r3,zero,200910d8 <_dtoa_r+0x708>
20090ae4:	10c000c4 	addi	r3,r2,3
20090ae8:	d9802517 	ldw	r6,148(sp)
20090aec:	30c00015 	stw	r3,0(r6)
20090af0:	003fe606 	br	20090a8c <__flash_rwdata_start+0xffff1eb8>
20090af4:	04e00034 	movhi	r19,32768
20090af8:	9cffffc4 	addi	r19,r19,-1
20090afc:	00800044 	movi	r2,1
20090b00:	ace6703a 	and	r19,r21,r19
20090b04:	88800015 	stw	r2,0(r17)
20090b08:	982b883a 	mov	r21,r19
20090b0c:	003fcd06 	br	20090a44 <__flash_rwdata_start+0xffff1e70>
20090b10:	d8800204 	addi	r2,sp,8
20090b14:	a822d53a 	srli	r17,r21,20
20090b18:	d8800015 	stw	r2,0(sp)
20090b1c:	8009883a 	mov	r4,r16
20090b20:	900b883a 	mov	r5,r18
20090b24:	980d883a 	mov	r6,r19
20090b28:	d9c00104 	addi	r7,sp,4
20090b2c:	00942ac0 	call	200942ac <__d2b>
20090b30:	1039883a 	mov	fp,r2
20090b34:	88016a1e 	bne	r17,zero,200910e0 <_dtoa_r+0x710>
20090b38:	dd000217 	ldw	r20,8(sp)
20090b3c:	dc400117 	ldw	r17,4(sp)
20090b40:	00befbc4 	movi	r2,-1041
20090b44:	a463883a 	add	r17,r20,r17
20090b48:	8882ea16 	blt	r17,r2,200916f4 <_dtoa_r+0xd24>
20090b4c:	00bf0384 	movi	r2,-1010
20090b50:	1445c83a 	sub	r2,r2,r17
20090b54:	89010484 	addi	r4,r17,1042
20090b58:	a8aa983a 	sll	r21,r21,r2
20090b5c:	9108d83a 	srl	r4,r18,r4
20090b60:	a908b03a 	or	r4,r21,r4
20090b64:	008af980 	call	2008af98 <__floatunsidf>
20090b68:	017f8434 	movhi	r5,65040
20090b6c:	01800044 	movi	r6,1
20090b70:	1009883a 	mov	r4,r2
20090b74:	194b883a 	add	r5,r3,r5
20090b78:	8c7fffc4 	addi	r17,r17,-1
20090b7c:	d9800f15 	stw	r6,60(sp)
20090b80:	000d883a 	mov	r6,zero
20090b84:	01cffe34 	movhi	r7,16376
20090b88:	008a5700 	call	2008a570 <__subdf3>
20090b8c:	0198dbf4 	movhi	r6,25455
20090b90:	01cff4f4 	movhi	r7,16339
20090b94:	1009883a 	mov	r4,r2
20090b98:	180b883a 	mov	r5,r3
20090b9c:	3190d844 	addi	r6,r6,17249
20090ba0:	39e1e9c4 	addi	r7,r7,-30809
20090ba4:	0098d400 	call	20098d40 <__muldf3>
20090ba8:	01a2d874 	movhi	r6,35681
20090bac:	01cff1f4 	movhi	r7,16327
20090bb0:	180b883a 	mov	r5,r3
20090bb4:	31b22cc4 	addi	r6,r6,-14157
20090bb8:	39e28a04 	addi	r7,r7,-30168
20090bbc:	1009883a 	mov	r4,r2
20090bc0:	00894080 	call	20089408 <__adddf3>
20090bc4:	8809883a 	mov	r4,r17
20090bc8:	102d883a 	mov	r22,r2
20090bcc:	182b883a 	mov	r21,r3
20090bd0:	008aec80 	call	2008aec8 <__floatsidf>
20090bd4:	019427f4 	movhi	r6,20639
20090bd8:	01cff4f4 	movhi	r7,16339
20090bdc:	1009883a 	mov	r4,r2
20090be0:	180b883a 	mov	r5,r3
20090be4:	319e7ec4 	addi	r6,r6,31227
20090be8:	39d104c4 	addi	r7,r7,17427
20090bec:	0098d400 	call	20098d40 <__muldf3>
20090bf0:	b009883a 	mov	r4,r22
20090bf4:	a80b883a 	mov	r5,r21
20090bf8:	100d883a 	mov	r6,r2
20090bfc:	180f883a 	mov	r7,r3
20090c00:	00894080 	call	20089408 <__adddf3>
20090c04:	1009883a 	mov	r4,r2
20090c08:	180b883a 	mov	r5,r3
20090c0c:	102d883a 	mov	r22,r2
20090c10:	182b883a 	mov	r21,r3
20090c14:	008ae400 	call	2008ae40 <__fixdfsi>
20090c18:	b009883a 	mov	r4,r22
20090c1c:	a80b883a 	mov	r5,r21
20090c20:	000d883a 	mov	r6,zero
20090c24:	000f883a 	mov	r7,zero
20090c28:	d8800515 	stw	r2,20(sp)
20090c2c:	0098c600 	call	20098c60 <__ledf2>
20090c30:	10023116 	blt	r2,zero,200914f8 <_dtoa_r+0xb28>
20090c34:	d8c00517 	ldw	r3,20(sp)
20090c38:	00800584 	movi	r2,22
20090c3c:	10c21f36 	bltu	r2,r3,200914bc <_dtoa_r+0xaec>
20090c40:	180490fa 	slli	r2,r3,3
20090c44:	00c00034 	movhi	r3,0
20090c48:	18c1ca04 	addi	r3,r3,1832
20090c4c:	1885883a 	add	r2,r3,r2
20090c50:	11000017 	ldw	r4,0(r2)
20090c54:	11400117 	ldw	r5,4(r2)
20090c58:	900d883a 	mov	r6,r18
20090c5c:	980f883a 	mov	r7,r19
20090c60:	0098b800 	call	20098b80 <__gedf2>
20090c64:	0082a70e 	bge	zero,r2,20091704 <_dtoa_r+0xd34>
20090c68:	d9000517 	ldw	r4,20(sp)
20090c6c:	d8000d15 	stw	zero,52(sp)
20090c70:	213fffc4 	addi	r4,r4,-1
20090c74:	d9000515 	stw	r4,20(sp)
20090c78:	a463c83a 	sub	r17,r20,r17
20090c7c:	8dbfffc4 	addi	r22,r17,-1
20090c80:	b0021916 	blt	r22,zero,200914e8 <_dtoa_r+0xb18>
20090c84:	d8000815 	stw	zero,32(sp)
20090c88:	d8800517 	ldw	r2,20(sp)
20090c8c:	10020e16 	blt	r2,zero,200914c8 <_dtoa_r+0xaf8>
20090c90:	b0ad883a 	add	r22,r22,r2
20090c94:	d8800a15 	stw	r2,40(sp)
20090c98:	d8000915 	stw	zero,36(sp)
20090c9c:	d8c00317 	ldw	r3,12(sp)
20090ca0:	00800244 	movi	r2,9
20090ca4:	10c11a36 	bltu	r2,r3,20091110 <_dtoa_r+0x740>
20090ca8:	00800144 	movi	r2,5
20090cac:	10c4fc0e 	bge	r2,r3,200920a0 <_dtoa_r+0x16d0>
20090cb0:	18ffff04 	addi	r3,r3,-4
20090cb4:	d8c00315 	stw	r3,12(sp)
20090cb8:	0029883a 	mov	r20,zero
20090cbc:	d9800317 	ldw	r6,12(sp)
20090cc0:	008000c4 	movi	r2,3
20090cc4:	3083bd26 	beq	r6,r2,20091bbc <_dtoa_r+0x11ec>
20090cc8:	1183670e 	bge	r2,r6,20091a68 <_dtoa_r+0x1098>
20090ccc:	d8c00317 	ldw	r3,12(sp)
20090cd0:	00800104 	movi	r2,4
20090cd4:	1882e726 	beq	r3,r2,20091874 <_dtoa_r+0xea4>
20090cd8:	00800144 	movi	r2,5
20090cdc:	1884f21e 	bne	r3,r2,200920a8 <_dtoa_r+0x16d8>
20090ce0:	00800044 	movi	r2,1
20090ce4:	d8800b15 	stw	r2,44(sp)
20090ce8:	d8c02217 	ldw	r3,136(sp)
20090cec:	d9000517 	ldw	r4,20(sp)
20090cf0:	1907883a 	add	r3,r3,r4
20090cf4:	19800044 	addi	r6,r3,1
20090cf8:	d8c00c15 	stw	r3,48(sp)
20090cfc:	d9800615 	stw	r6,24(sp)
20090d00:	0183c30e 	bge	zero,r6,20091c10 <_dtoa_r+0x1240>
20090d04:	d9800617 	ldw	r6,24(sp)
20090d08:	3023883a 	mov	r17,r6
20090d0c:	80001115 	stw	zero,68(r16)
20090d10:	008005c4 	movi	r2,23
20090d14:	1184f62e 	bgeu	r2,r6,200920f0 <_dtoa_r+0x1720>
20090d18:	00c00044 	movi	r3,1
20090d1c:	00800104 	movi	r2,4
20090d20:	1085883a 	add	r2,r2,r2
20090d24:	11000504 	addi	r4,r2,20
20090d28:	180b883a 	mov	r5,r3
20090d2c:	18c00044 	addi	r3,r3,1
20090d30:	313ffb2e 	bgeu	r6,r4,20090d20 <__flash_rwdata_start+0xffff214c>
20090d34:	81401115 	stw	r5,68(r16)
20090d38:	8009883a 	mov	r4,r16
20090d3c:	00936640 	call	20093664 <_Balloc>
20090d40:	d8800715 	stw	r2,28(sp)
20090d44:	80801015 	stw	r2,64(r16)
20090d48:	00800384 	movi	r2,14
20090d4c:	1440fd36 	bltu	r2,r17,20091144 <_dtoa_r+0x774>
20090d50:	a000fc26 	beq	r20,zero,20091144 <_dtoa_r+0x774>
20090d54:	d8800517 	ldw	r2,20(sp)
20090d58:	0083b90e 	bge	zero,r2,20091c40 <_dtoa_r+0x1270>
20090d5c:	d8c00517 	ldw	r3,20(sp)
20090d60:	108003cc 	andi	r2,r2,15
20090d64:	100490fa 	slli	r2,r2,3
20090d68:	182fd13a 	srai	r23,r3,4
20090d6c:	00c00034 	movhi	r3,0
20090d70:	18c1ca04 	addi	r3,r3,1832
20090d74:	1885883a 	add	r2,r3,r2
20090d78:	b8c0040c 	andi	r3,r23,16
20090d7c:	12c00017 	ldw	r11,0(r2)
20090d80:	12800117 	ldw	r10,4(r2)
20090d84:	18039726 	beq	r3,zero,20091be4 <_dtoa_r+0x1214>
20090d88:	00800034 	movhi	r2,0
20090d8c:	1081c004 	addi	r2,r2,1792
20090d90:	11800817 	ldw	r6,32(r2)
20090d94:	11c00917 	ldw	r7,36(r2)
20090d98:	9009883a 	mov	r4,r18
20090d9c:	980b883a 	mov	r5,r19
20090da0:	da801615 	stw	r10,88(sp)
20090da4:	dac01515 	stw	r11,84(sp)
20090da8:	0089ca40 	call	20089ca4 <__divdf3>
20090dac:	da801617 	ldw	r10,88(sp)
20090db0:	dac01517 	ldw	r11,84(sp)
20090db4:	bdc003cc 	andi	r23,r23,15
20090db8:	044000c4 	movi	r17,3
20090dbc:	d8800e15 	stw	r2,56(sp)
20090dc0:	182b883a 	mov	r21,r3
20090dc4:	b8001126 	beq	r23,zero,20090e0c <_dtoa_r+0x43c>
20090dc8:	05000034 	movhi	r20,0
20090dcc:	a501c004 	addi	r20,r20,1792
20090dd0:	5805883a 	mov	r2,r11
20090dd4:	5007883a 	mov	r3,r10
20090dd8:	b980004c 	andi	r6,r23,1
20090ddc:	1009883a 	mov	r4,r2
20090de0:	b82fd07a 	srai	r23,r23,1
20090de4:	180b883a 	mov	r5,r3
20090de8:	30000426 	beq	r6,zero,20090dfc <_dtoa_r+0x42c>
20090dec:	a1800017 	ldw	r6,0(r20)
20090df0:	a1c00117 	ldw	r7,4(r20)
20090df4:	8c400044 	addi	r17,r17,1
20090df8:	0098d400 	call	20098d40 <__muldf3>
20090dfc:	a5000204 	addi	r20,r20,8
20090e00:	b83ff51e 	bne	r23,zero,20090dd8 <__flash_rwdata_start+0xffff2204>
20090e04:	1017883a 	mov	r11,r2
20090e08:	1815883a 	mov	r10,r3
20090e0c:	d9000e17 	ldw	r4,56(sp)
20090e10:	a80b883a 	mov	r5,r21
20090e14:	580d883a 	mov	r6,r11
20090e18:	500f883a 	mov	r7,r10
20090e1c:	0089ca40 	call	20089ca4 <__divdf3>
20090e20:	1029883a 	mov	r20,r2
20090e24:	182b883a 	mov	r21,r3
20090e28:	d9800d17 	ldw	r6,52(sp)
20090e2c:	30000626 	beq	r6,zero,20090e48 <_dtoa_r+0x478>
20090e30:	a009883a 	mov	r4,r20
20090e34:	a80b883a 	mov	r5,r21
20090e38:	000d883a 	mov	r6,zero
20090e3c:	01cffc34 	movhi	r7,16368
20090e40:	0098c600 	call	20098c60 <__ledf2>
20090e44:	10043216 	blt	r2,zero,20091f10 <_dtoa_r+0x1540>
20090e48:	8809883a 	mov	r4,r17
20090e4c:	008aec80 	call	2008aec8 <__floatsidf>
20090e50:	1009883a 	mov	r4,r2
20090e54:	180b883a 	mov	r5,r3
20090e58:	a00d883a 	mov	r6,r20
20090e5c:	a80f883a 	mov	r7,r21
20090e60:	0098d400 	call	20098d40 <__muldf3>
20090e64:	000d883a 	mov	r6,zero
20090e68:	1009883a 	mov	r4,r2
20090e6c:	180b883a 	mov	r5,r3
20090e70:	01d00734 	movhi	r7,16412
20090e74:	00894080 	call	20089408 <__adddf3>
20090e78:	1023883a 	mov	r17,r2
20090e7c:	d9800617 	ldw	r6,24(sp)
20090e80:	00bf3034 	movhi	r2,64704
20090e84:	1885883a 	add	r2,r3,r2
20090e88:	d8800e15 	stw	r2,56(sp)
20090e8c:	30032e26 	beq	r6,zero,20091b48 <_dtoa_r+0x1178>
20090e90:	d8c00517 	ldw	r3,20(sp)
20090e94:	da800617 	ldw	r10,24(sp)
20090e98:	d8c01215 	stw	r3,72(sp)
20090e9c:	d9000b17 	ldw	r4,44(sp)
20090ea0:	2003b026 	beq	r4,zero,20091d64 <_dtoa_r+0x1394>
20090ea4:	50bfffc4 	addi	r2,r10,-1
20090ea8:	100490fa 	slli	r2,r2,3
20090eac:	00c00034 	movhi	r3,0
20090eb0:	18c1ca04 	addi	r3,r3,1832
20090eb4:	1885883a 	add	r2,r3,r2
20090eb8:	11800017 	ldw	r6,0(r2)
20090ebc:	11c00117 	ldw	r7,4(r2)
20090ec0:	d8800717 	ldw	r2,28(sp)
20090ec4:	0009883a 	mov	r4,zero
20090ec8:	014ff834 	movhi	r5,16352
20090ecc:	da801615 	stw	r10,88(sp)
20090ed0:	15c00044 	addi	r23,r2,1
20090ed4:	0089ca40 	call	20089ca4 <__divdf3>
20090ed8:	d9c00e17 	ldw	r7,56(sp)
20090edc:	880d883a 	mov	r6,r17
20090ee0:	1009883a 	mov	r4,r2
20090ee4:	180b883a 	mov	r5,r3
20090ee8:	008a5700 	call	2008a570 <__subdf3>
20090eec:	a80b883a 	mov	r5,r21
20090ef0:	a009883a 	mov	r4,r20
20090ef4:	d8c01015 	stw	r3,64(sp)
20090ef8:	d8800e15 	stw	r2,56(sp)
20090efc:	008ae400 	call	2008ae40 <__fixdfsi>
20090f00:	1009883a 	mov	r4,r2
20090f04:	d8801715 	stw	r2,92(sp)
20090f08:	008aec80 	call	2008aec8 <__floatsidf>
20090f0c:	a009883a 	mov	r4,r20
20090f10:	a80b883a 	mov	r5,r21
20090f14:	100d883a 	mov	r6,r2
20090f18:	180f883a 	mov	r7,r3
20090f1c:	008a5700 	call	2008a570 <__subdf3>
20090f20:	da001717 	ldw	r8,92(sp)
20090f24:	1829883a 	mov	r20,r3
20090f28:	d8c00717 	ldw	r3,28(sp)
20090f2c:	d9000e17 	ldw	r4,56(sp)
20090f30:	d9401017 	ldw	r5,64(sp)
20090f34:	42000c04 	addi	r8,r8,48
20090f38:	1023883a 	mov	r17,r2
20090f3c:	1a000005 	stb	r8,0(r3)
20090f40:	880d883a 	mov	r6,r17
20090f44:	a00f883a 	mov	r7,r20
20090f48:	402b883a 	mov	r21,r8
20090f4c:	0098b800 	call	20098b80 <__gedf2>
20090f50:	00844516 	blt	zero,r2,20092068 <_dtoa_r+0x1698>
20090f54:	0009883a 	mov	r4,zero
20090f58:	014ffc34 	movhi	r5,16368
20090f5c:	880d883a 	mov	r6,r17
20090f60:	a00f883a 	mov	r7,r20
20090f64:	008a5700 	call	2008a570 <__subdf3>
20090f68:	d9000e17 	ldw	r4,56(sp)
20090f6c:	d9401017 	ldw	r5,64(sp)
20090f70:	100d883a 	mov	r6,r2
20090f74:	180f883a 	mov	r7,r3
20090f78:	0098b800 	call	20098b80 <__gedf2>
20090f7c:	da801617 	ldw	r10,88(sp)
20090f80:	00843616 	blt	zero,r2,2009205c <_dtoa_r+0x168c>
20090f84:	00800044 	movi	r2,1
20090f88:	12806e0e 	bge	r2,r10,20091144 <_dtoa_r+0x774>
20090f8c:	d9000717 	ldw	r4,28(sp)
20090f90:	dd801315 	stw	r22,76(sp)
20090f94:	dc001115 	stw	r16,68(sp)
20090f98:	2295883a 	add	r10,r4,r10
20090f9c:	dcc01415 	stw	r19,80(sp)
20090fa0:	502d883a 	mov	r22,r10
20090fa4:	dcc01017 	ldw	r19,64(sp)
20090fa8:	b821883a 	mov	r16,r23
20090fac:	dc801015 	stw	r18,64(sp)
20090fb0:	dc800e17 	ldw	r18,56(sp)
20090fb4:	00000906 	br	20090fdc <_dtoa_r+0x60c>
20090fb8:	008a5700 	call	2008a570 <__subdf3>
20090fbc:	1009883a 	mov	r4,r2
20090fc0:	180b883a 	mov	r5,r3
20090fc4:	900d883a 	mov	r6,r18
20090fc8:	980f883a 	mov	r7,r19
20090fcc:	0098c600 	call	20098c60 <__ledf2>
20090fd0:	10040e16 	blt	r2,zero,2009200c <_dtoa_r+0x163c>
20090fd4:	b821883a 	mov	r16,r23
20090fd8:	bd841026 	beq	r23,r22,2009201c <_dtoa_r+0x164c>
20090fdc:	9009883a 	mov	r4,r18
20090fe0:	980b883a 	mov	r5,r19
20090fe4:	000d883a 	mov	r6,zero
20090fe8:	01d00934 	movhi	r7,16420
20090fec:	0098d400 	call	20098d40 <__muldf3>
20090ff0:	000d883a 	mov	r6,zero
20090ff4:	01d00934 	movhi	r7,16420
20090ff8:	8809883a 	mov	r4,r17
20090ffc:	a00b883a 	mov	r5,r20
20091000:	1025883a 	mov	r18,r2
20091004:	1827883a 	mov	r19,r3
20091008:	0098d400 	call	20098d40 <__muldf3>
2009100c:	180b883a 	mov	r5,r3
20091010:	1009883a 	mov	r4,r2
20091014:	1823883a 	mov	r17,r3
20091018:	1029883a 	mov	r20,r2
2009101c:	008ae400 	call	2008ae40 <__fixdfsi>
20091020:	1009883a 	mov	r4,r2
20091024:	102b883a 	mov	r21,r2
20091028:	008aec80 	call	2008aec8 <__floatsidf>
2009102c:	a009883a 	mov	r4,r20
20091030:	880b883a 	mov	r5,r17
20091034:	100d883a 	mov	r6,r2
20091038:	180f883a 	mov	r7,r3
2009103c:	008a5700 	call	2008a570 <__subdf3>
20091040:	ad400c04 	addi	r21,r21,48
20091044:	1009883a 	mov	r4,r2
20091048:	180b883a 	mov	r5,r3
2009104c:	900d883a 	mov	r6,r18
20091050:	980f883a 	mov	r7,r19
20091054:	85400005 	stb	r21,0(r16)
20091058:	1023883a 	mov	r17,r2
2009105c:	1829883a 	mov	r20,r3
20091060:	0098c600 	call	20098c60 <__ledf2>
20091064:	bdc00044 	addi	r23,r23,1
20091068:	0009883a 	mov	r4,zero
2009106c:	014ffc34 	movhi	r5,16368
20091070:	880d883a 	mov	r6,r17
20091074:	a00f883a 	mov	r7,r20
20091078:	103fcf0e 	bge	r2,zero,20090fb8 <__flash_rwdata_start+0xffff23e4>
2009107c:	d9801217 	ldw	r6,72(sp)
20091080:	dc001117 	ldw	r16,68(sp)
20091084:	d9800515 	stw	r6,20(sp)
20091088:	8009883a 	mov	r4,r16
2009108c:	e00b883a 	mov	r5,fp
20091090:	009370c0 	call	2009370c <_Bfree>
20091094:	d8c00517 	ldw	r3,20(sp)
20091098:	d9002317 	ldw	r4,140(sp)
2009109c:	d9802517 	ldw	r6,148(sp)
200910a0:	b8000005 	stb	zero,0(r23)
200910a4:	18800044 	addi	r2,r3,1
200910a8:	20800015 	stw	r2,0(r4)
200910ac:	30027226 	beq	r6,zero,20091a78 <_dtoa_r+0x10a8>
200910b0:	35c00015 	stw	r23,0(r6)
200910b4:	d8800717 	ldw	r2,28(sp)
200910b8:	003e7406 	br	20090a8c <__flash_rwdata_start+0xffff1eb8>
200910bc:	00800434 	movhi	r2,16
200910c0:	10bfffc4 	addi	r2,r2,-1
200910c4:	a8aa703a 	and	r21,r21,r2
200910c8:	a83e801e 	bne	r21,zero,20090acc <__flash_rwdata_start+0xffff1ef8>
200910cc:	00800034 	movhi	r2,0
200910d0:	1081ac04 	addi	r2,r2,1712
200910d4:	003e7f06 	br	20090ad4 <__flash_rwdata_start+0xffff1f00>
200910d8:	10c00204 	addi	r3,r2,8
200910dc:	003e8206 	br	20090ae8 <__flash_rwdata_start+0xffff1f14>
200910e0:	01400434 	movhi	r5,16
200910e4:	297fffc4 	addi	r5,r5,-1
200910e8:	994a703a 	and	r5,r19,r5
200910ec:	9009883a 	mov	r4,r18
200910f0:	8c7f0044 	addi	r17,r17,-1023
200910f4:	294ffc34 	orhi	r5,r5,16368
200910f8:	dd000217 	ldw	r20,8(sp)
200910fc:	d8000f15 	stw	zero,60(sp)
20091100:	003e9f06 	br	20090b80 <__flash_rwdata_start+0xffff1fac>
20091104:	00800034 	movhi	r2,0
20091108:	10819b04 	addi	r2,r2,1644
2009110c:	003e5f06 	br	20090a8c <__flash_rwdata_start+0xffff1eb8>
20091110:	80001115 	stw	zero,68(r16)
20091114:	8009883a 	mov	r4,r16
20091118:	000b883a 	mov	r5,zero
2009111c:	00936640 	call	20093664 <_Balloc>
20091120:	01bfffc4 	movi	r6,-1
20091124:	d8800715 	stw	r2,28(sp)
20091128:	80801015 	stw	r2,64(r16)
2009112c:	00800044 	movi	r2,1
20091130:	d9800c15 	stw	r6,48(sp)
20091134:	d8800b15 	stw	r2,44(sp)
20091138:	d9800615 	stw	r6,24(sp)
2009113c:	d8002215 	stw	zero,136(sp)
20091140:	d8000315 	stw	zero,12(sp)
20091144:	d8800117 	ldw	r2,4(sp)
20091148:	10008e16 	blt	r2,zero,20091384 <_dtoa_r+0x9b4>
2009114c:	d9000517 	ldw	r4,20(sp)
20091150:	00c00384 	movi	r3,14
20091154:	19008b16 	blt	r3,r4,20091384 <_dtoa_r+0x9b4>
20091158:	200490fa 	slli	r2,r4,3
2009115c:	00c00034 	movhi	r3,0
20091160:	d9802217 	ldw	r6,136(sp)
20091164:	18c1ca04 	addi	r3,r3,1832
20091168:	1885883a 	add	r2,r3,r2
2009116c:	14400017 	ldw	r17,0(r2)
20091170:	15000117 	ldw	r20,4(r2)
20091174:	3001c716 	blt	r6,zero,20091894 <_dtoa_r+0xec4>
20091178:	880d883a 	mov	r6,r17
2009117c:	a00f883a 	mov	r7,r20
20091180:	9009883a 	mov	r4,r18
20091184:	980b883a 	mov	r5,r19
20091188:	0089ca40 	call	20089ca4 <__divdf3>
2009118c:	180b883a 	mov	r5,r3
20091190:	1009883a 	mov	r4,r2
20091194:	008ae400 	call	2008ae40 <__fixdfsi>
20091198:	1009883a 	mov	r4,r2
2009119c:	102d883a 	mov	r22,r2
200911a0:	008aec80 	call	2008aec8 <__floatsidf>
200911a4:	1009883a 	mov	r4,r2
200911a8:	180b883a 	mov	r5,r3
200911ac:	880d883a 	mov	r6,r17
200911b0:	a00f883a 	mov	r7,r20
200911b4:	0098d400 	call	20098d40 <__muldf3>
200911b8:	9009883a 	mov	r4,r18
200911bc:	980b883a 	mov	r5,r19
200911c0:	100d883a 	mov	r6,r2
200911c4:	180f883a 	mov	r7,r3
200911c8:	008a5700 	call	2008a570 <__subdf3>
200911cc:	d9000717 	ldw	r4,28(sp)
200911d0:	d9800617 	ldw	r6,24(sp)
200911d4:	180b883a 	mov	r5,r3
200911d8:	b0c00c04 	addi	r3,r22,48
200911dc:	20c00005 	stb	r3,0(r4)
200911e0:	25c00044 	addi	r23,r4,1
200911e4:	01000044 	movi	r4,1
200911e8:	1011883a 	mov	r8,r2
200911ec:	2807883a 	mov	r3,r5
200911f0:	31003d26 	beq	r6,r4,200912e8 <_dtoa_r+0x918>
200911f4:	000d883a 	mov	r6,zero
200911f8:	01d00934 	movhi	r7,16420
200911fc:	1009883a 	mov	r4,r2
20091200:	0098d400 	call	20098d40 <__muldf3>
20091204:	1009883a 	mov	r4,r2
20091208:	180b883a 	mov	r5,r3
2009120c:	000d883a 	mov	r6,zero
20091210:	000f883a 	mov	r7,zero
20091214:	1027883a 	mov	r19,r2
20091218:	182b883a 	mov	r21,r3
2009121c:	0098afc0 	call	20098afc <__eqdf2>
20091220:	103f9926 	beq	r2,zero,20091088 <__flash_rwdata_start+0xffff24b4>
20091224:	d8c00617 	ldw	r3,24(sp)
20091228:	d9000717 	ldw	r4,28(sp)
2009122c:	b825883a 	mov	r18,r23
20091230:	18bfffc4 	addi	r2,r3,-1
20091234:	20ad883a 	add	r22,r4,r2
20091238:	dc000315 	stw	r16,12(sp)
2009123c:	00000a06 	br	20091268 <_dtoa_r+0x898>
20091240:	0098d400 	call	20098d40 <__muldf3>
20091244:	1009883a 	mov	r4,r2
20091248:	180b883a 	mov	r5,r3
2009124c:	000d883a 	mov	r6,zero
20091250:	000f883a 	mov	r7,zero
20091254:	1027883a 	mov	r19,r2
20091258:	182b883a 	mov	r21,r3
2009125c:	b825883a 	mov	r18,r23
20091260:	0098afc0 	call	20098afc <__eqdf2>
20091264:	10022626 	beq	r2,zero,20091b00 <_dtoa_r+0x1130>
20091268:	880d883a 	mov	r6,r17
2009126c:	a00f883a 	mov	r7,r20
20091270:	9809883a 	mov	r4,r19
20091274:	a80b883a 	mov	r5,r21
20091278:	0089ca40 	call	20089ca4 <__divdf3>
2009127c:	180b883a 	mov	r5,r3
20091280:	1009883a 	mov	r4,r2
20091284:	008ae400 	call	2008ae40 <__fixdfsi>
20091288:	1009883a 	mov	r4,r2
2009128c:	1021883a 	mov	r16,r2
20091290:	008aec80 	call	2008aec8 <__floatsidf>
20091294:	1009883a 	mov	r4,r2
20091298:	180b883a 	mov	r5,r3
2009129c:	880d883a 	mov	r6,r17
200912a0:	a00f883a 	mov	r7,r20
200912a4:	0098d400 	call	20098d40 <__muldf3>
200912a8:	9809883a 	mov	r4,r19
200912ac:	a80b883a 	mov	r5,r21
200912b0:	100d883a 	mov	r6,r2
200912b4:	180f883a 	mov	r7,r3
200912b8:	008a5700 	call	2008a570 <__subdf3>
200912bc:	82000c04 	addi	r8,r16,48
200912c0:	92000005 	stb	r8,0(r18)
200912c4:	1009883a 	mov	r4,r2
200912c8:	180b883a 	mov	r5,r3
200912cc:	000d883a 	mov	r6,zero
200912d0:	01d00934 	movhi	r7,16420
200912d4:	1011883a 	mov	r8,r2
200912d8:	bdc00044 	addi	r23,r23,1
200912dc:	95bfd81e 	bne	r18,r22,20091240 <__flash_rwdata_start+0xffff266c>
200912e0:	802d883a 	mov	r22,r16
200912e4:	dc000317 	ldw	r16,12(sp)
200912e8:	4009883a 	mov	r4,r8
200912ec:	180b883a 	mov	r5,r3
200912f0:	400d883a 	mov	r6,r8
200912f4:	180f883a 	mov	r7,r3
200912f8:	00894080 	call	20089408 <__adddf3>
200912fc:	8809883a 	mov	r4,r17
20091300:	a00b883a 	mov	r5,r20
20091304:	100d883a 	mov	r6,r2
20091308:	180f883a 	mov	r7,r3
2009130c:	1027883a 	mov	r19,r2
20091310:	1825883a 	mov	r18,r3
20091314:	0098c600 	call	20098c60 <__ledf2>
20091318:	10000816 	blt	r2,zero,2009133c <_dtoa_r+0x96c>
2009131c:	8809883a 	mov	r4,r17
20091320:	a00b883a 	mov	r5,r20
20091324:	980d883a 	mov	r6,r19
20091328:	900f883a 	mov	r7,r18
2009132c:	0098afc0 	call	20098afc <__eqdf2>
20091330:	103f551e 	bne	r2,zero,20091088 <__flash_rwdata_start+0xffff24b4>
20091334:	b580004c 	andi	r22,r22,1
20091338:	b03f5326 	beq	r22,zero,20091088 <__flash_rwdata_start+0xffff24b4>
2009133c:	bd7fffc3 	ldbu	r21,-1(r23)
20091340:	b8bfffc4 	addi	r2,r23,-1
20091344:	1007883a 	mov	r3,r2
20091348:	01400e44 	movi	r5,57
2009134c:	d9800717 	ldw	r6,28(sp)
20091350:	00000506 	br	20091368 <_dtoa_r+0x998>
20091354:	18ffffc4 	addi	r3,r3,-1
20091358:	30825e26 	beq	r6,r2,20091cd4 <_dtoa_r+0x1304>
2009135c:	1d400003 	ldbu	r21,0(r3)
20091360:	102f883a 	mov	r23,r2
20091364:	10bfffc4 	addi	r2,r2,-1
20091368:	a9003fcc 	andi	r4,r21,255
2009136c:	2100201c 	xori	r4,r4,128
20091370:	213fe004 	addi	r4,r4,-128
20091374:	217ff726 	beq	r4,r5,20091354 <__flash_rwdata_start+0xffff2780>
20091378:	aa000044 	addi	r8,r21,1
2009137c:	12000005 	stb	r8,0(r2)
20091380:	003f4106 	br	20091088 <__flash_rwdata_start+0xffff24b4>
20091384:	d8c00b17 	ldw	r3,44(sp)
20091388:	18006726 	beq	r3,zero,20091528 <_dtoa_r+0xb58>
2009138c:	d9000317 	ldw	r4,12(sp)
20091390:	00c00044 	movi	r3,1
20091394:	19016a0e 	bge	r3,r4,20091940 <_dtoa_r+0xf70>
20091398:	d8800617 	ldw	r2,24(sp)
2009139c:	d8c00917 	ldw	r3,36(sp)
200913a0:	157fffc4 	addi	r21,r2,-1
200913a4:	1d420716 	blt	r3,r21,20091bc4 <_dtoa_r+0x11f4>
200913a8:	1d6bc83a 	sub	r21,r3,r21
200913ac:	d8800617 	ldw	r2,24(sp)
200913b0:	1002c716 	blt	r2,zero,20091ed0 <_dtoa_r+0x1500>
200913b4:	dd000817 	ldw	r20,32(sp)
200913b8:	d8800617 	ldw	r2,24(sp)
200913bc:	d9800817 	ldw	r6,32(sp)
200913c0:	8009883a 	mov	r4,r16
200913c4:	01400044 	movi	r5,1
200913c8:	308d883a 	add	r6,r6,r2
200913cc:	d9800815 	stw	r6,32(sp)
200913d0:	b0ad883a 	add	r22,r22,r2
200913d4:	0093a700 	call	20093a70 <__i2b>
200913d8:	1023883a 	mov	r17,r2
200913dc:	a0000826 	beq	r20,zero,20091400 <_dtoa_r+0xa30>
200913e0:	0580070e 	bge	zero,r22,20091400 <_dtoa_r+0xa30>
200913e4:	b005883a 	mov	r2,r22
200913e8:	a5812016 	blt	r20,r22,2009186c <_dtoa_r+0xe9c>
200913ec:	d8c00817 	ldw	r3,32(sp)
200913f0:	a0a9c83a 	sub	r20,r20,r2
200913f4:	b0adc83a 	sub	r22,r22,r2
200913f8:	1887c83a 	sub	r3,r3,r2
200913fc:	d8c00815 	stw	r3,32(sp)
20091400:	d9000917 	ldw	r4,36(sp)
20091404:	0100140e 	bge	zero,r4,20091458 <_dtoa_r+0xa88>
20091408:	d9800b17 	ldw	r6,44(sp)
2009140c:	3001e526 	beq	r6,zero,20091ba4 <_dtoa_r+0x11d4>
20091410:	05400e0e 	bge	zero,r21,2009144c <_dtoa_r+0xa7c>
20091414:	880b883a 	mov	r5,r17
20091418:	8009883a 	mov	r4,r16
2009141c:	a80d883a 	mov	r6,r21
20091420:	0093ca80 	call	20093ca8 <__pow5mult>
20091424:	e00d883a 	mov	r6,fp
20091428:	8009883a 	mov	r4,r16
2009142c:	100b883a 	mov	r5,r2
20091430:	1023883a 	mov	r17,r2
20091434:	0093aac0 	call	20093aac <__multiply>
20091438:	102f883a 	mov	r23,r2
2009143c:	e00b883a 	mov	r5,fp
20091440:	8009883a 	mov	r4,r16
20091444:	009370c0 	call	2009370c <_Bfree>
20091448:	b839883a 	mov	fp,r23
2009144c:	d8800917 	ldw	r2,36(sp)
20091450:	154dc83a 	sub	r6,r2,r21
20091454:	3001281e 	bne	r6,zero,200918f8 <_dtoa_r+0xf28>
20091458:	05c00044 	movi	r23,1
2009145c:	8009883a 	mov	r4,r16
20091460:	b80b883a 	mov	r5,r23
20091464:	0093a700 	call	20093a70 <__i2b>
20091468:	d8c00a17 	ldw	r3,40(sp)
2009146c:	102b883a 	mov	r21,r2
20091470:	00c0310e 	bge	zero,r3,20091538 <_dtoa_r+0xb68>
20091474:	8009883a 	mov	r4,r16
20091478:	100b883a 	mov	r5,r2
2009147c:	180d883a 	mov	r6,r3
20091480:	0093ca80 	call	20093ca8 <__pow5mult>
20091484:	d9000317 	ldw	r4,12(sp)
20091488:	102b883a 	mov	r21,r2
2009148c:	b9011f0e 	bge	r23,r4,2009190c <_dtoa_r+0xf3c>
20091490:	0027883a 	mov	r19,zero
20091494:	a8800417 	ldw	r2,16(r21)
20091498:	10800104 	addi	r2,r2,4
2009149c:	1085883a 	add	r2,r2,r2
200914a0:	1085883a 	add	r2,r2,r2
200914a4:	a885883a 	add	r2,r21,r2
200914a8:	11000017 	ldw	r4,0(r2)
200914ac:	00939580 	call	20093958 <__hi0bits>
200914b0:	00c00804 	movi	r3,32
200914b4:	1885c83a 	sub	r2,r3,r2
200914b8:	00002506 	br	20091550 <_dtoa_r+0xb80>
200914bc:	01800044 	movi	r6,1
200914c0:	d9800d15 	stw	r6,52(sp)
200914c4:	003dec06 	br	20090c78 <__flash_rwdata_start+0xffff20a4>
200914c8:	d8c00817 	ldw	r3,32(sp)
200914cc:	d9000517 	ldw	r4,20(sp)
200914d0:	d8000a15 	stw	zero,40(sp)
200914d4:	1907c83a 	sub	r3,r3,r4
200914d8:	010dc83a 	sub	r6,zero,r4
200914dc:	d8c00815 	stw	r3,32(sp)
200914e0:	d9800915 	stw	r6,36(sp)
200914e4:	003ded06 	br	20090c9c <__flash_rwdata_start+0xffff20c8>
200914e8:	05adc83a 	sub	r22,zero,r22
200914ec:	dd800815 	stw	r22,32(sp)
200914f0:	002d883a 	mov	r22,zero
200914f4:	003de406 	br	20090c88 <__flash_rwdata_start+0xffff20b4>
200914f8:	d9000517 	ldw	r4,20(sp)
200914fc:	008aec80 	call	2008aec8 <__floatsidf>
20091500:	1009883a 	mov	r4,r2
20091504:	180b883a 	mov	r5,r3
20091508:	b00d883a 	mov	r6,r22
2009150c:	a80f883a 	mov	r7,r21
20091510:	0098afc0 	call	20098afc <__eqdf2>
20091514:	103dc726 	beq	r2,zero,20090c34 <__flash_rwdata_start+0xffff2060>
20091518:	d8800517 	ldw	r2,20(sp)
2009151c:	10bfffc4 	addi	r2,r2,-1
20091520:	d8800515 	stw	r2,20(sp)
20091524:	003dc306 	br	20090c34 <__flash_rwdata_start+0xffff2060>
20091528:	dd400917 	ldw	r21,36(sp)
2009152c:	dd000817 	ldw	r20,32(sp)
20091530:	0023883a 	mov	r17,zero
20091534:	003fa906 	br	200913dc <__flash_rwdata_start+0xffff2808>
20091538:	d9800317 	ldw	r6,12(sp)
2009153c:	b981670e 	bge	r23,r6,20091adc <_dtoa_r+0x110c>
20091540:	0027883a 	mov	r19,zero
20091544:	d8c00a17 	ldw	r3,40(sp)
20091548:	183fd21e 	bne	r3,zero,20091494 <__flash_rwdata_start+0xffff28c0>
2009154c:	00800044 	movi	r2,1
20091550:	1585883a 	add	r2,r2,r22
20091554:	108007cc 	andi	r2,r2,31
20091558:	10005f26 	beq	r2,zero,200916d8 <_dtoa_r+0xd08>
2009155c:	00c00804 	movi	r3,32
20091560:	1887c83a 	sub	r3,r3,r2
20091564:	01000104 	movi	r4,4
20091568:	20c2dd0e 	bge	r4,r3,200920e0 <_dtoa_r+0x1710>
2009156c:	d9000817 	ldw	r4,32(sp)
20091570:	00c00704 	movi	r3,28
20091574:	1885c83a 	sub	r2,r3,r2
20091578:	2089883a 	add	r4,r4,r2
2009157c:	d9000815 	stw	r4,32(sp)
20091580:	a0a9883a 	add	r20,r20,r2
20091584:	b0ad883a 	add	r22,r22,r2
20091588:	d8800817 	ldw	r2,32(sp)
2009158c:	0080050e 	bge	zero,r2,200915a4 <_dtoa_r+0xbd4>
20091590:	e00b883a 	mov	r5,fp
20091594:	8009883a 	mov	r4,r16
20091598:	100d883a 	mov	r6,r2
2009159c:	0093de80 	call	20093de8 <__lshift>
200915a0:	1039883a 	mov	fp,r2
200915a4:	0580050e 	bge	zero,r22,200915bc <_dtoa_r+0xbec>
200915a8:	a80b883a 	mov	r5,r21
200915ac:	8009883a 	mov	r4,r16
200915b0:	b00d883a 	mov	r6,r22
200915b4:	0093de80 	call	20093de8 <__lshift>
200915b8:	102b883a 	mov	r21,r2
200915bc:	d8c00d17 	ldw	r3,52(sp)
200915c0:	1801161e 	bne	r3,zero,20091a1c <_dtoa_r+0x104c>
200915c4:	d8c00617 	ldw	r3,24(sp)
200915c8:	00c12d0e 	bge	zero,r3,20091a80 <_dtoa_r+0x10b0>
200915cc:	d8c00b17 	ldw	r3,44(sp)
200915d0:	1800571e 	bne	r3,zero,20091730 <_dtoa_r+0xd60>
200915d4:	dc800717 	ldw	r18,28(sp)
200915d8:	dcc00617 	ldw	r19,24(sp)
200915dc:	9029883a 	mov	r20,r18
200915e0:	00000206 	br	200915ec <_dtoa_r+0xc1c>
200915e4:	00937340 	call	20093734 <__multadd>
200915e8:	1039883a 	mov	fp,r2
200915ec:	e009883a 	mov	r4,fp
200915f0:	a80b883a 	mov	r5,r21
200915f4:	00907d00 	call	200907d0 <quorem>
200915f8:	10800c04 	addi	r2,r2,48
200915fc:	90800005 	stb	r2,0(r18)
20091600:	94800044 	addi	r18,r18,1
20091604:	9507c83a 	sub	r3,r18,r20
20091608:	8009883a 	mov	r4,r16
2009160c:	e00b883a 	mov	r5,fp
20091610:	01800284 	movi	r6,10
20091614:	000f883a 	mov	r7,zero
20091618:	1cfff216 	blt	r3,r19,200915e4 <__flash_rwdata_start+0xffff2a10>
2009161c:	1011883a 	mov	r8,r2
20091620:	d8800617 	ldw	r2,24(sp)
20091624:	00822e0e 	bge	zero,r2,20091ee0 <_dtoa_r+0x1510>
20091628:	d9000717 	ldw	r4,28(sp)
2009162c:	0025883a 	mov	r18,zero
20091630:	20af883a 	add	r23,r4,r2
20091634:	e00b883a 	mov	r5,fp
20091638:	01800044 	movi	r6,1
2009163c:	8009883a 	mov	r4,r16
20091640:	da001715 	stw	r8,92(sp)
20091644:	0093de80 	call	20093de8 <__lshift>
20091648:	1009883a 	mov	r4,r2
2009164c:	a80b883a 	mov	r5,r21
20091650:	1039883a 	mov	fp,r2
20091654:	0093f380 	call	20093f38 <__mcmp>
20091658:	da001717 	ldw	r8,92(sp)
2009165c:	00816e0e 	bge	zero,r2,20091c18 <_dtoa_r+0x1248>
20091660:	b93fffc3 	ldbu	r4,-1(r23)
20091664:	b8bfffc4 	addi	r2,r23,-1
20091668:	1007883a 	mov	r3,r2
2009166c:	01800e44 	movi	r6,57
20091670:	d9c00717 	ldw	r7,28(sp)
20091674:	00000506 	br	2009168c <_dtoa_r+0xcbc>
20091678:	18ffffc4 	addi	r3,r3,-1
2009167c:	38811926 	beq	r7,r2,20091ae4 <_dtoa_r+0x1114>
20091680:	19000003 	ldbu	r4,0(r3)
20091684:	102f883a 	mov	r23,r2
20091688:	10bfffc4 	addi	r2,r2,-1
2009168c:	21403fcc 	andi	r5,r4,255
20091690:	2940201c 	xori	r5,r5,128
20091694:	297fe004 	addi	r5,r5,-128
20091698:	29bff726 	beq	r5,r6,20091678 <__flash_rwdata_start+0xffff2aa4>
2009169c:	21000044 	addi	r4,r4,1
200916a0:	11000005 	stb	r4,0(r2)
200916a4:	8009883a 	mov	r4,r16
200916a8:	a80b883a 	mov	r5,r21
200916ac:	009370c0 	call	2009370c <_Bfree>
200916b0:	883e7526 	beq	r17,zero,20091088 <__flash_rwdata_start+0xffff24b4>
200916b4:	90000426 	beq	r18,zero,200916c8 <_dtoa_r+0xcf8>
200916b8:	94400326 	beq	r18,r17,200916c8 <_dtoa_r+0xcf8>
200916bc:	8009883a 	mov	r4,r16
200916c0:	900b883a 	mov	r5,r18
200916c4:	009370c0 	call	2009370c <_Bfree>
200916c8:	8009883a 	mov	r4,r16
200916cc:	880b883a 	mov	r5,r17
200916d0:	009370c0 	call	2009370c <_Bfree>
200916d4:	003e6c06 	br	20091088 <__flash_rwdata_start+0xffff24b4>
200916d8:	00800704 	movi	r2,28
200916dc:	d9800817 	ldw	r6,32(sp)
200916e0:	a0a9883a 	add	r20,r20,r2
200916e4:	b0ad883a 	add	r22,r22,r2
200916e8:	308d883a 	add	r6,r6,r2
200916ec:	d9800815 	stw	r6,32(sp)
200916f0:	003fa506 	br	20091588 <__flash_rwdata_start+0xffff29b4>
200916f4:	013efb84 	movi	r4,-1042
200916f8:	246bc83a 	sub	r21,r4,r17
200916fc:	9548983a 	sll	r4,r18,r21
20091700:	003d1806 	br	20090b64 <__flash_rwdata_start+0xffff1f90>
20091704:	d8000d15 	stw	zero,52(sp)
20091708:	003d5b06 	br	20090c78 <__flash_rwdata_start+0xffff20a4>
2009170c:	880b883a 	mov	r5,r17
20091710:	8009883a 	mov	r4,r16
20091714:	01800284 	movi	r6,10
20091718:	000f883a 	mov	r7,zero
2009171c:	00937340 	call	20093734 <__multadd>
20091720:	1023883a 	mov	r17,r2
20091724:	d8800c17 	ldw	r2,48(sp)
20091728:	0082550e 	bge	zero,r2,20092080 <_dtoa_r+0x16b0>
2009172c:	d8800615 	stw	r2,24(sp)
20091730:	0500050e 	bge	zero,r20,20091748 <_dtoa_r+0xd78>
20091734:	880b883a 	mov	r5,r17
20091738:	8009883a 	mov	r4,r16
2009173c:	a00d883a 	mov	r6,r20
20091740:	0093de80 	call	20093de8 <__lshift>
20091744:	1023883a 	mov	r17,r2
20091748:	98016a1e 	bne	r19,zero,20091cf4 <_dtoa_r+0x1324>
2009174c:	8829883a 	mov	r20,r17
20091750:	d9000617 	ldw	r4,24(sp)
20091754:	dcc00717 	ldw	r19,28(sp)
20091758:	9480004c 	andi	r18,r18,1
2009175c:	20bfffc4 	addi	r2,r4,-1
20091760:	9885883a 	add	r2,r19,r2
20091764:	d8800415 	stw	r2,16(sp)
20091768:	dc800615 	stw	r18,24(sp)
2009176c:	e009883a 	mov	r4,fp
20091770:	a80b883a 	mov	r5,r21
20091774:	00907d00 	call	200907d0 <quorem>
20091778:	e009883a 	mov	r4,fp
2009177c:	880b883a 	mov	r5,r17
20091780:	102f883a 	mov	r23,r2
20091784:	0093f380 	call	20093f38 <__mcmp>
20091788:	8009883a 	mov	r4,r16
2009178c:	a80b883a 	mov	r5,r21
20091790:	a00d883a 	mov	r6,r20
20091794:	102d883a 	mov	r22,r2
20091798:	0093f980 	call	20093f98 <__mdiff>
2009179c:	1007883a 	mov	r3,r2
200917a0:	10800317 	ldw	r2,12(r2)
200917a4:	bc800c04 	addi	r18,r23,48
200917a8:	1000971e 	bne	r2,zero,20091a08 <_dtoa_r+0x1038>
200917ac:	180b883a 	mov	r5,r3
200917b0:	e009883a 	mov	r4,fp
200917b4:	d8c01515 	stw	r3,84(sp)
200917b8:	0093f380 	call	20093f38 <__mcmp>
200917bc:	d8c01517 	ldw	r3,84(sp)
200917c0:	8009883a 	mov	r4,r16
200917c4:	d8801515 	stw	r2,84(sp)
200917c8:	180b883a 	mov	r5,r3
200917cc:	009370c0 	call	2009370c <_Bfree>
200917d0:	d8801517 	ldw	r2,84(sp)
200917d4:	1000041e 	bne	r2,zero,200917e8 <_dtoa_r+0xe18>
200917d8:	d9800317 	ldw	r6,12(sp)
200917dc:	3000021e 	bne	r6,zero,200917e8 <_dtoa_r+0xe18>
200917e0:	d8c00617 	ldw	r3,24(sp)
200917e4:	18007626 	beq	r3,zero,200919c0 <_dtoa_r+0xff0>
200917e8:	b0005b16 	blt	r22,zero,20091958 <_dtoa_r+0xf88>
200917ec:	b000041e 	bne	r22,zero,20091800 <_dtoa_r+0xe30>
200917f0:	d9000317 	ldw	r4,12(sp)
200917f4:	2000021e 	bne	r4,zero,20091800 <_dtoa_r+0xe30>
200917f8:	d8c00617 	ldw	r3,24(sp)
200917fc:	18005626 	beq	r3,zero,20091958 <_dtoa_r+0xf88>
20091800:	00814d16 	blt	zero,r2,20091d38 <_dtoa_r+0x1368>
20091804:	d8c00417 	ldw	r3,16(sp)
20091808:	9d800044 	addi	r22,r19,1
2009180c:	9c800005 	stb	r18,0(r19)
20091810:	b02f883a 	mov	r23,r22
20091814:	98c14c26 	beq	r19,r3,20091d48 <_dtoa_r+0x1378>
20091818:	e00b883a 	mov	r5,fp
2009181c:	8009883a 	mov	r4,r16
20091820:	01800284 	movi	r6,10
20091824:	000f883a 	mov	r7,zero
20091828:	00937340 	call	20093734 <__multadd>
2009182c:	1039883a 	mov	fp,r2
20091830:	8d006d26 	beq	r17,r20,200919e8 <_dtoa_r+0x1018>
20091834:	880b883a 	mov	r5,r17
20091838:	01800284 	movi	r6,10
2009183c:	000f883a 	mov	r7,zero
20091840:	8009883a 	mov	r4,r16
20091844:	00937340 	call	20093734 <__multadd>
20091848:	a00b883a 	mov	r5,r20
2009184c:	8009883a 	mov	r4,r16
20091850:	01800284 	movi	r6,10
20091854:	000f883a 	mov	r7,zero
20091858:	1023883a 	mov	r17,r2
2009185c:	00937340 	call	20093734 <__multadd>
20091860:	1029883a 	mov	r20,r2
20091864:	b027883a 	mov	r19,r22
20091868:	003fc006 	br	2009176c <__flash_rwdata_start+0xffff2b98>
2009186c:	a005883a 	mov	r2,r20
20091870:	003ede06 	br	200913ec <__flash_rwdata_start+0xffff2818>
20091874:	01000044 	movi	r4,1
20091878:	d9000b15 	stw	r4,44(sp)
2009187c:	d9802217 	ldw	r6,136(sp)
20091880:	0180dc0e 	bge	zero,r6,20091bf4 <_dtoa_r+0x1224>
20091884:	3023883a 	mov	r17,r6
20091888:	d9800c15 	stw	r6,48(sp)
2009188c:	d9800615 	stw	r6,24(sp)
20091890:	003d1e06 	br	20090d0c <__flash_rwdata_start+0xffff2138>
20091894:	d8800617 	ldw	r2,24(sp)
20091898:	00be3716 	blt	zero,r2,20091178 <__flash_rwdata_start+0xffff25a4>
2009189c:	1000be1e 	bne	r2,zero,20091b98 <_dtoa_r+0x11c8>
200918a0:	8809883a 	mov	r4,r17
200918a4:	a00b883a 	mov	r5,r20
200918a8:	000d883a 	mov	r6,zero
200918ac:	01d00534 	movhi	r7,16404
200918b0:	0098d400 	call	20098d40 <__muldf3>
200918b4:	1009883a 	mov	r4,r2
200918b8:	180b883a 	mov	r5,r3
200918bc:	900d883a 	mov	r6,r18
200918c0:	980f883a 	mov	r7,r19
200918c4:	0098b800 	call	20098b80 <__gedf2>
200918c8:	002b883a 	mov	r21,zero
200918cc:	0023883a 	mov	r17,zero
200918d0:	10007a16 	blt	r2,zero,20091abc <_dtoa_r+0x10ec>
200918d4:	d9002217 	ldw	r4,136(sp)
200918d8:	ddc00717 	ldw	r23,28(sp)
200918dc:	0108303a 	nor	r4,zero,r4
200918e0:	d9000515 	stw	r4,20(sp)
200918e4:	8009883a 	mov	r4,r16
200918e8:	a80b883a 	mov	r5,r21
200918ec:	009370c0 	call	2009370c <_Bfree>
200918f0:	883f751e 	bne	r17,zero,200916c8 <__flash_rwdata_start+0xffff2af4>
200918f4:	003de406 	br	20091088 <__flash_rwdata_start+0xffff24b4>
200918f8:	e00b883a 	mov	r5,fp
200918fc:	8009883a 	mov	r4,r16
20091900:	0093ca80 	call	20093ca8 <__pow5mult>
20091904:	1039883a 	mov	fp,r2
20091908:	003ed306 	br	20091458 <__flash_rwdata_start+0xffff2884>
2009190c:	903ee01e 	bne	r18,zero,20091490 <__flash_rwdata_start+0xffff28bc>
20091910:	00800434 	movhi	r2,16
20091914:	10bfffc4 	addi	r2,r2,-1
20091918:	9884703a 	and	r2,r19,r2
2009191c:	103f081e 	bne	r2,zero,20091540 <__flash_rwdata_start+0xffff296c>
20091920:	9cdffc2c 	andhi	r19,r19,32752
20091924:	983f0626 	beq	r19,zero,20091540 <__flash_rwdata_start+0xffff296c>
20091928:	d8800817 	ldw	r2,32(sp)
2009192c:	b5800044 	addi	r22,r22,1
20091930:	04c00044 	movi	r19,1
20091934:	10800044 	addi	r2,r2,1
20091938:	d8800815 	stw	r2,32(sp)
2009193c:	003f0106 	br	20091544 <__flash_rwdata_start+0xffff2970>
20091940:	d9800f17 	ldw	r6,60(sp)
20091944:	30016826 	beq	r6,zero,20091ee8 <_dtoa_r+0x1518>
20091948:	10810cc4 	addi	r2,r2,1075
2009194c:	dd400917 	ldw	r21,36(sp)
20091950:	dd000817 	ldw	r20,32(sp)
20091954:	003e9906 	br	200913bc <__flash_rwdata_start+0xffff27e8>
20091958:	9011883a 	mov	r8,r18
2009195c:	4007883a 	mov	r3,r8
20091960:	e02d883a 	mov	r22,fp
20091964:	0080100e 	bge	zero,r2,200919a8 <_dtoa_r+0xfd8>
20091968:	01800044 	movi	r6,1
2009196c:	8009883a 	mov	r4,r16
20091970:	e00b883a 	mov	r5,fp
20091974:	da001515 	stw	r8,84(sp)
20091978:	da001715 	stw	r8,92(sp)
2009197c:	0093de80 	call	20093de8 <__lshift>
20091980:	1009883a 	mov	r4,r2
20091984:	a80b883a 	mov	r5,r21
20091988:	102d883a 	mov	r22,r2
2009198c:	0093f380 	call	20093f38 <__mcmp>
20091990:	d8c01517 	ldw	r3,84(sp)
20091994:	da001717 	ldw	r8,92(sp)
20091998:	0081a50e 	bge	zero,r2,20092030 <_dtoa_r+0x1660>
2009199c:	00800e44 	movi	r2,57
200919a0:	40817b26 	beq	r8,r2,20091f90 <_dtoa_r+0x15c0>
200919a4:	40c00044 	addi	r3,r8,1
200919a8:	8825883a 	mov	r18,r17
200919ac:	9dc00044 	addi	r23,r19,1
200919b0:	98c00005 	stb	r3,0(r19)
200919b4:	a023883a 	mov	r17,r20
200919b8:	b039883a 	mov	fp,r22
200919bc:	003f3906 	br	200916a4 <__flash_rwdata_start+0xffff2ad0>
200919c0:	00800e44 	movi	r2,57
200919c4:	9011883a 	mov	r8,r18
200919c8:	90817226 	beq	r18,r2,20091f94 <_dtoa_r+0x15c4>
200919cc:	0580010e 	bge	zero,r22,200919d4 <_dtoa_r+0x1004>
200919d0:	ba000c44 	addi	r8,r23,49
200919d4:	8825883a 	mov	r18,r17
200919d8:	9dc00044 	addi	r23,r19,1
200919dc:	9a000005 	stb	r8,0(r19)
200919e0:	a023883a 	mov	r17,r20
200919e4:	003f2f06 	br	200916a4 <__flash_rwdata_start+0xffff2ad0>
200919e8:	880b883a 	mov	r5,r17
200919ec:	8009883a 	mov	r4,r16
200919f0:	01800284 	movi	r6,10
200919f4:	000f883a 	mov	r7,zero
200919f8:	00937340 	call	20093734 <__multadd>
200919fc:	1023883a 	mov	r17,r2
20091a00:	1029883a 	mov	r20,r2
20091a04:	003f9706 	br	20091864 <__flash_rwdata_start+0xffff2c90>
20091a08:	8009883a 	mov	r4,r16
20091a0c:	180b883a 	mov	r5,r3
20091a10:	009370c0 	call	2009370c <_Bfree>
20091a14:	00800044 	movi	r2,1
20091a18:	003f7306 	br	200917e8 <__flash_rwdata_start+0xffff2c14>
20091a1c:	e009883a 	mov	r4,fp
20091a20:	a80b883a 	mov	r5,r21
20091a24:	0093f380 	call	20093f38 <__mcmp>
20091a28:	103ee60e 	bge	r2,zero,200915c4 <__flash_rwdata_start+0xffff29f0>
20091a2c:	8009883a 	mov	r4,r16
20091a30:	e00b883a 	mov	r5,fp
20091a34:	01800284 	movi	r6,10
20091a38:	000f883a 	mov	r7,zero
20091a3c:	00937340 	call	20093734 <__multadd>
20091a40:	d9000517 	ldw	r4,20(sp)
20091a44:	d9800b17 	ldw	r6,44(sp)
20091a48:	1039883a 	mov	fp,r2
20091a4c:	213fffc4 	addi	r4,r4,-1
20091a50:	d9000515 	stw	r4,20(sp)
20091a54:	303f2d1e 	bne	r6,zero,2009170c <__flash_rwdata_start+0xffff2b38>
20091a58:	d9000c17 	ldw	r4,48(sp)
20091a5c:	0101780e 	bge	zero,r4,20092040 <_dtoa_r+0x1670>
20091a60:	d9000615 	stw	r4,24(sp)
20091a64:	003edb06 	br	200915d4 <__flash_rwdata_start+0xffff2a00>
20091a68:	00800084 	movi	r2,2
20091a6c:	30818e1e 	bne	r6,r2,200920a8 <_dtoa_r+0x16d8>
20091a70:	d8000b15 	stw	zero,44(sp)
20091a74:	003f8106 	br	2009187c <__flash_rwdata_start+0xffff2ca8>
20091a78:	d8800717 	ldw	r2,28(sp)
20091a7c:	003c0306 	br	20090a8c <__flash_rwdata_start+0xffff1eb8>
20091a80:	d9000317 	ldw	r4,12(sp)
20091a84:	00800084 	movi	r2,2
20091a88:	113ed00e 	bge	r2,r4,200915cc <__flash_rwdata_start+0xffff29f8>
20091a8c:	d8c00617 	ldw	r3,24(sp)
20091a90:	183f901e 	bne	r3,zero,200918d4 <__flash_rwdata_start+0xffff2d00>
20091a94:	a80b883a 	mov	r5,r21
20091a98:	8009883a 	mov	r4,r16
20091a9c:	01800144 	movi	r6,5
20091aa0:	000f883a 	mov	r7,zero
20091aa4:	00937340 	call	20093734 <__multadd>
20091aa8:	e009883a 	mov	r4,fp
20091aac:	100b883a 	mov	r5,r2
20091ab0:	102b883a 	mov	r21,r2
20091ab4:	0093f380 	call	20093f38 <__mcmp>
20091ab8:	00bf860e 	bge	zero,r2,200918d4 <__flash_rwdata_start+0xffff2d00>
20091abc:	d9800717 	ldw	r6,28(sp)
20091ac0:	00800c44 	movi	r2,49
20091ac4:	30800005 	stb	r2,0(r6)
20091ac8:	d8800517 	ldw	r2,20(sp)
20091acc:	35c00044 	addi	r23,r6,1
20091ad0:	10800044 	addi	r2,r2,1
20091ad4:	d8800515 	stw	r2,20(sp)
20091ad8:	003f8206 	br	200918e4 <__flash_rwdata_start+0xffff2d10>
20091adc:	903e981e 	bne	r18,zero,20091540 <__flash_rwdata_start+0xffff296c>
20091ae0:	003f8b06 	br	20091910 <__flash_rwdata_start+0xffff2d3c>
20091ae4:	d9800517 	ldw	r6,20(sp)
20091ae8:	d8c00717 	ldw	r3,28(sp)
20091aec:	00800c44 	movi	r2,49
20091af0:	31800044 	addi	r6,r6,1
20091af4:	d9800515 	stw	r6,20(sp)
20091af8:	18800005 	stb	r2,0(r3)
20091afc:	003ee906 	br	200916a4 <__flash_rwdata_start+0xffff2ad0>
20091b00:	dc000317 	ldw	r16,12(sp)
20091b04:	003d6006 	br	20091088 <__flash_rwdata_start+0xffff24b4>
20091b08:	8809883a 	mov	r4,r17
20091b0c:	008aec80 	call	2008aec8 <__floatsidf>
20091b10:	a009883a 	mov	r4,r20
20091b14:	a80b883a 	mov	r5,r21
20091b18:	100d883a 	mov	r6,r2
20091b1c:	180f883a 	mov	r7,r3
20091b20:	0098d400 	call	20098d40 <__muldf3>
20091b24:	1009883a 	mov	r4,r2
20091b28:	180b883a 	mov	r5,r3
20091b2c:	000d883a 	mov	r6,zero
20091b30:	01d00734 	movhi	r7,16412
20091b34:	00894080 	call	20089408 <__adddf3>
20091b38:	1023883a 	mov	r17,r2
20091b3c:	00bf3034 	movhi	r2,64704
20091b40:	1885883a 	add	r2,r3,r2
20091b44:	d8800e15 	stw	r2,56(sp)
20091b48:	a009883a 	mov	r4,r20
20091b4c:	a80b883a 	mov	r5,r21
20091b50:	000d883a 	mov	r6,zero
20091b54:	01d00534 	movhi	r7,16404
20091b58:	008a5700 	call	2008a570 <__subdf3>
20091b5c:	d9c00e17 	ldw	r7,56(sp)
20091b60:	1009883a 	mov	r4,r2
20091b64:	180b883a 	mov	r5,r3
20091b68:	880d883a 	mov	r6,r17
20091b6c:	102b883a 	mov	r21,r2
20091b70:	1829883a 	mov	r20,r3
20091b74:	0098b800 	call	20098b80 <__gedf2>
20091b78:	00807716 	blt	zero,r2,20091d58 <_dtoa_r+0x1388>
20091b7c:	d8800e17 	ldw	r2,56(sp)
20091b80:	a809883a 	mov	r4,r21
20091b84:	a00b883a 	mov	r5,r20
20091b88:	11e0003c 	xorhi	r7,r2,32768
20091b8c:	880d883a 	mov	r6,r17
20091b90:	0098c600 	call	20098c60 <__ledf2>
20091b94:	103d6b0e 	bge	r2,zero,20091144 <__flash_rwdata_start+0xffff2570>
20091b98:	002b883a 	mov	r21,zero
20091b9c:	0023883a 	mov	r17,zero
20091ba0:	003f4c06 	br	200918d4 <__flash_rwdata_start+0xffff2d00>
20091ba4:	d9800917 	ldw	r6,36(sp)
20091ba8:	e00b883a 	mov	r5,fp
20091bac:	8009883a 	mov	r4,r16
20091bb0:	0093ca80 	call	20093ca8 <__pow5mult>
20091bb4:	1039883a 	mov	fp,r2
20091bb8:	003e2706 	br	20091458 <__flash_rwdata_start+0xffff2884>
20091bbc:	d8000b15 	stw	zero,44(sp)
20091bc0:	003c4906 	br	20090ce8 <__flash_rwdata_start+0xffff2114>
20091bc4:	d9000917 	ldw	r4,36(sp)
20091bc8:	d9800a17 	ldw	r6,40(sp)
20091bcc:	dd400915 	stw	r21,36(sp)
20091bd0:	a905c83a 	sub	r2,r21,r4
20091bd4:	308d883a 	add	r6,r6,r2
20091bd8:	d9800a15 	stw	r6,40(sp)
20091bdc:	002b883a 	mov	r21,zero
20091be0:	003df206 	br	200913ac <__flash_rwdata_start+0xffff27d8>
20091be4:	dc800e15 	stw	r18,56(sp)
20091be8:	982b883a 	mov	r21,r19
20091bec:	04400084 	movi	r17,2
20091bf0:	003c7406 	br	20090dc4 <__flash_rwdata_start+0xffff21f0>
20091bf4:	04400044 	movi	r17,1
20091bf8:	dc400c15 	stw	r17,48(sp)
20091bfc:	dc400615 	stw	r17,24(sp)
20091c00:	dc402215 	stw	r17,136(sp)
20091c04:	80001115 	stw	zero,68(r16)
20091c08:	000b883a 	mov	r5,zero
20091c0c:	003c4a06 	br	20090d38 <__flash_rwdata_start+0xffff2164>
20091c10:	3023883a 	mov	r17,r6
20091c14:	003ffb06 	br	20091c04 <__flash_rwdata_start+0xffff3030>
20091c18:	1000021e 	bne	r2,zero,20091c24 <_dtoa_r+0x1254>
20091c1c:	4200004c 	andi	r8,r8,1
20091c20:	403e8f1e 	bne	r8,zero,20091660 <__flash_rwdata_start+0xffff2a8c>
20091c24:	01000c04 	movi	r4,48
20091c28:	00000106 	br	20091c30 <_dtoa_r+0x1260>
20091c2c:	102f883a 	mov	r23,r2
20091c30:	b8bfffc4 	addi	r2,r23,-1
20091c34:	10c00007 	ldb	r3,0(r2)
20091c38:	193ffc26 	beq	r3,r4,20091c2c <__flash_rwdata_start+0xffff3058>
20091c3c:	003e9906 	br	200916a4 <__flash_rwdata_start+0xffff2ad0>
20091c40:	d9000517 	ldw	r4,20(sp)
20091c44:	012fc83a 	sub	r23,zero,r4
20091c48:	b800ad26 	beq	r23,zero,20091f00 <_dtoa_r+0x1530>
20091c4c:	b88003cc 	andi	r2,r23,15
20091c50:	100490fa 	slli	r2,r2,3
20091c54:	00c00034 	movhi	r3,0
20091c58:	18c1ca04 	addi	r3,r3,1832
20091c5c:	1885883a 	add	r2,r3,r2
20091c60:	11800017 	ldw	r6,0(r2)
20091c64:	11c00117 	ldw	r7,4(r2)
20091c68:	b82fd13a 	srai	r23,r23,4
20091c6c:	9009883a 	mov	r4,r18
20091c70:	980b883a 	mov	r5,r19
20091c74:	0098d400 	call	20098d40 <__muldf3>
20091c78:	1029883a 	mov	r20,r2
20091c7c:	182b883a 	mov	r21,r3
20091c80:	b800f426 	beq	r23,zero,20092054 <_dtoa_r+0x1684>
20091c84:	02000034 	movhi	r8,0
20091c88:	4201c004 	addi	r8,r8,1792
20091c8c:	8029883a 	mov	r20,r16
20091c90:	04400084 	movi	r17,2
20091c94:	4021883a 	mov	r16,r8
20091c98:	b980004c 	andi	r6,r23,1
20091c9c:	1009883a 	mov	r4,r2
20091ca0:	b82fd07a 	srai	r23,r23,1
20091ca4:	180b883a 	mov	r5,r3
20091ca8:	30000426 	beq	r6,zero,20091cbc <_dtoa_r+0x12ec>
20091cac:	81800017 	ldw	r6,0(r16)
20091cb0:	81c00117 	ldw	r7,4(r16)
20091cb4:	8c400044 	addi	r17,r17,1
20091cb8:	0098d400 	call	20098d40 <__muldf3>
20091cbc:	84000204 	addi	r16,r16,8
20091cc0:	b83ff51e 	bne	r23,zero,20091c98 <__flash_rwdata_start+0xffff30c4>
20091cc4:	a021883a 	mov	r16,r20
20091cc8:	182b883a 	mov	r21,r3
20091ccc:	1029883a 	mov	r20,r2
20091cd0:	003c5506 	br	20090e28 <__flash_rwdata_start+0xffff2254>
20091cd4:	d9800517 	ldw	r6,20(sp)
20091cd8:	d9000717 	ldw	r4,28(sp)
20091cdc:	00c00c04 	movi	r3,48
20091ce0:	31800044 	addi	r6,r6,1
20091ce4:	d9800515 	stw	r6,20(sp)
20091ce8:	20c00005 	stb	r3,0(r4)
20091cec:	02000c44 	movi	r8,49
20091cf0:	003da206 	br	2009137c <__flash_rwdata_start+0xffff27a8>
20091cf4:	89400117 	ldw	r5,4(r17)
20091cf8:	8009883a 	mov	r4,r16
20091cfc:	00936640 	call	20093664 <_Balloc>
20091d00:	89800417 	ldw	r6,16(r17)
20091d04:	11000304 	addi	r4,r2,12
20091d08:	89400304 	addi	r5,r17,12
20091d0c:	31800084 	addi	r6,r6,2
20091d10:	318d883a 	add	r6,r6,r6
20091d14:	318d883a 	add	r6,r6,r6
20091d18:	1027883a 	mov	r19,r2
20091d1c:	008bd9c0 	call	2008bd9c <memcpy>
20091d20:	8009883a 	mov	r4,r16
20091d24:	980b883a 	mov	r5,r19
20091d28:	01800044 	movi	r6,1
20091d2c:	0093de80 	call	20093de8 <__lshift>
20091d30:	1029883a 	mov	r20,r2
20091d34:	003e8606 	br	20091750 <__flash_rwdata_start+0xffff2b7c>
20091d38:	00800e44 	movi	r2,57
20091d3c:	90809526 	beq	r18,r2,20091f94 <_dtoa_r+0x15c4>
20091d40:	92000044 	addi	r8,r18,1
20091d44:	003f2306 	br	200919d4 <__flash_rwdata_start+0xffff2e00>
20091d48:	9011883a 	mov	r8,r18
20091d4c:	8825883a 	mov	r18,r17
20091d50:	a023883a 	mov	r17,r20
20091d54:	003e3706 	br	20091634 <__flash_rwdata_start+0xffff2a60>
20091d58:	002b883a 	mov	r21,zero
20091d5c:	0023883a 	mov	r17,zero
20091d60:	003f5606 	br	20091abc <__flash_rwdata_start+0xffff2ee8>
20091d64:	51bfffc4 	addi	r6,r10,-1
20091d68:	300490fa 	slli	r2,r6,3
20091d6c:	00c00034 	movhi	r3,0
20091d70:	18c1ca04 	addi	r3,r3,1832
20091d74:	1885883a 	add	r2,r3,r2
20091d78:	d9c00e17 	ldw	r7,56(sp)
20091d7c:	11000017 	ldw	r4,0(r2)
20091d80:	11400117 	ldw	r5,4(r2)
20091d84:	d8800717 	ldw	r2,28(sp)
20091d88:	d9801015 	stw	r6,64(sp)
20091d8c:	880d883a 	mov	r6,r17
20091d90:	da801615 	stw	r10,88(sp)
20091d94:	15c00044 	addi	r23,r2,1
20091d98:	0098d400 	call	20098d40 <__muldf3>
20091d9c:	a80b883a 	mov	r5,r21
20091da0:	a009883a 	mov	r4,r20
20091da4:	d8c01115 	stw	r3,68(sp)
20091da8:	d8800e15 	stw	r2,56(sp)
20091dac:	008ae400 	call	2008ae40 <__fixdfsi>
20091db0:	1009883a 	mov	r4,r2
20091db4:	1023883a 	mov	r17,r2
20091db8:	008aec80 	call	2008aec8 <__floatsidf>
20091dbc:	a009883a 	mov	r4,r20
20091dc0:	a80b883a 	mov	r5,r21
20091dc4:	100d883a 	mov	r6,r2
20091dc8:	180f883a 	mov	r7,r3
20091dcc:	008a5700 	call	2008a570 <__subdf3>
20091dd0:	1813883a 	mov	r9,r3
20091dd4:	d8c00717 	ldw	r3,28(sp)
20091dd8:	8c400c04 	addi	r17,r17,48
20091ddc:	1011883a 	mov	r8,r2
20091de0:	1c400005 	stb	r17,0(r3)
20091de4:	da801617 	ldw	r10,88(sp)
20091de8:	00800044 	movi	r2,1
20091dec:	50802326 	beq	r10,r2,20091e7c <_dtoa_r+0x14ac>
20091df0:	d8800717 	ldw	r2,28(sp)
20091df4:	b82b883a 	mov	r21,r23
20091df8:	dc001315 	stw	r16,76(sp)
20091dfc:	12a9883a 	add	r20,r2,r10
20091e00:	4807883a 	mov	r3,r9
20091e04:	4005883a 	mov	r2,r8
20091e08:	dc801415 	stw	r18,80(sp)
20091e0c:	000d883a 	mov	r6,zero
20091e10:	01d00934 	movhi	r7,16420
20091e14:	1009883a 	mov	r4,r2
20091e18:	180b883a 	mov	r5,r3
20091e1c:	0098d400 	call	20098d40 <__muldf3>
20091e20:	180b883a 	mov	r5,r3
20091e24:	1009883a 	mov	r4,r2
20091e28:	1821883a 	mov	r16,r3
20091e2c:	1025883a 	mov	r18,r2
20091e30:	008ae400 	call	2008ae40 <__fixdfsi>
20091e34:	1009883a 	mov	r4,r2
20091e38:	1023883a 	mov	r17,r2
20091e3c:	008aec80 	call	2008aec8 <__floatsidf>
20091e40:	9009883a 	mov	r4,r18
20091e44:	800b883a 	mov	r5,r16
20091e48:	100d883a 	mov	r6,r2
20091e4c:	180f883a 	mov	r7,r3
20091e50:	8c400c04 	addi	r17,r17,48
20091e54:	008a5700 	call	2008a570 <__subdf3>
20091e58:	ad400044 	addi	r21,r21,1
20091e5c:	ac7fffc5 	stb	r17,-1(r21)
20091e60:	ad3fea1e 	bne	r21,r20,20091e0c <__flash_rwdata_start+0xffff3238>
20091e64:	1813883a 	mov	r9,r3
20091e68:	d8c01017 	ldw	r3,64(sp)
20091e6c:	dc001317 	ldw	r16,76(sp)
20091e70:	dc801417 	ldw	r18,80(sp)
20091e74:	1011883a 	mov	r8,r2
20091e78:	b8ef883a 	add	r23,r23,r3
20091e7c:	d9000e17 	ldw	r4,56(sp)
20091e80:	d9401117 	ldw	r5,68(sp)
20091e84:	000d883a 	mov	r6,zero
20091e88:	01cff834 	movhi	r7,16352
20091e8c:	da001715 	stw	r8,92(sp)
20091e90:	da401515 	stw	r9,84(sp)
20091e94:	00894080 	call	20089408 <__adddf3>
20091e98:	da001717 	ldw	r8,92(sp)
20091e9c:	da401517 	ldw	r9,84(sp)
20091ea0:	1009883a 	mov	r4,r2
20091ea4:	400d883a 	mov	r6,r8
20091ea8:	480f883a 	mov	r7,r9
20091eac:	180b883a 	mov	r5,r3
20091eb0:	0098c600 	call	20098c60 <__ledf2>
20091eb4:	da001717 	ldw	r8,92(sp)
20091eb8:	da401517 	ldw	r9,84(sp)
20091ebc:	10003b0e 	bge	r2,zero,20091fac <_dtoa_r+0x15dc>
20091ec0:	d9001217 	ldw	r4,72(sp)
20091ec4:	bd7fffc3 	ldbu	r21,-1(r23)
20091ec8:	d9000515 	stw	r4,20(sp)
20091ecc:	003d1c06 	br	20091340 <__flash_rwdata_start+0xffff276c>
20091ed0:	d8c00817 	ldw	r3,32(sp)
20091ed4:	18a9c83a 	sub	r20,r3,r2
20091ed8:	0005883a 	mov	r2,zero
20091edc:	003d3706 	br	200913bc <__flash_rwdata_start+0xffff27e8>
20091ee0:	00800044 	movi	r2,1
20091ee4:	003dd006 	br	20091628 <__flash_rwdata_start+0xffff2a54>
20091ee8:	d8c00217 	ldw	r3,8(sp)
20091eec:	00800d84 	movi	r2,54
20091ef0:	dd400917 	ldw	r21,36(sp)
20091ef4:	10c5c83a 	sub	r2,r2,r3
20091ef8:	dd000817 	ldw	r20,32(sp)
20091efc:	003d2f06 	br	200913bc <__flash_rwdata_start+0xffff27e8>
20091f00:	9029883a 	mov	r20,r18
20091f04:	982b883a 	mov	r21,r19
20091f08:	04400084 	movi	r17,2
20091f0c:	003bc606 	br	20090e28 <__flash_rwdata_start+0xffff2254>
20091f10:	d8800617 	ldw	r2,24(sp)
20091f14:	103efc26 	beq	r2,zero,20091b08 <__flash_rwdata_start+0xffff2f34>
20091f18:	d8c00c17 	ldw	r3,48(sp)
20091f1c:	00fc890e 	bge	zero,r3,20091144 <__flash_rwdata_start+0xffff2570>
20091f20:	a80b883a 	mov	r5,r21
20091f24:	a009883a 	mov	r4,r20
20091f28:	000d883a 	mov	r6,zero
20091f2c:	01d00934 	movhi	r7,16420
20091f30:	0098d400 	call	20098d40 <__muldf3>
20091f34:	89000044 	addi	r4,r17,1
20091f38:	1029883a 	mov	r20,r2
20091f3c:	182b883a 	mov	r21,r3
20091f40:	008aec80 	call	2008aec8 <__floatsidf>
20091f44:	a009883a 	mov	r4,r20
20091f48:	a80b883a 	mov	r5,r21
20091f4c:	100d883a 	mov	r6,r2
20091f50:	180f883a 	mov	r7,r3
20091f54:	0098d400 	call	20098d40 <__muldf3>
20091f58:	1009883a 	mov	r4,r2
20091f5c:	180b883a 	mov	r5,r3
20091f60:	000d883a 	mov	r6,zero
20091f64:	01d00734 	movhi	r7,16412
20091f68:	00894080 	call	20089408 <__adddf3>
20091f6c:	d9000517 	ldw	r4,20(sp)
20091f70:	1023883a 	mov	r17,r2
20091f74:	00bf3034 	movhi	r2,64704
20091f78:	213fffc4 	addi	r4,r4,-1
20091f7c:	1885883a 	add	r2,r3,r2
20091f80:	d9001215 	stw	r4,72(sp)
20091f84:	d8800e15 	stw	r2,56(sp)
20091f88:	da800c17 	ldw	r10,48(sp)
20091f8c:	003bc306 	br	20090e9c <__flash_rwdata_start+0xffff22c8>
20091f90:	b039883a 	mov	fp,r22
20091f94:	01000e44 	movi	r4,57
20091f98:	8825883a 	mov	r18,r17
20091f9c:	9dc00044 	addi	r23,r19,1
20091fa0:	99000005 	stb	r4,0(r19)
20091fa4:	a023883a 	mov	r17,r20
20091fa8:	003dae06 	br	20091664 <__flash_rwdata_start+0xffff2a90>
20091fac:	d9800e17 	ldw	r6,56(sp)
20091fb0:	d9c01117 	ldw	r7,68(sp)
20091fb4:	0009883a 	mov	r4,zero
20091fb8:	014ff834 	movhi	r5,16352
20091fbc:	da001715 	stw	r8,92(sp)
20091fc0:	da401515 	stw	r9,84(sp)
20091fc4:	008a5700 	call	2008a570 <__subdf3>
20091fc8:	da001717 	ldw	r8,92(sp)
20091fcc:	da401517 	ldw	r9,84(sp)
20091fd0:	1009883a 	mov	r4,r2
20091fd4:	180b883a 	mov	r5,r3
20091fd8:	400d883a 	mov	r6,r8
20091fdc:	480f883a 	mov	r7,r9
20091fe0:	0098b800 	call	20098b80 <__gedf2>
20091fe4:	00bc570e 	bge	zero,r2,20091144 <__flash_rwdata_start+0xffff2570>
20091fe8:	01000c04 	movi	r4,48
20091fec:	00000106 	br	20091ff4 <_dtoa_r+0x1624>
20091ff0:	102f883a 	mov	r23,r2
20091ff4:	b8bfffc4 	addi	r2,r23,-1
20091ff8:	10c00007 	ldb	r3,0(r2)
20091ffc:	193ffc26 	beq	r3,r4,20091ff0 <__flash_rwdata_start+0xffff341c>
20092000:	d9801217 	ldw	r6,72(sp)
20092004:	d9800515 	stw	r6,20(sp)
20092008:	003c1f06 	br	20091088 <__flash_rwdata_start+0xffff24b4>
2009200c:	d8801217 	ldw	r2,72(sp)
20092010:	dc001117 	ldw	r16,68(sp)
20092014:	d8800515 	stw	r2,20(sp)
20092018:	003cc906 	br	20091340 <__flash_rwdata_start+0xffff276c>
2009201c:	dd801317 	ldw	r22,76(sp)
20092020:	dc001117 	ldw	r16,68(sp)
20092024:	dcc01417 	ldw	r19,80(sp)
20092028:	dc801017 	ldw	r18,64(sp)
2009202c:	003c4506 	br	20091144 <__flash_rwdata_start+0xffff2570>
20092030:	103e5d1e 	bne	r2,zero,200919a8 <__flash_rwdata_start+0xffff2dd4>
20092034:	4080004c 	andi	r2,r8,1
20092038:	103e5b26 	beq	r2,zero,200919a8 <__flash_rwdata_start+0xffff2dd4>
2009203c:	003e5706 	br	2009199c <__flash_rwdata_start+0xffff2dc8>
20092040:	d8c00317 	ldw	r3,12(sp)
20092044:	00800084 	movi	r2,2
20092048:	10c00a16 	blt	r2,r3,20092074 <_dtoa_r+0x16a4>
2009204c:	d9000c17 	ldw	r4,48(sp)
20092050:	003e8306 	br	20091a60 <__flash_rwdata_start+0xffff2e8c>
20092054:	04400084 	movi	r17,2
20092058:	003b7306 	br	20090e28 <__flash_rwdata_start+0xffff2254>
2009205c:	d9801217 	ldw	r6,72(sp)
20092060:	d9800515 	stw	r6,20(sp)
20092064:	003cb606 	br	20091340 <__flash_rwdata_start+0xffff276c>
20092068:	d9001217 	ldw	r4,72(sp)
2009206c:	d9000515 	stw	r4,20(sp)
20092070:	003c0506 	br	20091088 <__flash_rwdata_start+0xffff24b4>
20092074:	d9800c17 	ldw	r6,48(sp)
20092078:	d9800615 	stw	r6,24(sp)
2009207c:	003e8306 	br	20091a8c <__flash_rwdata_start+0xffff2eb8>
20092080:	d9800317 	ldw	r6,12(sp)
20092084:	00800084 	movi	r2,2
20092088:	11800216 	blt	r2,r6,20092094 <_dtoa_r+0x16c4>
2009208c:	d8800c17 	ldw	r2,48(sp)
20092090:	003da606 	br	2009172c <__flash_rwdata_start+0xffff2b58>
20092094:	d8800c17 	ldw	r2,48(sp)
20092098:	d8800615 	stw	r2,24(sp)
2009209c:	003e7b06 	br	20091a8c <__flash_rwdata_start+0xffff2eb8>
200920a0:	05000044 	movi	r20,1
200920a4:	003b0506 	br	20090cbc <__flash_rwdata_start+0xffff20e8>
200920a8:	8009883a 	mov	r4,r16
200920ac:	80001115 	stw	zero,68(r16)
200920b0:	000b883a 	mov	r5,zero
200920b4:	00936640 	call	20093664 <_Balloc>
200920b8:	d8800715 	stw	r2,28(sp)
200920bc:	d8c00717 	ldw	r3,28(sp)
200920c0:	00bfffc4 	movi	r2,-1
200920c4:	01000044 	movi	r4,1
200920c8:	d8800c15 	stw	r2,48(sp)
200920cc:	80c01015 	stw	r3,64(r16)
200920d0:	d9000b15 	stw	r4,44(sp)
200920d4:	d8800615 	stw	r2,24(sp)
200920d8:	d8002215 	stw	zero,136(sp)
200920dc:	003c1906 	br	20091144 <__flash_rwdata_start+0xffff2570>
200920e0:	193d2926 	beq	r3,r4,20091588 <__flash_rwdata_start+0xffff29b4>
200920e4:	00c00f04 	movi	r3,60
200920e8:	1885c83a 	sub	r2,r3,r2
200920ec:	003d7b06 	br	200916dc <__flash_rwdata_start+0xffff2b08>
200920f0:	000b883a 	mov	r5,zero
200920f4:	003b1006 	br	20090d38 <__flash_rwdata_start+0xffff2164>

200920f8 <__sflush_r>:
200920f8:	2880030b 	ldhu	r2,12(r5)
200920fc:	defffb04 	addi	sp,sp,-20
20092100:	dcc00315 	stw	r19,12(sp)
20092104:	dc400115 	stw	r17,4(sp)
20092108:	dfc00415 	stw	ra,16(sp)
2009210c:	dc800215 	stw	r18,8(sp)
20092110:	dc000015 	stw	r16,0(sp)
20092114:	10c0020c 	andi	r3,r2,8
20092118:	2823883a 	mov	r17,r5
2009211c:	2027883a 	mov	r19,r4
20092120:	1800311e 	bne	r3,zero,200921e8 <__sflush_r+0xf0>
20092124:	28c00117 	ldw	r3,4(r5)
20092128:	10820014 	ori	r2,r2,2048
2009212c:	2880030d 	sth	r2,12(r5)
20092130:	00c04b0e 	bge	zero,r3,20092260 <__sflush_r+0x168>
20092134:	8a000a17 	ldw	r8,40(r17)
20092138:	40002326 	beq	r8,zero,200921c8 <__sflush_r+0xd0>
2009213c:	9c000017 	ldw	r16,0(r19)
20092140:	10c4000c 	andi	r3,r2,4096
20092144:	98000015 	stw	zero,0(r19)
20092148:	18004826 	beq	r3,zero,2009226c <__sflush_r+0x174>
2009214c:	89801417 	ldw	r6,80(r17)
20092150:	10c0010c 	andi	r3,r2,4
20092154:	18000626 	beq	r3,zero,20092170 <__sflush_r+0x78>
20092158:	88c00117 	ldw	r3,4(r17)
2009215c:	88800c17 	ldw	r2,48(r17)
20092160:	30cdc83a 	sub	r6,r6,r3
20092164:	10000226 	beq	r2,zero,20092170 <__sflush_r+0x78>
20092168:	88800f17 	ldw	r2,60(r17)
2009216c:	308dc83a 	sub	r6,r6,r2
20092170:	89400717 	ldw	r5,28(r17)
20092174:	9809883a 	mov	r4,r19
20092178:	000f883a 	mov	r7,zero
2009217c:	403ee83a 	callr	r8
20092180:	00ffffc4 	movi	r3,-1
20092184:	10c04426 	beq	r2,r3,20092298 <__sflush_r+0x1a0>
20092188:	88c0030b 	ldhu	r3,12(r17)
2009218c:	89000417 	ldw	r4,16(r17)
20092190:	88000115 	stw	zero,4(r17)
20092194:	197dffcc 	andi	r5,r3,63487
20092198:	8940030d 	sth	r5,12(r17)
2009219c:	89000015 	stw	r4,0(r17)
200921a0:	18c4000c 	andi	r3,r3,4096
200921a4:	18002c1e 	bne	r3,zero,20092258 <__sflush_r+0x160>
200921a8:	89400c17 	ldw	r5,48(r17)
200921ac:	9c000015 	stw	r16,0(r19)
200921b0:	28000526 	beq	r5,zero,200921c8 <__sflush_r+0xd0>
200921b4:	88801004 	addi	r2,r17,64
200921b8:	28800226 	beq	r5,r2,200921c4 <__sflush_r+0xcc>
200921bc:	9809883a 	mov	r4,r19
200921c0:	00928500 	call	20092850 <_free_r>
200921c4:	88000c15 	stw	zero,48(r17)
200921c8:	0005883a 	mov	r2,zero
200921cc:	dfc00417 	ldw	ra,16(sp)
200921d0:	dcc00317 	ldw	r19,12(sp)
200921d4:	dc800217 	ldw	r18,8(sp)
200921d8:	dc400117 	ldw	r17,4(sp)
200921dc:	dc000017 	ldw	r16,0(sp)
200921e0:	dec00504 	addi	sp,sp,20
200921e4:	f800283a 	ret
200921e8:	2c800417 	ldw	r18,16(r5)
200921ec:	903ff626 	beq	r18,zero,200921c8 <__flash_rwdata_start+0xffff35f4>
200921f0:	2c000017 	ldw	r16,0(r5)
200921f4:	108000cc 	andi	r2,r2,3
200921f8:	2c800015 	stw	r18,0(r5)
200921fc:	84a1c83a 	sub	r16,r16,r18
20092200:	1000131e 	bne	r2,zero,20092250 <__sflush_r+0x158>
20092204:	28800517 	ldw	r2,20(r5)
20092208:	88800215 	stw	r2,8(r17)
2009220c:	04000316 	blt	zero,r16,2009221c <__sflush_r+0x124>
20092210:	003fed06 	br	200921c8 <__flash_rwdata_start+0xffff35f4>
20092214:	90a5883a 	add	r18,r18,r2
20092218:	043feb0e 	bge	zero,r16,200921c8 <__flash_rwdata_start+0xffff35f4>
2009221c:	88800917 	ldw	r2,36(r17)
20092220:	89400717 	ldw	r5,28(r17)
20092224:	800f883a 	mov	r7,r16
20092228:	900d883a 	mov	r6,r18
2009222c:	9809883a 	mov	r4,r19
20092230:	103ee83a 	callr	r2
20092234:	80a1c83a 	sub	r16,r16,r2
20092238:	00bff616 	blt	zero,r2,20092214 <__flash_rwdata_start+0xffff3640>
2009223c:	88c0030b 	ldhu	r3,12(r17)
20092240:	00bfffc4 	movi	r2,-1
20092244:	18c01014 	ori	r3,r3,64
20092248:	88c0030d 	sth	r3,12(r17)
2009224c:	003fdf06 	br	200921cc <__flash_rwdata_start+0xffff35f8>
20092250:	0005883a 	mov	r2,zero
20092254:	003fec06 	br	20092208 <__flash_rwdata_start+0xffff3634>
20092258:	88801415 	stw	r2,80(r17)
2009225c:	003fd206 	br	200921a8 <__flash_rwdata_start+0xffff35d4>
20092260:	28c00f17 	ldw	r3,60(r5)
20092264:	00ffb316 	blt	zero,r3,20092134 <__flash_rwdata_start+0xffff3560>
20092268:	003fd706 	br	200921c8 <__flash_rwdata_start+0xffff35f4>
2009226c:	89400717 	ldw	r5,28(r17)
20092270:	000d883a 	mov	r6,zero
20092274:	9809883a 	mov	r4,r19
20092278:	01c00044 	movi	r7,1
2009227c:	403ee83a 	callr	r8
20092280:	100d883a 	mov	r6,r2
20092284:	00bfffc4 	movi	r2,-1
20092288:	30801426 	beq	r6,r2,200922dc <__sflush_r+0x1e4>
2009228c:	8880030b 	ldhu	r2,12(r17)
20092290:	8a000a17 	ldw	r8,40(r17)
20092294:	003fae06 	br	20092150 <__flash_rwdata_start+0xffff357c>
20092298:	98c00017 	ldw	r3,0(r19)
2009229c:	183fba26 	beq	r3,zero,20092188 <__flash_rwdata_start+0xffff35b4>
200922a0:	01000744 	movi	r4,29
200922a4:	19000626 	beq	r3,r4,200922c0 <__sflush_r+0x1c8>
200922a8:	01000584 	movi	r4,22
200922ac:	19000426 	beq	r3,r4,200922c0 <__sflush_r+0x1c8>
200922b0:	88c0030b 	ldhu	r3,12(r17)
200922b4:	18c01014 	ori	r3,r3,64
200922b8:	88c0030d 	sth	r3,12(r17)
200922bc:	003fc306 	br	200921cc <__flash_rwdata_start+0xffff35f8>
200922c0:	8880030b 	ldhu	r2,12(r17)
200922c4:	88c00417 	ldw	r3,16(r17)
200922c8:	88000115 	stw	zero,4(r17)
200922cc:	10bdffcc 	andi	r2,r2,63487
200922d0:	8880030d 	sth	r2,12(r17)
200922d4:	88c00015 	stw	r3,0(r17)
200922d8:	003fb306 	br	200921a8 <__flash_rwdata_start+0xffff35d4>
200922dc:	98800017 	ldw	r2,0(r19)
200922e0:	103fea26 	beq	r2,zero,2009228c <__flash_rwdata_start+0xffff36b8>
200922e4:	00c00744 	movi	r3,29
200922e8:	10c00226 	beq	r2,r3,200922f4 <__sflush_r+0x1fc>
200922ec:	00c00584 	movi	r3,22
200922f0:	10ffd21e 	bne	r2,r3,2009223c <__flash_rwdata_start+0xffff3668>
200922f4:	9c000015 	stw	r16,0(r19)
200922f8:	0005883a 	mov	r2,zero
200922fc:	003fb306 	br	200921cc <__flash_rwdata_start+0xffff35f8>

20092300 <_fflush_r>:
20092300:	defffd04 	addi	sp,sp,-12
20092304:	dc000115 	stw	r16,4(sp)
20092308:	dfc00215 	stw	ra,8(sp)
2009230c:	2021883a 	mov	r16,r4
20092310:	20000226 	beq	r4,zero,2009231c <_fflush_r+0x1c>
20092314:	20800e17 	ldw	r2,56(r4)
20092318:	10000c26 	beq	r2,zero,2009234c <_fflush_r+0x4c>
2009231c:	2880030f 	ldh	r2,12(r5)
20092320:	1000051e 	bne	r2,zero,20092338 <_fflush_r+0x38>
20092324:	0005883a 	mov	r2,zero
20092328:	dfc00217 	ldw	ra,8(sp)
2009232c:	dc000117 	ldw	r16,4(sp)
20092330:	dec00304 	addi	sp,sp,12
20092334:	f800283a 	ret
20092338:	8009883a 	mov	r4,r16
2009233c:	dfc00217 	ldw	ra,8(sp)
20092340:	dc000117 	ldw	r16,4(sp)
20092344:	dec00304 	addi	sp,sp,12
20092348:	00920f81 	jmpi	200920f8 <__sflush_r>
2009234c:	d9400015 	stw	r5,0(sp)
20092350:	00926dc0 	call	200926dc <__sinit>
20092354:	d9400017 	ldw	r5,0(sp)
20092358:	003ff006 	br	2009231c <__flash_rwdata_start+0xffff3748>

2009235c <fflush>:
2009235c:	20000526 	beq	r4,zero,20092374 <fflush+0x18>
20092360:	00800034 	movhi	r2,0
20092364:	108a9204 	addi	r2,r2,10824
20092368:	200b883a 	mov	r5,r4
2009236c:	11000017 	ldw	r4,0(r2)
20092370:	00923001 	jmpi	20092300 <_fflush_r>
20092374:	00800034 	movhi	r2,0
20092378:	108a9104 	addi	r2,r2,10820
2009237c:	11000017 	ldw	r4,0(r2)
20092380:	01480274 	movhi	r5,8201
20092384:	2948c004 	addi	r5,r5,8960
20092388:	00930c41 	jmpi	200930c4 <_fwalk_reent>

2009238c <__fp_lock>:
2009238c:	0005883a 	mov	r2,zero
20092390:	f800283a 	ret

20092394 <__fp_unlock>:
20092394:	0005883a 	mov	r2,zero
20092398:	f800283a 	ret

2009239c <_cleanup_r>:
2009239c:	01480274 	movhi	r5,8201
200923a0:	295e5f04 	addi	r5,r5,31100
200923a4:	00930c41 	jmpi	200930c4 <_fwalk_reent>

200923a8 <__sinit.part.1>:
200923a8:	defff704 	addi	sp,sp,-36
200923ac:	00c80274 	movhi	r3,8201
200923b0:	dfc00815 	stw	ra,32(sp)
200923b4:	ddc00715 	stw	r23,28(sp)
200923b8:	dd800615 	stw	r22,24(sp)
200923bc:	dd400515 	stw	r21,20(sp)
200923c0:	dd000415 	stw	r20,16(sp)
200923c4:	dcc00315 	stw	r19,12(sp)
200923c8:	dc800215 	stw	r18,8(sp)
200923cc:	dc400115 	stw	r17,4(sp)
200923d0:	dc000015 	stw	r16,0(sp)
200923d4:	18c8e704 	addi	r3,r3,9116
200923d8:	24000117 	ldw	r16,4(r4)
200923dc:	20c00f15 	stw	r3,60(r4)
200923e0:	2080bb04 	addi	r2,r4,748
200923e4:	00c000c4 	movi	r3,3
200923e8:	20c0b915 	stw	r3,740(r4)
200923ec:	2080ba15 	stw	r2,744(r4)
200923f0:	2000b815 	stw	zero,736(r4)
200923f4:	05c00204 	movi	r23,8
200923f8:	00800104 	movi	r2,4
200923fc:	2025883a 	mov	r18,r4
20092400:	b80d883a 	mov	r6,r23
20092404:	81001704 	addi	r4,r16,92
20092408:	000b883a 	mov	r5,zero
2009240c:	80000015 	stw	zero,0(r16)
20092410:	80000115 	stw	zero,4(r16)
20092414:	80000215 	stw	zero,8(r16)
20092418:	8080030d 	sth	r2,12(r16)
2009241c:	80001915 	stw	zero,100(r16)
20092420:	8000038d 	sth	zero,14(r16)
20092424:	80000415 	stw	zero,16(r16)
20092428:	80000515 	stw	zero,20(r16)
2009242c:	80000615 	stw	zero,24(r16)
20092430:	008bed40 	call	2008bed4 <memset>
20092434:	05880274 	movhi	r22,8201
20092438:	94400217 	ldw	r17,8(r18)
2009243c:	05480274 	movhi	r21,8201
20092440:	05080274 	movhi	r20,8201
20092444:	04c80274 	movhi	r19,8201
20092448:	b5935304 	addi	r22,r22,19788
2009244c:	ad536a04 	addi	r21,r21,19880
20092450:	a5138904 	addi	r20,r20,20004
20092454:	9cd3a004 	addi	r19,r19,20096
20092458:	85800815 	stw	r22,32(r16)
2009245c:	85400915 	stw	r21,36(r16)
20092460:	85000a15 	stw	r20,40(r16)
20092464:	84c00b15 	stw	r19,44(r16)
20092468:	84000715 	stw	r16,28(r16)
2009246c:	00800284 	movi	r2,10
20092470:	8880030d 	sth	r2,12(r17)
20092474:	00800044 	movi	r2,1
20092478:	89001704 	addi	r4,r17,92
2009247c:	b80d883a 	mov	r6,r23
20092480:	000b883a 	mov	r5,zero
20092484:	88000015 	stw	zero,0(r17)
20092488:	88000115 	stw	zero,4(r17)
2009248c:	88000215 	stw	zero,8(r17)
20092490:	88001915 	stw	zero,100(r17)
20092494:	8880038d 	sth	r2,14(r17)
20092498:	88000415 	stw	zero,16(r17)
2009249c:	88000515 	stw	zero,20(r17)
200924a0:	88000615 	stw	zero,24(r17)
200924a4:	008bed40 	call	2008bed4 <memset>
200924a8:	94000317 	ldw	r16,12(r18)
200924ac:	00800484 	movi	r2,18
200924b0:	8c400715 	stw	r17,28(r17)
200924b4:	8d800815 	stw	r22,32(r17)
200924b8:	8d400915 	stw	r21,36(r17)
200924bc:	8d000a15 	stw	r20,40(r17)
200924c0:	8cc00b15 	stw	r19,44(r17)
200924c4:	8080030d 	sth	r2,12(r16)
200924c8:	00800084 	movi	r2,2
200924cc:	80000015 	stw	zero,0(r16)
200924d0:	80000115 	stw	zero,4(r16)
200924d4:	80000215 	stw	zero,8(r16)
200924d8:	80001915 	stw	zero,100(r16)
200924dc:	8080038d 	sth	r2,14(r16)
200924e0:	80000415 	stw	zero,16(r16)
200924e4:	80000515 	stw	zero,20(r16)
200924e8:	80000615 	stw	zero,24(r16)
200924ec:	81001704 	addi	r4,r16,92
200924f0:	000b883a 	mov	r5,zero
200924f4:	b80d883a 	mov	r6,r23
200924f8:	008bed40 	call	2008bed4 <memset>
200924fc:	00800044 	movi	r2,1
20092500:	84000715 	stw	r16,28(r16)
20092504:	85800815 	stw	r22,32(r16)
20092508:	85400915 	stw	r21,36(r16)
2009250c:	85000a15 	stw	r20,40(r16)
20092510:	84c00b15 	stw	r19,44(r16)
20092514:	90800e15 	stw	r2,56(r18)
20092518:	dfc00817 	ldw	ra,32(sp)
2009251c:	ddc00717 	ldw	r23,28(sp)
20092520:	dd800617 	ldw	r22,24(sp)
20092524:	dd400517 	ldw	r21,20(sp)
20092528:	dd000417 	ldw	r20,16(sp)
2009252c:	dcc00317 	ldw	r19,12(sp)
20092530:	dc800217 	ldw	r18,8(sp)
20092534:	dc400117 	ldw	r17,4(sp)
20092538:	dc000017 	ldw	r16,0(sp)
2009253c:	dec00904 	addi	sp,sp,36
20092540:	f800283a 	ret

20092544 <__sfmoreglue>:
20092544:	defffc04 	addi	sp,sp,-16
20092548:	dc400115 	stw	r17,4(sp)
2009254c:	2c7fffc4 	addi	r17,r5,-1
20092550:	8c401a24 	muli	r17,r17,104
20092554:	dc800215 	stw	r18,8(sp)
20092558:	2825883a 	mov	r18,r5
2009255c:	89401d04 	addi	r5,r17,116
20092560:	dc000015 	stw	r16,0(sp)
20092564:	dfc00315 	stw	ra,12(sp)
20092568:	008b5780 	call	2008b578 <_malloc_r>
2009256c:	1021883a 	mov	r16,r2
20092570:	10000726 	beq	r2,zero,20092590 <__sfmoreglue+0x4c>
20092574:	11000304 	addi	r4,r2,12
20092578:	10000015 	stw	zero,0(r2)
2009257c:	14800115 	stw	r18,4(r2)
20092580:	11000215 	stw	r4,8(r2)
20092584:	000b883a 	mov	r5,zero
20092588:	89801a04 	addi	r6,r17,104
2009258c:	008bed40 	call	2008bed4 <memset>
20092590:	8005883a 	mov	r2,r16
20092594:	dfc00317 	ldw	ra,12(sp)
20092598:	dc800217 	ldw	r18,8(sp)
2009259c:	dc400117 	ldw	r17,4(sp)
200925a0:	dc000017 	ldw	r16,0(sp)
200925a4:	dec00404 	addi	sp,sp,16
200925a8:	f800283a 	ret

200925ac <__sfp>:
200925ac:	00800034 	movhi	r2,0
200925b0:	defffb04 	addi	sp,sp,-20
200925b4:	108a9104 	addi	r2,r2,10820
200925b8:	dc800215 	stw	r18,8(sp)
200925bc:	14800017 	ldw	r18,0(r2)
200925c0:	dcc00315 	stw	r19,12(sp)
200925c4:	dfc00415 	stw	ra,16(sp)
200925c8:	90800e17 	ldw	r2,56(r18)
200925cc:	dc400115 	stw	r17,4(sp)
200925d0:	dc000015 	stw	r16,0(sp)
200925d4:	2027883a 	mov	r19,r4
200925d8:	1000021e 	bne	r2,zero,200925e4 <__sfp+0x38>
200925dc:	9009883a 	mov	r4,r18
200925e0:	00923a80 	call	200923a8 <__sinit.part.1>
200925e4:	9480b804 	addi	r18,r18,736
200925e8:	047fffc4 	movi	r17,-1
200925ec:	91400117 	ldw	r5,4(r18)
200925f0:	94000217 	ldw	r16,8(r18)
200925f4:	297fffc4 	addi	r5,r5,-1
200925f8:	28000a16 	blt	r5,zero,20092624 <__sfp+0x78>
200925fc:	8080030f 	ldh	r2,12(r16)
20092600:	10000c26 	beq	r2,zero,20092634 <__sfp+0x88>
20092604:	80c01d04 	addi	r3,r16,116
20092608:	00000206 	br	20092614 <__sfp+0x68>
2009260c:	18bfe60f 	ldh	r2,-104(r3)
20092610:	10000826 	beq	r2,zero,20092634 <__sfp+0x88>
20092614:	297fffc4 	addi	r5,r5,-1
20092618:	1c3ffd04 	addi	r16,r3,-12
2009261c:	18c01a04 	addi	r3,r3,104
20092620:	2c7ffa1e 	bne	r5,r17,2009260c <__flash_rwdata_start+0xffff3a38>
20092624:	90800017 	ldw	r2,0(r18)
20092628:	10001d26 	beq	r2,zero,200926a0 <__sfp+0xf4>
2009262c:	1025883a 	mov	r18,r2
20092630:	003fee06 	br	200925ec <__flash_rwdata_start+0xffff3a18>
20092634:	00bfffc4 	movi	r2,-1
20092638:	8080038d 	sth	r2,14(r16)
2009263c:	00800044 	movi	r2,1
20092640:	8080030d 	sth	r2,12(r16)
20092644:	80001915 	stw	zero,100(r16)
20092648:	80000015 	stw	zero,0(r16)
2009264c:	80000215 	stw	zero,8(r16)
20092650:	80000115 	stw	zero,4(r16)
20092654:	80000415 	stw	zero,16(r16)
20092658:	80000515 	stw	zero,20(r16)
2009265c:	80000615 	stw	zero,24(r16)
20092660:	81001704 	addi	r4,r16,92
20092664:	000b883a 	mov	r5,zero
20092668:	01800204 	movi	r6,8
2009266c:	008bed40 	call	2008bed4 <memset>
20092670:	8005883a 	mov	r2,r16
20092674:	80000c15 	stw	zero,48(r16)
20092678:	80000d15 	stw	zero,52(r16)
2009267c:	80001115 	stw	zero,68(r16)
20092680:	80001215 	stw	zero,72(r16)
20092684:	dfc00417 	ldw	ra,16(sp)
20092688:	dcc00317 	ldw	r19,12(sp)
2009268c:	dc800217 	ldw	r18,8(sp)
20092690:	dc400117 	ldw	r17,4(sp)
20092694:	dc000017 	ldw	r16,0(sp)
20092698:	dec00504 	addi	sp,sp,20
2009269c:	f800283a 	ret
200926a0:	9809883a 	mov	r4,r19
200926a4:	01400104 	movi	r5,4
200926a8:	00925440 	call	20092544 <__sfmoreglue>
200926ac:	90800015 	stw	r2,0(r18)
200926b0:	103fde1e 	bne	r2,zero,2009262c <__flash_rwdata_start+0xffff3a58>
200926b4:	00800304 	movi	r2,12
200926b8:	98800015 	stw	r2,0(r19)
200926bc:	0005883a 	mov	r2,zero
200926c0:	003ff006 	br	20092684 <__flash_rwdata_start+0xffff3ab0>

200926c4 <_cleanup>:
200926c4:	00800034 	movhi	r2,0
200926c8:	108a9104 	addi	r2,r2,10820
200926cc:	11000017 	ldw	r4,0(r2)
200926d0:	01480274 	movhi	r5,8201
200926d4:	295e5f04 	addi	r5,r5,31100
200926d8:	00930c41 	jmpi	200930c4 <_fwalk_reent>

200926dc <__sinit>:
200926dc:	20800e17 	ldw	r2,56(r4)
200926e0:	10000126 	beq	r2,zero,200926e8 <__sinit+0xc>
200926e4:	f800283a 	ret
200926e8:	00923a81 	jmpi	200923a8 <__sinit.part.1>

200926ec <__sfp_lock_acquire>:
200926ec:	f800283a 	ret

200926f0 <__sfp_lock_release>:
200926f0:	f800283a 	ret

200926f4 <__sinit_lock_acquire>:
200926f4:	f800283a 	ret

200926f8 <__sinit_lock_release>:
200926f8:	f800283a 	ret

200926fc <__fp_lock_all>:
200926fc:	00800034 	movhi	r2,0
20092700:	108a9204 	addi	r2,r2,10824
20092704:	11000017 	ldw	r4,0(r2)
20092708:	01480274 	movhi	r5,8201
2009270c:	2948e304 	addi	r5,r5,9100
20092710:	00930001 	jmpi	20093000 <_fwalk>

20092714 <__fp_unlock_all>:
20092714:	00800034 	movhi	r2,0
20092718:	108a9204 	addi	r2,r2,10824
2009271c:	11000017 	ldw	r4,0(r2)
20092720:	01480274 	movhi	r5,8201
20092724:	2948e504 	addi	r5,r5,9108
20092728:	00930001 	jmpi	20093000 <_fwalk>

2009272c <_malloc_trim_r>:
2009272c:	defffb04 	addi	sp,sp,-20
20092730:	dcc00315 	stw	r19,12(sp)
20092734:	04c00034 	movhi	r19,0
20092738:	dc800215 	stw	r18,8(sp)
2009273c:	dc400115 	stw	r17,4(sp)
20092740:	dc000015 	stw	r16,0(sp)
20092744:	dfc00415 	stw	ra,16(sp)
20092748:	2821883a 	mov	r16,r5
2009274c:	9cc44504 	addi	r19,r19,4372
20092750:	2025883a 	mov	r18,r4
20092754:	0099cc00 	call	20099cc0 <__malloc_lock>
20092758:	98800217 	ldw	r2,8(r19)
2009275c:	14400117 	ldw	r17,4(r2)
20092760:	00bfff04 	movi	r2,-4
20092764:	88a2703a 	and	r17,r17,r2
20092768:	8c21c83a 	sub	r16,r17,r16
2009276c:	8403fbc4 	addi	r16,r16,4079
20092770:	8020d33a 	srli	r16,r16,12
20092774:	0083ffc4 	movi	r2,4095
20092778:	843fffc4 	addi	r16,r16,-1
2009277c:	8020933a 	slli	r16,r16,12
20092780:	1400060e 	bge	r2,r16,2009279c <_malloc_trim_r+0x70>
20092784:	9009883a 	mov	r4,r18
20092788:	000b883a 	mov	r5,zero
2009278c:	008c13c0 	call	2008c13c <_sbrk_r>
20092790:	98c00217 	ldw	r3,8(r19)
20092794:	1c47883a 	add	r3,r3,r17
20092798:	10c00a26 	beq	r2,r3,200927c4 <_malloc_trim_r+0x98>
2009279c:	9009883a 	mov	r4,r18
200927a0:	0099ce00 	call	20099ce0 <__malloc_unlock>
200927a4:	0005883a 	mov	r2,zero
200927a8:	dfc00417 	ldw	ra,16(sp)
200927ac:	dcc00317 	ldw	r19,12(sp)
200927b0:	dc800217 	ldw	r18,8(sp)
200927b4:	dc400117 	ldw	r17,4(sp)
200927b8:	dc000017 	ldw	r16,0(sp)
200927bc:	dec00504 	addi	sp,sp,20
200927c0:	f800283a 	ret
200927c4:	9009883a 	mov	r4,r18
200927c8:	040bc83a 	sub	r5,zero,r16
200927cc:	008c13c0 	call	2008c13c <_sbrk_r>
200927d0:	00ffffc4 	movi	r3,-1
200927d4:	10c00d26 	beq	r2,r3,2009280c <_malloc_trim_r+0xe0>
200927d8:	00c00034 	movhi	r3,0
200927dc:	18cc1d04 	addi	r3,r3,12404
200927e0:	18800017 	ldw	r2,0(r3)
200927e4:	99000217 	ldw	r4,8(r19)
200927e8:	8c23c83a 	sub	r17,r17,r16
200927ec:	8c400054 	ori	r17,r17,1
200927f0:	1421c83a 	sub	r16,r2,r16
200927f4:	24400115 	stw	r17,4(r4)
200927f8:	9009883a 	mov	r4,r18
200927fc:	1c000015 	stw	r16,0(r3)
20092800:	0099ce00 	call	20099ce0 <__malloc_unlock>
20092804:	00800044 	movi	r2,1
20092808:	003fe706 	br	200927a8 <__flash_rwdata_start+0xffff3bd4>
2009280c:	9009883a 	mov	r4,r18
20092810:	000b883a 	mov	r5,zero
20092814:	008c13c0 	call	2008c13c <_sbrk_r>
20092818:	99000217 	ldw	r4,8(r19)
2009281c:	014003c4 	movi	r5,15
20092820:	1107c83a 	sub	r3,r2,r4
20092824:	28ffdd0e 	bge	r5,r3,2009279c <__flash_rwdata_start+0xffff3bc8>
20092828:	01400034 	movhi	r5,0
2009282c:	294a9304 	addi	r5,r5,10828
20092830:	29400017 	ldw	r5,0(r5)
20092834:	18c00054 	ori	r3,r3,1
20092838:	20c00115 	stw	r3,4(r4)
2009283c:	00c00034 	movhi	r3,0
20092840:	1145c83a 	sub	r2,r2,r5
20092844:	18cc1d04 	addi	r3,r3,12404
20092848:	18800015 	stw	r2,0(r3)
2009284c:	003fd306 	br	2009279c <__flash_rwdata_start+0xffff3bc8>

20092850 <_free_r>:
20092850:	28004c26 	beq	r5,zero,20092984 <_free_r+0x134>
20092854:	defffd04 	addi	sp,sp,-12
20092858:	dc400115 	stw	r17,4(sp)
2009285c:	dc000015 	stw	r16,0(sp)
20092860:	2023883a 	mov	r17,r4
20092864:	2821883a 	mov	r16,r5
20092868:	dfc00215 	stw	ra,8(sp)
2009286c:	0099cc00 	call	20099cc0 <__malloc_lock>
20092870:	813fff17 	ldw	r4,-4(r16)
20092874:	00bfff84 	movi	r2,-2
20092878:	02400034 	movhi	r9,0
2009287c:	81bffe04 	addi	r6,r16,-8
20092880:	2084703a 	and	r2,r4,r2
20092884:	4a444504 	addi	r9,r9,4372
20092888:	308b883a 	add	r5,r6,r2
2009288c:	2a000117 	ldw	r8,4(r5)
20092890:	49c00217 	ldw	r7,8(r9)
20092894:	00ffff04 	movi	r3,-4
20092898:	40c6703a 	and	r3,r8,r3
2009289c:	39405326 	beq	r7,r5,200929ec <_free_r+0x19c>
200928a0:	28c00115 	stw	r3,4(r5)
200928a4:	2100004c 	andi	r4,r4,1
200928a8:	2000091e 	bne	r4,zero,200928d0 <_free_r+0x80>
200928ac:	81fffe17 	ldw	r7,-8(r16)
200928b0:	4a000204 	addi	r8,r9,8
200928b4:	31cdc83a 	sub	r6,r6,r7
200928b8:	31000217 	ldw	r4,8(r6)
200928bc:	11c5883a 	add	r2,r2,r7
200928c0:	22006126 	beq	r4,r8,20092a48 <_free_r+0x1f8>
200928c4:	31c00317 	ldw	r7,12(r6)
200928c8:	21c00315 	stw	r7,12(r4)
200928cc:	39000215 	stw	r4,8(r7)
200928d0:	28c9883a 	add	r4,r5,r3
200928d4:	21c00117 	ldw	r7,4(r4)
200928d8:	39c0004c 	andi	r7,r7,1
200928dc:	38000d1e 	bne	r7,zero,20092914 <_free_r+0xc4>
200928e0:	29000217 	ldw	r4,8(r5)
200928e4:	10c5883a 	add	r2,r2,r3
200928e8:	00c00034 	movhi	r3,0
200928ec:	18c44704 	addi	r3,r3,4380
200928f0:	20c07526 	beq	r4,r3,20092ac8 <_free_r+0x278>
200928f4:	29c00317 	ldw	r7,12(r5)
200928f8:	11400054 	ori	r5,r2,1
200928fc:	3087883a 	add	r3,r6,r2
20092900:	21c00315 	stw	r7,12(r4)
20092904:	39000215 	stw	r4,8(r7)
20092908:	31400115 	stw	r5,4(r6)
2009290c:	18800015 	stw	r2,0(r3)
20092910:	00000406 	br	20092924 <_free_r+0xd4>
20092914:	10c00054 	ori	r3,r2,1
20092918:	30c00115 	stw	r3,4(r6)
2009291c:	3087883a 	add	r3,r6,r2
20092920:	18800015 	stw	r2,0(r3)
20092924:	00c07fc4 	movi	r3,511
20092928:	18801736 	bltu	r3,r2,20092988 <_free_r+0x138>
2009292c:	1004d0fa 	srli	r2,r2,3
20092930:	01400044 	movi	r5,1
20092934:	49000117 	ldw	r4,4(r9)
20092938:	1087883a 	add	r3,r2,r2
2009293c:	18c7883a 	add	r3,r3,r3
20092940:	1005d0ba 	srai	r2,r2,2
20092944:	18c7883a 	add	r3,r3,r3
20092948:	1a47883a 	add	r3,r3,r9
2009294c:	19c00217 	ldw	r7,8(r3)
20092950:	2884983a 	sll	r2,r5,r2
20092954:	30c00315 	stw	r3,12(r6)
20092958:	31c00215 	stw	r7,8(r6)
2009295c:	1104b03a 	or	r2,r2,r4
20092960:	19800215 	stw	r6,8(r3)
20092964:	48800115 	stw	r2,4(r9)
20092968:	39800315 	stw	r6,12(r7)
2009296c:	8809883a 	mov	r4,r17
20092970:	dfc00217 	ldw	ra,8(sp)
20092974:	dc400117 	ldw	r17,4(sp)
20092978:	dc000017 	ldw	r16,0(sp)
2009297c:	dec00304 	addi	sp,sp,12
20092980:	0099ce01 	jmpi	20099ce0 <__malloc_unlock>
20092984:	f800283a 	ret
20092988:	1006d27a 	srli	r3,r2,9
2009298c:	01000104 	movi	r4,4
20092990:	20c04036 	bltu	r4,r3,20092a94 <_free_r+0x244>
20092994:	1006d1ba 	srli	r3,r2,6
20092998:	19400e04 	addi	r5,r3,56
2009299c:	2947883a 	add	r3,r5,r5
200929a0:	18c7883a 	add	r3,r3,r3
200929a4:	18c7883a 	add	r3,r3,r3
200929a8:	1a49883a 	add	r4,r3,r9
200929ac:	20c00217 	ldw	r3,8(r4)
200929b0:	01c00034 	movhi	r7,0
200929b4:	39c44504 	addi	r7,r7,4372
200929b8:	19003b26 	beq	r3,r4,20092aa8 <_free_r+0x258>
200929bc:	01ffff04 	movi	r7,-4
200929c0:	19400117 	ldw	r5,4(r3)
200929c4:	29ca703a 	and	r5,r5,r7
200929c8:	1140022e 	bgeu	r2,r5,200929d4 <_free_r+0x184>
200929cc:	18c00217 	ldw	r3,8(r3)
200929d0:	20fffb1e 	bne	r4,r3,200929c0 <__flash_rwdata_start+0xffff3dec>
200929d4:	18800317 	ldw	r2,12(r3)
200929d8:	30800315 	stw	r2,12(r6)
200929dc:	30c00215 	stw	r3,8(r6)
200929e0:	11800215 	stw	r6,8(r2)
200929e4:	19800315 	stw	r6,12(r3)
200929e8:	003fe006 	br	2009296c <__flash_rwdata_start+0xffff3d98>
200929ec:	2100004c 	andi	r4,r4,1
200929f0:	1885883a 	add	r2,r3,r2
200929f4:	2000071e 	bne	r4,zero,20092a14 <_free_r+0x1c4>
200929f8:	817ffe17 	ldw	r5,-8(r16)
200929fc:	314dc83a 	sub	r6,r6,r5
20092a00:	30c00317 	ldw	r3,12(r6)
20092a04:	31000217 	ldw	r4,8(r6)
20092a08:	1145883a 	add	r2,r2,r5
20092a0c:	20c00315 	stw	r3,12(r4)
20092a10:	19000215 	stw	r4,8(r3)
20092a14:	10c00054 	ori	r3,r2,1
20092a18:	30c00115 	stw	r3,4(r6)
20092a1c:	00c00034 	movhi	r3,0
20092a20:	18ca9404 	addi	r3,r3,10832
20092a24:	18c00017 	ldw	r3,0(r3)
20092a28:	49800215 	stw	r6,8(r9)
20092a2c:	10ffcf36 	bltu	r2,r3,2009296c <__flash_rwdata_start+0xffff3d98>
20092a30:	00800034 	movhi	r2,0
20092a34:	108ab104 	addi	r2,r2,10948
20092a38:	11400017 	ldw	r5,0(r2)
20092a3c:	8809883a 	mov	r4,r17
20092a40:	009272c0 	call	2009272c <_malloc_trim_r>
20092a44:	003fc906 	br	2009296c <__flash_rwdata_start+0xffff3d98>
20092a48:	28c9883a 	add	r4,r5,r3
20092a4c:	21000117 	ldw	r4,4(r4)
20092a50:	2100004c 	andi	r4,r4,1
20092a54:	20000a1e 	bne	r4,zero,20092a80 <_free_r+0x230>
20092a58:	29000317 	ldw	r4,12(r5)
20092a5c:	29400217 	ldw	r5,8(r5)
20092a60:	10c5883a 	add	r2,r2,r3
20092a64:	10c00054 	ori	r3,r2,1
20092a68:	29000315 	stw	r4,12(r5)
20092a6c:	21400215 	stw	r5,8(r4)
20092a70:	30c00115 	stw	r3,4(r6)
20092a74:	308d883a 	add	r6,r6,r2
20092a78:	30800015 	stw	r2,0(r6)
20092a7c:	003fbb06 	br	2009296c <__flash_rwdata_start+0xffff3d98>
20092a80:	10c00054 	ori	r3,r2,1
20092a84:	30c00115 	stw	r3,4(r6)
20092a88:	308d883a 	add	r6,r6,r2
20092a8c:	30800015 	stw	r2,0(r6)
20092a90:	003fb606 	br	2009296c <__flash_rwdata_start+0xffff3d98>
20092a94:	01000504 	movi	r4,20
20092a98:	20c01436 	bltu	r4,r3,20092aec <_free_r+0x29c>
20092a9c:	194016c4 	addi	r5,r3,91
20092aa0:	2947883a 	add	r3,r5,r5
20092aa4:	003fbe06 	br	200929a0 <__flash_rwdata_start+0xffff3dcc>
20092aa8:	280bd0ba 	srai	r5,r5,2
20092aac:	00800044 	movi	r2,1
20092ab0:	39000117 	ldw	r4,4(r7)
20092ab4:	114a983a 	sll	r5,r2,r5
20092ab8:	1805883a 	mov	r2,r3
20092abc:	2908b03a 	or	r4,r5,r4
20092ac0:	39000115 	stw	r4,4(r7)
20092ac4:	003fc406 	br	200929d8 <__flash_rwdata_start+0xffff3e04>
20092ac8:	49800515 	stw	r6,20(r9)
20092acc:	49800415 	stw	r6,16(r9)
20092ad0:	10c00054 	ori	r3,r2,1
20092ad4:	31000315 	stw	r4,12(r6)
20092ad8:	31000215 	stw	r4,8(r6)
20092adc:	30c00115 	stw	r3,4(r6)
20092ae0:	308d883a 	add	r6,r6,r2
20092ae4:	30800015 	stw	r2,0(r6)
20092ae8:	003fa006 	br	2009296c <__flash_rwdata_start+0xffff3d98>
20092aec:	01001504 	movi	r4,84
20092af0:	20c00436 	bltu	r4,r3,20092b04 <_free_r+0x2b4>
20092af4:	1006d33a 	srli	r3,r2,12
20092af8:	19401b84 	addi	r5,r3,110
20092afc:	2947883a 	add	r3,r5,r5
20092b00:	003fa706 	br	200929a0 <__flash_rwdata_start+0xffff3dcc>
20092b04:	01005504 	movi	r4,340
20092b08:	20c00436 	bltu	r4,r3,20092b1c <_free_r+0x2cc>
20092b0c:	1006d3fa 	srli	r3,r2,15
20092b10:	19401dc4 	addi	r5,r3,119
20092b14:	2947883a 	add	r3,r5,r5
20092b18:	003fa106 	br	200929a0 <__flash_rwdata_start+0xffff3dcc>
20092b1c:	01015504 	movi	r4,1364
20092b20:	20c00436 	bltu	r4,r3,20092b34 <_free_r+0x2e4>
20092b24:	1006d4ba 	srli	r3,r2,18
20092b28:	19401f04 	addi	r5,r3,124
20092b2c:	2947883a 	add	r3,r5,r5
20092b30:	003f9b06 	br	200929a0 <__flash_rwdata_start+0xffff3dcc>
20092b34:	00c03f04 	movi	r3,252
20092b38:	01401f84 	movi	r5,126
20092b3c:	003f9806 	br	200929a0 <__flash_rwdata_start+0xffff3dcc>

20092b40 <__sfvwrite_r>:
20092b40:	30800217 	ldw	r2,8(r6)
20092b44:	10006726 	beq	r2,zero,20092ce4 <__sfvwrite_r+0x1a4>
20092b48:	defff404 	addi	sp,sp,-48
20092b4c:	dd000615 	stw	r20,24(sp)
20092b50:	2029883a 	mov	r20,r4
20092b54:	2900030b 	ldhu	r4,12(r5)
20092b58:	ddc00915 	stw	r23,36(sp)
20092b5c:	dc000215 	stw	r16,8(sp)
20092b60:	dfc00b15 	stw	ra,44(sp)
20092b64:	df000a15 	stw	fp,40(sp)
20092b68:	dd800815 	stw	r22,32(sp)
20092b6c:	dd400715 	stw	r21,28(sp)
20092b70:	dcc00515 	stw	r19,20(sp)
20092b74:	dc800415 	stw	r18,16(sp)
20092b78:	dc400315 	stw	r17,12(sp)
20092b7c:	2080020c 	andi	r2,r4,8
20092b80:	2821883a 	mov	r16,r5
20092b84:	302f883a 	mov	r23,r6
20092b88:	10002726 	beq	r2,zero,20092c28 <__sfvwrite_r+0xe8>
20092b8c:	28800417 	ldw	r2,16(r5)
20092b90:	10002526 	beq	r2,zero,20092c28 <__sfvwrite_r+0xe8>
20092b94:	2080008c 	andi	r2,r4,2
20092b98:	bc400017 	ldw	r17,0(r23)
20092b9c:	10002a26 	beq	r2,zero,20092c48 <__sfvwrite_r+0x108>
20092ba0:	05600034 	movhi	r21,32768
20092ba4:	0027883a 	mov	r19,zero
20092ba8:	0025883a 	mov	r18,zero
20092bac:	ad7f0004 	addi	r21,r21,-1024
20092bb0:	980d883a 	mov	r6,r19
20092bb4:	a009883a 	mov	r4,r20
20092bb8:	90004626 	beq	r18,zero,20092cd4 <__sfvwrite_r+0x194>
20092bbc:	900f883a 	mov	r7,r18
20092bc0:	81400717 	ldw	r5,28(r16)
20092bc4:	ac80022e 	bgeu	r21,r18,20092bd0 <__sfvwrite_r+0x90>
20092bc8:	01e00034 	movhi	r7,32768
20092bcc:	39ff0004 	addi	r7,r7,-1024
20092bd0:	80800917 	ldw	r2,36(r16)
20092bd4:	103ee83a 	callr	r2
20092bd8:	0080520e 	bge	zero,r2,20092d24 <__sfvwrite_r+0x1e4>
20092bdc:	b8c00217 	ldw	r3,8(r23)
20092be0:	98a7883a 	add	r19,r19,r2
20092be4:	90a5c83a 	sub	r18,r18,r2
20092be8:	1885c83a 	sub	r2,r3,r2
20092bec:	b8800215 	stw	r2,8(r23)
20092bf0:	103fef1e 	bne	r2,zero,20092bb0 <__flash_rwdata_start+0xffff3fdc>
20092bf4:	0005883a 	mov	r2,zero
20092bf8:	dfc00b17 	ldw	ra,44(sp)
20092bfc:	df000a17 	ldw	fp,40(sp)
20092c00:	ddc00917 	ldw	r23,36(sp)
20092c04:	dd800817 	ldw	r22,32(sp)
20092c08:	dd400717 	ldw	r21,28(sp)
20092c0c:	dd000617 	ldw	r20,24(sp)
20092c10:	dcc00517 	ldw	r19,20(sp)
20092c14:	dc800417 	ldw	r18,16(sp)
20092c18:	dc400317 	ldw	r17,12(sp)
20092c1c:	dc000217 	ldw	r16,8(sp)
20092c20:	dec00c04 	addi	sp,sp,48
20092c24:	f800283a 	ret
20092c28:	a009883a 	mov	r4,r20
20092c2c:	800b883a 	mov	r5,r16
20092c30:	00904e80 	call	200904e8 <__swsetup_r>
20092c34:	1000ec1e 	bne	r2,zero,20092fe8 <__sfvwrite_r+0x4a8>
20092c38:	8100030b 	ldhu	r4,12(r16)
20092c3c:	bc400017 	ldw	r17,0(r23)
20092c40:	2080008c 	andi	r2,r4,2
20092c44:	103fd61e 	bne	r2,zero,20092ba0 <__flash_rwdata_start+0xffff3fcc>
20092c48:	2080004c 	andi	r2,r4,1
20092c4c:	10003a1e 	bne	r2,zero,20092d38 <__sfvwrite_r+0x1f8>
20092c50:	0039883a 	mov	fp,zero
20092c54:	0025883a 	mov	r18,zero
20092c58:	90001a26 	beq	r18,zero,20092cc4 <__sfvwrite_r+0x184>
20092c5c:	2080800c 	andi	r2,r4,512
20092c60:	85800217 	ldw	r22,8(r16)
20092c64:	10007626 	beq	r2,zero,20092e40 <__sfvwrite_r+0x300>
20092c68:	b027883a 	mov	r19,r22
20092c6c:	95809436 	bltu	r18,r22,20092ec0 <__sfvwrite_r+0x380>
20092c70:	2081200c 	andi	r2,r4,1152
20092c74:	10009f1e 	bne	r2,zero,20092ef4 <__sfvwrite_r+0x3b4>
20092c78:	81000017 	ldw	r4,0(r16)
20092c7c:	e00b883a 	mov	r5,fp
20092c80:	980d883a 	mov	r6,r19
20092c84:	00935080 	call	20093508 <memmove>
20092c88:	81000217 	ldw	r4,8(r16)
20092c8c:	81400017 	ldw	r5,0(r16)
20092c90:	9005883a 	mov	r2,r18
20092c94:	2587c83a 	sub	r3,r4,r22
20092c98:	2ce7883a 	add	r19,r5,r19
20092c9c:	80c00215 	stw	r3,8(r16)
20092ca0:	84c00015 	stw	r19,0(r16)
20092ca4:	b8c00217 	ldw	r3,8(r23)
20092ca8:	e0b9883a 	add	fp,fp,r2
20092cac:	90a5c83a 	sub	r18,r18,r2
20092cb0:	1885c83a 	sub	r2,r3,r2
20092cb4:	b8800215 	stw	r2,8(r23)
20092cb8:	103fce26 	beq	r2,zero,20092bf4 <__flash_rwdata_start+0xffff4020>
20092cbc:	8100030b 	ldhu	r4,12(r16)
20092cc0:	903fe61e 	bne	r18,zero,20092c5c <__flash_rwdata_start+0xffff4088>
20092cc4:	8f000017 	ldw	fp,0(r17)
20092cc8:	8c800117 	ldw	r18,4(r17)
20092ccc:	8c400204 	addi	r17,r17,8
20092cd0:	003fe106 	br	20092c58 <__flash_rwdata_start+0xffff4084>
20092cd4:	8cc00017 	ldw	r19,0(r17)
20092cd8:	8c800117 	ldw	r18,4(r17)
20092cdc:	8c400204 	addi	r17,r17,8
20092ce0:	003fb306 	br	20092bb0 <__flash_rwdata_start+0xffff3fdc>
20092ce4:	0005883a 	mov	r2,zero
20092ce8:	f800283a 	ret
20092cec:	00a00034 	movhi	r2,32768
20092cf0:	10bfffc4 	addi	r2,r2,-1
20092cf4:	9009883a 	mov	r4,r18
20092cf8:	1480012e 	bgeu	r2,r18,20092d00 <__sfvwrite_r+0x1c0>
20092cfc:	1009883a 	mov	r4,r2
20092d00:	980b883a 	mov	r5,r19
20092d04:	00889c40 	call	200889c4 <__divsi3>
20092d08:	81400717 	ldw	r5,28(r16)
20092d0c:	80c00917 	ldw	r3,36(r16)
20092d10:	988f383a 	mul	r7,r19,r2
20092d14:	a009883a 	mov	r4,r20
20092d18:	e00d883a 	mov	r6,fp
20092d1c:	183ee83a 	callr	r3
20092d20:	00bfe016 	blt	zero,r2,20092ca4 <__flash_rwdata_start+0xffff40d0>
20092d24:	8080030b 	ldhu	r2,12(r16)
20092d28:	10801014 	ori	r2,r2,64
20092d2c:	8080030d 	sth	r2,12(r16)
20092d30:	00bfffc4 	movi	r2,-1
20092d34:	003fb006 	br	20092bf8 <__flash_rwdata_start+0xffff4024>
20092d38:	0027883a 	mov	r19,zero
20092d3c:	0011883a 	mov	r8,zero
20092d40:	0039883a 	mov	fp,zero
20092d44:	0025883a 	mov	r18,zero
20092d48:	90001f26 	beq	r18,zero,20092dc8 <__sfvwrite_r+0x288>
20092d4c:	40006026 	beq	r8,zero,20092ed0 <__sfvwrite_r+0x390>
20092d50:	982b883a 	mov	r21,r19
20092d54:	94c0012e 	bgeu	r18,r19,20092d5c <__sfvwrite_r+0x21c>
20092d58:	902b883a 	mov	r21,r18
20092d5c:	81000017 	ldw	r4,0(r16)
20092d60:	80800417 	ldw	r2,16(r16)
20092d64:	a82d883a 	mov	r22,r21
20092d68:	81800217 	ldw	r6,8(r16)
20092d6c:	81c00517 	ldw	r7,20(r16)
20092d70:	1100022e 	bgeu	r2,r4,20092d7c <__sfvwrite_r+0x23c>
20092d74:	31c7883a 	add	r3,r6,r7
20092d78:	1d401816 	blt	r3,r21,20092ddc <__sfvwrite_r+0x29c>
20092d7c:	a9c04416 	blt	r21,r7,20092e90 <__sfvwrite_r+0x350>
20092d80:	80800917 	ldw	r2,36(r16)
20092d84:	81400717 	ldw	r5,28(r16)
20092d88:	a009883a 	mov	r4,r20
20092d8c:	da000115 	stw	r8,4(sp)
20092d90:	e00d883a 	mov	r6,fp
20092d94:	103ee83a 	callr	r2
20092d98:	102d883a 	mov	r22,r2
20092d9c:	da000117 	ldw	r8,4(sp)
20092da0:	00bfe00e 	bge	zero,r2,20092d24 <__flash_rwdata_start+0xffff4150>
20092da4:	9da7c83a 	sub	r19,r19,r22
20092da8:	98001f26 	beq	r19,zero,20092e28 <__sfvwrite_r+0x2e8>
20092dac:	b8800217 	ldw	r2,8(r23)
20092db0:	e5b9883a 	add	fp,fp,r22
20092db4:	95a5c83a 	sub	r18,r18,r22
20092db8:	15adc83a 	sub	r22,r2,r22
20092dbc:	bd800215 	stw	r22,8(r23)
20092dc0:	b03f8c26 	beq	r22,zero,20092bf4 <__flash_rwdata_start+0xffff4020>
20092dc4:	903fe11e 	bne	r18,zero,20092d4c <__flash_rwdata_start+0xffff4178>
20092dc8:	8f000017 	ldw	fp,0(r17)
20092dcc:	8c800117 	ldw	r18,4(r17)
20092dd0:	0011883a 	mov	r8,zero
20092dd4:	8c400204 	addi	r17,r17,8
20092dd8:	003fdb06 	br	20092d48 <__flash_rwdata_start+0xffff4174>
20092ddc:	180d883a 	mov	r6,r3
20092de0:	e00b883a 	mov	r5,fp
20092de4:	da000115 	stw	r8,4(sp)
20092de8:	d8c00015 	stw	r3,0(sp)
20092dec:	00935080 	call	20093508 <memmove>
20092df0:	d8c00017 	ldw	r3,0(sp)
20092df4:	80800017 	ldw	r2,0(r16)
20092df8:	a009883a 	mov	r4,r20
20092dfc:	800b883a 	mov	r5,r16
20092e00:	10c5883a 	add	r2,r2,r3
20092e04:	80800015 	stw	r2,0(r16)
20092e08:	d8c00015 	stw	r3,0(sp)
20092e0c:	00923000 	call	20092300 <_fflush_r>
20092e10:	d8c00017 	ldw	r3,0(sp)
20092e14:	da000117 	ldw	r8,4(sp)
20092e18:	103fc21e 	bne	r2,zero,20092d24 <__flash_rwdata_start+0xffff4150>
20092e1c:	182d883a 	mov	r22,r3
20092e20:	9da7c83a 	sub	r19,r19,r22
20092e24:	983fe11e 	bne	r19,zero,20092dac <__flash_rwdata_start+0xffff41d8>
20092e28:	a009883a 	mov	r4,r20
20092e2c:	800b883a 	mov	r5,r16
20092e30:	00923000 	call	20092300 <_fflush_r>
20092e34:	103fbb1e 	bne	r2,zero,20092d24 <__flash_rwdata_start+0xffff4150>
20092e38:	0011883a 	mov	r8,zero
20092e3c:	003fdb06 	br	20092dac <__flash_rwdata_start+0xffff41d8>
20092e40:	81000017 	ldw	r4,0(r16)
20092e44:	80800417 	ldw	r2,16(r16)
20092e48:	11000236 	bltu	r2,r4,20092e54 <__sfvwrite_r+0x314>
20092e4c:	84c00517 	ldw	r19,20(r16)
20092e50:	94ffa62e 	bgeu	r18,r19,20092cec <__flash_rwdata_start+0xffff4118>
20092e54:	9027883a 	mov	r19,r18
20092e58:	b480012e 	bgeu	r22,r18,20092e60 <__sfvwrite_r+0x320>
20092e5c:	b027883a 	mov	r19,r22
20092e60:	e00b883a 	mov	r5,fp
20092e64:	980d883a 	mov	r6,r19
20092e68:	00935080 	call	20093508 <memmove>
20092e6c:	80800217 	ldw	r2,8(r16)
20092e70:	80c00017 	ldw	r3,0(r16)
20092e74:	14c5c83a 	sub	r2,r2,r19
20092e78:	1cc7883a 	add	r3,r3,r19
20092e7c:	80800215 	stw	r2,8(r16)
20092e80:	80c00015 	stw	r3,0(r16)
20092e84:	10004326 	beq	r2,zero,20092f94 <__sfvwrite_r+0x454>
20092e88:	9805883a 	mov	r2,r19
20092e8c:	003f8506 	br	20092ca4 <__flash_rwdata_start+0xffff40d0>
20092e90:	a80d883a 	mov	r6,r21
20092e94:	e00b883a 	mov	r5,fp
20092e98:	da000115 	stw	r8,4(sp)
20092e9c:	00935080 	call	20093508 <memmove>
20092ea0:	80800217 	ldw	r2,8(r16)
20092ea4:	80c00017 	ldw	r3,0(r16)
20092ea8:	da000117 	ldw	r8,4(sp)
20092eac:	1545c83a 	sub	r2,r2,r21
20092eb0:	1d6b883a 	add	r21,r3,r21
20092eb4:	80800215 	stw	r2,8(r16)
20092eb8:	85400015 	stw	r21,0(r16)
20092ebc:	003fb906 	br	20092da4 <__flash_rwdata_start+0xffff41d0>
20092ec0:	81000017 	ldw	r4,0(r16)
20092ec4:	902d883a 	mov	r22,r18
20092ec8:	9027883a 	mov	r19,r18
20092ecc:	003f6b06 	br	20092c7c <__flash_rwdata_start+0xffff40a8>
20092ed0:	e009883a 	mov	r4,fp
20092ed4:	01400284 	movi	r5,10
20092ed8:	900d883a 	mov	r6,r18
20092edc:	00934200 	call	20093420 <memchr>
20092ee0:	10003e26 	beq	r2,zero,20092fdc <__sfvwrite_r+0x49c>
20092ee4:	10800044 	addi	r2,r2,1
20092ee8:	1727c83a 	sub	r19,r2,fp
20092eec:	02000044 	movi	r8,1
20092ef0:	003f9706 	br	20092d50 <__flash_rwdata_start+0xffff417c>
20092ef4:	80800517 	ldw	r2,20(r16)
20092ef8:	81400417 	ldw	r5,16(r16)
20092efc:	80c00017 	ldw	r3,0(r16)
20092f00:	10a7883a 	add	r19,r2,r2
20092f04:	9885883a 	add	r2,r19,r2
20092f08:	1026d7fa 	srli	r19,r2,31
20092f0c:	196bc83a 	sub	r21,r3,r5
20092f10:	a9800044 	addi	r6,r21,1
20092f14:	9885883a 	add	r2,r19,r2
20092f18:	1027d07a 	srai	r19,r2,1
20092f1c:	3485883a 	add	r2,r6,r18
20092f20:	980d883a 	mov	r6,r19
20092f24:	9880022e 	bgeu	r19,r2,20092f30 <__sfvwrite_r+0x3f0>
20092f28:	1027883a 	mov	r19,r2
20092f2c:	100d883a 	mov	r6,r2
20092f30:	2101000c 	andi	r4,r4,1024
20092f34:	20001c26 	beq	r4,zero,20092fa8 <__sfvwrite_r+0x468>
20092f38:	a009883a 	mov	r4,r20
20092f3c:	300b883a 	mov	r5,r6
20092f40:	008b5780 	call	2008b578 <_malloc_r>
20092f44:	102d883a 	mov	r22,r2
20092f48:	10002926 	beq	r2,zero,20092ff0 <__sfvwrite_r+0x4b0>
20092f4c:	81400417 	ldw	r5,16(r16)
20092f50:	1009883a 	mov	r4,r2
20092f54:	a80d883a 	mov	r6,r21
20092f58:	008bd9c0 	call	2008bd9c <memcpy>
20092f5c:	8080030b 	ldhu	r2,12(r16)
20092f60:	00fedfc4 	movi	r3,-1153
20092f64:	10c4703a 	and	r2,r2,r3
20092f68:	10802014 	ori	r2,r2,128
20092f6c:	8080030d 	sth	r2,12(r16)
20092f70:	b549883a 	add	r4,r22,r21
20092f74:	9d4bc83a 	sub	r5,r19,r21
20092f78:	85800415 	stw	r22,16(r16)
20092f7c:	84c00515 	stw	r19,20(r16)
20092f80:	81000015 	stw	r4,0(r16)
20092f84:	902d883a 	mov	r22,r18
20092f88:	81400215 	stw	r5,8(r16)
20092f8c:	9027883a 	mov	r19,r18
20092f90:	003f3a06 	br	20092c7c <__flash_rwdata_start+0xffff40a8>
20092f94:	a009883a 	mov	r4,r20
20092f98:	800b883a 	mov	r5,r16
20092f9c:	00923000 	call	20092300 <_fflush_r>
20092fa0:	103fb926 	beq	r2,zero,20092e88 <__flash_rwdata_start+0xffff42b4>
20092fa4:	003f5f06 	br	20092d24 <__flash_rwdata_start+0xffff4150>
20092fa8:	a009883a 	mov	r4,r20
20092fac:	00947700 	call	20094770 <_realloc_r>
20092fb0:	102d883a 	mov	r22,r2
20092fb4:	103fee1e 	bne	r2,zero,20092f70 <__flash_rwdata_start+0xffff439c>
20092fb8:	81400417 	ldw	r5,16(r16)
20092fbc:	a009883a 	mov	r4,r20
20092fc0:	00928500 	call	20092850 <_free_r>
20092fc4:	8080030b 	ldhu	r2,12(r16)
20092fc8:	00ffdfc4 	movi	r3,-129
20092fcc:	1884703a 	and	r2,r3,r2
20092fd0:	00c00304 	movi	r3,12
20092fd4:	a0c00015 	stw	r3,0(r20)
20092fd8:	003f5306 	br	20092d28 <__flash_rwdata_start+0xffff4154>
20092fdc:	94c00044 	addi	r19,r18,1
20092fe0:	02000044 	movi	r8,1
20092fe4:	003f5a06 	br	20092d50 <__flash_rwdata_start+0xffff417c>
20092fe8:	00bfffc4 	movi	r2,-1
20092fec:	003f0206 	br	20092bf8 <__flash_rwdata_start+0xffff4024>
20092ff0:	00800304 	movi	r2,12
20092ff4:	a0800015 	stw	r2,0(r20)
20092ff8:	8080030b 	ldhu	r2,12(r16)
20092ffc:	003f4a06 	br	20092d28 <__flash_rwdata_start+0xffff4154>

20093000 <_fwalk>:
20093000:	defff704 	addi	sp,sp,-36
20093004:	dd000415 	stw	r20,16(sp)
20093008:	dfc00815 	stw	ra,32(sp)
2009300c:	ddc00715 	stw	r23,28(sp)
20093010:	dd800615 	stw	r22,24(sp)
20093014:	dd400515 	stw	r21,20(sp)
20093018:	dcc00315 	stw	r19,12(sp)
2009301c:	dc800215 	stw	r18,8(sp)
20093020:	dc400115 	stw	r17,4(sp)
20093024:	dc000015 	stw	r16,0(sp)
20093028:	2500b804 	addi	r20,r4,736
2009302c:	a0002326 	beq	r20,zero,200930bc <_fwalk+0xbc>
20093030:	282b883a 	mov	r21,r5
20093034:	002f883a 	mov	r23,zero
20093038:	05800044 	movi	r22,1
2009303c:	04ffffc4 	movi	r19,-1
20093040:	a4400117 	ldw	r17,4(r20)
20093044:	a4800217 	ldw	r18,8(r20)
20093048:	8c7fffc4 	addi	r17,r17,-1
2009304c:	88000d16 	blt	r17,zero,20093084 <_fwalk+0x84>
20093050:	94000304 	addi	r16,r18,12
20093054:	94800384 	addi	r18,r18,14
20093058:	80c0000b 	ldhu	r3,0(r16)
2009305c:	8c7fffc4 	addi	r17,r17,-1
20093060:	813ffd04 	addi	r4,r16,-12
20093064:	b0c0042e 	bgeu	r22,r3,20093078 <_fwalk+0x78>
20093068:	90c0000f 	ldh	r3,0(r18)
2009306c:	1cc00226 	beq	r3,r19,20093078 <_fwalk+0x78>
20093070:	a83ee83a 	callr	r21
20093074:	b8aeb03a 	or	r23,r23,r2
20093078:	84001a04 	addi	r16,r16,104
2009307c:	94801a04 	addi	r18,r18,104
20093080:	8cfff51e 	bne	r17,r19,20093058 <__flash_rwdata_start+0xffff4484>
20093084:	a5000017 	ldw	r20,0(r20)
20093088:	a03fed1e 	bne	r20,zero,20093040 <__flash_rwdata_start+0xffff446c>
2009308c:	b805883a 	mov	r2,r23
20093090:	dfc00817 	ldw	ra,32(sp)
20093094:	ddc00717 	ldw	r23,28(sp)
20093098:	dd800617 	ldw	r22,24(sp)
2009309c:	dd400517 	ldw	r21,20(sp)
200930a0:	dd000417 	ldw	r20,16(sp)
200930a4:	dcc00317 	ldw	r19,12(sp)
200930a8:	dc800217 	ldw	r18,8(sp)
200930ac:	dc400117 	ldw	r17,4(sp)
200930b0:	dc000017 	ldw	r16,0(sp)
200930b4:	dec00904 	addi	sp,sp,36
200930b8:	f800283a 	ret
200930bc:	002f883a 	mov	r23,zero
200930c0:	003ff206 	br	2009308c <__flash_rwdata_start+0xffff44b8>

200930c4 <_fwalk_reent>:
200930c4:	defff704 	addi	sp,sp,-36
200930c8:	dd400515 	stw	r21,20(sp)
200930cc:	dfc00815 	stw	ra,32(sp)
200930d0:	ddc00715 	stw	r23,28(sp)
200930d4:	dd800615 	stw	r22,24(sp)
200930d8:	dd000415 	stw	r20,16(sp)
200930dc:	dcc00315 	stw	r19,12(sp)
200930e0:	dc800215 	stw	r18,8(sp)
200930e4:	dc400115 	stw	r17,4(sp)
200930e8:	dc000015 	stw	r16,0(sp)
200930ec:	2540b804 	addi	r21,r4,736
200930f0:	a8002326 	beq	r21,zero,20093180 <_fwalk_reent+0xbc>
200930f4:	2829883a 	mov	r20,r5
200930f8:	202d883a 	mov	r22,r4
200930fc:	002f883a 	mov	r23,zero
20093100:	04c00044 	movi	r19,1
20093104:	04bfffc4 	movi	r18,-1
20093108:	ac400117 	ldw	r17,4(r21)
2009310c:	ac000217 	ldw	r16,8(r21)
20093110:	8c7fffc4 	addi	r17,r17,-1
20093114:	88000c16 	blt	r17,zero,20093148 <_fwalk_reent+0x84>
20093118:	84000304 	addi	r16,r16,12
2009311c:	80c0000b 	ldhu	r3,0(r16)
20093120:	8c7fffc4 	addi	r17,r17,-1
20093124:	817ffd04 	addi	r5,r16,-12
20093128:	98c0052e 	bgeu	r19,r3,20093140 <_fwalk_reent+0x7c>
2009312c:	80c0008f 	ldh	r3,2(r16)
20093130:	b009883a 	mov	r4,r22
20093134:	1c800226 	beq	r3,r18,20093140 <_fwalk_reent+0x7c>
20093138:	a03ee83a 	callr	r20
2009313c:	b8aeb03a 	or	r23,r23,r2
20093140:	84001a04 	addi	r16,r16,104
20093144:	8cbff51e 	bne	r17,r18,2009311c <__flash_rwdata_start+0xffff4548>
20093148:	ad400017 	ldw	r21,0(r21)
2009314c:	a83fee1e 	bne	r21,zero,20093108 <__flash_rwdata_start+0xffff4534>
20093150:	b805883a 	mov	r2,r23
20093154:	dfc00817 	ldw	ra,32(sp)
20093158:	ddc00717 	ldw	r23,28(sp)
2009315c:	dd800617 	ldw	r22,24(sp)
20093160:	dd400517 	ldw	r21,20(sp)
20093164:	dd000417 	ldw	r20,16(sp)
20093168:	dcc00317 	ldw	r19,12(sp)
2009316c:	dc800217 	ldw	r18,8(sp)
20093170:	dc400117 	ldw	r17,4(sp)
20093174:	dc000017 	ldw	r16,0(sp)
20093178:	dec00904 	addi	sp,sp,36
2009317c:	f800283a 	ret
20093180:	002f883a 	mov	r23,zero
20093184:	003ff206 	br	20093150 <__flash_rwdata_start+0xffff457c>

20093188 <_setlocale_r>:
20093188:	30001b26 	beq	r6,zero,200931f8 <_setlocale_r+0x70>
2009318c:	01400034 	movhi	r5,0
20093190:	defffe04 	addi	sp,sp,-8
20093194:	2941b004 	addi	r5,r5,1728
20093198:	3009883a 	mov	r4,r6
2009319c:	dc000015 	stw	r16,0(sp)
200931a0:	dfc00115 	stw	ra,4(sp)
200931a4:	3021883a 	mov	r16,r6
200931a8:	008c2540 	call	2008c254 <strcmp>
200931ac:	1000061e 	bne	r2,zero,200931c8 <_setlocale_r+0x40>
200931b0:	00800034 	movhi	r2,0
200931b4:	10818904 	addi	r2,r2,1572
200931b8:	dfc00117 	ldw	ra,4(sp)
200931bc:	dc000017 	ldw	r16,0(sp)
200931c0:	dec00204 	addi	sp,sp,8
200931c4:	f800283a 	ret
200931c8:	01400034 	movhi	r5,0
200931cc:	29418904 	addi	r5,r5,1572
200931d0:	8009883a 	mov	r4,r16
200931d4:	008c2540 	call	2008c254 <strcmp>
200931d8:	103ff526 	beq	r2,zero,200931b0 <__flash_rwdata_start+0xffff45dc>
200931dc:	01400034 	movhi	r5,0
200931e0:	29419304 	addi	r5,r5,1612
200931e4:	8009883a 	mov	r4,r16
200931e8:	008c2540 	call	2008c254 <strcmp>
200931ec:	103ff026 	beq	r2,zero,200931b0 <__flash_rwdata_start+0xffff45dc>
200931f0:	0005883a 	mov	r2,zero
200931f4:	003ff006 	br	200931b8 <__flash_rwdata_start+0xffff45e4>
200931f8:	00800034 	movhi	r2,0
200931fc:	10818904 	addi	r2,r2,1572
20093200:	f800283a 	ret

20093204 <__locale_charset>:
20093204:	00800034 	movhi	r2,0
20093208:	10854f04 	addi	r2,r2,5436
2009320c:	f800283a 	ret

20093210 <__locale_mb_cur_max>:
20093210:	00800034 	movhi	r2,0
20093214:	108a9504 	addi	r2,r2,10836
20093218:	10800017 	ldw	r2,0(r2)
2009321c:	f800283a 	ret

20093220 <__locale_msgcharset>:
20093220:	00800034 	movhi	r2,0
20093224:	10854704 	addi	r2,r2,5404
20093228:	f800283a 	ret

2009322c <__locale_cjk_lang>:
2009322c:	0005883a 	mov	r2,zero
20093230:	f800283a 	ret

20093234 <_localeconv_r>:
20093234:	00800034 	movhi	r2,0
20093238:	10855704 	addi	r2,r2,5468
2009323c:	f800283a 	ret

20093240 <setlocale>:
20093240:	00c00034 	movhi	r3,0
20093244:	18ca9204 	addi	r3,r3,10824
20093248:	2005883a 	mov	r2,r4
2009324c:	19000017 	ldw	r4,0(r3)
20093250:	280d883a 	mov	r6,r5
20093254:	100b883a 	mov	r5,r2
20093258:	00931881 	jmpi	20093188 <_setlocale_r>

2009325c <localeconv>:
2009325c:	00800034 	movhi	r2,0
20093260:	10855704 	addi	r2,r2,5468
20093264:	f800283a 	ret

20093268 <__smakebuf_r>:
20093268:	2880030b 	ldhu	r2,12(r5)
2009326c:	10c0008c 	andi	r3,r2,2
20093270:	1800401e 	bne	r3,zero,20093374 <__smakebuf_r+0x10c>
20093274:	deffec04 	addi	sp,sp,-80
20093278:	dc000f15 	stw	r16,60(sp)
2009327c:	2821883a 	mov	r16,r5
20093280:	2940038f 	ldh	r5,14(r5)
20093284:	dc401015 	stw	r17,64(sp)
20093288:	dfc01315 	stw	ra,76(sp)
2009328c:	dcc01215 	stw	r19,72(sp)
20093290:	dc801115 	stw	r18,68(sp)
20093294:	2023883a 	mov	r17,r4
20093298:	28001b16 	blt	r5,zero,20093308 <__smakebuf_r+0xa0>
2009329c:	d80d883a 	mov	r6,sp
200932a0:	0097c600 	call	20097c60 <_fstat_r>
200932a4:	10001716 	blt	r2,zero,20093304 <__smakebuf_r+0x9c>
200932a8:	d8800117 	ldw	r2,4(sp)
200932ac:	00e00014 	movui	r3,32768
200932b0:	10bc000c 	andi	r2,r2,61440
200932b4:	10c03726 	beq	r2,r3,20093394 <__smakebuf_r+0x12c>
200932b8:	80c0030b 	ldhu	r3,12(r16)
200932bc:	18c20014 	ori	r3,r3,2048
200932c0:	80c0030d 	sth	r3,12(r16)
200932c4:	00c80004 	movi	r3,8192
200932c8:	10c03c1e 	bne	r2,r3,200933bc <__smakebuf_r+0x154>
200932cc:	8140038f 	ldh	r5,14(r16)
200932d0:	8809883a 	mov	r4,r17
200932d4:	0097cb80 	call	20097cb8 <_isatty_r>
200932d8:	10004e26 	beq	r2,zero,20093414 <__smakebuf_r+0x1ac>
200932dc:	8080030b 	ldhu	r2,12(r16)
200932e0:	04c00044 	movi	r19,1
200932e4:	80c010c4 	addi	r3,r16,67
200932e8:	14c4b03a 	or	r2,r2,r19
200932ec:	8080030d 	sth	r2,12(r16)
200932f0:	80c00015 	stw	r3,0(r16)
200932f4:	80c00415 	stw	r3,16(r16)
200932f8:	84c00515 	stw	r19,20(r16)
200932fc:	04810004 	movi	r18,1024
20093300:	00000706 	br	20093320 <__smakebuf_r+0xb8>
20093304:	8080030b 	ldhu	r2,12(r16)
20093308:	10c0200c 	andi	r3,r2,128
2009330c:	18001f1e 	bne	r3,zero,2009338c <__smakebuf_r+0x124>
20093310:	04810004 	movi	r18,1024
20093314:	10820014 	ori	r2,r2,2048
20093318:	8080030d 	sth	r2,12(r16)
2009331c:	0027883a 	mov	r19,zero
20093320:	8809883a 	mov	r4,r17
20093324:	900b883a 	mov	r5,r18
20093328:	008b5780 	call	2008b578 <_malloc_r>
2009332c:	10002e26 	beq	r2,zero,200933e8 <__smakebuf_r+0x180>
20093330:	80c0030b 	ldhu	r3,12(r16)
20093334:	01080274 	movhi	r4,8201
20093338:	2108e704 	addi	r4,r4,9116
2009333c:	89000f15 	stw	r4,60(r17)
20093340:	18c02014 	ori	r3,r3,128
20093344:	80c0030d 	sth	r3,12(r16)
20093348:	80800015 	stw	r2,0(r16)
2009334c:	80800415 	stw	r2,16(r16)
20093350:	84800515 	stw	r18,20(r16)
20093354:	98001c1e 	bne	r19,zero,200933c8 <__smakebuf_r+0x160>
20093358:	dfc01317 	ldw	ra,76(sp)
2009335c:	dcc01217 	ldw	r19,72(sp)
20093360:	dc801117 	ldw	r18,68(sp)
20093364:	dc401017 	ldw	r17,64(sp)
20093368:	dc000f17 	ldw	r16,60(sp)
2009336c:	dec01404 	addi	sp,sp,80
20093370:	f800283a 	ret
20093374:	288010c4 	addi	r2,r5,67
20093378:	28800015 	stw	r2,0(r5)
2009337c:	28800415 	stw	r2,16(r5)
20093380:	00800044 	movi	r2,1
20093384:	28800515 	stw	r2,20(r5)
20093388:	f800283a 	ret
2009338c:	04801004 	movi	r18,64
20093390:	003fe006 	br	20093314 <__flash_rwdata_start+0xffff4740>
20093394:	81000a17 	ldw	r4,40(r16)
20093398:	00c80274 	movhi	r3,8201
2009339c:	18d38904 	addi	r3,r3,20004
200933a0:	20ffc51e 	bne	r4,r3,200932b8 <__flash_rwdata_start+0xffff46e4>
200933a4:	80c0030b 	ldhu	r3,12(r16)
200933a8:	01010004 	movi	r4,1024
200933ac:	81001315 	stw	r4,76(r16)
200933b0:	1906b03a 	or	r3,r3,r4
200933b4:	80c0030d 	sth	r3,12(r16)
200933b8:	003fc206 	br	200932c4 <__flash_rwdata_start+0xffff46f0>
200933bc:	0027883a 	mov	r19,zero
200933c0:	04810004 	movi	r18,1024
200933c4:	003fd606 	br	20093320 <__flash_rwdata_start+0xffff474c>
200933c8:	8140038f 	ldh	r5,14(r16)
200933cc:	8809883a 	mov	r4,r17
200933d0:	0097cb80 	call	20097cb8 <_isatty_r>
200933d4:	103fe026 	beq	r2,zero,20093358 <__flash_rwdata_start+0xffff4784>
200933d8:	8080030b 	ldhu	r2,12(r16)
200933dc:	10800054 	ori	r2,r2,1
200933e0:	8080030d 	sth	r2,12(r16)
200933e4:	003fdc06 	br	20093358 <__flash_rwdata_start+0xffff4784>
200933e8:	8080030b 	ldhu	r2,12(r16)
200933ec:	10c0800c 	andi	r3,r2,512
200933f0:	183fd91e 	bne	r3,zero,20093358 <__flash_rwdata_start+0xffff4784>
200933f4:	10800094 	ori	r2,r2,2
200933f8:	80c010c4 	addi	r3,r16,67
200933fc:	8080030d 	sth	r2,12(r16)
20093400:	00800044 	movi	r2,1
20093404:	80c00015 	stw	r3,0(r16)
20093408:	80c00415 	stw	r3,16(r16)
2009340c:	80800515 	stw	r2,20(r16)
20093410:	003fd106 	br	20093358 <__flash_rwdata_start+0xffff4784>
20093414:	04c00044 	movi	r19,1
20093418:	04810004 	movi	r18,1024
2009341c:	003fc006 	br	20093320 <__flash_rwdata_start+0xffff474c>

20093420 <memchr>:
20093420:	208000cc 	andi	r2,r4,3
20093424:	280f883a 	mov	r7,r5
20093428:	10003526 	beq	r2,zero,20093500 <memchr+0xe0>
2009342c:	30bfffc4 	addi	r2,r6,-1
20093430:	30001b26 	beq	r6,zero,200934a0 <memchr+0x80>
20093434:	21800003 	ldbu	r6,0(r4)
20093438:	28c03fcc 	andi	r3,r5,255
2009343c:	30c01a26 	beq	r6,r3,200934a8 <memchr+0x88>
20093440:	180d883a 	mov	r6,r3
20093444:	00000406 	br	20093458 <memchr+0x38>
20093448:	10001526 	beq	r2,zero,200934a0 <memchr+0x80>
2009344c:	20c00003 	ldbu	r3,0(r4)
20093450:	10bfffc4 	addi	r2,r2,-1
20093454:	19801426 	beq	r3,r6,200934a8 <memchr+0x88>
20093458:	21000044 	addi	r4,r4,1
2009345c:	20c000cc 	andi	r3,r4,3
20093460:	183ff91e 	bne	r3,zero,20093448 <__flash_rwdata_start+0xffff4874>
20093464:	024000c4 	movi	r9,3
20093468:	48801136 	bltu	r9,r2,200934b0 <memchr+0x90>
2009346c:	10000c26 	beq	r2,zero,200934a0 <memchr+0x80>
20093470:	20c00003 	ldbu	r3,0(r4)
20093474:	29403fcc 	andi	r5,r5,255
20093478:	19400b26 	beq	r3,r5,200934a8 <memchr+0x88>
2009347c:	20c00044 	addi	r3,r4,1
20093480:	2085883a 	add	r2,r4,r2
20093484:	39803fcc 	andi	r6,r7,255
20093488:	00000306 	br	20093498 <memchr+0x78>
2009348c:	18c00044 	addi	r3,r3,1
20093490:	197fffc3 	ldbu	r5,-1(r3)
20093494:	29800426 	beq	r5,r6,200934a8 <memchr+0x88>
20093498:	1809883a 	mov	r4,r3
2009349c:	18bffb1e 	bne	r3,r2,2009348c <__flash_rwdata_start+0xffff48b8>
200934a0:	0005883a 	mov	r2,zero
200934a4:	f800283a 	ret
200934a8:	2005883a 	mov	r2,r4
200934ac:	f800283a 	ret
200934b0:	28c03fcc 	andi	r3,r5,255
200934b4:	1810923a 	slli	r8,r3,8
200934b8:	02ffbff4 	movhi	r11,65279
200934bc:	02a02074 	movhi	r10,32897
200934c0:	40c6b03a 	or	r3,r8,r3
200934c4:	1810943a 	slli	r8,r3,16
200934c8:	5affbfc4 	addi	r11,r11,-257
200934cc:	52a02004 	addi	r10,r10,-32640
200934d0:	40d0b03a 	or	r8,r8,r3
200934d4:	20c00017 	ldw	r3,0(r4)
200934d8:	40c6f03a 	xor	r3,r8,r3
200934dc:	1acd883a 	add	r6,r3,r11
200934e0:	00c6303a 	nor	r3,zero,r3
200934e4:	30c6703a 	and	r3,r6,r3
200934e8:	1a86703a 	and	r3,r3,r10
200934ec:	183fdf1e 	bne	r3,zero,2009346c <__flash_rwdata_start+0xffff4898>
200934f0:	10bfff04 	addi	r2,r2,-4
200934f4:	21000104 	addi	r4,r4,4
200934f8:	48bff636 	bltu	r9,r2,200934d4 <__flash_rwdata_start+0xffff4900>
200934fc:	003fdb06 	br	2009346c <__flash_rwdata_start+0xffff4898>
20093500:	3005883a 	mov	r2,r6
20093504:	003fd706 	br	20093464 <__flash_rwdata_start+0xffff4890>

20093508 <memmove>:
20093508:	2005883a 	mov	r2,r4
2009350c:	29000b2e 	bgeu	r5,r4,2009353c <memmove+0x34>
20093510:	298f883a 	add	r7,r5,r6
20093514:	21c0092e 	bgeu	r4,r7,2009353c <memmove+0x34>
20093518:	2187883a 	add	r3,r4,r6
2009351c:	198bc83a 	sub	r5,r3,r6
20093520:	30004b26 	beq	r6,zero,20093650 <memmove+0x148>
20093524:	39ffffc4 	addi	r7,r7,-1
20093528:	39000003 	ldbu	r4,0(r7)
2009352c:	18ffffc4 	addi	r3,r3,-1
20093530:	19000005 	stb	r4,0(r3)
20093534:	197ffb1e 	bne	r3,r5,20093524 <__flash_rwdata_start+0xffff4950>
20093538:	f800283a 	ret
2009353c:	00c003c4 	movi	r3,15
20093540:	1980412e 	bgeu	r3,r6,20093648 <memmove+0x140>
20093544:	1146b03a 	or	r3,r2,r5
20093548:	18c000cc 	andi	r3,r3,3
2009354c:	1800411e 	bne	r3,zero,20093654 <memmove+0x14c>
20093550:	33fffc04 	addi	r15,r6,-16
20093554:	781ed13a 	srli	r15,r15,4
20093558:	28c00104 	addi	r3,r5,4
2009355c:	13400104 	addi	r13,r2,4
20093560:	781c913a 	slli	r14,r15,4
20093564:	2b000204 	addi	r12,r5,8
20093568:	12c00204 	addi	r11,r2,8
2009356c:	73800504 	addi	r14,r14,20
20093570:	2a800304 	addi	r10,r5,12
20093574:	12400304 	addi	r9,r2,12
20093578:	2b9d883a 	add	r14,r5,r14
2009357c:	2811883a 	mov	r8,r5
20093580:	100f883a 	mov	r7,r2
20093584:	41000017 	ldw	r4,0(r8)
20093588:	39c00404 	addi	r7,r7,16
2009358c:	18c00404 	addi	r3,r3,16
20093590:	393ffc15 	stw	r4,-16(r7)
20093594:	193ffc17 	ldw	r4,-16(r3)
20093598:	6b400404 	addi	r13,r13,16
2009359c:	5ac00404 	addi	r11,r11,16
200935a0:	693ffc15 	stw	r4,-16(r13)
200935a4:	61000017 	ldw	r4,0(r12)
200935a8:	4a400404 	addi	r9,r9,16
200935ac:	42000404 	addi	r8,r8,16
200935b0:	593ffc15 	stw	r4,-16(r11)
200935b4:	51000017 	ldw	r4,0(r10)
200935b8:	63000404 	addi	r12,r12,16
200935bc:	52800404 	addi	r10,r10,16
200935c0:	493ffc15 	stw	r4,-16(r9)
200935c4:	1bbfef1e 	bne	r3,r14,20093584 <__flash_rwdata_start+0xffff49b0>
200935c8:	79000044 	addi	r4,r15,1
200935cc:	2008913a 	slli	r4,r4,4
200935d0:	328003cc 	andi	r10,r6,15
200935d4:	02c000c4 	movi	r11,3
200935d8:	1107883a 	add	r3,r2,r4
200935dc:	290b883a 	add	r5,r5,r4
200935e0:	5a801e2e 	bgeu	r11,r10,2009365c <memmove+0x154>
200935e4:	1813883a 	mov	r9,r3
200935e8:	2811883a 	mov	r8,r5
200935ec:	500f883a 	mov	r7,r10
200935f0:	41000017 	ldw	r4,0(r8)
200935f4:	4a400104 	addi	r9,r9,4
200935f8:	39ffff04 	addi	r7,r7,-4
200935fc:	493fff15 	stw	r4,-4(r9)
20093600:	42000104 	addi	r8,r8,4
20093604:	59fffa36 	bltu	r11,r7,200935f0 <__flash_rwdata_start+0xffff4a1c>
20093608:	513fff04 	addi	r4,r10,-4
2009360c:	2008d0ba 	srli	r4,r4,2
20093610:	318000cc 	andi	r6,r6,3
20093614:	21000044 	addi	r4,r4,1
20093618:	2109883a 	add	r4,r4,r4
2009361c:	2109883a 	add	r4,r4,r4
20093620:	1907883a 	add	r3,r3,r4
20093624:	290b883a 	add	r5,r5,r4
20093628:	30000926 	beq	r6,zero,20093650 <memmove+0x148>
2009362c:	198d883a 	add	r6,r3,r6
20093630:	29c00003 	ldbu	r7,0(r5)
20093634:	18c00044 	addi	r3,r3,1
20093638:	29400044 	addi	r5,r5,1
2009363c:	19ffffc5 	stb	r7,-1(r3)
20093640:	19bffb1e 	bne	r3,r6,20093630 <__flash_rwdata_start+0xffff4a5c>
20093644:	f800283a 	ret
20093648:	1007883a 	mov	r3,r2
2009364c:	003ff606 	br	20093628 <__flash_rwdata_start+0xffff4a54>
20093650:	f800283a 	ret
20093654:	1007883a 	mov	r3,r2
20093658:	003ff406 	br	2009362c <__flash_rwdata_start+0xffff4a58>
2009365c:	500d883a 	mov	r6,r10
20093660:	003ff106 	br	20093628 <__flash_rwdata_start+0xffff4a54>

20093664 <_Balloc>:
20093664:	20801317 	ldw	r2,76(r4)
20093668:	defffc04 	addi	sp,sp,-16
2009366c:	dc400115 	stw	r17,4(sp)
20093670:	dc000015 	stw	r16,0(sp)
20093674:	dfc00315 	stw	ra,12(sp)
20093678:	dc800215 	stw	r18,8(sp)
2009367c:	2023883a 	mov	r17,r4
20093680:	2821883a 	mov	r16,r5
20093684:	10000f26 	beq	r2,zero,200936c4 <_Balloc+0x60>
20093688:	8407883a 	add	r3,r16,r16
2009368c:	18c7883a 	add	r3,r3,r3
20093690:	10c7883a 	add	r3,r2,r3
20093694:	18800017 	ldw	r2,0(r3)
20093698:	10001126 	beq	r2,zero,200936e0 <_Balloc+0x7c>
2009369c:	11000017 	ldw	r4,0(r2)
200936a0:	19000015 	stw	r4,0(r3)
200936a4:	10000415 	stw	zero,16(r2)
200936a8:	10000315 	stw	zero,12(r2)
200936ac:	dfc00317 	ldw	ra,12(sp)
200936b0:	dc800217 	ldw	r18,8(sp)
200936b4:	dc400117 	ldw	r17,4(sp)
200936b8:	dc000017 	ldw	r16,0(sp)
200936bc:	dec00404 	addi	sp,sp,16
200936c0:	f800283a 	ret
200936c4:	01400104 	movi	r5,4
200936c8:	01800844 	movi	r6,33
200936cc:	00978b80 	call	200978b8 <_calloc_r>
200936d0:	88801315 	stw	r2,76(r17)
200936d4:	103fec1e 	bne	r2,zero,20093688 <__flash_rwdata_start+0xffff4ab4>
200936d8:	0005883a 	mov	r2,zero
200936dc:	003ff306 	br	200936ac <__flash_rwdata_start+0xffff4ad8>
200936e0:	01400044 	movi	r5,1
200936e4:	2c24983a 	sll	r18,r5,r16
200936e8:	8809883a 	mov	r4,r17
200936ec:	91800144 	addi	r6,r18,5
200936f0:	318d883a 	add	r6,r6,r6
200936f4:	318d883a 	add	r6,r6,r6
200936f8:	00978b80 	call	200978b8 <_calloc_r>
200936fc:	103ff626 	beq	r2,zero,200936d8 <__flash_rwdata_start+0xffff4b04>
20093700:	14000115 	stw	r16,4(r2)
20093704:	14800215 	stw	r18,8(r2)
20093708:	003fe606 	br	200936a4 <__flash_rwdata_start+0xffff4ad0>

2009370c <_Bfree>:
2009370c:	28000826 	beq	r5,zero,20093730 <_Bfree+0x24>
20093710:	28c00117 	ldw	r3,4(r5)
20093714:	20801317 	ldw	r2,76(r4)
20093718:	18c7883a 	add	r3,r3,r3
2009371c:	18c7883a 	add	r3,r3,r3
20093720:	10c5883a 	add	r2,r2,r3
20093724:	10c00017 	ldw	r3,0(r2)
20093728:	28c00015 	stw	r3,0(r5)
2009372c:	11400015 	stw	r5,0(r2)
20093730:	f800283a 	ret

20093734 <__multadd>:
20093734:	defffa04 	addi	sp,sp,-24
20093738:	dc000115 	stw	r16,4(sp)
2009373c:	2c000417 	ldw	r16,16(r5)
20093740:	dc800315 	stw	r18,12(sp)
20093744:	dc400215 	stw	r17,8(sp)
20093748:	dfc00515 	stw	ra,20(sp)
2009374c:	dcc00415 	stw	r19,16(sp)
20093750:	2823883a 	mov	r17,r5
20093754:	2025883a 	mov	r18,r4
20093758:	2a400504 	addi	r9,r5,20
2009375c:	0015883a 	mov	r10,zero
20093760:	4a000017 	ldw	r8,0(r9)
20093764:	4a400104 	addi	r9,r9,4
20093768:	52800044 	addi	r10,r10,1
2009376c:	40ffffcc 	andi	r3,r8,65535
20093770:	1987383a 	mul	r3,r3,r6
20093774:	4010d43a 	srli	r8,r8,16
20093778:	19cf883a 	add	r7,r3,r7
2009377c:	4191383a 	mul	r8,r8,r6
20093780:	3816d43a 	srli	r11,r7,16
20093784:	38ffffcc 	andi	r3,r7,65535
20093788:	5a0f883a 	add	r7,r11,r8
2009378c:	3810943a 	slli	r8,r7,16
20093790:	380ed43a 	srli	r7,r7,16
20093794:	40c7883a 	add	r3,r8,r3
20093798:	48ffff15 	stw	r3,-4(r9)
2009379c:	543ff016 	blt	r10,r16,20093760 <__flash_rwdata_start+0xffff4b8c>
200937a0:	38000926 	beq	r7,zero,200937c8 <__multadd+0x94>
200937a4:	88800217 	ldw	r2,8(r17)
200937a8:	80800f0e 	bge	r16,r2,200937e8 <__multadd+0xb4>
200937ac:	80800144 	addi	r2,r16,5
200937b0:	1085883a 	add	r2,r2,r2
200937b4:	1085883a 	add	r2,r2,r2
200937b8:	8885883a 	add	r2,r17,r2
200937bc:	11c00015 	stw	r7,0(r2)
200937c0:	84000044 	addi	r16,r16,1
200937c4:	8c000415 	stw	r16,16(r17)
200937c8:	8805883a 	mov	r2,r17
200937cc:	dfc00517 	ldw	ra,20(sp)
200937d0:	dcc00417 	ldw	r19,16(sp)
200937d4:	dc800317 	ldw	r18,12(sp)
200937d8:	dc400217 	ldw	r17,8(sp)
200937dc:	dc000117 	ldw	r16,4(sp)
200937e0:	dec00604 	addi	sp,sp,24
200937e4:	f800283a 	ret
200937e8:	89400117 	ldw	r5,4(r17)
200937ec:	9009883a 	mov	r4,r18
200937f0:	d9c00015 	stw	r7,0(sp)
200937f4:	29400044 	addi	r5,r5,1
200937f8:	00936640 	call	20093664 <_Balloc>
200937fc:	89800417 	ldw	r6,16(r17)
20093800:	11000304 	addi	r4,r2,12
20093804:	89400304 	addi	r5,r17,12
20093808:	31800084 	addi	r6,r6,2
2009380c:	318d883a 	add	r6,r6,r6
20093810:	318d883a 	add	r6,r6,r6
20093814:	1027883a 	mov	r19,r2
20093818:	008bd9c0 	call	2008bd9c <memcpy>
2009381c:	d9c00017 	ldw	r7,0(sp)
20093820:	88000a26 	beq	r17,zero,2009384c <__multadd+0x118>
20093824:	89000117 	ldw	r4,4(r17)
20093828:	90c01317 	ldw	r3,76(r18)
2009382c:	2109883a 	add	r4,r4,r4
20093830:	2109883a 	add	r4,r4,r4
20093834:	1907883a 	add	r3,r3,r4
20093838:	18800017 	ldw	r2,0(r3)
2009383c:	88800015 	stw	r2,0(r17)
20093840:	1c400015 	stw	r17,0(r3)
20093844:	9823883a 	mov	r17,r19
20093848:	003fd806 	br	200937ac <__flash_rwdata_start+0xffff4bd8>
2009384c:	9823883a 	mov	r17,r19
20093850:	003fd606 	br	200937ac <__flash_rwdata_start+0xffff4bd8>

20093854 <__s2b>:
20093854:	defff904 	addi	sp,sp,-28
20093858:	dc400115 	stw	r17,4(sp)
2009385c:	dc000015 	stw	r16,0(sp)
20093860:	2023883a 	mov	r17,r4
20093864:	2821883a 	mov	r16,r5
20093868:	39000204 	addi	r4,r7,8
2009386c:	01400244 	movi	r5,9
20093870:	dcc00315 	stw	r19,12(sp)
20093874:	dc800215 	stw	r18,8(sp)
20093878:	dfc00615 	stw	ra,24(sp)
2009387c:	dd400515 	stw	r21,20(sp)
20093880:	dd000415 	stw	r20,16(sp)
20093884:	3825883a 	mov	r18,r7
20093888:	3027883a 	mov	r19,r6
2009388c:	00889c40 	call	200889c4 <__divsi3>
20093890:	00c00044 	movi	r3,1
20093894:	000b883a 	mov	r5,zero
20093898:	1880030e 	bge	r3,r2,200938a8 <__s2b+0x54>
2009389c:	18c7883a 	add	r3,r3,r3
200938a0:	29400044 	addi	r5,r5,1
200938a4:	18bffd16 	blt	r3,r2,2009389c <__flash_rwdata_start+0xffff4cc8>
200938a8:	8809883a 	mov	r4,r17
200938ac:	00936640 	call	20093664 <_Balloc>
200938b0:	d8c00717 	ldw	r3,28(sp)
200938b4:	10c00515 	stw	r3,20(r2)
200938b8:	00c00044 	movi	r3,1
200938bc:	10c00415 	stw	r3,16(r2)
200938c0:	00c00244 	movi	r3,9
200938c4:	1cc0210e 	bge	r3,r19,2009394c <__s2b+0xf8>
200938c8:	80eb883a 	add	r21,r16,r3
200938cc:	a829883a 	mov	r20,r21
200938d0:	84e1883a 	add	r16,r16,r19
200938d4:	a1c00007 	ldb	r7,0(r20)
200938d8:	8809883a 	mov	r4,r17
200938dc:	a5000044 	addi	r20,r20,1
200938e0:	100b883a 	mov	r5,r2
200938e4:	01800284 	movi	r6,10
200938e8:	39fff404 	addi	r7,r7,-48
200938ec:	00937340 	call	20093734 <__multadd>
200938f0:	a43ff81e 	bne	r20,r16,200938d4 <__flash_rwdata_start+0xffff4d00>
200938f4:	ace1883a 	add	r16,r21,r19
200938f8:	843ffe04 	addi	r16,r16,-8
200938fc:	9c800a0e 	bge	r19,r18,20093928 <__s2b+0xd4>
20093900:	94e5c83a 	sub	r18,r18,r19
20093904:	84a5883a 	add	r18,r16,r18
20093908:	81c00007 	ldb	r7,0(r16)
2009390c:	8809883a 	mov	r4,r17
20093910:	84000044 	addi	r16,r16,1
20093914:	100b883a 	mov	r5,r2
20093918:	01800284 	movi	r6,10
2009391c:	39fff404 	addi	r7,r7,-48
20093920:	00937340 	call	20093734 <__multadd>
20093924:	84bff81e 	bne	r16,r18,20093908 <__flash_rwdata_start+0xffff4d34>
20093928:	dfc00617 	ldw	ra,24(sp)
2009392c:	dd400517 	ldw	r21,20(sp)
20093930:	dd000417 	ldw	r20,16(sp)
20093934:	dcc00317 	ldw	r19,12(sp)
20093938:	dc800217 	ldw	r18,8(sp)
2009393c:	dc400117 	ldw	r17,4(sp)
20093940:	dc000017 	ldw	r16,0(sp)
20093944:	dec00704 	addi	sp,sp,28
20093948:	f800283a 	ret
2009394c:	84000284 	addi	r16,r16,10
20093950:	1827883a 	mov	r19,r3
20093954:	003fe906 	br	200938fc <__flash_rwdata_start+0xffff4d28>

20093958 <__hi0bits>:
20093958:	20bfffec 	andhi	r2,r4,65535
2009395c:	1000141e 	bne	r2,zero,200939b0 <__hi0bits+0x58>
20093960:	2008943a 	slli	r4,r4,16
20093964:	00800404 	movi	r2,16
20093968:	20ffc02c 	andhi	r3,r4,65280
2009396c:	1800021e 	bne	r3,zero,20093978 <__hi0bits+0x20>
20093970:	2008923a 	slli	r4,r4,8
20093974:	10800204 	addi	r2,r2,8
20093978:	20fc002c 	andhi	r3,r4,61440
2009397c:	1800021e 	bne	r3,zero,20093988 <__hi0bits+0x30>
20093980:	2008913a 	slli	r4,r4,4
20093984:	10800104 	addi	r2,r2,4
20093988:	20f0002c 	andhi	r3,r4,49152
2009398c:	1800031e 	bne	r3,zero,2009399c <__hi0bits+0x44>
20093990:	2109883a 	add	r4,r4,r4
20093994:	10800084 	addi	r2,r2,2
20093998:	2109883a 	add	r4,r4,r4
2009399c:	20000316 	blt	r4,zero,200939ac <__hi0bits+0x54>
200939a0:	2110002c 	andhi	r4,r4,16384
200939a4:	2000041e 	bne	r4,zero,200939b8 <__hi0bits+0x60>
200939a8:	00800804 	movi	r2,32
200939ac:	f800283a 	ret
200939b0:	0005883a 	mov	r2,zero
200939b4:	003fec06 	br	20093968 <__flash_rwdata_start+0xffff4d94>
200939b8:	10800044 	addi	r2,r2,1
200939bc:	f800283a 	ret

200939c0 <__lo0bits>:
200939c0:	20c00017 	ldw	r3,0(r4)
200939c4:	188001cc 	andi	r2,r3,7
200939c8:	10000826 	beq	r2,zero,200939ec <__lo0bits+0x2c>
200939cc:	1880004c 	andi	r2,r3,1
200939d0:	1000211e 	bne	r2,zero,20093a58 <__lo0bits+0x98>
200939d4:	1880008c 	andi	r2,r3,2
200939d8:	1000211e 	bne	r2,zero,20093a60 <__lo0bits+0xa0>
200939dc:	1806d0ba 	srli	r3,r3,2
200939e0:	00800084 	movi	r2,2
200939e4:	20c00015 	stw	r3,0(r4)
200939e8:	f800283a 	ret
200939ec:	18bfffcc 	andi	r2,r3,65535
200939f0:	10001326 	beq	r2,zero,20093a40 <__lo0bits+0x80>
200939f4:	0005883a 	mov	r2,zero
200939f8:	19403fcc 	andi	r5,r3,255
200939fc:	2800021e 	bne	r5,zero,20093a08 <__lo0bits+0x48>
20093a00:	1806d23a 	srli	r3,r3,8
20093a04:	10800204 	addi	r2,r2,8
20093a08:	194003cc 	andi	r5,r3,15
20093a0c:	2800021e 	bne	r5,zero,20093a18 <__lo0bits+0x58>
20093a10:	1806d13a 	srli	r3,r3,4
20093a14:	10800104 	addi	r2,r2,4
20093a18:	194000cc 	andi	r5,r3,3
20093a1c:	2800021e 	bne	r5,zero,20093a28 <__lo0bits+0x68>
20093a20:	1806d0ba 	srli	r3,r3,2
20093a24:	10800084 	addi	r2,r2,2
20093a28:	1940004c 	andi	r5,r3,1
20093a2c:	2800081e 	bne	r5,zero,20093a50 <__lo0bits+0x90>
20093a30:	1806d07a 	srli	r3,r3,1
20093a34:	1800051e 	bne	r3,zero,20093a4c <__lo0bits+0x8c>
20093a38:	00800804 	movi	r2,32
20093a3c:	f800283a 	ret
20093a40:	1806d43a 	srli	r3,r3,16
20093a44:	00800404 	movi	r2,16
20093a48:	003feb06 	br	200939f8 <__flash_rwdata_start+0xffff4e24>
20093a4c:	10800044 	addi	r2,r2,1
20093a50:	20c00015 	stw	r3,0(r4)
20093a54:	f800283a 	ret
20093a58:	0005883a 	mov	r2,zero
20093a5c:	f800283a 	ret
20093a60:	1806d07a 	srli	r3,r3,1
20093a64:	00800044 	movi	r2,1
20093a68:	20c00015 	stw	r3,0(r4)
20093a6c:	f800283a 	ret

20093a70 <__i2b>:
20093a70:	defffd04 	addi	sp,sp,-12
20093a74:	dc000015 	stw	r16,0(sp)
20093a78:	04000044 	movi	r16,1
20093a7c:	dc400115 	stw	r17,4(sp)
20093a80:	2823883a 	mov	r17,r5
20093a84:	800b883a 	mov	r5,r16
20093a88:	dfc00215 	stw	ra,8(sp)
20093a8c:	00936640 	call	20093664 <_Balloc>
20093a90:	14400515 	stw	r17,20(r2)
20093a94:	14000415 	stw	r16,16(r2)
20093a98:	dfc00217 	ldw	ra,8(sp)
20093a9c:	dc400117 	ldw	r17,4(sp)
20093aa0:	dc000017 	ldw	r16,0(sp)
20093aa4:	dec00304 	addi	sp,sp,12
20093aa8:	f800283a 	ret

20093aac <__multiply>:
20093aac:	defffa04 	addi	sp,sp,-24
20093ab0:	dcc00315 	stw	r19,12(sp)
20093ab4:	dc800215 	stw	r18,8(sp)
20093ab8:	2cc00417 	ldw	r19,16(r5)
20093abc:	34800417 	ldw	r18,16(r6)
20093ac0:	dd000415 	stw	r20,16(sp)
20093ac4:	dc400115 	stw	r17,4(sp)
20093ac8:	dfc00515 	stw	ra,20(sp)
20093acc:	dc000015 	stw	r16,0(sp)
20093ad0:	2829883a 	mov	r20,r5
20093ad4:	3023883a 	mov	r17,r6
20093ad8:	9c807016 	blt	r19,r18,20093c9c <__multiply+0x1f0>
20093adc:	9005883a 	mov	r2,r18
20093ae0:	9825883a 	mov	r18,r19
20093ae4:	1027883a 	mov	r19,r2
20093ae8:	a0800217 	ldw	r2,8(r20)
20093aec:	94e1883a 	add	r16,r18,r19
20093af0:	a1400117 	ldw	r5,4(r20)
20093af4:	1400010e 	bge	r2,r16,20093afc <__multiply+0x50>
20093af8:	29400044 	addi	r5,r5,1
20093afc:	00936640 	call	20093664 <_Balloc>
20093b00:	8417883a 	add	r11,r16,r16
20093b04:	13000504 	addi	r12,r2,20
20093b08:	5ad7883a 	add	r11,r11,r11
20093b0c:	62d7883a 	add	r11,r12,r11
20093b10:	6007883a 	mov	r3,r12
20093b14:	62c0032e 	bgeu	r12,r11,20093b24 <__multiply+0x78>
20093b18:	18000015 	stw	zero,0(r3)
20093b1c:	18c00104 	addi	r3,r3,4
20093b20:	1afffd36 	bltu	r3,r11,20093b18 <__flash_rwdata_start+0xffff4f44>
20093b24:	9ce7883a 	add	r19,r19,r19
20093b28:	94a5883a 	add	r18,r18,r18
20093b2c:	89800504 	addi	r6,r17,20
20093b30:	9ce7883a 	add	r19,r19,r19
20093b34:	a3800504 	addi	r14,r20,20
20093b38:	94a5883a 	add	r18,r18,r18
20093b3c:	34db883a 	add	r13,r6,r19
20093b40:	7495883a 	add	r10,r14,r18
20093b44:	3340422e 	bgeu	r6,r13,20093c50 <__multiply+0x1a4>
20093b48:	34400017 	ldw	r17,0(r6)
20093b4c:	8cbfffcc 	andi	r18,r17,65535
20093b50:	90001b26 	beq	r18,zero,20093bc0 <__multiply+0x114>
20093b54:	6013883a 	mov	r9,r12
20093b58:	7023883a 	mov	r17,r14
20093b5c:	0011883a 	mov	r8,zero
20093b60:	88c00017 	ldw	r3,0(r17)
20093b64:	4bc00017 	ldw	r15,0(r9)
20093b68:	8c400104 	addi	r17,r17,4
20093b6c:	19ffffcc 	andi	r7,r3,65535
20093b70:	3c8f383a 	mul	r7,r7,r18
20093b74:	1808d43a 	srli	r4,r3,16
20093b78:	797fffcc 	andi	r5,r15,65535
20093b7c:	29cb883a 	add	r5,r5,r7
20093b80:	2a0b883a 	add	r5,r5,r8
20093b84:	2489383a 	mul	r4,r4,r18
20093b88:	7806d43a 	srli	r3,r15,16
20093b8c:	2810d43a 	srli	r8,r5,16
20093b90:	297fffcc 	andi	r5,r5,65535
20093b94:	1907883a 	add	r3,r3,r4
20093b98:	1a07883a 	add	r3,r3,r8
20093b9c:	1808943a 	slli	r4,r3,16
20093ba0:	480f883a 	mov	r7,r9
20093ba4:	1810d43a 	srli	r8,r3,16
20093ba8:	214ab03a 	or	r5,r4,r5
20093bac:	49400015 	stw	r5,0(r9)
20093bb0:	4a400104 	addi	r9,r9,4
20093bb4:	8abfea36 	bltu	r17,r10,20093b60 <__flash_rwdata_start+0xffff4f8c>
20093bb8:	3a000115 	stw	r8,4(r7)
20093bbc:	34400017 	ldw	r17,0(r6)
20093bc0:	8822d43a 	srli	r17,r17,16
20093bc4:	88001f26 	beq	r17,zero,20093c44 <__multiply+0x198>
20093bc8:	60c00017 	ldw	r3,0(r12)
20093bcc:	7013883a 	mov	r9,r14
20093bd0:	601f883a 	mov	r15,r12
20093bd4:	1811883a 	mov	r8,r3
20093bd8:	6027883a 	mov	r19,r12
20093bdc:	000f883a 	mov	r7,zero
20093be0:	00000106 	br	20093be8 <__multiply+0x13c>
20093be4:	9027883a 	mov	r19,r18
20093be8:	4940000b 	ldhu	r5,0(r9)
20093bec:	4010d43a 	srli	r8,r8,16
20093bf0:	193fffcc 	andi	r4,r3,65535
20093bf4:	2c4b383a 	mul	r5,r5,r17
20093bf8:	7bc00104 	addi	r15,r15,4
20093bfc:	4a400104 	addi	r9,r9,4
20093c00:	2a0b883a 	add	r5,r5,r8
20093c04:	29cb883a 	add	r5,r5,r7
20093c08:	2806943a 	slli	r3,r5,16
20093c0c:	9c800104 	addi	r18,r19,4
20093c10:	280ad43a 	srli	r5,r5,16
20093c14:	1908b03a 	or	r4,r3,r4
20093c18:	793fff15 	stw	r4,-4(r15)
20093c1c:	48ffff17 	ldw	r3,-4(r9)
20093c20:	92000017 	ldw	r8,0(r18)
20093c24:	1806d43a 	srli	r3,r3,16
20093c28:	413fffcc 	andi	r4,r8,65535
20093c2c:	1c47383a 	mul	r3,r3,r17
20093c30:	1907883a 	add	r3,r3,r4
20093c34:	1947883a 	add	r3,r3,r5
20093c38:	180ed43a 	srli	r7,r3,16
20093c3c:	4abfe936 	bltu	r9,r10,20093be4 <__flash_rwdata_start+0xffff5010>
20093c40:	98c00115 	stw	r3,4(r19)
20093c44:	31800104 	addi	r6,r6,4
20093c48:	63000104 	addi	r12,r12,4
20093c4c:	337fbe36 	bltu	r6,r13,20093b48 <__flash_rwdata_start+0xffff4f74>
20093c50:	0400090e 	bge	zero,r16,20093c78 <__multiply+0x1cc>
20093c54:	58ffff17 	ldw	r3,-4(r11)
20093c58:	5affff04 	addi	r11,r11,-4
20093c5c:	18000326 	beq	r3,zero,20093c6c <__multiply+0x1c0>
20093c60:	00000506 	br	20093c78 <__multiply+0x1cc>
20093c64:	58c00017 	ldw	r3,0(r11)
20093c68:	1800031e 	bne	r3,zero,20093c78 <__multiply+0x1cc>
20093c6c:	843fffc4 	addi	r16,r16,-1
20093c70:	5affff04 	addi	r11,r11,-4
20093c74:	803ffb1e 	bne	r16,zero,20093c64 <__flash_rwdata_start+0xffff5090>
20093c78:	14000415 	stw	r16,16(r2)
20093c7c:	dfc00517 	ldw	ra,20(sp)
20093c80:	dd000417 	ldw	r20,16(sp)
20093c84:	dcc00317 	ldw	r19,12(sp)
20093c88:	dc800217 	ldw	r18,8(sp)
20093c8c:	dc400117 	ldw	r17,4(sp)
20093c90:	dc000017 	ldw	r16,0(sp)
20093c94:	dec00604 	addi	sp,sp,24
20093c98:	f800283a 	ret
20093c9c:	3029883a 	mov	r20,r6
20093ca0:	2823883a 	mov	r17,r5
20093ca4:	003f9006 	br	20093ae8 <__flash_rwdata_start+0xffff4f14>

20093ca8 <__pow5mult>:
20093ca8:	defffa04 	addi	sp,sp,-24
20093cac:	dcc00315 	stw	r19,12(sp)
20093cb0:	dc800215 	stw	r18,8(sp)
20093cb4:	dc000015 	stw	r16,0(sp)
20093cb8:	dfc00515 	stw	ra,20(sp)
20093cbc:	dd000415 	stw	r20,16(sp)
20093cc0:	dc400115 	stw	r17,4(sp)
20093cc4:	308000cc 	andi	r2,r6,3
20093cc8:	3021883a 	mov	r16,r6
20093ccc:	2027883a 	mov	r19,r4
20093cd0:	2825883a 	mov	r18,r5
20093cd4:	10002e1e 	bne	r2,zero,20093d90 <__pow5mult+0xe8>
20093cd8:	8021d0ba 	srai	r16,r16,2
20093cdc:	80001a26 	beq	r16,zero,20093d48 <__pow5mult+0xa0>
20093ce0:	9c401217 	ldw	r17,72(r19)
20093ce4:	8800061e 	bne	r17,zero,20093d00 <__pow5mult+0x58>
20093ce8:	00003406 	br	20093dbc <__pow5mult+0x114>
20093cec:	8021d07a 	srai	r16,r16,1
20093cf0:	80001526 	beq	r16,zero,20093d48 <__pow5mult+0xa0>
20093cf4:	88800017 	ldw	r2,0(r17)
20093cf8:	10001c26 	beq	r2,zero,20093d6c <__pow5mult+0xc4>
20093cfc:	1023883a 	mov	r17,r2
20093d00:	80c0004c 	andi	r3,r16,1
20093d04:	183ff926 	beq	r3,zero,20093cec <__flash_rwdata_start+0xffff5118>
20093d08:	900b883a 	mov	r5,r18
20093d0c:	880d883a 	mov	r6,r17
20093d10:	9809883a 	mov	r4,r19
20093d14:	0093aac0 	call	20093aac <__multiply>
20093d18:	90001b26 	beq	r18,zero,20093d88 <__pow5mult+0xe0>
20093d1c:	91c00117 	ldw	r7,4(r18)
20093d20:	98c01317 	ldw	r3,76(r19)
20093d24:	8021d07a 	srai	r16,r16,1
20093d28:	39cf883a 	add	r7,r7,r7
20093d2c:	39cf883a 	add	r7,r7,r7
20093d30:	19c7883a 	add	r3,r3,r7
20093d34:	19000017 	ldw	r4,0(r3)
20093d38:	91000015 	stw	r4,0(r18)
20093d3c:	1c800015 	stw	r18,0(r3)
20093d40:	1025883a 	mov	r18,r2
20093d44:	803feb1e 	bne	r16,zero,20093cf4 <__flash_rwdata_start+0xffff5120>
20093d48:	9005883a 	mov	r2,r18
20093d4c:	dfc00517 	ldw	ra,20(sp)
20093d50:	dd000417 	ldw	r20,16(sp)
20093d54:	dcc00317 	ldw	r19,12(sp)
20093d58:	dc800217 	ldw	r18,8(sp)
20093d5c:	dc400117 	ldw	r17,4(sp)
20093d60:	dc000017 	ldw	r16,0(sp)
20093d64:	dec00604 	addi	sp,sp,24
20093d68:	f800283a 	ret
20093d6c:	9809883a 	mov	r4,r19
20093d70:	880b883a 	mov	r5,r17
20093d74:	880d883a 	mov	r6,r17
20093d78:	0093aac0 	call	20093aac <__multiply>
20093d7c:	88800015 	stw	r2,0(r17)
20093d80:	10000015 	stw	zero,0(r2)
20093d84:	003fdd06 	br	20093cfc <__flash_rwdata_start+0xffff5128>
20093d88:	1025883a 	mov	r18,r2
20093d8c:	003fd706 	br	20093cec <__flash_rwdata_start+0xffff5118>
20093d90:	10bfffc4 	addi	r2,r2,-1
20093d94:	1085883a 	add	r2,r2,r2
20093d98:	00c00034 	movhi	r3,0
20093d9c:	18c1b304 	addi	r3,r3,1740
20093da0:	1085883a 	add	r2,r2,r2
20093da4:	1885883a 	add	r2,r3,r2
20093da8:	11800017 	ldw	r6,0(r2)
20093dac:	000f883a 	mov	r7,zero
20093db0:	00937340 	call	20093734 <__multadd>
20093db4:	1025883a 	mov	r18,r2
20093db8:	003fc706 	br	20093cd8 <__flash_rwdata_start+0xffff5104>
20093dbc:	05000044 	movi	r20,1
20093dc0:	9809883a 	mov	r4,r19
20093dc4:	a00b883a 	mov	r5,r20
20093dc8:	00936640 	call	20093664 <_Balloc>
20093dcc:	1023883a 	mov	r17,r2
20093dd0:	00809c44 	movi	r2,625
20093dd4:	88800515 	stw	r2,20(r17)
20093dd8:	8d000415 	stw	r20,16(r17)
20093ddc:	9c401215 	stw	r17,72(r19)
20093de0:	88000015 	stw	zero,0(r17)
20093de4:	003fc606 	br	20093d00 <__flash_rwdata_start+0xffff512c>

20093de8 <__lshift>:
20093de8:	defff904 	addi	sp,sp,-28
20093dec:	dd000415 	stw	r20,16(sp)
20093df0:	dcc00315 	stw	r19,12(sp)
20093df4:	3029d17a 	srai	r20,r6,5
20093df8:	2cc00417 	ldw	r19,16(r5)
20093dfc:	28800217 	ldw	r2,8(r5)
20093e00:	dd400515 	stw	r21,20(sp)
20093e04:	a4e7883a 	add	r19,r20,r19
20093e08:	dc800215 	stw	r18,8(sp)
20093e0c:	dc400115 	stw	r17,4(sp)
20093e10:	dc000015 	stw	r16,0(sp)
20093e14:	dfc00615 	stw	ra,24(sp)
20093e18:	9c000044 	addi	r16,r19,1
20093e1c:	2823883a 	mov	r17,r5
20093e20:	302b883a 	mov	r21,r6
20093e24:	2025883a 	mov	r18,r4
20093e28:	29400117 	ldw	r5,4(r5)
20093e2c:	1400030e 	bge	r2,r16,20093e3c <__lshift+0x54>
20093e30:	1085883a 	add	r2,r2,r2
20093e34:	29400044 	addi	r5,r5,1
20093e38:	143ffd16 	blt	r2,r16,20093e30 <__flash_rwdata_start+0xffff525c>
20093e3c:	9009883a 	mov	r4,r18
20093e40:	00936640 	call	20093664 <_Balloc>
20093e44:	11c00504 	addi	r7,r2,20
20093e48:	0500090e 	bge	zero,r20,20093e70 <__lshift+0x88>
20093e4c:	3811883a 	mov	r8,r7
20093e50:	0007883a 	mov	r3,zero
20093e54:	40000015 	stw	zero,0(r8)
20093e58:	18c00044 	addi	r3,r3,1
20093e5c:	42000104 	addi	r8,r8,4
20093e60:	1d3ffc1e 	bne	r3,r20,20093e54 <__flash_rwdata_start+0xffff5280>
20093e64:	18c7883a 	add	r3,r3,r3
20093e68:	18c7883a 	add	r3,r3,r3
20093e6c:	38cf883a 	add	r7,r7,r3
20093e70:	89000417 	ldw	r4,16(r17)
20093e74:	88c00504 	addi	r3,r17,20
20093e78:	a98007cc 	andi	r6,r21,31
20093e7c:	2109883a 	add	r4,r4,r4
20093e80:	2109883a 	add	r4,r4,r4
20093e84:	1909883a 	add	r4,r3,r4
20093e88:	30002326 	beq	r6,zero,20093f18 <__lshift+0x130>
20093e8c:	01400804 	movi	r5,32
20093e90:	298bc83a 	sub	r5,r5,r6
20093e94:	0013883a 	mov	r9,zero
20093e98:	1a000017 	ldw	r8,0(r3)
20093e9c:	3815883a 	mov	r10,r7
20093ea0:	39c00104 	addi	r7,r7,4
20093ea4:	4190983a 	sll	r8,r8,r6
20093ea8:	18c00104 	addi	r3,r3,4
20093eac:	4a10b03a 	or	r8,r9,r8
20093eb0:	3a3fff15 	stw	r8,-4(r7)
20093eb4:	1a3fff17 	ldw	r8,-4(r3)
20093eb8:	4152d83a 	srl	r9,r8,r5
20093ebc:	193ff636 	bltu	r3,r4,20093e98 <__flash_rwdata_start+0xffff52c4>
20093ec0:	52400115 	stw	r9,4(r10)
20093ec4:	48001a1e 	bne	r9,zero,20093f30 <__lshift+0x148>
20093ec8:	843fffc4 	addi	r16,r16,-1
20093ecc:	14000415 	stw	r16,16(r2)
20093ed0:	88000826 	beq	r17,zero,20093ef4 <__lshift+0x10c>
20093ed4:	89000117 	ldw	r4,4(r17)
20093ed8:	90c01317 	ldw	r3,76(r18)
20093edc:	2109883a 	add	r4,r4,r4
20093ee0:	2109883a 	add	r4,r4,r4
20093ee4:	1907883a 	add	r3,r3,r4
20093ee8:	19000017 	ldw	r4,0(r3)
20093eec:	89000015 	stw	r4,0(r17)
20093ef0:	1c400015 	stw	r17,0(r3)
20093ef4:	dfc00617 	ldw	ra,24(sp)
20093ef8:	dd400517 	ldw	r21,20(sp)
20093efc:	dd000417 	ldw	r20,16(sp)
20093f00:	dcc00317 	ldw	r19,12(sp)
20093f04:	dc800217 	ldw	r18,8(sp)
20093f08:	dc400117 	ldw	r17,4(sp)
20093f0c:	dc000017 	ldw	r16,0(sp)
20093f10:	dec00704 	addi	sp,sp,28
20093f14:	f800283a 	ret
20093f18:	19400017 	ldw	r5,0(r3)
20093f1c:	39c00104 	addi	r7,r7,4
20093f20:	18c00104 	addi	r3,r3,4
20093f24:	397fff15 	stw	r5,-4(r7)
20093f28:	193ffb36 	bltu	r3,r4,20093f18 <__flash_rwdata_start+0xffff5344>
20093f2c:	003fe606 	br	20093ec8 <__flash_rwdata_start+0xffff52f4>
20093f30:	9c000084 	addi	r16,r19,2
20093f34:	003fe406 	br	20093ec8 <__flash_rwdata_start+0xffff52f4>

20093f38 <__mcmp>:
20093f38:	20800417 	ldw	r2,16(r4)
20093f3c:	28c00417 	ldw	r3,16(r5)
20093f40:	10c5c83a 	sub	r2,r2,r3
20093f44:	1000111e 	bne	r2,zero,20093f8c <__mcmp+0x54>
20093f48:	18c7883a 	add	r3,r3,r3
20093f4c:	18c7883a 	add	r3,r3,r3
20093f50:	21000504 	addi	r4,r4,20
20093f54:	29400504 	addi	r5,r5,20
20093f58:	20c5883a 	add	r2,r4,r3
20093f5c:	28cb883a 	add	r5,r5,r3
20093f60:	00000106 	br	20093f68 <__mcmp+0x30>
20093f64:	20800a2e 	bgeu	r4,r2,20093f90 <__mcmp+0x58>
20093f68:	10bfff04 	addi	r2,r2,-4
20093f6c:	297fff04 	addi	r5,r5,-4
20093f70:	11800017 	ldw	r6,0(r2)
20093f74:	28c00017 	ldw	r3,0(r5)
20093f78:	30fffa26 	beq	r6,r3,20093f64 <__flash_rwdata_start+0xffff5390>
20093f7c:	30c00236 	bltu	r6,r3,20093f88 <__mcmp+0x50>
20093f80:	00800044 	movi	r2,1
20093f84:	f800283a 	ret
20093f88:	00bfffc4 	movi	r2,-1
20093f8c:	f800283a 	ret
20093f90:	0005883a 	mov	r2,zero
20093f94:	f800283a 	ret

20093f98 <__mdiff>:
20093f98:	defffb04 	addi	sp,sp,-20
20093f9c:	dc000015 	stw	r16,0(sp)
20093fa0:	2821883a 	mov	r16,r5
20093fa4:	dcc00315 	stw	r19,12(sp)
20093fa8:	300b883a 	mov	r5,r6
20093fac:	2027883a 	mov	r19,r4
20093fb0:	8009883a 	mov	r4,r16
20093fb4:	dc800215 	stw	r18,8(sp)
20093fb8:	dfc00415 	stw	ra,16(sp)
20093fbc:	dc400115 	stw	r17,4(sp)
20093fc0:	3025883a 	mov	r18,r6
20093fc4:	0093f380 	call	20093f38 <__mcmp>
20093fc8:	10005226 	beq	r2,zero,20094114 <__mdiff+0x17c>
20093fcc:	10004c16 	blt	r2,zero,20094100 <__mdiff+0x168>
20093fd0:	0023883a 	mov	r17,zero
20093fd4:	81400117 	ldw	r5,4(r16)
20093fd8:	9809883a 	mov	r4,r19
20093fdc:	00936640 	call	20093664 <_Balloc>
20093fe0:	83400417 	ldw	r13,16(r16)
20093fe4:	93800417 	ldw	r14,16(r18)
20093fe8:	81000504 	addi	r4,r16,20
20093fec:	6b59883a 	add	r12,r13,r13
20093ff0:	739d883a 	add	r14,r14,r14
20093ff4:	6319883a 	add	r12,r12,r12
20093ff8:	91800504 	addi	r6,r18,20
20093ffc:	739d883a 	add	r14,r14,r14
20094000:	14400315 	stw	r17,12(r2)
20094004:	2319883a 	add	r12,r4,r12
20094008:	339d883a 	add	r14,r6,r14
2009400c:	12400504 	addi	r9,r2,20
20094010:	0007883a 	mov	r3,zero
20094014:	22000017 	ldw	r8,0(r4)
20094018:	32800017 	ldw	r10,0(r6)
2009401c:	4ac00104 	addi	r11,r9,4
20094020:	41ffffcc 	andi	r7,r8,65535
20094024:	38c7883a 	add	r3,r7,r3
20094028:	51ffffcc 	andi	r7,r10,65535
2009402c:	19cfc83a 	sub	r7,r3,r7
20094030:	4010d43a 	srli	r8,r8,16
20094034:	5014d43a 	srli	r10,r10,16
20094038:	3807d43a 	srai	r3,r7,16
2009403c:	39ffffcc 	andi	r7,r7,65535
20094040:	4291c83a 	sub	r8,r8,r10
20094044:	40c7883a 	add	r3,r8,r3
20094048:	1810943a 	slli	r8,r3,16
2009404c:	31800104 	addi	r6,r6,4
20094050:	21000104 	addi	r4,r4,4
20094054:	41ceb03a 	or	r7,r8,r7
20094058:	49c00015 	stw	r7,0(r9)
2009405c:	1807d43a 	srai	r3,r3,16
20094060:	580b883a 	mov	r5,r11
20094064:	5813883a 	mov	r9,r11
20094068:	33bfea36 	bltu	r6,r14,20094014 <__flash_rwdata_start+0xffff5440>
2009406c:	2011883a 	mov	r8,r4
20094070:	2300152e 	bgeu	r4,r12,200940c8 <__mdiff+0x130>
20094074:	21400017 	ldw	r5,0(r4)
20094078:	4a400104 	addi	r9,r9,4
2009407c:	21000104 	addi	r4,r4,4
20094080:	29ffffcc 	andi	r7,r5,65535
20094084:	38c7883a 	add	r3,r7,r3
20094088:	280ad43a 	srli	r5,r5,16
2009408c:	180dd43a 	srai	r6,r3,16
20094090:	19ffffcc 	andi	r7,r3,65535
20094094:	3147883a 	add	r3,r6,r5
20094098:	180a943a 	slli	r5,r3,16
2009409c:	1807d43a 	srai	r3,r3,16
200940a0:	29ceb03a 	or	r7,r5,r7
200940a4:	49ffff15 	stw	r7,-4(r9)
200940a8:	233ff236 	bltu	r4,r12,20094074 <__flash_rwdata_start+0xffff54a0>
200940ac:	0206303a 	nor	r3,zero,r8
200940b0:	1b07883a 	add	r3,r3,r12
200940b4:	1806d0ba 	srli	r3,r3,2
200940b8:	18c00044 	addi	r3,r3,1
200940bc:	18c7883a 	add	r3,r3,r3
200940c0:	18c7883a 	add	r3,r3,r3
200940c4:	58cb883a 	add	r5,r11,r3
200940c8:	28ffff04 	addi	r3,r5,-4
200940cc:	3800041e 	bne	r7,zero,200940e0 <__mdiff+0x148>
200940d0:	18ffff04 	addi	r3,r3,-4
200940d4:	19000017 	ldw	r4,0(r3)
200940d8:	6b7fffc4 	addi	r13,r13,-1
200940dc:	203ffc26 	beq	r4,zero,200940d0 <__flash_rwdata_start+0xffff54fc>
200940e0:	13400415 	stw	r13,16(r2)
200940e4:	dfc00417 	ldw	ra,16(sp)
200940e8:	dcc00317 	ldw	r19,12(sp)
200940ec:	dc800217 	ldw	r18,8(sp)
200940f0:	dc400117 	ldw	r17,4(sp)
200940f4:	dc000017 	ldw	r16,0(sp)
200940f8:	dec00504 	addi	sp,sp,20
200940fc:	f800283a 	ret
20094100:	8005883a 	mov	r2,r16
20094104:	04400044 	movi	r17,1
20094108:	9021883a 	mov	r16,r18
2009410c:	1025883a 	mov	r18,r2
20094110:	003fb006 	br	20093fd4 <__flash_rwdata_start+0xffff5400>
20094114:	9809883a 	mov	r4,r19
20094118:	000b883a 	mov	r5,zero
2009411c:	00936640 	call	20093664 <_Balloc>
20094120:	00c00044 	movi	r3,1
20094124:	10c00415 	stw	r3,16(r2)
20094128:	10000515 	stw	zero,20(r2)
2009412c:	003fed06 	br	200940e4 <__flash_rwdata_start+0xffff5510>

20094130 <__ulp>:
20094130:	295ffc2c 	andhi	r5,r5,32752
20094134:	00bf3034 	movhi	r2,64704
20094138:	2887883a 	add	r3,r5,r2
2009413c:	00c0020e 	bge	zero,r3,20094148 <__ulp+0x18>
20094140:	0005883a 	mov	r2,zero
20094144:	f800283a 	ret
20094148:	00c7c83a 	sub	r3,zero,r3
2009414c:	180bd53a 	srai	r5,r3,20
20094150:	008004c4 	movi	r2,19
20094154:	11400a0e 	bge	r2,r5,20094180 <__ulp+0x50>
20094158:	00800c84 	movi	r2,50
2009415c:	0007883a 	mov	r3,zero
20094160:	11400516 	blt	r2,r5,20094178 <__ulp+0x48>
20094164:	00800cc4 	movi	r2,51
20094168:	114bc83a 	sub	r5,r2,r5
2009416c:	00800044 	movi	r2,1
20094170:	1144983a 	sll	r2,r2,r5
20094174:	f800283a 	ret
20094178:	00800044 	movi	r2,1
2009417c:	f800283a 	ret
20094180:	00800234 	movhi	r2,8
20094184:	1147d83a 	sra	r3,r2,r5
20094188:	0005883a 	mov	r2,zero
2009418c:	f800283a 	ret

20094190 <__b2d>:
20094190:	defffa04 	addi	sp,sp,-24
20094194:	dc000015 	stw	r16,0(sp)
20094198:	24000417 	ldw	r16,16(r4)
2009419c:	dc400115 	stw	r17,4(sp)
200941a0:	24400504 	addi	r17,r4,20
200941a4:	8421883a 	add	r16,r16,r16
200941a8:	8421883a 	add	r16,r16,r16
200941ac:	8c21883a 	add	r16,r17,r16
200941b0:	dc800215 	stw	r18,8(sp)
200941b4:	84bfff17 	ldw	r18,-4(r16)
200941b8:	dd000415 	stw	r20,16(sp)
200941bc:	dcc00315 	stw	r19,12(sp)
200941c0:	9009883a 	mov	r4,r18
200941c4:	2829883a 	mov	r20,r5
200941c8:	dfc00515 	stw	ra,20(sp)
200941cc:	00939580 	call	20093958 <__hi0bits>
200941d0:	00c00804 	movi	r3,32
200941d4:	1887c83a 	sub	r3,r3,r2
200941d8:	a0c00015 	stw	r3,0(r20)
200941dc:	00c00284 	movi	r3,10
200941e0:	84ffff04 	addi	r19,r16,-4
200941e4:	18801216 	blt	r3,r2,20094230 <__b2d+0xa0>
200941e8:	014002c4 	movi	r5,11
200941ec:	2889c83a 	sub	r4,r5,r2
200941f0:	9106d83a 	srl	r3,r18,r4
200941f4:	18cffc34 	orhi	r3,r3,16368
200941f8:	8cc0282e 	bgeu	r17,r19,2009429c <__b2d+0x10c>
200941fc:	817ffe17 	ldw	r5,-8(r16)
20094200:	290ad83a 	srl	r5,r5,r4
20094204:	10800544 	addi	r2,r2,21
20094208:	9084983a 	sll	r2,r18,r2
2009420c:	2884b03a 	or	r2,r5,r2
20094210:	dfc00517 	ldw	ra,20(sp)
20094214:	dd000417 	ldw	r20,16(sp)
20094218:	dcc00317 	ldw	r19,12(sp)
2009421c:	dc800217 	ldw	r18,8(sp)
20094220:	dc400117 	ldw	r17,4(sp)
20094224:	dc000017 	ldw	r16,0(sp)
20094228:	dec00604 	addi	sp,sp,24
2009422c:	f800283a 	ret
20094230:	113ffd44 	addi	r4,r2,-11
20094234:	8cc00f2e 	bgeu	r17,r19,20094274 <__b2d+0xe4>
20094238:	81bffe04 	addi	r6,r16,-8
2009423c:	817ffe17 	ldw	r5,-8(r16)
20094240:	20001326 	beq	r4,zero,20094290 <__b2d+0x100>
20094244:	00c00ac4 	movi	r3,43
20094248:	1885c83a 	sub	r2,r3,r2
2009424c:	2886d83a 	srl	r3,r5,r2
20094250:	9124983a 	sll	r18,r18,r4
20094254:	90e4b03a 	or	r18,r18,r3
20094258:	90cffc34 	orhi	r3,r18,16368
2009425c:	8980112e 	bgeu	r17,r6,200942a4 <__b2d+0x114>
20094260:	81bffd17 	ldw	r6,-12(r16)
20094264:	308cd83a 	srl	r6,r6,r2
20094268:	2904983a 	sll	r2,r5,r4
2009426c:	1184b03a 	or	r2,r2,r6
20094270:	003fe706 	br	20094210 <__flash_rwdata_start+0xffff563c>
20094274:	20000526 	beq	r4,zero,2009428c <__b2d+0xfc>
20094278:	9124983a 	sll	r18,r18,r4
2009427c:	000d883a 	mov	r6,zero
20094280:	000b883a 	mov	r5,zero
20094284:	90cffc34 	orhi	r3,r18,16368
20094288:	003ff706 	br	20094268 <__flash_rwdata_start+0xffff5694>
2009428c:	000b883a 	mov	r5,zero
20094290:	90cffc34 	orhi	r3,r18,16368
20094294:	2805883a 	mov	r2,r5
20094298:	003fdd06 	br	20094210 <__flash_rwdata_start+0xffff563c>
2009429c:	000b883a 	mov	r5,zero
200942a0:	003fd806 	br	20094204 <__flash_rwdata_start+0xffff5630>
200942a4:	000d883a 	mov	r6,zero
200942a8:	003fef06 	br	20094268 <__flash_rwdata_start+0xffff5694>

200942ac <__d2b>:
200942ac:	defff704 	addi	sp,sp,-36
200942b0:	dc000215 	stw	r16,8(sp)
200942b4:	3021883a 	mov	r16,r6
200942b8:	dc400315 	stw	r17,12(sp)
200942bc:	8022907a 	slli	r17,r16,1
200942c0:	dd400715 	stw	r21,28(sp)
200942c4:	282b883a 	mov	r21,r5
200942c8:	01400044 	movi	r5,1
200942cc:	dd000615 	stw	r20,24(sp)
200942d0:	dcc00515 	stw	r19,20(sp)
200942d4:	dc800415 	stw	r18,16(sp)
200942d8:	dfc00815 	stw	ra,32(sp)
200942dc:	3829883a 	mov	r20,r7
200942e0:	dc800917 	ldw	r18,36(sp)
200942e4:	8822d57a 	srli	r17,r17,21
200942e8:	00936640 	call	20093664 <_Balloc>
200942ec:	1027883a 	mov	r19,r2
200942f0:	00800434 	movhi	r2,16
200942f4:	10bfffc4 	addi	r2,r2,-1
200942f8:	808c703a 	and	r6,r16,r2
200942fc:	88000126 	beq	r17,zero,20094304 <__d2b+0x58>
20094300:	31800434 	orhi	r6,r6,16
20094304:	d9800015 	stw	r6,0(sp)
20094308:	a8001f26 	beq	r21,zero,20094388 <__d2b+0xdc>
2009430c:	d9000104 	addi	r4,sp,4
20094310:	dd400115 	stw	r21,4(sp)
20094314:	00939c00 	call	200939c0 <__lo0bits>
20094318:	d8c00017 	ldw	r3,0(sp)
2009431c:	1000291e 	bne	r2,zero,200943c4 <__d2b+0x118>
20094320:	d9000117 	ldw	r4,4(sp)
20094324:	99000515 	stw	r4,20(r19)
20094328:	1820c03a 	cmpne	r16,r3,zero
2009432c:	84000044 	addi	r16,r16,1
20094330:	98c00615 	stw	r3,24(r19)
20094334:	9c000415 	stw	r16,16(r19)
20094338:	88001b1e 	bne	r17,zero,200943a8 <__d2b+0xfc>
2009433c:	800690ba 	slli	r3,r16,2
20094340:	10bef384 	addi	r2,r2,-1074
20094344:	a0800015 	stw	r2,0(r20)
20094348:	98c5883a 	add	r2,r19,r3
2009434c:	11000417 	ldw	r4,16(r2)
20094350:	8020917a 	slli	r16,r16,5
20094354:	00939580 	call	20093958 <__hi0bits>
20094358:	8085c83a 	sub	r2,r16,r2
2009435c:	90800015 	stw	r2,0(r18)
20094360:	9805883a 	mov	r2,r19
20094364:	dfc00817 	ldw	ra,32(sp)
20094368:	dd400717 	ldw	r21,28(sp)
2009436c:	dd000617 	ldw	r20,24(sp)
20094370:	dcc00517 	ldw	r19,20(sp)
20094374:	dc800417 	ldw	r18,16(sp)
20094378:	dc400317 	ldw	r17,12(sp)
2009437c:	dc000217 	ldw	r16,8(sp)
20094380:	dec00904 	addi	sp,sp,36
20094384:	f800283a 	ret
20094388:	d809883a 	mov	r4,sp
2009438c:	00939c00 	call	200939c0 <__lo0bits>
20094390:	d8c00017 	ldw	r3,0(sp)
20094394:	04000044 	movi	r16,1
20094398:	9c000415 	stw	r16,16(r19)
2009439c:	98c00515 	stw	r3,20(r19)
200943a0:	10800804 	addi	r2,r2,32
200943a4:	883fe526 	beq	r17,zero,2009433c <__flash_rwdata_start+0xffff5768>
200943a8:	8c7ef344 	addi	r17,r17,-1075
200943ac:	88a3883a 	add	r17,r17,r2
200943b0:	00c00d44 	movi	r3,53
200943b4:	a4400015 	stw	r17,0(r20)
200943b8:	1885c83a 	sub	r2,r3,r2
200943bc:	90800015 	stw	r2,0(r18)
200943c0:	003fe706 	br	20094360 <__flash_rwdata_start+0xffff578c>
200943c4:	01000804 	movi	r4,32
200943c8:	2089c83a 	sub	r4,r4,r2
200943cc:	1908983a 	sll	r4,r3,r4
200943d0:	d9400117 	ldw	r5,4(sp)
200943d4:	1886d83a 	srl	r3,r3,r2
200943d8:	2148b03a 	or	r4,r4,r5
200943dc:	99000515 	stw	r4,20(r19)
200943e0:	d8c00015 	stw	r3,0(sp)
200943e4:	003fd006 	br	20094328 <__flash_rwdata_start+0xffff5754>

200943e8 <__ratio>:
200943e8:	defff904 	addi	sp,sp,-28
200943ec:	dc400315 	stw	r17,12(sp)
200943f0:	2823883a 	mov	r17,r5
200943f4:	d9400104 	addi	r5,sp,4
200943f8:	dfc00615 	stw	ra,24(sp)
200943fc:	dcc00515 	stw	r19,20(sp)
20094400:	dc800415 	stw	r18,16(sp)
20094404:	2027883a 	mov	r19,r4
20094408:	dc000215 	stw	r16,8(sp)
2009440c:	00941900 	call	20094190 <__b2d>
20094410:	8809883a 	mov	r4,r17
20094414:	d80b883a 	mov	r5,sp
20094418:	1025883a 	mov	r18,r2
2009441c:	1821883a 	mov	r16,r3
20094420:	00941900 	call	20094190 <__b2d>
20094424:	8a400417 	ldw	r9,16(r17)
20094428:	9a000417 	ldw	r8,16(r19)
2009442c:	100d883a 	mov	r6,r2
20094430:	d8800017 	ldw	r2,0(sp)
20094434:	4251c83a 	sub	r8,r8,r9
20094438:	4012917a 	slli	r9,r8,5
2009443c:	da000117 	ldw	r8,4(sp)
20094440:	4091c83a 	sub	r8,r8,r2
20094444:	4251883a 	add	r8,r8,r9
20094448:	02000d0e 	bge	zero,r8,20094480 <__ratio+0x98>
2009444c:	4010953a 	slli	r8,r8,20
20094450:	4421883a 	add	r16,r8,r16
20094454:	9009883a 	mov	r4,r18
20094458:	800b883a 	mov	r5,r16
2009445c:	180f883a 	mov	r7,r3
20094460:	0089ca40 	call	20089ca4 <__divdf3>
20094464:	dfc00617 	ldw	ra,24(sp)
20094468:	dcc00517 	ldw	r19,20(sp)
2009446c:	dc800417 	ldw	r18,16(sp)
20094470:	dc400317 	ldw	r17,12(sp)
20094474:	dc000217 	ldw	r16,8(sp)
20094478:	dec00704 	addi	sp,sp,28
2009447c:	f800283a 	ret
20094480:	4010953a 	slli	r8,r8,20
20094484:	1a07c83a 	sub	r3,r3,r8
20094488:	003ff206 	br	20094454 <__flash_rwdata_start+0xffff5880>

2009448c <_mprec_log10>:
2009448c:	defffe04 	addi	sp,sp,-8
20094490:	dc000015 	stw	r16,0(sp)
20094494:	dfc00115 	stw	ra,4(sp)
20094498:	008005c4 	movi	r2,23
2009449c:	2021883a 	mov	r16,r4
200944a0:	11000d0e 	bge	r2,r4,200944d8 <_mprec_log10+0x4c>
200944a4:	0005883a 	mov	r2,zero
200944a8:	00cffc34 	movhi	r3,16368
200944ac:	843fffc4 	addi	r16,r16,-1
200944b0:	1009883a 	mov	r4,r2
200944b4:	180b883a 	mov	r5,r3
200944b8:	000d883a 	mov	r6,zero
200944bc:	01d00934 	movhi	r7,16420
200944c0:	0098d400 	call	20098d40 <__muldf3>
200944c4:	803ff91e 	bne	r16,zero,200944ac <__flash_rwdata_start+0xffff58d8>
200944c8:	dfc00117 	ldw	ra,4(sp)
200944cc:	dc000017 	ldw	r16,0(sp)
200944d0:	dec00204 	addi	sp,sp,8
200944d4:	f800283a 	ret
200944d8:	202090fa 	slli	r16,r4,3
200944dc:	00800034 	movhi	r2,0
200944e0:	1081ca04 	addi	r2,r2,1832
200944e4:	1421883a 	add	r16,r2,r16
200944e8:	80800017 	ldw	r2,0(r16)
200944ec:	80c00117 	ldw	r3,4(r16)
200944f0:	dfc00117 	ldw	ra,4(sp)
200944f4:	dc000017 	ldw	r16,0(sp)
200944f8:	dec00204 	addi	sp,sp,8
200944fc:	f800283a 	ret

20094500 <__copybits>:
20094500:	297fffc4 	addi	r5,r5,-1
20094504:	280fd17a 	srai	r7,r5,5
20094508:	30c00417 	ldw	r3,16(r6)
2009450c:	30800504 	addi	r2,r6,20
20094510:	39c00044 	addi	r7,r7,1
20094514:	18c7883a 	add	r3,r3,r3
20094518:	39cf883a 	add	r7,r7,r7
2009451c:	18c7883a 	add	r3,r3,r3
20094520:	39cf883a 	add	r7,r7,r7
20094524:	10c7883a 	add	r3,r2,r3
20094528:	21cf883a 	add	r7,r4,r7
2009452c:	10c00d2e 	bgeu	r2,r3,20094564 <__copybits+0x64>
20094530:	200b883a 	mov	r5,r4
20094534:	12000017 	ldw	r8,0(r2)
20094538:	29400104 	addi	r5,r5,4
2009453c:	10800104 	addi	r2,r2,4
20094540:	2a3fff15 	stw	r8,-4(r5)
20094544:	10fffb36 	bltu	r2,r3,20094534 <__flash_rwdata_start+0xffff5960>
20094548:	1985c83a 	sub	r2,r3,r6
2009454c:	10bffac4 	addi	r2,r2,-21
20094550:	1004d0ba 	srli	r2,r2,2
20094554:	10800044 	addi	r2,r2,1
20094558:	1085883a 	add	r2,r2,r2
2009455c:	1085883a 	add	r2,r2,r2
20094560:	2089883a 	add	r4,r4,r2
20094564:	21c0032e 	bgeu	r4,r7,20094574 <__copybits+0x74>
20094568:	20000015 	stw	zero,0(r4)
2009456c:	21000104 	addi	r4,r4,4
20094570:	21fffd36 	bltu	r4,r7,20094568 <__flash_rwdata_start+0xffff5994>
20094574:	f800283a 	ret

20094578 <__any_on>:
20094578:	20c00417 	ldw	r3,16(r4)
2009457c:	2805d17a 	srai	r2,r5,5
20094580:	21000504 	addi	r4,r4,20
20094584:	18800d0e 	bge	r3,r2,200945bc <__any_on+0x44>
20094588:	18c7883a 	add	r3,r3,r3
2009458c:	18c7883a 	add	r3,r3,r3
20094590:	20c7883a 	add	r3,r4,r3
20094594:	20c0192e 	bgeu	r4,r3,200945fc <__any_on+0x84>
20094598:	18bfff17 	ldw	r2,-4(r3)
2009459c:	18ffff04 	addi	r3,r3,-4
200945a0:	1000041e 	bne	r2,zero,200945b4 <__any_on+0x3c>
200945a4:	20c0142e 	bgeu	r4,r3,200945f8 <__any_on+0x80>
200945a8:	18ffff04 	addi	r3,r3,-4
200945ac:	19400017 	ldw	r5,0(r3)
200945b0:	283ffc26 	beq	r5,zero,200945a4 <__flash_rwdata_start+0xffff59d0>
200945b4:	00800044 	movi	r2,1
200945b8:	f800283a 	ret
200945bc:	10c00a0e 	bge	r2,r3,200945e8 <__any_on+0x70>
200945c0:	1085883a 	add	r2,r2,r2
200945c4:	1085883a 	add	r2,r2,r2
200945c8:	294007cc 	andi	r5,r5,31
200945cc:	2087883a 	add	r3,r4,r2
200945d0:	283ff026 	beq	r5,zero,20094594 <__flash_rwdata_start+0xffff59c0>
200945d4:	19800017 	ldw	r6,0(r3)
200945d8:	3144d83a 	srl	r2,r6,r5
200945dc:	114a983a 	sll	r5,r2,r5
200945e0:	29bff41e 	bne	r5,r6,200945b4 <__flash_rwdata_start+0xffff59e0>
200945e4:	003feb06 	br	20094594 <__flash_rwdata_start+0xffff59c0>
200945e8:	1085883a 	add	r2,r2,r2
200945ec:	1085883a 	add	r2,r2,r2
200945f0:	2087883a 	add	r3,r4,r2
200945f4:	003fe706 	br	20094594 <__flash_rwdata_start+0xffff59c0>
200945f8:	f800283a 	ret
200945fc:	0005883a 	mov	r2,zero
20094600:	f800283a 	ret

20094604 <_putc_r>:
20094604:	defffc04 	addi	sp,sp,-16
20094608:	dc000215 	stw	r16,8(sp)
2009460c:	dfc00315 	stw	ra,12(sp)
20094610:	2021883a 	mov	r16,r4
20094614:	20000226 	beq	r4,zero,20094620 <_putc_r+0x1c>
20094618:	20800e17 	ldw	r2,56(r4)
2009461c:	10001b26 	beq	r2,zero,2009468c <_putc_r+0x88>
20094620:	30800217 	ldw	r2,8(r6)
20094624:	10bfffc4 	addi	r2,r2,-1
20094628:	30800215 	stw	r2,8(r6)
2009462c:	10000a16 	blt	r2,zero,20094658 <_putc_r+0x54>
20094630:	30800017 	ldw	r2,0(r6)
20094634:	11400005 	stb	r5,0(r2)
20094638:	30800017 	ldw	r2,0(r6)
2009463c:	10c00044 	addi	r3,r2,1
20094640:	30c00015 	stw	r3,0(r6)
20094644:	10800003 	ldbu	r2,0(r2)
20094648:	dfc00317 	ldw	ra,12(sp)
2009464c:	dc000217 	ldw	r16,8(sp)
20094650:	dec00404 	addi	sp,sp,16
20094654:	f800283a 	ret
20094658:	30c00617 	ldw	r3,24(r6)
2009465c:	10c00616 	blt	r2,r3,20094678 <_putc_r+0x74>
20094660:	30800017 	ldw	r2,0(r6)
20094664:	00c00284 	movi	r3,10
20094668:	11400005 	stb	r5,0(r2)
2009466c:	30800017 	ldw	r2,0(r6)
20094670:	11400003 	ldbu	r5,0(r2)
20094674:	28fff11e 	bne	r5,r3,2009463c <__flash_rwdata_start+0xffff5a68>
20094678:	8009883a 	mov	r4,r16
2009467c:	dfc00317 	ldw	ra,12(sp)
20094680:	dc000217 	ldw	r16,8(sp)
20094684:	dec00404 	addi	sp,sp,16
20094688:	00976b41 	jmpi	200976b4 <__swbuf_r>
2009468c:	d9400015 	stw	r5,0(sp)
20094690:	d9800115 	stw	r6,4(sp)
20094694:	00926dc0 	call	200926dc <__sinit>
20094698:	d9800117 	ldw	r6,4(sp)
2009469c:	d9400017 	ldw	r5,0(sp)
200946a0:	003fdf06 	br	20094620 <__flash_rwdata_start+0xffff5a4c>

200946a4 <putc>:
200946a4:	00800034 	movhi	r2,0
200946a8:	defffc04 	addi	sp,sp,-16
200946ac:	108a9204 	addi	r2,r2,10824
200946b0:	dc400115 	stw	r17,4(sp)
200946b4:	14400017 	ldw	r17,0(r2)
200946b8:	dc800215 	stw	r18,8(sp)
200946bc:	dc000015 	stw	r16,0(sp)
200946c0:	dfc00315 	stw	ra,12(sp)
200946c4:	2025883a 	mov	r18,r4
200946c8:	2821883a 	mov	r16,r5
200946cc:	88000226 	beq	r17,zero,200946d8 <putc+0x34>
200946d0:	88800e17 	ldw	r2,56(r17)
200946d4:	10001a26 	beq	r2,zero,20094740 <putc+0x9c>
200946d8:	80800217 	ldw	r2,8(r16)
200946dc:	10bfffc4 	addi	r2,r2,-1
200946e0:	80800215 	stw	r2,8(r16)
200946e4:	10000c16 	blt	r2,zero,20094718 <putc+0x74>
200946e8:	80800017 	ldw	r2,0(r16)
200946ec:	14800005 	stb	r18,0(r2)
200946f0:	80800017 	ldw	r2,0(r16)
200946f4:	10c00044 	addi	r3,r2,1
200946f8:	80c00015 	stw	r3,0(r16)
200946fc:	10800003 	ldbu	r2,0(r2)
20094700:	dfc00317 	ldw	ra,12(sp)
20094704:	dc800217 	ldw	r18,8(sp)
20094708:	dc400117 	ldw	r17,4(sp)
2009470c:	dc000017 	ldw	r16,0(sp)
20094710:	dec00404 	addi	sp,sp,16
20094714:	f800283a 	ret
20094718:	80c00617 	ldw	r3,24(r16)
2009471c:	10c00b16 	blt	r2,r3,2009474c <putc+0xa8>
20094720:	80800017 	ldw	r2,0(r16)
20094724:	00c00284 	movi	r3,10
20094728:	14800005 	stb	r18,0(r2)
2009472c:	80800017 	ldw	r2,0(r16)
20094730:	11400003 	ldbu	r5,0(r2)
20094734:	28ffef1e 	bne	r5,r3,200946f4 <__flash_rwdata_start+0xffff5b20>
20094738:	8809883a 	mov	r4,r17
2009473c:	00000506 	br	20094754 <putc+0xb0>
20094740:	8809883a 	mov	r4,r17
20094744:	00926dc0 	call	200926dc <__sinit>
20094748:	003fe306 	br	200946d8 <__flash_rwdata_start+0xffff5b04>
2009474c:	8809883a 	mov	r4,r17
20094750:	900b883a 	mov	r5,r18
20094754:	800d883a 	mov	r6,r16
20094758:	dfc00317 	ldw	ra,12(sp)
2009475c:	dc800217 	ldw	r18,8(sp)
20094760:	dc400117 	ldw	r17,4(sp)
20094764:	dc000017 	ldw	r16,0(sp)
20094768:	dec00404 	addi	sp,sp,16
2009476c:	00976b41 	jmpi	200976b4 <__swbuf_r>

20094770 <_realloc_r>:
20094770:	defff604 	addi	sp,sp,-40
20094774:	dd000415 	stw	r20,16(sp)
20094778:	dc400115 	stw	r17,4(sp)
2009477c:	dfc00915 	stw	ra,36(sp)
20094780:	df000815 	stw	fp,32(sp)
20094784:	ddc00715 	stw	r23,28(sp)
20094788:	dd800615 	stw	r22,24(sp)
2009478c:	dd400515 	stw	r21,20(sp)
20094790:	dcc00315 	stw	r19,12(sp)
20094794:	dc800215 	stw	r18,8(sp)
20094798:	dc000015 	stw	r16,0(sp)
2009479c:	2829883a 	mov	r20,r5
200947a0:	3023883a 	mov	r17,r6
200947a4:	2800ad26 	beq	r5,zero,20094a5c <_realloc_r+0x2ec>
200947a8:	2025883a 	mov	r18,r4
200947ac:	0099cc00 	call	20099cc0 <__malloc_lock>
200947b0:	a0ffff17 	ldw	r3,-4(r20)
200947b4:	043fff04 	movi	r16,-4
200947b8:	890002c4 	addi	r4,r17,11
200947bc:	01c00584 	movi	r7,22
200947c0:	a57ffe04 	addi	r21,r20,-8
200947c4:	1c20703a 	and	r16,r3,r16
200947c8:	39001d2e 	bgeu	r7,r4,20094840 <_realloc_r+0xd0>
200947cc:	05bffe04 	movi	r22,-8
200947d0:	25ac703a 	and	r22,r4,r22
200947d4:	b00f883a 	mov	r7,r22
200947d8:	b0006516 	blt	r22,zero,20094970 <_realloc_r+0x200>
200947dc:	b4406436 	bltu	r22,r17,20094970 <_realloc_r+0x200>
200947e0:	81c01a0e 	bge	r16,r7,2009484c <_realloc_r+0xdc>
200947e4:	07000034 	movhi	fp,0
200947e8:	e7044504 	addi	fp,fp,4372
200947ec:	e1400217 	ldw	r5,8(fp)
200947f0:	ac11883a 	add	r8,r21,r16
200947f4:	2a006226 	beq	r5,r8,20094980 <_realloc_r+0x210>
200947f8:	41800117 	ldw	r6,4(r8)
200947fc:	027fff84 	movi	r9,-2
20094800:	3252703a 	and	r9,r6,r9
20094804:	4253883a 	add	r9,r8,r9
20094808:	49000117 	ldw	r4,4(r9)
2009480c:	2100004c 	andi	r4,r4,1
20094810:	2000281e 	bne	r4,zero,200948b4 <_realloc_r+0x144>
20094814:	00bfff04 	movi	r2,-4
20094818:	3084703a 	and	r2,r6,r2
2009481c:	1409883a 	add	r4,r2,r16
20094820:	21c05e16 	blt	r4,r7,2009499c <_realloc_r+0x22c>
20094824:	40800317 	ldw	r2,12(r8)
20094828:	41400217 	ldw	r5,8(r8)
2009482c:	a023883a 	mov	r17,r20
20094830:	2021883a 	mov	r16,r4
20094834:	28800315 	stw	r2,12(r5)
20094838:	11400215 	stw	r5,8(r2)
2009483c:	00000406 	br	20094850 <_realloc_r+0xe0>
20094840:	01c00404 	movi	r7,16
20094844:	382d883a 	mov	r22,r7
20094848:	003fe406 	br	200947dc <__flash_rwdata_start+0xffff5c08>
2009484c:	a023883a 	mov	r17,r20
20094850:	858fc83a 	sub	r7,r16,r22
20094854:	008003c4 	movi	r2,15
20094858:	18c0004c 	andi	r3,r3,1
2009485c:	11c07236 	bltu	r2,r7,20094a28 <_realloc_r+0x2b8>
20094860:	1c06b03a 	or	r3,r3,r16
20094864:	a8c00115 	stw	r3,4(r21)
20094868:	ac21883a 	add	r16,r21,r16
2009486c:	80800117 	ldw	r2,4(r16)
20094870:	10800054 	ori	r2,r2,1
20094874:	80800115 	stw	r2,4(r16)
20094878:	9009883a 	mov	r4,r18
2009487c:	0099ce00 	call	20099ce0 <__malloc_unlock>
20094880:	8805883a 	mov	r2,r17
20094884:	dfc00917 	ldw	ra,36(sp)
20094888:	df000817 	ldw	fp,32(sp)
2009488c:	ddc00717 	ldw	r23,28(sp)
20094890:	dd800617 	ldw	r22,24(sp)
20094894:	dd400517 	ldw	r21,20(sp)
20094898:	dd000417 	ldw	r20,16(sp)
2009489c:	dcc00317 	ldw	r19,12(sp)
200948a0:	dc800217 	ldw	r18,8(sp)
200948a4:	dc400117 	ldw	r17,4(sp)
200948a8:	dc000017 	ldw	r16,0(sp)
200948ac:	dec00a04 	addi	sp,sp,40
200948b0:	f800283a 	ret
200948b4:	18c0004c 	andi	r3,r3,1
200948b8:	1800081e 	bne	r3,zero,200948dc <_realloc_r+0x16c>
200948bc:	a4fffe17 	ldw	r19,-8(r20)
200948c0:	00bfff04 	movi	r2,-4
200948c4:	ace7c83a 	sub	r19,r21,r19
200948c8:	98c00117 	ldw	r3,4(r19)
200948cc:	1886703a 	and	r3,r3,r2
200948d0:	98000226 	beq	r19,zero,200948dc <_realloc_r+0x16c>
200948d4:	1c2f883a 	add	r23,r3,r16
200948d8:	b9c06d0e 	bge	r23,r7,20094a90 <_realloc_r+0x320>
200948dc:	880b883a 	mov	r5,r17
200948e0:	9009883a 	mov	r4,r18
200948e4:	008b5780 	call	2008b578 <_malloc_r>
200948e8:	1023883a 	mov	r17,r2
200948ec:	1000ef26 	beq	r2,zero,20094cac <_realloc_r+0x53c>
200948f0:	a0ffff17 	ldw	r3,-4(r20)
200948f4:	113ffe04 	addi	r4,r2,-8
200948f8:	00bfff84 	movi	r2,-2
200948fc:	1884703a 	and	r2,r3,r2
20094900:	a885883a 	add	r2,r21,r2
20094904:	2080bf26 	beq	r4,r2,20094c04 <_realloc_r+0x494>
20094908:	81bfff04 	addi	r6,r16,-4
2009490c:	00800904 	movi	r2,36
20094910:	11808936 	bltu	r2,r6,20094b38 <_realloc_r+0x3c8>
20094914:	00c004c4 	movi	r3,19
20094918:	19806c2e 	bgeu	r3,r6,20094acc <_realloc_r+0x35c>
2009491c:	a0c00017 	ldw	r3,0(r20)
20094920:	88c00015 	stw	r3,0(r17)
20094924:	a0c00117 	ldw	r3,4(r20)
20094928:	88c00115 	stw	r3,4(r17)
2009492c:	00c006c4 	movi	r3,27
20094930:	1980ac36 	bltu	r3,r6,20094be4 <_realloc_r+0x474>
20094934:	88800204 	addi	r2,r17,8
20094938:	a0c00204 	addi	r3,r20,8
2009493c:	19000017 	ldw	r4,0(r3)
20094940:	11000015 	stw	r4,0(r2)
20094944:	19000117 	ldw	r4,4(r3)
20094948:	11000115 	stw	r4,4(r2)
2009494c:	18c00217 	ldw	r3,8(r3)
20094950:	10c00215 	stw	r3,8(r2)
20094954:	a00b883a 	mov	r5,r20
20094958:	9009883a 	mov	r4,r18
2009495c:	00928500 	call	20092850 <_free_r>
20094960:	9009883a 	mov	r4,r18
20094964:	0099ce00 	call	20099ce0 <__malloc_unlock>
20094968:	8805883a 	mov	r2,r17
2009496c:	003fc506 	br	20094884 <__flash_rwdata_start+0xffff5cb0>
20094970:	00800304 	movi	r2,12
20094974:	90800015 	stw	r2,0(r18)
20094978:	0005883a 	mov	r2,zero
2009497c:	003fc106 	br	20094884 <__flash_rwdata_start+0xffff5cb0>
20094980:	29800117 	ldw	r6,4(r5)
20094984:	00bfff04 	movi	r2,-4
20094988:	b1000404 	addi	r4,r22,16
2009498c:	3084703a 	and	r2,r6,r2
20094990:	140d883a 	add	r6,r2,r16
20094994:	31005b0e 	bge	r6,r4,20094b04 <_realloc_r+0x394>
20094998:	2811883a 	mov	r8,r5
2009499c:	18c0004c 	andi	r3,r3,1
200949a0:	183fce1e 	bne	r3,zero,200948dc <__flash_rwdata_start+0xffff5d08>
200949a4:	a4fffe17 	ldw	r19,-8(r20)
200949a8:	00ffff04 	movi	r3,-4
200949ac:	ace7c83a 	sub	r19,r21,r19
200949b0:	99000117 	ldw	r4,4(r19)
200949b4:	20c6703a 	and	r3,r4,r3
200949b8:	403fc526 	beq	r8,zero,200948d0 <__flash_rwdata_start+0xffff5cfc>
200949bc:	1c2f883a 	add	r23,r3,r16
200949c0:	b8af883a 	add	r23,r23,r2
200949c4:	41406026 	beq	r8,r5,20094b48 <_realloc_r+0x3d8>
200949c8:	b9ffc116 	blt	r23,r7,200948d0 <__flash_rwdata_start+0xffff5cfc>
200949cc:	40c00217 	ldw	r3,8(r8)
200949d0:	40800317 	ldw	r2,12(r8)
200949d4:	81bfff04 	addi	r6,r16,-4
200949d8:	01000904 	movi	r4,36
200949dc:	18800315 	stw	r2,12(r3)
200949e0:	10c00215 	stw	r3,8(r2)
200949e4:	99400217 	ldw	r5,8(r19)
200949e8:	98c00317 	ldw	r3,12(r19)
200949ec:	9c400204 	addi	r17,r19,8
200949f0:	28c00315 	stw	r3,12(r5)
200949f4:	19400215 	stw	r5,8(r3)
200949f8:	21802d36 	bltu	r4,r6,20094ab0 <_realloc_r+0x340>
200949fc:	008004c4 	movi	r2,19
20094a00:	1180352e 	bgeu	r2,r6,20094ad8 <_realloc_r+0x368>
20094a04:	a0800017 	ldw	r2,0(r20)
20094a08:	98800215 	stw	r2,8(r19)
20094a0c:	a0800117 	ldw	r2,4(r20)
20094a10:	98800315 	stw	r2,12(r19)
20094a14:	008006c4 	movi	r2,27
20094a18:	11808036 	bltu	r2,r6,20094c1c <_realloc_r+0x4ac>
20094a1c:	98c00404 	addi	r3,r19,16
20094a20:	a5000204 	addi	r20,r20,8
20094a24:	00002d06 	br	20094adc <_realloc_r+0x36c>
20094a28:	1d86b03a 	or	r3,r3,r22
20094a2c:	ad8b883a 	add	r5,r21,r22
20094a30:	a8c00115 	stw	r3,4(r21)
20094a34:	38800054 	ori	r2,r7,1
20094a38:	28800115 	stw	r2,4(r5)
20094a3c:	29cf883a 	add	r7,r5,r7
20094a40:	38800117 	ldw	r2,4(r7)
20094a44:	9009883a 	mov	r4,r18
20094a48:	29400204 	addi	r5,r5,8
20094a4c:	10800054 	ori	r2,r2,1
20094a50:	38800115 	stw	r2,4(r7)
20094a54:	00928500 	call	20092850 <_free_r>
20094a58:	003f8706 	br	20094878 <__flash_rwdata_start+0xffff5ca4>
20094a5c:	300b883a 	mov	r5,r6
20094a60:	dfc00917 	ldw	ra,36(sp)
20094a64:	df000817 	ldw	fp,32(sp)
20094a68:	ddc00717 	ldw	r23,28(sp)
20094a6c:	dd800617 	ldw	r22,24(sp)
20094a70:	dd400517 	ldw	r21,20(sp)
20094a74:	dd000417 	ldw	r20,16(sp)
20094a78:	dcc00317 	ldw	r19,12(sp)
20094a7c:	dc800217 	ldw	r18,8(sp)
20094a80:	dc400117 	ldw	r17,4(sp)
20094a84:	dc000017 	ldw	r16,0(sp)
20094a88:	dec00a04 	addi	sp,sp,40
20094a8c:	008b5781 	jmpi	2008b578 <_malloc_r>
20094a90:	98800317 	ldw	r2,12(r19)
20094a94:	98c00217 	ldw	r3,8(r19)
20094a98:	81bfff04 	addi	r6,r16,-4
20094a9c:	01000904 	movi	r4,36
20094aa0:	18800315 	stw	r2,12(r3)
20094aa4:	10c00215 	stw	r3,8(r2)
20094aa8:	9c400204 	addi	r17,r19,8
20094aac:	21bfd32e 	bgeu	r4,r6,200949fc <__flash_rwdata_start+0xffff5e28>
20094ab0:	8809883a 	mov	r4,r17
20094ab4:	a00b883a 	mov	r5,r20
20094ab8:	00935080 	call	20093508 <memmove>
20094abc:	98c00117 	ldw	r3,4(r19)
20094ac0:	b821883a 	mov	r16,r23
20094ac4:	982b883a 	mov	r21,r19
20094ac8:	003f6106 	br	20094850 <__flash_rwdata_start+0xffff5c7c>
20094acc:	8805883a 	mov	r2,r17
20094ad0:	a007883a 	mov	r3,r20
20094ad4:	003f9906 	br	2009493c <__flash_rwdata_start+0xffff5d68>
20094ad8:	8807883a 	mov	r3,r17
20094adc:	a0800017 	ldw	r2,0(r20)
20094ae0:	b821883a 	mov	r16,r23
20094ae4:	982b883a 	mov	r21,r19
20094ae8:	18800015 	stw	r2,0(r3)
20094aec:	a0800117 	ldw	r2,4(r20)
20094af0:	18800115 	stw	r2,4(r3)
20094af4:	a0800217 	ldw	r2,8(r20)
20094af8:	18800215 	stw	r2,8(r3)
20094afc:	98c00117 	ldw	r3,4(r19)
20094b00:	003f5306 	br	20094850 <__flash_rwdata_start+0xffff5c7c>
20094b04:	adab883a 	add	r21,r21,r22
20094b08:	3585c83a 	sub	r2,r6,r22
20094b0c:	e5400215 	stw	r21,8(fp)
20094b10:	10800054 	ori	r2,r2,1
20094b14:	a8800115 	stw	r2,4(r21)
20094b18:	a0bfff17 	ldw	r2,-4(r20)
20094b1c:	9009883a 	mov	r4,r18
20094b20:	1080004c 	andi	r2,r2,1
20094b24:	b0acb03a 	or	r22,r22,r2
20094b28:	a5bfff15 	stw	r22,-4(r20)
20094b2c:	0099ce00 	call	20099ce0 <__malloc_unlock>
20094b30:	a005883a 	mov	r2,r20
20094b34:	003f5306 	br	20094884 <__flash_rwdata_start+0xffff5cb0>
20094b38:	8809883a 	mov	r4,r17
20094b3c:	a00b883a 	mov	r5,r20
20094b40:	00935080 	call	20093508 <memmove>
20094b44:	003f8306 	br	20094954 <__flash_rwdata_start+0xffff5d80>
20094b48:	b0800404 	addi	r2,r22,16
20094b4c:	b8bf6016 	blt	r23,r2,200948d0 <__flash_rwdata_start+0xffff5cfc>
20094b50:	98800317 	ldw	r2,12(r19)
20094b54:	98c00217 	ldw	r3,8(r19)
20094b58:	81bfff04 	addi	r6,r16,-4
20094b5c:	01000904 	movi	r4,36
20094b60:	18800315 	stw	r2,12(r3)
20094b64:	10c00215 	stw	r3,8(r2)
20094b68:	9c400204 	addi	r17,r19,8
20094b6c:	21804336 	bltu	r4,r6,20094c7c <_realloc_r+0x50c>
20094b70:	008004c4 	movi	r2,19
20094b74:	11803f2e 	bgeu	r2,r6,20094c74 <_realloc_r+0x504>
20094b78:	a0800017 	ldw	r2,0(r20)
20094b7c:	98800215 	stw	r2,8(r19)
20094b80:	a0800117 	ldw	r2,4(r20)
20094b84:	98800315 	stw	r2,12(r19)
20094b88:	008006c4 	movi	r2,27
20094b8c:	11803f36 	bltu	r2,r6,20094c8c <_realloc_r+0x51c>
20094b90:	98800404 	addi	r2,r19,16
20094b94:	a5000204 	addi	r20,r20,8
20094b98:	a0c00017 	ldw	r3,0(r20)
20094b9c:	10c00015 	stw	r3,0(r2)
20094ba0:	a0c00117 	ldw	r3,4(r20)
20094ba4:	10c00115 	stw	r3,4(r2)
20094ba8:	a0c00217 	ldw	r3,8(r20)
20094bac:	10c00215 	stw	r3,8(r2)
20094bb0:	9d87883a 	add	r3,r19,r22
20094bb4:	bd85c83a 	sub	r2,r23,r22
20094bb8:	e0c00215 	stw	r3,8(fp)
20094bbc:	10800054 	ori	r2,r2,1
20094bc0:	18800115 	stw	r2,4(r3)
20094bc4:	98800117 	ldw	r2,4(r19)
20094bc8:	9009883a 	mov	r4,r18
20094bcc:	1080004c 	andi	r2,r2,1
20094bd0:	b0acb03a 	or	r22,r22,r2
20094bd4:	9d800115 	stw	r22,4(r19)
20094bd8:	0099ce00 	call	20099ce0 <__malloc_unlock>
20094bdc:	8805883a 	mov	r2,r17
20094be0:	003f2806 	br	20094884 <__flash_rwdata_start+0xffff5cb0>
20094be4:	a0c00217 	ldw	r3,8(r20)
20094be8:	88c00215 	stw	r3,8(r17)
20094bec:	a0c00317 	ldw	r3,12(r20)
20094bf0:	88c00315 	stw	r3,12(r17)
20094bf4:	30801126 	beq	r6,r2,20094c3c <_realloc_r+0x4cc>
20094bf8:	88800404 	addi	r2,r17,16
20094bfc:	a0c00404 	addi	r3,r20,16
20094c00:	003f4e06 	br	2009493c <__flash_rwdata_start+0xffff5d68>
20094c04:	893fff17 	ldw	r4,-4(r17)
20094c08:	00bfff04 	movi	r2,-4
20094c0c:	a023883a 	mov	r17,r20
20094c10:	2084703a 	and	r2,r4,r2
20094c14:	80a1883a 	add	r16,r16,r2
20094c18:	003f0d06 	br	20094850 <__flash_rwdata_start+0xffff5c7c>
20094c1c:	a0800217 	ldw	r2,8(r20)
20094c20:	98800415 	stw	r2,16(r19)
20094c24:	a0800317 	ldw	r2,12(r20)
20094c28:	98800515 	stw	r2,20(r19)
20094c2c:	31000a26 	beq	r6,r4,20094c58 <_realloc_r+0x4e8>
20094c30:	98c00604 	addi	r3,r19,24
20094c34:	a5000404 	addi	r20,r20,16
20094c38:	003fa806 	br	20094adc <__flash_rwdata_start+0xffff5f08>
20094c3c:	a1000417 	ldw	r4,16(r20)
20094c40:	88800604 	addi	r2,r17,24
20094c44:	a0c00604 	addi	r3,r20,24
20094c48:	89000415 	stw	r4,16(r17)
20094c4c:	a1000517 	ldw	r4,20(r20)
20094c50:	89000515 	stw	r4,20(r17)
20094c54:	003f3906 	br	2009493c <__flash_rwdata_start+0xffff5d68>
20094c58:	a0800417 	ldw	r2,16(r20)
20094c5c:	a5000604 	addi	r20,r20,24
20094c60:	98c00804 	addi	r3,r19,32
20094c64:	98800615 	stw	r2,24(r19)
20094c68:	a0bfff17 	ldw	r2,-4(r20)
20094c6c:	98800715 	stw	r2,28(r19)
20094c70:	003f9a06 	br	20094adc <__flash_rwdata_start+0xffff5f08>
20094c74:	8805883a 	mov	r2,r17
20094c78:	003fc706 	br	20094b98 <__flash_rwdata_start+0xffff5fc4>
20094c7c:	8809883a 	mov	r4,r17
20094c80:	a00b883a 	mov	r5,r20
20094c84:	00935080 	call	20093508 <memmove>
20094c88:	003fc906 	br	20094bb0 <__flash_rwdata_start+0xffff5fdc>
20094c8c:	a0800217 	ldw	r2,8(r20)
20094c90:	98800415 	stw	r2,16(r19)
20094c94:	a0800317 	ldw	r2,12(r20)
20094c98:	98800515 	stw	r2,20(r19)
20094c9c:	31000726 	beq	r6,r4,20094cbc <_realloc_r+0x54c>
20094ca0:	98800604 	addi	r2,r19,24
20094ca4:	a5000404 	addi	r20,r20,16
20094ca8:	003fbb06 	br	20094b98 <__flash_rwdata_start+0xffff5fc4>
20094cac:	9009883a 	mov	r4,r18
20094cb0:	0099ce00 	call	20099ce0 <__malloc_unlock>
20094cb4:	0005883a 	mov	r2,zero
20094cb8:	003ef206 	br	20094884 <__flash_rwdata_start+0xffff5cb0>
20094cbc:	a0c00417 	ldw	r3,16(r20)
20094cc0:	a5000604 	addi	r20,r20,24
20094cc4:	98800804 	addi	r2,r19,32
20094cc8:	98c00615 	stw	r3,24(r19)
20094ccc:	a0ffff17 	ldw	r3,-4(r20)
20094cd0:	98c00715 	stw	r3,28(r19)
20094cd4:	003fb006 	br	20094b98 <__flash_rwdata_start+0xffff5fc4>

20094cd8 <__fpclassifyd>:
20094cd8:	00a00034 	movhi	r2,32768
20094cdc:	10bfffc4 	addi	r2,r2,-1
20094ce0:	2884703a 	and	r2,r5,r2
20094ce4:	10000726 	beq	r2,zero,20094d04 <__fpclassifyd+0x2c>
20094ce8:	00fffc34 	movhi	r3,65520
20094cec:	019ff834 	movhi	r6,32736
20094cf0:	28c7883a 	add	r3,r5,r3
20094cf4:	31bfffc4 	addi	r6,r6,-1
20094cf8:	30c00536 	bltu	r6,r3,20094d10 <__fpclassifyd+0x38>
20094cfc:	00800104 	movi	r2,4
20094d00:	f800283a 	ret
20094d04:	2000021e 	bne	r4,zero,20094d10 <__fpclassifyd+0x38>
20094d08:	00800084 	movi	r2,2
20094d0c:	f800283a 	ret
20094d10:	00dffc34 	movhi	r3,32752
20094d14:	019ff834 	movhi	r6,32736
20094d18:	28cb883a 	add	r5,r5,r3
20094d1c:	31bfffc4 	addi	r6,r6,-1
20094d20:	317ff62e 	bgeu	r6,r5,20094cfc <__flash_rwdata_start+0xffff6128>
20094d24:	01400434 	movhi	r5,16
20094d28:	297fffc4 	addi	r5,r5,-1
20094d2c:	28800236 	bltu	r5,r2,20094d38 <__fpclassifyd+0x60>
20094d30:	008000c4 	movi	r2,3
20094d34:	f800283a 	ret
20094d38:	10c00226 	beq	r2,r3,20094d44 <__fpclassifyd+0x6c>
20094d3c:	0005883a 	mov	r2,zero
20094d40:	f800283a 	ret
20094d44:	2005003a 	cmpeq	r2,r4,zero
20094d48:	f800283a 	ret

20094d4c <__sread>:
20094d4c:	defffe04 	addi	sp,sp,-8
20094d50:	dc000015 	stw	r16,0(sp)
20094d54:	2821883a 	mov	r16,r5
20094d58:	2940038f 	ldh	r5,14(r5)
20094d5c:	dfc00115 	stw	ra,4(sp)
20094d60:	0097d680 	call	20097d68 <_read_r>
20094d64:	10000716 	blt	r2,zero,20094d84 <__sread+0x38>
20094d68:	80c01417 	ldw	r3,80(r16)
20094d6c:	1887883a 	add	r3,r3,r2
20094d70:	80c01415 	stw	r3,80(r16)
20094d74:	dfc00117 	ldw	ra,4(sp)
20094d78:	dc000017 	ldw	r16,0(sp)
20094d7c:	dec00204 	addi	sp,sp,8
20094d80:	f800283a 	ret
20094d84:	80c0030b 	ldhu	r3,12(r16)
20094d88:	18fbffcc 	andi	r3,r3,61439
20094d8c:	80c0030d 	sth	r3,12(r16)
20094d90:	dfc00117 	ldw	ra,4(sp)
20094d94:	dc000017 	ldw	r16,0(sp)
20094d98:	dec00204 	addi	sp,sp,8
20094d9c:	f800283a 	ret

20094da0 <__seofread>:
20094da0:	0005883a 	mov	r2,zero
20094da4:	f800283a 	ret

20094da8 <__swrite>:
20094da8:	2880030b 	ldhu	r2,12(r5)
20094dac:	defffb04 	addi	sp,sp,-20
20094db0:	dcc00315 	stw	r19,12(sp)
20094db4:	dc800215 	stw	r18,8(sp)
20094db8:	dc400115 	stw	r17,4(sp)
20094dbc:	dc000015 	stw	r16,0(sp)
20094dc0:	dfc00415 	stw	ra,16(sp)
20094dc4:	10c0400c 	andi	r3,r2,256
20094dc8:	2821883a 	mov	r16,r5
20094dcc:	2027883a 	mov	r19,r4
20094dd0:	3025883a 	mov	r18,r6
20094dd4:	3823883a 	mov	r17,r7
20094dd8:	18000526 	beq	r3,zero,20094df0 <__swrite+0x48>
20094ddc:	2940038f 	ldh	r5,14(r5)
20094de0:	000d883a 	mov	r6,zero
20094de4:	01c00084 	movi	r7,2
20094de8:	0097d0c0 	call	20097d0c <_lseek_r>
20094dec:	8080030b 	ldhu	r2,12(r16)
20094df0:	8140038f 	ldh	r5,14(r16)
20094df4:	10bbffcc 	andi	r2,r2,61439
20094df8:	9809883a 	mov	r4,r19
20094dfc:	900d883a 	mov	r6,r18
20094e00:	880f883a 	mov	r7,r17
20094e04:	8080030d 	sth	r2,12(r16)
20094e08:	dfc00417 	ldw	ra,16(sp)
20094e0c:	dcc00317 	ldw	r19,12(sp)
20094e10:	dc800217 	ldw	r18,8(sp)
20094e14:	dc400117 	ldw	r17,4(sp)
20094e18:	dc000017 	ldw	r16,0(sp)
20094e1c:	dec00504 	addi	sp,sp,20
20094e20:	00978081 	jmpi	20097808 <_write_r>

20094e24 <__sseek>:
20094e24:	defffe04 	addi	sp,sp,-8
20094e28:	dc000015 	stw	r16,0(sp)
20094e2c:	2821883a 	mov	r16,r5
20094e30:	2940038f 	ldh	r5,14(r5)
20094e34:	dfc00115 	stw	ra,4(sp)
20094e38:	0097d0c0 	call	20097d0c <_lseek_r>
20094e3c:	00ffffc4 	movi	r3,-1
20094e40:	10c00826 	beq	r2,r3,20094e64 <__sseek+0x40>
20094e44:	80c0030b 	ldhu	r3,12(r16)
20094e48:	80801415 	stw	r2,80(r16)
20094e4c:	18c40014 	ori	r3,r3,4096
20094e50:	80c0030d 	sth	r3,12(r16)
20094e54:	dfc00117 	ldw	ra,4(sp)
20094e58:	dc000017 	ldw	r16,0(sp)
20094e5c:	dec00204 	addi	sp,sp,8
20094e60:	f800283a 	ret
20094e64:	80c0030b 	ldhu	r3,12(r16)
20094e68:	18fbffcc 	andi	r3,r3,61439
20094e6c:	80c0030d 	sth	r3,12(r16)
20094e70:	dfc00117 	ldw	ra,4(sp)
20094e74:	dc000017 	ldw	r16,0(sp)
20094e78:	dec00204 	addi	sp,sp,8
20094e7c:	f800283a 	ret

20094e80 <__sclose>:
20094e80:	2940038f 	ldh	r5,14(r5)
20094e84:	00978641 	jmpi	20097864 <_close_r>

20094e88 <strchr>:
20094e88:	2ac03fcc 	andi	r11,r5,255
20094e8c:	2815883a 	mov	r10,r5
20094e90:	208000cc 	andi	r2,r4,3
20094e94:	58003726 	beq	r11,zero,20094f74 <strchr+0xec>
20094e98:	10000b26 	beq	r2,zero,20094ec8 <strchr+0x40>
20094e9c:	20800003 	ldbu	r2,0(r4)
20094ea0:	10003226 	beq	r2,zero,20094f6c <strchr+0xe4>
20094ea4:	28c03fcc 	andi	r3,r5,255
20094ea8:	5880041e 	bne	r11,r2,20094ebc <strchr+0x34>
20094eac:	00004d06 	br	20094fe4 <strchr+0x15c>
20094eb0:	20800003 	ldbu	r2,0(r4)
20094eb4:	10002d26 	beq	r2,zero,20094f6c <strchr+0xe4>
20094eb8:	18804a26 	beq	r3,r2,20094fe4 <strchr+0x15c>
20094ebc:	21000044 	addi	r4,r4,1
20094ec0:	208000cc 	andi	r2,r4,3
20094ec4:	103ffa1e 	bne	r2,zero,20094eb0 <__flash_rwdata_start+0xffff62dc>
20094ec8:	29403fcc 	andi	r5,r5,255
20094ecc:	280e923a 	slli	r7,r5,8
20094ed0:	20800017 	ldw	r2,0(r4)
20094ed4:	01bfbff4 	movhi	r6,65279
20094ed8:	394ab03a 	or	r5,r7,r5
20094edc:	280e943a 	slli	r7,r5,16
20094ee0:	31bfbfc4 	addi	r6,r6,-257
20094ee4:	0090303a 	nor	r8,zero,r2
20094ee8:	394eb03a 	or	r7,r7,r5
20094eec:	1187883a 	add	r3,r2,r6
20094ef0:	11c4f03a 	xor	r2,r2,r7
20094ef4:	008a303a 	nor	r5,zero,r2
20094ef8:	1185883a 	add	r2,r2,r6
20094efc:	03202074 	movhi	r12,32897
20094f00:	2884703a 	and	r2,r5,r2
20094f04:	40c6703a 	and	r3,r8,r3
20094f08:	63202004 	addi	r12,r12,-32640
20094f0c:	10c4b03a 	or	r2,r2,r3
20094f10:	1304703a 	and	r2,r2,r12
20094f14:	10000c1e 	bne	r2,zero,20094f48 <strchr+0xc0>
20094f18:	21000104 	addi	r4,r4,4
20094f1c:	20800017 	ldw	r2,0(r4)
20094f20:	3886f03a 	xor	r3,r7,r2
20094f24:	00d2303a 	nor	r9,zero,r3
20094f28:	198b883a 	add	r5,r3,r6
20094f2c:	0090303a 	nor	r8,zero,r2
20094f30:	1187883a 	add	r3,r2,r6
20094f34:	494a703a 	and	r5,r9,r5
20094f38:	40c4703a 	and	r2,r8,r3
20094f3c:	2884b03a 	or	r2,r5,r2
20094f40:	1304703a 	and	r2,r2,r12
20094f44:	103ff426 	beq	r2,zero,20094f18 <__flash_rwdata_start+0xffff6344>
20094f48:	20800003 	ldbu	r2,0(r4)
20094f4c:	10000726 	beq	r2,zero,20094f6c <strchr+0xe4>
20094f50:	58802426 	beq	r11,r2,20094fe4 <strchr+0x15c>
20094f54:	50c03fcc 	andi	r3,r10,255
20094f58:	00000106 	br	20094f60 <strchr+0xd8>
20094f5c:	18802126 	beq	r3,r2,20094fe4 <strchr+0x15c>
20094f60:	21000044 	addi	r4,r4,1
20094f64:	20800003 	ldbu	r2,0(r4)
20094f68:	103ffc1e 	bne	r2,zero,20094f5c <__flash_rwdata_start+0xffff6388>
20094f6c:	0005883a 	mov	r2,zero
20094f70:	f800283a 	ret
20094f74:	10000526 	beq	r2,zero,20094f8c <strchr+0x104>
20094f78:	20800003 	ldbu	r2,0(r4)
20094f7c:	10001926 	beq	r2,zero,20094fe4 <strchr+0x15c>
20094f80:	21000044 	addi	r4,r4,1
20094f84:	208000cc 	andi	r2,r4,3
20094f88:	103ffb1e 	bne	r2,zero,20094f78 <__flash_rwdata_start+0xffff63a4>
20094f8c:	20800017 	ldw	r2,0(r4)
20094f90:	01bfbff4 	movhi	r6,65279
20094f94:	31bfbfc4 	addi	r6,r6,-257
20094f98:	0086303a 	nor	r3,zero,r2
20094f9c:	01602074 	movhi	r5,32897
20094fa0:	1185883a 	add	r2,r2,r6
20094fa4:	29602004 	addi	r5,r5,-32640
20094fa8:	10c4703a 	and	r2,r2,r3
20094fac:	1144703a 	and	r2,r2,r5
20094fb0:	10000a1e 	bne	r2,zero,20094fdc <strchr+0x154>
20094fb4:	21000104 	addi	r4,r4,4
20094fb8:	20800017 	ldw	r2,0(r4)
20094fbc:	1187883a 	add	r3,r2,r6
20094fc0:	0084303a 	nor	r2,zero,r2
20094fc4:	1884703a 	and	r2,r3,r2
20094fc8:	1144703a 	and	r2,r2,r5
20094fcc:	103ff926 	beq	r2,zero,20094fb4 <__flash_rwdata_start+0xffff63e0>
20094fd0:	20800003 	ldbu	r2,0(r4)
20094fd4:	10000326 	beq	r2,zero,20094fe4 <strchr+0x15c>
20094fd8:	21000044 	addi	r4,r4,1
20094fdc:	20800003 	ldbu	r2,0(r4)
20094fe0:	103ffd1e 	bne	r2,zero,20094fd8 <__flash_rwdata_start+0xffff6404>
20094fe4:	2005883a 	mov	r2,r4
20094fe8:	f800283a 	ret

20094fec <__ssprint_r>:
20094fec:	30800217 	ldw	r2,8(r6)
20094ff0:	defff604 	addi	sp,sp,-40
20094ff4:	ddc00715 	stw	r23,28(sp)
20094ff8:	dc800215 	stw	r18,8(sp)
20094ffc:	dfc00915 	stw	ra,36(sp)
20095000:	df000815 	stw	fp,32(sp)
20095004:	dd800615 	stw	r22,24(sp)
20095008:	dd400515 	stw	r21,20(sp)
2009500c:	dd000415 	stw	r20,16(sp)
20095010:	dcc00315 	stw	r19,12(sp)
20095014:	dc400115 	stw	r17,4(sp)
20095018:	dc000015 	stw	r16,0(sp)
2009501c:	3025883a 	mov	r18,r6
20095020:	35c00017 	ldw	r23,0(r6)
20095024:	10005626 	beq	r2,zero,20095180 <__ssprint_r+0x194>
20095028:	2027883a 	mov	r19,r4
2009502c:	28800217 	ldw	r2,8(r5)
20095030:	29000017 	ldw	r4,0(r5)
20095034:	2823883a 	mov	r17,r5
20095038:	0039883a 	mov	fp,zero
2009503c:	0021883a 	mov	r16,zero
20095040:	80003926 	beq	r16,zero,20095128 <__ssprint_r+0x13c>
20095044:	102b883a 	mov	r21,r2
20095048:	102d883a 	mov	r22,r2
2009504c:	80803a36 	bltu	r16,r2,20095138 <__ssprint_r+0x14c>
20095050:	88c0030b 	ldhu	r3,12(r17)
20095054:	1881200c 	andi	r2,r3,1152
20095058:	10002626 	beq	r2,zero,200950f4 <__ssprint_r+0x108>
2009505c:	88800517 	ldw	r2,20(r17)
20095060:	89400417 	ldw	r5,16(r17)
20095064:	81c00044 	addi	r7,r16,1
20095068:	108d883a 	add	r6,r2,r2
2009506c:	3085883a 	add	r2,r6,r2
20095070:	100cd7fa 	srli	r6,r2,31
20095074:	216dc83a 	sub	r22,r4,r5
20095078:	3d89883a 	add	r4,r7,r22
2009507c:	3085883a 	add	r2,r6,r2
20095080:	102bd07a 	srai	r21,r2,1
20095084:	a80d883a 	mov	r6,r21
20095088:	a900022e 	bgeu	r21,r4,20095094 <__ssprint_r+0xa8>
2009508c:	202b883a 	mov	r21,r4
20095090:	200d883a 	mov	r6,r4
20095094:	18c1000c 	andi	r3,r3,1024
20095098:	9809883a 	mov	r4,r19
2009509c:	18002926 	beq	r3,zero,20095144 <__ssprint_r+0x158>
200950a0:	300b883a 	mov	r5,r6
200950a4:	008b5780 	call	2008b578 <_malloc_r>
200950a8:	1029883a 	mov	r20,r2
200950ac:	10002b26 	beq	r2,zero,2009515c <__ssprint_r+0x170>
200950b0:	89400417 	ldw	r5,16(r17)
200950b4:	1009883a 	mov	r4,r2
200950b8:	b00d883a 	mov	r6,r22
200950bc:	008bd9c0 	call	2008bd9c <memcpy>
200950c0:	8880030b 	ldhu	r2,12(r17)
200950c4:	00fedfc4 	movi	r3,-1153
200950c8:	10c4703a 	and	r2,r2,r3
200950cc:	10802014 	ori	r2,r2,128
200950d0:	8880030d 	sth	r2,12(r17)
200950d4:	a589883a 	add	r4,r20,r22
200950d8:	adadc83a 	sub	r22,r21,r22
200950dc:	8d400515 	stw	r21,20(r17)
200950e0:	8d800215 	stw	r22,8(r17)
200950e4:	8d000415 	stw	r20,16(r17)
200950e8:	89000015 	stw	r4,0(r17)
200950ec:	802b883a 	mov	r21,r16
200950f0:	802d883a 	mov	r22,r16
200950f4:	e00b883a 	mov	r5,fp
200950f8:	b00d883a 	mov	r6,r22
200950fc:	00935080 	call	20093508 <memmove>
20095100:	88800217 	ldw	r2,8(r17)
20095104:	89000017 	ldw	r4,0(r17)
20095108:	90c00217 	ldw	r3,8(r18)
2009510c:	1545c83a 	sub	r2,r2,r21
20095110:	2589883a 	add	r4,r4,r22
20095114:	88800215 	stw	r2,8(r17)
20095118:	89000015 	stw	r4,0(r17)
2009511c:	1c21c83a 	sub	r16,r3,r16
20095120:	94000215 	stw	r16,8(r18)
20095124:	80001626 	beq	r16,zero,20095180 <__ssprint_r+0x194>
20095128:	bf000017 	ldw	fp,0(r23)
2009512c:	bc000117 	ldw	r16,4(r23)
20095130:	bdc00204 	addi	r23,r23,8
20095134:	003fc206 	br	20095040 <__flash_rwdata_start+0xffff646c>
20095138:	802b883a 	mov	r21,r16
2009513c:	802d883a 	mov	r22,r16
20095140:	003fec06 	br	200950f4 <__flash_rwdata_start+0xffff6520>
20095144:	00947700 	call	20094770 <_realloc_r>
20095148:	1029883a 	mov	r20,r2
2009514c:	103fe11e 	bne	r2,zero,200950d4 <__flash_rwdata_start+0xffff6500>
20095150:	89400417 	ldw	r5,16(r17)
20095154:	9809883a 	mov	r4,r19
20095158:	00928500 	call	20092850 <_free_r>
2009515c:	88c0030b 	ldhu	r3,12(r17)
20095160:	00800304 	movi	r2,12
20095164:	98800015 	stw	r2,0(r19)
20095168:	18c01014 	ori	r3,r3,64
2009516c:	88c0030d 	sth	r3,12(r17)
20095170:	00bfffc4 	movi	r2,-1
20095174:	90000215 	stw	zero,8(r18)
20095178:	90000115 	stw	zero,4(r18)
2009517c:	00000206 	br	20095188 <__ssprint_r+0x19c>
20095180:	90000115 	stw	zero,4(r18)
20095184:	0005883a 	mov	r2,zero
20095188:	dfc00917 	ldw	ra,36(sp)
2009518c:	df000817 	ldw	fp,32(sp)
20095190:	ddc00717 	ldw	r23,28(sp)
20095194:	dd800617 	ldw	r22,24(sp)
20095198:	dd400517 	ldw	r21,20(sp)
2009519c:	dd000417 	ldw	r20,16(sp)
200951a0:	dcc00317 	ldw	r19,12(sp)
200951a4:	dc800217 	ldw	r18,8(sp)
200951a8:	dc400117 	ldw	r17,4(sp)
200951ac:	dc000017 	ldw	r16,0(sp)
200951b0:	dec00a04 	addi	sp,sp,40
200951b4:	f800283a 	ret

200951b8 <___svfiprintf_internal_r>:
200951b8:	2880030b 	ldhu	r2,12(r5)
200951bc:	deffc904 	addi	sp,sp,-220
200951c0:	dd403215 	stw	r21,200(sp)
200951c4:	dfc03615 	stw	ra,216(sp)
200951c8:	df003515 	stw	fp,212(sp)
200951cc:	ddc03415 	stw	r23,208(sp)
200951d0:	dd803315 	stw	r22,204(sp)
200951d4:	dd003115 	stw	r20,196(sp)
200951d8:	dcc03015 	stw	r19,192(sp)
200951dc:	dc802f15 	stw	r18,188(sp)
200951e0:	dc402e15 	stw	r17,184(sp)
200951e4:	dc002d15 	stw	r16,180(sp)
200951e8:	d9402715 	stw	r5,156(sp)
200951ec:	d9002915 	stw	r4,164(sp)
200951f0:	1080200c 	andi	r2,r2,128
200951f4:	d9c02315 	stw	r7,140(sp)
200951f8:	302b883a 	mov	r21,r6
200951fc:	10000226 	beq	r2,zero,20095208 <___svfiprintf_internal_r+0x50>
20095200:	28800417 	ldw	r2,16(r5)
20095204:	1003ce26 	beq	r2,zero,20096140 <___svfiprintf_internal_r+0xf88>
20095208:	dac01a04 	addi	r11,sp,104
2009520c:	da8019c4 	addi	r10,sp,103
20095210:	dc802917 	ldw	r18,164(sp)
20095214:	dd002717 	ldw	r20,156(sp)
20095218:	04c00034 	movhi	r19,0
2009521c:	dac01e15 	stw	r11,120(sp)
20095220:	5a97c83a 	sub	r11,r11,r10
20095224:	9cc1fc04 	addi	r19,r19,2032
20095228:	da801f15 	stw	r10,124(sp)
2009522c:	dec01a15 	stw	sp,104(sp)
20095230:	d8001c15 	stw	zero,112(sp)
20095234:	d8001b15 	stw	zero,108(sp)
20095238:	d811883a 	mov	r8,sp
2009523c:	d8002a15 	stw	zero,168(sp)
20095240:	d8002415 	stw	zero,144(sp)
20095244:	dac02b15 	stw	r11,172(sp)
20095248:	a8800007 	ldb	r2,0(r21)
2009524c:	10026a26 	beq	r2,zero,20095bf8 <___svfiprintf_internal_r+0xa40>
20095250:	01000944 	movi	r4,37
20095254:	11026826 	beq	r2,r4,20095bf8 <___svfiprintf_internal_r+0xa40>
20095258:	a805883a 	mov	r2,r21
2009525c:	00000106 	br	20095264 <___svfiprintf_internal_r+0xac>
20095260:	19000326 	beq	r3,r4,20095270 <___svfiprintf_internal_r+0xb8>
20095264:	10800044 	addi	r2,r2,1
20095268:	10c00007 	ldb	r3,0(r2)
2009526c:	183ffc1e 	bne	r3,zero,20095260 <__flash_rwdata_start+0xffff668c>
20095270:	1561c83a 	sub	r16,r2,r21
20095274:	102d883a 	mov	r22,r2
20095278:	80000e26 	beq	r16,zero,200952b4 <___svfiprintf_internal_r+0xfc>
2009527c:	d8c01c17 	ldw	r3,112(sp)
20095280:	d8801b17 	ldw	r2,108(sp)
20095284:	45400015 	stw	r21,0(r8)
20095288:	1c07883a 	add	r3,r3,r16
2009528c:	10800044 	addi	r2,r2,1
20095290:	d8c01c15 	stw	r3,112(sp)
20095294:	44000115 	stw	r16,4(r8)
20095298:	d8801b15 	stw	r2,108(sp)
2009529c:	00c001c4 	movi	r3,7
200952a0:	1882d816 	blt	r3,r2,20095e04 <___svfiprintf_internal_r+0xc4c>
200952a4:	42000204 	addi	r8,r8,8
200952a8:	da802417 	ldw	r10,144(sp)
200952ac:	5415883a 	add	r10,r10,r16
200952b0:	da802415 	stw	r10,144(sp)
200952b4:	b0800007 	ldb	r2,0(r22)
200952b8:	10027526 	beq	r2,zero,20095c90 <___svfiprintf_internal_r+0xad8>
200952bc:	b1000047 	ldb	r4,1(r22)
200952c0:	b5400044 	addi	r21,r22,1
200952c4:	d8001d85 	stb	zero,118(sp)
200952c8:	000d883a 	mov	r6,zero
200952cc:	043fffc4 	movi	r16,-1
200952d0:	d8002115 	stw	zero,132(sp)
200952d4:	0023883a 	mov	r17,zero
200952d8:	00c01604 	movi	r3,88
200952dc:	01400244 	movi	r5,9
200952e0:	02400a84 	movi	r9,42
200952e4:	01c01b04 	movi	r7,108
200952e8:	ad400044 	addi	r21,r21,1
200952ec:	20bff804 	addi	r2,r4,-32
200952f0:	18819736 	bltu	r3,r2,20095950 <___svfiprintf_internal_r+0x798>
200952f4:	100490ba 	slli	r2,r2,2
200952f8:	02c80274 	movhi	r11,8201
200952fc:	5ad4c304 	addi	r11,r11,21260
20095300:	12c5883a 	add	r2,r2,r11
20095304:	10800017 	ldw	r2,0(r2)
20095308:	1000683a 	jmp	r2
2009530c:	20095848 	cmpgei	zero,r4,9569
20095310:	20095950 	cmplti	zero,r4,9573
20095314:	20095950 	cmplti	zero,r4,9573
20095318:	2009583c 	xorhi	zero,r4,9568
2009531c:	20095950 	cmplti	zero,r4,9573
20095320:	20095950 	cmplti	zero,r4,9573
20095324:	20095950 	cmplti	zero,r4,9573
20095328:	20095950 	cmplti	zero,r4,9573
2009532c:	20095950 	cmplti	zero,r4,9573
20095330:	20095950 	cmplti	zero,r4,9573
20095334:	20095568 	cmpgeui	zero,r4,9557
20095338:	20095984 	addi	zero,r4,9574
2009533c:	20095950 	cmplti	zero,r4,9573
20095340:	20095590 	cmplti	zero,r4,9558
20095344:	20095990 	cmplti	zero,r4,9574
20095348:	20095950 	cmplti	zero,r4,9573
2009534c:	20095978 	rdprs	zero,r4,9573
20095350:	20095918 	cmpnei	zero,r4,9572
20095354:	20095918 	cmpnei	zero,r4,9572
20095358:	20095918 	cmpnei	zero,r4,9572
2009535c:	20095918 	cmpnei	zero,r4,9572
20095360:	20095918 	cmpnei	zero,r4,9572
20095364:	20095918 	cmpnei	zero,r4,9572
20095368:	20095918 	cmpnei	zero,r4,9572
2009536c:	20095918 	cmpnei	zero,r4,9572
20095370:	20095918 	cmpnei	zero,r4,9572
20095374:	20095950 	cmplti	zero,r4,9573
20095378:	20095950 	cmplti	zero,r4,9573
2009537c:	20095950 	cmplti	zero,r4,9573
20095380:	20095950 	cmplti	zero,r4,9573
20095384:	20095950 	cmplti	zero,r4,9573
20095388:	20095950 	cmplti	zero,r4,9573
2009538c:	20095950 	cmplti	zero,r4,9573
20095390:	20095950 	cmplti	zero,r4,9573
20095394:	20095950 	cmplti	zero,r4,9573
20095398:	20095950 	cmplti	zero,r4,9573
2009539c:	200958b0 	cmpltui	zero,r4,9570
200953a0:	20095950 	cmplti	zero,r4,9573
200953a4:	20095950 	cmplti	zero,r4,9573
200953a8:	20095950 	cmplti	zero,r4,9573
200953ac:	20095950 	cmplti	zero,r4,9573
200953b0:	20095950 	cmplti	zero,r4,9573
200953b4:	20095950 	cmplti	zero,r4,9573
200953b8:	20095950 	cmplti	zero,r4,9573
200953bc:	20095950 	cmplti	zero,r4,9573
200953c0:	20095950 	cmplti	zero,r4,9573
200953c4:	20095950 	cmplti	zero,r4,9573
200953c8:	2009553c 	xorhi	zero,r4,9556
200953cc:	20095950 	cmplti	zero,r4,9573
200953d0:	20095950 	cmplti	zero,r4,9573
200953d4:	20095950 	cmplti	zero,r4,9573
200953d8:	20095950 	cmplti	zero,r4,9573
200953dc:	20095950 	cmplti	zero,r4,9573
200953e0:	20095470 	cmpltui	zero,r4,9553
200953e4:	20095950 	cmplti	zero,r4,9573
200953e8:	20095950 	cmplti	zero,r4,9573
200953ec:	2009579c 	xori	zero,r4,9566
200953f0:	20095950 	cmplti	zero,r4,9573
200953f4:	20095950 	cmplti	zero,r4,9573
200953f8:	20095950 	cmplti	zero,r4,9573
200953fc:	20095950 	cmplti	zero,r4,9573
20095400:	20095950 	cmplti	zero,r4,9573
20095404:	20095950 	cmplti	zero,r4,9573
20095408:	20095950 	cmplti	zero,r4,9573
2009540c:	20095950 	cmplti	zero,r4,9573
20095410:	20095950 	cmplti	zero,r4,9573
20095414:	20095950 	cmplti	zero,r4,9573
20095418:	20095688 	cmpgei	zero,r4,9562
2009541c:	20095648 	cmpgei	zero,r4,9561
20095420:	20095950 	cmplti	zero,r4,9573
20095424:	20095950 	cmplti	zero,r4,9573
20095428:	20095950 	cmplti	zero,r4,9573
2009542c:	200957f8 	rdprs	zero,r4,9567
20095430:	20095648 	cmpgei	zero,r4,9561
20095434:	20095950 	cmplti	zero,r4,9573
20095438:	20095950 	cmplti	zero,r4,9573
2009543c:	200957e4 	muli	zero,r4,9567
20095440:	20095950 	cmplti	zero,r4,9573
20095444:	20095804 	addi	zero,r4,9568
20095448:	20095540 	call	22009554 <__flash_rwdata_start+0x1f6a980>
2009544c:	20095604 	addi	zero,r4,9560
20095450:	200955f8 	rdprs	zero,r4,9559
20095454:	20095950 	cmplti	zero,r4,9573
20095458:	2009559c 	xori	zero,r4,9558
2009545c:	20095950 	cmplti	zero,r4,9573
20095460:	20095474 	orhi	zero,r4,9553
20095464:	20095950 	cmplti	zero,r4,9573
20095468:	20095950 	cmplti	zero,r4,9573
2009546c:	20095864 	muli	zero,r4,9569
20095470:	8c400414 	ori	r17,r17,16
20095474:	8880080c 	andi	r2,r17,32
20095478:	10029626 	beq	r2,zero,20095ed4 <___svfiprintf_internal_r+0xd1c>
2009547c:	da802317 	ldw	r10,140(sp)
20095480:	dac02317 	ldw	r11,140(sp)
20095484:	00800044 	movi	r2,1
20095488:	52400017 	ldw	r9,0(r10)
2009548c:	52800117 	ldw	r10,4(r10)
20095490:	5ac00204 	addi	r11,r11,8
20095494:	dac02315 	stw	r11,140(sp)
20095498:	4a86b03a 	or	r3,r9,r10
2009549c:	d8001d85 	stb	zero,118(sp)
200954a0:	8039883a 	mov	fp,r16
200954a4:	0017883a 	mov	r11,zero
200954a8:	80000216 	blt	r16,zero,200954b4 <___svfiprintf_internal_r+0x2fc>
200954ac:	013fdfc4 	movi	r4,-129
200954b0:	8922703a 	and	r17,r17,r4
200954b4:	1801d21e 	bne	r3,zero,20095c00 <___svfiprintf_internal_r+0xa48>
200954b8:	80024626 	beq	r16,zero,20095dd4 <___svfiprintf_internal_r+0xc1c>
200954bc:	10803fcc 	andi	r2,r2,255
200954c0:	00c00044 	movi	r3,1
200954c4:	10c2b426 	beq	r2,r3,20095f98 <___svfiprintf_internal_r+0xde0>
200954c8:	00c00084 	movi	r3,2
200954cc:	10c25d26 	beq	r2,r3,20095e44 <___svfiprintf_internal_r+0xc8c>
200954d0:	d8c01a04 	addi	r3,sp,104
200954d4:	4808d0fa 	srli	r4,r9,3
200954d8:	500a977a 	slli	r5,r10,29
200954dc:	5014d0fa 	srli	r10,r10,3
200954e0:	4a4001cc 	andi	r9,r9,7
200954e4:	48800c04 	addi	r2,r9,48
200954e8:	18ffffc4 	addi	r3,r3,-1
200954ec:	2912b03a 	or	r9,r5,r4
200954f0:	18800005 	stb	r2,0(r3)
200954f4:	4a88b03a 	or	r4,r9,r10
200954f8:	203ff61e 	bne	r4,zero,200954d4 <__flash_rwdata_start+0xffff6900>
200954fc:	8900004c 	andi	r4,r17,1
20095500:	d8c02615 	stw	r3,152(sp)
20095504:	2002961e 	bne	r4,zero,20095f60 <___svfiprintf_internal_r+0xda8>
20095508:	da801e17 	ldw	r10,120(sp)
2009550c:	50f9c83a 	sub	fp,r10,r3
20095510:	df002015 	stw	fp,128(sp)
20095514:	e400010e 	bge	fp,r16,2009551c <___svfiprintf_internal_r+0x364>
20095518:	dc002015 	stw	r16,128(sp)
2009551c:	5ac03fcc 	andi	r11,r11,255
20095520:	5ac0201c 	xori	r11,r11,128
20095524:	5affe004 	addi	r11,r11,-128
20095528:	58006326 	beq	r11,zero,200956b8 <___svfiprintf_internal_r+0x500>
2009552c:	d8c02017 	ldw	r3,128(sp)
20095530:	18c00044 	addi	r3,r3,1
20095534:	d8c02015 	stw	r3,128(sp)
20095538:	00005f06 	br	200956b8 <___svfiprintf_internal_r+0x500>
2009553c:	8c400414 	ori	r17,r17,16
20095540:	8880080c 	andi	r2,r17,32
20095544:	10027926 	beq	r2,zero,20095f2c <___svfiprintf_internal_r+0xd74>
20095548:	dac02317 	ldw	r11,140(sp)
2009554c:	0005883a 	mov	r2,zero
20095550:	5a400017 	ldw	r9,0(r11)
20095554:	5a800117 	ldw	r10,4(r11)
20095558:	5ac00204 	addi	r11,r11,8
2009555c:	dac02315 	stw	r11,140(sp)
20095560:	4a86b03a 	or	r3,r9,r10
20095564:	003fcd06 	br	2009549c <__flash_rwdata_start+0xffff68c8>
20095568:	da802317 	ldw	r10,140(sp)
2009556c:	dac02317 	ldw	r11,140(sp)
20095570:	52800017 	ldw	r10,0(r10)
20095574:	58800104 	addi	r2,r11,4
20095578:	da802115 	stw	r10,132(sp)
2009557c:	50028c0e 	bge	r10,zero,20095fb0 <___svfiprintf_internal_r+0xdf8>
20095580:	da802117 	ldw	r10,132(sp)
20095584:	d8802315 	stw	r2,140(sp)
20095588:	0295c83a 	sub	r10,zero,r10
2009558c:	da802115 	stw	r10,132(sp)
20095590:	8c400114 	ori	r17,r17,4
20095594:	a9000007 	ldb	r4,0(r21)
20095598:	003f5306 	br	200952e8 <__flash_rwdata_start+0xffff6714>
2009559c:	da802317 	ldw	r10,140(sp)
200955a0:	dac02317 	ldw	r11,140(sp)
200955a4:	d8001d85 	stb	zero,118(sp)
200955a8:	52800017 	ldw	r10,0(r10)
200955ac:	5dc00104 	addi	r23,r11,4
200955b0:	da802615 	stw	r10,152(sp)
200955b4:	5002d626 	beq	r10,zero,20096110 <___svfiprintf_internal_r+0xf58>
200955b8:	d9002617 	ldw	r4,152(sp)
200955bc:	8002cc16 	blt	r16,zero,200960f0 <___svfiprintf_internal_r+0xf38>
200955c0:	000b883a 	mov	r5,zero
200955c4:	800d883a 	mov	r6,r16
200955c8:	da002c15 	stw	r8,176(sp)
200955cc:	00934200 	call	20093420 <memchr>
200955d0:	da002c17 	ldw	r8,176(sp)
200955d4:	1002f026 	beq	r2,zero,20096198 <___svfiprintf_internal_r+0xfe0>
200955d8:	d8c02617 	ldw	r3,152(sp)
200955dc:	10f9c83a 	sub	fp,r2,r3
200955e0:	8700010e 	bge	r16,fp,200955e8 <___svfiprintf_internal_r+0x430>
200955e4:	8039883a 	mov	fp,r16
200955e8:	dac01d83 	ldbu	r11,118(sp)
200955ec:	ddc02315 	stw	r23,140(sp)
200955f0:	0021883a 	mov	r16,zero
200955f4:	003fc606 	br	20095510 <__flash_rwdata_start+0xffff693c>
200955f8:	8c400814 	ori	r17,r17,32
200955fc:	a9000007 	ldb	r4,0(r21)
20095600:	003f3906 	br	200952e8 <__flash_rwdata_start+0xffff6714>
20095604:	da802317 	ldw	r10,140(sp)
20095608:	00800c04 	movi	r2,48
2009560c:	dac02317 	ldw	r11,140(sp)
20095610:	52400017 	ldw	r9,0(r10)
20095614:	d8801d05 	stb	r2,116(sp)
20095618:	00801e04 	movi	r2,120
2009561c:	d8801d45 	stb	r2,117(sp)
20095620:	00800034 	movhi	r2,0
20095624:	10819404 	addi	r2,r2,1616
20095628:	5ac00104 	addi	r11,r11,4
2009562c:	d8802a15 	stw	r2,168(sp)
20095630:	0015883a 	mov	r10,zero
20095634:	8c400094 	ori	r17,r17,2
20095638:	dac02315 	stw	r11,140(sp)
2009563c:	00800084 	movi	r2,2
20095640:	4807883a 	mov	r3,r9
20095644:	003f9506 	br	2009549c <__flash_rwdata_start+0xffff68c8>
20095648:	d9801d85 	stb	r6,118(sp)
2009564c:	8880080c 	andi	r2,r17,32
20095650:	d8c02317 	ldw	r3,140(sp)
20095654:	10009b26 	beq	r2,zero,200958c4 <___svfiprintf_internal_r+0x70c>
20095658:	dac02317 	ldw	r11,140(sp)
2009565c:	18800117 	ldw	r2,4(r3)
20095660:	1a400017 	ldw	r9,0(r3)
20095664:	5ac00204 	addi	r11,r11,8
20095668:	dac02315 	stw	r11,140(sp)
2009566c:	1015883a 	mov	r10,r2
20095670:	10009f16 	blt	r2,zero,200958f0 <___svfiprintf_internal_r+0x738>
20095674:	dac01d83 	ldbu	r11,118(sp)
20095678:	8039883a 	mov	fp,r16
2009567c:	00800044 	movi	r2,1
20095680:	4a86b03a 	or	r3,r9,r10
20095684:	003f8806 	br	200954a8 <__flash_rwdata_start+0xffff68d4>
20095688:	dac02317 	ldw	r11,140(sp)
2009568c:	00c00044 	movi	r3,1
20095690:	da801004 	addi	r10,sp,64
20095694:	58800017 	ldw	r2,0(r11)
20095698:	5ac00104 	addi	r11,r11,4
2009569c:	d8c02015 	stw	r3,128(sp)
200956a0:	d8001d85 	stb	zero,118(sp)
200956a4:	d8801005 	stb	r2,64(sp)
200956a8:	dac02315 	stw	r11,140(sp)
200956ac:	1839883a 	mov	fp,r3
200956b0:	da802615 	stw	r10,152(sp)
200956b4:	0021883a 	mov	r16,zero
200956b8:	8a80008c 	andi	r10,r17,2
200956bc:	da802215 	stw	r10,136(sp)
200956c0:	50000326 	beq	r10,zero,200956d0 <___svfiprintf_internal_r+0x518>
200956c4:	dac02017 	ldw	r11,128(sp)
200956c8:	5ac00084 	addi	r11,r11,2
200956cc:	dac02015 	stw	r11,128(sp)
200956d0:	88c0210c 	andi	r3,r17,132
200956d4:	d8c02515 	stw	r3,148(sp)
200956d8:	1800bd1e 	bne	r3,zero,200959d0 <___svfiprintf_internal_r+0x818>
200956dc:	da802117 	ldw	r10,132(sp)
200956e0:	dac02017 	ldw	r11,128(sp)
200956e4:	52edc83a 	sub	r22,r10,r11
200956e8:	0580b90e 	bge	zero,r22,200959d0 <___svfiprintf_internal_r+0x818>
200956ec:	02400404 	movi	r9,16
200956f0:	d8c01c17 	ldw	r3,112(sp)
200956f4:	d8801b17 	ldw	r2,108(sp)
200956f8:	4d829b0e 	bge	r9,r22,20096168 <___svfiprintf_internal_r+0xfb0>
200956fc:	01400034 	movhi	r5,0
20095700:	29420004 	addi	r5,r5,2048
20095704:	d9402815 	stw	r5,160(sp)
20095708:	05c001c4 	movi	r23,7
2009570c:	00000306 	br	2009571c <___svfiprintf_internal_r+0x564>
20095710:	b5bffc04 	addi	r22,r22,-16
20095714:	42000204 	addi	r8,r8,8
20095718:	4d80150e 	bge	r9,r22,20095770 <___svfiprintf_internal_r+0x5b8>
2009571c:	02800034 	movhi	r10,0
20095720:	18c00404 	addi	r3,r3,16
20095724:	10800044 	addi	r2,r2,1
20095728:	52820004 	addi	r10,r10,2048
2009572c:	42800015 	stw	r10,0(r8)
20095730:	42400115 	stw	r9,4(r8)
20095734:	d8c01c15 	stw	r3,112(sp)
20095738:	d8801b15 	stw	r2,108(sp)
2009573c:	b8bff40e 	bge	r23,r2,20095710 <__flash_rwdata_start+0xffff6b3c>
20095740:	9009883a 	mov	r4,r18
20095744:	a00b883a 	mov	r5,r20
20095748:	d9801a04 	addi	r6,sp,104
2009574c:	da402c15 	stw	r9,176(sp)
20095750:	0094fec0 	call	20094fec <__ssprint_r>
20095754:	da402c17 	ldw	r9,176(sp)
20095758:	1001531e 	bne	r2,zero,20095ca8 <___svfiprintf_internal_r+0xaf0>
2009575c:	b5bffc04 	addi	r22,r22,-16
20095760:	d8c01c17 	ldw	r3,112(sp)
20095764:	d8801b17 	ldw	r2,108(sp)
20095768:	d811883a 	mov	r8,sp
2009576c:	4dbfeb16 	blt	r9,r22,2009571c <__flash_rwdata_start+0xffff6b48>
20095770:	dac02817 	ldw	r11,160(sp)
20095774:	b0c7883a 	add	r3,r22,r3
20095778:	10800044 	addi	r2,r2,1
2009577c:	42c00015 	stw	r11,0(r8)
20095780:	45800115 	stw	r22,4(r8)
20095784:	d8c01c15 	stw	r3,112(sp)
20095788:	d8801b15 	stw	r2,108(sp)
2009578c:	010001c4 	movi	r4,7
20095790:	2081dd16 	blt	r4,r2,20095f08 <___svfiprintf_internal_r+0xd50>
20095794:	42000204 	addi	r8,r8,8
20095798:	00008f06 	br	200959d8 <___svfiprintf_internal_r+0x820>
2009579c:	00800034 	movhi	r2,0
200957a0:	10818f04 	addi	r2,r2,1596
200957a4:	d8802a15 	stw	r2,168(sp)
200957a8:	d9801d85 	stb	r6,118(sp)
200957ac:	8880080c 	andi	r2,r17,32
200957b0:	10003226 	beq	r2,zero,2009587c <___svfiprintf_internal_r+0x6c4>
200957b4:	da802317 	ldw	r10,140(sp)
200957b8:	dac02317 	ldw	r11,140(sp)
200957bc:	52400017 	ldw	r9,0(r10)
200957c0:	52800117 	ldw	r10,4(r10)
200957c4:	5ac00204 	addi	r11,r11,8
200957c8:	dac02315 	stw	r11,140(sp)
200957cc:	8880004c 	andi	r2,r17,1
200957d0:	10003426 	beq	r2,zero,200958a4 <___svfiprintf_internal_r+0x6ec>
200957d4:	4a86b03a 	or	r3,r9,r10
200957d8:	1802231e 	bne	r3,zero,20096068 <___svfiprintf_internal_r+0xeb0>
200957dc:	00800084 	movi	r2,2
200957e0:	003f2e06 	br	2009549c <__flash_rwdata_start+0xffff68c8>
200957e4:	a9000007 	ldb	r4,0(r21)
200957e8:	a805883a 	mov	r2,r21
200957ec:	21c22426 	beq	r4,r7,20096080 <___svfiprintf_internal_r+0xec8>
200957f0:	8c400414 	ori	r17,r17,16
200957f4:	003ebc06 	br	200952e8 <__flash_rwdata_start+0xffff6714>
200957f8:	8c401014 	ori	r17,r17,64
200957fc:	a9000007 	ldb	r4,0(r21)
20095800:	003eb906 	br	200952e8 <__flash_rwdata_start+0xffff6714>
20095804:	d9801d85 	stb	r6,118(sp)
20095808:	8880080c 	andi	r2,r17,32
2009580c:	10020d1e 	bne	r2,zero,20096044 <___svfiprintf_internal_r+0xe8c>
20095810:	8880040c 	andi	r2,r17,16
20095814:	10021e1e 	bne	r2,zero,20096090 <___svfiprintf_internal_r+0xed8>
20095818:	8c40100c 	andi	r17,r17,64
2009581c:	88021c26 	beq	r17,zero,20096090 <___svfiprintf_internal_r+0xed8>
20095820:	dac02317 	ldw	r11,140(sp)
20095824:	da802417 	ldw	r10,144(sp)
20095828:	58800017 	ldw	r2,0(r11)
2009582c:	5ac00104 	addi	r11,r11,4
20095830:	dac02315 	stw	r11,140(sp)
20095834:	1280000d 	sth	r10,0(r2)
20095838:	003e8306 	br	20095248 <__flash_rwdata_start+0xffff6674>
2009583c:	8c400054 	ori	r17,r17,1
20095840:	a9000007 	ldb	r4,0(r21)
20095844:	003ea806 	br	200952e8 <__flash_rwdata_start+0xffff6714>
20095848:	30803fcc 	andi	r2,r6,255
2009584c:	1080201c 	xori	r2,r2,128
20095850:	10bfe004 	addi	r2,r2,-128
20095854:	1001f91e 	bne	r2,zero,2009603c <___svfiprintf_internal_r+0xe84>
20095858:	01800804 	movi	r6,32
2009585c:	a9000007 	ldb	r4,0(r21)
20095860:	003ea106 	br	200952e8 <__flash_rwdata_start+0xffff6714>
20095864:	00800034 	movhi	r2,0
20095868:	10819404 	addi	r2,r2,1616
2009586c:	d8802a15 	stw	r2,168(sp)
20095870:	d9801d85 	stb	r6,118(sp)
20095874:	8880080c 	andi	r2,r17,32
20095878:	103fce1e 	bne	r2,zero,200957b4 <__flash_rwdata_start+0xffff6be0>
2009587c:	8880040c 	andi	r2,r17,16
20095880:	1001e526 	beq	r2,zero,20096018 <___svfiprintf_internal_r+0xe60>
20095884:	da802317 	ldw	r10,140(sp)
20095888:	dac02317 	ldw	r11,140(sp)
2009588c:	52400017 	ldw	r9,0(r10)
20095890:	8880004c 	andi	r2,r17,1
20095894:	5ac00104 	addi	r11,r11,4
20095898:	dac02315 	stw	r11,140(sp)
2009589c:	0015883a 	mov	r10,zero
200958a0:	103fcc1e 	bne	r2,zero,200957d4 <__flash_rwdata_start+0xffff6c00>
200958a4:	00800084 	movi	r2,2
200958a8:	4a86b03a 	or	r3,r9,r10
200958ac:	003efb06 	br	2009549c <__flash_rwdata_start+0xffff68c8>
200958b0:	8c400414 	ori	r17,r17,16
200958b4:	d9801d85 	stb	r6,118(sp)
200958b8:	8880080c 	andi	r2,r17,32
200958bc:	d8c02317 	ldw	r3,140(sp)
200958c0:	103f651e 	bne	r2,zero,20095658 <__flash_rwdata_start+0xffff6a84>
200958c4:	8880040c 	andi	r2,r17,16
200958c8:	1001c61e 	bne	r2,zero,20095fe4 <___svfiprintf_internal_r+0xe2c>
200958cc:	8880100c 	andi	r2,r17,64
200958d0:	1001c426 	beq	r2,zero,20095fe4 <___svfiprintf_internal_r+0xe2c>
200958d4:	1a40000f 	ldh	r9,0(r3)
200958d8:	dac02317 	ldw	r11,140(sp)
200958dc:	4815d7fa 	srai	r10,r9,31
200958e0:	5ac00104 	addi	r11,r11,4
200958e4:	dac02315 	stw	r11,140(sp)
200958e8:	5005883a 	mov	r2,r10
200958ec:	103f610e 	bge	r2,zero,20095674 <__flash_rwdata_start+0xffff6aa0>
200958f0:	0253c83a 	sub	r9,zero,r9
200958f4:	4804c03a 	cmpne	r2,r9,zero
200958f8:	0295c83a 	sub	r10,zero,r10
200958fc:	5095c83a 	sub	r10,r10,r2
20095900:	02c00b44 	movi	r11,45
20095904:	dac01d85 	stb	r11,118(sp)
20095908:	8039883a 	mov	fp,r16
2009590c:	00800044 	movi	r2,1
20095910:	4a86b03a 	or	r3,r9,r10
20095914:	003ee406 	br	200954a8 <__flash_rwdata_start+0xffff68d4>
20095918:	a815883a 	mov	r10,r21
2009591c:	d8002115 	stw	zero,132(sp)
20095920:	20bff404 	addi	r2,r4,-48
20095924:	51000007 	ldb	r4,0(r10)
20095928:	da802117 	ldw	r10,132(sp)
2009592c:	ad400044 	addi	r21,r21,1
20095930:	52c002a4 	muli	r11,r10,10
20095934:	a815883a 	mov	r10,r21
20095938:	5885883a 	add	r2,r11,r2
2009593c:	d8802115 	stw	r2,132(sp)
20095940:	20bff404 	addi	r2,r4,-48
20095944:	28bff72e 	bgeu	r5,r2,20095924 <__flash_rwdata_start+0xffff6d50>
20095948:	20bff804 	addi	r2,r4,-32
2009594c:	18be692e 	bgeu	r3,r2,200952f4 <__flash_rwdata_start+0xffff6720>
20095950:	d9801d85 	stb	r6,118(sp)
20095954:	2000ce26 	beq	r4,zero,20095c90 <___svfiprintf_internal_r+0xad8>
20095958:	02800044 	movi	r10,1
2009595c:	dac01004 	addi	r11,sp,64
20095960:	da802015 	stw	r10,128(sp)
20095964:	d9001005 	stb	r4,64(sp)
20095968:	d8001d85 	stb	zero,118(sp)
2009596c:	5039883a 	mov	fp,r10
20095970:	dac02615 	stw	r11,152(sp)
20095974:	003f4f06 	br	200956b4 <__flash_rwdata_start+0xffff6ae0>
20095978:	8c402014 	ori	r17,r17,128
2009597c:	a9000007 	ldb	r4,0(r21)
20095980:	003e5906 	br	200952e8 <__flash_rwdata_start+0xffff6714>
20095984:	01800ac4 	movi	r6,43
20095988:	a9000007 	ldb	r4,0(r21)
2009598c:	003e5606 	br	200952e8 <__flash_rwdata_start+0xffff6714>
20095990:	a9000007 	ldb	r4,0(r21)
20095994:	aa800044 	addi	r10,r21,1
20095998:	22420626 	beq	r4,r9,200961b4 <___svfiprintf_internal_r+0xffc>
2009599c:	20bff404 	addi	r2,r4,-48
200959a0:	502b883a 	mov	r21,r10
200959a4:	0021883a 	mov	r16,zero
200959a8:	28be5036 	bltu	r5,r2,200952ec <__flash_rwdata_start+0xffff6718>
200959ac:	a9000007 	ldb	r4,0(r21)
200959b0:	840002a4 	muli	r16,r16,10
200959b4:	ad400044 	addi	r21,r21,1
200959b8:	1421883a 	add	r16,r2,r16
200959bc:	20bff404 	addi	r2,r4,-48
200959c0:	28bffa2e 	bgeu	r5,r2,200959ac <__flash_rwdata_start+0xffff6dd8>
200959c4:	803e490e 	bge	r16,zero,200952ec <__flash_rwdata_start+0xffff6718>
200959c8:	043fffc4 	movi	r16,-1
200959cc:	003e4706 	br	200952ec <__flash_rwdata_start+0xffff6718>
200959d0:	d8c01c17 	ldw	r3,112(sp)
200959d4:	d8801b17 	ldw	r2,108(sp)
200959d8:	d9001d87 	ldb	r4,118(sp)
200959dc:	20000b26 	beq	r4,zero,20095a0c <___svfiprintf_internal_r+0x854>
200959e0:	d9001d84 	addi	r4,sp,118
200959e4:	18c00044 	addi	r3,r3,1
200959e8:	10800044 	addi	r2,r2,1
200959ec:	41000015 	stw	r4,0(r8)
200959f0:	01000044 	movi	r4,1
200959f4:	41000115 	stw	r4,4(r8)
200959f8:	d8c01c15 	stw	r3,112(sp)
200959fc:	d8801b15 	stw	r2,108(sp)
20095a00:	010001c4 	movi	r4,7
20095a04:	20811e16 	blt	r4,r2,20095e80 <___svfiprintf_internal_r+0xcc8>
20095a08:	42000204 	addi	r8,r8,8
20095a0c:	da802217 	ldw	r10,136(sp)
20095a10:	50000b26 	beq	r10,zero,20095a40 <___svfiprintf_internal_r+0x888>
20095a14:	d9001d04 	addi	r4,sp,116
20095a18:	18c00084 	addi	r3,r3,2
20095a1c:	10800044 	addi	r2,r2,1
20095a20:	41000015 	stw	r4,0(r8)
20095a24:	01000084 	movi	r4,2
20095a28:	41000115 	stw	r4,4(r8)
20095a2c:	d8c01c15 	stw	r3,112(sp)
20095a30:	d8801b15 	stw	r2,108(sp)
20095a34:	010001c4 	movi	r4,7
20095a38:	20811a16 	blt	r4,r2,20095ea4 <___svfiprintf_internal_r+0xcec>
20095a3c:	42000204 	addi	r8,r8,8
20095a40:	dac02517 	ldw	r11,148(sp)
20095a44:	01002004 	movi	r4,128
20095a48:	5900a826 	beq	r11,r4,20095cec <___svfiprintf_internal_r+0xb34>
20095a4c:	8721c83a 	sub	r16,r16,fp
20095a50:	0400260e 	bge	zero,r16,20095aec <___svfiprintf_internal_r+0x934>
20095a54:	01c00404 	movi	r7,16
20095a58:	3c019d0e 	bge	r7,r16,200960d0 <___svfiprintf_internal_r+0xf18>
20095a5c:	01000034 	movhi	r4,0
20095a60:	2101fc04 	addi	r4,r4,2032
20095a64:	d9002215 	stw	r4,136(sp)
20095a68:	382f883a 	mov	r23,r7
20095a6c:	058001c4 	movi	r22,7
20095a70:	00000306 	br	20095a80 <___svfiprintf_internal_r+0x8c8>
20095a74:	843ffc04 	addi	r16,r16,-16
20095a78:	42000204 	addi	r8,r8,8
20095a7c:	bc00110e 	bge	r23,r16,20095ac4 <___svfiprintf_internal_r+0x90c>
20095a80:	18c00404 	addi	r3,r3,16
20095a84:	10800044 	addi	r2,r2,1
20095a88:	44c00015 	stw	r19,0(r8)
20095a8c:	45c00115 	stw	r23,4(r8)
20095a90:	d8c01c15 	stw	r3,112(sp)
20095a94:	d8801b15 	stw	r2,108(sp)
20095a98:	b0bff60e 	bge	r22,r2,20095a74 <__flash_rwdata_start+0xffff6ea0>
20095a9c:	9009883a 	mov	r4,r18
20095aa0:	a00b883a 	mov	r5,r20
20095aa4:	d9801a04 	addi	r6,sp,104
20095aa8:	0094fec0 	call	20094fec <__ssprint_r>
20095aac:	10007e1e 	bne	r2,zero,20095ca8 <___svfiprintf_internal_r+0xaf0>
20095ab0:	843ffc04 	addi	r16,r16,-16
20095ab4:	d8c01c17 	ldw	r3,112(sp)
20095ab8:	d8801b17 	ldw	r2,108(sp)
20095abc:	d811883a 	mov	r8,sp
20095ac0:	bc3fef16 	blt	r23,r16,20095a80 <__flash_rwdata_start+0xffff6eac>
20095ac4:	da802217 	ldw	r10,136(sp)
20095ac8:	1c07883a 	add	r3,r3,r16
20095acc:	10800044 	addi	r2,r2,1
20095ad0:	42800015 	stw	r10,0(r8)
20095ad4:	44000115 	stw	r16,4(r8)
20095ad8:	d8c01c15 	stw	r3,112(sp)
20095adc:	d8801b15 	stw	r2,108(sp)
20095ae0:	010001c4 	movi	r4,7
20095ae4:	2080ce16 	blt	r4,r2,20095e20 <___svfiprintf_internal_r+0xc68>
20095ae8:	42000204 	addi	r8,r8,8
20095aec:	dac02617 	ldw	r11,152(sp)
20095af0:	1f07883a 	add	r3,r3,fp
20095af4:	10800044 	addi	r2,r2,1
20095af8:	42c00015 	stw	r11,0(r8)
20095afc:	47000115 	stw	fp,4(r8)
20095b00:	d8c01c15 	stw	r3,112(sp)
20095b04:	d8801b15 	stw	r2,108(sp)
20095b08:	010001c4 	movi	r4,7
20095b0c:	2080a316 	blt	r4,r2,20095d9c <___svfiprintf_internal_r+0xbe4>
20095b10:	42000204 	addi	r8,r8,8
20095b14:	8c40010c 	andi	r17,r17,4
20095b18:	88002b26 	beq	r17,zero,20095bc8 <___svfiprintf_internal_r+0xa10>
20095b1c:	da802117 	ldw	r10,132(sp)
20095b20:	dac02017 	ldw	r11,128(sp)
20095b24:	52e1c83a 	sub	r16,r10,r11
20095b28:	0400270e 	bge	zero,r16,20095bc8 <___svfiprintf_internal_r+0xa10>
20095b2c:	04400404 	movi	r17,16
20095b30:	d8801b17 	ldw	r2,108(sp)
20095b34:	8c01900e 	bge	r17,r16,20096178 <___svfiprintf_internal_r+0xfc0>
20095b38:	01400034 	movhi	r5,0
20095b3c:	29420004 	addi	r5,r5,2048
20095b40:	d9402815 	stw	r5,160(sp)
20095b44:	070001c4 	movi	fp,7
20095b48:	00000306 	br	20095b58 <___svfiprintf_internal_r+0x9a0>
20095b4c:	843ffc04 	addi	r16,r16,-16
20095b50:	42000204 	addi	r8,r8,8
20095b54:	8c00130e 	bge	r17,r16,20095ba4 <___svfiprintf_internal_r+0x9ec>
20095b58:	02800034 	movhi	r10,0
20095b5c:	18c00404 	addi	r3,r3,16
20095b60:	10800044 	addi	r2,r2,1
20095b64:	52820004 	addi	r10,r10,2048
20095b68:	42800015 	stw	r10,0(r8)
20095b6c:	44400115 	stw	r17,4(r8)
20095b70:	d8c01c15 	stw	r3,112(sp)
20095b74:	d8801b15 	stw	r2,108(sp)
20095b78:	e0bff40e 	bge	fp,r2,20095b4c <__flash_rwdata_start+0xffff6f78>
20095b7c:	9009883a 	mov	r4,r18
20095b80:	a00b883a 	mov	r5,r20
20095b84:	d9801a04 	addi	r6,sp,104
20095b88:	0094fec0 	call	20094fec <__ssprint_r>
20095b8c:	1000461e 	bne	r2,zero,20095ca8 <___svfiprintf_internal_r+0xaf0>
20095b90:	843ffc04 	addi	r16,r16,-16
20095b94:	d8c01c17 	ldw	r3,112(sp)
20095b98:	d8801b17 	ldw	r2,108(sp)
20095b9c:	d811883a 	mov	r8,sp
20095ba0:	8c3fed16 	blt	r17,r16,20095b58 <__flash_rwdata_start+0xffff6f84>
20095ba4:	dac02817 	ldw	r11,160(sp)
20095ba8:	1c07883a 	add	r3,r3,r16
20095bac:	10800044 	addi	r2,r2,1
20095bb0:	42c00015 	stw	r11,0(r8)
20095bb4:	44000115 	stw	r16,4(r8)
20095bb8:	d8c01c15 	stw	r3,112(sp)
20095bbc:	d8801b15 	stw	r2,108(sp)
20095bc0:	010001c4 	movi	r4,7
20095bc4:	2080fd16 	blt	r4,r2,20095fbc <___svfiprintf_internal_r+0xe04>
20095bc8:	dd802017 	ldw	r22,128(sp)
20095bcc:	da802117 	ldw	r10,132(sp)
20095bd0:	b280010e 	bge	r22,r10,20095bd8 <___svfiprintf_internal_r+0xa20>
20095bd4:	502d883a 	mov	r22,r10
20095bd8:	dac02417 	ldw	r11,144(sp)
20095bdc:	5d97883a 	add	r11,r11,r22
20095be0:	dac02415 	stw	r11,144(sp)
20095be4:	1800751e 	bne	r3,zero,20095dbc <___svfiprintf_internal_r+0xc04>
20095be8:	a8800007 	ldb	r2,0(r21)
20095bec:	d8001b15 	stw	zero,108(sp)
20095bf0:	d811883a 	mov	r8,sp
20095bf4:	103d961e 	bne	r2,zero,20095250 <__flash_rwdata_start+0xffff667c>
20095bf8:	a82d883a 	mov	r22,r21
20095bfc:	003dad06 	br	200952b4 <__flash_rwdata_start+0xffff66e0>
20095c00:	10803fcc 	andi	r2,r2,255
20095c04:	00c00044 	movi	r3,1
20095c08:	10fe2f1e 	bne	r2,r3,200954c8 <__flash_rwdata_start+0xffff68f4>
20095c0c:	5000e026 	beq	r10,zero,20095f90 <___svfiprintf_internal_r+0xdd8>
20095c10:	dc002015 	stw	r16,128(sp)
20095c14:	dc402215 	stw	r17,136(sp)
20095c18:	dd801a04 	addi	r22,sp,104
20095c1c:	402f883a 	mov	r23,r8
20095c20:	5839883a 	mov	fp,r11
20095c24:	4821883a 	mov	r16,r9
20095c28:	5023883a 	mov	r17,r10
20095c2c:	8009883a 	mov	r4,r16
20095c30:	880b883a 	mov	r5,r17
20095c34:	01800284 	movi	r6,10
20095c38:	000f883a 	mov	r7,zero
20095c3c:	009856c0 	call	2009856c <__umoddi3>
20095c40:	10800c04 	addi	r2,r2,48
20095c44:	b5bfffc4 	addi	r22,r22,-1
20095c48:	8009883a 	mov	r4,r16
20095c4c:	880b883a 	mov	r5,r17
20095c50:	01800284 	movi	r6,10
20095c54:	000f883a 	mov	r7,zero
20095c58:	b0800005 	stb	r2,0(r22)
20095c5c:	0097fac0 	call	20097fac <__udivdi3>
20095c60:	1021883a 	mov	r16,r2
20095c64:	10c4b03a 	or	r2,r2,r3
20095c68:	1823883a 	mov	r17,r3
20095c6c:	103fef1e 	bne	r2,zero,20095c2c <__flash_rwdata_start+0xffff7058>
20095c70:	da801e17 	ldw	r10,120(sp)
20095c74:	e017883a 	mov	r11,fp
20095c78:	dc002017 	ldw	r16,128(sp)
20095c7c:	dc402217 	ldw	r17,136(sp)
20095c80:	b811883a 	mov	r8,r23
20095c84:	dd802615 	stw	r22,152(sp)
20095c88:	55b9c83a 	sub	fp,r10,r22
20095c8c:	003e2006 	br	20095510 <__flash_rwdata_start+0xffff693c>
20095c90:	d8801c17 	ldw	r2,112(sp)
20095c94:	10000426 	beq	r2,zero,20095ca8 <___svfiprintf_internal_r+0xaf0>
20095c98:	d9002917 	ldw	r4,164(sp)
20095c9c:	d9402717 	ldw	r5,156(sp)
20095ca0:	d9801a04 	addi	r6,sp,104
20095ca4:	0094fec0 	call	20094fec <__ssprint_r>
20095ca8:	da802717 	ldw	r10,156(sp)
20095cac:	5080030b 	ldhu	r2,12(r10)
20095cb0:	1080100c 	andi	r2,r2,64
20095cb4:	1000511e 	bne	r2,zero,20095dfc <___svfiprintf_internal_r+0xc44>
20095cb8:	d8802417 	ldw	r2,144(sp)
20095cbc:	dfc03617 	ldw	ra,216(sp)
20095cc0:	df003517 	ldw	fp,212(sp)
20095cc4:	ddc03417 	ldw	r23,208(sp)
20095cc8:	dd803317 	ldw	r22,204(sp)
20095ccc:	dd403217 	ldw	r21,200(sp)
20095cd0:	dd003117 	ldw	r20,196(sp)
20095cd4:	dcc03017 	ldw	r19,192(sp)
20095cd8:	dc802f17 	ldw	r18,188(sp)
20095cdc:	dc402e17 	ldw	r17,184(sp)
20095ce0:	dc002d17 	ldw	r16,180(sp)
20095ce4:	dec03704 	addi	sp,sp,220
20095ce8:	f800283a 	ret
20095cec:	da802117 	ldw	r10,132(sp)
20095cf0:	dac02017 	ldw	r11,128(sp)
20095cf4:	52edc83a 	sub	r22,r10,r11
20095cf8:	05bf540e 	bge	zero,r22,20095a4c <__flash_rwdata_start+0xffff6e78>
20095cfc:	02400404 	movi	r9,16
20095d00:	4d81210e 	bge	r9,r22,20096188 <___svfiprintf_internal_r+0xfd0>
20095d04:	01400034 	movhi	r5,0
20095d08:	2941fc04 	addi	r5,r5,2032
20095d0c:	d9402215 	stw	r5,136(sp)
20095d10:	05c001c4 	movi	r23,7
20095d14:	00000306 	br	20095d24 <___svfiprintf_internal_r+0xb6c>
20095d18:	b5bffc04 	addi	r22,r22,-16
20095d1c:	42000204 	addi	r8,r8,8
20095d20:	4d80130e 	bge	r9,r22,20095d70 <___svfiprintf_internal_r+0xbb8>
20095d24:	18c00404 	addi	r3,r3,16
20095d28:	10800044 	addi	r2,r2,1
20095d2c:	44c00015 	stw	r19,0(r8)
20095d30:	42400115 	stw	r9,4(r8)
20095d34:	d8c01c15 	stw	r3,112(sp)
20095d38:	d8801b15 	stw	r2,108(sp)
20095d3c:	b8bff60e 	bge	r23,r2,20095d18 <__flash_rwdata_start+0xffff7144>
20095d40:	9009883a 	mov	r4,r18
20095d44:	a00b883a 	mov	r5,r20
20095d48:	d9801a04 	addi	r6,sp,104
20095d4c:	da402c15 	stw	r9,176(sp)
20095d50:	0094fec0 	call	20094fec <__ssprint_r>
20095d54:	da402c17 	ldw	r9,176(sp)
20095d58:	103fd31e 	bne	r2,zero,20095ca8 <__flash_rwdata_start+0xffff70d4>
20095d5c:	b5bffc04 	addi	r22,r22,-16
20095d60:	d8c01c17 	ldw	r3,112(sp)
20095d64:	d8801b17 	ldw	r2,108(sp)
20095d68:	d811883a 	mov	r8,sp
20095d6c:	4dbfed16 	blt	r9,r22,20095d24 <__flash_rwdata_start+0xffff7150>
20095d70:	da802217 	ldw	r10,136(sp)
20095d74:	1d87883a 	add	r3,r3,r22
20095d78:	10800044 	addi	r2,r2,1
20095d7c:	42800015 	stw	r10,0(r8)
20095d80:	45800115 	stw	r22,4(r8)
20095d84:	d8c01c15 	stw	r3,112(sp)
20095d88:	d8801b15 	stw	r2,108(sp)
20095d8c:	010001c4 	movi	r4,7
20095d90:	2080c616 	blt	r4,r2,200960ac <___svfiprintf_internal_r+0xef4>
20095d94:	42000204 	addi	r8,r8,8
20095d98:	003f2c06 	br	20095a4c <__flash_rwdata_start+0xffff6e78>
20095d9c:	9009883a 	mov	r4,r18
20095da0:	a00b883a 	mov	r5,r20
20095da4:	d9801a04 	addi	r6,sp,104
20095da8:	0094fec0 	call	20094fec <__ssprint_r>
20095dac:	103fbe1e 	bne	r2,zero,20095ca8 <__flash_rwdata_start+0xffff70d4>
20095db0:	d8c01c17 	ldw	r3,112(sp)
20095db4:	d811883a 	mov	r8,sp
20095db8:	003f5606 	br	20095b14 <__flash_rwdata_start+0xffff6f40>
20095dbc:	9009883a 	mov	r4,r18
20095dc0:	a00b883a 	mov	r5,r20
20095dc4:	d9801a04 	addi	r6,sp,104
20095dc8:	0094fec0 	call	20094fec <__ssprint_r>
20095dcc:	103f8626 	beq	r2,zero,20095be8 <__flash_rwdata_start+0xffff7014>
20095dd0:	003fb506 	br	20095ca8 <__flash_rwdata_start+0xffff70d4>
20095dd4:	10803fcc 	andi	r2,r2,255
20095dd8:	10003b1e 	bne	r2,zero,20095ec8 <___svfiprintf_internal_r+0xd10>
20095ddc:	8880004c 	andi	r2,r17,1
20095de0:	10007d26 	beq	r2,zero,20095fd8 <___svfiprintf_internal_r+0xe20>
20095de4:	00800c04 	movi	r2,48
20095de8:	d8c019c4 	addi	r3,sp,103
20095dec:	d88019c5 	stb	r2,103(sp)
20095df0:	df002b17 	ldw	fp,172(sp)
20095df4:	d8c02615 	stw	r3,152(sp)
20095df8:	003dc506 	br	20095510 <__flash_rwdata_start+0xffff693c>
20095dfc:	00bfffc4 	movi	r2,-1
20095e00:	003fae06 	br	20095cbc <__flash_rwdata_start+0xffff70e8>
20095e04:	9009883a 	mov	r4,r18
20095e08:	a00b883a 	mov	r5,r20
20095e0c:	d9801a04 	addi	r6,sp,104
20095e10:	0094fec0 	call	20094fec <__ssprint_r>
20095e14:	103fa41e 	bne	r2,zero,20095ca8 <__flash_rwdata_start+0xffff70d4>
20095e18:	d811883a 	mov	r8,sp
20095e1c:	003d2206 	br	200952a8 <__flash_rwdata_start+0xffff66d4>
20095e20:	9009883a 	mov	r4,r18
20095e24:	a00b883a 	mov	r5,r20
20095e28:	d9801a04 	addi	r6,sp,104
20095e2c:	0094fec0 	call	20094fec <__ssprint_r>
20095e30:	103f9d1e 	bne	r2,zero,20095ca8 <__flash_rwdata_start+0xffff70d4>
20095e34:	d8c01c17 	ldw	r3,112(sp)
20095e38:	d8801b17 	ldw	r2,108(sp)
20095e3c:	d811883a 	mov	r8,sp
20095e40:	003f2a06 	br	20095aec <__flash_rwdata_start+0xffff6f18>
20095e44:	d9402a17 	ldw	r5,168(sp)
20095e48:	d8c01a04 	addi	r3,sp,104
20095e4c:	488003cc 	andi	r2,r9,15
20095e50:	5008973a 	slli	r4,r10,28
20095e54:	2885883a 	add	r2,r5,r2
20095e58:	4812d13a 	srli	r9,r9,4
20095e5c:	10800003 	ldbu	r2,0(r2)
20095e60:	5014d13a 	srli	r10,r10,4
20095e64:	18ffffc4 	addi	r3,r3,-1
20095e68:	2252b03a 	or	r9,r4,r9
20095e6c:	18800005 	stb	r2,0(r3)
20095e70:	4a84b03a 	or	r2,r9,r10
20095e74:	103ff51e 	bne	r2,zero,20095e4c <__flash_rwdata_start+0xffff7278>
20095e78:	d8c02615 	stw	r3,152(sp)
20095e7c:	003da206 	br	20095508 <__flash_rwdata_start+0xffff6934>
20095e80:	9009883a 	mov	r4,r18
20095e84:	a00b883a 	mov	r5,r20
20095e88:	d9801a04 	addi	r6,sp,104
20095e8c:	0094fec0 	call	20094fec <__ssprint_r>
20095e90:	103f851e 	bne	r2,zero,20095ca8 <__flash_rwdata_start+0xffff70d4>
20095e94:	d8c01c17 	ldw	r3,112(sp)
20095e98:	d8801b17 	ldw	r2,108(sp)
20095e9c:	d811883a 	mov	r8,sp
20095ea0:	003eda06 	br	20095a0c <__flash_rwdata_start+0xffff6e38>
20095ea4:	9009883a 	mov	r4,r18
20095ea8:	a00b883a 	mov	r5,r20
20095eac:	d9801a04 	addi	r6,sp,104
20095eb0:	0094fec0 	call	20094fec <__ssprint_r>
20095eb4:	103f7c1e 	bne	r2,zero,20095ca8 <__flash_rwdata_start+0xffff70d4>
20095eb8:	d8c01c17 	ldw	r3,112(sp)
20095ebc:	d8801b17 	ldw	r2,108(sp)
20095ec0:	d811883a 	mov	r8,sp
20095ec4:	003ede06 	br	20095a40 <__flash_rwdata_start+0xffff6e6c>
20095ec8:	da801a04 	addi	r10,sp,104
20095ecc:	da802615 	stw	r10,152(sp)
20095ed0:	003d8f06 	br	20095510 <__flash_rwdata_start+0xffff693c>
20095ed4:	8880040c 	andi	r2,r17,16
20095ed8:	10004c1e 	bne	r2,zero,2009600c <___svfiprintf_internal_r+0xe54>
20095edc:	8880100c 	andi	r2,r17,64
20095ee0:	da802317 	ldw	r10,140(sp)
20095ee4:	10004a26 	beq	r2,zero,20096010 <___svfiprintf_internal_r+0xe58>
20095ee8:	5240000b 	ldhu	r9,0(r10)
20095eec:	dac02317 	ldw	r11,140(sp)
20095ef0:	0015883a 	mov	r10,zero
20095ef4:	00800044 	movi	r2,1
20095ef8:	5ac00104 	addi	r11,r11,4
20095efc:	dac02315 	stw	r11,140(sp)
20095f00:	4807883a 	mov	r3,r9
20095f04:	003d6506 	br	2009549c <__flash_rwdata_start+0xffff68c8>
20095f08:	9009883a 	mov	r4,r18
20095f0c:	a00b883a 	mov	r5,r20
20095f10:	d9801a04 	addi	r6,sp,104
20095f14:	0094fec0 	call	20094fec <__ssprint_r>
20095f18:	103f631e 	bne	r2,zero,20095ca8 <__flash_rwdata_start+0xffff70d4>
20095f1c:	d8c01c17 	ldw	r3,112(sp)
20095f20:	d8801b17 	ldw	r2,108(sp)
20095f24:	d811883a 	mov	r8,sp
20095f28:	003eab06 	br	200959d8 <__flash_rwdata_start+0xffff6e04>
20095f2c:	8880040c 	andi	r2,r17,16
20095f30:	1000331e 	bne	r2,zero,20096000 <___svfiprintf_internal_r+0xe48>
20095f34:	8880100c 	andi	r2,r17,64
20095f38:	da802317 	ldw	r10,140(sp)
20095f3c:	10003126 	beq	r2,zero,20096004 <___svfiprintf_internal_r+0xe4c>
20095f40:	5240000b 	ldhu	r9,0(r10)
20095f44:	dac02317 	ldw	r11,140(sp)
20095f48:	0015883a 	mov	r10,zero
20095f4c:	0005883a 	mov	r2,zero
20095f50:	5ac00104 	addi	r11,r11,4
20095f54:	dac02315 	stw	r11,140(sp)
20095f58:	4807883a 	mov	r3,r9
20095f5c:	003d4f06 	br	2009549c <__flash_rwdata_start+0xffff68c8>
20095f60:	10803fcc 	andi	r2,r2,255
20095f64:	1080201c 	xori	r2,r2,128
20095f68:	10bfe004 	addi	r2,r2,-128
20095f6c:	01000c04 	movi	r4,48
20095f70:	11005b26 	beq	r2,r4,200960e0 <___svfiprintf_internal_r+0xf28>
20095f74:	da802617 	ldw	r10,152(sp)
20095f78:	d8801e17 	ldw	r2,120(sp)
20095f7c:	193fffc5 	stb	r4,-1(r3)
20095f80:	52bfffc4 	addi	r10,r10,-1
20095f84:	da802615 	stw	r10,152(sp)
20095f88:	12b9c83a 	sub	fp,r2,r10
20095f8c:	003d6006 	br	20095510 <__flash_rwdata_start+0xffff693c>
20095f90:	00800244 	movi	r2,9
20095f94:	127f1e36 	bltu	r2,r9,20095c10 <__flash_rwdata_start+0xffff703c>
20095f98:	4a400c04 	addi	r9,r9,48
20095f9c:	d8c019c4 	addi	r3,sp,103
20095fa0:	da4019c5 	stb	r9,103(sp)
20095fa4:	df002b17 	ldw	fp,172(sp)
20095fa8:	d8c02615 	stw	r3,152(sp)
20095fac:	003d5806 	br	20095510 <__flash_rwdata_start+0xffff693c>
20095fb0:	d8802315 	stw	r2,140(sp)
20095fb4:	a9000007 	ldb	r4,0(r21)
20095fb8:	003ccb06 	br	200952e8 <__flash_rwdata_start+0xffff6714>
20095fbc:	9009883a 	mov	r4,r18
20095fc0:	a00b883a 	mov	r5,r20
20095fc4:	d9801a04 	addi	r6,sp,104
20095fc8:	0094fec0 	call	20094fec <__ssprint_r>
20095fcc:	103f361e 	bne	r2,zero,20095ca8 <__flash_rwdata_start+0xffff70d4>
20095fd0:	d8c01c17 	ldw	r3,112(sp)
20095fd4:	003efc06 	br	20095bc8 <__flash_rwdata_start+0xffff6ff4>
20095fd8:	d8c01a04 	addi	r3,sp,104
20095fdc:	d8c02615 	stw	r3,152(sp)
20095fe0:	003d4b06 	br	20095510 <__flash_rwdata_start+0xffff693c>
20095fe4:	da802317 	ldw	r10,140(sp)
20095fe8:	1a400017 	ldw	r9,0(r3)
20095fec:	52800104 	addi	r10,r10,4
20095ff0:	da802315 	stw	r10,140(sp)
20095ff4:	4815d7fa 	srai	r10,r9,31
20095ff8:	5005883a 	mov	r2,r10
20095ffc:	003d9c06 	br	20095670 <__flash_rwdata_start+0xffff6a9c>
20096000:	da802317 	ldw	r10,140(sp)
20096004:	52400017 	ldw	r9,0(r10)
20096008:	003fce06 	br	20095f44 <__flash_rwdata_start+0xffff7370>
2009600c:	da802317 	ldw	r10,140(sp)
20096010:	52400017 	ldw	r9,0(r10)
20096014:	003fb506 	br	20095eec <__flash_rwdata_start+0xffff7318>
20096018:	8880100c 	andi	r2,r17,64
2009601c:	da802317 	ldw	r10,140(sp)
20096020:	103e1926 	beq	r2,zero,20095888 <__flash_rwdata_start+0xffff6cb4>
20096024:	dac02317 	ldw	r11,140(sp)
20096028:	5240000b 	ldhu	r9,0(r10)
2009602c:	0015883a 	mov	r10,zero
20096030:	5ac00104 	addi	r11,r11,4
20096034:	dac02315 	stw	r11,140(sp)
20096038:	003de406 	br	200957cc <__flash_rwdata_start+0xffff6bf8>
2009603c:	a9000007 	ldb	r4,0(r21)
20096040:	003ca906 	br	200952e8 <__flash_rwdata_start+0xffff6714>
20096044:	dac02317 	ldw	r11,140(sp)
20096048:	da802417 	ldw	r10,144(sp)
2009604c:	58800017 	ldw	r2,0(r11)
20096050:	5007d7fa 	srai	r3,r10,31
20096054:	5ac00104 	addi	r11,r11,4
20096058:	dac02315 	stw	r11,140(sp)
2009605c:	12800015 	stw	r10,0(r2)
20096060:	10c00115 	stw	r3,4(r2)
20096064:	003c7806 	br	20095248 <__flash_rwdata_start+0xffff6674>
20096068:	00800c04 	movi	r2,48
2009606c:	d8801d05 	stb	r2,116(sp)
20096070:	d9001d45 	stb	r4,117(sp)
20096074:	8c400094 	ori	r17,r17,2
20096078:	00800084 	movi	r2,2
2009607c:	003d0706 	br	2009549c <__flash_rwdata_start+0xffff68c8>
20096080:	ad400044 	addi	r21,r21,1
20096084:	8c400814 	ori	r17,r17,32
20096088:	11000047 	ldb	r4,1(r2)
2009608c:	003c9606 	br	200952e8 <__flash_rwdata_start+0xffff6714>
20096090:	dac02317 	ldw	r11,140(sp)
20096094:	da802417 	ldw	r10,144(sp)
20096098:	58800017 	ldw	r2,0(r11)
2009609c:	5ac00104 	addi	r11,r11,4
200960a0:	dac02315 	stw	r11,140(sp)
200960a4:	12800015 	stw	r10,0(r2)
200960a8:	003c6706 	br	20095248 <__flash_rwdata_start+0xffff6674>
200960ac:	9009883a 	mov	r4,r18
200960b0:	a00b883a 	mov	r5,r20
200960b4:	d9801a04 	addi	r6,sp,104
200960b8:	0094fec0 	call	20094fec <__ssprint_r>
200960bc:	103efa1e 	bne	r2,zero,20095ca8 <__flash_rwdata_start+0xffff70d4>
200960c0:	d8c01c17 	ldw	r3,112(sp)
200960c4:	d8801b17 	ldw	r2,108(sp)
200960c8:	d811883a 	mov	r8,sp
200960cc:	003e5f06 	br	20095a4c <__flash_rwdata_start+0xffff6e78>
200960d0:	02c00034 	movhi	r11,0
200960d4:	5ac1fc04 	addi	r11,r11,2032
200960d8:	dac02215 	stw	r11,136(sp)
200960dc:	003e7906 	br	20095ac4 <__flash_rwdata_start+0xffff6ef0>
200960e0:	da801e17 	ldw	r10,120(sp)
200960e4:	d8c02617 	ldw	r3,152(sp)
200960e8:	50f9c83a 	sub	fp,r10,r3
200960ec:	003d0806 	br	20095510 <__flash_rwdata_start+0xffff693c>
200960f0:	da002c15 	stw	r8,176(sp)
200960f4:	008c2f80 	call	2008c2f8 <strlen>
200960f8:	1039883a 	mov	fp,r2
200960fc:	dac01d83 	ldbu	r11,118(sp)
20096100:	ddc02315 	stw	r23,140(sp)
20096104:	0021883a 	mov	r16,zero
20096108:	da002c17 	ldw	r8,176(sp)
2009610c:	003d0006 	br	20095510 <__flash_rwdata_start+0xffff693c>
20096110:	00800184 	movi	r2,6
20096114:	1400012e 	bgeu	r2,r16,2009611c <___svfiprintf_internal_r+0xf64>
20096118:	1021883a 	mov	r16,r2
2009611c:	8039883a 	mov	fp,r16
20096120:	802d883a 	mov	r22,r16
20096124:	80002116 	blt	r16,zero,200961ac <___svfiprintf_internal_r+0xff4>
20096128:	00800034 	movhi	r2,0
2009612c:	10819904 	addi	r2,r2,1636
20096130:	dd802015 	stw	r22,128(sp)
20096134:	ddc02315 	stw	r23,140(sp)
20096138:	d8802615 	stw	r2,152(sp)
2009613c:	003d5d06 	br	200956b4 <__flash_rwdata_start+0xffff6ae0>
20096140:	04001004 	movi	r16,64
20096144:	800b883a 	mov	r5,r16
20096148:	008b5780 	call	2008b578 <_malloc_r>
2009614c:	da802717 	ldw	r10,156(sp)
20096150:	50800015 	stw	r2,0(r10)
20096154:	50800415 	stw	r2,16(r10)
20096158:	10002026 	beq	r2,zero,200961dc <___svfiprintf_internal_r+0x1024>
2009615c:	da802717 	ldw	r10,156(sp)
20096160:	54000515 	stw	r16,20(r10)
20096164:	003c2806 	br	20095208 <__flash_rwdata_start+0xffff6634>
20096168:	01000034 	movhi	r4,0
2009616c:	21020004 	addi	r4,r4,2048
20096170:	d9002815 	stw	r4,160(sp)
20096174:	003d7e06 	br	20095770 <__flash_rwdata_start+0xffff6b9c>
20096178:	01000034 	movhi	r4,0
2009617c:	21020004 	addi	r4,r4,2048
20096180:	d9002815 	stw	r4,160(sp)
20096184:	003e8706 	br	20095ba4 <__flash_rwdata_start+0xffff6fd0>
20096188:	01000034 	movhi	r4,0
2009618c:	2101fc04 	addi	r4,r4,2032
20096190:	d9002215 	stw	r4,136(sp)
20096194:	003ef606 	br	20095d70 <__flash_rwdata_start+0xffff719c>
20096198:	8039883a 	mov	fp,r16
2009619c:	dac01d83 	ldbu	r11,118(sp)
200961a0:	ddc02315 	stw	r23,140(sp)
200961a4:	0021883a 	mov	r16,zero
200961a8:	003cd906 	br	20095510 <__flash_rwdata_start+0xffff693c>
200961ac:	002d883a 	mov	r22,zero
200961b0:	003fdd06 	br	20096128 <__flash_rwdata_start+0xffff7554>
200961b4:	dac02317 	ldw	r11,140(sp)
200961b8:	a805883a 	mov	r2,r21
200961bc:	502b883a 	mov	r21,r10
200961c0:	5c000017 	ldw	r16,0(r11)
200961c4:	59000104 	addi	r4,r11,4
200961c8:	d9002315 	stw	r4,140(sp)
200961cc:	803fae0e 	bge	r16,zero,20096088 <__flash_rwdata_start+0xffff74b4>
200961d0:	043fffc4 	movi	r16,-1
200961d4:	11000047 	ldb	r4,1(r2)
200961d8:	003c4306 	br	200952e8 <__flash_rwdata_start+0xffff6714>
200961dc:	dac02917 	ldw	r11,164(sp)
200961e0:	00800304 	movi	r2,12
200961e4:	58800015 	stw	r2,0(r11)
200961e8:	00bfffc4 	movi	r2,-1
200961ec:	003eb306 	br	20095cbc <__flash_rwdata_start+0xffff70e8>

200961f0 <__sprint_r.part.0>:
200961f0:	28801917 	ldw	r2,100(r5)
200961f4:	defff604 	addi	sp,sp,-40
200961f8:	dd400515 	stw	r21,20(sp)
200961fc:	dcc00315 	stw	r19,12(sp)
20096200:	dfc00915 	stw	ra,36(sp)
20096204:	df000815 	stw	fp,32(sp)
20096208:	ddc00715 	stw	r23,28(sp)
2009620c:	dd800615 	stw	r22,24(sp)
20096210:	dd000415 	stw	r20,16(sp)
20096214:	dc800215 	stw	r18,8(sp)
20096218:	dc400115 	stw	r17,4(sp)
2009621c:	dc000015 	stw	r16,0(sp)
20096220:	1088000c 	andi	r2,r2,8192
20096224:	2827883a 	mov	r19,r5
20096228:	302b883a 	mov	r21,r6
2009622c:	10002d26 	beq	r2,zero,200962e4 <__sprint_r.part.0+0xf4>
20096230:	30800217 	ldw	r2,8(r6)
20096234:	35800017 	ldw	r22,0(r6)
20096238:	10002826 	beq	r2,zero,200962dc <__sprint_r.part.0+0xec>
2009623c:	2029883a 	mov	r20,r4
20096240:	b5c00104 	addi	r23,r22,4
20096244:	04bfffc4 	movi	r18,-1
20096248:	bc400017 	ldw	r17,0(r23)
2009624c:	b4000017 	ldw	r16,0(r22)
20096250:	0039883a 	mov	fp,zero
20096254:	8822d0ba 	srli	r17,r17,2
20096258:	04400316 	blt	zero,r17,20096268 <__sprint_r.part.0+0x78>
2009625c:	00001806 	br	200962c0 <__sprint_r.part.0+0xd0>
20096260:	84000104 	addi	r16,r16,4
20096264:	8f001526 	beq	r17,fp,200962bc <__sprint_r.part.0+0xcc>
20096268:	81400017 	ldw	r5,0(r16)
2009626c:	a009883a 	mov	r4,r20
20096270:	980d883a 	mov	r6,r19
20096274:	0097a800 	call	20097a80 <_fputwc_r>
20096278:	e7000044 	addi	fp,fp,1
2009627c:	14bff81e 	bne	r2,r18,20096260 <__flash_rwdata_start+0xffff768c>
20096280:	9005883a 	mov	r2,r18
20096284:	a8000215 	stw	zero,8(r21)
20096288:	a8000115 	stw	zero,4(r21)
2009628c:	dfc00917 	ldw	ra,36(sp)
20096290:	df000817 	ldw	fp,32(sp)
20096294:	ddc00717 	ldw	r23,28(sp)
20096298:	dd800617 	ldw	r22,24(sp)
2009629c:	dd400517 	ldw	r21,20(sp)
200962a0:	dd000417 	ldw	r20,16(sp)
200962a4:	dcc00317 	ldw	r19,12(sp)
200962a8:	dc800217 	ldw	r18,8(sp)
200962ac:	dc400117 	ldw	r17,4(sp)
200962b0:	dc000017 	ldw	r16,0(sp)
200962b4:	dec00a04 	addi	sp,sp,40
200962b8:	f800283a 	ret
200962bc:	a8800217 	ldw	r2,8(r21)
200962c0:	8c63883a 	add	r17,r17,r17
200962c4:	8c63883a 	add	r17,r17,r17
200962c8:	1445c83a 	sub	r2,r2,r17
200962cc:	a8800215 	stw	r2,8(r21)
200962d0:	b5800204 	addi	r22,r22,8
200962d4:	bdc00204 	addi	r23,r23,8
200962d8:	103fdb1e 	bne	r2,zero,20096248 <__flash_rwdata_start+0xffff7674>
200962dc:	0005883a 	mov	r2,zero
200962e0:	003fe806 	br	20096284 <__flash_rwdata_start+0xffff76b0>
200962e4:	0092b400 	call	20092b40 <__sfvwrite_r>
200962e8:	003fe606 	br	20096284 <__flash_rwdata_start+0xffff76b0>

200962ec <__sprint_r>:
200962ec:	30c00217 	ldw	r3,8(r6)
200962f0:	18000126 	beq	r3,zero,200962f8 <__sprint_r+0xc>
200962f4:	00961f01 	jmpi	200961f0 <__sprint_r.part.0>
200962f8:	30000115 	stw	zero,4(r6)
200962fc:	0005883a 	mov	r2,zero
20096300:	f800283a 	ret

20096304 <___vfiprintf_internal_r>:
20096304:	deffca04 	addi	sp,sp,-216
20096308:	dd803215 	stw	r22,200(sp)
2009630c:	dd403115 	stw	r21,196(sp)
20096310:	dfc03515 	stw	ra,212(sp)
20096314:	df003415 	stw	fp,208(sp)
20096318:	ddc03315 	stw	r23,204(sp)
2009631c:	dd003015 	stw	r20,192(sp)
20096320:	dcc02f15 	stw	r19,188(sp)
20096324:	dc802e15 	stw	r18,184(sp)
20096328:	dc402d15 	stw	r17,180(sp)
2009632c:	dc002c15 	stw	r16,176(sp)
20096330:	d9002015 	stw	r4,128(sp)
20096334:	d9c02215 	stw	r7,136(sp)
20096338:	282b883a 	mov	r21,r5
2009633c:	302d883a 	mov	r22,r6
20096340:	20000226 	beq	r4,zero,2009634c <___vfiprintf_internal_r+0x48>
20096344:	20800e17 	ldw	r2,56(r4)
20096348:	1001b126 	beq	r2,zero,20096a10 <___vfiprintf_internal_r+0x70c>
2009634c:	a880030b 	ldhu	r2,12(r21)
20096350:	10c8000c 	andi	r3,r2,8192
20096354:	1800061e 	bne	r3,zero,20096370 <___vfiprintf_internal_r+0x6c>
20096358:	a9001917 	ldw	r4,100(r21)
2009635c:	00f7ffc4 	movi	r3,-8193
20096360:	10880014 	ori	r2,r2,8192
20096364:	20c6703a 	and	r3,r4,r3
20096368:	a880030d 	sth	r2,12(r21)
2009636c:	a8c01915 	stw	r3,100(r21)
20096370:	10c0020c 	andi	r3,r2,8
20096374:	18018926 	beq	r3,zero,2009699c <___vfiprintf_internal_r+0x698>
20096378:	a8c00417 	ldw	r3,16(r21)
2009637c:	18018726 	beq	r3,zero,2009699c <___vfiprintf_internal_r+0x698>
20096380:	1080068c 	andi	r2,r2,26
20096384:	00c00284 	movi	r3,10
20096388:	10c18c26 	beq	r2,r3,200969bc <___vfiprintf_internal_r+0x6b8>
2009638c:	d8801a04 	addi	r2,sp,104
20096390:	d8c019c4 	addi	r3,sp,103
20096394:	07000034 	movhi	fp,0
20096398:	05c00034 	movhi	r23,0
2009639c:	10c9c83a 	sub	r4,r2,r3
200963a0:	e7020804 	addi	fp,fp,2080
200963a4:	bdc20404 	addi	r23,r23,2064
200963a8:	d8801e15 	stw	r2,120(sp)
200963ac:	d8c01f15 	stw	r3,124(sp)
200963b0:	dec01a15 	stw	sp,104(sp)
200963b4:	d8001c15 	stw	zero,112(sp)
200963b8:	d8001b15 	stw	zero,108(sp)
200963bc:	d8002615 	stw	zero,152(sp)
200963c0:	d8002315 	stw	zero,140(sp)
200963c4:	d9002715 	stw	r4,156(sp)
200963c8:	d811883a 	mov	r8,sp
200963cc:	dd402115 	stw	r21,132(sp)
200963d0:	b021883a 	mov	r16,r22
200963d4:	80800007 	ldb	r2,0(r16)
200963d8:	10037226 	beq	r2,zero,200971a4 <___vfiprintf_internal_r+0xea0>
200963dc:	01000944 	movi	r4,37
200963e0:	11037026 	beq	r2,r4,200971a4 <___vfiprintf_internal_r+0xea0>
200963e4:	8005883a 	mov	r2,r16
200963e8:	00000106 	br	200963f0 <___vfiprintf_internal_r+0xec>
200963ec:	19000326 	beq	r3,r4,200963fc <___vfiprintf_internal_r+0xf8>
200963f0:	10800044 	addi	r2,r2,1
200963f4:	10c00007 	ldb	r3,0(r2)
200963f8:	183ffc1e 	bne	r3,zero,200963ec <__flash_rwdata_start+0xffff7818>
200963fc:	1425c83a 	sub	r18,r2,r16
20096400:	1023883a 	mov	r17,r2
20096404:	90001026 	beq	r18,zero,20096448 <___vfiprintf_internal_r+0x144>
20096408:	d8c01c17 	ldw	r3,112(sp)
2009640c:	d8801b17 	ldw	r2,108(sp)
20096410:	44000015 	stw	r16,0(r8)
20096414:	90c7883a 	add	r3,r18,r3
20096418:	10800044 	addi	r2,r2,1
2009641c:	44800115 	stw	r18,4(r8)
20096420:	d8c01c15 	stw	r3,112(sp)
20096424:	d8801b15 	stw	r2,108(sp)
20096428:	010001c4 	movi	r4,7
2009642c:	2080750e 	bge	r4,r2,20096604 <___vfiprintf_internal_r+0x300>
20096430:	18036f1e 	bne	r3,zero,200971f0 <___vfiprintf_internal_r+0xeec>
20096434:	d8802317 	ldw	r2,140(sp)
20096438:	d8001b15 	stw	zero,108(sp)
2009643c:	d811883a 	mov	r8,sp
20096440:	1485883a 	add	r2,r2,r18
20096444:	d8802315 	stw	r2,140(sp)
20096448:	88800007 	ldb	r2,0(r17)
2009644c:	10041026 	beq	r2,zero,20097490 <___vfiprintf_internal_r+0x118c>
20096450:	88c00047 	ldb	r3,1(r17)
20096454:	88800044 	addi	r2,r17,1
20096458:	d8001d85 	stb	zero,118(sp)
2009645c:	000f883a 	mov	r7,zero
20096460:	027fffc4 	movi	r9,-1
20096464:	0025883a 	mov	r18,zero
20096468:	002b883a 	mov	r21,zero
2009646c:	01401604 	movi	r5,88
20096470:	01800244 	movi	r6,9
20096474:	03400a84 	movi	r13,42
20096478:	03001b04 	movi	r12,108
2009647c:	14000044 	addi	r16,r2,1
20096480:	18bff804 	addi	r2,r3,-32
20096484:	28825536 	bltu	r5,r2,20096ddc <___vfiprintf_internal_r+0xad8>
20096488:	100490ba 	slli	r2,r2,2
2009648c:	01080274 	movhi	r4,8201
20096490:	21192804 	addi	r4,r4,25760
20096494:	1105883a 	add	r2,r2,r4
20096498:	10800017 	ldw	r2,0(r2)
2009649c:	1000683a 	jmp	r2
200964a0:	20096ba0 	cmpeqi	zero,r4,9646
200964a4:	20096ddc 	xori	zero,r4,9655
200964a8:	20096ddc 	xori	zero,r4,9655
200964ac:	20096bc0 	call	220096bc <__flash_rwdata_start+0x1f6aae8>
200964b0:	20096ddc 	xori	zero,r4,9655
200964b4:	20096ddc 	xori	zero,r4,9655
200964b8:	20096ddc 	xori	zero,r4,9655
200964bc:	20096ddc 	xori	zero,r4,9655
200964c0:	20096ddc 	xori	zero,r4,9655
200964c4:	20096ddc 	xori	zero,r4,9655
200964c8:	20096bd0 	cmplti	zero,r4,9647
200964cc:	20096bf0 	cmpltui	zero,r4,9647
200964d0:	20096ddc 	xori	zero,r4,9655
200964d4:	20096a18 	cmpnei	zero,r4,9640
200964d8:	20096b04 	addi	zero,r4,9644
200964dc:	20096ddc 	xori	zero,r4,9655
200964e0:	20096a84 	addi	zero,r4,9642
200964e4:	20096a94 	ori	zero,r4,9642
200964e8:	20096a94 	ori	zero,r4,9642
200964ec:	20096a94 	ori	zero,r4,9642
200964f0:	20096a94 	ori	zero,r4,9642
200964f4:	20096a94 	ori	zero,r4,9642
200964f8:	20096a94 	ori	zero,r4,9642
200964fc:	20096a94 	ori	zero,r4,9642
20096500:	20096a94 	ori	zero,r4,9642
20096504:	20096a94 	ori	zero,r4,9642
20096508:	20096ddc 	xori	zero,r4,9655
2009650c:	20096ddc 	xori	zero,r4,9655
20096510:	20096ddc 	xori	zero,r4,9655
20096514:	20096ddc 	xori	zero,r4,9655
20096518:	20096ddc 	xori	zero,r4,9655
2009651c:	20096ddc 	xori	zero,r4,9655
20096520:	20096ddc 	xori	zero,r4,9655
20096524:	20096ddc 	xori	zero,r4,9655
20096528:	20096ddc 	xori	zero,r4,9655
2009652c:	20096ddc 	xori	zero,r4,9655
20096530:	20096ac0 	call	220096ac <__flash_rwdata_start+0x1f6aad8>
20096534:	20096ddc 	xori	zero,r4,9655
20096538:	20096ddc 	xori	zero,r4,9655
2009653c:	20096ddc 	xori	zero,r4,9655
20096540:	20096ddc 	xori	zero,r4,9655
20096544:	20096ddc 	xori	zero,r4,9655
20096548:	20096ddc 	xori	zero,r4,9655
2009654c:	20096ddc 	xori	zero,r4,9655
20096550:	20096ddc 	xori	zero,r4,9655
20096554:	20096ddc 	xori	zero,r4,9655
20096558:	20096ddc 	xori	zero,r4,9655
2009655c:	2009664c 	andi	zero,r4,9625
20096560:	20096ddc 	xori	zero,r4,9655
20096564:	20096ddc 	xori	zero,r4,9655
20096568:	20096ddc 	xori	zero,r4,9655
2009656c:	20096ddc 	xori	zero,r4,9655
20096570:	20096ddc 	xori	zero,r4,9655
20096574:	20096618 	cmpnei	zero,r4,9624
20096578:	20096ddc 	xori	zero,r4,9655
2009657c:	20096ddc 	xori	zero,r4,9655
20096580:	20096c60 	cmpeqi	zero,r4,9649
20096584:	20096ddc 	xori	zero,r4,9655
20096588:	20096ddc 	xori	zero,r4,9655
2009658c:	20096ddc 	xori	zero,r4,9655
20096590:	20096ddc 	xori	zero,r4,9655
20096594:	20096ddc 	xori	zero,r4,9655
20096598:	20096ddc 	xori	zero,r4,9655
2009659c:	20096ddc 	xori	zero,r4,9655
200965a0:	20096ddc 	xori	zero,r4,9655
200965a4:	20096ddc 	xori	zero,r4,9655
200965a8:	20096ddc 	xori	zero,r4,9655
200965ac:	20096c00 	call	220096c0 <__flash_rwdata_start+0x1f6aaec>
200965b0:	20096c2c 	andhi	zero,r4,9648
200965b4:	20096ddc 	xori	zero,r4,9655
200965b8:	20096ddc 	xori	zero,r4,9655
200965bc:	20096ddc 	xori	zero,r4,9655
200965c0:	20096d08 	cmpgei	zero,r4,9652
200965c4:	20096c2c 	andhi	zero,r4,9648
200965c8:	20096ddc 	xori	zero,r4,9655
200965cc:	20096ddc 	xori	zero,r4,9655
200965d0:	20096d18 	cmpnei	zero,r4,9652
200965d4:	20096ddc 	xori	zero,r4,9655
200965d8:	20096b44 	addi	zero,r4,9645
200965dc:	20096650 	cmplti	zero,r4,9625
200965e0:	20096d2c 	andhi	zero,r4,9652
200965e4:	20096d6c 	andhi	zero,r4,9653
200965e8:	20096ddc 	xori	zero,r4,9655
200965ec:	20096cb4 	orhi	zero,r4,9650
200965f0:	20096ddc 	xori	zero,r4,9655
200965f4:	2009661c 	xori	zero,r4,9624
200965f8:	20096ddc 	xori	zero,r4,9655
200965fc:	20096ddc 	xori	zero,r4,9655
20096600:	20096d7c 	xorhi	zero,r4,9653
20096604:	42000204 	addi	r8,r8,8
20096608:	d8802317 	ldw	r2,140(sp)
2009660c:	1485883a 	add	r2,r2,r18
20096610:	d8802315 	stw	r2,140(sp)
20096614:	003f8c06 	br	20096448 <__flash_rwdata_start+0xffff7874>
20096618:	ad400414 	ori	r21,r21,16
2009661c:	a880080c 	andi	r2,r21,32
20096620:	1001e61e 	bne	r2,zero,20096dbc <___vfiprintf_internal_r+0xab8>
20096624:	a880040c 	andi	r2,r21,16
20096628:	10034726 	beq	r2,zero,20097348 <___vfiprintf_internal_r+0x1044>
2009662c:	d8802217 	ldw	r2,136(sp)
20096630:	001b883a 	mov	r13,zero
20096634:	15800017 	ldw	r22,0(r2)
20096638:	10800104 	addi	r2,r2,4
2009663c:	d8802215 	stw	r2,136(sp)
20096640:	b009883a 	mov	r4,r22
20096644:	00800044 	movi	r2,1
20096648:	00000c06 	br	2009667c <___vfiprintf_internal_r+0x378>
2009664c:	ad400414 	ori	r21,r21,16
20096650:	a880080c 	andi	r2,r21,32
20096654:	1001491e 	bne	r2,zero,20096b7c <___vfiprintf_internal_r+0x878>
20096658:	a880040c 	andi	r2,r21,16
2009665c:	10032d26 	beq	r2,zero,20097314 <___vfiprintf_internal_r+0x1010>
20096660:	d9002217 	ldw	r4,136(sp)
20096664:	001b883a 	mov	r13,zero
20096668:	0005883a 	mov	r2,zero
2009666c:	25800017 	ldw	r22,0(r4)
20096670:	21000104 	addi	r4,r4,4
20096674:	d9002215 	stw	r4,136(sp)
20096678:	b009883a 	mov	r4,r22
2009667c:	d8001d85 	stb	zero,118(sp)
20096680:	4827883a 	mov	r19,r9
20096684:	001d883a 	mov	r14,zero
20096688:	48000216 	blt	r9,zero,20096694 <___vfiprintf_internal_r+0x390>
2009668c:	00ffdfc4 	movi	r3,-129
20096690:	a8ea703a 	and	r21,r21,r3
20096694:	2002071e 	bne	r4,zero,20096eb4 <___vfiprintf_internal_r+0xbb0>
20096698:	4802ad26 	beq	r9,zero,20097150 <___vfiprintf_internal_r+0xe4c>
2009669c:	10803fcc 	andi	r2,r2,255
200966a0:	00c00044 	movi	r3,1
200966a4:	10c22b26 	beq	r2,r3,20096f54 <___vfiprintf_internal_r+0xc50>
200966a8:	00c00084 	movi	r3,2
200966ac:	dd001a04 	addi	r20,sp,104
200966b0:	10c0dd1e 	bne	r2,r3,20096a28 <___vfiprintf_internal_r+0x724>
200966b4:	d9002617 	ldw	r4,152(sp)
200966b8:	b08003cc 	andi	r2,r22,15
200966bc:	6806973a 	slli	r3,r13,28
200966c0:	2085883a 	add	r2,r4,r2
200966c4:	b02cd13a 	srli	r22,r22,4
200966c8:	10800003 	ldbu	r2,0(r2)
200966cc:	681ad13a 	srli	r13,r13,4
200966d0:	a53fffc4 	addi	r20,r20,-1
200966d4:	1dacb03a 	or	r22,r3,r22
200966d8:	a0800005 	stb	r2,0(r20)
200966dc:	b344b03a 	or	r2,r22,r13
200966e0:	103ff51e 	bne	r2,zero,200966b8 <__flash_rwdata_start+0xffff7ae4>
200966e4:	d9001e17 	ldw	r4,120(sp)
200966e8:	2527c83a 	sub	r19,r4,r20
200966ec:	9823883a 	mov	r17,r19
200966f0:	9a40010e 	bge	r19,r9,200966f8 <___vfiprintf_internal_r+0x3f4>
200966f4:	4823883a 	mov	r17,r9
200966f8:	73803fcc 	andi	r14,r14,255
200966fc:	7380201c 	xori	r14,r14,128
20096700:	73bfe004 	addi	r14,r14,-128
20096704:	70000126 	beq	r14,zero,2009670c <___vfiprintf_internal_r+0x408>
20096708:	8c400044 	addi	r17,r17,1
2009670c:	ab40008c 	andi	r13,r21,2
20096710:	68000126 	beq	r13,zero,20096718 <___vfiprintf_internal_r+0x414>
20096714:	8c400084 	addi	r17,r17,2
20096718:	ad80210c 	andi	r22,r21,132
2009671c:	b001c51e 	bne	r22,zero,20096e34 <___vfiprintf_internal_r+0xb30>
20096720:	9447c83a 	sub	r3,r18,r17
20096724:	00c1c30e 	bge	zero,r3,20096e34 <___vfiprintf_internal_r+0xb30>
20096728:	01c00404 	movi	r7,16
2009672c:	d8801c17 	ldw	r2,112(sp)
20096730:	38c37b0e 	bge	r7,r3,20097520 <___vfiprintf_internal_r+0x121c>
20096734:	01000034 	movhi	r4,0
20096738:	21020804 	addi	r4,r4,2080
2009673c:	dc002915 	stw	r16,164(sp)
20096740:	d9801b17 	ldw	r6,108(sp)
20096744:	d9002415 	stw	r4,144(sp)
20096748:	03c001c4 	movi	r15,7
2009674c:	da402515 	stw	r9,148(sp)
20096750:	db402815 	stw	r13,160(sp)
20096754:	1821883a 	mov	r16,r3
20096758:	00000506 	br	20096770 <___vfiprintf_internal_r+0x46c>
2009675c:	31400084 	addi	r5,r6,2
20096760:	42000204 	addi	r8,r8,8
20096764:	200d883a 	mov	r6,r4
20096768:	843ffc04 	addi	r16,r16,-16
2009676c:	3c000d0e 	bge	r7,r16,200967a4 <___vfiprintf_internal_r+0x4a0>
20096770:	10800404 	addi	r2,r2,16
20096774:	31000044 	addi	r4,r6,1
20096778:	47000015 	stw	fp,0(r8)
2009677c:	41c00115 	stw	r7,4(r8)
20096780:	d8801c15 	stw	r2,112(sp)
20096784:	d9001b15 	stw	r4,108(sp)
20096788:	793ff40e 	bge	r15,r4,2009675c <__flash_rwdata_start+0xffff7b88>
2009678c:	10019b1e 	bne	r2,zero,20096dfc <___vfiprintf_internal_r+0xaf8>
20096790:	843ffc04 	addi	r16,r16,-16
20096794:	000d883a 	mov	r6,zero
20096798:	01400044 	movi	r5,1
2009679c:	d811883a 	mov	r8,sp
200967a0:	3c3ff316 	blt	r7,r16,20096770 <__flash_rwdata_start+0xffff7b9c>
200967a4:	8007883a 	mov	r3,r16
200967a8:	da402517 	ldw	r9,148(sp)
200967ac:	db402817 	ldw	r13,160(sp)
200967b0:	dc002917 	ldw	r16,164(sp)
200967b4:	d9002417 	ldw	r4,144(sp)
200967b8:	1885883a 	add	r2,r3,r2
200967bc:	40c00115 	stw	r3,4(r8)
200967c0:	41000015 	stw	r4,0(r8)
200967c4:	d8801c15 	stw	r2,112(sp)
200967c8:	d9401b15 	stw	r5,108(sp)
200967cc:	00c001c4 	movi	r3,7
200967d0:	19426a16 	blt	r3,r5,2009717c <___vfiprintf_internal_r+0xe78>
200967d4:	d8c01d87 	ldb	r3,118(sp)
200967d8:	42000204 	addi	r8,r8,8
200967dc:	29000044 	addi	r4,r5,1
200967e0:	1801991e 	bne	r3,zero,20096e48 <___vfiprintf_internal_r+0xb44>
200967e4:	68000c26 	beq	r13,zero,20096818 <___vfiprintf_internal_r+0x514>
200967e8:	d8c01d04 	addi	r3,sp,116
200967ec:	10800084 	addi	r2,r2,2
200967f0:	40c00015 	stw	r3,0(r8)
200967f4:	00c00084 	movi	r3,2
200967f8:	40c00115 	stw	r3,4(r8)
200967fc:	d8801c15 	stw	r2,112(sp)
20096800:	d9001b15 	stw	r4,108(sp)
20096804:	00c001c4 	movi	r3,7
20096808:	19024c16 	blt	r3,r4,2009713c <___vfiprintf_internal_r+0xe38>
2009680c:	200b883a 	mov	r5,r4
20096810:	42000204 	addi	r8,r8,8
20096814:	21000044 	addi	r4,r4,1
20096818:	00c02004 	movi	r3,128
2009681c:	b0c20126 	beq	r22,r3,20097024 <___vfiprintf_internal_r+0xd20>
20096820:	4cedc83a 	sub	r22,r9,r19
20096824:	0580230e 	bge	zero,r22,200968b4 <___vfiprintf_internal_r+0x5b0>
20096828:	01c00404 	movi	r7,16
2009682c:	3d83140e 	bge	r7,r22,20097480 <___vfiprintf_internal_r+0x117c>
20096830:	01000034 	movhi	r4,0
20096834:	21020404 	addi	r4,r4,2064
20096838:	d9002415 	stw	r4,144(sp)
2009683c:	034001c4 	movi	r13,7
20096840:	00000506 	br	20096858 <___vfiprintf_internal_r+0x554>
20096844:	29000084 	addi	r4,r5,2
20096848:	42000204 	addi	r8,r8,8
2009684c:	180b883a 	mov	r5,r3
20096850:	b5bffc04 	addi	r22,r22,-16
20096854:	3d800d0e 	bge	r7,r22,2009688c <___vfiprintf_internal_r+0x588>
20096858:	10800404 	addi	r2,r2,16
2009685c:	28c00044 	addi	r3,r5,1
20096860:	45c00015 	stw	r23,0(r8)
20096864:	41c00115 	stw	r7,4(r8)
20096868:	d8801c15 	stw	r2,112(sp)
2009686c:	d8c01b15 	stw	r3,108(sp)
20096870:	68fff40e 	bge	r13,r3,20096844 <__flash_rwdata_start+0xffff7c70>
20096874:	1001811e 	bne	r2,zero,20096e7c <___vfiprintf_internal_r+0xb78>
20096878:	b5bffc04 	addi	r22,r22,-16
2009687c:	01000044 	movi	r4,1
20096880:	000b883a 	mov	r5,zero
20096884:	d811883a 	mov	r8,sp
20096888:	3dbff316 	blt	r7,r22,20096858 <__flash_rwdata_start+0xffff7c84>
2009688c:	d8c02417 	ldw	r3,144(sp)
20096890:	1585883a 	add	r2,r2,r22
20096894:	45800115 	stw	r22,4(r8)
20096898:	40c00015 	stw	r3,0(r8)
2009689c:	d8801c15 	stw	r2,112(sp)
200968a0:	d9001b15 	stw	r4,108(sp)
200968a4:	00c001c4 	movi	r3,7
200968a8:	1901d016 	blt	r3,r4,20096fec <___vfiprintf_internal_r+0xce8>
200968ac:	42000204 	addi	r8,r8,8
200968b0:	21000044 	addi	r4,r4,1
200968b4:	14c5883a 	add	r2,r2,r19
200968b8:	45000015 	stw	r20,0(r8)
200968bc:	44c00115 	stw	r19,4(r8)
200968c0:	d8801c15 	stw	r2,112(sp)
200968c4:	d9001b15 	stw	r4,108(sp)
200968c8:	00c001c4 	movi	r3,7
200968cc:	1901cf0e 	bge	r3,r4,2009700c <___vfiprintf_internal_r+0xd08>
200968d0:	1002361e 	bne	r2,zero,200971ac <___vfiprintf_internal_r+0xea8>
200968d4:	d8001b15 	stw	zero,108(sp)
200968d8:	aac0010c 	andi	r11,r21,4
200968dc:	58002826 	beq	r11,zero,20096980 <___vfiprintf_internal_r+0x67c>
200968e0:	9467c83a 	sub	r19,r18,r17
200968e4:	d811883a 	mov	r8,sp
200968e8:	04c3340e 	bge	zero,r19,200975bc <___vfiprintf_internal_r+0x12b8>
200968ec:	01c00404 	movi	r7,16
200968f0:	3cc31b0e 	bge	r7,r19,20097560 <___vfiprintf_internal_r+0x125c>
200968f4:	00c00034 	movhi	r3,0
200968f8:	18c20804 	addi	r3,r3,2080
200968fc:	d9001b17 	ldw	r4,108(sp)
20096900:	d8c02415 	stw	r3,144(sp)
20096904:	382b883a 	mov	r21,r7
20096908:	050001c4 	movi	r20,7
2009690c:	dd802017 	ldw	r22,128(sp)
20096910:	00000506 	br	20096928 <___vfiprintf_internal_r+0x624>
20096914:	21400084 	addi	r5,r4,2
20096918:	42000204 	addi	r8,r8,8
2009691c:	1809883a 	mov	r4,r3
20096920:	9cfffc04 	addi	r19,r19,-16
20096924:	acc00d0e 	bge	r21,r19,2009695c <___vfiprintf_internal_r+0x658>
20096928:	10800404 	addi	r2,r2,16
2009692c:	20c00044 	addi	r3,r4,1
20096930:	47000015 	stw	fp,0(r8)
20096934:	45400115 	stw	r21,4(r8)
20096938:	d8801c15 	stw	r2,112(sp)
2009693c:	d8c01b15 	stw	r3,108(sp)
20096940:	a0fff40e 	bge	r20,r3,20096914 <__flash_rwdata_start+0xffff7d40>
20096944:	10019f1e 	bne	r2,zero,20096fc4 <___vfiprintf_internal_r+0xcc0>
20096948:	9cfffc04 	addi	r19,r19,-16
2009694c:	01400044 	movi	r5,1
20096950:	0009883a 	mov	r4,zero
20096954:	d811883a 	mov	r8,sp
20096958:	acfff316 	blt	r21,r19,20096928 <__flash_rwdata_start+0xffff7d54>
2009695c:	d8c02417 	ldw	r3,144(sp)
20096960:	14c5883a 	add	r2,r2,r19
20096964:	44c00115 	stw	r19,4(r8)
20096968:	40c00015 	stw	r3,0(r8)
2009696c:	d8801c15 	stw	r2,112(sp)
20096970:	d9401b15 	stw	r5,108(sp)
20096974:	00c001c4 	movi	r3,7
20096978:	1941810e 	bge	r3,r5,20096f80 <___vfiprintf_internal_r+0xc7c>
2009697c:	10017a1e 	bne	r2,zero,20096f68 <___vfiprintf_internal_r+0xc64>
20096980:	8c82a416 	blt	r17,r18,20097414 <___vfiprintf_internal_r+0x1110>
20096984:	d9002317 	ldw	r4,140(sp)
20096988:	2449883a 	add	r4,r4,r17
2009698c:	d9002315 	stw	r4,140(sp)
20096990:	d8001b15 	stw	zero,108(sp)
20096994:	d811883a 	mov	r8,sp
20096998:	003e8e06 	br	200963d4 <__flash_rwdata_start+0xffff7800>
2009699c:	d9002017 	ldw	r4,128(sp)
200969a0:	a80b883a 	mov	r5,r21
200969a4:	00904e80 	call	200904e8 <__swsetup_r>
200969a8:	10000c1e 	bne	r2,zero,200969dc <___vfiprintf_internal_r+0x6d8>
200969ac:	a880030b 	ldhu	r2,12(r21)
200969b0:	00c00284 	movi	r3,10
200969b4:	1080068c 	andi	r2,r2,26
200969b8:	10fe741e 	bne	r2,r3,2009638c <__flash_rwdata_start+0xffff77b8>
200969bc:	a880038f 	ldh	r2,14(r21)
200969c0:	103e7216 	blt	r2,zero,2009638c <__flash_rwdata_start+0xffff77b8>
200969c4:	d9002017 	ldw	r4,128(sp)
200969c8:	d9c02217 	ldw	r7,136(sp)
200969cc:	a80b883a 	mov	r5,r21
200969d0:	b00d883a 	mov	r6,r22
200969d4:	00975f80 	call	200975f8 <__sbprintf>
200969d8:	00000106 	br	200969e0 <___vfiprintf_internal_r+0x6dc>
200969dc:	00bfffc4 	movi	r2,-1
200969e0:	dfc03517 	ldw	ra,212(sp)
200969e4:	df003417 	ldw	fp,208(sp)
200969e8:	ddc03317 	ldw	r23,204(sp)
200969ec:	dd803217 	ldw	r22,200(sp)
200969f0:	dd403117 	ldw	r21,196(sp)
200969f4:	dd003017 	ldw	r20,192(sp)
200969f8:	dcc02f17 	ldw	r19,188(sp)
200969fc:	dc802e17 	ldw	r18,184(sp)
20096a00:	dc402d17 	ldw	r17,180(sp)
20096a04:	dc002c17 	ldw	r16,176(sp)
20096a08:	dec03604 	addi	sp,sp,216
20096a0c:	f800283a 	ret
20096a10:	00926dc0 	call	200926dc <__sinit>
20096a14:	003e4d06 	br	2009634c <__flash_rwdata_start+0xffff7778>
20096a18:	8005883a 	mov	r2,r16
20096a1c:	ad400114 	ori	r21,r21,4
20096a20:	80c00007 	ldb	r3,0(r16)
20096a24:	003e9506 	br	2009647c <__flash_rwdata_start+0xffff78a8>
20096a28:	b006d0fa 	srli	r3,r22,3
20096a2c:	6808977a 	slli	r4,r13,29
20096a30:	681ad0fa 	srli	r13,r13,3
20096a34:	b58001cc 	andi	r22,r22,7
20096a38:	b0800c04 	addi	r2,r22,48
20096a3c:	a53fffc4 	addi	r20,r20,-1
20096a40:	20ecb03a 	or	r22,r4,r3
20096a44:	a0800005 	stb	r2,0(r20)
20096a48:	b346b03a 	or	r3,r22,r13
20096a4c:	183ff61e 	bne	r3,zero,20096a28 <__flash_rwdata_start+0xffff7e54>
20096a50:	a8c0004c 	andi	r3,r21,1
20096a54:	a009883a 	mov	r4,r20
20096a58:	18013b26 	beq	r3,zero,20096f48 <___vfiprintf_internal_r+0xc44>
20096a5c:	10803fcc 	andi	r2,r2,255
20096a60:	1080201c 	xori	r2,r2,128
20096a64:	10bfe004 	addi	r2,r2,-128
20096a68:	00c00c04 	movi	r3,48
20096a6c:	10ff1d26 	beq	r2,r3,200966e4 <__flash_rwdata_start+0xffff7b10>
20096a70:	d8801e17 	ldw	r2,120(sp)
20096a74:	a53fffc4 	addi	r20,r20,-1
20096a78:	20ffffc5 	stb	r3,-1(r4)
20096a7c:	1527c83a 	sub	r19,r2,r20
20096a80:	003f1a06 	br	200966ec <__flash_rwdata_start+0xffff7b18>
20096a84:	ad402014 	ori	r21,r21,128
20096a88:	8005883a 	mov	r2,r16
20096a8c:	80c00007 	ldb	r3,0(r16)
20096a90:	003e7a06 	br	2009647c <__flash_rwdata_start+0xffff78a8>
20096a94:	8005883a 	mov	r2,r16
20096a98:	0025883a 	mov	r18,zero
20096a9c:	193ff404 	addi	r4,r3,-48
20096aa0:	10c00007 	ldb	r3,0(r2)
20096aa4:	948002a4 	muli	r18,r18,10
20096aa8:	84000044 	addi	r16,r16,1
20096aac:	8005883a 	mov	r2,r16
20096ab0:	9125883a 	add	r18,r18,r4
20096ab4:	193ff404 	addi	r4,r3,-48
20096ab8:	313ff92e 	bgeu	r6,r4,20096aa0 <__flash_rwdata_start+0xffff7ecc>
20096abc:	003e7006 	br	20096480 <__flash_rwdata_start+0xffff78ac>
20096ac0:	ad400414 	ori	r21,r21,16
20096ac4:	d9c01d85 	stb	r7,118(sp)
20096ac8:	a880080c 	andi	r2,r21,32
20096acc:	d8c02217 	ldw	r3,136(sp)
20096ad0:	10005a26 	beq	r2,zero,20096c3c <___vfiprintf_internal_r+0x938>
20096ad4:	d9002217 	ldw	r4,136(sp)
20096ad8:	18800117 	ldw	r2,4(r3)
20096adc:	1d800017 	ldw	r22,0(r3)
20096ae0:	21000204 	addi	r4,r4,8
20096ae4:	d9002215 	stw	r4,136(sp)
20096ae8:	101b883a 	mov	r13,r2
20096aec:	1001f416 	blt	r2,zero,200972c0 <___vfiprintf_internal_r+0xfbc>
20096af0:	db801d83 	ldbu	r14,118(sp)
20096af4:	4827883a 	mov	r19,r9
20096af8:	00800044 	movi	r2,1
20096afc:	b348b03a 	or	r4,r22,r13
20096b00:	003ee106 	br	20096688 <__flash_rwdata_start+0xffff7ab4>
20096b04:	80c00007 	ldb	r3,0(r16)
20096b08:	80800044 	addi	r2,r16,1
20096b0c:	1b42a326 	beq	r3,r13,2009759c <___vfiprintf_internal_r+0x1298>
20096b10:	193ff404 	addi	r4,r3,-48
20096b14:	1021883a 	mov	r16,r2
20096b18:	0013883a 	mov	r9,zero
20096b1c:	313e5836 	bltu	r6,r4,20096480 <__flash_rwdata_start+0xffff78ac>
20096b20:	80c00007 	ldb	r3,0(r16)
20096b24:	4a4002a4 	muli	r9,r9,10
20096b28:	84000044 	addi	r16,r16,1
20096b2c:	2253883a 	add	r9,r4,r9
20096b30:	193ff404 	addi	r4,r3,-48
20096b34:	313ffa2e 	bgeu	r6,r4,20096b20 <__flash_rwdata_start+0xffff7f4c>
20096b38:	483e510e 	bge	r9,zero,20096480 <__flash_rwdata_start+0xffff78ac>
20096b3c:	027fffc4 	movi	r9,-1
20096b40:	003e4f06 	br	20096480 <__flash_rwdata_start+0xffff78ac>
20096b44:	d9c01d85 	stb	r7,118(sp)
20096b48:	a880080c 	andi	r2,r21,32
20096b4c:	10020826 	beq	r2,zero,20097370 <___vfiprintf_internal_r+0x106c>
20096b50:	d8c02217 	ldw	r3,136(sp)
20096b54:	d9002317 	ldw	r4,140(sp)
20096b58:	18800017 	ldw	r2,0(r3)
20096b5c:	2007d7fa 	srai	r3,r4,31
20096b60:	d9002217 	ldw	r4,136(sp)
20096b64:	10c00115 	stw	r3,4(r2)
20096b68:	21000104 	addi	r4,r4,4
20096b6c:	d9002215 	stw	r4,136(sp)
20096b70:	d9002317 	ldw	r4,140(sp)
20096b74:	11000015 	stw	r4,0(r2)
20096b78:	003e1606 	br	200963d4 <__flash_rwdata_start+0xffff7800>
20096b7c:	d8802217 	ldw	r2,136(sp)
20096b80:	d8c02217 	ldw	r3,136(sp)
20096b84:	15800017 	ldw	r22,0(r2)
20096b88:	13400117 	ldw	r13,4(r2)
20096b8c:	18c00204 	addi	r3,r3,8
20096b90:	0005883a 	mov	r2,zero
20096b94:	d8c02215 	stw	r3,136(sp)
20096b98:	b348b03a 	or	r4,r22,r13
20096b9c:	003eb706 	br	2009667c <__flash_rwdata_start+0xffff7aa8>
20096ba0:	38803fcc 	andi	r2,r7,255
20096ba4:	1080201c 	xori	r2,r2,128
20096ba8:	10bfe004 	addi	r2,r2,-128
20096bac:	1001e31e 	bne	r2,zero,2009733c <___vfiprintf_internal_r+0x1038>
20096bb0:	8005883a 	mov	r2,r16
20096bb4:	01c00804 	movi	r7,32
20096bb8:	80c00007 	ldb	r3,0(r16)
20096bbc:	003e2f06 	br	2009647c <__flash_rwdata_start+0xffff78a8>
20096bc0:	ad400054 	ori	r21,r21,1
20096bc4:	8005883a 	mov	r2,r16
20096bc8:	80c00007 	ldb	r3,0(r16)
20096bcc:	003e2b06 	br	2009647c <__flash_rwdata_start+0xffff78a8>
20096bd0:	d8c02217 	ldw	r3,136(sp)
20096bd4:	1c800017 	ldw	r18,0(r3)
20096bd8:	18c00104 	addi	r3,r3,4
20096bdc:	90023816 	blt	r18,zero,200974c0 <___vfiprintf_internal_r+0x11bc>
20096be0:	d8c02215 	stw	r3,136(sp)
20096be4:	8005883a 	mov	r2,r16
20096be8:	80c00007 	ldb	r3,0(r16)
20096bec:	003e2306 	br	2009647c <__flash_rwdata_start+0xffff78a8>
20096bf0:	8005883a 	mov	r2,r16
20096bf4:	01c00ac4 	movi	r7,43
20096bf8:	80c00007 	ldb	r3,0(r16)
20096bfc:	003e1f06 	br	2009647c <__flash_rwdata_start+0xffff78a8>
20096c00:	d8c02217 	ldw	r3,136(sp)
20096c04:	04400044 	movi	r17,1
20096c08:	d8001d85 	stb	zero,118(sp)
20096c0c:	18800017 	ldw	r2,0(r3)
20096c10:	18c00104 	addi	r3,r3,4
20096c14:	d8c02215 	stw	r3,136(sp)
20096c18:	d8801005 	stb	r2,64(sp)
20096c1c:	8827883a 	mov	r19,r17
20096c20:	dd001004 	addi	r20,sp,64
20096c24:	0013883a 	mov	r9,zero
20096c28:	003eb806 	br	2009670c <__flash_rwdata_start+0xffff7b38>
20096c2c:	d9c01d85 	stb	r7,118(sp)
20096c30:	a880080c 	andi	r2,r21,32
20096c34:	d8c02217 	ldw	r3,136(sp)
20096c38:	103fa61e 	bne	r2,zero,20096ad4 <__flash_rwdata_start+0xffff7f00>
20096c3c:	a880040c 	andi	r2,r21,16
20096c40:	1001dd26 	beq	r2,zero,200973b8 <___vfiprintf_internal_r+0x10b4>
20096c44:	1d800017 	ldw	r22,0(r3)
20096c48:	d8802217 	ldw	r2,136(sp)
20096c4c:	b01bd7fa 	srai	r13,r22,31
20096c50:	10800104 	addi	r2,r2,4
20096c54:	d8802215 	stw	r2,136(sp)
20096c58:	6805883a 	mov	r2,r13
20096c5c:	003fa306 	br	20096aec <__flash_rwdata_start+0xffff7f18>
20096c60:	00800034 	movhi	r2,0
20096c64:	10818f04 	addi	r2,r2,1596
20096c68:	d8802615 	stw	r2,152(sp)
20096c6c:	d9c01d85 	stb	r7,118(sp)
20096c70:	a880080c 	andi	r2,r21,32
20096c74:	10004726 	beq	r2,zero,20096d94 <___vfiprintf_internal_r+0xa90>
20096c78:	d9002217 	ldw	r4,136(sp)
20096c7c:	25800017 	ldw	r22,0(r4)
20096c80:	23400117 	ldw	r13,4(r4)
20096c84:	21000204 	addi	r4,r4,8
20096c88:	d9002215 	stw	r4,136(sp)
20096c8c:	a880004c 	andi	r2,r21,1
20096c90:	10014e26 	beq	r2,zero,200971cc <___vfiprintf_internal_r+0xec8>
20096c94:	b348b03a 	or	r4,r22,r13
20096c98:	20019c26 	beq	r4,zero,2009730c <___vfiprintf_internal_r+0x1008>
20096c9c:	00800c04 	movi	r2,48
20096ca0:	d8801d05 	stb	r2,116(sp)
20096ca4:	d8c01d45 	stb	r3,117(sp)
20096ca8:	ad400094 	ori	r21,r21,2
20096cac:	00800084 	movi	r2,2
20096cb0:	003e7206 	br	2009667c <__flash_rwdata_start+0xffff7aa8>
20096cb4:	d8c02217 	ldw	r3,136(sp)
20096cb8:	d8001d85 	stb	zero,118(sp)
20096cbc:	1d000017 	ldw	r20,0(r3)
20096cc0:	1d800104 	addi	r22,r3,4
20096cc4:	a0021c26 	beq	r20,zero,20097538 <___vfiprintf_internal_r+0x1234>
20096cc8:	a009883a 	mov	r4,r20
20096ccc:	48020016 	blt	r9,zero,200974d0 <___vfiprintf_internal_r+0x11cc>
20096cd0:	480d883a 	mov	r6,r9
20096cd4:	000b883a 	mov	r5,zero
20096cd8:	da002a15 	stw	r8,168(sp)
20096cdc:	da402b15 	stw	r9,172(sp)
20096ce0:	00934200 	call	20093420 <memchr>
20096ce4:	da002a17 	ldw	r8,168(sp)
20096ce8:	da402b17 	ldw	r9,172(sp)
20096cec:	10022226 	beq	r2,zero,20097578 <___vfiprintf_internal_r+0x1274>
20096cf0:	1527c83a 	sub	r19,r2,r20
20096cf4:	4cc1c916 	blt	r9,r19,2009741c <___vfiprintf_internal_r+0x1118>
20096cf8:	db801d83 	ldbu	r14,118(sp)
20096cfc:	dd802215 	stw	r22,136(sp)
20096d00:	0013883a 	mov	r9,zero
20096d04:	003e7906 	br	200966ec <__flash_rwdata_start+0xffff7b18>
20096d08:	ad401014 	ori	r21,r21,64
20096d0c:	8005883a 	mov	r2,r16
20096d10:	80c00007 	ldb	r3,0(r16)
20096d14:	003dd906 	br	2009647c <__flash_rwdata_start+0xffff78a8>
20096d18:	80c00007 	ldb	r3,0(r16)
20096d1c:	8005883a 	mov	r2,r16
20096d20:	1b01e326 	beq	r3,r12,200974b0 <___vfiprintf_internal_r+0x11ac>
20096d24:	ad400414 	ori	r21,r21,16
20096d28:	003dd406 	br	2009647c <__flash_rwdata_start+0xffff78a8>
20096d2c:	d9002217 	ldw	r4,136(sp)
20096d30:	00800c04 	movi	r2,48
20096d34:	d8801d05 	stb	r2,116(sp)
20096d38:	25800017 	ldw	r22,0(r4)
20096d3c:	00801e04 	movi	r2,120
20096d40:	d8801d45 	stb	r2,117(sp)
20096d44:	00800034 	movhi	r2,0
20096d48:	21000104 	addi	r4,r4,4
20096d4c:	10819404 	addi	r2,r2,1616
20096d50:	d9002215 	stw	r4,136(sp)
20096d54:	d8802615 	stw	r2,152(sp)
20096d58:	001b883a 	mov	r13,zero
20096d5c:	ad400094 	ori	r21,r21,2
20096d60:	00800084 	movi	r2,2
20096d64:	b009883a 	mov	r4,r22
20096d68:	003e4406 	br	2009667c <__flash_rwdata_start+0xffff7aa8>
20096d6c:	ad400814 	ori	r21,r21,32
20096d70:	8005883a 	mov	r2,r16
20096d74:	80c00007 	ldb	r3,0(r16)
20096d78:	003dc006 	br	2009647c <__flash_rwdata_start+0xffff78a8>
20096d7c:	00800034 	movhi	r2,0
20096d80:	10819404 	addi	r2,r2,1616
20096d84:	d8802615 	stw	r2,152(sp)
20096d88:	d9c01d85 	stb	r7,118(sp)
20096d8c:	a880080c 	andi	r2,r21,32
20096d90:	103fb91e 	bne	r2,zero,20096c78 <__flash_rwdata_start+0xffff80a4>
20096d94:	a880040c 	andi	r2,r21,16
20096d98:	10010f1e 	bne	r2,zero,200971d8 <___vfiprintf_internal_r+0xed4>
20096d9c:	a880100c 	andi	r2,r21,64
20096da0:	10010d26 	beq	r2,zero,200971d8 <___vfiprintf_internal_r+0xed4>
20096da4:	d9002217 	ldw	r4,136(sp)
20096da8:	001b883a 	mov	r13,zero
20096dac:	2580000b 	ldhu	r22,0(r4)
20096db0:	21000104 	addi	r4,r4,4
20096db4:	d9002215 	stw	r4,136(sp)
20096db8:	003fb406 	br	20096c8c <__flash_rwdata_start+0xffff80b8>
20096dbc:	d9002217 	ldw	r4,136(sp)
20096dc0:	00800044 	movi	r2,1
20096dc4:	25800017 	ldw	r22,0(r4)
20096dc8:	23400117 	ldw	r13,4(r4)
20096dcc:	21000204 	addi	r4,r4,8
20096dd0:	d9002215 	stw	r4,136(sp)
20096dd4:	b348b03a 	or	r4,r22,r13
20096dd8:	003e2806 	br	2009667c <__flash_rwdata_start+0xffff7aa8>
20096ddc:	d9c01d85 	stb	r7,118(sp)
20096de0:	1801ab26 	beq	r3,zero,20097490 <___vfiprintf_internal_r+0x118c>
20096de4:	04400044 	movi	r17,1
20096de8:	d8c01005 	stb	r3,64(sp)
20096dec:	d8001d85 	stb	zero,118(sp)
20096df0:	8827883a 	mov	r19,r17
20096df4:	dd001004 	addi	r20,sp,64
20096df8:	003f8a06 	br	20096c24 <__flash_rwdata_start+0xffff8050>
20096dfc:	d9002017 	ldw	r4,128(sp)
20096e00:	d9402117 	ldw	r5,132(sp)
20096e04:	d9801a04 	addi	r6,sp,104
20096e08:	d9c02b15 	stw	r7,172(sp)
20096e0c:	dbc02a15 	stw	r15,168(sp)
20096e10:	00961f00 	call	200961f0 <__sprint_r.part.0>
20096e14:	d9c02b17 	ldw	r7,172(sp)
20096e18:	dbc02a17 	ldw	r15,168(sp)
20096e1c:	1000631e 	bne	r2,zero,20096fac <___vfiprintf_internal_r+0xca8>
20096e20:	d9801b17 	ldw	r6,108(sp)
20096e24:	d8801c17 	ldw	r2,112(sp)
20096e28:	d811883a 	mov	r8,sp
20096e2c:	31400044 	addi	r5,r6,1
20096e30:	003e4d06 	br	20096768 <__flash_rwdata_start+0xffff7b94>
20096e34:	d9401b17 	ldw	r5,108(sp)
20096e38:	d8801c17 	ldw	r2,112(sp)
20096e3c:	29000044 	addi	r4,r5,1
20096e40:	d8c01d87 	ldb	r3,118(sp)
20096e44:	183e6726 	beq	r3,zero,200967e4 <__flash_rwdata_start+0xffff7c10>
20096e48:	00c00044 	movi	r3,1
20096e4c:	d9401d84 	addi	r5,sp,118
20096e50:	10c5883a 	add	r2,r2,r3
20096e54:	41400015 	stw	r5,0(r8)
20096e58:	40c00115 	stw	r3,4(r8)
20096e5c:	d8801c15 	stw	r2,112(sp)
20096e60:	d9001b15 	stw	r4,108(sp)
20096e64:	014001c4 	movi	r5,7
20096e68:	2900ab16 	blt	r5,r4,20097118 <___vfiprintf_internal_r+0xe14>
20096e6c:	200b883a 	mov	r5,r4
20096e70:	42000204 	addi	r8,r8,8
20096e74:	21000044 	addi	r4,r4,1
20096e78:	003e5a06 	br	200967e4 <__flash_rwdata_start+0xffff7c10>
20096e7c:	d9002017 	ldw	r4,128(sp)
20096e80:	d9402117 	ldw	r5,132(sp)
20096e84:	d9801a04 	addi	r6,sp,104
20096e88:	d9c02b15 	stw	r7,172(sp)
20096e8c:	db402a15 	stw	r13,168(sp)
20096e90:	00961f00 	call	200961f0 <__sprint_r.part.0>
20096e94:	d9c02b17 	ldw	r7,172(sp)
20096e98:	db402a17 	ldw	r13,168(sp)
20096e9c:	1000431e 	bne	r2,zero,20096fac <___vfiprintf_internal_r+0xca8>
20096ea0:	d9401b17 	ldw	r5,108(sp)
20096ea4:	d8801c17 	ldw	r2,112(sp)
20096ea8:	d811883a 	mov	r8,sp
20096eac:	29000044 	addi	r4,r5,1
20096eb0:	003e6706 	br	20096850 <__flash_rwdata_start+0xffff7c7c>
20096eb4:	10803fcc 	andi	r2,r2,255
20096eb8:	00c00044 	movi	r3,1
20096ebc:	10fdfa1e 	bne	r2,r3,200966a8 <__flash_rwdata_start+0xffff7ad4>
20096ec0:	6800021e 	bne	r13,zero,20096ecc <___vfiprintf_internal_r+0xbc8>
20096ec4:	00800244 	movi	r2,9
20096ec8:	1580222e 	bgeu	r2,r22,20096f54 <___vfiprintf_internal_r+0xc50>
20096ecc:	dc802415 	stw	r18,144(sp)
20096ed0:	dc002515 	stw	r16,148(sp)
20096ed4:	dc401a04 	addi	r17,sp,104
20096ed8:	b021883a 	mov	r16,r22
20096edc:	4827883a 	mov	r19,r9
20096ee0:	4029883a 	mov	r20,r8
20096ee4:	702d883a 	mov	r22,r14
20096ee8:	6825883a 	mov	r18,r13
20096eec:	8009883a 	mov	r4,r16
20096ef0:	900b883a 	mov	r5,r18
20096ef4:	01800284 	movi	r6,10
20096ef8:	000f883a 	mov	r7,zero
20096efc:	009856c0 	call	2009856c <__umoddi3>
20096f00:	10800c04 	addi	r2,r2,48
20096f04:	8c7fffc4 	addi	r17,r17,-1
20096f08:	8009883a 	mov	r4,r16
20096f0c:	900b883a 	mov	r5,r18
20096f10:	01800284 	movi	r6,10
20096f14:	000f883a 	mov	r7,zero
20096f18:	88800005 	stb	r2,0(r17)
20096f1c:	0097fac0 	call	20097fac <__udivdi3>
20096f20:	1021883a 	mov	r16,r2
20096f24:	10c4b03a 	or	r2,r2,r3
20096f28:	1825883a 	mov	r18,r3
20096f2c:	103fef1e 	bne	r2,zero,20096eec <__flash_rwdata_start+0xffff8318>
20096f30:	dc802417 	ldw	r18,144(sp)
20096f34:	dc002517 	ldw	r16,148(sp)
20096f38:	a011883a 	mov	r8,r20
20096f3c:	9813883a 	mov	r9,r19
20096f40:	b01d883a 	mov	r14,r22
20096f44:	8829883a 	mov	r20,r17
20096f48:	d8c01e17 	ldw	r3,120(sp)
20096f4c:	1d27c83a 	sub	r19,r3,r20
20096f50:	003de606 	br	200966ec <__flash_rwdata_start+0xffff7b18>
20096f54:	b5800c04 	addi	r22,r22,48
20096f58:	dd8019c5 	stb	r22,103(sp)
20096f5c:	dcc02717 	ldw	r19,156(sp)
20096f60:	dd0019c4 	addi	r20,sp,103
20096f64:	003de106 	br	200966ec <__flash_rwdata_start+0xffff7b18>
20096f68:	d9002017 	ldw	r4,128(sp)
20096f6c:	d9402117 	ldw	r5,132(sp)
20096f70:	d9801a04 	addi	r6,sp,104
20096f74:	00961f00 	call	200961f0 <__sprint_r.part.0>
20096f78:	10000c1e 	bne	r2,zero,20096fac <___vfiprintf_internal_r+0xca8>
20096f7c:	d8801c17 	ldw	r2,112(sp)
20096f80:	8c80010e 	bge	r17,r18,20096f88 <___vfiprintf_internal_r+0xc84>
20096f84:	9023883a 	mov	r17,r18
20096f88:	d8c02317 	ldw	r3,140(sp)
20096f8c:	1c47883a 	add	r3,r3,r17
20096f90:	d8c02315 	stw	r3,140(sp)
20096f94:	103e7e26 	beq	r2,zero,20096990 <__flash_rwdata_start+0xffff7dbc>
20096f98:	d9002017 	ldw	r4,128(sp)
20096f9c:	d9402117 	ldw	r5,132(sp)
20096fa0:	d9801a04 	addi	r6,sp,104
20096fa4:	00961f00 	call	200961f0 <__sprint_r.part.0>
20096fa8:	103e7926 	beq	r2,zero,20096990 <__flash_rwdata_start+0xffff7dbc>
20096fac:	dd402117 	ldw	r21,132(sp)
20096fb0:	a880030b 	ldhu	r2,12(r21)
20096fb4:	1080100c 	andi	r2,r2,64
20096fb8:	103e881e 	bne	r2,zero,200969dc <__flash_rwdata_start+0xffff7e08>
20096fbc:	d8802317 	ldw	r2,140(sp)
20096fc0:	003e8706 	br	200969e0 <__flash_rwdata_start+0xffff7e0c>
20096fc4:	d9402117 	ldw	r5,132(sp)
20096fc8:	b009883a 	mov	r4,r22
20096fcc:	d9801a04 	addi	r6,sp,104
20096fd0:	00961f00 	call	200961f0 <__sprint_r.part.0>
20096fd4:	103ff51e 	bne	r2,zero,20096fac <__flash_rwdata_start+0xffff83d8>
20096fd8:	d9001b17 	ldw	r4,108(sp)
20096fdc:	d8801c17 	ldw	r2,112(sp)
20096fe0:	d811883a 	mov	r8,sp
20096fe4:	21400044 	addi	r5,r4,1
20096fe8:	003e4d06 	br	20096920 <__flash_rwdata_start+0xffff7d4c>
20096fec:	1000aa1e 	bne	r2,zero,20097298 <___vfiprintf_internal_r+0xf94>
20096ff0:	00c00044 	movi	r3,1
20096ff4:	9805883a 	mov	r2,r19
20096ff8:	dd000015 	stw	r20,0(sp)
20096ffc:	dcc00115 	stw	r19,4(sp)
20097000:	dcc01c15 	stw	r19,112(sp)
20097004:	d8c01b15 	stw	r3,108(sp)
20097008:	d811883a 	mov	r8,sp
2009700c:	42000204 	addi	r8,r8,8
20097010:	aac0010c 	andi	r11,r21,4
20097014:	583fda26 	beq	r11,zero,20096f80 <__flash_rwdata_start+0xffff83ac>
20097018:	9467c83a 	sub	r19,r18,r17
2009701c:	04fe3316 	blt	zero,r19,200968ec <__flash_rwdata_start+0xffff7d18>
20097020:	003fd706 	br	20096f80 <__flash_rwdata_start+0xffff83ac>
20097024:	946dc83a 	sub	r22,r18,r17
20097028:	05bdfd0e 	bge	zero,r22,20096820 <__flash_rwdata_start+0xffff7c4c>
2009702c:	00c00034 	movhi	r3,0
20097030:	18c20404 	addi	r3,r3,2064
20097034:	01c00404 	movi	r7,16
20097038:	d8c02415 	stw	r3,144(sp)
2009703c:	3d81530e 	bge	r7,r22,2009758c <___vfiprintf_internal_r+0x1288>
20097040:	8007883a 	mov	r3,r16
20097044:	034001c4 	movi	r13,7
20097048:	b021883a 	mov	r16,r22
2009704c:	da402515 	stw	r9,148(sp)
20097050:	182d883a 	mov	r22,r3
20097054:	00000506 	br	2009706c <___vfiprintf_internal_r+0xd68>
20097058:	29800084 	addi	r6,r5,2
2009705c:	42000204 	addi	r8,r8,8
20097060:	180b883a 	mov	r5,r3
20097064:	843ffc04 	addi	r16,r16,-16
20097068:	3c000d0e 	bge	r7,r16,200970a0 <___vfiprintf_internal_r+0xd9c>
2009706c:	10800404 	addi	r2,r2,16
20097070:	28c00044 	addi	r3,r5,1
20097074:	45c00015 	stw	r23,0(r8)
20097078:	41c00115 	stw	r7,4(r8)
2009707c:	d8801c15 	stw	r2,112(sp)
20097080:	d8c01b15 	stw	r3,108(sp)
20097084:	68fff40e 	bge	r13,r3,20097058 <__flash_rwdata_start+0xffff8484>
20097088:	1000151e 	bne	r2,zero,200970e0 <___vfiprintf_internal_r+0xddc>
2009708c:	843ffc04 	addi	r16,r16,-16
20097090:	01800044 	movi	r6,1
20097094:	000b883a 	mov	r5,zero
20097098:	d811883a 	mov	r8,sp
2009709c:	3c3ff316 	blt	r7,r16,2009706c <__flash_rwdata_start+0xffff8498>
200970a0:	da402517 	ldw	r9,148(sp)
200970a4:	b007883a 	mov	r3,r22
200970a8:	802d883a 	mov	r22,r16
200970ac:	1821883a 	mov	r16,r3
200970b0:	d8c02417 	ldw	r3,144(sp)
200970b4:	1585883a 	add	r2,r2,r22
200970b8:	45800115 	stw	r22,4(r8)
200970bc:	40c00015 	stw	r3,0(r8)
200970c0:	d8801c15 	stw	r2,112(sp)
200970c4:	d9801b15 	stw	r6,108(sp)
200970c8:	00c001c4 	movi	r3,7
200970cc:	19806d16 	blt	r3,r6,20097284 <___vfiprintf_internal_r+0xf80>
200970d0:	42000204 	addi	r8,r8,8
200970d4:	31000044 	addi	r4,r6,1
200970d8:	300b883a 	mov	r5,r6
200970dc:	003dd006 	br	20096820 <__flash_rwdata_start+0xffff7c4c>
200970e0:	d9002017 	ldw	r4,128(sp)
200970e4:	d9402117 	ldw	r5,132(sp)
200970e8:	d9801a04 	addi	r6,sp,104
200970ec:	d9c02b15 	stw	r7,172(sp)
200970f0:	db402a15 	stw	r13,168(sp)
200970f4:	00961f00 	call	200961f0 <__sprint_r.part.0>
200970f8:	d9c02b17 	ldw	r7,172(sp)
200970fc:	db402a17 	ldw	r13,168(sp)
20097100:	103faa1e 	bne	r2,zero,20096fac <__flash_rwdata_start+0xffff83d8>
20097104:	d9401b17 	ldw	r5,108(sp)
20097108:	d8801c17 	ldw	r2,112(sp)
2009710c:	d811883a 	mov	r8,sp
20097110:	29800044 	addi	r6,r5,1
20097114:	003fd306 	br	20097064 <__flash_rwdata_start+0xffff8490>
20097118:	1000401e 	bne	r2,zero,2009721c <___vfiprintf_internal_r+0xf18>
2009711c:	68003b26 	beq	r13,zero,2009720c <___vfiprintf_internal_r+0xf08>
20097120:	d9001d04 	addi	r4,sp,116
20097124:	00800084 	movi	r2,2
20097128:	d9000015 	stw	r4,0(sp)
2009712c:	d8800115 	stw	r2,4(sp)
20097130:	1809883a 	mov	r4,r3
20097134:	d811883a 	mov	r8,sp
20097138:	003db406 	br	2009680c <__flash_rwdata_start+0xffff7c38>
2009713c:	1000451e 	bne	r2,zero,20097254 <___vfiprintf_internal_r+0xf50>
20097140:	01000044 	movi	r4,1
20097144:	000b883a 	mov	r5,zero
20097148:	d811883a 	mov	r8,sp
2009714c:	003db206 	br	20096818 <__flash_rwdata_start+0xffff7c44>
20097150:	10803fcc 	andi	r2,r2,255
20097154:	1000071e 	bne	r2,zero,20097174 <___vfiprintf_internal_r+0xe70>
20097158:	a880004c 	andi	r2,r21,1
2009715c:	10000526 	beq	r2,zero,20097174 <___vfiprintf_internal_r+0xe70>
20097160:	00800c04 	movi	r2,48
20097164:	d88019c5 	stb	r2,103(sp)
20097168:	dcc02717 	ldw	r19,156(sp)
2009716c:	dd0019c4 	addi	r20,sp,103
20097170:	003d5e06 	br	200966ec <__flash_rwdata_start+0xffff7b18>
20097174:	dd001a04 	addi	r20,sp,104
20097178:	003d5c06 	br	200966ec <__flash_rwdata_start+0xffff7b18>
2009717c:	1000971e 	bne	r2,zero,200973dc <___vfiprintf_internal_r+0x10d8>
20097180:	d8c01d87 	ldb	r3,118(sp)
20097184:	18005826 	beq	r3,zero,200972e8 <___vfiprintf_internal_r+0xfe4>
20097188:	00800044 	movi	r2,1
2009718c:	d8c01d84 	addi	r3,sp,118
20097190:	1009883a 	mov	r4,r2
20097194:	d8c00015 	stw	r3,0(sp)
20097198:	d8800115 	stw	r2,4(sp)
2009719c:	d811883a 	mov	r8,sp
200971a0:	003f3206 	br	20096e6c <__flash_rwdata_start+0xffff8298>
200971a4:	8023883a 	mov	r17,r16
200971a8:	003ca706 	br	20096448 <__flash_rwdata_start+0xffff7874>
200971ac:	d9002017 	ldw	r4,128(sp)
200971b0:	d9402117 	ldw	r5,132(sp)
200971b4:	d9801a04 	addi	r6,sp,104
200971b8:	00961f00 	call	200961f0 <__sprint_r.part.0>
200971bc:	103f7b1e 	bne	r2,zero,20096fac <__flash_rwdata_start+0xffff83d8>
200971c0:	d8801c17 	ldw	r2,112(sp)
200971c4:	d811883a 	mov	r8,sp
200971c8:	003f9106 	br	20097010 <__flash_rwdata_start+0xffff843c>
200971cc:	00800084 	movi	r2,2
200971d0:	b348b03a 	or	r4,r22,r13
200971d4:	003d2906 	br	2009667c <__flash_rwdata_start+0xffff7aa8>
200971d8:	d8802217 	ldw	r2,136(sp)
200971dc:	001b883a 	mov	r13,zero
200971e0:	15800017 	ldw	r22,0(r2)
200971e4:	10800104 	addi	r2,r2,4
200971e8:	d8802215 	stw	r2,136(sp)
200971ec:	003ea706 	br	20096c8c <__flash_rwdata_start+0xffff80b8>
200971f0:	d9002017 	ldw	r4,128(sp)
200971f4:	d9402117 	ldw	r5,132(sp)
200971f8:	d9801a04 	addi	r6,sp,104
200971fc:	00961f00 	call	200961f0 <__sprint_r.part.0>
20097200:	103f6a1e 	bne	r2,zero,20096fac <__flash_rwdata_start+0xffff83d8>
20097204:	d811883a 	mov	r8,sp
20097208:	003cff06 	br	20096608 <__flash_rwdata_start+0xffff7a34>
2009720c:	000b883a 	mov	r5,zero
20097210:	1809883a 	mov	r4,r3
20097214:	d811883a 	mov	r8,sp
20097218:	003d7f06 	br	20096818 <__flash_rwdata_start+0xffff7c44>
2009721c:	d9002017 	ldw	r4,128(sp)
20097220:	d9402117 	ldw	r5,132(sp)
20097224:	d9801a04 	addi	r6,sp,104
20097228:	da402b15 	stw	r9,172(sp)
2009722c:	db402a15 	stw	r13,168(sp)
20097230:	00961f00 	call	200961f0 <__sprint_r.part.0>
20097234:	da402b17 	ldw	r9,172(sp)
20097238:	db402a17 	ldw	r13,168(sp)
2009723c:	103f5b1e 	bne	r2,zero,20096fac <__flash_rwdata_start+0xffff83d8>
20097240:	d9401b17 	ldw	r5,108(sp)
20097244:	d8801c17 	ldw	r2,112(sp)
20097248:	d811883a 	mov	r8,sp
2009724c:	29000044 	addi	r4,r5,1
20097250:	003d6406 	br	200967e4 <__flash_rwdata_start+0xffff7c10>
20097254:	d9002017 	ldw	r4,128(sp)
20097258:	d9402117 	ldw	r5,132(sp)
2009725c:	d9801a04 	addi	r6,sp,104
20097260:	da402b15 	stw	r9,172(sp)
20097264:	00961f00 	call	200961f0 <__sprint_r.part.0>
20097268:	da402b17 	ldw	r9,172(sp)
2009726c:	103f4f1e 	bne	r2,zero,20096fac <__flash_rwdata_start+0xffff83d8>
20097270:	d9401b17 	ldw	r5,108(sp)
20097274:	d8801c17 	ldw	r2,112(sp)
20097278:	d811883a 	mov	r8,sp
2009727c:	29000044 	addi	r4,r5,1
20097280:	003d6506 	br	20096818 <__flash_rwdata_start+0xffff7c44>
20097284:	10009a1e 	bne	r2,zero,200974f0 <___vfiprintf_internal_r+0x11ec>
20097288:	01000044 	movi	r4,1
2009728c:	000b883a 	mov	r5,zero
20097290:	d811883a 	mov	r8,sp
20097294:	003d6206 	br	20096820 <__flash_rwdata_start+0xffff7c4c>
20097298:	d9002017 	ldw	r4,128(sp)
2009729c:	d9402117 	ldw	r5,132(sp)
200972a0:	d9801a04 	addi	r6,sp,104
200972a4:	00961f00 	call	200961f0 <__sprint_r.part.0>
200972a8:	103f401e 	bne	r2,zero,20096fac <__flash_rwdata_start+0xffff83d8>
200972ac:	d9001b17 	ldw	r4,108(sp)
200972b0:	d8801c17 	ldw	r2,112(sp)
200972b4:	d811883a 	mov	r8,sp
200972b8:	21000044 	addi	r4,r4,1
200972bc:	003d7d06 	br	200968b4 <__flash_rwdata_start+0xffff7ce0>
200972c0:	05adc83a 	sub	r22,zero,r22
200972c4:	b004c03a 	cmpne	r2,r22,zero
200972c8:	035bc83a 	sub	r13,zero,r13
200972cc:	689bc83a 	sub	r13,r13,r2
200972d0:	03800b44 	movi	r14,45
200972d4:	db801d85 	stb	r14,118(sp)
200972d8:	4827883a 	mov	r19,r9
200972dc:	00800044 	movi	r2,1
200972e0:	b348b03a 	or	r4,r22,r13
200972e4:	003ce806 	br	20096688 <__flash_rwdata_start+0xffff7ab4>
200972e8:	000b883a 	mov	r5,zero
200972ec:	01000044 	movi	r4,1
200972f0:	d811883a 	mov	r8,sp
200972f4:	683d4826 	beq	r13,zero,20096818 <__flash_rwdata_start+0xffff7c44>
200972f8:	00800084 	movi	r2,2
200972fc:	d8c01d04 	addi	r3,sp,116
20097300:	d8c00015 	stw	r3,0(sp)
20097304:	d8800115 	stw	r2,4(sp)
20097308:	003d4006 	br	2009680c <__flash_rwdata_start+0xffff7c38>
2009730c:	00800084 	movi	r2,2
20097310:	003cda06 	br	2009667c <__flash_rwdata_start+0xffff7aa8>
20097314:	a880100c 	andi	r2,r21,64
20097318:	10004226 	beq	r2,zero,20097424 <___vfiprintf_internal_r+0x1120>
2009731c:	d8802217 	ldw	r2,136(sp)
20097320:	001b883a 	mov	r13,zero
20097324:	1580000b 	ldhu	r22,0(r2)
20097328:	10800104 	addi	r2,r2,4
2009732c:	d8802215 	stw	r2,136(sp)
20097330:	b009883a 	mov	r4,r22
20097334:	0005883a 	mov	r2,zero
20097338:	003cd006 	br	2009667c <__flash_rwdata_start+0xffff7aa8>
2009733c:	80c00007 	ldb	r3,0(r16)
20097340:	8005883a 	mov	r2,r16
20097344:	003c4d06 	br	2009647c <__flash_rwdata_start+0xffff78a8>
20097348:	a880100c 	andi	r2,r21,64
2009734c:	10004426 	beq	r2,zero,20097460 <___vfiprintf_internal_r+0x115c>
20097350:	d8c02217 	ldw	r3,136(sp)
20097354:	001b883a 	mov	r13,zero
20097358:	00800044 	movi	r2,1
2009735c:	1d80000b 	ldhu	r22,0(r3)
20097360:	18c00104 	addi	r3,r3,4
20097364:	d8c02215 	stw	r3,136(sp)
20097368:	b009883a 	mov	r4,r22
2009736c:	003cc306 	br	2009667c <__flash_rwdata_start+0xffff7aa8>
20097370:	a880040c 	andi	r2,r21,16
20097374:	1000091e 	bne	r2,zero,2009739c <___vfiprintf_internal_r+0x1098>
20097378:	aac0100c 	andi	r11,r21,64
2009737c:	58000726 	beq	r11,zero,2009739c <___vfiprintf_internal_r+0x1098>
20097380:	d8c02217 	ldw	r3,136(sp)
20097384:	d9002317 	ldw	r4,140(sp)
20097388:	18800017 	ldw	r2,0(r3)
2009738c:	18c00104 	addi	r3,r3,4
20097390:	d8c02215 	stw	r3,136(sp)
20097394:	1100000d 	sth	r4,0(r2)
20097398:	003c0e06 	br	200963d4 <__flash_rwdata_start+0xffff7800>
2009739c:	d8c02217 	ldw	r3,136(sp)
200973a0:	d9002317 	ldw	r4,140(sp)
200973a4:	18800017 	ldw	r2,0(r3)
200973a8:	18c00104 	addi	r3,r3,4
200973ac:	d8c02215 	stw	r3,136(sp)
200973b0:	11000015 	stw	r4,0(r2)
200973b4:	003c0706 	br	200963d4 <__flash_rwdata_start+0xffff7800>
200973b8:	a880100c 	andi	r2,r21,64
200973bc:	10002126 	beq	r2,zero,20097444 <___vfiprintf_internal_r+0x1140>
200973c0:	1d80000f 	ldh	r22,0(r3)
200973c4:	d8c02217 	ldw	r3,136(sp)
200973c8:	b01bd7fa 	srai	r13,r22,31
200973cc:	18c00104 	addi	r3,r3,4
200973d0:	d8c02215 	stw	r3,136(sp)
200973d4:	6805883a 	mov	r2,r13
200973d8:	003dc406 	br	20096aec <__flash_rwdata_start+0xffff7f18>
200973dc:	d9002017 	ldw	r4,128(sp)
200973e0:	d9402117 	ldw	r5,132(sp)
200973e4:	d9801a04 	addi	r6,sp,104
200973e8:	da402b15 	stw	r9,172(sp)
200973ec:	db402a15 	stw	r13,168(sp)
200973f0:	00961f00 	call	200961f0 <__sprint_r.part.0>
200973f4:	da402b17 	ldw	r9,172(sp)
200973f8:	db402a17 	ldw	r13,168(sp)
200973fc:	103eeb1e 	bne	r2,zero,20096fac <__flash_rwdata_start+0xffff83d8>
20097400:	d9401b17 	ldw	r5,108(sp)
20097404:	d8801c17 	ldw	r2,112(sp)
20097408:	d811883a 	mov	r8,sp
2009740c:	29000044 	addi	r4,r5,1
20097410:	003e8b06 	br	20096e40 <__flash_rwdata_start+0xffff826c>
20097414:	9023883a 	mov	r17,r18
20097418:	003d5a06 	br	20096984 <__flash_rwdata_start+0xffff7db0>
2009741c:	4827883a 	mov	r19,r9
20097420:	003e3506 	br	20096cf8 <__flash_rwdata_start+0xffff8124>
20097424:	d8c02217 	ldw	r3,136(sp)
20097428:	001b883a 	mov	r13,zero
2009742c:	0005883a 	mov	r2,zero
20097430:	1d800017 	ldw	r22,0(r3)
20097434:	18c00104 	addi	r3,r3,4
20097438:	d8c02215 	stw	r3,136(sp)
2009743c:	b009883a 	mov	r4,r22
20097440:	003c8e06 	br	2009667c <__flash_rwdata_start+0xffff7aa8>
20097444:	1d800017 	ldw	r22,0(r3)
20097448:	d9002217 	ldw	r4,136(sp)
2009744c:	b01bd7fa 	srai	r13,r22,31
20097450:	21000104 	addi	r4,r4,4
20097454:	d9002215 	stw	r4,136(sp)
20097458:	6805883a 	mov	r2,r13
2009745c:	003da306 	br	20096aec <__flash_rwdata_start+0xffff7f18>
20097460:	d9002217 	ldw	r4,136(sp)
20097464:	001b883a 	mov	r13,zero
20097468:	00800044 	movi	r2,1
2009746c:	25800017 	ldw	r22,0(r4)
20097470:	21000104 	addi	r4,r4,4
20097474:	d9002215 	stw	r4,136(sp)
20097478:	b009883a 	mov	r4,r22
2009747c:	003c7f06 	br	2009667c <__flash_rwdata_start+0xffff7aa8>
20097480:	00c00034 	movhi	r3,0
20097484:	18c20404 	addi	r3,r3,2064
20097488:	d8c02415 	stw	r3,144(sp)
2009748c:	003cff06 	br	2009688c <__flash_rwdata_start+0xffff7cb8>
20097490:	d8801c17 	ldw	r2,112(sp)
20097494:	dd402117 	ldw	r21,132(sp)
20097498:	103ec526 	beq	r2,zero,20096fb0 <__flash_rwdata_start+0xffff83dc>
2009749c:	d9002017 	ldw	r4,128(sp)
200974a0:	a80b883a 	mov	r5,r21
200974a4:	d9801a04 	addi	r6,sp,104
200974a8:	00961f00 	call	200961f0 <__sprint_r.part.0>
200974ac:	003ec006 	br	20096fb0 <__flash_rwdata_start+0xffff83dc>
200974b0:	80800044 	addi	r2,r16,1
200974b4:	ad400814 	ori	r21,r21,32
200974b8:	80c00047 	ldb	r3,1(r16)
200974bc:	003bef06 	br	2009647c <__flash_rwdata_start+0xffff78a8>
200974c0:	04a5c83a 	sub	r18,zero,r18
200974c4:	8005883a 	mov	r2,r16
200974c8:	d8c02215 	stw	r3,136(sp)
200974cc:	003d5306 	br	20096a1c <__flash_rwdata_start+0xffff7e48>
200974d0:	da002a15 	stw	r8,168(sp)
200974d4:	008c2f80 	call	2008c2f8 <strlen>
200974d8:	1027883a 	mov	r19,r2
200974dc:	db801d83 	ldbu	r14,118(sp)
200974e0:	dd802215 	stw	r22,136(sp)
200974e4:	0013883a 	mov	r9,zero
200974e8:	da002a17 	ldw	r8,168(sp)
200974ec:	003c7f06 	br	200966ec <__flash_rwdata_start+0xffff7b18>
200974f0:	d9002017 	ldw	r4,128(sp)
200974f4:	d9402117 	ldw	r5,132(sp)
200974f8:	d9801a04 	addi	r6,sp,104
200974fc:	da402b15 	stw	r9,172(sp)
20097500:	00961f00 	call	200961f0 <__sprint_r.part.0>
20097504:	da402b17 	ldw	r9,172(sp)
20097508:	103ea81e 	bne	r2,zero,20096fac <__flash_rwdata_start+0xffff83d8>
2009750c:	d9401b17 	ldw	r5,108(sp)
20097510:	d8801c17 	ldw	r2,112(sp)
20097514:	d811883a 	mov	r8,sp
20097518:	29000044 	addi	r4,r5,1
2009751c:	003cc006 	br	20096820 <__flash_rwdata_start+0xffff7c4c>
20097520:	d9401b17 	ldw	r5,108(sp)
20097524:	01000034 	movhi	r4,0
20097528:	21020804 	addi	r4,r4,2080
2009752c:	d9002415 	stw	r4,144(sp)
20097530:	29400044 	addi	r5,r5,1
20097534:	003c9f06 	br	200967b4 <__flash_rwdata_start+0xffff7be0>
20097538:	00800184 	movi	r2,6
2009753c:	1240012e 	bgeu	r2,r9,20097544 <___vfiprintf_internal_r+0x1240>
20097540:	1013883a 	mov	r9,r2
20097544:	4827883a 	mov	r19,r9
20097548:	4823883a 	mov	r17,r9
2009754c:	48001116 	blt	r9,zero,20097594 <___vfiprintf_internal_r+0x1290>
20097550:	05000034 	movhi	r20,0
20097554:	dd802215 	stw	r22,136(sp)
20097558:	a5019904 	addi	r20,r20,1636
2009755c:	003db106 	br	20096c24 <__flash_rwdata_start+0xffff8050>
20097560:	d9401b17 	ldw	r5,108(sp)
20097564:	01000034 	movhi	r4,0
20097568:	21020804 	addi	r4,r4,2080
2009756c:	d9002415 	stw	r4,144(sp)
20097570:	29400044 	addi	r5,r5,1
20097574:	003cf906 	br	2009695c <__flash_rwdata_start+0xffff7d88>
20097578:	4827883a 	mov	r19,r9
2009757c:	db801d83 	ldbu	r14,118(sp)
20097580:	dd802215 	stw	r22,136(sp)
20097584:	0013883a 	mov	r9,zero
20097588:	003c5806 	br	200966ec <__flash_rwdata_start+0xffff7b18>
2009758c:	200d883a 	mov	r6,r4
20097590:	003ec706 	br	200970b0 <__flash_rwdata_start+0xffff84dc>
20097594:	0023883a 	mov	r17,zero
20097598:	003fed06 	br	20097550 <__flash_rwdata_start+0xffff897c>
2009759c:	d9002217 	ldw	r4,136(sp)
200975a0:	22400017 	ldw	r9,0(r4)
200975a4:	20c00104 	addi	r3,r4,4
200975a8:	d8c02215 	stw	r3,136(sp)
200975ac:	483fc20e 	bge	r9,zero,200974b8 <__flash_rwdata_start+0xffff88e4>
200975b0:	027fffc4 	movi	r9,-1
200975b4:	80c00047 	ldb	r3,1(r16)
200975b8:	003bb006 	br	2009647c <__flash_rwdata_start+0xffff78a8>
200975bc:	8c80010e 	bge	r17,r18,200975c4 <___vfiprintf_internal_r+0x12c0>
200975c0:	9023883a 	mov	r17,r18
200975c4:	d8802317 	ldw	r2,140(sp)
200975c8:	1445883a 	add	r2,r2,r17
200975cc:	d8802315 	stw	r2,140(sp)
200975d0:	003cef06 	br	20096990 <__flash_rwdata_start+0xffff7dbc>

200975d4 <__vfiprintf_internal>:
200975d4:	2007883a 	mov	r3,r4
200975d8:	01000034 	movhi	r4,0
200975dc:	210a9204 	addi	r4,r4,10824
200975e0:	21000017 	ldw	r4,0(r4)
200975e4:	2805883a 	mov	r2,r5
200975e8:	300f883a 	mov	r7,r6
200975ec:	180b883a 	mov	r5,r3
200975f0:	100d883a 	mov	r6,r2
200975f4:	00963041 	jmpi	20096304 <___vfiprintf_internal_r>

200975f8 <__sbprintf>:
200975f8:	2880030b 	ldhu	r2,12(r5)
200975fc:	2ac01917 	ldw	r11,100(r5)
20097600:	2a80038b 	ldhu	r10,14(r5)
20097604:	2a400717 	ldw	r9,28(r5)
20097608:	2a000917 	ldw	r8,36(r5)
2009760c:	defee204 	addi	sp,sp,-1144
20097610:	00c10004 	movi	r3,1024
20097614:	dc011a15 	stw	r16,1128(sp)
20097618:	10bfff4c 	andi	r2,r2,65533
2009761c:	2821883a 	mov	r16,r5
20097620:	d8cb883a 	add	r5,sp,r3
20097624:	dc811c15 	stw	r18,1136(sp)
20097628:	dc411b15 	stw	r17,1132(sp)
2009762c:	dfc11d15 	stw	ra,1140(sp)
20097630:	2025883a 	mov	r18,r4
20097634:	d881030d 	sth	r2,1036(sp)
20097638:	dac11915 	stw	r11,1124(sp)
2009763c:	da81038d 	sth	r10,1038(sp)
20097640:	da410715 	stw	r9,1052(sp)
20097644:	da010915 	stw	r8,1060(sp)
20097648:	dec10015 	stw	sp,1024(sp)
2009764c:	dec10415 	stw	sp,1040(sp)
20097650:	d8c10215 	stw	r3,1032(sp)
20097654:	d8c10515 	stw	r3,1044(sp)
20097658:	d8010615 	stw	zero,1048(sp)
2009765c:	00963040 	call	20096304 <___vfiprintf_internal_r>
20097660:	1023883a 	mov	r17,r2
20097664:	10000416 	blt	r2,zero,20097678 <__sbprintf+0x80>
20097668:	9009883a 	mov	r4,r18
2009766c:	d9410004 	addi	r5,sp,1024
20097670:	00923000 	call	20092300 <_fflush_r>
20097674:	10000d1e 	bne	r2,zero,200976ac <__sbprintf+0xb4>
20097678:	d8c1030b 	ldhu	r3,1036(sp)
2009767c:	18c0100c 	andi	r3,r3,64
20097680:	18000326 	beq	r3,zero,20097690 <__sbprintf+0x98>
20097684:	8080030b 	ldhu	r2,12(r16)
20097688:	10801014 	ori	r2,r2,64
2009768c:	8080030d 	sth	r2,12(r16)
20097690:	8805883a 	mov	r2,r17
20097694:	dfc11d17 	ldw	ra,1140(sp)
20097698:	dc811c17 	ldw	r18,1136(sp)
2009769c:	dc411b17 	ldw	r17,1132(sp)
200976a0:	dc011a17 	ldw	r16,1128(sp)
200976a4:	dec11e04 	addi	sp,sp,1144
200976a8:	f800283a 	ret
200976ac:	047fffc4 	movi	r17,-1
200976b0:	003ff106 	br	20097678 <__flash_rwdata_start+0xffff8aa4>

200976b4 <__swbuf_r>:
200976b4:	defffc04 	addi	sp,sp,-16
200976b8:	dc800215 	stw	r18,8(sp)
200976bc:	dc400115 	stw	r17,4(sp)
200976c0:	dc000015 	stw	r16,0(sp)
200976c4:	dfc00315 	stw	ra,12(sp)
200976c8:	2025883a 	mov	r18,r4
200976cc:	2823883a 	mov	r17,r5
200976d0:	3021883a 	mov	r16,r6
200976d4:	20000226 	beq	r4,zero,200976e0 <__swbuf_r+0x2c>
200976d8:	20800e17 	ldw	r2,56(r4)
200976dc:	10004126 	beq	r2,zero,200977e4 <__swbuf_r+0x130>
200976e0:	80c00617 	ldw	r3,24(r16)
200976e4:	8180030b 	ldhu	r6,12(r16)
200976e8:	80c00215 	stw	r3,8(r16)
200976ec:	30c0020c 	andi	r3,r6,8
200976f0:	18003526 	beq	r3,zero,200977c8 <__swbuf_r+0x114>
200976f4:	80c00417 	ldw	r3,16(r16)
200976f8:	18003326 	beq	r3,zero,200977c8 <__swbuf_r+0x114>
200976fc:	3088000c 	andi	r2,r6,8192
20097700:	8c403fcc 	andi	r17,r17,255
20097704:	10001726 	beq	r2,zero,20097764 <__swbuf_r+0xb0>
20097708:	80800017 	ldw	r2,0(r16)
2009770c:	81000517 	ldw	r4,20(r16)
20097710:	10c7c83a 	sub	r3,r2,r3
20097714:	19001d0e 	bge	r3,r4,2009778c <__swbuf_r+0xd8>
20097718:	18c00044 	addi	r3,r3,1
2009771c:	81400217 	ldw	r5,8(r16)
20097720:	11000044 	addi	r4,r2,1
20097724:	81000015 	stw	r4,0(r16)
20097728:	297fffc4 	addi	r5,r5,-1
2009772c:	81400215 	stw	r5,8(r16)
20097730:	14400005 	stb	r17,0(r2)
20097734:	80800517 	ldw	r2,20(r16)
20097738:	10c01d26 	beq	r2,r3,200977b0 <__swbuf_r+0xfc>
2009773c:	8080030b 	ldhu	r2,12(r16)
20097740:	1080004c 	andi	r2,r2,1
20097744:	1000181e 	bne	r2,zero,200977a8 <__swbuf_r+0xf4>
20097748:	8805883a 	mov	r2,r17
2009774c:	dfc00317 	ldw	ra,12(sp)
20097750:	dc800217 	ldw	r18,8(sp)
20097754:	dc400117 	ldw	r17,4(sp)
20097758:	dc000017 	ldw	r16,0(sp)
2009775c:	dec00404 	addi	sp,sp,16
20097760:	f800283a 	ret
20097764:	81001917 	ldw	r4,100(r16)
20097768:	00b7ffc4 	movi	r2,-8193
2009776c:	31880014 	ori	r6,r6,8192
20097770:	2084703a 	and	r2,r4,r2
20097774:	80801915 	stw	r2,100(r16)
20097778:	80800017 	ldw	r2,0(r16)
2009777c:	81000517 	ldw	r4,20(r16)
20097780:	8180030d 	sth	r6,12(r16)
20097784:	10c7c83a 	sub	r3,r2,r3
20097788:	193fe316 	blt	r3,r4,20097718 <__flash_rwdata_start+0xffff8b44>
2009778c:	9009883a 	mov	r4,r18
20097790:	800b883a 	mov	r5,r16
20097794:	00923000 	call	20092300 <_fflush_r>
20097798:	1000091e 	bne	r2,zero,200977c0 <__swbuf_r+0x10c>
2009779c:	80800017 	ldw	r2,0(r16)
200977a0:	00c00044 	movi	r3,1
200977a4:	003fdd06 	br	2009771c <__flash_rwdata_start+0xffff8b48>
200977a8:	00800284 	movi	r2,10
200977ac:	88bfe61e 	bne	r17,r2,20097748 <__flash_rwdata_start+0xffff8b74>
200977b0:	9009883a 	mov	r4,r18
200977b4:	800b883a 	mov	r5,r16
200977b8:	00923000 	call	20092300 <_fflush_r>
200977bc:	103fe226 	beq	r2,zero,20097748 <__flash_rwdata_start+0xffff8b74>
200977c0:	00bfffc4 	movi	r2,-1
200977c4:	003fe106 	br	2009774c <__flash_rwdata_start+0xffff8b78>
200977c8:	9009883a 	mov	r4,r18
200977cc:	800b883a 	mov	r5,r16
200977d0:	00904e80 	call	200904e8 <__swsetup_r>
200977d4:	103ffa1e 	bne	r2,zero,200977c0 <__flash_rwdata_start+0xffff8bec>
200977d8:	8180030b 	ldhu	r6,12(r16)
200977dc:	80c00417 	ldw	r3,16(r16)
200977e0:	003fc606 	br	200976fc <__flash_rwdata_start+0xffff8b28>
200977e4:	00926dc0 	call	200926dc <__sinit>
200977e8:	003fbd06 	br	200976e0 <__flash_rwdata_start+0xffff8b0c>

200977ec <__swbuf>:
200977ec:	00c00034 	movhi	r3,0
200977f0:	18ca9204 	addi	r3,r3,10824
200977f4:	2005883a 	mov	r2,r4
200977f8:	19000017 	ldw	r4,0(r3)
200977fc:	280d883a 	mov	r6,r5
20097800:	100b883a 	mov	r5,r2
20097804:	00976b41 	jmpi	200976b4 <__swbuf_r>

20097808 <_write_r>:
20097808:	defffd04 	addi	sp,sp,-12
2009780c:	dc000015 	stw	r16,0(sp)
20097810:	04000034 	movhi	r16,0
20097814:	dc400115 	stw	r17,4(sp)
20097818:	840ab204 	addi	r16,r16,10952
2009781c:	2023883a 	mov	r17,r4
20097820:	2809883a 	mov	r4,r5
20097824:	300b883a 	mov	r5,r6
20097828:	380d883a 	mov	r6,r7
2009782c:	dfc00215 	stw	ra,8(sp)
20097830:	80000015 	stw	zero,0(r16)
20097834:	009a1f00 	call	2009a1f0 <write>
20097838:	00ffffc4 	movi	r3,-1
2009783c:	10c00526 	beq	r2,r3,20097854 <_write_r+0x4c>
20097840:	dfc00217 	ldw	ra,8(sp)
20097844:	dc400117 	ldw	r17,4(sp)
20097848:	dc000017 	ldw	r16,0(sp)
2009784c:	dec00304 	addi	sp,sp,12
20097850:	f800283a 	ret
20097854:	80c00017 	ldw	r3,0(r16)
20097858:	183ff926 	beq	r3,zero,20097840 <__flash_rwdata_start+0xffff8c6c>
2009785c:	88c00015 	stw	r3,0(r17)
20097860:	003ff706 	br	20097840 <__flash_rwdata_start+0xffff8c6c>

20097864 <_close_r>:
20097864:	defffd04 	addi	sp,sp,-12
20097868:	dc000015 	stw	r16,0(sp)
2009786c:	04000034 	movhi	r16,0
20097870:	dc400115 	stw	r17,4(sp)
20097874:	840ab204 	addi	r16,r16,10952
20097878:	2023883a 	mov	r17,r4
2009787c:	2809883a 	mov	r4,r5
20097880:	dfc00215 	stw	ra,8(sp)
20097884:	80000015 	stw	zero,0(r16)
20097888:	00994b40 	call	200994b4 <close>
2009788c:	00ffffc4 	movi	r3,-1
20097890:	10c00526 	beq	r2,r3,200978a8 <_close_r+0x44>
20097894:	dfc00217 	ldw	ra,8(sp)
20097898:	dc400117 	ldw	r17,4(sp)
2009789c:	dc000017 	ldw	r16,0(sp)
200978a0:	dec00304 	addi	sp,sp,12
200978a4:	f800283a 	ret
200978a8:	80c00017 	ldw	r3,0(r16)
200978ac:	183ff926 	beq	r3,zero,20097894 <__flash_rwdata_start+0xffff8cc0>
200978b0:	88c00015 	stw	r3,0(r17)
200978b4:	003ff706 	br	20097894 <__flash_rwdata_start+0xffff8cc0>

200978b8 <_calloc_r>:
200978b8:	298b383a 	mul	r5,r5,r6
200978bc:	defffe04 	addi	sp,sp,-8
200978c0:	dc000015 	stw	r16,0(sp)
200978c4:	dfc00115 	stw	ra,4(sp)
200978c8:	008b5780 	call	2008b578 <_malloc_r>
200978cc:	1021883a 	mov	r16,r2
200978d0:	10002826 	beq	r2,zero,20097974 <_calloc_r+0xbc>
200978d4:	11bfff17 	ldw	r6,-4(r2)
200978d8:	00bfff04 	movi	r2,-4
200978dc:	00c00904 	movi	r3,36
200978e0:	308c703a 	and	r6,r6,r2
200978e4:	308d883a 	add	r6,r6,r2
200978e8:	19801436 	bltu	r3,r6,2009793c <_calloc_r+0x84>
200978ec:	008004c4 	movi	r2,19
200978f0:	11800936 	bltu	r2,r6,20097918 <_calloc_r+0x60>
200978f4:	8005883a 	mov	r2,r16
200978f8:	10000015 	stw	zero,0(r2)
200978fc:	10000115 	stw	zero,4(r2)
20097900:	10000215 	stw	zero,8(r2)
20097904:	8005883a 	mov	r2,r16
20097908:	dfc00117 	ldw	ra,4(sp)
2009790c:	dc000017 	ldw	r16,0(sp)
20097910:	dec00204 	addi	sp,sp,8
20097914:	f800283a 	ret
20097918:	80000015 	stw	zero,0(r16)
2009791c:	80000115 	stw	zero,4(r16)
20097920:	008006c4 	movi	r2,27
20097924:	11800d2e 	bgeu	r2,r6,2009795c <_calloc_r+0xa4>
20097928:	80000215 	stw	zero,8(r16)
2009792c:	80000315 	stw	zero,12(r16)
20097930:	30c00c26 	beq	r6,r3,20097964 <_calloc_r+0xac>
20097934:	80800404 	addi	r2,r16,16
20097938:	003fef06 	br	200978f8 <__flash_rwdata_start+0xffff8d24>
2009793c:	8009883a 	mov	r4,r16
20097940:	000b883a 	mov	r5,zero
20097944:	008bed40 	call	2008bed4 <memset>
20097948:	8005883a 	mov	r2,r16
2009794c:	dfc00117 	ldw	ra,4(sp)
20097950:	dc000017 	ldw	r16,0(sp)
20097954:	dec00204 	addi	sp,sp,8
20097958:	f800283a 	ret
2009795c:	80800204 	addi	r2,r16,8
20097960:	003fe506 	br	200978f8 <__flash_rwdata_start+0xffff8d24>
20097964:	80000415 	stw	zero,16(r16)
20097968:	80800604 	addi	r2,r16,24
2009796c:	80000515 	stw	zero,20(r16)
20097970:	003fe106 	br	200978f8 <__flash_rwdata_start+0xffff8d24>
20097974:	0005883a 	mov	r2,zero
20097978:	003fe306 	br	20097908 <__flash_rwdata_start+0xffff8d34>

2009797c <_fclose_r>:
2009797c:	28003926 	beq	r5,zero,20097a64 <_fclose_r+0xe8>
20097980:	defffc04 	addi	sp,sp,-16
20097984:	dc400115 	stw	r17,4(sp)
20097988:	dc000015 	stw	r16,0(sp)
2009798c:	dfc00315 	stw	ra,12(sp)
20097990:	dc800215 	stw	r18,8(sp)
20097994:	2023883a 	mov	r17,r4
20097998:	2821883a 	mov	r16,r5
2009799c:	20000226 	beq	r4,zero,200979a8 <_fclose_r+0x2c>
200979a0:	20800e17 	ldw	r2,56(r4)
200979a4:	10002726 	beq	r2,zero,20097a44 <_fclose_r+0xc8>
200979a8:	8080030f 	ldh	r2,12(r16)
200979ac:	1000071e 	bne	r2,zero,200979cc <_fclose_r+0x50>
200979b0:	0005883a 	mov	r2,zero
200979b4:	dfc00317 	ldw	ra,12(sp)
200979b8:	dc800217 	ldw	r18,8(sp)
200979bc:	dc400117 	ldw	r17,4(sp)
200979c0:	dc000017 	ldw	r16,0(sp)
200979c4:	dec00404 	addi	sp,sp,16
200979c8:	f800283a 	ret
200979cc:	8809883a 	mov	r4,r17
200979d0:	800b883a 	mov	r5,r16
200979d4:	00920f80 	call	200920f8 <__sflush_r>
200979d8:	1025883a 	mov	r18,r2
200979dc:	80800b17 	ldw	r2,44(r16)
200979e0:	10000426 	beq	r2,zero,200979f4 <_fclose_r+0x78>
200979e4:	81400717 	ldw	r5,28(r16)
200979e8:	8809883a 	mov	r4,r17
200979ec:	103ee83a 	callr	r2
200979f0:	10001616 	blt	r2,zero,20097a4c <_fclose_r+0xd0>
200979f4:	8080030b 	ldhu	r2,12(r16)
200979f8:	1080200c 	andi	r2,r2,128
200979fc:	1000151e 	bne	r2,zero,20097a54 <_fclose_r+0xd8>
20097a00:	81400c17 	ldw	r5,48(r16)
20097a04:	28000526 	beq	r5,zero,20097a1c <_fclose_r+0xa0>
20097a08:	80801004 	addi	r2,r16,64
20097a0c:	28800226 	beq	r5,r2,20097a18 <_fclose_r+0x9c>
20097a10:	8809883a 	mov	r4,r17
20097a14:	00928500 	call	20092850 <_free_r>
20097a18:	80000c15 	stw	zero,48(r16)
20097a1c:	81401117 	ldw	r5,68(r16)
20097a20:	28000326 	beq	r5,zero,20097a30 <_fclose_r+0xb4>
20097a24:	8809883a 	mov	r4,r17
20097a28:	00928500 	call	20092850 <_free_r>
20097a2c:	80001115 	stw	zero,68(r16)
20097a30:	00926ec0 	call	200926ec <__sfp_lock_acquire>
20097a34:	8000030d 	sth	zero,12(r16)
20097a38:	00926f00 	call	200926f0 <__sfp_lock_release>
20097a3c:	9005883a 	mov	r2,r18
20097a40:	003fdc06 	br	200979b4 <__flash_rwdata_start+0xffff8de0>
20097a44:	00926dc0 	call	200926dc <__sinit>
20097a48:	003fd706 	br	200979a8 <__flash_rwdata_start+0xffff8dd4>
20097a4c:	04bfffc4 	movi	r18,-1
20097a50:	003fe806 	br	200979f4 <__flash_rwdata_start+0xffff8e20>
20097a54:	81400417 	ldw	r5,16(r16)
20097a58:	8809883a 	mov	r4,r17
20097a5c:	00928500 	call	20092850 <_free_r>
20097a60:	003fe706 	br	20097a00 <__flash_rwdata_start+0xffff8e2c>
20097a64:	0005883a 	mov	r2,zero
20097a68:	f800283a 	ret

20097a6c <fclose>:
20097a6c:	00800034 	movhi	r2,0
20097a70:	108a9204 	addi	r2,r2,10824
20097a74:	200b883a 	mov	r5,r4
20097a78:	11000017 	ldw	r4,0(r2)
20097a7c:	009797c1 	jmpi	2009797c <_fclose_r>

20097a80 <_fputwc_r>:
20097a80:	3080030b 	ldhu	r2,12(r6)
20097a84:	defff804 	addi	sp,sp,-32
20097a88:	dcc00415 	stw	r19,16(sp)
20097a8c:	dc800315 	stw	r18,12(sp)
20097a90:	dc000115 	stw	r16,4(sp)
20097a94:	dfc00715 	stw	ra,28(sp)
20097a98:	dd400615 	stw	r21,24(sp)
20097a9c:	dd000515 	stw	r20,20(sp)
20097aa0:	dc400215 	stw	r17,8(sp)
20097aa4:	10c8000c 	andi	r3,r2,8192
20097aa8:	3021883a 	mov	r16,r6
20097aac:	2027883a 	mov	r19,r4
20097ab0:	2825883a 	mov	r18,r5
20097ab4:	1800051e 	bne	r3,zero,20097acc <_fputwc_r+0x4c>
20097ab8:	30c01917 	ldw	r3,100(r6)
20097abc:	10880014 	ori	r2,r2,8192
20097ac0:	3080030d 	sth	r2,12(r6)
20097ac4:	18880014 	ori	r2,r3,8192
20097ac8:	30801915 	stw	r2,100(r6)
20097acc:	00932100 	call	20093210 <__locale_mb_cur_max>
20097ad0:	00c00044 	movi	r3,1
20097ad4:	10c03e26 	beq	r2,r3,20097bd0 <_fputwc_r+0x150>
20097ad8:	9809883a 	mov	r4,r19
20097adc:	d80b883a 	mov	r5,sp
20097ae0:	900d883a 	mov	r6,r18
20097ae4:	81c01704 	addi	r7,r16,92
20097ae8:	0097dc40 	call	20097dc4 <_wcrtomb_r>
20097aec:	1029883a 	mov	r20,r2
20097af0:	00bfffc4 	movi	r2,-1
20097af4:	a0802026 	beq	r20,r2,20097b78 <_fputwc_r+0xf8>
20097af8:	d9400003 	ldbu	r5,0(sp)
20097afc:	a0001c26 	beq	r20,zero,20097b70 <_fputwc_r+0xf0>
20097b00:	0023883a 	mov	r17,zero
20097b04:	05400284 	movi	r21,10
20097b08:	00000906 	br	20097b30 <_fputwc_r+0xb0>
20097b0c:	80800017 	ldw	r2,0(r16)
20097b10:	11400005 	stb	r5,0(r2)
20097b14:	80c00017 	ldw	r3,0(r16)
20097b18:	18c00044 	addi	r3,r3,1
20097b1c:	80c00015 	stw	r3,0(r16)
20097b20:	8c400044 	addi	r17,r17,1
20097b24:	dc45883a 	add	r2,sp,r17
20097b28:	8d00112e 	bgeu	r17,r20,20097b70 <_fputwc_r+0xf0>
20097b2c:	11400003 	ldbu	r5,0(r2)
20097b30:	80c00217 	ldw	r3,8(r16)
20097b34:	18ffffc4 	addi	r3,r3,-1
20097b38:	80c00215 	stw	r3,8(r16)
20097b3c:	183ff30e 	bge	r3,zero,20097b0c <__flash_rwdata_start+0xffff8f38>
20097b40:	80800617 	ldw	r2,24(r16)
20097b44:	18801916 	blt	r3,r2,20097bac <_fputwc_r+0x12c>
20097b48:	80800017 	ldw	r2,0(r16)
20097b4c:	11400005 	stb	r5,0(r2)
20097b50:	80800017 	ldw	r2,0(r16)
20097b54:	10c00003 	ldbu	r3,0(r2)
20097b58:	10800044 	addi	r2,r2,1
20097b5c:	1d402326 	beq	r3,r21,20097bec <_fputwc_r+0x16c>
20097b60:	80800015 	stw	r2,0(r16)
20097b64:	8c400044 	addi	r17,r17,1
20097b68:	dc45883a 	add	r2,sp,r17
20097b6c:	8d3fef36 	bltu	r17,r20,20097b2c <__flash_rwdata_start+0xffff8f58>
20097b70:	9005883a 	mov	r2,r18
20097b74:	00000406 	br	20097b88 <_fputwc_r+0x108>
20097b78:	80c0030b 	ldhu	r3,12(r16)
20097b7c:	a005883a 	mov	r2,r20
20097b80:	18c01014 	ori	r3,r3,64
20097b84:	80c0030d 	sth	r3,12(r16)
20097b88:	dfc00717 	ldw	ra,28(sp)
20097b8c:	dd400617 	ldw	r21,24(sp)
20097b90:	dd000517 	ldw	r20,20(sp)
20097b94:	dcc00417 	ldw	r19,16(sp)
20097b98:	dc800317 	ldw	r18,12(sp)
20097b9c:	dc400217 	ldw	r17,8(sp)
20097ba0:	dc000117 	ldw	r16,4(sp)
20097ba4:	dec00804 	addi	sp,sp,32
20097ba8:	f800283a 	ret
20097bac:	9809883a 	mov	r4,r19
20097bb0:	29403fcc 	andi	r5,r5,255
20097bb4:	800d883a 	mov	r6,r16
20097bb8:	00976b40 	call	200976b4 <__swbuf_r>
20097bbc:	10bfffe0 	cmpeqi	r2,r2,-1
20097bc0:	10803fcc 	andi	r2,r2,255
20097bc4:	103fd626 	beq	r2,zero,20097b20 <__flash_rwdata_start+0xffff8f4c>
20097bc8:	00bfffc4 	movi	r2,-1
20097bcc:	003fee06 	br	20097b88 <__flash_rwdata_start+0xffff8fb4>
20097bd0:	90ffffc4 	addi	r3,r18,-1
20097bd4:	01003f84 	movi	r4,254
20097bd8:	20ffbf36 	bltu	r4,r3,20097ad8 <__flash_rwdata_start+0xffff8f04>
20097bdc:	900b883a 	mov	r5,r18
20097be0:	dc800005 	stb	r18,0(sp)
20097be4:	1029883a 	mov	r20,r2
20097be8:	003fc506 	br	20097b00 <__flash_rwdata_start+0xffff8f2c>
20097bec:	9809883a 	mov	r4,r19
20097bf0:	a80b883a 	mov	r5,r21
20097bf4:	800d883a 	mov	r6,r16
20097bf8:	00976b40 	call	200976b4 <__swbuf_r>
20097bfc:	10bfffe0 	cmpeqi	r2,r2,-1
20097c00:	003fef06 	br	20097bc0 <__flash_rwdata_start+0xffff8fec>

20097c04 <fputwc>:
20097c04:	00800034 	movhi	r2,0
20097c08:	defffc04 	addi	sp,sp,-16
20097c0c:	108a9204 	addi	r2,r2,10824
20097c10:	dc000115 	stw	r16,4(sp)
20097c14:	14000017 	ldw	r16,0(r2)
20097c18:	dc400215 	stw	r17,8(sp)
20097c1c:	dfc00315 	stw	ra,12(sp)
20097c20:	2023883a 	mov	r17,r4
20097c24:	280d883a 	mov	r6,r5
20097c28:	80000626 	beq	r16,zero,20097c44 <fputwc+0x40>
20097c2c:	80800e17 	ldw	r2,56(r16)
20097c30:	1000041e 	bne	r2,zero,20097c44 <fputwc+0x40>
20097c34:	8009883a 	mov	r4,r16
20097c38:	d9400015 	stw	r5,0(sp)
20097c3c:	00926dc0 	call	200926dc <__sinit>
20097c40:	d9800017 	ldw	r6,0(sp)
20097c44:	8009883a 	mov	r4,r16
20097c48:	880b883a 	mov	r5,r17
20097c4c:	dfc00317 	ldw	ra,12(sp)
20097c50:	dc400217 	ldw	r17,8(sp)
20097c54:	dc000117 	ldw	r16,4(sp)
20097c58:	dec00404 	addi	sp,sp,16
20097c5c:	0097a801 	jmpi	20097a80 <_fputwc_r>

20097c60 <_fstat_r>:
20097c60:	defffd04 	addi	sp,sp,-12
20097c64:	dc000015 	stw	r16,0(sp)
20097c68:	04000034 	movhi	r16,0
20097c6c:	dc400115 	stw	r17,4(sp)
20097c70:	840ab204 	addi	r16,r16,10952
20097c74:	2023883a 	mov	r17,r4
20097c78:	2809883a 	mov	r4,r5
20097c7c:	300b883a 	mov	r5,r6
20097c80:	dfc00215 	stw	ra,8(sp)
20097c84:	80000015 	stw	zero,0(r16)
20097c88:	00996ec0 	call	200996ec <fstat>
20097c8c:	00ffffc4 	movi	r3,-1
20097c90:	10c00526 	beq	r2,r3,20097ca8 <_fstat_r+0x48>
20097c94:	dfc00217 	ldw	ra,8(sp)
20097c98:	dc400117 	ldw	r17,4(sp)
20097c9c:	dc000017 	ldw	r16,0(sp)
20097ca0:	dec00304 	addi	sp,sp,12
20097ca4:	f800283a 	ret
20097ca8:	80c00017 	ldw	r3,0(r16)
20097cac:	183ff926 	beq	r3,zero,20097c94 <__flash_rwdata_start+0xffff90c0>
20097cb0:	88c00015 	stw	r3,0(r17)
20097cb4:	003ff706 	br	20097c94 <__flash_rwdata_start+0xffff90c0>

20097cb8 <_isatty_r>:
20097cb8:	defffd04 	addi	sp,sp,-12
20097cbc:	dc000015 	stw	r16,0(sp)
20097cc0:	04000034 	movhi	r16,0
20097cc4:	dc400115 	stw	r17,4(sp)
20097cc8:	840ab204 	addi	r16,r16,10952
20097ccc:	2023883a 	mov	r17,r4
20097cd0:	2809883a 	mov	r4,r5
20097cd4:	dfc00215 	stw	ra,8(sp)
20097cd8:	80000015 	stw	zero,0(r16)
20097cdc:	009999c0 	call	2009999c <isatty>
20097ce0:	00ffffc4 	movi	r3,-1
20097ce4:	10c00526 	beq	r2,r3,20097cfc <_isatty_r+0x44>
20097ce8:	dfc00217 	ldw	ra,8(sp)
20097cec:	dc400117 	ldw	r17,4(sp)
20097cf0:	dc000017 	ldw	r16,0(sp)
20097cf4:	dec00304 	addi	sp,sp,12
20097cf8:	f800283a 	ret
20097cfc:	80c00017 	ldw	r3,0(r16)
20097d00:	183ff926 	beq	r3,zero,20097ce8 <__flash_rwdata_start+0xffff9114>
20097d04:	88c00015 	stw	r3,0(r17)
20097d08:	003ff706 	br	20097ce8 <__flash_rwdata_start+0xffff9114>

20097d0c <_lseek_r>:
20097d0c:	defffd04 	addi	sp,sp,-12
20097d10:	dc000015 	stw	r16,0(sp)
20097d14:	04000034 	movhi	r16,0
20097d18:	dc400115 	stw	r17,4(sp)
20097d1c:	840ab204 	addi	r16,r16,10952
20097d20:	2023883a 	mov	r17,r4
20097d24:	2809883a 	mov	r4,r5
20097d28:	300b883a 	mov	r5,r6
20097d2c:	380d883a 	mov	r6,r7
20097d30:	dfc00215 	stw	ra,8(sp)
20097d34:	80000015 	stw	zero,0(r16)
20097d38:	0099b740 	call	20099b74 <lseek>
20097d3c:	00ffffc4 	movi	r3,-1
20097d40:	10c00526 	beq	r2,r3,20097d58 <_lseek_r+0x4c>
20097d44:	dfc00217 	ldw	ra,8(sp)
20097d48:	dc400117 	ldw	r17,4(sp)
20097d4c:	dc000017 	ldw	r16,0(sp)
20097d50:	dec00304 	addi	sp,sp,12
20097d54:	f800283a 	ret
20097d58:	80c00017 	ldw	r3,0(r16)
20097d5c:	183ff926 	beq	r3,zero,20097d44 <__flash_rwdata_start+0xffff9170>
20097d60:	88c00015 	stw	r3,0(r17)
20097d64:	003ff706 	br	20097d44 <__flash_rwdata_start+0xffff9170>

20097d68 <_read_r>:
20097d68:	defffd04 	addi	sp,sp,-12
20097d6c:	dc000015 	stw	r16,0(sp)
20097d70:	04000034 	movhi	r16,0
20097d74:	dc400115 	stw	r17,4(sp)
20097d78:	840ab204 	addi	r16,r16,10952
20097d7c:	2023883a 	mov	r17,r4
20097d80:	2809883a 	mov	r4,r5
20097d84:	300b883a 	mov	r5,r6
20097d88:	380d883a 	mov	r6,r7
20097d8c:	dfc00215 	stw	ra,8(sp)
20097d90:	80000015 	stw	zero,0(r16)
20097d94:	0099d500 	call	20099d50 <read>
20097d98:	00ffffc4 	movi	r3,-1
20097d9c:	10c00526 	beq	r2,r3,20097db4 <_read_r+0x4c>
20097da0:	dfc00217 	ldw	ra,8(sp)
20097da4:	dc400117 	ldw	r17,4(sp)
20097da8:	dc000017 	ldw	r16,0(sp)
20097dac:	dec00304 	addi	sp,sp,12
20097db0:	f800283a 	ret
20097db4:	80c00017 	ldw	r3,0(r16)
20097db8:	183ff926 	beq	r3,zero,20097da0 <__flash_rwdata_start+0xffff91cc>
20097dbc:	88c00015 	stw	r3,0(r17)
20097dc0:	003ff706 	br	20097da0 <__flash_rwdata_start+0xffff91cc>

20097dc4 <_wcrtomb_r>:
20097dc4:	defff604 	addi	sp,sp,-40
20097dc8:	00800034 	movhi	r2,0
20097dcc:	dc800815 	stw	r18,32(sp)
20097dd0:	dc400715 	stw	r17,28(sp)
20097dd4:	dc000615 	stw	r16,24(sp)
20097dd8:	108a9604 	addi	r2,r2,10840
20097ddc:	dfc00915 	stw	ra,36(sp)
20097de0:	2021883a 	mov	r16,r4
20097de4:	3823883a 	mov	r17,r7
20097de8:	14800017 	ldw	r18,0(r2)
20097dec:	28001426 	beq	r5,zero,20097e40 <_wcrtomb_r+0x7c>
20097df0:	d9400415 	stw	r5,16(sp)
20097df4:	d9800515 	stw	r6,20(sp)
20097df8:	00932040 	call	20093204 <__locale_charset>
20097dfc:	d9400417 	ldw	r5,16(sp)
20097e00:	d9800517 	ldw	r6,20(sp)
20097e04:	8009883a 	mov	r4,r16
20097e08:	dc400015 	stw	r17,0(sp)
20097e0c:	100f883a 	mov	r7,r2
20097e10:	903ee83a 	callr	r18
20097e14:	00ffffc4 	movi	r3,-1
20097e18:	10c0031e 	bne	r2,r3,20097e28 <_wcrtomb_r+0x64>
20097e1c:	88000015 	stw	zero,0(r17)
20097e20:	00c02284 	movi	r3,138
20097e24:	80c00015 	stw	r3,0(r16)
20097e28:	dfc00917 	ldw	ra,36(sp)
20097e2c:	dc800817 	ldw	r18,32(sp)
20097e30:	dc400717 	ldw	r17,28(sp)
20097e34:	dc000617 	ldw	r16,24(sp)
20097e38:	dec00a04 	addi	sp,sp,40
20097e3c:	f800283a 	ret
20097e40:	00932040 	call	20093204 <__locale_charset>
20097e44:	8009883a 	mov	r4,r16
20097e48:	dc400015 	stw	r17,0(sp)
20097e4c:	d9400104 	addi	r5,sp,4
20097e50:	000d883a 	mov	r6,zero
20097e54:	100f883a 	mov	r7,r2
20097e58:	903ee83a 	callr	r18
20097e5c:	003fed06 	br	20097e14 <__flash_rwdata_start+0xffff9240>

20097e60 <wcrtomb>:
20097e60:	defff604 	addi	sp,sp,-40
20097e64:	00800034 	movhi	r2,0
20097e68:	dc800615 	stw	r18,24(sp)
20097e6c:	dc400515 	stw	r17,20(sp)
20097e70:	dc000415 	stw	r16,16(sp)
20097e74:	108a9204 	addi	r2,r2,10824
20097e78:	dfc00915 	stw	ra,36(sp)
20097e7c:	dd000815 	stw	r20,32(sp)
20097e80:	dcc00715 	stw	r19,28(sp)
20097e84:	2021883a 	mov	r16,r4
20097e88:	3025883a 	mov	r18,r6
20097e8c:	14400017 	ldw	r17,0(r2)
20097e90:	20001826 	beq	r4,zero,20097ef4 <wcrtomb+0x94>
20097e94:	00800034 	movhi	r2,0
20097e98:	108a9604 	addi	r2,r2,10840
20097e9c:	15000017 	ldw	r20,0(r2)
20097ea0:	2827883a 	mov	r19,r5
20097ea4:	00932040 	call	20093204 <__locale_charset>
20097ea8:	8809883a 	mov	r4,r17
20097eac:	dc800015 	stw	r18,0(sp)
20097eb0:	800b883a 	mov	r5,r16
20097eb4:	980d883a 	mov	r6,r19
20097eb8:	100f883a 	mov	r7,r2
20097ebc:	a03ee83a 	callr	r20
20097ec0:	00ffffc4 	movi	r3,-1
20097ec4:	10c0031e 	bne	r2,r3,20097ed4 <wcrtomb+0x74>
20097ec8:	90000015 	stw	zero,0(r18)
20097ecc:	00c02284 	movi	r3,138
20097ed0:	88c00015 	stw	r3,0(r17)
20097ed4:	dfc00917 	ldw	ra,36(sp)
20097ed8:	dd000817 	ldw	r20,32(sp)
20097edc:	dcc00717 	ldw	r19,28(sp)
20097ee0:	dc800617 	ldw	r18,24(sp)
20097ee4:	dc400517 	ldw	r17,20(sp)
20097ee8:	dc000417 	ldw	r16,16(sp)
20097eec:	dec00a04 	addi	sp,sp,40
20097ef0:	f800283a 	ret
20097ef4:	00800034 	movhi	r2,0
20097ef8:	108a9604 	addi	r2,r2,10840
20097efc:	14000017 	ldw	r16,0(r2)
20097f00:	00932040 	call	20093204 <__locale_charset>
20097f04:	8809883a 	mov	r4,r17
20097f08:	dc800015 	stw	r18,0(sp)
20097f0c:	d9400104 	addi	r5,sp,4
20097f10:	000d883a 	mov	r6,zero
20097f14:	100f883a 	mov	r7,r2
20097f18:	803ee83a 	callr	r16
20097f1c:	003fe806 	br	20097ec0 <__flash_rwdata_start+0xffff92ec>

20097f20 <__ascii_wctomb>:
20097f20:	28000526 	beq	r5,zero,20097f38 <__ascii_wctomb+0x18>
20097f24:	00803fc4 	movi	r2,255
20097f28:	11800536 	bltu	r2,r6,20097f40 <__ascii_wctomb+0x20>
20097f2c:	29800005 	stb	r6,0(r5)
20097f30:	00800044 	movi	r2,1
20097f34:	f800283a 	ret
20097f38:	0005883a 	mov	r2,zero
20097f3c:	f800283a 	ret
20097f40:	00802284 	movi	r2,138
20097f44:	20800015 	stw	r2,0(r4)
20097f48:	00bfffc4 	movi	r2,-1
20097f4c:	f800283a 	ret

20097f50 <_wctomb_r>:
20097f50:	00800034 	movhi	r2,0
20097f54:	defff904 	addi	sp,sp,-28
20097f58:	108a9604 	addi	r2,r2,10840
20097f5c:	dfc00615 	stw	ra,24(sp)
20097f60:	dc400515 	stw	r17,20(sp)
20097f64:	dc000415 	stw	r16,16(sp)
20097f68:	3823883a 	mov	r17,r7
20097f6c:	14000017 	ldw	r16,0(r2)
20097f70:	d9000115 	stw	r4,4(sp)
20097f74:	d9400215 	stw	r5,8(sp)
20097f78:	d9800315 	stw	r6,12(sp)
20097f7c:	00932040 	call	20093204 <__locale_charset>
20097f80:	d9000117 	ldw	r4,4(sp)
20097f84:	d9400217 	ldw	r5,8(sp)
20097f88:	d9800317 	ldw	r6,12(sp)
20097f8c:	dc400015 	stw	r17,0(sp)
20097f90:	100f883a 	mov	r7,r2
20097f94:	803ee83a 	callr	r16
20097f98:	dfc00617 	ldw	ra,24(sp)
20097f9c:	dc400517 	ldw	r17,20(sp)
20097fa0:	dc000417 	ldw	r16,16(sp)
20097fa4:	dec00704 	addi	sp,sp,28
20097fa8:	f800283a 	ret

20097fac <__udivdi3>:
20097fac:	defff504 	addi	sp,sp,-44
20097fb0:	dcc00415 	stw	r19,16(sp)
20097fb4:	dc000115 	stw	r16,4(sp)
20097fb8:	dfc00a15 	stw	ra,40(sp)
20097fbc:	df000915 	stw	fp,36(sp)
20097fc0:	ddc00815 	stw	r23,32(sp)
20097fc4:	dd800715 	stw	r22,28(sp)
20097fc8:	dd400615 	stw	r21,24(sp)
20097fcc:	dd000515 	stw	r20,20(sp)
20097fd0:	dc800315 	stw	r18,12(sp)
20097fd4:	dc400215 	stw	r17,8(sp)
20097fd8:	2027883a 	mov	r19,r4
20097fdc:	2821883a 	mov	r16,r5
20097fe0:	3800421e 	bne	r7,zero,200980ec <__udivdi3+0x140>
20097fe4:	3025883a 	mov	r18,r6
20097fe8:	2023883a 	mov	r17,r4
20097fec:	2980542e 	bgeu	r5,r6,20098140 <__udivdi3+0x194>
20097ff0:	00bfffd4 	movui	r2,65535
20097ff4:	282d883a 	mov	r22,r5
20097ff8:	1180a836 	bltu	r2,r6,2009829c <__udivdi3+0x2f0>
20097ffc:	00803fc4 	movi	r2,255
20098000:	1181422e 	bgeu	r2,r6,2009850c <__udivdi3+0x560>
20098004:	00800204 	movi	r2,8
20098008:	1007883a 	mov	r3,r2
2009800c:	3084d83a 	srl	r2,r6,r2
20098010:	01000034 	movhi	r4,0
20098014:	21014904 	addi	r4,r4,1316
20098018:	2085883a 	add	r2,r4,r2
2009801c:	10800003 	ldbu	r2,0(r2)
20098020:	10c7883a 	add	r3,r2,r3
20098024:	00800804 	movi	r2,32
20098028:	10c5c83a 	sub	r2,r2,r3
2009802c:	10000526 	beq	r2,zero,20098044 <__udivdi3+0x98>
20098030:	80a0983a 	sll	r16,r16,r2
20098034:	98c6d83a 	srl	r3,r19,r3
20098038:	30a4983a 	sll	r18,r6,r2
2009803c:	98a2983a 	sll	r17,r19,r2
20098040:	80ecb03a 	or	r22,r16,r3
20098044:	902ad43a 	srli	r21,r18,16
20098048:	b009883a 	mov	r4,r22
2009804c:	953fffcc 	andi	r20,r18,65535
20098050:	a80b883a 	mov	r5,r21
20098054:	0088a7c0 	call	20088a7c <__umodsi3>
20098058:	b009883a 	mov	r4,r22
2009805c:	a80b883a 	mov	r5,r21
20098060:	1027883a 	mov	r19,r2
20098064:	0088a740 	call	20088a74 <__udivsi3>
20098068:	1021883a 	mov	r16,r2
2009806c:	8806d43a 	srli	r3,r17,16
20098070:	9804943a 	slli	r2,r19,16
20098074:	8527383a 	mul	r19,r16,r20
20098078:	10c4b03a 	or	r2,r2,r3
2009807c:	14c0052e 	bgeu	r2,r19,20098094 <__udivdi3+0xe8>
20098080:	1485883a 	add	r2,r2,r18
20098084:	80ffffc4 	addi	r3,r16,-1
20098088:	14800136 	bltu	r2,r18,20098090 <__udivdi3+0xe4>
2009808c:	14c13436 	bltu	r2,r19,20098560 <__udivdi3+0x5b4>
20098090:	1821883a 	mov	r16,r3
20098094:	14e7c83a 	sub	r19,r2,r19
20098098:	9809883a 	mov	r4,r19
2009809c:	a80b883a 	mov	r5,r21
200980a0:	0088a7c0 	call	20088a7c <__umodsi3>
200980a4:	102d883a 	mov	r22,r2
200980a8:	9809883a 	mov	r4,r19
200980ac:	a80b883a 	mov	r5,r21
200980b0:	0088a740 	call	20088a74 <__udivsi3>
200980b4:	b02c943a 	slli	r22,r22,16
200980b8:	1529383a 	mul	r20,r2,r20
200980bc:	8c7fffcc 	andi	r17,r17,65535
200980c0:	b462b03a 	or	r17,r22,r17
200980c4:	8d00052e 	bgeu	r17,r20,200980dc <__udivdi3+0x130>
200980c8:	8ca3883a 	add	r17,r17,r18
200980cc:	10ffffc4 	addi	r3,r2,-1
200980d0:	8c80f636 	bltu	r17,r18,200984ac <__udivdi3+0x500>
200980d4:	8d00f52e 	bgeu	r17,r20,200984ac <__udivdi3+0x500>
200980d8:	10bfff84 	addi	r2,r2,-2
200980dc:	8020943a 	slli	r16,r16,16
200980e0:	0007883a 	mov	r3,zero
200980e4:	1404b03a 	or	r2,r2,r16
200980e8:	00005b06 	br	20098258 <__udivdi3+0x2ac>
200980ec:	29c05836 	bltu	r5,r7,20098250 <__udivdi3+0x2a4>
200980f0:	00bfffd4 	movui	r2,65535
200980f4:	11c0642e 	bgeu	r2,r7,20098288 <__udivdi3+0x2dc>
200980f8:	00804034 	movhi	r2,256
200980fc:	10bfffc4 	addi	r2,r2,-1
20098100:	11c0f32e 	bgeu	r2,r7,200984d0 <__udivdi3+0x524>
20098104:	00c00604 	movi	r3,24
20098108:	180b883a 	mov	r5,r3
2009810c:	38c6d83a 	srl	r3,r7,r3
20098110:	00800034 	movhi	r2,0
20098114:	10814904 	addi	r2,r2,1316
20098118:	10c7883a 	add	r3,r2,r3
2009811c:	18c00003 	ldbu	r3,0(r3)
20098120:	01000804 	movi	r4,32
20098124:	1947883a 	add	r3,r3,r5
20098128:	20e5c83a 	sub	r18,r4,r3
2009812c:	9000661e 	bne	r18,zero,200982c8 <__udivdi3+0x31c>
20098130:	3c00f936 	bltu	r7,r16,20098518 <__udivdi3+0x56c>
20098134:	9985403a 	cmpgeu	r2,r19,r6
20098138:	0007883a 	mov	r3,zero
2009813c:	00004606 	br	20098258 <__udivdi3+0x2ac>
20098140:	3000041e 	bne	r6,zero,20098154 <__udivdi3+0x1a8>
20098144:	01000044 	movi	r4,1
20098148:	000b883a 	mov	r5,zero
2009814c:	0088a740 	call	20088a74 <__udivsi3>
20098150:	1025883a 	mov	r18,r2
20098154:	00bfffd4 	movui	r2,65535
20098158:	1480562e 	bgeu	r2,r18,200982b4 <__udivdi3+0x308>
2009815c:	00804034 	movhi	r2,256
20098160:	10bfffc4 	addi	r2,r2,-1
20098164:	1480e32e 	bgeu	r2,r18,200984f4 <__udivdi3+0x548>
20098168:	00800604 	movi	r2,24
2009816c:	1007883a 	mov	r3,r2
20098170:	9084d83a 	srl	r2,r18,r2
20098174:	01000034 	movhi	r4,0
20098178:	21014904 	addi	r4,r4,1316
2009817c:	2085883a 	add	r2,r4,r2
20098180:	10800003 	ldbu	r2,0(r2)
20098184:	10c5883a 	add	r2,r2,r3
20098188:	00c00804 	movi	r3,32
2009818c:	1887c83a 	sub	r3,r3,r2
20098190:	1800911e 	bne	r3,zero,200983d8 <__udivdi3+0x42c>
20098194:	9028d43a 	srli	r20,r18,16
20098198:	84a1c83a 	sub	r16,r16,r18
2009819c:	957fffcc 	andi	r21,r18,65535
200981a0:	00c00044 	movi	r3,1
200981a4:	8009883a 	mov	r4,r16
200981a8:	a00b883a 	mov	r5,r20
200981ac:	d8c00015 	stw	r3,0(sp)
200981b0:	0088a7c0 	call	20088a7c <__umodsi3>
200981b4:	8009883a 	mov	r4,r16
200981b8:	a00b883a 	mov	r5,r20
200981bc:	1027883a 	mov	r19,r2
200981c0:	0088a740 	call	20088a74 <__udivsi3>
200981c4:	1021883a 	mov	r16,r2
200981c8:	880cd43a 	srli	r6,r17,16
200981cc:	9804943a 	slli	r2,r19,16
200981d0:	8567383a 	mul	r19,r16,r21
200981d4:	d8c00017 	ldw	r3,0(sp)
200981d8:	1188b03a 	or	r4,r2,r6
200981dc:	24c0052e 	bgeu	r4,r19,200981f4 <__udivdi3+0x248>
200981e0:	2489883a 	add	r4,r4,r18
200981e4:	80bfffc4 	addi	r2,r16,-1
200981e8:	24800136 	bltu	r4,r18,200981f0 <__udivdi3+0x244>
200981ec:	24c0d936 	bltu	r4,r19,20098554 <__udivdi3+0x5a8>
200981f0:	1021883a 	mov	r16,r2
200981f4:	24e7c83a 	sub	r19,r4,r19
200981f8:	9809883a 	mov	r4,r19
200981fc:	a00b883a 	mov	r5,r20
20098200:	d8c00015 	stw	r3,0(sp)
20098204:	0088a7c0 	call	20088a7c <__umodsi3>
20098208:	102d883a 	mov	r22,r2
2009820c:	9809883a 	mov	r4,r19
20098210:	a00b883a 	mov	r5,r20
20098214:	0088a740 	call	20088a74 <__udivsi3>
20098218:	b02c943a 	slli	r22,r22,16
2009821c:	156b383a 	mul	r21,r2,r21
20098220:	8c7fffcc 	andi	r17,r17,65535
20098224:	b462b03a 	or	r17,r22,r17
20098228:	d8c00017 	ldw	r3,0(sp)
2009822c:	8d40052e 	bgeu	r17,r21,20098244 <__udivdi3+0x298>
20098230:	8ca3883a 	add	r17,r17,r18
20098234:	113fffc4 	addi	r4,r2,-1
20098238:	8c809a36 	bltu	r17,r18,200984a4 <__udivdi3+0x4f8>
2009823c:	8d40992e 	bgeu	r17,r21,200984a4 <__udivdi3+0x4f8>
20098240:	10bfff84 	addi	r2,r2,-2
20098244:	8020943a 	slli	r16,r16,16
20098248:	1404b03a 	or	r2,r2,r16
2009824c:	00000206 	br	20098258 <__udivdi3+0x2ac>
20098250:	0007883a 	mov	r3,zero
20098254:	0005883a 	mov	r2,zero
20098258:	dfc00a17 	ldw	ra,40(sp)
2009825c:	df000917 	ldw	fp,36(sp)
20098260:	ddc00817 	ldw	r23,32(sp)
20098264:	dd800717 	ldw	r22,28(sp)
20098268:	dd400617 	ldw	r21,24(sp)
2009826c:	dd000517 	ldw	r20,20(sp)
20098270:	dcc00417 	ldw	r19,16(sp)
20098274:	dc800317 	ldw	r18,12(sp)
20098278:	dc400217 	ldw	r17,8(sp)
2009827c:	dc000117 	ldw	r16,4(sp)
20098280:	dec00b04 	addi	sp,sp,44
20098284:	f800283a 	ret
20098288:	00803fc4 	movi	r2,255
2009828c:	11c0932e 	bgeu	r2,r7,200984dc <__udivdi3+0x530>
20098290:	00c00204 	movi	r3,8
20098294:	180b883a 	mov	r5,r3
20098298:	003f9c06 	br	2009810c <__flash_rwdata_start+0xffff9538>
2009829c:	00804034 	movhi	r2,256
200982a0:	10bfffc4 	addi	r2,r2,-1
200982a4:	1180902e 	bgeu	r2,r6,200984e8 <__udivdi3+0x53c>
200982a8:	00800604 	movi	r2,24
200982ac:	1007883a 	mov	r3,r2
200982b0:	003f5606 	br	2009800c <__flash_rwdata_start+0xffff9438>
200982b4:	00803fc4 	movi	r2,255
200982b8:	1480912e 	bgeu	r2,r18,20098500 <__udivdi3+0x554>
200982bc:	00800204 	movi	r2,8
200982c0:	1007883a 	mov	r3,r2
200982c4:	003faa06 	br	20098170 <__flash_rwdata_start+0xffff959c>
200982c8:	30eed83a 	srl	r23,r6,r3
200982cc:	3c8e983a 	sll	r7,r7,r18
200982d0:	80f8d83a 	srl	fp,r16,r3
200982d4:	98c6d83a 	srl	r3,r19,r3
200982d8:	3deeb03a 	or	r23,r7,r23
200982dc:	b828d43a 	srli	r20,r23,16
200982e0:	84a0983a 	sll	r16,r16,r18
200982e4:	e009883a 	mov	r4,fp
200982e8:	a00b883a 	mov	r5,r20
200982ec:	80e2b03a 	or	r17,r16,r3
200982f0:	34aa983a 	sll	r21,r6,r18
200982f4:	0088a7c0 	call	20088a7c <__umodsi3>
200982f8:	e009883a 	mov	r4,fp
200982fc:	a00b883a 	mov	r5,r20
20098300:	102d883a 	mov	r22,r2
20098304:	0088a740 	call	20088a74 <__udivsi3>
20098308:	1021883a 	mov	r16,r2
2009830c:	bf3fffcc 	andi	fp,r23,65535
20098310:	b004943a 	slli	r2,r22,16
20098314:	8808d43a 	srli	r4,r17,16
20098318:	872d383a 	mul	r22,r16,fp
2009831c:	1104b03a 	or	r2,r2,r4
20098320:	1580042e 	bgeu	r2,r22,20098334 <__udivdi3+0x388>
20098324:	15c5883a 	add	r2,r2,r23
20098328:	80ffffc4 	addi	r3,r16,-1
2009832c:	15c0812e 	bgeu	r2,r23,20098534 <__udivdi3+0x588>
20098330:	1821883a 	mov	r16,r3
20098334:	15adc83a 	sub	r22,r2,r22
20098338:	b009883a 	mov	r4,r22
2009833c:	a00b883a 	mov	r5,r20
20098340:	0088a7c0 	call	20088a7c <__umodsi3>
20098344:	a00b883a 	mov	r5,r20
20098348:	b009883a 	mov	r4,r22
2009834c:	d8800015 	stw	r2,0(sp)
20098350:	0088a740 	call	20088a74 <__udivsi3>
20098354:	d8c00017 	ldw	r3,0(sp)
20098358:	170b383a 	mul	r5,r2,fp
2009835c:	8c7fffcc 	andi	r17,r17,65535
20098360:	1806943a 	slli	r3,r3,16
20098364:	1c46b03a 	or	r3,r3,r17
20098368:	1940042e 	bgeu	r3,r5,2009837c <__udivdi3+0x3d0>
2009836c:	1dc7883a 	add	r3,r3,r23
20098370:	113fffc4 	addi	r4,r2,-1
20098374:	1dc06b2e 	bgeu	r3,r23,20098524 <__udivdi3+0x578>
20098378:	2005883a 	mov	r2,r4
2009837c:	8020943a 	slli	r16,r16,16
20098380:	a9ffffcc 	andi	r7,r21,65535
20098384:	a82ad43a 	srli	r21,r21,16
20098388:	1404b03a 	or	r2,r2,r16
2009838c:	113fffcc 	andi	r4,r2,65535
20098390:	100cd43a 	srli	r6,r2,16
20098394:	21d3383a 	mul	r9,r4,r7
20098398:	2549383a 	mul	r4,r4,r21
2009839c:	31cf383a 	mul	r7,r6,r7
200983a0:	4810d43a 	srli	r8,r9,16
200983a4:	1947c83a 	sub	r3,r3,r5
200983a8:	3909883a 	add	r4,r7,r4
200983ac:	2209883a 	add	r4,r4,r8
200983b0:	354d383a 	mul	r6,r6,r21
200983b4:	21c0022e 	bgeu	r4,r7,200983c0 <__udivdi3+0x414>
200983b8:	01400074 	movhi	r5,1
200983bc:	314d883a 	add	r6,r6,r5
200983c0:	202ad43a 	srli	r21,r4,16
200983c4:	354d883a 	add	r6,r6,r21
200983c8:	19803f36 	bltu	r3,r6,200984c8 <__udivdi3+0x51c>
200983cc:	19803926 	beq	r3,r6,200984b4 <__udivdi3+0x508>
200983d0:	0007883a 	mov	r3,zero
200983d4:	003fa006 	br	20098258 <__flash_rwdata_start+0xffff9684>
200983d8:	90e4983a 	sll	r18,r18,r3
200983dc:	80aad83a 	srl	r21,r16,r2
200983e0:	80e0983a 	sll	r16,r16,r3
200983e4:	9028d43a 	srli	r20,r18,16
200983e8:	9884d83a 	srl	r2,r19,r2
200983ec:	a809883a 	mov	r4,r21
200983f0:	a00b883a 	mov	r5,r20
200983f4:	80acb03a 	or	r22,r16,r2
200983f8:	98e2983a 	sll	r17,r19,r3
200983fc:	0088a7c0 	call	20088a7c <__umodsi3>
20098400:	a809883a 	mov	r4,r21
20098404:	a00b883a 	mov	r5,r20
20098408:	1021883a 	mov	r16,r2
2009840c:	0088a740 	call	20088a74 <__udivsi3>
20098410:	957fffcc 	andi	r21,r18,65535
20098414:	8020943a 	slli	r16,r16,16
20098418:	b00ad43a 	srli	r5,r22,16
2009841c:	1567383a 	mul	r19,r2,r21
20098420:	102f883a 	mov	r23,r2
20098424:	8148b03a 	or	r4,r16,r5
20098428:	24c0062e 	bgeu	r4,r19,20098444 <__udivdi3+0x498>
2009842c:	2489883a 	add	r4,r4,r18
20098430:	10bfffc4 	addi	r2,r2,-1
20098434:	24804536 	bltu	r4,r18,2009854c <__udivdi3+0x5a0>
20098438:	24c0442e 	bgeu	r4,r19,2009854c <__udivdi3+0x5a0>
2009843c:	bdffff84 	addi	r23,r23,-2
20098440:	2489883a 	add	r4,r4,r18
20098444:	24e7c83a 	sub	r19,r4,r19
20098448:	9809883a 	mov	r4,r19
2009844c:	a00b883a 	mov	r5,r20
20098450:	0088a7c0 	call	20088a7c <__umodsi3>
20098454:	1021883a 	mov	r16,r2
20098458:	9809883a 	mov	r4,r19
2009845c:	a00b883a 	mov	r5,r20
20098460:	0088a740 	call	20088a74 <__udivsi3>
20098464:	8020943a 	slli	r16,r16,16
20098468:	1007883a 	mov	r3,r2
2009846c:	1545383a 	mul	r2,r2,r21
20098470:	b13fffcc 	andi	r4,r22,65535
20098474:	8108b03a 	or	r4,r16,r4
20098478:	2080062e 	bgeu	r4,r2,20098494 <__udivdi3+0x4e8>
2009847c:	2489883a 	add	r4,r4,r18
20098480:	197fffc4 	addi	r5,r3,-1
20098484:	24802f36 	bltu	r4,r18,20098544 <__udivdi3+0x598>
20098488:	20802e2e 	bgeu	r4,r2,20098544 <__udivdi3+0x598>
2009848c:	18ffff84 	addi	r3,r3,-2
20098490:	2489883a 	add	r4,r4,r18
20098494:	b82e943a 	slli	r23,r23,16
20098498:	20a1c83a 	sub	r16,r4,r2
2009849c:	1dc6b03a 	or	r3,r3,r23
200984a0:	003f4006 	br	200981a4 <__flash_rwdata_start+0xffff95d0>
200984a4:	2005883a 	mov	r2,r4
200984a8:	003f6606 	br	20098244 <__flash_rwdata_start+0xffff9670>
200984ac:	1805883a 	mov	r2,r3
200984b0:	003f0a06 	br	200980dc <__flash_rwdata_start+0xffff9508>
200984b4:	2006943a 	slli	r3,r4,16
200984b8:	9c88983a 	sll	r4,r19,r18
200984bc:	4a7fffcc 	andi	r9,r9,65535
200984c0:	1a47883a 	add	r3,r3,r9
200984c4:	20ffc22e 	bgeu	r4,r3,200983d0 <__flash_rwdata_start+0xffff97fc>
200984c8:	10bfffc4 	addi	r2,r2,-1
200984cc:	003fc006 	br	200983d0 <__flash_rwdata_start+0xffff97fc>
200984d0:	00c00404 	movi	r3,16
200984d4:	180b883a 	mov	r5,r3
200984d8:	003f0c06 	br	2009810c <__flash_rwdata_start+0xffff9538>
200984dc:	0007883a 	mov	r3,zero
200984e0:	000b883a 	mov	r5,zero
200984e4:	003f0906 	br	2009810c <__flash_rwdata_start+0xffff9538>
200984e8:	00800404 	movi	r2,16
200984ec:	1007883a 	mov	r3,r2
200984f0:	003ec606 	br	2009800c <__flash_rwdata_start+0xffff9438>
200984f4:	00800404 	movi	r2,16
200984f8:	1007883a 	mov	r3,r2
200984fc:	003f1c06 	br	20098170 <__flash_rwdata_start+0xffff959c>
20098500:	0005883a 	mov	r2,zero
20098504:	0007883a 	mov	r3,zero
20098508:	003f1906 	br	20098170 <__flash_rwdata_start+0xffff959c>
2009850c:	0005883a 	mov	r2,zero
20098510:	0007883a 	mov	r3,zero
20098514:	003ebd06 	br	2009800c <__flash_rwdata_start+0xffff9438>
20098518:	0007883a 	mov	r3,zero
2009851c:	00800044 	movi	r2,1
20098520:	003f4d06 	br	20098258 <__flash_rwdata_start+0xffff9684>
20098524:	197f942e 	bgeu	r3,r5,20098378 <__flash_rwdata_start+0xffff97a4>
20098528:	10bfff84 	addi	r2,r2,-2
2009852c:	1dc7883a 	add	r3,r3,r23
20098530:	003f9206 	br	2009837c <__flash_rwdata_start+0xffff97a8>
20098534:	15bf7e2e 	bgeu	r2,r22,20098330 <__flash_rwdata_start+0xffff975c>
20098538:	843fff84 	addi	r16,r16,-2
2009853c:	15c5883a 	add	r2,r2,r23
20098540:	003f7c06 	br	20098334 <__flash_rwdata_start+0xffff9760>
20098544:	2807883a 	mov	r3,r5
20098548:	003fd206 	br	20098494 <__flash_rwdata_start+0xffff98c0>
2009854c:	102f883a 	mov	r23,r2
20098550:	003fbc06 	br	20098444 <__flash_rwdata_start+0xffff9870>
20098554:	843fff84 	addi	r16,r16,-2
20098558:	2489883a 	add	r4,r4,r18
2009855c:	003f2506 	br	200981f4 <__flash_rwdata_start+0xffff9620>
20098560:	843fff84 	addi	r16,r16,-2
20098564:	1485883a 	add	r2,r2,r18
20098568:	003eca06 	br	20098094 <__flash_rwdata_start+0xffff94c0>

2009856c <__umoddi3>:
2009856c:	defff404 	addi	sp,sp,-48
20098570:	ddc00915 	stw	r23,36(sp)
20098574:	dc400315 	stw	r17,12(sp)
20098578:	dc000215 	stw	r16,8(sp)
2009857c:	dfc00b15 	stw	ra,44(sp)
20098580:	df000a15 	stw	fp,40(sp)
20098584:	dd800815 	stw	r22,32(sp)
20098588:	dd400715 	stw	r21,28(sp)
2009858c:	dd000615 	stw	r20,24(sp)
20098590:	dcc00515 	stw	r19,20(sp)
20098594:	dc800415 	stw	r18,16(sp)
20098598:	2021883a 	mov	r16,r4
2009859c:	2823883a 	mov	r17,r5
200985a0:	282f883a 	mov	r23,r5
200985a4:	3800381e 	bne	r7,zero,20098688 <__umoddi3+0x11c>
200985a8:	3027883a 	mov	r19,r6
200985ac:	2029883a 	mov	r20,r4
200985b0:	29804e2e 	bgeu	r5,r6,200986ec <__umoddi3+0x180>
200985b4:	00bfffd4 	movui	r2,65535
200985b8:	11809c36 	bltu	r2,r6,2009882c <__umoddi3+0x2c0>
200985bc:	00803fc4 	movi	r2,255
200985c0:	11813b2e 	bgeu	r2,r6,20098ab0 <__umoddi3+0x544>
200985c4:	01400204 	movi	r5,8
200985c8:	2805883a 	mov	r2,r5
200985cc:	314ad83a 	srl	r5,r6,r5
200985d0:	00c00034 	movhi	r3,0
200985d4:	18c14904 	addi	r3,r3,1316
200985d8:	194b883a 	add	r5,r3,r5
200985dc:	29000003 	ldbu	r4,0(r5)
200985e0:	2089883a 	add	r4,r4,r2
200985e4:	00800804 	movi	r2,32
200985e8:	1105c83a 	sub	r2,r2,r4
200985ec:	1000ec26 	beq	r2,zero,200989a0 <__umoddi3+0x434>
200985f0:	88a2983a 	sll	r17,r17,r2
200985f4:	8108d83a 	srl	r4,r16,r4
200985f8:	30a6983a 	sll	r19,r6,r2
200985fc:	80a8983a 	sll	r20,r16,r2
20098600:	1025883a 	mov	r18,r2
20098604:	892eb03a 	or	r23,r17,r4
20098608:	982cd43a 	srli	r22,r19,16
2009860c:	b809883a 	mov	r4,r23
20098610:	9d7fffcc 	andi	r21,r19,65535
20098614:	b00b883a 	mov	r5,r22
20098618:	0088a7c0 	call	20088a7c <__umodsi3>
2009861c:	b809883a 	mov	r4,r23
20098620:	b00b883a 	mov	r5,r22
20098624:	1021883a 	mov	r16,r2
20098628:	0088a740 	call	20088a74 <__udivsi3>
2009862c:	8020943a 	slli	r16,r16,16
20098630:	a00cd43a 	srli	r6,r20,16
20098634:	1545383a 	mul	r2,r2,r21
20098638:	8188b03a 	or	r4,r16,r6
2009863c:	2080042e 	bgeu	r4,r2,20098650 <__umoddi3+0xe4>
20098640:	24c9883a 	add	r4,r4,r19
20098644:	24c00236 	bltu	r4,r19,20098650 <__umoddi3+0xe4>
20098648:	2080012e 	bgeu	r4,r2,20098650 <__umoddi3+0xe4>
2009864c:	24c9883a 	add	r4,r4,r19
20098650:	20a3c83a 	sub	r17,r4,r2
20098654:	8809883a 	mov	r4,r17
20098658:	b00b883a 	mov	r5,r22
2009865c:	0088a7c0 	call	20088a7c <__umodsi3>
20098660:	8809883a 	mov	r4,r17
20098664:	b00b883a 	mov	r5,r22
20098668:	1021883a 	mov	r16,r2
2009866c:	0088a740 	call	20088a74 <__udivsi3>
20098670:	8006943a 	slli	r3,r16,16
20098674:	1545383a 	mul	r2,r2,r21
20098678:	a13fffcc 	andi	r4,r20,65535
2009867c:	1906b03a 	or	r3,r3,r4
20098680:	1880532e 	bgeu	r3,r2,200987d0 <__umoddi3+0x264>
20098684:	00004e06 	br	200987c0 <__umoddi3+0x254>
20098688:	29c05536 	bltu	r5,r7,200987e0 <__umoddi3+0x274>
2009868c:	00bfffd4 	movui	r2,65535
20098690:	11c0612e 	bgeu	r2,r7,20098818 <__umoddi3+0x2ac>
20098694:	00804034 	movhi	r2,256
20098698:	10bfffc4 	addi	r2,r2,-1
2009869c:	11c0f82e 	bgeu	r2,r7,20098a80 <__umoddi3+0x514>
200986a0:	01400604 	movi	r5,24
200986a4:	282b883a 	mov	r21,r5
200986a8:	394ad83a 	srl	r5,r7,r5
200986ac:	00c00034 	movhi	r3,0
200986b0:	18c14904 	addi	r3,r3,1316
200986b4:	194b883a 	add	r5,r3,r5
200986b8:	28800003 	ldbu	r2,0(r5)
200986bc:	00c00804 	movi	r3,32
200986c0:	156b883a 	add	r21,r2,r21
200986c4:	1d69c83a 	sub	r20,r3,r21
200986c8:	a000631e 	bne	r20,zero,20098858 <__umoddi3+0x2ec>
200986cc:	3c400136 	bltu	r7,r17,200986d4 <__umoddi3+0x168>
200986d0:	81810436 	bltu	r16,r6,20098ae4 <__umoddi3+0x578>
200986d4:	8185c83a 	sub	r2,r16,r6
200986d8:	89e3c83a 	sub	r17,r17,r7
200986dc:	8087803a 	cmpltu	r3,r16,r2
200986e0:	88efc83a 	sub	r23,r17,r3
200986e4:	b807883a 	mov	r3,r23
200986e8:	00003f06 	br	200987e8 <__umoddi3+0x27c>
200986ec:	3000041e 	bne	r6,zero,20098700 <__umoddi3+0x194>
200986f0:	01000044 	movi	r4,1
200986f4:	000b883a 	mov	r5,zero
200986f8:	0088a740 	call	20088a74 <__udivsi3>
200986fc:	1027883a 	mov	r19,r2
20098700:	00bfffd4 	movui	r2,65535
20098704:	14c04f2e 	bgeu	r2,r19,20098844 <__umoddi3+0x2d8>
20098708:	00804034 	movhi	r2,256
2009870c:	10bfffc4 	addi	r2,r2,-1
20098710:	14c0e42e 	bgeu	r2,r19,20098aa4 <__umoddi3+0x538>
20098714:	00800604 	movi	r2,24
20098718:	1007883a 	mov	r3,r2
2009871c:	9884d83a 	srl	r2,r19,r2
20098720:	01000034 	movhi	r4,0
20098724:	21014904 	addi	r4,r4,1316
20098728:	2085883a 	add	r2,r4,r2
2009872c:	11000003 	ldbu	r4,0(r2)
20098730:	00800804 	movi	r2,32
20098734:	20c7883a 	add	r3,r4,r3
20098738:	10c5c83a 	sub	r2,r2,r3
2009873c:	10009a1e 	bne	r2,zero,200989a8 <__umoddi3+0x43c>
20098740:	982cd43a 	srli	r22,r19,16
20098744:	8ce3c83a 	sub	r17,r17,r19
20098748:	9c3fffcc 	andi	r16,r19,65535
2009874c:	0025883a 	mov	r18,zero
20098750:	8809883a 	mov	r4,r17
20098754:	b00b883a 	mov	r5,r22
20098758:	0088a7c0 	call	20088a7c <__umodsi3>
2009875c:	8809883a 	mov	r4,r17
20098760:	b00b883a 	mov	r5,r22
20098764:	102b883a 	mov	r21,r2
20098768:	0088a740 	call	20088a74 <__udivsi3>
2009876c:	a806943a 	slli	r3,r21,16
20098770:	a008d43a 	srli	r4,r20,16
20098774:	1405383a 	mul	r2,r2,r16
20098778:	190cb03a 	or	r6,r3,r4
2009877c:	3080032e 	bgeu	r6,r2,2009878c <__umoddi3+0x220>
20098780:	34cd883a 	add	r6,r6,r19
20098784:	34c00136 	bltu	r6,r19,2009878c <__umoddi3+0x220>
20098788:	3080d436 	bltu	r6,r2,20098adc <__umoddi3+0x570>
2009878c:	30abc83a 	sub	r21,r6,r2
20098790:	a809883a 	mov	r4,r21
20098794:	b00b883a 	mov	r5,r22
20098798:	0088a7c0 	call	20088a7c <__umodsi3>
2009879c:	1023883a 	mov	r17,r2
200987a0:	a809883a 	mov	r4,r21
200987a4:	b00b883a 	mov	r5,r22
200987a8:	0088a740 	call	20088a74 <__udivsi3>
200987ac:	8822943a 	slli	r17,r17,16
200987b0:	1405383a 	mul	r2,r2,r16
200987b4:	a13fffcc 	andi	r4,r20,65535
200987b8:	8906b03a 	or	r3,r17,r4
200987bc:	1880042e 	bgeu	r3,r2,200987d0 <__umoddi3+0x264>
200987c0:	1cc7883a 	add	r3,r3,r19
200987c4:	1cc00236 	bltu	r3,r19,200987d0 <__umoddi3+0x264>
200987c8:	1880012e 	bgeu	r3,r2,200987d0 <__umoddi3+0x264>
200987cc:	1cc7883a 	add	r3,r3,r19
200987d0:	1887c83a 	sub	r3,r3,r2
200987d4:	1c84d83a 	srl	r2,r3,r18
200987d8:	0007883a 	mov	r3,zero
200987dc:	00000206 	br	200987e8 <__umoddi3+0x27c>
200987e0:	2005883a 	mov	r2,r4
200987e4:	2807883a 	mov	r3,r5
200987e8:	dfc00b17 	ldw	ra,44(sp)
200987ec:	df000a17 	ldw	fp,40(sp)
200987f0:	ddc00917 	ldw	r23,36(sp)
200987f4:	dd800817 	ldw	r22,32(sp)
200987f8:	dd400717 	ldw	r21,28(sp)
200987fc:	dd000617 	ldw	r20,24(sp)
20098800:	dcc00517 	ldw	r19,20(sp)
20098804:	dc800417 	ldw	r18,16(sp)
20098808:	dc400317 	ldw	r17,12(sp)
2009880c:	dc000217 	ldw	r16,8(sp)
20098810:	dec00c04 	addi	sp,sp,48
20098814:	f800283a 	ret
20098818:	00803fc4 	movi	r2,255
2009881c:	11c0952e 	bgeu	r2,r7,20098a74 <__umoddi3+0x508>
20098820:	01400204 	movi	r5,8
20098824:	282b883a 	mov	r21,r5
20098828:	003f9f06 	br	200986a8 <__flash_rwdata_start+0xffff9ad4>
2009882c:	00804034 	movhi	r2,256
20098830:	10bfffc4 	addi	r2,r2,-1
20098834:	1180952e 	bgeu	r2,r6,20098a8c <__umoddi3+0x520>
20098838:	01400604 	movi	r5,24
2009883c:	2805883a 	mov	r2,r5
20098840:	003f6206 	br	200985cc <__flash_rwdata_start+0xffff99f8>
20098844:	00803fc4 	movi	r2,255
20098848:	14c0932e 	bgeu	r2,r19,20098a98 <__umoddi3+0x52c>
2009884c:	00800204 	movi	r2,8
20098850:	1007883a 	mov	r3,r2
20098854:	003fb106 	br	2009871c <__flash_rwdata_start+0xffff9b48>
20098858:	3548d83a 	srl	r4,r6,r21
2009885c:	3d0e983a 	sll	r7,r7,r20
20098860:	8d10983a 	sll	r8,r17,r20
20098864:	8d6cd83a 	srl	r22,r17,r21
20098868:	3922b03a 	or	r17,r7,r4
2009886c:	882ed43a 	srli	r23,r17,16
20098870:	8564d83a 	srl	r18,r16,r21
20098874:	b009883a 	mov	r4,r22
20098878:	b80b883a 	mov	r5,r23
2009887c:	44a4b03a 	or	r18,r8,r18
20098880:	3526983a 	sll	r19,r6,r20
20098884:	0088a7c0 	call	20088a7c <__umodsi3>
20098888:	b009883a 	mov	r4,r22
2009888c:	b80b883a 	mov	r5,r23
20098890:	1039883a 	mov	fp,r2
20098894:	0088a740 	call	20088a74 <__udivsi3>
20098898:	102d883a 	mov	r22,r2
2009889c:	8a3fffcc 	andi	r8,r17,65535
200988a0:	e004943a 	slli	r2,fp,16
200988a4:	900cd43a 	srli	r6,r18,16
200988a8:	b239383a 	mul	fp,r22,r8
200988ac:	8520983a 	sll	r16,r16,r20
200988b0:	118ab03a 	or	r5,r2,r6
200988b4:	2f00042e 	bgeu	r5,fp,200988c8 <__umoddi3+0x35c>
200988b8:	2c4b883a 	add	r5,r5,r17
200988bc:	b0bfffc4 	addi	r2,r22,-1
200988c0:	2c40822e 	bgeu	r5,r17,20098acc <__umoddi3+0x560>
200988c4:	102d883a 	mov	r22,r2
200988c8:	2f39c83a 	sub	fp,r5,fp
200988cc:	e009883a 	mov	r4,fp
200988d0:	b80b883a 	mov	r5,r23
200988d4:	da000115 	stw	r8,4(sp)
200988d8:	0088a7c0 	call	20088a7c <__umodsi3>
200988dc:	e009883a 	mov	r4,fp
200988e0:	b80b883a 	mov	r5,r23
200988e4:	d8800015 	stw	r2,0(sp)
200988e8:	0088a740 	call	20088a74 <__udivsi3>
200988ec:	d9800017 	ldw	r6,0(sp)
200988f0:	da000117 	ldw	r8,4(sp)
200988f4:	94bfffcc 	andi	r18,r18,65535
200988f8:	300c943a 	slli	r6,r6,16
200988fc:	1209383a 	mul	r4,r2,r8
20098900:	3490b03a 	or	r8,r6,r18
20098904:	4100042e 	bgeu	r8,r4,20098918 <__umoddi3+0x3ac>
20098908:	4451883a 	add	r8,r8,r17
2009890c:	10ffffc4 	addi	r3,r2,-1
20098910:	44406a2e 	bgeu	r8,r17,20098abc <__umoddi3+0x550>
20098914:	1805883a 	mov	r2,r3
20098918:	b012943a 	slli	r9,r22,16
2009891c:	9abfffcc 	andi	r10,r19,65535
20098920:	980ed43a 	srli	r7,r19,16
20098924:	124ab03a 	or	r5,r2,r9
20098928:	2a7fffcc 	andi	r9,r5,65535
2009892c:	280ad43a 	srli	r5,r5,16
20098930:	4a8d383a 	mul	r6,r9,r10
20098934:	49d3383a 	mul	r9,r9,r7
20098938:	2a95383a 	mul	r10,r5,r10
2009893c:	3004d43a 	srli	r2,r6,16
20098940:	4111c83a 	sub	r8,r8,r4
20098944:	5253883a 	add	r9,r10,r9
20098948:	4893883a 	add	r9,r9,r2
2009894c:	29cb383a 	mul	r5,r5,r7
20098950:	4a80022e 	bgeu	r9,r10,2009895c <__umoddi3+0x3f0>
20098954:	00800074 	movhi	r2,1
20098958:	288b883a 	add	r5,r5,r2
2009895c:	4808d43a 	srli	r4,r9,16
20098960:	4812943a 	slli	r9,r9,16
20098964:	31bfffcc 	andi	r6,r6,65535
20098968:	290b883a 	add	r5,r5,r4
2009896c:	498d883a 	add	r6,r9,r6
20098970:	41403a36 	bltu	r8,r5,20098a5c <__umoddi3+0x4f0>
20098974:	41405d26 	beq	r8,r5,20098aec <__umoddi3+0x580>
20098978:	4149c83a 	sub	r4,r8,r5
2009897c:	300f883a 	mov	r7,r6
20098980:	81cfc83a 	sub	r7,r16,r7
20098984:	81c7803a 	cmpltu	r3,r16,r7
20098988:	20c7c83a 	sub	r3,r4,r3
2009898c:	1d44983a 	sll	r2,r3,r21
20098990:	3d0ed83a 	srl	r7,r7,r20
20098994:	1d06d83a 	srl	r3,r3,r20
20098998:	11c4b03a 	or	r2,r2,r7
2009899c:	003f9206 	br	200987e8 <__flash_rwdata_start+0xffff9c14>
200989a0:	0025883a 	mov	r18,zero
200989a4:	003f1806 	br	20098608 <__flash_rwdata_start+0xffff9a34>
200989a8:	98a6983a 	sll	r19,r19,r2
200989ac:	88e8d83a 	srl	r20,r17,r3
200989b0:	80c6d83a 	srl	r3,r16,r3
200989b4:	982cd43a 	srli	r22,r19,16
200989b8:	88a2983a 	sll	r17,r17,r2
200989bc:	a009883a 	mov	r4,r20
200989c0:	b00b883a 	mov	r5,r22
200989c4:	88eab03a 	or	r21,r17,r3
200989c8:	1025883a 	mov	r18,r2
200989cc:	0088a7c0 	call	20088a7c <__umodsi3>
200989d0:	a009883a 	mov	r4,r20
200989d4:	b00b883a 	mov	r5,r22
200989d8:	1023883a 	mov	r17,r2
200989dc:	0088a740 	call	20088a74 <__udivsi3>
200989e0:	9f3fffcc 	andi	fp,r19,65535
200989e4:	8822943a 	slli	r17,r17,16
200989e8:	a80ad43a 	srli	r5,r21,16
200989ec:	1705383a 	mul	r2,r2,fp
200989f0:	84a8983a 	sll	r20,r16,r18
200989f4:	8948b03a 	or	r4,r17,r5
200989f8:	2080042e 	bgeu	r4,r2,20098a0c <__umoddi3+0x4a0>
200989fc:	24c9883a 	add	r4,r4,r19
20098a00:	24c00236 	bltu	r4,r19,20098a0c <__umoddi3+0x4a0>
20098a04:	2080012e 	bgeu	r4,r2,20098a0c <__umoddi3+0x4a0>
20098a08:	24c9883a 	add	r4,r4,r19
20098a0c:	20afc83a 	sub	r23,r4,r2
20098a10:	b809883a 	mov	r4,r23
20098a14:	b00b883a 	mov	r5,r22
20098a18:	0088a7c0 	call	20088a7c <__umodsi3>
20098a1c:	1023883a 	mov	r17,r2
20098a20:	b809883a 	mov	r4,r23
20098a24:	b00b883a 	mov	r5,r22
20098a28:	0088a740 	call	20088a74 <__udivsi3>
20098a2c:	8822943a 	slli	r17,r17,16
20098a30:	1705383a 	mul	r2,r2,fp
20098a34:	a93fffcc 	andi	r4,r21,65535
20098a38:	8908b03a 	or	r4,r17,r4
20098a3c:	2080042e 	bgeu	r4,r2,20098a50 <__umoddi3+0x4e4>
20098a40:	24c9883a 	add	r4,r4,r19
20098a44:	24c00236 	bltu	r4,r19,20098a50 <__umoddi3+0x4e4>
20098a48:	2080012e 	bgeu	r4,r2,20098a50 <__umoddi3+0x4e4>
20098a4c:	24c9883a 	add	r4,r4,r19
20098a50:	20a3c83a 	sub	r17,r4,r2
20098a54:	e021883a 	mov	r16,fp
20098a58:	003f3d06 	br	20098750 <__flash_rwdata_start+0xffff9b7c>
20098a5c:	34cfc83a 	sub	r7,r6,r19
20098a60:	2c4bc83a 	sub	r5,r5,r17
20098a64:	31cd803a 	cmpltu	r6,r6,r7
20098a68:	298dc83a 	sub	r6,r5,r6
20098a6c:	4189c83a 	sub	r4,r8,r6
20098a70:	003fc306 	br	20098980 <__flash_rwdata_start+0xffff9dac>
20098a74:	000b883a 	mov	r5,zero
20098a78:	002b883a 	mov	r21,zero
20098a7c:	003f0a06 	br	200986a8 <__flash_rwdata_start+0xffff9ad4>
20098a80:	01400404 	movi	r5,16
20098a84:	282b883a 	mov	r21,r5
20098a88:	003f0706 	br	200986a8 <__flash_rwdata_start+0xffff9ad4>
20098a8c:	01400404 	movi	r5,16
20098a90:	2805883a 	mov	r2,r5
20098a94:	003ecd06 	br	200985cc <__flash_rwdata_start+0xffff99f8>
20098a98:	0005883a 	mov	r2,zero
20098a9c:	0007883a 	mov	r3,zero
20098aa0:	003f1e06 	br	2009871c <__flash_rwdata_start+0xffff9b48>
20098aa4:	00800404 	movi	r2,16
20098aa8:	1007883a 	mov	r3,r2
20098aac:	003f1b06 	br	2009871c <__flash_rwdata_start+0xffff9b48>
20098ab0:	000b883a 	mov	r5,zero
20098ab4:	0005883a 	mov	r2,zero
20098ab8:	003ec406 	br	200985cc <__flash_rwdata_start+0xffff99f8>
20098abc:	413f952e 	bgeu	r8,r4,20098914 <__flash_rwdata_start+0xffff9d40>
20098ac0:	10bfff84 	addi	r2,r2,-2
20098ac4:	4451883a 	add	r8,r8,r17
20098ac8:	003f9306 	br	20098918 <__flash_rwdata_start+0xffff9d44>
20098acc:	2f3f7d2e 	bgeu	r5,fp,200988c4 <__flash_rwdata_start+0xffff9cf0>
20098ad0:	b5bfff84 	addi	r22,r22,-2
20098ad4:	2c4b883a 	add	r5,r5,r17
20098ad8:	003f7b06 	br	200988c8 <__flash_rwdata_start+0xffff9cf4>
20098adc:	34cd883a 	add	r6,r6,r19
20098ae0:	003f2a06 	br	2009878c <__flash_rwdata_start+0xffff9bb8>
20098ae4:	8005883a 	mov	r2,r16
20098ae8:	003efe06 	br	200986e4 <__flash_rwdata_start+0xffff9b10>
20098aec:	81bfdb36 	bltu	r16,r6,20098a5c <__flash_rwdata_start+0xffff9e88>
20098af0:	300f883a 	mov	r7,r6
20098af4:	0009883a 	mov	r4,zero
20098af8:	003fa106 	br	20098980 <__flash_rwdata_start+0xffff9dac>

20098afc <__eqdf2>:
20098afc:	2804d53a 	srli	r2,r5,20
20098b00:	3806d53a 	srli	r3,r7,20
20098b04:	02000434 	movhi	r8,16
20098b08:	423fffc4 	addi	r8,r8,-1
20098b0c:	1081ffcc 	andi	r2,r2,2047
20098b10:	0241ffc4 	movi	r9,2047
20098b14:	2a14703a 	and	r10,r5,r8
20098b18:	18c1ffcc 	andi	r3,r3,2047
20098b1c:	3a10703a 	and	r8,r7,r8
20098b20:	280ad7fa 	srli	r5,r5,31
20098b24:	380ed7fa 	srli	r7,r7,31
20098b28:	12400f26 	beq	r2,r9,20098b68 <__eqdf2+0x6c>
20098b2c:	0241ffc4 	movi	r9,2047
20098b30:	1a400326 	beq	r3,r9,20098b40 <__eqdf2+0x44>
20098b34:	10c00526 	beq	r2,r3,20098b4c <__eqdf2+0x50>
20098b38:	00800044 	movi	r2,1
20098b3c:	f800283a 	ret
20098b40:	4192b03a 	or	r9,r8,r6
20098b44:	483ffc1e 	bne	r9,zero,20098b38 <__flash_rwdata_start+0xffff9f64>
20098b48:	10fffb1e 	bne	r2,r3,20098b38 <__flash_rwdata_start+0xffff9f64>
20098b4c:	523ffa1e 	bne	r10,r8,20098b38 <__flash_rwdata_start+0xffff9f64>
20098b50:	21bff91e 	bne	r4,r6,20098b38 <__flash_rwdata_start+0xffff9f64>
20098b54:	29c00826 	beq	r5,r7,20098b78 <__eqdf2+0x7c>
20098b58:	103ff71e 	bne	r2,zero,20098b38 <__flash_rwdata_start+0xffff9f64>
20098b5c:	5104b03a 	or	r2,r10,r4
20098b60:	1004c03a 	cmpne	r2,r2,zero
20098b64:	f800283a 	ret
20098b68:	5112b03a 	or	r9,r10,r4
20098b6c:	483fef26 	beq	r9,zero,20098b2c <__flash_rwdata_start+0xffff9f58>
20098b70:	00800044 	movi	r2,1
20098b74:	f800283a 	ret
20098b78:	0005883a 	mov	r2,zero
20098b7c:	f800283a 	ret

20098b80 <__gedf2>:
20098b80:	2804d53a 	srli	r2,r5,20
20098b84:	3806d53a 	srli	r3,r7,20
20098b88:	02000434 	movhi	r8,16
20098b8c:	423fffc4 	addi	r8,r8,-1
20098b90:	0241ffc4 	movi	r9,2047
20098b94:	1081ffcc 	andi	r2,r2,2047
20098b98:	2a14703a 	and	r10,r5,r8
20098b9c:	1a46703a 	and	r3,r3,r9
20098ba0:	3a10703a 	and	r8,r7,r8
20098ba4:	280ad7fa 	srli	r5,r5,31
20098ba8:	380ed7fa 	srli	r7,r7,31
20098bac:	12400b26 	beq	r2,r9,20098bdc <__gedf2+0x5c>
20098bb0:	1a401626 	beq	r3,r9,20098c0c <__gedf2+0x8c>
20098bb4:	10000c1e 	bne	r2,zero,20098be8 <__gedf2+0x68>
20098bb8:	5112b03a 	or	r9,r10,r4
20098bbc:	4813003a 	cmpeq	r9,r9,zero
20098bc0:	4817883a 	mov	r11,r9
20098bc4:	18000c1e 	bne	r3,zero,20098bf8 <__gedf2+0x78>
20098bc8:	4198b03a 	or	r12,r8,r6
20098bcc:	60000a1e 	bne	r12,zero,20098bf8 <__gedf2+0x78>
20098bd0:	48001326 	beq	r9,zero,20098c20 <__gedf2+0xa0>
20098bd4:	0005883a 	mov	r2,zero
20098bd8:	f800283a 	ret
20098bdc:	5112b03a 	or	r9,r10,r4
20098be0:	4800191e 	bne	r9,zero,20098c48 <__gedf2+0xc8>
20098be4:	18800926 	beq	r3,r2,20098c0c <__gedf2+0x8c>
20098be8:	18000b1e 	bne	r3,zero,20098c18 <__gedf2+0x98>
20098bec:	4192b03a 	or	r9,r8,r6
20098bf0:	0017883a 	mov	r11,zero
20098bf4:	48000a26 	beq	r9,zero,20098c20 <__gedf2+0xa0>
20098bf8:	39c03fcc 	andi	r7,r7,255
20098bfc:	58000726 	beq	r11,zero,20098c1c <__gedf2+0x9c>
20098c00:	3800081e 	bne	r7,zero,20098c24 <__gedf2+0xa4>
20098c04:	00bfffc4 	movi	r2,-1
20098c08:	f800283a 	ret
20098c0c:	4192b03a 	or	r9,r8,r6
20098c10:	48000d1e 	bne	r9,zero,20098c48 <__gedf2+0xc8>
20098c14:	103fe826 	beq	r2,zero,20098bb8 <__flash_rwdata_start+0xffff9fe4>
20098c18:	39c03fcc 	andi	r7,r7,255
20098c1c:	29c00326 	beq	r5,r7,20098c2c <__gedf2+0xac>
20098c20:	283ff81e 	bne	r5,zero,20098c04 <__flash_rwdata_start+0xffffa030>
20098c24:	00800044 	movi	r2,1
20098c28:	f800283a 	ret
20098c2c:	18bffc16 	blt	r3,r2,20098c20 <__flash_rwdata_start+0xffffa04c>
20098c30:	10c00316 	blt	r2,r3,20098c40 <__gedf2+0xc0>
20098c34:	42bffa36 	bltu	r8,r10,20098c20 <__flash_rwdata_start+0xffffa04c>
20098c38:	52000526 	beq	r10,r8,20098c50 <__gedf2+0xd0>
20098c3c:	523fe52e 	bgeu	r10,r8,20098bd4 <__flash_rwdata_start+0xffffa000>
20098c40:	283ff026 	beq	r5,zero,20098c04 <__flash_rwdata_start+0xffffa030>
20098c44:	003ff706 	br	20098c24 <__flash_rwdata_start+0xffffa050>
20098c48:	00bfff84 	movi	r2,-2
20098c4c:	f800283a 	ret
20098c50:	313ff336 	bltu	r6,r4,20098c20 <__flash_rwdata_start+0xffffa04c>
20098c54:	21bfdf2e 	bgeu	r4,r6,20098bd4 <__flash_rwdata_start+0xffffa000>
20098c58:	283fea26 	beq	r5,zero,20098c04 <__flash_rwdata_start+0xffffa030>
20098c5c:	003ff106 	br	20098c24 <__flash_rwdata_start+0xffffa050>

20098c60 <__ledf2>:
20098c60:	2804d53a 	srli	r2,r5,20
20098c64:	3810d53a 	srli	r8,r7,20
20098c68:	00c00434 	movhi	r3,16
20098c6c:	18ffffc4 	addi	r3,r3,-1
20098c70:	0241ffc4 	movi	r9,2047
20098c74:	1081ffcc 	andi	r2,r2,2047
20098c78:	28d4703a 	and	r10,r5,r3
20098c7c:	4250703a 	and	r8,r8,r9
20098c80:	38c6703a 	and	r3,r7,r3
20098c84:	280ad7fa 	srli	r5,r5,31
20098c88:	380ed7fa 	srli	r7,r7,31
20098c8c:	12400b26 	beq	r2,r9,20098cbc <__ledf2+0x5c>
20098c90:	42401926 	beq	r8,r9,20098cf8 <__ledf2+0x98>
20098c94:	10000c1e 	bne	r2,zero,20098cc8 <__ledf2+0x68>
20098c98:	5112b03a 	or	r9,r10,r4
20098c9c:	4813003a 	cmpeq	r9,r9,zero
20098ca0:	4817883a 	mov	r11,r9
20098ca4:	40000f26 	beq	r8,zero,20098ce4 <__ledf2+0x84>
20098ca8:	39c03fcc 	andi	r7,r7,255
20098cac:	58001826 	beq	r11,zero,20098d10 <__ledf2+0xb0>
20098cb0:	38000a1e 	bne	r7,zero,20098cdc <__ledf2+0x7c>
20098cb4:	00bfffc4 	movi	r2,-1
20098cb8:	f800283a 	ret
20098cbc:	5112b03a 	or	r9,r10,r4
20098cc0:	48000f1e 	bne	r9,zero,20098d00 <__ledf2+0xa0>
20098cc4:	40800c26 	beq	r8,r2,20098cf8 <__ledf2+0x98>
20098cc8:	4000101e 	bne	r8,zero,20098d0c <__ledf2+0xac>
20098ccc:	1992b03a 	or	r9,r3,r6
20098cd0:	0017883a 	mov	r11,zero
20098cd4:	483ff41e 	bne	r9,zero,20098ca8 <__flash_rwdata_start+0xffffa0d4>
20098cd8:	283ff61e 	bne	r5,zero,20098cb4 <__flash_rwdata_start+0xffffa0e0>
20098cdc:	00800044 	movi	r2,1
20098ce0:	f800283a 	ret
20098ce4:	1998b03a 	or	r12,r3,r6
20098ce8:	603fef1e 	bne	r12,zero,20098ca8 <__flash_rwdata_start+0xffffa0d4>
20098cec:	483ffa26 	beq	r9,zero,20098cd8 <__flash_rwdata_start+0xffffa104>
20098cf0:	0005883a 	mov	r2,zero
20098cf4:	f800283a 	ret
20098cf8:	1992b03a 	or	r9,r3,r6
20098cfc:	48000226 	beq	r9,zero,20098d08 <__ledf2+0xa8>
20098d00:	00800084 	movi	r2,2
20098d04:	f800283a 	ret
20098d08:	103fe326 	beq	r2,zero,20098c98 <__flash_rwdata_start+0xffffa0c4>
20098d0c:	39c03fcc 	andi	r7,r7,255
20098d10:	29fff11e 	bne	r5,r7,20098cd8 <__flash_rwdata_start+0xffffa104>
20098d14:	40bff016 	blt	r8,r2,20098cd8 <__flash_rwdata_start+0xffffa104>
20098d18:	12000316 	blt	r2,r8,20098d28 <__ledf2+0xc8>
20098d1c:	1abfee36 	bltu	r3,r10,20098cd8 <__flash_rwdata_start+0xffffa104>
20098d20:	50c00326 	beq	r10,r3,20098d30 <__ledf2+0xd0>
20098d24:	50fff22e 	bgeu	r10,r3,20098cf0 <__flash_rwdata_start+0xffffa11c>
20098d28:	283fe226 	beq	r5,zero,20098cb4 <__flash_rwdata_start+0xffffa0e0>
20098d2c:	003feb06 	br	20098cdc <__flash_rwdata_start+0xffffa108>
20098d30:	313fe936 	bltu	r6,r4,20098cd8 <__flash_rwdata_start+0xffffa104>
20098d34:	21bfee2e 	bgeu	r4,r6,20098cf0 <__flash_rwdata_start+0xffffa11c>
20098d38:	283fde26 	beq	r5,zero,20098cb4 <__flash_rwdata_start+0xffffa0e0>
20098d3c:	003fe706 	br	20098cdc <__flash_rwdata_start+0xffffa108>

20098d40 <__muldf3>:
20098d40:	defff204 	addi	sp,sp,-56
20098d44:	2804d53a 	srli	r2,r5,20
20098d48:	dd800a15 	stw	r22,40(sp)
20098d4c:	282cd7fa 	srli	r22,r5,31
20098d50:	dc000415 	stw	r16,16(sp)
20098d54:	04000434 	movhi	r16,16
20098d58:	df000c15 	stw	fp,48(sp)
20098d5c:	dd000815 	stw	r20,32(sp)
20098d60:	dcc00715 	stw	r19,28(sp)
20098d64:	dc800615 	stw	r18,24(sp)
20098d68:	dc400515 	stw	r17,20(sp)
20098d6c:	843fffc4 	addi	r16,r16,-1
20098d70:	dfc00d15 	stw	ra,52(sp)
20098d74:	ddc00b15 	stw	r23,44(sp)
20098d78:	dd400915 	stw	r21,36(sp)
20098d7c:	1501ffcc 	andi	r20,r2,2047
20098d80:	2023883a 	mov	r17,r4
20098d84:	2025883a 	mov	r18,r4
20098d88:	2c20703a 	and	r16,r5,r16
20098d8c:	b027883a 	mov	r19,r22
20098d90:	b7003fcc 	andi	fp,r22,255
20098d94:	a0005926 	beq	r20,zero,20098efc <__muldf3+0x1bc>
20098d98:	0081ffc4 	movi	r2,2047
20098d9c:	a0803426 	beq	r20,r2,20098e70 <__muldf3+0x130>
20098da0:	84000434 	orhi	r16,r16,16
20098da4:	2004d77a 	srli	r2,r4,29
20098da8:	802090fa 	slli	r16,r16,3
20098dac:	202490fa 	slli	r18,r4,3
20098db0:	a53f0044 	addi	r20,r20,-1023
20098db4:	80a0b03a 	or	r16,r16,r2
20098db8:	002b883a 	mov	r21,zero
20098dbc:	0015883a 	mov	r10,zero
20098dc0:	3812d53a 	srli	r9,r7,20
20098dc4:	3806d7fa 	srli	r3,r7,31
20098dc8:	02000434 	movhi	r8,16
20098dcc:	423fffc4 	addi	r8,r8,-1
20098dd0:	4941ffcc 	andi	r5,r9,2047
20098dd4:	302f883a 	mov	r23,r6
20098dd8:	3a22703a 	and	r17,r7,r8
20098ddc:	1ac03fcc 	andi	r11,r3,255
20098de0:	28006226 	beq	r5,zero,20098f6c <__muldf3+0x22c>
20098de4:	0081ffc4 	movi	r2,2047
20098de8:	28805a26 	beq	r5,r2,20098f54 <__muldf3+0x214>
20098dec:	8a000434 	orhi	r8,r17,16
20098df0:	3004d77a 	srli	r2,r6,29
20098df4:	401090fa 	slli	r8,r8,3
20098df8:	302e90fa 	slli	r23,r6,3
20098dfc:	297f0044 	addi	r5,r5,-1023
20098e00:	40a2b03a 	or	r17,r8,r2
20098e04:	0013883a 	mov	r9,zero
20098e08:	4d4cb03a 	or	r6,r9,r21
20098e0c:	300c90ba 	slli	r6,r6,2
20098e10:	020802b4 	movhi	r8,8202
20098e14:	42238c04 	addi	r8,r8,-29136
20098e18:	320d883a 	add	r6,r6,r8
20098e1c:	31800017 	ldw	r6,0(r6)
20098e20:	a14b883a 	add	r5,r20,r5
20098e24:	1dacf03a 	xor	r22,r3,r22
20098e28:	2b000044 	addi	r12,r5,1
20098e2c:	3000683a 	jmp	r6
20098e30:	2009906c 	andhi	zero,r4,9793
20098e34:	20099058 	cmpnei	zero,r4,9793
20098e38:	20099058 	cmpnei	zero,r4,9793
20098e3c:	20099044 	addi	zero,r4,9793
20098e40:	20098e8c 	andi	zero,r4,9786
20098e44:	20098e8c 	andi	zero,r4,9786
20098e48:	2009902c 	andhi	zero,r4,9792
20098e4c:	20099044 	addi	zero,r4,9793
20098e50:	20098e8c 	andi	zero,r4,9786
20098e54:	2009902c 	andhi	zero,r4,9792
20098e58:	20098e8c 	andi	zero,r4,9786
20098e5c:	20099044 	addi	zero,r4,9793
20098e60:	20098e90 	cmplti	zero,r4,9786
20098e64:	20098e90 	cmplti	zero,r4,9786
20098e68:	20098e90 	cmplti	zero,r4,9786
20098e6c:	20099268 	cmpgeui	zero,r4,9801
20098e70:	8104b03a 	or	r2,r16,r4
20098e74:	10006a1e 	bne	r2,zero,20099020 <__muldf3+0x2e0>
20098e78:	05400204 	movi	r21,8
20098e7c:	0021883a 	mov	r16,zero
20098e80:	0025883a 	mov	r18,zero
20098e84:	02800084 	movi	r10,2
20098e88:	003fcd06 	br	20098dc0 <__flash_rwdata_start+0xffffa1ec>
20098e8c:	b039883a 	mov	fp,r22
20098e90:	00800084 	movi	r2,2
20098e94:	50804e1e 	bne	r10,r2,20098fd0 <__muldf3+0x290>
20098e98:	e4c0004c 	andi	r19,fp,1
20098e9c:	0101ffc4 	movi	r4,2047
20098ea0:	0021883a 	mov	r16,zero
20098ea4:	0025883a 	mov	r18,zero
20098ea8:	2008953a 	slli	r4,r4,20
20098eac:	98c03fcc 	andi	r3,r19,255
20098eb0:	01400434 	movhi	r5,16
20098eb4:	297fffc4 	addi	r5,r5,-1
20098eb8:	180697fa 	slli	r3,r3,31
20098ebc:	8160703a 	and	r16,r16,r5
20098ec0:	8120b03a 	or	r16,r16,r4
20098ec4:	80c6b03a 	or	r3,r16,r3
20098ec8:	9005883a 	mov	r2,r18
20098ecc:	dfc00d17 	ldw	ra,52(sp)
20098ed0:	df000c17 	ldw	fp,48(sp)
20098ed4:	ddc00b17 	ldw	r23,44(sp)
20098ed8:	dd800a17 	ldw	r22,40(sp)
20098edc:	dd400917 	ldw	r21,36(sp)
20098ee0:	dd000817 	ldw	r20,32(sp)
20098ee4:	dcc00717 	ldw	r19,28(sp)
20098ee8:	dc800617 	ldw	r18,24(sp)
20098eec:	dc400517 	ldw	r17,20(sp)
20098ef0:	dc000417 	ldw	r16,16(sp)
20098ef4:	dec00e04 	addi	sp,sp,56
20098ef8:	f800283a 	ret
20098efc:	8104b03a 	or	r2,r16,r4
20098f00:	10004226 	beq	r2,zero,2009900c <__muldf3+0x2cc>
20098f04:	8000f926 	beq	r16,zero,200992ec <__muldf3+0x5ac>
20098f08:	8009883a 	mov	r4,r16
20098f0c:	d9800315 	stw	r6,12(sp)
20098f10:	d9c00015 	stw	r7,0(sp)
20098f14:	008b2e40 	call	2008b2e4 <__clzsi2>
20098f18:	d9800317 	ldw	r6,12(sp)
20098f1c:	d9c00017 	ldw	r7,0(sp)
20098f20:	1007883a 	mov	r3,r2
20098f24:	01000a04 	movi	r4,40
20098f28:	18bffe04 	addi	r2,r3,-8
20098f2c:	20c9c83a 	sub	r4,r4,r3
20098f30:	80a0983a 	sll	r16,r16,r2
20098f34:	8908d83a 	srl	r4,r17,r4
20098f38:	88a4983a 	sll	r18,r17,r2
20098f3c:	2420b03a 	or	r16,r4,r16
20098f40:	017f0344 	movi	r5,-1011
20098f44:	28e9c83a 	sub	r20,r5,r3
20098f48:	002b883a 	mov	r21,zero
20098f4c:	0015883a 	mov	r10,zero
20098f50:	003f9b06 	br	20098dc0 <__flash_rwdata_start+0xffffa1ec>
20098f54:	8984b03a 	or	r2,r17,r6
20098f58:	10002a1e 	bne	r2,zero,20099004 <__muldf3+0x2c4>
20098f5c:	0023883a 	mov	r17,zero
20098f60:	002f883a 	mov	r23,zero
20098f64:	02400084 	movi	r9,2
20098f68:	003fa706 	br	20098e08 <__flash_rwdata_start+0xffffa234>
20098f6c:	8984b03a 	or	r2,r17,r6
20098f70:	10002026 	beq	r2,zero,20098ff4 <__muldf3+0x2b4>
20098f74:	8800cc26 	beq	r17,zero,200992a8 <__muldf3+0x568>
20098f78:	8809883a 	mov	r4,r17
20098f7c:	d8c00215 	stw	r3,8(sp)
20098f80:	d9800315 	stw	r6,12(sp)
20098f84:	da800015 	stw	r10,0(sp)
20098f88:	dac00115 	stw	r11,4(sp)
20098f8c:	008b2e40 	call	2008b2e4 <__clzsi2>
20098f90:	d8c00217 	ldw	r3,8(sp)
20098f94:	d9800317 	ldw	r6,12(sp)
20098f98:	da800017 	ldw	r10,0(sp)
20098f9c:	dac00117 	ldw	r11,4(sp)
20098fa0:	1009883a 	mov	r4,r2
20098fa4:	01400a04 	movi	r5,40
20098fa8:	25fffe04 	addi	r23,r4,-8
20098fac:	290bc83a 	sub	r5,r5,r4
20098fb0:	8dd0983a 	sll	r8,r17,r23
20098fb4:	314ad83a 	srl	r5,r6,r5
20098fb8:	35ee983a 	sll	r23,r6,r23
20098fbc:	2a22b03a 	or	r17,r5,r8
20098fc0:	017f0344 	movi	r5,-1011
20098fc4:	290bc83a 	sub	r5,r5,r4
20098fc8:	0013883a 	mov	r9,zero
20098fcc:	003f8e06 	br	20098e08 <__flash_rwdata_start+0xffffa234>
20098fd0:	008000c4 	movi	r2,3
20098fd4:	50811d26 	beq	r10,r2,2009944c <__muldf3+0x70c>
20098fd8:	00800044 	movi	r2,1
20098fdc:	5080e01e 	bne	r10,r2,20099360 <__muldf3+0x620>
20098fe0:	e0a6703a 	and	r19,fp,r2
20098fe4:	0009883a 	mov	r4,zero
20098fe8:	0021883a 	mov	r16,zero
20098fec:	0025883a 	mov	r18,zero
20098ff0:	003fad06 	br	20098ea8 <__flash_rwdata_start+0xffffa2d4>
20098ff4:	0023883a 	mov	r17,zero
20098ff8:	002f883a 	mov	r23,zero
20098ffc:	02400044 	movi	r9,1
20099000:	003f8106 	br	20098e08 <__flash_rwdata_start+0xffffa234>
20099004:	024000c4 	movi	r9,3
20099008:	003f7f06 	br	20098e08 <__flash_rwdata_start+0xffffa234>
2009900c:	05400104 	movi	r21,4
20099010:	0021883a 	mov	r16,zero
20099014:	0025883a 	mov	r18,zero
20099018:	02800044 	movi	r10,1
2009901c:	003f6806 	br	20098dc0 <__flash_rwdata_start+0xffffa1ec>
20099020:	05400304 	movi	r21,12
20099024:	028000c4 	movi	r10,3
20099028:	003f6506 	br	20098dc0 <__flash_rwdata_start+0xffffa1ec>
2009902c:	04000434 	movhi	r16,16
20099030:	0027883a 	mov	r19,zero
20099034:	843fffc4 	addi	r16,r16,-1
20099038:	04bfffc4 	movi	r18,-1
2009903c:	0101ffc4 	movi	r4,2047
20099040:	003f9906 	br	20098ea8 <__flash_rwdata_start+0xffffa2d4>
20099044:	8821883a 	mov	r16,r17
20099048:	b825883a 	mov	r18,r23
2009904c:	5839883a 	mov	fp,r11
20099050:	4815883a 	mov	r10,r9
20099054:	003f8e06 	br	20098e90 <__flash_rwdata_start+0xffffa2bc>
20099058:	8821883a 	mov	r16,r17
2009905c:	b825883a 	mov	r18,r23
20099060:	b039883a 	mov	fp,r22
20099064:	4815883a 	mov	r10,r9
20099068:	003f8906 	br	20098e90 <__flash_rwdata_start+0xffffa2bc>
2009906c:	b80cd43a 	srli	r6,r23,16
20099070:	9006d43a 	srli	r3,r18,16
20099074:	90bfffcc 	andi	r2,r18,65535
20099078:	bdffffcc 	andi	r23,r23,65535
2009907c:	b891383a 	mul	r8,r23,r2
20099080:	b8c9383a 	mul	r4,r23,r3
20099084:	309b383a 	mul	r13,r6,r2
20099088:	400ed43a 	srli	r7,r8,16
2009908c:	30df383a 	mul	r15,r6,r3
20099090:	235b883a 	add	r13,r4,r13
20099094:	69db883a 	add	r13,r13,r7
20099098:	6900022e 	bgeu	r13,r4,200990a4 <__muldf3+0x364>
2009909c:	01000074 	movhi	r4,1
200990a0:	791f883a 	add	r15,r15,r4
200990a4:	8828d43a 	srli	r20,r17,16
200990a8:	8c7fffcc 	andi	r17,r17,65535
200990ac:	888f383a 	mul	r7,r17,r2
200990b0:	88d3383a 	mul	r9,r17,r3
200990b4:	a0a5383a 	mul	r18,r20,r2
200990b8:	3816d43a 	srli	r11,r7,16
200990bc:	6814943a 	slli	r10,r13,16
200990c0:	4ca5883a 	add	r18,r9,r18
200990c4:	423fffcc 	andi	r8,r8,65535
200990c8:	92e5883a 	add	r18,r18,r11
200990cc:	6808d43a 	srli	r4,r13,16
200990d0:	5215883a 	add	r10,r10,r8
200990d4:	a0c7383a 	mul	r3,r20,r3
200990d8:	9240022e 	bgeu	r18,r9,200990e4 <__muldf3+0x3a4>
200990dc:	00800074 	movhi	r2,1
200990e0:	1887883a 	add	r3,r3,r2
200990e4:	802ad43a 	srli	r21,r16,16
200990e8:	80bfffcc 	andi	r2,r16,65535
200990ec:	b893383a 	mul	r9,r23,r2
200990f0:	3091383a 	mul	r8,r6,r2
200990f4:	bd6f383a 	mul	r23,r23,r21
200990f8:	9026943a 	slli	r19,r18,16
200990fc:	481ad43a 	srli	r13,r9,16
20099100:	9024d43a 	srli	r18,r18,16
20099104:	39ffffcc 	andi	r7,r7,65535
20099108:	ba11883a 	add	r8,r23,r8
2009910c:	99e7883a 	add	r19,r19,r7
20099110:	4351883a 	add	r8,r8,r13
20099114:	1c97883a 	add	r11,r3,r18
20099118:	354d383a 	mul	r6,r6,r21
2009911c:	9925883a 	add	r18,r19,r4
20099120:	45c0022e 	bgeu	r8,r23,2009912c <__muldf3+0x3ec>
20099124:	00c00074 	movhi	r3,1
20099128:	30cd883a 	add	r6,r6,r3
2009912c:	8889383a 	mul	r4,r17,r2
20099130:	8d63383a 	mul	r17,r17,r21
20099134:	a085383a 	mul	r2,r20,r2
20099138:	200ed43a 	srli	r7,r4,16
2009913c:	401cd43a 	srli	r14,r8,16
20099140:	401a943a 	slli	r13,r8,16
20099144:	8885883a 	add	r2,r17,r2
20099148:	4a3fffcc 	andi	r8,r9,65535
2009914c:	11c5883a 	add	r2,r2,r7
20099150:	339d883a 	add	r14,r6,r14
20099154:	6a11883a 	add	r8,r13,r8
20099158:	a561383a 	mul	r16,r20,r21
2009915c:	1440022e 	bgeu	r2,r17,20099168 <__muldf3+0x428>
20099160:	00c00074 	movhi	r3,1
20099164:	80e1883a 	add	r16,r16,r3
20099168:	1006943a 	slli	r3,r2,16
2009916c:	213fffcc 	andi	r4,r4,65535
20099170:	93db883a 	add	r13,r18,r15
20099174:	1909883a 	add	r4,r3,r4
20099178:	22c7883a 	add	r3,r4,r11
2009917c:	6cd3803a 	cmpltu	r9,r13,r19
20099180:	6a09883a 	add	r4,r13,r8
20099184:	1a5b883a 	add	r13,r3,r9
20099188:	2211803a 	cmpltu	r8,r4,r8
2009918c:	734d883a 	add	r6,r14,r13
20099190:	100ed43a 	srli	r7,r2,16
20099194:	6a53803a 	cmpltu	r9,r13,r9
20099198:	3205883a 	add	r2,r6,r8
2009919c:	1ac7803a 	cmpltu	r3,r3,r11
200991a0:	1211803a 	cmpltu	r8,r2,r8
200991a4:	48c6b03a 	or	r3,r9,r3
200991a8:	338d803a 	cmpltu	r6,r6,r14
200991ac:	19c7883a 	add	r3,r3,r7
200991b0:	418cb03a 	or	r6,r8,r6
200991b4:	1987883a 	add	r3,r3,r6
200991b8:	2024927a 	slli	r18,r4,9
200991bc:	1c07883a 	add	r3,r3,r16
200991c0:	1806927a 	slli	r3,r3,9
200991c4:	1020d5fa 	srli	r16,r2,23
200991c8:	2008d5fa 	srli	r4,r4,23
200991cc:	9294b03a 	or	r10,r18,r10
200991d0:	1004927a 	slli	r2,r2,9
200991d4:	5024c03a 	cmpne	r18,r10,zero
200991d8:	1c20b03a 	or	r16,r3,r16
200991dc:	9108b03a 	or	r4,r18,r4
200991e0:	80c0402c 	andhi	r3,r16,256
200991e4:	20a4b03a 	or	r18,r4,r2
200991e8:	18000726 	beq	r3,zero,20099208 <__muldf3+0x4c8>
200991ec:	9006d07a 	srli	r3,r18,1
200991f0:	800897fa 	slli	r4,r16,31
200991f4:	9080004c 	andi	r2,r18,1
200991f8:	8020d07a 	srli	r16,r16,1
200991fc:	10c4b03a 	or	r2,r2,r3
20099200:	1124b03a 	or	r18,r2,r4
20099204:	600b883a 	mov	r5,r12
20099208:	2900ffc4 	addi	r4,r5,1023
2009920c:	01004b0e 	bge	zero,r4,2009933c <__muldf3+0x5fc>
20099210:	908001cc 	andi	r2,r18,7
20099214:	10000726 	beq	r2,zero,20099234 <__muldf3+0x4f4>
20099218:	90c003cc 	andi	r3,r18,15
2009921c:	00800104 	movi	r2,4
20099220:	18800426 	beq	r3,r2,20099234 <__muldf3+0x4f4>
20099224:	9087883a 	add	r3,r18,r2
20099228:	1c85803a 	cmpltu	r2,r3,r18
2009922c:	80a1883a 	add	r16,r16,r2
20099230:	1825883a 	mov	r18,r3
20099234:	8080402c 	andhi	r2,r16,256
20099238:	10000426 	beq	r2,zero,2009924c <__muldf3+0x50c>
2009923c:	00bfc034 	movhi	r2,65280
20099240:	10bfffc4 	addi	r2,r2,-1
20099244:	29010004 	addi	r4,r5,1024
20099248:	80a0703a 	and	r16,r16,r2
2009924c:	0081ff84 	movi	r2,2046
20099250:	1100320e 	bge	r2,r4,2009931c <__muldf3+0x5dc>
20099254:	b4c0004c 	andi	r19,r22,1
20099258:	0101ffc4 	movi	r4,2047
2009925c:	0021883a 	mov	r16,zero
20099260:	0025883a 	mov	r18,zero
20099264:	003f1006 	br	20098ea8 <__flash_rwdata_start+0xffffa2d4>
20099268:	8080022c 	andhi	r2,r16,8
2009926c:	10000926 	beq	r2,zero,20099294 <__muldf3+0x554>
20099270:	8880022c 	andhi	r2,r17,8
20099274:	1000071e 	bne	r2,zero,20099294 <__muldf3+0x554>
20099278:	00800434 	movhi	r2,16
2009927c:	8c000234 	orhi	r16,r17,8
20099280:	10bfffc4 	addi	r2,r2,-1
20099284:	1827883a 	mov	r19,r3
20099288:	80a0703a 	and	r16,r16,r2
2009928c:	b825883a 	mov	r18,r23
20099290:	003f6a06 	br	2009903c <__flash_rwdata_start+0xffffa468>
20099294:	00800434 	movhi	r2,16
20099298:	84000234 	orhi	r16,r16,8
2009929c:	10bfffc4 	addi	r2,r2,-1
200992a0:	80a0703a 	and	r16,r16,r2
200992a4:	003f6506 	br	2009903c <__flash_rwdata_start+0xffffa468>
200992a8:	3009883a 	mov	r4,r6
200992ac:	d8c00215 	stw	r3,8(sp)
200992b0:	d9800315 	stw	r6,12(sp)
200992b4:	da800015 	stw	r10,0(sp)
200992b8:	dac00115 	stw	r11,4(sp)
200992bc:	008b2e40 	call	2008b2e4 <__clzsi2>
200992c0:	11000804 	addi	r4,r2,32
200992c4:	014009c4 	movi	r5,39
200992c8:	d8c00217 	ldw	r3,8(sp)
200992cc:	d9800317 	ldw	r6,12(sp)
200992d0:	da800017 	ldw	r10,0(sp)
200992d4:	dac00117 	ldw	r11,4(sp)
200992d8:	293f320e 	bge	r5,r4,20098fa4 <__flash_rwdata_start+0xffffa3d0>
200992dc:	10bffe04 	addi	r2,r2,-8
200992e0:	b8a2983a 	sll	r17,r23,r2
200992e4:	002f883a 	mov	r23,zero
200992e8:	003f3506 	br	20098fc0 <__flash_rwdata_start+0xffffa3ec>
200992ec:	d9800315 	stw	r6,12(sp)
200992f0:	d9c00015 	stw	r7,0(sp)
200992f4:	008b2e40 	call	2008b2e4 <__clzsi2>
200992f8:	10c00804 	addi	r3,r2,32
200992fc:	010009c4 	movi	r4,39
20099300:	d9800317 	ldw	r6,12(sp)
20099304:	d9c00017 	ldw	r7,0(sp)
20099308:	20ff060e 	bge	r4,r3,20098f24 <__flash_rwdata_start+0xffffa350>
2009930c:	10bffe04 	addi	r2,r2,-8
20099310:	88a0983a 	sll	r16,r17,r2
20099314:	0025883a 	mov	r18,zero
20099318:	003f0906 	br	20098f40 <__flash_rwdata_start+0xffffa36c>
2009931c:	9004d0fa 	srli	r2,r18,3
20099320:	8024977a 	slli	r18,r16,29
20099324:	8020927a 	slli	r16,r16,9
20099328:	2101ffcc 	andi	r4,r4,2047
2009932c:	90a4b03a 	or	r18,r18,r2
20099330:	8020d33a 	srli	r16,r16,12
20099334:	b4c0004c 	andi	r19,r22,1
20099338:	003edb06 	br	20098ea8 <__flash_rwdata_start+0xffffa2d4>
2009933c:	00ff0084 	movi	r3,-1022
20099340:	1947c83a 	sub	r3,r3,r5
20099344:	00800e04 	movi	r2,56
20099348:	10c0080e 	bge	r2,r3,2009936c <__muldf3+0x62c>
2009934c:	b4c0004c 	andi	r19,r22,1
20099350:	0009883a 	mov	r4,zero
20099354:	0021883a 	mov	r16,zero
20099358:	0025883a 	mov	r18,zero
2009935c:	003ed206 	br	20098ea8 <__flash_rwdata_start+0xffffa2d4>
20099360:	600b883a 	mov	r5,r12
20099364:	e02d883a 	mov	r22,fp
20099368:	003fa706 	br	20099208 <__flash_rwdata_start+0xffffa634>
2009936c:	008007c4 	movi	r2,31
20099370:	10c01816 	blt	r2,r3,200993d4 <__muldf3+0x694>
20099374:	29410784 	addi	r5,r5,1054
20099378:	8144983a 	sll	r2,r16,r5
2009937c:	90c8d83a 	srl	r4,r18,r3
20099380:	914a983a 	sll	r5,r18,r5
20099384:	80c6d83a 	srl	r3,r16,r3
20099388:	2088b03a 	or	r4,r4,r2
2009938c:	2804c03a 	cmpne	r2,r5,zero
20099390:	2084b03a 	or	r2,r4,r2
20099394:	110001cc 	andi	r4,r2,7
20099398:	20000726 	beq	r4,zero,200993b8 <__muldf3+0x678>
2009939c:	114003cc 	andi	r5,r2,15
200993a0:	01000104 	movi	r4,4
200993a4:	29000426 	beq	r5,r4,200993b8 <__muldf3+0x678>
200993a8:	11000104 	addi	r4,r2,4
200993ac:	2085803a 	cmpltu	r2,r4,r2
200993b0:	1887883a 	add	r3,r3,r2
200993b4:	2005883a 	mov	r2,r4
200993b8:	1900202c 	andhi	r4,r3,128
200993bc:	20001826 	beq	r4,zero,20099420 <__muldf3+0x6e0>
200993c0:	b4c0004c 	andi	r19,r22,1
200993c4:	01000044 	movi	r4,1
200993c8:	0021883a 	mov	r16,zero
200993cc:	0025883a 	mov	r18,zero
200993d0:	003eb506 	br	20098ea8 <__flash_rwdata_start+0xffffa2d4>
200993d4:	00bef884 	movi	r2,-1054
200993d8:	1145c83a 	sub	r2,r2,r5
200993dc:	8088d83a 	srl	r4,r16,r2
200993e0:	00800804 	movi	r2,32
200993e4:	18801726 	beq	r3,r2,20099444 <__muldf3+0x704>
200993e8:	28810f84 	addi	r2,r5,1086
200993ec:	8084983a 	sll	r2,r16,r2
200993f0:	1484b03a 	or	r2,r2,r18
200993f4:	1004c03a 	cmpne	r2,r2,zero
200993f8:	1104b03a 	or	r2,r2,r4
200993fc:	10c001cc 	andi	r3,r2,7
20099400:	18000b1e 	bne	r3,zero,20099430 <__muldf3+0x6f0>
20099404:	0021883a 	mov	r16,zero
20099408:	1004d0fa 	srli	r2,r2,3
2009940c:	b4c0004c 	andi	r19,r22,1
20099410:	0009883a 	mov	r4,zero
20099414:	10e4b03a 	or	r18,r2,r3
20099418:	003ea306 	br	20098ea8 <__flash_rwdata_start+0xffffa2d4>
2009941c:	0007883a 	mov	r3,zero
20099420:	1820927a 	slli	r16,r3,9
20099424:	1806977a 	slli	r3,r3,29
20099428:	8020d33a 	srli	r16,r16,12
2009942c:	003ff606 	br	20099408 <__flash_rwdata_start+0xffffa834>
20099430:	110003cc 	andi	r4,r2,15
20099434:	00c00104 	movi	r3,4
20099438:	20fff826 	beq	r4,r3,2009941c <__flash_rwdata_start+0xffffa848>
2009943c:	0007883a 	mov	r3,zero
20099440:	003fd906 	br	200993a8 <__flash_rwdata_start+0xffffa7d4>
20099444:	0005883a 	mov	r2,zero
20099448:	003fe906 	br	200993f0 <__flash_rwdata_start+0xffffa81c>
2009944c:	00800434 	movhi	r2,16
20099450:	84000234 	orhi	r16,r16,8
20099454:	10bfffc4 	addi	r2,r2,-1
20099458:	e4c0004c 	andi	r19,fp,1
2009945c:	80a0703a 	and	r16,r16,r2
20099460:	003ef606 	br	2009903c <__flash_rwdata_start+0xffffa468>

20099464 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
20099464:	defffe04 	addi	sp,sp,-8
20099468:	dfc00115 	stw	ra,4(sp)
2009946c:	df000015 	stw	fp,0(sp)
20099470:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
20099474:	00800034 	movhi	r2,0
20099478:	108a9c04 	addi	r2,r2,10864
2009947c:	10800017 	ldw	r2,0(r2)
20099480:	10000526 	beq	r2,zero,20099498 <alt_get_errno+0x34>
20099484:	00800034 	movhi	r2,0
20099488:	108a9c04 	addi	r2,r2,10864
2009948c:	10800017 	ldw	r2,0(r2)
20099490:	103ee83a 	callr	r2
20099494:	00000206 	br	200994a0 <alt_get_errno+0x3c>
20099498:	00800034 	movhi	r2,0
2009949c:	108ab204 	addi	r2,r2,10952
}
200994a0:	e037883a 	mov	sp,fp
200994a4:	dfc00117 	ldw	ra,4(sp)
200994a8:	df000017 	ldw	fp,0(sp)
200994ac:	dec00204 	addi	sp,sp,8
200994b0:	f800283a 	ret

200994b4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
200994b4:	defffb04 	addi	sp,sp,-20
200994b8:	dfc00415 	stw	ra,16(sp)
200994bc:	df000315 	stw	fp,12(sp)
200994c0:	df000304 	addi	fp,sp,12
200994c4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
200994c8:	e0bfff17 	ldw	r2,-4(fp)
200994cc:	10000616 	blt	r2,zero,200994e8 <close+0x34>
200994d0:	e0bfff17 	ldw	r2,-4(fp)
200994d4:	10c00324 	muli	r3,r2,12
200994d8:	00800034 	movhi	r2,0
200994dc:	10856f04 	addi	r2,r2,5564
200994e0:	1885883a 	add	r2,r3,r2
200994e4:	00000106 	br	200994ec <close+0x38>
200994e8:	0005883a 	mov	r2,zero
200994ec:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
200994f0:	e0bffd17 	ldw	r2,-12(fp)
200994f4:	10001926 	beq	r2,zero,2009955c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
200994f8:	e0bffd17 	ldw	r2,-12(fp)
200994fc:	10800017 	ldw	r2,0(r2)
20099500:	10800417 	ldw	r2,16(r2)
20099504:	10000626 	beq	r2,zero,20099520 <close+0x6c>
20099508:	e0bffd17 	ldw	r2,-12(fp)
2009950c:	10800017 	ldw	r2,0(r2)
20099510:	10800417 	ldw	r2,16(r2)
20099514:	e13ffd17 	ldw	r4,-12(fp)
20099518:	103ee83a 	callr	r2
2009951c:	00000106 	br	20099524 <close+0x70>
20099520:	0005883a 	mov	r2,zero
20099524:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
20099528:	e13fff17 	ldw	r4,-4(fp)
2009952c:	0099e4c0 	call	20099e4c <alt_release_fd>
    if (rval < 0)
20099530:	e0bffe17 	ldw	r2,-8(fp)
20099534:	1000070e 	bge	r2,zero,20099554 <close+0xa0>
    {
      ALT_ERRNO = -rval;
20099538:	00994640 	call	20099464 <alt_get_errno>
2009953c:	1007883a 	mov	r3,r2
20099540:	e0bffe17 	ldw	r2,-8(fp)
20099544:	0085c83a 	sub	r2,zero,r2
20099548:	18800015 	stw	r2,0(r3)
      return -1;
2009954c:	00bfffc4 	movi	r2,-1
20099550:	00000706 	br	20099570 <close+0xbc>
    }
    return 0;
20099554:	0005883a 	mov	r2,zero
20099558:	00000506 	br	20099570 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
2009955c:	00994640 	call	20099464 <alt_get_errno>
20099560:	1007883a 	mov	r3,r2
20099564:	00801444 	movi	r2,81
20099568:	18800015 	stw	r2,0(r3)
    return -1;
2009956c:	00bfffc4 	movi	r2,-1
  }
}
20099570:	e037883a 	mov	sp,fp
20099574:	dfc00117 	ldw	ra,4(sp)
20099578:	df000017 	ldw	fp,0(sp)
2009957c:	dec00204 	addi	sp,sp,8
20099580:	f800283a 	ret

20099584 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
20099584:	defffb04 	addi	sp,sp,-20
20099588:	df000415 	stw	fp,16(sp)
2009958c:	df000404 	addi	fp,sp,16
20099590:	e13ffe15 	stw	r4,-8(fp)
20099594:	e17fff15 	stw	r5,-4(fp)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 
20099598:	e0fffe17 	ldw	r3,-8(fp)
2009959c:	e0bfff17 	ldw	r2,-4(fp)
200995a0:	1885883a 	add	r2,r3,r2
200995a4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
200995a8:	e0bffe17 	ldw	r2,-8(fp)
200995ac:	e0bffc15 	stw	r2,-16(fp)
200995b0:	00000506 	br	200995c8 <alt_dcache_flush+0x44>
  { 
    ALT_FLUSH_DATA(i); 
200995b4:	e0bffc17 	ldw	r2,-16(fp)
200995b8:	1000001b 	flushda	0(r2)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
200995bc:	e0bffc17 	ldw	r2,-16(fp)
200995c0:	10800804 	addi	r2,r2,32
200995c4:	e0bffc15 	stw	r2,-16(fp)
200995c8:	e0fffc17 	ldw	r3,-16(fp)
200995cc:	e0bffd17 	ldw	r2,-12(fp)
200995d0:	18bff836 	bltu	r3,r2,200995b4 <__flash_rwdata_start+0xffffa9e0>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_DCACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_DCACHE_LINE_SIZE - 1))
200995d4:	e0bffe17 	ldw	r2,-8(fp)
200995d8:	108007cc 	andi	r2,r2,31
200995dc:	10000226 	beq	r2,zero,200995e8 <alt_dcache_flush+0x64>
  {
    ALT_FLUSH_DATA(i);
200995e0:	e0bffc17 	ldw	r2,-16(fp)
200995e4:	1000001b 	flushda	0(r2)
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
200995e8:	e037883a 	mov	sp,fp
200995ec:	df000017 	ldw	fp,0(sp)
200995f0:	dec00104 	addi	sp,sp,4
200995f4:	f800283a 	ret

200995f8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
200995f8:	defffe04 	addi	sp,sp,-8
200995fc:	df000115 	stw	fp,4(sp)
20099600:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
20099604:	e03fff15 	stw	zero,-4(fp)
20099608:	00000506 	br	20099620 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
2009960c:	e0bfff17 	ldw	r2,-4(fp)
20099610:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
20099614:	e0bfff17 	ldw	r2,-4(fp)
20099618:	10800804 	addi	r2,r2,32
2009961c:	e0bfff15 	stw	r2,-4(fp)
20099620:	e0bfff17 	ldw	r2,-4(fp)
20099624:	10900030 	cmpltui	r2,r2,16384
20099628:	103ff81e 	bne	r2,zero,2009960c <__flash_rwdata_start+0xffffaa38>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
2009962c:	e037883a 	mov	sp,fp
20099630:	df000017 	ldw	fp,0(sp)
20099634:	dec00104 	addi	sp,sp,4
20099638:	f800283a 	ret

2009963c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
2009963c:	defffc04 	addi	sp,sp,-16
20099640:	df000315 	stw	fp,12(sp)
20099644:	df000304 	addi	fp,sp,12
20099648:	e13ffd15 	stw	r4,-12(fp)
2009964c:	e17ffe15 	stw	r5,-8(fp)
20099650:	e1bfff15 	stw	r6,-4(fp)
  return len;
20099654:	e0bfff17 	ldw	r2,-4(fp)
}
20099658:	e037883a 	mov	sp,fp
2009965c:	df000017 	ldw	fp,0(sp)
20099660:	dec00104 	addi	sp,sp,4
20099664:	f800283a 	ret

20099668 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
20099668:	defffd04 	addi	sp,sp,-12
2009966c:	df000215 	stw	fp,8(sp)
20099670:	df000204 	addi	fp,sp,8
20099674:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
20099678:	0001883a 	nop
2009967c:	e0bfff17 	ldw	r2,-4(fp)
20099680:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
20099684:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
20099688:	10000226 	beq	r2,zero,20099694 <_exit+0x2c>
    ALT_SIM_FAIL();
2009968c:	002af070 	cmpltui	zero,zero,43969
20099690:	00000106 	br	20099698 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
20099694:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
20099698:	003fff06 	br	20099698 <__flash_rwdata_start+0xffffaac4>

2009969c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2009969c:	defffe04 	addi	sp,sp,-8
200996a0:	dfc00115 	stw	ra,4(sp)
200996a4:	df000015 	stw	fp,0(sp)
200996a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
200996ac:	00800034 	movhi	r2,0
200996b0:	108a9c04 	addi	r2,r2,10864
200996b4:	10800017 	ldw	r2,0(r2)
200996b8:	10000526 	beq	r2,zero,200996d0 <alt_get_errno+0x34>
200996bc:	00800034 	movhi	r2,0
200996c0:	108a9c04 	addi	r2,r2,10864
200996c4:	10800017 	ldw	r2,0(r2)
200996c8:	103ee83a 	callr	r2
200996cc:	00000206 	br	200996d8 <alt_get_errno+0x3c>
200996d0:	00800034 	movhi	r2,0
200996d4:	108ab204 	addi	r2,r2,10952
}
200996d8:	e037883a 	mov	sp,fp
200996dc:	dfc00117 	ldw	ra,4(sp)
200996e0:	df000017 	ldw	fp,0(sp)
200996e4:	dec00204 	addi	sp,sp,8
200996e8:	f800283a 	ret

200996ec <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
200996ec:	defffb04 	addi	sp,sp,-20
200996f0:	dfc00415 	stw	ra,16(sp)
200996f4:	df000315 	stw	fp,12(sp)
200996f8:	df000304 	addi	fp,sp,12
200996fc:	e13ffe15 	stw	r4,-8(fp)
20099700:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
20099704:	e0bffe17 	ldw	r2,-8(fp)
20099708:	10000616 	blt	r2,zero,20099724 <fstat+0x38>
2009970c:	e0bffe17 	ldw	r2,-8(fp)
20099710:	10c00324 	muli	r3,r2,12
20099714:	00800034 	movhi	r2,0
20099718:	10856f04 	addi	r2,r2,5564
2009971c:	1885883a 	add	r2,r3,r2
20099720:	00000106 	br	20099728 <fstat+0x3c>
20099724:	0005883a 	mov	r2,zero
20099728:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
2009972c:	e0bffd17 	ldw	r2,-12(fp)
20099730:	10001026 	beq	r2,zero,20099774 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
20099734:	e0bffd17 	ldw	r2,-12(fp)
20099738:	10800017 	ldw	r2,0(r2)
2009973c:	10800817 	ldw	r2,32(r2)
20099740:	10000726 	beq	r2,zero,20099760 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
20099744:	e0bffd17 	ldw	r2,-12(fp)
20099748:	10800017 	ldw	r2,0(r2)
2009974c:	10800817 	ldw	r2,32(r2)
20099750:	e13ffd17 	ldw	r4,-12(fp)
20099754:	e17fff17 	ldw	r5,-4(fp)
20099758:	103ee83a 	callr	r2
2009975c:	00000a06 	br	20099788 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
20099760:	e0bfff17 	ldw	r2,-4(fp)
20099764:	00c80004 	movi	r3,8192
20099768:	10c00115 	stw	r3,4(r2)
      return 0;
2009976c:	0005883a 	mov	r2,zero
20099770:	00000506 	br	20099788 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
20099774:	009969c0 	call	2009969c <alt_get_errno>
20099778:	1007883a 	mov	r3,r2
2009977c:	00801444 	movi	r2,81
20099780:	18800015 	stw	r2,0(r3)
    return -1;
20099784:	00bfffc4 	movi	r2,-1
  }
}
20099788:	e037883a 	mov	sp,fp
2009978c:	dfc00117 	ldw	ra,4(sp)
20099790:	df000017 	ldw	fp,0(sp)
20099794:	dec00204 	addi	sp,sp,8
20099798:	f800283a 	ret

2009979c <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
2009979c:	defff004 	addi	sp,sp,-64
200997a0:	df000f15 	stw	fp,60(sp)
200997a4:	df000f04 	addi	fp,sp,60
200997a8:	e13ffd15 	stw	r4,-12(fp)
200997ac:	e17ffe15 	stw	r5,-8(fp)
200997b0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
200997b4:	00bffa84 	movi	r2,-22
200997b8:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
200997bc:	e0bffd17 	ldw	r2,-12(fp)
200997c0:	10800828 	cmpgeui	r2,r2,32
200997c4:	10005c1e 	bne	r2,zero,20099938 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200997c8:	0005303a 	rdctl	r2,status
200997cc:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200997d0:	e0fff317 	ldw	r3,-52(fp)
200997d4:	00bfff84 	movi	r2,-2
200997d8:	1884703a 	and	r2,r3,r2
200997dc:	1001703a 	wrctl	status,r2
  
  return context;
200997e0:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
200997e4:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
200997e8:	00800034 	movhi	r2,0
200997ec:	108cb904 	addi	r2,r2,13028
200997f0:	e0fffd17 	ldw	r3,-12(fp)
200997f4:	180690fa 	slli	r3,r3,3
200997f8:	10c5883a 	add	r2,r2,r3
200997fc:	e0ffff17 	ldw	r3,-4(fp)
20099800:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
20099804:	00800034 	movhi	r2,0
20099808:	108cb904 	addi	r2,r2,13028
2009980c:	e0fffd17 	ldw	r3,-12(fp)
20099810:	180690fa 	slli	r3,r3,3
20099814:	18c00104 	addi	r3,r3,4
20099818:	10c5883a 	add	r2,r2,r3
2009981c:	e0fffe17 	ldw	r3,-8(fp)
20099820:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
20099824:	e0bfff17 	ldw	r2,-4(fp)
20099828:	10001f26 	beq	r2,zero,200998a8 <alt_irq_register+0x10c>
2009982c:	e0bffd17 	ldw	r2,-12(fp)
20099830:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20099834:	0005303a 	rdctl	r2,status
20099838:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2009983c:	e0fff517 	ldw	r3,-44(fp)
20099840:	00bfff84 	movi	r2,-2
20099844:	1884703a 	and	r2,r3,r2
20099848:	1001703a 	wrctl	status,r2
  
  return context;
2009984c:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
20099850:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
20099854:	e0bff417 	ldw	r2,-48(fp)
20099858:	00c00044 	movi	r3,1
2009985c:	1884983a 	sll	r2,r3,r2
20099860:	1007883a 	mov	r3,r2
20099864:	00800034 	movhi	r2,0
20099868:	108ab604 	addi	r2,r2,10968
2009986c:	10800017 	ldw	r2,0(r2)
20099870:	1886b03a 	or	r3,r3,r2
20099874:	00800034 	movhi	r2,0
20099878:	108ab604 	addi	r2,r2,10968
2009987c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
20099880:	00800034 	movhi	r2,0
20099884:	108ab604 	addi	r2,r2,10968
20099888:	10800017 	ldw	r2,0(r2)
2009988c:	100170fa 	wrctl	ienable,r2
20099890:	e0bff617 	ldw	r2,-40(fp)
20099894:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20099898:	e0bff717 	ldw	r2,-36(fp)
2009989c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
200998a0:	0005883a 	mov	r2,zero
200998a4:	00001f06 	br	20099924 <alt_irq_register+0x188>
200998a8:	e0bffd17 	ldw	r2,-12(fp)
200998ac:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200998b0:	0005303a 	rdctl	r2,status
200998b4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200998b8:	e0fff917 	ldw	r3,-28(fp)
200998bc:	00bfff84 	movi	r2,-2
200998c0:	1884703a 	and	r2,r3,r2
200998c4:	1001703a 	wrctl	status,r2
  
  return context;
200998c8:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
200998cc:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
200998d0:	e0bff817 	ldw	r2,-32(fp)
200998d4:	00c00044 	movi	r3,1
200998d8:	1884983a 	sll	r2,r3,r2
200998dc:	0084303a 	nor	r2,zero,r2
200998e0:	1007883a 	mov	r3,r2
200998e4:	00800034 	movhi	r2,0
200998e8:	108ab604 	addi	r2,r2,10968
200998ec:	10800017 	ldw	r2,0(r2)
200998f0:	1886703a 	and	r3,r3,r2
200998f4:	00800034 	movhi	r2,0
200998f8:	108ab604 	addi	r2,r2,10968
200998fc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
20099900:	00800034 	movhi	r2,0
20099904:	108ab604 	addi	r2,r2,10968
20099908:	10800017 	ldw	r2,0(r2)
2009990c:	100170fa 	wrctl	ienable,r2
20099910:	e0bffa17 	ldw	r2,-24(fp)
20099914:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20099918:	e0bffb17 	ldw	r2,-20(fp)
2009991c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
20099920:	0005883a 	mov	r2,zero
20099924:	e0bff115 	stw	r2,-60(fp)
20099928:	e0bff217 	ldw	r2,-56(fp)
2009992c:	e0bffc15 	stw	r2,-16(fp)
20099930:	e0bffc17 	ldw	r2,-16(fp)
20099934:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
20099938:	e0bff117 	ldw	r2,-60(fp)
}
2009993c:	e037883a 	mov	sp,fp
20099940:	df000017 	ldw	fp,0(sp)
20099944:	dec00104 	addi	sp,sp,4
20099948:	f800283a 	ret

2009994c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2009994c:	defffe04 	addi	sp,sp,-8
20099950:	dfc00115 	stw	ra,4(sp)
20099954:	df000015 	stw	fp,0(sp)
20099958:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2009995c:	00800034 	movhi	r2,0
20099960:	108a9c04 	addi	r2,r2,10864
20099964:	10800017 	ldw	r2,0(r2)
20099968:	10000526 	beq	r2,zero,20099980 <alt_get_errno+0x34>
2009996c:	00800034 	movhi	r2,0
20099970:	108a9c04 	addi	r2,r2,10864
20099974:	10800017 	ldw	r2,0(r2)
20099978:	103ee83a 	callr	r2
2009997c:	00000206 	br	20099988 <alt_get_errno+0x3c>
20099980:	00800034 	movhi	r2,0
20099984:	108ab204 	addi	r2,r2,10952
}
20099988:	e037883a 	mov	sp,fp
2009998c:	dfc00117 	ldw	ra,4(sp)
20099990:	df000017 	ldw	fp,0(sp)
20099994:	dec00204 	addi	sp,sp,8
20099998:	f800283a 	ret

2009999c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
2009999c:	deffed04 	addi	sp,sp,-76
200999a0:	dfc01215 	stw	ra,72(sp)
200999a4:	df001115 	stw	fp,68(sp)
200999a8:	df001104 	addi	fp,sp,68
200999ac:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
200999b0:	e0bfff17 	ldw	r2,-4(fp)
200999b4:	10000616 	blt	r2,zero,200999d0 <isatty+0x34>
200999b8:	e0bfff17 	ldw	r2,-4(fp)
200999bc:	10c00324 	muli	r3,r2,12
200999c0:	00800034 	movhi	r2,0
200999c4:	10856f04 	addi	r2,r2,5564
200999c8:	1885883a 	add	r2,r3,r2
200999cc:	00000106 	br	200999d4 <isatty+0x38>
200999d0:	0005883a 	mov	r2,zero
200999d4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
200999d8:	e0bfef17 	ldw	r2,-68(fp)
200999dc:	10000e26 	beq	r2,zero,20099a18 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
200999e0:	e0bfef17 	ldw	r2,-68(fp)
200999e4:	10800017 	ldw	r2,0(r2)
200999e8:	10800817 	ldw	r2,32(r2)
200999ec:	1000021e 	bne	r2,zero,200999f8 <isatty+0x5c>
    {
      return 1;
200999f0:	00800044 	movi	r2,1
200999f4:	00000d06 	br	20099a2c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
200999f8:	e0bff004 	addi	r2,fp,-64
200999fc:	e13fff17 	ldw	r4,-4(fp)
20099a00:	100b883a 	mov	r5,r2
20099a04:	00996ec0 	call	200996ec <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
20099a08:	e0bff117 	ldw	r2,-60(fp)
20099a0c:	10880020 	cmpeqi	r2,r2,8192
20099a10:	10803fcc 	andi	r2,r2,255
20099a14:	00000506 	br	20099a2c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
20099a18:	009994c0 	call	2009994c <alt_get_errno>
20099a1c:	1007883a 	mov	r3,r2
20099a20:	00801444 	movi	r2,81
20099a24:	18800015 	stw	r2,0(r3)
    return 0;
20099a28:	0005883a 	mov	r2,zero
  }
}
20099a2c:	e037883a 	mov	sp,fp
20099a30:	dfc00117 	ldw	ra,4(sp)
20099a34:	df000017 	ldw	fp,0(sp)
20099a38:	dec00204 	addi	sp,sp,8
20099a3c:	f800283a 	ret

20099a40 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
20099a40:	defffc04 	addi	sp,sp,-16
20099a44:	df000315 	stw	fp,12(sp)
20099a48:	df000304 	addi	fp,sp,12
20099a4c:	e13ffd15 	stw	r4,-12(fp)
20099a50:	e17ffe15 	stw	r5,-8(fp)
20099a54:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
20099a58:	e0fffe17 	ldw	r3,-8(fp)
20099a5c:	e0bffd17 	ldw	r2,-12(fp)
20099a60:	18800c26 	beq	r3,r2,20099a94 <alt_load_section+0x54>
  {
    while( to != end )
20099a64:	00000806 	br	20099a88 <alt_load_section+0x48>
    {
      *to++ = *from++;
20099a68:	e0bffe17 	ldw	r2,-8(fp)
20099a6c:	10c00104 	addi	r3,r2,4
20099a70:	e0fffe15 	stw	r3,-8(fp)
20099a74:	e0fffd17 	ldw	r3,-12(fp)
20099a78:	19000104 	addi	r4,r3,4
20099a7c:	e13ffd15 	stw	r4,-12(fp)
20099a80:	18c00017 	ldw	r3,0(r3)
20099a84:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
20099a88:	e0fffe17 	ldw	r3,-8(fp)
20099a8c:	e0bfff17 	ldw	r2,-4(fp)
20099a90:	18bff51e 	bne	r3,r2,20099a68 <__flash_rwdata_start+0xffffae94>
    {
      *to++ = *from++;
    }
  }
}
20099a94:	e037883a 	mov	sp,fp
20099a98:	df000017 	ldw	fp,0(sp)
20099a9c:	dec00104 	addi	sp,sp,4
20099aa0:	f800283a 	ret

20099aa4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
20099aa4:	defffe04 	addi	sp,sp,-8
20099aa8:	dfc00115 	stw	ra,4(sp)
20099aac:	df000015 	stw	fp,0(sp)
20099ab0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
20099ab4:	010802b4 	movhi	r4,8202
20099ab8:	213af504 	addi	r4,r4,-5164
20099abc:	01400034 	movhi	r5,0
20099ac0:	2942bc04 	addi	r5,r5,2800
20099ac4:	01800034 	movhi	r6,0
20099ac8:	318aa304 	addi	r6,r6,10892
20099acc:	0099a400 	call	20099a40 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
20099ad0:	01080234 	movhi	r4,8200
20099ad4:	21000804 	addi	r4,r4,32
20099ad8:	01480234 	movhi	r5,8200
20099adc:	29400804 	addi	r5,r5,32
20099ae0:	01880234 	movhi	r6,8200
20099ae4:	31809004 	addi	r6,r6,576
20099ae8:	0099a400 	call	20099a40 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
20099aec:	010802b4 	movhi	r4,8202
20099af0:	21383904 	addi	r4,r4,-7964
20099af4:	01400034 	movhi	r5,0
20099af8:	29400004 	addi	r5,r5,0
20099afc:	01800034 	movhi	r6,0
20099b00:	3182bc04 	addi	r6,r6,2800
20099b04:	0099a400 	call	20099a40 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
20099b08:	00995f80 	call	200995f8 <alt_dcache_flush_all>
  alt_icache_flush_all();
20099b0c:	009d3940 	call	2009d394 <alt_icache_flush_all>
}
20099b10:	e037883a 	mov	sp,fp
20099b14:	dfc00117 	ldw	ra,4(sp)
20099b18:	df000017 	ldw	fp,0(sp)
20099b1c:	dec00204 	addi	sp,sp,8
20099b20:	f800283a 	ret

20099b24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
20099b24:	defffe04 	addi	sp,sp,-8
20099b28:	dfc00115 	stw	ra,4(sp)
20099b2c:	df000015 	stw	fp,0(sp)
20099b30:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
20099b34:	00800034 	movhi	r2,0
20099b38:	108a9c04 	addi	r2,r2,10864
20099b3c:	10800017 	ldw	r2,0(r2)
20099b40:	10000526 	beq	r2,zero,20099b58 <alt_get_errno+0x34>
20099b44:	00800034 	movhi	r2,0
20099b48:	108a9c04 	addi	r2,r2,10864
20099b4c:	10800017 	ldw	r2,0(r2)
20099b50:	103ee83a 	callr	r2
20099b54:	00000206 	br	20099b60 <alt_get_errno+0x3c>
20099b58:	00800034 	movhi	r2,0
20099b5c:	108ab204 	addi	r2,r2,10952
}
20099b60:	e037883a 	mov	sp,fp
20099b64:	dfc00117 	ldw	ra,4(sp)
20099b68:	df000017 	ldw	fp,0(sp)
20099b6c:	dec00204 	addi	sp,sp,8
20099b70:	f800283a 	ret

20099b74 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
20099b74:	defff904 	addi	sp,sp,-28
20099b78:	dfc00615 	stw	ra,24(sp)
20099b7c:	df000515 	stw	fp,20(sp)
20099b80:	df000504 	addi	fp,sp,20
20099b84:	e13ffd15 	stw	r4,-12(fp)
20099b88:	e17ffe15 	stw	r5,-8(fp)
20099b8c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
20099b90:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
20099b94:	e0bffd17 	ldw	r2,-12(fp)
20099b98:	10000616 	blt	r2,zero,20099bb4 <lseek+0x40>
20099b9c:	e0bffd17 	ldw	r2,-12(fp)
20099ba0:	10c00324 	muli	r3,r2,12
20099ba4:	00800034 	movhi	r2,0
20099ba8:	10856f04 	addi	r2,r2,5564
20099bac:	1885883a 	add	r2,r3,r2
20099bb0:	00000106 	br	20099bb8 <lseek+0x44>
20099bb4:	0005883a 	mov	r2,zero
20099bb8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
20099bbc:	e0bffc17 	ldw	r2,-16(fp)
20099bc0:	10001026 	beq	r2,zero,20099c04 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
20099bc4:	e0bffc17 	ldw	r2,-16(fp)
20099bc8:	10800017 	ldw	r2,0(r2)
20099bcc:	10800717 	ldw	r2,28(r2)
20099bd0:	10000926 	beq	r2,zero,20099bf8 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
20099bd4:	e0bffc17 	ldw	r2,-16(fp)
20099bd8:	10800017 	ldw	r2,0(r2)
20099bdc:	10800717 	ldw	r2,28(r2)
20099be0:	e13ffc17 	ldw	r4,-16(fp)
20099be4:	e17ffe17 	ldw	r5,-8(fp)
20099be8:	e1bfff17 	ldw	r6,-4(fp)
20099bec:	103ee83a 	callr	r2
20099bf0:	e0bffb15 	stw	r2,-20(fp)
20099bf4:	00000506 	br	20099c0c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
20099bf8:	00bfde84 	movi	r2,-134
20099bfc:	e0bffb15 	stw	r2,-20(fp)
20099c00:	00000206 	br	20099c0c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
20099c04:	00bfebc4 	movi	r2,-81
20099c08:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
20099c0c:	e0bffb17 	ldw	r2,-20(fp)
20099c10:	1000070e 	bge	r2,zero,20099c30 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
20099c14:	0099b240 	call	20099b24 <alt_get_errno>
20099c18:	1007883a 	mov	r3,r2
20099c1c:	e0bffb17 	ldw	r2,-20(fp)
20099c20:	0085c83a 	sub	r2,zero,r2
20099c24:	18800015 	stw	r2,0(r3)
    rc = -1;
20099c28:	00bfffc4 	movi	r2,-1
20099c2c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
20099c30:	e0bffb17 	ldw	r2,-20(fp)
}
20099c34:	e037883a 	mov	sp,fp
20099c38:	dfc00117 	ldw	ra,4(sp)
20099c3c:	df000017 	ldw	fp,0(sp)
20099c40:	dec00204 	addi	sp,sp,8
20099c44:	f800283a 	ret

20099c48 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
20099c48:	defffd04 	addi	sp,sp,-12
20099c4c:	dfc00215 	stw	ra,8(sp)
20099c50:	df000115 	stw	fp,4(sp)
20099c54:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
20099c58:	0009883a 	mov	r4,zero
20099c5c:	009a3200 	call	2009a320 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
20099c60:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
20099c64:	009a3540 	call	2009a354 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
20099c68:	01000034 	movhi	r4,0
20099c6c:	21020f04 	addi	r4,r4,2108
20099c70:	01400034 	movhi	r5,0
20099c74:	29420f04 	addi	r5,r5,2108
20099c78:	01800034 	movhi	r6,0
20099c7c:	31820f04 	addi	r6,r6,2108
20099c80:	009d7540 	call	2009d754 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
20099c84:	009d24c0 	call	2009d24c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
20099c88:	010802b4 	movhi	r4,8202
20099c8c:	2134aa04 	addi	r4,r4,-11608
20099c90:	009dfbc0 	call	2009dfbc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
20099c94:	d1202817 	ldw	r4,-32608(gp)
20099c98:	d0e02917 	ldw	r3,-32604(gp)
20099c9c:	d0a02a17 	ldw	r2,-32600(gp)
20099ca0:	180b883a 	mov	r5,r3
20099ca4:	100d883a 	mov	r6,r2
20099ca8:	00888240 	call	20088824 <main>
20099cac:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
20099cb0:	01000044 	movi	r4,1
20099cb4:	00994b40 	call	200994b4 <close>
  exit (result);
20099cb8:	e13fff17 	ldw	r4,-4(fp)
20099cbc:	008b3480 	call	2008b348 <exit>

20099cc0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
20099cc0:	defffe04 	addi	sp,sp,-8
20099cc4:	df000115 	stw	fp,4(sp)
20099cc8:	df000104 	addi	fp,sp,4
20099ccc:	e13fff15 	stw	r4,-4(fp)
}
20099cd0:	e037883a 	mov	sp,fp
20099cd4:	df000017 	ldw	fp,0(sp)
20099cd8:	dec00104 	addi	sp,sp,4
20099cdc:	f800283a 	ret

20099ce0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
20099ce0:	defffe04 	addi	sp,sp,-8
20099ce4:	df000115 	stw	fp,4(sp)
20099ce8:	df000104 	addi	fp,sp,4
20099cec:	e13fff15 	stw	r4,-4(fp)
}
20099cf0:	e037883a 	mov	sp,fp
20099cf4:	df000017 	ldw	fp,0(sp)
20099cf8:	dec00104 	addi	sp,sp,4
20099cfc:	f800283a 	ret

20099d00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
20099d00:	defffe04 	addi	sp,sp,-8
20099d04:	dfc00115 	stw	ra,4(sp)
20099d08:	df000015 	stw	fp,0(sp)
20099d0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
20099d10:	00800034 	movhi	r2,0
20099d14:	108a9c04 	addi	r2,r2,10864
20099d18:	10800017 	ldw	r2,0(r2)
20099d1c:	10000526 	beq	r2,zero,20099d34 <alt_get_errno+0x34>
20099d20:	00800034 	movhi	r2,0
20099d24:	108a9c04 	addi	r2,r2,10864
20099d28:	10800017 	ldw	r2,0(r2)
20099d2c:	103ee83a 	callr	r2
20099d30:	00000206 	br	20099d3c <alt_get_errno+0x3c>
20099d34:	00800034 	movhi	r2,0
20099d38:	108ab204 	addi	r2,r2,10952
}
20099d3c:	e037883a 	mov	sp,fp
20099d40:	dfc00117 	ldw	ra,4(sp)
20099d44:	df000017 	ldw	fp,0(sp)
20099d48:	dec00204 	addi	sp,sp,8
20099d4c:	f800283a 	ret

20099d50 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
20099d50:	defff904 	addi	sp,sp,-28
20099d54:	dfc00615 	stw	ra,24(sp)
20099d58:	df000515 	stw	fp,20(sp)
20099d5c:	df000504 	addi	fp,sp,20
20099d60:	e13ffd15 	stw	r4,-12(fp)
20099d64:	e17ffe15 	stw	r5,-8(fp)
20099d68:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
20099d6c:	e0bffd17 	ldw	r2,-12(fp)
20099d70:	10000616 	blt	r2,zero,20099d8c <read+0x3c>
20099d74:	e0bffd17 	ldw	r2,-12(fp)
20099d78:	10c00324 	muli	r3,r2,12
20099d7c:	00800034 	movhi	r2,0
20099d80:	10856f04 	addi	r2,r2,5564
20099d84:	1885883a 	add	r2,r3,r2
20099d88:	00000106 	br	20099d90 <read+0x40>
20099d8c:	0005883a 	mov	r2,zero
20099d90:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
20099d94:	e0bffb17 	ldw	r2,-20(fp)
20099d98:	10002226 	beq	r2,zero,20099e24 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
20099d9c:	e0bffb17 	ldw	r2,-20(fp)
20099da0:	10800217 	ldw	r2,8(r2)
20099da4:	108000cc 	andi	r2,r2,3
20099da8:	10800060 	cmpeqi	r2,r2,1
20099dac:	1000181e 	bne	r2,zero,20099e10 <read+0xc0>
        (fd->dev->read))
20099db0:	e0bffb17 	ldw	r2,-20(fp)
20099db4:	10800017 	ldw	r2,0(r2)
20099db8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
20099dbc:	10001426 	beq	r2,zero,20099e10 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
20099dc0:	e0bffb17 	ldw	r2,-20(fp)
20099dc4:	10800017 	ldw	r2,0(r2)
20099dc8:	10800517 	ldw	r2,20(r2)
20099dcc:	e0ffff17 	ldw	r3,-4(fp)
20099dd0:	e13ffb17 	ldw	r4,-20(fp)
20099dd4:	e17ffe17 	ldw	r5,-8(fp)
20099dd8:	180d883a 	mov	r6,r3
20099ddc:	103ee83a 	callr	r2
20099de0:	e0bffc15 	stw	r2,-16(fp)
20099de4:	e0bffc17 	ldw	r2,-16(fp)
20099de8:	1000070e 	bge	r2,zero,20099e08 <read+0xb8>
        {
          ALT_ERRNO = -rval;
20099dec:	0099d000 	call	20099d00 <alt_get_errno>
20099df0:	1007883a 	mov	r3,r2
20099df4:	e0bffc17 	ldw	r2,-16(fp)
20099df8:	0085c83a 	sub	r2,zero,r2
20099dfc:	18800015 	stw	r2,0(r3)
          return -1;
20099e00:	00bfffc4 	movi	r2,-1
20099e04:	00000c06 	br	20099e38 <read+0xe8>
        }
        return rval;
20099e08:	e0bffc17 	ldw	r2,-16(fp)
20099e0c:	00000a06 	br	20099e38 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
20099e10:	0099d000 	call	20099d00 <alt_get_errno>
20099e14:	1007883a 	mov	r3,r2
20099e18:	00800344 	movi	r2,13
20099e1c:	18800015 	stw	r2,0(r3)
20099e20:	00000406 	br	20099e34 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
20099e24:	0099d000 	call	20099d00 <alt_get_errno>
20099e28:	1007883a 	mov	r3,r2
20099e2c:	00801444 	movi	r2,81
20099e30:	18800015 	stw	r2,0(r3)
  }
  return -1;
20099e34:	00bfffc4 	movi	r2,-1
}
20099e38:	e037883a 	mov	sp,fp
20099e3c:	dfc00117 	ldw	ra,4(sp)
20099e40:	df000017 	ldw	fp,0(sp)
20099e44:	dec00204 	addi	sp,sp,8
20099e48:	f800283a 	ret

20099e4c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
20099e4c:	defffe04 	addi	sp,sp,-8
20099e50:	df000115 	stw	fp,4(sp)
20099e54:	df000104 	addi	fp,sp,4
20099e58:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
20099e5c:	e0bfff17 	ldw	r2,-4(fp)
20099e60:	108000d0 	cmplti	r2,r2,3
20099e64:	10000d1e 	bne	r2,zero,20099e9c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
20099e68:	00800034 	movhi	r2,0
20099e6c:	10856f04 	addi	r2,r2,5564
20099e70:	e0ffff17 	ldw	r3,-4(fp)
20099e74:	18c00324 	muli	r3,r3,12
20099e78:	18c00204 	addi	r3,r3,8
20099e7c:	10c5883a 	add	r2,r2,r3
20099e80:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
20099e84:	00800034 	movhi	r2,0
20099e88:	10856f04 	addi	r2,r2,5564
20099e8c:	e0ffff17 	ldw	r3,-4(fp)
20099e90:	18c00324 	muli	r3,r3,12
20099e94:	10c5883a 	add	r2,r2,r3
20099e98:	10000015 	stw	zero,0(r2)
  }
}
20099e9c:	e037883a 	mov	sp,fp
20099ea0:	df000017 	ldw	fp,0(sp)
20099ea4:	dec00104 	addi	sp,sp,4
20099ea8:	f800283a 	ret

20099eac <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
20099eac:	defff904 	addi	sp,sp,-28
20099eb0:	df000615 	stw	fp,24(sp)
20099eb4:	df000604 	addi	fp,sp,24
20099eb8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20099ebc:	0005303a 	rdctl	r2,status
20099ec0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20099ec4:	e0fffc17 	ldw	r3,-16(fp)
20099ec8:	00bfff84 	movi	r2,-2
20099ecc:	1884703a 	and	r2,r3,r2
20099ed0:	1001703a 	wrctl	status,r2
  
  return context;
20099ed4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
20099ed8:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
20099edc:	d0a00f17 	ldw	r2,-32708(gp)
20099ee0:	10c000c4 	addi	r3,r2,3
20099ee4:	00bfff04 	movi	r2,-4
20099ee8:	1884703a 	and	r2,r3,r2
20099eec:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
20099ef0:	d0e00f17 	ldw	r3,-32708(gp)
20099ef4:	e0bfff17 	ldw	r2,-4(fp)
20099ef8:	1887883a 	add	r3,r3,r2
20099efc:	00880034 	movhi	r2,8192
20099f00:	10800004 	addi	r2,r2,0
20099f04:	10c0062e 	bgeu	r2,r3,20099f20 <sbrk+0x74>
20099f08:	e0bffa17 	ldw	r2,-24(fp)
20099f0c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20099f10:	e0bffd17 	ldw	r2,-12(fp)
20099f14:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
20099f18:	00bfffc4 	movi	r2,-1
20099f1c:	00000b06 	br	20099f4c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
20099f20:	d0a00f17 	ldw	r2,-32708(gp)
20099f24:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
20099f28:	d0e00f17 	ldw	r3,-32708(gp)
20099f2c:	e0bfff17 	ldw	r2,-4(fp)
20099f30:	1885883a 	add	r2,r3,r2
20099f34:	d0a00f15 	stw	r2,-32708(gp)
20099f38:	e0bffa17 	ldw	r2,-24(fp)
20099f3c:	e0bffe15 	stw	r2,-8(fp)
20099f40:	e0bffe17 	ldw	r2,-8(fp)
20099f44:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
20099f48:	e0bffb17 	ldw	r2,-20(fp)
} 
20099f4c:	e037883a 	mov	sp,fp
20099f50:	df000017 	ldw	fp,0(sp)
20099f54:	dec00104 	addi	sp,sp,4
20099f58:	f800283a 	ret

20099f5c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
20099f5c:	defffa04 	addi	sp,sp,-24
20099f60:	df000515 	stw	fp,20(sp)
20099f64:	df000504 	addi	fp,sp,20
20099f68:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20099f6c:	0005303a 	rdctl	r2,status
20099f70:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20099f74:	e0fffc17 	ldw	r3,-16(fp)
20099f78:	00bfff84 	movi	r2,-2
20099f7c:	1884703a 	and	r2,r3,r2
20099f80:	1001703a 	wrctl	status,r2
  
  return context;
20099f84:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
20099f88:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
20099f8c:	e0bfff17 	ldw	r2,-4(fp)
20099f90:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
20099f94:	e0bffd17 	ldw	r2,-12(fp)
20099f98:	10800017 	ldw	r2,0(r2)
20099f9c:	e0fffd17 	ldw	r3,-12(fp)
20099fa0:	18c00117 	ldw	r3,4(r3)
20099fa4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
20099fa8:	e0bffd17 	ldw	r2,-12(fp)
20099fac:	10800117 	ldw	r2,4(r2)
20099fb0:	e0fffd17 	ldw	r3,-12(fp)
20099fb4:	18c00017 	ldw	r3,0(r3)
20099fb8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
20099fbc:	e0bffd17 	ldw	r2,-12(fp)
20099fc0:	e0fffd17 	ldw	r3,-12(fp)
20099fc4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
20099fc8:	e0bffd17 	ldw	r2,-12(fp)
20099fcc:	e0fffd17 	ldw	r3,-12(fp)
20099fd0:	10c00015 	stw	r3,0(r2)
20099fd4:	e0bffb17 	ldw	r2,-20(fp)
20099fd8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20099fdc:	e0bffe17 	ldw	r2,-8(fp)
20099fe0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
20099fe4:	e037883a 	mov	sp,fp
20099fe8:	df000017 	ldw	fp,0(sp)
20099fec:	dec00104 	addi	sp,sp,4
20099ff0:	f800283a 	ret

20099ff4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
20099ff4:	defffb04 	addi	sp,sp,-20
20099ff8:	dfc00415 	stw	ra,16(sp)
20099ffc:	df000315 	stw	fp,12(sp)
2009a000:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
2009a004:	d0a01017 	ldw	r2,-32704(gp)
2009a008:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
2009a00c:	d0a02c17 	ldw	r2,-32592(gp)
2009a010:	10800044 	addi	r2,r2,1
2009a014:	d0a02c15 	stw	r2,-32592(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
2009a018:	00002e06 	br	2009a0d4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
2009a01c:	e0bffd17 	ldw	r2,-12(fp)
2009a020:	10800017 	ldw	r2,0(r2)
2009a024:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
2009a028:	e0bffd17 	ldw	r2,-12(fp)
2009a02c:	10800403 	ldbu	r2,16(r2)
2009a030:	10803fcc 	andi	r2,r2,255
2009a034:	10000426 	beq	r2,zero,2009a048 <alt_tick+0x54>
2009a038:	d0a02c17 	ldw	r2,-32592(gp)
2009a03c:	1000021e 	bne	r2,zero,2009a048 <alt_tick+0x54>
    {
      alarm->rollover = 0;
2009a040:	e0bffd17 	ldw	r2,-12(fp)
2009a044:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
2009a048:	e0bffd17 	ldw	r2,-12(fp)
2009a04c:	10800217 	ldw	r2,8(r2)
2009a050:	d0e02c17 	ldw	r3,-32592(gp)
2009a054:	18801d36 	bltu	r3,r2,2009a0cc <alt_tick+0xd8>
2009a058:	e0bffd17 	ldw	r2,-12(fp)
2009a05c:	10800403 	ldbu	r2,16(r2)
2009a060:	10803fcc 	andi	r2,r2,255
2009a064:	1000191e 	bne	r2,zero,2009a0cc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
2009a068:	e0bffd17 	ldw	r2,-12(fp)
2009a06c:	10800317 	ldw	r2,12(r2)
2009a070:	e0fffd17 	ldw	r3,-12(fp)
2009a074:	18c00517 	ldw	r3,20(r3)
2009a078:	1809883a 	mov	r4,r3
2009a07c:	103ee83a 	callr	r2
2009a080:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
2009a084:	e0bfff17 	ldw	r2,-4(fp)
2009a088:	1000031e 	bne	r2,zero,2009a098 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
2009a08c:	e13ffd17 	ldw	r4,-12(fp)
2009a090:	0099f5c0 	call	20099f5c <alt_alarm_stop>
2009a094:	00000d06 	br	2009a0cc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
2009a098:	e0bffd17 	ldw	r2,-12(fp)
2009a09c:	10c00217 	ldw	r3,8(r2)
2009a0a0:	e0bfff17 	ldw	r2,-4(fp)
2009a0a4:	1887883a 	add	r3,r3,r2
2009a0a8:	e0bffd17 	ldw	r2,-12(fp)
2009a0ac:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
2009a0b0:	e0bffd17 	ldw	r2,-12(fp)
2009a0b4:	10c00217 	ldw	r3,8(r2)
2009a0b8:	d0a02c17 	ldw	r2,-32592(gp)
2009a0bc:	1880032e 	bgeu	r3,r2,2009a0cc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
2009a0c0:	e0bffd17 	ldw	r2,-12(fp)
2009a0c4:	00c00044 	movi	r3,1
2009a0c8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
2009a0cc:	e0bffe17 	ldw	r2,-8(fp)
2009a0d0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
2009a0d4:	e0fffd17 	ldw	r3,-12(fp)
2009a0d8:	d0a01004 	addi	r2,gp,-32704
2009a0dc:	18bfcf1e 	bne	r3,r2,2009a01c <__flash_rwdata_start+0xffffb448>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
2009a0e0:	0001883a 	nop
}
2009a0e4:	e037883a 	mov	sp,fp
2009a0e8:	dfc00117 	ldw	ra,4(sp)
2009a0ec:	df000017 	ldw	fp,0(sp)
2009a0f0:	dec00204 	addi	sp,sp,8
2009a0f4:	f800283a 	ret

2009a0f8 <alt_uncached_malloc>:
 * Return pointer to the block of memory or NULL if can't allocate it.
 */

volatile void* 
alt_uncached_malloc(size_t size)
{
2009a0f8:	defffa04 	addi	sp,sp,-24
2009a0fc:	dfc00515 	stw	ra,20(sp)
2009a100:	df000415 	stw	fp,16(sp)
2009a104:	df000404 	addi	fp,sp,16
2009a108:	e13fff15 	stw	r4,-4(fp)

  void* ptr;

  /* Round up size to an integer number of data cache lines. Required to guarantee that
   * cacheable and non-cacheable data won't be mixed on the same cache line. */ 
  const size_t num_lines = (size + ALT_CPU_DCACHE_LINE_SIZE - 1) / ALT_CPU_DCACHE_LINE_SIZE;
2009a10c:	e0bfff17 	ldw	r2,-4(fp)
2009a110:	108007c4 	addi	r2,r2,31
2009a114:	1004d17a 	srli	r2,r2,5
2009a118:	e0bffc15 	stw	r2,-16(fp)
  const size_t aligned_size = num_lines * ALT_CPU_DCACHE_LINE_SIZE;
2009a11c:	e0bffc17 	ldw	r2,-16(fp)
2009a120:	1004917a 	slli	r2,r2,5
2009a124:	e0bffd15 	stw	r2,-12(fp)

  /* Use memalign() Newlib routine to allocate starting on a data cache aligned address.
   * Required to guarantee that cacheable and non-cacheable data won't be mixed on the
   * same cache line. */ 
  ptr = memalign(ALT_CPU_DCACHE_LINE_SIZE, aligned_size);
2009a128:	01000804 	movi	r4,32
2009a12c:	e17ffd17 	ldw	r5,-12(fp)
2009a130:	008b3800 	call	2008b380 <memalign>
2009a134:	e0bffe15 	stw	r2,-8(fp)

  if (ptr == NULL) {
2009a138:	e0bffe17 	ldw	r2,-8(fp)
2009a13c:	1000021e 	bne	r2,zero,2009a148 <alt_uncached_malloc+0x50>
    return NULL; /* Out of memory */
2009a140:	0005883a 	mov	r2,zero
2009a144:	00000506 	br	2009a15c <alt_uncached_malloc+0x64>
  }

  /* Ensure that the memory region isn't in the data cache. */
  alt_dcache_flush(ptr, aligned_size);
2009a148:	e13ffe17 	ldw	r4,-8(fp)
2009a14c:	e17ffd17 	ldw	r5,-12(fp)
2009a150:	00995840 	call	20099584 <alt_dcache_flush>

  return (volatile void*) (((alt_u32)ptr) | ALT_CPU_DCACHE_BYPASS_MASK);
2009a154:	e0bffe17 	ldw	r2,-8(fp)
2009a158:	10a00034 	orhi	r2,r2,32768
#endif /* No address mask option enabled. */
#else /* No data cache */
  /* Just use regular malloc. */
  return malloc(size);
#endif /* No data cache */
}
2009a15c:	e037883a 	mov	sp,fp
2009a160:	dfc00117 	ldw	ra,4(sp)
2009a164:	df000017 	ldw	fp,0(sp)
2009a168:	dec00204 	addi	sp,sp,8
2009a16c:	f800283a 	ret

2009a170 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
2009a170:	defffd04 	addi	sp,sp,-12
2009a174:	dfc00215 	stw	ra,8(sp)
2009a178:	df000115 	stw	fp,4(sp)
2009a17c:	df000104 	addi	fp,sp,4
2009a180:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
2009a184:	e13fff17 	ldw	r4,-4(fp)
2009a188:	009d0000 	call	2009d000 <alt_busy_sleep>
}
2009a18c:	e037883a 	mov	sp,fp
2009a190:	dfc00117 	ldw	ra,4(sp)
2009a194:	df000017 	ldw	fp,0(sp)
2009a198:	dec00204 	addi	sp,sp,8
2009a19c:	f800283a 	ret

2009a1a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2009a1a0:	defffe04 	addi	sp,sp,-8
2009a1a4:	dfc00115 	stw	ra,4(sp)
2009a1a8:	df000015 	stw	fp,0(sp)
2009a1ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2009a1b0:	00800034 	movhi	r2,0
2009a1b4:	108a9c04 	addi	r2,r2,10864
2009a1b8:	10800017 	ldw	r2,0(r2)
2009a1bc:	10000526 	beq	r2,zero,2009a1d4 <alt_get_errno+0x34>
2009a1c0:	00800034 	movhi	r2,0
2009a1c4:	108a9c04 	addi	r2,r2,10864
2009a1c8:	10800017 	ldw	r2,0(r2)
2009a1cc:	103ee83a 	callr	r2
2009a1d0:	00000206 	br	2009a1dc <alt_get_errno+0x3c>
2009a1d4:	00800034 	movhi	r2,0
2009a1d8:	108ab204 	addi	r2,r2,10952
}
2009a1dc:	e037883a 	mov	sp,fp
2009a1e0:	dfc00117 	ldw	ra,4(sp)
2009a1e4:	df000017 	ldw	fp,0(sp)
2009a1e8:	dec00204 	addi	sp,sp,8
2009a1ec:	f800283a 	ret

2009a1f0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
2009a1f0:	defff904 	addi	sp,sp,-28
2009a1f4:	dfc00615 	stw	ra,24(sp)
2009a1f8:	df000515 	stw	fp,20(sp)
2009a1fc:	df000504 	addi	fp,sp,20
2009a200:	e13ffd15 	stw	r4,-12(fp)
2009a204:	e17ffe15 	stw	r5,-8(fp)
2009a208:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
2009a20c:	e0bffd17 	ldw	r2,-12(fp)
2009a210:	10000616 	blt	r2,zero,2009a22c <write+0x3c>
2009a214:	e0bffd17 	ldw	r2,-12(fp)
2009a218:	10c00324 	muli	r3,r2,12
2009a21c:	00800034 	movhi	r2,0
2009a220:	10856f04 	addi	r2,r2,5564
2009a224:	1885883a 	add	r2,r3,r2
2009a228:	00000106 	br	2009a230 <write+0x40>
2009a22c:	0005883a 	mov	r2,zero
2009a230:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
2009a234:	e0bffb17 	ldw	r2,-20(fp)
2009a238:	10002126 	beq	r2,zero,2009a2c0 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
2009a23c:	e0bffb17 	ldw	r2,-20(fp)
2009a240:	10800217 	ldw	r2,8(r2)
2009a244:	108000cc 	andi	r2,r2,3
2009a248:	10001826 	beq	r2,zero,2009a2ac <write+0xbc>
2009a24c:	e0bffb17 	ldw	r2,-20(fp)
2009a250:	10800017 	ldw	r2,0(r2)
2009a254:	10800617 	ldw	r2,24(r2)
2009a258:	10001426 	beq	r2,zero,2009a2ac <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
2009a25c:	e0bffb17 	ldw	r2,-20(fp)
2009a260:	10800017 	ldw	r2,0(r2)
2009a264:	10800617 	ldw	r2,24(r2)
2009a268:	e0ffff17 	ldw	r3,-4(fp)
2009a26c:	e13ffb17 	ldw	r4,-20(fp)
2009a270:	e17ffe17 	ldw	r5,-8(fp)
2009a274:	180d883a 	mov	r6,r3
2009a278:	103ee83a 	callr	r2
2009a27c:	e0bffc15 	stw	r2,-16(fp)
2009a280:	e0bffc17 	ldw	r2,-16(fp)
2009a284:	1000070e 	bge	r2,zero,2009a2a4 <write+0xb4>
      {
        ALT_ERRNO = -rval;
2009a288:	009a1a00 	call	2009a1a0 <alt_get_errno>
2009a28c:	1007883a 	mov	r3,r2
2009a290:	e0bffc17 	ldw	r2,-16(fp)
2009a294:	0085c83a 	sub	r2,zero,r2
2009a298:	18800015 	stw	r2,0(r3)
        return -1;
2009a29c:	00bfffc4 	movi	r2,-1
2009a2a0:	00000c06 	br	2009a2d4 <write+0xe4>
      }
      return rval;
2009a2a4:	e0bffc17 	ldw	r2,-16(fp)
2009a2a8:	00000a06 	br	2009a2d4 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
2009a2ac:	009a1a00 	call	2009a1a0 <alt_get_errno>
2009a2b0:	1007883a 	mov	r3,r2
2009a2b4:	00800344 	movi	r2,13
2009a2b8:	18800015 	stw	r2,0(r3)
2009a2bc:	00000406 	br	2009a2d0 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
2009a2c0:	009a1a00 	call	2009a1a0 <alt_get_errno>
2009a2c4:	1007883a 	mov	r3,r2
2009a2c8:	00801444 	movi	r2,81
2009a2cc:	18800015 	stw	r2,0(r3)
  }
  return -1;
2009a2d0:	00bfffc4 	movi	r2,-1
}
2009a2d4:	e037883a 	mov	sp,fp
2009a2d8:	dfc00117 	ldw	ra,4(sp)
2009a2dc:	df000017 	ldw	fp,0(sp)
2009a2e0:	dec00204 	addi	sp,sp,8
2009a2e4:	f800283a 	ret

2009a2e8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
2009a2e8:	defffd04 	addi	sp,sp,-12
2009a2ec:	dfc00215 	stw	ra,8(sp)
2009a2f0:	df000115 	stw	fp,4(sp)
2009a2f4:	df000104 	addi	fp,sp,4
2009a2f8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
2009a2fc:	e13fff17 	ldw	r4,-4(fp)
2009a300:	01400034 	movhi	r5,0
2009a304:	294a9904 	addi	r5,r5,10852
2009a308:	009d1a80 	call	2009d1a8 <alt_dev_llist_insert>
}
2009a30c:	e037883a 	mov	sp,fp
2009a310:	dfc00117 	ldw	ra,4(sp)
2009a314:	df000017 	ldw	fp,0(sp)
2009a318:	dec00204 	addi	sp,sp,8
2009a31c:	f800283a 	ret

2009a320 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
2009a320:	defffd04 	addi	sp,sp,-12
2009a324:	dfc00215 	stw	ra,8(sp)
2009a328:	df000115 	stw	fp,4(sp)
2009a32c:	df000104 	addi	fp,sp,4
2009a330:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
2009a334:	009dcac0 	call	2009dcac <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
2009a338:	00800044 	movi	r2,1
2009a33c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
2009a340:	e037883a 	mov	sp,fp
2009a344:	dfc00117 	ldw	ra,4(sp)
2009a348:	df000017 	ldw	fp,0(sp)
2009a34c:	dec00204 	addi	sp,sp,8
2009a350:	f800283a 	ret

2009a354 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
2009a354:	defffe04 	addi	sp,sp,-8
2009a358:	dfc00115 	stw	ra,4(sp)
2009a35c:	df000015 	stw	fp,0(sp)
2009a360:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
2009a364:	01080434 	movhi	r4,8208
2009a368:	21052804 	addi	r4,r4,5280
2009a36c:	000b883a 	mov	r5,zero
2009a370:	000d883a 	mov	r6,zero
2009a374:	01c0fa04 	movi	r7,1000
2009a378:	009afa80 	call	2009afa8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
2009a37c:	01000034 	movhi	r4,0
2009a380:	2105d904 	addi	r4,r4,5988
2009a384:	000b883a 	mov	r5,zero
2009a388:	01800044 	movi	r6,1
2009a38c:	009a64c0 	call	2009a64c <altera_avalon_jtag_uart_init>
2009a390:	01000034 	movhi	r4,0
2009a394:	2105cf04 	addi	r4,r4,5948
2009a398:	009a2e80 	call	2009a2e8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
2009a39c:	0001883a 	nop
    ALTERA_MSGDMA_INIT ( CB_OUT, Cb_out);
2009a3a0:	00800034 	movhi	r2,0
2009a3a4:	1089e704 	addi	r2,r2,10140
2009a3a8:	10c00717 	ldw	r3,28(r2)
2009a3ac:	00800034 	movhi	r2,0
2009a3b0:	1089e704 	addi	r2,r2,10140
2009a3b4:	10800817 	ldw	r2,32(r2)
2009a3b8:	01000034 	movhi	r4,0
2009a3bc:	2109e704 	addi	r4,r4,10140
2009a3c0:	180b883a 	mov	r5,r3
2009a3c4:	100d883a 	mov	r6,r2
2009a3c8:	009cc100 	call	2009cc10 <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( CR_OUT, Cr_out);
2009a3cc:	00800034 	movhi	r2,0
2009a3d0:	1089ff04 	addi	r2,r2,10236
2009a3d4:	10c00717 	ldw	r3,28(r2)
2009a3d8:	00800034 	movhi	r2,0
2009a3dc:	1089ff04 	addi	r2,r2,10236
2009a3e0:	10800817 	ldw	r2,32(r2)
2009a3e4:	01000034 	movhi	r4,0
2009a3e8:	2109ff04 	addi	r4,r4,10236
2009a3ec:	180b883a 	mov	r5,r3
2009a3f0:	100d883a 	mov	r6,r2
2009a3f4:	009cc100 	call	2009cc10 <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( FROM_IDCT_HWACEL, from_idct_hwacel);
2009a3f8:	00800034 	movhi	r2,0
2009a3fc:	108a1704 	addi	r2,r2,10332
2009a400:	10c00717 	ldw	r3,28(r2)
2009a404:	00800034 	movhi	r2,0
2009a408:	108a1704 	addi	r2,r2,10332
2009a40c:	10800817 	ldw	r2,32(r2)
2009a410:	01000034 	movhi	r4,0
2009a414:	210a1704 	addi	r4,r4,10332
2009a418:	180b883a 	mov	r5,r3
2009a41c:	100d883a 	mov	r6,r2
2009a420:	009cc100 	call	2009cc10 <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( MSGDMA_0, msgdma_0);
2009a424:	00800034 	movhi	r2,0
2009a428:	108a2f04 	addi	r2,r2,10428
2009a42c:	10c00717 	ldw	r3,28(r2)
2009a430:	00800034 	movhi	r2,0
2009a434:	108a2f04 	addi	r2,r2,10428
2009a438:	10800817 	ldw	r2,32(r2)
2009a43c:	01000034 	movhi	r4,0
2009a440:	210a2f04 	addi	r4,r4,10428
2009a444:	180b883a 	mov	r5,r3
2009a448:	100d883a 	mov	r6,r2
2009a44c:	009cc100 	call	2009cc10 <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( TO_IDCT_HWACEL, to_idct_hwacel);
2009a450:	00800034 	movhi	r2,0
2009a454:	108a4704 	addi	r2,r2,10524
2009a458:	10c00717 	ldw	r3,28(r2)
2009a45c:	00800034 	movhi	r2,0
2009a460:	108a4704 	addi	r2,r2,10524
2009a464:	10800817 	ldw	r2,32(r2)
2009a468:	01000034 	movhi	r4,0
2009a46c:	210a4704 	addi	r4,r4,10524
2009a470:	180b883a 	mov	r5,r3
2009a474:	100d883a 	mov	r6,r2
2009a478:	009cc100 	call	2009cc10 <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( VIDEO_DMA, video_dma);
2009a47c:	00800034 	movhi	r2,0
2009a480:	108a5f04 	addi	r2,r2,10620
2009a484:	10c00717 	ldw	r3,28(r2)
2009a488:	00800034 	movhi	r2,0
2009a48c:	108a5f04 	addi	r2,r2,10620
2009a490:	10800817 	ldw	r2,32(r2)
2009a494:	01000034 	movhi	r4,0
2009a498:	210a5f04 	addi	r4,r4,10620
2009a49c:	180b883a 	mov	r5,r3
2009a4a0:	100d883a 	mov	r6,r2
2009a4a4:	009cc100 	call	2009cc10 <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( Y_OUT, Y_out);
2009a4a8:	00800034 	movhi	r2,0
2009a4ac:	108a7704 	addi	r2,r2,10716
2009a4b0:	10c00717 	ldw	r3,28(r2)
2009a4b4:	00800034 	movhi	r2,0
2009a4b8:	108a7704 	addi	r2,r2,10716
2009a4bc:	10800817 	ldw	r2,32(r2)
2009a4c0:	01000034 	movhi	r4,0
2009a4c4:	210a7704 	addi	r4,r4,10716
2009a4c8:	180b883a 	mov	r5,r3
2009a4cc:	100d883a 	mov	r6,r2
2009a4d0:	009cc100 	call	2009cc10 <alt_msgdma_init>
}
2009a4d4:	e037883a 	mov	sp,fp
2009a4d8:	dfc00117 	ldw	ra,4(sp)
2009a4dc:	df000017 	ldw	fp,0(sp)
2009a4e0:	dec00204 	addi	sp,sp,8
2009a4e4:	f800283a 	ret

2009a4e8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
2009a4e8:	defffa04 	addi	sp,sp,-24
2009a4ec:	dfc00515 	stw	ra,20(sp)
2009a4f0:	df000415 	stw	fp,16(sp)
2009a4f4:	df000404 	addi	fp,sp,16
2009a4f8:	e13ffd15 	stw	r4,-12(fp)
2009a4fc:	e17ffe15 	stw	r5,-8(fp)
2009a500:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
2009a504:	e0bffd17 	ldw	r2,-12(fp)
2009a508:	10800017 	ldw	r2,0(r2)
2009a50c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
2009a510:	e0bffc17 	ldw	r2,-16(fp)
2009a514:	10c00a04 	addi	r3,r2,40
2009a518:	e0bffd17 	ldw	r2,-12(fp)
2009a51c:	10800217 	ldw	r2,8(r2)
2009a520:	1809883a 	mov	r4,r3
2009a524:	e17ffe17 	ldw	r5,-8(fp)
2009a528:	e1bfff17 	ldw	r6,-4(fp)
2009a52c:	100f883a 	mov	r7,r2
2009a530:	009ab100 	call	2009ab10 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
2009a534:	e037883a 	mov	sp,fp
2009a538:	dfc00117 	ldw	ra,4(sp)
2009a53c:	df000017 	ldw	fp,0(sp)
2009a540:	dec00204 	addi	sp,sp,8
2009a544:	f800283a 	ret

2009a548 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
2009a548:	defffa04 	addi	sp,sp,-24
2009a54c:	dfc00515 	stw	ra,20(sp)
2009a550:	df000415 	stw	fp,16(sp)
2009a554:	df000404 	addi	fp,sp,16
2009a558:	e13ffd15 	stw	r4,-12(fp)
2009a55c:	e17ffe15 	stw	r5,-8(fp)
2009a560:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
2009a564:	e0bffd17 	ldw	r2,-12(fp)
2009a568:	10800017 	ldw	r2,0(r2)
2009a56c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
2009a570:	e0bffc17 	ldw	r2,-16(fp)
2009a574:	10c00a04 	addi	r3,r2,40
2009a578:	e0bffd17 	ldw	r2,-12(fp)
2009a57c:	10800217 	ldw	r2,8(r2)
2009a580:	1809883a 	mov	r4,r3
2009a584:	e17ffe17 	ldw	r5,-8(fp)
2009a588:	e1bfff17 	ldw	r6,-4(fp)
2009a58c:	100f883a 	mov	r7,r2
2009a590:	009ad1c0 	call	2009ad1c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
2009a594:	e037883a 	mov	sp,fp
2009a598:	dfc00117 	ldw	ra,4(sp)
2009a59c:	df000017 	ldw	fp,0(sp)
2009a5a0:	dec00204 	addi	sp,sp,8
2009a5a4:	f800283a 	ret

2009a5a8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
2009a5a8:	defffc04 	addi	sp,sp,-16
2009a5ac:	dfc00315 	stw	ra,12(sp)
2009a5b0:	df000215 	stw	fp,8(sp)
2009a5b4:	df000204 	addi	fp,sp,8
2009a5b8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
2009a5bc:	e0bfff17 	ldw	r2,-4(fp)
2009a5c0:	10800017 	ldw	r2,0(r2)
2009a5c4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
2009a5c8:	e0bffe17 	ldw	r2,-8(fp)
2009a5cc:	10c00a04 	addi	r3,r2,40
2009a5d0:	e0bfff17 	ldw	r2,-4(fp)
2009a5d4:	10800217 	ldw	r2,8(r2)
2009a5d8:	1809883a 	mov	r4,r3
2009a5dc:	100b883a 	mov	r5,r2
2009a5e0:	009a9bc0 	call	2009a9bc <altera_avalon_jtag_uart_close>
}
2009a5e4:	e037883a 	mov	sp,fp
2009a5e8:	dfc00117 	ldw	ra,4(sp)
2009a5ec:	df000017 	ldw	fp,0(sp)
2009a5f0:	dec00204 	addi	sp,sp,8
2009a5f4:	f800283a 	ret

2009a5f8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
2009a5f8:	defffa04 	addi	sp,sp,-24
2009a5fc:	dfc00515 	stw	ra,20(sp)
2009a600:	df000415 	stw	fp,16(sp)
2009a604:	df000404 	addi	fp,sp,16
2009a608:	e13ffd15 	stw	r4,-12(fp)
2009a60c:	e17ffe15 	stw	r5,-8(fp)
2009a610:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
2009a614:	e0bffd17 	ldw	r2,-12(fp)
2009a618:	10800017 	ldw	r2,0(r2)
2009a61c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
2009a620:	e0bffc17 	ldw	r2,-16(fp)
2009a624:	10800a04 	addi	r2,r2,40
2009a628:	1009883a 	mov	r4,r2
2009a62c:	e17ffe17 	ldw	r5,-8(fp)
2009a630:	e1bfff17 	ldw	r6,-4(fp)
2009a634:	009aa240 	call	2009aa24 <altera_avalon_jtag_uart_ioctl>
}
2009a638:	e037883a 	mov	sp,fp
2009a63c:	dfc00117 	ldw	ra,4(sp)
2009a640:	df000017 	ldw	fp,0(sp)
2009a644:	dec00204 	addi	sp,sp,8
2009a648:	f800283a 	ret

2009a64c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
2009a64c:	defffa04 	addi	sp,sp,-24
2009a650:	dfc00515 	stw	ra,20(sp)
2009a654:	df000415 	stw	fp,16(sp)
2009a658:	df000404 	addi	fp,sp,16
2009a65c:	e13ffd15 	stw	r4,-12(fp)
2009a660:	e17ffe15 	stw	r5,-8(fp)
2009a664:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
2009a668:	e0bffd17 	ldw	r2,-12(fp)
2009a66c:	00c00044 	movi	r3,1
2009a670:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
2009a674:	e0bffd17 	ldw	r2,-12(fp)
2009a678:	10800017 	ldw	r2,0(r2)
2009a67c:	10800104 	addi	r2,r2,4
2009a680:	1007883a 	mov	r3,r2
2009a684:	e0bffd17 	ldw	r2,-12(fp)
2009a688:	10800817 	ldw	r2,32(r2)
2009a68c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
2009a690:	e0fffe17 	ldw	r3,-8(fp)
2009a694:	e0bfff17 	ldw	r2,-4(fp)
2009a698:	d8000015 	stw	zero,0(sp)
2009a69c:	1809883a 	mov	r4,r3
2009a6a0:	100b883a 	mov	r5,r2
2009a6a4:	018802b4 	movhi	r6,8202
2009a6a8:	31a9c404 	addi	r6,r6,-22768
2009a6ac:	e1fffd17 	ldw	r7,-12(fp)
2009a6b0:	009d3c40 	call	2009d3c4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
2009a6b4:	e0bffd17 	ldw	r2,-12(fp)
2009a6b8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
2009a6bc:	e0bffd17 	ldw	r2,-12(fp)
2009a6c0:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
2009a6c4:	00800034 	movhi	r2,0
2009a6c8:	108aba04 	addi	r2,r2,10984
2009a6cc:	10800017 	ldw	r2,0(r2)
2009a6d0:	1809883a 	mov	r4,r3
2009a6d4:	100b883a 	mov	r5,r2
2009a6d8:	018802b4 	movhi	r6,8202
2009a6dc:	31aa4504 	addi	r6,r6,-22252
2009a6e0:	e1fffd17 	ldw	r7,-12(fp)
2009a6e4:	009cec00 	call	2009cec0 <alt_alarm_start>
2009a6e8:	1000040e 	bge	r2,zero,2009a6fc <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
2009a6ec:	e0fffd17 	ldw	r3,-12(fp)
2009a6f0:	00a00034 	movhi	r2,32768
2009a6f4:	10bfffc4 	addi	r2,r2,-1
2009a6f8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
2009a6fc:	e037883a 	mov	sp,fp
2009a700:	dfc00117 	ldw	ra,4(sp)
2009a704:	df000017 	ldw	fp,0(sp)
2009a708:	dec00204 	addi	sp,sp,8
2009a70c:	f800283a 	ret

2009a710 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
2009a710:	defff804 	addi	sp,sp,-32
2009a714:	df000715 	stw	fp,28(sp)
2009a718:	df000704 	addi	fp,sp,28
2009a71c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
2009a720:	e0bfff17 	ldw	r2,-4(fp)
2009a724:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
2009a728:	e0bffb17 	ldw	r2,-20(fp)
2009a72c:	10800017 	ldw	r2,0(r2)
2009a730:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
2009a734:	e0bffc17 	ldw	r2,-16(fp)
2009a738:	10800104 	addi	r2,r2,4
2009a73c:	10800037 	ldwio	r2,0(r2)
2009a740:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
2009a744:	e0bffd17 	ldw	r2,-12(fp)
2009a748:	1080c00c 	andi	r2,r2,768
2009a74c:	1000011e 	bne	r2,zero,2009a754 <altera_avalon_jtag_uart_irq+0x44>
      break;
2009a750:	00006c06 	br	2009a904 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
2009a754:	e0bffd17 	ldw	r2,-12(fp)
2009a758:	1080400c 	andi	r2,r2,256
2009a75c:	10003426 	beq	r2,zero,2009a830 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
2009a760:	00800074 	movhi	r2,1
2009a764:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
2009a768:	e0bffb17 	ldw	r2,-20(fp)
2009a76c:	10800a17 	ldw	r2,40(r2)
2009a770:	10800044 	addi	r2,r2,1
2009a774:	1081ffcc 	andi	r2,r2,2047
2009a778:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
2009a77c:	e0bffb17 	ldw	r2,-20(fp)
2009a780:	10c00b17 	ldw	r3,44(r2)
2009a784:	e0bffe17 	ldw	r2,-8(fp)
2009a788:	1880011e 	bne	r3,r2,2009a790 <altera_avalon_jtag_uart_irq+0x80>
          break;
2009a78c:	00001606 	br	2009a7e8 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
2009a790:	e0bffc17 	ldw	r2,-16(fp)
2009a794:	10800037 	ldwio	r2,0(r2)
2009a798:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
2009a79c:	e0bff917 	ldw	r2,-28(fp)
2009a7a0:	10a0000c 	andi	r2,r2,32768
2009a7a4:	1000011e 	bne	r2,zero,2009a7ac <altera_avalon_jtag_uart_irq+0x9c>
          break;
2009a7a8:	00000f06 	br	2009a7e8 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
2009a7ac:	e0bffb17 	ldw	r2,-20(fp)
2009a7b0:	10800a17 	ldw	r2,40(r2)
2009a7b4:	e0fff917 	ldw	r3,-28(fp)
2009a7b8:	1809883a 	mov	r4,r3
2009a7bc:	e0fffb17 	ldw	r3,-20(fp)
2009a7c0:	1885883a 	add	r2,r3,r2
2009a7c4:	10800e04 	addi	r2,r2,56
2009a7c8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
2009a7cc:	e0bffb17 	ldw	r2,-20(fp)
2009a7d0:	10800a17 	ldw	r2,40(r2)
2009a7d4:	10800044 	addi	r2,r2,1
2009a7d8:	10c1ffcc 	andi	r3,r2,2047
2009a7dc:	e0bffb17 	ldw	r2,-20(fp)
2009a7e0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
2009a7e4:	003fe006 	br	2009a768 <__flash_rwdata_start+0xffffbb94>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
2009a7e8:	e0bff917 	ldw	r2,-28(fp)
2009a7ec:	10bfffec 	andhi	r2,r2,65535
2009a7f0:	10000f26 	beq	r2,zero,2009a830 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
2009a7f4:	e0bffb17 	ldw	r2,-20(fp)
2009a7f8:	10c00817 	ldw	r3,32(r2)
2009a7fc:	00bfff84 	movi	r2,-2
2009a800:	1886703a 	and	r3,r3,r2
2009a804:	e0bffb17 	ldw	r2,-20(fp)
2009a808:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
2009a80c:	e0bffc17 	ldw	r2,-16(fp)
2009a810:	10800104 	addi	r2,r2,4
2009a814:	1007883a 	mov	r3,r2
2009a818:	e0bffb17 	ldw	r2,-20(fp)
2009a81c:	10800817 	ldw	r2,32(r2)
2009a820:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
2009a824:	e0bffc17 	ldw	r2,-16(fp)
2009a828:	10800104 	addi	r2,r2,4
2009a82c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
2009a830:	e0bffd17 	ldw	r2,-12(fp)
2009a834:	1080800c 	andi	r2,r2,512
2009a838:	10003126 	beq	r2,zero,2009a900 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
2009a83c:	e0bffd17 	ldw	r2,-12(fp)
2009a840:	1004d43a 	srli	r2,r2,16
2009a844:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
2009a848:	00001406 	br	2009a89c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
2009a84c:	e0bffc17 	ldw	r2,-16(fp)
2009a850:	e0fffb17 	ldw	r3,-20(fp)
2009a854:	18c00d17 	ldw	r3,52(r3)
2009a858:	e13ffb17 	ldw	r4,-20(fp)
2009a85c:	20c7883a 	add	r3,r4,r3
2009a860:	18c20e04 	addi	r3,r3,2104
2009a864:	18c00003 	ldbu	r3,0(r3)
2009a868:	18c03fcc 	andi	r3,r3,255
2009a86c:	18c0201c 	xori	r3,r3,128
2009a870:	18ffe004 	addi	r3,r3,-128
2009a874:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
2009a878:	e0bffb17 	ldw	r2,-20(fp)
2009a87c:	10800d17 	ldw	r2,52(r2)
2009a880:	10800044 	addi	r2,r2,1
2009a884:	10c1ffcc 	andi	r3,r2,2047
2009a888:	e0bffb17 	ldw	r2,-20(fp)
2009a88c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
2009a890:	e0bffa17 	ldw	r2,-24(fp)
2009a894:	10bfffc4 	addi	r2,r2,-1
2009a898:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
2009a89c:	e0bffa17 	ldw	r2,-24(fp)
2009a8a0:	10000526 	beq	r2,zero,2009a8b8 <altera_avalon_jtag_uart_irq+0x1a8>
2009a8a4:	e0bffb17 	ldw	r2,-20(fp)
2009a8a8:	10c00d17 	ldw	r3,52(r2)
2009a8ac:	e0bffb17 	ldw	r2,-20(fp)
2009a8b0:	10800c17 	ldw	r2,48(r2)
2009a8b4:	18bfe51e 	bne	r3,r2,2009a84c <__flash_rwdata_start+0xffffbc78>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
2009a8b8:	e0bffa17 	ldw	r2,-24(fp)
2009a8bc:	10001026 	beq	r2,zero,2009a900 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
2009a8c0:	e0bffb17 	ldw	r2,-20(fp)
2009a8c4:	10c00817 	ldw	r3,32(r2)
2009a8c8:	00bfff44 	movi	r2,-3
2009a8cc:	1886703a 	and	r3,r3,r2
2009a8d0:	e0bffb17 	ldw	r2,-20(fp)
2009a8d4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
2009a8d8:	e0bffb17 	ldw	r2,-20(fp)
2009a8dc:	10800017 	ldw	r2,0(r2)
2009a8e0:	10800104 	addi	r2,r2,4
2009a8e4:	1007883a 	mov	r3,r2
2009a8e8:	e0bffb17 	ldw	r2,-20(fp)
2009a8ec:	10800817 	ldw	r2,32(r2)
2009a8f0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
2009a8f4:	e0bffc17 	ldw	r2,-16(fp)
2009a8f8:	10800104 	addi	r2,r2,4
2009a8fc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
2009a900:	003f8c06 	br	2009a734 <__flash_rwdata_start+0xffffbb60>
}
2009a904:	e037883a 	mov	sp,fp
2009a908:	df000017 	ldw	fp,0(sp)
2009a90c:	dec00104 	addi	sp,sp,4
2009a910:	f800283a 	ret

2009a914 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
2009a914:	defff804 	addi	sp,sp,-32
2009a918:	df000715 	stw	fp,28(sp)
2009a91c:	df000704 	addi	fp,sp,28
2009a920:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
2009a924:	e0bffb17 	ldw	r2,-20(fp)
2009a928:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
2009a92c:	e0bff917 	ldw	r2,-28(fp)
2009a930:	10800017 	ldw	r2,0(r2)
2009a934:	10800104 	addi	r2,r2,4
2009a938:	10800037 	ldwio	r2,0(r2)
2009a93c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
2009a940:	e0bffa17 	ldw	r2,-24(fp)
2009a944:	1081000c 	andi	r2,r2,1024
2009a948:	10000b26 	beq	r2,zero,2009a978 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
2009a94c:	e0bff917 	ldw	r2,-28(fp)
2009a950:	10800017 	ldw	r2,0(r2)
2009a954:	10800104 	addi	r2,r2,4
2009a958:	1007883a 	mov	r3,r2
2009a95c:	e0bff917 	ldw	r2,-28(fp)
2009a960:	10800817 	ldw	r2,32(r2)
2009a964:	10810014 	ori	r2,r2,1024
2009a968:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
2009a96c:	e0bff917 	ldw	r2,-28(fp)
2009a970:	10000915 	stw	zero,36(r2)
2009a974:	00000a06 	br	2009a9a0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
2009a978:	e0bff917 	ldw	r2,-28(fp)
2009a97c:	10c00917 	ldw	r3,36(r2)
2009a980:	00a00034 	movhi	r2,32768
2009a984:	10bfff04 	addi	r2,r2,-4
2009a988:	10c00536 	bltu	r2,r3,2009a9a0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
2009a98c:	e0bff917 	ldw	r2,-28(fp)
2009a990:	10800917 	ldw	r2,36(r2)
2009a994:	10c00044 	addi	r3,r2,1
2009a998:	e0bff917 	ldw	r2,-28(fp)
2009a99c:	10c00915 	stw	r3,36(r2)
2009a9a0:	00800034 	movhi	r2,0
2009a9a4:	108aba04 	addi	r2,r2,10984
2009a9a8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
2009a9ac:	e037883a 	mov	sp,fp
2009a9b0:	df000017 	ldw	fp,0(sp)
2009a9b4:	dec00104 	addi	sp,sp,4
2009a9b8:	f800283a 	ret

2009a9bc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
2009a9bc:	defffd04 	addi	sp,sp,-12
2009a9c0:	df000215 	stw	fp,8(sp)
2009a9c4:	df000204 	addi	fp,sp,8
2009a9c8:	e13ffe15 	stw	r4,-8(fp)
2009a9cc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
2009a9d0:	00000506 	br	2009a9e8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
2009a9d4:	e0bfff17 	ldw	r2,-4(fp)
2009a9d8:	1090000c 	andi	r2,r2,16384
2009a9dc:	10000226 	beq	r2,zero,2009a9e8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
2009a9e0:	00bffd44 	movi	r2,-11
2009a9e4:	00000b06 	br	2009aa14 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
2009a9e8:	e0bffe17 	ldw	r2,-8(fp)
2009a9ec:	10c00d17 	ldw	r3,52(r2)
2009a9f0:	e0bffe17 	ldw	r2,-8(fp)
2009a9f4:	10800c17 	ldw	r2,48(r2)
2009a9f8:	18800526 	beq	r3,r2,2009aa10 <altera_avalon_jtag_uart_close+0x54>
2009a9fc:	e0bffe17 	ldw	r2,-8(fp)
2009aa00:	10c00917 	ldw	r3,36(r2)
2009aa04:	e0bffe17 	ldw	r2,-8(fp)
2009aa08:	10800117 	ldw	r2,4(r2)
2009aa0c:	18bff136 	bltu	r3,r2,2009a9d4 <__flash_rwdata_start+0xffffbe00>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
2009aa10:	0005883a 	mov	r2,zero
}
2009aa14:	e037883a 	mov	sp,fp
2009aa18:	df000017 	ldw	fp,0(sp)
2009aa1c:	dec00104 	addi	sp,sp,4
2009aa20:	f800283a 	ret

2009aa24 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
2009aa24:	defffa04 	addi	sp,sp,-24
2009aa28:	df000515 	stw	fp,20(sp)
2009aa2c:	df000504 	addi	fp,sp,20
2009aa30:	e13ffd15 	stw	r4,-12(fp)
2009aa34:	e17ffe15 	stw	r5,-8(fp)
2009aa38:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
2009aa3c:	00bff9c4 	movi	r2,-25
2009aa40:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
2009aa44:	e0bffe17 	ldw	r2,-8(fp)
2009aa48:	10da8060 	cmpeqi	r3,r2,27137
2009aa4c:	1800031e 	bne	r3,zero,2009aa5c <altera_avalon_jtag_uart_ioctl+0x38>
2009aa50:	109a80a0 	cmpeqi	r2,r2,27138
2009aa54:	1000191e 	bne	r2,zero,2009aabc <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
2009aa58:	00002806 	br	2009aafc <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
2009aa5c:	e0bffd17 	ldw	r2,-12(fp)
2009aa60:	10c00117 	ldw	r3,4(r2)
2009aa64:	00a00034 	movhi	r2,32768
2009aa68:	10bfffc4 	addi	r2,r2,-1
2009aa6c:	18801226 	beq	r3,r2,2009aab8 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
2009aa70:	e0bfff17 	ldw	r2,-4(fp)
2009aa74:	10800017 	ldw	r2,0(r2)
2009aa78:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
2009aa7c:	e0bffc17 	ldw	r2,-16(fp)
2009aa80:	10800090 	cmplti	r2,r2,2
2009aa84:	1000061e 	bne	r2,zero,2009aaa0 <altera_avalon_jtag_uart_ioctl+0x7c>
2009aa88:	e0fffc17 	ldw	r3,-16(fp)
2009aa8c:	00a00034 	movhi	r2,32768
2009aa90:	10bfffc4 	addi	r2,r2,-1
2009aa94:	18800226 	beq	r3,r2,2009aaa0 <altera_avalon_jtag_uart_ioctl+0x7c>
2009aa98:	e0bffc17 	ldw	r2,-16(fp)
2009aa9c:	00000206 	br	2009aaa8 <altera_avalon_jtag_uart_ioctl+0x84>
2009aaa0:	00a00034 	movhi	r2,32768
2009aaa4:	10bfff84 	addi	r2,r2,-2
2009aaa8:	e0fffd17 	ldw	r3,-12(fp)
2009aaac:	18800115 	stw	r2,4(r3)
      rc = 0;
2009aab0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
2009aab4:	00001106 	br	2009aafc <altera_avalon_jtag_uart_ioctl+0xd8>
2009aab8:	00001006 	br	2009aafc <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
2009aabc:	e0bffd17 	ldw	r2,-12(fp)
2009aac0:	10c00117 	ldw	r3,4(r2)
2009aac4:	00a00034 	movhi	r2,32768
2009aac8:	10bfffc4 	addi	r2,r2,-1
2009aacc:	18800a26 	beq	r3,r2,2009aaf8 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
2009aad0:	e0bffd17 	ldw	r2,-12(fp)
2009aad4:	10c00917 	ldw	r3,36(r2)
2009aad8:	e0bffd17 	ldw	r2,-12(fp)
2009aadc:	10800117 	ldw	r2,4(r2)
2009aae0:	1885803a 	cmpltu	r2,r3,r2
2009aae4:	10c03fcc 	andi	r3,r2,255
2009aae8:	e0bfff17 	ldw	r2,-4(fp)
2009aaec:	10c00015 	stw	r3,0(r2)
      rc = 0;
2009aaf0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
2009aaf4:	00000006 	br	2009aaf8 <altera_avalon_jtag_uart_ioctl+0xd4>
2009aaf8:	0001883a 	nop

  default:
    break;
  }

  return rc;
2009aafc:	e0bffb17 	ldw	r2,-20(fp)
}
2009ab00:	e037883a 	mov	sp,fp
2009ab04:	df000017 	ldw	fp,0(sp)
2009ab08:	dec00104 	addi	sp,sp,4
2009ab0c:	f800283a 	ret

2009ab10 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
2009ab10:	defff304 	addi	sp,sp,-52
2009ab14:	dfc00c15 	stw	ra,48(sp)
2009ab18:	df000b15 	stw	fp,44(sp)
2009ab1c:	df000b04 	addi	fp,sp,44
2009ab20:	e13ffc15 	stw	r4,-16(fp)
2009ab24:	e17ffd15 	stw	r5,-12(fp)
2009ab28:	e1bffe15 	stw	r6,-8(fp)
2009ab2c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
2009ab30:	e0bffd17 	ldw	r2,-12(fp)
2009ab34:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
2009ab38:	00004906 	br	2009ac60 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
2009ab3c:	e0bffc17 	ldw	r2,-16(fp)
2009ab40:	10800a17 	ldw	r2,40(r2)
2009ab44:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
2009ab48:	e0bffc17 	ldw	r2,-16(fp)
2009ab4c:	10800b17 	ldw	r2,44(r2)
2009ab50:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
2009ab54:	e0fff717 	ldw	r3,-36(fp)
2009ab58:	e0bff817 	ldw	r2,-32(fp)
2009ab5c:	18800536 	bltu	r3,r2,2009ab74 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
2009ab60:	e0fff717 	ldw	r3,-36(fp)
2009ab64:	e0bff817 	ldw	r2,-32(fp)
2009ab68:	1885c83a 	sub	r2,r3,r2
2009ab6c:	e0bff615 	stw	r2,-40(fp)
2009ab70:	00000406 	br	2009ab84 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
2009ab74:	00c20004 	movi	r3,2048
2009ab78:	e0bff817 	ldw	r2,-32(fp)
2009ab7c:	1885c83a 	sub	r2,r3,r2
2009ab80:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
2009ab84:	e0bff617 	ldw	r2,-40(fp)
2009ab88:	1000011e 	bne	r2,zero,2009ab90 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
2009ab8c:	00001d06 	br	2009ac04 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
2009ab90:	e0fffe17 	ldw	r3,-8(fp)
2009ab94:	e0bff617 	ldw	r2,-40(fp)
2009ab98:	1880022e 	bgeu	r3,r2,2009aba4 <altera_avalon_jtag_uart_read+0x94>
        n = space;
2009ab9c:	e0bffe17 	ldw	r2,-8(fp)
2009aba0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
2009aba4:	e0bff817 	ldw	r2,-32(fp)
2009aba8:	10800e04 	addi	r2,r2,56
2009abac:	e0fffc17 	ldw	r3,-16(fp)
2009abb0:	1885883a 	add	r2,r3,r2
2009abb4:	e13ff517 	ldw	r4,-44(fp)
2009abb8:	100b883a 	mov	r5,r2
2009abbc:	e1bff617 	ldw	r6,-40(fp)
2009abc0:	008bd9c0 	call	2008bd9c <memcpy>
      ptr   += n;
2009abc4:	e0fff517 	ldw	r3,-44(fp)
2009abc8:	e0bff617 	ldw	r2,-40(fp)
2009abcc:	1885883a 	add	r2,r3,r2
2009abd0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
2009abd4:	e0fffe17 	ldw	r3,-8(fp)
2009abd8:	e0bff617 	ldw	r2,-40(fp)
2009abdc:	1885c83a 	sub	r2,r3,r2
2009abe0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
2009abe4:	e0fff817 	ldw	r3,-32(fp)
2009abe8:	e0bff617 	ldw	r2,-40(fp)
2009abec:	1885883a 	add	r2,r3,r2
2009abf0:	10c1ffcc 	andi	r3,r2,2047
2009abf4:	e0bffc17 	ldw	r2,-16(fp)
2009abf8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
2009abfc:	e0bffe17 	ldw	r2,-8(fp)
2009ac00:	00bfce16 	blt	zero,r2,2009ab3c <__flash_rwdata_start+0xffffbf68>

    /* If we read any data then return it */
    if (ptr != buffer)
2009ac04:	e0fff517 	ldw	r3,-44(fp)
2009ac08:	e0bffd17 	ldw	r2,-12(fp)
2009ac0c:	18800126 	beq	r3,r2,2009ac14 <altera_avalon_jtag_uart_read+0x104>
      break;
2009ac10:	00001506 	br	2009ac68 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
2009ac14:	e0bfff17 	ldw	r2,-4(fp)
2009ac18:	1090000c 	andi	r2,r2,16384
2009ac1c:	10000126 	beq	r2,zero,2009ac24 <altera_avalon_jtag_uart_read+0x114>
      break;
2009ac20:	00001106 	br	2009ac68 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
2009ac24:	0001883a 	nop
2009ac28:	e0bffc17 	ldw	r2,-16(fp)
2009ac2c:	10c00a17 	ldw	r3,40(r2)
2009ac30:	e0bff717 	ldw	r2,-36(fp)
2009ac34:	1880051e 	bne	r3,r2,2009ac4c <altera_avalon_jtag_uart_read+0x13c>
2009ac38:	e0bffc17 	ldw	r2,-16(fp)
2009ac3c:	10c00917 	ldw	r3,36(r2)
2009ac40:	e0bffc17 	ldw	r2,-16(fp)
2009ac44:	10800117 	ldw	r2,4(r2)
2009ac48:	18bff736 	bltu	r3,r2,2009ac28 <__flash_rwdata_start+0xffffc054>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
2009ac4c:	e0bffc17 	ldw	r2,-16(fp)
2009ac50:	10c00a17 	ldw	r3,40(r2)
2009ac54:	e0bff717 	ldw	r2,-36(fp)
2009ac58:	1880011e 	bne	r3,r2,2009ac60 <altera_avalon_jtag_uart_read+0x150>
      break;
2009ac5c:	00000206 	br	2009ac68 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
2009ac60:	e0bffe17 	ldw	r2,-8(fp)
2009ac64:	00bfb516 	blt	zero,r2,2009ab3c <__flash_rwdata_start+0xffffbf68>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
2009ac68:	e0fff517 	ldw	r3,-44(fp)
2009ac6c:	e0bffd17 	ldw	r2,-12(fp)
2009ac70:	18801826 	beq	r3,r2,2009acd4 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2009ac74:	0005303a 	rdctl	r2,status
2009ac78:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2009ac7c:	e0fffa17 	ldw	r3,-24(fp)
2009ac80:	00bfff84 	movi	r2,-2
2009ac84:	1884703a 	and	r2,r3,r2
2009ac88:	1001703a 	wrctl	status,r2
  
  return context;
2009ac8c:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
2009ac90:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
2009ac94:	e0bffc17 	ldw	r2,-16(fp)
2009ac98:	10800817 	ldw	r2,32(r2)
2009ac9c:	10c00054 	ori	r3,r2,1
2009aca0:	e0bffc17 	ldw	r2,-16(fp)
2009aca4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
2009aca8:	e0bffc17 	ldw	r2,-16(fp)
2009acac:	10800017 	ldw	r2,0(r2)
2009acb0:	10800104 	addi	r2,r2,4
2009acb4:	1007883a 	mov	r3,r2
2009acb8:	e0bffc17 	ldw	r2,-16(fp)
2009acbc:	10800817 	ldw	r2,32(r2)
2009acc0:	18800035 	stwio	r2,0(r3)
2009acc4:	e0bff917 	ldw	r2,-28(fp)
2009acc8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2009accc:	e0bffb17 	ldw	r2,-20(fp)
2009acd0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
2009acd4:	e0fff517 	ldw	r3,-44(fp)
2009acd8:	e0bffd17 	ldw	r2,-12(fp)
2009acdc:	18800426 	beq	r3,r2,2009acf0 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
2009ace0:	e0fff517 	ldw	r3,-44(fp)
2009ace4:	e0bffd17 	ldw	r2,-12(fp)
2009ace8:	1885c83a 	sub	r2,r3,r2
2009acec:	00000606 	br	2009ad08 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
2009acf0:	e0bfff17 	ldw	r2,-4(fp)
2009acf4:	1090000c 	andi	r2,r2,16384
2009acf8:	10000226 	beq	r2,zero,2009ad04 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
2009acfc:	00bffd44 	movi	r2,-11
2009ad00:	00000106 	br	2009ad08 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
2009ad04:	00bffec4 	movi	r2,-5
}
2009ad08:	e037883a 	mov	sp,fp
2009ad0c:	dfc00117 	ldw	ra,4(sp)
2009ad10:	df000017 	ldw	fp,0(sp)
2009ad14:	dec00204 	addi	sp,sp,8
2009ad18:	f800283a 	ret

2009ad1c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
2009ad1c:	defff304 	addi	sp,sp,-52
2009ad20:	dfc00c15 	stw	ra,48(sp)
2009ad24:	df000b15 	stw	fp,44(sp)
2009ad28:	df000b04 	addi	fp,sp,44
2009ad2c:	e13ffc15 	stw	r4,-16(fp)
2009ad30:	e17ffd15 	stw	r5,-12(fp)
2009ad34:	e1bffe15 	stw	r6,-8(fp)
2009ad38:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
2009ad3c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
2009ad40:	e0bffd17 	ldw	r2,-12(fp)
2009ad44:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
2009ad48:	00003806 	br	2009ae2c <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
2009ad4c:	e0bffc17 	ldw	r2,-16(fp)
2009ad50:	10800c17 	ldw	r2,48(r2)
2009ad54:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
2009ad58:	e0bffc17 	ldw	r2,-16(fp)
2009ad5c:	10800d17 	ldw	r2,52(r2)
2009ad60:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
2009ad64:	e0fff817 	ldw	r3,-32(fp)
2009ad68:	e0bff517 	ldw	r2,-44(fp)
2009ad6c:	1880062e 	bgeu	r3,r2,2009ad88 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
2009ad70:	e0fff517 	ldw	r3,-44(fp)
2009ad74:	e0bff817 	ldw	r2,-32(fp)
2009ad78:	1885c83a 	sub	r2,r3,r2
2009ad7c:	10bfffc4 	addi	r2,r2,-1
2009ad80:	e0bff615 	stw	r2,-40(fp)
2009ad84:	00000b06 	br	2009adb4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
2009ad88:	e0bff517 	ldw	r2,-44(fp)
2009ad8c:	10000526 	beq	r2,zero,2009ada4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
2009ad90:	00c20004 	movi	r3,2048
2009ad94:	e0bff817 	ldw	r2,-32(fp)
2009ad98:	1885c83a 	sub	r2,r3,r2
2009ad9c:	e0bff615 	stw	r2,-40(fp)
2009ada0:	00000406 	br	2009adb4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
2009ada4:	00c1ffc4 	movi	r3,2047
2009ada8:	e0bff817 	ldw	r2,-32(fp)
2009adac:	1885c83a 	sub	r2,r3,r2
2009adb0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
2009adb4:	e0bff617 	ldw	r2,-40(fp)
2009adb8:	1000011e 	bne	r2,zero,2009adc0 <altera_avalon_jtag_uart_write+0xa4>
        break;
2009adbc:	00001d06 	br	2009ae34 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
2009adc0:	e0fffe17 	ldw	r3,-8(fp)
2009adc4:	e0bff617 	ldw	r2,-40(fp)
2009adc8:	1880022e 	bgeu	r3,r2,2009add4 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
2009adcc:	e0bffe17 	ldw	r2,-8(fp)
2009add0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
2009add4:	e0bff817 	ldw	r2,-32(fp)
2009add8:	10820e04 	addi	r2,r2,2104
2009addc:	e0fffc17 	ldw	r3,-16(fp)
2009ade0:	1885883a 	add	r2,r3,r2
2009ade4:	1009883a 	mov	r4,r2
2009ade8:	e17ffd17 	ldw	r5,-12(fp)
2009adec:	e1bff617 	ldw	r6,-40(fp)
2009adf0:	008bd9c0 	call	2008bd9c <memcpy>
      ptr   += n;
2009adf4:	e0fffd17 	ldw	r3,-12(fp)
2009adf8:	e0bff617 	ldw	r2,-40(fp)
2009adfc:	1885883a 	add	r2,r3,r2
2009ae00:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
2009ae04:	e0fffe17 	ldw	r3,-8(fp)
2009ae08:	e0bff617 	ldw	r2,-40(fp)
2009ae0c:	1885c83a 	sub	r2,r3,r2
2009ae10:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
2009ae14:	e0fff817 	ldw	r3,-32(fp)
2009ae18:	e0bff617 	ldw	r2,-40(fp)
2009ae1c:	1885883a 	add	r2,r3,r2
2009ae20:	10c1ffcc 	andi	r3,r2,2047
2009ae24:	e0bffc17 	ldw	r2,-16(fp)
2009ae28:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
2009ae2c:	e0bffe17 	ldw	r2,-8(fp)
2009ae30:	00bfc616 	blt	zero,r2,2009ad4c <__flash_rwdata_start+0xffffc178>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2009ae34:	0005303a 	rdctl	r2,status
2009ae38:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2009ae3c:	e0fffa17 	ldw	r3,-24(fp)
2009ae40:	00bfff84 	movi	r2,-2
2009ae44:	1884703a 	and	r2,r3,r2
2009ae48:	1001703a 	wrctl	status,r2
  
  return context;
2009ae4c:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
2009ae50:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
2009ae54:	e0bffc17 	ldw	r2,-16(fp)
2009ae58:	10800817 	ldw	r2,32(r2)
2009ae5c:	10c00094 	ori	r3,r2,2
2009ae60:	e0bffc17 	ldw	r2,-16(fp)
2009ae64:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
2009ae68:	e0bffc17 	ldw	r2,-16(fp)
2009ae6c:	10800017 	ldw	r2,0(r2)
2009ae70:	10800104 	addi	r2,r2,4
2009ae74:	1007883a 	mov	r3,r2
2009ae78:	e0bffc17 	ldw	r2,-16(fp)
2009ae7c:	10800817 	ldw	r2,32(r2)
2009ae80:	18800035 	stwio	r2,0(r3)
2009ae84:	e0bff917 	ldw	r2,-28(fp)
2009ae88:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2009ae8c:	e0bffb17 	ldw	r2,-20(fp)
2009ae90:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
2009ae94:	e0bffe17 	ldw	r2,-8(fp)
2009ae98:	0080120e 	bge	zero,r2,2009aee4 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
2009ae9c:	e0bfff17 	ldw	r2,-4(fp)
2009aea0:	1090000c 	andi	r2,r2,16384
2009aea4:	10000126 	beq	r2,zero,2009aeac <altera_avalon_jtag_uart_write+0x190>
        break;
2009aea8:	00001006 	br	2009aeec <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
2009aeac:	0001883a 	nop
2009aeb0:	e0bffc17 	ldw	r2,-16(fp)
2009aeb4:	10c00d17 	ldw	r3,52(r2)
2009aeb8:	e0bff517 	ldw	r2,-44(fp)
2009aebc:	1880051e 	bne	r3,r2,2009aed4 <altera_avalon_jtag_uart_write+0x1b8>
2009aec0:	e0bffc17 	ldw	r2,-16(fp)
2009aec4:	10c00917 	ldw	r3,36(r2)
2009aec8:	e0bffc17 	ldw	r2,-16(fp)
2009aecc:	10800117 	ldw	r2,4(r2)
2009aed0:	18bff736 	bltu	r3,r2,2009aeb0 <__flash_rwdata_start+0xffffc2dc>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
2009aed4:	e0bffc17 	ldw	r2,-16(fp)
2009aed8:	10800917 	ldw	r2,36(r2)
2009aedc:	10000126 	beq	r2,zero,2009aee4 <altera_avalon_jtag_uart_write+0x1c8>
         break;
2009aee0:	00000206 	br	2009aeec <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
2009aee4:	e0bffe17 	ldw	r2,-8(fp)
2009aee8:	00bf9716 	blt	zero,r2,2009ad48 <__flash_rwdata_start+0xffffc174>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
2009aeec:	e0fffd17 	ldw	r3,-12(fp)
2009aef0:	e0bff717 	ldw	r2,-36(fp)
2009aef4:	18800426 	beq	r3,r2,2009af08 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
2009aef8:	e0fffd17 	ldw	r3,-12(fp)
2009aefc:	e0bff717 	ldw	r2,-36(fp)
2009af00:	1885c83a 	sub	r2,r3,r2
2009af04:	00000606 	br	2009af20 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
2009af08:	e0bfff17 	ldw	r2,-4(fp)
2009af0c:	1090000c 	andi	r2,r2,16384
2009af10:	10000226 	beq	r2,zero,2009af1c <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
2009af14:	00bffd44 	movi	r2,-11
2009af18:	00000106 	br	2009af20 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
2009af1c:	00bffec4 	movi	r2,-5
}
2009af20:	e037883a 	mov	sp,fp
2009af24:	dfc00117 	ldw	ra,4(sp)
2009af28:	df000017 	ldw	fp,0(sp)
2009af2c:	dec00204 	addi	sp,sp,8
2009af30:	f800283a 	ret

2009af34 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
2009af34:	defffa04 	addi	sp,sp,-24
2009af38:	dfc00515 	stw	ra,20(sp)
2009af3c:	df000415 	stw	fp,16(sp)
2009af40:	df000404 	addi	fp,sp,16
2009af44:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
2009af48:	0007883a 	mov	r3,zero
2009af4c:	e0bfff17 	ldw	r2,-4(fp)
2009af50:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
2009af54:	e0bfff17 	ldw	r2,-4(fp)
2009af58:	10800104 	addi	r2,r2,4
2009af5c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2009af60:	0005303a 	rdctl	r2,status
2009af64:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2009af68:	e0fffd17 	ldw	r3,-12(fp)
2009af6c:	00bfff84 	movi	r2,-2
2009af70:	1884703a 	and	r2,r3,r2
2009af74:	1001703a 	wrctl	status,r2
  
  return context;
2009af78:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
2009af7c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
2009af80:	0099ff40 	call	20099ff4 <alt_tick>
2009af84:	e0bffc17 	ldw	r2,-16(fp)
2009af88:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2009af8c:	e0bffe17 	ldw	r2,-8(fp)
2009af90:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
2009af94:	e037883a 	mov	sp,fp
2009af98:	dfc00117 	ldw	ra,4(sp)
2009af9c:	df000017 	ldw	fp,0(sp)
2009afa0:	dec00204 	addi	sp,sp,8
2009afa4:	f800283a 	ret

2009afa8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
2009afa8:	defff804 	addi	sp,sp,-32
2009afac:	dfc00715 	stw	ra,28(sp)
2009afb0:	df000615 	stw	fp,24(sp)
2009afb4:	df000604 	addi	fp,sp,24
2009afb8:	e13ffc15 	stw	r4,-16(fp)
2009afbc:	e17ffd15 	stw	r5,-12(fp)
2009afc0:	e1bffe15 	stw	r6,-8(fp)
2009afc4:	e1ffff15 	stw	r7,-4(fp)
2009afc8:	e0bfff17 	ldw	r2,-4(fp)
2009afcc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
2009afd0:	00800034 	movhi	r2,0
2009afd4:	108aba04 	addi	r2,r2,10984
2009afd8:	10800017 	ldw	r2,0(r2)
2009afdc:	1000041e 	bne	r2,zero,2009aff0 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
2009afe0:	00800034 	movhi	r2,0
2009afe4:	108aba04 	addi	r2,r2,10984
2009afe8:	e0fffb17 	ldw	r3,-20(fp)
2009afec:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
2009aff0:	e0bffc17 	ldw	r2,-16(fp)
2009aff4:	10800104 	addi	r2,r2,4
2009aff8:	00c001c4 	movi	r3,7
2009affc:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
2009b000:	d8000015 	stw	zero,0(sp)
2009b004:	e13ffd17 	ldw	r4,-12(fp)
2009b008:	e17ffe17 	ldw	r5,-8(fp)
2009b00c:	018802b4 	movhi	r6,8202
2009b010:	31abcd04 	addi	r6,r6,-20684
2009b014:	e1fffc17 	ldw	r7,-16(fp)
2009b018:	009d3c40 	call	2009d3c4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
2009b01c:	e037883a 	mov	sp,fp
2009b020:	dfc00117 	ldw	ra,4(sp)
2009b024:	df000017 	ldw	fp,0(sp)
2009b028:	dec00204 	addi	sp,sp,8
2009b02c:	f800283a 	ret

2009b030 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2009b030:	defffe04 	addi	sp,sp,-8
2009b034:	dfc00115 	stw	ra,4(sp)
2009b038:	df000015 	stw	fp,0(sp)
2009b03c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2009b040:	00800034 	movhi	r2,0
2009b044:	108a9c04 	addi	r2,r2,10864
2009b048:	10800017 	ldw	r2,0(r2)
2009b04c:	10000526 	beq	r2,zero,2009b064 <alt_get_errno+0x34>
2009b050:	00800034 	movhi	r2,0
2009b054:	108a9c04 	addi	r2,r2,10864
2009b058:	10800017 	ldw	r2,0(r2)
2009b05c:	103ee83a 	callr	r2
2009b060:	00000206 	br	2009b06c <alt_get_errno+0x3c>
2009b064:	00800034 	movhi	r2,0
2009b068:	108ab204 	addi	r2,r2,10952
}
2009b06c:	e037883a 	mov	sp,fp
2009b070:	dfc00117 	ldw	ra,4(sp)
2009b074:	df000017 	ldw	fp,0(sp)
2009b078:	dec00204 	addi	sp,sp,8
2009b07c:	f800283a 	ret

2009b080 <alt_msgdma_write_standard_descriptor>:
 */
static int alt_msgdma_write_standard_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_standard_descriptor *descriptor)
{
2009b080:	defffc04 	addi	sp,sp,-16
2009b084:	df000315 	stw	fp,12(sp)
2009b088:	df000304 	addi	fp,sp,12
2009b08c:	e13ffd15 	stw	r4,-12(fp)
2009b090:	e17ffe15 	stw	r5,-8(fp)
2009b094:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
2009b098:	e0bffd17 	ldw	r2,-12(fp)
2009b09c:	10800037 	ldwio	r2,0(r2)
2009b0a0:	1080010c 	andi	r2,r2,4
2009b0a4:	10000226 	beq	r2,zero,2009b0b0 <alt_msgdma_write_standard_descriptor+0x30>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
		is non-blocking*/
        return -ENOSPC;
2009b0a8:	00bff904 	movi	r2,-28
2009b0ac:	00001506 	br	2009b104 <alt_msgdma_write_standard_descriptor+0x84>
    }

	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base, 
2009b0b0:	e0bfff17 	ldw	r2,-4(fp)
2009b0b4:	10800017 	ldw	r2,0(r2)
2009b0b8:	1007883a 	mov	r3,r2
2009b0bc:	e0bffe17 	ldw	r2,-8(fp)
2009b0c0:	10c00035 	stwio	r3,0(r2)
		(alt_u32)descriptor->read_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base, 
2009b0c4:	e0bffe17 	ldw	r2,-8(fp)
2009b0c8:	10800104 	addi	r2,r2,4
2009b0cc:	e0ffff17 	ldw	r3,-4(fp)
2009b0d0:	18c00117 	ldw	r3,4(r3)
2009b0d4:	10c00035 	stwio	r3,0(r2)
	(	alt_u32)descriptor->write_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base, 
2009b0d8:	e0bffe17 	ldw	r2,-8(fp)
2009b0dc:	10800204 	addi	r2,r2,8
2009b0e0:	e0ffff17 	ldw	r3,-4(fp)
2009b0e4:	18c00217 	ldw	r3,8(r3)
2009b0e8:	10c00035 	stwio	r3,0(r2)
		descriptor->transfer_length);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_STANDARD(descriptor_base, 
2009b0ec:	e0bffe17 	ldw	r2,-8(fp)
2009b0f0:	10800304 	addi	r2,r2,12
2009b0f4:	e0ffff17 	ldw	r3,-4(fp)
2009b0f8:	18c00317 	ldw	r3,12(r3)
2009b0fc:	10c00035 	stwio	r3,0(r2)
		descriptor->control);
        return 0;
2009b100:	0005883a 	mov	r2,zero
}
2009b104:	e037883a 	mov	sp,fp
2009b108:	df000017 	ldw	fp,0(sp)
2009b10c:	dec00104 	addi	sp,sp,4
2009b110:	f800283a 	ret

2009b114 <alt_msgdma_write_extended_descriptor>:
 */
static int alt_msgdma_write_extended_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_extended_descriptor *descriptor)
{
2009b114:	defffc04 	addi	sp,sp,-16
2009b118:	df000315 	stw	fp,12(sp)
2009b11c:	df000304 	addi	fp,sp,12
2009b120:	e13ffd15 	stw	r4,-12(fp)
2009b124:	e17ffe15 	stw	r5,-8(fp)
2009b128:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
2009b12c:	e0bffd17 	ldw	r2,-12(fp)
2009b130:	10800037 	ldwio	r2,0(r2)
2009b134:	1080010c 	andi	r2,r2,4
2009b138:	10000226 	beq	r2,zero,2009b144 <alt_msgdma_write_extended_descriptor+0x30>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
	is non-blocking*/
        return -ENOSPC;
2009b13c:	00bff904 	movi	r2,-28
2009b140:	00003b06 	br	2009b230 <alt_msgdma_write_extended_descriptor+0x11c>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(
2009b144:	e0bfff17 	ldw	r2,-4(fp)
2009b148:	10800017 	ldw	r2,0(r2)
2009b14c:	1007883a 	mov	r3,r2
2009b150:	e0bffe17 	ldw	r2,-8(fp)
2009b154:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	(alt_u32)descriptor->read_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(
2009b158:	e0bffe17 	ldw	r2,-8(fp)
2009b15c:	10800104 	addi	r2,r2,4
2009b160:	e0ffff17 	ldw	r3,-4(fp)
2009b164:	18c00117 	ldw	r3,4(r3)
2009b168:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
		(alt_u32)descriptor->write_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(
2009b16c:	e0bffe17 	ldw	r2,-8(fp)
2009b170:	10800204 	addi	r2,r2,8
2009b174:	e0ffff17 	ldw	r3,-4(fp)
2009b178:	18c00217 	ldw	r3,8(r3)
2009b17c:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(
2009b180:	e0bffe17 	ldw	r2,-8(fp)
2009b184:	10800304 	addi	r2,r2,12
2009b188:	e0ffff17 	ldw	r3,-4(fp)
2009b18c:	18c0030b 	ldhu	r3,12(r3)
2009b190:	18ffffcc 	andi	r3,r3,65535
2009b194:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->sequence_number);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(
2009b198:	e0bffe17 	ldw	r2,-8(fp)
2009b19c:	10800384 	addi	r2,r2,14
2009b1a0:	e0ffff17 	ldw	r3,-4(fp)
2009b1a4:	18c00383 	ldbu	r3,14(r3)
2009b1a8:	18c03fcc 	andi	r3,r3,255
2009b1ac:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(
2009b1b0:	e0bffe17 	ldw	r2,-8(fp)
2009b1b4:	108003c4 	addi	r2,r2,15
2009b1b8:	e0ffff17 	ldw	r3,-4(fp)
2009b1bc:	18c003c3 	ldbu	r3,15(r3)
2009b1c0:	18c03fcc 	andi	r3,r3,255
2009b1c4:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(
2009b1c8:	e0bffe17 	ldw	r2,-8(fp)
2009b1cc:	10800404 	addi	r2,r2,16
2009b1d0:	e0ffff17 	ldw	r3,-4(fp)
2009b1d4:	18c0040b 	ldhu	r3,16(r3)
2009b1d8:	18ffffcc 	andi	r3,r3,65535
2009b1dc:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(
2009b1e0:	e0bffe17 	ldw	r2,-8(fp)
2009b1e4:	10800484 	addi	r2,r2,18
2009b1e8:	e0ffff17 	ldw	r3,-4(fp)
2009b1ec:	18c0048b 	ldhu	r3,18(r3)
2009b1f0:	18ffffcc 	andi	r3,r3,65535
2009b1f4:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base, 0);
2009b1f8:	e0bffe17 	ldw	r2,-8(fp)
2009b1fc:	10800504 	addi	r2,r2,20
2009b200:	0007883a 	mov	r3,zero
2009b204:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base, 0);
2009b208:	e0bffe17 	ldw	r2,-8(fp)
2009b20c:	10800604 	addi	r2,r2,24
2009b210:	0007883a 	mov	r3,zero
2009b214:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(
2009b218:	e0bffe17 	ldw	r2,-8(fp)
2009b21c:	10800704 	addi	r2,r2,28
2009b220:	e0ffff17 	ldw	r3,-4(fp)
2009b224:	18c00717 	ldw	r3,28(r3)
2009b228:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->control);
    return 0;
2009b22c:	0005883a 	mov	r2,zero
}
2009b230:	e037883a 	mov	sp,fp
2009b234:	df000017 	ldw	fp,0(sp)
2009b238:	dec00104 	addi	sp,sp,4
2009b23c:	f800283a 	ret

2009b240 <alt_msgdma_irq>:
 * alt_msgdma_irq()
 *
 * Interrupt handler for the Modular Scatter-Gather DMA controller.
 */
static void alt_msgdma_irq(void *context)
{
2009b240:	defff804 	addi	sp,sp,-32
2009b244:	dfc00715 	stw	ra,28(sp)
2009b248:	df000615 	stw	fp,24(sp)
2009b24c:	df000604 	addi	fp,sp,24
2009b250:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev *dev = (alt_msgdma_dev *) context;
2009b254:	e0bfff17 	ldw	r2,-4(fp)
2009b258:	e0bffa15 	stw	r2,-24(fp)
    alt_irq_context cpu_sr;
    alt_u32 temporary_control;

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
2009b25c:	e0bffa17 	ldw	r2,-24(fp)
2009b260:	10801783 	ldbu	r2,94(r2)
2009b264:	10803fcc 	andi	r2,r2,255
2009b268:	10001126 	beq	r2,zero,2009b2b0 <alt_msgdma_irq+0x70>
    {
        temporary_control = 
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
2009b26c:	e0bffa17 	ldw	r2,-24(fp)
2009b270:	10800617 	ldw	r2,24(r2)
2009b274:	10800037 	ldwio	r2,0(r2)

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
    {
        temporary_control = 
2009b278:	1007883a 	mov	r3,r2
2009b27c:	00bffdc4 	movi	r2,-9
2009b280:	1884703a 	and	r2,r3,r2
2009b284:	e0bffb15 	stw	r2,-20(fp)
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				& ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
2009b288:	e0bffa17 	ldw	r2,-24(fp)
2009b28c:	10800617 	ldw	r2,24(r2)
2009b290:	e0fffb17 	ldw	r3,-20(fp)
2009b294:	10c00035 	stwio	r3,0(r2)
        		temporary_control);
        
        /* clear the IRQ status- W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base,
2009b298:	e0bffa17 	ldw	r2,-24(fp)
2009b29c:	10800617 	ldw	r2,24(r2)
2009b2a0:	10800404 	addi	r2,r2,16
2009b2a4:	00c00044 	movi	r3,1
2009b2a8:	10c00035 	stwio	r3,0(r2)
2009b2ac:	00001106 	br	2009b2f4 <alt_msgdma_irq+0xb4>
        		ALT_MSGDMA_PREFETCHER_STATUS_IRQ_SET_MASK);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
2009b2b0:	e0bffa17 	ldw	r2,-24(fp)
2009b2b4:	10800317 	ldw	r2,12(r2)
2009b2b8:	10800104 	addi	r2,r2,4
2009b2bc:	10800037 	ldwio	r2,0(r2)
2009b2c0:	1007883a 	mov	r3,r2
2009b2c4:	00bffbc4 	movi	r2,-17
2009b2c8:	1884703a 	and	r2,r3,r2
2009b2cc:	e0bffb15 	stw	r2,-20(fp)
    			& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
2009b2d0:	e0bffa17 	ldw	r2,-24(fp)
2009b2d4:	10800317 	ldw	r2,12(r2)
2009b2d8:	10800104 	addi	r2,r2,4
2009b2dc:	e0fffb17 	ldw	r3,-20(fp)
2009b2e0:	10c00035 	stwio	r3,0(r2)
    	/* clear the IRQ status */
    	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
2009b2e4:	e0bffa17 	ldw	r2,-24(fp)
2009b2e8:	10800317 	ldw	r2,12(r2)
2009b2ec:	00c08004 	movi	r3,512
2009b2f0:	10c00035 	stwio	r3,0(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
2009b2f4:	e0bffa17 	ldw	r2,-24(fp)
2009b2f8:	10800b17 	ldw	r2,44(r2)
2009b2fc:	10001226 	beq	r2,zero,2009b348 <alt_msgdma_irq+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2009b300:	0005303a 	rdctl	r2,status
2009b304:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2009b308:	e0fffd17 	ldw	r3,-12(fp)
2009b30c:	00bfff84 	movi	r2,-2
2009b310:	1884703a 	and	r2,r3,r2
2009b314:	1001703a 	wrctl	status,r2
  
  return context;
2009b318:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
2009b31c:	e0bffc15 	stw	r2,-16(fp)
        dev->callback (dev->callback_context);
2009b320:	e0bffa17 	ldw	r2,-24(fp)
2009b324:	10800b17 	ldw	r2,44(r2)
2009b328:	e0fffa17 	ldw	r3,-24(fp)
2009b32c:	18c00c17 	ldw	r3,48(r3)
2009b330:	1809883a 	mov	r4,r3
2009b334:	103ee83a 	callr	r2
2009b338:	e0bffc17 	ldw	r2,-16(fp)
2009b33c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2009b340:	e0bffe17 	ldw	r2,-8(fp)
2009b344:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
2009b348:	e0bffa17 	ldw	r2,-24(fp)
2009b34c:	10801783 	ldbu	r2,94(r2)
2009b350:	10803fcc 	andi	r2,r2,255
2009b354:	10000a26 	beq	r2,zero,2009b380 <alt_msgdma_irq+0x140>
    {
    	temporary_control = 
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
2009b358:	e0bffa17 	ldw	r2,-24(fp)
2009b35c:	10800617 	ldw	r2,24(r2)
2009b360:	10800037 	ldwio	r2,0(r2)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
2009b364:	10800214 	ori	r2,r2,8
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
    {
    	temporary_control = 
2009b368:	e0bffb15 	stw	r2,-20(fp)
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
    	
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
2009b36c:	e0bffa17 	ldw	r2,-24(fp)
2009b370:	10800617 	ldw	r2,24(r2)
2009b374:	e0fffb17 	ldw	r3,-20(fp)
2009b378:	10c00035 	stwio	r3,0(r2)
2009b37c:	00000b06 	br	2009b3ac <alt_msgdma_irq+0x16c>
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
2009b380:	e0bffa17 	ldw	r2,-24(fp)
2009b384:	10800317 	ldw	r2,12(r2)
2009b388:	10800104 	addi	r2,r2,4
2009b38c:	10800037 	ldwio	r2,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
2009b390:	10800414 	ori	r2,r2,16
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
2009b394:	e0bffb15 	stw	r2,-20(fp)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
2009b398:	e0bffa17 	ldw	r2,-24(fp)
2009b39c:	10800317 	ldw	r2,12(r2)
2009b3a0:	10800104 	addi	r2,r2,4
2009b3a4:	e0fffb17 	ldw	r3,-20(fp)
2009b3a8:	10c00035 	stwio	r3,0(r2)
    }

    return;
2009b3ac:	0001883a 	nop
}
2009b3b0:	e037883a 	mov	sp,fp
2009b3b4:	dfc00117 	ldw	ra,4(sp)
2009b3b8:	df000017 	ldw	fp,0(sp)
2009b3bc:	dec00204 	addi	sp,sp,8
2009b3c0:	f800283a 	ret

2009b3c4 <alt_msgdma_construct_standard_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
2009b3c4:	defffb04 	addi	sp,sp,-20
2009b3c8:	df000415 	stw	fp,16(sp)
2009b3cc:	df000404 	addi	fp,sp,16
2009b3d0:	e13ffc15 	stw	r4,-16(fp)
2009b3d4:	e17ffd15 	stw	r5,-12(fp)
2009b3d8:	e1bffe15 	stw	r6,-8(fp)
2009b3dc:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
2009b3e0:	e0bffc17 	ldw	r2,-16(fp)
2009b3e4:	10c01217 	ldw	r3,72(r2)
2009b3e8:	e0800117 	ldw	r2,4(fp)
2009b3ec:	18800436 	bltu	r3,r2,2009b400 <alt_msgdma_construct_standard_descriptor+0x3c>
       dev->enhanced_features != 0
2009b3f0:	e0bffc17 	ldw	r2,-16(fp)
2009b3f4:	10801703 	ldbu	r2,92(r2)
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
2009b3f8:	10803fcc 	andi	r2,r2,255
2009b3fc:	10000226 	beq	r2,zero,2009b408 <alt_msgdma_construct_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
2009b400:	00bffa84 	movi	r2,-22
2009b404:	00000e06 	br	2009b440 <alt_msgdma_construct_standard_descriptor+0x7c>
    }
    descriptor->read_address = read_address;
2009b408:	e0bffd17 	ldw	r2,-12(fp)
2009b40c:	e0fffe17 	ldw	r3,-8(fp)
2009b410:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
2009b414:	e0bffd17 	ldw	r2,-12(fp)
2009b418:	e0ffff17 	ldw	r3,-4(fp)
2009b41c:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
2009b420:	e0bffd17 	ldw	r2,-12(fp)
2009b424:	e0c00117 	ldw	r3,4(fp)
2009b428:	10c00215 	stw	r3,8(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
2009b42c:	e0800217 	ldw	r2,8(fp)
2009b430:	10e00034 	orhi	r3,r2,32768
2009b434:	e0bffd17 	ldw	r2,-12(fp)
2009b438:	10c00315 	stw	r3,12(r2)
    
    return 0;
2009b43c:	0005883a 	mov	r2,zero
}
2009b440:	e037883a 	mov	sp,fp
2009b444:	df000017 	ldw	fp,0(sp)
2009b448:	dec00104 	addi	sp,sp,4
2009b44c:	f800283a 	ret

2009b450 <alt_msgdma_construct_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
2009b450:	defff604 	addi	sp,sp,-40
2009b454:	df000915 	stw	fp,36(sp)
2009b458:	df000904 	addi	fp,sp,36
2009b45c:	e13ff715 	stw	r4,-36(fp)
2009b460:	e17ff815 	stw	r5,-32(fp)
2009b464:	e1bff915 	stw	r6,-28(fp)
2009b468:	e1fffa15 	stw	r7,-24(fp)
2009b46c:	e1800317 	ldw	r6,12(fp)
2009b470:	e1400417 	ldw	r5,16(fp)
2009b474:	e1000517 	ldw	r4,20(fp)
2009b478:	e0c00617 	ldw	r3,24(fp)
2009b47c:	e0800717 	ldw	r2,28(fp)
2009b480:	e1bffb0d 	sth	r6,-20(fp)
2009b484:	e17ffc05 	stb	r5,-16(fp)
2009b488:	e13ffd05 	stb	r4,-12(fp)
2009b48c:	e0fffe0d 	sth	r3,-8(fp)
2009b490:	e0bfff0d 	sth	r2,-4(fp)
    if(dev->max_byte < length ||
2009b494:	e0bff717 	ldw	r2,-36(fp)
2009b498:	10c01217 	ldw	r3,72(r2)
2009b49c:	e0800117 	ldw	r2,4(fp)
2009b4a0:	18801936 	bltu	r3,r2,2009b508 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
2009b4a4:	e13ff717 	ldw	r4,-36(fp)
2009b4a8:	20801317 	ldw	r2,76(r4)
2009b4ac:	20c01417 	ldw	r3,80(r4)
2009b4b0:	e13ffe0b 	ldhu	r4,-8(fp)
2009b4b4:	213fffcc 	andi	r4,r4,65535
2009b4b8:	2015883a 	mov	r10,r4
2009b4bc:	0017883a 	mov	r11,zero
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
2009b4c0:	1ac01136 	bltu	r3,r11,2009b508 <alt_msgdma_construct_extended_descriptor+0xb8>
2009b4c4:	58c0011e 	bne	r11,r3,2009b4cc <alt_msgdma_construct_extended_descriptor+0x7c>
2009b4c8:	12800f36 	bltu	r2,r10,2009b508 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
2009b4cc:	e13ff717 	ldw	r4,-36(fp)
2009b4d0:	20801317 	ldw	r2,76(r4)
2009b4d4:	20c01417 	ldw	r3,80(r4)
2009b4d8:	e13fff0b 	ldhu	r4,-4(fp)
2009b4dc:	213fffcc 	andi	r4,r4,65535
2009b4e0:	2011883a 	mov	r8,r4
2009b4e4:	0013883a 	mov	r9,zero
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
2009b4e8:	1a400736 	bltu	r3,r9,2009b508 <alt_msgdma_construct_extended_descriptor+0xb8>
2009b4ec:	48c0011e 	bne	r9,r3,2009b4f4 <alt_msgdma_construct_extended_descriptor+0xa4>
2009b4f0:	12000536 	bltu	r2,r8,2009b508 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
2009b4f4:	e0bff717 	ldw	r2,-36(fp)
2009b4f8:	10801703 	ldbu	r2,92(r2)
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
2009b4fc:	10803fcc 	andi	r2,r2,255
2009b500:	10800060 	cmpeqi	r2,r2,1
2009b504:	1000021e 	bne	r2,zero,2009b510 <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
2009b508:	00bffa84 	movi	r2,-22
2009b50c:	00002106 	br	2009b594 <alt_msgdma_construct_extended_descriptor+0x144>
    }
    
    descriptor->read_address_low = read_address;
2009b510:	e0bff817 	ldw	r2,-32(fp)
2009b514:	e0fff917 	ldw	r3,-28(fp)
2009b518:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_low = write_address;
2009b51c:	e0bff817 	ldw	r2,-32(fp)
2009b520:	e0fffa17 	ldw	r3,-24(fp)
2009b524:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
2009b528:	e0bff817 	ldw	r2,-32(fp)
2009b52c:	e0c00117 	ldw	r3,4(fp)
2009b530:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
2009b534:	e0bff817 	ldw	r2,-32(fp)
2009b538:	e0fffb0b 	ldhu	r3,-20(fp)
2009b53c:	10c0030d 	sth	r3,12(r2)
    descriptor->read_burst_count = read_burst_count;
2009b540:	e0bff817 	ldw	r2,-32(fp)
2009b544:	e0fffc03 	ldbu	r3,-16(fp)
2009b548:	10c00385 	stb	r3,14(r2)
    descriptor->write_burst_count = write_burst_count;
2009b54c:	e0bff817 	ldw	r2,-32(fp)
2009b550:	e0fffd03 	ldbu	r3,-12(fp)
2009b554:	10c003c5 	stb	r3,15(r2)
    descriptor->read_stride = read_stride;
2009b558:	e0bff817 	ldw	r2,-32(fp)
2009b55c:	e0fffe0b 	ldhu	r3,-8(fp)
2009b560:	10c0040d 	sth	r3,16(r2)
    descriptor->write_stride = write_stride;
2009b564:	e0bff817 	ldw	r2,-32(fp)
2009b568:	e0ffff0b 	ldhu	r3,-4(fp)
2009b56c:	10c0048d 	sth	r3,18(r2)
    descriptor->read_address_high = NULL;
2009b570:	e0bff817 	ldw	r2,-32(fp)
2009b574:	10000515 	stw	zero,20(r2)
    descriptor->write_address_high = NULL;
2009b578:	e0bff817 	ldw	r2,-32(fp)
2009b57c:	10000615 	stw	zero,24(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
2009b580:	e0800217 	ldw	r2,8(fp)
2009b584:	10e00034 	orhi	r3,r2,32768
2009b588:	e0bff817 	ldw	r2,-32(fp)
2009b58c:	10c00715 	stw	r3,28(r2)

  return 0 ;
2009b590:	0005883a 	mov	r2,zero

}
2009b594:	e037883a 	mov	sp,fp
2009b598:	df000017 	ldw	fp,0(sp)
2009b59c:	dec00104 	addi	sp,sp,4
2009b5a0:	f800283a 	ret

2009b5a4 <alt_msgdma_descriptor_async_transfer>:
 */
static int alt_msgdma_descriptor_async_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
2009b5a4:	defff004 	addi	sp,sp,-64
2009b5a8:	dfc00f15 	stw	ra,60(sp)
2009b5ac:	df000e15 	stw	fp,56(sp)
2009b5b0:	df000e04 	addi	fp,sp,56
2009b5b4:	e13ffd15 	stw	r4,-12(fp)
2009b5b8:	e17ffe15 	stw	r5,-8(fp)
2009b5bc:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control = 0;
2009b5c0:	e03ff315 	stw	zero,-52(fp)
    alt_irq_context context = 0;
2009b5c4:	e03ff415 	stw	zero,-48(fp)
    alt_u16 counter = 0;
2009b5c8:	e03ff20d 	sth	zero,-56(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
2009b5cc:	e0bffd17 	ldw	r2,-12(fp)
2009b5d0:	10800317 	ldw	r2,12(r2)
2009b5d4:	10800204 	addi	r2,r2,8
2009b5d8:	10800037 	ldwio	r2,0(r2)
	alt_msgdma_extended_descriptor *extended_desc)
{
    alt_u32 control = 0;
    alt_irq_context context = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
2009b5dc:	10bfffcc 	andi	r2,r2,65535
2009b5e0:	e0bff515 	stw	r2,-44(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
2009b5e4:	e0bffd17 	ldw	r2,-12(fp)
2009b5e8:	10800317 	ldw	r2,12(r2)
2009b5ec:	10800204 	addi	r2,r2,8
2009b5f0:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
2009b5f4:	1004d43a 	srli	r2,r2,16
2009b5f8:	e0bff615 	stw	r2,-40(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
2009b5fc:	e0bffd17 	ldw	r2,-12(fp)
2009b600:	10800917 	ldw	r2,36(r2)
2009b604:	e0fff617 	ldw	r3,-40(fp)
2009b608:	1880042e 	bgeu	r3,r2,2009b61c <alt_msgdma_descriptor_async_transfer+0x78>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
2009b60c:	e0bffd17 	ldw	r2,-12(fp)
2009b610:	10800917 	ldw	r2,36(r2)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
2009b614:	e0fff517 	ldw	r3,-44(fp)
2009b618:	18800236 	bltu	r3,r2,2009b624 <alt_msgdma_descriptor_async_transfer+0x80>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
	{
		/*at least one write or read FIFO descriptor buffer is full,
		returning so that this function is non-blocking*/
		return -ENOSPC;
2009b61c:	00bff904 	movi	r2,-28
2009b620:	00008f06 	br	2009b860 <alt_msgdma_descriptor_async_transfer+0x2bc>
	ALT_SEM_PEND (dev->regs_lock, 0);
	
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	read or write masters  */
	/* stop issuing more descriptors */
	control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
2009b624:	00800804 	movi	r2,32
2009b628:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2009b62c:	0005303a 	rdctl	r2,status
2009b630:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2009b634:	e0fff717 	ldw	r3,-36(fp)
2009b638:	00bfff84 	movi	r2,-2
2009b63c:	1884703a 	and	r2,r3,r2
2009b640:	1001703a 	wrctl	status,r2
  
  return context;
2009b644:	e0bff717 	ldw	r2,-36(fp)
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
2009b648:	e0bff415 	stw	r2,-48(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
2009b64c:	e0bffd17 	ldw	r2,-12(fp)
2009b650:	10800317 	ldw	r2,12(r2)
2009b654:	10800104 	addi	r2,r2,4
2009b658:	e0fff317 	ldw	r3,-52(fp)
2009b65c:	10c00035 	stwio	r3,0(r2)
	/*
	* Clear any (previous) status register information
	* that might occlude our error checking later.
	*/
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
2009b660:	e0bffd17 	ldw	r2,-12(fp)
2009b664:	10800317 	ldw	r2,12(r2)
2009b668:	e0fffd17 	ldw	r3,-12(fp)
2009b66c:	18c00317 	ldw	r3,12(r3)
2009b670:	18c00037 	ldwio	r3,0(r3)
2009b674:	10c00035 	stwio	r3,0(r2)
2009b678:	e0bff417 	ldw	r2,-48(fp)
2009b67c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2009b680:	e0bff817 	ldw	r2,-32(fp)
2009b684:	1001703a 	wrctl	status,r2
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
2009b688:	e0bffe17 	ldw	r2,-8(fp)
2009b68c:	10001a26 	beq	r2,zero,2009b6f8 <alt_msgdma_descriptor_async_transfer+0x154>
2009b690:	e0bfff17 	ldw	r2,-4(fp)
2009b694:	1000181e 	bne	r2,zero,2009b6f8 <alt_msgdma_descriptor_async_transfer+0x154>
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
2009b698:	00000d06 	br	2009b6d0 <alt_msgdma_descriptor_async_transfer+0x12c>
		dev->csr_base, dev->descriptor_base, standard_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
2009b69c:	01000044 	movi	r4,1
2009b6a0:	009d0000 	call	2009d000 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
2009b6a4:	e0bff20b 	ldhu	r2,-56(fp)
2009b6a8:	1084e230 	cmpltui	r2,r2,5000
2009b6ac:	1000051e 	bne	r2,zero,2009b6c4 <alt_msgdma_descriptor_async_transfer+0x120>
            {
                alt_printf("time out after 5 msec while waiting" 
2009b6b0:	01000034 	movhi	r4,0
2009b6b4:	21024004 	addi	r4,r4,2304
2009b6b8:	009da400 	call	2009da40 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
2009b6bc:	00bff084 	movi	r2,-62
2009b6c0:	00006706 	br	2009b860 <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
2009b6c4:	e0bff20b 	ldhu	r2,-56(fp)
2009b6c8:	10800044 	addi	r2,r2,1
2009b6cc:	e0bff20d 	sth	r2,-56(fp)

    if (NULL != standard_desc && NULL == extended_desc)
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
2009b6d0:	e0bffd17 	ldw	r2,-12(fp)
2009b6d4:	10c00317 	ldw	r3,12(r2)
2009b6d8:	e0bffd17 	ldw	r2,-12(fp)
2009b6dc:	10800417 	ldw	r2,16(r2)
2009b6e0:	1809883a 	mov	r4,r3
2009b6e4:	100b883a 	mov	r5,r2
2009b6e8:	e1bffe17 	ldw	r6,-8(fp)
2009b6ec:	009b0800 	call	2009b080 <alt_msgdma_write_standard_descriptor>
2009b6f0:	103fea1e 	bne	r2,zero,2009b69c <__flash_rwdata_start+0xffffcac8>
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
2009b6f4:	00001f06 	br	2009b774 <alt_msgdma_descriptor_async_transfer+0x1d0>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
2009b6f8:	e0bffe17 	ldw	r2,-8(fp)
2009b6fc:	10001b1e 	bne	r2,zero,2009b76c <alt_msgdma_descriptor_async_transfer+0x1c8>
2009b700:	e0bfff17 	ldw	r2,-4(fp)
2009b704:	10001926 	beq	r2,zero,2009b76c <alt_msgdma_descriptor_async_transfer+0x1c8>
    {
        counter = 0; /* reset counter */
2009b708:	e03ff20d 	sth	zero,-56(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
2009b70c:	00000d06 	br	2009b744 <alt_msgdma_descriptor_async_transfer+0x1a0>
		dev->csr_base, 
		dev->descriptor_base, 
		extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
2009b710:	01000044 	movi	r4,1
2009b714:	009d0000 	call	2009d000 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
2009b718:	e0bff20b 	ldhu	r2,-56(fp)
2009b71c:	1084e230 	cmpltui	r2,r2,5000
2009b720:	1000051e 	bne	r2,zero,2009b738 <alt_msgdma_descriptor_async_transfer+0x194>
            {
                alt_printf("time out after 5 msec while waiting free FIFO buffer" 
2009b724:	01000034 	movhi	r4,0
2009b728:	21025604 	addi	r4,r4,2392
2009b72c:	009da400 	call	2009da40 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
2009b730:	00bff084 	movi	r2,-62
2009b734:	00004a06 	br	2009b860 <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
2009b738:	e0bff20b 	ldhu	r2,-56(fp)
2009b73c:	10800044 	addi	r2,r2,1
2009b740:	e0bff20d 	sth	r2,-56(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
2009b744:	e0bffd17 	ldw	r2,-12(fp)
2009b748:	10c00317 	ldw	r3,12(r2)
2009b74c:	e0bffd17 	ldw	r2,-12(fp)
2009b750:	10800417 	ldw	r2,16(r2)
2009b754:	1809883a 	mov	r4,r3
2009b758:	100b883a 	mov	r5,r2
2009b75c:	e1bfff17 	ldw	r6,-4(fp)
2009b760:	009b1140 	call	2009b114 <alt_msgdma_write_extended_descriptor>
2009b764:	103fea1e 	bne	r2,zero,2009b710 <__flash_rwdata_start+0xffffcb3c>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
2009b768:	00000206 	br	2009b774 <alt_msgdma_descriptor_async_transfer+0x1d0>
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
2009b76c:	00bfffc4 	movi	r2,-1
2009b770:	00003b06 	br	2009b860 <alt_msgdma_descriptor_async_transfer+0x2bc>
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
2009b774:	e0bffd17 	ldw	r2,-12(fp)
2009b778:	10800b17 	ldw	r2,44(r2)
2009b77c:	10001c26 	beq	r2,zero,2009b7f0 <alt_msgdma_descriptor_async_transfer+0x24c>
    {

        control |= (dev->control |
2009b780:	e0bffd17 	ldw	r2,-12(fp)
2009b784:	10c00d17 	ldw	r3,52(r2)
2009b788:	e0bff317 	ldw	r2,-52(fp)
2009b78c:	1884b03a 	or	r2,r3,r2
2009b790:	10800514 	ori	r2,r2,20
2009b794:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
2009b798:	e0fff317 	ldw	r3,-52(fp)
2009b79c:	00bff7c4 	movi	r2,-33
2009b7a0:	1884703a 	and	r2,r3,r2
2009b7a4:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2009b7a8:	0005303a 	rdctl	r2,status
2009b7ac:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2009b7b0:	e0fff917 	ldw	r3,-28(fp)
2009b7b4:	00bfff84 	movi	r2,-2
2009b7b8:	1884703a 	and	r2,r3,r2
2009b7bc:	1001703a 	wrctl	status,r2
  
  return context;
2009b7c0:	e0bff917 	ldw	r2,-28(fp)
    /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
2009b7c4:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
2009b7c8:	e0bffd17 	ldw	r2,-12(fp)
2009b7cc:	10800317 	ldw	r2,12(r2)
2009b7d0:	10800104 	addi	r2,r2,4
2009b7d4:	e0fff317 	ldw	r3,-52(fp)
2009b7d8:	10c00035 	stwio	r3,0(r2)
2009b7dc:	e0bff417 	ldw	r2,-48(fp)
2009b7e0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2009b7e4:	e0bffa17 	ldw	r2,-24(fp)
2009b7e8:	1001703a 	wrctl	status,r2
2009b7ec:	00001b06 	br	2009b85c <alt_msgdma_descriptor_async_transfer+0x2b8>
    *   - Stop on an error with any particular descriptor
    *   - Disable interrupt generation
    */
    else
    {
        control |= (dev->control |
2009b7f0:	e0bffd17 	ldw	r2,-12(fp)
2009b7f4:	10c00d17 	ldw	r3,52(r2)
2009b7f8:	e0bff317 	ldw	r2,-52(fp)
2009b7fc:	1884b03a 	or	r2,r3,r2
2009b800:	10800114 	ori	r2,r2,4
2009b804:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
2009b808:	e0fff317 	ldw	r3,-52(fp)
2009b80c:	00bff3c4 	movi	r2,-49
2009b810:	1884703a 	and	r2,r3,r2
2009b814:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2009b818:	0005303a 	rdctl	r2,status
2009b81c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2009b820:	e0fffb17 	ldw	r3,-20(fp)
2009b824:	00bfff84 	movi	r2,-2
2009b828:	1884703a 	and	r2,r3,r2
2009b82c:	1001703a 	wrctl	status,r2
  
  return context;
2009b830:	e0bffb17 	ldw	r2,-20(fp)
                   (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all();
2009b834:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
2009b838:	e0bffd17 	ldw	r2,-12(fp)
2009b83c:	10800317 	ldw	r2,12(r2)
2009b840:	10800104 	addi	r2,r2,4
2009b844:	e0fff317 	ldw	r3,-52(fp)
2009b848:	10c00035 	stwio	r3,0(r2)
2009b84c:	e0bff417 	ldw	r2,-48(fp)
2009b850:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2009b854:	e0bffc17 	ldw	r2,-16(fp)
2009b858:	1001703a 	wrctl	status,r2
	 * Now that access to the registers is complete, release the registers
     * semaphore so that other threads can access the registers.
     */
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
2009b85c:	0005883a 	mov	r2,zero
}
2009b860:	e037883a 	mov	sp,fp
2009b864:	dfc00117 	ldw	ra,4(sp)
2009b868:	df000017 	ldw	fp,0(sp)
2009b86c:	dec00204 	addi	sp,sp,8
2009b870:	f800283a 	ret

2009b874 <alt_msgdma_descriptor_sync_transfer>:
 */
static int alt_msgdma_descriptor_sync_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
2009b874:	defff004 	addi	sp,sp,-64
2009b878:	dfc00f15 	stw	ra,60(sp)
2009b87c:	df000e15 	stw	fp,56(sp)
2009b880:	df000e04 	addi	fp,sp,56
2009b884:	e13ffd15 	stw	r4,-12(fp)
2009b888:	e17ffe15 	stw	r5,-8(fp)
2009b88c:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control=0;
2009b890:	e03ff615 	stw	zero,-40(fp)
    alt_irq_context context=0;
2009b894:	e03ff715 	stw	zero,-36(fp)
    alt_u32 csr_status = 0;
2009b898:	e03ff215 	stw	zero,-56(fp)
    alt_u16 counter = 0;
2009b89c:	e03ff30d 	sth	zero,-52(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
2009b8a0:	e0bffd17 	ldw	r2,-12(fp)
2009b8a4:	10800317 	ldw	r2,12(r2)
2009b8a8:	10800204 	addi	r2,r2,8
2009b8ac:	10800037 	ldwio	r2,0(r2)
{
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
2009b8b0:	10bfffcc 	andi	r2,r2,65535
2009b8b4:	e0bff415 	stw	r2,-48(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
2009b8b8:	e0bffd17 	ldw	r2,-12(fp)
2009b8bc:	10800317 	ldw	r2,12(r2)
2009b8c0:	10800204 	addi	r2,r2,8
2009b8c4:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
2009b8c8:	1004d43a 	srli	r2,r2,16
2009b8cc:	e0bff515 	stw	r2,-44(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
    alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK | 
2009b8d0:	00807804 	movi	r2,480
2009b8d4:	e0bff815 	stw	r2,-32(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
2009b8d8:	00001906 	br	2009b940 <alt_msgdma_descriptor_sync_transfer+0xcc>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
2009b8dc:	01000044 	movi	r4,1
2009b8e0:	009d0000 	call	2009d000 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
2009b8e4:	e0bff30b 	ldhu	r2,-52(fp)
2009b8e8:	1084e230 	cmpltui	r2,r2,5000
2009b8ec:	1000051e 	bne	r2,zero,2009b904 <alt_msgdma_descriptor_sync_transfer+0x90>
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
2009b8f0:	01000034 	movhi	r4,0
2009b8f4:	21026c04 	addi	r4,r4,2480
2009b8f8:	009da400 	call	2009da40 <alt_printf>
				" for storing descriptor\n");
            return -ETIME;
2009b8fc:	00bff084 	movi	r2,-62
2009b900:	0000b506 	br	2009bbd8 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;  
2009b904:	e0bff30b 	ldhu	r2,-52(fp)
2009b908:	10800044 	addi	r2,r2,1
2009b90c:	e0bff30d 	sth	r2,-52(fp)
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
2009b910:	e0bffd17 	ldw	r2,-12(fp)
2009b914:	10800317 	ldw	r2,12(r2)
2009b918:	10800204 	addi	r2,r2,8
2009b91c:	10800037 	ldwio	r2,0(r2)
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
				" for storing descriptor\n");
            return -ETIME;
        }
        counter++;  
        fifo_read_fill_level = (
2009b920:	10bfffcc 	andi	r2,r2,65535
2009b924:	e0bff415 	stw	r2,-48(fp)
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
2009b928:	e0bffd17 	ldw	r2,-12(fp)
2009b92c:	10800317 	ldw	r2,12(r2)
2009b930:	10800204 	addi	r2,r2,8
2009b934:	10800037 	ldwio	r2,0(r2)
        counter++;  
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
2009b938:	1004d43a 	srli	r2,r2,16
2009b93c:	e0bff515 	stw	r2,-44(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
2009b940:	e0bffd17 	ldw	r2,-12(fp)
2009b944:	10800917 	ldw	r2,36(r2)
2009b948:	e0fff517 	ldw	r3,-44(fp)
2009b94c:	18bfe32e 	bgeu	r3,r2,2009b8dc <__flash_rwdata_start+0xffffcd08>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
2009b950:	e0bffd17 	ldw	r2,-12(fp)
2009b954:	10800917 	ldw	r2,36(r2)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
2009b958:	e0fff417 	ldw	r3,-48(fp)
2009b95c:	18bfdf2e 	bgeu	r3,r2,2009b8dc <__flash_rwdata_start+0xffffcd08>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2009b960:	0005303a 	rdctl	r2,status
2009b964:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2009b968:	e0fff917 	ldw	r3,-28(fp)
2009b96c:	00bfff84 	movi	r2,-2
2009b970:	1884703a 	and	r2,r3,r2
2009b974:	1001703a 	wrctl	status,r2
  
  return context;
2009b978:	e0bff917 	ldw	r2,-28(fp)
	ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
2009b97c:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
2009b980:	e0bffd17 	ldw	r2,-12(fp)
2009b984:	10800317 	ldw	r2,12(r2)
2009b988:	10800104 	addi	r2,r2,4
2009b98c:	00c00804 	movi	r3,32
2009b990:	10c00035 	stwio	r3,0(r2)
        ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
2009b994:	e0bffd17 	ldw	r2,-12(fp)
2009b998:	10800317 	ldw	r2,12(r2)
2009b99c:	e0fffd17 	ldw	r3,-12(fp)
2009b9a0:	18c00317 	ldw	r3,12(r3)
2009b9a4:	18c00037 	ldwio	r3,0(r3)
2009b9a8:	10c00035 	stwio	r3,0(r2)
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
2009b9ac:	e0bffe17 	ldw	r2,-8(fp)
2009b9b0:	10001b26 	beq	r2,zero,2009ba20 <alt_msgdma_descriptor_sync_transfer+0x1ac>
2009b9b4:	e0bfff17 	ldw	r2,-4(fp)
2009b9b8:	1000191e 	bne	r2,zero,2009ba20 <alt_msgdma_descriptor_sync_transfer+0x1ac>
    {
        counter = 0; /* reset counter */
2009b9bc:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
2009b9c0:	00000d06 	br	2009b9f8 <alt_msgdma_descriptor_sync_transfer+0x184>
			dev->csr_base, dev->descriptor_base, standard_desc))
        {     
            alt_busy_sleep(1); /* delay 1us */
2009b9c4:	01000044 	movi	r4,1
2009b9c8:	009d0000 	call	2009d000 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
2009b9cc:	e0bff30b 	ldhu	r2,-52(fp)
2009b9d0:	1084e230 	cmpltui	r2,r2,5000
2009b9d4:	1000051e 	bne	r2,zero,2009b9ec <alt_msgdma_descriptor_sync_transfer+0x178>
            {
                alt_printf("time out after 5 msec while writing standard" 
2009b9d8:	01000034 	movhi	r4,0
2009b9dc:	21028004 	addi	r4,r4,2560
2009b9e0:	009da400 	call	2009da40 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
2009b9e4:	00bff084 	movi	r2,-62
2009b9e8:	00007b06 	br	2009bbd8 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;    
2009b9ec:	e0bff30b 	ldhu	r2,-52(fp)
2009b9f0:	10800044 	addi	r2,r2,1
2009b9f4:	e0bff30d 	sth	r2,-52(fp)
    if (NULL != standard_desc && NULL == extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
2009b9f8:	e0bffd17 	ldw	r2,-12(fp)
2009b9fc:	10c00317 	ldw	r3,12(r2)
2009ba00:	e0bffd17 	ldw	r2,-12(fp)
2009ba04:	10800417 	ldw	r2,16(r2)
2009ba08:	1809883a 	mov	r4,r3
2009ba0c:	100b883a 	mov	r5,r2
2009ba10:	e1bffe17 	ldw	r6,-8(fp)
2009ba14:	009b0800 	call	2009b080 <alt_msgdma_write_standard_descriptor>
2009ba18:	103fea1e 	bne	r2,zero,2009b9c4 <__flash_rwdata_start+0xffffcdf0>
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
2009ba1c:	00001f06 	br	2009ba9c <alt_msgdma_descriptor_sync_transfer+0x228>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
2009ba20:	e0bffe17 	ldw	r2,-8(fp)
2009ba24:	10001b1e 	bne	r2,zero,2009ba94 <alt_msgdma_descriptor_sync_transfer+0x220>
2009ba28:	e0bfff17 	ldw	r2,-4(fp)
2009ba2c:	10001926 	beq	r2,zero,2009ba94 <alt_msgdma_descriptor_sync_transfer+0x220>
    {
        counter = 0; /* reset counter */
2009ba30:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
2009ba34:	00000d06 	br	2009ba6c <alt_msgdma_descriptor_sync_transfer+0x1f8>
			dev->csr_base, dev->descriptor_base, extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
2009ba38:	01000044 	movi	r4,1
2009ba3c:	009d0000 	call	2009d000 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
2009ba40:	e0bff30b 	ldhu	r2,-52(fp)
2009ba44:	1084e230 	cmpltui	r2,r2,5000
2009ba48:	1000051e 	bne	r2,zero,2009ba60 <alt_msgdma_descriptor_sync_transfer+0x1ec>
            {
                alt_printf("time out after 5 msec while writing extended" 
2009ba4c:	01000034 	movhi	r4,0
2009ba50:	21029104 	addi	r4,r4,2628
2009ba54:	009da400 	call	2009da40 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
2009ba58:	00bff084 	movi	r2,-62
2009ba5c:	00005e06 	br	2009bbd8 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;
2009ba60:	e0bff30b 	ldhu	r2,-52(fp)
2009ba64:	10800044 	addi	r2,r2,1
2009ba68:	e0bff30d 	sth	r2,-52(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
2009ba6c:	e0bffd17 	ldw	r2,-12(fp)
2009ba70:	10c00317 	ldw	r3,12(r2)
2009ba74:	e0bffd17 	ldw	r2,-12(fp)
2009ba78:	10800417 	ldw	r2,16(r2)
2009ba7c:	1809883a 	mov	r4,r3
2009ba80:	100b883a 	mov	r5,r2
2009ba84:	e1bfff17 	ldw	r6,-4(fp)
2009ba88:	009b1140 	call	2009b114 <alt_msgdma_write_extended_descriptor>
2009ba8c:	103fea1e 	bne	r2,zero,2009ba38 <__flash_rwdata_start+0xffffce64>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
2009ba90:	00000206 	br	2009ba9c <alt_msgdma_descriptor_sync_transfer+0x228>
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
2009ba94:	00bfffc4 	movi	r2,-1
2009ba98:	00004f06 	br	2009bbd8 <alt_msgdma_descriptor_sync_transfer+0x364>
    * Set up msgdma controller to:
    * - Disable interrupt generation
    * - Run once a valid descriptor is written to controller
    * - Stop on an error with any particular descriptor
    */
     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
2009ba9c:	e0bffd17 	ldw	r2,-12(fp)
2009baa0:	10800317 	ldw	r2,12(r2)
2009baa4:	10800104 	addi	r2,r2,4
2009baa8:	e0fffd17 	ldw	r3,-12(fp)
2009baac:	19000d17 	ldw	r4,52(r3)
2009bab0:	00fff2c4 	movi	r3,-53
2009bab4:	20c6703a 	and	r3,r4,r3
2009bab8:	18c00114 	ori	r3,r3,4
2009babc:	10c00035 	stwio	r3,0(r2)
2009bac0:	e0bff717 	ldw	r2,-36(fp)
2009bac4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2009bac8:	e0bffa17 	ldw	r2,-24(fp)
2009bacc:	1001703a 	wrctl	status,r2
		(~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
		(~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK)) ;
	 
	alt_irq_enable_all(context);
     
    counter = 0; /* reset counter */ 
2009bad0:	e03ff30d 	sth	zero,-52(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
2009bad4:	e0bffd17 	ldw	r2,-12(fp)
2009bad8:	10800317 	ldw	r2,12(r2)
2009badc:	10800037 	ldwio	r2,0(r2)
2009bae0:	e0bff215 	stw	r2,-56(fp)
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
2009bae4:	00001106 	br	2009bb2c <alt_msgdma_descriptor_sync_transfer+0x2b8>
    {
        alt_busy_sleep(1); /* delay 1us */
2009bae8:	01000044 	movi	r4,1
2009baec:	009d0000 	call	2009d000 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
2009baf0:	e0bff30b 	ldhu	r2,-52(fp)
2009baf4:	1084e230 	cmpltui	r2,r2,5000
2009baf8:	1000051e 	bne	r2,zero,2009bb10 <alt_msgdma_descriptor_sync_transfer+0x29c>
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
2009bafc:	01000034 	movhi	r4,0
2009bb00:	2102a204 	addi	r4,r4,2696
2009bb04:	009da400 	call	2009da40 <alt_printf>
			* Now that access to the registers is complete, release the registers
			* semaphore so that other threads can access the registers.
			*/
			ALT_SEM_POST (dev->regs_lock);
			
            return -ETIME;
2009bb08:	00bff084 	movi	r2,-62
2009bb0c:	00003206 	br	2009bbd8 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;
2009bb10:	e0bff30b 	ldhu	r2,-52(fp)
2009bb14:	10800044 	addi	r2,r2,1
2009bb18:	e0bff30d 	sth	r2,-52(fp)
        csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
2009bb1c:	e0bffd17 	ldw	r2,-12(fp)
2009bb20:	10800317 	ldw	r2,12(r2)
2009bb24:	10800037 	ldwio	r2,0(r2)
2009bb28:	e0bff215 	stw	r2,-56(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
2009bb2c:	e0fff217 	ldw	r3,-56(fp)
2009bb30:	e0bff817 	ldw	r2,-32(fp)
2009bb34:	1884703a 	and	r2,r3,r2
2009bb38:	1000031e 	bne	r2,zero,2009bb48 <alt_msgdma_descriptor_sync_transfer+0x2d4>
2009bb3c:	e0bff217 	ldw	r2,-56(fp)
2009bb40:	1080004c 	andi	r2,r2,1
2009bb44:	103fe81e 	bne	r2,zero,2009bae8 <__flash_rwdata_start+0xffffcf14>
    }
    

    /*Errors or conditions causing the dispatcher stopping issuing read/write 
      commands to masters*/
    if(0 != (csr_status & error))
2009bb48:	e0fff217 	ldw	r3,-56(fp)
2009bb4c:	e0bff817 	ldw	r2,-32(fp)
2009bb50:	1884703a 	and	r2,r3,r2
2009bb54:	10000226 	beq	r2,zero,2009bb60 <alt_msgdma_descriptor_sync_transfer+0x2ec>
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        return error;
2009bb58:	e0bff817 	ldw	r2,-32(fp)
2009bb5c:	00001e06 	br	2009bbd8 <alt_msgdma_descriptor_sync_transfer+0x364>
    }

    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) | 
2009bb60:	e0bffd17 	ldw	r2,-12(fp)
2009bb64:	10800317 	ldw	r2,12(r2)
2009bb68:	10800104 	addi	r2,r2,4
2009bb6c:	10800037 	ldwio	r2,0(r2)
2009bb70:	10800814 	ori	r2,r2,32
2009bb74:	e0bff615 	stw	r2,-40(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2009bb78:	0005303a 	rdctl	r2,status
2009bb7c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2009bb80:	e0fffb17 	ldw	r3,-20(fp)
2009bb84:	00bfff84 	movi	r2,-2
2009bb88:	1884703a 	and	r2,r3,r2
2009bb8c:	1001703a 	wrctl	status,r2
  
  return context;
2009bb90:	e0bffb17 	ldw	r2,-20(fp)
	ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();  
2009bb94:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
2009bb98:	e0bffd17 	ldw	r2,-12(fp)
2009bb9c:	10800317 	ldw	r2,12(r2)
2009bba0:	10800104 	addi	r2,r2,4
2009bba4:	e0fff617 	ldw	r3,-40(fp)
2009bba8:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
2009bbac:	e0bffd17 	ldw	r2,-12(fp)
2009bbb0:	10800317 	ldw	r2,12(r2)
2009bbb4:	e0fffd17 	ldw	r3,-12(fp)
2009bbb8:	18c00317 	ldw	r3,12(r3)
2009bbbc:	18c00037 	ldwio	r3,0(r3)
2009bbc0:	10c00035 	stwio	r3,0(r2)
2009bbc4:	e0bff717 	ldw	r2,-36(fp)
2009bbc8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2009bbcc:	e0bffc17 	ldw	r2,-16(fp)
2009bbd0:	1001703a 	wrctl	status,r2
	* Now that access to the registers is complete, release the registers
	* semaphore so that other threads can access the registers.
	*/
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
2009bbd4:	0005883a 	mov	r2,zero

}
2009bbd8:	e037883a 	mov	sp,fp
2009bbdc:	dfc00117 	ldw	ra,4(sp)
2009bbe0:	df000017 	ldw	fp,0(sp)
2009bbe4:	dec00204 	addi	sp,sp,8
2009bbe8:	f800283a 	ret

2009bbec <alt_msgdma_construct_standard_st_to_mm_descriptor>:
 */
int alt_msgdma_construct_standard_st_to_mm_descriptor (
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *write_address, alt_u32 length, alt_u32 control)
{
2009bbec:	defff804 	addi	sp,sp,-32
2009bbf0:	dfc00715 	stw	ra,28(sp)
2009bbf4:	df000615 	stw	fp,24(sp)
2009bbf8:	df000604 	addi	fp,sp,24
2009bbfc:	e13ffc15 	stw	r4,-16(fp)
2009bc00:	e17ffd15 	stw	r5,-12(fp)
2009bc04:	e1bffe15 	stw	r6,-8(fp)
2009bc08:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, NULL, 
2009bc0c:	e0bfff17 	ldw	r2,-4(fp)
2009bc10:	d8800015 	stw	r2,0(sp)
2009bc14:	e0800217 	ldw	r2,8(fp)
2009bc18:	d8800115 	stw	r2,4(sp)
2009bc1c:	e13ffc17 	ldw	r4,-16(fp)
2009bc20:	e17ffd17 	ldw	r5,-12(fp)
2009bc24:	000d883a 	mov	r6,zero
2009bc28:	e1fffe17 	ldw	r7,-8(fp)
2009bc2c:	009b3c40 	call	2009b3c4 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
2009bc30:	e037883a 	mov	sp,fp
2009bc34:	dfc00117 	ldw	ra,4(sp)
2009bc38:	df000017 	ldw	fp,0(sp)
2009bc3c:	dec00204 	addi	sp,sp,8
2009bc40:	f800283a 	ret

2009bc44 <alt_msgdma_construct_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address,
	alt_u32 length,
	alt_u32 control)
{
2009bc44:	defff804 	addi	sp,sp,-32
2009bc48:	dfc00715 	stw	ra,28(sp)
2009bc4c:	df000615 	stw	fp,24(sp)
2009bc50:	df000604 	addi	fp,sp,24
2009bc54:	e13ffc15 	stw	r4,-16(fp)
2009bc58:	e17ffd15 	stw	r5,-12(fp)
2009bc5c:	e1bffe15 	stw	r6,-8(fp)
2009bc60:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
2009bc64:	e0bfff17 	ldw	r2,-4(fp)
2009bc68:	d8800015 	stw	r2,0(sp)
2009bc6c:	e0800217 	ldw	r2,8(fp)
2009bc70:	d8800115 	stw	r2,4(sp)
2009bc74:	e13ffc17 	ldw	r4,-16(fp)
2009bc78:	e17ffd17 	ldw	r5,-12(fp)
2009bc7c:	e1bffe17 	ldw	r6,-8(fp)
2009bc80:	000f883a 	mov	r7,zero
2009bc84:	009b3c40 	call	2009b3c4 <alt_msgdma_construct_standard_descriptor>
            NULL, length, control);

}
2009bc88:	e037883a 	mov	sp,fp
2009bc8c:	dfc00117 	ldw	ra,4(sp)
2009bc90:	df000017 	ldw	fp,0(sp)
2009bc94:	dec00204 	addi	sp,sp,8
2009bc98:	f800283a 	ret

2009bc9c <alt_msgdma_construct_standard_mm_to_mm_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
2009bc9c:	defff804 	addi	sp,sp,-32
2009bca0:	dfc00715 	stw	ra,28(sp)
2009bca4:	df000615 	stw	fp,24(sp)
2009bca8:	df000604 	addi	fp,sp,24
2009bcac:	e13ffc15 	stw	r4,-16(fp)
2009bcb0:	e17ffd15 	stw	r5,-12(fp)
2009bcb4:	e1bffe15 	stw	r6,-8(fp)
2009bcb8:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
2009bcbc:	e0800217 	ldw	r2,8(fp)
2009bcc0:	d8800015 	stw	r2,0(sp)
2009bcc4:	e0800317 	ldw	r2,12(fp)
2009bcc8:	d8800115 	stw	r2,4(sp)
2009bccc:	e13ffc17 	ldw	r4,-16(fp)
2009bcd0:	e17ffd17 	ldw	r5,-12(fp)
2009bcd4:	e1bffe17 	ldw	r6,-8(fp)
2009bcd8:	e1ffff17 	ldw	r7,-4(fp)
2009bcdc:	009b3c40 	call	2009b3c4 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
2009bce0:	e037883a 	mov	sp,fp
2009bce4:	dfc00117 	ldw	ra,4(sp)
2009bce8:	df000017 	ldw	fp,0(sp)
2009bcec:	dec00204 	addi	sp,sp,8
2009bcf0:	f800283a 	ret

2009bcf4 <alt_msgdma_construct_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 write_burst_count, 
	alt_u16 write_stride)
{
2009bcf4:	defff004 	addi	sp,sp,-64
2009bcf8:	dfc00f15 	stw	ra,60(sp)
2009bcfc:	df000e15 	stw	fp,56(sp)
2009bd00:	df000e04 	addi	fp,sp,56
2009bd04:	e13ff915 	stw	r4,-28(fp)
2009bd08:	e17ffa15 	stw	r5,-24(fp)
2009bd0c:	e1bffb15 	stw	r6,-20(fp)
2009bd10:	e1fffc15 	stw	r7,-16(fp)
2009bd14:	e1000317 	ldw	r4,12(fp)
2009bd18:	e0c00417 	ldw	r3,16(fp)
2009bd1c:	e0800517 	ldw	r2,20(fp)
2009bd20:	e13ffd0d 	sth	r4,-12(fp)
2009bd24:	e0fffe05 	stb	r3,-8(fp)
2009bd28:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
2009bd2c:	e13ffd0b 	ldhu	r4,-12(fp)
2009bd30:	e0fffe03 	ldbu	r3,-8(fp)
2009bd34:	e0bfff0b 	ldhu	r2,-4(fp)
2009bd38:	e17ffc17 	ldw	r5,-16(fp)
2009bd3c:	d9400015 	stw	r5,0(sp)
2009bd40:	e1400217 	ldw	r5,8(fp)
2009bd44:	d9400115 	stw	r5,4(sp)
2009bd48:	d9000215 	stw	r4,8(sp)
2009bd4c:	d8000315 	stw	zero,12(sp)
2009bd50:	d8c00415 	stw	r3,16(sp)
2009bd54:	d8000515 	stw	zero,20(sp)
2009bd58:	d8800615 	stw	r2,24(sp)
2009bd5c:	e13ff917 	ldw	r4,-28(fp)
2009bd60:	e17ffa17 	ldw	r5,-24(fp)
2009bd64:	000d883a 	mov	r6,zero
2009bd68:	e1fffb17 	ldw	r7,-20(fp)
2009bd6c:	009b4500 	call	2009b450 <alt_msgdma_construct_extended_descriptor>
            NULL, write_address, length, control, sequence_number, 0, 
            write_burst_count, 0, write_stride);
}
2009bd70:	e037883a 	mov	sp,fp
2009bd74:	dfc00117 	ldw	ra,4(sp)
2009bd78:	df000017 	ldw	fp,0(sp)
2009bd7c:	dec00204 	addi	sp,sp,8
2009bd80:	f800283a 	ret

2009bd84 <alt_msgdma_construct_extended_mm_to_st_descriptor>:
	alt_u32 length,
	alt_u32 control,
	alt_u16 sequence_number,
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
2009bd84:	defff004 	addi	sp,sp,-64
2009bd88:	dfc00f15 	stw	ra,60(sp)
2009bd8c:	df000e15 	stw	fp,56(sp)
2009bd90:	df000e04 	addi	fp,sp,56
2009bd94:	e13ff915 	stw	r4,-28(fp)
2009bd98:	e17ffa15 	stw	r5,-24(fp)
2009bd9c:	e1bffb15 	stw	r6,-20(fp)
2009bda0:	e1fffc15 	stw	r7,-16(fp)
2009bda4:	e1000317 	ldw	r4,12(fp)
2009bda8:	e0c00417 	ldw	r3,16(fp)
2009bdac:	e0800517 	ldw	r2,20(fp)
2009bdb0:	e13ffd0d 	sth	r4,-12(fp)
2009bdb4:	e0fffe05 	stb	r3,-8(fp)
2009bdb8:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, read_address, 
2009bdbc:	e13ffd0b 	ldhu	r4,-12(fp)
2009bdc0:	e0fffe03 	ldbu	r3,-8(fp)
2009bdc4:	e0bfff0b 	ldhu	r2,-4(fp)
2009bdc8:	e17ffc17 	ldw	r5,-16(fp)
2009bdcc:	d9400015 	stw	r5,0(sp)
2009bdd0:	e1400217 	ldw	r5,8(fp)
2009bdd4:	d9400115 	stw	r5,4(sp)
2009bdd8:	d9000215 	stw	r4,8(sp)
2009bddc:	d8c00315 	stw	r3,12(sp)
2009bde0:	d8000415 	stw	zero,16(sp)
2009bde4:	d8800515 	stw	r2,20(sp)
2009bde8:	d8000615 	stw	zero,24(sp)
2009bdec:	e13ff917 	ldw	r4,-28(fp)
2009bdf0:	e17ffa17 	ldw	r5,-24(fp)
2009bdf4:	e1bffb17 	ldw	r6,-20(fp)
2009bdf8:	000f883a 	mov	r7,zero
2009bdfc:	009b4500 	call	2009b450 <alt_msgdma_construct_extended_descriptor>
            NULL, length, control, sequence_number, read_burst_count, 0, 
            read_stride, 0);

}
2009be00:	e037883a 	mov	sp,fp
2009be04:	dfc00117 	ldw	ra,4(sp)
2009be08:	df000017 	ldw	fp,0(sp)
2009be0c:	dec00204 	addi	sp,sp,8
2009be10:	f800283a 	ret

2009be14 <alt_msgdma_construct_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
2009be14:	deffee04 	addi	sp,sp,-72
2009be18:	dfc01115 	stw	ra,68(sp)
2009be1c:	df001015 	stw	fp,64(sp)
2009be20:	df001004 	addi	fp,sp,64
2009be24:	e13ff715 	stw	r4,-36(fp)
2009be28:	e17ff815 	stw	r5,-32(fp)
2009be2c:	e1bff915 	stw	r6,-28(fp)
2009be30:	e1fffa15 	stw	r7,-24(fp)
2009be34:	e1800417 	ldw	r6,16(fp)
2009be38:	e1400517 	ldw	r5,20(fp)
2009be3c:	e1000617 	ldw	r4,24(fp)
2009be40:	e0c00717 	ldw	r3,28(fp)
2009be44:	e0800817 	ldw	r2,32(fp)
2009be48:	e1bffb0d 	sth	r6,-20(fp)
2009be4c:	e17ffc05 	stb	r5,-16(fp)
2009be50:	e13ffd05 	stb	r4,-12(fp)
2009be54:	e0fffe0d 	sth	r3,-8(fp)
2009be58:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
2009be5c:	e1bffb0b 	ldhu	r6,-20(fp)
2009be60:	e17ffc03 	ldbu	r5,-16(fp)
2009be64:	e13ffd03 	ldbu	r4,-12(fp)
2009be68:	e0fffe0b 	ldhu	r3,-8(fp)
2009be6c:	e0bfff0b 	ldhu	r2,-4(fp)
2009be70:	e1c00217 	ldw	r7,8(fp)
2009be74:	d9c00015 	stw	r7,0(sp)
2009be78:	e1c00317 	ldw	r7,12(fp)
2009be7c:	d9c00115 	stw	r7,4(sp)
2009be80:	d9800215 	stw	r6,8(sp)
2009be84:	d9400315 	stw	r5,12(sp)
2009be88:	d9000415 	stw	r4,16(sp)
2009be8c:	d8c00515 	stw	r3,20(sp)
2009be90:	d8800615 	stw	r2,24(sp)
2009be94:	e13ff717 	ldw	r4,-36(fp)
2009be98:	e17ff817 	ldw	r5,-32(fp)
2009be9c:	e1bff917 	ldw	r6,-28(fp)
2009bea0:	e1fffa17 	ldw	r7,-24(fp)
2009bea4:	009b4500 	call	2009b450 <alt_msgdma_construct_extended_descriptor>
            read_address, write_address, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
2009bea8:	e037883a 	mov	sp,fp
2009beac:	dfc00117 	ldw	ra,4(sp)
2009beb0:	df000017 	ldw	fp,0(sp)
2009beb4:	dec00204 	addi	sp,sp,8
2009beb8:	f800283a 	ret

2009bebc <alt_msgdma_construct_prefetcher_standard_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
2009bebc:	defffb04 	addi	sp,sp,-20
2009bec0:	df000415 	stw	fp,16(sp)
2009bec4:	df000404 	addi	fp,sp,16
2009bec8:	e13ffc15 	stw	r4,-16(fp)
2009becc:	e17ffd15 	stw	r5,-12(fp)
2009bed0:	e1bffe15 	stw	r6,-8(fp)
2009bed4:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
2009bed8:	e0bffc17 	ldw	r2,-16(fp)
2009bedc:	10c01217 	ldw	r3,72(r2)
2009bee0:	e0800117 	ldw	r2,4(fp)
2009bee4:	18800436 	bltu	r3,r2,2009bef8 <alt_msgdma_construct_prefetcher_standard_descriptor+0x3c>
       dev->enhanced_features != 0
2009bee8:	e0bffc17 	ldw	r2,-16(fp)
2009beec:	10801703 	ldbu	r2,92(r2)
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
2009bef0:	10803fcc 	andi	r2,r2,255
2009bef4:	10000226 	beq	r2,zero,2009bf00 <alt_msgdma_construct_prefetcher_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
2009bef8:	00bffa84 	movi	r2,-22
2009befc:	00001406 	br	2009bf50 <alt_msgdma_construct_prefetcher_standard_descriptor+0x94>
    }
    descriptor->read_address = read_address;
2009bf00:	e0bffd17 	ldw	r2,-12(fp)
2009bf04:	e0fffe17 	ldw	r3,-8(fp)
2009bf08:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
2009bf0c:	e0bffd17 	ldw	r2,-12(fp)
2009bf10:	e0ffff17 	ldw	r3,-4(fp)
2009bf14:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
2009bf18:	e0bffd17 	ldw	r2,-12(fp)
2009bf1c:	e0c00117 	ldw	r3,4(fp)
2009bf20:	10c00215 	stw	r3,8(r2)
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
2009bf24:	e0fffd17 	ldw	r3,-12(fp)
2009bf28:	e0bffd17 	ldw	r2,-12(fp)
2009bf2c:	10c00315 	stw	r3,12(r2)
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
2009bf30:	e0c00217 	ldw	r3,8(fp)
2009bf34:	00900034 	movhi	r2,16384
2009bf38:	10bfffc4 	addi	r2,r2,-1
2009bf3c:	1884703a 	and	r2,r3,r2
2009bf40:	10e00034 	orhi	r3,r2,32768
    descriptor->transfer_length = length;
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
2009bf44:	e0bffd17 	ldw	r2,-12(fp)
2009bf48:	10c00715 	stw	r3,28(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
2009bf4c:	0005883a 	mov	r2,zero
}
2009bf50:	e037883a 	mov	sp,fp
2009bf54:	df000017 	ldw	fp,0(sp)
2009bf58:	dec00104 	addi	sp,sp,4
2009bf5c:	f800283a 	ret

2009bf60 <alt_msgdma_construct_prefetcher_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
2009bf60:	defff404 	addi	sp,sp,-48
2009bf64:	df000b15 	stw	fp,44(sp)
2009bf68:	df000b04 	addi	fp,sp,44
2009bf6c:	e13ff715 	stw	r4,-36(fp)
2009bf70:	e17ff815 	stw	r5,-32(fp)
2009bf74:	e1bff915 	stw	r6,-28(fp)
2009bf78:	e1fffa15 	stw	r7,-24(fp)
2009bf7c:	e1800517 	ldw	r6,20(fp)
2009bf80:	e1400617 	ldw	r5,24(fp)
2009bf84:	e1000717 	ldw	r4,28(fp)
2009bf88:	e0c00817 	ldw	r3,32(fp)
2009bf8c:	e0800917 	ldw	r2,36(fp)
2009bf90:	e1bffb0d 	sth	r6,-20(fp)
2009bf94:	e17ffc05 	stb	r5,-16(fp)
2009bf98:	e13ffd05 	stb	r4,-12(fp)
2009bf9c:	e0fffe0d 	sth	r3,-8(fp)
2009bfa0:	e0bfff0d 	sth	r2,-4(fp)
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
2009bfa4:	e0bff717 	ldw	r2,-36(fp)
2009bfa8:	10c01217 	ldw	r3,72(r2)
2009bfac:	e0800317 	ldw	r2,12(fp)
2009bfb0:	18801936 	bltu	r3,r2,2009c018 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
2009bfb4:	e13ff717 	ldw	r4,-36(fp)
2009bfb8:	20801317 	ldw	r2,76(r4)
2009bfbc:	20c01417 	ldw	r3,80(r4)
2009bfc0:	e13ffe0b 	ldhu	r4,-8(fp)
2009bfc4:	213fffcc 	andi	r4,r4,65535
2009bfc8:	2015883a 	mov	r10,r4
2009bfcc:	0017883a 	mov	r11,zero
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
2009bfd0:	1ac01136 	bltu	r3,r11,2009c018 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
2009bfd4:	58c0011e 	bne	r11,r3,2009bfdc <alt_msgdma_construct_prefetcher_extended_descriptor+0x7c>
2009bfd8:	12800f36 	bltu	r2,r10,2009c018 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
2009bfdc:	e13ff717 	ldw	r4,-36(fp)
2009bfe0:	20801317 	ldw	r2,76(r4)
2009bfe4:	20c01417 	ldw	r3,80(r4)
2009bfe8:	e13fff0b 	ldhu	r4,-4(fp)
2009bfec:	213fffcc 	andi	r4,r4,65535
2009bff0:	2011883a 	mov	r8,r4
2009bff4:	0013883a 	mov	r9,zero
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
2009bff8:	1a400736 	bltu	r3,r9,2009c018 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
2009bffc:	48c0011e 	bne	r9,r3,2009c004 <alt_msgdma_construct_prefetcher_extended_descriptor+0xa4>
2009c000:	12000536 	bltu	r2,r8,2009c018 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
2009c004:	e0bff717 	ldw	r2,-36(fp)
2009c008:	10801703 	ldbu	r2,92(r2)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
2009c00c:	10803fcc 	andi	r2,r2,255
2009c010:	10800060 	cmpeqi	r2,r2,1
2009c014:	1000021e 	bne	r2,zero,2009c020 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
2009c018:	00bffa84 	movi	r2,-22
2009c01c:	00003106 	br	2009c0e4 <alt_msgdma_construct_prefetcher_extended_descriptor+0x184>
    }
    
    descriptor->read_address_high = read_address_high;
2009c020:	e0bff817 	ldw	r2,-32(fp)
2009c024:	e0fff917 	ldw	r3,-28(fp)
2009c028:	10c00915 	stw	r3,36(r2)
    descriptor->read_address_low = read_address_low;
2009c02c:	e0bff817 	ldw	r2,-32(fp)
2009c030:	e0fffa17 	ldw	r3,-24(fp)
2009c034:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_high = write_address_high;
2009c038:	e0bff817 	ldw	r2,-32(fp)
2009c03c:	e0c00117 	ldw	r3,4(fp)
2009c040:	10c00a15 	stw	r3,40(r2)
    descriptor->write_address_low = write_address_low;
2009c044:	e0bff817 	ldw	r2,-32(fp)
2009c048:	e0c00217 	ldw	r3,8(fp)
2009c04c:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
2009c050:	e0bff817 	ldw	r2,-32(fp)
2009c054:	e0c00317 	ldw	r3,12(fp)
2009c058:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
2009c05c:	e0bff817 	ldw	r2,-32(fp)
2009c060:	e0fffb0b 	ldhu	r3,-20(fp)
2009c064:	10c0070d 	sth	r3,28(r2)
    descriptor->read_burst_count = read_burst_count;
2009c068:	e0bff817 	ldw	r2,-32(fp)
2009c06c:	e0fffc03 	ldbu	r3,-16(fp)
2009c070:	10c00785 	stb	r3,30(r2)
    descriptor->write_burst_count = write_burst_count;
2009c074:	e0bff817 	ldw	r2,-32(fp)
2009c078:	e0fffd03 	ldbu	r3,-12(fp)
2009c07c:	10c007c5 	stb	r3,31(r2)
    descriptor->read_stride = read_stride;
2009c080:	e0bff817 	ldw	r2,-32(fp)
2009c084:	e0fffe0b 	ldhu	r3,-8(fp)
2009c088:	10c0080d 	sth	r3,32(r2)
    descriptor->write_stride = write_stride;
2009c08c:	e0bff817 	ldw	r2,-32(fp)
2009c090:	e0ffff0b 	ldhu	r3,-4(fp)
2009c094:	10c0088d 	sth	r3,34(r2)
    /* have descriptor point to itself */
	node_addr.u64 = (uintptr_t)descriptor;
2009c098:	e0bff817 	ldw	r2,-32(fp)
2009c09c:	1019883a 	mov	r12,r2
2009c0a0:	001b883a 	mov	r13,zero
2009c0a4:	e33ff515 	stw	r12,-44(fp)
2009c0a8:	e37ff615 	stw	r13,-40(fp)
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
2009c0ac:	e0fff517 	ldw	r3,-44(fp)
2009c0b0:	e0bff817 	ldw	r2,-32(fp)
2009c0b4:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
2009c0b8:	e0fff617 	ldw	r3,-40(fp)
2009c0bc:	e0bff817 	ldw	r2,-32(fp)
2009c0c0:	10c00b15 	stw	r3,44(r2)
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
2009c0c4:	e0c00417 	ldw	r3,16(fp)
2009c0c8:	00900034 	movhi	r2,16384
2009c0cc:	10bfffc4 	addi	r2,r2,-1
2009c0d0:	1884703a 	and	r2,r3,r2
2009c0d4:	10e00034 	orhi	r3,r2,32768
	node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
2009c0d8:	e0bff817 	ldw	r2,-32(fp)
2009c0dc:	10c00f15 	stw	r3,60(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
2009c0e0:	0005883a 	mov	r2,zero
}
2009c0e4:	e037883a 	mov	sp,fp
2009c0e8:	df000017 	ldw	fp,0(sp)
2009c0ec:	dec00104 	addi	sp,sp,4
2009c0f0:	f800283a 	ret

2009c0f4 <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address,
	alt_u32 write_address,
	alt_u32 length,
	alt_u32 control)
{
2009c0f4:	defff804 	addi	sp,sp,-32
2009c0f8:	dfc00715 	stw	ra,28(sp)
2009c0fc:	df000615 	stw	fp,24(sp)
2009c100:	df000604 	addi	fp,sp,24
2009c104:	e13ffc15 	stw	r4,-16(fp)
2009c108:	e17ffd15 	stw	r5,-12(fp)
2009c10c:	e1bffe15 	stw	r6,-8(fp)
2009c110:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
2009c114:	e0800217 	ldw	r2,8(fp)
2009c118:	d8800015 	stw	r2,0(sp)
2009c11c:	e0800317 	ldw	r2,12(fp)
2009c120:	d8800115 	stw	r2,4(sp)
2009c124:	e13ffc17 	ldw	r4,-16(fp)
2009c128:	e17ffd17 	ldw	r5,-12(fp)
2009c12c:	e1bffe17 	ldw	r6,-8(fp)
2009c130:	e1ffff17 	ldw	r7,-4(fp)
2009c134:	009bebc0 	call	2009bebc <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, write_address, length, control);
}
2009c138:	e037883a 	mov	sp,fp
2009c13c:	dfc00117 	ldw	ra,4(sp)
2009c140:	df000017 	ldw	fp,0(sp)
2009c144:	dec00204 	addi	sp,sp,8
2009c148:	f800283a 	ret

2009c14c <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
2009c14c:	defff804 	addi	sp,sp,-32
2009c150:	dfc00715 	stw	ra,28(sp)
2009c154:	df000615 	stw	fp,24(sp)
2009c158:	df000604 	addi	fp,sp,24
2009c15c:	e13ffc15 	stw	r4,-16(fp)
2009c160:	e17ffd15 	stw	r5,-12(fp)
2009c164:	e1bffe15 	stw	r6,-8(fp)
2009c168:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
2009c16c:	e0bfff17 	ldw	r2,-4(fp)
2009c170:	d8800015 	stw	r2,0(sp)
2009c174:	e0800217 	ldw	r2,8(fp)
2009c178:	d8800115 	stw	r2,4(sp)
2009c17c:	e13ffc17 	ldw	r4,-16(fp)
2009c180:	e17ffd17 	ldw	r5,-12(fp)
2009c184:	000d883a 	mov	r6,zero
2009c188:	e1fffe17 	ldw	r7,-8(fp)
2009c18c:	009bebc0 	call	2009bebc <alt_msgdma_construct_prefetcher_standard_descriptor>
    		0, write_address, length, control);
}
2009c190:	e037883a 	mov	sp,fp
2009c194:	dfc00117 	ldw	ra,4(sp)
2009c198:	df000017 	ldw	fp,0(sp)
2009c19c:	dec00204 	addi	sp,sp,8
2009c1a0:	f800283a 	ret

2009c1a4 <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 read_address, 
	alt_u32 length, 
	alt_u32 control)
{
2009c1a4:	defff804 	addi	sp,sp,-32
2009c1a8:	dfc00715 	stw	ra,28(sp)
2009c1ac:	df000615 	stw	fp,24(sp)
2009c1b0:	df000604 	addi	fp,sp,24
2009c1b4:	e13ffc15 	stw	r4,-16(fp)
2009c1b8:	e17ffd15 	stw	r5,-12(fp)
2009c1bc:	e1bffe15 	stw	r6,-8(fp)
2009c1c0:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
2009c1c4:	e0bfff17 	ldw	r2,-4(fp)
2009c1c8:	d8800015 	stw	r2,0(sp)
2009c1cc:	e0800217 	ldw	r2,8(fp)
2009c1d0:	d8800115 	stw	r2,4(sp)
2009c1d4:	e13ffc17 	ldw	r4,-16(fp)
2009c1d8:	e17ffd17 	ldw	r5,-12(fp)
2009c1dc:	e1bffe17 	ldw	r6,-8(fp)
2009c1e0:	000f883a 	mov	r7,zero
2009c1e4:	009bebc0 	call	2009bebc <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, 0, length, control);
}
2009c1e8:	e037883a 	mov	sp,fp
2009c1ec:	dfc00117 	ldw	ra,4(sp)
2009c1f0:	df000017 	ldw	fp,0(sp)
2009c1f4:	dec00204 	addi	sp,sp,8
2009c1f8:	f800283a 	ret

2009c1fc <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number,
	alt_u8 write_burst_count,
	alt_u16 write_stride)
{
2009c1fc:	deffee04 	addi	sp,sp,-72
2009c200:	dfc01115 	stw	ra,68(sp)
2009c204:	df001015 	stw	fp,64(sp)
2009c208:	df001004 	addi	fp,sp,64
2009c20c:	e13ff915 	stw	r4,-28(fp)
2009c210:	e17ffa15 	stw	r5,-24(fp)
2009c214:	e1bffb15 	stw	r6,-20(fp)
2009c218:	e1fffc15 	stw	r7,-16(fp)
2009c21c:	e1000417 	ldw	r4,16(fp)
2009c220:	e0c00517 	ldw	r3,20(fp)
2009c224:	e0800617 	ldw	r2,24(fp)
2009c228:	e13ffd0d 	sth	r4,-12(fp)
2009c22c:	e0fffe05 	stb	r3,-8(fp)
2009c230:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor, 
2009c234:	e13ffd0b 	ldhu	r4,-12(fp)
2009c238:	e0fffe03 	ldbu	r3,-8(fp)
2009c23c:	e0bfff0b 	ldhu	r2,-4(fp)
2009c240:	e17ffb17 	ldw	r5,-20(fp)
2009c244:	d9400015 	stw	r5,0(sp)
2009c248:	e17ffc17 	ldw	r5,-16(fp)
2009c24c:	d9400115 	stw	r5,4(sp)
2009c250:	e1400217 	ldw	r5,8(fp)
2009c254:	d9400215 	stw	r5,8(sp)
2009c258:	e1400317 	ldw	r5,12(fp)
2009c25c:	d9400315 	stw	r5,12(sp)
2009c260:	d9000415 	stw	r4,16(sp)
2009c264:	d8000515 	stw	zero,20(sp)
2009c268:	d8c00615 	stw	r3,24(sp)
2009c26c:	d8000715 	stw	zero,28(sp)
2009c270:	d8800815 	stw	r2,32(sp)
2009c274:	e13ff917 	ldw	r4,-28(fp)
2009c278:	e17ffa17 	ldw	r5,-24(fp)
2009c27c:	000d883a 	mov	r6,zero
2009c280:	000f883a 	mov	r7,zero
2009c284:	009bf600 	call	2009bf60 <alt_msgdma_construct_prefetcher_extended_descriptor>
            0, 0, write_address_high, write_address_low, length, control, 
			sequence_number, 0, write_burst_count, 0, write_stride);
}
2009c288:	e037883a 	mov	sp,fp
2009c28c:	dfc00117 	ldw	ra,4(sp)
2009c290:	df000017 	ldw	fp,0(sp)
2009c294:	dec00204 	addi	sp,sp,8
2009c298:	f800283a 	ret

2009c29c <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
2009c29c:	deffee04 	addi	sp,sp,-72
2009c2a0:	dfc01115 	stw	ra,68(sp)
2009c2a4:	df001015 	stw	fp,64(sp)
2009c2a8:	df001004 	addi	fp,sp,64
2009c2ac:	e13ff915 	stw	r4,-28(fp)
2009c2b0:	e17ffa15 	stw	r5,-24(fp)
2009c2b4:	e1bffb15 	stw	r6,-20(fp)
2009c2b8:	e1fffc15 	stw	r7,-16(fp)
2009c2bc:	e1000417 	ldw	r4,16(fp)
2009c2c0:	e0c00517 	ldw	r3,20(fp)
2009c2c4:	e0800617 	ldw	r2,24(fp)
2009c2c8:	e13ffd0d 	sth	r4,-12(fp)
2009c2cc:	e0fffe05 	stb	r3,-8(fp)
2009c2d0:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
2009c2d4:	e13ffd0b 	ldhu	r4,-12(fp)
2009c2d8:	e0fffe03 	ldbu	r3,-8(fp)
2009c2dc:	e0bfff0b 	ldhu	r2,-4(fp)
2009c2e0:	d8000015 	stw	zero,0(sp)
2009c2e4:	d8000115 	stw	zero,4(sp)
2009c2e8:	e1400217 	ldw	r5,8(fp)
2009c2ec:	d9400215 	stw	r5,8(sp)
2009c2f0:	e1400317 	ldw	r5,12(fp)
2009c2f4:	d9400315 	stw	r5,12(sp)
2009c2f8:	d9000415 	stw	r4,16(sp)
2009c2fc:	d8c00515 	stw	r3,20(sp)
2009c300:	d8000615 	stw	zero,24(sp)
2009c304:	d8800715 	stw	r2,28(sp)
2009c308:	d8000815 	stw	zero,32(sp)
2009c30c:	e13ff917 	ldw	r4,-28(fp)
2009c310:	e17ffa17 	ldw	r5,-24(fp)
2009c314:	e1bffb17 	ldw	r6,-20(fp)
2009c318:	e1fffc17 	ldw	r7,-16(fp)
2009c31c:	009bf600 	call	2009bf60 <alt_msgdma_construct_prefetcher_extended_descriptor>
    		read_address_high, read_address_low, 0, 0, length, control, 
			sequence_number, read_burst_count, 0, read_stride, 0);
}
2009c320:	e037883a 	mov	sp,fp
2009c324:	dfc00117 	ldw	ra,4(sp)
2009c328:	df000017 	ldw	fp,0(sp)
2009c32c:	dec00204 	addi	sp,sp,8
2009c330:	f800283a 	ret

2009c334 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor>:
	alt_u16 sequence_number,
	alt_u8 read_burst_count,
	alt_u8 write_burst_count, 
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
2009c334:	deffec04 	addi	sp,sp,-80
2009c338:	dfc01315 	stw	ra,76(sp)
2009c33c:	df001215 	stw	fp,72(sp)
2009c340:	df001204 	addi	fp,sp,72
2009c344:	e13ff715 	stw	r4,-36(fp)
2009c348:	e17ff815 	stw	r5,-32(fp)
2009c34c:	e1bff915 	stw	r6,-28(fp)
2009c350:	e1fffa15 	stw	r7,-24(fp)
2009c354:	e1800617 	ldw	r6,24(fp)
2009c358:	e1400717 	ldw	r5,28(fp)
2009c35c:	e1000817 	ldw	r4,32(fp)
2009c360:	e0c00917 	ldw	r3,36(fp)
2009c364:	e0800a17 	ldw	r2,40(fp)
2009c368:	e1bffb0d 	sth	r6,-20(fp)
2009c36c:	e17ffc05 	stb	r5,-16(fp)
2009c370:	e13ffd05 	stb	r4,-12(fp)
2009c374:	e0fffe0d 	sth	r3,-8(fp)
2009c378:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
2009c37c:	e1bffb0b 	ldhu	r6,-20(fp)
2009c380:	e17ffc03 	ldbu	r5,-16(fp)
2009c384:	e13ffd03 	ldbu	r4,-12(fp)
2009c388:	e0fffe0b 	ldhu	r3,-8(fp)
2009c38c:	e0bfff0b 	ldhu	r2,-4(fp)
2009c390:	e1c00217 	ldw	r7,8(fp)
2009c394:	d9c00015 	stw	r7,0(sp)
2009c398:	e1c00317 	ldw	r7,12(fp)
2009c39c:	d9c00115 	stw	r7,4(sp)
2009c3a0:	e1c00417 	ldw	r7,16(fp)
2009c3a4:	d9c00215 	stw	r7,8(sp)
2009c3a8:	e1c00517 	ldw	r7,20(fp)
2009c3ac:	d9c00315 	stw	r7,12(sp)
2009c3b0:	d9800415 	stw	r6,16(sp)
2009c3b4:	d9400515 	stw	r5,20(sp)
2009c3b8:	d9000615 	stw	r4,24(sp)
2009c3bc:	d8c00715 	stw	r3,28(sp)
2009c3c0:	d8800815 	stw	r2,32(sp)
2009c3c4:	e13ff717 	ldw	r4,-36(fp)
2009c3c8:	e17ff817 	ldw	r5,-32(fp)
2009c3cc:	e1bff917 	ldw	r6,-28(fp)
2009c3d0:	e1fffa17 	ldw	r7,-24(fp)
2009c3d4:	009bf600 	call	2009bf60 <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, write_address_high, 
			write_address_low, length, control, sequence_number, 
			read_burst_count, write_burst_count, read_stride, write_stride);

}
2009c3d8:	e037883a 	mov	sp,fp
2009c3dc:	dfc00117 	ldw	ra,4(sp)
2009c3e0:	df000017 	ldw	fp,0(sp)
2009c3e4:	dec00204 	addi	sp,sp,8
2009c3e8:	f800283a 	ret

2009c3ec <alt_msgdma_prefetcher_add_standard_desc_to_list>:
 *           descriptor.next_ptr not pointing back to itslef)
 */
int alt_msgdma_prefetcher_add_standard_desc_to_list (
	alt_msgdma_prefetcher_standard_descriptor** list,
	alt_msgdma_prefetcher_standard_descriptor* descriptor)
{
2009c3ec:	defffc04 	addi	sp,sp,-16
2009c3f0:	df000315 	stw	fp,12(sp)
2009c3f4:	df000304 	addi	fp,sp,12
2009c3f8:	e13ffe15 	stw	r4,-8(fp)
2009c3fc:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	
	if (descriptor == NULL)
2009c400:	e0bfff17 	ldw	r2,-4(fp)
2009c404:	1000021e 	bne	r2,zero,2009c410 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x24>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
2009c408:	00bffa84 	movi	r2,-22
2009c40c:	00002f06 	br	2009c4cc <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (descriptor->next_desc_ptr != (alt_u32)descriptor)
2009c410:	e0bfff17 	ldw	r2,-4(fp)
2009c414:	10c00317 	ldw	r3,12(r2)
2009c418:	e0bfff17 	ldw	r2,-4(fp)
2009c41c:	18800226 	beq	r3,r2,2009c428 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x3c>
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
2009c420:	00bffa84 	movi	r2,-22
2009c424:	00002906 	br	2009c4cc <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (*list == NULL)
2009c428:	e0bffe17 	ldw	r2,-8(fp)
2009c42c:	10800017 	ldw	r2,0(r2)
2009c430:	1000051e 	bne	r2,zero,2009c448 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x5c>
	{
		*list = descriptor;  /* make this root-node if list is empty */
2009c434:	e0bffe17 	ldw	r2,-8(fp)
2009c438:	e0ffff17 	ldw	r3,-4(fp)
2009c43c:	10c00015 	stw	r3,0(r2)
		return 0;  /* successfully added */
2009c440:	0005883a 	mov	r2,zero
2009c444:	00002106 	br	2009c4cc <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (*list == descriptor)
2009c448:	e0bffe17 	ldw	r2,-8(fp)
2009c44c:	10c00017 	ldw	r3,0(r2)
2009c450:	e0bfff17 	ldw	r2,-4(fp)
2009c454:	1880021e 	bne	r3,r2,2009c460 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x74>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
2009c458:	00bffa84 	movi	r2,-22
2009c45c:	00001b06 	br	2009c4cc <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
2009c460:	e0bffe17 	ldw	r2,-8(fp)
2009c464:	10800017 	ldw	r2,0(r2)
2009c468:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
2009c46c:	00000906 	br	2009c494 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xa8>
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
2009c470:	e0bffd17 	ldw	r2,-12(fp)
2009c474:	10c00317 	ldw	r3,12(r2)
2009c478:	e0bfff17 	ldw	r2,-4(fp)
2009c47c:	1880021e 	bne	r3,r2,2009c488 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x9c>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
2009c480:	00bffa84 	movi	r2,-22
2009c484:	00001106 	br	2009c4cc <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
2009c488:	e0bffd17 	ldw	r2,-12(fp)
2009c48c:	10800317 	ldw	r2,12(r2)
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		last_descr_ptr = 
2009c490:	e0bffd15 	stw	r2,-12(fp)
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
2009c494:	e0bffd17 	ldw	r2,-12(fp)
2009c498:	10800317 	ldw	r2,12(r2)
2009c49c:	e0fffe17 	ldw	r3,-8(fp)
2009c4a0:	18c00017 	ldw	r3,0(r3)
2009c4a4:	10fff21e 	bne	r2,r3,2009c470 <__flash_rwdata_start+0xffffd89c>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* add this descriptor to end of list */
	last_descr_ptr->next_desc_ptr = (alt_u32)((uintptr_t)descriptor);
2009c4a8:	e0ffff17 	ldw	r3,-4(fp)
2009c4ac:	e0bffd17 	ldw	r2,-12(fp)
2009c4b0:	10c00315 	stw	r3,12(r2)
	/* ensure new last pointer points the start of the list */
	descriptor->next_desc_ptr = (alt_u32)((uintptr_t)*list);  
2009c4b4:	e0bffe17 	ldw	r2,-8(fp)
2009c4b8:	10800017 	ldw	r2,0(r2)
2009c4bc:	1007883a 	mov	r3,r2
2009c4c0:	e0bfff17 	ldw	r2,-4(fp)
2009c4c4:	10c00315 	stw	r3,12(r2)
	return 0; /* successfully added */
2009c4c8:	0005883a 	mov	r2,zero
}
2009c4cc:	e037883a 	mov	sp,fp
2009c4d0:	df000017 	ldw	fp,0(sp)
2009c4d4:	dec00104 	addi	sp,sp,4
2009c4d8:	f800283a 	ret

2009c4dc <alt_msgdma_prefetcher_add_extended_desc_to_list>:

int alt_msgdma_prefetcher_add_extended_desc_to_list (
	alt_msgdma_prefetcher_extended_descriptor** list,
	alt_msgdma_prefetcher_extended_descriptor* descriptor)
{
2009c4dc:	defff804 	addi	sp,sp,-32
2009c4e0:	df000715 	stw	fp,28(sp)
2009c4e4:	df000704 	addi	fp,sp,28
2009c4e8:	e13ffe15 	stw	r4,-8(fp)
2009c4ec:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	msgdma_addr64 root_node_addr, next_node_addr;
	
	if (descriptor == NULL)
2009c4f0:	e13fff17 	ldw	r4,-4(fp)
2009c4f4:	2000021e 	bne	r4,zero,2009c500 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x24>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
2009c4f8:	00bffa84 	movi	r2,-22
2009c4fc:	00005906 	br	2009c664 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
2009c500:	e13fff17 	ldw	r4,-4(fp)
2009c504:	2015883a 	mov	r10,r4
2009c508:	0017883a 	mov	r11,zero
2009c50c:	e2bffc15 	stw	r10,-16(fp)
2009c510:	e2fffd15 	stw	r11,-12(fp)
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
2009c514:	e13fff17 	ldw	r4,-4(fp)
2009c518:	21400317 	ldw	r5,12(r4)
2009c51c:	e13ffc17 	ldw	r4,-16(fp)
2009c520:	29000626 	beq	r5,r4,2009c53c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
2009c524:	e13fff17 	ldw	r4,-4(fp)
2009c528:	21400b17 	ldw	r5,44(r4)
2009c52c:	e13ffd17 	ldw	r4,-12(fp)
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
2009c530:	29000226 	beq	r5,r4,2009c53c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
2009c534:	00bffa84 	movi	r2,-22
2009c538:	00004a06 	br	2009c664 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	if (*list == NULL)
2009c53c:	e13ffe17 	ldw	r4,-8(fp)
2009c540:	21000017 	ldw	r4,0(r4)
2009c544:	2000051e 	bne	r4,zero,2009c55c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x80>
	{
		*list = descriptor;  /* make this the root-node if list is empty */
2009c548:	e0bffe17 	ldw	r2,-8(fp)
2009c54c:	e0ffff17 	ldw	r3,-4(fp)
2009c550:	10c00015 	stw	r3,0(r2)
		return 0;
2009c554:	0005883a 	mov	r2,zero
2009c558:	00004206 	br	2009c664 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	if (*list == descriptor)
2009c55c:	e13ffe17 	ldw	r4,-8(fp)
2009c560:	21400017 	ldw	r5,0(r4)
2009c564:	e13fff17 	ldw	r4,-4(fp)
2009c568:	2900021e 	bne	r5,r4,2009c574 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x98>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
2009c56c:	00bffa84 	movi	r2,-22
2009c570:	00003c06 	br	2009c664 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
2009c574:	e13ffe17 	ldw	r4,-8(fp)
2009c578:	21000017 	ldw	r4,0(r4)
2009c57c:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
2009c580:	e13ffe17 	ldw	r4,-8(fp)
2009c584:	21000017 	ldw	r4,0(r4)
2009c588:	2011883a 	mov	r8,r4
2009c58c:	0013883a 	mov	r9,zero
2009c590:	e23ffa15 	stw	r8,-24(fp)
2009c594:	e27ffb15 	stw	r9,-20(fp)
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
2009c598:	00001806 	br	2009c5fc <alt_msgdma_prefetcher_add_extended_desc_to_list+0x120>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* first check if descriptor already in the list */
		next_node_addr.u64 = (uintptr_t)descriptor;
2009c59c:	e13fff17 	ldw	r4,-4(fp)
2009c5a0:	200d883a 	mov	r6,r4
2009c5a4:	000f883a 	mov	r7,zero
2009c5a8:	e1bffc15 	stw	r6,-16(fp)
2009c5ac:	e1fffd15 	stw	r7,-12(fp)
		if ((last_descr_ptr->next_desc_ptr_low == next_node_addr.u32[0])
2009c5b0:	e13ff917 	ldw	r4,-28(fp)
2009c5b4:	21400317 	ldw	r5,12(r4)
2009c5b8:	e13ffc17 	ldw	r4,-16(fp)
2009c5bc:	2900061e 	bne	r5,r4,2009c5d8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
			&& (last_descr_ptr->next_desc_ptr_high == next_node_addr.u32[1]))
2009c5c0:	e13ff917 	ldw	r4,-28(fp)
2009c5c4:	21400b17 	ldw	r5,44(r4)
2009c5c8:	e13ffd17 	ldw	r4,-12(fp)
2009c5cc:	2900021e 	bne	r5,r4,2009c5d8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
2009c5d0:	00bffa84 	movi	r2,-22
2009c5d4:	00002306 	br	2009c664 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
2009c5d8:	e13ff917 	ldw	r4,-28(fp)
2009c5dc:	21000317 	ldw	r4,12(r4)
2009c5e0:	e13ffc15 	stw	r4,-16(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
2009c5e4:	e13ff917 	ldw	r4,-28(fp)
2009c5e8:	21000b17 	ldw	r4,44(r4)
2009c5ec:	e13ffd15 	stw	r4,-12(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
2009c5f0:	e13ffc17 	ldw	r4,-16(fp)
2009c5f4:	e17ffd17 	ldw	r5,-12(fp)
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
2009c5f8:	e13ff915 	stw	r4,-28(fp)
	last_descr_ptr = *list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
2009c5fc:	e13ff917 	ldw	r4,-28(fp)
2009c600:	21400317 	ldw	r5,12(r4)
2009c604:	e13ffa17 	ldw	r4,-24(fp)
2009c608:	29000426 	beq	r5,r4,2009c61c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x140>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
2009c60c:	e13ff917 	ldw	r4,-28(fp)
2009c610:	21400b17 	ldw	r5,44(r4)
2009c614:	e13ffb17 	ldw	r4,-20(fp)
2009c618:	293fe01e 	bne	r5,r4,2009c59c <__flash_rwdata_start+0xffffd9c8>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* add this descriptor to end of list */
	next_node_addr.u64 = (uintptr_t)descriptor;
2009c61c:	e13fff17 	ldw	r4,-4(fp)
2009c620:	2005883a 	mov	r2,r4
2009c624:	0007883a 	mov	r3,zero
2009c628:	e0bffc15 	stw	r2,-16(fp)
2009c62c:	e0fffd15 	stw	r3,-12(fp)
	last_descr_ptr->next_desc_ptr_low = next_node_addr.u32[0];
2009c630:	e0fffc17 	ldw	r3,-16(fp)
2009c634:	e0bff917 	ldw	r2,-28(fp)
2009c638:	10c00315 	stw	r3,12(r2)
	last_descr_ptr->next_desc_ptr_high = next_node_addr.u32[1];
2009c63c:	e0fffd17 	ldw	r3,-12(fp)
2009c640:	e0bff917 	ldw	r2,-28(fp)
2009c644:	10c00b15 	stw	r3,44(r2)
	/* ensure new last pointer points the beginning of the list */
	descriptor->next_desc_ptr_low = root_node_addr.u32[0];
2009c648:	e0fffa17 	ldw	r3,-24(fp)
2009c64c:	e0bfff17 	ldw	r2,-4(fp)
2009c650:	10c00315 	stw	r3,12(r2)
	descriptor->next_desc_ptr_high = root_node_addr.u32[1];
2009c654:	e0fffb17 	ldw	r3,-20(fp)
2009c658:	e0bfff17 	ldw	r2,-4(fp)
2009c65c:	10c00b15 	stw	r3,44(r2)
	return 0;
2009c660:	0005883a 	mov	r2,zero
}
2009c664:	e037883a 	mov	sp,fp
2009c668:	df000017 	ldw	fp,0(sp)
2009c66c:	dec00104 	addi	sp,sp,4
2009c670:	f800283a 	ret

2009c674 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_std_list_own_by_hw_bits (
	alt_msgdma_prefetcher_standard_descriptor *list)
{
2009c674:	defffc04 	addi	sp,sp,-16
2009c678:	df000315 	stw	fp,12(sp)
2009c67c:	df000304 	addi	fp,sp,12
2009c680:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
2009c684:	e03ffe15 	stw	zero,-8(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	if (list == NULL)
2009c688:	e0bfff17 	ldw	r2,-4(fp)
2009c68c:	1000021e 	bne	r2,zero,2009c698 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x24>
	{
		return -EINVAL;  /* this list cannot be empty */
2009c690:	00bffa84 	movi	r2,-22
2009c694:	00001906 	br	2009c6fc <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x88>
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
2009c698:	e0bfff17 	ldw	r2,-4(fp)
2009c69c:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
2009c6a0:	00000a06 	br	2009c6cc <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x58>
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
2009c6a4:	e0bffd17 	ldw	r2,-12(fp)
2009c6a8:	10800717 	ldw	r2,28(r2)
2009c6ac:	e0bffe15 	stw	r2,-8(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
2009c6b0:	e0bffe17 	ldw	r2,-8(fp)
2009c6b4:	10d00034 	orhi	r3,r2,16384
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
2009c6b8:	e0bffd17 	ldw	r2,-12(fp)
2009c6bc:	10c00715 	stw	r3,28(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
2009c6c0:	e0bffd17 	ldw	r2,-12(fp)
2009c6c4:	10800317 	ldw	r2,12(r2)
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
2009c6c8:	e0bffd15 	stw	r2,-12(fp)
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
2009c6cc:	e0bffd17 	ldw	r2,-12(fp)
2009c6d0:	10c00317 	ldw	r3,12(r2)
2009c6d4:	e0bfff17 	ldw	r2,-4(fp)
2009c6d8:	18bff21e 	bne	r3,r2,2009c6a4 <__flash_rwdata_start+0xffffdad0>
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
2009c6dc:	e0bffd17 	ldw	r2,-12(fp)
2009c6e0:	10800717 	ldw	r2,28(r2)
2009c6e4:	e0bffe15 	stw	r2,-8(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
2009c6e8:	e0bffe17 	ldw	r2,-8(fp)
2009c6ec:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
2009c6f0:	e0bffd17 	ldw	r2,-12(fp)
2009c6f4:	10c00715 	stw	r3,28(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	
	return 0;
2009c6f8:	0005883a 	mov	r2,zero
}
2009c6fc:	e037883a 	mov	sp,fp
2009c700:	df000017 	ldw	fp,0(sp)
2009c704:	dec00104 	addi	sp,sp,4
2009c708:	f800283a 	ret

2009c70c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits (
	alt_msgdma_prefetcher_extended_descriptor *list)
{
2009c70c:	defff804 	addi	sp,sp,-32
2009c710:	df000715 	stw	fp,28(sp)
2009c714:	df000704 	addi	fp,sp,28
2009c718:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
2009c71c:	e03ffa15 	stw	zero,-24(fp)
	msgdma_addr64 root_node_addr, next_node_addr;
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	
	if (list == NULL)
2009c720:	e13fff17 	ldw	r4,-4(fp)
2009c724:	2000021e 	bne	r4,zero,2009c730 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x24>
	{
		return -EINVAL;  /* this list cannot be empty */
2009c728:	00bffa84 	movi	r2,-22
2009c72c:	00002806 	br	2009c7d0 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xc4>
	}
	
	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
2009c730:	e13fff17 	ldw	r4,-4(fp)
2009c734:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;
2009c738:	e13fff17 	ldw	r4,-4(fp)
2009c73c:	2005883a 	mov	r2,r4
2009c740:	0007883a 	mov	r3,zero
2009c744:	e0bffb15 	stw	r2,-20(fp)
2009c748:	e0fffc15 	stw	r3,-16(fp)

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
2009c74c:	00001006 	br	2009c790 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x84>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
2009c750:	e0bff917 	ldw	r2,-28(fp)
2009c754:	10800f17 	ldw	r2,60(r2)
2009c758:	e0bffa15 	stw	r2,-24(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
2009c75c:	e0bffa17 	ldw	r2,-24(fp)
2009c760:	10d00034 	orhi	r3,r2,16384
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
2009c764:	e0bff917 	ldw	r2,-28(fp)
2009c768:	10c00f15 	stw	r3,60(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
2009c76c:	e0bff917 	ldw	r2,-28(fp)
2009c770:	10800317 	ldw	r2,12(r2)
2009c774:	e0bffd15 	stw	r2,-12(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
2009c778:	e0bff917 	ldw	r2,-28(fp)
2009c77c:	10800b17 	ldw	r2,44(r2)
2009c780:	e0bffe15 	stw	r2,-8(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
2009c784:	e0bffd17 	ldw	r2,-12(fp)
2009c788:	e0fffe17 	ldw	r3,-8(fp)
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
2009c78c:	e0bff915 	stw	r2,-28(fp)
	last_descr_ptr = list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
2009c790:	e0bff917 	ldw	r2,-28(fp)
2009c794:	10c00317 	ldw	r3,12(r2)
2009c798:	e0bffb17 	ldw	r2,-20(fp)
2009c79c:	18800426 	beq	r3,r2,2009c7b0 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xa4>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
2009c7a0:	e0bff917 	ldw	r2,-28(fp)
2009c7a4:	10c00b17 	ldw	r3,44(r2)
2009c7a8:	e0bffc17 	ldw	r2,-16(fp)
2009c7ac:	18bfe81e 	bne	r3,r2,2009c750 <__flash_rwdata_start+0xffffdb7c>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
2009c7b0:	e0bff917 	ldw	r2,-28(fp)
2009c7b4:	10800f17 	ldw	r2,60(r2)
2009c7b8:	e0bffa15 	stw	r2,-24(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
2009c7bc:	e0bffa17 	ldw	r2,-24(fp)
2009c7c0:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
2009c7c4:	e0bff917 	ldw	r2,-28(fp)
2009c7c8:	10c00f15 	stw	r3,60(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	return 0;
2009c7cc:	0005883a 	mov	r2,zero
}
2009c7d0:	e037883a 	mov	sp,fp
2009c7d4:	df000017 	ldw	fp,0(sp)
2009c7d8:	dec00104 	addi	sp,sp,4
2009c7dc:	f800283a 	ret

2009c7e0 <alt_msgdma_start_prefetcher_with_list_addr>:
int alt_msgdma_start_prefetcher_with_list_addr (
	alt_msgdma_dev *dev,
	alt_u64  list_addr,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
2009c7e0:	deffef04 	addi	sp,sp,-68
2009c7e4:	df001015 	stw	fp,64(sp)
2009c7e8:	df001004 	addi	fp,sp,64
2009c7ec:	e13ffb15 	stw	r4,-20(fp)
2009c7f0:	e17ffc15 	stw	r5,-16(fp)
2009c7f4:	e1bffd15 	stw	r6,-12(fp)
2009c7f8:	3807883a 	mov	r3,r7
2009c7fc:	e0800117 	ldw	r2,4(fp)
2009c800:	e0fffe05 	stb	r3,-8(fp)
2009c804:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 prefetcher_ctl = 0;
2009c808:	e03ff015 	stw	zero,-64(fp)
	alt_u32 dispatcher_ctl = 0;
2009c80c:	e03ff115 	stw	zero,-60(fp)
	alt_irq_context context = 0;
2009c810:	e03ff215 	stw	zero,-56(fp)
	
	/* use helper struct to get easy access to hi/low address */
	msgdma_addr64 root_node_addr;
	root_node_addr.u64 = list_addr;  
2009c814:	e0bffc17 	ldw	r2,-16(fp)
2009c818:	e0bff915 	stw	r2,-28(fp)
2009c81c:	e0bffd17 	ldw	r2,-12(fp)
2009c820:	e0bffa15 	stw	r2,-24(fp)
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND (dev->regs_lock, 0);
	
	/* case where prefetcher already started, return busy error */ 
	prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
2009c824:	e0bffb17 	ldw	r2,-20(fp)
2009c828:	10800617 	ldw	r2,24(r2)
2009c82c:	10800037 	ldwio	r2,0(r2)
2009c830:	e0bff015 	stw	r2,-64(fp)
	if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
2009c834:	e0bff017 	ldw	r2,-64(fp)
2009c838:	1080004c 	andi	r2,r2,1
2009c83c:	10000226 	beq	r2,zero,2009c848 <alt_msgdma_start_prefetcher_with_list_addr+0x68>
		/* release the registers semaphore */
		ALT_SEM_POST (dev->regs_lock);
		return -EBUSY;
2009c840:	00bffc04 	movi	r2,-16
2009c844:	00009206 	br	2009ca90 <alt_msgdma_start_prefetcher_with_list_addr+0x2b0>
	}
		
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	   read or write masters  */
	/* stop issuing more descriptors */
	dispatcher_ctl = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
2009c848:	00800804 	movi	r2,32
2009c84c:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2009c850:	0005303a 	rdctl	r2,status
2009c854:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2009c858:	e0fff317 	ldw	r3,-52(fp)
2009c85c:	00bfff84 	movi	r2,-2
2009c860:	1884703a 	and	r2,r3,r2
2009c864:	1001703a 	wrctl	status,r2
  
  return context;
2009c868:	e0bff317 	ldw	r2,-52(fp)
	
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
2009c86c:	e0bff215 	stw	r2,-56(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
2009c870:	e0bffb17 	ldw	r2,-20(fp)
2009c874:	10800317 	ldw	r2,12(r2)
2009c878:	10800104 	addi	r2,r2,4
2009c87c:	e0fff117 	ldw	r3,-60(fp)
2009c880:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS( dev->csr_base, 
2009c884:	e0bffb17 	ldw	r2,-20(fp)
2009c888:	10800317 	ldw	r2,12(r2)
2009c88c:	e0fffb17 	ldw	r3,-20(fp)
2009c890:	18c00317 	ldw	r3,12(r3)
2009c894:	18c00037 	ldwio	r3,0(r3)
2009c898:	10c00035 	stwio	r3,0(r2)
2009c89c:	e0bff217 	ldw	r2,-56(fp)
2009c8a0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2009c8a4:	e0bff417 	ldw	r2,-48(fp)
2009c8a8:	1001703a 	wrctl	status,r2
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up dispatcher to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if(dev->callback)
2009c8ac:	e0bffb17 	ldw	r2,-20(fp)
2009c8b0:	10800b17 	ldw	r2,44(r2)
2009c8b4:	10002326 	beq	r2,zero,2009c944 <alt_msgdma_start_prefetcher_with_list_addr+0x164>
	{
		dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
2009c8b8:	e0bffb17 	ldw	r2,-20(fp)
2009c8bc:	10c00d17 	ldw	r3,52(r2)
2009c8c0:	e0bff117 	ldw	r2,-60(fp)
2009c8c4:	1884b03a 	or	r2,r3,r2
2009c8c8:	10800514 	ori	r2,r2,20
2009c8cc:	e0bff115 	stw	r2,-60(fp)
				| ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
		dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
2009c8d0:	e0fff117 	ldw	r3,-60(fp)
2009c8d4:	00bff7c4 	movi	r2,-33
2009c8d8:	1884703a 	and	r2,r3,r2
2009c8dc:	e0bff115 	stw	r2,-60(fp)
		
		prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
2009c8e0:	e0bff017 	ldw	r2,-64(fp)
2009c8e4:	10800214 	ori	r2,r2,8
2009c8e8:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2009c8ec:	0005303a 	rdctl	r2,status
2009c8f0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2009c8f4:	e0fff517 	ldw	r3,-44(fp)
2009c8f8:	00bfff84 	movi	r2,-2
2009c8fc:	1884703a 	and	r2,r3,r2
2009c900:	1001703a 	wrctl	status,r2
  
  return context;
2009c904:	e0bff517 	ldw	r2,-44(fp)
	    /* making sure the read-modify-write below can't be pre-empted */
	    context = alt_irq_disable_all(); 
2009c908:	e0bff215 	stw	r2,-56(fp)
	    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
2009c90c:	e0bffb17 	ldw	r2,-20(fp)
2009c910:	10800317 	ldw	r2,12(r2)
2009c914:	10800104 	addi	r2,r2,4
2009c918:	e0fff117 	ldw	r3,-60(fp)
2009c91c:	10c00035 	stwio	r3,0(r2)
		IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
2009c920:	e0bffb17 	ldw	r2,-20(fp)
2009c924:	10800617 	ldw	r2,24(r2)
2009c928:	e0fff017 	ldw	r3,-64(fp)
2009c92c:	10c00035 	stwio	r3,0(r2)
2009c930:	e0bff217 	ldw	r2,-56(fp)
2009c934:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2009c938:	e0bff617 	ldw	r2,-40(fp)
2009c93c:	1001703a 	wrctl	status,r2
2009c940:	00002306 	br	2009c9d0 <alt_msgdma_start_prefetcher_with_list_addr+0x1f0>
	  *   - Stop on an error with any particular descriptor
	  *   - Disable interrupt generation
	  */
	 else
	 {
		 dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
2009c944:	e0bffb17 	ldw	r2,-20(fp)
2009c948:	10c00d17 	ldw	r3,52(r2)
2009c94c:	e0bff117 	ldw	r2,-60(fp)
2009c950:	1884b03a 	or	r2,r3,r2
2009c954:	10800114 	ori	r2,r2,4
2009c958:	e0bff115 	stw	r2,-60(fp)
		 dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
2009c95c:	e0fff117 	ldw	r3,-60(fp)
2009c960:	00bff3c4 	movi	r2,-49
2009c964:	1884703a 	and	r2,r3,r2
2009c968:	e0bff115 	stw	r2,-60(fp)
				 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
2009c96c:	e0fff017 	ldw	r3,-64(fp)
2009c970:	00bffdc4 	movi	r2,-9
2009c974:	1884703a 	and	r2,r3,r2
2009c978:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2009c97c:	0005303a 	rdctl	r2,status
2009c980:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2009c984:	e0fff717 	ldw	r3,-36(fp)
2009c988:	00bfff84 	movi	r2,-2
2009c98c:	1884703a 	and	r2,r3,r2
2009c990:	1001703a 	wrctl	status,r2
  
  return context;
2009c994:	e0bff717 	ldw	r2,-36(fp)
	     /* making sure the read-modify-write below can't be pre-empted */
	     context = alt_irq_disable_all();
2009c998:	e0bff215 	stw	r2,-56(fp)
	     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
2009c99c:	e0bffb17 	ldw	r2,-20(fp)
2009c9a0:	10800317 	ldw	r2,12(r2)
2009c9a4:	10800104 	addi	r2,r2,4
2009c9a8:	e0fff117 	ldw	r3,-60(fp)
2009c9ac:	10c00035 	stwio	r3,0(r2)
	     IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
2009c9b0:	e0bffb17 	ldw	r2,-20(fp)
2009c9b4:	10800617 	ldw	r2,24(r2)
2009c9b8:	e0fff017 	ldw	r3,-64(fp)
2009c9bc:	10c00035 	stwio	r3,0(r2)
2009c9c0:	e0bff217 	ldw	r2,-56(fp)
2009c9c4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2009c9c8:	e0bff817 	ldw	r2,-32(fp)
2009c9cc:	1001703a 	wrctl	status,r2
	     alt_irq_enable_all(context);
	 }   
	
	 /* set next descriptor registers to point to the list root-node */
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_LOW(dev->prefetcher_base,
2009c9d0:	e0bffb17 	ldw	r2,-20(fp)
2009c9d4:	10800617 	ldw	r2,24(r2)
2009c9d8:	10800104 	addi	r2,r2,4
2009c9dc:	e0fff917 	ldw	r3,-28(fp)
2009c9e0:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[0]);
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
2009c9e4:	e0bffb17 	ldw	r2,-20(fp)
2009c9e8:	10800617 	ldw	r2,24(r2)
2009c9ec:	10800204 	addi	r2,r2,8
2009c9f0:	e0fffa17 	ldw	r3,-24(fp)
2009c9f4:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[1]);
		
	 /* set park-mode */
	 if (park_mode_en){
2009c9f8:	e0bffe03 	ldbu	r2,-8(fp)
2009c9fc:	10000426 	beq	r2,zero,2009ca10 <alt_msgdma_start_prefetcher_with_list_addr+0x230>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
2009ca00:	e0bff017 	ldw	r2,-64(fp)
2009ca04:	10800414 	ori	r2,r2,16
2009ca08:	e0bff015 	stw	r2,-64(fp)
2009ca0c:	00000406 	br	2009ca20 <alt_msgdma_start_prefetcher_with_list_addr+0x240>
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
2009ca10:	e0fff017 	ldw	r3,-64(fp)
2009ca14:	00bffbc4 	movi	r2,-17
2009ca18:	1884703a 	and	r2,r3,r2
2009ca1c:	e0bff015 	stw	r2,-64(fp)
	 }
	 
	 /* set poll-en */
	 if (poll_en){
2009ca20:	e0bfff03 	ldbu	r2,-4(fp)
2009ca24:	10000e26 	beq	r2,zero,2009ca60 <alt_msgdma_start_prefetcher_with_list_addr+0x280>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
2009ca28:	e0bff017 	ldw	r2,-64(fp)
2009ca2c:	10800094 	ori	r2,r2,2
2009ca30:	e0bff015 	stw	r2,-64(fp)
		 if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
2009ca34:	e0bffb17 	ldw	r2,-20(fp)
2009ca38:	10800617 	ldw	r2,24(r2)
2009ca3c:	10800304 	addi	r2,r2,12
2009ca40:	10800037 	ldwio	r2,0(r2)
2009ca44:	10000a1e 	bne	r2,zero,2009ca70 <alt_msgdma_start_prefetcher_with_list_addr+0x290>
				 dev->prefetcher_base) == 0){
			 /* set poll frequency to some non-zero default value */
			 IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
2009ca48:	e0bffb17 	ldw	r2,-20(fp)
2009ca4c:	10800617 	ldw	r2,24(r2)
2009ca50:	10800304 	addi	r2,r2,12
2009ca54:	00c03fc4 	movi	r3,255
2009ca58:	10c00035 	stwio	r3,0(r2)
2009ca5c:	00000406 	br	2009ca70 <alt_msgdma_start_prefetcher_with_list_addr+0x290>
					 dev->prefetcher_base, 0xFF);
		 }
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_CLR_MASK; 
2009ca60:	e0fff017 	ldw	r3,-64(fp)
2009ca64:	00bfff44 	movi	r2,-3
2009ca68:	1884703a 	and	r2,r3,r2
2009ca6c:	e0bff015 	stw	r2,-64(fp)
	 }
	 
	 /* set the prefetcher run bit */
	 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_RUN_SET_MASK;
2009ca70:	e0bff017 	ldw	r2,-64(fp)
2009ca74:	10800054 	ori	r2,r2,1
2009ca78:	e0bff015 	stw	r2,-64(fp)
	 /* start the dma since run bit is set */
	 IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
2009ca7c:	e0bffb17 	ldw	r2,-20(fp)
2009ca80:	10800617 	ldw	r2,24(r2)
2009ca84:	e0fff017 	ldw	r3,-64(fp)
2009ca88:	10c00035 	stwio	r3,0(r2)
	  * Now that access to the registers is complete, release the registers
	  * semaphore so that other threads can access the registers.
	  */
	 ALT_SEM_POST (dev->regs_lock);
	 
	 return 0;
2009ca8c:	0005883a 	mov	r2,zero
}
2009ca90:	e037883a 	mov	sp,fp
2009ca94:	df000017 	ldw	fp,0(sp)
2009ca98:	dec00104 	addi	sp,sp,4
2009ca9c:	f800283a 	ret

2009caa0 <alt_msgdma_start_prefetcher_with_std_desc_list>:
int alt_msgdma_start_prefetcher_with_std_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{	
2009caa0:	defff704 	addi	sp,sp,-36
2009caa4:	dfc00815 	stw	ra,32(sp)
2009caa8:	df000715 	stw	fp,28(sp)
2009caac:	dc400615 	stw	r17,24(sp)
2009cab0:	dc000515 	stw	r16,20(sp)
2009cab4:	df000704 	addi	fp,sp,28
2009cab8:	e13ffa15 	stw	r4,-24(fp)
2009cabc:	e17ffb15 	stw	r5,-20(fp)
2009cac0:	3007883a 	mov	r3,r6
2009cac4:	3805883a 	mov	r2,r7
2009cac8:	e0fffc05 	stb	r3,-16(fp)
2009cacc:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_std_list_own_by_hw_bits(list) != 0){
2009cad0:	e13ffb17 	ldw	r4,-20(fp)
2009cad4:	009c6740 	call	2009c674 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>
2009cad8:	10000226 	beq	r2,zero,2009cae4 <alt_msgdma_start_prefetcher_with_std_desc_list+0x44>
		return -EINVAL;
2009cadc:	00bffa84 	movi	r2,-22
2009cae0:	00000b06 	br	2009cb10 <alt_msgdma_start_prefetcher_with_std_desc_list+0x70>
	}
	
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list,
2009cae4:	e0bffb17 	ldw	r2,-20(fp)
2009cae8:	1021883a 	mov	r16,r2
2009caec:	0023883a 	mov	r17,zero
2009caf0:	e0fffc03 	ldbu	r3,-16(fp)
2009caf4:	e0bffd03 	ldbu	r2,-12(fp)
2009caf8:	d8800015 	stw	r2,0(sp)
2009cafc:	e13ffa17 	ldw	r4,-24(fp)
2009cb00:	800b883a 	mov	r5,r16
2009cb04:	880d883a 	mov	r6,r17
2009cb08:	180f883a 	mov	r7,r3
2009cb0c:	009c7e00 	call	2009c7e0 <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
2009cb10:	e6fffe04 	addi	sp,fp,-8
2009cb14:	dfc00317 	ldw	ra,12(sp)
2009cb18:	df000217 	ldw	fp,8(sp)
2009cb1c:	dc400117 	ldw	r17,4(sp)
2009cb20:	dc000017 	ldw	r16,0(sp)
2009cb24:	dec00404 	addi	sp,sp,16
2009cb28:	f800283a 	ret

2009cb2c <alt_msgdma_start_prefetcher_with_extd_desc_list>:
int alt_msgdma_start_prefetcher_with_extd_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_extended_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
2009cb2c:	defff704 	addi	sp,sp,-36
2009cb30:	dfc00815 	stw	ra,32(sp)
2009cb34:	df000715 	stw	fp,28(sp)
2009cb38:	dc400615 	stw	r17,24(sp)
2009cb3c:	dc000515 	stw	r16,20(sp)
2009cb40:	df000704 	addi	fp,sp,28
2009cb44:	e13ffa15 	stw	r4,-24(fp)
2009cb48:	e17ffb15 	stw	r5,-20(fp)
2009cb4c:	3007883a 	mov	r3,r6
2009cb50:	3805883a 	mov	r2,r7
2009cb54:	e0fffc05 	stb	r3,-16(fp)
2009cb58:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list) != 0){
2009cb5c:	e13ffb17 	ldw	r4,-20(fp)
2009cb60:	009c70c0 	call	2009c70c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>
2009cb64:	10000226 	beq	r2,zero,2009cb70 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x44>
		return -EINVAL;
2009cb68:	00bffa84 	movi	r2,-22
2009cb6c:	00000b06 	br	2009cb9c <alt_msgdma_start_prefetcher_with_extd_desc_list+0x70>
	}
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list, 
2009cb70:	e0bffb17 	ldw	r2,-20(fp)
2009cb74:	1021883a 	mov	r16,r2
2009cb78:	0023883a 	mov	r17,zero
2009cb7c:	e0fffc03 	ldbu	r3,-16(fp)
2009cb80:	e0bffd03 	ldbu	r2,-12(fp)
2009cb84:	d8800015 	stw	r2,0(sp)
2009cb88:	e13ffa17 	ldw	r4,-24(fp)
2009cb8c:	800b883a 	mov	r5,r16
2009cb90:	880d883a 	mov	r6,r17
2009cb94:	180f883a 	mov	r7,r3
2009cb98:	009c7e00 	call	2009c7e0 <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
2009cb9c:	e6fffe04 	addi	sp,fp,-8
2009cba0:	dfc00317 	ldw	ra,12(sp)
2009cba4:	df000217 	ldw	fp,8(sp)
2009cba8:	dc400117 	ldw	r17,4(sp)
2009cbac:	dc000017 	ldw	r16,0(sp)
2009cbb0:	dec00404 	addi	sp,sp,16
2009cbb4:	f800283a 	ret

2009cbb8 <alt_msgdma_open>:
 * Returns:
 * - Pointer to msgdma device instance structure, or null if the device
 *   could not be opened.
 */
alt_msgdma_dev* alt_msgdma_open (const char* name)
{
2009cbb8:	defffc04 	addi	sp,sp,-16
2009cbbc:	dfc00315 	stw	ra,12(sp)
2009cbc0:	df000215 	stw	fp,8(sp)
2009cbc4:	df000204 	addi	fp,sp,8
2009cbc8:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev* dev = NULL;
2009cbcc:	e03ffe15 	stw	zero,-8(fp)

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
2009cbd0:	e13fff17 	ldw	r4,-4(fp)
2009cbd4:	d1601204 	addi	r5,gp,-32696
2009cbd8:	009d3040 	call	2009d304 <alt_find_dev>
2009cbdc:	e0bffe15 	stw	r2,-8(fp)

    if (NULL == dev)
2009cbe0:	e0bffe17 	ldw	r2,-8(fp)
2009cbe4:	1000041e 	bne	r2,zero,2009cbf8 <alt_msgdma_open+0x40>
    {
        ALT_ERRNO = ENODEV;
2009cbe8:	009b0300 	call	2009b030 <alt_get_errno>
2009cbec:	1007883a 	mov	r3,r2
2009cbf0:	008004c4 	movi	r2,19
2009cbf4:	18800015 	stw	r2,0(r3)
    }

    return dev;
2009cbf8:	e0bffe17 	ldw	r2,-8(fp)
}
2009cbfc:	e037883a 	mov	sp,fp
2009cc00:	dfc00117 	ldw	ra,4(sp)
2009cc04:	df000017 	ldw	fp,0(sp)
2009cc08:	dec00204 	addi	sp,sp,8
2009cc0c:	f800283a 	ret

2009cc10 <alt_msgdma_init>:
 * This routine disables interrupts, descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_msgdma_init (alt_msgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
2009cc10:	defff804 	addi	sp,sp,-32
2009cc14:	dfc00715 	stw	ra,28(sp)
2009cc18:	df000615 	stw	fp,24(sp)
2009cc1c:	df000604 	addi	fp,sp,24
2009cc20:	e13ffd15 	stw	r4,-12(fp)
2009cc24:	e17ffe15 	stw	r5,-8(fp)
2009cc28:	e1bfff15 	stw	r6,-4(fp)
    extern alt_llist alt_msgdma_list;
    alt_u32 temporary_control;
    int error;

    if (dev->prefetcher_enable)
2009cc2c:	e0bffd17 	ldw	r2,-12(fp)
2009cc30:	10801783 	ldbu	r2,94(r2)
2009cc34:	10803fcc 	andi	r2,r2,255
2009cc38:	10000b26 	beq	r2,zero,2009cc68 <alt_msgdma_init+0x58>
    {
    	/* start prefetcher reset sequence */
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, 
2009cc3c:	e0bffd17 	ldw	r2,-12(fp)
2009cc40:	10800617 	ldw	r2,24(r2)
2009cc44:	00c00104 	movi	r3,4
2009cc48:	10c00035 	stwio	r3,0(r2)
    			ALT_MSGDMA_PREFETCHER_CTRL_RESET_SET_MASK);
    	/* wait until hw clears the bit */
    	while(ALT_MSGDMA_PREFETCHER_CTRL_RESET_GET(
2009cc4c:	0001883a 	nop
2009cc50:	e0bffd17 	ldw	r2,-12(fp)
2009cc54:	10800617 	ldw	r2,24(r2)
2009cc58:	10800037 	ldwio	r2,0(r2)
2009cc5c:	1080010c 	andi	r2,r2,4
2009cc60:	1005d0ba 	srai	r2,r2,2
2009cc64:	103ffa1e 	bne	r2,zero,2009cc50 <__flash_rwdata_start+0xffffe07c>
    }    
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
2009cc68:	e0bffd17 	ldw	r2,-12(fp)
2009cc6c:	10800317 	ldw	r2,12(r2)
2009cc70:	10800104 	addi	r2,r2,4
2009cc74:	00c00084 	movi	r3,2
2009cc78:	10c00035 	stwio	r3,0(r2)
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
2009cc7c:	0001883a 	nop
2009cc80:	e0bffd17 	ldw	r2,-12(fp)
2009cc84:	10800317 	ldw	r2,12(r2)
2009cc88:	10800037 	ldwio	r2,0(r2)
    		& ALTERA_MSGDMA_CSR_RESET_STATE_MASK));
2009cc8c:	1080100c 	andi	r2,r2,64
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
2009cc90:	103ffb1e 	bne	r2,zero,2009cc80 <__flash_rwdata_start+0xffffe0ac>
    * Disable interrupts, halt descriptor processing,
    * and clear status register content
    */

    /* disable global interrupt */
    temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
2009cc94:	e0bffd17 	ldw	r2,-12(fp)
2009cc98:	10800317 	ldw	r2,12(r2)
2009cc9c:	10800104 	addi	r2,r2,4
2009cca0:	10800037 	ldwio	r2,0(r2)
2009cca4:	1007883a 	mov	r3,r2
2009cca8:	00bffbc4 	movi	r2,-17
2009ccac:	1884703a 	and	r2,r3,r2
2009ccb0:	e0bffb15 	stw	r2,-20(fp)
    		& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    /* stopping descriptor */
    temporary_control |= ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
2009ccb4:	e0bffb17 	ldw	r2,-20(fp)
2009ccb8:	10800814 	ori	r2,r2,32
2009ccbc:	e0bffb15 	stw	r2,-20(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
2009ccc0:	e0bffd17 	ldw	r2,-12(fp)
2009ccc4:	10800317 	ldw	r2,12(r2)
2009ccc8:	10800104 	addi	r2,r2,4
2009cccc:	e0fffb17 	ldw	r3,-20(fp)
2009ccd0:	10c00035 	stwio	r3,0(r2)

    /* clear the CSR status register */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base, 
2009ccd4:	e0bffd17 	ldw	r2,-12(fp)
2009ccd8:	10800317 	ldw	r2,12(r2)
2009ccdc:	e0fffd17 	ldw	r3,-12(fp)
2009cce0:	18c00317 	ldw	r3,12(r3)
2009cce4:	18c00037 	ldwio	r3,0(r3)
2009cce8:	10c00035 	stwio	r3,0(r2)
    		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    
    if (dev->prefetcher_enable)
2009ccec:	e0bffd17 	ldw	r2,-12(fp)
2009ccf0:	10801783 	ldbu	r2,94(r2)
2009ccf4:	10803fcc 	andi	r2,r2,255
2009ccf8:	10000826 	beq	r2,zero,2009cd1c <alt_msgdma_init+0x10c>
    {
    	/* clear all status bits that are set, since theyre W1C */
    	IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base, 
2009ccfc:	e0bffd17 	ldw	r2,-12(fp)
2009cd00:	10800617 	ldw	r2,24(r2)
2009cd04:	10800404 	addi	r2,r2,16
2009cd08:	e0fffd17 	ldw	r3,-12(fp)
2009cd0c:	18c00617 	ldw	r3,24(r3)
2009cd10:	18c00404 	addi	r3,r3,16
2009cd14:	18c00037 	ldwio	r3,0(r3)
2009cd18:	10c00035 	stwio	r3,0(r2)
    			IORD_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base));
    }

    /* Register this instance of the msgdma controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_msgdma_list);
2009cd1c:	e13ffd17 	ldw	r4,-12(fp)
2009cd20:	d1601204 	addi	r5,gp,-32696
2009cd24:	009d1a80 	call	2009d1a8 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
2009cd28:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
2009cd2c:	e0bffc15 	stw	r2,-16(fp)
            
    if (!error)
2009cd30:	e0bffc17 	ldw	r2,-16(fp)
2009cd34:	1000081e 	bne	r2,zero,2009cd58 <alt_msgdma_init+0x148>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
2009cd38:	d8000015 	stw	zero,0(sp)
2009cd3c:	e13ffe17 	ldw	r4,-8(fp)
2009cd40:	e17fff17 	ldw	r5,-4(fp)
2009cd44:	018802b4 	movhi	r6,8202
2009cd48:	31ac9004 	addi	r6,r6,-19904
2009cd4c:	e1fffd17 	ldw	r7,-12(fp)
2009cd50:	009d3c40 	call	2009d3c4 <alt_ic_isr_register>
2009cd54:	00000306 	br	2009cd64 <alt_msgdma_init+0x154>
    }
    else
    {
        alt_printf("failed to create semaphores\n");
2009cd58:	01000034 	movhi	r4,0
2009cd5c:	2102b404 	addi	r4,r4,2768
2009cd60:	009da400 	call	2009da40 <alt_printf>
    }
    
    return;
2009cd64:	0001883a 	nop

}
2009cd68:	e037883a 	mov	sp,fp
2009cd6c:	dfc00117 	ldw	ra,4(sp)
2009cd70:	df000017 	ldw	fp,0(sp)
2009cd74:	dec00204 	addi	sp,sp,8
2009cd78:	f800283a 	ret

2009cd7c <alt_msgdma_register_callback>:
void alt_msgdma_register_callback(
	alt_msgdma_dev *dev,
	alt_msgdma_callback callback,
	alt_u32 control,
	void *context)
{
2009cd7c:	defffb04 	addi	sp,sp,-20
2009cd80:	df000415 	stw	fp,16(sp)
2009cd84:	df000404 	addi	fp,sp,16
2009cd88:	e13ffc15 	stw	r4,-16(fp)
2009cd8c:	e17ffd15 	stw	r5,-12(fp)
2009cd90:	e1bffe15 	stw	r6,-8(fp)
2009cd94:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
2009cd98:	e0bffc17 	ldw	r2,-16(fp)
2009cd9c:	e0fffd17 	ldw	r3,-12(fp)
2009cda0:	10c00b15 	stw	r3,44(r2)
    dev->callback_context = context;
2009cda4:	e0bffc17 	ldw	r2,-16(fp)
2009cda8:	e0ffff17 	ldw	r3,-4(fp)
2009cdac:	10c00c15 	stw	r3,48(r2)
    dev->control          = control;
2009cdb0:	e0bffc17 	ldw	r2,-16(fp)
2009cdb4:	e0fffe17 	ldw	r3,-8(fp)
2009cdb8:	10c00d15 	stw	r3,52(r2)

    return ;
2009cdbc:	0001883a 	nop
}
2009cdc0:	e037883a 	mov	sp,fp
2009cdc4:	df000017 	ldw	fp,0(sp)
2009cdc8:	dec00104 	addi	sp,sp,4
2009cdcc:	f800283a 	ret

2009cdd0 <alt_msgdma_standard_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_standard_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
2009cdd0:	defffc04 	addi	sp,sp,-16
2009cdd4:	dfc00315 	stw	ra,12(sp)
2009cdd8:	df000215 	stw	fp,8(sp)
2009cddc:	df000204 	addi	fp,sp,8
2009cde0:	e13ffe15 	stw	r4,-8(fp)
2009cde4:	e17fff15 	stw	r5,-4(fp)
   /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
    return alt_msgdma_descriptor_async_transfer(dev, desc, NULL);
2009cde8:	e13ffe17 	ldw	r4,-8(fp)
2009cdec:	e17fff17 	ldw	r5,-4(fp)
2009cdf0:	000d883a 	mov	r6,zero
2009cdf4:	009b5a40 	call	2009b5a4 <alt_msgdma_descriptor_async_transfer>

}
2009cdf8:	e037883a 	mov	sp,fp
2009cdfc:	dfc00117 	ldw	ra,4(sp)
2009ce00:	df000017 	ldw	fp,0(sp)
2009ce04:	dec00204 	addi	sp,sp,8
2009ce08:	f800283a 	ret

2009ce0c <alt_msgdma_extended_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_extended_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
2009ce0c:	defffc04 	addi	sp,sp,-16
2009ce10:	dfc00315 	stw	ra,12(sp)
2009ce14:	df000215 	stw	fp,8(sp)
2009ce18:	df000204 	addi	fp,sp,8
2009ce1c:	e13ffe15 	stw	r4,-8(fp)
2009ce20:	e17fff15 	stw	r5,-4(fp)
    /*
    * Error detection/handling should be performed at the application
    * or callback level as appropriate.
    */
    return alt_msgdma_descriptor_async_transfer(dev, NULL, desc);
2009ce24:	e13ffe17 	ldw	r4,-8(fp)
2009ce28:	000b883a 	mov	r5,zero
2009ce2c:	e1bfff17 	ldw	r6,-4(fp)
2009ce30:	009b5a40 	call	2009b5a4 <alt_msgdma_descriptor_async_transfer>
}
2009ce34:	e037883a 	mov	sp,fp
2009ce38:	dfc00117 	ldw	ra,4(sp)
2009ce3c:	df000017 	ldw	fp,0(sp)
2009ce40:	dec00204 	addi	sp,sp,8
2009ce44:	f800283a 	ret

2009ce48 <alt_msgdma_standard_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_standard_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
2009ce48:	defffc04 	addi	sp,sp,-16
2009ce4c:	dfc00315 	stw	ra,12(sp)
2009ce50:	df000215 	stw	fp,8(sp)
2009ce54:	df000204 	addi	fp,sp,8
2009ce58:	e13ffe15 	stw	r4,-8(fp)
2009ce5c:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, desc, NULL);
2009ce60:	e13ffe17 	ldw	r4,-8(fp)
2009ce64:	e17fff17 	ldw	r5,-4(fp)
2009ce68:	000d883a 	mov	r6,zero
2009ce6c:	009b8740 	call	2009b874 <alt_msgdma_descriptor_sync_transfer>
}
2009ce70:	e037883a 	mov	sp,fp
2009ce74:	dfc00117 	ldw	ra,4(sp)
2009ce78:	df000017 	ldw	fp,0(sp)
2009ce7c:	dec00204 	addi	sp,sp,8
2009ce80:	f800283a 	ret

2009ce84 <alt_msgdma_extended_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_extended_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
2009ce84:	defffc04 	addi	sp,sp,-16
2009ce88:	dfc00315 	stw	ra,12(sp)
2009ce8c:	df000215 	stw	fp,8(sp)
2009ce90:	df000204 	addi	fp,sp,8
2009ce94:	e13ffe15 	stw	r4,-8(fp)
2009ce98:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, NULL, desc);
2009ce9c:	e13ffe17 	ldw	r4,-8(fp)
2009cea0:	000b883a 	mov	r5,zero
2009cea4:	e1bfff17 	ldw	r6,-4(fp)
2009cea8:	009b8740 	call	2009b874 <alt_msgdma_descriptor_sync_transfer>
}
2009ceac:	e037883a 	mov	sp,fp
2009ceb0:	dfc00117 	ldw	ra,4(sp)
2009ceb4:	df000017 	ldw	fp,0(sp)
2009ceb8:	dec00204 	addi	sp,sp,8
2009cebc:	f800283a 	ret

2009cec0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
2009cec0:	defff504 	addi	sp,sp,-44
2009cec4:	df000a15 	stw	fp,40(sp)
2009cec8:	df000a04 	addi	fp,sp,40
2009cecc:	e13ffc15 	stw	r4,-16(fp)
2009ced0:	e17ffd15 	stw	r5,-12(fp)
2009ced4:	e1bffe15 	stw	r6,-8(fp)
2009ced8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
2009cedc:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
2009cee0:	00800034 	movhi	r2,0
2009cee4:	108aba04 	addi	r2,r2,10984
2009cee8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
2009ceec:	10003f26 	beq	r2,zero,2009cfec <alt_alarm_start+0x12c>
  {
    if (alarm)
2009cef0:	e0bffc17 	ldw	r2,-16(fp)
2009cef4:	10003b26 	beq	r2,zero,2009cfe4 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
2009cef8:	e0bffc17 	ldw	r2,-16(fp)
2009cefc:	e0fffe17 	ldw	r3,-8(fp)
2009cf00:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
2009cf04:	e0bffc17 	ldw	r2,-16(fp)
2009cf08:	e0ffff17 	ldw	r3,-4(fp)
2009cf0c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2009cf10:	0005303a 	rdctl	r2,status
2009cf14:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2009cf18:	e0fff817 	ldw	r3,-32(fp)
2009cf1c:	00bfff84 	movi	r2,-2
2009cf20:	1884703a 	and	r2,r3,r2
2009cf24:	1001703a 	wrctl	status,r2
  
  return context;
2009cf28:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
2009cf2c:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
2009cf30:	00800034 	movhi	r2,0
2009cf34:	108abb04 	addi	r2,r2,10988
2009cf38:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
2009cf3c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
2009cf40:	e0fffd17 	ldw	r3,-12(fp)
2009cf44:	e0bff617 	ldw	r2,-40(fp)
2009cf48:	1885883a 	add	r2,r3,r2
2009cf4c:	10c00044 	addi	r3,r2,1
2009cf50:	e0bffc17 	ldw	r2,-16(fp)
2009cf54:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
2009cf58:	e0bffc17 	ldw	r2,-16(fp)
2009cf5c:	10c00217 	ldw	r3,8(r2)
2009cf60:	e0bff617 	ldw	r2,-40(fp)
2009cf64:	1880042e 	bgeu	r3,r2,2009cf78 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
2009cf68:	e0bffc17 	ldw	r2,-16(fp)
2009cf6c:	00c00044 	movi	r3,1
2009cf70:	10c00405 	stb	r3,16(r2)
2009cf74:	00000206 	br	2009cf80 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
2009cf78:	e0bffc17 	ldw	r2,-16(fp)
2009cf7c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
2009cf80:	e0fffc17 	ldw	r3,-16(fp)
2009cf84:	00800034 	movhi	r2,0
2009cf88:	108a9f04 	addi	r2,r2,10876
2009cf8c:	e0bff915 	stw	r2,-28(fp)
2009cf90:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
2009cf94:	e0bffa17 	ldw	r2,-24(fp)
2009cf98:	e0fff917 	ldw	r3,-28(fp)
2009cf9c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
2009cfa0:	e0bff917 	ldw	r2,-28(fp)
2009cfa4:	10c00017 	ldw	r3,0(r2)
2009cfa8:	e0bffa17 	ldw	r2,-24(fp)
2009cfac:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
2009cfb0:	e0bff917 	ldw	r2,-28(fp)
2009cfb4:	10800017 	ldw	r2,0(r2)
2009cfb8:	e0fffa17 	ldw	r3,-24(fp)
2009cfbc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
2009cfc0:	e0bff917 	ldw	r2,-28(fp)
2009cfc4:	e0fffa17 	ldw	r3,-24(fp)
2009cfc8:	10c00015 	stw	r3,0(r2)
2009cfcc:	e0bff717 	ldw	r2,-36(fp)
2009cfd0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2009cfd4:	e0bffb17 	ldw	r2,-20(fp)
2009cfd8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
2009cfdc:	0005883a 	mov	r2,zero
2009cfe0:	00000306 	br	2009cff0 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
2009cfe4:	00bffa84 	movi	r2,-22
2009cfe8:	00000106 	br	2009cff0 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
2009cfec:	00bfde84 	movi	r2,-134
  }
}
2009cff0:	e037883a 	mov	sp,fp
2009cff4:	df000017 	ldw	fp,0(sp)
2009cff8:	dec00104 	addi	sp,sp,4
2009cffc:	f800283a 	ret

2009d000 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
2009d000:	defffa04 	addi	sp,sp,-24
2009d004:	dfc00515 	stw	ra,20(sp)
2009d008:	df000415 	stw	fp,16(sp)
2009d00c:	df000404 	addi	fp,sp,16
2009d010:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
2009d014:	008000c4 	movi	r2,3
2009d018:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
2009d01c:	e0fffd17 	ldw	r3,-12(fp)
2009d020:	008003f4 	movhi	r2,15
2009d024:	10909004 	addi	r2,r2,16960
2009d028:	1885383a 	mul	r2,r3,r2
2009d02c:	0101dcf4 	movhi	r4,1907
2009d030:	21165004 	addi	r4,r4,22848
2009d034:	100b883a 	mov	r5,r2
2009d038:	0088a740 	call	20088a74 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
2009d03c:	01200034 	movhi	r4,32768
2009d040:	213fffc4 	addi	r4,r4,-1
2009d044:	100b883a 	mov	r5,r2
2009d048:	0088a740 	call	20088a74 <__udivsi3>
2009d04c:	e13fff17 	ldw	r4,-4(fp)
2009d050:	100b883a 	mov	r5,r2
2009d054:	0088a740 	call	20088a74 <__udivsi3>
2009d058:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
2009d05c:	e0bffe17 	ldw	r2,-8(fp)
2009d060:	10002a26 	beq	r2,zero,2009d10c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
2009d064:	e03ffc15 	stw	zero,-16(fp)
2009d068:	00001706 	br	2009d0c8 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
2009d06c:	00a00034 	movhi	r2,32768
2009d070:	10bfffc4 	addi	r2,r2,-1
2009d074:	10bfffc4 	addi	r2,r2,-1
2009d078:	103ffe1e 	bne	r2,zero,2009d074 <__flash_rwdata_start+0xffffe4a0>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
2009d07c:	e0fffd17 	ldw	r3,-12(fp)
2009d080:	008003f4 	movhi	r2,15
2009d084:	10909004 	addi	r2,r2,16960
2009d088:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
2009d08c:	0101dcf4 	movhi	r4,1907
2009d090:	21165004 	addi	r4,r4,22848
2009d094:	100b883a 	mov	r5,r2
2009d098:	0088a740 	call	20088a74 <__udivsi3>
2009d09c:	01200034 	movhi	r4,32768
2009d0a0:	213fffc4 	addi	r4,r4,-1
2009d0a4:	100b883a 	mov	r5,r2
2009d0a8:	0088a740 	call	20088a74 <__udivsi3>
2009d0ac:	1007883a 	mov	r3,r2
2009d0b0:	e0bfff17 	ldw	r2,-4(fp)
2009d0b4:	10c5c83a 	sub	r2,r2,r3
2009d0b8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
2009d0bc:	e0bffc17 	ldw	r2,-16(fp)
2009d0c0:	10800044 	addi	r2,r2,1
2009d0c4:	e0bffc15 	stw	r2,-16(fp)
2009d0c8:	e0fffc17 	ldw	r3,-16(fp)
2009d0cc:	e0bffe17 	ldw	r2,-8(fp)
2009d0d0:	18bfe616 	blt	r3,r2,2009d06c <__flash_rwdata_start+0xffffe498>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
2009d0d4:	e0fffd17 	ldw	r3,-12(fp)
2009d0d8:	008003f4 	movhi	r2,15
2009d0dc:	10909004 	addi	r2,r2,16960
2009d0e0:	1885383a 	mul	r2,r3,r2
2009d0e4:	0101dcf4 	movhi	r4,1907
2009d0e8:	21165004 	addi	r4,r4,22848
2009d0ec:	100b883a 	mov	r5,r2
2009d0f0:	0088a740 	call	20088a74 <__udivsi3>
2009d0f4:	1007883a 	mov	r3,r2
2009d0f8:	e0bfff17 	ldw	r2,-4(fp)
2009d0fc:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
2009d100:	10bfffc4 	addi	r2,r2,-1
2009d104:	103ffe1e 	bne	r2,zero,2009d100 <__flash_rwdata_start+0xffffe52c>
2009d108:	00000d06 	br	2009d140 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
2009d10c:	e0fffd17 	ldw	r3,-12(fp)
2009d110:	008003f4 	movhi	r2,15
2009d114:	10909004 	addi	r2,r2,16960
2009d118:	1885383a 	mul	r2,r3,r2
2009d11c:	0101dcf4 	movhi	r4,1907
2009d120:	21165004 	addi	r4,r4,22848
2009d124:	100b883a 	mov	r5,r2
2009d128:	0088a740 	call	20088a74 <__udivsi3>
2009d12c:	1007883a 	mov	r3,r2
2009d130:	e0bfff17 	ldw	r2,-4(fp)
2009d134:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
2009d138:	10bfffc4 	addi	r2,r2,-1
2009d13c:	00bffe16 	blt	zero,r2,2009d138 <__flash_rwdata_start+0xffffe564>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
2009d140:	0005883a 	mov	r2,zero
}
2009d144:	e037883a 	mov	sp,fp
2009d148:	dfc00117 	ldw	ra,4(sp)
2009d14c:	df000017 	ldw	fp,0(sp)
2009d150:	dec00204 	addi	sp,sp,8
2009d154:	f800283a 	ret

2009d158 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2009d158:	defffe04 	addi	sp,sp,-8
2009d15c:	dfc00115 	stw	ra,4(sp)
2009d160:	df000015 	stw	fp,0(sp)
2009d164:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2009d168:	00800034 	movhi	r2,0
2009d16c:	108a9c04 	addi	r2,r2,10864
2009d170:	10800017 	ldw	r2,0(r2)
2009d174:	10000526 	beq	r2,zero,2009d18c <alt_get_errno+0x34>
2009d178:	00800034 	movhi	r2,0
2009d17c:	108a9c04 	addi	r2,r2,10864
2009d180:	10800017 	ldw	r2,0(r2)
2009d184:	103ee83a 	callr	r2
2009d188:	00000206 	br	2009d194 <alt_get_errno+0x3c>
2009d18c:	00800034 	movhi	r2,0
2009d190:	108ab204 	addi	r2,r2,10952
}
2009d194:	e037883a 	mov	sp,fp
2009d198:	dfc00117 	ldw	ra,4(sp)
2009d19c:	df000017 	ldw	fp,0(sp)
2009d1a0:	dec00204 	addi	sp,sp,8
2009d1a4:	f800283a 	ret

2009d1a8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
2009d1a8:	defffa04 	addi	sp,sp,-24
2009d1ac:	dfc00515 	stw	ra,20(sp)
2009d1b0:	df000415 	stw	fp,16(sp)
2009d1b4:	df000404 	addi	fp,sp,16
2009d1b8:	e13ffe15 	stw	r4,-8(fp)
2009d1bc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
2009d1c0:	e0bffe17 	ldw	r2,-8(fp)
2009d1c4:	10000326 	beq	r2,zero,2009d1d4 <alt_dev_llist_insert+0x2c>
2009d1c8:	e0bffe17 	ldw	r2,-8(fp)
2009d1cc:	10800217 	ldw	r2,8(r2)
2009d1d0:	1000061e 	bne	r2,zero,2009d1ec <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
2009d1d4:	009d1580 	call	2009d158 <alt_get_errno>
2009d1d8:	1007883a 	mov	r3,r2
2009d1dc:	00800584 	movi	r2,22
2009d1e0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
2009d1e4:	00bffa84 	movi	r2,-22
2009d1e8:	00001306 	br	2009d238 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
2009d1ec:	e0bffe17 	ldw	r2,-8(fp)
2009d1f0:	e0ffff17 	ldw	r3,-4(fp)
2009d1f4:	e0fffc15 	stw	r3,-16(fp)
2009d1f8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
2009d1fc:	e0bffd17 	ldw	r2,-12(fp)
2009d200:	e0fffc17 	ldw	r3,-16(fp)
2009d204:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
2009d208:	e0bffc17 	ldw	r2,-16(fp)
2009d20c:	10c00017 	ldw	r3,0(r2)
2009d210:	e0bffd17 	ldw	r2,-12(fp)
2009d214:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
2009d218:	e0bffc17 	ldw	r2,-16(fp)
2009d21c:	10800017 	ldw	r2,0(r2)
2009d220:	e0fffd17 	ldw	r3,-12(fp)
2009d224:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
2009d228:	e0bffc17 	ldw	r2,-16(fp)
2009d22c:	e0fffd17 	ldw	r3,-12(fp)
2009d230:	10c00015 	stw	r3,0(r2)

  return 0;  
2009d234:	0005883a 	mov	r2,zero
}
2009d238:	e037883a 	mov	sp,fp
2009d23c:	dfc00117 	ldw	ra,4(sp)
2009d240:	df000017 	ldw	fp,0(sp)
2009d244:	dec00204 	addi	sp,sp,8
2009d248:	f800283a 	ret

2009d24c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
2009d24c:	defffd04 	addi	sp,sp,-12
2009d250:	dfc00215 	stw	ra,8(sp)
2009d254:	df000115 	stw	fp,4(sp)
2009d258:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
2009d25c:	008802b4 	movhi	r2,8202
2009d260:	10b83804 	addi	r2,r2,-7968
2009d264:	e0bfff15 	stw	r2,-4(fp)
2009d268:	00000606 	br	2009d284 <_do_ctors+0x38>
        (*ctor) (); 
2009d26c:	e0bfff17 	ldw	r2,-4(fp)
2009d270:	10800017 	ldw	r2,0(r2)
2009d274:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
2009d278:	e0bfff17 	ldw	r2,-4(fp)
2009d27c:	10bfff04 	addi	r2,r2,-4
2009d280:	e0bfff15 	stw	r2,-4(fp)
2009d284:	e0ffff17 	ldw	r3,-4(fp)
2009d288:	008802b4 	movhi	r2,8202
2009d28c:	10b83904 	addi	r2,r2,-7964
2009d290:	18bff62e 	bgeu	r3,r2,2009d26c <__flash_rwdata_start+0xffffe698>
        (*ctor) (); 
}
2009d294:	e037883a 	mov	sp,fp
2009d298:	dfc00117 	ldw	ra,4(sp)
2009d29c:	df000017 	ldw	fp,0(sp)
2009d2a0:	dec00204 	addi	sp,sp,8
2009d2a4:	f800283a 	ret

2009d2a8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
2009d2a8:	defffd04 	addi	sp,sp,-12
2009d2ac:	dfc00215 	stw	ra,8(sp)
2009d2b0:	df000115 	stw	fp,4(sp)
2009d2b4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
2009d2b8:	008802b4 	movhi	r2,8202
2009d2bc:	10b83804 	addi	r2,r2,-7968
2009d2c0:	e0bfff15 	stw	r2,-4(fp)
2009d2c4:	00000606 	br	2009d2e0 <_do_dtors+0x38>
        (*dtor) (); 
2009d2c8:	e0bfff17 	ldw	r2,-4(fp)
2009d2cc:	10800017 	ldw	r2,0(r2)
2009d2d0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
2009d2d4:	e0bfff17 	ldw	r2,-4(fp)
2009d2d8:	10bfff04 	addi	r2,r2,-4
2009d2dc:	e0bfff15 	stw	r2,-4(fp)
2009d2e0:	e0ffff17 	ldw	r3,-4(fp)
2009d2e4:	008802b4 	movhi	r2,8202
2009d2e8:	10b83904 	addi	r2,r2,-7964
2009d2ec:	18bff62e 	bgeu	r3,r2,2009d2c8 <__flash_rwdata_start+0xffffe6f4>
        (*dtor) (); 
}
2009d2f0:	e037883a 	mov	sp,fp
2009d2f4:	dfc00117 	ldw	ra,4(sp)
2009d2f8:	df000017 	ldw	fp,0(sp)
2009d2fc:	dec00204 	addi	sp,sp,8
2009d300:	f800283a 	ret

2009d304 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
2009d304:	defffa04 	addi	sp,sp,-24
2009d308:	dfc00515 	stw	ra,20(sp)
2009d30c:	df000415 	stw	fp,16(sp)
2009d310:	df000404 	addi	fp,sp,16
2009d314:	e13ffe15 	stw	r4,-8(fp)
2009d318:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
2009d31c:	e0bfff17 	ldw	r2,-4(fp)
2009d320:	10800017 	ldw	r2,0(r2)
2009d324:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
2009d328:	e13ffe17 	ldw	r4,-8(fp)
2009d32c:	008c2f80 	call	2008c2f8 <strlen>
2009d330:	10800044 	addi	r2,r2,1
2009d334:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
2009d338:	00000d06 	br	2009d370 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
2009d33c:	e0bffc17 	ldw	r2,-16(fp)
2009d340:	10c00217 	ldw	r3,8(r2)
2009d344:	e0bffd17 	ldw	r2,-12(fp)
2009d348:	1809883a 	mov	r4,r3
2009d34c:	e17ffe17 	ldw	r5,-8(fp)
2009d350:	100d883a 	mov	r6,r2
2009d354:	008bd200 	call	2008bd20 <memcmp>
2009d358:	1000021e 	bne	r2,zero,2009d364 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
2009d35c:	e0bffc17 	ldw	r2,-16(fp)
2009d360:	00000706 	br	2009d380 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
2009d364:	e0bffc17 	ldw	r2,-16(fp)
2009d368:	10800017 	ldw	r2,0(r2)
2009d36c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
2009d370:	e0fffc17 	ldw	r3,-16(fp)
2009d374:	e0bfff17 	ldw	r2,-4(fp)
2009d378:	18bff01e 	bne	r3,r2,2009d33c <__flash_rwdata_start+0xffffe768>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
2009d37c:	0005883a 	mov	r2,zero
}
2009d380:	e037883a 	mov	sp,fp
2009d384:	dfc00117 	ldw	ra,4(sp)
2009d388:	df000017 	ldw	fp,0(sp)
2009d38c:	dec00204 	addi	sp,sp,8
2009d390:	f800283a 	ret

2009d394 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
2009d394:	defffe04 	addi	sp,sp,-8
2009d398:	dfc00115 	stw	ra,4(sp)
2009d39c:	df000015 	stw	fp,0(sp)
2009d3a0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
2009d3a4:	0009883a 	mov	r4,zero
2009d3a8:	01440004 	movi	r5,4096
2009d3ac:	009de940 	call	2009de94 <alt_icache_flush>
#endif
}
2009d3b0:	e037883a 	mov	sp,fp
2009d3b4:	dfc00117 	ldw	ra,4(sp)
2009d3b8:	df000017 	ldw	fp,0(sp)
2009d3bc:	dec00204 	addi	sp,sp,8
2009d3c0:	f800283a 	ret

2009d3c4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
2009d3c4:	defff904 	addi	sp,sp,-28
2009d3c8:	dfc00615 	stw	ra,24(sp)
2009d3cc:	df000515 	stw	fp,20(sp)
2009d3d0:	df000504 	addi	fp,sp,20
2009d3d4:	e13ffc15 	stw	r4,-16(fp)
2009d3d8:	e17ffd15 	stw	r5,-12(fp)
2009d3dc:	e1bffe15 	stw	r6,-8(fp)
2009d3e0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
2009d3e4:	e0800217 	ldw	r2,8(fp)
2009d3e8:	d8800015 	stw	r2,0(sp)
2009d3ec:	e13ffc17 	ldw	r4,-16(fp)
2009d3f0:	e17ffd17 	ldw	r5,-12(fp)
2009d3f4:	e1bffe17 	ldw	r6,-8(fp)
2009d3f8:	e1ffff17 	ldw	r7,-4(fp)
2009d3fc:	009d5a40 	call	2009d5a4 <alt_iic_isr_register>
}  
2009d400:	e037883a 	mov	sp,fp
2009d404:	dfc00117 	ldw	ra,4(sp)
2009d408:	df000017 	ldw	fp,0(sp)
2009d40c:	dec00204 	addi	sp,sp,8
2009d410:	f800283a 	ret

2009d414 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
2009d414:	defff904 	addi	sp,sp,-28
2009d418:	df000615 	stw	fp,24(sp)
2009d41c:	df000604 	addi	fp,sp,24
2009d420:	e13ffe15 	stw	r4,-8(fp)
2009d424:	e17fff15 	stw	r5,-4(fp)
2009d428:	e0bfff17 	ldw	r2,-4(fp)
2009d42c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2009d430:	0005303a 	rdctl	r2,status
2009d434:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2009d438:	e0fffb17 	ldw	r3,-20(fp)
2009d43c:	00bfff84 	movi	r2,-2
2009d440:	1884703a 	and	r2,r3,r2
2009d444:	1001703a 	wrctl	status,r2
  
  return context;
2009d448:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
2009d44c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
2009d450:	e0bffa17 	ldw	r2,-24(fp)
2009d454:	00c00044 	movi	r3,1
2009d458:	1884983a 	sll	r2,r3,r2
2009d45c:	1007883a 	mov	r3,r2
2009d460:	00800034 	movhi	r2,0
2009d464:	108ab604 	addi	r2,r2,10968
2009d468:	10800017 	ldw	r2,0(r2)
2009d46c:	1886b03a 	or	r3,r3,r2
2009d470:	00800034 	movhi	r2,0
2009d474:	108ab604 	addi	r2,r2,10968
2009d478:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
2009d47c:	00800034 	movhi	r2,0
2009d480:	108ab604 	addi	r2,r2,10968
2009d484:	10800017 	ldw	r2,0(r2)
2009d488:	100170fa 	wrctl	ienable,r2
2009d48c:	e0bffc17 	ldw	r2,-16(fp)
2009d490:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2009d494:	e0bffd17 	ldw	r2,-12(fp)
2009d498:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
2009d49c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
2009d4a0:	0001883a 	nop
}
2009d4a4:	e037883a 	mov	sp,fp
2009d4a8:	df000017 	ldw	fp,0(sp)
2009d4ac:	dec00104 	addi	sp,sp,4
2009d4b0:	f800283a 	ret

2009d4b4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
2009d4b4:	defff904 	addi	sp,sp,-28
2009d4b8:	df000615 	stw	fp,24(sp)
2009d4bc:	df000604 	addi	fp,sp,24
2009d4c0:	e13ffe15 	stw	r4,-8(fp)
2009d4c4:	e17fff15 	stw	r5,-4(fp)
2009d4c8:	e0bfff17 	ldw	r2,-4(fp)
2009d4cc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2009d4d0:	0005303a 	rdctl	r2,status
2009d4d4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2009d4d8:	e0fffb17 	ldw	r3,-20(fp)
2009d4dc:	00bfff84 	movi	r2,-2
2009d4e0:	1884703a 	and	r2,r3,r2
2009d4e4:	1001703a 	wrctl	status,r2
  
  return context;
2009d4e8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
2009d4ec:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
2009d4f0:	e0bffa17 	ldw	r2,-24(fp)
2009d4f4:	00c00044 	movi	r3,1
2009d4f8:	1884983a 	sll	r2,r3,r2
2009d4fc:	0084303a 	nor	r2,zero,r2
2009d500:	1007883a 	mov	r3,r2
2009d504:	00800034 	movhi	r2,0
2009d508:	108ab604 	addi	r2,r2,10968
2009d50c:	10800017 	ldw	r2,0(r2)
2009d510:	1886703a 	and	r3,r3,r2
2009d514:	00800034 	movhi	r2,0
2009d518:	108ab604 	addi	r2,r2,10968
2009d51c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
2009d520:	00800034 	movhi	r2,0
2009d524:	108ab604 	addi	r2,r2,10968
2009d528:	10800017 	ldw	r2,0(r2)
2009d52c:	100170fa 	wrctl	ienable,r2
2009d530:	e0bffc17 	ldw	r2,-16(fp)
2009d534:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2009d538:	e0bffd17 	ldw	r2,-12(fp)
2009d53c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
2009d540:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
2009d544:	0001883a 	nop
}
2009d548:	e037883a 	mov	sp,fp
2009d54c:	df000017 	ldw	fp,0(sp)
2009d550:	dec00104 	addi	sp,sp,4
2009d554:	f800283a 	ret

2009d558 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
2009d558:	defffc04 	addi	sp,sp,-16
2009d55c:	df000315 	stw	fp,12(sp)
2009d560:	df000304 	addi	fp,sp,12
2009d564:	e13ffe15 	stw	r4,-8(fp)
2009d568:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
2009d56c:	000530fa 	rdctl	r2,ienable
2009d570:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
2009d574:	e0bfff17 	ldw	r2,-4(fp)
2009d578:	00c00044 	movi	r3,1
2009d57c:	1884983a 	sll	r2,r3,r2
2009d580:	1007883a 	mov	r3,r2
2009d584:	e0bffd17 	ldw	r2,-12(fp)
2009d588:	1884703a 	and	r2,r3,r2
2009d58c:	1004c03a 	cmpne	r2,r2,zero
2009d590:	10803fcc 	andi	r2,r2,255
}
2009d594:	e037883a 	mov	sp,fp
2009d598:	df000017 	ldw	fp,0(sp)
2009d59c:	dec00104 	addi	sp,sp,4
2009d5a0:	f800283a 	ret

2009d5a4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
2009d5a4:	defff504 	addi	sp,sp,-44
2009d5a8:	dfc00a15 	stw	ra,40(sp)
2009d5ac:	df000915 	stw	fp,36(sp)
2009d5b0:	df000904 	addi	fp,sp,36
2009d5b4:	e13ffc15 	stw	r4,-16(fp)
2009d5b8:	e17ffd15 	stw	r5,-12(fp)
2009d5bc:	e1bffe15 	stw	r6,-8(fp)
2009d5c0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
2009d5c4:	00bffa84 	movi	r2,-22
2009d5c8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
2009d5cc:	e0bffd17 	ldw	r2,-12(fp)
2009d5d0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
2009d5d4:	e0bff817 	ldw	r2,-32(fp)
2009d5d8:	10800808 	cmpgei	r2,r2,32
2009d5dc:	1000271e 	bne	r2,zero,2009d67c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2009d5e0:	0005303a 	rdctl	r2,status
2009d5e4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2009d5e8:	e0fffa17 	ldw	r3,-24(fp)
2009d5ec:	00bfff84 	movi	r2,-2
2009d5f0:	1884703a 	and	r2,r3,r2
2009d5f4:	1001703a 	wrctl	status,r2
  
  return context;
2009d5f8:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
2009d5fc:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
2009d600:	00800034 	movhi	r2,0
2009d604:	108cb904 	addi	r2,r2,13028
2009d608:	e0fff817 	ldw	r3,-32(fp)
2009d60c:	180690fa 	slli	r3,r3,3
2009d610:	10c5883a 	add	r2,r2,r3
2009d614:	e0fffe17 	ldw	r3,-8(fp)
2009d618:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
2009d61c:	00800034 	movhi	r2,0
2009d620:	108cb904 	addi	r2,r2,13028
2009d624:	e0fff817 	ldw	r3,-32(fp)
2009d628:	180690fa 	slli	r3,r3,3
2009d62c:	18c00104 	addi	r3,r3,4
2009d630:	10c5883a 	add	r2,r2,r3
2009d634:	e0ffff17 	ldw	r3,-4(fp)
2009d638:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
2009d63c:	e0bffe17 	ldw	r2,-8(fp)
2009d640:	10000526 	beq	r2,zero,2009d658 <alt_iic_isr_register+0xb4>
2009d644:	e0bff817 	ldw	r2,-32(fp)
2009d648:	e13ffc17 	ldw	r4,-16(fp)
2009d64c:	100b883a 	mov	r5,r2
2009d650:	009d4140 	call	2009d414 <alt_ic_irq_enable>
2009d654:	00000406 	br	2009d668 <alt_iic_isr_register+0xc4>
2009d658:	e0bff817 	ldw	r2,-32(fp)
2009d65c:	e13ffc17 	ldw	r4,-16(fp)
2009d660:	100b883a 	mov	r5,r2
2009d664:	009d4b40 	call	2009d4b4 <alt_ic_irq_disable>
2009d668:	e0bff715 	stw	r2,-36(fp)
2009d66c:	e0bff917 	ldw	r2,-28(fp)
2009d670:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2009d674:	e0bffb17 	ldw	r2,-20(fp)
2009d678:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
2009d67c:	e0bff717 	ldw	r2,-36(fp)
}
2009d680:	e037883a 	mov	sp,fp
2009d684:	dfc00117 	ldw	ra,4(sp)
2009d688:	df000017 	ldw	fp,0(sp)
2009d68c:	dec00204 	addi	sp,sp,8
2009d690:	f800283a 	ret

2009d694 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
2009d694:	defff904 	addi	sp,sp,-28
2009d698:	dfc00615 	stw	ra,24(sp)
2009d69c:	df000515 	stw	fp,20(sp)
2009d6a0:	df000504 	addi	fp,sp,20
2009d6a4:	e13ffc15 	stw	r4,-16(fp)
2009d6a8:	e17ffd15 	stw	r5,-12(fp)
2009d6ac:	e1bffe15 	stw	r6,-8(fp)
2009d6b0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
2009d6b4:	e13ffd17 	ldw	r4,-12(fp)
2009d6b8:	e17ffe17 	ldw	r5,-8(fp)
2009d6bc:	e1bfff17 	ldw	r6,-4(fp)
2009d6c0:	009d8e80 	call	2009d8e8 <open>
2009d6c4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
2009d6c8:	e0bffb17 	ldw	r2,-20(fp)
2009d6cc:	10001c16 	blt	r2,zero,2009d740 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
2009d6d0:	00800034 	movhi	r2,0
2009d6d4:	10856f04 	addi	r2,r2,5564
2009d6d8:	e0fffb17 	ldw	r3,-20(fp)
2009d6dc:	18c00324 	muli	r3,r3,12
2009d6e0:	10c5883a 	add	r2,r2,r3
2009d6e4:	10c00017 	ldw	r3,0(r2)
2009d6e8:	e0bffc17 	ldw	r2,-16(fp)
2009d6ec:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
2009d6f0:	00800034 	movhi	r2,0
2009d6f4:	10856f04 	addi	r2,r2,5564
2009d6f8:	e0fffb17 	ldw	r3,-20(fp)
2009d6fc:	18c00324 	muli	r3,r3,12
2009d700:	18c00104 	addi	r3,r3,4
2009d704:	10c5883a 	add	r2,r2,r3
2009d708:	10c00017 	ldw	r3,0(r2)
2009d70c:	e0bffc17 	ldw	r2,-16(fp)
2009d710:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
2009d714:	00800034 	movhi	r2,0
2009d718:	10856f04 	addi	r2,r2,5564
2009d71c:	e0fffb17 	ldw	r3,-20(fp)
2009d720:	18c00324 	muli	r3,r3,12
2009d724:	18c00204 	addi	r3,r3,8
2009d728:	10c5883a 	add	r2,r2,r3
2009d72c:	10c00017 	ldw	r3,0(r2)
2009d730:	e0bffc17 	ldw	r2,-16(fp)
2009d734:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
2009d738:	e13ffb17 	ldw	r4,-20(fp)
2009d73c:	0099e4c0 	call	20099e4c <alt_release_fd>
  }
} 
2009d740:	e037883a 	mov	sp,fp
2009d744:	dfc00117 	ldw	ra,4(sp)
2009d748:	df000017 	ldw	fp,0(sp)
2009d74c:	dec00204 	addi	sp,sp,8
2009d750:	f800283a 	ret

2009d754 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
2009d754:	defffb04 	addi	sp,sp,-20
2009d758:	dfc00415 	stw	ra,16(sp)
2009d75c:	df000315 	stw	fp,12(sp)
2009d760:	df000304 	addi	fp,sp,12
2009d764:	e13ffd15 	stw	r4,-12(fp)
2009d768:	e17ffe15 	stw	r5,-8(fp)
2009d76c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
2009d770:	01000034 	movhi	r4,0
2009d774:	21057204 	addi	r4,r4,5576
2009d778:	e17ffd17 	ldw	r5,-12(fp)
2009d77c:	01800044 	movi	r6,1
2009d780:	01c07fc4 	movi	r7,511
2009d784:	009d6940 	call	2009d694 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
2009d788:	01000034 	movhi	r4,0
2009d78c:	21056f04 	addi	r4,r4,5564
2009d790:	e17ffe17 	ldw	r5,-8(fp)
2009d794:	000d883a 	mov	r6,zero
2009d798:	01c07fc4 	movi	r7,511
2009d79c:	009d6940 	call	2009d694 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
2009d7a0:	01000034 	movhi	r4,0
2009d7a4:	21057504 	addi	r4,r4,5588
2009d7a8:	e17fff17 	ldw	r5,-4(fp)
2009d7ac:	01800044 	movi	r6,1
2009d7b0:	01c07fc4 	movi	r7,511
2009d7b4:	009d6940 	call	2009d694 <alt_open_fd>
}  
2009d7b8:	e037883a 	mov	sp,fp
2009d7bc:	dfc00117 	ldw	ra,4(sp)
2009d7c0:	df000017 	ldw	fp,0(sp)
2009d7c4:	dec00204 	addi	sp,sp,8
2009d7c8:	f800283a 	ret

2009d7cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2009d7cc:	defffe04 	addi	sp,sp,-8
2009d7d0:	dfc00115 	stw	ra,4(sp)
2009d7d4:	df000015 	stw	fp,0(sp)
2009d7d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2009d7dc:	00800034 	movhi	r2,0
2009d7e0:	108a9c04 	addi	r2,r2,10864
2009d7e4:	10800017 	ldw	r2,0(r2)
2009d7e8:	10000526 	beq	r2,zero,2009d800 <alt_get_errno+0x34>
2009d7ec:	00800034 	movhi	r2,0
2009d7f0:	108a9c04 	addi	r2,r2,10864
2009d7f4:	10800017 	ldw	r2,0(r2)
2009d7f8:	103ee83a 	callr	r2
2009d7fc:	00000206 	br	2009d808 <alt_get_errno+0x3c>
2009d800:	00800034 	movhi	r2,0
2009d804:	108ab204 	addi	r2,r2,10952
}
2009d808:	e037883a 	mov	sp,fp
2009d80c:	dfc00117 	ldw	ra,4(sp)
2009d810:	df000017 	ldw	fp,0(sp)
2009d814:	dec00204 	addi	sp,sp,8
2009d818:	f800283a 	ret

2009d81c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
2009d81c:	defffd04 	addi	sp,sp,-12
2009d820:	df000215 	stw	fp,8(sp)
2009d824:	df000204 	addi	fp,sp,8
2009d828:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
2009d82c:	e0bfff17 	ldw	r2,-4(fp)
2009d830:	10800217 	ldw	r2,8(r2)
2009d834:	10d00034 	orhi	r3,r2,16384
2009d838:	e0bfff17 	ldw	r2,-4(fp)
2009d83c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
2009d840:	e03ffe15 	stw	zero,-8(fp)
2009d844:	00001d06 	br	2009d8bc <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
2009d848:	00800034 	movhi	r2,0
2009d84c:	10856f04 	addi	r2,r2,5564
2009d850:	e0fffe17 	ldw	r3,-8(fp)
2009d854:	18c00324 	muli	r3,r3,12
2009d858:	10c5883a 	add	r2,r2,r3
2009d85c:	10c00017 	ldw	r3,0(r2)
2009d860:	e0bfff17 	ldw	r2,-4(fp)
2009d864:	10800017 	ldw	r2,0(r2)
2009d868:	1880111e 	bne	r3,r2,2009d8b0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
2009d86c:	00800034 	movhi	r2,0
2009d870:	10856f04 	addi	r2,r2,5564
2009d874:	e0fffe17 	ldw	r3,-8(fp)
2009d878:	18c00324 	muli	r3,r3,12
2009d87c:	18c00204 	addi	r3,r3,8
2009d880:	10c5883a 	add	r2,r2,r3
2009d884:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
2009d888:	1000090e 	bge	r2,zero,2009d8b0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
2009d88c:	e0bffe17 	ldw	r2,-8(fp)
2009d890:	10c00324 	muli	r3,r2,12
2009d894:	00800034 	movhi	r2,0
2009d898:	10856f04 	addi	r2,r2,5564
2009d89c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
2009d8a0:	e0bfff17 	ldw	r2,-4(fp)
2009d8a4:	18800226 	beq	r3,r2,2009d8b0 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
2009d8a8:	00bffcc4 	movi	r2,-13
2009d8ac:	00000a06 	br	2009d8d8 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
2009d8b0:	e0bffe17 	ldw	r2,-8(fp)
2009d8b4:	10800044 	addi	r2,r2,1
2009d8b8:	e0bffe15 	stw	r2,-8(fp)
2009d8bc:	00800034 	movhi	r2,0
2009d8c0:	108a9b04 	addi	r2,r2,10860
2009d8c4:	10800017 	ldw	r2,0(r2)
2009d8c8:	1007883a 	mov	r3,r2
2009d8cc:	e0bffe17 	ldw	r2,-8(fp)
2009d8d0:	18bfdd2e 	bgeu	r3,r2,2009d848 <__flash_rwdata_start+0xffffec74>
    }
  }
  
  /* The device is not locked */
 
  return 0;
2009d8d4:	0005883a 	mov	r2,zero
}
2009d8d8:	e037883a 	mov	sp,fp
2009d8dc:	df000017 	ldw	fp,0(sp)
2009d8e0:	dec00104 	addi	sp,sp,4
2009d8e4:	f800283a 	ret

2009d8e8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
2009d8e8:	defff604 	addi	sp,sp,-40
2009d8ec:	dfc00915 	stw	ra,36(sp)
2009d8f0:	df000815 	stw	fp,32(sp)
2009d8f4:	df000804 	addi	fp,sp,32
2009d8f8:	e13ffd15 	stw	r4,-12(fp)
2009d8fc:	e17ffe15 	stw	r5,-8(fp)
2009d900:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
2009d904:	00bfffc4 	movi	r2,-1
2009d908:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
2009d90c:	00bffb44 	movi	r2,-19
2009d910:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
2009d914:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
2009d918:	e13ffd17 	ldw	r4,-12(fp)
2009d91c:	01400034 	movhi	r5,0
2009d920:	294a9904 	addi	r5,r5,10852
2009d924:	009d3040 	call	2009d304 <alt_find_dev>
2009d928:	e0bff815 	stw	r2,-32(fp)
2009d92c:	e0bff817 	ldw	r2,-32(fp)
2009d930:	1000051e 	bne	r2,zero,2009d948 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
2009d934:	e13ffd17 	ldw	r4,-12(fp)
2009d938:	009dccc0 	call	2009dccc <alt_find_file>
2009d93c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
2009d940:	00800044 	movi	r2,1
2009d944:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
2009d948:	e0bff817 	ldw	r2,-32(fp)
2009d94c:	10002926 	beq	r2,zero,2009d9f4 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
2009d950:	e13ff817 	ldw	r4,-32(fp)
2009d954:	009dde00 	call	2009dde0 <alt_get_fd>
2009d958:	e0bff915 	stw	r2,-28(fp)
2009d95c:	e0bff917 	ldw	r2,-28(fp)
2009d960:	1000030e 	bge	r2,zero,2009d970 <open+0x88>
    {
      status = index;
2009d964:	e0bff917 	ldw	r2,-28(fp)
2009d968:	e0bffa15 	stw	r2,-24(fp)
2009d96c:	00002306 	br	2009d9fc <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
2009d970:	e0bff917 	ldw	r2,-28(fp)
2009d974:	10c00324 	muli	r3,r2,12
2009d978:	00800034 	movhi	r2,0
2009d97c:	10856f04 	addi	r2,r2,5564
2009d980:	1885883a 	add	r2,r3,r2
2009d984:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
2009d988:	e0fffe17 	ldw	r3,-8(fp)
2009d98c:	00900034 	movhi	r2,16384
2009d990:	10bfffc4 	addi	r2,r2,-1
2009d994:	1886703a 	and	r3,r3,r2
2009d998:	e0bffc17 	ldw	r2,-16(fp)
2009d99c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
2009d9a0:	e0bffb17 	ldw	r2,-20(fp)
2009d9a4:	1000051e 	bne	r2,zero,2009d9bc <open+0xd4>
2009d9a8:	e13ffc17 	ldw	r4,-16(fp)
2009d9ac:	009d81c0 	call	2009d81c <alt_file_locked>
2009d9b0:	e0bffa15 	stw	r2,-24(fp)
2009d9b4:	e0bffa17 	ldw	r2,-24(fp)
2009d9b8:	10001016 	blt	r2,zero,2009d9fc <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
2009d9bc:	e0bff817 	ldw	r2,-32(fp)
2009d9c0:	10800317 	ldw	r2,12(r2)
2009d9c4:	10000826 	beq	r2,zero,2009d9e8 <open+0x100>
2009d9c8:	e0bff817 	ldw	r2,-32(fp)
2009d9cc:	10800317 	ldw	r2,12(r2)
2009d9d0:	e13ffc17 	ldw	r4,-16(fp)
2009d9d4:	e17ffd17 	ldw	r5,-12(fp)
2009d9d8:	e1bffe17 	ldw	r6,-8(fp)
2009d9dc:	e1ffff17 	ldw	r7,-4(fp)
2009d9e0:	103ee83a 	callr	r2
2009d9e4:	00000106 	br	2009d9ec <open+0x104>
2009d9e8:	0005883a 	mov	r2,zero
2009d9ec:	e0bffa15 	stw	r2,-24(fp)
2009d9f0:	00000206 	br	2009d9fc <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
2009d9f4:	00bffb44 	movi	r2,-19
2009d9f8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
2009d9fc:	e0bffa17 	ldw	r2,-24(fp)
2009da00:	1000090e 	bge	r2,zero,2009da28 <open+0x140>
  {
    alt_release_fd (index);  
2009da04:	e13ff917 	ldw	r4,-28(fp)
2009da08:	0099e4c0 	call	20099e4c <alt_release_fd>
    ALT_ERRNO = -status;
2009da0c:	009d7cc0 	call	2009d7cc <alt_get_errno>
2009da10:	1007883a 	mov	r3,r2
2009da14:	e0bffa17 	ldw	r2,-24(fp)
2009da18:	0085c83a 	sub	r2,zero,r2
2009da1c:	18800015 	stw	r2,0(r3)
    return -1;
2009da20:	00bfffc4 	movi	r2,-1
2009da24:	00000106 	br	2009da2c <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
2009da28:	e0bff917 	ldw	r2,-28(fp)
}
2009da2c:	e037883a 	mov	sp,fp
2009da30:	dfc00117 	ldw	ra,4(sp)
2009da34:	df000017 	ldw	fp,0(sp)
2009da38:	dec00204 	addi	sp,sp,8
2009da3c:	f800283a 	ret

2009da40 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
2009da40:	defff204 	addi	sp,sp,-56
2009da44:	dfc00a15 	stw	ra,40(sp)
2009da48:	df000915 	stw	fp,36(sp)
2009da4c:	df000904 	addi	fp,sp,36
2009da50:	e1400215 	stw	r5,8(fp)
2009da54:	e1800315 	stw	r6,12(fp)
2009da58:	e1c00415 	stw	r7,16(fp)
2009da5c:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
2009da60:	e0800204 	addi	r2,fp,8
2009da64:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
2009da68:	e0bfff17 	ldw	r2,-4(fp)
2009da6c:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
2009da70:	00007106 	br	2009dc38 <alt_printf+0x1f8>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
2009da74:	e0bff807 	ldb	r2,-32(fp)
2009da78:	10800960 	cmpeqi	r2,r2,37
2009da7c:	1000041e 	bne	r2,zero,2009da90 <alt_printf+0x50>
        {
            alt_putchar(c);
2009da80:	e0bff807 	ldb	r2,-32(fp)
2009da84:	1009883a 	mov	r4,r2
2009da88:	009dc680 	call	2009dc68 <alt_putchar>
2009da8c:	00006a06 	br	2009dc38 <alt_printf+0x1f8>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
2009da90:	e0bff717 	ldw	r2,-36(fp)
2009da94:	10c00044 	addi	r3,r2,1
2009da98:	e0fff715 	stw	r3,-36(fp)
2009da9c:	10800003 	ldbu	r2,0(r2)
2009daa0:	e0bff805 	stb	r2,-32(fp)
2009daa4:	e0bff807 	ldb	r2,-32(fp)
2009daa8:	10006226 	beq	r2,zero,2009dc34 <alt_printf+0x1f4>
            {
                if (c == '%')
2009daac:	e0bff807 	ldb	r2,-32(fp)
2009dab0:	10800958 	cmpnei	r2,r2,37
2009dab4:	1000041e 	bne	r2,zero,2009dac8 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
2009dab8:	e0bff807 	ldb	r2,-32(fp)
2009dabc:	1009883a 	mov	r4,r2
2009dac0:	009dc680 	call	2009dc68 <alt_putchar>
2009dac4:	00005c06 	br	2009dc38 <alt_printf+0x1f8>
                } 
                else if (c == 'c')
2009dac8:	e0bff807 	ldb	r2,-32(fp)
2009dacc:	108018d8 	cmpnei	r2,r2,99
2009dad0:	1000081e 	bne	r2,zero,2009daf4 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
2009dad4:	e0bffe17 	ldw	r2,-8(fp)
2009dad8:	10c00104 	addi	r3,r2,4
2009dadc:	e0fffe15 	stw	r3,-8(fp)
2009dae0:	10800017 	ldw	r2,0(r2)
2009dae4:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
2009dae8:	e13ffd17 	ldw	r4,-12(fp)
2009daec:	009dc680 	call	2009dc68 <alt_putchar>
2009daf0:	00005106 	br	2009dc38 <alt_printf+0x1f8>
                }
                else if (c == 'x')
2009daf4:	e0bff807 	ldb	r2,-32(fp)
2009daf8:	10801e18 	cmpnei	r2,r2,120
2009dafc:	1000341e 	bne	r2,zero,2009dbd0 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
2009db00:	e0bffe17 	ldw	r2,-8(fp)
2009db04:	10c00104 	addi	r3,r2,4
2009db08:	e0fffe15 	stw	r3,-8(fp)
2009db0c:	10800017 	ldw	r2,0(r2)
2009db10:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
2009db14:	e0bffb17 	ldw	r2,-20(fp)
2009db18:	1000031e 	bne	r2,zero,2009db28 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
2009db1c:	01000c04 	movi	r4,48
2009db20:	009dc680 	call	2009dc68 <alt_putchar>
                        continue;
2009db24:	00004406 	br	2009dc38 <alt_printf+0x1f8>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
2009db28:	00800704 	movi	r2,28
2009db2c:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
2009db30:	00000306 	br	2009db40 <alt_printf+0x100>
                        digit_shift -= 4;
2009db34:	e0bff917 	ldw	r2,-28(fp)
2009db38:	10bfff04 	addi	r2,r2,-4
2009db3c:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
2009db40:	00c003c4 	movi	r3,15
2009db44:	e0bff917 	ldw	r2,-28(fp)
2009db48:	1884983a 	sll	r2,r3,r2
2009db4c:	1007883a 	mov	r3,r2
2009db50:	e0bffb17 	ldw	r2,-20(fp)
2009db54:	1884703a 	and	r2,r3,r2
2009db58:	103ff626 	beq	r2,zero,2009db34 <__flash_rwdata_start+0xffffef60>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
2009db5c:	00001906 	br	2009dbc4 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
2009db60:	00c003c4 	movi	r3,15
2009db64:	e0bff917 	ldw	r2,-28(fp)
2009db68:	1884983a 	sll	r2,r3,r2
2009db6c:	1007883a 	mov	r3,r2
2009db70:	e0bffb17 	ldw	r2,-20(fp)
2009db74:	1886703a 	and	r3,r3,r2
2009db78:	e0bff917 	ldw	r2,-28(fp)
2009db7c:	1884d83a 	srl	r2,r3,r2
2009db80:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
2009db84:	e0bffc17 	ldw	r2,-16(fp)
2009db88:	108002a8 	cmpgeui	r2,r2,10
2009db8c:	1000041e 	bne	r2,zero,2009dba0 <alt_printf+0x160>
                            c = '0' + digit;
2009db90:	e0bffc17 	ldw	r2,-16(fp)
2009db94:	10800c04 	addi	r2,r2,48
2009db98:	e0bff805 	stb	r2,-32(fp)
2009db9c:	00000306 	br	2009dbac <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
2009dba0:	e0bffc17 	ldw	r2,-16(fp)
2009dba4:	108015c4 	addi	r2,r2,87
2009dba8:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
2009dbac:	e0bff807 	ldb	r2,-32(fp)
2009dbb0:	1009883a 	mov	r4,r2
2009dbb4:	009dc680 	call	2009dc68 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
2009dbb8:	e0bff917 	ldw	r2,-28(fp)
2009dbbc:	10bfff04 	addi	r2,r2,-4
2009dbc0:	e0bff915 	stw	r2,-28(fp)
2009dbc4:	e0bff917 	ldw	r2,-28(fp)
2009dbc8:	103fe50e 	bge	r2,zero,2009db60 <__flash_rwdata_start+0xffffef8c>
2009dbcc:	00001a06 	br	2009dc38 <alt_printf+0x1f8>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
2009dbd0:	e0bff807 	ldb	r2,-32(fp)
2009dbd4:	10801cd8 	cmpnei	r2,r2,115
2009dbd8:	1000151e 	bne	r2,zero,2009dc30 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
2009dbdc:	e0bffe17 	ldw	r2,-8(fp)
2009dbe0:	10c00104 	addi	r3,r2,4
2009dbe4:	e0fffe15 	stw	r3,-8(fp)
2009dbe8:	10800017 	ldw	r2,0(r2)
2009dbec:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
2009dbf0:	00000906 	br	2009dc18 <alt_printf+0x1d8>
                      alt_putchar(*s++);
2009dbf4:	e0bffa17 	ldw	r2,-24(fp)
2009dbf8:	10c00044 	addi	r3,r2,1
2009dbfc:	e0fffa15 	stw	r3,-24(fp)
2009dc00:	10800003 	ldbu	r2,0(r2)
2009dc04:	10803fcc 	andi	r2,r2,255
2009dc08:	1080201c 	xori	r2,r2,128
2009dc0c:	10bfe004 	addi	r2,r2,-128
2009dc10:	1009883a 	mov	r4,r2
2009dc14:	009dc680 	call	2009dc68 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
2009dc18:	e0bffa17 	ldw	r2,-24(fp)
2009dc1c:	10800003 	ldbu	r2,0(r2)
2009dc20:	10803fcc 	andi	r2,r2,255
2009dc24:	1080201c 	xori	r2,r2,128
2009dc28:	10bfe004 	addi	r2,r2,-128
2009dc2c:	103ff11e 	bne	r2,zero,2009dbf4 <__flash_rwdata_start+0xfffff020>
2009dc30:	00000106 	br	2009dc38 <alt_printf+0x1f8>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
2009dc34:	00000706 	br	2009dc54 <alt_printf+0x214>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
2009dc38:	e0bff717 	ldw	r2,-36(fp)
2009dc3c:	10c00044 	addi	r3,r2,1
2009dc40:	e0fff715 	stw	r3,-36(fp)
2009dc44:	10800003 	ldbu	r2,0(r2)
2009dc48:	e0bff805 	stb	r2,-32(fp)
2009dc4c:	e0bff807 	ldb	r2,-32(fp)
2009dc50:	103f881e 	bne	r2,zero,2009da74 <__flash_rwdata_start+0xffffeea0>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
2009dc54:	e037883a 	mov	sp,fp
2009dc58:	dfc00117 	ldw	ra,4(sp)
2009dc5c:	df000017 	ldw	fp,0(sp)
2009dc60:	dec00504 	addi	sp,sp,20
2009dc64:	f800283a 	ret

2009dc68 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
2009dc68:	defffd04 	addi	sp,sp,-12
2009dc6c:	dfc00215 	stw	ra,8(sp)
2009dc70:	df000115 	stw	fp,4(sp)
2009dc74:	df000104 	addi	fp,sp,4
2009dc78:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
2009dc7c:	00800034 	movhi	r2,0
2009dc80:	108a9204 	addi	r2,r2,10824
2009dc84:	10800017 	ldw	r2,0(r2)
2009dc88:	10800217 	ldw	r2,8(r2)
2009dc8c:	e13fff17 	ldw	r4,-4(fp)
2009dc90:	100b883a 	mov	r5,r2
2009dc94:	00946a40 	call	200946a4 <putc>
#endif
#endif
}
2009dc98:	e037883a 	mov	sp,fp
2009dc9c:	dfc00117 	ldw	ra,4(sp)
2009dca0:	df000017 	ldw	fp,0(sp)
2009dca4:	dec00204 	addi	sp,sp,8
2009dca8:	f800283a 	ret

2009dcac <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
2009dcac:	deffff04 	addi	sp,sp,-4
2009dcb0:	df000015 	stw	fp,0(sp)
2009dcb4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
2009dcb8:	000170fa 	wrctl	ienable,zero
}
2009dcbc:	e037883a 	mov	sp,fp
2009dcc0:	df000017 	ldw	fp,0(sp)
2009dcc4:	dec00104 	addi	sp,sp,4
2009dcc8:	f800283a 	ret

2009dccc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
2009dccc:	defffb04 	addi	sp,sp,-20
2009dcd0:	dfc00415 	stw	ra,16(sp)
2009dcd4:	df000315 	stw	fp,12(sp)
2009dcd8:	df000304 	addi	fp,sp,12
2009dcdc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
2009dce0:	00800034 	movhi	r2,0
2009dce4:	108a9704 	addi	r2,r2,10844
2009dce8:	10800017 	ldw	r2,0(r2)
2009dcec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
2009dcf0:	00003106 	br	2009ddb8 <alt_find_file+0xec>
  {
    len = strlen(next->name);
2009dcf4:	e0bffd17 	ldw	r2,-12(fp)
2009dcf8:	10800217 	ldw	r2,8(r2)
2009dcfc:	1009883a 	mov	r4,r2
2009dd00:	008c2f80 	call	2008c2f8 <strlen>
2009dd04:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
2009dd08:	e0bffd17 	ldw	r2,-12(fp)
2009dd0c:	10c00217 	ldw	r3,8(r2)
2009dd10:	e0bffe17 	ldw	r2,-8(fp)
2009dd14:	10bfffc4 	addi	r2,r2,-1
2009dd18:	1885883a 	add	r2,r3,r2
2009dd1c:	10800003 	ldbu	r2,0(r2)
2009dd20:	10803fcc 	andi	r2,r2,255
2009dd24:	1080201c 	xori	r2,r2,128
2009dd28:	10bfe004 	addi	r2,r2,-128
2009dd2c:	10800bd8 	cmpnei	r2,r2,47
2009dd30:	1000031e 	bne	r2,zero,2009dd40 <alt_find_file+0x74>
    {
      len -= 1;
2009dd34:	e0bffe17 	ldw	r2,-8(fp)
2009dd38:	10bfffc4 	addi	r2,r2,-1
2009dd3c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
2009dd40:	e0bffe17 	ldw	r2,-8(fp)
2009dd44:	e0ffff17 	ldw	r3,-4(fp)
2009dd48:	1885883a 	add	r2,r3,r2
2009dd4c:	10800003 	ldbu	r2,0(r2)
2009dd50:	10803fcc 	andi	r2,r2,255
2009dd54:	1080201c 	xori	r2,r2,128
2009dd58:	10bfe004 	addi	r2,r2,-128
2009dd5c:	10800be0 	cmpeqi	r2,r2,47
2009dd60:	1000081e 	bne	r2,zero,2009dd84 <alt_find_file+0xb8>
2009dd64:	e0bffe17 	ldw	r2,-8(fp)
2009dd68:	e0ffff17 	ldw	r3,-4(fp)
2009dd6c:	1885883a 	add	r2,r3,r2
2009dd70:	10800003 	ldbu	r2,0(r2)
2009dd74:	10803fcc 	andi	r2,r2,255
2009dd78:	1080201c 	xori	r2,r2,128
2009dd7c:	10bfe004 	addi	r2,r2,-128
2009dd80:	10000a1e 	bne	r2,zero,2009ddac <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
2009dd84:	e0bffd17 	ldw	r2,-12(fp)
2009dd88:	10c00217 	ldw	r3,8(r2)
2009dd8c:	e0bffe17 	ldw	r2,-8(fp)
2009dd90:	1809883a 	mov	r4,r3
2009dd94:	e17fff17 	ldw	r5,-4(fp)
2009dd98:	100d883a 	mov	r6,r2
2009dd9c:	008bd200 	call	2008bd20 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
2009dda0:	1000021e 	bne	r2,zero,2009ddac <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
2009dda4:	e0bffd17 	ldw	r2,-12(fp)
2009dda8:	00000806 	br	2009ddcc <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
2009ddac:	e0bffd17 	ldw	r2,-12(fp)
2009ddb0:	10800017 	ldw	r2,0(r2)
2009ddb4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
2009ddb8:	e0fffd17 	ldw	r3,-12(fp)
2009ddbc:	00800034 	movhi	r2,0
2009ddc0:	108a9704 	addi	r2,r2,10844
2009ddc4:	18bfcb1e 	bne	r3,r2,2009dcf4 <__flash_rwdata_start+0xfffff120>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
2009ddc8:	0005883a 	mov	r2,zero
}
2009ddcc:	e037883a 	mov	sp,fp
2009ddd0:	dfc00117 	ldw	ra,4(sp)
2009ddd4:	df000017 	ldw	fp,0(sp)
2009ddd8:	dec00204 	addi	sp,sp,8
2009dddc:	f800283a 	ret

2009dde0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
2009dde0:	defffc04 	addi	sp,sp,-16
2009dde4:	df000315 	stw	fp,12(sp)
2009dde8:	df000304 	addi	fp,sp,12
2009ddec:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
2009ddf0:	00bffa04 	movi	r2,-24
2009ddf4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
2009ddf8:	e03ffd15 	stw	zero,-12(fp)
2009ddfc:	00001d06 	br	2009de74 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
2009de00:	00800034 	movhi	r2,0
2009de04:	10856f04 	addi	r2,r2,5564
2009de08:	e0fffd17 	ldw	r3,-12(fp)
2009de0c:	18c00324 	muli	r3,r3,12
2009de10:	10c5883a 	add	r2,r2,r3
2009de14:	10800017 	ldw	r2,0(r2)
2009de18:	1000131e 	bne	r2,zero,2009de68 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
2009de1c:	00800034 	movhi	r2,0
2009de20:	10856f04 	addi	r2,r2,5564
2009de24:	e0fffd17 	ldw	r3,-12(fp)
2009de28:	18c00324 	muli	r3,r3,12
2009de2c:	10c5883a 	add	r2,r2,r3
2009de30:	e0ffff17 	ldw	r3,-4(fp)
2009de34:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
2009de38:	00800034 	movhi	r2,0
2009de3c:	108a9b04 	addi	r2,r2,10860
2009de40:	10c00017 	ldw	r3,0(r2)
2009de44:	e0bffd17 	ldw	r2,-12(fp)
2009de48:	1880040e 	bge	r3,r2,2009de5c <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
2009de4c:	00800034 	movhi	r2,0
2009de50:	108a9b04 	addi	r2,r2,10860
2009de54:	e0fffd17 	ldw	r3,-12(fp)
2009de58:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
2009de5c:	e0bffd17 	ldw	r2,-12(fp)
2009de60:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
2009de64:	00000606 	br	2009de80 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
2009de68:	e0bffd17 	ldw	r2,-12(fp)
2009de6c:	10800044 	addi	r2,r2,1
2009de70:	e0bffd15 	stw	r2,-12(fp)
2009de74:	e0bffd17 	ldw	r2,-12(fp)
2009de78:	10800810 	cmplti	r2,r2,32
2009de7c:	103fe01e 	bne	r2,zero,2009de00 <__flash_rwdata_start+0xfffff22c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
2009de80:	e0bffe17 	ldw	r2,-8(fp)
}
2009de84:	e037883a 	mov	sp,fp
2009de88:	df000017 	ldw	fp,0(sp)
2009de8c:	dec00104 	addi	sp,sp,4
2009de90:	f800283a 	ret

2009de94 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
2009de94:	defffb04 	addi	sp,sp,-20
2009de98:	df000415 	stw	fp,16(sp)
2009de9c:	df000404 	addi	fp,sp,16
2009dea0:	e13ffe15 	stw	r4,-8(fp)
2009dea4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
2009dea8:	e0bfff17 	ldw	r2,-4(fp)
2009deac:	10840070 	cmpltui	r2,r2,4097
2009deb0:	1000021e 	bne	r2,zero,2009debc <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
2009deb4:	00840004 	movi	r2,4096
2009deb8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
2009debc:	e0fffe17 	ldw	r3,-8(fp)
2009dec0:	e0bfff17 	ldw	r2,-4(fp)
2009dec4:	1885883a 	add	r2,r3,r2
2009dec8:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
2009decc:	e0bffe17 	ldw	r2,-8(fp)
2009ded0:	e0bffc15 	stw	r2,-16(fp)
2009ded4:	00000506 	br	2009deec <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
2009ded8:	e0bffc17 	ldw	r2,-16(fp)
2009dedc:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
2009dee0:	e0bffc17 	ldw	r2,-16(fp)
2009dee4:	10800804 	addi	r2,r2,32
2009dee8:	e0bffc15 	stw	r2,-16(fp)
2009deec:	e0fffc17 	ldw	r3,-16(fp)
2009def0:	e0bffd17 	ldw	r2,-12(fp)
2009def4:	18bff836 	bltu	r3,r2,2009ded8 <__flash_rwdata_start+0xfffff304>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
2009def8:	e0bffe17 	ldw	r2,-8(fp)
2009defc:	108007cc 	andi	r2,r2,31
2009df00:	10000226 	beq	r2,zero,2009df0c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
2009df04:	e0bffc17 	ldw	r2,-16(fp)
2009df08:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
2009df0c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
2009df10:	e037883a 	mov	sp,fp
2009df14:	df000017 	ldw	fp,0(sp)
2009df18:	dec00104 	addi	sp,sp,4
2009df1c:	f800283a 	ret

2009df20 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
2009df20:	defffe04 	addi	sp,sp,-8
2009df24:	df000115 	stw	fp,4(sp)
2009df28:	df000104 	addi	fp,sp,4
2009df2c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
2009df30:	e0bfff17 	ldw	r2,-4(fp)
2009df34:	10bffe84 	addi	r2,r2,-6
2009df38:	10c00428 	cmpgeui	r3,r2,16
2009df3c:	18001a1e 	bne	r3,zero,2009dfa8 <alt_exception_cause_generated_bad_addr+0x88>
2009df40:	100690ba 	slli	r3,r2,2
2009df44:	008802b4 	movhi	r2,8202
2009df48:	10b7d604 	addi	r2,r2,-8360
2009df4c:	1885883a 	add	r2,r3,r2
2009df50:	10800017 	ldw	r2,0(r2)
2009df54:	1000683a 	jmp	r2
2009df58:	2009df98 	cmpnei	zero,r4,10110
2009df5c:	2009df98 	cmpnei	zero,r4,10110
2009df60:	2009dfa8 	cmpgeui	zero,r4,10110
2009df64:	2009dfa8 	cmpgeui	zero,r4,10110
2009df68:	2009dfa8 	cmpgeui	zero,r4,10110
2009df6c:	2009df98 	cmpnei	zero,r4,10110
2009df70:	2009dfa0 	cmpeqi	zero,r4,10110
2009df74:	2009dfa8 	cmpgeui	zero,r4,10110
2009df78:	2009df98 	cmpnei	zero,r4,10110
2009df7c:	2009df98 	cmpnei	zero,r4,10110
2009df80:	2009dfa8 	cmpgeui	zero,r4,10110
2009df84:	2009df98 	cmpnei	zero,r4,10110
2009df88:	2009dfa0 	cmpeqi	zero,r4,10110
2009df8c:	2009dfa8 	cmpgeui	zero,r4,10110
2009df90:	2009dfa8 	cmpgeui	zero,r4,10110
2009df94:	2009df98 	cmpnei	zero,r4,10110
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
2009df98:	00800044 	movi	r2,1
2009df9c:	00000306 	br	2009dfac <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
2009dfa0:	0005883a 	mov	r2,zero
2009dfa4:	00000106 	br	2009dfac <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
2009dfa8:	0005883a 	mov	r2,zero
  }
}
2009dfac:	e037883a 	mov	sp,fp
2009dfb0:	df000017 	ldw	fp,0(sp)
2009dfb4:	dec00104 	addi	sp,sp,4
2009dfb8:	f800283a 	ret

2009dfbc <atexit>:
2009dfbc:	200b883a 	mov	r5,r4
2009dfc0:	000d883a 	mov	r6,zero
2009dfc4:	0009883a 	mov	r4,zero
2009dfc8:	000f883a 	mov	r7,zero
2009dfcc:	009dfd01 	jmpi	2009dfd0 <__register_exitproc>

2009dfd0 <__register_exitproc>:
2009dfd0:	00800034 	movhi	r2,0
2009dfd4:	defffa04 	addi	sp,sp,-24
2009dfd8:	108a9104 	addi	r2,r2,10820
2009dfdc:	dc000315 	stw	r16,12(sp)
2009dfe0:	14000017 	ldw	r16,0(r2)
2009dfe4:	dc400415 	stw	r17,16(sp)
2009dfe8:	dfc00515 	stw	ra,20(sp)
2009dfec:	80805217 	ldw	r2,328(r16)
2009dff0:	2023883a 	mov	r17,r4
2009dff4:	10003626 	beq	r2,zero,2009e0d0 <__register_exitproc+0x100>
2009dff8:	10c00117 	ldw	r3,4(r2)
2009dffc:	010007c4 	movi	r4,31
2009e000:	20c00e16 	blt	r4,r3,2009e03c <__register_exitproc+0x6c>
2009e004:	1a400044 	addi	r9,r3,1
2009e008:	8800211e 	bne	r17,zero,2009e090 <__register_exitproc+0xc0>
2009e00c:	18c00084 	addi	r3,r3,2
2009e010:	18c7883a 	add	r3,r3,r3
2009e014:	18c7883a 	add	r3,r3,r3
2009e018:	12400115 	stw	r9,4(r2)
2009e01c:	10c7883a 	add	r3,r2,r3
2009e020:	19400015 	stw	r5,0(r3)
2009e024:	0005883a 	mov	r2,zero
2009e028:	dfc00517 	ldw	ra,20(sp)
2009e02c:	dc400417 	ldw	r17,16(sp)
2009e030:	dc000317 	ldw	r16,12(sp)
2009e034:	dec00604 	addi	sp,sp,24
2009e038:	f800283a 	ret
2009e03c:	00880274 	movhi	r2,8201
2009e040:	10ad5404 	addi	r2,r2,-19120
2009e044:	10002526 	beq	r2,zero,2009e0dc <__register_exitproc+0x10c>
2009e048:	01006404 	movi	r4,400
2009e04c:	d9400015 	stw	r5,0(sp)
2009e050:	d9800115 	stw	r6,4(sp)
2009e054:	d9c00215 	stw	r7,8(sp)
2009e058:	008b5500 	call	2008b550 <malloc>
2009e05c:	d9400017 	ldw	r5,0(sp)
2009e060:	d9800117 	ldw	r6,4(sp)
2009e064:	d9c00217 	ldw	r7,8(sp)
2009e068:	10001c26 	beq	r2,zero,2009e0dc <__register_exitproc+0x10c>
2009e06c:	80c05217 	ldw	r3,328(r16)
2009e070:	10000115 	stw	zero,4(r2)
2009e074:	02400044 	movi	r9,1
2009e078:	10c00015 	stw	r3,0(r2)
2009e07c:	80805215 	stw	r2,328(r16)
2009e080:	10006215 	stw	zero,392(r2)
2009e084:	10006315 	stw	zero,396(r2)
2009e088:	0007883a 	mov	r3,zero
2009e08c:	883fdf26 	beq	r17,zero,2009e00c <__flash_rwdata_start+0xfffff438>
2009e090:	18d1883a 	add	r8,r3,r3
2009e094:	4211883a 	add	r8,r8,r8
2009e098:	1211883a 	add	r8,r2,r8
2009e09c:	41802215 	stw	r6,136(r8)
2009e0a0:	01000044 	movi	r4,1
2009e0a4:	11806217 	ldw	r6,392(r2)
2009e0a8:	20c8983a 	sll	r4,r4,r3
2009e0ac:	310cb03a 	or	r6,r6,r4
2009e0b0:	11806215 	stw	r6,392(r2)
2009e0b4:	41c04215 	stw	r7,264(r8)
2009e0b8:	01800084 	movi	r6,2
2009e0bc:	89bfd31e 	bne	r17,r6,2009e00c <__flash_rwdata_start+0xfffff438>
2009e0c0:	11806317 	ldw	r6,396(r2)
2009e0c4:	3108b03a 	or	r4,r6,r4
2009e0c8:	11006315 	stw	r4,396(r2)
2009e0cc:	003fcf06 	br	2009e00c <__flash_rwdata_start+0xfffff438>
2009e0d0:	80805304 	addi	r2,r16,332
2009e0d4:	80805215 	stw	r2,328(r16)
2009e0d8:	003fc706 	br	2009dff8 <__flash_rwdata_start+0xfffff424>
2009e0dc:	00bfffc4 	movi	r2,-1
2009e0e0:	003fd106 	br	2009e028 <__flash_rwdata_start+0xfffff454>
