
idct_dma_real.elf:     file format elf32-littlenios2
idct_dma_real.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x20080240

Program Header:
    LOAD off    0x00001000 vaddr 0x20080000 paddr 0x20080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x20080020 paddr 0x20080020 align 2**12
         filesz 0x000117ec memsz 0x000117ec flags r-x
    LOAD off    0x00013000 vaddr 0x00000000 paddr 0x2009180c align 2**12
         filesz 0x00002584 memsz 0x000026e8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  20080000  20080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000220  20080020  20080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000115cc  20080240  20080240  00001240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000005f0  00000000  2009180c  00013000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001f94  000005f0  20091dfc  000135f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000164  00002584  20093d90  00015584  2**2
                  ALLOC, SMALL_DATA
  6 .lpddr2       00000000  000026e8  000026e8  00015584  2**0
                  CONTENTS
  7 .sram         00000000  20093d90  20093d90  00015584  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00015584  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001000  00000000  00000000  000155a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00027e3f  00000000  00000000  000165a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009e5a  00000000  00000000  0003e3e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c47f  00000000  00000000  00048241  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000286c  00000000  00000000  000546c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004305  00000000  00000000  00056f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017201  00000000  00000000  0005b231  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  00072434  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001868  00000000  00000000  00072498  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00077ad4  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  00077ad7  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00077ada  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00077adb  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00077adc  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00077ae0  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00077ae4  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  00077ae8  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  00077af1  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  00077afa  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  00077b03  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000032  00000000  00000000  00077b0e  2**0
                  CONTENTS, READONLY
 30 .jdi          000039ed  00000000  00000000  00077b40  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     001792ce  00000000  00000000  0007b52d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
20080000 l    d  .entry	00000000 .entry
20080020 l    d  .exceptions	00000000 .exceptions
20080240 l    d  .text	00000000 .text
00000000 l    d  .rodata	00000000 .rodata
000005f0 l    d  .rwdata	00000000 .rwdata
00002584 l    d  .bss	00000000 .bss
000026e8 l    d  .lpddr2	00000000 .lpddr2
20093d90 l    d  .sram	00000000 .sram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../idct_dma_real_bsp//obj/HAL/src/crt0.o
20080288 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 tables.c
00000000 l    df *ABS*	00000000 util.c
00000000 l    df *ABS*	00000000 hello_world.c
2008052c l     F .text	00000028 dma_done_cb
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
000007f0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000000ae l     O .rodata	00000010 zeroes.4255
20083048 l     F .text	000000bc __sbprintf
000000be l     O .rodata	00000010 blanks.4254
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
200833ec l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
20084fa8 l     F .text	00000008 __fp_lock
20084fb0 l     F .text	00000008 __fp_unlock
20084fc4 l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0000103c l     O .rwdata	00000020 lc_ctype_charset
0000101c l     O .rwdata	00000020 lc_message_charset
0000105c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
000000ec l     O .rodata	0000000c p05.2710
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
20087da4 l     F .text	000000fc __sprint_r.part.0
00000220 l     O .rodata	00000010 blanks.4199
00000210 l     O .rodata	00000010 zeroes.4200
200891ac l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
2008a6b0 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
2008cddc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
2008cf40 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
2008cfa0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
2008d0a0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
2008d194 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
2008d278 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
2008d454 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0000256c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
2008d6b0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
2008d7f8 l     F .text	00000038 alt_dev_reg
0000123c l     O .rwdata	00001060 jtag_uart
0000229c l     O .rwdata	00000060 Cb_out
000022fc l     O .rwdata	00000060 Cr_out
0000235c l     O .rwdata	00000060 from_idct_hwacel
000023bc l     O .rwdata	00000060 msgdma_0
0000241c l     O .rwdata	00000060 to_idct_hwacel
0000247c l     O .rwdata	00000060 video_dma
000024dc l     O .rwdata	00000060 Y_out
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
2008dc20 l     F .text	00000204 altera_avalon_jtag_uart_irq
2008de24 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
2008e444 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_msgdma.c
2008e540 l     F .text	00000050 alt_get_errno
2008e590 l     F .text	00000094 alt_msgdma_write_standard_descriptor
2008e624 l     F .text	0000012c alt_msgdma_write_extended_descriptor
2008e750 l     F .text	00000184 alt_msgdma_irq
2008e8d4 l     F .text	0000008c alt_msgdma_construct_standard_descriptor
2008e960 l     F .text	00000154 alt_msgdma_construct_extended_descriptor
2008eab4 l     F .text	000002d0 alt_msgdma_descriptor_async_transfer
2008ed84 l     F .text	00000378 alt_msgdma_descriptor_sync_transfer
2008f3cc l     F .text	000000a4 alt_msgdma_construct_prefetcher_standard_descriptor
2008f470 l     F .text	00000194 alt_msgdma_construct_prefetcher_extended_descriptor
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
20090668 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
20090ba4 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
20090cdc l     F .text	00000050 alt_get_errno
20090d2c l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
000025bc g     O .bss	00000004 alt_instruction_exception_handler
200902e0 g     F .text	0000003c alt_msgdma_standard_descriptor_async_transfer
20080f14 g     F .text	00000018 putchar
20087304 g     F .text	00000074 _mprec_log10
200873f0 g     F .text	0000008c __any_on
2008986c g     F .text	00000054 _isatty_r
000000f8 g     O .rodata	00000028 __mprec_tinytens
2008d39c g     F .text	00000078 alt_main
20080f2c g     F .text	000000a8 _puts_r
000025e8 g     O .bss	00000100 alt_irq
200898c0 g     F .text	0000005c _lseek_r
20091dfc g       *ABS*	00000000 __flash_rwdata_start
2008b944 g     F .text	00000084 .hidden __eqdf2
2008f1ac g     F .text	00000058 alt_msgdma_construct_standard_mm_to_mm_descriptor
000026e8 g       *ABS*	00000000 __alt_heap_start
20080ed0 g     F .text	0000003c printf
20089978 g     F .text	0000009c _wcrtomb_r
000005f0 g     O .rwdata	00000080 Yquant
20080000 g       *ABS*	00000000 __alt_mem_sram
20087c9c g     F .text	0000005c __sseek
200852f8 g     F .text	00000010 __sinit
20089268 g     F .text	00000138 __swbuf_r
20085da4 g     F .text	0000007c _setlocale_r
20085160 g     F .text	00000068 __sfmoreglue
2008d434 g     F .text	00000020 __malloc_unlock
2008625c g     F .text	0000015c memmove
200852e0 g     F .text	00000018 _cleanup
200864dc g     F .text	000000a8 _Balloc
2008f0fc g     F .text	00000058 alt_msgdma_construct_standard_st_to_mm_descriptor
00002584 g     O .bss	00000004 got_mem_yet
2008b9c8 g     F .text	000000e0 .hidden __gtdf2
20091358 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
20080000 g     F .entry	0000001c __reset
20080020 g       *ABS*	00000000 __flash_exceptions_start
20089814 g     F .text	00000058 _fstat_r
00002594 g     O .bss	00000004 errno
20087c18 g     F .text	00000008 __seofread
000025a8 g     O .bss	00000004 alt_argv
0000a53c g       *ABS*	00000000 _gp
2008fc1c g     F .text	000000d4 alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits
000010bc g     O .rwdata	00000180 alt_fd_list
20080f0c g     F .text	00000008 _putchar_r
20090814 g     F .text	00000090 alt_find_dev
20086124 g     F .text	00000138 memcpy
20084fb8 g     F .text	0000000c _cleanup_r
2008cc04 g     F .text	000000d0 .hidden __floatsidf
20090c64 g     F .text	00000078 alt_io_redirect
2008baa8 g     F .text	000000e0 .hidden __ltdf2
2009180c g       *ABS*	00000000 __DTOR_END__
2009003c g     F .text	0000008c alt_msgdma_start_prefetcher_with_extd_desc_list
2009031c g     F .text	0000003c alt_msgdma_extended_descriptor_async_transfer
2009028c g     F .text	00000054 alt_msgdma_register_callback
20080fd4 g     F .text	00000014 puts
200915cc g     F .text	0000009c alt_exception_cause_generated_bad_addr
20087b50 g     F .text	00000074 __fpclassifyd
20087260 g     F .text	000000a4 __ratio
20089188 g     F .text	00000024 __vfiprintf_internal
2008e020 g     F .text	0000020c altera_avalon_jtag_uart_read
200806d4 g     F .text	00000014 malloc
2008f8fc g     F .text	000000f0 alt_msgdma_prefetcher_add_standard_desc_to_list
20080ea4 g     F .text	0000002c _printf_r
2008a7cc g     F .text	00000008 .hidden __udivsi3
2008d0f0 g     F .text	000000a4 isatty
00000148 g     O .rodata	000000c8 __mprec_tens
20085e20 g     F .text	0000000c __locale_charset
20091540 g     F .text	0000008c alt_icache_flush
00002590 g     O .bss	00000004 __malloc_top_pad
0000254c g     O .rwdata	00000004 __mb_cur_max
20085e50 g     F .text	0000000c _localeconv_r
200868e8 g     F .text	0000003c __i2b
2008575c g     F .text	000004c0 __sfvwrite_r
20080fe8 g     F .text	00000054 _sbrk_r
2008991c g     F .text	0000005c _read_r
00002564 g     O .rwdata	00000004 alt_max_fd
20089530 g     F .text	000000f0 _fclose_r
20084f78 g     F .text	00000030 fflush
0000258c g     O .bss	00000004 __malloc_max_sbrked_mem
2008a7dc g     F .text	0000089c .hidden __adddf3
20087008 g     F .text	0000011c __b2d
2008f65c g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor
2008a120 g     F .text	00000590 .hidden __umoddi3
2008d2c8 g     F .text	000000d4 lseek
20080390 g     F .text	000000f0 print_dct
0000253c g     O .rwdata	00000004 _global_impure_ptr
200875e8 g     F .text	00000568 _realloc_r
000026e8 g       *ABS*	00000000 __bss_end
20090ab4 g     F .text	000000f0 alt_iic_isr_register
20091254 g     F .text	00000104 alt_tick
20090120 g     F .text	0000016c alt_msgdma_init
20089b60 g     F .text	000005c0 .hidden __udivdi3
20089634 g     F .text	00000184 _fputwc_r
00000120 g     O .rodata	00000028 __mprec_bigtens
200866cc g     F .text	00000104 __s2b
2008ccd4 g     F .text	000000a4 .hidden __floatunsidf
20086db0 g     F .text	00000060 __mcmp
20090394 g     F .text	0000003c alt_msgdma_extended_descriptor_sync_transfer
20085318 g     F .text	00000018 __fp_lock_all
20090a68 g     F .text	0000004c alt_ic_irq_enabled
200911bc g     F .text	00000098 alt_alarm_stop
000025b0 g     O .bss	00000004 alt_irq_active
200800fc g     F .exceptions	000000d0 alt_irq_handler
00001094 g     O .rwdata	00000028 alt_dev_null
2008f294 g     F .text	00000090 alt_msgdma_construct_extended_mm_to_st_descriptor
2008ffb0 g     F .text	0000008c alt_msgdma_start_prefetcher_with_std_desc_list
2008cefc g     F .text	00000044 alt_dcache_flush_all
200867d0 g     F .text	00000068 __hi0bits
2008cb7c g     F .text	00000088 .hidden __fixdfsi
00002584 g       *ABS*	00000000 __ram_rwdata_end
0000255c g     O .rwdata	00000008 alt_dev_list
2008d700 g     F .text	000000f8 write
2008747c g     F .text	000000a0 _putc_r
000005f0 g       *ABS*	00000000 __ram_rodata_end
2008cff0 g     F .text	000000b0 fstat
2008baa8 g     F .text	000000e0 .hidden __ledf2
20086b20 g     F .text	00000140 __pow5mult
20087eb8 g     F .text	000012d0 ___vfiprintf_internal_r
000025a0 g     O .bss	00000004 __nlocale_changed
2008a7d4 g     F .text	00000008 .hidden __umodsi3
2008f6b4 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor
000026e8 g       *ABS*	00000000 end
2008db5c g     F .text	000000c4 altera_avalon_jtag_uart_init
200801cc g     F .exceptions	00000074 alt_instruction_exception_entry
2009180c g       *ABS*	00000000 __CTOR_LIST__
20000000 g       *ABS*	00000000 __alt_stack_pointer
2008e4b8 g     F .text	00000088 alt_avalon_timer_sc_init
2008cd78 g     F .text	00000064 .hidden __clzsi2
2008e22c g     F .text	00000218 altera_avalon_jtag_uart_write
20085308 g     F .text	00000004 __sfp_lock_acquire
2008603c g     F .text	000000e8 memchr
200810d4 g     F .text	00001f50 ___vfprintf_internal_r
2008546c g     F .text	000002f0 _free_r
20090f50 g     F .text	00000228 alt_printf
20085e2c g     F .text	00000010 __locale_mb_cur_max
20083258 g     F .text	00000194 __call_exitprocs
0000259c g     O .bss	00000004 __mlocale_changed
00002544 g     O .rwdata	00000004 __malloc_sbrk_base
20080240 g     F .text	0000004c _start
000025b4 g     O .bss	00000004 _alt_tick_rate
200802b8 g     F .text	000000d8 print_block
20080480 g     F .text	000000ac print_bitstream
20086c60 g     F .text	00000150 __lshift
000025b8 g     O .bss	00000004 _alt_nticks
2008f154 g     F .text	00000058 alt_msgdma_construct_standard_mm_to_st_descriptor
2008d4a4 g     F .text	000000fc read
2008d864 g     F .text	00000194 alt_sys_init
200916f8 g     F .text	00000114 __register_exitproc
20086924 g     F .text	000001fc __multiply
2008decc g     F .text	00000068 altera_avalon_jtag_uart_close
000005f0 g       *ABS*	00000000 __ram_rwdata_start
00000000 g       *ABS*	00000000 __ram_rodata_start
000025c0 g     O .bss	00000028 __malloc_current_mallinfo
20087124 g     F .text	0000013c __d2b
2008d9f8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
2009148c g     F .text	000000b4 alt_get_fd
20090510 g     F .text	00000158 alt_busy_sleep
20089418 g     F .text	00000054 _close_r
2008f604 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor
2009167c g     F .text	0000007c memcmp
2008dab8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000026e8 g       *ABS*	00000000 __alt_stack_base
2008db08 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
2008f70c g     F .text	000000a0 alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor
20083104 g     F .text	00000154 __swsetup_r
2008b078 g     F .text	000008cc .hidden __divdf3
200851c8 g     F .text	00000118 __sfp
20087378 g     F .text	00000078 __copybits
00000c14 g     O .rwdata	00000408 __malloc_av_
20085314 g     F .text	00000004 __sinit_lock_release
2008bb88 g     F .text	00000724 .hidden __muldf3
20087bc4 g     F .text	00000054 __sread
20091378 g     F .text	00000114 alt_find_file
200906b8 g     F .text	000000a4 alt_dev_llist_insert
2008d414 g     F .text	00000020 __malloc_lock
2008d600 g     F .text	000000b0 sbrk
20084f1c g     F .text	0000005c _fflush_r
2008946c g     F .text	000000c4 _calloc_r
00002584 g       *ABS*	00000000 __bss_start
200863b8 g     F .text	00000124 memset
200900c8 g     F .text	00000058 alt_msgdma_open
20080554 g     F .text	00000148 main
000025ac g     O .bss	00000004 alt_envp
00002588 g     O .bss	00000004 __malloc_max_total_mem
2008f9ec g     F .text	00000198 alt_msgdma_prefetcher_add_extended_desc_to_list
2008da58 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
200893a0 g     F .text	0000001c __swbuf
20087cf8 g     F .text	00000008 __sclose
20000000 g       *ABS*	00000000 __alt_heap_limit
20089620 g     F .text	00000014 fclose
200835ec g     F .text	00001728 _dtoa_r
2008fcf0 g     F .text	000002c0 alt_msgdma_start_prefetcher_with_list_addr
200806fc g     F .text	000007a8 _malloc_r
20089ad4 g     F .text	00000030 __ascii_wctomb
00002568 g     O .rwdata	00000004 alt_errno
2008f844 g     F .text	000000b8 alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor
20085c1c g     F .text	000000c4 _fwalk
2008751c g     F .text	000000cc putc
2008a71c g     F .text	00000054 .hidden __divsi3
20085348 g     F .text	00000124 _malloc_trim_r
2009180c g       *ABS*	00000000 __CTOR_END__
20087d00 g     F .text	000000a4 strcmp
2009180c g       *ABS*	00000000 __flash_rodata_start
2009180c g       *ABS*	00000000 __DTOR_LIST__
2008b944 g     F .text	00000084 .hidden __nedf2
2008d830 g     F .text	00000034 alt_irq_init
2008d5a0 g     F .text	00000060 alt_release_fd
20090358 g     F .text	0000003c alt_msgdma_standard_descriptor_sync_transfer
00000230 g     O .rodata	00000100 .hidden __clz_tab
00002598 g     O .bss	00000004 _PathLocale
20091668 g     F .text	00000014 atexit
200893bc g     F .text	0000005c _write_r
20085e5c g     F .text	0000001c setlocale
2008f7ac g     F .text	00000098 alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor
00002540 g     O .rwdata	00000004 _impure_ptr
000025a4 g     O .bss	00000004 alt_argc
20084d14 g     F .text	00000208 __sflush_r
200907b8 g     F .text	0000005c _do_dtors
20085e48 g     F .text	00000008 __locale_cjk_lang
000006f0 g     O .rwdata	00000100 zigzag_table
20080020 g       .exceptions	00000000 alt_irq_entry
2008028c g     F .text	0000002c error_and_exit
20086fa8 g     F .text	00000060 __ulp
20085330 g     F .text	00000018 __fp_unlock_all
00000000 g       *ABS*	00000000 __alt_mem_lpddr2
00002554 g     O .rwdata	00000008 alt_fs_list
20080020 g       *ABS*	00000000 __ram_exceptions_start
20085e78 g     F .text	0000000c localeconv
200908d4 g     F .text	00000050 alt_ic_isr_register
00002584 g       *ABS*	00000000 _edata
000026e8 g       *ABS*	00000000 _end
20080240 g       *ABS*	00000000 __ram_exceptions_end
2008df34 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
200909c4 g     F .text	000000a4 alt_ic_irq_disable
20087c20 g     F .text	0000007c __swrite
00002548 g     O .rwdata	00000004 __malloc_trim_threshold
20085e3c g     F .text	0000000c __locale_msgcharset
2008069c g     F .text	00000038 exit
20085ce0 g     F .text	000000c4 _fwalk_reent
2008fb84 g     F .text	00000098 alt_msgdma_prefetcher_set_std_list_own_by_hw_bits
20086e10 g     F .text	00000198 __mdiff
2008a770 g     F .text	0000005c .hidden __modsi3
20000000 g       *ABS*	00000000 __alt_data_end
20080020 g     F .exceptions	00000000 alt_exception
2008530c g     F .text	00000004 __sfp_lock_release
2008f324 g     F .text	000000a8 alt_msgdma_construct_extended_mm_to_mm_descriptor
2008f204 g     F .text	00000090 alt_msgdma_construct_extended_st_to_mm_descriptor
2008cf6c g     F .text	00000034 _exit
200903d0 g     F .text	00000140 alt_alarm_start
20085e84 g     F .text	000001b8 __smakebuf_r
00002570 g     O .rwdata	00000008 alt_msgdma_list
2008103c g     F .text	00000098 strlen
20090df8 g     F .text	00000158 open
2008b9c8 g     F .text	000000e0 .hidden __gedf2
20091178 g     F .text	00000044 alt_putchar
00002550 g     O .rwdata	00000004 __wctomb
20087ea0 g     F .text	00000018 __sprint_r
200908a4 g     F .text	00000030 alt_icache_flush_all
00002578 g     O .rwdata	00000004 alt_priority_mask
00000670 g     O .rwdata	00000080 Cquant
20090924 g     F .text	000000a0 alt_ic_irq_enable
20083024 g     F .text	00000024 __vfprintf_internal
20089b04 g     F .text	0000005c _wctomb_r
2008c2ac g     F .text	000008d0 .hidden __subdf3
20086838 g     F .text	000000b0 __lo0bits
0000257c g     O .rwdata	00000008 alt_alarm_list
2009075c g     F .text	0000005c _do_ctors
20089a14 g     F .text	000000c0 wcrtomb
2008ce2c g     F .text	000000d0 close
2008d1f8 g     F .text	00000080 alt_load
200897b8 g     F .text	0000005c fputwc
200806e8 g     F .text	00000014 free
20085310 g     F .text	00000004 __sinit_lock_acquire
200865ac g     F .text	00000120 __multadd
20086584 g     F .text	00000028 _Bfree



Disassembly of section .entry:

20080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
20080000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
20080004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
20080008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
2008000c:	00bffd16 	blt	zero,r2,20080004 <__flash_rwdata_start+0xfffee208>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
20080010:	00480234 	movhi	at,8200
    ori r1, r1, %lo(_start)
20080014:	08409014 	ori	at,at,576
    jmp r1
20080018:	0800683a 	jmp	at
2008001c:	00000000 	call	20000000 <__alt_data_end>

Disassembly of section .exceptions:

20080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
20080020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
20080024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
20080028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
2008002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
20080030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
20080034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
20080038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
2008003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
20080040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
20080044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
20080048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
2008004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
20080050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
20080054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
20080058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
2008005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
20080060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
20080064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
20080068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
2008006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
20080070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
20080074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
20080078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
2008007c:	10000326 	beq	r2,zero,2008008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
20080080:	20000226 	beq	r4,zero,2008008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
20080084:	00800fc0 	call	200800fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
20080088:	00000706 	br	200800a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
2008008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
20080090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
20080094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
20080098:	00801cc0 	call	200801cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
2008009c:	1000021e 	bne	r2,zero,200800a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
200800a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
200800a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
200800a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
200800ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
200800b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
200800b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
200800b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
200800bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
200800c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
200800c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
200800c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
200800cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
200800d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
200800d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
200800d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
200800dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
200800e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
200800e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
200800e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
200800ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
200800f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
200800f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
200800f8:	ef80083a 	eret

200800fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
200800fc:	defff904 	addi	sp,sp,-28
20080100:	dfc00615 	stw	ra,24(sp)
20080104:	df000515 	stw	fp,20(sp)
20080108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
2008010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
20080110:	0005313a 	rdctl	r2,ipending
20080114:	e0bffe15 	stw	r2,-8(fp)

  return active;
20080118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
2008011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
20080120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
20080124:	00800044 	movi	r2,1
20080128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
2008012c:	e0fffb17 	ldw	r3,-20(fp)
20080130:	e0bffc17 	ldw	r2,-16(fp)
20080134:	1884703a 	and	r2,r3,r2
20080138:	10001426 	beq	r2,zero,2008018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
2008013c:	00800034 	movhi	r2,0
20080140:	10897a04 	addi	r2,r2,9704
20080144:	e0fffd17 	ldw	r3,-12(fp)
20080148:	180690fa 	slli	r3,r3,3
2008014c:	10c5883a 	add	r2,r2,r3
20080150:	10c00017 	ldw	r3,0(r2)
20080154:	00800034 	movhi	r2,0
20080158:	10897a04 	addi	r2,r2,9704
2008015c:	e13ffd17 	ldw	r4,-12(fp)
20080160:	200890fa 	slli	r4,r4,3
20080164:	21000104 	addi	r4,r4,4
20080168:	1105883a 	add	r2,r2,r4
2008016c:	10800017 	ldw	r2,0(r2)
20080170:	1009883a 	mov	r4,r2
20080174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
20080178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
2008017c:	0005313a 	rdctl	r2,ipending
20080180:	e0bfff15 	stw	r2,-4(fp)

  return active;
20080184:	e0bfff17 	ldw	r2,-4(fp)
20080188:	00000706 	br	200801a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
2008018c:	e0bffc17 	ldw	r2,-16(fp)
20080190:	1085883a 	add	r2,r2,r2
20080194:	e0bffc15 	stw	r2,-16(fp)
      i++;
20080198:	e0bffd17 	ldw	r2,-12(fp)
2008019c:	10800044 	addi	r2,r2,1
200801a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
200801a4:	003fe106 	br	2008012c <__flash_rwdata_start+0xfffee330>

    active = alt_irq_pending ();
200801a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
200801ac:	e0bffb17 	ldw	r2,-20(fp)
200801b0:	103fdb1e 	bne	r2,zero,20080120 <__flash_rwdata_start+0xfffee324>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
200801b4:	0001883a 	nop
}
200801b8:	e037883a 	mov	sp,fp
200801bc:	dfc00117 	ldw	ra,4(sp)
200801c0:	df000017 	ldw	fp,0(sp)
200801c4:	dec00204 	addi	sp,sp,8
200801c8:	f800283a 	ret

200801cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
200801cc:	defffb04 	addi	sp,sp,-20
200801d0:	dfc00415 	stw	ra,16(sp)
200801d4:	df000315 	stw	fp,12(sp)
200801d8:	df000304 	addi	fp,sp,12
200801dc:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
200801e0:	000531fa 	rdctl	r2,exception
200801e4:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
200801e8:	e0bffd17 	ldw	r2,-12(fp)
200801ec:	10801f0c 	andi	r2,r2,124
200801f0:	1004d0ba 	srli	r2,r2,2
200801f4:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
200801f8:	0005333a 	rdctl	r2,badaddr
200801fc:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
20080200:	d0a02017 	ldw	r2,-32640(gp)
20080204:	10000726 	beq	r2,zero,20080224 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
20080208:	d0a02017 	ldw	r2,-32640(gp)
2008020c:	e0fffd17 	ldw	r3,-12(fp)
20080210:	1809883a 	mov	r4,r3
20080214:	e17fff17 	ldw	r5,-4(fp)
20080218:	e1bffe17 	ldw	r6,-8(fp)
2008021c:	103ee83a 	callr	r2
20080220:	00000206 	br	2008022c <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
20080224:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
20080228:	0005883a 	mov	r2,zero
}
2008022c:	e037883a 	mov	sp,fp
20080230:	dfc00117 	ldw	ra,4(sp)
20080234:	df000017 	ldw	fp,0(sp)
20080238:	dec00204 	addi	sp,sp,8
2008023c:	f800283a 	ret

Disassembly of section .text:

20080240 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
20080240:	00900014 	movui	r2,16384
#endif

0:
    initd 0(r2)
20080244:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
20080248:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
2008024c:	00bffd16 	blt	zero,r2,20080244 <__flash_rwdata_start+0xfffee448>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
20080250:	06c80034 	movhi	sp,8192
    ori sp, sp, %lo(__alt_stack_pointer)
20080254:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
20080258:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
2008025c:	d6a94f14 	ori	gp,gp,42300
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
20080260:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
20080264:	10896114 	ori	r2,r2,9604

    movhi r3, %hi(__bss_end)
20080268:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
2008026c:	18c9ba14 	ori	r3,r3,9960

    beq r2, r3, 1f
20080270:	10c00326 	beq	r2,r3,20080280 <_start+0x40>

0:
    stw zero, (r2)
20080274:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
20080278:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
2008027c:	10fffd36 	bltu	r2,r3,20080274 <__flash_rwdata_start+0xfffee478>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
20080280:	008d1f80 	call	2008d1f8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
20080284:	008d39c0 	call	2008d39c <alt_main>

20080288 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
20080288:	003fff06 	br	20080288 <__flash_rwdata_start+0xfffee48c>

2008028c <error_and_exit>:

#include <stdio.h>
#include <stdlib.h>
#include "util.h"

void error_and_exit(const char* str){
2008028c:	defffd04 	addi	sp,sp,-12
20080290:	dfc00215 	stw	ra,8(sp)
20080294:	df000115 	stw	fp,4(sp)
20080298:	df000104 	addi	fp,sp,4
2008029c:	e13fff15 	stw	r4,-4(fp)
    printf("Error: %s\n", str);
200802a0:	01000034 	movhi	r4,0
200802a4:	21000004 	addi	r4,r4,0
200802a8:	e17fff17 	ldw	r5,-4(fp)
200802ac:	0080ed00 	call	20080ed0 <printf>
    exit(-1);
200802b0:	013fffc4 	movi	r4,-1
200802b4:	008069c0 	call	2008069c <exit>

200802b8 <print_block>:
}

void print_block(pcolor_block_t b)
{
200802b8:	defffb04 	addi	sp,sp,-20
200802bc:	dfc00415 	stw	ra,16(sp)
200802c0:	df000315 	stw	fp,12(sp)
200802c4:	df000304 	addi	fp,sp,12
200802c8:	e13fff15 	stw	r4,-4(fp)
    for (int row = 0; row < 8; row++)
200802cc:	e03ffd15 	stw	zero,-12(fp)
200802d0:	00002706 	br	20080370 <print_block+0xb8>
        for(int column = 0; column < 8; column++){
200802d4:	e03ffe15 	stw	zero,-8(fp)
200802d8:	00001f06 	br	20080358 <print_block+0xa0>
            if(column != 7) printf("%d,", b[row][column]);
200802dc:	e0bffe17 	ldw	r2,-8(fp)
200802e0:	108001e0 	cmpeqi	r2,r2,7
200802e4:	10000d1e 	bne	r2,zero,2008031c <print_block+0x64>
200802e8:	e0bffd17 	ldw	r2,-12(fp)
200802ec:	100490fa 	slli	r2,r2,3
200802f0:	e0ffff17 	ldw	r3,-4(fp)
200802f4:	1887883a 	add	r3,r3,r2
200802f8:	e0bffe17 	ldw	r2,-8(fp)
200802fc:	1885883a 	add	r2,r3,r2
20080300:	10800003 	ldbu	r2,0(r2)
20080304:	10803fcc 	andi	r2,r2,255
20080308:	01000034 	movhi	r4,0
2008030c:	21000304 	addi	r4,r4,12
20080310:	100b883a 	mov	r5,r2
20080314:	0080ed00 	call	20080ed0 <printf>
20080318:	00000c06 	br	2008034c <print_block+0x94>
            else printf("%u\n", b[row][column]);
2008031c:	e0bffd17 	ldw	r2,-12(fp)
20080320:	100490fa 	slli	r2,r2,3
20080324:	e0ffff17 	ldw	r3,-4(fp)
20080328:	1887883a 	add	r3,r3,r2
2008032c:	e0bffe17 	ldw	r2,-8(fp)
20080330:	1885883a 	add	r2,r3,r2
20080334:	10800003 	ldbu	r2,0(r2)
20080338:	10803fcc 	andi	r2,r2,255
2008033c:	01000034 	movhi	r4,0
20080340:	21000404 	addi	r4,r4,16
20080344:	100b883a 	mov	r5,r2
20080348:	0080ed00 	call	20080ed0 <printf>
}

void print_block(pcolor_block_t b)
{
    for (int row = 0; row < 8; row++)
        for(int column = 0; column < 8; column++){
2008034c:	e0bffe17 	ldw	r2,-8(fp)
20080350:	10800044 	addi	r2,r2,1
20080354:	e0bffe15 	stw	r2,-8(fp)
20080358:	e0bffe17 	ldw	r2,-8(fp)
2008035c:	10800210 	cmplti	r2,r2,8
20080360:	103fde1e 	bne	r2,zero,200802dc <__flash_rwdata_start+0xfffee4e0>
    exit(-1);
}

void print_block(pcolor_block_t b)
{
    for (int row = 0; row < 8; row++)
20080364:	e0bffd17 	ldw	r2,-12(fp)
20080368:	10800044 	addi	r2,r2,1
2008036c:	e0bffd15 	stw	r2,-12(fp)
20080370:	e0bffd17 	ldw	r2,-12(fp)
20080374:	10800210 	cmplti	r2,r2,8
20080378:	103fd61e 	bne	r2,zero,200802d4 <__flash_rwdata_start+0xfffee4d8>
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
            else printf("%u\n", b[row][column]);
        } 
}
2008037c:	e037883a 	mov	sp,fp
20080380:	dfc00117 	ldw	ra,4(sp)
20080384:	df000017 	ldw	fp,0(sp)
20080388:	dec00204 	addi	sp,sp,8
2008038c:	f800283a 	ret

20080390 <print_dct>:

void print_dct(pdct_block_t b)
{
20080390:	defffb04 	addi	sp,sp,-20
20080394:	dfc00415 	stw	ra,16(sp)
20080398:	df000315 	stw	fp,12(sp)
2008039c:	df000304 	addi	fp,sp,12
200803a0:	e13fff15 	stw	r4,-4(fp)
    for (int row = 0; row < 8; row++)
200803a4:	e03ffd15 	stw	zero,-12(fp)
200803a8:	00002d06 	br	20080460 <print_dct+0xd0>
        for(int column = 0; column < 8; column++){
200803ac:	e03ffe15 	stw	zero,-8(fp)
200803b0:	00002506 	br	20080448 <print_dct+0xb8>
            if(column != 7) printf("%d,", b[row][column]);
200803b4:	e0bffe17 	ldw	r2,-8(fp)
200803b8:	108001e0 	cmpeqi	r2,r2,7
200803bc:	1000101e 	bne	r2,zero,20080400 <print_dct+0x70>
200803c0:	e0bffd17 	ldw	r2,-12(fp)
200803c4:	1004913a 	slli	r2,r2,4
200803c8:	e0ffff17 	ldw	r3,-4(fp)
200803cc:	1887883a 	add	r3,r3,r2
200803d0:	e0bffe17 	ldw	r2,-8(fp)
200803d4:	1085883a 	add	r2,r2,r2
200803d8:	1885883a 	add	r2,r3,r2
200803dc:	1080000b 	ldhu	r2,0(r2)
200803e0:	10bfffcc 	andi	r2,r2,65535
200803e4:	10a0001c 	xori	r2,r2,32768
200803e8:	10a00004 	addi	r2,r2,-32768
200803ec:	01000034 	movhi	r4,0
200803f0:	21000304 	addi	r4,r4,12
200803f4:	100b883a 	mov	r5,r2
200803f8:	0080ed00 	call	20080ed0 <printf>
200803fc:	00000f06 	br	2008043c <print_dct+0xac>
            else printf("%d\n", b[row][column]);
20080400:	e0bffd17 	ldw	r2,-12(fp)
20080404:	1004913a 	slli	r2,r2,4
20080408:	e0ffff17 	ldw	r3,-4(fp)
2008040c:	1887883a 	add	r3,r3,r2
20080410:	e0bffe17 	ldw	r2,-8(fp)
20080414:	1085883a 	add	r2,r2,r2
20080418:	1885883a 	add	r2,r3,r2
2008041c:	1080000b 	ldhu	r2,0(r2)
20080420:	10bfffcc 	andi	r2,r2,65535
20080424:	10a0001c 	xori	r2,r2,32768
20080428:	10a00004 	addi	r2,r2,-32768
2008042c:	01000034 	movhi	r4,0
20080430:	21000504 	addi	r4,r4,20
20080434:	100b883a 	mov	r5,r2
20080438:	0080ed00 	call	20080ed0 <printf>
}

void print_dct(pdct_block_t b)
{
    for (int row = 0; row < 8; row++)
        for(int column = 0; column < 8; column++){
2008043c:	e0bffe17 	ldw	r2,-8(fp)
20080440:	10800044 	addi	r2,r2,1
20080444:	e0bffe15 	stw	r2,-8(fp)
20080448:	e0bffe17 	ldw	r2,-8(fp)
2008044c:	10800210 	cmplti	r2,r2,8
20080450:	103fd81e 	bne	r2,zero,200803b4 <__flash_rwdata_start+0xfffee5b8>
        } 
}

void print_dct(pdct_block_t b)
{
    for (int row = 0; row < 8; row++)
20080454:	e0bffd17 	ldw	r2,-12(fp)
20080458:	10800044 	addi	r2,r2,1
2008045c:	e0bffd15 	stw	r2,-12(fp)
20080460:	e0bffd17 	ldw	r2,-12(fp)
20080464:	10800210 	cmplti	r2,r2,8
20080468:	103fd01e 	bne	r2,zero,200803ac <__flash_rwdata_start+0xfffee5b0>
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
            else printf("%d\n", b[row][column]);
        } 
}
2008046c:	e037883a 	mov	sp,fp
20080470:	dfc00117 	ldw	ra,4(sp)
20080474:	df000017 	ldw	fp,0(sp)
20080478:	dec00204 	addi	sp,sp,8
2008047c:	f800283a 	ret

20080480 <print_bitstream>:

void print_bitstream(int num_bytes, void* bitstream)
{
20080480:	defffa04 	addi	sp,sp,-24
20080484:	dfc00515 	stw	ra,20(sp)
20080488:	df000415 	stw	fp,16(sp)
2008048c:	df000404 	addi	fp,sp,16
20080490:	e13ffe15 	stw	r4,-8(fp)
20080494:	e17fff15 	stw	r5,-4(fp)
    for (int index = 0; index < num_bytes; index++)
20080498:	e03ffc15 	stw	zero,-16(fp)
2008049c:	00001906 	br	20080504 <print_bitstream+0x84>
        for(int x = 0; x < 8 ; x++)
200804a0:	e03ffd15 	stw	zero,-12(fp)
200804a4:	00001106 	br	200804ec <print_bitstream+0x6c>
            printf("%u", (uint8_t)((((uint8_t*)bitstream)[index]) << x) >> 7);
200804a8:	e0bffc17 	ldw	r2,-16(fp)
200804ac:	e0ffff17 	ldw	r3,-4(fp)
200804b0:	1885883a 	add	r2,r3,r2
200804b4:	10800003 	ldbu	r2,0(r2)
200804b8:	10c03fcc 	andi	r3,r2,255
200804bc:	e0bffd17 	ldw	r2,-12(fp)
200804c0:	1884983a 	sll	r2,r3,r2
200804c4:	10803fcc 	andi	r2,r2,255
200804c8:	1004d1fa 	srli	r2,r2,7
200804cc:	10803fcc 	andi	r2,r2,255
200804d0:	01000034 	movhi	r4,0
200804d4:	21000604 	addi	r4,r4,24
200804d8:	100b883a 	mov	r5,r2
200804dc:	0080ed00 	call	20080ed0 <printf>
}

void print_bitstream(int num_bytes, void* bitstream)
{
    for (int index = 0; index < num_bytes; index++)
        for(int x = 0; x < 8 ; x++)
200804e0:	e0bffd17 	ldw	r2,-12(fp)
200804e4:	10800044 	addi	r2,r2,1
200804e8:	e0bffd15 	stw	r2,-12(fp)
200804ec:	e0bffd17 	ldw	r2,-12(fp)
200804f0:	10800210 	cmplti	r2,r2,8
200804f4:	103fec1e 	bne	r2,zero,200804a8 <__flash_rwdata_start+0xfffee6ac>
        } 
}

void print_bitstream(int num_bytes, void* bitstream)
{
    for (int index = 0; index < num_bytes; index++)
200804f8:	e0bffc17 	ldw	r2,-16(fp)
200804fc:	10800044 	addi	r2,r2,1
20080500:	e0bffc15 	stw	r2,-16(fp)
20080504:	e0fffc17 	ldw	r3,-16(fp)
20080508:	e0bffe17 	ldw	r2,-8(fp)
2008050c:	18bfe416 	blt	r3,r2,200804a0 <__flash_rwdata_start+0xfffee6a4>
        for(int x = 0; x < 8 ; x++)
            printf("%u", (uint8_t)((((uint8_t*)bitstream)[index]) << x) >> 7);
    printf("\n");
20080510:	01000284 	movi	r4,10
20080514:	0080f140 	call	20080f14 <putchar>
}
20080518:	e037883a 	mov	sp,fp
2008051c:	dfc00117 	ldw	ra,4(sp)
20080520:	df000017 	ldw	fp,0(sp)
20080524:	dec00204 	addi	sp,sp,8
20080528:	f800283a 	ret

2008052c <dma_done_cb>:
#define COLOUR_BLOCK_SIZE (16)

volatile int got_mem_yet = 0;

static void dma_done_cb (void *context)
{
2008052c:	defffe04 	addi	sp,sp,-8
20080530:	df000115 	stw	fp,4(sp)
20080534:	df000104 	addi	fp,sp,4
20080538:	e13fff15 	stw	r4,-4(fp)
	got_mem_yet = 1;
2008053c:	00800044 	movi	r2,1
20080540:	d0a01215 	stw	r2,-32696(gp)
}
20080544:	e037883a 	mov	sp,fp
20080548:	df000017 	ldw	fp,0(sp)
2008054c:	dec00104 	addi	sp,sp,4
20080550:	f800283a 	ret

20080554 <main>:


int main()
{
20080554:	defff704 	addi	sp,sp,-36
20080558:	dfc00815 	stw	ra,32(sp)
2008055c:	df000715 	stw	fp,28(sp)
20080560:	df000704 	addi	fp,sp,28
  printf("Hello from Nios II!\n");
20080564:	01000034 	movhi	r4,0
20080568:	21000704 	addi	r4,r4,28
2008056c:	0080fd40 	call	20080fd4 <puts>

  //uint32_t *japan = malloc(sizeof(uint32_t) * 40); //{0xFFFBFFFF, 0xDEADCAFE};
  //uint32_t *japan_out = malloc(sizeof(uint32_t) * 40);

  //Stand-in DCAC type and color block
  uint32_t *p_dct_block_buffer = malloc(sizeof(uint32_t) * DCT_BLOCK_SIZE);
20080570:	01002004 	movi	r4,128
20080574:	00806d40 	call	200806d4 <malloc>
20080578:	e0bffa15 	stw	r2,-24(fp)
  uint32_t *p_colour_block_buffer = malloc(sizeof(uint32_t) * COLOUR_BLOCK_SIZE);
2008057c:	01001004 	movi	r4,64
20080580:	00806d40 	call	200806d4 <malloc>
20080584:	e0bffb15 	stw	r2,-20(fp)
////	  alt_dcache_flush_all();
//  }

  //japan[38] = 0xFFFFFFFF;

  alt_dcache_flush_all();
20080588:	008cefc0 	call	2008cefc <alt_dcache_flush_all>

  alt_msgdma_dev *mm_to_st_dma_dev, *st_to_mm_dma_dev;
  alt_msgdma_standard_descriptor *mm_to_st_desc, *st_to_mm_desc;

  mm_to_st_desc = malloc(sizeof(alt_msgdma_standard_descriptor));//(alt_msgdma_standard_descriptor*) memalign(32,
2008058c:	01000404 	movi	r4,16
20080590:	00806d40 	call	200806d4 <malloc>
20080594:	e0bffc15 	stw	r2,-16(fp)
		  //3 * sizeof(alt_msgdma_standard_descriptor));
  st_to_mm_desc = malloc(sizeof(alt_msgdma_standard_descriptor));//(alt_msgdma_standard_descriptor*) memalign(32,
20080598:	01000404 	movi	r4,16
2008059c:	00806d40 	call	200806d4 <malloc>
200805a0:	e0bffd15 	stw	r2,-12(fp)
		  //3 * sizeof(alt_msgdma_standard_descriptor));

  mm_to_st_dma_dev = alt_msgdma_open(TO_IDCT_HWACEL_CSR_NAME);
200805a4:	01000034 	movhi	r4,0
200805a8:	21000c04 	addi	r4,r4,48
200805ac:	00900c80 	call	200900c8 <alt_msgdma_open>
200805b0:	e0bffe15 	stw	r2,-8(fp)
  st_to_mm_dma_dev = alt_msgdma_open(FROM_IDCT_HWACEL_CSR_NAME);
200805b4:	01000034 	movhi	r4,0
200805b8:	21001204 	addi	r4,r4,72
200805bc:	00900c80 	call	200900c8 <alt_msgdma_open>
200805c0:	e0bfff15 	stw	r2,-4(fp)

  while(0 != alt_msgdma_construct_standard_mm_to_st_descriptor(mm_to_st_dma_dev,
200805c4:	0001883a 	nop
200805c8:	00900004 	movi	r2,16384
200805cc:	d8800015 	stw	r2,0(sp)
200805d0:	e13ffe17 	ldw	r4,-8(fp)
200805d4:	e17ffc17 	ldw	r5,-16(fp)
200805d8:	e1bffa17 	ldw	r6,-24(fp)
200805dc:	01c02004 	movi	r7,128
200805e0:	008f1540 	call	2008f154 <alt_msgdma_construct_standard_mm_to_st_descriptor>
200805e4:	103ff81e 	bne	r2,zero,200805c8 <__flash_rwdata_start+0xfffee7cc>
  				mm_to_st_desc,
  				(alt_u32 *) p_dct_block_buffer , sizeof(uint32_t) * DCT_BLOCK_SIZE,
  				DESC_CONTROL));

  while(0 != alt_msgdma_construct_standard_st_to_mm_descriptor(st_to_mm_dma_dev,
200805e8:	0001883a 	nop
200805ec:	00900004 	movi	r2,16384
200805f0:	d8800015 	stw	r2,0(sp)
200805f4:	e13fff17 	ldw	r4,-4(fp)
200805f8:	e17ffd17 	ldw	r5,-12(fp)
200805fc:	e1bffb17 	ldw	r6,-20(fp)
20080600:	01c01004 	movi	r7,64
20080604:	008f0fc0 	call	2008f0fc <alt_msgdma_construct_standard_st_to_mm_descriptor>
20080608:	103ff81e 	bne	r2,zero,200805ec <__flash_rwdata_start+0xfffee7f0>
  				st_to_mm_desc,
  				(alt_u32 *) p_colour_block_buffer, sizeof(uint32_t) * COLOUR_BLOCK_SIZE,
  				DESC_CONTROL));

  alt_msgdma_register_callback(
2008060c:	e13ffe17 	ldw	r4,-8(fp)
20080610:	01480234 	movhi	r5,8200
20080614:	29414b04 	addi	r5,r5,1324
20080618:	01800404 	movi	r6,16
2008061c:	000f883a 	mov	r7,zero
20080620:	009028c0 	call	2009028c <alt_msgdma_register_callback>
  	mm_to_st_dma_dev,
  	dma_done_cb,
  	ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK,
  	0);

  alt_msgdma_register_callback(
20080624:	e13fff17 	ldw	r4,-4(fp)
20080628:	01480234 	movhi	r5,8200
2008062c:	29414b04 	addi	r5,r5,1324
20080630:	01800404 	movi	r6,16
20080634:	000f883a 	mov	r7,zero
20080638:	009028c0 	call	2009028c <alt_msgdma_register_callback>
  	dma_done_cb,
  	ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK,
  	0);


	while (alt_msgdma_standard_descriptor_async_transfer(mm_to_st_dma_dev,
2008063c:	0001883a 	nop
20080640:	e13ffe17 	ldw	r4,-8(fp)
20080644:	e17ffc17 	ldw	r5,-16(fp)
20080648:	00902e00 	call	200902e0 <alt_msgdma_standard_descriptor_async_transfer>
2008064c:	103ffc1e 	bne	r2,zero,20080640 <__flash_rwdata_start+0xfffee844>
			mm_to_st_desc)
			!= 0);

	while(!got_mem_yet);
20080650:	0001883a 	nop
20080654:	d0a01217 	ldw	r2,-32696(gp)
20080658:	103ffe26 	beq	r2,zero,20080654 <__flash_rwdata_start+0xfffee858>
	got_mem_yet = 0;
2008065c:	d0201215 	stw	zero,-32696(gp)

	while (alt_msgdma_standard_descriptor_async_transfer(st_to_mm_dma_dev,
20080660:	0001883a 	nop
20080664:	e13fff17 	ldw	r4,-4(fp)
20080668:	e17ffd17 	ldw	r5,-12(fp)
2008066c:	00902e00 	call	200902e0 <alt_msgdma_standard_descriptor_async_transfer>
20080670:	103ffc1e 	bne	r2,zero,20080664 <__flash_rwdata_start+0xfffee868>
			st_to_mm_desc)
			!= 0);


	while(!got_mem_yet);
20080674:	0001883a 	nop
20080678:	d0a01217 	ldw	r2,-32696(gp)
2008067c:	103ffe26 	beq	r2,zero,20080678 <__flash_rwdata_start+0xfffee87c>

	alt_dcache_flush_all();
20080680:	008cefc0 	call	2008cefc <alt_dcache_flush_all>
//  //	  alt_dcache_flush_all();
//    }
//    printf("\n");


  return 0;
20080684:	0005883a 	mov	r2,zero
}
20080688:	e037883a 	mov	sp,fp
2008068c:	dfc00117 	ldw	ra,4(sp)
20080690:	df000017 	ldw	fp,0(sp)
20080694:	dec00204 	addi	sp,sp,8
20080698:	f800283a 	ret

2008069c <exit>:
2008069c:	defffe04 	addi	sp,sp,-8
200806a0:	000b883a 	mov	r5,zero
200806a4:	dc000015 	stw	r16,0(sp)
200806a8:	dfc00115 	stw	ra,4(sp)
200806ac:	2021883a 	mov	r16,r4
200806b0:	00832580 	call	20083258 <__call_exitprocs>
200806b4:	00800034 	movhi	r2,0
200806b8:	10894f04 	addi	r2,r2,9532
200806bc:	11000017 	ldw	r4,0(r2)
200806c0:	20800f17 	ldw	r2,60(r4)
200806c4:	10000126 	beq	r2,zero,200806cc <exit+0x30>
200806c8:	103ee83a 	callr	r2
200806cc:	8009883a 	mov	r4,r16
200806d0:	008cf6c0 	call	2008cf6c <_exit>

200806d4 <malloc>:
200806d4:	00800034 	movhi	r2,0
200806d8:	10895004 	addi	r2,r2,9536
200806dc:	200b883a 	mov	r5,r4
200806e0:	11000017 	ldw	r4,0(r2)
200806e4:	00806fc1 	jmpi	200806fc <_malloc_r>

200806e8 <free>:
200806e8:	00800034 	movhi	r2,0
200806ec:	10895004 	addi	r2,r2,9536
200806f0:	200b883a 	mov	r5,r4
200806f4:	11000017 	ldw	r4,0(r2)
200806f8:	008546c1 	jmpi	2008546c <_free_r>

200806fc <_malloc_r>:
200806fc:	defff504 	addi	sp,sp,-44
20080700:	dc800315 	stw	r18,12(sp)
20080704:	dfc00a15 	stw	ra,40(sp)
20080708:	df000915 	stw	fp,36(sp)
2008070c:	ddc00815 	stw	r23,32(sp)
20080710:	dd800715 	stw	r22,28(sp)
20080714:	dd400615 	stw	r21,24(sp)
20080718:	dd000515 	stw	r20,20(sp)
2008071c:	dcc00415 	stw	r19,16(sp)
20080720:	dc400215 	stw	r17,8(sp)
20080724:	dc000115 	stw	r16,4(sp)
20080728:	288002c4 	addi	r2,r5,11
2008072c:	00c00584 	movi	r3,22
20080730:	2025883a 	mov	r18,r4
20080734:	18802a2e 	bgeu	r3,r2,200807e0 <_malloc_r+0xe4>
20080738:	047ffe04 	movi	r17,-8
2008073c:	1462703a 	and	r17,r2,r17
20080740:	88009e16 	blt	r17,zero,200809bc <_malloc_r+0x2c0>
20080744:	89409d36 	bltu	r17,r5,200809bc <_malloc_r+0x2c0>
20080748:	008d4140 	call	2008d414 <__malloc_lock>
2008074c:	00807dc4 	movi	r2,503
20080750:	14402736 	bltu	r2,r17,200807f0 <_malloc_r+0xf4>
20080754:	8806d0fa 	srli	r3,r17,3
20080758:	04c00034 	movhi	r19,0
2008075c:	9cc30504 	addi	r19,r19,3092
20080760:	18c5883a 	add	r2,r3,r3
20080764:	1085883a 	add	r2,r2,r2
20080768:	1085883a 	add	r2,r2,r2
2008076c:	9885883a 	add	r2,r19,r2
20080770:	14000317 	ldw	r16,12(r2)
20080774:	80814a26 	beq	r16,r2,20080ca0 <_malloc_r+0x5a4>
20080778:	80c00117 	ldw	r3,4(r16)
2008077c:	81000317 	ldw	r4,12(r16)
20080780:	00bfff04 	movi	r2,-4
20080784:	1884703a 	and	r2,r3,r2
20080788:	81400217 	ldw	r5,8(r16)
2008078c:	8085883a 	add	r2,r16,r2
20080790:	10c00117 	ldw	r3,4(r2)
20080794:	29000315 	stw	r4,12(r5)
20080798:	21400215 	stw	r5,8(r4)
2008079c:	18c00054 	ori	r3,r3,1
200807a0:	10c00115 	stw	r3,4(r2)
200807a4:	9009883a 	mov	r4,r18
200807a8:	008d4340 	call	2008d434 <__malloc_unlock>
200807ac:	80800204 	addi	r2,r16,8
200807b0:	dfc00a17 	ldw	ra,40(sp)
200807b4:	df000917 	ldw	fp,36(sp)
200807b8:	ddc00817 	ldw	r23,32(sp)
200807bc:	dd800717 	ldw	r22,28(sp)
200807c0:	dd400617 	ldw	r21,24(sp)
200807c4:	dd000517 	ldw	r20,20(sp)
200807c8:	dcc00417 	ldw	r19,16(sp)
200807cc:	dc800317 	ldw	r18,12(sp)
200807d0:	dc400217 	ldw	r17,8(sp)
200807d4:	dc000117 	ldw	r16,4(sp)
200807d8:	dec00b04 	addi	sp,sp,44
200807dc:	f800283a 	ret
200807e0:	04400404 	movi	r17,16
200807e4:	89407536 	bltu	r17,r5,200809bc <_malloc_r+0x2c0>
200807e8:	008d4140 	call	2008d414 <__malloc_lock>
200807ec:	003fd906 	br	20080754 <__flash_rwdata_start+0xfffee958>
200807f0:	8806d27a 	srli	r3,r17,9
200807f4:	18007526 	beq	r3,zero,200809cc <_malloc_r+0x2d0>
200807f8:	00800104 	movi	r2,4
200807fc:	10c0ef36 	bltu	r2,r3,20080bbc <_malloc_r+0x4c0>
20080800:	8806d1ba 	srli	r3,r17,6
20080804:	19c00e04 	addi	r7,r3,56
20080808:	39cb883a 	add	r5,r7,r7
2008080c:	04c00034 	movhi	r19,0
20080810:	294b883a 	add	r5,r5,r5
20080814:	9cc30504 	addi	r19,r19,3092
20080818:	294b883a 	add	r5,r5,r5
2008081c:	994b883a 	add	r5,r19,r5
20080820:	2c000317 	ldw	r16,12(r5)
20080824:	2c000e26 	beq	r5,r16,20080860 <_malloc_r+0x164>
20080828:	80800117 	ldw	r2,4(r16)
2008082c:	01bfff04 	movi	r6,-4
20080830:	010003c4 	movi	r4,15
20080834:	1184703a 	and	r2,r2,r6
20080838:	1447c83a 	sub	r3,r2,r17
2008083c:	20c00716 	blt	r4,r3,2008085c <_malloc_r+0x160>
20080840:	1800650e 	bge	r3,zero,200809d8 <_malloc_r+0x2dc>
20080844:	84000317 	ldw	r16,12(r16)
20080848:	2c000526 	beq	r5,r16,20080860 <_malloc_r+0x164>
2008084c:	80800117 	ldw	r2,4(r16)
20080850:	1184703a 	and	r2,r2,r6
20080854:	1447c83a 	sub	r3,r2,r17
20080858:	20fff90e 	bge	r4,r3,20080840 <__flash_rwdata_start+0xfffeea44>
2008085c:	39ffffc4 	addi	r7,r7,-1
20080860:	38c00044 	addi	r3,r7,1
20080864:	01800034 	movhi	r6,0
20080868:	9c000417 	ldw	r16,16(r19)
2008086c:	31830504 	addi	r6,r6,3092
20080870:	32400204 	addi	r9,r6,8
20080874:	82410326 	beq	r16,r9,20080c84 <_malloc_r+0x588>
20080878:	81000117 	ldw	r4,4(r16)
2008087c:	00bfff04 	movi	r2,-4
20080880:	208e703a 	and	r7,r4,r2
20080884:	3c45c83a 	sub	r2,r7,r17
20080888:	010003c4 	movi	r4,15
2008088c:	2080ee16 	blt	r4,r2,20080c48 <_malloc_r+0x54c>
20080890:	32400515 	stw	r9,20(r6)
20080894:	32400415 	stw	r9,16(r6)
20080898:	1000510e 	bge	r2,zero,200809e0 <_malloc_r+0x2e4>
2008089c:	00807fc4 	movi	r2,511
200808a0:	11c0ce36 	bltu	r2,r7,20080bdc <_malloc_r+0x4e0>
200808a4:	3808d0fa 	srli	r4,r7,3
200808a8:	01c00044 	movi	r7,1
200808ac:	30800117 	ldw	r2,4(r6)
200808b0:	210b883a 	add	r5,r4,r4
200808b4:	294b883a 	add	r5,r5,r5
200808b8:	2009d0ba 	srai	r4,r4,2
200808bc:	294b883a 	add	r5,r5,r5
200808c0:	298b883a 	add	r5,r5,r6
200808c4:	2a000217 	ldw	r8,8(r5)
200808c8:	3908983a 	sll	r4,r7,r4
200808cc:	81400315 	stw	r5,12(r16)
200808d0:	82000215 	stw	r8,8(r16)
200808d4:	2088b03a 	or	r4,r4,r2
200808d8:	2c000215 	stw	r16,8(r5)
200808dc:	31000115 	stw	r4,4(r6)
200808e0:	44000315 	stw	r16,12(r8)
200808e4:	1805d0ba 	srai	r2,r3,2
200808e8:	01400044 	movi	r5,1
200808ec:	288a983a 	sll	r5,r5,r2
200808f0:	21404336 	bltu	r4,r5,20080a00 <_malloc_r+0x304>
200808f4:	2144703a 	and	r2,r4,r5
200808f8:	10000a1e 	bne	r2,zero,20080924 <_malloc_r+0x228>
200808fc:	00bfff04 	movi	r2,-4
20080900:	294b883a 	add	r5,r5,r5
20080904:	1886703a 	and	r3,r3,r2
20080908:	2144703a 	and	r2,r4,r5
2008090c:	18c00104 	addi	r3,r3,4
20080910:	1000041e 	bne	r2,zero,20080924 <_malloc_r+0x228>
20080914:	294b883a 	add	r5,r5,r5
20080918:	2144703a 	and	r2,r4,r5
2008091c:	18c00104 	addi	r3,r3,4
20080920:	103ffc26 	beq	r2,zero,20080914 <__flash_rwdata_start+0xfffeeb18>
20080924:	023fff04 	movi	r8,-4
20080928:	01c003c4 	movi	r7,15
2008092c:	18c5883a 	add	r2,r3,r3
20080930:	1085883a 	add	r2,r2,r2
20080934:	1085883a 	add	r2,r2,r2
20080938:	9895883a 	add	r10,r19,r2
2008093c:	52c00304 	addi	r11,r10,12
20080940:	1819883a 	mov	r12,r3
20080944:	5c000017 	ldw	r16,0(r11)
20080948:	59bffd04 	addi	r6,r11,-12
2008094c:	8180041e 	bne	r16,r6,20080960 <_malloc_r+0x264>
20080950:	0000ce06 	br	20080c8c <_malloc_r+0x590>
20080954:	2000d70e 	bge	r4,zero,20080cb4 <_malloc_r+0x5b8>
20080958:	84000317 	ldw	r16,12(r16)
2008095c:	8180cb26 	beq	r16,r6,20080c8c <_malloc_r+0x590>
20080960:	80800117 	ldw	r2,4(r16)
20080964:	1204703a 	and	r2,r2,r8
20080968:	1449c83a 	sub	r4,r2,r17
2008096c:	393ff90e 	bge	r7,r4,20080954 <__flash_rwdata_start+0xfffeeb58>
20080970:	80800317 	ldw	r2,12(r16)
20080974:	80c00217 	ldw	r3,8(r16)
20080978:	89400054 	ori	r5,r17,1
2008097c:	81400115 	stw	r5,4(r16)
20080980:	18800315 	stw	r2,12(r3)
20080984:	10c00215 	stw	r3,8(r2)
20080988:	8463883a 	add	r17,r16,r17
2008098c:	9c400515 	stw	r17,20(r19)
20080990:	9c400415 	stw	r17,16(r19)
20080994:	20800054 	ori	r2,r4,1
20080998:	88800115 	stw	r2,4(r17)
2008099c:	8a400315 	stw	r9,12(r17)
200809a0:	8a400215 	stw	r9,8(r17)
200809a4:	8923883a 	add	r17,r17,r4
200809a8:	89000015 	stw	r4,0(r17)
200809ac:	9009883a 	mov	r4,r18
200809b0:	008d4340 	call	2008d434 <__malloc_unlock>
200809b4:	80800204 	addi	r2,r16,8
200809b8:	003f7d06 	br	200807b0 <__flash_rwdata_start+0xfffee9b4>
200809bc:	00800304 	movi	r2,12
200809c0:	90800015 	stw	r2,0(r18)
200809c4:	0005883a 	mov	r2,zero
200809c8:	003f7906 	br	200807b0 <__flash_rwdata_start+0xfffee9b4>
200809cc:	01401f84 	movi	r5,126
200809d0:	01c00fc4 	movi	r7,63
200809d4:	003f8d06 	br	2008080c <__flash_rwdata_start+0xfffeea10>
200809d8:	81000317 	ldw	r4,12(r16)
200809dc:	003f6a06 	br	20080788 <__flash_rwdata_start+0xfffee98c>
200809e0:	81c5883a 	add	r2,r16,r7
200809e4:	10c00117 	ldw	r3,4(r2)
200809e8:	9009883a 	mov	r4,r18
200809ec:	18c00054 	ori	r3,r3,1
200809f0:	10c00115 	stw	r3,4(r2)
200809f4:	008d4340 	call	2008d434 <__malloc_unlock>
200809f8:	80800204 	addi	r2,r16,8
200809fc:	003f6c06 	br	200807b0 <__flash_rwdata_start+0xfffee9b4>
20080a00:	9c000217 	ldw	r16,8(r19)
20080a04:	00bfff04 	movi	r2,-4
20080a08:	85800117 	ldw	r22,4(r16)
20080a0c:	b0ac703a 	and	r22,r22,r2
20080a10:	b4400336 	bltu	r22,r17,20080a20 <_malloc_r+0x324>
20080a14:	b445c83a 	sub	r2,r22,r17
20080a18:	00c003c4 	movi	r3,15
20080a1c:	18805d16 	blt	r3,r2,20080b94 <_malloc_r+0x498>
20080a20:	05c00034 	movhi	r23,0
20080a24:	00800034 	movhi	r2,0
20080a28:	bdc95104 	addi	r23,r23,9540
20080a2c:	10896404 	addi	r2,r2,9616
20080a30:	15400017 	ldw	r21,0(r2)
20080a34:	b9000017 	ldw	r4,0(r23)
20080a38:	00ffffc4 	movi	r3,-1
20080a3c:	858d883a 	add	r6,r16,r22
20080a40:	8d6b883a 	add	r21,r17,r21
20080a44:	20c0e426 	beq	r4,r3,20080dd8 <_malloc_r+0x6dc>
20080a48:	ad4403c4 	addi	r21,r21,4111
20080a4c:	00fc0004 	movi	r3,-4096
20080a50:	a8ea703a 	and	r21,r21,r3
20080a54:	9009883a 	mov	r4,r18
20080a58:	a80b883a 	mov	r5,r21
20080a5c:	d9800015 	stw	r6,0(sp)
20080a60:	0080fe80 	call	20080fe8 <_sbrk_r>
20080a64:	00ffffc4 	movi	r3,-1
20080a68:	1029883a 	mov	r20,r2
20080a6c:	d9800017 	ldw	r6,0(sp)
20080a70:	10c0a426 	beq	r2,r3,20080d04 <_malloc_r+0x608>
20080a74:	1180a236 	bltu	r2,r6,20080d00 <_malloc_r+0x604>
20080a78:	07000034 	movhi	fp,0
20080a7c:	e7097004 	addi	fp,fp,9664
20080a80:	e0c00017 	ldw	r3,0(fp)
20080a84:	a8c7883a 	add	r3,r21,r3
20080a88:	e0c00015 	stw	r3,0(fp)
20080a8c:	3500da26 	beq	r6,r20,20080df8 <_malloc_r+0x6fc>
20080a90:	b9000017 	ldw	r4,0(r23)
20080a94:	00bfffc4 	movi	r2,-1
20080a98:	2080e426 	beq	r4,r2,20080e2c <_malloc_r+0x730>
20080a9c:	a185c83a 	sub	r2,r20,r6
20080aa0:	1885883a 	add	r2,r3,r2
20080aa4:	e0800015 	stw	r2,0(fp)
20080aa8:	a0c001cc 	andi	r3,r20,7
20080aac:	1800b526 	beq	r3,zero,20080d84 <_malloc_r+0x688>
20080ab0:	a0e9c83a 	sub	r20,r20,r3
20080ab4:	00840204 	movi	r2,4104
20080ab8:	a5000204 	addi	r20,r20,8
20080abc:	10c7c83a 	sub	r3,r2,r3
20080ac0:	a545883a 	add	r2,r20,r21
20080ac4:	1083ffcc 	andi	r2,r2,4095
20080ac8:	18abc83a 	sub	r21,r3,r2
20080acc:	9009883a 	mov	r4,r18
20080ad0:	a80b883a 	mov	r5,r21
20080ad4:	0080fe80 	call	20080fe8 <_sbrk_r>
20080ad8:	00ffffc4 	movi	r3,-1
20080adc:	10c0d026 	beq	r2,r3,20080e20 <_malloc_r+0x724>
20080ae0:	1507c83a 	sub	r3,r2,r20
20080ae4:	a8c7883a 	add	r3,r21,r3
20080ae8:	18c00054 	ori	r3,r3,1
20080aec:	e0800017 	ldw	r2,0(fp)
20080af0:	9d000215 	stw	r20,8(r19)
20080af4:	a0c00115 	stw	r3,4(r20)
20080af8:	a887883a 	add	r3,r21,r2
20080afc:	e0c00015 	stw	r3,0(fp)
20080b00:	84c00e26 	beq	r16,r19,20080b3c <_malloc_r+0x440>
20080b04:	018003c4 	movi	r6,15
20080b08:	3580a02e 	bgeu	r6,r22,20080d8c <_malloc_r+0x690>
20080b0c:	81400117 	ldw	r5,4(r16)
20080b10:	013ffe04 	movi	r4,-8
20080b14:	b0bffd04 	addi	r2,r22,-12
20080b18:	1104703a 	and	r2,r2,r4
20080b1c:	2900004c 	andi	r4,r5,1
20080b20:	1108b03a 	or	r4,r2,r4
20080b24:	81000115 	stw	r4,4(r16)
20080b28:	01400144 	movi	r5,5
20080b2c:	8089883a 	add	r4,r16,r2
20080b30:	21400115 	stw	r5,4(r4)
20080b34:	21400215 	stw	r5,8(r4)
20080b38:	3080c036 	bltu	r6,r2,20080e3c <_malloc_r+0x740>
20080b3c:	00800034 	movhi	r2,0
20080b40:	10896304 	addi	r2,r2,9612
20080b44:	11000017 	ldw	r4,0(r2)
20080b48:	20c0012e 	bgeu	r4,r3,20080b50 <_malloc_r+0x454>
20080b4c:	10c00015 	stw	r3,0(r2)
20080b50:	00800034 	movhi	r2,0
20080b54:	10896204 	addi	r2,r2,9608
20080b58:	11000017 	ldw	r4,0(r2)
20080b5c:	9c000217 	ldw	r16,8(r19)
20080b60:	20c0012e 	bgeu	r4,r3,20080b68 <_malloc_r+0x46c>
20080b64:	10c00015 	stw	r3,0(r2)
20080b68:	80c00117 	ldw	r3,4(r16)
20080b6c:	00bfff04 	movi	r2,-4
20080b70:	1886703a 	and	r3,r3,r2
20080b74:	1c45c83a 	sub	r2,r3,r17
20080b78:	1c400236 	bltu	r3,r17,20080b84 <_malloc_r+0x488>
20080b7c:	00c003c4 	movi	r3,15
20080b80:	18800416 	blt	r3,r2,20080b94 <_malloc_r+0x498>
20080b84:	9009883a 	mov	r4,r18
20080b88:	008d4340 	call	2008d434 <__malloc_unlock>
20080b8c:	0005883a 	mov	r2,zero
20080b90:	003f0706 	br	200807b0 <__flash_rwdata_start+0xfffee9b4>
20080b94:	88c00054 	ori	r3,r17,1
20080b98:	80c00115 	stw	r3,4(r16)
20080b9c:	8463883a 	add	r17,r16,r17
20080ba0:	10800054 	ori	r2,r2,1
20080ba4:	9c400215 	stw	r17,8(r19)
20080ba8:	88800115 	stw	r2,4(r17)
20080bac:	9009883a 	mov	r4,r18
20080bb0:	008d4340 	call	2008d434 <__malloc_unlock>
20080bb4:	80800204 	addi	r2,r16,8
20080bb8:	003efd06 	br	200807b0 <__flash_rwdata_start+0xfffee9b4>
20080bbc:	00800504 	movi	r2,20
20080bc0:	10c0482e 	bgeu	r2,r3,20080ce4 <_malloc_r+0x5e8>
20080bc4:	00801504 	movi	r2,84
20080bc8:	10c06836 	bltu	r2,r3,20080d6c <_malloc_r+0x670>
20080bcc:	8806d33a 	srli	r3,r17,12
20080bd0:	19c01b84 	addi	r7,r3,110
20080bd4:	39cb883a 	add	r5,r7,r7
20080bd8:	003f0c06 	br	2008080c <__flash_rwdata_start+0xfffeea10>
20080bdc:	3804d27a 	srli	r2,r7,9
20080be0:	01000104 	movi	r4,4
20080be4:	2080422e 	bgeu	r4,r2,20080cf0 <_malloc_r+0x5f4>
20080be8:	01000504 	movi	r4,20
20080bec:	20807c36 	bltu	r4,r2,20080de0 <_malloc_r+0x6e4>
20080bf0:	110016c4 	addi	r4,r2,91
20080bf4:	210b883a 	add	r5,r4,r4
20080bf8:	294b883a 	add	r5,r5,r5
20080bfc:	294b883a 	add	r5,r5,r5
20080c00:	994b883a 	add	r5,r19,r5
20080c04:	28800217 	ldw	r2,8(r5)
20080c08:	02000034 	movhi	r8,0
20080c0c:	42030504 	addi	r8,r8,3092
20080c10:	11406326 	beq	r2,r5,20080da0 <_malloc_r+0x6a4>
20080c14:	01bfff04 	movi	r6,-4
20080c18:	11000117 	ldw	r4,4(r2)
20080c1c:	2188703a 	and	r4,r4,r6
20080c20:	3900022e 	bgeu	r7,r4,20080c2c <_malloc_r+0x530>
20080c24:	10800217 	ldw	r2,8(r2)
20080c28:	28bffb1e 	bne	r5,r2,20080c18 <__flash_rwdata_start+0xfffeee1c>
20080c2c:	11800317 	ldw	r6,12(r2)
20080c30:	99000117 	ldw	r4,4(r19)
20080c34:	81800315 	stw	r6,12(r16)
20080c38:	80800215 	stw	r2,8(r16)
20080c3c:	34000215 	stw	r16,8(r6)
20080c40:	14000315 	stw	r16,12(r2)
20080c44:	003f2706 	br	200808e4 <__flash_rwdata_start+0xfffeeae8>
20080c48:	88c00054 	ori	r3,r17,1
20080c4c:	80c00115 	stw	r3,4(r16)
20080c50:	8463883a 	add	r17,r16,r17
20080c54:	34400515 	stw	r17,20(r6)
20080c58:	34400415 	stw	r17,16(r6)
20080c5c:	10c00054 	ori	r3,r2,1
20080c60:	8a400315 	stw	r9,12(r17)
20080c64:	8a400215 	stw	r9,8(r17)
20080c68:	88c00115 	stw	r3,4(r17)
20080c6c:	88a3883a 	add	r17,r17,r2
20080c70:	88800015 	stw	r2,0(r17)
20080c74:	9009883a 	mov	r4,r18
20080c78:	008d4340 	call	2008d434 <__malloc_unlock>
20080c7c:	80800204 	addi	r2,r16,8
20080c80:	003ecb06 	br	200807b0 <__flash_rwdata_start+0xfffee9b4>
20080c84:	31000117 	ldw	r4,4(r6)
20080c88:	003f1606 	br	200808e4 <__flash_rwdata_start+0xfffeeae8>
20080c8c:	63000044 	addi	r12,r12,1
20080c90:	608000cc 	andi	r2,r12,3
20080c94:	5ac00204 	addi	r11,r11,8
20080c98:	103f2a1e 	bne	r2,zero,20080944 <__flash_rwdata_start+0xfffeeb48>
20080c9c:	00002106 	br	20080d24 <_malloc_r+0x628>
20080ca0:	80800204 	addi	r2,r16,8
20080ca4:	84000517 	ldw	r16,20(r16)
20080ca8:	143eb31e 	bne	r2,r16,20080778 <__flash_rwdata_start+0xfffee97c>
20080cac:	18c00084 	addi	r3,r3,2
20080cb0:	003eec06 	br	20080864 <__flash_rwdata_start+0xfffeea68>
20080cb4:	8085883a 	add	r2,r16,r2
20080cb8:	10c00117 	ldw	r3,4(r2)
20080cbc:	81000317 	ldw	r4,12(r16)
20080cc0:	81400217 	ldw	r5,8(r16)
20080cc4:	18c00054 	ori	r3,r3,1
20080cc8:	10c00115 	stw	r3,4(r2)
20080ccc:	29000315 	stw	r4,12(r5)
20080cd0:	21400215 	stw	r5,8(r4)
20080cd4:	9009883a 	mov	r4,r18
20080cd8:	008d4340 	call	2008d434 <__malloc_unlock>
20080cdc:	80800204 	addi	r2,r16,8
20080ce0:	003eb306 	br	200807b0 <__flash_rwdata_start+0xfffee9b4>
20080ce4:	19c016c4 	addi	r7,r3,91
20080ce8:	39cb883a 	add	r5,r7,r7
20080cec:	003ec706 	br	2008080c <__flash_rwdata_start+0xfffeea10>
20080cf0:	3804d1ba 	srli	r2,r7,6
20080cf4:	11000e04 	addi	r4,r2,56
20080cf8:	210b883a 	add	r5,r4,r4
20080cfc:	003fbe06 	br	20080bf8 <__flash_rwdata_start+0xfffeedfc>
20080d00:	84ff5d26 	beq	r16,r19,20080a78 <__flash_rwdata_start+0xfffeec7c>
20080d04:	9c000217 	ldw	r16,8(r19)
20080d08:	00bfff04 	movi	r2,-4
20080d0c:	80c00117 	ldw	r3,4(r16)
20080d10:	1886703a 	and	r3,r3,r2
20080d14:	003f9706 	br	20080b74 <__flash_rwdata_start+0xfffeed78>
20080d18:	52800017 	ldw	r10,0(r10)
20080d1c:	18ffffc4 	addi	r3,r3,-1
20080d20:	50805c1e 	bne	r10,r2,20080e94 <_malloc_r+0x798>
20080d24:	190000cc 	andi	r4,r3,3
20080d28:	50bffe04 	addi	r2,r10,-8
20080d2c:	203ffa1e 	bne	r4,zero,20080d18 <__flash_rwdata_start+0xfffeef1c>
20080d30:	98800117 	ldw	r2,4(r19)
20080d34:	0146303a 	nor	r3,zero,r5
20080d38:	1884703a 	and	r2,r3,r2
20080d3c:	98800115 	stw	r2,4(r19)
20080d40:	294b883a 	add	r5,r5,r5
20080d44:	117f2e36 	bltu	r2,r5,20080a00 <__flash_rwdata_start+0xfffeec04>
20080d48:	283f2d26 	beq	r5,zero,20080a00 <__flash_rwdata_start+0xfffeec04>
20080d4c:	1146703a 	and	r3,r2,r5
20080d50:	1800521e 	bne	r3,zero,20080e9c <_malloc_r+0x7a0>
20080d54:	6007883a 	mov	r3,r12
20080d58:	294b883a 	add	r5,r5,r5
20080d5c:	1148703a 	and	r4,r2,r5
20080d60:	18c00104 	addi	r3,r3,4
20080d64:	203ffc26 	beq	r4,zero,20080d58 <__flash_rwdata_start+0xfffeef5c>
20080d68:	003ef006 	br	2008092c <__flash_rwdata_start+0xfffeeb30>
20080d6c:	00805504 	movi	r2,340
20080d70:	10c01336 	bltu	r2,r3,20080dc0 <_malloc_r+0x6c4>
20080d74:	8806d3fa 	srli	r3,r17,15
20080d78:	19c01dc4 	addi	r7,r3,119
20080d7c:	39cb883a 	add	r5,r7,r7
20080d80:	003ea206 	br	2008080c <__flash_rwdata_start+0xfffeea10>
20080d84:	00c40004 	movi	r3,4096
20080d88:	003f4d06 	br	20080ac0 <__flash_rwdata_start+0xfffeecc4>
20080d8c:	00800044 	movi	r2,1
20080d90:	a0800115 	stw	r2,4(r20)
20080d94:	a021883a 	mov	r16,r20
20080d98:	0007883a 	mov	r3,zero
20080d9c:	003f7506 	br	20080b74 <__flash_rwdata_start+0xfffeed78>
20080da0:	200bd0ba 	srai	r5,r4,2
20080da4:	01800044 	movi	r6,1
20080da8:	41000117 	ldw	r4,4(r8)
20080dac:	314a983a 	sll	r5,r6,r5
20080db0:	100d883a 	mov	r6,r2
20080db4:	2908b03a 	or	r4,r5,r4
20080db8:	41000115 	stw	r4,4(r8)
20080dbc:	003f9d06 	br	20080c34 <__flash_rwdata_start+0xfffeee38>
20080dc0:	00815504 	movi	r2,1364
20080dc4:	10c01336 	bltu	r2,r3,20080e14 <_malloc_r+0x718>
20080dc8:	8806d4ba 	srli	r3,r17,18
20080dcc:	19c01f04 	addi	r7,r3,124
20080dd0:	39cb883a 	add	r5,r7,r7
20080dd4:	003e8d06 	br	2008080c <__flash_rwdata_start+0xfffeea10>
20080dd8:	ad400404 	addi	r21,r21,16
20080ddc:	003f1d06 	br	20080a54 <__flash_rwdata_start+0xfffeec58>
20080de0:	01001504 	movi	r4,84
20080de4:	20801c36 	bltu	r4,r2,20080e58 <_malloc_r+0x75c>
20080de8:	3804d33a 	srli	r2,r7,12
20080dec:	11001b84 	addi	r4,r2,110
20080df0:	210b883a 	add	r5,r4,r4
20080df4:	003f8006 	br	20080bf8 <__flash_rwdata_start+0xfffeedfc>
20080df8:	3083ffcc 	andi	r2,r6,4095
20080dfc:	103f241e 	bne	r2,zero,20080a90 <__flash_rwdata_start+0xfffeec94>
20080e00:	99000217 	ldw	r4,8(r19)
20080e04:	ad85883a 	add	r2,r21,r22
20080e08:	10800054 	ori	r2,r2,1
20080e0c:	20800115 	stw	r2,4(r4)
20080e10:	003f4a06 	br	20080b3c <__flash_rwdata_start+0xfffeed40>
20080e14:	01403f04 	movi	r5,252
20080e18:	01c01f84 	movi	r7,126
20080e1c:	003e7b06 	br	2008080c <__flash_rwdata_start+0xfffeea10>
20080e20:	00c00044 	movi	r3,1
20080e24:	002b883a 	mov	r21,zero
20080e28:	003f3006 	br	20080aec <__flash_rwdata_start+0xfffeecf0>
20080e2c:	00800034 	movhi	r2,0
20080e30:	10895104 	addi	r2,r2,9540
20080e34:	15000015 	stw	r20,0(r2)
20080e38:	003f1b06 	br	20080aa8 <__flash_rwdata_start+0xfffeecac>
20080e3c:	9009883a 	mov	r4,r18
20080e40:	81400204 	addi	r5,r16,8
20080e44:	008546c0 	call	2008546c <_free_r>
20080e48:	00800034 	movhi	r2,0
20080e4c:	10897004 	addi	r2,r2,9664
20080e50:	10c00017 	ldw	r3,0(r2)
20080e54:	003f3906 	br	20080b3c <__flash_rwdata_start+0xfffeed40>
20080e58:	01005504 	movi	r4,340
20080e5c:	20800436 	bltu	r4,r2,20080e70 <_malloc_r+0x774>
20080e60:	3804d3fa 	srli	r2,r7,15
20080e64:	11001dc4 	addi	r4,r2,119
20080e68:	210b883a 	add	r5,r4,r4
20080e6c:	003f6206 	br	20080bf8 <__flash_rwdata_start+0xfffeedfc>
20080e70:	01015504 	movi	r4,1364
20080e74:	20800436 	bltu	r4,r2,20080e88 <_malloc_r+0x78c>
20080e78:	3804d4ba 	srli	r2,r7,18
20080e7c:	11001f04 	addi	r4,r2,124
20080e80:	210b883a 	add	r5,r4,r4
20080e84:	003f5c06 	br	20080bf8 <__flash_rwdata_start+0xfffeedfc>
20080e88:	01403f04 	movi	r5,252
20080e8c:	01001f84 	movi	r4,126
20080e90:	003f5906 	br	20080bf8 <__flash_rwdata_start+0xfffeedfc>
20080e94:	98800117 	ldw	r2,4(r19)
20080e98:	003fa906 	br	20080d40 <__flash_rwdata_start+0xfffeef44>
20080e9c:	6007883a 	mov	r3,r12
20080ea0:	003ea206 	br	2008092c <__flash_rwdata_start+0xfffeeb30>

20080ea4 <_printf_r>:
20080ea4:	defffd04 	addi	sp,sp,-12
20080ea8:	dfc00015 	stw	ra,0(sp)
20080eac:	d9800115 	stw	r6,4(sp)
20080eb0:	d9c00215 	stw	r7,8(sp)
20080eb4:	280d883a 	mov	r6,r5
20080eb8:	21400217 	ldw	r5,8(r4)
20080ebc:	d9c00104 	addi	r7,sp,4
20080ec0:	00810d40 	call	200810d4 <___vfprintf_internal_r>
20080ec4:	dfc00017 	ldw	ra,0(sp)
20080ec8:	dec00304 	addi	sp,sp,12
20080ecc:	f800283a 	ret

20080ed0 <printf>:
20080ed0:	defffc04 	addi	sp,sp,-16
20080ed4:	dfc00015 	stw	ra,0(sp)
20080ed8:	d9400115 	stw	r5,4(sp)
20080edc:	d9800215 	stw	r6,8(sp)
20080ee0:	d9c00315 	stw	r7,12(sp)
20080ee4:	00800034 	movhi	r2,0
20080ee8:	10895004 	addi	r2,r2,9536
20080eec:	10800017 	ldw	r2,0(r2)
20080ef0:	200b883a 	mov	r5,r4
20080ef4:	d9800104 	addi	r6,sp,4
20080ef8:	11000217 	ldw	r4,8(r2)
20080efc:	00830240 	call	20083024 <__vfprintf_internal>
20080f00:	dfc00017 	ldw	ra,0(sp)
20080f04:	dec00404 	addi	sp,sp,16
20080f08:	f800283a 	ret

20080f0c <_putchar_r>:
20080f0c:	21800217 	ldw	r6,8(r4)
20080f10:	008747c1 	jmpi	2008747c <_putc_r>

20080f14 <putchar>:
20080f14:	00800034 	movhi	r2,0
20080f18:	10895004 	addi	r2,r2,9536
20080f1c:	200b883a 	mov	r5,r4
20080f20:	11000017 	ldw	r4,0(r2)
20080f24:	21800217 	ldw	r6,8(r4)
20080f28:	008747c1 	jmpi	2008747c <_putc_r>

20080f2c <_puts_r>:
20080f2c:	defff604 	addi	sp,sp,-40
20080f30:	dc000715 	stw	r16,28(sp)
20080f34:	2021883a 	mov	r16,r4
20080f38:	2809883a 	mov	r4,r5
20080f3c:	dc400815 	stw	r17,32(sp)
20080f40:	dfc00915 	stw	ra,36(sp)
20080f44:	2823883a 	mov	r17,r5
20080f48:	008103c0 	call	2008103c <strlen>
20080f4c:	81400217 	ldw	r5,8(r16)
20080f50:	11000044 	addi	r4,r2,1
20080f54:	d8800115 	stw	r2,4(sp)
20080f58:	00800034 	movhi	r2,0
20080f5c:	2980030b 	ldhu	r6,12(r5)
20080f60:	10801a04 	addi	r2,r2,104
20080f64:	d8800215 	stw	r2,8(sp)
20080f68:	00800044 	movi	r2,1
20080f6c:	d8800315 	stw	r2,12(sp)
20080f70:	00800084 	movi	r2,2
20080f74:	d8800515 	stw	r2,20(sp)
20080f78:	dc400015 	stw	r17,0(sp)
20080f7c:	d9000615 	stw	r4,24(sp)
20080f80:	dec00415 	stw	sp,16(sp)
20080f84:	3088000c 	andi	r2,r6,8192
20080f88:	1000061e 	bne	r2,zero,20080fa4 <_puts_r+0x78>
20080f8c:	29001917 	ldw	r4,100(r5)
20080f90:	00b7ffc4 	movi	r2,-8193
20080f94:	31880014 	ori	r6,r6,8192
20080f98:	2084703a 	and	r2,r4,r2
20080f9c:	2980030d 	sth	r6,12(r5)
20080fa0:	28801915 	stw	r2,100(r5)
20080fa4:	8009883a 	mov	r4,r16
20080fa8:	d9800404 	addi	r6,sp,16
20080fac:	008575c0 	call	2008575c <__sfvwrite_r>
20080fb0:	1000061e 	bne	r2,zero,20080fcc <_puts_r+0xa0>
20080fb4:	00800284 	movi	r2,10
20080fb8:	dfc00917 	ldw	ra,36(sp)
20080fbc:	dc400817 	ldw	r17,32(sp)
20080fc0:	dc000717 	ldw	r16,28(sp)
20080fc4:	dec00a04 	addi	sp,sp,40
20080fc8:	f800283a 	ret
20080fcc:	00bfffc4 	movi	r2,-1
20080fd0:	003ff906 	br	20080fb8 <__flash_rwdata_start+0xfffef1bc>

20080fd4 <puts>:
20080fd4:	00800034 	movhi	r2,0
20080fd8:	10895004 	addi	r2,r2,9536
20080fdc:	200b883a 	mov	r5,r4
20080fe0:	11000017 	ldw	r4,0(r2)
20080fe4:	0080f2c1 	jmpi	20080f2c <_puts_r>

20080fe8 <_sbrk_r>:
20080fe8:	defffd04 	addi	sp,sp,-12
20080fec:	dc000015 	stw	r16,0(sp)
20080ff0:	04000034 	movhi	r16,0
20080ff4:	dc400115 	stw	r17,4(sp)
20080ff8:	84096504 	addi	r16,r16,9620
20080ffc:	2023883a 	mov	r17,r4
20081000:	2809883a 	mov	r4,r5
20081004:	dfc00215 	stw	ra,8(sp)
20081008:	80000015 	stw	zero,0(r16)
2008100c:	008d6000 	call	2008d600 <sbrk>
20081010:	00ffffc4 	movi	r3,-1
20081014:	10c00526 	beq	r2,r3,2008102c <_sbrk_r+0x44>
20081018:	dfc00217 	ldw	ra,8(sp)
2008101c:	dc400117 	ldw	r17,4(sp)
20081020:	dc000017 	ldw	r16,0(sp)
20081024:	dec00304 	addi	sp,sp,12
20081028:	f800283a 	ret
2008102c:	80c00017 	ldw	r3,0(r16)
20081030:	183ff926 	beq	r3,zero,20081018 <__flash_rwdata_start+0xfffef21c>
20081034:	88c00015 	stw	r3,0(r17)
20081038:	003ff706 	br	20081018 <__flash_rwdata_start+0xfffef21c>

2008103c <strlen>:
2008103c:	208000cc 	andi	r2,r4,3
20081040:	10002026 	beq	r2,zero,200810c4 <strlen+0x88>
20081044:	20800007 	ldb	r2,0(r4)
20081048:	10002026 	beq	r2,zero,200810cc <strlen+0x90>
2008104c:	2005883a 	mov	r2,r4
20081050:	00000206 	br	2008105c <strlen+0x20>
20081054:	10c00007 	ldb	r3,0(r2)
20081058:	18001826 	beq	r3,zero,200810bc <strlen+0x80>
2008105c:	10800044 	addi	r2,r2,1
20081060:	10c000cc 	andi	r3,r2,3
20081064:	183ffb1e 	bne	r3,zero,20081054 <__flash_rwdata_start+0xfffef258>
20081068:	10c00017 	ldw	r3,0(r2)
2008106c:	01ffbff4 	movhi	r7,65279
20081070:	39ffbfc4 	addi	r7,r7,-257
20081074:	00ca303a 	nor	r5,zero,r3
20081078:	01a02074 	movhi	r6,32897
2008107c:	19c7883a 	add	r3,r3,r7
20081080:	31a02004 	addi	r6,r6,-32640
20081084:	1946703a 	and	r3,r3,r5
20081088:	1986703a 	and	r3,r3,r6
2008108c:	1800091e 	bne	r3,zero,200810b4 <strlen+0x78>
20081090:	10800104 	addi	r2,r2,4
20081094:	10c00017 	ldw	r3,0(r2)
20081098:	19cb883a 	add	r5,r3,r7
2008109c:	00c6303a 	nor	r3,zero,r3
200810a0:	28c6703a 	and	r3,r5,r3
200810a4:	1986703a 	and	r3,r3,r6
200810a8:	183ff926 	beq	r3,zero,20081090 <__flash_rwdata_start+0xfffef294>
200810ac:	00000106 	br	200810b4 <strlen+0x78>
200810b0:	10800044 	addi	r2,r2,1
200810b4:	10c00007 	ldb	r3,0(r2)
200810b8:	183ffd1e 	bne	r3,zero,200810b0 <__flash_rwdata_start+0xfffef2b4>
200810bc:	1105c83a 	sub	r2,r2,r4
200810c0:	f800283a 	ret
200810c4:	2005883a 	mov	r2,r4
200810c8:	003fe706 	br	20081068 <__flash_rwdata_start+0xfffef26c>
200810cc:	0005883a 	mov	r2,zero
200810d0:	f800283a 	ret

200810d4 <___vfprintf_internal_r>:
200810d4:	deffb604 	addi	sp,sp,-296
200810d8:	dfc04915 	stw	ra,292(sp)
200810dc:	ddc04715 	stw	r23,284(sp)
200810e0:	dd804615 	stw	r22,280(sp)
200810e4:	282f883a 	mov	r23,r5
200810e8:	202d883a 	mov	r22,r4
200810ec:	d9802a15 	stw	r6,168(sp)
200810f0:	d9c02d15 	stw	r7,180(sp)
200810f4:	df004815 	stw	fp,288(sp)
200810f8:	dd404515 	stw	r21,276(sp)
200810fc:	dd004415 	stw	r20,272(sp)
20081100:	dcc04315 	stw	r19,268(sp)
20081104:	dc804215 	stw	r18,264(sp)
20081108:	dc404115 	stw	r17,260(sp)
2008110c:	dc004015 	stw	r16,256(sp)
20081110:	0085e500 	call	20085e50 <_localeconv_r>
20081114:	10800017 	ldw	r2,0(r2)
20081118:	1009883a 	mov	r4,r2
2008111c:	d8803515 	stw	r2,212(sp)
20081120:	008103c0 	call	2008103c <strlen>
20081124:	d8803815 	stw	r2,224(sp)
20081128:	b0000226 	beq	r22,zero,20081134 <___vfprintf_internal_r+0x60>
2008112c:	b0800e17 	ldw	r2,56(r22)
20081130:	1000e126 	beq	r2,zero,200814b8 <___vfprintf_internal_r+0x3e4>
20081134:	b880030b 	ldhu	r2,12(r23)
20081138:	10c8000c 	andi	r3,r2,8192
2008113c:	1800061e 	bne	r3,zero,20081158 <___vfprintf_internal_r+0x84>
20081140:	b9001917 	ldw	r4,100(r23)
20081144:	00f7ffc4 	movi	r3,-8193
20081148:	10880014 	ori	r2,r2,8192
2008114c:	20c6703a 	and	r3,r4,r3
20081150:	b880030d 	sth	r2,12(r23)
20081154:	b8c01915 	stw	r3,100(r23)
20081158:	10c0020c 	andi	r3,r2,8
2008115c:	1800a726 	beq	r3,zero,200813fc <___vfprintf_internal_r+0x328>
20081160:	b8c00417 	ldw	r3,16(r23)
20081164:	1800a526 	beq	r3,zero,200813fc <___vfprintf_internal_r+0x328>
20081168:	1080068c 	andi	r2,r2,26
2008116c:	00c00284 	movi	r3,10
20081170:	10c0aa26 	beq	r2,r3,2008141c <___vfprintf_internal_r+0x348>
20081174:	dac01e04 	addi	r11,sp,120
20081178:	db001dc4 	addi	r12,sp,119
2008117c:	d8800404 	addi	r2,sp,16
20081180:	05000034 	movhi	r20,0
20081184:	dac02815 	stw	r11,160(sp)
20081188:	5b17c83a 	sub	r11,r11,r12
2008118c:	a5002b84 	addi	r20,r20,174
20081190:	db002915 	stw	r12,164(sp)
20081194:	d8801e15 	stw	r2,120(sp)
20081198:	d8002015 	stw	zero,128(sp)
2008119c:	d8001f15 	stw	zero,124(sp)
200811a0:	d8003315 	stw	zero,204(sp)
200811a4:	d8003715 	stw	zero,220(sp)
200811a8:	d8003915 	stw	zero,228(sp)
200811ac:	1011883a 	mov	r8,r2
200811b0:	d8003b15 	stw	zero,236(sp)
200811b4:	d8003a15 	stw	zero,232(sp)
200811b8:	d8002f15 	stw	zero,188(sp)
200811bc:	dac03c15 	stw	r11,240(sp)
200811c0:	db002a17 	ldw	r12,168(sp)
200811c4:	60800007 	ldb	r2,0(r12)
200811c8:	1000be26 	beq	r2,zero,200814c4 <___vfprintf_internal_r+0x3f0>
200811cc:	00c00944 	movi	r3,37
200811d0:	10c0bc26 	beq	r2,r3,200814c4 <___vfprintf_internal_r+0x3f0>
200811d4:	6021883a 	mov	r16,r12
200811d8:	00000106 	br	200811e0 <___vfprintf_internal_r+0x10c>
200811dc:	10c08426 	beq	r2,r3,200813f0 <___vfprintf_internal_r+0x31c>
200811e0:	84000044 	addi	r16,r16,1
200811e4:	80800007 	ldb	r2,0(r16)
200811e8:	103ffc1e 	bne	r2,zero,200811dc <__flash_rwdata_start+0xfffef3e0>
200811ec:	dac02a17 	ldw	r11,168(sp)
200811f0:	82e3c83a 	sub	r17,r16,r11
200811f4:	88000f26 	beq	r17,zero,20081234 <___vfprintf_internal_r+0x160>
200811f8:	d8c02017 	ldw	r3,128(sp)
200811fc:	d8801f17 	ldw	r2,124(sp)
20081200:	dac02a17 	ldw	r11,168(sp)
20081204:	1c47883a 	add	r3,r3,r17
20081208:	10800044 	addi	r2,r2,1
2008120c:	d8c02015 	stw	r3,128(sp)
20081210:	42c00015 	stw	r11,0(r8)
20081214:	44400115 	stw	r17,4(r8)
20081218:	d8801f15 	stw	r2,124(sp)
2008121c:	00c001c4 	movi	r3,7
20081220:	18809316 	blt	r3,r2,20081470 <___vfprintf_internal_r+0x39c>
20081224:	42000204 	addi	r8,r8,8
20081228:	db002f17 	ldw	r12,188(sp)
2008122c:	6459883a 	add	r12,r12,r17
20081230:	db002f15 	stw	r12,188(sp)
20081234:	80800007 	ldb	r2,0(r16)
20081238:	10009426 	beq	r2,zero,2008148c <___vfprintf_internal_r+0x3b8>
2008123c:	80800044 	addi	r2,r16,1
20081240:	84000047 	ldb	r16,1(r16)
20081244:	d8002785 	stb	zero,158(sp)
20081248:	000d883a 	mov	r6,zero
2008124c:	027fffc4 	movi	r9,-1
20081250:	d8002e15 	stw	zero,184(sp)
20081254:	0023883a 	mov	r17,zero
20081258:	01001604 	movi	r4,88
2008125c:	01400244 	movi	r5,9
20081260:	02800a84 	movi	r10,42
20081264:	01c01b04 	movi	r7,108
20081268:	10c00044 	addi	r3,r2,1
2008126c:	80bff804 	addi	r2,r16,-32
20081270:	2082cd36 	bltu	r4,r2,20081da8 <___vfprintf_internal_r+0xcd4>
20081274:	100490ba 	slli	r2,r2,2
20081278:	02c80234 	movhi	r11,8200
2008127c:	5ac4a304 	addi	r11,r11,4748
20081280:	12c5883a 	add	r2,r2,r11
20081284:	10800017 	ldw	r2,0(r2)
20081288:	1000683a 	jmp	r2
2008128c:	20081bc0 	call	220081bc <__flash_rwdata_start+0x1f763c0>
20081290:	20081da8 	cmpgeui	zero,r4,8310
20081294:	20081da8 	cmpgeui	zero,r4,8310
20081298:	20081d10 	cmplti	zero,r4,8308
2008129c:	20081da8 	cmpgeui	zero,r4,8310
200812a0:	20081da8 	cmpgeui	zero,r4,8310
200812a4:	20081da8 	cmpgeui	zero,r4,8310
200812a8:	20081da8 	cmpgeui	zero,r4,8310
200812ac:	20081da8 	cmpgeui	zero,r4,8310
200812b0:	20081da8 	cmpgeui	zero,r4,8310
200812b4:	20081be0 	cmpeqi	zero,r4,8303
200812b8:	20081c0c 	andi	zero,r4,8304
200812bc:	20081da8 	cmpgeui	zero,r4,8310
200812c0:	200814cc 	andi	zero,r4,8275
200812c4:	200814dc 	xori	zero,r4,8275
200812c8:	20081da8 	cmpgeui	zero,r4,8310
200812cc:	2008151c 	xori	zero,r4,8276
200812d0:	2008152c 	andhi	zero,r4,8276
200812d4:	2008152c 	andhi	zero,r4,8276
200812d8:	2008152c 	andhi	zero,r4,8276
200812dc:	2008152c 	andhi	zero,r4,8276
200812e0:	2008152c 	andhi	zero,r4,8276
200812e4:	2008152c 	andhi	zero,r4,8276
200812e8:	2008152c 	andhi	zero,r4,8276
200812ec:	2008152c 	andhi	zero,r4,8276
200812f0:	2008152c 	andhi	zero,r4,8276
200812f4:	20081da8 	cmpgeui	zero,r4,8310
200812f8:	20081da8 	cmpgeui	zero,r4,8310
200812fc:	20081da8 	cmpgeui	zero,r4,8310
20081300:	20081da8 	cmpgeui	zero,r4,8310
20081304:	20081da8 	cmpgeui	zero,r4,8310
20081308:	20081da8 	cmpgeui	zero,r4,8310
2008130c:	20081da8 	cmpgeui	zero,r4,8310
20081310:	20081da8 	cmpgeui	zero,r4,8310
20081314:	20081da8 	cmpgeui	zero,r4,8310
20081318:	20081da8 	cmpgeui	zero,r4,8310
2008131c:	20081560 	cmpeqi	zero,r4,8277
20081320:	200819d0 	cmplti	zero,r4,8295
20081324:	20081da8 	cmpgeui	zero,r4,8310
20081328:	200819d0 	cmplti	zero,r4,8295
2008132c:	20081da8 	cmpgeui	zero,r4,8310
20081330:	20081da8 	cmpgeui	zero,r4,8310
20081334:	20081da8 	cmpgeui	zero,r4,8310
20081338:	20081da8 	cmpgeui	zero,r4,8310
2008133c:	20081abc 	xorhi	zero,r4,8298
20081340:	20081da8 	cmpgeui	zero,r4,8310
20081344:	20081da8 	cmpgeui	zero,r4,8310
20081348:	20081964 	muli	zero,r4,8293
2008134c:	20081da8 	cmpgeui	zero,r4,8310
20081350:	20081da8 	cmpgeui	zero,r4,8310
20081354:	20081da8 	cmpgeui	zero,r4,8310
20081358:	20081da8 	cmpgeui	zero,r4,8310
2008135c:	20081da8 	cmpgeui	zero,r4,8310
20081360:	200819a0 	cmpeqi	zero,r4,8294
20081364:	20081da8 	cmpgeui	zero,r4,8310
20081368:	20081da8 	cmpgeui	zero,r4,8310
2008136c:	20081b64 	muli	zero,r4,8301
20081370:	20081da8 	cmpgeui	zero,r4,8310
20081374:	20081da8 	cmpgeui	zero,r4,8310
20081378:	20081da8 	cmpgeui	zero,r4,8310
2008137c:	20081da8 	cmpgeui	zero,r4,8310
20081380:	20081da8 	cmpgeui	zero,r4,8310
20081384:	20081da8 	cmpgeui	zero,r4,8310
20081388:	20081da8 	cmpgeui	zero,r4,8310
2008138c:	20081da8 	cmpgeui	zero,r4,8310
20081390:	20081da8 	cmpgeui	zero,r4,8310
20081394:	20081da8 	cmpgeui	zero,r4,8310
20081398:	20081c1c 	xori	zero,r4,8304
2008139c:	20081acc 	andi	zero,r4,8299
200813a0:	200819d0 	cmplti	zero,r4,8295
200813a4:	200819d0 	cmplti	zero,r4,8295
200813a8:	200819d0 	cmplti	zero,r4,8295
200813ac:	20081b0c 	andi	zero,r4,8300
200813b0:	20081acc 	andi	zero,r4,8299
200813b4:	20081da8 	cmpgeui	zero,r4,8310
200813b8:	20081da8 	cmpgeui	zero,r4,8310
200813bc:	20081b1c 	xori	zero,r4,8300
200813c0:	20081da8 	cmpgeui	zero,r4,8310
200813c4:	20081b30 	cmpltui	zero,r4,8300
200813c8:	20081d6c 	andhi	zero,r4,8309
200813cc:	20081a74 	orhi	zero,r4,8297
200813d0:	20081d20 	cmpeqi	zero,r4,8308
200813d4:	20081da8 	cmpgeui	zero,r4,8310
200813d8:	20081c5c 	xori	zero,r4,8305
200813dc:	20081da8 	cmpgeui	zero,r4,8310
200813e0:	20081d30 	cmpltui	zero,r4,8308
200813e4:	20081da8 	cmpgeui	zero,r4,8310
200813e8:	20081da8 	cmpgeui	zero,r4,8310
200813ec:	20081cd0 	cmplti	zero,r4,8307
200813f0:	db002a17 	ldw	r12,168(sp)
200813f4:	8323c83a 	sub	r17,r16,r12
200813f8:	003f7e06 	br	200811f4 <__flash_rwdata_start+0xfffef3f8>
200813fc:	b009883a 	mov	r4,r22
20081400:	b80b883a 	mov	r5,r23
20081404:	00831040 	call	20083104 <__swsetup_r>
20081408:	10000c1e 	bne	r2,zero,2008143c <___vfprintf_internal_r+0x368>
2008140c:	b880030b 	ldhu	r2,12(r23)
20081410:	00c00284 	movi	r3,10
20081414:	1080068c 	andi	r2,r2,26
20081418:	10ff561e 	bne	r2,r3,20081174 <__flash_rwdata_start+0xfffef378>
2008141c:	b880038f 	ldh	r2,14(r23)
20081420:	103f5416 	blt	r2,zero,20081174 <__flash_rwdata_start+0xfffef378>
20081424:	d9802a17 	ldw	r6,168(sp)
20081428:	d9c02d17 	ldw	r7,180(sp)
2008142c:	b009883a 	mov	r4,r22
20081430:	b80b883a 	mov	r5,r23
20081434:	00830480 	call	20083048 <__sbprintf>
20081438:	00000106 	br	20081440 <___vfprintf_internal_r+0x36c>
2008143c:	00bfffc4 	movi	r2,-1
20081440:	dfc04917 	ldw	ra,292(sp)
20081444:	df004817 	ldw	fp,288(sp)
20081448:	ddc04717 	ldw	r23,284(sp)
2008144c:	dd804617 	ldw	r22,280(sp)
20081450:	dd404517 	ldw	r21,276(sp)
20081454:	dd004417 	ldw	r20,272(sp)
20081458:	dcc04317 	ldw	r19,268(sp)
2008145c:	dc804217 	ldw	r18,264(sp)
20081460:	dc404117 	ldw	r17,260(sp)
20081464:	dc004017 	ldw	r16,256(sp)
20081468:	dec04a04 	addi	sp,sp,296
2008146c:	f800283a 	ret
20081470:	b009883a 	mov	r4,r22
20081474:	b80b883a 	mov	r5,r23
20081478:	d9801e04 	addi	r6,sp,120
2008147c:	0087ea00 	call	20087ea0 <__sprint_r>
20081480:	1000081e 	bne	r2,zero,200814a4 <___vfprintf_internal_r+0x3d0>
20081484:	da000404 	addi	r8,sp,16
20081488:	003f6706 	br	20081228 <__flash_rwdata_start+0xfffef42c>
2008148c:	d8802017 	ldw	r2,128(sp)
20081490:	10000426 	beq	r2,zero,200814a4 <___vfprintf_internal_r+0x3d0>
20081494:	b009883a 	mov	r4,r22
20081498:	b80b883a 	mov	r5,r23
2008149c:	d9801e04 	addi	r6,sp,120
200814a0:	0087ea00 	call	20087ea0 <__sprint_r>
200814a4:	b880030b 	ldhu	r2,12(r23)
200814a8:	1080100c 	andi	r2,r2,64
200814ac:	103fe31e 	bne	r2,zero,2008143c <__flash_rwdata_start+0xfffef640>
200814b0:	d8802f17 	ldw	r2,188(sp)
200814b4:	003fe206 	br	20081440 <__flash_rwdata_start+0xfffef644>
200814b8:	b009883a 	mov	r4,r22
200814bc:	00852f80 	call	200852f8 <__sinit>
200814c0:	003f1c06 	br	20081134 <__flash_rwdata_start+0xfffef338>
200814c4:	dc002a17 	ldw	r16,168(sp)
200814c8:	003f5a06 	br	20081234 <__flash_rwdata_start+0xfffef438>
200814cc:	1805883a 	mov	r2,r3
200814d0:	8c400114 	ori	r17,r17,4
200814d4:	1c000007 	ldb	r16,0(r3)
200814d8:	003f6306 	br	20081268 <__flash_rwdata_start+0xfffef46c>
200814dc:	1c000007 	ldb	r16,0(r3)
200814e0:	18800044 	addi	r2,r3,1
200814e4:	8286ad26 	beq	r16,r10,20082f9c <___vfprintf_internal_r+0x1ec8>
200814e8:	82fff404 	addi	r11,r16,-48
200814ec:	1007883a 	mov	r3,r2
200814f0:	0013883a 	mov	r9,zero
200814f4:	2aff5d36 	bltu	r5,r11,2008126c <__flash_rwdata_start+0xfffef470>
200814f8:	1c000007 	ldb	r16,0(r3)
200814fc:	4a4002a4 	muli	r9,r9,10
20081500:	18c00044 	addi	r3,r3,1
20081504:	5a53883a 	add	r9,r11,r9
20081508:	82fff404 	addi	r11,r16,-48
2008150c:	2afffa2e 	bgeu	r5,r11,200814f8 <__flash_rwdata_start+0xfffef6fc>
20081510:	483f560e 	bge	r9,zero,2008126c <__flash_rwdata_start+0xfffef470>
20081514:	027fffc4 	movi	r9,-1
20081518:	003f5406 	br	2008126c <__flash_rwdata_start+0xfffef470>
2008151c:	8c402014 	ori	r17,r17,128
20081520:	1805883a 	mov	r2,r3
20081524:	1c000007 	ldb	r16,0(r3)
20081528:	003f4f06 	br	20081268 <__flash_rwdata_start+0xfffef46c>
2008152c:	1805883a 	mov	r2,r3
20081530:	d8002e15 	stw	zero,184(sp)
20081534:	82fff404 	addi	r11,r16,-48
20081538:	0019883a 	mov	r12,zero
2008153c:	14000007 	ldb	r16,0(r2)
20081540:	630002a4 	muli	r12,r12,10
20081544:	18c00044 	addi	r3,r3,1
20081548:	1805883a 	mov	r2,r3
2008154c:	62d9883a 	add	r12,r12,r11
20081550:	82fff404 	addi	r11,r16,-48
20081554:	2afff92e 	bgeu	r5,r11,2008153c <__flash_rwdata_start+0xfffef740>
20081558:	db002e15 	stw	r12,184(sp)
2008155c:	003f4306 	br	2008126c <__flash_rwdata_start+0xfffef470>
20081560:	8c400414 	ori	r17,r17,16
20081564:	d8c02a15 	stw	r3,168(sp)
20081568:	d9802785 	stb	r6,158(sp)
2008156c:	8880080c 	andi	r2,r17,32
20081570:	d8c02d17 	ldw	r3,180(sp)
20081574:	10015a26 	beq	r2,zero,20081ae0 <___vfprintf_internal_r+0xa0c>
20081578:	db002d17 	ldw	r12,180(sp)
2008157c:	18800117 	ldw	r2,4(r3)
20081580:	1cc00017 	ldw	r19,0(r3)
20081584:	63000204 	addi	r12,r12,8
20081588:	db002d15 	stw	r12,180(sp)
2008158c:	1039883a 	mov	fp,r2
20081590:	10044516 	blt	r2,zero,200826a8 <___vfprintf_internal_r+0x15d4>
20081594:	dd402783 	ldbu	r21,158(sp)
20081598:	da403215 	stw	r9,200(sp)
2008159c:	00800044 	movi	r2,1
200815a0:	9f06b03a 	or	r3,r19,fp
200815a4:	48000216 	blt	r9,zero,200815b0 <___vfprintf_internal_r+0x4dc>
200815a8:	013fdfc4 	movi	r4,-129
200815ac:	8922703a 	and	r17,r17,r4
200815b0:	1802071e 	bne	r3,zero,20081dd0 <___vfprintf_internal_r+0xcfc>
200815b4:	4802fa26 	beq	r9,zero,200821a0 <___vfprintf_internal_r+0x10cc>
200815b8:	10803fcc 	andi	r2,r2,255
200815bc:	00c00044 	movi	r3,1
200815c0:	10c22926 	beq	r2,r3,20081e68 <___vfprintf_internal_r+0xd94>
200815c4:	00c00084 	movi	r3,2
200815c8:	10c31726 	beq	r2,r3,20082228 <___vfprintf_internal_r+0x1154>
200815cc:	d8c01e04 	addi	r3,sp,120
200815d0:	9808d0fa 	srli	r4,r19,3
200815d4:	e00a977a 	slli	r5,fp,29
200815d8:	e038d0fa 	srli	fp,fp,3
200815dc:	9cc001cc 	andi	r19,r19,7
200815e0:	98800c04 	addi	r2,r19,48
200815e4:	18ffffc4 	addi	r3,r3,-1
200815e8:	2926b03a 	or	r19,r5,r4
200815ec:	18800005 	stb	r2,0(r3)
200815f0:	9f08b03a 	or	r4,r19,fp
200815f4:	203ff61e 	bne	r4,zero,200815d0 <__flash_rwdata_start+0xfffef7d4>
200815f8:	8900004c 	andi	r4,r17,1
200815fc:	d8c03115 	stw	r3,196(sp)
20081600:	2003931e 	bne	r4,zero,20082450 <___vfprintf_internal_r+0x137c>
20081604:	dac02817 	ldw	r11,160(sp)
20081608:	58e5c83a 	sub	r18,r11,r3
2008160c:	9005883a 	mov	r2,r18
20081610:	9240010e 	bge	r18,r9,20081618 <___vfprintf_internal_r+0x544>
20081614:	4805883a 	mov	r2,r9
20081618:	d8802b15 	stw	r2,172(sp)
2008161c:	d8003415 	stw	zero,208(sp)
20081620:	a8803fcc 	andi	r2,r21,255
20081624:	1080201c 	xori	r2,r2,128
20081628:	10bfe004 	addi	r2,r2,-128
2008162c:	10000326 	beq	r2,zero,2008163c <___vfprintf_internal_r+0x568>
20081630:	db002b17 	ldw	r12,172(sp)
20081634:	63000044 	addi	r12,r12,1
20081638:	db002b15 	stw	r12,172(sp)
2008163c:	88c0008c 	andi	r3,r17,2
20081640:	d8c02c15 	stw	r3,176(sp)
20081644:	18000326 	beq	r3,zero,20081654 <___vfprintf_internal_r+0x580>
20081648:	dac02b17 	ldw	r11,172(sp)
2008164c:	5ac00084 	addi	r11,r11,2
20081650:	dac02b15 	stw	r11,172(sp)
20081654:	8b00210c 	andi	r12,r17,132
20081658:	db003015 	stw	r12,192(sp)
2008165c:	6001da1e 	bne	r12,zero,20081dc8 <___vfprintf_internal_r+0xcf4>
20081660:	dac02e17 	ldw	r11,184(sp)
20081664:	db002b17 	ldw	r12,172(sp)
20081668:	5b39c83a 	sub	fp,r11,r12
2008166c:	0701d60e 	bge	zero,fp,20081dc8 <___vfprintf_internal_r+0xcf4>
20081670:	02400404 	movi	r9,16
20081674:	d8c02017 	ldw	r3,128(sp)
20081678:	d8801f17 	ldw	r2,124(sp)
2008167c:	4f053c0e 	bge	r9,fp,20082b70 <___vfprintf_internal_r+0x1a9c>
20081680:	01400034 	movhi	r5,0
20081684:	29402f84 	addi	r5,r5,190
20081688:	d9403615 	stw	r5,216(sp)
2008168c:	482b883a 	mov	r21,r9
20081690:	04c001c4 	movi	r19,7
20081694:	00000306 	br	200816a4 <___vfprintf_internal_r+0x5d0>
20081698:	e73ffc04 	addi	fp,fp,-16
2008169c:	42000204 	addi	r8,r8,8
200816a0:	af00130e 	bge	r21,fp,200816f0 <___vfprintf_internal_r+0x61c>
200816a4:	02c00034 	movhi	r11,0
200816a8:	18c00404 	addi	r3,r3,16
200816ac:	10800044 	addi	r2,r2,1
200816b0:	5ac02f84 	addi	r11,r11,190
200816b4:	42c00015 	stw	r11,0(r8)
200816b8:	45400115 	stw	r21,4(r8)
200816bc:	d8c02015 	stw	r3,128(sp)
200816c0:	d8801f15 	stw	r2,124(sp)
200816c4:	98bff40e 	bge	r19,r2,20081698 <__flash_rwdata_start+0xfffef89c>
200816c8:	b009883a 	mov	r4,r22
200816cc:	b80b883a 	mov	r5,r23
200816d0:	d9801e04 	addi	r6,sp,120
200816d4:	0087ea00 	call	20087ea0 <__sprint_r>
200816d8:	103f721e 	bne	r2,zero,200814a4 <__flash_rwdata_start+0xfffef6a8>
200816dc:	e73ffc04 	addi	fp,fp,-16
200816e0:	d8c02017 	ldw	r3,128(sp)
200816e4:	d8801f17 	ldw	r2,124(sp)
200816e8:	da000404 	addi	r8,sp,16
200816ec:	af3fed16 	blt	r21,fp,200816a4 <__flash_rwdata_start+0xfffef8a8>
200816f0:	db003617 	ldw	r12,216(sp)
200816f4:	e0c7883a 	add	r3,fp,r3
200816f8:	10800044 	addi	r2,r2,1
200816fc:	43000015 	stw	r12,0(r8)
20081700:	47000115 	stw	fp,4(r8)
20081704:	d8c02015 	stw	r3,128(sp)
20081708:	d8801f15 	stw	r2,124(sp)
2008170c:	010001c4 	movi	r4,7
20081710:	20830e16 	blt	r4,r2,2008234c <___vfprintf_internal_r+0x1278>
20081714:	d8802787 	ldb	r2,158(sp)
20081718:	42000204 	addi	r8,r8,8
2008171c:	10000c26 	beq	r2,zero,20081750 <___vfprintf_internal_r+0x67c>
20081720:	d8801f17 	ldw	r2,124(sp)
20081724:	d9002784 	addi	r4,sp,158
20081728:	18c00044 	addi	r3,r3,1
2008172c:	10800044 	addi	r2,r2,1
20081730:	41000015 	stw	r4,0(r8)
20081734:	01000044 	movi	r4,1
20081738:	41000115 	stw	r4,4(r8)
2008173c:	d8c02015 	stw	r3,128(sp)
20081740:	d8801f15 	stw	r2,124(sp)
20081744:	010001c4 	movi	r4,7
20081748:	2082a716 	blt	r4,r2,200821e8 <___vfprintf_internal_r+0x1114>
2008174c:	42000204 	addi	r8,r8,8
20081750:	dac02c17 	ldw	r11,176(sp)
20081754:	58000c26 	beq	r11,zero,20081788 <___vfprintf_internal_r+0x6b4>
20081758:	d8801f17 	ldw	r2,124(sp)
2008175c:	d9002704 	addi	r4,sp,156
20081760:	18c00084 	addi	r3,r3,2
20081764:	10800044 	addi	r2,r2,1
20081768:	41000015 	stw	r4,0(r8)
2008176c:	01000084 	movi	r4,2
20081770:	41000115 	stw	r4,4(r8)
20081774:	d8c02015 	stw	r3,128(sp)
20081778:	d8801f15 	stw	r2,124(sp)
2008177c:	010001c4 	movi	r4,7
20081780:	2082a116 	blt	r4,r2,20082208 <___vfprintf_internal_r+0x1134>
20081784:	42000204 	addi	r8,r8,8
20081788:	db003017 	ldw	r12,192(sp)
2008178c:	00802004 	movi	r2,128
20081790:	60820326 	beq	r12,r2,20081fa0 <___vfprintf_internal_r+0xecc>
20081794:	db003217 	ldw	r12,200(sp)
20081798:	64abc83a 	sub	r21,r12,r18
2008179c:	0540260e 	bge	zero,r21,20081838 <___vfprintf_internal_r+0x764>
200817a0:	07000404 	movi	fp,16
200817a4:	d8801f17 	ldw	r2,124(sp)
200817a8:	e544570e 	bge	fp,r21,20082908 <___vfprintf_internal_r+0x1834>
200817ac:	01400034 	movhi	r5,0
200817b0:	29402b84 	addi	r5,r5,174
200817b4:	d9402c15 	stw	r5,176(sp)
200817b8:	04c001c4 	movi	r19,7
200817bc:	00000306 	br	200817cc <___vfprintf_internal_r+0x6f8>
200817c0:	ad7ffc04 	addi	r21,r21,-16
200817c4:	42000204 	addi	r8,r8,8
200817c8:	e540110e 	bge	fp,r21,20081810 <___vfprintf_internal_r+0x73c>
200817cc:	18c00404 	addi	r3,r3,16
200817d0:	10800044 	addi	r2,r2,1
200817d4:	45000015 	stw	r20,0(r8)
200817d8:	47000115 	stw	fp,4(r8)
200817dc:	d8c02015 	stw	r3,128(sp)
200817e0:	d8801f15 	stw	r2,124(sp)
200817e4:	98bff60e 	bge	r19,r2,200817c0 <__flash_rwdata_start+0xfffef9c4>
200817e8:	b009883a 	mov	r4,r22
200817ec:	b80b883a 	mov	r5,r23
200817f0:	d9801e04 	addi	r6,sp,120
200817f4:	0087ea00 	call	20087ea0 <__sprint_r>
200817f8:	103f2a1e 	bne	r2,zero,200814a4 <__flash_rwdata_start+0xfffef6a8>
200817fc:	ad7ffc04 	addi	r21,r21,-16
20081800:	d8c02017 	ldw	r3,128(sp)
20081804:	d8801f17 	ldw	r2,124(sp)
20081808:	da000404 	addi	r8,sp,16
2008180c:	e57fef16 	blt	fp,r21,200817cc <__flash_rwdata_start+0xfffef9d0>
20081810:	dac02c17 	ldw	r11,176(sp)
20081814:	1d47883a 	add	r3,r3,r21
20081818:	10800044 	addi	r2,r2,1
2008181c:	42c00015 	stw	r11,0(r8)
20081820:	45400115 	stw	r21,4(r8)
20081824:	d8c02015 	stw	r3,128(sp)
20081828:	d8801f15 	stw	r2,124(sp)
2008182c:	010001c4 	movi	r4,7
20081830:	20826516 	blt	r4,r2,200821c8 <___vfprintf_internal_r+0x10f4>
20081834:	42000204 	addi	r8,r8,8
20081838:	8880400c 	andi	r2,r17,256
2008183c:	1001901e 	bne	r2,zero,20081e80 <___vfprintf_internal_r+0xdac>
20081840:	d8801f17 	ldw	r2,124(sp)
20081844:	db003117 	ldw	r12,196(sp)
20081848:	1c87883a 	add	r3,r3,r18
2008184c:	10800044 	addi	r2,r2,1
20081850:	43000015 	stw	r12,0(r8)
20081854:	44800115 	stw	r18,4(r8)
20081858:	d8c02015 	stw	r3,128(sp)
2008185c:	d8801f15 	stw	r2,124(sp)
20081860:	010001c4 	movi	r4,7
20081864:	20824016 	blt	r4,r2,20082168 <___vfprintf_internal_r+0x1094>
20081868:	42000204 	addi	r8,r8,8
2008186c:	8c40010c 	andi	r17,r17,4
20081870:	88003126 	beq	r17,zero,20081938 <___vfprintf_internal_r+0x864>
20081874:	db002e17 	ldw	r12,184(sp)
20081878:	dac02b17 	ldw	r11,172(sp)
2008187c:	62e1c83a 	sub	r16,r12,r11
20081880:	04002d0e 	bge	zero,r16,20081938 <___vfprintf_internal_r+0x864>
20081884:	04400404 	movi	r17,16
20081888:	d8801f17 	ldw	r2,124(sp)
2008188c:	8c05150e 	bge	r17,r16,20082ce4 <___vfprintf_internal_r+0x1c10>
20081890:	01000034 	movhi	r4,0
20081894:	21002f84 	addi	r4,r4,190
20081898:	d9003615 	stw	r4,216(sp)
2008189c:	048001c4 	movi	r18,7
200818a0:	00000306 	br	200818b0 <___vfprintf_internal_r+0x7dc>
200818a4:	843ffc04 	addi	r16,r16,-16
200818a8:	42000204 	addi	r8,r8,8
200818ac:	8c00130e 	bge	r17,r16,200818fc <___vfprintf_internal_r+0x828>
200818b0:	01400034 	movhi	r5,0
200818b4:	18c00404 	addi	r3,r3,16
200818b8:	10800044 	addi	r2,r2,1
200818bc:	29402f84 	addi	r5,r5,190
200818c0:	41400015 	stw	r5,0(r8)
200818c4:	44400115 	stw	r17,4(r8)
200818c8:	d8c02015 	stw	r3,128(sp)
200818cc:	d8801f15 	stw	r2,124(sp)
200818d0:	90bff40e 	bge	r18,r2,200818a4 <__flash_rwdata_start+0xfffefaa8>
200818d4:	b009883a 	mov	r4,r22
200818d8:	b80b883a 	mov	r5,r23
200818dc:	d9801e04 	addi	r6,sp,120
200818e0:	0087ea00 	call	20087ea0 <__sprint_r>
200818e4:	103eef1e 	bne	r2,zero,200814a4 <__flash_rwdata_start+0xfffef6a8>
200818e8:	843ffc04 	addi	r16,r16,-16
200818ec:	d8c02017 	ldw	r3,128(sp)
200818f0:	d8801f17 	ldw	r2,124(sp)
200818f4:	da000404 	addi	r8,sp,16
200818f8:	8c3fed16 	blt	r17,r16,200818b0 <__flash_rwdata_start+0xfffefab4>
200818fc:	dac03617 	ldw	r11,216(sp)
20081900:	1c07883a 	add	r3,r3,r16
20081904:	10800044 	addi	r2,r2,1
20081908:	42c00015 	stw	r11,0(r8)
2008190c:	44000115 	stw	r16,4(r8)
20081910:	d8c02015 	stw	r3,128(sp)
20081914:	d8801f15 	stw	r2,124(sp)
20081918:	010001c4 	movi	r4,7
2008191c:	2080060e 	bge	r4,r2,20081938 <___vfprintf_internal_r+0x864>
20081920:	b009883a 	mov	r4,r22
20081924:	b80b883a 	mov	r5,r23
20081928:	d9801e04 	addi	r6,sp,120
2008192c:	0087ea00 	call	20087ea0 <__sprint_r>
20081930:	103edc1e 	bne	r2,zero,200814a4 <__flash_rwdata_start+0xfffef6a8>
20081934:	d8c02017 	ldw	r3,128(sp)
20081938:	d8802b17 	ldw	r2,172(sp)
2008193c:	db002e17 	ldw	r12,184(sp)
20081940:	1300010e 	bge	r2,r12,20081948 <___vfprintf_internal_r+0x874>
20081944:	6005883a 	mov	r2,r12
20081948:	dac02f17 	ldw	r11,188(sp)
2008194c:	5897883a 	add	r11,r11,r2
20081950:	dac02f15 	stw	r11,188(sp)
20081954:	18020c1e 	bne	r3,zero,20082188 <___vfprintf_internal_r+0x10b4>
20081958:	d8001f15 	stw	zero,124(sp)
2008195c:	da000404 	addi	r8,sp,16
20081960:	003e1706 	br	200811c0 <__flash_rwdata_start+0xfffef3c4>
20081964:	8c400414 	ori	r17,r17,16
20081968:	d8c02a15 	stw	r3,168(sp)
2008196c:	8880080c 	andi	r2,r17,32
20081970:	10010126 	beq	r2,zero,20081d78 <___vfprintf_internal_r+0xca4>
20081974:	db002d17 	ldw	r12,180(sp)
20081978:	0005883a 	mov	r2,zero
2008197c:	64c00017 	ldw	r19,0(r12)
20081980:	67000117 	ldw	fp,4(r12)
20081984:	63000204 	addi	r12,r12,8
20081988:	db002d15 	stw	r12,180(sp)
2008198c:	9f06b03a 	or	r3,r19,fp
20081990:	d8002785 	stb	zero,158(sp)
20081994:	da403215 	stw	r9,200(sp)
20081998:	002b883a 	mov	r21,zero
2008199c:	003f0106 	br	200815a4 <__flash_rwdata_start+0xfffef7a8>
200819a0:	8c400414 	ori	r17,r17,16
200819a4:	d8c02a15 	stw	r3,168(sp)
200819a8:	8880080c 	andi	r2,r17,32
200819ac:	1000e326 	beq	r2,zero,20081d3c <___vfprintf_internal_r+0xc68>
200819b0:	dac02d17 	ldw	r11,180(sp)
200819b4:	00800044 	movi	r2,1
200819b8:	5cc00017 	ldw	r19,0(r11)
200819bc:	5f000117 	ldw	fp,4(r11)
200819c0:	5ac00204 	addi	r11,r11,8
200819c4:	dac02d15 	stw	r11,180(sp)
200819c8:	9f06b03a 	or	r3,r19,fp
200819cc:	003ff006 	br	20081990 <__flash_rwdata_start+0xfffefb94>
200819d0:	db002d17 	ldw	r12,180(sp)
200819d4:	dac02d17 	ldw	r11,180(sp)
200819d8:	d8c02a15 	stw	r3,168(sp)
200819dc:	63000017 	ldw	r12,0(r12)
200819e0:	5ac00117 	ldw	r11,4(r11)
200819e4:	d9802785 	stb	r6,158(sp)
200819e8:	6009883a 	mov	r4,r12
200819ec:	580b883a 	mov	r5,r11
200819f0:	db003715 	stw	r12,220(sp)
200819f4:	da003f15 	stw	r8,252(sp)
200819f8:	da403e15 	stw	r9,248(sp)
200819fc:	dac03915 	stw	r11,228(sp)
20081a00:	0087b500 	call	20087b50 <__fpclassifyd>
20081a04:	db002d17 	ldw	r12,180(sp)
20081a08:	04800044 	movi	r18,1
20081a0c:	da003f17 	ldw	r8,252(sp)
20081a10:	64c00204 	addi	r19,r12,8
20081a14:	da403e17 	ldw	r9,248(sp)
20081a18:	d9003717 	ldw	r4,220(sp)
20081a1c:	d9403917 	ldw	r5,228(sp)
20081a20:	14832b1e 	bne	r2,r18,200826d0 <___vfprintf_internal_r+0x15fc>
20081a24:	000d883a 	mov	r6,zero
20081a28:	000f883a 	mov	r7,zero
20081a2c:	008baa80 	call	2008baa8 <__ledf2>
20081a30:	da003f17 	ldw	r8,252(sp)
20081a34:	1004b716 	blt	r2,zero,20082d14 <___vfprintf_internal_r+0x1c40>
20081a38:	dd402783 	ldbu	r21,158(sp)
20081a3c:	008011c4 	movi	r2,71
20081a40:	14040e0e 	bge	r2,r16,20082a7c <___vfprintf_internal_r+0x19a8>
20081a44:	00c00034 	movhi	r3,0
20081a48:	18c01c04 	addi	r3,r3,112
20081a4c:	d8c03115 	stw	r3,196(sp)
20081a50:	02c000c4 	movi	r11,3
20081a54:	00bfdfc4 	movi	r2,-129
20081a58:	dac02b15 	stw	r11,172(sp)
20081a5c:	88a2703a 	and	r17,r17,r2
20081a60:	dcc02d15 	stw	r19,180(sp)
20081a64:	5825883a 	mov	r18,r11
20081a68:	d8003215 	stw	zero,200(sp)
20081a6c:	d8003415 	stw	zero,208(sp)
20081a70:	003eeb06 	br	20081620 <__flash_rwdata_start+0xfffef824>
20081a74:	db002d17 	ldw	r12,180(sp)
20081a78:	00800c04 	movi	r2,48
20081a7c:	d8802705 	stb	r2,156(sp)
20081a80:	64c00017 	ldw	r19,0(r12)
20081a84:	00801e04 	movi	r2,120
20081a88:	d8802745 	stb	r2,157(sp)
20081a8c:	00800034 	movhi	r2,0
20081a90:	10802404 	addi	r2,r2,144
20081a94:	63000104 	addi	r12,r12,4
20081a98:	d8c02a15 	stw	r3,168(sp)
20081a9c:	d8803b15 	stw	r2,236(sp)
20081aa0:	0039883a 	mov	fp,zero
20081aa4:	8c400094 	ori	r17,r17,2
20081aa8:	db002d15 	stw	r12,180(sp)
20081aac:	00800084 	movi	r2,2
20081ab0:	04001e04 	movi	r16,120
20081ab4:	9807883a 	mov	r3,r19
20081ab8:	003fb506 	br	20081990 <__flash_rwdata_start+0xfffefb94>
20081abc:	8c400214 	ori	r17,r17,8
20081ac0:	1805883a 	mov	r2,r3
20081ac4:	1c000007 	ldb	r16,0(r3)
20081ac8:	003de706 	br	20081268 <__flash_rwdata_start+0xfffef46c>
20081acc:	d8c02a15 	stw	r3,168(sp)
20081ad0:	d9802785 	stb	r6,158(sp)
20081ad4:	8880080c 	andi	r2,r17,32
20081ad8:	d8c02d17 	ldw	r3,180(sp)
20081adc:	103ea61e 	bne	r2,zero,20081578 <__flash_rwdata_start+0xfffef77c>
20081ae0:	8880040c 	andi	r2,r17,16
20081ae4:	1002221e 	bne	r2,zero,20082370 <___vfprintf_internal_r+0x129c>
20081ae8:	8880100c 	andi	r2,r17,64
20081aec:	10022026 	beq	r2,zero,20082370 <___vfprintf_internal_r+0x129c>
20081af0:	1cc0000f 	ldh	r19,0(r3)
20081af4:	db002d17 	ldw	r12,180(sp)
20081af8:	9839d7fa 	srai	fp,r19,31
20081afc:	63000104 	addi	r12,r12,4
20081b00:	db002d15 	stw	r12,180(sp)
20081b04:	e005883a 	mov	r2,fp
20081b08:	003ea106 	br	20081590 <__flash_rwdata_start+0xfffef794>
20081b0c:	8c401014 	ori	r17,r17,64
20081b10:	1805883a 	mov	r2,r3
20081b14:	1c000007 	ldb	r16,0(r3)
20081b18:	003dd306 	br	20081268 <__flash_rwdata_start+0xfffef46c>
20081b1c:	1c000007 	ldb	r16,0(r3)
20081b20:	81c3e926 	beq	r16,r7,20082ac8 <___vfprintf_internal_r+0x19f4>
20081b24:	8c400414 	ori	r17,r17,16
20081b28:	1805883a 	mov	r2,r3
20081b2c:	003dce06 	br	20081268 <__flash_rwdata_start+0xfffef46c>
20081b30:	d8c02a15 	stw	r3,168(sp)
20081b34:	d9802785 	stb	r6,158(sp)
20081b38:	8880080c 	andi	r2,r17,32
20081b3c:	10034726 	beq	r2,zero,2008285c <___vfprintf_internal_r+0x1788>
20081b40:	db002d17 	ldw	r12,180(sp)
20081b44:	dac02f17 	ldw	r11,188(sp)
20081b48:	60800017 	ldw	r2,0(r12)
20081b4c:	5807d7fa 	srai	r3,r11,31
20081b50:	63000104 	addi	r12,r12,4
20081b54:	db002d15 	stw	r12,180(sp)
20081b58:	12c00015 	stw	r11,0(r2)
20081b5c:	10c00115 	stw	r3,4(r2)
20081b60:	003d9706 	br	200811c0 <__flash_rwdata_start+0xfffef3c4>
20081b64:	03000034 	movhi	r12,0
20081b68:	63001f04 	addi	r12,r12,124
20081b6c:	d8c02a15 	stw	r3,168(sp)
20081b70:	d9802785 	stb	r6,158(sp)
20081b74:	db003b15 	stw	r12,236(sp)
20081b78:	88c0080c 	andi	r3,r17,32
20081b7c:	d8802d17 	ldw	r2,180(sp)
20081b80:	18005b26 	beq	r3,zero,20081cf0 <___vfprintf_internal_r+0xc1c>
20081b84:	dac02d17 	ldw	r11,180(sp)
20081b88:	14c00017 	ldw	r19,0(r2)
20081b8c:	17000117 	ldw	fp,4(r2)
20081b90:	5ac00204 	addi	r11,r11,8
20081b94:	dac02d15 	stw	r11,180(sp)
20081b98:	8880004c 	andi	r2,r17,1
20081b9c:	10022926 	beq	r2,zero,20082444 <___vfprintf_internal_r+0x1370>
20081ba0:	9f06b03a 	or	r3,r19,fp
20081ba4:	18032b26 	beq	r3,zero,20082854 <___vfprintf_internal_r+0x1780>
20081ba8:	00800c04 	movi	r2,48
20081bac:	d8802705 	stb	r2,156(sp)
20081bb0:	dc002745 	stb	r16,157(sp)
20081bb4:	8c400094 	ori	r17,r17,2
20081bb8:	00800084 	movi	r2,2
20081bbc:	003f7406 	br	20081990 <__flash_rwdata_start+0xfffefb94>
20081bc0:	30803fcc 	andi	r2,r6,255
20081bc4:	1080201c 	xori	r2,r2,128
20081bc8:	10bfe004 	addi	r2,r2,-128
20081bcc:	1003351e 	bne	r2,zero,200828a4 <___vfprintf_internal_r+0x17d0>
20081bd0:	1805883a 	mov	r2,r3
20081bd4:	01800804 	movi	r6,32
20081bd8:	1c000007 	ldb	r16,0(r3)
20081bdc:	003da206 	br	20081268 <__flash_rwdata_start+0xfffef46c>
20081be0:	dac02d17 	ldw	r11,180(sp)
20081be4:	db002d17 	ldw	r12,180(sp)
20081be8:	5ac00017 	ldw	r11,0(r11)
20081bec:	dac02e15 	stw	r11,184(sp)
20081bf0:	62c00104 	addi	r11,r12,4
20081bf4:	db002e17 	ldw	r12,184(sp)
20081bf8:	6003ad16 	blt	r12,zero,20082ab0 <___vfprintf_internal_r+0x19dc>
20081bfc:	dac02d15 	stw	r11,180(sp)
20081c00:	1805883a 	mov	r2,r3
20081c04:	1c000007 	ldb	r16,0(r3)
20081c08:	003d9706 	br	20081268 <__flash_rwdata_start+0xfffef46c>
20081c0c:	1805883a 	mov	r2,r3
20081c10:	01800ac4 	movi	r6,43
20081c14:	1c000007 	ldb	r16,0(r3)
20081c18:	003d9306 	br	20081268 <__flash_rwdata_start+0xfffef46c>
20081c1c:	db002d17 	ldw	r12,180(sp)
20081c20:	d8c02a15 	stw	r3,168(sp)
20081c24:	00c00044 	movi	r3,1
20081c28:	60800017 	ldw	r2,0(r12)
20081c2c:	63000104 	addi	r12,r12,4
20081c30:	d8c02b15 	stw	r3,172(sp)
20081c34:	d8002785 	stb	zero,158(sp)
20081c38:	d8801405 	stb	r2,80(sp)
20081c3c:	db002d15 	stw	r12,180(sp)
20081c40:	dac01404 	addi	r11,sp,80
20081c44:	1825883a 	mov	r18,r3
20081c48:	d8003215 	stw	zero,200(sp)
20081c4c:	d8003415 	stw	zero,208(sp)
20081c50:	dac03115 	stw	r11,196(sp)
20081c54:	0005883a 	mov	r2,zero
20081c58:	003e7806 	br	2008163c <__flash_rwdata_start+0xfffef840>
20081c5c:	dac02d17 	ldw	r11,180(sp)
20081c60:	db002d17 	ldw	r12,180(sp)
20081c64:	d8c02a15 	stw	r3,168(sp)
20081c68:	5ac00017 	ldw	r11,0(r11)
20081c6c:	d8002785 	stb	zero,158(sp)
20081c70:	64c00104 	addi	r19,r12,4
20081c74:	dac03115 	stw	r11,196(sp)
20081c78:	5803fe26 	beq	r11,zero,20082c74 <___vfprintf_internal_r+0x1ba0>
20081c7c:	d9003117 	ldw	r4,196(sp)
20081c80:	4803b416 	blt	r9,zero,20082b54 <___vfprintf_internal_r+0x1a80>
20081c84:	480d883a 	mov	r6,r9
20081c88:	000b883a 	mov	r5,zero
20081c8c:	da003f15 	stw	r8,252(sp)
20081c90:	da403e15 	stw	r9,248(sp)
20081c94:	008603c0 	call	2008603c <memchr>
20081c98:	da003f17 	ldw	r8,252(sp)
20081c9c:	da403e17 	ldw	r9,248(sp)
20081ca0:	10043026 	beq	r2,zero,20082d64 <___vfprintf_internal_r+0x1c90>
20081ca4:	d8c03117 	ldw	r3,196(sp)
20081ca8:	10e5c83a 	sub	r18,r2,r3
20081cac:	4c836b16 	blt	r9,r18,20082a5c <___vfprintf_internal_r+0x1988>
20081cb0:	9005883a 	mov	r2,r18
20081cb4:	9003ac16 	blt	r18,zero,20082b68 <___vfprintf_internal_r+0x1a94>
20081cb8:	dd402783 	ldbu	r21,158(sp)
20081cbc:	d8802b15 	stw	r2,172(sp)
20081cc0:	dcc02d15 	stw	r19,180(sp)
20081cc4:	d8003215 	stw	zero,200(sp)
20081cc8:	d8003415 	stw	zero,208(sp)
20081ccc:	003e5406 	br	20081620 <__flash_rwdata_start+0xfffef824>
20081cd0:	00800034 	movhi	r2,0
20081cd4:	10802404 	addi	r2,r2,144
20081cd8:	d8c02a15 	stw	r3,168(sp)
20081cdc:	d8803b15 	stw	r2,236(sp)
20081ce0:	d9802785 	stb	r6,158(sp)
20081ce4:	88c0080c 	andi	r3,r17,32
20081ce8:	d8802d17 	ldw	r2,180(sp)
20081cec:	183fa51e 	bne	r3,zero,20081b84 <__flash_rwdata_start+0xfffefd88>
20081cf0:	88c0040c 	andi	r3,r17,16
20081cf4:	1802ee26 	beq	r3,zero,200828b0 <___vfprintf_internal_r+0x17dc>
20081cf8:	db002d17 	ldw	r12,180(sp)
20081cfc:	14c00017 	ldw	r19,0(r2)
20081d00:	0039883a 	mov	fp,zero
20081d04:	63000104 	addi	r12,r12,4
20081d08:	db002d15 	stw	r12,180(sp)
20081d0c:	003fa206 	br	20081b98 <__flash_rwdata_start+0xfffefd9c>
20081d10:	8c400054 	ori	r17,r17,1
20081d14:	1805883a 	mov	r2,r3
20081d18:	1c000007 	ldb	r16,0(r3)
20081d1c:	003d5206 	br	20081268 <__flash_rwdata_start+0xfffef46c>
20081d20:	8c400814 	ori	r17,r17,32
20081d24:	1805883a 	mov	r2,r3
20081d28:	1c000007 	ldb	r16,0(r3)
20081d2c:	003d4e06 	br	20081268 <__flash_rwdata_start+0xfffef46c>
20081d30:	d8c02a15 	stw	r3,168(sp)
20081d34:	8880080c 	andi	r2,r17,32
20081d38:	103f1d1e 	bne	r2,zero,200819b0 <__flash_rwdata_start+0xfffefbb4>
20081d3c:	8880040c 	andi	r2,r17,16
20081d40:	1001b81e 	bne	r2,zero,20082424 <___vfprintf_internal_r+0x1350>
20081d44:	8880100c 	andi	r2,r17,64
20081d48:	1001b626 	beq	r2,zero,20082424 <___vfprintf_internal_r+0x1350>
20081d4c:	dac02d17 	ldw	r11,180(sp)
20081d50:	0039883a 	mov	fp,zero
20081d54:	00800044 	movi	r2,1
20081d58:	5cc0000b 	ldhu	r19,0(r11)
20081d5c:	5ac00104 	addi	r11,r11,4
20081d60:	dac02d15 	stw	r11,180(sp)
20081d64:	9807883a 	mov	r3,r19
20081d68:	003f0906 	br	20081990 <__flash_rwdata_start+0xfffefb94>
20081d6c:	d8c02a15 	stw	r3,168(sp)
20081d70:	8880080c 	andi	r2,r17,32
20081d74:	103eff1e 	bne	r2,zero,20081974 <__flash_rwdata_start+0xfffefb78>
20081d78:	8880040c 	andi	r2,r17,16
20081d7c:	1001a11e 	bne	r2,zero,20082404 <___vfprintf_internal_r+0x1330>
20081d80:	8880100c 	andi	r2,r17,64
20081d84:	10019f26 	beq	r2,zero,20082404 <___vfprintf_internal_r+0x1330>
20081d88:	db002d17 	ldw	r12,180(sp)
20081d8c:	0039883a 	mov	fp,zero
20081d90:	0005883a 	mov	r2,zero
20081d94:	64c0000b 	ldhu	r19,0(r12)
20081d98:	63000104 	addi	r12,r12,4
20081d9c:	db002d15 	stw	r12,180(sp)
20081da0:	9807883a 	mov	r3,r19
20081da4:	003efa06 	br	20081990 <__flash_rwdata_start+0xfffefb94>
20081da8:	d8c02a15 	stw	r3,168(sp)
20081dac:	d9802785 	stb	r6,158(sp)
20081db0:	803db626 	beq	r16,zero,2008148c <__flash_rwdata_start+0xfffef690>
20081db4:	00c00044 	movi	r3,1
20081db8:	d8c02b15 	stw	r3,172(sp)
20081dbc:	dc001405 	stb	r16,80(sp)
20081dc0:	d8002785 	stb	zero,158(sp)
20081dc4:	003f9e06 	br	20081c40 <__flash_rwdata_start+0xfffefe44>
20081dc8:	d8c02017 	ldw	r3,128(sp)
20081dcc:	003e5306 	br	2008171c <__flash_rwdata_start+0xfffef920>
20081dd0:	10803fcc 	andi	r2,r2,255
20081dd4:	00c00044 	movi	r3,1
20081dd8:	10fdfa1e 	bne	r2,r3,200815c4 <__flash_rwdata_start+0xfffef7c8>
20081ddc:	e000021e 	bne	fp,zero,20081de8 <___vfprintf_internal_r+0xd14>
20081de0:	00800244 	movi	r2,9
20081de4:	14c0202e 	bgeu	r2,r19,20081e68 <___vfprintf_internal_r+0xd94>
20081de8:	dc002b15 	stw	r16,172(sp)
20081dec:	dc402c15 	stw	r17,176(sp)
20081df0:	9821883a 	mov	r16,r19
20081df4:	e023883a 	mov	r17,fp
20081df8:	dc801e04 	addi	r18,sp,120
20081dfc:	4827883a 	mov	r19,r9
20081e00:	4039883a 	mov	fp,r8
20081e04:	8009883a 	mov	r4,r16
20081e08:	880b883a 	mov	r5,r17
20081e0c:	01800284 	movi	r6,10
20081e10:	000f883a 	mov	r7,zero
20081e14:	008a1200 	call	2008a120 <__umoddi3>
20081e18:	10800c04 	addi	r2,r2,48
20081e1c:	94bfffc4 	addi	r18,r18,-1
20081e20:	8009883a 	mov	r4,r16
20081e24:	880b883a 	mov	r5,r17
20081e28:	01800284 	movi	r6,10
20081e2c:	000f883a 	mov	r7,zero
20081e30:	90800005 	stb	r2,0(r18)
20081e34:	0089b600 	call	20089b60 <__udivdi3>
20081e38:	1021883a 	mov	r16,r2
20081e3c:	10c4b03a 	or	r2,r2,r3
20081e40:	1823883a 	mov	r17,r3
20081e44:	103fef1e 	bne	r2,zero,20081e04 <__flash_rwdata_start+0xffff0008>
20081e48:	dac02817 	ldw	r11,160(sp)
20081e4c:	dc803115 	stw	r18,196(sp)
20081e50:	dc002b17 	ldw	r16,172(sp)
20081e54:	dc402c17 	ldw	r17,176(sp)
20081e58:	9813883a 	mov	r9,r19
20081e5c:	e011883a 	mov	r8,fp
20081e60:	5ca5c83a 	sub	r18,r11,r18
20081e64:	003de906 	br	2008160c <__flash_rwdata_start+0xfffef810>
20081e68:	9cc00c04 	addi	r19,r19,48
20081e6c:	d8c01dc4 	addi	r3,sp,119
20081e70:	dcc01dc5 	stb	r19,119(sp)
20081e74:	dc803c17 	ldw	r18,240(sp)
20081e78:	d8c03115 	stw	r3,196(sp)
20081e7c:	003de306 	br	2008160c <__flash_rwdata_start+0xfffef810>
20081e80:	00801944 	movi	r2,101
20081e84:	1400710e 	bge	r2,r16,2008204c <___vfprintf_internal_r+0xf78>
20081e88:	d9003717 	ldw	r4,220(sp)
20081e8c:	d9403917 	ldw	r5,228(sp)
20081e90:	000d883a 	mov	r6,zero
20081e94:	000f883a 	mov	r7,zero
20081e98:	d8c03d15 	stw	r3,244(sp)
20081e9c:	da003f15 	stw	r8,252(sp)
20081ea0:	008b9440 	call	2008b944 <__eqdf2>
20081ea4:	d8c03d17 	ldw	r3,244(sp)
20081ea8:	da003f17 	ldw	r8,252(sp)
20081eac:	1000ef1e 	bne	r2,zero,2008226c <___vfprintf_internal_r+0x1198>
20081eb0:	d8801f17 	ldw	r2,124(sp)
20081eb4:	01000034 	movhi	r4,0
20081eb8:	21002b04 	addi	r4,r4,172
20081ebc:	18c00044 	addi	r3,r3,1
20081ec0:	10800044 	addi	r2,r2,1
20081ec4:	41000015 	stw	r4,0(r8)
20081ec8:	01000044 	movi	r4,1
20081ecc:	41000115 	stw	r4,4(r8)
20081ed0:	d8c02015 	stw	r3,128(sp)
20081ed4:	d8801f15 	stw	r2,124(sp)
20081ed8:	010001c4 	movi	r4,7
20081edc:	20828e16 	blt	r4,r2,20082918 <___vfprintf_internal_r+0x1844>
20081ee0:	42000204 	addi	r8,r8,8
20081ee4:	d8802617 	ldw	r2,152(sp)
20081ee8:	dac03317 	ldw	r11,204(sp)
20081eec:	12c00216 	blt	r2,r11,20081ef8 <___vfprintf_internal_r+0xe24>
20081ef0:	8880004c 	andi	r2,r17,1
20081ef4:	103e5d26 	beq	r2,zero,2008186c <__flash_rwdata_start+0xfffefa70>
20081ef8:	db003817 	ldw	r12,224(sp)
20081efc:	d8801f17 	ldw	r2,124(sp)
20081f00:	dac03517 	ldw	r11,212(sp)
20081f04:	1b07883a 	add	r3,r3,r12
20081f08:	10800044 	addi	r2,r2,1
20081f0c:	42c00015 	stw	r11,0(r8)
20081f10:	43000115 	stw	r12,4(r8)
20081f14:	d8c02015 	stw	r3,128(sp)
20081f18:	d8801f15 	stw	r2,124(sp)
20081f1c:	010001c4 	movi	r4,7
20081f20:	2082ed16 	blt	r4,r2,20082ad8 <___vfprintf_internal_r+0x1a04>
20081f24:	42000204 	addi	r8,r8,8
20081f28:	db003317 	ldw	r12,204(sp)
20081f2c:	643fffc4 	addi	r16,r12,-1
20081f30:	043e4e0e 	bge	zero,r16,2008186c <__flash_rwdata_start+0xfffefa70>
20081f34:	04800404 	movi	r18,16
20081f38:	d8801f17 	ldw	r2,124(sp)
20081f3c:	94007e0e 	bge	r18,r16,20082138 <___vfprintf_internal_r+0x1064>
20081f40:	01400034 	movhi	r5,0
20081f44:	29402b84 	addi	r5,r5,174
20081f48:	d9402c15 	stw	r5,176(sp)
20081f4c:	054001c4 	movi	r21,7
20081f50:	00000306 	br	20081f60 <___vfprintf_internal_r+0xe8c>
20081f54:	42000204 	addi	r8,r8,8
20081f58:	843ffc04 	addi	r16,r16,-16
20081f5c:	9400790e 	bge	r18,r16,20082144 <___vfprintf_internal_r+0x1070>
20081f60:	18c00404 	addi	r3,r3,16
20081f64:	10800044 	addi	r2,r2,1
20081f68:	45000015 	stw	r20,0(r8)
20081f6c:	44800115 	stw	r18,4(r8)
20081f70:	d8c02015 	stw	r3,128(sp)
20081f74:	d8801f15 	stw	r2,124(sp)
20081f78:	a8bff60e 	bge	r21,r2,20081f54 <__flash_rwdata_start+0xffff0158>
20081f7c:	b009883a 	mov	r4,r22
20081f80:	b80b883a 	mov	r5,r23
20081f84:	d9801e04 	addi	r6,sp,120
20081f88:	0087ea00 	call	20087ea0 <__sprint_r>
20081f8c:	103d451e 	bne	r2,zero,200814a4 <__flash_rwdata_start+0xfffef6a8>
20081f90:	d8c02017 	ldw	r3,128(sp)
20081f94:	d8801f17 	ldw	r2,124(sp)
20081f98:	da000404 	addi	r8,sp,16
20081f9c:	003fee06 	br	20081f58 <__flash_rwdata_start+0xffff015c>
20081fa0:	dac02e17 	ldw	r11,184(sp)
20081fa4:	db002b17 	ldw	r12,172(sp)
20081fa8:	5b2bc83a 	sub	r21,r11,r12
20081fac:	057df90e 	bge	zero,r21,20081794 <__flash_rwdata_start+0xfffef998>
20081fb0:	07000404 	movi	fp,16
20081fb4:	d8801f17 	ldw	r2,124(sp)
20081fb8:	e543640e 	bge	fp,r21,20082d4c <___vfprintf_internal_r+0x1c78>
20081fbc:	01400034 	movhi	r5,0
20081fc0:	29402b84 	addi	r5,r5,174
20081fc4:	d9402c15 	stw	r5,176(sp)
20081fc8:	04c001c4 	movi	r19,7
20081fcc:	00000306 	br	20081fdc <___vfprintf_internal_r+0xf08>
20081fd0:	ad7ffc04 	addi	r21,r21,-16
20081fd4:	42000204 	addi	r8,r8,8
20081fd8:	e540110e 	bge	fp,r21,20082020 <___vfprintf_internal_r+0xf4c>
20081fdc:	18c00404 	addi	r3,r3,16
20081fe0:	10800044 	addi	r2,r2,1
20081fe4:	45000015 	stw	r20,0(r8)
20081fe8:	47000115 	stw	fp,4(r8)
20081fec:	d8c02015 	stw	r3,128(sp)
20081ff0:	d8801f15 	stw	r2,124(sp)
20081ff4:	98bff60e 	bge	r19,r2,20081fd0 <__flash_rwdata_start+0xffff01d4>
20081ff8:	b009883a 	mov	r4,r22
20081ffc:	b80b883a 	mov	r5,r23
20082000:	d9801e04 	addi	r6,sp,120
20082004:	0087ea00 	call	20087ea0 <__sprint_r>
20082008:	103d261e 	bne	r2,zero,200814a4 <__flash_rwdata_start+0xfffef6a8>
2008200c:	ad7ffc04 	addi	r21,r21,-16
20082010:	d8c02017 	ldw	r3,128(sp)
20082014:	d8801f17 	ldw	r2,124(sp)
20082018:	da000404 	addi	r8,sp,16
2008201c:	e57fef16 	blt	fp,r21,20081fdc <__flash_rwdata_start+0xffff01e0>
20082020:	dac02c17 	ldw	r11,176(sp)
20082024:	1d47883a 	add	r3,r3,r21
20082028:	10800044 	addi	r2,r2,1
2008202c:	42c00015 	stw	r11,0(r8)
20082030:	45400115 	stw	r21,4(r8)
20082034:	d8c02015 	stw	r3,128(sp)
20082038:	d8801f15 	stw	r2,124(sp)
2008203c:	010001c4 	movi	r4,7
20082040:	20819116 	blt	r4,r2,20082688 <___vfprintf_internal_r+0x15b4>
20082044:	42000204 	addi	r8,r8,8
20082048:	003dd206 	br	20081794 <__flash_rwdata_start+0xfffef998>
2008204c:	db003317 	ldw	r12,204(sp)
20082050:	00800044 	movi	r2,1
20082054:	18c00044 	addi	r3,r3,1
20082058:	1301530e 	bge	r2,r12,200825a8 <___vfprintf_internal_r+0x14d4>
2008205c:	dc001f17 	ldw	r16,124(sp)
20082060:	dac03117 	ldw	r11,196(sp)
20082064:	00800044 	movi	r2,1
20082068:	84000044 	addi	r16,r16,1
2008206c:	40800115 	stw	r2,4(r8)
20082070:	42c00015 	stw	r11,0(r8)
20082074:	d8c02015 	stw	r3,128(sp)
20082078:	dc001f15 	stw	r16,124(sp)
2008207c:	008001c4 	movi	r2,7
20082080:	14016b16 	blt	r2,r16,20082630 <___vfprintf_internal_r+0x155c>
20082084:	42000204 	addi	r8,r8,8
20082088:	db003817 	ldw	r12,224(sp)
2008208c:	dac03517 	ldw	r11,212(sp)
20082090:	84000044 	addi	r16,r16,1
20082094:	1b07883a 	add	r3,r3,r12
20082098:	42c00015 	stw	r11,0(r8)
2008209c:	43000115 	stw	r12,4(r8)
200820a0:	d8c02015 	stw	r3,128(sp)
200820a4:	dc001f15 	stw	r16,124(sp)
200820a8:	008001c4 	movi	r2,7
200820ac:	14016916 	blt	r2,r16,20082654 <___vfprintf_internal_r+0x1580>
200820b0:	44800204 	addi	r18,r8,8
200820b4:	d9003717 	ldw	r4,220(sp)
200820b8:	d9403917 	ldw	r5,228(sp)
200820bc:	000d883a 	mov	r6,zero
200820c0:	000f883a 	mov	r7,zero
200820c4:	d8c03d15 	stw	r3,244(sp)
200820c8:	008b9440 	call	2008b944 <__eqdf2>
200820cc:	d8c03d17 	ldw	r3,244(sp)
200820d0:	db003317 	ldw	r12,204(sp)
200820d4:	1000ad26 	beq	r2,zero,2008238c <___vfprintf_internal_r+0x12b8>
200820d8:	dac03117 	ldw	r11,196(sp)
200820dc:	60bfffc4 	addi	r2,r12,-1
200820e0:	1887883a 	add	r3,r3,r2
200820e4:	59000044 	addi	r4,r11,1
200820e8:	84000044 	addi	r16,r16,1
200820ec:	90800115 	stw	r2,4(r18)
200820f0:	91000015 	stw	r4,0(r18)
200820f4:	d8c02015 	stw	r3,128(sp)
200820f8:	dc001f15 	stw	r16,124(sp)
200820fc:	008001c4 	movi	r2,7
20082100:	14014216 	blt	r2,r16,2008260c <___vfprintf_internal_r+0x1538>
20082104:	94800204 	addi	r18,r18,8
20082108:	dac03a17 	ldw	r11,232(sp)
2008210c:	dd4022c4 	addi	r21,sp,139
20082110:	84000044 	addi	r16,r16,1
20082114:	1ac7883a 	add	r3,r3,r11
20082118:	95400015 	stw	r21,0(r18)
2008211c:	92c00115 	stw	r11,4(r18)
20082120:	d8c02015 	stw	r3,128(sp)
20082124:	dc001f15 	stw	r16,124(sp)
20082128:	008001c4 	movi	r2,7
2008212c:	14000e16 	blt	r2,r16,20082168 <___vfprintf_internal_r+0x1094>
20082130:	92000204 	addi	r8,r18,8
20082134:	003dcd06 	br	2008186c <__flash_rwdata_start+0xfffefa70>
20082138:	01000034 	movhi	r4,0
2008213c:	21002b84 	addi	r4,r4,174
20082140:	d9002c15 	stw	r4,176(sp)
20082144:	dac02c17 	ldw	r11,176(sp)
20082148:	1c07883a 	add	r3,r3,r16
2008214c:	44000115 	stw	r16,4(r8)
20082150:	42c00015 	stw	r11,0(r8)
20082154:	10800044 	addi	r2,r2,1
20082158:	d8c02015 	stw	r3,128(sp)
2008215c:	d8801f15 	stw	r2,124(sp)
20082160:	010001c4 	movi	r4,7
20082164:	20bdc00e 	bge	r4,r2,20081868 <__flash_rwdata_start+0xfffefa6c>
20082168:	b009883a 	mov	r4,r22
2008216c:	b80b883a 	mov	r5,r23
20082170:	d9801e04 	addi	r6,sp,120
20082174:	0087ea00 	call	20087ea0 <__sprint_r>
20082178:	103cca1e 	bne	r2,zero,200814a4 <__flash_rwdata_start+0xfffef6a8>
2008217c:	d8c02017 	ldw	r3,128(sp)
20082180:	da000404 	addi	r8,sp,16
20082184:	003db906 	br	2008186c <__flash_rwdata_start+0xfffefa70>
20082188:	b009883a 	mov	r4,r22
2008218c:	b80b883a 	mov	r5,r23
20082190:	d9801e04 	addi	r6,sp,120
20082194:	0087ea00 	call	20087ea0 <__sprint_r>
20082198:	103def26 	beq	r2,zero,20081958 <__flash_rwdata_start+0xfffefb5c>
2008219c:	003cc106 	br	200814a4 <__flash_rwdata_start+0xfffef6a8>
200821a0:	10803fcc 	andi	r2,r2,255
200821a4:	1000651e 	bne	r2,zero,2008233c <___vfprintf_internal_r+0x1268>
200821a8:	8880004c 	andi	r2,r17,1
200821ac:	10013226 	beq	r2,zero,20082678 <___vfprintf_internal_r+0x15a4>
200821b0:	00800c04 	movi	r2,48
200821b4:	d8c01dc4 	addi	r3,sp,119
200821b8:	d8801dc5 	stb	r2,119(sp)
200821bc:	dc803c17 	ldw	r18,240(sp)
200821c0:	d8c03115 	stw	r3,196(sp)
200821c4:	003d1106 	br	2008160c <__flash_rwdata_start+0xfffef810>
200821c8:	b009883a 	mov	r4,r22
200821cc:	b80b883a 	mov	r5,r23
200821d0:	d9801e04 	addi	r6,sp,120
200821d4:	0087ea00 	call	20087ea0 <__sprint_r>
200821d8:	103cb21e 	bne	r2,zero,200814a4 <__flash_rwdata_start+0xfffef6a8>
200821dc:	d8c02017 	ldw	r3,128(sp)
200821e0:	da000404 	addi	r8,sp,16
200821e4:	003d9406 	br	20081838 <__flash_rwdata_start+0xfffefa3c>
200821e8:	b009883a 	mov	r4,r22
200821ec:	b80b883a 	mov	r5,r23
200821f0:	d9801e04 	addi	r6,sp,120
200821f4:	0087ea00 	call	20087ea0 <__sprint_r>
200821f8:	103caa1e 	bne	r2,zero,200814a4 <__flash_rwdata_start+0xfffef6a8>
200821fc:	d8c02017 	ldw	r3,128(sp)
20082200:	da000404 	addi	r8,sp,16
20082204:	003d5206 	br	20081750 <__flash_rwdata_start+0xfffef954>
20082208:	b009883a 	mov	r4,r22
2008220c:	b80b883a 	mov	r5,r23
20082210:	d9801e04 	addi	r6,sp,120
20082214:	0087ea00 	call	20087ea0 <__sprint_r>
20082218:	103ca21e 	bne	r2,zero,200814a4 <__flash_rwdata_start+0xfffef6a8>
2008221c:	d8c02017 	ldw	r3,128(sp)
20082220:	da000404 	addi	r8,sp,16
20082224:	003d5806 	br	20081788 <__flash_rwdata_start+0xfffef98c>
20082228:	d9403b17 	ldw	r5,236(sp)
2008222c:	d8c01e04 	addi	r3,sp,120
20082230:	988003cc 	andi	r2,r19,15
20082234:	e008973a 	slli	r4,fp,28
20082238:	2885883a 	add	r2,r5,r2
2008223c:	9826d13a 	srli	r19,r19,4
20082240:	10800003 	ldbu	r2,0(r2)
20082244:	e038d13a 	srli	fp,fp,4
20082248:	18ffffc4 	addi	r3,r3,-1
2008224c:	24e6b03a 	or	r19,r4,r19
20082250:	18800005 	stb	r2,0(r3)
20082254:	9f04b03a 	or	r2,r19,fp
20082258:	103ff51e 	bne	r2,zero,20082230 <__flash_rwdata_start+0xffff0434>
2008225c:	db002817 	ldw	r12,160(sp)
20082260:	d8c03115 	stw	r3,196(sp)
20082264:	60e5c83a 	sub	r18,r12,r3
20082268:	003ce806 	br	2008160c <__flash_rwdata_start+0xfffef810>
2008226c:	dc002617 	ldw	r16,152(sp)
20082270:	0401b10e 	bge	zero,r16,20082938 <___vfprintf_internal_r+0x1864>
20082274:	db003117 	ldw	r12,196(sp)
20082278:	dac03317 	ldw	r11,204(sp)
2008227c:	62e1883a 	add	r16,r12,r11
20082280:	db003417 	ldw	r12,208(sp)
20082284:	5825883a 	mov	r18,r11
20082288:	62c0010e 	bge	r12,r11,20082290 <___vfprintf_internal_r+0x11bc>
2008228c:	6025883a 	mov	r18,r12
20082290:	04800b0e 	bge	zero,r18,200822c0 <___vfprintf_internal_r+0x11ec>
20082294:	d8801f17 	ldw	r2,124(sp)
20082298:	dac03117 	ldw	r11,196(sp)
2008229c:	1c87883a 	add	r3,r3,r18
200822a0:	10800044 	addi	r2,r2,1
200822a4:	42c00015 	stw	r11,0(r8)
200822a8:	44800115 	stw	r18,4(r8)
200822ac:	d8c02015 	stw	r3,128(sp)
200822b0:	d8801f15 	stw	r2,124(sp)
200822b4:	010001c4 	movi	r4,7
200822b8:	20824f16 	blt	r4,r2,20082bf8 <___vfprintf_internal_r+0x1b24>
200822bc:	42000204 	addi	r8,r8,8
200822c0:	90024b16 	blt	r18,zero,20082bf0 <___vfprintf_internal_r+0x1b1c>
200822c4:	db003417 	ldw	r12,208(sp)
200822c8:	64a5c83a 	sub	r18,r12,r18
200822cc:	0480730e 	bge	zero,r18,2008249c <___vfprintf_internal_r+0x13c8>
200822d0:	05400404 	movi	r21,16
200822d4:	d8801f17 	ldw	r2,124(sp)
200822d8:	ac817d0e 	bge	r21,r18,200828d0 <___vfprintf_internal_r+0x17fc>
200822dc:	01400034 	movhi	r5,0
200822e0:	29402b84 	addi	r5,r5,174
200822e4:	d9402c15 	stw	r5,176(sp)
200822e8:	070001c4 	movi	fp,7
200822ec:	00000306 	br	200822fc <___vfprintf_internal_r+0x1228>
200822f0:	42000204 	addi	r8,r8,8
200822f4:	94bffc04 	addi	r18,r18,-16
200822f8:	ac81780e 	bge	r21,r18,200828dc <___vfprintf_internal_r+0x1808>
200822fc:	18c00404 	addi	r3,r3,16
20082300:	10800044 	addi	r2,r2,1
20082304:	45000015 	stw	r20,0(r8)
20082308:	45400115 	stw	r21,4(r8)
2008230c:	d8c02015 	stw	r3,128(sp)
20082310:	d8801f15 	stw	r2,124(sp)
20082314:	e0bff60e 	bge	fp,r2,200822f0 <__flash_rwdata_start+0xffff04f4>
20082318:	b009883a 	mov	r4,r22
2008231c:	b80b883a 	mov	r5,r23
20082320:	d9801e04 	addi	r6,sp,120
20082324:	0087ea00 	call	20087ea0 <__sprint_r>
20082328:	103c5e1e 	bne	r2,zero,200814a4 <__flash_rwdata_start+0xfffef6a8>
2008232c:	d8c02017 	ldw	r3,128(sp)
20082330:	d8801f17 	ldw	r2,124(sp)
20082334:	da000404 	addi	r8,sp,16
20082338:	003fee06 	br	200822f4 <__flash_rwdata_start+0xffff04f8>
2008233c:	dac01e04 	addi	r11,sp,120
20082340:	0025883a 	mov	r18,zero
20082344:	dac03115 	stw	r11,196(sp)
20082348:	003cb006 	br	2008160c <__flash_rwdata_start+0xfffef810>
2008234c:	b009883a 	mov	r4,r22
20082350:	b80b883a 	mov	r5,r23
20082354:	d9801e04 	addi	r6,sp,120
20082358:	0087ea00 	call	20087ea0 <__sprint_r>
2008235c:	103c511e 	bne	r2,zero,200814a4 <__flash_rwdata_start+0xfffef6a8>
20082360:	d8c02017 	ldw	r3,128(sp)
20082364:	d8802787 	ldb	r2,158(sp)
20082368:	da000404 	addi	r8,sp,16
2008236c:	003ceb06 	br	2008171c <__flash_rwdata_start+0xfffef920>
20082370:	1cc00017 	ldw	r19,0(r3)
20082374:	dac02d17 	ldw	r11,180(sp)
20082378:	9839d7fa 	srai	fp,r19,31
2008237c:	5ac00104 	addi	r11,r11,4
20082380:	dac02d15 	stw	r11,180(sp)
20082384:	e005883a 	mov	r2,fp
20082388:	003c8106 	br	20081590 <__flash_rwdata_start+0xfffef794>
2008238c:	657fffc4 	addi	r21,r12,-1
20082390:	057f5d0e 	bge	zero,r21,20082108 <__flash_rwdata_start+0xffff030c>
20082394:	07000404 	movi	fp,16
20082398:	e540900e 	bge	fp,r21,200825dc <___vfprintf_internal_r+0x1508>
2008239c:	01000034 	movhi	r4,0
200823a0:	21002b84 	addi	r4,r4,174
200823a4:	d9002c15 	stw	r4,176(sp)
200823a8:	01c001c4 	movi	r7,7
200823ac:	00000306 	br	200823bc <___vfprintf_internal_r+0x12e8>
200823b0:	94800204 	addi	r18,r18,8
200823b4:	ad7ffc04 	addi	r21,r21,-16
200823b8:	e5408b0e 	bge	fp,r21,200825e8 <___vfprintf_internal_r+0x1514>
200823bc:	18c00404 	addi	r3,r3,16
200823c0:	84000044 	addi	r16,r16,1
200823c4:	95000015 	stw	r20,0(r18)
200823c8:	97000115 	stw	fp,4(r18)
200823cc:	d8c02015 	stw	r3,128(sp)
200823d0:	dc001f15 	stw	r16,124(sp)
200823d4:	3c3ff60e 	bge	r7,r16,200823b0 <__flash_rwdata_start+0xffff05b4>
200823d8:	b009883a 	mov	r4,r22
200823dc:	b80b883a 	mov	r5,r23
200823e0:	d9801e04 	addi	r6,sp,120
200823e4:	d9c03d15 	stw	r7,244(sp)
200823e8:	0087ea00 	call	20087ea0 <__sprint_r>
200823ec:	d9c03d17 	ldw	r7,244(sp)
200823f0:	103c2c1e 	bne	r2,zero,200814a4 <__flash_rwdata_start+0xfffef6a8>
200823f4:	d8c02017 	ldw	r3,128(sp)
200823f8:	dc001f17 	ldw	r16,124(sp)
200823fc:	dc800404 	addi	r18,sp,16
20082400:	003fec06 	br	200823b4 <__flash_rwdata_start+0xffff05b8>
20082404:	dac02d17 	ldw	r11,180(sp)
20082408:	0039883a 	mov	fp,zero
2008240c:	0005883a 	mov	r2,zero
20082410:	5cc00017 	ldw	r19,0(r11)
20082414:	5ac00104 	addi	r11,r11,4
20082418:	dac02d15 	stw	r11,180(sp)
2008241c:	9807883a 	mov	r3,r19
20082420:	003d5b06 	br	20081990 <__flash_rwdata_start+0xfffefb94>
20082424:	db002d17 	ldw	r12,180(sp)
20082428:	0039883a 	mov	fp,zero
2008242c:	00800044 	movi	r2,1
20082430:	64c00017 	ldw	r19,0(r12)
20082434:	63000104 	addi	r12,r12,4
20082438:	db002d15 	stw	r12,180(sp)
2008243c:	9807883a 	mov	r3,r19
20082440:	003d5306 	br	20081990 <__flash_rwdata_start+0xfffefb94>
20082444:	00800084 	movi	r2,2
20082448:	9f06b03a 	or	r3,r19,fp
2008244c:	003d5006 	br	20081990 <__flash_rwdata_start+0xfffefb94>
20082450:	10803fcc 	andi	r2,r2,255
20082454:	1080201c 	xori	r2,r2,128
20082458:	10bfe004 	addi	r2,r2,-128
2008245c:	01000c04 	movi	r4,48
20082460:	1101a526 	beq	r2,r4,20082af8 <___vfprintf_internal_r+0x1a24>
20082464:	dac03117 	ldw	r11,196(sp)
20082468:	db002817 	ldw	r12,160(sp)
2008246c:	193fffc5 	stb	r4,-1(r3)
20082470:	5affffc4 	addi	r11,r11,-1
20082474:	dac03115 	stw	r11,196(sp)
20082478:	62e5c83a 	sub	r18,r12,r11
2008247c:	003c6306 	br	2008160c <__flash_rwdata_start+0xfffef810>
20082480:	b009883a 	mov	r4,r22
20082484:	b80b883a 	mov	r5,r23
20082488:	d9801e04 	addi	r6,sp,120
2008248c:	0087ea00 	call	20087ea0 <__sprint_r>
20082490:	103c041e 	bne	r2,zero,200814a4 <__flash_rwdata_start+0xfffef6a8>
20082494:	d8c02017 	ldw	r3,128(sp)
20082498:	da000404 	addi	r8,sp,16
2008249c:	db003117 	ldw	r12,196(sp)
200824a0:	dac03417 	ldw	r11,208(sp)
200824a4:	d8802617 	ldw	r2,152(sp)
200824a8:	62e5883a 	add	r18,r12,r11
200824ac:	db003317 	ldw	r12,204(sp)
200824b0:	13000216 	blt	r2,r12,200824bc <___vfprintf_internal_r+0x13e8>
200824b4:	8900004c 	andi	r4,r17,1
200824b8:	20000c26 	beq	r4,zero,200824ec <___vfprintf_internal_r+0x1418>
200824bc:	dac03817 	ldw	r11,224(sp)
200824c0:	d9001f17 	ldw	r4,124(sp)
200824c4:	db003517 	ldw	r12,212(sp)
200824c8:	1ac7883a 	add	r3,r3,r11
200824cc:	21000044 	addi	r4,r4,1
200824d0:	43000015 	stw	r12,0(r8)
200824d4:	42c00115 	stw	r11,4(r8)
200824d8:	d8c02015 	stw	r3,128(sp)
200824dc:	d9001f15 	stw	r4,124(sp)
200824e0:	014001c4 	movi	r5,7
200824e4:	2901cc16 	blt	r5,r4,20082c18 <___vfprintf_internal_r+0x1b44>
200824e8:	42000204 	addi	r8,r8,8
200824ec:	dac03317 	ldw	r11,204(sp)
200824f0:	8489c83a 	sub	r4,r16,r18
200824f4:	5885c83a 	sub	r2,r11,r2
200824f8:	1021883a 	mov	r16,r2
200824fc:	2080010e 	bge	r4,r2,20082504 <___vfprintf_internal_r+0x1430>
20082500:	2021883a 	mov	r16,r4
20082504:	04000a0e 	bge	zero,r16,20082530 <___vfprintf_internal_r+0x145c>
20082508:	d9001f17 	ldw	r4,124(sp)
2008250c:	1c07883a 	add	r3,r3,r16
20082510:	44800015 	stw	r18,0(r8)
20082514:	21000044 	addi	r4,r4,1
20082518:	44000115 	stw	r16,4(r8)
2008251c:	d8c02015 	stw	r3,128(sp)
20082520:	d9001f15 	stw	r4,124(sp)
20082524:	014001c4 	movi	r5,7
20082528:	2901e316 	blt	r5,r4,20082cb8 <___vfprintf_internal_r+0x1be4>
2008252c:	42000204 	addi	r8,r8,8
20082530:	8001df16 	blt	r16,zero,20082cb0 <___vfprintf_internal_r+0x1bdc>
20082534:	1421c83a 	sub	r16,r2,r16
20082538:	043ccc0e 	bge	zero,r16,2008186c <__flash_rwdata_start+0xfffefa70>
2008253c:	04800404 	movi	r18,16
20082540:	d8801f17 	ldw	r2,124(sp)
20082544:	943efc0e 	bge	r18,r16,20082138 <__flash_rwdata_start+0xffff033c>
20082548:	01400034 	movhi	r5,0
2008254c:	29402b84 	addi	r5,r5,174
20082550:	d9402c15 	stw	r5,176(sp)
20082554:	054001c4 	movi	r21,7
20082558:	00000306 	br	20082568 <___vfprintf_internal_r+0x1494>
2008255c:	42000204 	addi	r8,r8,8
20082560:	843ffc04 	addi	r16,r16,-16
20082564:	943ef70e 	bge	r18,r16,20082144 <__flash_rwdata_start+0xffff0348>
20082568:	18c00404 	addi	r3,r3,16
2008256c:	10800044 	addi	r2,r2,1
20082570:	45000015 	stw	r20,0(r8)
20082574:	44800115 	stw	r18,4(r8)
20082578:	d8c02015 	stw	r3,128(sp)
2008257c:	d8801f15 	stw	r2,124(sp)
20082580:	a8bff60e 	bge	r21,r2,2008255c <__flash_rwdata_start+0xffff0760>
20082584:	b009883a 	mov	r4,r22
20082588:	b80b883a 	mov	r5,r23
2008258c:	d9801e04 	addi	r6,sp,120
20082590:	0087ea00 	call	20087ea0 <__sprint_r>
20082594:	103bc31e 	bne	r2,zero,200814a4 <__flash_rwdata_start+0xfffef6a8>
20082598:	d8c02017 	ldw	r3,128(sp)
2008259c:	d8801f17 	ldw	r2,124(sp)
200825a0:	da000404 	addi	r8,sp,16
200825a4:	003fee06 	br	20082560 <__flash_rwdata_start+0xffff0764>
200825a8:	8888703a 	and	r4,r17,r2
200825ac:	203eab1e 	bne	r4,zero,2008205c <__flash_rwdata_start+0xffff0260>
200825b0:	dc001f17 	ldw	r16,124(sp)
200825b4:	db003117 	ldw	r12,196(sp)
200825b8:	40800115 	stw	r2,4(r8)
200825bc:	84000044 	addi	r16,r16,1
200825c0:	43000015 	stw	r12,0(r8)
200825c4:	d8c02015 	stw	r3,128(sp)
200825c8:	dc001f15 	stw	r16,124(sp)
200825cc:	008001c4 	movi	r2,7
200825d0:	14000e16 	blt	r2,r16,2008260c <___vfprintf_internal_r+0x1538>
200825d4:	44800204 	addi	r18,r8,8
200825d8:	003ecb06 	br	20082108 <__flash_rwdata_start+0xffff030c>
200825dc:	00800034 	movhi	r2,0
200825e0:	10802b84 	addi	r2,r2,174
200825e4:	d8802c15 	stw	r2,176(sp)
200825e8:	dac02c17 	ldw	r11,176(sp)
200825ec:	1d47883a 	add	r3,r3,r21
200825f0:	84000044 	addi	r16,r16,1
200825f4:	92c00015 	stw	r11,0(r18)
200825f8:	95400115 	stw	r21,4(r18)
200825fc:	d8c02015 	stw	r3,128(sp)
20082600:	dc001f15 	stw	r16,124(sp)
20082604:	008001c4 	movi	r2,7
20082608:	143ebe0e 	bge	r2,r16,20082104 <__flash_rwdata_start+0xffff0308>
2008260c:	b009883a 	mov	r4,r22
20082610:	b80b883a 	mov	r5,r23
20082614:	d9801e04 	addi	r6,sp,120
20082618:	0087ea00 	call	20087ea0 <__sprint_r>
2008261c:	103ba11e 	bne	r2,zero,200814a4 <__flash_rwdata_start+0xfffef6a8>
20082620:	d8c02017 	ldw	r3,128(sp)
20082624:	dc001f17 	ldw	r16,124(sp)
20082628:	dc800404 	addi	r18,sp,16
2008262c:	003eb606 	br	20082108 <__flash_rwdata_start+0xffff030c>
20082630:	b009883a 	mov	r4,r22
20082634:	b80b883a 	mov	r5,r23
20082638:	d9801e04 	addi	r6,sp,120
2008263c:	0087ea00 	call	20087ea0 <__sprint_r>
20082640:	103b981e 	bne	r2,zero,200814a4 <__flash_rwdata_start+0xfffef6a8>
20082644:	d8c02017 	ldw	r3,128(sp)
20082648:	dc001f17 	ldw	r16,124(sp)
2008264c:	da000404 	addi	r8,sp,16
20082650:	003e8d06 	br	20082088 <__flash_rwdata_start+0xffff028c>
20082654:	b009883a 	mov	r4,r22
20082658:	b80b883a 	mov	r5,r23
2008265c:	d9801e04 	addi	r6,sp,120
20082660:	0087ea00 	call	20087ea0 <__sprint_r>
20082664:	103b8f1e 	bne	r2,zero,200814a4 <__flash_rwdata_start+0xfffef6a8>
20082668:	d8c02017 	ldw	r3,128(sp)
2008266c:	dc001f17 	ldw	r16,124(sp)
20082670:	dc800404 	addi	r18,sp,16
20082674:	003e8f06 	br	200820b4 <__flash_rwdata_start+0xffff02b8>
20082678:	db001e04 	addi	r12,sp,120
2008267c:	0025883a 	mov	r18,zero
20082680:	db003115 	stw	r12,196(sp)
20082684:	003be106 	br	2008160c <__flash_rwdata_start+0xfffef810>
20082688:	b009883a 	mov	r4,r22
2008268c:	b80b883a 	mov	r5,r23
20082690:	d9801e04 	addi	r6,sp,120
20082694:	0087ea00 	call	20087ea0 <__sprint_r>
20082698:	103b821e 	bne	r2,zero,200814a4 <__flash_rwdata_start+0xfffef6a8>
2008269c:	d8c02017 	ldw	r3,128(sp)
200826a0:	da000404 	addi	r8,sp,16
200826a4:	003c3b06 	br	20081794 <__flash_rwdata_start+0xfffef998>
200826a8:	04e7c83a 	sub	r19,zero,r19
200826ac:	9804c03a 	cmpne	r2,r19,zero
200826b0:	0739c83a 	sub	fp,zero,fp
200826b4:	e0b9c83a 	sub	fp,fp,r2
200826b8:	05400b44 	movi	r21,45
200826bc:	dd402785 	stb	r21,158(sp)
200826c0:	da403215 	stw	r9,200(sp)
200826c4:	00800044 	movi	r2,1
200826c8:	9f06b03a 	or	r3,r19,fp
200826cc:	003bb506 	br	200815a4 <__flash_rwdata_start+0xfffef7a8>
200826d0:	da003f15 	stw	r8,252(sp)
200826d4:	da403e15 	stw	r9,248(sp)
200826d8:	0087b500 	call	20087b50 <__fpclassifyd>
200826dc:	da003f17 	ldw	r8,252(sp)
200826e0:	da403e17 	ldw	r9,248(sp)
200826e4:	1000ce26 	beq	r2,zero,20082a20 <___vfprintf_internal_r+0x194c>
200826e8:	057ff7c4 	movi	r21,-33
200826ec:	00bfffc4 	movi	r2,-1
200826f0:	856a703a 	and	r21,r16,r21
200826f4:	4881e826 	beq	r9,r2,20082e98 <___vfprintf_internal_r+0x1dc4>
200826f8:	008011c4 	movi	r2,71
200826fc:	a881e326 	beq	r21,r2,20082e8c <___vfprintf_internal_r+0x1db8>
20082700:	db003917 	ldw	r12,228(sp)
20082704:	8ac04014 	ori	r11,r17,256
20082708:	dac02d15 	stw	r11,180(sp)
2008270c:	6001ed16 	blt	r12,zero,20082ec4 <___vfprintf_internal_r+0x1df0>
20082710:	dc803917 	ldw	r18,228(sp)
20082714:	d8002b05 	stb	zero,172(sp)
20082718:	00801984 	movi	r2,102
2008271c:	80811826 	beq	r16,r2,20082b80 <___vfprintf_internal_r+0x1aac>
20082720:	00801184 	movi	r2,70
20082724:	80811626 	beq	r16,r2,20082b80 <___vfprintf_internal_r+0x1aac>
20082728:	00801144 	movi	r2,69
2008272c:	a881e926 	beq	r21,r2,20082ed4 <___vfprintf_internal_r+0x1e00>
20082730:	4839883a 	mov	fp,r9
20082734:	d8802604 	addi	r2,sp,152
20082738:	d8800115 	stw	r2,4(sp)
2008273c:	d9403717 	ldw	r5,220(sp)
20082740:	d8802504 	addi	r2,sp,148
20082744:	d8800215 	stw	r2,8(sp)
20082748:	d8802104 	addi	r2,sp,132
2008274c:	df000015 	stw	fp,0(sp)
20082750:	d8800315 	stw	r2,12(sp)
20082754:	b009883a 	mov	r4,r22
20082758:	900d883a 	mov	r6,r18
2008275c:	01c00084 	movi	r7,2
20082760:	da003f15 	stw	r8,252(sp)
20082764:	da403e15 	stw	r9,248(sp)
20082768:	00835ec0 	call	200835ec <_dtoa_r>
2008276c:	d8803115 	stw	r2,196(sp)
20082770:	008019c4 	movi	r2,103
20082774:	da003f17 	ldw	r8,252(sp)
20082778:	da403e17 	ldw	r9,248(sp)
2008277c:	80800226 	beq	r16,r2,20082788 <___vfprintf_internal_r+0x16b4>
20082780:	008011c4 	movi	r2,71
20082784:	8081101e 	bne	r16,r2,20082bc8 <___vfprintf_internal_r+0x1af4>
20082788:	8880004c 	andi	r2,r17,1
2008278c:	1001dd26 	beq	r2,zero,20082f04 <___vfprintf_internal_r+0x1e30>
20082790:	db003117 	ldw	r12,196(sp)
20082794:	6715883a 	add	r10,r12,fp
20082798:	d9003717 	ldw	r4,220(sp)
2008279c:	900b883a 	mov	r5,r18
200827a0:	000d883a 	mov	r6,zero
200827a4:	000f883a 	mov	r7,zero
200827a8:	da003f15 	stw	r8,252(sp)
200827ac:	da403e15 	stw	r9,248(sp)
200827b0:	da803d15 	stw	r10,244(sp)
200827b4:	008b9440 	call	2008b944 <__eqdf2>
200827b8:	da003f17 	ldw	r8,252(sp)
200827bc:	da403e17 	ldw	r9,248(sp)
200827c0:	da803d17 	ldw	r10,244(sp)
200827c4:	10016526 	beq	r2,zero,20082d5c <___vfprintf_internal_r+0x1c88>
200827c8:	d8802117 	ldw	r2,132(sp)
200827cc:	1280062e 	bgeu	r2,r10,200827e8 <___vfprintf_internal_r+0x1714>
200827d0:	01000c04 	movi	r4,48
200827d4:	10c00044 	addi	r3,r2,1
200827d8:	d8c02115 	stw	r3,132(sp)
200827dc:	11000005 	stb	r4,0(r2)
200827e0:	d8802117 	ldw	r2,132(sp)
200827e4:	12bffb36 	bltu	r2,r10,200827d4 <__flash_rwdata_start+0xffff09d8>
200827e8:	db003117 	ldw	r12,196(sp)
200827ec:	1305c83a 	sub	r2,r2,r12
200827f0:	d8803315 	stw	r2,204(sp)
200827f4:	008011c4 	movi	r2,71
200827f8:	a8814d26 	beq	r21,r2,20082d30 <___vfprintf_internal_r+0x1c5c>
200827fc:	00801944 	movi	r2,101
20082800:	1402060e 	bge	r2,r16,2008301c <___vfprintf_internal_r+0x1f48>
20082804:	00801984 	movi	r2,102
20082808:	8081b426 	beq	r16,r2,20082edc <___vfprintf_internal_r+0x1e08>
2008280c:	db002617 	ldw	r12,152(sp)
20082810:	db003415 	stw	r12,208(sp)
20082814:	db003417 	ldw	r12,208(sp)
20082818:	dac03317 	ldw	r11,204(sp)
2008281c:	62c1a016 	blt	r12,r11,20082ea0 <___vfprintf_internal_r+0x1dcc>
20082820:	8c40004c 	andi	r17,r17,1
20082824:	8801bf1e 	bne	r17,zero,20082f24 <___vfprintf_internal_r+0x1e50>
20082828:	6005883a 	mov	r2,r12
2008282c:	6001b316 	blt	r12,zero,20082efc <___vfprintf_internal_r+0x1e28>
20082830:	dc803417 	ldw	r18,208(sp)
20082834:	df002b07 	ldb	fp,172(sp)
20082838:	e0012e1e 	bne	fp,zero,20082cf4 <___vfprintf_internal_r+0x1c20>
2008283c:	dc402d17 	ldw	r17,180(sp)
20082840:	dd402783 	ldbu	r21,158(sp)
20082844:	d8802b15 	stw	r2,172(sp)
20082848:	dcc02d15 	stw	r19,180(sp)
2008284c:	d8003215 	stw	zero,200(sp)
20082850:	003b7306 	br	20081620 <__flash_rwdata_start+0xfffef824>
20082854:	00800084 	movi	r2,2
20082858:	003c4d06 	br	20081990 <__flash_rwdata_start+0xfffefb94>
2008285c:	8880040c 	andi	r2,r17,16
20082860:	1000091e 	bne	r2,zero,20082888 <___vfprintf_internal_r+0x17b4>
20082864:	8c40100c 	andi	r17,r17,64
20082868:	88000726 	beq	r17,zero,20082888 <___vfprintf_internal_r+0x17b4>
2008286c:	db002d17 	ldw	r12,180(sp)
20082870:	dac02f17 	ldw	r11,188(sp)
20082874:	60800017 	ldw	r2,0(r12)
20082878:	63000104 	addi	r12,r12,4
2008287c:	db002d15 	stw	r12,180(sp)
20082880:	12c0000d 	sth	r11,0(r2)
20082884:	003a4e06 	br	200811c0 <__flash_rwdata_start+0xfffef3c4>
20082888:	db002d17 	ldw	r12,180(sp)
2008288c:	dac02f17 	ldw	r11,188(sp)
20082890:	60800017 	ldw	r2,0(r12)
20082894:	63000104 	addi	r12,r12,4
20082898:	db002d15 	stw	r12,180(sp)
2008289c:	12c00015 	stw	r11,0(r2)
200828a0:	003a4706 	br	200811c0 <__flash_rwdata_start+0xfffef3c4>
200828a4:	1c000007 	ldb	r16,0(r3)
200828a8:	1805883a 	mov	r2,r3
200828ac:	003a6e06 	br	20081268 <__flash_rwdata_start+0xfffef46c>
200828b0:	88c0100c 	andi	r3,r17,64
200828b4:	18006b26 	beq	r3,zero,20082a64 <___vfprintf_internal_r+0x1990>
200828b8:	dac02d17 	ldw	r11,180(sp)
200828bc:	14c0000b 	ldhu	r19,0(r2)
200828c0:	0039883a 	mov	fp,zero
200828c4:	5ac00104 	addi	r11,r11,4
200828c8:	dac02d15 	stw	r11,180(sp)
200828cc:	003cb206 	br	20081b98 <__flash_rwdata_start+0xfffefd9c>
200828d0:	01000034 	movhi	r4,0
200828d4:	21002b84 	addi	r4,r4,174
200828d8:	d9002c15 	stw	r4,176(sp)
200828dc:	dac02c17 	ldw	r11,176(sp)
200828e0:	1c87883a 	add	r3,r3,r18
200828e4:	10800044 	addi	r2,r2,1
200828e8:	42c00015 	stw	r11,0(r8)
200828ec:	44800115 	stw	r18,4(r8)
200828f0:	d8c02015 	stw	r3,128(sp)
200828f4:	d8801f15 	stw	r2,124(sp)
200828f8:	010001c4 	movi	r4,7
200828fc:	20bee016 	blt	r4,r2,20082480 <__flash_rwdata_start+0xffff0684>
20082900:	42000204 	addi	r8,r8,8
20082904:	003ee506 	br	2008249c <__flash_rwdata_start+0xffff06a0>
20082908:	01000034 	movhi	r4,0
2008290c:	21002b84 	addi	r4,r4,174
20082910:	d9002c15 	stw	r4,176(sp)
20082914:	003bbe06 	br	20081810 <__flash_rwdata_start+0xfffefa14>
20082918:	b009883a 	mov	r4,r22
2008291c:	b80b883a 	mov	r5,r23
20082920:	d9801e04 	addi	r6,sp,120
20082924:	0087ea00 	call	20087ea0 <__sprint_r>
20082928:	103ade1e 	bne	r2,zero,200814a4 <__flash_rwdata_start+0xfffef6a8>
2008292c:	d8c02017 	ldw	r3,128(sp)
20082930:	da000404 	addi	r8,sp,16
20082934:	003d6b06 	br	20081ee4 <__flash_rwdata_start+0xffff00e8>
20082938:	d8801f17 	ldw	r2,124(sp)
2008293c:	03000034 	movhi	r12,0
20082940:	01000044 	movi	r4,1
20082944:	18c00044 	addi	r3,r3,1
20082948:	10800044 	addi	r2,r2,1
2008294c:	63002b04 	addi	r12,r12,172
20082950:	41000115 	stw	r4,4(r8)
20082954:	43000015 	stw	r12,0(r8)
20082958:	d8c02015 	stw	r3,128(sp)
2008295c:	d8801f15 	stw	r2,124(sp)
20082960:	010001c4 	movi	r4,7
20082964:	20804916 	blt	r4,r2,20082a8c <___vfprintf_internal_r+0x19b8>
20082968:	42000204 	addi	r8,r8,8
2008296c:	8000041e 	bne	r16,zero,20082980 <___vfprintf_internal_r+0x18ac>
20082970:	dac03317 	ldw	r11,204(sp)
20082974:	5800021e 	bne	r11,zero,20082980 <___vfprintf_internal_r+0x18ac>
20082978:	8880004c 	andi	r2,r17,1
2008297c:	103bbb26 	beq	r2,zero,2008186c <__flash_rwdata_start+0xfffefa70>
20082980:	db003817 	ldw	r12,224(sp)
20082984:	d8801f17 	ldw	r2,124(sp)
20082988:	dac03517 	ldw	r11,212(sp)
2008298c:	1b07883a 	add	r3,r3,r12
20082990:	10800044 	addi	r2,r2,1
20082994:	42c00015 	stw	r11,0(r8)
20082998:	43000115 	stw	r12,4(r8)
2008299c:	d8c02015 	stw	r3,128(sp)
200829a0:	d8801f15 	stw	r2,124(sp)
200829a4:	010001c4 	movi	r4,7
200829a8:	20812e16 	blt	r4,r2,20082e64 <___vfprintf_internal_r+0x1d90>
200829ac:	42000204 	addi	r8,r8,8
200829b0:	0421c83a 	sub	r16,zero,r16
200829b4:	04005c0e 	bge	zero,r16,20082b28 <___vfprintf_internal_r+0x1a54>
200829b8:	04800404 	movi	r18,16
200829bc:	94009f0e 	bge	r18,r16,20082c3c <___vfprintf_internal_r+0x1b68>
200829c0:	01000034 	movhi	r4,0
200829c4:	21002b84 	addi	r4,r4,174
200829c8:	d9002c15 	stw	r4,176(sp)
200829cc:	054001c4 	movi	r21,7
200829d0:	00000306 	br	200829e0 <___vfprintf_internal_r+0x190c>
200829d4:	42000204 	addi	r8,r8,8
200829d8:	843ffc04 	addi	r16,r16,-16
200829dc:	94009a0e 	bge	r18,r16,20082c48 <___vfprintf_internal_r+0x1b74>
200829e0:	18c00404 	addi	r3,r3,16
200829e4:	10800044 	addi	r2,r2,1
200829e8:	45000015 	stw	r20,0(r8)
200829ec:	44800115 	stw	r18,4(r8)
200829f0:	d8c02015 	stw	r3,128(sp)
200829f4:	d8801f15 	stw	r2,124(sp)
200829f8:	a8bff60e 	bge	r21,r2,200829d4 <__flash_rwdata_start+0xffff0bd8>
200829fc:	b009883a 	mov	r4,r22
20082a00:	b80b883a 	mov	r5,r23
20082a04:	d9801e04 	addi	r6,sp,120
20082a08:	0087ea00 	call	20087ea0 <__sprint_r>
20082a0c:	103aa51e 	bne	r2,zero,200814a4 <__flash_rwdata_start+0xfffef6a8>
20082a10:	d8c02017 	ldw	r3,128(sp)
20082a14:	d8801f17 	ldw	r2,124(sp)
20082a18:	da000404 	addi	r8,sp,16
20082a1c:	003fee06 	br	200829d8 <__flash_rwdata_start+0xffff0bdc>
20082a20:	008011c4 	movi	r2,71
20082a24:	1400be16 	blt	r2,r16,20082d20 <___vfprintf_internal_r+0x1c4c>
20082a28:	03000034 	movhi	r12,0
20082a2c:	63001d04 	addi	r12,r12,116
20082a30:	db003115 	stw	r12,196(sp)
20082a34:	00c000c4 	movi	r3,3
20082a38:	00bfdfc4 	movi	r2,-129
20082a3c:	d8c02b15 	stw	r3,172(sp)
20082a40:	88a2703a 	and	r17,r17,r2
20082a44:	dd402783 	ldbu	r21,158(sp)
20082a48:	dcc02d15 	stw	r19,180(sp)
20082a4c:	1825883a 	mov	r18,r3
20082a50:	d8003215 	stw	zero,200(sp)
20082a54:	d8003415 	stw	zero,208(sp)
20082a58:	003af106 	br	20081620 <__flash_rwdata_start+0xfffef824>
20082a5c:	4825883a 	mov	r18,r9
20082a60:	003c9306 	br	20081cb0 <__flash_rwdata_start+0xfffefeb4>
20082a64:	db002d17 	ldw	r12,180(sp)
20082a68:	14c00017 	ldw	r19,0(r2)
20082a6c:	0039883a 	mov	fp,zero
20082a70:	63000104 	addi	r12,r12,4
20082a74:	db002d15 	stw	r12,180(sp)
20082a78:	003c4706 	br	20081b98 <__flash_rwdata_start+0xfffefd9c>
20082a7c:	00800034 	movhi	r2,0
20082a80:	10801b04 	addi	r2,r2,108
20082a84:	d8803115 	stw	r2,196(sp)
20082a88:	003bf106 	br	20081a50 <__flash_rwdata_start+0xfffefc54>
20082a8c:	b009883a 	mov	r4,r22
20082a90:	b80b883a 	mov	r5,r23
20082a94:	d9801e04 	addi	r6,sp,120
20082a98:	0087ea00 	call	20087ea0 <__sprint_r>
20082a9c:	103a811e 	bne	r2,zero,200814a4 <__flash_rwdata_start+0xfffef6a8>
20082aa0:	dc002617 	ldw	r16,152(sp)
20082aa4:	d8c02017 	ldw	r3,128(sp)
20082aa8:	da000404 	addi	r8,sp,16
20082aac:	003faf06 	br	2008296c <__flash_rwdata_start+0xffff0b70>
20082ab0:	db002e17 	ldw	r12,184(sp)
20082ab4:	1805883a 	mov	r2,r3
20082ab8:	dac02d15 	stw	r11,180(sp)
20082abc:	0319c83a 	sub	r12,zero,r12
20082ac0:	db002e15 	stw	r12,184(sp)
20082ac4:	003a8206 	br	200814d0 <__flash_rwdata_start+0xfffef6d4>
20082ac8:	18800044 	addi	r2,r3,1
20082acc:	8c400814 	ori	r17,r17,32
20082ad0:	1c000047 	ldb	r16,1(r3)
20082ad4:	0039e406 	br	20081268 <__flash_rwdata_start+0xfffef46c>
20082ad8:	b009883a 	mov	r4,r22
20082adc:	b80b883a 	mov	r5,r23
20082ae0:	d9801e04 	addi	r6,sp,120
20082ae4:	0087ea00 	call	20087ea0 <__sprint_r>
20082ae8:	103a6e1e 	bne	r2,zero,200814a4 <__flash_rwdata_start+0xfffef6a8>
20082aec:	d8c02017 	ldw	r3,128(sp)
20082af0:	da000404 	addi	r8,sp,16
20082af4:	003d0c06 	br	20081f28 <__flash_rwdata_start+0xffff012c>
20082af8:	db002817 	ldw	r12,160(sp)
20082afc:	d8c03117 	ldw	r3,196(sp)
20082b00:	60e5c83a 	sub	r18,r12,r3
20082b04:	003ac106 	br	2008160c <__flash_rwdata_start+0xfffef810>
20082b08:	b009883a 	mov	r4,r22
20082b0c:	b80b883a 	mov	r5,r23
20082b10:	d9801e04 	addi	r6,sp,120
20082b14:	0087ea00 	call	20087ea0 <__sprint_r>
20082b18:	103a621e 	bne	r2,zero,200814a4 <__flash_rwdata_start+0xfffef6a8>
20082b1c:	d8c02017 	ldw	r3,128(sp)
20082b20:	d8801f17 	ldw	r2,124(sp)
20082b24:	da000404 	addi	r8,sp,16
20082b28:	db003317 	ldw	r12,204(sp)
20082b2c:	dac03117 	ldw	r11,196(sp)
20082b30:	10800044 	addi	r2,r2,1
20082b34:	1b07883a 	add	r3,r3,r12
20082b38:	42c00015 	stw	r11,0(r8)
20082b3c:	43000115 	stw	r12,4(r8)
20082b40:	d8c02015 	stw	r3,128(sp)
20082b44:	d8801f15 	stw	r2,124(sp)
20082b48:	010001c4 	movi	r4,7
20082b4c:	20bb460e 	bge	r4,r2,20081868 <__flash_rwdata_start+0xfffefa6c>
20082b50:	003d8506 	br	20082168 <__flash_rwdata_start+0xffff036c>
20082b54:	da003f15 	stw	r8,252(sp)
20082b58:	008103c0 	call	2008103c <strlen>
20082b5c:	1025883a 	mov	r18,r2
20082b60:	da003f17 	ldw	r8,252(sp)
20082b64:	903c540e 	bge	r18,zero,20081cb8 <__flash_rwdata_start+0xfffefebc>
20082b68:	0005883a 	mov	r2,zero
20082b6c:	003c5206 	br	20081cb8 <__flash_rwdata_start+0xfffefebc>
20082b70:	01000034 	movhi	r4,0
20082b74:	21002f84 	addi	r4,r4,190
20082b78:	d9003615 	stw	r4,216(sp)
20082b7c:	003adc06 	br	200816f0 <__flash_rwdata_start+0xfffef8f4>
20082b80:	d8802604 	addi	r2,sp,152
20082b84:	d8800115 	stw	r2,4(sp)
20082b88:	d9403717 	ldw	r5,220(sp)
20082b8c:	d8802504 	addi	r2,sp,148
20082b90:	d8800215 	stw	r2,8(sp)
20082b94:	d8802104 	addi	r2,sp,132
20082b98:	da400015 	stw	r9,0(sp)
20082b9c:	d8800315 	stw	r2,12(sp)
20082ba0:	b009883a 	mov	r4,r22
20082ba4:	900d883a 	mov	r6,r18
20082ba8:	01c000c4 	movi	r7,3
20082bac:	da003f15 	stw	r8,252(sp)
20082bb0:	da403e15 	stw	r9,248(sp)
20082bb4:	00835ec0 	call	200835ec <_dtoa_r>
20082bb8:	da403e17 	ldw	r9,248(sp)
20082bbc:	da003f17 	ldw	r8,252(sp)
20082bc0:	d8803115 	stw	r2,196(sp)
20082bc4:	4839883a 	mov	fp,r9
20082bc8:	dac03117 	ldw	r11,196(sp)
20082bcc:	00801184 	movi	r2,70
20082bd0:	5f15883a 	add	r10,r11,fp
20082bd4:	a8bef01e 	bne	r21,r2,20082798 <__flash_rwdata_start+0xffff099c>
20082bd8:	59000007 	ldb	r4,0(r11)
20082bdc:	00800c04 	movi	r2,48
20082be0:	2080d526 	beq	r4,r2,20082f38 <___vfprintf_internal_r+0x1e64>
20082be4:	d8c02617 	ldw	r3,152(sp)
20082be8:	50d5883a 	add	r10,r10,r3
20082bec:	003eea06 	br	20082798 <__flash_rwdata_start+0xffff099c>
20082bf0:	0025883a 	mov	r18,zero
20082bf4:	003db306 	br	200822c4 <__flash_rwdata_start+0xffff04c8>
20082bf8:	b009883a 	mov	r4,r22
20082bfc:	b80b883a 	mov	r5,r23
20082c00:	d9801e04 	addi	r6,sp,120
20082c04:	0087ea00 	call	20087ea0 <__sprint_r>
20082c08:	103a261e 	bne	r2,zero,200814a4 <__flash_rwdata_start+0xfffef6a8>
20082c0c:	d8c02017 	ldw	r3,128(sp)
20082c10:	da000404 	addi	r8,sp,16
20082c14:	003daa06 	br	200822c0 <__flash_rwdata_start+0xffff04c4>
20082c18:	b009883a 	mov	r4,r22
20082c1c:	b80b883a 	mov	r5,r23
20082c20:	d9801e04 	addi	r6,sp,120
20082c24:	0087ea00 	call	20087ea0 <__sprint_r>
20082c28:	103a1e1e 	bne	r2,zero,200814a4 <__flash_rwdata_start+0xfffef6a8>
20082c2c:	d8802617 	ldw	r2,152(sp)
20082c30:	d8c02017 	ldw	r3,128(sp)
20082c34:	da000404 	addi	r8,sp,16
20082c38:	003e2c06 	br	200824ec <__flash_rwdata_start+0xffff06f0>
20082c3c:	03000034 	movhi	r12,0
20082c40:	63002b84 	addi	r12,r12,174
20082c44:	db002c15 	stw	r12,176(sp)
20082c48:	dac02c17 	ldw	r11,176(sp)
20082c4c:	1c07883a 	add	r3,r3,r16
20082c50:	10800044 	addi	r2,r2,1
20082c54:	42c00015 	stw	r11,0(r8)
20082c58:	44000115 	stw	r16,4(r8)
20082c5c:	d8c02015 	stw	r3,128(sp)
20082c60:	d8801f15 	stw	r2,124(sp)
20082c64:	010001c4 	movi	r4,7
20082c68:	20bfa716 	blt	r4,r2,20082b08 <__flash_rwdata_start+0xffff0d0c>
20082c6c:	42000204 	addi	r8,r8,8
20082c70:	003fad06 	br	20082b28 <__flash_rwdata_start+0xffff0d2c>
20082c74:	00800184 	movi	r2,6
20082c78:	1240012e 	bgeu	r2,r9,20082c80 <___vfprintf_internal_r+0x1bac>
20082c7c:	1013883a 	mov	r9,r2
20082c80:	4825883a 	mov	r18,r9
20082c84:	4805883a 	mov	r2,r9
20082c88:	4800c216 	blt	r9,zero,20082f94 <___vfprintf_internal_r+0x1ec0>
20082c8c:	d8802b15 	stw	r2,172(sp)
20082c90:	00800034 	movhi	r2,0
20082c94:	10802904 	addi	r2,r2,164
20082c98:	d8803115 	stw	r2,196(sp)
20082c9c:	dcc02d15 	stw	r19,180(sp)
20082ca0:	d8003215 	stw	zero,200(sp)
20082ca4:	d8003415 	stw	zero,208(sp)
20082ca8:	0005883a 	mov	r2,zero
20082cac:	003a6306 	br	2008163c <__flash_rwdata_start+0xfffef840>
20082cb0:	0021883a 	mov	r16,zero
20082cb4:	003e1f06 	br	20082534 <__flash_rwdata_start+0xffff0738>
20082cb8:	b009883a 	mov	r4,r22
20082cbc:	b80b883a 	mov	r5,r23
20082cc0:	d9801e04 	addi	r6,sp,120
20082cc4:	0087ea00 	call	20087ea0 <__sprint_r>
20082cc8:	1039f61e 	bne	r2,zero,200814a4 <__flash_rwdata_start+0xfffef6a8>
20082ccc:	d8802617 	ldw	r2,152(sp)
20082cd0:	db003317 	ldw	r12,204(sp)
20082cd4:	d8c02017 	ldw	r3,128(sp)
20082cd8:	da000404 	addi	r8,sp,16
20082cdc:	6085c83a 	sub	r2,r12,r2
20082ce0:	003e1306 	br	20082530 <__flash_rwdata_start+0xffff0734>
20082ce4:	03000034 	movhi	r12,0
20082ce8:	63002f84 	addi	r12,r12,190
20082cec:	db003615 	stw	r12,216(sp)
20082cf0:	003b0206 	br	200818fc <__flash_rwdata_start+0xfffefb00>
20082cf4:	00c00b44 	movi	r3,45
20082cf8:	d8802b15 	stw	r2,172(sp)
20082cfc:	dc402d17 	ldw	r17,180(sp)
20082d00:	d8c02785 	stb	r3,158(sp)
20082d04:	dcc02d15 	stw	r19,180(sp)
20082d08:	d8003215 	stw	zero,200(sp)
20082d0c:	00800b44 	movi	r2,45
20082d10:	003a4706 	br	20081630 <__flash_rwdata_start+0xfffef834>
20082d14:	05400b44 	movi	r21,45
20082d18:	dd402785 	stb	r21,158(sp)
20082d1c:	003b4706 	br	20081a3c <__flash_rwdata_start+0xfffefc40>
20082d20:	00800034 	movhi	r2,0
20082d24:	10801e04 	addi	r2,r2,120
20082d28:	d8803115 	stw	r2,196(sp)
20082d2c:	003f4106 	br	20082a34 <__flash_rwdata_start+0xffff0c38>
20082d30:	d8c02617 	ldw	r3,152(sp)
20082d34:	00bfff44 	movi	r2,-3
20082d38:	18801116 	blt	r3,r2,20082d80 <___vfprintf_internal_r+0x1cac>
20082d3c:	48c01016 	blt	r9,r3,20082d80 <___vfprintf_internal_r+0x1cac>
20082d40:	d8c03415 	stw	r3,208(sp)
20082d44:	040019c4 	movi	r16,103
20082d48:	003eb206 	br	20082814 <__flash_rwdata_start+0xffff0a18>
20082d4c:	01000034 	movhi	r4,0
20082d50:	21002b84 	addi	r4,r4,174
20082d54:	d9002c15 	stw	r4,176(sp)
20082d58:	003cb106 	br	20082020 <__flash_rwdata_start+0xffff0224>
20082d5c:	5005883a 	mov	r2,r10
20082d60:	003ea106 	br	200827e8 <__flash_rwdata_start+0xffff09ec>
20082d64:	da402b15 	stw	r9,172(sp)
20082d68:	dd402783 	ldbu	r21,158(sp)
20082d6c:	4825883a 	mov	r18,r9
20082d70:	dcc02d15 	stw	r19,180(sp)
20082d74:	d8003215 	stw	zero,200(sp)
20082d78:	d8003415 	stw	zero,208(sp)
20082d7c:	003a2806 	br	20081620 <__flash_rwdata_start+0xfffef824>
20082d80:	843fff84 	addi	r16,r16,-2
20082d84:	1f3fffc4 	addi	fp,r3,-1
20082d88:	df002615 	stw	fp,152(sp)
20082d8c:	dc0022c5 	stb	r16,139(sp)
20082d90:	e0009816 	blt	fp,zero,20082ff4 <___vfprintf_internal_r+0x1f20>
20082d94:	00800ac4 	movi	r2,43
20082d98:	d8802305 	stb	r2,140(sp)
20082d9c:	00800244 	movi	r2,9
20082da0:	1700750e 	bge	r2,fp,20082f78 <___vfprintf_internal_r+0x1ea4>
20082da4:	dd4022c4 	addi	r21,sp,139
20082da8:	dc002c15 	stw	r16,176(sp)
20082dac:	4025883a 	mov	r18,r8
20082db0:	a821883a 	mov	r16,r21
20082db4:	e009883a 	mov	r4,fp
20082db8:	01400284 	movi	r5,10
20082dbc:	008a7700 	call	2008a770 <__modsi3>
20082dc0:	10800c04 	addi	r2,r2,48
20082dc4:	843fffc4 	addi	r16,r16,-1
20082dc8:	e009883a 	mov	r4,fp
20082dcc:	01400284 	movi	r5,10
20082dd0:	80800005 	stb	r2,0(r16)
20082dd4:	008a71c0 	call	2008a71c <__divsi3>
20082dd8:	1039883a 	mov	fp,r2
20082ddc:	00800244 	movi	r2,9
20082de0:	173ff416 	blt	r2,fp,20082db4 <__flash_rwdata_start+0xffff0fb8>
20082de4:	9011883a 	mov	r8,r18
20082de8:	e0800c04 	addi	r2,fp,48
20082dec:	8025883a 	mov	r18,r16
20082df0:	913fffc4 	addi	r4,r18,-1
20082df4:	90bfffc5 	stb	r2,-1(r18)
20082df8:	dc002c17 	ldw	r16,176(sp)
20082dfc:	2540852e 	bgeu	r4,r21,20083014 <___vfprintf_internal_r+0x1f40>
20082e00:	d9402384 	addi	r5,sp,142
20082e04:	2c8bc83a 	sub	r5,r5,r18
20082e08:	d8c02344 	addi	r3,sp,141
20082e0c:	a94b883a 	add	r5,r21,r5
20082e10:	00000106 	br	20082e18 <___vfprintf_internal_r+0x1d44>
20082e14:	20800003 	ldbu	r2,0(r4)
20082e18:	18800005 	stb	r2,0(r3)
20082e1c:	18c00044 	addi	r3,r3,1
20082e20:	21000044 	addi	r4,r4,1
20082e24:	197ffb1e 	bne	r3,r5,20082e14 <__flash_rwdata_start+0xffff1018>
20082e28:	d8802304 	addi	r2,sp,140
20082e2c:	1485c83a 	sub	r2,r2,r18
20082e30:	d8c02344 	addi	r3,sp,141
20082e34:	1885883a 	add	r2,r3,r2
20082e38:	dac03317 	ldw	r11,204(sp)
20082e3c:	156bc83a 	sub	r21,r2,r21
20082e40:	dd403a15 	stw	r21,232(sp)
20082e44:	00800044 	movi	r2,1
20082e48:	5d65883a 	add	r18,r11,r21
20082e4c:	12c0660e 	bge	r2,r11,20082fe8 <___vfprintf_internal_r+0x1f14>
20082e50:	94800044 	addi	r18,r18,1
20082e54:	9005883a 	mov	r2,r18
20082e58:	90006116 	blt	r18,zero,20082fe0 <___vfprintf_internal_r+0x1f0c>
20082e5c:	d8003415 	stw	zero,208(sp)
20082e60:	003e7406 	br	20082834 <__flash_rwdata_start+0xffff0a38>
20082e64:	b009883a 	mov	r4,r22
20082e68:	b80b883a 	mov	r5,r23
20082e6c:	d9801e04 	addi	r6,sp,120
20082e70:	0087ea00 	call	20087ea0 <__sprint_r>
20082e74:	10398b1e 	bne	r2,zero,200814a4 <__flash_rwdata_start+0xfffef6a8>
20082e78:	dc002617 	ldw	r16,152(sp)
20082e7c:	d8c02017 	ldw	r3,128(sp)
20082e80:	d8801f17 	ldw	r2,124(sp)
20082e84:	da000404 	addi	r8,sp,16
20082e88:	003ec906 	br	200829b0 <__flash_rwdata_start+0xffff0bb4>
20082e8c:	483e1c1e 	bne	r9,zero,20082700 <__flash_rwdata_start+0xffff0904>
20082e90:	9013883a 	mov	r9,r18
20082e94:	003e1a06 	br	20082700 <__flash_rwdata_start+0xffff0904>
20082e98:	02400184 	movi	r9,6
20082e9c:	003e1806 	br	20082700 <__flash_rwdata_start+0xffff0904>
20082ea0:	d8c03417 	ldw	r3,208(sp)
20082ea4:	00c04b0e 	bge	zero,r3,20082fd4 <___vfprintf_internal_r+0x1f00>
20082ea8:	04800044 	movi	r18,1
20082eac:	dac03317 	ldw	r11,204(sp)
20082eb0:	92e5883a 	add	r18,r18,r11
20082eb4:	9005883a 	mov	r2,r18
20082eb8:	903e5e0e 	bge	r18,zero,20082834 <__flash_rwdata_start+0xffff0a38>
20082ebc:	0005883a 	mov	r2,zero
20082ec0:	003e5c06 	br	20082834 <__flash_rwdata_start+0xffff0a38>
20082ec4:	00c00b44 	movi	r3,45
20082ec8:	64a0003c 	xorhi	r18,r12,32768
20082ecc:	d8c02b05 	stb	r3,172(sp)
20082ed0:	003e1106 	br	20082718 <__flash_rwdata_start+0xffff091c>
20082ed4:	4f000044 	addi	fp,r9,1
20082ed8:	003e1606 	br	20082734 <__flash_rwdata_start+0xffff0938>
20082edc:	d8c02617 	ldw	r3,152(sp)
20082ee0:	d8c03415 	stw	r3,208(sp)
20082ee4:	00c0350e 	bge	zero,r3,20082fbc <___vfprintf_internal_r+0x1ee8>
20082ee8:	4800081e 	bne	r9,zero,20082f0c <___vfprintf_internal_r+0x1e38>
20082eec:	8c40004c 	andi	r17,r17,1
20082ef0:	8800061e 	bne	r17,zero,20082f0c <___vfprintf_internal_r+0x1e38>
20082ef4:	1805883a 	mov	r2,r3
20082ef8:	183e4d0e 	bge	r3,zero,20082830 <__flash_rwdata_start+0xffff0a34>
20082efc:	0005883a 	mov	r2,zero
20082f00:	003e4b06 	br	20082830 <__flash_rwdata_start+0xffff0a34>
20082f04:	d8802117 	ldw	r2,132(sp)
20082f08:	003e3706 	br	200827e8 <__flash_rwdata_start+0xffff09ec>
20082f0c:	dac03417 	ldw	r11,208(sp)
20082f10:	4a400044 	addi	r9,r9,1
20082f14:	5a65883a 	add	r18,r11,r9
20082f18:	9005883a 	mov	r2,r18
20082f1c:	903e450e 	bge	r18,zero,20082834 <__flash_rwdata_start+0xffff0a38>
20082f20:	003fe606 	br	20082ebc <__flash_rwdata_start+0xffff10c0>
20082f24:	db003417 	ldw	r12,208(sp)
20082f28:	64800044 	addi	r18,r12,1
20082f2c:	9005883a 	mov	r2,r18
20082f30:	903e400e 	bge	r18,zero,20082834 <__flash_rwdata_start+0xffff0a38>
20082f34:	003fe106 	br	20082ebc <__flash_rwdata_start+0xffff10c0>
20082f38:	d9003717 	ldw	r4,220(sp)
20082f3c:	900b883a 	mov	r5,r18
20082f40:	000d883a 	mov	r6,zero
20082f44:	000f883a 	mov	r7,zero
20082f48:	da003f15 	stw	r8,252(sp)
20082f4c:	da403e15 	stw	r9,248(sp)
20082f50:	da803d15 	stw	r10,244(sp)
20082f54:	008b9440 	call	2008b944 <__eqdf2>
20082f58:	da003f17 	ldw	r8,252(sp)
20082f5c:	da403e17 	ldw	r9,248(sp)
20082f60:	da803d17 	ldw	r10,244(sp)
20082f64:	103f1f26 	beq	r2,zero,20082be4 <__flash_rwdata_start+0xffff0de8>
20082f68:	00800044 	movi	r2,1
20082f6c:	1707c83a 	sub	r3,r2,fp
20082f70:	d8c02615 	stw	r3,152(sp)
20082f74:	003f1c06 	br	20082be8 <__flash_rwdata_start+0xffff0dec>
20082f78:	00800c04 	movi	r2,48
20082f7c:	e0c00c04 	addi	r3,fp,48
20082f80:	d8802345 	stb	r2,141(sp)
20082f84:	d8c02385 	stb	r3,142(sp)
20082f88:	d88023c4 	addi	r2,sp,143
20082f8c:	dd4022c4 	addi	r21,sp,139
20082f90:	003fa906 	br	20082e38 <__flash_rwdata_start+0xffff103c>
20082f94:	0005883a 	mov	r2,zero
20082f98:	003f3c06 	br	20082c8c <__flash_rwdata_start+0xffff0e90>
20082f9c:	dac02d17 	ldw	r11,180(sp)
20082fa0:	5a400017 	ldw	r9,0(r11)
20082fa4:	5ac00104 	addi	r11,r11,4
20082fa8:	dac02d15 	stw	r11,180(sp)
20082fac:	483ec80e 	bge	r9,zero,20082ad0 <__flash_rwdata_start+0xffff0cd4>
20082fb0:	027fffc4 	movi	r9,-1
20082fb4:	1c000047 	ldb	r16,1(r3)
20082fb8:	0038ab06 	br	20081268 <__flash_rwdata_start+0xfffef46c>
20082fbc:	4800111e 	bne	r9,zero,20083004 <___vfprintf_internal_r+0x1f30>
20082fc0:	8c40004c 	andi	r17,r17,1
20082fc4:	88000f1e 	bne	r17,zero,20083004 <___vfprintf_internal_r+0x1f30>
20082fc8:	00800044 	movi	r2,1
20082fcc:	1025883a 	mov	r18,r2
20082fd0:	003e1806 	br	20082834 <__flash_rwdata_start+0xffff0a38>
20082fd4:	04800084 	movi	r18,2
20082fd8:	90e5c83a 	sub	r18,r18,r3
20082fdc:	003fb306 	br	20082eac <__flash_rwdata_start+0xffff10b0>
20082fe0:	0005883a 	mov	r2,zero
20082fe4:	003f9d06 	br	20082e5c <__flash_rwdata_start+0xffff1060>
20082fe8:	88a2703a 	and	r17,r17,r2
20082fec:	883f9926 	beq	r17,zero,20082e54 <__flash_rwdata_start+0xffff1058>
20082ff0:	003f9706 	br	20082e50 <__flash_rwdata_start+0xffff1054>
20082ff4:	00800b44 	movi	r2,45
20082ff8:	0739c83a 	sub	fp,zero,fp
20082ffc:	d8802305 	stb	r2,140(sp)
20083000:	003f6606 	br	20082d9c <__flash_rwdata_start+0xffff0fa0>
20083004:	4c800084 	addi	r18,r9,2
20083008:	9005883a 	mov	r2,r18
2008300c:	903e090e 	bge	r18,zero,20082834 <__flash_rwdata_start+0xffff0a38>
20083010:	003faa06 	br	20082ebc <__flash_rwdata_start+0xffff10c0>
20083014:	d8802344 	addi	r2,sp,141
20083018:	003f8706 	br	20082e38 <__flash_rwdata_start+0xffff103c>
2008301c:	d8c02617 	ldw	r3,152(sp)
20083020:	003f5806 	br	20082d84 <__flash_rwdata_start+0xffff0f88>

20083024 <__vfprintf_internal>:
20083024:	2007883a 	mov	r3,r4
20083028:	01000034 	movhi	r4,0
2008302c:	21095004 	addi	r4,r4,9536
20083030:	21000017 	ldw	r4,0(r4)
20083034:	2805883a 	mov	r2,r5
20083038:	300f883a 	mov	r7,r6
2008303c:	180b883a 	mov	r5,r3
20083040:	100d883a 	mov	r6,r2
20083044:	00810d41 	jmpi	200810d4 <___vfprintf_internal_r>

20083048 <__sbprintf>:
20083048:	2880030b 	ldhu	r2,12(r5)
2008304c:	2ac01917 	ldw	r11,100(r5)
20083050:	2a80038b 	ldhu	r10,14(r5)
20083054:	2a400717 	ldw	r9,28(r5)
20083058:	2a000917 	ldw	r8,36(r5)
2008305c:	defee204 	addi	sp,sp,-1144
20083060:	00c10004 	movi	r3,1024
20083064:	dc011a15 	stw	r16,1128(sp)
20083068:	10bfff4c 	andi	r2,r2,65533
2008306c:	2821883a 	mov	r16,r5
20083070:	d8cb883a 	add	r5,sp,r3
20083074:	dc811c15 	stw	r18,1136(sp)
20083078:	dc411b15 	stw	r17,1132(sp)
2008307c:	dfc11d15 	stw	ra,1140(sp)
20083080:	2025883a 	mov	r18,r4
20083084:	d881030d 	sth	r2,1036(sp)
20083088:	dac11915 	stw	r11,1124(sp)
2008308c:	da81038d 	sth	r10,1038(sp)
20083090:	da410715 	stw	r9,1052(sp)
20083094:	da010915 	stw	r8,1060(sp)
20083098:	dec10015 	stw	sp,1024(sp)
2008309c:	dec10415 	stw	sp,1040(sp)
200830a0:	d8c10215 	stw	r3,1032(sp)
200830a4:	d8c10515 	stw	r3,1044(sp)
200830a8:	d8010615 	stw	zero,1048(sp)
200830ac:	00810d40 	call	200810d4 <___vfprintf_internal_r>
200830b0:	1023883a 	mov	r17,r2
200830b4:	10000416 	blt	r2,zero,200830c8 <__sbprintf+0x80>
200830b8:	9009883a 	mov	r4,r18
200830bc:	d9410004 	addi	r5,sp,1024
200830c0:	0084f1c0 	call	20084f1c <_fflush_r>
200830c4:	10000d1e 	bne	r2,zero,200830fc <__sbprintf+0xb4>
200830c8:	d8c1030b 	ldhu	r3,1036(sp)
200830cc:	18c0100c 	andi	r3,r3,64
200830d0:	18000326 	beq	r3,zero,200830e0 <__sbprintf+0x98>
200830d4:	8080030b 	ldhu	r2,12(r16)
200830d8:	10801014 	ori	r2,r2,64
200830dc:	8080030d 	sth	r2,12(r16)
200830e0:	8805883a 	mov	r2,r17
200830e4:	dfc11d17 	ldw	ra,1140(sp)
200830e8:	dc811c17 	ldw	r18,1136(sp)
200830ec:	dc411b17 	ldw	r17,1132(sp)
200830f0:	dc011a17 	ldw	r16,1128(sp)
200830f4:	dec11e04 	addi	sp,sp,1144
200830f8:	f800283a 	ret
200830fc:	047fffc4 	movi	r17,-1
20083100:	003ff106 	br	200830c8 <__flash_rwdata_start+0xffff12cc>

20083104 <__swsetup_r>:
20083104:	00800034 	movhi	r2,0
20083108:	defffd04 	addi	sp,sp,-12
2008310c:	10895004 	addi	r2,r2,9536
20083110:	dc400115 	stw	r17,4(sp)
20083114:	2023883a 	mov	r17,r4
20083118:	11000017 	ldw	r4,0(r2)
2008311c:	dc000015 	stw	r16,0(sp)
20083120:	dfc00215 	stw	ra,8(sp)
20083124:	2821883a 	mov	r16,r5
20083128:	20000226 	beq	r4,zero,20083134 <__swsetup_r+0x30>
2008312c:	20c00e17 	ldw	r3,56(r4)
20083130:	18003126 	beq	r3,zero,200831f8 <__swsetup_r+0xf4>
20083134:	8080030b 	ldhu	r2,12(r16)
20083138:	10c0020c 	andi	r3,r2,8
2008313c:	100d883a 	mov	r6,r2
20083140:	18000f26 	beq	r3,zero,20083180 <__swsetup_r+0x7c>
20083144:	80c00417 	ldw	r3,16(r16)
20083148:	18001526 	beq	r3,zero,200831a0 <__swsetup_r+0x9c>
2008314c:	1100004c 	andi	r4,r2,1
20083150:	20001c1e 	bne	r4,zero,200831c4 <__swsetup_r+0xc0>
20083154:	1080008c 	andi	r2,r2,2
20083158:	1000291e 	bne	r2,zero,20083200 <__swsetup_r+0xfc>
2008315c:	80800517 	ldw	r2,20(r16)
20083160:	80800215 	stw	r2,8(r16)
20083164:	18001c26 	beq	r3,zero,200831d8 <__swsetup_r+0xd4>
20083168:	0005883a 	mov	r2,zero
2008316c:	dfc00217 	ldw	ra,8(sp)
20083170:	dc400117 	ldw	r17,4(sp)
20083174:	dc000017 	ldw	r16,0(sp)
20083178:	dec00304 	addi	sp,sp,12
2008317c:	f800283a 	ret
20083180:	3080040c 	andi	r2,r6,16
20083184:	10002e26 	beq	r2,zero,20083240 <__swsetup_r+0x13c>
20083188:	3080010c 	andi	r2,r6,4
2008318c:	10001e1e 	bne	r2,zero,20083208 <__swsetup_r+0x104>
20083190:	80c00417 	ldw	r3,16(r16)
20083194:	30800214 	ori	r2,r6,8
20083198:	8080030d 	sth	r2,12(r16)
2008319c:	183feb1e 	bne	r3,zero,2008314c <__flash_rwdata_start+0xffff1350>
200831a0:	1140a00c 	andi	r5,r2,640
200831a4:	01008004 	movi	r4,512
200831a8:	293fe826 	beq	r5,r4,2008314c <__flash_rwdata_start+0xffff1350>
200831ac:	8809883a 	mov	r4,r17
200831b0:	800b883a 	mov	r5,r16
200831b4:	0085e840 	call	20085e84 <__smakebuf_r>
200831b8:	8080030b 	ldhu	r2,12(r16)
200831bc:	80c00417 	ldw	r3,16(r16)
200831c0:	003fe206 	br	2008314c <__flash_rwdata_start+0xffff1350>
200831c4:	80800517 	ldw	r2,20(r16)
200831c8:	80000215 	stw	zero,8(r16)
200831cc:	0085c83a 	sub	r2,zero,r2
200831d0:	80800615 	stw	r2,24(r16)
200831d4:	183fe41e 	bne	r3,zero,20083168 <__flash_rwdata_start+0xffff136c>
200831d8:	80c0030b 	ldhu	r3,12(r16)
200831dc:	0005883a 	mov	r2,zero
200831e0:	1900200c 	andi	r4,r3,128
200831e4:	203fe126 	beq	r4,zero,2008316c <__flash_rwdata_start+0xffff1370>
200831e8:	18c01014 	ori	r3,r3,64
200831ec:	80c0030d 	sth	r3,12(r16)
200831f0:	00bfffc4 	movi	r2,-1
200831f4:	003fdd06 	br	2008316c <__flash_rwdata_start+0xffff1370>
200831f8:	00852f80 	call	200852f8 <__sinit>
200831fc:	003fcd06 	br	20083134 <__flash_rwdata_start+0xffff1338>
20083200:	0005883a 	mov	r2,zero
20083204:	003fd606 	br	20083160 <__flash_rwdata_start+0xffff1364>
20083208:	81400c17 	ldw	r5,48(r16)
2008320c:	28000626 	beq	r5,zero,20083228 <__swsetup_r+0x124>
20083210:	80801004 	addi	r2,r16,64
20083214:	28800326 	beq	r5,r2,20083224 <__swsetup_r+0x120>
20083218:	8809883a 	mov	r4,r17
2008321c:	008546c0 	call	2008546c <_free_r>
20083220:	8180030b 	ldhu	r6,12(r16)
20083224:	80000c15 	stw	zero,48(r16)
20083228:	80c00417 	ldw	r3,16(r16)
2008322c:	00bff6c4 	movi	r2,-37
20083230:	118c703a 	and	r6,r2,r6
20083234:	80000115 	stw	zero,4(r16)
20083238:	80c00015 	stw	r3,0(r16)
2008323c:	003fd506 	br	20083194 <__flash_rwdata_start+0xffff1398>
20083240:	00800244 	movi	r2,9
20083244:	88800015 	stw	r2,0(r17)
20083248:	30801014 	ori	r2,r6,64
2008324c:	8080030d 	sth	r2,12(r16)
20083250:	00bfffc4 	movi	r2,-1
20083254:	003fc506 	br	2008316c <__flash_rwdata_start+0xffff1370>

20083258 <__call_exitprocs>:
20083258:	00800034 	movhi	r2,0
2008325c:	10894f04 	addi	r2,r2,9532
20083260:	10800017 	ldw	r2,0(r2)
20083264:	defff404 	addi	sp,sp,-48
20083268:	dd800815 	stw	r22,32(sp)
2008326c:	d8800015 	stw	r2,0(sp)
20083270:	10805204 	addi	r2,r2,328
20083274:	dd000615 	stw	r20,24(sp)
20083278:	dc800415 	stw	r18,16(sp)
2008327c:	dfc00b15 	stw	ra,44(sp)
20083280:	df000a15 	stw	fp,40(sp)
20083284:	ddc00915 	stw	r23,36(sp)
20083288:	dd400715 	stw	r21,28(sp)
2008328c:	dcc00515 	stw	r19,20(sp)
20083290:	dc400315 	stw	r17,12(sp)
20083294:	dc000215 	stw	r16,8(sp)
20083298:	2025883a 	mov	r18,r4
2008329c:	2829883a 	mov	r20,r5
200832a0:	d8800115 	stw	r2,4(sp)
200832a4:	05bfffc4 	movi	r22,-1
200832a8:	d8800017 	ldw	r2,0(sp)
200832ac:	14c05217 	ldw	r19,328(r2)
200832b0:	98001d26 	beq	r19,zero,20083328 <__call_exitprocs+0xd0>
200832b4:	dd400117 	ldw	r21,4(sp)
200832b8:	98800117 	ldw	r2,4(r19)
200832bc:	173fffc4 	addi	fp,r2,-1
200832c0:	e0000d16 	blt	fp,zero,200832f8 <__call_exitprocs+0xa0>
200832c4:	14000044 	addi	r16,r2,1
200832c8:	8421883a 	add	r16,r16,r16
200832cc:	8421883a 	add	r16,r16,r16
200832d0:	84402004 	addi	r17,r16,128
200832d4:	9c63883a 	add	r17,r19,r17
200832d8:	9c21883a 	add	r16,r19,r16
200832dc:	a0001e26 	beq	r20,zero,20083358 <__call_exitprocs+0x100>
200832e0:	80804017 	ldw	r2,256(r16)
200832e4:	15001c26 	beq	r2,r20,20083358 <__call_exitprocs+0x100>
200832e8:	e73fffc4 	addi	fp,fp,-1
200832ec:	843fff04 	addi	r16,r16,-4
200832f0:	8c7fff04 	addi	r17,r17,-4
200832f4:	e5bff91e 	bne	fp,r22,200832dc <__flash_rwdata_start+0xffff14e0>
200832f8:	00880234 	movhi	r2,8200
200832fc:	1081ba04 	addi	r2,r2,1768
20083300:	10000926 	beq	r2,zero,20083328 <__call_exitprocs+0xd0>
20083304:	98800117 	ldw	r2,4(r19)
20083308:	1000311e 	bne	r2,zero,200833d0 <__call_exitprocs+0x178>
2008330c:	98800017 	ldw	r2,0(r19)
20083310:	10003426 	beq	r2,zero,200833e4 <__call_exitprocs+0x18c>
20083314:	9809883a 	mov	r4,r19
20083318:	a8800015 	stw	r2,0(r21)
2008331c:	00806e80 	call	200806e8 <free>
20083320:	acc00017 	ldw	r19,0(r21)
20083324:	983fe41e 	bne	r19,zero,200832b8 <__flash_rwdata_start+0xffff14bc>
20083328:	dfc00b17 	ldw	ra,44(sp)
2008332c:	df000a17 	ldw	fp,40(sp)
20083330:	ddc00917 	ldw	r23,36(sp)
20083334:	dd800817 	ldw	r22,32(sp)
20083338:	dd400717 	ldw	r21,28(sp)
2008333c:	dd000617 	ldw	r20,24(sp)
20083340:	dcc00517 	ldw	r19,20(sp)
20083344:	dc800417 	ldw	r18,16(sp)
20083348:	dc400317 	ldw	r17,12(sp)
2008334c:	dc000217 	ldw	r16,8(sp)
20083350:	dec00c04 	addi	sp,sp,48
20083354:	f800283a 	ret
20083358:	98800117 	ldw	r2,4(r19)
2008335c:	80c00017 	ldw	r3,0(r16)
20083360:	10bfffc4 	addi	r2,r2,-1
20083364:	17001526 	beq	r2,fp,200833bc <__call_exitprocs+0x164>
20083368:	80000015 	stw	zero,0(r16)
2008336c:	183fde26 	beq	r3,zero,200832e8 <__flash_rwdata_start+0xffff14ec>
20083370:	00800044 	movi	r2,1
20083374:	1708983a 	sll	r4,r2,fp
20083378:	98806217 	ldw	r2,392(r19)
2008337c:	9dc00117 	ldw	r23,4(r19)
20083380:	2084703a 	and	r2,r4,r2
20083384:	1000061e 	bne	r2,zero,200833a0 <__call_exitprocs+0x148>
20083388:	183ee83a 	callr	r3
2008338c:	98800117 	ldw	r2,4(r19)
20083390:	15ffc51e 	bne	r2,r23,200832a8 <__flash_rwdata_start+0xffff14ac>
20083394:	a8800017 	ldw	r2,0(r21)
20083398:	14ffd326 	beq	r2,r19,200832e8 <__flash_rwdata_start+0xffff14ec>
2008339c:	003fc206 	br	200832a8 <__flash_rwdata_start+0xffff14ac>
200833a0:	98806317 	ldw	r2,396(r19)
200833a4:	2084703a 	and	r2,r4,r2
200833a8:	1000061e 	bne	r2,zero,200833c4 <__call_exitprocs+0x16c>
200833ac:	89400017 	ldw	r5,0(r17)
200833b0:	9009883a 	mov	r4,r18
200833b4:	183ee83a 	callr	r3
200833b8:	003ff406 	br	2008338c <__flash_rwdata_start+0xffff1590>
200833bc:	9f000115 	stw	fp,4(r19)
200833c0:	003fea06 	br	2008336c <__flash_rwdata_start+0xffff1570>
200833c4:	89000017 	ldw	r4,0(r17)
200833c8:	183ee83a 	callr	r3
200833cc:	003fef06 	br	2008338c <__flash_rwdata_start+0xffff1590>
200833d0:	98800017 	ldw	r2,0(r19)
200833d4:	982b883a 	mov	r21,r19
200833d8:	1027883a 	mov	r19,r2
200833dc:	983fb61e 	bne	r19,zero,200832b8 <__flash_rwdata_start+0xffff14bc>
200833e0:	003fd106 	br	20083328 <__flash_rwdata_start+0xffff152c>
200833e4:	0005883a 	mov	r2,zero
200833e8:	003ffa06 	br	200833d4 <__flash_rwdata_start+0xffff15d8>

200833ec <quorem>:
200833ec:	defff704 	addi	sp,sp,-36
200833f0:	dc800215 	stw	r18,8(sp)
200833f4:	20800417 	ldw	r2,16(r4)
200833f8:	2c800417 	ldw	r18,16(r5)
200833fc:	dfc00815 	stw	ra,32(sp)
20083400:	ddc00715 	stw	r23,28(sp)
20083404:	dd800615 	stw	r22,24(sp)
20083408:	dd400515 	stw	r21,20(sp)
2008340c:	dd000415 	stw	r20,16(sp)
20083410:	dcc00315 	stw	r19,12(sp)
20083414:	dc400115 	stw	r17,4(sp)
20083418:	dc000015 	stw	r16,0(sp)
2008341c:	14807116 	blt	r2,r18,200835e4 <quorem+0x1f8>
20083420:	94bfffc4 	addi	r18,r18,-1
20083424:	94ad883a 	add	r22,r18,r18
20083428:	b5ad883a 	add	r22,r22,r22
2008342c:	2c400504 	addi	r17,r5,20
20083430:	8da9883a 	add	r20,r17,r22
20083434:	25400504 	addi	r21,r4,20
20083438:	282f883a 	mov	r23,r5
2008343c:	adad883a 	add	r22,r21,r22
20083440:	a1400017 	ldw	r5,0(r20)
20083444:	2021883a 	mov	r16,r4
20083448:	b1000017 	ldw	r4,0(r22)
2008344c:	29400044 	addi	r5,r5,1
20083450:	008a7cc0 	call	2008a7cc <__udivsi3>
20083454:	1027883a 	mov	r19,r2
20083458:	10002c26 	beq	r2,zero,2008350c <quorem+0x120>
2008345c:	a813883a 	mov	r9,r21
20083460:	8811883a 	mov	r8,r17
20083464:	0009883a 	mov	r4,zero
20083468:	000d883a 	mov	r6,zero
2008346c:	41c00017 	ldw	r7,0(r8)
20083470:	49400017 	ldw	r5,0(r9)
20083474:	42000104 	addi	r8,r8,4
20083478:	38bfffcc 	andi	r2,r7,65535
2008347c:	14c5383a 	mul	r2,r2,r19
20083480:	380ed43a 	srli	r7,r7,16
20083484:	28ffffcc 	andi	r3,r5,65535
20083488:	2085883a 	add	r2,r4,r2
2008348c:	1008d43a 	srli	r4,r2,16
20083490:	3ccf383a 	mul	r7,r7,r19
20083494:	198d883a 	add	r6,r3,r6
20083498:	10ffffcc 	andi	r3,r2,65535
2008349c:	30c7c83a 	sub	r3,r6,r3
200834a0:	280ad43a 	srli	r5,r5,16
200834a4:	21c9883a 	add	r4,r4,r7
200834a8:	180dd43a 	srai	r6,r3,16
200834ac:	20bfffcc 	andi	r2,r4,65535
200834b0:	288bc83a 	sub	r5,r5,r2
200834b4:	298b883a 	add	r5,r5,r6
200834b8:	280e943a 	slli	r7,r5,16
200834bc:	18ffffcc 	andi	r3,r3,65535
200834c0:	2008d43a 	srli	r4,r4,16
200834c4:	38ceb03a 	or	r7,r7,r3
200834c8:	49c00015 	stw	r7,0(r9)
200834cc:	280dd43a 	srai	r6,r5,16
200834d0:	4a400104 	addi	r9,r9,4
200834d4:	a23fe52e 	bgeu	r20,r8,2008346c <__flash_rwdata_start+0xffff1670>
200834d8:	b0800017 	ldw	r2,0(r22)
200834dc:	10000b1e 	bne	r2,zero,2008350c <quorem+0x120>
200834e0:	b0bfff04 	addi	r2,r22,-4
200834e4:	a880082e 	bgeu	r21,r2,20083508 <quorem+0x11c>
200834e8:	b0ffff17 	ldw	r3,-4(r22)
200834ec:	18000326 	beq	r3,zero,200834fc <quorem+0x110>
200834f0:	00000506 	br	20083508 <quorem+0x11c>
200834f4:	10c00017 	ldw	r3,0(r2)
200834f8:	1800031e 	bne	r3,zero,20083508 <quorem+0x11c>
200834fc:	10bfff04 	addi	r2,r2,-4
20083500:	94bfffc4 	addi	r18,r18,-1
20083504:	a8bffb36 	bltu	r21,r2,200834f4 <__flash_rwdata_start+0xffff16f8>
20083508:	84800415 	stw	r18,16(r16)
2008350c:	8009883a 	mov	r4,r16
20083510:	b80b883a 	mov	r5,r23
20083514:	0086db00 	call	20086db0 <__mcmp>
20083518:	10002616 	blt	r2,zero,200835b4 <quorem+0x1c8>
2008351c:	9cc00044 	addi	r19,r19,1
20083520:	a80d883a 	mov	r6,r21
20083524:	000b883a 	mov	r5,zero
20083528:	31000017 	ldw	r4,0(r6)
2008352c:	88800017 	ldw	r2,0(r17)
20083530:	31800104 	addi	r6,r6,4
20083534:	20ffffcc 	andi	r3,r4,65535
20083538:	194b883a 	add	r5,r3,r5
2008353c:	10ffffcc 	andi	r3,r2,65535
20083540:	28c7c83a 	sub	r3,r5,r3
20083544:	1004d43a 	srli	r2,r2,16
20083548:	2008d43a 	srli	r4,r4,16
2008354c:	180bd43a 	srai	r5,r3,16
20083550:	18ffffcc 	andi	r3,r3,65535
20083554:	2089c83a 	sub	r4,r4,r2
20083558:	2149883a 	add	r4,r4,r5
2008355c:	2004943a 	slli	r2,r4,16
20083560:	8c400104 	addi	r17,r17,4
20083564:	200bd43a 	srai	r5,r4,16
20083568:	10c6b03a 	or	r3,r2,r3
2008356c:	30ffff15 	stw	r3,-4(r6)
20083570:	a47fed2e 	bgeu	r20,r17,20083528 <__flash_rwdata_start+0xffff172c>
20083574:	9485883a 	add	r2,r18,r18
20083578:	1085883a 	add	r2,r2,r2
2008357c:	a887883a 	add	r3,r21,r2
20083580:	18800017 	ldw	r2,0(r3)
20083584:	10000b1e 	bne	r2,zero,200835b4 <quorem+0x1c8>
20083588:	18bfff04 	addi	r2,r3,-4
2008358c:	a880082e 	bgeu	r21,r2,200835b0 <quorem+0x1c4>
20083590:	18ffff17 	ldw	r3,-4(r3)
20083594:	18000326 	beq	r3,zero,200835a4 <quorem+0x1b8>
20083598:	00000506 	br	200835b0 <quorem+0x1c4>
2008359c:	10c00017 	ldw	r3,0(r2)
200835a0:	1800031e 	bne	r3,zero,200835b0 <quorem+0x1c4>
200835a4:	10bfff04 	addi	r2,r2,-4
200835a8:	94bfffc4 	addi	r18,r18,-1
200835ac:	a8bffb36 	bltu	r21,r2,2008359c <__flash_rwdata_start+0xffff17a0>
200835b0:	84800415 	stw	r18,16(r16)
200835b4:	9805883a 	mov	r2,r19
200835b8:	dfc00817 	ldw	ra,32(sp)
200835bc:	ddc00717 	ldw	r23,28(sp)
200835c0:	dd800617 	ldw	r22,24(sp)
200835c4:	dd400517 	ldw	r21,20(sp)
200835c8:	dd000417 	ldw	r20,16(sp)
200835cc:	dcc00317 	ldw	r19,12(sp)
200835d0:	dc800217 	ldw	r18,8(sp)
200835d4:	dc400117 	ldw	r17,4(sp)
200835d8:	dc000017 	ldw	r16,0(sp)
200835dc:	dec00904 	addi	sp,sp,36
200835e0:	f800283a 	ret
200835e4:	0005883a 	mov	r2,zero
200835e8:	003ff306 	br	200835b8 <__flash_rwdata_start+0xffff17bc>

200835ec <_dtoa_r>:
200835ec:	20801017 	ldw	r2,64(r4)
200835f0:	deffde04 	addi	sp,sp,-136
200835f4:	dd401d15 	stw	r21,116(sp)
200835f8:	dcc01b15 	stw	r19,108(sp)
200835fc:	dc801a15 	stw	r18,104(sp)
20083600:	dc401915 	stw	r17,100(sp)
20083604:	dc001815 	stw	r16,96(sp)
20083608:	dfc02115 	stw	ra,132(sp)
2008360c:	df002015 	stw	fp,128(sp)
20083610:	ddc01f15 	stw	r23,124(sp)
20083614:	dd801e15 	stw	r22,120(sp)
20083618:	dd001c15 	stw	r20,112(sp)
2008361c:	d9c00315 	stw	r7,12(sp)
20083620:	2021883a 	mov	r16,r4
20083624:	302b883a 	mov	r21,r6
20083628:	2825883a 	mov	r18,r5
2008362c:	dc402417 	ldw	r17,144(sp)
20083630:	3027883a 	mov	r19,r6
20083634:	10000826 	beq	r2,zero,20083658 <_dtoa_r+0x6c>
20083638:	21801117 	ldw	r6,68(r4)
2008363c:	00c00044 	movi	r3,1
20083640:	100b883a 	mov	r5,r2
20083644:	1986983a 	sll	r3,r3,r6
20083648:	11800115 	stw	r6,4(r2)
2008364c:	10c00215 	stw	r3,8(r2)
20083650:	00865840 	call	20086584 <_Bfree>
20083654:	80001015 	stw	zero,64(r16)
20083658:	a8002d16 	blt	r21,zero,20083710 <_dtoa_r+0x124>
2008365c:	88000015 	stw	zero,0(r17)
20083660:	a8dffc2c 	andhi	r3,r21,32752
20083664:	009ffc34 	movhi	r2,32752
20083668:	18801b26 	beq	r3,r2,200836d8 <_dtoa_r+0xec>
2008366c:	9009883a 	mov	r4,r18
20083670:	980b883a 	mov	r5,r19
20083674:	000d883a 	mov	r6,zero
20083678:	000f883a 	mov	r7,zero
2008367c:	008b9440 	call	2008b944 <__eqdf2>
20083680:	10002a1e 	bne	r2,zero,2008372c <_dtoa_r+0x140>
20083684:	d8c02317 	ldw	r3,140(sp)
20083688:	d9002517 	ldw	r4,148(sp)
2008368c:	00800044 	movi	r2,1
20083690:	18800015 	stw	r2,0(r3)
20083694:	2001a226 	beq	r4,zero,20083d20 <_dtoa_r+0x734>
20083698:	00800034 	movhi	r2,0
2008369c:	10802b44 	addi	r2,r2,173
200836a0:	20800015 	stw	r2,0(r4)
200836a4:	10bfffc4 	addi	r2,r2,-1
200836a8:	dfc02117 	ldw	ra,132(sp)
200836ac:	df002017 	ldw	fp,128(sp)
200836b0:	ddc01f17 	ldw	r23,124(sp)
200836b4:	dd801e17 	ldw	r22,120(sp)
200836b8:	dd401d17 	ldw	r21,116(sp)
200836bc:	dd001c17 	ldw	r20,112(sp)
200836c0:	dcc01b17 	ldw	r19,108(sp)
200836c4:	dc801a17 	ldw	r18,104(sp)
200836c8:	dc401917 	ldw	r17,100(sp)
200836cc:	dc001817 	ldw	r16,96(sp)
200836d0:	dec02204 	addi	sp,sp,136
200836d4:	f800283a 	ret
200836d8:	d8c02317 	ldw	r3,140(sp)
200836dc:	0089c3c4 	movi	r2,9999
200836e0:	18800015 	stw	r2,0(r3)
200836e4:	90017c26 	beq	r18,zero,20083cd8 <_dtoa_r+0x6ec>
200836e8:	00800034 	movhi	r2,0
200836ec:	10803704 	addi	r2,r2,220
200836f0:	d9002517 	ldw	r4,148(sp)
200836f4:	203fec26 	beq	r4,zero,200836a8 <__flash_rwdata_start+0xffff18ac>
200836f8:	10c000c7 	ldb	r3,3(r2)
200836fc:	18017d1e 	bne	r3,zero,20083cf4 <_dtoa_r+0x708>
20083700:	10c000c4 	addi	r3,r2,3
20083704:	d9802517 	ldw	r6,148(sp)
20083708:	30c00015 	stw	r3,0(r6)
2008370c:	003fe606 	br	200836a8 <__flash_rwdata_start+0xffff18ac>
20083710:	04e00034 	movhi	r19,32768
20083714:	9cffffc4 	addi	r19,r19,-1
20083718:	00800044 	movi	r2,1
2008371c:	ace6703a 	and	r19,r21,r19
20083720:	88800015 	stw	r2,0(r17)
20083724:	982b883a 	mov	r21,r19
20083728:	003fcd06 	br	20083660 <__flash_rwdata_start+0xffff1864>
2008372c:	d8800204 	addi	r2,sp,8
20083730:	a822d53a 	srli	r17,r21,20
20083734:	d8800015 	stw	r2,0(sp)
20083738:	8009883a 	mov	r4,r16
2008373c:	900b883a 	mov	r5,r18
20083740:	980d883a 	mov	r6,r19
20083744:	d9c00104 	addi	r7,sp,4
20083748:	00871240 	call	20087124 <__d2b>
2008374c:	1039883a 	mov	fp,r2
20083750:	88016a1e 	bne	r17,zero,20083cfc <_dtoa_r+0x710>
20083754:	dd000217 	ldw	r20,8(sp)
20083758:	dc400117 	ldw	r17,4(sp)
2008375c:	00befbc4 	movi	r2,-1041
20083760:	a463883a 	add	r17,r20,r17
20083764:	8882ea16 	blt	r17,r2,20084310 <_dtoa_r+0xd24>
20083768:	00bf0384 	movi	r2,-1010
2008376c:	1445c83a 	sub	r2,r2,r17
20083770:	89010484 	addi	r4,r17,1042
20083774:	a8aa983a 	sll	r21,r21,r2
20083778:	9108d83a 	srl	r4,r18,r4
2008377c:	a908b03a 	or	r4,r21,r4
20083780:	008ccd40 	call	2008ccd4 <__floatunsidf>
20083784:	017f8434 	movhi	r5,65040
20083788:	01800044 	movi	r6,1
2008378c:	1009883a 	mov	r4,r2
20083790:	194b883a 	add	r5,r3,r5
20083794:	8c7fffc4 	addi	r17,r17,-1
20083798:	d9800f15 	stw	r6,60(sp)
2008379c:	000d883a 	mov	r6,zero
200837a0:	01cffe34 	movhi	r7,16376
200837a4:	008c2ac0 	call	2008c2ac <__subdf3>
200837a8:	0198dbf4 	movhi	r6,25455
200837ac:	01cff4f4 	movhi	r7,16339
200837b0:	1009883a 	mov	r4,r2
200837b4:	180b883a 	mov	r5,r3
200837b8:	3190d844 	addi	r6,r6,17249
200837bc:	39e1e9c4 	addi	r7,r7,-30809
200837c0:	008bb880 	call	2008bb88 <__muldf3>
200837c4:	01a2d874 	movhi	r6,35681
200837c8:	01cff1f4 	movhi	r7,16327
200837cc:	180b883a 	mov	r5,r3
200837d0:	31b22cc4 	addi	r6,r6,-14157
200837d4:	39e28a04 	addi	r7,r7,-30168
200837d8:	1009883a 	mov	r4,r2
200837dc:	008a7dc0 	call	2008a7dc <__adddf3>
200837e0:	8809883a 	mov	r4,r17
200837e4:	102d883a 	mov	r22,r2
200837e8:	182b883a 	mov	r21,r3
200837ec:	008cc040 	call	2008cc04 <__floatsidf>
200837f0:	019427f4 	movhi	r6,20639
200837f4:	01cff4f4 	movhi	r7,16339
200837f8:	1009883a 	mov	r4,r2
200837fc:	180b883a 	mov	r5,r3
20083800:	319e7ec4 	addi	r6,r6,31227
20083804:	39d104c4 	addi	r7,r7,17427
20083808:	008bb880 	call	2008bb88 <__muldf3>
2008380c:	b009883a 	mov	r4,r22
20083810:	a80b883a 	mov	r5,r21
20083814:	100d883a 	mov	r6,r2
20083818:	180f883a 	mov	r7,r3
2008381c:	008a7dc0 	call	2008a7dc <__adddf3>
20083820:	1009883a 	mov	r4,r2
20083824:	180b883a 	mov	r5,r3
20083828:	102d883a 	mov	r22,r2
2008382c:	182b883a 	mov	r21,r3
20083830:	008cb7c0 	call	2008cb7c <__fixdfsi>
20083834:	b009883a 	mov	r4,r22
20083838:	a80b883a 	mov	r5,r21
2008383c:	000d883a 	mov	r6,zero
20083840:	000f883a 	mov	r7,zero
20083844:	d8800515 	stw	r2,20(sp)
20083848:	008baa80 	call	2008baa8 <__ledf2>
2008384c:	10023116 	blt	r2,zero,20084114 <_dtoa_r+0xb28>
20083850:	d8c00517 	ldw	r3,20(sp)
20083854:	00800584 	movi	r2,22
20083858:	10c21f36 	bltu	r2,r3,200840d8 <_dtoa_r+0xaec>
2008385c:	180490fa 	slli	r2,r3,3
20083860:	00c00034 	movhi	r3,0
20083864:	18c05204 	addi	r3,r3,328
20083868:	1885883a 	add	r2,r3,r2
2008386c:	11000017 	ldw	r4,0(r2)
20083870:	11400117 	ldw	r5,4(r2)
20083874:	900d883a 	mov	r6,r18
20083878:	980f883a 	mov	r7,r19
2008387c:	008b9c80 	call	2008b9c8 <__gedf2>
20083880:	0082a70e 	bge	zero,r2,20084320 <_dtoa_r+0xd34>
20083884:	d9000517 	ldw	r4,20(sp)
20083888:	d8000d15 	stw	zero,52(sp)
2008388c:	213fffc4 	addi	r4,r4,-1
20083890:	d9000515 	stw	r4,20(sp)
20083894:	a463c83a 	sub	r17,r20,r17
20083898:	8dbfffc4 	addi	r22,r17,-1
2008389c:	b0021916 	blt	r22,zero,20084104 <_dtoa_r+0xb18>
200838a0:	d8000815 	stw	zero,32(sp)
200838a4:	d8800517 	ldw	r2,20(sp)
200838a8:	10020e16 	blt	r2,zero,200840e4 <_dtoa_r+0xaf8>
200838ac:	b0ad883a 	add	r22,r22,r2
200838b0:	d8800a15 	stw	r2,40(sp)
200838b4:	d8000915 	stw	zero,36(sp)
200838b8:	d8c00317 	ldw	r3,12(sp)
200838bc:	00800244 	movi	r2,9
200838c0:	10c11a36 	bltu	r2,r3,20083d2c <_dtoa_r+0x740>
200838c4:	00800144 	movi	r2,5
200838c8:	10c4fc0e 	bge	r2,r3,20084cbc <_dtoa_r+0x16d0>
200838cc:	18ffff04 	addi	r3,r3,-4
200838d0:	d8c00315 	stw	r3,12(sp)
200838d4:	0029883a 	mov	r20,zero
200838d8:	d9800317 	ldw	r6,12(sp)
200838dc:	008000c4 	movi	r2,3
200838e0:	3083bd26 	beq	r6,r2,200847d8 <_dtoa_r+0x11ec>
200838e4:	1183670e 	bge	r2,r6,20084684 <_dtoa_r+0x1098>
200838e8:	d8c00317 	ldw	r3,12(sp)
200838ec:	00800104 	movi	r2,4
200838f0:	1882e726 	beq	r3,r2,20084490 <_dtoa_r+0xea4>
200838f4:	00800144 	movi	r2,5
200838f8:	1884f21e 	bne	r3,r2,20084cc4 <_dtoa_r+0x16d8>
200838fc:	00800044 	movi	r2,1
20083900:	d8800b15 	stw	r2,44(sp)
20083904:	d8c02217 	ldw	r3,136(sp)
20083908:	d9000517 	ldw	r4,20(sp)
2008390c:	1907883a 	add	r3,r3,r4
20083910:	19800044 	addi	r6,r3,1
20083914:	d8c00c15 	stw	r3,48(sp)
20083918:	d9800615 	stw	r6,24(sp)
2008391c:	0183c30e 	bge	zero,r6,2008482c <_dtoa_r+0x1240>
20083920:	d9800617 	ldw	r6,24(sp)
20083924:	3023883a 	mov	r17,r6
20083928:	80001115 	stw	zero,68(r16)
2008392c:	008005c4 	movi	r2,23
20083930:	1184f62e 	bgeu	r2,r6,20084d0c <_dtoa_r+0x1720>
20083934:	00c00044 	movi	r3,1
20083938:	00800104 	movi	r2,4
2008393c:	1085883a 	add	r2,r2,r2
20083940:	11000504 	addi	r4,r2,20
20083944:	180b883a 	mov	r5,r3
20083948:	18c00044 	addi	r3,r3,1
2008394c:	313ffb2e 	bgeu	r6,r4,2008393c <__flash_rwdata_start+0xffff1b40>
20083950:	81401115 	stw	r5,68(r16)
20083954:	8009883a 	mov	r4,r16
20083958:	00864dc0 	call	200864dc <_Balloc>
2008395c:	d8800715 	stw	r2,28(sp)
20083960:	80801015 	stw	r2,64(r16)
20083964:	00800384 	movi	r2,14
20083968:	1440fd36 	bltu	r2,r17,20083d60 <_dtoa_r+0x774>
2008396c:	a000fc26 	beq	r20,zero,20083d60 <_dtoa_r+0x774>
20083970:	d8800517 	ldw	r2,20(sp)
20083974:	0083b90e 	bge	zero,r2,2008485c <_dtoa_r+0x1270>
20083978:	d8c00517 	ldw	r3,20(sp)
2008397c:	108003cc 	andi	r2,r2,15
20083980:	100490fa 	slli	r2,r2,3
20083984:	182fd13a 	srai	r23,r3,4
20083988:	00c00034 	movhi	r3,0
2008398c:	18c05204 	addi	r3,r3,328
20083990:	1885883a 	add	r2,r3,r2
20083994:	b8c0040c 	andi	r3,r23,16
20083998:	12c00017 	ldw	r11,0(r2)
2008399c:	12800117 	ldw	r10,4(r2)
200839a0:	18039726 	beq	r3,zero,20084800 <_dtoa_r+0x1214>
200839a4:	00800034 	movhi	r2,0
200839a8:	10804804 	addi	r2,r2,288
200839ac:	11800817 	ldw	r6,32(r2)
200839b0:	11c00917 	ldw	r7,36(r2)
200839b4:	9009883a 	mov	r4,r18
200839b8:	980b883a 	mov	r5,r19
200839bc:	da801615 	stw	r10,88(sp)
200839c0:	dac01515 	stw	r11,84(sp)
200839c4:	008b0780 	call	2008b078 <__divdf3>
200839c8:	da801617 	ldw	r10,88(sp)
200839cc:	dac01517 	ldw	r11,84(sp)
200839d0:	bdc003cc 	andi	r23,r23,15
200839d4:	044000c4 	movi	r17,3
200839d8:	d8800e15 	stw	r2,56(sp)
200839dc:	182b883a 	mov	r21,r3
200839e0:	b8001126 	beq	r23,zero,20083a28 <_dtoa_r+0x43c>
200839e4:	05000034 	movhi	r20,0
200839e8:	a5004804 	addi	r20,r20,288
200839ec:	5805883a 	mov	r2,r11
200839f0:	5007883a 	mov	r3,r10
200839f4:	b980004c 	andi	r6,r23,1
200839f8:	1009883a 	mov	r4,r2
200839fc:	b82fd07a 	srai	r23,r23,1
20083a00:	180b883a 	mov	r5,r3
20083a04:	30000426 	beq	r6,zero,20083a18 <_dtoa_r+0x42c>
20083a08:	a1800017 	ldw	r6,0(r20)
20083a0c:	a1c00117 	ldw	r7,4(r20)
20083a10:	8c400044 	addi	r17,r17,1
20083a14:	008bb880 	call	2008bb88 <__muldf3>
20083a18:	a5000204 	addi	r20,r20,8
20083a1c:	b83ff51e 	bne	r23,zero,200839f4 <__flash_rwdata_start+0xffff1bf8>
20083a20:	1017883a 	mov	r11,r2
20083a24:	1815883a 	mov	r10,r3
20083a28:	d9000e17 	ldw	r4,56(sp)
20083a2c:	a80b883a 	mov	r5,r21
20083a30:	580d883a 	mov	r6,r11
20083a34:	500f883a 	mov	r7,r10
20083a38:	008b0780 	call	2008b078 <__divdf3>
20083a3c:	1029883a 	mov	r20,r2
20083a40:	182b883a 	mov	r21,r3
20083a44:	d9800d17 	ldw	r6,52(sp)
20083a48:	30000626 	beq	r6,zero,20083a64 <_dtoa_r+0x478>
20083a4c:	a009883a 	mov	r4,r20
20083a50:	a80b883a 	mov	r5,r21
20083a54:	000d883a 	mov	r6,zero
20083a58:	01cffc34 	movhi	r7,16368
20083a5c:	008baa80 	call	2008baa8 <__ledf2>
20083a60:	10043216 	blt	r2,zero,20084b2c <_dtoa_r+0x1540>
20083a64:	8809883a 	mov	r4,r17
20083a68:	008cc040 	call	2008cc04 <__floatsidf>
20083a6c:	1009883a 	mov	r4,r2
20083a70:	180b883a 	mov	r5,r3
20083a74:	a00d883a 	mov	r6,r20
20083a78:	a80f883a 	mov	r7,r21
20083a7c:	008bb880 	call	2008bb88 <__muldf3>
20083a80:	000d883a 	mov	r6,zero
20083a84:	1009883a 	mov	r4,r2
20083a88:	180b883a 	mov	r5,r3
20083a8c:	01d00734 	movhi	r7,16412
20083a90:	008a7dc0 	call	2008a7dc <__adddf3>
20083a94:	1023883a 	mov	r17,r2
20083a98:	d9800617 	ldw	r6,24(sp)
20083a9c:	00bf3034 	movhi	r2,64704
20083aa0:	1885883a 	add	r2,r3,r2
20083aa4:	d8800e15 	stw	r2,56(sp)
20083aa8:	30032e26 	beq	r6,zero,20084764 <_dtoa_r+0x1178>
20083aac:	d8c00517 	ldw	r3,20(sp)
20083ab0:	da800617 	ldw	r10,24(sp)
20083ab4:	d8c01215 	stw	r3,72(sp)
20083ab8:	d9000b17 	ldw	r4,44(sp)
20083abc:	2003b026 	beq	r4,zero,20084980 <_dtoa_r+0x1394>
20083ac0:	50bfffc4 	addi	r2,r10,-1
20083ac4:	100490fa 	slli	r2,r2,3
20083ac8:	00c00034 	movhi	r3,0
20083acc:	18c05204 	addi	r3,r3,328
20083ad0:	1885883a 	add	r2,r3,r2
20083ad4:	11800017 	ldw	r6,0(r2)
20083ad8:	11c00117 	ldw	r7,4(r2)
20083adc:	d8800717 	ldw	r2,28(sp)
20083ae0:	0009883a 	mov	r4,zero
20083ae4:	014ff834 	movhi	r5,16352
20083ae8:	da801615 	stw	r10,88(sp)
20083aec:	15c00044 	addi	r23,r2,1
20083af0:	008b0780 	call	2008b078 <__divdf3>
20083af4:	d9c00e17 	ldw	r7,56(sp)
20083af8:	880d883a 	mov	r6,r17
20083afc:	1009883a 	mov	r4,r2
20083b00:	180b883a 	mov	r5,r3
20083b04:	008c2ac0 	call	2008c2ac <__subdf3>
20083b08:	a80b883a 	mov	r5,r21
20083b0c:	a009883a 	mov	r4,r20
20083b10:	d8c01015 	stw	r3,64(sp)
20083b14:	d8800e15 	stw	r2,56(sp)
20083b18:	008cb7c0 	call	2008cb7c <__fixdfsi>
20083b1c:	1009883a 	mov	r4,r2
20083b20:	d8801715 	stw	r2,92(sp)
20083b24:	008cc040 	call	2008cc04 <__floatsidf>
20083b28:	a009883a 	mov	r4,r20
20083b2c:	a80b883a 	mov	r5,r21
20083b30:	100d883a 	mov	r6,r2
20083b34:	180f883a 	mov	r7,r3
20083b38:	008c2ac0 	call	2008c2ac <__subdf3>
20083b3c:	da001717 	ldw	r8,92(sp)
20083b40:	1829883a 	mov	r20,r3
20083b44:	d8c00717 	ldw	r3,28(sp)
20083b48:	d9000e17 	ldw	r4,56(sp)
20083b4c:	d9401017 	ldw	r5,64(sp)
20083b50:	42000c04 	addi	r8,r8,48
20083b54:	1023883a 	mov	r17,r2
20083b58:	1a000005 	stb	r8,0(r3)
20083b5c:	880d883a 	mov	r6,r17
20083b60:	a00f883a 	mov	r7,r20
20083b64:	402b883a 	mov	r21,r8
20083b68:	008b9c80 	call	2008b9c8 <__gedf2>
20083b6c:	00844516 	blt	zero,r2,20084c84 <_dtoa_r+0x1698>
20083b70:	0009883a 	mov	r4,zero
20083b74:	014ffc34 	movhi	r5,16368
20083b78:	880d883a 	mov	r6,r17
20083b7c:	a00f883a 	mov	r7,r20
20083b80:	008c2ac0 	call	2008c2ac <__subdf3>
20083b84:	d9000e17 	ldw	r4,56(sp)
20083b88:	d9401017 	ldw	r5,64(sp)
20083b8c:	100d883a 	mov	r6,r2
20083b90:	180f883a 	mov	r7,r3
20083b94:	008b9c80 	call	2008b9c8 <__gedf2>
20083b98:	da801617 	ldw	r10,88(sp)
20083b9c:	00843616 	blt	zero,r2,20084c78 <_dtoa_r+0x168c>
20083ba0:	00800044 	movi	r2,1
20083ba4:	12806e0e 	bge	r2,r10,20083d60 <_dtoa_r+0x774>
20083ba8:	d9000717 	ldw	r4,28(sp)
20083bac:	dd801315 	stw	r22,76(sp)
20083bb0:	dc001115 	stw	r16,68(sp)
20083bb4:	2295883a 	add	r10,r4,r10
20083bb8:	dcc01415 	stw	r19,80(sp)
20083bbc:	502d883a 	mov	r22,r10
20083bc0:	dcc01017 	ldw	r19,64(sp)
20083bc4:	b821883a 	mov	r16,r23
20083bc8:	dc801015 	stw	r18,64(sp)
20083bcc:	dc800e17 	ldw	r18,56(sp)
20083bd0:	00000906 	br	20083bf8 <_dtoa_r+0x60c>
20083bd4:	008c2ac0 	call	2008c2ac <__subdf3>
20083bd8:	1009883a 	mov	r4,r2
20083bdc:	180b883a 	mov	r5,r3
20083be0:	900d883a 	mov	r6,r18
20083be4:	980f883a 	mov	r7,r19
20083be8:	008baa80 	call	2008baa8 <__ledf2>
20083bec:	10040e16 	blt	r2,zero,20084c28 <_dtoa_r+0x163c>
20083bf0:	b821883a 	mov	r16,r23
20083bf4:	bd841026 	beq	r23,r22,20084c38 <_dtoa_r+0x164c>
20083bf8:	9009883a 	mov	r4,r18
20083bfc:	980b883a 	mov	r5,r19
20083c00:	000d883a 	mov	r6,zero
20083c04:	01d00934 	movhi	r7,16420
20083c08:	008bb880 	call	2008bb88 <__muldf3>
20083c0c:	000d883a 	mov	r6,zero
20083c10:	01d00934 	movhi	r7,16420
20083c14:	8809883a 	mov	r4,r17
20083c18:	a00b883a 	mov	r5,r20
20083c1c:	1025883a 	mov	r18,r2
20083c20:	1827883a 	mov	r19,r3
20083c24:	008bb880 	call	2008bb88 <__muldf3>
20083c28:	180b883a 	mov	r5,r3
20083c2c:	1009883a 	mov	r4,r2
20083c30:	1823883a 	mov	r17,r3
20083c34:	1029883a 	mov	r20,r2
20083c38:	008cb7c0 	call	2008cb7c <__fixdfsi>
20083c3c:	1009883a 	mov	r4,r2
20083c40:	102b883a 	mov	r21,r2
20083c44:	008cc040 	call	2008cc04 <__floatsidf>
20083c48:	a009883a 	mov	r4,r20
20083c4c:	880b883a 	mov	r5,r17
20083c50:	100d883a 	mov	r6,r2
20083c54:	180f883a 	mov	r7,r3
20083c58:	008c2ac0 	call	2008c2ac <__subdf3>
20083c5c:	ad400c04 	addi	r21,r21,48
20083c60:	1009883a 	mov	r4,r2
20083c64:	180b883a 	mov	r5,r3
20083c68:	900d883a 	mov	r6,r18
20083c6c:	980f883a 	mov	r7,r19
20083c70:	85400005 	stb	r21,0(r16)
20083c74:	1023883a 	mov	r17,r2
20083c78:	1829883a 	mov	r20,r3
20083c7c:	008baa80 	call	2008baa8 <__ledf2>
20083c80:	bdc00044 	addi	r23,r23,1
20083c84:	0009883a 	mov	r4,zero
20083c88:	014ffc34 	movhi	r5,16368
20083c8c:	880d883a 	mov	r6,r17
20083c90:	a00f883a 	mov	r7,r20
20083c94:	103fcf0e 	bge	r2,zero,20083bd4 <__flash_rwdata_start+0xffff1dd8>
20083c98:	d9801217 	ldw	r6,72(sp)
20083c9c:	dc001117 	ldw	r16,68(sp)
20083ca0:	d9800515 	stw	r6,20(sp)
20083ca4:	8009883a 	mov	r4,r16
20083ca8:	e00b883a 	mov	r5,fp
20083cac:	00865840 	call	20086584 <_Bfree>
20083cb0:	d8c00517 	ldw	r3,20(sp)
20083cb4:	d9002317 	ldw	r4,140(sp)
20083cb8:	d9802517 	ldw	r6,148(sp)
20083cbc:	b8000005 	stb	zero,0(r23)
20083cc0:	18800044 	addi	r2,r3,1
20083cc4:	20800015 	stw	r2,0(r4)
20083cc8:	30027226 	beq	r6,zero,20084694 <_dtoa_r+0x10a8>
20083ccc:	35c00015 	stw	r23,0(r6)
20083cd0:	d8800717 	ldw	r2,28(sp)
20083cd4:	003e7406 	br	200836a8 <__flash_rwdata_start+0xffff18ac>
20083cd8:	00800434 	movhi	r2,16
20083cdc:	10bfffc4 	addi	r2,r2,-1
20083ce0:	a8aa703a 	and	r21,r21,r2
20083ce4:	a83e801e 	bne	r21,zero,200836e8 <__flash_rwdata_start+0xffff18ec>
20083ce8:	00800034 	movhi	r2,0
20083cec:	10803404 	addi	r2,r2,208
20083cf0:	003e7f06 	br	200836f0 <__flash_rwdata_start+0xffff18f4>
20083cf4:	10c00204 	addi	r3,r2,8
20083cf8:	003e8206 	br	20083704 <__flash_rwdata_start+0xffff1908>
20083cfc:	01400434 	movhi	r5,16
20083d00:	297fffc4 	addi	r5,r5,-1
20083d04:	994a703a 	and	r5,r19,r5
20083d08:	9009883a 	mov	r4,r18
20083d0c:	8c7f0044 	addi	r17,r17,-1023
20083d10:	294ffc34 	orhi	r5,r5,16368
20083d14:	dd000217 	ldw	r20,8(sp)
20083d18:	d8000f15 	stw	zero,60(sp)
20083d1c:	003e9f06 	br	2008379c <__flash_rwdata_start+0xffff19a0>
20083d20:	00800034 	movhi	r2,0
20083d24:	10802b04 	addi	r2,r2,172
20083d28:	003e5f06 	br	200836a8 <__flash_rwdata_start+0xffff18ac>
20083d2c:	80001115 	stw	zero,68(r16)
20083d30:	8009883a 	mov	r4,r16
20083d34:	000b883a 	mov	r5,zero
20083d38:	00864dc0 	call	200864dc <_Balloc>
20083d3c:	01bfffc4 	movi	r6,-1
20083d40:	d8800715 	stw	r2,28(sp)
20083d44:	80801015 	stw	r2,64(r16)
20083d48:	00800044 	movi	r2,1
20083d4c:	d9800c15 	stw	r6,48(sp)
20083d50:	d8800b15 	stw	r2,44(sp)
20083d54:	d9800615 	stw	r6,24(sp)
20083d58:	d8002215 	stw	zero,136(sp)
20083d5c:	d8000315 	stw	zero,12(sp)
20083d60:	d8800117 	ldw	r2,4(sp)
20083d64:	10008e16 	blt	r2,zero,20083fa0 <_dtoa_r+0x9b4>
20083d68:	d9000517 	ldw	r4,20(sp)
20083d6c:	00c00384 	movi	r3,14
20083d70:	19008b16 	blt	r3,r4,20083fa0 <_dtoa_r+0x9b4>
20083d74:	200490fa 	slli	r2,r4,3
20083d78:	00c00034 	movhi	r3,0
20083d7c:	d9802217 	ldw	r6,136(sp)
20083d80:	18c05204 	addi	r3,r3,328
20083d84:	1885883a 	add	r2,r3,r2
20083d88:	14400017 	ldw	r17,0(r2)
20083d8c:	15000117 	ldw	r20,4(r2)
20083d90:	3001c716 	blt	r6,zero,200844b0 <_dtoa_r+0xec4>
20083d94:	880d883a 	mov	r6,r17
20083d98:	a00f883a 	mov	r7,r20
20083d9c:	9009883a 	mov	r4,r18
20083da0:	980b883a 	mov	r5,r19
20083da4:	008b0780 	call	2008b078 <__divdf3>
20083da8:	180b883a 	mov	r5,r3
20083dac:	1009883a 	mov	r4,r2
20083db0:	008cb7c0 	call	2008cb7c <__fixdfsi>
20083db4:	1009883a 	mov	r4,r2
20083db8:	102d883a 	mov	r22,r2
20083dbc:	008cc040 	call	2008cc04 <__floatsidf>
20083dc0:	1009883a 	mov	r4,r2
20083dc4:	180b883a 	mov	r5,r3
20083dc8:	880d883a 	mov	r6,r17
20083dcc:	a00f883a 	mov	r7,r20
20083dd0:	008bb880 	call	2008bb88 <__muldf3>
20083dd4:	9009883a 	mov	r4,r18
20083dd8:	980b883a 	mov	r5,r19
20083ddc:	100d883a 	mov	r6,r2
20083de0:	180f883a 	mov	r7,r3
20083de4:	008c2ac0 	call	2008c2ac <__subdf3>
20083de8:	d9000717 	ldw	r4,28(sp)
20083dec:	d9800617 	ldw	r6,24(sp)
20083df0:	180b883a 	mov	r5,r3
20083df4:	b0c00c04 	addi	r3,r22,48
20083df8:	20c00005 	stb	r3,0(r4)
20083dfc:	25c00044 	addi	r23,r4,1
20083e00:	01000044 	movi	r4,1
20083e04:	1011883a 	mov	r8,r2
20083e08:	2807883a 	mov	r3,r5
20083e0c:	31003d26 	beq	r6,r4,20083f04 <_dtoa_r+0x918>
20083e10:	000d883a 	mov	r6,zero
20083e14:	01d00934 	movhi	r7,16420
20083e18:	1009883a 	mov	r4,r2
20083e1c:	008bb880 	call	2008bb88 <__muldf3>
20083e20:	1009883a 	mov	r4,r2
20083e24:	180b883a 	mov	r5,r3
20083e28:	000d883a 	mov	r6,zero
20083e2c:	000f883a 	mov	r7,zero
20083e30:	1027883a 	mov	r19,r2
20083e34:	182b883a 	mov	r21,r3
20083e38:	008b9440 	call	2008b944 <__eqdf2>
20083e3c:	103f9926 	beq	r2,zero,20083ca4 <__flash_rwdata_start+0xffff1ea8>
20083e40:	d8c00617 	ldw	r3,24(sp)
20083e44:	d9000717 	ldw	r4,28(sp)
20083e48:	b825883a 	mov	r18,r23
20083e4c:	18bfffc4 	addi	r2,r3,-1
20083e50:	20ad883a 	add	r22,r4,r2
20083e54:	dc000315 	stw	r16,12(sp)
20083e58:	00000a06 	br	20083e84 <_dtoa_r+0x898>
20083e5c:	008bb880 	call	2008bb88 <__muldf3>
20083e60:	1009883a 	mov	r4,r2
20083e64:	180b883a 	mov	r5,r3
20083e68:	000d883a 	mov	r6,zero
20083e6c:	000f883a 	mov	r7,zero
20083e70:	1027883a 	mov	r19,r2
20083e74:	182b883a 	mov	r21,r3
20083e78:	b825883a 	mov	r18,r23
20083e7c:	008b9440 	call	2008b944 <__eqdf2>
20083e80:	10022626 	beq	r2,zero,2008471c <_dtoa_r+0x1130>
20083e84:	880d883a 	mov	r6,r17
20083e88:	a00f883a 	mov	r7,r20
20083e8c:	9809883a 	mov	r4,r19
20083e90:	a80b883a 	mov	r5,r21
20083e94:	008b0780 	call	2008b078 <__divdf3>
20083e98:	180b883a 	mov	r5,r3
20083e9c:	1009883a 	mov	r4,r2
20083ea0:	008cb7c0 	call	2008cb7c <__fixdfsi>
20083ea4:	1009883a 	mov	r4,r2
20083ea8:	1021883a 	mov	r16,r2
20083eac:	008cc040 	call	2008cc04 <__floatsidf>
20083eb0:	1009883a 	mov	r4,r2
20083eb4:	180b883a 	mov	r5,r3
20083eb8:	880d883a 	mov	r6,r17
20083ebc:	a00f883a 	mov	r7,r20
20083ec0:	008bb880 	call	2008bb88 <__muldf3>
20083ec4:	9809883a 	mov	r4,r19
20083ec8:	a80b883a 	mov	r5,r21
20083ecc:	100d883a 	mov	r6,r2
20083ed0:	180f883a 	mov	r7,r3
20083ed4:	008c2ac0 	call	2008c2ac <__subdf3>
20083ed8:	82000c04 	addi	r8,r16,48
20083edc:	92000005 	stb	r8,0(r18)
20083ee0:	1009883a 	mov	r4,r2
20083ee4:	180b883a 	mov	r5,r3
20083ee8:	000d883a 	mov	r6,zero
20083eec:	01d00934 	movhi	r7,16420
20083ef0:	1011883a 	mov	r8,r2
20083ef4:	bdc00044 	addi	r23,r23,1
20083ef8:	95bfd81e 	bne	r18,r22,20083e5c <__flash_rwdata_start+0xffff2060>
20083efc:	802d883a 	mov	r22,r16
20083f00:	dc000317 	ldw	r16,12(sp)
20083f04:	4009883a 	mov	r4,r8
20083f08:	180b883a 	mov	r5,r3
20083f0c:	400d883a 	mov	r6,r8
20083f10:	180f883a 	mov	r7,r3
20083f14:	008a7dc0 	call	2008a7dc <__adddf3>
20083f18:	8809883a 	mov	r4,r17
20083f1c:	a00b883a 	mov	r5,r20
20083f20:	100d883a 	mov	r6,r2
20083f24:	180f883a 	mov	r7,r3
20083f28:	1027883a 	mov	r19,r2
20083f2c:	1825883a 	mov	r18,r3
20083f30:	008baa80 	call	2008baa8 <__ledf2>
20083f34:	10000816 	blt	r2,zero,20083f58 <_dtoa_r+0x96c>
20083f38:	8809883a 	mov	r4,r17
20083f3c:	a00b883a 	mov	r5,r20
20083f40:	980d883a 	mov	r6,r19
20083f44:	900f883a 	mov	r7,r18
20083f48:	008b9440 	call	2008b944 <__eqdf2>
20083f4c:	103f551e 	bne	r2,zero,20083ca4 <__flash_rwdata_start+0xffff1ea8>
20083f50:	b580004c 	andi	r22,r22,1
20083f54:	b03f5326 	beq	r22,zero,20083ca4 <__flash_rwdata_start+0xffff1ea8>
20083f58:	bd7fffc3 	ldbu	r21,-1(r23)
20083f5c:	b8bfffc4 	addi	r2,r23,-1
20083f60:	1007883a 	mov	r3,r2
20083f64:	01400e44 	movi	r5,57
20083f68:	d9800717 	ldw	r6,28(sp)
20083f6c:	00000506 	br	20083f84 <_dtoa_r+0x998>
20083f70:	18ffffc4 	addi	r3,r3,-1
20083f74:	30825e26 	beq	r6,r2,200848f0 <_dtoa_r+0x1304>
20083f78:	1d400003 	ldbu	r21,0(r3)
20083f7c:	102f883a 	mov	r23,r2
20083f80:	10bfffc4 	addi	r2,r2,-1
20083f84:	a9003fcc 	andi	r4,r21,255
20083f88:	2100201c 	xori	r4,r4,128
20083f8c:	213fe004 	addi	r4,r4,-128
20083f90:	217ff726 	beq	r4,r5,20083f70 <__flash_rwdata_start+0xffff2174>
20083f94:	aa000044 	addi	r8,r21,1
20083f98:	12000005 	stb	r8,0(r2)
20083f9c:	003f4106 	br	20083ca4 <__flash_rwdata_start+0xffff1ea8>
20083fa0:	d8c00b17 	ldw	r3,44(sp)
20083fa4:	18006726 	beq	r3,zero,20084144 <_dtoa_r+0xb58>
20083fa8:	d9000317 	ldw	r4,12(sp)
20083fac:	00c00044 	movi	r3,1
20083fb0:	19016a0e 	bge	r3,r4,2008455c <_dtoa_r+0xf70>
20083fb4:	d8800617 	ldw	r2,24(sp)
20083fb8:	d8c00917 	ldw	r3,36(sp)
20083fbc:	157fffc4 	addi	r21,r2,-1
20083fc0:	1d420716 	blt	r3,r21,200847e0 <_dtoa_r+0x11f4>
20083fc4:	1d6bc83a 	sub	r21,r3,r21
20083fc8:	d8800617 	ldw	r2,24(sp)
20083fcc:	1002c716 	blt	r2,zero,20084aec <_dtoa_r+0x1500>
20083fd0:	dd000817 	ldw	r20,32(sp)
20083fd4:	d8800617 	ldw	r2,24(sp)
20083fd8:	d9800817 	ldw	r6,32(sp)
20083fdc:	8009883a 	mov	r4,r16
20083fe0:	01400044 	movi	r5,1
20083fe4:	308d883a 	add	r6,r6,r2
20083fe8:	d9800815 	stw	r6,32(sp)
20083fec:	b0ad883a 	add	r22,r22,r2
20083ff0:	00868e80 	call	200868e8 <__i2b>
20083ff4:	1023883a 	mov	r17,r2
20083ff8:	a0000826 	beq	r20,zero,2008401c <_dtoa_r+0xa30>
20083ffc:	0580070e 	bge	zero,r22,2008401c <_dtoa_r+0xa30>
20084000:	b005883a 	mov	r2,r22
20084004:	a5812016 	blt	r20,r22,20084488 <_dtoa_r+0xe9c>
20084008:	d8c00817 	ldw	r3,32(sp)
2008400c:	a0a9c83a 	sub	r20,r20,r2
20084010:	b0adc83a 	sub	r22,r22,r2
20084014:	1887c83a 	sub	r3,r3,r2
20084018:	d8c00815 	stw	r3,32(sp)
2008401c:	d9000917 	ldw	r4,36(sp)
20084020:	0100140e 	bge	zero,r4,20084074 <_dtoa_r+0xa88>
20084024:	d9800b17 	ldw	r6,44(sp)
20084028:	3001e526 	beq	r6,zero,200847c0 <_dtoa_r+0x11d4>
2008402c:	05400e0e 	bge	zero,r21,20084068 <_dtoa_r+0xa7c>
20084030:	880b883a 	mov	r5,r17
20084034:	8009883a 	mov	r4,r16
20084038:	a80d883a 	mov	r6,r21
2008403c:	0086b200 	call	20086b20 <__pow5mult>
20084040:	e00d883a 	mov	r6,fp
20084044:	8009883a 	mov	r4,r16
20084048:	100b883a 	mov	r5,r2
2008404c:	1023883a 	mov	r17,r2
20084050:	00869240 	call	20086924 <__multiply>
20084054:	102f883a 	mov	r23,r2
20084058:	e00b883a 	mov	r5,fp
2008405c:	8009883a 	mov	r4,r16
20084060:	00865840 	call	20086584 <_Bfree>
20084064:	b839883a 	mov	fp,r23
20084068:	d8800917 	ldw	r2,36(sp)
2008406c:	154dc83a 	sub	r6,r2,r21
20084070:	3001281e 	bne	r6,zero,20084514 <_dtoa_r+0xf28>
20084074:	05c00044 	movi	r23,1
20084078:	8009883a 	mov	r4,r16
2008407c:	b80b883a 	mov	r5,r23
20084080:	00868e80 	call	200868e8 <__i2b>
20084084:	d8c00a17 	ldw	r3,40(sp)
20084088:	102b883a 	mov	r21,r2
2008408c:	00c0310e 	bge	zero,r3,20084154 <_dtoa_r+0xb68>
20084090:	8009883a 	mov	r4,r16
20084094:	100b883a 	mov	r5,r2
20084098:	180d883a 	mov	r6,r3
2008409c:	0086b200 	call	20086b20 <__pow5mult>
200840a0:	d9000317 	ldw	r4,12(sp)
200840a4:	102b883a 	mov	r21,r2
200840a8:	b9011f0e 	bge	r23,r4,20084528 <_dtoa_r+0xf3c>
200840ac:	0027883a 	mov	r19,zero
200840b0:	a8800417 	ldw	r2,16(r21)
200840b4:	10800104 	addi	r2,r2,4
200840b8:	1085883a 	add	r2,r2,r2
200840bc:	1085883a 	add	r2,r2,r2
200840c0:	a885883a 	add	r2,r21,r2
200840c4:	11000017 	ldw	r4,0(r2)
200840c8:	00867d00 	call	200867d0 <__hi0bits>
200840cc:	00c00804 	movi	r3,32
200840d0:	1885c83a 	sub	r2,r3,r2
200840d4:	00002506 	br	2008416c <_dtoa_r+0xb80>
200840d8:	01800044 	movi	r6,1
200840dc:	d9800d15 	stw	r6,52(sp)
200840e0:	003dec06 	br	20083894 <__flash_rwdata_start+0xffff1a98>
200840e4:	d8c00817 	ldw	r3,32(sp)
200840e8:	d9000517 	ldw	r4,20(sp)
200840ec:	d8000a15 	stw	zero,40(sp)
200840f0:	1907c83a 	sub	r3,r3,r4
200840f4:	010dc83a 	sub	r6,zero,r4
200840f8:	d8c00815 	stw	r3,32(sp)
200840fc:	d9800915 	stw	r6,36(sp)
20084100:	003ded06 	br	200838b8 <__flash_rwdata_start+0xffff1abc>
20084104:	05adc83a 	sub	r22,zero,r22
20084108:	dd800815 	stw	r22,32(sp)
2008410c:	002d883a 	mov	r22,zero
20084110:	003de406 	br	200838a4 <__flash_rwdata_start+0xffff1aa8>
20084114:	d9000517 	ldw	r4,20(sp)
20084118:	008cc040 	call	2008cc04 <__floatsidf>
2008411c:	1009883a 	mov	r4,r2
20084120:	180b883a 	mov	r5,r3
20084124:	b00d883a 	mov	r6,r22
20084128:	a80f883a 	mov	r7,r21
2008412c:	008b9440 	call	2008b944 <__eqdf2>
20084130:	103dc726 	beq	r2,zero,20083850 <__flash_rwdata_start+0xffff1a54>
20084134:	d8800517 	ldw	r2,20(sp)
20084138:	10bfffc4 	addi	r2,r2,-1
2008413c:	d8800515 	stw	r2,20(sp)
20084140:	003dc306 	br	20083850 <__flash_rwdata_start+0xffff1a54>
20084144:	dd400917 	ldw	r21,36(sp)
20084148:	dd000817 	ldw	r20,32(sp)
2008414c:	0023883a 	mov	r17,zero
20084150:	003fa906 	br	20083ff8 <__flash_rwdata_start+0xffff21fc>
20084154:	d9800317 	ldw	r6,12(sp)
20084158:	b981670e 	bge	r23,r6,200846f8 <_dtoa_r+0x110c>
2008415c:	0027883a 	mov	r19,zero
20084160:	d8c00a17 	ldw	r3,40(sp)
20084164:	183fd21e 	bne	r3,zero,200840b0 <__flash_rwdata_start+0xffff22b4>
20084168:	00800044 	movi	r2,1
2008416c:	1585883a 	add	r2,r2,r22
20084170:	108007cc 	andi	r2,r2,31
20084174:	10005f26 	beq	r2,zero,200842f4 <_dtoa_r+0xd08>
20084178:	00c00804 	movi	r3,32
2008417c:	1887c83a 	sub	r3,r3,r2
20084180:	01000104 	movi	r4,4
20084184:	20c2dd0e 	bge	r4,r3,20084cfc <_dtoa_r+0x1710>
20084188:	d9000817 	ldw	r4,32(sp)
2008418c:	00c00704 	movi	r3,28
20084190:	1885c83a 	sub	r2,r3,r2
20084194:	2089883a 	add	r4,r4,r2
20084198:	d9000815 	stw	r4,32(sp)
2008419c:	a0a9883a 	add	r20,r20,r2
200841a0:	b0ad883a 	add	r22,r22,r2
200841a4:	d8800817 	ldw	r2,32(sp)
200841a8:	0080050e 	bge	zero,r2,200841c0 <_dtoa_r+0xbd4>
200841ac:	e00b883a 	mov	r5,fp
200841b0:	8009883a 	mov	r4,r16
200841b4:	100d883a 	mov	r6,r2
200841b8:	0086c600 	call	20086c60 <__lshift>
200841bc:	1039883a 	mov	fp,r2
200841c0:	0580050e 	bge	zero,r22,200841d8 <_dtoa_r+0xbec>
200841c4:	a80b883a 	mov	r5,r21
200841c8:	8009883a 	mov	r4,r16
200841cc:	b00d883a 	mov	r6,r22
200841d0:	0086c600 	call	20086c60 <__lshift>
200841d4:	102b883a 	mov	r21,r2
200841d8:	d8c00d17 	ldw	r3,52(sp)
200841dc:	1801161e 	bne	r3,zero,20084638 <_dtoa_r+0x104c>
200841e0:	d8c00617 	ldw	r3,24(sp)
200841e4:	00c12d0e 	bge	zero,r3,2008469c <_dtoa_r+0x10b0>
200841e8:	d8c00b17 	ldw	r3,44(sp)
200841ec:	1800571e 	bne	r3,zero,2008434c <_dtoa_r+0xd60>
200841f0:	dc800717 	ldw	r18,28(sp)
200841f4:	dcc00617 	ldw	r19,24(sp)
200841f8:	9029883a 	mov	r20,r18
200841fc:	00000206 	br	20084208 <_dtoa_r+0xc1c>
20084200:	00865ac0 	call	200865ac <__multadd>
20084204:	1039883a 	mov	fp,r2
20084208:	e009883a 	mov	r4,fp
2008420c:	a80b883a 	mov	r5,r21
20084210:	00833ec0 	call	200833ec <quorem>
20084214:	10800c04 	addi	r2,r2,48
20084218:	90800005 	stb	r2,0(r18)
2008421c:	94800044 	addi	r18,r18,1
20084220:	9507c83a 	sub	r3,r18,r20
20084224:	8009883a 	mov	r4,r16
20084228:	e00b883a 	mov	r5,fp
2008422c:	01800284 	movi	r6,10
20084230:	000f883a 	mov	r7,zero
20084234:	1cfff216 	blt	r3,r19,20084200 <__flash_rwdata_start+0xffff2404>
20084238:	1011883a 	mov	r8,r2
2008423c:	d8800617 	ldw	r2,24(sp)
20084240:	00822e0e 	bge	zero,r2,20084afc <_dtoa_r+0x1510>
20084244:	d9000717 	ldw	r4,28(sp)
20084248:	0025883a 	mov	r18,zero
2008424c:	20af883a 	add	r23,r4,r2
20084250:	e00b883a 	mov	r5,fp
20084254:	01800044 	movi	r6,1
20084258:	8009883a 	mov	r4,r16
2008425c:	da001715 	stw	r8,92(sp)
20084260:	0086c600 	call	20086c60 <__lshift>
20084264:	1009883a 	mov	r4,r2
20084268:	a80b883a 	mov	r5,r21
2008426c:	1039883a 	mov	fp,r2
20084270:	0086db00 	call	20086db0 <__mcmp>
20084274:	da001717 	ldw	r8,92(sp)
20084278:	00816e0e 	bge	zero,r2,20084834 <_dtoa_r+0x1248>
2008427c:	b93fffc3 	ldbu	r4,-1(r23)
20084280:	b8bfffc4 	addi	r2,r23,-1
20084284:	1007883a 	mov	r3,r2
20084288:	01800e44 	movi	r6,57
2008428c:	d9c00717 	ldw	r7,28(sp)
20084290:	00000506 	br	200842a8 <_dtoa_r+0xcbc>
20084294:	18ffffc4 	addi	r3,r3,-1
20084298:	38811926 	beq	r7,r2,20084700 <_dtoa_r+0x1114>
2008429c:	19000003 	ldbu	r4,0(r3)
200842a0:	102f883a 	mov	r23,r2
200842a4:	10bfffc4 	addi	r2,r2,-1
200842a8:	21403fcc 	andi	r5,r4,255
200842ac:	2940201c 	xori	r5,r5,128
200842b0:	297fe004 	addi	r5,r5,-128
200842b4:	29bff726 	beq	r5,r6,20084294 <__flash_rwdata_start+0xffff2498>
200842b8:	21000044 	addi	r4,r4,1
200842bc:	11000005 	stb	r4,0(r2)
200842c0:	8009883a 	mov	r4,r16
200842c4:	a80b883a 	mov	r5,r21
200842c8:	00865840 	call	20086584 <_Bfree>
200842cc:	883e7526 	beq	r17,zero,20083ca4 <__flash_rwdata_start+0xffff1ea8>
200842d0:	90000426 	beq	r18,zero,200842e4 <_dtoa_r+0xcf8>
200842d4:	94400326 	beq	r18,r17,200842e4 <_dtoa_r+0xcf8>
200842d8:	8009883a 	mov	r4,r16
200842dc:	900b883a 	mov	r5,r18
200842e0:	00865840 	call	20086584 <_Bfree>
200842e4:	8009883a 	mov	r4,r16
200842e8:	880b883a 	mov	r5,r17
200842ec:	00865840 	call	20086584 <_Bfree>
200842f0:	003e6c06 	br	20083ca4 <__flash_rwdata_start+0xffff1ea8>
200842f4:	00800704 	movi	r2,28
200842f8:	d9800817 	ldw	r6,32(sp)
200842fc:	a0a9883a 	add	r20,r20,r2
20084300:	b0ad883a 	add	r22,r22,r2
20084304:	308d883a 	add	r6,r6,r2
20084308:	d9800815 	stw	r6,32(sp)
2008430c:	003fa506 	br	200841a4 <__flash_rwdata_start+0xffff23a8>
20084310:	013efb84 	movi	r4,-1042
20084314:	246bc83a 	sub	r21,r4,r17
20084318:	9548983a 	sll	r4,r18,r21
2008431c:	003d1806 	br	20083780 <__flash_rwdata_start+0xffff1984>
20084320:	d8000d15 	stw	zero,52(sp)
20084324:	003d5b06 	br	20083894 <__flash_rwdata_start+0xffff1a98>
20084328:	880b883a 	mov	r5,r17
2008432c:	8009883a 	mov	r4,r16
20084330:	01800284 	movi	r6,10
20084334:	000f883a 	mov	r7,zero
20084338:	00865ac0 	call	200865ac <__multadd>
2008433c:	1023883a 	mov	r17,r2
20084340:	d8800c17 	ldw	r2,48(sp)
20084344:	0082550e 	bge	zero,r2,20084c9c <_dtoa_r+0x16b0>
20084348:	d8800615 	stw	r2,24(sp)
2008434c:	0500050e 	bge	zero,r20,20084364 <_dtoa_r+0xd78>
20084350:	880b883a 	mov	r5,r17
20084354:	8009883a 	mov	r4,r16
20084358:	a00d883a 	mov	r6,r20
2008435c:	0086c600 	call	20086c60 <__lshift>
20084360:	1023883a 	mov	r17,r2
20084364:	98016a1e 	bne	r19,zero,20084910 <_dtoa_r+0x1324>
20084368:	8829883a 	mov	r20,r17
2008436c:	d9000617 	ldw	r4,24(sp)
20084370:	dcc00717 	ldw	r19,28(sp)
20084374:	9480004c 	andi	r18,r18,1
20084378:	20bfffc4 	addi	r2,r4,-1
2008437c:	9885883a 	add	r2,r19,r2
20084380:	d8800415 	stw	r2,16(sp)
20084384:	dc800615 	stw	r18,24(sp)
20084388:	e009883a 	mov	r4,fp
2008438c:	a80b883a 	mov	r5,r21
20084390:	00833ec0 	call	200833ec <quorem>
20084394:	e009883a 	mov	r4,fp
20084398:	880b883a 	mov	r5,r17
2008439c:	102f883a 	mov	r23,r2
200843a0:	0086db00 	call	20086db0 <__mcmp>
200843a4:	8009883a 	mov	r4,r16
200843a8:	a80b883a 	mov	r5,r21
200843ac:	a00d883a 	mov	r6,r20
200843b0:	102d883a 	mov	r22,r2
200843b4:	0086e100 	call	20086e10 <__mdiff>
200843b8:	1007883a 	mov	r3,r2
200843bc:	10800317 	ldw	r2,12(r2)
200843c0:	bc800c04 	addi	r18,r23,48
200843c4:	1000971e 	bne	r2,zero,20084624 <_dtoa_r+0x1038>
200843c8:	180b883a 	mov	r5,r3
200843cc:	e009883a 	mov	r4,fp
200843d0:	d8c01515 	stw	r3,84(sp)
200843d4:	0086db00 	call	20086db0 <__mcmp>
200843d8:	d8c01517 	ldw	r3,84(sp)
200843dc:	8009883a 	mov	r4,r16
200843e0:	d8801515 	stw	r2,84(sp)
200843e4:	180b883a 	mov	r5,r3
200843e8:	00865840 	call	20086584 <_Bfree>
200843ec:	d8801517 	ldw	r2,84(sp)
200843f0:	1000041e 	bne	r2,zero,20084404 <_dtoa_r+0xe18>
200843f4:	d9800317 	ldw	r6,12(sp)
200843f8:	3000021e 	bne	r6,zero,20084404 <_dtoa_r+0xe18>
200843fc:	d8c00617 	ldw	r3,24(sp)
20084400:	18007626 	beq	r3,zero,200845dc <_dtoa_r+0xff0>
20084404:	b0005b16 	blt	r22,zero,20084574 <_dtoa_r+0xf88>
20084408:	b000041e 	bne	r22,zero,2008441c <_dtoa_r+0xe30>
2008440c:	d9000317 	ldw	r4,12(sp)
20084410:	2000021e 	bne	r4,zero,2008441c <_dtoa_r+0xe30>
20084414:	d8c00617 	ldw	r3,24(sp)
20084418:	18005626 	beq	r3,zero,20084574 <_dtoa_r+0xf88>
2008441c:	00814d16 	blt	zero,r2,20084954 <_dtoa_r+0x1368>
20084420:	d8c00417 	ldw	r3,16(sp)
20084424:	9d800044 	addi	r22,r19,1
20084428:	9c800005 	stb	r18,0(r19)
2008442c:	b02f883a 	mov	r23,r22
20084430:	98c14c26 	beq	r19,r3,20084964 <_dtoa_r+0x1378>
20084434:	e00b883a 	mov	r5,fp
20084438:	8009883a 	mov	r4,r16
2008443c:	01800284 	movi	r6,10
20084440:	000f883a 	mov	r7,zero
20084444:	00865ac0 	call	200865ac <__multadd>
20084448:	1039883a 	mov	fp,r2
2008444c:	8d006d26 	beq	r17,r20,20084604 <_dtoa_r+0x1018>
20084450:	880b883a 	mov	r5,r17
20084454:	01800284 	movi	r6,10
20084458:	000f883a 	mov	r7,zero
2008445c:	8009883a 	mov	r4,r16
20084460:	00865ac0 	call	200865ac <__multadd>
20084464:	a00b883a 	mov	r5,r20
20084468:	8009883a 	mov	r4,r16
2008446c:	01800284 	movi	r6,10
20084470:	000f883a 	mov	r7,zero
20084474:	1023883a 	mov	r17,r2
20084478:	00865ac0 	call	200865ac <__multadd>
2008447c:	1029883a 	mov	r20,r2
20084480:	b027883a 	mov	r19,r22
20084484:	003fc006 	br	20084388 <__flash_rwdata_start+0xffff258c>
20084488:	a005883a 	mov	r2,r20
2008448c:	003ede06 	br	20084008 <__flash_rwdata_start+0xffff220c>
20084490:	01000044 	movi	r4,1
20084494:	d9000b15 	stw	r4,44(sp)
20084498:	d9802217 	ldw	r6,136(sp)
2008449c:	0180dc0e 	bge	zero,r6,20084810 <_dtoa_r+0x1224>
200844a0:	3023883a 	mov	r17,r6
200844a4:	d9800c15 	stw	r6,48(sp)
200844a8:	d9800615 	stw	r6,24(sp)
200844ac:	003d1e06 	br	20083928 <__flash_rwdata_start+0xffff1b2c>
200844b0:	d8800617 	ldw	r2,24(sp)
200844b4:	00be3716 	blt	zero,r2,20083d94 <__flash_rwdata_start+0xffff1f98>
200844b8:	1000be1e 	bne	r2,zero,200847b4 <_dtoa_r+0x11c8>
200844bc:	8809883a 	mov	r4,r17
200844c0:	a00b883a 	mov	r5,r20
200844c4:	000d883a 	mov	r6,zero
200844c8:	01d00534 	movhi	r7,16404
200844cc:	008bb880 	call	2008bb88 <__muldf3>
200844d0:	1009883a 	mov	r4,r2
200844d4:	180b883a 	mov	r5,r3
200844d8:	900d883a 	mov	r6,r18
200844dc:	980f883a 	mov	r7,r19
200844e0:	008b9c80 	call	2008b9c8 <__gedf2>
200844e4:	002b883a 	mov	r21,zero
200844e8:	0023883a 	mov	r17,zero
200844ec:	10007a16 	blt	r2,zero,200846d8 <_dtoa_r+0x10ec>
200844f0:	d9002217 	ldw	r4,136(sp)
200844f4:	ddc00717 	ldw	r23,28(sp)
200844f8:	0108303a 	nor	r4,zero,r4
200844fc:	d9000515 	stw	r4,20(sp)
20084500:	8009883a 	mov	r4,r16
20084504:	a80b883a 	mov	r5,r21
20084508:	00865840 	call	20086584 <_Bfree>
2008450c:	883f751e 	bne	r17,zero,200842e4 <__flash_rwdata_start+0xffff24e8>
20084510:	003de406 	br	20083ca4 <__flash_rwdata_start+0xffff1ea8>
20084514:	e00b883a 	mov	r5,fp
20084518:	8009883a 	mov	r4,r16
2008451c:	0086b200 	call	20086b20 <__pow5mult>
20084520:	1039883a 	mov	fp,r2
20084524:	003ed306 	br	20084074 <__flash_rwdata_start+0xffff2278>
20084528:	903ee01e 	bne	r18,zero,200840ac <__flash_rwdata_start+0xffff22b0>
2008452c:	00800434 	movhi	r2,16
20084530:	10bfffc4 	addi	r2,r2,-1
20084534:	9884703a 	and	r2,r19,r2
20084538:	103f081e 	bne	r2,zero,2008415c <__flash_rwdata_start+0xffff2360>
2008453c:	9cdffc2c 	andhi	r19,r19,32752
20084540:	983f0626 	beq	r19,zero,2008415c <__flash_rwdata_start+0xffff2360>
20084544:	d8800817 	ldw	r2,32(sp)
20084548:	b5800044 	addi	r22,r22,1
2008454c:	04c00044 	movi	r19,1
20084550:	10800044 	addi	r2,r2,1
20084554:	d8800815 	stw	r2,32(sp)
20084558:	003f0106 	br	20084160 <__flash_rwdata_start+0xffff2364>
2008455c:	d9800f17 	ldw	r6,60(sp)
20084560:	30016826 	beq	r6,zero,20084b04 <_dtoa_r+0x1518>
20084564:	10810cc4 	addi	r2,r2,1075
20084568:	dd400917 	ldw	r21,36(sp)
2008456c:	dd000817 	ldw	r20,32(sp)
20084570:	003e9906 	br	20083fd8 <__flash_rwdata_start+0xffff21dc>
20084574:	9011883a 	mov	r8,r18
20084578:	4007883a 	mov	r3,r8
2008457c:	e02d883a 	mov	r22,fp
20084580:	0080100e 	bge	zero,r2,200845c4 <_dtoa_r+0xfd8>
20084584:	01800044 	movi	r6,1
20084588:	8009883a 	mov	r4,r16
2008458c:	e00b883a 	mov	r5,fp
20084590:	da001515 	stw	r8,84(sp)
20084594:	da001715 	stw	r8,92(sp)
20084598:	0086c600 	call	20086c60 <__lshift>
2008459c:	1009883a 	mov	r4,r2
200845a0:	a80b883a 	mov	r5,r21
200845a4:	102d883a 	mov	r22,r2
200845a8:	0086db00 	call	20086db0 <__mcmp>
200845ac:	d8c01517 	ldw	r3,84(sp)
200845b0:	da001717 	ldw	r8,92(sp)
200845b4:	0081a50e 	bge	zero,r2,20084c4c <_dtoa_r+0x1660>
200845b8:	00800e44 	movi	r2,57
200845bc:	40817b26 	beq	r8,r2,20084bac <_dtoa_r+0x15c0>
200845c0:	40c00044 	addi	r3,r8,1
200845c4:	8825883a 	mov	r18,r17
200845c8:	9dc00044 	addi	r23,r19,1
200845cc:	98c00005 	stb	r3,0(r19)
200845d0:	a023883a 	mov	r17,r20
200845d4:	b039883a 	mov	fp,r22
200845d8:	003f3906 	br	200842c0 <__flash_rwdata_start+0xffff24c4>
200845dc:	00800e44 	movi	r2,57
200845e0:	9011883a 	mov	r8,r18
200845e4:	90817226 	beq	r18,r2,20084bb0 <_dtoa_r+0x15c4>
200845e8:	0580010e 	bge	zero,r22,200845f0 <_dtoa_r+0x1004>
200845ec:	ba000c44 	addi	r8,r23,49
200845f0:	8825883a 	mov	r18,r17
200845f4:	9dc00044 	addi	r23,r19,1
200845f8:	9a000005 	stb	r8,0(r19)
200845fc:	a023883a 	mov	r17,r20
20084600:	003f2f06 	br	200842c0 <__flash_rwdata_start+0xffff24c4>
20084604:	880b883a 	mov	r5,r17
20084608:	8009883a 	mov	r4,r16
2008460c:	01800284 	movi	r6,10
20084610:	000f883a 	mov	r7,zero
20084614:	00865ac0 	call	200865ac <__multadd>
20084618:	1023883a 	mov	r17,r2
2008461c:	1029883a 	mov	r20,r2
20084620:	003f9706 	br	20084480 <__flash_rwdata_start+0xffff2684>
20084624:	8009883a 	mov	r4,r16
20084628:	180b883a 	mov	r5,r3
2008462c:	00865840 	call	20086584 <_Bfree>
20084630:	00800044 	movi	r2,1
20084634:	003f7306 	br	20084404 <__flash_rwdata_start+0xffff2608>
20084638:	e009883a 	mov	r4,fp
2008463c:	a80b883a 	mov	r5,r21
20084640:	0086db00 	call	20086db0 <__mcmp>
20084644:	103ee60e 	bge	r2,zero,200841e0 <__flash_rwdata_start+0xffff23e4>
20084648:	8009883a 	mov	r4,r16
2008464c:	e00b883a 	mov	r5,fp
20084650:	01800284 	movi	r6,10
20084654:	000f883a 	mov	r7,zero
20084658:	00865ac0 	call	200865ac <__multadd>
2008465c:	d9000517 	ldw	r4,20(sp)
20084660:	d9800b17 	ldw	r6,44(sp)
20084664:	1039883a 	mov	fp,r2
20084668:	213fffc4 	addi	r4,r4,-1
2008466c:	d9000515 	stw	r4,20(sp)
20084670:	303f2d1e 	bne	r6,zero,20084328 <__flash_rwdata_start+0xffff252c>
20084674:	d9000c17 	ldw	r4,48(sp)
20084678:	0101780e 	bge	zero,r4,20084c5c <_dtoa_r+0x1670>
2008467c:	d9000615 	stw	r4,24(sp)
20084680:	003edb06 	br	200841f0 <__flash_rwdata_start+0xffff23f4>
20084684:	00800084 	movi	r2,2
20084688:	30818e1e 	bne	r6,r2,20084cc4 <_dtoa_r+0x16d8>
2008468c:	d8000b15 	stw	zero,44(sp)
20084690:	003f8106 	br	20084498 <__flash_rwdata_start+0xffff269c>
20084694:	d8800717 	ldw	r2,28(sp)
20084698:	003c0306 	br	200836a8 <__flash_rwdata_start+0xffff18ac>
2008469c:	d9000317 	ldw	r4,12(sp)
200846a0:	00800084 	movi	r2,2
200846a4:	113ed00e 	bge	r2,r4,200841e8 <__flash_rwdata_start+0xffff23ec>
200846a8:	d8c00617 	ldw	r3,24(sp)
200846ac:	183f901e 	bne	r3,zero,200844f0 <__flash_rwdata_start+0xffff26f4>
200846b0:	a80b883a 	mov	r5,r21
200846b4:	8009883a 	mov	r4,r16
200846b8:	01800144 	movi	r6,5
200846bc:	000f883a 	mov	r7,zero
200846c0:	00865ac0 	call	200865ac <__multadd>
200846c4:	e009883a 	mov	r4,fp
200846c8:	100b883a 	mov	r5,r2
200846cc:	102b883a 	mov	r21,r2
200846d0:	0086db00 	call	20086db0 <__mcmp>
200846d4:	00bf860e 	bge	zero,r2,200844f0 <__flash_rwdata_start+0xffff26f4>
200846d8:	d9800717 	ldw	r6,28(sp)
200846dc:	00800c44 	movi	r2,49
200846e0:	30800005 	stb	r2,0(r6)
200846e4:	d8800517 	ldw	r2,20(sp)
200846e8:	35c00044 	addi	r23,r6,1
200846ec:	10800044 	addi	r2,r2,1
200846f0:	d8800515 	stw	r2,20(sp)
200846f4:	003f8206 	br	20084500 <__flash_rwdata_start+0xffff2704>
200846f8:	903e981e 	bne	r18,zero,2008415c <__flash_rwdata_start+0xffff2360>
200846fc:	003f8b06 	br	2008452c <__flash_rwdata_start+0xffff2730>
20084700:	d9800517 	ldw	r6,20(sp)
20084704:	d8c00717 	ldw	r3,28(sp)
20084708:	00800c44 	movi	r2,49
2008470c:	31800044 	addi	r6,r6,1
20084710:	d9800515 	stw	r6,20(sp)
20084714:	18800005 	stb	r2,0(r3)
20084718:	003ee906 	br	200842c0 <__flash_rwdata_start+0xffff24c4>
2008471c:	dc000317 	ldw	r16,12(sp)
20084720:	003d6006 	br	20083ca4 <__flash_rwdata_start+0xffff1ea8>
20084724:	8809883a 	mov	r4,r17
20084728:	008cc040 	call	2008cc04 <__floatsidf>
2008472c:	a009883a 	mov	r4,r20
20084730:	a80b883a 	mov	r5,r21
20084734:	100d883a 	mov	r6,r2
20084738:	180f883a 	mov	r7,r3
2008473c:	008bb880 	call	2008bb88 <__muldf3>
20084740:	1009883a 	mov	r4,r2
20084744:	180b883a 	mov	r5,r3
20084748:	000d883a 	mov	r6,zero
2008474c:	01d00734 	movhi	r7,16412
20084750:	008a7dc0 	call	2008a7dc <__adddf3>
20084754:	1023883a 	mov	r17,r2
20084758:	00bf3034 	movhi	r2,64704
2008475c:	1885883a 	add	r2,r3,r2
20084760:	d8800e15 	stw	r2,56(sp)
20084764:	a009883a 	mov	r4,r20
20084768:	a80b883a 	mov	r5,r21
2008476c:	000d883a 	mov	r6,zero
20084770:	01d00534 	movhi	r7,16404
20084774:	008c2ac0 	call	2008c2ac <__subdf3>
20084778:	d9c00e17 	ldw	r7,56(sp)
2008477c:	1009883a 	mov	r4,r2
20084780:	180b883a 	mov	r5,r3
20084784:	880d883a 	mov	r6,r17
20084788:	102b883a 	mov	r21,r2
2008478c:	1829883a 	mov	r20,r3
20084790:	008b9c80 	call	2008b9c8 <__gedf2>
20084794:	00807716 	blt	zero,r2,20084974 <_dtoa_r+0x1388>
20084798:	d8800e17 	ldw	r2,56(sp)
2008479c:	a809883a 	mov	r4,r21
200847a0:	a00b883a 	mov	r5,r20
200847a4:	11e0003c 	xorhi	r7,r2,32768
200847a8:	880d883a 	mov	r6,r17
200847ac:	008baa80 	call	2008baa8 <__ledf2>
200847b0:	103d6b0e 	bge	r2,zero,20083d60 <__flash_rwdata_start+0xffff1f64>
200847b4:	002b883a 	mov	r21,zero
200847b8:	0023883a 	mov	r17,zero
200847bc:	003f4c06 	br	200844f0 <__flash_rwdata_start+0xffff26f4>
200847c0:	d9800917 	ldw	r6,36(sp)
200847c4:	e00b883a 	mov	r5,fp
200847c8:	8009883a 	mov	r4,r16
200847cc:	0086b200 	call	20086b20 <__pow5mult>
200847d0:	1039883a 	mov	fp,r2
200847d4:	003e2706 	br	20084074 <__flash_rwdata_start+0xffff2278>
200847d8:	d8000b15 	stw	zero,44(sp)
200847dc:	003c4906 	br	20083904 <__flash_rwdata_start+0xffff1b08>
200847e0:	d9000917 	ldw	r4,36(sp)
200847e4:	d9800a17 	ldw	r6,40(sp)
200847e8:	dd400915 	stw	r21,36(sp)
200847ec:	a905c83a 	sub	r2,r21,r4
200847f0:	308d883a 	add	r6,r6,r2
200847f4:	d9800a15 	stw	r6,40(sp)
200847f8:	002b883a 	mov	r21,zero
200847fc:	003df206 	br	20083fc8 <__flash_rwdata_start+0xffff21cc>
20084800:	dc800e15 	stw	r18,56(sp)
20084804:	982b883a 	mov	r21,r19
20084808:	04400084 	movi	r17,2
2008480c:	003c7406 	br	200839e0 <__flash_rwdata_start+0xffff1be4>
20084810:	04400044 	movi	r17,1
20084814:	dc400c15 	stw	r17,48(sp)
20084818:	dc400615 	stw	r17,24(sp)
2008481c:	dc402215 	stw	r17,136(sp)
20084820:	80001115 	stw	zero,68(r16)
20084824:	000b883a 	mov	r5,zero
20084828:	003c4a06 	br	20083954 <__flash_rwdata_start+0xffff1b58>
2008482c:	3023883a 	mov	r17,r6
20084830:	003ffb06 	br	20084820 <__flash_rwdata_start+0xffff2a24>
20084834:	1000021e 	bne	r2,zero,20084840 <_dtoa_r+0x1254>
20084838:	4200004c 	andi	r8,r8,1
2008483c:	403e8f1e 	bne	r8,zero,2008427c <__flash_rwdata_start+0xffff2480>
20084840:	01000c04 	movi	r4,48
20084844:	00000106 	br	2008484c <_dtoa_r+0x1260>
20084848:	102f883a 	mov	r23,r2
2008484c:	b8bfffc4 	addi	r2,r23,-1
20084850:	10c00007 	ldb	r3,0(r2)
20084854:	193ffc26 	beq	r3,r4,20084848 <__flash_rwdata_start+0xffff2a4c>
20084858:	003e9906 	br	200842c0 <__flash_rwdata_start+0xffff24c4>
2008485c:	d9000517 	ldw	r4,20(sp)
20084860:	012fc83a 	sub	r23,zero,r4
20084864:	b800ad26 	beq	r23,zero,20084b1c <_dtoa_r+0x1530>
20084868:	b88003cc 	andi	r2,r23,15
2008486c:	100490fa 	slli	r2,r2,3
20084870:	00c00034 	movhi	r3,0
20084874:	18c05204 	addi	r3,r3,328
20084878:	1885883a 	add	r2,r3,r2
2008487c:	11800017 	ldw	r6,0(r2)
20084880:	11c00117 	ldw	r7,4(r2)
20084884:	b82fd13a 	srai	r23,r23,4
20084888:	9009883a 	mov	r4,r18
2008488c:	980b883a 	mov	r5,r19
20084890:	008bb880 	call	2008bb88 <__muldf3>
20084894:	1029883a 	mov	r20,r2
20084898:	182b883a 	mov	r21,r3
2008489c:	b800f426 	beq	r23,zero,20084c70 <_dtoa_r+0x1684>
200848a0:	02000034 	movhi	r8,0
200848a4:	42004804 	addi	r8,r8,288
200848a8:	8029883a 	mov	r20,r16
200848ac:	04400084 	movi	r17,2
200848b0:	4021883a 	mov	r16,r8
200848b4:	b980004c 	andi	r6,r23,1
200848b8:	1009883a 	mov	r4,r2
200848bc:	b82fd07a 	srai	r23,r23,1
200848c0:	180b883a 	mov	r5,r3
200848c4:	30000426 	beq	r6,zero,200848d8 <_dtoa_r+0x12ec>
200848c8:	81800017 	ldw	r6,0(r16)
200848cc:	81c00117 	ldw	r7,4(r16)
200848d0:	8c400044 	addi	r17,r17,1
200848d4:	008bb880 	call	2008bb88 <__muldf3>
200848d8:	84000204 	addi	r16,r16,8
200848dc:	b83ff51e 	bne	r23,zero,200848b4 <__flash_rwdata_start+0xffff2ab8>
200848e0:	a021883a 	mov	r16,r20
200848e4:	182b883a 	mov	r21,r3
200848e8:	1029883a 	mov	r20,r2
200848ec:	003c5506 	br	20083a44 <__flash_rwdata_start+0xffff1c48>
200848f0:	d9800517 	ldw	r6,20(sp)
200848f4:	d9000717 	ldw	r4,28(sp)
200848f8:	00c00c04 	movi	r3,48
200848fc:	31800044 	addi	r6,r6,1
20084900:	d9800515 	stw	r6,20(sp)
20084904:	20c00005 	stb	r3,0(r4)
20084908:	02000c44 	movi	r8,49
2008490c:	003da206 	br	20083f98 <__flash_rwdata_start+0xffff219c>
20084910:	89400117 	ldw	r5,4(r17)
20084914:	8009883a 	mov	r4,r16
20084918:	00864dc0 	call	200864dc <_Balloc>
2008491c:	89800417 	ldw	r6,16(r17)
20084920:	11000304 	addi	r4,r2,12
20084924:	89400304 	addi	r5,r17,12
20084928:	31800084 	addi	r6,r6,2
2008492c:	318d883a 	add	r6,r6,r6
20084930:	318d883a 	add	r6,r6,r6
20084934:	1027883a 	mov	r19,r2
20084938:	00861240 	call	20086124 <memcpy>
2008493c:	8009883a 	mov	r4,r16
20084940:	980b883a 	mov	r5,r19
20084944:	01800044 	movi	r6,1
20084948:	0086c600 	call	20086c60 <__lshift>
2008494c:	1029883a 	mov	r20,r2
20084950:	003e8606 	br	2008436c <__flash_rwdata_start+0xffff2570>
20084954:	00800e44 	movi	r2,57
20084958:	90809526 	beq	r18,r2,20084bb0 <_dtoa_r+0x15c4>
2008495c:	92000044 	addi	r8,r18,1
20084960:	003f2306 	br	200845f0 <__flash_rwdata_start+0xffff27f4>
20084964:	9011883a 	mov	r8,r18
20084968:	8825883a 	mov	r18,r17
2008496c:	a023883a 	mov	r17,r20
20084970:	003e3706 	br	20084250 <__flash_rwdata_start+0xffff2454>
20084974:	002b883a 	mov	r21,zero
20084978:	0023883a 	mov	r17,zero
2008497c:	003f5606 	br	200846d8 <__flash_rwdata_start+0xffff28dc>
20084980:	51bfffc4 	addi	r6,r10,-1
20084984:	300490fa 	slli	r2,r6,3
20084988:	00c00034 	movhi	r3,0
2008498c:	18c05204 	addi	r3,r3,328
20084990:	1885883a 	add	r2,r3,r2
20084994:	d9c00e17 	ldw	r7,56(sp)
20084998:	11000017 	ldw	r4,0(r2)
2008499c:	11400117 	ldw	r5,4(r2)
200849a0:	d8800717 	ldw	r2,28(sp)
200849a4:	d9801015 	stw	r6,64(sp)
200849a8:	880d883a 	mov	r6,r17
200849ac:	da801615 	stw	r10,88(sp)
200849b0:	15c00044 	addi	r23,r2,1
200849b4:	008bb880 	call	2008bb88 <__muldf3>
200849b8:	a80b883a 	mov	r5,r21
200849bc:	a009883a 	mov	r4,r20
200849c0:	d8c01115 	stw	r3,68(sp)
200849c4:	d8800e15 	stw	r2,56(sp)
200849c8:	008cb7c0 	call	2008cb7c <__fixdfsi>
200849cc:	1009883a 	mov	r4,r2
200849d0:	1023883a 	mov	r17,r2
200849d4:	008cc040 	call	2008cc04 <__floatsidf>
200849d8:	a009883a 	mov	r4,r20
200849dc:	a80b883a 	mov	r5,r21
200849e0:	100d883a 	mov	r6,r2
200849e4:	180f883a 	mov	r7,r3
200849e8:	008c2ac0 	call	2008c2ac <__subdf3>
200849ec:	1813883a 	mov	r9,r3
200849f0:	d8c00717 	ldw	r3,28(sp)
200849f4:	8c400c04 	addi	r17,r17,48
200849f8:	1011883a 	mov	r8,r2
200849fc:	1c400005 	stb	r17,0(r3)
20084a00:	da801617 	ldw	r10,88(sp)
20084a04:	00800044 	movi	r2,1
20084a08:	50802326 	beq	r10,r2,20084a98 <_dtoa_r+0x14ac>
20084a0c:	d8800717 	ldw	r2,28(sp)
20084a10:	b82b883a 	mov	r21,r23
20084a14:	dc001315 	stw	r16,76(sp)
20084a18:	12a9883a 	add	r20,r2,r10
20084a1c:	4807883a 	mov	r3,r9
20084a20:	4005883a 	mov	r2,r8
20084a24:	dc801415 	stw	r18,80(sp)
20084a28:	000d883a 	mov	r6,zero
20084a2c:	01d00934 	movhi	r7,16420
20084a30:	1009883a 	mov	r4,r2
20084a34:	180b883a 	mov	r5,r3
20084a38:	008bb880 	call	2008bb88 <__muldf3>
20084a3c:	180b883a 	mov	r5,r3
20084a40:	1009883a 	mov	r4,r2
20084a44:	1821883a 	mov	r16,r3
20084a48:	1025883a 	mov	r18,r2
20084a4c:	008cb7c0 	call	2008cb7c <__fixdfsi>
20084a50:	1009883a 	mov	r4,r2
20084a54:	1023883a 	mov	r17,r2
20084a58:	008cc040 	call	2008cc04 <__floatsidf>
20084a5c:	9009883a 	mov	r4,r18
20084a60:	800b883a 	mov	r5,r16
20084a64:	100d883a 	mov	r6,r2
20084a68:	180f883a 	mov	r7,r3
20084a6c:	8c400c04 	addi	r17,r17,48
20084a70:	008c2ac0 	call	2008c2ac <__subdf3>
20084a74:	ad400044 	addi	r21,r21,1
20084a78:	ac7fffc5 	stb	r17,-1(r21)
20084a7c:	ad3fea1e 	bne	r21,r20,20084a28 <__flash_rwdata_start+0xffff2c2c>
20084a80:	1813883a 	mov	r9,r3
20084a84:	d8c01017 	ldw	r3,64(sp)
20084a88:	dc001317 	ldw	r16,76(sp)
20084a8c:	dc801417 	ldw	r18,80(sp)
20084a90:	1011883a 	mov	r8,r2
20084a94:	b8ef883a 	add	r23,r23,r3
20084a98:	d9000e17 	ldw	r4,56(sp)
20084a9c:	d9401117 	ldw	r5,68(sp)
20084aa0:	000d883a 	mov	r6,zero
20084aa4:	01cff834 	movhi	r7,16352
20084aa8:	da001715 	stw	r8,92(sp)
20084aac:	da401515 	stw	r9,84(sp)
20084ab0:	008a7dc0 	call	2008a7dc <__adddf3>
20084ab4:	da001717 	ldw	r8,92(sp)
20084ab8:	da401517 	ldw	r9,84(sp)
20084abc:	1009883a 	mov	r4,r2
20084ac0:	400d883a 	mov	r6,r8
20084ac4:	480f883a 	mov	r7,r9
20084ac8:	180b883a 	mov	r5,r3
20084acc:	008baa80 	call	2008baa8 <__ledf2>
20084ad0:	da001717 	ldw	r8,92(sp)
20084ad4:	da401517 	ldw	r9,84(sp)
20084ad8:	10003b0e 	bge	r2,zero,20084bc8 <_dtoa_r+0x15dc>
20084adc:	d9001217 	ldw	r4,72(sp)
20084ae0:	bd7fffc3 	ldbu	r21,-1(r23)
20084ae4:	d9000515 	stw	r4,20(sp)
20084ae8:	003d1c06 	br	20083f5c <__flash_rwdata_start+0xffff2160>
20084aec:	d8c00817 	ldw	r3,32(sp)
20084af0:	18a9c83a 	sub	r20,r3,r2
20084af4:	0005883a 	mov	r2,zero
20084af8:	003d3706 	br	20083fd8 <__flash_rwdata_start+0xffff21dc>
20084afc:	00800044 	movi	r2,1
20084b00:	003dd006 	br	20084244 <__flash_rwdata_start+0xffff2448>
20084b04:	d8c00217 	ldw	r3,8(sp)
20084b08:	00800d84 	movi	r2,54
20084b0c:	dd400917 	ldw	r21,36(sp)
20084b10:	10c5c83a 	sub	r2,r2,r3
20084b14:	dd000817 	ldw	r20,32(sp)
20084b18:	003d2f06 	br	20083fd8 <__flash_rwdata_start+0xffff21dc>
20084b1c:	9029883a 	mov	r20,r18
20084b20:	982b883a 	mov	r21,r19
20084b24:	04400084 	movi	r17,2
20084b28:	003bc606 	br	20083a44 <__flash_rwdata_start+0xffff1c48>
20084b2c:	d8800617 	ldw	r2,24(sp)
20084b30:	103efc26 	beq	r2,zero,20084724 <__flash_rwdata_start+0xffff2928>
20084b34:	d8c00c17 	ldw	r3,48(sp)
20084b38:	00fc890e 	bge	zero,r3,20083d60 <__flash_rwdata_start+0xffff1f64>
20084b3c:	a80b883a 	mov	r5,r21
20084b40:	a009883a 	mov	r4,r20
20084b44:	000d883a 	mov	r6,zero
20084b48:	01d00934 	movhi	r7,16420
20084b4c:	008bb880 	call	2008bb88 <__muldf3>
20084b50:	89000044 	addi	r4,r17,1
20084b54:	1029883a 	mov	r20,r2
20084b58:	182b883a 	mov	r21,r3
20084b5c:	008cc040 	call	2008cc04 <__floatsidf>
20084b60:	a009883a 	mov	r4,r20
20084b64:	a80b883a 	mov	r5,r21
20084b68:	100d883a 	mov	r6,r2
20084b6c:	180f883a 	mov	r7,r3
20084b70:	008bb880 	call	2008bb88 <__muldf3>
20084b74:	1009883a 	mov	r4,r2
20084b78:	180b883a 	mov	r5,r3
20084b7c:	000d883a 	mov	r6,zero
20084b80:	01d00734 	movhi	r7,16412
20084b84:	008a7dc0 	call	2008a7dc <__adddf3>
20084b88:	d9000517 	ldw	r4,20(sp)
20084b8c:	1023883a 	mov	r17,r2
20084b90:	00bf3034 	movhi	r2,64704
20084b94:	213fffc4 	addi	r4,r4,-1
20084b98:	1885883a 	add	r2,r3,r2
20084b9c:	d9001215 	stw	r4,72(sp)
20084ba0:	d8800e15 	stw	r2,56(sp)
20084ba4:	da800c17 	ldw	r10,48(sp)
20084ba8:	003bc306 	br	20083ab8 <__flash_rwdata_start+0xffff1cbc>
20084bac:	b039883a 	mov	fp,r22
20084bb0:	01000e44 	movi	r4,57
20084bb4:	8825883a 	mov	r18,r17
20084bb8:	9dc00044 	addi	r23,r19,1
20084bbc:	99000005 	stb	r4,0(r19)
20084bc0:	a023883a 	mov	r17,r20
20084bc4:	003dae06 	br	20084280 <__flash_rwdata_start+0xffff2484>
20084bc8:	d9800e17 	ldw	r6,56(sp)
20084bcc:	d9c01117 	ldw	r7,68(sp)
20084bd0:	0009883a 	mov	r4,zero
20084bd4:	014ff834 	movhi	r5,16352
20084bd8:	da001715 	stw	r8,92(sp)
20084bdc:	da401515 	stw	r9,84(sp)
20084be0:	008c2ac0 	call	2008c2ac <__subdf3>
20084be4:	da001717 	ldw	r8,92(sp)
20084be8:	da401517 	ldw	r9,84(sp)
20084bec:	1009883a 	mov	r4,r2
20084bf0:	180b883a 	mov	r5,r3
20084bf4:	400d883a 	mov	r6,r8
20084bf8:	480f883a 	mov	r7,r9
20084bfc:	008b9c80 	call	2008b9c8 <__gedf2>
20084c00:	00bc570e 	bge	zero,r2,20083d60 <__flash_rwdata_start+0xffff1f64>
20084c04:	01000c04 	movi	r4,48
20084c08:	00000106 	br	20084c10 <_dtoa_r+0x1624>
20084c0c:	102f883a 	mov	r23,r2
20084c10:	b8bfffc4 	addi	r2,r23,-1
20084c14:	10c00007 	ldb	r3,0(r2)
20084c18:	193ffc26 	beq	r3,r4,20084c0c <__flash_rwdata_start+0xffff2e10>
20084c1c:	d9801217 	ldw	r6,72(sp)
20084c20:	d9800515 	stw	r6,20(sp)
20084c24:	003c1f06 	br	20083ca4 <__flash_rwdata_start+0xffff1ea8>
20084c28:	d8801217 	ldw	r2,72(sp)
20084c2c:	dc001117 	ldw	r16,68(sp)
20084c30:	d8800515 	stw	r2,20(sp)
20084c34:	003cc906 	br	20083f5c <__flash_rwdata_start+0xffff2160>
20084c38:	dd801317 	ldw	r22,76(sp)
20084c3c:	dc001117 	ldw	r16,68(sp)
20084c40:	dcc01417 	ldw	r19,80(sp)
20084c44:	dc801017 	ldw	r18,64(sp)
20084c48:	003c4506 	br	20083d60 <__flash_rwdata_start+0xffff1f64>
20084c4c:	103e5d1e 	bne	r2,zero,200845c4 <__flash_rwdata_start+0xffff27c8>
20084c50:	4080004c 	andi	r2,r8,1
20084c54:	103e5b26 	beq	r2,zero,200845c4 <__flash_rwdata_start+0xffff27c8>
20084c58:	003e5706 	br	200845b8 <__flash_rwdata_start+0xffff27bc>
20084c5c:	d8c00317 	ldw	r3,12(sp)
20084c60:	00800084 	movi	r2,2
20084c64:	10c00a16 	blt	r2,r3,20084c90 <_dtoa_r+0x16a4>
20084c68:	d9000c17 	ldw	r4,48(sp)
20084c6c:	003e8306 	br	2008467c <__flash_rwdata_start+0xffff2880>
20084c70:	04400084 	movi	r17,2
20084c74:	003b7306 	br	20083a44 <__flash_rwdata_start+0xffff1c48>
20084c78:	d9801217 	ldw	r6,72(sp)
20084c7c:	d9800515 	stw	r6,20(sp)
20084c80:	003cb606 	br	20083f5c <__flash_rwdata_start+0xffff2160>
20084c84:	d9001217 	ldw	r4,72(sp)
20084c88:	d9000515 	stw	r4,20(sp)
20084c8c:	003c0506 	br	20083ca4 <__flash_rwdata_start+0xffff1ea8>
20084c90:	d9800c17 	ldw	r6,48(sp)
20084c94:	d9800615 	stw	r6,24(sp)
20084c98:	003e8306 	br	200846a8 <__flash_rwdata_start+0xffff28ac>
20084c9c:	d9800317 	ldw	r6,12(sp)
20084ca0:	00800084 	movi	r2,2
20084ca4:	11800216 	blt	r2,r6,20084cb0 <_dtoa_r+0x16c4>
20084ca8:	d8800c17 	ldw	r2,48(sp)
20084cac:	003da606 	br	20084348 <__flash_rwdata_start+0xffff254c>
20084cb0:	d8800c17 	ldw	r2,48(sp)
20084cb4:	d8800615 	stw	r2,24(sp)
20084cb8:	003e7b06 	br	200846a8 <__flash_rwdata_start+0xffff28ac>
20084cbc:	05000044 	movi	r20,1
20084cc0:	003b0506 	br	200838d8 <__flash_rwdata_start+0xffff1adc>
20084cc4:	8009883a 	mov	r4,r16
20084cc8:	80001115 	stw	zero,68(r16)
20084ccc:	000b883a 	mov	r5,zero
20084cd0:	00864dc0 	call	200864dc <_Balloc>
20084cd4:	d8800715 	stw	r2,28(sp)
20084cd8:	d8c00717 	ldw	r3,28(sp)
20084cdc:	00bfffc4 	movi	r2,-1
20084ce0:	01000044 	movi	r4,1
20084ce4:	d8800c15 	stw	r2,48(sp)
20084ce8:	80c01015 	stw	r3,64(r16)
20084cec:	d9000b15 	stw	r4,44(sp)
20084cf0:	d8800615 	stw	r2,24(sp)
20084cf4:	d8002215 	stw	zero,136(sp)
20084cf8:	003c1906 	br	20083d60 <__flash_rwdata_start+0xffff1f64>
20084cfc:	193d2926 	beq	r3,r4,200841a4 <__flash_rwdata_start+0xffff23a8>
20084d00:	00c00f04 	movi	r3,60
20084d04:	1885c83a 	sub	r2,r3,r2
20084d08:	003d7b06 	br	200842f8 <__flash_rwdata_start+0xffff24fc>
20084d0c:	000b883a 	mov	r5,zero
20084d10:	003b1006 	br	20083954 <__flash_rwdata_start+0xffff1b58>

20084d14 <__sflush_r>:
20084d14:	2880030b 	ldhu	r2,12(r5)
20084d18:	defffb04 	addi	sp,sp,-20
20084d1c:	dcc00315 	stw	r19,12(sp)
20084d20:	dc400115 	stw	r17,4(sp)
20084d24:	dfc00415 	stw	ra,16(sp)
20084d28:	dc800215 	stw	r18,8(sp)
20084d2c:	dc000015 	stw	r16,0(sp)
20084d30:	10c0020c 	andi	r3,r2,8
20084d34:	2823883a 	mov	r17,r5
20084d38:	2027883a 	mov	r19,r4
20084d3c:	1800311e 	bne	r3,zero,20084e04 <__sflush_r+0xf0>
20084d40:	28c00117 	ldw	r3,4(r5)
20084d44:	10820014 	ori	r2,r2,2048
20084d48:	2880030d 	sth	r2,12(r5)
20084d4c:	00c04b0e 	bge	zero,r3,20084e7c <__sflush_r+0x168>
20084d50:	8a000a17 	ldw	r8,40(r17)
20084d54:	40002326 	beq	r8,zero,20084de4 <__sflush_r+0xd0>
20084d58:	9c000017 	ldw	r16,0(r19)
20084d5c:	10c4000c 	andi	r3,r2,4096
20084d60:	98000015 	stw	zero,0(r19)
20084d64:	18004826 	beq	r3,zero,20084e88 <__sflush_r+0x174>
20084d68:	89801417 	ldw	r6,80(r17)
20084d6c:	10c0010c 	andi	r3,r2,4
20084d70:	18000626 	beq	r3,zero,20084d8c <__sflush_r+0x78>
20084d74:	88c00117 	ldw	r3,4(r17)
20084d78:	88800c17 	ldw	r2,48(r17)
20084d7c:	30cdc83a 	sub	r6,r6,r3
20084d80:	10000226 	beq	r2,zero,20084d8c <__sflush_r+0x78>
20084d84:	88800f17 	ldw	r2,60(r17)
20084d88:	308dc83a 	sub	r6,r6,r2
20084d8c:	89400717 	ldw	r5,28(r17)
20084d90:	9809883a 	mov	r4,r19
20084d94:	000f883a 	mov	r7,zero
20084d98:	403ee83a 	callr	r8
20084d9c:	00ffffc4 	movi	r3,-1
20084da0:	10c04426 	beq	r2,r3,20084eb4 <__sflush_r+0x1a0>
20084da4:	88c0030b 	ldhu	r3,12(r17)
20084da8:	89000417 	ldw	r4,16(r17)
20084dac:	88000115 	stw	zero,4(r17)
20084db0:	197dffcc 	andi	r5,r3,63487
20084db4:	8940030d 	sth	r5,12(r17)
20084db8:	89000015 	stw	r4,0(r17)
20084dbc:	18c4000c 	andi	r3,r3,4096
20084dc0:	18002c1e 	bne	r3,zero,20084e74 <__sflush_r+0x160>
20084dc4:	89400c17 	ldw	r5,48(r17)
20084dc8:	9c000015 	stw	r16,0(r19)
20084dcc:	28000526 	beq	r5,zero,20084de4 <__sflush_r+0xd0>
20084dd0:	88801004 	addi	r2,r17,64
20084dd4:	28800226 	beq	r5,r2,20084de0 <__sflush_r+0xcc>
20084dd8:	9809883a 	mov	r4,r19
20084ddc:	008546c0 	call	2008546c <_free_r>
20084de0:	88000c15 	stw	zero,48(r17)
20084de4:	0005883a 	mov	r2,zero
20084de8:	dfc00417 	ldw	ra,16(sp)
20084dec:	dcc00317 	ldw	r19,12(sp)
20084df0:	dc800217 	ldw	r18,8(sp)
20084df4:	dc400117 	ldw	r17,4(sp)
20084df8:	dc000017 	ldw	r16,0(sp)
20084dfc:	dec00504 	addi	sp,sp,20
20084e00:	f800283a 	ret
20084e04:	2c800417 	ldw	r18,16(r5)
20084e08:	903ff626 	beq	r18,zero,20084de4 <__flash_rwdata_start+0xffff2fe8>
20084e0c:	2c000017 	ldw	r16,0(r5)
20084e10:	108000cc 	andi	r2,r2,3
20084e14:	2c800015 	stw	r18,0(r5)
20084e18:	84a1c83a 	sub	r16,r16,r18
20084e1c:	1000131e 	bne	r2,zero,20084e6c <__sflush_r+0x158>
20084e20:	28800517 	ldw	r2,20(r5)
20084e24:	88800215 	stw	r2,8(r17)
20084e28:	04000316 	blt	zero,r16,20084e38 <__sflush_r+0x124>
20084e2c:	003fed06 	br	20084de4 <__flash_rwdata_start+0xffff2fe8>
20084e30:	90a5883a 	add	r18,r18,r2
20084e34:	043feb0e 	bge	zero,r16,20084de4 <__flash_rwdata_start+0xffff2fe8>
20084e38:	88800917 	ldw	r2,36(r17)
20084e3c:	89400717 	ldw	r5,28(r17)
20084e40:	800f883a 	mov	r7,r16
20084e44:	900d883a 	mov	r6,r18
20084e48:	9809883a 	mov	r4,r19
20084e4c:	103ee83a 	callr	r2
20084e50:	80a1c83a 	sub	r16,r16,r2
20084e54:	00bff616 	blt	zero,r2,20084e30 <__flash_rwdata_start+0xffff3034>
20084e58:	88c0030b 	ldhu	r3,12(r17)
20084e5c:	00bfffc4 	movi	r2,-1
20084e60:	18c01014 	ori	r3,r3,64
20084e64:	88c0030d 	sth	r3,12(r17)
20084e68:	003fdf06 	br	20084de8 <__flash_rwdata_start+0xffff2fec>
20084e6c:	0005883a 	mov	r2,zero
20084e70:	003fec06 	br	20084e24 <__flash_rwdata_start+0xffff3028>
20084e74:	88801415 	stw	r2,80(r17)
20084e78:	003fd206 	br	20084dc4 <__flash_rwdata_start+0xffff2fc8>
20084e7c:	28c00f17 	ldw	r3,60(r5)
20084e80:	00ffb316 	blt	zero,r3,20084d50 <__flash_rwdata_start+0xffff2f54>
20084e84:	003fd706 	br	20084de4 <__flash_rwdata_start+0xffff2fe8>
20084e88:	89400717 	ldw	r5,28(r17)
20084e8c:	000d883a 	mov	r6,zero
20084e90:	9809883a 	mov	r4,r19
20084e94:	01c00044 	movi	r7,1
20084e98:	403ee83a 	callr	r8
20084e9c:	100d883a 	mov	r6,r2
20084ea0:	00bfffc4 	movi	r2,-1
20084ea4:	30801426 	beq	r6,r2,20084ef8 <__sflush_r+0x1e4>
20084ea8:	8880030b 	ldhu	r2,12(r17)
20084eac:	8a000a17 	ldw	r8,40(r17)
20084eb0:	003fae06 	br	20084d6c <__flash_rwdata_start+0xffff2f70>
20084eb4:	98c00017 	ldw	r3,0(r19)
20084eb8:	183fba26 	beq	r3,zero,20084da4 <__flash_rwdata_start+0xffff2fa8>
20084ebc:	01000744 	movi	r4,29
20084ec0:	19000626 	beq	r3,r4,20084edc <__sflush_r+0x1c8>
20084ec4:	01000584 	movi	r4,22
20084ec8:	19000426 	beq	r3,r4,20084edc <__sflush_r+0x1c8>
20084ecc:	88c0030b 	ldhu	r3,12(r17)
20084ed0:	18c01014 	ori	r3,r3,64
20084ed4:	88c0030d 	sth	r3,12(r17)
20084ed8:	003fc306 	br	20084de8 <__flash_rwdata_start+0xffff2fec>
20084edc:	8880030b 	ldhu	r2,12(r17)
20084ee0:	88c00417 	ldw	r3,16(r17)
20084ee4:	88000115 	stw	zero,4(r17)
20084ee8:	10bdffcc 	andi	r2,r2,63487
20084eec:	8880030d 	sth	r2,12(r17)
20084ef0:	88c00015 	stw	r3,0(r17)
20084ef4:	003fb306 	br	20084dc4 <__flash_rwdata_start+0xffff2fc8>
20084ef8:	98800017 	ldw	r2,0(r19)
20084efc:	103fea26 	beq	r2,zero,20084ea8 <__flash_rwdata_start+0xffff30ac>
20084f00:	00c00744 	movi	r3,29
20084f04:	10c00226 	beq	r2,r3,20084f10 <__sflush_r+0x1fc>
20084f08:	00c00584 	movi	r3,22
20084f0c:	10ffd21e 	bne	r2,r3,20084e58 <__flash_rwdata_start+0xffff305c>
20084f10:	9c000015 	stw	r16,0(r19)
20084f14:	0005883a 	mov	r2,zero
20084f18:	003fb306 	br	20084de8 <__flash_rwdata_start+0xffff2fec>

20084f1c <_fflush_r>:
20084f1c:	defffd04 	addi	sp,sp,-12
20084f20:	dc000115 	stw	r16,4(sp)
20084f24:	dfc00215 	stw	ra,8(sp)
20084f28:	2021883a 	mov	r16,r4
20084f2c:	20000226 	beq	r4,zero,20084f38 <_fflush_r+0x1c>
20084f30:	20800e17 	ldw	r2,56(r4)
20084f34:	10000c26 	beq	r2,zero,20084f68 <_fflush_r+0x4c>
20084f38:	2880030f 	ldh	r2,12(r5)
20084f3c:	1000051e 	bne	r2,zero,20084f54 <_fflush_r+0x38>
20084f40:	0005883a 	mov	r2,zero
20084f44:	dfc00217 	ldw	ra,8(sp)
20084f48:	dc000117 	ldw	r16,4(sp)
20084f4c:	dec00304 	addi	sp,sp,12
20084f50:	f800283a 	ret
20084f54:	8009883a 	mov	r4,r16
20084f58:	dfc00217 	ldw	ra,8(sp)
20084f5c:	dc000117 	ldw	r16,4(sp)
20084f60:	dec00304 	addi	sp,sp,12
20084f64:	0084d141 	jmpi	20084d14 <__sflush_r>
20084f68:	d9400015 	stw	r5,0(sp)
20084f6c:	00852f80 	call	200852f8 <__sinit>
20084f70:	d9400017 	ldw	r5,0(sp)
20084f74:	003ff006 	br	20084f38 <__flash_rwdata_start+0xffff313c>

20084f78 <fflush>:
20084f78:	20000526 	beq	r4,zero,20084f90 <fflush+0x18>
20084f7c:	00800034 	movhi	r2,0
20084f80:	10895004 	addi	r2,r2,9536
20084f84:	200b883a 	mov	r5,r4
20084f88:	11000017 	ldw	r4,0(r2)
20084f8c:	0084f1c1 	jmpi	20084f1c <_fflush_r>
20084f90:	00800034 	movhi	r2,0
20084f94:	10894f04 	addi	r2,r2,9532
20084f98:	11000017 	ldw	r4,0(r2)
20084f9c:	01480234 	movhi	r5,8200
20084fa0:	2953c704 	addi	r5,r5,20252
20084fa4:	0085ce01 	jmpi	20085ce0 <_fwalk_reent>

20084fa8 <__fp_lock>:
20084fa8:	0005883a 	mov	r2,zero
20084fac:	f800283a 	ret

20084fb0 <__fp_unlock>:
20084fb0:	0005883a 	mov	r2,zero
20084fb4:	f800283a 	ret

20084fb8 <_cleanup_r>:
20084fb8:	01480274 	movhi	r5,8201
20084fbc:	29654c04 	addi	r5,r5,-27344
20084fc0:	0085ce01 	jmpi	20085ce0 <_fwalk_reent>

20084fc4 <__sinit.part.1>:
20084fc4:	defff704 	addi	sp,sp,-36
20084fc8:	00c80234 	movhi	r3,8200
20084fcc:	dfc00815 	stw	ra,32(sp)
20084fd0:	ddc00715 	stw	r23,28(sp)
20084fd4:	dd800615 	stw	r22,24(sp)
20084fd8:	dd400515 	stw	r21,20(sp)
20084fdc:	dd000415 	stw	r20,16(sp)
20084fe0:	dcc00315 	stw	r19,12(sp)
20084fe4:	dc800215 	stw	r18,8(sp)
20084fe8:	dc400115 	stw	r17,4(sp)
20084fec:	dc000015 	stw	r16,0(sp)
20084ff0:	18d3ee04 	addi	r3,r3,20408
20084ff4:	24000117 	ldw	r16,4(r4)
20084ff8:	20c00f15 	stw	r3,60(r4)
20084ffc:	2080bb04 	addi	r2,r4,748
20085000:	00c000c4 	movi	r3,3
20085004:	20c0b915 	stw	r3,740(r4)
20085008:	2080ba15 	stw	r2,744(r4)
2008500c:	2000b815 	stw	zero,736(r4)
20085010:	05c00204 	movi	r23,8
20085014:	00800104 	movi	r2,4
20085018:	2025883a 	mov	r18,r4
2008501c:	b80d883a 	mov	r6,r23
20085020:	81001704 	addi	r4,r16,92
20085024:	000b883a 	mov	r5,zero
20085028:	80000015 	stw	zero,0(r16)
2008502c:	80000115 	stw	zero,4(r16)
20085030:	80000215 	stw	zero,8(r16)
20085034:	8080030d 	sth	r2,12(r16)
20085038:	80001915 	stw	zero,100(r16)
2008503c:	8000038d 	sth	zero,14(r16)
20085040:	80000415 	stw	zero,16(r16)
20085044:	80000515 	stw	zero,20(r16)
20085048:	80000615 	stw	zero,24(r16)
2008504c:	00863b80 	call	200863b8 <memset>
20085050:	05880234 	movhi	r22,8200
20085054:	94400217 	ldw	r17,8(r18)
20085058:	05480234 	movhi	r21,8200
2008505c:	05080234 	movhi	r20,8200
20085060:	04c80234 	movhi	r19,8200
20085064:	b59ef104 	addi	r22,r22,31684
20085068:	ad5f0804 	addi	r21,r21,31776
2008506c:	a51f2704 	addi	r20,r20,31900
20085070:	9cdf3e04 	addi	r19,r19,31992
20085074:	85800815 	stw	r22,32(r16)
20085078:	85400915 	stw	r21,36(r16)
2008507c:	85000a15 	stw	r20,40(r16)
20085080:	84c00b15 	stw	r19,44(r16)
20085084:	84000715 	stw	r16,28(r16)
20085088:	00800284 	movi	r2,10
2008508c:	8880030d 	sth	r2,12(r17)
20085090:	00800044 	movi	r2,1
20085094:	89001704 	addi	r4,r17,92
20085098:	b80d883a 	mov	r6,r23
2008509c:	000b883a 	mov	r5,zero
200850a0:	88000015 	stw	zero,0(r17)
200850a4:	88000115 	stw	zero,4(r17)
200850a8:	88000215 	stw	zero,8(r17)
200850ac:	88001915 	stw	zero,100(r17)
200850b0:	8880038d 	sth	r2,14(r17)
200850b4:	88000415 	stw	zero,16(r17)
200850b8:	88000515 	stw	zero,20(r17)
200850bc:	88000615 	stw	zero,24(r17)
200850c0:	00863b80 	call	200863b8 <memset>
200850c4:	94000317 	ldw	r16,12(r18)
200850c8:	00800484 	movi	r2,18
200850cc:	8c400715 	stw	r17,28(r17)
200850d0:	8d800815 	stw	r22,32(r17)
200850d4:	8d400915 	stw	r21,36(r17)
200850d8:	8d000a15 	stw	r20,40(r17)
200850dc:	8cc00b15 	stw	r19,44(r17)
200850e0:	8080030d 	sth	r2,12(r16)
200850e4:	00800084 	movi	r2,2
200850e8:	80000015 	stw	zero,0(r16)
200850ec:	80000115 	stw	zero,4(r16)
200850f0:	80000215 	stw	zero,8(r16)
200850f4:	80001915 	stw	zero,100(r16)
200850f8:	8080038d 	sth	r2,14(r16)
200850fc:	80000415 	stw	zero,16(r16)
20085100:	80000515 	stw	zero,20(r16)
20085104:	80000615 	stw	zero,24(r16)
20085108:	81001704 	addi	r4,r16,92
2008510c:	000b883a 	mov	r5,zero
20085110:	b80d883a 	mov	r6,r23
20085114:	00863b80 	call	200863b8 <memset>
20085118:	00800044 	movi	r2,1
2008511c:	84000715 	stw	r16,28(r16)
20085120:	85800815 	stw	r22,32(r16)
20085124:	85400915 	stw	r21,36(r16)
20085128:	85000a15 	stw	r20,40(r16)
2008512c:	84c00b15 	stw	r19,44(r16)
20085130:	90800e15 	stw	r2,56(r18)
20085134:	dfc00817 	ldw	ra,32(sp)
20085138:	ddc00717 	ldw	r23,28(sp)
2008513c:	dd800617 	ldw	r22,24(sp)
20085140:	dd400517 	ldw	r21,20(sp)
20085144:	dd000417 	ldw	r20,16(sp)
20085148:	dcc00317 	ldw	r19,12(sp)
2008514c:	dc800217 	ldw	r18,8(sp)
20085150:	dc400117 	ldw	r17,4(sp)
20085154:	dc000017 	ldw	r16,0(sp)
20085158:	dec00904 	addi	sp,sp,36
2008515c:	f800283a 	ret

20085160 <__sfmoreglue>:
20085160:	defffc04 	addi	sp,sp,-16
20085164:	dc400115 	stw	r17,4(sp)
20085168:	2c7fffc4 	addi	r17,r5,-1
2008516c:	8c401a24 	muli	r17,r17,104
20085170:	dc800215 	stw	r18,8(sp)
20085174:	2825883a 	mov	r18,r5
20085178:	89401d04 	addi	r5,r17,116
2008517c:	dc000015 	stw	r16,0(sp)
20085180:	dfc00315 	stw	ra,12(sp)
20085184:	00806fc0 	call	200806fc <_malloc_r>
20085188:	1021883a 	mov	r16,r2
2008518c:	10000726 	beq	r2,zero,200851ac <__sfmoreglue+0x4c>
20085190:	11000304 	addi	r4,r2,12
20085194:	10000015 	stw	zero,0(r2)
20085198:	14800115 	stw	r18,4(r2)
2008519c:	11000215 	stw	r4,8(r2)
200851a0:	000b883a 	mov	r5,zero
200851a4:	89801a04 	addi	r6,r17,104
200851a8:	00863b80 	call	200863b8 <memset>
200851ac:	8005883a 	mov	r2,r16
200851b0:	dfc00317 	ldw	ra,12(sp)
200851b4:	dc800217 	ldw	r18,8(sp)
200851b8:	dc400117 	ldw	r17,4(sp)
200851bc:	dc000017 	ldw	r16,0(sp)
200851c0:	dec00404 	addi	sp,sp,16
200851c4:	f800283a 	ret

200851c8 <__sfp>:
200851c8:	00800034 	movhi	r2,0
200851cc:	defffb04 	addi	sp,sp,-20
200851d0:	10894f04 	addi	r2,r2,9532
200851d4:	dc800215 	stw	r18,8(sp)
200851d8:	14800017 	ldw	r18,0(r2)
200851dc:	dcc00315 	stw	r19,12(sp)
200851e0:	dfc00415 	stw	ra,16(sp)
200851e4:	90800e17 	ldw	r2,56(r18)
200851e8:	dc400115 	stw	r17,4(sp)
200851ec:	dc000015 	stw	r16,0(sp)
200851f0:	2027883a 	mov	r19,r4
200851f4:	1000021e 	bne	r2,zero,20085200 <__sfp+0x38>
200851f8:	9009883a 	mov	r4,r18
200851fc:	0084fc40 	call	20084fc4 <__sinit.part.1>
20085200:	9480b804 	addi	r18,r18,736
20085204:	047fffc4 	movi	r17,-1
20085208:	91400117 	ldw	r5,4(r18)
2008520c:	94000217 	ldw	r16,8(r18)
20085210:	297fffc4 	addi	r5,r5,-1
20085214:	28000a16 	blt	r5,zero,20085240 <__sfp+0x78>
20085218:	8080030f 	ldh	r2,12(r16)
2008521c:	10000c26 	beq	r2,zero,20085250 <__sfp+0x88>
20085220:	80c01d04 	addi	r3,r16,116
20085224:	00000206 	br	20085230 <__sfp+0x68>
20085228:	18bfe60f 	ldh	r2,-104(r3)
2008522c:	10000826 	beq	r2,zero,20085250 <__sfp+0x88>
20085230:	297fffc4 	addi	r5,r5,-1
20085234:	1c3ffd04 	addi	r16,r3,-12
20085238:	18c01a04 	addi	r3,r3,104
2008523c:	2c7ffa1e 	bne	r5,r17,20085228 <__flash_rwdata_start+0xffff342c>
20085240:	90800017 	ldw	r2,0(r18)
20085244:	10001d26 	beq	r2,zero,200852bc <__sfp+0xf4>
20085248:	1025883a 	mov	r18,r2
2008524c:	003fee06 	br	20085208 <__flash_rwdata_start+0xffff340c>
20085250:	00bfffc4 	movi	r2,-1
20085254:	8080038d 	sth	r2,14(r16)
20085258:	00800044 	movi	r2,1
2008525c:	8080030d 	sth	r2,12(r16)
20085260:	80001915 	stw	zero,100(r16)
20085264:	80000015 	stw	zero,0(r16)
20085268:	80000215 	stw	zero,8(r16)
2008526c:	80000115 	stw	zero,4(r16)
20085270:	80000415 	stw	zero,16(r16)
20085274:	80000515 	stw	zero,20(r16)
20085278:	80000615 	stw	zero,24(r16)
2008527c:	81001704 	addi	r4,r16,92
20085280:	000b883a 	mov	r5,zero
20085284:	01800204 	movi	r6,8
20085288:	00863b80 	call	200863b8 <memset>
2008528c:	8005883a 	mov	r2,r16
20085290:	80000c15 	stw	zero,48(r16)
20085294:	80000d15 	stw	zero,52(r16)
20085298:	80001115 	stw	zero,68(r16)
2008529c:	80001215 	stw	zero,72(r16)
200852a0:	dfc00417 	ldw	ra,16(sp)
200852a4:	dcc00317 	ldw	r19,12(sp)
200852a8:	dc800217 	ldw	r18,8(sp)
200852ac:	dc400117 	ldw	r17,4(sp)
200852b0:	dc000017 	ldw	r16,0(sp)
200852b4:	dec00504 	addi	sp,sp,20
200852b8:	f800283a 	ret
200852bc:	9809883a 	mov	r4,r19
200852c0:	01400104 	movi	r5,4
200852c4:	00851600 	call	20085160 <__sfmoreglue>
200852c8:	90800015 	stw	r2,0(r18)
200852cc:	103fde1e 	bne	r2,zero,20085248 <__flash_rwdata_start+0xffff344c>
200852d0:	00800304 	movi	r2,12
200852d4:	98800015 	stw	r2,0(r19)
200852d8:	0005883a 	mov	r2,zero
200852dc:	003ff006 	br	200852a0 <__flash_rwdata_start+0xffff34a4>

200852e0 <_cleanup>:
200852e0:	00800034 	movhi	r2,0
200852e4:	10894f04 	addi	r2,r2,9532
200852e8:	11000017 	ldw	r4,0(r2)
200852ec:	01480274 	movhi	r5,8201
200852f0:	29654c04 	addi	r5,r5,-27344
200852f4:	0085ce01 	jmpi	20085ce0 <_fwalk_reent>

200852f8 <__sinit>:
200852f8:	20800e17 	ldw	r2,56(r4)
200852fc:	10000126 	beq	r2,zero,20085304 <__sinit+0xc>
20085300:	f800283a 	ret
20085304:	0084fc41 	jmpi	20084fc4 <__sinit.part.1>

20085308 <__sfp_lock_acquire>:
20085308:	f800283a 	ret

2008530c <__sfp_lock_release>:
2008530c:	f800283a 	ret

20085310 <__sinit_lock_acquire>:
20085310:	f800283a 	ret

20085314 <__sinit_lock_release>:
20085314:	f800283a 	ret

20085318 <__fp_lock_all>:
20085318:	00800034 	movhi	r2,0
2008531c:	10895004 	addi	r2,r2,9536
20085320:	11000017 	ldw	r4,0(r2)
20085324:	01480234 	movhi	r5,8200
20085328:	2953ea04 	addi	r5,r5,20392
2008532c:	0085c1c1 	jmpi	20085c1c <_fwalk>

20085330 <__fp_unlock_all>:
20085330:	00800034 	movhi	r2,0
20085334:	10895004 	addi	r2,r2,9536
20085338:	11000017 	ldw	r4,0(r2)
2008533c:	01480234 	movhi	r5,8200
20085340:	2953ec04 	addi	r5,r5,20400
20085344:	0085c1c1 	jmpi	20085c1c <_fwalk>

20085348 <_malloc_trim_r>:
20085348:	defffb04 	addi	sp,sp,-20
2008534c:	dcc00315 	stw	r19,12(sp)
20085350:	04c00034 	movhi	r19,0
20085354:	dc800215 	stw	r18,8(sp)
20085358:	dc400115 	stw	r17,4(sp)
2008535c:	dc000015 	stw	r16,0(sp)
20085360:	dfc00415 	stw	ra,16(sp)
20085364:	2821883a 	mov	r16,r5
20085368:	9cc30504 	addi	r19,r19,3092
2008536c:	2025883a 	mov	r18,r4
20085370:	008d4140 	call	2008d414 <__malloc_lock>
20085374:	98800217 	ldw	r2,8(r19)
20085378:	14400117 	ldw	r17,4(r2)
2008537c:	00bfff04 	movi	r2,-4
20085380:	88a2703a 	and	r17,r17,r2
20085384:	8c21c83a 	sub	r16,r17,r16
20085388:	8403fbc4 	addi	r16,r16,4079
2008538c:	8020d33a 	srli	r16,r16,12
20085390:	0083ffc4 	movi	r2,4095
20085394:	843fffc4 	addi	r16,r16,-1
20085398:	8020933a 	slli	r16,r16,12
2008539c:	1400060e 	bge	r2,r16,200853b8 <_malloc_trim_r+0x70>
200853a0:	9009883a 	mov	r4,r18
200853a4:	000b883a 	mov	r5,zero
200853a8:	0080fe80 	call	20080fe8 <_sbrk_r>
200853ac:	98c00217 	ldw	r3,8(r19)
200853b0:	1c47883a 	add	r3,r3,r17
200853b4:	10c00a26 	beq	r2,r3,200853e0 <_malloc_trim_r+0x98>
200853b8:	9009883a 	mov	r4,r18
200853bc:	008d4340 	call	2008d434 <__malloc_unlock>
200853c0:	0005883a 	mov	r2,zero
200853c4:	dfc00417 	ldw	ra,16(sp)
200853c8:	dcc00317 	ldw	r19,12(sp)
200853cc:	dc800217 	ldw	r18,8(sp)
200853d0:	dc400117 	ldw	r17,4(sp)
200853d4:	dc000017 	ldw	r16,0(sp)
200853d8:	dec00504 	addi	sp,sp,20
200853dc:	f800283a 	ret
200853e0:	9009883a 	mov	r4,r18
200853e4:	040bc83a 	sub	r5,zero,r16
200853e8:	0080fe80 	call	20080fe8 <_sbrk_r>
200853ec:	00ffffc4 	movi	r3,-1
200853f0:	10c00d26 	beq	r2,r3,20085428 <_malloc_trim_r+0xe0>
200853f4:	00c00034 	movhi	r3,0
200853f8:	18c97004 	addi	r3,r3,9664
200853fc:	18800017 	ldw	r2,0(r3)
20085400:	99000217 	ldw	r4,8(r19)
20085404:	8c23c83a 	sub	r17,r17,r16
20085408:	8c400054 	ori	r17,r17,1
2008540c:	1421c83a 	sub	r16,r2,r16
20085410:	24400115 	stw	r17,4(r4)
20085414:	9009883a 	mov	r4,r18
20085418:	1c000015 	stw	r16,0(r3)
2008541c:	008d4340 	call	2008d434 <__malloc_unlock>
20085420:	00800044 	movi	r2,1
20085424:	003fe706 	br	200853c4 <__flash_rwdata_start+0xffff35c8>
20085428:	9009883a 	mov	r4,r18
2008542c:	000b883a 	mov	r5,zero
20085430:	0080fe80 	call	20080fe8 <_sbrk_r>
20085434:	99000217 	ldw	r4,8(r19)
20085438:	014003c4 	movi	r5,15
2008543c:	1107c83a 	sub	r3,r2,r4
20085440:	28ffdd0e 	bge	r5,r3,200853b8 <__flash_rwdata_start+0xffff35bc>
20085444:	01400034 	movhi	r5,0
20085448:	29495104 	addi	r5,r5,9540
2008544c:	29400017 	ldw	r5,0(r5)
20085450:	18c00054 	ori	r3,r3,1
20085454:	20c00115 	stw	r3,4(r4)
20085458:	00c00034 	movhi	r3,0
2008545c:	1145c83a 	sub	r2,r2,r5
20085460:	18c97004 	addi	r3,r3,9664
20085464:	18800015 	stw	r2,0(r3)
20085468:	003fd306 	br	200853b8 <__flash_rwdata_start+0xffff35bc>

2008546c <_free_r>:
2008546c:	28004c26 	beq	r5,zero,200855a0 <_free_r+0x134>
20085470:	defffd04 	addi	sp,sp,-12
20085474:	dc400115 	stw	r17,4(sp)
20085478:	dc000015 	stw	r16,0(sp)
2008547c:	2023883a 	mov	r17,r4
20085480:	2821883a 	mov	r16,r5
20085484:	dfc00215 	stw	ra,8(sp)
20085488:	008d4140 	call	2008d414 <__malloc_lock>
2008548c:	813fff17 	ldw	r4,-4(r16)
20085490:	00bfff84 	movi	r2,-2
20085494:	02400034 	movhi	r9,0
20085498:	81bffe04 	addi	r6,r16,-8
2008549c:	2084703a 	and	r2,r4,r2
200854a0:	4a430504 	addi	r9,r9,3092
200854a4:	308b883a 	add	r5,r6,r2
200854a8:	2a000117 	ldw	r8,4(r5)
200854ac:	49c00217 	ldw	r7,8(r9)
200854b0:	00ffff04 	movi	r3,-4
200854b4:	40c6703a 	and	r3,r8,r3
200854b8:	39405326 	beq	r7,r5,20085608 <_free_r+0x19c>
200854bc:	28c00115 	stw	r3,4(r5)
200854c0:	2100004c 	andi	r4,r4,1
200854c4:	2000091e 	bne	r4,zero,200854ec <_free_r+0x80>
200854c8:	81fffe17 	ldw	r7,-8(r16)
200854cc:	4a000204 	addi	r8,r9,8
200854d0:	31cdc83a 	sub	r6,r6,r7
200854d4:	31000217 	ldw	r4,8(r6)
200854d8:	11c5883a 	add	r2,r2,r7
200854dc:	22006126 	beq	r4,r8,20085664 <_free_r+0x1f8>
200854e0:	31c00317 	ldw	r7,12(r6)
200854e4:	21c00315 	stw	r7,12(r4)
200854e8:	39000215 	stw	r4,8(r7)
200854ec:	28c9883a 	add	r4,r5,r3
200854f0:	21c00117 	ldw	r7,4(r4)
200854f4:	39c0004c 	andi	r7,r7,1
200854f8:	38000d1e 	bne	r7,zero,20085530 <_free_r+0xc4>
200854fc:	29000217 	ldw	r4,8(r5)
20085500:	10c5883a 	add	r2,r2,r3
20085504:	00c00034 	movhi	r3,0
20085508:	18c30704 	addi	r3,r3,3100
2008550c:	20c07526 	beq	r4,r3,200856e4 <_free_r+0x278>
20085510:	29c00317 	ldw	r7,12(r5)
20085514:	11400054 	ori	r5,r2,1
20085518:	3087883a 	add	r3,r6,r2
2008551c:	21c00315 	stw	r7,12(r4)
20085520:	39000215 	stw	r4,8(r7)
20085524:	31400115 	stw	r5,4(r6)
20085528:	18800015 	stw	r2,0(r3)
2008552c:	00000406 	br	20085540 <_free_r+0xd4>
20085530:	10c00054 	ori	r3,r2,1
20085534:	30c00115 	stw	r3,4(r6)
20085538:	3087883a 	add	r3,r6,r2
2008553c:	18800015 	stw	r2,0(r3)
20085540:	00c07fc4 	movi	r3,511
20085544:	18801736 	bltu	r3,r2,200855a4 <_free_r+0x138>
20085548:	1004d0fa 	srli	r2,r2,3
2008554c:	01400044 	movi	r5,1
20085550:	49000117 	ldw	r4,4(r9)
20085554:	1087883a 	add	r3,r2,r2
20085558:	18c7883a 	add	r3,r3,r3
2008555c:	1005d0ba 	srai	r2,r2,2
20085560:	18c7883a 	add	r3,r3,r3
20085564:	1a47883a 	add	r3,r3,r9
20085568:	19c00217 	ldw	r7,8(r3)
2008556c:	2884983a 	sll	r2,r5,r2
20085570:	30c00315 	stw	r3,12(r6)
20085574:	31c00215 	stw	r7,8(r6)
20085578:	1104b03a 	or	r2,r2,r4
2008557c:	19800215 	stw	r6,8(r3)
20085580:	48800115 	stw	r2,4(r9)
20085584:	39800315 	stw	r6,12(r7)
20085588:	8809883a 	mov	r4,r17
2008558c:	dfc00217 	ldw	ra,8(sp)
20085590:	dc400117 	ldw	r17,4(sp)
20085594:	dc000017 	ldw	r16,0(sp)
20085598:	dec00304 	addi	sp,sp,12
2008559c:	008d4341 	jmpi	2008d434 <__malloc_unlock>
200855a0:	f800283a 	ret
200855a4:	1006d27a 	srli	r3,r2,9
200855a8:	01000104 	movi	r4,4
200855ac:	20c04036 	bltu	r4,r3,200856b0 <_free_r+0x244>
200855b0:	1006d1ba 	srli	r3,r2,6
200855b4:	19400e04 	addi	r5,r3,56
200855b8:	2947883a 	add	r3,r5,r5
200855bc:	18c7883a 	add	r3,r3,r3
200855c0:	18c7883a 	add	r3,r3,r3
200855c4:	1a49883a 	add	r4,r3,r9
200855c8:	20c00217 	ldw	r3,8(r4)
200855cc:	01c00034 	movhi	r7,0
200855d0:	39c30504 	addi	r7,r7,3092
200855d4:	19003b26 	beq	r3,r4,200856c4 <_free_r+0x258>
200855d8:	01ffff04 	movi	r7,-4
200855dc:	19400117 	ldw	r5,4(r3)
200855e0:	29ca703a 	and	r5,r5,r7
200855e4:	1140022e 	bgeu	r2,r5,200855f0 <_free_r+0x184>
200855e8:	18c00217 	ldw	r3,8(r3)
200855ec:	20fffb1e 	bne	r4,r3,200855dc <__flash_rwdata_start+0xffff37e0>
200855f0:	18800317 	ldw	r2,12(r3)
200855f4:	30800315 	stw	r2,12(r6)
200855f8:	30c00215 	stw	r3,8(r6)
200855fc:	11800215 	stw	r6,8(r2)
20085600:	19800315 	stw	r6,12(r3)
20085604:	003fe006 	br	20085588 <__flash_rwdata_start+0xffff378c>
20085608:	2100004c 	andi	r4,r4,1
2008560c:	1885883a 	add	r2,r3,r2
20085610:	2000071e 	bne	r4,zero,20085630 <_free_r+0x1c4>
20085614:	817ffe17 	ldw	r5,-8(r16)
20085618:	314dc83a 	sub	r6,r6,r5
2008561c:	30c00317 	ldw	r3,12(r6)
20085620:	31000217 	ldw	r4,8(r6)
20085624:	1145883a 	add	r2,r2,r5
20085628:	20c00315 	stw	r3,12(r4)
2008562c:	19000215 	stw	r4,8(r3)
20085630:	10c00054 	ori	r3,r2,1
20085634:	30c00115 	stw	r3,4(r6)
20085638:	00c00034 	movhi	r3,0
2008563c:	18c95204 	addi	r3,r3,9544
20085640:	18c00017 	ldw	r3,0(r3)
20085644:	49800215 	stw	r6,8(r9)
20085648:	10ffcf36 	bltu	r2,r3,20085588 <__flash_rwdata_start+0xffff378c>
2008564c:	00800034 	movhi	r2,0
20085650:	10896404 	addi	r2,r2,9616
20085654:	11400017 	ldw	r5,0(r2)
20085658:	8809883a 	mov	r4,r17
2008565c:	00853480 	call	20085348 <_malloc_trim_r>
20085660:	003fc906 	br	20085588 <__flash_rwdata_start+0xffff378c>
20085664:	28c9883a 	add	r4,r5,r3
20085668:	21000117 	ldw	r4,4(r4)
2008566c:	2100004c 	andi	r4,r4,1
20085670:	20000a1e 	bne	r4,zero,2008569c <_free_r+0x230>
20085674:	29000317 	ldw	r4,12(r5)
20085678:	29400217 	ldw	r5,8(r5)
2008567c:	10c5883a 	add	r2,r2,r3
20085680:	10c00054 	ori	r3,r2,1
20085684:	29000315 	stw	r4,12(r5)
20085688:	21400215 	stw	r5,8(r4)
2008568c:	30c00115 	stw	r3,4(r6)
20085690:	308d883a 	add	r6,r6,r2
20085694:	30800015 	stw	r2,0(r6)
20085698:	003fbb06 	br	20085588 <__flash_rwdata_start+0xffff378c>
2008569c:	10c00054 	ori	r3,r2,1
200856a0:	30c00115 	stw	r3,4(r6)
200856a4:	308d883a 	add	r6,r6,r2
200856a8:	30800015 	stw	r2,0(r6)
200856ac:	003fb606 	br	20085588 <__flash_rwdata_start+0xffff378c>
200856b0:	01000504 	movi	r4,20
200856b4:	20c01436 	bltu	r4,r3,20085708 <_free_r+0x29c>
200856b8:	194016c4 	addi	r5,r3,91
200856bc:	2947883a 	add	r3,r5,r5
200856c0:	003fbe06 	br	200855bc <__flash_rwdata_start+0xffff37c0>
200856c4:	280bd0ba 	srai	r5,r5,2
200856c8:	00800044 	movi	r2,1
200856cc:	39000117 	ldw	r4,4(r7)
200856d0:	114a983a 	sll	r5,r2,r5
200856d4:	1805883a 	mov	r2,r3
200856d8:	2908b03a 	or	r4,r5,r4
200856dc:	39000115 	stw	r4,4(r7)
200856e0:	003fc406 	br	200855f4 <__flash_rwdata_start+0xffff37f8>
200856e4:	49800515 	stw	r6,20(r9)
200856e8:	49800415 	stw	r6,16(r9)
200856ec:	10c00054 	ori	r3,r2,1
200856f0:	31000315 	stw	r4,12(r6)
200856f4:	31000215 	stw	r4,8(r6)
200856f8:	30c00115 	stw	r3,4(r6)
200856fc:	308d883a 	add	r6,r6,r2
20085700:	30800015 	stw	r2,0(r6)
20085704:	003fa006 	br	20085588 <__flash_rwdata_start+0xffff378c>
20085708:	01001504 	movi	r4,84
2008570c:	20c00436 	bltu	r4,r3,20085720 <_free_r+0x2b4>
20085710:	1006d33a 	srli	r3,r2,12
20085714:	19401b84 	addi	r5,r3,110
20085718:	2947883a 	add	r3,r5,r5
2008571c:	003fa706 	br	200855bc <__flash_rwdata_start+0xffff37c0>
20085720:	01005504 	movi	r4,340
20085724:	20c00436 	bltu	r4,r3,20085738 <_free_r+0x2cc>
20085728:	1006d3fa 	srli	r3,r2,15
2008572c:	19401dc4 	addi	r5,r3,119
20085730:	2947883a 	add	r3,r5,r5
20085734:	003fa106 	br	200855bc <__flash_rwdata_start+0xffff37c0>
20085738:	01015504 	movi	r4,1364
2008573c:	20c00436 	bltu	r4,r3,20085750 <_free_r+0x2e4>
20085740:	1006d4ba 	srli	r3,r2,18
20085744:	19401f04 	addi	r5,r3,124
20085748:	2947883a 	add	r3,r5,r5
2008574c:	003f9b06 	br	200855bc <__flash_rwdata_start+0xffff37c0>
20085750:	00c03f04 	movi	r3,252
20085754:	01401f84 	movi	r5,126
20085758:	003f9806 	br	200855bc <__flash_rwdata_start+0xffff37c0>

2008575c <__sfvwrite_r>:
2008575c:	30800217 	ldw	r2,8(r6)
20085760:	10006726 	beq	r2,zero,20085900 <__sfvwrite_r+0x1a4>
20085764:	defff404 	addi	sp,sp,-48
20085768:	dd000615 	stw	r20,24(sp)
2008576c:	2029883a 	mov	r20,r4
20085770:	2900030b 	ldhu	r4,12(r5)
20085774:	ddc00915 	stw	r23,36(sp)
20085778:	dc000215 	stw	r16,8(sp)
2008577c:	dfc00b15 	stw	ra,44(sp)
20085780:	df000a15 	stw	fp,40(sp)
20085784:	dd800815 	stw	r22,32(sp)
20085788:	dd400715 	stw	r21,28(sp)
2008578c:	dcc00515 	stw	r19,20(sp)
20085790:	dc800415 	stw	r18,16(sp)
20085794:	dc400315 	stw	r17,12(sp)
20085798:	2080020c 	andi	r2,r4,8
2008579c:	2821883a 	mov	r16,r5
200857a0:	302f883a 	mov	r23,r6
200857a4:	10002726 	beq	r2,zero,20085844 <__sfvwrite_r+0xe8>
200857a8:	28800417 	ldw	r2,16(r5)
200857ac:	10002526 	beq	r2,zero,20085844 <__sfvwrite_r+0xe8>
200857b0:	2080008c 	andi	r2,r4,2
200857b4:	bc400017 	ldw	r17,0(r23)
200857b8:	10002a26 	beq	r2,zero,20085864 <__sfvwrite_r+0x108>
200857bc:	05600034 	movhi	r21,32768
200857c0:	0027883a 	mov	r19,zero
200857c4:	0025883a 	mov	r18,zero
200857c8:	ad7f0004 	addi	r21,r21,-1024
200857cc:	980d883a 	mov	r6,r19
200857d0:	a009883a 	mov	r4,r20
200857d4:	90004626 	beq	r18,zero,200858f0 <__sfvwrite_r+0x194>
200857d8:	900f883a 	mov	r7,r18
200857dc:	81400717 	ldw	r5,28(r16)
200857e0:	ac80022e 	bgeu	r21,r18,200857ec <__sfvwrite_r+0x90>
200857e4:	01e00034 	movhi	r7,32768
200857e8:	39ff0004 	addi	r7,r7,-1024
200857ec:	80800917 	ldw	r2,36(r16)
200857f0:	103ee83a 	callr	r2
200857f4:	0080520e 	bge	zero,r2,20085940 <__sfvwrite_r+0x1e4>
200857f8:	b8c00217 	ldw	r3,8(r23)
200857fc:	98a7883a 	add	r19,r19,r2
20085800:	90a5c83a 	sub	r18,r18,r2
20085804:	1885c83a 	sub	r2,r3,r2
20085808:	b8800215 	stw	r2,8(r23)
2008580c:	103fef1e 	bne	r2,zero,200857cc <__flash_rwdata_start+0xffff39d0>
20085810:	0005883a 	mov	r2,zero
20085814:	dfc00b17 	ldw	ra,44(sp)
20085818:	df000a17 	ldw	fp,40(sp)
2008581c:	ddc00917 	ldw	r23,36(sp)
20085820:	dd800817 	ldw	r22,32(sp)
20085824:	dd400717 	ldw	r21,28(sp)
20085828:	dd000617 	ldw	r20,24(sp)
2008582c:	dcc00517 	ldw	r19,20(sp)
20085830:	dc800417 	ldw	r18,16(sp)
20085834:	dc400317 	ldw	r17,12(sp)
20085838:	dc000217 	ldw	r16,8(sp)
2008583c:	dec00c04 	addi	sp,sp,48
20085840:	f800283a 	ret
20085844:	a009883a 	mov	r4,r20
20085848:	800b883a 	mov	r5,r16
2008584c:	00831040 	call	20083104 <__swsetup_r>
20085850:	1000ec1e 	bne	r2,zero,20085c04 <__sfvwrite_r+0x4a8>
20085854:	8100030b 	ldhu	r4,12(r16)
20085858:	bc400017 	ldw	r17,0(r23)
2008585c:	2080008c 	andi	r2,r4,2
20085860:	103fd61e 	bne	r2,zero,200857bc <__flash_rwdata_start+0xffff39c0>
20085864:	2080004c 	andi	r2,r4,1
20085868:	10003a1e 	bne	r2,zero,20085954 <__sfvwrite_r+0x1f8>
2008586c:	0039883a 	mov	fp,zero
20085870:	0025883a 	mov	r18,zero
20085874:	90001a26 	beq	r18,zero,200858e0 <__sfvwrite_r+0x184>
20085878:	2080800c 	andi	r2,r4,512
2008587c:	85800217 	ldw	r22,8(r16)
20085880:	10007626 	beq	r2,zero,20085a5c <__sfvwrite_r+0x300>
20085884:	b027883a 	mov	r19,r22
20085888:	95809436 	bltu	r18,r22,20085adc <__sfvwrite_r+0x380>
2008588c:	2081200c 	andi	r2,r4,1152
20085890:	10009f1e 	bne	r2,zero,20085b10 <__sfvwrite_r+0x3b4>
20085894:	81000017 	ldw	r4,0(r16)
20085898:	e00b883a 	mov	r5,fp
2008589c:	980d883a 	mov	r6,r19
200858a0:	008625c0 	call	2008625c <memmove>
200858a4:	81000217 	ldw	r4,8(r16)
200858a8:	81400017 	ldw	r5,0(r16)
200858ac:	9005883a 	mov	r2,r18
200858b0:	2587c83a 	sub	r3,r4,r22
200858b4:	2ce7883a 	add	r19,r5,r19
200858b8:	80c00215 	stw	r3,8(r16)
200858bc:	84c00015 	stw	r19,0(r16)
200858c0:	b8c00217 	ldw	r3,8(r23)
200858c4:	e0b9883a 	add	fp,fp,r2
200858c8:	90a5c83a 	sub	r18,r18,r2
200858cc:	1885c83a 	sub	r2,r3,r2
200858d0:	b8800215 	stw	r2,8(r23)
200858d4:	103fce26 	beq	r2,zero,20085810 <__flash_rwdata_start+0xffff3a14>
200858d8:	8100030b 	ldhu	r4,12(r16)
200858dc:	903fe61e 	bne	r18,zero,20085878 <__flash_rwdata_start+0xffff3a7c>
200858e0:	8f000017 	ldw	fp,0(r17)
200858e4:	8c800117 	ldw	r18,4(r17)
200858e8:	8c400204 	addi	r17,r17,8
200858ec:	003fe106 	br	20085874 <__flash_rwdata_start+0xffff3a78>
200858f0:	8cc00017 	ldw	r19,0(r17)
200858f4:	8c800117 	ldw	r18,4(r17)
200858f8:	8c400204 	addi	r17,r17,8
200858fc:	003fb306 	br	200857cc <__flash_rwdata_start+0xffff39d0>
20085900:	0005883a 	mov	r2,zero
20085904:	f800283a 	ret
20085908:	00a00034 	movhi	r2,32768
2008590c:	10bfffc4 	addi	r2,r2,-1
20085910:	9009883a 	mov	r4,r18
20085914:	1480012e 	bgeu	r2,r18,2008591c <__sfvwrite_r+0x1c0>
20085918:	1009883a 	mov	r4,r2
2008591c:	980b883a 	mov	r5,r19
20085920:	008a71c0 	call	2008a71c <__divsi3>
20085924:	81400717 	ldw	r5,28(r16)
20085928:	80c00917 	ldw	r3,36(r16)
2008592c:	988f383a 	mul	r7,r19,r2
20085930:	a009883a 	mov	r4,r20
20085934:	e00d883a 	mov	r6,fp
20085938:	183ee83a 	callr	r3
2008593c:	00bfe016 	blt	zero,r2,200858c0 <__flash_rwdata_start+0xffff3ac4>
20085940:	8080030b 	ldhu	r2,12(r16)
20085944:	10801014 	ori	r2,r2,64
20085948:	8080030d 	sth	r2,12(r16)
2008594c:	00bfffc4 	movi	r2,-1
20085950:	003fb006 	br	20085814 <__flash_rwdata_start+0xffff3a18>
20085954:	0027883a 	mov	r19,zero
20085958:	0011883a 	mov	r8,zero
2008595c:	0039883a 	mov	fp,zero
20085960:	0025883a 	mov	r18,zero
20085964:	90001f26 	beq	r18,zero,200859e4 <__sfvwrite_r+0x288>
20085968:	40006026 	beq	r8,zero,20085aec <__sfvwrite_r+0x390>
2008596c:	982b883a 	mov	r21,r19
20085970:	94c0012e 	bgeu	r18,r19,20085978 <__sfvwrite_r+0x21c>
20085974:	902b883a 	mov	r21,r18
20085978:	81000017 	ldw	r4,0(r16)
2008597c:	80800417 	ldw	r2,16(r16)
20085980:	a82d883a 	mov	r22,r21
20085984:	81800217 	ldw	r6,8(r16)
20085988:	81c00517 	ldw	r7,20(r16)
2008598c:	1100022e 	bgeu	r2,r4,20085998 <__sfvwrite_r+0x23c>
20085990:	31c7883a 	add	r3,r6,r7
20085994:	1d401816 	blt	r3,r21,200859f8 <__sfvwrite_r+0x29c>
20085998:	a9c04416 	blt	r21,r7,20085aac <__sfvwrite_r+0x350>
2008599c:	80800917 	ldw	r2,36(r16)
200859a0:	81400717 	ldw	r5,28(r16)
200859a4:	a009883a 	mov	r4,r20
200859a8:	da000115 	stw	r8,4(sp)
200859ac:	e00d883a 	mov	r6,fp
200859b0:	103ee83a 	callr	r2
200859b4:	102d883a 	mov	r22,r2
200859b8:	da000117 	ldw	r8,4(sp)
200859bc:	00bfe00e 	bge	zero,r2,20085940 <__flash_rwdata_start+0xffff3b44>
200859c0:	9da7c83a 	sub	r19,r19,r22
200859c4:	98001f26 	beq	r19,zero,20085a44 <__sfvwrite_r+0x2e8>
200859c8:	b8800217 	ldw	r2,8(r23)
200859cc:	e5b9883a 	add	fp,fp,r22
200859d0:	95a5c83a 	sub	r18,r18,r22
200859d4:	15adc83a 	sub	r22,r2,r22
200859d8:	bd800215 	stw	r22,8(r23)
200859dc:	b03f8c26 	beq	r22,zero,20085810 <__flash_rwdata_start+0xffff3a14>
200859e0:	903fe11e 	bne	r18,zero,20085968 <__flash_rwdata_start+0xffff3b6c>
200859e4:	8f000017 	ldw	fp,0(r17)
200859e8:	8c800117 	ldw	r18,4(r17)
200859ec:	0011883a 	mov	r8,zero
200859f0:	8c400204 	addi	r17,r17,8
200859f4:	003fdb06 	br	20085964 <__flash_rwdata_start+0xffff3b68>
200859f8:	180d883a 	mov	r6,r3
200859fc:	e00b883a 	mov	r5,fp
20085a00:	da000115 	stw	r8,4(sp)
20085a04:	d8c00015 	stw	r3,0(sp)
20085a08:	008625c0 	call	2008625c <memmove>
20085a0c:	d8c00017 	ldw	r3,0(sp)
20085a10:	80800017 	ldw	r2,0(r16)
20085a14:	a009883a 	mov	r4,r20
20085a18:	800b883a 	mov	r5,r16
20085a1c:	10c5883a 	add	r2,r2,r3
20085a20:	80800015 	stw	r2,0(r16)
20085a24:	d8c00015 	stw	r3,0(sp)
20085a28:	0084f1c0 	call	20084f1c <_fflush_r>
20085a2c:	d8c00017 	ldw	r3,0(sp)
20085a30:	da000117 	ldw	r8,4(sp)
20085a34:	103fc21e 	bne	r2,zero,20085940 <__flash_rwdata_start+0xffff3b44>
20085a38:	182d883a 	mov	r22,r3
20085a3c:	9da7c83a 	sub	r19,r19,r22
20085a40:	983fe11e 	bne	r19,zero,200859c8 <__flash_rwdata_start+0xffff3bcc>
20085a44:	a009883a 	mov	r4,r20
20085a48:	800b883a 	mov	r5,r16
20085a4c:	0084f1c0 	call	20084f1c <_fflush_r>
20085a50:	103fbb1e 	bne	r2,zero,20085940 <__flash_rwdata_start+0xffff3b44>
20085a54:	0011883a 	mov	r8,zero
20085a58:	003fdb06 	br	200859c8 <__flash_rwdata_start+0xffff3bcc>
20085a5c:	81000017 	ldw	r4,0(r16)
20085a60:	80800417 	ldw	r2,16(r16)
20085a64:	11000236 	bltu	r2,r4,20085a70 <__sfvwrite_r+0x314>
20085a68:	84c00517 	ldw	r19,20(r16)
20085a6c:	94ffa62e 	bgeu	r18,r19,20085908 <__flash_rwdata_start+0xffff3b0c>
20085a70:	9027883a 	mov	r19,r18
20085a74:	b480012e 	bgeu	r22,r18,20085a7c <__sfvwrite_r+0x320>
20085a78:	b027883a 	mov	r19,r22
20085a7c:	e00b883a 	mov	r5,fp
20085a80:	980d883a 	mov	r6,r19
20085a84:	008625c0 	call	2008625c <memmove>
20085a88:	80800217 	ldw	r2,8(r16)
20085a8c:	80c00017 	ldw	r3,0(r16)
20085a90:	14c5c83a 	sub	r2,r2,r19
20085a94:	1cc7883a 	add	r3,r3,r19
20085a98:	80800215 	stw	r2,8(r16)
20085a9c:	80c00015 	stw	r3,0(r16)
20085aa0:	10004326 	beq	r2,zero,20085bb0 <__sfvwrite_r+0x454>
20085aa4:	9805883a 	mov	r2,r19
20085aa8:	003f8506 	br	200858c0 <__flash_rwdata_start+0xffff3ac4>
20085aac:	a80d883a 	mov	r6,r21
20085ab0:	e00b883a 	mov	r5,fp
20085ab4:	da000115 	stw	r8,4(sp)
20085ab8:	008625c0 	call	2008625c <memmove>
20085abc:	80800217 	ldw	r2,8(r16)
20085ac0:	80c00017 	ldw	r3,0(r16)
20085ac4:	da000117 	ldw	r8,4(sp)
20085ac8:	1545c83a 	sub	r2,r2,r21
20085acc:	1d6b883a 	add	r21,r3,r21
20085ad0:	80800215 	stw	r2,8(r16)
20085ad4:	85400015 	stw	r21,0(r16)
20085ad8:	003fb906 	br	200859c0 <__flash_rwdata_start+0xffff3bc4>
20085adc:	81000017 	ldw	r4,0(r16)
20085ae0:	902d883a 	mov	r22,r18
20085ae4:	9027883a 	mov	r19,r18
20085ae8:	003f6b06 	br	20085898 <__flash_rwdata_start+0xffff3a9c>
20085aec:	e009883a 	mov	r4,fp
20085af0:	01400284 	movi	r5,10
20085af4:	900d883a 	mov	r6,r18
20085af8:	008603c0 	call	2008603c <memchr>
20085afc:	10003e26 	beq	r2,zero,20085bf8 <__sfvwrite_r+0x49c>
20085b00:	10800044 	addi	r2,r2,1
20085b04:	1727c83a 	sub	r19,r2,fp
20085b08:	02000044 	movi	r8,1
20085b0c:	003f9706 	br	2008596c <__flash_rwdata_start+0xffff3b70>
20085b10:	80800517 	ldw	r2,20(r16)
20085b14:	81400417 	ldw	r5,16(r16)
20085b18:	80c00017 	ldw	r3,0(r16)
20085b1c:	10a7883a 	add	r19,r2,r2
20085b20:	9885883a 	add	r2,r19,r2
20085b24:	1026d7fa 	srli	r19,r2,31
20085b28:	196bc83a 	sub	r21,r3,r5
20085b2c:	a9800044 	addi	r6,r21,1
20085b30:	9885883a 	add	r2,r19,r2
20085b34:	1027d07a 	srai	r19,r2,1
20085b38:	3485883a 	add	r2,r6,r18
20085b3c:	980d883a 	mov	r6,r19
20085b40:	9880022e 	bgeu	r19,r2,20085b4c <__sfvwrite_r+0x3f0>
20085b44:	1027883a 	mov	r19,r2
20085b48:	100d883a 	mov	r6,r2
20085b4c:	2101000c 	andi	r4,r4,1024
20085b50:	20001c26 	beq	r4,zero,20085bc4 <__sfvwrite_r+0x468>
20085b54:	a009883a 	mov	r4,r20
20085b58:	300b883a 	mov	r5,r6
20085b5c:	00806fc0 	call	200806fc <_malloc_r>
20085b60:	102d883a 	mov	r22,r2
20085b64:	10002926 	beq	r2,zero,20085c0c <__sfvwrite_r+0x4b0>
20085b68:	81400417 	ldw	r5,16(r16)
20085b6c:	1009883a 	mov	r4,r2
20085b70:	a80d883a 	mov	r6,r21
20085b74:	00861240 	call	20086124 <memcpy>
20085b78:	8080030b 	ldhu	r2,12(r16)
20085b7c:	00fedfc4 	movi	r3,-1153
20085b80:	10c4703a 	and	r2,r2,r3
20085b84:	10802014 	ori	r2,r2,128
20085b88:	8080030d 	sth	r2,12(r16)
20085b8c:	b549883a 	add	r4,r22,r21
20085b90:	9d4bc83a 	sub	r5,r19,r21
20085b94:	85800415 	stw	r22,16(r16)
20085b98:	84c00515 	stw	r19,20(r16)
20085b9c:	81000015 	stw	r4,0(r16)
20085ba0:	902d883a 	mov	r22,r18
20085ba4:	81400215 	stw	r5,8(r16)
20085ba8:	9027883a 	mov	r19,r18
20085bac:	003f3a06 	br	20085898 <__flash_rwdata_start+0xffff3a9c>
20085bb0:	a009883a 	mov	r4,r20
20085bb4:	800b883a 	mov	r5,r16
20085bb8:	0084f1c0 	call	20084f1c <_fflush_r>
20085bbc:	103fb926 	beq	r2,zero,20085aa4 <__flash_rwdata_start+0xffff3ca8>
20085bc0:	003f5f06 	br	20085940 <__flash_rwdata_start+0xffff3b44>
20085bc4:	a009883a 	mov	r4,r20
20085bc8:	00875e80 	call	200875e8 <_realloc_r>
20085bcc:	102d883a 	mov	r22,r2
20085bd0:	103fee1e 	bne	r2,zero,20085b8c <__flash_rwdata_start+0xffff3d90>
20085bd4:	81400417 	ldw	r5,16(r16)
20085bd8:	a009883a 	mov	r4,r20
20085bdc:	008546c0 	call	2008546c <_free_r>
20085be0:	8080030b 	ldhu	r2,12(r16)
20085be4:	00ffdfc4 	movi	r3,-129
20085be8:	1884703a 	and	r2,r3,r2
20085bec:	00c00304 	movi	r3,12
20085bf0:	a0c00015 	stw	r3,0(r20)
20085bf4:	003f5306 	br	20085944 <__flash_rwdata_start+0xffff3b48>
20085bf8:	94c00044 	addi	r19,r18,1
20085bfc:	02000044 	movi	r8,1
20085c00:	003f5a06 	br	2008596c <__flash_rwdata_start+0xffff3b70>
20085c04:	00bfffc4 	movi	r2,-1
20085c08:	003f0206 	br	20085814 <__flash_rwdata_start+0xffff3a18>
20085c0c:	00800304 	movi	r2,12
20085c10:	a0800015 	stw	r2,0(r20)
20085c14:	8080030b 	ldhu	r2,12(r16)
20085c18:	003f4a06 	br	20085944 <__flash_rwdata_start+0xffff3b48>

20085c1c <_fwalk>:
20085c1c:	defff704 	addi	sp,sp,-36
20085c20:	dd000415 	stw	r20,16(sp)
20085c24:	dfc00815 	stw	ra,32(sp)
20085c28:	ddc00715 	stw	r23,28(sp)
20085c2c:	dd800615 	stw	r22,24(sp)
20085c30:	dd400515 	stw	r21,20(sp)
20085c34:	dcc00315 	stw	r19,12(sp)
20085c38:	dc800215 	stw	r18,8(sp)
20085c3c:	dc400115 	stw	r17,4(sp)
20085c40:	dc000015 	stw	r16,0(sp)
20085c44:	2500b804 	addi	r20,r4,736
20085c48:	a0002326 	beq	r20,zero,20085cd8 <_fwalk+0xbc>
20085c4c:	282b883a 	mov	r21,r5
20085c50:	002f883a 	mov	r23,zero
20085c54:	05800044 	movi	r22,1
20085c58:	04ffffc4 	movi	r19,-1
20085c5c:	a4400117 	ldw	r17,4(r20)
20085c60:	a4800217 	ldw	r18,8(r20)
20085c64:	8c7fffc4 	addi	r17,r17,-1
20085c68:	88000d16 	blt	r17,zero,20085ca0 <_fwalk+0x84>
20085c6c:	94000304 	addi	r16,r18,12
20085c70:	94800384 	addi	r18,r18,14
20085c74:	80c0000b 	ldhu	r3,0(r16)
20085c78:	8c7fffc4 	addi	r17,r17,-1
20085c7c:	813ffd04 	addi	r4,r16,-12
20085c80:	b0c0042e 	bgeu	r22,r3,20085c94 <_fwalk+0x78>
20085c84:	90c0000f 	ldh	r3,0(r18)
20085c88:	1cc00226 	beq	r3,r19,20085c94 <_fwalk+0x78>
20085c8c:	a83ee83a 	callr	r21
20085c90:	b8aeb03a 	or	r23,r23,r2
20085c94:	84001a04 	addi	r16,r16,104
20085c98:	94801a04 	addi	r18,r18,104
20085c9c:	8cfff51e 	bne	r17,r19,20085c74 <__flash_rwdata_start+0xffff3e78>
20085ca0:	a5000017 	ldw	r20,0(r20)
20085ca4:	a03fed1e 	bne	r20,zero,20085c5c <__flash_rwdata_start+0xffff3e60>
20085ca8:	b805883a 	mov	r2,r23
20085cac:	dfc00817 	ldw	ra,32(sp)
20085cb0:	ddc00717 	ldw	r23,28(sp)
20085cb4:	dd800617 	ldw	r22,24(sp)
20085cb8:	dd400517 	ldw	r21,20(sp)
20085cbc:	dd000417 	ldw	r20,16(sp)
20085cc0:	dcc00317 	ldw	r19,12(sp)
20085cc4:	dc800217 	ldw	r18,8(sp)
20085cc8:	dc400117 	ldw	r17,4(sp)
20085ccc:	dc000017 	ldw	r16,0(sp)
20085cd0:	dec00904 	addi	sp,sp,36
20085cd4:	f800283a 	ret
20085cd8:	002f883a 	mov	r23,zero
20085cdc:	003ff206 	br	20085ca8 <__flash_rwdata_start+0xffff3eac>

20085ce0 <_fwalk_reent>:
20085ce0:	defff704 	addi	sp,sp,-36
20085ce4:	dd400515 	stw	r21,20(sp)
20085ce8:	dfc00815 	stw	ra,32(sp)
20085cec:	ddc00715 	stw	r23,28(sp)
20085cf0:	dd800615 	stw	r22,24(sp)
20085cf4:	dd000415 	stw	r20,16(sp)
20085cf8:	dcc00315 	stw	r19,12(sp)
20085cfc:	dc800215 	stw	r18,8(sp)
20085d00:	dc400115 	stw	r17,4(sp)
20085d04:	dc000015 	stw	r16,0(sp)
20085d08:	2540b804 	addi	r21,r4,736
20085d0c:	a8002326 	beq	r21,zero,20085d9c <_fwalk_reent+0xbc>
20085d10:	2829883a 	mov	r20,r5
20085d14:	202d883a 	mov	r22,r4
20085d18:	002f883a 	mov	r23,zero
20085d1c:	04c00044 	movi	r19,1
20085d20:	04bfffc4 	movi	r18,-1
20085d24:	ac400117 	ldw	r17,4(r21)
20085d28:	ac000217 	ldw	r16,8(r21)
20085d2c:	8c7fffc4 	addi	r17,r17,-1
20085d30:	88000c16 	blt	r17,zero,20085d64 <_fwalk_reent+0x84>
20085d34:	84000304 	addi	r16,r16,12
20085d38:	80c0000b 	ldhu	r3,0(r16)
20085d3c:	8c7fffc4 	addi	r17,r17,-1
20085d40:	817ffd04 	addi	r5,r16,-12
20085d44:	98c0052e 	bgeu	r19,r3,20085d5c <_fwalk_reent+0x7c>
20085d48:	80c0008f 	ldh	r3,2(r16)
20085d4c:	b009883a 	mov	r4,r22
20085d50:	1c800226 	beq	r3,r18,20085d5c <_fwalk_reent+0x7c>
20085d54:	a03ee83a 	callr	r20
20085d58:	b8aeb03a 	or	r23,r23,r2
20085d5c:	84001a04 	addi	r16,r16,104
20085d60:	8cbff51e 	bne	r17,r18,20085d38 <__flash_rwdata_start+0xffff3f3c>
20085d64:	ad400017 	ldw	r21,0(r21)
20085d68:	a83fee1e 	bne	r21,zero,20085d24 <__flash_rwdata_start+0xffff3f28>
20085d6c:	b805883a 	mov	r2,r23
20085d70:	dfc00817 	ldw	ra,32(sp)
20085d74:	ddc00717 	ldw	r23,28(sp)
20085d78:	dd800617 	ldw	r22,24(sp)
20085d7c:	dd400517 	ldw	r21,20(sp)
20085d80:	dd000417 	ldw	r20,16(sp)
20085d84:	dcc00317 	ldw	r19,12(sp)
20085d88:	dc800217 	ldw	r18,8(sp)
20085d8c:	dc400117 	ldw	r17,4(sp)
20085d90:	dc000017 	ldw	r16,0(sp)
20085d94:	dec00904 	addi	sp,sp,36
20085d98:	f800283a 	ret
20085d9c:	002f883a 	mov	r23,zero
20085da0:	003ff206 	br	20085d6c <__flash_rwdata_start+0xffff3f70>

20085da4 <_setlocale_r>:
20085da4:	30001b26 	beq	r6,zero,20085e14 <_setlocale_r+0x70>
20085da8:	01400034 	movhi	r5,0
20085dac:	defffe04 	addi	sp,sp,-8
20085db0:	29403804 	addi	r5,r5,224
20085db4:	3009883a 	mov	r4,r6
20085db8:	dc000015 	stw	r16,0(sp)
20085dbc:	dfc00115 	stw	ra,4(sp)
20085dc0:	3021883a 	mov	r16,r6
20085dc4:	0087d000 	call	20087d00 <strcmp>
20085dc8:	1000061e 	bne	r2,zero,20085de4 <_setlocale_r+0x40>
20085dcc:	00800034 	movhi	r2,0
20085dd0:	10801904 	addi	r2,r2,100
20085dd4:	dfc00117 	ldw	ra,4(sp)
20085dd8:	dc000017 	ldw	r16,0(sp)
20085ddc:	dec00204 	addi	sp,sp,8
20085de0:	f800283a 	ret
20085de4:	01400034 	movhi	r5,0
20085de8:	29401904 	addi	r5,r5,100
20085dec:	8009883a 	mov	r4,r16
20085df0:	0087d000 	call	20087d00 <strcmp>
20085df4:	103ff526 	beq	r2,zero,20085dcc <__flash_rwdata_start+0xffff3fd0>
20085df8:	01400034 	movhi	r5,0
20085dfc:	29402304 	addi	r5,r5,140
20085e00:	8009883a 	mov	r4,r16
20085e04:	0087d000 	call	20087d00 <strcmp>
20085e08:	103ff026 	beq	r2,zero,20085dcc <__flash_rwdata_start+0xffff3fd0>
20085e0c:	0005883a 	mov	r2,zero
20085e10:	003ff006 	br	20085dd4 <__flash_rwdata_start+0xffff3fd8>
20085e14:	00800034 	movhi	r2,0
20085e18:	10801904 	addi	r2,r2,100
20085e1c:	f800283a 	ret

20085e20 <__locale_charset>:
20085e20:	00800034 	movhi	r2,0
20085e24:	10840f04 	addi	r2,r2,4156
20085e28:	f800283a 	ret

20085e2c <__locale_mb_cur_max>:
20085e2c:	00800034 	movhi	r2,0
20085e30:	10895304 	addi	r2,r2,9548
20085e34:	10800017 	ldw	r2,0(r2)
20085e38:	f800283a 	ret

20085e3c <__locale_msgcharset>:
20085e3c:	00800034 	movhi	r2,0
20085e40:	10840704 	addi	r2,r2,4124
20085e44:	f800283a 	ret

20085e48 <__locale_cjk_lang>:
20085e48:	0005883a 	mov	r2,zero
20085e4c:	f800283a 	ret

20085e50 <_localeconv_r>:
20085e50:	00800034 	movhi	r2,0
20085e54:	10841704 	addi	r2,r2,4188
20085e58:	f800283a 	ret

20085e5c <setlocale>:
20085e5c:	00c00034 	movhi	r3,0
20085e60:	18c95004 	addi	r3,r3,9536
20085e64:	2005883a 	mov	r2,r4
20085e68:	19000017 	ldw	r4,0(r3)
20085e6c:	280d883a 	mov	r6,r5
20085e70:	100b883a 	mov	r5,r2
20085e74:	0085da41 	jmpi	20085da4 <_setlocale_r>

20085e78 <localeconv>:
20085e78:	00800034 	movhi	r2,0
20085e7c:	10841704 	addi	r2,r2,4188
20085e80:	f800283a 	ret

20085e84 <__smakebuf_r>:
20085e84:	2880030b 	ldhu	r2,12(r5)
20085e88:	10c0008c 	andi	r3,r2,2
20085e8c:	1800401e 	bne	r3,zero,20085f90 <__smakebuf_r+0x10c>
20085e90:	deffec04 	addi	sp,sp,-80
20085e94:	dc000f15 	stw	r16,60(sp)
20085e98:	2821883a 	mov	r16,r5
20085e9c:	2940038f 	ldh	r5,14(r5)
20085ea0:	dc401015 	stw	r17,64(sp)
20085ea4:	dfc01315 	stw	ra,76(sp)
20085ea8:	dcc01215 	stw	r19,72(sp)
20085eac:	dc801115 	stw	r18,68(sp)
20085eb0:	2023883a 	mov	r17,r4
20085eb4:	28001b16 	blt	r5,zero,20085f24 <__smakebuf_r+0xa0>
20085eb8:	d80d883a 	mov	r6,sp
20085ebc:	00898140 	call	20089814 <_fstat_r>
20085ec0:	10001716 	blt	r2,zero,20085f20 <__smakebuf_r+0x9c>
20085ec4:	d8800117 	ldw	r2,4(sp)
20085ec8:	00e00014 	movui	r3,32768
20085ecc:	10bc000c 	andi	r2,r2,61440
20085ed0:	10c03726 	beq	r2,r3,20085fb0 <__smakebuf_r+0x12c>
20085ed4:	80c0030b 	ldhu	r3,12(r16)
20085ed8:	18c20014 	ori	r3,r3,2048
20085edc:	80c0030d 	sth	r3,12(r16)
20085ee0:	00c80004 	movi	r3,8192
20085ee4:	10c03c1e 	bne	r2,r3,20085fd8 <__smakebuf_r+0x154>
20085ee8:	8140038f 	ldh	r5,14(r16)
20085eec:	8809883a 	mov	r4,r17
20085ef0:	008986c0 	call	2008986c <_isatty_r>
20085ef4:	10004e26 	beq	r2,zero,20086030 <__smakebuf_r+0x1ac>
20085ef8:	8080030b 	ldhu	r2,12(r16)
20085efc:	04c00044 	movi	r19,1
20085f00:	80c010c4 	addi	r3,r16,67
20085f04:	14c4b03a 	or	r2,r2,r19
20085f08:	8080030d 	sth	r2,12(r16)
20085f0c:	80c00015 	stw	r3,0(r16)
20085f10:	80c00415 	stw	r3,16(r16)
20085f14:	84c00515 	stw	r19,20(r16)
20085f18:	04810004 	movi	r18,1024
20085f1c:	00000706 	br	20085f3c <__smakebuf_r+0xb8>
20085f20:	8080030b 	ldhu	r2,12(r16)
20085f24:	10c0200c 	andi	r3,r2,128
20085f28:	18001f1e 	bne	r3,zero,20085fa8 <__smakebuf_r+0x124>
20085f2c:	04810004 	movi	r18,1024
20085f30:	10820014 	ori	r2,r2,2048
20085f34:	8080030d 	sth	r2,12(r16)
20085f38:	0027883a 	mov	r19,zero
20085f3c:	8809883a 	mov	r4,r17
20085f40:	900b883a 	mov	r5,r18
20085f44:	00806fc0 	call	200806fc <_malloc_r>
20085f48:	10002e26 	beq	r2,zero,20086004 <__smakebuf_r+0x180>
20085f4c:	80c0030b 	ldhu	r3,12(r16)
20085f50:	01080234 	movhi	r4,8200
20085f54:	2113ee04 	addi	r4,r4,20408
20085f58:	89000f15 	stw	r4,60(r17)
20085f5c:	18c02014 	ori	r3,r3,128
20085f60:	80c0030d 	sth	r3,12(r16)
20085f64:	80800015 	stw	r2,0(r16)
20085f68:	80800415 	stw	r2,16(r16)
20085f6c:	84800515 	stw	r18,20(r16)
20085f70:	98001c1e 	bne	r19,zero,20085fe4 <__smakebuf_r+0x160>
20085f74:	dfc01317 	ldw	ra,76(sp)
20085f78:	dcc01217 	ldw	r19,72(sp)
20085f7c:	dc801117 	ldw	r18,68(sp)
20085f80:	dc401017 	ldw	r17,64(sp)
20085f84:	dc000f17 	ldw	r16,60(sp)
20085f88:	dec01404 	addi	sp,sp,80
20085f8c:	f800283a 	ret
20085f90:	288010c4 	addi	r2,r5,67
20085f94:	28800015 	stw	r2,0(r5)
20085f98:	28800415 	stw	r2,16(r5)
20085f9c:	00800044 	movi	r2,1
20085fa0:	28800515 	stw	r2,20(r5)
20085fa4:	f800283a 	ret
20085fa8:	04801004 	movi	r18,64
20085fac:	003fe006 	br	20085f30 <__flash_rwdata_start+0xffff4134>
20085fb0:	81000a17 	ldw	r4,40(r16)
20085fb4:	00c80234 	movhi	r3,8200
20085fb8:	18df2704 	addi	r3,r3,31900
20085fbc:	20ffc51e 	bne	r4,r3,20085ed4 <__flash_rwdata_start+0xffff40d8>
20085fc0:	80c0030b 	ldhu	r3,12(r16)
20085fc4:	01010004 	movi	r4,1024
20085fc8:	81001315 	stw	r4,76(r16)
20085fcc:	1906b03a 	or	r3,r3,r4
20085fd0:	80c0030d 	sth	r3,12(r16)
20085fd4:	003fc206 	br	20085ee0 <__flash_rwdata_start+0xffff40e4>
20085fd8:	0027883a 	mov	r19,zero
20085fdc:	04810004 	movi	r18,1024
20085fe0:	003fd606 	br	20085f3c <__flash_rwdata_start+0xffff4140>
20085fe4:	8140038f 	ldh	r5,14(r16)
20085fe8:	8809883a 	mov	r4,r17
20085fec:	008986c0 	call	2008986c <_isatty_r>
20085ff0:	103fe026 	beq	r2,zero,20085f74 <__flash_rwdata_start+0xffff4178>
20085ff4:	8080030b 	ldhu	r2,12(r16)
20085ff8:	10800054 	ori	r2,r2,1
20085ffc:	8080030d 	sth	r2,12(r16)
20086000:	003fdc06 	br	20085f74 <__flash_rwdata_start+0xffff4178>
20086004:	8080030b 	ldhu	r2,12(r16)
20086008:	10c0800c 	andi	r3,r2,512
2008600c:	183fd91e 	bne	r3,zero,20085f74 <__flash_rwdata_start+0xffff4178>
20086010:	10800094 	ori	r2,r2,2
20086014:	80c010c4 	addi	r3,r16,67
20086018:	8080030d 	sth	r2,12(r16)
2008601c:	00800044 	movi	r2,1
20086020:	80c00015 	stw	r3,0(r16)
20086024:	80c00415 	stw	r3,16(r16)
20086028:	80800515 	stw	r2,20(r16)
2008602c:	003fd106 	br	20085f74 <__flash_rwdata_start+0xffff4178>
20086030:	04c00044 	movi	r19,1
20086034:	04810004 	movi	r18,1024
20086038:	003fc006 	br	20085f3c <__flash_rwdata_start+0xffff4140>

2008603c <memchr>:
2008603c:	208000cc 	andi	r2,r4,3
20086040:	280f883a 	mov	r7,r5
20086044:	10003526 	beq	r2,zero,2008611c <memchr+0xe0>
20086048:	30bfffc4 	addi	r2,r6,-1
2008604c:	30001b26 	beq	r6,zero,200860bc <memchr+0x80>
20086050:	21800003 	ldbu	r6,0(r4)
20086054:	28c03fcc 	andi	r3,r5,255
20086058:	30c01a26 	beq	r6,r3,200860c4 <memchr+0x88>
2008605c:	180d883a 	mov	r6,r3
20086060:	00000406 	br	20086074 <memchr+0x38>
20086064:	10001526 	beq	r2,zero,200860bc <memchr+0x80>
20086068:	20c00003 	ldbu	r3,0(r4)
2008606c:	10bfffc4 	addi	r2,r2,-1
20086070:	19801426 	beq	r3,r6,200860c4 <memchr+0x88>
20086074:	21000044 	addi	r4,r4,1
20086078:	20c000cc 	andi	r3,r4,3
2008607c:	183ff91e 	bne	r3,zero,20086064 <__flash_rwdata_start+0xffff4268>
20086080:	024000c4 	movi	r9,3
20086084:	48801136 	bltu	r9,r2,200860cc <memchr+0x90>
20086088:	10000c26 	beq	r2,zero,200860bc <memchr+0x80>
2008608c:	20c00003 	ldbu	r3,0(r4)
20086090:	29403fcc 	andi	r5,r5,255
20086094:	19400b26 	beq	r3,r5,200860c4 <memchr+0x88>
20086098:	20c00044 	addi	r3,r4,1
2008609c:	2085883a 	add	r2,r4,r2
200860a0:	39803fcc 	andi	r6,r7,255
200860a4:	00000306 	br	200860b4 <memchr+0x78>
200860a8:	18c00044 	addi	r3,r3,1
200860ac:	197fffc3 	ldbu	r5,-1(r3)
200860b0:	29800426 	beq	r5,r6,200860c4 <memchr+0x88>
200860b4:	1809883a 	mov	r4,r3
200860b8:	18bffb1e 	bne	r3,r2,200860a8 <__flash_rwdata_start+0xffff42ac>
200860bc:	0005883a 	mov	r2,zero
200860c0:	f800283a 	ret
200860c4:	2005883a 	mov	r2,r4
200860c8:	f800283a 	ret
200860cc:	28c03fcc 	andi	r3,r5,255
200860d0:	1810923a 	slli	r8,r3,8
200860d4:	02ffbff4 	movhi	r11,65279
200860d8:	02a02074 	movhi	r10,32897
200860dc:	40c6b03a 	or	r3,r8,r3
200860e0:	1810943a 	slli	r8,r3,16
200860e4:	5affbfc4 	addi	r11,r11,-257
200860e8:	52a02004 	addi	r10,r10,-32640
200860ec:	40d0b03a 	or	r8,r8,r3
200860f0:	20c00017 	ldw	r3,0(r4)
200860f4:	40c6f03a 	xor	r3,r8,r3
200860f8:	1acd883a 	add	r6,r3,r11
200860fc:	00c6303a 	nor	r3,zero,r3
20086100:	30c6703a 	and	r3,r6,r3
20086104:	1a86703a 	and	r3,r3,r10
20086108:	183fdf1e 	bne	r3,zero,20086088 <__flash_rwdata_start+0xffff428c>
2008610c:	10bfff04 	addi	r2,r2,-4
20086110:	21000104 	addi	r4,r4,4
20086114:	48bff636 	bltu	r9,r2,200860f0 <__flash_rwdata_start+0xffff42f4>
20086118:	003fdb06 	br	20086088 <__flash_rwdata_start+0xffff428c>
2008611c:	3005883a 	mov	r2,r6
20086120:	003fd706 	br	20086080 <__flash_rwdata_start+0xffff4284>

20086124 <memcpy>:
20086124:	deffff04 	addi	sp,sp,-4
20086128:	dc000015 	stw	r16,0(sp)
2008612c:	00c003c4 	movi	r3,15
20086130:	2005883a 	mov	r2,r4
20086134:	1980432e 	bgeu	r3,r6,20086244 <memcpy+0x120>
20086138:	2146b03a 	or	r3,r4,r5
2008613c:	18c000cc 	andi	r3,r3,3
20086140:	1800421e 	bne	r3,zero,2008624c <memcpy+0x128>
20086144:	343ffc04 	addi	r16,r6,-16
20086148:	8020d13a 	srli	r16,r16,4
2008614c:	28c00104 	addi	r3,r5,4
20086150:	23400104 	addi	r13,r4,4
20086154:	801e913a 	slli	r15,r16,4
20086158:	2b000204 	addi	r12,r5,8
2008615c:	22c00204 	addi	r11,r4,8
20086160:	7bc00504 	addi	r15,r15,20
20086164:	2a800304 	addi	r10,r5,12
20086168:	22400304 	addi	r9,r4,12
2008616c:	2bdf883a 	add	r15,r5,r15
20086170:	2811883a 	mov	r8,r5
20086174:	200f883a 	mov	r7,r4
20086178:	41000017 	ldw	r4,0(r8)
2008617c:	39c00404 	addi	r7,r7,16
20086180:	18c00404 	addi	r3,r3,16
20086184:	393ffc15 	stw	r4,-16(r7)
20086188:	1bbffc17 	ldw	r14,-16(r3)
2008618c:	6b400404 	addi	r13,r13,16
20086190:	5ac00404 	addi	r11,r11,16
20086194:	6bbffc15 	stw	r14,-16(r13)
20086198:	63800017 	ldw	r14,0(r12)
2008619c:	4a400404 	addi	r9,r9,16
200861a0:	42000404 	addi	r8,r8,16
200861a4:	5bbffc15 	stw	r14,-16(r11)
200861a8:	53800017 	ldw	r14,0(r10)
200861ac:	63000404 	addi	r12,r12,16
200861b0:	52800404 	addi	r10,r10,16
200861b4:	4bbffc15 	stw	r14,-16(r9)
200861b8:	1bffef1e 	bne	r3,r15,20086178 <__flash_rwdata_start+0xffff437c>
200861bc:	81c00044 	addi	r7,r16,1
200861c0:	380e913a 	slli	r7,r7,4
200861c4:	310003cc 	andi	r4,r6,15
200861c8:	02c000c4 	movi	r11,3
200861cc:	11c7883a 	add	r3,r2,r7
200861d0:	29cb883a 	add	r5,r5,r7
200861d4:	59001f2e 	bgeu	r11,r4,20086254 <memcpy+0x130>
200861d8:	1813883a 	mov	r9,r3
200861dc:	2811883a 	mov	r8,r5
200861e0:	200f883a 	mov	r7,r4
200861e4:	42800017 	ldw	r10,0(r8)
200861e8:	4a400104 	addi	r9,r9,4
200861ec:	39ffff04 	addi	r7,r7,-4
200861f0:	4abfff15 	stw	r10,-4(r9)
200861f4:	42000104 	addi	r8,r8,4
200861f8:	59fffa36 	bltu	r11,r7,200861e4 <__flash_rwdata_start+0xffff43e8>
200861fc:	213fff04 	addi	r4,r4,-4
20086200:	2008d0ba 	srli	r4,r4,2
20086204:	318000cc 	andi	r6,r6,3
20086208:	21000044 	addi	r4,r4,1
2008620c:	2109883a 	add	r4,r4,r4
20086210:	2109883a 	add	r4,r4,r4
20086214:	1907883a 	add	r3,r3,r4
20086218:	290b883a 	add	r5,r5,r4
2008621c:	30000626 	beq	r6,zero,20086238 <memcpy+0x114>
20086220:	198d883a 	add	r6,r3,r6
20086224:	29c00003 	ldbu	r7,0(r5)
20086228:	18c00044 	addi	r3,r3,1
2008622c:	29400044 	addi	r5,r5,1
20086230:	19ffffc5 	stb	r7,-1(r3)
20086234:	19bffb1e 	bne	r3,r6,20086224 <__flash_rwdata_start+0xffff4428>
20086238:	dc000017 	ldw	r16,0(sp)
2008623c:	dec00104 	addi	sp,sp,4
20086240:	f800283a 	ret
20086244:	2007883a 	mov	r3,r4
20086248:	003ff406 	br	2008621c <__flash_rwdata_start+0xffff4420>
2008624c:	2007883a 	mov	r3,r4
20086250:	003ff306 	br	20086220 <__flash_rwdata_start+0xffff4424>
20086254:	200d883a 	mov	r6,r4
20086258:	003ff006 	br	2008621c <__flash_rwdata_start+0xffff4420>

2008625c <memmove>:
2008625c:	2005883a 	mov	r2,r4
20086260:	29000b2e 	bgeu	r5,r4,20086290 <memmove+0x34>
20086264:	298f883a 	add	r7,r5,r6
20086268:	21c0092e 	bgeu	r4,r7,20086290 <memmove+0x34>
2008626c:	2187883a 	add	r3,r4,r6
20086270:	198bc83a 	sub	r5,r3,r6
20086274:	30004b26 	beq	r6,zero,200863a4 <memmove+0x148>
20086278:	39ffffc4 	addi	r7,r7,-1
2008627c:	39000003 	ldbu	r4,0(r7)
20086280:	18ffffc4 	addi	r3,r3,-1
20086284:	19000005 	stb	r4,0(r3)
20086288:	197ffb1e 	bne	r3,r5,20086278 <__flash_rwdata_start+0xffff447c>
2008628c:	f800283a 	ret
20086290:	00c003c4 	movi	r3,15
20086294:	1980412e 	bgeu	r3,r6,2008639c <memmove+0x140>
20086298:	1146b03a 	or	r3,r2,r5
2008629c:	18c000cc 	andi	r3,r3,3
200862a0:	1800411e 	bne	r3,zero,200863a8 <memmove+0x14c>
200862a4:	33fffc04 	addi	r15,r6,-16
200862a8:	781ed13a 	srli	r15,r15,4
200862ac:	28c00104 	addi	r3,r5,4
200862b0:	13400104 	addi	r13,r2,4
200862b4:	781c913a 	slli	r14,r15,4
200862b8:	2b000204 	addi	r12,r5,8
200862bc:	12c00204 	addi	r11,r2,8
200862c0:	73800504 	addi	r14,r14,20
200862c4:	2a800304 	addi	r10,r5,12
200862c8:	12400304 	addi	r9,r2,12
200862cc:	2b9d883a 	add	r14,r5,r14
200862d0:	2811883a 	mov	r8,r5
200862d4:	100f883a 	mov	r7,r2
200862d8:	41000017 	ldw	r4,0(r8)
200862dc:	39c00404 	addi	r7,r7,16
200862e0:	18c00404 	addi	r3,r3,16
200862e4:	393ffc15 	stw	r4,-16(r7)
200862e8:	193ffc17 	ldw	r4,-16(r3)
200862ec:	6b400404 	addi	r13,r13,16
200862f0:	5ac00404 	addi	r11,r11,16
200862f4:	693ffc15 	stw	r4,-16(r13)
200862f8:	61000017 	ldw	r4,0(r12)
200862fc:	4a400404 	addi	r9,r9,16
20086300:	42000404 	addi	r8,r8,16
20086304:	593ffc15 	stw	r4,-16(r11)
20086308:	51000017 	ldw	r4,0(r10)
2008630c:	63000404 	addi	r12,r12,16
20086310:	52800404 	addi	r10,r10,16
20086314:	493ffc15 	stw	r4,-16(r9)
20086318:	1bbfef1e 	bne	r3,r14,200862d8 <__flash_rwdata_start+0xffff44dc>
2008631c:	79000044 	addi	r4,r15,1
20086320:	2008913a 	slli	r4,r4,4
20086324:	328003cc 	andi	r10,r6,15
20086328:	02c000c4 	movi	r11,3
2008632c:	1107883a 	add	r3,r2,r4
20086330:	290b883a 	add	r5,r5,r4
20086334:	5a801e2e 	bgeu	r11,r10,200863b0 <memmove+0x154>
20086338:	1813883a 	mov	r9,r3
2008633c:	2811883a 	mov	r8,r5
20086340:	500f883a 	mov	r7,r10
20086344:	41000017 	ldw	r4,0(r8)
20086348:	4a400104 	addi	r9,r9,4
2008634c:	39ffff04 	addi	r7,r7,-4
20086350:	493fff15 	stw	r4,-4(r9)
20086354:	42000104 	addi	r8,r8,4
20086358:	59fffa36 	bltu	r11,r7,20086344 <__flash_rwdata_start+0xffff4548>
2008635c:	513fff04 	addi	r4,r10,-4
20086360:	2008d0ba 	srli	r4,r4,2
20086364:	318000cc 	andi	r6,r6,3
20086368:	21000044 	addi	r4,r4,1
2008636c:	2109883a 	add	r4,r4,r4
20086370:	2109883a 	add	r4,r4,r4
20086374:	1907883a 	add	r3,r3,r4
20086378:	290b883a 	add	r5,r5,r4
2008637c:	30000926 	beq	r6,zero,200863a4 <memmove+0x148>
20086380:	198d883a 	add	r6,r3,r6
20086384:	29c00003 	ldbu	r7,0(r5)
20086388:	18c00044 	addi	r3,r3,1
2008638c:	29400044 	addi	r5,r5,1
20086390:	19ffffc5 	stb	r7,-1(r3)
20086394:	19bffb1e 	bne	r3,r6,20086384 <__flash_rwdata_start+0xffff4588>
20086398:	f800283a 	ret
2008639c:	1007883a 	mov	r3,r2
200863a0:	003ff606 	br	2008637c <__flash_rwdata_start+0xffff4580>
200863a4:	f800283a 	ret
200863a8:	1007883a 	mov	r3,r2
200863ac:	003ff406 	br	20086380 <__flash_rwdata_start+0xffff4584>
200863b0:	500d883a 	mov	r6,r10
200863b4:	003ff106 	br	2008637c <__flash_rwdata_start+0xffff4580>

200863b8 <memset>:
200863b8:	20c000cc 	andi	r3,r4,3
200863bc:	2005883a 	mov	r2,r4
200863c0:	18004326 	beq	r3,zero,200864d0 <memset+0x118>
200863c4:	31ffffc4 	addi	r7,r6,-1
200863c8:	30004026 	beq	r6,zero,200864cc <memset+0x114>
200863cc:	2813883a 	mov	r9,r5
200863d0:	200d883a 	mov	r6,r4
200863d4:	2007883a 	mov	r3,r4
200863d8:	00000406 	br	200863ec <memset+0x34>
200863dc:	3a3fffc4 	addi	r8,r7,-1
200863e0:	31800044 	addi	r6,r6,1
200863e4:	38003926 	beq	r7,zero,200864cc <memset+0x114>
200863e8:	400f883a 	mov	r7,r8
200863ec:	18c00044 	addi	r3,r3,1
200863f0:	32400005 	stb	r9,0(r6)
200863f4:	1a0000cc 	andi	r8,r3,3
200863f8:	403ff81e 	bne	r8,zero,200863dc <__flash_rwdata_start+0xffff45e0>
200863fc:	010000c4 	movi	r4,3
20086400:	21c02d2e 	bgeu	r4,r7,200864b8 <memset+0x100>
20086404:	29803fcc 	andi	r6,r5,255
20086408:	3008923a 	slli	r4,r6,8
2008640c:	218cb03a 	or	r6,r4,r6
20086410:	3008943a 	slli	r4,r6,16
20086414:	218cb03a 	or	r6,r4,r6
20086418:	010003c4 	movi	r4,15
2008641c:	21c0182e 	bgeu	r4,r7,20086480 <memset+0xc8>
20086420:	3b3ffc04 	addi	r12,r7,-16
20086424:	6018d13a 	srli	r12,r12,4
20086428:	1a000104 	addi	r8,r3,4
2008642c:	1ac00204 	addi	r11,r3,8
20086430:	6008913a 	slli	r4,r12,4
20086434:	1a800304 	addi	r10,r3,12
20086438:	1813883a 	mov	r9,r3
2008643c:	21000504 	addi	r4,r4,20
20086440:	1909883a 	add	r4,r3,r4
20086444:	49800015 	stw	r6,0(r9)
20086448:	41800015 	stw	r6,0(r8)
2008644c:	59800015 	stw	r6,0(r11)
20086450:	51800015 	stw	r6,0(r10)
20086454:	42000404 	addi	r8,r8,16
20086458:	4a400404 	addi	r9,r9,16
2008645c:	5ac00404 	addi	r11,r11,16
20086460:	52800404 	addi	r10,r10,16
20086464:	413ff71e 	bne	r8,r4,20086444 <__flash_rwdata_start+0xffff4648>
20086468:	63000044 	addi	r12,r12,1
2008646c:	6018913a 	slli	r12,r12,4
20086470:	39c003cc 	andi	r7,r7,15
20086474:	010000c4 	movi	r4,3
20086478:	1b07883a 	add	r3,r3,r12
2008647c:	21c00e2e 	bgeu	r4,r7,200864b8 <memset+0x100>
20086480:	1813883a 	mov	r9,r3
20086484:	3811883a 	mov	r8,r7
20086488:	010000c4 	movi	r4,3
2008648c:	49800015 	stw	r6,0(r9)
20086490:	423fff04 	addi	r8,r8,-4
20086494:	4a400104 	addi	r9,r9,4
20086498:	223ffc36 	bltu	r4,r8,2008648c <__flash_rwdata_start+0xffff4690>
2008649c:	393fff04 	addi	r4,r7,-4
200864a0:	2008d0ba 	srli	r4,r4,2
200864a4:	39c000cc 	andi	r7,r7,3
200864a8:	21000044 	addi	r4,r4,1
200864ac:	2109883a 	add	r4,r4,r4
200864b0:	2109883a 	add	r4,r4,r4
200864b4:	1907883a 	add	r3,r3,r4
200864b8:	38000426 	beq	r7,zero,200864cc <memset+0x114>
200864bc:	19cf883a 	add	r7,r3,r7
200864c0:	19400005 	stb	r5,0(r3)
200864c4:	18c00044 	addi	r3,r3,1
200864c8:	19fffd1e 	bne	r3,r7,200864c0 <__flash_rwdata_start+0xffff46c4>
200864cc:	f800283a 	ret
200864d0:	2007883a 	mov	r3,r4
200864d4:	300f883a 	mov	r7,r6
200864d8:	003fc806 	br	200863fc <__flash_rwdata_start+0xffff4600>

200864dc <_Balloc>:
200864dc:	20801317 	ldw	r2,76(r4)
200864e0:	defffc04 	addi	sp,sp,-16
200864e4:	dc400115 	stw	r17,4(sp)
200864e8:	dc000015 	stw	r16,0(sp)
200864ec:	dfc00315 	stw	ra,12(sp)
200864f0:	dc800215 	stw	r18,8(sp)
200864f4:	2023883a 	mov	r17,r4
200864f8:	2821883a 	mov	r16,r5
200864fc:	10000f26 	beq	r2,zero,2008653c <_Balloc+0x60>
20086500:	8407883a 	add	r3,r16,r16
20086504:	18c7883a 	add	r3,r3,r3
20086508:	10c7883a 	add	r3,r2,r3
2008650c:	18800017 	ldw	r2,0(r3)
20086510:	10001126 	beq	r2,zero,20086558 <_Balloc+0x7c>
20086514:	11000017 	ldw	r4,0(r2)
20086518:	19000015 	stw	r4,0(r3)
2008651c:	10000415 	stw	zero,16(r2)
20086520:	10000315 	stw	zero,12(r2)
20086524:	dfc00317 	ldw	ra,12(sp)
20086528:	dc800217 	ldw	r18,8(sp)
2008652c:	dc400117 	ldw	r17,4(sp)
20086530:	dc000017 	ldw	r16,0(sp)
20086534:	dec00404 	addi	sp,sp,16
20086538:	f800283a 	ret
2008653c:	01400104 	movi	r5,4
20086540:	01800844 	movi	r6,33
20086544:	008946c0 	call	2008946c <_calloc_r>
20086548:	88801315 	stw	r2,76(r17)
2008654c:	103fec1e 	bne	r2,zero,20086500 <__flash_rwdata_start+0xffff4704>
20086550:	0005883a 	mov	r2,zero
20086554:	003ff306 	br	20086524 <__flash_rwdata_start+0xffff4728>
20086558:	01400044 	movi	r5,1
2008655c:	2c24983a 	sll	r18,r5,r16
20086560:	8809883a 	mov	r4,r17
20086564:	91800144 	addi	r6,r18,5
20086568:	318d883a 	add	r6,r6,r6
2008656c:	318d883a 	add	r6,r6,r6
20086570:	008946c0 	call	2008946c <_calloc_r>
20086574:	103ff626 	beq	r2,zero,20086550 <__flash_rwdata_start+0xffff4754>
20086578:	14000115 	stw	r16,4(r2)
2008657c:	14800215 	stw	r18,8(r2)
20086580:	003fe606 	br	2008651c <__flash_rwdata_start+0xffff4720>

20086584 <_Bfree>:
20086584:	28000826 	beq	r5,zero,200865a8 <_Bfree+0x24>
20086588:	28c00117 	ldw	r3,4(r5)
2008658c:	20801317 	ldw	r2,76(r4)
20086590:	18c7883a 	add	r3,r3,r3
20086594:	18c7883a 	add	r3,r3,r3
20086598:	10c5883a 	add	r2,r2,r3
2008659c:	10c00017 	ldw	r3,0(r2)
200865a0:	28c00015 	stw	r3,0(r5)
200865a4:	11400015 	stw	r5,0(r2)
200865a8:	f800283a 	ret

200865ac <__multadd>:
200865ac:	defffa04 	addi	sp,sp,-24
200865b0:	dc000115 	stw	r16,4(sp)
200865b4:	2c000417 	ldw	r16,16(r5)
200865b8:	dc800315 	stw	r18,12(sp)
200865bc:	dc400215 	stw	r17,8(sp)
200865c0:	dfc00515 	stw	ra,20(sp)
200865c4:	dcc00415 	stw	r19,16(sp)
200865c8:	2823883a 	mov	r17,r5
200865cc:	2025883a 	mov	r18,r4
200865d0:	2a400504 	addi	r9,r5,20
200865d4:	0015883a 	mov	r10,zero
200865d8:	4a000017 	ldw	r8,0(r9)
200865dc:	4a400104 	addi	r9,r9,4
200865e0:	52800044 	addi	r10,r10,1
200865e4:	40ffffcc 	andi	r3,r8,65535
200865e8:	1987383a 	mul	r3,r3,r6
200865ec:	4010d43a 	srli	r8,r8,16
200865f0:	19cf883a 	add	r7,r3,r7
200865f4:	4191383a 	mul	r8,r8,r6
200865f8:	3816d43a 	srli	r11,r7,16
200865fc:	38ffffcc 	andi	r3,r7,65535
20086600:	5a0f883a 	add	r7,r11,r8
20086604:	3810943a 	slli	r8,r7,16
20086608:	380ed43a 	srli	r7,r7,16
2008660c:	40c7883a 	add	r3,r8,r3
20086610:	48ffff15 	stw	r3,-4(r9)
20086614:	543ff016 	blt	r10,r16,200865d8 <__flash_rwdata_start+0xffff47dc>
20086618:	38000926 	beq	r7,zero,20086640 <__multadd+0x94>
2008661c:	88800217 	ldw	r2,8(r17)
20086620:	80800f0e 	bge	r16,r2,20086660 <__multadd+0xb4>
20086624:	80800144 	addi	r2,r16,5
20086628:	1085883a 	add	r2,r2,r2
2008662c:	1085883a 	add	r2,r2,r2
20086630:	8885883a 	add	r2,r17,r2
20086634:	11c00015 	stw	r7,0(r2)
20086638:	84000044 	addi	r16,r16,1
2008663c:	8c000415 	stw	r16,16(r17)
20086640:	8805883a 	mov	r2,r17
20086644:	dfc00517 	ldw	ra,20(sp)
20086648:	dcc00417 	ldw	r19,16(sp)
2008664c:	dc800317 	ldw	r18,12(sp)
20086650:	dc400217 	ldw	r17,8(sp)
20086654:	dc000117 	ldw	r16,4(sp)
20086658:	dec00604 	addi	sp,sp,24
2008665c:	f800283a 	ret
20086660:	89400117 	ldw	r5,4(r17)
20086664:	9009883a 	mov	r4,r18
20086668:	d9c00015 	stw	r7,0(sp)
2008666c:	29400044 	addi	r5,r5,1
20086670:	00864dc0 	call	200864dc <_Balloc>
20086674:	89800417 	ldw	r6,16(r17)
20086678:	11000304 	addi	r4,r2,12
2008667c:	89400304 	addi	r5,r17,12
20086680:	31800084 	addi	r6,r6,2
20086684:	318d883a 	add	r6,r6,r6
20086688:	318d883a 	add	r6,r6,r6
2008668c:	1027883a 	mov	r19,r2
20086690:	00861240 	call	20086124 <memcpy>
20086694:	d9c00017 	ldw	r7,0(sp)
20086698:	88000a26 	beq	r17,zero,200866c4 <__multadd+0x118>
2008669c:	89000117 	ldw	r4,4(r17)
200866a0:	90c01317 	ldw	r3,76(r18)
200866a4:	2109883a 	add	r4,r4,r4
200866a8:	2109883a 	add	r4,r4,r4
200866ac:	1907883a 	add	r3,r3,r4
200866b0:	18800017 	ldw	r2,0(r3)
200866b4:	88800015 	stw	r2,0(r17)
200866b8:	1c400015 	stw	r17,0(r3)
200866bc:	9823883a 	mov	r17,r19
200866c0:	003fd806 	br	20086624 <__flash_rwdata_start+0xffff4828>
200866c4:	9823883a 	mov	r17,r19
200866c8:	003fd606 	br	20086624 <__flash_rwdata_start+0xffff4828>

200866cc <__s2b>:
200866cc:	defff904 	addi	sp,sp,-28
200866d0:	dc400115 	stw	r17,4(sp)
200866d4:	dc000015 	stw	r16,0(sp)
200866d8:	2023883a 	mov	r17,r4
200866dc:	2821883a 	mov	r16,r5
200866e0:	39000204 	addi	r4,r7,8
200866e4:	01400244 	movi	r5,9
200866e8:	dcc00315 	stw	r19,12(sp)
200866ec:	dc800215 	stw	r18,8(sp)
200866f0:	dfc00615 	stw	ra,24(sp)
200866f4:	dd400515 	stw	r21,20(sp)
200866f8:	dd000415 	stw	r20,16(sp)
200866fc:	3825883a 	mov	r18,r7
20086700:	3027883a 	mov	r19,r6
20086704:	008a71c0 	call	2008a71c <__divsi3>
20086708:	00c00044 	movi	r3,1
2008670c:	000b883a 	mov	r5,zero
20086710:	1880030e 	bge	r3,r2,20086720 <__s2b+0x54>
20086714:	18c7883a 	add	r3,r3,r3
20086718:	29400044 	addi	r5,r5,1
2008671c:	18bffd16 	blt	r3,r2,20086714 <__flash_rwdata_start+0xffff4918>
20086720:	8809883a 	mov	r4,r17
20086724:	00864dc0 	call	200864dc <_Balloc>
20086728:	d8c00717 	ldw	r3,28(sp)
2008672c:	10c00515 	stw	r3,20(r2)
20086730:	00c00044 	movi	r3,1
20086734:	10c00415 	stw	r3,16(r2)
20086738:	00c00244 	movi	r3,9
2008673c:	1cc0210e 	bge	r3,r19,200867c4 <__s2b+0xf8>
20086740:	80eb883a 	add	r21,r16,r3
20086744:	a829883a 	mov	r20,r21
20086748:	84e1883a 	add	r16,r16,r19
2008674c:	a1c00007 	ldb	r7,0(r20)
20086750:	8809883a 	mov	r4,r17
20086754:	a5000044 	addi	r20,r20,1
20086758:	100b883a 	mov	r5,r2
2008675c:	01800284 	movi	r6,10
20086760:	39fff404 	addi	r7,r7,-48
20086764:	00865ac0 	call	200865ac <__multadd>
20086768:	a43ff81e 	bne	r20,r16,2008674c <__flash_rwdata_start+0xffff4950>
2008676c:	ace1883a 	add	r16,r21,r19
20086770:	843ffe04 	addi	r16,r16,-8
20086774:	9c800a0e 	bge	r19,r18,200867a0 <__s2b+0xd4>
20086778:	94e5c83a 	sub	r18,r18,r19
2008677c:	84a5883a 	add	r18,r16,r18
20086780:	81c00007 	ldb	r7,0(r16)
20086784:	8809883a 	mov	r4,r17
20086788:	84000044 	addi	r16,r16,1
2008678c:	100b883a 	mov	r5,r2
20086790:	01800284 	movi	r6,10
20086794:	39fff404 	addi	r7,r7,-48
20086798:	00865ac0 	call	200865ac <__multadd>
2008679c:	84bff81e 	bne	r16,r18,20086780 <__flash_rwdata_start+0xffff4984>
200867a0:	dfc00617 	ldw	ra,24(sp)
200867a4:	dd400517 	ldw	r21,20(sp)
200867a8:	dd000417 	ldw	r20,16(sp)
200867ac:	dcc00317 	ldw	r19,12(sp)
200867b0:	dc800217 	ldw	r18,8(sp)
200867b4:	dc400117 	ldw	r17,4(sp)
200867b8:	dc000017 	ldw	r16,0(sp)
200867bc:	dec00704 	addi	sp,sp,28
200867c0:	f800283a 	ret
200867c4:	84000284 	addi	r16,r16,10
200867c8:	1827883a 	mov	r19,r3
200867cc:	003fe906 	br	20086774 <__flash_rwdata_start+0xffff4978>

200867d0 <__hi0bits>:
200867d0:	20bfffec 	andhi	r2,r4,65535
200867d4:	1000141e 	bne	r2,zero,20086828 <__hi0bits+0x58>
200867d8:	2008943a 	slli	r4,r4,16
200867dc:	00800404 	movi	r2,16
200867e0:	20ffc02c 	andhi	r3,r4,65280
200867e4:	1800021e 	bne	r3,zero,200867f0 <__hi0bits+0x20>
200867e8:	2008923a 	slli	r4,r4,8
200867ec:	10800204 	addi	r2,r2,8
200867f0:	20fc002c 	andhi	r3,r4,61440
200867f4:	1800021e 	bne	r3,zero,20086800 <__hi0bits+0x30>
200867f8:	2008913a 	slli	r4,r4,4
200867fc:	10800104 	addi	r2,r2,4
20086800:	20f0002c 	andhi	r3,r4,49152
20086804:	1800031e 	bne	r3,zero,20086814 <__hi0bits+0x44>
20086808:	2109883a 	add	r4,r4,r4
2008680c:	10800084 	addi	r2,r2,2
20086810:	2109883a 	add	r4,r4,r4
20086814:	20000316 	blt	r4,zero,20086824 <__hi0bits+0x54>
20086818:	2110002c 	andhi	r4,r4,16384
2008681c:	2000041e 	bne	r4,zero,20086830 <__hi0bits+0x60>
20086820:	00800804 	movi	r2,32
20086824:	f800283a 	ret
20086828:	0005883a 	mov	r2,zero
2008682c:	003fec06 	br	200867e0 <__flash_rwdata_start+0xffff49e4>
20086830:	10800044 	addi	r2,r2,1
20086834:	f800283a 	ret

20086838 <__lo0bits>:
20086838:	20c00017 	ldw	r3,0(r4)
2008683c:	188001cc 	andi	r2,r3,7
20086840:	10000826 	beq	r2,zero,20086864 <__lo0bits+0x2c>
20086844:	1880004c 	andi	r2,r3,1
20086848:	1000211e 	bne	r2,zero,200868d0 <__lo0bits+0x98>
2008684c:	1880008c 	andi	r2,r3,2
20086850:	1000211e 	bne	r2,zero,200868d8 <__lo0bits+0xa0>
20086854:	1806d0ba 	srli	r3,r3,2
20086858:	00800084 	movi	r2,2
2008685c:	20c00015 	stw	r3,0(r4)
20086860:	f800283a 	ret
20086864:	18bfffcc 	andi	r2,r3,65535
20086868:	10001326 	beq	r2,zero,200868b8 <__lo0bits+0x80>
2008686c:	0005883a 	mov	r2,zero
20086870:	19403fcc 	andi	r5,r3,255
20086874:	2800021e 	bne	r5,zero,20086880 <__lo0bits+0x48>
20086878:	1806d23a 	srli	r3,r3,8
2008687c:	10800204 	addi	r2,r2,8
20086880:	194003cc 	andi	r5,r3,15
20086884:	2800021e 	bne	r5,zero,20086890 <__lo0bits+0x58>
20086888:	1806d13a 	srli	r3,r3,4
2008688c:	10800104 	addi	r2,r2,4
20086890:	194000cc 	andi	r5,r3,3
20086894:	2800021e 	bne	r5,zero,200868a0 <__lo0bits+0x68>
20086898:	1806d0ba 	srli	r3,r3,2
2008689c:	10800084 	addi	r2,r2,2
200868a0:	1940004c 	andi	r5,r3,1
200868a4:	2800081e 	bne	r5,zero,200868c8 <__lo0bits+0x90>
200868a8:	1806d07a 	srli	r3,r3,1
200868ac:	1800051e 	bne	r3,zero,200868c4 <__lo0bits+0x8c>
200868b0:	00800804 	movi	r2,32
200868b4:	f800283a 	ret
200868b8:	1806d43a 	srli	r3,r3,16
200868bc:	00800404 	movi	r2,16
200868c0:	003feb06 	br	20086870 <__flash_rwdata_start+0xffff4a74>
200868c4:	10800044 	addi	r2,r2,1
200868c8:	20c00015 	stw	r3,0(r4)
200868cc:	f800283a 	ret
200868d0:	0005883a 	mov	r2,zero
200868d4:	f800283a 	ret
200868d8:	1806d07a 	srli	r3,r3,1
200868dc:	00800044 	movi	r2,1
200868e0:	20c00015 	stw	r3,0(r4)
200868e4:	f800283a 	ret

200868e8 <__i2b>:
200868e8:	defffd04 	addi	sp,sp,-12
200868ec:	dc000015 	stw	r16,0(sp)
200868f0:	04000044 	movi	r16,1
200868f4:	dc400115 	stw	r17,4(sp)
200868f8:	2823883a 	mov	r17,r5
200868fc:	800b883a 	mov	r5,r16
20086900:	dfc00215 	stw	ra,8(sp)
20086904:	00864dc0 	call	200864dc <_Balloc>
20086908:	14400515 	stw	r17,20(r2)
2008690c:	14000415 	stw	r16,16(r2)
20086910:	dfc00217 	ldw	ra,8(sp)
20086914:	dc400117 	ldw	r17,4(sp)
20086918:	dc000017 	ldw	r16,0(sp)
2008691c:	dec00304 	addi	sp,sp,12
20086920:	f800283a 	ret

20086924 <__multiply>:
20086924:	defffa04 	addi	sp,sp,-24
20086928:	dcc00315 	stw	r19,12(sp)
2008692c:	dc800215 	stw	r18,8(sp)
20086930:	2cc00417 	ldw	r19,16(r5)
20086934:	34800417 	ldw	r18,16(r6)
20086938:	dd000415 	stw	r20,16(sp)
2008693c:	dc400115 	stw	r17,4(sp)
20086940:	dfc00515 	stw	ra,20(sp)
20086944:	dc000015 	stw	r16,0(sp)
20086948:	2829883a 	mov	r20,r5
2008694c:	3023883a 	mov	r17,r6
20086950:	9c807016 	blt	r19,r18,20086b14 <__multiply+0x1f0>
20086954:	9005883a 	mov	r2,r18
20086958:	9825883a 	mov	r18,r19
2008695c:	1027883a 	mov	r19,r2
20086960:	a0800217 	ldw	r2,8(r20)
20086964:	94e1883a 	add	r16,r18,r19
20086968:	a1400117 	ldw	r5,4(r20)
2008696c:	1400010e 	bge	r2,r16,20086974 <__multiply+0x50>
20086970:	29400044 	addi	r5,r5,1
20086974:	00864dc0 	call	200864dc <_Balloc>
20086978:	8417883a 	add	r11,r16,r16
2008697c:	13000504 	addi	r12,r2,20
20086980:	5ad7883a 	add	r11,r11,r11
20086984:	62d7883a 	add	r11,r12,r11
20086988:	6007883a 	mov	r3,r12
2008698c:	62c0032e 	bgeu	r12,r11,2008699c <__multiply+0x78>
20086990:	18000015 	stw	zero,0(r3)
20086994:	18c00104 	addi	r3,r3,4
20086998:	1afffd36 	bltu	r3,r11,20086990 <__flash_rwdata_start+0xffff4b94>
2008699c:	9ce7883a 	add	r19,r19,r19
200869a0:	94a5883a 	add	r18,r18,r18
200869a4:	89800504 	addi	r6,r17,20
200869a8:	9ce7883a 	add	r19,r19,r19
200869ac:	a3800504 	addi	r14,r20,20
200869b0:	94a5883a 	add	r18,r18,r18
200869b4:	34db883a 	add	r13,r6,r19
200869b8:	7495883a 	add	r10,r14,r18
200869bc:	3340422e 	bgeu	r6,r13,20086ac8 <__multiply+0x1a4>
200869c0:	34400017 	ldw	r17,0(r6)
200869c4:	8cbfffcc 	andi	r18,r17,65535
200869c8:	90001b26 	beq	r18,zero,20086a38 <__multiply+0x114>
200869cc:	6013883a 	mov	r9,r12
200869d0:	7023883a 	mov	r17,r14
200869d4:	0011883a 	mov	r8,zero
200869d8:	88c00017 	ldw	r3,0(r17)
200869dc:	4bc00017 	ldw	r15,0(r9)
200869e0:	8c400104 	addi	r17,r17,4
200869e4:	19ffffcc 	andi	r7,r3,65535
200869e8:	3c8f383a 	mul	r7,r7,r18
200869ec:	1808d43a 	srli	r4,r3,16
200869f0:	797fffcc 	andi	r5,r15,65535
200869f4:	29cb883a 	add	r5,r5,r7
200869f8:	2a0b883a 	add	r5,r5,r8
200869fc:	2489383a 	mul	r4,r4,r18
20086a00:	7806d43a 	srli	r3,r15,16
20086a04:	2810d43a 	srli	r8,r5,16
20086a08:	297fffcc 	andi	r5,r5,65535
20086a0c:	1907883a 	add	r3,r3,r4
20086a10:	1a07883a 	add	r3,r3,r8
20086a14:	1808943a 	slli	r4,r3,16
20086a18:	480f883a 	mov	r7,r9
20086a1c:	1810d43a 	srli	r8,r3,16
20086a20:	214ab03a 	or	r5,r4,r5
20086a24:	49400015 	stw	r5,0(r9)
20086a28:	4a400104 	addi	r9,r9,4
20086a2c:	8abfea36 	bltu	r17,r10,200869d8 <__flash_rwdata_start+0xffff4bdc>
20086a30:	3a000115 	stw	r8,4(r7)
20086a34:	34400017 	ldw	r17,0(r6)
20086a38:	8822d43a 	srli	r17,r17,16
20086a3c:	88001f26 	beq	r17,zero,20086abc <__multiply+0x198>
20086a40:	60c00017 	ldw	r3,0(r12)
20086a44:	7013883a 	mov	r9,r14
20086a48:	601f883a 	mov	r15,r12
20086a4c:	1811883a 	mov	r8,r3
20086a50:	6027883a 	mov	r19,r12
20086a54:	000f883a 	mov	r7,zero
20086a58:	00000106 	br	20086a60 <__multiply+0x13c>
20086a5c:	9027883a 	mov	r19,r18
20086a60:	4940000b 	ldhu	r5,0(r9)
20086a64:	4010d43a 	srli	r8,r8,16
20086a68:	193fffcc 	andi	r4,r3,65535
20086a6c:	2c4b383a 	mul	r5,r5,r17
20086a70:	7bc00104 	addi	r15,r15,4
20086a74:	4a400104 	addi	r9,r9,4
20086a78:	2a0b883a 	add	r5,r5,r8
20086a7c:	29cb883a 	add	r5,r5,r7
20086a80:	2806943a 	slli	r3,r5,16
20086a84:	9c800104 	addi	r18,r19,4
20086a88:	280ad43a 	srli	r5,r5,16
20086a8c:	1908b03a 	or	r4,r3,r4
20086a90:	793fff15 	stw	r4,-4(r15)
20086a94:	48ffff17 	ldw	r3,-4(r9)
20086a98:	92000017 	ldw	r8,0(r18)
20086a9c:	1806d43a 	srli	r3,r3,16
20086aa0:	413fffcc 	andi	r4,r8,65535
20086aa4:	1c47383a 	mul	r3,r3,r17
20086aa8:	1907883a 	add	r3,r3,r4
20086aac:	1947883a 	add	r3,r3,r5
20086ab0:	180ed43a 	srli	r7,r3,16
20086ab4:	4abfe936 	bltu	r9,r10,20086a5c <__flash_rwdata_start+0xffff4c60>
20086ab8:	98c00115 	stw	r3,4(r19)
20086abc:	31800104 	addi	r6,r6,4
20086ac0:	63000104 	addi	r12,r12,4
20086ac4:	337fbe36 	bltu	r6,r13,200869c0 <__flash_rwdata_start+0xffff4bc4>
20086ac8:	0400090e 	bge	zero,r16,20086af0 <__multiply+0x1cc>
20086acc:	58ffff17 	ldw	r3,-4(r11)
20086ad0:	5affff04 	addi	r11,r11,-4
20086ad4:	18000326 	beq	r3,zero,20086ae4 <__multiply+0x1c0>
20086ad8:	00000506 	br	20086af0 <__multiply+0x1cc>
20086adc:	58c00017 	ldw	r3,0(r11)
20086ae0:	1800031e 	bne	r3,zero,20086af0 <__multiply+0x1cc>
20086ae4:	843fffc4 	addi	r16,r16,-1
20086ae8:	5affff04 	addi	r11,r11,-4
20086aec:	803ffb1e 	bne	r16,zero,20086adc <__flash_rwdata_start+0xffff4ce0>
20086af0:	14000415 	stw	r16,16(r2)
20086af4:	dfc00517 	ldw	ra,20(sp)
20086af8:	dd000417 	ldw	r20,16(sp)
20086afc:	dcc00317 	ldw	r19,12(sp)
20086b00:	dc800217 	ldw	r18,8(sp)
20086b04:	dc400117 	ldw	r17,4(sp)
20086b08:	dc000017 	ldw	r16,0(sp)
20086b0c:	dec00604 	addi	sp,sp,24
20086b10:	f800283a 	ret
20086b14:	3029883a 	mov	r20,r6
20086b18:	2823883a 	mov	r17,r5
20086b1c:	003f9006 	br	20086960 <__flash_rwdata_start+0xffff4b64>

20086b20 <__pow5mult>:
20086b20:	defffa04 	addi	sp,sp,-24
20086b24:	dcc00315 	stw	r19,12(sp)
20086b28:	dc800215 	stw	r18,8(sp)
20086b2c:	dc000015 	stw	r16,0(sp)
20086b30:	dfc00515 	stw	ra,20(sp)
20086b34:	dd000415 	stw	r20,16(sp)
20086b38:	dc400115 	stw	r17,4(sp)
20086b3c:	308000cc 	andi	r2,r6,3
20086b40:	3021883a 	mov	r16,r6
20086b44:	2027883a 	mov	r19,r4
20086b48:	2825883a 	mov	r18,r5
20086b4c:	10002e1e 	bne	r2,zero,20086c08 <__pow5mult+0xe8>
20086b50:	8021d0ba 	srai	r16,r16,2
20086b54:	80001a26 	beq	r16,zero,20086bc0 <__pow5mult+0xa0>
20086b58:	9c401217 	ldw	r17,72(r19)
20086b5c:	8800061e 	bne	r17,zero,20086b78 <__pow5mult+0x58>
20086b60:	00003406 	br	20086c34 <__pow5mult+0x114>
20086b64:	8021d07a 	srai	r16,r16,1
20086b68:	80001526 	beq	r16,zero,20086bc0 <__pow5mult+0xa0>
20086b6c:	88800017 	ldw	r2,0(r17)
20086b70:	10001c26 	beq	r2,zero,20086be4 <__pow5mult+0xc4>
20086b74:	1023883a 	mov	r17,r2
20086b78:	80c0004c 	andi	r3,r16,1
20086b7c:	183ff926 	beq	r3,zero,20086b64 <__flash_rwdata_start+0xffff4d68>
20086b80:	900b883a 	mov	r5,r18
20086b84:	880d883a 	mov	r6,r17
20086b88:	9809883a 	mov	r4,r19
20086b8c:	00869240 	call	20086924 <__multiply>
20086b90:	90001b26 	beq	r18,zero,20086c00 <__pow5mult+0xe0>
20086b94:	91c00117 	ldw	r7,4(r18)
20086b98:	98c01317 	ldw	r3,76(r19)
20086b9c:	8021d07a 	srai	r16,r16,1
20086ba0:	39cf883a 	add	r7,r7,r7
20086ba4:	39cf883a 	add	r7,r7,r7
20086ba8:	19c7883a 	add	r3,r3,r7
20086bac:	19000017 	ldw	r4,0(r3)
20086bb0:	91000015 	stw	r4,0(r18)
20086bb4:	1c800015 	stw	r18,0(r3)
20086bb8:	1025883a 	mov	r18,r2
20086bbc:	803feb1e 	bne	r16,zero,20086b6c <__flash_rwdata_start+0xffff4d70>
20086bc0:	9005883a 	mov	r2,r18
20086bc4:	dfc00517 	ldw	ra,20(sp)
20086bc8:	dd000417 	ldw	r20,16(sp)
20086bcc:	dcc00317 	ldw	r19,12(sp)
20086bd0:	dc800217 	ldw	r18,8(sp)
20086bd4:	dc400117 	ldw	r17,4(sp)
20086bd8:	dc000017 	ldw	r16,0(sp)
20086bdc:	dec00604 	addi	sp,sp,24
20086be0:	f800283a 	ret
20086be4:	9809883a 	mov	r4,r19
20086be8:	880b883a 	mov	r5,r17
20086bec:	880d883a 	mov	r6,r17
20086bf0:	00869240 	call	20086924 <__multiply>
20086bf4:	88800015 	stw	r2,0(r17)
20086bf8:	10000015 	stw	zero,0(r2)
20086bfc:	003fdd06 	br	20086b74 <__flash_rwdata_start+0xffff4d78>
20086c00:	1025883a 	mov	r18,r2
20086c04:	003fd706 	br	20086b64 <__flash_rwdata_start+0xffff4d68>
20086c08:	10bfffc4 	addi	r2,r2,-1
20086c0c:	1085883a 	add	r2,r2,r2
20086c10:	00c00034 	movhi	r3,0
20086c14:	18c03b04 	addi	r3,r3,236
20086c18:	1085883a 	add	r2,r2,r2
20086c1c:	1885883a 	add	r2,r3,r2
20086c20:	11800017 	ldw	r6,0(r2)
20086c24:	000f883a 	mov	r7,zero
20086c28:	00865ac0 	call	200865ac <__multadd>
20086c2c:	1025883a 	mov	r18,r2
20086c30:	003fc706 	br	20086b50 <__flash_rwdata_start+0xffff4d54>
20086c34:	05000044 	movi	r20,1
20086c38:	9809883a 	mov	r4,r19
20086c3c:	a00b883a 	mov	r5,r20
20086c40:	00864dc0 	call	200864dc <_Balloc>
20086c44:	1023883a 	mov	r17,r2
20086c48:	00809c44 	movi	r2,625
20086c4c:	88800515 	stw	r2,20(r17)
20086c50:	8d000415 	stw	r20,16(r17)
20086c54:	9c401215 	stw	r17,72(r19)
20086c58:	88000015 	stw	zero,0(r17)
20086c5c:	003fc606 	br	20086b78 <__flash_rwdata_start+0xffff4d7c>

20086c60 <__lshift>:
20086c60:	defff904 	addi	sp,sp,-28
20086c64:	dd000415 	stw	r20,16(sp)
20086c68:	dcc00315 	stw	r19,12(sp)
20086c6c:	3029d17a 	srai	r20,r6,5
20086c70:	2cc00417 	ldw	r19,16(r5)
20086c74:	28800217 	ldw	r2,8(r5)
20086c78:	dd400515 	stw	r21,20(sp)
20086c7c:	a4e7883a 	add	r19,r20,r19
20086c80:	dc800215 	stw	r18,8(sp)
20086c84:	dc400115 	stw	r17,4(sp)
20086c88:	dc000015 	stw	r16,0(sp)
20086c8c:	dfc00615 	stw	ra,24(sp)
20086c90:	9c000044 	addi	r16,r19,1
20086c94:	2823883a 	mov	r17,r5
20086c98:	302b883a 	mov	r21,r6
20086c9c:	2025883a 	mov	r18,r4
20086ca0:	29400117 	ldw	r5,4(r5)
20086ca4:	1400030e 	bge	r2,r16,20086cb4 <__lshift+0x54>
20086ca8:	1085883a 	add	r2,r2,r2
20086cac:	29400044 	addi	r5,r5,1
20086cb0:	143ffd16 	blt	r2,r16,20086ca8 <__flash_rwdata_start+0xffff4eac>
20086cb4:	9009883a 	mov	r4,r18
20086cb8:	00864dc0 	call	200864dc <_Balloc>
20086cbc:	11c00504 	addi	r7,r2,20
20086cc0:	0500090e 	bge	zero,r20,20086ce8 <__lshift+0x88>
20086cc4:	3811883a 	mov	r8,r7
20086cc8:	0007883a 	mov	r3,zero
20086ccc:	40000015 	stw	zero,0(r8)
20086cd0:	18c00044 	addi	r3,r3,1
20086cd4:	42000104 	addi	r8,r8,4
20086cd8:	1d3ffc1e 	bne	r3,r20,20086ccc <__flash_rwdata_start+0xffff4ed0>
20086cdc:	18c7883a 	add	r3,r3,r3
20086ce0:	18c7883a 	add	r3,r3,r3
20086ce4:	38cf883a 	add	r7,r7,r3
20086ce8:	89000417 	ldw	r4,16(r17)
20086cec:	88c00504 	addi	r3,r17,20
20086cf0:	a98007cc 	andi	r6,r21,31
20086cf4:	2109883a 	add	r4,r4,r4
20086cf8:	2109883a 	add	r4,r4,r4
20086cfc:	1909883a 	add	r4,r3,r4
20086d00:	30002326 	beq	r6,zero,20086d90 <__lshift+0x130>
20086d04:	01400804 	movi	r5,32
20086d08:	298bc83a 	sub	r5,r5,r6
20086d0c:	0013883a 	mov	r9,zero
20086d10:	1a000017 	ldw	r8,0(r3)
20086d14:	3815883a 	mov	r10,r7
20086d18:	39c00104 	addi	r7,r7,4
20086d1c:	4190983a 	sll	r8,r8,r6
20086d20:	18c00104 	addi	r3,r3,4
20086d24:	4a10b03a 	or	r8,r9,r8
20086d28:	3a3fff15 	stw	r8,-4(r7)
20086d2c:	1a3fff17 	ldw	r8,-4(r3)
20086d30:	4152d83a 	srl	r9,r8,r5
20086d34:	193ff636 	bltu	r3,r4,20086d10 <__flash_rwdata_start+0xffff4f14>
20086d38:	52400115 	stw	r9,4(r10)
20086d3c:	48001a1e 	bne	r9,zero,20086da8 <__lshift+0x148>
20086d40:	843fffc4 	addi	r16,r16,-1
20086d44:	14000415 	stw	r16,16(r2)
20086d48:	88000826 	beq	r17,zero,20086d6c <__lshift+0x10c>
20086d4c:	89000117 	ldw	r4,4(r17)
20086d50:	90c01317 	ldw	r3,76(r18)
20086d54:	2109883a 	add	r4,r4,r4
20086d58:	2109883a 	add	r4,r4,r4
20086d5c:	1907883a 	add	r3,r3,r4
20086d60:	19000017 	ldw	r4,0(r3)
20086d64:	89000015 	stw	r4,0(r17)
20086d68:	1c400015 	stw	r17,0(r3)
20086d6c:	dfc00617 	ldw	ra,24(sp)
20086d70:	dd400517 	ldw	r21,20(sp)
20086d74:	dd000417 	ldw	r20,16(sp)
20086d78:	dcc00317 	ldw	r19,12(sp)
20086d7c:	dc800217 	ldw	r18,8(sp)
20086d80:	dc400117 	ldw	r17,4(sp)
20086d84:	dc000017 	ldw	r16,0(sp)
20086d88:	dec00704 	addi	sp,sp,28
20086d8c:	f800283a 	ret
20086d90:	19400017 	ldw	r5,0(r3)
20086d94:	39c00104 	addi	r7,r7,4
20086d98:	18c00104 	addi	r3,r3,4
20086d9c:	397fff15 	stw	r5,-4(r7)
20086da0:	193ffb36 	bltu	r3,r4,20086d90 <__flash_rwdata_start+0xffff4f94>
20086da4:	003fe606 	br	20086d40 <__flash_rwdata_start+0xffff4f44>
20086da8:	9c000084 	addi	r16,r19,2
20086dac:	003fe406 	br	20086d40 <__flash_rwdata_start+0xffff4f44>

20086db0 <__mcmp>:
20086db0:	20800417 	ldw	r2,16(r4)
20086db4:	28c00417 	ldw	r3,16(r5)
20086db8:	10c5c83a 	sub	r2,r2,r3
20086dbc:	1000111e 	bne	r2,zero,20086e04 <__mcmp+0x54>
20086dc0:	18c7883a 	add	r3,r3,r3
20086dc4:	18c7883a 	add	r3,r3,r3
20086dc8:	21000504 	addi	r4,r4,20
20086dcc:	29400504 	addi	r5,r5,20
20086dd0:	20c5883a 	add	r2,r4,r3
20086dd4:	28cb883a 	add	r5,r5,r3
20086dd8:	00000106 	br	20086de0 <__mcmp+0x30>
20086ddc:	20800a2e 	bgeu	r4,r2,20086e08 <__mcmp+0x58>
20086de0:	10bfff04 	addi	r2,r2,-4
20086de4:	297fff04 	addi	r5,r5,-4
20086de8:	11800017 	ldw	r6,0(r2)
20086dec:	28c00017 	ldw	r3,0(r5)
20086df0:	30fffa26 	beq	r6,r3,20086ddc <__flash_rwdata_start+0xffff4fe0>
20086df4:	30c00236 	bltu	r6,r3,20086e00 <__mcmp+0x50>
20086df8:	00800044 	movi	r2,1
20086dfc:	f800283a 	ret
20086e00:	00bfffc4 	movi	r2,-1
20086e04:	f800283a 	ret
20086e08:	0005883a 	mov	r2,zero
20086e0c:	f800283a 	ret

20086e10 <__mdiff>:
20086e10:	defffb04 	addi	sp,sp,-20
20086e14:	dc000015 	stw	r16,0(sp)
20086e18:	2821883a 	mov	r16,r5
20086e1c:	dcc00315 	stw	r19,12(sp)
20086e20:	300b883a 	mov	r5,r6
20086e24:	2027883a 	mov	r19,r4
20086e28:	8009883a 	mov	r4,r16
20086e2c:	dc800215 	stw	r18,8(sp)
20086e30:	dfc00415 	stw	ra,16(sp)
20086e34:	dc400115 	stw	r17,4(sp)
20086e38:	3025883a 	mov	r18,r6
20086e3c:	0086db00 	call	20086db0 <__mcmp>
20086e40:	10005226 	beq	r2,zero,20086f8c <__mdiff+0x17c>
20086e44:	10004c16 	blt	r2,zero,20086f78 <__mdiff+0x168>
20086e48:	0023883a 	mov	r17,zero
20086e4c:	81400117 	ldw	r5,4(r16)
20086e50:	9809883a 	mov	r4,r19
20086e54:	00864dc0 	call	200864dc <_Balloc>
20086e58:	83400417 	ldw	r13,16(r16)
20086e5c:	93800417 	ldw	r14,16(r18)
20086e60:	81000504 	addi	r4,r16,20
20086e64:	6b59883a 	add	r12,r13,r13
20086e68:	739d883a 	add	r14,r14,r14
20086e6c:	6319883a 	add	r12,r12,r12
20086e70:	91800504 	addi	r6,r18,20
20086e74:	739d883a 	add	r14,r14,r14
20086e78:	14400315 	stw	r17,12(r2)
20086e7c:	2319883a 	add	r12,r4,r12
20086e80:	339d883a 	add	r14,r6,r14
20086e84:	12400504 	addi	r9,r2,20
20086e88:	0007883a 	mov	r3,zero
20086e8c:	22000017 	ldw	r8,0(r4)
20086e90:	32800017 	ldw	r10,0(r6)
20086e94:	4ac00104 	addi	r11,r9,4
20086e98:	41ffffcc 	andi	r7,r8,65535
20086e9c:	38c7883a 	add	r3,r7,r3
20086ea0:	51ffffcc 	andi	r7,r10,65535
20086ea4:	19cfc83a 	sub	r7,r3,r7
20086ea8:	4010d43a 	srli	r8,r8,16
20086eac:	5014d43a 	srli	r10,r10,16
20086eb0:	3807d43a 	srai	r3,r7,16
20086eb4:	39ffffcc 	andi	r7,r7,65535
20086eb8:	4291c83a 	sub	r8,r8,r10
20086ebc:	40c7883a 	add	r3,r8,r3
20086ec0:	1810943a 	slli	r8,r3,16
20086ec4:	31800104 	addi	r6,r6,4
20086ec8:	21000104 	addi	r4,r4,4
20086ecc:	41ceb03a 	or	r7,r8,r7
20086ed0:	49c00015 	stw	r7,0(r9)
20086ed4:	1807d43a 	srai	r3,r3,16
20086ed8:	580b883a 	mov	r5,r11
20086edc:	5813883a 	mov	r9,r11
20086ee0:	33bfea36 	bltu	r6,r14,20086e8c <__flash_rwdata_start+0xffff5090>
20086ee4:	2011883a 	mov	r8,r4
20086ee8:	2300152e 	bgeu	r4,r12,20086f40 <__mdiff+0x130>
20086eec:	21400017 	ldw	r5,0(r4)
20086ef0:	4a400104 	addi	r9,r9,4
20086ef4:	21000104 	addi	r4,r4,4
20086ef8:	29ffffcc 	andi	r7,r5,65535
20086efc:	38c7883a 	add	r3,r7,r3
20086f00:	280ad43a 	srli	r5,r5,16
20086f04:	180dd43a 	srai	r6,r3,16
20086f08:	19ffffcc 	andi	r7,r3,65535
20086f0c:	3147883a 	add	r3,r6,r5
20086f10:	180a943a 	slli	r5,r3,16
20086f14:	1807d43a 	srai	r3,r3,16
20086f18:	29ceb03a 	or	r7,r5,r7
20086f1c:	49ffff15 	stw	r7,-4(r9)
20086f20:	233ff236 	bltu	r4,r12,20086eec <__flash_rwdata_start+0xffff50f0>
20086f24:	0206303a 	nor	r3,zero,r8
20086f28:	1b07883a 	add	r3,r3,r12
20086f2c:	1806d0ba 	srli	r3,r3,2
20086f30:	18c00044 	addi	r3,r3,1
20086f34:	18c7883a 	add	r3,r3,r3
20086f38:	18c7883a 	add	r3,r3,r3
20086f3c:	58cb883a 	add	r5,r11,r3
20086f40:	28ffff04 	addi	r3,r5,-4
20086f44:	3800041e 	bne	r7,zero,20086f58 <__mdiff+0x148>
20086f48:	18ffff04 	addi	r3,r3,-4
20086f4c:	19000017 	ldw	r4,0(r3)
20086f50:	6b7fffc4 	addi	r13,r13,-1
20086f54:	203ffc26 	beq	r4,zero,20086f48 <__flash_rwdata_start+0xffff514c>
20086f58:	13400415 	stw	r13,16(r2)
20086f5c:	dfc00417 	ldw	ra,16(sp)
20086f60:	dcc00317 	ldw	r19,12(sp)
20086f64:	dc800217 	ldw	r18,8(sp)
20086f68:	dc400117 	ldw	r17,4(sp)
20086f6c:	dc000017 	ldw	r16,0(sp)
20086f70:	dec00504 	addi	sp,sp,20
20086f74:	f800283a 	ret
20086f78:	8005883a 	mov	r2,r16
20086f7c:	04400044 	movi	r17,1
20086f80:	9021883a 	mov	r16,r18
20086f84:	1025883a 	mov	r18,r2
20086f88:	003fb006 	br	20086e4c <__flash_rwdata_start+0xffff5050>
20086f8c:	9809883a 	mov	r4,r19
20086f90:	000b883a 	mov	r5,zero
20086f94:	00864dc0 	call	200864dc <_Balloc>
20086f98:	00c00044 	movi	r3,1
20086f9c:	10c00415 	stw	r3,16(r2)
20086fa0:	10000515 	stw	zero,20(r2)
20086fa4:	003fed06 	br	20086f5c <__flash_rwdata_start+0xffff5160>

20086fa8 <__ulp>:
20086fa8:	295ffc2c 	andhi	r5,r5,32752
20086fac:	00bf3034 	movhi	r2,64704
20086fb0:	2887883a 	add	r3,r5,r2
20086fb4:	00c0020e 	bge	zero,r3,20086fc0 <__ulp+0x18>
20086fb8:	0005883a 	mov	r2,zero
20086fbc:	f800283a 	ret
20086fc0:	00c7c83a 	sub	r3,zero,r3
20086fc4:	180bd53a 	srai	r5,r3,20
20086fc8:	008004c4 	movi	r2,19
20086fcc:	11400a0e 	bge	r2,r5,20086ff8 <__ulp+0x50>
20086fd0:	00800c84 	movi	r2,50
20086fd4:	0007883a 	mov	r3,zero
20086fd8:	11400516 	blt	r2,r5,20086ff0 <__ulp+0x48>
20086fdc:	00800cc4 	movi	r2,51
20086fe0:	114bc83a 	sub	r5,r2,r5
20086fe4:	00800044 	movi	r2,1
20086fe8:	1144983a 	sll	r2,r2,r5
20086fec:	f800283a 	ret
20086ff0:	00800044 	movi	r2,1
20086ff4:	f800283a 	ret
20086ff8:	00800234 	movhi	r2,8
20086ffc:	1147d83a 	sra	r3,r2,r5
20087000:	0005883a 	mov	r2,zero
20087004:	f800283a 	ret

20087008 <__b2d>:
20087008:	defffa04 	addi	sp,sp,-24
2008700c:	dc000015 	stw	r16,0(sp)
20087010:	24000417 	ldw	r16,16(r4)
20087014:	dc400115 	stw	r17,4(sp)
20087018:	24400504 	addi	r17,r4,20
2008701c:	8421883a 	add	r16,r16,r16
20087020:	8421883a 	add	r16,r16,r16
20087024:	8c21883a 	add	r16,r17,r16
20087028:	dc800215 	stw	r18,8(sp)
2008702c:	84bfff17 	ldw	r18,-4(r16)
20087030:	dd000415 	stw	r20,16(sp)
20087034:	dcc00315 	stw	r19,12(sp)
20087038:	9009883a 	mov	r4,r18
2008703c:	2829883a 	mov	r20,r5
20087040:	dfc00515 	stw	ra,20(sp)
20087044:	00867d00 	call	200867d0 <__hi0bits>
20087048:	00c00804 	movi	r3,32
2008704c:	1887c83a 	sub	r3,r3,r2
20087050:	a0c00015 	stw	r3,0(r20)
20087054:	00c00284 	movi	r3,10
20087058:	84ffff04 	addi	r19,r16,-4
2008705c:	18801216 	blt	r3,r2,200870a8 <__b2d+0xa0>
20087060:	014002c4 	movi	r5,11
20087064:	2889c83a 	sub	r4,r5,r2
20087068:	9106d83a 	srl	r3,r18,r4
2008706c:	18cffc34 	orhi	r3,r3,16368
20087070:	8cc0282e 	bgeu	r17,r19,20087114 <__b2d+0x10c>
20087074:	817ffe17 	ldw	r5,-8(r16)
20087078:	290ad83a 	srl	r5,r5,r4
2008707c:	10800544 	addi	r2,r2,21
20087080:	9084983a 	sll	r2,r18,r2
20087084:	2884b03a 	or	r2,r5,r2
20087088:	dfc00517 	ldw	ra,20(sp)
2008708c:	dd000417 	ldw	r20,16(sp)
20087090:	dcc00317 	ldw	r19,12(sp)
20087094:	dc800217 	ldw	r18,8(sp)
20087098:	dc400117 	ldw	r17,4(sp)
2008709c:	dc000017 	ldw	r16,0(sp)
200870a0:	dec00604 	addi	sp,sp,24
200870a4:	f800283a 	ret
200870a8:	113ffd44 	addi	r4,r2,-11
200870ac:	8cc00f2e 	bgeu	r17,r19,200870ec <__b2d+0xe4>
200870b0:	81bffe04 	addi	r6,r16,-8
200870b4:	817ffe17 	ldw	r5,-8(r16)
200870b8:	20001326 	beq	r4,zero,20087108 <__b2d+0x100>
200870bc:	00c00ac4 	movi	r3,43
200870c0:	1885c83a 	sub	r2,r3,r2
200870c4:	2886d83a 	srl	r3,r5,r2
200870c8:	9124983a 	sll	r18,r18,r4
200870cc:	90e4b03a 	or	r18,r18,r3
200870d0:	90cffc34 	orhi	r3,r18,16368
200870d4:	8980112e 	bgeu	r17,r6,2008711c <__b2d+0x114>
200870d8:	81bffd17 	ldw	r6,-12(r16)
200870dc:	308cd83a 	srl	r6,r6,r2
200870e0:	2904983a 	sll	r2,r5,r4
200870e4:	1184b03a 	or	r2,r2,r6
200870e8:	003fe706 	br	20087088 <__flash_rwdata_start+0xffff528c>
200870ec:	20000526 	beq	r4,zero,20087104 <__b2d+0xfc>
200870f0:	9124983a 	sll	r18,r18,r4
200870f4:	000d883a 	mov	r6,zero
200870f8:	000b883a 	mov	r5,zero
200870fc:	90cffc34 	orhi	r3,r18,16368
20087100:	003ff706 	br	200870e0 <__flash_rwdata_start+0xffff52e4>
20087104:	000b883a 	mov	r5,zero
20087108:	90cffc34 	orhi	r3,r18,16368
2008710c:	2805883a 	mov	r2,r5
20087110:	003fdd06 	br	20087088 <__flash_rwdata_start+0xffff528c>
20087114:	000b883a 	mov	r5,zero
20087118:	003fd806 	br	2008707c <__flash_rwdata_start+0xffff5280>
2008711c:	000d883a 	mov	r6,zero
20087120:	003fef06 	br	200870e0 <__flash_rwdata_start+0xffff52e4>

20087124 <__d2b>:
20087124:	defff704 	addi	sp,sp,-36
20087128:	dc000215 	stw	r16,8(sp)
2008712c:	3021883a 	mov	r16,r6
20087130:	dc400315 	stw	r17,12(sp)
20087134:	8022907a 	slli	r17,r16,1
20087138:	dd400715 	stw	r21,28(sp)
2008713c:	282b883a 	mov	r21,r5
20087140:	01400044 	movi	r5,1
20087144:	dd000615 	stw	r20,24(sp)
20087148:	dcc00515 	stw	r19,20(sp)
2008714c:	dc800415 	stw	r18,16(sp)
20087150:	dfc00815 	stw	ra,32(sp)
20087154:	3829883a 	mov	r20,r7
20087158:	dc800917 	ldw	r18,36(sp)
2008715c:	8822d57a 	srli	r17,r17,21
20087160:	00864dc0 	call	200864dc <_Balloc>
20087164:	1027883a 	mov	r19,r2
20087168:	00800434 	movhi	r2,16
2008716c:	10bfffc4 	addi	r2,r2,-1
20087170:	808c703a 	and	r6,r16,r2
20087174:	88000126 	beq	r17,zero,2008717c <__d2b+0x58>
20087178:	31800434 	orhi	r6,r6,16
2008717c:	d9800015 	stw	r6,0(sp)
20087180:	a8001f26 	beq	r21,zero,20087200 <__d2b+0xdc>
20087184:	d9000104 	addi	r4,sp,4
20087188:	dd400115 	stw	r21,4(sp)
2008718c:	00868380 	call	20086838 <__lo0bits>
20087190:	d8c00017 	ldw	r3,0(sp)
20087194:	1000291e 	bne	r2,zero,2008723c <__d2b+0x118>
20087198:	d9000117 	ldw	r4,4(sp)
2008719c:	99000515 	stw	r4,20(r19)
200871a0:	1820c03a 	cmpne	r16,r3,zero
200871a4:	84000044 	addi	r16,r16,1
200871a8:	98c00615 	stw	r3,24(r19)
200871ac:	9c000415 	stw	r16,16(r19)
200871b0:	88001b1e 	bne	r17,zero,20087220 <__d2b+0xfc>
200871b4:	800690ba 	slli	r3,r16,2
200871b8:	10bef384 	addi	r2,r2,-1074
200871bc:	a0800015 	stw	r2,0(r20)
200871c0:	98c5883a 	add	r2,r19,r3
200871c4:	11000417 	ldw	r4,16(r2)
200871c8:	8020917a 	slli	r16,r16,5
200871cc:	00867d00 	call	200867d0 <__hi0bits>
200871d0:	8085c83a 	sub	r2,r16,r2
200871d4:	90800015 	stw	r2,0(r18)
200871d8:	9805883a 	mov	r2,r19
200871dc:	dfc00817 	ldw	ra,32(sp)
200871e0:	dd400717 	ldw	r21,28(sp)
200871e4:	dd000617 	ldw	r20,24(sp)
200871e8:	dcc00517 	ldw	r19,20(sp)
200871ec:	dc800417 	ldw	r18,16(sp)
200871f0:	dc400317 	ldw	r17,12(sp)
200871f4:	dc000217 	ldw	r16,8(sp)
200871f8:	dec00904 	addi	sp,sp,36
200871fc:	f800283a 	ret
20087200:	d809883a 	mov	r4,sp
20087204:	00868380 	call	20086838 <__lo0bits>
20087208:	d8c00017 	ldw	r3,0(sp)
2008720c:	04000044 	movi	r16,1
20087210:	9c000415 	stw	r16,16(r19)
20087214:	98c00515 	stw	r3,20(r19)
20087218:	10800804 	addi	r2,r2,32
2008721c:	883fe526 	beq	r17,zero,200871b4 <__flash_rwdata_start+0xffff53b8>
20087220:	8c7ef344 	addi	r17,r17,-1075
20087224:	88a3883a 	add	r17,r17,r2
20087228:	00c00d44 	movi	r3,53
2008722c:	a4400015 	stw	r17,0(r20)
20087230:	1885c83a 	sub	r2,r3,r2
20087234:	90800015 	stw	r2,0(r18)
20087238:	003fe706 	br	200871d8 <__flash_rwdata_start+0xffff53dc>
2008723c:	01000804 	movi	r4,32
20087240:	2089c83a 	sub	r4,r4,r2
20087244:	1908983a 	sll	r4,r3,r4
20087248:	d9400117 	ldw	r5,4(sp)
2008724c:	1886d83a 	srl	r3,r3,r2
20087250:	2148b03a 	or	r4,r4,r5
20087254:	99000515 	stw	r4,20(r19)
20087258:	d8c00015 	stw	r3,0(sp)
2008725c:	003fd006 	br	200871a0 <__flash_rwdata_start+0xffff53a4>

20087260 <__ratio>:
20087260:	defff904 	addi	sp,sp,-28
20087264:	dc400315 	stw	r17,12(sp)
20087268:	2823883a 	mov	r17,r5
2008726c:	d9400104 	addi	r5,sp,4
20087270:	dfc00615 	stw	ra,24(sp)
20087274:	dcc00515 	stw	r19,20(sp)
20087278:	dc800415 	stw	r18,16(sp)
2008727c:	2027883a 	mov	r19,r4
20087280:	dc000215 	stw	r16,8(sp)
20087284:	00870080 	call	20087008 <__b2d>
20087288:	8809883a 	mov	r4,r17
2008728c:	d80b883a 	mov	r5,sp
20087290:	1025883a 	mov	r18,r2
20087294:	1821883a 	mov	r16,r3
20087298:	00870080 	call	20087008 <__b2d>
2008729c:	8a400417 	ldw	r9,16(r17)
200872a0:	9a000417 	ldw	r8,16(r19)
200872a4:	100d883a 	mov	r6,r2
200872a8:	d8800017 	ldw	r2,0(sp)
200872ac:	4251c83a 	sub	r8,r8,r9
200872b0:	4012917a 	slli	r9,r8,5
200872b4:	da000117 	ldw	r8,4(sp)
200872b8:	4091c83a 	sub	r8,r8,r2
200872bc:	4251883a 	add	r8,r8,r9
200872c0:	02000d0e 	bge	zero,r8,200872f8 <__ratio+0x98>
200872c4:	4010953a 	slli	r8,r8,20
200872c8:	4421883a 	add	r16,r8,r16
200872cc:	9009883a 	mov	r4,r18
200872d0:	800b883a 	mov	r5,r16
200872d4:	180f883a 	mov	r7,r3
200872d8:	008b0780 	call	2008b078 <__divdf3>
200872dc:	dfc00617 	ldw	ra,24(sp)
200872e0:	dcc00517 	ldw	r19,20(sp)
200872e4:	dc800417 	ldw	r18,16(sp)
200872e8:	dc400317 	ldw	r17,12(sp)
200872ec:	dc000217 	ldw	r16,8(sp)
200872f0:	dec00704 	addi	sp,sp,28
200872f4:	f800283a 	ret
200872f8:	4010953a 	slli	r8,r8,20
200872fc:	1a07c83a 	sub	r3,r3,r8
20087300:	003ff206 	br	200872cc <__flash_rwdata_start+0xffff54d0>

20087304 <_mprec_log10>:
20087304:	defffe04 	addi	sp,sp,-8
20087308:	dc000015 	stw	r16,0(sp)
2008730c:	dfc00115 	stw	ra,4(sp)
20087310:	008005c4 	movi	r2,23
20087314:	2021883a 	mov	r16,r4
20087318:	11000d0e 	bge	r2,r4,20087350 <_mprec_log10+0x4c>
2008731c:	0005883a 	mov	r2,zero
20087320:	00cffc34 	movhi	r3,16368
20087324:	843fffc4 	addi	r16,r16,-1
20087328:	1009883a 	mov	r4,r2
2008732c:	180b883a 	mov	r5,r3
20087330:	000d883a 	mov	r6,zero
20087334:	01d00934 	movhi	r7,16420
20087338:	008bb880 	call	2008bb88 <__muldf3>
2008733c:	803ff91e 	bne	r16,zero,20087324 <__flash_rwdata_start+0xffff5528>
20087340:	dfc00117 	ldw	ra,4(sp)
20087344:	dc000017 	ldw	r16,0(sp)
20087348:	dec00204 	addi	sp,sp,8
2008734c:	f800283a 	ret
20087350:	202090fa 	slli	r16,r4,3
20087354:	00800034 	movhi	r2,0
20087358:	10805204 	addi	r2,r2,328
2008735c:	1421883a 	add	r16,r2,r16
20087360:	80800017 	ldw	r2,0(r16)
20087364:	80c00117 	ldw	r3,4(r16)
20087368:	dfc00117 	ldw	ra,4(sp)
2008736c:	dc000017 	ldw	r16,0(sp)
20087370:	dec00204 	addi	sp,sp,8
20087374:	f800283a 	ret

20087378 <__copybits>:
20087378:	297fffc4 	addi	r5,r5,-1
2008737c:	280fd17a 	srai	r7,r5,5
20087380:	30c00417 	ldw	r3,16(r6)
20087384:	30800504 	addi	r2,r6,20
20087388:	39c00044 	addi	r7,r7,1
2008738c:	18c7883a 	add	r3,r3,r3
20087390:	39cf883a 	add	r7,r7,r7
20087394:	18c7883a 	add	r3,r3,r3
20087398:	39cf883a 	add	r7,r7,r7
2008739c:	10c7883a 	add	r3,r2,r3
200873a0:	21cf883a 	add	r7,r4,r7
200873a4:	10c00d2e 	bgeu	r2,r3,200873dc <__copybits+0x64>
200873a8:	200b883a 	mov	r5,r4
200873ac:	12000017 	ldw	r8,0(r2)
200873b0:	29400104 	addi	r5,r5,4
200873b4:	10800104 	addi	r2,r2,4
200873b8:	2a3fff15 	stw	r8,-4(r5)
200873bc:	10fffb36 	bltu	r2,r3,200873ac <__flash_rwdata_start+0xffff55b0>
200873c0:	1985c83a 	sub	r2,r3,r6
200873c4:	10bffac4 	addi	r2,r2,-21
200873c8:	1004d0ba 	srli	r2,r2,2
200873cc:	10800044 	addi	r2,r2,1
200873d0:	1085883a 	add	r2,r2,r2
200873d4:	1085883a 	add	r2,r2,r2
200873d8:	2089883a 	add	r4,r4,r2
200873dc:	21c0032e 	bgeu	r4,r7,200873ec <__copybits+0x74>
200873e0:	20000015 	stw	zero,0(r4)
200873e4:	21000104 	addi	r4,r4,4
200873e8:	21fffd36 	bltu	r4,r7,200873e0 <__flash_rwdata_start+0xffff55e4>
200873ec:	f800283a 	ret

200873f0 <__any_on>:
200873f0:	20c00417 	ldw	r3,16(r4)
200873f4:	2805d17a 	srai	r2,r5,5
200873f8:	21000504 	addi	r4,r4,20
200873fc:	18800d0e 	bge	r3,r2,20087434 <__any_on+0x44>
20087400:	18c7883a 	add	r3,r3,r3
20087404:	18c7883a 	add	r3,r3,r3
20087408:	20c7883a 	add	r3,r4,r3
2008740c:	20c0192e 	bgeu	r4,r3,20087474 <__any_on+0x84>
20087410:	18bfff17 	ldw	r2,-4(r3)
20087414:	18ffff04 	addi	r3,r3,-4
20087418:	1000041e 	bne	r2,zero,2008742c <__any_on+0x3c>
2008741c:	20c0142e 	bgeu	r4,r3,20087470 <__any_on+0x80>
20087420:	18ffff04 	addi	r3,r3,-4
20087424:	19400017 	ldw	r5,0(r3)
20087428:	283ffc26 	beq	r5,zero,2008741c <__flash_rwdata_start+0xffff5620>
2008742c:	00800044 	movi	r2,1
20087430:	f800283a 	ret
20087434:	10c00a0e 	bge	r2,r3,20087460 <__any_on+0x70>
20087438:	1085883a 	add	r2,r2,r2
2008743c:	1085883a 	add	r2,r2,r2
20087440:	294007cc 	andi	r5,r5,31
20087444:	2087883a 	add	r3,r4,r2
20087448:	283ff026 	beq	r5,zero,2008740c <__flash_rwdata_start+0xffff5610>
2008744c:	19800017 	ldw	r6,0(r3)
20087450:	3144d83a 	srl	r2,r6,r5
20087454:	114a983a 	sll	r5,r2,r5
20087458:	29bff41e 	bne	r5,r6,2008742c <__flash_rwdata_start+0xffff5630>
2008745c:	003feb06 	br	2008740c <__flash_rwdata_start+0xffff5610>
20087460:	1085883a 	add	r2,r2,r2
20087464:	1085883a 	add	r2,r2,r2
20087468:	2087883a 	add	r3,r4,r2
2008746c:	003fe706 	br	2008740c <__flash_rwdata_start+0xffff5610>
20087470:	f800283a 	ret
20087474:	0005883a 	mov	r2,zero
20087478:	f800283a 	ret

2008747c <_putc_r>:
2008747c:	defffc04 	addi	sp,sp,-16
20087480:	dc000215 	stw	r16,8(sp)
20087484:	dfc00315 	stw	ra,12(sp)
20087488:	2021883a 	mov	r16,r4
2008748c:	20000226 	beq	r4,zero,20087498 <_putc_r+0x1c>
20087490:	20800e17 	ldw	r2,56(r4)
20087494:	10001b26 	beq	r2,zero,20087504 <_putc_r+0x88>
20087498:	30800217 	ldw	r2,8(r6)
2008749c:	10bfffc4 	addi	r2,r2,-1
200874a0:	30800215 	stw	r2,8(r6)
200874a4:	10000a16 	blt	r2,zero,200874d0 <_putc_r+0x54>
200874a8:	30800017 	ldw	r2,0(r6)
200874ac:	11400005 	stb	r5,0(r2)
200874b0:	30800017 	ldw	r2,0(r6)
200874b4:	10c00044 	addi	r3,r2,1
200874b8:	30c00015 	stw	r3,0(r6)
200874bc:	10800003 	ldbu	r2,0(r2)
200874c0:	dfc00317 	ldw	ra,12(sp)
200874c4:	dc000217 	ldw	r16,8(sp)
200874c8:	dec00404 	addi	sp,sp,16
200874cc:	f800283a 	ret
200874d0:	30c00617 	ldw	r3,24(r6)
200874d4:	10c00616 	blt	r2,r3,200874f0 <_putc_r+0x74>
200874d8:	30800017 	ldw	r2,0(r6)
200874dc:	00c00284 	movi	r3,10
200874e0:	11400005 	stb	r5,0(r2)
200874e4:	30800017 	ldw	r2,0(r6)
200874e8:	11400003 	ldbu	r5,0(r2)
200874ec:	28fff11e 	bne	r5,r3,200874b4 <__flash_rwdata_start+0xffff56b8>
200874f0:	8009883a 	mov	r4,r16
200874f4:	dfc00317 	ldw	ra,12(sp)
200874f8:	dc000217 	ldw	r16,8(sp)
200874fc:	dec00404 	addi	sp,sp,16
20087500:	00892681 	jmpi	20089268 <__swbuf_r>
20087504:	d9400015 	stw	r5,0(sp)
20087508:	d9800115 	stw	r6,4(sp)
2008750c:	00852f80 	call	200852f8 <__sinit>
20087510:	d9800117 	ldw	r6,4(sp)
20087514:	d9400017 	ldw	r5,0(sp)
20087518:	003fdf06 	br	20087498 <__flash_rwdata_start+0xffff569c>

2008751c <putc>:
2008751c:	00800034 	movhi	r2,0
20087520:	defffc04 	addi	sp,sp,-16
20087524:	10895004 	addi	r2,r2,9536
20087528:	dc400115 	stw	r17,4(sp)
2008752c:	14400017 	ldw	r17,0(r2)
20087530:	dc800215 	stw	r18,8(sp)
20087534:	dc000015 	stw	r16,0(sp)
20087538:	dfc00315 	stw	ra,12(sp)
2008753c:	2025883a 	mov	r18,r4
20087540:	2821883a 	mov	r16,r5
20087544:	88000226 	beq	r17,zero,20087550 <putc+0x34>
20087548:	88800e17 	ldw	r2,56(r17)
2008754c:	10001a26 	beq	r2,zero,200875b8 <putc+0x9c>
20087550:	80800217 	ldw	r2,8(r16)
20087554:	10bfffc4 	addi	r2,r2,-1
20087558:	80800215 	stw	r2,8(r16)
2008755c:	10000c16 	blt	r2,zero,20087590 <putc+0x74>
20087560:	80800017 	ldw	r2,0(r16)
20087564:	14800005 	stb	r18,0(r2)
20087568:	80800017 	ldw	r2,0(r16)
2008756c:	10c00044 	addi	r3,r2,1
20087570:	80c00015 	stw	r3,0(r16)
20087574:	10800003 	ldbu	r2,0(r2)
20087578:	dfc00317 	ldw	ra,12(sp)
2008757c:	dc800217 	ldw	r18,8(sp)
20087580:	dc400117 	ldw	r17,4(sp)
20087584:	dc000017 	ldw	r16,0(sp)
20087588:	dec00404 	addi	sp,sp,16
2008758c:	f800283a 	ret
20087590:	80c00617 	ldw	r3,24(r16)
20087594:	10c00b16 	blt	r2,r3,200875c4 <putc+0xa8>
20087598:	80800017 	ldw	r2,0(r16)
2008759c:	00c00284 	movi	r3,10
200875a0:	14800005 	stb	r18,0(r2)
200875a4:	80800017 	ldw	r2,0(r16)
200875a8:	11400003 	ldbu	r5,0(r2)
200875ac:	28ffef1e 	bne	r5,r3,2008756c <__flash_rwdata_start+0xffff5770>
200875b0:	8809883a 	mov	r4,r17
200875b4:	00000506 	br	200875cc <putc+0xb0>
200875b8:	8809883a 	mov	r4,r17
200875bc:	00852f80 	call	200852f8 <__sinit>
200875c0:	003fe306 	br	20087550 <__flash_rwdata_start+0xffff5754>
200875c4:	8809883a 	mov	r4,r17
200875c8:	900b883a 	mov	r5,r18
200875cc:	800d883a 	mov	r6,r16
200875d0:	dfc00317 	ldw	ra,12(sp)
200875d4:	dc800217 	ldw	r18,8(sp)
200875d8:	dc400117 	ldw	r17,4(sp)
200875dc:	dc000017 	ldw	r16,0(sp)
200875e0:	dec00404 	addi	sp,sp,16
200875e4:	00892681 	jmpi	20089268 <__swbuf_r>

200875e8 <_realloc_r>:
200875e8:	defff604 	addi	sp,sp,-40
200875ec:	dd000415 	stw	r20,16(sp)
200875f0:	dc400115 	stw	r17,4(sp)
200875f4:	dfc00915 	stw	ra,36(sp)
200875f8:	df000815 	stw	fp,32(sp)
200875fc:	ddc00715 	stw	r23,28(sp)
20087600:	dd800615 	stw	r22,24(sp)
20087604:	dd400515 	stw	r21,20(sp)
20087608:	dcc00315 	stw	r19,12(sp)
2008760c:	dc800215 	stw	r18,8(sp)
20087610:	dc000015 	stw	r16,0(sp)
20087614:	2829883a 	mov	r20,r5
20087618:	3023883a 	mov	r17,r6
2008761c:	2800ad26 	beq	r5,zero,200878d4 <_realloc_r+0x2ec>
20087620:	2025883a 	mov	r18,r4
20087624:	008d4140 	call	2008d414 <__malloc_lock>
20087628:	a0ffff17 	ldw	r3,-4(r20)
2008762c:	043fff04 	movi	r16,-4
20087630:	890002c4 	addi	r4,r17,11
20087634:	01c00584 	movi	r7,22
20087638:	a57ffe04 	addi	r21,r20,-8
2008763c:	1c20703a 	and	r16,r3,r16
20087640:	39001d2e 	bgeu	r7,r4,200876b8 <_realloc_r+0xd0>
20087644:	05bffe04 	movi	r22,-8
20087648:	25ac703a 	and	r22,r4,r22
2008764c:	b00f883a 	mov	r7,r22
20087650:	b0006516 	blt	r22,zero,200877e8 <_realloc_r+0x200>
20087654:	b4406436 	bltu	r22,r17,200877e8 <_realloc_r+0x200>
20087658:	81c01a0e 	bge	r16,r7,200876c4 <_realloc_r+0xdc>
2008765c:	07000034 	movhi	fp,0
20087660:	e7030504 	addi	fp,fp,3092
20087664:	e1400217 	ldw	r5,8(fp)
20087668:	ac11883a 	add	r8,r21,r16
2008766c:	2a006226 	beq	r5,r8,200877f8 <_realloc_r+0x210>
20087670:	41800117 	ldw	r6,4(r8)
20087674:	027fff84 	movi	r9,-2
20087678:	3252703a 	and	r9,r6,r9
2008767c:	4253883a 	add	r9,r8,r9
20087680:	49000117 	ldw	r4,4(r9)
20087684:	2100004c 	andi	r4,r4,1
20087688:	2000281e 	bne	r4,zero,2008772c <_realloc_r+0x144>
2008768c:	00bfff04 	movi	r2,-4
20087690:	3084703a 	and	r2,r6,r2
20087694:	1409883a 	add	r4,r2,r16
20087698:	21c05e16 	blt	r4,r7,20087814 <_realloc_r+0x22c>
2008769c:	40800317 	ldw	r2,12(r8)
200876a0:	41400217 	ldw	r5,8(r8)
200876a4:	a023883a 	mov	r17,r20
200876a8:	2021883a 	mov	r16,r4
200876ac:	28800315 	stw	r2,12(r5)
200876b0:	11400215 	stw	r5,8(r2)
200876b4:	00000406 	br	200876c8 <_realloc_r+0xe0>
200876b8:	01c00404 	movi	r7,16
200876bc:	382d883a 	mov	r22,r7
200876c0:	003fe406 	br	20087654 <__flash_rwdata_start+0xffff5858>
200876c4:	a023883a 	mov	r17,r20
200876c8:	858fc83a 	sub	r7,r16,r22
200876cc:	008003c4 	movi	r2,15
200876d0:	18c0004c 	andi	r3,r3,1
200876d4:	11c07236 	bltu	r2,r7,200878a0 <_realloc_r+0x2b8>
200876d8:	1c06b03a 	or	r3,r3,r16
200876dc:	a8c00115 	stw	r3,4(r21)
200876e0:	ac21883a 	add	r16,r21,r16
200876e4:	80800117 	ldw	r2,4(r16)
200876e8:	10800054 	ori	r2,r2,1
200876ec:	80800115 	stw	r2,4(r16)
200876f0:	9009883a 	mov	r4,r18
200876f4:	008d4340 	call	2008d434 <__malloc_unlock>
200876f8:	8805883a 	mov	r2,r17
200876fc:	dfc00917 	ldw	ra,36(sp)
20087700:	df000817 	ldw	fp,32(sp)
20087704:	ddc00717 	ldw	r23,28(sp)
20087708:	dd800617 	ldw	r22,24(sp)
2008770c:	dd400517 	ldw	r21,20(sp)
20087710:	dd000417 	ldw	r20,16(sp)
20087714:	dcc00317 	ldw	r19,12(sp)
20087718:	dc800217 	ldw	r18,8(sp)
2008771c:	dc400117 	ldw	r17,4(sp)
20087720:	dc000017 	ldw	r16,0(sp)
20087724:	dec00a04 	addi	sp,sp,40
20087728:	f800283a 	ret
2008772c:	18c0004c 	andi	r3,r3,1
20087730:	1800081e 	bne	r3,zero,20087754 <_realloc_r+0x16c>
20087734:	a4fffe17 	ldw	r19,-8(r20)
20087738:	00bfff04 	movi	r2,-4
2008773c:	ace7c83a 	sub	r19,r21,r19
20087740:	98c00117 	ldw	r3,4(r19)
20087744:	1886703a 	and	r3,r3,r2
20087748:	98000226 	beq	r19,zero,20087754 <_realloc_r+0x16c>
2008774c:	1c2f883a 	add	r23,r3,r16
20087750:	b9c06d0e 	bge	r23,r7,20087908 <_realloc_r+0x320>
20087754:	880b883a 	mov	r5,r17
20087758:	9009883a 	mov	r4,r18
2008775c:	00806fc0 	call	200806fc <_malloc_r>
20087760:	1023883a 	mov	r17,r2
20087764:	1000ef26 	beq	r2,zero,20087b24 <_realloc_r+0x53c>
20087768:	a0ffff17 	ldw	r3,-4(r20)
2008776c:	113ffe04 	addi	r4,r2,-8
20087770:	00bfff84 	movi	r2,-2
20087774:	1884703a 	and	r2,r3,r2
20087778:	a885883a 	add	r2,r21,r2
2008777c:	2080bf26 	beq	r4,r2,20087a7c <_realloc_r+0x494>
20087780:	81bfff04 	addi	r6,r16,-4
20087784:	00800904 	movi	r2,36
20087788:	11808936 	bltu	r2,r6,200879b0 <_realloc_r+0x3c8>
2008778c:	00c004c4 	movi	r3,19
20087790:	19806c2e 	bgeu	r3,r6,20087944 <_realloc_r+0x35c>
20087794:	a0c00017 	ldw	r3,0(r20)
20087798:	88c00015 	stw	r3,0(r17)
2008779c:	a0c00117 	ldw	r3,4(r20)
200877a0:	88c00115 	stw	r3,4(r17)
200877a4:	00c006c4 	movi	r3,27
200877a8:	1980ac36 	bltu	r3,r6,20087a5c <_realloc_r+0x474>
200877ac:	88800204 	addi	r2,r17,8
200877b0:	a0c00204 	addi	r3,r20,8
200877b4:	19000017 	ldw	r4,0(r3)
200877b8:	11000015 	stw	r4,0(r2)
200877bc:	19000117 	ldw	r4,4(r3)
200877c0:	11000115 	stw	r4,4(r2)
200877c4:	18c00217 	ldw	r3,8(r3)
200877c8:	10c00215 	stw	r3,8(r2)
200877cc:	a00b883a 	mov	r5,r20
200877d0:	9009883a 	mov	r4,r18
200877d4:	008546c0 	call	2008546c <_free_r>
200877d8:	9009883a 	mov	r4,r18
200877dc:	008d4340 	call	2008d434 <__malloc_unlock>
200877e0:	8805883a 	mov	r2,r17
200877e4:	003fc506 	br	200876fc <__flash_rwdata_start+0xffff5900>
200877e8:	00800304 	movi	r2,12
200877ec:	90800015 	stw	r2,0(r18)
200877f0:	0005883a 	mov	r2,zero
200877f4:	003fc106 	br	200876fc <__flash_rwdata_start+0xffff5900>
200877f8:	29800117 	ldw	r6,4(r5)
200877fc:	00bfff04 	movi	r2,-4
20087800:	b1000404 	addi	r4,r22,16
20087804:	3084703a 	and	r2,r6,r2
20087808:	140d883a 	add	r6,r2,r16
2008780c:	31005b0e 	bge	r6,r4,2008797c <_realloc_r+0x394>
20087810:	2811883a 	mov	r8,r5
20087814:	18c0004c 	andi	r3,r3,1
20087818:	183fce1e 	bne	r3,zero,20087754 <__flash_rwdata_start+0xffff5958>
2008781c:	a4fffe17 	ldw	r19,-8(r20)
20087820:	00ffff04 	movi	r3,-4
20087824:	ace7c83a 	sub	r19,r21,r19
20087828:	99000117 	ldw	r4,4(r19)
2008782c:	20c6703a 	and	r3,r4,r3
20087830:	403fc526 	beq	r8,zero,20087748 <__flash_rwdata_start+0xffff594c>
20087834:	1c2f883a 	add	r23,r3,r16
20087838:	b8af883a 	add	r23,r23,r2
2008783c:	41406026 	beq	r8,r5,200879c0 <_realloc_r+0x3d8>
20087840:	b9ffc116 	blt	r23,r7,20087748 <__flash_rwdata_start+0xffff594c>
20087844:	40c00217 	ldw	r3,8(r8)
20087848:	40800317 	ldw	r2,12(r8)
2008784c:	81bfff04 	addi	r6,r16,-4
20087850:	01000904 	movi	r4,36
20087854:	18800315 	stw	r2,12(r3)
20087858:	10c00215 	stw	r3,8(r2)
2008785c:	99400217 	ldw	r5,8(r19)
20087860:	98c00317 	ldw	r3,12(r19)
20087864:	9c400204 	addi	r17,r19,8
20087868:	28c00315 	stw	r3,12(r5)
2008786c:	19400215 	stw	r5,8(r3)
20087870:	21802d36 	bltu	r4,r6,20087928 <_realloc_r+0x340>
20087874:	008004c4 	movi	r2,19
20087878:	1180352e 	bgeu	r2,r6,20087950 <_realloc_r+0x368>
2008787c:	a0800017 	ldw	r2,0(r20)
20087880:	98800215 	stw	r2,8(r19)
20087884:	a0800117 	ldw	r2,4(r20)
20087888:	98800315 	stw	r2,12(r19)
2008788c:	008006c4 	movi	r2,27
20087890:	11808036 	bltu	r2,r6,20087a94 <_realloc_r+0x4ac>
20087894:	98c00404 	addi	r3,r19,16
20087898:	a5000204 	addi	r20,r20,8
2008789c:	00002d06 	br	20087954 <_realloc_r+0x36c>
200878a0:	1d86b03a 	or	r3,r3,r22
200878a4:	ad8b883a 	add	r5,r21,r22
200878a8:	a8c00115 	stw	r3,4(r21)
200878ac:	38800054 	ori	r2,r7,1
200878b0:	28800115 	stw	r2,4(r5)
200878b4:	29cf883a 	add	r7,r5,r7
200878b8:	38800117 	ldw	r2,4(r7)
200878bc:	9009883a 	mov	r4,r18
200878c0:	29400204 	addi	r5,r5,8
200878c4:	10800054 	ori	r2,r2,1
200878c8:	38800115 	stw	r2,4(r7)
200878cc:	008546c0 	call	2008546c <_free_r>
200878d0:	003f8706 	br	200876f0 <__flash_rwdata_start+0xffff58f4>
200878d4:	300b883a 	mov	r5,r6
200878d8:	dfc00917 	ldw	ra,36(sp)
200878dc:	df000817 	ldw	fp,32(sp)
200878e0:	ddc00717 	ldw	r23,28(sp)
200878e4:	dd800617 	ldw	r22,24(sp)
200878e8:	dd400517 	ldw	r21,20(sp)
200878ec:	dd000417 	ldw	r20,16(sp)
200878f0:	dcc00317 	ldw	r19,12(sp)
200878f4:	dc800217 	ldw	r18,8(sp)
200878f8:	dc400117 	ldw	r17,4(sp)
200878fc:	dc000017 	ldw	r16,0(sp)
20087900:	dec00a04 	addi	sp,sp,40
20087904:	00806fc1 	jmpi	200806fc <_malloc_r>
20087908:	98800317 	ldw	r2,12(r19)
2008790c:	98c00217 	ldw	r3,8(r19)
20087910:	81bfff04 	addi	r6,r16,-4
20087914:	01000904 	movi	r4,36
20087918:	18800315 	stw	r2,12(r3)
2008791c:	10c00215 	stw	r3,8(r2)
20087920:	9c400204 	addi	r17,r19,8
20087924:	21bfd32e 	bgeu	r4,r6,20087874 <__flash_rwdata_start+0xffff5a78>
20087928:	8809883a 	mov	r4,r17
2008792c:	a00b883a 	mov	r5,r20
20087930:	008625c0 	call	2008625c <memmove>
20087934:	98c00117 	ldw	r3,4(r19)
20087938:	b821883a 	mov	r16,r23
2008793c:	982b883a 	mov	r21,r19
20087940:	003f6106 	br	200876c8 <__flash_rwdata_start+0xffff58cc>
20087944:	8805883a 	mov	r2,r17
20087948:	a007883a 	mov	r3,r20
2008794c:	003f9906 	br	200877b4 <__flash_rwdata_start+0xffff59b8>
20087950:	8807883a 	mov	r3,r17
20087954:	a0800017 	ldw	r2,0(r20)
20087958:	b821883a 	mov	r16,r23
2008795c:	982b883a 	mov	r21,r19
20087960:	18800015 	stw	r2,0(r3)
20087964:	a0800117 	ldw	r2,4(r20)
20087968:	18800115 	stw	r2,4(r3)
2008796c:	a0800217 	ldw	r2,8(r20)
20087970:	18800215 	stw	r2,8(r3)
20087974:	98c00117 	ldw	r3,4(r19)
20087978:	003f5306 	br	200876c8 <__flash_rwdata_start+0xffff58cc>
2008797c:	adab883a 	add	r21,r21,r22
20087980:	3585c83a 	sub	r2,r6,r22
20087984:	e5400215 	stw	r21,8(fp)
20087988:	10800054 	ori	r2,r2,1
2008798c:	a8800115 	stw	r2,4(r21)
20087990:	a0bfff17 	ldw	r2,-4(r20)
20087994:	9009883a 	mov	r4,r18
20087998:	1080004c 	andi	r2,r2,1
2008799c:	b0acb03a 	or	r22,r22,r2
200879a0:	a5bfff15 	stw	r22,-4(r20)
200879a4:	008d4340 	call	2008d434 <__malloc_unlock>
200879a8:	a005883a 	mov	r2,r20
200879ac:	003f5306 	br	200876fc <__flash_rwdata_start+0xffff5900>
200879b0:	8809883a 	mov	r4,r17
200879b4:	a00b883a 	mov	r5,r20
200879b8:	008625c0 	call	2008625c <memmove>
200879bc:	003f8306 	br	200877cc <__flash_rwdata_start+0xffff59d0>
200879c0:	b0800404 	addi	r2,r22,16
200879c4:	b8bf6016 	blt	r23,r2,20087748 <__flash_rwdata_start+0xffff594c>
200879c8:	98800317 	ldw	r2,12(r19)
200879cc:	98c00217 	ldw	r3,8(r19)
200879d0:	81bfff04 	addi	r6,r16,-4
200879d4:	01000904 	movi	r4,36
200879d8:	18800315 	stw	r2,12(r3)
200879dc:	10c00215 	stw	r3,8(r2)
200879e0:	9c400204 	addi	r17,r19,8
200879e4:	21804336 	bltu	r4,r6,20087af4 <_realloc_r+0x50c>
200879e8:	008004c4 	movi	r2,19
200879ec:	11803f2e 	bgeu	r2,r6,20087aec <_realloc_r+0x504>
200879f0:	a0800017 	ldw	r2,0(r20)
200879f4:	98800215 	stw	r2,8(r19)
200879f8:	a0800117 	ldw	r2,4(r20)
200879fc:	98800315 	stw	r2,12(r19)
20087a00:	008006c4 	movi	r2,27
20087a04:	11803f36 	bltu	r2,r6,20087b04 <_realloc_r+0x51c>
20087a08:	98800404 	addi	r2,r19,16
20087a0c:	a5000204 	addi	r20,r20,8
20087a10:	a0c00017 	ldw	r3,0(r20)
20087a14:	10c00015 	stw	r3,0(r2)
20087a18:	a0c00117 	ldw	r3,4(r20)
20087a1c:	10c00115 	stw	r3,4(r2)
20087a20:	a0c00217 	ldw	r3,8(r20)
20087a24:	10c00215 	stw	r3,8(r2)
20087a28:	9d87883a 	add	r3,r19,r22
20087a2c:	bd85c83a 	sub	r2,r23,r22
20087a30:	e0c00215 	stw	r3,8(fp)
20087a34:	10800054 	ori	r2,r2,1
20087a38:	18800115 	stw	r2,4(r3)
20087a3c:	98800117 	ldw	r2,4(r19)
20087a40:	9009883a 	mov	r4,r18
20087a44:	1080004c 	andi	r2,r2,1
20087a48:	b0acb03a 	or	r22,r22,r2
20087a4c:	9d800115 	stw	r22,4(r19)
20087a50:	008d4340 	call	2008d434 <__malloc_unlock>
20087a54:	8805883a 	mov	r2,r17
20087a58:	003f2806 	br	200876fc <__flash_rwdata_start+0xffff5900>
20087a5c:	a0c00217 	ldw	r3,8(r20)
20087a60:	88c00215 	stw	r3,8(r17)
20087a64:	a0c00317 	ldw	r3,12(r20)
20087a68:	88c00315 	stw	r3,12(r17)
20087a6c:	30801126 	beq	r6,r2,20087ab4 <_realloc_r+0x4cc>
20087a70:	88800404 	addi	r2,r17,16
20087a74:	a0c00404 	addi	r3,r20,16
20087a78:	003f4e06 	br	200877b4 <__flash_rwdata_start+0xffff59b8>
20087a7c:	893fff17 	ldw	r4,-4(r17)
20087a80:	00bfff04 	movi	r2,-4
20087a84:	a023883a 	mov	r17,r20
20087a88:	2084703a 	and	r2,r4,r2
20087a8c:	80a1883a 	add	r16,r16,r2
20087a90:	003f0d06 	br	200876c8 <__flash_rwdata_start+0xffff58cc>
20087a94:	a0800217 	ldw	r2,8(r20)
20087a98:	98800415 	stw	r2,16(r19)
20087a9c:	a0800317 	ldw	r2,12(r20)
20087aa0:	98800515 	stw	r2,20(r19)
20087aa4:	31000a26 	beq	r6,r4,20087ad0 <_realloc_r+0x4e8>
20087aa8:	98c00604 	addi	r3,r19,24
20087aac:	a5000404 	addi	r20,r20,16
20087ab0:	003fa806 	br	20087954 <__flash_rwdata_start+0xffff5b58>
20087ab4:	a1000417 	ldw	r4,16(r20)
20087ab8:	88800604 	addi	r2,r17,24
20087abc:	a0c00604 	addi	r3,r20,24
20087ac0:	89000415 	stw	r4,16(r17)
20087ac4:	a1000517 	ldw	r4,20(r20)
20087ac8:	89000515 	stw	r4,20(r17)
20087acc:	003f3906 	br	200877b4 <__flash_rwdata_start+0xffff59b8>
20087ad0:	a0800417 	ldw	r2,16(r20)
20087ad4:	a5000604 	addi	r20,r20,24
20087ad8:	98c00804 	addi	r3,r19,32
20087adc:	98800615 	stw	r2,24(r19)
20087ae0:	a0bfff17 	ldw	r2,-4(r20)
20087ae4:	98800715 	stw	r2,28(r19)
20087ae8:	003f9a06 	br	20087954 <__flash_rwdata_start+0xffff5b58>
20087aec:	8805883a 	mov	r2,r17
20087af0:	003fc706 	br	20087a10 <__flash_rwdata_start+0xffff5c14>
20087af4:	8809883a 	mov	r4,r17
20087af8:	a00b883a 	mov	r5,r20
20087afc:	008625c0 	call	2008625c <memmove>
20087b00:	003fc906 	br	20087a28 <__flash_rwdata_start+0xffff5c2c>
20087b04:	a0800217 	ldw	r2,8(r20)
20087b08:	98800415 	stw	r2,16(r19)
20087b0c:	a0800317 	ldw	r2,12(r20)
20087b10:	98800515 	stw	r2,20(r19)
20087b14:	31000726 	beq	r6,r4,20087b34 <_realloc_r+0x54c>
20087b18:	98800604 	addi	r2,r19,24
20087b1c:	a5000404 	addi	r20,r20,16
20087b20:	003fbb06 	br	20087a10 <__flash_rwdata_start+0xffff5c14>
20087b24:	9009883a 	mov	r4,r18
20087b28:	008d4340 	call	2008d434 <__malloc_unlock>
20087b2c:	0005883a 	mov	r2,zero
20087b30:	003ef206 	br	200876fc <__flash_rwdata_start+0xffff5900>
20087b34:	a0c00417 	ldw	r3,16(r20)
20087b38:	a5000604 	addi	r20,r20,24
20087b3c:	98800804 	addi	r2,r19,32
20087b40:	98c00615 	stw	r3,24(r19)
20087b44:	a0ffff17 	ldw	r3,-4(r20)
20087b48:	98c00715 	stw	r3,28(r19)
20087b4c:	003fb006 	br	20087a10 <__flash_rwdata_start+0xffff5c14>

20087b50 <__fpclassifyd>:
20087b50:	00a00034 	movhi	r2,32768
20087b54:	10bfffc4 	addi	r2,r2,-1
20087b58:	2884703a 	and	r2,r5,r2
20087b5c:	10000726 	beq	r2,zero,20087b7c <__fpclassifyd+0x2c>
20087b60:	00fffc34 	movhi	r3,65520
20087b64:	019ff834 	movhi	r6,32736
20087b68:	28c7883a 	add	r3,r5,r3
20087b6c:	31bfffc4 	addi	r6,r6,-1
20087b70:	30c00536 	bltu	r6,r3,20087b88 <__fpclassifyd+0x38>
20087b74:	00800104 	movi	r2,4
20087b78:	f800283a 	ret
20087b7c:	2000021e 	bne	r4,zero,20087b88 <__fpclassifyd+0x38>
20087b80:	00800084 	movi	r2,2
20087b84:	f800283a 	ret
20087b88:	00dffc34 	movhi	r3,32752
20087b8c:	019ff834 	movhi	r6,32736
20087b90:	28cb883a 	add	r5,r5,r3
20087b94:	31bfffc4 	addi	r6,r6,-1
20087b98:	317ff62e 	bgeu	r6,r5,20087b74 <__flash_rwdata_start+0xffff5d78>
20087b9c:	01400434 	movhi	r5,16
20087ba0:	297fffc4 	addi	r5,r5,-1
20087ba4:	28800236 	bltu	r5,r2,20087bb0 <__fpclassifyd+0x60>
20087ba8:	008000c4 	movi	r2,3
20087bac:	f800283a 	ret
20087bb0:	10c00226 	beq	r2,r3,20087bbc <__fpclassifyd+0x6c>
20087bb4:	0005883a 	mov	r2,zero
20087bb8:	f800283a 	ret
20087bbc:	2005003a 	cmpeq	r2,r4,zero
20087bc0:	f800283a 	ret

20087bc4 <__sread>:
20087bc4:	defffe04 	addi	sp,sp,-8
20087bc8:	dc000015 	stw	r16,0(sp)
20087bcc:	2821883a 	mov	r16,r5
20087bd0:	2940038f 	ldh	r5,14(r5)
20087bd4:	dfc00115 	stw	ra,4(sp)
20087bd8:	008991c0 	call	2008991c <_read_r>
20087bdc:	10000716 	blt	r2,zero,20087bfc <__sread+0x38>
20087be0:	80c01417 	ldw	r3,80(r16)
20087be4:	1887883a 	add	r3,r3,r2
20087be8:	80c01415 	stw	r3,80(r16)
20087bec:	dfc00117 	ldw	ra,4(sp)
20087bf0:	dc000017 	ldw	r16,0(sp)
20087bf4:	dec00204 	addi	sp,sp,8
20087bf8:	f800283a 	ret
20087bfc:	80c0030b 	ldhu	r3,12(r16)
20087c00:	18fbffcc 	andi	r3,r3,61439
20087c04:	80c0030d 	sth	r3,12(r16)
20087c08:	dfc00117 	ldw	ra,4(sp)
20087c0c:	dc000017 	ldw	r16,0(sp)
20087c10:	dec00204 	addi	sp,sp,8
20087c14:	f800283a 	ret

20087c18 <__seofread>:
20087c18:	0005883a 	mov	r2,zero
20087c1c:	f800283a 	ret

20087c20 <__swrite>:
20087c20:	2880030b 	ldhu	r2,12(r5)
20087c24:	defffb04 	addi	sp,sp,-20
20087c28:	dcc00315 	stw	r19,12(sp)
20087c2c:	dc800215 	stw	r18,8(sp)
20087c30:	dc400115 	stw	r17,4(sp)
20087c34:	dc000015 	stw	r16,0(sp)
20087c38:	dfc00415 	stw	ra,16(sp)
20087c3c:	10c0400c 	andi	r3,r2,256
20087c40:	2821883a 	mov	r16,r5
20087c44:	2027883a 	mov	r19,r4
20087c48:	3025883a 	mov	r18,r6
20087c4c:	3823883a 	mov	r17,r7
20087c50:	18000526 	beq	r3,zero,20087c68 <__swrite+0x48>
20087c54:	2940038f 	ldh	r5,14(r5)
20087c58:	000d883a 	mov	r6,zero
20087c5c:	01c00084 	movi	r7,2
20087c60:	00898c00 	call	200898c0 <_lseek_r>
20087c64:	8080030b 	ldhu	r2,12(r16)
20087c68:	8140038f 	ldh	r5,14(r16)
20087c6c:	10bbffcc 	andi	r2,r2,61439
20087c70:	9809883a 	mov	r4,r19
20087c74:	900d883a 	mov	r6,r18
20087c78:	880f883a 	mov	r7,r17
20087c7c:	8080030d 	sth	r2,12(r16)
20087c80:	dfc00417 	ldw	ra,16(sp)
20087c84:	dcc00317 	ldw	r19,12(sp)
20087c88:	dc800217 	ldw	r18,8(sp)
20087c8c:	dc400117 	ldw	r17,4(sp)
20087c90:	dc000017 	ldw	r16,0(sp)
20087c94:	dec00504 	addi	sp,sp,20
20087c98:	00893bc1 	jmpi	200893bc <_write_r>

20087c9c <__sseek>:
20087c9c:	defffe04 	addi	sp,sp,-8
20087ca0:	dc000015 	stw	r16,0(sp)
20087ca4:	2821883a 	mov	r16,r5
20087ca8:	2940038f 	ldh	r5,14(r5)
20087cac:	dfc00115 	stw	ra,4(sp)
20087cb0:	00898c00 	call	200898c0 <_lseek_r>
20087cb4:	00ffffc4 	movi	r3,-1
20087cb8:	10c00826 	beq	r2,r3,20087cdc <__sseek+0x40>
20087cbc:	80c0030b 	ldhu	r3,12(r16)
20087cc0:	80801415 	stw	r2,80(r16)
20087cc4:	18c40014 	ori	r3,r3,4096
20087cc8:	80c0030d 	sth	r3,12(r16)
20087ccc:	dfc00117 	ldw	ra,4(sp)
20087cd0:	dc000017 	ldw	r16,0(sp)
20087cd4:	dec00204 	addi	sp,sp,8
20087cd8:	f800283a 	ret
20087cdc:	80c0030b 	ldhu	r3,12(r16)
20087ce0:	18fbffcc 	andi	r3,r3,61439
20087ce4:	80c0030d 	sth	r3,12(r16)
20087ce8:	dfc00117 	ldw	ra,4(sp)
20087cec:	dc000017 	ldw	r16,0(sp)
20087cf0:	dec00204 	addi	sp,sp,8
20087cf4:	f800283a 	ret

20087cf8 <__sclose>:
20087cf8:	2940038f 	ldh	r5,14(r5)
20087cfc:	00894181 	jmpi	20089418 <_close_r>

20087d00 <strcmp>:
20087d00:	2144b03a 	or	r2,r4,r5
20087d04:	108000cc 	andi	r2,r2,3
20087d08:	1000171e 	bne	r2,zero,20087d68 <strcmp+0x68>
20087d0c:	20800017 	ldw	r2,0(r4)
20087d10:	28c00017 	ldw	r3,0(r5)
20087d14:	10c0141e 	bne	r2,r3,20087d68 <strcmp+0x68>
20087d18:	027fbff4 	movhi	r9,65279
20087d1c:	4a7fbfc4 	addi	r9,r9,-257
20087d20:	0086303a 	nor	r3,zero,r2
20087d24:	02202074 	movhi	r8,32897
20087d28:	1245883a 	add	r2,r2,r9
20087d2c:	42202004 	addi	r8,r8,-32640
20087d30:	10c4703a 	and	r2,r2,r3
20087d34:	1204703a 	and	r2,r2,r8
20087d38:	10000226 	beq	r2,zero,20087d44 <strcmp+0x44>
20087d3c:	00001706 	br	20087d9c <strcmp+0x9c>
20087d40:	1000161e 	bne	r2,zero,20087d9c <strcmp+0x9c>
20087d44:	21000104 	addi	r4,r4,4
20087d48:	20c00017 	ldw	r3,0(r4)
20087d4c:	29400104 	addi	r5,r5,4
20087d50:	29800017 	ldw	r6,0(r5)
20087d54:	1a4f883a 	add	r7,r3,r9
20087d58:	00c4303a 	nor	r2,zero,r3
20087d5c:	3884703a 	and	r2,r7,r2
20087d60:	1204703a 	and	r2,r2,r8
20087d64:	19bff626 	beq	r3,r6,20087d40 <__flash_rwdata_start+0xffff5f44>
20087d68:	20800007 	ldb	r2,0(r4)
20087d6c:	1000051e 	bne	r2,zero,20087d84 <strcmp+0x84>
20087d70:	00000606 	br	20087d8c <strcmp+0x8c>
20087d74:	21000044 	addi	r4,r4,1
20087d78:	20800007 	ldb	r2,0(r4)
20087d7c:	29400044 	addi	r5,r5,1
20087d80:	10000226 	beq	r2,zero,20087d8c <strcmp+0x8c>
20087d84:	28c00007 	ldb	r3,0(r5)
20087d88:	10fffa26 	beq	r2,r3,20087d74 <__flash_rwdata_start+0xffff5f78>
20087d8c:	20800003 	ldbu	r2,0(r4)
20087d90:	28c00003 	ldbu	r3,0(r5)
20087d94:	10c5c83a 	sub	r2,r2,r3
20087d98:	f800283a 	ret
20087d9c:	0005883a 	mov	r2,zero
20087da0:	f800283a 	ret

20087da4 <__sprint_r.part.0>:
20087da4:	28801917 	ldw	r2,100(r5)
20087da8:	defff604 	addi	sp,sp,-40
20087dac:	dd400515 	stw	r21,20(sp)
20087db0:	dcc00315 	stw	r19,12(sp)
20087db4:	dfc00915 	stw	ra,36(sp)
20087db8:	df000815 	stw	fp,32(sp)
20087dbc:	ddc00715 	stw	r23,28(sp)
20087dc0:	dd800615 	stw	r22,24(sp)
20087dc4:	dd000415 	stw	r20,16(sp)
20087dc8:	dc800215 	stw	r18,8(sp)
20087dcc:	dc400115 	stw	r17,4(sp)
20087dd0:	dc000015 	stw	r16,0(sp)
20087dd4:	1088000c 	andi	r2,r2,8192
20087dd8:	2827883a 	mov	r19,r5
20087ddc:	302b883a 	mov	r21,r6
20087de0:	10002d26 	beq	r2,zero,20087e98 <__sprint_r.part.0+0xf4>
20087de4:	30800217 	ldw	r2,8(r6)
20087de8:	35800017 	ldw	r22,0(r6)
20087dec:	10002826 	beq	r2,zero,20087e90 <__sprint_r.part.0+0xec>
20087df0:	2029883a 	mov	r20,r4
20087df4:	b5c00104 	addi	r23,r22,4
20087df8:	04bfffc4 	movi	r18,-1
20087dfc:	bc400017 	ldw	r17,0(r23)
20087e00:	b4000017 	ldw	r16,0(r22)
20087e04:	0039883a 	mov	fp,zero
20087e08:	8822d0ba 	srli	r17,r17,2
20087e0c:	04400316 	blt	zero,r17,20087e1c <__sprint_r.part.0+0x78>
20087e10:	00001806 	br	20087e74 <__sprint_r.part.0+0xd0>
20087e14:	84000104 	addi	r16,r16,4
20087e18:	8f001526 	beq	r17,fp,20087e70 <__sprint_r.part.0+0xcc>
20087e1c:	81400017 	ldw	r5,0(r16)
20087e20:	a009883a 	mov	r4,r20
20087e24:	980d883a 	mov	r6,r19
20087e28:	00896340 	call	20089634 <_fputwc_r>
20087e2c:	e7000044 	addi	fp,fp,1
20087e30:	14bff81e 	bne	r2,r18,20087e14 <__flash_rwdata_start+0xffff6018>
20087e34:	9005883a 	mov	r2,r18
20087e38:	a8000215 	stw	zero,8(r21)
20087e3c:	a8000115 	stw	zero,4(r21)
20087e40:	dfc00917 	ldw	ra,36(sp)
20087e44:	df000817 	ldw	fp,32(sp)
20087e48:	ddc00717 	ldw	r23,28(sp)
20087e4c:	dd800617 	ldw	r22,24(sp)
20087e50:	dd400517 	ldw	r21,20(sp)
20087e54:	dd000417 	ldw	r20,16(sp)
20087e58:	dcc00317 	ldw	r19,12(sp)
20087e5c:	dc800217 	ldw	r18,8(sp)
20087e60:	dc400117 	ldw	r17,4(sp)
20087e64:	dc000017 	ldw	r16,0(sp)
20087e68:	dec00a04 	addi	sp,sp,40
20087e6c:	f800283a 	ret
20087e70:	a8800217 	ldw	r2,8(r21)
20087e74:	8c63883a 	add	r17,r17,r17
20087e78:	8c63883a 	add	r17,r17,r17
20087e7c:	1445c83a 	sub	r2,r2,r17
20087e80:	a8800215 	stw	r2,8(r21)
20087e84:	b5800204 	addi	r22,r22,8
20087e88:	bdc00204 	addi	r23,r23,8
20087e8c:	103fdb1e 	bne	r2,zero,20087dfc <__flash_rwdata_start+0xffff6000>
20087e90:	0005883a 	mov	r2,zero
20087e94:	003fe806 	br	20087e38 <__flash_rwdata_start+0xffff603c>
20087e98:	008575c0 	call	2008575c <__sfvwrite_r>
20087e9c:	003fe606 	br	20087e38 <__flash_rwdata_start+0xffff603c>

20087ea0 <__sprint_r>:
20087ea0:	30c00217 	ldw	r3,8(r6)
20087ea4:	18000126 	beq	r3,zero,20087eac <__sprint_r+0xc>
20087ea8:	0087da41 	jmpi	20087da4 <__sprint_r.part.0>
20087eac:	30000115 	stw	zero,4(r6)
20087eb0:	0005883a 	mov	r2,zero
20087eb4:	f800283a 	ret

20087eb8 <___vfiprintf_internal_r>:
20087eb8:	deffca04 	addi	sp,sp,-216
20087ebc:	dd803215 	stw	r22,200(sp)
20087ec0:	dd403115 	stw	r21,196(sp)
20087ec4:	dfc03515 	stw	ra,212(sp)
20087ec8:	df003415 	stw	fp,208(sp)
20087ecc:	ddc03315 	stw	r23,204(sp)
20087ed0:	dd003015 	stw	r20,192(sp)
20087ed4:	dcc02f15 	stw	r19,188(sp)
20087ed8:	dc802e15 	stw	r18,184(sp)
20087edc:	dc402d15 	stw	r17,180(sp)
20087ee0:	dc002c15 	stw	r16,176(sp)
20087ee4:	d9002015 	stw	r4,128(sp)
20087ee8:	d9c02215 	stw	r7,136(sp)
20087eec:	282b883a 	mov	r21,r5
20087ef0:	302d883a 	mov	r22,r6
20087ef4:	20000226 	beq	r4,zero,20087f00 <___vfiprintf_internal_r+0x48>
20087ef8:	20800e17 	ldw	r2,56(r4)
20087efc:	1001b126 	beq	r2,zero,200885c4 <___vfiprintf_internal_r+0x70c>
20087f00:	a880030b 	ldhu	r2,12(r21)
20087f04:	10c8000c 	andi	r3,r2,8192
20087f08:	1800061e 	bne	r3,zero,20087f24 <___vfiprintf_internal_r+0x6c>
20087f0c:	a9001917 	ldw	r4,100(r21)
20087f10:	00f7ffc4 	movi	r3,-8193
20087f14:	10880014 	ori	r2,r2,8192
20087f18:	20c6703a 	and	r3,r4,r3
20087f1c:	a880030d 	sth	r2,12(r21)
20087f20:	a8c01915 	stw	r3,100(r21)
20087f24:	10c0020c 	andi	r3,r2,8
20087f28:	18018926 	beq	r3,zero,20088550 <___vfiprintf_internal_r+0x698>
20087f2c:	a8c00417 	ldw	r3,16(r21)
20087f30:	18018726 	beq	r3,zero,20088550 <___vfiprintf_internal_r+0x698>
20087f34:	1080068c 	andi	r2,r2,26
20087f38:	00c00284 	movi	r3,10
20087f3c:	10c18c26 	beq	r2,r3,20088570 <___vfiprintf_internal_r+0x6b8>
20087f40:	d8801a04 	addi	r2,sp,104
20087f44:	d8c019c4 	addi	r3,sp,103
20087f48:	07000034 	movhi	fp,0
20087f4c:	05c00034 	movhi	r23,0
20087f50:	10c9c83a 	sub	r4,r2,r3
20087f54:	e7008804 	addi	fp,fp,544
20087f58:	bdc08404 	addi	r23,r23,528
20087f5c:	d8801e15 	stw	r2,120(sp)
20087f60:	d8c01f15 	stw	r3,124(sp)
20087f64:	dec01a15 	stw	sp,104(sp)
20087f68:	d8001c15 	stw	zero,112(sp)
20087f6c:	d8001b15 	stw	zero,108(sp)
20087f70:	d8002615 	stw	zero,152(sp)
20087f74:	d8002315 	stw	zero,140(sp)
20087f78:	d9002715 	stw	r4,156(sp)
20087f7c:	d811883a 	mov	r8,sp
20087f80:	dd402115 	stw	r21,132(sp)
20087f84:	b021883a 	mov	r16,r22
20087f88:	80800007 	ldb	r2,0(r16)
20087f8c:	10037226 	beq	r2,zero,20088d58 <___vfiprintf_internal_r+0xea0>
20087f90:	01000944 	movi	r4,37
20087f94:	11037026 	beq	r2,r4,20088d58 <___vfiprintf_internal_r+0xea0>
20087f98:	8005883a 	mov	r2,r16
20087f9c:	00000106 	br	20087fa4 <___vfiprintf_internal_r+0xec>
20087fa0:	19000326 	beq	r3,r4,20087fb0 <___vfiprintf_internal_r+0xf8>
20087fa4:	10800044 	addi	r2,r2,1
20087fa8:	10c00007 	ldb	r3,0(r2)
20087fac:	183ffc1e 	bne	r3,zero,20087fa0 <__flash_rwdata_start+0xffff61a4>
20087fb0:	1425c83a 	sub	r18,r2,r16
20087fb4:	1023883a 	mov	r17,r2
20087fb8:	90001026 	beq	r18,zero,20087ffc <___vfiprintf_internal_r+0x144>
20087fbc:	d8c01c17 	ldw	r3,112(sp)
20087fc0:	d8801b17 	ldw	r2,108(sp)
20087fc4:	44000015 	stw	r16,0(r8)
20087fc8:	90c7883a 	add	r3,r18,r3
20087fcc:	10800044 	addi	r2,r2,1
20087fd0:	44800115 	stw	r18,4(r8)
20087fd4:	d8c01c15 	stw	r3,112(sp)
20087fd8:	d8801b15 	stw	r2,108(sp)
20087fdc:	010001c4 	movi	r4,7
20087fe0:	2080750e 	bge	r4,r2,200881b8 <___vfiprintf_internal_r+0x300>
20087fe4:	18036f1e 	bne	r3,zero,20088da4 <___vfiprintf_internal_r+0xeec>
20087fe8:	d8802317 	ldw	r2,140(sp)
20087fec:	d8001b15 	stw	zero,108(sp)
20087ff0:	d811883a 	mov	r8,sp
20087ff4:	1485883a 	add	r2,r2,r18
20087ff8:	d8802315 	stw	r2,140(sp)
20087ffc:	88800007 	ldb	r2,0(r17)
20088000:	10041026 	beq	r2,zero,20089044 <___vfiprintf_internal_r+0x118c>
20088004:	88c00047 	ldb	r3,1(r17)
20088008:	88800044 	addi	r2,r17,1
2008800c:	d8001d85 	stb	zero,118(sp)
20088010:	000f883a 	mov	r7,zero
20088014:	027fffc4 	movi	r9,-1
20088018:	0025883a 	mov	r18,zero
2008801c:	002b883a 	mov	r21,zero
20088020:	01401604 	movi	r5,88
20088024:	01800244 	movi	r6,9
20088028:	03400a84 	movi	r13,42
2008802c:	03001b04 	movi	r12,108
20088030:	14000044 	addi	r16,r2,1
20088034:	18bff804 	addi	r2,r3,-32
20088038:	28825536 	bltu	r5,r2,20088990 <___vfiprintf_internal_r+0xad8>
2008803c:	100490ba 	slli	r2,r2,2
20088040:	01080274 	movhi	r4,8201
20088044:	21201504 	addi	r4,r4,-32684
20088048:	1105883a 	add	r2,r2,r4
2008804c:	10800017 	ldw	r2,0(r2)
20088050:	1000683a 	jmp	r2
20088054:	20088754 	ori	zero,r4,8733
20088058:	20088990 	cmplti	zero,r4,8742
2008805c:	20088990 	cmplti	zero,r4,8742
20088060:	20088774 	orhi	zero,r4,8733
20088064:	20088990 	cmplti	zero,r4,8742
20088068:	20088990 	cmplti	zero,r4,8742
2008806c:	20088990 	cmplti	zero,r4,8742
20088070:	20088990 	cmplti	zero,r4,8742
20088074:	20088990 	cmplti	zero,r4,8742
20088078:	20088990 	cmplti	zero,r4,8742
2008807c:	20088784 	addi	zero,r4,8734
20088080:	200887a4 	muli	zero,r4,8734
20088084:	20088990 	cmplti	zero,r4,8742
20088088:	200885cc 	andi	zero,r4,8727
2008808c:	200886b8 	rdprs	zero,r4,8730
20088090:	20088990 	cmplti	zero,r4,8742
20088094:	20088638 	rdprs	zero,r4,8728
20088098:	20088648 	cmpgei	zero,r4,8729
2008809c:	20088648 	cmpgei	zero,r4,8729
200880a0:	20088648 	cmpgei	zero,r4,8729
200880a4:	20088648 	cmpgei	zero,r4,8729
200880a8:	20088648 	cmpgei	zero,r4,8729
200880ac:	20088648 	cmpgei	zero,r4,8729
200880b0:	20088648 	cmpgei	zero,r4,8729
200880b4:	20088648 	cmpgei	zero,r4,8729
200880b8:	20088648 	cmpgei	zero,r4,8729
200880bc:	20088990 	cmplti	zero,r4,8742
200880c0:	20088990 	cmplti	zero,r4,8742
200880c4:	20088990 	cmplti	zero,r4,8742
200880c8:	20088990 	cmplti	zero,r4,8742
200880cc:	20088990 	cmplti	zero,r4,8742
200880d0:	20088990 	cmplti	zero,r4,8742
200880d4:	20088990 	cmplti	zero,r4,8742
200880d8:	20088990 	cmplti	zero,r4,8742
200880dc:	20088990 	cmplti	zero,r4,8742
200880e0:	20088990 	cmplti	zero,r4,8742
200880e4:	20088674 	orhi	zero,r4,8729
200880e8:	20088990 	cmplti	zero,r4,8742
200880ec:	20088990 	cmplti	zero,r4,8742
200880f0:	20088990 	cmplti	zero,r4,8742
200880f4:	20088990 	cmplti	zero,r4,8742
200880f8:	20088990 	cmplti	zero,r4,8742
200880fc:	20088990 	cmplti	zero,r4,8742
20088100:	20088990 	cmplti	zero,r4,8742
20088104:	20088990 	cmplti	zero,r4,8742
20088108:	20088990 	cmplti	zero,r4,8742
2008810c:	20088990 	cmplti	zero,r4,8742
20088110:	20088200 	call	22008820 <__flash_rwdata_start+0x1f76a24>
20088114:	20088990 	cmplti	zero,r4,8742
20088118:	20088990 	cmplti	zero,r4,8742
2008811c:	20088990 	cmplti	zero,r4,8742
20088120:	20088990 	cmplti	zero,r4,8742
20088124:	20088990 	cmplti	zero,r4,8742
20088128:	200881cc 	andi	zero,r4,8711
2008812c:	20088990 	cmplti	zero,r4,8742
20088130:	20088990 	cmplti	zero,r4,8742
20088134:	20088814 	ori	zero,r4,8736
20088138:	20088990 	cmplti	zero,r4,8742
2008813c:	20088990 	cmplti	zero,r4,8742
20088140:	20088990 	cmplti	zero,r4,8742
20088144:	20088990 	cmplti	zero,r4,8742
20088148:	20088990 	cmplti	zero,r4,8742
2008814c:	20088990 	cmplti	zero,r4,8742
20088150:	20088990 	cmplti	zero,r4,8742
20088154:	20088990 	cmplti	zero,r4,8742
20088158:	20088990 	cmplti	zero,r4,8742
2008815c:	20088990 	cmplti	zero,r4,8742
20088160:	200887b4 	orhi	zero,r4,8734
20088164:	200887e0 	cmpeqi	zero,r4,8735
20088168:	20088990 	cmplti	zero,r4,8742
2008816c:	20088990 	cmplti	zero,r4,8742
20088170:	20088990 	cmplti	zero,r4,8742
20088174:	200888bc 	xorhi	zero,r4,8738
20088178:	200887e0 	cmpeqi	zero,r4,8735
2008817c:	20088990 	cmplti	zero,r4,8742
20088180:	20088990 	cmplti	zero,r4,8742
20088184:	200888cc 	andi	zero,r4,8739
20088188:	20088990 	cmplti	zero,r4,8742
2008818c:	200886f8 	rdprs	zero,r4,8731
20088190:	20088204 	addi	zero,r4,8712
20088194:	200888e0 	cmpeqi	zero,r4,8739
20088198:	20088920 	cmpeqi	zero,r4,8740
2008819c:	20088990 	cmplti	zero,r4,8742
200881a0:	20088868 	cmpgeui	zero,r4,8737
200881a4:	20088990 	cmplti	zero,r4,8742
200881a8:	200881d0 	cmplti	zero,r4,8711
200881ac:	20088990 	cmplti	zero,r4,8742
200881b0:	20088990 	cmplti	zero,r4,8742
200881b4:	20088930 	cmpltui	zero,r4,8740
200881b8:	42000204 	addi	r8,r8,8
200881bc:	d8802317 	ldw	r2,140(sp)
200881c0:	1485883a 	add	r2,r2,r18
200881c4:	d8802315 	stw	r2,140(sp)
200881c8:	003f8c06 	br	20087ffc <__flash_rwdata_start+0xffff6200>
200881cc:	ad400414 	ori	r21,r21,16
200881d0:	a880080c 	andi	r2,r21,32
200881d4:	1001e61e 	bne	r2,zero,20088970 <___vfiprintf_internal_r+0xab8>
200881d8:	a880040c 	andi	r2,r21,16
200881dc:	10034726 	beq	r2,zero,20088efc <___vfiprintf_internal_r+0x1044>
200881e0:	d8802217 	ldw	r2,136(sp)
200881e4:	001b883a 	mov	r13,zero
200881e8:	15800017 	ldw	r22,0(r2)
200881ec:	10800104 	addi	r2,r2,4
200881f0:	d8802215 	stw	r2,136(sp)
200881f4:	b009883a 	mov	r4,r22
200881f8:	00800044 	movi	r2,1
200881fc:	00000c06 	br	20088230 <___vfiprintf_internal_r+0x378>
20088200:	ad400414 	ori	r21,r21,16
20088204:	a880080c 	andi	r2,r21,32
20088208:	1001491e 	bne	r2,zero,20088730 <___vfiprintf_internal_r+0x878>
2008820c:	a880040c 	andi	r2,r21,16
20088210:	10032d26 	beq	r2,zero,20088ec8 <___vfiprintf_internal_r+0x1010>
20088214:	d9002217 	ldw	r4,136(sp)
20088218:	001b883a 	mov	r13,zero
2008821c:	0005883a 	mov	r2,zero
20088220:	25800017 	ldw	r22,0(r4)
20088224:	21000104 	addi	r4,r4,4
20088228:	d9002215 	stw	r4,136(sp)
2008822c:	b009883a 	mov	r4,r22
20088230:	d8001d85 	stb	zero,118(sp)
20088234:	4827883a 	mov	r19,r9
20088238:	001d883a 	mov	r14,zero
2008823c:	48000216 	blt	r9,zero,20088248 <___vfiprintf_internal_r+0x390>
20088240:	00ffdfc4 	movi	r3,-129
20088244:	a8ea703a 	and	r21,r21,r3
20088248:	2002071e 	bne	r4,zero,20088a68 <___vfiprintf_internal_r+0xbb0>
2008824c:	4802ad26 	beq	r9,zero,20088d04 <___vfiprintf_internal_r+0xe4c>
20088250:	10803fcc 	andi	r2,r2,255
20088254:	00c00044 	movi	r3,1
20088258:	10c22b26 	beq	r2,r3,20088b08 <___vfiprintf_internal_r+0xc50>
2008825c:	00c00084 	movi	r3,2
20088260:	dd001a04 	addi	r20,sp,104
20088264:	10c0dd1e 	bne	r2,r3,200885dc <___vfiprintf_internal_r+0x724>
20088268:	d9002617 	ldw	r4,152(sp)
2008826c:	b08003cc 	andi	r2,r22,15
20088270:	6806973a 	slli	r3,r13,28
20088274:	2085883a 	add	r2,r4,r2
20088278:	b02cd13a 	srli	r22,r22,4
2008827c:	10800003 	ldbu	r2,0(r2)
20088280:	681ad13a 	srli	r13,r13,4
20088284:	a53fffc4 	addi	r20,r20,-1
20088288:	1dacb03a 	or	r22,r3,r22
2008828c:	a0800005 	stb	r2,0(r20)
20088290:	b344b03a 	or	r2,r22,r13
20088294:	103ff51e 	bne	r2,zero,2008826c <__flash_rwdata_start+0xffff6470>
20088298:	d9001e17 	ldw	r4,120(sp)
2008829c:	2527c83a 	sub	r19,r4,r20
200882a0:	9823883a 	mov	r17,r19
200882a4:	9a40010e 	bge	r19,r9,200882ac <___vfiprintf_internal_r+0x3f4>
200882a8:	4823883a 	mov	r17,r9
200882ac:	73803fcc 	andi	r14,r14,255
200882b0:	7380201c 	xori	r14,r14,128
200882b4:	73bfe004 	addi	r14,r14,-128
200882b8:	70000126 	beq	r14,zero,200882c0 <___vfiprintf_internal_r+0x408>
200882bc:	8c400044 	addi	r17,r17,1
200882c0:	ab40008c 	andi	r13,r21,2
200882c4:	68000126 	beq	r13,zero,200882cc <___vfiprintf_internal_r+0x414>
200882c8:	8c400084 	addi	r17,r17,2
200882cc:	ad80210c 	andi	r22,r21,132
200882d0:	b001c51e 	bne	r22,zero,200889e8 <___vfiprintf_internal_r+0xb30>
200882d4:	9447c83a 	sub	r3,r18,r17
200882d8:	00c1c30e 	bge	zero,r3,200889e8 <___vfiprintf_internal_r+0xb30>
200882dc:	01c00404 	movi	r7,16
200882e0:	d8801c17 	ldw	r2,112(sp)
200882e4:	38c37b0e 	bge	r7,r3,200890d4 <___vfiprintf_internal_r+0x121c>
200882e8:	01000034 	movhi	r4,0
200882ec:	21008804 	addi	r4,r4,544
200882f0:	dc002915 	stw	r16,164(sp)
200882f4:	d9801b17 	ldw	r6,108(sp)
200882f8:	d9002415 	stw	r4,144(sp)
200882fc:	03c001c4 	movi	r15,7
20088300:	da402515 	stw	r9,148(sp)
20088304:	db402815 	stw	r13,160(sp)
20088308:	1821883a 	mov	r16,r3
2008830c:	00000506 	br	20088324 <___vfiprintf_internal_r+0x46c>
20088310:	31400084 	addi	r5,r6,2
20088314:	42000204 	addi	r8,r8,8
20088318:	200d883a 	mov	r6,r4
2008831c:	843ffc04 	addi	r16,r16,-16
20088320:	3c000d0e 	bge	r7,r16,20088358 <___vfiprintf_internal_r+0x4a0>
20088324:	10800404 	addi	r2,r2,16
20088328:	31000044 	addi	r4,r6,1
2008832c:	47000015 	stw	fp,0(r8)
20088330:	41c00115 	stw	r7,4(r8)
20088334:	d8801c15 	stw	r2,112(sp)
20088338:	d9001b15 	stw	r4,108(sp)
2008833c:	793ff40e 	bge	r15,r4,20088310 <__flash_rwdata_start+0xffff6514>
20088340:	10019b1e 	bne	r2,zero,200889b0 <___vfiprintf_internal_r+0xaf8>
20088344:	843ffc04 	addi	r16,r16,-16
20088348:	000d883a 	mov	r6,zero
2008834c:	01400044 	movi	r5,1
20088350:	d811883a 	mov	r8,sp
20088354:	3c3ff316 	blt	r7,r16,20088324 <__flash_rwdata_start+0xffff6528>
20088358:	8007883a 	mov	r3,r16
2008835c:	da402517 	ldw	r9,148(sp)
20088360:	db402817 	ldw	r13,160(sp)
20088364:	dc002917 	ldw	r16,164(sp)
20088368:	d9002417 	ldw	r4,144(sp)
2008836c:	1885883a 	add	r2,r3,r2
20088370:	40c00115 	stw	r3,4(r8)
20088374:	41000015 	stw	r4,0(r8)
20088378:	d8801c15 	stw	r2,112(sp)
2008837c:	d9401b15 	stw	r5,108(sp)
20088380:	00c001c4 	movi	r3,7
20088384:	19426a16 	blt	r3,r5,20088d30 <___vfiprintf_internal_r+0xe78>
20088388:	d8c01d87 	ldb	r3,118(sp)
2008838c:	42000204 	addi	r8,r8,8
20088390:	29000044 	addi	r4,r5,1
20088394:	1801991e 	bne	r3,zero,200889fc <___vfiprintf_internal_r+0xb44>
20088398:	68000c26 	beq	r13,zero,200883cc <___vfiprintf_internal_r+0x514>
2008839c:	d8c01d04 	addi	r3,sp,116
200883a0:	10800084 	addi	r2,r2,2
200883a4:	40c00015 	stw	r3,0(r8)
200883a8:	00c00084 	movi	r3,2
200883ac:	40c00115 	stw	r3,4(r8)
200883b0:	d8801c15 	stw	r2,112(sp)
200883b4:	d9001b15 	stw	r4,108(sp)
200883b8:	00c001c4 	movi	r3,7
200883bc:	19024c16 	blt	r3,r4,20088cf0 <___vfiprintf_internal_r+0xe38>
200883c0:	200b883a 	mov	r5,r4
200883c4:	42000204 	addi	r8,r8,8
200883c8:	21000044 	addi	r4,r4,1
200883cc:	00c02004 	movi	r3,128
200883d0:	b0c20126 	beq	r22,r3,20088bd8 <___vfiprintf_internal_r+0xd20>
200883d4:	4cedc83a 	sub	r22,r9,r19
200883d8:	0580230e 	bge	zero,r22,20088468 <___vfiprintf_internal_r+0x5b0>
200883dc:	01c00404 	movi	r7,16
200883e0:	3d83140e 	bge	r7,r22,20089034 <___vfiprintf_internal_r+0x117c>
200883e4:	01000034 	movhi	r4,0
200883e8:	21008404 	addi	r4,r4,528
200883ec:	d9002415 	stw	r4,144(sp)
200883f0:	034001c4 	movi	r13,7
200883f4:	00000506 	br	2008840c <___vfiprintf_internal_r+0x554>
200883f8:	29000084 	addi	r4,r5,2
200883fc:	42000204 	addi	r8,r8,8
20088400:	180b883a 	mov	r5,r3
20088404:	b5bffc04 	addi	r22,r22,-16
20088408:	3d800d0e 	bge	r7,r22,20088440 <___vfiprintf_internal_r+0x588>
2008840c:	10800404 	addi	r2,r2,16
20088410:	28c00044 	addi	r3,r5,1
20088414:	45c00015 	stw	r23,0(r8)
20088418:	41c00115 	stw	r7,4(r8)
2008841c:	d8801c15 	stw	r2,112(sp)
20088420:	d8c01b15 	stw	r3,108(sp)
20088424:	68fff40e 	bge	r13,r3,200883f8 <__flash_rwdata_start+0xffff65fc>
20088428:	1001811e 	bne	r2,zero,20088a30 <___vfiprintf_internal_r+0xb78>
2008842c:	b5bffc04 	addi	r22,r22,-16
20088430:	01000044 	movi	r4,1
20088434:	000b883a 	mov	r5,zero
20088438:	d811883a 	mov	r8,sp
2008843c:	3dbff316 	blt	r7,r22,2008840c <__flash_rwdata_start+0xffff6610>
20088440:	d8c02417 	ldw	r3,144(sp)
20088444:	1585883a 	add	r2,r2,r22
20088448:	45800115 	stw	r22,4(r8)
2008844c:	40c00015 	stw	r3,0(r8)
20088450:	d8801c15 	stw	r2,112(sp)
20088454:	d9001b15 	stw	r4,108(sp)
20088458:	00c001c4 	movi	r3,7
2008845c:	1901d016 	blt	r3,r4,20088ba0 <___vfiprintf_internal_r+0xce8>
20088460:	42000204 	addi	r8,r8,8
20088464:	21000044 	addi	r4,r4,1
20088468:	14c5883a 	add	r2,r2,r19
2008846c:	45000015 	stw	r20,0(r8)
20088470:	44c00115 	stw	r19,4(r8)
20088474:	d8801c15 	stw	r2,112(sp)
20088478:	d9001b15 	stw	r4,108(sp)
2008847c:	00c001c4 	movi	r3,7
20088480:	1901cf0e 	bge	r3,r4,20088bc0 <___vfiprintf_internal_r+0xd08>
20088484:	1002361e 	bne	r2,zero,20088d60 <___vfiprintf_internal_r+0xea8>
20088488:	d8001b15 	stw	zero,108(sp)
2008848c:	aac0010c 	andi	r11,r21,4
20088490:	58002826 	beq	r11,zero,20088534 <___vfiprintf_internal_r+0x67c>
20088494:	9467c83a 	sub	r19,r18,r17
20088498:	d811883a 	mov	r8,sp
2008849c:	04c3340e 	bge	zero,r19,20089170 <___vfiprintf_internal_r+0x12b8>
200884a0:	01c00404 	movi	r7,16
200884a4:	3cc31b0e 	bge	r7,r19,20089114 <___vfiprintf_internal_r+0x125c>
200884a8:	00c00034 	movhi	r3,0
200884ac:	18c08804 	addi	r3,r3,544
200884b0:	d9001b17 	ldw	r4,108(sp)
200884b4:	d8c02415 	stw	r3,144(sp)
200884b8:	382b883a 	mov	r21,r7
200884bc:	050001c4 	movi	r20,7
200884c0:	dd802017 	ldw	r22,128(sp)
200884c4:	00000506 	br	200884dc <___vfiprintf_internal_r+0x624>
200884c8:	21400084 	addi	r5,r4,2
200884cc:	42000204 	addi	r8,r8,8
200884d0:	1809883a 	mov	r4,r3
200884d4:	9cfffc04 	addi	r19,r19,-16
200884d8:	acc00d0e 	bge	r21,r19,20088510 <___vfiprintf_internal_r+0x658>
200884dc:	10800404 	addi	r2,r2,16
200884e0:	20c00044 	addi	r3,r4,1
200884e4:	47000015 	stw	fp,0(r8)
200884e8:	45400115 	stw	r21,4(r8)
200884ec:	d8801c15 	stw	r2,112(sp)
200884f0:	d8c01b15 	stw	r3,108(sp)
200884f4:	a0fff40e 	bge	r20,r3,200884c8 <__flash_rwdata_start+0xffff66cc>
200884f8:	10019f1e 	bne	r2,zero,20088b78 <___vfiprintf_internal_r+0xcc0>
200884fc:	9cfffc04 	addi	r19,r19,-16
20088500:	01400044 	movi	r5,1
20088504:	0009883a 	mov	r4,zero
20088508:	d811883a 	mov	r8,sp
2008850c:	acfff316 	blt	r21,r19,200884dc <__flash_rwdata_start+0xffff66e0>
20088510:	d8c02417 	ldw	r3,144(sp)
20088514:	14c5883a 	add	r2,r2,r19
20088518:	44c00115 	stw	r19,4(r8)
2008851c:	40c00015 	stw	r3,0(r8)
20088520:	d8801c15 	stw	r2,112(sp)
20088524:	d9401b15 	stw	r5,108(sp)
20088528:	00c001c4 	movi	r3,7
2008852c:	1941810e 	bge	r3,r5,20088b34 <___vfiprintf_internal_r+0xc7c>
20088530:	10017a1e 	bne	r2,zero,20088b1c <___vfiprintf_internal_r+0xc64>
20088534:	8c82a416 	blt	r17,r18,20088fc8 <___vfiprintf_internal_r+0x1110>
20088538:	d9002317 	ldw	r4,140(sp)
2008853c:	2449883a 	add	r4,r4,r17
20088540:	d9002315 	stw	r4,140(sp)
20088544:	d8001b15 	stw	zero,108(sp)
20088548:	d811883a 	mov	r8,sp
2008854c:	003e8e06 	br	20087f88 <__flash_rwdata_start+0xffff618c>
20088550:	d9002017 	ldw	r4,128(sp)
20088554:	a80b883a 	mov	r5,r21
20088558:	00831040 	call	20083104 <__swsetup_r>
2008855c:	10000c1e 	bne	r2,zero,20088590 <___vfiprintf_internal_r+0x6d8>
20088560:	a880030b 	ldhu	r2,12(r21)
20088564:	00c00284 	movi	r3,10
20088568:	1080068c 	andi	r2,r2,26
2008856c:	10fe741e 	bne	r2,r3,20087f40 <__flash_rwdata_start+0xffff6144>
20088570:	a880038f 	ldh	r2,14(r21)
20088574:	103e7216 	blt	r2,zero,20087f40 <__flash_rwdata_start+0xffff6144>
20088578:	d9002017 	ldw	r4,128(sp)
2008857c:	d9c02217 	ldw	r7,136(sp)
20088580:	a80b883a 	mov	r5,r21
20088584:	b00d883a 	mov	r6,r22
20088588:	00891ac0 	call	200891ac <__sbprintf>
2008858c:	00000106 	br	20088594 <___vfiprintf_internal_r+0x6dc>
20088590:	00bfffc4 	movi	r2,-1
20088594:	dfc03517 	ldw	ra,212(sp)
20088598:	df003417 	ldw	fp,208(sp)
2008859c:	ddc03317 	ldw	r23,204(sp)
200885a0:	dd803217 	ldw	r22,200(sp)
200885a4:	dd403117 	ldw	r21,196(sp)
200885a8:	dd003017 	ldw	r20,192(sp)
200885ac:	dcc02f17 	ldw	r19,188(sp)
200885b0:	dc802e17 	ldw	r18,184(sp)
200885b4:	dc402d17 	ldw	r17,180(sp)
200885b8:	dc002c17 	ldw	r16,176(sp)
200885bc:	dec03604 	addi	sp,sp,216
200885c0:	f800283a 	ret
200885c4:	00852f80 	call	200852f8 <__sinit>
200885c8:	003e4d06 	br	20087f00 <__flash_rwdata_start+0xffff6104>
200885cc:	8005883a 	mov	r2,r16
200885d0:	ad400114 	ori	r21,r21,4
200885d4:	80c00007 	ldb	r3,0(r16)
200885d8:	003e9506 	br	20088030 <__flash_rwdata_start+0xffff6234>
200885dc:	b006d0fa 	srli	r3,r22,3
200885e0:	6808977a 	slli	r4,r13,29
200885e4:	681ad0fa 	srli	r13,r13,3
200885e8:	b58001cc 	andi	r22,r22,7
200885ec:	b0800c04 	addi	r2,r22,48
200885f0:	a53fffc4 	addi	r20,r20,-1
200885f4:	20ecb03a 	or	r22,r4,r3
200885f8:	a0800005 	stb	r2,0(r20)
200885fc:	b346b03a 	or	r3,r22,r13
20088600:	183ff61e 	bne	r3,zero,200885dc <__flash_rwdata_start+0xffff67e0>
20088604:	a8c0004c 	andi	r3,r21,1
20088608:	a009883a 	mov	r4,r20
2008860c:	18013b26 	beq	r3,zero,20088afc <___vfiprintf_internal_r+0xc44>
20088610:	10803fcc 	andi	r2,r2,255
20088614:	1080201c 	xori	r2,r2,128
20088618:	10bfe004 	addi	r2,r2,-128
2008861c:	00c00c04 	movi	r3,48
20088620:	10ff1d26 	beq	r2,r3,20088298 <__flash_rwdata_start+0xffff649c>
20088624:	d8801e17 	ldw	r2,120(sp)
20088628:	a53fffc4 	addi	r20,r20,-1
2008862c:	20ffffc5 	stb	r3,-1(r4)
20088630:	1527c83a 	sub	r19,r2,r20
20088634:	003f1a06 	br	200882a0 <__flash_rwdata_start+0xffff64a4>
20088638:	ad402014 	ori	r21,r21,128
2008863c:	8005883a 	mov	r2,r16
20088640:	80c00007 	ldb	r3,0(r16)
20088644:	003e7a06 	br	20088030 <__flash_rwdata_start+0xffff6234>
20088648:	8005883a 	mov	r2,r16
2008864c:	0025883a 	mov	r18,zero
20088650:	193ff404 	addi	r4,r3,-48
20088654:	10c00007 	ldb	r3,0(r2)
20088658:	948002a4 	muli	r18,r18,10
2008865c:	84000044 	addi	r16,r16,1
20088660:	8005883a 	mov	r2,r16
20088664:	9125883a 	add	r18,r18,r4
20088668:	193ff404 	addi	r4,r3,-48
2008866c:	313ff92e 	bgeu	r6,r4,20088654 <__flash_rwdata_start+0xffff6858>
20088670:	003e7006 	br	20088034 <__flash_rwdata_start+0xffff6238>
20088674:	ad400414 	ori	r21,r21,16
20088678:	d9c01d85 	stb	r7,118(sp)
2008867c:	a880080c 	andi	r2,r21,32
20088680:	d8c02217 	ldw	r3,136(sp)
20088684:	10005a26 	beq	r2,zero,200887f0 <___vfiprintf_internal_r+0x938>
20088688:	d9002217 	ldw	r4,136(sp)
2008868c:	18800117 	ldw	r2,4(r3)
20088690:	1d800017 	ldw	r22,0(r3)
20088694:	21000204 	addi	r4,r4,8
20088698:	d9002215 	stw	r4,136(sp)
2008869c:	101b883a 	mov	r13,r2
200886a0:	1001f416 	blt	r2,zero,20088e74 <___vfiprintf_internal_r+0xfbc>
200886a4:	db801d83 	ldbu	r14,118(sp)
200886a8:	4827883a 	mov	r19,r9
200886ac:	00800044 	movi	r2,1
200886b0:	b348b03a 	or	r4,r22,r13
200886b4:	003ee106 	br	2008823c <__flash_rwdata_start+0xffff6440>
200886b8:	80c00007 	ldb	r3,0(r16)
200886bc:	80800044 	addi	r2,r16,1
200886c0:	1b42a326 	beq	r3,r13,20089150 <___vfiprintf_internal_r+0x1298>
200886c4:	193ff404 	addi	r4,r3,-48
200886c8:	1021883a 	mov	r16,r2
200886cc:	0013883a 	mov	r9,zero
200886d0:	313e5836 	bltu	r6,r4,20088034 <__flash_rwdata_start+0xffff6238>
200886d4:	80c00007 	ldb	r3,0(r16)
200886d8:	4a4002a4 	muli	r9,r9,10
200886dc:	84000044 	addi	r16,r16,1
200886e0:	2253883a 	add	r9,r4,r9
200886e4:	193ff404 	addi	r4,r3,-48
200886e8:	313ffa2e 	bgeu	r6,r4,200886d4 <__flash_rwdata_start+0xffff68d8>
200886ec:	483e510e 	bge	r9,zero,20088034 <__flash_rwdata_start+0xffff6238>
200886f0:	027fffc4 	movi	r9,-1
200886f4:	003e4f06 	br	20088034 <__flash_rwdata_start+0xffff6238>
200886f8:	d9c01d85 	stb	r7,118(sp)
200886fc:	a880080c 	andi	r2,r21,32
20088700:	10020826 	beq	r2,zero,20088f24 <___vfiprintf_internal_r+0x106c>
20088704:	d8c02217 	ldw	r3,136(sp)
20088708:	d9002317 	ldw	r4,140(sp)
2008870c:	18800017 	ldw	r2,0(r3)
20088710:	2007d7fa 	srai	r3,r4,31
20088714:	d9002217 	ldw	r4,136(sp)
20088718:	10c00115 	stw	r3,4(r2)
2008871c:	21000104 	addi	r4,r4,4
20088720:	d9002215 	stw	r4,136(sp)
20088724:	d9002317 	ldw	r4,140(sp)
20088728:	11000015 	stw	r4,0(r2)
2008872c:	003e1606 	br	20087f88 <__flash_rwdata_start+0xffff618c>
20088730:	d8802217 	ldw	r2,136(sp)
20088734:	d8c02217 	ldw	r3,136(sp)
20088738:	15800017 	ldw	r22,0(r2)
2008873c:	13400117 	ldw	r13,4(r2)
20088740:	18c00204 	addi	r3,r3,8
20088744:	0005883a 	mov	r2,zero
20088748:	d8c02215 	stw	r3,136(sp)
2008874c:	b348b03a 	or	r4,r22,r13
20088750:	003eb706 	br	20088230 <__flash_rwdata_start+0xffff6434>
20088754:	38803fcc 	andi	r2,r7,255
20088758:	1080201c 	xori	r2,r2,128
2008875c:	10bfe004 	addi	r2,r2,-128
20088760:	1001e31e 	bne	r2,zero,20088ef0 <___vfiprintf_internal_r+0x1038>
20088764:	8005883a 	mov	r2,r16
20088768:	01c00804 	movi	r7,32
2008876c:	80c00007 	ldb	r3,0(r16)
20088770:	003e2f06 	br	20088030 <__flash_rwdata_start+0xffff6234>
20088774:	ad400054 	ori	r21,r21,1
20088778:	8005883a 	mov	r2,r16
2008877c:	80c00007 	ldb	r3,0(r16)
20088780:	003e2b06 	br	20088030 <__flash_rwdata_start+0xffff6234>
20088784:	d8c02217 	ldw	r3,136(sp)
20088788:	1c800017 	ldw	r18,0(r3)
2008878c:	18c00104 	addi	r3,r3,4
20088790:	90023816 	blt	r18,zero,20089074 <___vfiprintf_internal_r+0x11bc>
20088794:	d8c02215 	stw	r3,136(sp)
20088798:	8005883a 	mov	r2,r16
2008879c:	80c00007 	ldb	r3,0(r16)
200887a0:	003e2306 	br	20088030 <__flash_rwdata_start+0xffff6234>
200887a4:	8005883a 	mov	r2,r16
200887a8:	01c00ac4 	movi	r7,43
200887ac:	80c00007 	ldb	r3,0(r16)
200887b0:	003e1f06 	br	20088030 <__flash_rwdata_start+0xffff6234>
200887b4:	d8c02217 	ldw	r3,136(sp)
200887b8:	04400044 	movi	r17,1
200887bc:	d8001d85 	stb	zero,118(sp)
200887c0:	18800017 	ldw	r2,0(r3)
200887c4:	18c00104 	addi	r3,r3,4
200887c8:	d8c02215 	stw	r3,136(sp)
200887cc:	d8801005 	stb	r2,64(sp)
200887d0:	8827883a 	mov	r19,r17
200887d4:	dd001004 	addi	r20,sp,64
200887d8:	0013883a 	mov	r9,zero
200887dc:	003eb806 	br	200882c0 <__flash_rwdata_start+0xffff64c4>
200887e0:	d9c01d85 	stb	r7,118(sp)
200887e4:	a880080c 	andi	r2,r21,32
200887e8:	d8c02217 	ldw	r3,136(sp)
200887ec:	103fa61e 	bne	r2,zero,20088688 <__flash_rwdata_start+0xffff688c>
200887f0:	a880040c 	andi	r2,r21,16
200887f4:	1001dd26 	beq	r2,zero,20088f6c <___vfiprintf_internal_r+0x10b4>
200887f8:	1d800017 	ldw	r22,0(r3)
200887fc:	d8802217 	ldw	r2,136(sp)
20088800:	b01bd7fa 	srai	r13,r22,31
20088804:	10800104 	addi	r2,r2,4
20088808:	d8802215 	stw	r2,136(sp)
2008880c:	6805883a 	mov	r2,r13
20088810:	003fa306 	br	200886a0 <__flash_rwdata_start+0xffff68a4>
20088814:	00800034 	movhi	r2,0
20088818:	10801f04 	addi	r2,r2,124
2008881c:	d8802615 	stw	r2,152(sp)
20088820:	d9c01d85 	stb	r7,118(sp)
20088824:	a880080c 	andi	r2,r21,32
20088828:	10004726 	beq	r2,zero,20088948 <___vfiprintf_internal_r+0xa90>
2008882c:	d9002217 	ldw	r4,136(sp)
20088830:	25800017 	ldw	r22,0(r4)
20088834:	23400117 	ldw	r13,4(r4)
20088838:	21000204 	addi	r4,r4,8
2008883c:	d9002215 	stw	r4,136(sp)
20088840:	a880004c 	andi	r2,r21,1
20088844:	10014e26 	beq	r2,zero,20088d80 <___vfiprintf_internal_r+0xec8>
20088848:	b348b03a 	or	r4,r22,r13
2008884c:	20019c26 	beq	r4,zero,20088ec0 <___vfiprintf_internal_r+0x1008>
20088850:	00800c04 	movi	r2,48
20088854:	d8801d05 	stb	r2,116(sp)
20088858:	d8c01d45 	stb	r3,117(sp)
2008885c:	ad400094 	ori	r21,r21,2
20088860:	00800084 	movi	r2,2
20088864:	003e7206 	br	20088230 <__flash_rwdata_start+0xffff6434>
20088868:	d8c02217 	ldw	r3,136(sp)
2008886c:	d8001d85 	stb	zero,118(sp)
20088870:	1d000017 	ldw	r20,0(r3)
20088874:	1d800104 	addi	r22,r3,4
20088878:	a0021c26 	beq	r20,zero,200890ec <___vfiprintf_internal_r+0x1234>
2008887c:	a009883a 	mov	r4,r20
20088880:	48020016 	blt	r9,zero,20089084 <___vfiprintf_internal_r+0x11cc>
20088884:	480d883a 	mov	r6,r9
20088888:	000b883a 	mov	r5,zero
2008888c:	da002a15 	stw	r8,168(sp)
20088890:	da402b15 	stw	r9,172(sp)
20088894:	008603c0 	call	2008603c <memchr>
20088898:	da002a17 	ldw	r8,168(sp)
2008889c:	da402b17 	ldw	r9,172(sp)
200888a0:	10022226 	beq	r2,zero,2008912c <___vfiprintf_internal_r+0x1274>
200888a4:	1527c83a 	sub	r19,r2,r20
200888a8:	4cc1c916 	blt	r9,r19,20088fd0 <___vfiprintf_internal_r+0x1118>
200888ac:	db801d83 	ldbu	r14,118(sp)
200888b0:	dd802215 	stw	r22,136(sp)
200888b4:	0013883a 	mov	r9,zero
200888b8:	003e7906 	br	200882a0 <__flash_rwdata_start+0xffff64a4>
200888bc:	ad401014 	ori	r21,r21,64
200888c0:	8005883a 	mov	r2,r16
200888c4:	80c00007 	ldb	r3,0(r16)
200888c8:	003dd906 	br	20088030 <__flash_rwdata_start+0xffff6234>
200888cc:	80c00007 	ldb	r3,0(r16)
200888d0:	8005883a 	mov	r2,r16
200888d4:	1b01e326 	beq	r3,r12,20089064 <___vfiprintf_internal_r+0x11ac>
200888d8:	ad400414 	ori	r21,r21,16
200888dc:	003dd406 	br	20088030 <__flash_rwdata_start+0xffff6234>
200888e0:	d9002217 	ldw	r4,136(sp)
200888e4:	00800c04 	movi	r2,48
200888e8:	d8801d05 	stb	r2,116(sp)
200888ec:	25800017 	ldw	r22,0(r4)
200888f0:	00801e04 	movi	r2,120
200888f4:	d8801d45 	stb	r2,117(sp)
200888f8:	00800034 	movhi	r2,0
200888fc:	21000104 	addi	r4,r4,4
20088900:	10802404 	addi	r2,r2,144
20088904:	d9002215 	stw	r4,136(sp)
20088908:	d8802615 	stw	r2,152(sp)
2008890c:	001b883a 	mov	r13,zero
20088910:	ad400094 	ori	r21,r21,2
20088914:	00800084 	movi	r2,2
20088918:	b009883a 	mov	r4,r22
2008891c:	003e4406 	br	20088230 <__flash_rwdata_start+0xffff6434>
20088920:	ad400814 	ori	r21,r21,32
20088924:	8005883a 	mov	r2,r16
20088928:	80c00007 	ldb	r3,0(r16)
2008892c:	003dc006 	br	20088030 <__flash_rwdata_start+0xffff6234>
20088930:	00800034 	movhi	r2,0
20088934:	10802404 	addi	r2,r2,144
20088938:	d8802615 	stw	r2,152(sp)
2008893c:	d9c01d85 	stb	r7,118(sp)
20088940:	a880080c 	andi	r2,r21,32
20088944:	103fb91e 	bne	r2,zero,2008882c <__flash_rwdata_start+0xffff6a30>
20088948:	a880040c 	andi	r2,r21,16
2008894c:	10010f1e 	bne	r2,zero,20088d8c <___vfiprintf_internal_r+0xed4>
20088950:	a880100c 	andi	r2,r21,64
20088954:	10010d26 	beq	r2,zero,20088d8c <___vfiprintf_internal_r+0xed4>
20088958:	d9002217 	ldw	r4,136(sp)
2008895c:	001b883a 	mov	r13,zero
20088960:	2580000b 	ldhu	r22,0(r4)
20088964:	21000104 	addi	r4,r4,4
20088968:	d9002215 	stw	r4,136(sp)
2008896c:	003fb406 	br	20088840 <__flash_rwdata_start+0xffff6a44>
20088970:	d9002217 	ldw	r4,136(sp)
20088974:	00800044 	movi	r2,1
20088978:	25800017 	ldw	r22,0(r4)
2008897c:	23400117 	ldw	r13,4(r4)
20088980:	21000204 	addi	r4,r4,8
20088984:	d9002215 	stw	r4,136(sp)
20088988:	b348b03a 	or	r4,r22,r13
2008898c:	003e2806 	br	20088230 <__flash_rwdata_start+0xffff6434>
20088990:	d9c01d85 	stb	r7,118(sp)
20088994:	1801ab26 	beq	r3,zero,20089044 <___vfiprintf_internal_r+0x118c>
20088998:	04400044 	movi	r17,1
2008899c:	d8c01005 	stb	r3,64(sp)
200889a0:	d8001d85 	stb	zero,118(sp)
200889a4:	8827883a 	mov	r19,r17
200889a8:	dd001004 	addi	r20,sp,64
200889ac:	003f8a06 	br	200887d8 <__flash_rwdata_start+0xffff69dc>
200889b0:	d9002017 	ldw	r4,128(sp)
200889b4:	d9402117 	ldw	r5,132(sp)
200889b8:	d9801a04 	addi	r6,sp,104
200889bc:	d9c02b15 	stw	r7,172(sp)
200889c0:	dbc02a15 	stw	r15,168(sp)
200889c4:	0087da40 	call	20087da4 <__sprint_r.part.0>
200889c8:	d9c02b17 	ldw	r7,172(sp)
200889cc:	dbc02a17 	ldw	r15,168(sp)
200889d0:	1000631e 	bne	r2,zero,20088b60 <___vfiprintf_internal_r+0xca8>
200889d4:	d9801b17 	ldw	r6,108(sp)
200889d8:	d8801c17 	ldw	r2,112(sp)
200889dc:	d811883a 	mov	r8,sp
200889e0:	31400044 	addi	r5,r6,1
200889e4:	003e4d06 	br	2008831c <__flash_rwdata_start+0xffff6520>
200889e8:	d9401b17 	ldw	r5,108(sp)
200889ec:	d8801c17 	ldw	r2,112(sp)
200889f0:	29000044 	addi	r4,r5,1
200889f4:	d8c01d87 	ldb	r3,118(sp)
200889f8:	183e6726 	beq	r3,zero,20088398 <__flash_rwdata_start+0xffff659c>
200889fc:	00c00044 	movi	r3,1
20088a00:	d9401d84 	addi	r5,sp,118
20088a04:	10c5883a 	add	r2,r2,r3
20088a08:	41400015 	stw	r5,0(r8)
20088a0c:	40c00115 	stw	r3,4(r8)
20088a10:	d8801c15 	stw	r2,112(sp)
20088a14:	d9001b15 	stw	r4,108(sp)
20088a18:	014001c4 	movi	r5,7
20088a1c:	2900ab16 	blt	r5,r4,20088ccc <___vfiprintf_internal_r+0xe14>
20088a20:	200b883a 	mov	r5,r4
20088a24:	42000204 	addi	r8,r8,8
20088a28:	21000044 	addi	r4,r4,1
20088a2c:	003e5a06 	br	20088398 <__flash_rwdata_start+0xffff659c>
20088a30:	d9002017 	ldw	r4,128(sp)
20088a34:	d9402117 	ldw	r5,132(sp)
20088a38:	d9801a04 	addi	r6,sp,104
20088a3c:	d9c02b15 	stw	r7,172(sp)
20088a40:	db402a15 	stw	r13,168(sp)
20088a44:	0087da40 	call	20087da4 <__sprint_r.part.0>
20088a48:	d9c02b17 	ldw	r7,172(sp)
20088a4c:	db402a17 	ldw	r13,168(sp)
20088a50:	1000431e 	bne	r2,zero,20088b60 <___vfiprintf_internal_r+0xca8>
20088a54:	d9401b17 	ldw	r5,108(sp)
20088a58:	d8801c17 	ldw	r2,112(sp)
20088a5c:	d811883a 	mov	r8,sp
20088a60:	29000044 	addi	r4,r5,1
20088a64:	003e6706 	br	20088404 <__flash_rwdata_start+0xffff6608>
20088a68:	10803fcc 	andi	r2,r2,255
20088a6c:	00c00044 	movi	r3,1
20088a70:	10fdfa1e 	bne	r2,r3,2008825c <__flash_rwdata_start+0xffff6460>
20088a74:	6800021e 	bne	r13,zero,20088a80 <___vfiprintf_internal_r+0xbc8>
20088a78:	00800244 	movi	r2,9
20088a7c:	1580222e 	bgeu	r2,r22,20088b08 <___vfiprintf_internal_r+0xc50>
20088a80:	dc802415 	stw	r18,144(sp)
20088a84:	dc002515 	stw	r16,148(sp)
20088a88:	dc401a04 	addi	r17,sp,104
20088a8c:	b021883a 	mov	r16,r22
20088a90:	4827883a 	mov	r19,r9
20088a94:	4029883a 	mov	r20,r8
20088a98:	702d883a 	mov	r22,r14
20088a9c:	6825883a 	mov	r18,r13
20088aa0:	8009883a 	mov	r4,r16
20088aa4:	900b883a 	mov	r5,r18
20088aa8:	01800284 	movi	r6,10
20088aac:	000f883a 	mov	r7,zero
20088ab0:	008a1200 	call	2008a120 <__umoddi3>
20088ab4:	10800c04 	addi	r2,r2,48
20088ab8:	8c7fffc4 	addi	r17,r17,-1
20088abc:	8009883a 	mov	r4,r16
20088ac0:	900b883a 	mov	r5,r18
20088ac4:	01800284 	movi	r6,10
20088ac8:	000f883a 	mov	r7,zero
20088acc:	88800005 	stb	r2,0(r17)
20088ad0:	0089b600 	call	20089b60 <__udivdi3>
20088ad4:	1021883a 	mov	r16,r2
20088ad8:	10c4b03a 	or	r2,r2,r3
20088adc:	1825883a 	mov	r18,r3
20088ae0:	103fef1e 	bne	r2,zero,20088aa0 <__flash_rwdata_start+0xffff6ca4>
20088ae4:	dc802417 	ldw	r18,144(sp)
20088ae8:	dc002517 	ldw	r16,148(sp)
20088aec:	a011883a 	mov	r8,r20
20088af0:	9813883a 	mov	r9,r19
20088af4:	b01d883a 	mov	r14,r22
20088af8:	8829883a 	mov	r20,r17
20088afc:	d8c01e17 	ldw	r3,120(sp)
20088b00:	1d27c83a 	sub	r19,r3,r20
20088b04:	003de606 	br	200882a0 <__flash_rwdata_start+0xffff64a4>
20088b08:	b5800c04 	addi	r22,r22,48
20088b0c:	dd8019c5 	stb	r22,103(sp)
20088b10:	dcc02717 	ldw	r19,156(sp)
20088b14:	dd0019c4 	addi	r20,sp,103
20088b18:	003de106 	br	200882a0 <__flash_rwdata_start+0xffff64a4>
20088b1c:	d9002017 	ldw	r4,128(sp)
20088b20:	d9402117 	ldw	r5,132(sp)
20088b24:	d9801a04 	addi	r6,sp,104
20088b28:	0087da40 	call	20087da4 <__sprint_r.part.0>
20088b2c:	10000c1e 	bne	r2,zero,20088b60 <___vfiprintf_internal_r+0xca8>
20088b30:	d8801c17 	ldw	r2,112(sp)
20088b34:	8c80010e 	bge	r17,r18,20088b3c <___vfiprintf_internal_r+0xc84>
20088b38:	9023883a 	mov	r17,r18
20088b3c:	d8c02317 	ldw	r3,140(sp)
20088b40:	1c47883a 	add	r3,r3,r17
20088b44:	d8c02315 	stw	r3,140(sp)
20088b48:	103e7e26 	beq	r2,zero,20088544 <__flash_rwdata_start+0xffff6748>
20088b4c:	d9002017 	ldw	r4,128(sp)
20088b50:	d9402117 	ldw	r5,132(sp)
20088b54:	d9801a04 	addi	r6,sp,104
20088b58:	0087da40 	call	20087da4 <__sprint_r.part.0>
20088b5c:	103e7926 	beq	r2,zero,20088544 <__flash_rwdata_start+0xffff6748>
20088b60:	dd402117 	ldw	r21,132(sp)
20088b64:	a880030b 	ldhu	r2,12(r21)
20088b68:	1080100c 	andi	r2,r2,64
20088b6c:	103e881e 	bne	r2,zero,20088590 <__flash_rwdata_start+0xffff6794>
20088b70:	d8802317 	ldw	r2,140(sp)
20088b74:	003e8706 	br	20088594 <__flash_rwdata_start+0xffff6798>
20088b78:	d9402117 	ldw	r5,132(sp)
20088b7c:	b009883a 	mov	r4,r22
20088b80:	d9801a04 	addi	r6,sp,104
20088b84:	0087da40 	call	20087da4 <__sprint_r.part.0>
20088b88:	103ff51e 	bne	r2,zero,20088b60 <__flash_rwdata_start+0xffff6d64>
20088b8c:	d9001b17 	ldw	r4,108(sp)
20088b90:	d8801c17 	ldw	r2,112(sp)
20088b94:	d811883a 	mov	r8,sp
20088b98:	21400044 	addi	r5,r4,1
20088b9c:	003e4d06 	br	200884d4 <__flash_rwdata_start+0xffff66d8>
20088ba0:	1000aa1e 	bne	r2,zero,20088e4c <___vfiprintf_internal_r+0xf94>
20088ba4:	00c00044 	movi	r3,1
20088ba8:	9805883a 	mov	r2,r19
20088bac:	dd000015 	stw	r20,0(sp)
20088bb0:	dcc00115 	stw	r19,4(sp)
20088bb4:	dcc01c15 	stw	r19,112(sp)
20088bb8:	d8c01b15 	stw	r3,108(sp)
20088bbc:	d811883a 	mov	r8,sp
20088bc0:	42000204 	addi	r8,r8,8
20088bc4:	aac0010c 	andi	r11,r21,4
20088bc8:	583fda26 	beq	r11,zero,20088b34 <__flash_rwdata_start+0xffff6d38>
20088bcc:	9467c83a 	sub	r19,r18,r17
20088bd0:	04fe3316 	blt	zero,r19,200884a0 <__flash_rwdata_start+0xffff66a4>
20088bd4:	003fd706 	br	20088b34 <__flash_rwdata_start+0xffff6d38>
20088bd8:	946dc83a 	sub	r22,r18,r17
20088bdc:	05bdfd0e 	bge	zero,r22,200883d4 <__flash_rwdata_start+0xffff65d8>
20088be0:	00c00034 	movhi	r3,0
20088be4:	18c08404 	addi	r3,r3,528
20088be8:	01c00404 	movi	r7,16
20088bec:	d8c02415 	stw	r3,144(sp)
20088bf0:	3d81530e 	bge	r7,r22,20089140 <___vfiprintf_internal_r+0x1288>
20088bf4:	8007883a 	mov	r3,r16
20088bf8:	034001c4 	movi	r13,7
20088bfc:	b021883a 	mov	r16,r22
20088c00:	da402515 	stw	r9,148(sp)
20088c04:	182d883a 	mov	r22,r3
20088c08:	00000506 	br	20088c20 <___vfiprintf_internal_r+0xd68>
20088c0c:	29800084 	addi	r6,r5,2
20088c10:	42000204 	addi	r8,r8,8
20088c14:	180b883a 	mov	r5,r3
20088c18:	843ffc04 	addi	r16,r16,-16
20088c1c:	3c000d0e 	bge	r7,r16,20088c54 <___vfiprintf_internal_r+0xd9c>
20088c20:	10800404 	addi	r2,r2,16
20088c24:	28c00044 	addi	r3,r5,1
20088c28:	45c00015 	stw	r23,0(r8)
20088c2c:	41c00115 	stw	r7,4(r8)
20088c30:	d8801c15 	stw	r2,112(sp)
20088c34:	d8c01b15 	stw	r3,108(sp)
20088c38:	68fff40e 	bge	r13,r3,20088c0c <__flash_rwdata_start+0xffff6e10>
20088c3c:	1000151e 	bne	r2,zero,20088c94 <___vfiprintf_internal_r+0xddc>
20088c40:	843ffc04 	addi	r16,r16,-16
20088c44:	01800044 	movi	r6,1
20088c48:	000b883a 	mov	r5,zero
20088c4c:	d811883a 	mov	r8,sp
20088c50:	3c3ff316 	blt	r7,r16,20088c20 <__flash_rwdata_start+0xffff6e24>
20088c54:	da402517 	ldw	r9,148(sp)
20088c58:	b007883a 	mov	r3,r22
20088c5c:	802d883a 	mov	r22,r16
20088c60:	1821883a 	mov	r16,r3
20088c64:	d8c02417 	ldw	r3,144(sp)
20088c68:	1585883a 	add	r2,r2,r22
20088c6c:	45800115 	stw	r22,4(r8)
20088c70:	40c00015 	stw	r3,0(r8)
20088c74:	d8801c15 	stw	r2,112(sp)
20088c78:	d9801b15 	stw	r6,108(sp)
20088c7c:	00c001c4 	movi	r3,7
20088c80:	19806d16 	blt	r3,r6,20088e38 <___vfiprintf_internal_r+0xf80>
20088c84:	42000204 	addi	r8,r8,8
20088c88:	31000044 	addi	r4,r6,1
20088c8c:	300b883a 	mov	r5,r6
20088c90:	003dd006 	br	200883d4 <__flash_rwdata_start+0xffff65d8>
20088c94:	d9002017 	ldw	r4,128(sp)
20088c98:	d9402117 	ldw	r5,132(sp)
20088c9c:	d9801a04 	addi	r6,sp,104
20088ca0:	d9c02b15 	stw	r7,172(sp)
20088ca4:	db402a15 	stw	r13,168(sp)
20088ca8:	0087da40 	call	20087da4 <__sprint_r.part.0>
20088cac:	d9c02b17 	ldw	r7,172(sp)
20088cb0:	db402a17 	ldw	r13,168(sp)
20088cb4:	103faa1e 	bne	r2,zero,20088b60 <__flash_rwdata_start+0xffff6d64>
20088cb8:	d9401b17 	ldw	r5,108(sp)
20088cbc:	d8801c17 	ldw	r2,112(sp)
20088cc0:	d811883a 	mov	r8,sp
20088cc4:	29800044 	addi	r6,r5,1
20088cc8:	003fd306 	br	20088c18 <__flash_rwdata_start+0xffff6e1c>
20088ccc:	1000401e 	bne	r2,zero,20088dd0 <___vfiprintf_internal_r+0xf18>
20088cd0:	68003b26 	beq	r13,zero,20088dc0 <___vfiprintf_internal_r+0xf08>
20088cd4:	d9001d04 	addi	r4,sp,116
20088cd8:	00800084 	movi	r2,2
20088cdc:	d9000015 	stw	r4,0(sp)
20088ce0:	d8800115 	stw	r2,4(sp)
20088ce4:	1809883a 	mov	r4,r3
20088ce8:	d811883a 	mov	r8,sp
20088cec:	003db406 	br	200883c0 <__flash_rwdata_start+0xffff65c4>
20088cf0:	1000451e 	bne	r2,zero,20088e08 <___vfiprintf_internal_r+0xf50>
20088cf4:	01000044 	movi	r4,1
20088cf8:	000b883a 	mov	r5,zero
20088cfc:	d811883a 	mov	r8,sp
20088d00:	003db206 	br	200883cc <__flash_rwdata_start+0xffff65d0>
20088d04:	10803fcc 	andi	r2,r2,255
20088d08:	1000071e 	bne	r2,zero,20088d28 <___vfiprintf_internal_r+0xe70>
20088d0c:	a880004c 	andi	r2,r21,1
20088d10:	10000526 	beq	r2,zero,20088d28 <___vfiprintf_internal_r+0xe70>
20088d14:	00800c04 	movi	r2,48
20088d18:	d88019c5 	stb	r2,103(sp)
20088d1c:	dcc02717 	ldw	r19,156(sp)
20088d20:	dd0019c4 	addi	r20,sp,103
20088d24:	003d5e06 	br	200882a0 <__flash_rwdata_start+0xffff64a4>
20088d28:	dd001a04 	addi	r20,sp,104
20088d2c:	003d5c06 	br	200882a0 <__flash_rwdata_start+0xffff64a4>
20088d30:	1000971e 	bne	r2,zero,20088f90 <___vfiprintf_internal_r+0x10d8>
20088d34:	d8c01d87 	ldb	r3,118(sp)
20088d38:	18005826 	beq	r3,zero,20088e9c <___vfiprintf_internal_r+0xfe4>
20088d3c:	00800044 	movi	r2,1
20088d40:	d8c01d84 	addi	r3,sp,118
20088d44:	1009883a 	mov	r4,r2
20088d48:	d8c00015 	stw	r3,0(sp)
20088d4c:	d8800115 	stw	r2,4(sp)
20088d50:	d811883a 	mov	r8,sp
20088d54:	003f3206 	br	20088a20 <__flash_rwdata_start+0xffff6c24>
20088d58:	8023883a 	mov	r17,r16
20088d5c:	003ca706 	br	20087ffc <__flash_rwdata_start+0xffff6200>
20088d60:	d9002017 	ldw	r4,128(sp)
20088d64:	d9402117 	ldw	r5,132(sp)
20088d68:	d9801a04 	addi	r6,sp,104
20088d6c:	0087da40 	call	20087da4 <__sprint_r.part.0>
20088d70:	103f7b1e 	bne	r2,zero,20088b60 <__flash_rwdata_start+0xffff6d64>
20088d74:	d8801c17 	ldw	r2,112(sp)
20088d78:	d811883a 	mov	r8,sp
20088d7c:	003f9106 	br	20088bc4 <__flash_rwdata_start+0xffff6dc8>
20088d80:	00800084 	movi	r2,2
20088d84:	b348b03a 	or	r4,r22,r13
20088d88:	003d2906 	br	20088230 <__flash_rwdata_start+0xffff6434>
20088d8c:	d8802217 	ldw	r2,136(sp)
20088d90:	001b883a 	mov	r13,zero
20088d94:	15800017 	ldw	r22,0(r2)
20088d98:	10800104 	addi	r2,r2,4
20088d9c:	d8802215 	stw	r2,136(sp)
20088da0:	003ea706 	br	20088840 <__flash_rwdata_start+0xffff6a44>
20088da4:	d9002017 	ldw	r4,128(sp)
20088da8:	d9402117 	ldw	r5,132(sp)
20088dac:	d9801a04 	addi	r6,sp,104
20088db0:	0087da40 	call	20087da4 <__sprint_r.part.0>
20088db4:	103f6a1e 	bne	r2,zero,20088b60 <__flash_rwdata_start+0xffff6d64>
20088db8:	d811883a 	mov	r8,sp
20088dbc:	003cff06 	br	200881bc <__flash_rwdata_start+0xffff63c0>
20088dc0:	000b883a 	mov	r5,zero
20088dc4:	1809883a 	mov	r4,r3
20088dc8:	d811883a 	mov	r8,sp
20088dcc:	003d7f06 	br	200883cc <__flash_rwdata_start+0xffff65d0>
20088dd0:	d9002017 	ldw	r4,128(sp)
20088dd4:	d9402117 	ldw	r5,132(sp)
20088dd8:	d9801a04 	addi	r6,sp,104
20088ddc:	da402b15 	stw	r9,172(sp)
20088de0:	db402a15 	stw	r13,168(sp)
20088de4:	0087da40 	call	20087da4 <__sprint_r.part.0>
20088de8:	da402b17 	ldw	r9,172(sp)
20088dec:	db402a17 	ldw	r13,168(sp)
20088df0:	103f5b1e 	bne	r2,zero,20088b60 <__flash_rwdata_start+0xffff6d64>
20088df4:	d9401b17 	ldw	r5,108(sp)
20088df8:	d8801c17 	ldw	r2,112(sp)
20088dfc:	d811883a 	mov	r8,sp
20088e00:	29000044 	addi	r4,r5,1
20088e04:	003d6406 	br	20088398 <__flash_rwdata_start+0xffff659c>
20088e08:	d9002017 	ldw	r4,128(sp)
20088e0c:	d9402117 	ldw	r5,132(sp)
20088e10:	d9801a04 	addi	r6,sp,104
20088e14:	da402b15 	stw	r9,172(sp)
20088e18:	0087da40 	call	20087da4 <__sprint_r.part.0>
20088e1c:	da402b17 	ldw	r9,172(sp)
20088e20:	103f4f1e 	bne	r2,zero,20088b60 <__flash_rwdata_start+0xffff6d64>
20088e24:	d9401b17 	ldw	r5,108(sp)
20088e28:	d8801c17 	ldw	r2,112(sp)
20088e2c:	d811883a 	mov	r8,sp
20088e30:	29000044 	addi	r4,r5,1
20088e34:	003d6506 	br	200883cc <__flash_rwdata_start+0xffff65d0>
20088e38:	10009a1e 	bne	r2,zero,200890a4 <___vfiprintf_internal_r+0x11ec>
20088e3c:	01000044 	movi	r4,1
20088e40:	000b883a 	mov	r5,zero
20088e44:	d811883a 	mov	r8,sp
20088e48:	003d6206 	br	200883d4 <__flash_rwdata_start+0xffff65d8>
20088e4c:	d9002017 	ldw	r4,128(sp)
20088e50:	d9402117 	ldw	r5,132(sp)
20088e54:	d9801a04 	addi	r6,sp,104
20088e58:	0087da40 	call	20087da4 <__sprint_r.part.0>
20088e5c:	103f401e 	bne	r2,zero,20088b60 <__flash_rwdata_start+0xffff6d64>
20088e60:	d9001b17 	ldw	r4,108(sp)
20088e64:	d8801c17 	ldw	r2,112(sp)
20088e68:	d811883a 	mov	r8,sp
20088e6c:	21000044 	addi	r4,r4,1
20088e70:	003d7d06 	br	20088468 <__flash_rwdata_start+0xffff666c>
20088e74:	05adc83a 	sub	r22,zero,r22
20088e78:	b004c03a 	cmpne	r2,r22,zero
20088e7c:	035bc83a 	sub	r13,zero,r13
20088e80:	689bc83a 	sub	r13,r13,r2
20088e84:	03800b44 	movi	r14,45
20088e88:	db801d85 	stb	r14,118(sp)
20088e8c:	4827883a 	mov	r19,r9
20088e90:	00800044 	movi	r2,1
20088e94:	b348b03a 	or	r4,r22,r13
20088e98:	003ce806 	br	2008823c <__flash_rwdata_start+0xffff6440>
20088e9c:	000b883a 	mov	r5,zero
20088ea0:	01000044 	movi	r4,1
20088ea4:	d811883a 	mov	r8,sp
20088ea8:	683d4826 	beq	r13,zero,200883cc <__flash_rwdata_start+0xffff65d0>
20088eac:	00800084 	movi	r2,2
20088eb0:	d8c01d04 	addi	r3,sp,116
20088eb4:	d8c00015 	stw	r3,0(sp)
20088eb8:	d8800115 	stw	r2,4(sp)
20088ebc:	003d4006 	br	200883c0 <__flash_rwdata_start+0xffff65c4>
20088ec0:	00800084 	movi	r2,2
20088ec4:	003cda06 	br	20088230 <__flash_rwdata_start+0xffff6434>
20088ec8:	a880100c 	andi	r2,r21,64
20088ecc:	10004226 	beq	r2,zero,20088fd8 <___vfiprintf_internal_r+0x1120>
20088ed0:	d8802217 	ldw	r2,136(sp)
20088ed4:	001b883a 	mov	r13,zero
20088ed8:	1580000b 	ldhu	r22,0(r2)
20088edc:	10800104 	addi	r2,r2,4
20088ee0:	d8802215 	stw	r2,136(sp)
20088ee4:	b009883a 	mov	r4,r22
20088ee8:	0005883a 	mov	r2,zero
20088eec:	003cd006 	br	20088230 <__flash_rwdata_start+0xffff6434>
20088ef0:	80c00007 	ldb	r3,0(r16)
20088ef4:	8005883a 	mov	r2,r16
20088ef8:	003c4d06 	br	20088030 <__flash_rwdata_start+0xffff6234>
20088efc:	a880100c 	andi	r2,r21,64
20088f00:	10004426 	beq	r2,zero,20089014 <___vfiprintf_internal_r+0x115c>
20088f04:	d8c02217 	ldw	r3,136(sp)
20088f08:	001b883a 	mov	r13,zero
20088f0c:	00800044 	movi	r2,1
20088f10:	1d80000b 	ldhu	r22,0(r3)
20088f14:	18c00104 	addi	r3,r3,4
20088f18:	d8c02215 	stw	r3,136(sp)
20088f1c:	b009883a 	mov	r4,r22
20088f20:	003cc306 	br	20088230 <__flash_rwdata_start+0xffff6434>
20088f24:	a880040c 	andi	r2,r21,16
20088f28:	1000091e 	bne	r2,zero,20088f50 <___vfiprintf_internal_r+0x1098>
20088f2c:	aac0100c 	andi	r11,r21,64
20088f30:	58000726 	beq	r11,zero,20088f50 <___vfiprintf_internal_r+0x1098>
20088f34:	d8c02217 	ldw	r3,136(sp)
20088f38:	d9002317 	ldw	r4,140(sp)
20088f3c:	18800017 	ldw	r2,0(r3)
20088f40:	18c00104 	addi	r3,r3,4
20088f44:	d8c02215 	stw	r3,136(sp)
20088f48:	1100000d 	sth	r4,0(r2)
20088f4c:	003c0e06 	br	20087f88 <__flash_rwdata_start+0xffff618c>
20088f50:	d8c02217 	ldw	r3,136(sp)
20088f54:	d9002317 	ldw	r4,140(sp)
20088f58:	18800017 	ldw	r2,0(r3)
20088f5c:	18c00104 	addi	r3,r3,4
20088f60:	d8c02215 	stw	r3,136(sp)
20088f64:	11000015 	stw	r4,0(r2)
20088f68:	003c0706 	br	20087f88 <__flash_rwdata_start+0xffff618c>
20088f6c:	a880100c 	andi	r2,r21,64
20088f70:	10002126 	beq	r2,zero,20088ff8 <___vfiprintf_internal_r+0x1140>
20088f74:	1d80000f 	ldh	r22,0(r3)
20088f78:	d8c02217 	ldw	r3,136(sp)
20088f7c:	b01bd7fa 	srai	r13,r22,31
20088f80:	18c00104 	addi	r3,r3,4
20088f84:	d8c02215 	stw	r3,136(sp)
20088f88:	6805883a 	mov	r2,r13
20088f8c:	003dc406 	br	200886a0 <__flash_rwdata_start+0xffff68a4>
20088f90:	d9002017 	ldw	r4,128(sp)
20088f94:	d9402117 	ldw	r5,132(sp)
20088f98:	d9801a04 	addi	r6,sp,104
20088f9c:	da402b15 	stw	r9,172(sp)
20088fa0:	db402a15 	stw	r13,168(sp)
20088fa4:	0087da40 	call	20087da4 <__sprint_r.part.0>
20088fa8:	da402b17 	ldw	r9,172(sp)
20088fac:	db402a17 	ldw	r13,168(sp)
20088fb0:	103eeb1e 	bne	r2,zero,20088b60 <__flash_rwdata_start+0xffff6d64>
20088fb4:	d9401b17 	ldw	r5,108(sp)
20088fb8:	d8801c17 	ldw	r2,112(sp)
20088fbc:	d811883a 	mov	r8,sp
20088fc0:	29000044 	addi	r4,r5,1
20088fc4:	003e8b06 	br	200889f4 <__flash_rwdata_start+0xffff6bf8>
20088fc8:	9023883a 	mov	r17,r18
20088fcc:	003d5a06 	br	20088538 <__flash_rwdata_start+0xffff673c>
20088fd0:	4827883a 	mov	r19,r9
20088fd4:	003e3506 	br	200888ac <__flash_rwdata_start+0xffff6ab0>
20088fd8:	d8c02217 	ldw	r3,136(sp)
20088fdc:	001b883a 	mov	r13,zero
20088fe0:	0005883a 	mov	r2,zero
20088fe4:	1d800017 	ldw	r22,0(r3)
20088fe8:	18c00104 	addi	r3,r3,4
20088fec:	d8c02215 	stw	r3,136(sp)
20088ff0:	b009883a 	mov	r4,r22
20088ff4:	003c8e06 	br	20088230 <__flash_rwdata_start+0xffff6434>
20088ff8:	1d800017 	ldw	r22,0(r3)
20088ffc:	d9002217 	ldw	r4,136(sp)
20089000:	b01bd7fa 	srai	r13,r22,31
20089004:	21000104 	addi	r4,r4,4
20089008:	d9002215 	stw	r4,136(sp)
2008900c:	6805883a 	mov	r2,r13
20089010:	003da306 	br	200886a0 <__flash_rwdata_start+0xffff68a4>
20089014:	d9002217 	ldw	r4,136(sp)
20089018:	001b883a 	mov	r13,zero
2008901c:	00800044 	movi	r2,1
20089020:	25800017 	ldw	r22,0(r4)
20089024:	21000104 	addi	r4,r4,4
20089028:	d9002215 	stw	r4,136(sp)
2008902c:	b009883a 	mov	r4,r22
20089030:	003c7f06 	br	20088230 <__flash_rwdata_start+0xffff6434>
20089034:	00c00034 	movhi	r3,0
20089038:	18c08404 	addi	r3,r3,528
2008903c:	d8c02415 	stw	r3,144(sp)
20089040:	003cff06 	br	20088440 <__flash_rwdata_start+0xffff6644>
20089044:	d8801c17 	ldw	r2,112(sp)
20089048:	dd402117 	ldw	r21,132(sp)
2008904c:	103ec526 	beq	r2,zero,20088b64 <__flash_rwdata_start+0xffff6d68>
20089050:	d9002017 	ldw	r4,128(sp)
20089054:	a80b883a 	mov	r5,r21
20089058:	d9801a04 	addi	r6,sp,104
2008905c:	0087da40 	call	20087da4 <__sprint_r.part.0>
20089060:	003ec006 	br	20088b64 <__flash_rwdata_start+0xffff6d68>
20089064:	80800044 	addi	r2,r16,1
20089068:	ad400814 	ori	r21,r21,32
2008906c:	80c00047 	ldb	r3,1(r16)
20089070:	003bef06 	br	20088030 <__flash_rwdata_start+0xffff6234>
20089074:	04a5c83a 	sub	r18,zero,r18
20089078:	8005883a 	mov	r2,r16
2008907c:	d8c02215 	stw	r3,136(sp)
20089080:	003d5306 	br	200885d0 <__flash_rwdata_start+0xffff67d4>
20089084:	da002a15 	stw	r8,168(sp)
20089088:	008103c0 	call	2008103c <strlen>
2008908c:	1027883a 	mov	r19,r2
20089090:	db801d83 	ldbu	r14,118(sp)
20089094:	dd802215 	stw	r22,136(sp)
20089098:	0013883a 	mov	r9,zero
2008909c:	da002a17 	ldw	r8,168(sp)
200890a0:	003c7f06 	br	200882a0 <__flash_rwdata_start+0xffff64a4>
200890a4:	d9002017 	ldw	r4,128(sp)
200890a8:	d9402117 	ldw	r5,132(sp)
200890ac:	d9801a04 	addi	r6,sp,104
200890b0:	da402b15 	stw	r9,172(sp)
200890b4:	0087da40 	call	20087da4 <__sprint_r.part.0>
200890b8:	da402b17 	ldw	r9,172(sp)
200890bc:	103ea81e 	bne	r2,zero,20088b60 <__flash_rwdata_start+0xffff6d64>
200890c0:	d9401b17 	ldw	r5,108(sp)
200890c4:	d8801c17 	ldw	r2,112(sp)
200890c8:	d811883a 	mov	r8,sp
200890cc:	29000044 	addi	r4,r5,1
200890d0:	003cc006 	br	200883d4 <__flash_rwdata_start+0xffff65d8>
200890d4:	d9401b17 	ldw	r5,108(sp)
200890d8:	01000034 	movhi	r4,0
200890dc:	21008804 	addi	r4,r4,544
200890e0:	d9002415 	stw	r4,144(sp)
200890e4:	29400044 	addi	r5,r5,1
200890e8:	003c9f06 	br	20088368 <__flash_rwdata_start+0xffff656c>
200890ec:	00800184 	movi	r2,6
200890f0:	1240012e 	bgeu	r2,r9,200890f8 <___vfiprintf_internal_r+0x1240>
200890f4:	1013883a 	mov	r9,r2
200890f8:	4827883a 	mov	r19,r9
200890fc:	4823883a 	mov	r17,r9
20089100:	48001116 	blt	r9,zero,20089148 <___vfiprintf_internal_r+0x1290>
20089104:	05000034 	movhi	r20,0
20089108:	dd802215 	stw	r22,136(sp)
2008910c:	a5002904 	addi	r20,r20,164
20089110:	003db106 	br	200887d8 <__flash_rwdata_start+0xffff69dc>
20089114:	d9401b17 	ldw	r5,108(sp)
20089118:	01000034 	movhi	r4,0
2008911c:	21008804 	addi	r4,r4,544
20089120:	d9002415 	stw	r4,144(sp)
20089124:	29400044 	addi	r5,r5,1
20089128:	003cf906 	br	20088510 <__flash_rwdata_start+0xffff6714>
2008912c:	4827883a 	mov	r19,r9
20089130:	db801d83 	ldbu	r14,118(sp)
20089134:	dd802215 	stw	r22,136(sp)
20089138:	0013883a 	mov	r9,zero
2008913c:	003c5806 	br	200882a0 <__flash_rwdata_start+0xffff64a4>
20089140:	200d883a 	mov	r6,r4
20089144:	003ec706 	br	20088c64 <__flash_rwdata_start+0xffff6e68>
20089148:	0023883a 	mov	r17,zero
2008914c:	003fed06 	br	20089104 <__flash_rwdata_start+0xffff7308>
20089150:	d9002217 	ldw	r4,136(sp)
20089154:	22400017 	ldw	r9,0(r4)
20089158:	20c00104 	addi	r3,r4,4
2008915c:	d8c02215 	stw	r3,136(sp)
20089160:	483fc20e 	bge	r9,zero,2008906c <__flash_rwdata_start+0xffff7270>
20089164:	027fffc4 	movi	r9,-1
20089168:	80c00047 	ldb	r3,1(r16)
2008916c:	003bb006 	br	20088030 <__flash_rwdata_start+0xffff6234>
20089170:	8c80010e 	bge	r17,r18,20089178 <___vfiprintf_internal_r+0x12c0>
20089174:	9023883a 	mov	r17,r18
20089178:	d8802317 	ldw	r2,140(sp)
2008917c:	1445883a 	add	r2,r2,r17
20089180:	d8802315 	stw	r2,140(sp)
20089184:	003cef06 	br	20088544 <__flash_rwdata_start+0xffff6748>

20089188 <__vfiprintf_internal>:
20089188:	2007883a 	mov	r3,r4
2008918c:	01000034 	movhi	r4,0
20089190:	21095004 	addi	r4,r4,9536
20089194:	21000017 	ldw	r4,0(r4)
20089198:	2805883a 	mov	r2,r5
2008919c:	300f883a 	mov	r7,r6
200891a0:	180b883a 	mov	r5,r3
200891a4:	100d883a 	mov	r6,r2
200891a8:	0087eb81 	jmpi	20087eb8 <___vfiprintf_internal_r>

200891ac <__sbprintf>:
200891ac:	2880030b 	ldhu	r2,12(r5)
200891b0:	2ac01917 	ldw	r11,100(r5)
200891b4:	2a80038b 	ldhu	r10,14(r5)
200891b8:	2a400717 	ldw	r9,28(r5)
200891bc:	2a000917 	ldw	r8,36(r5)
200891c0:	defee204 	addi	sp,sp,-1144
200891c4:	00c10004 	movi	r3,1024
200891c8:	dc011a15 	stw	r16,1128(sp)
200891cc:	10bfff4c 	andi	r2,r2,65533
200891d0:	2821883a 	mov	r16,r5
200891d4:	d8cb883a 	add	r5,sp,r3
200891d8:	dc811c15 	stw	r18,1136(sp)
200891dc:	dc411b15 	stw	r17,1132(sp)
200891e0:	dfc11d15 	stw	ra,1140(sp)
200891e4:	2025883a 	mov	r18,r4
200891e8:	d881030d 	sth	r2,1036(sp)
200891ec:	dac11915 	stw	r11,1124(sp)
200891f0:	da81038d 	sth	r10,1038(sp)
200891f4:	da410715 	stw	r9,1052(sp)
200891f8:	da010915 	stw	r8,1060(sp)
200891fc:	dec10015 	stw	sp,1024(sp)
20089200:	dec10415 	stw	sp,1040(sp)
20089204:	d8c10215 	stw	r3,1032(sp)
20089208:	d8c10515 	stw	r3,1044(sp)
2008920c:	d8010615 	stw	zero,1048(sp)
20089210:	0087eb80 	call	20087eb8 <___vfiprintf_internal_r>
20089214:	1023883a 	mov	r17,r2
20089218:	10000416 	blt	r2,zero,2008922c <__sbprintf+0x80>
2008921c:	9009883a 	mov	r4,r18
20089220:	d9410004 	addi	r5,sp,1024
20089224:	0084f1c0 	call	20084f1c <_fflush_r>
20089228:	10000d1e 	bne	r2,zero,20089260 <__sbprintf+0xb4>
2008922c:	d8c1030b 	ldhu	r3,1036(sp)
20089230:	18c0100c 	andi	r3,r3,64
20089234:	18000326 	beq	r3,zero,20089244 <__sbprintf+0x98>
20089238:	8080030b 	ldhu	r2,12(r16)
2008923c:	10801014 	ori	r2,r2,64
20089240:	8080030d 	sth	r2,12(r16)
20089244:	8805883a 	mov	r2,r17
20089248:	dfc11d17 	ldw	ra,1140(sp)
2008924c:	dc811c17 	ldw	r18,1136(sp)
20089250:	dc411b17 	ldw	r17,1132(sp)
20089254:	dc011a17 	ldw	r16,1128(sp)
20089258:	dec11e04 	addi	sp,sp,1144
2008925c:	f800283a 	ret
20089260:	047fffc4 	movi	r17,-1
20089264:	003ff106 	br	2008922c <__flash_rwdata_start+0xffff7430>

20089268 <__swbuf_r>:
20089268:	defffc04 	addi	sp,sp,-16
2008926c:	dc800215 	stw	r18,8(sp)
20089270:	dc400115 	stw	r17,4(sp)
20089274:	dc000015 	stw	r16,0(sp)
20089278:	dfc00315 	stw	ra,12(sp)
2008927c:	2025883a 	mov	r18,r4
20089280:	2823883a 	mov	r17,r5
20089284:	3021883a 	mov	r16,r6
20089288:	20000226 	beq	r4,zero,20089294 <__swbuf_r+0x2c>
2008928c:	20800e17 	ldw	r2,56(r4)
20089290:	10004126 	beq	r2,zero,20089398 <__swbuf_r+0x130>
20089294:	80c00617 	ldw	r3,24(r16)
20089298:	8180030b 	ldhu	r6,12(r16)
2008929c:	80c00215 	stw	r3,8(r16)
200892a0:	30c0020c 	andi	r3,r6,8
200892a4:	18003526 	beq	r3,zero,2008937c <__swbuf_r+0x114>
200892a8:	80c00417 	ldw	r3,16(r16)
200892ac:	18003326 	beq	r3,zero,2008937c <__swbuf_r+0x114>
200892b0:	3088000c 	andi	r2,r6,8192
200892b4:	8c403fcc 	andi	r17,r17,255
200892b8:	10001726 	beq	r2,zero,20089318 <__swbuf_r+0xb0>
200892bc:	80800017 	ldw	r2,0(r16)
200892c0:	81000517 	ldw	r4,20(r16)
200892c4:	10c7c83a 	sub	r3,r2,r3
200892c8:	19001d0e 	bge	r3,r4,20089340 <__swbuf_r+0xd8>
200892cc:	18c00044 	addi	r3,r3,1
200892d0:	81400217 	ldw	r5,8(r16)
200892d4:	11000044 	addi	r4,r2,1
200892d8:	81000015 	stw	r4,0(r16)
200892dc:	297fffc4 	addi	r5,r5,-1
200892e0:	81400215 	stw	r5,8(r16)
200892e4:	14400005 	stb	r17,0(r2)
200892e8:	80800517 	ldw	r2,20(r16)
200892ec:	10c01d26 	beq	r2,r3,20089364 <__swbuf_r+0xfc>
200892f0:	8080030b 	ldhu	r2,12(r16)
200892f4:	1080004c 	andi	r2,r2,1
200892f8:	1000181e 	bne	r2,zero,2008935c <__swbuf_r+0xf4>
200892fc:	8805883a 	mov	r2,r17
20089300:	dfc00317 	ldw	ra,12(sp)
20089304:	dc800217 	ldw	r18,8(sp)
20089308:	dc400117 	ldw	r17,4(sp)
2008930c:	dc000017 	ldw	r16,0(sp)
20089310:	dec00404 	addi	sp,sp,16
20089314:	f800283a 	ret
20089318:	81001917 	ldw	r4,100(r16)
2008931c:	00b7ffc4 	movi	r2,-8193
20089320:	31880014 	ori	r6,r6,8192
20089324:	2084703a 	and	r2,r4,r2
20089328:	80801915 	stw	r2,100(r16)
2008932c:	80800017 	ldw	r2,0(r16)
20089330:	81000517 	ldw	r4,20(r16)
20089334:	8180030d 	sth	r6,12(r16)
20089338:	10c7c83a 	sub	r3,r2,r3
2008933c:	193fe316 	blt	r3,r4,200892cc <__flash_rwdata_start+0xffff74d0>
20089340:	9009883a 	mov	r4,r18
20089344:	800b883a 	mov	r5,r16
20089348:	0084f1c0 	call	20084f1c <_fflush_r>
2008934c:	1000091e 	bne	r2,zero,20089374 <__swbuf_r+0x10c>
20089350:	80800017 	ldw	r2,0(r16)
20089354:	00c00044 	movi	r3,1
20089358:	003fdd06 	br	200892d0 <__flash_rwdata_start+0xffff74d4>
2008935c:	00800284 	movi	r2,10
20089360:	88bfe61e 	bne	r17,r2,200892fc <__flash_rwdata_start+0xffff7500>
20089364:	9009883a 	mov	r4,r18
20089368:	800b883a 	mov	r5,r16
2008936c:	0084f1c0 	call	20084f1c <_fflush_r>
20089370:	103fe226 	beq	r2,zero,200892fc <__flash_rwdata_start+0xffff7500>
20089374:	00bfffc4 	movi	r2,-1
20089378:	003fe106 	br	20089300 <__flash_rwdata_start+0xffff7504>
2008937c:	9009883a 	mov	r4,r18
20089380:	800b883a 	mov	r5,r16
20089384:	00831040 	call	20083104 <__swsetup_r>
20089388:	103ffa1e 	bne	r2,zero,20089374 <__flash_rwdata_start+0xffff7578>
2008938c:	8180030b 	ldhu	r6,12(r16)
20089390:	80c00417 	ldw	r3,16(r16)
20089394:	003fc606 	br	200892b0 <__flash_rwdata_start+0xffff74b4>
20089398:	00852f80 	call	200852f8 <__sinit>
2008939c:	003fbd06 	br	20089294 <__flash_rwdata_start+0xffff7498>

200893a0 <__swbuf>:
200893a0:	00c00034 	movhi	r3,0
200893a4:	18c95004 	addi	r3,r3,9536
200893a8:	2005883a 	mov	r2,r4
200893ac:	19000017 	ldw	r4,0(r3)
200893b0:	280d883a 	mov	r6,r5
200893b4:	100b883a 	mov	r5,r2
200893b8:	00892681 	jmpi	20089268 <__swbuf_r>

200893bc <_write_r>:
200893bc:	defffd04 	addi	sp,sp,-12
200893c0:	dc000015 	stw	r16,0(sp)
200893c4:	04000034 	movhi	r16,0
200893c8:	dc400115 	stw	r17,4(sp)
200893cc:	84096504 	addi	r16,r16,9620
200893d0:	2023883a 	mov	r17,r4
200893d4:	2809883a 	mov	r4,r5
200893d8:	300b883a 	mov	r5,r6
200893dc:	380d883a 	mov	r6,r7
200893e0:	dfc00215 	stw	ra,8(sp)
200893e4:	80000015 	stw	zero,0(r16)
200893e8:	008d7000 	call	2008d700 <write>
200893ec:	00ffffc4 	movi	r3,-1
200893f0:	10c00526 	beq	r2,r3,20089408 <_write_r+0x4c>
200893f4:	dfc00217 	ldw	ra,8(sp)
200893f8:	dc400117 	ldw	r17,4(sp)
200893fc:	dc000017 	ldw	r16,0(sp)
20089400:	dec00304 	addi	sp,sp,12
20089404:	f800283a 	ret
20089408:	80c00017 	ldw	r3,0(r16)
2008940c:	183ff926 	beq	r3,zero,200893f4 <__flash_rwdata_start+0xffff75f8>
20089410:	88c00015 	stw	r3,0(r17)
20089414:	003ff706 	br	200893f4 <__flash_rwdata_start+0xffff75f8>

20089418 <_close_r>:
20089418:	defffd04 	addi	sp,sp,-12
2008941c:	dc000015 	stw	r16,0(sp)
20089420:	04000034 	movhi	r16,0
20089424:	dc400115 	stw	r17,4(sp)
20089428:	84096504 	addi	r16,r16,9620
2008942c:	2023883a 	mov	r17,r4
20089430:	2809883a 	mov	r4,r5
20089434:	dfc00215 	stw	ra,8(sp)
20089438:	80000015 	stw	zero,0(r16)
2008943c:	008ce2c0 	call	2008ce2c <close>
20089440:	00ffffc4 	movi	r3,-1
20089444:	10c00526 	beq	r2,r3,2008945c <_close_r+0x44>
20089448:	dfc00217 	ldw	ra,8(sp)
2008944c:	dc400117 	ldw	r17,4(sp)
20089450:	dc000017 	ldw	r16,0(sp)
20089454:	dec00304 	addi	sp,sp,12
20089458:	f800283a 	ret
2008945c:	80c00017 	ldw	r3,0(r16)
20089460:	183ff926 	beq	r3,zero,20089448 <__flash_rwdata_start+0xffff764c>
20089464:	88c00015 	stw	r3,0(r17)
20089468:	003ff706 	br	20089448 <__flash_rwdata_start+0xffff764c>

2008946c <_calloc_r>:
2008946c:	298b383a 	mul	r5,r5,r6
20089470:	defffe04 	addi	sp,sp,-8
20089474:	dc000015 	stw	r16,0(sp)
20089478:	dfc00115 	stw	ra,4(sp)
2008947c:	00806fc0 	call	200806fc <_malloc_r>
20089480:	1021883a 	mov	r16,r2
20089484:	10002826 	beq	r2,zero,20089528 <_calloc_r+0xbc>
20089488:	11bfff17 	ldw	r6,-4(r2)
2008948c:	00bfff04 	movi	r2,-4
20089490:	00c00904 	movi	r3,36
20089494:	308c703a 	and	r6,r6,r2
20089498:	308d883a 	add	r6,r6,r2
2008949c:	19801436 	bltu	r3,r6,200894f0 <_calloc_r+0x84>
200894a0:	008004c4 	movi	r2,19
200894a4:	11800936 	bltu	r2,r6,200894cc <_calloc_r+0x60>
200894a8:	8005883a 	mov	r2,r16
200894ac:	10000015 	stw	zero,0(r2)
200894b0:	10000115 	stw	zero,4(r2)
200894b4:	10000215 	stw	zero,8(r2)
200894b8:	8005883a 	mov	r2,r16
200894bc:	dfc00117 	ldw	ra,4(sp)
200894c0:	dc000017 	ldw	r16,0(sp)
200894c4:	dec00204 	addi	sp,sp,8
200894c8:	f800283a 	ret
200894cc:	80000015 	stw	zero,0(r16)
200894d0:	80000115 	stw	zero,4(r16)
200894d4:	008006c4 	movi	r2,27
200894d8:	11800d2e 	bgeu	r2,r6,20089510 <_calloc_r+0xa4>
200894dc:	80000215 	stw	zero,8(r16)
200894e0:	80000315 	stw	zero,12(r16)
200894e4:	30c00c26 	beq	r6,r3,20089518 <_calloc_r+0xac>
200894e8:	80800404 	addi	r2,r16,16
200894ec:	003fef06 	br	200894ac <__flash_rwdata_start+0xffff76b0>
200894f0:	8009883a 	mov	r4,r16
200894f4:	000b883a 	mov	r5,zero
200894f8:	00863b80 	call	200863b8 <memset>
200894fc:	8005883a 	mov	r2,r16
20089500:	dfc00117 	ldw	ra,4(sp)
20089504:	dc000017 	ldw	r16,0(sp)
20089508:	dec00204 	addi	sp,sp,8
2008950c:	f800283a 	ret
20089510:	80800204 	addi	r2,r16,8
20089514:	003fe506 	br	200894ac <__flash_rwdata_start+0xffff76b0>
20089518:	80000415 	stw	zero,16(r16)
2008951c:	80800604 	addi	r2,r16,24
20089520:	80000515 	stw	zero,20(r16)
20089524:	003fe106 	br	200894ac <__flash_rwdata_start+0xffff76b0>
20089528:	0005883a 	mov	r2,zero
2008952c:	003fe306 	br	200894bc <__flash_rwdata_start+0xffff76c0>

20089530 <_fclose_r>:
20089530:	28003926 	beq	r5,zero,20089618 <_fclose_r+0xe8>
20089534:	defffc04 	addi	sp,sp,-16
20089538:	dc400115 	stw	r17,4(sp)
2008953c:	dc000015 	stw	r16,0(sp)
20089540:	dfc00315 	stw	ra,12(sp)
20089544:	dc800215 	stw	r18,8(sp)
20089548:	2023883a 	mov	r17,r4
2008954c:	2821883a 	mov	r16,r5
20089550:	20000226 	beq	r4,zero,2008955c <_fclose_r+0x2c>
20089554:	20800e17 	ldw	r2,56(r4)
20089558:	10002726 	beq	r2,zero,200895f8 <_fclose_r+0xc8>
2008955c:	8080030f 	ldh	r2,12(r16)
20089560:	1000071e 	bne	r2,zero,20089580 <_fclose_r+0x50>
20089564:	0005883a 	mov	r2,zero
20089568:	dfc00317 	ldw	ra,12(sp)
2008956c:	dc800217 	ldw	r18,8(sp)
20089570:	dc400117 	ldw	r17,4(sp)
20089574:	dc000017 	ldw	r16,0(sp)
20089578:	dec00404 	addi	sp,sp,16
2008957c:	f800283a 	ret
20089580:	8809883a 	mov	r4,r17
20089584:	800b883a 	mov	r5,r16
20089588:	0084d140 	call	20084d14 <__sflush_r>
2008958c:	1025883a 	mov	r18,r2
20089590:	80800b17 	ldw	r2,44(r16)
20089594:	10000426 	beq	r2,zero,200895a8 <_fclose_r+0x78>
20089598:	81400717 	ldw	r5,28(r16)
2008959c:	8809883a 	mov	r4,r17
200895a0:	103ee83a 	callr	r2
200895a4:	10001616 	blt	r2,zero,20089600 <_fclose_r+0xd0>
200895a8:	8080030b 	ldhu	r2,12(r16)
200895ac:	1080200c 	andi	r2,r2,128
200895b0:	1000151e 	bne	r2,zero,20089608 <_fclose_r+0xd8>
200895b4:	81400c17 	ldw	r5,48(r16)
200895b8:	28000526 	beq	r5,zero,200895d0 <_fclose_r+0xa0>
200895bc:	80801004 	addi	r2,r16,64
200895c0:	28800226 	beq	r5,r2,200895cc <_fclose_r+0x9c>
200895c4:	8809883a 	mov	r4,r17
200895c8:	008546c0 	call	2008546c <_free_r>
200895cc:	80000c15 	stw	zero,48(r16)
200895d0:	81401117 	ldw	r5,68(r16)
200895d4:	28000326 	beq	r5,zero,200895e4 <_fclose_r+0xb4>
200895d8:	8809883a 	mov	r4,r17
200895dc:	008546c0 	call	2008546c <_free_r>
200895e0:	80001115 	stw	zero,68(r16)
200895e4:	00853080 	call	20085308 <__sfp_lock_acquire>
200895e8:	8000030d 	sth	zero,12(r16)
200895ec:	008530c0 	call	2008530c <__sfp_lock_release>
200895f0:	9005883a 	mov	r2,r18
200895f4:	003fdc06 	br	20089568 <__flash_rwdata_start+0xffff776c>
200895f8:	00852f80 	call	200852f8 <__sinit>
200895fc:	003fd706 	br	2008955c <__flash_rwdata_start+0xffff7760>
20089600:	04bfffc4 	movi	r18,-1
20089604:	003fe806 	br	200895a8 <__flash_rwdata_start+0xffff77ac>
20089608:	81400417 	ldw	r5,16(r16)
2008960c:	8809883a 	mov	r4,r17
20089610:	008546c0 	call	2008546c <_free_r>
20089614:	003fe706 	br	200895b4 <__flash_rwdata_start+0xffff77b8>
20089618:	0005883a 	mov	r2,zero
2008961c:	f800283a 	ret

20089620 <fclose>:
20089620:	00800034 	movhi	r2,0
20089624:	10895004 	addi	r2,r2,9536
20089628:	200b883a 	mov	r5,r4
2008962c:	11000017 	ldw	r4,0(r2)
20089630:	00895301 	jmpi	20089530 <_fclose_r>

20089634 <_fputwc_r>:
20089634:	3080030b 	ldhu	r2,12(r6)
20089638:	defff804 	addi	sp,sp,-32
2008963c:	dcc00415 	stw	r19,16(sp)
20089640:	dc800315 	stw	r18,12(sp)
20089644:	dc000115 	stw	r16,4(sp)
20089648:	dfc00715 	stw	ra,28(sp)
2008964c:	dd400615 	stw	r21,24(sp)
20089650:	dd000515 	stw	r20,20(sp)
20089654:	dc400215 	stw	r17,8(sp)
20089658:	10c8000c 	andi	r3,r2,8192
2008965c:	3021883a 	mov	r16,r6
20089660:	2027883a 	mov	r19,r4
20089664:	2825883a 	mov	r18,r5
20089668:	1800051e 	bne	r3,zero,20089680 <_fputwc_r+0x4c>
2008966c:	30c01917 	ldw	r3,100(r6)
20089670:	10880014 	ori	r2,r2,8192
20089674:	3080030d 	sth	r2,12(r6)
20089678:	18880014 	ori	r2,r3,8192
2008967c:	30801915 	stw	r2,100(r6)
20089680:	0085e2c0 	call	20085e2c <__locale_mb_cur_max>
20089684:	00c00044 	movi	r3,1
20089688:	10c03e26 	beq	r2,r3,20089784 <_fputwc_r+0x150>
2008968c:	9809883a 	mov	r4,r19
20089690:	d80b883a 	mov	r5,sp
20089694:	900d883a 	mov	r6,r18
20089698:	81c01704 	addi	r7,r16,92
2008969c:	00899780 	call	20089978 <_wcrtomb_r>
200896a0:	1029883a 	mov	r20,r2
200896a4:	00bfffc4 	movi	r2,-1
200896a8:	a0802026 	beq	r20,r2,2008972c <_fputwc_r+0xf8>
200896ac:	d9400003 	ldbu	r5,0(sp)
200896b0:	a0001c26 	beq	r20,zero,20089724 <_fputwc_r+0xf0>
200896b4:	0023883a 	mov	r17,zero
200896b8:	05400284 	movi	r21,10
200896bc:	00000906 	br	200896e4 <_fputwc_r+0xb0>
200896c0:	80800017 	ldw	r2,0(r16)
200896c4:	11400005 	stb	r5,0(r2)
200896c8:	80c00017 	ldw	r3,0(r16)
200896cc:	18c00044 	addi	r3,r3,1
200896d0:	80c00015 	stw	r3,0(r16)
200896d4:	8c400044 	addi	r17,r17,1
200896d8:	dc45883a 	add	r2,sp,r17
200896dc:	8d00112e 	bgeu	r17,r20,20089724 <_fputwc_r+0xf0>
200896e0:	11400003 	ldbu	r5,0(r2)
200896e4:	80c00217 	ldw	r3,8(r16)
200896e8:	18ffffc4 	addi	r3,r3,-1
200896ec:	80c00215 	stw	r3,8(r16)
200896f0:	183ff30e 	bge	r3,zero,200896c0 <__flash_rwdata_start+0xffff78c4>
200896f4:	80800617 	ldw	r2,24(r16)
200896f8:	18801916 	blt	r3,r2,20089760 <_fputwc_r+0x12c>
200896fc:	80800017 	ldw	r2,0(r16)
20089700:	11400005 	stb	r5,0(r2)
20089704:	80800017 	ldw	r2,0(r16)
20089708:	10c00003 	ldbu	r3,0(r2)
2008970c:	10800044 	addi	r2,r2,1
20089710:	1d402326 	beq	r3,r21,200897a0 <_fputwc_r+0x16c>
20089714:	80800015 	stw	r2,0(r16)
20089718:	8c400044 	addi	r17,r17,1
2008971c:	dc45883a 	add	r2,sp,r17
20089720:	8d3fef36 	bltu	r17,r20,200896e0 <__flash_rwdata_start+0xffff78e4>
20089724:	9005883a 	mov	r2,r18
20089728:	00000406 	br	2008973c <_fputwc_r+0x108>
2008972c:	80c0030b 	ldhu	r3,12(r16)
20089730:	a005883a 	mov	r2,r20
20089734:	18c01014 	ori	r3,r3,64
20089738:	80c0030d 	sth	r3,12(r16)
2008973c:	dfc00717 	ldw	ra,28(sp)
20089740:	dd400617 	ldw	r21,24(sp)
20089744:	dd000517 	ldw	r20,20(sp)
20089748:	dcc00417 	ldw	r19,16(sp)
2008974c:	dc800317 	ldw	r18,12(sp)
20089750:	dc400217 	ldw	r17,8(sp)
20089754:	dc000117 	ldw	r16,4(sp)
20089758:	dec00804 	addi	sp,sp,32
2008975c:	f800283a 	ret
20089760:	9809883a 	mov	r4,r19
20089764:	29403fcc 	andi	r5,r5,255
20089768:	800d883a 	mov	r6,r16
2008976c:	00892680 	call	20089268 <__swbuf_r>
20089770:	10bfffe0 	cmpeqi	r2,r2,-1
20089774:	10803fcc 	andi	r2,r2,255
20089778:	103fd626 	beq	r2,zero,200896d4 <__flash_rwdata_start+0xffff78d8>
2008977c:	00bfffc4 	movi	r2,-1
20089780:	003fee06 	br	2008973c <__flash_rwdata_start+0xffff7940>
20089784:	90ffffc4 	addi	r3,r18,-1
20089788:	01003f84 	movi	r4,254
2008978c:	20ffbf36 	bltu	r4,r3,2008968c <__flash_rwdata_start+0xffff7890>
20089790:	900b883a 	mov	r5,r18
20089794:	dc800005 	stb	r18,0(sp)
20089798:	1029883a 	mov	r20,r2
2008979c:	003fc506 	br	200896b4 <__flash_rwdata_start+0xffff78b8>
200897a0:	9809883a 	mov	r4,r19
200897a4:	a80b883a 	mov	r5,r21
200897a8:	800d883a 	mov	r6,r16
200897ac:	00892680 	call	20089268 <__swbuf_r>
200897b0:	10bfffe0 	cmpeqi	r2,r2,-1
200897b4:	003fef06 	br	20089774 <__flash_rwdata_start+0xffff7978>

200897b8 <fputwc>:
200897b8:	00800034 	movhi	r2,0
200897bc:	defffc04 	addi	sp,sp,-16
200897c0:	10895004 	addi	r2,r2,9536
200897c4:	dc000115 	stw	r16,4(sp)
200897c8:	14000017 	ldw	r16,0(r2)
200897cc:	dc400215 	stw	r17,8(sp)
200897d0:	dfc00315 	stw	ra,12(sp)
200897d4:	2023883a 	mov	r17,r4
200897d8:	280d883a 	mov	r6,r5
200897dc:	80000626 	beq	r16,zero,200897f8 <fputwc+0x40>
200897e0:	80800e17 	ldw	r2,56(r16)
200897e4:	1000041e 	bne	r2,zero,200897f8 <fputwc+0x40>
200897e8:	8009883a 	mov	r4,r16
200897ec:	d9400015 	stw	r5,0(sp)
200897f0:	00852f80 	call	200852f8 <__sinit>
200897f4:	d9800017 	ldw	r6,0(sp)
200897f8:	8009883a 	mov	r4,r16
200897fc:	880b883a 	mov	r5,r17
20089800:	dfc00317 	ldw	ra,12(sp)
20089804:	dc400217 	ldw	r17,8(sp)
20089808:	dc000117 	ldw	r16,4(sp)
2008980c:	dec00404 	addi	sp,sp,16
20089810:	00896341 	jmpi	20089634 <_fputwc_r>

20089814 <_fstat_r>:
20089814:	defffd04 	addi	sp,sp,-12
20089818:	dc000015 	stw	r16,0(sp)
2008981c:	04000034 	movhi	r16,0
20089820:	dc400115 	stw	r17,4(sp)
20089824:	84096504 	addi	r16,r16,9620
20089828:	2023883a 	mov	r17,r4
2008982c:	2809883a 	mov	r4,r5
20089830:	300b883a 	mov	r5,r6
20089834:	dfc00215 	stw	ra,8(sp)
20089838:	80000015 	stw	zero,0(r16)
2008983c:	008cff00 	call	2008cff0 <fstat>
20089840:	00ffffc4 	movi	r3,-1
20089844:	10c00526 	beq	r2,r3,2008985c <_fstat_r+0x48>
20089848:	dfc00217 	ldw	ra,8(sp)
2008984c:	dc400117 	ldw	r17,4(sp)
20089850:	dc000017 	ldw	r16,0(sp)
20089854:	dec00304 	addi	sp,sp,12
20089858:	f800283a 	ret
2008985c:	80c00017 	ldw	r3,0(r16)
20089860:	183ff926 	beq	r3,zero,20089848 <__flash_rwdata_start+0xffff7a4c>
20089864:	88c00015 	stw	r3,0(r17)
20089868:	003ff706 	br	20089848 <__flash_rwdata_start+0xffff7a4c>

2008986c <_isatty_r>:
2008986c:	defffd04 	addi	sp,sp,-12
20089870:	dc000015 	stw	r16,0(sp)
20089874:	04000034 	movhi	r16,0
20089878:	dc400115 	stw	r17,4(sp)
2008987c:	84096504 	addi	r16,r16,9620
20089880:	2023883a 	mov	r17,r4
20089884:	2809883a 	mov	r4,r5
20089888:	dfc00215 	stw	ra,8(sp)
2008988c:	80000015 	stw	zero,0(r16)
20089890:	008d0f00 	call	2008d0f0 <isatty>
20089894:	00ffffc4 	movi	r3,-1
20089898:	10c00526 	beq	r2,r3,200898b0 <_isatty_r+0x44>
2008989c:	dfc00217 	ldw	ra,8(sp)
200898a0:	dc400117 	ldw	r17,4(sp)
200898a4:	dc000017 	ldw	r16,0(sp)
200898a8:	dec00304 	addi	sp,sp,12
200898ac:	f800283a 	ret
200898b0:	80c00017 	ldw	r3,0(r16)
200898b4:	183ff926 	beq	r3,zero,2008989c <__flash_rwdata_start+0xffff7aa0>
200898b8:	88c00015 	stw	r3,0(r17)
200898bc:	003ff706 	br	2008989c <__flash_rwdata_start+0xffff7aa0>

200898c0 <_lseek_r>:
200898c0:	defffd04 	addi	sp,sp,-12
200898c4:	dc000015 	stw	r16,0(sp)
200898c8:	04000034 	movhi	r16,0
200898cc:	dc400115 	stw	r17,4(sp)
200898d0:	84096504 	addi	r16,r16,9620
200898d4:	2023883a 	mov	r17,r4
200898d8:	2809883a 	mov	r4,r5
200898dc:	300b883a 	mov	r5,r6
200898e0:	380d883a 	mov	r6,r7
200898e4:	dfc00215 	stw	ra,8(sp)
200898e8:	80000015 	stw	zero,0(r16)
200898ec:	008d2c80 	call	2008d2c8 <lseek>
200898f0:	00ffffc4 	movi	r3,-1
200898f4:	10c00526 	beq	r2,r3,2008990c <_lseek_r+0x4c>
200898f8:	dfc00217 	ldw	ra,8(sp)
200898fc:	dc400117 	ldw	r17,4(sp)
20089900:	dc000017 	ldw	r16,0(sp)
20089904:	dec00304 	addi	sp,sp,12
20089908:	f800283a 	ret
2008990c:	80c00017 	ldw	r3,0(r16)
20089910:	183ff926 	beq	r3,zero,200898f8 <__flash_rwdata_start+0xffff7afc>
20089914:	88c00015 	stw	r3,0(r17)
20089918:	003ff706 	br	200898f8 <__flash_rwdata_start+0xffff7afc>

2008991c <_read_r>:
2008991c:	defffd04 	addi	sp,sp,-12
20089920:	dc000015 	stw	r16,0(sp)
20089924:	04000034 	movhi	r16,0
20089928:	dc400115 	stw	r17,4(sp)
2008992c:	84096504 	addi	r16,r16,9620
20089930:	2023883a 	mov	r17,r4
20089934:	2809883a 	mov	r4,r5
20089938:	300b883a 	mov	r5,r6
2008993c:	380d883a 	mov	r6,r7
20089940:	dfc00215 	stw	ra,8(sp)
20089944:	80000015 	stw	zero,0(r16)
20089948:	008d4a40 	call	2008d4a4 <read>
2008994c:	00ffffc4 	movi	r3,-1
20089950:	10c00526 	beq	r2,r3,20089968 <_read_r+0x4c>
20089954:	dfc00217 	ldw	ra,8(sp)
20089958:	dc400117 	ldw	r17,4(sp)
2008995c:	dc000017 	ldw	r16,0(sp)
20089960:	dec00304 	addi	sp,sp,12
20089964:	f800283a 	ret
20089968:	80c00017 	ldw	r3,0(r16)
2008996c:	183ff926 	beq	r3,zero,20089954 <__flash_rwdata_start+0xffff7b58>
20089970:	88c00015 	stw	r3,0(r17)
20089974:	003ff706 	br	20089954 <__flash_rwdata_start+0xffff7b58>

20089978 <_wcrtomb_r>:
20089978:	defff604 	addi	sp,sp,-40
2008997c:	00800034 	movhi	r2,0
20089980:	dc800815 	stw	r18,32(sp)
20089984:	dc400715 	stw	r17,28(sp)
20089988:	dc000615 	stw	r16,24(sp)
2008998c:	10895404 	addi	r2,r2,9552
20089990:	dfc00915 	stw	ra,36(sp)
20089994:	2021883a 	mov	r16,r4
20089998:	3823883a 	mov	r17,r7
2008999c:	14800017 	ldw	r18,0(r2)
200899a0:	28001426 	beq	r5,zero,200899f4 <_wcrtomb_r+0x7c>
200899a4:	d9400415 	stw	r5,16(sp)
200899a8:	d9800515 	stw	r6,20(sp)
200899ac:	0085e200 	call	20085e20 <__locale_charset>
200899b0:	d9400417 	ldw	r5,16(sp)
200899b4:	d9800517 	ldw	r6,20(sp)
200899b8:	8009883a 	mov	r4,r16
200899bc:	dc400015 	stw	r17,0(sp)
200899c0:	100f883a 	mov	r7,r2
200899c4:	903ee83a 	callr	r18
200899c8:	00ffffc4 	movi	r3,-1
200899cc:	10c0031e 	bne	r2,r3,200899dc <_wcrtomb_r+0x64>
200899d0:	88000015 	stw	zero,0(r17)
200899d4:	00c02284 	movi	r3,138
200899d8:	80c00015 	stw	r3,0(r16)
200899dc:	dfc00917 	ldw	ra,36(sp)
200899e0:	dc800817 	ldw	r18,32(sp)
200899e4:	dc400717 	ldw	r17,28(sp)
200899e8:	dc000617 	ldw	r16,24(sp)
200899ec:	dec00a04 	addi	sp,sp,40
200899f0:	f800283a 	ret
200899f4:	0085e200 	call	20085e20 <__locale_charset>
200899f8:	8009883a 	mov	r4,r16
200899fc:	dc400015 	stw	r17,0(sp)
20089a00:	d9400104 	addi	r5,sp,4
20089a04:	000d883a 	mov	r6,zero
20089a08:	100f883a 	mov	r7,r2
20089a0c:	903ee83a 	callr	r18
20089a10:	003fed06 	br	200899c8 <__flash_rwdata_start+0xffff7bcc>

20089a14 <wcrtomb>:
20089a14:	defff604 	addi	sp,sp,-40
20089a18:	00800034 	movhi	r2,0
20089a1c:	dc800615 	stw	r18,24(sp)
20089a20:	dc400515 	stw	r17,20(sp)
20089a24:	dc000415 	stw	r16,16(sp)
20089a28:	10895004 	addi	r2,r2,9536
20089a2c:	dfc00915 	stw	ra,36(sp)
20089a30:	dd000815 	stw	r20,32(sp)
20089a34:	dcc00715 	stw	r19,28(sp)
20089a38:	2021883a 	mov	r16,r4
20089a3c:	3025883a 	mov	r18,r6
20089a40:	14400017 	ldw	r17,0(r2)
20089a44:	20001826 	beq	r4,zero,20089aa8 <wcrtomb+0x94>
20089a48:	00800034 	movhi	r2,0
20089a4c:	10895404 	addi	r2,r2,9552
20089a50:	15000017 	ldw	r20,0(r2)
20089a54:	2827883a 	mov	r19,r5
20089a58:	0085e200 	call	20085e20 <__locale_charset>
20089a5c:	8809883a 	mov	r4,r17
20089a60:	dc800015 	stw	r18,0(sp)
20089a64:	800b883a 	mov	r5,r16
20089a68:	980d883a 	mov	r6,r19
20089a6c:	100f883a 	mov	r7,r2
20089a70:	a03ee83a 	callr	r20
20089a74:	00ffffc4 	movi	r3,-1
20089a78:	10c0031e 	bne	r2,r3,20089a88 <wcrtomb+0x74>
20089a7c:	90000015 	stw	zero,0(r18)
20089a80:	00c02284 	movi	r3,138
20089a84:	88c00015 	stw	r3,0(r17)
20089a88:	dfc00917 	ldw	ra,36(sp)
20089a8c:	dd000817 	ldw	r20,32(sp)
20089a90:	dcc00717 	ldw	r19,28(sp)
20089a94:	dc800617 	ldw	r18,24(sp)
20089a98:	dc400517 	ldw	r17,20(sp)
20089a9c:	dc000417 	ldw	r16,16(sp)
20089aa0:	dec00a04 	addi	sp,sp,40
20089aa4:	f800283a 	ret
20089aa8:	00800034 	movhi	r2,0
20089aac:	10895404 	addi	r2,r2,9552
20089ab0:	14000017 	ldw	r16,0(r2)
20089ab4:	0085e200 	call	20085e20 <__locale_charset>
20089ab8:	8809883a 	mov	r4,r17
20089abc:	dc800015 	stw	r18,0(sp)
20089ac0:	d9400104 	addi	r5,sp,4
20089ac4:	000d883a 	mov	r6,zero
20089ac8:	100f883a 	mov	r7,r2
20089acc:	803ee83a 	callr	r16
20089ad0:	003fe806 	br	20089a74 <__flash_rwdata_start+0xffff7c78>

20089ad4 <__ascii_wctomb>:
20089ad4:	28000526 	beq	r5,zero,20089aec <__ascii_wctomb+0x18>
20089ad8:	00803fc4 	movi	r2,255
20089adc:	11800536 	bltu	r2,r6,20089af4 <__ascii_wctomb+0x20>
20089ae0:	29800005 	stb	r6,0(r5)
20089ae4:	00800044 	movi	r2,1
20089ae8:	f800283a 	ret
20089aec:	0005883a 	mov	r2,zero
20089af0:	f800283a 	ret
20089af4:	00802284 	movi	r2,138
20089af8:	20800015 	stw	r2,0(r4)
20089afc:	00bfffc4 	movi	r2,-1
20089b00:	f800283a 	ret

20089b04 <_wctomb_r>:
20089b04:	00800034 	movhi	r2,0
20089b08:	defff904 	addi	sp,sp,-28
20089b0c:	10895404 	addi	r2,r2,9552
20089b10:	dfc00615 	stw	ra,24(sp)
20089b14:	dc400515 	stw	r17,20(sp)
20089b18:	dc000415 	stw	r16,16(sp)
20089b1c:	3823883a 	mov	r17,r7
20089b20:	14000017 	ldw	r16,0(r2)
20089b24:	d9000115 	stw	r4,4(sp)
20089b28:	d9400215 	stw	r5,8(sp)
20089b2c:	d9800315 	stw	r6,12(sp)
20089b30:	0085e200 	call	20085e20 <__locale_charset>
20089b34:	d9000117 	ldw	r4,4(sp)
20089b38:	d9400217 	ldw	r5,8(sp)
20089b3c:	d9800317 	ldw	r6,12(sp)
20089b40:	dc400015 	stw	r17,0(sp)
20089b44:	100f883a 	mov	r7,r2
20089b48:	803ee83a 	callr	r16
20089b4c:	dfc00617 	ldw	ra,24(sp)
20089b50:	dc400517 	ldw	r17,20(sp)
20089b54:	dc000417 	ldw	r16,16(sp)
20089b58:	dec00704 	addi	sp,sp,28
20089b5c:	f800283a 	ret

20089b60 <__udivdi3>:
20089b60:	defff504 	addi	sp,sp,-44
20089b64:	dcc00415 	stw	r19,16(sp)
20089b68:	dc000115 	stw	r16,4(sp)
20089b6c:	dfc00a15 	stw	ra,40(sp)
20089b70:	df000915 	stw	fp,36(sp)
20089b74:	ddc00815 	stw	r23,32(sp)
20089b78:	dd800715 	stw	r22,28(sp)
20089b7c:	dd400615 	stw	r21,24(sp)
20089b80:	dd000515 	stw	r20,20(sp)
20089b84:	dc800315 	stw	r18,12(sp)
20089b88:	dc400215 	stw	r17,8(sp)
20089b8c:	2027883a 	mov	r19,r4
20089b90:	2821883a 	mov	r16,r5
20089b94:	3800421e 	bne	r7,zero,20089ca0 <__udivdi3+0x140>
20089b98:	3025883a 	mov	r18,r6
20089b9c:	2023883a 	mov	r17,r4
20089ba0:	2980542e 	bgeu	r5,r6,20089cf4 <__udivdi3+0x194>
20089ba4:	00bfffd4 	movui	r2,65535
20089ba8:	282d883a 	mov	r22,r5
20089bac:	1180a836 	bltu	r2,r6,20089e50 <__udivdi3+0x2f0>
20089bb0:	00803fc4 	movi	r2,255
20089bb4:	1181422e 	bgeu	r2,r6,2008a0c0 <__udivdi3+0x560>
20089bb8:	00800204 	movi	r2,8
20089bbc:	1007883a 	mov	r3,r2
20089bc0:	3084d83a 	srl	r2,r6,r2
20089bc4:	01000034 	movhi	r4,0
20089bc8:	21008c04 	addi	r4,r4,560
20089bcc:	2085883a 	add	r2,r4,r2
20089bd0:	10800003 	ldbu	r2,0(r2)
20089bd4:	10c7883a 	add	r3,r2,r3
20089bd8:	00800804 	movi	r2,32
20089bdc:	10c5c83a 	sub	r2,r2,r3
20089be0:	10000526 	beq	r2,zero,20089bf8 <__udivdi3+0x98>
20089be4:	80a0983a 	sll	r16,r16,r2
20089be8:	98c6d83a 	srl	r3,r19,r3
20089bec:	30a4983a 	sll	r18,r6,r2
20089bf0:	98a2983a 	sll	r17,r19,r2
20089bf4:	80ecb03a 	or	r22,r16,r3
20089bf8:	902ad43a 	srli	r21,r18,16
20089bfc:	b009883a 	mov	r4,r22
20089c00:	953fffcc 	andi	r20,r18,65535
20089c04:	a80b883a 	mov	r5,r21
20089c08:	008a7d40 	call	2008a7d4 <__umodsi3>
20089c0c:	b009883a 	mov	r4,r22
20089c10:	a80b883a 	mov	r5,r21
20089c14:	1027883a 	mov	r19,r2
20089c18:	008a7cc0 	call	2008a7cc <__udivsi3>
20089c1c:	1021883a 	mov	r16,r2
20089c20:	8806d43a 	srli	r3,r17,16
20089c24:	9804943a 	slli	r2,r19,16
20089c28:	8527383a 	mul	r19,r16,r20
20089c2c:	10c4b03a 	or	r2,r2,r3
20089c30:	14c0052e 	bgeu	r2,r19,20089c48 <__udivdi3+0xe8>
20089c34:	1485883a 	add	r2,r2,r18
20089c38:	80ffffc4 	addi	r3,r16,-1
20089c3c:	14800136 	bltu	r2,r18,20089c44 <__udivdi3+0xe4>
20089c40:	14c13436 	bltu	r2,r19,2008a114 <__udivdi3+0x5b4>
20089c44:	1821883a 	mov	r16,r3
20089c48:	14e7c83a 	sub	r19,r2,r19
20089c4c:	9809883a 	mov	r4,r19
20089c50:	a80b883a 	mov	r5,r21
20089c54:	008a7d40 	call	2008a7d4 <__umodsi3>
20089c58:	102d883a 	mov	r22,r2
20089c5c:	9809883a 	mov	r4,r19
20089c60:	a80b883a 	mov	r5,r21
20089c64:	008a7cc0 	call	2008a7cc <__udivsi3>
20089c68:	b02c943a 	slli	r22,r22,16
20089c6c:	1529383a 	mul	r20,r2,r20
20089c70:	8c7fffcc 	andi	r17,r17,65535
20089c74:	b462b03a 	or	r17,r22,r17
20089c78:	8d00052e 	bgeu	r17,r20,20089c90 <__udivdi3+0x130>
20089c7c:	8ca3883a 	add	r17,r17,r18
20089c80:	10ffffc4 	addi	r3,r2,-1
20089c84:	8c80f636 	bltu	r17,r18,2008a060 <__udivdi3+0x500>
20089c88:	8d00f52e 	bgeu	r17,r20,2008a060 <__udivdi3+0x500>
20089c8c:	10bfff84 	addi	r2,r2,-2
20089c90:	8020943a 	slli	r16,r16,16
20089c94:	0007883a 	mov	r3,zero
20089c98:	1404b03a 	or	r2,r2,r16
20089c9c:	00005b06 	br	20089e0c <__udivdi3+0x2ac>
20089ca0:	29c05836 	bltu	r5,r7,20089e04 <__udivdi3+0x2a4>
20089ca4:	00bfffd4 	movui	r2,65535
20089ca8:	11c0642e 	bgeu	r2,r7,20089e3c <__udivdi3+0x2dc>
20089cac:	00804034 	movhi	r2,256
20089cb0:	10bfffc4 	addi	r2,r2,-1
20089cb4:	11c0f32e 	bgeu	r2,r7,2008a084 <__udivdi3+0x524>
20089cb8:	00c00604 	movi	r3,24
20089cbc:	180b883a 	mov	r5,r3
20089cc0:	38c6d83a 	srl	r3,r7,r3
20089cc4:	00800034 	movhi	r2,0
20089cc8:	10808c04 	addi	r2,r2,560
20089ccc:	10c7883a 	add	r3,r2,r3
20089cd0:	18c00003 	ldbu	r3,0(r3)
20089cd4:	01000804 	movi	r4,32
20089cd8:	1947883a 	add	r3,r3,r5
20089cdc:	20e5c83a 	sub	r18,r4,r3
20089ce0:	9000661e 	bne	r18,zero,20089e7c <__udivdi3+0x31c>
20089ce4:	3c00f936 	bltu	r7,r16,2008a0cc <__udivdi3+0x56c>
20089ce8:	9985403a 	cmpgeu	r2,r19,r6
20089cec:	0007883a 	mov	r3,zero
20089cf0:	00004606 	br	20089e0c <__udivdi3+0x2ac>
20089cf4:	3000041e 	bne	r6,zero,20089d08 <__udivdi3+0x1a8>
20089cf8:	01000044 	movi	r4,1
20089cfc:	000b883a 	mov	r5,zero
20089d00:	008a7cc0 	call	2008a7cc <__udivsi3>
20089d04:	1025883a 	mov	r18,r2
20089d08:	00bfffd4 	movui	r2,65535
20089d0c:	1480562e 	bgeu	r2,r18,20089e68 <__udivdi3+0x308>
20089d10:	00804034 	movhi	r2,256
20089d14:	10bfffc4 	addi	r2,r2,-1
20089d18:	1480e32e 	bgeu	r2,r18,2008a0a8 <__udivdi3+0x548>
20089d1c:	00800604 	movi	r2,24
20089d20:	1007883a 	mov	r3,r2
20089d24:	9084d83a 	srl	r2,r18,r2
20089d28:	01000034 	movhi	r4,0
20089d2c:	21008c04 	addi	r4,r4,560
20089d30:	2085883a 	add	r2,r4,r2
20089d34:	10800003 	ldbu	r2,0(r2)
20089d38:	10c5883a 	add	r2,r2,r3
20089d3c:	00c00804 	movi	r3,32
20089d40:	1887c83a 	sub	r3,r3,r2
20089d44:	1800911e 	bne	r3,zero,20089f8c <__udivdi3+0x42c>
20089d48:	9028d43a 	srli	r20,r18,16
20089d4c:	84a1c83a 	sub	r16,r16,r18
20089d50:	957fffcc 	andi	r21,r18,65535
20089d54:	00c00044 	movi	r3,1
20089d58:	8009883a 	mov	r4,r16
20089d5c:	a00b883a 	mov	r5,r20
20089d60:	d8c00015 	stw	r3,0(sp)
20089d64:	008a7d40 	call	2008a7d4 <__umodsi3>
20089d68:	8009883a 	mov	r4,r16
20089d6c:	a00b883a 	mov	r5,r20
20089d70:	1027883a 	mov	r19,r2
20089d74:	008a7cc0 	call	2008a7cc <__udivsi3>
20089d78:	1021883a 	mov	r16,r2
20089d7c:	880cd43a 	srli	r6,r17,16
20089d80:	9804943a 	slli	r2,r19,16
20089d84:	8567383a 	mul	r19,r16,r21
20089d88:	d8c00017 	ldw	r3,0(sp)
20089d8c:	1188b03a 	or	r4,r2,r6
20089d90:	24c0052e 	bgeu	r4,r19,20089da8 <__udivdi3+0x248>
20089d94:	2489883a 	add	r4,r4,r18
20089d98:	80bfffc4 	addi	r2,r16,-1
20089d9c:	24800136 	bltu	r4,r18,20089da4 <__udivdi3+0x244>
20089da0:	24c0d936 	bltu	r4,r19,2008a108 <__udivdi3+0x5a8>
20089da4:	1021883a 	mov	r16,r2
20089da8:	24e7c83a 	sub	r19,r4,r19
20089dac:	9809883a 	mov	r4,r19
20089db0:	a00b883a 	mov	r5,r20
20089db4:	d8c00015 	stw	r3,0(sp)
20089db8:	008a7d40 	call	2008a7d4 <__umodsi3>
20089dbc:	102d883a 	mov	r22,r2
20089dc0:	9809883a 	mov	r4,r19
20089dc4:	a00b883a 	mov	r5,r20
20089dc8:	008a7cc0 	call	2008a7cc <__udivsi3>
20089dcc:	b02c943a 	slli	r22,r22,16
20089dd0:	156b383a 	mul	r21,r2,r21
20089dd4:	8c7fffcc 	andi	r17,r17,65535
20089dd8:	b462b03a 	or	r17,r22,r17
20089ddc:	d8c00017 	ldw	r3,0(sp)
20089de0:	8d40052e 	bgeu	r17,r21,20089df8 <__udivdi3+0x298>
20089de4:	8ca3883a 	add	r17,r17,r18
20089de8:	113fffc4 	addi	r4,r2,-1
20089dec:	8c809a36 	bltu	r17,r18,2008a058 <__udivdi3+0x4f8>
20089df0:	8d40992e 	bgeu	r17,r21,2008a058 <__udivdi3+0x4f8>
20089df4:	10bfff84 	addi	r2,r2,-2
20089df8:	8020943a 	slli	r16,r16,16
20089dfc:	1404b03a 	or	r2,r2,r16
20089e00:	00000206 	br	20089e0c <__udivdi3+0x2ac>
20089e04:	0007883a 	mov	r3,zero
20089e08:	0005883a 	mov	r2,zero
20089e0c:	dfc00a17 	ldw	ra,40(sp)
20089e10:	df000917 	ldw	fp,36(sp)
20089e14:	ddc00817 	ldw	r23,32(sp)
20089e18:	dd800717 	ldw	r22,28(sp)
20089e1c:	dd400617 	ldw	r21,24(sp)
20089e20:	dd000517 	ldw	r20,20(sp)
20089e24:	dcc00417 	ldw	r19,16(sp)
20089e28:	dc800317 	ldw	r18,12(sp)
20089e2c:	dc400217 	ldw	r17,8(sp)
20089e30:	dc000117 	ldw	r16,4(sp)
20089e34:	dec00b04 	addi	sp,sp,44
20089e38:	f800283a 	ret
20089e3c:	00803fc4 	movi	r2,255
20089e40:	11c0932e 	bgeu	r2,r7,2008a090 <__udivdi3+0x530>
20089e44:	00c00204 	movi	r3,8
20089e48:	180b883a 	mov	r5,r3
20089e4c:	003f9c06 	br	20089cc0 <__flash_rwdata_start+0xffff7ec4>
20089e50:	00804034 	movhi	r2,256
20089e54:	10bfffc4 	addi	r2,r2,-1
20089e58:	1180902e 	bgeu	r2,r6,2008a09c <__udivdi3+0x53c>
20089e5c:	00800604 	movi	r2,24
20089e60:	1007883a 	mov	r3,r2
20089e64:	003f5606 	br	20089bc0 <__flash_rwdata_start+0xffff7dc4>
20089e68:	00803fc4 	movi	r2,255
20089e6c:	1480912e 	bgeu	r2,r18,2008a0b4 <__udivdi3+0x554>
20089e70:	00800204 	movi	r2,8
20089e74:	1007883a 	mov	r3,r2
20089e78:	003faa06 	br	20089d24 <__flash_rwdata_start+0xffff7f28>
20089e7c:	30eed83a 	srl	r23,r6,r3
20089e80:	3c8e983a 	sll	r7,r7,r18
20089e84:	80f8d83a 	srl	fp,r16,r3
20089e88:	98c6d83a 	srl	r3,r19,r3
20089e8c:	3deeb03a 	or	r23,r7,r23
20089e90:	b828d43a 	srli	r20,r23,16
20089e94:	84a0983a 	sll	r16,r16,r18
20089e98:	e009883a 	mov	r4,fp
20089e9c:	a00b883a 	mov	r5,r20
20089ea0:	80e2b03a 	or	r17,r16,r3
20089ea4:	34aa983a 	sll	r21,r6,r18
20089ea8:	008a7d40 	call	2008a7d4 <__umodsi3>
20089eac:	e009883a 	mov	r4,fp
20089eb0:	a00b883a 	mov	r5,r20
20089eb4:	102d883a 	mov	r22,r2
20089eb8:	008a7cc0 	call	2008a7cc <__udivsi3>
20089ebc:	1021883a 	mov	r16,r2
20089ec0:	bf3fffcc 	andi	fp,r23,65535
20089ec4:	b004943a 	slli	r2,r22,16
20089ec8:	8808d43a 	srli	r4,r17,16
20089ecc:	872d383a 	mul	r22,r16,fp
20089ed0:	1104b03a 	or	r2,r2,r4
20089ed4:	1580042e 	bgeu	r2,r22,20089ee8 <__udivdi3+0x388>
20089ed8:	15c5883a 	add	r2,r2,r23
20089edc:	80ffffc4 	addi	r3,r16,-1
20089ee0:	15c0812e 	bgeu	r2,r23,2008a0e8 <__udivdi3+0x588>
20089ee4:	1821883a 	mov	r16,r3
20089ee8:	15adc83a 	sub	r22,r2,r22
20089eec:	b009883a 	mov	r4,r22
20089ef0:	a00b883a 	mov	r5,r20
20089ef4:	008a7d40 	call	2008a7d4 <__umodsi3>
20089ef8:	a00b883a 	mov	r5,r20
20089efc:	b009883a 	mov	r4,r22
20089f00:	d8800015 	stw	r2,0(sp)
20089f04:	008a7cc0 	call	2008a7cc <__udivsi3>
20089f08:	d8c00017 	ldw	r3,0(sp)
20089f0c:	170b383a 	mul	r5,r2,fp
20089f10:	8c7fffcc 	andi	r17,r17,65535
20089f14:	1806943a 	slli	r3,r3,16
20089f18:	1c46b03a 	or	r3,r3,r17
20089f1c:	1940042e 	bgeu	r3,r5,20089f30 <__udivdi3+0x3d0>
20089f20:	1dc7883a 	add	r3,r3,r23
20089f24:	113fffc4 	addi	r4,r2,-1
20089f28:	1dc06b2e 	bgeu	r3,r23,2008a0d8 <__udivdi3+0x578>
20089f2c:	2005883a 	mov	r2,r4
20089f30:	8020943a 	slli	r16,r16,16
20089f34:	a9ffffcc 	andi	r7,r21,65535
20089f38:	a82ad43a 	srli	r21,r21,16
20089f3c:	1404b03a 	or	r2,r2,r16
20089f40:	113fffcc 	andi	r4,r2,65535
20089f44:	100cd43a 	srli	r6,r2,16
20089f48:	21d3383a 	mul	r9,r4,r7
20089f4c:	2549383a 	mul	r4,r4,r21
20089f50:	31cf383a 	mul	r7,r6,r7
20089f54:	4810d43a 	srli	r8,r9,16
20089f58:	1947c83a 	sub	r3,r3,r5
20089f5c:	3909883a 	add	r4,r7,r4
20089f60:	2209883a 	add	r4,r4,r8
20089f64:	354d383a 	mul	r6,r6,r21
20089f68:	21c0022e 	bgeu	r4,r7,20089f74 <__udivdi3+0x414>
20089f6c:	01400074 	movhi	r5,1
20089f70:	314d883a 	add	r6,r6,r5
20089f74:	202ad43a 	srli	r21,r4,16
20089f78:	354d883a 	add	r6,r6,r21
20089f7c:	19803f36 	bltu	r3,r6,2008a07c <__udivdi3+0x51c>
20089f80:	19803926 	beq	r3,r6,2008a068 <__udivdi3+0x508>
20089f84:	0007883a 	mov	r3,zero
20089f88:	003fa006 	br	20089e0c <__flash_rwdata_start+0xffff8010>
20089f8c:	90e4983a 	sll	r18,r18,r3
20089f90:	80aad83a 	srl	r21,r16,r2
20089f94:	80e0983a 	sll	r16,r16,r3
20089f98:	9028d43a 	srli	r20,r18,16
20089f9c:	9884d83a 	srl	r2,r19,r2
20089fa0:	a809883a 	mov	r4,r21
20089fa4:	a00b883a 	mov	r5,r20
20089fa8:	80acb03a 	or	r22,r16,r2
20089fac:	98e2983a 	sll	r17,r19,r3
20089fb0:	008a7d40 	call	2008a7d4 <__umodsi3>
20089fb4:	a809883a 	mov	r4,r21
20089fb8:	a00b883a 	mov	r5,r20
20089fbc:	1021883a 	mov	r16,r2
20089fc0:	008a7cc0 	call	2008a7cc <__udivsi3>
20089fc4:	957fffcc 	andi	r21,r18,65535
20089fc8:	8020943a 	slli	r16,r16,16
20089fcc:	b00ad43a 	srli	r5,r22,16
20089fd0:	1567383a 	mul	r19,r2,r21
20089fd4:	102f883a 	mov	r23,r2
20089fd8:	8148b03a 	or	r4,r16,r5
20089fdc:	24c0062e 	bgeu	r4,r19,20089ff8 <__udivdi3+0x498>
20089fe0:	2489883a 	add	r4,r4,r18
20089fe4:	10bfffc4 	addi	r2,r2,-1
20089fe8:	24804536 	bltu	r4,r18,2008a100 <__udivdi3+0x5a0>
20089fec:	24c0442e 	bgeu	r4,r19,2008a100 <__udivdi3+0x5a0>
20089ff0:	bdffff84 	addi	r23,r23,-2
20089ff4:	2489883a 	add	r4,r4,r18
20089ff8:	24e7c83a 	sub	r19,r4,r19
20089ffc:	9809883a 	mov	r4,r19
2008a000:	a00b883a 	mov	r5,r20
2008a004:	008a7d40 	call	2008a7d4 <__umodsi3>
2008a008:	1021883a 	mov	r16,r2
2008a00c:	9809883a 	mov	r4,r19
2008a010:	a00b883a 	mov	r5,r20
2008a014:	008a7cc0 	call	2008a7cc <__udivsi3>
2008a018:	8020943a 	slli	r16,r16,16
2008a01c:	1007883a 	mov	r3,r2
2008a020:	1545383a 	mul	r2,r2,r21
2008a024:	b13fffcc 	andi	r4,r22,65535
2008a028:	8108b03a 	or	r4,r16,r4
2008a02c:	2080062e 	bgeu	r4,r2,2008a048 <__udivdi3+0x4e8>
2008a030:	2489883a 	add	r4,r4,r18
2008a034:	197fffc4 	addi	r5,r3,-1
2008a038:	24802f36 	bltu	r4,r18,2008a0f8 <__udivdi3+0x598>
2008a03c:	20802e2e 	bgeu	r4,r2,2008a0f8 <__udivdi3+0x598>
2008a040:	18ffff84 	addi	r3,r3,-2
2008a044:	2489883a 	add	r4,r4,r18
2008a048:	b82e943a 	slli	r23,r23,16
2008a04c:	20a1c83a 	sub	r16,r4,r2
2008a050:	1dc6b03a 	or	r3,r3,r23
2008a054:	003f4006 	br	20089d58 <__flash_rwdata_start+0xffff7f5c>
2008a058:	2005883a 	mov	r2,r4
2008a05c:	003f6606 	br	20089df8 <__flash_rwdata_start+0xffff7ffc>
2008a060:	1805883a 	mov	r2,r3
2008a064:	003f0a06 	br	20089c90 <__flash_rwdata_start+0xffff7e94>
2008a068:	2006943a 	slli	r3,r4,16
2008a06c:	9c88983a 	sll	r4,r19,r18
2008a070:	4a7fffcc 	andi	r9,r9,65535
2008a074:	1a47883a 	add	r3,r3,r9
2008a078:	20ffc22e 	bgeu	r4,r3,20089f84 <__flash_rwdata_start+0xffff8188>
2008a07c:	10bfffc4 	addi	r2,r2,-1
2008a080:	003fc006 	br	20089f84 <__flash_rwdata_start+0xffff8188>
2008a084:	00c00404 	movi	r3,16
2008a088:	180b883a 	mov	r5,r3
2008a08c:	003f0c06 	br	20089cc0 <__flash_rwdata_start+0xffff7ec4>
2008a090:	0007883a 	mov	r3,zero
2008a094:	000b883a 	mov	r5,zero
2008a098:	003f0906 	br	20089cc0 <__flash_rwdata_start+0xffff7ec4>
2008a09c:	00800404 	movi	r2,16
2008a0a0:	1007883a 	mov	r3,r2
2008a0a4:	003ec606 	br	20089bc0 <__flash_rwdata_start+0xffff7dc4>
2008a0a8:	00800404 	movi	r2,16
2008a0ac:	1007883a 	mov	r3,r2
2008a0b0:	003f1c06 	br	20089d24 <__flash_rwdata_start+0xffff7f28>
2008a0b4:	0005883a 	mov	r2,zero
2008a0b8:	0007883a 	mov	r3,zero
2008a0bc:	003f1906 	br	20089d24 <__flash_rwdata_start+0xffff7f28>
2008a0c0:	0005883a 	mov	r2,zero
2008a0c4:	0007883a 	mov	r3,zero
2008a0c8:	003ebd06 	br	20089bc0 <__flash_rwdata_start+0xffff7dc4>
2008a0cc:	0007883a 	mov	r3,zero
2008a0d0:	00800044 	movi	r2,1
2008a0d4:	003f4d06 	br	20089e0c <__flash_rwdata_start+0xffff8010>
2008a0d8:	197f942e 	bgeu	r3,r5,20089f2c <__flash_rwdata_start+0xffff8130>
2008a0dc:	10bfff84 	addi	r2,r2,-2
2008a0e0:	1dc7883a 	add	r3,r3,r23
2008a0e4:	003f9206 	br	20089f30 <__flash_rwdata_start+0xffff8134>
2008a0e8:	15bf7e2e 	bgeu	r2,r22,20089ee4 <__flash_rwdata_start+0xffff80e8>
2008a0ec:	843fff84 	addi	r16,r16,-2
2008a0f0:	15c5883a 	add	r2,r2,r23
2008a0f4:	003f7c06 	br	20089ee8 <__flash_rwdata_start+0xffff80ec>
2008a0f8:	2807883a 	mov	r3,r5
2008a0fc:	003fd206 	br	2008a048 <__flash_rwdata_start+0xffff824c>
2008a100:	102f883a 	mov	r23,r2
2008a104:	003fbc06 	br	20089ff8 <__flash_rwdata_start+0xffff81fc>
2008a108:	843fff84 	addi	r16,r16,-2
2008a10c:	2489883a 	add	r4,r4,r18
2008a110:	003f2506 	br	20089da8 <__flash_rwdata_start+0xffff7fac>
2008a114:	843fff84 	addi	r16,r16,-2
2008a118:	1485883a 	add	r2,r2,r18
2008a11c:	003eca06 	br	20089c48 <__flash_rwdata_start+0xffff7e4c>

2008a120 <__umoddi3>:
2008a120:	defff404 	addi	sp,sp,-48
2008a124:	ddc00915 	stw	r23,36(sp)
2008a128:	dc400315 	stw	r17,12(sp)
2008a12c:	dc000215 	stw	r16,8(sp)
2008a130:	dfc00b15 	stw	ra,44(sp)
2008a134:	df000a15 	stw	fp,40(sp)
2008a138:	dd800815 	stw	r22,32(sp)
2008a13c:	dd400715 	stw	r21,28(sp)
2008a140:	dd000615 	stw	r20,24(sp)
2008a144:	dcc00515 	stw	r19,20(sp)
2008a148:	dc800415 	stw	r18,16(sp)
2008a14c:	2021883a 	mov	r16,r4
2008a150:	2823883a 	mov	r17,r5
2008a154:	282f883a 	mov	r23,r5
2008a158:	3800381e 	bne	r7,zero,2008a23c <__umoddi3+0x11c>
2008a15c:	3027883a 	mov	r19,r6
2008a160:	2029883a 	mov	r20,r4
2008a164:	29804e2e 	bgeu	r5,r6,2008a2a0 <__umoddi3+0x180>
2008a168:	00bfffd4 	movui	r2,65535
2008a16c:	11809c36 	bltu	r2,r6,2008a3e0 <__umoddi3+0x2c0>
2008a170:	00803fc4 	movi	r2,255
2008a174:	11813b2e 	bgeu	r2,r6,2008a664 <__umoddi3+0x544>
2008a178:	01400204 	movi	r5,8
2008a17c:	2805883a 	mov	r2,r5
2008a180:	314ad83a 	srl	r5,r6,r5
2008a184:	00c00034 	movhi	r3,0
2008a188:	18c08c04 	addi	r3,r3,560
2008a18c:	194b883a 	add	r5,r3,r5
2008a190:	29000003 	ldbu	r4,0(r5)
2008a194:	2089883a 	add	r4,r4,r2
2008a198:	00800804 	movi	r2,32
2008a19c:	1105c83a 	sub	r2,r2,r4
2008a1a0:	1000ec26 	beq	r2,zero,2008a554 <__umoddi3+0x434>
2008a1a4:	88a2983a 	sll	r17,r17,r2
2008a1a8:	8108d83a 	srl	r4,r16,r4
2008a1ac:	30a6983a 	sll	r19,r6,r2
2008a1b0:	80a8983a 	sll	r20,r16,r2
2008a1b4:	1025883a 	mov	r18,r2
2008a1b8:	892eb03a 	or	r23,r17,r4
2008a1bc:	982cd43a 	srli	r22,r19,16
2008a1c0:	b809883a 	mov	r4,r23
2008a1c4:	9d7fffcc 	andi	r21,r19,65535
2008a1c8:	b00b883a 	mov	r5,r22
2008a1cc:	008a7d40 	call	2008a7d4 <__umodsi3>
2008a1d0:	b809883a 	mov	r4,r23
2008a1d4:	b00b883a 	mov	r5,r22
2008a1d8:	1021883a 	mov	r16,r2
2008a1dc:	008a7cc0 	call	2008a7cc <__udivsi3>
2008a1e0:	8020943a 	slli	r16,r16,16
2008a1e4:	a00cd43a 	srli	r6,r20,16
2008a1e8:	1545383a 	mul	r2,r2,r21
2008a1ec:	8188b03a 	or	r4,r16,r6
2008a1f0:	2080042e 	bgeu	r4,r2,2008a204 <__umoddi3+0xe4>
2008a1f4:	24c9883a 	add	r4,r4,r19
2008a1f8:	24c00236 	bltu	r4,r19,2008a204 <__umoddi3+0xe4>
2008a1fc:	2080012e 	bgeu	r4,r2,2008a204 <__umoddi3+0xe4>
2008a200:	24c9883a 	add	r4,r4,r19
2008a204:	20a3c83a 	sub	r17,r4,r2
2008a208:	8809883a 	mov	r4,r17
2008a20c:	b00b883a 	mov	r5,r22
2008a210:	008a7d40 	call	2008a7d4 <__umodsi3>
2008a214:	8809883a 	mov	r4,r17
2008a218:	b00b883a 	mov	r5,r22
2008a21c:	1021883a 	mov	r16,r2
2008a220:	008a7cc0 	call	2008a7cc <__udivsi3>
2008a224:	8006943a 	slli	r3,r16,16
2008a228:	1545383a 	mul	r2,r2,r21
2008a22c:	a13fffcc 	andi	r4,r20,65535
2008a230:	1906b03a 	or	r3,r3,r4
2008a234:	1880532e 	bgeu	r3,r2,2008a384 <__umoddi3+0x264>
2008a238:	00004e06 	br	2008a374 <__umoddi3+0x254>
2008a23c:	29c05536 	bltu	r5,r7,2008a394 <__umoddi3+0x274>
2008a240:	00bfffd4 	movui	r2,65535
2008a244:	11c0612e 	bgeu	r2,r7,2008a3cc <__umoddi3+0x2ac>
2008a248:	00804034 	movhi	r2,256
2008a24c:	10bfffc4 	addi	r2,r2,-1
2008a250:	11c0f82e 	bgeu	r2,r7,2008a634 <__umoddi3+0x514>
2008a254:	01400604 	movi	r5,24
2008a258:	282b883a 	mov	r21,r5
2008a25c:	394ad83a 	srl	r5,r7,r5
2008a260:	00c00034 	movhi	r3,0
2008a264:	18c08c04 	addi	r3,r3,560
2008a268:	194b883a 	add	r5,r3,r5
2008a26c:	28800003 	ldbu	r2,0(r5)
2008a270:	00c00804 	movi	r3,32
2008a274:	156b883a 	add	r21,r2,r21
2008a278:	1d69c83a 	sub	r20,r3,r21
2008a27c:	a000631e 	bne	r20,zero,2008a40c <__umoddi3+0x2ec>
2008a280:	3c400136 	bltu	r7,r17,2008a288 <__umoddi3+0x168>
2008a284:	81810436 	bltu	r16,r6,2008a698 <__umoddi3+0x578>
2008a288:	8185c83a 	sub	r2,r16,r6
2008a28c:	89e3c83a 	sub	r17,r17,r7
2008a290:	8087803a 	cmpltu	r3,r16,r2
2008a294:	88efc83a 	sub	r23,r17,r3
2008a298:	b807883a 	mov	r3,r23
2008a29c:	00003f06 	br	2008a39c <__umoddi3+0x27c>
2008a2a0:	3000041e 	bne	r6,zero,2008a2b4 <__umoddi3+0x194>
2008a2a4:	01000044 	movi	r4,1
2008a2a8:	000b883a 	mov	r5,zero
2008a2ac:	008a7cc0 	call	2008a7cc <__udivsi3>
2008a2b0:	1027883a 	mov	r19,r2
2008a2b4:	00bfffd4 	movui	r2,65535
2008a2b8:	14c04f2e 	bgeu	r2,r19,2008a3f8 <__umoddi3+0x2d8>
2008a2bc:	00804034 	movhi	r2,256
2008a2c0:	10bfffc4 	addi	r2,r2,-1
2008a2c4:	14c0e42e 	bgeu	r2,r19,2008a658 <__umoddi3+0x538>
2008a2c8:	00800604 	movi	r2,24
2008a2cc:	1007883a 	mov	r3,r2
2008a2d0:	9884d83a 	srl	r2,r19,r2
2008a2d4:	01000034 	movhi	r4,0
2008a2d8:	21008c04 	addi	r4,r4,560
2008a2dc:	2085883a 	add	r2,r4,r2
2008a2e0:	11000003 	ldbu	r4,0(r2)
2008a2e4:	00800804 	movi	r2,32
2008a2e8:	20c7883a 	add	r3,r4,r3
2008a2ec:	10c5c83a 	sub	r2,r2,r3
2008a2f0:	10009a1e 	bne	r2,zero,2008a55c <__umoddi3+0x43c>
2008a2f4:	982cd43a 	srli	r22,r19,16
2008a2f8:	8ce3c83a 	sub	r17,r17,r19
2008a2fc:	9c3fffcc 	andi	r16,r19,65535
2008a300:	0025883a 	mov	r18,zero
2008a304:	8809883a 	mov	r4,r17
2008a308:	b00b883a 	mov	r5,r22
2008a30c:	008a7d40 	call	2008a7d4 <__umodsi3>
2008a310:	8809883a 	mov	r4,r17
2008a314:	b00b883a 	mov	r5,r22
2008a318:	102b883a 	mov	r21,r2
2008a31c:	008a7cc0 	call	2008a7cc <__udivsi3>
2008a320:	a806943a 	slli	r3,r21,16
2008a324:	a008d43a 	srli	r4,r20,16
2008a328:	1405383a 	mul	r2,r2,r16
2008a32c:	190cb03a 	or	r6,r3,r4
2008a330:	3080032e 	bgeu	r6,r2,2008a340 <__umoddi3+0x220>
2008a334:	34cd883a 	add	r6,r6,r19
2008a338:	34c00136 	bltu	r6,r19,2008a340 <__umoddi3+0x220>
2008a33c:	3080d436 	bltu	r6,r2,2008a690 <__umoddi3+0x570>
2008a340:	30abc83a 	sub	r21,r6,r2
2008a344:	a809883a 	mov	r4,r21
2008a348:	b00b883a 	mov	r5,r22
2008a34c:	008a7d40 	call	2008a7d4 <__umodsi3>
2008a350:	1023883a 	mov	r17,r2
2008a354:	a809883a 	mov	r4,r21
2008a358:	b00b883a 	mov	r5,r22
2008a35c:	008a7cc0 	call	2008a7cc <__udivsi3>
2008a360:	8822943a 	slli	r17,r17,16
2008a364:	1405383a 	mul	r2,r2,r16
2008a368:	a13fffcc 	andi	r4,r20,65535
2008a36c:	8906b03a 	or	r3,r17,r4
2008a370:	1880042e 	bgeu	r3,r2,2008a384 <__umoddi3+0x264>
2008a374:	1cc7883a 	add	r3,r3,r19
2008a378:	1cc00236 	bltu	r3,r19,2008a384 <__umoddi3+0x264>
2008a37c:	1880012e 	bgeu	r3,r2,2008a384 <__umoddi3+0x264>
2008a380:	1cc7883a 	add	r3,r3,r19
2008a384:	1887c83a 	sub	r3,r3,r2
2008a388:	1c84d83a 	srl	r2,r3,r18
2008a38c:	0007883a 	mov	r3,zero
2008a390:	00000206 	br	2008a39c <__umoddi3+0x27c>
2008a394:	2005883a 	mov	r2,r4
2008a398:	2807883a 	mov	r3,r5
2008a39c:	dfc00b17 	ldw	ra,44(sp)
2008a3a0:	df000a17 	ldw	fp,40(sp)
2008a3a4:	ddc00917 	ldw	r23,36(sp)
2008a3a8:	dd800817 	ldw	r22,32(sp)
2008a3ac:	dd400717 	ldw	r21,28(sp)
2008a3b0:	dd000617 	ldw	r20,24(sp)
2008a3b4:	dcc00517 	ldw	r19,20(sp)
2008a3b8:	dc800417 	ldw	r18,16(sp)
2008a3bc:	dc400317 	ldw	r17,12(sp)
2008a3c0:	dc000217 	ldw	r16,8(sp)
2008a3c4:	dec00c04 	addi	sp,sp,48
2008a3c8:	f800283a 	ret
2008a3cc:	00803fc4 	movi	r2,255
2008a3d0:	11c0952e 	bgeu	r2,r7,2008a628 <__umoddi3+0x508>
2008a3d4:	01400204 	movi	r5,8
2008a3d8:	282b883a 	mov	r21,r5
2008a3dc:	003f9f06 	br	2008a25c <__flash_rwdata_start+0xffff8460>
2008a3e0:	00804034 	movhi	r2,256
2008a3e4:	10bfffc4 	addi	r2,r2,-1
2008a3e8:	1180952e 	bgeu	r2,r6,2008a640 <__umoddi3+0x520>
2008a3ec:	01400604 	movi	r5,24
2008a3f0:	2805883a 	mov	r2,r5
2008a3f4:	003f6206 	br	2008a180 <__flash_rwdata_start+0xffff8384>
2008a3f8:	00803fc4 	movi	r2,255
2008a3fc:	14c0932e 	bgeu	r2,r19,2008a64c <__umoddi3+0x52c>
2008a400:	00800204 	movi	r2,8
2008a404:	1007883a 	mov	r3,r2
2008a408:	003fb106 	br	2008a2d0 <__flash_rwdata_start+0xffff84d4>
2008a40c:	3548d83a 	srl	r4,r6,r21
2008a410:	3d0e983a 	sll	r7,r7,r20
2008a414:	8d10983a 	sll	r8,r17,r20
2008a418:	8d6cd83a 	srl	r22,r17,r21
2008a41c:	3922b03a 	or	r17,r7,r4
2008a420:	882ed43a 	srli	r23,r17,16
2008a424:	8564d83a 	srl	r18,r16,r21
2008a428:	b009883a 	mov	r4,r22
2008a42c:	b80b883a 	mov	r5,r23
2008a430:	44a4b03a 	or	r18,r8,r18
2008a434:	3526983a 	sll	r19,r6,r20
2008a438:	008a7d40 	call	2008a7d4 <__umodsi3>
2008a43c:	b009883a 	mov	r4,r22
2008a440:	b80b883a 	mov	r5,r23
2008a444:	1039883a 	mov	fp,r2
2008a448:	008a7cc0 	call	2008a7cc <__udivsi3>
2008a44c:	102d883a 	mov	r22,r2
2008a450:	8a3fffcc 	andi	r8,r17,65535
2008a454:	e004943a 	slli	r2,fp,16
2008a458:	900cd43a 	srli	r6,r18,16
2008a45c:	b239383a 	mul	fp,r22,r8
2008a460:	8520983a 	sll	r16,r16,r20
2008a464:	118ab03a 	or	r5,r2,r6
2008a468:	2f00042e 	bgeu	r5,fp,2008a47c <__umoddi3+0x35c>
2008a46c:	2c4b883a 	add	r5,r5,r17
2008a470:	b0bfffc4 	addi	r2,r22,-1
2008a474:	2c40822e 	bgeu	r5,r17,2008a680 <__umoddi3+0x560>
2008a478:	102d883a 	mov	r22,r2
2008a47c:	2f39c83a 	sub	fp,r5,fp
2008a480:	e009883a 	mov	r4,fp
2008a484:	b80b883a 	mov	r5,r23
2008a488:	da000115 	stw	r8,4(sp)
2008a48c:	008a7d40 	call	2008a7d4 <__umodsi3>
2008a490:	e009883a 	mov	r4,fp
2008a494:	b80b883a 	mov	r5,r23
2008a498:	d8800015 	stw	r2,0(sp)
2008a49c:	008a7cc0 	call	2008a7cc <__udivsi3>
2008a4a0:	d9800017 	ldw	r6,0(sp)
2008a4a4:	da000117 	ldw	r8,4(sp)
2008a4a8:	94bfffcc 	andi	r18,r18,65535
2008a4ac:	300c943a 	slli	r6,r6,16
2008a4b0:	1209383a 	mul	r4,r2,r8
2008a4b4:	3490b03a 	or	r8,r6,r18
2008a4b8:	4100042e 	bgeu	r8,r4,2008a4cc <__umoddi3+0x3ac>
2008a4bc:	4451883a 	add	r8,r8,r17
2008a4c0:	10ffffc4 	addi	r3,r2,-1
2008a4c4:	44406a2e 	bgeu	r8,r17,2008a670 <__umoddi3+0x550>
2008a4c8:	1805883a 	mov	r2,r3
2008a4cc:	b012943a 	slli	r9,r22,16
2008a4d0:	9abfffcc 	andi	r10,r19,65535
2008a4d4:	980ed43a 	srli	r7,r19,16
2008a4d8:	124ab03a 	or	r5,r2,r9
2008a4dc:	2a7fffcc 	andi	r9,r5,65535
2008a4e0:	280ad43a 	srli	r5,r5,16
2008a4e4:	4a8d383a 	mul	r6,r9,r10
2008a4e8:	49d3383a 	mul	r9,r9,r7
2008a4ec:	2a95383a 	mul	r10,r5,r10
2008a4f0:	3004d43a 	srli	r2,r6,16
2008a4f4:	4111c83a 	sub	r8,r8,r4
2008a4f8:	5253883a 	add	r9,r10,r9
2008a4fc:	4893883a 	add	r9,r9,r2
2008a500:	29cb383a 	mul	r5,r5,r7
2008a504:	4a80022e 	bgeu	r9,r10,2008a510 <__umoddi3+0x3f0>
2008a508:	00800074 	movhi	r2,1
2008a50c:	288b883a 	add	r5,r5,r2
2008a510:	4808d43a 	srli	r4,r9,16
2008a514:	4812943a 	slli	r9,r9,16
2008a518:	31bfffcc 	andi	r6,r6,65535
2008a51c:	290b883a 	add	r5,r5,r4
2008a520:	498d883a 	add	r6,r9,r6
2008a524:	41403a36 	bltu	r8,r5,2008a610 <__umoddi3+0x4f0>
2008a528:	41405d26 	beq	r8,r5,2008a6a0 <__umoddi3+0x580>
2008a52c:	4149c83a 	sub	r4,r8,r5
2008a530:	300f883a 	mov	r7,r6
2008a534:	81cfc83a 	sub	r7,r16,r7
2008a538:	81c7803a 	cmpltu	r3,r16,r7
2008a53c:	20c7c83a 	sub	r3,r4,r3
2008a540:	1d44983a 	sll	r2,r3,r21
2008a544:	3d0ed83a 	srl	r7,r7,r20
2008a548:	1d06d83a 	srl	r3,r3,r20
2008a54c:	11c4b03a 	or	r2,r2,r7
2008a550:	003f9206 	br	2008a39c <__flash_rwdata_start+0xffff85a0>
2008a554:	0025883a 	mov	r18,zero
2008a558:	003f1806 	br	2008a1bc <__flash_rwdata_start+0xffff83c0>
2008a55c:	98a6983a 	sll	r19,r19,r2
2008a560:	88e8d83a 	srl	r20,r17,r3
2008a564:	80c6d83a 	srl	r3,r16,r3
2008a568:	982cd43a 	srli	r22,r19,16
2008a56c:	88a2983a 	sll	r17,r17,r2
2008a570:	a009883a 	mov	r4,r20
2008a574:	b00b883a 	mov	r5,r22
2008a578:	88eab03a 	or	r21,r17,r3
2008a57c:	1025883a 	mov	r18,r2
2008a580:	008a7d40 	call	2008a7d4 <__umodsi3>
2008a584:	a009883a 	mov	r4,r20
2008a588:	b00b883a 	mov	r5,r22
2008a58c:	1023883a 	mov	r17,r2
2008a590:	008a7cc0 	call	2008a7cc <__udivsi3>
2008a594:	9f3fffcc 	andi	fp,r19,65535
2008a598:	8822943a 	slli	r17,r17,16
2008a59c:	a80ad43a 	srli	r5,r21,16
2008a5a0:	1705383a 	mul	r2,r2,fp
2008a5a4:	84a8983a 	sll	r20,r16,r18
2008a5a8:	8948b03a 	or	r4,r17,r5
2008a5ac:	2080042e 	bgeu	r4,r2,2008a5c0 <__umoddi3+0x4a0>
2008a5b0:	24c9883a 	add	r4,r4,r19
2008a5b4:	24c00236 	bltu	r4,r19,2008a5c0 <__umoddi3+0x4a0>
2008a5b8:	2080012e 	bgeu	r4,r2,2008a5c0 <__umoddi3+0x4a0>
2008a5bc:	24c9883a 	add	r4,r4,r19
2008a5c0:	20afc83a 	sub	r23,r4,r2
2008a5c4:	b809883a 	mov	r4,r23
2008a5c8:	b00b883a 	mov	r5,r22
2008a5cc:	008a7d40 	call	2008a7d4 <__umodsi3>
2008a5d0:	1023883a 	mov	r17,r2
2008a5d4:	b809883a 	mov	r4,r23
2008a5d8:	b00b883a 	mov	r5,r22
2008a5dc:	008a7cc0 	call	2008a7cc <__udivsi3>
2008a5e0:	8822943a 	slli	r17,r17,16
2008a5e4:	1705383a 	mul	r2,r2,fp
2008a5e8:	a93fffcc 	andi	r4,r21,65535
2008a5ec:	8908b03a 	or	r4,r17,r4
2008a5f0:	2080042e 	bgeu	r4,r2,2008a604 <__umoddi3+0x4e4>
2008a5f4:	24c9883a 	add	r4,r4,r19
2008a5f8:	24c00236 	bltu	r4,r19,2008a604 <__umoddi3+0x4e4>
2008a5fc:	2080012e 	bgeu	r4,r2,2008a604 <__umoddi3+0x4e4>
2008a600:	24c9883a 	add	r4,r4,r19
2008a604:	20a3c83a 	sub	r17,r4,r2
2008a608:	e021883a 	mov	r16,fp
2008a60c:	003f3d06 	br	2008a304 <__flash_rwdata_start+0xffff8508>
2008a610:	34cfc83a 	sub	r7,r6,r19
2008a614:	2c4bc83a 	sub	r5,r5,r17
2008a618:	31cd803a 	cmpltu	r6,r6,r7
2008a61c:	298dc83a 	sub	r6,r5,r6
2008a620:	4189c83a 	sub	r4,r8,r6
2008a624:	003fc306 	br	2008a534 <__flash_rwdata_start+0xffff8738>
2008a628:	000b883a 	mov	r5,zero
2008a62c:	002b883a 	mov	r21,zero
2008a630:	003f0a06 	br	2008a25c <__flash_rwdata_start+0xffff8460>
2008a634:	01400404 	movi	r5,16
2008a638:	282b883a 	mov	r21,r5
2008a63c:	003f0706 	br	2008a25c <__flash_rwdata_start+0xffff8460>
2008a640:	01400404 	movi	r5,16
2008a644:	2805883a 	mov	r2,r5
2008a648:	003ecd06 	br	2008a180 <__flash_rwdata_start+0xffff8384>
2008a64c:	0005883a 	mov	r2,zero
2008a650:	0007883a 	mov	r3,zero
2008a654:	003f1e06 	br	2008a2d0 <__flash_rwdata_start+0xffff84d4>
2008a658:	00800404 	movi	r2,16
2008a65c:	1007883a 	mov	r3,r2
2008a660:	003f1b06 	br	2008a2d0 <__flash_rwdata_start+0xffff84d4>
2008a664:	000b883a 	mov	r5,zero
2008a668:	0005883a 	mov	r2,zero
2008a66c:	003ec406 	br	2008a180 <__flash_rwdata_start+0xffff8384>
2008a670:	413f952e 	bgeu	r8,r4,2008a4c8 <__flash_rwdata_start+0xffff86cc>
2008a674:	10bfff84 	addi	r2,r2,-2
2008a678:	4451883a 	add	r8,r8,r17
2008a67c:	003f9306 	br	2008a4cc <__flash_rwdata_start+0xffff86d0>
2008a680:	2f3f7d2e 	bgeu	r5,fp,2008a478 <__flash_rwdata_start+0xffff867c>
2008a684:	b5bfff84 	addi	r22,r22,-2
2008a688:	2c4b883a 	add	r5,r5,r17
2008a68c:	003f7b06 	br	2008a47c <__flash_rwdata_start+0xffff8680>
2008a690:	34cd883a 	add	r6,r6,r19
2008a694:	003f2a06 	br	2008a340 <__flash_rwdata_start+0xffff8544>
2008a698:	8005883a 	mov	r2,r16
2008a69c:	003efe06 	br	2008a298 <__flash_rwdata_start+0xffff849c>
2008a6a0:	81bfdb36 	bltu	r16,r6,2008a610 <__flash_rwdata_start+0xffff8814>
2008a6a4:	300f883a 	mov	r7,r6
2008a6a8:	0009883a 	mov	r4,zero
2008a6ac:	003fa106 	br	2008a534 <__flash_rwdata_start+0xffff8738>

2008a6b0 <udivmodsi4>:
2008a6b0:	2900182e 	bgeu	r5,r4,2008a714 <udivmodsi4+0x64>
2008a6b4:	28001716 	blt	r5,zero,2008a714 <udivmodsi4+0x64>
2008a6b8:	00800804 	movi	r2,32
2008a6bc:	00c00044 	movi	r3,1
2008a6c0:	00000206 	br	2008a6cc <udivmodsi4+0x1c>
2008a6c4:	10001126 	beq	r2,zero,2008a70c <udivmodsi4+0x5c>
2008a6c8:	28000516 	blt	r5,zero,2008a6e0 <udivmodsi4+0x30>
2008a6cc:	294b883a 	add	r5,r5,r5
2008a6d0:	10bfffc4 	addi	r2,r2,-1
2008a6d4:	18c7883a 	add	r3,r3,r3
2008a6d8:	293ffa36 	bltu	r5,r4,2008a6c4 <__flash_rwdata_start+0xffff88c8>
2008a6dc:	18000b26 	beq	r3,zero,2008a70c <udivmodsi4+0x5c>
2008a6e0:	0005883a 	mov	r2,zero
2008a6e4:	21400236 	bltu	r4,r5,2008a6f0 <udivmodsi4+0x40>
2008a6e8:	2149c83a 	sub	r4,r4,r5
2008a6ec:	10c4b03a 	or	r2,r2,r3
2008a6f0:	1806d07a 	srli	r3,r3,1
2008a6f4:	280ad07a 	srli	r5,r5,1
2008a6f8:	183ffa1e 	bne	r3,zero,2008a6e4 <__flash_rwdata_start+0xffff88e8>
2008a6fc:	3000011e 	bne	r6,zero,2008a704 <udivmodsi4+0x54>
2008a700:	f800283a 	ret
2008a704:	2005883a 	mov	r2,r4
2008a708:	f800283a 	ret
2008a70c:	0005883a 	mov	r2,zero
2008a710:	003ffa06 	br	2008a6fc <__flash_rwdata_start+0xffff8900>
2008a714:	00c00044 	movi	r3,1
2008a718:	003ff106 	br	2008a6e0 <__flash_rwdata_start+0xffff88e4>

2008a71c <__divsi3>:
2008a71c:	defffe04 	addi	sp,sp,-8
2008a720:	dfc00115 	stw	ra,4(sp)
2008a724:	dc000015 	stw	r16,0(sp)
2008a728:	20000b16 	blt	r4,zero,2008a758 <__divsi3+0x3c>
2008a72c:	0021883a 	mov	r16,zero
2008a730:	28000c16 	blt	r5,zero,2008a764 <__divsi3+0x48>
2008a734:	000d883a 	mov	r6,zero
2008a738:	008a6b00 	call	2008a6b0 <udivmodsi4>
2008a73c:	0407c83a 	sub	r3,zero,r16
2008a740:	1884f03a 	xor	r2,r3,r2
2008a744:	1405883a 	add	r2,r2,r16
2008a748:	dfc00117 	ldw	ra,4(sp)
2008a74c:	dc000017 	ldw	r16,0(sp)
2008a750:	dec00204 	addi	sp,sp,8
2008a754:	f800283a 	ret
2008a758:	0109c83a 	sub	r4,zero,r4
2008a75c:	04000044 	movi	r16,1
2008a760:	283ff40e 	bge	r5,zero,2008a734 <__flash_rwdata_start+0xffff8938>
2008a764:	014bc83a 	sub	r5,zero,r5
2008a768:	8400005c 	xori	r16,r16,1
2008a76c:	003ff106 	br	2008a734 <__flash_rwdata_start+0xffff8938>

2008a770 <__modsi3>:
2008a770:	defffd04 	addi	sp,sp,-12
2008a774:	dfc00215 	stw	ra,8(sp)
2008a778:	dc400115 	stw	r17,4(sp)
2008a77c:	dc000015 	stw	r16,0(sp)
2008a780:	20000c16 	blt	r4,zero,2008a7b4 <__modsi3+0x44>
2008a784:	0023883a 	mov	r17,zero
2008a788:	0021883a 	mov	r16,zero
2008a78c:	28000d16 	blt	r5,zero,2008a7c4 <__modsi3+0x54>
2008a790:	01800044 	movi	r6,1
2008a794:	008a6b00 	call	2008a6b0 <udivmodsi4>
2008a798:	1404f03a 	xor	r2,r2,r16
2008a79c:	8885883a 	add	r2,r17,r2
2008a7a0:	dfc00217 	ldw	ra,8(sp)
2008a7a4:	dc400117 	ldw	r17,4(sp)
2008a7a8:	dc000017 	ldw	r16,0(sp)
2008a7ac:	dec00304 	addi	sp,sp,12
2008a7b0:	f800283a 	ret
2008a7b4:	0109c83a 	sub	r4,zero,r4
2008a7b8:	04400044 	movi	r17,1
2008a7bc:	043fffc4 	movi	r16,-1
2008a7c0:	283ff30e 	bge	r5,zero,2008a790 <__flash_rwdata_start+0xffff8994>
2008a7c4:	014bc83a 	sub	r5,zero,r5
2008a7c8:	003ff106 	br	2008a790 <__flash_rwdata_start+0xffff8994>

2008a7cc <__udivsi3>:
2008a7cc:	000d883a 	mov	r6,zero
2008a7d0:	008a6b01 	jmpi	2008a6b0 <udivmodsi4>

2008a7d4 <__umodsi3>:
2008a7d4:	01800044 	movi	r6,1
2008a7d8:	008a6b01 	jmpi	2008a6b0 <udivmodsi4>

2008a7dc <__adddf3>:
2008a7dc:	02000434 	movhi	r8,16
2008a7e0:	423fffc4 	addi	r8,r8,-1
2008a7e4:	defffb04 	addi	sp,sp,-20
2008a7e8:	2a12703a 	and	r9,r5,r8
2008a7ec:	2806d7fa 	srli	r3,r5,31
2008a7f0:	3a10703a 	and	r8,r7,r8
2008a7f4:	3804d53a 	srli	r2,r7,20
2008a7f8:	3014d77a 	srli	r10,r6,29
2008a7fc:	dc000015 	stw	r16,0(sp)
2008a800:	481290fa 	slli	r9,r9,3
2008a804:	2820d53a 	srli	r16,r5,20
2008a808:	401090fa 	slli	r8,r8,3
2008a80c:	200ad77a 	srli	r5,r4,29
2008a810:	380ed7fa 	srli	r7,r7,31
2008a814:	dc800215 	stw	r18,8(sp)
2008a818:	dc400115 	stw	r17,4(sp)
2008a81c:	dfc00415 	stw	ra,16(sp)
2008a820:	dcc00315 	stw	r19,12(sp)
2008a824:	1c803fcc 	andi	r18,r3,255
2008a828:	8401ffcc 	andi	r16,r16,2047
2008a82c:	494ab03a 	or	r5,r9,r5
2008a830:	202290fa 	slli	r17,r4,3
2008a834:	1081ffcc 	andi	r2,r2,2047
2008a838:	4290b03a 	or	r8,r8,r10
2008a83c:	300c90fa 	slli	r6,r6,3
2008a840:	91c07026 	beq	r18,r7,2008aa04 <__adddf3+0x228>
2008a844:	8087c83a 	sub	r3,r16,r2
2008a848:	00c0b30e 	bge	zero,r3,2008ab18 <__adddf3+0x33c>
2008a84c:	10002a1e 	bne	r2,zero,2008a8f8 <__adddf3+0x11c>
2008a850:	4184b03a 	or	r2,r8,r6
2008a854:	1000991e 	bne	r2,zero,2008aabc <__adddf3+0x2e0>
2008a858:	888001cc 	andi	r2,r17,7
2008a85c:	10005b26 	beq	r2,zero,2008a9cc <__adddf3+0x1f0>
2008a860:	88c003cc 	andi	r3,r17,15
2008a864:	00800104 	movi	r2,4
2008a868:	18805826 	beq	r3,r2,2008a9cc <__adddf3+0x1f0>
2008a86c:	89800104 	addi	r6,r17,4
2008a870:	3463803a 	cmpltu	r17,r6,r17
2008a874:	2c4b883a 	add	r5,r5,r17
2008a878:	2880202c 	andhi	r2,r5,128
2008a87c:	9007883a 	mov	r3,r18
2008a880:	3023883a 	mov	r17,r6
2008a884:	10005426 	beq	r2,zero,2008a9d8 <__adddf3+0x1fc>
2008a888:	84000044 	addi	r16,r16,1
2008a88c:	0081ffc4 	movi	r2,2047
2008a890:	8080c126 	beq	r16,r2,2008ab98 <__adddf3+0x3bc>
2008a894:	013fe034 	movhi	r4,65408
2008a898:	213fffc4 	addi	r4,r4,-1
2008a89c:	290a703a 	and	r5,r5,r4
2008a8a0:	2804977a 	slli	r2,r5,29
2008a8a4:	280a927a 	slli	r5,r5,9
2008a8a8:	8822d0fa 	srli	r17,r17,3
2008a8ac:	8401ffcc 	andi	r16,r16,2047
2008a8b0:	2808d33a 	srli	r4,r5,12
2008a8b4:	1444b03a 	or	r2,r2,r17
2008a8b8:	8401ffcc 	andi	r16,r16,2047
2008a8bc:	800a953a 	slli	r5,r16,20
2008a8c0:	18c03fcc 	andi	r3,r3,255
2008a8c4:	04000434 	movhi	r16,16
2008a8c8:	180697fa 	slli	r3,r3,31
2008a8cc:	843fffc4 	addi	r16,r16,-1
2008a8d0:	2420703a 	and	r16,r4,r16
2008a8d4:	8160b03a 	or	r16,r16,r5
2008a8d8:	80c6b03a 	or	r3,r16,r3
2008a8dc:	dfc00417 	ldw	ra,16(sp)
2008a8e0:	dcc00317 	ldw	r19,12(sp)
2008a8e4:	dc800217 	ldw	r18,8(sp)
2008a8e8:	dc400117 	ldw	r17,4(sp)
2008a8ec:	dc000017 	ldw	r16,0(sp)
2008a8f0:	dec00504 	addi	sp,sp,20
2008a8f4:	f800283a 	ret
2008a8f8:	0081ffc4 	movi	r2,2047
2008a8fc:	80bfd626 	beq	r16,r2,2008a858 <__flash_rwdata_start+0xffff8a5c>
2008a900:	42002034 	orhi	r8,r8,128
2008a904:	00800e04 	movi	r2,56
2008a908:	10c0a616 	blt	r2,r3,2008aba4 <__adddf3+0x3c8>
2008a90c:	008007c4 	movi	r2,31
2008a910:	10c0c916 	blt	r2,r3,2008ac38 <__adddf3+0x45c>
2008a914:	00800804 	movi	r2,32
2008a918:	10c5c83a 	sub	r2,r2,r3
2008a91c:	408e983a 	sll	r7,r8,r2
2008a920:	30c8d83a 	srl	r4,r6,r3
2008a924:	3084983a 	sll	r2,r6,r2
2008a928:	40c6d83a 	srl	r3,r8,r3
2008a92c:	390cb03a 	or	r6,r7,r4
2008a930:	1004c03a 	cmpne	r2,r2,zero
2008a934:	308cb03a 	or	r6,r6,r2
2008a938:	898dc83a 	sub	r6,r17,r6
2008a93c:	89a3803a 	cmpltu	r17,r17,r6
2008a940:	28cbc83a 	sub	r5,r5,r3
2008a944:	2c4bc83a 	sub	r5,r5,r17
2008a948:	3023883a 	mov	r17,r6
2008a94c:	2880202c 	andhi	r2,r5,128
2008a950:	10006d26 	beq	r2,zero,2008ab08 <__adddf3+0x32c>
2008a954:	04c02034 	movhi	r19,128
2008a958:	9cffffc4 	addi	r19,r19,-1
2008a95c:	2ce6703a 	and	r19,r5,r19
2008a960:	98007e26 	beq	r19,zero,2008ab5c <__adddf3+0x380>
2008a964:	9809883a 	mov	r4,r19
2008a968:	008cd780 	call	2008cd78 <__clzsi2>
2008a96c:	10fffe04 	addi	r3,r2,-8
2008a970:	010007c4 	movi	r4,31
2008a974:	20c07f16 	blt	r4,r3,2008ab74 <__adddf3+0x398>
2008a978:	01400a04 	movi	r5,40
2008a97c:	2885c83a 	sub	r2,r5,r2
2008a980:	888ad83a 	srl	r5,r17,r2
2008a984:	98e6983a 	sll	r19,r19,r3
2008a988:	88e2983a 	sll	r17,r17,r3
2008a98c:	2ce6b03a 	or	r19,r5,r19
2008a990:	1c007c16 	blt	r3,r16,2008ab84 <__adddf3+0x3a8>
2008a994:	1c21c83a 	sub	r16,r3,r16
2008a998:	81400044 	addi	r5,r16,1
2008a99c:	00c007c4 	movi	r3,31
2008a9a0:	19409816 	blt	r3,r5,2008ac04 <__adddf3+0x428>
2008a9a4:	1c21c83a 	sub	r16,r3,r16
2008a9a8:	8c08983a 	sll	r4,r17,r16
2008a9ac:	8946d83a 	srl	r3,r17,r5
2008a9b0:	9c20983a 	sll	r16,r19,r16
2008a9b4:	2008c03a 	cmpne	r4,r4,zero
2008a9b8:	994ad83a 	srl	r5,r19,r5
2008a9bc:	1c06b03a 	or	r3,r3,r16
2008a9c0:	1922b03a 	or	r17,r3,r4
2008a9c4:	0021883a 	mov	r16,zero
2008a9c8:	003fa306 	br	2008a858 <__flash_rwdata_start+0xffff8a5c>
2008a9cc:	2880202c 	andhi	r2,r5,128
2008a9d0:	9007883a 	mov	r3,r18
2008a9d4:	103fac1e 	bne	r2,zero,2008a888 <__flash_rwdata_start+0xffff8a8c>
2008a9d8:	2804977a 	slli	r2,r5,29
2008a9dc:	8822d0fa 	srli	r17,r17,3
2008a9e0:	0101ffc4 	movi	r4,2047
2008a9e4:	280ad0fa 	srli	r5,r5,3
2008a9e8:	1444b03a 	or	r2,r2,r17
2008a9ec:	81002c26 	beq	r16,r4,2008aaa0 <__adddf3+0x2c4>
2008a9f0:	8120703a 	and	r16,r16,r4
2008a9f4:	01000434 	movhi	r4,16
2008a9f8:	213fffc4 	addi	r4,r4,-1
2008a9fc:	2908703a 	and	r4,r5,r4
2008aa00:	003fad06 	br	2008a8b8 <__flash_rwdata_start+0xffff8abc>
2008aa04:	8089c83a 	sub	r4,r16,r2
2008aa08:	01006a0e 	bge	zero,r4,2008abb4 <__adddf3+0x3d8>
2008aa0c:	10003326 	beq	r2,zero,2008aadc <__adddf3+0x300>
2008aa10:	0081ffc4 	movi	r2,2047
2008aa14:	80bf9026 	beq	r16,r2,2008a858 <__flash_rwdata_start+0xffff8a5c>
2008aa18:	42002034 	orhi	r8,r8,128
2008aa1c:	00800e04 	movi	r2,56
2008aa20:	1100b116 	blt	r2,r4,2008ace8 <__adddf3+0x50c>
2008aa24:	008007c4 	movi	r2,31
2008aa28:	1100e216 	blt	r2,r4,2008adb4 <__adddf3+0x5d8>
2008aa2c:	00800804 	movi	r2,32
2008aa30:	1105c83a 	sub	r2,r2,r4
2008aa34:	4092983a 	sll	r9,r8,r2
2008aa38:	310ed83a 	srl	r7,r6,r4
2008aa3c:	3084983a 	sll	r2,r6,r2
2008aa40:	4110d83a 	srl	r8,r8,r4
2008aa44:	49ccb03a 	or	r6,r9,r7
2008aa48:	1004c03a 	cmpne	r2,r2,zero
2008aa4c:	308cb03a 	or	r6,r6,r2
2008aa50:	344d883a 	add	r6,r6,r17
2008aa54:	3463803a 	cmpltu	r17,r6,r17
2008aa58:	414b883a 	add	r5,r8,r5
2008aa5c:	2c4b883a 	add	r5,r5,r17
2008aa60:	3023883a 	mov	r17,r6
2008aa64:	2880202c 	andhi	r2,r5,128
2008aa68:	10002726 	beq	r2,zero,2008ab08 <__adddf3+0x32c>
2008aa6c:	84000044 	addi	r16,r16,1
2008aa70:	0081ffc4 	movi	r2,2047
2008aa74:	8080ae26 	beq	r16,r2,2008ad30 <__adddf3+0x554>
2008aa78:	00bfe034 	movhi	r2,65408
2008aa7c:	10bfffc4 	addi	r2,r2,-1
2008aa80:	288a703a 	and	r5,r5,r2
2008aa84:	880cd07a 	srli	r6,r17,1
2008aa88:	280897fa 	slli	r4,r5,31
2008aa8c:	88c0004c 	andi	r3,r17,1
2008aa90:	30e2b03a 	or	r17,r6,r3
2008aa94:	280ad07a 	srli	r5,r5,1
2008aa98:	8922b03a 	or	r17,r17,r4
2008aa9c:	003f6e06 	br	2008a858 <__flash_rwdata_start+0xffff8a5c>
2008aaa0:	1148b03a 	or	r4,r2,r5
2008aaa4:	20003c26 	beq	r4,zero,2008ab98 <__adddf3+0x3bc>
2008aaa8:	29000234 	orhi	r4,r5,8
2008aaac:	01400434 	movhi	r5,16
2008aab0:	297fffc4 	addi	r5,r5,-1
2008aab4:	2148703a 	and	r4,r4,r5
2008aab8:	003f7f06 	br	2008a8b8 <__flash_rwdata_start+0xffff8abc>
2008aabc:	18ffffc4 	addi	r3,r3,-1
2008aac0:	18004d1e 	bne	r3,zero,2008abf8 <__adddf3+0x41c>
2008aac4:	898dc83a 	sub	r6,r17,r6
2008aac8:	89a3803a 	cmpltu	r17,r17,r6
2008aacc:	2a0bc83a 	sub	r5,r5,r8
2008aad0:	2c4bc83a 	sub	r5,r5,r17
2008aad4:	3023883a 	mov	r17,r6
2008aad8:	003f9c06 	br	2008a94c <__flash_rwdata_start+0xffff8b50>
2008aadc:	4184b03a 	or	r2,r8,r6
2008aae0:	103f5d26 	beq	r2,zero,2008a858 <__flash_rwdata_start+0xffff8a5c>
2008aae4:	213fffc4 	addi	r4,r4,-1
2008aae8:	203fd926 	beq	r4,zero,2008aa50 <__flash_rwdata_start+0xffff8c54>
2008aaec:	0081ffc4 	movi	r2,2047
2008aaf0:	80bfca1e 	bne	r16,r2,2008aa1c <__flash_rwdata_start+0xffff8c20>
2008aaf4:	003f5806 	br	2008a858 <__flash_rwdata_start+0xffff8a5c>
2008aaf8:	10c8b03a 	or	r4,r2,r3
2008aafc:	20008b26 	beq	r4,zero,2008ad2c <__adddf3+0x550>
2008ab00:	100b883a 	mov	r5,r2
2008ab04:	1823883a 	mov	r17,r3
2008ab08:	888001cc 	andi	r2,r17,7
2008ab0c:	103f541e 	bne	r2,zero,2008a860 <__flash_rwdata_start+0xffff8a64>
2008ab10:	9007883a 	mov	r3,r18
2008ab14:	003fb006 	br	2008a9d8 <__flash_rwdata_start+0xffff8bdc>
2008ab18:	1800531e 	bne	r3,zero,2008ac68 <__adddf3+0x48c>
2008ab1c:	80800044 	addi	r2,r16,1
2008ab20:	1081ffcc 	andi	r2,r2,2047
2008ab24:	00c00044 	movi	r3,1
2008ab28:	1880990e 	bge	r3,r2,2008ad90 <__adddf3+0x5b4>
2008ab2c:	8985c83a 	sub	r2,r17,r6
2008ab30:	8887803a 	cmpltu	r3,r17,r2
2008ab34:	2a27c83a 	sub	r19,r5,r8
2008ab38:	98e7c83a 	sub	r19,r19,r3
2008ab3c:	98c0202c 	andhi	r3,r19,128
2008ab40:	18006226 	beq	r3,zero,2008accc <__adddf3+0x4f0>
2008ab44:	3463c83a 	sub	r17,r6,r17
2008ab48:	4151c83a 	sub	r8,r8,r5
2008ab4c:	344d803a 	cmpltu	r6,r6,r17
2008ab50:	41a7c83a 	sub	r19,r8,r6
2008ab54:	3825883a 	mov	r18,r7
2008ab58:	983f821e 	bne	r19,zero,2008a964 <__flash_rwdata_start+0xffff8b68>
2008ab5c:	8809883a 	mov	r4,r17
2008ab60:	008cd780 	call	2008cd78 <__clzsi2>
2008ab64:	10800804 	addi	r2,r2,32
2008ab68:	10fffe04 	addi	r3,r2,-8
2008ab6c:	010007c4 	movi	r4,31
2008ab70:	20ff810e 	bge	r4,r3,2008a978 <__flash_rwdata_start+0xffff8b7c>
2008ab74:	14fff604 	addi	r19,r2,-40
2008ab78:	8ce6983a 	sll	r19,r17,r19
2008ab7c:	0023883a 	mov	r17,zero
2008ab80:	1c3f840e 	bge	r3,r16,2008a994 <__flash_rwdata_start+0xffff8b98>
2008ab84:	017fe034 	movhi	r5,65408
2008ab88:	297fffc4 	addi	r5,r5,-1
2008ab8c:	80e1c83a 	sub	r16,r16,r3
2008ab90:	994a703a 	and	r5,r19,r5
2008ab94:	003f3006 	br	2008a858 <__flash_rwdata_start+0xffff8a5c>
2008ab98:	0009883a 	mov	r4,zero
2008ab9c:	0005883a 	mov	r2,zero
2008aba0:	003f4506 	br	2008a8b8 <__flash_rwdata_start+0xffff8abc>
2008aba4:	418cb03a 	or	r6,r8,r6
2008aba8:	300cc03a 	cmpne	r6,r6,zero
2008abac:	0007883a 	mov	r3,zero
2008abb0:	003f6106 	br	2008a938 <__flash_rwdata_start+0xffff8b3c>
2008abb4:	2000921e 	bne	r4,zero,2008ae00 <__adddf3+0x624>
2008abb8:	80800044 	addi	r2,r16,1
2008abbc:	11c1ffcc 	andi	r7,r2,2047
2008abc0:	01000044 	movi	r4,1
2008abc4:	21c0610e 	bge	r4,r7,2008ad4c <__adddf3+0x570>
2008abc8:	0101ffc4 	movi	r4,2047
2008abcc:	1100a326 	beq	r2,r4,2008ae5c <__adddf3+0x680>
2008abd0:	344d883a 	add	r6,r6,r17
2008abd4:	3463803a 	cmpltu	r17,r6,r17
2008abd8:	414b883a 	add	r5,r8,r5
2008abdc:	2c4b883a 	add	r5,r5,r17
2008abe0:	282297fa 	slli	r17,r5,31
2008abe4:	300cd07a 	srli	r6,r6,1
2008abe8:	280ad07a 	srli	r5,r5,1
2008abec:	1021883a 	mov	r16,r2
2008abf0:	89a2b03a 	or	r17,r17,r6
2008abf4:	003f1806 	br	2008a858 <__flash_rwdata_start+0xffff8a5c>
2008abf8:	0081ffc4 	movi	r2,2047
2008abfc:	80bf411e 	bne	r16,r2,2008a904 <__flash_rwdata_start+0xffff8b08>
2008ac00:	003f1506 	br	2008a858 <__flash_rwdata_start+0xffff8a5c>
2008ac04:	80bff844 	addi	r2,r16,-31
2008ac08:	00c00804 	movi	r3,32
2008ac0c:	9884d83a 	srl	r2,r19,r2
2008ac10:	28c04a26 	beq	r5,r3,2008ad3c <__adddf3+0x560>
2008ac14:	00c00fc4 	movi	r3,63
2008ac18:	1c21c83a 	sub	r16,r3,r16
2008ac1c:	9c26983a 	sll	r19,r19,r16
2008ac20:	9c62b03a 	or	r17,r19,r17
2008ac24:	8822c03a 	cmpne	r17,r17,zero
2008ac28:	88a2b03a 	or	r17,r17,r2
2008ac2c:	000b883a 	mov	r5,zero
2008ac30:	0021883a 	mov	r16,zero
2008ac34:	003fb406 	br	2008ab08 <__flash_rwdata_start+0xffff8d0c>
2008ac38:	18bff804 	addi	r2,r3,-32
2008ac3c:	01000804 	movi	r4,32
2008ac40:	4084d83a 	srl	r2,r8,r2
2008ac44:	19003f26 	beq	r3,r4,2008ad44 <__adddf3+0x568>
2008ac48:	01001004 	movi	r4,64
2008ac4c:	20c7c83a 	sub	r3,r4,r3
2008ac50:	40d0983a 	sll	r8,r8,r3
2008ac54:	418cb03a 	or	r6,r8,r6
2008ac58:	300cc03a 	cmpne	r6,r6,zero
2008ac5c:	308cb03a 	or	r6,r6,r2
2008ac60:	0007883a 	mov	r3,zero
2008ac64:	003f3406 	br	2008a938 <__flash_rwdata_start+0xffff8b3c>
2008ac68:	80002326 	beq	r16,zero,2008acf8 <__adddf3+0x51c>
2008ac6c:	0101ffc4 	movi	r4,2047
2008ac70:	11005e26 	beq	r2,r4,2008adec <__adddf3+0x610>
2008ac74:	00c7c83a 	sub	r3,zero,r3
2008ac78:	29402034 	orhi	r5,r5,128
2008ac7c:	01000e04 	movi	r4,56
2008ac80:	20c07216 	blt	r4,r3,2008ae4c <__adddf3+0x670>
2008ac84:	010007c4 	movi	r4,31
2008ac88:	20c0ce16 	blt	r4,r3,2008afc4 <__adddf3+0x7e8>
2008ac8c:	01000804 	movi	r4,32
2008ac90:	20c9c83a 	sub	r4,r4,r3
2008ac94:	2914983a 	sll	r10,r5,r4
2008ac98:	88d2d83a 	srl	r9,r17,r3
2008ac9c:	8908983a 	sll	r4,r17,r4
2008aca0:	28c6d83a 	srl	r3,r5,r3
2008aca4:	5262b03a 	or	r17,r10,r9
2008aca8:	2008c03a 	cmpne	r4,r4,zero
2008acac:	8922b03a 	or	r17,r17,r4
2008acb0:	3463c83a 	sub	r17,r6,r17
2008acb4:	40c7c83a 	sub	r3,r8,r3
2008acb8:	344d803a 	cmpltu	r6,r6,r17
2008acbc:	198bc83a 	sub	r5,r3,r6
2008acc0:	1021883a 	mov	r16,r2
2008acc4:	3825883a 	mov	r18,r7
2008acc8:	003f2006 	br	2008a94c <__flash_rwdata_start+0xffff8b50>
2008accc:	9886b03a 	or	r3,r19,r2
2008acd0:	1800141e 	bne	r3,zero,2008ad24 <__adddf3+0x548>
2008acd4:	0007883a 	mov	r3,zero
2008acd8:	000b883a 	mov	r5,zero
2008acdc:	0023883a 	mov	r17,zero
2008ace0:	0021883a 	mov	r16,zero
2008ace4:	003f3c06 	br	2008a9d8 <__flash_rwdata_start+0xffff8bdc>
2008ace8:	418cb03a 	or	r6,r8,r6
2008acec:	300cc03a 	cmpne	r6,r6,zero
2008acf0:	0011883a 	mov	r8,zero
2008acf4:	003f5606 	br	2008aa50 <__flash_rwdata_start+0xffff8c54>
2008acf8:	2c48b03a 	or	r4,r5,r17
2008acfc:	20003b26 	beq	r4,zero,2008adec <__adddf3+0x610>
2008ad00:	00c6303a 	nor	r3,zero,r3
2008ad04:	1800371e 	bne	r3,zero,2008ade4 <__adddf3+0x608>
2008ad08:	3463c83a 	sub	r17,r6,r17
2008ad0c:	414bc83a 	sub	r5,r8,r5
2008ad10:	344d803a 	cmpltu	r6,r6,r17
2008ad14:	298bc83a 	sub	r5,r5,r6
2008ad18:	1021883a 	mov	r16,r2
2008ad1c:	3825883a 	mov	r18,r7
2008ad20:	003f0a06 	br	2008a94c <__flash_rwdata_start+0xffff8b50>
2008ad24:	1023883a 	mov	r17,r2
2008ad28:	003f0d06 	br	2008a960 <__flash_rwdata_start+0xffff8b64>
2008ad2c:	0007883a 	mov	r3,zero
2008ad30:	000b883a 	mov	r5,zero
2008ad34:	0023883a 	mov	r17,zero
2008ad38:	003f2706 	br	2008a9d8 <__flash_rwdata_start+0xffff8bdc>
2008ad3c:	0027883a 	mov	r19,zero
2008ad40:	003fb706 	br	2008ac20 <__flash_rwdata_start+0xffff8e24>
2008ad44:	0011883a 	mov	r8,zero
2008ad48:	003fc206 	br	2008ac54 <__flash_rwdata_start+0xffff8e58>
2008ad4c:	2c44b03a 	or	r2,r5,r17
2008ad50:	8000871e 	bne	r16,zero,2008af70 <__adddf3+0x794>
2008ad54:	1000b126 	beq	r2,zero,2008b01c <__adddf3+0x840>
2008ad58:	4184b03a 	or	r2,r8,r6
2008ad5c:	103ebe26 	beq	r2,zero,2008a858 <__flash_rwdata_start+0xffff8a5c>
2008ad60:	3445883a 	add	r2,r6,r17
2008ad64:	1463803a 	cmpltu	r17,r2,r17
2008ad68:	414b883a 	add	r5,r8,r5
2008ad6c:	2c4b883a 	add	r5,r5,r17
2008ad70:	28c0202c 	andhi	r3,r5,128
2008ad74:	1023883a 	mov	r17,r2
2008ad78:	183f6326 	beq	r3,zero,2008ab08 <__flash_rwdata_start+0xffff8d0c>
2008ad7c:	00bfe034 	movhi	r2,65408
2008ad80:	10bfffc4 	addi	r2,r2,-1
2008ad84:	2021883a 	mov	r16,r4
2008ad88:	288a703a 	and	r5,r5,r2
2008ad8c:	003eb206 	br	2008a858 <__flash_rwdata_start+0xffff8a5c>
2008ad90:	2c44b03a 	or	r2,r5,r17
2008ad94:	8000251e 	bne	r16,zero,2008ae2c <__adddf3+0x650>
2008ad98:	10004b1e 	bne	r2,zero,2008aec8 <__adddf3+0x6ec>
2008ad9c:	4184b03a 	or	r2,r8,r6
2008ada0:	103fe226 	beq	r2,zero,2008ad2c <__flash_rwdata_start+0xffff8f30>
2008ada4:	400b883a 	mov	r5,r8
2008ada8:	3023883a 	mov	r17,r6
2008adac:	3825883a 	mov	r18,r7
2008adb0:	003ea906 	br	2008a858 <__flash_rwdata_start+0xffff8a5c>
2008adb4:	20bff804 	addi	r2,r4,-32
2008adb8:	01c00804 	movi	r7,32
2008adbc:	4084d83a 	srl	r2,r8,r2
2008adc0:	21c07e26 	beq	r4,r7,2008afbc <__adddf3+0x7e0>
2008adc4:	01c01004 	movi	r7,64
2008adc8:	3909c83a 	sub	r4,r7,r4
2008adcc:	4110983a 	sll	r8,r8,r4
2008add0:	418cb03a 	or	r6,r8,r6
2008add4:	300cc03a 	cmpne	r6,r6,zero
2008add8:	308cb03a 	or	r6,r6,r2
2008addc:	0011883a 	mov	r8,zero
2008ade0:	003f1b06 	br	2008aa50 <__flash_rwdata_start+0xffff8c54>
2008ade4:	0101ffc4 	movi	r4,2047
2008ade8:	113fa41e 	bne	r2,r4,2008ac7c <__flash_rwdata_start+0xffff8e80>
2008adec:	400b883a 	mov	r5,r8
2008adf0:	3023883a 	mov	r17,r6
2008adf4:	1021883a 	mov	r16,r2
2008adf8:	3825883a 	mov	r18,r7
2008adfc:	003e9606 	br	2008a858 <__flash_rwdata_start+0xffff8a5c>
2008ae00:	80001a1e 	bne	r16,zero,2008ae6c <__adddf3+0x690>
2008ae04:	2c4eb03a 	or	r7,r5,r17
2008ae08:	38005526 	beq	r7,zero,2008af60 <__adddf3+0x784>
2008ae0c:	0108303a 	nor	r4,zero,r4
2008ae10:	2000511e 	bne	r4,zero,2008af58 <__adddf3+0x77c>
2008ae14:	89a3883a 	add	r17,r17,r6
2008ae18:	414b883a 	add	r5,r8,r5
2008ae1c:	898d803a 	cmpltu	r6,r17,r6
2008ae20:	298b883a 	add	r5,r5,r6
2008ae24:	1021883a 	mov	r16,r2
2008ae28:	003f0e06 	br	2008aa64 <__flash_rwdata_start+0xffff8c68>
2008ae2c:	1000341e 	bne	r2,zero,2008af00 <__adddf3+0x724>
2008ae30:	4184b03a 	or	r2,r8,r6
2008ae34:	10006f26 	beq	r2,zero,2008aff4 <__adddf3+0x818>
2008ae38:	400b883a 	mov	r5,r8
2008ae3c:	3023883a 	mov	r17,r6
2008ae40:	3825883a 	mov	r18,r7
2008ae44:	0401ffc4 	movi	r16,2047
2008ae48:	003e8306 	br	2008a858 <__flash_rwdata_start+0xffff8a5c>
2008ae4c:	2c62b03a 	or	r17,r5,r17
2008ae50:	8822c03a 	cmpne	r17,r17,zero
2008ae54:	0007883a 	mov	r3,zero
2008ae58:	003f9506 	br	2008acb0 <__flash_rwdata_start+0xffff8eb4>
2008ae5c:	1021883a 	mov	r16,r2
2008ae60:	000b883a 	mov	r5,zero
2008ae64:	0023883a 	mov	r17,zero
2008ae68:	003edb06 	br	2008a9d8 <__flash_rwdata_start+0xffff8bdc>
2008ae6c:	01c1ffc4 	movi	r7,2047
2008ae70:	11c03b26 	beq	r2,r7,2008af60 <__adddf3+0x784>
2008ae74:	0109c83a 	sub	r4,zero,r4
2008ae78:	29402034 	orhi	r5,r5,128
2008ae7c:	01c00e04 	movi	r7,56
2008ae80:	39006216 	blt	r7,r4,2008b00c <__adddf3+0x830>
2008ae84:	01c007c4 	movi	r7,31
2008ae88:	39006b16 	blt	r7,r4,2008b038 <__adddf3+0x85c>
2008ae8c:	01c00804 	movi	r7,32
2008ae90:	390fc83a 	sub	r7,r7,r4
2008ae94:	29d4983a 	sll	r10,r5,r7
2008ae98:	8912d83a 	srl	r9,r17,r4
2008ae9c:	89ce983a 	sll	r7,r17,r7
2008aea0:	2908d83a 	srl	r4,r5,r4
2008aea4:	5262b03a 	or	r17,r10,r9
2008aea8:	380ac03a 	cmpne	r5,r7,zero
2008aeac:	8962b03a 	or	r17,r17,r5
2008aeb0:	89a3883a 	add	r17,r17,r6
2008aeb4:	2211883a 	add	r8,r4,r8
2008aeb8:	898d803a 	cmpltu	r6,r17,r6
2008aebc:	418b883a 	add	r5,r8,r6
2008aec0:	1021883a 	mov	r16,r2
2008aec4:	003ee706 	br	2008aa64 <__flash_rwdata_start+0xffff8c68>
2008aec8:	4184b03a 	or	r2,r8,r6
2008aecc:	103e6226 	beq	r2,zero,2008a858 <__flash_rwdata_start+0xffff8a5c>
2008aed0:	8987c83a 	sub	r3,r17,r6
2008aed4:	88c9803a 	cmpltu	r4,r17,r3
2008aed8:	2a05c83a 	sub	r2,r5,r8
2008aedc:	1105c83a 	sub	r2,r2,r4
2008aee0:	1100202c 	andhi	r4,r2,128
2008aee4:	203f0426 	beq	r4,zero,2008aaf8 <__flash_rwdata_start+0xffff8cfc>
2008aee8:	3463c83a 	sub	r17,r6,r17
2008aeec:	414bc83a 	sub	r5,r8,r5
2008aef0:	344d803a 	cmpltu	r6,r6,r17
2008aef4:	298bc83a 	sub	r5,r5,r6
2008aef8:	3825883a 	mov	r18,r7
2008aefc:	003e5606 	br	2008a858 <__flash_rwdata_start+0xffff8a5c>
2008af00:	4184b03a 	or	r2,r8,r6
2008af04:	10002b26 	beq	r2,zero,2008afb4 <__adddf3+0x7d8>
2008af08:	2804d0fa 	srli	r2,r5,3
2008af0c:	8822d0fa 	srli	r17,r17,3
2008af10:	280a977a 	slli	r5,r5,29
2008af14:	10c0022c 	andhi	r3,r2,8
2008af18:	2c62b03a 	or	r17,r5,r17
2008af1c:	18000826 	beq	r3,zero,2008af40 <__adddf3+0x764>
2008af20:	4008d0fa 	srli	r4,r8,3
2008af24:	20c0022c 	andhi	r3,r4,8
2008af28:	1800051e 	bne	r3,zero,2008af40 <__adddf3+0x764>
2008af2c:	300cd0fa 	srli	r6,r6,3
2008af30:	4010977a 	slli	r8,r8,29
2008af34:	2005883a 	mov	r2,r4
2008af38:	3825883a 	mov	r18,r7
2008af3c:	41a2b03a 	or	r17,r8,r6
2008af40:	880ad77a 	srli	r5,r17,29
2008af44:	100490fa 	slli	r2,r2,3
2008af48:	882290fa 	slli	r17,r17,3
2008af4c:	0401ffc4 	movi	r16,2047
2008af50:	288ab03a 	or	r5,r5,r2
2008af54:	003e4006 	br	2008a858 <__flash_rwdata_start+0xffff8a5c>
2008af58:	01c1ffc4 	movi	r7,2047
2008af5c:	11ffc71e 	bne	r2,r7,2008ae7c <__flash_rwdata_start+0xffff9080>
2008af60:	400b883a 	mov	r5,r8
2008af64:	3023883a 	mov	r17,r6
2008af68:	1021883a 	mov	r16,r2
2008af6c:	003e3a06 	br	2008a858 <__flash_rwdata_start+0xffff8a5c>
2008af70:	10002d26 	beq	r2,zero,2008b028 <__adddf3+0x84c>
2008af74:	4184b03a 	or	r2,r8,r6
2008af78:	10000e26 	beq	r2,zero,2008afb4 <__adddf3+0x7d8>
2008af7c:	2804d0fa 	srli	r2,r5,3
2008af80:	8822d0fa 	srli	r17,r17,3
2008af84:	280a977a 	slli	r5,r5,29
2008af88:	10c0022c 	andhi	r3,r2,8
2008af8c:	2c62b03a 	or	r17,r5,r17
2008af90:	183feb26 	beq	r3,zero,2008af40 <__flash_rwdata_start+0xffff9144>
2008af94:	4008d0fa 	srli	r4,r8,3
2008af98:	20c0022c 	andhi	r3,r4,8
2008af9c:	183fe81e 	bne	r3,zero,2008af40 <__flash_rwdata_start+0xffff9144>
2008afa0:	300cd0fa 	srli	r6,r6,3
2008afa4:	4010977a 	slli	r8,r8,29
2008afa8:	2005883a 	mov	r2,r4
2008afac:	41a2b03a 	or	r17,r8,r6
2008afb0:	003fe306 	br	2008af40 <__flash_rwdata_start+0xffff9144>
2008afb4:	0401ffc4 	movi	r16,2047
2008afb8:	003e2706 	br	2008a858 <__flash_rwdata_start+0xffff8a5c>
2008afbc:	0011883a 	mov	r8,zero
2008afc0:	003f8306 	br	2008add0 <__flash_rwdata_start+0xffff8fd4>
2008afc4:	193ff804 	addi	r4,r3,-32
2008afc8:	02400804 	movi	r9,32
2008afcc:	2908d83a 	srl	r4,r5,r4
2008afd0:	1a402526 	beq	r3,r9,2008b068 <__adddf3+0x88c>
2008afd4:	02401004 	movi	r9,64
2008afd8:	48c7c83a 	sub	r3,r9,r3
2008afdc:	28ca983a 	sll	r5,r5,r3
2008afe0:	2c62b03a 	or	r17,r5,r17
2008afe4:	8822c03a 	cmpne	r17,r17,zero
2008afe8:	8922b03a 	or	r17,r17,r4
2008afec:	0007883a 	mov	r3,zero
2008aff0:	003f2f06 	br	2008acb0 <__flash_rwdata_start+0xffff8eb4>
2008aff4:	01402034 	movhi	r5,128
2008aff8:	0007883a 	mov	r3,zero
2008affc:	297fffc4 	addi	r5,r5,-1
2008b000:	047ffe04 	movi	r17,-8
2008b004:	0401ffc4 	movi	r16,2047
2008b008:	003e7306 	br	2008a9d8 <__flash_rwdata_start+0xffff8bdc>
2008b00c:	2c62b03a 	or	r17,r5,r17
2008b010:	8822c03a 	cmpne	r17,r17,zero
2008b014:	0009883a 	mov	r4,zero
2008b018:	003fa506 	br	2008aeb0 <__flash_rwdata_start+0xffff90b4>
2008b01c:	400b883a 	mov	r5,r8
2008b020:	3023883a 	mov	r17,r6
2008b024:	003e0c06 	br	2008a858 <__flash_rwdata_start+0xffff8a5c>
2008b028:	400b883a 	mov	r5,r8
2008b02c:	3023883a 	mov	r17,r6
2008b030:	0401ffc4 	movi	r16,2047
2008b034:	003e0806 	br	2008a858 <__flash_rwdata_start+0xffff8a5c>
2008b038:	21fff804 	addi	r7,r4,-32
2008b03c:	02400804 	movi	r9,32
2008b040:	29ced83a 	srl	r7,r5,r7
2008b044:	22400a26 	beq	r4,r9,2008b070 <__adddf3+0x894>
2008b048:	02401004 	movi	r9,64
2008b04c:	4909c83a 	sub	r4,r9,r4
2008b050:	290a983a 	sll	r5,r5,r4
2008b054:	2c62b03a 	or	r17,r5,r17
2008b058:	8822c03a 	cmpne	r17,r17,zero
2008b05c:	89e2b03a 	or	r17,r17,r7
2008b060:	0009883a 	mov	r4,zero
2008b064:	003f9206 	br	2008aeb0 <__flash_rwdata_start+0xffff90b4>
2008b068:	000b883a 	mov	r5,zero
2008b06c:	003fdc06 	br	2008afe0 <__flash_rwdata_start+0xffff91e4>
2008b070:	000b883a 	mov	r5,zero
2008b074:	003ff706 	br	2008b054 <__flash_rwdata_start+0xffff9258>

2008b078 <__divdf3>:
2008b078:	defff204 	addi	sp,sp,-56
2008b07c:	dd000815 	stw	r20,32(sp)
2008b080:	2828d53a 	srli	r20,r5,20
2008b084:	dd800a15 	stw	r22,40(sp)
2008b088:	282cd7fa 	srli	r22,r5,31
2008b08c:	dc000415 	stw	r16,16(sp)
2008b090:	04000434 	movhi	r16,16
2008b094:	df000c15 	stw	fp,48(sp)
2008b098:	dcc00715 	stw	r19,28(sp)
2008b09c:	dc800615 	stw	r18,24(sp)
2008b0a0:	dc400515 	stw	r17,20(sp)
2008b0a4:	843fffc4 	addi	r16,r16,-1
2008b0a8:	dfc00d15 	stw	ra,52(sp)
2008b0ac:	ddc00b15 	stw	r23,44(sp)
2008b0b0:	dd400915 	stw	r21,36(sp)
2008b0b4:	a501ffcc 	andi	r20,r20,2047
2008b0b8:	2025883a 	mov	r18,r4
2008b0bc:	2027883a 	mov	r19,r4
2008b0c0:	2c22703a 	and	r17,r5,r16
2008b0c4:	b7003fcc 	andi	fp,r22,255
2008b0c8:	a0005e26 	beq	r20,zero,2008b244 <__divdf3+0x1cc>
2008b0cc:	0081ffc4 	movi	r2,2047
2008b0d0:	a0803526 	beq	r20,r2,2008b1a8 <__divdf3+0x130>
2008b0d4:	8c000434 	orhi	r16,r17,16
2008b0d8:	2004d77a 	srli	r2,r4,29
2008b0dc:	802090fa 	slli	r16,r16,3
2008b0e0:	202690fa 	slli	r19,r4,3
2008b0e4:	a53f0044 	addi	r20,r20,-1023
2008b0e8:	80a2b03a 	or	r17,r16,r2
2008b0ec:	0025883a 	mov	r18,zero
2008b0f0:	0011883a 	mov	r8,zero
2008b0f4:	380ad53a 	srli	r5,r7,20
2008b0f8:	382ed7fa 	srli	r23,r7,31
2008b0fc:	04000434 	movhi	r16,16
2008b100:	843fffc4 	addi	r16,r16,-1
2008b104:	2941ffcc 	andi	r5,r5,2047
2008b108:	302b883a 	mov	r21,r6
2008b10c:	3c20703a 	and	r16,r7,r16
2008b110:	ba403fcc 	andi	r9,r23,255
2008b114:	28006726 	beq	r5,zero,2008b2b4 <__divdf3+0x23c>
2008b118:	0081ffc4 	movi	r2,2047
2008b11c:	28805f26 	beq	r5,r2,2008b29c <__divdf3+0x224>
2008b120:	84000434 	orhi	r16,r16,16
2008b124:	3004d77a 	srli	r2,r6,29
2008b128:	802090fa 	slli	r16,r16,3
2008b12c:	302a90fa 	slli	r21,r6,3
2008b130:	297f0044 	addi	r5,r5,-1023
2008b134:	80a0b03a 	or	r16,r16,r2
2008b138:	000f883a 	mov	r7,zero
2008b13c:	3c86b03a 	or	r3,r7,r18
2008b140:	180690ba 	slli	r3,r3,2
2008b144:	00880274 	movhi	r2,8201
2008b148:	10ac5a04 	addi	r2,r2,-20120
2008b14c:	1887883a 	add	r3,r3,r2
2008b150:	18c00017 	ldw	r3,0(r3)
2008b154:	b5c8f03a 	xor	r4,r22,r23
2008b158:	200d883a 	mov	r6,r4
2008b15c:	24803fcc 	andi	r18,r4,255
2008b160:	a169c83a 	sub	r20,r20,r5
2008b164:	1800683a 	jmp	r3
2008b168:	2008b3b0 	cmpltui	zero,r4,8910
2008b16c:	2008b1e0 	cmpeqi	zero,r4,8903
2008b170:	2008b374 	orhi	zero,r4,8909
2008b174:	2008b1c4 	addi	zero,r4,8903
2008b178:	2008b374 	orhi	zero,r4,8909
2008b17c:	2008b348 	cmpgei	zero,r4,8909
2008b180:	2008b374 	orhi	zero,r4,8909
2008b184:	2008b1c4 	addi	zero,r4,8903
2008b188:	2008b1e0 	cmpeqi	zero,r4,8903
2008b18c:	2008b1e0 	cmpeqi	zero,r4,8903
2008b190:	2008b348 	cmpgei	zero,r4,8909
2008b194:	2008b1c4 	addi	zero,r4,8903
2008b198:	2008b1d4 	ori	zero,r4,8903
2008b19c:	2008b1d4 	ori	zero,r4,8903
2008b1a0:	2008b1d4 	ori	zero,r4,8903
2008b1a4:	2008b384 	addi	zero,r4,8910
2008b1a8:	8904b03a 	or	r2,r17,r4
2008b1ac:	1000631e 	bne	r2,zero,2008b33c <__divdf3+0x2c4>
2008b1b0:	04800204 	movi	r18,8
2008b1b4:	0023883a 	mov	r17,zero
2008b1b8:	0027883a 	mov	r19,zero
2008b1bc:	02000084 	movi	r8,2
2008b1c0:	003fcc06 	br	2008b0f4 <__flash_rwdata_start+0xffff92f8>
2008b1c4:	8023883a 	mov	r17,r16
2008b1c8:	a827883a 	mov	r19,r21
2008b1cc:	4839883a 	mov	fp,r9
2008b1d0:	3811883a 	mov	r8,r7
2008b1d4:	00800084 	movi	r2,2
2008b1d8:	40812a1e 	bne	r8,r2,2008b684 <__divdf3+0x60c>
2008b1dc:	e025883a 	mov	r18,fp
2008b1e0:	9180004c 	andi	r6,r18,1
2008b1e4:	0101ffc4 	movi	r4,2047
2008b1e8:	000b883a 	mov	r5,zero
2008b1ec:	0027883a 	mov	r19,zero
2008b1f0:	2008953a 	slli	r4,r4,20
2008b1f4:	30c03fcc 	andi	r3,r6,255
2008b1f8:	04000434 	movhi	r16,16
2008b1fc:	180697fa 	slli	r3,r3,31
2008b200:	843fffc4 	addi	r16,r16,-1
2008b204:	2c20703a 	and	r16,r5,r16
2008b208:	8120b03a 	or	r16,r16,r4
2008b20c:	80c6b03a 	or	r3,r16,r3
2008b210:	9805883a 	mov	r2,r19
2008b214:	dfc00d17 	ldw	ra,52(sp)
2008b218:	df000c17 	ldw	fp,48(sp)
2008b21c:	ddc00b17 	ldw	r23,44(sp)
2008b220:	dd800a17 	ldw	r22,40(sp)
2008b224:	dd400917 	ldw	r21,36(sp)
2008b228:	dd000817 	ldw	r20,32(sp)
2008b22c:	dcc00717 	ldw	r19,28(sp)
2008b230:	dc800617 	ldw	r18,24(sp)
2008b234:	dc400517 	ldw	r17,20(sp)
2008b238:	dc000417 	ldw	r16,16(sp)
2008b23c:	dec00e04 	addi	sp,sp,56
2008b240:	f800283a 	ret
2008b244:	8904b03a 	or	r2,r17,r4
2008b248:	10003726 	beq	r2,zero,2008b328 <__divdf3+0x2b0>
2008b24c:	88011c26 	beq	r17,zero,2008b6c0 <__divdf3+0x648>
2008b250:	8809883a 	mov	r4,r17
2008b254:	d9800315 	stw	r6,12(sp)
2008b258:	d9c00115 	stw	r7,4(sp)
2008b25c:	008cd780 	call	2008cd78 <__clzsi2>
2008b260:	d9800317 	ldw	r6,12(sp)
2008b264:	d9c00117 	ldw	r7,4(sp)
2008b268:	1007883a 	mov	r3,r2
2008b26c:	01000a04 	movi	r4,40
2008b270:	1cfffe04 	addi	r19,r3,-8
2008b274:	20c9c83a 	sub	r4,r4,r3
2008b278:	8cca983a 	sll	r5,r17,r19
2008b27c:	9108d83a 	srl	r4,r18,r4
2008b280:	94e6983a 	sll	r19,r18,r19
2008b284:	2162b03a 	or	r17,r4,r5
2008b288:	053f0344 	movi	r20,-1011
2008b28c:	a0e9c83a 	sub	r20,r20,r3
2008b290:	0025883a 	mov	r18,zero
2008b294:	0011883a 	mov	r8,zero
2008b298:	003f9606 	br	2008b0f4 <__flash_rwdata_start+0xffff92f8>
2008b29c:	8184b03a 	or	r2,r16,r6
2008b2a0:	10001f1e 	bne	r2,zero,2008b320 <__divdf3+0x2a8>
2008b2a4:	0021883a 	mov	r16,zero
2008b2a8:	002b883a 	mov	r21,zero
2008b2ac:	01c00084 	movi	r7,2
2008b2b0:	003fa206 	br	2008b13c <__flash_rwdata_start+0xffff9340>
2008b2b4:	8184b03a 	or	r2,r16,r6
2008b2b8:	10001526 	beq	r2,zero,2008b310 <__divdf3+0x298>
2008b2bc:	80010c26 	beq	r16,zero,2008b6f0 <__divdf3+0x678>
2008b2c0:	8009883a 	mov	r4,r16
2008b2c4:	d9800315 	stw	r6,12(sp)
2008b2c8:	da000215 	stw	r8,8(sp)
2008b2cc:	da400015 	stw	r9,0(sp)
2008b2d0:	008cd780 	call	2008cd78 <__clzsi2>
2008b2d4:	d9800317 	ldw	r6,12(sp)
2008b2d8:	da000217 	ldw	r8,8(sp)
2008b2dc:	da400017 	ldw	r9,0(sp)
2008b2e0:	1007883a 	mov	r3,r2
2008b2e4:	01000a04 	movi	r4,40
2008b2e8:	1d7ffe04 	addi	r21,r3,-8
2008b2ec:	20c9c83a 	sub	r4,r4,r3
2008b2f0:	8560983a 	sll	r16,r16,r21
2008b2f4:	3108d83a 	srl	r4,r6,r4
2008b2f8:	356a983a 	sll	r21,r6,r21
2008b2fc:	2420b03a 	or	r16,r4,r16
2008b300:	017f0344 	movi	r5,-1011
2008b304:	28cbc83a 	sub	r5,r5,r3
2008b308:	000f883a 	mov	r7,zero
2008b30c:	003f8b06 	br	2008b13c <__flash_rwdata_start+0xffff9340>
2008b310:	0021883a 	mov	r16,zero
2008b314:	002b883a 	mov	r21,zero
2008b318:	01c00044 	movi	r7,1
2008b31c:	003f8706 	br	2008b13c <__flash_rwdata_start+0xffff9340>
2008b320:	01c000c4 	movi	r7,3
2008b324:	003f8506 	br	2008b13c <__flash_rwdata_start+0xffff9340>
2008b328:	04800104 	movi	r18,4
2008b32c:	0023883a 	mov	r17,zero
2008b330:	0027883a 	mov	r19,zero
2008b334:	02000044 	movi	r8,1
2008b338:	003f6e06 	br	2008b0f4 <__flash_rwdata_start+0xffff92f8>
2008b33c:	04800304 	movi	r18,12
2008b340:	020000c4 	movi	r8,3
2008b344:	003f6b06 	br	2008b0f4 <__flash_rwdata_start+0xffff92f8>
2008b348:	01400434 	movhi	r5,16
2008b34c:	000d883a 	mov	r6,zero
2008b350:	297fffc4 	addi	r5,r5,-1
2008b354:	04ffffc4 	movi	r19,-1
2008b358:	0101ffc4 	movi	r4,2047
2008b35c:	003fa406 	br	2008b1f0 <__flash_rwdata_start+0xffff93f4>
2008b360:	043f0084 	movi	r16,-1022
2008b364:	8521c83a 	sub	r16,r16,r20
2008b368:	00800e04 	movi	r2,56
2008b36c:	1401200e 	bge	r2,r16,2008b7f0 <__divdf3+0x778>
2008b370:	9180004c 	andi	r6,r18,1
2008b374:	0009883a 	mov	r4,zero
2008b378:	000b883a 	mov	r5,zero
2008b37c:	0027883a 	mov	r19,zero
2008b380:	003f9b06 	br	2008b1f0 <__flash_rwdata_start+0xffff93f4>
2008b384:	8880022c 	andhi	r2,r17,8
2008b388:	1000c726 	beq	r2,zero,2008b6a8 <__divdf3+0x630>
2008b38c:	8080022c 	andhi	r2,r16,8
2008b390:	1000c51e 	bne	r2,zero,2008b6a8 <__divdf3+0x630>
2008b394:	00800434 	movhi	r2,16
2008b398:	81400234 	orhi	r5,r16,8
2008b39c:	10bfffc4 	addi	r2,r2,-1
2008b3a0:	b80d883a 	mov	r6,r23
2008b3a4:	288a703a 	and	r5,r5,r2
2008b3a8:	a827883a 	mov	r19,r21
2008b3ac:	003fea06 	br	2008b358 <__flash_rwdata_start+0xffff955c>
2008b3b0:	8440ea36 	bltu	r16,r17,2008b75c <__divdf3+0x6e4>
2008b3b4:	8c00e826 	beq	r17,r16,2008b758 <__divdf3+0x6e0>
2008b3b8:	a53fffc4 	addi	r20,r20,-1
2008b3bc:	882d883a 	mov	r22,r17
2008b3c0:	000d883a 	mov	r6,zero
2008b3c4:	a804d63a 	srli	r2,r21,24
2008b3c8:	8020923a 	slli	r16,r16,8
2008b3cc:	b009883a 	mov	r4,r22
2008b3d0:	d9800315 	stw	r6,12(sp)
2008b3d4:	1420b03a 	or	r16,r2,r16
2008b3d8:	802ed43a 	srli	r23,r16,16
2008b3dc:	873fffcc 	andi	fp,r16,65535
2008b3e0:	a82a923a 	slli	r21,r21,8
2008b3e4:	b80b883a 	mov	r5,r23
2008b3e8:	008a7cc0 	call	2008a7cc <__udivsi3>
2008b3ec:	b009883a 	mov	r4,r22
2008b3f0:	b80b883a 	mov	r5,r23
2008b3f4:	1023883a 	mov	r17,r2
2008b3f8:	008a7d40 	call	2008a7d4 <__umodsi3>
2008b3fc:	1004943a 	slli	r2,r2,16
2008b400:	9808d43a 	srli	r4,r19,16
2008b404:	8f2d383a 	mul	r22,r17,fp
2008b408:	d9800317 	ldw	r6,12(sp)
2008b40c:	1106b03a 	or	r3,r2,r4
2008b410:	1d80062e 	bgeu	r3,r22,2008b42c <__divdf3+0x3b4>
2008b414:	1c07883a 	add	r3,r3,r16
2008b418:	88bfffc4 	addi	r2,r17,-1
2008b41c:	1c00dc36 	bltu	r3,r16,2008b790 <__divdf3+0x718>
2008b420:	1d80db2e 	bgeu	r3,r22,2008b790 <__divdf3+0x718>
2008b424:	8c7fff84 	addi	r17,r17,-2
2008b428:	1c07883a 	add	r3,r3,r16
2008b42c:	1dadc83a 	sub	r22,r3,r22
2008b430:	b009883a 	mov	r4,r22
2008b434:	b80b883a 	mov	r5,r23
2008b438:	d9800315 	stw	r6,12(sp)
2008b43c:	008a7cc0 	call	2008a7cc <__udivsi3>
2008b440:	b009883a 	mov	r4,r22
2008b444:	b80b883a 	mov	r5,r23
2008b448:	d8800015 	stw	r2,0(sp)
2008b44c:	008a7d40 	call	2008a7d4 <__umodsi3>
2008b450:	da400017 	ldw	r9,0(sp)
2008b454:	1004943a 	slli	r2,r2,16
2008b458:	9cffffcc 	andi	r19,r19,65535
2008b45c:	4f07383a 	mul	r3,r9,fp
2008b460:	14c8b03a 	or	r4,r2,r19
2008b464:	d9800317 	ldw	r6,12(sp)
2008b468:	20c0062e 	bgeu	r4,r3,2008b484 <__divdf3+0x40c>
2008b46c:	2409883a 	add	r4,r4,r16
2008b470:	48bfffc4 	addi	r2,r9,-1
2008b474:	2400c436 	bltu	r4,r16,2008b788 <__divdf3+0x710>
2008b478:	20c0c32e 	bgeu	r4,r3,2008b788 <__divdf3+0x710>
2008b47c:	4a7fff84 	addi	r9,r9,-2
2008b480:	2409883a 	add	r4,r4,r16
2008b484:	8822943a 	slli	r17,r17,16
2008b488:	a80ed43a 	srli	r7,r21,16
2008b48c:	aa3fffcc 	andi	r8,r21,65535
2008b490:	4c62b03a 	or	r17,r9,r17
2008b494:	8816d43a 	srli	r11,r17,16
2008b498:	897fffcc 	andi	r5,r17,65535
2008b49c:	2a15383a 	mul	r10,r5,r8
2008b4a0:	5a19383a 	mul	r12,r11,r8
2008b4a4:	29cb383a 	mul	r5,r5,r7
2008b4a8:	5012d43a 	srli	r9,r10,16
2008b4ac:	20c5c83a 	sub	r2,r4,r3
2008b4b0:	614b883a 	add	r5,r12,r5
2008b4b4:	2a4b883a 	add	r5,r5,r9
2008b4b8:	59c7383a 	mul	r3,r11,r7
2008b4bc:	2b00022e 	bgeu	r5,r12,2008b4c8 <__divdf3+0x450>
2008b4c0:	01000074 	movhi	r4,1
2008b4c4:	1907883a 	add	r3,r3,r4
2008b4c8:	2808d43a 	srli	r4,r5,16
2008b4cc:	280a943a 	slli	r5,r5,16
2008b4d0:	54ffffcc 	andi	r19,r10,65535
2008b4d4:	1907883a 	add	r3,r3,r4
2008b4d8:	2ccb883a 	add	r5,r5,r19
2008b4dc:	10c09336 	bltu	r2,r3,2008b72c <__divdf3+0x6b4>
2008b4e0:	10c0ad26 	beq	r2,r3,2008b798 <__divdf3+0x720>
2008b4e4:	10c7c83a 	sub	r3,r2,r3
2008b4e8:	3167c83a 	sub	r19,r6,r5
2008b4ec:	34ed803a 	cmpltu	r22,r6,r19
2008b4f0:	1dadc83a 	sub	r22,r3,r22
2008b4f4:	b400b226 	beq	r22,r16,2008b7c0 <__divdf3+0x748>
2008b4f8:	b009883a 	mov	r4,r22
2008b4fc:	b80b883a 	mov	r5,r23
2008b500:	d9c00115 	stw	r7,4(sp)
2008b504:	da000215 	stw	r8,8(sp)
2008b508:	008a7cc0 	call	2008a7cc <__udivsi3>
2008b50c:	b009883a 	mov	r4,r22
2008b510:	b80b883a 	mov	r5,r23
2008b514:	d8800315 	stw	r2,12(sp)
2008b518:	008a7d40 	call	2008a7d4 <__umodsi3>
2008b51c:	d9800317 	ldw	r6,12(sp)
2008b520:	1004943a 	slli	r2,r2,16
2008b524:	9808d43a 	srli	r4,r19,16
2008b528:	372d383a 	mul	r22,r6,fp
2008b52c:	d9c00117 	ldw	r7,4(sp)
2008b530:	1106b03a 	or	r3,r2,r4
2008b534:	da000217 	ldw	r8,8(sp)
2008b538:	1d80062e 	bgeu	r3,r22,2008b554 <__divdf3+0x4dc>
2008b53c:	1c07883a 	add	r3,r3,r16
2008b540:	30bfffc4 	addi	r2,r6,-1
2008b544:	1c00a036 	bltu	r3,r16,2008b7c8 <__divdf3+0x750>
2008b548:	1d809f2e 	bgeu	r3,r22,2008b7c8 <__divdf3+0x750>
2008b54c:	31bfff84 	addi	r6,r6,-2
2008b550:	1c07883a 	add	r3,r3,r16
2008b554:	1dadc83a 	sub	r22,r3,r22
2008b558:	b009883a 	mov	r4,r22
2008b55c:	b80b883a 	mov	r5,r23
2008b560:	d9800315 	stw	r6,12(sp)
2008b564:	d9c00115 	stw	r7,4(sp)
2008b568:	da000215 	stw	r8,8(sp)
2008b56c:	008a7cc0 	call	2008a7cc <__udivsi3>
2008b570:	b009883a 	mov	r4,r22
2008b574:	b80b883a 	mov	r5,r23
2008b578:	d8800015 	stw	r2,0(sp)
2008b57c:	008a7d40 	call	2008a7d4 <__umodsi3>
2008b580:	da400017 	ldw	r9,0(sp)
2008b584:	1004943a 	slli	r2,r2,16
2008b588:	993fffcc 	andi	r4,r19,65535
2008b58c:	4f39383a 	mul	fp,r9,fp
2008b590:	1106b03a 	or	r3,r2,r4
2008b594:	d9800317 	ldw	r6,12(sp)
2008b598:	d9c00117 	ldw	r7,4(sp)
2008b59c:	da000217 	ldw	r8,8(sp)
2008b5a0:	1f00062e 	bgeu	r3,fp,2008b5bc <__divdf3+0x544>
2008b5a4:	1c07883a 	add	r3,r3,r16
2008b5a8:	48bfffc4 	addi	r2,r9,-1
2008b5ac:	1c008836 	bltu	r3,r16,2008b7d0 <__divdf3+0x758>
2008b5b0:	1f00872e 	bgeu	r3,fp,2008b7d0 <__divdf3+0x758>
2008b5b4:	4a7fff84 	addi	r9,r9,-2
2008b5b8:	1c07883a 	add	r3,r3,r16
2008b5bc:	3008943a 	slli	r4,r6,16
2008b5c0:	1f07c83a 	sub	r3,r3,fp
2008b5c4:	4926b03a 	or	r19,r9,r4
2008b5c8:	993fffcc 	andi	r4,r19,65535
2008b5cc:	980cd43a 	srli	r6,r19,16
2008b5d0:	220b383a 	mul	r5,r4,r8
2008b5d4:	21c5383a 	mul	r2,r4,r7
2008b5d8:	3211383a 	mul	r8,r6,r8
2008b5dc:	2808d43a 	srli	r4,r5,16
2008b5e0:	31cf383a 	mul	r7,r6,r7
2008b5e4:	4085883a 	add	r2,r8,r2
2008b5e8:	1105883a 	add	r2,r2,r4
2008b5ec:	1200022e 	bgeu	r2,r8,2008b5f8 <__divdf3+0x580>
2008b5f0:	01000074 	movhi	r4,1
2008b5f4:	390f883a 	add	r7,r7,r4
2008b5f8:	1008d43a 	srli	r4,r2,16
2008b5fc:	1004943a 	slli	r2,r2,16
2008b600:	297fffcc 	andi	r5,r5,65535
2008b604:	390f883a 	add	r7,r7,r4
2008b608:	1145883a 	add	r2,r2,r5
2008b60c:	19c06536 	bltu	r3,r7,2008b7a4 <__divdf3+0x72c>
2008b610:	19c09f26 	beq	r3,r7,2008b890 <__divdf3+0x818>
2008b614:	9cc00054 	ori	r19,r19,1
2008b618:	a100ffc4 	addi	r4,r20,1023
2008b61c:	013f500e 	bge	zero,r4,2008b360 <__flash_rwdata_start+0xffff9564>
2008b620:	988001cc 	andi	r2,r19,7
2008b624:	10000726 	beq	r2,zero,2008b644 <__divdf3+0x5cc>
2008b628:	98c003cc 	andi	r3,r19,15
2008b62c:	00800104 	movi	r2,4
2008b630:	18800426 	beq	r3,r2,2008b644 <__divdf3+0x5cc>
2008b634:	9885883a 	add	r2,r19,r2
2008b638:	14e1803a 	cmpltu	r16,r2,r19
2008b63c:	8c23883a 	add	r17,r17,r16
2008b640:	1027883a 	mov	r19,r2
2008b644:	8880402c 	andhi	r2,r17,256
2008b648:	10000426 	beq	r2,zero,2008b65c <__divdf3+0x5e4>
2008b64c:	00bfc034 	movhi	r2,65280
2008b650:	10bfffc4 	addi	r2,r2,-1
2008b654:	a1010004 	addi	r4,r20,1024
2008b658:	88a2703a 	and	r17,r17,r2
2008b65c:	0081ff84 	movi	r2,2046
2008b660:	113edf16 	blt	r2,r4,2008b1e0 <__flash_rwdata_start+0xffff93e4>
2008b664:	9826d0fa 	srli	r19,r19,3
2008b668:	8804977a 	slli	r2,r17,29
2008b66c:	8820927a 	slli	r16,r17,9
2008b670:	2101ffcc 	andi	r4,r4,2047
2008b674:	14e6b03a 	or	r19,r2,r19
2008b678:	800ad33a 	srli	r5,r16,12
2008b67c:	9180004c 	andi	r6,r18,1
2008b680:	003edb06 	br	2008b1f0 <__flash_rwdata_start+0xffff93f4>
2008b684:	008000c4 	movi	r2,3
2008b688:	4080a826 	beq	r8,r2,2008b92c <__divdf3+0x8b4>
2008b68c:	00800044 	movi	r2,1
2008b690:	4080551e 	bne	r8,r2,2008b7e8 <__divdf3+0x770>
2008b694:	e00d883a 	mov	r6,fp
2008b698:	0009883a 	mov	r4,zero
2008b69c:	000b883a 	mov	r5,zero
2008b6a0:	0027883a 	mov	r19,zero
2008b6a4:	003ed206 	br	2008b1f0 <__flash_rwdata_start+0xffff93f4>
2008b6a8:	00800434 	movhi	r2,16
2008b6ac:	89400234 	orhi	r5,r17,8
2008b6b0:	10bfffc4 	addi	r2,r2,-1
2008b6b4:	b00d883a 	mov	r6,r22
2008b6b8:	288a703a 	and	r5,r5,r2
2008b6bc:	003f2606 	br	2008b358 <__flash_rwdata_start+0xffff955c>
2008b6c0:	d9800315 	stw	r6,12(sp)
2008b6c4:	d9c00115 	stw	r7,4(sp)
2008b6c8:	008cd780 	call	2008cd78 <__clzsi2>
2008b6cc:	10c00804 	addi	r3,r2,32
2008b6d0:	010009c4 	movi	r4,39
2008b6d4:	d9800317 	ldw	r6,12(sp)
2008b6d8:	d9c00117 	ldw	r7,4(sp)
2008b6dc:	20fee30e 	bge	r4,r3,2008b26c <__flash_rwdata_start+0xffff9470>
2008b6e0:	117ffe04 	addi	r5,r2,-8
2008b6e4:	9162983a 	sll	r17,r18,r5
2008b6e8:	0027883a 	mov	r19,zero
2008b6ec:	003ee606 	br	2008b288 <__flash_rwdata_start+0xffff948c>
2008b6f0:	3009883a 	mov	r4,r6
2008b6f4:	d9800315 	stw	r6,12(sp)
2008b6f8:	da000215 	stw	r8,8(sp)
2008b6fc:	da400015 	stw	r9,0(sp)
2008b700:	008cd780 	call	2008cd78 <__clzsi2>
2008b704:	10c00804 	addi	r3,r2,32
2008b708:	010009c4 	movi	r4,39
2008b70c:	d9800317 	ldw	r6,12(sp)
2008b710:	da000217 	ldw	r8,8(sp)
2008b714:	da400017 	ldw	r9,0(sp)
2008b718:	20fef20e 	bge	r4,r3,2008b2e4 <__flash_rwdata_start+0xffff94e8>
2008b71c:	10bffe04 	addi	r2,r2,-8
2008b720:	a8a0983a 	sll	r16,r21,r2
2008b724:	002b883a 	mov	r21,zero
2008b728:	003ef506 	br	2008b300 <__flash_rwdata_start+0xffff9504>
2008b72c:	354d883a 	add	r6,r6,r21
2008b730:	3549803a 	cmpltu	r4,r6,r21
2008b734:	2409883a 	add	r4,r4,r16
2008b738:	2089883a 	add	r4,r4,r2
2008b73c:	88bfffc4 	addi	r2,r17,-1
2008b740:	81000c2e 	bgeu	r16,r4,2008b774 <__divdf3+0x6fc>
2008b744:	20c04436 	bltu	r4,r3,2008b858 <__divdf3+0x7e0>
2008b748:	19006f26 	beq	r3,r4,2008b908 <__divdf3+0x890>
2008b74c:	20c7c83a 	sub	r3,r4,r3
2008b750:	1023883a 	mov	r17,r2
2008b754:	003f6406 	br	2008b4e8 <__flash_rwdata_start+0xffff96ec>
2008b758:	9d7f1736 	bltu	r19,r21,2008b3b8 <__flash_rwdata_start+0xffff95bc>
2008b75c:	9806d07a 	srli	r3,r19,1
2008b760:	880497fa 	slli	r2,r17,31
2008b764:	980c97fa 	slli	r6,r19,31
2008b768:	882cd07a 	srli	r22,r17,1
2008b76c:	18a6b03a 	or	r19,r3,r2
2008b770:	003f1406 	br	2008b3c4 <__flash_rwdata_start+0xffff95c8>
2008b774:	243ff51e 	bne	r4,r16,2008b74c <__flash_rwdata_start+0xffff9950>
2008b778:	357ff22e 	bgeu	r6,r21,2008b744 <__flash_rwdata_start+0xffff9948>
2008b77c:	80c7c83a 	sub	r3,r16,r3
2008b780:	1023883a 	mov	r17,r2
2008b784:	003f5806 	br	2008b4e8 <__flash_rwdata_start+0xffff96ec>
2008b788:	1013883a 	mov	r9,r2
2008b78c:	003f3d06 	br	2008b484 <__flash_rwdata_start+0xffff9688>
2008b790:	1023883a 	mov	r17,r2
2008b794:	003f2506 	br	2008b42c <__flash_rwdata_start+0xffff9630>
2008b798:	317fe436 	bltu	r6,r5,2008b72c <__flash_rwdata_start+0xffff9930>
2008b79c:	0007883a 	mov	r3,zero
2008b7a0:	003f5106 	br	2008b4e8 <__flash_rwdata_start+0xffff96ec>
2008b7a4:	1c07883a 	add	r3,r3,r16
2008b7a8:	993fffc4 	addi	r4,r19,-1
2008b7ac:	1c000a2e 	bgeu	r3,r16,2008b7d8 <__divdf3+0x760>
2008b7b0:	2027883a 	mov	r19,r4
2008b7b4:	19ff971e 	bne	r3,r7,2008b614 <__flash_rwdata_start+0xffff9818>
2008b7b8:	a8bf961e 	bne	r21,r2,2008b614 <__flash_rwdata_start+0xffff9818>
2008b7bc:	003f9606 	br	2008b618 <__flash_rwdata_start+0xffff981c>
2008b7c0:	04ffffc4 	movi	r19,-1
2008b7c4:	003f9406 	br	2008b618 <__flash_rwdata_start+0xffff981c>
2008b7c8:	100d883a 	mov	r6,r2
2008b7cc:	003f6106 	br	2008b554 <__flash_rwdata_start+0xffff9758>
2008b7d0:	1013883a 	mov	r9,r2
2008b7d4:	003f7906 	br	2008b5bc <__flash_rwdata_start+0xffff97c0>
2008b7d8:	19c02636 	bltu	r3,r7,2008b874 <__divdf3+0x7fc>
2008b7dc:	38c04d26 	beq	r7,r3,2008b914 <__divdf3+0x89c>
2008b7e0:	2027883a 	mov	r19,r4
2008b7e4:	003f8b06 	br	2008b614 <__flash_rwdata_start+0xffff9818>
2008b7e8:	e025883a 	mov	r18,fp
2008b7ec:	003f8a06 	br	2008b618 <__flash_rwdata_start+0xffff981c>
2008b7f0:	008007c4 	movi	r2,31
2008b7f4:	14002a16 	blt	r2,r16,2008b8a0 <__divdf3+0x828>
2008b7f8:	a5010784 	addi	r20,r20,1054
2008b7fc:	8d04983a 	sll	r2,r17,r20
2008b800:	9c06d83a 	srl	r3,r19,r16
2008b804:	9d28983a 	sll	r20,r19,r20
2008b808:	8c20d83a 	srl	r16,r17,r16
2008b80c:	1886b03a 	or	r3,r3,r2
2008b810:	a004c03a 	cmpne	r2,r20,zero
2008b814:	1884b03a 	or	r2,r3,r2
2008b818:	10c001cc 	andi	r3,r2,7
2008b81c:	18000726 	beq	r3,zero,2008b83c <__divdf3+0x7c4>
2008b820:	110003cc 	andi	r4,r2,15
2008b824:	00c00104 	movi	r3,4
2008b828:	20c00426 	beq	r4,r3,2008b83c <__divdf3+0x7c4>
2008b82c:	10c00104 	addi	r3,r2,4
2008b830:	1885803a 	cmpltu	r2,r3,r2
2008b834:	80a1883a 	add	r16,r16,r2
2008b838:	1805883a 	mov	r2,r3
2008b83c:	80c0202c 	andhi	r3,r16,128
2008b840:	18002d26 	beq	r3,zero,2008b8f8 <__divdf3+0x880>
2008b844:	9180004c 	andi	r6,r18,1
2008b848:	01000044 	movi	r4,1
2008b84c:	000b883a 	mov	r5,zero
2008b850:	0027883a 	mov	r19,zero
2008b854:	003e6606 	br	2008b1f0 <__flash_rwdata_start+0xffff93f4>
2008b858:	354d883a 	add	r6,r6,r21
2008b85c:	356d803a 	cmpltu	r22,r6,r21
2008b860:	b42d883a 	add	r22,r22,r16
2008b864:	b12d883a 	add	r22,r22,r4
2008b868:	8c7fff84 	addi	r17,r17,-2
2008b86c:	b0c7c83a 	sub	r3,r22,r3
2008b870:	003f1d06 	br	2008b4e8 <__flash_rwdata_start+0xffff96ec>
2008b874:	ad4b883a 	add	r5,r21,r21
2008b878:	2d6b803a 	cmpltu	r21,r5,r21
2008b87c:	ac2b883a 	add	r21,r21,r16
2008b880:	1d47883a 	add	r3,r3,r21
2008b884:	993fff84 	addi	r4,r19,-2
2008b888:	282b883a 	mov	r21,r5
2008b88c:	003fc806 	br	2008b7b0 <__flash_rwdata_start+0xffff99b4>
2008b890:	103fc41e 	bne	r2,zero,2008b7a4 <__flash_rwdata_start+0xffff99a8>
2008b894:	002b883a 	mov	r21,zero
2008b898:	a8bf5e1e 	bne	r21,r2,2008b614 <__flash_rwdata_start+0xffff9818>
2008b89c:	003f5e06 	br	2008b618 <__flash_rwdata_start+0xffff981c>
2008b8a0:	00bef884 	movi	r2,-1054
2008b8a4:	1505c83a 	sub	r2,r2,r20
2008b8a8:	00c00804 	movi	r3,32
2008b8ac:	8884d83a 	srl	r2,r17,r2
2008b8b0:	80c01c26 	beq	r16,r3,2008b924 <__divdf3+0x8ac>
2008b8b4:	a0c10f84 	addi	r3,r20,1086
2008b8b8:	88c6983a 	sll	r3,r17,r3
2008b8bc:	1cc6b03a 	or	r3,r3,r19
2008b8c0:	1806c03a 	cmpne	r3,r3,zero
2008b8c4:	1884b03a 	or	r2,r3,r2
2008b8c8:	140001cc 	andi	r16,r2,7
2008b8cc:	8000061e 	bne	r16,zero,2008b8e8 <__divdf3+0x870>
2008b8d0:	000b883a 	mov	r5,zero
2008b8d4:	1004d0fa 	srli	r2,r2,3
2008b8d8:	9180004c 	andi	r6,r18,1
2008b8dc:	0009883a 	mov	r4,zero
2008b8e0:	1426b03a 	or	r19,r2,r16
2008b8e4:	003e4206 	br	2008b1f0 <__flash_rwdata_start+0xffff93f4>
2008b8e8:	110003cc 	andi	r4,r2,15
2008b8ec:	00c00104 	movi	r3,4
2008b8f0:	0021883a 	mov	r16,zero
2008b8f4:	20ffcd1e 	bne	r4,r3,2008b82c <__flash_rwdata_start+0xffff9a30>
2008b8f8:	800a927a 	slli	r5,r16,9
2008b8fc:	8020977a 	slli	r16,r16,29
2008b900:	280ad33a 	srli	r5,r5,12
2008b904:	003ff306 	br	2008b8d4 <__flash_rwdata_start+0xffff9ad8>
2008b908:	317fd336 	bltu	r6,r5,2008b858 <__flash_rwdata_start+0xffff9a5c>
2008b90c:	1023883a 	mov	r17,r2
2008b910:	003fa206 	br	2008b79c <__flash_rwdata_start+0xffff99a0>
2008b914:	a8bfd736 	bltu	r21,r2,2008b874 <__flash_rwdata_start+0xffff9a78>
2008b918:	2027883a 	mov	r19,r4
2008b91c:	a8bf3d1e 	bne	r21,r2,2008b614 <__flash_rwdata_start+0xffff9818>
2008b920:	003f3d06 	br	2008b618 <__flash_rwdata_start+0xffff981c>
2008b924:	0007883a 	mov	r3,zero
2008b928:	003fe406 	br	2008b8bc <__flash_rwdata_start+0xffff9ac0>
2008b92c:	00800434 	movhi	r2,16
2008b930:	89400234 	orhi	r5,r17,8
2008b934:	10bfffc4 	addi	r2,r2,-1
2008b938:	e00d883a 	mov	r6,fp
2008b93c:	288a703a 	and	r5,r5,r2
2008b940:	003e8506 	br	2008b358 <__flash_rwdata_start+0xffff955c>

2008b944 <__eqdf2>:
2008b944:	2804d53a 	srli	r2,r5,20
2008b948:	3806d53a 	srli	r3,r7,20
2008b94c:	02000434 	movhi	r8,16
2008b950:	423fffc4 	addi	r8,r8,-1
2008b954:	1081ffcc 	andi	r2,r2,2047
2008b958:	0241ffc4 	movi	r9,2047
2008b95c:	2a14703a 	and	r10,r5,r8
2008b960:	18c1ffcc 	andi	r3,r3,2047
2008b964:	3a10703a 	and	r8,r7,r8
2008b968:	280ad7fa 	srli	r5,r5,31
2008b96c:	380ed7fa 	srli	r7,r7,31
2008b970:	12400f26 	beq	r2,r9,2008b9b0 <__eqdf2+0x6c>
2008b974:	0241ffc4 	movi	r9,2047
2008b978:	1a400326 	beq	r3,r9,2008b988 <__eqdf2+0x44>
2008b97c:	10c00526 	beq	r2,r3,2008b994 <__eqdf2+0x50>
2008b980:	00800044 	movi	r2,1
2008b984:	f800283a 	ret
2008b988:	4192b03a 	or	r9,r8,r6
2008b98c:	483ffc1e 	bne	r9,zero,2008b980 <__flash_rwdata_start+0xffff9b84>
2008b990:	10fffb1e 	bne	r2,r3,2008b980 <__flash_rwdata_start+0xffff9b84>
2008b994:	523ffa1e 	bne	r10,r8,2008b980 <__flash_rwdata_start+0xffff9b84>
2008b998:	21bff91e 	bne	r4,r6,2008b980 <__flash_rwdata_start+0xffff9b84>
2008b99c:	29c00826 	beq	r5,r7,2008b9c0 <__eqdf2+0x7c>
2008b9a0:	103ff71e 	bne	r2,zero,2008b980 <__flash_rwdata_start+0xffff9b84>
2008b9a4:	5104b03a 	or	r2,r10,r4
2008b9a8:	1004c03a 	cmpne	r2,r2,zero
2008b9ac:	f800283a 	ret
2008b9b0:	5112b03a 	or	r9,r10,r4
2008b9b4:	483fef26 	beq	r9,zero,2008b974 <__flash_rwdata_start+0xffff9b78>
2008b9b8:	00800044 	movi	r2,1
2008b9bc:	f800283a 	ret
2008b9c0:	0005883a 	mov	r2,zero
2008b9c4:	f800283a 	ret

2008b9c8 <__gedf2>:
2008b9c8:	2804d53a 	srli	r2,r5,20
2008b9cc:	3806d53a 	srli	r3,r7,20
2008b9d0:	02000434 	movhi	r8,16
2008b9d4:	423fffc4 	addi	r8,r8,-1
2008b9d8:	0241ffc4 	movi	r9,2047
2008b9dc:	1081ffcc 	andi	r2,r2,2047
2008b9e0:	2a14703a 	and	r10,r5,r8
2008b9e4:	1a46703a 	and	r3,r3,r9
2008b9e8:	3a10703a 	and	r8,r7,r8
2008b9ec:	280ad7fa 	srli	r5,r5,31
2008b9f0:	380ed7fa 	srli	r7,r7,31
2008b9f4:	12400b26 	beq	r2,r9,2008ba24 <__gedf2+0x5c>
2008b9f8:	1a401626 	beq	r3,r9,2008ba54 <__gedf2+0x8c>
2008b9fc:	10000c1e 	bne	r2,zero,2008ba30 <__gedf2+0x68>
2008ba00:	5112b03a 	or	r9,r10,r4
2008ba04:	4813003a 	cmpeq	r9,r9,zero
2008ba08:	4817883a 	mov	r11,r9
2008ba0c:	18000c1e 	bne	r3,zero,2008ba40 <__gedf2+0x78>
2008ba10:	4198b03a 	or	r12,r8,r6
2008ba14:	60000a1e 	bne	r12,zero,2008ba40 <__gedf2+0x78>
2008ba18:	48001326 	beq	r9,zero,2008ba68 <__gedf2+0xa0>
2008ba1c:	0005883a 	mov	r2,zero
2008ba20:	f800283a 	ret
2008ba24:	5112b03a 	or	r9,r10,r4
2008ba28:	4800191e 	bne	r9,zero,2008ba90 <__gedf2+0xc8>
2008ba2c:	18800926 	beq	r3,r2,2008ba54 <__gedf2+0x8c>
2008ba30:	18000b1e 	bne	r3,zero,2008ba60 <__gedf2+0x98>
2008ba34:	4192b03a 	or	r9,r8,r6
2008ba38:	0017883a 	mov	r11,zero
2008ba3c:	48000a26 	beq	r9,zero,2008ba68 <__gedf2+0xa0>
2008ba40:	39c03fcc 	andi	r7,r7,255
2008ba44:	58000726 	beq	r11,zero,2008ba64 <__gedf2+0x9c>
2008ba48:	3800081e 	bne	r7,zero,2008ba6c <__gedf2+0xa4>
2008ba4c:	00bfffc4 	movi	r2,-1
2008ba50:	f800283a 	ret
2008ba54:	4192b03a 	or	r9,r8,r6
2008ba58:	48000d1e 	bne	r9,zero,2008ba90 <__gedf2+0xc8>
2008ba5c:	103fe826 	beq	r2,zero,2008ba00 <__flash_rwdata_start+0xffff9c04>
2008ba60:	39c03fcc 	andi	r7,r7,255
2008ba64:	29c00326 	beq	r5,r7,2008ba74 <__gedf2+0xac>
2008ba68:	283ff81e 	bne	r5,zero,2008ba4c <__flash_rwdata_start+0xffff9c50>
2008ba6c:	00800044 	movi	r2,1
2008ba70:	f800283a 	ret
2008ba74:	18bffc16 	blt	r3,r2,2008ba68 <__flash_rwdata_start+0xffff9c6c>
2008ba78:	10c00316 	blt	r2,r3,2008ba88 <__gedf2+0xc0>
2008ba7c:	42bffa36 	bltu	r8,r10,2008ba68 <__flash_rwdata_start+0xffff9c6c>
2008ba80:	52000526 	beq	r10,r8,2008ba98 <__gedf2+0xd0>
2008ba84:	523fe52e 	bgeu	r10,r8,2008ba1c <__flash_rwdata_start+0xffff9c20>
2008ba88:	283ff026 	beq	r5,zero,2008ba4c <__flash_rwdata_start+0xffff9c50>
2008ba8c:	003ff706 	br	2008ba6c <__flash_rwdata_start+0xffff9c70>
2008ba90:	00bfff84 	movi	r2,-2
2008ba94:	f800283a 	ret
2008ba98:	313ff336 	bltu	r6,r4,2008ba68 <__flash_rwdata_start+0xffff9c6c>
2008ba9c:	21bfdf2e 	bgeu	r4,r6,2008ba1c <__flash_rwdata_start+0xffff9c20>
2008baa0:	283fea26 	beq	r5,zero,2008ba4c <__flash_rwdata_start+0xffff9c50>
2008baa4:	003ff106 	br	2008ba6c <__flash_rwdata_start+0xffff9c70>

2008baa8 <__ledf2>:
2008baa8:	2804d53a 	srli	r2,r5,20
2008baac:	3810d53a 	srli	r8,r7,20
2008bab0:	00c00434 	movhi	r3,16
2008bab4:	18ffffc4 	addi	r3,r3,-1
2008bab8:	0241ffc4 	movi	r9,2047
2008babc:	1081ffcc 	andi	r2,r2,2047
2008bac0:	28d4703a 	and	r10,r5,r3
2008bac4:	4250703a 	and	r8,r8,r9
2008bac8:	38c6703a 	and	r3,r7,r3
2008bacc:	280ad7fa 	srli	r5,r5,31
2008bad0:	380ed7fa 	srli	r7,r7,31
2008bad4:	12400b26 	beq	r2,r9,2008bb04 <__ledf2+0x5c>
2008bad8:	42401926 	beq	r8,r9,2008bb40 <__ledf2+0x98>
2008badc:	10000c1e 	bne	r2,zero,2008bb10 <__ledf2+0x68>
2008bae0:	5112b03a 	or	r9,r10,r4
2008bae4:	4813003a 	cmpeq	r9,r9,zero
2008bae8:	4817883a 	mov	r11,r9
2008baec:	40000f26 	beq	r8,zero,2008bb2c <__ledf2+0x84>
2008baf0:	39c03fcc 	andi	r7,r7,255
2008baf4:	58001826 	beq	r11,zero,2008bb58 <__ledf2+0xb0>
2008baf8:	38000a1e 	bne	r7,zero,2008bb24 <__ledf2+0x7c>
2008bafc:	00bfffc4 	movi	r2,-1
2008bb00:	f800283a 	ret
2008bb04:	5112b03a 	or	r9,r10,r4
2008bb08:	48000f1e 	bne	r9,zero,2008bb48 <__ledf2+0xa0>
2008bb0c:	40800c26 	beq	r8,r2,2008bb40 <__ledf2+0x98>
2008bb10:	4000101e 	bne	r8,zero,2008bb54 <__ledf2+0xac>
2008bb14:	1992b03a 	or	r9,r3,r6
2008bb18:	0017883a 	mov	r11,zero
2008bb1c:	483ff41e 	bne	r9,zero,2008baf0 <__flash_rwdata_start+0xffff9cf4>
2008bb20:	283ff61e 	bne	r5,zero,2008bafc <__flash_rwdata_start+0xffff9d00>
2008bb24:	00800044 	movi	r2,1
2008bb28:	f800283a 	ret
2008bb2c:	1998b03a 	or	r12,r3,r6
2008bb30:	603fef1e 	bne	r12,zero,2008baf0 <__flash_rwdata_start+0xffff9cf4>
2008bb34:	483ffa26 	beq	r9,zero,2008bb20 <__flash_rwdata_start+0xffff9d24>
2008bb38:	0005883a 	mov	r2,zero
2008bb3c:	f800283a 	ret
2008bb40:	1992b03a 	or	r9,r3,r6
2008bb44:	48000226 	beq	r9,zero,2008bb50 <__ledf2+0xa8>
2008bb48:	00800084 	movi	r2,2
2008bb4c:	f800283a 	ret
2008bb50:	103fe326 	beq	r2,zero,2008bae0 <__flash_rwdata_start+0xffff9ce4>
2008bb54:	39c03fcc 	andi	r7,r7,255
2008bb58:	29fff11e 	bne	r5,r7,2008bb20 <__flash_rwdata_start+0xffff9d24>
2008bb5c:	40bff016 	blt	r8,r2,2008bb20 <__flash_rwdata_start+0xffff9d24>
2008bb60:	12000316 	blt	r2,r8,2008bb70 <__ledf2+0xc8>
2008bb64:	1abfee36 	bltu	r3,r10,2008bb20 <__flash_rwdata_start+0xffff9d24>
2008bb68:	50c00326 	beq	r10,r3,2008bb78 <__ledf2+0xd0>
2008bb6c:	50fff22e 	bgeu	r10,r3,2008bb38 <__flash_rwdata_start+0xffff9d3c>
2008bb70:	283fe226 	beq	r5,zero,2008bafc <__flash_rwdata_start+0xffff9d00>
2008bb74:	003feb06 	br	2008bb24 <__flash_rwdata_start+0xffff9d28>
2008bb78:	313fe936 	bltu	r6,r4,2008bb20 <__flash_rwdata_start+0xffff9d24>
2008bb7c:	21bfee2e 	bgeu	r4,r6,2008bb38 <__flash_rwdata_start+0xffff9d3c>
2008bb80:	283fde26 	beq	r5,zero,2008bafc <__flash_rwdata_start+0xffff9d00>
2008bb84:	003fe706 	br	2008bb24 <__flash_rwdata_start+0xffff9d28>

2008bb88 <__muldf3>:
2008bb88:	defff204 	addi	sp,sp,-56
2008bb8c:	2804d53a 	srli	r2,r5,20
2008bb90:	dd800a15 	stw	r22,40(sp)
2008bb94:	282cd7fa 	srli	r22,r5,31
2008bb98:	dc000415 	stw	r16,16(sp)
2008bb9c:	04000434 	movhi	r16,16
2008bba0:	df000c15 	stw	fp,48(sp)
2008bba4:	dd000815 	stw	r20,32(sp)
2008bba8:	dcc00715 	stw	r19,28(sp)
2008bbac:	dc800615 	stw	r18,24(sp)
2008bbb0:	dc400515 	stw	r17,20(sp)
2008bbb4:	843fffc4 	addi	r16,r16,-1
2008bbb8:	dfc00d15 	stw	ra,52(sp)
2008bbbc:	ddc00b15 	stw	r23,44(sp)
2008bbc0:	dd400915 	stw	r21,36(sp)
2008bbc4:	1501ffcc 	andi	r20,r2,2047
2008bbc8:	2023883a 	mov	r17,r4
2008bbcc:	2025883a 	mov	r18,r4
2008bbd0:	2c20703a 	and	r16,r5,r16
2008bbd4:	b027883a 	mov	r19,r22
2008bbd8:	b7003fcc 	andi	fp,r22,255
2008bbdc:	a0005926 	beq	r20,zero,2008bd44 <__muldf3+0x1bc>
2008bbe0:	0081ffc4 	movi	r2,2047
2008bbe4:	a0803426 	beq	r20,r2,2008bcb8 <__muldf3+0x130>
2008bbe8:	84000434 	orhi	r16,r16,16
2008bbec:	2004d77a 	srli	r2,r4,29
2008bbf0:	802090fa 	slli	r16,r16,3
2008bbf4:	202490fa 	slli	r18,r4,3
2008bbf8:	a53f0044 	addi	r20,r20,-1023
2008bbfc:	80a0b03a 	or	r16,r16,r2
2008bc00:	002b883a 	mov	r21,zero
2008bc04:	0015883a 	mov	r10,zero
2008bc08:	3812d53a 	srli	r9,r7,20
2008bc0c:	3806d7fa 	srli	r3,r7,31
2008bc10:	02000434 	movhi	r8,16
2008bc14:	423fffc4 	addi	r8,r8,-1
2008bc18:	4941ffcc 	andi	r5,r9,2047
2008bc1c:	302f883a 	mov	r23,r6
2008bc20:	3a22703a 	and	r17,r7,r8
2008bc24:	1ac03fcc 	andi	r11,r3,255
2008bc28:	28006226 	beq	r5,zero,2008bdb4 <__muldf3+0x22c>
2008bc2c:	0081ffc4 	movi	r2,2047
2008bc30:	28805a26 	beq	r5,r2,2008bd9c <__muldf3+0x214>
2008bc34:	8a000434 	orhi	r8,r17,16
2008bc38:	3004d77a 	srli	r2,r6,29
2008bc3c:	401090fa 	slli	r8,r8,3
2008bc40:	302e90fa 	slli	r23,r6,3
2008bc44:	297f0044 	addi	r5,r5,-1023
2008bc48:	40a2b03a 	or	r17,r8,r2
2008bc4c:	0013883a 	mov	r9,zero
2008bc50:	4d4cb03a 	or	r6,r9,r21
2008bc54:	300c90ba 	slli	r6,r6,2
2008bc58:	02080274 	movhi	r8,8201
2008bc5c:	422f1e04 	addi	r8,r8,-17288
2008bc60:	320d883a 	add	r6,r6,r8
2008bc64:	31800017 	ldw	r6,0(r6)
2008bc68:	a14b883a 	add	r5,r20,r5
2008bc6c:	1dacf03a 	xor	r22,r3,r22
2008bc70:	2b000044 	addi	r12,r5,1
2008bc74:	3000683a 	jmp	r6
2008bc78:	2008beb4 	orhi	zero,r4,8954
2008bc7c:	2008bea0 	cmpeqi	zero,r4,8954
2008bc80:	2008bea0 	cmpeqi	zero,r4,8954
2008bc84:	2008be8c 	andi	zero,r4,8954
2008bc88:	2008bcd4 	ori	zero,r4,8947
2008bc8c:	2008bcd4 	ori	zero,r4,8947
2008bc90:	2008be74 	orhi	zero,r4,8953
2008bc94:	2008be8c 	andi	zero,r4,8954
2008bc98:	2008bcd4 	ori	zero,r4,8947
2008bc9c:	2008be74 	orhi	zero,r4,8953
2008bca0:	2008bcd4 	ori	zero,r4,8947
2008bca4:	2008be8c 	andi	zero,r4,8954
2008bca8:	2008bcd8 	cmpnei	zero,r4,8947
2008bcac:	2008bcd8 	cmpnei	zero,r4,8947
2008bcb0:	2008bcd8 	cmpnei	zero,r4,8947
2008bcb4:	2008c0b0 	cmpltui	zero,r4,8962
2008bcb8:	8104b03a 	or	r2,r16,r4
2008bcbc:	10006a1e 	bne	r2,zero,2008be68 <__muldf3+0x2e0>
2008bcc0:	05400204 	movi	r21,8
2008bcc4:	0021883a 	mov	r16,zero
2008bcc8:	0025883a 	mov	r18,zero
2008bccc:	02800084 	movi	r10,2
2008bcd0:	003fcd06 	br	2008bc08 <__flash_rwdata_start+0xffff9e0c>
2008bcd4:	b039883a 	mov	fp,r22
2008bcd8:	00800084 	movi	r2,2
2008bcdc:	50804e1e 	bne	r10,r2,2008be18 <__muldf3+0x290>
2008bce0:	e4c0004c 	andi	r19,fp,1
2008bce4:	0101ffc4 	movi	r4,2047
2008bce8:	0021883a 	mov	r16,zero
2008bcec:	0025883a 	mov	r18,zero
2008bcf0:	2008953a 	slli	r4,r4,20
2008bcf4:	98c03fcc 	andi	r3,r19,255
2008bcf8:	01400434 	movhi	r5,16
2008bcfc:	297fffc4 	addi	r5,r5,-1
2008bd00:	180697fa 	slli	r3,r3,31
2008bd04:	8160703a 	and	r16,r16,r5
2008bd08:	8120b03a 	or	r16,r16,r4
2008bd0c:	80c6b03a 	or	r3,r16,r3
2008bd10:	9005883a 	mov	r2,r18
2008bd14:	dfc00d17 	ldw	ra,52(sp)
2008bd18:	df000c17 	ldw	fp,48(sp)
2008bd1c:	ddc00b17 	ldw	r23,44(sp)
2008bd20:	dd800a17 	ldw	r22,40(sp)
2008bd24:	dd400917 	ldw	r21,36(sp)
2008bd28:	dd000817 	ldw	r20,32(sp)
2008bd2c:	dcc00717 	ldw	r19,28(sp)
2008bd30:	dc800617 	ldw	r18,24(sp)
2008bd34:	dc400517 	ldw	r17,20(sp)
2008bd38:	dc000417 	ldw	r16,16(sp)
2008bd3c:	dec00e04 	addi	sp,sp,56
2008bd40:	f800283a 	ret
2008bd44:	8104b03a 	or	r2,r16,r4
2008bd48:	10004226 	beq	r2,zero,2008be54 <__muldf3+0x2cc>
2008bd4c:	8000f926 	beq	r16,zero,2008c134 <__muldf3+0x5ac>
2008bd50:	8009883a 	mov	r4,r16
2008bd54:	d9800315 	stw	r6,12(sp)
2008bd58:	d9c00015 	stw	r7,0(sp)
2008bd5c:	008cd780 	call	2008cd78 <__clzsi2>
2008bd60:	d9800317 	ldw	r6,12(sp)
2008bd64:	d9c00017 	ldw	r7,0(sp)
2008bd68:	1007883a 	mov	r3,r2
2008bd6c:	01000a04 	movi	r4,40
2008bd70:	18bffe04 	addi	r2,r3,-8
2008bd74:	20c9c83a 	sub	r4,r4,r3
2008bd78:	80a0983a 	sll	r16,r16,r2
2008bd7c:	8908d83a 	srl	r4,r17,r4
2008bd80:	88a4983a 	sll	r18,r17,r2
2008bd84:	2420b03a 	or	r16,r4,r16
2008bd88:	017f0344 	movi	r5,-1011
2008bd8c:	28e9c83a 	sub	r20,r5,r3
2008bd90:	002b883a 	mov	r21,zero
2008bd94:	0015883a 	mov	r10,zero
2008bd98:	003f9b06 	br	2008bc08 <__flash_rwdata_start+0xffff9e0c>
2008bd9c:	8984b03a 	or	r2,r17,r6
2008bda0:	10002a1e 	bne	r2,zero,2008be4c <__muldf3+0x2c4>
2008bda4:	0023883a 	mov	r17,zero
2008bda8:	002f883a 	mov	r23,zero
2008bdac:	02400084 	movi	r9,2
2008bdb0:	003fa706 	br	2008bc50 <__flash_rwdata_start+0xffff9e54>
2008bdb4:	8984b03a 	or	r2,r17,r6
2008bdb8:	10002026 	beq	r2,zero,2008be3c <__muldf3+0x2b4>
2008bdbc:	8800cc26 	beq	r17,zero,2008c0f0 <__muldf3+0x568>
2008bdc0:	8809883a 	mov	r4,r17
2008bdc4:	d8c00215 	stw	r3,8(sp)
2008bdc8:	d9800315 	stw	r6,12(sp)
2008bdcc:	da800015 	stw	r10,0(sp)
2008bdd0:	dac00115 	stw	r11,4(sp)
2008bdd4:	008cd780 	call	2008cd78 <__clzsi2>
2008bdd8:	d8c00217 	ldw	r3,8(sp)
2008bddc:	d9800317 	ldw	r6,12(sp)
2008bde0:	da800017 	ldw	r10,0(sp)
2008bde4:	dac00117 	ldw	r11,4(sp)
2008bde8:	1009883a 	mov	r4,r2
2008bdec:	01400a04 	movi	r5,40
2008bdf0:	25fffe04 	addi	r23,r4,-8
2008bdf4:	290bc83a 	sub	r5,r5,r4
2008bdf8:	8dd0983a 	sll	r8,r17,r23
2008bdfc:	314ad83a 	srl	r5,r6,r5
2008be00:	35ee983a 	sll	r23,r6,r23
2008be04:	2a22b03a 	or	r17,r5,r8
2008be08:	017f0344 	movi	r5,-1011
2008be0c:	290bc83a 	sub	r5,r5,r4
2008be10:	0013883a 	mov	r9,zero
2008be14:	003f8e06 	br	2008bc50 <__flash_rwdata_start+0xffff9e54>
2008be18:	008000c4 	movi	r2,3
2008be1c:	50811d26 	beq	r10,r2,2008c294 <__muldf3+0x70c>
2008be20:	00800044 	movi	r2,1
2008be24:	5080e01e 	bne	r10,r2,2008c1a8 <__muldf3+0x620>
2008be28:	e0a6703a 	and	r19,fp,r2
2008be2c:	0009883a 	mov	r4,zero
2008be30:	0021883a 	mov	r16,zero
2008be34:	0025883a 	mov	r18,zero
2008be38:	003fad06 	br	2008bcf0 <__flash_rwdata_start+0xffff9ef4>
2008be3c:	0023883a 	mov	r17,zero
2008be40:	002f883a 	mov	r23,zero
2008be44:	02400044 	movi	r9,1
2008be48:	003f8106 	br	2008bc50 <__flash_rwdata_start+0xffff9e54>
2008be4c:	024000c4 	movi	r9,3
2008be50:	003f7f06 	br	2008bc50 <__flash_rwdata_start+0xffff9e54>
2008be54:	05400104 	movi	r21,4
2008be58:	0021883a 	mov	r16,zero
2008be5c:	0025883a 	mov	r18,zero
2008be60:	02800044 	movi	r10,1
2008be64:	003f6806 	br	2008bc08 <__flash_rwdata_start+0xffff9e0c>
2008be68:	05400304 	movi	r21,12
2008be6c:	028000c4 	movi	r10,3
2008be70:	003f6506 	br	2008bc08 <__flash_rwdata_start+0xffff9e0c>
2008be74:	04000434 	movhi	r16,16
2008be78:	0027883a 	mov	r19,zero
2008be7c:	843fffc4 	addi	r16,r16,-1
2008be80:	04bfffc4 	movi	r18,-1
2008be84:	0101ffc4 	movi	r4,2047
2008be88:	003f9906 	br	2008bcf0 <__flash_rwdata_start+0xffff9ef4>
2008be8c:	8821883a 	mov	r16,r17
2008be90:	b825883a 	mov	r18,r23
2008be94:	5839883a 	mov	fp,r11
2008be98:	4815883a 	mov	r10,r9
2008be9c:	003f8e06 	br	2008bcd8 <__flash_rwdata_start+0xffff9edc>
2008bea0:	8821883a 	mov	r16,r17
2008bea4:	b825883a 	mov	r18,r23
2008bea8:	b039883a 	mov	fp,r22
2008beac:	4815883a 	mov	r10,r9
2008beb0:	003f8906 	br	2008bcd8 <__flash_rwdata_start+0xffff9edc>
2008beb4:	b80cd43a 	srli	r6,r23,16
2008beb8:	9006d43a 	srli	r3,r18,16
2008bebc:	90bfffcc 	andi	r2,r18,65535
2008bec0:	bdffffcc 	andi	r23,r23,65535
2008bec4:	b891383a 	mul	r8,r23,r2
2008bec8:	b8c9383a 	mul	r4,r23,r3
2008becc:	309b383a 	mul	r13,r6,r2
2008bed0:	400ed43a 	srli	r7,r8,16
2008bed4:	30df383a 	mul	r15,r6,r3
2008bed8:	235b883a 	add	r13,r4,r13
2008bedc:	69db883a 	add	r13,r13,r7
2008bee0:	6900022e 	bgeu	r13,r4,2008beec <__muldf3+0x364>
2008bee4:	01000074 	movhi	r4,1
2008bee8:	791f883a 	add	r15,r15,r4
2008beec:	8828d43a 	srli	r20,r17,16
2008bef0:	8c7fffcc 	andi	r17,r17,65535
2008bef4:	888f383a 	mul	r7,r17,r2
2008bef8:	88d3383a 	mul	r9,r17,r3
2008befc:	a0a5383a 	mul	r18,r20,r2
2008bf00:	3816d43a 	srli	r11,r7,16
2008bf04:	6814943a 	slli	r10,r13,16
2008bf08:	4ca5883a 	add	r18,r9,r18
2008bf0c:	423fffcc 	andi	r8,r8,65535
2008bf10:	92e5883a 	add	r18,r18,r11
2008bf14:	6808d43a 	srli	r4,r13,16
2008bf18:	5215883a 	add	r10,r10,r8
2008bf1c:	a0c7383a 	mul	r3,r20,r3
2008bf20:	9240022e 	bgeu	r18,r9,2008bf2c <__muldf3+0x3a4>
2008bf24:	00800074 	movhi	r2,1
2008bf28:	1887883a 	add	r3,r3,r2
2008bf2c:	802ad43a 	srli	r21,r16,16
2008bf30:	80bfffcc 	andi	r2,r16,65535
2008bf34:	b893383a 	mul	r9,r23,r2
2008bf38:	3091383a 	mul	r8,r6,r2
2008bf3c:	bd6f383a 	mul	r23,r23,r21
2008bf40:	9026943a 	slli	r19,r18,16
2008bf44:	481ad43a 	srli	r13,r9,16
2008bf48:	9024d43a 	srli	r18,r18,16
2008bf4c:	39ffffcc 	andi	r7,r7,65535
2008bf50:	ba11883a 	add	r8,r23,r8
2008bf54:	99e7883a 	add	r19,r19,r7
2008bf58:	4351883a 	add	r8,r8,r13
2008bf5c:	1c97883a 	add	r11,r3,r18
2008bf60:	354d383a 	mul	r6,r6,r21
2008bf64:	9925883a 	add	r18,r19,r4
2008bf68:	45c0022e 	bgeu	r8,r23,2008bf74 <__muldf3+0x3ec>
2008bf6c:	00c00074 	movhi	r3,1
2008bf70:	30cd883a 	add	r6,r6,r3
2008bf74:	8889383a 	mul	r4,r17,r2
2008bf78:	8d63383a 	mul	r17,r17,r21
2008bf7c:	a085383a 	mul	r2,r20,r2
2008bf80:	200ed43a 	srli	r7,r4,16
2008bf84:	401cd43a 	srli	r14,r8,16
2008bf88:	401a943a 	slli	r13,r8,16
2008bf8c:	8885883a 	add	r2,r17,r2
2008bf90:	4a3fffcc 	andi	r8,r9,65535
2008bf94:	11c5883a 	add	r2,r2,r7
2008bf98:	339d883a 	add	r14,r6,r14
2008bf9c:	6a11883a 	add	r8,r13,r8
2008bfa0:	a561383a 	mul	r16,r20,r21
2008bfa4:	1440022e 	bgeu	r2,r17,2008bfb0 <__muldf3+0x428>
2008bfa8:	00c00074 	movhi	r3,1
2008bfac:	80e1883a 	add	r16,r16,r3
2008bfb0:	1006943a 	slli	r3,r2,16
2008bfb4:	213fffcc 	andi	r4,r4,65535
2008bfb8:	93db883a 	add	r13,r18,r15
2008bfbc:	1909883a 	add	r4,r3,r4
2008bfc0:	22c7883a 	add	r3,r4,r11
2008bfc4:	6cd3803a 	cmpltu	r9,r13,r19
2008bfc8:	6a09883a 	add	r4,r13,r8
2008bfcc:	1a5b883a 	add	r13,r3,r9
2008bfd0:	2211803a 	cmpltu	r8,r4,r8
2008bfd4:	734d883a 	add	r6,r14,r13
2008bfd8:	100ed43a 	srli	r7,r2,16
2008bfdc:	6a53803a 	cmpltu	r9,r13,r9
2008bfe0:	3205883a 	add	r2,r6,r8
2008bfe4:	1ac7803a 	cmpltu	r3,r3,r11
2008bfe8:	1211803a 	cmpltu	r8,r2,r8
2008bfec:	48c6b03a 	or	r3,r9,r3
2008bff0:	338d803a 	cmpltu	r6,r6,r14
2008bff4:	19c7883a 	add	r3,r3,r7
2008bff8:	418cb03a 	or	r6,r8,r6
2008bffc:	1987883a 	add	r3,r3,r6
2008c000:	2024927a 	slli	r18,r4,9
2008c004:	1c07883a 	add	r3,r3,r16
2008c008:	1806927a 	slli	r3,r3,9
2008c00c:	1020d5fa 	srli	r16,r2,23
2008c010:	2008d5fa 	srli	r4,r4,23
2008c014:	9294b03a 	or	r10,r18,r10
2008c018:	1004927a 	slli	r2,r2,9
2008c01c:	5024c03a 	cmpne	r18,r10,zero
2008c020:	1c20b03a 	or	r16,r3,r16
2008c024:	9108b03a 	or	r4,r18,r4
2008c028:	80c0402c 	andhi	r3,r16,256
2008c02c:	20a4b03a 	or	r18,r4,r2
2008c030:	18000726 	beq	r3,zero,2008c050 <__muldf3+0x4c8>
2008c034:	9006d07a 	srli	r3,r18,1
2008c038:	800897fa 	slli	r4,r16,31
2008c03c:	9080004c 	andi	r2,r18,1
2008c040:	8020d07a 	srli	r16,r16,1
2008c044:	10c4b03a 	or	r2,r2,r3
2008c048:	1124b03a 	or	r18,r2,r4
2008c04c:	600b883a 	mov	r5,r12
2008c050:	2900ffc4 	addi	r4,r5,1023
2008c054:	01004b0e 	bge	zero,r4,2008c184 <__muldf3+0x5fc>
2008c058:	908001cc 	andi	r2,r18,7
2008c05c:	10000726 	beq	r2,zero,2008c07c <__muldf3+0x4f4>
2008c060:	90c003cc 	andi	r3,r18,15
2008c064:	00800104 	movi	r2,4
2008c068:	18800426 	beq	r3,r2,2008c07c <__muldf3+0x4f4>
2008c06c:	9087883a 	add	r3,r18,r2
2008c070:	1c85803a 	cmpltu	r2,r3,r18
2008c074:	80a1883a 	add	r16,r16,r2
2008c078:	1825883a 	mov	r18,r3
2008c07c:	8080402c 	andhi	r2,r16,256
2008c080:	10000426 	beq	r2,zero,2008c094 <__muldf3+0x50c>
2008c084:	00bfc034 	movhi	r2,65280
2008c088:	10bfffc4 	addi	r2,r2,-1
2008c08c:	29010004 	addi	r4,r5,1024
2008c090:	80a0703a 	and	r16,r16,r2
2008c094:	0081ff84 	movi	r2,2046
2008c098:	1100320e 	bge	r2,r4,2008c164 <__muldf3+0x5dc>
2008c09c:	b4c0004c 	andi	r19,r22,1
2008c0a0:	0101ffc4 	movi	r4,2047
2008c0a4:	0021883a 	mov	r16,zero
2008c0a8:	0025883a 	mov	r18,zero
2008c0ac:	003f1006 	br	2008bcf0 <__flash_rwdata_start+0xffff9ef4>
2008c0b0:	8080022c 	andhi	r2,r16,8
2008c0b4:	10000926 	beq	r2,zero,2008c0dc <__muldf3+0x554>
2008c0b8:	8880022c 	andhi	r2,r17,8
2008c0bc:	1000071e 	bne	r2,zero,2008c0dc <__muldf3+0x554>
2008c0c0:	00800434 	movhi	r2,16
2008c0c4:	8c000234 	orhi	r16,r17,8
2008c0c8:	10bfffc4 	addi	r2,r2,-1
2008c0cc:	1827883a 	mov	r19,r3
2008c0d0:	80a0703a 	and	r16,r16,r2
2008c0d4:	b825883a 	mov	r18,r23
2008c0d8:	003f6a06 	br	2008be84 <__flash_rwdata_start+0xffffa088>
2008c0dc:	00800434 	movhi	r2,16
2008c0e0:	84000234 	orhi	r16,r16,8
2008c0e4:	10bfffc4 	addi	r2,r2,-1
2008c0e8:	80a0703a 	and	r16,r16,r2
2008c0ec:	003f6506 	br	2008be84 <__flash_rwdata_start+0xffffa088>
2008c0f0:	3009883a 	mov	r4,r6
2008c0f4:	d8c00215 	stw	r3,8(sp)
2008c0f8:	d9800315 	stw	r6,12(sp)
2008c0fc:	da800015 	stw	r10,0(sp)
2008c100:	dac00115 	stw	r11,4(sp)
2008c104:	008cd780 	call	2008cd78 <__clzsi2>
2008c108:	11000804 	addi	r4,r2,32
2008c10c:	014009c4 	movi	r5,39
2008c110:	d8c00217 	ldw	r3,8(sp)
2008c114:	d9800317 	ldw	r6,12(sp)
2008c118:	da800017 	ldw	r10,0(sp)
2008c11c:	dac00117 	ldw	r11,4(sp)
2008c120:	293f320e 	bge	r5,r4,2008bdec <__flash_rwdata_start+0xffff9ff0>
2008c124:	10bffe04 	addi	r2,r2,-8
2008c128:	b8a2983a 	sll	r17,r23,r2
2008c12c:	002f883a 	mov	r23,zero
2008c130:	003f3506 	br	2008be08 <__flash_rwdata_start+0xffffa00c>
2008c134:	d9800315 	stw	r6,12(sp)
2008c138:	d9c00015 	stw	r7,0(sp)
2008c13c:	008cd780 	call	2008cd78 <__clzsi2>
2008c140:	10c00804 	addi	r3,r2,32
2008c144:	010009c4 	movi	r4,39
2008c148:	d9800317 	ldw	r6,12(sp)
2008c14c:	d9c00017 	ldw	r7,0(sp)
2008c150:	20ff060e 	bge	r4,r3,2008bd6c <__flash_rwdata_start+0xffff9f70>
2008c154:	10bffe04 	addi	r2,r2,-8
2008c158:	88a0983a 	sll	r16,r17,r2
2008c15c:	0025883a 	mov	r18,zero
2008c160:	003f0906 	br	2008bd88 <__flash_rwdata_start+0xffff9f8c>
2008c164:	9004d0fa 	srli	r2,r18,3
2008c168:	8024977a 	slli	r18,r16,29
2008c16c:	8020927a 	slli	r16,r16,9
2008c170:	2101ffcc 	andi	r4,r4,2047
2008c174:	90a4b03a 	or	r18,r18,r2
2008c178:	8020d33a 	srli	r16,r16,12
2008c17c:	b4c0004c 	andi	r19,r22,1
2008c180:	003edb06 	br	2008bcf0 <__flash_rwdata_start+0xffff9ef4>
2008c184:	00ff0084 	movi	r3,-1022
2008c188:	1947c83a 	sub	r3,r3,r5
2008c18c:	00800e04 	movi	r2,56
2008c190:	10c0080e 	bge	r2,r3,2008c1b4 <__muldf3+0x62c>
2008c194:	b4c0004c 	andi	r19,r22,1
2008c198:	0009883a 	mov	r4,zero
2008c19c:	0021883a 	mov	r16,zero
2008c1a0:	0025883a 	mov	r18,zero
2008c1a4:	003ed206 	br	2008bcf0 <__flash_rwdata_start+0xffff9ef4>
2008c1a8:	600b883a 	mov	r5,r12
2008c1ac:	e02d883a 	mov	r22,fp
2008c1b0:	003fa706 	br	2008c050 <__flash_rwdata_start+0xffffa254>
2008c1b4:	008007c4 	movi	r2,31
2008c1b8:	10c01816 	blt	r2,r3,2008c21c <__muldf3+0x694>
2008c1bc:	29410784 	addi	r5,r5,1054
2008c1c0:	8144983a 	sll	r2,r16,r5
2008c1c4:	90c8d83a 	srl	r4,r18,r3
2008c1c8:	914a983a 	sll	r5,r18,r5
2008c1cc:	80c6d83a 	srl	r3,r16,r3
2008c1d0:	2088b03a 	or	r4,r4,r2
2008c1d4:	2804c03a 	cmpne	r2,r5,zero
2008c1d8:	2084b03a 	or	r2,r4,r2
2008c1dc:	110001cc 	andi	r4,r2,7
2008c1e0:	20000726 	beq	r4,zero,2008c200 <__muldf3+0x678>
2008c1e4:	114003cc 	andi	r5,r2,15
2008c1e8:	01000104 	movi	r4,4
2008c1ec:	29000426 	beq	r5,r4,2008c200 <__muldf3+0x678>
2008c1f0:	11000104 	addi	r4,r2,4
2008c1f4:	2085803a 	cmpltu	r2,r4,r2
2008c1f8:	1887883a 	add	r3,r3,r2
2008c1fc:	2005883a 	mov	r2,r4
2008c200:	1900202c 	andhi	r4,r3,128
2008c204:	20001826 	beq	r4,zero,2008c268 <__muldf3+0x6e0>
2008c208:	b4c0004c 	andi	r19,r22,1
2008c20c:	01000044 	movi	r4,1
2008c210:	0021883a 	mov	r16,zero
2008c214:	0025883a 	mov	r18,zero
2008c218:	003eb506 	br	2008bcf0 <__flash_rwdata_start+0xffff9ef4>
2008c21c:	00bef884 	movi	r2,-1054
2008c220:	1145c83a 	sub	r2,r2,r5
2008c224:	8088d83a 	srl	r4,r16,r2
2008c228:	00800804 	movi	r2,32
2008c22c:	18801726 	beq	r3,r2,2008c28c <__muldf3+0x704>
2008c230:	28810f84 	addi	r2,r5,1086
2008c234:	8084983a 	sll	r2,r16,r2
2008c238:	1484b03a 	or	r2,r2,r18
2008c23c:	1004c03a 	cmpne	r2,r2,zero
2008c240:	1104b03a 	or	r2,r2,r4
2008c244:	10c001cc 	andi	r3,r2,7
2008c248:	18000b1e 	bne	r3,zero,2008c278 <__muldf3+0x6f0>
2008c24c:	0021883a 	mov	r16,zero
2008c250:	1004d0fa 	srli	r2,r2,3
2008c254:	b4c0004c 	andi	r19,r22,1
2008c258:	0009883a 	mov	r4,zero
2008c25c:	10e4b03a 	or	r18,r2,r3
2008c260:	003ea306 	br	2008bcf0 <__flash_rwdata_start+0xffff9ef4>
2008c264:	0007883a 	mov	r3,zero
2008c268:	1820927a 	slli	r16,r3,9
2008c26c:	1806977a 	slli	r3,r3,29
2008c270:	8020d33a 	srli	r16,r16,12
2008c274:	003ff606 	br	2008c250 <__flash_rwdata_start+0xffffa454>
2008c278:	110003cc 	andi	r4,r2,15
2008c27c:	00c00104 	movi	r3,4
2008c280:	20fff826 	beq	r4,r3,2008c264 <__flash_rwdata_start+0xffffa468>
2008c284:	0007883a 	mov	r3,zero
2008c288:	003fd906 	br	2008c1f0 <__flash_rwdata_start+0xffffa3f4>
2008c28c:	0005883a 	mov	r2,zero
2008c290:	003fe906 	br	2008c238 <__flash_rwdata_start+0xffffa43c>
2008c294:	00800434 	movhi	r2,16
2008c298:	84000234 	orhi	r16,r16,8
2008c29c:	10bfffc4 	addi	r2,r2,-1
2008c2a0:	e4c0004c 	andi	r19,fp,1
2008c2a4:	80a0703a 	and	r16,r16,r2
2008c2a8:	003ef606 	br	2008be84 <__flash_rwdata_start+0xffffa088>

2008c2ac <__subdf3>:
2008c2ac:	00c00434 	movhi	r3,16
2008c2b0:	18ffffc4 	addi	r3,r3,-1
2008c2b4:	defffb04 	addi	sp,sp,-20
2008c2b8:	28d2703a 	and	r9,r5,r3
2008c2bc:	3814d53a 	srli	r10,r7,20
2008c2c0:	38c6703a 	and	r3,r7,r3
2008c2c4:	3004d77a 	srli	r2,r6,29
2008c2c8:	dc800215 	stw	r18,8(sp)
2008c2cc:	dc000015 	stw	r16,0(sp)
2008c2d0:	2824d7fa 	srli	r18,r5,31
2008c2d4:	2820d53a 	srli	r16,r5,20
2008c2d8:	481290fa 	slli	r9,r9,3
2008c2dc:	200ad77a 	srli	r5,r4,29
2008c2e0:	180690fa 	slli	r3,r3,3
2008c2e4:	dc400115 	stw	r17,4(sp)
2008c2e8:	dfc00415 	stw	ra,16(sp)
2008c2ec:	202290fa 	slli	r17,r4,3
2008c2f0:	dcc00315 	stw	r19,12(sp)
2008c2f4:	5281ffcc 	andi	r10,r10,2047
2008c2f8:	0101ffc4 	movi	r4,2047
2008c2fc:	9011883a 	mov	r8,r18
2008c300:	8401ffcc 	andi	r16,r16,2047
2008c304:	94803fcc 	andi	r18,r18,255
2008c308:	494ab03a 	or	r5,r9,r5
2008c30c:	380ed7fa 	srli	r7,r7,31
2008c310:	1886b03a 	or	r3,r3,r2
2008c314:	300c90fa 	slli	r6,r6,3
2008c318:	51009026 	beq	r10,r4,2008c55c <__subdf3+0x2b0>
2008c31c:	39c0005c 	xori	r7,r7,1
2008c320:	8285c83a 	sub	r2,r16,r10
2008c324:	91c06f26 	beq	r18,r7,2008c4e4 <__subdf3+0x238>
2008c328:	0080b10e 	bge	zero,r2,2008c5f0 <__subdf3+0x344>
2008c32c:	50002a1e 	bne	r10,zero,2008c3d8 <__subdf3+0x12c>
2008c330:	1988b03a 	or	r4,r3,r6
2008c334:	2000941e 	bne	r4,zero,2008c588 <__subdf3+0x2dc>
2008c338:	888001cc 	andi	r2,r17,7
2008c33c:	10005b26 	beq	r2,zero,2008c4ac <__subdf3+0x200>
2008c340:	88c003cc 	andi	r3,r17,15
2008c344:	00800104 	movi	r2,4
2008c348:	18805826 	beq	r3,r2,2008c4ac <__subdf3+0x200>
2008c34c:	88c00104 	addi	r3,r17,4
2008c350:	1c63803a 	cmpltu	r17,r3,r17
2008c354:	2c4b883a 	add	r5,r5,r17
2008c358:	2880202c 	andhi	r2,r5,128
2008c35c:	9200004c 	andi	r8,r18,1
2008c360:	1823883a 	mov	r17,r3
2008c364:	10005426 	beq	r2,zero,2008c4b8 <__subdf3+0x20c>
2008c368:	84000044 	addi	r16,r16,1
2008c36c:	0081ffc4 	movi	r2,2047
2008c370:	8080bf26 	beq	r16,r2,2008c670 <__subdf3+0x3c4>
2008c374:	013fe034 	movhi	r4,65408
2008c378:	213fffc4 	addi	r4,r4,-1
2008c37c:	290a703a 	and	r5,r5,r4
2008c380:	2804977a 	slli	r2,r5,29
2008c384:	280a927a 	slli	r5,r5,9
2008c388:	8822d0fa 	srli	r17,r17,3
2008c38c:	8401ffcc 	andi	r16,r16,2047
2008c390:	2808d33a 	srli	r4,r5,12
2008c394:	1444b03a 	or	r2,r2,r17
2008c398:	8401ffcc 	andi	r16,r16,2047
2008c39c:	800a953a 	slli	r5,r16,20
2008c3a0:	40c03fcc 	andi	r3,r8,255
2008c3a4:	04000434 	movhi	r16,16
2008c3a8:	180697fa 	slli	r3,r3,31
2008c3ac:	843fffc4 	addi	r16,r16,-1
2008c3b0:	2420703a 	and	r16,r4,r16
2008c3b4:	8160b03a 	or	r16,r16,r5
2008c3b8:	80c6b03a 	or	r3,r16,r3
2008c3bc:	dfc00417 	ldw	ra,16(sp)
2008c3c0:	dcc00317 	ldw	r19,12(sp)
2008c3c4:	dc800217 	ldw	r18,8(sp)
2008c3c8:	dc400117 	ldw	r17,4(sp)
2008c3cc:	dc000017 	ldw	r16,0(sp)
2008c3d0:	dec00504 	addi	sp,sp,20
2008c3d4:	f800283a 	ret
2008c3d8:	0101ffc4 	movi	r4,2047
2008c3dc:	813fd626 	beq	r16,r4,2008c338 <__flash_rwdata_start+0xffffa53c>
2008c3e0:	18c02034 	orhi	r3,r3,128
2008c3e4:	01000e04 	movi	r4,56
2008c3e8:	2080a416 	blt	r4,r2,2008c67c <__subdf3+0x3d0>
2008c3ec:	010007c4 	movi	r4,31
2008c3f0:	2080c716 	blt	r4,r2,2008c710 <__subdf3+0x464>
2008c3f4:	01000804 	movi	r4,32
2008c3f8:	2089c83a 	sub	r4,r4,r2
2008c3fc:	1910983a 	sll	r8,r3,r4
2008c400:	308ed83a 	srl	r7,r6,r2
2008c404:	3108983a 	sll	r4,r6,r4
2008c408:	1884d83a 	srl	r2,r3,r2
2008c40c:	41ccb03a 	or	r6,r8,r7
2008c410:	2008c03a 	cmpne	r4,r4,zero
2008c414:	310cb03a 	or	r6,r6,r4
2008c418:	898dc83a 	sub	r6,r17,r6
2008c41c:	89a3803a 	cmpltu	r17,r17,r6
2008c420:	288bc83a 	sub	r5,r5,r2
2008c424:	2c4bc83a 	sub	r5,r5,r17
2008c428:	3023883a 	mov	r17,r6
2008c42c:	2880202c 	andhi	r2,r5,128
2008c430:	10006b26 	beq	r2,zero,2008c5e0 <__subdf3+0x334>
2008c434:	04c02034 	movhi	r19,128
2008c438:	9cffffc4 	addi	r19,r19,-1
2008c43c:	2ce6703a 	and	r19,r5,r19
2008c440:	98007c26 	beq	r19,zero,2008c634 <__subdf3+0x388>
2008c444:	9809883a 	mov	r4,r19
2008c448:	008cd780 	call	2008cd78 <__clzsi2>
2008c44c:	10fffe04 	addi	r3,r2,-8
2008c450:	010007c4 	movi	r4,31
2008c454:	20c07d16 	blt	r4,r3,2008c64c <__subdf3+0x3a0>
2008c458:	01400a04 	movi	r5,40
2008c45c:	2885c83a 	sub	r2,r5,r2
2008c460:	888ad83a 	srl	r5,r17,r2
2008c464:	98e6983a 	sll	r19,r19,r3
2008c468:	88e2983a 	sll	r17,r17,r3
2008c46c:	2ce6b03a 	or	r19,r5,r19
2008c470:	1c007a16 	blt	r3,r16,2008c65c <__subdf3+0x3b0>
2008c474:	1c21c83a 	sub	r16,r3,r16
2008c478:	81400044 	addi	r5,r16,1
2008c47c:	00c007c4 	movi	r3,31
2008c480:	19409616 	blt	r3,r5,2008c6dc <__subdf3+0x430>
2008c484:	1c21c83a 	sub	r16,r3,r16
2008c488:	8c08983a 	sll	r4,r17,r16
2008c48c:	8946d83a 	srl	r3,r17,r5
2008c490:	9c20983a 	sll	r16,r19,r16
2008c494:	2008c03a 	cmpne	r4,r4,zero
2008c498:	994ad83a 	srl	r5,r19,r5
2008c49c:	1c06b03a 	or	r3,r3,r16
2008c4a0:	1922b03a 	or	r17,r3,r4
2008c4a4:	0021883a 	mov	r16,zero
2008c4a8:	003fa306 	br	2008c338 <__flash_rwdata_start+0xffffa53c>
2008c4ac:	2880202c 	andhi	r2,r5,128
2008c4b0:	9200004c 	andi	r8,r18,1
2008c4b4:	103fac1e 	bne	r2,zero,2008c368 <__flash_rwdata_start+0xffffa56c>
2008c4b8:	2804977a 	slli	r2,r5,29
2008c4bc:	8822d0fa 	srli	r17,r17,3
2008c4c0:	00c1ffc4 	movi	r3,2047
2008c4c4:	280ad0fa 	srli	r5,r5,3
2008c4c8:	1444b03a 	or	r2,r2,r17
2008c4cc:	80c02726 	beq	r16,r3,2008c56c <__subdf3+0x2c0>
2008c4d0:	01000434 	movhi	r4,16
2008c4d4:	213fffc4 	addi	r4,r4,-1
2008c4d8:	80e0703a 	and	r16,r16,r3
2008c4dc:	2908703a 	and	r4,r5,r4
2008c4e0:	003fad06 	br	2008c398 <__flash_rwdata_start+0xffffa59c>
2008c4e4:	0080690e 	bge	zero,r2,2008c68c <__subdf3+0x3e0>
2008c4e8:	50002f26 	beq	r10,zero,2008c5a8 <__subdf3+0x2fc>
2008c4ec:	0101ffc4 	movi	r4,2047
2008c4f0:	813f9126 	beq	r16,r4,2008c338 <__flash_rwdata_start+0xffffa53c>
2008c4f4:	18c02034 	orhi	r3,r3,128
2008c4f8:	01000e04 	movi	r4,56
2008c4fc:	2080b00e 	bge	r4,r2,2008c7c0 <__subdf3+0x514>
2008c500:	198cb03a 	or	r6,r3,r6
2008c504:	300ec03a 	cmpne	r7,r6,zero
2008c508:	0005883a 	mov	r2,zero
2008c50c:	3c4f883a 	add	r7,r7,r17
2008c510:	3c63803a 	cmpltu	r17,r7,r17
2008c514:	114b883a 	add	r5,r2,r5
2008c518:	2c4b883a 	add	r5,r5,r17
2008c51c:	3823883a 	mov	r17,r7
2008c520:	2880202c 	andhi	r2,r5,128
2008c524:	10002e26 	beq	r2,zero,2008c5e0 <__subdf3+0x334>
2008c528:	84000044 	addi	r16,r16,1
2008c52c:	0081ffc4 	movi	r2,2047
2008c530:	8080de26 	beq	r16,r2,2008c8ac <__subdf3+0x600>
2008c534:	00bfe034 	movhi	r2,65408
2008c538:	10bfffc4 	addi	r2,r2,-1
2008c53c:	288a703a 	and	r5,r5,r2
2008c540:	880cd07a 	srli	r6,r17,1
2008c544:	280897fa 	slli	r4,r5,31
2008c548:	88c0004c 	andi	r3,r17,1
2008c54c:	30e2b03a 	or	r17,r6,r3
2008c550:	280ad07a 	srli	r5,r5,1
2008c554:	8922b03a 	or	r17,r17,r4
2008c558:	003f7706 	br	2008c338 <__flash_rwdata_start+0xffffa53c>
2008c55c:	1984b03a 	or	r2,r3,r6
2008c560:	103f6e26 	beq	r2,zero,2008c31c <__flash_rwdata_start+0xffffa520>
2008c564:	39c03fcc 	andi	r7,r7,255
2008c568:	003f6d06 	br	2008c320 <__flash_rwdata_start+0xffffa524>
2008c56c:	1146b03a 	or	r3,r2,r5
2008c570:	18003f26 	beq	r3,zero,2008c670 <__subdf3+0x3c4>
2008c574:	00c00434 	movhi	r3,16
2008c578:	29000234 	orhi	r4,r5,8
2008c57c:	18ffffc4 	addi	r3,r3,-1
2008c580:	20c8703a 	and	r4,r4,r3
2008c584:	003f8406 	br	2008c398 <__flash_rwdata_start+0xffffa59c>
2008c588:	10bfffc4 	addi	r2,r2,-1
2008c58c:	1000501e 	bne	r2,zero,2008c6d0 <__subdf3+0x424>
2008c590:	898fc83a 	sub	r7,r17,r6
2008c594:	89e3803a 	cmpltu	r17,r17,r7
2008c598:	28cbc83a 	sub	r5,r5,r3
2008c59c:	2c4bc83a 	sub	r5,r5,r17
2008c5a0:	3823883a 	mov	r17,r7
2008c5a4:	003fa106 	br	2008c42c <__flash_rwdata_start+0xffffa630>
2008c5a8:	1988b03a 	or	r4,r3,r6
2008c5ac:	203f6226 	beq	r4,zero,2008c338 <__flash_rwdata_start+0xffffa53c>
2008c5b0:	10bfffc4 	addi	r2,r2,-1
2008c5b4:	10009b1e 	bne	r2,zero,2008c824 <__subdf3+0x578>
2008c5b8:	344d883a 	add	r6,r6,r17
2008c5bc:	3463803a 	cmpltu	r17,r6,r17
2008c5c0:	194b883a 	add	r5,r3,r5
2008c5c4:	2c4b883a 	add	r5,r5,r17
2008c5c8:	3023883a 	mov	r17,r6
2008c5cc:	003fd406 	br	2008c520 <__flash_rwdata_start+0xffffa724>
2008c5d0:	1106b03a 	or	r3,r2,r4
2008c5d4:	1800b426 	beq	r3,zero,2008c8a8 <__subdf3+0x5fc>
2008c5d8:	100b883a 	mov	r5,r2
2008c5dc:	2023883a 	mov	r17,r4
2008c5e0:	888001cc 	andi	r2,r17,7
2008c5e4:	103f561e 	bne	r2,zero,2008c340 <__flash_rwdata_start+0xffffa544>
2008c5e8:	9200004c 	andi	r8,r18,1
2008c5ec:	003fb206 	br	2008c4b8 <__flash_rwdata_start+0xffffa6bc>
2008c5f0:	1000531e 	bne	r2,zero,2008c740 <__subdf3+0x494>
2008c5f4:	80800044 	addi	r2,r16,1
2008c5f8:	1081ffcc 	andi	r2,r2,2047
2008c5fc:	01000044 	movi	r4,1
2008c600:	2080a00e 	bge	r4,r2,2008c884 <__subdf3+0x5d8>
2008c604:	8985c83a 	sub	r2,r17,r6
2008c608:	8889803a 	cmpltu	r4,r17,r2
2008c60c:	28e7c83a 	sub	r19,r5,r3
2008c610:	9927c83a 	sub	r19,r19,r4
2008c614:	9900202c 	andhi	r4,r19,128
2008c618:	20006226 	beq	r4,zero,2008c7a4 <__subdf3+0x4f8>
2008c61c:	3463c83a 	sub	r17,r6,r17
2008c620:	194bc83a 	sub	r5,r3,r5
2008c624:	344d803a 	cmpltu	r6,r6,r17
2008c628:	29a7c83a 	sub	r19,r5,r6
2008c62c:	3825883a 	mov	r18,r7
2008c630:	983f841e 	bne	r19,zero,2008c444 <__flash_rwdata_start+0xffffa648>
2008c634:	8809883a 	mov	r4,r17
2008c638:	008cd780 	call	2008cd78 <__clzsi2>
2008c63c:	10800804 	addi	r2,r2,32
2008c640:	10fffe04 	addi	r3,r2,-8
2008c644:	010007c4 	movi	r4,31
2008c648:	20ff830e 	bge	r4,r3,2008c458 <__flash_rwdata_start+0xffffa65c>
2008c64c:	14fff604 	addi	r19,r2,-40
2008c650:	8ce6983a 	sll	r19,r17,r19
2008c654:	0023883a 	mov	r17,zero
2008c658:	1c3f860e 	bge	r3,r16,2008c474 <__flash_rwdata_start+0xffffa678>
2008c65c:	017fe034 	movhi	r5,65408
2008c660:	297fffc4 	addi	r5,r5,-1
2008c664:	80e1c83a 	sub	r16,r16,r3
2008c668:	994a703a 	and	r5,r19,r5
2008c66c:	003f3206 	br	2008c338 <__flash_rwdata_start+0xffffa53c>
2008c670:	0009883a 	mov	r4,zero
2008c674:	0005883a 	mov	r2,zero
2008c678:	003f4706 	br	2008c398 <__flash_rwdata_start+0xffffa59c>
2008c67c:	198cb03a 	or	r6,r3,r6
2008c680:	300cc03a 	cmpne	r6,r6,zero
2008c684:	0005883a 	mov	r2,zero
2008c688:	003f6306 	br	2008c418 <__flash_rwdata_start+0xffffa61c>
2008c68c:	10009d1e 	bne	r2,zero,2008c904 <__subdf3+0x658>
2008c690:	81c00044 	addi	r7,r16,1
2008c694:	3881ffcc 	andi	r2,r7,2047
2008c698:	02400044 	movi	r9,1
2008c69c:	4880680e 	bge	r9,r2,2008c840 <__subdf3+0x594>
2008c6a0:	0081ffc4 	movi	r2,2047
2008c6a4:	3880ae26 	beq	r7,r2,2008c960 <__subdf3+0x6b4>
2008c6a8:	344d883a 	add	r6,r6,r17
2008c6ac:	3463803a 	cmpltu	r17,r6,r17
2008c6b0:	194b883a 	add	r5,r3,r5
2008c6b4:	2c4b883a 	add	r5,r5,r17
2008c6b8:	282297fa 	slli	r17,r5,31
2008c6bc:	300cd07a 	srli	r6,r6,1
2008c6c0:	280ad07a 	srli	r5,r5,1
2008c6c4:	3821883a 	mov	r16,r7
2008c6c8:	89a2b03a 	or	r17,r17,r6
2008c6cc:	003f1a06 	br	2008c338 <__flash_rwdata_start+0xffffa53c>
2008c6d0:	0101ffc4 	movi	r4,2047
2008c6d4:	813f431e 	bne	r16,r4,2008c3e4 <__flash_rwdata_start+0xffffa5e8>
2008c6d8:	003f1706 	br	2008c338 <__flash_rwdata_start+0xffffa53c>
2008c6dc:	80bff844 	addi	r2,r16,-31
2008c6e0:	00c00804 	movi	r3,32
2008c6e4:	9884d83a 	srl	r2,r19,r2
2008c6e8:	28c05126 	beq	r5,r3,2008c830 <__subdf3+0x584>
2008c6ec:	00c00fc4 	movi	r3,63
2008c6f0:	1c21c83a 	sub	r16,r3,r16
2008c6f4:	9c26983a 	sll	r19,r19,r16
2008c6f8:	9c62b03a 	or	r17,r19,r17
2008c6fc:	8822c03a 	cmpne	r17,r17,zero
2008c700:	88a2b03a 	or	r17,r17,r2
2008c704:	000b883a 	mov	r5,zero
2008c708:	0021883a 	mov	r16,zero
2008c70c:	003fb406 	br	2008c5e0 <__flash_rwdata_start+0xffffa7e4>
2008c710:	113ff804 	addi	r4,r2,-32
2008c714:	01c00804 	movi	r7,32
2008c718:	1908d83a 	srl	r4,r3,r4
2008c71c:	11c04626 	beq	r2,r7,2008c838 <__subdf3+0x58c>
2008c720:	01c01004 	movi	r7,64
2008c724:	3885c83a 	sub	r2,r7,r2
2008c728:	1884983a 	sll	r2,r3,r2
2008c72c:	118cb03a 	or	r6,r2,r6
2008c730:	300cc03a 	cmpne	r6,r6,zero
2008c734:	310cb03a 	or	r6,r6,r4
2008c738:	0005883a 	mov	r2,zero
2008c73c:	003f3606 	br	2008c418 <__flash_rwdata_start+0xffffa61c>
2008c740:	80002b26 	beq	r16,zero,2008c7f0 <__subdf3+0x544>
2008c744:	0101ffc4 	movi	r4,2047
2008c748:	51006926 	beq	r10,r4,2008c8f0 <__subdf3+0x644>
2008c74c:	0085c83a 	sub	r2,zero,r2
2008c750:	29402034 	orhi	r5,r5,128
2008c754:	01000e04 	movi	r4,56
2008c758:	20807d16 	blt	r4,r2,2008c950 <__subdf3+0x6a4>
2008c75c:	010007c4 	movi	r4,31
2008c760:	2080d916 	blt	r4,r2,2008cac8 <__subdf3+0x81c>
2008c764:	01000804 	movi	r4,32
2008c768:	2089c83a 	sub	r4,r4,r2
2008c76c:	2912983a 	sll	r9,r5,r4
2008c770:	8890d83a 	srl	r8,r17,r2
2008c774:	8908983a 	sll	r4,r17,r4
2008c778:	2884d83a 	srl	r2,r5,r2
2008c77c:	4a22b03a 	or	r17,r9,r8
2008c780:	2008c03a 	cmpne	r4,r4,zero
2008c784:	8922b03a 	or	r17,r17,r4
2008c788:	3463c83a 	sub	r17,r6,r17
2008c78c:	1885c83a 	sub	r2,r3,r2
2008c790:	344d803a 	cmpltu	r6,r6,r17
2008c794:	118bc83a 	sub	r5,r2,r6
2008c798:	5021883a 	mov	r16,r10
2008c79c:	3825883a 	mov	r18,r7
2008c7a0:	003f2206 	br	2008c42c <__flash_rwdata_start+0xffffa630>
2008c7a4:	9886b03a 	or	r3,r19,r2
2008c7a8:	18001c1e 	bne	r3,zero,2008c81c <__subdf3+0x570>
2008c7ac:	0011883a 	mov	r8,zero
2008c7b0:	000b883a 	mov	r5,zero
2008c7b4:	0023883a 	mov	r17,zero
2008c7b8:	0021883a 	mov	r16,zero
2008c7bc:	003f3e06 	br	2008c4b8 <__flash_rwdata_start+0xffffa6bc>
2008c7c0:	010007c4 	movi	r4,31
2008c7c4:	20803c16 	blt	r4,r2,2008c8b8 <__subdf3+0x60c>
2008c7c8:	01000804 	movi	r4,32
2008c7cc:	2089c83a 	sub	r4,r4,r2
2008c7d0:	1912983a 	sll	r9,r3,r4
2008c7d4:	308ed83a 	srl	r7,r6,r2
2008c7d8:	3108983a 	sll	r4,r6,r4
2008c7dc:	1884d83a 	srl	r2,r3,r2
2008c7e0:	49ceb03a 	or	r7,r9,r7
2008c7e4:	2008c03a 	cmpne	r4,r4,zero
2008c7e8:	390eb03a 	or	r7,r7,r4
2008c7ec:	003f4706 	br	2008c50c <__flash_rwdata_start+0xffffa710>
2008c7f0:	2c48b03a 	or	r4,r5,r17
2008c7f4:	20003e26 	beq	r4,zero,2008c8f0 <__subdf3+0x644>
2008c7f8:	0084303a 	nor	r2,zero,r2
2008c7fc:	10003a1e 	bne	r2,zero,2008c8e8 <__subdf3+0x63c>
2008c800:	3463c83a 	sub	r17,r6,r17
2008c804:	194bc83a 	sub	r5,r3,r5
2008c808:	344d803a 	cmpltu	r6,r6,r17
2008c80c:	298bc83a 	sub	r5,r5,r6
2008c810:	5021883a 	mov	r16,r10
2008c814:	3825883a 	mov	r18,r7
2008c818:	003f0406 	br	2008c42c <__flash_rwdata_start+0xffffa630>
2008c81c:	1023883a 	mov	r17,r2
2008c820:	003f0706 	br	2008c440 <__flash_rwdata_start+0xffffa644>
2008c824:	0101ffc4 	movi	r4,2047
2008c828:	813f331e 	bne	r16,r4,2008c4f8 <__flash_rwdata_start+0xffffa6fc>
2008c82c:	003ec206 	br	2008c338 <__flash_rwdata_start+0xffffa53c>
2008c830:	0027883a 	mov	r19,zero
2008c834:	003fb006 	br	2008c6f8 <__flash_rwdata_start+0xffffa8fc>
2008c838:	0005883a 	mov	r2,zero
2008c83c:	003fbb06 	br	2008c72c <__flash_rwdata_start+0xffffa930>
2008c840:	2c44b03a 	or	r2,r5,r17
2008c844:	80008b1e 	bne	r16,zero,2008ca74 <__subdf3+0x7c8>
2008c848:	1000b526 	beq	r2,zero,2008cb20 <__subdf3+0x874>
2008c84c:	1984b03a 	or	r2,r3,r6
2008c850:	103eb926 	beq	r2,zero,2008c338 <__flash_rwdata_start+0xffffa53c>
2008c854:	3449883a 	add	r4,r6,r17
2008c858:	2463803a 	cmpltu	r17,r4,r17
2008c85c:	194b883a 	add	r5,r3,r5
2008c860:	2c4b883a 	add	r5,r5,r17
2008c864:	2880202c 	andhi	r2,r5,128
2008c868:	2023883a 	mov	r17,r4
2008c86c:	103f5c26 	beq	r2,zero,2008c5e0 <__flash_rwdata_start+0xffffa7e4>
2008c870:	00bfe034 	movhi	r2,65408
2008c874:	10bfffc4 	addi	r2,r2,-1
2008c878:	4821883a 	mov	r16,r9
2008c87c:	288a703a 	and	r5,r5,r2
2008c880:	003ead06 	br	2008c338 <__flash_rwdata_start+0xffffa53c>
2008c884:	2c44b03a 	or	r2,r5,r17
2008c888:	8000291e 	bne	r16,zero,2008c930 <__subdf3+0x684>
2008c88c:	10004f1e 	bne	r2,zero,2008c9cc <__subdf3+0x720>
2008c890:	1984b03a 	or	r2,r3,r6
2008c894:	10000426 	beq	r2,zero,2008c8a8 <__subdf3+0x5fc>
2008c898:	180b883a 	mov	r5,r3
2008c89c:	3023883a 	mov	r17,r6
2008c8a0:	3825883a 	mov	r18,r7
2008c8a4:	003ea406 	br	2008c338 <__flash_rwdata_start+0xffffa53c>
2008c8a8:	0011883a 	mov	r8,zero
2008c8ac:	000b883a 	mov	r5,zero
2008c8b0:	0023883a 	mov	r17,zero
2008c8b4:	003f0006 	br	2008c4b8 <__flash_rwdata_start+0xffffa6bc>
2008c8b8:	11fff804 	addi	r7,r2,-32
2008c8bc:	19c8d83a 	srl	r4,r3,r7
2008c8c0:	01c00804 	movi	r7,32
2008c8c4:	11c07e26 	beq	r2,r7,2008cac0 <__subdf3+0x814>
2008c8c8:	01c01004 	movi	r7,64
2008c8cc:	3885c83a 	sub	r2,r7,r2
2008c8d0:	1884983a 	sll	r2,r3,r2
2008c8d4:	118cb03a 	or	r6,r2,r6
2008c8d8:	300ec03a 	cmpne	r7,r6,zero
2008c8dc:	390eb03a 	or	r7,r7,r4
2008c8e0:	0005883a 	mov	r2,zero
2008c8e4:	003f0906 	br	2008c50c <__flash_rwdata_start+0xffffa710>
2008c8e8:	0101ffc4 	movi	r4,2047
2008c8ec:	513f991e 	bne	r10,r4,2008c754 <__flash_rwdata_start+0xffffa958>
2008c8f0:	180b883a 	mov	r5,r3
2008c8f4:	3023883a 	mov	r17,r6
2008c8f8:	5021883a 	mov	r16,r10
2008c8fc:	3825883a 	mov	r18,r7
2008c900:	003e8d06 	br	2008c338 <__flash_rwdata_start+0xffffa53c>
2008c904:	80001a1e 	bne	r16,zero,2008c970 <__subdf3+0x6c4>
2008c908:	2c48b03a 	or	r4,r5,r17
2008c90c:	20005526 	beq	r4,zero,2008ca64 <__subdf3+0x7b8>
2008c910:	0084303a 	nor	r2,zero,r2
2008c914:	1000511e 	bne	r2,zero,2008ca5c <__subdf3+0x7b0>
2008c918:	89a3883a 	add	r17,r17,r6
2008c91c:	194b883a 	add	r5,r3,r5
2008c920:	898d803a 	cmpltu	r6,r17,r6
2008c924:	298b883a 	add	r5,r5,r6
2008c928:	5021883a 	mov	r16,r10
2008c92c:	003efc06 	br	2008c520 <__flash_rwdata_start+0xffffa724>
2008c930:	1000341e 	bne	r2,zero,2008ca04 <__subdf3+0x758>
2008c934:	1984b03a 	or	r2,r3,r6
2008c938:	10006f26 	beq	r2,zero,2008caf8 <__subdf3+0x84c>
2008c93c:	180b883a 	mov	r5,r3
2008c940:	3023883a 	mov	r17,r6
2008c944:	3825883a 	mov	r18,r7
2008c948:	0401ffc4 	movi	r16,2047
2008c94c:	003e7a06 	br	2008c338 <__flash_rwdata_start+0xffffa53c>
2008c950:	2c62b03a 	or	r17,r5,r17
2008c954:	8822c03a 	cmpne	r17,r17,zero
2008c958:	0005883a 	mov	r2,zero
2008c95c:	003f8a06 	br	2008c788 <__flash_rwdata_start+0xffffa98c>
2008c960:	3821883a 	mov	r16,r7
2008c964:	000b883a 	mov	r5,zero
2008c968:	0023883a 	mov	r17,zero
2008c96c:	003ed206 	br	2008c4b8 <__flash_rwdata_start+0xffffa6bc>
2008c970:	0101ffc4 	movi	r4,2047
2008c974:	51003b26 	beq	r10,r4,2008ca64 <__subdf3+0x7b8>
2008c978:	0085c83a 	sub	r2,zero,r2
2008c97c:	29402034 	orhi	r5,r5,128
2008c980:	01000e04 	movi	r4,56
2008c984:	20806216 	blt	r4,r2,2008cb10 <__subdf3+0x864>
2008c988:	010007c4 	movi	r4,31
2008c98c:	20806b16 	blt	r4,r2,2008cb3c <__subdf3+0x890>
2008c990:	01000804 	movi	r4,32
2008c994:	2089c83a 	sub	r4,r4,r2
2008c998:	2912983a 	sll	r9,r5,r4
2008c99c:	888ed83a 	srl	r7,r17,r2
2008c9a0:	8908983a 	sll	r4,r17,r4
2008c9a4:	2884d83a 	srl	r2,r5,r2
2008c9a8:	49e2b03a 	or	r17,r9,r7
2008c9ac:	2008c03a 	cmpne	r4,r4,zero
2008c9b0:	8922b03a 	or	r17,r17,r4
2008c9b4:	89a3883a 	add	r17,r17,r6
2008c9b8:	10c5883a 	add	r2,r2,r3
2008c9bc:	898d803a 	cmpltu	r6,r17,r6
2008c9c0:	118b883a 	add	r5,r2,r6
2008c9c4:	5021883a 	mov	r16,r10
2008c9c8:	003ed506 	br	2008c520 <__flash_rwdata_start+0xffffa724>
2008c9cc:	1984b03a 	or	r2,r3,r6
2008c9d0:	103e5926 	beq	r2,zero,2008c338 <__flash_rwdata_start+0xffffa53c>
2008c9d4:	8989c83a 	sub	r4,r17,r6
2008c9d8:	8911803a 	cmpltu	r8,r17,r4
2008c9dc:	28c5c83a 	sub	r2,r5,r3
2008c9e0:	1205c83a 	sub	r2,r2,r8
2008c9e4:	1200202c 	andhi	r8,r2,128
2008c9e8:	403ef926 	beq	r8,zero,2008c5d0 <__flash_rwdata_start+0xffffa7d4>
2008c9ec:	3463c83a 	sub	r17,r6,r17
2008c9f0:	194bc83a 	sub	r5,r3,r5
2008c9f4:	344d803a 	cmpltu	r6,r6,r17
2008c9f8:	298bc83a 	sub	r5,r5,r6
2008c9fc:	3825883a 	mov	r18,r7
2008ca00:	003e4d06 	br	2008c338 <__flash_rwdata_start+0xffffa53c>
2008ca04:	1984b03a 	or	r2,r3,r6
2008ca08:	10002b26 	beq	r2,zero,2008cab8 <__subdf3+0x80c>
2008ca0c:	2808d0fa 	srli	r4,r5,3
2008ca10:	8822d0fa 	srli	r17,r17,3
2008ca14:	280a977a 	slli	r5,r5,29
2008ca18:	2080022c 	andhi	r2,r4,8
2008ca1c:	2c62b03a 	or	r17,r5,r17
2008ca20:	10000826 	beq	r2,zero,2008ca44 <__subdf3+0x798>
2008ca24:	1810d0fa 	srli	r8,r3,3
2008ca28:	4080022c 	andhi	r2,r8,8
2008ca2c:	1000051e 	bne	r2,zero,2008ca44 <__subdf3+0x798>
2008ca30:	300cd0fa 	srli	r6,r6,3
2008ca34:	1804977a 	slli	r2,r3,29
2008ca38:	4009883a 	mov	r4,r8
2008ca3c:	3825883a 	mov	r18,r7
2008ca40:	11a2b03a 	or	r17,r2,r6
2008ca44:	880ad77a 	srli	r5,r17,29
2008ca48:	200890fa 	slli	r4,r4,3
2008ca4c:	882290fa 	slli	r17,r17,3
2008ca50:	0401ffc4 	movi	r16,2047
2008ca54:	290ab03a 	or	r5,r5,r4
2008ca58:	003e3706 	br	2008c338 <__flash_rwdata_start+0xffffa53c>
2008ca5c:	0101ffc4 	movi	r4,2047
2008ca60:	513fc71e 	bne	r10,r4,2008c980 <__flash_rwdata_start+0xffffab84>
2008ca64:	180b883a 	mov	r5,r3
2008ca68:	3023883a 	mov	r17,r6
2008ca6c:	5021883a 	mov	r16,r10
2008ca70:	003e3106 	br	2008c338 <__flash_rwdata_start+0xffffa53c>
2008ca74:	10002d26 	beq	r2,zero,2008cb2c <__subdf3+0x880>
2008ca78:	1984b03a 	or	r2,r3,r6
2008ca7c:	10000e26 	beq	r2,zero,2008cab8 <__subdf3+0x80c>
2008ca80:	2808d0fa 	srli	r4,r5,3
2008ca84:	8822d0fa 	srli	r17,r17,3
2008ca88:	280a977a 	slli	r5,r5,29
2008ca8c:	2080022c 	andhi	r2,r4,8
2008ca90:	2c62b03a 	or	r17,r5,r17
2008ca94:	103feb26 	beq	r2,zero,2008ca44 <__flash_rwdata_start+0xffffac48>
2008ca98:	180ed0fa 	srli	r7,r3,3
2008ca9c:	3880022c 	andhi	r2,r7,8
2008caa0:	103fe81e 	bne	r2,zero,2008ca44 <__flash_rwdata_start+0xffffac48>
2008caa4:	300cd0fa 	srli	r6,r6,3
2008caa8:	1804977a 	slli	r2,r3,29
2008caac:	3809883a 	mov	r4,r7
2008cab0:	11a2b03a 	or	r17,r2,r6
2008cab4:	003fe306 	br	2008ca44 <__flash_rwdata_start+0xffffac48>
2008cab8:	0401ffc4 	movi	r16,2047
2008cabc:	003e1e06 	br	2008c338 <__flash_rwdata_start+0xffffa53c>
2008cac0:	0005883a 	mov	r2,zero
2008cac4:	003f8306 	br	2008c8d4 <__flash_rwdata_start+0xffffaad8>
2008cac8:	113ff804 	addi	r4,r2,-32
2008cacc:	02000804 	movi	r8,32
2008cad0:	2908d83a 	srl	r4,r5,r4
2008cad4:	12002526 	beq	r2,r8,2008cb6c <__subdf3+0x8c0>
2008cad8:	02001004 	movi	r8,64
2008cadc:	4085c83a 	sub	r2,r8,r2
2008cae0:	288a983a 	sll	r5,r5,r2
2008cae4:	2c62b03a 	or	r17,r5,r17
2008cae8:	8822c03a 	cmpne	r17,r17,zero
2008caec:	8922b03a 	or	r17,r17,r4
2008caf0:	0005883a 	mov	r2,zero
2008caf4:	003f2406 	br	2008c788 <__flash_rwdata_start+0xffffa98c>
2008caf8:	01402034 	movhi	r5,128
2008cafc:	0011883a 	mov	r8,zero
2008cb00:	297fffc4 	addi	r5,r5,-1
2008cb04:	047ffe04 	movi	r17,-8
2008cb08:	0401ffc4 	movi	r16,2047
2008cb0c:	003e6a06 	br	2008c4b8 <__flash_rwdata_start+0xffffa6bc>
2008cb10:	2c62b03a 	or	r17,r5,r17
2008cb14:	8822c03a 	cmpne	r17,r17,zero
2008cb18:	0005883a 	mov	r2,zero
2008cb1c:	003fa506 	br	2008c9b4 <__flash_rwdata_start+0xffffabb8>
2008cb20:	180b883a 	mov	r5,r3
2008cb24:	3023883a 	mov	r17,r6
2008cb28:	003e0306 	br	2008c338 <__flash_rwdata_start+0xffffa53c>
2008cb2c:	180b883a 	mov	r5,r3
2008cb30:	3023883a 	mov	r17,r6
2008cb34:	0401ffc4 	movi	r16,2047
2008cb38:	003dff06 	br	2008c338 <__flash_rwdata_start+0xffffa53c>
2008cb3c:	113ff804 	addi	r4,r2,-32
2008cb40:	01c00804 	movi	r7,32
2008cb44:	2908d83a 	srl	r4,r5,r4
2008cb48:	11c00a26 	beq	r2,r7,2008cb74 <__subdf3+0x8c8>
2008cb4c:	01c01004 	movi	r7,64
2008cb50:	3885c83a 	sub	r2,r7,r2
2008cb54:	288a983a 	sll	r5,r5,r2
2008cb58:	2c62b03a 	or	r17,r5,r17
2008cb5c:	8822c03a 	cmpne	r17,r17,zero
2008cb60:	8922b03a 	or	r17,r17,r4
2008cb64:	0005883a 	mov	r2,zero
2008cb68:	003f9206 	br	2008c9b4 <__flash_rwdata_start+0xffffabb8>
2008cb6c:	000b883a 	mov	r5,zero
2008cb70:	003fdc06 	br	2008cae4 <__flash_rwdata_start+0xfffface8>
2008cb74:	000b883a 	mov	r5,zero
2008cb78:	003ff706 	br	2008cb58 <__flash_rwdata_start+0xffffad5c>

2008cb7c <__fixdfsi>:
2008cb7c:	2806d53a 	srli	r3,r5,20
2008cb80:	00800434 	movhi	r2,16
2008cb84:	10bfffc4 	addi	r2,r2,-1
2008cb88:	18c1ffcc 	andi	r3,r3,2047
2008cb8c:	0180ff84 	movi	r6,1022
2008cb90:	2884703a 	and	r2,r5,r2
2008cb94:	280ad7fa 	srli	r5,r5,31
2008cb98:	30c0130e 	bge	r6,r3,2008cbe8 <__fixdfsi+0x6c>
2008cb9c:	01810744 	movi	r6,1053
2008cba0:	30c00d16 	blt	r6,r3,2008cbd8 <__fixdfsi+0x5c>
2008cba4:	01810cc4 	movi	r6,1075
2008cba8:	30cdc83a 	sub	r6,r6,r3
2008cbac:	01c007c4 	movi	r7,31
2008cbb0:	10800434 	orhi	r2,r2,16
2008cbb4:	39800e0e 	bge	r7,r6,2008cbf0 <__fixdfsi+0x74>
2008cbb8:	010104c4 	movi	r4,1043
2008cbbc:	20c7c83a 	sub	r3,r4,r3
2008cbc0:	10c6d83a 	srl	r3,r2,r3
2008cbc4:	29403fcc 	andi	r5,r5,255
2008cbc8:	0145c83a 	sub	r2,zero,r5
2008cbcc:	1884f03a 	xor	r2,r3,r2
2008cbd0:	1145883a 	add	r2,r2,r5
2008cbd4:	f800283a 	ret
2008cbd8:	00a00034 	movhi	r2,32768
2008cbdc:	10bfffc4 	addi	r2,r2,-1
2008cbe0:	2885883a 	add	r2,r5,r2
2008cbe4:	f800283a 	ret
2008cbe8:	0005883a 	mov	r2,zero
2008cbec:	f800283a 	ret
2008cbf0:	18fefb44 	addi	r3,r3,-1043
2008cbf4:	2188d83a 	srl	r4,r4,r6
2008cbf8:	10c6983a 	sll	r3,r2,r3
2008cbfc:	20c6b03a 	or	r3,r4,r3
2008cc00:	003ff006 	br	2008cbc4 <__flash_rwdata_start+0xffffadc8>

2008cc04 <__floatsidf>:
2008cc04:	defffd04 	addi	sp,sp,-12
2008cc08:	dc400115 	stw	r17,4(sp)
2008cc0c:	dfc00215 	stw	ra,8(sp)
2008cc10:	dc000015 	stw	r16,0(sp)
2008cc14:	2023883a 	mov	r17,r4
2008cc18:	20001426 	beq	r4,zero,2008cc6c <__floatsidf+0x68>
2008cc1c:	2020d7fa 	srli	r16,r4,31
2008cc20:	80000126 	beq	r16,zero,2008cc28 <__floatsidf+0x24>
2008cc24:	0123c83a 	sub	r17,zero,r4
2008cc28:	8809883a 	mov	r4,r17
2008cc2c:	008cd780 	call	2008cd78 <__clzsi2>
2008cc30:	01410784 	movi	r5,1054
2008cc34:	00c00284 	movi	r3,10
2008cc38:	288bc83a 	sub	r5,r5,r2
2008cc3c:	18801c16 	blt	r3,r2,2008ccb0 <__floatsidf+0xac>
2008cc40:	00c002c4 	movi	r3,11
2008cc44:	1887c83a 	sub	r3,r3,r2
2008cc48:	88c8d83a 	srl	r4,r17,r3
2008cc4c:	00c00434 	movhi	r3,16
2008cc50:	18ffffc4 	addi	r3,r3,-1
2008cc54:	10800544 	addi	r2,r2,21
2008cc58:	20c8703a 	and	r4,r4,r3
2008cc5c:	8884983a 	sll	r2,r17,r2
2008cc60:	28c1ffcc 	andi	r3,r5,2047
2008cc64:	800d883a 	mov	r6,r16
2008cc68:	00000406 	br	2008cc7c <__floatsidf+0x78>
2008cc6c:	000d883a 	mov	r6,zero
2008cc70:	0007883a 	mov	r3,zero
2008cc74:	0009883a 	mov	r4,zero
2008cc78:	0005883a 	mov	r2,zero
2008cc7c:	180a953a 	slli	r5,r3,20
2008cc80:	31803fcc 	andi	r6,r6,255
2008cc84:	00c00434 	movhi	r3,16
2008cc88:	300c97fa 	slli	r6,r6,31
2008cc8c:	18ffffc4 	addi	r3,r3,-1
2008cc90:	20c6703a 	and	r3,r4,r3
2008cc94:	1946b03a 	or	r3,r3,r5
2008cc98:	1986b03a 	or	r3,r3,r6
2008cc9c:	dfc00217 	ldw	ra,8(sp)
2008cca0:	dc400117 	ldw	r17,4(sp)
2008cca4:	dc000017 	ldw	r16,0(sp)
2008cca8:	dec00304 	addi	sp,sp,12
2008ccac:	f800283a 	ret
2008ccb0:	10fffd44 	addi	r3,r2,-11
2008ccb4:	88c8983a 	sll	r4,r17,r3
2008ccb8:	00800434 	movhi	r2,16
2008ccbc:	10bfffc4 	addi	r2,r2,-1
2008ccc0:	2088703a 	and	r4,r4,r2
2008ccc4:	28c1ffcc 	andi	r3,r5,2047
2008ccc8:	800d883a 	mov	r6,r16
2008cccc:	0005883a 	mov	r2,zero
2008ccd0:	003fea06 	br	2008cc7c <__flash_rwdata_start+0xffffae80>

2008ccd4 <__floatunsidf>:
2008ccd4:	defffe04 	addi	sp,sp,-8
2008ccd8:	dc000015 	stw	r16,0(sp)
2008ccdc:	dfc00115 	stw	ra,4(sp)
2008cce0:	2021883a 	mov	r16,r4
2008cce4:	20001026 	beq	r4,zero,2008cd28 <__floatunsidf+0x54>
2008cce8:	008cd780 	call	2008cd78 <__clzsi2>
2008ccec:	01410784 	movi	r5,1054
2008ccf0:	100d883a 	mov	r6,r2
2008ccf4:	288bc83a 	sub	r5,r5,r2
2008ccf8:	00800284 	movi	r2,10
2008ccfc:	11801616 	blt	r2,r6,2008cd58 <__floatunsidf+0x84>
2008cd00:	008002c4 	movi	r2,11
2008cd04:	1185c83a 	sub	r2,r2,r6
2008cd08:	8084d83a 	srl	r2,r16,r2
2008cd0c:	00c00434 	movhi	r3,16
2008cd10:	31c00544 	addi	r7,r6,21
2008cd14:	18ffffc4 	addi	r3,r3,-1
2008cd18:	81e0983a 	sll	r16,r16,r7
2008cd1c:	10cc703a 	and	r6,r2,r3
2008cd20:	2941ffcc 	andi	r5,r5,2047
2008cd24:	00000206 	br	2008cd30 <__floatunsidf+0x5c>
2008cd28:	000b883a 	mov	r5,zero
2008cd2c:	000d883a 	mov	r6,zero
2008cd30:	280a953a 	slli	r5,r5,20
2008cd34:	00c00434 	movhi	r3,16
2008cd38:	18ffffc4 	addi	r3,r3,-1
2008cd3c:	30c6703a 	and	r3,r6,r3
2008cd40:	8005883a 	mov	r2,r16
2008cd44:	1946b03a 	or	r3,r3,r5
2008cd48:	dfc00117 	ldw	ra,4(sp)
2008cd4c:	dc000017 	ldw	r16,0(sp)
2008cd50:	dec00204 	addi	sp,sp,8
2008cd54:	f800283a 	ret
2008cd58:	31bffd44 	addi	r6,r6,-11
2008cd5c:	818c983a 	sll	r6,r16,r6
2008cd60:	00800434 	movhi	r2,16
2008cd64:	10bfffc4 	addi	r2,r2,-1
2008cd68:	2941ffcc 	andi	r5,r5,2047
2008cd6c:	0021883a 	mov	r16,zero
2008cd70:	308c703a 	and	r6,r6,r2
2008cd74:	003fee06 	br	2008cd30 <__flash_rwdata_start+0xffffaf34>

2008cd78 <__clzsi2>:
2008cd78:	00bfffd4 	movui	r2,65535
2008cd7c:	11000b36 	bltu	r2,r4,2008cdac <__clzsi2+0x34>
2008cd80:	00803fc4 	movi	r2,255
2008cd84:	1100122e 	bgeu	r2,r4,2008cdd0 <__clzsi2+0x58>
2008cd88:	00c00204 	movi	r3,8
2008cd8c:	01400604 	movi	r5,24
2008cd90:	20c8d83a 	srl	r4,r4,r3
2008cd94:	00800034 	movhi	r2,0
2008cd98:	10808c04 	addi	r2,r2,560
2008cd9c:	1109883a 	add	r4,r2,r4
2008cda0:	20800003 	ldbu	r2,0(r4)
2008cda4:	2885c83a 	sub	r2,r5,r2
2008cda8:	f800283a 	ret
2008cdac:	00804034 	movhi	r2,256
2008cdb0:	10bfffc4 	addi	r2,r2,-1
2008cdb4:	11000336 	bltu	r2,r4,2008cdc4 <__clzsi2+0x4c>
2008cdb8:	00c00404 	movi	r3,16
2008cdbc:	180b883a 	mov	r5,r3
2008cdc0:	003ff306 	br	2008cd90 <__flash_rwdata_start+0xffffaf94>
2008cdc4:	00c00604 	movi	r3,24
2008cdc8:	01400204 	movi	r5,8
2008cdcc:	003ff006 	br	2008cd90 <__flash_rwdata_start+0xffffaf94>
2008cdd0:	0007883a 	mov	r3,zero
2008cdd4:	01400804 	movi	r5,32
2008cdd8:	003fed06 	br	2008cd90 <__flash_rwdata_start+0xffffaf94>

2008cddc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2008cddc:	defffe04 	addi	sp,sp,-8
2008cde0:	dfc00115 	stw	ra,4(sp)
2008cde4:	df000015 	stw	fp,0(sp)
2008cde8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2008cdec:	00800034 	movhi	r2,0
2008cdf0:	10895a04 	addi	r2,r2,9576
2008cdf4:	10800017 	ldw	r2,0(r2)
2008cdf8:	10000526 	beq	r2,zero,2008ce10 <alt_get_errno+0x34>
2008cdfc:	00800034 	movhi	r2,0
2008ce00:	10895a04 	addi	r2,r2,9576
2008ce04:	10800017 	ldw	r2,0(r2)
2008ce08:	103ee83a 	callr	r2
2008ce0c:	00000206 	br	2008ce18 <alt_get_errno+0x3c>
2008ce10:	00800034 	movhi	r2,0
2008ce14:	10896504 	addi	r2,r2,9620
}
2008ce18:	e037883a 	mov	sp,fp
2008ce1c:	dfc00117 	ldw	ra,4(sp)
2008ce20:	df000017 	ldw	fp,0(sp)
2008ce24:	dec00204 	addi	sp,sp,8
2008ce28:	f800283a 	ret

2008ce2c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
2008ce2c:	defffb04 	addi	sp,sp,-20
2008ce30:	dfc00415 	stw	ra,16(sp)
2008ce34:	df000315 	stw	fp,12(sp)
2008ce38:	df000304 	addi	fp,sp,12
2008ce3c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
2008ce40:	e0bfff17 	ldw	r2,-4(fp)
2008ce44:	10000616 	blt	r2,zero,2008ce60 <close+0x34>
2008ce48:	e0bfff17 	ldw	r2,-4(fp)
2008ce4c:	10c00324 	muli	r3,r2,12
2008ce50:	00800034 	movhi	r2,0
2008ce54:	10842f04 	addi	r2,r2,4284
2008ce58:	1885883a 	add	r2,r3,r2
2008ce5c:	00000106 	br	2008ce64 <close+0x38>
2008ce60:	0005883a 	mov	r2,zero
2008ce64:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
2008ce68:	e0bffd17 	ldw	r2,-12(fp)
2008ce6c:	10001926 	beq	r2,zero,2008ced4 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
2008ce70:	e0bffd17 	ldw	r2,-12(fp)
2008ce74:	10800017 	ldw	r2,0(r2)
2008ce78:	10800417 	ldw	r2,16(r2)
2008ce7c:	10000626 	beq	r2,zero,2008ce98 <close+0x6c>
2008ce80:	e0bffd17 	ldw	r2,-12(fp)
2008ce84:	10800017 	ldw	r2,0(r2)
2008ce88:	10800417 	ldw	r2,16(r2)
2008ce8c:	e13ffd17 	ldw	r4,-12(fp)
2008ce90:	103ee83a 	callr	r2
2008ce94:	00000106 	br	2008ce9c <close+0x70>
2008ce98:	0005883a 	mov	r2,zero
2008ce9c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
2008cea0:	e13fff17 	ldw	r4,-4(fp)
2008cea4:	008d5a00 	call	2008d5a0 <alt_release_fd>
    if (rval < 0)
2008cea8:	e0bffe17 	ldw	r2,-8(fp)
2008ceac:	1000070e 	bge	r2,zero,2008cecc <close+0xa0>
    {
      ALT_ERRNO = -rval;
2008ceb0:	008cddc0 	call	2008cddc <alt_get_errno>
2008ceb4:	1007883a 	mov	r3,r2
2008ceb8:	e0bffe17 	ldw	r2,-8(fp)
2008cebc:	0085c83a 	sub	r2,zero,r2
2008cec0:	18800015 	stw	r2,0(r3)
      return -1;
2008cec4:	00bfffc4 	movi	r2,-1
2008cec8:	00000706 	br	2008cee8 <close+0xbc>
    }
    return 0;
2008cecc:	0005883a 	mov	r2,zero
2008ced0:	00000506 	br	2008cee8 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
2008ced4:	008cddc0 	call	2008cddc <alt_get_errno>
2008ced8:	1007883a 	mov	r3,r2
2008cedc:	00801444 	movi	r2,81
2008cee0:	18800015 	stw	r2,0(r3)
    return -1;
2008cee4:	00bfffc4 	movi	r2,-1
  }
}
2008cee8:	e037883a 	mov	sp,fp
2008ceec:	dfc00117 	ldw	ra,4(sp)
2008cef0:	df000017 	ldw	fp,0(sp)
2008cef4:	dec00204 	addi	sp,sp,8
2008cef8:	f800283a 	ret

2008cefc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
2008cefc:	defffe04 	addi	sp,sp,-8
2008cf00:	df000115 	stw	fp,4(sp)
2008cf04:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
2008cf08:	e03fff15 	stw	zero,-4(fp)
2008cf0c:	00000506 	br	2008cf24 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
2008cf10:	e0bfff17 	ldw	r2,-4(fp)
2008cf14:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
2008cf18:	e0bfff17 	ldw	r2,-4(fp)
2008cf1c:	10800804 	addi	r2,r2,32
2008cf20:	e0bfff15 	stw	r2,-4(fp)
2008cf24:	e0bfff17 	ldw	r2,-4(fp)
2008cf28:	10900030 	cmpltui	r2,r2,16384
2008cf2c:	103ff81e 	bne	r2,zero,2008cf10 <__flash_rwdata_start+0xffffb114>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
2008cf30:	e037883a 	mov	sp,fp
2008cf34:	df000017 	ldw	fp,0(sp)
2008cf38:	dec00104 	addi	sp,sp,4
2008cf3c:	f800283a 	ret

2008cf40 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
2008cf40:	defffc04 	addi	sp,sp,-16
2008cf44:	df000315 	stw	fp,12(sp)
2008cf48:	df000304 	addi	fp,sp,12
2008cf4c:	e13ffd15 	stw	r4,-12(fp)
2008cf50:	e17ffe15 	stw	r5,-8(fp)
2008cf54:	e1bfff15 	stw	r6,-4(fp)
  return len;
2008cf58:	e0bfff17 	ldw	r2,-4(fp)
}
2008cf5c:	e037883a 	mov	sp,fp
2008cf60:	df000017 	ldw	fp,0(sp)
2008cf64:	dec00104 	addi	sp,sp,4
2008cf68:	f800283a 	ret

2008cf6c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
2008cf6c:	defffd04 	addi	sp,sp,-12
2008cf70:	df000215 	stw	fp,8(sp)
2008cf74:	df000204 	addi	fp,sp,8
2008cf78:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
2008cf7c:	0001883a 	nop
2008cf80:	e0bfff17 	ldw	r2,-4(fp)
2008cf84:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
2008cf88:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
2008cf8c:	10000226 	beq	r2,zero,2008cf98 <_exit+0x2c>
    ALT_SIM_FAIL();
2008cf90:	002af070 	cmpltui	zero,zero,43969
2008cf94:	00000106 	br	2008cf9c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
2008cf98:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
2008cf9c:	003fff06 	br	2008cf9c <__flash_rwdata_start+0xffffb1a0>

2008cfa0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2008cfa0:	defffe04 	addi	sp,sp,-8
2008cfa4:	dfc00115 	stw	ra,4(sp)
2008cfa8:	df000015 	stw	fp,0(sp)
2008cfac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2008cfb0:	00800034 	movhi	r2,0
2008cfb4:	10895a04 	addi	r2,r2,9576
2008cfb8:	10800017 	ldw	r2,0(r2)
2008cfbc:	10000526 	beq	r2,zero,2008cfd4 <alt_get_errno+0x34>
2008cfc0:	00800034 	movhi	r2,0
2008cfc4:	10895a04 	addi	r2,r2,9576
2008cfc8:	10800017 	ldw	r2,0(r2)
2008cfcc:	103ee83a 	callr	r2
2008cfd0:	00000206 	br	2008cfdc <alt_get_errno+0x3c>
2008cfd4:	00800034 	movhi	r2,0
2008cfd8:	10896504 	addi	r2,r2,9620
}
2008cfdc:	e037883a 	mov	sp,fp
2008cfe0:	dfc00117 	ldw	ra,4(sp)
2008cfe4:	df000017 	ldw	fp,0(sp)
2008cfe8:	dec00204 	addi	sp,sp,8
2008cfec:	f800283a 	ret

2008cff0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
2008cff0:	defffb04 	addi	sp,sp,-20
2008cff4:	dfc00415 	stw	ra,16(sp)
2008cff8:	df000315 	stw	fp,12(sp)
2008cffc:	df000304 	addi	fp,sp,12
2008d000:	e13ffe15 	stw	r4,-8(fp)
2008d004:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
2008d008:	e0bffe17 	ldw	r2,-8(fp)
2008d00c:	10000616 	blt	r2,zero,2008d028 <fstat+0x38>
2008d010:	e0bffe17 	ldw	r2,-8(fp)
2008d014:	10c00324 	muli	r3,r2,12
2008d018:	00800034 	movhi	r2,0
2008d01c:	10842f04 	addi	r2,r2,4284
2008d020:	1885883a 	add	r2,r3,r2
2008d024:	00000106 	br	2008d02c <fstat+0x3c>
2008d028:	0005883a 	mov	r2,zero
2008d02c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
2008d030:	e0bffd17 	ldw	r2,-12(fp)
2008d034:	10001026 	beq	r2,zero,2008d078 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
2008d038:	e0bffd17 	ldw	r2,-12(fp)
2008d03c:	10800017 	ldw	r2,0(r2)
2008d040:	10800817 	ldw	r2,32(r2)
2008d044:	10000726 	beq	r2,zero,2008d064 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
2008d048:	e0bffd17 	ldw	r2,-12(fp)
2008d04c:	10800017 	ldw	r2,0(r2)
2008d050:	10800817 	ldw	r2,32(r2)
2008d054:	e13ffd17 	ldw	r4,-12(fp)
2008d058:	e17fff17 	ldw	r5,-4(fp)
2008d05c:	103ee83a 	callr	r2
2008d060:	00000a06 	br	2008d08c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
2008d064:	e0bfff17 	ldw	r2,-4(fp)
2008d068:	00c80004 	movi	r3,8192
2008d06c:	10c00115 	stw	r3,4(r2)
      return 0;
2008d070:	0005883a 	mov	r2,zero
2008d074:	00000506 	br	2008d08c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
2008d078:	008cfa00 	call	2008cfa0 <alt_get_errno>
2008d07c:	1007883a 	mov	r3,r2
2008d080:	00801444 	movi	r2,81
2008d084:	18800015 	stw	r2,0(r3)
    return -1;
2008d088:	00bfffc4 	movi	r2,-1
  }
}
2008d08c:	e037883a 	mov	sp,fp
2008d090:	dfc00117 	ldw	ra,4(sp)
2008d094:	df000017 	ldw	fp,0(sp)
2008d098:	dec00204 	addi	sp,sp,8
2008d09c:	f800283a 	ret

2008d0a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2008d0a0:	defffe04 	addi	sp,sp,-8
2008d0a4:	dfc00115 	stw	ra,4(sp)
2008d0a8:	df000015 	stw	fp,0(sp)
2008d0ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2008d0b0:	00800034 	movhi	r2,0
2008d0b4:	10895a04 	addi	r2,r2,9576
2008d0b8:	10800017 	ldw	r2,0(r2)
2008d0bc:	10000526 	beq	r2,zero,2008d0d4 <alt_get_errno+0x34>
2008d0c0:	00800034 	movhi	r2,0
2008d0c4:	10895a04 	addi	r2,r2,9576
2008d0c8:	10800017 	ldw	r2,0(r2)
2008d0cc:	103ee83a 	callr	r2
2008d0d0:	00000206 	br	2008d0dc <alt_get_errno+0x3c>
2008d0d4:	00800034 	movhi	r2,0
2008d0d8:	10896504 	addi	r2,r2,9620
}
2008d0dc:	e037883a 	mov	sp,fp
2008d0e0:	dfc00117 	ldw	ra,4(sp)
2008d0e4:	df000017 	ldw	fp,0(sp)
2008d0e8:	dec00204 	addi	sp,sp,8
2008d0ec:	f800283a 	ret

2008d0f0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
2008d0f0:	deffed04 	addi	sp,sp,-76
2008d0f4:	dfc01215 	stw	ra,72(sp)
2008d0f8:	df001115 	stw	fp,68(sp)
2008d0fc:	df001104 	addi	fp,sp,68
2008d100:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
2008d104:	e0bfff17 	ldw	r2,-4(fp)
2008d108:	10000616 	blt	r2,zero,2008d124 <isatty+0x34>
2008d10c:	e0bfff17 	ldw	r2,-4(fp)
2008d110:	10c00324 	muli	r3,r2,12
2008d114:	00800034 	movhi	r2,0
2008d118:	10842f04 	addi	r2,r2,4284
2008d11c:	1885883a 	add	r2,r3,r2
2008d120:	00000106 	br	2008d128 <isatty+0x38>
2008d124:	0005883a 	mov	r2,zero
2008d128:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
2008d12c:	e0bfef17 	ldw	r2,-68(fp)
2008d130:	10000e26 	beq	r2,zero,2008d16c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
2008d134:	e0bfef17 	ldw	r2,-68(fp)
2008d138:	10800017 	ldw	r2,0(r2)
2008d13c:	10800817 	ldw	r2,32(r2)
2008d140:	1000021e 	bne	r2,zero,2008d14c <isatty+0x5c>
    {
      return 1;
2008d144:	00800044 	movi	r2,1
2008d148:	00000d06 	br	2008d180 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
2008d14c:	e0bff004 	addi	r2,fp,-64
2008d150:	e13fff17 	ldw	r4,-4(fp)
2008d154:	100b883a 	mov	r5,r2
2008d158:	008cff00 	call	2008cff0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
2008d15c:	e0bff117 	ldw	r2,-60(fp)
2008d160:	10880020 	cmpeqi	r2,r2,8192
2008d164:	10803fcc 	andi	r2,r2,255
2008d168:	00000506 	br	2008d180 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
2008d16c:	008d0a00 	call	2008d0a0 <alt_get_errno>
2008d170:	1007883a 	mov	r3,r2
2008d174:	00801444 	movi	r2,81
2008d178:	18800015 	stw	r2,0(r3)
    return 0;
2008d17c:	0005883a 	mov	r2,zero
  }
}
2008d180:	e037883a 	mov	sp,fp
2008d184:	dfc00117 	ldw	ra,4(sp)
2008d188:	df000017 	ldw	fp,0(sp)
2008d18c:	dec00204 	addi	sp,sp,8
2008d190:	f800283a 	ret

2008d194 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
2008d194:	defffc04 	addi	sp,sp,-16
2008d198:	df000315 	stw	fp,12(sp)
2008d19c:	df000304 	addi	fp,sp,12
2008d1a0:	e13ffd15 	stw	r4,-12(fp)
2008d1a4:	e17ffe15 	stw	r5,-8(fp)
2008d1a8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
2008d1ac:	e0fffe17 	ldw	r3,-8(fp)
2008d1b0:	e0bffd17 	ldw	r2,-12(fp)
2008d1b4:	18800c26 	beq	r3,r2,2008d1e8 <alt_load_section+0x54>
  {
    while( to != end )
2008d1b8:	00000806 	br	2008d1dc <alt_load_section+0x48>
    {
      *to++ = *from++;
2008d1bc:	e0bffe17 	ldw	r2,-8(fp)
2008d1c0:	10c00104 	addi	r3,r2,4
2008d1c4:	e0fffe15 	stw	r3,-8(fp)
2008d1c8:	e0fffd17 	ldw	r3,-12(fp)
2008d1cc:	19000104 	addi	r4,r3,4
2008d1d0:	e13ffd15 	stw	r4,-12(fp)
2008d1d4:	18c00017 	ldw	r3,0(r3)
2008d1d8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
2008d1dc:	e0fffe17 	ldw	r3,-8(fp)
2008d1e0:	e0bfff17 	ldw	r2,-4(fp)
2008d1e4:	18bff51e 	bne	r3,r2,2008d1bc <__flash_rwdata_start+0xffffb3c0>
    {
      *to++ = *from++;
    }
  }
}
2008d1e8:	e037883a 	mov	sp,fp
2008d1ec:	df000017 	ldw	fp,0(sp)
2008d1f0:	dec00104 	addi	sp,sp,4
2008d1f4:	f800283a 	ret

2008d1f8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
2008d1f8:	defffe04 	addi	sp,sp,-8
2008d1fc:	dfc00115 	stw	ra,4(sp)
2008d200:	df000015 	stw	fp,0(sp)
2008d204:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
2008d208:	01080274 	movhi	r4,8201
2008d20c:	21077f04 	addi	r4,r4,7676
2008d210:	01400034 	movhi	r5,0
2008d214:	29417c04 	addi	r5,r5,1520
2008d218:	01800034 	movhi	r6,0
2008d21c:	31896104 	addi	r6,r6,9604
2008d220:	008d1940 	call	2008d194 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
2008d224:	01080234 	movhi	r4,8200
2008d228:	21000804 	addi	r4,r4,32
2008d22c:	01480234 	movhi	r5,8200
2008d230:	29400804 	addi	r5,r5,32
2008d234:	01880234 	movhi	r6,8200
2008d238:	31809004 	addi	r6,r6,576
2008d23c:	008d1940 	call	2008d194 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
2008d240:	01080274 	movhi	r4,8201
2008d244:	21060304 	addi	r4,r4,6156
2008d248:	01400034 	movhi	r5,0
2008d24c:	29400004 	addi	r5,r5,0
2008d250:	01800034 	movhi	r6,0
2008d254:	31817c04 	addi	r6,r6,1520
2008d258:	008d1940 	call	2008d194 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
2008d25c:	008cefc0 	call	2008cefc <alt_dcache_flush_all>
  alt_icache_flush_all();
2008d260:	00908a40 	call	200908a4 <alt_icache_flush_all>
}
2008d264:	e037883a 	mov	sp,fp
2008d268:	dfc00117 	ldw	ra,4(sp)
2008d26c:	df000017 	ldw	fp,0(sp)
2008d270:	dec00204 	addi	sp,sp,8
2008d274:	f800283a 	ret

2008d278 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2008d278:	defffe04 	addi	sp,sp,-8
2008d27c:	dfc00115 	stw	ra,4(sp)
2008d280:	df000015 	stw	fp,0(sp)
2008d284:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2008d288:	00800034 	movhi	r2,0
2008d28c:	10895a04 	addi	r2,r2,9576
2008d290:	10800017 	ldw	r2,0(r2)
2008d294:	10000526 	beq	r2,zero,2008d2ac <alt_get_errno+0x34>
2008d298:	00800034 	movhi	r2,0
2008d29c:	10895a04 	addi	r2,r2,9576
2008d2a0:	10800017 	ldw	r2,0(r2)
2008d2a4:	103ee83a 	callr	r2
2008d2a8:	00000206 	br	2008d2b4 <alt_get_errno+0x3c>
2008d2ac:	00800034 	movhi	r2,0
2008d2b0:	10896504 	addi	r2,r2,9620
}
2008d2b4:	e037883a 	mov	sp,fp
2008d2b8:	dfc00117 	ldw	ra,4(sp)
2008d2bc:	df000017 	ldw	fp,0(sp)
2008d2c0:	dec00204 	addi	sp,sp,8
2008d2c4:	f800283a 	ret

2008d2c8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
2008d2c8:	defff904 	addi	sp,sp,-28
2008d2cc:	dfc00615 	stw	ra,24(sp)
2008d2d0:	df000515 	stw	fp,20(sp)
2008d2d4:	df000504 	addi	fp,sp,20
2008d2d8:	e13ffd15 	stw	r4,-12(fp)
2008d2dc:	e17ffe15 	stw	r5,-8(fp)
2008d2e0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
2008d2e4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
2008d2e8:	e0bffd17 	ldw	r2,-12(fp)
2008d2ec:	10000616 	blt	r2,zero,2008d308 <lseek+0x40>
2008d2f0:	e0bffd17 	ldw	r2,-12(fp)
2008d2f4:	10c00324 	muli	r3,r2,12
2008d2f8:	00800034 	movhi	r2,0
2008d2fc:	10842f04 	addi	r2,r2,4284
2008d300:	1885883a 	add	r2,r3,r2
2008d304:	00000106 	br	2008d30c <lseek+0x44>
2008d308:	0005883a 	mov	r2,zero
2008d30c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
2008d310:	e0bffc17 	ldw	r2,-16(fp)
2008d314:	10001026 	beq	r2,zero,2008d358 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
2008d318:	e0bffc17 	ldw	r2,-16(fp)
2008d31c:	10800017 	ldw	r2,0(r2)
2008d320:	10800717 	ldw	r2,28(r2)
2008d324:	10000926 	beq	r2,zero,2008d34c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
2008d328:	e0bffc17 	ldw	r2,-16(fp)
2008d32c:	10800017 	ldw	r2,0(r2)
2008d330:	10800717 	ldw	r2,28(r2)
2008d334:	e13ffc17 	ldw	r4,-16(fp)
2008d338:	e17ffe17 	ldw	r5,-8(fp)
2008d33c:	e1bfff17 	ldw	r6,-4(fp)
2008d340:	103ee83a 	callr	r2
2008d344:	e0bffb15 	stw	r2,-20(fp)
2008d348:	00000506 	br	2008d360 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
2008d34c:	00bfde84 	movi	r2,-134
2008d350:	e0bffb15 	stw	r2,-20(fp)
2008d354:	00000206 	br	2008d360 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
2008d358:	00bfebc4 	movi	r2,-81
2008d35c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
2008d360:	e0bffb17 	ldw	r2,-20(fp)
2008d364:	1000070e 	bge	r2,zero,2008d384 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
2008d368:	008d2780 	call	2008d278 <alt_get_errno>
2008d36c:	1007883a 	mov	r3,r2
2008d370:	e0bffb17 	ldw	r2,-20(fp)
2008d374:	0085c83a 	sub	r2,zero,r2
2008d378:	18800015 	stw	r2,0(r3)
    rc = -1;
2008d37c:	00bfffc4 	movi	r2,-1
2008d380:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
2008d384:	e0bffb17 	ldw	r2,-20(fp)
}
2008d388:	e037883a 	mov	sp,fp
2008d38c:	dfc00117 	ldw	ra,4(sp)
2008d390:	df000017 	ldw	fp,0(sp)
2008d394:	dec00204 	addi	sp,sp,8
2008d398:	f800283a 	ret

2008d39c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
2008d39c:	defffd04 	addi	sp,sp,-12
2008d3a0:	dfc00215 	stw	ra,8(sp)
2008d3a4:	df000115 	stw	fp,4(sp)
2008d3a8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
2008d3ac:	0009883a 	mov	r4,zero
2008d3b0:	008d8300 	call	2008d830 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
2008d3b4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
2008d3b8:	008d8640 	call	2008d864 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
2008d3bc:	01000034 	movhi	r4,0
2008d3c0:	2100cf04 	addi	r4,r4,828
2008d3c4:	01400034 	movhi	r5,0
2008d3c8:	2940cf04 	addi	r5,r5,828
2008d3cc:	01800034 	movhi	r6,0
2008d3d0:	3180cf04 	addi	r6,r6,828
2008d3d4:	0090c640 	call	20090c64 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
2008d3d8:	009075c0 	call	2009075c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
2008d3dc:	01080274 	movhi	r4,8201
2008d3e0:	2101ee04 	addi	r4,r4,1976
2008d3e4:	00916680 	call	20091668 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
2008d3e8:	d1201a17 	ldw	r4,-32664(gp)
2008d3ec:	d0e01b17 	ldw	r3,-32660(gp)
2008d3f0:	d0a01c17 	ldw	r2,-32656(gp)
2008d3f4:	180b883a 	mov	r5,r3
2008d3f8:	100d883a 	mov	r6,r2
2008d3fc:	00805540 	call	20080554 <main>
2008d400:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
2008d404:	01000044 	movi	r4,1
2008d408:	008ce2c0 	call	2008ce2c <close>
  exit (result);
2008d40c:	e13fff17 	ldw	r4,-4(fp)
2008d410:	008069c0 	call	2008069c <exit>

2008d414 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
2008d414:	defffe04 	addi	sp,sp,-8
2008d418:	df000115 	stw	fp,4(sp)
2008d41c:	df000104 	addi	fp,sp,4
2008d420:	e13fff15 	stw	r4,-4(fp)
}
2008d424:	e037883a 	mov	sp,fp
2008d428:	df000017 	ldw	fp,0(sp)
2008d42c:	dec00104 	addi	sp,sp,4
2008d430:	f800283a 	ret

2008d434 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
2008d434:	defffe04 	addi	sp,sp,-8
2008d438:	df000115 	stw	fp,4(sp)
2008d43c:	df000104 	addi	fp,sp,4
2008d440:	e13fff15 	stw	r4,-4(fp)
}
2008d444:	e037883a 	mov	sp,fp
2008d448:	df000017 	ldw	fp,0(sp)
2008d44c:	dec00104 	addi	sp,sp,4
2008d450:	f800283a 	ret

2008d454 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2008d454:	defffe04 	addi	sp,sp,-8
2008d458:	dfc00115 	stw	ra,4(sp)
2008d45c:	df000015 	stw	fp,0(sp)
2008d460:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2008d464:	00800034 	movhi	r2,0
2008d468:	10895a04 	addi	r2,r2,9576
2008d46c:	10800017 	ldw	r2,0(r2)
2008d470:	10000526 	beq	r2,zero,2008d488 <alt_get_errno+0x34>
2008d474:	00800034 	movhi	r2,0
2008d478:	10895a04 	addi	r2,r2,9576
2008d47c:	10800017 	ldw	r2,0(r2)
2008d480:	103ee83a 	callr	r2
2008d484:	00000206 	br	2008d490 <alt_get_errno+0x3c>
2008d488:	00800034 	movhi	r2,0
2008d48c:	10896504 	addi	r2,r2,9620
}
2008d490:	e037883a 	mov	sp,fp
2008d494:	dfc00117 	ldw	ra,4(sp)
2008d498:	df000017 	ldw	fp,0(sp)
2008d49c:	dec00204 	addi	sp,sp,8
2008d4a0:	f800283a 	ret

2008d4a4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
2008d4a4:	defff904 	addi	sp,sp,-28
2008d4a8:	dfc00615 	stw	ra,24(sp)
2008d4ac:	df000515 	stw	fp,20(sp)
2008d4b0:	df000504 	addi	fp,sp,20
2008d4b4:	e13ffd15 	stw	r4,-12(fp)
2008d4b8:	e17ffe15 	stw	r5,-8(fp)
2008d4bc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
2008d4c0:	e0bffd17 	ldw	r2,-12(fp)
2008d4c4:	10000616 	blt	r2,zero,2008d4e0 <read+0x3c>
2008d4c8:	e0bffd17 	ldw	r2,-12(fp)
2008d4cc:	10c00324 	muli	r3,r2,12
2008d4d0:	00800034 	movhi	r2,0
2008d4d4:	10842f04 	addi	r2,r2,4284
2008d4d8:	1885883a 	add	r2,r3,r2
2008d4dc:	00000106 	br	2008d4e4 <read+0x40>
2008d4e0:	0005883a 	mov	r2,zero
2008d4e4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
2008d4e8:	e0bffb17 	ldw	r2,-20(fp)
2008d4ec:	10002226 	beq	r2,zero,2008d578 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
2008d4f0:	e0bffb17 	ldw	r2,-20(fp)
2008d4f4:	10800217 	ldw	r2,8(r2)
2008d4f8:	108000cc 	andi	r2,r2,3
2008d4fc:	10800060 	cmpeqi	r2,r2,1
2008d500:	1000181e 	bne	r2,zero,2008d564 <read+0xc0>
        (fd->dev->read))
2008d504:	e0bffb17 	ldw	r2,-20(fp)
2008d508:	10800017 	ldw	r2,0(r2)
2008d50c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
2008d510:	10001426 	beq	r2,zero,2008d564 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
2008d514:	e0bffb17 	ldw	r2,-20(fp)
2008d518:	10800017 	ldw	r2,0(r2)
2008d51c:	10800517 	ldw	r2,20(r2)
2008d520:	e0ffff17 	ldw	r3,-4(fp)
2008d524:	e13ffb17 	ldw	r4,-20(fp)
2008d528:	e17ffe17 	ldw	r5,-8(fp)
2008d52c:	180d883a 	mov	r6,r3
2008d530:	103ee83a 	callr	r2
2008d534:	e0bffc15 	stw	r2,-16(fp)
2008d538:	e0bffc17 	ldw	r2,-16(fp)
2008d53c:	1000070e 	bge	r2,zero,2008d55c <read+0xb8>
        {
          ALT_ERRNO = -rval;
2008d540:	008d4540 	call	2008d454 <alt_get_errno>
2008d544:	1007883a 	mov	r3,r2
2008d548:	e0bffc17 	ldw	r2,-16(fp)
2008d54c:	0085c83a 	sub	r2,zero,r2
2008d550:	18800015 	stw	r2,0(r3)
          return -1;
2008d554:	00bfffc4 	movi	r2,-1
2008d558:	00000c06 	br	2008d58c <read+0xe8>
        }
        return rval;
2008d55c:	e0bffc17 	ldw	r2,-16(fp)
2008d560:	00000a06 	br	2008d58c <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
2008d564:	008d4540 	call	2008d454 <alt_get_errno>
2008d568:	1007883a 	mov	r3,r2
2008d56c:	00800344 	movi	r2,13
2008d570:	18800015 	stw	r2,0(r3)
2008d574:	00000406 	br	2008d588 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
2008d578:	008d4540 	call	2008d454 <alt_get_errno>
2008d57c:	1007883a 	mov	r3,r2
2008d580:	00801444 	movi	r2,81
2008d584:	18800015 	stw	r2,0(r3)
  }
  return -1;
2008d588:	00bfffc4 	movi	r2,-1
}
2008d58c:	e037883a 	mov	sp,fp
2008d590:	dfc00117 	ldw	ra,4(sp)
2008d594:	df000017 	ldw	fp,0(sp)
2008d598:	dec00204 	addi	sp,sp,8
2008d59c:	f800283a 	ret

2008d5a0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
2008d5a0:	defffe04 	addi	sp,sp,-8
2008d5a4:	df000115 	stw	fp,4(sp)
2008d5a8:	df000104 	addi	fp,sp,4
2008d5ac:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
2008d5b0:	e0bfff17 	ldw	r2,-4(fp)
2008d5b4:	108000d0 	cmplti	r2,r2,3
2008d5b8:	10000d1e 	bne	r2,zero,2008d5f0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
2008d5bc:	00800034 	movhi	r2,0
2008d5c0:	10842f04 	addi	r2,r2,4284
2008d5c4:	e0ffff17 	ldw	r3,-4(fp)
2008d5c8:	18c00324 	muli	r3,r3,12
2008d5cc:	18c00204 	addi	r3,r3,8
2008d5d0:	10c5883a 	add	r2,r2,r3
2008d5d4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
2008d5d8:	00800034 	movhi	r2,0
2008d5dc:	10842f04 	addi	r2,r2,4284
2008d5e0:	e0ffff17 	ldw	r3,-4(fp)
2008d5e4:	18c00324 	muli	r3,r3,12
2008d5e8:	10c5883a 	add	r2,r2,r3
2008d5ec:	10000015 	stw	zero,0(r2)
  }
}
2008d5f0:	e037883a 	mov	sp,fp
2008d5f4:	df000017 	ldw	fp,0(sp)
2008d5f8:	dec00104 	addi	sp,sp,4
2008d5fc:	f800283a 	ret

2008d600 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
2008d600:	defff904 	addi	sp,sp,-28
2008d604:	df000615 	stw	fp,24(sp)
2008d608:	df000604 	addi	fp,sp,24
2008d60c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2008d610:	0005303a 	rdctl	r2,status
2008d614:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2008d618:	e0fffc17 	ldw	r3,-16(fp)
2008d61c:	00bfff84 	movi	r2,-2
2008d620:	1884703a 	and	r2,r3,r2
2008d624:	1001703a 	wrctl	status,r2
  
  return context;
2008d628:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
2008d62c:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
2008d630:	d0a00c17 	ldw	r2,-32720(gp)
2008d634:	10c000c4 	addi	r3,r2,3
2008d638:	00bfff04 	movi	r2,-4
2008d63c:	1884703a 	and	r2,r3,r2
2008d640:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
2008d644:	d0e00c17 	ldw	r3,-32720(gp)
2008d648:	e0bfff17 	ldw	r2,-4(fp)
2008d64c:	1887883a 	add	r3,r3,r2
2008d650:	00880034 	movhi	r2,8192
2008d654:	10800004 	addi	r2,r2,0
2008d658:	10c0062e 	bgeu	r2,r3,2008d674 <sbrk+0x74>
2008d65c:	e0bffa17 	ldw	r2,-24(fp)
2008d660:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2008d664:	e0bffd17 	ldw	r2,-12(fp)
2008d668:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
2008d66c:	00bfffc4 	movi	r2,-1
2008d670:	00000b06 	br	2008d6a0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
2008d674:	d0a00c17 	ldw	r2,-32720(gp)
2008d678:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
2008d67c:	d0e00c17 	ldw	r3,-32720(gp)
2008d680:	e0bfff17 	ldw	r2,-4(fp)
2008d684:	1885883a 	add	r2,r3,r2
2008d688:	d0a00c15 	stw	r2,-32720(gp)
2008d68c:	e0bffa17 	ldw	r2,-24(fp)
2008d690:	e0bffe15 	stw	r2,-8(fp)
2008d694:	e0bffe17 	ldw	r2,-8(fp)
2008d698:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
2008d69c:	e0bffb17 	ldw	r2,-20(fp)
} 
2008d6a0:	e037883a 	mov	sp,fp
2008d6a4:	df000017 	ldw	fp,0(sp)
2008d6a8:	dec00104 	addi	sp,sp,4
2008d6ac:	f800283a 	ret

2008d6b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2008d6b0:	defffe04 	addi	sp,sp,-8
2008d6b4:	dfc00115 	stw	ra,4(sp)
2008d6b8:	df000015 	stw	fp,0(sp)
2008d6bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2008d6c0:	00800034 	movhi	r2,0
2008d6c4:	10895a04 	addi	r2,r2,9576
2008d6c8:	10800017 	ldw	r2,0(r2)
2008d6cc:	10000526 	beq	r2,zero,2008d6e4 <alt_get_errno+0x34>
2008d6d0:	00800034 	movhi	r2,0
2008d6d4:	10895a04 	addi	r2,r2,9576
2008d6d8:	10800017 	ldw	r2,0(r2)
2008d6dc:	103ee83a 	callr	r2
2008d6e0:	00000206 	br	2008d6ec <alt_get_errno+0x3c>
2008d6e4:	00800034 	movhi	r2,0
2008d6e8:	10896504 	addi	r2,r2,9620
}
2008d6ec:	e037883a 	mov	sp,fp
2008d6f0:	dfc00117 	ldw	ra,4(sp)
2008d6f4:	df000017 	ldw	fp,0(sp)
2008d6f8:	dec00204 	addi	sp,sp,8
2008d6fc:	f800283a 	ret

2008d700 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
2008d700:	defff904 	addi	sp,sp,-28
2008d704:	dfc00615 	stw	ra,24(sp)
2008d708:	df000515 	stw	fp,20(sp)
2008d70c:	df000504 	addi	fp,sp,20
2008d710:	e13ffd15 	stw	r4,-12(fp)
2008d714:	e17ffe15 	stw	r5,-8(fp)
2008d718:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
2008d71c:	e0bffd17 	ldw	r2,-12(fp)
2008d720:	10000616 	blt	r2,zero,2008d73c <write+0x3c>
2008d724:	e0bffd17 	ldw	r2,-12(fp)
2008d728:	10c00324 	muli	r3,r2,12
2008d72c:	00800034 	movhi	r2,0
2008d730:	10842f04 	addi	r2,r2,4284
2008d734:	1885883a 	add	r2,r3,r2
2008d738:	00000106 	br	2008d740 <write+0x40>
2008d73c:	0005883a 	mov	r2,zero
2008d740:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
2008d744:	e0bffb17 	ldw	r2,-20(fp)
2008d748:	10002126 	beq	r2,zero,2008d7d0 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
2008d74c:	e0bffb17 	ldw	r2,-20(fp)
2008d750:	10800217 	ldw	r2,8(r2)
2008d754:	108000cc 	andi	r2,r2,3
2008d758:	10001826 	beq	r2,zero,2008d7bc <write+0xbc>
2008d75c:	e0bffb17 	ldw	r2,-20(fp)
2008d760:	10800017 	ldw	r2,0(r2)
2008d764:	10800617 	ldw	r2,24(r2)
2008d768:	10001426 	beq	r2,zero,2008d7bc <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
2008d76c:	e0bffb17 	ldw	r2,-20(fp)
2008d770:	10800017 	ldw	r2,0(r2)
2008d774:	10800617 	ldw	r2,24(r2)
2008d778:	e0ffff17 	ldw	r3,-4(fp)
2008d77c:	e13ffb17 	ldw	r4,-20(fp)
2008d780:	e17ffe17 	ldw	r5,-8(fp)
2008d784:	180d883a 	mov	r6,r3
2008d788:	103ee83a 	callr	r2
2008d78c:	e0bffc15 	stw	r2,-16(fp)
2008d790:	e0bffc17 	ldw	r2,-16(fp)
2008d794:	1000070e 	bge	r2,zero,2008d7b4 <write+0xb4>
      {
        ALT_ERRNO = -rval;
2008d798:	008d6b00 	call	2008d6b0 <alt_get_errno>
2008d79c:	1007883a 	mov	r3,r2
2008d7a0:	e0bffc17 	ldw	r2,-16(fp)
2008d7a4:	0085c83a 	sub	r2,zero,r2
2008d7a8:	18800015 	stw	r2,0(r3)
        return -1;
2008d7ac:	00bfffc4 	movi	r2,-1
2008d7b0:	00000c06 	br	2008d7e4 <write+0xe4>
      }
      return rval;
2008d7b4:	e0bffc17 	ldw	r2,-16(fp)
2008d7b8:	00000a06 	br	2008d7e4 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
2008d7bc:	008d6b00 	call	2008d6b0 <alt_get_errno>
2008d7c0:	1007883a 	mov	r3,r2
2008d7c4:	00800344 	movi	r2,13
2008d7c8:	18800015 	stw	r2,0(r3)
2008d7cc:	00000406 	br	2008d7e0 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
2008d7d0:	008d6b00 	call	2008d6b0 <alt_get_errno>
2008d7d4:	1007883a 	mov	r3,r2
2008d7d8:	00801444 	movi	r2,81
2008d7dc:	18800015 	stw	r2,0(r3)
  }
  return -1;
2008d7e0:	00bfffc4 	movi	r2,-1
}
2008d7e4:	e037883a 	mov	sp,fp
2008d7e8:	dfc00117 	ldw	ra,4(sp)
2008d7ec:	df000017 	ldw	fp,0(sp)
2008d7f0:	dec00204 	addi	sp,sp,8
2008d7f4:	f800283a 	ret

2008d7f8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
2008d7f8:	defffd04 	addi	sp,sp,-12
2008d7fc:	dfc00215 	stw	ra,8(sp)
2008d800:	df000115 	stw	fp,4(sp)
2008d804:	df000104 	addi	fp,sp,4
2008d808:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
2008d80c:	e13fff17 	ldw	r4,-4(fp)
2008d810:	01400034 	movhi	r5,0
2008d814:	29495704 	addi	r5,r5,9564
2008d818:	00906b80 	call	200906b8 <alt_dev_llist_insert>
}
2008d81c:	e037883a 	mov	sp,fp
2008d820:	dfc00117 	ldw	ra,4(sp)
2008d824:	df000017 	ldw	fp,0(sp)
2008d828:	dec00204 	addi	sp,sp,8
2008d82c:	f800283a 	ret

2008d830 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
2008d830:	defffd04 	addi	sp,sp,-12
2008d834:	dfc00215 	stw	ra,8(sp)
2008d838:	df000115 	stw	fp,4(sp)
2008d83c:	df000104 	addi	fp,sp,4
2008d840:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
2008d844:	00913580 	call	20091358 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
2008d848:	00800044 	movi	r2,1
2008d84c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
2008d850:	e037883a 	mov	sp,fp
2008d854:	dfc00117 	ldw	ra,4(sp)
2008d858:	df000017 	ldw	fp,0(sp)
2008d85c:	dec00204 	addi	sp,sp,8
2008d860:	f800283a 	ret

2008d864 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
2008d864:	defffe04 	addi	sp,sp,-8
2008d868:	dfc00115 	stw	ra,4(sp)
2008d86c:	df000015 	stw	fp,0(sp)
2008d870:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
2008d874:	01080434 	movhi	r4,8208
2008d878:	21052804 	addi	r4,r4,5280
2008d87c:	000b883a 	mov	r5,zero
2008d880:	000d883a 	mov	r6,zero
2008d884:	01c0fa04 	movi	r7,1000
2008d888:	008e4b80 	call	2008e4b8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
2008d88c:	01000034 	movhi	r4,0
2008d890:	21049904 	addi	r4,r4,4708
2008d894:	000b883a 	mov	r5,zero
2008d898:	01800044 	movi	r6,1
2008d89c:	008db5c0 	call	2008db5c <altera_avalon_jtag_uart_init>
2008d8a0:	01000034 	movhi	r4,0
2008d8a4:	21048f04 	addi	r4,r4,4668
2008d8a8:	008d7f80 	call	2008d7f8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
2008d8ac:	0001883a 	nop
    ALTERA_MSGDMA_INIT ( CB_OUT, Cb_out);
2008d8b0:	00800034 	movhi	r2,0
2008d8b4:	1088a704 	addi	r2,r2,8860
2008d8b8:	10c00717 	ldw	r3,28(r2)
2008d8bc:	00800034 	movhi	r2,0
2008d8c0:	1088a704 	addi	r2,r2,8860
2008d8c4:	10800817 	ldw	r2,32(r2)
2008d8c8:	01000034 	movhi	r4,0
2008d8cc:	2108a704 	addi	r4,r4,8860
2008d8d0:	180b883a 	mov	r5,r3
2008d8d4:	100d883a 	mov	r6,r2
2008d8d8:	00901200 	call	20090120 <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( CR_OUT, Cr_out);
2008d8dc:	00800034 	movhi	r2,0
2008d8e0:	1088bf04 	addi	r2,r2,8956
2008d8e4:	10c00717 	ldw	r3,28(r2)
2008d8e8:	00800034 	movhi	r2,0
2008d8ec:	1088bf04 	addi	r2,r2,8956
2008d8f0:	10800817 	ldw	r2,32(r2)
2008d8f4:	01000034 	movhi	r4,0
2008d8f8:	2108bf04 	addi	r4,r4,8956
2008d8fc:	180b883a 	mov	r5,r3
2008d900:	100d883a 	mov	r6,r2
2008d904:	00901200 	call	20090120 <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( FROM_IDCT_HWACEL, from_idct_hwacel);
2008d908:	00800034 	movhi	r2,0
2008d90c:	1088d704 	addi	r2,r2,9052
2008d910:	10c00717 	ldw	r3,28(r2)
2008d914:	00800034 	movhi	r2,0
2008d918:	1088d704 	addi	r2,r2,9052
2008d91c:	10800817 	ldw	r2,32(r2)
2008d920:	01000034 	movhi	r4,0
2008d924:	2108d704 	addi	r4,r4,9052
2008d928:	180b883a 	mov	r5,r3
2008d92c:	100d883a 	mov	r6,r2
2008d930:	00901200 	call	20090120 <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( MSGDMA_0, msgdma_0);
2008d934:	00800034 	movhi	r2,0
2008d938:	1088ef04 	addi	r2,r2,9148
2008d93c:	10c00717 	ldw	r3,28(r2)
2008d940:	00800034 	movhi	r2,0
2008d944:	1088ef04 	addi	r2,r2,9148
2008d948:	10800817 	ldw	r2,32(r2)
2008d94c:	01000034 	movhi	r4,0
2008d950:	2108ef04 	addi	r4,r4,9148
2008d954:	180b883a 	mov	r5,r3
2008d958:	100d883a 	mov	r6,r2
2008d95c:	00901200 	call	20090120 <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( TO_IDCT_HWACEL, to_idct_hwacel);
2008d960:	00800034 	movhi	r2,0
2008d964:	10890704 	addi	r2,r2,9244
2008d968:	10c00717 	ldw	r3,28(r2)
2008d96c:	00800034 	movhi	r2,0
2008d970:	10890704 	addi	r2,r2,9244
2008d974:	10800817 	ldw	r2,32(r2)
2008d978:	01000034 	movhi	r4,0
2008d97c:	21090704 	addi	r4,r4,9244
2008d980:	180b883a 	mov	r5,r3
2008d984:	100d883a 	mov	r6,r2
2008d988:	00901200 	call	20090120 <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( VIDEO_DMA, video_dma);
2008d98c:	00800034 	movhi	r2,0
2008d990:	10891f04 	addi	r2,r2,9340
2008d994:	10c00717 	ldw	r3,28(r2)
2008d998:	00800034 	movhi	r2,0
2008d99c:	10891f04 	addi	r2,r2,9340
2008d9a0:	10800817 	ldw	r2,32(r2)
2008d9a4:	01000034 	movhi	r4,0
2008d9a8:	21091f04 	addi	r4,r4,9340
2008d9ac:	180b883a 	mov	r5,r3
2008d9b0:	100d883a 	mov	r6,r2
2008d9b4:	00901200 	call	20090120 <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( Y_OUT, Y_out);
2008d9b8:	00800034 	movhi	r2,0
2008d9bc:	10893704 	addi	r2,r2,9436
2008d9c0:	10c00717 	ldw	r3,28(r2)
2008d9c4:	00800034 	movhi	r2,0
2008d9c8:	10893704 	addi	r2,r2,9436
2008d9cc:	10800817 	ldw	r2,32(r2)
2008d9d0:	01000034 	movhi	r4,0
2008d9d4:	21093704 	addi	r4,r4,9436
2008d9d8:	180b883a 	mov	r5,r3
2008d9dc:	100d883a 	mov	r6,r2
2008d9e0:	00901200 	call	20090120 <alt_msgdma_init>
}
2008d9e4:	e037883a 	mov	sp,fp
2008d9e8:	dfc00117 	ldw	ra,4(sp)
2008d9ec:	df000017 	ldw	fp,0(sp)
2008d9f0:	dec00204 	addi	sp,sp,8
2008d9f4:	f800283a 	ret

2008d9f8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
2008d9f8:	defffa04 	addi	sp,sp,-24
2008d9fc:	dfc00515 	stw	ra,20(sp)
2008da00:	df000415 	stw	fp,16(sp)
2008da04:	df000404 	addi	fp,sp,16
2008da08:	e13ffd15 	stw	r4,-12(fp)
2008da0c:	e17ffe15 	stw	r5,-8(fp)
2008da10:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
2008da14:	e0bffd17 	ldw	r2,-12(fp)
2008da18:	10800017 	ldw	r2,0(r2)
2008da1c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
2008da20:	e0bffc17 	ldw	r2,-16(fp)
2008da24:	10c00a04 	addi	r3,r2,40
2008da28:	e0bffd17 	ldw	r2,-12(fp)
2008da2c:	10800217 	ldw	r2,8(r2)
2008da30:	1809883a 	mov	r4,r3
2008da34:	e17ffe17 	ldw	r5,-8(fp)
2008da38:	e1bfff17 	ldw	r6,-4(fp)
2008da3c:	100f883a 	mov	r7,r2
2008da40:	008e0200 	call	2008e020 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
2008da44:	e037883a 	mov	sp,fp
2008da48:	dfc00117 	ldw	ra,4(sp)
2008da4c:	df000017 	ldw	fp,0(sp)
2008da50:	dec00204 	addi	sp,sp,8
2008da54:	f800283a 	ret

2008da58 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
2008da58:	defffa04 	addi	sp,sp,-24
2008da5c:	dfc00515 	stw	ra,20(sp)
2008da60:	df000415 	stw	fp,16(sp)
2008da64:	df000404 	addi	fp,sp,16
2008da68:	e13ffd15 	stw	r4,-12(fp)
2008da6c:	e17ffe15 	stw	r5,-8(fp)
2008da70:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
2008da74:	e0bffd17 	ldw	r2,-12(fp)
2008da78:	10800017 	ldw	r2,0(r2)
2008da7c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
2008da80:	e0bffc17 	ldw	r2,-16(fp)
2008da84:	10c00a04 	addi	r3,r2,40
2008da88:	e0bffd17 	ldw	r2,-12(fp)
2008da8c:	10800217 	ldw	r2,8(r2)
2008da90:	1809883a 	mov	r4,r3
2008da94:	e17ffe17 	ldw	r5,-8(fp)
2008da98:	e1bfff17 	ldw	r6,-4(fp)
2008da9c:	100f883a 	mov	r7,r2
2008daa0:	008e22c0 	call	2008e22c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
2008daa4:	e037883a 	mov	sp,fp
2008daa8:	dfc00117 	ldw	ra,4(sp)
2008daac:	df000017 	ldw	fp,0(sp)
2008dab0:	dec00204 	addi	sp,sp,8
2008dab4:	f800283a 	ret

2008dab8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
2008dab8:	defffc04 	addi	sp,sp,-16
2008dabc:	dfc00315 	stw	ra,12(sp)
2008dac0:	df000215 	stw	fp,8(sp)
2008dac4:	df000204 	addi	fp,sp,8
2008dac8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
2008dacc:	e0bfff17 	ldw	r2,-4(fp)
2008dad0:	10800017 	ldw	r2,0(r2)
2008dad4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
2008dad8:	e0bffe17 	ldw	r2,-8(fp)
2008dadc:	10c00a04 	addi	r3,r2,40
2008dae0:	e0bfff17 	ldw	r2,-4(fp)
2008dae4:	10800217 	ldw	r2,8(r2)
2008dae8:	1809883a 	mov	r4,r3
2008daec:	100b883a 	mov	r5,r2
2008daf0:	008decc0 	call	2008decc <altera_avalon_jtag_uart_close>
}
2008daf4:	e037883a 	mov	sp,fp
2008daf8:	dfc00117 	ldw	ra,4(sp)
2008dafc:	df000017 	ldw	fp,0(sp)
2008db00:	dec00204 	addi	sp,sp,8
2008db04:	f800283a 	ret

2008db08 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
2008db08:	defffa04 	addi	sp,sp,-24
2008db0c:	dfc00515 	stw	ra,20(sp)
2008db10:	df000415 	stw	fp,16(sp)
2008db14:	df000404 	addi	fp,sp,16
2008db18:	e13ffd15 	stw	r4,-12(fp)
2008db1c:	e17ffe15 	stw	r5,-8(fp)
2008db20:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
2008db24:	e0bffd17 	ldw	r2,-12(fp)
2008db28:	10800017 	ldw	r2,0(r2)
2008db2c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
2008db30:	e0bffc17 	ldw	r2,-16(fp)
2008db34:	10800a04 	addi	r2,r2,40
2008db38:	1009883a 	mov	r4,r2
2008db3c:	e17ffe17 	ldw	r5,-8(fp)
2008db40:	e1bfff17 	ldw	r6,-4(fp)
2008db44:	008df340 	call	2008df34 <altera_avalon_jtag_uart_ioctl>
}
2008db48:	e037883a 	mov	sp,fp
2008db4c:	dfc00117 	ldw	ra,4(sp)
2008db50:	df000017 	ldw	fp,0(sp)
2008db54:	dec00204 	addi	sp,sp,8
2008db58:	f800283a 	ret

2008db5c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
2008db5c:	defffa04 	addi	sp,sp,-24
2008db60:	dfc00515 	stw	ra,20(sp)
2008db64:	df000415 	stw	fp,16(sp)
2008db68:	df000404 	addi	fp,sp,16
2008db6c:	e13ffd15 	stw	r4,-12(fp)
2008db70:	e17ffe15 	stw	r5,-8(fp)
2008db74:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
2008db78:	e0bffd17 	ldw	r2,-12(fp)
2008db7c:	00c00044 	movi	r3,1
2008db80:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
2008db84:	e0bffd17 	ldw	r2,-12(fp)
2008db88:	10800017 	ldw	r2,0(r2)
2008db8c:	10800104 	addi	r2,r2,4
2008db90:	1007883a 	mov	r3,r2
2008db94:	e0bffd17 	ldw	r2,-12(fp)
2008db98:	10800817 	ldw	r2,32(r2)
2008db9c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
2008dba0:	e0fffe17 	ldw	r3,-8(fp)
2008dba4:	e0bfff17 	ldw	r2,-4(fp)
2008dba8:	d8000015 	stw	zero,0(sp)
2008dbac:	1809883a 	mov	r4,r3
2008dbb0:	100b883a 	mov	r5,r2
2008dbb4:	01880274 	movhi	r6,8201
2008dbb8:	31b70804 	addi	r6,r6,-9184
2008dbbc:	e1fffd17 	ldw	r7,-12(fp)
2008dbc0:	00908d40 	call	200908d4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
2008dbc4:	e0bffd17 	ldw	r2,-12(fp)
2008dbc8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
2008dbcc:	e0bffd17 	ldw	r2,-12(fp)
2008dbd0:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
2008dbd4:	00800034 	movhi	r2,0
2008dbd8:	10896d04 	addi	r2,r2,9652
2008dbdc:	10800017 	ldw	r2,0(r2)
2008dbe0:	1809883a 	mov	r4,r3
2008dbe4:	100b883a 	mov	r5,r2
2008dbe8:	01880274 	movhi	r6,8201
2008dbec:	31b78904 	addi	r6,r6,-8668
2008dbf0:	e1fffd17 	ldw	r7,-12(fp)
2008dbf4:	00903d00 	call	200903d0 <alt_alarm_start>
2008dbf8:	1000040e 	bge	r2,zero,2008dc0c <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
2008dbfc:	e0fffd17 	ldw	r3,-12(fp)
2008dc00:	00a00034 	movhi	r2,32768
2008dc04:	10bfffc4 	addi	r2,r2,-1
2008dc08:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
2008dc0c:	e037883a 	mov	sp,fp
2008dc10:	dfc00117 	ldw	ra,4(sp)
2008dc14:	df000017 	ldw	fp,0(sp)
2008dc18:	dec00204 	addi	sp,sp,8
2008dc1c:	f800283a 	ret

2008dc20 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
2008dc20:	defff804 	addi	sp,sp,-32
2008dc24:	df000715 	stw	fp,28(sp)
2008dc28:	df000704 	addi	fp,sp,28
2008dc2c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
2008dc30:	e0bfff17 	ldw	r2,-4(fp)
2008dc34:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
2008dc38:	e0bffb17 	ldw	r2,-20(fp)
2008dc3c:	10800017 	ldw	r2,0(r2)
2008dc40:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
2008dc44:	e0bffc17 	ldw	r2,-16(fp)
2008dc48:	10800104 	addi	r2,r2,4
2008dc4c:	10800037 	ldwio	r2,0(r2)
2008dc50:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
2008dc54:	e0bffd17 	ldw	r2,-12(fp)
2008dc58:	1080c00c 	andi	r2,r2,768
2008dc5c:	1000011e 	bne	r2,zero,2008dc64 <altera_avalon_jtag_uart_irq+0x44>
      break;
2008dc60:	00006c06 	br	2008de14 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
2008dc64:	e0bffd17 	ldw	r2,-12(fp)
2008dc68:	1080400c 	andi	r2,r2,256
2008dc6c:	10003426 	beq	r2,zero,2008dd40 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
2008dc70:	00800074 	movhi	r2,1
2008dc74:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
2008dc78:	e0bffb17 	ldw	r2,-20(fp)
2008dc7c:	10800a17 	ldw	r2,40(r2)
2008dc80:	10800044 	addi	r2,r2,1
2008dc84:	1081ffcc 	andi	r2,r2,2047
2008dc88:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
2008dc8c:	e0bffb17 	ldw	r2,-20(fp)
2008dc90:	10c00b17 	ldw	r3,44(r2)
2008dc94:	e0bffe17 	ldw	r2,-8(fp)
2008dc98:	1880011e 	bne	r3,r2,2008dca0 <altera_avalon_jtag_uart_irq+0x80>
          break;
2008dc9c:	00001606 	br	2008dcf8 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
2008dca0:	e0bffc17 	ldw	r2,-16(fp)
2008dca4:	10800037 	ldwio	r2,0(r2)
2008dca8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
2008dcac:	e0bff917 	ldw	r2,-28(fp)
2008dcb0:	10a0000c 	andi	r2,r2,32768
2008dcb4:	1000011e 	bne	r2,zero,2008dcbc <altera_avalon_jtag_uart_irq+0x9c>
          break;
2008dcb8:	00000f06 	br	2008dcf8 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
2008dcbc:	e0bffb17 	ldw	r2,-20(fp)
2008dcc0:	10800a17 	ldw	r2,40(r2)
2008dcc4:	e0fff917 	ldw	r3,-28(fp)
2008dcc8:	1809883a 	mov	r4,r3
2008dccc:	e0fffb17 	ldw	r3,-20(fp)
2008dcd0:	1885883a 	add	r2,r3,r2
2008dcd4:	10800e04 	addi	r2,r2,56
2008dcd8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
2008dcdc:	e0bffb17 	ldw	r2,-20(fp)
2008dce0:	10800a17 	ldw	r2,40(r2)
2008dce4:	10800044 	addi	r2,r2,1
2008dce8:	10c1ffcc 	andi	r3,r2,2047
2008dcec:	e0bffb17 	ldw	r2,-20(fp)
2008dcf0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
2008dcf4:	003fe006 	br	2008dc78 <__flash_rwdata_start+0xffffbe7c>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
2008dcf8:	e0bff917 	ldw	r2,-28(fp)
2008dcfc:	10bfffec 	andhi	r2,r2,65535
2008dd00:	10000f26 	beq	r2,zero,2008dd40 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
2008dd04:	e0bffb17 	ldw	r2,-20(fp)
2008dd08:	10c00817 	ldw	r3,32(r2)
2008dd0c:	00bfff84 	movi	r2,-2
2008dd10:	1886703a 	and	r3,r3,r2
2008dd14:	e0bffb17 	ldw	r2,-20(fp)
2008dd18:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
2008dd1c:	e0bffc17 	ldw	r2,-16(fp)
2008dd20:	10800104 	addi	r2,r2,4
2008dd24:	1007883a 	mov	r3,r2
2008dd28:	e0bffb17 	ldw	r2,-20(fp)
2008dd2c:	10800817 	ldw	r2,32(r2)
2008dd30:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
2008dd34:	e0bffc17 	ldw	r2,-16(fp)
2008dd38:	10800104 	addi	r2,r2,4
2008dd3c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
2008dd40:	e0bffd17 	ldw	r2,-12(fp)
2008dd44:	1080800c 	andi	r2,r2,512
2008dd48:	10003126 	beq	r2,zero,2008de10 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
2008dd4c:	e0bffd17 	ldw	r2,-12(fp)
2008dd50:	1004d43a 	srli	r2,r2,16
2008dd54:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
2008dd58:	00001406 	br	2008ddac <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
2008dd5c:	e0bffc17 	ldw	r2,-16(fp)
2008dd60:	e0fffb17 	ldw	r3,-20(fp)
2008dd64:	18c00d17 	ldw	r3,52(r3)
2008dd68:	e13ffb17 	ldw	r4,-20(fp)
2008dd6c:	20c7883a 	add	r3,r4,r3
2008dd70:	18c20e04 	addi	r3,r3,2104
2008dd74:	18c00003 	ldbu	r3,0(r3)
2008dd78:	18c03fcc 	andi	r3,r3,255
2008dd7c:	18c0201c 	xori	r3,r3,128
2008dd80:	18ffe004 	addi	r3,r3,-128
2008dd84:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
2008dd88:	e0bffb17 	ldw	r2,-20(fp)
2008dd8c:	10800d17 	ldw	r2,52(r2)
2008dd90:	10800044 	addi	r2,r2,1
2008dd94:	10c1ffcc 	andi	r3,r2,2047
2008dd98:	e0bffb17 	ldw	r2,-20(fp)
2008dd9c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
2008dda0:	e0bffa17 	ldw	r2,-24(fp)
2008dda4:	10bfffc4 	addi	r2,r2,-1
2008dda8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
2008ddac:	e0bffa17 	ldw	r2,-24(fp)
2008ddb0:	10000526 	beq	r2,zero,2008ddc8 <altera_avalon_jtag_uart_irq+0x1a8>
2008ddb4:	e0bffb17 	ldw	r2,-20(fp)
2008ddb8:	10c00d17 	ldw	r3,52(r2)
2008ddbc:	e0bffb17 	ldw	r2,-20(fp)
2008ddc0:	10800c17 	ldw	r2,48(r2)
2008ddc4:	18bfe51e 	bne	r3,r2,2008dd5c <__flash_rwdata_start+0xffffbf60>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
2008ddc8:	e0bffa17 	ldw	r2,-24(fp)
2008ddcc:	10001026 	beq	r2,zero,2008de10 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
2008ddd0:	e0bffb17 	ldw	r2,-20(fp)
2008ddd4:	10c00817 	ldw	r3,32(r2)
2008ddd8:	00bfff44 	movi	r2,-3
2008dddc:	1886703a 	and	r3,r3,r2
2008dde0:	e0bffb17 	ldw	r2,-20(fp)
2008dde4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
2008dde8:	e0bffb17 	ldw	r2,-20(fp)
2008ddec:	10800017 	ldw	r2,0(r2)
2008ddf0:	10800104 	addi	r2,r2,4
2008ddf4:	1007883a 	mov	r3,r2
2008ddf8:	e0bffb17 	ldw	r2,-20(fp)
2008ddfc:	10800817 	ldw	r2,32(r2)
2008de00:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
2008de04:	e0bffc17 	ldw	r2,-16(fp)
2008de08:	10800104 	addi	r2,r2,4
2008de0c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
2008de10:	003f8c06 	br	2008dc44 <__flash_rwdata_start+0xffffbe48>
}
2008de14:	e037883a 	mov	sp,fp
2008de18:	df000017 	ldw	fp,0(sp)
2008de1c:	dec00104 	addi	sp,sp,4
2008de20:	f800283a 	ret

2008de24 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
2008de24:	defff804 	addi	sp,sp,-32
2008de28:	df000715 	stw	fp,28(sp)
2008de2c:	df000704 	addi	fp,sp,28
2008de30:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
2008de34:	e0bffb17 	ldw	r2,-20(fp)
2008de38:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
2008de3c:	e0bff917 	ldw	r2,-28(fp)
2008de40:	10800017 	ldw	r2,0(r2)
2008de44:	10800104 	addi	r2,r2,4
2008de48:	10800037 	ldwio	r2,0(r2)
2008de4c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
2008de50:	e0bffa17 	ldw	r2,-24(fp)
2008de54:	1081000c 	andi	r2,r2,1024
2008de58:	10000b26 	beq	r2,zero,2008de88 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
2008de5c:	e0bff917 	ldw	r2,-28(fp)
2008de60:	10800017 	ldw	r2,0(r2)
2008de64:	10800104 	addi	r2,r2,4
2008de68:	1007883a 	mov	r3,r2
2008de6c:	e0bff917 	ldw	r2,-28(fp)
2008de70:	10800817 	ldw	r2,32(r2)
2008de74:	10810014 	ori	r2,r2,1024
2008de78:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
2008de7c:	e0bff917 	ldw	r2,-28(fp)
2008de80:	10000915 	stw	zero,36(r2)
2008de84:	00000a06 	br	2008deb0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
2008de88:	e0bff917 	ldw	r2,-28(fp)
2008de8c:	10c00917 	ldw	r3,36(r2)
2008de90:	00a00034 	movhi	r2,32768
2008de94:	10bfff04 	addi	r2,r2,-4
2008de98:	10c00536 	bltu	r2,r3,2008deb0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
2008de9c:	e0bff917 	ldw	r2,-28(fp)
2008dea0:	10800917 	ldw	r2,36(r2)
2008dea4:	10c00044 	addi	r3,r2,1
2008dea8:	e0bff917 	ldw	r2,-28(fp)
2008deac:	10c00915 	stw	r3,36(r2)
2008deb0:	00800034 	movhi	r2,0
2008deb4:	10896d04 	addi	r2,r2,9652
2008deb8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
2008debc:	e037883a 	mov	sp,fp
2008dec0:	df000017 	ldw	fp,0(sp)
2008dec4:	dec00104 	addi	sp,sp,4
2008dec8:	f800283a 	ret

2008decc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
2008decc:	defffd04 	addi	sp,sp,-12
2008ded0:	df000215 	stw	fp,8(sp)
2008ded4:	df000204 	addi	fp,sp,8
2008ded8:	e13ffe15 	stw	r4,-8(fp)
2008dedc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
2008dee0:	00000506 	br	2008def8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
2008dee4:	e0bfff17 	ldw	r2,-4(fp)
2008dee8:	1090000c 	andi	r2,r2,16384
2008deec:	10000226 	beq	r2,zero,2008def8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
2008def0:	00bffd44 	movi	r2,-11
2008def4:	00000b06 	br	2008df24 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
2008def8:	e0bffe17 	ldw	r2,-8(fp)
2008defc:	10c00d17 	ldw	r3,52(r2)
2008df00:	e0bffe17 	ldw	r2,-8(fp)
2008df04:	10800c17 	ldw	r2,48(r2)
2008df08:	18800526 	beq	r3,r2,2008df20 <altera_avalon_jtag_uart_close+0x54>
2008df0c:	e0bffe17 	ldw	r2,-8(fp)
2008df10:	10c00917 	ldw	r3,36(r2)
2008df14:	e0bffe17 	ldw	r2,-8(fp)
2008df18:	10800117 	ldw	r2,4(r2)
2008df1c:	18bff136 	bltu	r3,r2,2008dee4 <__flash_rwdata_start+0xffffc0e8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
2008df20:	0005883a 	mov	r2,zero
}
2008df24:	e037883a 	mov	sp,fp
2008df28:	df000017 	ldw	fp,0(sp)
2008df2c:	dec00104 	addi	sp,sp,4
2008df30:	f800283a 	ret

2008df34 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
2008df34:	defffa04 	addi	sp,sp,-24
2008df38:	df000515 	stw	fp,20(sp)
2008df3c:	df000504 	addi	fp,sp,20
2008df40:	e13ffd15 	stw	r4,-12(fp)
2008df44:	e17ffe15 	stw	r5,-8(fp)
2008df48:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
2008df4c:	00bff9c4 	movi	r2,-25
2008df50:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
2008df54:	e0bffe17 	ldw	r2,-8(fp)
2008df58:	10da8060 	cmpeqi	r3,r2,27137
2008df5c:	1800031e 	bne	r3,zero,2008df6c <altera_avalon_jtag_uart_ioctl+0x38>
2008df60:	109a80a0 	cmpeqi	r2,r2,27138
2008df64:	1000191e 	bne	r2,zero,2008dfcc <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
2008df68:	00002806 	br	2008e00c <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
2008df6c:	e0bffd17 	ldw	r2,-12(fp)
2008df70:	10c00117 	ldw	r3,4(r2)
2008df74:	00a00034 	movhi	r2,32768
2008df78:	10bfffc4 	addi	r2,r2,-1
2008df7c:	18801226 	beq	r3,r2,2008dfc8 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
2008df80:	e0bfff17 	ldw	r2,-4(fp)
2008df84:	10800017 	ldw	r2,0(r2)
2008df88:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
2008df8c:	e0bffc17 	ldw	r2,-16(fp)
2008df90:	10800090 	cmplti	r2,r2,2
2008df94:	1000061e 	bne	r2,zero,2008dfb0 <altera_avalon_jtag_uart_ioctl+0x7c>
2008df98:	e0fffc17 	ldw	r3,-16(fp)
2008df9c:	00a00034 	movhi	r2,32768
2008dfa0:	10bfffc4 	addi	r2,r2,-1
2008dfa4:	18800226 	beq	r3,r2,2008dfb0 <altera_avalon_jtag_uart_ioctl+0x7c>
2008dfa8:	e0bffc17 	ldw	r2,-16(fp)
2008dfac:	00000206 	br	2008dfb8 <altera_avalon_jtag_uart_ioctl+0x84>
2008dfb0:	00a00034 	movhi	r2,32768
2008dfb4:	10bfff84 	addi	r2,r2,-2
2008dfb8:	e0fffd17 	ldw	r3,-12(fp)
2008dfbc:	18800115 	stw	r2,4(r3)
      rc = 0;
2008dfc0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
2008dfc4:	00001106 	br	2008e00c <altera_avalon_jtag_uart_ioctl+0xd8>
2008dfc8:	00001006 	br	2008e00c <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
2008dfcc:	e0bffd17 	ldw	r2,-12(fp)
2008dfd0:	10c00117 	ldw	r3,4(r2)
2008dfd4:	00a00034 	movhi	r2,32768
2008dfd8:	10bfffc4 	addi	r2,r2,-1
2008dfdc:	18800a26 	beq	r3,r2,2008e008 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
2008dfe0:	e0bffd17 	ldw	r2,-12(fp)
2008dfe4:	10c00917 	ldw	r3,36(r2)
2008dfe8:	e0bffd17 	ldw	r2,-12(fp)
2008dfec:	10800117 	ldw	r2,4(r2)
2008dff0:	1885803a 	cmpltu	r2,r3,r2
2008dff4:	10c03fcc 	andi	r3,r2,255
2008dff8:	e0bfff17 	ldw	r2,-4(fp)
2008dffc:	10c00015 	stw	r3,0(r2)
      rc = 0;
2008e000:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
2008e004:	00000006 	br	2008e008 <altera_avalon_jtag_uart_ioctl+0xd4>
2008e008:	0001883a 	nop

  default:
    break;
  }

  return rc;
2008e00c:	e0bffb17 	ldw	r2,-20(fp)
}
2008e010:	e037883a 	mov	sp,fp
2008e014:	df000017 	ldw	fp,0(sp)
2008e018:	dec00104 	addi	sp,sp,4
2008e01c:	f800283a 	ret

2008e020 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
2008e020:	defff304 	addi	sp,sp,-52
2008e024:	dfc00c15 	stw	ra,48(sp)
2008e028:	df000b15 	stw	fp,44(sp)
2008e02c:	df000b04 	addi	fp,sp,44
2008e030:	e13ffc15 	stw	r4,-16(fp)
2008e034:	e17ffd15 	stw	r5,-12(fp)
2008e038:	e1bffe15 	stw	r6,-8(fp)
2008e03c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
2008e040:	e0bffd17 	ldw	r2,-12(fp)
2008e044:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
2008e048:	00004906 	br	2008e170 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
2008e04c:	e0bffc17 	ldw	r2,-16(fp)
2008e050:	10800a17 	ldw	r2,40(r2)
2008e054:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
2008e058:	e0bffc17 	ldw	r2,-16(fp)
2008e05c:	10800b17 	ldw	r2,44(r2)
2008e060:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
2008e064:	e0fff717 	ldw	r3,-36(fp)
2008e068:	e0bff817 	ldw	r2,-32(fp)
2008e06c:	18800536 	bltu	r3,r2,2008e084 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
2008e070:	e0fff717 	ldw	r3,-36(fp)
2008e074:	e0bff817 	ldw	r2,-32(fp)
2008e078:	1885c83a 	sub	r2,r3,r2
2008e07c:	e0bff615 	stw	r2,-40(fp)
2008e080:	00000406 	br	2008e094 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
2008e084:	00c20004 	movi	r3,2048
2008e088:	e0bff817 	ldw	r2,-32(fp)
2008e08c:	1885c83a 	sub	r2,r3,r2
2008e090:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
2008e094:	e0bff617 	ldw	r2,-40(fp)
2008e098:	1000011e 	bne	r2,zero,2008e0a0 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
2008e09c:	00001d06 	br	2008e114 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
2008e0a0:	e0fffe17 	ldw	r3,-8(fp)
2008e0a4:	e0bff617 	ldw	r2,-40(fp)
2008e0a8:	1880022e 	bgeu	r3,r2,2008e0b4 <altera_avalon_jtag_uart_read+0x94>
        n = space;
2008e0ac:	e0bffe17 	ldw	r2,-8(fp)
2008e0b0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
2008e0b4:	e0bff817 	ldw	r2,-32(fp)
2008e0b8:	10800e04 	addi	r2,r2,56
2008e0bc:	e0fffc17 	ldw	r3,-16(fp)
2008e0c0:	1885883a 	add	r2,r3,r2
2008e0c4:	e13ff517 	ldw	r4,-44(fp)
2008e0c8:	100b883a 	mov	r5,r2
2008e0cc:	e1bff617 	ldw	r6,-40(fp)
2008e0d0:	00861240 	call	20086124 <memcpy>
      ptr   += n;
2008e0d4:	e0fff517 	ldw	r3,-44(fp)
2008e0d8:	e0bff617 	ldw	r2,-40(fp)
2008e0dc:	1885883a 	add	r2,r3,r2
2008e0e0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
2008e0e4:	e0fffe17 	ldw	r3,-8(fp)
2008e0e8:	e0bff617 	ldw	r2,-40(fp)
2008e0ec:	1885c83a 	sub	r2,r3,r2
2008e0f0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
2008e0f4:	e0fff817 	ldw	r3,-32(fp)
2008e0f8:	e0bff617 	ldw	r2,-40(fp)
2008e0fc:	1885883a 	add	r2,r3,r2
2008e100:	10c1ffcc 	andi	r3,r2,2047
2008e104:	e0bffc17 	ldw	r2,-16(fp)
2008e108:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
2008e10c:	e0bffe17 	ldw	r2,-8(fp)
2008e110:	00bfce16 	blt	zero,r2,2008e04c <__flash_rwdata_start+0xffffc250>

    /* If we read any data then return it */
    if (ptr != buffer)
2008e114:	e0fff517 	ldw	r3,-44(fp)
2008e118:	e0bffd17 	ldw	r2,-12(fp)
2008e11c:	18800126 	beq	r3,r2,2008e124 <altera_avalon_jtag_uart_read+0x104>
      break;
2008e120:	00001506 	br	2008e178 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
2008e124:	e0bfff17 	ldw	r2,-4(fp)
2008e128:	1090000c 	andi	r2,r2,16384
2008e12c:	10000126 	beq	r2,zero,2008e134 <altera_avalon_jtag_uart_read+0x114>
      break;
2008e130:	00001106 	br	2008e178 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
2008e134:	0001883a 	nop
2008e138:	e0bffc17 	ldw	r2,-16(fp)
2008e13c:	10c00a17 	ldw	r3,40(r2)
2008e140:	e0bff717 	ldw	r2,-36(fp)
2008e144:	1880051e 	bne	r3,r2,2008e15c <altera_avalon_jtag_uart_read+0x13c>
2008e148:	e0bffc17 	ldw	r2,-16(fp)
2008e14c:	10c00917 	ldw	r3,36(r2)
2008e150:	e0bffc17 	ldw	r2,-16(fp)
2008e154:	10800117 	ldw	r2,4(r2)
2008e158:	18bff736 	bltu	r3,r2,2008e138 <__flash_rwdata_start+0xffffc33c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
2008e15c:	e0bffc17 	ldw	r2,-16(fp)
2008e160:	10c00a17 	ldw	r3,40(r2)
2008e164:	e0bff717 	ldw	r2,-36(fp)
2008e168:	1880011e 	bne	r3,r2,2008e170 <altera_avalon_jtag_uart_read+0x150>
      break;
2008e16c:	00000206 	br	2008e178 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
2008e170:	e0bffe17 	ldw	r2,-8(fp)
2008e174:	00bfb516 	blt	zero,r2,2008e04c <__flash_rwdata_start+0xffffc250>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
2008e178:	e0fff517 	ldw	r3,-44(fp)
2008e17c:	e0bffd17 	ldw	r2,-12(fp)
2008e180:	18801826 	beq	r3,r2,2008e1e4 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2008e184:	0005303a 	rdctl	r2,status
2008e188:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2008e18c:	e0fffa17 	ldw	r3,-24(fp)
2008e190:	00bfff84 	movi	r2,-2
2008e194:	1884703a 	and	r2,r3,r2
2008e198:	1001703a 	wrctl	status,r2
  
  return context;
2008e19c:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
2008e1a0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
2008e1a4:	e0bffc17 	ldw	r2,-16(fp)
2008e1a8:	10800817 	ldw	r2,32(r2)
2008e1ac:	10c00054 	ori	r3,r2,1
2008e1b0:	e0bffc17 	ldw	r2,-16(fp)
2008e1b4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
2008e1b8:	e0bffc17 	ldw	r2,-16(fp)
2008e1bc:	10800017 	ldw	r2,0(r2)
2008e1c0:	10800104 	addi	r2,r2,4
2008e1c4:	1007883a 	mov	r3,r2
2008e1c8:	e0bffc17 	ldw	r2,-16(fp)
2008e1cc:	10800817 	ldw	r2,32(r2)
2008e1d0:	18800035 	stwio	r2,0(r3)
2008e1d4:	e0bff917 	ldw	r2,-28(fp)
2008e1d8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2008e1dc:	e0bffb17 	ldw	r2,-20(fp)
2008e1e0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
2008e1e4:	e0fff517 	ldw	r3,-44(fp)
2008e1e8:	e0bffd17 	ldw	r2,-12(fp)
2008e1ec:	18800426 	beq	r3,r2,2008e200 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
2008e1f0:	e0fff517 	ldw	r3,-44(fp)
2008e1f4:	e0bffd17 	ldw	r2,-12(fp)
2008e1f8:	1885c83a 	sub	r2,r3,r2
2008e1fc:	00000606 	br	2008e218 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
2008e200:	e0bfff17 	ldw	r2,-4(fp)
2008e204:	1090000c 	andi	r2,r2,16384
2008e208:	10000226 	beq	r2,zero,2008e214 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
2008e20c:	00bffd44 	movi	r2,-11
2008e210:	00000106 	br	2008e218 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
2008e214:	00bffec4 	movi	r2,-5
}
2008e218:	e037883a 	mov	sp,fp
2008e21c:	dfc00117 	ldw	ra,4(sp)
2008e220:	df000017 	ldw	fp,0(sp)
2008e224:	dec00204 	addi	sp,sp,8
2008e228:	f800283a 	ret

2008e22c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
2008e22c:	defff304 	addi	sp,sp,-52
2008e230:	dfc00c15 	stw	ra,48(sp)
2008e234:	df000b15 	stw	fp,44(sp)
2008e238:	df000b04 	addi	fp,sp,44
2008e23c:	e13ffc15 	stw	r4,-16(fp)
2008e240:	e17ffd15 	stw	r5,-12(fp)
2008e244:	e1bffe15 	stw	r6,-8(fp)
2008e248:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
2008e24c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
2008e250:	e0bffd17 	ldw	r2,-12(fp)
2008e254:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
2008e258:	00003806 	br	2008e33c <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
2008e25c:	e0bffc17 	ldw	r2,-16(fp)
2008e260:	10800c17 	ldw	r2,48(r2)
2008e264:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
2008e268:	e0bffc17 	ldw	r2,-16(fp)
2008e26c:	10800d17 	ldw	r2,52(r2)
2008e270:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
2008e274:	e0fff817 	ldw	r3,-32(fp)
2008e278:	e0bff517 	ldw	r2,-44(fp)
2008e27c:	1880062e 	bgeu	r3,r2,2008e298 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
2008e280:	e0fff517 	ldw	r3,-44(fp)
2008e284:	e0bff817 	ldw	r2,-32(fp)
2008e288:	1885c83a 	sub	r2,r3,r2
2008e28c:	10bfffc4 	addi	r2,r2,-1
2008e290:	e0bff615 	stw	r2,-40(fp)
2008e294:	00000b06 	br	2008e2c4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
2008e298:	e0bff517 	ldw	r2,-44(fp)
2008e29c:	10000526 	beq	r2,zero,2008e2b4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
2008e2a0:	00c20004 	movi	r3,2048
2008e2a4:	e0bff817 	ldw	r2,-32(fp)
2008e2a8:	1885c83a 	sub	r2,r3,r2
2008e2ac:	e0bff615 	stw	r2,-40(fp)
2008e2b0:	00000406 	br	2008e2c4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
2008e2b4:	00c1ffc4 	movi	r3,2047
2008e2b8:	e0bff817 	ldw	r2,-32(fp)
2008e2bc:	1885c83a 	sub	r2,r3,r2
2008e2c0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
2008e2c4:	e0bff617 	ldw	r2,-40(fp)
2008e2c8:	1000011e 	bne	r2,zero,2008e2d0 <altera_avalon_jtag_uart_write+0xa4>
        break;
2008e2cc:	00001d06 	br	2008e344 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
2008e2d0:	e0fffe17 	ldw	r3,-8(fp)
2008e2d4:	e0bff617 	ldw	r2,-40(fp)
2008e2d8:	1880022e 	bgeu	r3,r2,2008e2e4 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
2008e2dc:	e0bffe17 	ldw	r2,-8(fp)
2008e2e0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
2008e2e4:	e0bff817 	ldw	r2,-32(fp)
2008e2e8:	10820e04 	addi	r2,r2,2104
2008e2ec:	e0fffc17 	ldw	r3,-16(fp)
2008e2f0:	1885883a 	add	r2,r3,r2
2008e2f4:	1009883a 	mov	r4,r2
2008e2f8:	e17ffd17 	ldw	r5,-12(fp)
2008e2fc:	e1bff617 	ldw	r6,-40(fp)
2008e300:	00861240 	call	20086124 <memcpy>
      ptr   += n;
2008e304:	e0fffd17 	ldw	r3,-12(fp)
2008e308:	e0bff617 	ldw	r2,-40(fp)
2008e30c:	1885883a 	add	r2,r3,r2
2008e310:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
2008e314:	e0fffe17 	ldw	r3,-8(fp)
2008e318:	e0bff617 	ldw	r2,-40(fp)
2008e31c:	1885c83a 	sub	r2,r3,r2
2008e320:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
2008e324:	e0fff817 	ldw	r3,-32(fp)
2008e328:	e0bff617 	ldw	r2,-40(fp)
2008e32c:	1885883a 	add	r2,r3,r2
2008e330:	10c1ffcc 	andi	r3,r2,2047
2008e334:	e0bffc17 	ldw	r2,-16(fp)
2008e338:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
2008e33c:	e0bffe17 	ldw	r2,-8(fp)
2008e340:	00bfc616 	blt	zero,r2,2008e25c <__flash_rwdata_start+0xffffc460>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2008e344:	0005303a 	rdctl	r2,status
2008e348:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2008e34c:	e0fffa17 	ldw	r3,-24(fp)
2008e350:	00bfff84 	movi	r2,-2
2008e354:	1884703a 	and	r2,r3,r2
2008e358:	1001703a 	wrctl	status,r2
  
  return context;
2008e35c:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
2008e360:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
2008e364:	e0bffc17 	ldw	r2,-16(fp)
2008e368:	10800817 	ldw	r2,32(r2)
2008e36c:	10c00094 	ori	r3,r2,2
2008e370:	e0bffc17 	ldw	r2,-16(fp)
2008e374:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
2008e378:	e0bffc17 	ldw	r2,-16(fp)
2008e37c:	10800017 	ldw	r2,0(r2)
2008e380:	10800104 	addi	r2,r2,4
2008e384:	1007883a 	mov	r3,r2
2008e388:	e0bffc17 	ldw	r2,-16(fp)
2008e38c:	10800817 	ldw	r2,32(r2)
2008e390:	18800035 	stwio	r2,0(r3)
2008e394:	e0bff917 	ldw	r2,-28(fp)
2008e398:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2008e39c:	e0bffb17 	ldw	r2,-20(fp)
2008e3a0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
2008e3a4:	e0bffe17 	ldw	r2,-8(fp)
2008e3a8:	0080120e 	bge	zero,r2,2008e3f4 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
2008e3ac:	e0bfff17 	ldw	r2,-4(fp)
2008e3b0:	1090000c 	andi	r2,r2,16384
2008e3b4:	10000126 	beq	r2,zero,2008e3bc <altera_avalon_jtag_uart_write+0x190>
        break;
2008e3b8:	00001006 	br	2008e3fc <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
2008e3bc:	0001883a 	nop
2008e3c0:	e0bffc17 	ldw	r2,-16(fp)
2008e3c4:	10c00d17 	ldw	r3,52(r2)
2008e3c8:	e0bff517 	ldw	r2,-44(fp)
2008e3cc:	1880051e 	bne	r3,r2,2008e3e4 <altera_avalon_jtag_uart_write+0x1b8>
2008e3d0:	e0bffc17 	ldw	r2,-16(fp)
2008e3d4:	10c00917 	ldw	r3,36(r2)
2008e3d8:	e0bffc17 	ldw	r2,-16(fp)
2008e3dc:	10800117 	ldw	r2,4(r2)
2008e3e0:	18bff736 	bltu	r3,r2,2008e3c0 <__flash_rwdata_start+0xffffc5c4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
2008e3e4:	e0bffc17 	ldw	r2,-16(fp)
2008e3e8:	10800917 	ldw	r2,36(r2)
2008e3ec:	10000126 	beq	r2,zero,2008e3f4 <altera_avalon_jtag_uart_write+0x1c8>
         break;
2008e3f0:	00000206 	br	2008e3fc <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
2008e3f4:	e0bffe17 	ldw	r2,-8(fp)
2008e3f8:	00bf9716 	blt	zero,r2,2008e258 <__flash_rwdata_start+0xffffc45c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
2008e3fc:	e0fffd17 	ldw	r3,-12(fp)
2008e400:	e0bff717 	ldw	r2,-36(fp)
2008e404:	18800426 	beq	r3,r2,2008e418 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
2008e408:	e0fffd17 	ldw	r3,-12(fp)
2008e40c:	e0bff717 	ldw	r2,-36(fp)
2008e410:	1885c83a 	sub	r2,r3,r2
2008e414:	00000606 	br	2008e430 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
2008e418:	e0bfff17 	ldw	r2,-4(fp)
2008e41c:	1090000c 	andi	r2,r2,16384
2008e420:	10000226 	beq	r2,zero,2008e42c <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
2008e424:	00bffd44 	movi	r2,-11
2008e428:	00000106 	br	2008e430 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
2008e42c:	00bffec4 	movi	r2,-5
}
2008e430:	e037883a 	mov	sp,fp
2008e434:	dfc00117 	ldw	ra,4(sp)
2008e438:	df000017 	ldw	fp,0(sp)
2008e43c:	dec00204 	addi	sp,sp,8
2008e440:	f800283a 	ret

2008e444 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
2008e444:	defffa04 	addi	sp,sp,-24
2008e448:	dfc00515 	stw	ra,20(sp)
2008e44c:	df000415 	stw	fp,16(sp)
2008e450:	df000404 	addi	fp,sp,16
2008e454:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
2008e458:	0007883a 	mov	r3,zero
2008e45c:	e0bfff17 	ldw	r2,-4(fp)
2008e460:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
2008e464:	e0bfff17 	ldw	r2,-4(fp)
2008e468:	10800104 	addi	r2,r2,4
2008e46c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2008e470:	0005303a 	rdctl	r2,status
2008e474:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2008e478:	e0fffd17 	ldw	r3,-12(fp)
2008e47c:	00bfff84 	movi	r2,-2
2008e480:	1884703a 	and	r2,r3,r2
2008e484:	1001703a 	wrctl	status,r2
  
  return context;
2008e488:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
2008e48c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
2008e490:	00912540 	call	20091254 <alt_tick>
2008e494:	e0bffc17 	ldw	r2,-16(fp)
2008e498:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2008e49c:	e0bffe17 	ldw	r2,-8(fp)
2008e4a0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
2008e4a4:	e037883a 	mov	sp,fp
2008e4a8:	dfc00117 	ldw	ra,4(sp)
2008e4ac:	df000017 	ldw	fp,0(sp)
2008e4b0:	dec00204 	addi	sp,sp,8
2008e4b4:	f800283a 	ret

2008e4b8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
2008e4b8:	defff804 	addi	sp,sp,-32
2008e4bc:	dfc00715 	stw	ra,28(sp)
2008e4c0:	df000615 	stw	fp,24(sp)
2008e4c4:	df000604 	addi	fp,sp,24
2008e4c8:	e13ffc15 	stw	r4,-16(fp)
2008e4cc:	e17ffd15 	stw	r5,-12(fp)
2008e4d0:	e1bffe15 	stw	r6,-8(fp)
2008e4d4:	e1ffff15 	stw	r7,-4(fp)
2008e4d8:	e0bfff17 	ldw	r2,-4(fp)
2008e4dc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
2008e4e0:	00800034 	movhi	r2,0
2008e4e4:	10896d04 	addi	r2,r2,9652
2008e4e8:	10800017 	ldw	r2,0(r2)
2008e4ec:	1000041e 	bne	r2,zero,2008e500 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
2008e4f0:	00800034 	movhi	r2,0
2008e4f4:	10896d04 	addi	r2,r2,9652
2008e4f8:	e0fffb17 	ldw	r3,-20(fp)
2008e4fc:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
2008e500:	e0bffc17 	ldw	r2,-16(fp)
2008e504:	10800104 	addi	r2,r2,4
2008e508:	00c001c4 	movi	r3,7
2008e50c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
2008e510:	d8000015 	stw	zero,0(sp)
2008e514:	e13ffd17 	ldw	r4,-12(fp)
2008e518:	e17ffe17 	ldw	r5,-8(fp)
2008e51c:	01880274 	movhi	r6,8201
2008e520:	31b91104 	addi	r6,r6,-7100
2008e524:	e1fffc17 	ldw	r7,-16(fp)
2008e528:	00908d40 	call	200908d4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
2008e52c:	e037883a 	mov	sp,fp
2008e530:	dfc00117 	ldw	ra,4(sp)
2008e534:	df000017 	ldw	fp,0(sp)
2008e538:	dec00204 	addi	sp,sp,8
2008e53c:	f800283a 	ret

2008e540 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2008e540:	defffe04 	addi	sp,sp,-8
2008e544:	dfc00115 	stw	ra,4(sp)
2008e548:	df000015 	stw	fp,0(sp)
2008e54c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2008e550:	00800034 	movhi	r2,0
2008e554:	10895a04 	addi	r2,r2,9576
2008e558:	10800017 	ldw	r2,0(r2)
2008e55c:	10000526 	beq	r2,zero,2008e574 <alt_get_errno+0x34>
2008e560:	00800034 	movhi	r2,0
2008e564:	10895a04 	addi	r2,r2,9576
2008e568:	10800017 	ldw	r2,0(r2)
2008e56c:	103ee83a 	callr	r2
2008e570:	00000206 	br	2008e57c <alt_get_errno+0x3c>
2008e574:	00800034 	movhi	r2,0
2008e578:	10896504 	addi	r2,r2,9620
}
2008e57c:	e037883a 	mov	sp,fp
2008e580:	dfc00117 	ldw	ra,4(sp)
2008e584:	df000017 	ldw	fp,0(sp)
2008e588:	dec00204 	addi	sp,sp,8
2008e58c:	f800283a 	ret

2008e590 <alt_msgdma_write_standard_descriptor>:
 */
static int alt_msgdma_write_standard_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_standard_descriptor *descriptor)
{
2008e590:	defffc04 	addi	sp,sp,-16
2008e594:	df000315 	stw	fp,12(sp)
2008e598:	df000304 	addi	fp,sp,12
2008e59c:	e13ffd15 	stw	r4,-12(fp)
2008e5a0:	e17ffe15 	stw	r5,-8(fp)
2008e5a4:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
2008e5a8:	e0bffd17 	ldw	r2,-12(fp)
2008e5ac:	10800037 	ldwio	r2,0(r2)
2008e5b0:	1080010c 	andi	r2,r2,4
2008e5b4:	10000226 	beq	r2,zero,2008e5c0 <alt_msgdma_write_standard_descriptor+0x30>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
		is non-blocking*/
        return -ENOSPC;
2008e5b8:	00bff904 	movi	r2,-28
2008e5bc:	00001506 	br	2008e614 <alt_msgdma_write_standard_descriptor+0x84>
    }

	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base, 
2008e5c0:	e0bfff17 	ldw	r2,-4(fp)
2008e5c4:	10800017 	ldw	r2,0(r2)
2008e5c8:	1007883a 	mov	r3,r2
2008e5cc:	e0bffe17 	ldw	r2,-8(fp)
2008e5d0:	10c00035 	stwio	r3,0(r2)
		(alt_u32)descriptor->read_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base, 
2008e5d4:	e0bffe17 	ldw	r2,-8(fp)
2008e5d8:	10800104 	addi	r2,r2,4
2008e5dc:	e0ffff17 	ldw	r3,-4(fp)
2008e5e0:	18c00117 	ldw	r3,4(r3)
2008e5e4:	10c00035 	stwio	r3,0(r2)
	(	alt_u32)descriptor->write_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base, 
2008e5e8:	e0bffe17 	ldw	r2,-8(fp)
2008e5ec:	10800204 	addi	r2,r2,8
2008e5f0:	e0ffff17 	ldw	r3,-4(fp)
2008e5f4:	18c00217 	ldw	r3,8(r3)
2008e5f8:	10c00035 	stwio	r3,0(r2)
		descriptor->transfer_length);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_STANDARD(descriptor_base, 
2008e5fc:	e0bffe17 	ldw	r2,-8(fp)
2008e600:	10800304 	addi	r2,r2,12
2008e604:	e0ffff17 	ldw	r3,-4(fp)
2008e608:	18c00317 	ldw	r3,12(r3)
2008e60c:	10c00035 	stwio	r3,0(r2)
		descriptor->control);
        return 0;
2008e610:	0005883a 	mov	r2,zero
}
2008e614:	e037883a 	mov	sp,fp
2008e618:	df000017 	ldw	fp,0(sp)
2008e61c:	dec00104 	addi	sp,sp,4
2008e620:	f800283a 	ret

2008e624 <alt_msgdma_write_extended_descriptor>:
 */
static int alt_msgdma_write_extended_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_extended_descriptor *descriptor)
{
2008e624:	defffc04 	addi	sp,sp,-16
2008e628:	df000315 	stw	fp,12(sp)
2008e62c:	df000304 	addi	fp,sp,12
2008e630:	e13ffd15 	stw	r4,-12(fp)
2008e634:	e17ffe15 	stw	r5,-8(fp)
2008e638:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
2008e63c:	e0bffd17 	ldw	r2,-12(fp)
2008e640:	10800037 	ldwio	r2,0(r2)
2008e644:	1080010c 	andi	r2,r2,4
2008e648:	10000226 	beq	r2,zero,2008e654 <alt_msgdma_write_extended_descriptor+0x30>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
	is non-blocking*/
        return -ENOSPC;
2008e64c:	00bff904 	movi	r2,-28
2008e650:	00003b06 	br	2008e740 <alt_msgdma_write_extended_descriptor+0x11c>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(
2008e654:	e0bfff17 	ldw	r2,-4(fp)
2008e658:	10800017 	ldw	r2,0(r2)
2008e65c:	1007883a 	mov	r3,r2
2008e660:	e0bffe17 	ldw	r2,-8(fp)
2008e664:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	(alt_u32)descriptor->read_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(
2008e668:	e0bffe17 	ldw	r2,-8(fp)
2008e66c:	10800104 	addi	r2,r2,4
2008e670:	e0ffff17 	ldw	r3,-4(fp)
2008e674:	18c00117 	ldw	r3,4(r3)
2008e678:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
		(alt_u32)descriptor->write_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(
2008e67c:	e0bffe17 	ldw	r2,-8(fp)
2008e680:	10800204 	addi	r2,r2,8
2008e684:	e0ffff17 	ldw	r3,-4(fp)
2008e688:	18c00217 	ldw	r3,8(r3)
2008e68c:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(
2008e690:	e0bffe17 	ldw	r2,-8(fp)
2008e694:	10800304 	addi	r2,r2,12
2008e698:	e0ffff17 	ldw	r3,-4(fp)
2008e69c:	18c0030b 	ldhu	r3,12(r3)
2008e6a0:	18ffffcc 	andi	r3,r3,65535
2008e6a4:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->sequence_number);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(
2008e6a8:	e0bffe17 	ldw	r2,-8(fp)
2008e6ac:	10800384 	addi	r2,r2,14
2008e6b0:	e0ffff17 	ldw	r3,-4(fp)
2008e6b4:	18c00383 	ldbu	r3,14(r3)
2008e6b8:	18c03fcc 	andi	r3,r3,255
2008e6bc:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(
2008e6c0:	e0bffe17 	ldw	r2,-8(fp)
2008e6c4:	108003c4 	addi	r2,r2,15
2008e6c8:	e0ffff17 	ldw	r3,-4(fp)
2008e6cc:	18c003c3 	ldbu	r3,15(r3)
2008e6d0:	18c03fcc 	andi	r3,r3,255
2008e6d4:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(
2008e6d8:	e0bffe17 	ldw	r2,-8(fp)
2008e6dc:	10800404 	addi	r2,r2,16
2008e6e0:	e0ffff17 	ldw	r3,-4(fp)
2008e6e4:	18c0040b 	ldhu	r3,16(r3)
2008e6e8:	18ffffcc 	andi	r3,r3,65535
2008e6ec:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(
2008e6f0:	e0bffe17 	ldw	r2,-8(fp)
2008e6f4:	10800484 	addi	r2,r2,18
2008e6f8:	e0ffff17 	ldw	r3,-4(fp)
2008e6fc:	18c0048b 	ldhu	r3,18(r3)
2008e700:	18ffffcc 	andi	r3,r3,65535
2008e704:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base, 0);
2008e708:	e0bffe17 	ldw	r2,-8(fp)
2008e70c:	10800504 	addi	r2,r2,20
2008e710:	0007883a 	mov	r3,zero
2008e714:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base, 0);
2008e718:	e0bffe17 	ldw	r2,-8(fp)
2008e71c:	10800604 	addi	r2,r2,24
2008e720:	0007883a 	mov	r3,zero
2008e724:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(
2008e728:	e0bffe17 	ldw	r2,-8(fp)
2008e72c:	10800704 	addi	r2,r2,28
2008e730:	e0ffff17 	ldw	r3,-4(fp)
2008e734:	18c00717 	ldw	r3,28(r3)
2008e738:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->control);
    return 0;
2008e73c:	0005883a 	mov	r2,zero
}
2008e740:	e037883a 	mov	sp,fp
2008e744:	df000017 	ldw	fp,0(sp)
2008e748:	dec00104 	addi	sp,sp,4
2008e74c:	f800283a 	ret

2008e750 <alt_msgdma_irq>:
 * alt_msgdma_irq()
 *
 * Interrupt handler for the Modular Scatter-Gather DMA controller.
 */
static void alt_msgdma_irq(void *context)
{
2008e750:	defff804 	addi	sp,sp,-32
2008e754:	dfc00715 	stw	ra,28(sp)
2008e758:	df000615 	stw	fp,24(sp)
2008e75c:	df000604 	addi	fp,sp,24
2008e760:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev *dev = (alt_msgdma_dev *) context;
2008e764:	e0bfff17 	ldw	r2,-4(fp)
2008e768:	e0bffa15 	stw	r2,-24(fp)
    alt_irq_context cpu_sr;
    alt_u32 temporary_control;

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
2008e76c:	e0bffa17 	ldw	r2,-24(fp)
2008e770:	10801783 	ldbu	r2,94(r2)
2008e774:	10803fcc 	andi	r2,r2,255
2008e778:	10001126 	beq	r2,zero,2008e7c0 <alt_msgdma_irq+0x70>
    {
        temporary_control = 
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
2008e77c:	e0bffa17 	ldw	r2,-24(fp)
2008e780:	10800617 	ldw	r2,24(r2)
2008e784:	10800037 	ldwio	r2,0(r2)

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
    {
        temporary_control = 
2008e788:	1007883a 	mov	r3,r2
2008e78c:	00bffdc4 	movi	r2,-9
2008e790:	1884703a 	and	r2,r3,r2
2008e794:	e0bffb15 	stw	r2,-20(fp)
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				& ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
2008e798:	e0bffa17 	ldw	r2,-24(fp)
2008e79c:	10800617 	ldw	r2,24(r2)
2008e7a0:	e0fffb17 	ldw	r3,-20(fp)
2008e7a4:	10c00035 	stwio	r3,0(r2)
        		temporary_control);
        
        /* clear the IRQ status- W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base,
2008e7a8:	e0bffa17 	ldw	r2,-24(fp)
2008e7ac:	10800617 	ldw	r2,24(r2)
2008e7b0:	10800404 	addi	r2,r2,16
2008e7b4:	00c00044 	movi	r3,1
2008e7b8:	10c00035 	stwio	r3,0(r2)
2008e7bc:	00001106 	br	2008e804 <alt_msgdma_irq+0xb4>
        		ALT_MSGDMA_PREFETCHER_STATUS_IRQ_SET_MASK);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
2008e7c0:	e0bffa17 	ldw	r2,-24(fp)
2008e7c4:	10800317 	ldw	r2,12(r2)
2008e7c8:	10800104 	addi	r2,r2,4
2008e7cc:	10800037 	ldwio	r2,0(r2)
2008e7d0:	1007883a 	mov	r3,r2
2008e7d4:	00bffbc4 	movi	r2,-17
2008e7d8:	1884703a 	and	r2,r3,r2
2008e7dc:	e0bffb15 	stw	r2,-20(fp)
    			& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
2008e7e0:	e0bffa17 	ldw	r2,-24(fp)
2008e7e4:	10800317 	ldw	r2,12(r2)
2008e7e8:	10800104 	addi	r2,r2,4
2008e7ec:	e0fffb17 	ldw	r3,-20(fp)
2008e7f0:	10c00035 	stwio	r3,0(r2)
    	/* clear the IRQ status */
    	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
2008e7f4:	e0bffa17 	ldw	r2,-24(fp)
2008e7f8:	10800317 	ldw	r2,12(r2)
2008e7fc:	00c08004 	movi	r3,512
2008e800:	10c00035 	stwio	r3,0(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
2008e804:	e0bffa17 	ldw	r2,-24(fp)
2008e808:	10800b17 	ldw	r2,44(r2)
2008e80c:	10001226 	beq	r2,zero,2008e858 <alt_msgdma_irq+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2008e810:	0005303a 	rdctl	r2,status
2008e814:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2008e818:	e0fffd17 	ldw	r3,-12(fp)
2008e81c:	00bfff84 	movi	r2,-2
2008e820:	1884703a 	and	r2,r3,r2
2008e824:	1001703a 	wrctl	status,r2
  
  return context;
2008e828:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
2008e82c:	e0bffc15 	stw	r2,-16(fp)
        dev->callback (dev->callback_context);
2008e830:	e0bffa17 	ldw	r2,-24(fp)
2008e834:	10800b17 	ldw	r2,44(r2)
2008e838:	e0fffa17 	ldw	r3,-24(fp)
2008e83c:	18c00c17 	ldw	r3,48(r3)
2008e840:	1809883a 	mov	r4,r3
2008e844:	103ee83a 	callr	r2
2008e848:	e0bffc17 	ldw	r2,-16(fp)
2008e84c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2008e850:	e0bffe17 	ldw	r2,-8(fp)
2008e854:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
2008e858:	e0bffa17 	ldw	r2,-24(fp)
2008e85c:	10801783 	ldbu	r2,94(r2)
2008e860:	10803fcc 	andi	r2,r2,255
2008e864:	10000a26 	beq	r2,zero,2008e890 <alt_msgdma_irq+0x140>
    {
    	temporary_control = 
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
2008e868:	e0bffa17 	ldw	r2,-24(fp)
2008e86c:	10800617 	ldw	r2,24(r2)
2008e870:	10800037 	ldwio	r2,0(r2)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
2008e874:	10800214 	ori	r2,r2,8
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
    {
    	temporary_control = 
2008e878:	e0bffb15 	stw	r2,-20(fp)
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
    	
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
2008e87c:	e0bffa17 	ldw	r2,-24(fp)
2008e880:	10800617 	ldw	r2,24(r2)
2008e884:	e0fffb17 	ldw	r3,-20(fp)
2008e888:	10c00035 	stwio	r3,0(r2)
2008e88c:	00000b06 	br	2008e8bc <alt_msgdma_irq+0x16c>
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
2008e890:	e0bffa17 	ldw	r2,-24(fp)
2008e894:	10800317 	ldw	r2,12(r2)
2008e898:	10800104 	addi	r2,r2,4
2008e89c:	10800037 	ldwio	r2,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
2008e8a0:	10800414 	ori	r2,r2,16
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
2008e8a4:	e0bffb15 	stw	r2,-20(fp)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
2008e8a8:	e0bffa17 	ldw	r2,-24(fp)
2008e8ac:	10800317 	ldw	r2,12(r2)
2008e8b0:	10800104 	addi	r2,r2,4
2008e8b4:	e0fffb17 	ldw	r3,-20(fp)
2008e8b8:	10c00035 	stwio	r3,0(r2)
    }

    return;
2008e8bc:	0001883a 	nop
}
2008e8c0:	e037883a 	mov	sp,fp
2008e8c4:	dfc00117 	ldw	ra,4(sp)
2008e8c8:	df000017 	ldw	fp,0(sp)
2008e8cc:	dec00204 	addi	sp,sp,8
2008e8d0:	f800283a 	ret

2008e8d4 <alt_msgdma_construct_standard_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
2008e8d4:	defffb04 	addi	sp,sp,-20
2008e8d8:	df000415 	stw	fp,16(sp)
2008e8dc:	df000404 	addi	fp,sp,16
2008e8e0:	e13ffc15 	stw	r4,-16(fp)
2008e8e4:	e17ffd15 	stw	r5,-12(fp)
2008e8e8:	e1bffe15 	stw	r6,-8(fp)
2008e8ec:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
2008e8f0:	e0bffc17 	ldw	r2,-16(fp)
2008e8f4:	10c01217 	ldw	r3,72(r2)
2008e8f8:	e0800117 	ldw	r2,4(fp)
2008e8fc:	18800436 	bltu	r3,r2,2008e910 <alt_msgdma_construct_standard_descriptor+0x3c>
       dev->enhanced_features != 0
2008e900:	e0bffc17 	ldw	r2,-16(fp)
2008e904:	10801703 	ldbu	r2,92(r2)
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
2008e908:	10803fcc 	andi	r2,r2,255
2008e90c:	10000226 	beq	r2,zero,2008e918 <alt_msgdma_construct_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
2008e910:	00bffa84 	movi	r2,-22
2008e914:	00000e06 	br	2008e950 <alt_msgdma_construct_standard_descriptor+0x7c>
    }
    descriptor->read_address = read_address;
2008e918:	e0bffd17 	ldw	r2,-12(fp)
2008e91c:	e0fffe17 	ldw	r3,-8(fp)
2008e920:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
2008e924:	e0bffd17 	ldw	r2,-12(fp)
2008e928:	e0ffff17 	ldw	r3,-4(fp)
2008e92c:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
2008e930:	e0bffd17 	ldw	r2,-12(fp)
2008e934:	e0c00117 	ldw	r3,4(fp)
2008e938:	10c00215 	stw	r3,8(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
2008e93c:	e0800217 	ldw	r2,8(fp)
2008e940:	10e00034 	orhi	r3,r2,32768
2008e944:	e0bffd17 	ldw	r2,-12(fp)
2008e948:	10c00315 	stw	r3,12(r2)
    
    return 0;
2008e94c:	0005883a 	mov	r2,zero
}
2008e950:	e037883a 	mov	sp,fp
2008e954:	df000017 	ldw	fp,0(sp)
2008e958:	dec00104 	addi	sp,sp,4
2008e95c:	f800283a 	ret

2008e960 <alt_msgdma_construct_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
2008e960:	defff604 	addi	sp,sp,-40
2008e964:	df000915 	stw	fp,36(sp)
2008e968:	df000904 	addi	fp,sp,36
2008e96c:	e13ff715 	stw	r4,-36(fp)
2008e970:	e17ff815 	stw	r5,-32(fp)
2008e974:	e1bff915 	stw	r6,-28(fp)
2008e978:	e1fffa15 	stw	r7,-24(fp)
2008e97c:	e1800317 	ldw	r6,12(fp)
2008e980:	e1400417 	ldw	r5,16(fp)
2008e984:	e1000517 	ldw	r4,20(fp)
2008e988:	e0c00617 	ldw	r3,24(fp)
2008e98c:	e0800717 	ldw	r2,28(fp)
2008e990:	e1bffb0d 	sth	r6,-20(fp)
2008e994:	e17ffc05 	stb	r5,-16(fp)
2008e998:	e13ffd05 	stb	r4,-12(fp)
2008e99c:	e0fffe0d 	sth	r3,-8(fp)
2008e9a0:	e0bfff0d 	sth	r2,-4(fp)
    if(dev->max_byte < length ||
2008e9a4:	e0bff717 	ldw	r2,-36(fp)
2008e9a8:	10c01217 	ldw	r3,72(r2)
2008e9ac:	e0800117 	ldw	r2,4(fp)
2008e9b0:	18801936 	bltu	r3,r2,2008ea18 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
2008e9b4:	e13ff717 	ldw	r4,-36(fp)
2008e9b8:	20801317 	ldw	r2,76(r4)
2008e9bc:	20c01417 	ldw	r3,80(r4)
2008e9c0:	e13ffe0b 	ldhu	r4,-8(fp)
2008e9c4:	213fffcc 	andi	r4,r4,65535
2008e9c8:	2015883a 	mov	r10,r4
2008e9cc:	0017883a 	mov	r11,zero
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
2008e9d0:	1ac01136 	bltu	r3,r11,2008ea18 <alt_msgdma_construct_extended_descriptor+0xb8>
2008e9d4:	58c0011e 	bne	r11,r3,2008e9dc <alt_msgdma_construct_extended_descriptor+0x7c>
2008e9d8:	12800f36 	bltu	r2,r10,2008ea18 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
2008e9dc:	e13ff717 	ldw	r4,-36(fp)
2008e9e0:	20801317 	ldw	r2,76(r4)
2008e9e4:	20c01417 	ldw	r3,80(r4)
2008e9e8:	e13fff0b 	ldhu	r4,-4(fp)
2008e9ec:	213fffcc 	andi	r4,r4,65535
2008e9f0:	2011883a 	mov	r8,r4
2008e9f4:	0013883a 	mov	r9,zero
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
2008e9f8:	1a400736 	bltu	r3,r9,2008ea18 <alt_msgdma_construct_extended_descriptor+0xb8>
2008e9fc:	48c0011e 	bne	r9,r3,2008ea04 <alt_msgdma_construct_extended_descriptor+0xa4>
2008ea00:	12000536 	bltu	r2,r8,2008ea18 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
2008ea04:	e0bff717 	ldw	r2,-36(fp)
2008ea08:	10801703 	ldbu	r2,92(r2)
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
2008ea0c:	10803fcc 	andi	r2,r2,255
2008ea10:	10800060 	cmpeqi	r2,r2,1
2008ea14:	1000021e 	bne	r2,zero,2008ea20 <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
2008ea18:	00bffa84 	movi	r2,-22
2008ea1c:	00002106 	br	2008eaa4 <alt_msgdma_construct_extended_descriptor+0x144>
    }
    
    descriptor->read_address_low = read_address;
2008ea20:	e0bff817 	ldw	r2,-32(fp)
2008ea24:	e0fff917 	ldw	r3,-28(fp)
2008ea28:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_low = write_address;
2008ea2c:	e0bff817 	ldw	r2,-32(fp)
2008ea30:	e0fffa17 	ldw	r3,-24(fp)
2008ea34:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
2008ea38:	e0bff817 	ldw	r2,-32(fp)
2008ea3c:	e0c00117 	ldw	r3,4(fp)
2008ea40:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
2008ea44:	e0bff817 	ldw	r2,-32(fp)
2008ea48:	e0fffb0b 	ldhu	r3,-20(fp)
2008ea4c:	10c0030d 	sth	r3,12(r2)
    descriptor->read_burst_count = read_burst_count;
2008ea50:	e0bff817 	ldw	r2,-32(fp)
2008ea54:	e0fffc03 	ldbu	r3,-16(fp)
2008ea58:	10c00385 	stb	r3,14(r2)
    descriptor->write_burst_count = write_burst_count;
2008ea5c:	e0bff817 	ldw	r2,-32(fp)
2008ea60:	e0fffd03 	ldbu	r3,-12(fp)
2008ea64:	10c003c5 	stb	r3,15(r2)
    descriptor->read_stride = read_stride;
2008ea68:	e0bff817 	ldw	r2,-32(fp)
2008ea6c:	e0fffe0b 	ldhu	r3,-8(fp)
2008ea70:	10c0040d 	sth	r3,16(r2)
    descriptor->write_stride = write_stride;
2008ea74:	e0bff817 	ldw	r2,-32(fp)
2008ea78:	e0ffff0b 	ldhu	r3,-4(fp)
2008ea7c:	10c0048d 	sth	r3,18(r2)
    descriptor->read_address_high = NULL;
2008ea80:	e0bff817 	ldw	r2,-32(fp)
2008ea84:	10000515 	stw	zero,20(r2)
    descriptor->write_address_high = NULL;
2008ea88:	e0bff817 	ldw	r2,-32(fp)
2008ea8c:	10000615 	stw	zero,24(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
2008ea90:	e0800217 	ldw	r2,8(fp)
2008ea94:	10e00034 	orhi	r3,r2,32768
2008ea98:	e0bff817 	ldw	r2,-32(fp)
2008ea9c:	10c00715 	stw	r3,28(r2)

  return 0 ;
2008eaa0:	0005883a 	mov	r2,zero

}
2008eaa4:	e037883a 	mov	sp,fp
2008eaa8:	df000017 	ldw	fp,0(sp)
2008eaac:	dec00104 	addi	sp,sp,4
2008eab0:	f800283a 	ret

2008eab4 <alt_msgdma_descriptor_async_transfer>:
 */
static int alt_msgdma_descriptor_async_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
2008eab4:	defff004 	addi	sp,sp,-64
2008eab8:	dfc00f15 	stw	ra,60(sp)
2008eabc:	df000e15 	stw	fp,56(sp)
2008eac0:	df000e04 	addi	fp,sp,56
2008eac4:	e13ffd15 	stw	r4,-12(fp)
2008eac8:	e17ffe15 	stw	r5,-8(fp)
2008eacc:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control = 0;
2008ead0:	e03ff315 	stw	zero,-52(fp)
    alt_irq_context context = 0;
2008ead4:	e03ff415 	stw	zero,-48(fp)
    alt_u16 counter = 0;
2008ead8:	e03ff20d 	sth	zero,-56(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
2008eadc:	e0bffd17 	ldw	r2,-12(fp)
2008eae0:	10800317 	ldw	r2,12(r2)
2008eae4:	10800204 	addi	r2,r2,8
2008eae8:	10800037 	ldwio	r2,0(r2)
	alt_msgdma_extended_descriptor *extended_desc)
{
    alt_u32 control = 0;
    alt_irq_context context = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
2008eaec:	10bfffcc 	andi	r2,r2,65535
2008eaf0:	e0bff515 	stw	r2,-44(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
2008eaf4:	e0bffd17 	ldw	r2,-12(fp)
2008eaf8:	10800317 	ldw	r2,12(r2)
2008eafc:	10800204 	addi	r2,r2,8
2008eb00:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
2008eb04:	1004d43a 	srli	r2,r2,16
2008eb08:	e0bff615 	stw	r2,-40(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
2008eb0c:	e0bffd17 	ldw	r2,-12(fp)
2008eb10:	10800917 	ldw	r2,36(r2)
2008eb14:	e0fff617 	ldw	r3,-40(fp)
2008eb18:	1880042e 	bgeu	r3,r2,2008eb2c <alt_msgdma_descriptor_async_transfer+0x78>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
2008eb1c:	e0bffd17 	ldw	r2,-12(fp)
2008eb20:	10800917 	ldw	r2,36(r2)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
2008eb24:	e0fff517 	ldw	r3,-44(fp)
2008eb28:	18800236 	bltu	r3,r2,2008eb34 <alt_msgdma_descriptor_async_transfer+0x80>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
	{
		/*at least one write or read FIFO descriptor buffer is full,
		returning so that this function is non-blocking*/
		return -ENOSPC;
2008eb2c:	00bff904 	movi	r2,-28
2008eb30:	00008f06 	br	2008ed70 <alt_msgdma_descriptor_async_transfer+0x2bc>
	ALT_SEM_PEND (dev->regs_lock, 0);
	
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	read or write masters  */
	/* stop issuing more descriptors */
	control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
2008eb34:	00800804 	movi	r2,32
2008eb38:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2008eb3c:	0005303a 	rdctl	r2,status
2008eb40:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2008eb44:	e0fff717 	ldw	r3,-36(fp)
2008eb48:	00bfff84 	movi	r2,-2
2008eb4c:	1884703a 	and	r2,r3,r2
2008eb50:	1001703a 	wrctl	status,r2
  
  return context;
2008eb54:	e0bff717 	ldw	r2,-36(fp)
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
2008eb58:	e0bff415 	stw	r2,-48(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
2008eb5c:	e0bffd17 	ldw	r2,-12(fp)
2008eb60:	10800317 	ldw	r2,12(r2)
2008eb64:	10800104 	addi	r2,r2,4
2008eb68:	e0fff317 	ldw	r3,-52(fp)
2008eb6c:	10c00035 	stwio	r3,0(r2)
	/*
	* Clear any (previous) status register information
	* that might occlude our error checking later.
	*/
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
2008eb70:	e0bffd17 	ldw	r2,-12(fp)
2008eb74:	10800317 	ldw	r2,12(r2)
2008eb78:	e0fffd17 	ldw	r3,-12(fp)
2008eb7c:	18c00317 	ldw	r3,12(r3)
2008eb80:	18c00037 	ldwio	r3,0(r3)
2008eb84:	10c00035 	stwio	r3,0(r2)
2008eb88:	e0bff417 	ldw	r2,-48(fp)
2008eb8c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2008eb90:	e0bff817 	ldw	r2,-32(fp)
2008eb94:	1001703a 	wrctl	status,r2
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
2008eb98:	e0bffe17 	ldw	r2,-8(fp)
2008eb9c:	10001a26 	beq	r2,zero,2008ec08 <alt_msgdma_descriptor_async_transfer+0x154>
2008eba0:	e0bfff17 	ldw	r2,-4(fp)
2008eba4:	1000181e 	bne	r2,zero,2008ec08 <alt_msgdma_descriptor_async_transfer+0x154>
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
2008eba8:	00000d06 	br	2008ebe0 <alt_msgdma_descriptor_async_transfer+0x12c>
		dev->csr_base, dev->descriptor_base, standard_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
2008ebac:	01000044 	movi	r4,1
2008ebb0:	00905100 	call	20090510 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
2008ebb4:	e0bff20b 	ldhu	r2,-56(fp)
2008ebb8:	1084e230 	cmpltui	r2,r2,5000
2008ebbc:	1000051e 	bne	r2,zero,2008ebd4 <alt_msgdma_descriptor_async_transfer+0x120>
            {
                alt_printf("time out after 5 msec while waiting" 
2008ebc0:	01000034 	movhi	r4,0
2008ebc4:	21010004 	addi	r4,r4,1024
2008ebc8:	0090f500 	call	20090f50 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
2008ebcc:	00bff084 	movi	r2,-62
2008ebd0:	00006706 	br	2008ed70 <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
2008ebd4:	e0bff20b 	ldhu	r2,-56(fp)
2008ebd8:	10800044 	addi	r2,r2,1
2008ebdc:	e0bff20d 	sth	r2,-56(fp)

    if (NULL != standard_desc && NULL == extended_desc)
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
2008ebe0:	e0bffd17 	ldw	r2,-12(fp)
2008ebe4:	10c00317 	ldw	r3,12(r2)
2008ebe8:	e0bffd17 	ldw	r2,-12(fp)
2008ebec:	10800417 	ldw	r2,16(r2)
2008ebf0:	1809883a 	mov	r4,r3
2008ebf4:	100b883a 	mov	r5,r2
2008ebf8:	e1bffe17 	ldw	r6,-8(fp)
2008ebfc:	008e5900 	call	2008e590 <alt_msgdma_write_standard_descriptor>
2008ec00:	103fea1e 	bne	r2,zero,2008ebac <__flash_rwdata_start+0xffffcdb0>
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
2008ec04:	00001f06 	br	2008ec84 <alt_msgdma_descriptor_async_transfer+0x1d0>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
2008ec08:	e0bffe17 	ldw	r2,-8(fp)
2008ec0c:	10001b1e 	bne	r2,zero,2008ec7c <alt_msgdma_descriptor_async_transfer+0x1c8>
2008ec10:	e0bfff17 	ldw	r2,-4(fp)
2008ec14:	10001926 	beq	r2,zero,2008ec7c <alt_msgdma_descriptor_async_transfer+0x1c8>
    {
        counter = 0; /* reset counter */
2008ec18:	e03ff20d 	sth	zero,-56(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
2008ec1c:	00000d06 	br	2008ec54 <alt_msgdma_descriptor_async_transfer+0x1a0>
		dev->csr_base, 
		dev->descriptor_base, 
		extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
2008ec20:	01000044 	movi	r4,1
2008ec24:	00905100 	call	20090510 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
2008ec28:	e0bff20b 	ldhu	r2,-56(fp)
2008ec2c:	1084e230 	cmpltui	r2,r2,5000
2008ec30:	1000051e 	bne	r2,zero,2008ec48 <alt_msgdma_descriptor_async_transfer+0x194>
            {
                alt_printf("time out after 5 msec while waiting free FIFO buffer" 
2008ec34:	01000034 	movhi	r4,0
2008ec38:	21011604 	addi	r4,r4,1112
2008ec3c:	0090f500 	call	20090f50 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
2008ec40:	00bff084 	movi	r2,-62
2008ec44:	00004a06 	br	2008ed70 <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
2008ec48:	e0bff20b 	ldhu	r2,-56(fp)
2008ec4c:	10800044 	addi	r2,r2,1
2008ec50:	e0bff20d 	sth	r2,-56(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
2008ec54:	e0bffd17 	ldw	r2,-12(fp)
2008ec58:	10c00317 	ldw	r3,12(r2)
2008ec5c:	e0bffd17 	ldw	r2,-12(fp)
2008ec60:	10800417 	ldw	r2,16(r2)
2008ec64:	1809883a 	mov	r4,r3
2008ec68:	100b883a 	mov	r5,r2
2008ec6c:	e1bfff17 	ldw	r6,-4(fp)
2008ec70:	008e6240 	call	2008e624 <alt_msgdma_write_extended_descriptor>
2008ec74:	103fea1e 	bne	r2,zero,2008ec20 <__flash_rwdata_start+0xffffce24>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
2008ec78:	00000206 	br	2008ec84 <alt_msgdma_descriptor_async_transfer+0x1d0>
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
2008ec7c:	00bfffc4 	movi	r2,-1
2008ec80:	00003b06 	br	2008ed70 <alt_msgdma_descriptor_async_transfer+0x2bc>
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
2008ec84:	e0bffd17 	ldw	r2,-12(fp)
2008ec88:	10800b17 	ldw	r2,44(r2)
2008ec8c:	10001c26 	beq	r2,zero,2008ed00 <alt_msgdma_descriptor_async_transfer+0x24c>
    {

        control |= (dev->control |
2008ec90:	e0bffd17 	ldw	r2,-12(fp)
2008ec94:	10c00d17 	ldw	r3,52(r2)
2008ec98:	e0bff317 	ldw	r2,-52(fp)
2008ec9c:	1884b03a 	or	r2,r3,r2
2008eca0:	10800514 	ori	r2,r2,20
2008eca4:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
2008eca8:	e0fff317 	ldw	r3,-52(fp)
2008ecac:	00bff7c4 	movi	r2,-33
2008ecb0:	1884703a 	and	r2,r3,r2
2008ecb4:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2008ecb8:	0005303a 	rdctl	r2,status
2008ecbc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2008ecc0:	e0fff917 	ldw	r3,-28(fp)
2008ecc4:	00bfff84 	movi	r2,-2
2008ecc8:	1884703a 	and	r2,r3,r2
2008eccc:	1001703a 	wrctl	status,r2
  
  return context;
2008ecd0:	e0bff917 	ldw	r2,-28(fp)
    /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
2008ecd4:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
2008ecd8:	e0bffd17 	ldw	r2,-12(fp)
2008ecdc:	10800317 	ldw	r2,12(r2)
2008ece0:	10800104 	addi	r2,r2,4
2008ece4:	e0fff317 	ldw	r3,-52(fp)
2008ece8:	10c00035 	stwio	r3,0(r2)
2008ecec:	e0bff417 	ldw	r2,-48(fp)
2008ecf0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2008ecf4:	e0bffa17 	ldw	r2,-24(fp)
2008ecf8:	1001703a 	wrctl	status,r2
2008ecfc:	00001b06 	br	2008ed6c <alt_msgdma_descriptor_async_transfer+0x2b8>
    *   - Stop on an error with any particular descriptor
    *   - Disable interrupt generation
    */
    else
    {
        control |= (dev->control |
2008ed00:	e0bffd17 	ldw	r2,-12(fp)
2008ed04:	10c00d17 	ldw	r3,52(r2)
2008ed08:	e0bff317 	ldw	r2,-52(fp)
2008ed0c:	1884b03a 	or	r2,r3,r2
2008ed10:	10800114 	ori	r2,r2,4
2008ed14:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
2008ed18:	e0fff317 	ldw	r3,-52(fp)
2008ed1c:	00bff3c4 	movi	r2,-49
2008ed20:	1884703a 	and	r2,r3,r2
2008ed24:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2008ed28:	0005303a 	rdctl	r2,status
2008ed2c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2008ed30:	e0fffb17 	ldw	r3,-20(fp)
2008ed34:	00bfff84 	movi	r2,-2
2008ed38:	1884703a 	and	r2,r3,r2
2008ed3c:	1001703a 	wrctl	status,r2
  
  return context;
2008ed40:	e0bffb17 	ldw	r2,-20(fp)
                   (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all();
2008ed44:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
2008ed48:	e0bffd17 	ldw	r2,-12(fp)
2008ed4c:	10800317 	ldw	r2,12(r2)
2008ed50:	10800104 	addi	r2,r2,4
2008ed54:	e0fff317 	ldw	r3,-52(fp)
2008ed58:	10c00035 	stwio	r3,0(r2)
2008ed5c:	e0bff417 	ldw	r2,-48(fp)
2008ed60:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2008ed64:	e0bffc17 	ldw	r2,-16(fp)
2008ed68:	1001703a 	wrctl	status,r2
	 * Now that access to the registers is complete, release the registers
     * semaphore so that other threads can access the registers.
     */
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
2008ed6c:	0005883a 	mov	r2,zero
}
2008ed70:	e037883a 	mov	sp,fp
2008ed74:	dfc00117 	ldw	ra,4(sp)
2008ed78:	df000017 	ldw	fp,0(sp)
2008ed7c:	dec00204 	addi	sp,sp,8
2008ed80:	f800283a 	ret

2008ed84 <alt_msgdma_descriptor_sync_transfer>:
 */
static int alt_msgdma_descriptor_sync_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
2008ed84:	defff004 	addi	sp,sp,-64
2008ed88:	dfc00f15 	stw	ra,60(sp)
2008ed8c:	df000e15 	stw	fp,56(sp)
2008ed90:	df000e04 	addi	fp,sp,56
2008ed94:	e13ffd15 	stw	r4,-12(fp)
2008ed98:	e17ffe15 	stw	r5,-8(fp)
2008ed9c:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control=0;
2008eda0:	e03ff615 	stw	zero,-40(fp)
    alt_irq_context context=0;
2008eda4:	e03ff715 	stw	zero,-36(fp)
    alt_u32 csr_status = 0;
2008eda8:	e03ff215 	stw	zero,-56(fp)
    alt_u16 counter = 0;
2008edac:	e03ff30d 	sth	zero,-52(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
2008edb0:	e0bffd17 	ldw	r2,-12(fp)
2008edb4:	10800317 	ldw	r2,12(r2)
2008edb8:	10800204 	addi	r2,r2,8
2008edbc:	10800037 	ldwio	r2,0(r2)
{
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
2008edc0:	10bfffcc 	andi	r2,r2,65535
2008edc4:	e0bff415 	stw	r2,-48(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
2008edc8:	e0bffd17 	ldw	r2,-12(fp)
2008edcc:	10800317 	ldw	r2,12(r2)
2008edd0:	10800204 	addi	r2,r2,8
2008edd4:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
2008edd8:	1004d43a 	srli	r2,r2,16
2008eddc:	e0bff515 	stw	r2,-44(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
    alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK | 
2008ede0:	00807804 	movi	r2,480
2008ede4:	e0bff815 	stw	r2,-32(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
2008ede8:	00001906 	br	2008ee50 <alt_msgdma_descriptor_sync_transfer+0xcc>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
2008edec:	01000044 	movi	r4,1
2008edf0:	00905100 	call	20090510 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
2008edf4:	e0bff30b 	ldhu	r2,-52(fp)
2008edf8:	1084e230 	cmpltui	r2,r2,5000
2008edfc:	1000051e 	bne	r2,zero,2008ee14 <alt_msgdma_descriptor_sync_transfer+0x90>
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
2008ee00:	01000034 	movhi	r4,0
2008ee04:	21012c04 	addi	r4,r4,1200
2008ee08:	0090f500 	call	20090f50 <alt_printf>
				" for storing descriptor\n");
            return -ETIME;
2008ee0c:	00bff084 	movi	r2,-62
2008ee10:	0000b506 	br	2008f0e8 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;  
2008ee14:	e0bff30b 	ldhu	r2,-52(fp)
2008ee18:	10800044 	addi	r2,r2,1
2008ee1c:	e0bff30d 	sth	r2,-52(fp)
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
2008ee20:	e0bffd17 	ldw	r2,-12(fp)
2008ee24:	10800317 	ldw	r2,12(r2)
2008ee28:	10800204 	addi	r2,r2,8
2008ee2c:	10800037 	ldwio	r2,0(r2)
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
				" for storing descriptor\n");
            return -ETIME;
        }
        counter++;  
        fifo_read_fill_level = (
2008ee30:	10bfffcc 	andi	r2,r2,65535
2008ee34:	e0bff415 	stw	r2,-48(fp)
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
2008ee38:	e0bffd17 	ldw	r2,-12(fp)
2008ee3c:	10800317 	ldw	r2,12(r2)
2008ee40:	10800204 	addi	r2,r2,8
2008ee44:	10800037 	ldwio	r2,0(r2)
        counter++;  
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
2008ee48:	1004d43a 	srli	r2,r2,16
2008ee4c:	e0bff515 	stw	r2,-44(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
2008ee50:	e0bffd17 	ldw	r2,-12(fp)
2008ee54:	10800917 	ldw	r2,36(r2)
2008ee58:	e0fff517 	ldw	r3,-44(fp)
2008ee5c:	18bfe32e 	bgeu	r3,r2,2008edec <__flash_rwdata_start+0xffffcff0>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
2008ee60:	e0bffd17 	ldw	r2,-12(fp)
2008ee64:	10800917 	ldw	r2,36(r2)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
2008ee68:	e0fff417 	ldw	r3,-48(fp)
2008ee6c:	18bfdf2e 	bgeu	r3,r2,2008edec <__flash_rwdata_start+0xffffcff0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2008ee70:	0005303a 	rdctl	r2,status
2008ee74:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2008ee78:	e0fff917 	ldw	r3,-28(fp)
2008ee7c:	00bfff84 	movi	r2,-2
2008ee80:	1884703a 	and	r2,r3,r2
2008ee84:	1001703a 	wrctl	status,r2
  
  return context;
2008ee88:	e0bff917 	ldw	r2,-28(fp)
	ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
2008ee8c:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
2008ee90:	e0bffd17 	ldw	r2,-12(fp)
2008ee94:	10800317 	ldw	r2,12(r2)
2008ee98:	10800104 	addi	r2,r2,4
2008ee9c:	00c00804 	movi	r3,32
2008eea0:	10c00035 	stwio	r3,0(r2)
        ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
2008eea4:	e0bffd17 	ldw	r2,-12(fp)
2008eea8:	10800317 	ldw	r2,12(r2)
2008eeac:	e0fffd17 	ldw	r3,-12(fp)
2008eeb0:	18c00317 	ldw	r3,12(r3)
2008eeb4:	18c00037 	ldwio	r3,0(r3)
2008eeb8:	10c00035 	stwio	r3,0(r2)
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
2008eebc:	e0bffe17 	ldw	r2,-8(fp)
2008eec0:	10001b26 	beq	r2,zero,2008ef30 <alt_msgdma_descriptor_sync_transfer+0x1ac>
2008eec4:	e0bfff17 	ldw	r2,-4(fp)
2008eec8:	1000191e 	bne	r2,zero,2008ef30 <alt_msgdma_descriptor_sync_transfer+0x1ac>
    {
        counter = 0; /* reset counter */
2008eecc:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
2008eed0:	00000d06 	br	2008ef08 <alt_msgdma_descriptor_sync_transfer+0x184>
			dev->csr_base, dev->descriptor_base, standard_desc))
        {     
            alt_busy_sleep(1); /* delay 1us */
2008eed4:	01000044 	movi	r4,1
2008eed8:	00905100 	call	20090510 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
2008eedc:	e0bff30b 	ldhu	r2,-52(fp)
2008eee0:	1084e230 	cmpltui	r2,r2,5000
2008eee4:	1000051e 	bne	r2,zero,2008eefc <alt_msgdma_descriptor_sync_transfer+0x178>
            {
                alt_printf("time out after 5 msec while writing standard" 
2008eee8:	01000034 	movhi	r4,0
2008eeec:	21014004 	addi	r4,r4,1280
2008eef0:	0090f500 	call	20090f50 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
2008eef4:	00bff084 	movi	r2,-62
2008eef8:	00007b06 	br	2008f0e8 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;    
2008eefc:	e0bff30b 	ldhu	r2,-52(fp)
2008ef00:	10800044 	addi	r2,r2,1
2008ef04:	e0bff30d 	sth	r2,-52(fp)
    if (NULL != standard_desc && NULL == extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
2008ef08:	e0bffd17 	ldw	r2,-12(fp)
2008ef0c:	10c00317 	ldw	r3,12(r2)
2008ef10:	e0bffd17 	ldw	r2,-12(fp)
2008ef14:	10800417 	ldw	r2,16(r2)
2008ef18:	1809883a 	mov	r4,r3
2008ef1c:	100b883a 	mov	r5,r2
2008ef20:	e1bffe17 	ldw	r6,-8(fp)
2008ef24:	008e5900 	call	2008e590 <alt_msgdma_write_standard_descriptor>
2008ef28:	103fea1e 	bne	r2,zero,2008eed4 <__flash_rwdata_start+0xffffd0d8>
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
2008ef2c:	00001f06 	br	2008efac <alt_msgdma_descriptor_sync_transfer+0x228>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
2008ef30:	e0bffe17 	ldw	r2,-8(fp)
2008ef34:	10001b1e 	bne	r2,zero,2008efa4 <alt_msgdma_descriptor_sync_transfer+0x220>
2008ef38:	e0bfff17 	ldw	r2,-4(fp)
2008ef3c:	10001926 	beq	r2,zero,2008efa4 <alt_msgdma_descriptor_sync_transfer+0x220>
    {
        counter = 0; /* reset counter */
2008ef40:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
2008ef44:	00000d06 	br	2008ef7c <alt_msgdma_descriptor_sync_transfer+0x1f8>
			dev->csr_base, dev->descriptor_base, extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
2008ef48:	01000044 	movi	r4,1
2008ef4c:	00905100 	call	20090510 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
2008ef50:	e0bff30b 	ldhu	r2,-52(fp)
2008ef54:	1084e230 	cmpltui	r2,r2,5000
2008ef58:	1000051e 	bne	r2,zero,2008ef70 <alt_msgdma_descriptor_sync_transfer+0x1ec>
            {
                alt_printf("time out after 5 msec while writing extended" 
2008ef5c:	01000034 	movhi	r4,0
2008ef60:	21015104 	addi	r4,r4,1348
2008ef64:	0090f500 	call	20090f50 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
2008ef68:	00bff084 	movi	r2,-62
2008ef6c:	00005e06 	br	2008f0e8 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;
2008ef70:	e0bff30b 	ldhu	r2,-52(fp)
2008ef74:	10800044 	addi	r2,r2,1
2008ef78:	e0bff30d 	sth	r2,-52(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
2008ef7c:	e0bffd17 	ldw	r2,-12(fp)
2008ef80:	10c00317 	ldw	r3,12(r2)
2008ef84:	e0bffd17 	ldw	r2,-12(fp)
2008ef88:	10800417 	ldw	r2,16(r2)
2008ef8c:	1809883a 	mov	r4,r3
2008ef90:	100b883a 	mov	r5,r2
2008ef94:	e1bfff17 	ldw	r6,-4(fp)
2008ef98:	008e6240 	call	2008e624 <alt_msgdma_write_extended_descriptor>
2008ef9c:	103fea1e 	bne	r2,zero,2008ef48 <__flash_rwdata_start+0xffffd14c>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
2008efa0:	00000206 	br	2008efac <alt_msgdma_descriptor_sync_transfer+0x228>
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
2008efa4:	00bfffc4 	movi	r2,-1
2008efa8:	00004f06 	br	2008f0e8 <alt_msgdma_descriptor_sync_transfer+0x364>
    * Set up msgdma controller to:
    * - Disable interrupt generation
    * - Run once a valid descriptor is written to controller
    * - Stop on an error with any particular descriptor
    */
     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
2008efac:	e0bffd17 	ldw	r2,-12(fp)
2008efb0:	10800317 	ldw	r2,12(r2)
2008efb4:	10800104 	addi	r2,r2,4
2008efb8:	e0fffd17 	ldw	r3,-12(fp)
2008efbc:	19000d17 	ldw	r4,52(r3)
2008efc0:	00fff2c4 	movi	r3,-53
2008efc4:	20c6703a 	and	r3,r4,r3
2008efc8:	18c00114 	ori	r3,r3,4
2008efcc:	10c00035 	stwio	r3,0(r2)
2008efd0:	e0bff717 	ldw	r2,-36(fp)
2008efd4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2008efd8:	e0bffa17 	ldw	r2,-24(fp)
2008efdc:	1001703a 	wrctl	status,r2
		(~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
		(~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK)) ;
	 
	alt_irq_enable_all(context);
     
    counter = 0; /* reset counter */ 
2008efe0:	e03ff30d 	sth	zero,-52(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
2008efe4:	e0bffd17 	ldw	r2,-12(fp)
2008efe8:	10800317 	ldw	r2,12(r2)
2008efec:	10800037 	ldwio	r2,0(r2)
2008eff0:	e0bff215 	stw	r2,-56(fp)
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
2008eff4:	00001106 	br	2008f03c <alt_msgdma_descriptor_sync_transfer+0x2b8>
    {
        alt_busy_sleep(1); /* delay 1us */
2008eff8:	01000044 	movi	r4,1
2008effc:	00905100 	call	20090510 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
2008f000:	e0bff30b 	ldhu	r2,-52(fp)
2008f004:	1084e230 	cmpltui	r2,r2,5000
2008f008:	1000051e 	bne	r2,zero,2008f020 <alt_msgdma_descriptor_sync_transfer+0x29c>
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
2008f00c:	01000034 	movhi	r4,0
2008f010:	21016204 	addi	r4,r4,1416
2008f014:	0090f500 	call	20090f50 <alt_printf>
			* Now that access to the registers is complete, release the registers
			* semaphore so that other threads can access the registers.
			*/
			ALT_SEM_POST (dev->regs_lock);
			
            return -ETIME;
2008f018:	00bff084 	movi	r2,-62
2008f01c:	00003206 	br	2008f0e8 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;
2008f020:	e0bff30b 	ldhu	r2,-52(fp)
2008f024:	10800044 	addi	r2,r2,1
2008f028:	e0bff30d 	sth	r2,-52(fp)
        csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
2008f02c:	e0bffd17 	ldw	r2,-12(fp)
2008f030:	10800317 	ldw	r2,12(r2)
2008f034:	10800037 	ldwio	r2,0(r2)
2008f038:	e0bff215 	stw	r2,-56(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
2008f03c:	e0fff217 	ldw	r3,-56(fp)
2008f040:	e0bff817 	ldw	r2,-32(fp)
2008f044:	1884703a 	and	r2,r3,r2
2008f048:	1000031e 	bne	r2,zero,2008f058 <alt_msgdma_descriptor_sync_transfer+0x2d4>
2008f04c:	e0bff217 	ldw	r2,-56(fp)
2008f050:	1080004c 	andi	r2,r2,1
2008f054:	103fe81e 	bne	r2,zero,2008eff8 <__flash_rwdata_start+0xffffd1fc>
    }
    

    /*Errors or conditions causing the dispatcher stopping issuing read/write 
      commands to masters*/
    if(0 != (csr_status & error))
2008f058:	e0fff217 	ldw	r3,-56(fp)
2008f05c:	e0bff817 	ldw	r2,-32(fp)
2008f060:	1884703a 	and	r2,r3,r2
2008f064:	10000226 	beq	r2,zero,2008f070 <alt_msgdma_descriptor_sync_transfer+0x2ec>
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        return error;
2008f068:	e0bff817 	ldw	r2,-32(fp)
2008f06c:	00001e06 	br	2008f0e8 <alt_msgdma_descriptor_sync_transfer+0x364>
    }

    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) | 
2008f070:	e0bffd17 	ldw	r2,-12(fp)
2008f074:	10800317 	ldw	r2,12(r2)
2008f078:	10800104 	addi	r2,r2,4
2008f07c:	10800037 	ldwio	r2,0(r2)
2008f080:	10800814 	ori	r2,r2,32
2008f084:	e0bff615 	stw	r2,-40(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2008f088:	0005303a 	rdctl	r2,status
2008f08c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2008f090:	e0fffb17 	ldw	r3,-20(fp)
2008f094:	00bfff84 	movi	r2,-2
2008f098:	1884703a 	and	r2,r3,r2
2008f09c:	1001703a 	wrctl	status,r2
  
  return context;
2008f0a0:	e0bffb17 	ldw	r2,-20(fp)
	ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();  
2008f0a4:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
2008f0a8:	e0bffd17 	ldw	r2,-12(fp)
2008f0ac:	10800317 	ldw	r2,12(r2)
2008f0b0:	10800104 	addi	r2,r2,4
2008f0b4:	e0fff617 	ldw	r3,-40(fp)
2008f0b8:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
2008f0bc:	e0bffd17 	ldw	r2,-12(fp)
2008f0c0:	10800317 	ldw	r2,12(r2)
2008f0c4:	e0fffd17 	ldw	r3,-12(fp)
2008f0c8:	18c00317 	ldw	r3,12(r3)
2008f0cc:	18c00037 	ldwio	r3,0(r3)
2008f0d0:	10c00035 	stwio	r3,0(r2)
2008f0d4:	e0bff717 	ldw	r2,-36(fp)
2008f0d8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2008f0dc:	e0bffc17 	ldw	r2,-16(fp)
2008f0e0:	1001703a 	wrctl	status,r2
	* Now that access to the registers is complete, release the registers
	* semaphore so that other threads can access the registers.
	*/
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
2008f0e4:	0005883a 	mov	r2,zero

}
2008f0e8:	e037883a 	mov	sp,fp
2008f0ec:	dfc00117 	ldw	ra,4(sp)
2008f0f0:	df000017 	ldw	fp,0(sp)
2008f0f4:	dec00204 	addi	sp,sp,8
2008f0f8:	f800283a 	ret

2008f0fc <alt_msgdma_construct_standard_st_to_mm_descriptor>:
 */
int alt_msgdma_construct_standard_st_to_mm_descriptor (
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *write_address, alt_u32 length, alt_u32 control)
{
2008f0fc:	defff804 	addi	sp,sp,-32
2008f100:	dfc00715 	stw	ra,28(sp)
2008f104:	df000615 	stw	fp,24(sp)
2008f108:	df000604 	addi	fp,sp,24
2008f10c:	e13ffc15 	stw	r4,-16(fp)
2008f110:	e17ffd15 	stw	r5,-12(fp)
2008f114:	e1bffe15 	stw	r6,-8(fp)
2008f118:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, NULL, 
2008f11c:	e0bfff17 	ldw	r2,-4(fp)
2008f120:	d8800015 	stw	r2,0(sp)
2008f124:	e0800217 	ldw	r2,8(fp)
2008f128:	d8800115 	stw	r2,4(sp)
2008f12c:	e13ffc17 	ldw	r4,-16(fp)
2008f130:	e17ffd17 	ldw	r5,-12(fp)
2008f134:	000d883a 	mov	r6,zero
2008f138:	e1fffe17 	ldw	r7,-8(fp)
2008f13c:	008e8d40 	call	2008e8d4 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
2008f140:	e037883a 	mov	sp,fp
2008f144:	dfc00117 	ldw	ra,4(sp)
2008f148:	df000017 	ldw	fp,0(sp)
2008f14c:	dec00204 	addi	sp,sp,8
2008f150:	f800283a 	ret

2008f154 <alt_msgdma_construct_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address,
	alt_u32 length,
	alt_u32 control)
{
2008f154:	defff804 	addi	sp,sp,-32
2008f158:	dfc00715 	stw	ra,28(sp)
2008f15c:	df000615 	stw	fp,24(sp)
2008f160:	df000604 	addi	fp,sp,24
2008f164:	e13ffc15 	stw	r4,-16(fp)
2008f168:	e17ffd15 	stw	r5,-12(fp)
2008f16c:	e1bffe15 	stw	r6,-8(fp)
2008f170:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
2008f174:	e0bfff17 	ldw	r2,-4(fp)
2008f178:	d8800015 	stw	r2,0(sp)
2008f17c:	e0800217 	ldw	r2,8(fp)
2008f180:	d8800115 	stw	r2,4(sp)
2008f184:	e13ffc17 	ldw	r4,-16(fp)
2008f188:	e17ffd17 	ldw	r5,-12(fp)
2008f18c:	e1bffe17 	ldw	r6,-8(fp)
2008f190:	000f883a 	mov	r7,zero
2008f194:	008e8d40 	call	2008e8d4 <alt_msgdma_construct_standard_descriptor>
            NULL, length, control);

}
2008f198:	e037883a 	mov	sp,fp
2008f19c:	dfc00117 	ldw	ra,4(sp)
2008f1a0:	df000017 	ldw	fp,0(sp)
2008f1a4:	dec00204 	addi	sp,sp,8
2008f1a8:	f800283a 	ret

2008f1ac <alt_msgdma_construct_standard_mm_to_mm_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
2008f1ac:	defff804 	addi	sp,sp,-32
2008f1b0:	dfc00715 	stw	ra,28(sp)
2008f1b4:	df000615 	stw	fp,24(sp)
2008f1b8:	df000604 	addi	fp,sp,24
2008f1bc:	e13ffc15 	stw	r4,-16(fp)
2008f1c0:	e17ffd15 	stw	r5,-12(fp)
2008f1c4:	e1bffe15 	stw	r6,-8(fp)
2008f1c8:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
2008f1cc:	e0800217 	ldw	r2,8(fp)
2008f1d0:	d8800015 	stw	r2,0(sp)
2008f1d4:	e0800317 	ldw	r2,12(fp)
2008f1d8:	d8800115 	stw	r2,4(sp)
2008f1dc:	e13ffc17 	ldw	r4,-16(fp)
2008f1e0:	e17ffd17 	ldw	r5,-12(fp)
2008f1e4:	e1bffe17 	ldw	r6,-8(fp)
2008f1e8:	e1ffff17 	ldw	r7,-4(fp)
2008f1ec:	008e8d40 	call	2008e8d4 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
2008f1f0:	e037883a 	mov	sp,fp
2008f1f4:	dfc00117 	ldw	ra,4(sp)
2008f1f8:	df000017 	ldw	fp,0(sp)
2008f1fc:	dec00204 	addi	sp,sp,8
2008f200:	f800283a 	ret

2008f204 <alt_msgdma_construct_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 write_burst_count, 
	alt_u16 write_stride)
{
2008f204:	defff004 	addi	sp,sp,-64
2008f208:	dfc00f15 	stw	ra,60(sp)
2008f20c:	df000e15 	stw	fp,56(sp)
2008f210:	df000e04 	addi	fp,sp,56
2008f214:	e13ff915 	stw	r4,-28(fp)
2008f218:	e17ffa15 	stw	r5,-24(fp)
2008f21c:	e1bffb15 	stw	r6,-20(fp)
2008f220:	e1fffc15 	stw	r7,-16(fp)
2008f224:	e1000317 	ldw	r4,12(fp)
2008f228:	e0c00417 	ldw	r3,16(fp)
2008f22c:	e0800517 	ldw	r2,20(fp)
2008f230:	e13ffd0d 	sth	r4,-12(fp)
2008f234:	e0fffe05 	stb	r3,-8(fp)
2008f238:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
2008f23c:	e13ffd0b 	ldhu	r4,-12(fp)
2008f240:	e0fffe03 	ldbu	r3,-8(fp)
2008f244:	e0bfff0b 	ldhu	r2,-4(fp)
2008f248:	e17ffc17 	ldw	r5,-16(fp)
2008f24c:	d9400015 	stw	r5,0(sp)
2008f250:	e1400217 	ldw	r5,8(fp)
2008f254:	d9400115 	stw	r5,4(sp)
2008f258:	d9000215 	stw	r4,8(sp)
2008f25c:	d8000315 	stw	zero,12(sp)
2008f260:	d8c00415 	stw	r3,16(sp)
2008f264:	d8000515 	stw	zero,20(sp)
2008f268:	d8800615 	stw	r2,24(sp)
2008f26c:	e13ff917 	ldw	r4,-28(fp)
2008f270:	e17ffa17 	ldw	r5,-24(fp)
2008f274:	000d883a 	mov	r6,zero
2008f278:	e1fffb17 	ldw	r7,-20(fp)
2008f27c:	008e9600 	call	2008e960 <alt_msgdma_construct_extended_descriptor>
            NULL, write_address, length, control, sequence_number, 0, 
            write_burst_count, 0, write_stride);
}
2008f280:	e037883a 	mov	sp,fp
2008f284:	dfc00117 	ldw	ra,4(sp)
2008f288:	df000017 	ldw	fp,0(sp)
2008f28c:	dec00204 	addi	sp,sp,8
2008f290:	f800283a 	ret

2008f294 <alt_msgdma_construct_extended_mm_to_st_descriptor>:
	alt_u32 length,
	alt_u32 control,
	alt_u16 sequence_number,
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
2008f294:	defff004 	addi	sp,sp,-64
2008f298:	dfc00f15 	stw	ra,60(sp)
2008f29c:	df000e15 	stw	fp,56(sp)
2008f2a0:	df000e04 	addi	fp,sp,56
2008f2a4:	e13ff915 	stw	r4,-28(fp)
2008f2a8:	e17ffa15 	stw	r5,-24(fp)
2008f2ac:	e1bffb15 	stw	r6,-20(fp)
2008f2b0:	e1fffc15 	stw	r7,-16(fp)
2008f2b4:	e1000317 	ldw	r4,12(fp)
2008f2b8:	e0c00417 	ldw	r3,16(fp)
2008f2bc:	e0800517 	ldw	r2,20(fp)
2008f2c0:	e13ffd0d 	sth	r4,-12(fp)
2008f2c4:	e0fffe05 	stb	r3,-8(fp)
2008f2c8:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, read_address, 
2008f2cc:	e13ffd0b 	ldhu	r4,-12(fp)
2008f2d0:	e0fffe03 	ldbu	r3,-8(fp)
2008f2d4:	e0bfff0b 	ldhu	r2,-4(fp)
2008f2d8:	e17ffc17 	ldw	r5,-16(fp)
2008f2dc:	d9400015 	stw	r5,0(sp)
2008f2e0:	e1400217 	ldw	r5,8(fp)
2008f2e4:	d9400115 	stw	r5,4(sp)
2008f2e8:	d9000215 	stw	r4,8(sp)
2008f2ec:	d8c00315 	stw	r3,12(sp)
2008f2f0:	d8000415 	stw	zero,16(sp)
2008f2f4:	d8800515 	stw	r2,20(sp)
2008f2f8:	d8000615 	stw	zero,24(sp)
2008f2fc:	e13ff917 	ldw	r4,-28(fp)
2008f300:	e17ffa17 	ldw	r5,-24(fp)
2008f304:	e1bffb17 	ldw	r6,-20(fp)
2008f308:	000f883a 	mov	r7,zero
2008f30c:	008e9600 	call	2008e960 <alt_msgdma_construct_extended_descriptor>
            NULL, length, control, sequence_number, read_burst_count, 0, 
            read_stride, 0);

}
2008f310:	e037883a 	mov	sp,fp
2008f314:	dfc00117 	ldw	ra,4(sp)
2008f318:	df000017 	ldw	fp,0(sp)
2008f31c:	dec00204 	addi	sp,sp,8
2008f320:	f800283a 	ret

2008f324 <alt_msgdma_construct_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
2008f324:	deffee04 	addi	sp,sp,-72
2008f328:	dfc01115 	stw	ra,68(sp)
2008f32c:	df001015 	stw	fp,64(sp)
2008f330:	df001004 	addi	fp,sp,64
2008f334:	e13ff715 	stw	r4,-36(fp)
2008f338:	e17ff815 	stw	r5,-32(fp)
2008f33c:	e1bff915 	stw	r6,-28(fp)
2008f340:	e1fffa15 	stw	r7,-24(fp)
2008f344:	e1800417 	ldw	r6,16(fp)
2008f348:	e1400517 	ldw	r5,20(fp)
2008f34c:	e1000617 	ldw	r4,24(fp)
2008f350:	e0c00717 	ldw	r3,28(fp)
2008f354:	e0800817 	ldw	r2,32(fp)
2008f358:	e1bffb0d 	sth	r6,-20(fp)
2008f35c:	e17ffc05 	stb	r5,-16(fp)
2008f360:	e13ffd05 	stb	r4,-12(fp)
2008f364:	e0fffe0d 	sth	r3,-8(fp)
2008f368:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
2008f36c:	e1bffb0b 	ldhu	r6,-20(fp)
2008f370:	e17ffc03 	ldbu	r5,-16(fp)
2008f374:	e13ffd03 	ldbu	r4,-12(fp)
2008f378:	e0fffe0b 	ldhu	r3,-8(fp)
2008f37c:	e0bfff0b 	ldhu	r2,-4(fp)
2008f380:	e1c00217 	ldw	r7,8(fp)
2008f384:	d9c00015 	stw	r7,0(sp)
2008f388:	e1c00317 	ldw	r7,12(fp)
2008f38c:	d9c00115 	stw	r7,4(sp)
2008f390:	d9800215 	stw	r6,8(sp)
2008f394:	d9400315 	stw	r5,12(sp)
2008f398:	d9000415 	stw	r4,16(sp)
2008f39c:	d8c00515 	stw	r3,20(sp)
2008f3a0:	d8800615 	stw	r2,24(sp)
2008f3a4:	e13ff717 	ldw	r4,-36(fp)
2008f3a8:	e17ff817 	ldw	r5,-32(fp)
2008f3ac:	e1bff917 	ldw	r6,-28(fp)
2008f3b0:	e1fffa17 	ldw	r7,-24(fp)
2008f3b4:	008e9600 	call	2008e960 <alt_msgdma_construct_extended_descriptor>
            read_address, write_address, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
2008f3b8:	e037883a 	mov	sp,fp
2008f3bc:	dfc00117 	ldw	ra,4(sp)
2008f3c0:	df000017 	ldw	fp,0(sp)
2008f3c4:	dec00204 	addi	sp,sp,8
2008f3c8:	f800283a 	ret

2008f3cc <alt_msgdma_construct_prefetcher_standard_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
2008f3cc:	defffb04 	addi	sp,sp,-20
2008f3d0:	df000415 	stw	fp,16(sp)
2008f3d4:	df000404 	addi	fp,sp,16
2008f3d8:	e13ffc15 	stw	r4,-16(fp)
2008f3dc:	e17ffd15 	stw	r5,-12(fp)
2008f3e0:	e1bffe15 	stw	r6,-8(fp)
2008f3e4:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
2008f3e8:	e0bffc17 	ldw	r2,-16(fp)
2008f3ec:	10c01217 	ldw	r3,72(r2)
2008f3f0:	e0800117 	ldw	r2,4(fp)
2008f3f4:	18800436 	bltu	r3,r2,2008f408 <alt_msgdma_construct_prefetcher_standard_descriptor+0x3c>
       dev->enhanced_features != 0
2008f3f8:	e0bffc17 	ldw	r2,-16(fp)
2008f3fc:	10801703 	ldbu	r2,92(r2)
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
2008f400:	10803fcc 	andi	r2,r2,255
2008f404:	10000226 	beq	r2,zero,2008f410 <alt_msgdma_construct_prefetcher_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
2008f408:	00bffa84 	movi	r2,-22
2008f40c:	00001406 	br	2008f460 <alt_msgdma_construct_prefetcher_standard_descriptor+0x94>
    }
    descriptor->read_address = read_address;
2008f410:	e0bffd17 	ldw	r2,-12(fp)
2008f414:	e0fffe17 	ldw	r3,-8(fp)
2008f418:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
2008f41c:	e0bffd17 	ldw	r2,-12(fp)
2008f420:	e0ffff17 	ldw	r3,-4(fp)
2008f424:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
2008f428:	e0bffd17 	ldw	r2,-12(fp)
2008f42c:	e0c00117 	ldw	r3,4(fp)
2008f430:	10c00215 	stw	r3,8(r2)
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
2008f434:	e0fffd17 	ldw	r3,-12(fp)
2008f438:	e0bffd17 	ldw	r2,-12(fp)
2008f43c:	10c00315 	stw	r3,12(r2)
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
2008f440:	e0c00217 	ldw	r3,8(fp)
2008f444:	00900034 	movhi	r2,16384
2008f448:	10bfffc4 	addi	r2,r2,-1
2008f44c:	1884703a 	and	r2,r3,r2
2008f450:	10e00034 	orhi	r3,r2,32768
    descriptor->transfer_length = length;
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
2008f454:	e0bffd17 	ldw	r2,-12(fp)
2008f458:	10c00715 	stw	r3,28(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
2008f45c:	0005883a 	mov	r2,zero
}
2008f460:	e037883a 	mov	sp,fp
2008f464:	df000017 	ldw	fp,0(sp)
2008f468:	dec00104 	addi	sp,sp,4
2008f46c:	f800283a 	ret

2008f470 <alt_msgdma_construct_prefetcher_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
2008f470:	defff404 	addi	sp,sp,-48
2008f474:	df000b15 	stw	fp,44(sp)
2008f478:	df000b04 	addi	fp,sp,44
2008f47c:	e13ff715 	stw	r4,-36(fp)
2008f480:	e17ff815 	stw	r5,-32(fp)
2008f484:	e1bff915 	stw	r6,-28(fp)
2008f488:	e1fffa15 	stw	r7,-24(fp)
2008f48c:	e1800517 	ldw	r6,20(fp)
2008f490:	e1400617 	ldw	r5,24(fp)
2008f494:	e1000717 	ldw	r4,28(fp)
2008f498:	e0c00817 	ldw	r3,32(fp)
2008f49c:	e0800917 	ldw	r2,36(fp)
2008f4a0:	e1bffb0d 	sth	r6,-20(fp)
2008f4a4:	e17ffc05 	stb	r5,-16(fp)
2008f4a8:	e13ffd05 	stb	r4,-12(fp)
2008f4ac:	e0fffe0d 	sth	r3,-8(fp)
2008f4b0:	e0bfff0d 	sth	r2,-4(fp)
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
2008f4b4:	e0bff717 	ldw	r2,-36(fp)
2008f4b8:	10c01217 	ldw	r3,72(r2)
2008f4bc:	e0800317 	ldw	r2,12(fp)
2008f4c0:	18801936 	bltu	r3,r2,2008f528 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
2008f4c4:	e13ff717 	ldw	r4,-36(fp)
2008f4c8:	20801317 	ldw	r2,76(r4)
2008f4cc:	20c01417 	ldw	r3,80(r4)
2008f4d0:	e13ffe0b 	ldhu	r4,-8(fp)
2008f4d4:	213fffcc 	andi	r4,r4,65535
2008f4d8:	2015883a 	mov	r10,r4
2008f4dc:	0017883a 	mov	r11,zero
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
2008f4e0:	1ac01136 	bltu	r3,r11,2008f528 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
2008f4e4:	58c0011e 	bne	r11,r3,2008f4ec <alt_msgdma_construct_prefetcher_extended_descriptor+0x7c>
2008f4e8:	12800f36 	bltu	r2,r10,2008f528 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
2008f4ec:	e13ff717 	ldw	r4,-36(fp)
2008f4f0:	20801317 	ldw	r2,76(r4)
2008f4f4:	20c01417 	ldw	r3,80(r4)
2008f4f8:	e13fff0b 	ldhu	r4,-4(fp)
2008f4fc:	213fffcc 	andi	r4,r4,65535
2008f500:	2011883a 	mov	r8,r4
2008f504:	0013883a 	mov	r9,zero
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
2008f508:	1a400736 	bltu	r3,r9,2008f528 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
2008f50c:	48c0011e 	bne	r9,r3,2008f514 <alt_msgdma_construct_prefetcher_extended_descriptor+0xa4>
2008f510:	12000536 	bltu	r2,r8,2008f528 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
2008f514:	e0bff717 	ldw	r2,-36(fp)
2008f518:	10801703 	ldbu	r2,92(r2)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
2008f51c:	10803fcc 	andi	r2,r2,255
2008f520:	10800060 	cmpeqi	r2,r2,1
2008f524:	1000021e 	bne	r2,zero,2008f530 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
2008f528:	00bffa84 	movi	r2,-22
2008f52c:	00003106 	br	2008f5f4 <alt_msgdma_construct_prefetcher_extended_descriptor+0x184>
    }
    
    descriptor->read_address_high = read_address_high;
2008f530:	e0bff817 	ldw	r2,-32(fp)
2008f534:	e0fff917 	ldw	r3,-28(fp)
2008f538:	10c00915 	stw	r3,36(r2)
    descriptor->read_address_low = read_address_low;
2008f53c:	e0bff817 	ldw	r2,-32(fp)
2008f540:	e0fffa17 	ldw	r3,-24(fp)
2008f544:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_high = write_address_high;
2008f548:	e0bff817 	ldw	r2,-32(fp)
2008f54c:	e0c00117 	ldw	r3,4(fp)
2008f550:	10c00a15 	stw	r3,40(r2)
    descriptor->write_address_low = write_address_low;
2008f554:	e0bff817 	ldw	r2,-32(fp)
2008f558:	e0c00217 	ldw	r3,8(fp)
2008f55c:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
2008f560:	e0bff817 	ldw	r2,-32(fp)
2008f564:	e0c00317 	ldw	r3,12(fp)
2008f568:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
2008f56c:	e0bff817 	ldw	r2,-32(fp)
2008f570:	e0fffb0b 	ldhu	r3,-20(fp)
2008f574:	10c0070d 	sth	r3,28(r2)
    descriptor->read_burst_count = read_burst_count;
2008f578:	e0bff817 	ldw	r2,-32(fp)
2008f57c:	e0fffc03 	ldbu	r3,-16(fp)
2008f580:	10c00785 	stb	r3,30(r2)
    descriptor->write_burst_count = write_burst_count;
2008f584:	e0bff817 	ldw	r2,-32(fp)
2008f588:	e0fffd03 	ldbu	r3,-12(fp)
2008f58c:	10c007c5 	stb	r3,31(r2)
    descriptor->read_stride = read_stride;
2008f590:	e0bff817 	ldw	r2,-32(fp)
2008f594:	e0fffe0b 	ldhu	r3,-8(fp)
2008f598:	10c0080d 	sth	r3,32(r2)
    descriptor->write_stride = write_stride;
2008f59c:	e0bff817 	ldw	r2,-32(fp)
2008f5a0:	e0ffff0b 	ldhu	r3,-4(fp)
2008f5a4:	10c0088d 	sth	r3,34(r2)
    /* have descriptor point to itself */
	node_addr.u64 = (uintptr_t)descriptor;
2008f5a8:	e0bff817 	ldw	r2,-32(fp)
2008f5ac:	1019883a 	mov	r12,r2
2008f5b0:	001b883a 	mov	r13,zero
2008f5b4:	e33ff515 	stw	r12,-44(fp)
2008f5b8:	e37ff615 	stw	r13,-40(fp)
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
2008f5bc:	e0fff517 	ldw	r3,-44(fp)
2008f5c0:	e0bff817 	ldw	r2,-32(fp)
2008f5c4:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
2008f5c8:	e0fff617 	ldw	r3,-40(fp)
2008f5cc:	e0bff817 	ldw	r2,-32(fp)
2008f5d0:	10c00b15 	stw	r3,44(r2)
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
2008f5d4:	e0c00417 	ldw	r3,16(fp)
2008f5d8:	00900034 	movhi	r2,16384
2008f5dc:	10bfffc4 	addi	r2,r2,-1
2008f5e0:	1884703a 	and	r2,r3,r2
2008f5e4:	10e00034 	orhi	r3,r2,32768
	node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
2008f5e8:	e0bff817 	ldw	r2,-32(fp)
2008f5ec:	10c00f15 	stw	r3,60(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
2008f5f0:	0005883a 	mov	r2,zero
}
2008f5f4:	e037883a 	mov	sp,fp
2008f5f8:	df000017 	ldw	fp,0(sp)
2008f5fc:	dec00104 	addi	sp,sp,4
2008f600:	f800283a 	ret

2008f604 <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address,
	alt_u32 write_address,
	alt_u32 length,
	alt_u32 control)
{
2008f604:	defff804 	addi	sp,sp,-32
2008f608:	dfc00715 	stw	ra,28(sp)
2008f60c:	df000615 	stw	fp,24(sp)
2008f610:	df000604 	addi	fp,sp,24
2008f614:	e13ffc15 	stw	r4,-16(fp)
2008f618:	e17ffd15 	stw	r5,-12(fp)
2008f61c:	e1bffe15 	stw	r6,-8(fp)
2008f620:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
2008f624:	e0800217 	ldw	r2,8(fp)
2008f628:	d8800015 	stw	r2,0(sp)
2008f62c:	e0800317 	ldw	r2,12(fp)
2008f630:	d8800115 	stw	r2,4(sp)
2008f634:	e13ffc17 	ldw	r4,-16(fp)
2008f638:	e17ffd17 	ldw	r5,-12(fp)
2008f63c:	e1bffe17 	ldw	r6,-8(fp)
2008f640:	e1ffff17 	ldw	r7,-4(fp)
2008f644:	008f3cc0 	call	2008f3cc <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, write_address, length, control);
}
2008f648:	e037883a 	mov	sp,fp
2008f64c:	dfc00117 	ldw	ra,4(sp)
2008f650:	df000017 	ldw	fp,0(sp)
2008f654:	dec00204 	addi	sp,sp,8
2008f658:	f800283a 	ret

2008f65c <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
2008f65c:	defff804 	addi	sp,sp,-32
2008f660:	dfc00715 	stw	ra,28(sp)
2008f664:	df000615 	stw	fp,24(sp)
2008f668:	df000604 	addi	fp,sp,24
2008f66c:	e13ffc15 	stw	r4,-16(fp)
2008f670:	e17ffd15 	stw	r5,-12(fp)
2008f674:	e1bffe15 	stw	r6,-8(fp)
2008f678:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
2008f67c:	e0bfff17 	ldw	r2,-4(fp)
2008f680:	d8800015 	stw	r2,0(sp)
2008f684:	e0800217 	ldw	r2,8(fp)
2008f688:	d8800115 	stw	r2,4(sp)
2008f68c:	e13ffc17 	ldw	r4,-16(fp)
2008f690:	e17ffd17 	ldw	r5,-12(fp)
2008f694:	000d883a 	mov	r6,zero
2008f698:	e1fffe17 	ldw	r7,-8(fp)
2008f69c:	008f3cc0 	call	2008f3cc <alt_msgdma_construct_prefetcher_standard_descriptor>
    		0, write_address, length, control);
}
2008f6a0:	e037883a 	mov	sp,fp
2008f6a4:	dfc00117 	ldw	ra,4(sp)
2008f6a8:	df000017 	ldw	fp,0(sp)
2008f6ac:	dec00204 	addi	sp,sp,8
2008f6b0:	f800283a 	ret

2008f6b4 <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 read_address, 
	alt_u32 length, 
	alt_u32 control)
{
2008f6b4:	defff804 	addi	sp,sp,-32
2008f6b8:	dfc00715 	stw	ra,28(sp)
2008f6bc:	df000615 	stw	fp,24(sp)
2008f6c0:	df000604 	addi	fp,sp,24
2008f6c4:	e13ffc15 	stw	r4,-16(fp)
2008f6c8:	e17ffd15 	stw	r5,-12(fp)
2008f6cc:	e1bffe15 	stw	r6,-8(fp)
2008f6d0:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
2008f6d4:	e0bfff17 	ldw	r2,-4(fp)
2008f6d8:	d8800015 	stw	r2,0(sp)
2008f6dc:	e0800217 	ldw	r2,8(fp)
2008f6e0:	d8800115 	stw	r2,4(sp)
2008f6e4:	e13ffc17 	ldw	r4,-16(fp)
2008f6e8:	e17ffd17 	ldw	r5,-12(fp)
2008f6ec:	e1bffe17 	ldw	r6,-8(fp)
2008f6f0:	000f883a 	mov	r7,zero
2008f6f4:	008f3cc0 	call	2008f3cc <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, 0, length, control);
}
2008f6f8:	e037883a 	mov	sp,fp
2008f6fc:	dfc00117 	ldw	ra,4(sp)
2008f700:	df000017 	ldw	fp,0(sp)
2008f704:	dec00204 	addi	sp,sp,8
2008f708:	f800283a 	ret

2008f70c <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number,
	alt_u8 write_burst_count,
	alt_u16 write_stride)
{
2008f70c:	deffee04 	addi	sp,sp,-72
2008f710:	dfc01115 	stw	ra,68(sp)
2008f714:	df001015 	stw	fp,64(sp)
2008f718:	df001004 	addi	fp,sp,64
2008f71c:	e13ff915 	stw	r4,-28(fp)
2008f720:	e17ffa15 	stw	r5,-24(fp)
2008f724:	e1bffb15 	stw	r6,-20(fp)
2008f728:	e1fffc15 	stw	r7,-16(fp)
2008f72c:	e1000417 	ldw	r4,16(fp)
2008f730:	e0c00517 	ldw	r3,20(fp)
2008f734:	e0800617 	ldw	r2,24(fp)
2008f738:	e13ffd0d 	sth	r4,-12(fp)
2008f73c:	e0fffe05 	stb	r3,-8(fp)
2008f740:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor, 
2008f744:	e13ffd0b 	ldhu	r4,-12(fp)
2008f748:	e0fffe03 	ldbu	r3,-8(fp)
2008f74c:	e0bfff0b 	ldhu	r2,-4(fp)
2008f750:	e17ffb17 	ldw	r5,-20(fp)
2008f754:	d9400015 	stw	r5,0(sp)
2008f758:	e17ffc17 	ldw	r5,-16(fp)
2008f75c:	d9400115 	stw	r5,4(sp)
2008f760:	e1400217 	ldw	r5,8(fp)
2008f764:	d9400215 	stw	r5,8(sp)
2008f768:	e1400317 	ldw	r5,12(fp)
2008f76c:	d9400315 	stw	r5,12(sp)
2008f770:	d9000415 	stw	r4,16(sp)
2008f774:	d8000515 	stw	zero,20(sp)
2008f778:	d8c00615 	stw	r3,24(sp)
2008f77c:	d8000715 	stw	zero,28(sp)
2008f780:	d8800815 	stw	r2,32(sp)
2008f784:	e13ff917 	ldw	r4,-28(fp)
2008f788:	e17ffa17 	ldw	r5,-24(fp)
2008f78c:	000d883a 	mov	r6,zero
2008f790:	000f883a 	mov	r7,zero
2008f794:	008f4700 	call	2008f470 <alt_msgdma_construct_prefetcher_extended_descriptor>
            0, 0, write_address_high, write_address_low, length, control, 
			sequence_number, 0, write_burst_count, 0, write_stride);
}
2008f798:	e037883a 	mov	sp,fp
2008f79c:	dfc00117 	ldw	ra,4(sp)
2008f7a0:	df000017 	ldw	fp,0(sp)
2008f7a4:	dec00204 	addi	sp,sp,8
2008f7a8:	f800283a 	ret

2008f7ac <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
2008f7ac:	deffee04 	addi	sp,sp,-72
2008f7b0:	dfc01115 	stw	ra,68(sp)
2008f7b4:	df001015 	stw	fp,64(sp)
2008f7b8:	df001004 	addi	fp,sp,64
2008f7bc:	e13ff915 	stw	r4,-28(fp)
2008f7c0:	e17ffa15 	stw	r5,-24(fp)
2008f7c4:	e1bffb15 	stw	r6,-20(fp)
2008f7c8:	e1fffc15 	stw	r7,-16(fp)
2008f7cc:	e1000417 	ldw	r4,16(fp)
2008f7d0:	e0c00517 	ldw	r3,20(fp)
2008f7d4:	e0800617 	ldw	r2,24(fp)
2008f7d8:	e13ffd0d 	sth	r4,-12(fp)
2008f7dc:	e0fffe05 	stb	r3,-8(fp)
2008f7e0:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
2008f7e4:	e13ffd0b 	ldhu	r4,-12(fp)
2008f7e8:	e0fffe03 	ldbu	r3,-8(fp)
2008f7ec:	e0bfff0b 	ldhu	r2,-4(fp)
2008f7f0:	d8000015 	stw	zero,0(sp)
2008f7f4:	d8000115 	stw	zero,4(sp)
2008f7f8:	e1400217 	ldw	r5,8(fp)
2008f7fc:	d9400215 	stw	r5,8(sp)
2008f800:	e1400317 	ldw	r5,12(fp)
2008f804:	d9400315 	stw	r5,12(sp)
2008f808:	d9000415 	stw	r4,16(sp)
2008f80c:	d8c00515 	stw	r3,20(sp)
2008f810:	d8000615 	stw	zero,24(sp)
2008f814:	d8800715 	stw	r2,28(sp)
2008f818:	d8000815 	stw	zero,32(sp)
2008f81c:	e13ff917 	ldw	r4,-28(fp)
2008f820:	e17ffa17 	ldw	r5,-24(fp)
2008f824:	e1bffb17 	ldw	r6,-20(fp)
2008f828:	e1fffc17 	ldw	r7,-16(fp)
2008f82c:	008f4700 	call	2008f470 <alt_msgdma_construct_prefetcher_extended_descriptor>
    		read_address_high, read_address_low, 0, 0, length, control, 
			sequence_number, read_burst_count, 0, read_stride, 0);
}
2008f830:	e037883a 	mov	sp,fp
2008f834:	dfc00117 	ldw	ra,4(sp)
2008f838:	df000017 	ldw	fp,0(sp)
2008f83c:	dec00204 	addi	sp,sp,8
2008f840:	f800283a 	ret

2008f844 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor>:
	alt_u16 sequence_number,
	alt_u8 read_burst_count,
	alt_u8 write_burst_count, 
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
2008f844:	deffec04 	addi	sp,sp,-80
2008f848:	dfc01315 	stw	ra,76(sp)
2008f84c:	df001215 	stw	fp,72(sp)
2008f850:	df001204 	addi	fp,sp,72
2008f854:	e13ff715 	stw	r4,-36(fp)
2008f858:	e17ff815 	stw	r5,-32(fp)
2008f85c:	e1bff915 	stw	r6,-28(fp)
2008f860:	e1fffa15 	stw	r7,-24(fp)
2008f864:	e1800617 	ldw	r6,24(fp)
2008f868:	e1400717 	ldw	r5,28(fp)
2008f86c:	e1000817 	ldw	r4,32(fp)
2008f870:	e0c00917 	ldw	r3,36(fp)
2008f874:	e0800a17 	ldw	r2,40(fp)
2008f878:	e1bffb0d 	sth	r6,-20(fp)
2008f87c:	e17ffc05 	stb	r5,-16(fp)
2008f880:	e13ffd05 	stb	r4,-12(fp)
2008f884:	e0fffe0d 	sth	r3,-8(fp)
2008f888:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
2008f88c:	e1bffb0b 	ldhu	r6,-20(fp)
2008f890:	e17ffc03 	ldbu	r5,-16(fp)
2008f894:	e13ffd03 	ldbu	r4,-12(fp)
2008f898:	e0fffe0b 	ldhu	r3,-8(fp)
2008f89c:	e0bfff0b 	ldhu	r2,-4(fp)
2008f8a0:	e1c00217 	ldw	r7,8(fp)
2008f8a4:	d9c00015 	stw	r7,0(sp)
2008f8a8:	e1c00317 	ldw	r7,12(fp)
2008f8ac:	d9c00115 	stw	r7,4(sp)
2008f8b0:	e1c00417 	ldw	r7,16(fp)
2008f8b4:	d9c00215 	stw	r7,8(sp)
2008f8b8:	e1c00517 	ldw	r7,20(fp)
2008f8bc:	d9c00315 	stw	r7,12(sp)
2008f8c0:	d9800415 	stw	r6,16(sp)
2008f8c4:	d9400515 	stw	r5,20(sp)
2008f8c8:	d9000615 	stw	r4,24(sp)
2008f8cc:	d8c00715 	stw	r3,28(sp)
2008f8d0:	d8800815 	stw	r2,32(sp)
2008f8d4:	e13ff717 	ldw	r4,-36(fp)
2008f8d8:	e17ff817 	ldw	r5,-32(fp)
2008f8dc:	e1bff917 	ldw	r6,-28(fp)
2008f8e0:	e1fffa17 	ldw	r7,-24(fp)
2008f8e4:	008f4700 	call	2008f470 <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, write_address_high, 
			write_address_low, length, control, sequence_number, 
			read_burst_count, write_burst_count, read_stride, write_stride);

}
2008f8e8:	e037883a 	mov	sp,fp
2008f8ec:	dfc00117 	ldw	ra,4(sp)
2008f8f0:	df000017 	ldw	fp,0(sp)
2008f8f4:	dec00204 	addi	sp,sp,8
2008f8f8:	f800283a 	ret

2008f8fc <alt_msgdma_prefetcher_add_standard_desc_to_list>:
 *           descriptor.next_ptr not pointing back to itslef)
 */
int alt_msgdma_prefetcher_add_standard_desc_to_list (
	alt_msgdma_prefetcher_standard_descriptor** list,
	alt_msgdma_prefetcher_standard_descriptor* descriptor)
{
2008f8fc:	defffc04 	addi	sp,sp,-16
2008f900:	df000315 	stw	fp,12(sp)
2008f904:	df000304 	addi	fp,sp,12
2008f908:	e13ffe15 	stw	r4,-8(fp)
2008f90c:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	
	if (descriptor == NULL)
2008f910:	e0bfff17 	ldw	r2,-4(fp)
2008f914:	1000021e 	bne	r2,zero,2008f920 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x24>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
2008f918:	00bffa84 	movi	r2,-22
2008f91c:	00002f06 	br	2008f9dc <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (descriptor->next_desc_ptr != (alt_u32)descriptor)
2008f920:	e0bfff17 	ldw	r2,-4(fp)
2008f924:	10c00317 	ldw	r3,12(r2)
2008f928:	e0bfff17 	ldw	r2,-4(fp)
2008f92c:	18800226 	beq	r3,r2,2008f938 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x3c>
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
2008f930:	00bffa84 	movi	r2,-22
2008f934:	00002906 	br	2008f9dc <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (*list == NULL)
2008f938:	e0bffe17 	ldw	r2,-8(fp)
2008f93c:	10800017 	ldw	r2,0(r2)
2008f940:	1000051e 	bne	r2,zero,2008f958 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x5c>
	{
		*list = descriptor;  /* make this root-node if list is empty */
2008f944:	e0bffe17 	ldw	r2,-8(fp)
2008f948:	e0ffff17 	ldw	r3,-4(fp)
2008f94c:	10c00015 	stw	r3,0(r2)
		return 0;  /* successfully added */
2008f950:	0005883a 	mov	r2,zero
2008f954:	00002106 	br	2008f9dc <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (*list == descriptor)
2008f958:	e0bffe17 	ldw	r2,-8(fp)
2008f95c:	10c00017 	ldw	r3,0(r2)
2008f960:	e0bfff17 	ldw	r2,-4(fp)
2008f964:	1880021e 	bne	r3,r2,2008f970 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x74>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
2008f968:	00bffa84 	movi	r2,-22
2008f96c:	00001b06 	br	2008f9dc <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
2008f970:	e0bffe17 	ldw	r2,-8(fp)
2008f974:	10800017 	ldw	r2,0(r2)
2008f978:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
2008f97c:	00000906 	br	2008f9a4 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xa8>
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
2008f980:	e0bffd17 	ldw	r2,-12(fp)
2008f984:	10c00317 	ldw	r3,12(r2)
2008f988:	e0bfff17 	ldw	r2,-4(fp)
2008f98c:	1880021e 	bne	r3,r2,2008f998 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x9c>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
2008f990:	00bffa84 	movi	r2,-22
2008f994:	00001106 	br	2008f9dc <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
2008f998:	e0bffd17 	ldw	r2,-12(fp)
2008f99c:	10800317 	ldw	r2,12(r2)
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		last_descr_ptr = 
2008f9a0:	e0bffd15 	stw	r2,-12(fp)
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
2008f9a4:	e0bffd17 	ldw	r2,-12(fp)
2008f9a8:	10800317 	ldw	r2,12(r2)
2008f9ac:	e0fffe17 	ldw	r3,-8(fp)
2008f9b0:	18c00017 	ldw	r3,0(r3)
2008f9b4:	10fff21e 	bne	r2,r3,2008f980 <__flash_rwdata_start+0xffffdb84>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* add this descriptor to end of list */
	last_descr_ptr->next_desc_ptr = (alt_u32)((uintptr_t)descriptor);
2008f9b8:	e0ffff17 	ldw	r3,-4(fp)
2008f9bc:	e0bffd17 	ldw	r2,-12(fp)
2008f9c0:	10c00315 	stw	r3,12(r2)
	/* ensure new last pointer points the start of the list */
	descriptor->next_desc_ptr = (alt_u32)((uintptr_t)*list);  
2008f9c4:	e0bffe17 	ldw	r2,-8(fp)
2008f9c8:	10800017 	ldw	r2,0(r2)
2008f9cc:	1007883a 	mov	r3,r2
2008f9d0:	e0bfff17 	ldw	r2,-4(fp)
2008f9d4:	10c00315 	stw	r3,12(r2)
	return 0; /* successfully added */
2008f9d8:	0005883a 	mov	r2,zero
}
2008f9dc:	e037883a 	mov	sp,fp
2008f9e0:	df000017 	ldw	fp,0(sp)
2008f9e4:	dec00104 	addi	sp,sp,4
2008f9e8:	f800283a 	ret

2008f9ec <alt_msgdma_prefetcher_add_extended_desc_to_list>:

int alt_msgdma_prefetcher_add_extended_desc_to_list (
	alt_msgdma_prefetcher_extended_descriptor** list,
	alt_msgdma_prefetcher_extended_descriptor* descriptor)
{
2008f9ec:	defff804 	addi	sp,sp,-32
2008f9f0:	df000715 	stw	fp,28(sp)
2008f9f4:	df000704 	addi	fp,sp,28
2008f9f8:	e13ffe15 	stw	r4,-8(fp)
2008f9fc:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	msgdma_addr64 root_node_addr, next_node_addr;
	
	if (descriptor == NULL)
2008fa00:	e13fff17 	ldw	r4,-4(fp)
2008fa04:	2000021e 	bne	r4,zero,2008fa10 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x24>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
2008fa08:	00bffa84 	movi	r2,-22
2008fa0c:	00005906 	br	2008fb74 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
2008fa10:	e13fff17 	ldw	r4,-4(fp)
2008fa14:	2015883a 	mov	r10,r4
2008fa18:	0017883a 	mov	r11,zero
2008fa1c:	e2bffc15 	stw	r10,-16(fp)
2008fa20:	e2fffd15 	stw	r11,-12(fp)
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
2008fa24:	e13fff17 	ldw	r4,-4(fp)
2008fa28:	21400317 	ldw	r5,12(r4)
2008fa2c:	e13ffc17 	ldw	r4,-16(fp)
2008fa30:	29000626 	beq	r5,r4,2008fa4c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
2008fa34:	e13fff17 	ldw	r4,-4(fp)
2008fa38:	21400b17 	ldw	r5,44(r4)
2008fa3c:	e13ffd17 	ldw	r4,-12(fp)
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
2008fa40:	29000226 	beq	r5,r4,2008fa4c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
2008fa44:	00bffa84 	movi	r2,-22
2008fa48:	00004a06 	br	2008fb74 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	if (*list == NULL)
2008fa4c:	e13ffe17 	ldw	r4,-8(fp)
2008fa50:	21000017 	ldw	r4,0(r4)
2008fa54:	2000051e 	bne	r4,zero,2008fa6c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x80>
	{
		*list = descriptor;  /* make this the root-node if list is empty */
2008fa58:	e0bffe17 	ldw	r2,-8(fp)
2008fa5c:	e0ffff17 	ldw	r3,-4(fp)
2008fa60:	10c00015 	stw	r3,0(r2)
		return 0;
2008fa64:	0005883a 	mov	r2,zero
2008fa68:	00004206 	br	2008fb74 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	if (*list == descriptor)
2008fa6c:	e13ffe17 	ldw	r4,-8(fp)
2008fa70:	21400017 	ldw	r5,0(r4)
2008fa74:	e13fff17 	ldw	r4,-4(fp)
2008fa78:	2900021e 	bne	r5,r4,2008fa84 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x98>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
2008fa7c:	00bffa84 	movi	r2,-22
2008fa80:	00003c06 	br	2008fb74 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
2008fa84:	e13ffe17 	ldw	r4,-8(fp)
2008fa88:	21000017 	ldw	r4,0(r4)
2008fa8c:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
2008fa90:	e13ffe17 	ldw	r4,-8(fp)
2008fa94:	21000017 	ldw	r4,0(r4)
2008fa98:	2011883a 	mov	r8,r4
2008fa9c:	0013883a 	mov	r9,zero
2008faa0:	e23ffa15 	stw	r8,-24(fp)
2008faa4:	e27ffb15 	stw	r9,-20(fp)
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
2008faa8:	00001806 	br	2008fb0c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x120>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* first check if descriptor already in the list */
		next_node_addr.u64 = (uintptr_t)descriptor;
2008faac:	e13fff17 	ldw	r4,-4(fp)
2008fab0:	200d883a 	mov	r6,r4
2008fab4:	000f883a 	mov	r7,zero
2008fab8:	e1bffc15 	stw	r6,-16(fp)
2008fabc:	e1fffd15 	stw	r7,-12(fp)
		if ((last_descr_ptr->next_desc_ptr_low == next_node_addr.u32[0])
2008fac0:	e13ff917 	ldw	r4,-28(fp)
2008fac4:	21400317 	ldw	r5,12(r4)
2008fac8:	e13ffc17 	ldw	r4,-16(fp)
2008facc:	2900061e 	bne	r5,r4,2008fae8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
			&& (last_descr_ptr->next_desc_ptr_high == next_node_addr.u32[1]))
2008fad0:	e13ff917 	ldw	r4,-28(fp)
2008fad4:	21400b17 	ldw	r5,44(r4)
2008fad8:	e13ffd17 	ldw	r4,-12(fp)
2008fadc:	2900021e 	bne	r5,r4,2008fae8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
2008fae0:	00bffa84 	movi	r2,-22
2008fae4:	00002306 	br	2008fb74 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
2008fae8:	e13ff917 	ldw	r4,-28(fp)
2008faec:	21000317 	ldw	r4,12(r4)
2008faf0:	e13ffc15 	stw	r4,-16(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
2008faf4:	e13ff917 	ldw	r4,-28(fp)
2008faf8:	21000b17 	ldw	r4,44(r4)
2008fafc:	e13ffd15 	stw	r4,-12(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
2008fb00:	e13ffc17 	ldw	r4,-16(fp)
2008fb04:	e17ffd17 	ldw	r5,-12(fp)
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
2008fb08:	e13ff915 	stw	r4,-28(fp)
	last_descr_ptr = *list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
2008fb0c:	e13ff917 	ldw	r4,-28(fp)
2008fb10:	21400317 	ldw	r5,12(r4)
2008fb14:	e13ffa17 	ldw	r4,-24(fp)
2008fb18:	29000426 	beq	r5,r4,2008fb2c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x140>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
2008fb1c:	e13ff917 	ldw	r4,-28(fp)
2008fb20:	21400b17 	ldw	r5,44(r4)
2008fb24:	e13ffb17 	ldw	r4,-20(fp)
2008fb28:	293fe01e 	bne	r5,r4,2008faac <__flash_rwdata_start+0xffffdcb0>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* add this descriptor to end of list */
	next_node_addr.u64 = (uintptr_t)descriptor;
2008fb2c:	e13fff17 	ldw	r4,-4(fp)
2008fb30:	2005883a 	mov	r2,r4
2008fb34:	0007883a 	mov	r3,zero
2008fb38:	e0bffc15 	stw	r2,-16(fp)
2008fb3c:	e0fffd15 	stw	r3,-12(fp)
	last_descr_ptr->next_desc_ptr_low = next_node_addr.u32[0];
2008fb40:	e0fffc17 	ldw	r3,-16(fp)
2008fb44:	e0bff917 	ldw	r2,-28(fp)
2008fb48:	10c00315 	stw	r3,12(r2)
	last_descr_ptr->next_desc_ptr_high = next_node_addr.u32[1];
2008fb4c:	e0fffd17 	ldw	r3,-12(fp)
2008fb50:	e0bff917 	ldw	r2,-28(fp)
2008fb54:	10c00b15 	stw	r3,44(r2)
	/* ensure new last pointer points the beginning of the list */
	descriptor->next_desc_ptr_low = root_node_addr.u32[0];
2008fb58:	e0fffa17 	ldw	r3,-24(fp)
2008fb5c:	e0bfff17 	ldw	r2,-4(fp)
2008fb60:	10c00315 	stw	r3,12(r2)
	descriptor->next_desc_ptr_high = root_node_addr.u32[1];
2008fb64:	e0fffb17 	ldw	r3,-20(fp)
2008fb68:	e0bfff17 	ldw	r2,-4(fp)
2008fb6c:	10c00b15 	stw	r3,44(r2)
	return 0;
2008fb70:	0005883a 	mov	r2,zero
}
2008fb74:	e037883a 	mov	sp,fp
2008fb78:	df000017 	ldw	fp,0(sp)
2008fb7c:	dec00104 	addi	sp,sp,4
2008fb80:	f800283a 	ret

2008fb84 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_std_list_own_by_hw_bits (
	alt_msgdma_prefetcher_standard_descriptor *list)
{
2008fb84:	defffc04 	addi	sp,sp,-16
2008fb88:	df000315 	stw	fp,12(sp)
2008fb8c:	df000304 	addi	fp,sp,12
2008fb90:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
2008fb94:	e03ffe15 	stw	zero,-8(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	if (list == NULL)
2008fb98:	e0bfff17 	ldw	r2,-4(fp)
2008fb9c:	1000021e 	bne	r2,zero,2008fba8 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x24>
	{
		return -EINVAL;  /* this list cannot be empty */
2008fba0:	00bffa84 	movi	r2,-22
2008fba4:	00001906 	br	2008fc0c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x88>
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
2008fba8:	e0bfff17 	ldw	r2,-4(fp)
2008fbac:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
2008fbb0:	00000a06 	br	2008fbdc <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x58>
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
2008fbb4:	e0bffd17 	ldw	r2,-12(fp)
2008fbb8:	10800717 	ldw	r2,28(r2)
2008fbbc:	e0bffe15 	stw	r2,-8(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
2008fbc0:	e0bffe17 	ldw	r2,-8(fp)
2008fbc4:	10d00034 	orhi	r3,r2,16384
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
2008fbc8:	e0bffd17 	ldw	r2,-12(fp)
2008fbcc:	10c00715 	stw	r3,28(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
2008fbd0:	e0bffd17 	ldw	r2,-12(fp)
2008fbd4:	10800317 	ldw	r2,12(r2)
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
2008fbd8:	e0bffd15 	stw	r2,-12(fp)
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
2008fbdc:	e0bffd17 	ldw	r2,-12(fp)
2008fbe0:	10c00317 	ldw	r3,12(r2)
2008fbe4:	e0bfff17 	ldw	r2,-4(fp)
2008fbe8:	18bff21e 	bne	r3,r2,2008fbb4 <__flash_rwdata_start+0xffffddb8>
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
2008fbec:	e0bffd17 	ldw	r2,-12(fp)
2008fbf0:	10800717 	ldw	r2,28(r2)
2008fbf4:	e0bffe15 	stw	r2,-8(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
2008fbf8:	e0bffe17 	ldw	r2,-8(fp)
2008fbfc:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
2008fc00:	e0bffd17 	ldw	r2,-12(fp)
2008fc04:	10c00715 	stw	r3,28(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	
	return 0;
2008fc08:	0005883a 	mov	r2,zero
}
2008fc0c:	e037883a 	mov	sp,fp
2008fc10:	df000017 	ldw	fp,0(sp)
2008fc14:	dec00104 	addi	sp,sp,4
2008fc18:	f800283a 	ret

2008fc1c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits (
	alt_msgdma_prefetcher_extended_descriptor *list)
{
2008fc1c:	defff804 	addi	sp,sp,-32
2008fc20:	df000715 	stw	fp,28(sp)
2008fc24:	df000704 	addi	fp,sp,28
2008fc28:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
2008fc2c:	e03ffa15 	stw	zero,-24(fp)
	msgdma_addr64 root_node_addr, next_node_addr;
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	
	if (list == NULL)
2008fc30:	e13fff17 	ldw	r4,-4(fp)
2008fc34:	2000021e 	bne	r4,zero,2008fc40 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x24>
	{
		return -EINVAL;  /* this list cannot be empty */
2008fc38:	00bffa84 	movi	r2,-22
2008fc3c:	00002806 	br	2008fce0 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xc4>
	}
	
	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
2008fc40:	e13fff17 	ldw	r4,-4(fp)
2008fc44:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;
2008fc48:	e13fff17 	ldw	r4,-4(fp)
2008fc4c:	2005883a 	mov	r2,r4
2008fc50:	0007883a 	mov	r3,zero
2008fc54:	e0bffb15 	stw	r2,-20(fp)
2008fc58:	e0fffc15 	stw	r3,-16(fp)

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
2008fc5c:	00001006 	br	2008fca0 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x84>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
2008fc60:	e0bff917 	ldw	r2,-28(fp)
2008fc64:	10800f17 	ldw	r2,60(r2)
2008fc68:	e0bffa15 	stw	r2,-24(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
2008fc6c:	e0bffa17 	ldw	r2,-24(fp)
2008fc70:	10d00034 	orhi	r3,r2,16384
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
2008fc74:	e0bff917 	ldw	r2,-28(fp)
2008fc78:	10c00f15 	stw	r3,60(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
2008fc7c:	e0bff917 	ldw	r2,-28(fp)
2008fc80:	10800317 	ldw	r2,12(r2)
2008fc84:	e0bffd15 	stw	r2,-12(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
2008fc88:	e0bff917 	ldw	r2,-28(fp)
2008fc8c:	10800b17 	ldw	r2,44(r2)
2008fc90:	e0bffe15 	stw	r2,-8(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
2008fc94:	e0bffd17 	ldw	r2,-12(fp)
2008fc98:	e0fffe17 	ldw	r3,-8(fp)
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
2008fc9c:	e0bff915 	stw	r2,-28(fp)
	last_descr_ptr = list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
2008fca0:	e0bff917 	ldw	r2,-28(fp)
2008fca4:	10c00317 	ldw	r3,12(r2)
2008fca8:	e0bffb17 	ldw	r2,-20(fp)
2008fcac:	18800426 	beq	r3,r2,2008fcc0 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xa4>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
2008fcb0:	e0bff917 	ldw	r2,-28(fp)
2008fcb4:	10c00b17 	ldw	r3,44(r2)
2008fcb8:	e0bffc17 	ldw	r2,-16(fp)
2008fcbc:	18bfe81e 	bne	r3,r2,2008fc60 <__flash_rwdata_start+0xffffde64>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
2008fcc0:	e0bff917 	ldw	r2,-28(fp)
2008fcc4:	10800f17 	ldw	r2,60(r2)
2008fcc8:	e0bffa15 	stw	r2,-24(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
2008fccc:	e0bffa17 	ldw	r2,-24(fp)
2008fcd0:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
2008fcd4:	e0bff917 	ldw	r2,-28(fp)
2008fcd8:	10c00f15 	stw	r3,60(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	return 0;
2008fcdc:	0005883a 	mov	r2,zero
}
2008fce0:	e037883a 	mov	sp,fp
2008fce4:	df000017 	ldw	fp,0(sp)
2008fce8:	dec00104 	addi	sp,sp,4
2008fcec:	f800283a 	ret

2008fcf0 <alt_msgdma_start_prefetcher_with_list_addr>:
int alt_msgdma_start_prefetcher_with_list_addr (
	alt_msgdma_dev *dev,
	alt_u64  list_addr,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
2008fcf0:	deffef04 	addi	sp,sp,-68
2008fcf4:	df001015 	stw	fp,64(sp)
2008fcf8:	df001004 	addi	fp,sp,64
2008fcfc:	e13ffb15 	stw	r4,-20(fp)
2008fd00:	e17ffc15 	stw	r5,-16(fp)
2008fd04:	e1bffd15 	stw	r6,-12(fp)
2008fd08:	3807883a 	mov	r3,r7
2008fd0c:	e0800117 	ldw	r2,4(fp)
2008fd10:	e0fffe05 	stb	r3,-8(fp)
2008fd14:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 prefetcher_ctl = 0;
2008fd18:	e03ff015 	stw	zero,-64(fp)
	alt_u32 dispatcher_ctl = 0;
2008fd1c:	e03ff115 	stw	zero,-60(fp)
	alt_irq_context context = 0;
2008fd20:	e03ff215 	stw	zero,-56(fp)
	
	/* use helper struct to get easy access to hi/low address */
	msgdma_addr64 root_node_addr;
	root_node_addr.u64 = list_addr;  
2008fd24:	e0bffc17 	ldw	r2,-16(fp)
2008fd28:	e0bff915 	stw	r2,-28(fp)
2008fd2c:	e0bffd17 	ldw	r2,-12(fp)
2008fd30:	e0bffa15 	stw	r2,-24(fp)
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND (dev->regs_lock, 0);
	
	/* case where prefetcher already started, return busy error */ 
	prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
2008fd34:	e0bffb17 	ldw	r2,-20(fp)
2008fd38:	10800617 	ldw	r2,24(r2)
2008fd3c:	10800037 	ldwio	r2,0(r2)
2008fd40:	e0bff015 	stw	r2,-64(fp)
	if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
2008fd44:	e0bff017 	ldw	r2,-64(fp)
2008fd48:	1080004c 	andi	r2,r2,1
2008fd4c:	10000226 	beq	r2,zero,2008fd58 <alt_msgdma_start_prefetcher_with_list_addr+0x68>
		/* release the registers semaphore */
		ALT_SEM_POST (dev->regs_lock);
		return -EBUSY;
2008fd50:	00bffc04 	movi	r2,-16
2008fd54:	00009206 	br	2008ffa0 <alt_msgdma_start_prefetcher_with_list_addr+0x2b0>
	}
		
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	   read or write masters  */
	/* stop issuing more descriptors */
	dispatcher_ctl = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
2008fd58:	00800804 	movi	r2,32
2008fd5c:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2008fd60:	0005303a 	rdctl	r2,status
2008fd64:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2008fd68:	e0fff317 	ldw	r3,-52(fp)
2008fd6c:	00bfff84 	movi	r2,-2
2008fd70:	1884703a 	and	r2,r3,r2
2008fd74:	1001703a 	wrctl	status,r2
  
  return context;
2008fd78:	e0bff317 	ldw	r2,-52(fp)
	
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
2008fd7c:	e0bff215 	stw	r2,-56(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
2008fd80:	e0bffb17 	ldw	r2,-20(fp)
2008fd84:	10800317 	ldw	r2,12(r2)
2008fd88:	10800104 	addi	r2,r2,4
2008fd8c:	e0fff117 	ldw	r3,-60(fp)
2008fd90:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS( dev->csr_base, 
2008fd94:	e0bffb17 	ldw	r2,-20(fp)
2008fd98:	10800317 	ldw	r2,12(r2)
2008fd9c:	e0fffb17 	ldw	r3,-20(fp)
2008fda0:	18c00317 	ldw	r3,12(r3)
2008fda4:	18c00037 	ldwio	r3,0(r3)
2008fda8:	10c00035 	stwio	r3,0(r2)
2008fdac:	e0bff217 	ldw	r2,-56(fp)
2008fdb0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2008fdb4:	e0bff417 	ldw	r2,-48(fp)
2008fdb8:	1001703a 	wrctl	status,r2
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up dispatcher to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if(dev->callback)
2008fdbc:	e0bffb17 	ldw	r2,-20(fp)
2008fdc0:	10800b17 	ldw	r2,44(r2)
2008fdc4:	10002326 	beq	r2,zero,2008fe54 <alt_msgdma_start_prefetcher_with_list_addr+0x164>
	{
		dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
2008fdc8:	e0bffb17 	ldw	r2,-20(fp)
2008fdcc:	10c00d17 	ldw	r3,52(r2)
2008fdd0:	e0bff117 	ldw	r2,-60(fp)
2008fdd4:	1884b03a 	or	r2,r3,r2
2008fdd8:	10800514 	ori	r2,r2,20
2008fddc:	e0bff115 	stw	r2,-60(fp)
				| ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
		dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
2008fde0:	e0fff117 	ldw	r3,-60(fp)
2008fde4:	00bff7c4 	movi	r2,-33
2008fde8:	1884703a 	and	r2,r3,r2
2008fdec:	e0bff115 	stw	r2,-60(fp)
		
		prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
2008fdf0:	e0bff017 	ldw	r2,-64(fp)
2008fdf4:	10800214 	ori	r2,r2,8
2008fdf8:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2008fdfc:	0005303a 	rdctl	r2,status
2008fe00:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2008fe04:	e0fff517 	ldw	r3,-44(fp)
2008fe08:	00bfff84 	movi	r2,-2
2008fe0c:	1884703a 	and	r2,r3,r2
2008fe10:	1001703a 	wrctl	status,r2
  
  return context;
2008fe14:	e0bff517 	ldw	r2,-44(fp)
	    /* making sure the read-modify-write below can't be pre-empted */
	    context = alt_irq_disable_all(); 
2008fe18:	e0bff215 	stw	r2,-56(fp)
	    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
2008fe1c:	e0bffb17 	ldw	r2,-20(fp)
2008fe20:	10800317 	ldw	r2,12(r2)
2008fe24:	10800104 	addi	r2,r2,4
2008fe28:	e0fff117 	ldw	r3,-60(fp)
2008fe2c:	10c00035 	stwio	r3,0(r2)
		IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
2008fe30:	e0bffb17 	ldw	r2,-20(fp)
2008fe34:	10800617 	ldw	r2,24(r2)
2008fe38:	e0fff017 	ldw	r3,-64(fp)
2008fe3c:	10c00035 	stwio	r3,0(r2)
2008fe40:	e0bff217 	ldw	r2,-56(fp)
2008fe44:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2008fe48:	e0bff617 	ldw	r2,-40(fp)
2008fe4c:	1001703a 	wrctl	status,r2
2008fe50:	00002306 	br	2008fee0 <alt_msgdma_start_prefetcher_with_list_addr+0x1f0>
	  *   - Stop on an error with any particular descriptor
	  *   - Disable interrupt generation
	  */
	 else
	 {
		 dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
2008fe54:	e0bffb17 	ldw	r2,-20(fp)
2008fe58:	10c00d17 	ldw	r3,52(r2)
2008fe5c:	e0bff117 	ldw	r2,-60(fp)
2008fe60:	1884b03a 	or	r2,r3,r2
2008fe64:	10800114 	ori	r2,r2,4
2008fe68:	e0bff115 	stw	r2,-60(fp)
		 dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
2008fe6c:	e0fff117 	ldw	r3,-60(fp)
2008fe70:	00bff3c4 	movi	r2,-49
2008fe74:	1884703a 	and	r2,r3,r2
2008fe78:	e0bff115 	stw	r2,-60(fp)
				 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
2008fe7c:	e0fff017 	ldw	r3,-64(fp)
2008fe80:	00bffdc4 	movi	r2,-9
2008fe84:	1884703a 	and	r2,r3,r2
2008fe88:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2008fe8c:	0005303a 	rdctl	r2,status
2008fe90:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2008fe94:	e0fff717 	ldw	r3,-36(fp)
2008fe98:	00bfff84 	movi	r2,-2
2008fe9c:	1884703a 	and	r2,r3,r2
2008fea0:	1001703a 	wrctl	status,r2
  
  return context;
2008fea4:	e0bff717 	ldw	r2,-36(fp)
	     /* making sure the read-modify-write below can't be pre-empted */
	     context = alt_irq_disable_all();
2008fea8:	e0bff215 	stw	r2,-56(fp)
	     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
2008feac:	e0bffb17 	ldw	r2,-20(fp)
2008feb0:	10800317 	ldw	r2,12(r2)
2008feb4:	10800104 	addi	r2,r2,4
2008feb8:	e0fff117 	ldw	r3,-60(fp)
2008febc:	10c00035 	stwio	r3,0(r2)
	     IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
2008fec0:	e0bffb17 	ldw	r2,-20(fp)
2008fec4:	10800617 	ldw	r2,24(r2)
2008fec8:	e0fff017 	ldw	r3,-64(fp)
2008fecc:	10c00035 	stwio	r3,0(r2)
2008fed0:	e0bff217 	ldw	r2,-56(fp)
2008fed4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2008fed8:	e0bff817 	ldw	r2,-32(fp)
2008fedc:	1001703a 	wrctl	status,r2
	     alt_irq_enable_all(context);
	 }   
	
	 /* set next descriptor registers to point to the list root-node */
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_LOW(dev->prefetcher_base,
2008fee0:	e0bffb17 	ldw	r2,-20(fp)
2008fee4:	10800617 	ldw	r2,24(r2)
2008fee8:	10800104 	addi	r2,r2,4
2008feec:	e0fff917 	ldw	r3,-28(fp)
2008fef0:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[0]);
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
2008fef4:	e0bffb17 	ldw	r2,-20(fp)
2008fef8:	10800617 	ldw	r2,24(r2)
2008fefc:	10800204 	addi	r2,r2,8
2008ff00:	e0fffa17 	ldw	r3,-24(fp)
2008ff04:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[1]);
		
	 /* set park-mode */
	 if (park_mode_en){
2008ff08:	e0bffe03 	ldbu	r2,-8(fp)
2008ff0c:	10000426 	beq	r2,zero,2008ff20 <alt_msgdma_start_prefetcher_with_list_addr+0x230>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
2008ff10:	e0bff017 	ldw	r2,-64(fp)
2008ff14:	10800414 	ori	r2,r2,16
2008ff18:	e0bff015 	stw	r2,-64(fp)
2008ff1c:	00000406 	br	2008ff30 <alt_msgdma_start_prefetcher_with_list_addr+0x240>
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
2008ff20:	e0fff017 	ldw	r3,-64(fp)
2008ff24:	00bffbc4 	movi	r2,-17
2008ff28:	1884703a 	and	r2,r3,r2
2008ff2c:	e0bff015 	stw	r2,-64(fp)
	 }
	 
	 /* set poll-en */
	 if (poll_en){
2008ff30:	e0bfff03 	ldbu	r2,-4(fp)
2008ff34:	10000e26 	beq	r2,zero,2008ff70 <alt_msgdma_start_prefetcher_with_list_addr+0x280>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
2008ff38:	e0bff017 	ldw	r2,-64(fp)
2008ff3c:	10800094 	ori	r2,r2,2
2008ff40:	e0bff015 	stw	r2,-64(fp)
		 if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
2008ff44:	e0bffb17 	ldw	r2,-20(fp)
2008ff48:	10800617 	ldw	r2,24(r2)
2008ff4c:	10800304 	addi	r2,r2,12
2008ff50:	10800037 	ldwio	r2,0(r2)
2008ff54:	10000a1e 	bne	r2,zero,2008ff80 <alt_msgdma_start_prefetcher_with_list_addr+0x290>
				 dev->prefetcher_base) == 0){
			 /* set poll frequency to some non-zero default value */
			 IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
2008ff58:	e0bffb17 	ldw	r2,-20(fp)
2008ff5c:	10800617 	ldw	r2,24(r2)
2008ff60:	10800304 	addi	r2,r2,12
2008ff64:	00c03fc4 	movi	r3,255
2008ff68:	10c00035 	stwio	r3,0(r2)
2008ff6c:	00000406 	br	2008ff80 <alt_msgdma_start_prefetcher_with_list_addr+0x290>
					 dev->prefetcher_base, 0xFF);
		 }
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_CLR_MASK; 
2008ff70:	e0fff017 	ldw	r3,-64(fp)
2008ff74:	00bfff44 	movi	r2,-3
2008ff78:	1884703a 	and	r2,r3,r2
2008ff7c:	e0bff015 	stw	r2,-64(fp)
	 }
	 
	 /* set the prefetcher run bit */
	 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_RUN_SET_MASK;
2008ff80:	e0bff017 	ldw	r2,-64(fp)
2008ff84:	10800054 	ori	r2,r2,1
2008ff88:	e0bff015 	stw	r2,-64(fp)
	 /* start the dma since run bit is set */
	 IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
2008ff8c:	e0bffb17 	ldw	r2,-20(fp)
2008ff90:	10800617 	ldw	r2,24(r2)
2008ff94:	e0fff017 	ldw	r3,-64(fp)
2008ff98:	10c00035 	stwio	r3,0(r2)
	  * Now that access to the registers is complete, release the registers
	  * semaphore so that other threads can access the registers.
	  */
	 ALT_SEM_POST (dev->regs_lock);
	 
	 return 0;
2008ff9c:	0005883a 	mov	r2,zero
}
2008ffa0:	e037883a 	mov	sp,fp
2008ffa4:	df000017 	ldw	fp,0(sp)
2008ffa8:	dec00104 	addi	sp,sp,4
2008ffac:	f800283a 	ret

2008ffb0 <alt_msgdma_start_prefetcher_with_std_desc_list>:
int alt_msgdma_start_prefetcher_with_std_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{	
2008ffb0:	defff704 	addi	sp,sp,-36
2008ffb4:	dfc00815 	stw	ra,32(sp)
2008ffb8:	df000715 	stw	fp,28(sp)
2008ffbc:	dc400615 	stw	r17,24(sp)
2008ffc0:	dc000515 	stw	r16,20(sp)
2008ffc4:	df000704 	addi	fp,sp,28
2008ffc8:	e13ffa15 	stw	r4,-24(fp)
2008ffcc:	e17ffb15 	stw	r5,-20(fp)
2008ffd0:	3007883a 	mov	r3,r6
2008ffd4:	3805883a 	mov	r2,r7
2008ffd8:	e0fffc05 	stb	r3,-16(fp)
2008ffdc:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_std_list_own_by_hw_bits(list) != 0){
2008ffe0:	e13ffb17 	ldw	r4,-20(fp)
2008ffe4:	008fb840 	call	2008fb84 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>
2008ffe8:	10000226 	beq	r2,zero,2008fff4 <alt_msgdma_start_prefetcher_with_std_desc_list+0x44>
		return -EINVAL;
2008ffec:	00bffa84 	movi	r2,-22
2008fff0:	00000b06 	br	20090020 <alt_msgdma_start_prefetcher_with_std_desc_list+0x70>
	}
	
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list,
2008fff4:	e0bffb17 	ldw	r2,-20(fp)
2008fff8:	1021883a 	mov	r16,r2
2008fffc:	0023883a 	mov	r17,zero
20090000:	e0fffc03 	ldbu	r3,-16(fp)
20090004:	e0bffd03 	ldbu	r2,-12(fp)
20090008:	d8800015 	stw	r2,0(sp)
2009000c:	e13ffa17 	ldw	r4,-24(fp)
20090010:	800b883a 	mov	r5,r16
20090014:	880d883a 	mov	r6,r17
20090018:	180f883a 	mov	r7,r3
2009001c:	008fcf00 	call	2008fcf0 <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
20090020:	e6fffe04 	addi	sp,fp,-8
20090024:	dfc00317 	ldw	ra,12(sp)
20090028:	df000217 	ldw	fp,8(sp)
2009002c:	dc400117 	ldw	r17,4(sp)
20090030:	dc000017 	ldw	r16,0(sp)
20090034:	dec00404 	addi	sp,sp,16
20090038:	f800283a 	ret

2009003c <alt_msgdma_start_prefetcher_with_extd_desc_list>:
int alt_msgdma_start_prefetcher_with_extd_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_extended_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
2009003c:	defff704 	addi	sp,sp,-36
20090040:	dfc00815 	stw	ra,32(sp)
20090044:	df000715 	stw	fp,28(sp)
20090048:	dc400615 	stw	r17,24(sp)
2009004c:	dc000515 	stw	r16,20(sp)
20090050:	df000704 	addi	fp,sp,28
20090054:	e13ffa15 	stw	r4,-24(fp)
20090058:	e17ffb15 	stw	r5,-20(fp)
2009005c:	3007883a 	mov	r3,r6
20090060:	3805883a 	mov	r2,r7
20090064:	e0fffc05 	stb	r3,-16(fp)
20090068:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list) != 0){
2009006c:	e13ffb17 	ldw	r4,-20(fp)
20090070:	008fc1c0 	call	2008fc1c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>
20090074:	10000226 	beq	r2,zero,20090080 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x44>
		return -EINVAL;
20090078:	00bffa84 	movi	r2,-22
2009007c:	00000b06 	br	200900ac <alt_msgdma_start_prefetcher_with_extd_desc_list+0x70>
	}
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list, 
20090080:	e0bffb17 	ldw	r2,-20(fp)
20090084:	1021883a 	mov	r16,r2
20090088:	0023883a 	mov	r17,zero
2009008c:	e0fffc03 	ldbu	r3,-16(fp)
20090090:	e0bffd03 	ldbu	r2,-12(fp)
20090094:	d8800015 	stw	r2,0(sp)
20090098:	e13ffa17 	ldw	r4,-24(fp)
2009009c:	800b883a 	mov	r5,r16
200900a0:	880d883a 	mov	r6,r17
200900a4:	180f883a 	mov	r7,r3
200900a8:	008fcf00 	call	2008fcf0 <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
200900ac:	e6fffe04 	addi	sp,fp,-8
200900b0:	dfc00317 	ldw	ra,12(sp)
200900b4:	df000217 	ldw	fp,8(sp)
200900b8:	dc400117 	ldw	r17,4(sp)
200900bc:	dc000017 	ldw	r16,0(sp)
200900c0:	dec00404 	addi	sp,sp,16
200900c4:	f800283a 	ret

200900c8 <alt_msgdma_open>:
 * Returns:
 * - Pointer to msgdma device instance structure, or null if the device
 *   could not be opened.
 */
alt_msgdma_dev* alt_msgdma_open (const char* name)
{
200900c8:	defffc04 	addi	sp,sp,-16
200900cc:	dfc00315 	stw	ra,12(sp)
200900d0:	df000215 	stw	fp,8(sp)
200900d4:	df000204 	addi	fp,sp,8
200900d8:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev* dev = NULL;
200900dc:	e03ffe15 	stw	zero,-8(fp)

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
200900e0:	e13fff17 	ldw	r4,-4(fp)
200900e4:	d1600d04 	addi	r5,gp,-32716
200900e8:	00908140 	call	20090814 <alt_find_dev>
200900ec:	e0bffe15 	stw	r2,-8(fp)

    if (NULL == dev)
200900f0:	e0bffe17 	ldw	r2,-8(fp)
200900f4:	1000041e 	bne	r2,zero,20090108 <alt_msgdma_open+0x40>
    {
        ALT_ERRNO = ENODEV;
200900f8:	008e5400 	call	2008e540 <alt_get_errno>
200900fc:	1007883a 	mov	r3,r2
20090100:	008004c4 	movi	r2,19
20090104:	18800015 	stw	r2,0(r3)
    }

    return dev;
20090108:	e0bffe17 	ldw	r2,-8(fp)
}
2009010c:	e037883a 	mov	sp,fp
20090110:	dfc00117 	ldw	ra,4(sp)
20090114:	df000017 	ldw	fp,0(sp)
20090118:	dec00204 	addi	sp,sp,8
2009011c:	f800283a 	ret

20090120 <alt_msgdma_init>:
 * This routine disables interrupts, descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_msgdma_init (alt_msgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
20090120:	defff804 	addi	sp,sp,-32
20090124:	dfc00715 	stw	ra,28(sp)
20090128:	df000615 	stw	fp,24(sp)
2009012c:	df000604 	addi	fp,sp,24
20090130:	e13ffd15 	stw	r4,-12(fp)
20090134:	e17ffe15 	stw	r5,-8(fp)
20090138:	e1bfff15 	stw	r6,-4(fp)
    extern alt_llist alt_msgdma_list;
    alt_u32 temporary_control;
    int error;

    if (dev->prefetcher_enable)
2009013c:	e0bffd17 	ldw	r2,-12(fp)
20090140:	10801783 	ldbu	r2,94(r2)
20090144:	10803fcc 	andi	r2,r2,255
20090148:	10000b26 	beq	r2,zero,20090178 <alt_msgdma_init+0x58>
    {
    	/* start prefetcher reset sequence */
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, 
2009014c:	e0bffd17 	ldw	r2,-12(fp)
20090150:	10800617 	ldw	r2,24(r2)
20090154:	00c00104 	movi	r3,4
20090158:	10c00035 	stwio	r3,0(r2)
    			ALT_MSGDMA_PREFETCHER_CTRL_RESET_SET_MASK);
    	/* wait until hw clears the bit */
    	while(ALT_MSGDMA_PREFETCHER_CTRL_RESET_GET(
2009015c:	0001883a 	nop
20090160:	e0bffd17 	ldw	r2,-12(fp)
20090164:	10800617 	ldw	r2,24(r2)
20090168:	10800037 	ldwio	r2,0(r2)
2009016c:	1080010c 	andi	r2,r2,4
20090170:	1005d0ba 	srai	r2,r2,2
20090174:	103ffa1e 	bne	r2,zero,20090160 <__flash_rwdata_start+0xffffe364>
    }    
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
20090178:	e0bffd17 	ldw	r2,-12(fp)
2009017c:	10800317 	ldw	r2,12(r2)
20090180:	10800104 	addi	r2,r2,4
20090184:	00c00084 	movi	r3,2
20090188:	10c00035 	stwio	r3,0(r2)
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
2009018c:	0001883a 	nop
20090190:	e0bffd17 	ldw	r2,-12(fp)
20090194:	10800317 	ldw	r2,12(r2)
20090198:	10800037 	ldwio	r2,0(r2)
    		& ALTERA_MSGDMA_CSR_RESET_STATE_MASK));
2009019c:	1080100c 	andi	r2,r2,64
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
200901a0:	103ffb1e 	bne	r2,zero,20090190 <__flash_rwdata_start+0xffffe394>
    * Disable interrupts, halt descriptor processing,
    * and clear status register content
    */

    /* disable global interrupt */
    temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
200901a4:	e0bffd17 	ldw	r2,-12(fp)
200901a8:	10800317 	ldw	r2,12(r2)
200901ac:	10800104 	addi	r2,r2,4
200901b0:	10800037 	ldwio	r2,0(r2)
200901b4:	1007883a 	mov	r3,r2
200901b8:	00bffbc4 	movi	r2,-17
200901bc:	1884703a 	and	r2,r3,r2
200901c0:	e0bffb15 	stw	r2,-20(fp)
    		& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    /* stopping descriptor */
    temporary_control |= ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
200901c4:	e0bffb17 	ldw	r2,-20(fp)
200901c8:	10800814 	ori	r2,r2,32
200901cc:	e0bffb15 	stw	r2,-20(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
200901d0:	e0bffd17 	ldw	r2,-12(fp)
200901d4:	10800317 	ldw	r2,12(r2)
200901d8:	10800104 	addi	r2,r2,4
200901dc:	e0fffb17 	ldw	r3,-20(fp)
200901e0:	10c00035 	stwio	r3,0(r2)

    /* clear the CSR status register */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base, 
200901e4:	e0bffd17 	ldw	r2,-12(fp)
200901e8:	10800317 	ldw	r2,12(r2)
200901ec:	e0fffd17 	ldw	r3,-12(fp)
200901f0:	18c00317 	ldw	r3,12(r3)
200901f4:	18c00037 	ldwio	r3,0(r3)
200901f8:	10c00035 	stwio	r3,0(r2)
    		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    
    if (dev->prefetcher_enable)
200901fc:	e0bffd17 	ldw	r2,-12(fp)
20090200:	10801783 	ldbu	r2,94(r2)
20090204:	10803fcc 	andi	r2,r2,255
20090208:	10000826 	beq	r2,zero,2009022c <alt_msgdma_init+0x10c>
    {
    	/* clear all status bits that are set, since theyre W1C */
    	IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base, 
2009020c:	e0bffd17 	ldw	r2,-12(fp)
20090210:	10800617 	ldw	r2,24(r2)
20090214:	10800404 	addi	r2,r2,16
20090218:	e0fffd17 	ldw	r3,-12(fp)
2009021c:	18c00617 	ldw	r3,24(r3)
20090220:	18c00404 	addi	r3,r3,16
20090224:	18c00037 	ldwio	r3,0(r3)
20090228:	10c00035 	stwio	r3,0(r2)
    			IORD_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base));
    }

    /* Register this instance of the msgdma controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_msgdma_list);
2009022c:	e13ffd17 	ldw	r4,-12(fp)
20090230:	d1600d04 	addi	r5,gp,-32716
20090234:	00906b80 	call	200906b8 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
20090238:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
2009023c:	e0bffc15 	stw	r2,-16(fp)
            
    if (!error)
20090240:	e0bffc17 	ldw	r2,-16(fp)
20090244:	1000081e 	bne	r2,zero,20090268 <alt_msgdma_init+0x148>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
20090248:	d8000015 	stw	zero,0(sp)
2009024c:	e13ffe17 	ldw	r4,-8(fp)
20090250:	e17fff17 	ldw	r5,-4(fp)
20090254:	01880274 	movhi	r6,8201
20090258:	31b9d404 	addi	r6,r6,-6320
2009025c:	e1fffd17 	ldw	r7,-12(fp)
20090260:	00908d40 	call	200908d4 <alt_ic_isr_register>
20090264:	00000306 	br	20090274 <alt_msgdma_init+0x154>
    }
    else
    {
        alt_printf("failed to create semaphores\n");
20090268:	01000034 	movhi	r4,0
2009026c:	21017404 	addi	r4,r4,1488
20090270:	0090f500 	call	20090f50 <alt_printf>
    }
    
    return;
20090274:	0001883a 	nop

}
20090278:	e037883a 	mov	sp,fp
2009027c:	dfc00117 	ldw	ra,4(sp)
20090280:	df000017 	ldw	fp,0(sp)
20090284:	dec00204 	addi	sp,sp,8
20090288:	f800283a 	ret

2009028c <alt_msgdma_register_callback>:
void alt_msgdma_register_callback(
	alt_msgdma_dev *dev,
	alt_msgdma_callback callback,
	alt_u32 control,
	void *context)
{
2009028c:	defffb04 	addi	sp,sp,-20
20090290:	df000415 	stw	fp,16(sp)
20090294:	df000404 	addi	fp,sp,16
20090298:	e13ffc15 	stw	r4,-16(fp)
2009029c:	e17ffd15 	stw	r5,-12(fp)
200902a0:	e1bffe15 	stw	r6,-8(fp)
200902a4:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
200902a8:	e0bffc17 	ldw	r2,-16(fp)
200902ac:	e0fffd17 	ldw	r3,-12(fp)
200902b0:	10c00b15 	stw	r3,44(r2)
    dev->callback_context = context;
200902b4:	e0bffc17 	ldw	r2,-16(fp)
200902b8:	e0ffff17 	ldw	r3,-4(fp)
200902bc:	10c00c15 	stw	r3,48(r2)
    dev->control          = control;
200902c0:	e0bffc17 	ldw	r2,-16(fp)
200902c4:	e0fffe17 	ldw	r3,-8(fp)
200902c8:	10c00d15 	stw	r3,52(r2)

    return ;
200902cc:	0001883a 	nop
}
200902d0:	e037883a 	mov	sp,fp
200902d4:	df000017 	ldw	fp,0(sp)
200902d8:	dec00104 	addi	sp,sp,4
200902dc:	f800283a 	ret

200902e0 <alt_msgdma_standard_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_standard_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
200902e0:	defffc04 	addi	sp,sp,-16
200902e4:	dfc00315 	stw	ra,12(sp)
200902e8:	df000215 	stw	fp,8(sp)
200902ec:	df000204 	addi	fp,sp,8
200902f0:	e13ffe15 	stw	r4,-8(fp)
200902f4:	e17fff15 	stw	r5,-4(fp)
   /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
    return alt_msgdma_descriptor_async_transfer(dev, desc, NULL);
200902f8:	e13ffe17 	ldw	r4,-8(fp)
200902fc:	e17fff17 	ldw	r5,-4(fp)
20090300:	000d883a 	mov	r6,zero
20090304:	008eab40 	call	2008eab4 <alt_msgdma_descriptor_async_transfer>

}
20090308:	e037883a 	mov	sp,fp
2009030c:	dfc00117 	ldw	ra,4(sp)
20090310:	df000017 	ldw	fp,0(sp)
20090314:	dec00204 	addi	sp,sp,8
20090318:	f800283a 	ret

2009031c <alt_msgdma_extended_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_extended_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
2009031c:	defffc04 	addi	sp,sp,-16
20090320:	dfc00315 	stw	ra,12(sp)
20090324:	df000215 	stw	fp,8(sp)
20090328:	df000204 	addi	fp,sp,8
2009032c:	e13ffe15 	stw	r4,-8(fp)
20090330:	e17fff15 	stw	r5,-4(fp)
    /*
    * Error detection/handling should be performed at the application
    * or callback level as appropriate.
    */
    return alt_msgdma_descriptor_async_transfer(dev, NULL, desc);
20090334:	e13ffe17 	ldw	r4,-8(fp)
20090338:	000b883a 	mov	r5,zero
2009033c:	e1bfff17 	ldw	r6,-4(fp)
20090340:	008eab40 	call	2008eab4 <alt_msgdma_descriptor_async_transfer>
}
20090344:	e037883a 	mov	sp,fp
20090348:	dfc00117 	ldw	ra,4(sp)
2009034c:	df000017 	ldw	fp,0(sp)
20090350:	dec00204 	addi	sp,sp,8
20090354:	f800283a 	ret

20090358 <alt_msgdma_standard_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_standard_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
20090358:	defffc04 	addi	sp,sp,-16
2009035c:	dfc00315 	stw	ra,12(sp)
20090360:	df000215 	stw	fp,8(sp)
20090364:	df000204 	addi	fp,sp,8
20090368:	e13ffe15 	stw	r4,-8(fp)
2009036c:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, desc, NULL);
20090370:	e13ffe17 	ldw	r4,-8(fp)
20090374:	e17fff17 	ldw	r5,-4(fp)
20090378:	000d883a 	mov	r6,zero
2009037c:	008ed840 	call	2008ed84 <alt_msgdma_descriptor_sync_transfer>
}
20090380:	e037883a 	mov	sp,fp
20090384:	dfc00117 	ldw	ra,4(sp)
20090388:	df000017 	ldw	fp,0(sp)
2009038c:	dec00204 	addi	sp,sp,8
20090390:	f800283a 	ret

20090394 <alt_msgdma_extended_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_extended_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
20090394:	defffc04 	addi	sp,sp,-16
20090398:	dfc00315 	stw	ra,12(sp)
2009039c:	df000215 	stw	fp,8(sp)
200903a0:	df000204 	addi	fp,sp,8
200903a4:	e13ffe15 	stw	r4,-8(fp)
200903a8:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, NULL, desc);
200903ac:	e13ffe17 	ldw	r4,-8(fp)
200903b0:	000b883a 	mov	r5,zero
200903b4:	e1bfff17 	ldw	r6,-4(fp)
200903b8:	008ed840 	call	2008ed84 <alt_msgdma_descriptor_sync_transfer>
}
200903bc:	e037883a 	mov	sp,fp
200903c0:	dfc00117 	ldw	ra,4(sp)
200903c4:	df000017 	ldw	fp,0(sp)
200903c8:	dec00204 	addi	sp,sp,8
200903cc:	f800283a 	ret

200903d0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
200903d0:	defff504 	addi	sp,sp,-44
200903d4:	df000a15 	stw	fp,40(sp)
200903d8:	df000a04 	addi	fp,sp,40
200903dc:	e13ffc15 	stw	r4,-16(fp)
200903e0:	e17ffd15 	stw	r5,-12(fp)
200903e4:	e1bffe15 	stw	r6,-8(fp)
200903e8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
200903ec:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
200903f0:	00800034 	movhi	r2,0
200903f4:	10896d04 	addi	r2,r2,9652
200903f8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
200903fc:	10003f26 	beq	r2,zero,200904fc <alt_alarm_start+0x12c>
  {
    if (alarm)
20090400:	e0bffc17 	ldw	r2,-16(fp)
20090404:	10003b26 	beq	r2,zero,200904f4 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
20090408:	e0bffc17 	ldw	r2,-16(fp)
2009040c:	e0fffe17 	ldw	r3,-8(fp)
20090410:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
20090414:	e0bffc17 	ldw	r2,-16(fp)
20090418:	e0ffff17 	ldw	r3,-4(fp)
2009041c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20090420:	0005303a 	rdctl	r2,status
20090424:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20090428:	e0fff817 	ldw	r3,-32(fp)
2009042c:	00bfff84 	movi	r2,-2
20090430:	1884703a 	and	r2,r3,r2
20090434:	1001703a 	wrctl	status,r2
  
  return context;
20090438:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
2009043c:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
20090440:	00800034 	movhi	r2,0
20090444:	10896e04 	addi	r2,r2,9656
20090448:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
2009044c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
20090450:	e0fffd17 	ldw	r3,-12(fp)
20090454:	e0bff617 	ldw	r2,-40(fp)
20090458:	1885883a 	add	r2,r3,r2
2009045c:	10c00044 	addi	r3,r2,1
20090460:	e0bffc17 	ldw	r2,-16(fp)
20090464:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
20090468:	e0bffc17 	ldw	r2,-16(fp)
2009046c:	10c00217 	ldw	r3,8(r2)
20090470:	e0bff617 	ldw	r2,-40(fp)
20090474:	1880042e 	bgeu	r3,r2,20090488 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
20090478:	e0bffc17 	ldw	r2,-16(fp)
2009047c:	00c00044 	movi	r3,1
20090480:	10c00405 	stb	r3,16(r2)
20090484:	00000206 	br	20090490 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
20090488:	e0bffc17 	ldw	r2,-16(fp)
2009048c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
20090490:	e0fffc17 	ldw	r3,-16(fp)
20090494:	00800034 	movhi	r2,0
20090498:	10895f04 	addi	r2,r2,9596
2009049c:	e0bff915 	stw	r2,-28(fp)
200904a0:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
200904a4:	e0bffa17 	ldw	r2,-24(fp)
200904a8:	e0fff917 	ldw	r3,-28(fp)
200904ac:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
200904b0:	e0bff917 	ldw	r2,-28(fp)
200904b4:	10c00017 	ldw	r3,0(r2)
200904b8:	e0bffa17 	ldw	r2,-24(fp)
200904bc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
200904c0:	e0bff917 	ldw	r2,-28(fp)
200904c4:	10800017 	ldw	r2,0(r2)
200904c8:	e0fffa17 	ldw	r3,-24(fp)
200904cc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
200904d0:	e0bff917 	ldw	r2,-28(fp)
200904d4:	e0fffa17 	ldw	r3,-24(fp)
200904d8:	10c00015 	stw	r3,0(r2)
200904dc:	e0bff717 	ldw	r2,-36(fp)
200904e0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200904e4:	e0bffb17 	ldw	r2,-20(fp)
200904e8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
200904ec:	0005883a 	mov	r2,zero
200904f0:	00000306 	br	20090500 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
200904f4:	00bffa84 	movi	r2,-22
200904f8:	00000106 	br	20090500 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
200904fc:	00bfde84 	movi	r2,-134
  }
}
20090500:	e037883a 	mov	sp,fp
20090504:	df000017 	ldw	fp,0(sp)
20090508:	dec00104 	addi	sp,sp,4
2009050c:	f800283a 	ret

20090510 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
20090510:	defffa04 	addi	sp,sp,-24
20090514:	dfc00515 	stw	ra,20(sp)
20090518:	df000415 	stw	fp,16(sp)
2009051c:	df000404 	addi	fp,sp,16
20090520:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
20090524:	008000c4 	movi	r2,3
20090528:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
2009052c:	e0fffd17 	ldw	r3,-12(fp)
20090530:	008003f4 	movhi	r2,15
20090534:	10909004 	addi	r2,r2,16960
20090538:	1885383a 	mul	r2,r3,r2
2009053c:	0101dcf4 	movhi	r4,1907
20090540:	21165004 	addi	r4,r4,22848
20090544:	100b883a 	mov	r5,r2
20090548:	008a7cc0 	call	2008a7cc <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
2009054c:	01200034 	movhi	r4,32768
20090550:	213fffc4 	addi	r4,r4,-1
20090554:	100b883a 	mov	r5,r2
20090558:	008a7cc0 	call	2008a7cc <__udivsi3>
2009055c:	e13fff17 	ldw	r4,-4(fp)
20090560:	100b883a 	mov	r5,r2
20090564:	008a7cc0 	call	2008a7cc <__udivsi3>
20090568:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
2009056c:	e0bffe17 	ldw	r2,-8(fp)
20090570:	10002a26 	beq	r2,zero,2009061c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
20090574:	e03ffc15 	stw	zero,-16(fp)
20090578:	00001706 	br	200905d8 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
2009057c:	00a00034 	movhi	r2,32768
20090580:	10bfffc4 	addi	r2,r2,-1
20090584:	10bfffc4 	addi	r2,r2,-1
20090588:	103ffe1e 	bne	r2,zero,20090584 <__flash_rwdata_start+0xffffe788>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
2009058c:	e0fffd17 	ldw	r3,-12(fp)
20090590:	008003f4 	movhi	r2,15
20090594:	10909004 	addi	r2,r2,16960
20090598:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
2009059c:	0101dcf4 	movhi	r4,1907
200905a0:	21165004 	addi	r4,r4,22848
200905a4:	100b883a 	mov	r5,r2
200905a8:	008a7cc0 	call	2008a7cc <__udivsi3>
200905ac:	01200034 	movhi	r4,32768
200905b0:	213fffc4 	addi	r4,r4,-1
200905b4:	100b883a 	mov	r5,r2
200905b8:	008a7cc0 	call	2008a7cc <__udivsi3>
200905bc:	1007883a 	mov	r3,r2
200905c0:	e0bfff17 	ldw	r2,-4(fp)
200905c4:	10c5c83a 	sub	r2,r2,r3
200905c8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
200905cc:	e0bffc17 	ldw	r2,-16(fp)
200905d0:	10800044 	addi	r2,r2,1
200905d4:	e0bffc15 	stw	r2,-16(fp)
200905d8:	e0fffc17 	ldw	r3,-16(fp)
200905dc:	e0bffe17 	ldw	r2,-8(fp)
200905e0:	18bfe616 	blt	r3,r2,2009057c <__flash_rwdata_start+0xffffe780>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
200905e4:	e0fffd17 	ldw	r3,-12(fp)
200905e8:	008003f4 	movhi	r2,15
200905ec:	10909004 	addi	r2,r2,16960
200905f0:	1885383a 	mul	r2,r3,r2
200905f4:	0101dcf4 	movhi	r4,1907
200905f8:	21165004 	addi	r4,r4,22848
200905fc:	100b883a 	mov	r5,r2
20090600:	008a7cc0 	call	2008a7cc <__udivsi3>
20090604:	1007883a 	mov	r3,r2
20090608:	e0bfff17 	ldw	r2,-4(fp)
2009060c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
20090610:	10bfffc4 	addi	r2,r2,-1
20090614:	103ffe1e 	bne	r2,zero,20090610 <__flash_rwdata_start+0xffffe814>
20090618:	00000d06 	br	20090650 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
2009061c:	e0fffd17 	ldw	r3,-12(fp)
20090620:	008003f4 	movhi	r2,15
20090624:	10909004 	addi	r2,r2,16960
20090628:	1885383a 	mul	r2,r3,r2
2009062c:	0101dcf4 	movhi	r4,1907
20090630:	21165004 	addi	r4,r4,22848
20090634:	100b883a 	mov	r5,r2
20090638:	008a7cc0 	call	2008a7cc <__udivsi3>
2009063c:	1007883a 	mov	r3,r2
20090640:	e0bfff17 	ldw	r2,-4(fp)
20090644:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
20090648:	10bfffc4 	addi	r2,r2,-1
2009064c:	00bffe16 	blt	zero,r2,20090648 <__flash_rwdata_start+0xffffe84c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
20090650:	0005883a 	mov	r2,zero
}
20090654:	e037883a 	mov	sp,fp
20090658:	dfc00117 	ldw	ra,4(sp)
2009065c:	df000017 	ldw	fp,0(sp)
20090660:	dec00204 	addi	sp,sp,8
20090664:	f800283a 	ret

20090668 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
20090668:	defffe04 	addi	sp,sp,-8
2009066c:	dfc00115 	stw	ra,4(sp)
20090670:	df000015 	stw	fp,0(sp)
20090674:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
20090678:	00800034 	movhi	r2,0
2009067c:	10895a04 	addi	r2,r2,9576
20090680:	10800017 	ldw	r2,0(r2)
20090684:	10000526 	beq	r2,zero,2009069c <alt_get_errno+0x34>
20090688:	00800034 	movhi	r2,0
2009068c:	10895a04 	addi	r2,r2,9576
20090690:	10800017 	ldw	r2,0(r2)
20090694:	103ee83a 	callr	r2
20090698:	00000206 	br	200906a4 <alt_get_errno+0x3c>
2009069c:	00800034 	movhi	r2,0
200906a0:	10896504 	addi	r2,r2,9620
}
200906a4:	e037883a 	mov	sp,fp
200906a8:	dfc00117 	ldw	ra,4(sp)
200906ac:	df000017 	ldw	fp,0(sp)
200906b0:	dec00204 	addi	sp,sp,8
200906b4:	f800283a 	ret

200906b8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
200906b8:	defffa04 	addi	sp,sp,-24
200906bc:	dfc00515 	stw	ra,20(sp)
200906c0:	df000415 	stw	fp,16(sp)
200906c4:	df000404 	addi	fp,sp,16
200906c8:	e13ffe15 	stw	r4,-8(fp)
200906cc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
200906d0:	e0bffe17 	ldw	r2,-8(fp)
200906d4:	10000326 	beq	r2,zero,200906e4 <alt_dev_llist_insert+0x2c>
200906d8:	e0bffe17 	ldw	r2,-8(fp)
200906dc:	10800217 	ldw	r2,8(r2)
200906e0:	1000061e 	bne	r2,zero,200906fc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
200906e4:	00906680 	call	20090668 <alt_get_errno>
200906e8:	1007883a 	mov	r3,r2
200906ec:	00800584 	movi	r2,22
200906f0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
200906f4:	00bffa84 	movi	r2,-22
200906f8:	00001306 	br	20090748 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
200906fc:	e0bffe17 	ldw	r2,-8(fp)
20090700:	e0ffff17 	ldw	r3,-4(fp)
20090704:	e0fffc15 	stw	r3,-16(fp)
20090708:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
2009070c:	e0bffd17 	ldw	r2,-12(fp)
20090710:	e0fffc17 	ldw	r3,-16(fp)
20090714:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
20090718:	e0bffc17 	ldw	r2,-16(fp)
2009071c:	10c00017 	ldw	r3,0(r2)
20090720:	e0bffd17 	ldw	r2,-12(fp)
20090724:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
20090728:	e0bffc17 	ldw	r2,-16(fp)
2009072c:	10800017 	ldw	r2,0(r2)
20090730:	e0fffd17 	ldw	r3,-12(fp)
20090734:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
20090738:	e0bffc17 	ldw	r2,-16(fp)
2009073c:	e0fffd17 	ldw	r3,-12(fp)
20090740:	10c00015 	stw	r3,0(r2)

  return 0;  
20090744:	0005883a 	mov	r2,zero
}
20090748:	e037883a 	mov	sp,fp
2009074c:	dfc00117 	ldw	ra,4(sp)
20090750:	df000017 	ldw	fp,0(sp)
20090754:	dec00204 	addi	sp,sp,8
20090758:	f800283a 	ret

2009075c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
2009075c:	defffd04 	addi	sp,sp,-12
20090760:	dfc00215 	stw	ra,8(sp)
20090764:	df000115 	stw	fp,4(sp)
20090768:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
2009076c:	00880274 	movhi	r2,8201
20090770:	10860204 	addi	r2,r2,6152
20090774:	e0bfff15 	stw	r2,-4(fp)
20090778:	00000606 	br	20090794 <_do_ctors+0x38>
        (*ctor) (); 
2009077c:	e0bfff17 	ldw	r2,-4(fp)
20090780:	10800017 	ldw	r2,0(r2)
20090784:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
20090788:	e0bfff17 	ldw	r2,-4(fp)
2009078c:	10bfff04 	addi	r2,r2,-4
20090790:	e0bfff15 	stw	r2,-4(fp)
20090794:	e0ffff17 	ldw	r3,-4(fp)
20090798:	00880274 	movhi	r2,8201
2009079c:	10860304 	addi	r2,r2,6156
200907a0:	18bff62e 	bgeu	r3,r2,2009077c <__flash_rwdata_start+0xffffe980>
        (*ctor) (); 
}
200907a4:	e037883a 	mov	sp,fp
200907a8:	dfc00117 	ldw	ra,4(sp)
200907ac:	df000017 	ldw	fp,0(sp)
200907b0:	dec00204 	addi	sp,sp,8
200907b4:	f800283a 	ret

200907b8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
200907b8:	defffd04 	addi	sp,sp,-12
200907bc:	dfc00215 	stw	ra,8(sp)
200907c0:	df000115 	stw	fp,4(sp)
200907c4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
200907c8:	00880274 	movhi	r2,8201
200907cc:	10860204 	addi	r2,r2,6152
200907d0:	e0bfff15 	stw	r2,-4(fp)
200907d4:	00000606 	br	200907f0 <_do_dtors+0x38>
        (*dtor) (); 
200907d8:	e0bfff17 	ldw	r2,-4(fp)
200907dc:	10800017 	ldw	r2,0(r2)
200907e0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
200907e4:	e0bfff17 	ldw	r2,-4(fp)
200907e8:	10bfff04 	addi	r2,r2,-4
200907ec:	e0bfff15 	stw	r2,-4(fp)
200907f0:	e0ffff17 	ldw	r3,-4(fp)
200907f4:	00880274 	movhi	r2,8201
200907f8:	10860304 	addi	r2,r2,6156
200907fc:	18bff62e 	bgeu	r3,r2,200907d8 <__flash_rwdata_start+0xffffe9dc>
        (*dtor) (); 
}
20090800:	e037883a 	mov	sp,fp
20090804:	dfc00117 	ldw	ra,4(sp)
20090808:	df000017 	ldw	fp,0(sp)
2009080c:	dec00204 	addi	sp,sp,8
20090810:	f800283a 	ret

20090814 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
20090814:	defffa04 	addi	sp,sp,-24
20090818:	dfc00515 	stw	ra,20(sp)
2009081c:	df000415 	stw	fp,16(sp)
20090820:	df000404 	addi	fp,sp,16
20090824:	e13ffe15 	stw	r4,-8(fp)
20090828:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
2009082c:	e0bfff17 	ldw	r2,-4(fp)
20090830:	10800017 	ldw	r2,0(r2)
20090834:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
20090838:	e13ffe17 	ldw	r4,-8(fp)
2009083c:	008103c0 	call	2008103c <strlen>
20090840:	10800044 	addi	r2,r2,1
20090844:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
20090848:	00000d06 	br	20090880 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
2009084c:	e0bffc17 	ldw	r2,-16(fp)
20090850:	10c00217 	ldw	r3,8(r2)
20090854:	e0bffd17 	ldw	r2,-12(fp)
20090858:	1809883a 	mov	r4,r3
2009085c:	e17ffe17 	ldw	r5,-8(fp)
20090860:	100d883a 	mov	r6,r2
20090864:	009167c0 	call	2009167c <memcmp>
20090868:	1000021e 	bne	r2,zero,20090874 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
2009086c:	e0bffc17 	ldw	r2,-16(fp)
20090870:	00000706 	br	20090890 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
20090874:	e0bffc17 	ldw	r2,-16(fp)
20090878:	10800017 	ldw	r2,0(r2)
2009087c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
20090880:	e0fffc17 	ldw	r3,-16(fp)
20090884:	e0bfff17 	ldw	r2,-4(fp)
20090888:	18bff01e 	bne	r3,r2,2009084c <__flash_rwdata_start+0xffffea50>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
2009088c:	0005883a 	mov	r2,zero
}
20090890:	e037883a 	mov	sp,fp
20090894:	dfc00117 	ldw	ra,4(sp)
20090898:	df000017 	ldw	fp,0(sp)
2009089c:	dec00204 	addi	sp,sp,8
200908a0:	f800283a 	ret

200908a4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
200908a4:	defffe04 	addi	sp,sp,-8
200908a8:	dfc00115 	stw	ra,4(sp)
200908ac:	df000015 	stw	fp,0(sp)
200908b0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
200908b4:	0009883a 	mov	r4,zero
200908b8:	01440004 	movi	r5,4096
200908bc:	00915400 	call	20091540 <alt_icache_flush>
#endif
}
200908c0:	e037883a 	mov	sp,fp
200908c4:	dfc00117 	ldw	ra,4(sp)
200908c8:	df000017 	ldw	fp,0(sp)
200908cc:	dec00204 	addi	sp,sp,8
200908d0:	f800283a 	ret

200908d4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
200908d4:	defff904 	addi	sp,sp,-28
200908d8:	dfc00615 	stw	ra,24(sp)
200908dc:	df000515 	stw	fp,20(sp)
200908e0:	df000504 	addi	fp,sp,20
200908e4:	e13ffc15 	stw	r4,-16(fp)
200908e8:	e17ffd15 	stw	r5,-12(fp)
200908ec:	e1bffe15 	stw	r6,-8(fp)
200908f0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
200908f4:	e0800217 	ldw	r2,8(fp)
200908f8:	d8800015 	stw	r2,0(sp)
200908fc:	e13ffc17 	ldw	r4,-16(fp)
20090900:	e17ffd17 	ldw	r5,-12(fp)
20090904:	e1bffe17 	ldw	r6,-8(fp)
20090908:	e1ffff17 	ldw	r7,-4(fp)
2009090c:	0090ab40 	call	20090ab4 <alt_iic_isr_register>
}  
20090910:	e037883a 	mov	sp,fp
20090914:	dfc00117 	ldw	ra,4(sp)
20090918:	df000017 	ldw	fp,0(sp)
2009091c:	dec00204 	addi	sp,sp,8
20090920:	f800283a 	ret

20090924 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
20090924:	defff904 	addi	sp,sp,-28
20090928:	df000615 	stw	fp,24(sp)
2009092c:	df000604 	addi	fp,sp,24
20090930:	e13ffe15 	stw	r4,-8(fp)
20090934:	e17fff15 	stw	r5,-4(fp)
20090938:	e0bfff17 	ldw	r2,-4(fp)
2009093c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20090940:	0005303a 	rdctl	r2,status
20090944:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20090948:	e0fffb17 	ldw	r3,-20(fp)
2009094c:	00bfff84 	movi	r2,-2
20090950:	1884703a 	and	r2,r3,r2
20090954:	1001703a 	wrctl	status,r2
  
  return context;
20090958:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
2009095c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
20090960:	e0bffa17 	ldw	r2,-24(fp)
20090964:	00c00044 	movi	r3,1
20090968:	1884983a 	sll	r2,r3,r2
2009096c:	1007883a 	mov	r3,r2
20090970:	00800034 	movhi	r2,0
20090974:	10896c04 	addi	r2,r2,9648
20090978:	10800017 	ldw	r2,0(r2)
2009097c:	1886b03a 	or	r3,r3,r2
20090980:	00800034 	movhi	r2,0
20090984:	10896c04 	addi	r2,r2,9648
20090988:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
2009098c:	00800034 	movhi	r2,0
20090990:	10896c04 	addi	r2,r2,9648
20090994:	10800017 	ldw	r2,0(r2)
20090998:	100170fa 	wrctl	ienable,r2
2009099c:	e0bffc17 	ldw	r2,-16(fp)
200909a0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200909a4:	e0bffd17 	ldw	r2,-12(fp)
200909a8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
200909ac:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
200909b0:	0001883a 	nop
}
200909b4:	e037883a 	mov	sp,fp
200909b8:	df000017 	ldw	fp,0(sp)
200909bc:	dec00104 	addi	sp,sp,4
200909c0:	f800283a 	ret

200909c4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
200909c4:	defff904 	addi	sp,sp,-28
200909c8:	df000615 	stw	fp,24(sp)
200909cc:	df000604 	addi	fp,sp,24
200909d0:	e13ffe15 	stw	r4,-8(fp)
200909d4:	e17fff15 	stw	r5,-4(fp)
200909d8:	e0bfff17 	ldw	r2,-4(fp)
200909dc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200909e0:	0005303a 	rdctl	r2,status
200909e4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200909e8:	e0fffb17 	ldw	r3,-20(fp)
200909ec:	00bfff84 	movi	r2,-2
200909f0:	1884703a 	and	r2,r3,r2
200909f4:	1001703a 	wrctl	status,r2
  
  return context;
200909f8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
200909fc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
20090a00:	e0bffa17 	ldw	r2,-24(fp)
20090a04:	00c00044 	movi	r3,1
20090a08:	1884983a 	sll	r2,r3,r2
20090a0c:	0084303a 	nor	r2,zero,r2
20090a10:	1007883a 	mov	r3,r2
20090a14:	00800034 	movhi	r2,0
20090a18:	10896c04 	addi	r2,r2,9648
20090a1c:	10800017 	ldw	r2,0(r2)
20090a20:	1886703a 	and	r3,r3,r2
20090a24:	00800034 	movhi	r2,0
20090a28:	10896c04 	addi	r2,r2,9648
20090a2c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
20090a30:	00800034 	movhi	r2,0
20090a34:	10896c04 	addi	r2,r2,9648
20090a38:	10800017 	ldw	r2,0(r2)
20090a3c:	100170fa 	wrctl	ienable,r2
20090a40:	e0bffc17 	ldw	r2,-16(fp)
20090a44:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20090a48:	e0bffd17 	ldw	r2,-12(fp)
20090a4c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
20090a50:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
20090a54:	0001883a 	nop
}
20090a58:	e037883a 	mov	sp,fp
20090a5c:	df000017 	ldw	fp,0(sp)
20090a60:	dec00104 	addi	sp,sp,4
20090a64:	f800283a 	ret

20090a68 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
20090a68:	defffc04 	addi	sp,sp,-16
20090a6c:	df000315 	stw	fp,12(sp)
20090a70:	df000304 	addi	fp,sp,12
20090a74:	e13ffe15 	stw	r4,-8(fp)
20090a78:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
20090a7c:	000530fa 	rdctl	r2,ienable
20090a80:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
20090a84:	e0bfff17 	ldw	r2,-4(fp)
20090a88:	00c00044 	movi	r3,1
20090a8c:	1884983a 	sll	r2,r3,r2
20090a90:	1007883a 	mov	r3,r2
20090a94:	e0bffd17 	ldw	r2,-12(fp)
20090a98:	1884703a 	and	r2,r3,r2
20090a9c:	1004c03a 	cmpne	r2,r2,zero
20090aa0:	10803fcc 	andi	r2,r2,255
}
20090aa4:	e037883a 	mov	sp,fp
20090aa8:	df000017 	ldw	fp,0(sp)
20090aac:	dec00104 	addi	sp,sp,4
20090ab0:	f800283a 	ret

20090ab4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
20090ab4:	defff504 	addi	sp,sp,-44
20090ab8:	dfc00a15 	stw	ra,40(sp)
20090abc:	df000915 	stw	fp,36(sp)
20090ac0:	df000904 	addi	fp,sp,36
20090ac4:	e13ffc15 	stw	r4,-16(fp)
20090ac8:	e17ffd15 	stw	r5,-12(fp)
20090acc:	e1bffe15 	stw	r6,-8(fp)
20090ad0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
20090ad4:	00bffa84 	movi	r2,-22
20090ad8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
20090adc:	e0bffd17 	ldw	r2,-12(fp)
20090ae0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
20090ae4:	e0bff817 	ldw	r2,-32(fp)
20090ae8:	10800808 	cmpgei	r2,r2,32
20090aec:	1000271e 	bne	r2,zero,20090b8c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20090af0:	0005303a 	rdctl	r2,status
20090af4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20090af8:	e0fffa17 	ldw	r3,-24(fp)
20090afc:	00bfff84 	movi	r2,-2
20090b00:	1884703a 	and	r2,r3,r2
20090b04:	1001703a 	wrctl	status,r2
  
  return context;
20090b08:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
20090b0c:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
20090b10:	00800034 	movhi	r2,0
20090b14:	10897a04 	addi	r2,r2,9704
20090b18:	e0fff817 	ldw	r3,-32(fp)
20090b1c:	180690fa 	slli	r3,r3,3
20090b20:	10c5883a 	add	r2,r2,r3
20090b24:	e0fffe17 	ldw	r3,-8(fp)
20090b28:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
20090b2c:	00800034 	movhi	r2,0
20090b30:	10897a04 	addi	r2,r2,9704
20090b34:	e0fff817 	ldw	r3,-32(fp)
20090b38:	180690fa 	slli	r3,r3,3
20090b3c:	18c00104 	addi	r3,r3,4
20090b40:	10c5883a 	add	r2,r2,r3
20090b44:	e0ffff17 	ldw	r3,-4(fp)
20090b48:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
20090b4c:	e0bffe17 	ldw	r2,-8(fp)
20090b50:	10000526 	beq	r2,zero,20090b68 <alt_iic_isr_register+0xb4>
20090b54:	e0bff817 	ldw	r2,-32(fp)
20090b58:	e13ffc17 	ldw	r4,-16(fp)
20090b5c:	100b883a 	mov	r5,r2
20090b60:	00909240 	call	20090924 <alt_ic_irq_enable>
20090b64:	00000406 	br	20090b78 <alt_iic_isr_register+0xc4>
20090b68:	e0bff817 	ldw	r2,-32(fp)
20090b6c:	e13ffc17 	ldw	r4,-16(fp)
20090b70:	100b883a 	mov	r5,r2
20090b74:	00909c40 	call	200909c4 <alt_ic_irq_disable>
20090b78:	e0bff715 	stw	r2,-36(fp)
20090b7c:	e0bff917 	ldw	r2,-28(fp)
20090b80:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20090b84:	e0bffb17 	ldw	r2,-20(fp)
20090b88:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
20090b8c:	e0bff717 	ldw	r2,-36(fp)
}
20090b90:	e037883a 	mov	sp,fp
20090b94:	dfc00117 	ldw	ra,4(sp)
20090b98:	df000017 	ldw	fp,0(sp)
20090b9c:	dec00204 	addi	sp,sp,8
20090ba0:	f800283a 	ret

20090ba4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
20090ba4:	defff904 	addi	sp,sp,-28
20090ba8:	dfc00615 	stw	ra,24(sp)
20090bac:	df000515 	stw	fp,20(sp)
20090bb0:	df000504 	addi	fp,sp,20
20090bb4:	e13ffc15 	stw	r4,-16(fp)
20090bb8:	e17ffd15 	stw	r5,-12(fp)
20090bbc:	e1bffe15 	stw	r6,-8(fp)
20090bc0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
20090bc4:	e13ffd17 	ldw	r4,-12(fp)
20090bc8:	e17ffe17 	ldw	r5,-8(fp)
20090bcc:	e1bfff17 	ldw	r6,-4(fp)
20090bd0:	0090df80 	call	20090df8 <open>
20090bd4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
20090bd8:	e0bffb17 	ldw	r2,-20(fp)
20090bdc:	10001c16 	blt	r2,zero,20090c50 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
20090be0:	00800034 	movhi	r2,0
20090be4:	10842f04 	addi	r2,r2,4284
20090be8:	e0fffb17 	ldw	r3,-20(fp)
20090bec:	18c00324 	muli	r3,r3,12
20090bf0:	10c5883a 	add	r2,r2,r3
20090bf4:	10c00017 	ldw	r3,0(r2)
20090bf8:	e0bffc17 	ldw	r2,-16(fp)
20090bfc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
20090c00:	00800034 	movhi	r2,0
20090c04:	10842f04 	addi	r2,r2,4284
20090c08:	e0fffb17 	ldw	r3,-20(fp)
20090c0c:	18c00324 	muli	r3,r3,12
20090c10:	18c00104 	addi	r3,r3,4
20090c14:	10c5883a 	add	r2,r2,r3
20090c18:	10c00017 	ldw	r3,0(r2)
20090c1c:	e0bffc17 	ldw	r2,-16(fp)
20090c20:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
20090c24:	00800034 	movhi	r2,0
20090c28:	10842f04 	addi	r2,r2,4284
20090c2c:	e0fffb17 	ldw	r3,-20(fp)
20090c30:	18c00324 	muli	r3,r3,12
20090c34:	18c00204 	addi	r3,r3,8
20090c38:	10c5883a 	add	r2,r2,r3
20090c3c:	10c00017 	ldw	r3,0(r2)
20090c40:	e0bffc17 	ldw	r2,-16(fp)
20090c44:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
20090c48:	e13ffb17 	ldw	r4,-20(fp)
20090c4c:	008d5a00 	call	2008d5a0 <alt_release_fd>
  }
} 
20090c50:	e037883a 	mov	sp,fp
20090c54:	dfc00117 	ldw	ra,4(sp)
20090c58:	df000017 	ldw	fp,0(sp)
20090c5c:	dec00204 	addi	sp,sp,8
20090c60:	f800283a 	ret

20090c64 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
20090c64:	defffb04 	addi	sp,sp,-20
20090c68:	dfc00415 	stw	ra,16(sp)
20090c6c:	df000315 	stw	fp,12(sp)
20090c70:	df000304 	addi	fp,sp,12
20090c74:	e13ffd15 	stw	r4,-12(fp)
20090c78:	e17ffe15 	stw	r5,-8(fp)
20090c7c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
20090c80:	01000034 	movhi	r4,0
20090c84:	21043204 	addi	r4,r4,4296
20090c88:	e17ffd17 	ldw	r5,-12(fp)
20090c8c:	01800044 	movi	r6,1
20090c90:	01c07fc4 	movi	r7,511
20090c94:	0090ba40 	call	20090ba4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
20090c98:	01000034 	movhi	r4,0
20090c9c:	21042f04 	addi	r4,r4,4284
20090ca0:	e17ffe17 	ldw	r5,-8(fp)
20090ca4:	000d883a 	mov	r6,zero
20090ca8:	01c07fc4 	movi	r7,511
20090cac:	0090ba40 	call	20090ba4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
20090cb0:	01000034 	movhi	r4,0
20090cb4:	21043504 	addi	r4,r4,4308
20090cb8:	e17fff17 	ldw	r5,-4(fp)
20090cbc:	01800044 	movi	r6,1
20090cc0:	01c07fc4 	movi	r7,511
20090cc4:	0090ba40 	call	20090ba4 <alt_open_fd>
}  
20090cc8:	e037883a 	mov	sp,fp
20090ccc:	dfc00117 	ldw	ra,4(sp)
20090cd0:	df000017 	ldw	fp,0(sp)
20090cd4:	dec00204 	addi	sp,sp,8
20090cd8:	f800283a 	ret

20090cdc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
20090cdc:	defffe04 	addi	sp,sp,-8
20090ce0:	dfc00115 	stw	ra,4(sp)
20090ce4:	df000015 	stw	fp,0(sp)
20090ce8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
20090cec:	00800034 	movhi	r2,0
20090cf0:	10895a04 	addi	r2,r2,9576
20090cf4:	10800017 	ldw	r2,0(r2)
20090cf8:	10000526 	beq	r2,zero,20090d10 <alt_get_errno+0x34>
20090cfc:	00800034 	movhi	r2,0
20090d00:	10895a04 	addi	r2,r2,9576
20090d04:	10800017 	ldw	r2,0(r2)
20090d08:	103ee83a 	callr	r2
20090d0c:	00000206 	br	20090d18 <alt_get_errno+0x3c>
20090d10:	00800034 	movhi	r2,0
20090d14:	10896504 	addi	r2,r2,9620
}
20090d18:	e037883a 	mov	sp,fp
20090d1c:	dfc00117 	ldw	ra,4(sp)
20090d20:	df000017 	ldw	fp,0(sp)
20090d24:	dec00204 	addi	sp,sp,8
20090d28:	f800283a 	ret

20090d2c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
20090d2c:	defffd04 	addi	sp,sp,-12
20090d30:	df000215 	stw	fp,8(sp)
20090d34:	df000204 	addi	fp,sp,8
20090d38:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
20090d3c:	e0bfff17 	ldw	r2,-4(fp)
20090d40:	10800217 	ldw	r2,8(r2)
20090d44:	10d00034 	orhi	r3,r2,16384
20090d48:	e0bfff17 	ldw	r2,-4(fp)
20090d4c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
20090d50:	e03ffe15 	stw	zero,-8(fp)
20090d54:	00001d06 	br	20090dcc <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
20090d58:	00800034 	movhi	r2,0
20090d5c:	10842f04 	addi	r2,r2,4284
20090d60:	e0fffe17 	ldw	r3,-8(fp)
20090d64:	18c00324 	muli	r3,r3,12
20090d68:	10c5883a 	add	r2,r2,r3
20090d6c:	10c00017 	ldw	r3,0(r2)
20090d70:	e0bfff17 	ldw	r2,-4(fp)
20090d74:	10800017 	ldw	r2,0(r2)
20090d78:	1880111e 	bne	r3,r2,20090dc0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
20090d7c:	00800034 	movhi	r2,0
20090d80:	10842f04 	addi	r2,r2,4284
20090d84:	e0fffe17 	ldw	r3,-8(fp)
20090d88:	18c00324 	muli	r3,r3,12
20090d8c:	18c00204 	addi	r3,r3,8
20090d90:	10c5883a 	add	r2,r2,r3
20090d94:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
20090d98:	1000090e 	bge	r2,zero,20090dc0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
20090d9c:	e0bffe17 	ldw	r2,-8(fp)
20090da0:	10c00324 	muli	r3,r2,12
20090da4:	00800034 	movhi	r2,0
20090da8:	10842f04 	addi	r2,r2,4284
20090dac:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
20090db0:	e0bfff17 	ldw	r2,-4(fp)
20090db4:	18800226 	beq	r3,r2,20090dc0 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
20090db8:	00bffcc4 	movi	r2,-13
20090dbc:	00000a06 	br	20090de8 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
20090dc0:	e0bffe17 	ldw	r2,-8(fp)
20090dc4:	10800044 	addi	r2,r2,1
20090dc8:	e0bffe15 	stw	r2,-8(fp)
20090dcc:	00800034 	movhi	r2,0
20090dd0:	10895904 	addi	r2,r2,9572
20090dd4:	10800017 	ldw	r2,0(r2)
20090dd8:	1007883a 	mov	r3,r2
20090ddc:	e0bffe17 	ldw	r2,-8(fp)
20090de0:	18bfdd2e 	bgeu	r3,r2,20090d58 <__flash_rwdata_start+0xffffef5c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
20090de4:	0005883a 	mov	r2,zero
}
20090de8:	e037883a 	mov	sp,fp
20090dec:	df000017 	ldw	fp,0(sp)
20090df0:	dec00104 	addi	sp,sp,4
20090df4:	f800283a 	ret

20090df8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
20090df8:	defff604 	addi	sp,sp,-40
20090dfc:	dfc00915 	stw	ra,36(sp)
20090e00:	df000815 	stw	fp,32(sp)
20090e04:	df000804 	addi	fp,sp,32
20090e08:	e13ffd15 	stw	r4,-12(fp)
20090e0c:	e17ffe15 	stw	r5,-8(fp)
20090e10:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
20090e14:	00bfffc4 	movi	r2,-1
20090e18:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
20090e1c:	00bffb44 	movi	r2,-19
20090e20:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
20090e24:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
20090e28:	e13ffd17 	ldw	r4,-12(fp)
20090e2c:	01400034 	movhi	r5,0
20090e30:	29495704 	addi	r5,r5,9564
20090e34:	00908140 	call	20090814 <alt_find_dev>
20090e38:	e0bff815 	stw	r2,-32(fp)
20090e3c:	e0bff817 	ldw	r2,-32(fp)
20090e40:	1000051e 	bne	r2,zero,20090e58 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
20090e44:	e13ffd17 	ldw	r4,-12(fp)
20090e48:	00913780 	call	20091378 <alt_find_file>
20090e4c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
20090e50:	00800044 	movi	r2,1
20090e54:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
20090e58:	e0bff817 	ldw	r2,-32(fp)
20090e5c:	10002926 	beq	r2,zero,20090f04 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
20090e60:	e13ff817 	ldw	r4,-32(fp)
20090e64:	009148c0 	call	2009148c <alt_get_fd>
20090e68:	e0bff915 	stw	r2,-28(fp)
20090e6c:	e0bff917 	ldw	r2,-28(fp)
20090e70:	1000030e 	bge	r2,zero,20090e80 <open+0x88>
    {
      status = index;
20090e74:	e0bff917 	ldw	r2,-28(fp)
20090e78:	e0bffa15 	stw	r2,-24(fp)
20090e7c:	00002306 	br	20090f0c <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
20090e80:	e0bff917 	ldw	r2,-28(fp)
20090e84:	10c00324 	muli	r3,r2,12
20090e88:	00800034 	movhi	r2,0
20090e8c:	10842f04 	addi	r2,r2,4284
20090e90:	1885883a 	add	r2,r3,r2
20090e94:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
20090e98:	e0fffe17 	ldw	r3,-8(fp)
20090e9c:	00900034 	movhi	r2,16384
20090ea0:	10bfffc4 	addi	r2,r2,-1
20090ea4:	1886703a 	and	r3,r3,r2
20090ea8:	e0bffc17 	ldw	r2,-16(fp)
20090eac:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
20090eb0:	e0bffb17 	ldw	r2,-20(fp)
20090eb4:	1000051e 	bne	r2,zero,20090ecc <open+0xd4>
20090eb8:	e13ffc17 	ldw	r4,-16(fp)
20090ebc:	0090d2c0 	call	20090d2c <alt_file_locked>
20090ec0:	e0bffa15 	stw	r2,-24(fp)
20090ec4:	e0bffa17 	ldw	r2,-24(fp)
20090ec8:	10001016 	blt	r2,zero,20090f0c <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
20090ecc:	e0bff817 	ldw	r2,-32(fp)
20090ed0:	10800317 	ldw	r2,12(r2)
20090ed4:	10000826 	beq	r2,zero,20090ef8 <open+0x100>
20090ed8:	e0bff817 	ldw	r2,-32(fp)
20090edc:	10800317 	ldw	r2,12(r2)
20090ee0:	e13ffc17 	ldw	r4,-16(fp)
20090ee4:	e17ffd17 	ldw	r5,-12(fp)
20090ee8:	e1bffe17 	ldw	r6,-8(fp)
20090eec:	e1ffff17 	ldw	r7,-4(fp)
20090ef0:	103ee83a 	callr	r2
20090ef4:	00000106 	br	20090efc <open+0x104>
20090ef8:	0005883a 	mov	r2,zero
20090efc:	e0bffa15 	stw	r2,-24(fp)
20090f00:	00000206 	br	20090f0c <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
20090f04:	00bffb44 	movi	r2,-19
20090f08:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
20090f0c:	e0bffa17 	ldw	r2,-24(fp)
20090f10:	1000090e 	bge	r2,zero,20090f38 <open+0x140>
  {
    alt_release_fd (index);  
20090f14:	e13ff917 	ldw	r4,-28(fp)
20090f18:	008d5a00 	call	2008d5a0 <alt_release_fd>
    ALT_ERRNO = -status;
20090f1c:	0090cdc0 	call	20090cdc <alt_get_errno>
20090f20:	1007883a 	mov	r3,r2
20090f24:	e0bffa17 	ldw	r2,-24(fp)
20090f28:	0085c83a 	sub	r2,zero,r2
20090f2c:	18800015 	stw	r2,0(r3)
    return -1;
20090f30:	00bfffc4 	movi	r2,-1
20090f34:	00000106 	br	20090f3c <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
20090f38:	e0bff917 	ldw	r2,-28(fp)
}
20090f3c:	e037883a 	mov	sp,fp
20090f40:	dfc00117 	ldw	ra,4(sp)
20090f44:	df000017 	ldw	fp,0(sp)
20090f48:	dec00204 	addi	sp,sp,8
20090f4c:	f800283a 	ret

20090f50 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
20090f50:	defff204 	addi	sp,sp,-56
20090f54:	dfc00a15 	stw	ra,40(sp)
20090f58:	df000915 	stw	fp,36(sp)
20090f5c:	df000904 	addi	fp,sp,36
20090f60:	e1400215 	stw	r5,8(fp)
20090f64:	e1800315 	stw	r6,12(fp)
20090f68:	e1c00415 	stw	r7,16(fp)
20090f6c:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
20090f70:	e0800204 	addi	r2,fp,8
20090f74:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
20090f78:	e0bfff17 	ldw	r2,-4(fp)
20090f7c:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
20090f80:	00007106 	br	20091148 <alt_printf+0x1f8>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
20090f84:	e0bff807 	ldb	r2,-32(fp)
20090f88:	10800960 	cmpeqi	r2,r2,37
20090f8c:	1000041e 	bne	r2,zero,20090fa0 <alt_printf+0x50>
        {
            alt_putchar(c);
20090f90:	e0bff807 	ldb	r2,-32(fp)
20090f94:	1009883a 	mov	r4,r2
20090f98:	00911780 	call	20091178 <alt_putchar>
20090f9c:	00006a06 	br	20091148 <alt_printf+0x1f8>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
20090fa0:	e0bff717 	ldw	r2,-36(fp)
20090fa4:	10c00044 	addi	r3,r2,1
20090fa8:	e0fff715 	stw	r3,-36(fp)
20090fac:	10800003 	ldbu	r2,0(r2)
20090fb0:	e0bff805 	stb	r2,-32(fp)
20090fb4:	e0bff807 	ldb	r2,-32(fp)
20090fb8:	10006226 	beq	r2,zero,20091144 <alt_printf+0x1f4>
            {
                if (c == '%')
20090fbc:	e0bff807 	ldb	r2,-32(fp)
20090fc0:	10800958 	cmpnei	r2,r2,37
20090fc4:	1000041e 	bne	r2,zero,20090fd8 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
20090fc8:	e0bff807 	ldb	r2,-32(fp)
20090fcc:	1009883a 	mov	r4,r2
20090fd0:	00911780 	call	20091178 <alt_putchar>
20090fd4:	00005c06 	br	20091148 <alt_printf+0x1f8>
                } 
                else if (c == 'c')
20090fd8:	e0bff807 	ldb	r2,-32(fp)
20090fdc:	108018d8 	cmpnei	r2,r2,99
20090fe0:	1000081e 	bne	r2,zero,20091004 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
20090fe4:	e0bffe17 	ldw	r2,-8(fp)
20090fe8:	10c00104 	addi	r3,r2,4
20090fec:	e0fffe15 	stw	r3,-8(fp)
20090ff0:	10800017 	ldw	r2,0(r2)
20090ff4:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
20090ff8:	e13ffd17 	ldw	r4,-12(fp)
20090ffc:	00911780 	call	20091178 <alt_putchar>
20091000:	00005106 	br	20091148 <alt_printf+0x1f8>
                }
                else if (c == 'x')
20091004:	e0bff807 	ldb	r2,-32(fp)
20091008:	10801e18 	cmpnei	r2,r2,120
2009100c:	1000341e 	bne	r2,zero,200910e0 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
20091010:	e0bffe17 	ldw	r2,-8(fp)
20091014:	10c00104 	addi	r3,r2,4
20091018:	e0fffe15 	stw	r3,-8(fp)
2009101c:	10800017 	ldw	r2,0(r2)
20091020:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
20091024:	e0bffb17 	ldw	r2,-20(fp)
20091028:	1000031e 	bne	r2,zero,20091038 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
2009102c:	01000c04 	movi	r4,48
20091030:	00911780 	call	20091178 <alt_putchar>
                        continue;
20091034:	00004406 	br	20091148 <alt_printf+0x1f8>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
20091038:	00800704 	movi	r2,28
2009103c:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
20091040:	00000306 	br	20091050 <alt_printf+0x100>
                        digit_shift -= 4;
20091044:	e0bff917 	ldw	r2,-28(fp)
20091048:	10bfff04 	addi	r2,r2,-4
2009104c:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
20091050:	00c003c4 	movi	r3,15
20091054:	e0bff917 	ldw	r2,-28(fp)
20091058:	1884983a 	sll	r2,r3,r2
2009105c:	1007883a 	mov	r3,r2
20091060:	e0bffb17 	ldw	r2,-20(fp)
20091064:	1884703a 	and	r2,r3,r2
20091068:	103ff626 	beq	r2,zero,20091044 <__flash_rwdata_start+0xfffff248>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
2009106c:	00001906 	br	200910d4 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
20091070:	00c003c4 	movi	r3,15
20091074:	e0bff917 	ldw	r2,-28(fp)
20091078:	1884983a 	sll	r2,r3,r2
2009107c:	1007883a 	mov	r3,r2
20091080:	e0bffb17 	ldw	r2,-20(fp)
20091084:	1886703a 	and	r3,r3,r2
20091088:	e0bff917 	ldw	r2,-28(fp)
2009108c:	1884d83a 	srl	r2,r3,r2
20091090:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
20091094:	e0bffc17 	ldw	r2,-16(fp)
20091098:	108002a8 	cmpgeui	r2,r2,10
2009109c:	1000041e 	bne	r2,zero,200910b0 <alt_printf+0x160>
                            c = '0' + digit;
200910a0:	e0bffc17 	ldw	r2,-16(fp)
200910a4:	10800c04 	addi	r2,r2,48
200910a8:	e0bff805 	stb	r2,-32(fp)
200910ac:	00000306 	br	200910bc <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
200910b0:	e0bffc17 	ldw	r2,-16(fp)
200910b4:	108015c4 	addi	r2,r2,87
200910b8:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
200910bc:	e0bff807 	ldb	r2,-32(fp)
200910c0:	1009883a 	mov	r4,r2
200910c4:	00911780 	call	20091178 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
200910c8:	e0bff917 	ldw	r2,-28(fp)
200910cc:	10bfff04 	addi	r2,r2,-4
200910d0:	e0bff915 	stw	r2,-28(fp)
200910d4:	e0bff917 	ldw	r2,-28(fp)
200910d8:	103fe50e 	bge	r2,zero,20091070 <__flash_rwdata_start+0xfffff274>
200910dc:	00001a06 	br	20091148 <alt_printf+0x1f8>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
200910e0:	e0bff807 	ldb	r2,-32(fp)
200910e4:	10801cd8 	cmpnei	r2,r2,115
200910e8:	1000151e 	bne	r2,zero,20091140 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
200910ec:	e0bffe17 	ldw	r2,-8(fp)
200910f0:	10c00104 	addi	r3,r2,4
200910f4:	e0fffe15 	stw	r3,-8(fp)
200910f8:	10800017 	ldw	r2,0(r2)
200910fc:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
20091100:	00000906 	br	20091128 <alt_printf+0x1d8>
                      alt_putchar(*s++);
20091104:	e0bffa17 	ldw	r2,-24(fp)
20091108:	10c00044 	addi	r3,r2,1
2009110c:	e0fffa15 	stw	r3,-24(fp)
20091110:	10800003 	ldbu	r2,0(r2)
20091114:	10803fcc 	andi	r2,r2,255
20091118:	1080201c 	xori	r2,r2,128
2009111c:	10bfe004 	addi	r2,r2,-128
20091120:	1009883a 	mov	r4,r2
20091124:	00911780 	call	20091178 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
20091128:	e0bffa17 	ldw	r2,-24(fp)
2009112c:	10800003 	ldbu	r2,0(r2)
20091130:	10803fcc 	andi	r2,r2,255
20091134:	1080201c 	xori	r2,r2,128
20091138:	10bfe004 	addi	r2,r2,-128
2009113c:	103ff11e 	bne	r2,zero,20091104 <__flash_rwdata_start+0xfffff308>
20091140:	00000106 	br	20091148 <alt_printf+0x1f8>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
20091144:	00000706 	br	20091164 <alt_printf+0x214>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
20091148:	e0bff717 	ldw	r2,-36(fp)
2009114c:	10c00044 	addi	r3,r2,1
20091150:	e0fff715 	stw	r3,-36(fp)
20091154:	10800003 	ldbu	r2,0(r2)
20091158:	e0bff805 	stb	r2,-32(fp)
2009115c:	e0bff807 	ldb	r2,-32(fp)
20091160:	103f881e 	bne	r2,zero,20090f84 <__flash_rwdata_start+0xfffff188>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
20091164:	e037883a 	mov	sp,fp
20091168:	dfc00117 	ldw	ra,4(sp)
2009116c:	df000017 	ldw	fp,0(sp)
20091170:	dec00504 	addi	sp,sp,20
20091174:	f800283a 	ret

20091178 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
20091178:	defffd04 	addi	sp,sp,-12
2009117c:	dfc00215 	stw	ra,8(sp)
20091180:	df000115 	stw	fp,4(sp)
20091184:	df000104 	addi	fp,sp,4
20091188:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
2009118c:	00800034 	movhi	r2,0
20091190:	10895004 	addi	r2,r2,9536
20091194:	10800017 	ldw	r2,0(r2)
20091198:	10800217 	ldw	r2,8(r2)
2009119c:	e13fff17 	ldw	r4,-4(fp)
200911a0:	100b883a 	mov	r5,r2
200911a4:	008751c0 	call	2008751c <putc>
#endif
#endif
}
200911a8:	e037883a 	mov	sp,fp
200911ac:	dfc00117 	ldw	ra,4(sp)
200911b0:	df000017 	ldw	fp,0(sp)
200911b4:	dec00204 	addi	sp,sp,8
200911b8:	f800283a 	ret

200911bc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
200911bc:	defffa04 	addi	sp,sp,-24
200911c0:	df000515 	stw	fp,20(sp)
200911c4:	df000504 	addi	fp,sp,20
200911c8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200911cc:	0005303a 	rdctl	r2,status
200911d0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200911d4:	e0fffc17 	ldw	r3,-16(fp)
200911d8:	00bfff84 	movi	r2,-2
200911dc:	1884703a 	and	r2,r3,r2
200911e0:	1001703a 	wrctl	status,r2
  
  return context;
200911e4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
200911e8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
200911ec:	e0bfff17 	ldw	r2,-4(fp)
200911f0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
200911f4:	e0bffd17 	ldw	r2,-12(fp)
200911f8:	10800017 	ldw	r2,0(r2)
200911fc:	e0fffd17 	ldw	r3,-12(fp)
20091200:	18c00117 	ldw	r3,4(r3)
20091204:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
20091208:	e0bffd17 	ldw	r2,-12(fp)
2009120c:	10800117 	ldw	r2,4(r2)
20091210:	e0fffd17 	ldw	r3,-12(fp)
20091214:	18c00017 	ldw	r3,0(r3)
20091218:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
2009121c:	e0bffd17 	ldw	r2,-12(fp)
20091220:	e0fffd17 	ldw	r3,-12(fp)
20091224:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
20091228:	e0bffd17 	ldw	r2,-12(fp)
2009122c:	e0fffd17 	ldw	r3,-12(fp)
20091230:	10c00015 	stw	r3,0(r2)
20091234:	e0bffb17 	ldw	r2,-20(fp)
20091238:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2009123c:	e0bffe17 	ldw	r2,-8(fp)
20091240:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
20091244:	e037883a 	mov	sp,fp
20091248:	df000017 	ldw	fp,0(sp)
2009124c:	dec00104 	addi	sp,sp,4
20091250:	f800283a 	ret

20091254 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
20091254:	defffb04 	addi	sp,sp,-20
20091258:	dfc00415 	stw	ra,16(sp)
2009125c:	df000315 	stw	fp,12(sp)
20091260:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
20091264:	d0a01017 	ldw	r2,-32704(gp)
20091268:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
2009126c:	d0a01f17 	ldw	r2,-32644(gp)
20091270:	10800044 	addi	r2,r2,1
20091274:	d0a01f15 	stw	r2,-32644(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
20091278:	00002e06 	br	20091334 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
2009127c:	e0bffd17 	ldw	r2,-12(fp)
20091280:	10800017 	ldw	r2,0(r2)
20091284:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
20091288:	e0bffd17 	ldw	r2,-12(fp)
2009128c:	10800403 	ldbu	r2,16(r2)
20091290:	10803fcc 	andi	r2,r2,255
20091294:	10000426 	beq	r2,zero,200912a8 <alt_tick+0x54>
20091298:	d0a01f17 	ldw	r2,-32644(gp)
2009129c:	1000021e 	bne	r2,zero,200912a8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
200912a0:	e0bffd17 	ldw	r2,-12(fp)
200912a4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
200912a8:	e0bffd17 	ldw	r2,-12(fp)
200912ac:	10800217 	ldw	r2,8(r2)
200912b0:	d0e01f17 	ldw	r3,-32644(gp)
200912b4:	18801d36 	bltu	r3,r2,2009132c <alt_tick+0xd8>
200912b8:	e0bffd17 	ldw	r2,-12(fp)
200912bc:	10800403 	ldbu	r2,16(r2)
200912c0:	10803fcc 	andi	r2,r2,255
200912c4:	1000191e 	bne	r2,zero,2009132c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
200912c8:	e0bffd17 	ldw	r2,-12(fp)
200912cc:	10800317 	ldw	r2,12(r2)
200912d0:	e0fffd17 	ldw	r3,-12(fp)
200912d4:	18c00517 	ldw	r3,20(r3)
200912d8:	1809883a 	mov	r4,r3
200912dc:	103ee83a 	callr	r2
200912e0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
200912e4:	e0bfff17 	ldw	r2,-4(fp)
200912e8:	1000031e 	bne	r2,zero,200912f8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
200912ec:	e13ffd17 	ldw	r4,-12(fp)
200912f0:	00911bc0 	call	200911bc <alt_alarm_stop>
200912f4:	00000d06 	br	2009132c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
200912f8:	e0bffd17 	ldw	r2,-12(fp)
200912fc:	10c00217 	ldw	r3,8(r2)
20091300:	e0bfff17 	ldw	r2,-4(fp)
20091304:	1887883a 	add	r3,r3,r2
20091308:	e0bffd17 	ldw	r2,-12(fp)
2009130c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
20091310:	e0bffd17 	ldw	r2,-12(fp)
20091314:	10c00217 	ldw	r3,8(r2)
20091318:	d0a01f17 	ldw	r2,-32644(gp)
2009131c:	1880032e 	bgeu	r3,r2,2009132c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
20091320:	e0bffd17 	ldw	r2,-12(fp)
20091324:	00c00044 	movi	r3,1
20091328:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
2009132c:	e0bffe17 	ldw	r2,-8(fp)
20091330:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
20091334:	e0fffd17 	ldw	r3,-12(fp)
20091338:	d0a01004 	addi	r2,gp,-32704
2009133c:	18bfcf1e 	bne	r3,r2,2009127c <__flash_rwdata_start+0xfffff480>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
20091340:	0001883a 	nop
}
20091344:	e037883a 	mov	sp,fp
20091348:	dfc00117 	ldw	ra,4(sp)
2009134c:	df000017 	ldw	fp,0(sp)
20091350:	dec00204 	addi	sp,sp,8
20091354:	f800283a 	ret

20091358 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
20091358:	deffff04 	addi	sp,sp,-4
2009135c:	df000015 	stw	fp,0(sp)
20091360:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
20091364:	000170fa 	wrctl	ienable,zero
}
20091368:	e037883a 	mov	sp,fp
2009136c:	df000017 	ldw	fp,0(sp)
20091370:	dec00104 	addi	sp,sp,4
20091374:	f800283a 	ret

20091378 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
20091378:	defffb04 	addi	sp,sp,-20
2009137c:	dfc00415 	stw	ra,16(sp)
20091380:	df000315 	stw	fp,12(sp)
20091384:	df000304 	addi	fp,sp,12
20091388:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
2009138c:	00800034 	movhi	r2,0
20091390:	10895504 	addi	r2,r2,9556
20091394:	10800017 	ldw	r2,0(r2)
20091398:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
2009139c:	00003106 	br	20091464 <alt_find_file+0xec>
  {
    len = strlen(next->name);
200913a0:	e0bffd17 	ldw	r2,-12(fp)
200913a4:	10800217 	ldw	r2,8(r2)
200913a8:	1009883a 	mov	r4,r2
200913ac:	008103c0 	call	2008103c <strlen>
200913b0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
200913b4:	e0bffd17 	ldw	r2,-12(fp)
200913b8:	10c00217 	ldw	r3,8(r2)
200913bc:	e0bffe17 	ldw	r2,-8(fp)
200913c0:	10bfffc4 	addi	r2,r2,-1
200913c4:	1885883a 	add	r2,r3,r2
200913c8:	10800003 	ldbu	r2,0(r2)
200913cc:	10803fcc 	andi	r2,r2,255
200913d0:	1080201c 	xori	r2,r2,128
200913d4:	10bfe004 	addi	r2,r2,-128
200913d8:	10800bd8 	cmpnei	r2,r2,47
200913dc:	1000031e 	bne	r2,zero,200913ec <alt_find_file+0x74>
    {
      len -= 1;
200913e0:	e0bffe17 	ldw	r2,-8(fp)
200913e4:	10bfffc4 	addi	r2,r2,-1
200913e8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
200913ec:	e0bffe17 	ldw	r2,-8(fp)
200913f0:	e0ffff17 	ldw	r3,-4(fp)
200913f4:	1885883a 	add	r2,r3,r2
200913f8:	10800003 	ldbu	r2,0(r2)
200913fc:	10803fcc 	andi	r2,r2,255
20091400:	1080201c 	xori	r2,r2,128
20091404:	10bfe004 	addi	r2,r2,-128
20091408:	10800be0 	cmpeqi	r2,r2,47
2009140c:	1000081e 	bne	r2,zero,20091430 <alt_find_file+0xb8>
20091410:	e0bffe17 	ldw	r2,-8(fp)
20091414:	e0ffff17 	ldw	r3,-4(fp)
20091418:	1885883a 	add	r2,r3,r2
2009141c:	10800003 	ldbu	r2,0(r2)
20091420:	10803fcc 	andi	r2,r2,255
20091424:	1080201c 	xori	r2,r2,128
20091428:	10bfe004 	addi	r2,r2,-128
2009142c:	10000a1e 	bne	r2,zero,20091458 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
20091430:	e0bffd17 	ldw	r2,-12(fp)
20091434:	10c00217 	ldw	r3,8(r2)
20091438:	e0bffe17 	ldw	r2,-8(fp)
2009143c:	1809883a 	mov	r4,r3
20091440:	e17fff17 	ldw	r5,-4(fp)
20091444:	100d883a 	mov	r6,r2
20091448:	009167c0 	call	2009167c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
2009144c:	1000021e 	bne	r2,zero,20091458 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
20091450:	e0bffd17 	ldw	r2,-12(fp)
20091454:	00000806 	br	20091478 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
20091458:	e0bffd17 	ldw	r2,-12(fp)
2009145c:	10800017 	ldw	r2,0(r2)
20091460:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
20091464:	e0fffd17 	ldw	r3,-12(fp)
20091468:	00800034 	movhi	r2,0
2009146c:	10895504 	addi	r2,r2,9556
20091470:	18bfcb1e 	bne	r3,r2,200913a0 <__flash_rwdata_start+0xfffff5a4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
20091474:	0005883a 	mov	r2,zero
}
20091478:	e037883a 	mov	sp,fp
2009147c:	dfc00117 	ldw	ra,4(sp)
20091480:	df000017 	ldw	fp,0(sp)
20091484:	dec00204 	addi	sp,sp,8
20091488:	f800283a 	ret

2009148c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
2009148c:	defffc04 	addi	sp,sp,-16
20091490:	df000315 	stw	fp,12(sp)
20091494:	df000304 	addi	fp,sp,12
20091498:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
2009149c:	00bffa04 	movi	r2,-24
200914a0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
200914a4:	e03ffd15 	stw	zero,-12(fp)
200914a8:	00001d06 	br	20091520 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
200914ac:	00800034 	movhi	r2,0
200914b0:	10842f04 	addi	r2,r2,4284
200914b4:	e0fffd17 	ldw	r3,-12(fp)
200914b8:	18c00324 	muli	r3,r3,12
200914bc:	10c5883a 	add	r2,r2,r3
200914c0:	10800017 	ldw	r2,0(r2)
200914c4:	1000131e 	bne	r2,zero,20091514 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
200914c8:	00800034 	movhi	r2,0
200914cc:	10842f04 	addi	r2,r2,4284
200914d0:	e0fffd17 	ldw	r3,-12(fp)
200914d4:	18c00324 	muli	r3,r3,12
200914d8:	10c5883a 	add	r2,r2,r3
200914dc:	e0ffff17 	ldw	r3,-4(fp)
200914e0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
200914e4:	00800034 	movhi	r2,0
200914e8:	10895904 	addi	r2,r2,9572
200914ec:	10c00017 	ldw	r3,0(r2)
200914f0:	e0bffd17 	ldw	r2,-12(fp)
200914f4:	1880040e 	bge	r3,r2,20091508 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
200914f8:	00800034 	movhi	r2,0
200914fc:	10895904 	addi	r2,r2,9572
20091500:	e0fffd17 	ldw	r3,-12(fp)
20091504:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
20091508:	e0bffd17 	ldw	r2,-12(fp)
2009150c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
20091510:	00000606 	br	2009152c <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
20091514:	e0bffd17 	ldw	r2,-12(fp)
20091518:	10800044 	addi	r2,r2,1
2009151c:	e0bffd15 	stw	r2,-12(fp)
20091520:	e0bffd17 	ldw	r2,-12(fp)
20091524:	10800810 	cmplti	r2,r2,32
20091528:	103fe01e 	bne	r2,zero,200914ac <__flash_rwdata_start+0xfffff6b0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
2009152c:	e0bffe17 	ldw	r2,-8(fp)
}
20091530:	e037883a 	mov	sp,fp
20091534:	df000017 	ldw	fp,0(sp)
20091538:	dec00104 	addi	sp,sp,4
2009153c:	f800283a 	ret

20091540 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
20091540:	defffb04 	addi	sp,sp,-20
20091544:	df000415 	stw	fp,16(sp)
20091548:	df000404 	addi	fp,sp,16
2009154c:	e13ffe15 	stw	r4,-8(fp)
20091550:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
20091554:	e0bfff17 	ldw	r2,-4(fp)
20091558:	10840070 	cmpltui	r2,r2,4097
2009155c:	1000021e 	bne	r2,zero,20091568 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
20091560:	00840004 	movi	r2,4096
20091564:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
20091568:	e0fffe17 	ldw	r3,-8(fp)
2009156c:	e0bfff17 	ldw	r2,-4(fp)
20091570:	1885883a 	add	r2,r3,r2
20091574:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
20091578:	e0bffe17 	ldw	r2,-8(fp)
2009157c:	e0bffc15 	stw	r2,-16(fp)
20091580:	00000506 	br	20091598 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
20091584:	e0bffc17 	ldw	r2,-16(fp)
20091588:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
2009158c:	e0bffc17 	ldw	r2,-16(fp)
20091590:	10800804 	addi	r2,r2,32
20091594:	e0bffc15 	stw	r2,-16(fp)
20091598:	e0fffc17 	ldw	r3,-16(fp)
2009159c:	e0bffd17 	ldw	r2,-12(fp)
200915a0:	18bff836 	bltu	r3,r2,20091584 <__flash_rwdata_start+0xfffff788>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
200915a4:	e0bffe17 	ldw	r2,-8(fp)
200915a8:	108007cc 	andi	r2,r2,31
200915ac:	10000226 	beq	r2,zero,200915b8 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
200915b0:	e0bffc17 	ldw	r2,-16(fp)
200915b4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
200915b8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
200915bc:	e037883a 	mov	sp,fp
200915c0:	df000017 	ldw	fp,0(sp)
200915c4:	dec00104 	addi	sp,sp,4
200915c8:	f800283a 	ret

200915cc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
200915cc:	defffe04 	addi	sp,sp,-8
200915d0:	df000115 	stw	fp,4(sp)
200915d4:	df000104 	addi	fp,sp,4
200915d8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
200915dc:	e0bfff17 	ldw	r2,-4(fp)
200915e0:	10bffe84 	addi	r2,r2,-6
200915e4:	10c00428 	cmpgeui	r3,r2,16
200915e8:	18001a1e 	bne	r3,zero,20091654 <alt_exception_cause_generated_bad_addr+0x88>
200915ec:	100690ba 	slli	r3,r2,2
200915f0:	00880274 	movhi	r2,8201
200915f4:	10858104 	addi	r2,r2,5636
200915f8:	1885883a 	add	r2,r3,r2
200915fc:	10800017 	ldw	r2,0(r2)
20091600:	1000683a 	jmp	r2
20091604:	20091644 	addi	zero,r4,9305
20091608:	20091644 	addi	zero,r4,9305
2009160c:	20091654 	ori	zero,r4,9305
20091610:	20091654 	ori	zero,r4,9305
20091614:	20091654 	ori	zero,r4,9305
20091618:	20091644 	addi	zero,r4,9305
2009161c:	2009164c 	andi	zero,r4,9305
20091620:	20091654 	ori	zero,r4,9305
20091624:	20091644 	addi	zero,r4,9305
20091628:	20091644 	addi	zero,r4,9305
2009162c:	20091654 	ori	zero,r4,9305
20091630:	20091644 	addi	zero,r4,9305
20091634:	2009164c 	andi	zero,r4,9305
20091638:	20091654 	ori	zero,r4,9305
2009163c:	20091654 	ori	zero,r4,9305
20091640:	20091644 	addi	zero,r4,9305
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
20091644:	00800044 	movi	r2,1
20091648:	00000306 	br	20091658 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
2009164c:	0005883a 	mov	r2,zero
20091650:	00000106 	br	20091658 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
20091654:	0005883a 	mov	r2,zero
  }
}
20091658:	e037883a 	mov	sp,fp
2009165c:	df000017 	ldw	fp,0(sp)
20091660:	dec00104 	addi	sp,sp,4
20091664:	f800283a 	ret

20091668 <atexit>:
20091668:	200b883a 	mov	r5,r4
2009166c:	000d883a 	mov	r6,zero
20091670:	0009883a 	mov	r4,zero
20091674:	000f883a 	mov	r7,zero
20091678:	00916f81 	jmpi	200916f8 <__register_exitproc>

2009167c <memcmp>:
2009167c:	01c000c4 	movi	r7,3
20091680:	3980192e 	bgeu	r7,r6,200916e8 <memcmp+0x6c>
20091684:	2144b03a 	or	r2,r4,r5
20091688:	11c4703a 	and	r2,r2,r7
2009168c:	10000f26 	beq	r2,zero,200916cc <memcmp+0x50>
20091690:	20800003 	ldbu	r2,0(r4)
20091694:	28c00003 	ldbu	r3,0(r5)
20091698:	10c0151e 	bne	r2,r3,200916f0 <memcmp+0x74>
2009169c:	31bfff84 	addi	r6,r6,-2
200916a0:	01ffffc4 	movi	r7,-1
200916a4:	00000406 	br	200916b8 <memcmp+0x3c>
200916a8:	20800003 	ldbu	r2,0(r4)
200916ac:	28c00003 	ldbu	r3,0(r5)
200916b0:	31bfffc4 	addi	r6,r6,-1
200916b4:	10c00e1e 	bne	r2,r3,200916f0 <memcmp+0x74>
200916b8:	21000044 	addi	r4,r4,1
200916bc:	29400044 	addi	r5,r5,1
200916c0:	31fff91e 	bne	r6,r7,200916a8 <__flash_rwdata_start+0xfffff8ac>
200916c4:	0005883a 	mov	r2,zero
200916c8:	f800283a 	ret
200916cc:	20c00017 	ldw	r3,0(r4)
200916d0:	28800017 	ldw	r2,0(r5)
200916d4:	1880041e 	bne	r3,r2,200916e8 <memcmp+0x6c>
200916d8:	31bfff04 	addi	r6,r6,-4
200916dc:	21000104 	addi	r4,r4,4
200916e0:	29400104 	addi	r5,r5,4
200916e4:	39bff936 	bltu	r7,r6,200916cc <__flash_rwdata_start+0xfffff8d0>
200916e8:	303fe91e 	bne	r6,zero,20091690 <__flash_rwdata_start+0xfffff894>
200916ec:	003ff506 	br	200916c4 <__flash_rwdata_start+0xfffff8c8>
200916f0:	10c5c83a 	sub	r2,r2,r3
200916f4:	f800283a 	ret

200916f8 <__register_exitproc>:
200916f8:	00800034 	movhi	r2,0
200916fc:	defffa04 	addi	sp,sp,-24
20091700:	10894f04 	addi	r2,r2,9532
20091704:	dc000315 	stw	r16,12(sp)
20091708:	14000017 	ldw	r16,0(r2)
2009170c:	dc400415 	stw	r17,16(sp)
20091710:	dfc00515 	stw	ra,20(sp)
20091714:	80805217 	ldw	r2,328(r16)
20091718:	2023883a 	mov	r17,r4
2009171c:	10003626 	beq	r2,zero,200917f8 <__register_exitproc+0x100>
20091720:	10c00117 	ldw	r3,4(r2)
20091724:	010007c4 	movi	r4,31
20091728:	20c00e16 	blt	r4,r3,20091764 <__register_exitproc+0x6c>
2009172c:	1a400044 	addi	r9,r3,1
20091730:	8800211e 	bne	r17,zero,200917b8 <__register_exitproc+0xc0>
20091734:	18c00084 	addi	r3,r3,2
20091738:	18c7883a 	add	r3,r3,r3
2009173c:	18c7883a 	add	r3,r3,r3
20091740:	12400115 	stw	r9,4(r2)
20091744:	10c7883a 	add	r3,r2,r3
20091748:	19400015 	stw	r5,0(r3)
2009174c:	0005883a 	mov	r2,zero
20091750:	dfc00517 	ldw	ra,20(sp)
20091754:	dc400417 	ldw	r17,16(sp)
20091758:	dc000317 	ldw	r16,12(sp)
2009175c:	dec00604 	addi	sp,sp,24
20091760:	f800283a 	ret
20091764:	00880234 	movhi	r2,8200
20091768:	1081b504 	addi	r2,r2,1748
2009176c:	10002526 	beq	r2,zero,20091804 <__register_exitproc+0x10c>
20091770:	01006404 	movi	r4,400
20091774:	d9400015 	stw	r5,0(sp)
20091778:	d9800115 	stw	r6,4(sp)
2009177c:	d9c00215 	stw	r7,8(sp)
20091780:	00806d40 	call	200806d4 <malloc>
20091784:	d9400017 	ldw	r5,0(sp)
20091788:	d9800117 	ldw	r6,4(sp)
2009178c:	d9c00217 	ldw	r7,8(sp)
20091790:	10001c26 	beq	r2,zero,20091804 <__register_exitproc+0x10c>
20091794:	80c05217 	ldw	r3,328(r16)
20091798:	10000115 	stw	zero,4(r2)
2009179c:	02400044 	movi	r9,1
200917a0:	10c00015 	stw	r3,0(r2)
200917a4:	80805215 	stw	r2,328(r16)
200917a8:	10006215 	stw	zero,392(r2)
200917ac:	10006315 	stw	zero,396(r2)
200917b0:	0007883a 	mov	r3,zero
200917b4:	883fdf26 	beq	r17,zero,20091734 <__flash_rwdata_start+0xfffff938>
200917b8:	18d1883a 	add	r8,r3,r3
200917bc:	4211883a 	add	r8,r8,r8
200917c0:	1211883a 	add	r8,r2,r8
200917c4:	41802215 	stw	r6,136(r8)
200917c8:	01000044 	movi	r4,1
200917cc:	11806217 	ldw	r6,392(r2)
200917d0:	20c8983a 	sll	r4,r4,r3
200917d4:	310cb03a 	or	r6,r6,r4
200917d8:	11806215 	stw	r6,392(r2)
200917dc:	41c04215 	stw	r7,264(r8)
200917e0:	01800084 	movi	r6,2
200917e4:	89bfd31e 	bne	r17,r6,20091734 <__flash_rwdata_start+0xfffff938>
200917e8:	11806317 	ldw	r6,396(r2)
200917ec:	3108b03a 	or	r4,r6,r4
200917f0:	11006315 	stw	r4,396(r2)
200917f4:	003fcf06 	br	20091734 <__flash_rwdata_start+0xfffff938>
200917f8:	80805304 	addi	r2,r16,332
200917fc:	80805215 	stw	r2,328(r16)
20091800:	003fc706 	br	20091720 <__flash_rwdata_start+0xfffff924>
20091804:	00bfffc4 	movi	r2,-1
20091808:	003fd106 	br	20091750 <__flash_rwdata_start+0xfffff954>
